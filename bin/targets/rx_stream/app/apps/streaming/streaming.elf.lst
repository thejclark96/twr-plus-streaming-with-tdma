
/home/joel/Capstone/uwb-apps/bin/targets/rx_stream/app/apps/streaming/streaming.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/rx_stream/app/apps/streaming/streaming.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00025be8 vaddr 0x00025be8 paddr 0x00025be8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00025c00 memsz 0x00025c00 flags rwx
    LOAD off    0x00030530 vaddr 0x20000530 paddr 0x00025c00 align 2**16
         filesz 0x00001600 memsz 0x000070b4 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001dbc8  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00025be8  00025be8  00031b30  2**0  CONTENTS
  3 .ARM.exidx         00000018  00025be8  00025be8  00025be8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000458  200000d8  200000d8  00040000  2**2  ALLOC
  6 .data              00001600  20000530  00025c00  00030530  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20001b30  20001b30  00031b30  2**0  CONTENTS
  8 .bss               00005ab4  20001b30  00027200  00031b30  2**3  ALLOC
  9 .stack_dummy       000001b0  200075e8  200075e8  00031b30  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  00031ce0  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  00031d10  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00031dc2  2**0  CONTENTS, READONLY
 13 .debug_line        000417d1  00000000  00000000  00031dc6  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000adac5  00000000  00000000  00073597  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      00019be4  00000000  00000000  0012105c  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00003d58  00000000  00000000  0013ac40  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         0001a46e  00000000  00000000  0013e998  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         0004ad7a  00000000  00000000  00158e06  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00004f00  00000000  00000000  001a3b80  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       0000a860  00000000  00000000  001a8a80  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001b32e0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00025be8 l    d  .ARM.extab	00000000 .ARM.extab
00025be8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
20000530 l    d  .data	00000000 .data
20001b30 l    d  .bssnz	00000000 .bssnz
20001b30 l    d  .bss	00000000 .bss
200075e8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000530 l     O .data	00000004 sbrkBase
20000534 l     O .data	00000004 sbrkLimit
20000538 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003a errata_16
00008282 l     F .text	0000004a errata_31
000082cc l     F .text	0000003a errata_32
00008306 l     F .text	0000004a errata_36
00008350 l     F .text	0000003a errata_37
0000838a l     F .text	0000003a errata_57
000083c4 l     F .text	0000003a errata_66
000083fe l     F .text	0000004a errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00008698 l     F .text	0000012c stream_slot_cb
000087c4 l     F .text	000000c0 uwb_transport_cb
20001b30 l     O .bss	00000001 g_idx
20001b34 l     O .bss	00000004 g_missed_count
20001b38 l     O .bss	00000004 g_ok_count
20001d2d l     O .bss	00000001 uwb_config_updated
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008a80 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000540 l     O .data	00000df8 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_dev.c
0000959a l     F .text	0000000a uwb_dw1000_read_sts_rxtime
000095a4 l     F .text	00000008 uwb_dw1000_hal_noblock_wait
00009610 l     F .text	00000020 uwb_dw1000_calc_pdoa
00009630 l     F .text	00000008 uwb_dw1000_estimate_los
00009638 l     F .text	00000008 uwb_dw1000_calc_fppl
00009640 l     F .text	00000008 uwb_dw1000_calc_seq_rssi
00009648 l     F .text	00000008 uwb_dw1000_calc_rssi
00009650 l     F .text	00000008 uwb_dw1000_get_fppl
00009658 l     F .text	00000008 uwb_dw1000_get_rssi
00009660 l     F .text	00000028 uwb_dw1000_calc_clock_offset_ratio
00009688 l     F .text	00000008 uwb_dw1000_set_on_error_continue
00009690 l     F .text	00000008 uwb_dw1000_phy_repeated_frames
00009698 l     F .text	00000008 uwb_dw1000_phy_rx_reset
000096a0 l     F .text	00000008 uwb_dw1000_phy_forcetrxoff
000096a8 l     F .text	0000000c uwb_dw1000_phy_data_duration
000096b4 l     F .text	0000000c uwb_dw1000_phy_SHR_duration
000096c0 l     F .text	0000000c uwb_dw1000_phy_frame_duration
000096cc l     F .text	00000008 uwb_dw1000_read_txtime_lo32
000096d4 l     F .text	00000008 uwb_dw1000_read_txtime
000096dc l     F .text	00000008 uwb_dw1000_read_rxtime_lo32
000096e4 l     F .text	00000008 uwb_dw1000_read_rxtime
000096ec l     F .text	00000008 uwb_dw1000_read_systime_lo32
000096f4 l     F .text	00000008 uwb_dw1000_read_systime
000096fc l     F .text	00000008 uwb_dw1000_set_rxauto_disable
00009704 l     F .text	00000008 uwb_dw1000_set_wait4resp_delay
0000970c l     F .text	00000008 uwb_dw1000_set_wait4resp
00009714 l     F .text	00000008 uwb_dw1000_tx_wait
0000971c l     F .text	00000008 uwb_dw1000_write_tx_fctrl
00009724 l     F .text	00000008 uwb_dw1000_write_tx
0000972c l     F .text	00000008 uwb_dw1000_stop_rx
00009734 l     F .text	00000008 uwb_dw1000_start_rx
0000973c l     F .text	00000008 uwb_dw1000_start_tx
00009744 l     F .text	00000008 uwb_dw1000_set_delay_start
0000974c l     F .text	00000008 uwb_dw1000_set_abs_timeout
00009754 l     F .text	00000016 uwb_dw1000_set_rx_window
0000976a l     F .text	0000000a uwb_dw1000_adj_rx_timeout
00009774 l     F .text	0000000a uwb_dw1000_set_rx_timeout
0000977e l     F .text	00000008 uwb_dw1000_set_dblrxbuf
00009786 l     F .text	00000008 uwb_dw1000_txrf_power_value
0000978e l     F .text	00000008 uwb_dw1000_txrf_config
00009796 l     F .text	00000008 uwb_dw1000_mac_config
00009b04 l     F .text	0000001a uwb_dw1000_set_euid
00009b1e l     F .text	0000001a uwb_dw1000_set_uid
00009b38 l     F .text	0000001a uwb_dw1000_set_panid
00009ca2 l     F .text	00000008 uwb_dw1000_sleep_config
00009d20 l     F .text	00000008 uwb_dw1000_enter_sleep
00009fd0 l     F .text	00000008 uwb_dw1000_wakeup
0000a020 l     F .text	00000008 uwb_dw1000_enter_sleep_after_tx
0000a072 l     F .text	00000008 uwb_dw1000_enter_sleep_after_rx
000234ec l     O .text	00000015 __func__.0
00023504 l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_mac.c
0000a200 l     F .text	00000028 calc_rx_window_timeout
0000a228 l     F .text	00000012 dw1000_checkoverrun
0000a23a l     F .text	00000024 dw1000_irq
0000a848 l     F .text	00000022 update_rx_window_timeout
0000b2d0 l     F .text	00000a58 dw1000_interrupt_ev_cb
00023644 l     O .text	00000008 agc_config
0002364c l     O .text	00000008 chan_idx
00023654 l     O .text	00000020 digital_bb_config
00023674 l     O .text	00000004 dtune1
00023678 l     O .text	00000003 dwnsSFDlen
0002367c l     O .text	00000018 fs_pll_cfg
00023694 l     O .text	00000006 fs_pll_tune
000236d8 l     O .text	00000032 lde_replicaCoeff
0002370c l     O .text	00000002 rx_config
00023710 l     O .text	0000000c sftsh
0002371c l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_gpio.c
0000c964 l     F .text	00000050 hal_gpio_irq_handler
0000c9b4 l     F .text	0000002c hal_gpio_irq_setup
0000c9e0 l     F .text	0000001c hal_gpio_find_empty_slot
0000c9fc l     F .text	00000038 hal_gpio_find_pin
20001d30 l     O .bss	00000040 hal_gpio_irqs
20001d70 l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 hal_spi.c
0000cbe8 l     F .text	0000006e nrf52_irqm_handler
0000cc70 l     F .text	00000014 hal_spi_stop_transfer
0000cc84 l     F .text	0000004a hal_spi_config_slave
0000ccd0 l     F .text	000000bc hal_spi_init_master
0000cd8c l     F .text	000000ea hal_spi_config_master
0002375c l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0000d4bc l     F .text	00000016 os_main
20001ef8 l     O .bss	00001000 g_os_main_stack
20001df0 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0000d844 l     F .text	0000005c os_dev_add
0000d8a0 l     F .text	00000022 os_dev_initialize
0000d8c2 l     F .text	00000030 os_dev_init
20002f54 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20002f5c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
0000db2c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000dc78 l     F .text	00000010 os_msys_find_biggest_pool
0000dc88 l     F .text	0000002c os_msys_find_pool
0000dd00 l     F .text	00000044 os_msys_init_once
20002f74 l     O .bss	00000db0 os_msys_1_data
20003d24 l     O .bss	0000000c os_msys_1_mbuf_pool
20003d30 l     O .bss	0000001c os_msys_1_mempool
20001338 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0000df58 l     F .text	00000020 os_sanity_check_list_lock
0000df78 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0000e464 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000e620 l     F .text	00000054 os_deltatime
0000e674 l     F .text	00000020 os_time_change_notify
0000e694 l     F .text	0000005c os_time_tick
0000e7b8 l     F .text	00000048 os_time_populate_info
20003d70 l     O .bss	00000030 basetod
20001350 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000e958 l       .text	00000000 SVC_User
0000e976 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 tdma.c
0000ee40 l     F .text	000000e8 tdma_superframe_slot_cb
0000ef28 l     F .text	00000034 slot_timer_cb
0000ef5c l     F .text	0000002c superframe_cb
0000ef88 l     F .text	00000034 tdma_task
0000efbc l     F .text	0000004c tdma_tasks_init
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000f3b8 l     F .text	00000068 adjust_for_epoch_to_rm
0000f420 l     F .text	0000002e reset_cb
0000f44e l     F .text	00000054 error_cb
0000f4a2 l     F .text	0000004a rx_timeout_cb
0000f4ec l     F .text	0000001e ccp_timer_irq
0000f510 l     F .text	000001b4 tx_complete_cb
0000f6c4 l     F .text	0000000e ccp_task
0000f6d4 l     F .text	0000004c ccp_tasks_init
0000f720 l     F .text	0000007c ccp_timer_init
0000fd10 l     F .text	000000b8 ccp_master_timer_ev_cb
0000f8d8 l     F .text	000001b8 ccp_slave_timer_ev_cb
0000f7a0 l     F .text	00000138 ccp_listen
0000fa90 l     F .text	00000280 ccp_send
000101a0 l     F .text	00000498 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_transport.c
000106a4 l     F .text	0000001e extension_signal_tx
000106c2 l     F .text	00000038 reset_cb
000106fa l     F .text	0000002a rx_timeout_cb
00010724 l     F .text	00000026 tx_complete_cb
0001074a l     F .text	00000016 tx_begins_cb
00010760 l     F .text	00000146 rx_complete_cb
20003da4 l     O .bss	00002200 g_mbuf_buffer
000109d8 l     F .text	0000003a uwb_transport_process_rx_queue
20005fa4 l     O .bss	00000028 g_mbuf_mempool
20005fcc l     O .bss	0000000c g_mbuf_pool
20001358 l     O .data	0000003c g_cbs
00000000 l    df *ABS*	00000000 uwb_wcs.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 malloc.c
00011296 l     F .text	00000004 malloc_lock_nop
0001129a l     F .text	00000002 malloc_unlock_nop
0001129c l     F .text	00000048 __malloc_from_block
000112e4 l     F .text	00000064 __free_block
20001394 l     O .data	00000018 __malloc_head
200013ac l     O .data	00000004 malloc_lock
200013b0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00011448 l       .text	00000000 test1
0001143c l       .text	00000000 loop1
0001144e l       .text	00000000 res1
0001146a l       .text	00000000 test2
00011472 l       .text	00000000 done
0001145e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001147e l       .text	00000000 test1
0001147a l       .text	00000000 loop1
0001148c l       .text	00000000 test2
00011488 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001150a l     F .text	000000ce ui2a
000115d8 l     F .text	0000001c i2a
000115f4 l     F .text	00000030 a2d
00011624 l     F .text	0000003c a2i
00011660 l     F .text	00000024 putf
00011684 l     F .text	00000124 putchw
000117a8 l     F .text	00000068 intarg
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00011d60 l     F .text	00000004 stdin_read
00011d64 l     F .text	00000010 stdout_write
200013b4 l     O .data	00000004 _stdin
200013b8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00011dfc l     F .text	0000002c _dpl_msys_find_pool
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 config_store.c
000124a2 l     F .text	0000003c conf_dup_check_cb
000124de l     F .text	0000001c conf_load_cb
00012604 l     F .text	00000008 conf_store_one
20005fdc l     O .bss	00000001 conf_loaded
20005fdd l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
00012678 l     F .text	00000008 conf_ev_fn_load
20005fe8 l     O .bss	0000000c conf_mtx
200013d0 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
00012994 l     F .text	0000001c conf_running_one
000129b0 l     F .text	0000002c conf_dump_running
000129dc l     F .text	000000d4 shell_conf_command
200013e0 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_nmgr.c
00012ac0 l     F .text	000000b8 conf_nmgr_write
00012b78 l     F .text	00000080 conf_nmgr_read
200013f0 l     O .data	0000000c conf_nmgr_group
00023cb4 l     O .text	00000008 conf_nmgr_handlers
00000000 l    df *ABS*	00000000 console.c
00012c08 l     F .text	0000000e ring_buf_next
00012c16 l     F .text	0000000e ring_buf_prev
00012c24 l     F .text	0000001c console_hist_is_full
00012c40 l     F .text	00000054 handle_nlip
00012c94 l     F .text	0000006a trim_whitespace
00012d00 l     F .text	00000080 console_hist_move_to_head
00012d80 l     F .text	00000080 console_hist_add
00012e00 l     F .text	00000040 console_hist_init
00012ed4 l     F .text	00000044 console_append_char
00012f18 l     F .text	0000003c console_clear_line
00012f54 l     F .text	00000080 insert_char
00012fd4 l     F .text	0000006c console_hist_move
00013040 l     F .text	0000005e del_char
000130a0 l     F .text	00000198 handle_ansi
20005ff4 l     O .bss	00000004 ansi_val
20005ff8 l     O .bss	00000004 ansi_val_2
20005ffc l     O .bss	00000010 avail_queue
2000600c l     O .bss	00000004 completion
20006010 l     O .bss	00000004 console_compat_rx_cb
20006014 l     O .bss	00000028 console_hist
2000603c l     O .bss	00000800 console_hist_lines
20006840 l     O .bss	0000000c console_write_lock
2000684c l     O .bss	00000002 cur
2000684e l     O .bss	00000002 end
20006850 l     O .bss	00000004 esc_state
20006854 l     O .bss	00000004 ev.2
2000685c l     O .bss	00000004 input.1
20006860 l     O .bss	00000004 lines_queue
20006864 l     O .bss	00000004 nlip_state
20006868 l     O .bss	00000001 prev_endl.0
20006869 l     O .bss	00000001 rx_stalled
200013fc l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 rtt_console.c
000136a4 l     F .text	0000001c rtt_console_wait_for_retry
000136c0 l     F .text	0000004c rtt_console_write_ch
0001370c l     F .text	00000070 rtt_console_poll_func
2000686c l     O .bss	00000018 rtt_timer
20001400 l     O .data	00000004 itvl_ms.0
20001404 l     O .data	00000004 key.1
20001408 l     O .data	00000004 rtt_console_retries_left.2
00000000 l    df *ABS*	00000000 ticks.c
2000140c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 shell.c
00013818 l     F .text	00000038 get_prompt
00013850 l     F .text	0000006c print_module_commands
000138bc l     F .text	00000030 print_modules
000138ec l     F .text	00000044 print_command_params
00013930 l     F .text	0000004c get_destination_module
0001397c l     F .text	0000001c set_default_module
00013998 l     F .text	00000020 select_module
000139b8 l     F .text	00000078 get_command_and_module
00013a30 l     F .text	000000c4 shell_find_cmd
00013af4 l     F .text	000000e0 show_cmd_help
00013bd4 l     F .text	00000088 show_help
00013c5c l     F .text	0000001c print_prompt
00013c78 l     F .text	00000014 print_prompt_if_console
00013c8c l     F .text	00000110 complete_module
00013d9c l     F .text	00000108 complete_command
00013ea4 l     F .text	00000048 get_command_from_module
00013eec l     F .text	000000f0 complete_param
00013fdc l     F .text	0000003c get_token
00014018 l     F .text	00000074 complete_select
0001408c l     F .text	0000006c line2argv
000140f8 l     F .text	0000001e get_last_token
00014118 l     F .text	00000170 completion
00014288 l     F .text	00000030 shell_avail_queue_init
000143f8 l     F .text	0000002a shell
00014380 l     F .text	00000026 shell_process_command
000143a6 l     F .text	00000052 shell_process_nlip_line
20006884 l     O .bss	00000010 app_cmd
20006894 l     O .bss	00000004 app_prompt_handler
20006898 l     O .bss	00000200 buf
20006a98 l     O .bss	00000150 compat_commands
20006be8 l     O .bss	00000004 module_registered
20006bec l     O .bss	00000004 num_compat_commands
20006bf0 l     O .bss	00000004 num_of_shell_entities
20006bf4 l     O .bss	00000004 prompt
20006bf8 l     O .bss	00000020 shell_console_ev
20006c18 l     O .bss	00000004 shell_evq
20006c1c l     O .bss	00000018 shell_modules
20001410 l     O .data	00000004 default_module
00023ed0 l     O .text	00000010 shell_cmd_help
00023ee0 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
00014534 l     F .text	0000013c shell_nlip_mtx
00014670 l     F .text	00000020 shell_event_data_in
20006c34 l     O .bss	00000002 g_nlip_expected_len
20006c38 l     O .bss	00000004 g_nlip_mbuf
20006c3c l     O .bss	00000004 g_shell_nlip_in_arg
20006c40 l     O .bss	00000004 g_shell_nlip_in_func
20006c44 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
000147d8 l     F .text	00000024 shell_os_ls_dev
0001497c l     F .text	000000f0 shell_os_tasks_display_cmd
000240f0 l     O .text	0000000c date_help
000240fc l     O .text	00000010 date_params
0002410c l     O .text	0000000c ls_dev_help
00024118 l     O .text	0000000c mpool_help
00024124 l     O .text	00000010 mpool_params
00024134 l     O .text	00000060 os_commands
000241a8 l     O .text	0000000c tasks_help
00024194 l     O .text	0000000c reset_help
000241a0 l     O .text	00000008 reset_params
000241b4 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
00024250 l     O .text	00000020 prompt_commands
00024270 l     O .text	0000000c ticks_help
0002427c l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
00014b0c l     F .text	00000010 stats_offset
00014b1c l     F .text	0000004c stats_register_internal
00014c38 l     F .text	00000058 stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_nmgr.c
00014d48 l     F .text	00000018 stats_nmgr_encode_name
00014d60 l     F .text	00000068 stats_nmgr_list
00014dc8 l     F .text	00000060 stats_nmgr_walk_func
00014e28 l     F .text	000000ec stats_nmgr_read
20006c74 l     O .bss	0000000c shell_nmgr_group
2000141c l     O .data	00000010 shell_nmgr_group_handlers
00000000 l    df *ABS*	00000000 stats_shell.c
00014f30 l     F .text	0000006c stats_shell_display_entry
00014f9c l     F .text	00000018 stats_shell_display_group
00014fb4 l     F .text	00000050 shell_stats_display
2000142c l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
00015028 l     F .text	0000000e sysdown_timer_exp
00015038 l     F .text	00000014 sysdown_complete
20006c84 l     O .bss	00000004 sysdown_num_in_progress
20006c88 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
000150ec l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
0001510c l     F .text	00000048 uwbcfg_set
00015154 l     F .text	00000038 uwbcfg_get
0001518c l     F .text	00000048 uwbcfg_export
20006cc4 l     O .bss	00000004 uwbcfg_callbacks
20001530 l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
000154b4 l     F .text	000000a8 check_preamble_code
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00015960 l     F .text	00000044 leapyear
000159a4 l     F .text	00000048 parse_number
00024558 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
00024588 l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 crc8.c
00024788 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
0001606a l     F .text	0000000c streamer_console_vprintf
00016076 l     F .text	0000000e streamer_console_write
20001548 l     O .data	00000004 streamer_console
00024798 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 rx_stream-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
20006cc8 l     O .bss	00000001 split_app_active
20006cc9 l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
0001618c l     F .text	00000004 split_conf_commit
00016190 l     F .text	0000002c split_conf_export
000161bc l     F .text	00000040 split_conf_get
000161fc l     F .text	00000044 split_conf_set
2000154c l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
0001628c l     F .text	00000020 pos
000162ac l     F .text	0000004c token_decode
000247e0 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborattr.c
00016410 l     F .text	00000080 valid_attr_type
00016490 l     F .text	0000005e cbor_target_address
00016708 l     F .text	00000362 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00016a78 l     F .text	0000001c cbor_mbuf_reader_cpy
00016a94 l     F .text	0000001c cbor_mbuf_reader_get8
00016ab0 l     F .text	00000018 cbor_mbuf_reader_cmp
00016ac8 l     F .text	0000001e cbor_mbuf_reader_get64
00016ae6 l     F .text	0000001a cbor_mbuf_reader_get32
00016b00 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00016ba0 l     F .text	000000a0 create_container
00016c40 l     F .text	0000007a encode_string
00000000 l    df *ABS*	00000000 cborparser.c
00016e9a l     F .text	00000024 is_fixed_type
00016ebe l     F .text	00000004 iterate_noop
00016ec2 l     F .text	00000134 preparse_value
00016ff6 l     F .text	0000004a preparse_next_value
00017040 l     F .text	000000a0 extract_length
000170e0 l     F .text	0000016c iterate_string_chunks
0001724c l     F .text	000000ca advance_internal
00017554 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
20006ccc l     O .bss	00000004 dw1000_0
00024830 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
20000120 l     O .rtt	00000400 _acUpBuffer
20000520 l     O .rtt	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
00017a1c l     F .text	00000040 fctrl_ledgend
00017a5c l     F .text	00000010 dw1000_cli_too_few_args
00017a6c l     F .text	000002cc fctrl_to_string
00017d38 l     F .text	0000047c sys_status_to_string
000181b4 l     F .text	0000013c print_interrupt_bt_line
000186ac l     F .text	000002f4 dw1000_cli_cmd
20006cd8 l     O .bss	00000080 b.0
20006d58 l     O .bss	00000028 b.1
20001564 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 hal_flash.c
000189b4 l     F .text	00000028 nrf52k_flash_wait_ready
000189dc l     F .text	00000050 nrf52k_flash_erase_sector
00018a2c l     F .text	00000004 nrf52k_flash_init
00018a30 l     F .text	00000020 nrf52k_flash_sector_info
00018a50 l     F .text	000000c8 nrf52k_flash_write
00018b18 l     F .text	0000000e nrf52k_flash_read
00025178 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00018b28 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
00018d34 l     F .text	0000000a nrf_read_timer_cntr
00018d40 l     F .text	000000b8 nrf_timer_set_ocmp
00018df8 l     F .text	0000000a nrf_timer_disable_ocmp
00018e02 l     F .text	0000000a nrf_rtc_disable_ocmp
00018e0c l     F .text	00000054 hal_timer_read_bsptimer
00018e60 l     F .text	00000076 hal_timer_chk_queue
00018ed6 l     F .text	0000002c hal_timer_irq_handler
00025194 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
000191bc l     F .text	0000000e nrf52_hal_wdt_default_handler
000191cc l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00019288 l     F .text	00000034 nrf52_periph_create_timers
000192bc l     F .text	00000020 nrf52_periph_create_spi
000251ac l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 nrng.c
20001574 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 timescale.c
00019690 l     F .text	00000174 timescale_QUpdate
00019804 l     F .text	00000084 timescale_JofAx
00019888 l     F .text	00000074 timescale_Aofx
00019900 l     F .text	000000f8 timescale_innovation
000199f8 l     F .text	00000044 timescale_constraints
00019a40 l     F .text	0000006c timescale_Hofx
00025282 l     O .text	0000000f __func__.7324
00025291 l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
00019ca0 l     F .text	00000080 Hofx
00019d20 l     F .text	000000a0 Aofx
000252df l     O .text	0000000e __func__.7283
000252ed l     O .text	0000000e __func__.7299
000252fb l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ss_nrng.c
0001aef4 l     F .text	00000034 reset_cb
0001af28 l     F .text	00000044 rx_error_cb
0001af6c l     F .text	00000058 rx_timeout_cb
0001afc8 l     F .text	00000398 rx_complete_cb
20001584 l     O .data	0000003c g_cbs
200015c0 l     O .data	00000010 g_config
200015d0 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 slots.c
00000000 l    df *ABS*	00000000 uwb_rng.c
0001b46e l     F .text	00000044 reset_cb
0001b4b2 l     F .text	0000004a rx_timeout_cb
0001b4fc l     F .text	00000054 superframe_reset_cb
0001b550 l     F .text	00000026 complete_ev_cb
0001b578 l     F .text	00000130 complete_cb
0001b818 l     F .text	000000ea rx_complete_cb
0001b9c8 l     F .text	00000138 tx_final_cb
0001bb20 l     F .text	00000062 tx_complete_cb
20006dd0 l     O .bss	000003c0 g_twr_frames
200015e0 l     O .data	0000003c g_cbs
2000161c l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 rng_encode.c
00000000 l    df *ABS*	00000000 rng_json.c
0001be08 l     F .text	00000042 rng_write_line
00000000 l    df *ABS*	00000000 wcs_timescale.c
0001c288 l     F .text	00000094 wcs_timescale_cb
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 imgmgr.c
0001c8c6 l     F .text	00000040 imgr_vercmp
0001c906 l     F .text	0000003e imgr_img_tlvs
0001c944 l     F .text	00000050 imgr_upload_good_rsp
0001ca90 l     F .text	00000036 imgr_upload_log
0001cb64 l     F .text	0000006c imgr_erase_state
0001cbd0 l     F .text	0000006c imgr_erase
0001cc3c l     F .text	00000190 imgr_upload_inspect
0001ce08 l     F .text	000001fc imgr_upload
20007194 l     O .bss	00000030 imgr_state
200071c4 l     O .bss	00000004 imgr_upload_arg
200071c8 l     O .bss	00000004 imgr_upload_cb
2000162c l     O .data	0000000c imgr_nmgr_group
00025618 l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_log.c
0001d054 l     F .text	00000004 imgmgr_log_gen
00000000 l    df *ABS*	00000000 imgmgr_state.c
0001d15e l     F .text	00000026 imgmgr_state_any_pending
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0001d530 l     F .text	0000001c mgmt_group_list_lock
0001d564 l     F .text	00000030 mgmt_find_group
200071cc l     O .bss	0000000c mgmt_group_lock
20001638 l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
0001d600 l     F .text	00000024 nmgr_rsp_frag_alloc
0001d624 l     F .text	00000064 nmgr_init_rsp
0001d688 l     F .text	00000034 nmgr_rsp_tx
0001d6bc l     F .text	0000006c nmgr_send_err_rsp
0001d728 l     F .text	00000188 nmgr_handle_req
0001d8b0 l     F .text	0000001a nmgr_process
0001d8ca l     F .text	0000000a nmgr_event_data_in
0001d8d4 l     F .text	0000000e nmgr_cbuf_init
200071dc l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
0001d97c l     F .text	00000050 nmgr_reset
0001d9cc l     F .text	0000000a nmgr_reset_tmo
0001d9d8 l     F .text	00000060 nmgr_datetime_set
0001da38 l     F .text	0000005c nmgr_def_console_echo
0001da94 l     F .text	00000078 nmgr_def_echo
0001db0c l     F .text	00000080 nmgr_datetime_get
0001db8c l     F .text	00000108 nmgr_def_mpstat_read
0001dc94 l     F .text	000001a0 nmgr_def_taskstat_read
2000723c l     O .bss	00000020 nmgr_reset_callout
20001640 l     O .data	0000000c nmgr_def_group
00025768 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 nmgr_shell.c
0001de44 l     F .text	00000006 nmgr_shell_get_mtu
0001de4c l     F .text	00000010 nmgr_shell_in
0001de5c l     F .text	0000001a nmgr_shell_out
2000725c l     O .bss	00000020 nmgr_shell_transport
00000000 l    df *ABS*	00000000 config_init.c
0001ded0 l     F .text	000000bc config_init_fcb
2000727c l     O .bss	0000006c conf_fcb_area
2000164c l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0001dfb0 l     F .text	00000024 conf_fcb_load
0001dfd4 l     F .text	00000044 conf_fcb_load_cb
0001e018 l     F .text	0000002c conf_fcb_var_read
0001e044 l     F .text	000000d8 conf_fcb_compress_internal
0001e11c l     F .text	00000064 conf_fcb_append
0001e21e l     F .text	0000000a conf_fcb_save
20001684 l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 flash_map.c
0001e346 l     F .text	00000070 flash_map_read_mfg
200072f0 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
0001e5c4 l     F .text	0000001c log_registered
0001e5e0 l     F .text	00000004 log_chk_type
0001e5e4 l     F .text	00000014 log_chk_max_entry_len
0001e5f8 l     F .text	00000016 log_call_append_cb
0001e610 l     F .text	0000010c log_append_prepare
0001e8b0 l     F .text	00000044 log_read_last_hdr
0001e9c0 l     F .text	00000024 log_read_hdr_walk
0001ea04 l     F .text	00000044 log_walk_body_fn
20007370 l     O .bss	00000004 g_log_module_list
20007374 l     O .bss	00000001 log_written
20001694 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001ea68 l     F .text	00000004 log_console_read
0001ea6c l     F .text	00000004 log_console_walk
0001ea70 l     F .text	00000004 log_console_flush
0001ea74 l     F .text	00000020 log_console_print_hdr
0001ea94 l     F .text	0000002c log_console_append_body
0001eac0 l     F .text	00000030 log_console_append
20007378 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
20007390 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 log_nmgr.c
0001eb94 l     F .text	0000000a cbor_cnt_writer
0001eb9e l     F .text	00000032 log_nmgr_clear
0001ebd0 l     F .text	00000084 log_nmgr_logs_list
0001ec54 l     F .text	00000090 log_nmgr_module_list
0001ece4 l     F .text	000000d4 log_nmgr_level_list
0001edb8 l     F .text	00000074 log_nmgr_modlevel_set
0001ee2c l     F .text	00000074 log_nmgr_modlevel_get
0001eea0 l     F .text	000000b8 log_encode_entries
0001f11c l     F .text	00000238 log_nmgr_encode_entry
0001ef58 l     F .text	0000008c log_encode
0001efe4 l     F .text	00000138 log_nmgr_read
20007410 l     O .bss	0000000c log_nmgr_group
2000169c l     O .data	00000048 log_nmgr_group_handlers
00000000 l    df *ABS*	00000000 modlog.c
0001f374 l     F .text	0000002c modlog_find_by_module
0001f3a0 l     F .text	0000003c modlog_insert
0001f3dc l     F .text	0000001c modlog_alloc
0001f3f8 l     F .text	00000048 modlog_infer_handle
0001f440 l     F .text	00000046 modlog_register_no_lock
0001f486 l     F .text	0000002c modlog_append_one
0001f4b4 l     F .text	00000088 modlog_append_no_lock
2000741c l     O .bss	00000004 modlog_first_dflt
20007420 l     O .bss	000000c0 modlog_mapping_buf
200074fc l     O .bss	00000004 modlog_mappings
20007500 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001f68c l     F .text	00000090 mfg_seek_next_aux
0001f71c l     F .text	0000006c mfg_read_mmr
0001f788 l     F .text	00000054 mfg_read_next_mmr
0001f7dc l     F .text	00000038 mfg_open_flash_area
0001f814 l     F .text	0000003e mfg_read_tlv_body
0001f8f0 l     F .text	00000042 mfg_read_mmr_refs
20007524 l     O .bss	00000001 mfg_initialized
20007528 l     O .bss	00000018 mfg_mmrs
20007540 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
0001f934 l     F .text	0000002c reboot_conf_export
0001f960 l     F .text	00000054 reboot_conf_set
0001f9b4 l     F .text	00000058 reboot_conf_get
0001fa0c l     F .text	0000012c log_reboot_write
0001fb38 l     F .text	00000014 log_reboot_init_console
20007544 l     O .bss	00000001 log_reboot_written
20007548 l     O .bss	0000000c log_reboot_written_str
20007558 l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 rwlock.c
0001fbd8 l     F .text	0000000c rwlock_complete_handoff
0001fbe4 l     F .text	0000001a rwlock_read_must_block
0001fbfe l     F .text	00000016 rwlock_write_must_block
0001fc14 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 bootutil_misc.c
0001fd70 l     F .text	0000000a boot_flag_decode
0001fd7a l     F .text	00000006 boot_magic_off
0001fd80 l     F .text	00000006 boot_copy_done_off
0001fd86 l     F .text	00000006 boot_image_ok_off
0001fd8c l     F .text	00000018 boot_magic_decode
0001fda4 l     F .text	0000004a boot_write_trailer_byte
00025a68 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
000200bc l     F .text	00000020 boot_write_sz
000200dc l     F .text	0000002e boot_read_image_header
0002010c l     F .text	00000034 boot_read_image_headers
00020140 l     F .text	00000074 split_image_check
000201b4 l     F .text	00000064 boot_read_sectors
20007568 l     O .bss	00000068 boot_data
200075d0 l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 image_validate.c
000202f0 l     F .text	00000078 bootutil_img_hash
00000000 l    df *ABS*	00000000 sha256.c
00025a7c l     O .text	00000100 K
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
000209fc l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_flash.c
00020ebc l     F .text	0000001e hal_flash_check_addr
200075d4 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 os_heap.c
00021178 l     F .text	0000002c os_malloc_lock
000211a4 l     F .text	00000028 os_malloc_unlock
200075d8 l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 json_encode.c
000212f0 l     F .text	000002e4 json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
00025bd8 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 rx_stream-sysdown-app.c
00000000 l    df *ABS*	00000000 rx_stream-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20001708 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00017316 g     F .text	00000078 _cbor_value_decode_int64_internal
00017688 g     F .text	000001ac SEGGER_RTT_WriteNoLock
00016b90 g     F .text	00000010 cbor_mbuf_writer_init
00021f90 g     F .text	0000002c .hidden __aeabi_dcmpun
0000d2c8 g     F .text	00000030 os_arch_start
0001e538 g     F .text	0000001c flash_area_id_from_image_slot
00011dd2 g     F .text	00000008 dpl_cputime_delay_usecs
0001e1d8 g     F .text	00000014 conf_fcb_dst
200075e8 g       .bss	00000000 __HeapBase
20003d64 g     O .bss	00000008 g_os_task_list
0000d444 g     F .text	00000078 os_idle_task
00021f54 g     F .text	00000012 .hidden __aeabi_dcmple
0000a740 g     F .text	000000a8 dw1000_stop_rx
0001c6ca g     F .text	00000016 strcpy
0000c156 g     F .text	0000005a dw1000_phy_config_lde
0000c86e g     F .text	00000046 dw1000_phy_event_cnt_ctrl
0001c580 g     F .text	0000001a wcs_timescale_free
0000c07a g     F .text	0000002e dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
0000a82a g     F .text	0000001e dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
00011d48 g     F .text	00000018 fmemopen_w
00021e90 g     F .text	0000007a .hidden __cmpdf2
0001c5d4 g     F .text	0000002a wcs_timescale_pkg_down
0001232e g     F .text	00000048 mem_split_frag
0002253c g     F .text	00000012 fabs
0000ebd6 g     F .text	0000005a os_mbuf_copydata
20002f6c g     O .bss	00000008 g_os_mempool_list
0000d67c g     F .text	0000001a os_callout_init
0000d698 g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
000095f0 g     F .text	00000008 uwb_dw1000_set_autoack
0001fe12 g     F .text	000000ba boot_read_swap_state
0001a8a8 g     F .text	00000446 thornton_dbl
00011348 g     F .text	00000050 add_malloc_block
00021e90 g     F .text	0000007a .hidden __eqdf2
0000a916 g     F .text	00000042 dw1000_set_rx_window
0000d9c8 g     F .text	00000068 os_eventq_put
000142b8 g     F .text	00000010 shell_evq_set
00008ee0 g     F .text	00000054 hal_dw1000_reset
0001a634 g     F .text	000000cc trisolve_dbl
20000530 g       .data	00000000 __data_start__
0000ede0 g     F .text	0000005c os_mbuf_extend
0001001e g     F .text	000000f4 uwb_ccp_start
0001c72c g     F .text	00000020 strtok_r
00025160 g     O .text	00000018 nrf52k_flash_dev
00021a00 g     F .text	0000005a .hidden __floatdidf
00020b5a g     F .text	00000040 fcb_append_finish
00011c94 g     F .text	00000024 printf
0001d252 g     F .text	0000004a imgmgr_state_confirm
00023c00 g     O .text	00000004 stdout
000092f4 g     F .text	000001e4 hal_dw1000_write_noblock
00014aa4 g     F .text	00000054 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000ca98 g     F .text	00000022 hal_gpio_write
000204f8 g     F .text	00000130 mbedtls_internal_sha256_process
000207ee g     F .text	00000024 fcb_free_sector_cnt
000147a8 g     F .text	00000018 shell_nlip_output
0001ea5e g     F .text	0000000a log_flush
0000d228 g     F .text	0000009c os_arch_os_init
0001fb4c g     F .text	00000038 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
00015f00 g     F .text	000000d0 datetime_format
00018f14 g     F .text	00000060 hal_timer_init
0001f864 g     F .text	0000001a mfg_seek_next_with_type
00016d44 g     F .text	0000008c cbor_encode_int
0000d2f8 g     F .text	00000064 os_arch_os_start
20006858 g     O .bss	00000001 g_console_ignore_non_nlip
2000685a g     O .bss	00000001 g_console_silence_non_nlip
00020f02 g     F .text	00000010 hal_flash_align
0001e9ac g     F .text	00000014 log_read
00014cd4 g     F .text	00000028 stats_group_walk
0001bb84 g     F .text	000000b8 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
0001fdee g     F .text	0000001e boot_magic_compatible_check
000137f4 g     F .text	0000000c console_no_ticks
00008c88 g     F .text	000000c0 uwb_calc_aoa
0000f2f8 g     F .text	00000050 tdma_tx_slot_start
0000e9c2 g     F .text	0000000c SysTick_Handler
0001b3f2 g     F .text	00000022 BitPosition
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000e554 g     F .text	0000004a os_task_remove
00018f04 g     F .text	00000010 nrf52_timer0_irq_handler
00016a6c g     F .text	0000000c cbor_read_object
000189a0 g     F .text	00000010 dw1000_cli_register
00016b70 g     F .text	0000001e cbor_mbuf_writer
0000dc08 g     F .text	0000002a os_memblock_put
0001a700 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
00012524 g     F .text	0000000c conf_dst_register
0000dd54 g     F .text	00000024 os_msys_get_pkthdr
200072e8 g     O .bss	00000004 flash_map
0001559c g     F .text	00000244 uwbcfg_commit_to_inst_dw1000
000210b0 g     F .text	00000032 hal_flash_is_erased
0000e97c g     F .text	00000046 PendSV_Handler
00011cf2 g     F .text	0000001c snprintf
00008154  w    F .text	00000002 NMI_Handler
00010fcc g     F .text	00000044 uwb_transport_pkg_init
00025c00 g       .ARM.exidx	00000000 __exidx_end
00020448 g     F .text	0000000c mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
0000aadc g     F .text	00000028 dw1000_set_autoack_delay
0001e71c g     F .text	00000064 log_init
00011d0e g     F .text	0000003a memfile_write
0000d1a0 g     F .text	00000014 os_arch_ctx_sw
00016dd0 g     F .text	0000005c cbor_encode_simple_value
000137c8 g     F .text	00000004 rtt_console_is_init
0000d63a g     F .text	0000000a os_system_reset
00008ec8 g     F .text	00000018 hal_dw1000_inst
000081d0 g     F .text	0000002c hal_system_reset
0000d4e0 g     F .text	00000070 os_init_idle_task
00009caa g     F .text	00000076 dw1000_dev_enter_sleep
20001358 g       .data	00000000 __aeabi_unwind_cpp_pr0
00021e80 g     F .text	0000008a .hidden __gtdf2
0000e0d0 g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
000232cc g     F .text	0000000c __errno
00025c00 g       .ARM.exidx	00000000 __etext
0000e8b0 g     F .text	00000052 os_get_uptime_usec
000110dc g     F .text	00000074 uwb_wcs_prediction
0001364c g     F .text	0000003c console_vprintf
0001f354 g     F .text	00000020 log_nmgr_register_group
00008164  w    F .text	00000002 RADIO_IRQHandler
0001e4a0 g     F .text	00000028 flash_area_write
00019548 g     F .text	00000030 usecs_to_response
00010a44 g     F .text	000000ee uwb_transport_listen
00011e46 g     F .text	0000003a dpl_mqueue_get
000221bc g     F .text	0000002e .hidden __aeabi_d2lz
0000ddc0 g     F .text	000000b8 os_mutex_release
00014b68 g     F .text	0000000a stats_size
00014d20 g     F .text	00000028 stats_register
00022bdc g     F .text	0000027c __ieee754_fmod
200071d8 g     O .bss	00000004 nmgr_evq
0000dfa4 g     F .text	00000020 os_sanity_check_register
20001b30 g       .bssnz	00000000 __bssnz_start__
20005fd8 g     O .bss	00000004 conf_load_srcs
00020838 g     F .text	00000020 fcb_get_len
0000c1e4 g     F .text	000001de dw1000_phy_init
0000e740 g     F .text	00000026 os_time_delay
0001ff44 g     F .text	000000a4 boot_swap_type
20001440 g     O .data	000000a0 g_uwb_config
0000ed58 g     F .text	00000088 os_mbuf_copyinto
00008d48 g     F .text	0000002e dw1000_gpio5_config_ext_txe
00008164  w    F .text	00000002 PDM_IRQHandler
00021f1c g     F .text	00000010 .hidden __aeabi_cdcmple
0000c3c2 g     F .text	00000066 dw1000_phy_rx_reset
0001f87e g     F .text	0000000a mfg_read_tlv_flash_area
0001380c g     F .text	0000000c console_get_ticks
0000a818 g     F .text	00000012 dw1000_set_rxauto_disable
0001d184 g     F .text	0000001e imgmgr_state_slot_in_use
00015fd0 g     F .text	00000034 crc16_ccitt
0001c320 g     F .text	000001d4 wcs_timescale_ev
0001738e g     F .text	00000024 cbor_parser_init
0000bde0 g     F .text	00000060 dw1000_calc_rssi
000137b8 g     F .text	00000010 console_rx_restart
0000dc68 g     F .text	00000010 os_mempool_module_init
0001d8f0 g     F .text	0000000c mgmt_evq_set
00008164  w    F .text	00000002 TEMP_IRQHandler
0000d1c6 g     F .text	0000000a os_arch_in_critical
0002369c g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
0000c734 g     F .text	00000054 dw1000_phy_data_duration
200014e0 g     O .data	00000050 g_uwbcfg_str
00017834 g     F .text	00000110 SEGGER_RTT_GetKey
00008164  w    F .text	00000002 TIMER3_IRQHandler
0001b7f0 g     F .text	00000028 uwb_rng_clear_twr_data
0000d194 g     F .text	0000000a timer_handler
0000d958 g     F .text	00000024 os_dev_lookup
0000e0dc g     F .text	00000090 os_sched_sleep
00009934 g     F .text	000000e0 dw1000_read_reg
000135f0 g     F .text	0000000c console_set_completion_cb
000097a0 g     F .text	000000c8 dw1000_read
00011478 g     F .text	0000001a memcpy
00021f0c g     F .text	00000020 .hidden __aeabi_cdrcmple
00025454 g     O .text	0000001e g_stats_map_twr_ss_nrng_stat_section
000146b4 g     F .text	000000e0 shell_nlip_process
00016240 g     F .text	00000010 split_conf_init
00012744 g     F .text	00000034 conf_parse_name
00008bac g     F .text	00000074 uwb_task_init
000191ec g     F .text	00000078 hal_watchdog_init
000111d0 g     F .text	00000020 uwb_wcs_read_systime_master64
00021988 g     F .text	00000022 .hidden __floatsidf
00012530 g     F .text	00000054 conf_load
0002161c g     F .text	00000038 json_encode_array_value
00011150 g     F .text	00000068 uwb_wcs_local_to_master64
00021e88 g     F .text	00000082 .hidden __ltdf2
0002169e g     F .text	00000026 json_readn
0000d7dc g     F .text	0000000c os_cputime_init
20005fe4 g     O .bss	00000004 conf_handlers
00021654 g     F .text	0000001c json_encode_array_finish
000190a0 g     F .text	0000002c hal_timer_set_cb
0002218c g     F .text	00000000 .hidden __aeabi_uldivmod
000210e2 g     F .text	00000062 hal_flash_isempty
000160f8 g     F .text	0000002c split_app_init
0001c620 g     F .text	00000034 puts
0001bb00 g     F .text	00000020 rng_issue_complete
00000020 g       *ABS*	00000000 _imghdr_size
0000e094 g     F .text	00000030 os_sched_ctx_sw_hook
000230cc g     F .text	00000200 __ieee754_logf
00020c62 g     F .text	00000052 fcb_elem_info
2000683c g     O .bss	00000004 console_is_midline
000142c8 g     F .text	000000b8 shell_exec
0000ead6 g     F .text	00000014 os_mbuf_free
2000053c g     O .data	00000004 SystemCoreClock
00011dda g     F .text	00000022 dpl_cputime_timer_relative
0000a7e8 g     F .text	0000001e dw1000_set_wait4resp
000081b4 g     F .text	0000000c hal_system_init
00016e2c g     F .text	0000000e cbor_encode_byte_string
0000c428 g     F .text	00000120 dw1000_phy_forcetrxoff
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000d1d0 g     F .text	00000040 os_arch_task_stack_init
0000b162 g     F .text	00000036 dw1000_calc_clock_offset_ratio_ttco
00009a14 g     F .text	000000f0 dw1000_write_reg
00011398 g     F .text	0000006c malloc
0001e478 g     F .text	00000028 flash_area_read
0000c132 g     F .text	00000024 dw1000_phy_disable_sequencing
0000d360 g     F .text	0000004c __assert_func
0001cac8 g     F .text	00000018 imgr_my_version
0000cc58 g     F .text	00000018 nrf52_spi0_irq_handler
0001d0a8 g     F .text	000000b6 imgmgr_state_flags
0000e2a0 g     F .text	00000040 os_sched_wakeup_ticks
00015004 g     F .text	00000024 stats_shell_register
000135fc g     F .text	00000050 console_pkg_init
00011f4a g     F .text	0000001c dpl_msys_get_pkthdr
0001d018 g     F .text	0000003c imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
0000a52a g     F .text	0000006a dw1000_set_delay_start
0001c758 g     F .text	0000000c strtoll
00011cb8 g     F .text	0000003a vsnprintf
20006cac g     O .bss	00000018 _uwbcfg_log
0002200c g     F .text	00000040 .hidden __fixunsdfsi
20002f4c g     O .bss	00000008 g_callout_list
000211cc g     F .text	00000018 os_malloc
0000ffac g     F .text	00000072 uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00011810 g     F .text	0000047c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20001b30 g       .bss	00000000 __bss_start__
0000f1ec g     F .text	0000003e tdma_release_slot
000081c0 g     F .text	00000010 hal_debugger_connected
00021968 g     F .text	0000001e .hidden __aeabi_ui2d
00020f74 g     F .text	00000070 hal_flash_write
00012066 g     F .text	00000058 dpl_mbuf_appendfrom
0001d058 g     F .text	00000014 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
000108a8 g     F .text	00000064 uwb_transport_create_mbuf_pool
00008e76 g     F .text	00000052 hal_dw1000_spi_txrx_cb
00022268 g     F .text	000002d0 .hidden __udivmoddi4
000216e4 g     F .text	00000000 .hidden __aeabi_drsub
00011daa g     F .text	00000008 dpl_cputime_timer_stop
0000f25c g     F .text	0000003e tdma_free
0001d934 g     F .text	00000048 nmgr_pkg_init
00010c5c g     F .text	0000005e uwb_transport_start_tx
0001751c g     F .text	00000038 _cbor_value_copy_string
00008da4 g     F .text	000000d2 dw1000_gpio_config_leds
00008c20 g     F .text	00000018 uwb_task_deinit
20003d5c g     O .bss	00000004 g_current_task
0000dfc4 g     F .text	0000006c os_sanity_run
00016e6e g     F .text	0000002c cbor_encoder_close_container
0000d1b4 g     F .text	0000000c os_arch_save_sr
20006c81 g     O .bss	00000001 sysdown_active
00021f40 g     F .text	00000012 .hidden __aeabi_dcmplt
0001fef8 g     F .text	00000020 boot_write_magic
0000dba4 g     F .text	00000014 os_mempool_init
0001df8c g     F .text	00000020 config_pkg_init
0000e768 g     F .text	00000038 os_gettimeofday
20003d6c g     O .bss	00000001 g_task_id
00012778 g     F .text	00000016 conf_parse_and_lookup
00015bc0 g     F .text	00000140 timeval_to_clocktime
0001544c g     F .text	00000010 uwbcfg_register
20001414 g     O .data	00000008 g_stats_registry
000219ac g     F .text	00000042 .hidden __extendsfdf2
00012720 g     F .text	00000024 conf_handler_lookup
0000be40 g     F .text	00000020 dw1000_get_rssi
00021cb0 g     F .text	000001d0 .hidden __aeabi_ddiv
000216f0 g     F .text	00000276 .hidden __adddf3
000120be g     F .text	0000005a dpl_mbuf_copydata
00008a90 g     F .text	00000060 uwb_dev_idx_lookup
200013c0 g     O .data	00000008 g_msys_pool_list
00025be8 g       .text	00000000 __exidx_start
0001c778 g     F .text	00000100 strntoumax
00021a5c g     F .text	00000254 .hidden __aeabi_dmul
00023acc g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
0000e030 g     F .text	00000010 os_sanity_init
200016fc g     O .data	00000001 __fdlib_version
20007190 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
00019578 g     F .text	00000048 uwb_rng_tof_to_meters
0001d29c g     F .text	000001bc imgmgr_state_read
0000eb0a g     F .text	000000a8 os_mbuf_append
0001f888 g     F .text	0000000a mfg_read_tlv_mmr_ref
000137cc g     F .text	00000028 rtt_console_init
0000e91c g     F .text	00000014 os_set_env
00012442 g     F .text	00000036 dpl_memblock_put_from_cb
00009fd8 g     F .text	00000048 dw1000_dev_enter_sleep_after_tx
0000bec0 g     F .text	0000000e dw1000_read_systime_lo
0000be60 g     F .text	00000050 dw1000_estimate_los
00017610 g     F .text	00000010 hal_bsp_flash_dev
0001b360 g     F .text	00000080 twr_ss_nrng_pkg_init
0000ab8e g     F .text	000000c4 dw1000_set_dblrxbuff
000192dc g     F .text	0000000c nrf52_periph_create
00019aac g     F .text	000000f4 timescale_init
00011f18 g     F .text	00000032 dpl_mbuf_get_pkthdr
0000c0a8 g     F .text	0000002e dw1000_phy_txclk_PLL
0000b2ac g     F .text	0000001e dw1000_ic_and_host_ptrs_equal
00023bf8 g     O .text	00000008 MemFile_methods
0000c548 g     F .text	00000068 dw1000_phy_interrupt_mask
20003d50 g     O .bss	0000000c g_os_sanity_check_mu
0001e4f0 g     F .text	0000000a flash_area_align
00021968 g     F .text	0000001e .hidden __floatunsidf
0001d094 g     F .text	00000014 imgmgr_log_confirm
000135bc g     F .text	0000000c console_line_queue_set
000211e4 g     F .text	00000014 os_free
00008178 g     F .text	0000003c _sbrk
0001638c g     F .text	0000002a base64_pad
000175fa g     F .text	00000014 cbor_value_calculate_string_length
0000b03c g     F .text	00000024 dw1000_read_carrier_integrator
00018bfc g     F .text	00000098 os_tick_idle
00013688 g     F .text	0000001c console_printf
0001d8fc g     F .text	00000014 nmgr_transport_init
0001d004 g     F .text	00000014 imgmgr_dfu_confirmed
00014930 g     F .text	00000012 shell_os_reset_cmd
00009868 g     F .text	000000cc dw1000_write
00010b34 g     F .text	00000128 uwb_transport_write_tx
0000bd28 g     F .text	00000098 dw1000_calc_fppl
000132bc g     F .text	00000002 console_blocking_mode
00012584 g     F .text	00000018 conf_ensure_loaded
0000ab04 g     F .text	0000008a dw1000_set_wait4resp_delay
000173b2 g     F .text	0000012a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
00008644 g     F .text	00000002 _init
0001fe0c g     F .text	00000006 boot_swap_type_off
00020fe4 g     F .text	000000cc hal_flash_erase
0001615c g     F .text	0000000c split_mode_get
0001c74c g     F .text	0000000c strtol
000148ac g     F .text	00000084 shell_os_date_cmd
0000f348 g     F .text	00000030 tdma_pkg_init
00022ff0 g     F .text	000000c0 __ieee754_log10f
00020cb4 g     F .text	00000048 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0002204c g     F .text	0000009e .hidden __aeabi_d2f
00018c94 g     F .text	000000a0 os_tick_init
0002222c g     F .text	0000003c .hidden __aeabi_d2ulz
0000c5b0 g     F .text	0000015c dw1000_phy_repeated_frames
200013c8 g     O .data	00000008 g_dpl_mempool_list
0000a958 g     F .text	00000022 dw1000_set_abs_timeout
00020b9a g     F .text	000000c8 fcb_elem_crc8
0001eaf0 g     F .text	00000008 log_console_get
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000d550 g     F .text	000000c8 os_init
0001d06c g     F .text	00000014 imgmgr_log_upload_done
000080f8 g     F .text	0000005c Reset_Handler
0001a594 g     F .text	000000a0 srkf_dbl_free
0001c712 g     F .text	0000001a strrchr
00020812 g     F .text	00000026 fcb_put_len
00016124 g     F .text	00000038 split_check_status
000182f0 g     F .text	00000180 dw1000_cli_dump_registers
0001f570 g     F .text	00000040 modlog_append
00012e40 g     F .text	0000000c console_echo
00021fbc g     F .text	0000004e .hidden __fixdfsi
00011266 g     F .text	00000030 calloc
0000dc34 g     F .text	00000034 os_mempool_info_get_next
20006ca8 g     O .bss	00000001 sysinit_active
00017944 g     F .text	00000064 SEGGER_RTT_Init
20006859 g     O .bss	00000001 g_console_silence
00016168 g     F .text	0000000c split_app_active_get
00016e48 g     F .text	0000000a cbor_encoder_create_array
0000e9ce g     F .text	0000001e os_default_irq_asm
20006da8 g     O .bss	00000028 g_twr_ss_nrng_stat
0002510c g     O .text	0000000c cmd_dw1000_help
0000e2e0 g     F .text	0000000c os_sched_next_task
0000e040 g     F .text	00000054 os_sched_insert
0000d6d4 g     F .text	00000078 os_callout_reset
0001f894 g     F .text	0000004c mfg_init
0000d97c g     F .text	00000010 os_dev_reset
000144ec g     F .text	00000048 shell_init
000121c6 g     F .text	00000088 dpl_mbuf_copyinto
000216f0 g     F .text	00000276 .hidden __aeabi_dadd
00021e88 g     F .text	00000082 .hidden __ledf2
0001d54c g     F .text	00000018 mgmt_group_list_unlock
0000ddac g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
000221ec g     F .text	00000040 .hidden __aeabi_f2ulz
0000da30 g     F .text	0000001a os_eventq_get_no_wait
000219f0 g     F .text	0000006a .hidden __aeabi_ul2d
00011230 g     F .text	00000036 uwb_wcs_pkg_down
20001b30 g       .bssnz	00000000 __bssnz_end__
0001e554 g     F .text	00000070 flash_map_init
0001c764 g     F .text	00000014 vprintf
0000d4d4 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
200016e4 g     O .data	00000018 reboot_conf_handler
000126f4 g     F .text	00000010 conf_unlock
0000e264 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000c788 g     F .text	0000001a dw1000_phy_frame_duration
00014cfc g     F .text	00000024 stats_group_find
00025810 g     O .text	00000028 log_console_handler
0001fd22 g     F .text	0000001e rwlock_release_write
0001d910 g     F .text	00000024 nmgr_rx_req
0000ca34 g     F .text	0000002c hal_gpio_init_in
000110a4 g     F .text	00000038 uwb_wcs_dtu_time_adjust
000189b0 g     F .text	00000004 dw1000_cli_down
000147c0 g     F .text	00000018 shell_nlip_init
000175d6 g     F .text	00000024 cbor_value_advance
0002398c g     O .text	00000018 g_stats_map_tdma_stat_section
0001e780 g     F .text	00000010 log_list_get_next
00008164  w    F .text	00000002 PWM2_IRQHandler
00021670 g     F .text	0000001c json_read_next
000226cc g     F .text	0000006c log10f
0001d4f4 g     F .text	0000003c imgr_ver_str
20001b30 g       .data	00000000 __data_end__
0001e8f4 g     F .text	00000094 log_register
000206ae g     F .text	00000140 mbedtls_sha256_finish_ret
00008b9a g     F .text	00000010 uwb_mac_find_cb_inst_ptr
000154b0 g     F .text	00000004 uwbcfg_pkg_down
00020cfc g     F .text	00000018 fcb_getnext_area
0001d080 g     F .text	00000014 imgmgr_log_pending
0001fca8 g     F .text	00000026 rwlock_release_read
0000bdc0 g     F .text	00000020 dw1000_get_fppl
00011e28 g     F .text	0000001e dpl_mqueue_init
00012bf8 g     F .text	00000010 conf_nmgr_register
00008164  w    F .text	00000002 ECB_IRQHandler
00014af8 g     F .text	00000014 shell_prompt_register
00022738 g     F .text	000004a4 __ieee754_asin
00011f66 g     F .text	00000014 dpl_mbuf_free
00013800 g     F .text	0000000c console_yes_ticks
00021f7c g     F .text	00000012 .hidden __aeabi_dcmpgt
00022654 g     F .text	00000078 fmod
000122aa g     F .text	00000054 dpl_mbuf_trim_front
20003da0 g     O .bss	00000004 g_os_time
0001d8e4 g     F .text	0000000c mgmt_evq_get
0000cf64 g     F .text	00000060 hal_spi_init
00019274 g     F .text	00000014 hal_watchdog_tickle
200075e4 g       .bss	00000000 __bss_end__
0000d98c g     F .text	00000020 os_dev_walk
0000a028 g     F .text	0000004a dw1000_dev_enter_sleep_after_rx
0000ea76 g     F .text	0000002e os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0001de78 g     F .text	00000058 nmgr_shell_pkg_init
00019374 g     F .text	00000100 nrng_init
00021f68 g     F .text	00000012 .hidden __aeabi_dcmpge
0001b704 g     F .text	000000ec uwb_rng_init
000179a8 g     F .text	00000024 dw1000_pkg_init
00020858 g     F .text	00000034 fcb_sector_hdr_init
0001c994 g     F .text	000000fc imgr_read_info
0001555c g     F .text	0000003e remap_framefilter
0001224e g     F .text	0000005c dpl_mbuf_extend
0000fdc8 g     F .text	000001e4 uwb_ccp_init
20001b3c g     O .bss	000001f1 test
00019474 g     F .text	000000d0 nrng_pkg_init
000216ec g     F .text	0000027a .hidden __aeabi_dsub
0000dd44 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
00008630 g     F .text	00000014 _start
000094d8 g     F .text	0000003c hal_dw1000_rw_noblock_wait
000195c0 g     F .text	0000005c calc_tof_ss
00014944 g     F .text	00000038 shell_os_ls_dev_cmd
000219f0 g     F .text	0000006a .hidden __floatundidf
00008c38 g     F .text	0000004a uwb_dev_init
00011088 g     F .text	0000001c uwb_wcs_set_postprocess
20006c80 g     O .bss	00000001 stats_shell_registered
20006c5c g     O .bss	00000018 g_stats_stats
000162f8 g     F .text	00000094 base64_encode
0000e7a0 g     F .text	00000018 os_time_is_set
0000e930 g     F .text	00000006 os_arch_init_task_stack
0000dac8 g     F .text	00000018 os_eventq_run
000126e0 g     F .text	00000014 conf_lock
0000e5a0 g     F .text	00000080 os_task_info_get_next
00025a58 g     O .text	00000010 boot_img_magic
00016250 g     F .text	0000003c split_write_split
00012e4c g     F .text	00000034 console_lock
0001c6f0 g     F .text	00000022 strncmp
00014b74 g     F .text	00000098 stats_walk
20005fe0 g     O .bss	00000004 conf_save_dst
0000cbac g     F .text	0000003c hal_gpio_irq_release
0000c70c g     F .text	00000028 dw1000_phy_SHR_duration
20001da0 g     O .bss	00000050 g_idle_task
0000ca60 g     F .text	00000038 hal_gpio_init_out
0000caba g     F .text	00000034 hal_gpio_read
00008d76 g     F .text	0000002e dw1000_gpio6_config_ext_rxe
2000143c g     O .data	00000004 sysinit_panic_cb
000190cc g     F .text	0000008c hal_timer_start_at
00009e2c g     F .text	000001a4 dw1000_dev_config
0001cdcc g     F .text	00000014 imgmgr_dfu_stopped
00019620 g     F .text	00000070 calc_tof_ds
20003d4c g     O .bss	00000004 g_os_sanity_check_list
0000aa44 g     F .text	00000098 dw1000_set_autoack
0002168c g     F .text	00000012 json_read_prev
000114ec g     F .text	0000001e strncpy
0000b198 g     F .text	0000003c dw1000_read_rxdiag
0000bede g     F .text	0000000e dw1000_read_rxtime_lo
0000dbb8 g     F .text	00000032 os_memblock_get
0000e1f0 g     F .text	00000074 os_sched_wakeup
0000ea16 g     F .text	00000022 os_mqueue_get
0000e33c g     F .text	00000010 os_sem_init
000147fc g     F .text	000000b0 shell_os_mpool_display_cmd
0000c7a2 g     F .text	000000cc dw1000_phy_txrf_power_value
00009514 g     F .text	00000086 hal_dw1000_wakeup
0001c654 g     F .text	00000060 realloc
00014a6c g     F .text	00000038 shell_os_register
000122fe g     F .text	00000030 mem_init_mbuf_pool
00019ba0 g     F .text	00000038 timescale_free
00010a12 g     F .text	00000032 uwb_transport_append_extension
0000d3ac g     F .text	00000098 os_default_irq
0001e4fa g     F .text	0000000a flash_area_erased_val
00009d28 g     F .text	00000104 dw1000_dev_wakeup
00021988 g     F .text	00000022 .hidden __aeabi_i2d
00011f7a g     F .text	00000020 dpl_mbuf_free_chain
20003d60 g     O .bss	00000004 g_os_last_ctx_sw_time
0000e34c g     F .text	00000064 os_sem_release
000109b4 g     F .text	00000024 uwb_transport_get_extension
00011430 g     F .text	00000048 memcmp
0000d210 g     F .text	00000018 os_arch_init
00018540 g     F .text	0000016c dw1000_cli_interrupt_backtrace
0000a07c g     F .text	00000134 dw1000_dev_init
0002088c g     F .text	0000004e fcb_sector_hdr_read
0001e228 g     F .text	000000c4 conf_line_parse
00022538  w    F .text	00000002 .hidden __aeabi_ldiv0
00011ee0 g     F .text	0000000a dpl_mbuf_pool_init
0001bc40 g     F .text	00000038 uwb_rng_pkg_down
00012940 g     F .text	00000054 conf_commit
00016008 g     F .text	0000003c crc8_calc
00010112 g     F .text	00000054 uwb_ccp_stop
000150f4 g     F .text	0000000c sysinit_start
00021cb0 g     F .text	000001d0 .hidden __divdf3
00018f74 g     F .text	000000fc hal_timer_config
0000a512 g     F .text	00000018 dw1000_tx_wait
00011010 g     F .text	00000044 uwb_wcs_init
0000f378 g     F .text	0000003c tdma_pkg_down
00016174 g     F .text	00000018 split_mode_set
000208da g     F .text	00000122 fcb_init
0000f154 g     F .text	00000098 tdma_assign_slot
00021a5c g     F .text	00000254 .hidden __muldf3
000135b4 g     F .text	00000008 console_is_init
0001260c g     F .text	00000058 conf_save
0001b908 g     F .text	000000c0 uwb_rng_twr_to_tof
0000f008 g     F .text	0000014c tdma_init
0000e3b0 g     F .text	000000b4 os_sem_pend
0001de34 g     F .text	00000010 nmgr_os_groups_register
00019264 g     F .text	00000010 hal_watchdog_enable
0001fd40 g     F .text	00000030 rwlock_init
00025240 g     O .text	00000042 g_stats_map_nrng_stat_section
000111f0 g     F .text	00000040 uwb_wcs_pkg_init
0001fc4e g     F .text	0000005a rwlock_acquire_read
0000d820 g     F .text	00000022 os_cputime_timer_relative
0000a35a g     F .text	00000082 dw1000_write_tx_fctrl
0000ea38 g     F .text	0000003e os_mqueue_put
0000dcb4 g     F .text	0000004c os_msys_register
20001ef0 g     O .bss	00000004 g_os_idle_ctr
0001e3b8 g     F .text	00000044 flash_area_open
0000a86a g     F .text	000000ac dw1000_set_rx_timeout
0000ecde g     F .text	0000007a os_mbuf_cmpf
0001e988 g     F .text	00000024 log_walk_body
00008164  w    F .text	00000002 SAADC_IRQHandler
0001fecc g     F .text	0000002a boot_read_swap_state_by_id
0001b3e0 g     F .text	00000012 NumberOfBits
0001a094 g     F .text	00000500 srkf_dbl_init
00011492 g     F .text	00000042 memset
00008b78 g     F .text	00000022 uwb_mac_get_interface
00008020 g       .text	000000d8 __isr_vector
00008884 g     F .text	000001c8 main
0000cfc4 g     F .text	0000002c hal_spi_set_txrx_cb
0001ea48 g     F .text	00000016 log_read_body
00020d9c g     F .text	00000034 fcb_getnext
20006cd0 g     O .bss	00000008 g_spi0_sem
0001377c g     F .text	0000003c console_out_nolock
00016cc4 g     F .text	00000080 cbor_encode_uint
000123f8 g     F .text	0000004a dpl_memblock_get
000215fc g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001f53c g     F .text	00000034 modlog_register
00020dd0 g     F .text	00000078 fcb_rotate
00015100 g     F .text	0000000c sysinit_end
0001f5ec g     F .text	000000a0 modlog_init
0000e936 g     F .text	00000046 SVC_Handler
0000d9be g     F .text	0000000a os_eventq_inited
0002204c g     F .text	0000009e .hidden __truncdfsf2
000247a0 g     O .text	00000020 sysdown_cbs
000159ec g     F .text	000001d4 clocktime_to_timeval
0001d594 g     F .text	00000024 mgmt_group_register
0001604e g     F .text	0000001c streamer_printf
0001bc78 g     F .text	00000190 rng_encode
00012378 g     F .text	00000080 dpl_mempool_init
00021a00 g     F .text	0000005a .hidden __aeabi_l2d
00020f22 g     F .text	00000052 hal_flash_read
00012e80 g     F .text	00000034 console_unlock
0000db24 g     F .text	00000008 os_eventq_dflt_get
00019070 g     F .text	00000030 hal_timer_read
0001b6d6 g     F .text	0000002e uwb_rng_config
0000da4a g     F .text	0000007e os_eventq_get
0001e4c8 g     F .text	00000028 flash_area_erase
20001d74 g     O .bss	00000028 nrf52_hal_spi0
0000bf0c g     F .text	00000140 dw1000_configcwmode
00009600 g     F .text	00000008 uwb_dw1000_event_cnt_ctrl
0000e902 g     F .text	0000001a os_time_ms_to_ticks
0001e8a0 g     F .text	0000000a log_walk
0000d7a8 g     F .text	00000034 os_callout_wakeup_ticks
000221ec g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0000b140 g     F .text	00000022 dw1000_read_time_tracking_offset
0000a3dc g     F .text	00000136 dw1000_start_tx
00016044 g     F .text	0000000a streamer_vprintf
200072ec g     O .bss	00000004 flash_map_entries
0000ec30 g     F .text	000000ae os_mbuf_adj
20007554 g     O .bss	00000002 reboot_cnt
00012704 g     F .text	0000001c conf_register
0000d632 g     F .text	00000008 os_reboot
00008020 g       .imghdr	00000000 __text
00016004 g     F .text	00000004 crc8_init
0001e1ec g     F .text	00000032 conf_fcb_kv_save
00010638 g     F .text	00000030 uwb_ccp_pkg_init
0001f852 g     F .text	00000012 mfg_seek_next
0001933e g     F .text	00000034 nrng_config
000114d4 g     F .text	00000018 strcmp
0001e52a g     F .text	0000000e flash_area_read_is_empty
0000e0c4 g     F .text	0000000c os_sched_get_current_task
00016e52 g     F .text	0000001c cbor_encoder_create_map
00013238 g     F .text	00000084 console_write
0000f29a g     F .text	0000005c tdma_rx_slot_start
00008648 g     F .text	00000050 uwb_config_updated_func
00008458 g     F .text	000001d8 SystemInit
0000d816 g     F .text	0000000a os_cputime_get32
0001e180 g     F .text	00000058 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0000a9c4 g     F .text	00000080 dw1000_mac_framefilter
0001e9e4 g     F .text	00000020 log_read_hdr
0002222c g     F .text	0000003c .hidden __fixunsdfdi
00021e90 g     F .text	0000007a .hidden __nedf2
000215f4 g     F .text	00000008 json_encode_array_name
00014f14 g     F .text	0000001c stats_nmgr_register_group
0000dae0 g     F .text	00000042 os_eventq_remove
00009258 g     F .text	0000009a hal_dw1000_write
0000a2c0 g     F .text	0000009a dw1000_write_tx
0001259c g     F .text	00000068 conf_save_one
0001278e g     F .text	000000ca conf_value_from_str
0001e790 g     F .text	00000078 log_module_get_name
000095f8 g     F .text	00000008 uwb_dw1000_set_autoack_delay
000216c4 g     F .text	00000020 sprintf
000221bc g     F .text	0000002e .hidden __fixdfdi
0000e2ec g     F .text	00000022 os_sched
00020f12 g     F .text	00000010 hal_flash_erased_val
00020368 g     F .text	000000e0 bootutil_img_validate
0000c90a g     F .text	00000058 _dw1000_otp_read
0000de78 g     F .text	000000e0 os_mutex_pend
000095ac g     F .text	00000044 uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
000225dc g     F .text	00000078 asin
0001d1a2 g     F .text	000000b0 imgmgr_state_set_pending
0001090c g     F .text	000000a8 uwb_transport_init
00008164  w    F .text	00000002 RTC2_IRQHandler
00025500 g     O .text	00000048 g_stats_map_rng_stat_section
0000beec g     F .text	00000010 dw1000_read_txtime
000211f8 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
00011e80 g     F .text	00000060 dpl_mqueue_put
00016e3a g     F .text	0000000e cbor_encode_text_string
000230c0 g     F .text	0000000c nanf
000164f0 g     F .text	00000218 cbor_read_array
20001700 g     O .data	00000004 _impure_ptr
0001dfac g     F .text	00000002 config_pkg_init_stage2
0000ea00 g     F .text	00000016 os_mqueue_init
0000e800 g     F .text	00000074 os_settimeofday
0001eb60 g     F .text	00000034 log_level_set
00018470 g     F .text	000000d0 dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001c878 g     F .text	0000001e strsep
0000ce78 g     F .text	00000038 hal_spi_config
0001e2ec g     F .text	0000005a conf_line_make
0001e3fc g     F .text	0000007c flash_area_to_sectors
000163b8 g     F .text	00000058 base64_decode
0000befc g     F .text	0000000e dw1000_read_txtime_lo
0001acf0 g     F .text	00000204 bierman_dbl
0001be4c g     F .text	0000043c rng_json_write
00008b3a g     F .text	0000003e uwb_mac_remove_interface
00019dc0 g     F .text	000002d4 srkf_dbl_main
0000d74c g     F .text	0000005c os_callout_tick
00025a10 g     O .text	00000048 sysflash_map_dflt
20006d8c g     O .bss	0000001c nrf52_hal_timer0
0001b414 g     F .text	0000005a BitIndex
000080f8 g       .text	00000000 __isr_vector_end
0000d09c g     F .text	000000f8 hal_spi_txrx_noblock
0000d618 g     F .text	0000001a os_start
0000c1b0 g     F .text	00000034 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
0001ffe8 g     F .text	00000086 boot_set_pending
0000a1b0 g     F .text	00000050 dw1000_dev_deinit
0000ceb0 g     F .text	0000004c hal_spi_enable
0001d458 g     F .text	0000009c imgmgr_state_write
0002200c g     F .text	00000040 .hidden __aeabi_d2uiz
00011d74 g     F .text	0000002e dpl_cputime_timer_init
000230b0 g     F .text	00000010 nan
0000d7e8 g     F .text	0000002e os_cputime_timer_init
00008af0 g     F .text	0000004a uwb_mac_append_interface
00022e58 g     F .text	00000198 __ieee754_sqrt
00012664 g     F .text	00000014 conf_store_init
0000c8b4 g     F .text	00000056 dw1000_phy_event_cnt_read
00011da2 g     F .text	00000008 dpl_cputime_timer_start
000192e8 g     F .text	00000024 nrng_get_config
00022550 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
000132c0 g     F .text	000002f4 console_handle_char
0000c0d6 g     F .text	00000032 dw1000_phy_sysclk_LDE
00021f2c g     F .text	00000012 .hidden __aeabi_dcmpeq
0001c5fe g     F .text	00000020 fwrite
00014424 g     F .text	00000044 shell_register
0001f8e0 g     F .text	00000010 mfg_open
20001340 g     O .data	00000008 g_os_run_list
0000b254 g     F .text	00000058 dw1000_mac_init
0000bece g     F .text	00000010 dw1000_read_rxtime
0001bc3c g     F .text	00000002 uwb_rng_pkg_init2
0000ac58 g     F .text	000003e4 dw1000_mac_config
00008a4c g     F .text	00000034 NVIC_Relocate
000124fc g     F .text	00000028 conf_src_register
00016cba g     F .text	0000000a cbor_encoder_init
0001608c g     F .text	0000006c sysinit_app
20001d9c g     O .bss	00000004 os_flags
00021234 g     F .text	00000054 json_encode_object_key
0000f22a g     F .text	00000032 tdma_stop
0001ff2c g     F .text	00000016 boot_write_swap_type
0000d1c0 g     F .text	00000006 os_arch_restore_sr
20006d80 g     O .bss	0000000c g_hal_os_tick
00011eea g     F .text	0000002e dpl_mbuf_get
0000a594 g     F .text	000001ac dw1000_start_rx
00010168 g     F .text	00000038 uwb_ccp_skew_compensation_ui64
00021288 g     F .text	00000068 json_encode_object_entry
0001fb84 g     F .text	00000054 log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cde0 g     F .text	00000014 imgmgr_dfu_started
0001e504 g     F .text	00000026 flash_area_is_empty
20002f48 g     O .bss	00000004 g_os_started
00020628 g     F .text	00000086 mbedtls_sha256_update_ret
0001c59c g     F .text	00000038 wcs_timescale_pkg_init
00020218 g     F .text	000000d8 split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
000151d4 g     F .text	00000250 uwbcfg_commit_to_inst
0001cae0 g     F .text	0000003c imgr_find_by_hash
00011dbc g     F .text	00000016 dpl_cputime_delay_ticks
000174dc g     F .text	0000003e cbor_value_leave_container
00020a2e g     F .text	00000032 fcb_append_to_scratch
0001d5d8 g     F .text	00000028 mgmt_cbuf_setoerr
00008448 g     F .text	00000010 SystemCoreClockUpdate
000215d4 g     F .text	00000020 json_encode_object_finish
0000eaea g     F .text	00000020 os_mbuf_free_chain
00021fbc g     F .text	0000004e .hidden __aeabi_d2iz
0000e874 g     F .text	0000003c os_get_uptime
0001930c g     F .text	00000032 nrng_append_config
0000dd78 g     F .text	00000034 os_msys_init
00020d14 g     F .text	00000088 fcb_getnext_nolock
0000ebb2 g     F .text	00000024 os_mbuf_off
2000685b g     O .bss	00000001 g_is_output_nlip
00014468 g     F .text	00000084 shell_cmd_register
0000cb68 g     F .text	00000028 hal_gpio_irq_enable
0000e6f0 g     F .text	0000000c os_time_get
200074e0 g     O .bss	0000001c modlog_mapping_pool
0000cff0 g     F .text	000000ac hal_spi_txrx
00019bd8 g     F .text	000000c8 timescale_main
00019158 g     F .text	00000064 hal_timer_stop
0000a25e g     F .text	00000062 dw1000_read_rx
0000a97a g     F .text	00000048 dw1000_sync_rxbufptrs
00012904 g     F .text	0000003c conf_get_value
0001e808 g     F .text	00000058 log_append_body
0001b6a8 g     F .text	0000002e uwb_rng_free
0000eaa4 g     F .text	00000032 os_mbuf_get_pkthdr
20007368 g     O .bss	00000008 g_log_info
00012858 g     F .text	00000078 conf_str_from_value
00022538  w    F .text	00000002 .hidden __aeabi_idiv0
00016b20 g     F .text	00000050 cbor_mbuf_reader_init
00021f90 g     F .text	0000002c .hidden __unorddf2
00015d00 g     F .text	00000200 datetime_parse
00020a60 g     F .text	000000fa fcb_append
200000d8 g     O .rtt	00000048 _SEGGER_RTT
000128d0 g     F .text	00000034 conf_set_value
00025118 g     O .text	00000048 cmd_dw1000_param
00011db2 g     F .text	0000000a dpl_cputime_get32
0001e860 g     F .text	00000040 log_printf
000242b0 g     O .text	00000006 g_stats_map_stats
0000e47c g     F .text	000000d8 os_task_init
00012118 g     F .text	000000ae dpl_mbuf_adj
000081fc g     F .text	0000004c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
0001eaf8 g     F .text	0000004c log_console_init
0001504c g     F .text	000000a0 sysdown
00009608 g     F .text	00000008 uwb_dw1000_event_cnt_read
000111b8 g     F .text	00000018 uwb_wcs_local_to_master
000135c8 g     F .text	00000028 console_line_event_put
0001c6e0 g     F .text	00000010 strlen
0000d8f4 g     F .text	00000038 os_dev_create
0000dbea g     F .text	0000001e os_memblock_put_from_cb
0001fcce g     F .text	00000054 rwlock_acquire_write
00009bf0 g     F .text	000000b2 dw1000_dev_configure_sleep
0000d9ac g     F .text	00000012 os_eventq_init
0000e6fc g     F .text	00000044 os_time_advance
00008fec g     F .text	0000026c hal_dw1000_read_noblock
00021f1c g     F .text	00000010 .hidden __aeabi_cdcmpeq
00012ab0 g     F .text	00000010 conf_cli_register
00021e80 g     F .text	0000008a .hidden __gedf2
0000e310 g     F .text	0000002c os_sched_resort
20007564 g     O .bss	00000004 boot_current_slot
00010cc0 g     F .text	0000030c uwb_transport_dequeue_tx
0001c4f8 g     F .text	00000088 wcs_timescale_init
000179cc g     F .text	00000050 dw1000_pkg_down
00012478 g     F .text	0000002a dpl_memblock_put
00020eda g     F .text	00000028 hal_flash_init
00011054 g     F .text	00000034 uwb_wcs_free
0001c6b4 g     F .text	00000016 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
00014c90 g     F .text	00000044 stats_module_init
0001d5b8 g     F .text	00000020 mgmt_find_handler
000219ac g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
00009b52 g     F .text	0000009e dw1000_softreset
00008f34 g     F .text	000000b6 hal_dw1000_read
0001cdf4 g     F .text	00000014 imgmgr_dfu_pending
00011f9a g     F .text	000000a8 dpl_mbuf_append
0001eb44 g     F .text	0000001c log_level_get
0002006e g     F .text	0000004c boot_set_confirmed
00014794 g     F .text	00000014 shell_nlip_input_register
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00021144 g     F .text	00000032 hal_flash_isempty_no_buf
00015424 g     F .text	00000028 uwbcfg_commit
0000d92c g     F .text	0000002c os_dev_initialize_all
000216ec g     F .text	0000027a .hidden __subdf3
00014690 g     F .text	00000024 shell_nlip_clear_pkt
0001f5b0 g     F .text	0000003a modlog_printf
0000a806 g     F .text	00000012 dw1000_set_on_error_continue
0000e16c g     F .text	00000084 os_sched_remove
0001cb1c g     F .text	00000048 imgmgr_find_best_area_id
20001348 g     O .data	00000008 g_os_sleep_list
000220ec g     F .text	00000000 .hidden __aeabi_ldivmod
00016084 g     F .text	00000008 streamer_console_get
00017620 g     F .text	00000068 hal_bsp_init
0000d644 g     F .text	00000038 os_pkg_init
0000b1d8 g     F .text	0000007c dw1000_tasks_init
0000cefc g     F .text	00000068 hal_spi_disable
000157e0 g     F .text	00000180 strtod_soft
00012680 g     F .text	00000060 conf_init
0000df94 g     F .text	00000010 os_sanity_check_init
00020e48 g     F .text	00000074 fcb_walk
00012042 g     F .text	00000024 dpl_mbuf_off
0000beb0 g     F .text	00000010 dw1000_read_systime
00014c0c g     F .text	0000002c stats_init
00011c8c g     F .text	00000008 vfprintf
0001c896 g     F .text	00000030 strpbrk
0000b060 g     F .text	000000e0 dw1000_calc_clock_offset_ratio
0000caf0 g     F .text	00000078 hal_gpio_irq_init
20002ef8 g     O .bss	00000050 g_os_main_task
0000c04c g     F .text	0000002e dw1000_phy_sysclk_XTAL
0000cb90 g     F .text	0000001c hal_gpio_irq_disable
00011404 g     F .text	0000002c free
00010668 g     F .text	0000003c uwb_ccp_pkg_down
0001ff18 g     F .text	00000014 boot_write_image_ok
00020454 g     F .text	000000a4 mbedtls_sha256_starts_ret
0001545c g     F .text	00000054 uwbcfg_pkg_init
00012eb4 g     F .text	0000001e console_out
0000c108 g     F .text	0000002a dw1000_phy_sysclk_SEQ



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000e937 	.word	0x0000e937
	...
    8058:	0000e97d 	.word	0x0000e97d
    805c:	0000e9c3 	.word	0x0000e9c3
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20001b30 	.word	0x20001b30
    ldr     r3, =__bss_end__
    8134:	200075e4 	.word	0x200075e4
    ldr    r1, =__etext
    8138:	00025c00 	.word	0x00025c00
    ldr    r2, =__data_start__
    813c:	20000530 	.word	0x20000530
    ldr    r3, =__data_end__
    8140:	20001b30 	.word	0x20001b30
    LDR     R0, =__HeapBase
    8144:	200075e8 	.word	0x200075e8
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008459 	.word	0x00008459
    LDR     R0, =_start
    8150:	00008631 	.word	0x00008631

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	20000530 	.word	0x20000530

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	20000530 	.word	0x20000530

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81c6:	f000 0001 	and.w	r0, r0, #1
    81ca:	4770      	bx	lr
    81cc:	e000ed00 	.word	0xe000ed00

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    824c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8250:	2b06      	cmp	r3, #6
    8252:	d001      	beq.n	8258 <errata_16+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8258:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    825c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8260:	f013 0f0f 	tst.w	r3, #15
    8264:	d109      	bne.n	827a <errata_16+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    826a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    826e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8272:	2b30      	cmp	r3, #48	; 0x30
    8274:	d003      	beq.n	827e <errata_16+0x36>
    return false;
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
    827a:	2000      	movs	r0, #0
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
}
    8280:	4770      	bx	lr

00008282 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8282:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8286:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    828a:	2b06      	cmp	r3, #6
    828c:	d001      	beq.n	8292 <errata_31+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828e:	2000      	movs	r0, #0
    8290:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8292:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8296:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    829a:	f013 0f0f 	tst.w	r3, #15
    829e:	d10d      	bne.n	82bc <errata_31+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82a0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82a4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ac:	2b30      	cmp	r3, #48	; 0x30
    82ae:	d007      	beq.n	82c0 <errata_31+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82b0:	2b40      	cmp	r3, #64	; 0x40
    82b2:	d007      	beq.n	82c4 <errata_31+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82b4:	2b50      	cmp	r3, #80	; 0x50
    82b6:	d007      	beq.n	82c8 <errata_31+0x46>
    return false;
    82b8:	2000      	movs	r0, #0
    82ba:	4770      	bx	lr
    82bc:	2000      	movs	r0, #0
    82be:	4770      	bx	lr
            return true;
    82c0:	2001      	movs	r0, #1
    82c2:	4770      	bx	lr
            return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
            return true;
    82c8:	2001      	movs	r0, #1
}
    82ca:	4770      	bx	lr

000082cc <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82cc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82d0:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    82e4:	f013 0f0f 	tst.w	r3, #15
    82e8:	d109      	bne.n	82fe <errata_32+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82f6:	2b30      	cmp	r3, #48	; 0x30
    82f8:	d003      	beq.n	8302 <errata_32+0x36>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
}
    8304:	4770      	bx	lr

00008306 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8306:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    830a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    830e:	2b06      	cmp	r3, #6
    8310:	d001      	beq.n	8316 <errata_36+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8316:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    831a:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    831e:	f013 0f0f 	tst.w	r3, #15
    8322:	d10d      	bne.n	8340 <errata_36+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8324:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8328:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8330:	2b30      	cmp	r3, #48	; 0x30
    8332:	d007      	beq.n	8344 <errata_36+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8334:	2b40      	cmp	r3, #64	; 0x40
    8336:	d007      	beq.n	8348 <errata_36+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8338:	2b50      	cmp	r3, #80	; 0x50
    833a:	d007      	beq.n	834c <errata_36+0x46>
    return false;
    833c:	2000      	movs	r0, #0
    833e:	4770      	bx	lr
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
            return true;
    8344:	2001      	movs	r0, #1
    8346:	4770      	bx	lr
            return true;
    8348:	2001      	movs	r0, #1
    834a:	4770      	bx	lr
            return true;
    834c:	2001      	movs	r0, #1
}
    834e:	4770      	bx	lr

00008350 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8350:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8354:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8358:	2b06      	cmp	r3, #6
    835a:	d001      	beq.n	8360 <errata_37+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8360:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8364:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d109      	bne.n	8382 <errata_37+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8372:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    837a:	2b30      	cmp	r3, #48	; 0x30
    837c:	d003      	beq.n	8386 <errata_37+0x36>
    return false;
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
    8382:	2000      	movs	r0, #0
    8384:	4770      	bx	lr
            return true;
    8386:	2001      	movs	r0, #1
}
    8388:	4770      	bx	lr

0000838a <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    838a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    838e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8392:	2b06      	cmp	r3, #6
    8394:	d001      	beq.n	839a <errata_57+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    839a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    839e:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83a2:	f013 0f0f 	tst.w	r3, #15
    83a6:	d109      	bne.n	83bc <errata_57+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83ac:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b4:	2b30      	cmp	r3, #48	; 0x30
    83b6:	d003      	beq.n	83c0 <errata_57+0x36>
    return false;
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr
            return true;
    83c0:	2001      	movs	r0, #1
}
    83c2:	4770      	bx	lr

000083c4 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83c8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    83cc:	2b06      	cmp	r3, #6
    83ce:	d001      	beq.n	83d4 <errata_66+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d0:	2000      	movs	r0, #0
    83d2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83dc:	f013 0f0f 	tst.w	r3, #15
    83e0:	d109      	bne.n	83f6 <errata_66+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83e6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x36>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr

000083fe <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83fe:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8402:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8406:	2b06      	cmp	r3, #6
    8408:	d001      	beq.n	840e <errata_108+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    840a:	2000      	movs	r0, #0
    840c:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8412:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8416:	f013 0f0f 	tst.w	r3, #15
    841a:	d10d      	bne.n	8438 <errata_108+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    841c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8420:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8428:	2b30      	cmp	r3, #48	; 0x30
    842a:	d007      	beq.n	843c <errata_108+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842c:	2b40      	cmp	r3, #64	; 0x40
    842e:	d007      	beq.n	8440 <errata_108+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8430:	2b50      	cmp	r3, #80	; 0x50
    8432:	d007      	beq.n	8444 <errata_108+0x46>
    return false;
    8434:	2000      	movs	r0, #0
    8436:	4770      	bx	lr
    8438:	2000      	movs	r0, #0
    843a:	4770      	bx	lr
            return true;
    843c:	2001      	movs	r0, #1
    843e:	4770      	bx	lr
            return true;
    8440:	2001      	movs	r0, #1
    8442:	4770      	bx	lr
            return true;
    8444:	2001      	movs	r0, #1
}
    8446:	4770      	bx	lr

00008448 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b01      	ldr	r3, [pc, #4]	; (8450 <SystemCoreClockUpdate+0x8>)
    844a:	4a02      	ldr	r2, [pc, #8]	; (8454 <SystemCoreClockUpdate+0xc>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	4770      	bx	lr
    8450:	2000053c 	.word	0x2000053c
    8454:	03d09000 	.word	0x03d09000

00008458 <SystemInit>:
{
    8458:	b508      	push	{r3, lr}
    if (errata_16()){
    845a:	f7ff fef5 	bl	8248 <errata_16>
    845e:	b110      	cbz	r0, 8466 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8460:	4b6c      	ldr	r3, [pc, #432]	; (8614 <SystemInit+0x1bc>)
    8462:	4a6d      	ldr	r2, [pc, #436]	; (8618 <SystemInit+0x1c0>)
    8464:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8466:	f7ff ff0c 	bl	8282 <errata_31>
    846a:	b148      	cbz	r0, 8480 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8470:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    8474:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    847c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    8480:	f7ff ff24 	bl	82cc <errata_32>
    8484:	b130      	cbz	r0, 8494 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8486:	4a65      	ldr	r2, [pc, #404]	; (861c <SystemInit+0x1c4>)
    8488:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    8494:	f7ff ff37 	bl	8306 <errata_36>
    8498:	b140      	cbz	r0, 84ac <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    849e:	2200      	movs	r2, #0
    84a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84a8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84ac:	f7ff ff50 	bl	8350 <errata_37>
    84b0:	b120      	cbz	r0, 84bc <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b6:	2203      	movs	r2, #3
    84b8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    84bc:	f7ff ff65 	bl	838a <errata_57>
    84c0:	b160      	cbz	r0, 84dc <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1c8>)
    84c4:	2205      	movs	r2, #5
    84c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84ca:	2201      	movs	r2, #1
    84cc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84d0:	2200      	movs	r2, #0
    84d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    if (errata_66()){
    84dc:	f7ff ff72 	bl	83c4 <errata_66>
    84e0:	2800      	cmp	r0, #0
    84e2:	d046      	beq.n	8572 <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ec:	4b4d      	ldr	r3, [pc, #308]	; (8624 <SystemInit+0x1cc>)
    84ee:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84fa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fe:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8502:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8506:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    850a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8512:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8516:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    851a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8522:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8526:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    852a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8532:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8536:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    853a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8542:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8546:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    854a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8552:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8556:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    855a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8562:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8566:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    856a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8572:	f7ff ff44 	bl	83fe <errata_108>
    8576:	b148      	cbz	r0, 858c <SystemInit+0x134>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    857c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8580:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8588:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    858c:	4a23      	ldr	r2, [pc, #140]	; (861c <SystemInit+0x1c4>)
    858e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    859a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859e:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    85a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    85a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85aa:	f013 0f01 	tst.w	r3, #1
    85ae:	d104      	bne.n	85ba <SystemInit+0x162>
    SystemCoreClockUpdate();
    85b0:	f7ff ff4a 	bl	8448 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85b4:	f000 fa4a 	bl	8a4c <NVIC_Relocate>
}
    85b8:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85ba:	4b1b      	ldr	r3, [pc, #108]	; (8628 <SystemInit+0x1d0>)
    85bc:	2201      	movs	r2, #1
    85be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <SystemInit+0x1d0>)
    85c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85c8:	2b00      	cmp	r3, #0
    85ca:	d0fa      	beq.n	85c2 <SystemInit+0x16a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85d0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85d4:	f023 0301 	bic.w	r3, r3, #1
    85d8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <SystemInit+0x1d0>)
    85de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85e2:	2b00      	cmp	r3, #0
    85e4:	d0fa      	beq.n	85dc <SystemInit+0x184>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85e6:	4b10      	ldr	r3, [pc, #64]	; (8628 <SystemInit+0x1d0>)
    85e8:	2200      	movs	r2, #0
    85ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85ee:	4b0e      	ldr	r3, [pc, #56]	; (8628 <SystemInit+0x1d0>)
    85f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85f4:	2b00      	cmp	r3, #0
    85f6:	d0fa      	beq.n	85ee <SystemInit+0x196>
  __ASM volatile ("dsb 0xF":::"memory");
    85f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85fc:	4907      	ldr	r1, [pc, #28]	; (861c <SystemInit+0x1c4>)
    85fe:	68ca      	ldr	r2, [r1, #12]
    8600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8604:	4b09      	ldr	r3, [pc, #36]	; (862c <SystemInit+0x1d4>)
    8606:	4313      	orrs	r3, r2
    8608:	60cb      	str	r3, [r1, #12]
    860a:	f3bf 8f4f 	dsb	sy
    __NOP();
    860e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8610:	e7fd      	b.n	860e <SystemInit+0x1b6>
    8612:	bf00      	nop
    8614:	4007c000 	.word	0x4007c000
    8618:	baadf00d 	.word	0xbaadf00d
    861c:	e000ed00 	.word	0xe000ed00
    8620:	40005000 	.word	0x40005000
    8624:	4000c000 	.word	0x4000c000
    8628:	4001e000 	.word	0x4001e000
    862c:	05fa0004 	.word	0x05fa0004

00008630 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8630:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8632:	4803      	ldr	r0, [pc, #12]	; (8640 <_start+0x10>)
    8634:	f004 ff8c 	bl	d550 <os_init>
    os_start();
    8638:	f004 ffee 	bl	d618 <os_start>
#endif
}
    863c:	bd08      	pop	{r3, pc}
    863e:	bf00      	nop
    8640:	00008885 	.word	0x00008885

00008644 <_init>:

void
_init(void)
{
}
    8644:	4770      	bx	lr
	...

00008648 <uwb_config_updated_func>:
 * Called from the main event queue as a result of the uwbcfg packet
 * having received a commit/load of new uwb configuration.
 */
int
uwb_config_updated_func()
{
    8648:	b510      	push	{r4, lr}
    /* Workaround in case we're stuck waiting for ccp with the
     * wrong radio settings */
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    864a:	2000      	movs	r0, #0
    864c:	f000 fa20 	bl	8a90 <uwb_dev_idx_lookup>
    8650:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8652:	2101      	movs	r1, #1
    8654:	f000 faa1 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    8658:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    865c:	b123      	cbz	r3, 8668 <uwb_config_updated_func+0x20>
        uwb_txrf_config(udev, &udev->config.txrf);
        uwb_start_rx(udev);
        return 0;
    }

    uwb_config_updated = true;
    865e:	4b0d      	ldr	r3, [pc, #52]	; (8694 <uwb_config_updated_func+0x4c>)
    8660:	2201      	movs	r2, #1
    8662:	701a      	strb	r2, [r3, #0]
    return 0;
}
    8664:	2000      	movs	r0, #0
    8666:	bd10      	pop	{r4, pc}
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    8668:	6a63      	ldr	r3, [r4, #36]	; 0x24
    866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    866e:	4620      	mov	r0, r4
    8670:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8672:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	2100      	movs	r1, #0
    8678:	4620      	mov	r0, r4
    867a:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    867c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    867e:	685b      	ldr	r3, [r3, #4]
    8680:	f204 5124 	addw	r1, r4, #1316	; 0x524
    8684:	4620      	mov	r0, r4
    8686:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    8688:	6a63      	ldr	r3, [r4, #36]	; 0x24
    868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    868c:	4620      	mov	r0, r4
    868e:	4798      	blx	r3
        return 0;
    8690:	e7e8      	b.n	8664 <uwb_config_updated_func+0x1c>
    8692:	bf00      	nop
    8694:	20001d2d 	.word	0x20001d2d

00008698 <stream_slot_cb>:
 * returns none
 */

static void
stream_slot_cb(struct dpl_event * ev)
{
    8698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    869c:	ed2d 8b02 	vpush	{d8}
    86a0:	b082      	sub	sp, #8
    uint64_t dxtime, dxtime_end;
    uint64_t preamble_duration;
    assert(ev);
    86a2:	2800      	cmp	r0, #0
    86a4:	d058      	beq.n	8758 <stream_slot_cb+0xc0>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    86a6:	6883      	ldr	r3, [r0, #8]
    tdma_slot_t * slot = (tdma_slot_t *) dpl_event_get_arg(ev);
    tdma_instance_t * tdma = slot->parent;
    86a8:	689d      	ldr	r5, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    86aa:	686a      	ldr	r2, [r5, #4]

    uint16_t idx = slot->idx;
    86ac:	f8b3 a000 	ldrh.w	sl, [r3]
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)slot->arg;
    86b0:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
    86b4:	f8b2 30b6 	ldrh.w	r3, [r2, #182]	; 0xb6
    /* Avoid colliding with the ccp in case we've got out of sync */
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    86b8:	2b00      	cmp	r3, #0
    86ba:	d048      	beq.n	874e <stream_slot_cb+0xb6>
        return;
    }
#if MYNEWT_VAL(UWBCFG_ENABLED)
    struct uwb_dev * inst = tdma->dev_inst;
    86bc:	682c      	ldr	r4, [r5, #0]
    if (uwb_config_updated) {
    86be:	4b40      	ldr	r3, [pc, #256]	; (87c0 <stream_slot_cb+0x128>)
    86c0:	781b      	ldrb	r3, [r3, #0]
    86c2:	2b00      	cmp	r3, #0
    86c4:	d14e      	bne.n	8764 <stream_slot_cb+0xcc>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    86c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    86c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    86cc:	4620      	mov	r0, r4
    86ce:	4798      	blx	r3
        uwb_txrf_config(inst, &inst->config.txrf);
        uwb_config_updated = false;
        return;
    }
#endif
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst)));
    86d0:	f019 f95a 	bl	21988 <__aeabi_i2d>
    86d4:	a338      	add	r3, pc, #224	; (adr r3, 87b8 <stream_slot_cb+0x120>)
    86d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    86da:	f019 fae9 	bl	21cb0 <__aeabi_ddiv>
    86de:	f019 fcb5 	bl	2204c <__aeabi_d2f>
    86e2:	ee00 0a10 	vmov	s0, r0
    86e6:	f019 ff33 	bl	22550 <ceilf>
    86ea:	ee10 0a10 	vmov	r0, s0
    86ee:	f019 fd7d 	bl	221ec <__aeabi_f2ulz>
    86f2:	4689      	mov	r9, r1
    86f4:	4604      	mov	r4, r0
    dxtime = tdma_tx_slot_start(tdma, idx);
    86f6:	ee07 aa90 	vmov	s15, sl
    86fa:	eef8 8a67 	vcvt.f32.u32	s17, s15
    86fe:	eeb0 0a68 	vmov.f32	s0, s17
    8702:	4628      	mov	r0, r5
    8704:	f006 fdf8 	bl	f2f8 <tdma_tx_slot_start>
    8708:	4607      	mov	r7, r0
    870a:	460e      	mov	r6, r1
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    870c:	f10a 0301 	add.w	r3, sl, #1
    8710:	ee08 3a10 	vmov	s16, r3
    8714:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    8718:	eeb0 0a48 	vmov.f32	s0, s16
    871c:	4628      	mov	r0, r5
    871e:	f006 fdeb 	bl	f2f8 <tdma_tx_slot_start>
                  ((preamble_duration + MYNEWT_VAL(OS_LATENCY))<<16)) & UWB_DTU_40BMASK;
    8722:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
    8726:	f149 0900 	adc.w	r9, r9, #0
    872a:	ea4f 4909 	mov.w	r9, r9, lsl #16
    872e:	ea49 4914 	orr.w	r9, r9, r4, lsr #16
    8732:	0424      	lsls	r4, r4, #16
    dxtime_end = (tdma_tx_slot_start(tdma, idx+1) -
    8734:	1b00      	subs	r0, r0, r4
    8736:	eb61 0109 	sbc.w	r1, r1, r9
    873a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    dxtime_end &= UWB_DTU_40BMASK;
    if (uwb_transport_dequeue_tx(uwb_transport, dxtime, dxtime_end) == false) {
    873e:	9000      	str	r0, [sp, #0]
    8740:	9101      	str	r1, [sp, #4]
    8742:	463a      	mov	r2, r7
    8744:	4633      	mov	r3, r6
    8746:	4640      	mov	r0, r8
    8748:	f008 faba 	bl	10cc0 <uwb_transport_dequeue_tx>
    874c:	b1c8      	cbz	r0, 8782 <stream_slot_cb+0xea>
        dxtime_end = (tdma_rx_slot_start(tdma, idx+1) -
                      ((preamble_duration + MYNEWT_VAL(OS_LATENCY))<<16)) & UWB_DTU_40BMASK;
        dxtime_end &= UWB_DTU_40BMASK;
        uwb_transport_listen(uwb_transport, UWB_BLOCKING, dxtime, dxtime_end);
    }
}
    874e:	b002      	add	sp, #8
    8750:	ecbd 8b02 	vpop	{d8}
    8754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(ev);
    8758:	2300      	movs	r3, #0
    875a:	461a      	mov	r2, r3
    875c:	4619      	mov	r1, r3
    875e:	4618      	mov	r0, r3
    8760:	f004 fdfe 	bl	d360 <__assert_func>
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8764:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8766:	681b      	ldr	r3, [r3, #0]
    8768:	2100      	movs	r1, #0
    876a:	4620      	mov	r0, r4
    876c:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8770:	685b      	ldr	r3, [r3, #4]
    8772:	f204 5124 	addw	r1, r4, #1316	; 0x524
    8776:	4620      	mov	r0, r4
    8778:	4798      	blx	r3
        uwb_config_updated = false;
    877a:	4b11      	ldr	r3, [pc, #68]	; (87c0 <stream_slot_cb+0x128>)
    877c:	2200      	movs	r2, #0
    877e:	701a      	strb	r2, [r3, #0]
        return;
    8780:	e7e5      	b.n	874e <stream_slot_cb+0xb6>
        dxtime = tdma_rx_slot_start(tdma, idx);
    8782:	eeb0 0a68 	vmov.f32	s0, s17
    8786:	4628      	mov	r0, r5
    8788:	f006 fd87 	bl	f29a <tdma_rx_slot_start>
    878c:	4607      	mov	r7, r0
    878e:	460e      	mov	r6, r1
        dxtime_end = (tdma_rx_slot_start(tdma, idx+1) -
    8790:	eeb0 0a48 	vmov.f32	s0, s16
    8794:	4628      	mov	r0, r5
    8796:	f006 fd80 	bl	f29a <tdma_rx_slot_start>
    879a:	1b04      	subs	r4, r0, r4
    879c:	eb61 0109 	sbc.w	r1, r1, r9
    87a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
        uwb_transport_listen(uwb_transport, UWB_BLOCKING, dxtime, dxtime_end);
    87a4:	9400      	str	r4, [sp, #0]
    87a6:	9101      	str	r1, [sp, #4]
    87a8:	463a      	mov	r2, r7
    87aa:	4633      	mov	r3, r6
    87ac:	2100      	movs	r1, #0
    87ae:	4640      	mov	r0, r8
    87b0:	f008 f948 	bl	10a44 <uwb_transport_listen>
    87b4:	e7cb      	b.n	874e <stream_slot_cb+0xb6>
    87b6:	bf00      	nop
    87b8:	90690691 	.word	0x90690691
    87bc:	3ff06906 	.word	0x3ff06906
    87c0:	20001d2d 	.word	0x20001d2d

000087c4 <uwb_transport_cb>:
static uint8_t g_idx = 0;
static uint32_t g_missed_count = 0;
static uint32_t g_ok_count = 0;
static bool
uwb_transport_cb(struct uwb_dev * inst, uint16_t uid, struct dpl_mbuf * mbuf)
{
    87c4:	b570      	push	{r4, r5, r6, lr}
    87c6:	b082      	sub	sp, #8
    87c8:	4615      	mov	r5, r2
    uint16_t len = DPL_MBUF_PKTLEN(mbuf);
    87ca:	8a16      	ldrh	r6, [r2, #16]
    dpl_mbuf_copydata(mbuf, 0, sizeof(test), test);
    87cc:	4c27      	ldr	r4, [pc, #156]	; (886c <uwb_transport_cb+0xa8>)
    87ce:	4623      	mov	r3, r4
    87d0:	f240 12f1 	movw	r2, #497	; 0x1f1
    87d4:	2100      	movs	r1, #0
    87d6:	4628      	mov	r0, r5
    87d8:	f009 fc71 	bl	120be <dpl_mbuf_copydata>
    dpl_mbuf_free_chain(mbuf);
    87dc:	4628      	mov	r0, r5
    87de:	f009 fbcc 	bl	11f7a <dpl_mbuf_free_chain>
    g_idx++;
    87e2:	4a23      	ldr	r2, [pc, #140]	; (8870 <uwb_transport_cb+0xac>)
    87e4:	7813      	ldrb	r3, [r2, #0]
    87e6:	3301      	adds	r3, #1
    87e8:	7013      	strb	r3, [r2, #0]
    /* First byte stores crc */
    if (test[0] != crc8_calc(0, test+1, sizeof(test)-1) || len != sizeof(test)){
    87ea:	4621      	mov	r1, r4
    87ec:	f811 4b01 	ldrb.w	r4, [r1], #1
    87f0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
    87f4:	2000      	movs	r0, #0
    87f6:	f00d fc07 	bl	16008 <crc8_calc>
    87fa:	4284      	cmp	r4, r0
    87fc:	d103      	bne.n	8806 <uwb_transport_cb+0x42>
    87fe:	f240 13f1 	movw	r3, #497	; 0x1f1
    8802:	429e      	cmp	r6, r3
    8804:	d00f      	beq.n	8826 <uwb_transport_cb+0x62>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8806:	f005 f806 	bl	d816 <os_cputime_get32>
    880a:	4601      	mov	r1, r0
        printf("{\"utime\": %lu,\"error\": \" crc mismatch len=%d, sizeof(test) = %d\"}\n",utime, len, sizeof(test));
    880c:	f240 13f1 	movw	r3, #497	; 0x1f1
    8810:	4632      	mov	r2, r6
    8812:	4818      	ldr	r0, [pc, #96]	; (8874 <uwb_transport_cb+0xb0>)
    8814:	f009 fa3e 	bl	11c94 <printf>
               utime, test[1], g_idx, g_missed_count, g_ok_count);
    } else {
        g_ok_count++;
    }

    g_idx = test[1];
    8818:	4b14      	ldr	r3, [pc, #80]	; (886c <uwb_transport_cb+0xa8>)
    881a:	785a      	ldrb	r2, [r3, #1]
    881c:	4b14      	ldr	r3, [pc, #80]	; (8870 <uwb_transport_cb+0xac>)
    881e:	701a      	strb	r2, [r3, #0]
    return true;
}
    8820:	2001      	movs	r0, #1
    8822:	b002      	add	sp, #8
    8824:	bd70      	pop	{r4, r5, r6, pc}
    } else if (test[1] != g_idx) {
    8826:	4b11      	ldr	r3, [pc, #68]	; (886c <uwb_transport_cb+0xa8>)
    8828:	785a      	ldrb	r2, [r3, #1]
    882a:	4b11      	ldr	r3, [pc, #68]	; (8870 <uwb_transport_cb+0xac>)
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	429a      	cmp	r2, r3
    8830:	d104      	bne.n	883c <uwb_transport_cb+0x78>
        g_ok_count++;
    8832:	4a11      	ldr	r2, [pc, #68]	; (8878 <uwb_transport_cb+0xb4>)
    8834:	6813      	ldr	r3, [r2, #0]
    8836:	3301      	adds	r3, #1
    8838:	6013      	str	r3, [r2, #0]
    883a:	e7ed      	b.n	8818 <uwb_transport_cb+0x54>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    883c:	f004 ffeb 	bl	d816 <os_cputime_get32>
    8840:	4601      	mov	r1, r0
        g_ok_count++;
    8842:	4b0d      	ldr	r3, [pc, #52]	; (8878 <uwb_transport_cb+0xb4>)
    8844:	681d      	ldr	r5, [r3, #0]
    8846:	3501      	adds	r5, #1
    8848:	601d      	str	r5, [r3, #0]
        g_missed_count += (test[1] - g_idx)&0xff;
    884a:	4b08      	ldr	r3, [pc, #32]	; (886c <uwb_transport_cb+0xa8>)
    884c:	785a      	ldrb	r2, [r3, #1]
    884e:	4b08      	ldr	r3, [pc, #32]	; (8870 <uwb_transport_cb+0xac>)
    8850:	781b      	ldrb	r3, [r3, #0]
    8852:	1ad4      	subs	r4, r2, r3
    8854:	4e09      	ldr	r6, [pc, #36]	; (887c <uwb_transport_cb+0xb8>)
    8856:	6830      	ldr	r0, [r6, #0]
    8858:	fa50 f484 	uxtab	r4, r0, r4
    885c:	6034      	str	r4, [r6, #0]
        printf("{\"utime\": %lu,\"error\": \" idx mismatch (got %d != expected %d) (missed:%ld, ok:%ld\"}\n",
    885e:	9501      	str	r5, [sp, #4]
    8860:	9400      	str	r4, [sp, #0]
    8862:	4807      	ldr	r0, [pc, #28]	; (8880 <uwb_transport_cb+0xbc>)
    8864:	f009 fa16 	bl	11c94 <printf>
    8868:	e7d6      	b.n	8818 <uwb_transport_cb+0x54>
    886a:	bf00      	nop
    886c:	20001b3c 	.word	0x20001b3c
    8870:	20001b30 	.word	0x20001b30
    8874:	000232d8 	.word	0x000232d8
    8878:	20001b38 	.word	0x20001b38
    887c:	20001b34 	.word	0x20001b34
    8880:	0002331c 	.word	0x0002331c

00008884 <main>:
#endif




int main(int argc, char **argv){
    8884:	b5f0      	push	{r4, r5, r6, r7, lr}
    8886:	b089      	sub	sp, #36	; 0x24
    int rc;

    sysinit();
    8888:	f00c fc34 	bl	150f4 <sysinit_start>
    888c:	f00d fbfe 	bl	1608c <sysinit_app>
    8890:	f00c fc36 	bl	15100 <sysinit_end>

    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    8894:	2000      	movs	r0, #0
    8896:	f000 f8fb 	bl	8a90 <uwb_dev_idx_lookup>
    889a:	4604      	mov	r4, r0

#if MYNEWT_VAL(USE_DBLBUFFER)
    /* Make sure to enable double buffring */
    udev->config.dblbuffon_enabled = 1;
    889c:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    88a0:	f043 0310 	orr.w	r3, r3, #16
    88a4:	f880 352c 	strb.w	r3, [r0, #1324]	; 0x52c
    udev->config.rxauto_enable = 0;
    88a8:	f890 352d 	ldrb.w	r3, [r0, #1325]	; 0x52d
    88ac:	f36f 0300 	bfc	r3, #0, #1
    88b0:	f880 352d 	strb.w	r3, [r0, #1325]	; 0x52d
    return (dev->uw_funcs->uf_set_dblrxbuf(dev, enable));
    88b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    88b6:	6a1b      	ldr	r3, [r3, #32]
    88b8:	2101      	movs	r1, #1
    88ba:	4798      	blx	r3
    uwb_set_dblrxbuff(udev, false);
#endif

#if MYNEWT_VAL(UWBCFG_ENABLED)
    /* Register callback for UWB configuration changes */
    struct uwbcfg_cbs uwb_cb = {
    88bc:	2300      	movs	r3, #0
    88be:	9306      	str	r3, [sp, #24]
    88c0:	9307      	str	r3, [sp, #28]
    88c2:	4b54      	ldr	r3, [pc, #336]	; (8a14 <main+0x190>)
    88c4:	9307      	str	r3, [sp, #28]
        .uc_update = uwb_config_updated_func
    };
    uwbcfg_register(&uwb_cb);
    88c6:	a806      	add	r0, sp, #24
    88c8:	f00c fdc0 	bl	1544c <uwbcfg_register>
    /* Load config from flash */
    conf_load();
    88cc:	f009 fe30 	bl	12530 <conf_load>
#endif

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    88d0:	2101      	movs	r1, #1
    88d2:	201f      	movs	r0, #31
    88d4:	f004 f8c4 	bl	ca60 <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    88d8:	2101      	movs	r1, #1
    88da:	201e      	movs	r0, #30
    88dc:	f004 f8c0 	bl	ca60 <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    88e0:	2101      	movs	r1, #1
    88e2:	2016      	movs	r0, #22
    88e4:	f004 f8bc 	bl	ca60 <hal_gpio_init_out>

    struct _uwb_transport_instance * uwb_transport = (struct _uwb_transport_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TRANSPORT);
    88e8:	2160      	movs	r1, #96	; 0x60
    88ea:	4620      	mov	r0, r4
    88ec:	f000 f955 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    assert(uwb_transport);
    88f0:	2800      	cmp	r0, #0
    88f2:	d064      	beq.n	89be <main+0x13a>
    88f4:	4605      	mov	r5, r0

    struct _uwb_transport_extension extension = {
    88f6:	2300      	movs	r3, #0
    88f8:	9301      	str	r3, [sp, #4]
    88fa:	9302      	str	r3, [sp, #8]
    88fc:	9303      	str	r3, [sp, #12]
    88fe:	9304      	str	r3, [sp, #16]
    8900:	9305      	str	r3, [sp, #20]
    8902:	f64d 63ad 	movw	r3, #57005	; 0xdead
    8906:	f8ad 3004 	strh.w	r3, [sp, #4]
    890a:	4b43      	ldr	r3, [pc, #268]	; (8a18 <main+0x194>)
    890c:	9303      	str	r3, [sp, #12]
        .tsp_code = 0xDEAD,
        .receive_cb = uwb_transport_cb
    };

    uwb_transport_append_extension(uwb_transport, &extension);
    890e:	a901      	add	r1, sp, #4
    8910:	f008 f87f 	bl	10a12 <uwb_transport_append_extension>

    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8914:	2101      	movs	r1, #1
    8916:	4620      	mov	r0, r4
    8918:	f000 f93f 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    assert(ccp);
    891c:	2800      	cmp	r0, #0
    891e:	d054      	beq.n	89ca <main+0x146>

    if ((udev->role & UWB_ROLE_CCP_MASTER) || MYNEWT_VAL(UWB_TRANSPORT_ROLE) == 0) {
        /* Start as clock-master */
        uwb_ccp_start(ccp, CCP_ROLE_MASTER);
    8920:	2100      	movs	r1, #0
    8922:	f007 fb7c 	bl	1001e <uwb_ccp_start>
    ble_init(udev->euid);
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    // Using GPIO5 and GPIO6 to study timing.
    dw1000_gpio5_config_ext_txe( hal_dw1000_inst(0));
    8926:	2000      	movs	r0, #0
    8928:	f000 face 	bl	8ec8 <hal_dw1000_inst>
    892c:	f000 fa0c 	bl	8d48 <dw1000_gpio5_config_ext_txe>
    dw1000_gpio6_config_ext_rxe( hal_dw1000_inst(0));
    8930:	2000      	movs	r0, #0
    8932:	f000 fac9 	bl	8ec8 <hal_dw1000_inst>
    8936:	f000 fa1e 	bl	8d76 <dw1000_gpio6_config_ext_rxe>
#endif

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    893a:	f004 ff6c 	bl	d816 <os_cputime_get32>
    893e:	4606      	mov	r6, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    8940:	4a36      	ldr	r2, [pc, #216]	; (8a1c <main+0x198>)
    8942:	4601      	mov	r1, r0
    8944:	4836      	ldr	r0, [pc, #216]	; (8a20 <main+0x19c>)
    8946:	f009 f9a5 	bl	11c94 <printf>
    printf("{\"device_id\"=\"%lX\"",udev->device_id);
    894a:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
    894e:	4835      	ldr	r0, [pc, #212]	; (8a24 <main+0x1a0>)
    8950:	f009 f9a0 	bl	11c94 <printf>
    printf(",\"panid=\"%X\"",udev->pan_id);
    8954:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
    8958:	4833      	ldr	r0, [pc, #204]	; (8a28 <main+0x1a4>)
    895a:	f009 f99b 	bl	11c94 <printf>
    printf(",\"addr\"=\"%X\"",udev->uid);
    895e:	f8b4 14b6 	ldrh.w	r1, [r4, #1206]	; 0x4b6
    8962:	4832      	ldr	r0, [pc, #200]	; (8a2c <main+0x1a8>)
    8964:	f009 f996 	bl	11c94 <printf>
    printf(",\"part_id\"=\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    8968:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    896c:	4830      	ldr	r0, [pc, #192]	; (8a30 <main+0x1ac>)
    896e:	f009 f991 	bl	11c94 <printf>
    printf(",\"lot_id\"=\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    8972:	f8d4 14bc 	ldr.w	r1, [r4, #1212]	; 0x4bc
    8976:	482f      	ldr	r0, [pc, #188]	; (8a34 <main+0x1b0>)
    8978:	f009 f98c 	bl	11c94 <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    897c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    897e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8980:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    8984:	4620      	mov	r0, r4
    8986:	4798      	blx	r3
    8988:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime,uwb_phy_frame_duration(udev, sizeof(test) + sizeof(uwb_transport_frame_header_t)));
    898a:	4631      	mov	r1, r6
    898c:	482a      	ldr	r0, [pc, #168]	; (8a38 <main+0x1b4>)
    898e:	f009 f981 	bl	11c94 <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    8992:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8998:	4620      	mov	r0, r4
    899a:	4798      	blx	r3
    899c:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime,uwb_phy_SHR_duration(udev));
    899e:	4631      	mov	r1, r6
    89a0:	4826      	ldr	r0, [pc, #152]	; (8a3c <main+0x1b8>)
    89a2:	f009 f977 	bl	11c94 <printf>
    printf("UWB_TRANSPORT_ROLE = %d\n",  MYNEWT_VAL(UWB_TRANSPORT_ROLE));
    89a6:	2100      	movs	r1, #0
    89a8:	4825      	ldr	r0, [pc, #148]	; (8a40 <main+0x1bc>)
    89aa:	f009 f973 	bl	11c94 <printf>

    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    89ae:	2103      	movs	r1, #3
    89b0:	4620      	mov	r0, r4
    89b2:	f000 f8f2 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    89b6:	4606      	mov	r6, r0
    89b8:	b168      	cbz	r0, 89d6 <main+0x152>
        else
            tdma_assign_slot(tdma, stream_slot_cb,  i, (void*)uwb_transport);
    }
#else
/* Slot 0:ccp, 1-160 stream */
    for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS) - 1; i++)
    89ba:	2401      	movs	r4, #1
    89bc:	e019      	b.n	89f2 <main+0x16e>
    assert(uwb_transport);
    89be:	2300      	movs	r3, #0
    89c0:	461a      	mov	r2, r3
    89c2:	4619      	mov	r1, r3
    89c4:	4618      	mov	r0, r3
    89c6:	f004 fccb 	bl	d360 <__assert_func>
    assert(ccp);
    89ca:	2300      	movs	r3, #0
    89cc:	461a      	mov	r2, r3
    89ce:	4619      	mov	r1, r3
    89d0:	4618      	mov	r0, r3
    89d2:	f004 fcc5 	bl	d360 <__assert_func>
    assert(tdma);
    89d6:	2300      	movs	r3, #0
    89d8:	461a      	mov	r2, r3
    89da:	4619      	mov	r1, r3
    89dc:	4618      	mov	r0, r3
    89de:	f004 fcbf 	bl	d360 <__assert_func>
            tdma_assign_slot(tdma, stream_slot_cb,  i, (void*)uwb_transport);
    89e2:	462b      	mov	r3, r5
    89e4:	4622      	mov	r2, r4
    89e6:	4917      	ldr	r1, [pc, #92]	; (8a44 <main+0x1c0>)
    89e8:	4630      	mov	r0, r6
    89ea:	f006 fbb3 	bl	f154 <tdma_assign_slot>
    for (uint16_t i = 1; i < MYNEWT_VAL(TDMA_NSLOTS) - 1; i++)
    89ee:	3401      	adds	r4, #1
    89f0:	b2a4      	uxth	r4, r4
    89f2:	2c0e      	cmp	r4, #14
    89f4:	d9f5      	bls.n	89e2 <main+0x15e>
#endif

    for (uint16_t i=0; i < sizeof(test); i++)
    89f6:	2300      	movs	r3, #0
    89f8:	e003      	b.n	8a02 <main+0x17e>
        test[i] = i;
    89fa:	4a13      	ldr	r2, [pc, #76]	; (8a48 <main+0x1c4>)
    89fc:	54d3      	strb	r3, [r2, r3]
    for (uint16_t i=0; i < sizeof(test); i++)
    89fe:	3301      	adds	r3, #1
    8a00:	b29b      	uxth	r3, r3
    8a02:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
    8a06:	d9f8      	bls.n	89fa <main+0x176>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    8a08:	f005 f88c 	bl	db24 <os_eventq_dflt_get>
    os_eventq_run((struct os_eventq * )evq);
    8a0c:	f005 f85c 	bl	dac8 <os_eventq_run>
    8a10:	e7fa      	b.n	8a08 <main+0x184>
    8a12:	bf00      	nop
    8a14:	00008649 	.word	0x00008649
    8a18:	000087c5 	.word	0x000087c5
    8a1c:	00023374 	.word	0x00023374
    8a20:	00023390 	.word	0x00023390
    8a24:	000233b0 	.word	0x000233b0
    8a28:	000233c4 	.word	0x000233c4
    8a2c:	000233d4 	.word	0x000233d4
    8a30:	000233e4 	.word	0x000233e4
    8a34:	000233f8 	.word	0x000233f8
    8a38:	0002340c 	.word	0x0002340c
    8a3c:	00023440 	.word	0x00023440
    8a40:	00023470 	.word	0x00023470
    8a44:	00008699 	.word	0x00008699
    8a48:	20001b3c 	.word	0x20001b3c

00008a4c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    8a4c:	4a09      	ldr	r2, [pc, #36]	; (8a74 <NVIC_Relocate+0x28>)
    8a4e:	4b0a      	ldr	r3, [pc, #40]	; (8a78 <NVIC_Relocate+0x2c>)
    8a50:	429a      	cmp	r2, r3
    8a52:	d00a      	beq.n	8a6a <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8a54:	2300      	movs	r3, #0
    8a56:	e006      	b.n	8a66 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    8a58:	4a07      	ldr	r2, [pc, #28]	; (8a78 <NVIC_Relocate+0x2c>)
    8a5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    8a5e:	4a05      	ldr	r2, [pc, #20]	; (8a74 <NVIC_Relocate+0x28>)
    8a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8a64:	3301      	adds	r3, #1
    8a66:	2b35      	cmp	r3, #53	; 0x35
    8a68:	ddf6      	ble.n	8a58 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    8a6a:	4a02      	ldr	r2, [pc, #8]	; (8a74 <NVIC_Relocate+0x28>)
    8a6c:	4b03      	ldr	r3, [pc, #12]	; (8a7c <NVIC_Relocate+0x30>)
    8a6e:	609a      	str	r2, [r3, #8]
#endif
}
    8a70:	4770      	bx	lr
    8a72:	bf00      	nop
    8a74:	20000000 	.word	0x20000000
    8a78:	00008020 	.word	0x00008020
    8a7c:	e000ed00 	.word	0xe000ed00

00008a80 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8a80:	b510      	push	{r4, lr}
    8a82:	4604      	mov	r4, r0
    8a84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8a88:	f005 f81e 	bl	dac8 <os_eventq_run>
    8a8c:	e7fa      	b.n	8a84 <uwb_interrupt_task+0x4>
	...

00008a90 <uwb_dev_idx_lookup>:
{
    8a90:	b510      	push	{r4, lr}
    8a92:	b08a      	sub	sp, #40	; 0x28
    8a94:	4604      	mov	r4, r0
    const char base1k[] = "dw1000_%d";
    8a96:	4b14      	ldr	r3, [pc, #80]	; (8ae8 <uwb_dev_idx_lookup+0x58>)
    8a98:	f10d 0c1c 	add.w	ip, sp, #28
    8a9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8aa0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8aa4:	f8ac 2000 	strh.w	r2, [ip]
    const char base3k[] = "dw3000_%d";
    8aa8:	4b10      	ldr	r3, [pc, #64]	; (8aec <uwb_dev_idx_lookup+0x5c>)
    8aaa:	f10d 0c10 	add.w	ip, sp, #16
    8aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8ab2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8ab6:	f8ac 2000 	strh.w	r2, [ip]
    snprintf(buf, sizeof buf, base1k, idx);
    8aba:	4623      	mov	r3, r4
    8abc:	aa07      	add	r2, sp, #28
    8abe:	210c      	movs	r1, #12
    8ac0:	a801      	add	r0, sp, #4
    8ac2:	f009 f916 	bl	11cf2 <snprintf>
    odev = os_dev_lookup(buf);
    8ac6:	a801      	add	r0, sp, #4
    8ac8:	f004 ff46 	bl	d958 <os_dev_lookup>
    if (!odev) {
    8acc:	b108      	cbz	r0, 8ad2 <uwb_dev_idx_lookup+0x42>
}
    8ace:	b00a      	add	sp, #40	; 0x28
    8ad0:	bd10      	pop	{r4, pc}
        snprintf(buf, sizeof buf, base3k, idx);
    8ad2:	4623      	mov	r3, r4
    8ad4:	aa04      	add	r2, sp, #16
    8ad6:	210c      	movs	r1, #12
    8ad8:	a801      	add	r0, sp, #4
    8ada:	f009 f90a 	bl	11cf2 <snprintf>
        odev = os_dev_lookup(buf);
    8ade:	a801      	add	r0, sp, #4
    8ae0:	f004 ff3a 	bl	d958 <os_dev_lookup>
    return (struct uwb_dev*)odev;
    8ae4:	e7f3      	b.n	8ace <uwb_dev_idx_lookup+0x3e>
    8ae6:	bf00      	nop
    8ae8:	0002348c 	.word	0x0002348c
    8aec:	00023498 	.word	0x00023498

00008af0 <uwb_mac_append_interface>:
{
    8af0:	b508      	push	{r3, lr}
    assert(dev);
    8af2:	b148      	cbz	r0, 8b08 <uwb_mac_append_interface+0x18>
    assert(cbs);
    8af4:	b171      	cbz	r1, 8b14 <uwb_mac_append_interface+0x24>
    cbs->status.initialized = true;
    8af6:	780b      	ldrb	r3, [r1, #0]
    8af8:	f043 0301 	orr.w	r3, r3, #1
    8afc:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8afe:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8b02:	b1b3      	cbz	r3, 8b32 <uwb_mac_append_interface+0x42>
        struct uwb_mac_interface * prev_cbs = NULL;
    8b04:	2200      	movs	r2, #0
    8b06:	e00d      	b.n	8b24 <uwb_mac_append_interface+0x34>
    assert(dev);
    8b08:	2300      	movs	r3, #0
    8b0a:	461a      	mov	r2, r3
    8b0c:	4619      	mov	r1, r3
    8b0e:	4618      	mov	r0, r3
    8b10:	f004 fc26 	bl	d360 <__assert_func>
    assert(cbs);
    8b14:	2300      	movs	r3, #0
    8b16:	461a      	mov	r2, r3
    8b18:	4619      	mov	r1, r3
    8b1a:	4618      	mov	r0, r3
    8b1c:	f004 fc20 	bl	d360 <__assert_func>
            prev_cbs = cur_cbs;
    8b20:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8b24:	2b00      	cmp	r3, #0
    8b26:	d1fb      	bne.n	8b20 <uwb_mac_append_interface+0x30>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8b28:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8b2a:	638b      	str	r3, [r1, #56]	; 0x38
    8b2c:	6391      	str	r1, [r2, #56]	; 0x38
}
    8b2e:	4608      	mov	r0, r1
    8b30:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8b32:	638b      	str	r3, [r1, #56]	; 0x38
    8b34:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    8b38:	e7f9      	b.n	8b2e <uwb_mac_append_interface+0x3e>

00008b3a <uwb_mac_remove_interface>:
{
    8b3a:	b508      	push	{r3, lr}
    assert(dev);
    8b3c:	b148      	cbz	r0, 8b52 <uwb_mac_remove_interface+0x18>
    8b3e:	4684      	mov	ip, r0
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b40:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8b44:	4603      	mov	r3, r0
    8b46:	b193      	cbz	r3, 8b6e <uwb_mac_remove_interface+0x34>
        if(cbs->id == id){
    8b48:	885a      	ldrh	r2, [r3, #2]
    8b4a:	428a      	cmp	r2, r1
    8b4c:	d007      	beq.n	8b5e <uwb_mac_remove_interface+0x24>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8b50:	e7f9      	b.n	8b46 <uwb_mac_remove_interface+0xc>
    assert(dev);
    8b52:	2300      	movs	r3, #0
    8b54:	461a      	mov	r2, r3
    8b56:	4619      	mov	r1, r3
    8b58:	4618      	mov	r0, r3
    8b5a:	f004 fc01 	bl	d360 <__assert_func>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8b5e:	4283      	cmp	r3, r0
    8b60:	d006      	beq.n	8b70 <uwb_mac_remove_interface+0x36>
    8b62:	4602      	mov	r2, r0
    8b64:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8b66:	4298      	cmp	r0, r3
    8b68:	d1fb      	bne.n	8b62 <uwb_mac_remove_interface+0x28>
    8b6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8b6c:	6393      	str	r3, [r2, #56]	; 0x38
}
    8b6e:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8b70:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8b72:	f8cc 3530 	str.w	r3, [ip, #1328]	; 0x530
    8b76:	e7fa      	b.n	8b6e <uwb_mac_remove_interface+0x34>

00008b78 <uwb_mac_get_interface>:
{
    8b78:	b508      	push	{r3, lr}
    assert(dev);
    8b7a:	b138      	cbz	r0, 8b8c <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b7c:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8b80:	b150      	cbz	r0, 8b98 <uwb_mac_get_interface+0x20>
        if(cbs->id == id){
    8b82:	8843      	ldrh	r3, [r0, #2]
    8b84:	428b      	cmp	r3, r1
    8b86:	d007      	beq.n	8b98 <uwb_mac_get_interface+0x20>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8b88:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8b8a:	e7f9      	b.n	8b80 <uwb_mac_get_interface+0x8>
    assert(dev);
    8b8c:	2300      	movs	r3, #0
    8b8e:	461a      	mov	r2, r3
    8b90:	4619      	mov	r1, r3
    8b92:	4618      	mov	r0, r3
    8b94:	f004 fbe4 	bl	d360 <__assert_func>
}
    8b98:	bd08      	pop	{r3, pc}

00008b9a <uwb_mac_find_cb_inst_ptr>:
{
    8b9a:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8b9c:	f7ff ffec 	bl	8b78 <uwb_mac_get_interface>
    if (cbs) {
    8ba0:	4603      	mov	r3, r0
    8ba2:	b100      	cbz	r0, 8ba6 <uwb_mac_find_cb_inst_ptr+0xc>
        return cbs->inst_ptr;
    8ba4:	6843      	ldr	r3, [r0, #4]
}
    8ba6:	4618      	mov	r0, r3
    8ba8:	bd08      	pop	{r3, pc}
	...

00008bac <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8bac:	b570      	push	{r4, r5, r6, lr}
    8bae:	b084      	sub	sp, #16
    8bb0:	4604      	mov	r4, r0
    8bb2:	460d      	mov	r5, r1
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8bb4:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    return os_eventq_inited((struct os_eventq *) evq);
    8bb8:	4630      	mov	r0, r6
    8bba:	f004 ff00 	bl	d9be <os_eventq_inited>
    8bbe:	b108      	cbz	r0, 8bc4 <uwb_task_init+0x18>
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8bc0:	b004      	add	sp, #16
    8bc2:	bd70      	pop	{r4, r5, r6, pc}
    os_eventq_init((struct os_eventq *) evq);
    8bc4:	4630      	mov	r0, r6
    8bc6:	f004 fef1 	bl	d9ac <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8bca:	2300      	movs	r3, #0
    8bcc:	64e3      	str	r3, [r4, #76]	; 0x4c
    8bce:	6523      	str	r3, [r4, #80]	; 0x50
    8bd0:	6563      	str	r3, [r4, #84]	; 0x54
    8bd2:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
    8bd4:	6525      	str	r5, [r4, #80]	; 0x50
    ev->ev.ev_arg = arg;
    8bd6:	6564      	str	r4, [r4, #84]	; 0x54
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8bd8:	2101      	movs	r1, #1
    8bda:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8bde:	f005 fbad 	bl	e33c <os_sem_init>
        assert(rc == DPL_OK);
    8be2:	b998      	cbnz	r0, 8c0c <uwb_task_init+0x60>
        dpl_task_init(&inst->task_str, "uwb_irq",
    8be4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                      inst->task_stack,
    8be8:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8bec:	f44f 7180 	mov.w	r1, #256	; 0x100
    8bf0:	9103      	str	r1, [sp, #12]
    8bf2:	9202      	str	r2, [sp, #8]
    8bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8bf8:	9201      	str	r2, [sp, #4]
    8bfa:	9300      	str	r3, [sp, #0]
    8bfc:	4623      	mov	r3, r4
    8bfe:	4a06      	ldr	r2, [pc, #24]	; (8c18 <uwb_task_init+0x6c>)
    8c00:	4906      	ldr	r1, [pc, #24]	; (8c1c <uwb_task_init+0x70>)
    8c02:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8c06:	f005 fc39 	bl	e47c <os_task_init>
}
    8c0a:	e7d9      	b.n	8bc0 <uwb_task_init+0x14>
        assert(rc == DPL_OK);
    8c0c:	2300      	movs	r3, #0
    8c0e:	461a      	mov	r2, r3
    8c10:	4619      	mov	r1, r3
    8c12:	4618      	mov	r0, r3
    8c14:	f004 fba4 	bl	d360 <__assert_func>
    8c18:	00008a81 	.word	0x00008a81
    8c1c:	000234a4 	.word	0x000234a4

00008c20 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8c20:	b510      	push	{r4, lr}
    8c22:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8c24:	303c      	adds	r0, #60	; 0x3c
    8c26:	f004 feca 	bl	d9be <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8c2a:	b900      	cbnz	r0, 8c2e <uwb_task_deinit+0xe>
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8c2c:	bd10      	pop	{r4, pc}
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8c2e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8c32:	f005 fc8f 	bl	e554 <os_task_remove>
    8c36:	e7f9      	b.n	8c2c <uwb_task_deinit+0xc>

00008c38 <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    8c38:	b510      	push	{r4, lr}
    8c3a:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8c3c:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    8c40:	b11b      	cbz	r3, 8c4a <uwb_dev_init+0x12>
#else
        inst->txbuf = malloc(inst->txbuf_size);
        assert(inst->txbuf);
#endif
    }
    if (!inst->rxbuf) {
    8c42:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8c46:	b173      	cbz	r3, 8c66 <uwb_dev_init+0x2e>
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
        assert(inst->rxbuf);
#endif
    }
}
    8c48:	bd10      	pop	{r4, pc}
        inst->txbuf = malloc(inst->txbuf_size);
    8c4a:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8c4e:	f008 fba3 	bl	11398 <malloc>
    8c52:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8c56:	2800      	cmp	r0, #0
    8c58:	d1f3      	bne.n	8c42 <uwb_dev_init+0xa>
    8c5a:	2300      	movs	r3, #0
    8c5c:	461a      	mov	r2, r3
    8c5e:	4619      	mov	r1, r3
    8c60:	4618      	mov	r0, r3
    8c62:	f004 fb7d 	bl	d360 <__assert_func>
        inst->rxbuf = malloc(inst->rxbuf_size);
    8c66:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8c6a:	f008 fb95 	bl	11398 <malloc>
    8c6e:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8c72:	2800      	cmp	r0, #0
    8c74:	d1e8      	bne.n	8c48 <uwb_dev_init+0x10>
    8c76:	2300      	movs	r3, #0
    8c78:	461a      	mov	r2, r3
    8c7a:	4619      	mov	r1, r3
    8c7c:	4618      	mov	r0, r3
    8c7e:	f004 fb6f 	bl	d360 <__assert_func>
    8c82:	0000      	movs	r0, r0
    8c84:	0000      	movs	r0, r0
	...

00008c88 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8c88:	b508      	push	{r3, lr}
    8c8a:	ed2d 8b02 	vpush	{d8}
    8c8e:	ee10 3a10 	vmov	r3, s0
    8c92:	eeb0 8a60 	vmov.f32	s16, s1
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8c96:	3801      	subs	r0, #1
    8c98:	2808      	cmp	r0, #8
    8c9a:	d839      	bhi.n	8d10 <uwb_calc_aoa+0x88>
    8c9c:	e8df f000 	tbb	[pc, r0]
    8ca0:	2c05413e 	.word	0x2c05413e
    8ca4:	3832382f 	.word	0x3832382f
    8ca8:	35          	.byte	0x35
    8ca9:	00          	.byte	0x00
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8caa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8d30 <uwb_calc_aoa+0xa8>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8cae:	eddf 7a21 	vldr	s15, [pc, #132]	; 8d34 <uwb_calc_aoa+0xac>
    8cb2:	eec7 8a87 	vdiv.f32	s17, s15, s14
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8cb6:	4618      	mov	r0, r3
    8cb8:	f018 fe78 	bl	219ac <__aeabi_f2d>
    8cbc:	a31a      	add	r3, pc, #104	; (adr r3, 8d28 <uwb_calc_aoa+0xa0>)
    8cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    8cc2:	f018 fff5 	bl	21cb0 <__aeabi_ddiv>
    8cc6:	f019 f9c1 	bl	2204c <__aeabi_d2f>
    8cca:	ee07 0a90 	vmov	s15, r0
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8cce:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return DPL_FLOAT32_FROM_F64(
    8cd2:	eec8 7a88 	vdiv.f32	s15, s17, s16
    8cd6:	ee17 0a90 	vmov	r0, s15
    8cda:	f018 fe67 	bl	219ac <__aeabi_f2d>
    8cde:	ec41 0b10 	vmov	d0, r0, r1
    8ce2:	f019 fc7b 	bl	225dc <asin>
    8ce6:	ec51 0b10 	vmov	r0, r1, d0
    8cea:	f019 f9af 	bl	2204c <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8cee:	ee00 0a10 	vmov	s0, r0
    8cf2:	ecbd 8b02 	vpop	{d8}
    8cf6:	bd08      	pop	{r3, pc}
    case (4): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_4);break;
    8cf8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8d30 <uwb_calc_aoa+0xa8>
    8cfc:	e7d7      	b.n	8cae <uwb_calc_aoa+0x26>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8cfe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8d38 <uwb_calc_aoa+0xb0>
    8d02:	e7d4      	b.n	8cae <uwb_calc_aoa+0x26>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    8d04:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8d38 <uwb_calc_aoa+0xb0>
    8d08:	e7d1      	b.n	8cae <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8d0a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8d3c <uwb_calc_aoa+0xb4>
    8d0e:	e7ce      	b.n	8cae <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8d10:	2300      	movs	r3, #0
    8d12:	461a      	mov	r2, r3
    8d14:	4619      	mov	r1, r3
    8d16:	4618      	mov	r0, r3
    8d18:	f004 fb22 	bl	d360 <__assert_func>
    switch(channel) {
    8d1c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8d40 <uwb_calc_aoa+0xb8>
    8d20:	e7c5      	b.n	8cae <uwb_calc_aoa+0x26>
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    8d22:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8d44 <uwb_calc_aoa+0xbc>
    8d26:	e7c2      	b.n	8cae <uwb_calc_aoa+0x26>
    8d28:	54442d18 	.word	0x54442d18
    8d2c:	401921fb 	.word	0x401921fb
    8d30:	4f85e558 	.word	0x4f85e558
    8d34:	4d8ef3c2 	.word	0x4d8ef3c2
    8d38:	4fc167b8 	.word	0x4fc167b8
    8d3c:	4fee0980 	.word	0x4fee0980
    8d40:	4f504850 	.word	0x4f504850
    8d44:	4f6e0980 	.word	0x4f6e0980

00008d48 <dw1000_gpio5_config_ext_txe>:
        reg |= GPIO_PIN4_EXTPA;
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
}

void dw1000_gpio5_config_ext_txe(struct _dw1000_dev_instance_t * inst)
{
    8d48:	b510      	push	{r4, lr}
    8d4a:	b084      	sub	sp, #16
    8d4c:	4604      	mov	r4, r0
    uint32_t reg;

        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8d4e:	2304      	movs	r3, #4
    8d50:	2200      	movs	r2, #0
    8d52:	2126      	movs	r1, #38	; 0x26
    8d54:	f000 fdee 	bl	9934 <dw1000_read_reg>
        reg &= ~GPIO_MSGP5_MASK;
    8d58:	f420 3340 	bic.w	r3, r0, #196608	; 0x30000
        reg |= GPIO_PIN5_EXTTXE;
    8d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8d60:	2204      	movs	r2, #4
    8d62:	9202      	str	r2, [sp, #8]
    8d64:	2200      	movs	r2, #0
    8d66:	9300      	str	r3, [sp, #0]
    8d68:	9201      	str	r2, [sp, #4]
    8d6a:	2126      	movs	r1, #38	; 0x26
    8d6c:	4620      	mov	r0, r4
    8d6e:	f000 fe51 	bl	9a14 <dw1000_write_reg>
}
    8d72:	b004      	add	sp, #16
    8d74:	bd10      	pop	{r4, pc}

00008d76 <dw1000_gpio6_config_ext_rxe>:

void dw1000_gpio6_config_ext_rxe(struct _dw1000_dev_instance_t * inst)
{
    8d76:	b510      	push	{r4, lr}
    8d78:	b084      	sub	sp, #16
    8d7a:	4604      	mov	r4, r0
    uint32_t reg;

        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8d7c:	2304      	movs	r3, #4
    8d7e:	2200      	movs	r2, #0
    8d80:	2126      	movs	r1, #38	; 0x26
    8d82:	f000 fdd7 	bl	9934 <dw1000_read_reg>
        reg &= ~GPIO_MSGP6_MASK;
    8d86:	f420 2340 	bic.w	r3, r0, #786432	; 0xc0000
        reg |= GPIO_PIN6_EXTRXE;
    8d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8d8e:	2204      	movs	r2, #4
    8d90:	9202      	str	r2, [sp, #8]
    8d92:	2200      	movs	r2, #0
    8d94:	9300      	str	r3, [sp, #0]
    8d96:	9201      	str	r2, [sp, #4]
    8d98:	2126      	movs	r1, #38	; 0x26
    8d9a:	4620      	mov	r0, r4
    8d9c:	f000 fe3a 	bl	9a14 <dw1000_write_reg>
}
    8da0:	b004      	add	sp, #16
    8da2:	bd10      	pop	{r4, pc}

00008da4 <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
    8da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8da6:	b085      	sub	sp, #20
    8da8:	4604      	mov	r4, r0
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
    8daa:	f011 0f02 	tst.w	r1, #2
    8dae:	d050      	beq.n	8e52 <dw1000_gpio_config_leds+0xae>
    8db0:	460d      	mov	r5, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
    8db2:	2304      	movs	r3, #4
    8db4:	2200      	movs	r2, #0
    8db6:	2126      	movs	r1, #38	; 0x26
    8db8:	f000 fdbc 	bl	9934 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
    8dbc:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
    8dc0:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8dc4:	2704      	movs	r7, #4
    8dc6:	9702      	str	r7, [sp, #8]
    8dc8:	2600      	movs	r6, #0
    8dca:	9000      	str	r0, [sp, #0]
    8dcc:	9601      	str	r6, [sp, #4]
    8dce:	4632      	mov	r2, r6
    8dd0:	2126      	movs	r1, #38	; 0x26
    8dd2:	4620      	mov	r0, r4
    8dd4:	f000 fe1e 	bl	9a14 <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
    8dd8:	463b      	mov	r3, r7
    8dda:	4632      	mov	r2, r6
    8ddc:	2136      	movs	r1, #54	; 0x36
    8dde:	4620      	mov	r0, r4
    8de0:	f000 fda8 	bl	9934 <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
    8de4:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
    8de8:	9702      	str	r7, [sp, #8]
    8dea:	9000      	str	r0, [sp, #0]
    8dec:	9601      	str	r6, [sp, #4]
    8dee:	4632      	mov	r2, r6
    8df0:	2136      	movs	r1, #54	; 0x36
    8df2:	4620      	mov	r0, r4
    8df4:	f000 fe0e 	bl	9a14 <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
    8df8:	9702      	str	r7, [sp, #8]
    8dfa:	f44f 7288 	mov.w	r2, #272	; 0x110
    8dfe:	2300      	movs	r3, #0
    8e00:	e9cd 2300 	strd	r2, r3, [sp]
    8e04:	2228      	movs	r2, #40	; 0x28
    8e06:	2136      	movs	r1, #54	; 0x36
    8e08:	4620      	mov	r0, r4
    8e0a:	f000 fe03 	bl	9a14 <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
    8e0e:	f015 0f04 	tst.w	r5, #4
    8e12:	d02e      	beq.n	8e72 <dw1000_gpio_config_leds+0xce>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
    8e14:	463b      	mov	r3, r7
    8e16:	2228      	movs	r2, #40	; 0x28
    8e18:	2136      	movs	r1, #54	; 0x36
    8e1a:	4620      	mov	r0, r4
    8e1c:	f000 fd8a 	bl	9934 <dw1000_read_reg>
    8e20:	4605      	mov	r5, r0
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
    8e22:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
    8e26:	9702      	str	r7, [sp, #8]
    8e28:	9300      	str	r3, [sp, #0]
    8e2a:	9601      	str	r6, [sp, #4]
    8e2c:	2228      	movs	r2, #40	; 0x28
    8e2e:	2136      	movs	r1, #54	; 0x36
    8e30:	4620      	mov	r0, r4
    8e32:	f000 fdef 	bl	9a14 <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
    8e36:	200a      	movs	r0, #10
    8e38:	f008 ffcb 	bl	11dd2 <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
    8e3c:	9702      	str	r7, [sp, #8]
    8e3e:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
    8e42:	9500      	str	r5, [sp, #0]
    8e44:	9601      	str	r6, [sp, #4]
    8e46:	2228      	movs	r2, #40	; 0x28
    8e48:	2136      	movs	r1, #54	; 0x36
    8e4a:	4620      	mov	r0, r4
    8e4c:	f000 fde2 	bl	9a14 <dw1000_write_reg>
    8e50:	e00f      	b.n	8e72 <dw1000_gpio_config_leds+0xce>
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
    8e52:	2304      	movs	r3, #4
    8e54:	2200      	movs	r2, #0
    8e56:	2126      	movs	r1, #38	; 0x26
    8e58:	f000 fd6c 	bl	9934 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
    8e5c:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
    8e60:	2304      	movs	r3, #4
    8e62:	9302      	str	r3, [sp, #8]
    8e64:	2200      	movs	r2, #0
    8e66:	9000      	str	r0, [sp, #0]
    8e68:	9201      	str	r2, [sp, #4]
    8e6a:	2126      	movs	r1, #38	; 0x26
    8e6c:	4620      	mov	r0, r4
    8e6e:	f000 fdd1 	bl	9a14 <dw1000_write_reg>
    }
}
    8e72:	b005      	add	sp, #20
    8e74:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008e76 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
    8e76:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
    8e78:	b148      	cbz	r0, 8e8e <hal_dw1000_spi_txrx_cb+0x18>
    8e7a:	4604      	mov	r4, r0
    8e7c:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
    8e80:	b98b      	cbnz	r3, 8ea6 <hal_dw1000_spi_txrx_cb+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8e82:	f200 504c 	addw	r0, r0, #1356	; 0x54c
    8e86:	f005 fa61 	bl	e34c <os_sem_release>
        err = dpl_sem_release(&inst->spi_nb_sem);
        assert(err == DPL_OK);
    8e8a:	b930      	cbnz	r0, 8e9a <hal_dw1000_spi_txrx_cb+0x24>
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
    }
}
    8e8c:	bd10      	pop	{r4, pc}
    assert(inst!=0);
    8e8e:	2300      	movs	r3, #0
    8e90:	461a      	mov	r2, r3
    8e92:	4619      	mov	r1, r3
    8e94:	4618      	mov	r0, r3
    8e96:	f004 fa63 	bl	d360 <__assert_func>
        assert(err == DPL_OK);
    8e9a:	2300      	movs	r3, #0
    8e9c:	461a      	mov	r2, r3
    8e9e:	4619      	mov	r1, r3
    8ea0:	4618      	mov	r0, r3
    8ea2:	f004 fa5d 	bl	d360 <__assert_func>
        hal_gpio_write(inst->ss_pin, 1);
    8ea6:	2101      	movs	r1, #1
    8ea8:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
    8eac:	f003 fdf4 	bl	ca98 <hal_gpio_write>
    8eb0:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    8eb4:	f005 fa4a 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    8eb8:	2800      	cmp	r0, #0
    8eba:	d0e7      	beq.n	8e8c <hal_dw1000_spi_txrx_cb+0x16>
    8ebc:	2300      	movs	r3, #0
    8ebe:	461a      	mov	r2, r3
    8ec0:	4619      	mov	r1, r3
    8ec2:	4618      	mov	r0, r3
    8ec4:	f004 fa4c 	bl	d360 <__assert_func>

00008ec8 <hal_dw1000_inst>:
    if (idx < ARRAY_SIZE(hal_dw1000_instances)) {
    8ec8:	4603      	mov	r3, r0
    8eca:	b928      	cbnz	r0, 8ed8 <hal_dw1000_inst+0x10>
        return &hal_dw1000_instances[idx];
    8ecc:	4803      	ldr	r0, [pc, #12]	; (8edc <hal_dw1000_inst+0x14>)
    8ece:	f640 52f8 	movw	r2, #3576	; 0xdf8
    8ed2:	fb02 0003 	mla	r0, r2, r3, r0
    8ed6:	4770      	bx	lr
    return 0;
    8ed8:	2000      	movs	r0, #0
}
    8eda:	4770      	bx	lr
    8edc:	20000540 	.word	0x20000540

00008ee0 <hal_dw1000_reset>:
{
    8ee0:	b510      	push	{r4, lr}
    assert(inst);
    8ee2:	b308      	cbz	r0, 8f28 <hal_dw1000_reset+0x48>
    8ee4:	4604      	mov	r4, r0
    hal_gpio_init_out(inst->ss_pin, 1);
    8ee6:	2101      	movs	r1, #1
    8ee8:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
    8eec:	f003 fdb8 	bl	ca60 <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
    8ef0:	2100      	movs	r1, #0
    8ef2:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8ef6:	f003 fdb3 	bl	ca60 <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
    8efa:	2100      	movs	r1, #0
    8efc:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8f00:	f003 fdca 	bl	ca98 <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
    8f04:	2001      	movs	r0, #1
    8f06:	f008 ff64 	bl	11dd2 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
    8f0a:	2101      	movs	r1, #1
    8f0c:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8f10:	f003 fdc2 	bl	ca98 <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
    8f14:	2100      	movs	r1, #0
    8f16:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
    8f1a:	f003 fd8b 	bl	ca34 <hal_gpio_init_in>
    dpl_cputime_delay_usecs(5000);
    8f1e:	f241 3088 	movw	r0, #5000	; 0x1388
    8f22:	f008 ff56 	bl	11dd2 <dpl_cputime_delay_usecs>
}
    8f26:	bd10      	pop	{r4, pc}
    assert(inst);
    8f28:	2300      	movs	r3, #0
    8f2a:	461a      	mov	r2, r3
    8f2c:	4619      	mov	r1, r3
    8f2e:	4618      	mov	r0, r3
    8f30:	f004 fa16 	bl	d360 <__assert_func>

00008f34 <hal_dw1000_read>:
{
    8f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8f38:	4605      	mov	r5, r0
    8f3a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    assert(inst->spi_sem);
    8f3e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    8f42:	b178      	cbz	r0, 8f64 <hal_dw1000_read+0x30>
    8f44:	460e      	mov	r6, r1
    8f46:	4617      	mov	r7, r2
    8f48:	4698      	mov	r8, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    8f4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8f4e:	f005 fa2f 	bl	e3b0 <os_sem_pend>
    if (rc != DPL_OK) {
    8f52:	b168      	cbz	r0, 8f70 <hal_dw1000_read+0x3c>
        inst->uwb_dev.status.sem_error = 1;
    8f54:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    8f58:	f043 0304 	orr.w	r3, r3, #4
    8f5c:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
    8f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
    8f64:	2300      	movs	r3, #0
    8f66:	461a      	mov	r2, r3
    8f68:	4619      	mov	r1, r3
    8f6a:	4618      	mov	r0, r3
    8f6c:	f004 f9f8 	bl	d360 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
    8f70:	2100      	movs	r1, #0
    8f72:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
    8f76:	f003 fd8f 	bl	ca98 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
    8f7a:	463b      	mov	r3, r7
    8f7c:	2200      	movs	r2, #0
    8f7e:	4631      	mov	r1, r6
    8f80:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
    8f84:	f004 f834 	bl	cff0 <hal_spi_txrx>
    assert(rc == DPL_OK);
    8f88:	b9c0      	cbnz	r0, 8fbc <hal_dw1000_read+0x88>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
    8f8a:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
    8f8e:	2fff      	cmp	r7, #255	; 0xff
    8f90:	bf28      	it	cs
    8f92:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8f94:	4604      	mov	r4, r0
    int bytes_left = length;
    8f96:	464e      	mov	r6, r9
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8f98:	454c      	cmp	r4, r9
    8f9a:	da15      	bge.n	8fc8 <hal_dw1000_read+0x94>
    8f9c:	b9a0      	cbnz	r0, 8fc8 <hal_dw1000_read+0x94>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
    8f9e:	4633      	mov	r3, r6
    8fa0:	42be      	cmp	r6, r7
    8fa2:	bfa8      	it	ge
    8fa4:	463b      	movge	r3, r7
        bytes_left-=bytes_to_read;
    8fa6:	1af6      	subs	r6, r6, r3
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
    8fa8:	eb08 0204 	add.w	r2, r8, r4
    8fac:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
    8fb0:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
    8fb4:	f004 f81c 	bl	cff0 <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
    8fb8:	443c      	add	r4, r7
    8fba:	e7ed      	b.n	8f98 <hal_dw1000_read+0x64>
    assert(rc == DPL_OK);
    8fbc:	2300      	movs	r3, #0
    8fbe:	461a      	mov	r2, r3
    8fc0:	4619      	mov	r1, r3
    8fc2:	4618      	mov	r0, r3
    8fc4:	f004 f9cc 	bl	d360 <__assert_func>
    hal_gpio_write(inst->ss_pin, 1);
    8fc8:	2101      	movs	r1, #1
    8fca:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
    8fce:	f003 fd63 	bl	ca98 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
    8fd2:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
    8fd6:	f005 f9b9 	bl	e34c <os_sem_release>
    assert(rc == DPL_OK);
    8fda:	2800      	cmp	r0, #0
    8fdc:	d0c0      	beq.n	8f60 <hal_dw1000_read+0x2c>
    8fde:	2300      	movs	r3, #0
    8fe0:	461a      	mov	r2, r3
    8fe2:	4619      	mov	r1, r3
    8fe4:	4618      	mov	r0, r3
    8fe6:	f004 f9bb 	bl	d360 <__assert_func>
	...

00008fec <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
    8fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ff0:	4604      	mov	r4, r0
    8ff2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(inst->spi_sem);
    8ff6:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    8ffa:	b178      	cbz	r0, 901c <hal_dw1000_read_noblock+0x30>
    8ffc:	4688      	mov	r8, r1
    8ffe:	4617      	mov	r7, r2
    9000:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9006:	f005 f9d3 	bl	e3b0 <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    900a:	b168      	cbz	r0, 9028 <hal_dw1000_read_noblock+0x3c>
        inst->uwb_dev.status.sem_error = 1;
    900c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9010:	f043 0304 	orr.w	r3, r3, #4
    9014:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
    9018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst->spi_sem);
    901c:	2300      	movs	r3, #0
    901e:	461a      	mov	r2, r3
    9020:	4619      	mov	r1, r3
    9022:	4618      	mov	r0, r3
    9024:	f004 f99c 	bl	d360 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
    9028:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    902c:	f003 ff66 	bl	cefc <hal_spi_disable>
    9030:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
    9032:	4622      	mov	r2, r4
    9034:	4987      	ldr	r1, [pc, #540]	; (9254 <hal_dw1000_read_noblock+0x268>)
    9036:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    903a:	f003 ffc3 	bl	cfc4 <hal_spi_set_txrx_cb>
    903e:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
    9040:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9044:	f003 ff34 	bl	ceb0 <hal_spi_enable>
    if (rc != DPL_OK) {
    9048:	ea55 0300 	orrs.w	r3, r5, r0
    904c:	d00b      	beq.n	9066 <hal_dw1000_read_noblock+0x7a>
    return (dpl_error_t)os_sem_release(&sem->sem);
    904e:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9052:	f005 f97b 	bl	e34c <os_sem_release>
    assert(rc == DPL_OK);
    9056:	2800      	cmp	r0, #0
    9058:	d0de      	beq.n	9018 <hal_dw1000_read_noblock+0x2c>
    905a:	2300      	movs	r3, #0
    905c:	461a      	mov	r2, r3
    905e:	4619      	mov	r1, r3
    9060:	4618      	mov	r0, r3
    9062:	f004 f97d 	bl	d360 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
    9066:	2100      	movs	r1, #0
    9068:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    906c:	f003 fd14 	bl	ca98 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
    9070:	eb07 0509 	add.w	r5, r7, r9
    9074:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
    9078:	429d      	cmp	r5, r3
    907a:	da01      	bge.n	9080 <hal_dw1000_read_noblock+0x94>
    907c:	2dfe      	cmp	r5, #254	; 0xfe
    907e:	dd0f      	ble.n	90a0 <hal_dw1000_read_noblock+0xb4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9080:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
    9084:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9088:	4650      	mov	r0, sl
    908a:	f005 f991 	bl	e3b0 <os_sem_pend>
    if (rc != DPL_OK) {
    908e:	2800      	cmp	r0, #0
    9090:	d059      	beq.n	9146 <hal_dw1000_read_noblock+0x15a>
        inst->uwb_dev.status.sem_error = 1;
    9092:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9096:	f043 0304 	orr.w	r3, r3, #4
    909a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
    909e:	e7d6      	b.n	904e <hal_dw1000_read_noblock+0x62>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
    90a0:	462a      	mov	r2, r5
    90a2:	2100      	movs	r1, #0
    90a4:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    90a8:	f008 f9f3 	bl	11492 <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
    90ac:	463a      	mov	r2, r7
    90ae:	4641      	mov	r1, r8
    90b0:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    90b4:	f008 f9e0 	bl	11478 <memcpy>
    90b8:	f204 584c 	addw	r8, r4, #1356	; 0x54c
    90bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    90c0:	4640      	mov	r0, r8
    90c2:	f005 f975 	bl	e3b0 <os_sem_pend>
        if (rc != DPL_OK) {
    90c6:	b130      	cbz	r0, 90d6 <hal_dw1000_read_noblock+0xea>
            inst->uwb_dev.status.sem_error = 1;
    90c8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    90cc:	f043 0304 	orr.w	r3, r3, #4
    90d0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
    90d4:	e7bb      	b.n	904e <hal_dw1000_read_noblock+0x62>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
    90d6:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
    90da:	462b      	mov	r3, r5
    90dc:	460a      	mov	r2, r1
    90de:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    90e2:	f003 ffdb 	bl	d09c <hal_spi_txrx_noblock>
    90e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    90ea:	4640      	mov	r0, r8
    90ec:	f005 f960 	bl	e3b0 <os_sem_pend>
        if (rc != DPL_OK) {
    90f0:	b130      	cbz	r0, 9100 <hal_dw1000_read_noblock+0x114>
            inst->uwb_dev.status.sem_error = 1;
    90f2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    90f6:	f043 0304 	orr.w	r3, r3, #4
    90fa:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
    90fe:	e7a6      	b.n	904e <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9100:	4640      	mov	r0, r8
    9102:	f005 f923 	bl	e34c <os_sem_release>
        assert(rc == DPL_OK);
    9106:	b9c0      	cbnz	r0, 913a <hal_dw1000_read_noblock+0x14e>
        hal_gpio_write(inst->ss_pin, 1);
    9108:	2101      	movs	r1, #1
    910a:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    910e:	f003 fcc3 	bl	ca98 <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
    9112:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
    9116:	464a      	mov	r2, r9
    9118:	4439      	add	r1, r7
    911a:	4630      	mov	r0, r6
    911c:	f008 f9ac 	bl	11478 <memcpy>
    9120:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9124:	f005 f912 	bl	e34c <os_sem_release>
        assert(rc == DPL_OK);
    9128:	2800      	cmp	r0, #0
    912a:	f43f af75 	beq.w	9018 <hal_dw1000_read_noblock+0x2c>
    912e:	2300      	movs	r3, #0
    9130:	461a      	mov	r2, r3
    9132:	4619      	mov	r1, r3
    9134:	4618      	mov	r0, r3
    9136:	f004 f913 	bl	d360 <__assert_func>
        assert(rc == DPL_OK);
    913a:	2300      	movs	r3, #0
    913c:	461a      	mov	r2, r3
    913e:	4619      	mov	r1, r3
    9140:	4618      	mov	r0, r3
    9142:	f004 f90d 	bl	d360 <__assert_func>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
    9146:	463b      	mov	r3, r7
    9148:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    914c:	4641      	mov	r1, r8
    914e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9152:	f003 ffa3 	bl	d09c <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
    9156:	4680      	mov	r8, r0
    9158:	2800      	cmp	r0, #0
    915a:	f47f af78 	bne.w	904e <hal_dw1000_read_noblock+0x62>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
    915e:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
    9162:	454a      	cmp	r2, r9
    9164:	bf28      	it	cs
    9166:	464a      	movcs	r2, r9
    9168:	2100      	movs	r1, #0
    916a:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    916e:	f008 f990 	bl	11492 <memset>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9172:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9176:	4650      	mov	r0, sl
    9178:	f005 f91a 	bl	e3b0 <os_sem_pend>
    if (rc != DPL_OK) {
    917c:	b130      	cbz	r0, 918c <hal_dw1000_read_noblock+0x1a0>
        inst->uwb_dev.status.sem_error = 1;
    917e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9182:	f043 0304 	orr.w	r3, r3, #4
    9186:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
    918a:	e760      	b.n	904e <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
    918c:	4650      	mov	r0, sl
    918e:	f005 f8dd 	bl	e34c <os_sem_release>
    assert(rc == DPL_OK);
    9192:	b940      	cbnz	r0, 91a6 <hal_dw1000_read_noblock+0x1ba>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
    9194:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
    9198:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    919c:	bf28      	it	cs
    919e:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
    91a2:	464d      	mov	r5, r9
    while (offset<length) {
    91a4:	e011      	b.n	91ca <hal_dw1000_read_noblock+0x1de>
    assert(rc == DPL_OK);
    91a6:	2300      	movs	r3, #0
    91a8:	461a      	mov	r2, r3
    91aa:	4619      	mov	r1, r3
    91ac:	4618      	mov	r0, r3
    91ae:	f004 f8d7 	bl	d360 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
    91b2:	463b      	mov	r3, r7
    91b4:	eb06 0208 	add.w	r2, r6, r8
    91b8:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
    91bc:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    91c0:	f003 ff6c 	bl	d09c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
    91c4:	b9b8      	cbnz	r0, 91f6 <hal_dw1000_read_noblock+0x20a>
        if (bytes_left) {
    91c6:	b9e5      	cbnz	r5, 9202 <hal_dw1000_read_noblock+0x216>
        offset+=bytes_to_read;
    91c8:	44b8      	add	r8, r7
    while (offset<length) {
    91ca:	45c1      	cmp	r9, r8
    91cc:	dd31      	ble.n	9232 <hal_dw1000_read_noblock+0x246>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
    91ce:	462f      	mov	r7, r5
    91d0:	455d      	cmp	r5, fp
    91d2:	bfa8      	it	ge
    91d4:	465f      	movge	r7, fp
        if (bytes_left) {
    91d6:	1bed      	subs	r5, r5, r7
    91d8:	d0eb      	beq.n	91b2 <hal_dw1000_read_noblock+0x1c6>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    91da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    91de:	4650      	mov	r0, sl
    91e0:	f005 f8e6 	bl	e3b0 <os_sem_pend>
            if (rc != DPL_OK) {
    91e4:	2800      	cmp	r0, #0
    91e6:	d0e4      	beq.n	91b2 <hal_dw1000_read_noblock+0x1c6>
                inst->uwb_dev.status.sem_error = 1;
    91e8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    91ec:	f043 0304 	orr.w	r3, r3, #4
    91f0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
    91f4:	e72b      	b.n	904e <hal_dw1000_read_noblock+0x62>
        assert(rc==DPL_OK);
    91f6:	2300      	movs	r3, #0
    91f8:	461a      	mov	r2, r3
    91fa:	4619      	mov	r1, r3
    91fc:	4618      	mov	r0, r3
    91fe:	f004 f8af 	bl	d360 <__assert_func>
    9202:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9206:	4650      	mov	r0, sl
    9208:	f005 f8d2 	bl	e3b0 <os_sem_pend>
            if (rc != DPL_OK) {
    920c:	b950      	cbnz	r0, 9224 <hal_dw1000_read_noblock+0x238>
    return (dpl_error_t)os_sem_release(&sem->sem);
    920e:	4650      	mov	r0, sl
    9210:	f005 f89c 	bl	e34c <os_sem_release>
            assert(rc == DPL_OK);
    9214:	2800      	cmp	r0, #0
    9216:	d0d7      	beq.n	91c8 <hal_dw1000_read_noblock+0x1dc>
    9218:	2300      	movs	r3, #0
    921a:	461a      	mov	r2, r3
    921c:	4619      	mov	r1, r3
    921e:	4618      	mov	r0, r3
    9220:	f004 f89e 	bl	d360 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
    9224:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9228:	f043 0304 	orr.w	r3, r3, #4
    922c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
    9230:	e70d      	b.n	904e <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9236:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    923a:	f005 f8b9 	bl	e3b0 <os_sem_pend>
    if (rc != DPL_OK) {
    923e:	2800      	cmp	r0, #0
    9240:	f43f af05 	beq.w	904e <hal_dw1000_read_noblock+0x62>
        inst->uwb_dev.status.sem_error = 1;
    9244:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9248:	f043 0304 	orr.w	r3, r3, #4
    924c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
    9250:	e6fd      	b.n	904e <hal_dw1000_read_noblock+0x62>
    9252:	bf00      	nop
    9254:	00008e77 	.word	0x00008e77

00009258 <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
    9258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    925c:	4604      	mov	r4, r0
    925e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    int rc = DPL_OK;
    assert(inst->spi_sem);
    9262:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    9266:	b178      	cbz	r0, 9288 <hal_dw1000_write+0x30>
    9268:	460e      	mov	r6, r1
    926a:	4617      	mov	r7, r2
    926c:	4698      	mov	r8, r3
    926e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9272:	f005 f89d 	bl	e3b0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    9276:	b168      	cbz	r0, 9294 <hal_dw1000_write+0x3c>
        inst->uwb_dev.status.sem_error = 1;
    9278:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    927c:	f043 0304 	orr.w	r3, r3, #4
    9280:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
    9284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
    9288:	2300      	movs	r3, #0
    928a:	461a      	mov	r2, r3
    928c:	4619      	mov	r1, r3
    928e:	4618      	mov	r0, r3
    9290:	f004 f866 	bl	d360 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
    9294:	2100      	movs	r1, #0
    9296:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    929a:	f003 fbfd 	bl	ca98 <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
    929e:	463b      	mov	r3, r7
    92a0:	2200      	movs	r2, #0
    92a2:	4631      	mov	r1, r6
    92a4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    92a8:	f003 fea2 	bl	cff0 <hal_spi_txrx>
    assert(rc == DPL_OK);
    92ac:	b998      	cbnz	r0, 92d6 <hal_dw1000_write+0x7e>
    if (length) {
    92ae:	f1b9 0f00 	cmp.w	r9, #0
    92b2:	d116      	bne.n	92e2 <hal_dw1000_write+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
    92b4:	2101      	movs	r1, #1
    92b6:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    92ba:	f003 fbed 	bl	ca98 <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
    92be:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    92c2:	f005 f843 	bl	e34c <os_sem_release>
    assert(rc == DPL_OK);
    92c6:	2800      	cmp	r0, #0
    92c8:	d0dc      	beq.n	9284 <hal_dw1000_write+0x2c>
    92ca:	2300      	movs	r3, #0
    92cc:	461a      	mov	r2, r3
    92ce:	4619      	mov	r1, r3
    92d0:	4618      	mov	r0, r3
    92d2:	f004 f845 	bl	d360 <__assert_func>
    assert(rc == DPL_OK);
    92d6:	2300      	movs	r3, #0
    92d8:	461a      	mov	r2, r3
    92da:	4619      	mov	r1, r3
    92dc:	4618      	mov	r0, r3
    92de:	f004 f83f 	bl	d360 <__assert_func>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
    92e2:	464b      	mov	r3, r9
    92e4:	2200      	movs	r2, #0
    92e6:	4641      	mov	r1, r8
    92e8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    92ec:	f003 fe80 	bl	cff0 <hal_spi_txrx>
    92f0:	e7e0      	b.n	92b4 <hal_dw1000_write+0x5c>
	...

000092f4 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
    92f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92f8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(length);
    92fc:	f1b9 0f00 	cmp.w	r9, #0
    9300:	d015      	beq.n	932e <hal_dw1000_write_noblock+0x3a>
    9302:	4604      	mov	r4, r0
    9304:	460f      	mov	r7, r1
    9306:	4616      	mov	r6, r2
    9308:	4698      	mov	r8, r3
    assert(inst->spi_sem);
    930a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    930e:	b1a0      	cbz	r0, 933a <hal_dw1000_write_noblock+0x46>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    9310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9314:	f005 f84c 	bl	e3b0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    9318:	4603      	mov	r3, r0
    if (rc != DPL_OK) {
    931a:	b1a0      	cbz	r0, 9346 <hal_dw1000_write_noblock+0x52>
        inst->uwb_dev.status.sem_error = 1;
    931c:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
    9320:	f042 0204 	orr.w	r2, r2, #4
    9324:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
    9328:	4618      	mov	r0, r3
    932a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(length);
    932e:	2300      	movs	r3, #0
    9330:	461a      	mov	r2, r3
    9332:	4619      	mov	r1, r3
    9334:	4618      	mov	r0, r3
    9336:	f004 f813 	bl	d360 <__assert_func>
    assert(inst->spi_sem);
    933a:	2300      	movs	r3, #0
    933c:	461a      	mov	r2, r3
    933e:	4619      	mov	r1, r3
    9340:	4618      	mov	r0, r3
    9342:	f004 f80d 	bl	d360 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
    9346:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    934a:	f003 fdd7 	bl	cefc <hal_spi_disable>
    934e:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
    9350:	4622      	mov	r2, r4
    9352:	4960      	ldr	r1, [pc, #384]	; (94d4 <hal_dw1000_write_noblock+0x1e0>)
    9354:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9358:	f003 fe34 	bl	cfc4 <hal_spi_set_txrx_cb>
    935c:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
    935e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9362:	f003 fda5 	bl	ceb0 <hal_spi_enable>
    if (rc != DPL_OK) {
    9366:	ea55 0300 	orrs.w	r3, r5, r0
    936a:	d00c      	beq.n	9386 <hal_dw1000_write_noblock+0x92>
    return (dpl_error_t)os_sem_release(&sem->sem);
    936c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9370:	f004 ffec 	bl	e34c <os_sem_release>
    rc = dpl_sem_release(inst->spi_sem);
    9374:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
    9376:	2800      	cmp	r0, #0
    9378:	d0d6      	beq.n	9328 <hal_dw1000_write_noblock+0x34>
    937a:	2300      	movs	r3, #0
    937c:	461a      	mov	r2, r3
    937e:	4619      	mov	r1, r3
    9380:	4618      	mov	r0, r3
    9382:	f003 ffed 	bl	d360 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
    9386:	2100      	movs	r1, #0
    9388:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    938c:	f003 fb84 	bl	ca98 <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
    9390:	eb06 0509 	add.w	r5, r6, r9
    9394:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
    9398:	429d      	cmp	r5, r3
    939a:	da01      	bge.n	93a0 <hal_dw1000_write_noblock+0xac>
    939c:	2dfe      	cmp	r5, #254	; 0xfe
    939e:	dd0e      	ble.n	93be <hal_dw1000_write_noblock+0xca>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    93a0:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
    93a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    93a8:	4650      	mov	r0, sl
    93aa:	f005 f801 	bl	e3b0 <os_sem_pend>
    if (rc != DPL_OK) {
    93ae:	b1e8      	cbz	r0, 93ec <hal_dw1000_write_noblock+0xf8>
        inst->uwb_dev.status.sem_error = 1;
    93b0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    93b4:	f043 0304 	orr.w	r3, r3, #4
    93b8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
    93bc:	e7d6      	b.n	936c <hal_dw1000_write_noblock+0x78>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
    93be:	4632      	mov	r2, r6
    93c0:	4639      	mov	r1, r7
    93c2:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    93c6:	f008 f857 	bl	11478 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
    93ca:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
    93ce:	464a      	mov	r2, r9
    93d0:	4641      	mov	r1, r8
    93d2:	4430      	add	r0, r6
    93d4:	f008 f850 	bl	11478 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
    93d8:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
    93dc:	462b      	mov	r3, r5
    93de:	460a      	mov	r2, r1
    93e0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    93e4:	f003 fe5a 	bl	d09c <hal_spi_txrx_noblock>
    93e8:	4603      	mov	r3, r0
        return rc;
    93ea:	e79d      	b.n	9328 <hal_dw1000_write_noblock+0x34>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
    93ec:	4633      	mov	r3, r6
    93ee:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    93f2:	4639      	mov	r1, r7
    93f4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    93f8:	f003 fe50 	bl	d09c <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
    93fc:	b960      	cbnz	r0, 9418 <hal_dw1000_write_noblock+0x124>
    93fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9402:	4650      	mov	r0, sl
    9404:	f004 ffd4 	bl	e3b0 <os_sem_pend>
    if (rc != DPL_OK) {
    9408:	b160      	cbz	r0, 9424 <hal_dw1000_write_noblock+0x130>
        inst->uwb_dev.status.sem_error = 1;
    940a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    940e:	f043 0304 	orr.w	r3, r3, #4
    9412:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
    9416:	e7a9      	b.n	936c <hal_dw1000_write_noblock+0x78>
    assert(rc==DPL_OK);
    9418:	2300      	movs	r3, #0
    941a:	461a      	mov	r2, r3
    941c:	4619      	mov	r1, r3
    941e:	4618      	mov	r0, r3
    9420:	f003 ff9e 	bl	d360 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9424:	4650      	mov	r0, sl
    9426:	f004 ff91 	bl	e34c <os_sem_release>
    942a:	4607      	mov	r7, r0
    rc = dpl_sem_release(&inst->spi_nb_sem);
    942c:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
    942e:	b940      	cbnz	r0, 9442 <hal_dw1000_write_noblock+0x14e>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
    9430:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
    9434:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    9438:	bf28      	it	cs
    943a:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
    943e:	464d      	mov	r5, r9
    while (offset<length) {
    9440:	e012      	b.n	9468 <hal_dw1000_write_noblock+0x174>
    assert(rc == DPL_OK);
    9442:	2300      	movs	r3, #0
    9444:	461a      	mov	r2, r3
    9446:	4619      	mov	r1, r3
    9448:	4618      	mov	r0, r3
    944a:	f003 ff89 	bl	d360 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
    944e:	4633      	mov	r3, r6
    9450:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
    9454:	eb08 0107 	add.w	r1, r8, r7
    9458:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    945c:	f003 fe1e 	bl	d09c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
    9460:	4603      	mov	r3, r0
    9462:	b9c0      	cbnz	r0, 9496 <hal_dw1000_write_noblock+0x1a2>
        if (bytes_left) {
    9464:	b9ed      	cbnz	r5, 94a2 <hal_dw1000_write_noblock+0x1ae>
        offset+=bytes_to_write;
    9466:	4437      	add	r7, r6
    while (offset<length) {
    9468:	45b9      	cmp	r9, r7
    946a:	f77f af5d 	ble.w	9328 <hal_dw1000_write_noblock+0x34>
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
    946e:	462e      	mov	r6, r5
    9470:	455d      	cmp	r5, fp
    9472:	bfa8      	it	ge
    9474:	465e      	movge	r6, fp
        if (bytes_left) {
    9476:	1bad      	subs	r5, r5, r6
    9478:	d0e9      	beq.n	944e <hal_dw1000_write_noblock+0x15a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    947a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    947e:	4650      	mov	r0, sl
    9480:	f004 ff96 	bl	e3b0 <os_sem_pend>
            if (rc != DPL_OK) {
    9484:	2800      	cmp	r0, #0
    9486:	d0e2      	beq.n	944e <hal_dw1000_write_noblock+0x15a>
                inst->uwb_dev.status.sem_error = 1;
    9488:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    948c:	f043 0304 	orr.w	r3, r3, #4
    9490:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
    9494:	e76a      	b.n	936c <hal_dw1000_write_noblock+0x78>
        assert(rc==DPL_OK);
    9496:	2300      	movs	r3, #0
    9498:	461a      	mov	r2, r3
    949a:	4619      	mov	r1, r3
    949c:	4618      	mov	r0, r3
    949e:	f003 ff5f 	bl	d360 <__assert_func>
    94a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    94a6:	4650      	mov	r0, sl
    94a8:	f004 ff82 	bl	e3b0 <os_sem_pend>
            if (rc != DPL_OK) {
    94ac:	b958      	cbnz	r0, 94c6 <hal_dw1000_write_noblock+0x1d2>
    return (dpl_error_t)os_sem_release(&sem->sem);
    94ae:	4650      	mov	r0, sl
    94b0:	f004 ff4c 	bl	e34c <os_sem_release>
            rc = dpl_sem_release(&inst->spi_nb_sem);
    94b4:	4603      	mov	r3, r0
            assert(rc == DPL_OK);
    94b6:	2800      	cmp	r0, #0
    94b8:	d0d5      	beq.n	9466 <hal_dw1000_write_noblock+0x172>
    94ba:	2300      	movs	r3, #0
    94bc:	461a      	mov	r2, r3
    94be:	4619      	mov	r1, r3
    94c0:	4618      	mov	r0, r3
    94c2:	f003 ff4d 	bl	d360 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
    94c6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    94ca:	f043 0304 	orr.w	r3, r3, #4
    94ce:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
    94d2:	e74b      	b.n	936c <hal_dw1000_write_noblock+0x78>
    94d4:	00008e77 	.word	0x00008e77

000094d8 <hal_dw1000_rw_noblock_wait>:
 * @param timeout  Time in ms to wait, use DPL_TIMEOUT_NEVER (UINT32_MAX) to wait indefinitely
 * @return int  Returns 0 on success, error code otherwise
 */
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
    94d8:	b530      	push	{r4, r5, lr}
    94da:	b083      	sub	sp, #12
    94dc:	4604      	mov	r4, r0
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
    94de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    94e2:	d10f      	bne.n	9504 <hal_dw1000_rw_noblock_wait+0x2c>
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
    94e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    94e8:	9301      	str	r3, [sp, #4]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    94ea:	9901      	ldr	r1, [sp, #4]
    94ec:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    94f0:	f004 ff5e 	bl	e3b0 <os_sem_pend>
    94f4:	4605      	mov	r5, r0
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
    94f6:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    94fa:	88c3      	ldrh	r3, [r0, #6]
    94fc:	b13b      	cbz	r3, 950e <hal_dw1000_rw_noblock_wait+0x36>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
    94fe:	4628      	mov	r0, r5
    9500:	b003      	add	sp, #12
    9502:	bd30      	pop	{r4, r5, pc}
    9504:	4608      	mov	r0, r1
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    9506:	a901      	add	r1, sp, #4
    9508:	f005 f9fb 	bl	e902 <os_time_ms_to_ticks>
    950c:	e7ed      	b.n	94ea <hal_dw1000_rw_noblock_wait+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
    950e:	f004 ff1d 	bl	e34c <os_sem_release>
    return err;
    9512:	e7f4      	b.n	94fe <hal_dw1000_rw_noblock_wait+0x26>

00009514 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
    9514:	b538      	push	{r3, r4, r5, lr}
    9516:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
    9518:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
    951c:	b158      	cbz	r0, 9536 <hal_dw1000_wakeup+0x22>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    951e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9522:	f004 ff45 	bl	e3b0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
    9526:	b160      	cbz	r0, 9542 <hal_dw1000_wakeup+0x2e>
        inst->uwb_dev.status.sem_error = 1;
    9528:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    952c:	f043 0304 	orr.w	r3, r3, #4
    9530:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
    9534:	bd38      	pop	{r3, r4, r5, pc}
    assert(inst->spi_sem);
    9536:	2300      	movs	r3, #0
    9538:	461a      	mov	r2, r3
    953a:	4619      	mov	r1, r3
    953c:	4618      	mov	r0, r3
    953e:	f003 ff0f 	bl	d360 <__assert_func>
    return os_arch_save_sr();
    9542:	f003 fe37 	bl	d1b4 <os_arch_save_sr>
    9546:	4605      	mov	r5, r0
    hal_spi_disable(inst->spi_num);
    9548:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    954c:	f003 fcd6 	bl	cefc <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
    9550:	2100      	movs	r1, #0
    9552:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    9556:	f003 fa9f 	bl	ca98 <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
    955a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    955e:	f008 fc38 	bl	11dd2 <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
    9562:	2101      	movs	r1, #1
    9564:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
    9568:	f003 fa96 	bl	ca98 <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
    956c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9570:	f003 fc9e 	bl	ceb0 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
    9574:	f241 3088 	movw	r0, #5000	; 0x1388
    9578:	f008 fc2b 	bl	11dd2 <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
    957c:	4628      	mov	r0, r5
    957e:	f003 fe1f 	bl	d1c0 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9582:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    9586:	f004 fee1 	bl	e34c <os_sem_release>
    assert(rc == DPL_OK);
    958a:	2800      	cmp	r0, #0
    958c:	d0d2      	beq.n	9534 <hal_dw1000_wakeup+0x20>
    958e:	2300      	movs	r3, #0
    9590:	461a      	mov	r2, r3
    9592:	4619      	mov	r1, r3
    9594:	4618      	mov	r0, r3
    9596:	f003 fee3 	bl	d360 <__assert_func>

0000959a <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
    959a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    959e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    95a2:	4770      	bx	lr

000095a4 <uwb_dw1000_hal_noblock_wait>:
{
    95a4:	b508      	push	{r3, lr}
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
    95a6:	f7ff ff97 	bl	94d8 <hal_dw1000_rw_noblock_wait>
}
    95aa:	bd08      	pop	{r3, pc}

000095ac <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
    95ac:	b508      	push	{r3, lr}
    95ae:	460b      	mov	r3, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
    95b0:	f011 0101 	ands.w	r1, r1, #1
    95b4:	d000      	beq.n	95b8 <uwb_dw1000_mac_framefilter+0xc>
    95b6:	2104      	movs	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
    95b8:	f013 0f02 	tst.w	r3, #2
    95bc:	d001      	beq.n	95c2 <uwb_dw1000_mac_framefilter+0x16>
    95be:	f041 0108 	orr.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
    95c2:	f013 0f04 	tst.w	r3, #4
    95c6:	d001      	beq.n	95cc <uwb_dw1000_mac_framefilter+0x20>
    95c8:	f041 0110 	orr.w	r1, r1, #16
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
    95cc:	f013 0f08 	tst.w	r3, #8
    95d0:	d001      	beq.n	95d6 <uwb_dw1000_mac_framefilter+0x2a>
    95d2:	f041 0120 	orr.w	r1, r1, #32
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
    95d6:	f013 0f10 	tst.w	r3, #16
    95da:	d001      	beq.n	95e0 <uwb_dw1000_mac_framefilter+0x34>
    95dc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
    95e0:	f413 7f80 	tst.w	r3, #256	; 0x100
    95e4:	d001      	beq.n	95ea <uwb_dw1000_mac_framefilter+0x3e>
    95e6:	f041 0102 	orr.w	r1, r1, #2

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
    95ea:	f001 f9eb 	bl	a9c4 <dw1000_mac_framefilter>
}
    95ee:	bd08      	pop	{r3, pc}

000095f0 <uwb_dw1000_set_autoack>:

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
    95f0:	b508      	push	{r3, lr}
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
    95f2:	f001 fa27 	bl	aa44 <dw1000_set_autoack>
}
    95f6:	bd08      	pop	{r3, pc}

000095f8 <uwb_dw1000_set_autoack_delay>:

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    95f8:	b508      	push	{r3, lr}
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
    95fa:	f001 fa6f 	bl	aadc <dw1000_set_autoack_delay>
}
    95fe:	bd08      	pop	{r3, pc}

00009600 <uwb_dw1000_event_cnt_ctrl>:

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
    9600:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
    9602:	f003 f934 	bl	c86e <dw1000_phy_event_cnt_ctrl>
}
    9606:	bd08      	pop	{r3, pc}

00009608 <uwb_dw1000_event_cnt_read>:

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
    9608:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
    960a:	f003 f953 	bl	c8b4 <dw1000_phy_event_cnt_read>
}
    960e:	bd08      	pop	{r3, pc}

00009610 <uwb_dw1000_calc_pdoa>:
{
    9610:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
    9612:	4905      	ldr	r1, [pc, #20]	; (9628 <uwb_dw1000_calc_pdoa+0x18>)
    9614:	4805      	ldr	r0, [pc, #20]	; (962c <uwb_dw1000_calc_pdoa+0x1c>)
    9616:	f008 fb3d 	bl	11c94 <printf>
    assert(0);
    961a:	2300      	movs	r3, #0
    961c:	461a      	mov	r2, r3
    961e:	4619      	mov	r1, r3
    9620:	4618      	mov	r0, r3
    9622:	f003 fe9d 	bl	d360 <__assert_func>
    9626:	bf00      	nop
    9628:	000234ec 	.word	0x000234ec
    962c:	000234ac 	.word	0x000234ac

00009630 <uwb_dw1000_estimate_los>:
{
    9630:	b508      	push	{r3, lr}
    return dw1000_estimate_los(rssi, fppl);
    9632:	f002 fc15 	bl	be60 <dw1000_estimate_los>
}
    9636:	bd08      	pop	{r3, pc}

00009638 <uwb_dw1000_calc_fppl>:
{
    9638:	b508      	push	{r3, lr}
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
    963a:	f002 fb75 	bl	bd28 <dw1000_calc_fppl>
}
    963e:	bd08      	pop	{r3, pc}

00009640 <uwb_dw1000_calc_seq_rssi>:
{
    9640:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
    9642:	f002 fbcd 	bl	bde0 <dw1000_calc_rssi>
}
    9646:	bd08      	pop	{r3, pc}

00009648 <uwb_dw1000_calc_rssi>:
{
    9648:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
    964a:	f002 fbc9 	bl	bde0 <dw1000_calc_rssi>
}
    964e:	bd08      	pop	{r3, pc}

00009650 <uwb_dw1000_get_fppl>:
{
    9650:	b508      	push	{r3, lr}
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
    9652:	f002 fbb5 	bl	bdc0 <dw1000_get_fppl>
}
    9656:	bd08      	pop	{r3, pc}

00009658 <uwb_dw1000_get_rssi>:
{
    9658:	b508      	push	{r3, lr}
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
    965a:	f002 fbf1 	bl	be40 <dw1000_get_rssi>
}
    965e:	bd08      	pop	{r3, pc}

00009660 <uwb_dw1000_calc_clock_offset_ratio>:
{
    9660:	b508      	push	{r3, lr}
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
    9662:	b122      	cbz	r2, 966e <uwb_dw1000_calc_clock_offset_ratio+0xe>
    } else if (type == UWB_CR_RXTTCKO) {
    9664:	2a01      	cmp	r2, #1
    9666:	d005      	beq.n	9674 <uwb_dw1000_calc_clock_offset_ratio+0x14>
    return DPL_FLOAT64_INIT(0.0f);
    9668:	ed9f 0b05 	vldr	d0, [pc, #20]	; 9680 <uwb_dw1000_calc_clock_offset_ratio+0x20>
}
    966c:	bd08      	pop	{r3, pc}
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
    966e:	f001 fcf7 	bl	b060 <dw1000_calc_clock_offset_ratio>
    9672:	e7fb      	b.n	966c <uwb_dw1000_calc_clock_offset_ratio+0xc>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
    9674:	f001 fd75 	bl	b162 <dw1000_calc_clock_offset_ratio_ttco>
    9678:	e7f8      	b.n	966c <uwb_dw1000_calc_clock_offset_ratio+0xc>
    967a:	bf00      	nop
    967c:	f3af 8000 	nop.w
	...

00009688 <uwb_dw1000_set_on_error_continue>:
{
    9688:	b508      	push	{r3, lr}
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
    968a:	f001 f8bc 	bl	a806 <dw1000_set_on_error_continue>
}
    968e:	bd08      	pop	{r3, pc}

00009690 <uwb_dw1000_phy_repeated_frames>:
{
    9690:	b508      	push	{r3, lr}
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
    9692:	f002 ff8d 	bl	c5b0 <dw1000_phy_repeated_frames>
}
    9696:	bd08      	pop	{r3, pc}

00009698 <uwb_dw1000_phy_rx_reset>:
{
    9698:	b508      	push	{r3, lr}
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
    969a:	f002 fe92 	bl	c3c2 <dw1000_phy_rx_reset>
}
    969e:	bd08      	pop	{r3, pc}

000096a0 <uwb_dw1000_phy_forcetrxoff>:
{
    96a0:	b508      	push	{r3, lr}
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
    96a2:	f002 fec1 	bl	c428 <dw1000_phy_forcetrxoff>
}
    96a6:	bd08      	pop	{r3, pc}

000096a8 <uwb_dw1000_phy_data_duration>:
{
    96a8:	b508      	push	{r3, lr}
    return dw1000_phy_data_duration(&dev->attrib, nlen);
    96aa:	f200 5034 	addw	r0, r0, #1332	; 0x534
    96ae:	f003 f841 	bl	c734 <dw1000_phy_data_duration>
}
    96b2:	bd08      	pop	{r3, pc}

000096b4 <uwb_dw1000_phy_SHR_duration>:
{
    96b4:	b508      	push	{r3, lr}
    return dw1000_phy_SHR_duration(&dev->attrib);
    96b6:	f200 5034 	addw	r0, r0, #1332	; 0x534
    96ba:	f003 f827 	bl	c70c <dw1000_phy_SHR_duration>
}
    96be:	bd08      	pop	{r3, pc}

000096c0 <uwb_dw1000_phy_frame_duration>:
{
    96c0:	b508      	push	{r3, lr}
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
    96c2:	f200 5034 	addw	r0, r0, #1332	; 0x534
    96c6:	f003 f85f 	bl	c788 <dw1000_phy_frame_duration>
}
    96ca:	bd08      	pop	{r3, pc}

000096cc <uwb_dw1000_read_txtime_lo32>:
{
    96cc:	b508      	push	{r3, lr}
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
    96ce:	f002 fc15 	bl	befc <dw1000_read_txtime_lo>
}
    96d2:	bd08      	pop	{r3, pc}

000096d4 <uwb_dw1000_read_txtime>:
{
    96d4:	b508      	push	{r3, lr}
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
    96d6:	f002 fc09 	bl	beec <dw1000_read_txtime>
}
    96da:	bd08      	pop	{r3, pc}

000096dc <uwb_dw1000_read_rxtime_lo32>:
{
    96dc:	b508      	push	{r3, lr}
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
    96de:	f002 fbfe 	bl	bede <dw1000_read_rxtime_lo>
}
    96e2:	bd08      	pop	{r3, pc}

000096e4 <uwb_dw1000_read_rxtime>:
{
    96e4:	b508      	push	{r3, lr}
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
    96e6:	f002 fbf2 	bl	bece <dw1000_read_rxtime>
}
    96ea:	bd08      	pop	{r3, pc}

000096ec <uwb_dw1000_read_systime_lo32>:
{
    96ec:	b508      	push	{r3, lr}
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
    96ee:	f002 fbe7 	bl	bec0 <dw1000_read_systime_lo>
}
    96f2:	bd08      	pop	{r3, pc}

000096f4 <uwb_dw1000_read_systime>:
{
    96f4:	b508      	push	{r3, lr}
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
    96f6:	f002 fbdb 	bl	beb0 <dw1000_read_systime>
}
    96fa:	bd08      	pop	{r3, pc}

000096fc <uwb_dw1000_set_rxauto_disable>:
{
    96fc:	b508      	push	{r3, lr}
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
    96fe:	f001 f88b 	bl	a818 <dw1000_set_rxauto_disable>
}
    9702:	bd08      	pop	{r3, pc}

00009704 <uwb_dw1000_set_wait4resp_delay>:
{
    9704:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
    9706:	f001 f9fd 	bl	ab04 <dw1000_set_wait4resp_delay>
}
    970a:	bd08      	pop	{r3, pc}

0000970c <uwb_dw1000_set_wait4resp>:
{
    970c:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
    970e:	f001 f86b 	bl	a7e8 <dw1000_set_wait4resp>
}
    9712:	bd08      	pop	{r3, pc}

00009714 <uwb_dw1000_tx_wait>:
{
    9714:	b508      	push	{r3, lr}
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
    9716:	f000 fefc 	bl	a512 <dw1000_tx_wait>
}
    971a:	bd08      	pop	{r3, pc}

0000971c <uwb_dw1000_write_tx_fctrl>:
{
    971c:	b508      	push	{r3, lr}
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
    971e:	f000 fe1c 	bl	a35a <dw1000_write_tx_fctrl>
}
    9722:	bd08      	pop	{r3, pc}

00009724 <uwb_dw1000_write_tx>:
{
    9724:	b508      	push	{r3, lr}
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
    9726:	f000 fdcb 	bl	a2c0 <dw1000_write_tx>
}
    972a:	bd08      	pop	{r3, pc}

0000972c <uwb_dw1000_stop_rx>:
{
    972c:	b508      	push	{r3, lr}
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
    972e:	f001 f807 	bl	a740 <dw1000_stop_rx>
}
    9732:	bd08      	pop	{r3, pc}

00009734 <uwb_dw1000_start_rx>:
{
    9734:	b508      	push	{r3, lr}
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
    9736:	f000 ff2d 	bl	a594 <dw1000_start_rx>
}
    973a:	bd08      	pop	{r3, pc}

0000973c <uwb_dw1000_start_tx>:
{
    973c:	b508      	push	{r3, lr}
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
    973e:	f000 fe4d 	bl	a3dc <dw1000_start_tx>
}
    9742:	bd08      	pop	{r3, pc}

00009744 <uwb_dw1000_set_delay_start>:
{
    9744:	b508      	push	{r3, lr}
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
    9746:	f000 fef0 	bl	a52a <dw1000_set_delay_start>
}
    974a:	bd08      	pop	{r3, pc}

0000974c <uwb_dw1000_set_abs_timeout>:
{
    974c:	b508      	push	{r3, lr}
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
    974e:	f001 f903 	bl	a958 <dw1000_set_abs_timeout>
}
    9752:	bd08      	pop	{r3, pc}

00009754 <uwb_dw1000_set_rx_window>:
{
    9754:	b500      	push	{lr}
    9756:	b083      	sub	sp, #12
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
    9758:	ed9d 7b04 	vldr	d7, [sp, #16]
    975c:	ed8d 7b00 	vstr	d7, [sp]
    9760:	f001 f8d9 	bl	a916 <dw1000_set_rx_window>
}
    9764:	b003      	add	sp, #12
    9766:	f85d fb04 	ldr.w	pc, [sp], #4

0000976a <uwb_dw1000_adj_rx_timeout>:
{
    976a:	b508      	push	{r3, lr}
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
    976c:	b289      	uxth	r1, r1
    976e:	f001 f85c 	bl	a82a <dw1000_adj_rx_timeout>
}
    9772:	bd08      	pop	{r3, pc}

00009774 <uwb_dw1000_set_rx_timeout>:
{
    9774:	b508      	push	{r3, lr}
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
    9776:	b289      	uxth	r1, r1
    9778:	f001 f877 	bl	a86a <dw1000_set_rx_timeout>
}
    977c:	bd08      	pop	{r3, pc}

0000977e <uwb_dw1000_set_dblrxbuf>:
{
    977e:	b508      	push	{r3, lr}
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
    9780:	f001 fa05 	bl	ab8e <dw1000_set_dblrxbuff>
}
    9784:	bd08      	pop	{r3, pc}

00009786 <uwb_dw1000_txrf_power_value>:
{
    9786:	b508      	push	{r3, lr}
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
    9788:	f003 f80b 	bl	c7a2 <dw1000_phy_txrf_power_value>
}
    978c:	bd08      	pop	{r3, pc}

0000978e <uwb_dw1000_txrf_config>:
{
    978e:	b508      	push	{r3, lr}
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
    9790:	f002 fd0e 	bl	c1b0 <dw1000_phy_config_txrf>
}
    9794:	bd08      	pop	{r3, pc}

00009796 <uwb_dw1000_mac_config>:
{
    9796:	b508      	push	{r3, lr}
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
    9798:	f001 fa5e 	bl	ac58 <dw1000_mac_config>
}
    979c:	bd08      	pop	{r3, pc}
	...

000097a0 <dw1000_read>:
{
    97a0:	b570      	push	{r4, r5, r6, lr}
    97a2:	b084      	sub	sp, #16
    97a4:	4604      	mov	r4, r0
    97a6:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
    97aa:	f001 003f 	and.w	r0, r1, #63	; 0x3f
    97ae:	f04f 0e00 	mov.w	lr, #0
    97b2:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
    97b6:	4694      	mov	ip, r2
    97b8:	3a00      	subs	r2, #0
    97ba:	bf18      	it	ne
    97bc:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
    97be:	f362 1e86 	bfi	lr, r2, #6, #1
    97c2:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
    97c6:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    97ca:	bf94      	ite	ls
    97cc:	2600      	movls	r6, #0
    97ce:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
    97d0:	f366 2e08 	bfi	lr, r6, #8, #1
    97d4:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    97d8:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    uint8_t header[] = {
    97dc:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    97e0:	fa4f f28c 	sxtb.w	r2, ip
    97e4:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
    97e8:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
    97ec:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
    97f0:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    97f4:	4a1b      	ldr	r2, [pc, #108]	; (9864 <dw1000_read+0xc4>)
    97f6:	ea0e 0202 	and.w	r2, lr, r2
    97fa:	b122      	cbz	r2, 9806 <dw1000_read+0x66>
    97fc:	f41e 7f80 	tst.w	lr, #256	; 0x100
    9800:	d01b      	beq.n	983a <dw1000_read+0x9a>
    9802:	2203      	movs	r2, #3
    9804:	e000      	b.n	9808 <dw1000_read+0x68>
    9806:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    9808:	293f      	cmp	r1, #63	; 0x3f
    980a:	d818      	bhi.n	983e <dw1000_read+0x9e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    980c:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    9810:	d11b      	bne.n	984a <dw1000_read+0xaa>
    9812:	44ac      	add	ip, r5
    9814:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
    9818:	da17      	bge.n	984a <dw1000_read+0xaa>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    981a:	2d08      	cmp	r5, #8
    981c:	d904      	bls.n	9828 <dw1000_read+0x88>
    981e:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
    9822:	f011 0f01 	tst.w	r1, #1
    9826:	d016      	beq.n	9856 <dw1000_read+0xb6>
        hal_dw1000_read(inst, header, len, buffer, length);
    9828:	9500      	str	r5, [sp, #0]
    982a:	a903      	add	r1, sp, #12
    982c:	4620      	mov	r0, r4
    982e:	f7ff fb81 	bl	8f34 <hal_dw1000_read>
}
    9832:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9836:	b004      	add	sp, #16
    9838:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    983a:	2202      	movs	r2, #2
    983c:	e7e4      	b.n	9808 <dw1000_read+0x68>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    983e:	2300      	movs	r3, #0
    9840:	461a      	mov	r2, r3
    9842:	4619      	mov	r1, r3
    9844:	4618      	mov	r0, r3
    9846:	f003 fd8b 	bl	d360 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    984a:	2300      	movs	r3, #0
    984c:	461a      	mov	r2, r3
    984e:	4619      	mov	r1, r3
    9850:	4618      	mov	r0, r3
    9852:	f003 fd85 	bl	d360 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
    9856:	9500      	str	r5, [sp, #0]
    9858:	a903      	add	r1, sp, #12
    985a:	4620      	mov	r0, r4
    985c:	f7ff fbc6 	bl	8fec <hal_dw1000_read_noblock>
    9860:	e7e7      	b.n	9832 <dw1000_read+0x92>
    9862:	bf00      	nop
    9864:	00fffe00 	.word	0x00fffe00

00009868 <dw1000_write>:
{
    9868:	b570      	push	{r4, r5, r6, lr}
    986a:	b084      	sub	sp, #16
    986c:	4604      	mov	r4, r0
    986e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
    9872:	f001 003f 	and.w	r0, r1, #63	; 0x3f
    9876:	f04f 0e00 	mov.w	lr, #0
    987a:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
    987e:	4694      	mov	ip, r2
    9880:	3a00      	subs	r2, #0
    9882:	bf18      	it	ne
    9884:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
    9886:	f362 1e86 	bfi	lr, r2, #6, #1
    988a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
        .extended = subaddress > 0x7F,
    988e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    9892:	bf94      	ite	ls
    9894:	2600      	movls	r6, #0
    9896:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
    9898:	f366 2e08 	bfi	lr, r6, #8, #1
    989c:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    98a0:	0192      	lsls	r2, r2, #6
    98a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    98a6:	4302      	orrs	r2, r0
    uint8_t header[] = {
    98a8:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    98ac:	fa4f f28c 	sxtb.w	r2, ip
    98b0:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
    98b4:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
    98b8:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
    98bc:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    98c0:	4a1b      	ldr	r2, [pc, #108]	; (9930 <dw1000_write+0xc8>)
    98c2:	ea0e 0202 	and.w	r2, lr, r2
    98c6:	b122      	cbz	r2, 98d2 <dw1000_write+0x6a>
    98c8:	f41e 7f80 	tst.w	lr, #256	; 0x100
    98cc:	d01c      	beq.n	9908 <dw1000_write+0xa0>
    98ce:	2203      	movs	r2, #3
    98d0:	e000      	b.n	98d4 <dw1000_write+0x6c>
    98d2:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    98d4:	293f      	cmp	r1, #63	; 0x3f
    98d6:	d819      	bhi.n	990c <dw1000_write+0xa4>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    98d8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    98dc:	d11c      	bne.n	9918 <dw1000_write+0xb0>
    98de:	44ac      	add	ip, r5
    98e0:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
    98e4:	da18      	bge.n	9918 <dw1000_write+0xb0>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    98e6:	1951      	adds	r1, r2, r5
    98e8:	2908      	cmp	r1, #8
    98ea:	dd04      	ble.n	98f6 <dw1000_write+0x8e>
    98ec:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
    98f0:	f011 0f01 	tst.w	r1, #1
    98f4:	d016      	beq.n	9924 <dw1000_write+0xbc>
        hal_dw1000_write(inst, header, len, buffer, length);
    98f6:	9500      	str	r5, [sp, #0]
    98f8:	a903      	add	r1, sp, #12
    98fa:	4620      	mov	r0, r4
    98fc:	f7ff fcac 	bl	9258 <hal_dw1000_write>
}
    9900:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9904:	b004      	add	sp, #16
    9906:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9908:	2202      	movs	r2, #2
    990a:	e7e3      	b.n	98d4 <dw1000_write+0x6c>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    990c:	2300      	movs	r3, #0
    990e:	461a      	mov	r2, r3
    9910:	4619      	mov	r1, r3
    9912:	4618      	mov	r0, r3
    9914:	f003 fd24 	bl	d360 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    9918:	2300      	movs	r3, #0
    991a:	461a      	mov	r2, r3
    991c:	4619      	mov	r1, r3
    991e:	4618      	mov	r0, r3
    9920:	f003 fd1e 	bl	d360 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
    9924:	9500      	str	r5, [sp, #0]
    9926:	a903      	add	r1, sp, #12
    9928:	4620      	mov	r0, r4
    992a:	f7ff fce3 	bl	92f4 <hal_dw1000_write_noblock>
    992e:	e7e7      	b.n	9900 <dw1000_write+0x98>
    9930:	00fffe00 	.word	0x00fffe00

00009934 <dw1000_read_reg>:
{
    9934:	b530      	push	{r4, r5, lr}
    9936:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
    9938:	2400      	movs	r4, #0
    993a:	2500      	movs	r5, #0
    993c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    dw1000_cmd_t cmd = {
    9940:	f001 043f 	and.w	r4, r1, #63	; 0x3f
    9944:	f04f 0e00 	mov.w	lr, #0
    9948:	f364 0e05 	bfi	lr, r4, #0, #6
        .subindex = subaddress != 0,
    994c:	4694      	mov	ip, r2
    994e:	3a00      	subs	r2, #0
    9950:	bf18      	it	ne
    9952:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
    9954:	f362 1e86 	bfi	lr, r2, #6, #1
    9958:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
    995c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    9960:	bf94      	ite	ls
    9962:	2500      	movls	r5, #0
    9964:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
    9966:	f365 2e08 	bfi	lr, r5, #8, #1
    996a:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    996e:	ea44 1282 	orr.w	r2, r4, r2, lsl #6
    uint8_t header[] = {
    9972:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    9976:	fa4f f28c 	sxtb.w	r2, ip
    997a:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
    997e:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
    9982:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
    9986:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    998a:	4a21      	ldr	r2, [pc, #132]	; (9a10 <dw1000_read_reg+0xdc>)
    998c:	ea0e 0202 	and.w	r2, lr, r2
    9990:	b122      	cbz	r2, 999c <dw1000_read_reg+0x68>
    9992:	f41e 7f80 	tst.w	lr, #256	; 0x100
    9996:	d01f      	beq.n	99d8 <dw1000_read_reg+0xa4>
    9998:	2203      	movs	r2, #3
    999a:	e000      	b.n	999e <dw1000_read_reg+0x6a>
    999c:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    999e:	293f      	cmp	r1, #63	; 0x3f
    99a0:	d81c      	bhi.n	99dc <dw1000_read_reg+0xa8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    99a2:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    99a6:	d11f      	bne.n	99e8 <dw1000_read_reg+0xb4>
    99a8:	449c      	add	ip, r3
    99aa:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
    99ae:	d21b      	bcs.n	99e8 <dw1000_read_reg+0xb4>
    assert(nbytes <= sizeof(uint64_t));
    99b0:	2b08      	cmp	r3, #8
    99b2:	d81f      	bhi.n	99f4 <dw1000_read_reg+0xc0>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    99b4:	18d1      	adds	r1, r2, r3
    99b6:	2908      	cmp	r1, #8
    99b8:	d904      	bls.n	99c4 <dw1000_read_reg+0x90>
    99ba:	f890 152e 	ldrb.w	r1, [r0, #1326]	; 0x52e
    99be:	f011 0f01 	tst.w	r1, #1
    99c2:	d01d      	beq.n	9a00 <dw1000_read_reg+0xcc>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
    99c4:	b29b      	uxth	r3, r3
    99c6:	9300      	str	r3, [sp, #0]
    99c8:	ab04      	add	r3, sp, #16
    99ca:	a903      	add	r1, sp, #12
    99cc:	f7ff fab2 	bl	8f34 <hal_dw1000_read>
}
    99d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    99d4:	b007      	add	sp, #28
    99d6:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    99d8:	2202      	movs	r2, #2
    99da:	e7e0      	b.n	999e <dw1000_read_reg+0x6a>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    99dc:	2300      	movs	r3, #0
    99de:	461a      	mov	r2, r3
    99e0:	4619      	mov	r1, r3
    99e2:	4618      	mov	r0, r3
    99e4:	f003 fcbc 	bl	d360 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    99e8:	2300      	movs	r3, #0
    99ea:	461a      	mov	r2, r3
    99ec:	4619      	mov	r1, r3
    99ee:	4618      	mov	r0, r3
    99f0:	f003 fcb6 	bl	d360 <__assert_func>
    assert(nbytes <= sizeof(uint64_t));
    99f4:	2300      	movs	r3, #0
    99f6:	461a      	mov	r2, r3
    99f8:	4619      	mov	r1, r3
    99fa:	4618      	mov	r0, r3
    99fc:	f003 fcb0 	bl	d360 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
    9a00:	b29b      	uxth	r3, r3
    9a02:	9300      	str	r3, [sp, #0]
    9a04:	ab04      	add	r3, sp, #16
    9a06:	a903      	add	r1, sp, #12
    9a08:	f7ff faf0 	bl	8fec <hal_dw1000_read_noblock>
    9a0c:	e7e0      	b.n	99d0 <dw1000_read_reg+0x9c>
    9a0e:	bf00      	nop
    9a10:	00fffe00 	.word	0x00fffe00

00009a14 <dw1000_write_reg>:
{
    9a14:	b530      	push	{r4, r5, lr}
    9a16:	b087      	sub	sp, #28
    9a18:	4604      	mov	r4, r0
    9a1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    dw1000_cmd_t cmd = {
    9a1c:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
    9a20:	f04f 0c00 	mov.w	ip, #0
    9a24:	f36e 0c05 	bfi	ip, lr, #0, #6
        .subindex = subaddress != 0,
    9a28:	4613      	mov	r3, r2
    9a2a:	3a00      	subs	r2, #0
    9a2c:	bf18      	it	ne
    9a2e:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
    9a30:	f362 1c86 	bfi	ip, r2, #6, #1
    9a34:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        .extended = subaddress > 0x7F,
    9a38:	2b7f      	cmp	r3, #127	; 0x7f
    9a3a:	bf94      	ite	ls
    9a3c:	2500      	movls	r5, #0
    9a3e:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
    9a40:	f365 2c08 	bfi	ip, r5, #8, #1
    9a44:	f363 2c57 	bfi	ip, r3, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
    9a48:	0192      	lsls	r2, r2, #6
    9a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9a4e:	ea4e 0202 	orr.w	r2, lr, r2
    uint8_t header[] = {
    9a52:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
    9a56:	b25a      	sxtb	r2, r3
    9a58:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
    9a5c:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
    9a60:	f3c3 12c7 	ubfx	r2, r3, #7, #8
    uint8_t header[] = {
    9a64:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9a68:	4a25      	ldr	r2, [pc, #148]	; (9b00 <dw1000_write_reg+0xec>)
    9a6a:	ea0c 0202 	and.w	r2, ip, r2
    9a6e:	b122      	cbz	r2, 9a7a <dw1000_write_reg+0x66>
    9a70:	f41c 7f80 	tst.w	ip, #256	; 0x100
    9a74:	d022      	beq.n	9abc <dw1000_write_reg+0xa8>
    9a76:	2203      	movs	r2, #3
    9a78:	e000      	b.n	9a7c <dw1000_write_reg+0x68>
    9a7a:	2201      	movs	r2, #1
    buffer.value = val;
    9a7c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
    9a80:	ed8d 7b04 	vstr	d7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
    9a84:	2808      	cmp	r0, #8
    9a86:	d81b      	bhi.n	9ac0 <dw1000_write_reg+0xac>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    9a88:	293f      	cmp	r1, #63	; 0x3f
    9a8a:	d81f      	bhi.n	9acc <dw1000_write_reg+0xb8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    9a8c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9a90:	d122      	bne.n	9ad8 <dw1000_write_reg+0xc4>
    9a92:	4403      	add	r3, r0
    9a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9a98:	d21e      	bcs.n	9ad8 <dw1000_write_reg+0xc4>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
    9a9a:	1813      	adds	r3, r2, r0
    9a9c:	2b08      	cmp	r3, #8
    9a9e:	d904      	bls.n	9aaa <dw1000_write_reg+0x96>
    9aa0:	f894 352e 	ldrb.w	r3, [r4, #1326]	; 0x52e
    9aa4:	f013 0f01 	tst.w	r3, #1
    9aa8:	d01c      	beq.n	9ae4 <dw1000_write_reg+0xd0>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
    9aaa:	b280      	uxth	r0, r0
    9aac:	9000      	str	r0, [sp, #0]
    9aae:	ab04      	add	r3, sp, #16
    9ab0:	a903      	add	r1, sp, #12
    9ab2:	4620      	mov	r0, r4
    9ab4:	f7ff fbd0 	bl	9258 <hal_dw1000_write>
}
    9ab8:	b007      	add	sp, #28
    9aba:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
    9abc:	2202      	movs	r2, #2
    9abe:	e7dd      	b.n	9a7c <dw1000_write_reg+0x68>
    assert(nbytes <= sizeof(uint64_t));
    9ac0:	2300      	movs	r3, #0
    9ac2:	461a      	mov	r2, r3
    9ac4:	4619      	mov	r1, r3
    9ac6:	4618      	mov	r0, r3
    9ac8:	f003 fc4a 	bl	d360 <__assert_func>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
    9acc:	2300      	movs	r3, #0
    9ace:	461a      	mov	r2, r3
    9ad0:	4619      	mov	r1, r3
    9ad2:	4618      	mov	r0, r3
    9ad4:	f003 fc44 	bl	d360 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
    9ad8:	2300      	movs	r3, #0
    9ada:	461a      	mov	r2, r3
    9adc:	4619      	mov	r1, r3
    9ade:	4618      	mov	r0, r3
    9ae0:	f003 fc3e 	bl	d360 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
    9ae4:	b280      	uxth	r0, r0
    9ae6:	9000      	str	r0, [sp, #0]
    9ae8:	ab04      	add	r3, sp, #16
    9aea:	a903      	add	r1, sp, #12
    9aec:	4620      	mov	r0, r4
    9aee:	f7ff fc01 	bl	92f4 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
    9af2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9af6:	4620      	mov	r0, r4
    9af8:	f7ff fcee 	bl	94d8 <hal_dw1000_rw_noblock_wait>
}
    9afc:	e7dc      	b.n	9ab8 <dw1000_write_reg+0xa4>
    9afe:	bf00      	nop
    9b00:	00fffe00 	.word	0x00fffe00

00009b04 <uwb_dw1000_set_euid>:
{
    9b04:	b500      	push	{lr}
    9b06:	b085      	sub	sp, #20
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
    9b08:	2108      	movs	r1, #8
    9b0a:	9102      	str	r1, [sp, #8]
    9b0c:	e9cd 2300 	strd	r2, r3, [sp]
    9b10:	2200      	movs	r2, #0
    9b12:	2101      	movs	r1, #1
    9b14:	f7ff ff7e 	bl	9a14 <dw1000_write_reg>
}
    9b18:	b005      	add	sp, #20
    9b1a:	f85d fb04 	ldr.w	pc, [sp], #4

00009b1e <uwb_dw1000_set_uid>:
{
    9b1e:	b500      	push	{lr}
    9b20:	b085      	sub	sp, #20
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
    9b22:	2302      	movs	r3, #2
    9b24:	9302      	str	r3, [sp, #8]
    9b26:	2200      	movs	r2, #0
    9b28:	9100      	str	r1, [sp, #0]
    9b2a:	9201      	str	r2, [sp, #4]
    9b2c:	2103      	movs	r1, #3
    9b2e:	f7ff ff71 	bl	9a14 <dw1000_write_reg>
}
    9b32:	b005      	add	sp, #20
    9b34:	f85d fb04 	ldr.w	pc, [sp], #4

00009b38 <uwb_dw1000_set_panid>:
{
    9b38:	b500      	push	{lr}
    9b3a:	b085      	sub	sp, #20
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
    9b3c:	2202      	movs	r2, #2
    9b3e:	9202      	str	r2, [sp, #8]
    9b40:	9100      	str	r1, [sp, #0]
    9b42:	2300      	movs	r3, #0
    9b44:	9301      	str	r3, [sp, #4]
    9b46:	2103      	movs	r1, #3
    9b48:	f7ff ff64 	bl	9a14 <dw1000_write_reg>
}
    9b4c:	b005      	add	sp, #20
    9b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00009b52 <dw1000_softreset>:
{
    9b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b56:	b084      	sub	sp, #16
    9b58:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
    9b5a:	f002 fa77 	bl	c04c <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
    9b5e:	f04f 0802 	mov.w	r8, #2
    9b62:	f8cd 8008 	str.w	r8, [sp, #8]
    9b66:	2600      	movs	r6, #0
    9b68:	2700      	movs	r7, #0
    9b6a:	e9cd 6700 	strd	r6, r7, [sp]
    9b6e:	2204      	movs	r2, #4
    9b70:	2136      	movs	r1, #54	; 0x36
    9b72:	4620      	mov	r0, r4
    9b74:	f7ff ff4e 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
    9b78:	f8cd 8008 	str.w	r8, [sp, #8]
    9b7c:	e9cd 6700 	strd	r6, r7, [sp]
    9b80:	2200      	movs	r2, #0
    9b82:	212c      	movs	r1, #44	; 0x2c
    9b84:	4620      	mov	r0, r4
    9b86:	f7ff ff45 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
    9b8a:	2501      	movs	r5, #1
    9b8c:	9502      	str	r5, [sp, #8]
    9b8e:	e9cd 6700 	strd	r6, r7, [sp]
    9b92:	2206      	movs	r2, #6
    9b94:	212c      	movs	r1, #44	; 0x2c
    9b96:	4620      	mov	r0, r4
    9b98:	f7ff ff3c 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
    9b9c:	9502      	str	r5, [sp, #8]
    9b9e:	e9cd 6700 	strd	r6, r7, [sp]
    9ba2:	4642      	mov	r2, r8
    9ba4:	212c      	movs	r1, #44	; 0x2c
    9ba6:	4620      	mov	r0, r4
    9ba8:	f7ff ff34 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
    9bac:	9502      	str	r5, [sp, #8]
    9bae:	2202      	movs	r2, #2
    9bb0:	2300      	movs	r3, #0
    9bb2:	e9cd 2300 	strd	r2, r3, [sp]
    9bb6:	4642      	mov	r2, r8
    9bb8:	212c      	movs	r1, #44	; 0x2c
    9bba:	4620      	mov	r0, r4
    9bbc:	f7ff ff2a 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
    9bc0:	9502      	str	r5, [sp, #8]
    9bc2:	e9cd 6700 	strd	r6, r7, [sp]
    9bc6:	2203      	movs	r2, #3
    9bc8:	2136      	movs	r1, #54	; 0x36
    9bca:	4620      	mov	r0, r4
    9bcc:	f7ff ff22 	bl	9a14 <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
    9bd0:	200a      	movs	r0, #10
    9bd2:	f008 f8fe 	bl	11dd2 <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
    9bd6:	9502      	str	r5, [sp, #8]
    9bd8:	22f0      	movs	r2, #240	; 0xf0
    9bda:	2300      	movs	r3, #0
    9bdc:	e9cd 2300 	strd	r2, r3, [sp]
    9be0:	2203      	movs	r2, #3
    9be2:	2136      	movs	r1, #54	; 0x36
    9be4:	4620      	mov	r0, r4
    9be6:	f7ff ff15 	bl	9a14 <dw1000_write_reg>
}
    9bea:	b004      	add	sp, #16
    9bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009bf0 <dw1000_dev_configure_sleep>:
{
    9bf0:	b530      	push	{r4, r5, lr}
    9bf2:	b085      	sub	sp, #20
    9bf4:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
    9bf6:	2302      	movs	r3, #2
    9bf8:	2200      	movs	r2, #0
    9bfa:	212c      	movs	r1, #44	; 0x2c
    9bfc:	f7ff fe9a 	bl	9934 <dw1000_read_reg>
    9c00:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
    9c02:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    9c06:	f012 0f10 	tst.w	r2, #16
    9c0a:	d03a      	beq.n	9c82 <dw1000_dev_configure_sleep+0x92>
        reg |= AON_WCFG_ONW_LLDE;
    9c0c:	f443 630c 	orr.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
    9c10:	f012 0f20 	tst.w	r2, #32
    9c14:	d03a      	beq.n	9c8c <dw1000_dev_configure_sleep+0x9c>
        reg |= AON_WCFG_ONW_LLDO;
    9c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
    9c1a:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
    9c1e:	f012 0f10 	tst.w	r2, #16
    9c22:	d037      	beq.n	9c94 <dw1000_dev_configure_sleep+0xa4>
        reg |= AON_WCFG_ONW_RX;
    9c24:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
    9c28:	2502      	movs	r5, #2
    9c2a:	9502      	str	r5, [sp, #8]
    9c2c:	2200      	movs	r2, #0
    9c2e:	9300      	str	r3, [sp, #0]
    9c30:	9201      	str	r2, [sp, #4]
    9c32:	212c      	movs	r1, #44	; 0x2c
    9c34:	4620      	mov	r0, r4
    9c36:	f7ff feed 	bl	9a14 <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
    9c3a:	462b      	mov	r3, r5
    9c3c:	2206      	movs	r2, #6
    9c3e:	212c      	movs	r1, #44	; 0x2c
    9c40:	4620      	mov	r0, r4
    9c42:	f7ff fe77 	bl	9934 <dw1000_read_reg>
    9c46:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
    9c48:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    9c4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
    9c50:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    9c54:	f363 12c7 	bfi	r2, r3, #7, #1
    9c58:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
    9c5c:	b253      	sxtb	r3, r2
    9c5e:	2b00      	cmp	r3, #0
    9c60:	db1c      	blt.n	9c9c <dw1000_dev_configure_sleep+0xac>
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
    9c62:	f020 0009 	bic.w	r0, r0, #9
    9c66:	f040 0006 	orr.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
    9c6a:	2302      	movs	r3, #2
    9c6c:	9302      	str	r3, [sp, #8]
    9c6e:	9000      	str	r0, [sp, #0]
    9c70:	2300      	movs	r3, #0
    9c72:	9301      	str	r3, [sp, #4]
    9c74:	2206      	movs	r2, #6
    9c76:	212c      	movs	r1, #44	; 0x2c
    9c78:	4620      	mov	r0, r4
    9c7a:	f7ff fecb 	bl	9a14 <dw1000_write_reg>
}
    9c7e:	b005      	add	sp, #20
    9c80:	bd30      	pop	{r4, r5, pc}
        reg &= ~AON_WCFG_ONW_LLDE;
    9c82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    9c8a:	e7c1      	b.n	9c10 <dw1000_dev_configure_sleep+0x20>
        reg &= ~AON_WCFG_ONW_LLDO;
    9c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    9c90:	b29b      	uxth	r3, r3
    9c92:	e7c2      	b.n	9c1a <dw1000_dev_configure_sleep+0x2a>
        reg &= ~AON_WCFG_ONW_RX;
    9c94:	f023 0302 	bic.w	r3, r3, #2
    9c98:	b29b      	uxth	r3, r3
    9c9a:	e7c5      	b.n	9c28 <dw1000_dev_configure_sleep+0x38>
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
    9c9c:	f040 000f 	orr.w	r0, r0, #15
    9ca0:	e7e3      	b.n	9c6a <dw1000_dev_configure_sleep+0x7a>

00009ca2 <uwb_dw1000_sleep_config>:
{
    9ca2:	b508      	push	{r3, lr}
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
    9ca4:	f7ff ffa4 	bl	9bf0 <dw1000_dev_configure_sleep>
}
    9ca8:	bd08      	pop	{r3, pc}

00009caa <dw1000_dev_enter_sleep>:
{
    9caa:	b570      	push	{r4, r5, r6, lr}
    9cac:	b084      	sub	sp, #16
    9cae:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9cb0:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
    9cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9cb8:	4628      	mov	r0, r5
    9cba:	f004 f8dd 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    9cbe:	b148      	cbz	r0, 9cd4 <dw1000_dev_enter_sleep+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
    9cc0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9cc4:	f043 0308 	orr.w	r3, r3, #8
    9cc8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9ccc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9cd0:	b004      	add	sp, #16
    9cd2:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
    9cd4:	2602      	movs	r6, #2
    9cd6:	9602      	str	r6, [sp, #8]
    9cd8:	2200      	movs	r2, #0
    9cda:	2300      	movs	r3, #0
    9cdc:	e9cd 2300 	strd	r2, r3, [sp]
    9ce0:	4632      	mov	r2, r6
    9ce2:	212c      	movs	r1, #44	; 0x2c
    9ce4:	4620      	mov	r0, r4
    9ce6:	f7ff fe95 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
    9cea:	9602      	str	r6, [sp, #8]
    9cec:	2202      	movs	r2, #2
    9cee:	2300      	movs	r3, #0
    9cf0:	e9cd 2300 	strd	r2, r3, [sp]
    9cf4:	4632      	mov	r2, r6
    9cf6:	212c      	movs	r1, #44	; 0x2c
    9cf8:	4620      	mov	r0, r4
    9cfa:	f7ff fe8b 	bl	9a14 <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
    9cfe:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    9d02:	f043 0301 	orr.w	r3, r3, #1
    9d06:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9d0a:	4628      	mov	r0, r5
    9d0c:	f004 f858 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    9d10:	2800      	cmp	r0, #0
    9d12:	d0db      	beq.n	9ccc <dw1000_dev_enter_sleep+0x22>
    9d14:	2300      	movs	r3, #0
    9d16:	461a      	mov	r2, r3
    9d18:	4619      	mov	r1, r3
    9d1a:	4618      	mov	r0, r3
    9d1c:	f003 fb20 	bl	d360 <__assert_func>

00009d20 <uwb_dw1000_enter_sleep>:
{
    9d20:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
    9d22:	f7ff ffc2 	bl	9caa <dw1000_dev_enter_sleep>
}
    9d26:	bd08      	pop	{r3, pc}

00009d28 <dw1000_dev_wakeup>:
{
    9d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d2a:	b085      	sub	sp, #20
    9d2c:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    9d2e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    9d32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d36:	4630      	mov	r0, r6
    9d38:	f004 f89e 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    9d3c:	b148      	cbz	r0, 9d52 <dw1000_dev_wakeup+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
    9d3e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    9d42:	f043 0308 	orr.w	r3, r3, #8
    9d46:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    9d4a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    9d4e:	b005      	add	sp, #20
    9d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
    9d52:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    9d56:	f36f 0300 	bfc	r3, #0, #1
    9d5a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    9d5e:	2304      	movs	r3, #4
    9d60:	2200      	movs	r2, #0
    9d62:	4611      	mov	r1, r2
    9d64:	4620      	mov	r0, r4
    9d66:	f7ff fde5 	bl	9934 <dw1000_read_reg>
    int timeout=5;
    9d6a:	2505      	movs	r5, #5
    while (devid != 0xDECA0130 && --timeout)
    9d6c:	e008      	b.n	9d80 <dw1000_dev_wakeup+0x58>
        hal_dw1000_wakeup(inst);
    9d6e:	4620      	mov	r0, r4
    9d70:	f7ff fbd0 	bl	9514 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    9d74:	2304      	movs	r3, #4
    9d76:	2200      	movs	r2, #0
    9d78:	4611      	mov	r1, r2
    9d7a:	4620      	mov	r0, r4
    9d7c:	f7ff fdda 	bl	9934 <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
    9d80:	4b29      	ldr	r3, [pc, #164]	; (9e28 <dw1000_dev_wakeup+0x100>)
    9d82:	4298      	cmp	r0, r3
    9d84:	d001      	beq.n	9d8a <dw1000_dev_wakeup+0x62>
    9d86:	3d01      	subs	r5, #1
    9d88:	d1f1      	bne.n	9d6e <dw1000_dev_wakeup+0x46>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
    9d8a:	4b27      	ldr	r3, [pc, #156]	; (9e28 <dw1000_dev_wakeup+0x100>)
    9d8c:	1ac0      	subs	r0, r0, r3
    9d8e:	bf18      	it	ne
    9d90:	2001      	movne	r0, #1
    9d92:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    9d96:	f360 0300 	bfi	r3, r0, #0, #1
    9d9a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
    9d9e:	2504      	movs	r5, #4
    9da0:	9502      	str	r5, [sp, #8]
    9da2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    9da6:	2300      	movs	r3, #0
    9da8:	e9cd 2300 	strd	r2, r3, [sp]
    9dac:	2200      	movs	r2, #0
    9dae:	210f      	movs	r1, #15
    9db0:	4620      	mov	r0, r4
    9db2:	f7ff fe2f 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
    9db6:	9502      	str	r5, [sp, #8]
    9db8:	a319      	add	r3, pc, #100	; (adr r3, 9e20 <dw1000_dev_wakeup+0xf8>)
    9dba:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dbe:	e9cd 2300 	strd	r2, r3, [sp]
    9dc2:	2200      	movs	r2, #0
    9dc4:	210f      	movs	r1, #15
    9dc6:	4620      	mov	r0, r4
    9dc8:	f7ff fe24 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    9dcc:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
    9dd0:	2702      	movs	r7, #2
    9dd2:	9702      	str	r7, [sp, #8]
    9dd4:	2500      	movs	r5, #0
    9dd6:	9300      	str	r3, [sp, #0]
    9dd8:	9501      	str	r5, [sp, #4]
    9dda:	f641 0204 	movw	r2, #6148	; 0x1804
    9dde:	212e      	movs	r1, #46	; 0x2e
    9de0:	4620      	mov	r0, r4
    9de2:	f7ff fe17 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
    9de6:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
    9dea:	9702      	str	r7, [sp, #8]
    9dec:	9300      	str	r3, [sp, #0]
    9dee:	9501      	str	r5, [sp, #4]
    9df0:	462a      	mov	r2, r5
    9df2:	2118      	movs	r1, #24
    9df4:	4620      	mov	r0, r4
    9df6:	f7ff fe0d 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    9dfa:	4630      	mov	r0, r6
    9dfc:	f003 ffe0 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    9e00:	b940      	cbnz	r0, 9e14 <dw1000_dev_wakeup+0xec>
    9e02:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
    9e06:	2b00      	cmp	r3, #0
    9e08:	d19f      	bne.n	9d4a <dw1000_dev_wakeup+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
    9e0a:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    9e0e:	f004 fa9d 	bl	e34c <os_sem_release>
    9e12:	e79a      	b.n	9d4a <dw1000_dev_wakeup+0x22>
    assert(err == DPL_OK);
    9e14:	462b      	mov	r3, r5
    9e16:	462a      	mov	r2, r5
    9e18:	4629      	mov	r1, r5
    9e1a:	4628      	mov	r0, r5
    9e1c:	f003 faa0 	bl	d360 <__assert_func>
    9e20:	24119000 	.word	0x24119000
    9e24:	00000000 	.word	0x00000000
    9e28:	deca0130 	.word	0xdeca0130

00009e2c <dw1000_dev_config>:
{
    9e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e2e:	b085      	sub	sp, #20
    9e30:	4604      	mov	r4, r0
    int timeout = 3;
    9e32:	2503      	movs	r5, #3
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
    9e34:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
    9e38:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
    9e3c:	4620      	mov	r0, r4
    9e3e:	f7ff f84f 	bl	8ee0 <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
    9e42:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9e46:	f003 f859 	bl	cefc <hal_spi_disable>
    assert(rc == 0);
    9e4a:	bb48      	cbnz	r0, 9ea0 <dw1000_dev_config+0x74>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    9e4c:	f204 5694 	addw	r6, r4, #1428	; 0x594
    9e50:	4631      	mov	r1, r6
    9e52:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9e56:	f003 f80f 	bl	ce78 <hal_spi_config>
    assert(rc == 0);
    9e5a:	bb38      	cbnz	r0, 9eac <dw1000_dev_config+0x80>
    rc = hal_spi_enable(inst->spi_num);
    9e5c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9e60:	f003 f826 	bl	ceb0 <hal_spi_enable>
    assert(rc == 0);
    9e64:	bb40      	cbnz	r0, 9eb8 <dw1000_dev_config+0x8c>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
    9e66:	2304      	movs	r3, #4
    9e68:	2200      	movs	r2, #0
    9e6a:	4611      	mov	r1, r2
    9e6c:	4620      	mov	r0, r4
    9e6e:	f7ff fd61 	bl	9934 <dw1000_read_reg>
    9e72:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
    9e76:	4b55      	ldr	r3, [pc, #340]	; (9fcc <dw1000_dev_config+0x1a0>)
    9e78:	4298      	cmp	r0, r3
    9e7a:	bf14      	ite	ne
    9e7c:	2000      	movne	r0, #0
    9e7e:	2001      	moveq	r0, #1
    9e80:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    9e84:	f360 0341 	bfi	r3, r0, #1, #1
    9e88:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
    9e8c:	b2db      	uxtb	r3, r3
    9e8e:	f013 0302 	ands.w	r3, r3, #2
    9e92:	d117      	bne.n	9ec4 <dw1000_dev_config+0x98>
    9e94:	3d01      	subs	r5, #1
    9e96:	d015      	beq.n	9ec4 <dw1000_dev_config+0x98>
        dw1000_dev_wakeup(inst);
    9e98:	4620      	mov	r0, r4
    9e9a:	f7ff ff45 	bl	9d28 <dw1000_dev_wakeup>
        goto retry;
    9e9e:	e7c9      	b.n	9e34 <dw1000_dev_config+0x8>
    assert(rc == 0);
    9ea0:	2300      	movs	r3, #0
    9ea2:	461a      	mov	r2, r3
    9ea4:	4619      	mov	r1, r3
    9ea6:	4618      	mov	r0, r3
    9ea8:	f003 fa5a 	bl	d360 <__assert_func>
    assert(rc == 0);
    9eac:	2300      	movs	r3, #0
    9eae:	461a      	mov	r2, r3
    9eb0:	4619      	mov	r1, r3
    9eb2:	4618      	mov	r0, r3
    9eb4:	f003 fa54 	bl	d360 <__assert_func>
    assert(rc == 0);
    9eb8:	2300      	movs	r3, #0
    9eba:	461a      	mov	r2, r3
    9ebc:	4619      	mov	r1, r3
    9ebe:	4618      	mov	r0, r3
    9ec0:	f003 fa4e 	bl	d360 <__assert_func>
    if(!inst->uwb_dev.status.initialized)
    9ec4:	2b00      	cmp	r3, #0
    9ec6:	d07f      	beq.n	9fc8 <dw1000_dev_config+0x19c>
    dw1000_phy_init(inst, NULL);
    9ec8:	2100      	movs	r1, #0
    9eca:	4620      	mov	r0, r4
    9ecc:	f002 f98a 	bl	c1e4 <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
    9ed0:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
    9ed4:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
    9ed8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9edc:	f003 f80e 	bl	cefc <hal_spi_disable>
    assert(rc == 0);
    9ee0:	2800      	cmp	r0, #0
    9ee2:	d15f      	bne.n	9fa4 <dw1000_dev_config+0x178>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    9ee4:	4631      	mov	r1, r6
    9ee6:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9eea:	f002 ffc5 	bl	ce78 <hal_spi_config>
    assert(rc == 0);
    9eee:	2800      	cmp	r0, #0
    9ef0:	d15e      	bne.n	9fb0 <dw1000_dev_config+0x184>
    rc = hal_spi_enable(inst->spi_num);
    9ef2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    9ef6:	f002 ffdb 	bl	ceb0 <hal_spi_enable>
    assert(rc == 0);
    9efa:	4607      	mov	r7, r0
    9efc:	2800      	cmp	r0, #0
    9efe:	d15d      	bne.n	9fbc <dw1000_dev_config+0x190>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
    9f00:	f64d 63ca 	movw	r3, #57034	; 0xdeca
    9f04:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
    9f08:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
    9f0c:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
    9f10:	2000      	movs	r0, #0
    9f12:	f7fe ffd9 	bl	8ec8 <hal_dw1000_inst>
    9f16:	4284      	cmp	r4, r0
    9f18:	d007      	beq.n	9f2a <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(1)){
    9f1a:	2001      	movs	r0, #1
    9f1c:	f7fe ffd4 	bl	8ec8 <hal_dw1000_inst>
    9f20:	4284      	cmp	r4, r0
    9f22:	d002      	beq.n	9f2a <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(2)){
    9f24:	2002      	movs	r0, #2
    9f26:	f7fe ffcf 	bl	8ec8 <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
    9f2a:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
    9f2e:	f8d4 1574 	ldr.w	r1, [r4, #1396]	; 0x574
    9f32:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
    9f36:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
    dw1000_mac_init(inst, NULL);
    9f3a:	2100      	movs	r1, #0
    9f3c:	4620      	mov	r0, r4
    9f3e:	f001 f989 	bl	b254 <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
    9f42:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    9f46:	3b01      	subs	r3, #1
    9f48:	b29b      	uxth	r3, r3
    9f4a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    9f4e:	4293      	cmp	r3, r2
    9f50:	d902      	bls.n	9f58 <dw1000_dev_config+0x12c>
        inst->uwb_dev.uid = 0x1;
    9f52:	2301      	movs	r3, #1
    9f54:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
    9f58:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    9f5c:	2602      	movs	r6, #2
    9f5e:	9602      	str	r6, [sp, #8]
    9f60:	2500      	movs	r5, #0
    9f62:	9300      	str	r3, [sp, #0]
    9f64:	9501      	str	r5, [sp, #4]
    9f66:	4632      	mov	r2, r6
    9f68:	2103      	movs	r1, #3
    9f6a:	4620      	mov	r0, r4
    9f6c:	f7ff fd52 	bl	9a14 <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
    9f70:	2308      	movs	r3, #8
    9f72:	9302      	str	r3, [sp, #8]
    9f74:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
    9f78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    9f7c:	e9cd 2300 	strd	r2, r3, [sp]
    9f80:	462a      	mov	r2, r5
    9f82:	2101      	movs	r1, #1
    9f84:	4620      	mov	r0, r4
    9f86:	f7ff fd45 	bl	9a14 <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
    9f8a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
    9f8e:	9602      	str	r6, [sp, #8]
    9f90:	9300      	str	r3, [sp, #0]
    9f92:	9501      	str	r5, [sp, #4]
    9f94:	462a      	mov	r2, r5
    9f96:	2103      	movs	r1, #3
    9f98:	4620      	mov	r0, r4
    9f9a:	f7ff fd3b 	bl	9a14 <dw1000_write_reg>
}
    9f9e:	4638      	mov	r0, r7
    9fa0:	b005      	add	sp, #20
    9fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
    9fa4:	2300      	movs	r3, #0
    9fa6:	461a      	mov	r2, r3
    9fa8:	4619      	mov	r1, r3
    9faa:	4618      	mov	r0, r3
    9fac:	f003 f9d8 	bl	d360 <__assert_func>
    assert(rc == 0);
    9fb0:	2300      	movs	r3, #0
    9fb2:	461a      	mov	r2, r3
    9fb4:	4619      	mov	r1, r3
    9fb6:	4618      	mov	r0, r3
    9fb8:	f003 f9d2 	bl	d360 <__assert_func>
    assert(rc == 0);
    9fbc:	2300      	movs	r3, #0
    9fbe:	461a      	mov	r2, r3
    9fc0:	4619      	mov	r1, r3
    9fc2:	4618      	mov	r0, r3
    9fc4:	f003 f9cc 	bl	d360 <__assert_func>
        return DPL_TIMEOUT;
    9fc8:	2706      	movs	r7, #6
    9fca:	e7e8      	b.n	9f9e <dw1000_dev_config+0x172>
    9fcc:	deca0130 	.word	0xdeca0130

00009fd0 <uwb_dw1000_wakeup>:
{
    9fd0:	b508      	push	{r3, lr}
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
    9fd2:	f7ff fea9 	bl	9d28 <dw1000_dev_wakeup>
}
    9fd6:	bd08      	pop	{r3, pc}

00009fd8 <dw1000_dev_enter_sleep_after_tx>:
{
    9fd8:	b530      	push	{r4, r5, lr}
    9fda:	b085      	sub	sp, #20
    9fdc:	4604      	mov	r4, r0
    9fde:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
    9fe0:	2304      	movs	r3, #4
    9fe2:	461a      	mov	r2, r3
    9fe4:	2136      	movs	r1, #54	; 0x36
    9fe6:	f7ff fca5 	bl	9934 <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
    9fea:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    9fee:	f365 13c7 	bfi	r3, r5, #7, #1
    9ff2:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
    9ff6:	b25b      	sxtb	r3, r3
    9ff8:	2b00      	cmp	r3, #0
    9ffa:	db0e      	blt.n	a01a <dw1000_dev_enter_sleep_after_tx+0x42>
        reg &= ~(PMSC_CTRL1_ATXSLP);
    9ffc:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
    a000:	2204      	movs	r2, #4
    a002:	9202      	str	r2, [sp, #8]
    a004:	9000      	str	r0, [sp, #0]
    a006:	2300      	movs	r3, #0
    a008:	9301      	str	r3, [sp, #4]
    a00a:	2136      	movs	r1, #54	; 0x36
    a00c:	4620      	mov	r0, r4
    a00e:	f7ff fd01 	bl	9a14 <dw1000_write_reg>
}
    a012:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a016:	b005      	add	sp, #20
    a018:	bd30      	pop	{r4, r5, pc}
        reg |= PMSC_CTRL1_ATXSLP;
    a01a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    a01e:	e7ef      	b.n	a000 <dw1000_dev_enter_sleep_after_tx+0x28>

0000a020 <uwb_dw1000_enter_sleep_after_tx>:
{
    a020:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
    a022:	f7ff ffd9 	bl	9fd8 <dw1000_dev_enter_sleep_after_tx>
}
    a026:	bd08      	pop	{r3, pc}

0000a028 <dw1000_dev_enter_sleep_after_rx>:
{
    a028:	b530      	push	{r4, r5, lr}
    a02a:	b085      	sub	sp, #20
    a02c:	4604      	mov	r4, r0
    a02e:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
    a030:	2304      	movs	r3, #4
    a032:	461a      	mov	r2, r3
    a034:	2136      	movs	r1, #54	; 0x36
    a036:	f7ff fc7d 	bl	9934 <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
    a03a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    a03e:	f365 0300 	bfi	r3, r5, #0, #1
    a042:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
    a046:	b2db      	uxtb	r3, r3
    a048:	f013 0f01 	tst.w	r3, #1
    a04c:	d00e      	beq.n	a06c <dw1000_dev_enter_sleep_after_rx+0x44>
        reg |= PMSC_CTRL1_ARXSLP;
    a04e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
    a052:	2204      	movs	r2, #4
    a054:	9202      	str	r2, [sp, #8]
    a056:	9000      	str	r0, [sp, #0]
    a058:	2300      	movs	r3, #0
    a05a:	9301      	str	r3, [sp, #4]
    a05c:	2136      	movs	r1, #54	; 0x36
    a05e:	4620      	mov	r0, r4
    a060:	f7ff fcd8 	bl	9a14 <dw1000_write_reg>
}
    a064:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a068:	b005      	add	sp, #20
    a06a:	bd30      	pop	{r4, r5, pc}
        reg &= ~(PMSC_CTRL1_ARXSLP);
    a06c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
    a070:	e7ef      	b.n	a052 <dw1000_dev_enter_sleep_after_rx+0x2a>

0000a072 <uwb_dw1000_enter_sleep_after_rx>:
{
    a072:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
    a074:	f7ff ffd8 	bl	a028 <dw1000_dev_enter_sleep_after_rx>
}
    a078:	bd08      	pop	{r3, pc}
	...

0000a07c <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
    a07c:	b538      	push	{r3, r4, r5, lr}
    a07e:	4604      	mov	r4, r0
    a080:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    a082:	f007 fe96 	bl	11db2 <dpl_cputime_get32>
    a086:	4601      	mov	r1, r0
    a088:	4844      	ldr	r0, [pc, #272]	; (a19c <dw1000_dev_init+0x120>)
    a08a:	f007 fe03 	bl	11c94 <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
    a08e:	2300      	movs	r3, #0
    a090:	6023      	str	r3, [r4, #0]
    a092:	60e3      	str	r3, [r4, #12]

    if (inst == NULL) {
    a094:	2c00      	cmp	r4, #0
    a096:	d05a      	beq.n	a14e <dw1000_dev_init+0xd2>
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
    a098:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a09c:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
    a0a0:	f44f 7380 	mov.w	r3, #256	; 0x100
    a0a4:	f8a4 3506 	strh.w	r3, [r4, #1286]	; 0x506
    uwb_dev_init(udev);
    a0a8:	4620      	mov	r0, r4
    a0aa:	f7fe fdc5 	bl	8c38 <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
    a0ae:	4b3c      	ldr	r3, [pc, #240]	; (a1a0 <dw1000_dev_init+0x124>)
    a0b0:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
    a0b2:	f204 539c 	addw	r3, r4, #1436	; 0x59c
    a0b6:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
    a0ba:	2314      	movs	r3, #20
    a0bc:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c
#if MYNEWT_VAL(CIR_ENABLED)
    udev->cir = (struct cir_instance*)inst->cir;
#endif
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->sys_status_bt_idx = 0;
    a0c0:	2300      	movs	r3, #0
    a0c2:	f8a4 3df0 	strh.w	r3, [r4, #3568]	; 0xdf0
    inst->sys_status_bt_lock = 0;
    a0c6:	f884 3df2 	strb.w	r3, [r4, #3570]	; 0xdf2

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
    a0ca:	682b      	ldr	r3, [r5, #0]
    a0cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
    a0d0:	7b2b      	ldrb	r3, [r5, #12]
    a0d2:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
    a0d6:	686b      	ldr	r3, [r5, #4]
    a0d8:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
    a0dc:	68ab      	ldr	r3, [r5, #8]
    a0de:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
    a0e2:	7bab      	ldrb	r3, [r5, #14]
    a0e4:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
    a0e8:	7b6b      	ldrb	r3, [r5, #13]
    a0ea:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
    a0ee:	7beb      	ldrb	r3, [r5, #15]
    a0f0:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
    a0f4:	8a2b      	ldrh	r3, [r5, #16]
    a0f6:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
    a0fa:	8a6b      	ldrh	r3, [r5, #18]
    a0fc:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
    a100:	696b      	ldr	r3, [r5, #20]
    a102:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
    a106:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
    a10a:	f003 fe4f 	bl	ddac <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
    a10e:	bb90      	cbnz	r0, a176 <dw1000_dev_init+0xfa>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    a110:	2101      	movs	r1, #1
    a112:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    a116:	f004 f911 	bl	e33c <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
    a11a:	bb90      	cbnz	r0, a182 <dw1000_dev_init+0x106>
    a11c:	2101      	movs	r1, #1
    a11e:	f204 504c 	addw	r0, r4, #1356	; 0x54c
    a122:	f004 f90b 	bl	e33c <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
    a126:	bb90      	cbnz	r0, a18e <dw1000_dev_init+0x112>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
    a128:	f204 5334 	addw	r3, r4, #1332	; 0x534
    a12c:	4a1d      	ldr	r2, [pc, #116]	; (a1a4 <dw1000_dev_init+0x128>)
    a12e:	601a      	str	r2, [r3, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
    a130:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
    a134:	4a1c      	ldr	r2, [pc, #112]	; (a1a8 <dw1000_dev_init+0x12c>)
    a136:	601a      	str	r2, [r3, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
    a138:	f204 533c 	addw	r3, r4, #1340	; 0x53c
    a13c:	4a1b      	ldr	r2, [pc, #108]	; (a1ac <dw1000_dev_init+0x130>)
    a13e:	601a      	str	r2, [r3, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
    a140:	2000      	movs	r0, #0
    a142:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
    a146:	2301      	movs	r3, #1
    a148:	f8c4 3df4 	str.w	r3, [r4, #3572]	; 0xdf4
#endif
    return DPL_OK;
}
    a14c:	bd38      	pop	{r3, r4, r5, pc}
        inst = (dw1000_dev_instance_t *) calloc(1, sizeof(dw1000_dev_instance_t));
    a14e:	f640 51f8 	movw	r1, #3576	; 0xdf8
    a152:	2001      	movs	r0, #1
    a154:	f007 f887 	bl	11266 <calloc>
        assert(inst);
    a158:	4604      	mov	r4, r0
    a15a:	b130      	cbz	r0, a16a <dw1000_dev_init+0xee>
        inst->uwb_dev.status.selfmalloc = 1;
    a15c:	f890 3508 	ldrb.w	r3, [r0, #1288]	; 0x508
    a160:	f043 0301 	orr.w	r3, r3, #1
    a164:	f880 3508 	strb.w	r3, [r0, #1288]	; 0x508
        udev = (struct uwb_dev*)inst;
    a168:	e796      	b.n	a098 <dw1000_dev_init+0x1c>
        assert(inst);
    a16a:	2300      	movs	r3, #0
    a16c:	461a      	mov	r2, r3
    a16e:	4619      	mov	r1, r3
    a170:	4618      	mov	r0, r3
    a172:	f003 f8f5 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
    a176:	2300      	movs	r3, #0
    a178:	461a      	mov	r2, r3
    a17a:	4619      	mov	r1, r3
    a17c:	4618      	mov	r0, r3
    a17e:	f003 f8ef 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
    a182:	2300      	movs	r3, #0
    a184:	461a      	mov	r2, r3
    a186:	4619      	mov	r1, r3
    a188:	4618      	mov	r0, r3
    a18a:	f003 f8e9 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
    a18e:	2300      	movs	r3, #0
    a190:	461a      	mov	r2, r3
    a192:	4619      	mov	r1, r3
    a194:	4618      	mov	r0, r3
    a196:	f003 f8e3 	bl	d360 <__assert_func>
    a19a:	bf00      	nop
    a19c:	000234c0 	.word	0x000234c0
    a1a0:	00023504 	.word	0x00023504
    a1a4:	3f8241a4 	.word	0x3f8241a4
    a1a8:	3f834834 	.word	0x3f834834
    a1ac:	3e034833 	.word	0x3e034833

0000a1b0 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
    a1b0:	b510      	push	{r4, lr}
    assert(inst);
    a1b2:	b1d8      	cbz	r0, a1ec <dw1000_dev_deinit+0x3c>
    a1b4:	4604      	mov	r4, r0
    hal_spi_disable(inst->spi_num);
    a1b6:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
    a1ba:	f002 fe9f 	bl	cefc <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
    a1be:	4620      	mov	r0, r4
    a1c0:	f7fe fd2e 	bl	8c20 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
    a1c4:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    a1c8:	f002 fce2 	bl	cb90 <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
    a1cc:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    a1d0:	f002 fcec 	bl	cbac <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
    a1d4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a1d8:	f013 0f01 	tst.w	r3, #1
    a1dc:	d10c      	bne.n	a1f8 <dw1000_dev_deinit+0x48>
        free(inst);
    } else {
        inst->uwb_dev.status.initialized = 0;
    a1de:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a1e2:	f36f 0341 	bfc	r3, #1, #1
    a1e6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    }
}
    a1ea:	bd10      	pop	{r4, pc}
    assert(inst);
    a1ec:	2300      	movs	r3, #0
    a1ee:	461a      	mov	r2, r3
    a1f0:	4619      	mov	r1, r3
    a1f2:	4618      	mov	r0, r3
    a1f4:	f003 f8b4 	bl	d360 <__assert_func>
        free(inst);
    a1f8:	4620      	mov	r0, r4
    a1fa:	f007 f903 	bl	11404 <free>
    a1fe:	e7f4      	b.n	a1ea <dw1000_dev_deinit+0x3a>

0000a200 <calc_rx_window_timeout>:
}

static uint16_t
calc_rx_window_timeout(uint64_t rx_start, uint64_t rx_end)
{
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
    a200:	1a12      	subs	r2, r2, r0
    a202:	eb63 0301 	sbc.w	r3, r3, r1
    a206:	0c12      	lsrs	r2, r2, #16
    a208:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a20c:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    /* If more than 8.4s away (more than 1/2 period)- the end has likely
     * already passed so set a short timeout as to trigger a timeout */
    if (timeout > 0x7fffff) {
    a210:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    a214:	d105      	bne.n	a222 <calc_rx_window_timeout+0x22>
        timeout = 1;
    }
    /* DW1000 can't have a rx-timeout greater than 0xffff */
    if (timeout > 0xffff) {
    a216:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    a21a:	d303      	bcc.n	a224 <calc_rx_window_timeout+0x24>
        timeout = 0xffff;
    a21c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    a220:	e000      	b.n	a224 <calc_rx_window_timeout+0x24>
        timeout = 1;
    a222:	2001      	movs	r0, #1
    }
    return timeout;
}
    a224:	b280      	uxth	r0, r0
    a226:	4770      	bx	lr

0000a228 <dw1000_checkoverrun>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = overrun error has occured, 0 otherwise
 */
static uint8_t
dw1000_checkoverrun(dw1000_dev_instance_t * inst)
{
    a228:	b508      	push	{r3, lr}
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
    a22a:	2301      	movs	r3, #1
    a22c:	2202      	movs	r2, #2
    a22e:	210f      	movs	r1, #15
    a230:	f7ff fb80 	bl	9934 <dw1000_read_reg>
    return (ov!=0);
}
    a234:	f3c0 1000 	ubfx	r0, r0, #4, #1
    a238:	bd08      	pop	{r3, pc}

0000a23a <dw1000_irq>:
{
    a23a:	b510      	push	{r4, lr}
    a23c:	4604      	mov	r4, r0
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
    a23e:	f007 fdb8 	bl	11db2 <dpl_cputime_get32>
    a242:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
    a244:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    a248:	f013 0f01 	tst.w	r3, #1
    a24c:	d000      	beq.n	a250 <dw1000_irq+0x16>
}
    a24e:	bd10      	pop	{r4, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    a250:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    a254:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    a258:	f003 fbb6 	bl	d9c8 <os_eventq_put>
    a25c:	e7f7      	b.n	a24e <dw1000_irq+0x14>

0000a25e <dw1000_read_rx>:
{
    a25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a262:	b082      	sub	sp, #8
    a264:	4604      	mov	r4, r0
    a266:	460f      	mov	r7, r1
    a268:	4616      	mov	r6, r2
    a26a:	461d      	mov	r5, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
    a26c:	f8d0 05cc 	ldr.w	r0, [r0, #1484]	; 0x5cc
    a270:	4418      	add	r0, r3
    a272:	f8c4 05cc 	str.w	r0, [r4, #1484]	; 0x5cc
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a276:	f504 68ad 	add.w	r8, r4, #1384	; 0x568
    a27a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a27e:	4640      	mov	r0, r8
    a280:	f003 fdfa 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a284:	b150      	cbz	r0, a29c <dw1000_read_rx+0x3e>
        inst->uwb_dev.status.mtx_error = 1;
    a286:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a28a:	f043 0308 	orr.w	r3, r3, #8
    a28e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a292:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a296:	b002      	add	sp, #8
    a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
    a29c:	9500      	str	r5, [sp, #0]
    a29e:	463b      	mov	r3, r7
    a2a0:	4632      	mov	r2, r6
    a2a2:	2111      	movs	r1, #17
    a2a4:	4620      	mov	r0, r4
    a2a6:	f7ff fa7b 	bl	97a0 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a2aa:	4640      	mov	r0, r8
    a2ac:	f003 fd88 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a2b0:	2800      	cmp	r0, #0
    a2b2:	d0ee      	beq.n	a292 <dw1000_read_rx+0x34>
    a2b4:	2300      	movs	r3, #0
    a2b6:	461a      	mov	r2, r3
    a2b8:	4619      	mov	r1, r3
    a2ba:	4618      	mov	r0, r3
    a2bc:	f003 f850 	bl	d360 <__assert_func>

0000a2c0 <dw1000_write_tx>:
{
    a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2c4:	b082      	sub	sp, #8
    a2c6:	4604      	mov	r4, r0
    a2c8:	460f      	mov	r7, r1
    a2ca:	4616      	mov	r6, r2
    a2cc:	461d      	mov	r5, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
    a2ce:	f8d0 25c8 	ldr.w	r2, [r0, #1480]	; 0x5c8
    a2d2:	441a      	add	r2, r3
    a2d4:	f8c0 25c8 	str.w	r2, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a2d8:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
    a2dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a2e0:	4640      	mov	r0, r8
    a2e2:	f003 fdc9 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a2e6:	b990      	cbnz	r0, a30e <dw1000_write_tx+0x4e>
    if ((txBufferOffset + txFrameLength) <= 1024){
    a2e8:	1973      	adds	r3, r6, r5
    a2ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a2ee:	dd15      	ble.n	a31c <dw1000_write_tx+0x5c>
        inst->uwb_dev.status.tx_frame_error = 1;
    a2f0:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a2f4:	f043 0310 	orr.w	r3, r3, #16
    a2f8:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a2fc:	4640      	mov	r0, r8
    a2fe:	f003 fd5f 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a302:	bb20      	cbnz	r0, a34e <dw1000_write_tx+0x8e>
}
    a304:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a308:	b002      	add	sp, #8
    a30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
    a30e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a312:	f043 0308 	orr.w	r3, r3, #8
    a316:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
    a31a:	e7f3      	b.n	a304 <dw1000_write_tx+0x44>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
    a31c:	9500      	str	r5, [sp, #0]
    a31e:	463b      	mov	r3, r7
    a320:	4632      	mov	r2, r6
    a322:	2109      	movs	r1, #9
    a324:	4620      	mov	r0, r4
    a326:	f7ff fa9f 	bl	9868 <dw1000_write>
        if (txBufferOffset == 0) {
    a32a:	b176      	cbz	r6, a34a <dw1000_write_tx+0x8a>
        inst->uwb_dev.status.tx_frame_error = 0;
    a32c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a330:	f36f 1304 	bfc	r3, #4, #1
    a334:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    a338:	e7e0      	b.n	a2fc <dw1000_write_tx+0x3c>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
    a33a:	5cf9      	ldrb	r1, [r7, r3]
    a33c:	18e2      	adds	r2, r4, r3
    a33e:	f882 14e0 	strb.w	r1, [r2, #1248]	; 0x4e0
            for (i = 0; i< sizeof(inst->uwb_dev.fctrl); i++)
    a342:	3301      	adds	r3, #1
    a344:	2b01      	cmp	r3, #1
    a346:	d9f8      	bls.n	a33a <dw1000_write_tx+0x7a>
    a348:	e7f0      	b.n	a32c <dw1000_write_tx+0x6c>
    a34a:	2300      	movs	r3, #0
    a34c:	e7fa      	b.n	a344 <dw1000_write_tx+0x84>
    assert(err == DPL_OK);
    a34e:	2300      	movs	r3, #0
    a350:	461a      	mov	r2, r3
    a352:	4619      	mov	r1, r3
    a354:	4618      	mov	r0, r3
    a356:	f003 f803 	bl	d360 <__assert_func>

0000a35a <dw1000_write_tx_fctrl>:
{
    a35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a35e:	b084      	sub	sp, #16
    a360:	4605      	mov	r5, r0
    a362:	460c      	mov	r4, r1
    a364:	4690      	mov	r8, r2
    a366:	461e      	mov	r6, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a368:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    a36c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a370:	4638      	mov	r0, r7
    a372:	f003 fd81 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a376:	bb08      	cbnz	r0, a3bc <dw1000_write_tx_fctrl+0x62>
    if (ext) {
    a378:	b33e      	cbz	r6, a3ca <dw1000_write_tx_fctrl+0x70>
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    a37a:	7873      	ldrb	r3, [r6, #1]
    a37c:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
    a380:	431a      	orrs	r2, r3
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
    a382:	7833      	ldrb	r3, [r6, #0]
    a384:	035b      	lsls	r3, r3, #13
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    a386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
    a38a:	78b2      	ldrb	r2, [r6, #2]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    a38c:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
    a390:	3402      	adds	r4, #2
    a392:	f3c4 0409 	ubfx	r4, r4, #0, #10
    a396:	ea44 5488 	orr.w	r4, r4, r8, lsl #22
    a39a:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
    a39c:	2304      	movs	r3, #4
    a39e:	9302      	str	r3, [sp, #8]
    a3a0:	2200      	movs	r2, #0
    a3a2:	9400      	str	r4, [sp, #0]
    a3a4:	9201      	str	r2, [sp, #4]
    a3a6:	2108      	movs	r1, #8
    a3a8:	4628      	mov	r0, r5
    a3aa:	f7ff fb33 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a3ae:	4638      	mov	r0, r7
    a3b0:	f003 fd06 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a3b4:	b960      	cbnz	r0, a3d0 <dw1000_write_tx_fctrl+0x76>
}
    a3b6:	b004      	add	sp, #16
    a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
    a3bc:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    a3c0:	f043 0308 	orr.w	r3, r3, #8
    a3c4:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto mtx_error;
    a3c8:	e7f5      	b.n	a3b6 <dw1000_write_tx_fctrl+0x5c>
        tx_fctrl_reg = inst->tx_fctrl;
    a3ca:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
    a3ce:	e7df      	b.n	a390 <dw1000_write_tx_fctrl+0x36>
    assert(err == DPL_OK);
    a3d0:	2300      	movs	r3, #0
    a3d2:	461a      	mov	r2, r3
    a3d4:	4619      	mov	r1, r3
    a3d6:	4618      	mov	r0, r3
    a3d8:	f002 ffc2 	bl	d360 <__assert_func>

0000a3dc <dw1000_start_tx>:
{
    a3dc:	b570      	push	{r4, r5, r6, lr}
    a3de:	b084      	sub	sp, #16
    a3e0:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    a3e2:	f500 66ac 	add.w	r6, r0, #1376	; 0x560
    a3e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a3ea:	4630      	mov	r0, r6
    a3ec:	f003 ffe0 	bl	e3b0 <os_sem_pend>
    if (err != DPL_OK) {
    a3f0:	2800      	cmp	r0, #0
    a3f2:	d144      	bne.n	a47e <dw1000_start_tx+0xa2>
    control = inst->control;
    a3f4:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
    a3f8:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    a3fc:	f013 0f20 	tst.w	r3, #32
    a400:	d144      	bne.n	a48c <dw1000_start_tx+0xb0>
    if (control.wait4resp_enabled){
    a402:	b2eb      	uxtb	r3, r5
    a404:	f015 0f01 	tst.w	r5, #1
    a408:	d14c      	bne.n	a4a4 <dw1000_start_tx+0xc8>
    sys_ctrl_reg = SYS_CTRL_TXSTRT;
    a40a:	2202      	movs	r2, #2
    if (control.delay_start_enabled)
    a40c:	f013 0504 	ands.w	r5, r3, #4
    a410:	d001      	beq.n	a416 <dw1000_start_tx+0x3a>
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
    a412:	f042 0204 	orr.w	r2, r2, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
    a416:	b2d3      	uxtb	r3, r2
    a418:	2201      	movs	r2, #1
    a41a:	9202      	str	r2, [sp, #8]
    a41c:	2200      	movs	r2, #0
    a41e:	9300      	str	r3, [sp, #0]
    a420:	9201      	str	r2, [sp, #4]
    a422:	210d      	movs	r1, #13
    a424:	4620      	mov	r0, r4
    a426:	f7ff faf5 	bl	9a14 <dw1000_write_reg>
    if (control.delay_start_enabled){
    a42a:	2d00      	cmp	r5, #0
    a42c:	d13c      	bne.n	a4a8 <dw1000_start_tx+0xcc>
        inst->uwb_dev.status.start_tx_error = 0;
    a42e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a432:	f36f 0382 	bfc	r3, #2, #1
    a436:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
    a43a:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
    a43e:	2b00      	cmp	r3, #0
    a440:	db5d      	blt.n	a4fe <dw1000_start_tx+0x122>
    inst->control.wait4resp_enabled = false;
    a442:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a446:	f36f 0300 	bfc	r3, #0, #1
    a44a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
    a44e:	b2db      	uxtb	r3, r3
    a450:	f36f 0341 	bfc	r3, #1, #1
    a454:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
    a458:	b2db      	uxtb	r3, r3
    a45a:	f36f 0382 	bfc	r3, #2, #1
    a45e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
    a462:	b2db      	uxtb	r3, r3
    a464:	f36f 03c3 	bfc	r3, #3, #1
    a468:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
    a46c:	b2db      	uxtb	r3, r3
    a46e:	f36f 1386 	bfc	r3, #6, #1
    a472:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
}
    a476:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a47a:	b004      	add	sp, #16
    a47c:	bd70      	pop	{r4, r5, r6, pc}
        inst->uwb_dev.status.sem_error = 1;
    a47e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a482:	f043 0304 	orr.w	r3, r3, #4
    a486:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto sem_error;
    a48a:	e7f4      	b.n	a476 <dw1000_start_tx+0x9a>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    a48c:	2301      	movs	r3, #1
    a48e:	9302      	str	r3, [sp, #8]
    a490:	2240      	movs	r2, #64	; 0x40
    a492:	2300      	movs	r3, #0
    a494:	e9cd 2300 	strd	r2, r3, [sp]
    a498:	2200      	movs	r2, #0
    a49a:	210d      	movs	r1, #13
    a49c:	4620      	mov	r0, r4
    a49e:	f7ff fab9 	bl	9a14 <dw1000_write_reg>
    a4a2:	e7ae      	b.n	a402 <dw1000_start_tx+0x26>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
    a4a4:	2282      	movs	r2, #130	; 0x82
    a4a6:	e7b1      	b.n	a40c <dw1000_start_tx+0x30>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
    a4a8:	2302      	movs	r3, #2
    a4aa:	2203      	movs	r2, #3
    a4ac:	210f      	movs	r1, #15
    a4ae:	4620      	mov	r0, r4
    a4b0:	f7ff fa40 	bl	9934 <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
    a4b4:	f410 6f81 	tst.w	r0, #1032	; 0x408
    a4b8:	bf14      	ite	ne
    a4ba:	2201      	movne	r2, #1
    a4bc:	2200      	moveq	r2, #0
    a4be:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a4c2:	f362 0382 	bfi	r3, r2, #2, #1
    a4c6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
    a4ca:	b2db      	uxtb	r3, r3
    a4cc:	f013 0f04 	tst.w	r3, #4
    a4d0:	d0b3      	beq.n	a43a <dw1000_start_tx+0x5e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    a4d2:	2301      	movs	r3, #1
    a4d4:	9302      	str	r3, [sp, #8]
    a4d6:	2240      	movs	r2, #64	; 0x40
    a4d8:	2300      	movs	r3, #0
    a4da:	e9cd 2300 	strd	r2, r3, [sp]
    a4de:	2200      	movs	r2, #0
    a4e0:	210d      	movs	r1, #13
    a4e2:	4620      	mov	r0, r4
    a4e4:	f7ff fa96 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
    a4e8:	4630      	mov	r0, r6
    a4ea:	f003 ff2f 	bl	e34c <os_sem_release>
            assert(err == DPL_OK);
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d0a3      	beq.n	a43a <dw1000_start_tx+0x5e>
    a4f2:	2300      	movs	r3, #0
    a4f4:	461a      	mov	r2, r3
    a4f6:	4619      	mov	r1, r3
    a4f8:	4618      	mov	r0, r3
    a4fa:	f002 ff31 	bl	d360 <__assert_func>
        inst->uwb_dev.status.sleeping = 1;
    a4fe:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    a502:	f043 0301 	orr.w	r3, r3, #1
    a506:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    a50a:	4630      	mov	r0, r6
    a50c:	f003 ff1e 	bl	e34c <os_sem_release>
    a510:	e797      	b.n	a442 <dw1000_start_tx+0x66>

0000a512 <dw1000_tx_wait>:
{
    a512:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    a514:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
    a518:	4620      	mov	r0, r4
    a51a:	f003 ff49 	bl	e3b0 <os_sem_pend>
    if (rc == DPL_OK) {
    a51e:	b100      	cbz	r0, a522 <dw1000_tx_wait+0x10>
}
    a520:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    a522:	4620      	mov	r0, r4
    a524:	f003 ff12 	bl	e34c <os_sem_release>
    return rc;
    a528:	e7fa      	b.n	a520 <dw1000_tx_wait+0xe>

0000a52a <dw1000_set_delay_start>:
{
    a52a:	b5f0      	push	{r4, r5, r6, r7, lr}
    a52c:	b085      	sub	sp, #20
    a52e:	4604      	mov	r4, r0
    a530:	4616      	mov	r6, r2
    a532:	461d      	mov	r5, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a534:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    a538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a53c:	4638      	mov	r0, r7
    a53e:	f003 fc9b 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a542:	b148      	cbz	r0, a558 <dw1000_set_delay_start+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
    a544:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a548:	f043 0308 	orr.w	r3, r3, #8
    a54c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a550:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a554:	b005      	add	sp, #20
    a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->control.delay_start_enabled = true;
    a558:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a55c:	f043 0304 	orr.w	r3, r3, #4
    a560:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
    a564:	2304      	movs	r3, #4
    a566:	9302      	str	r3, [sp, #8]
    a568:	0a36      	lsrs	r6, r6, #8
    a56a:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    a56e:	0a2d      	lsrs	r5, r5, #8
    a570:	9600      	str	r6, [sp, #0]
    a572:	9501      	str	r5, [sp, #4]
    a574:	2201      	movs	r2, #1
    a576:	210a      	movs	r1, #10
    a578:	4620      	mov	r0, r4
    a57a:	f7ff fa4b 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a57e:	4638      	mov	r0, r7
    a580:	f003 fc1e 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a584:	2800      	cmp	r0, #0
    a586:	d0e3      	beq.n	a550 <dw1000_set_delay_start+0x26>
    a588:	2300      	movs	r3, #0
    a58a:	461a      	mov	r2, r3
    a58c:	4619      	mov	r1, r3
    a58e:	4618      	mov	r0, r3
    a590:	f002 fee6 	bl	d360 <__assert_func>

0000a594 <dw1000_start_rx>:
{
    a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a598:	b084      	sub	sp, #16
    a59a:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a59c:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    a5a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5a4:	4638      	mov	r0, r7
    a5a6:	f003 fc67 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a5aa:	2800      	cmp	r0, #0
    a5ac:	d157      	bne.n	a65e <dw1000_start_rx+0xca>
    control = inst->control;
    a5ae:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
    a5b2:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    a5b6:	f36f 03c3 	bfc	r3, #3, #1
    a5ba:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
    a5be:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    a5c2:	f013 0f20 	tst.w	r3, #32
    a5c6:	d151      	bne.n	a66c <dw1000_start_rx+0xd8>
    if (config->dblbuffon_enabled) {
    a5c8:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    a5cc:	f013 0f10 	tst.w	r3, #16
    a5d0:	d161      	bne.n	a696 <dw1000_start_rx+0x102>
    if (control.delay_start_enabled)
    a5d2:	fa5f f885 	uxtb.w	r8, r5
    a5d6:	f015 0504 	ands.w	r5, r5, #4
    a5da:	d17a      	bne.n	a6d2 <dw1000_start_rx+0x13e>
    sys_ctrl = SYS_CTRL_RXENAB;
    a5dc:	f44f 7680 	mov.w	r6, #256	; 0x100
    if (control.wait4resp_enabled) {
    a5e0:	f018 0f01 	tst.w	r8, #1
    a5e4:	d001      	beq.n	a5ea <dw1000_start_rx+0x56>
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
    a5e6:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
    a5ea:	2302      	movs	r3, #2
    a5ec:	9302      	str	r3, [sp, #8]
    a5ee:	2200      	movs	r2, #0
    a5f0:	9600      	str	r6, [sp, #0]
    a5f2:	9201      	str	r2, [sp, #4]
    a5f4:	210d      	movs	r1, #13
    a5f6:	4620      	mov	r0, r4
    a5f8:	f7ff fa0c 	bl	9a14 <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
    a5fc:	2d00      	cmp	r5, #0
    a5fe:	d16b      	bne.n	a6d8 <dw1000_start_rx+0x144>
        inst->uwb_dev.status.start_rx_error = 0;
    a600:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a604:	f36f 03c3 	bfc	r3, #3, #1
    a608:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    inst->control.wait4resp_enabled = false;
    a60c:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a610:	f36f 0300 	bfc	r3, #0, #1
    a614:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
    a618:	b2db      	uxtb	r3, r3
    a61a:	f36f 0341 	bfc	r3, #1, #1
    a61e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
    a622:	b2db      	uxtb	r3, r3
    a624:	f36f 0382 	bfc	r3, #2, #1
    a628:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
    a62c:	b2db      	uxtb	r3, r3
    a62e:	f36f 03c3 	bfc	r3, #3, #1
    a632:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.start_rx_syncbuf_enabled = false;
    a636:	b2db      	uxtb	r3, r3
    a638:	f36f 1304 	bfc	r3, #4, #1
    a63c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
    a640:	b2db      	uxtb	r3, r3
    a642:	f36f 1386 	bfc	r3, #6, #1
    a646:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a64a:	4638      	mov	r0, r7
    a64c:	f003 fbb8 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a650:	2800      	cmp	r0, #0
    a652:	d16f      	bne.n	a734 <dw1000_start_rx+0x1a0>
}
    a654:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a658:	b004      	add	sp, #16
    a65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
    a65e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a662:	f043 0308 	orr.w	r3, r3, #8
    a666:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
    a66a:	e7f3      	b.n	a654 <dw1000_start_rx+0xc0>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
    a66c:	2301      	movs	r3, #1
    a66e:	2202      	movs	r2, #2
    a670:	2119      	movs	r1, #25
    a672:	4620      	mov	r0, r4
    a674:	f7ff f95e 	bl	9934 <dw1000_read_reg>
    a678:	b2c0      	uxtb	r0, r0
        if(state != PMSC_STATE_IDLE){
    a67a:	2801      	cmp	r0, #1
    a67c:	d0a4      	beq.n	a5c8 <dw1000_start_rx+0x34>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    a67e:	2301      	movs	r3, #1
    a680:	9302      	str	r3, [sp, #8]
    a682:	2240      	movs	r2, #64	; 0x40
    a684:	2300      	movs	r3, #0
    a686:	e9cd 2300 	strd	r2, r3, [sp]
    a68a:	2200      	movs	r2, #0
    a68c:	210d      	movs	r1, #13
    a68e:	4620      	mov	r0, r4
    a690:	f7ff f9c0 	bl	9a14 <dw1000_write_reg>
    a694:	e798      	b.n	a5c8 <dw1000_start_rx+0x34>
    inst->control.start_rx_syncbuf_enabled = 1;
    a696:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a69a:	f043 0310 	orr.w	r3, r3, #16
    a69e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    a6a2:	2301      	movs	r3, #1
    a6a4:	2203      	movs	r2, #3
    a6a6:	210f      	movs	r1, #15
    a6a8:	4620      	mov	r0, r4
    a6aa:	f7ff f943 	bl	9934 <dw1000_read_reg>
    a6ae:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    a6b0:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    a6b4:	f010 0f80 	tst.w	r0, #128	; 0x80
    a6b8:	d08b      	beq.n	a5d2 <dw1000_start_rx+0x3e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    a6ba:	2301      	movs	r3, #1
    a6bc:	9302      	str	r3, [sp, #8]
    a6be:	2201      	movs	r2, #1
    a6c0:	2300      	movs	r3, #0
    a6c2:	e9cd 2300 	strd	r2, r3, [sp]
    a6c6:	2203      	movs	r2, #3
    a6c8:	210d      	movs	r1, #13
    a6ca:	4620      	mov	r0, r4
    a6cc:	f7ff f9a2 	bl	9a14 <dw1000_write_reg>
    return inst->uwb_dev.status;
    a6d0:	e77f      	b.n	a5d2 <dw1000_start_rx+0x3e>
        sys_ctrl |= SYS_CTRL_RXDLYE;
    a6d2:	f44f 7640 	mov.w	r6, #768	; 0x300
    a6d6:	e783      	b.n	a5e0 <dw1000_start_rx+0x4c>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
    a6d8:	2301      	movs	r3, #1
    a6da:	2203      	movs	r2, #3
    a6dc:	210f      	movs	r1, #15
    a6de:	4620      	mov	r0, r4
    a6e0:	f7ff f928 	bl	9934 <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
    a6e4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    a6e8:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a6ec:	f360 03c3 	bfi	r3, r0, #3, #1
    a6f0:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
    a6f4:	b2db      	uxtb	r3, r3
    a6f6:	f013 0f08 	tst.w	r3, #8
    a6fa:	d087      	beq.n	a60c <dw1000_start_rx+0x78>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
    a6fc:	2301      	movs	r3, #1
    a6fe:	9302      	str	r3, [sp, #8]
    a700:	2240      	movs	r2, #64	; 0x40
    a702:	2300      	movs	r3, #0
    a704:	e9cd 2300 	strd	r2, r3, [sp]
    a708:	2200      	movs	r2, #0
    a70a:	210d      	movs	r1, #13
    a70c:	4620      	mov	r0, r4
    a70e:	f7ff f981 	bl	9a14 <dw1000_write_reg>
            if (control.on_error_continue_enabled){
    a712:	f018 0f40 	tst.w	r8, #64	; 0x40
    a716:	f43f af79 	beq.w	a60c <dw1000_start_rx+0x78>
                sys_ctrl &= ~SYS_CTRL_RXDLYE;
    a71a:	f426 7600 	bic.w	r6, r6, #512	; 0x200
    a71e:	b2b6      	uxth	r6, r6
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
    a720:	2302      	movs	r3, #2
    a722:	9302      	str	r3, [sp, #8]
    a724:	2200      	movs	r2, #0
    a726:	9600      	str	r6, [sp, #0]
    a728:	9201      	str	r2, [sp, #4]
    a72a:	210d      	movs	r1, #13
    a72c:	4620      	mov	r0, r4
    a72e:	f7ff f971 	bl	9a14 <dw1000_write_reg>
    a732:	e76b      	b.n	a60c <dw1000_start_rx+0x78>
    assert(err == DPL_OK);
    a734:	2300      	movs	r3, #0
    a736:	461a      	mov	r2, r3
    a738:	4619      	mov	r1, r3
    a73a:	4618      	mov	r0, r3
    a73c:	f002 fe10 	bl	d360 <__assert_func>

0000a740 <dw1000_stop_rx>:
{
    a740:	b5f0      	push	{r4, r5, r6, r7, lr}
    a742:	b085      	sub	sp, #20
    a744:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a746:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
    a74a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a74e:	4628      	mov	r0, r5
    a750:	f003 fb92 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a754:	b148      	cbz	r0, a76a <dw1000_stop_rx+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
    a756:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a75a:	f043 0308 	orr.w	r3, r3, #8
    a75e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a762:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a766:	b005      	add	sp, #20
    a768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    a76a:	2304      	movs	r3, #4
    a76c:	2200      	movs	r2, #0
    a76e:	210e      	movs	r1, #14
    a770:	4620      	mov	r0, r4
    a772:	f7ff f8df 	bl	9934 <dw1000_read_reg>
    a776:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
    a778:	2704      	movs	r7, #4
    a77a:	9702      	str	r7, [sp, #8]
    a77c:	2200      	movs	r2, #0
    a77e:	2300      	movs	r3, #0
    a780:	e9cd 2300 	strd	r2, r3, [sp]
    a784:	210e      	movs	r1, #14
    a786:	4620      	mov	r0, r4
    a788:	f7ff f944 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
    a78c:	2301      	movs	r3, #1
    a78e:	9302      	str	r3, [sp, #8]
    a790:	2240      	movs	r2, #64	; 0x40
    a792:	2300      	movs	r3, #0
    a794:	e9cd 2300 	strd	r2, r3, [sp]
    a798:	2200      	movs	r2, #0
    a79a:	210d      	movs	r1, #13
    a79c:	4620      	mov	r0, r4
    a79e:	f7ff f939 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
    a7a2:	9702      	str	r7, [sp, #8]
    a7a4:	a30e      	add	r3, pc, #56	; (adr r3, a7e0 <dw1000_stop_rx+0xa0>)
    a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7aa:	e9cd 2300 	strd	r2, r3, [sp]
    a7ae:	2200      	movs	r2, #0
    a7b0:	210f      	movs	r1, #15
    a7b2:	4620      	mov	r0, r4
    a7b4:	f7ff f92e 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
    a7b8:	9702      	str	r7, [sp, #8]
    a7ba:	2200      	movs	r2, #0
    a7bc:	9600      	str	r6, [sp, #0]
    a7be:	9201      	str	r2, [sp, #4]
    a7c0:	210e      	movs	r1, #14
    a7c2:	4620      	mov	r0, r4
    a7c4:	f7ff f926 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a7c8:	4628      	mov	r0, r5
    a7ca:	f003 faf9 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a7ce:	2800      	cmp	r0, #0
    a7d0:	d0c7      	beq.n	a762 <dw1000_stop_rx+0x22>
    a7d2:	2300      	movs	r3, #0
    a7d4:	461a      	mov	r2, r3
    a7d6:	4619      	mov	r1, r3
    a7d8:	4618      	mov	r0, r3
    a7da:	f002 fdc1 	bl	d360 <__assert_func>
    a7de:	bf00      	nop
    a7e0:	2433fbf8 	.word	0x2433fbf8
    a7e4:	00000000 	.word	0x00000000

0000a7e8 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
    a7e8:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
    a7ec:	f36f 03c3 	bfc	r3, #3, #1
    a7f0:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
    a7f4:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
    a7f8:	f361 0300 	bfi	r3, r1, #0, #1
    a7fc:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
    a800:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a804:	4770      	bx	lr

0000a806 <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
    a806:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
    a80a:	f361 1386 	bfi	r3, r1, #6, #1
    a80e:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
    a812:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a816:	4770      	bx	lr

0000a818 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
    a818:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
    a81c:	f361 0382 	bfi	r3, r1, #2, #1
    a820:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
    a824:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a828:	4770      	bx	lr

0000a82a <dw1000_adj_rx_timeout>:
{
    a82a:	b510      	push	{r4, lr}
    a82c:	b084      	sub	sp, #16
    a82e:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
    a830:	2302      	movs	r3, #2
    a832:	9302      	str	r3, [sp, #8]
    a834:	2200      	movs	r2, #0
    a836:	9100      	str	r1, [sp, #0]
    a838:	9201      	str	r2, [sp, #4]
    a83a:	210c      	movs	r1, #12
    a83c:	f7ff f8ea 	bl	9a14 <dw1000_write_reg>
}
    a840:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a844:	b004      	add	sp, #16
    a846:	bd10      	pop	{r4, pc}

0000a848 <update_rx_window_timeout>:
{
    a848:	b538      	push	{r3, r4, r5, lr}
    a84a:	4605      	mov	r5, r0
    a84c:	4610      	mov	r0, r2
    a84e:	4619      	mov	r1, r3
    uint32_t timeout = calc_rx_window_timeout(rel_start, inst->uwb_dev.abs_timeout);
    a850:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
    a854:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    a858:	f7ff fcd2 	bl	a200 <calc_rx_window_timeout>
    a85c:	4604      	mov	r4, r0
    dw1000_adj_rx_timeout(inst, timeout);
    a85e:	4601      	mov	r1, r0
    a860:	4628      	mov	r0, r5
    a862:	f7ff ffe2 	bl	a82a <dw1000_adj_rx_timeout>
}
    a866:	4620      	mov	r0, r4
    a868:	bd38      	pop	{r3, r4, r5, pc}

0000a86a <dw1000_set_rx_timeout>:
{
    a86a:	b5f0      	push	{r4, r5, r6, r7, lr}
    a86c:	b085      	sub	sp, #20
    a86e:	4604      	mov	r4, r0
    a870:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a872:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    a876:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a87a:	4638      	mov	r0, r7
    a87c:	f003 fafc 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a880:	b148      	cbz	r0, a896 <dw1000_set_rx_timeout+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    a882:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a886:	f043 0308 	orr.w	r3, r3, #8
    a88a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a88e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a892:	b005      	add	sp, #20
    a894:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
    a896:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    a89a:	f36f 13c7 	bfc	r3, #7, #1
    a89e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
    a8a2:	2301      	movs	r3, #1
    a8a4:	2203      	movs	r2, #3
    a8a6:	2104      	movs	r1, #4
    a8a8:	4620      	mov	r0, r4
    a8aa:	f7ff f843 	bl	9934 <dw1000_read_reg>
    a8ae:	b2c5      	uxtb	r5, r0
    inst->control.rx_timeout_enabled = timeout > 0;
    a8b0:	1e32      	subs	r2, r6, #0
    a8b2:	bf18      	it	ne
    a8b4:	2201      	movne	r2, #1
    a8b6:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    a8ba:	f362 1345 	bfi	r3, r2, #5, #1
    a8be:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
    a8c2:	b2db      	uxtb	r3, r3
    a8c4:	f013 0f20 	tst.w	r3, #32
    a8c8:	d10e      	bne.n	a8e8 <dw1000_set_rx_timeout+0x7e>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
    a8ca:	f005 03ef 	and.w	r3, r5, #239	; 0xef
    if (sys_cfg_reg != new_reg_val) {
    a8ce:	42ab      	cmp	r3, r5
    a8d0:	d116      	bne.n	a900 <dw1000_set_rx_timeout+0x96>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    a8d2:	4638      	mov	r0, r7
    a8d4:	f003 fa74 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    a8d8:	2800      	cmp	r0, #0
    a8da:	d0d8      	beq.n	a88e <dw1000_set_rx_timeout+0x24>
    a8dc:	2300      	movs	r3, #0
    a8de:	461a      	mov	r2, r3
    a8e0:	4619      	mov	r1, r3
    a8e2:	4618      	mov	r0, r3
    a8e4:	f002 fd3c 	bl	d360 <__assert_func>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
    a8e8:	2302      	movs	r3, #2
    a8ea:	9302      	str	r3, [sp, #8]
    a8ec:	2200      	movs	r2, #0
    a8ee:	9600      	str	r6, [sp, #0]
    a8f0:	9201      	str	r2, [sp, #4]
    a8f2:	210c      	movs	r1, #12
    a8f4:	4620      	mov	r0, r4
    a8f6:	f7ff f88d 	bl	9a14 <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
    a8fa:	f045 0310 	orr.w	r3, r5, #16
    a8fe:	e7e6      	b.n	a8ce <dw1000_set_rx_timeout+0x64>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
    a900:	2201      	movs	r2, #1
    a902:	9202      	str	r2, [sp, #8]
    a904:	9300      	str	r3, [sp, #0]
    a906:	2300      	movs	r3, #0
    a908:	9301      	str	r3, [sp, #4]
    a90a:	2203      	movs	r2, #3
    a90c:	2104      	movs	r1, #4
    a90e:	4620      	mov	r0, r4
    a910:	f7ff f880 	bl	9a14 <dw1000_write_reg>
    a914:	e7dd      	b.n	a8d2 <dw1000_set_rx_timeout+0x68>

0000a916 <dw1000_set_rx_window>:
{
    a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a91a:	4604      	mov	r4, r0
    a91c:	4690      	mov	r8, r2
    a91e:	461d      	mov	r5, r3
    a920:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    dw1000_set_delay_start(inst, rx_start);
    a924:	f7ff fe01 	bl	a52a <dw1000_set_delay_start>
    timeout = calc_rx_window_timeout(rx_start, rx_end);
    a928:	4632      	mov	r2, r6
    a92a:	463b      	mov	r3, r7
    a92c:	4640      	mov	r0, r8
    a92e:	4629      	mov	r1, r5
    a930:	f7ff fc66 	bl	a200 <calc_rx_window_timeout>
    a934:	4601      	mov	r1, r0
    inst->control.abs_timeout = 1;
    a936:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    a93a:	f043 0308 	orr.w	r3, r3, #8
    a93e:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
    a942:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
    a946:	e943 6702 	strd	r6, r7, [r3, #-8]
    dw1000_set_rx_timeout(inst, timeout);
    a94a:	4620      	mov	r0, r4
    a94c:	f7ff ff8d 	bl	a86a <dw1000_set_rx_timeout>
}
    a950:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a958 <dw1000_set_abs_timeout>:
{
    a958:	b430      	push	{r4, r5}
    a95a:	4614      	mov	r4, r2
    a95c:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
    a95e:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
    a962:	f043 0308 	orr.w	r3, r3, #8
    a966:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
    a96a:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
    a96e:	e943 4502 	strd	r4, r5, [r3, #-8]
}
    a972:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    a976:	bc30      	pop	{r4, r5}
    a978:	4770      	bx	lr

0000a97a <dw1000_sync_rxbufptrs>:
{
    a97a:	b510      	push	{r4, lr}
    a97c:	b084      	sub	sp, #16
    a97e:	4604      	mov	r4, r0
    inst->control.start_rx_syncbuf_enabled = 1;
    a980:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
    a984:	f043 0310 	orr.w	r3, r3, #16
    a988:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    a98c:	2301      	movs	r3, #1
    a98e:	2203      	movs	r2, #3
    a990:	210f      	movs	r1, #15
    a992:	f7fe ffcf 	bl	9934 <dw1000_read_reg>
    a996:	b2c3      	uxtb	r3, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    a998:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    a99c:	f013 0f80 	tst.w	r3, #128	; 0x80
    a9a0:	d103      	bne.n	a9aa <dw1000_sync_rxbufptrs+0x30>
}
    a9a2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a9a6:	b004      	add	sp, #16
    a9a8:	bd10      	pop	{r4, pc}
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    a9aa:	2301      	movs	r3, #1
    a9ac:	9302      	str	r3, [sp, #8]
    a9ae:	2201      	movs	r2, #1
    a9b0:	2300      	movs	r3, #0
    a9b2:	e9cd 2300 	strd	r2, r3, [sp]
    a9b6:	2203      	movs	r2, #3
    a9b8:	210d      	movs	r1, #13
    a9ba:	4620      	mov	r0, r4
    a9bc:	f7ff f82a 	bl	9a14 <dw1000_write_reg>
    a9c0:	e7ef      	b.n	a9a2 <dw1000_sync_rxbufptrs+0x28>
	...

0000a9c4 <dw1000_mac_framefilter>:
{
    a9c4:	b570      	push	{r4, r5, r6, lr}
    a9c6:	b084      	sub	sp, #16
    a9c8:	4604      	mov	r4, r0
    a9ca:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    a9cc:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    a9d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a9d4:	4630      	mov	r0, r6
    a9d6:	f003 fa4f 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    a9da:	b148      	cbz	r0, a9f0 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    a9dc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    a9e0:	f043 0308 	orr.w	r3, r3, #8
    a9e4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    a9e8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    a9ec:	b004      	add	sp, #16
    a9ee:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
    a9f0:	2304      	movs	r3, #4
    a9f2:	2200      	movs	r2, #0
    a9f4:	4619      	mov	r1, r3
    a9f6:	4620      	mov	r0, r4
    a9f8:	f7fe ff9c 	bl	9934 <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
    a9fc:	f8a4 551c 	strh.w	r5, [r4, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
    aa00:	b1cd      	cbz	r5, aa36 <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
    aa02:	4b0e      	ldr	r3, [pc, #56]	; (aa3c <dw1000_mac_framefilter+0x78>)
    aa04:	4003      	ands	r3, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
    aa06:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    aa0a:	431d      	orrs	r5, r3
    aa0c:	f045 0501 	orr.w	r5, r5, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    aa10:	2104      	movs	r1, #4
    aa12:	9102      	str	r1, [sp, #8]
    aa14:	2200      	movs	r2, #0
    aa16:	9500      	str	r5, [sp, #0]
    aa18:	9201      	str	r2, [sp, #4]
    aa1a:	4620      	mov	r0, r4
    aa1c:	f7fe fffa 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    aa20:	4630      	mov	r0, r6
    aa22:	f003 f9cd 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    aa26:	2800      	cmp	r0, #0
    aa28:	d0de      	beq.n	a9e8 <dw1000_mac_framefilter+0x24>
    aa2a:	2300      	movs	r3, #0
    aa2c:	461a      	mov	r2, r3
    aa2e:	4619      	mov	r1, r3
    aa30:	4618      	mov	r0, r3
    aa32:	f002 fc95 	bl	d360 <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
    aa36:	4d02      	ldr	r5, [pc, #8]	; (aa40 <dw1000_mac_framefilter+0x7c>)
    aa38:	4005      	ands	r5, r0
    aa3a:	e7e9      	b.n	aa10 <dw1000_mac_framefilter+0x4c>
    aa3c:	f047fe01 	.word	0xf047fe01
    aa40:	f047fffe 	.word	0xf047fffe

0000aa44 <dw1000_set_autoack>:
{
    aa44:	b570      	push	{r4, r5, r6, lr}
    aa46:	b084      	sub	sp, #16
    aa48:	4604      	mov	r4, r0
    aa4a:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    aa4c:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    aa50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa54:	4630      	mov	r0, r6
    aa56:	f003 fa0f 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    aa5a:	b148      	cbz	r0, aa70 <dw1000_set_autoack+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    aa5c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    aa60:	f043 0308 	orr.w	r3, r3, #8
    aa64:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    aa68:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    aa6c:	b004      	add	sp, #16
    aa6e:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
    aa70:	2304      	movs	r3, #4
    aa72:	2200      	movs	r2, #0
    aa74:	4619      	mov	r1, r3
    aa76:	4620      	mov	r0, r4
    aa78:	f7fe ff5c 	bl	9934 <dw1000_read_reg>
    aa7c:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
    aa80:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.autoack_enabled = enable;
    aa84:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
    aa88:	f365 0282 	bfi	r2, r5, #2, #1
    aa8c:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
    aa90:	b2d2      	uxtb	r2, r2
    aa92:	f012 0f04 	tst.w	r2, #4
    aa96:	d014      	beq.n	aac2 <dw1000_set_autoack+0x7e>
        sys_cfg_reg |= SYS_CFG_AUTOACK;
    aa98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    aa9c:	2104      	movs	r1, #4
    aa9e:	9102      	str	r1, [sp, #8]
    aaa0:	2200      	movs	r2, #0
    aaa2:	9300      	str	r3, [sp, #0]
    aaa4:	9201      	str	r2, [sp, #4]
    aaa6:	4620      	mov	r0, r4
    aaa8:	f7fe ffb4 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    aaac:	4630      	mov	r0, r6
    aaae:	f003 f987 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    aab2:	2800      	cmp	r0, #0
    aab4:	d0d8      	beq.n	aa68 <dw1000_set_autoack+0x24>
    aab6:	2300      	movs	r3, #0
    aab8:	461a      	mov	r2, r3
    aaba:	4619      	mov	r1, r3
    aabc:	4618      	mov	r0, r3
    aabe:	f002 fc4f 	bl	d360 <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
    aac2:	f020 409f 	bic.w	r0, r0, #1333788672	; 0x4f800000
    aac6:	f420 1060 	bic.w	r0, r0, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
    aaca:	2104      	movs	r1, #4
    aacc:	9102      	str	r1, [sp, #8]
    aace:	2200      	movs	r2, #0
    aad0:	9000      	str	r0, [sp, #0]
    aad2:	9201      	str	r2, [sp, #4]
    aad4:	4620      	mov	r0, r4
    aad6:	f7fe ff9d 	bl	9a14 <dw1000_write_reg>
    aada:	e7e7      	b.n	aaac <dw1000_set_autoack+0x68>

0000aadc <dw1000_set_autoack_delay>:
{
    aadc:	b530      	push	{r4, r5, lr}
    aade:	b085      	sub	sp, #20
    aae0:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
    aae2:	2501      	movs	r5, #1
    aae4:	9502      	str	r5, [sp, #8]
    aae6:	9100      	str	r1, [sp, #0]
    aae8:	2300      	movs	r3, #0
    aaea:	9301      	str	r3, [sp, #4]
    aaec:	2203      	movs	r2, #3
    aaee:	211a      	movs	r1, #26
    aaf0:	f7fe ff90 	bl	9a14 <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
    aaf4:	4629      	mov	r1, r5
    aaf6:	4620      	mov	r0, r4
    aaf8:	f7ff ffa4 	bl	aa44 <dw1000_set_autoack>
}
    aafc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    ab00:	b005      	add	sp, #20
    ab02:	bd30      	pop	{r4, r5, pc}

0000ab04 <dw1000_set_wait4resp_delay>:
{
    ab04:	b570      	push	{r4, r5, r6, lr}
    ab06:	b084      	sub	sp, #16
    ab08:	4604      	mov	r4, r0
    ab0a:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    ab0c:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
    ab10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ab14:	4628      	mov	r0, r5
    ab16:	f003 f9af 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    ab1a:	b148      	cbz	r0, ab30 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    ab1c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    ab20:	f043 0308 	orr.w	r3, r3, #8
    ab24:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    ab28:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    ab2c:	b004      	add	sp, #16
    ab2e:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
    ab30:	2304      	movs	r3, #4
    ab32:	2200      	movs	r2, #0
    ab34:	211a      	movs	r1, #26
    ab36:	4620      	mov	r0, r4
    ab38:	f7fe fefc 	bl	9934 <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
    ab3c:	1e32      	subs	r2, r6, #0
    ab3e:	bf18      	it	ne
    ab40:	2201      	movne	r2, #1
    ab42:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    ab46:	f362 0341 	bfi	r3, r2, #1, #1
    ab4a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
    ab4e:	b2db      	uxtb	r3, r3
    ab50:	f013 0f02 	tst.w	r3, #2
    ab54:	d102      	bne.n	ab5c <dw1000_set_wait4resp_delay+0x58>
    ab56:	f3c0 0313 	ubfx	r3, r0, #0, #20
    ab5a:	b16b      	cbz	r3, ab78 <dw1000_set_wait4resp_delay+0x74>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
    ab5c:	0d00      	lsrs	r0, r0, #20
    ab5e:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
    ab60:	f3c6 0113 	ubfx	r1, r6, #0, #20
    ab64:	4308      	orrs	r0, r1
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
    ab66:	2304      	movs	r3, #4
    ab68:	9302      	str	r3, [sp, #8]
    ab6a:	2200      	movs	r2, #0
    ab6c:	9000      	str	r0, [sp, #0]
    ab6e:	9201      	str	r2, [sp, #4]
    ab70:	211a      	movs	r1, #26
    ab72:	4620      	mov	r0, r4
    ab74:	f7fe ff4e 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    ab78:	4628      	mov	r0, r5
    ab7a:	f003 f921 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    ab7e:	2800      	cmp	r0, #0
    ab80:	d0d2      	beq.n	ab28 <dw1000_set_wait4resp_delay+0x24>
    ab82:	2300      	movs	r3, #0
    ab84:	461a      	mov	r2, r3
    ab86:	4619      	mov	r1, r3
    ab88:	4618      	mov	r0, r3
    ab8a:	f002 fbe9 	bl	d360 <__assert_func>

0000ab8e <dw1000_set_dblrxbuff>:
{
    ab8e:	b570      	push	{r4, r5, r6, lr}
    ab90:	b084      	sub	sp, #16
    ab92:	4604      	mov	r4, r0
    ab94:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    ab96:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
    ab9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ab9e:	4630      	mov	r0, r6
    aba0:	f003 f96a 	bl	de78 <os_mutex_pend>
    if (err != DPL_OK) {
    aba4:	b148      	cbz	r0, abba <dw1000_set_dblrxbuff+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
    aba6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    abaa:	f043 0308 	orr.w	r3, r3, #8
    abae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
    abb2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    abb6:	b004      	add	sp, #16
    abb8:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
    abba:	2304      	movs	r3, #4
    abbc:	2200      	movs	r2, #0
    abbe:	4619      	mov	r1, r3
    abc0:	4620      	mov	r0, r4
    abc2:	f7fe feb7 	bl	9934 <dw1000_read_reg>
    abc6:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
    abca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
    abce:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
    abd2:	f365 1204 	bfi	r2, r5, #4, #1
    abd6:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
    abda:	b2d2      	uxtb	r2, r2
    abdc:	f012 0f10 	tst.w	r2, #16
    abe0:	d028      	beq.n	ac34 <dw1000_set_dblrxbuff+0xa6>
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
    abe2:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
    abe6:	f423 2301 	bic.w	r3, r3, #528384	; 0x81000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
    abea:	2104      	movs	r1, #4
    abec:	9102      	str	r1, [sp, #8]
    abee:	2200      	movs	r2, #0
    abf0:	9300      	str	r3, [sp, #0]
    abf2:	9201      	str	r2, [sp, #4]
    abf4:	4620      	mov	r0, r4
    abf6:	f7fe ff0d 	bl	9a14 <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
    abfa:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    abfe:	f043 0310 	orr.w	r3, r3, #16
    ac02:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    ac06:	2301      	movs	r3, #1
    ac08:	2203      	movs	r2, #3
    ac0a:	210f      	movs	r1, #15
    ac0c:	4620      	mov	r0, r4
    ac0e:	f7fe fe91 	bl	9934 <dw1000_read_reg>
    ac12:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    ac14:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    ac18:	f010 0f80 	tst.w	r0, #128	; 0x80
    ac1c:	d10d      	bne.n	ac3a <dw1000_set_dblrxbuff+0xac>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    ac1e:	4630      	mov	r0, r6
    ac20:	f003 f8ce 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    ac24:	2800      	cmp	r0, #0
    ac26:	d0c4      	beq.n	abb2 <dw1000_set_dblrxbuff+0x24>
    ac28:	2300      	movs	r3, #0
    ac2a:	461a      	mov	r2, r3
    ac2c:	4619      	mov	r1, r3
    ac2e:	4618      	mov	r0, r3
    ac30:	f002 fb96 	bl	d360 <__assert_func>
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
    ac34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ac38:	e7d7      	b.n	abea <dw1000_set_dblrxbuff+0x5c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    ac3a:	2301      	movs	r3, #1
    ac3c:	9302      	str	r3, [sp, #8]
    ac3e:	2201      	movs	r2, #1
    ac40:	2300      	movs	r3, #0
    ac42:	e9cd 2300 	strd	r2, r3, [sp]
    ac46:	2203      	movs	r2, #3
    ac48:	210d      	movs	r1, #13
    ac4a:	4620      	mov	r0, r4
    ac4c:	f7fe fee2 	bl	9a14 <dw1000_write_reg>
    ac50:	e7e5      	b.n	ac1e <dw1000_set_dblrxbuff+0x90>
    ac52:	0000      	movs	r0, r0
    ac54:	0000      	movs	r0, r0
	...

0000ac58 <dw1000_mac_config>:
{
    ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac5c:	b087      	sub	sp, #28
    ac5e:	4604      	mov	r4, r0
    if (config == NULL) {
    ac60:	2900      	cmp	r1, #0
    ac62:	f000 817f 	beq.w	af64 <dw1000_mac_config+0x30c>
    ac66:	460d      	mov	r5, r1
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
    ac68:	460b      	mov	r3, r1
    ac6a:	f200 520c 	addw	r2, r0, #1292	; 0x50c
    ac6e:	f101 0c20 	add.w	ip, r1, #32
    ac72:	681f      	ldr	r7, [r3, #0]
    ac74:	685e      	ldr	r6, [r3, #4]
    ac76:	6898      	ldr	r0, [r3, #8]
    ac78:	68d9      	ldr	r1, [r3, #12]
    ac7a:	6017      	str	r7, [r2, #0]
    ac7c:	6056      	str	r6, [r2, #4]
    ac7e:	6090      	str	r0, [r2, #8]
    ac80:	60d1      	str	r1, [r2, #12]
    ac82:	3310      	adds	r3, #16
    ac84:	3210      	adds	r2, #16
    ac86:	4563      	cmp	r3, ip
    ac88:	d1f3      	bne.n	ac72 <dw1000_mac_config+0x1a>
    ac8a:	681b      	ldr	r3, [r3, #0]
    ac8c:	6013      	str	r3, [r2, #0]
    chan = config->channel;
    ac8e:	782f      	ldrb	r7, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
    ac90:	f895 8002 	ldrb.w	r8, [r5, #2]
    ac94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    ac98:	fa5f f888 	uxtb.w	r8, r8
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    ac9c:	2f04      	cmp	r7, #4
    ac9e:	f000 8167 	beq.w	af70 <dw1000_mac_config+0x318>
    aca2:	2f07      	cmp	r7, #7
    aca4:	f000 8161 	beq.w	af6a <dw1000_mac_config+0x312>
    aca8:	2300      	movs	r3, #0
    acaa:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
    acac:	796a      	ldrb	r2, [r5, #5]
    acae:	4bca      	ldr	r3, [pc, #808]	; (afd8 <dw1000_mac_config+0x380>)
    acb0:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
    acb4:	2304      	movs	r3, #4
    acb6:	2200      	movs	r2, #0
    acb8:	4619      	mov	r1, r3
    acba:	4620      	mov	r0, r4
    acbc:	f7fe fe3a 	bl	9934 <dw1000_read_reg>
    acc0:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
    acc4:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    acc8:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    if(config->dataRate == DWT_BR_110K){
    accc:	786b      	ldrb	r3, [r5, #1]
    acce:	2b00      	cmp	r3, #0
    acd0:	f040 8151 	bne.w	af76 <dw1000_mac_config+0x31e>
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
    acd4:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    acd8:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
    acdc:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
    ace0:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
    ace4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    ace8:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
    acec:	79ea      	ldrb	r2, [r5, #7]
    acee:	0412      	lsls	r2, r2, #16
    acf0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    acf4:	4313      	orrs	r3, r2
    acf6:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    if (config->rxauto_enable)
    acfa:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    acfe:	f012 0f01 	tst.w	r2, #1
    ad02:	f000 813d 	beq.w	af80 <dw1000_mac_config+0x328>
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
    ad06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    ad0a:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
    ad0e:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
    ad12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ad16:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
    ad1a:	f04f 0904 	mov.w	r9, #4
    ad1e:	f8cd 9008 	str.w	r9, [sp, #8]
    ad22:	2600      	movs	r6, #0
    ad24:	9300      	str	r3, [sp, #0]
    ad26:	9601      	str	r6, [sp, #4]
    ad28:	4632      	mov	r2, r6
    ad2a:	4649      	mov	r1, r9
    ad2c:	4620      	mov	r0, r4
    ad2e:	f7fe fe71 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
    ad32:	f04f 0a02 	mov.w	sl, #2
    ad36:	f8cd a008 	str.w	sl, [sp, #8]
    ad3a:	f8cd b000 	str.w	fp, [sp]
    ad3e:	9601      	str	r6, [sp, #4]
    ad40:	f642 0204 	movw	r2, #10244	; 0x2804
    ad44:	212e      	movs	r1, #46	; 0x2e
    ad46:	4620      	mov	r0, r4
    ad48:	f7fe fe64 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
    ad4c:	4641      	mov	r1, r8
    ad4e:	4620      	mov	r0, r4
    ad50:	f001 fa01 	bl	c156 <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
    ad54:	4ba1      	ldr	r3, [pc, #644]	; (afdc <dw1000_mac_config+0x384>)
    ad56:	f813 b007 	ldrb.w	fp, [r3, r7]
    ad5a:	4ba1      	ldr	r3, [pc, #644]	; (afe0 <dw1000_mac_config+0x388>)
    ad5c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    ad60:	f8cd 9008 	str.w	r9, [sp, #8]
    ad64:	9300      	str	r3, [sp, #0]
    ad66:	9601      	str	r6, [sp, #4]
    ad68:	2207      	movs	r2, #7
    ad6a:	212b      	movs	r1, #43	; 0x2b
    ad6c:	4620      	mov	r0, r4
    ad6e:	f7fe fe51 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
    ad72:	4b9c      	ldr	r3, [pc, #624]	; (afe4 <dw1000_mac_config+0x38c>)
    ad74:	f813 300b 	ldrb.w	r3, [r3, fp]
    ad78:	2201      	movs	r2, #1
    ad7a:	9202      	str	r2, [sp, #8]
    ad7c:	9300      	str	r3, [sp, #0]
    ad7e:	9601      	str	r6, [sp, #4]
    ad80:	220b      	movs	r2, #11
    ad82:	212b      	movs	r1, #43	; 0x2b
    ad84:	4620      	mov	r0, r4
    ad86:	f7fe fe45 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
    ad8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ad8e:	4a96      	ldr	r2, [pc, #600]	; (afe8 <dw1000_mac_config+0x390>)
    ad90:	5cd3      	ldrb	r3, [r2, r3]
    ad92:	2201      	movs	r2, #1
    ad94:	9202      	str	r2, [sp, #8]
    ad96:	9300      	str	r3, [sp, #0]
    ad98:	9601      	str	r6, [sp, #4]
    ad9a:	220b      	movs	r2, #11
    ad9c:	2128      	movs	r1, #40	; 0x28
    ad9e:	4620      	mov	r0, r4
    ada0:	f7fe fe38 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
    ada4:	4b91      	ldr	r3, [pc, #580]	; (afec <dw1000_mac_config+0x394>)
    ada6:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
    adaa:	f8cd 9008 	str.w	r9, [sp, #8]
    adae:	9300      	str	r3, [sp, #0]
    adb0:	9601      	str	r6, [sp, #4]
    adb2:	220c      	movs	r2, #12
    adb4:	2128      	movs	r1, #40	; 0x28
    adb6:	4620      	mov	r0, r4
    adb8:	f7fe fe2c 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
    adbc:	786a      	ldrb	r2, [r5, #1]
    adbe:	79ab      	ldrb	r3, [r5, #6]
    adc0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    adc4:	4a8a      	ldr	r2, [pc, #552]	; (aff0 <dw1000_mac_config+0x398>)
    adc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    adca:	f8cd a008 	str.w	sl, [sp, #8]
    adce:	9300      	str	r3, [sp, #0]
    add0:	9601      	str	r6, [sp, #4]
    add2:	4652      	mov	r2, sl
    add4:	2127      	movs	r1, #39	; 0x27
    add6:	4620      	mov	r0, r4
    add8:	f7fe fe1c 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
    addc:	4b85      	ldr	r3, [pc, #532]	; (aff4 <dw1000_mac_config+0x39c>)
    adde:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
    ade2:	f8cd a008 	str.w	sl, [sp, #8]
    ade6:	9300      	str	r3, [sp, #0]
    ade8:	9601      	str	r6, [sp, #4]
    adea:	464a      	mov	r2, r9
    adec:	2127      	movs	r1, #39	; 0x27
    adee:	4620      	mov	r0, r4
    adf0:	f7fe fe10 	bl	9a14 <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
    adf4:	786b      	ldrb	r3, [r5, #1]
    adf6:	2b00      	cmp	r3, #0
    adf8:	f000 80c7 	beq.w	af8a <dw1000_mac_config+0x332>
        if(config->tx.preambleLength == DWT_PLEN_64){
    adfc:	7d6b      	ldrb	r3, [r5, #21]
    adfe:	2b04      	cmp	r3, #4
    ae00:	f000 80cf 	beq.w	afa2 <dw1000_mac_config+0x34a>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
    ae04:	2602      	movs	r6, #2
    ae06:	9602      	str	r6, [sp, #8]
    ae08:	2220      	movs	r2, #32
    ae0a:	2300      	movs	r3, #0
    ae0c:	e9cd 2300 	strd	r2, r3, [sp]
    ae10:	2206      	movs	r2, #6
    ae12:	2127      	movs	r1, #39	; 0x27
    ae14:	4620      	mov	r0, r4
    ae16:	f7fe fdfd 	bl	9a14 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
    ae1a:	9602      	str	r6, [sp, #8]
    ae1c:	2228      	movs	r2, #40	; 0x28
    ae1e:	2300      	movs	r3, #0
    ae20:	e9cd 2300 	strd	r2, r3, [sp]
    ae24:	2226      	movs	r2, #38	; 0x26
    ae26:	2127      	movs	r1, #39	; 0x27
    ae28:	4620      	mov	r0, r4
    ae2a:	f7fe fdf3 	bl	9a14 <dw1000_write_reg>
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
    ae2e:	792b      	ldrb	r3, [r5, #4]
    ae30:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    ae34:	4a70      	ldr	r2, [pc, #448]	; (aff8 <dw1000_mac_config+0x3a0>)
    ae36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
    ae3a:	2204      	movs	r2, #4
    ae3c:	9202      	str	r2, [sp, #8]
    ae3e:	9300      	str	r3, [sp, #0]
    ae40:	2300      	movs	r3, #0
    ae42:	9301      	str	r3, [sp, #4]
    ae44:	2208      	movs	r2, #8
    ae46:	2127      	movs	r1, #39	; 0x27
    ae48:	4620      	mov	r0, r4
    ae4a:	f7fe fde3 	bl	9a14 <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
    ae4e:	896b      	ldrh	r3, [r5, #10]
    ae50:	b90b      	cbnz	r3, ae56 <dw1000_mac_config+0x1fe>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
    ae52:	2381      	movs	r3, #129	; 0x81
    ae54:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
    ae56:	896b      	ldrh	r3, [r5, #10]
    ae58:	f04f 0a02 	mov.w	sl, #2
    ae5c:	f8cd a008 	str.w	sl, [sp, #8]
    ae60:	f04f 0900 	mov.w	r9, #0
    ae64:	9300      	str	r3, [sp, #0]
    ae66:	f8cd 9004 	str.w	r9, [sp, #4]
    ae6a:	2220      	movs	r2, #32
    ae6c:	2127      	movs	r1, #39	; 0x27
    ae6e:	4620      	mov	r0, r4
    ae70:	f7fe fdd0 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
    ae74:	2604      	movs	r6, #4
    ae76:	9602      	str	r6, [sp, #8]
    ae78:	a355      	add	r3, pc, #340	; (adr r3, afd0 <dw1000_mac_config+0x378>)
    ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ae7e:	e9cd 2300 	strd	r2, r3, [sp]
    ae82:	220c      	movs	r2, #12
    ae84:	2123      	movs	r1, #35	; 0x23
    ae86:	4620      	mov	r0, r4
    ae88:	f7fe fdc4 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
    ae8c:	4b5b      	ldr	r3, [pc, #364]	; (affc <dw1000_mac_config+0x3a4>)
    ae8e:	eb03 0848 	add.w	r8, r3, r8, lsl #1
    ae92:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    ae96:	f8cd a008 	str.w	sl, [sp, #8]
    ae9a:	9300      	str	r3, [sp, #0]
    ae9c:	f8cd 9004 	str.w	r9, [sp, #4]
    aea0:	4632      	mov	r2, r6
    aea2:	2123      	movs	r1, #35	; 0x23
    aea4:	4620      	mov	r0, r4
    aea6:	f7fe fdb5 	bl	9a14 <dw1000_write_reg>
    if(config->rx.sfdType){
    aeaa:	79aa      	ldrb	r2, [r5, #6]
    aeac:	2a00      	cmp	r2, #0
    aeae:	f040 80a7 	bne.w	b000 <dw1000_mac_config+0x3a8>
    uint8_t useDWnsSFD = 0;
    aeb2:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    aeb4:	f007 030f 	and.w	r3, r7, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
    aeb8:	013f      	lsls	r7, r7, #4
    aeba:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    aebc:	433b      	orrs	r3, r7
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
    aebe:	78af      	ldrb	r7, [r5, #2]
    aec0:	04bf      	lsls	r7, r7, #18
    aec2:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
    aec6:	433b      	orrs	r3, r7
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
    aec8:	0512      	lsls	r2, r2, #20
    aeca:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
    aece:	4313      	orrs	r3, r2
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
    aed0:	044a      	lsls	r2, r1, #17
    aed2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
    aed6:	4313      	orrs	r3, r2
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
    aed8:	7d2a      	ldrb	r2, [r5, #20]
    aeda:	0592      	lsls	r2, r2, #22
    aedc:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
    aee0:	4313      	orrs	r3, r2
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
    aee2:	796a      	ldrb	r2, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
    aee4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
    aee8:	2704      	movs	r7, #4
    aeea:	9702      	str	r7, [sp, #8]
    aeec:	2600      	movs	r6, #0
    aeee:	9300      	str	r3, [sp, #0]
    aef0:	9601      	str	r6, [sp, #4]
    aef2:	4632      	mov	r2, r6
    aef4:	211f      	movs	r1, #31
    aef6:	4620      	mov	r0, r4
    aef8:	f7fe fd8c 	bl	9a14 <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    aefc:	7d6b      	ldrb	r3, [r5, #21]
    aefe:	78aa      	ldrb	r2, [r5, #2]
    af00:	431a      	orrs	r2, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
    af02:	786b      	ldrb	r3, [r5, #1]
    af04:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
    af06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    af0a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
    af0e:	9702      	str	r7, [sp, #8]
    af10:	9300      	str	r3, [sp, #0]
    af12:	9601      	str	r6, [sp, #4]
    af14:	4632      	mov	r2, r6
    af16:	2108      	movs	r1, #8
    af18:	4620      	mov	r0, r4
    af1a:	f7fe fd7b 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
    af1e:	2301      	movs	r3, #1
    af20:	9302      	str	r3, [sp, #8]
    af22:	2242      	movs	r2, #66	; 0x42
    af24:	2300      	movs	r3, #0
    af26:	e9cd 2300 	strd	r2, r3, [sp]
    af2a:	4632      	mov	r2, r6
    af2c:	210d      	movs	r1, #13
    af2e:	4620      	mov	r0, r4
    af30:	f7fe fd70 	bl	9a14 <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
    af34:	8a29      	ldrh	r1, [r5, #16]
    af36:	4620      	mov	r0, r4
    af38:	f7ff fd44 	bl	a9c4 <dw1000_mac_framefilter>
    if (config->rxauto_enable)
    af3c:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    af40:	f013 0f01 	tst.w	r3, #1
    af44:	d004      	beq.n	af50 <dw1000_mac_config+0x2f8>
        assert(config->trxoff_enable);
    af46:	f895 3020 	ldrb.w	r3, [r5, #32]
    af4a:	f013 0f20 	tst.w	r3, #32
    af4e:	d067      	beq.n	b020 <dw1000_mac_config+0x3c8>
    if(config->dblbuffon_enabled)
    af50:	f895 3020 	ldrb.w	r3, [r5, #32]
    af54:	f013 0f10 	tst.w	r3, #16
    af58:	d168      	bne.n	b02c <dw1000_mac_config+0x3d4>
}
    af5a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    af5e:	b007      	add	sp, #28
    af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config = &inst->uwb_dev.config;
    af64:	f200 550c 	addw	r5, r0, #1292	; 0x50c
    af68:	e691      	b.n	ac8e <dw1000_mac_config+0x36>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
    af6a:	2301      	movs	r3, #1
    af6c:	9305      	str	r3, [sp, #20]
    af6e:	e69d      	b.n	acac <dw1000_mac_config+0x54>
    af70:	2301      	movs	r3, #1
    af72:	9305      	str	r3, [sp, #20]
    af74:	e69a      	b.n	acac <dw1000_mac_config+0x54>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
    af76:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
    af7a:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    af7e:	e6af      	b.n	ace0 <dw1000_mac_config+0x88>
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
    af80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    af84:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    af88:	e6c1      	b.n	ad0e <dw1000_mac_config+0xb6>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
    af8a:	f8cd a008 	str.w	sl, [sp, #8]
    af8e:	2264      	movs	r2, #100	; 0x64
    af90:	2300      	movs	r3, #0
    af92:	e9cd 2300 	strd	r2, r3, [sp]
    af96:	2206      	movs	r2, #6
    af98:	2127      	movs	r1, #39	; 0x27
    af9a:	4620      	mov	r0, r4
    af9c:	f7fe fd3a 	bl	9a14 <dw1000_write_reg>
    afa0:	e745      	b.n	ae2e <dw1000_mac_config+0x1d6>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
    afa2:	2602      	movs	r6, #2
    afa4:	9602      	str	r6, [sp, #8]
    afa6:	f04f 0a10 	mov.w	sl, #16
    afaa:	f04f 0b00 	mov.w	fp, #0
    afae:	e9cd ab00 	strd	sl, fp, [sp]
    afb2:	2206      	movs	r2, #6
    afb4:	2127      	movs	r1, #39	; 0x27
    afb6:	4620      	mov	r0, r4
    afb8:	f7fe fd2c 	bl	9a14 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
    afbc:	9602      	str	r6, [sp, #8]
    afbe:	e9cd ab00 	strd	sl, fp, [sp]
    afc2:	2226      	movs	r2, #38	; 0x26
    afc4:	2127      	movs	r1, #39	; 0x27
    afc6:	4620      	mov	r0, r4
    afc8:	f7fe fd24 	bl	9a14 <dw1000_write_reg>
    afcc:	e72f      	b.n	ae2e <dw1000_mac_config+0x1d6>
    afce:	bf00      	nop
    afd0:	2502a907 	.word	0x2502a907
    afd4:	00000000 	.word	0x00000000
    afd8:	000236d8 	.word	0x000236d8
    afdc:	0002364c 	.word	0x0002364c
    afe0:	0002367c 	.word	0x0002367c
    afe4:	00023694 	.word	0x00023694
    afe8:	0002370c 	.word	0x0002370c
    afec:	0002371c 	.word	0x0002371c
    aff0:	00023710 	.word	0x00023710
    aff4:	00023674 	.word	0x00023674
    aff8:	00023654 	.word	0x00023654
    affc:	00023644 	.word	0x00023644
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
    b000:	786b      	ldrb	r3, [r5, #1]
    b002:	4a0d      	ldr	r2, [pc, #52]	; (b038 <dw1000_mac_config+0x3e0>)
    b004:	5cd3      	ldrb	r3, [r2, r3]
    b006:	2601      	movs	r6, #1
    b008:	9602      	str	r6, [sp, #8]
    b00a:	464a      	mov	r2, r9
    b00c:	9300      	str	r3, [sp, #0]
    b00e:	f8cd 9004 	str.w	r9, [sp, #4]
    b012:	2121      	movs	r1, #33	; 0x21
    b014:	4620      	mov	r0, r4
    b016:	f7fe fcfd 	bl	9a14 <dw1000_write_reg>
        useDWnsSFD = 1 ;
    b01a:	4631      	mov	r1, r6
        nsSfd_result = 3 ;
    b01c:	2203      	movs	r2, #3
    b01e:	e749      	b.n	aeb4 <dw1000_mac_config+0x25c>
        assert(config->trxoff_enable);
    b020:	4633      	mov	r3, r6
    b022:	4632      	mov	r2, r6
    b024:	4631      	mov	r1, r6
    b026:	4630      	mov	r0, r6
    b028:	f002 f99a 	bl	d360 <__assert_func>
        dw1000_set_dblrxbuff(inst, true);
    b02c:	2101      	movs	r1, #1
    b02e:	4620      	mov	r0, r4
    b030:	f7ff fdad 	bl	ab8e <dw1000_set_dblrxbuff>
    b034:	e791      	b.n	af5a <dw1000_mac_config+0x302>
    b036:	bf00      	nop
    b038:	00023678 	.word	0x00023678

0000b03c <dw1000_read_carrier_integrator>:
{
    b03c:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
    b03e:	2303      	movs	r3, #3
    b040:	2228      	movs	r2, #40	; 0x28
    b042:	2127      	movs	r1, #39	; 0x27
    b044:	f7fe fc76 	bl	9934 <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
    b048:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
    b04c:	d005      	beq.n	b05a <dw1000_read_carrier_integrator+0x1e>
        regval |= B20_SIGN_EXTEND_MASK;
    b04e:	ea6f 3000 	mvn.w	r0, r0, lsl #12
    b052:	ea6f 3010 	mvn.w	r0, r0, lsr #12
}
    b056:	4240      	negs	r0, r0
    b058:	bd08      	pop	{r3, pc}
        regval &= DRX_CARRIER_INT_MASK;
    b05a:	f3c0 0014 	ubfx	r0, r0, #0, #21
    b05e:	e7fa      	b.n	b056 <dw1000_read_carrier_integrator+0x1a>

0000b060 <dw1000_calc_clock_offset_ratio>:
{
    b060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b064:	4603      	mov	r3, r0
    b066:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
    b068:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
    b06c:	b172      	cbz	r2, b08c <dw1000_calc_clock_offset_ratio+0x2c>
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
    b06e:	f20f 0998 	addw	r9, pc, #152	; 0x98
    b072:	e9d9 8900 	ldrd	r8, r9, [r9]
    switch ( inst->uwb_dev.config.channel ) {
    b076:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
    b07a:	3b01      	subs	r3, #1
    b07c:	2b06      	cmp	r3, #6
    b07e:	d832      	bhi.n	b0e6 <dw1000_calc_clock_offset_ratio+0x86>
    b080:	e8df f003 	tbb	[pc, r3]
    b084:	25093b37 	.word	0x25093b37
    b088:	3129      	.short	0x3129
    b08a:	2d          	.byte	0x2d
    b08b:	00          	.byte	0x00
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
    b08c:	f20f 0980 	addw	r9, pc, #128	; 0x80
    b090:	e9d9 8900 	ldrd	r8, r9, [r9]
    b094:	e7ef      	b.n	b076 <dw1000_calc_clock_offset_ratio+0x16>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
    b096:	a720      	add	r7, pc, #128	; (adr r7, b118 <dw1000_calc_clock_offset_ratio+0xb8>)
    b098:	e9d7 6700 	ldrd	r6, r7, [r7]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
    b09c:	f016 fc74 	bl	21988 <__aeabi_i2d>
    b0a0:	4604      	mov	r4, r0
    b0a2:	460d      	mov	r5, r1
    b0a4:	4632      	mov	r2, r6
    b0a6:	463b      	mov	r3, r7
    b0a8:	4640      	mov	r0, r8
    b0aa:	4649      	mov	r1, r9
    b0ac:	f016 fcd6 	bl	21a5c <__aeabi_dmul>
    b0b0:	4602      	mov	r2, r0
    b0b2:	460b      	mov	r3, r1
    b0b4:	4620      	mov	r0, r4
    b0b6:	4629      	mov	r1, r5
    b0b8:	f016 fcd0 	bl	21a5c <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
    b0bc:	a318      	add	r3, pc, #96	; (adr r3, b120 <dw1000_calc_clock_offset_ratio+0xc0>)
    b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
    b0c2:	f016 fdf5 	bl	21cb0 <__aeabi_ddiv>
}
    b0c6:	ec41 0b10 	vmov	d0, r0, r1
    b0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 4: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_4);break;
    b0ce:	a712      	add	r7, pc, #72	; (adr r7, b118 <dw1000_calc_clock_offset_ratio+0xb8>)
    b0d0:	e9d7 6700 	ldrd	r6, r7, [r7]
    b0d4:	e7e2      	b.n	b09c <dw1000_calc_clock_offset_ratio+0x3c>
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
    b0d6:	a714      	add	r7, pc, #80	; (adr r7, b128 <dw1000_calc_clock_offset_ratio+0xc8>)
    b0d8:	e9d7 6700 	ldrd	r6, r7, [r7]
    b0dc:	e7de      	b.n	b09c <dw1000_calc_clock_offset_ratio+0x3c>
    case 7: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_7);break;
    b0de:	a712      	add	r7, pc, #72	; (adr r7, b128 <dw1000_calc_clock_offset_ratio+0xc8>)
    b0e0:	e9d7 6700 	ldrd	r6, r7, [r7]
    b0e4:	e7da      	b.n	b09c <dw1000_calc_clock_offset_ratio+0x3c>
    default: assert(0);
    b0e6:	2300      	movs	r3, #0
    b0e8:	461a      	mov	r2, r3
    b0ea:	4619      	mov	r1, r3
    b0ec:	4618      	mov	r0, r3
    b0ee:	f002 f937 	bl	d360 <__assert_func>
    switch ( inst->uwb_dev.config.channel ) {
    b0f2:	a70f      	add	r7, pc, #60	; (adr r7, b130 <dw1000_calc_clock_offset_ratio+0xd0>)
    b0f4:	e9d7 6700 	ldrd	r6, r7, [r7]
    b0f8:	e7d0      	b.n	b09c <dw1000_calc_clock_offset_ratio+0x3c>
    case 2: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_2);break;
    b0fa:	a70f      	add	r7, pc, #60	; (adr r7, b138 <dw1000_calc_clock_offset_ratio+0xd8>)
    b0fc:	e9d7 6700 	ldrd	r6, r7, [r7]
    b100:	e7cc      	b.n	b09c <dw1000_calc_clock_offset_ratio+0x3c>
    b102:	bf00      	nop
    b104:	f3af 8000 	nop.w
    b108:	00000000 	.word	0x00000000
    b10c:	400dc130 	.word	0x400dc130
    b110:	00000000 	.word	0x00000000
    b114:	3fddc130 	.word	0x3fddc130
    b118:	7281d2c8 	.word	0x7281d2c8
    b11c:	3f2d2c7d 	.word	0x3f2d2c7d
    b120:	00000000 	.word	0x00000000
    b124:	412e8480 	.word	0x412e8480
    b128:	3b94f463 	.word	0x3b94f463
    b12c:	3f24327e 	.word	0x3f24327e
    b130:	12c12c13 	.word	0x12c12c13
    b134:	3f32c12c 	.word	0x3f32c12c
    b138:	90690690 	.word	0x90690690
    b13c:	3f306906 	.word	0x3f306906

0000b140 <dw1000_read_time_tracking_offset>:
{
    b140:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
    b142:	2303      	movs	r3, #3
    b144:	2200      	movs	r2, #0
    b146:	2114      	movs	r1, #20
    b148:	f7fe fbf4 	bl	9934 <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
    b14c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b150:	d004      	beq.n	b15c <dw1000_read_time_tracking_offset+0x1c>
        regval |= B18_SIGN_EXTEND_MASK;
    b152:	ea6f 3080 	mvn.w	r0, r0, lsl #14
    b156:	ea6f 3090 	mvn.w	r0, r0, lsr #14
}
    b15a:	bd08      	pop	{r3, pc}
        regval &= RX_TTCKO_RXTOFS_MASK;
    b15c:	f3c0 0012 	ubfx	r0, r0, #0, #19
    b160:	e7fb      	b.n	b15a <dw1000_read_time_tracking_offset+0x1a>

0000b162 <dw1000_calc_clock_offset_ratio_ttco>:
{
    b162:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
    b164:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
    b168:	2b01      	cmp	r3, #1
    b16a:	d012      	beq.n	b192 <dw1000_calc_clock_offset_ratio_ttco+0x30>
        denom = 0x01FC0000;
    b16c:	f04f 76fe 	mov.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
    b170:	4248      	negs	r0, r1
    b172:	f016 fc09 	bl	21988 <__aeabi_i2d>
    b176:	4604      	mov	r4, r0
    b178:	460d      	mov	r5, r1
    b17a:	4630      	mov	r0, r6
    b17c:	f016 fc04 	bl	21988 <__aeabi_i2d>
    b180:	4602      	mov	r2, r0
    b182:	460b      	mov	r3, r1
    b184:	4620      	mov	r0, r4
    b186:	4629      	mov	r1, r5
    b188:	f016 fd92 	bl	21cb0 <__aeabi_ddiv>
}
    b18c:	ec41 0b10 	vmov	d0, r0, r1
    b190:	bd70      	pop	{r4, r5, r6, pc}
    int32_t denom = 0x01F00000;
    b192:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
    b196:	e7eb      	b.n	b170 <dw1000_calc_clock_offset_ratio_ttco+0xe>

0000b198 <dw1000_read_rxdiag>:
{
    b198:	b570      	push	{r4, r5, r6, lr}
    b19a:	b082      	sub	sp, #8
    b19c:	4605      	mov	r5, r0
    b19e:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
    b1a0:	2604      	movs	r6, #4
    b1a2:	9600      	str	r6, [sp, #0]
    b1a4:	1d8b      	adds	r3, r1, #6
    b1a6:	2205      	movs	r2, #5
    b1a8:	2115      	movs	r1, #21
    b1aa:	f7fe faf9 	bl	97a0 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
    b1ae:	2308      	movs	r3, #8
    b1b0:	9300      	str	r3, [sp, #0]
    b1b2:	f104 030a 	add.w	r3, r4, #10
    b1b6:	2200      	movs	r2, #0
    b1b8:	2112      	movs	r1, #18
    b1ba:	4628      	mov	r0, r5
    b1bc:	f7fe faf0 	bl	97a0 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
    b1c0:	4633      	mov	r3, r6
    b1c2:	2200      	movs	r2, #0
    b1c4:	2110      	movs	r1, #16
    b1c6:	4628      	mov	r0, r5
    b1c8:	f7fe fbb4 	bl	9934 <dw1000_read_reg>
    b1cc:	0d00      	lsrs	r0, r0, #20
    b1ce:	8260      	strh	r0, [r4, #18]
}
    b1d0:	b002      	add	sp, #8
    b1d2:	bd70      	pop	{r4, r5, r6, pc}
    b1d4:	0000      	movs	r0, r0
	...

0000b1d8 <dw1000_tasks_init>:
{
    b1d8:	b530      	push	{r4, r5, lr}
    b1da:	b085      	sub	sp, #20
    b1dc:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    b1de:	303c      	adds	r0, #60	; 0x3c
    b1e0:	f002 fbed 	bl	d9be <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
    b1e4:	b1c0      	cbz	r0, b218 <dw1000_tasks_init+0x40>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
    b1e6:	4d18      	ldr	r5, [pc, #96]	; (b248 <dw1000_tasks_init+0x70>)
    b1e8:	2200      	movs	r2, #0
    b1ea:	4629      	mov	r1, r5
    b1ec:	4620      	mov	r0, r4
    b1ee:	f001 f9ab 	bl	c548 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
    b1f2:	2304      	movs	r3, #4
    b1f4:	9302      	str	r3, [sp, #8]
    b1f6:	a312      	add	r3, pc, #72	; (adr r3, b240 <dw1000_tasks_init+0x68>)
    b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1fc:	e9cd 2300 	strd	r2, r3, [sp]
    b200:	2200      	movs	r2, #0
    b202:	210f      	movs	r1, #15
    b204:	4620      	mov	r0, r4
    b206:	f7fe fc05 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
    b20a:	2201      	movs	r2, #1
    b20c:	4629      	mov	r1, r5
    b20e:	4620      	mov	r0, r4
    b210:	f001 f99a 	bl	c548 <dw1000_phy_interrupt_mask>
}
    b214:	b005      	add	sp, #20
    b216:	bd30      	pop	{r4, r5, pc}
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
    b218:	490c      	ldr	r1, [pc, #48]	; (b24c <dw1000_tasks_init+0x74>)
    b21a:	4620      	mov	r0, r4
    b21c:	f7fd fcc6 	bl	8bac <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
    b220:	2302      	movs	r3, #2
    b222:	9300      	str	r3, [sp, #0]
    b224:	2301      	movs	r3, #1
    b226:	4622      	mov	r2, r4
    b228:	4909      	ldr	r1, [pc, #36]	; (b250 <dw1000_tasks_init+0x78>)
    b22a:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    b22e:	f001 fc5f 	bl	caf0 <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
    b232:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    b236:	f001 fc97 	bl	cb68 <hal_gpio_irq_enable>
    b23a:	e7d4      	b.n	b1e6 <dw1000_tasks_init+0xe>
    b23c:	f3af 8000 	nop.w
    b240:	34b7b092 	.word	0x34b7b092
    b244:	00000000 	.word	0x00000000
    b248:	3437b092 	.word	0x3437b092
    b24c:	0000b2d1 	.word	0x0000b2d1
    b250:	0000a23b 	.word	0x0000a23b

0000b254 <dw1000_mac_init>:
{
    b254:	b530      	push	{r4, r5, lr}
    b256:	b083      	sub	sp, #12
    b258:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
    b25a:	f7ff fcfd 	bl	ac58 <dw1000_mac_config>
    dw1000_tasks_init(inst);
    b25e:	4620      	mov	r0, r4
    b260:	f7ff ffba 	bl	b1d8 <dw1000_tasks_init>
        int rc = stats_init(
    b264:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
    b268:	220a      	movs	r2, #10
    b26a:	9200      	str	r2, [sp, #0]
    b26c:	4b0d      	ldr	r3, [pc, #52]	; (b2a4 <dw1000_mac_init+0x50>)
    b26e:	2104      	movs	r1, #4
    b270:	4628      	mov	r0, r5
    b272:	f009 fccb 	bl	14c0c <stats_init>
        assert(rc == 0);
    b276:	b940      	cbnz	r0, b28a <dw1000_mac_init+0x36>
        rc = stats_register("mac", STATS_HDR(inst->stat));
    b278:	4629      	mov	r1, r5
    b27a:	480b      	ldr	r0, [pc, #44]	; (b2a8 <dw1000_mac_init+0x54>)
    b27c:	f009 fd50 	bl	14d20 <stats_register>
        assert(rc == 0);
    b280:	b948      	cbnz	r0, b296 <dw1000_mac_init+0x42>
}
    b282:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    b286:	b003      	add	sp, #12
    b288:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
    b28a:	2300      	movs	r3, #0
    b28c:	461a      	mov	r2, r3
    b28e:	4619      	mov	r1, r3
    b290:	4618      	mov	r0, r3
    b292:	f002 f865 	bl	d360 <__assert_func>
        assert(rc == 0);
    b296:	2300      	movs	r3, #0
    b298:	461a      	mov	r2, r3
    b29a:	4619      	mov	r1, r3
    b29c:	4618      	mov	r0, r3
    b29e:	f002 f85f 	bl	d360 <__assert_func>
    b2a2:	bf00      	nop
    b2a4:	0002369c 	.word	0x0002369c
    b2a8:	000235e0 	.word	0x000235e0

0000b2ac <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
    b2ac:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
    b2ae:	2301      	movs	r3, #1
    b2b0:	2203      	movs	r2, #3
    b2b2:	210f      	movs	r1, #15
    b2b4:	f7fe fb3e 	bl	9934 <dw1000_read_reg>
    b2b8:	b2c0      	uxtb	r0, r0
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
    b2ba:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    b2be:	09c0      	lsrs	r0, r0, #7
    b2c0:	f080 0001 	eor.w	r0, r0, #1
}
    b2c4:	f000 0001 	and.w	r0, r0, #1
    b2c8:	bd08      	pop	{r3, pc}
    b2ca:	0000      	movs	r0, r0
    b2cc:	0000      	movs	r0, r0
	...

0000b2d0 <dw1000_interrupt_ev_cb>:
 * @return void
 *
 */
static void
dw1000_interrupt_ev_cb(struct dpl_event *ev)
{
    b2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b2d4:	b085      	sub	sp, #20
    b2d6:	4606      	mov	r6, r0
    return ev->ev.ev_arg;
    b2d8:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b2da:	f104 0734 	add.w	r7, r4, #52	; 0x34
    b2de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b2e2:	4638      	mov	r0, r7
    b2e4:	f003 f864 	bl	e3b0 <os_sem_pend>
    uint16_t finfo;
    struct uwb_mac_interface * cbs = NULL;
    dw1000_dev_instance_t * inst = dpl_event_get_arg(ev);
    dpl_error_t err = dpl_sem_pend(&inst->uwb_dev.irq_sem,  DPL_TIMEOUT_NEVER);
    if (err != DPL_OK) {
    b2e8:	b1b0      	cbz	r0, b318 <dw1000_interrupt_ev_cb+0x48>
        inst->uwb_dev.status.sem_error = 1;
    b2ea:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    b2ee:	f043 0304 	orr.w	r3, r3, #4
    b2f2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    /* Check for possibly missed interrupts occuring whilst we were looking at this one
     * NOTE: Because the interrupt is edge based we will only register an event if the irq pin
     * goes low and then comes back up. If the pin is high now and no event is queued just after
     * swapping rx-buffers this means we didn't have time to finish reading the data
     * from the previous irq until a new one arrived -> queue another irq event for the task */
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
    b2f6:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
    b2fa:	f001 fbde 	bl	caba <hal_gpio_read>
    b2fe:	b118      	cbz	r0, b308 <dw1000_interrupt_ev_cb+0x38>
    return ev->ev.ev_queued;
    b300:	7833      	ldrb	r3, [r6, #0]
    b302:	2b00      	cmp	r3, #0
    b304:	f000 84e7 	beq.w	bcd6 <dw1000_interrupt_ev_cb+0xa06>
        }
#endif
    }

#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    if(!inst->sys_status_bt_lock) {
    b308:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    b30c:	2b00      	cmp	r3, #0
    b30e:	f000 84fb 	beq.w	bd08 <dw1000_interrupt_ev_cb+0xa38>
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    }
#endif
}
    b312:	b005      	add	sp, #20
    b314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t irq_utime = dpl_cputime_get32();
    b318:	f006 fd4b 	bl	11db2 <dpl_cputime_get32>
    b31c:	4605      	mov	r5, r0
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
    b31e:	2304      	movs	r3, #4
    b320:	2200      	movs	r2, #0
    b322:	210f      	movs	r1, #15
    b324:	4620      	mov	r0, r4
    b326:	f7fe fb05 	bl	9934 <dw1000_read_reg>
    b32a:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
    b32e:	4bc3      	ldr	r3, [pc, #780]	; (b63c <dw1000_interrupt_ev_cb+0x36c>)
    b330:	4003      	ands	r3, r0
    b332:	2b00      	cmp	r3, #0
    b334:	f000 816b 	beq.w	b60e <dw1000_interrupt_ev_cb+0x33e>
        if(!inst->sys_status_bt_lock) {
    b338:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    b33c:	b9a3      	cbnz	r3, b368 <dw1000_interrupt_ev_cb+0x98>
            DW1000_SYS_STATUS_BT_ADD(inst, inst->sys_status, irq_utime);
    b33e:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
    b342:	3301      	adds	r3, #1
    b344:	b29b      	uxth	r3, r3
    b346:	f8a4 3df0 	strh.w	r3, [r4, #3568]	; 0xdf0
    b34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b34e:	f8d4 058c 	ldr.w	r0, [r4, #1420]	; 0x58c
    b352:	335f      	adds	r3, #95	; 0x5f
    b354:	0119      	lsls	r1, r3, #4
    b356:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    b35a:	2200      	movs	r2, #0
    b35c:	5062      	str	r2, [r4, r1]
    b35e:	605a      	str	r2, [r3, #4]
    b360:	609a      	str	r2, [r3, #8]
    b362:	60da      	str	r2, [r3, #12]
    b364:	5065      	str	r5, [r4, r1]
    b366:	6058      	str	r0, [r3, #4]
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
    b368:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b36c:	4ab4      	ldr	r2, [pc, #720]	; (b640 <dw1000_interrupt_ev_cb+0x370>)
    b36e:	401a      	ands	r2, r3
    b370:	3a00      	subs	r2, #0
    b372:	bf18      	it	ne
    b374:	2201      	movne	r2, #1
    b376:	f894 1508 	ldrb.w	r1, [r4, #1288]	; 0x508
    b37a:	f362 1186 	bfi	r1, r2, #6, #1
    b37e:	f884 1508 	strb.w	r1, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
    b382:	f894 1590 	ldrb.w	r1, [r4, #1424]	; 0x590
    b386:	f001 0001 	and.w	r0, r1, #1
    b38a:	4302      	orrs	r2, r0
    b38c:	f894 0508 	ldrb.w	r0, [r4, #1288]	; 0x508
    b390:	f362 1086 	bfi	r0, r2, #6, #1
    b394:	f884 0508 	strb.w	r0, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
    b398:	f3c3 7040 	ubfx	r0, r3, #29, #1
    b39c:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    b3a0:	f360 0200 	bfi	r2, r0, #0, #1
    b3a4:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
    b3a8:	f413 1f08 	tst.w	r3, #2228224	; 0x220000
    b3ac:	bf14      	ite	ne
    b3ae:	2001      	movne	r0, #1
    b3b0:	2000      	moveq	r0, #0
    b3b2:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
    b3b6:	f360 12c7 	bfi	r2, r0, #7, #1
    b3ba:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
    b3be:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b3c2:	bf0c      	ite	eq
    b3c4:	2001      	moveq	r0, #1
    b3c6:	2000      	movne	r0, #0
    b3c8:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    b3cc:	f360 0282 	bfi	r2, r0, #2, #1
    b3d0:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
    b3d4:	f3c3 5000 	ubfx	r0, r3, #20, #1
    b3d8:	f894 250a 	ldrb.w	r2, [r4, #1290]	; 0x50a
    b3dc:	f360 0282 	bfi	r2, r0, #2, #1
    b3e0:	f884 250a 	strb.w	r2, [r4, #1290]	; 0x50a
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
    b3e4:	f3c3 7000 	ubfx	r0, r3, #28, #1
    b3e8:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
    b3ec:	f360 1245 	bfi	r2, r0, #5, #1
    b3f0:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
    b3f4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    b3f8:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
    b3fc:	f360 1286 	bfi	r2, r0, #6, #1
    b400:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
    b404:	f3c1 0140 	ubfx	r1, r1, #1, #1
    b408:	b2d2      	uxtb	r2, r2
    b40a:	f361 0241 	bfi	r2, r1, #1, #1
    b40e:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    b412:	f8b4 2566 	ldrh.w	r2, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
    b416:	b922      	cbnz	r2, b422 <dw1000_interrupt_ev_cb+0x152>
    b418:	f003 0390 	and.w	r3, r3, #144	; 0x90
    b41c:	2b10      	cmp	r3, #16
    b41e:	f040 80ff 	bne.w	b620 <dw1000_interrupt_ev_cb+0x350>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
    b422:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b426:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    b42a:	f000 80b7 	beq.w	b59c <dw1000_interrupt_ev_cb+0x2cc>
        MAC_STATS_INC(DFR_cnt);
    b42e:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
    b432:	3301      	adds	r3, #1
    b434:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
    b438:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b43c:	f013 0f04 	tst.w	r3, #4
    b440:	f040 8100 	bne.w	b644 <dw1000_interrupt_ev_cb+0x374>
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
    b444:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
    b448:	f403 7388 	and.w	r3, r3, #272	; 0x110
    b44c:	2b10      	cmp	r3, #16
    b44e:	f000 8138 	beq.w	b6c2 <dw1000_interrupt_ev_cb+0x3f2>
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
    b452:	2302      	movs	r3, #2
    b454:	2200      	movs	r2, #0
    b456:	2110      	movs	r1, #16
    b458:	4620      	mov	r0, r4
    b45a:	f7fe fa6b 	bl	9934 <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
    b45e:	f3c0 0009 	ubfx	r0, r0, #0, #10
    b462:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
    b466:	b110      	cbz	r0, b46e <dw1000_interrupt_ev_cb+0x19e>
    b468:	3802      	subs	r0, #2
    b46a:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
                       (inst->uwb_dev.frame_len < inst->uwb_dev.rxbuf_size) ?
    b46e:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
    b472:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
    b476:	4293      	cmp	r3, r2
    b478:	bf28      	it	cs
    b47a:	4613      	movcs	r3, r2
    b47c:	2200      	movs	r2, #0
    b47e:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    b482:	4620      	mov	r0, r4
    b484:	f7fe feeb 	bl	a25e <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
    b488:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
    b48c:	7851      	ldrb	r1, [r2, #1]
    b48e:	7813      	ldrb	r3, [r2, #0]
    b490:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b494:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if(!inst->sys_status_bt_lock) {
    b498:	f894 2df2 	ldrb.w	r2, [r4, #3570]	; 0xdf2
    b49c:	b93a      	cbnz	r2, b4ae <dw1000_interrupt_ev_cb+0x1de>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
    b49e:	f8b4 2df0 	ldrh.w	r2, [r4, #3568]	; 0xdf0
    b4a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b4a6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    b4aa:	f8a2 35fa 	strh.w	r3, [r2, #1530]	; 0x5fa
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
    b4ae:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b4b2:	f013 0f04 	tst.w	r3, #4
    b4b6:	f040 8126 	bne.w	b706 <dw1000_interrupt_ev_cb+0x436>
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
    b4ba:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b4be:	f013 0f04 	tst.w	r3, #4
    b4c2:	d004      	beq.n	b4ce <dw1000_interrupt_ev_cb+0x1fe>
            MAC_STATS_INC(LDE_err);
    b4c4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
    b4c8:	3301      	adds	r3, #1
    b4ca:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
    b4ce:	2305      	movs	r3, #5
    b4d0:	2200      	movs	r2, #0
    b4d2:	2115      	movs	r1, #21
    b4d4:	4620      	mov	r0, r4
    b4d6:	f7fe fa2d 	bl	9934 <dw1000_read_reg>
    b4da:	b2cb      	uxtb	r3, r1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
    b4dc:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
    b4e0:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
    b4e4:	f894 15b1 	ldrb.w	r1, [r4, #1457]	; 0x5b1
    b4e8:	f011 0f08 	tst.w	r1, #8
    b4ec:	f040 811d 	bne.w	b72a <dw1000_interrupt_ev_cb+0x45a>
        if (inst->uwb_dev.status.autoack_triggered) {
    b4f0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b4f4:	f013 0f40 	tst.w	r3, #64	; 0x40
    b4f8:	d01c      	beq.n	b534 <dw1000_interrupt_ev_cb+0x264>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
    b4fa:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
    b4fe:	f013 0f20 	tst.w	r3, #32
    b502:	f040 8117 	bne.w	b734 <dw1000_interrupt_ev_cb+0x464>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
    b506:	2301      	movs	r3, #1
    b508:	9302      	str	r3, [sp, #8]
    b50a:	2208      	movs	r2, #8
    b50c:	2300      	movs	r3, #0
    b50e:	e9cd 2300 	strd	r2, r3, [sp]
    b512:	2200      	movs	r2, #0
    b514:	210f      	movs	r1, #15
    b516:	4620      	mov	r0, r4
    b518:	f7fe fa7c 	bl	9a14 <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
    b51c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b520:	f023 0308 	bic.w	r3, r3, #8
    b524:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
    b528:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b52c:	f36f 1386 	bfc	r3, #6, #1
    b530:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
    b534:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    b538:	f013 0f40 	tst.w	r3, #64	; 0x40
    b53c:	f040 8109 	bne.w	b752 <dw1000_interrupt_ev_cb+0x482>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
    b540:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    b544:	f013 0f10 	tst.w	r3, #16
    b548:	f000 8190 	beq.w	b86c <dw1000_interrupt_ev_cb+0x59c>
            if (inst->uwb_dev.config.rxttcko_enable) {
    b54c:	f013 0f80 	tst.w	r3, #128	; 0x80
    b550:	f040 8105 	bne.w	b75e <dw1000_interrupt_ev_cb+0x48e>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
    b554:	4620      	mov	r0, r4
    b556:	f7fe fe67 	bl	a228 <dw1000_checkoverrun>
    b55a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b55e:	f360 0382 	bfi	r3, r0, #2, #1
    b562:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
    b566:	b2db      	uxtb	r3, r3
    b568:	f013 0f04 	tst.w	r3, #4
    b56c:	f040 813e 	bne.w	b7ec <dw1000_interrupt_ev_cb+0x51c>
                if (inst->uwb_dev.config.rxauto_enable) {
    b570:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    b574:	f013 0f01 	tst.w	r3, #1
    b578:	f040 80f7 	bne.w	b76a <dw1000_interrupt_ev_cb+0x49a>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
    b57c:	2301      	movs	r3, #1
    b57e:	9302      	str	r3, [sp, #8]
    b580:	2201      	movs	r2, #1
    b582:	2300      	movs	r3, #0
    b584:	e9cd 2300 	strd	r2, r3, [sp]
    b588:	2203      	movs	r2, #3
    b58a:	210d      	movs	r1, #13
    b58c:	4620      	mov	r0, r4
    b58e:	f7fe fa41 	bl	9a14 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b592:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    b596:	2d00      	cmp	r5, #0
    b598:	f040 819b 	bne.w	b8d2 <dw1000_interrupt_ev_cb+0x602>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
    b59c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b5a0:	f013 0f10 	tst.w	r3, #16
    b5a4:	f040 819c 	bne.w	b8e0 <dw1000_interrupt_ev_cb+0x610>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
    b5a8:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b5ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    b5b0:	f040 81b2 	bne.w	b918 <dw1000_interrupt_ev_cb+0x648>
    if(inst->uwb_dev.status.txbuf_error){
    b5b4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    b5b8:	f013 0f20 	tst.w	r3, #32
    b5bc:	f040 820b 	bne.w	b9d6 <dw1000_interrupt_ev_cb+0x706>
    if(inst->sys_status & SYS_STATUS_LDEERR){
    b5c0:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b5c4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    b5c8:	f040 8228 	bne.w	ba1c <dw1000_interrupt_ev_cb+0x74c>
    if(inst->uwb_dev.status.rx_timeout_error){
    b5cc:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	f2c0 8235 	blt.w	ba40 <dw1000_interrupt_ev_cb+0x770>
    if(inst->uwb_dev.status.rx_error) {
    b5d6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
    b5da:	f013 0f40 	tst.w	r3, #64	; 0x40
    b5de:	f040 829e 	bne.w	bb1e <dw1000_interrupt_ev_cb+0x84e>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
    b5e2:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b5e6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    b5ea:	f040 831c 	bne.w	bc26 <dw1000_interrupt_ev_cb+0x956>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
    b5ee:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b5f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    b5f6:	f040 8322 	bne.w	bc3e <dw1000_interrupt_ev_cb+0x96e>
    if(inst->sys_status & SYS_MASK_MCPLOCK){
    b5fa:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b5fe:	f013 0f02 	tst.w	r3, #2
    b602:	f040 832e 	bne.w	bc62 <dw1000_interrupt_ev_cb+0x992>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b606:	4638      	mov	r0, r7
    b608:	f002 fea0 	bl	e34c <os_sem_release>
    b60c:	e673      	b.n	b2f6 <dw1000_interrupt_ev_cb+0x26>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
    b60e:	2301      	movs	r3, #1
    b610:	2204      	movs	r2, #4
    b612:	210f      	movs	r1, #15
    b614:	4620      	mov	r0, r4
    b616:	f7fe f98d 	bl	9934 <dw1000_read_reg>
    b61a:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
    b61e:	e68b      	b.n	b338 <dw1000_interrupt_ev_cb+0x68>
    b620:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    b624:	f002 fe92 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    b628:	2800      	cmp	r0, #0
    b62a:	f43f aefa 	beq.w	b422 <dw1000_interrupt_ev_cb+0x152>
    b62e:	2300      	movs	r3, #0
    b630:	461a      	mov	r2, r3
    b632:	4619      	mov	r1, r3
    b634:	4618      	mov	r0, r3
    b636:	f001 fe93 	bl	d360 <__assert_func>
    b63a:	bf00      	nop
    b63c:	3437b092 	.word	0x3437b092
    b640:	24119000 	.word	0x24119000
            MAC_STATS_INC(ROV_err);
    b644:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
    b648:	3301      	adds	r3, #1
    b64a:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
    b64e:	2304      	movs	r3, #4
    b650:	9302      	str	r3, [sp, #8]
    b652:	4ac8      	ldr	r2, [pc, #800]	; (b974 <dw1000_interrupt_ev_cb+0x6a4>)
    b654:	2300      	movs	r3, #0
    b656:	e9cd 2300 	strd	r2, r3, [sp]
    b65a:	2200      	movs	r2, #0
    b65c:	210f      	movs	r1, #15
    b65e:	4620      	mov	r0, r4
    b660:	f7fe f9d8 	bl	9a14 <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
    b664:	4620      	mov	r0, r4
    b666:	f000 fedf 	bl	c428 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
    b66a:	4620      	mov	r0, r4
    b66c:	f000 fea9 	bl	c3c2 <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
    b670:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    b674:	f043 0310 	orr.w	r3, r3, #16
    b678:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    b67c:	2301      	movs	r3, #1
    b67e:	2203      	movs	r2, #3
    b680:	210f      	movs	r1, #15
    b682:	4620      	mov	r0, r4
    b684:	f7fe f956 	bl	9934 <dw1000_read_reg>
    b688:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    b68a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    b68e:	f010 0f80 	tst.w	r0, #128	; 0x80
    b692:	d10a      	bne.n	b6aa <dw1000_interrupt_ev_cb+0x3da>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b694:	2201      	movs	r2, #1
    b696:	9202      	str	r2, [sp, #8]
    b698:	2001      	movs	r0, #1
    b69a:	2100      	movs	r1, #0
    b69c:	e9cd 0100 	strd	r0, r1, [sp]
    b6a0:	210d      	movs	r1, #13
    b6a2:	4620      	mov	r0, r4
    b6a4:	f7fe f9b6 	bl	9a14 <dw1000_write_reg>
            goto early_exit;
    b6a8:	e7ad      	b.n	b606 <dw1000_interrupt_ev_cb+0x336>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    b6aa:	2301      	movs	r3, #1
    b6ac:	9302      	str	r3, [sp, #8]
    b6ae:	2201      	movs	r2, #1
    b6b0:	2300      	movs	r3, #0
    b6b2:	e9cd 2300 	strd	r2, r3, [sp]
    b6b6:	2203      	movs	r2, #3
    b6b8:	210d      	movs	r1, #13
    b6ba:	4620      	mov	r0, r4
    b6bc:	f7fe f9aa 	bl	9a14 <dw1000_write_reg>
    b6c0:	e7e8      	b.n	b694 <dw1000_interrupt_ev_cb+0x3c4>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
    b6c2:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b6c6:	f013 0f04 	tst.w	r3, #4
    b6ca:	d104      	bne.n	b6d6 <dw1000_interrupt_ev_cb+0x406>
    b6cc:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b6d0:	f013 0f40 	tst.w	r3, #64	; 0x40
    b6d4:	d006      	beq.n	b6e4 <dw1000_interrupt_ev_cb+0x414>
            inst->control.rxauto_disable = false;
    b6d6:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b6da:	f36f 0382 	bfc	r3, #2, #1
    b6de:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    b6e2:	e6b6      	b.n	b452 <dw1000_interrupt_ev_cb+0x182>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b6e4:	2201      	movs	r2, #1
    b6e6:	9202      	str	r2, [sp, #8]
    b6e8:	2001      	movs	r0, #1
    b6ea:	2100      	movs	r1, #0
    b6ec:	e9cd 0100 	strd	r0, r1, [sp]
    b6f0:	210d      	movs	r1, #13
    b6f2:	4620      	mov	r0, r4
    b6f4:	f7fe f98e 	bl	9a14 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
    b6f8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b6fc:	f043 0308 	orr.w	r3, r3, #8
    b700:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    b704:	e7e7      	b.n	b6d6 <dw1000_interrupt_ev_cb+0x406>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
    b706:	2301      	movs	r3, #1
    b708:	461a      	mov	r2, r3
    b70a:	210f      	movs	r1, #15
    b70c:	4620      	mov	r0, r4
    b70e:	f7fe f911 	bl	9934 <dw1000_read_reg>
    b712:	f010 0f04 	tst.w	r0, #4
    b716:	bf0c      	ite	eq
    b718:	2201      	moveq	r2, #1
    b71a:	2200      	movne	r2, #0
    b71c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b720:	f362 0382 	bfi	r3, r2, #2, #1
    b724:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    b728:	e6c7      	b.n	b4ba <dw1000_interrupt_ev_cb+0x1ea>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
    b72a:	4602      	mov	r2, r0
    b72c:	4620      	mov	r0, r4
    b72e:	f7ff f88b 	bl	a848 <update_rx_window_timeout>
    b732:	e6dd      	b.n	b4f0 <dw1000_interrupt_ev_cb+0x220>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b734:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b738:	0a1b      	lsrs	r3, r3, #8
    b73a:	2201      	movs	r2, #1
    b73c:	9202      	str	r2, [sp, #8]
    b73e:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
    b742:	9300      	str	r3, [sp, #0]
    b744:	2300      	movs	r3, #0
    b746:	9301      	str	r3, [sp, #4]
    b748:	210f      	movs	r1, #15
    b74a:	4620      	mov	r0, r4
    b74c:	f7fe f962 	bl	9a14 <dw1000_write_reg>
    b750:	e6f0      	b.n	b534 <dw1000_interrupt_ev_cb+0x264>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
    b752:	f204 519c 	addw	r1, r4, #1436	; 0x59c
    b756:	4620      	mov	r0, r4
    b758:	f7ff fd1e 	bl	b198 <dw1000_read_rxdiag>
    b75c:	e6f0      	b.n	b540 <dw1000_interrupt_ev_cb+0x270>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
    b75e:	4620      	mov	r0, r4
    b760:	f7ff fcee 	bl	b140 <dw1000_read_time_tracking_offset>
    b764:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
    b768:	e6f4      	b.n	b554 <dw1000_interrupt_ev_cb+0x284>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
    b76a:	4620      	mov	r0, r4
    b76c:	f7ff fd9e 	bl	b2ac <dw1000_ic_and_host_ptrs_equal>
    b770:	b368      	cbz	r0, b7ce <dw1000_interrupt_ev_cb+0x4fe>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
    b772:	2301      	movs	r3, #1
    b774:	461a      	mov	r2, r3
    b776:	210e      	movs	r1, #14
    b778:	4620      	mov	r0, r4
    b77a:	f7fe f8db 	bl	9934 <dw1000_read_reg>
    b77e:	4680      	mov	r8, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
    b780:	2501      	movs	r5, #1
    b782:	9502      	str	r5, [sp, #8]
    b784:	2200      	movs	r2, #0
    b786:	2300      	movs	r3, #0
    b788:	e9cd 2300 	strd	r2, r3, [sp]
    b78c:	462a      	mov	r2, r5
    b78e:	210e      	movs	r1, #14
    b790:	4620      	mov	r0, r4
    b792:	f7fe f93f 	bl	9a14 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b796:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b79a:	0a1b      	lsrs	r3, r3, #8
    b79c:	9502      	str	r5, [sp, #8]
    b79e:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
    b7a2:	f04f 0900 	mov.w	r9, #0
    b7a6:	9300      	str	r3, [sp, #0]
    b7a8:	f8cd 9004 	str.w	r9, [sp, #4]
    b7ac:	462a      	mov	r2, r5
    b7ae:	210f      	movs	r1, #15
    b7b0:	4620      	mov	r0, r4
    b7b2:	f7fe f92f 	bl	9a14 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
    b7b6:	9502      	str	r5, [sp, #8]
    b7b8:	f008 03ff 	and.w	r3, r8, #255	; 0xff
    b7bc:	9300      	str	r3, [sp, #0]
    b7be:	f8cd 9004 	str.w	r9, [sp, #4]
    b7c2:	462a      	mov	r2, r5
    b7c4:	210e      	movs	r1, #14
    b7c6:	4620      	mov	r0, r4
    b7c8:	f7fe f924 	bl	9a14 <dw1000_write_reg>
    b7cc:	e6d6      	b.n	b57c <dw1000_interrupt_ev_cb+0x2ac>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
    b7ce:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
    b7d2:	0a1b      	lsrs	r3, r3, #8
    b7d4:	2201      	movs	r2, #1
    b7d6:	9202      	str	r2, [sp, #8]
    b7d8:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
    b7dc:	9300      	str	r3, [sp, #0]
    b7de:	2300      	movs	r3, #0
    b7e0:	9301      	str	r3, [sp, #4]
    b7e2:	210f      	movs	r1, #15
    b7e4:	4620      	mov	r0, r4
    b7e6:	f7fe f915 	bl	9a14 <dw1000_write_reg>
    b7ea:	e6c7      	b.n	b57c <dw1000_interrupt_ev_cb+0x2ac>
                MAC_STATS_INC(ROV_err);
    b7ec:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
    b7f0:	3301      	adds	r3, #1
    b7f2:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
    b7f6:	2304      	movs	r3, #4
    b7f8:	9302      	str	r3, [sp, #8]
    b7fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    b7fe:	2300      	movs	r3, #0
    b800:	e9cd 2300 	strd	r2, r3, [sp]
    b804:	2200      	movs	r2, #0
    b806:	210f      	movs	r1, #15
    b808:	4620      	mov	r0, r4
    b80a:	f7fe f903 	bl	9a14 <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
    b80e:	4620      	mov	r0, r4
    b810:	f000 fe0a 	bl	c428 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
    b814:	4620      	mov	r0, r4
    b816:	f000 fdd4 	bl	c3c2 <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
    b81a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    b81e:	f043 0310 	orr.w	r3, r3, #16
    b822:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    b826:	2301      	movs	r3, #1
    b828:	2203      	movs	r2, #3
    b82a:	210f      	movs	r1, #15
    b82c:	4620      	mov	r0, r4
    b82e:	f7fe f881 	bl	9934 <dw1000_read_reg>
    b832:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    b834:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    b838:	f010 0f80 	tst.w	r0, #128	; 0x80
    b83c:	d10a      	bne.n	b854 <dw1000_interrupt_ev_cb+0x584>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b83e:	2201      	movs	r2, #1
    b840:	9202      	str	r2, [sp, #8]
    b842:	2001      	movs	r0, #1
    b844:	2100      	movs	r1, #0
    b846:	e9cd 0100 	strd	r0, r1, [sp]
    b84a:	210d      	movs	r1, #13
    b84c:	4620      	mov	r0, r4
    b84e:	f7fe f8e1 	bl	9a14 <dw1000_write_reg>
    b852:	e69e      	b.n	b592 <dw1000_interrupt_ev_cb+0x2c2>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    b854:	2301      	movs	r3, #1
    b856:	9302      	str	r3, [sp, #8]
    b858:	2201      	movs	r2, #1
    b85a:	2300      	movs	r3, #0
    b85c:	e9cd 2300 	strd	r2, r3, [sp]
    b860:	2203      	movs	r2, #3
    b862:	210d      	movs	r1, #13
    b864:	4620      	mov	r0, r4
    b866:	f7fe f8d5 	bl	9a14 <dw1000_write_reg>
    b86a:	e7e8      	b.n	b83e <dw1000_interrupt_ev_cb+0x56e>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
    b86c:	4620      	mov	r0, r4
    b86e:	f7ff fbe5 	bl	b03c <dw1000_read_carrier_integrator>
    b872:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
                             inst->sys_status & (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXDFR |
    b876:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
    b87a:	2202      	movs	r2, #2
    b87c:	9202      	str	r2, [sp, #8]
    b87e:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
    b882:	2200      	movs	r2, #0
    b884:	9300      	str	r3, [sp, #0]
    b886:	9201      	str	r2, [sp, #4]
    b888:	210f      	movs	r1, #15
    b88a:	4620      	mov	r0, r4
    b88c:	f7fe f8c2 	bl	9a14 <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
    b890:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b894:	f013 0f04 	tst.w	r3, #4
    b898:	d006      	beq.n	b8a8 <dw1000_interrupt_ev_cb+0x5d8>
            inst->control.rxauto_disable = false;
    b89a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b89e:	f36f 0382 	bfc	r3, #2, #1
    b8a2:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    b8a6:	e674      	b.n	b592 <dw1000_interrupt_ev_cb+0x2c2>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b8a8:	2201      	movs	r2, #1
    b8aa:	9202      	str	r2, [sp, #8]
    b8ac:	2001      	movs	r0, #1
    b8ae:	2100      	movs	r1, #0
    b8b0:	e9cd 0100 	strd	r0, r1, [sp]
    b8b4:	210d      	movs	r1, #13
    b8b6:	4620      	mov	r0, r4
    b8b8:	f7fe f8ac 	bl	9a14 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
    b8bc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    b8c0:	f043 0308 	orr.w	r3, r3, #8
    b8c4:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    b8c8:	e7e7      	b.n	b89a <dw1000_interrupt_ev_cb+0x5ca>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
    b8ca:	4629      	mov	r1, r5
    b8cc:	4620      	mov	r0, r4
    b8ce:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b8d0:	6bad      	ldr	r5, [r5, #56]	; 0x38
    b8d2:	2d00      	cmp	r5, #0
    b8d4:	f43f ae62 	beq.w	b59c <dw1000_interrupt_ev_cb+0x2cc>
            if (cbs != NULL && cbs->rx_complete_cb)
    b8d8:	692b      	ldr	r3, [r5, #16]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d1f5      	bne.n	b8ca <dw1000_interrupt_ev_cb+0x5fa>
    b8de:	e7f7      	b.n	b8d0 <dw1000_interrupt_ev_cb+0x600>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
    b8e0:	2301      	movs	r3, #1
    b8e2:	9302      	str	r3, [sp, #8]
    b8e4:	2210      	movs	r2, #16
    b8e6:	2300      	movs	r3, #0
    b8e8:	e9cd 2300 	strd	r2, r3, [sp]
    b8ec:	2200      	movs	r2, #0
    b8ee:	210f      	movs	r1, #15
    b8f0:	4620      	mov	r0, r4
    b8f2:	f7fe f88f 	bl	9a14 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b8f6:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    b8fa:	b90d      	cbnz	r5, b900 <dw1000_interrupt_ev_cb+0x630>
    b8fc:	e654      	b.n	b5a8 <dw1000_interrupt_ev_cb+0x2d8>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b8fe:	6bad      	ldr	r5, [r5, #56]	; 0x38
    b900:	2d00      	cmp	r5, #0
    b902:	f43f ae51 	beq.w	b5a8 <dw1000_interrupt_ev_cb+0x2d8>
            if (cbs!=NULL && cbs->tx_begins_cb)
    b906:	68ab      	ldr	r3, [r5, #8]
    b908:	2b00      	cmp	r3, #0
    b90a:	d0f8      	beq.n	b8fe <dw1000_interrupt_ev_cb+0x62e>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
    b90c:	4629      	mov	r1, r5
    b90e:	4620      	mov	r0, r4
    b910:	4798      	blx	r3
    b912:	2800      	cmp	r0, #0
    b914:	d0f3      	beq.n	b8fe <dw1000_interrupt_ev_cb+0x62e>
    b916:	e647      	b.n	b5a8 <dw1000_interrupt_ev_cb+0x2d8>
        MAC_STATS_INC(TFG_cnt);
    b918:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
    b91c:	3301      	adds	r3, #1
    b91e:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
    b922:	2301      	movs	r3, #1
    b924:	9302      	str	r3, [sp, #8]
    b926:	22f8      	movs	r2, #248	; 0xf8
    b928:	2300      	movs	r3, #0
    b92a:	e9cd 2300 	strd	r2, r3, [sp]
    b92e:	2200      	movs	r2, #0
    b930:	210f      	movs	r1, #15
    b932:	4620      	mov	r0, r4
    b934:	f7fe f86e 	bl	9a14 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
    b938:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    b93c:	f013 0f08 	tst.w	r3, #8
    b940:	d11a      	bne.n	b978 <dw1000_interrupt_ev_cb+0x6a8>
    b942:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
    b946:	b36b      	cbz	r3, b9a4 <dw1000_interrupt_ev_cb+0x6d4>
        if(!inst->sys_status_bt_lock && !inst->uwb_dev.status.autoack_triggered) {
    b948:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    b94c:	b973      	cbnz	r3, b96c <dw1000_interrupt_ev_cb+0x69c>
    b94e:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    b952:	f013 0f40 	tst.w	r3, #64	; 0x40
    b956:	d109      	bne.n	b96c <dw1000_interrupt_ev_cb+0x69c>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
    b958:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
    b95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b960:	f8b4 24e0 	ldrh.w	r2, [r4, #1248]	; 0x4e0
    b964:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    b968:	f8a3 25fa 	strh.w	r2, [r3, #1530]	; 0x5fa
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    b96c:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    b970:	bb2d      	cbnz	r5, b9be <dw1000_interrupt_ev_cb+0x6ee>
    b972:	e61f      	b.n	b5b4 <dw1000_interrupt_ev_cb+0x2e4>
    b974:	0010e400 	.word	0x0010e400
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    b978:	2201      	movs	r2, #1
    b97a:	9202      	str	r2, [sp, #8]
    b97c:	2001      	movs	r0, #1
    b97e:	2100      	movs	r1, #0
    b980:	e9cd 0100 	strd	r0, r1, [sp]
    b984:	210d      	movs	r1, #13
    b986:	4620      	mov	r0, r4
    b988:	f7fe f844 	bl	9a14 <dw1000_write_reg>
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
    b98c:	2305      	movs	r3, #5
    b98e:	2200      	movs	r2, #0
    b990:	2117      	movs	r1, #23
    b992:	4620      	mov	r0, r4
    b994:	f7fd ffce 	bl	9934 <dw1000_read_reg>
    b998:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
    b99a:	b2cb      	uxtb	r3, r1
    b99c:	4620      	mov	r0, r4
    b99e:	f7fe ff53 	bl	a848 <update_rx_window_timeout>
    b9a2:	e7ce      	b.n	b942 <dw1000_interrupt_ev_cb+0x672>
    b9a4:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    b9a8:	f002 fcd0 	bl	e34c <os_sem_release>
            assert(err == DPL_OK);
    b9ac:	2800      	cmp	r0, #0
    b9ae:	d0cb      	beq.n	b948 <dw1000_interrupt_ev_cb+0x678>
    b9b0:	2300      	movs	r3, #0
    b9b2:	461a      	mov	r2, r3
    b9b4:	4619      	mov	r1, r3
    b9b6:	4618      	mov	r0, r3
    b9b8:	f001 fcd2 	bl	d360 <__assert_func>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    b9bc:	6bad      	ldr	r5, [r5, #56]	; 0x38
    b9be:	2d00      	cmp	r5, #0
    b9c0:	f43f adf8 	beq.w	b5b4 <dw1000_interrupt_ev_cb+0x2e4>
            if (cbs!=NULL && cbs->tx_complete_cb)
    b9c4:	68eb      	ldr	r3, [r5, #12]
    b9c6:	2b00      	cmp	r3, #0
    b9c8:	d0f8      	beq.n	b9bc <dw1000_interrupt_ev_cb+0x6ec>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
    b9ca:	4629      	mov	r1, r5
    b9cc:	4620      	mov	r0, r4
    b9ce:	4798      	blx	r3
    b9d0:	2800      	cmp	r0, #0
    b9d2:	d0f3      	beq.n	b9bc <dw1000_interrupt_ev_cb+0x6ec>
    b9d4:	e5ee      	b.n	b5b4 <dw1000_interrupt_ev_cb+0x2e4>
        MAC_STATS_INC(TXBUF_err);
    b9d6:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
    b9da:	3301      	adds	r3, #1
    b9dc:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
    b9e0:	2304      	movs	r3, #4
    b9e2:	9302      	str	r3, [sp, #8]
    b9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b9e8:	2300      	movs	r3, #0
    b9ea:	e9cd 2300 	strd	r2, r3, [sp]
    b9ee:	2200      	movs	r2, #0
    b9f0:	210f      	movs	r1, #15
    b9f2:	4620      	mov	r0, r4
    b9f4:	f7fe f80e 	bl	9a14 <dw1000_write_reg>
    b9f8:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	f47f addf 	bne.w	b5c0 <dw1000_interrupt_ev_cb+0x2f0>
    ba02:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
    ba06:	f002 fca1 	bl	e34c <os_sem_release>
            assert(err == DPL_OK);
    ba0a:	2800      	cmp	r0, #0
    ba0c:	f43f add8 	beq.w	b5c0 <dw1000_interrupt_ev_cb+0x2f0>
    ba10:	2300      	movs	r3, #0
    ba12:	461a      	mov	r2, r3
    ba14:	4619      	mov	r1, r3
    ba16:	4618      	mov	r0, r3
    ba18:	f001 fca2 	bl	d360 <__assert_func>
        MAC_STATS_INC(LDE_err);
    ba1c:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
    ba20:	3301      	adds	r3, #1
    ba22:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
    ba26:	2304      	movs	r3, #4
    ba28:	9302      	str	r3, [sp, #8]
    ba2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    ba2e:	2300      	movs	r3, #0
    ba30:	e9cd 2300 	strd	r2, r3, [sp]
    ba34:	2200      	movs	r2, #0
    ba36:	210f      	movs	r1, #15
    ba38:	4620      	mov	r0, r4
    ba3a:	f7fd ffeb 	bl	9a14 <dw1000_write_reg>
    ba3e:	e5c5      	b.n	b5cc <dw1000_interrupt_ev_cb+0x2fc>
        MAC_STATS_INC(RTO_cnt);
    ba40:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
    ba44:	3301      	adds	r3, #1
    ba46:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
    ba4a:	2304      	movs	r3, #4
    ba4c:	9302      	str	r3, [sp, #8]
    ba4e:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
    ba52:	2300      	movs	r3, #0
    ba54:	e9cd 2300 	strd	r2, r3, [sp]
    ba58:	2200      	movs	r2, #0
    ba5a:	210f      	movs	r1, #15
    ba5c:	4620      	mov	r0, r4
    ba5e:	f7fd ffd9 	bl	9a14 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
    ba62:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    ba66:	f013 0f08 	tst.w	r3, #8
    ba6a:	d127      	bne.n	babc <dw1000_interrupt_ev_cb+0x7ec>
        if (!inst->control.abs_timeout) {
    ba6c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    ba70:	f013 0f08 	tst.w	r3, #8
    ba74:	f47f adaf 	bne.w	b5d6 <dw1000_interrupt_ev_cb+0x306>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
    ba78:	2302      	movs	r3, #2
    ba7a:	9302      	str	r3, [sp, #8]
    ba7c:	2240      	movs	r2, #64	; 0x40
    ba7e:	2300      	movs	r3, #0
    ba80:	e9cd 2300 	strd	r2, r3, [sp]
    ba84:	2200      	movs	r2, #0
    ba86:	210d      	movs	r1, #13
    ba88:	4620      	mov	r0, r4
    ba8a:	f7fd ffc3 	bl	9a14 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
    ba8e:	4620      	mov	r0, r4
    ba90:	f000 fc97 	bl	c3c2 <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
    ba94:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    ba98:	f36f 0341 	bfc	r3, #1, #1
    ba9c:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.rxauto_disable = false;
    baa0:	b2db      	uxtb	r3, r3
    baa2:	f36f 0382 	bfc	r3, #2, #1
    baa6:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.abs_timeout = false;
    baaa:	b2db      	uxtb	r3, r3
    baac:	f36f 03c3 	bfc	r3, #3, #1
    bab0:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    bab4:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    bab8:	bb3d      	cbnz	r5, bb0a <dw1000_interrupt_ev_cb+0x83a>
    baba:	e58c      	b.n	b5d6 <dw1000_interrupt_ev_cb+0x306>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
    babc:	2305      	movs	r3, #5
    babe:	2200      	movs	r2, #0
    bac0:	2106      	movs	r1, #6
    bac2:	4620      	mov	r0, r4
    bac4:	f7fd ff36 	bl	9934 <dw1000_read_reg>
            uint32_t new_timeout = calc_rx_window_timeout(systime, inst->uwb_dev.abs_timeout);
    bac8:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
    bacc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    bad0:	b2c9      	uxtb	r1, r1
    bad2:	f7fe fb95 	bl	a200 <calc_rx_window_timeout>
    bad6:	4605      	mov	r5, r0
            if (new_timeout > 1) {
    bad8:	2801      	cmp	r0, #1
    bada:	d806      	bhi.n	baea <dw1000_interrupt_ev_cb+0x81a>
                inst->control.abs_timeout = false;
    badc:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    bae0:	f36f 03c3 	bfc	r3, #3, #1
    bae4:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    bae8:	e7c0      	b.n	ba6c <dw1000_interrupt_ev_cb+0x79c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    baea:	2201      	movs	r2, #1
    baec:	9202      	str	r2, [sp, #8]
    baee:	2001      	movs	r0, #1
    baf0:	2100      	movs	r1, #0
    baf2:	e9cd 0100 	strd	r0, r1, [sp]
    baf6:	210d      	movs	r1, #13
    baf8:	4620      	mov	r0, r4
    bafa:	f7fd ff8b 	bl	9a14 <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
    bafe:	4629      	mov	r1, r5
    bb00:	4620      	mov	r0, r4
    bb02:	f7fe fe92 	bl	a82a <dw1000_adj_rx_timeout>
    bb06:	e7b1      	b.n	ba6c <dw1000_interrupt_ev_cb+0x79c>
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    bb08:	6bad      	ldr	r5, [r5, #56]	; 0x38
    bb0a:	2d00      	cmp	r5, #0
    bb0c:	f43f ad63 	beq.w	b5d6 <dw1000_interrupt_ev_cb+0x306>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
    bb10:	69ab      	ldr	r3, [r5, #24]
    bb12:	2b00      	cmp	r3, #0
    bb14:	d0f8      	beq.n	bb08 <dw1000_interrupt_ev_cb+0x838>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
    bb16:	4629      	mov	r1, r5
    bb18:	4620      	mov	r0, r4
    bb1a:	4798      	blx	r3
    bb1c:	e7f4      	b.n	bb08 <dw1000_interrupt_ev_cb+0x838>
        MAC_STATS_INC(RX_err);
    bb1e:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
    bb22:	3301      	adds	r3, #1
    bb24:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
    bb28:	2304      	movs	r3, #4
    bb2a:	9302      	str	r3, [sp, #8]
    bb2c:	a37c      	add	r3, pc, #496	; (adr r3, bd20 <dw1000_interrupt_ev_cb+0xa50>)
    bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    bb32:	e9cd 2300 	strd	r2, r3, [sp]
    bb36:	2200      	movs	r2, #0
    bb38:	210f      	movs	r1, #15
    bb3a:	4620      	mov	r0, r4
    bb3c:	f7fd ff6a 	bl	9a14 <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
    bb40:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
    bb44:	f013 0f10 	tst.w	r3, #16
    bb48:	d004      	beq.n	bb54 <dw1000_interrupt_ev_cb+0x884>
    bb4a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    bb4e:	f013 0f04 	tst.w	r3, #4
    bb52:	d121      	bne.n	bb98 <dw1000_interrupt_ev_cb+0x8c8>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
    bb54:	2301      	movs	r3, #1
    bb56:	9302      	str	r3, [sp, #8]
    bb58:	2240      	movs	r2, #64	; 0x40
    bb5a:	2300      	movs	r3, #0
    bb5c:	e9cd 2300 	strd	r2, r3, [sp]
    bb60:	2200      	movs	r2, #0
    bb62:	210d      	movs	r1, #13
    bb64:	4620      	mov	r0, r4
    bb66:	f7fd ff55 	bl	9a14 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
    bb6a:	4620      	mov	r0, r4
    bb6c:	f000 fc29 	bl	c3c2 <dw1000_phy_rx_reset>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
    bb70:	2201      	movs	r2, #1
    bb72:	9202      	str	r2, [sp, #8]
    bb74:	2001      	movs	r0, #1
    bb76:	2100      	movs	r1, #0
    bb78:	e9cd 0100 	strd	r0, r1, [sp]
    bb7c:	210d      	movs	r1, #13
    bb7e:	4620      	mov	r0, r4
    bb80:	f7fd ff48 	bl	9a14 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
    bb84:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
    bb88:	f013 0f08 	tst.w	r3, #8
    bb8c:	d134      	bne.n	bbf8 <dw1000_interrupt_ev_cb+0x928>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    bb8e:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    bb92:	2d00      	cmp	r5, #0
    bb94:	d13d      	bne.n	bc12 <dw1000_interrupt_ev_cb+0x942>
    bb96:	e524      	b.n	b5e2 <dw1000_interrupt_ev_cb+0x312>
            MAC_STATS_INC(ROV_err);
    bb98:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
    bb9c:	3301      	adds	r3, #1
    bb9e:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
    bba2:	4620      	mov	r0, r4
    bba4:	f000 fc0d 	bl	c3c2 <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
    bba8:	2501      	movs	r5, #1
    bbaa:	9502      	str	r5, [sp, #8]
    bbac:	2201      	movs	r2, #1
    bbae:	2300      	movs	r3, #0
    bbb0:	e9cd 2300 	strd	r2, r3, [sp]
    bbb4:	2203      	movs	r2, #3
    bbb6:	210d      	movs	r1, #13
    bbb8:	4620      	mov	r0, r4
    bbba:	f7fd ff2b 	bl	9a14 <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
    bbbe:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
    bbc2:	f043 0310 	orr.w	r3, r3, #16
    bbc6:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
    bbca:	462b      	mov	r3, r5
    bbcc:	2203      	movs	r2, #3
    bbce:	210f      	movs	r1, #15
    bbd0:	4620      	mov	r0, r4
    bbd2:	f7fd feaf 	bl	9934 <dw1000_read_reg>
    bbd6:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
    bbd8:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
    bbdc:	f010 0f80 	tst.w	r0, #128	; 0x80
    bbe0:	d0c6      	beq.n	bb70 <dw1000_interrupt_ev_cb+0x8a0>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
    bbe2:	9502      	str	r5, [sp, #8]
    bbe4:	2201      	movs	r2, #1
    bbe6:	2300      	movs	r3, #0
    bbe8:	e9cd 2300 	strd	r2, r3, [sp]
    bbec:	2203      	movs	r2, #3
    bbee:	210d      	movs	r1, #13
    bbf0:	4620      	mov	r0, r4
    bbf2:	f7fd ff0f 	bl	9a14 <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
    bbf6:	e7bb      	b.n	bb70 <dw1000_interrupt_ev_cb+0x8a0>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
    bbf8:	2305      	movs	r3, #5
    bbfa:	2200      	movs	r2, #0
    bbfc:	2106      	movs	r1, #6
    bbfe:	4620      	mov	r0, r4
    bc00:	f7fd fe98 	bl	9934 <dw1000_read_reg>
    bc04:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
    bc06:	b2cb      	uxtb	r3, r1
    bc08:	4620      	mov	r0, r4
    bc0a:	f7fe fe1d 	bl	a848 <update_rx_window_timeout>
    bc0e:	e7be      	b.n	bb8e <dw1000_interrupt_ev_cb+0x8be>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    bc10:	6bad      	ldr	r5, [r5, #56]	; 0x38
    bc12:	2d00      	cmp	r5, #0
    bc14:	f43f ace5 	beq.w	b5e2 <dw1000_interrupt_ev_cb+0x312>
            if (cbs!=NULL && cbs->rx_error_cb)
    bc18:	69eb      	ldr	r3, [r5, #28]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	d0f8      	beq.n	bc10 <dw1000_interrupt_ev_cb+0x940>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
    bc1e:	4629      	mov	r1, r5
    bc20:	4620      	mov	r0, r4
    bc22:	4798      	blx	r3
    bc24:	e7f4      	b.n	bc10 <dw1000_interrupt_ev_cb+0x940>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
    bc26:	2301      	movs	r3, #1
    bc28:	9302      	str	r3, [sp, #8]
    bc2a:	2280      	movs	r2, #128	; 0x80
    bc2c:	2300      	movs	r3, #0
    bc2e:	e9cd 2300 	strd	r2, r3, [sp]
    bc32:	2202      	movs	r2, #2
    bc34:	210f      	movs	r1, #15
    bc36:	4620      	mov	r0, r4
    bc38:	f7fd feec 	bl	9a14 <dw1000_write_reg>
    bc3c:	e4d7      	b.n	b5ee <dw1000_interrupt_ev_cb+0x31e>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
    bc3e:	2304      	movs	r3, #4
    bc40:	9302      	str	r3, [sp, #8]
    bc42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    bc46:	2300      	movs	r3, #0
    bc48:	e9cd 2300 	strd	r2, r3, [sp]
    bc4c:	2200      	movs	r2, #0
    bc4e:	210f      	movs	r1, #15
    bc50:	4620      	mov	r0, r4
    bc52:	f7fd fedf 	bl	9a14 <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
    bc56:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
    bc5a:	3301      	adds	r3, #1
    bc5c:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
    bc60:	e4cb      	b.n	b5fa <dw1000_interrupt_ev_cb+0x32a>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
    bc62:	2304      	movs	r3, #4
    bc64:	9302      	str	r3, [sp, #8]
    bc66:	2202      	movs	r2, #2
    bc68:	2300      	movs	r3, #0
    bc6a:	e9cd 2300 	strd	r2, r3, [sp]
    bc6e:	2200      	movs	r2, #0
    bc70:	210f      	movs	r1, #15
    bc72:	4620      	mov	r0, r4
    bc74:	f7fd fece 	bl	9a14 <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    bc78:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
    bc7c:	f04f 0802 	mov.w	r8, #2
    bc80:	f8cd 8008 	str.w	r8, [sp, #8]
    bc84:	2500      	movs	r5, #0
    bc86:	9300      	str	r3, [sp, #0]
    bc88:	9501      	str	r5, [sp, #4]
    bc8a:	f641 0204 	movw	r2, #6148	; 0x1804
    bc8e:	212e      	movs	r1, #46	; 0x2e
    bc90:	4620      	mov	r0, r4
    bc92:	f7fd febf 	bl	9a14 <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
    bc96:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
    bc9a:	f8cd 8008 	str.w	r8, [sp, #8]
    bc9e:	9300      	str	r3, [sp, #0]
    bca0:	9501      	str	r5, [sp, #4]
    bca2:	462a      	mov	r2, r5
    bca4:	2118      	movs	r1, #24
    bca6:	4620      	mov	r0, r4
    bca8:	f7fd feb4 	bl	9a14 <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
    bcac:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
    bcb0:	f365 0300 	bfi	r3, r5, #0, #1
    bcb4:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    bcb8:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
    bcbc:	b90d      	cbnz	r5, bcc2 <dw1000_interrupt_ev_cb+0x9f2>
    bcbe:	e4a2      	b.n	b606 <dw1000_interrupt_ev_cb+0x336>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    bcc0:	6bad      	ldr	r5, [r5, #56]	; 0x38
    bcc2:	2d00      	cmp	r5, #0
    bcc4:	f43f ac9f 	beq.w	b606 <dw1000_interrupt_ev_cb+0x336>
            if (cbs!=NULL && cbs->sleep_cb)
    bcc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    bcca:	2b00      	cmp	r3, #0
    bccc:	d0f8      	beq.n	bcc0 <dw1000_interrupt_ev_cb+0x9f0>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
    bcce:	4629      	mov	r1, r5
    bcd0:	4620      	mov	r0, r4
    bcd2:	4798      	blx	r3
    bcd4:	e7f4      	b.n	bcc0 <dw1000_interrupt_ev_cb+0x9f0>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    bcd6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    bcda:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    bcde:	f001 fe73 	bl	d9c8 <os_eventq_put>
        if(!inst->sys_status_bt_lock) {
    bce2:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
    bce6:	2b00      	cmp	r3, #0
    bce8:	f47f ab0e 	bne.w	b308 <dw1000_interrupt_ev_cb+0x38>
            DW1000_SYS_STATUS_BT_PTR(inst).interrupt_reentry = 1;
    bcec:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
    bcf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bcf4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    bcf8:	f893 25f9 	ldrb.w	r2, [r3, #1529]	; 0x5f9
    bcfc:	f042 0201 	orr.w	r2, r2, #1
    bd00:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
    bd04:	f7ff bb00 	b.w	b308 <dw1000_interrupt_ev_cb+0x38>
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    bd08:	f8b4 5df0 	ldrh.w	r5, [r4, #3568]	; 0xdf0
    bd0c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    bd10:	f006 f84f 	bl	11db2 <dpl_cputime_get32>
    bd14:	eb04 1405 	add.w	r4, r4, r5, lsl #4
    bd18:	f8c4 05fc 	str.w	r0, [r4, #1532]	; 0x5fc
}
    bd1c:	f7ff baf9 	b.w	b312 <dw1000_interrupt_ev_cb+0x42>
    bd20:	24119000 	.word	0x24119000
    bd24:	00000000 	.word	0x00000000

0000bd28 <dw1000_calc_fppl>:
    if (diag->pacc_cnt == 0 ||
    bd28:	8a4a      	ldrh	r2, [r1, #18]
    bd2a:	b3e2      	cbz	r2, bda6 <dw1000_calc_fppl+0x7e>
{
    bd2c:	b510      	push	{r4, lr}
    bd2e:	ed2d 8b02 	vpush	{d8}
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
    bd32:	890b      	ldrh	r3, [r1, #8]
    if (diag->pacc_cnt == 0 ||
    bd34:	b91b      	cbnz	r3, bd3e <dw1000_calc_fppl+0x16>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
    bd36:	898c      	ldrh	r4, [r1, #12]
    bd38:	b90c      	cbnz	r4, bd3e <dw1000_calc_fppl+0x16>
    bd3a:	89cc      	ldrh	r4, [r1, #14]
    bd3c:	b3b4      	cbz	r4, bdac <dw1000_calc_fppl+0x84>
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    bd3e:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
    bd42:	2801      	cmp	r0, #1
    bd44:	d02c      	beq.n	bda0 <dw1000_calc_fppl+0x78>
    bd46:	ed9f 8a1b 	vldr	s16, [pc, #108]	; bdb4 <dw1000_calc_fppl+0x8c>
    N = (float)(diag->pacc_cnt);
    bd4a:	ee07 2a90 	vmov	s15, r2
    bd4e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
    bd52:	fb03 f303 	mul.w	r3, r3, r3
    bd56:	ee07 3a90 	vmov	s15, r3
    bd5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
    bd5e:	898b      	ldrh	r3, [r1, #12]
    bd60:	fb03 f303 	mul.w	r3, r3, r3
    bd64:	ee07 3a90 	vmov	s15, r3
    bd68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
    bd6c:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
    bd70:	89cb      	ldrh	r3, [r1, #14]
    bd72:	fb03 f303 	mul.w	r3, r3, r3
    bd76:	ee07 3a90 	vmov	s15, r3
    bd7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
    bd7e:	ee77 7a27 	vadd.f32	s15, s14, s15
    v /= N * N;
    bd82:	ee20 0a00 	vmul.f32	s0, s0, s0
    fppl = 10.0f * log10f(v) - A;
    bd86:	ee87 0a80 	vdiv.f32	s0, s15, s0
    bd8a:	f016 fc9f 	bl	226cc <log10f>
    bd8e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    bd92:	ee20 0a27 	vmul.f32	s0, s0, s15
    bd96:	ee30 0a48 	vsub.f32	s0, s0, s16
}
    bd9a:	ecbd 8b02 	vpop	{d8}
    bd9e:	bd10      	pop	{r4, pc}
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    bda0:	ed9f 8a05 	vldr	s16, [pc, #20]	; bdb8 <dw1000_calc_fppl+0x90>
    bda4:	e7d1      	b.n	bd4a <dw1000_calc_fppl+0x22>
        return DPL_FLOAT32_NAN();
    bda6:	ed9f 0a05 	vldr	s0, [pc, #20]	; bdbc <dw1000_calc_fppl+0x94>
}
    bdaa:	4770      	bx	lr
        return DPL_FLOAT32_NAN();
    bdac:	ed9f 0a03 	vldr	s0, [pc, #12]	; bdbc <dw1000_calc_fppl+0x94>
    bdb0:	e7f3      	b.n	bd9a <dw1000_calc_fppl+0x72>
    bdb2:	bf00      	nop
    bdb4:	42f37ae1 	.word	0x42f37ae1
    bdb8:	42e38a3d 	.word	0x42e38a3d
    bdbc:	7fc00000 	.word	0x7fc00000

0000bdc0 <dw1000_get_fppl>:
{
    bdc0:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
    bdc2:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    bdc6:	f013 0f40 	tst.w	r3, #64	; 0x40
    bdca:	d102      	bne.n	bdd2 <dw1000_get_fppl+0x12>
        return DPL_FLOAT32_NAN();
    bdcc:	ed9f 0a03 	vldr	s0, [pc, #12]	; bddc <dw1000_get_fppl+0x1c>
}
    bdd0:	bd08      	pop	{r3, pc}
    return dw1000_calc_fppl(inst, &inst->rxdiag);
    bdd2:	f200 519c 	addw	r1, r0, #1436	; 0x59c
    bdd6:	f7ff ffa7 	bl	bd28 <dw1000_calc_fppl>
    bdda:	e7f9      	b.n	bdd0 <dw1000_get_fppl+0x10>
    bddc:	7fc00000 	.word	0x7fc00000

0000bde0 <dw1000_calc_rssi>:
{
    bde0:	b508      	push	{r3, lr}
    bde2:	ed2d 8b02 	vpush	{d8}
    uint32_t pacc_cnt = diag->pacc_cnt;
    bde6:	8a4a      	ldrh	r2, [r1, #18]
    uint32_t cir_pwr = diag->cir_pwr;
    bde8:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
    bdea:	b1eb      	cbz	r3, be28 <dw1000_calc_rssi+0x48>
    bdec:	b1fa      	cbz	r2, be2e <dw1000_calc_rssi+0x4e>
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    bdee:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    bdf2:	2901      	cmp	r1, #1
    bdf4:	d015      	beq.n	be22 <dw1000_calc_rssi+0x42>
    bdf6:	ed9f 8a0f 	vldr	s16, [pc, #60]	; be34 <dw1000_calc_rssi+0x54>
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
    bdfa:	045b      	lsls	r3, r3, #17
    bdfc:	fb02 f202 	mul.w	r2, r2, r2
    be00:	fbb3 f3f2 	udiv	r3, r3, r2
    be04:	ee00 3a10 	vmov	s0, r3
    rssi = 10.0f * log10f(A) - B;
    be08:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    be0c:	f016 fc5e 	bl	226cc <log10f>
    be10:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    be14:	ee20 0a27 	vmul.f32	s0, s0, s15
    be18:	ee30 0a48 	vsub.f32	s0, s0, s16
}
    be1c:	ecbd 8b02 	vpop	{d8}
    be20:	bd08      	pop	{r3, pc}
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
    be22:	ed9f 8a05 	vldr	s16, [pc, #20]	; be38 <dw1000_calc_rssi+0x58>
    be26:	e7e8      	b.n	bdfa <dw1000_calc_rssi+0x1a>
        return DPL_FLOAT32_NAN();
    be28:	ed9f 0a04 	vldr	s0, [pc, #16]	; be3c <dw1000_calc_rssi+0x5c>
    be2c:	e7f6      	b.n	be1c <dw1000_calc_rssi+0x3c>
    be2e:	ed9f 0a03 	vldr	s0, [pc, #12]	; be3c <dw1000_calc_rssi+0x5c>
    be32:	e7f3      	b.n	be1c <dw1000_calc_rssi+0x3c>
    be34:	42f37ae1 	.word	0x42f37ae1
    be38:	42e38a3d 	.word	0x42e38a3d
    be3c:	7fc00000 	.word	0x7fc00000

0000be40 <dw1000_get_rssi>:
{
    be40:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
    be42:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    be46:	f013 0f40 	tst.w	r3, #64	; 0x40
    be4a:	d102      	bne.n	be52 <dw1000_get_rssi+0x12>
        return DPL_FLOAT32_NAN();
    be4c:	ed9f 0a03 	vldr	s0, [pc, #12]	; be5c <dw1000_get_rssi+0x1c>
}
    be50:	bd08      	pop	{r3, pc}
    return dw1000_calc_rssi(inst, &inst->rxdiag);
    be52:	f200 519c 	addw	r1, r0, #1436	; 0x59c
    be56:	f7ff ffc3 	bl	bde0 <dw1000_calc_rssi>
    be5a:	e7f9      	b.n	be50 <dw1000_get_rssi+0x10>
    be5c:	7fc00000 	.word	0x7fc00000

0000be60 <dw1000_estimate_los>:
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
    be60:	ee30 0a60 	vsub.f32	s0, s0, s1
    be64:	eeb0 0ac0 	vabs.f32	s0, s0
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
    be68:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    be6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    be74:	d413      	bmi.n	be9e <dw1000_estimate_los+0x3e>
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
    be76:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    be7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
    be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    be82:	dc0f      	bgt.n	bea4 <dw1000_estimate_los+0x44>
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
    be84:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
    be88:	ee30 0a60 	vsub.f32	s0, s0, s1
    be8c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    be90:	ee20 0a27 	vmul.f32	s0, s0, s15
    be94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    be98:	ee37 0ac0 	vsub.f32	s0, s15, s0
    return los;
    be9c:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
    be9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    bea2:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
    bea4:	ed9f 0a01 	vldr	s0, [pc, #4]	; beac <dw1000_estimate_los+0x4c>
}
    bea8:	4770      	bx	lr
    beaa:	bf00      	nop
    beac:	00000000 	.word	0x00000000

0000beb0 <dw1000_read_systime>:
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
    beb0:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
    beb2:	2305      	movs	r3, #5
    beb4:	2200      	movs	r2, #0
    beb6:	2106      	movs	r1, #6
    beb8:	f7fd fd3c 	bl	9934 <dw1000_read_reg>
}
    bebc:	b2c9      	uxtb	r1, r1
    bebe:	bd08      	pop	{r3, pc}

0000bec0 <dw1000_read_systime_lo>:
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
    bec0:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
    bec2:	2304      	movs	r3, #4
    bec4:	2200      	movs	r2, #0
    bec6:	2106      	movs	r1, #6
    bec8:	f7fd fd34 	bl	9934 <dw1000_read_reg>
}
    becc:	bd08      	pop	{r3, pc}

0000bece <dw1000_read_rxtime>:
inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    bece:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
    bed0:	2305      	movs	r3, #5
    bed2:	2200      	movs	r2, #0
    bed4:	2115      	movs	r1, #21
    bed6:	f7fd fd2d 	bl	9934 <dw1000_read_reg>
}
    beda:	b2c9      	uxtb	r1, r1
    bedc:	bd08      	pop	{r3, pc}

0000bede <dw1000_read_rxtime_lo>:
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
    bede:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
    bee0:	2304      	movs	r3, #4
    bee2:	2200      	movs	r2, #0
    bee4:	2115      	movs	r1, #21
    bee6:	f7fd fd25 	bl	9934 <dw1000_read_reg>
}
    beea:	bd08      	pop	{r3, pc}

0000beec <dw1000_read_txtime>:
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    beec:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
    beee:	2305      	movs	r3, #5
    bef0:	2200      	movs	r2, #0
    bef2:	2117      	movs	r1, #23
    bef4:	f7fd fd1e 	bl	9934 <dw1000_read_reg>
    return time;
}
    bef8:	b2c9      	uxtb	r1, r1
    befa:	bd08      	pop	{r3, pc}

0000befc <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
    befc:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
    befe:	2304      	movs	r3, #4
    bf00:	2200      	movs	r2, #0
    bf02:	2117      	movs	r1, #23
    bf04:	f7fd fd16 	bl	9934 <dw1000_read_reg>
    return time;
}
    bf08:	bd08      	pop	{r3, pc}
	...

0000bf0c <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
    bf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf0e:	b085      	sub	sp, #20
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
    bf10:	1e4b      	subs	r3, r1, #1
    bf12:	b2db      	uxtb	r3, r3
    bf14:	2b06      	cmp	r3, #6
    bf16:	d879      	bhi.n	c00c <dw1000_configcwmode+0x100>
    bf18:	4604      	mov	r4, r0
    bf1a:	460d      	mov	r5, r1
    bf1c:	2906      	cmp	r1, #6
    bf1e:	d075      	beq.n	c00c <dw1000_configcwmode+0x100>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
    bf20:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
    bf24:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
    bf28:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
    bf2c:	f000 ffe6 	bl	cefc <hal_spi_disable>
    assert(rc == 0);
    bf30:	2800      	cmp	r0, #0
    bf32:	d171      	bne.n	c018 <dw1000_configcwmode+0x10c>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    bf34:	f204 5194 	addw	r1, r4, #1428	; 0x594
    bf38:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    bf3c:	f000 ff9c 	bl	ce78 <hal_spi_config>
    assert(rc == 0);
    bf40:	2800      	cmp	r0, #0
    bf42:	d16f      	bne.n	c024 <dw1000_configcwmode+0x118>
    rc = hal_spi_enable(inst->spi_num);
    bf44:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    bf48:	f000 ffb2 	bl	ceb0 <hal_spi_enable>
    assert(rc == 0);
    bf4c:	2800      	cmp	r0, #0
    bf4e:	d16f      	bne.n	c030 <dw1000_configcwmode+0x124>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
    bf50:	4620      	mov	r0, r4
    bf52:	f000 f8ee 	bl	c132 <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
    bf56:	4b39      	ldr	r3, [pc, #228]	; (c03c <dw1000_configcwmode+0x130>)
    bf58:	5d5d      	ldrb	r5, [r3, r5]
    bf5a:	4b39      	ldr	r3, [pc, #228]	; (c040 <dw1000_configcwmode+0x134>)
    bf5c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
    bf60:	2704      	movs	r7, #4
    bf62:	9702      	str	r7, [sp, #8]
    bf64:	2600      	movs	r6, #0
    bf66:	9300      	str	r3, [sp, #0]
    bf68:	9601      	str	r6, [sp, #4]
    bf6a:	2207      	movs	r2, #7
    bf6c:	212b      	movs	r1, #43	; 0x2b
    bf6e:	4620      	mov	r0, r4
    bf70:	f7fd fd50 	bl	9a14 <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
    bf74:	4b33      	ldr	r3, [pc, #204]	; (c044 <dw1000_configcwmode+0x138>)
    bf76:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
    bf7a:	9702      	str	r7, [sp, #8]
    bf7c:	9300      	str	r3, [sp, #0]
    bf7e:	9601      	str	r6, [sp, #4]
    bf80:	220c      	movs	r2, #12
    bf82:	2128      	movs	r1, #40	; 0x28
    bf84:	4620      	mov	r0, r4
    bf86:	f7fd fd45 	bl	9a14 <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
    bf8a:	9702      	str	r7, [sp, #8]
    bf8c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
    bf90:	2300      	movs	r3, #0
    bf92:	e9cd 2300 	strd	r2, r3, [sp]
    bf96:	4632      	mov	r2, r6
    bf98:	2128      	movs	r1, #40	; 0x28
    bf9a:	4620      	mov	r0, r4
    bf9c:	f7fd fd3a 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
    bfa0:	9702      	str	r7, [sp, #8]
    bfa2:	4a29      	ldr	r2, [pc, #164]	; (c048 <dw1000_configcwmode+0x13c>)
    bfa4:	2300      	movs	r3, #0
    bfa6:	e9cd 2300 	strd	r2, r3, [sp]
    bfaa:	4632      	mov	r2, r6
    bfac:	2128      	movs	r1, #40	; 0x28
    bfae:	4620      	mov	r0, r4
    bfb0:	f7fd fd30 	bl	9a14 <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
    bfb4:	2501      	movs	r5, #1
    bfb6:	9502      	str	r5, [sp, #8]
    bfb8:	2222      	movs	r2, #34	; 0x22
    bfba:	2300      	movs	r3, #0
    bfbc:	e9cd 2300 	strd	r2, r3, [sp]
    bfc0:	4632      	mov	r2, r6
    bfc2:	2136      	movs	r1, #54	; 0x36
    bfc4:	4620      	mov	r0, r4
    bfc6:	f7fd fd25 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
    bfca:	9502      	str	r5, [sp, #8]
    bfcc:	2207      	movs	r2, #7
    bfce:	2300      	movs	r3, #0
    bfd0:	e9cd 2300 	strd	r2, r3, [sp]
    bfd4:	462a      	mov	r2, r5
    bfd6:	2136      	movs	r1, #54	; 0x36
    bfd8:	4620      	mov	r0, r4
    bfda:	f7fd fd1b 	bl	9a14 <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
    bfde:	2302      	movs	r3, #2
    bfe0:	9302      	str	r3, [sp, #8]
    bfe2:	2200      	movs	r2, #0
    bfe4:	2300      	movs	r3, #0
    bfe6:	e9cd 2300 	strd	r2, r3, [sp]
    bfea:	2226      	movs	r2, #38	; 0x26
    bfec:	2136      	movs	r1, #54	; 0x36
    bfee:	4620      	mov	r0, r4
    bff0:	f7fd fd10 	bl	9a14 <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
    bff4:	9502      	str	r5, [sp, #8]
    bff6:	2213      	movs	r2, #19
    bff8:	2300      	movs	r3, #0
    bffa:	e9cd 2300 	strd	r2, r3, [sp]
    bffe:	220c      	movs	r2, #12
    c000:	212a      	movs	r1, #42	; 0x2a
    c002:	4620      	mov	r0, r4
    c004:	f7fd fd06 	bl	9a14 <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
    c008:	b005      	add	sp, #20
    c00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(0);
    c00c:	2300      	movs	r3, #0
    c00e:	461a      	mov	r2, r3
    c010:	4619      	mov	r1, r3
    c012:	4618      	mov	r0, r3
    c014:	f001 f9a4 	bl	d360 <__assert_func>
    assert(rc == 0);
    c018:	2300      	movs	r3, #0
    c01a:	461a      	mov	r2, r3
    c01c:	4619      	mov	r1, r3
    c01e:	4618      	mov	r0, r3
    c020:	f001 f99e 	bl	d360 <__assert_func>
    assert(rc == 0);
    c024:	2300      	movs	r3, #0
    c026:	461a      	mov	r2, r3
    c028:	4619      	mov	r1, r3
    c02a:	4618      	mov	r0, r3
    c02c:	f001 f998 	bl	d360 <__assert_func>
    assert(rc == 0);
    c030:	2300      	movs	r3, #0
    c032:	461a      	mov	r2, r3
    c034:	4619      	mov	r1, r3
    c036:	4618      	mov	r0, r3
    c038:	f001 f992 	bl	d360 <__assert_func>
    c03c:	0002364c 	.word	0x0002364c
    c040:	0002367c 	.word	0x0002367c
    c044:	0002371c 	.word	0x0002371c
    c048:	005fff00 	.word	0x005fff00

0000c04c <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
    c04c:	b510      	push	{r4, lr}
    c04e:	b084      	sub	sp, #16
    c050:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    c052:	2301      	movs	r3, #1
    c054:	2200      	movs	r2, #0
    c056:	2136      	movs	r1, #54	; 0x36
    c058:	f7fd fc6c 	bl	9934 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    c05c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
    c060:	f043 0301 	orr.w	r3, r3, #1
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    c064:	2201      	movs	r2, #1
    c066:	9202      	str	r2, [sp, #8]
    c068:	2200      	movs	r2, #0
    c06a:	9300      	str	r3, [sp, #0]
    c06c:	9201      	str	r2, [sp, #4]
    c06e:	2136      	movs	r1, #54	; 0x36
    c070:	4620      	mov	r0, r4
    c072:	f7fd fccf 	bl	9a14 <dw1000_write_reg>
}
    c076:	b004      	add	sp, #16
    c078:	bd10      	pop	{r4, pc}

0000c07a <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
    c07a:	b510      	push	{r4, lr}
    c07c:	b084      	sub	sp, #16
    c07e:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    c080:	2301      	movs	r3, #1
    c082:	2200      	movs	r2, #0
    c084:	2136      	movs	r1, #54	; 0x36
    c086:	f7fd fc55 	bl	9934 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    c08a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
    c08e:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    c092:	2201      	movs	r2, #1
    c094:	9202      	str	r2, [sp, #8]
    c096:	2200      	movs	r2, #0
    c098:	9300      	str	r3, [sp, #0]
    c09a:	9201      	str	r2, [sp, #4]
    c09c:	2136      	movs	r1, #54	; 0x36
    c09e:	4620      	mov	r0, r4
    c0a0:	f7fd fcb8 	bl	9a14 <dw1000_write_reg>
}
    c0a4:	b004      	add	sp, #16
    c0a6:	bd10      	pop	{r4, pc}

0000c0a8 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
    c0a8:	b510      	push	{r4, lr}
    c0aa:	b084      	sub	sp, #16
    c0ac:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    c0ae:	2301      	movs	r3, #1
    c0b0:	2200      	movs	r2, #0
    c0b2:	2136      	movs	r1, #54	; 0x36
    c0b4:	f7fd fc3e 	bl	9934 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
    c0b8:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
    c0bc:	f043 0320 	orr.w	r3, r3, #32
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    c0c0:	2201      	movs	r2, #1
    c0c2:	9202      	str	r2, [sp, #8]
    c0c4:	2200      	movs	r2, #0
    c0c6:	9300      	str	r3, [sp, #0]
    c0c8:	9201      	str	r2, [sp, #4]
    c0ca:	2136      	movs	r1, #54	; 0x36
    c0cc:	4620      	mov	r0, r4
    c0ce:	f7fd fca1 	bl	9a14 <dw1000_write_reg>
}
    c0d2:	b004      	add	sp, #16
    c0d4:	bd10      	pop	{r4, pc}

0000c0d6 <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
    c0d6:	b530      	push	{r4, r5, lr}
    c0d8:	b085      	sub	sp, #20
    c0da:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
    c0dc:	2501      	movs	r5, #1
    c0de:	9502      	str	r5, [sp, #8]
    c0e0:	2201      	movs	r2, #1
    c0e2:	2300      	movs	r3, #0
    c0e4:	e9cd 2300 	strd	r2, r3, [sp]
    c0e8:	2200      	movs	r2, #0
    c0ea:	2136      	movs	r1, #54	; 0x36
    c0ec:	f7fd fc92 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
    c0f0:	9502      	str	r5, [sp, #8]
    c0f2:	2203      	movs	r2, #3
    c0f4:	2300      	movs	r3, #0
    c0f6:	e9cd 2300 	strd	r2, r3, [sp]
    c0fa:	462a      	mov	r2, r5
    c0fc:	2136      	movs	r1, #54	; 0x36
    c0fe:	4620      	mov	r0, r4
    c100:	f7fd fc88 	bl	9a14 <dw1000_write_reg>
}
    c104:	b005      	add	sp, #20
    c106:	bd30      	pop	{r4, r5, pc}

0000c108 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
    c108:	b510      	push	{r4, lr}
    c10a:	b084      	sub	sp, #16
    c10c:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
    c10e:	2301      	movs	r3, #1
    c110:	2200      	movs	r2, #0
    c112:	2136      	movs	r1, #54	; 0x36
    c114:	f7fd fc0e 	bl	9934 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
    c118:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
    c11c:	2301      	movs	r3, #1
    c11e:	9302      	str	r3, [sp, #8]
    c120:	2200      	movs	r2, #0
    c122:	9000      	str	r0, [sp, #0]
    c124:	9201      	str	r2, [sp, #4]
    c126:	2136      	movs	r1, #54	; 0x36
    c128:	4620      	mov	r0, r4
    c12a:	f7fd fc73 	bl	9a14 <dw1000_write_reg>
}
    c12e:	b004      	add	sp, #16
    c130:	bd10      	pop	{r4, pc}

0000c132 <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
    c132:	b510      	push	{r4, lr}
    c134:	b084      	sub	sp, #16
    c136:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
    c138:	f7ff ff88 	bl	c04c <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
    c13c:	2302      	movs	r3, #2
    c13e:	9302      	str	r3, [sp, #8]
    c140:	2200      	movs	r2, #0
    c142:	2300      	movs	r3, #0
    c144:	e9cd 2300 	strd	r2, r3, [sp]
    c148:	2204      	movs	r2, #4
    c14a:	2136      	movs	r1, #54	; 0x36
    c14c:	4620      	mov	r0, r4
    c14e:	f7fd fc61 	bl	9a14 <dw1000_write_reg>
}
    c152:	b004      	add	sp, #16
    c154:	bd10      	pop	{r4, pc}

0000c156 <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
    c156:	b530      	push	{r4, r5, lr}
    c158:	b085      	sub	sp, #20
    c15a:	4604      	mov	r4, r0
    c15c:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
    c15e:	2301      	movs	r3, #1
    c160:	9302      	str	r3, [sp, #8]
    c162:	226d      	movs	r2, #109	; 0x6d
    c164:	2300      	movs	r3, #0
    c166:	e9cd 2300 	strd	r2, r3, [sp]
    c16a:	f640 0206 	movw	r2, #2054	; 0x806
    c16e:	212e      	movs	r1, #46	; 0x2e
    c170:	f7fd fc50 	bl	9a14 <dw1000_write_reg>

    if(prfIndex)
    c174:	b175      	cbz	r5, c194 <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
    c176:	2302      	movs	r3, #2
    c178:	9302      	str	r3, [sp, #8]
    c17a:	f240 6207 	movw	r2, #1543	; 0x607
    c17e:	2300      	movs	r3, #0
    c180:	e9cd 2300 	strd	r2, r3, [sp]
    c184:	f641 0206 	movw	r2, #6150	; 0x1806
    c188:	212e      	movs	r1, #46	; 0x2e
    c18a:	4620      	mov	r0, r4
    c18c:	f7fd fc42 	bl	9a14 <dw1000_write_reg>
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
}
    c190:	b005      	add	sp, #20
    c192:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
    c194:	2302      	movs	r3, #2
    c196:	9302      	str	r3, [sp, #8]
    c198:	f241 6207 	movw	r2, #5639	; 0x1607
    c19c:	2300      	movs	r3, #0
    c19e:	e9cd 2300 	strd	r2, r3, [sp]
    c1a2:	f641 0206 	movw	r2, #6150	; 0x1806
    c1a6:	212e      	movs	r1, #46	; 0x2e
    c1a8:	4620      	mov	r0, r4
    c1aa:	f7fd fc33 	bl	9a14 <dw1000_write_reg>
}
    c1ae:	e7ef      	b.n	c190 <dw1000_phy_config_lde+0x3a>

0000c1b0 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
    c1b0:	b570      	push	{r4, r5, r6, lr}
    c1b2:	b084      	sub	sp, #16
    c1b4:	4605      	mov	r5, r0
    c1b6:	460c      	mov	r4, r1
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
    c1b8:	780b      	ldrb	r3, [r1, #0]
    c1ba:	2201      	movs	r2, #1
    c1bc:	9202      	str	r2, [sp, #8]
    c1be:	2600      	movs	r6, #0
    c1c0:	9300      	str	r3, [sp, #0]
    c1c2:	9601      	str	r6, [sp, #4]
    c1c4:	220b      	movs	r2, #11
    c1c6:	212a      	movs	r1, #42	; 0x2a
    c1c8:	f7fd fc24 	bl	9a14 <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
    c1cc:	6863      	ldr	r3, [r4, #4]
    c1ce:	2204      	movs	r2, #4
    c1d0:	9202      	str	r2, [sp, #8]
    c1d2:	9300      	str	r3, [sp, #0]
    c1d4:	9601      	str	r6, [sp, #4]
    c1d6:	4632      	mov	r2, r6
    c1d8:	211e      	movs	r1, #30
    c1da:	4628      	mov	r0, r5
    c1dc:	f7fd fc1a 	bl	9a14 <dw1000_write_reg>
}
    c1e0:	b004      	add	sp, #16
    c1e2:	bd70      	pop	{r4, r5, r6, pc}

0000c1e4 <dw1000_phy_init>:
{
    c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1e6:	b085      	sub	sp, #20
    c1e8:	4604      	mov	r4, r0
    if (txrf_config == NULL)
    c1ea:	2900      	cmp	r1, #0
    c1ec:	f000 80b5 	beq.w	c35a <dw1000_phy_init+0x176>
    c1f0:	460e      	mov	r6, r1
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
    c1f2:	680a      	ldr	r2, [r1, #0]
    c1f4:	684b      	ldr	r3, [r1, #4]
    c1f6:	f8c0 2524 	str.w	r2, [r0, #1316]	; 0x524
    c1fa:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    dw1000_softreset(inst);
    c1fe:	4620      	mov	r0, r4
    c200:	f7fd fca7 	bl	9b52 <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
    c204:	4620      	mov	r0, r4
    c206:	f7ff ff21 	bl	c04c <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
    c20a:	2106      	movs	r1, #6
    c20c:	4620      	mov	r0, r4
    c20e:	f7fc fdc9 	bl	8da4 <dw1000_gpio_config_leds>
    dw1000_gpio5_config_ext_txe(inst);
    c212:	4620      	mov	r0, r4
    c214:	f7fc fd98 	bl	8d48 <dw1000_gpio5_config_ext_txe>
    dw1000_gpio6_config_ext_rxe(inst);
    c218:	4620      	mov	r0, r4
    c21a:	f7fc fdac 	bl	8d76 <dw1000_gpio6_config_ext_rxe>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
    c21e:	2301      	movs	r3, #1
    c220:	2200      	movs	r2, #0
    c222:	2124      	movs	r1, #36	; 0x24
    c224:	4620      	mov	r0, r4
    c226:	f7fd fb85 	bl	9934 <dw1000_read_reg>
    c22a:	b2c0      	uxtb	r0, r0
    reg |= EC_CTRL_PLLLCK;
    c22c:	f040 0004 	orr.w	r0, r0, #4
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
    c230:	2301      	movs	r3, #1
    c232:	9302      	str	r3, [sp, #8]
    c234:	2200      	movs	r2, #0
    c236:	9000      	str	r0, [sp, #0]
    c238:	9201      	str	r2, [sp, #4]
    c23a:	2124      	movs	r1, #36	; 0x24
    c23c:	4620      	mov	r0, r4
    c23e:	f7fd fbe9 	bl	9a14 <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
    c242:	211e      	movs	r1, #30
    c244:	4620      	mov	r0, r4
    c246:	f000 fb60 	bl	c90a <_dw1000_otp_read>
    c24a:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
    c24c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c250:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
    c254:	2104      	movs	r1, #4
    c256:	4620      	mov	r0, r4
    c258:	f000 fb57 	bl	c90a <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
    c25c:	f010 0fff 	tst.w	r0, #255	; 0xff
    c260:	d17e      	bne.n	c360 <dw1000_phy_init+0x17c>
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
    c262:	2106      	movs	r1, #6
    c264:	4620      	mov	r0, r4
    c266:	f000 fb50 	bl	c90a <_dw1000_otp_read>
    c26a:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
    c26e:	2107      	movs	r1, #7
    c270:	4620      	mov	r0, r4
    c272:	f000 fb4a 	bl	c90a <_dw1000_otp_read>
    c276:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
    c27a:	2108      	movs	r1, #8
    c27c:	4620      	mov	r0, r4
    c27e:	f000 fb44 	bl	c90a <_dw1000_otp_read>
    c282:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
    c286:	2109      	movs	r1, #9
    c288:	4620      	mov	r0, r4
    c28a:	f000 fb3e 	bl	c90a <_dw1000_otp_read>
    c28e:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
    c292:	f005 051f 	and.w	r5, r5, #31
    c296:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
    c29a:	b11d      	cbz	r5, c2a4 <dw1000_phy_init+0xc0>
    c29c:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
    c2a0:	2aff      	cmp	r2, #255	; 0xff
    c2a2:	d06f      	beq.n	c384 <dw1000_phy_init+0x1a0>
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
    c2a4:	f994 351e 	ldrsb.w	r3, [r4, #1310]	; 0x51e
    c2a8:	f003 031f 	and.w	r3, r3, #31
    c2ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
    c2b0:	2201      	movs	r2, #1
    c2b2:	9202      	str	r2, [sp, #8]
    c2b4:	9300      	str	r3, [sp, #0]
    c2b6:	2300      	movs	r3, #0
    c2b8:	9301      	str	r3, [sp, #4]
    c2ba:	220e      	movs	r2, #14
    c2bc:	212b      	movs	r1, #43	; 0x2b
    c2be:	4620      	mov	r0, r4
    c2c0:	f7fd fba8 	bl	9a14 <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
    c2c4:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
    c2c8:	f013 0f04 	tst.w	r3, #4
    c2cc:	d15d      	bne.n	c38a <dw1000_phy_init+0x1a6>
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
    c2ce:	4620      	mov	r0, r4
    c2d0:	f7ff ff1a 	bl	c108 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
    c2d4:	2301      	movs	r3, #1
    c2d6:	220a      	movs	r2, #10
    c2d8:	212c      	movs	r1, #44	; 0x2c
    c2da:	4620      	mov	r0, r4
    c2dc:	f7fd fb2a 	bl	9934 <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
    c2e0:	f060 0002 	orn	r0, r0, #2
    c2e4:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
    c2e6:	2301      	movs	r3, #1
    c2e8:	9302      	str	r3, [sp, #8]
    c2ea:	2500      	movs	r5, #0
    c2ec:	9000      	str	r0, [sp, #0]
    c2ee:	9501      	str	r5, [sp, #4]
    c2f0:	220a      	movs	r2, #10
    c2f2:	212c      	movs	r1, #44	; 0x2c
    c2f4:	4620      	mov	r0, r4
    c2f6:	f7fd fb8d 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
    c2fa:	2702      	movs	r7, #2
    c2fc:	9702      	str	r7, [sp, #8]
    c2fe:	2201      	movs	r2, #1
    c300:	2300      	movs	r3, #0
    c302:	e9cd 2300 	strd	r2, r3, [sp]
    c306:	462a      	mov	r2, r5
    c308:	212c      	movs	r1, #44	; 0x2c
    c30a:	4620      	mov	r0, r4
    c30c:	f7fd fb82 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
    c310:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
    c314:	9702      	str	r7, [sp, #8]
    c316:	9300      	str	r3, [sp, #0]
    c318:	9501      	str	r5, [sp, #4]
    c31a:	f641 0204 	movw	r2, #6148	; 0x1804
    c31e:	212e      	movs	r1, #46	; 0x2e
    c320:	4620      	mov	r0, r4
    c322:	f7fd fb77 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
    c326:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
    c32a:	9702      	str	r7, [sp, #8]
    c32c:	9300      	str	r3, [sp, #0]
    c32e:	9501      	str	r5, [sp, #4]
    c330:	462a      	mov	r2, r5
    c332:	2118      	movs	r1, #24
    c334:	4620      	mov	r0, r4
    c336:	f7fd fb6d 	bl	9a14 <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
    c33a:	4631      	mov	r1, r6
    c33c:	4620      	mov	r0, r4
    c33e:	f7ff ff37 	bl	c1b0 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
    c342:	2304      	movs	r3, #4
    c344:	462a      	mov	r2, r5
    c346:	4619      	mov	r1, r3
    c348:	4620      	mov	r0, r4
    c34a:	f7fd faf3 	bl	9934 <dw1000_read_reg>
    c34e:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
    c352:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    c356:	b005      	add	sp, #20
    c358:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txrf_config = &inst->uwb_dev.config.txrf;
    c35a:	f200 5624 	addw	r6, r0, #1316	; 0x524
    c35e:	e74e      	b.n	c1fe <dw1000_phy_init+0x1a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
    c360:	2301      	movs	r3, #1
    c362:	9302      	str	r3, [sp, #8]
    c364:	2202      	movs	r2, #2
    c366:	2300      	movs	r3, #0
    c368:	e9cd 2300 	strd	r2, r3, [sp]
    c36c:	2212      	movs	r2, #18
    c36e:	212d      	movs	r1, #45	; 0x2d
    c370:	4620      	mov	r0, r4
    c372:	f7fd fb4f 	bl	9a14 <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
    c376:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    c37a:	f043 0320 	orr.w	r3, r3, #32
    c37e:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
    c382:	e76e      	b.n	c262 <dw1000_phy_init+0x7e>
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
    c384:	f884 551e 	strb.w	r5, [r4, #1310]	; 0x51e
    c388:	e78c      	b.n	c2a4 <dw1000_phy_init+0xc0>
    dw1000_phy_sysclk_LDE(inst);
    c38a:	4620      	mov	r0, r4
    c38c:	f7ff fea3 	bl	c0d6 <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
    c390:	2302      	movs	r3, #2
    c392:	9302      	str	r3, [sp, #8]
    c394:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    c398:	2300      	movs	r3, #0
    c39a:	e9cd 2300 	strd	r2, r3, [sp]
    c39e:	2206      	movs	r2, #6
    c3a0:	212d      	movs	r1, #45	; 0x2d
    c3a2:	4620      	mov	r0, r4
    c3a4:	f7fd fb36 	bl	9a14 <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
    c3a8:	2078      	movs	r0, #120	; 0x78
    c3aa:	f005 fd12 	bl	11dd2 <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
    c3ae:	4620      	mov	r0, r4
    c3b0:	f7ff feaa 	bl	c108 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
    c3b4:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
    c3b8:	f043 0310 	orr.w	r3, r3, #16
    c3bc:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
}
    c3c0:	e785      	b.n	c2ce <dw1000_phy_init+0xea>

0000c3c2 <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
    c3c2:	b570      	push	{r4, r5, r6, lr}
    c3c4:	b084      	sub	sp, #16
    c3c6:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c3c8:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
    c3cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c3d0:	4628      	mov	r0, r5
    c3d2:	f001 fd51 	bl	de78 <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
    c3d6:	b138      	cbz	r0, c3e8 <dw1000_phy_rx_reset+0x26>
        inst->uwb_dev.status.mtx_error = 1;
    c3d8:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    c3dc:	f043 0308 	orr.w	r3, r3, #8
    c3e0:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
    c3e4:	b004      	add	sp, #16
    c3e6:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
    c3e8:	2601      	movs	r6, #1
    c3ea:	9602      	str	r6, [sp, #8]
    c3ec:	22e0      	movs	r2, #224	; 0xe0
    c3ee:	2300      	movs	r3, #0
    c3f0:	e9cd 2300 	strd	r2, r3, [sp]
    c3f4:	2203      	movs	r2, #3
    c3f6:	2136      	movs	r1, #54	; 0x36
    c3f8:	4620      	mov	r0, r4
    c3fa:	f7fd fb0b 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
    c3fe:	9602      	str	r6, [sp, #8]
    c400:	22f0      	movs	r2, #240	; 0xf0
    c402:	2300      	movs	r3, #0
    c404:	e9cd 2300 	strd	r2, r3, [sp]
    c408:	2203      	movs	r2, #3
    c40a:	2136      	movs	r1, #54	; 0x36
    c40c:	4620      	mov	r0, r4
    c40e:	f7fd fb01 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c412:	4628      	mov	r0, r5
    c414:	f001 fcd4 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    c418:	2800      	cmp	r0, #0
    c41a:	d0e3      	beq.n	c3e4 <dw1000_phy_rx_reset+0x22>
    c41c:	2300      	movs	r3, #0
    c41e:	461a      	mov	r2, r3
    c420:	4619      	mov	r1, r3
    c422:	4618      	mov	r0, r3
    c424:	f000 ff9c 	bl	d360 <__assert_func>

0000c428 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
    c428:	b5f0      	push	{r4, r5, r6, r7, lr}
    c42a:	b085      	sub	sp, #20
    c42c:	4605      	mov	r5, r0
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
    c42e:	2304      	movs	r3, #4
    c430:	2200      	movs	r2, #0
    c432:	210e      	movs	r1, #14
    c434:	f7fd fa7e 	bl	9934 <dw1000_read_reg>
    c438:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c43a:	f505 66ad 	add.w	r6, r5, #1384	; 0x568
    c43e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c442:	4630      	mov	r0, r6
    c444:	f001 fd18 	bl	de78 <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
    c448:	b138      	cbz	r0, c45a <dw1000_phy_forcetrxoff+0x32>
        inst->uwb_dev.status.mtx_error = 1;
    c44a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
    c44e:	f043 0308 	orr.w	r3, r3, #8
    c452:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
    c456:	b005      	add	sp, #20
    c458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
    c45a:	2704      	movs	r7, #4
    c45c:	9702      	str	r7, [sp, #8]
    c45e:	2200      	movs	r2, #0
    c460:	2300      	movs	r3, #0
    c462:	e9cd 2300 	strd	r2, r3, [sp]
    c466:	210e      	movs	r1, #14
    c468:	4628      	mov	r0, r5
    c46a:	f7fd fad3 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
    c46e:	2301      	movs	r3, #1
    c470:	9302      	str	r3, [sp, #8]
    c472:	2240      	movs	r2, #64	; 0x40
    c474:	2300      	movs	r3, #0
    c476:	e9cd 2300 	strd	r2, r3, [sp]
    c47a:	2200      	movs	r2, #0
    c47c:	210d      	movs	r1, #13
    c47e:	4628      	mov	r0, r5
    c480:	f7fd fac8 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
    c484:	9702      	str	r7, [sp, #8]
    c486:	a32e      	add	r3, pc, #184	; (adr r3, c540 <dw1000_phy_forcetrxoff+0x118>)
    c488:	e9d3 2300 	ldrd	r2, r3, [r3]
    c48c:	e9cd 2300 	strd	r2, r3, [sp]
    c490:	2200      	movs	r2, #0
    c492:	210f      	movs	r1, #15
    c494:	4628      	mov	r0, r5
    c496:	f7fd fabd 	bl	9a14 <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
    c49a:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
    c49e:	f013 0f10 	tst.w	r3, #16
    c4a2:	d130      	bne.n	c506 <dw1000_phy_forcetrxoff+0xde>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
    c4a4:	2304      	movs	r3, #4
    c4a6:	9302      	str	r3, [sp, #8]
    c4a8:	2200      	movs	r2, #0
    c4aa:	9400      	str	r4, [sp, #0]
    c4ac:	9201      	str	r2, [sp, #4]
    c4ae:	210e      	movs	r1, #14
    c4b0:	4628      	mov	r0, r5
    c4b2:	f7fd faaf 	bl	9a14 <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
    c4b6:	f8d5 4530 	ldr.w	r4, [r5, #1328]	; 0x530
    c4ba:	bb64      	cbnz	r4, c516 <dw1000_phy_forcetrxoff+0xee>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c4bc:	4630      	mov	r0, r6
    c4be:	f001 fc7f 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    c4c2:	bb70      	cbnz	r0, c522 <dw1000_phy_forcetrxoff+0xfa>
    inst->control.wait4resp_enabled = 0;
    c4c4:	f895 35b0 	ldrb.w	r3, [r5, #1456]	; 0x5b0
    c4c8:	f36f 0300 	bfc	r3, #0, #1
    c4cc:	f885 35b0 	strb.w	r3, [r5, #1456]	; 0x5b0
    inst->control.rxauto_disable = false;
    c4d0:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
    c4d4:	f36f 0382 	bfc	r3, #2, #1
    c4d8:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->control.abs_timeout = false;
    c4dc:	b2db      	uxtb	r3, r3
    c4de:	f36f 03c3 	bfc	r3, #3, #1
    c4e2:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    c4e6:	f8b5 3566 	ldrh.w	r3, [r5, #1382]	; 0x566
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
    c4ea:	2b00      	cmp	r3, #0
    c4ec:	d1b3      	bne.n	c456 <dw1000_phy_forcetrxoff+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    c4ee:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
    c4f2:	f001 ff2b 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    c4f6:	b9d0      	cbnz	r0, c52e <dw1000_phy_forcetrxoff+0x106>
        inst->uwb_dev.status.sem_force_released = 1;
    c4f8:	f895 350a 	ldrb.w	r3, [r5, #1290]	; 0x50a
    c4fc:	f043 0302 	orr.w	r3, r3, #2
    c500:	f885 350a 	strb.w	r3, [r5, #1290]	; 0x50a
    c504:	e7a7      	b.n	c456 <dw1000_phy_forcetrxoff+0x2e>
        dw1000_sync_rxbufptrs(inst);
    c506:	4628      	mov	r0, r5
    c508:	f7fe fa37 	bl	a97a <dw1000_sync_rxbufptrs>
    c50c:	e7ca      	b.n	c4a4 <dw1000_phy_forcetrxoff+0x7c>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
    c50e:	4621      	mov	r1, r4
    c510:	4628      	mov	r0, r5
    c512:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
    c514:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    c516:	2c00      	cmp	r4, #0
    c518:	d0d0      	beq.n	c4bc <dw1000_phy_forcetrxoff+0x94>
            if (cbs!=NULL && cbs->reset_cb)
    c51a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c51c:	2b00      	cmp	r3, #0
    c51e:	d1f6      	bne.n	c50e <dw1000_phy_forcetrxoff+0xe6>
    c520:	e7f8      	b.n	c514 <dw1000_phy_forcetrxoff+0xec>
    assert(err == DPL_OK);
    c522:	2300      	movs	r3, #0
    c524:	461a      	mov	r2, r3
    c526:	4619      	mov	r1, r3
    c528:	4618      	mov	r0, r3
    c52a:	f000 ff19 	bl	d360 <__assert_func>
        assert(err == DPL_OK);
    c52e:	2300      	movs	r3, #0
    c530:	461a      	mov	r2, r3
    c532:	4619      	mov	r1, r3
    c534:	4618      	mov	r0, r3
    c536:	f000 ff13 	bl	d360 <__assert_func>
    c53a:	bf00      	nop
    c53c:	f3af 8000 	nop.w
    c540:	3433fbf8 	.word	0x3433fbf8
    c544:	00000000 	.word	0x00000000

0000c548 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
    c548:	b5f0      	push	{r4, r5, r6, r7, lr}
    c54a:	b085      	sub	sp, #20
    c54c:	4604      	mov	r4, r0
    c54e:	460d      	mov	r5, r1
    c550:	4616      	mov	r6, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c552:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
    c556:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c55a:	4638      	mov	r0, r7
    c55c:	f001 fc8c 	bl	de78 <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
    c560:	b138      	cbz	r0, c572 <dw1000_phy_interrupt_mask+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
    c562:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
    c566:	f043 0308 	orr.w	r3, r3, #8
    c56a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
    c56e:	b005      	add	sp, #20
    c570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
    c572:	2304      	movs	r3, #4
    c574:	2200      	movs	r2, #0
    c576:	210e      	movs	r1, #14
    c578:	4620      	mov	r0, r4
    c57a:	f7fd f9db 	bl	9934 <dw1000_read_reg>
    if(enable)
    c57e:	b1a6      	cbz	r6, c5aa <dw1000_phy_interrupt_mask+0x62>
        mask |= bitmask ;
    c580:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
    c582:	2304      	movs	r3, #4
    c584:	9302      	str	r3, [sp, #8]
    c586:	2200      	movs	r2, #0
    c588:	9000      	str	r0, [sp, #0]
    c58a:	9201      	str	r2, [sp, #4]
    c58c:	210e      	movs	r1, #14
    c58e:	4620      	mov	r0, r4
    c590:	f7fd fa40 	bl	9a14 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c594:	4638      	mov	r0, r7
    c596:	f001 fc13 	bl	ddc0 <os_mutex_release>
    assert(err == DPL_OK);
    c59a:	2800      	cmp	r0, #0
    c59c:	d0e7      	beq.n	c56e <dw1000_phy_interrupt_mask+0x26>
    c59e:	2300      	movs	r3, #0
    c5a0:	461a      	mov	r2, r3
    c5a2:	4619      	mov	r1, r3
    c5a4:	4618      	mov	r0, r3
    c5a6:	f000 fedb 	bl	d360 <__assert_func>
        mask &= ~bitmask ; // Clear the bit
    c5aa:	ea20 0005 	bic.w	r0, r0, r5
    c5ae:	e7e8      	b.n	c582 <dw1000_phy_interrupt_mask+0x3a>

0000c5b0 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
    c5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5b2:	b085      	sub	sp, #20
    c5b4:	4604      	mov	r4, r0
    c5b6:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
    c5b8:	ea52 0305 	orrs.w	r3, r2, r5
    c5bc:	d114      	bne.n	c5e8 <dw1000_phy_repeated_frames+0x38>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
    c5be:	2304      	movs	r3, #4
    c5c0:	9302      	str	r3, [sp, #8]
    c5c2:	2600      	movs	r6, #0
    c5c4:	2700      	movs	r7, #0
    c5c6:	e9cd 6700 	strd	r6, r7, [sp]
    c5ca:	2200      	movs	r2, #0
    c5cc:	2128      	movs	r1, #40	; 0x28
    c5ce:	f7fd fa21 	bl	9a14 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
    c5d2:	2301      	movs	r3, #1
    c5d4:	9302      	str	r3, [sp, #8]
    c5d6:	e9cd 6700 	strd	r6, r7, [sp]
    c5da:	2224      	movs	r2, #36	; 0x24
    c5dc:	212f      	movs	r1, #47	; 0x2f
    c5de:	4620      	mov	r0, r4
    c5e0:	f7fd fa18 	bl	9a14 <dw1000_write_reg>
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    }
}
    c5e4:	b005      	add	sp, #20
    c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5e8:	4616      	mov	r6, r2
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
    c5ea:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
    c5ee:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
    c5f2:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
    c5f6:	f000 fc81 	bl	cefc <hal_spi_disable>
        assert(rc == 0);
    c5fa:	2800      	cmp	r0, #0
    c5fc:	d16e      	bne.n	c6dc <dw1000_phy_repeated_frames+0x12c>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
    c5fe:	f204 5194 	addw	r1, r4, #1428	; 0x594
    c602:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    c606:	f000 fc37 	bl	ce78 <hal_spi_config>
        assert(rc == 0);
    c60a:	2800      	cmp	r0, #0
    c60c:	d16c      	bne.n	c6e8 <dw1000_phy_repeated_frames+0x138>
        rc = hal_spi_enable(inst->spi_num);
    c60e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
    c612:	f000 fc4d 	bl	ceb0 <hal_spi_enable>
        assert(rc == 0);
    c616:	2800      	cmp	r0, #0
    c618:	d16c      	bne.n	c6f4 <dw1000_phy_repeated_frames+0x144>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
    c61a:	2304      	movs	r3, #4
    c61c:	2200      	movs	r2, #0
    c61e:	2136      	movs	r1, #54	; 0x36
    c620:	4620      	mov	r0, r4
    c622:	f7fd f987 	bl	9934 <dw1000_read_reg>
    c626:	4601      	mov	r1, r0
    c628:	4835      	ldr	r0, [pc, #212]	; (c700 <dw1000_phy_repeated_frames+0x150>)
    c62a:	f005 fb33 	bl	11c94 <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
    c62e:	2304      	movs	r3, #4
    c630:	461a      	mov	r2, r3
    c632:	2136      	movs	r1, #54	; 0x36
    c634:	4620      	mov	r0, r4
    c636:	f7fd f97d 	bl	9934 <dw1000_read_reg>
    c63a:	4601      	mov	r1, r0
    c63c:	4831      	ldr	r0, [pc, #196]	; (c704 <dw1000_phy_repeated_frames+0x154>)
    c63e:	f005 fb29 	bl	11c94 <printf>
        dw1000_phy_disable_sequencing(inst);
    c642:	4620      	mov	r0, r4
    c644:	f7ff fd75 	bl	c132 <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
    c648:	2704      	movs	r7, #4
    c64a:	9702      	str	r7, [sp, #8]
    c64c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
    c650:	2300      	movs	r3, #0
    c652:	e9cd 2300 	strd	r2, r3, [sp]
    c656:	2200      	movs	r2, #0
    c658:	2128      	movs	r1, #40	; 0x28
    c65a:	4620      	mov	r0, r4
    c65c:	f7fd f9da 	bl	9a14 <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
    c660:	9702      	str	r7, [sp, #8]
    c662:	4a29      	ldr	r2, [pc, #164]	; (c708 <dw1000_phy_repeated_frames+0x158>)
    c664:	2300      	movs	r3, #0
    c666:	e9cd 2300 	strd	r2, r3, [sp]
    c66a:	2200      	movs	r2, #0
    c66c:	2128      	movs	r1, #40	; 0x28
    c66e:	4620      	mov	r0, r4
    c670:	f7fd f9d0 	bl	9a14 <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
    c674:	4620      	mov	r0, r4
    c676:	f7ff fd00 	bl	c07a <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
    c67a:	4620      	mov	r0, r4
    c67c:	f7ff fd14 	bl	c0a8 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
    c680:	0a32      	lsrs	r2, r6, #8
    c682:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    c686:	0a2b      	lsrs	r3, r5, #8
    c688:	42ba      	cmp	r2, r7
    c68a:	f173 0300 	sbcs.w	r3, r3, #0
    c68e:	d202      	bcs.n	c696 <dw1000_phy_repeated_frames+0xe6>
            rate = ((uint64_t)4<<8);
    c690:	f44f 6680 	mov.w	r6, #1024	; 0x400
    c694:	2500      	movs	r5, #0
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
    c696:	2304      	movs	r3, #4
    c698:	9302      	str	r3, [sp, #8]
    c69a:	0a36      	lsrs	r6, r6, #8
    c69c:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
    c6a0:	0a2d      	lsrs	r5, r5, #8
    c6a2:	9600      	str	r6, [sp, #0]
    c6a4:	9501      	str	r5, [sp, #4]
    c6a6:	2200      	movs	r2, #0
    c6a8:	210a      	movs	r1, #10
    c6aa:	4620      	mov	r0, r4
    c6ac:	f7fd f9b2 	bl	9a14 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
    c6b0:	2501      	movs	r5, #1
    c6b2:	9502      	str	r5, [sp, #8]
    c6b4:	2210      	movs	r2, #16
    c6b6:	2300      	movs	r3, #0
    c6b8:	e9cd 2300 	strd	r2, r3, [sp]
    c6bc:	2224      	movs	r2, #36	; 0x24
    c6be:	212f      	movs	r1, #47	; 0x2f
    c6c0:	4620      	mov	r0, r4
    c6c2:	f7fd f9a7 	bl	9a14 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    c6c6:	9502      	str	r5, [sp, #8]
    c6c8:	2202      	movs	r2, #2
    c6ca:	2300      	movs	r3, #0
    c6cc:	e9cd 2300 	strd	r2, r3, [sp]
    c6d0:	2200      	movs	r2, #0
    c6d2:	210d      	movs	r1, #13
    c6d4:	4620      	mov	r0, r4
    c6d6:	f7fd f99d 	bl	9a14 <dw1000_write_reg>
}
    c6da:	e783      	b.n	c5e4 <dw1000_phy_repeated_frames+0x34>
        assert(rc == 0);
    c6dc:	2300      	movs	r3, #0
    c6de:	461a      	mov	r2, r3
    c6e0:	4619      	mov	r1, r3
    c6e2:	4618      	mov	r0, r3
    c6e4:	f000 fe3c 	bl	d360 <__assert_func>
        assert(rc == 0);
    c6e8:	2300      	movs	r3, #0
    c6ea:	461a      	mov	r2, r3
    c6ec:	4619      	mov	r1, r3
    c6ee:	4618      	mov	r0, r3
    c6f0:	f000 fe36 	bl	d360 <__assert_func>
        assert(rc == 0);
    c6f4:	2300      	movs	r3, #0
    c6f6:	461a      	mov	r2, r3
    c6f8:	4619      	mov	r1, r3
    c6fa:	4618      	mov	r0, r3
    c6fc:	f000 fe30 	bl	d360 <__assert_func>
    c700:	00023734 	.word	0x00023734
    c704:	00023748 	.word	0x00023748
    c708:	005fff00 	.word	0x005fff00

0000c70c <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
    c70c:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
    c70e:	ed90 0a00 	vldr	s0, [r0]
    c712:	89c3      	ldrh	r3, [r0, #14]
    c714:	7b02      	ldrb	r2, [r0, #12]
    c716:	4413      	add	r3, r2
    c718:	ee07 3a90 	vmov	s15, r3
    c71c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c720:	ee27 0a80 	vmul.f32	s0, s15, s0
    c724:	f015 ff14 	bl	22550 <ceilf>
    c728:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
    c72c:	ee10 3a10 	vmov	r3, s0
    c730:	b298      	uxth	r0, r3
    c732:	bd08      	pop	{r3, pc}

0000c734 <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
    c734:	b508      	push	{r3, lr}
    int32_t total_payload_bits;
    uint16_t duration;
    /* We need to add 48 parity bits for every 330 bits in the data payload (including crc)
     * I.e. for < 330 bits we need 48 parity bits, for > 330 bits we need 48+48 parity bits,
     * for > 660 bits we need 3*48 parity bits, etc. */
    parity_data_bits += ((8*(nlen+2))/330) * 48;
    c736:	3102      	adds	r1, #2
    c738:	00c9      	lsls	r1, r1, #3
    c73a:	4b12      	ldr	r3, [pc, #72]	; (c784 <dw1000_phy_data_duration+0x50>)
    c73c:	fb83 2301 	smull	r2, r3, r3, r1
    c740:	11db      	asrs	r3, r3, #7
    c742:	3301      	adds	r3, #1
    c744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
    c748:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c74c:	ee07 3a90 	vmov	s15, r3
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
    c750:	ed90 7a01 	vldr	s14, [r0, #4]
    c754:	7c83      	ldrb	r3, [r0, #18]
    c756:	ee00 3a10 	vmov	s0, r3
    c75a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    c75e:	ee20 0a07 	vmul.f32	s0, s0, s14
                          attrib->Tdsym * total_payload_bits);
    c762:	ed90 7a02 	vldr	s14, [r0, #8]
    c766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c76a:	ee67 7a87 	vmul.f32	s15, s15, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
    c76e:	ee30 0a27 	vadd.f32	s0, s0, s15
    c772:	f015 feed 	bl	22550 <ceilf>
    c776:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
    c77a:	ee10 3a10 	vmov	r3, s0
    c77e:	b298      	uxth	r0, r3
    c780:	bd08      	pop	{r3, pc}
    c782:	bf00      	nop
    c784:	634c0635 	.word	0x634c0635

0000c788 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
    c788:	b570      	push	{r4, r5, r6, lr}
    c78a:	4605      	mov	r5, r0
    c78c:	460e      	mov	r6, r1
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
    c78e:	f7ff ffbd 	bl	c70c <dw1000_phy_SHR_duration>
    c792:	4604      	mov	r4, r0
    c794:	4631      	mov	r1, r6
    c796:	4628      	mov	r0, r5
    c798:	f7ff ffcc 	bl	c734 <dw1000_phy_data_duration>
    c79c:	4420      	add	r0, r4
}
    c79e:	b280      	uxth	r0, r0
    c7a0:	bd70      	pop	{r4, r5, r6, pc}

0000c7a2 <dw1000_phy_txrf_power_value>:
 */
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
    c7a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if (!reg) {
    c7a6:	460a      	mov	r2, r1
    c7a8:	2900      	cmp	r1, #0
    c7aa:	d05a      	beq.n	c862 <dw1000_phy_txrf_power_value+0xc0>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
    c7ac:	eefd 7ae0 	vcvt.s32.f32	s15, s1
    c7b0:	ee17 3a90 	vmov	r3, s15
    c7b4:	2b20      	cmp	r3, #32
    c7b6:	d856      	bhi.n	c866 <dw1000_phy_txrf_power_value+0xc4>
        return false;
    }

    switch (c) {
    c7b8:	ee10 3a10 	vmov	r3, s0
    c7bc:	2b12      	cmp	r3, #18
    c7be:	d854      	bhi.n	c86a <dw1000_phy_txrf_power_value+0xc8>
    c7c0:	e8df f003 	tbb	[pc, r3]
    c7c4:	3b535345 	.word	0x3b535345
    c7c8:	53315353 	.word	0x53315353
    c7cc:	53532753 	.word	0x53532753
    c7d0:	1353531d 	.word	0x1353531d
    c7d4:	5353      	.short	0x5353
    c7d6:	0a          	.byte	0x0a
    c7d7:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
    c7d8:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c7dc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
    c7e0:	ee17 3a90 	vmov	r3, s15
    c7e4:	7013      	strb	r3, [r2, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
    c7e6:	2001      	movs	r0, #1
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
    c7e8:	4770      	bx	lr
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
    c7ea:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c7ee:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    c7f2:	ee10 3a90 	vmov	r3, s1
    c7f6:	3320      	adds	r3, #32
    c7f8:	7013      	strb	r3, [r2, #0]
    return true;
    c7fa:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
    c7fc:	4770      	bx	lr
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
    c7fe:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c802:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    c806:	ee10 3a90 	vmov	r3, s1
    c80a:	3340      	adds	r3, #64	; 0x40
    c80c:	7013      	strb	r3, [r2, #0]
    return true;
    c80e:	2001      	movs	r0, #1
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
    c810:	4770      	bx	lr
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
    c812:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c816:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    c81a:	ee10 3a90 	vmov	r3, s1
    c81e:	3360      	adds	r3, #96	; 0x60
    c820:	7013      	strb	r3, [r2, #0]
    return true;
    c822:	2001      	movs	r0, #1
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
    c824:	4770      	bx	lr
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
    c826:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c82a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    c82e:	ee10 3a90 	vmov	r3, s1
    c832:	3b80      	subs	r3, #128	; 0x80
    c834:	7013      	strb	r3, [r2, #0]
    return true;
    c836:	2001      	movs	r0, #1
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
    c838:	4770      	bx	lr
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    c83a:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c83e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    c842:	ee10 3a90 	vmov	r3, s1
    c846:	3b60      	subs	r3, #96	; 0x60
    c848:	7013      	strb	r3, [r2, #0]
    return true;
    c84a:	2001      	movs	r0, #1
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    c84c:	4770      	bx	lr
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    c84e:	ee70 0aa0 	vadd.f32	s1, s1, s1
    c852:	eefd 0ae0 	vcvt.s32.f32	s1, s1
    c856:	ee10 3a90 	vmov	r3, s1
    c85a:	3b40      	subs	r3, #64	; 0x40
    c85c:	7013      	strb	r3, [r2, #0]
    return true;
    c85e:	2001      	movs	r0, #1
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    c860:	4770      	bx	lr
        return false;
    c862:	2000      	movs	r0, #0
    c864:	4770      	bx	lr
        return false;
    c866:	2000      	movs	r0, #0
    c868:	4770      	bx	lr
    switch (c) {
    c86a:	2000      	movs	r0, #0
}
    c86c:	4770      	bx	lr

0000c86e <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
    c86e:	b530      	push	{r4, r5, lr}
    c870:	b085      	sub	sp, #20
    c872:	4604      	mov	r4, r0
    c874:	460d      	mov	r5, r1
    if (reset) {
    c876:	b97a      	cbnz	r2, c898 <dw1000_phy_event_cnt_ctrl+0x2a>
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
    c878:	b1cd      	cbz	r5, c8ae <dw1000_phy_event_cnt_ctrl+0x40>
    c87a:	2201      	movs	r2, #1
    c87c:	2300      	movs	r3, #0
    c87e:	2104      	movs	r1, #4
    c880:	9102      	str	r1, [sp, #8]
    c882:	e9cd 2300 	strd	r2, r3, [sp]
    c886:	2200      	movs	r2, #0
    c888:	212f      	movs	r1, #47	; 0x2f
    c88a:	4620      	mov	r0, r4
    c88c:	f7fd f8c2 	bl	9a14 <dw1000_write_reg>
    return inst->uwb_dev.status;
}
    c890:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    c894:	b005      	add	sp, #20
    c896:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    c898:	2304      	movs	r3, #4
    c89a:	9302      	str	r3, [sp, #8]
    c89c:	2202      	movs	r2, #2
    c89e:	2300      	movs	r3, #0
    c8a0:	e9cd 2300 	strd	r2, r3, [sp]
    c8a4:	2200      	movs	r2, #0
    c8a6:	212f      	movs	r1, #47	; 0x2f
    c8a8:	f7fd f8b4 	bl	9a14 <dw1000_write_reg>
    c8ac:	e7e4      	b.n	c878 <dw1000_phy_event_cnt_ctrl+0xa>
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
    c8ae:	2200      	movs	r2, #0
    c8b0:	2300      	movs	r3, #0
    c8b2:	e7e4      	b.n	c87e <dw1000_phy_event_cnt_ctrl+0x10>

0000c8b4 <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
    c8b4:	b530      	push	{r4, r5, lr}
    c8b6:	b083      	sub	sp, #12
    c8b8:	4605      	mov	r5, r0
    if (!res) {
    c8ba:	b319      	cbz	r1, c904 <dw1000_phy_event_cnt_read+0x50>
    c8bc:	460c      	mov	r4, r1
        return inst->uwb_dev.status;
    }
    /* Read first 6 counter registers in one go */
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
    c8be:	2318      	movs	r3, #24
    c8c0:	9300      	str	r3, [sp, #0]
    c8c2:	460b      	mov	r3, r1
    c8c4:	2204      	movs	r2, #4
    c8c6:	212f      	movs	r1, #47	; 0x2f
    c8c8:	f7fc ff6a 	bl	97a0 <dw1000_read>
                offsetof(struct uwb_dev_evcnt, event_count6));
    /* Apply masks */
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
    c8cc:	6823      	ldr	r3, [r4, #0]
    c8ce:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    c8d2:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
    c8d4:	6863      	ldr	r3, [r4, #4]
    c8d6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    c8da:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
    c8dc:	68a3      	ldr	r3, [r4, #8]
    c8de:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    c8e2:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
    c8e4:	68e3      	ldr	r3, [r4, #12]
    c8e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    c8ea:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
    c8ec:	6923      	ldr	r3, [r4, #16]
    c8ee:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    c8f2:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
    c8f4:	6963      	ldr	r3, [r4, #20]
    c8f6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
    c8fa:	6163      	str	r3, [r4, #20]
    return inst->uwb_dev.status;
    c8fc:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
    c900:	b003      	add	sp, #12
    c902:	bd30      	pop	{r4, r5, pc}
        return inst->uwb_dev.status;
    c904:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
    c908:	e7fa      	b.n	c900 <dw1000_phy_event_cnt_read+0x4c>

0000c90a <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
    c90a:	b530      	push	{r4, r5, lr}
    c90c:	b085      	sub	sp, #20
    c90e:	4604      	mov	r4, r0
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
    c910:	2302      	movs	r3, #2
    c912:	9302      	str	r3, [sp, #8]
    c914:	9100      	str	r1, [sp, #0]
    c916:	2300      	movs	r3, #0
    c918:	9301      	str	r3, [sp, #4]
    c91a:	2204      	movs	r2, #4
    c91c:	212d      	movs	r1, #45	; 0x2d
    c91e:	f7fd f879 	bl	9a14 <dw1000_write_reg>

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
    c922:	2501      	movs	r5, #1
    c924:	9502      	str	r5, [sp, #8]
    c926:	2203      	movs	r2, #3
    c928:	2300      	movs	r3, #0
    c92a:	e9cd 2300 	strd	r2, r3, [sp]
    c92e:	2206      	movs	r2, #6
    c930:	212d      	movs	r1, #45	; 0x2d
    c932:	4620      	mov	r0, r4
    c934:	f7fd f86e 	bl	9a14 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
    c938:	9502      	str	r5, [sp, #8]
    c93a:	2200      	movs	r2, #0
    c93c:	2300      	movs	r3, #0
    c93e:	e9cd 2300 	strd	r2, r3, [sp]
    c942:	2206      	movs	r2, #6
    c944:	212d      	movs	r1, #45	; 0x2d
    c946:	4620      	mov	r0, r4
    c948:	f7fd f864 	bl	9a14 <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
    c94c:	4628      	mov	r0, r5
    c94e:	f005 fa40 	bl	11dd2 <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
    c952:	2304      	movs	r3, #4
    c954:	220a      	movs	r2, #10
    c956:	212d      	movs	r1, #45	; 0x2d
    c958:	4620      	mov	r0, r4
    c95a:	f7fc ffeb 	bl	9934 <dw1000_read_reg>
}
    c95e:	b005      	add	sp, #20
    c960:	bd30      	pop	{r4, r5, pc}
	...

0000c964 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    c964:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c966:	2400      	movs	r4, #0
    c968:	e000      	b.n	c96c <hal_gpio_irq_handler+0x8>
    c96a:	3401      	adds	r4, #1
    c96c:	2c07      	cmp	r4, #7
    c96e:	dc1c      	bgt.n	c9aa <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    c970:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c974:	4a0d      	ldr	r2, [pc, #52]	; (c9ac <hal_gpio_irq_handler+0x48>)
    c976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c97a:	2b00      	cmp	r3, #0
    c97c:	d0f5      	beq.n	c96a <hal_gpio_irq_handler+0x6>
    c97e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    c982:	2301      	movs	r3, #1
    c984:	40a3      	lsls	r3, r4
    c986:	421a      	tst	r2, r3
    c988:	d0ef      	beq.n	c96a <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    c98a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c98e:	4a07      	ldr	r2, [pc, #28]	; (c9ac <hal_gpio_irq_handler+0x48>)
    c990:	2100      	movs	r1, #0
    c992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
    c996:	4b06      	ldr	r3, [pc, #24]	; (c9b0 <hal_gpio_irq_handler+0x4c>)
    c998:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    c99c:	2a00      	cmp	r2, #0
    c99e:	d0e4      	beq.n	c96a <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    c9a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    c9a4:	6858      	ldr	r0, [r3, #4]
    c9a6:	4790      	blx	r2
    c9a8:	e7df      	b.n	c96a <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
    c9aa:	bd10      	pop	{r4, pc}
    c9ac:	40006000 	.word	0x40006000
    c9b0:	20001d30 	.word	0x20001d30

0000c9b4 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
    c9b4:	4b06      	ldr	r3, [pc, #24]	; (c9d0 <hal_gpio_irq_setup+0x1c>)
    c9b6:	781b      	ldrb	r3, [r3, #0]
    c9b8:	b94b      	cbnz	r3, c9ce <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c9ba:	4b06      	ldr	r3, [pc, #24]	; (c9d4 <hal_gpio_irq_setup+0x20>)
    c9bc:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c9be:	4a06      	ldr	r2, [pc, #24]	; (c9d8 <hal_gpio_irq_setup+0x24>)
    c9c0:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c9c2:	4b06      	ldr	r3, [pc, #24]	; (c9dc <hal_gpio_irq_setup+0x28>)
    c9c4:	2240      	movs	r2, #64	; 0x40
    c9c6:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
    c9c8:	4b01      	ldr	r3, [pc, #4]	; (c9d0 <hal_gpio_irq_setup+0x1c>)
    c9ca:	2201      	movs	r2, #1
    c9cc:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
    c9ce:	4770      	bx	lr
    c9d0:	20001d70 	.word	0x20001d70
    c9d4:	e000ed00 	.word	0xe000ed00
    c9d8:	0000c965 	.word	0x0000c965
    c9dc:	e000e100 	.word	0xe000e100

0000c9e0 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c9e0:	2000      	movs	r0, #0
    c9e2:	2807      	cmp	r0, #7
    c9e4:	dc05      	bgt.n	c9f2 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
    c9e6:	4b04      	ldr	r3, [pc, #16]	; (c9f8 <hal_gpio_find_empty_slot+0x18>)
    c9e8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    c9ec:	b11b      	cbz	r3, c9f6 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c9ee:	3001      	adds	r0, #1
    c9f0:	e7f7      	b.n	c9e2 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
    c9f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c9f6:	4770      	bx	lr
    c9f8:	20001d30 	.word	0x20001d30

0000c9fc <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    c9fc:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    c9fe:	2000      	movs	r0, #0
    ca00:	e000      	b.n	ca04 <hal_gpio_find_pin+0x8>
    ca02:	3001      	adds	r0, #1
    ca04:	2807      	cmp	r0, #7
    ca06:	dc0e      	bgt.n	ca26 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
    ca08:	4b08      	ldr	r3, [pc, #32]	; (ca2c <hal_gpio_find_pin+0x30>)
    ca0a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d0f7      	beq.n	ca02 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    ca12:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    ca16:	4a06      	ldr	r2, [pc, #24]	; (ca30 <hal_gpio_find_pin+0x34>)
    ca18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca1c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    ca20:	428b      	cmp	r3, r1
    ca22:	d1ee      	bne.n	ca02 <hal_gpio_find_pin+0x6>
    ca24:	e001      	b.n	ca2a <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
    ca26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ca2a:	4770      	bx	lr
    ca2c:	20001d30 	.word	0x20001d30
    ca30:	40006000 	.word	0x40006000

0000ca34 <hal_gpio_init_in>:
    switch (pull) {
    ca34:	2901      	cmp	r1, #1
    ca36:	d00f      	beq.n	ca58 <hal_gpio_init_in+0x24>
    ca38:	2902      	cmp	r1, #2
    ca3a:	d10f      	bne.n	ca5c <hal_gpio_init_in+0x28>
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
    ca3c:	2304      	movs	r3, #4
    port->PIN_CNF[pin_index] = conf;
    ca3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ca42:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    ca46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    ca4a:	2301      	movs	r3, #1
    ca4c:	fa03 f000 	lsl.w	r0, r3, r0
    ca50:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    ca54:	2000      	movs	r0, #0
    ca56:	4770      	bx	lr
    switch (pull) {
    ca58:	230c      	movs	r3, #12
    ca5a:	e7f0      	b.n	ca3e <hal_gpio_init_in+0xa>
        conf = 0;
    ca5c:	2300      	movs	r3, #0
    ca5e:	e7ee      	b.n	ca3e <hal_gpio_init_in+0xa>

0000ca60 <hal_gpio_init_out>:
    if (val) {
    ca60:	b199      	cbz	r1, ca8a <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    ca62:	2301      	movs	r3, #1
    ca64:	4083      	lsls	r3, r0
    ca66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ca6a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    ca6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ca72:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    ca76:	2103      	movs	r1, #3
    ca78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    ca7c:	2301      	movs	r3, #1
    ca7e:	fa03 f000 	lsl.w	r0, r3, r0
    ca82:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
    ca86:	2000      	movs	r0, #0
    ca88:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    ca8a:	2301      	movs	r3, #1
    ca8c:	4083      	lsls	r3, r0
    ca8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    ca92:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    ca96:	e7ea      	b.n	ca6e <hal_gpio_init_out+0xe>

0000ca98 <hal_gpio_write>:
    if (val) {
    ca98:	b139      	cbz	r1, caaa <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    ca9a:	2301      	movs	r3, #1
    ca9c:	fa03 f000 	lsl.w	r0, r3, r0
    caa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    caa4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    caa8:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    caaa:	2301      	movs	r3, #1
    caac:	fa03 f000 	lsl.w	r0, r3, r0
    cab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cab4:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    cab8:	4770      	bx	lr

0000caba <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    caba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cabe:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    cac2:	2301      	movs	r3, #1
    cac4:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    cac6:	421a      	tst	r2, r3
    cac8:	d008      	beq.n	cadc <hal_gpio_read+0x22>
    caca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cace:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    cad2:	fa23 f000 	lsr.w	r0, r3, r0
    cad6:	f000 0001 	and.w	r0, r0, #1
    cada:	4770      	bx	lr
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    cadc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    cae0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    cae4:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    cae8:	f000 0001 	and.w	r0, r0, #1
}
    caec:	4770      	bx	lr
	...

0000caf0 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    caf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    caf4:	4606      	mov	r6, r0
    caf6:	4688      	mov	r8, r1
    caf8:	4617      	mov	r7, r2
    cafa:	461d      	mov	r5, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
    cafc:	f7ff ff5a 	bl	c9b4 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
    cb00:	f7ff ff6e 	bl	c9e0 <hal_gpio_find_empty_slot>
    if (i < 0) {
    cb04:	1e04      	subs	r4, r0, #0
    cb06:	db27      	blt.n	cb58 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
    cb08:	f89d 1018 	ldrb.w	r1, [sp, #24]
    cb0c:	4630      	mov	r0, r6
    cb0e:	f7ff ff91 	bl	ca34 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
    cb12:	2d02      	cmp	r5, #2
    cb14:	d01a      	beq.n	cb4c <hal_gpio_irq_init+0x5c>
    cb16:	2d03      	cmp	r5, #3
    cb18:	d01b      	beq.n	cb52 <hal_gpio_irq_init+0x62>
    cb1a:	2d01      	cmp	r5, #1
    cb1c:	d002      	beq.n	cb24 <hal_gpio_irq_init+0x34>
    cb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cb22:	e011      	b.n	cb48 <hal_gpio_irq_init+0x58>
    cb24:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        break;
    default:
        return -1;
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    cb28:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    cb2c:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
    cb30:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    cb34:	4b0a      	ldr	r3, [pc, #40]	; (cb60 <hal_gpio_irq_init+0x70>)
    cb36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
    cb3a:	480a      	ldr	r0, [pc, #40]	; (cb64 <hal_gpio_irq_init+0x74>)
    cb3c:	f840 8034 	str.w	r8, [r0, r4, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    cb40:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    cb44:	6047      	str	r7, [r0, #4]

    return 0;
    cb46:	2000      	movs	r0, #0
}
    cb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
    cb4c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    cb50:	e7ea      	b.n	cb28 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
    cb52:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    cb56:	e7e7      	b.n	cb28 <hal_gpio_irq_init+0x38>
        return -1;
    cb58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cb5c:	e7f4      	b.n	cb48 <hal_gpio_irq_init+0x58>
    cb5e:	bf00      	nop
    cb60:	40006000 	.word	0x40006000
    cb64:	20001d30 	.word	0x20001d30

0000cb68 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    cb68:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    cb6a:	f7ff ff47 	bl	c9fc <hal_gpio_find_pin>
    if (i < 0) {
    cb6e:	2800      	cmp	r0, #0
    cb70:	db0a      	blt.n	cb88 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    cb72:	4a06      	ldr	r2, [pc, #24]	; (cb8c <hal_gpio_irq_enable+0x24>)
    cb74:	f100 0340 	add.w	r3, r0, #64	; 0x40
    cb78:	2100      	movs	r1, #0
    cb7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    cb7e:	2301      	movs	r3, #1
    cb80:	fa03 f000 	lsl.w	r0, r3, r0
    cb84:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    cb88:	bd08      	pop	{r3, pc}
    cb8a:	bf00      	nop
    cb8c:	40006000 	.word	0x40006000

0000cb90 <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    cb90:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    cb92:	f7ff ff33 	bl	c9fc <hal_gpio_find_pin>
    if (i < 0) {
    cb96:	2800      	cmp	r0, #0
    cb98:	db05      	blt.n	cba6 <hal_gpio_irq_disable+0x16>

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    cb9a:	2301      	movs	r3, #1
    cb9c:	fa03 f000 	lsl.w	r0, r3, r0
    cba0:	4b01      	ldr	r3, [pc, #4]	; (cba8 <hal_gpio_irq_disable+0x18>)
    cba2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
#endif
}
    cba6:	bd08      	pop	{r3, pc}
    cba8:	40006000 	.word	0x40006000

0000cbac <hal_gpio_irq_release>:
{
    cbac:	b538      	push	{r3, r4, r5, lr}
    cbae:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    cbb0:	f7ff ff24 	bl	c9fc <hal_gpio_find_pin>
    if (i < 0) {
    cbb4:	1e04      	subs	r4, r0, #0
    cbb6:	db12      	blt.n	cbde <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    cbb8:	4628      	mov	r0, r5
    cbba:	f7ff ffe9 	bl	cb90 <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    cbbe:	4a08      	ldr	r2, [pc, #32]	; (cbe0 <hal_gpio_irq_release+0x34>)
    cbc0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    cbc4:	2300      	movs	r3, #0
    cbc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    cbca:	f104 0140 	add.w	r1, r4, #64	; 0x40
    cbce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    hal_gpio_irqs[i].arg = NULL;
    cbd2:	4a04      	ldr	r2, [pc, #16]	; (cbe4 <hal_gpio_irq_release+0x38>)
    cbd4:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    cbd8:	604b      	str	r3, [r1, #4]
    hal_gpio_irqs[i].func = NULL;
    cbda:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
}
    cbde:	bd38      	pop	{r3, r4, r5, pc}
    cbe0:	40006000 	.word	0x40006000
    cbe4:	20001d30 	.word	0x20001d30

0000cbe8 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
    cbe8:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
    cbea:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
    cbec:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    cbf0:	b333      	cbz	r3, cc40 <nrf52_irqm_handler+0x58>
    cbf2:	4604      	mov	r4, r0
        spim->EVENTS_END = 0;
    cbf4:	2300      	movs	r3, #0
    cbf6:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
    cbfa:	7843      	ldrb	r3, [r0, #1]
    cbfc:	b303      	cbz	r3, cc40 <nrf52_irqm_handler+0x58>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
    cbfe:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
    cc02:	88c3      	ldrh	r3, [r0, #6]
    cc04:	fa13 f382 	uxtah	r3, r3, r2
    cc08:	b29b      	uxth	r3, r3
    cc0a:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
    cc0c:	8881      	ldrh	r1, [r0, #4]
    cc0e:	428b      	cmp	r3, r1
    cc10:	d217      	bcs.n	cc42 <nrf52_irqm_handler+0x5a>
            spi->nhs_txbuf += xfr_bytes;
    cc12:	b292      	uxth	r2, r2
    cc14:	6980      	ldr	r0, [r0, #24]
    cc16:	4410      	add	r0, r2
    cc18:	61a0      	str	r0, [r4, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
    cc1a:	1ac9      	subs	r1, r1, r3
    cc1c:	b289      	uxth	r1, r1
            len = min(SPIM_TXD_MAXCNT_MAX, len);
    cc1e:	29ff      	cmp	r1, #255	; 0xff
    cc20:	bf28      	it	cs
    cc22:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
    cc24:	f8c5 0544 	str.w	r0, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
    cc28:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
    cc2c:	69e3      	ldr	r3, [r4, #28]
    cc2e:	b12b      	cbz	r3, cc3c <nrf52_irqm_handler+0x54>
                spi->nhs_rxbuf += xfr_bytes;
    cc30:	441a      	add	r2, r3
    cc32:	61e2      	str	r2, [r4, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
    cc34:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
    cc38:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
    cc3c:	2301      	movs	r3, #1
    cc3e:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
    cc40:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
    cc42:	6a03      	ldr	r3, [r0, #32]
    cc44:	b10b      	cbz	r3, cc4a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
    cc46:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cc48:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
    cc4a:	2300      	movs	r3, #0
    cc4c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
    cc4e:	2340      	movs	r3, #64	; 0x40
    cc50:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    cc54:	e7f4      	b.n	cc40 <nrf52_irqm_handler+0x58>
	...

0000cc58 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
    cc58:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
    cc5a:	4b04      	ldr	r3, [pc, #16]	; (cc6c <nrf52_spi0_irq_handler+0x14>)
    cc5c:	781b      	ldrb	r3, [r3, #0]
    cc5e:	b103      	cbz	r3, cc62 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
    cc60:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
    cc62:	4802      	ldr	r0, [pc, #8]	; (cc6c <nrf52_spi0_irq_handler+0x14>)
    cc64:	f7ff ffc0 	bl	cbe8 <nrf52_irqm_handler>
}
    cc68:	e7fa      	b.n	cc60 <nrf52_spi0_irq_handler+0x8>
    cc6a:	bf00      	nop
    cc6c:	20001d74 	.word	0x20001d74

0000cc70 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
    cc70:	2301      	movs	r3, #1
    cc72:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
    cc74:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d0fb      	beq.n	cc74 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
    cc7c:	2300      	movs	r3, #0
    cc7e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
    cc82:	4770      	bx	lr

0000cc84 <hal_spi_config_slave>:
{
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
    cc84:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
    cc86:	780b      	ldrb	r3, [r1, #0]
    cc88:	2b03      	cmp	r3, #3
    cc8a:	d815      	bhi.n	ccb8 <hal_spi_config_slave+0x34>
    cc8c:	e8df f003 	tbb	[pc, r3]
    cc90:	110e1702 	.word	0x110e1702
    cc94:	2300      	movs	r3, #0
    cc96:	4618      	mov	r0, r3
            nrf_config = 0;
            rc = EINVAL;
            break;
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
    cc98:	f891 c001 	ldrb.w	ip, [r1, #1]
    cc9c:	f1bc 0f01 	cmp.w	ip, #1
    cca0:	d010      	beq.n	ccc4 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
    cca2:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
    cca6:	788b      	ldrb	r3, [r1, #2]
    cca8:	b97b      	cbnz	r3, ccca <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
    ccaa:	4770      	bx	lr
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
    ccac:	2304      	movs	r3, #4
    rc = 0;
    ccae:	2000      	movs	r0, #0
            break;
    ccb0:	e7f2      	b.n	cc98 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
    ccb2:	2306      	movs	r3, #6
    rc = 0;
    ccb4:	2000      	movs	r0, #0
            break;
    ccb6:	e7ef      	b.n	cc98 <hal_spi_config_slave+0x14>
            nrf_config = 0;
    ccb8:	2300      	movs	r3, #0
            rc = EINVAL;
    ccba:	2016      	movs	r0, #22
            break;
    ccbc:	e7ec      	b.n	cc98 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
    ccbe:	2302      	movs	r3, #2
    rc = 0;
    ccc0:	2000      	movs	r0, #0
    ccc2:	e7e9      	b.n	cc98 <hal_spi_config_slave+0x14>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    ccc4:	f043 0301 	orr.w	r3, r3, #1
    ccc8:	e7eb      	b.n	cca2 <hal_spi_config_slave+0x1e>
            rc = EINVAL;
    ccca:	2016      	movs	r0, #22
    return rc;
    cccc:	e7ed      	b.n	ccaa <hal_spi_config_slave+0x26>
	...

0000ccd0 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
    ccd0:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
    ccd2:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
    ccd4:	2401      	movs	r4, #1
    ccd6:	409c      	lsls	r4, r3
    ccd8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    ccdc:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
    port->PIN_CNF[pin] =
    cce0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    cce4:	2403      	movs	r4, #3
    cce6:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
    ccea:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
    ccec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ccf0:	2400      	movs	r4, #0
    ccf2:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
    ccf6:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
    ccf8:	780c      	ldrb	r4, [r1, #0]
    ccfa:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
    ccfe:	784c      	ldrb	r4, [r1, #1]
    cd00:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
    cd04:	7889      	ldrb	r1, [r1, #2]
    cd06:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    cd0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cd0e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
    cd12:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    cd16:	491a      	ldr	r1, [pc, #104]	; (cd80 <hal_spi_init_master+0xb0>)
    cd18:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    cd1a:	3310      	adds	r3, #16
    cd1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    cd20:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
    cd24:	2b00      	cmp	r3, #0
    cd26:	db23      	blt.n	cd70 <hal_spi_init_master+0xa0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd28:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    cd2c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    cd30:	22e0      	movs	r2, #224	; 0xe0
    cd32:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
    cd36:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
    cd3a:	2b00      	cmp	r3, #0
    cd3c:	db08      	blt.n	cd50 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cd3e:	f003 011f 	and.w	r1, r3, #31
    cd42:	095b      	lsrs	r3, r3, #5
    cd44:	2201      	movs	r2, #1
    cd46:	408a      	lsls	r2, r1
    cd48:	3360      	adds	r3, #96	; 0x60
    cd4a:	490e      	ldr	r1, [pc, #56]	; (cd84 <hal_spi_init_master+0xb4>)
    cd4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
    cd50:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
    cd54:	2b00      	cmp	r3, #0
    cd56:	db07      	blt.n	cd68 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cd58:	f003 011f 	and.w	r1, r3, #31
    cd5c:	095b      	lsrs	r3, r3, #5
    cd5e:	2201      	movs	r2, #1
    cd60:	408a      	lsls	r2, r1
    cd62:	4908      	ldr	r1, [pc, #32]	; (cd84 <hal_spi_init_master+0xb4>)
    cd64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
    cd68:	2000      	movs	r0, #0
    cd6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    cd6e:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd70:	f003 030f 	and.w	r3, r3, #15
    cd74:	4a04      	ldr	r2, [pc, #16]	; (cd88 <hal_spi_init_master+0xb8>)
    cd76:	441a      	add	r2, r3
    cd78:	23e0      	movs	r3, #224	; 0xe0
    cd7a:	7613      	strb	r3, [r2, #24]
    cd7c:	e7db      	b.n	cd36 <hal_spi_init_master+0x66>
    cd7e:	bf00      	nop
    cd80:	e000ed00 	.word	0xe000ed00
    cd84:	e000e100 	.word	0xe000e100
    cd88:	e000ecfc 	.word	0xe000ecfc

0000cd8c <hal_spi_config_master>:
{
    cd8c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
    cd8e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
    cd90:	680c      	ldr	r4, [r1, #0]
    cd92:	684b      	ldr	r3, [r1, #4]
    cd94:	6084      	str	r4, [r0, #8]
    cd96:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
    cd98:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
    cd9c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
    cda0:	7808      	ldrb	r0, [r1, #0]
    cda2:	2801      	cmp	r0, #1
    cda4:	d916      	bls.n	cdd4 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
    cda6:	2001      	movs	r0, #1
    cda8:	4098      	lsls	r0, r3
    cdaa:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    cdae:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
    cdb2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    cdb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cdba:	2403      	movs	r4, #3
    cdbc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
    cdc0:	788b      	ldrb	r3, [r1, #2]
    cdc2:	b973      	cbnz	r3, cde2 <hal_spi_config_master+0x56>
    rc = 0;
    cdc4:	2000      	movs	r0, #0
    switch (settings->data_mode) {
    cdc6:	780b      	ldrb	r3, [r1, #0]
    cdc8:	2b03      	cmp	r3, #3
    cdca:	d825      	bhi.n	ce18 <hal_spi_config_master+0x8c>
    cdcc:	e8df f003 	tbb	[pc, r3]
    cdd0:	2220270b 	.word	0x2220270b
        port->OUTCLR = (1UL << pin);
    cdd4:	2001      	movs	r0, #1
    cdd6:	4098      	lsls	r0, r3
    cdd8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
    cddc:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    cde0:	e7e7      	b.n	cdb2 <hal_spi_config_master+0x26>
            rc = EINVAL;
    cde2:	2016      	movs	r0, #22
    cde4:	e7ef      	b.n	cdc6 <hal_spi_config_master+0x3a>
    switch (settings->data_mode) {
    cde6:	2300      	movs	r3, #0
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
    cde8:	f891 c001 	ldrb.w	ip, [r1, #1]
    cdec:	f1bc 0f01 	cmp.w	ip, #1
    cdf0:	d017      	beq.n	ce22 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
    cdf2:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
    cdf6:	684b      	ldr	r3, [r1, #4]
    cdf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    cdfc:	d02c      	beq.n	ce58 <hal_spi_config_master+0xcc>
    cdfe:	d81c      	bhi.n	ce3a <hal_spi_config_master+0xae>
    ce00:	2bfa      	cmp	r3, #250	; 0xfa
    ce02:	d02c      	beq.n	ce5e <hal_spi_config_master+0xd2>
    ce04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    ce08:	d10e      	bne.n	ce28 <hal_spi_config_master+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
    ce0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ce0e:	e00f      	b.n	ce30 <hal_spi_config_master+0xa4>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
    ce10:	2304      	movs	r3, #4
            break;
    ce12:	e7e9      	b.n	cde8 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
    ce14:	2306      	movs	r3, #6
            break;
    ce16:	e7e7      	b.n	cde8 <hal_spi_config_master+0x5c>
            nrf_config = 0;
    ce18:	2300      	movs	r3, #0
            rc = EINVAL;
    ce1a:	2016      	movs	r0, #22
            break;
    ce1c:	e7e4      	b.n	cde8 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    ce1e:	2302      	movs	r3, #2
    ce20:	e7e2      	b.n	cde8 <hal_spi_config_master+0x5c>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
    ce22:	f043 0301 	orr.w	r3, r3, #1
    ce26:	e7e4      	b.n	cdf2 <hal_spi_config_master+0x66>
    switch (settings->baudrate) {
    ce28:	2b7d      	cmp	r3, #125	; 0x7d
    ce2a:	d11b      	bne.n	ce64 <hal_spi_config_master+0xd8>
    ce2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
    ce30:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
    ce34:	f85d 4b04 	ldr.w	r4, [sp], #4
    ce38:	4770      	bx	lr
    switch (settings->baudrate) {
    ce3a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    ce3e:	d014      	beq.n	ce6a <hal_spi_config_master+0xde>
    ce40:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    ce44:	d102      	bne.n	ce4c <hal_spi_config_master+0xc0>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
    ce46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    ce4a:	e7f1      	b.n	ce30 <hal_spi_config_master+0xa4>
    switch (settings->baudrate) {
    ce4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    ce50:	d10e      	bne.n	ce70 <hal_spi_config_master+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
    ce52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    ce56:	e7eb      	b.n	ce30 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
    ce58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce5c:	e7e8      	b.n	ce30 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
    ce5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    ce62:	e7e5      	b.n	ce30 <hal_spi_config_master+0xa4>
            frequency = 0;
    ce64:	2300      	movs	r3, #0
            rc = EINVAL;
    ce66:	2016      	movs	r0, #22
    ce68:	e7e2      	b.n	ce30 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
    ce6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ce6e:	e7df      	b.n	ce30 <hal_spi_config_master+0xa4>
            frequency = 0;
    ce70:	2300      	movs	r3, #0
            rc = EINVAL;
    ce72:	2016      	movs	r0, #22
    ce74:	e7dc      	b.n	ce30 <hal_spi_config_master+0xa4>
	...

0000ce78 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    ce78:	2803      	cmp	r0, #3
    ce7a:	dc10      	bgt.n	ce9e <hal_spi_config+0x26>
{
    ce7c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    ce7e:	4b0b      	ldr	r3, [pc, #44]	; (ceac <hal_spi_config+0x34>)
    ce80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ce84:	b168      	cbz	r0, cea2 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    ce86:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
    ce88:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    ce8c:	b95b      	cbnz	r3, cea6 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    ce8e:	7803      	ldrb	r3, [r0, #0]
    ce90:	b913      	cbnz	r3, ce98 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    ce92:	f7ff ff7b 	bl	cd8c <hal_spi_config_master>
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
    ce96:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_slave(spi, settings);
    ce98:	f7ff fef4 	bl	cc84 <hal_spi_config_slave>
    ce9c:	e7fb      	b.n	ce96 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    ce9e:	2016      	movs	r0, #22
}
    cea0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cea2:	2016      	movs	r0, #22
    cea4:	e7f7      	b.n	ce96 <hal_spi_config+0x1e>
        return -1;
    cea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ceaa:	e7f4      	b.n	ce96 <hal_spi_config+0x1e>
    ceac:	0002375c 	.word	0x0002375c

0000ceb0 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    ceb0:	2803      	cmp	r0, #3
    ceb2:	dc1b      	bgt.n	ceec <hal_spi_enable+0x3c>
    ceb4:	4b10      	ldr	r3, [pc, #64]	; (cef8 <hal_spi_enable+0x48>)
    ceb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    ceba:	b1cb      	cbz	r3, cef0 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    cebc:	781a      	ldrb	r2, [r3, #0]
    cebe:	b92a      	cbnz	r2, cecc <hal_spi_enable+0x1c>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    cec0:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    cec2:	2201      	movs	r2, #1
    cec4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    }
    rc = 0;
    cec8:	2000      	movs	r0, #0
    ceca:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
    cecc:	6a1a      	ldr	r2, [r3, #32]
    cece:	b18a      	cbz	r2, cef4 <hal_spi_enable+0x44>
        spis = spi->nhs_spi.spis;
    ced0:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    ced2:	2000      	movs	r0, #0
    ced4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    ced8:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    cedc:	f240 4202 	movw	r2, #1026	; 0x402
    cee0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    cee4:	2202      	movs	r2, #2
    cee6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    ceea:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    ceec:	2016      	movs	r0, #22
    ceee:	4770      	bx	lr
    cef0:	2016      	movs	r0, #22
    cef2:	4770      	bx	lr
            rc = EINVAL;
    cef4:	2016      	movs	r0, #22

err:
    return rc;
}
    cef6:	4770      	bx	lr
    cef8:	0002375c 	.word	0x0002375c

0000cefc <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cefc:	2803      	cmp	r0, #3
    cefe:	dc2a      	bgt.n	cf56 <hal_spi_disable+0x5a>
{
    cf00:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cf02:	4b17      	ldr	r3, [pc, #92]	; (cf60 <hal_spi_disable+0x64>)
    cf04:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    cf08:	b33c      	cbz	r4, cf5a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    cf0a:	7823      	ldrb	r3, [r4, #0]
    cf0c:	b9ab      	cbnz	r3, cf3a <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
    cf0e:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    cf10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf14:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
    cf18:	7863      	ldrb	r3, [r4, #1]
    cf1a:	b943      	cbnz	r3, cf2e <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
    cf1c:	2300      	movs	r3, #0
    cf1e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    cf22:	2000      	movs	r0, #0
    cf24:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
    cf26:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
    cf28:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
    cf2a:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
    cf2c:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
    cf2e:	4628      	mov	r0, r5
    cf30:	f7ff fe9e 	bl	cc70 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
    cf34:	2300      	movs	r3, #0
    cf36:	7063      	strb	r3, [r4, #1]
    cf38:	e7f0      	b.n	cf1c <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
    cf3a:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    cf3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf40:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
    cf44:	2300      	movs	r3, #0
    cf46:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    cf4a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    cf4e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    cf52:	70e3      	strb	r3, [r4, #3]
    cf54:	e7e5      	b.n	cf22 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cf56:	2016      	movs	r0, #22
}
    cf58:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cf5a:	2016      	movs	r0, #22
    return rc;
    cf5c:	e7e6      	b.n	cf2c <hal_spi_disable+0x30>
    cf5e:	bf00      	nop
    cf60:	0002375c 	.word	0x0002375c

0000cf64 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cf64:	2803      	cmp	r0, #3
    cf66:	dc1d      	bgt.n	cfa4 <hal_spi_init+0x40>
{
    cf68:	b538      	push	{r3, r4, r5, lr}
    cf6a:	460c      	mov	r4, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cf6c:	4b12      	ldr	r3, [pc, #72]	; (cfb8 <hal_spi_init+0x54>)
    cf6e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    cf72:	b1cd      	cbz	r5, cfa8 <hal_spi_init+0x44>
    if (cfg == NULL) {
    cf74:	b1d1      	cbz	r1, cfac <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    cf76:	2a01      	cmp	r2, #1
    cf78:	d81a      	bhi.n	cfb0 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
    cf7a:	702a      	strb	r2, [r5, #0]
    if (spi_num == 0) {
    cf7c:	b9d0      	cbnz	r0, cfb4 <hal_spi_init+0x50>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    cf7e:	2303      	movs	r3, #3
    cf80:	752b      	strb	r3, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    cf82:	b94a      	cbnz	r2, cf98 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
    cf84:	4b0d      	ldr	r3, [pc, #52]	; (cfbc <hal_spi_init+0x58>)
    cf86:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
    cf88:	f7ff ffb8 	bl	cefc <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
    cf8c:	4a0c      	ldr	r2, [pc, #48]	; (cfc0 <hal_spi_init+0x5c>)
    cf8e:	4621      	mov	r1, r4
    cf90:	4628      	mov	r0, r5
    cf92:	f7ff fe9d 	bl	ccd0 <hal_spi_init_master>
    cf96:	e00e      	b.n	cfb6 <hal_spi_init+0x52>
            assert(0);
    cf98:	2300      	movs	r3, #0
    cf9a:	461a      	mov	r2, r3
    cf9c:	4619      	mov	r1, r3
    cf9e:	4618      	mov	r0, r3
    cfa0:	f000 f9de 	bl	d360 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cfa4:	2016      	movs	r0, #22
}
    cfa6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cfa8:	2016      	movs	r0, #22
    cfaa:	e004      	b.n	cfb6 <hal_spi_init+0x52>
    rc = EINVAL;
    cfac:	2016      	movs	r0, #22
    cfae:	e002      	b.n	cfb6 <hal_spi_init+0x52>
    cfb0:	2016      	movs	r0, #22
    cfb2:	e000      	b.n	cfb6 <hal_spi_init+0x52>
    cfb4:	2016      	movs	r0, #22
}
    cfb6:	bd38      	pop	{r3, r4, r5, pc}
    cfb8:	0002375c 	.word	0x0002375c
    cfbc:	40003000 	.word	0x40003000
    cfc0:	0000cc59 	.word	0x0000cc59

0000cfc4 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cfc4:	2803      	cmp	r0, #3
    cfc6:	dc0a      	bgt.n	cfde <hal_spi_set_txrx_cb+0x1a>
    cfc8:	4b08      	ldr	r3, [pc, #32]	; (cfec <hal_spi_set_txrx_cb+0x28>)
    cfca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    cfce:	b143      	cbz	r3, cfe2 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    cfd0:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    cfd2:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    cfd6:	b930      	cbnz	r0, cfe6 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
    cfd8:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
    cfda:	625a      	str	r2, [r3, #36]	; 0x24
        rc = 0;
    cfdc:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    cfde:	2016      	movs	r0, #22
    cfe0:	4770      	bx	lr
    cfe2:	2016      	movs	r0, #22
    cfe4:	4770      	bx	lr
        rc = -1;
    cfe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
    cfea:	4770      	bx	lr
    cfec:	0002375c 	.word	0x0002375c

0000cff0 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    cff0:	2b00      	cmp	r3, #0
    cff2:	d046      	beq.n	d082 <hal_spi_txrx+0x92>
{
    cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cff6:	460d      	mov	r5, r1
    cff8:	4616      	mov	r6, r2
    cffa:	461f      	mov	r7, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    cffc:	2803      	cmp	r0, #3
    cffe:	dc42      	bgt.n	d086 <hal_spi_txrx+0x96>
    d000:	4b25      	ldr	r3, [pc, #148]	; (d098 <hal_spi_txrx+0xa8>)
    d002:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d006:	2b00      	cmp	r3, #0
    d008:	d03f      	beq.n	d08a <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    d00a:	781a      	ldrb	r2, [r3, #0]
    d00c:	2a00      	cmp	r2, #0
    d00e:	d13e      	bne.n	d08e <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    d010:	2900      	cmp	r1, #0
    d012:	d03e      	beq.n	d092 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    d014:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    d016:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    d01a:	2b07      	cmp	r3, #7
    d01c:	d004      	beq.n	d028 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
    d01e:	b95b      	cbnz	r3, d038 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    d020:	2301      	movs	r3, #1
    d022:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    d026:	e007      	b.n	d038 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
    d028:	f7ff ff68 	bl	cefc <hal_spi_disable>
        if (enabled == 0) {
    d02c:	e7f8      	b.n	d020 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
    d02e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    d032:	2300      	movs	r3, #0
    d034:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
    d038:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d03c:	2b00      	cmp	r3, #0
    d03e:	d1f6      	bne.n	d02e <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    d040:	782b      	ldrb	r3, [r5, #0]
    d042:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
    d046:	1e7a      	subs	r2, r7, #1
        rxd = (uint8_t *)rxbuf;
    d048:	4631      	mov	r1, r6
        for (i = 0; i < len; ++i) {
    d04a:	2000      	movs	r0, #0
    d04c:	e00d      	b.n	d06a <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
    d04e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d052:	2b00      	cmp	r3, #0
    d054:	d0fb      	beq.n	d04e <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
    d056:	2300      	movs	r3, #0
    d058:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    d05c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    d060:	b2db      	uxtb	r3, r3
            if (rxbuf) {
    d062:	b10e      	cbz	r6, d068 <hal_spi_txrx+0x78>
                *rxd = rxval;
    d064:	f801 3b01 	strb.w	r3, [r1], #1
        for (i = 0; i < len; ++i) {
    d068:	3001      	adds	r0, #1
    d06a:	42b8      	cmp	r0, r7
    d06c:	da07      	bge.n	d07e <hal_spi_txrx+0x8e>
            if (txcnt) {
    d06e:	2a00      	cmp	r2, #0
    d070:	d0ed      	beq.n	d04e <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
    d072:	786b      	ldrb	r3, [r5, #1]
    d074:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
    d078:	3a01      	subs	r2, #1
                ++txd;
    d07a:	3501      	adds	r5, #1
    d07c:	e7e7      	b.n	d04e <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
    d07e:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    d080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
    d082:	2016      	movs	r0, #22
}
    d084:	4770      	bx	lr
    return rc;
    d086:	2016      	movs	r0, #22
    d088:	e7fa      	b.n	d080 <hal_spi_txrx+0x90>
    d08a:	2016      	movs	r0, #22
    d08c:	e7f8      	b.n	d080 <hal_spi_txrx+0x90>
    d08e:	2016      	movs	r0, #22
    d090:	e7f6      	b.n	d080 <hal_spi_txrx+0x90>
    d092:	2016      	movs	r0, #22
    d094:	e7f4      	b.n	d080 <hal_spi_txrx+0x90>
    d096:	bf00      	nop
    d098:	0002375c 	.word	0x0002375c

0000d09c <hal_spi_txrx_noblock>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx_noblock(int spi_num, void *txbuf, void *rxbuf, int len)
{
    d09c:	b570      	push	{r4, r5, r6, lr}
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    d09e:	2803      	cmp	r0, #3
    d0a0:	dc63      	bgt.n	d16a <hal_spi_txrx_noblock+0xce>
    d0a2:	461c      	mov	r4, r3
    d0a4:	4b3a      	ldr	r3, [pc, #232]	; (d190 <hal_spi_txrx_noblock+0xf4>)
    d0a6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    d0aa:	2d00      	cmp	r5, #0
    d0ac:	d060      	beq.n	d170 <hal_spi_txrx_noblock+0xd4>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
    d0ae:	6a2b      	ldr	r3, [r5, #32]
    d0b0:	2b00      	cmp	r3, #0
    d0b2:	d05f      	beq.n	d174 <hal_spi_txrx_noblock+0xd8>
    d0b4:	2c00      	cmp	r4, #0
    d0b6:	d05f      	beq.n	d178 <hal_spi_txrx_noblock+0xdc>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
    d0b8:	2c01      	cmp	r4, #1
    d0ba:	d033      	beq.n	d124 <hal_spi_txrx_noblock+0x88>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    d0bc:	782b      	ldrb	r3, [r5, #0]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d141      	bne.n	d146 <hal_spi_txrx_noblock+0xaa>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    d0c2:	2900      	cmp	r1, #0
    d0c4:	d05a      	beq.n	d17c <hal_spi_txrx_noblock+0xe0>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
    d0c6:	786b      	ldrb	r3, [r5, #1]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d159      	bne.n	d180 <hal_spi_txrx_noblock+0xe4>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
    d0cc:	6928      	ldr	r0, [r5, #16]
#if MYNEWT_VAL(SPI_3_MASTER)
        if (spim == NRF_SPIM3) {
            anomaly_198_enable(txbuf, len);
        }
#endif
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
    d0ce:	2340      	movs	r3, #64	; 0x40
    d0d0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
    d0d4:	2301      	movs	r3, #1
    d0d6:	706b      	strb	r3, [r5, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
    d0d8:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    d0dc:	2b07      	cmp	r3, #7
    d0de:	d005      	beq.n	d0ec <hal_spi_txrx_noblock+0x50>
            spim->ENABLE = 0;
    d0e0:	2300      	movs	r3, #0
    d0e2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    d0e6:	2307      	movs	r3, #7
    d0e8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
    d0ec:	2300      	movs	r3, #0
    d0ee:	80eb      	strh	r3, [r5, #6]
        spi->nhs_buflen = len;
    d0f0:	80ac      	strh	r4, [r5, #4]
        spi->nhs_txbuf = txbuf;
    d0f2:	61a9      	str	r1, [r5, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
    d0f4:	2cff      	cmp	r4, #255	; 0xff
    d0f6:	bfa8      	it	ge
    d0f8:	24ff      	movge	r4, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
    d0fa:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
    d0fe:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
    d102:	61ea      	str	r2, [r5, #28]
        if (rxbuf == NULL) {
    d104:	b1c2      	cbz	r2, d138 <hal_spi_txrx_noblock+0x9c>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
    d106:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
    d10a:	f8c0 4538 	str.w	r4, [r0, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
    d10e:	2600      	movs	r6, #0
    d110:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
    d114:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
    d118:	2301      	movs	r3, #1
    d11a:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
    d11c:	2340      	movs	r3, #64	; 0x40
    d11e:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    d122:	e023      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
    d124:	4623      	mov	r3, r4
    d126:	f7ff ff63 	bl	cff0 <hal_spi_txrx>
        if (rc == 0) {
    d12a:	4606      	mov	r6, r0
    d12c:	b9f0      	cbnz	r0, d16c <hal_spi_txrx_noblock+0xd0>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
    d12e:	6a2b      	ldr	r3, [r5, #32]
    d130:	4621      	mov	r1, r4
    d132:	6a68      	ldr	r0, [r5, #36]	; 0x24
    d134:	4798      	blx	r3
        return rc;
    d136:	e019      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
    d138:	3502      	adds	r5, #2
    d13a:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
    d13e:	2301      	movs	r3, #1
    d140:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
    d144:	e7e3      	b.n	d10e <hal_spi_txrx_noblock+0x72>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
    d146:	b161      	cbz	r1, d162 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
    d148:	2cff      	cmp	r4, #255	; 0xff
    d14a:	dc1c      	bgt.n	d186 <hal_spi_txrx_noblock+0xea>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
    d14c:	78eb      	ldrb	r3, [r5, #3]
    d14e:	b9e3      	cbnz	r3, d18a <hal_spi_txrx_noblock+0xee>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
    d150:	61ea      	str	r2, [r5, #28]
        spi->nhs_txbuf = txbuf;
    d152:	61a9      	str	r1, [r5, #24]
        spi->nhs_buflen = len;
    d154:	80ac      	strh	r4, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
    d156:	2301      	movs	r3, #1
    d158:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
    d15a:	692a      	ldr	r2, [r5, #16]
    d15c:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
    d15e:	2600      	movs	r6, #0
    d160:	e004      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
    d162:	2a00      	cmp	r2, #0
    d164:	d1f0      	bne.n	d148 <hal_spi_txrx_noblock+0xac>
    rc = EINVAL;
    d166:	2616      	movs	r6, #22
    d168:	e000      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    d16a:	2616      	movs	r6, #22

err:
    return rc;
}
    d16c:	4630      	mov	r0, r6
    d16e:	bd70      	pop	{r4, r5, r6, pc}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    d170:	2616      	movs	r6, #22
    d172:	e7fb      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
    d174:	2616      	movs	r6, #22
    d176:	e7f9      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
    d178:	2616      	movs	r6, #22
    d17a:	e7f7      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
    d17c:	2616      	movs	r6, #22
    d17e:	e7f5      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
            rc = -1;
    d180:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d184:	e7f2      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
    d186:	2616      	movs	r6, #22
    d188:	e7f0      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
            rc = -1;
    d18a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d18e:	e7ed      	b.n	d16c <hal_spi_txrx_noblock+0xd0>
    d190:	0002375c 	.word	0x0002375c

0000d194 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    d194:	b508      	push	{r3, lr}
    os_time_advance(1);
    d196:	2001      	movs	r0, #1
    d198:	f001 fab0 	bl	e6fc <os_time_advance>
}
    d19c:	bd08      	pop	{r3, pc}
	...

0000d1a0 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
    d1a0:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    d1a2:	f000 ff77 	bl	e094 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    d1a6:	4b02      	ldr	r3, [pc, #8]	; (d1b0 <os_arch_ctx_sw+0x10>)
    d1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d1ac:	605a      	str	r2, [r3, #4]
}
    d1ae:	bd08      	pop	{r3, pc}
    d1b0:	e000ed00 	.word	0xe000ed00

0000d1b4 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d1b4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    d1b8:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    d1ba:	f000 0001 	and.w	r0, r0, #1
    d1be:	4770      	bx	lr

0000d1c0 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    d1c0:	b900      	cbnz	r0, d1c4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    d1c2:	b662      	cpsie	i
        __enable_irq();
    }
}
    d1c4:	4770      	bx	lr

0000d1c6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d1c6:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    d1ca:	f000 0001 	and.w	r0, r0, #1
    d1ce:	4770      	bx	lr

0000d1d0 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    d1d0:	b570      	push	{r4, r5, r6, lr}
    d1d2:	4606      	mov	r6, r0
    d1d4:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    d1d6:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
    d1da:	2309      	movs	r3, #9
    d1dc:	e003      	b.n	d1e6 <os_arch_task_stack_init+0x16>
        s[i] = 0;
    d1de:	2200      	movs	r2, #0
    d1e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
    d1e4:	3301      	adds	r3, #1
    d1e6:	2b0d      	cmp	r3, #13
    d1e8:	ddf9      	ble.n	d1de <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    d1ea:	4620      	mov	r0, r4
    d1ec:	f001 fba0 	bl	e930 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    d1f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d1f4:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    d1f8:	6973      	ldr	r3, [r6, #20]
    d1fa:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    d1fe:	69b3      	ldr	r3, [r6, #24]
    d200:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    d204:	f06f 0302 	mvn.w	r3, #2
    d208:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    d20c:	4620      	mov	r0, r4
    d20e:	bd70      	pop	{r4, r5, r6, pc}

0000d210 <os_arch_init>:

void
os_arch_init(void)
{
    d210:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d212:	4a04      	ldr	r2, [pc, #16]	; (d224 <os_arch_init+0x14>)
    d214:	6953      	ldr	r3, [r2, #20]
    d216:	f043 0310 	orr.w	r3, r3, #16
    d21a:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    d21c:	f000 f960 	bl	d4e0 <os_init_idle_task>
}
    d220:	bd08      	pop	{r3, pc}
    d222:	bf00      	nop
    d224:	e000ed00 	.word	0xe000ed00

0000d228 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    d228:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d22a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d22e:	b914      	cbnz	r4, d236 <os_arch_os_init+0xe>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d230:	f04f 0c00 	mov.w	ip, #0
    d234:	e00a      	b.n	d24c <os_arch_os_init+0x24>
    err = OS_ERR_IN_ISR;
    d236:	2007      	movs	r0, #7
    d238:	e034      	b.n	d2a4 <os_arch_os_init+0x7c>
            NVIC->IP[i] = -1;
    d23a:	f10c 4e60 	add.w	lr, ip, #3758096384	; 0xe0000000
    d23e:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
    d242:	24ff      	movs	r4, #255	; 0xff
    d244:	f88e 4300 	strb.w	r4, [lr, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d248:	f10c 0c01 	add.w	ip, ip, #1
    d24c:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
    d250:	d9f3      	bls.n	d23a <os_arch_os_init+0x12>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d252:	f06f 0c0d 	mvn.w	ip, #13
    d256:	e00a      	b.n	d26e <os_arch_os_init+0x46>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    d258:	fa4f fe8c 	sxtb.w	lr, ip
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d25c:	4c14      	ldr	r4, [pc, #80]	; (d2b0 <os_arch_os_init+0x88>)
    d25e:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d260:	f10e 0e10 	add.w	lr, lr, #16
    d264:	4d13      	ldr	r5, [pc, #76]	; (d2b4 <os_arch_os_init+0x8c>)
    d266:	f844 502e 	str.w	r5, [r4, lr, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    d26a:	f10c 0c01 	add.w	ip, ip, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d26e:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    d272:	ddf1      	ble.n	d258 <os_arch_os_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d274:	4c0e      	ldr	r4, [pc, #56]	; (d2b0 <os_arch_os_init+0x88>)
    d276:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d278:	4e0f      	ldr	r6, [pc, #60]	; (d2b8 <os_arch_os_init+0x90>)
    d27a:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d27c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d27e:	4e0f      	ldr	r6, [pc, #60]	; (d2bc <os_arch_os_init+0x94>)
    d280:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d282:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d284:	4e0e      	ldr	r6, [pc, #56]	; (d2c0 <os_arch_os_init+0x98>)
    d286:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d288:	25e0      	movs	r5, #224	; 0xe0
    d28a:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    d28e:	2520      	movs	r5, #32
    d290:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d292:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    d296:	f014 0f01 	tst.w	r4, #1
    d29a:	d004      	beq.n	d2a6 <os_arch_os_init+0x7e>
    SVC_Call(os_arch_init);
    d29c:	f8df c024 	ldr.w	ip, [pc, #36]	; d2c4 <os_arch_os_init+0x9c>
    d2a0:	df00      	svc	0
        err = OS_OK;
    d2a2:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    d2a4:	bd70      	pop	{r4, r5, r6, pc}
            os_arch_init();
    d2a6:	f7ff ffb3 	bl	d210 <os_arch_init>
        err = OS_OK;
    d2aa:	2000      	movs	r0, #0
    d2ac:	e7fa      	b.n	d2a4 <os_arch_os_init+0x7c>
    d2ae:	bf00      	nop
    d2b0:	e000ed00 	.word	0xe000ed00
    d2b4:	0000e9cf 	.word	0x0000e9cf
    d2b8:	0000e937 	.word	0x0000e937
    d2bc:	0000e97d 	.word	0x0000e97d
    d2c0:	0000e9c3 	.word	0x0000e9c3
    d2c4:	0000d211 	.word	0x0000d211

0000d2c8 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    d2c8:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    d2ca:	f001 f809 	bl	e2e0 <os_sched_next_task>
    d2ce:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    d2d0:	f000 fefe 	bl	e0d0 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    d2d4:	6823      	ldr	r3, [r4, #0]
    d2d6:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    d2d8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    d2dc:	2106      	movs	r1, #6
    d2de:	2080      	movs	r0, #128	; 0x80
    d2e0:	f00b fcd8 	bl	18c94 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    d2e4:	4b03      	ldr	r3, [pc, #12]	; (d2f4 <os_arch_start+0x2c>)
    d2e6:	2201      	movs	r2, #1
    d2e8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    d2ea:	4620      	mov	r0, r4
    d2ec:	f7ff ff58 	bl	d1a0 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    d2f0:	69a0      	ldr	r0, [r4, #24]
    d2f2:	bd10      	pop	{r4, pc}
    d2f4:	20002f48 	.word	0x20002f48

0000d2f8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    d2f8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    d2fa:	4816      	ldr	r0, [pc, #88]	; (d354 <os_arch_os_start+0x5c>)
    d2fc:	6800      	ldr	r0, [r0, #0]
    d2fe:	3804      	subs	r0, #4
    d300:	f001 fb0c 	bl	e91c <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d304:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d308:	bb04      	cbnz	r4, d34c <os_arch_os_start+0x54>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d30a:	f3ef 8c14 	mrs	ip, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    d30e:	f00c 0c03 	and.w	ip, ip, #3
    d312:	f1bc 0f02 	cmp.w	ip, #2
    d316:	d00f      	beq.n	d338 <os_arch_os_start+0x40>
    d318:	d804      	bhi.n	d324 <os_arch_os_start+0x2c>
    d31a:	f1bc 0f01 	cmp.w	ip, #1
    d31e:	d810      	bhi.n	d342 <os_arch_os_start+0x4a>
    d320:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    d322:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    d324:	f1bc 0f03 	cmp.w	ip, #3
    d328:	d10b      	bne.n	d342 <os_arch_os_start+0x4a>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    d32a:	4c0b      	ldr	r4, [pc, #44]	; (d358 <os_arch_os_start+0x60>)
    d32c:	6824      	ldr	r4, [r4, #0]
    d32e:	f014 0f01 	tst.w	r4, #1
    d332:	d106      	bne.n	d342 <os_arch_os_start+0x4a>
                err = OS_ERR_PRIV;
    d334:	2008      	movs	r0, #8
    d336:	e7f4      	b.n	d322 <os_arch_os_start+0x2a>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    d338:	4c07      	ldr	r4, [pc, #28]	; (d358 <os_arch_os_start+0x60>)
    d33a:	6824      	ldr	r4, [r4, #0]
    d33c:	f014 0f01 	tst.w	r4, #1
    d340:	d106      	bne.n	d350 <os_arch_os_start+0x58>
    SVC_Call(os_arch_start);
    d342:	f8df c018 	ldr.w	ip, [pc, #24]	; d35c <os_arch_os_start+0x64>
    d346:	df00      	svc	0
}
    d348:	2000      	movs	r0, #0
    d34a:	e7ea      	b.n	d322 <os_arch_os_start+0x2a>
    err = OS_ERR_IN_ISR;
    d34c:	2007      	movs	r0, #7
    d34e:	e7e8      	b.n	d322 <os_arch_os_start+0x2a>
                err = OS_ERR_PRIV;
    d350:	2008      	movs	r0, #8
    d352:	e7e6      	b.n	d322 <os_arch_os_start+0x2a>
    d354:	20001da0 	.word	0x20001da0
    d358:	20001d9c 	.word	0x20001d9c
    d35c:	0000d2c9 	.word	0x0000d2c9

0000d360 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    d360:	b508      	push	{r3, lr}
    d362:	4675      	mov	r5, lr
    d364:	4604      	mov	r4, r0
    d366:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    d368:	f7ff ff24 	bl	d1b4 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    d36c:	f005 ffa6 	bl	132bc <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    d370:	b18c      	cbz	r4, d396 <__assert_func+0x36>
    d372:	4633      	mov	r3, r6
    d374:	4622      	mov	r2, r4
    d376:	4629      	mov	r1, r5
    d378:	4809      	ldr	r0, [pc, #36]	; (d3a0 <__assert_func+0x40>)
    d37a:	f006 f985 	bl	13688 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    d37e:	f7fa ff1f 	bl	81c0 <hal_debugger_connected>
    d382:	b100      	cbz	r0, d386 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    d384:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    d386:	4b07      	ldr	r3, [pc, #28]	; (d3a4 <__assert_func+0x44>)
    d388:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d38c:	605a      	str	r2, [r3, #4]
    asm("isb");
    d38e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    d392:	f7fa ff1d 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    d396:	4629      	mov	r1, r5
    d398:	4803      	ldr	r0, [pc, #12]	; (d3a8 <__assert_func+0x48>)
    d39a:	f006 f975 	bl	13688 <console_printf>
    d39e:	e7ee      	b.n	d37e <__assert_func+0x1e>
    d3a0:	0002377c 	.word	0x0002377c
    d3a4:	e000ed00 	.word	0xe000ed00
    d3a8:	0002376c 	.word	0x0002376c

0000d3ac <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    d3ac:	b500      	push	{lr}
    d3ae:	b083      	sub	sp, #12
    d3b0:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    d3b2:	f005 ff83 	bl	132bc <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    d3b6:	4d1b      	ldr	r5, [pc, #108]	; (d424 <os_default_irq+0x78>)
    d3b8:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    d3ba:	6822      	ldr	r2, [r4, #0]
    d3bc:	f3c1 0108 	ubfx	r1, r1, #0, #9
    d3c0:	4819      	ldr	r0, [pc, #100]	; (d428 <os_default_irq+0x7c>)
    d3c2:	f006 f961 	bl	13688 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    d3c6:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    d3c8:	6883      	ldr	r3, [r0, #8]
    d3ca:	6842      	ldr	r2, [r0, #4]
    d3cc:	6801      	ldr	r1, [r0, #0]
    d3ce:	68c0      	ldr	r0, [r0, #12]
    d3d0:	9000      	str	r0, [sp, #0]
    d3d2:	4816      	ldr	r0, [pc, #88]	; (d42c <os_default_irq+0x80>)
    d3d4:	f006 f958 	bl	13688 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    d3d8:	6923      	ldr	r3, [r4, #16]
    d3da:	9300      	str	r3, [sp, #0]
    d3dc:	68e3      	ldr	r3, [r4, #12]
    d3de:	68a2      	ldr	r2, [r4, #8]
    d3e0:	6861      	ldr	r1, [r4, #4]
    d3e2:	4813      	ldr	r0, [pc, #76]	; (d430 <os_default_irq+0x84>)
    d3e4:	f006 f950 	bl	13688 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    d3e8:	6a23      	ldr	r3, [r4, #32]
    d3ea:	9300      	str	r3, [sp, #0]
    d3ec:	69e3      	ldr	r3, [r4, #28]
    d3ee:	69a2      	ldr	r2, [r4, #24]
    d3f0:	6961      	ldr	r1, [r4, #20]
    d3f2:	4810      	ldr	r0, [pc, #64]	; (d434 <os_default_irq+0x88>)
    d3f4:	f006 f948 	bl	13688 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    d3f8:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    d3fa:	6983      	ldr	r3, [r0, #24]
    d3fc:	6942      	ldr	r2, [r0, #20]
    d3fe:	6901      	ldr	r1, [r0, #16]
    d400:	69c0      	ldr	r0, [r0, #28]
    d402:	9000      	str	r0, [sp, #0]
    d404:	480c      	ldr	r0, [pc, #48]	; (d438 <os_default_irq+0x8c>)
    d406:	f006 f93f 	bl	13688 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    d40a:	6869      	ldr	r1, [r5, #4]
    d40c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    d40e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d410:	480a      	ldr	r0, [pc, #40]	; (d43c <os_default_irq+0x90>)
    d412:	f006 f939 	bl	13688 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    d416:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    d418:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    d41a:	4809      	ldr	r0, [pc, #36]	; (d440 <os_default_irq+0x94>)
    d41c:	f006 f934 	bl	13688 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    d420:	f7fa fed6 	bl	81d0 <hal_system_reset>
    d424:	e000ed00 	.word	0xe000ed00
    d428:	00023794 	.word	0x00023794
    d42c:	000237c8 	.word	0x000237c8
    d430:	000237fc 	.word	0x000237fc
    d434:	00023830 	.word	0x00023830
    d438:	00023864 	.word	0x00023864
    d43c:	00023898 	.word	0x00023898
    d440:	000238c0 	.word	0x000238c0

0000d444 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    d446:	f00b ff15 	bl	19274 <hal_watchdog_tickle>
    sanity_last = 0;
    d44a:	2600      	movs	r6, #0
    d44c:	e00b      	b.n	d466 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    d44e:	f000 fdb9 	bl	dfc4 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    d452:	f00b ff0f 	bl	19274 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    d456:	4626      	mov	r6, r4
    d458:	e011      	b.n	d47e <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    d45a:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    d45c:	f00b fbce 	bl	18bfc <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    d460:	4628      	mov	r0, r5
    d462:	f7ff fead 	bl	d1c0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    d466:	4a14      	ldr	r2, [pc, #80]	; (d4b8 <os_idle_task+0x74>)
    d468:	6813      	ldr	r3, [r2, #0]
    d46a:	3301      	adds	r3, #1
    d46c:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    d46e:	f001 f93f 	bl	e6f0 <os_time_get>
    d472:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    d474:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    d478:	1ac3      	subs	r3, r0, r3
    d47a:	2b00      	cmp	r3, #0
    d47c:	dce7      	bgt.n	d44e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    d47e:	f7ff fe99 	bl	d1b4 <os_arch_save_sr>
    d482:	4605      	mov	r5, r0
        now = os_time_get();
    d484:	f001 f934 	bl	e6f0 <os_time_get>
    d488:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    d48a:	f000 ff09 	bl	e2a0 <os_sched_wakeup_ticks>
    d48e:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    d490:	4638      	mov	r0, r7
    d492:	f000 f989 	bl	d7a8 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    d496:	4284      	cmp	r4, r0
    d498:	bf28      	it	cs
    d49a:	4604      	movcs	r4, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    d49c:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    d4a0:	1bd8      	subs	r0, r3, r7
    d4a2:	42a0      	cmp	r0, r4
    d4a4:	bf28      	it	cs
    d4a6:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    d4a8:	280b      	cmp	r0, #11
    d4aa:	d9d6      	bls.n	d45a <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
    d4ac:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    d4b0:	d9d4      	bls.n	d45c <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
    d4b2:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    d4b6:	e7d1      	b.n	d45c <os_idle_task+0x18>
    d4b8:	20001ef0 	.word	0x20001ef0

0000d4bc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    d4bc:	b508      	push	{r3, lr}
    d4be:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    d4c0:	2100      	movs	r1, #0
    d4c2:	4608      	mov	r0, r1
    d4c4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    d4c6:	2300      	movs	r3, #0
    d4c8:	461a      	mov	r2, r3
    d4ca:	4619      	mov	r1, r3
    d4cc:	4618      	mov	r0, r3
    d4ce:	f7ff ff47 	bl	d360 <__assert_func>
	...

0000d4d4 <os_started>:
}
    d4d4:	4b01      	ldr	r3, [pc, #4]	; (d4dc <os_started+0x8>)
    d4d6:	6818      	ldr	r0, [r3, #0]
    d4d8:	4770      	bx	lr
    d4da:	bf00      	nop
    d4dc:	20002f48 	.word	0x20002f48

0000d4e0 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    d4e0:	b500      	push	{lr}
    d4e2:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    d4e4:	2340      	movs	r3, #64	; 0x40
    d4e6:	9303      	str	r3, [sp, #12]
    d4e8:	4b15      	ldr	r3, [pc, #84]	; (d540 <os_init_idle_task+0x60>)
    d4ea:	9302      	str	r3, [sp, #8]
    d4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4f0:	9301      	str	r3, [sp, #4]
    d4f2:	23ff      	movs	r3, #255	; 0xff
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	2300      	movs	r3, #0
    d4f8:	4a12      	ldr	r2, [pc, #72]	; (d544 <os_init_idle_task+0x64>)
    d4fa:	4913      	ldr	r1, [pc, #76]	; (d548 <os_init_idle_task+0x68>)
    d4fc:	4813      	ldr	r0, [pc, #76]	; (d54c <os_init_idle_task+0x6c>)
    d4fe:	f000 ffbd 	bl	e47c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    d502:	b950      	cbnz	r0, d51a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    d504:	f000 fd94 	bl	e030 <os_sanity_init>
    assert(rc == 0);
    d508:	b968      	cbnz	r0, d526 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    d50a:	f247 5030 	movw	r0, #30000	; 0x7530
    d50e:	f00b fe6d 	bl	191ec <hal_watchdog_init>
    assert(rc == 0);
    d512:	b970      	cbnz	r0, d532 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    d514:	b005      	add	sp, #20
    d516:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    d51a:	2300      	movs	r3, #0
    d51c:	461a      	mov	r2, r3
    d51e:	4619      	mov	r1, r3
    d520:	4618      	mov	r0, r3
    d522:	f7ff ff1d 	bl	d360 <__assert_func>
    assert(rc == 0);
    d526:	2300      	movs	r3, #0
    d528:	461a      	mov	r2, r3
    d52a:	4619      	mov	r1, r3
    d52c:	4618      	mov	r0, r3
    d52e:	f7ff ff17 	bl	d360 <__assert_func>
    assert(rc == 0);
    d532:	2300      	movs	r3, #0
    d534:	461a      	mov	r2, r3
    d536:	4619      	mov	r1, r3
    d538:	4618      	mov	r0, r3
    d53a:	f7ff ff11 	bl	d360 <__assert_func>
    d53e:	bf00      	nop
    d540:	20001df0 	.word	0x20001df0
    d544:	0000d445 	.word	0x0000d445
    d548:	000238dc 	.word	0x000238dc
    d54c:	20001da0 	.word	0x20001da0

0000d550 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    d550:	b510      	push	{r4, lr}
    d552:	b084      	sub	sp, #16
    d554:	4604      	mov	r4, r0
    os_error_t err;

#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    d556:	2248      	movs	r2, #72	; 0x48
    d558:	2100      	movs	r1, #0
    d55a:	4828      	ldr	r0, [pc, #160]	; (d5fc <os_init+0xac>)
    d55c:	f003 ff99 	bl	11492 <memset>
    SEGGER_RTT_Init();
    d560:	f00a f9f0 	bl	17944 <SEGGER_RTT_Init>
#endif

    TAILQ_INIT(&g_callout_list);
    d564:	4b26      	ldr	r3, [pc, #152]	; (d600 <os_init+0xb0>)
    d566:	2200      	movs	r2, #0
    d568:	601a      	str	r2, [r3, #0]
    d56a:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    d56c:	4b25      	ldr	r3, [pc, #148]	; (d604 <os_init+0xb4>)
    d56e:	601a      	str	r2, [r3, #0]
    d570:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    d572:	f000 fad7 	bl	db24 <os_eventq_dflt_get>
    d576:	f000 fa19 	bl	d9ac <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    d57a:	f000 f9ff 	bl	d97c <os_dev_reset>

    err = os_arch_os_init();
    d57e:	f7ff fe53 	bl	d228 <os_arch_os_init>
    assert(err == OS_OK);
    d582:	bb18      	cbnz	r0, d5cc <os_init+0x7c>

    if (main_fn) {
    d584:	b194      	cbz	r4, d5ac <os_init+0x5c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    d586:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d58a:	9303      	str	r3, [sp, #12]
    d58c:	4b1e      	ldr	r3, [pc, #120]	; (d608 <os_init+0xb8>)
    d58e:	9302      	str	r3, [sp, #8]
    d590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d594:	9301      	str	r3, [sp, #4]
    d596:	237f      	movs	r3, #127	; 0x7f
    d598:	9300      	str	r3, [sp, #0]
    d59a:	4623      	mov	r3, r4
    d59c:	4a1b      	ldr	r2, [pc, #108]	; (d60c <os_init+0xbc>)
    d59e:	491c      	ldr	r1, [pc, #112]	; (d610 <os_init+0xc0>)
    d5a0:	481c      	ldr	r0, [pc, #112]	; (d614 <os_init+0xc4>)
    d5a2:	f000 ff6b 	bl	e47c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    d5a6:	f010 0fff 	tst.w	r0, #255	; 0xff
    d5aa:	d115      	bne.n	d5d8 <os_init+0x88>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    d5ac:	f00a f838 	bl	17620 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    d5b0:	2001      	movs	r0, #1
    d5b2:	f000 f9bb 	bl	d92c <os_dev_initialize_all>
    assert(err == OS_OK);
    d5b6:	f010 0fff 	tst.w	r0, #255	; 0xff
    d5ba:	d113      	bne.n	d5e4 <os_init+0x94>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    d5bc:	2002      	movs	r0, #2
    d5be:	f000 f9b5 	bl	d92c <os_dev_initialize_all>
    assert(err == OS_OK);
    d5c2:	f010 0fff 	tst.w	r0, #255	; 0xff
    d5c6:	d113      	bne.n	d5f0 <os_init+0xa0>
}
    d5c8:	b004      	add	sp, #16
    d5ca:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    d5cc:	2300      	movs	r3, #0
    d5ce:	461a      	mov	r2, r3
    d5d0:	4619      	mov	r1, r3
    d5d2:	4618      	mov	r0, r3
    d5d4:	f7ff fec4 	bl	d360 <__assert_func>
        assert(err == 0);
    d5d8:	2300      	movs	r3, #0
    d5da:	461a      	mov	r2, r3
    d5dc:	4619      	mov	r1, r3
    d5de:	4618      	mov	r0, r3
    d5e0:	f7ff febe 	bl	d360 <__assert_func>
    assert(err == OS_OK);
    d5e4:	2300      	movs	r3, #0
    d5e6:	461a      	mov	r2, r3
    d5e8:	4619      	mov	r1, r3
    d5ea:	4618      	mov	r0, r3
    d5ec:	f7ff feb8 	bl	d360 <__assert_func>
    assert(err == OS_OK);
    d5f0:	2300      	movs	r3, #0
    d5f2:	461a      	mov	r2, r3
    d5f4:	4619      	mov	r1, r3
    d5f6:	4618      	mov	r0, r3
    d5f8:	f7ff feb2 	bl	d360 <__assert_func>
    d5fc:	200000d8 	.word	0x200000d8
    d600:	20002f4c 	.word	0x20002f4c
    d604:	20003d64 	.word	0x20003d64
    d608:	20001ef8 	.word	0x20001ef8
    d60c:	0000d4bd 	.word	0x0000d4bd
    d610:	000238e4 	.word	0x000238e4
    d614:	20002ef8 	.word	0x20002ef8

0000d618 <os_start>:

void
os_start(void)
{
    d618:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    d61a:	f00b fe23 	bl	19264 <hal_watchdog_enable>

    err = os_arch_os_start();
    d61e:	f7ff fe6b 	bl	d2f8 <os_arch_os_start>
    assert(err == OS_OK);
    d622:	b900      	cbnz	r0, d626 <os_start+0xe>
#else
    assert(0);
#endif
}
    d624:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    d626:	2300      	movs	r3, #0
    d628:	461a      	mov	r2, r3
    d62a:	4619      	mov	r1, r3
    d62c:	4618      	mov	r0, r3
    d62e:	f7ff fe97 	bl	d360 <__assert_func>

0000d632 <os_reboot>:

void
os_reboot(int reason)
{
    d632:	b508      	push	{r3, lr}
    sysdown(reason);
    d634:	f007 fd0a 	bl	1504c <sysdown>
}
    d638:	bd08      	pop	{r3, pc}

0000d63a <os_system_reset>:

void
os_system_reset(void)
{
    d63a:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    d63c:	f00b fe1a 	bl	19274 <hal_watchdog_tickle>
    hal_system_reset();
    d640:	f7fa fdc6 	bl	81d0 <hal_system_reset>

0000d644 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    d644:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    d646:	4b0c      	ldr	r3, [pc, #48]	; (d678 <os_pkg_init+0x34>)
    d648:	781b      	ldrb	r3, [r3, #0]
    d64a:	b153      	cbz	r3, d662 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    d64c:	2003      	movs	r0, #3
    d64e:	f000 f96d 	bl	d92c <os_dev_initialize_all>
    assert(err == OS_OK);
    d652:	f010 0fff 	tst.w	r0, #255	; 0xff
    d656:	d109      	bne.n	d66c <os_pkg_init+0x28>

    os_mempool_module_init();
    d658:	f000 fb06 	bl	dc68 <os_mempool_module_init>
    os_msys_init();
    d65c:	f000 fb8c 	bl	dd78 <os_msys_init>
}
    d660:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    d662:	461a      	mov	r2, r3
    d664:	4619      	mov	r1, r3
    d666:	4618      	mov	r0, r3
    d668:	f7ff fe7a 	bl	d360 <__assert_func>
    assert(err == OS_OK);
    d66c:	2300      	movs	r3, #0
    d66e:	461a      	mov	r2, r3
    d670:	4619      	mov	r1, r3
    d672:	4618      	mov	r0, r3
    d674:	f7ff fe74 	bl	d360 <__assert_func>
    d678:	20006ca8 	.word	0x20006ca8

0000d67c <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d67e:	4604      	mov	r4, r0
    d680:	460d      	mov	r5, r1
    d682:	4617      	mov	r7, r2
    d684:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    d686:	2220      	movs	r2, #32
    d688:	2100      	movs	r1, #0
    d68a:	f003 ff02 	bl	11492 <memset>
    c->c_ev.ev_cb = ev_cb;
    d68e:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    d690:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    d692:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    d694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d698 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    d698:	b538      	push	{r3, r4, r5, lr}
    d69a:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    d69c:	f7ff fd8a 	bl	d1b4 <os_arch_save_sr>
    d6a0:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    d6a2:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    d6a4:	b13b      	cbz	r3, d6b6 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    d6a6:	69a2      	ldr	r2, [r4, #24]
    d6a8:	b172      	cbz	r2, d6c8 <os_callout_stop+0x30>
    d6aa:	61d3      	str	r3, [r2, #28]
    d6ac:	69e3      	ldr	r3, [r4, #28]
    d6ae:	69a2      	ldr	r2, [r4, #24]
    d6b0:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    d6b2:	2300      	movs	r3, #0
    d6b4:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    d6b6:	6920      	ldr	r0, [r4, #16]
    d6b8:	b110      	cbz	r0, d6c0 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    d6ba:	4621      	mov	r1, r4
    d6bc:	f000 fa10 	bl	dae0 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    d6c0:	4628      	mov	r0, r5
    d6c2:	f7ff fd7d 	bl	d1c0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    d6c6:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    d6c8:	4a01      	ldr	r2, [pc, #4]	; (d6d0 <os_callout_stop+0x38>)
    d6ca:	6053      	str	r3, [r2, #4]
    d6cc:	e7ee      	b.n	d6ac <os_callout_stop+0x14>
    d6ce:	bf00      	nop
    d6d0:	20002f4c 	.word	0x20002f4c

0000d6d4 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    d6d4:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    d6d6:	6903      	ldr	r3, [r0, #16]
    d6d8:	b193      	cbz	r3, d700 <os_callout_reset+0x2c>
    d6da:	4604      	mov	r4, r0
    d6dc:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    d6de:	2900      	cmp	r1, #0
    d6e0:	db2f      	blt.n	d742 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    d6e2:	f7ff fd67 	bl	d1b4 <os_arch_save_sr>
    d6e6:	4605      	mov	r5, r0

    os_callout_stop(c);
    d6e8:	4620      	mov	r0, r4
    d6ea:	f7ff ffd5 	bl	d698 <os_callout_stop>

    if (ticks == 0) {
    d6ee:	b906      	cbnz	r6, d6f2 <os_callout_reset+0x1e>
        ticks = 1;
    d6f0:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    d6f2:	f000 fffd 	bl	e6f0 <os_time_get>
    d6f6:	4430      	add	r0, r6
    d6f8:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    d6fa:	4b13      	ldr	r3, [pc, #76]	; (d748 <os_callout_reset+0x74>)
    d6fc:	681b      	ldr	r3, [r3, #0]
    d6fe:	e005      	b.n	d70c <os_callout_reset+0x38>
    assert(c->c_evq != NULL);
    d700:	461a      	mov	r2, r3
    d702:	4619      	mov	r1, r3
    d704:	4618      	mov	r0, r3
    d706:	f7ff fe2b 	bl	d360 <__assert_func>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    d70a:	699b      	ldr	r3, [r3, #24]
    d70c:	b11b      	cbz	r3, d716 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    d70e:	695a      	ldr	r2, [r3, #20]
    d710:	1a82      	subs	r2, r0, r2
    d712:	2a00      	cmp	r2, #0
    d714:	daf9      	bge.n	d70a <os_callout_reset+0x36>
            break;
        }
    }

    if (entry) {
    d716:	b15b      	cbz	r3, d730 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    d718:	69da      	ldr	r2, [r3, #28]
    d71a:	61e2      	str	r2, [r4, #28]
    d71c:	61a3      	str	r3, [r4, #24]
    d71e:	69da      	ldr	r2, [r3, #28]
    d720:	6014      	str	r4, [r2, #0]
    d722:	3418      	adds	r4, #24
    d724:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    d726:	4628      	mov	r0, r5
    d728:	f7ff fd4a 	bl	d1c0 <os_arch_restore_sr>

    ret = OS_OK;
    d72c:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    d72e:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    d730:	2300      	movs	r3, #0
    d732:	61a3      	str	r3, [r4, #24]
    d734:	4b04      	ldr	r3, [pc, #16]	; (d748 <os_callout_reset+0x74>)
    d736:	685a      	ldr	r2, [r3, #4]
    d738:	61e2      	str	r2, [r4, #28]
    d73a:	6014      	str	r4, [r2, #0]
    d73c:	3418      	adds	r4, #24
    d73e:	605c      	str	r4, [r3, #4]
    d740:	e7f1      	b.n	d726 <os_callout_reset+0x52>
        ret = OS_EINVAL;
    d742:	2002      	movs	r0, #2
    return ret;
    d744:	e7f3      	b.n	d72e <os_callout_reset+0x5a>
    d746:	bf00      	nop
    d748:	20002f4c 	.word	0x20002f4c

0000d74c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    d74c:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    d74e:	f000 ffcf 	bl	e6f0 <os_time_get>
    d752:	4605      	mov	r5, r0
    d754:	e00f      	b.n	d776 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    d756:	69e2      	ldr	r2, [r4, #28]
    d758:	4b12      	ldr	r3, [pc, #72]	; (d7a4 <os_callout_tick+0x58>)
    d75a:	605a      	str	r2, [r3, #4]
    d75c:	69e3      	ldr	r3, [r4, #28]
    d75e:	69a2      	ldr	r2, [r4, #24]
    d760:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    d762:	2300      	movs	r3, #0
    d764:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    d766:	f7ff fd2b 	bl	d1c0 <os_arch_restore_sr>

        if (c) {
    d76a:	b1d4      	cbz	r4, d7a2 <os_callout_tick+0x56>
            if (c->c_evq) {
    d76c:	6920      	ldr	r0, [r4, #16]
    d76e:	b1a0      	cbz	r0, d79a <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    d770:	4621      	mov	r1, r4
    d772:	f000 f929 	bl	d9c8 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    d776:	f7ff fd1d 	bl	d1b4 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    d77a:	4b0a      	ldr	r3, [pc, #40]	; (d7a4 <os_callout_tick+0x58>)
    d77c:	681c      	ldr	r4, [r3, #0]
        if (c) {
    d77e:	2c00      	cmp	r4, #0
    d780:	d0f1      	beq.n	d766 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    d782:	6963      	ldr	r3, [r4, #20]
    d784:	1aeb      	subs	r3, r5, r3
    d786:	2b00      	cmp	r3, #0
    d788:	db05      	blt.n	d796 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    d78a:	69a3      	ldr	r3, [r4, #24]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d0e2      	beq.n	d756 <os_callout_tick+0xa>
    d790:	69e2      	ldr	r2, [r4, #28]
    d792:	61da      	str	r2, [r3, #28]
    d794:	e7e2      	b.n	d75c <os_callout_tick+0x10>
                c = NULL;
    d796:	2400      	movs	r4, #0
    d798:	e7e5      	b.n	d766 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    d79a:	6863      	ldr	r3, [r4, #4]
    d79c:	4620      	mov	r0, r4
    d79e:	4798      	blx	r3
    d7a0:	e7e9      	b.n	d776 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    d7a2:	bd38      	pop	{r3, r4, r5, pc}
    d7a4:	20002f4c 	.word	0x20002f4c

0000d7a8 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    d7a8:	b510      	push	{r4, lr}
    d7aa:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    d7ac:	f7ff fd0b 	bl	d1c6 <os_arch_in_critical>
    d7b0:	b130      	cbz	r0, d7c0 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    d7b2:	4b09      	ldr	r3, [pc, #36]	; (d7d8 <os_callout_wakeup_ticks+0x30>)
    d7b4:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    d7b6:	b15b      	cbz	r3, d7d0 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    d7b8:	6958      	ldr	r0, [r3, #20]
    d7ba:	1b00      	subs	r0, r0, r4
    d7bc:	d406      	bmi.n	d7cc <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    d7be:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    d7c0:	2300      	movs	r3, #0
    d7c2:	461a      	mov	r2, r3
    d7c4:	4619      	mov	r1, r3
    d7c6:	4618      	mov	r0, r3
    d7c8:	f7ff fdca 	bl	d360 <__assert_func>
            rt = 0;     /* callout time is in the past */
    d7cc:	2000      	movs	r0, #0
    d7ce:	e7f6      	b.n	d7be <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    d7d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    d7d4:	e7f3      	b.n	d7be <os_callout_wakeup_ticks+0x16>
    d7d6:	bf00      	nop
    d7d8:	20002f4c 	.word	0x20002f4c

0000d7dc <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    d7dc:	b508      	push	{r3, lr}
    d7de:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    d7e0:	2000      	movs	r0, #0
    d7e2:	f00b fbc7 	bl	18f74 <hal_timer_config>
    return rc;
}
    d7e6:	bd08      	pop	{r3, pc}

0000d7e8 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    d7e8:	b510      	push	{r4, lr}
    assert(timer != NULL);
    d7ea:	b140      	cbz	r0, d7fe <os_cputime_timer_init+0x16>
    d7ec:	460c      	mov	r4, r1
    d7ee:	4613      	mov	r3, r2
    d7f0:	4601      	mov	r1, r0
    assert(fp != NULL);
    d7f2:	b154      	cbz	r4, d80a <os_cputime_timer_init+0x22>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    d7f4:	4622      	mov	r2, r4
    d7f6:	2000      	movs	r0, #0
    d7f8:	f00b fc52 	bl	190a0 <hal_timer_set_cb>
}
    d7fc:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
    d7fe:	2300      	movs	r3, #0
    d800:	461a      	mov	r2, r3
    d802:	4619      	mov	r1, r3
    d804:	4618      	mov	r0, r3
    d806:	f7ff fdab 	bl	d360 <__assert_func>
    assert(fp != NULL);
    d80a:	2300      	movs	r3, #0
    d80c:	461a      	mov	r2, r3
    d80e:	4619      	mov	r1, r3
    d810:	4618      	mov	r0, r3
    d812:	f7ff fda5 	bl	d360 <__assert_func>

0000d816 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    d816:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    d818:	2000      	movs	r0, #0
    d81a:	f00b fc29 	bl	19070 <hal_timer_read>
    return cpu_time;
}
    d81e:	bd08      	pop	{r3, pc}

0000d820 <os_cputime_timer_relative>:
{
    d820:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
    d822:	b140      	cbz	r0, d836 <os_cputime_timer_relative+0x16>
    d824:	460c      	mov	r4, r1
    d826:	4605      	mov	r5, r0
    cputime = os_cputime_get32() + os_cputime_usecs_to_ticks(usecs);
    d828:	f7ff fff5 	bl	d816 <os_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    d82c:	1901      	adds	r1, r0, r4
    d82e:	4628      	mov	r0, r5
    d830:	f00b fc4c 	bl	190cc <hal_timer_start_at>
}
    d834:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
    d836:	2300      	movs	r3, #0
    d838:	461a      	mov	r2, r3
    d83a:	4619      	mov	r1, r3
    d83c:	4618      	mov	r0, r3
    d83e:	f7ff fd8f 	bl	d360 <__assert_func>
	...

0000d844 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    d844:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    d846:	4b15      	ldr	r3, [pc, #84]	; (d89c <os_dev_add+0x58>)
    d848:	681d      	ldr	r5, [r3, #0]
    d84a:	b115      	cbz	r5, d852 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    d84c:	462b      	mov	r3, r5
    prev_dev = NULL;
    d84e:	2400      	movs	r4, #0
    d850:	e008      	b.n	d864 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    d852:	4603      	mov	r3, r0
    d854:	f843 5f20 	str.w	r5, [r3, #32]!
    d858:	4a10      	ldr	r2, [pc, #64]	; (d89c <os_dev_add+0x58>)
    d85a:	6053      	str	r3, [r2, #4]
    d85c:	6010      	str	r0, [r2, #0]
        return (0);
    d85e:	e010      	b.n	d882 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    d860:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    d862:	6a1b      	ldr	r3, [r3, #32]
    d864:	b143      	cbz	r3, d878 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    d866:	7e01      	ldrb	r1, [r0, #24]
    d868:	7e1a      	ldrb	r2, [r3, #24]
    d86a:	4291      	cmp	r1, r2
    d86c:	d304      	bcc.n	d878 <os_dev_add+0x34>
    d86e:	d1f7      	bne.n	d860 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    d870:	7e41      	ldrb	r1, [r0, #25]
    d872:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    d874:	4291      	cmp	r1, r2
    d876:	d2f3      	bcs.n	d860 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    d878:	b15c      	cbz	r4, d892 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    d87a:	6a23      	ldr	r3, [r4, #32]
    d87c:	6203      	str	r3, [r0, #32]
    d87e:	b11b      	cbz	r3, d888 <os_dev_add+0x44>
    d880:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    d882:	2000      	movs	r0, #0
    d884:	bc30      	pop	{r4, r5}
    d886:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    d888:	f100 0320 	add.w	r3, r0, #32
    d88c:	4a03      	ldr	r2, [pc, #12]	; (d89c <os_dev_add+0x58>)
    d88e:	6053      	str	r3, [r2, #4]
    d890:	e7f6      	b.n	d880 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    d892:	6205      	str	r5, [r0, #32]
    d894:	4b01      	ldr	r3, [pc, #4]	; (d89c <os_dev_add+0x58>)
    d896:	6018      	str	r0, [r3, #0]
    d898:	e7f3      	b.n	d882 <os_dev_add+0x3e>
    d89a:	bf00      	nop
    d89c:	20002f54 	.word	0x20002f54

0000d8a0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    d8a0:	b510      	push	{r4, lr}
    d8a2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    d8a4:	6903      	ldr	r3, [r0, #16]
    d8a6:	6941      	ldr	r1, [r0, #20]
    d8a8:	4798      	blx	r3
    if (rc != 0) {
    d8aa:	b128      	cbz	r0, d8b8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    d8ac:	7ee3      	ldrb	r3, [r4, #27]
    d8ae:	f013 0f08 	tst.w	r3, #8
    d8b2:	d105      	bne.n	d8c0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    d8b4:	2000      	movs	r0, #0
    d8b6:	e003      	b.n	d8c0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    d8b8:	7ee3      	ldrb	r3, [r4, #27]
    d8ba:	f043 0301 	orr.w	r3, r3, #1
    d8be:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    d8c0:	bd10      	pop	{r4, pc}

0000d8c2 <os_dev_init>:
{
    d8c2:	4684      	mov	ip, r0
    dev->od_name = name;
    d8c4:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    d8c6:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    d8c8:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    d8ca:	2000      	movs	r0, #0
    d8cc:	f88c 001b 	strb.w	r0, [ip, #27]
    dev->od_open_ref = 0;
    d8d0:	f88c 001a 	strb.w	r0, [ip, #26]
    dev->od_init = od_init;
    d8d4:	9b00      	ldr	r3, [sp, #0]
    d8d6:	f8cc 3010 	str.w	r3, [ip, #16]
    dev->od_init_arg = arg;
    d8da:	9b01      	ldr	r3, [sp, #4]
    d8dc:	f8cc 3014 	str.w	r3, [ip, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    d8e0:	f8cc 0000 	str.w	r0, [ip]
    d8e4:	f8cc 0004 	str.w	r0, [ip, #4]
    d8e8:	f8cc 0008 	str.w	r0, [ip, #8]
    d8ec:	f8cc 000c 	str.w	r0, [ip, #12]
}
    d8f0:	4770      	bx	lr
	...

0000d8f4 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    d8f4:	b530      	push	{r4, r5, lr}
    d8f6:	b083      	sub	sp, #12
    d8f8:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    d8fa:	9d07      	ldr	r5, [sp, #28]
    d8fc:	9501      	str	r5, [sp, #4]
    d8fe:	9d06      	ldr	r5, [sp, #24]
    d900:	9500      	str	r5, [sp, #0]
    d902:	f7ff ffde 	bl	d8c2 <os_dev_init>
    if (rc != 0) {
    d906:	b108      	cbz	r0, d90c <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    d908:	b003      	add	sp, #12
    d90a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    d90c:	4620      	mov	r0, r4
    d90e:	f7ff ff99 	bl	d844 <os_dev_add>
    if (rc != 0) {
    d912:	2800      	cmp	r0, #0
    d914:	d1f8      	bne.n	d908 <os_dev_create+0x14>
    if (g_os_started) {
    d916:	4b04      	ldr	r3, [pc, #16]	; (d928 <os_dev_create+0x34>)
    d918:	681b      	ldr	r3, [r3, #0]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d0f4      	beq.n	d908 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    d91e:	4620      	mov	r0, r4
    d920:	f7ff ffbe 	bl	d8a0 <os_dev_initialize>
    return (rc);
    d924:	e7f0      	b.n	d908 <os_dev_create+0x14>
    d926:	bf00      	nop
    d928:	20002f48 	.word	0x20002f48

0000d92c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    d92c:	b538      	push	{r3, r4, r5, lr}
    d92e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d930:	4b08      	ldr	r3, [pc, #32]	; (d954 <os_dev_initialize_all+0x28>)
    d932:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    d934:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d936:	e000      	b.n	d93a <os_dev_initialize_all+0xe>
    d938:	6a24      	ldr	r4, [r4, #32]
    d93a:	b144      	cbz	r4, d94e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    d93c:	7e23      	ldrb	r3, [r4, #24]
    d93e:	42ab      	cmp	r3, r5
    d940:	d1fa      	bne.n	d938 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    d942:	4620      	mov	r0, r4
    d944:	f7ff ffac 	bl	d8a0 <os_dev_initialize>
            if (rc) {
    d948:	4602      	mov	r2, r0
    d94a:	2800      	cmp	r0, #0
    d94c:	d0f4      	beq.n	d938 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    d94e:	4610      	mov	r0, r2
    d950:	bd38      	pop	{r3, r4, r5, pc}
    d952:	bf00      	nop
    d954:	20002f54 	.word	0x20002f54

0000d958 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    d958:	b538      	push	{r3, r4, r5, lr}
    d95a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d95c:	4b06      	ldr	r3, [pc, #24]	; (d978 <os_dev_lookup+0x20>)
    d95e:	681c      	ldr	r4, [r3, #0]
    d960:	e000      	b.n	d964 <os_dev_lookup+0xc>
    d962:	6a24      	ldr	r4, [r4, #32]
    d964:	b12c      	cbz	r4, d972 <os_dev_lookup+0x1a>
        if (!strcmp(dev->od_name, name)) {
    d966:	4629      	mov	r1, r5
    d968:	69e0      	ldr	r0, [r4, #28]
    d96a:	f003 fdb3 	bl	114d4 <strcmp>
    d96e:	2800      	cmp	r0, #0
    d970:	d1f7      	bne.n	d962 <os_dev_lookup+0xa>
            break;
        }
    }
    return (dev);
}
    d972:	4620      	mov	r0, r4
    d974:	bd38      	pop	{r3, r4, r5, pc}
    d976:	bf00      	nop
    d978:	20002f54 	.word	0x20002f54

0000d97c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    d97c:	4b02      	ldr	r3, [pc, #8]	; (d988 <os_dev_reset+0xc>)
    d97e:	2200      	movs	r2, #0
    d980:	601a      	str	r2, [r3, #0]
    d982:	605b      	str	r3, [r3, #4]
}
    d984:	4770      	bx	lr
    d986:	bf00      	nop
    d988:	20002f54 	.word	0x20002f54

0000d98c <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    d98c:	b570      	push	{r4, r5, r6, lr}
    d98e:	4606      	mov	r6, r0
    d990:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d992:	4b05      	ldr	r3, [pc, #20]	; (d9a8 <os_dev_walk+0x1c>)
    d994:	681c      	ldr	r4, [r3, #0]
    d996:	e000      	b.n	d99a <os_dev_walk+0xe>
    d998:	6a24      	ldr	r4, [r4, #32]
    d99a:	b124      	cbz	r4, d9a6 <os_dev_walk+0x1a>
        if (walk_func(dev, arg)) {
    d99c:	4629      	mov	r1, r5
    d99e:	4620      	mov	r0, r4
    d9a0:	47b0      	blx	r6
    d9a2:	2800      	cmp	r0, #0
    d9a4:	d0f8      	beq.n	d998 <os_dev_walk+0xc>
            break;
        }
    }
}
    d9a6:	bd70      	pop	{r4, r5, r6, pc}
    d9a8:	20002f54 	.word	0x20002f54

0000d9ac <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    d9ac:	2300      	movs	r3, #0
    d9ae:	6003      	str	r3, [r0, #0]
    d9b0:	6043      	str	r3, [r0, #4]
    d9b2:	6083      	str	r3, [r0, #8]
    d9b4:	60c3      	str	r3, [r0, #12]
    STAILQ_INIT(&evq->evq_list);
    d9b6:	f100 0308 	add.w	r3, r0, #8
    d9ba:	60c3      	str	r3, [r0, #12]
}
    d9bc:	4770      	bx	lr

0000d9be <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    d9be:	68c0      	ldr	r0, [r0, #12]
}
    d9c0:	3800      	subs	r0, #0
    d9c2:	bf18      	it	ne
    d9c4:	2001      	movne	r0, #1
    d9c6:	4770      	bx	lr

0000d9c8 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    d9c8:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    d9ca:	b1f0      	cbz	r0, da0a <os_eventq_put+0x42>
    d9cc:	460c      	mov	r4, r1
    d9ce:	4606      	mov	r6, r0
    d9d0:	f7ff fff5 	bl	d9be <os_eventq_inited>
    d9d4:	b1c8      	cbz	r0, da0a <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    d9d6:	f7ff fbed 	bl	d1b4 <os_arch_save_sr>
    d9da:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    d9dc:	7823      	ldrb	r3, [r4, #0]
    d9de:	b9d3      	cbnz	r3, da16 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    d9e0:	2301      	movs	r3, #1
    d9e2:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    d9e4:	2300      	movs	r3, #0
    d9e6:	60e3      	str	r3, [r4, #12]
    d9e8:	68f3      	ldr	r3, [r6, #12]
    d9ea:	601c      	str	r4, [r3, #0]
    d9ec:	340c      	adds	r4, #12
    d9ee:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    d9f0:	6870      	ldr	r0, [r6, #4]
    d9f2:	b1b8      	cbz	r0, da24 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    d9f4:	7b03      	ldrb	r3, [r0, #12]
    d9f6:	2b02      	cmp	r3, #2
    d9f8:	d010      	beq.n	da1c <os_eventq_put+0x54>
    resched = 0;
    d9fa:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    d9fc:	2300      	movs	r3, #0
    d9fe:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    da00:	4628      	mov	r0, r5
    da02:	f7ff fbdd 	bl	d1c0 <os_arch_restore_sr>

    if (resched) {
    da06:	b97c      	cbnz	r4, da28 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    da08:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    da0a:	2300      	movs	r3, #0
    da0c:	461a      	mov	r2, r3
    da0e:	4619      	mov	r1, r3
    da10:	4618      	mov	r0, r3
    da12:	f7ff fca5 	bl	d360 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    da16:	f7ff fbd3 	bl	d1c0 <os_arch_restore_sr>
        return;
    da1a:	e7f5      	b.n	da08 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    da1c:	f000 fbe8 	bl	e1f0 <os_sched_wakeup>
            resched = 1;
    da20:	2401      	movs	r4, #1
    da22:	e7eb      	b.n	d9fc <os_eventq_put+0x34>
    resched = 0;
    da24:	2400      	movs	r4, #0
    da26:	e7eb      	b.n	da00 <os_eventq_put+0x38>
        os_sched(NULL);
    da28:	2000      	movs	r0, #0
    da2a:	f000 fc5f 	bl	e2ec <os_sched>
    da2e:	e7eb      	b.n	da08 <os_eventq_put+0x40>

0000da30 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    da30:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    da32:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    da34:	b120      	cbz	r0, da40 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    da36:	68c2      	ldr	r2, [r0, #12]
    da38:	609a      	str	r2, [r3, #8]
    da3a:	b112      	cbz	r2, da42 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    da3c:	2300      	movs	r3, #0
    da3e:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    da40:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    da42:	f103 0208 	add.w	r2, r3, #8
    da46:	60da      	str	r2, [r3, #12]
    da48:	e7f8      	b.n	da3c <os_eventq_get_no_wait+0xc>

0000da4a <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    da4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da4c:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    da4e:	f000 fb39 	bl	e0c4 <os_sched_get_current_task>
    da52:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    da54:	6833      	ldr	r3, [r6, #0]
    da56:	4283      	cmp	r3, r0
    da58:	d001      	beq.n	da5e <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    da5a:	b923      	cbnz	r3, da66 <os_eventq_get+0x1c>
            evq->evq_owner = t;
    da5c:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    da5e:	f7ff fba9 	bl	d1b4 <os_arch_save_sr>
    da62:	4605      	mov	r5, r0
    da64:	e01e      	b.n	daa4 <os_eventq_get+0x5a>
            assert(0);
    da66:	2300      	movs	r3, #0
    da68:	461a      	mov	r2, r3
    da6a:	4619      	mov	r1, r3
    da6c:	4618      	mov	r0, r3
    da6e:	f7ff fc77 	bl	d360 <__assert_func>
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    if (ev) {
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    da72:	f106 0308 	add.w	r3, r6, #8
    da76:	60f3      	str	r3, [r6, #12]
    da78:	e01b      	b.n	dab2 <os_eventq_get+0x68>
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    da7a:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    da7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    da80:	4620      	mov	r0, r4
    da82:	f000 fb2b 	bl	e0dc <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    da86:	7b63      	ldrb	r3, [r4, #13]
    da88:	f043 0308 	orr.w	r3, r3, #8
    da8c:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    da8e:	4628      	mov	r0, r5
    da90:	f7ff fb96 	bl	d1c0 <os_arch_restore_sr>

        os_sched(NULL);
    da94:	2000      	movs	r0, #0
    da96:	f000 fc29 	bl	e2ec <os_sched>

        OS_ENTER_CRITICAL(sr);
    da9a:	f7ff fb8b 	bl	d1b4 <os_arch_save_sr>
    da9e:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    daa0:	2300      	movs	r3, #0
    daa2:	6073      	str	r3, [r6, #4]
    ev = STAILQ_FIRST(&evq->evq_list);
    daa4:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    daa6:	2f00      	cmp	r7, #0
    daa8:	d0e7      	beq.n	da7a <os_eventq_get+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    daaa:	68fb      	ldr	r3, [r7, #12]
    daac:	60b3      	str	r3, [r6, #8]
    daae:	2b00      	cmp	r3, #0
    dab0:	d0df      	beq.n	da72 <os_eventq_get+0x28>
        ev->ev_queued = 0;
    dab2:	2300      	movs	r3, #0
    dab4:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    dab6:	7b63      	ldrb	r3, [r4, #13]
    dab8:	f023 0308 	bic.w	r3, r3, #8
    dabc:	7363      	strb	r3, [r4, #13]
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    dabe:	4628      	mov	r0, r5
    dac0:	f7ff fb7e 	bl	d1c0 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    dac4:	4638      	mov	r0, r7
    dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dac8 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    dac8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    daca:	f7ff ffbe 	bl	da4a <os_eventq_get>
    assert(ev->ev_cb != NULL);
    dace:	6843      	ldr	r3, [r0, #4]
    dad0:	b10b      	cbz	r3, dad6 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    dad2:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    dad4:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    dad6:	461a      	mov	r2, r3
    dad8:	4619      	mov	r1, r3
    dada:	4618      	mov	r0, r3
    dadc:	f7ff fc40 	bl	d360 <__assert_func>

0000dae0 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    dae0:	b538      	push	{r3, r4, r5, lr}
    dae2:	4605      	mov	r5, r0
    dae4:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    dae6:	f7ff fb65 	bl	d1b4 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    daea:	7823      	ldrb	r3, [r4, #0]
    daec:	b14b      	cbz	r3, db02 <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    daee:	68ab      	ldr	r3, [r5, #8]
    daf0:	42a3      	cmp	r3, r4
    daf2:	d00b      	beq.n	db0c <os_eventq_remove+0x2c>
    daf4:	461a      	mov	r2, r3
    daf6:	68db      	ldr	r3, [r3, #12]
    daf8:	42a3      	cmp	r3, r4
    dafa:	d1fb      	bne.n	daf4 <os_eventq_remove+0x14>
    dafc:	68db      	ldr	r3, [r3, #12]
    dafe:	60d3      	str	r3, [r2, #12]
    db00:	b163      	cbz	r3, db1c <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    db02:	2300      	movs	r3, #0
    db04:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    db06:	f7ff fb5b 	bl	d1c0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    db0a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    db0c:	68db      	ldr	r3, [r3, #12]
    db0e:	60ab      	str	r3, [r5, #8]
    db10:	2b00      	cmp	r3, #0
    db12:	d1f6      	bne.n	db02 <os_eventq_remove+0x22>
    db14:	f105 0308 	add.w	r3, r5, #8
    db18:	60eb      	str	r3, [r5, #12]
    db1a:	e7f2      	b.n	db02 <os_eventq_remove+0x22>
    db1c:	320c      	adds	r2, #12
    db1e:	60ea      	str	r2, [r5, #12]
    db20:	e7ef      	b.n	db02 <os_eventq_remove+0x22>
	...

0000db24 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    db24:	4800      	ldr	r0, [pc, #0]	; (db28 <os_eventq_dflt_get+0x4>)
    db26:	4770      	bx	lr
    db28:	20002f5c 	.word	0x20002f5c

0000db2c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    db2c:	2800      	cmp	r0, #0
    db2e:	d031      	beq.n	db94 <os_mempool_init_internal+0x68>
{
    db30:	b430      	push	{r4, r5}
    db32:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    db34:	2a00      	cmp	r2, #0
    db36:	d02f      	beq.n	db98 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    db38:	b1bb      	cbz	r3, db6a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    db3a:	b113      	cbz	r3, db42 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    db3c:	f013 0f03 	tst.w	r3, #3
    db40:	d12c      	bne.n	db9c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    db42:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    db44:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    db46:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    db48:	f89d 000c 	ldrb.w	r0, [sp, #12]
    db4c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    db4e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    db50:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    db52:	9802      	ldr	r0, [sp, #8]
    db54:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    db56:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    db58:	b199      	cbz	r1, db82 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    db5a:	f012 0f03 	tst.w	r2, #3
    db5e:	d002      	beq.n	db66 <os_mempool_init_internal+0x3a>
    db60:	f022 0203 	bic.w	r2, r2, #3
    db64:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    db66:	2001      	movs	r0, #1
    db68:	e007      	b.n	db7a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    db6a:	2900      	cmp	r1, #0
    db6c:	d0e5      	beq.n	db3a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    db6e:	2003      	movs	r0, #3
    db70:	e00e      	b.n	db90 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    db72:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    db74:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    db76:	3001      	adds	r0, #1
            block_addr += true_block_size;
    db78:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    db7a:	4281      	cmp	r1, r0
    db7c:	dcf9      	bgt.n	db72 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    db7e:	2200      	movs	r2, #0
    db80:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    db82:	2000      	movs	r0, #0
    db84:	6120      	str	r0, [r4, #16]
    db86:	4b06      	ldr	r3, [pc, #24]	; (dba0 <os_mempool_init_internal+0x74>)
    db88:	685a      	ldr	r2, [r3, #4]
    db8a:	6014      	str	r4, [r2, #0]
    db8c:	3410      	adds	r4, #16
    db8e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    db90:	bc30      	pop	{r4, r5}
    db92:	4770      	bx	lr
        return OS_INVALID_PARM;
    db94:	2003      	movs	r0, #3
}
    db96:	4770      	bx	lr
        return OS_INVALID_PARM;
    db98:	2003      	movs	r0, #3
    db9a:	e7f9      	b.n	db90 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    db9c:	2004      	movs	r0, #4
    db9e:	e7f7      	b.n	db90 <os_mempool_init_internal+0x64>
    dba0:	20002f6c 	.word	0x20002f6c

0000dba4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    dba4:	b510      	push	{r4, lr}
    dba6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    dba8:	2400      	movs	r4, #0
    dbaa:	9401      	str	r4, [sp, #4]
    dbac:	9c04      	ldr	r4, [sp, #16]
    dbae:	9400      	str	r4, [sp, #0]
    dbb0:	f7ff ffbc 	bl	db2c <os_mempool_init_internal>
}
    dbb4:	b002      	add	sp, #8
    dbb6:	bd10      	pop	{r4, pc}

0000dbb8 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    dbb8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    dbba:	4604      	mov	r4, r0
    dbbc:	b198      	cbz	r0, dbe6 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    dbbe:	f7ff faf9 	bl	d1b4 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    dbc2:	88e3      	ldrh	r3, [r4, #6]
    dbc4:	b153      	cbz	r3, dbdc <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    dbc6:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    dbc8:	682a      	ldr	r2, [r5, #0]
    dbca:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    dbcc:	3b01      	subs	r3, #1
    dbce:	b29b      	uxth	r3, r3
    dbd0:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    dbd2:	8922      	ldrh	r2, [r4, #8]
    dbd4:	4293      	cmp	r3, r2
    dbd6:	d202      	bcs.n	dbde <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    dbd8:	8123      	strh	r3, [r4, #8]
    dbda:	e000      	b.n	dbde <os_memblock_get+0x26>
    block = NULL;
    dbdc:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    dbde:	f7ff faef 	bl	d1c0 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    dbe2:	4628      	mov	r0, r5
    dbe4:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    dbe6:	4605      	mov	r5, r0
    return (void *)block;
    dbe8:	e7fb      	b.n	dbe2 <os_memblock_get+0x2a>

0000dbea <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    dbea:	b538      	push	{r3, r4, r5, lr}
    dbec:	4604      	mov	r4, r0
    dbee:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    dbf0:	f7ff fae0 	bl	d1b4 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    dbf4:	6963      	ldr	r3, [r4, #20]
    dbf6:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    dbf8:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    dbfa:	88e3      	ldrh	r3, [r4, #6]
    dbfc:	3301      	adds	r3, #1
    dbfe:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    dc00:	f7ff fade 	bl	d1c0 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    dc04:	2000      	movs	r0, #0
    dc06:	bd38      	pop	{r3, r4, r5, pc}

0000dc08 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    dc08:	b178      	cbz	r0, dc2a <os_memblock_put+0x22>
    dc0a:	4603      	mov	r3, r0
    dc0c:	b179      	cbz	r1, dc2e <os_memblock_put+0x26>
{
    dc0e:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    dc10:	7a82      	ldrb	r2, [r0, #10]
    dc12:	f012 0f01 	tst.w	r2, #1
    dc16:	d004      	beq.n	dc22 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    dc18:	69c4      	ldr	r4, [r0, #28]
    dc1a:	b114      	cbz	r4, dc22 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    dc1c:	6a02      	ldr	r2, [r0, #32]
    dc1e:	47a0      	blx	r4
            goto done;
    dc20:	e002      	b.n	dc28 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    dc22:	4618      	mov	r0, r3
    dc24:	f7ff ffe1 	bl	dbea <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    dc28:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    dc2a:	2003      	movs	r0, #3
    dc2c:	4770      	bx	lr
    dc2e:	2003      	movs	r0, #3
}
    dc30:	4770      	bx	lr
	...

0000dc34 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    dc34:	b510      	push	{r4, lr}
    dc36:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    dc38:	b188      	cbz	r0, dc5e <os_mempool_info_get_next+0x2a>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    dc3a:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
    dc3c:	b16c      	cbz	r4, dc5a <os_mempool_info_get_next+0x26>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    dc3e:	6822      	ldr	r2, [r4, #0]
    dc40:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    dc42:	88a2      	ldrh	r2, [r4, #4]
    dc44:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    dc46:	88e2      	ldrh	r2, [r4, #6]
    dc48:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    dc4a:	8922      	ldrh	r2, [r4, #8]
    dc4c:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    dc4e:	2220      	movs	r2, #32
    dc50:	69a1      	ldr	r1, [r4, #24]
    dc52:	f103 0010 	add.w	r0, r3, #16
    dc56:	f003 fc49 	bl	114ec <strncpy>

    return (cur);
}
    dc5a:	4620      	mov	r0, r4
    dc5c:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
    dc5e:	4a01      	ldr	r2, [pc, #4]	; (dc64 <os_mempool_info_get_next+0x30>)
    dc60:	6814      	ldr	r4, [r2, #0]
    dc62:	e7eb      	b.n	dc3c <os_mempool_info_get_next+0x8>
    dc64:	20002f6c 	.word	0x20002f6c

0000dc68 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    dc68:	4b02      	ldr	r3, [pc, #8]	; (dc74 <os_mempool_module_init+0xc>)
    dc6a:	2200      	movs	r2, #0
    dc6c:	601a      	str	r2, [r3, #0]
    dc6e:	605b      	str	r3, [r3, #4]
}
    dc70:	4770      	bx	lr
    dc72:	bf00      	nop
    dc74:	20002f6c 	.word	0x20002f6c

0000dc78 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    dc78:	4b02      	ldr	r3, [pc, #8]	; (dc84 <os_msys_find_biggest_pool+0xc>)
    dc7a:	6818      	ldr	r0, [r3, #0]
    dc7c:	b108      	cbz	r0, dc82 <os_msys_find_biggest_pool+0xa>
    dc7e:	6858      	ldr	r0, [r3, #4]
    dc80:	3808      	subs	r0, #8
}
    dc82:	4770      	bx	lr
    dc84:	20001338 	.word	0x20001338

0000dc88 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    dc88:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dc8a:	4b09      	ldr	r3, [pc, #36]	; (dcb0 <os_msys_find_pool+0x28>)
    dc8c:	6819      	ldr	r1, [r3, #0]
    dc8e:	4608      	mov	r0, r1
    dc90:	e000      	b.n	dc94 <os_msys_find_pool+0xc>
    dc92:	6880      	ldr	r0, [r0, #8]
    dc94:	b110      	cbz	r0, dc9c <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    dc96:	8803      	ldrh	r3, [r0, #0]
    dc98:	4293      	cmp	r3, r2
    dc9a:	d3fa      	bcc.n	dc92 <os_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
    dc9c:	b100      	cbz	r0, dca0 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    dc9e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    dca0:	b119      	cbz	r1, dcaa <os_msys_find_pool+0x22>
    dca2:	4b03      	ldr	r3, [pc, #12]	; (dcb0 <os_msys_find_pool+0x28>)
    dca4:	6858      	ldr	r0, [r3, #4]
    dca6:	3808      	subs	r0, #8
    dca8:	4770      	bx	lr
    dcaa:	4608      	mov	r0, r1
    return (pool);
    dcac:	e7f7      	b.n	dc9e <os_msys_find_pool+0x16>
    dcae:	bf00      	nop
    dcb0:	20001338 	.word	0x20001338

0000dcb4 <os_msys_register>:
{
    dcb4:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcb6:	4b11      	ldr	r3, [pc, #68]	; (dcfc <os_msys_register+0x48>)
    dcb8:	681d      	ldr	r5, [r3, #0]
    dcba:	462b      	mov	r3, r5
    prev = NULL;
    dcbc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcbe:	e001      	b.n	dcc4 <os_msys_register+0x10>
        prev = pool;
    dcc0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcc2:	689b      	ldr	r3, [r3, #8]
    dcc4:	b11b      	cbz	r3, dcce <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    dcc6:	8801      	ldrh	r1, [r0, #0]
    dcc8:	881a      	ldrh	r2, [r3, #0]
    dcca:	4291      	cmp	r1, r2
    dccc:	d2f8      	bcs.n	dcc0 <os_msys_register+0xc>
    if (prev) {
    dcce:	b15c      	cbz	r4, dce8 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    dcd0:	68a3      	ldr	r3, [r4, #8]
    dcd2:	6083      	str	r3, [r0, #8]
    dcd4:	b11b      	cbz	r3, dcde <os_msys_register+0x2a>
    dcd6:	60a0      	str	r0, [r4, #8]
}
    dcd8:	2000      	movs	r0, #0
    dcda:	bc30      	pop	{r4, r5}
    dcdc:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    dcde:	f100 0308 	add.w	r3, r0, #8
    dce2:	4a06      	ldr	r2, [pc, #24]	; (dcfc <os_msys_register+0x48>)
    dce4:	6053      	str	r3, [r2, #4]
    dce6:	e7f6      	b.n	dcd6 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    dce8:	6085      	str	r5, [r0, #8]
    dcea:	b115      	cbz	r5, dcf2 <os_msys_register+0x3e>
    dcec:	4b03      	ldr	r3, [pc, #12]	; (dcfc <os_msys_register+0x48>)
    dcee:	6018      	str	r0, [r3, #0]
    dcf0:	e7f2      	b.n	dcd8 <os_msys_register+0x24>
    dcf2:	f100 0308 	add.w	r3, r0, #8
    dcf6:	4a01      	ldr	r2, [pc, #4]	; (dcfc <os_msys_register+0x48>)
    dcf8:	6053      	str	r3, [r2, #4]
    dcfa:	e7f7      	b.n	dcec <os_msys_register+0x38>
    dcfc:	20001338 	.word	0x20001338

0000dd00 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    dd00:	b530      	push	{r4, r5, lr}
    dd02:	b083      	sub	sp, #12
    dd04:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    dd06:	9d07      	ldr	r5, [sp, #28]
    dd08:	9501      	str	r5, [sp, #4]
    dd0a:	9d06      	ldr	r5, [sp, #24]
    dd0c:	9500      	str	r5, [sp, #0]
    dd0e:	f004 faf6 	bl	122fe <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd12:	b138      	cbz	r0, dd24 <os_msys_init_once+0x24>
    dd14:	2000      	movs	r0, #0
    dd16:	9000      	str	r0, [sp, #0]
    dd18:	4b09      	ldr	r3, [pc, #36]	; (dd40 <os_msys_init_once+0x40>)
    dd1a:	681d      	ldr	r5, [r3, #0]
    dd1c:	4603      	mov	r3, r0
    dd1e:	4602      	mov	r2, r0
    dd20:	4601      	mov	r1, r0
    dd22:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    dd24:	4620      	mov	r0, r4
    dd26:	f7ff ffc5 	bl	dcb4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd2a:	b138      	cbz	r0, dd3c <os_msys_init_once+0x3c>
    dd2c:	2000      	movs	r0, #0
    dd2e:	9000      	str	r0, [sp, #0]
    dd30:	4b03      	ldr	r3, [pc, #12]	; (dd40 <os_msys_init_once+0x40>)
    dd32:	681c      	ldr	r4, [r3, #0]
    dd34:	4603      	mov	r3, r0
    dd36:	4602      	mov	r2, r0
    dd38:	4601      	mov	r1, r0
    dd3a:	47a0      	blx	r4
}
    dd3c:	b003      	add	sp, #12
    dd3e:	bd30      	pop	{r4, r5, pc}
    dd40:	2000143c 	.word	0x2000143c

0000dd44 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    dd44:	4b02      	ldr	r3, [pc, #8]	; (dd50 <os_msys_reset+0xc>)
    dd46:	2200      	movs	r2, #0
    dd48:	601a      	str	r2, [r3, #0]
    dd4a:	605b      	str	r3, [r3, #4]
}
    dd4c:	4770      	bx	lr
    dd4e:	bf00      	nop
    dd50:	20001338 	.word	0x20001338

0000dd54 <os_msys_get_pkthdr>:
{
    dd54:	b510      	push	{r4, lr}
    dd56:	460c      	mov	r4, r1
    if (dsize == 0) {
    dd58:	b930      	cbnz	r0, dd68 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    dd5a:	f7ff ff8d 	bl	dc78 <os_msys_find_biggest_pool>
    if (!pool) {
    dd5e:	b110      	cbz	r0, dd66 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    dd60:	b2e1      	uxtb	r1, r4
    dd62:	f000 fe9f 	bl	eaa4 <os_mbuf_get_pkthdr>
}
    dd66:	bd10      	pop	{r4, pc}
    dd68:	f101 0308 	add.w	r3, r1, #8
    dd6c:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    dd6e:	4403      	add	r3, r0
    dd70:	b298      	uxth	r0, r3
    dd72:	f7ff ff89 	bl	dc88 <os_msys_find_pool>
    dd76:	e7f2      	b.n	dd5e <os_msys_get_pkthdr+0xa>

0000dd78 <os_msys_init>:

void
os_msys_init(void)
{
    dd78:	b500      	push	{lr}
    dd7a:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    dd7c:	f7ff ffe2 	bl	dd44 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    dd80:	4b06      	ldr	r3, [pc, #24]	; (dd9c <os_msys_init+0x24>)
    dd82:	9301      	str	r3, [sp, #4]
    dd84:	f44f 7392 	mov.w	r3, #292	; 0x124
    dd88:	9300      	str	r3, [sp, #0]
    dd8a:	230c      	movs	r3, #12
    dd8c:	4a04      	ldr	r2, [pc, #16]	; (dda0 <os_msys_init+0x28>)
    dd8e:	4905      	ldr	r1, [pc, #20]	; (dda4 <os_msys_init+0x2c>)
    dd90:	4805      	ldr	r0, [pc, #20]	; (dda8 <os_msys_init+0x30>)
    dd92:	f7ff ffb5 	bl	dd00 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    dd96:	b003      	add	sp, #12
    dd98:	f85d fb04 	ldr.w	pc, [sp], #4
    dd9c:	000238ec 	.word	0x000238ec
    dda0:	20003d24 	.word	0x20003d24
    dda4:	20003d30 	.word	0x20003d30
    dda8:	20002f74 	.word	0x20002f74

0000ddac <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    ddac:	4603      	mov	r3, r0
    ddae:	b128      	cbz	r0, ddbc <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    ddb0:	2000      	movs	r0, #0
    ddb2:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    ddb4:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    ddb6:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    ddb8:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    ddba:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    ddbc:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    ddbe:	4770      	bx	lr

0000ddc0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    ddc2:	4b2c      	ldr	r3, [pc, #176]	; (de74 <os_mutex_release+0xb4>)
    ddc4:	681b      	ldr	r3, [r3, #0]
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	d04b      	beq.n	de62 <os_mutex_release+0xa2>
    ddca:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ddcc:	2800      	cmp	r0, #0
    ddce:	d04a      	beq.n	de66 <os_mutex_release+0xa6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    ddd0:	f000 f978 	bl	e0c4 <os_sched_get_current_task>
    ddd4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    ddd6:	88e3      	ldrh	r3, [r4, #6]
    ddd8:	2b00      	cmp	r3, #0
    ddda:	d046      	beq.n	de6a <os_mutex_release+0xaa>
    dddc:	68a2      	ldr	r2, [r4, #8]
    ddde:	4282      	cmp	r2, r0
    dde0:	d145      	bne.n	de6e <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    dde2:	2b01      	cmp	r3, #1
    dde4:	d003      	beq.n	ddee <os_mutex_release+0x2e>
        --mu->mu_level;
    dde6:	3b01      	subs	r3, #1
    dde8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    ddea:	2000      	movs	r0, #0
        goto done;
    ddec:	e03a      	b.n	de64 <os_mutex_release+0xa4>
    }

    OS_ENTER_CRITICAL(sr);
    ddee:	f7ff f9e1 	bl	d1b4 <os_arch_save_sr>
    ddf2:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    ddf4:	88e3      	ldrh	r3, [r4, #6]
    ddf6:	3b01      	subs	r3, #1
    ddf8:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    ddfa:	7aea      	ldrb	r2, [r5, #11]
    ddfc:	7963      	ldrb	r3, [r4, #5]
    ddfe:	429a      	cmp	r2, r3
    de00:	d11e      	bne.n	de40 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    de02:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    de04:	b146      	cbz	r6, de18 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    de06:	69f3      	ldr	r3, [r6, #28]
    de08:	b1fb      	cbz	r3, de4a <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    de0a:	4630      	mov	r0, r6
    de0c:	f000 f9f0 	bl	e1f0 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    de10:	2301      	movs	r3, #1
    de12:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    de14:	7af3      	ldrb	r3, [r6, #11]
    de16:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    de18:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    de1a:	b116      	cbz	r6, de22 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    de1c:	7bb3      	ldrb	r3, [r6, #14]
    de1e:	3301      	adds	r3, #1
    de20:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    de22:	7bab      	ldrb	r3, [r5, #14]
    de24:	3b01      	subs	r3, #1
    de26:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    de28:	f000 fa5a 	bl	e2e0 <os_sched_next_task>
    de2c:	4604      	mov	r4, r0
    if (rdy != current) {
    de2e:	4285      	cmp	r5, r0
    de30:	d010      	beq.n	de54 <os_mutex_release+0x94>
        resched = 1;
    de32:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    de34:	4638      	mov	r0, r7
    de36:	f7ff f9c3 	bl	d1c0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    de3a:	b96d      	cbnz	r5, de58 <os_mutex_release+0x98>
        os_sched(rdy);
    }

    ret = OS_OK;
    de3c:	2000      	movs	r0, #0
    de3e:	e011      	b.n	de64 <os_mutex_release+0xa4>
        current->t_prio = mu->mu_prio;
    de40:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    de42:	4628      	mov	r0, r5
    de44:	f000 fa64 	bl	e310 <os_sched_resort>
    de48:	e7db      	b.n	de02 <os_mutex_release+0x42>
        assert(rdy->t_obj);
    de4a:	461a      	mov	r2, r3
    de4c:	4619      	mov	r1, r3
    de4e:	4618      	mov	r0, r3
    de50:	f7ff fa86 	bl	d360 <__assert_func>
    resched = 0;
    de54:	2500      	movs	r5, #0
    de56:	e7ed      	b.n	de34 <os_mutex_release+0x74>
        os_sched(rdy);
    de58:	4620      	mov	r0, r4
    de5a:	f000 fa47 	bl	e2ec <os_sched>
    ret = OS_OK;
    de5e:	2000      	movs	r0, #0
    de60:	e000      	b.n	de64 <os_mutex_release+0xa4>
        ret = OS_NOT_STARTED;
    de62:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    de64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    de66:	2003      	movs	r0, #3
    de68:	e7fc      	b.n	de64 <os_mutex_release+0xa4>
        ret = OS_BAD_MUTEX;
    de6a:	2005      	movs	r0, #5
    de6c:	e7fa      	b.n	de64 <os_mutex_release+0xa4>
    de6e:	2005      	movs	r0, #5
    de70:	e7f8      	b.n	de64 <os_mutex_release+0xa4>
    de72:	bf00      	nop
    de74:	20002f48 	.word	0x20002f48

0000de78 <os_mutex_pend>:

os_error_t
os_mutex_pend(struct os_mutex *mu, os_time_t timeout)
{
    de78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    de7a:	4b36      	ldr	r3, [pc, #216]	; (df54 <os_mutex_pend+0xdc>)
    de7c:	681b      	ldr	r3, [r3, #0]
    de7e:	2b00      	cmp	r3, #0
    de80:	d063      	beq.n	df4a <os_mutex_pend+0xd2>
    de82:	4605      	mov	r5, r0
    de84:	460e      	mov	r6, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    de86:	2800      	cmp	r0, #0
    de88:	d061      	beq.n	df4e <os_mutex_pend+0xd6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    de8a:	f7ff f993 	bl	d1b4 <os_arch_save_sr>
    de8e:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    de90:	f000 f918 	bl	e0c4 <os_sched_get_current_task>
    de94:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    de96:	88ea      	ldrh	r2, [r5, #6]
    de98:	b1a2      	cbz	r2, dec4 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    de9a:	68ab      	ldr	r3, [r5, #8]
    de9c:	4283      	cmp	r3, r0
    de9e:	d01e      	beq.n	dede <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    dea0:	b326      	cbz	r6, deec <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    dea2:	7ad9      	ldrb	r1, [r3, #11]
    dea4:	7ac2      	ldrb	r2, [r0, #11]
    dea6:	4291      	cmp	r1, r2
    dea8:	d825      	bhi.n	def6 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    deaa:	6828      	ldr	r0, [r5, #0]
    deac:	b368      	cbz	r0, df0a <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    deae:	4603      	mov	r3, r0
    last = NULL;
    deb0:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    deb2:	b32b      	cbz	r3, df00 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    deb4:	f894 c00b 	ldrb.w	ip, [r4, #11]
    deb8:	7ada      	ldrb	r2, [r3, #11]
    deba:	4594      	cmp	ip, r2
    debc:	d320      	bcc.n	df00 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    debe:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    dec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    dec2:	e7f6      	b.n	deb2 <os_mutex_pend+0x3a>
        mu->mu_owner = current;
    dec4:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    dec6:	7ac3      	ldrb	r3, [r0, #11]
    dec8:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    deca:	7b83      	ldrb	r3, [r0, #14]
    decc:	3301      	adds	r3, #1
    dece:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    ded0:	2301      	movs	r3, #1
    ded2:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ded4:	4638      	mov	r0, r7
    ded6:	f7ff f973 	bl	d1c0 <os_arch_restore_sr>
        ret = OS_OK;
    deda:	2000      	movs	r0, #0
        goto done;
    dedc:	e032      	b.n	df44 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    dede:	3201      	adds	r2, #1
    dee0:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    dee2:	4638      	mov	r0, r7
    dee4:	f7ff f96c 	bl	d1c0 <os_arch_restore_sr>
        ret = OS_OK;
    dee8:	2000      	movs	r0, #0
        goto done;
    deea:	e02b      	b.n	df44 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    deec:	4638      	mov	r0, r7
    deee:	f7ff f967 	bl	d1c0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    def2:	2006      	movs	r0, #6
        goto done;
    def4:	e026      	b.n	df44 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    def6:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    def8:	68a8      	ldr	r0, [r5, #8]
    defa:	f000 fa09 	bl	e310 <os_sched_resort>
    defe:	e7d4      	b.n	deaa <os_mutex_pend+0x32>
        }
    }

    if (last) {
    df00:	b119      	cbz	r1, df0a <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    df02:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    df04:	64e3      	str	r3, [r4, #76]	; 0x4c
    df06:	64cc      	str	r4, [r1, #76]	; 0x4c
    df08:	e001      	b.n	df0e <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    df0a:	64e0      	str	r0, [r4, #76]	; 0x4c
    df0c:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    df0e:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    df10:	7b63      	ldrb	r3, [r4, #13]
    df12:	f043 0304 	orr.w	r3, r3, #4
    df16:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    df18:	4631      	mov	r1, r6
    df1a:	4620      	mov	r0, r4
    df1c:	f000 f8de 	bl	e0dc <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    df20:	4638      	mov	r0, r7
    df22:	f7ff f94d 	bl	d1c0 <os_arch_restore_sr>

    os_sched(NULL);
    df26:	2000      	movs	r0, #0
    df28:	f000 f9e0 	bl	e2ec <os_sched>

    OS_ENTER_CRITICAL(sr);
    df2c:	f7ff f942 	bl	d1b4 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    df30:	7b63      	ldrb	r3, [r4, #13]
    df32:	f023 0304 	bic.w	r3, r3, #4
    df36:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    df38:	f7ff f942 	bl	d1c0 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    df3c:	68ab      	ldr	r3, [r5, #8]
    df3e:	42a3      	cmp	r3, r4
    df40:	d001      	beq.n	df46 <os_mutex_pend+0xce>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    df42:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    df44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_OK;
    df46:	2000      	movs	r0, #0
    df48:	e7fc      	b.n	df44 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    df4a:	2009      	movs	r0, #9
    df4c:	e7fa      	b.n	df44 <os_mutex_pend+0xcc>
        ret = OS_INVALID_PARM;
    df4e:	2003      	movs	r0, #3
    df50:	e7f8      	b.n	df44 <os_mutex_pend+0xcc>
    df52:	bf00      	nop
    df54:	20002f48 	.word	0x20002f48

0000df58 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    df58:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    df5a:	4b05      	ldr	r3, [pc, #20]	; (df70 <os_sanity_check_list_lock+0x18>)
    df5c:	6818      	ldr	r0, [r3, #0]
    df5e:	b900      	cbnz	r0, df62 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    df60:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    df62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    df66:	4803      	ldr	r0, [pc, #12]	; (df74 <os_sanity_check_list_lock+0x1c>)
    df68:	f7ff ff86 	bl	de78 <os_mutex_pend>
    if (rc != OS_OK) {
    df6c:	e7f8      	b.n	df60 <os_sanity_check_list_lock+0x8>
    df6e:	bf00      	nop
    df70:	20002f48 	.word	0x20002f48
    df74:	20003d50 	.word	0x20003d50

0000df78 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    df78:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    df7a:	4b04      	ldr	r3, [pc, #16]	; (df8c <os_sanity_check_list_unlock+0x14>)
    df7c:	6818      	ldr	r0, [r3, #0]
    df7e:	b900      	cbnz	r0, df82 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    df80:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    df82:	4803      	ldr	r0, [pc, #12]	; (df90 <os_sanity_check_list_unlock+0x18>)
    df84:	f7ff ff1c 	bl	ddc0 <os_mutex_release>
    if (rc != 0) {
    df88:	e7fa      	b.n	df80 <os_sanity_check_list_unlock+0x8>
    df8a:	bf00      	nop
    df8c:	20002f48 	.word	0x20002f48
    df90:	20003d50 	.word	0x20003d50

0000df94 <os_sanity_check_init>:
{
    df94:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    df96:	2000      	movs	r0, #0
    df98:	6018      	str	r0, [r3, #0]
    df9a:	6058      	str	r0, [r3, #4]
    df9c:	6098      	str	r0, [r3, #8]
    df9e:	60d8      	str	r0, [r3, #12]
    dfa0:	6118      	str	r0, [r3, #16]
}
    dfa2:	4770      	bx	lr

0000dfa4 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    dfa4:	b510      	push	{r4, lr}
    dfa6:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    dfa8:	f7ff ffd6 	bl	df58 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    dfac:	b100      	cbz	r0, dfb0 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    dfae:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    dfb0:	4b03      	ldr	r3, [pc, #12]	; (dfc0 <os_sanity_check_register+0x1c>)
    dfb2:	681a      	ldr	r2, [r3, #0]
    dfb4:	6122      	str	r2, [r4, #16]
    dfb6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    dfb8:	f7ff ffde 	bl	df78 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    dfbc:	e7f7      	b.n	dfae <os_sanity_check_register+0xa>
    dfbe:	bf00      	nop
    dfc0:	20003d4c 	.word	0x20003d4c

0000dfc4 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    dfc4:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    dfc6:	f7ff ffc7 	bl	df58 <os_sanity_check_list_lock>
    if (rc != 0) {
    dfca:	b910      	cbnz	r0, dfd2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    dfcc:	4b17      	ldr	r3, [pc, #92]	; (e02c <os_sanity_run+0x68>)
    dfce:	681c      	ldr	r4, [r3, #0]
    dfd0:	e00e      	b.n	dff0 <os_sanity_run+0x2c>
        assert(0);
    dfd2:	2300      	movs	r3, #0
    dfd4:	461a      	mov	r2, r3
    dfd6:	4619      	mov	r1, r3
    dfd8:	4618      	mov	r0, r3
    dfda:	f7ff f9c1 	bl	d360 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    dfde:	f000 fb87 	bl	e6f0 <os_time_get>
    dfe2:	6823      	ldr	r3, [r4, #0]
    dfe4:	6862      	ldr	r2, [r4, #4]
    dfe6:	4413      	add	r3, r2
    dfe8:	1ac0      	subs	r0, r0, r3
    dfea:	2800      	cmp	r0, #0
    dfec:	dc0d      	bgt.n	e00a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    dfee:	6924      	ldr	r4, [r4, #16]
    dff0:	b18c      	cbz	r4, e016 <os_sanity_run+0x52>
        if (sc->sc_func) {
    dff2:	68a3      	ldr	r3, [r4, #8]
    dff4:	2b00      	cmp	r3, #0
    dff6:	d0f2      	beq.n	dfde <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
    dff8:	68e1      	ldr	r1, [r4, #12]
    dffa:	4620      	mov	r0, r4
    dffc:	4798      	blx	r3
            if (rc == OS_OK) {
    dffe:	2800      	cmp	r0, #0
    e000:	d1ed      	bne.n	dfde <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
    e002:	f000 fb75 	bl	e6f0 <os_time_get>
    e006:	6020      	str	r0, [r4, #0]
                continue;
    e008:	e7f1      	b.n	dfee <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    e00a:	2300      	movs	r3, #0
    e00c:	461a      	mov	r2, r3
    e00e:	4619      	mov	r1, r3
    e010:	4618      	mov	r0, r3
    e012:	f7ff f9a5 	bl	d360 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    e016:	f7ff ffaf 	bl	df78 <os_sanity_check_list_unlock>
    if (rc != 0) {
    e01a:	b900      	cbnz	r0, e01e <os_sanity_run+0x5a>
        assert(0);
    }
}
    e01c:	bd10      	pop	{r4, pc}
        assert(0);
    e01e:	2300      	movs	r3, #0
    e020:	461a      	mov	r2, r3
    e022:	4619      	mov	r1, r3
    e024:	4618      	mov	r0, r3
    e026:	f7ff f99b 	bl	d360 <__assert_func>
    e02a:	bf00      	nop
    e02c:	20003d4c 	.word	0x20003d4c

0000e030 <os_sanity_init>:

int
os_sanity_init(void)
{
    e030:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    e032:	4802      	ldr	r0, [pc, #8]	; (e03c <os_sanity_init+0xc>)
    e034:	f7ff feba 	bl	ddac <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    e038:	bd08      	pop	{r3, pc}
    e03a:	bf00      	nop
    e03c:	20003d50 	.word	0x20003d50

0000e040 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    e040:	7b03      	ldrb	r3, [r0, #12]
    e042:	2b01      	cmp	r3, #1
    e044:	d001      	beq.n	e04a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    e046:	2002      	movs	r0, #2
}
    e048:	4770      	bx	lr
{
    e04a:	b510      	push	{r4, lr}
    e04c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    e04e:	f7ff f8b1 	bl	d1b4 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    e052:	4b0f      	ldr	r3, [pc, #60]	; (e090 <os_sched_insert+0x50>)
    e054:	681b      	ldr	r3, [r3, #0]
    e056:	b12b      	cbz	r3, e064 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    e058:	7ae1      	ldrb	r1, [r4, #11]
    e05a:	7ada      	ldrb	r2, [r3, #11]
    e05c:	4291      	cmp	r1, r2
    e05e:	d301      	bcc.n	e064 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    e060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e062:	e7f8      	b.n	e056 <os_sched_insert+0x16>
    if (entry) {
    e064:	b153      	cbz	r3, e07c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    e066:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e068:	64a2      	str	r2, [r4, #72]	; 0x48
    e06a:	6463      	str	r3, [r4, #68]	; 0x44
    e06c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e06e:	6014      	str	r4, [r2, #0]
    e070:	3444      	adds	r4, #68	; 0x44
    e072:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    e074:	f7ff f8a4 	bl	d1c0 <os_arch_restore_sr>
    return (0);
    e078:	2000      	movs	r0, #0
}
    e07a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    e07c:	2300      	movs	r3, #0
    e07e:	6463      	str	r3, [r4, #68]	; 0x44
    e080:	4b03      	ldr	r3, [pc, #12]	; (e090 <os_sched_insert+0x50>)
    e082:	685a      	ldr	r2, [r3, #4]
    e084:	64a2      	str	r2, [r4, #72]	; 0x48
    e086:	6014      	str	r4, [r2, #0]
    e088:	3444      	adds	r4, #68	; 0x44
    e08a:	605c      	str	r4, [r3, #4]
    e08c:	e7f2      	b.n	e074 <os_sched_insert+0x34>
    e08e:	bf00      	nop
    e090:	20001340 	.word	0x20001340

0000e094 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    e094:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    e096:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    e098:	3301      	adds	r3, #1
    e09a:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    e09c:	4b06      	ldr	r3, [pc, #24]	; (e0b8 <os_sched_ctx_sw_hook+0x24>)
    e09e:	681c      	ldr	r4, [r3, #0]
    e0a0:	4b06      	ldr	r3, [pc, #24]	; (e0bc <os_sched_ctx_sw_hook+0x28>)
    e0a2:	6818      	ldr	r0, [r3, #0]
    e0a4:	4906      	ldr	r1, [pc, #24]	; (e0c0 <os_sched_ctx_sw_hook+0x2c>)
    e0a6:	680b      	ldr	r3, [r1, #0]
    e0a8:	1ac2      	subs	r2, r0, r3
    e0aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e0ac:	4413      	add	r3, r2
    e0ae:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    e0b0:	6008      	str	r0, [r1, #0]
}
    e0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    e0b6:	4770      	bx	lr
    e0b8:	20003d5c 	.word	0x20003d5c
    e0bc:	20003da0 	.word	0x20003da0
    e0c0:	20003d60 	.word	0x20003d60

0000e0c4 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    e0c4:	4b01      	ldr	r3, [pc, #4]	; (e0cc <os_sched_get_current_task+0x8>)
    e0c6:	6818      	ldr	r0, [r3, #0]
    e0c8:	4770      	bx	lr
    e0ca:	bf00      	nop
    e0cc:	20003d5c 	.word	0x20003d5c

0000e0d0 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    e0d0:	4b01      	ldr	r3, [pc, #4]	; (e0d8 <os_sched_set_current_task+0x8>)
    e0d2:	6018      	str	r0, [r3, #0]
}
    e0d4:	4770      	bx	lr
    e0d6:	bf00      	nop
    e0d8:	20003d5c 	.word	0x20003d5c

0000e0dc <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    e0dc:	b538      	push	{r3, r4, r5, lr}
    e0de:	4604      	mov	r4, r0
    e0e0:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e0e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e0e4:	b183      	cbz	r3, e108 <os_sched_sleep+0x2c>
    e0e6:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e0e8:	649a      	str	r2, [r3, #72]	; 0x48
    e0ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    e0ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e0ee:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    e0f0:	2302      	movs	r3, #2
    e0f2:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    e0f4:	f000 fafc 	bl	e6f0 <os_time_get>
    e0f8:	4428      	add	r0, r5
    e0fa:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    e0fc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    e100:	d006      	beq.n	e110 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    e102:	4b18      	ldr	r3, [pc, #96]	; (e164 <os_sched_sleep+0x88>)
    e104:	681b      	ldr	r3, [r3, #0]
    e106:	e011      	b.n	e12c <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e108:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e10a:	4b17      	ldr	r3, [pc, #92]	; (e168 <os_sched_sleep+0x8c>)
    e10c:	605a      	str	r2, [r3, #4]
    e10e:	e7ec      	b.n	e0ea <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    e110:	7b63      	ldrb	r3, [r4, #13]
    e112:	f043 0301 	orr.w	r3, r3, #1
    e116:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    e118:	2300      	movs	r3, #0
    e11a:	6463      	str	r3, [r4, #68]	; 0x44
    e11c:	4b11      	ldr	r3, [pc, #68]	; (e164 <os_sched_sleep+0x88>)
    e11e:	685a      	ldr	r2, [r3, #4]
    e120:	64a2      	str	r2, [r4, #72]	; 0x48
    e122:	6014      	str	r4, [r2, #0]
    e124:	3444      	adds	r4, #68	; 0x44
    e126:	605c      	str	r4, [r3, #4]
    e128:	e011      	b.n	e14e <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    e12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e12c:	b13b      	cbz	r3, e13e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    e12e:	7b5a      	ldrb	r2, [r3, #13]
    e130:	f012 0f01 	tst.w	r2, #1
    e134:	d103      	bne.n	e13e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    e136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e138:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    e13a:	2a00      	cmp	r2, #0
    e13c:	ddf5      	ble.n	e12a <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    e13e:	b143      	cbz	r3, e152 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    e140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e142:	64a2      	str	r2, [r4, #72]	; 0x48
    e144:	6463      	str	r3, [r4, #68]	; 0x44
    e146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e148:	6014      	str	r4, [r2, #0]
    e14a:	3444      	adds	r4, #68	; 0x44
    e14c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    e14e:	2000      	movs	r0, #0
    e150:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    e152:	2300      	movs	r3, #0
    e154:	6463      	str	r3, [r4, #68]	; 0x44
    e156:	4b03      	ldr	r3, [pc, #12]	; (e164 <os_sched_sleep+0x88>)
    e158:	685a      	ldr	r2, [r3, #4]
    e15a:	64a2      	str	r2, [r4, #72]	; 0x48
    e15c:	6014      	str	r4, [r2, #0]
    e15e:	3444      	adds	r4, #68	; 0x44
    e160:	605c      	str	r4, [r3, #4]
    e162:	e7f4      	b.n	e14e <os_sched_sleep+0x72>
    e164:	20001348 	.word	0x20001348
    e168:	20001340 	.word	0x20001340

0000e16c <os_sched_remove>:
 */
int
os_sched_remove(struct os_task *t)
{

    if (t->t_state == OS_TASK_SLEEP) {
    e16c:	7b03      	ldrb	r3, [r0, #12]
    e16e:	2b02      	cmp	r3, #2
    e170:	d014      	beq.n	e19c <os_sched_remove+0x30>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    } else if (t->t_state == OS_TASK_READY) {
    e172:	2b01      	cmp	r3, #1
    e174:	d01e      	beq.n	e1b4 <os_sched_remove+0x48>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    }
    t->t_next_wakeup = 0;
    e176:	2300      	movs	r3, #0
    e178:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    e17a:	7b43      	ldrb	r3, [r0, #13]
    e17c:	f043 0301 	orr.w	r3, r3, #1
    e180:	7343      	strb	r3, [r0, #13]

    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    e182:	4b18      	ldr	r3, [pc, #96]	; (e1e4 <os_sched_remove+0x78>)
    e184:	681b      	ldr	r3, [r3, #0]
    e186:	4283      	cmp	r3, r0
    e188:	d020      	beq.n	e1cc <os_sched_remove+0x60>
    e18a:	461a      	mov	r2, r3
    e18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e18e:	4283      	cmp	r3, r0
    e190:	d1fb      	bne.n	e18a <os_sched_remove+0x1e>
    e192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e194:	6413      	str	r3, [r2, #64]	; 0x40
    e196:	b303      	cbz	r3, e1da <os_sched_remove+0x6e>

    os_trace_task_stop_exec();
    return OS_OK;
}
    e198:	2000      	movs	r0, #0
    e19a:	4770      	bx	lr
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e19c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e19e:	b12b      	cbz	r3, e1ac <os_sched_remove+0x40>
    e1a0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e1a2:	649a      	str	r2, [r3, #72]	; 0x48
    e1a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e1a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e1a8:	601a      	str	r2, [r3, #0]
    e1aa:	e7e4      	b.n	e176 <os_sched_remove+0xa>
    e1ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e1ae:	4b0e      	ldr	r3, [pc, #56]	; (e1e8 <os_sched_remove+0x7c>)
    e1b0:	605a      	str	r2, [r3, #4]
    e1b2:	e7f7      	b.n	e1a4 <os_sched_remove+0x38>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e1b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e1b6:	b12b      	cbz	r3, e1c4 <os_sched_remove+0x58>
    e1b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e1ba:	649a      	str	r2, [r3, #72]	; 0x48
    e1bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e1be:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e1c0:	601a      	str	r2, [r3, #0]
    e1c2:	e7d8      	b.n	e176 <os_sched_remove+0xa>
    e1c4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e1c6:	4b09      	ldr	r3, [pc, #36]	; (e1ec <os_sched_remove+0x80>)
    e1c8:	605a      	str	r2, [r3, #4]
    e1ca:	e7f7      	b.n	e1bc <os_sched_remove+0x50>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    e1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e1ce:	4a05      	ldr	r2, [pc, #20]	; (e1e4 <os_sched_remove+0x78>)
    e1d0:	6013      	str	r3, [r2, #0]
    e1d2:	2b00      	cmp	r3, #0
    e1d4:	d1e0      	bne.n	e198 <os_sched_remove+0x2c>
    e1d6:	6052      	str	r2, [r2, #4]
    e1d8:	e7de      	b.n	e198 <os_sched_remove+0x2c>
    e1da:	3240      	adds	r2, #64	; 0x40
    e1dc:	4b01      	ldr	r3, [pc, #4]	; (e1e4 <os_sched_remove+0x78>)
    e1de:	605a      	str	r2, [r3, #4]
    e1e0:	e7da      	b.n	e198 <os_sched_remove+0x2c>
    e1e2:	bf00      	nop
    e1e4:	20003d64 	.word	0x20003d64
    e1e8:	20001348 	.word	0x20001348
    e1ec:	20001340 	.word	0x20001340

0000e1f0 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    e1f0:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    e1f2:	7b03      	ldrb	r3, [r0, #12]
    e1f4:	2b02      	cmp	r3, #2
    e1f6:	d121      	bne.n	e23c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    e1f8:	69c2      	ldr	r2, [r0, #28]
    e1fa:	b162      	cbz	r2, e216 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    e1fc:	6813      	ldr	r3, [r2, #0]
    e1fe:	b31b      	cbz	r3, e248 <os_sched_wakeup+0x58>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    e200:	4283      	cmp	r3, r0
    e202:	d026      	beq.n	e252 <os_sched_wakeup+0x62>
    e204:	461a      	mov	r2, r3
    e206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e208:	4283      	cmp	r3, r0
    e20a:	d1fb      	bne.n	e204 <os_sched_wakeup+0x14>
    e20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e20e:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    e210:	2300      	movs	r3, #0
    e212:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    e214:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    e216:	2301      	movs	r3, #1
    e218:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    e21a:	2300      	movs	r3, #0
    e21c:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    e21e:	7b43      	ldrb	r3, [r0, #13]
    e220:	f023 0301 	bic.w	r3, r3, #1
    e224:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e226:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e228:	b1b3      	cbz	r3, e258 <os_sched_wakeup+0x68>
    e22a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e22c:	649a      	str	r2, [r3, #72]	; 0x48
    e22e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e230:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e232:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    e234:	f7ff ff04 	bl	e040 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    e238:	2000      	movs	r0, #0
    e23a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    e23c:	2300      	movs	r3, #0
    e23e:	461a      	mov	r2, r3
    e240:	4619      	mov	r1, r3
    e242:	4618      	mov	r0, r3
    e244:	f7ff f88c 	bl	d360 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    e248:	461a      	mov	r2, r3
    e24a:	4619      	mov	r1, r3
    e24c:	4618      	mov	r0, r3
    e24e:	f7ff f887 	bl	d360 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    e252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e254:	6013      	str	r3, [r2, #0]
    e256:	e7db      	b.n	e210 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e258:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e25a:	4b01      	ldr	r3, [pc, #4]	; (e260 <os_sched_wakeup+0x70>)
    e25c:	605a      	str	r2, [r3, #4]
    e25e:	e7e6      	b.n	e22e <os_sched_wakeup+0x3e>
    e260:	20001348 	.word	0x20001348

0000e264 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    e264:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    e266:	f000 fa43 	bl	e6f0 <os_time_get>
    e26a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    e26c:	f7fe ffa2 	bl	d1b4 <os_arch_save_sr>
    e270:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    e272:	4b0a      	ldr	r3, [pc, #40]	; (e29c <os_sched_os_timer_exp+0x38>)
    e274:	6818      	ldr	r0, [r3, #0]
    while (t) {
    e276:	e002      	b.n	e27e <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    e278:	f7ff ffba 	bl	e1f0 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    e27c:	4620      	mov	r0, r4
    while (t) {
    e27e:	b140      	cbz	r0, e292 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    e280:	7b43      	ldrb	r3, [r0, #13]
    e282:	f013 0f01 	tst.w	r3, #1
    e286:	d104      	bne.n	e292 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    e288:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    e28a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e28c:	1aeb      	subs	r3, r5, r3
    e28e:	2b00      	cmp	r3, #0
    e290:	daf2      	bge.n	e278 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    e292:	4630      	mov	r0, r6
    e294:	f7fe ff94 	bl	d1c0 <os_arch_restore_sr>
}
    e298:	bd70      	pop	{r4, r5, r6, pc}
    e29a:	bf00      	nop
    e29c:	20001348 	.word	0x20001348

0000e2a0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    e2a0:	b510      	push	{r4, lr}
    e2a2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    e2a4:	f7fe ff8f 	bl	d1c6 <os_arch_in_critical>
    e2a8:	b150      	cbz	r0, e2c0 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    e2aa:	4b0c      	ldr	r3, [pc, #48]	; (e2dc <os_sched_wakeup_ticks+0x3c>)
    e2ac:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    e2ae:	b17b      	cbz	r3, e2d0 <os_sched_wakeup_ticks+0x30>
    e2b0:	7b5a      	ldrb	r2, [r3, #13]
    e2b2:	f012 0f01 	tst.w	r2, #1
    e2b6:	d10e      	bne.n	e2d6 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    e2b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    e2ba:	1b00      	subs	r0, r0, r4
    e2bc:	d406      	bmi.n	e2cc <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    e2be:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    e2c0:	2300      	movs	r3, #0
    e2c2:	461a      	mov	r2, r3
    e2c4:	4619      	mov	r1, r3
    e2c6:	4618      	mov	r0, r3
    e2c8:	f7ff f84a 	bl	d360 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    e2cc:	2000      	movs	r0, #0
    e2ce:	e7f6      	b.n	e2be <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    e2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e2d4:	e7f3      	b.n	e2be <os_sched_wakeup_ticks+0x1e>
    e2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    e2da:	e7f0      	b.n	e2be <os_sched_wakeup_ticks+0x1e>
    e2dc:	20001348 	.word	0x20001348

0000e2e0 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    e2e0:	4b01      	ldr	r3, [pc, #4]	; (e2e8 <os_sched_next_task+0x8>)
    e2e2:	6818      	ldr	r0, [r3, #0]
    e2e4:	4770      	bx	lr
    e2e6:	bf00      	nop
    e2e8:	20001340 	.word	0x20001340

0000e2ec <os_sched>:
{
    e2ec:	b538      	push	{r3, r4, r5, lr}
    e2ee:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    e2f0:	f7fe ff60 	bl	d1b4 <os_arch_save_sr>
    e2f4:	4605      	mov	r5, r0
    if (!next_t) {
    e2f6:	b134      	cbz	r4, e306 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    e2f8:	4620      	mov	r0, r4
    e2fa:	f7fe ff51 	bl	d1a0 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    e2fe:	4628      	mov	r0, r5
    e300:	f7fe ff5e 	bl	d1c0 <os_arch_restore_sr>
}
    e304:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    e306:	f7ff ffeb 	bl	e2e0 <os_sched_next_task>
    e30a:	4604      	mov	r4, r0
    e30c:	e7f4      	b.n	e2f8 <os_sched+0xc>
	...

0000e310 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    e310:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    e312:	7b03      	ldrb	r3, [r0, #12]
    e314:	2b01      	cmp	r3, #1
    e316:	d000      	beq.n	e31a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    e318:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e31a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e31c:	b13b      	cbz	r3, e32e <os_sched_resort+0x1e>
    e31e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e320:	649a      	str	r2, [r3, #72]	; 0x48
    e322:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e324:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e326:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    e328:	f7ff fe8a 	bl	e040 <os_sched_insert>
}
    e32c:	e7f4      	b.n	e318 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e32e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e330:	4b01      	ldr	r3, [pc, #4]	; (e338 <os_sched_resort+0x28>)
    e332:	605a      	str	r2, [r3, #4]
    e334:	e7f5      	b.n	e322 <os_sched_resort+0x12>
    e336:	bf00      	nop
    e338:	20001340 	.word	0x20001340

0000e33c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    e33c:	4603      	mov	r3, r0
    e33e:	b118      	cbz	r0, e348 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    e340:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    e342:	2000      	movs	r0, #0
    e344:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    e346:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e348:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    e34a:	4770      	bx	lr

0000e34c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    e34e:	4b17      	ldr	r3, [pc, #92]	; (e3ac <os_sem_release+0x60>)
    e350:	681b      	ldr	r3, [r3, #0]
    e352:	b33b      	cbz	r3, e3a4 <os_sem_release+0x58>
    e354:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    e356:	b338      	cbz	r0, e3a8 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    e358:	f7ff feb4 	bl	e0c4 <os_sched_get_current_task>
    e35c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    e35e:	f7fe ff29 	bl	d1b4 <os_arch_save_sr>
    e362:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    e364:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
    e366:	b165      	cbz	r5, e382 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    e368:	7b6b      	ldrb	r3, [r5, #13]
    e36a:	f023 0302 	bic.w	r3, r3, #2
    e36e:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    e370:	4628      	mov	r0, r5
    e372:	f7ff ff3d 	bl	e1f0 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    e376:	7afa      	ldrb	r2, [r7, #11]
    e378:	7aeb      	ldrb	r3, [r5, #11]
    e37a:	429a      	cmp	r2, r3
    e37c:	d80b      	bhi.n	e396 <os_sem_release+0x4a>
    resched = 0;
    e37e:	2400      	movs	r4, #0
    e380:	e003      	b.n	e38a <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    e382:	88e3      	ldrh	r3, [r4, #6]
    e384:	3301      	adds	r3, #1
    e386:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    e388:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
    e38a:	4630      	mov	r0, r6
    e38c:	f7fe ff18 	bl	d1c0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    e390:	b91c      	cbnz	r4, e39a <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
    e392:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    e394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
    e396:	2401      	movs	r4, #1
    e398:	e7f7      	b.n	e38a <os_sem_release+0x3e>
        os_sched(rdy);
    e39a:	4628      	mov	r0, r5
    e39c:	f7ff ffa6 	bl	e2ec <os_sched>
    ret = OS_OK;
    e3a0:	2000      	movs	r0, #0
    e3a2:	e7f7      	b.n	e394 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
    e3a4:	2009      	movs	r0, #9
    e3a6:	e7f5      	b.n	e394 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
    e3a8:	2003      	movs	r0, #3
    e3aa:	e7f3      	b.n	e394 <os_sem_release+0x48>
    e3ac:	20002f48 	.word	0x20002f48

0000e3b0 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    e3b2:	4b2b      	ldr	r3, [pc, #172]	; (e460 <os_sem_pend+0xb0>)
    e3b4:	681b      	ldr	r3, [r3, #0]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d04d      	beq.n	e456 <os_sem_pend+0xa6>
    e3ba:	4604      	mov	r4, r0
    e3bc:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    e3be:	2800      	cmp	r0, #0
    e3c0:	d04b      	beq.n	e45a <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    e3c2:	f7ff fe7f 	bl	e0c4 <os_sched_get_current_task>
    e3c6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    e3c8:	f7fe fef4 	bl	d1b4 <os_arch_save_sr>
    e3cc:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    e3ce:	88e3      	ldrh	r3, [r4, #6]
    e3d0:	b14b      	cbz	r3, e3e6 <os_sem_pend+0x36>
        sem->sem_tokens--;
    e3d2:	3b01      	subs	r3, #1
    e3d4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    e3d6:	2400      	movs	r4, #0
    sched = 0;
    e3d8:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    e3da:	4630      	mov	r0, r6
    e3dc:	f7fe fef0 	bl	d1c0 <os_arch_restore_sr>

    if (sched) {
    e3e0:	bb47      	cbnz	r7, e434 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    e3e2:	4620      	mov	r0, r4
    e3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    e3e6:	b317      	cbz	r7, e42e <os_sem_pend+0x7e>
        current->t_obj = sem;
    e3e8:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    e3ea:	7b6b      	ldrb	r3, [r5, #13]
    e3ec:	f043 0302 	orr.w	r3, r3, #2
    e3f0:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    e3f2:	f8d4 c000 	ldr.w	ip, [r4]
    e3f6:	f1bc 0f00 	cmp.w	ip, #0
    e3fa:	d00e      	beq.n	e41a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    e3fc:	4663      	mov	r3, ip
        last = NULL;
    e3fe:	2000      	movs	r0, #0
    e400:	e001      	b.n	e406 <os_sem_pend+0x56>
                last = entry;
    e402:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    e404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e406:	b11b      	cbz	r3, e410 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
    e408:	7ae9      	ldrb	r1, [r5, #11]
    e40a:	7ada      	ldrb	r2, [r3, #11]
    e40c:	4291      	cmp	r1, r2
    e40e:	d2f8      	bcs.n	e402 <os_sem_pend+0x52>
        if (last) {
    e410:	b118      	cbz	r0, e41a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    e412:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e414:	64eb      	str	r3, [r5, #76]	; 0x4c
    e416:	64c5      	str	r5, [r0, #76]	; 0x4c
    e418:	e002      	b.n	e420 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    e41a:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
    e41e:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
    e420:	4639      	mov	r1, r7
    e422:	4628      	mov	r0, r5
    e424:	f7ff fe5a 	bl	e0dc <os_sched_sleep>
        ret = OS_OK;
    e428:	2400      	movs	r4, #0
        sched = 1;
    e42a:	2701      	movs	r7, #1
    e42c:	e7d5      	b.n	e3da <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
    e42e:	2406      	movs	r4, #6
    sched = 0;
    e430:	2700      	movs	r7, #0
    e432:	e7d2      	b.n	e3da <os_sem_pend+0x2a>
        os_sched(NULL);
    e434:	2000      	movs	r0, #0
    e436:	f7ff ff59 	bl	e2ec <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    e43a:	7b6c      	ldrb	r4, [r5, #13]
    e43c:	f014 0402 	ands.w	r4, r4, #2
    e440:	d0cf      	beq.n	e3e2 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
    e442:	f7fe feb7 	bl	d1b4 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    e446:	7b6b      	ldrb	r3, [r5, #13]
    e448:	f023 0302 	bic.w	r3, r3, #2
    e44c:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
    e44e:	f7fe feb7 	bl	d1c0 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    e452:	2406      	movs	r4, #6
    e454:	e7c5      	b.n	e3e2 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
    e456:	2409      	movs	r4, #9
    e458:	e7c3      	b.n	e3e2 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
    e45a:	2403      	movs	r4, #3
    e45c:	e7c1      	b.n	e3e2 <os_sem_pend+0x32>
    e45e:	bf00      	nop
    e460:	20002f48 	.word	0x20002f48

0000e464 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    e464:	2300      	movs	r3, #0
    e466:	e003      	b.n	e470 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    e468:	4a03      	ldr	r2, [pc, #12]	; (e478 <_clear_stack+0x14>)
    e46a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    e46e:	3301      	adds	r3, #1
    e470:	428b      	cmp	r3, r1
    e472:	dbf9      	blt.n	e468 <_clear_stack+0x4>
    }
}
    e474:	4770      	bx	lr
    e476:	bf00      	nop
    e478:	deadbeef 	.word	0xdeadbeef

0000e47c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    e47c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    e480:	4604      	mov	r4, r0
    e482:	460d      	mov	r5, r1
    e484:	4617      	mov	r7, r2
    e486:	461e      	mov	r6, r3
    e488:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    e48c:	2250      	movs	r2, #80	; 0x50
    e48e:	2100      	movs	r1, #0
    e490:	f002 ffff 	bl	11492 <memset>

    t->t_func = func;
    e494:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    e496:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    e498:	f7fe fe8c 	bl	d1b4 <os_arch_save_sr>
    rc = g_task_id;
    e49c:	4b2b      	ldr	r3, [pc, #172]	; (e54c <os_task_init+0xd0>)
    e49e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    e4a0:	1c72      	adds	r2, r6, #1
    e4a2:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    e4a4:	f7fe fe8c 	bl	d1c0 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    e4a8:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    e4aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e4ae:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    e4b0:	2301      	movs	r3, #1
    e4b2:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    e4b4:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    e4b6:	2300      	movs	r3, #0
    e4b8:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
    e4ba:	f104 0620 	add.w	r6, r4, #32
    e4be:	4630      	mov	r0, r6
    e4c0:	f7ff fd68 	bl	df94 <os_sanity_check_init>
    if (rc != OS_OK) {
    e4c4:	4605      	mov	r5, r0
    e4c6:	2800      	cmp	r0, #0
    e4c8:	d133      	bne.n	e532 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    e4ca:	9b07      	ldr	r3, [sp, #28]
    e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e4d0:	d005      	beq.n	e4de <os_task_init+0x62>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
    e4d2:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
    e4d4:	4630      	mov	r0, r6
    e4d6:	f7ff fd65 	bl	dfa4 <os_sanity_check_register>
        if (rc != OS_OK) {
    e4da:	4605      	mov	r5, r0
    e4dc:	bb48      	cbnz	r0, e532 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    e4de:	4649      	mov	r1, r9
    e4e0:	9808      	ldr	r0, [sp, #32]
    e4e2:	f7ff ffbf 	bl	e464 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
    e4e6:	9b08      	ldr	r3, [sp, #32]
    e4e8:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    e4ec:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    e4ee:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    e4f2:	464a      	mov	r2, r9
    e4f4:	4620      	mov	r0, r4
    e4f6:	f7fe fe6b 	bl	d1d0 <os_arch_task_stack_init>
    e4fa:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    e4fc:	4b14      	ldr	r3, [pc, #80]	; (e550 <os_task_init+0xd4>)
    e4fe:	681b      	ldr	r3, [r3, #0]
    e500:	b15b      	cbz	r3, e51a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
    e502:	7ae1      	ldrb	r1, [r4, #11]
    e504:	7ada      	ldrb	r2, [r3, #11]
    e506:	4291      	cmp	r1, r2
    e508:	d001      	beq.n	e50e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    e50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e50c:	e7f8      	b.n	e500 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
    e50e:	2300      	movs	r3, #0
    e510:	461a      	mov	r2, r3
    e512:	4619      	mov	r1, r3
    e514:	4618      	mov	r0, r3
    e516:	f7fe ff23 	bl	d360 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    e51a:	6423      	str	r3, [r4, #64]	; 0x40
    e51c:	4b0c      	ldr	r3, [pc, #48]	; (e550 <os_task_init+0xd4>)
    e51e:	685a      	ldr	r2, [r3, #4]
    e520:	6014      	str	r4, [r2, #0]
    e522:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e526:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    e528:	4620      	mov	r0, r4
    e52a:	f7ff fd89 	bl	e040 <os_sched_insert>
    e52e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    e530:	b110      	cbz	r0, e538 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
    e532:	4628      	mov	r0, r5
    e534:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    e538:	f7fe ffcc 	bl	d4d4 <os_started>
    e53c:	b908      	cbnz	r0, e542 <os_task_init+0xc6>
    return (0);
    e53e:	4605      	mov	r5, r0
    e540:	e7f7      	b.n	e532 <os_task_init+0xb6>
        os_sched(NULL);
    e542:	2000      	movs	r0, #0
    e544:	f7ff fed2 	bl	e2ec <os_sched>
    e548:	e7f3      	b.n	e532 <os_task_init+0xb6>
    e54a:	bf00      	nop
    e54c:	20003d6c 	.word	0x20003d6c
    e550:	20003d64 	.word	0x20003d64

0000e554 <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    e554:	b538      	push	{r3, r4, r5, lr}
    e556:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    e558:	f7ff fdb4 	bl	e0c4 <os_sched_get_current_task>
    e55c:	4284      	cmp	r4, r0
    e55e:	d016      	beq.n	e58e <os_task_remove+0x3a>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    e560:	7b23      	ldrb	r3, [r4, #12]
    e562:	3b01      	subs	r3, #1
    e564:	b2db      	uxtb	r3, r3
    e566:	2b01      	cmp	r3, #1
    e568:	d813      	bhi.n	e592 <os_task_remove+0x3e>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    e56a:	7b63      	ldrb	r3, [r4, #13]
    e56c:	f013 0f0e 	tst.w	r3, #14
    e570:	d111      	bne.n	e596 <os_task_remove+0x42>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    e572:	7ba3      	ldrb	r3, [r4, #14]
    e574:	b98b      	cbnz	r3, e59a <os_task_remove+0x46>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    e576:	f7fe fe1d 	bl	d1b4 <os_arch_save_sr>
    e57a:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    e57c:	4620      	mov	r0, r4
    e57e:	f7ff fdf5 	bl	e16c <os_sched_remove>
    e582:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    e584:	4628      	mov	r0, r5
    e586:	f7fe fe1b 	bl	d1c0 <os_arch_restore_sr>
    return rc;
}
    e58a:	4620      	mov	r0, r4
    e58c:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    e58e:	2403      	movs	r4, #3
    e590:	e7fb      	b.n	e58a <os_task_remove+0x36>
        return OS_NOT_STARTED;
    e592:	2409      	movs	r4, #9
    e594:	e7f9      	b.n	e58a <os_task_remove+0x36>
        return OS_EBUSY;
    e596:	240b      	movs	r4, #11
    e598:	e7f7      	b.n	e58a <os_task_remove+0x36>
        return OS_EBUSY;
    e59a:	240b      	movs	r4, #11
    e59c:	e7f5      	b.n	e58a <os_task_remove+0x36>
	...

0000e5a0 <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    e5a0:	b538      	push	{r3, r4, r5, lr}
    e5a2:	468c      	mov	ip, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    e5a4:	b1b8      	cbz	r0, e5d6 <os_task_info_get_next+0x36>
        next = STAILQ_NEXT(prev, t_os_task_list);
    e5a6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    e5a8:	2d00      	cmp	r5, #0
    e5aa:	d032      	beq.n	e612 <os_task_info_get_next+0x72>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    e5ac:	7aeb      	ldrb	r3, [r5, #11]
    e5ae:	f88c 3000 	strb.w	r3, [ip]
    oti->oti_taskid = next->t_taskid;
    e5b2:	7aab      	ldrb	r3, [r5, #10]
    e5b4:	f88c 3001 	strb.w	r3, [ip, #1]
    oti->oti_state = next->t_state;
    e5b8:	7b2b      	ldrb	r3, [r5, #12]
    e5ba:	f88c 3002 	strb.w	r3, [ip, #2]

    top = next->t_stacktop;
    e5be:	686c      	ldr	r4, [r5, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    e5c0:	892b      	ldrh	r3, [r5, #8]
    e5c2:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
    while (bottom < top) {
    e5c6:	42a3      	cmp	r3, r4
    e5c8:	d208      	bcs.n	e5dc <os_task_info_get_next+0x3c>
        if (*bottom != OS_STACK_PATTERN) {
    e5ca:	4a13      	ldr	r2, [pc, #76]	; (e618 <os_task_info_get_next+0x78>)
    e5cc:	6819      	ldr	r1, [r3, #0]
    e5ce:	4291      	cmp	r1, r2
    e5d0:	d104      	bne.n	e5dc <os_task_info_get_next+0x3c>
            break;
        }
        ++bottom;
    e5d2:	3304      	adds	r3, #4
    e5d4:	e7f7      	b.n	e5c6 <os_task_info_get_next+0x26>
        next = STAILQ_FIRST(&g_os_task_list);
    e5d6:	4b11      	ldr	r3, [pc, #68]	; (e61c <os_task_info_get_next+0x7c>)
    e5d8:	681d      	ldr	r5, [r3, #0]
    e5da:	e7e5      	b.n	e5a8 <os_task_info_get_next+0x8>
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    e5dc:	1ae3      	subs	r3, r4, r3
    e5de:	f3c3 038f 	ubfx	r3, r3, #2, #16
    e5e2:	f8ac 3004 	strh.w	r3, [ip, #4]
    oti->oti_stksize = next->t_stacksize;
    e5e6:	892b      	ldrh	r3, [r5, #8]
    e5e8:	f8ac 3006 	strh.w	r3, [ip, #6]
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    e5ec:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    e5ee:	f8cc 3008 	str.w	r3, [ip, #8]
    oti->oti_runtime = next->t_run_time;
    e5f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    e5f4:	f8cc 300c 	str.w	r3, [ip, #12]
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    e5f8:	6a2b      	ldr	r3, [r5, #32]
    e5fa:	f8cc 3010 	str.w	r3, [ip, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
        next->t_sanity_check.sc_checkin_itvl;
    e5fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    e600:	4413      	add	r3, r2
    e602:	f8cc 3014 	str.w	r3, [ip, #20]
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    e606:	2220      	movs	r2, #32
    e608:	6929      	ldr	r1, [r5, #16]
    e60a:	f10c 0018 	add.w	r0, ip, #24
    e60e:	f002 ff6d 	bl	114ec <strncpy>

    return (next);
}
    e612:	4628      	mov	r0, r5
    e614:	bd38      	pop	{r3, r4, r5, pc}
    e616:	bf00      	nop
    e618:	deadbeef 	.word	0xdeadbeef
    e61c:	20003d64 	.word	0x20003d64

0000e620 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    e620:	b430      	push	{r4, r5}
    e622:	b084      	sub	sp, #16
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    e624:	09c4      	lsrs	r4, r0, #7
    e626:	9400      	str	r4, [sp, #0]
    e628:	2300      	movs	r3, #0
    e62a:	9301      	str	r3, [sp, #4]
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    e62c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    e630:	f641 6084 	movw	r0, #7812	; 0x1e84
    e634:	fb00 f303 	mul.w	r3, r0, r3
    e638:	9302      	str	r3, [sp, #8]
    os_timeradd(base, &tvdelta, result);
    e63a:	6848      	ldr	r0, [r1, #4]
    e63c:	680d      	ldr	r5, [r1, #0]
    e63e:	1964      	adds	r4, r4, r5
    e640:	f140 0000 	adc.w	r0, r0, #0
    e644:	6014      	str	r4, [r2, #0]
    e646:	6050      	str	r0, [r2, #4]
    e648:	6889      	ldr	r1, [r1, #8]
    e64a:	440b      	add	r3, r1
    e64c:	6093      	str	r3, [r2, #8]
    e64e:	4908      	ldr	r1, [pc, #32]	; (e670 <os_deltatime+0x50>)
    e650:	428b      	cmp	r3, r1
    e652:	dd09      	ble.n	e668 <os_deltatime+0x48>
    e654:	3401      	adds	r4, #1
    e656:	f140 0000 	adc.w	r0, r0, #0
    e65a:	6014      	str	r4, [r2, #0]
    e65c:	6050      	str	r0, [r2, #4]
    e65e:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
    e662:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    e666:	6093      	str	r3, [r2, #8]
}
    e668:	b004      	add	sp, #16
    e66a:	bc30      	pop	{r4, r5}
    e66c:	4770      	bx	lr
    e66e:	bf00      	nop
    e670:	000f423f 	.word	0x000f423f

0000e674 <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
    e674:	b538      	push	{r3, r4, r5, lr}
    e676:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    e678:	4b05      	ldr	r3, [pc, #20]	; (e690 <os_time_change_notify+0x1c>)
    e67a:	681c      	ldr	r4, [r3, #0]
    e67c:	e004      	b.n	e688 <os_time_change_notify+0x14>
        listener->tcl_fn(info, listener->tcl_arg);
    e67e:	6823      	ldr	r3, [r4, #0]
    e680:	6861      	ldr	r1, [r4, #4]
    e682:	4628      	mov	r0, r5
    e684:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    e686:	68a4      	ldr	r4, [r4, #8]
    e688:	2c00      	cmp	r4, #0
    e68a:	d1f8      	bne.n	e67e <os_time_change_notify+0xa>
    }
}
    e68c:	bd38      	pop	{r3, r4, r5, pc}
    e68e:	bf00      	nop
    e690:	20001350 	.word	0x20001350

0000e694 <os_time_tick>:
{
    e694:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
    e696:	1e04      	subs	r4, r0, #0
    e698:	db0d      	blt.n	e6b6 <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
    e69a:	f7fe fd8b 	bl	d1b4 <os_arch_save_sr>
    e69e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    e6a0:	4911      	ldr	r1, [pc, #68]	; (e6e8 <os_time_tick+0x54>)
    e6a2:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    e6a4:	18a3      	adds	r3, r4, r2
    e6a6:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    e6a8:	ea93 0f02 	teq	r3, r2
    e6ac:	d409      	bmi.n	e6c2 <os_time_tick+0x2e>
    OS_EXIT_CRITICAL(sr);
    e6ae:	4628      	mov	r0, r5
    e6b0:	f7fe fd86 	bl	d1c0 <os_arch_restore_sr>
}
    e6b4:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    e6b6:	2300      	movs	r3, #0
    e6b8:	461a      	mov	r2, r3
    e6ba:	4619      	mov	r1, r3
    e6bc:	4618      	mov	r0, r3
    e6be:	f7fe fe4f 	bl	d360 <__assert_func>
        delta = g_os_time - basetod.ostime;
    e6c2:	4e0a      	ldr	r6, [pc, #40]	; (e6ec <os_time_tick+0x58>)
    e6c4:	4631      	mov	r1, r6
    e6c6:	f851 4b08 	ldr.w	r4, [r1], #8
    e6ca:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    e6cc:	460a      	mov	r2, r1
    e6ce:	4620      	mov	r0, r4
    e6d0:	f7ff ffa6 	bl	e620 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    e6d4:	f106 0118 	add.w	r1, r6, #24
    e6d8:	460a      	mov	r2, r1
    e6da:	4620      	mov	r0, r4
    e6dc:	f7ff ffa0 	bl	e620 <os_deltatime>
        basetod.ostime = g_os_time;
    e6e0:	4b01      	ldr	r3, [pc, #4]	; (e6e8 <os_time_tick+0x54>)
    e6e2:	681b      	ldr	r3, [r3, #0]
    e6e4:	6033      	str	r3, [r6, #0]
    e6e6:	e7e2      	b.n	e6ae <os_time_tick+0x1a>
    e6e8:	20003da0 	.word	0x20003da0
    e6ec:	20003d70 	.word	0x20003d70

0000e6f0 <os_time_get>:
}
    e6f0:	4b01      	ldr	r3, [pc, #4]	; (e6f8 <os_time_get+0x8>)
    e6f2:	6818      	ldr	r0, [r3, #0]
    e6f4:	4770      	bx	lr
    e6f6:	bf00      	nop
    e6f8:	20003da0 	.word	0x20003da0

0000e6fc <os_time_advance>:
{
    e6fc:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    e6fe:	1e04      	subs	r4, r0, #0
    e700:	db02      	blt.n	e708 <os_time_advance+0xc>
    if (ticks > 0) {
    e702:	2c00      	cmp	r4, #0
    e704:	dc06      	bgt.n	e714 <os_time_advance+0x18>
}
    e706:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    e708:	2300      	movs	r3, #0
    e70a:	461a      	mov	r2, r3
    e70c:	4619      	mov	r1, r3
    e70e:	4618      	mov	r0, r3
    e710:	f7fe fe26 	bl	d360 <__assert_func>
        if (!os_started()) {
    e714:	f7fe fede 	bl	d4d4 <os_started>
    e718:	b920      	cbnz	r0, e724 <os_time_advance+0x28>
            g_os_time += ticks;
    e71a:	4b08      	ldr	r3, [pc, #32]	; (e73c <os_time_advance+0x40>)
    e71c:	6818      	ldr	r0, [r3, #0]
    e71e:	4420      	add	r0, r4
    e720:	6018      	str	r0, [r3, #0]
    e722:	e7f0      	b.n	e706 <os_time_advance+0xa>
            os_time_tick(ticks);
    e724:	4620      	mov	r0, r4
    e726:	f7ff ffb5 	bl	e694 <os_time_tick>
            os_callout_tick();
    e72a:	f7ff f80f 	bl	d74c <os_callout_tick>
            os_sched_os_timer_exp();
    e72e:	f7ff fd99 	bl	e264 <os_sched_os_timer_exp>
            os_sched(NULL);
    e732:	2000      	movs	r0, #0
    e734:	f7ff fdda 	bl	e2ec <os_sched>
}
    e738:	e7e5      	b.n	e706 <os_time_advance+0xa>
    e73a:	bf00      	nop
    e73c:	20003da0 	.word	0x20003da0

0000e740 <os_time_delay>:
    if (osticks > 0) {
    e740:	b900      	cbnz	r0, e744 <os_time_delay+0x4>
    e742:	4770      	bx	lr
{
    e744:	b538      	push	{r3, r4, r5, lr}
    e746:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    e748:	f7fe fd34 	bl	d1b4 <os_arch_save_sr>
    e74c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    e74e:	f7ff fcb9 	bl	e0c4 <os_sched_get_current_task>
    e752:	4621      	mov	r1, r4
    e754:	f7ff fcc2 	bl	e0dc <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    e758:	4628      	mov	r0, r5
    e75a:	f7fe fd31 	bl	d1c0 <os_arch_restore_sr>
        os_sched(NULL);
    e75e:	2000      	movs	r0, #0
    e760:	f7ff fdc4 	bl	e2ec <os_sched>
}
    e764:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e768 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    e768:	b570      	push	{r4, r5, r6, lr}
    e76a:	4605      	mov	r5, r0
    e76c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    e76e:	f7fe fd21 	bl	d1b4 <os_arch_save_sr>
    e772:	4606      	mov	r6, r0
    if (tv != NULL) {
    e774:	b145      	cbz	r5, e788 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    e776:	f7ff ffbb 	bl	e6f0 <os_time_get>
    e77a:	4908      	ldr	r1, [pc, #32]	; (e79c <os_gettimeofday+0x34>)
    e77c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    e780:	462a      	mov	r2, r5
    e782:	1ac0      	subs	r0, r0, r3
    e784:	f7ff ff4c 	bl	e620 <os_deltatime>
    }

    if (tz != NULL) {
    e788:	b114      	cbz	r4, e790 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    e78a:	4b04      	ldr	r3, [pc, #16]	; (e79c <os_gettimeofday+0x34>)
    e78c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    e78e:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    e790:	4630      	mov	r0, r6
    e792:	f7fe fd15 	bl	d1c0 <os_arch_restore_sr>

    return (0);
}
    e796:	2000      	movs	r0, #0
    e798:	bd70      	pop	{r4, r5, r6, pc}
    e79a:	bf00      	nop
    e79c:	20003d70 	.word	0x20003d70

0000e7a0 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    e7a0:	4b04      	ldr	r3, [pc, #16]	; (e7b4 <os_time_is_set+0x14>)
    e7a2:	699a      	ldr	r2, [r3, #24]
    e7a4:	69db      	ldr	r3, [r3, #28]
    e7a6:	2a01      	cmp	r2, #1
    e7a8:	f173 0300 	sbcs.w	r3, r3, #0
}
    e7ac:	bfac      	ite	ge
    e7ae:	2001      	movge	r0, #1
    e7b0:	2000      	movlt	r0, #0
    e7b2:	4770      	bx	lr
    e7b4:	20003d70 	.word	0x20003d70

0000e7b8 <os_time_populate_info>:
{
    e7b8:	b510      	push	{r4, lr}
    e7ba:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
    e7bc:	4608      	mov	r0, r1
    e7be:	b181      	cbz	r1, e7e2 <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
    e7c0:	b1a0      	cbz	r0, e7ec <os_time_populate_info+0x34>
    if (new_tz == NULL) {
    e7c2:	b1aa      	cbz	r2, e7f0 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
    e7c4:	4b0b      	ldr	r3, [pc, #44]	; (e7f4 <os_time_populate_info+0x3c>)
    e7c6:	f103 0118 	add.w	r1, r3, #24
    e7ca:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
    e7cc:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
    e7ce:	3328      	adds	r3, #40	; 0x28
    e7d0:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
    e7d2:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
    e7d4:	f7ff ffe4 	bl	e7a0 <os_time_is_set>
    e7d8:	f080 0001 	eor.w	r0, r0, #1
    e7dc:	7420      	strb	r0, [r4, #16]
    return 0;
    e7de:	2000      	movs	r0, #0
}
    e7e0:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
    e7e2:	2a00      	cmp	r2, #0
    e7e4:	d1ec      	bne.n	e7c0 <os_time_populate_info+0x8>
        return SYS_EINVAL;
    e7e6:	f06f 0001 	mvn.w	r0, #1
    e7ea:	e7f9      	b.n	e7e0 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
    e7ec:	4802      	ldr	r0, [pc, #8]	; (e7f8 <os_time_populate_info+0x40>)
    e7ee:	e7e8      	b.n	e7c2 <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
    e7f0:	4a02      	ldr	r2, [pc, #8]	; (e7fc <os_time_populate_info+0x44>)
    e7f2:	e7e7      	b.n	e7c4 <os_time_populate_info+0xc>
    e7f4:	20003d70 	.word	0x20003d70
    e7f8:	20003d88 	.word	0x20003d88
    e7fc:	20003d98 	.word	0x20003d98

0000e800 <os_settimeofday>:
{
    e800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e804:	b087      	sub	sp, #28
    e806:	4604      	mov	r4, r0
    e808:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
    e80a:	f7fe fcd3 	bl	d1b4 <os_arch_save_sr>
    e80e:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
    e810:	462a      	mov	r2, r5
    e812:	4621      	mov	r1, r4
    e814:	a801      	add	r0, sp, #4
    e816:	f7ff ffcf 	bl	e7b8 <os_time_populate_info>
    e81a:	4606      	mov	r6, r0
    if (utctime != NULL) {
    e81c:	b1bc      	cbz	r4, e84e <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
    e81e:	f7ff ff67 	bl	e6f0 <os_time_get>
    e822:	f8df 804c 	ldr.w	r8, [pc, #76]	; e870 <os_settimeofday+0x70>
    e826:	4641      	mov	r1, r8
    e828:	f851 3b08 	ldr.w	r3, [r1], #8
    e82c:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    e830:	460a      	mov	r2, r1
    e832:	4648      	mov	r0, r9
    e834:	f7ff fef4 	bl	e620 <os_deltatime>
        basetod.utctime = *utctime;
    e838:	f108 0c18 	add.w	ip, r8, #24
    e83c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e840:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
    e844:	f8d8 0000 	ldr.w	r0, [r8]
    e848:	4448      	add	r0, r9
    e84a:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
    e84e:	b115      	cbz	r5, e856 <os_settimeofday+0x56>
        basetod.timezone = *tz;
    e850:	6828      	ldr	r0, [r5, #0]
    e852:	4b07      	ldr	r3, [pc, #28]	; (e870 <os_settimeofday+0x70>)
    e854:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
    e856:	4638      	mov	r0, r7
    e858:	f7fe fcb2 	bl	d1c0 <os_arch_restore_sr>
    if (notify) {
    e85c:	b11e      	cbz	r6, e866 <os_settimeofday+0x66>
}
    e85e:	2000      	movs	r0, #0
    e860:	b007      	add	sp, #28
    e862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
    e866:	a801      	add	r0, sp, #4
    e868:	f7ff ff04 	bl	e674 <os_time_change_notify>
    e86c:	e7f7      	b.n	e85e <os_settimeofday+0x5e>
    e86e:	bf00      	nop
    e870:	20003d70 	.word	0x20003d70

0000e874 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    e874:	b5f0      	push	{r4, r5, r6, r7, lr}
    e876:	b085      	sub	sp, #20
    e878:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    e87a:	f7fe fc9b 	bl	d1b4 <os_arch_save_sr>
    e87e:	4607      	mov	r7, r0
  tv = basetod.uptime;
    e880:	4d0a      	ldr	r5, [pc, #40]	; (e8ac <os_get_uptime+0x38>)
    e882:	466c      	mov	r4, sp
    e884:	f105 0308 	add.w	r3, r5, #8
    e888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e88a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    e88e:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    e890:	f7ff ff2e 	bl	e6f0 <os_time_get>
    e894:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    e896:	4638      	mov	r0, r7
    e898:	f7fe fc92 	bl	d1c0 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    e89c:	4632      	mov	r2, r6
    e89e:	4621      	mov	r1, r4
    e8a0:	4628      	mov	r0, r5
    e8a2:	f7ff febd 	bl	e620 <os_deltatime>
}
    e8a6:	b005      	add	sp, #20
    e8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8aa:	bf00      	nop
    e8ac:	20003d70 	.word	0x20003d70

0000e8b0 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    e8b0:	b510      	push	{r4, lr}
    e8b2:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    e8b4:	4668      	mov	r0, sp
    e8b6:	f7ff ffdd 	bl	e874 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    e8ba:	9a00      	ldr	r2, [sp, #0]
    e8bc:	9c01      	ldr	r4, [sp, #4]
    e8be:	0163      	lsls	r3, r4, #5
    e8c0:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
    e8c4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    e8c8:	ebbc 0c02 	subs.w	ip, ip, r2
    e8cc:	eb63 0304 	sbc.w	r3, r3, r4
    e8d0:	0259      	lsls	r1, r3, #9
    e8d2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
    e8d6:	ea4f 204c 	mov.w	r0, ip, lsl #9
    e8da:	1883      	adds	r3, r0, r2
    e8dc:	eb44 0101 	adc.w	r1, r4, r1
    e8e0:	ea4f 1c81 	mov.w	ip, r1, lsl #6
    e8e4:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
    e8e8:	0198      	lsls	r0, r3, #6
    e8ea:	1ac0      	subs	r0, r0, r3
    e8ec:	eb6c 0101 	sbc.w	r1, ip, r1
    e8f0:	1880      	adds	r0, r0, r2
    e8f2:	eb44 0401 	adc.w	r4, r4, r1
    e8f6:	9902      	ldr	r1, [sp, #8]
    e8f8:	1840      	adds	r0, r0, r1
}
    e8fa:	eb44 71e1 	adc.w	r1, r4, r1, asr #31
    e8fe:	b004      	add	sp, #16
    e900:	bd10      	pop	{r4, pc}

0000e902 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    e902:	b538      	push	{r3, r4, r5, lr}
    e904:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    e906:	0e41      	lsrs	r1, r0, #25
    e908:	01c4      	lsls	r4, r0, #7
    e90a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e90e:	2300      	movs	r3, #0
    e910:	4620      	mov	r0, r4
    e912:	f013 fc3b 	bl	2218c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    e916:	6028      	str	r0, [r5, #0]
    return 0;
}
    e918:	2000      	movs	r0, #0
    e91a:	bd38      	pop	{r3, r4, r5, pc}

0000e91c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    e91c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    e920:	4832      	ldr	r0, [pc, #200]	; (e9ec <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    e922:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    e924:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    e926:	f380 8814 	msr	CONTROL, r0
        ISB
    e92a:	f3bf 8f6f 	isb	sy
        BX      LR
    e92e:	4770      	bx	lr

0000e930 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    e930:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    e934:	4770      	bx	lr

0000e936 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    e936:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    e93a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    e93c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    e940:	b951      	cbnz	r1, e958 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e942:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e946:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    e948:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    e94e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    e952:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    e956:	4770      	bx	lr

0000e958 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e958:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    e95a:	4a25      	ldr	r2, [pc, #148]	; (e9f0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    e95c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    e95e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    e960:	d809      	bhi.n	e976 <SVC_Done>

        LDR     R4,=SVC_Table-4
    e962:	4c24      	ldr	r4, [pc, #144]	; (e9f4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    e964:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e968:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    e96c:	47a0      	blx	r4

        MRS     R12,PSP
    e96e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    e972:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000e976 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    e97a:	4770      	bx	lr

0000e97c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e97c:	4b1e      	ldr	r3, [pc, #120]	; (e9f8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    e97e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    e980:	4b1e      	ldr	r3, [pc, #120]	; (e9fc <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    e982:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    e984:	4291      	cmp	r1, r2
        IT      EQ
    e986:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    e988:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    e98a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    e98e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    e992:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    e994:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    e998:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    e99c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    e9a0:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    e9a2:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    e9a6:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    e9aa:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    e9ae:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    e9b0:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    e9b4:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    e9b8:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    e9bc:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    e9c0:	4770      	bx	lr

0000e9c2 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e9c2:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    e9c4:	f7fe fbe6 	bl	d194 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    e9cc:	4770      	bx	lr

0000e9ce <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    e9ce:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    e9d2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    e9d4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    e9d8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    e9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    e9e0:	4668      	mov	r0, sp
        BL      os_default_irq
    e9e2:	f7fe fce3 	bl	d3ac <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    e9e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    e9ea:	4770      	bx	lr
        LDR     R0,=os_flags
    e9ec:	20001d9c 	.word	0x20001d9c
        LDR     R2,=SVC_Count
    e9f0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    e9f4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e9f8:	20001340 	.word	0x20001340
        LDR     R3,=g_current_task      /* Get current task */
    e9fc:	20003d5c 	.word	0x20003d5c

0000ea00 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    ea00:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    ea02:	2000      	movs	r0, #0
    ea04:	6018      	str	r0, [r3, #0]
    ea06:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    ea08:	6098      	str	r0, [r3, #8]
    ea0a:	60d8      	str	r0, [r3, #12]
    ea0c:	6118      	str	r0, [r3, #16]
    ea0e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    ea10:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    ea12:	611a      	str	r2, [r3, #16]

    return (0);
}
    ea14:	4770      	bx	lr

0000ea16 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    ea16:	b538      	push	{r3, r4, r5, lr}
    ea18:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    ea1a:	f7fe fbcb 	bl	d1b4 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    ea1e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    ea20:	b114      	cbz	r4, ea28 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    ea22:	6863      	ldr	r3, [r4, #4]
    ea24:	602b      	str	r3, [r5, #0]
    ea26:	b12b      	cbz	r3, ea34 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    ea28:	f7fe fbca 	bl	d1c0 <os_arch_restore_sr>

    if (mp) {
    ea2c:	b104      	cbz	r4, ea30 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    ea2e:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    ea30:	4620      	mov	r0, r4
    ea32:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    ea34:	606d      	str	r5, [r5, #4]
    ea36:	e7f7      	b.n	ea28 <os_mqueue_get+0x12>

0000ea38 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    ea38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    ea3a:	7953      	ldrb	r3, [r2, #5]
    ea3c:	2b07      	cmp	r3, #7
    ea3e:	d916      	bls.n	ea6e <os_mqueue_put+0x36>
    ea40:	4605      	mov	r5, r0
    ea42:	460e      	mov	r6, r1
    ea44:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    ea46:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    ea4a:	f7fe fbb3 	bl	d1b4 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    ea4e:	2300      	movs	r3, #0
    ea50:	f844 3f14 	str.w	r3, [r4, #20]!
    ea54:	686b      	ldr	r3, [r5, #4]
    ea56:	601f      	str	r7, [r3, #0]
    ea58:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    ea5a:	f7fe fbb1 	bl	d1c0 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    ea5e:	b146      	cbz	r6, ea72 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    ea60:	f105 0108 	add.w	r1, r5, #8
    ea64:	4630      	mov	r0, r6
    ea66:	f7fe ffaf 	bl	d9c8 <os_eventq_put>
    }

    return (0);
    ea6a:	2000      	movs	r0, #0
    ea6c:	e000      	b.n	ea70 <os_mqueue_put+0x38>
err:
    return (rc);
    ea6e:	2002      	movs	r0, #2
}
    ea70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    ea72:	2000      	movs	r0, #0
    ea74:	e7fc      	b.n	ea70 <os_mqueue_put+0x38>

0000ea76 <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    ea76:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    ea78:	8803      	ldrh	r3, [r0, #0]
    ea7a:	428b      	cmp	r3, r1
    ea7c:	d310      	bcc.n	eaa0 <os_mbuf_get+0x2a>
    ea7e:	4604      	mov	r4, r0
    ea80:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    ea82:	6840      	ldr	r0, [r0, #4]
    ea84:	f7ff f898 	bl	dbb8 <os_memblock_get>
    if (!om) {
    ea88:	b148      	cbz	r0, ea9e <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    ea8a:	2300      	movs	r3, #0
    ea8c:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    ea8e:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    ea90:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    ea92:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    ea94:	f100 0110 	add.w	r1, r0, #16
    ea98:	440d      	add	r5, r1
    ea9a:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    ea9c:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    ea9e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    eaa0:	2000      	movs	r0, #0
    return om;
    eaa2:	e7fc      	b.n	ea9e <os_mbuf_get+0x28>

0000eaa4 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    eaa4:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    eaa6:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    eaaa:	8803      	ldrh	r3, [r0, #0]
    eaac:	42ab      	cmp	r3, r5
    eaae:	d30e      	bcc.n	eace <os_mbuf_get_pkthdr+0x2a>
    eab0:	2dff      	cmp	r5, #255	; 0xff
    eab2:	d80e      	bhi.n	ead2 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    eab4:	2100      	movs	r1, #0
    eab6:	f7ff ffde 	bl	ea76 <os_mbuf_get>
    if (om) {
    eaba:	b138      	cbz	r0, eacc <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    eabc:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    eabe:	6803      	ldr	r3, [r0, #0]
    eac0:	442b      	add	r3, r5
    eac2:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    eac4:	2300      	movs	r3, #0
    eac6:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    eac8:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    eaca:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    eacc:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    eace:	2000      	movs	r0, #0
    ead0:	e7fc      	b.n	eacc <os_mbuf_get_pkthdr+0x28>
    ead2:	2000      	movs	r0, #0
    return om;
    ead4:	e7fa      	b.n	eacc <os_mbuf_get_pkthdr+0x28>

0000ead6 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    ead6:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    ead8:	6883      	ldr	r3, [r0, #8]
    eada:	b123      	cbz	r3, eae6 <os_mbuf_free+0x10>
    eadc:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    eade:	6858      	ldr	r0, [r3, #4]
    eae0:	f7ff f892 	bl	dc08 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    eae4:	bd08      	pop	{r3, pc}
    rc = 0;
    eae6:	2000      	movs	r0, #0
    return (rc);
    eae8:	e7fc      	b.n	eae4 <os_mbuf_free+0xe>

0000eaea <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    eaea:	b158      	cbz	r0, eb04 <os_mbuf_free_chain+0x1a>
{
    eaec:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    eaee:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    eaf0:	f7ff fff1 	bl	ead6 <os_mbuf_free>
        if (rc != 0) {
    eaf4:	4603      	mov	r3, r0
    eaf6:	b918      	cbnz	r0, eb00 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    eaf8:	4620      	mov	r0, r4
    while (om != NULL) {
    eafa:	2c00      	cmp	r4, #0
    eafc:	d1f7      	bne.n	eaee <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    eafe:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    eb00:	4618      	mov	r0, r3
    eb02:	bd10      	pop	{r4, pc}
    rc = 0;
    eb04:	2300      	movs	r3, #0
}
    eb06:	4618      	mov	r0, r3
    eb08:	4770      	bx	lr

0000eb0a <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    eb0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    eb0e:	2800      	cmp	r0, #0
    eb10:	d04b      	beq.n	ebaa <os_mbuf_append+0xa0>
    eb12:	460f      	mov	r7, r1
    eb14:	4691      	mov	r9, r2
    eb16:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    eb18:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    eb1c:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    eb1e:	461e      	mov	r6, r3
    eb20:	68db      	ldr	r3, [r3, #12]
    eb22:	2b00      	cmp	r3, #0
    eb24:	d1fb      	bne.n	eb1e <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    eb26:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    eb28:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    eb2a:	f106 0410 	add.w	r4, r6, #16
    eb2e:	881b      	ldrh	r3, [r3, #0]
    eb30:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    eb32:	6830      	ldr	r0, [r6, #0]
    eb34:	88f3      	ldrh	r3, [r6, #6]
    eb36:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    eb38:	1a24      	subs	r4, r4, r0
    eb3a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    eb3c:	b164      	cbz	r4, eb58 <os_mbuf_append+0x4e>
        if (space > remainder) {
    eb3e:	454c      	cmp	r4, r9
    eb40:	dd00      	ble.n	eb44 <os_mbuf_append+0x3a>
            space = remainder;
    eb42:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    eb44:	4622      	mov	r2, r4
    eb46:	4639      	mov	r1, r7
    eb48:	f002 fc96 	bl	11478 <memcpy>

        last->om_len += space;
    eb4c:	88f3      	ldrh	r3, [r6, #6]
    eb4e:	4423      	add	r3, r4
    eb50:	80f3      	strh	r3, [r6, #6]
        data += space;
    eb52:	4427      	add	r7, r4
        remainder -= space;
    eb54:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    eb58:	2d00      	cmp	r5, #0
    eb5a:	dd16      	ble.n	eb8a <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    eb5c:	2100      	movs	r1, #0
    eb5e:	4640      	mov	r0, r8
    eb60:	f7ff ff89 	bl	ea76 <os_mbuf_get>
        if (!new) {
    eb64:	4604      	mov	r4, r0
    eb66:	b180      	cbz	r0, eb8a <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    eb68:	f8b8 2000 	ldrh.w	r2, [r8]
    eb6c:	42aa      	cmp	r2, r5
    eb6e:	bfa8      	it	ge
    eb70:	462a      	movge	r2, r5
    eb72:	b292      	uxth	r2, r2
    eb74:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    eb76:	4639      	mov	r1, r7
    eb78:	6800      	ldr	r0, [r0, #0]
    eb7a:	f002 fc7d 	bl	11478 <memcpy>
        data += new->om_len;
    eb7e:	88e3      	ldrh	r3, [r4, #6]
    eb80:	441f      	add	r7, r3
        remainder -= new->om_len;
    eb82:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    eb84:	60f4      	str	r4, [r6, #12]
        last = new;
    eb86:	4626      	mov	r6, r4
    eb88:	e7e6      	b.n	eb58 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    eb8a:	f89a 3005 	ldrb.w	r3, [sl, #5]
    eb8e:	2b07      	cmp	r3, #7
    eb90:	d907      	bls.n	eba2 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    eb92:	eba9 0905 	sub.w	r9, r9, r5
    eb96:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    eb9a:	fa13 f989 	uxtah	r9, r3, r9
    eb9e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    eba2:	b925      	cbnz	r5, ebae <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    eba4:	4628      	mov	r0, r5
    eba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    ebaa:	2502      	movs	r5, #2
    ebac:	e7fa      	b.n	eba4 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    ebae:	2501      	movs	r5, #1
    ebb0:	e7f8      	b.n	eba4 <os_mbuf_append+0x9a>

0000ebb2 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    ebb2:	b178      	cbz	r0, ebd4 <os_mbuf_off+0x22>
{
    ebb4:	b410      	push	{r4}
    ebb6:	e002      	b.n	ebbe <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    ebb8:	1ac9      	subs	r1, r1, r3
        cur = next;
    ebba:	4620      	mov	r0, r4
        if (cur == NULL) {
    ebbc:	b13c      	cbz	r4, ebce <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    ebbe:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    ebc0:	88c3      	ldrh	r3, [r0, #6]
    ebc2:	428b      	cmp	r3, r1
    ebc4:	dc02      	bgt.n	ebcc <os_mbuf_off+0x1a>
    ebc6:	d1f7      	bne.n	ebb8 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    ebc8:	2c00      	cmp	r4, #0
    ebca:	d1f5      	bne.n	ebb8 <os_mbuf_off+0x6>
            *out_off = off;
    ebcc:	8011      	strh	r1, [r2, #0]
    }
}
    ebce:	f85d 4b04 	ldr.w	r4, [sp], #4
    ebd2:	4770      	bx	lr
    ebd4:	4770      	bx	lr

0000ebd6 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    ebd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebd8:	4604      	mov	r4, r0
    ebda:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    ebdc:	4616      	mov	r6, r2
    ebde:	b91a      	cbnz	r2, ebe8 <os_mbuf_copydata+0x12>
        return 0;
    ebe0:	4610      	mov	r0, r2
    ebe2:	e01e      	b.n	ec22 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    ebe4:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    ebe6:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    ebe8:	2900      	cmp	r1, #0
    ebea:	dd13      	ble.n	ec14 <os_mbuf_copydata+0x3e>
        if (!m) {
    ebec:	b1ec      	cbz	r4, ec2a <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    ebee:	88e2      	ldrh	r2, [r4, #6]
    ebf0:	428a      	cmp	r2, r1
    ebf2:	ddf7      	ble.n	ebe4 <os_mbuf_copydata+0xe>
    ebf4:	e00e      	b.n	ec14 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    ebf6:	88e5      	ldrh	r5, [r4, #6]
    ebf8:	1a6d      	subs	r5, r5, r1
    ebfa:	42b5      	cmp	r5, r6
    ebfc:	bfa8      	it	ge
    ebfe:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    ec00:	6823      	ldr	r3, [r4, #0]
    ec02:	462a      	mov	r2, r5
    ec04:	4419      	add	r1, r3
    ec06:	4638      	mov	r0, r7
    ec08:	f002 fc36 	bl	11478 <memcpy>
        len -= count;
    ec0c:	1b76      	subs	r6, r6, r5
        udst += count;
    ec0e:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    ec10:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    ec12:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    ec14:	2e00      	cmp	r6, #0
    ec16:	dd01      	ble.n	ec1c <os_mbuf_copydata+0x46>
    ec18:	2c00      	cmp	r4, #0
    ec1a:	d1ec      	bne.n	ebf6 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    ec1c:	2e00      	cmp	r6, #0
    ec1e:	dc01      	bgt.n	ec24 <os_mbuf_copydata+0x4e>
    ec20:	2000      	movs	r0, #0
}
    ec22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    ec24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ec28:	e7fb      	b.n	ec22 <os_mbuf_copydata+0x4c>
            return (-1);
    ec2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ec2e:	e7f8      	b.n	ec22 <os_mbuf_copydata+0x4c>

0000ec30 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    ec30:	2800      	cmp	r0, #0
    ec32:	d053      	beq.n	ecdc <os_mbuf_adj+0xac>
{
    ec34:	b510      	push	{r4, lr}
    ec36:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    ec38:	2900      	cmp	r1, #0
    ec3a:	db1b      	blt.n	ec74 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    ec3c:	4603      	mov	r3, r0
    int len = req_len;
    ec3e:	460a      	mov	r2, r1
    ec40:	e005      	b.n	ec4e <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    ec42:	1a80      	subs	r0, r0, r2
    ec44:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    ec46:	6818      	ldr	r0, [r3, #0]
    ec48:	4402      	add	r2, r0
    ec4a:	601a      	str	r2, [r3, #0]
                len = 0;
    ec4c:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    ec4e:	b14b      	cbz	r3, ec64 <os_mbuf_adj+0x34>
    ec50:	2a00      	cmp	r2, #0
    ec52:	dd07      	ble.n	ec64 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    ec54:	88d8      	ldrh	r0, [r3, #6]
    ec56:	4290      	cmp	r0, r2
    ec58:	dcf3      	bgt.n	ec42 <os_mbuf_adj+0x12>
                len -= m->om_len;
    ec5a:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    ec5c:	2000      	movs	r0, #0
    ec5e:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    ec60:	68db      	ldr	r3, [r3, #12]
    ec62:	e7f4      	b.n	ec4e <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    ec64:	7963      	ldrb	r3, [r4, #5]
    ec66:	2b07      	cmp	r3, #7
    ec68:	d903      	bls.n	ec72 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    ec6a:	1a52      	subs	r2, r2, r1
    ec6c:	8a23      	ldrh	r3, [r4, #16]
    ec6e:	441a      	add	r2, r3
    ec70:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    ec72:	bd10      	pop	{r4, pc}
        len = -len;
    ec74:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    ec78:	4603      	mov	r3, r0
        count = 0;
    ec7a:	2200      	movs	r2, #0
            count += m->om_len;
    ec7c:	88d8      	ldrh	r0, [r3, #6]
    ec7e:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    ec80:	469c      	mov	ip, r3
    ec82:	68db      	ldr	r3, [r3, #12]
    ec84:	2b00      	cmp	r3, #0
    ec86:	d1f9      	bne.n	ec7c <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    ec88:	4570      	cmp	r0, lr
    ec8a:	da0d      	bge.n	eca8 <os_mbuf_adj+0x78>
        if (count < 0)
    ec8c:	188a      	adds	r2, r1, r2
    ec8e:	d41a      	bmi.n	ecc6 <os_mbuf_adj+0x96>
        if (OS_MBUF_IS_PKTHDR(m))
    ec90:	7963      	ldrb	r3, [r4, #5]
    ec92:	2b07      	cmp	r3, #7
    ec94:	d900      	bls.n	ec98 <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    ec96:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    ec98:	2c00      	cmp	r4, #0
    ec9a:	d0ea      	beq.n	ec72 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    ec9c:	88e3      	ldrh	r3, [r4, #6]
    ec9e:	4293      	cmp	r3, r2
    eca0:	da13      	bge.n	ecca <os_mbuf_adj+0x9a>
            count -= m->om_len;
    eca2:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    eca4:	68e4      	ldr	r4, [r4, #12]
    eca6:	e7f7      	b.n	ec98 <os_mbuf_adj+0x68>
            m->om_len -= len;
    eca8:	fa1f fe8e 	uxth.w	lr, lr
    ecac:	eba0 000e 	sub.w	r0, r0, lr
    ecb0:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    ecb4:	7963      	ldrb	r3, [r4, #5]
    ecb6:	2b07      	cmp	r3, #7
    ecb8:	d9db      	bls.n	ec72 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    ecba:	8a23      	ldrh	r3, [r4, #16]
    ecbc:	eba3 0e0e 	sub.w	lr, r3, lr
    ecc0:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    ecc4:	e7d5      	b.n	ec72 <os_mbuf_adj+0x42>
            count = 0;
    ecc6:	2200      	movs	r2, #0
    ecc8:	e7e2      	b.n	ec90 <os_mbuf_adj+0x60>
                m->om_len = count;
    ecca:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    eccc:	68e0      	ldr	r0, [r4, #12]
    ecce:	2800      	cmp	r0, #0
    ecd0:	d0cf      	beq.n	ec72 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    ecd2:	f7ff ff0a 	bl	eaea <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    ecd6:	2300      	movs	r3, #0
    ecd8:	60e3      	str	r3, [r4, #12]
    ecda:	e7ca      	b.n	ec72 <os_mbuf_adj+0x42>
    ecdc:	4770      	bx	lr

0000ecde <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    ecde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ece2:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    ece4:	1e1e      	subs	r6, r3, #0
    ece6:	dd2d      	ble.n	ed44 <os_mbuf_cmpf+0x66>
    ece8:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    ecea:	f10d 0206 	add.w	r2, sp, #6
    ecee:	f7ff ff60 	bl	ebb2 <os_mbuf_off>
    ecf2:	4604      	mov	r4, r0
    data_off = 0;
    ecf4:	f04f 0800 	mov.w	r8, #0
    ecf8:	e009      	b.n	ed0e <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    ecfa:	4445      	add	r5, r8
    ecfc:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    ed00:	45b0      	cmp	r8, r6
    ed02:	d027      	beq.n	ed54 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    ed04:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    ed06:	2300      	movs	r3, #0
    ed08:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    ed0c:	b1bc      	cbz	r4, ed3e <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    ed0e:	b1f4      	cbz	r4, ed4e <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    ed10:	eba6 0208 	sub.w	r2, r6, r8
    ed14:	88e3      	ldrh	r3, [r4, #6]
    ed16:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ed1a:	1a1b      	subs	r3, r3, r0
    ed1c:	429a      	cmp	r2, r3
    ed1e:	bfa8      	it	ge
    ed20:	461a      	movge	r2, r3
    ed22:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    ed24:	2d00      	cmp	r5, #0
    ed26:	d0e8      	beq.n	ecfa <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    ed28:	6823      	ldr	r3, [r4, #0]
    ed2a:	462a      	mov	r2, r5
    ed2c:	eb07 0108 	add.w	r1, r7, r8
    ed30:	4418      	add	r0, r3
    ed32:	f002 fb7d 	bl	11430 <memcmp>
            if (rc != 0) {
    ed36:	4603      	mov	r3, r0
    ed38:	2800      	cmp	r0, #0
    ed3a:	d0de      	beq.n	ecfa <os_mbuf_cmpf+0x1c>
    ed3c:	e003      	b.n	ed46 <os_mbuf_cmpf+0x68>
            return INT_MAX;
    ed3e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ed42:	e000      	b.n	ed46 <os_mbuf_cmpf+0x68>
        return 0;
    ed44:	2300      	movs	r3, #0
        }
    }
}
    ed46:	4618      	mov	r0, r3
    ed48:	b002      	add	sp, #8
    ed4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    ed4e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ed52:	e7f8      	b.n	ed46 <os_mbuf_cmpf+0x68>
            return 0;
    ed54:	2300      	movs	r3, #0
    ed56:	e7f6      	b.n	ed46 <os_mbuf_cmpf+0x68>

0000ed58 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    ed58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ed5c:	b083      	sub	sp, #12
    ed5e:	4681      	mov	r9, r0
    ed60:	4688      	mov	r8, r1
    ed62:	4617      	mov	r7, r2
    ed64:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    ed66:	f10d 0206 	add.w	r2, sp, #6
    ed6a:	f7ff ff22 	bl	ebb2 <os_mbuf_off>
    if (cur == NULL) {
    ed6e:	4605      	mov	r5, r0
    ed70:	b948      	cbnz	r0, ed86 <os_mbuf_copyinto+0x2e>
        return -1;
    ed72:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ed76:	e02d      	b.n	edd4 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    ed78:	b366      	cbz	r6, edd4 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    ed7a:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    ed7c:	b1ab      	cbz	r3, edaa <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    ed7e:	2200      	movs	r2, #0
    ed80:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    ed84:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    ed86:	88ec      	ldrh	r4, [r5, #6]
    ed88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ed8c:	1ae4      	subs	r4, r4, r3
    ed8e:	42b4      	cmp	r4, r6
    ed90:	bfa8      	it	ge
    ed92:	4634      	movge	r4, r6
        if (copylen > 0) {
    ed94:	2c00      	cmp	r4, #0
    ed96:	ddef      	ble.n	ed78 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    ed98:	6828      	ldr	r0, [r5, #0]
    ed9a:	4622      	mov	r2, r4
    ed9c:	4639      	mov	r1, r7
    ed9e:	4418      	add	r0, r3
    eda0:	f002 fb6a 	bl	11478 <memcpy>
            sptr += copylen;
    eda4:	4427      	add	r7, r4
            len -= copylen;
    eda6:	1b36      	subs	r6, r6, r4
            copylen = 0;
    eda8:	e7e6      	b.n	ed78 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    edaa:	b2b2      	uxth	r2, r6
    edac:	4639      	mov	r1, r7
    edae:	4628      	mov	r0, r5
    edb0:	f7ff feab 	bl	eb0a <os_mbuf_append>
    if (rc != 0) {
    edb4:	b968      	cbnz	r0, edd2 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    edb6:	f899 2005 	ldrb.w	r2, [r9, #5]
    edba:	2a07      	cmp	r2, #7
    edbc:	d90e      	bls.n	eddc <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    edbe:	4446      	add	r6, r8
    edc0:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    edc4:	4546      	cmp	r6, r8
    edc6:	bfb8      	it	lt
    edc8:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    edca:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    edce:	4606      	mov	r6, r0
    edd0:	e000      	b.n	edd4 <os_mbuf_copyinto+0x7c>
        return rc;
    edd2:	4606      	mov	r6, r0
}
    edd4:	4630      	mov	r0, r6
    edd6:	b003      	add	sp, #12
    edd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    eddc:	4606      	mov	r6, r0
    edde:	e7f9      	b.n	edd4 <os_mbuf_copyinto+0x7c>

0000ede0 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    ede0:	b570      	push	{r4, r5, r6, lr}
    ede2:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    ede4:	6880      	ldr	r0, [r0, #8]
    ede6:	8803      	ldrh	r3, [r0, #0]
    ede8:	428b      	cmp	r3, r1
    edea:	d325      	bcc.n	ee38 <os_mbuf_extend+0x58>
    edec:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    edee:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    edf0:	461c      	mov	r4, r3
    edf2:	68db      	ldr	r3, [r3, #12]
    edf4:	2b00      	cmp	r3, #0
    edf6:	d1fb      	bne.n	edf0 <os_mbuf_extend+0x10>
    omp = om->om_omp;
    edf8:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    edfa:	f104 0310 	add.w	r3, r4, #16
    edfe:	8812      	ldrh	r2, [r2, #0]
    ee00:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    ee02:	6822      	ldr	r2, [r4, #0]
    ee04:	88e1      	ldrh	r1, [r4, #6]
    ee06:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ee08:	1a9b      	subs	r3, r3, r2
    ee0a:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    ee0c:	429d      	cmp	r5, r3
    ee0e:	d80b      	bhi.n	ee28 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    ee10:	6820      	ldr	r0, [r4, #0]
    ee12:	88e3      	ldrh	r3, [r4, #6]
    ee14:	4418      	add	r0, r3
    last->om_len += len;
    ee16:	442b      	add	r3, r5
    ee18:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    ee1a:	7973      	ldrb	r3, [r6, #5]
    ee1c:	2b07      	cmp	r3, #7
    ee1e:	d902      	bls.n	ee26 <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    ee20:	8a33      	ldrh	r3, [r6, #16]
    ee22:	441d      	add	r5, r3
    ee24:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    ee26:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    ee28:	2100      	movs	r1, #0
    ee2a:	f7ff fe24 	bl	ea76 <os_mbuf_get>
        if (newm == NULL) {
    ee2e:	2800      	cmp	r0, #0
    ee30:	d0f9      	beq.n	ee26 <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    ee32:	60e0      	str	r0, [r4, #12]
        last = newm;
    ee34:	4604      	mov	r4, r0
    ee36:	e7eb      	b.n	ee10 <os_mbuf_extend+0x30>
        return NULL;
    ee38:	2000      	movs	r0, #0
    ee3a:	e7f4      	b.n	ee26 <os_mbuf_extend+0x46>
    ee3c:	0000      	movs	r0, r0
	...

0000ee40 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    ee40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    ee44:	b170      	cbz	r0, ee64 <tdma_superframe_slot_cb+0x24>
    return ev->ev.ev_arg;
    ee46:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    ee48:	b196      	cbz	r6, ee70 <tdma_superframe_slot_cb+0x30>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    ee4a:	68b5      	ldr	r5, [r6, #8]
    ccp = tdma->ccp;
    ee4c:	f8d5 8004 	ldr.w	r8, [r5, #4]

    TDMA_STATS_INC(superframe_cnt);
    ee50:	6a2b      	ldr	r3, [r5, #32]
    ee52:	3301      	adds	r3, #1
    ee54:	622b      	str	r3, [r5, #32]

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    ee56:	f106 070c 	add.w	r7, r6, #12
    ee5a:	4638      	mov	r0, r7
    ee5c:	f002 ffa5 	bl	11daa <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    ee60:	2400      	movs	r4, #0
    ee62:	e00d      	b.n	ee80 <tdma_superframe_slot_cb+0x40>
    assert(ev != NULL);
    ee64:	2300      	movs	r3, #0
    ee66:	461a      	mov	r2, r3
    ee68:	4619      	mov	r1, r3
    ee6a:	4618      	mov	r0, r3
    ee6c:	f7fe fa78 	bl	d360 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    ee70:	2300      	movs	r3, #0
    ee72:	461a      	mov	r2, r3
    ee74:	4619      	mov	r1, r3
    ee76:	4618      	mov	r0, r3
    ee78:	f7fe fa72 	bl	d360 <__assert_func>
    for (i = 0; i < tdma->nslots; i++) {
    ee7c:	3401      	adds	r4, #1
    ee7e:	b2a4      	uxth	r4, r4
    ee80:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    ee84:	42a3      	cmp	r3, r4
    ee86:	d909      	bls.n	ee9c <tdma_superframe_slot_cb+0x5c>
        if (tdma->slot[i]){
    ee88:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    ee8c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    ee90:	2800      	cmp	r0, #0
    ee92:	d0f3      	beq.n	ee7c <tdma_superframe_slot_cb+0x3c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    ee94:	300c      	adds	r0, #12
    ee96:	f002 ff88 	bl	11daa <dpl_cputime_timer_stop>
    ee9a:	e7ef      	b.n	ee7c <tdma_superframe_slot_cb+0x3c>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    ee9c:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    eea0:	fbb0 f0f3 	udiv	r0, r0, r3
    eea4:	f012 fd60 	bl	21968 <__aeabi_ui2d>
    eea8:	a31d      	add	r3, pc, #116	; (adr r3, ef20 <tdma_superframe_slot_cb+0xe0>)
    eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    eeae:	f012 fdd5 	bl	21a5c <__aeabi_dmul>
    eeb2:	f013 f8ab 	bl	2200c <__aeabi_d2uiz>
    eeb6:	4681      	mov	r9, r0
#endif
    for (i = 0; i < tdma->nslots; i++) {
    eeb8:	2400      	movs	r4, #0
    eeba:	e001      	b.n	eec0 <tdma_superframe_slot_cb+0x80>
    eebc:	3401      	adds	r4, #1
    eebe:	b2a4      	uxth	r4, r4
    eec0:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    eec4:	42a3      	cmp	r3, r4
    eec6:	d914      	bls.n	eef2 <tdma_superframe_slot_cb+0xb2>
        if (tdma->slot[i]){
    eec8:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    eecc:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    eed0:	2a00      	cmp	r2, #0
    eed2:	d0f3      	beq.n	eebc <tdma_superframe_slot_cb+0x7c>
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    eed4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    eed6:	fb09 3304 	mla	r3, r9, r4, r3
    eeda:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    eede:	6053      	str	r3, [r2, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    eee0:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    eee4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    eee8:	6841      	ldr	r1, [r0, #4]
    eeea:	300c      	adds	r0, #12
    eeec:	f00a f8ee 	bl	190cc <hal_timer_start_at>
    eef0:	e7e4      	b.n	eebc <tdma_superframe_slot_cb+0x7c>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
    eef2:	6fec      	ldr	r4, [r5, #124]	; 0x7c
        + dpl_cputime_usecs_to_ticks(
    eef4:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    eef8:	f012 fd36 	bl	21968 <__aeabi_ui2d>
    eefc:	a308      	add	r3, pc, #32	; (adr r3, ef20 <tdma_superframe_slot_cb+0xe0>)
    eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef02:	f012 fdab 	bl	21a5c <__aeabi_dmul>
    ef06:	f013 f881 	bl	2200c <__aeabi_d2uiz>
    ef0a:	eb00 0109 	add.w	r1, r0, r9
    ef0e:	4421      	add	r1, r4
    slot->cputime_slot_start = tdma->os_epoch
    ef10:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    ef12:	4638      	mov	r0, r7
    ef14:	f00a f8da 	bl	190cc <hal_timer_start_at>
}
    ef18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef1c:	f3af 8000 	nop.w
    ef20:	90690691 	.word	0x90690691
    ef24:	3ff06906 	.word	0x3ff06906

0000ef28 <slot_timer_cb>:
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
{
    ef28:	b508      	push	{r3, lr}
    assert(arg);
    ef2a:	b168      	cbz	r0, ef48 <slot_timer_cb+0x20>
    ef2c:	4601      	mov	r1, r0
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    ef2e:	6880      	ldr	r0, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    ef30:	69c3      	ldr	r3, [r0, #28]
    ef32:	3301      	adds	r3, #1
    ef34:	61c3      	str	r3, [r0, #28]

    if (slot == &tdma->superframe_slot) {
    ef36:	f100 0380 	add.w	r3, r0, #128	; 0x80
    ef3a:	428b      	cmp	r3, r1
    ef3c:	d00a      	beq.n	ef54 <slot_timer_cb+0x2c>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    ef3e:	3124      	adds	r1, #36	; 0x24
    ef40:	30b8      	adds	r0, #184	; 0xb8
    ef42:	f7fe fd41 	bl	d9c8 <os_eventq_put>
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    ef46:	bd08      	pop	{r3, pc}
    assert(arg);
    ef48:	2300      	movs	r3, #0
    ef4a:	461a      	mov	r2, r3
    ef4c:	4619      	mov	r1, r3
    ef4e:	4618      	mov	r0, r3
    ef50:	f7fe fa06 	bl	d360 <__assert_func>
        TDMA_STATS_INC(superframe_miss);
    ef54:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ef56:	3301      	adds	r3, #1
    ef58:	6243      	str	r3, [r0, #36]	; 0x24
        return;
    ef5a:	e7f4      	b.n	ef46 <slot_timer_cb+0x1e>

0000ef5c <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    ef5c:	6848      	ldr	r0, [r1, #4]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    ef5e:	6842      	ldr	r2, [r0, #4]
    if (!tdma) {
    ef60:	b180      	cbz	r0, ef84 <superframe_cb+0x28>
{
    ef62:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    ef64:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    ef68:	f013 0f02 	tst.w	r3, #2
    ef6c:	d101      	bne.n	ef72 <superframe_cb+0x16>
}
    ef6e:	2000      	movs	r0, #0
    ef70:	bd08      	pop	{r3, pc}
        tdma->os_epoch = ccp->os_epoch;
    ef72:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    ef76:	67c3      	str	r3, [r0, #124]	; 0x7c
    ef78:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    ef7c:	30b8      	adds	r0, #184	; 0xb8
    ef7e:	f7fe fd23 	bl	d9c8 <os_eventq_put>
}
    ef82:	e7f4      	b.n	ef6e <superframe_cb+0x12>
}
    ef84:	2000      	movs	r0, #0
    ef86:	4770      	bx	lr

0000ef88 <tdma_task>:
{
    ef88:	b570      	push	{r4, r5, r6, lr}
    ef8a:	4606      	mov	r6, r0
    tdma_instance_t * tdma = arg;
    ef8c:	e002      	b.n	ef94 <tdma_task+0xc>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    ef8e:	6863      	ldr	r3, [r4, #4]
    ef90:	4620      	mov	r0, r4
    ef92:	4798      	blx	r3
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    ef94:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    ef98:	f7fe fd57 	bl	da4a <os_eventq_get>
    ef9c:	4604      	mov	r4, r0
    return ev->ev.ev_arg;
    ef9e:	6885      	ldr	r5, [r0, #8]
        ticks = dpl_cputime_get32();
    efa0:	f002 ff07 	bl	11db2 <dpl_cputime_get32>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    efa4:	686b      	ldr	r3, [r5, #4]
    efa6:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    efa8:	882b      	ldrh	r3, [r5, #0]
    efaa:	2b00      	cmp	r3, #0
    efac:	d0ef      	beq.n	ef8e <tdma_task+0x6>
    efae:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    efb2:	d9ec      	bls.n	ef8e <tdma_task+0x6>
            TDMA_STATS_INC(dropped_slots);
    efb4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    efb6:	3301      	adds	r3, #1
    efb8:	62b3      	str	r3, [r6, #40]	; 0x28
    efba:	e7eb      	b.n	ef94 <tdma_task+0xc>

0000efbc <tdma_tasks_init>:
{
    efbc:	b530      	push	{r4, r5, lr}
    efbe:	b085      	sub	sp, #20
    efc0:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    efc2:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    return os_eventq_inited((struct os_eventq *) evq);
    efc6:	4628      	mov	r0, r5
    efc8:	f7fe fcf9 	bl	d9be <os_eventq_inited>
    efcc:	b108      	cbz	r0, efd2 <tdma_tasks_init+0x16>
}
    efce:	b005      	add	sp, #20
    efd0:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    efd2:	4628      	mov	r0, r5
    efd4:	f7fe fcea 	bl	d9ac <os_eventq_init>
        dpl_task_init(&inst->task_str, "tdma",
    efd8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
                      inst->task_stack,
    efdc:	f504 7290 	add.w	r2, r4, #288	; 0x120
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    efe0:	f44f 7180 	mov.w	r1, #256	; 0x100
    efe4:	9103      	str	r1, [sp, #12]
    efe6:	9202      	str	r2, [sp, #8]
    efe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    efec:	9201      	str	r2, [sp, #4]
    efee:	9300      	str	r3, [sp, #0]
    eff0:	4623      	mov	r3, r4
    eff2:	4a03      	ldr	r2, [pc, #12]	; (f000 <tdma_tasks_init+0x44>)
    eff4:	4903      	ldr	r1, [pc, #12]	; (f004 <tdma_tasks_init+0x48>)
    eff6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    effa:	f7ff fa3f 	bl	e47c <os_task_init>
}
    effe:	e7e6      	b.n	efce <tdma_tasks_init+0x12>
    f000:	0000ef89 	.word	0x0000ef89
    f004:	000238f4 	.word	0x000238f4

0000f008 <tdma_init>:
{
    f008:	b570      	push	{r4, r5, r6, lr}
    f00a:	b082      	sub	sp, #8
    assert(dev);
    f00c:	2800      	cmp	r0, #0
    f00e:	d057      	beq.n	f0c0 <tdma_init+0xb8>
    f010:	460d      	mov	r5, r1
    f012:	4606      	mov	r6, r0
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    f014:	2103      	movs	r1, #3
    f016:	f7f9 fdc0 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    f01a:	4604      	mov	r4, r0
    f01c:	2800      	cmp	r0, #0
    f01e:	d055      	beq.n	f0cc <tdma_init+0xc4>
    tdma->cbs = (struct uwb_mac_interface){
    f020:	f104 0530 	add.w	r5, r4, #48	; 0x30
    f024:	223c      	movs	r2, #60	; 0x3c
    f026:	2100      	movs	r1, #0
    f028:	4628      	mov	r0, r5
    f02a:	f002 fa32 	bl	11492 <memset>
    f02e:	2303      	movs	r3, #3
    f030:	8663      	strh	r3, [r4, #50]	; 0x32
    f032:	6364      	str	r4, [r4, #52]	; 0x34
    f034:	4b42      	ldr	r3, [pc, #264]	; (f140 <tdma_init+0x138>)
    f036:	6663      	str	r3, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    f038:	4629      	mov	r1, r5
    f03a:	4630      	mov	r0, r6
    f03c:	f7f9 fd58 	bl	8af0 <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    f040:	2101      	movs	r1, #1
    f042:	4630      	mov	r0, r6
    f044:	f7f9 fda9 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    f048:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    f04a:	2800      	cmp	r0, #0
    f04c:	d065      	beq.n	f11a <tdma_init+0x112>
    int rc = stats_init(
    f04e:	f104 0508 	add.w	r5, r4, #8
    f052:	2104      	movs	r1, #4
    f054:	9100      	str	r1, [sp, #0]
    f056:	4b3b      	ldr	r3, [pc, #236]	; (f144 <tdma_init+0x13c>)
    f058:	460a      	mov	r2, r1
    f05a:	4628      	mov	r0, r5
    f05c:	f005 fdd6 	bl	14c0c <stats_init>
    assert(rc == 0);
    f060:	2800      	cmp	r0, #0
    f062:	d160      	bne.n	f126 <tdma_init+0x11e>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    f064:	4629      	mov	r1, r5
    f066:	4838      	ldr	r0, [pc, #224]	; (f148 <tdma_init+0x140>)
    f068:	f005 fe5a 	bl	14d20 <stats_register>
    assert(rc == 0);
    f06c:	2800      	cmp	r0, #0
    f06e:	d160      	bne.n	f132 <tdma_init+0x12a>
    tdma->superframe_slot.parent = tdma;
    f070:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    f074:	2500      	movs	r5, #0
    f076:	4626      	mov	r6, r4
    f078:	f826 5f80 	strh.w	r5, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    f07c:	4632      	mov	r2, r6
    f07e:	4933      	ldr	r1, [pc, #204]	; (f14c <tdma_init+0x144>)
    f080:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    f084:	f002 fe76 	bl	11d74 <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    f088:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    f08c:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    f090:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    f094:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    ev->ev.ev_cb = (os_event_fn *)fn;
    f098:	4b2d      	ldr	r3, [pc, #180]	; (f150 <tdma_init+0x148>)
    f09a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ev->ev.ev_arg = arg;
    f09e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    tdma->status.initialized = true;
    f0a2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f0a6:	f043 0302 	orr.w	r3, r3, #2
    f0aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    f0ae:	f002 fe80 	bl	11db2 <dpl_cputime_get32>
    f0b2:	67e0      	str	r0, [r4, #124]	; 0x7c
    tdma_tasks_init(tdma);
    f0b4:	4620      	mov	r0, r4
    f0b6:	f7ff ff81 	bl	efbc <tdma_tasks_init>
}
    f0ba:	4620      	mov	r0, r4
    f0bc:	b002      	add	sp, #8
    f0be:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);
    f0c0:	2300      	movs	r3, #0
    f0c2:	461a      	mov	r2, r3
    f0c4:	4619      	mov	r1, r3
    f0c6:	4618      	mov	r0, r3
    f0c8:	f7fe f94a 	bl	d360 <__assert_func>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    f0cc:	f505 71a4 	add.w	r1, r5, #328	; 0x148
    f0d0:	0089      	lsls	r1, r1, #2
    f0d2:	2001      	movs	r0, #1
    f0d4:	f002 f8c7 	bl	11266 <calloc>
        assert(tdma);
    f0d8:	4604      	mov	r4, r0
    f0da:	b190      	cbz	r0, f102 <tdma_init+0xfa>
        tdma->status.selfmalloc = 1;
    f0dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f0e0:	f043 0301 	orr.w	r3, r3, #1
    f0e4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    f0e8:	306c      	adds	r0, #108	; 0x6c
    f0ea:	f7fe fe5f 	bl	ddac <os_mutex_init>
        assert(err == DPL_OK);
    f0ee:	b970      	cbnz	r0, f10e <tdma_init+0x106>
        tdma->nslots = nslots;
    f0f0:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
        tdma->dev_inst = dev;
    f0f4:	6026      	str	r6, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    f0f6:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    f0fa:	3306      	adds	r3, #6
    f0fc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    f100:	e78e      	b.n	f020 <tdma_init+0x18>
        assert(tdma);
    f102:	2300      	movs	r3, #0
    f104:	461a      	mov	r2, r3
    f106:	4619      	mov	r1, r3
    f108:	4618      	mov	r0, r3
    f10a:	f7fe f929 	bl	d360 <__assert_func>
        assert(err == DPL_OK);
    f10e:	2300      	movs	r3, #0
    f110:	461a      	mov	r2, r3
    f112:	4619      	mov	r1, r3
    f114:	4618      	mov	r0, r3
    f116:	f7fe f923 	bl	d360 <__assert_func>
    assert(tdma->ccp);
    f11a:	2300      	movs	r3, #0
    f11c:	461a      	mov	r2, r3
    f11e:	4619      	mov	r1, r3
    f120:	4618      	mov	r0, r3
    f122:	f7fe f91d 	bl	d360 <__assert_func>
    assert(rc == 0);
    f126:	2300      	movs	r3, #0
    f128:	461a      	mov	r2, r3
    f12a:	4619      	mov	r1, r3
    f12c:	4618      	mov	r0, r3
    f12e:	f7fe f917 	bl	d360 <__assert_func>
    assert(rc == 0);
    f132:	2300      	movs	r3, #0
    f134:	461a      	mov	r2, r3
    f136:	4619      	mov	r1, r3
    f138:	4618      	mov	r0, r3
    f13a:	f7fe f911 	bl	d360 <__assert_func>
    f13e:	bf00      	nop
    f140:	0000ef5d 	.word	0x0000ef5d
    f144:	0002398c 	.word	0x0002398c
    f148:	000238f4 	.word	0x000238f4
    f14c:	0000ef29 	.word	0x0000ef29
    f150:	0000ee41 	.word	0x0000ee41

0000f154 <tdma_assign_slot>:
{
    f154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f156:	4615      	mov	r5, r2
    assert(idx < inst->nslots);
    f158:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    f15c:	42aa      	cmp	r2, r5
    f15e:	d92c      	bls.n	f1ba <tdma_assign_slot+0x66>
    f160:	4604      	mov	r4, r0
    f162:	460e      	mov	r6, r1
    f164:	461f      	mov	r7, r3
    if (inst->status.initialized == false)
    f166:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    f16a:	f013 0f02 	tst.w	r3, #2
    f16e:	d023      	beq.n	f1b8 <tdma_assign_slot+0x64>
    if (inst->slot[idx] == NULL){
    f170:	f505 73a4 	add.w	r3, r5, #328	; 0x148
    f174:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    f178:	b328      	cbz	r0, f1c6 <tdma_assign_slot+0x72>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    f17a:	2238      	movs	r2, #56	; 0x38
    f17c:	2100      	movs	r1, #0
    f17e:	f002 f988 	bl	11492 <memset>
    inst->slot[idx]->idx = idx;
    f182:	f505 72a4 	add.w	r2, r5, #328	; 0x148
    f186:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    f18a:	801d      	strh	r5, [r3, #0]
    inst->slot[idx]->parent = inst;
    f18c:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    f190:	609c      	str	r4, [r3, #8]
    inst->slot[idx]->arg = arg;
    f192:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    f196:	635f      	str	r7, [r3, #52]	; 0x34
    dpl_event_init(&inst->slot[idx]->event, call_back, (void *) inst->slot[idx]);
    f198:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    memset(ev, 0, sizeof(*ev));
    f19c:	2100      	movs	r1, #0
    f19e:	6259      	str	r1, [r3, #36]	; 0x24
    f1a0:	6299      	str	r1, [r3, #40]	; 0x28
    f1a2:	62d9      	str	r1, [r3, #44]	; 0x2c
    f1a4:	6319      	str	r1, [r3, #48]	; 0x30
    ev->ev.ev_cb = (os_event_fn *)fn;
    f1a6:	629e      	str	r6, [r3, #40]	; 0x28
    ev->ev.ev_arg = arg;
    f1a8:	62db      	str	r3, [r3, #44]	; 0x2c
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    f1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    f1ae:	490e      	ldr	r1, [pc, #56]	; (f1e8 <tdma_assign_slot+0x94>)
    f1b0:	f102 000c 	add.w	r0, r2, #12
    f1b4:	f002 fdde 	bl	11d74 <dpl_cputime_timer_init>
}
    f1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(idx < inst->nslots);
    f1ba:	2300      	movs	r3, #0
    f1bc:	461a      	mov	r2, r3
    f1be:	4619      	mov	r1, r3
    f1c0:	4618      	mov	r0, r3
    f1c2:	f7fe f8cd 	bl	d360 <__assert_func>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    f1c6:	2138      	movs	r1, #56	; 0x38
    f1c8:	2001      	movs	r0, #1
    f1ca:	f002 f84c 	bl	11266 <calloc>
    f1ce:	f505 73a4 	add.w	r3, r5, #328	; 0x148
    f1d2:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        assert(inst->slot[idx]);
    f1d6:	2800      	cmp	r0, #0
    f1d8:	d1d3      	bne.n	f182 <tdma_assign_slot+0x2e>
    f1da:	2300      	movs	r3, #0
    f1dc:	461a      	mov	r2, r3
    f1de:	4619      	mov	r1, r3
    f1e0:	4618      	mov	r0, r3
    f1e2:	f7fe f8bd 	bl	d360 <__assert_func>
    f1e6:	bf00      	nop
    f1e8:	0000ef29 	.word	0x0000ef29

0000f1ec <tdma_release_slot>:
{
    f1ec:	b538      	push	{r3, r4, r5, lr}
    assert(idx < inst->nslots);
    f1ee:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    f1f2:	428b      	cmp	r3, r1
    f1f4:	d913      	bls.n	f21e <tdma_release_slot+0x32>
    f1f6:	4605      	mov	r5, r0
    f1f8:	460c      	mov	r4, r1
    if (inst->slot[idx]) {
    f1fa:	f501 73a4 	add.w	r3, r1, #328	; 0x148
    f1fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    f202:	b158      	cbz	r0, f21c <tdma_release_slot+0x30>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    f204:	300c      	adds	r0, #12
    f206:	f002 fdd0 	bl	11daa <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    f20a:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    f20e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    f212:	f002 f8f7 	bl	11404 <free>
        inst->slot[idx] =  NULL;
    f216:	2300      	movs	r3, #0
    f218:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
    f21c:	bd38      	pop	{r3, r4, r5, pc}
    assert(idx < inst->nslots);
    f21e:	2300      	movs	r3, #0
    f220:	461a      	mov	r2, r3
    f222:	4619      	mov	r1, r3
    f224:	4618      	mov	r0, r3
    f226:	f7fe f89b 	bl	d360 <__assert_func>

0000f22a <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    f22a:	b538      	push	{r3, r4, r5, lr}
    f22c:	4605      	mov	r5, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    f22e:	2400      	movs	r4, #0
    f230:	e001      	b.n	f236 <tdma_stop+0xc>
    f232:	3401      	adds	r4, #1
    f234:	b2a4      	uxth	r4, r4
    f236:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    f23a:	42a3      	cmp	r3, r4
    f23c:	d90d      	bls.n	f25a <tdma_stop+0x30>
        if (tdma->slot[i]){
    f23e:	f504 73a4 	add.w	r3, r4, #328	; 0x148
    f242:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    f246:	2800      	cmp	r0, #0
    f248:	d0f3      	beq.n	f232 <tdma_stop+0x8>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    f24a:	300c      	adds	r0, #12
    f24c:	f002 fdad 	bl	11daa <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    f250:	4621      	mov	r1, r4
    f252:	4628      	mov	r0, r5
    f254:	f7ff ffca 	bl	f1ec <tdma_release_slot>
    f258:	e7eb      	b.n	f232 <tdma_stop+0x8>
        }
    }
}
    f25a:	bd38      	pop	{r3, r4, r5, pc}

0000f25c <tdma_free>:
{
    f25c:	b510      	push	{r4, lr}
    assert(inst);
    f25e:	b190      	cbz	r0, f286 <tdma_free+0x2a>
    f260:	4604      	mov	r4, r0
    tdma_stop(inst);
    f262:	f7ff ffe2 	bl	f22a <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    f266:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    f268:	6820      	ldr	r0, [r4, #0]
    f26a:	f7f9 fc66 	bl	8b3a <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    f26e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f272:	f013 0f01 	tst.w	r3, #1
    f276:	d10c      	bne.n	f292 <tdma_free+0x36>
        inst->status.initialized = 0;
    f278:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    f27c:	f36f 0341 	bfc	r3, #1, #1
    f280:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    f284:	bd10      	pop	{r4, pc}
    assert(inst);
    f286:	2300      	movs	r3, #0
    f288:	461a      	mov	r2, r3
    f28a:	4619      	mov	r1, r3
    f28c:	4618      	mov	r0, r3
    f28e:	f7fe f867 	bl	d360 <__assert_func>
        free(inst);
    f292:	4620      	mov	r0, r4
    f294:	f002 f8b6 	bl	11404 <free>
    f298:	e7f4      	b.n	f284 <tdma_free+0x28>

0000f29a <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    f29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f29e:	ee10 8a10 	vmov	r8, s0
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    f2a2:	6845      	ldr	r5, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    f2a4:	6803      	ldr	r3, [r0, #0]
    f2a6:	f893 451b 	ldrb.w	r4, [r3, #1307]	; 0x51b
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    f2aa:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
    f2ae:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    f2b2:	2300      	movs	r3, #0
    f2b4:	0408      	lsls	r0, r1, #16
    f2b6:	0c09      	lsrs	r1, r1, #16
    f2b8:	f012 ff68 	bl	2218c <__aeabi_uldivmod>
    f2bc:	f012 fb98 	bl	219f0 <__aeabi_ul2d>
    f2c0:	4606      	mov	r6, r0
    f2c2:	460f      	mov	r7, r1
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    f2c4:	4640      	mov	r0, r8
    f2c6:	f012 fb71 	bl	219ac <__aeabi_f2d>
    f2ca:	4632      	mov	r2, r6
    f2cc:	463b      	mov	r3, r7
    f2ce:	f012 fbc5 	bl	21a5c <__aeabi_dmul>
    f2d2:	f012 ff73 	bl	221bc <__aeabi_d2lz>
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    f2d6:	0422      	lsls	r2, r4, #16
    f2d8:	1a82      	subs	r2, r0, r2

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    f2da:	f8d5 40d8 	ldr.w	r4, [r5, #216]	; 0xd8
    f2de:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
    f2e2:	f161 0300 	sbc.w	r3, r1, #0
    f2e6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    f2e8:	f001 fedc 	bl	110a4 <uwb_wcs_dtu_time_adjust>
    f2ec:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    f2ee:	eb46 0101 	adc.w	r1, r6, r1
    f2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000f2f8 <tdma_tx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start (dtu)
 */
uint64_t
tdma_tx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    f2f8:	b570      	push	{r4, r5, r6, lr}
    f2fa:	4606      	mov	r6, r0
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    f2fc:	f7ff ffcd 	bl	f29a <tdma_rx_slot_start>
    f300:	4604      	mov	r4, r0
    f302:	460d      	mov	r5, r1
#ifndef __KERNEL__
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    f304:	6830      	ldr	r0, [r6, #0]
    f306:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f30c:	4798      	blx	r3
    f30e:	f012 fb3b 	bl	21988 <__aeabi_i2d>
    f312:	a30b      	add	r3, pc, #44	; (adr r3, f340 <tdma_tx_slot_start+0x48>)
    f314:	e9d3 2300 	ldrd	r2, r3, [r3]
    f318:	f012 fcca 	bl	21cb0 <__aeabi_ddiv>
    f31c:	f012 fe96 	bl	2204c <__aeabi_d2f>
    f320:	ee00 0a10 	vmov	s0, r0
    f324:	f013 f914 	bl	22550 <ceilf>
    f328:	ee10 0a10 	vmov	r0, s0
    f32c:	f012 ff5e 	bl	221ec <__aeabi_f2ulz>
    f330:	0409      	lsls	r1, r1, #16
    f332:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    f336:	0403      	lsls	r3, r0, #16
    f338:	1918      	adds	r0, r3, r4
#else
    dx_time = (dx_time + ((uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
#endif
    return dx_time;
}
    f33a:	eb41 0105 	adc.w	r1, r1, r5
    f33e:	bd70      	pop	{r4, r5, r6, pc}
    f340:	90690691 	.word	0x90690691
    f344:	3ff06906 	.word	0x3ff06906

0000f348 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    f348:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    f34a:	f002 fd32 	bl	11db2 <dpl_cputime_get32>
    f34e:	4601      	mov	r1, r0
    f350:	4808      	ldr	r0, [pc, #32]	; (f374 <tdma_pkg_init+0x2c>)
    f352:	f002 fc9f 	bl	11c94 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f356:	2400      	movs	r4, #0
    f358:	e000      	b.n	f35c <tdma_pkg_init+0x14>
    f35a:	3401      	adds	r4, #1
    f35c:	2c02      	cmp	r4, #2
    f35e:	dc08      	bgt.n	f372 <tdma_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    f360:	4620      	mov	r0, r4
    f362:	f7f9 fb95 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
    f366:	2800      	cmp	r0, #0
    f368:	d0f7      	beq.n	f35a <tdma_pkg_init+0x12>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    f36a:	2110      	movs	r1, #16
    f36c:	f7ff fe4c 	bl	f008 <tdma_init>
    f370:	e7f3      	b.n	f35a <tdma_pkg_init+0x12>
    }
}
    f372:	bd10      	pop	{r4, pc}
    f374:	000238fc 	.word	0x000238fc

0000f378 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    f378:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    f37a:	f002 fd1a 	bl	11db2 <dpl_cputime_get32>
    f37e:	4601      	mov	r1, r0
    f380:	480b      	ldr	r0, [pc, #44]	; (f3b0 <tdma_pkg_down+0x38>)
    f382:	f002 fc87 	bl	11c94 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f386:	2400      	movs	r4, #0
    f388:	e000      	b.n	f38c <tdma_pkg_down+0x14>
    f38a:	3401      	adds	r4, #1
    f38c:	2c02      	cmp	r4, #2
    f38e:	dc0c      	bgt.n	f3aa <tdma_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    f390:	4620      	mov	r0, r4
    f392:	f7f9 fb7d 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
    f396:	2800      	cmp	r0, #0
    f398:	d0f7      	beq.n	f38a <tdma_pkg_down+0x12>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    f39a:	2103      	movs	r1, #3
    f39c:	f7f9 fbfd 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    f3a0:	2800      	cmp	r0, #0
    f3a2:	d0f2      	beq.n	f38a <tdma_pkg_down+0x12>
            continue;
        }
        tdma_free(tdma);
    f3a4:	f7ff ff5a 	bl	f25c <tdma_free>
    f3a8:	e7ef      	b.n	f38a <tdma_pkg_down+0x12>
    }
    return 0;
}
    f3aa:	2000      	movs	r0, #0
    f3ac:	bd10      	pop	{r4, pc}
    f3ae:	bf00      	nop
    f3b0:	00023924 	.word	0x00023924
    f3b4:	00000000 	.word	0x00000000

0000f3b8 <adjust_for_epoch_to_rm>:
}
#endif

static void
adjust_for_epoch_to_rm(struct uwb_ccp_instance * ccp, uint16_t epoch_to_rm_us)
{
    f3b8:	b5d0      	push	{r4, r6, r7, lr}
    f3ba:	4604      	mov	r4, r0
    f3bc:	4608      	mov	r0, r1
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    f3be:	040a      	lsls	r2, r1, #16
    f3c0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    f3c4:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
    f3c8:	1a9b      	subs	r3, r3, r2
    f3ca:	f161 0100 	sbc.w	r1, r1, #0
    f3ce:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    f3d2:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    f3d6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    f3da:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    f3de:	1a9b      	subs	r3, r3, r2
    f3e0:	f161 0100 	sbc.w	r1, r1, #0
    f3e4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    f3e8:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    f3ec:	f012 facc 	bl	21988 <__aeabi_i2d>
    f3f0:	a309      	add	r3, pc, #36	; (adr r3, f418 <adjust_for_epoch_to_rm+0x60>)
    f3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f3f6:	f012 fb31 	bl	21a5c <__aeabi_dmul>
    f3fa:	4606      	mov	r6, r0
    f3fc:	460f      	mov	r7, r1
    f3fe:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f402:	f012 fab1 	bl	21968 <__aeabi_ui2d>
    f406:	4632      	mov	r2, r6
    f408:	463b      	mov	r3, r7
    f40a:	f012 f96f 	bl	216ec <__aeabi_dsub>
    f40e:	f012 fdfd 	bl	2200c <__aeabi_d2uiz>
    f412:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
}
    f416:	bdd0      	pop	{r4, r6, r7, pc}
    f418:	90690691 	.word	0x90690691
    f41c:	3ff06906 	.word	0x3ff06906

0000f420 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
    f420:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f422:	684c      	ldr	r4, [r1, #4]
    f424:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    f428:	b10b      	cbz	r3, f42e <reset_cb+0xe>
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
        CCP_STATS_INC(reset);
        return true;
    }
    return false;   // CCP is an observer and should not return true
    f42a:	2000      	movs	r0, #0
}
    f42c:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    f42e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f432:	f7fe ff8b 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    f436:	b920      	cbnz	r0, f442 <reset_cb+0x22>
        CCP_STATS_INC(reset);
    f438:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f43a:	3301      	adds	r3, #1
    f43c:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    f43e:	2001      	movs	r0, #1
    f440:	e7f4      	b.n	f42c <reset_cb+0xc>
        assert(err == DPL_OK);
    f442:	2300      	movs	r3, #0
    f444:	461a      	mov	r2, r3
    f446:	4619      	mov	r1, r3
    f448:	4618      	mov	r0, r3
    f44a:	f7fd ff89 	bl	d360 <__assert_func>

0000f44e <error_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f44e:	6848      	ldr	r0, [r1, #4]
    f450:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    f454:	2a01      	cmp	r2, #1
    f456:	d020      	beq.n	f49a <error_cb+0x4c>
{
    f458:	b508      	push	{r3, lr}
    CCP_STATS_INC(txrx_error);
    f45a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    f45c:	3301      	adds	r3, #1
    f45e:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    f460:	b9ea      	cbnz	r2, f49e <error_cb+0x50>
        if (ccp->config.role != CCP_ROLE_MASTER) {
    f462:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    f466:	f013 0f1e 	tst.w	r3, #30
    f46a:	d00a      	beq.n	f482 <error_cb+0x34>
            ccp->status.rx_error = 1;
    f46c:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f470:	f043 0301 	orr.w	r3, r3, #1
    f474:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    f478:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    f47c:	3301      	adds	r3, #1
    f47e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    f482:	30b0      	adds	r0, #176	; 0xb0
    f484:	f7fe ff62 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    f488:	b908      	cbnz	r0, f48e <error_cb+0x40>
    return true;
    f48a:	2001      	movs	r0, #1
    f48c:	e008      	b.n	f4a0 <error_cb+0x52>
        assert(err == DPL_OK);
    f48e:	2300      	movs	r3, #0
    f490:	461a      	mov	r2, r3
    f492:	4619      	mov	r1, r3
    f494:	4618      	mov	r0, r3
    f496:	f7fd ff63 	bl	d360 <__assert_func>
        return false;
    f49a:	2000      	movs	r0, #0
}
    f49c:	4770      	bx	lr
    return true;
    f49e:	2001      	movs	r0, #1
}
    f4a0:	bd08      	pop	{r3, pc}

0000f4a2 <rx_timeout_cb>:
{
    f4a2:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f4a4:	6848      	ldr	r0, [r1, #4]
    f4a6:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    f4aa:	2b01      	cmp	r3, #1
    f4ac:	d01c      	beq.n	f4e8 <rx_timeout_cb+0x46>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    f4ae:	b10b      	cbz	r3, f4b4 <rx_timeout_cb+0x12>
    return true;
    f4b0:	2001      	movs	r0, #1
}
    f4b2:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    f4b4:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f4b8:	f043 0302 	orr.w	r3, r3, #2
    f4bc:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    f4c0:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    f4c4:	3301      	adds	r3, #1
    f4c6:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    f4ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    f4cc:	3301      	adds	r3, #1
    f4ce:	65c3      	str	r3, [r0, #92]	; 0x5c
    f4d0:	30b0      	adds	r0, #176	; 0xb0
    f4d2:	f7fe ff3b 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    f4d6:	b908      	cbnz	r0, f4dc <rx_timeout_cb+0x3a>
    return true;
    f4d8:	2001      	movs	r0, #1
    f4da:	e7ea      	b.n	f4b2 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    f4dc:	2300      	movs	r3, #0
    f4de:	461a      	mov	r2, r3
    f4e0:	4619      	mov	r1, r3
    f4e2:	4618      	mov	r0, r3
    f4e4:	f7fd ff3c 	bl	d360 <__assert_func>
        return false;
    f4e8:	2000      	movs	r0, #0
    f4ea:	e7e2      	b.n	f4b2 <rx_timeout_cb+0x10>

0000f4ec <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    f4ec:	b508      	push	{r3, lr}
    assert(arg);
    f4ee:	b130      	cbz	r0, f4fe <ccp_timer_irq+0x12>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f4f0:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    f4f4:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    f4f8:	f7fe fa66 	bl	d9c8 <os_eventq_put>
}
    f4fc:	bd08      	pop	{r3, pc}
    assert(arg);
    f4fe:	2300      	movs	r3, #0
    f500:	461a      	mov	r2, r3
    f502:	4619      	mov	r1, r3
    f504:	4618      	mov	r0, r3
    f506:	f7fd ff2b 	bl	d360 <__assert_func>
    f50a:	0000      	movs	r0, r0
    f50c:	0000      	movs	r0, r0
	...

0000f510 <tx_complete_cb>:
{
    f510:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f514:	684c      	ldr	r4, [r1, #4]
    f516:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    f51a:	2b01      	cmp	r3, #1
    f51c:	f000 8083 	beq.w	f626 <tx_complete_cb+0x116>
    f520:	4606      	mov	r6, r0
    CCP_STATS_INC(tx_complete);
    f522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f524:	3301      	adds	r3, #1
    f526:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    f528:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    f52c:	f013 0f1e 	tst.w	r3, #30
    f530:	d179      	bne.n	f626 <tx_complete_cb+0x116>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    f532:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f536:	3301      	adds	r3, #1
    f538:	b29b      	uxth	r3, r3
    f53a:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    f53e:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    f542:	fbb3 f1f2 	udiv	r1, r3, r2
    f546:	fb02 3311 	mls	r3, r2, r1, r3
    f54a:	b29b      	uxth	r3, r3
    f54c:	33e0      	adds	r3, #224	; 0xe0
    f54e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    f552:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f556:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    f558:	696b      	ldr	r3, [r5, #20]
    f55a:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    f55e:	f002 fc28 	bl	11db2 <dpl_cputime_get32>
    f562:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    f566:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f56a:	4630      	mov	r0, r6
    f56c:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    f56e:	696b      	ldr	r3, [r5, #20]
    f570:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    f572:	0840      	lsrs	r0, r0, #1
    f574:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    f578:	0c00      	lsrs	r0, r0, #16
    f57a:	f012 f9f5 	bl	21968 <__aeabi_ui2d>
    f57e:	a34e      	add	r3, pc, #312	; (adr r3, f6b8 <tx_complete_cb+0x1a8>)
    f580:	e9d3 2300 	ldrd	r2, r3, [r3]
    f584:	f012 fa6a 	bl	21a5c <__aeabi_dmul>
    f588:	4680      	mov	r8, r0
    f58a:	4689      	mov	r9, r1
    f58c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f590:	f012 f9ea 	bl	21968 <__aeabi_ui2d>
    f594:	4642      	mov	r2, r8
    f596:	464b      	mov	r3, r9
    f598:	f012 f8a8 	bl	216ec <__aeabi_dsub>
    f59c:	f012 fd36 	bl	2200c <__aeabi_d2uiz>
    f5a0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f5a4:	2300      	movs	r3, #0
    f5a6:	6523      	str	r3, [r4, #80]	; 0x50
    f5a8:	2200      	movs	r2, #0
    f5aa:	2300      	movs	r3, #0
    f5ac:	4640      	mov	r0, r8
    f5ae:	4649      	mov	r1, r9
    f5b0:	f012 f89e 	bl	216f0 <__adddf3>
    f5b4:	f012 fd2a 	bl	2200c <__aeabi_d2uiz>
    f5b8:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->local_epoch = frame->transmission_timestamp.lo;
    f5ba:	696a      	ldr	r2, [r5, #20]
    f5bc:	7e2b      	ldrb	r3, [r5, #24]
    f5be:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f5c2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->master_epoch = frame->transmission_timestamp;
    f5c6:	696a      	ldr	r2, [r5, #20]
    f5c8:	69ab      	ldr	r3, [r5, #24]
    f5ca:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    f5ce:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->period = (frame->transmission_interval >> 16);
    f5d2:	68eb      	ldr	r3, [r5, #12]
    f5d4:	7c2a      	ldrb	r2, [r5, #16]
    f5d6:	0c1b      	lsrs	r3, r3, #16
    f5d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f5dc:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    f5e0:	8be9      	ldrh	r1, [r5, #30]
    f5e2:	4620      	mov	r0, r4
    f5e4:	f7ff fee8 	bl	f3b8 <adjust_for_epoch_to_rm>
    if (ccp->status.timer_enabled){
    f5e8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f5ec:	f013 0f04 	tst.w	r3, #4
    f5f0:	d11c      	bne.n	f62c <tx_complete_cb+0x11c>
    ccp->status.valid |= ccp->idx > 1;
    f5f2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f5f6:	f3c3 0280 	ubfx	r2, r3, #2, #1
    f5fa:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    f5fe:	2901      	cmp	r1, #1
    f600:	bf88      	it	hi
    f602:	f042 0201 	orrhi.w	r2, r2, #1
    f606:	f362 0382 	bfi	r3, r2, #2, #1
    f60a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    f60e:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    f612:	bb95      	cbnz	r5, f67a <tx_complete_cb+0x16a>
    if (ccp->config.postprocess && ccp->status.valid)
    f614:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f618:	4b29      	ldr	r3, [pc, #164]	; (f6c0 <tx_complete_cb+0x1b0>)
    f61a:	4393      	bics	r3, r2
    f61c:	d036      	beq.n	f68c <tx_complete_cb+0x17c>
    f61e:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    f622:	2b00      	cmp	r3, #0
    f624:	d039      	beq.n	f69a <tx_complete_cb+0x18a>
}
    f626:	2000      	movs	r0, #0
    f628:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    f62c:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    f630:	f5a5 757a 	sub.w	r5, r5, #1000	; 0x3e8
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    f634:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    f638:	f012 f996 	bl	21968 <__aeabi_ui2d>
    f63c:	a31e      	add	r3, pc, #120	; (adr r3, f6b8 <tx_complete_cb+0x1a8>)
    f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f642:	f012 fa0b 	bl	21a5c <__aeabi_dmul>
    f646:	4680      	mov	r8, r0
    f648:	4689      	mov	r9, r1
    f64a:	4628      	mov	r0, r5
    f64c:	f012 f98c 	bl	21968 <__aeabi_ui2d>
    f650:	4642      	mov	r2, r8
    f652:	464b      	mov	r3, r9
    f654:	f012 f84c 	bl	216f0 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    f658:	f012 fcd8 	bl	2200c <__aeabi_d2uiz>
    f65c:	4601      	mov	r1, r0
    f65e:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    f662:	f002 fb9e 	bl	11da2 <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    f666:	2800      	cmp	r0, #0
    f668:	d1c3      	bne.n	f5f2 <tx_complete_cb+0xe2>
    f66a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f66e:	f043 0308 	orr.w	r3, r3, #8
    f672:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    f676:	e7bc      	b.n	f5f2 <tx_complete_cb+0xe2>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    f678:	6bad      	ldr	r5, [r5, #56]	; 0x38
    f67a:	2d00      	cmp	r5, #0
    f67c:	d0ca      	beq.n	f614 <tx_complete_cb+0x104>
            if (lcbs != NULL && lcbs->superframe_cb) {
    f67e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    f680:	2b00      	cmp	r3, #0
    f682:	d0f9      	beq.n	f678 <tx_complete_cb+0x168>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    f684:	4629      	mov	r1, r5
    f686:	4630      	mov	r0, r6
    f688:	4798      	blx	r3
    f68a:	e7f5      	b.n	f678 <tx_complete_cb+0x168>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    f68c:	f7fe fa4a 	bl	db24 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f690:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f694:	f7fe f998 	bl	d9c8 <os_eventq_put>
}
    f698:	e7c1      	b.n	f61e <tx_complete_cb+0x10e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    f69a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f69e:	f7fe fe55 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    f6a2:	2800      	cmp	r0, #0
    f6a4:	d0bf      	beq.n	f626 <tx_complete_cb+0x116>
    f6a6:	2300      	movs	r3, #0
    f6a8:	461a      	mov	r2, r3
    f6aa:	4619      	mov	r1, r3
    f6ac:	4618      	mov	r0, r3
    f6ae:	f7fd fe57 	bl	d360 <__assert_func>
    f6b2:	bf00      	nop
    f6b4:	f3af 8000 	nop.w
    f6b8:	90690691 	.word	0x90690691
    f6bc:	3ff06906 	.word	0x3ff06906
    f6c0:	00010004 	.word	0x00010004

0000f6c4 <ccp_task>:
{
    f6c4:	b510      	push	{r4, lr}
    f6c6:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    f6c8:	f504 7086 	add.w	r0, r4, #268	; 0x10c
    f6cc:	f7fe f9fc 	bl	dac8 <os_eventq_run>
    f6d0:	e7fa      	b.n	f6c8 <ccp_task+0x4>
	...

0000f6d4 <ccp_tasks_init>:
{
    f6d4:	b530      	push	{r4, r5, lr}
    f6d6:	b085      	sub	sp, #20
    f6d8:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    f6da:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    return os_eventq_inited((struct os_eventq *) evq);
    f6de:	4628      	mov	r0, r5
    f6e0:	f7fe f96d 	bl	d9be <os_eventq_inited>
    f6e4:	b108      	cbz	r0, f6ea <ccp_tasks_init+0x16>
}
    f6e6:	b005      	add	sp, #20
    f6e8:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    f6ea:	4628      	mov	r0, r5
    f6ec:	f7fe f95e 	bl	d9ac <os_eventq_init>
        dpl_task_init(&inst->task_str, "ccp",
    f6f0:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
                      inst->task_stack,
    f6f4:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    f6f8:	2180      	movs	r1, #128	; 0x80
    f6fa:	9103      	str	r1, [sp, #12]
    f6fc:	9202      	str	r2, [sp, #8]
    f6fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f702:	9201      	str	r2, [sp, #4]
    f704:	9300      	str	r3, [sp, #0]
    f706:	4623      	mov	r3, r4
    f708:	4a03      	ldr	r2, [pc, #12]	; (f718 <ccp_tasks_init+0x44>)
    f70a:	4904      	ldr	r1, [pc, #16]	; (f71c <ccp_tasks_init+0x48>)
    f70c:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    f710:	f7fe feb4 	bl	e47c <os_task_init>
}
    f714:	e7e7      	b.n	f6e6 <ccp_tasks_init+0x12>
    f716:	bf00      	nop
    f718:	0000f6c5 	.word	0x0000f6c5
    f71c:	000239a4 	.word	0x000239a4

0000f720 <ccp_timer_init>:
{
    f720:	b570      	push	{r4, r5, r6, lr}
    f722:	4604      	mov	r4, r0
    f724:	460d      	mov	r5, r1
    ccp->status.timer_enabled = true;
    f726:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f72a:	f043 0304 	orr.w	r3, r3, #4
    f72e:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    f732:	f100 06f4 	add.w	r6, r0, #244	; 0xf4
    f736:	4602      	mov	r2, r0
    f738:	4915      	ldr	r1, [pc, #84]	; (f790 <ccp_timer_init+0x70>)
    f73a:	4630      	mov	r0, r6
    f73c:	f002 fb1a 	bl	11d74 <dpl_cputime_timer_init>
    return ev->ev.ev_arg;
    f740:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    f744:	429c      	cmp	r4, r3
    f746:	d00e      	beq.n	f766 <ccp_timer_init+0x46>
        if (role == CCP_ROLE_MASTER){
    f748:	b995      	cbnz	r5, f770 <ccp_timer_init+0x50>
    memset(ev, 0, sizeof(*ev));
    f74a:	2300      	movs	r3, #0
    f74c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    f750:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    f754:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f758:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    f75c:	4b0d      	ldr	r3, [pc, #52]	; (f794 <ccp_timer_init+0x74>)
    f75e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    f762:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
    dpl_cputime_timer_relative(&ccp->timer, 0);
    f766:	2100      	movs	r1, #0
    f768:	4630      	mov	r0, r6
    f76a:	f002 fb36 	bl	11dda <dpl_cputime_timer_relative>
}
    f76e:	bd70      	pop	{r4, r5, r6, pc}
    memset(ev, 0, sizeof(*ev));
    f770:	2300      	movs	r3, #0
    f772:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    f776:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    f77a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    f77e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    f782:	4b05      	ldr	r3, [pc, #20]	; (f798 <ccp_timer_init+0x78>)
    f784:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    f788:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
}
    f78c:	e7eb      	b.n	f766 <ccp_timer_init+0x46>
    f78e:	bf00      	nop
    f790:	0000f4ed 	.word	0x0000f4ed
    f794:	0000fd11 	.word	0x0000fd11
    f798:	0000f8d9 	.word	0x0000f8d9
    f79c:	00000000 	.word	0x00000000

0000f7a0 <ccp_listen>:
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
{
    f7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f7a4:	4604      	mov	r4, r0
    f7a6:	4616      	mov	r6, r2
    f7a8:	4698      	mov	r8, r3
    f7aa:	f89d 9020 	ldrb.w	r9, [sp, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    f7ae:	4607      	mov	r7, r0
    f7b0:	f857 5bb0 	ldr.w	r5, [r7], #176
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    f7b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    f7ba:	4628      	mov	r0, r5
    f7bc:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    f7be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f7c2:	4638      	mov	r0, r7
    f7c4:	f7fe fdf4 	bl	e3b0 <os_sem_pend>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    f7c8:	2800      	cmp	r0, #0
    f7ca:	d14f      	bne.n	f86c <ccp_listen+0xcc>

    CCP_STATS_INC(listen);
    f7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f7ce:	3301      	adds	r3, #1
    f7d0:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    f7d2:	ea56 0308 	orrs.w	r3, r6, r8
    f7d6:	d005      	beq.n	f7e4 <ccp_listen+0x44>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    f7d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f7da:	6b59      	ldr	r1, [r3, #52]	; 0x34
    f7dc:	4632      	mov	r2, r6
    f7de:	4643      	mov	r3, r8
    f7e0:	4628      	mov	r0, r5
    f7e2:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    ccp->status.rx_timeout_error = 0;
    f7e4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f7e8:	f36f 0341 	bfc	r3, #1, #1
    f7ec:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    f7f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f7f4:	4628      	mov	r0, r5
    f7f6:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    f7f8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    f7fc:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f800:	f360 13c7 	bfi	r3, r0, #7, #1
    f804:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    f808:	b25b      	sxtb	r3, r3
    f80a:	2b00      	cmp	r3, #0
    f80c:	db34      	blt.n	f878 <ccp_listen+0xd8>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
        err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }else if(mode == UWB_BLOCKING){
    f80e:	f1b9 0f00 	cmp.w	r9, #0
    f812:	d14e      	bne.n	f8b2 <ccp_listen+0x112>
#if MYNEWT_VAL(UWB_CCP_STATS)
        if (dx_time) {
    f814:	ea56 0308 	orrs.w	r3, r6, r8
    f818:	d015      	beq.n	f846 <ccp_listen+0xa6>
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    f81a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f81c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f81e:	4628      	mov	r0, r5
    f820:	4798      	blx	r3
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    f822:	1a30      	subs	r0, r6, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    f824:	2300      	movs	r3, #0
    f826:	65a3      	str	r3, [r4, #88]	; 0x58
    f828:	0c00      	lsrs	r0, r0, #16
    f82a:	f012 f89d 	bl	21968 <__aeabi_ui2d>
    f82e:	a328      	add	r3, pc, #160	; (adr r3, f8d0 <ccp_listen+0x130>)
    f830:	e9d3 2300 	ldrd	r2, r3, [r3]
    f834:	f012 f912 	bl	21a5c <__aeabi_dmul>
    f838:	2200      	movs	r2, #0
    f83a:	2300      	movs	r3, #0
    f83c:	f011 ff58 	bl	216f0 <__adddf3>
    f840:	f012 fbe4 	bl	2200c <__aeabi_d2uiz>
    f844:	65a0      	str	r0, [r4, #88]	; 0x58
    f846:	2121      	movs	r1, #33	; 0x21
    f848:	4638      	mov	r0, r7
    f84a:	f7fe fdb1 	bl	e3b0 <os_sem_pend>
        }
#endif
        /* Wait for completion of transactions */
        err = dpl_sem_pend(&ccp->sem, dpl_time_ms_to_ticks32(4*MYNEWT_VAL(UWB_CCP_LONG_RX_TO)/1000));
        if (err==DPL_TIMEOUT) {
    f84e:	2806      	cmp	r0, #6
    f850:	d039      	beq.n	f8c6 <ccp_listen+0x126>
    f852:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f856:	bb63      	cbnz	r3, f8b2 <ccp_listen+0x112>
    return (dpl_error_t)os_sem_release(&sem->sem);
    f858:	4638      	mov	r0, r7
    f85a:	f7fe fd77 	bl	e34c <os_sem_release>
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    f85e:	b340      	cbz	r0, f8b2 <ccp_listen+0x112>
    f860:	2300      	movs	r3, #0
    f862:	461a      	mov	r2, r3
    f864:	4619      	mov	r1, r3
    f866:	4618      	mov	r0, r3
    f868:	f7fd fd7a 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
    f86c:	2300      	movs	r3, #0
    f86e:	461a      	mov	r2, r3
    f870:	4619      	mov	r1, r3
    f872:	4618      	mov	r0, r3
    f874:	f7fd fd74 	bl	d360 <__assert_func>
    f878:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f87c:	4628      	mov	r0, r5
    f87e:	4798      	blx	r3
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    f880:	1b80      	subs	r0, r0, r6
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    f882:	2300      	movs	r3, #0
    f884:	6563      	str	r3, [r4, #84]	; 0x54
    f886:	0c00      	lsrs	r0, r0, #16
    f888:	f012 f86e 	bl	21968 <__aeabi_ui2d>
    f88c:	a310      	add	r3, pc, #64	; (adr r3, f8d0 <ccp_listen+0x130>)
    f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f892:	f012 f8e3 	bl	21a5c <__aeabi_dmul>
    f896:	2200      	movs	r2, #0
    f898:	2300      	movs	r3, #0
    f89a:	f011 ff29 	bl	216f0 <__adddf3>
    f89e:	f012 fbb5 	bl	2200c <__aeabi_d2uiz>
    f8a2:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    f8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f8a6:	3301      	adds	r3, #1
    f8a8:	6363      	str	r3, [r4, #52]	; 0x34
    f8aa:	4638      	mov	r0, r7
    f8ac:	f7fe fd4e 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    f8b0:	b918      	cbnz	r0, f8ba <ccp_listen+0x11a>
        }
    }
    return ccp->status;
}
    f8b2:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    f8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        assert(err == DPL_OK);
    f8ba:	2300      	movs	r3, #0
    f8bc:	461a      	mov	r2, r3
    f8be:	4619      	mov	r1, r3
    f8c0:	4618      	mov	r0, r3
    f8c2:	f7fd fd4d 	bl	d360 <__assert_func>
            CCP_STATS_INC(sem_timeout);
    f8c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    f8c8:	3301      	adds	r3, #1
    f8ca:	6623      	str	r3, [r4, #96]	; 0x60
    f8cc:	e7c1      	b.n	f852 <ccp_listen+0xb2>
    f8ce:	bf00      	nop
    f8d0:	90690691 	.word	0x90690691
    f8d4:	3ff06906 	.word	0x3ff06906

0000f8d8 <ccp_slave_timer_ev_cb>:
{
    f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8dc:	b082      	sub	sp, #8
    assert(ev != NULL);
    f8de:	2800      	cmp	r0, #0
    f8e0:	d06f      	beq.n	f9c2 <ccp_slave_timer_ev_cb+0xea>
    return ev->ev.ev_arg;
    f8e2:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    f8e4:	2c00      	cmp	r4, #0
    f8e6:	d072      	beq.n	f9ce <ccp_slave_timer_ev_cb+0xf6>
    struct uwb_dev * inst = ccp->dev_inst;
    f8e8:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    f8ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    f8ee:	2120      	movs	r1, #32
    f8f0:	4628      	mov	r0, r5
    f8f2:	4798      	blx	r3
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    f8f4:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    f8f8:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f8fc:	f013 0f10 	tst.w	r3, #16
    f900:	d05c      	beq.n	f9bc <ccp_slave_timer_ev_cb+0xe4>
    if (ccp->status.rx_timeout_error) {
    f902:	f013 0f02 	tst.w	r3, #2
    f906:	d168      	bne.n	f9da <ccp_slave_timer_ev_cb+0x102>
    CCP_STATS_INC(slave_cnt);
    f908:	69e3      	ldr	r3, [r4, #28]
    f90a:	3301      	adds	r3, #1
    f90c:	61e3      	str	r3, [r4, #28]
    dx_time = ccp->local_epoch;
    f90e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
    f912:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
    if (ccp->wcs) {
    f916:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    f91a:	f1b8 0f00 	cmp.w	r8, #0
    f91e:	d00e      	beq.n	f93e <ccp_slave_timer_ev_cb+0x66>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    f920:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    f924:	0408      	lsls	r0, r1, #16
    f926:	0c09      	lsrs	r1, r1, #16
    f928:	f012 f862 	bl	219f0 <__aeabi_ul2d>
    f92c:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    f930:	f012 f894 	bl	21a5c <__aeabi_dmul>
    f934:	f012 fc7a 	bl	2222c <__aeabi_d2ulz>
    f938:	19c7      	adds	r7, r0, r7
    f93a:	eb46 0601 	adc.w	r6, r6, r1
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    f93e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f944:	4628      	mov	r0, r5
    f946:	4798      	blx	r3
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    f948:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    f94c:	4418      	add	r0, r3
    f94e:	f012 f81b 	bl	21988 <__aeabi_i2d>
    f952:	a34d      	add	r3, pc, #308	; (adr r3, fa88 <ccp_slave_timer_ev_cb+0x1b0>)
    f954:	e9d3 2300 	ldrd	r2, r3, [r3]
    f958:	f012 f9aa 	bl	21cb0 <__aeabi_ddiv>
    f95c:	f012 fb76 	bl	2204c <__aeabi_d2f>
    f960:	ee00 0a10 	vmov	s0, r0
    f964:	f012 fdf4 	bl	22550 <ceilf>
    f968:	ee10 0a10 	vmov	r0, s0
    f96c:	f012 fc3e 	bl	221ec <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    f970:	0409      	lsls	r1, r1, #16
    f972:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    f976:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    f978:	1a3f      	subs	r7, r7, r0
    f97a:	eb66 0601 	sbc.w	r6, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    f97e:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    f982:	f501 7380 	add.w	r3, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    f986:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    f98a:	4411      	add	r1, r2
    f98c:	0089      	lsls	r1, r1, #2
    f98e:	fa11 f183 	uxtah	r1, r1, r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    f992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f996:	b289      	uxth	r1, r1
    f998:	4628      	mov	r0, r5
    f99a:	4798      	blx	r3
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    f99c:	2300      	movs	r3, #0
    f99e:	9300      	str	r3, [sp, #0]
    f9a0:	463a      	mov	r2, r7
    f9a2:	4633      	mov	r3, r6
    f9a4:	4620      	mov	r0, r4
    f9a6:	f7ff fefb 	bl	f7a0 <ccp_listen>
    if(ccp->status.start_rx_error){
    f9aa:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    f9ae:	2b00      	cmp	r3, #0
    f9b0:	db21      	blt.n	f9f6 <ccp_slave_timer_ev_cb+0x11e>
    if (!ccp->status.enabled) {
    f9b2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f9b6:	f013 0f10 	tst.w	r3, #16
    f9ba:	d12a      	bne.n	fa12 <ccp_slave_timer_ev_cb+0x13a>
}
    f9bc:	b002      	add	sp, #8
    f9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ev != NULL);
    f9c2:	2300      	movs	r3, #0
    f9c4:	461a      	mov	r2, r3
    f9c6:	4619      	mov	r1, r3
    f9c8:	4618      	mov	r0, r3
    f9ca:	f7fd fcc9 	bl	d360 <__assert_func>
    assert(dpl_event_get_arg(ev));
    f9ce:	2300      	movs	r3, #0
    f9d0:	461a      	mov	r2, r3
    f9d2:	4619      	mov	r1, r3
    f9d4:	4618      	mov	r0, r3
    f9d6:	f7fd fcc3 	bl	d360 <__assert_func>
    f9da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f9de:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f9e2:	4628      	mov	r0, r5
    f9e4:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    f9e6:	2300      	movs	r3, #0
    f9e8:	9300      	str	r3, [sp, #0]
    f9ea:	2200      	movs	r2, #0
    f9ec:	2300      	movs	r3, #0
    f9ee:	4620      	mov	r0, r4
    f9f0:	f7ff fed6 	bl	f7a0 <ccp_listen>
        goto reset_timer;
    f9f4:	e7dd      	b.n	f9b2 <ccp_slave_timer_ev_cb+0xda>
    f9f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f9fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f9fe:	4628      	mov	r0, r5
    fa00:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    fa02:	2300      	movs	r3, #0
    fa04:	9300      	str	r3, [sp, #0]
    fa06:	2200      	movs	r2, #0
    fa08:	2300      	movs	r3, #0
    fa0a:	4620      	mov	r0, r4
    fa0c:	f7ff fec8 	bl	f7a0 <ccp_listen>
    fa10:	e7cf      	b.n	f9b2 <ccp_slave_timer_ev_cb+0xda>
    dpl_cputime_timer_stop(&ccp->timer);
    fa12:	f104 07f4 	add.w	r7, r4, #244	; 0xf4
    fa16:	4638      	mov	r0, r7
    fa18:	f002 f9c7 	bl	11daa <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    fa1c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fa20:	f013 0f02 	tst.w	r3, #2
    fa24:	d002      	beq.n	fa2c <ccp_slave_timer_ev_cb+0x154>
        ccp->missed_frames > MYNEWT_VAL(UWB_CCP_TOLERATE_MISSED_FRAMES)) {
    fa26:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if (ccp->status.rx_timeout_error &&
    fa2a:	bb3b      	cbnz	r3, fa7c <ccp_slave_timer_ev_cb+0x1a4>
        ccp->status.rx_timeout_error = 0;
    fa2c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fa30:	f36f 0341 	bfc	r3, #1, #1
    fa34:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    fa38:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
    fa3c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    fa40:	f011 ff92 	bl	21968 <__aeabi_ui2d>
    fa44:	a310      	add	r3, pc, #64	; (adr r3, fa88 <ccp_slave_timer_ev_cb+0x1b0>)
    fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa4a:	f012 f807 	bl	21a5c <__aeabi_dmul>
    fa4e:	f012 fadd 	bl	2200c <__aeabi_d2uiz>
    fa52:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    fa56:	1a41      	subs	r1, r0, r1
    fa58:	f895 051b 	ldrb.w	r0, [r5, #1307]	; 0x51b
    fa5c:	1a09      	subs	r1, r1, r0
    fa5e:	4431      	add	r1, r6
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    fa60:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    fa64:	4638      	mov	r0, r7
    fa66:	f002 f99c 	bl	11da2 <dpl_cputime_timer_start>
    if (rc == 0) ccp->status.timer_restarted = 1;
    fa6a:	2800      	cmp	r0, #0
    fa6c:	d1a6      	bne.n	f9bc <ccp_slave_timer_ev_cb+0xe4>
    fa6e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fa72:	f043 0308 	orr.w	r3, r3, #8
    fa76:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    fa7a:	e79f      	b.n	f9bc <ccp_slave_timer_ev_cb+0xe4>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    fa7c:	2100      	movs	r1, #0
    fa7e:	4638      	mov	r0, r7
    fa80:	f002 f9ab 	bl	11dda <dpl_cputime_timer_relative>
    fa84:	e7f1      	b.n	fa6a <ccp_slave_timer_ev_cb+0x192>
    fa86:	bf00      	nop
    fa88:	90690691 	.word	0x90690691
    fa8c:	3ff06906 	.word	0x3ff06906

0000fa90 <ccp_send>:
{
    fa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa94:	b083      	sub	sp, #12
    fa96:	9101      	str	r1, [sp, #4]
    assert(ccp);
    fa98:	2800      	cmp	r0, #0
    fa9a:	f000 80f2 	beq.w	fc82 <ccp_send+0x1f2>
    fa9e:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    faa0:	6805      	ldr	r5, [r0, #0]
    CCP_STATS_INC(send);
    faa2:	6a03      	ldr	r3, [r0, #32]
    faa4:	3301      	adds	r3, #1
    faa6:	6203      	str	r3, [r0, #32]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    faa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    faaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    faae:	4628      	mov	r0, r5
    fab0:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fab2:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    fab6:	9300      	str	r3, [sp, #0]
    fab8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fabc:	4618      	mov	r0, r3
    fabe:	f7fe fc77 	bl	e3b0 <os_sem_pend>
    assert(err == DPL_OK);
    fac2:	2800      	cmp	r0, #0
    fac4:	f040 80e3 	bne.w	fc8e <ccp_send+0x1fe>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    fac8:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    facc:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    fad0:	fbb3 f2f1 	udiv	r2, r3, r1
    fad4:	fb01 3212 	mls	r2, r1, r2, r3
    fad8:	b292      	uxth	r2, r2
    fada:	32e0      	adds	r2, #224	; 0xe0
    fadc:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    fae0:	3301      	adds	r3, #1
    fae2:	fb93 f2f1 	sdiv	r2, r3, r1
    fae6:	fb01 3312 	mls	r3, r1, r2, r3
    faea:	33e0      	adds	r3, #224	; 0xe0
    faec:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_count = 0;
    faf0:	f04f 0900 	mov.w	r9, #0
    faf4:	f886 901c 	strb.w	r9, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    faf8:	2304      	movs	r3, #4
    fafa:	7773      	strb	r3, [r6, #29]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    fafc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fb02:	4628      	mov	r0, r5
    fb04:	4798      	blx	r3
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    fb06:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    fb08:	f8da 8014 	ldr.w	r8, [sl, #20]
    fb0c:	f8da 7018 	ldr.w	r7, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    fb10:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    fb14:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    fb16:	eb18 0802 	adds.w	r8, r8, r2
    fb1a:	eb47 4713 	adc.w	r7, r7, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    fb1e:	f428 78ff 	bic.w	r8, r8, #510	; 0x1fe
    fb22:	f028 0801 	bic.w	r8, r8, #1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    fb26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fb28:	6b59      	ldr	r1, [r3, #52]	; 0x34
    fb2a:	4642      	mov	r2, r8
    fb2c:	463b      	mov	r3, r7
    fb2e:	4628      	mov	r0, r5
    fb30:	4788      	blx	r1
    timestamp += inst->tx_antenna_delay;
    fb32:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    fb36:	eb13 0808 	adds.w	r8, r3, r8
    fb3a:	f147 0700 	adc.w	r7, r7, #0
    frame->transmission_timestamp.timestamp = timestamp;
    fb3e:	f8c6 8014 	str.w	r8, [r6, #20]
    fb42:	61b7      	str	r7, [r6, #24]
    frame->seq_num = ++ccp->seq_num;
    fb44:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    fb48:	3301      	adds	r3, #1
    fb4a:	b2db      	uxtb	r3, r3
    fb4c:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    fb50:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    fb52:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    fb56:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    fb5a:	f8c6 2002 	str.w	r2, [r6, #2]
    fb5e:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    fb62:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    fb66:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    fb68:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    fb6c:	041a      	lsls	r2, r3, #16
    fb6e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    fb72:	60f2      	str	r2, [r6, #12]
    fb74:	7433      	strb	r3, [r6, #16]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    fb76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fb78:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    fb7c:	2320      	movs	r3, #32
    fb7e:	464a      	mov	r2, r9
    fb80:	4631      	mov	r1, r6
    fb82:	4628      	mov	r0, r5
    fb84:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    fb86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fb88:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    fb8c:	464b      	mov	r3, r9
    fb8e:	464a      	mov	r2, r9
    fb90:	2120      	movs	r1, #32
    fb92:	4628      	mov	r0, r5
    fb94:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    fb96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fb9a:	4649      	mov	r1, r9
    fb9c:	4628      	mov	r0, r5
    fb9e:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    fba0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fba4:	4628      	mov	r0, r5
    fba6:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    fba8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fbac:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    fbb0:	f360 1386 	bfi	r3, r0, #6, #1
    fbb4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    fbb8:	b2db      	uxtb	r3, r3
    fbba:	f013 0f40 	tst.w	r3, #64	; 0x40
    fbbe:	d072      	beq.n	fca6 <ccp_send+0x216>
    return (dev->uw_funcs->uf_read_systime(dev));
    fbc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fbc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    fbc4:	4628      	mov	r0, r5
    fbc6:	4798      	blx	r3
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    fbc8:	ebb0 0808 	subs.w	r8, r0, r8
    fbcc:	eb61 0107 	sbc.w	r1, r1, r7
    fbd0:	ea4f 4818 	mov.w	r8, r8, lsr #16
    fbd4:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    fbd8:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        CCP_STATS_INC(tx_start_error);
    fbdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    fbde:	3301      	adds	r3, #1
    fbe0:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    fbe2:	6973      	ldr	r3, [r6, #20]
    fbe4:	69b2      	ldr	r2, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    fbe6:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    fbea:	0408      	lsls	r0, r1, #16
    fbec:	181b      	adds	r3, r3, r0
    fbee:	eb42 4211 	adc.w	r2, r2, r1, lsr #16
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    fbf2:	f8ca 3014 	str.w	r3, [sl, #20]
    fbf6:	f8ca 2018 	str.w	r2, [sl, #24]
        ccp->idx++;
    fbfa:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    fbfe:	3301      	adds	r3, #1
    fc00:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    fc04:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
    fc08:	ebb5 0008 	subs.w	r0, r5, r8
    fc0c:	eb61 0101 	sbc.w	r1, r1, r1
    fc10:	f011 feee 	bl	219f0 <__aeabi_ul2d>
    fc14:	a33c      	add	r3, pc, #240	; (adr r3, fd08 <ccp_send+0x278>)
    fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
    fc1a:	f011 ff1f 	bl	21a5c <__aeabi_dmul>
    fc1e:	4606      	mov	r6, r0
    fc20:	460f      	mov	r7, r1
    fc22:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    fc26:	f011 fe9f 	bl	21968 <__aeabi_ui2d>
    fc2a:	4632      	mov	r2, r6
    fc2c:	463b      	mov	r3, r7
    fc2e:	f011 fd5f 	bl	216f0 <__adddf3>
    fc32:	f012 f9eb 	bl	2200c <__aeabi_d2uiz>
    fc36:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    fc3a:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    fc3e:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    fc42:	0429      	lsls	r1, r5, #16
    fc44:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    fc48:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    fc4c:	1852      	adds	r2, r2, r1
    fc4e:	eb43 4315 	adc.w	r3, r3, r5, lsr #16
    fc52:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    fc56:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    fc5a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    fc5e:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    fc62:	185b      	adds	r3, r3, r1
    fc64:	eb42 4215 	adc.w	r2, r2, r5, lsr #16
    fc68:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    fc6c:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    return (dpl_error_t)os_sem_release(&sem->sem);
    fc70:	9800      	ldr	r0, [sp, #0]
    fc72:	f7fe fb6b 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    fc76:	b980      	cbnz	r0, fc9a <ccp_send+0x20a>
}
    fc78:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    fc7c:	b003      	add	sp, #12
    fc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(ccp);
    fc82:	2300      	movs	r3, #0
    fc84:	461a      	mov	r2, r3
    fc86:	4619      	mov	r1, r3
    fc88:	4618      	mov	r0, r3
    fc8a:	f7fd fb69 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
    fc8e:	2300      	movs	r3, #0
    fc90:	461a      	mov	r2, r3
    fc92:	4619      	mov	r1, r3
    fc94:	4618      	mov	r0, r3
    fc96:	f7fd fb63 	bl	d360 <__assert_func>
        assert(err == DPL_OK);
    fc9a:	464b      	mov	r3, r9
    fc9c:	464a      	mov	r2, r9
    fc9e:	4649      	mov	r1, r9
    fca0:	4648      	mov	r0, r9
    fca2:	f7fd fb5d 	bl	d360 <__assert_func>
    }else if(mode == UWB_BLOCKING){
    fca6:	9b01      	ldr	r3, [sp, #4]
    fca8:	2b00      	cmp	r3, #0
    fcaa:	d1e5      	bne.n	fc78 <ccp_send+0x1e8>
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    fcac:	6976      	ldr	r6, [r6, #20]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    fcae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fcb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fcb2:	4628      	mov	r0, r5
    fcb4:	4798      	blx	r3
    fcb6:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    fcb8:	2300      	movs	r3, #0
    fcba:	65a3      	str	r3, [r4, #88]	; 0x58
    fcbc:	0c00      	lsrs	r0, r0, #16
    fcbe:	f011 fe53 	bl	21968 <__aeabi_ui2d>
    fcc2:	a311      	add	r3, pc, #68	; (adr r3, fd08 <ccp_send+0x278>)
    fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    fcc8:	f011 fec8 	bl	21a5c <__aeabi_dmul>
    fccc:	2200      	movs	r2, #0
    fcce:	2300      	movs	r3, #0
    fcd0:	f011 fd0e 	bl	216f0 <__adddf3>
    fcd4:	f012 f99a 	bl	2200c <__aeabi_d2uiz>
    fcd8:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fcda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fcde:	9800      	ldr	r0, [sp, #0]
    fce0:	f7fe fb66 	bl	e3b0 <os_sem_pend>
        assert(err == DPL_OK);
    fce4:	b950      	cbnz	r0, fcfc <ccp_send+0x26c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    fce6:	9800      	ldr	r0, [sp, #0]
    fce8:	f7fe fb30 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
    fcec:	2800      	cmp	r0, #0
    fcee:	d0c3      	beq.n	fc78 <ccp_send+0x1e8>
    fcf0:	2300      	movs	r3, #0
    fcf2:	461a      	mov	r2, r3
    fcf4:	4619      	mov	r1, r3
    fcf6:	4618      	mov	r0, r3
    fcf8:	f7fd fb32 	bl	d360 <__assert_func>
        assert(err == DPL_OK);
    fcfc:	2300      	movs	r3, #0
    fcfe:	461a      	mov	r2, r3
    fd00:	4619      	mov	r1, r3
    fd02:	4618      	mov	r0, r3
    fd04:	f7fd fb2c 	bl	d360 <__assert_func>
    fd08:	90690691 	.word	0x90690691
    fd0c:	3ff06906 	.word	0x3ff06906

0000fd10 <ccp_master_timer_ev_cb>:
{
    fd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ev != NULL);
    fd12:	b138      	cbz	r0, fd24 <ccp_master_timer_ev_cb+0x14>
    return ev->ev.ev_arg;
    fd14:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    fd16:	b15c      	cbz	r4, fd30 <ccp_master_timer_ev_cb+0x20>
    if (!ccp->status.enabled) {
    fd18:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fd1c:	f013 0f10 	tst.w	r3, #16
    fd20:	d10c      	bne.n	fd3c <ccp_master_timer_ev_cb+0x2c>
}
    fd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(ev != NULL);
    fd24:	2300      	movs	r3, #0
    fd26:	461a      	mov	r2, r3
    fd28:	4619      	mov	r1, r3
    fd2a:	4618      	mov	r0, r3
    fd2c:	f7fd fb18 	bl	d360 <__assert_func>
    assert(dpl_event_get_arg(ev));
    fd30:	2300      	movs	r3, #0
    fd32:	461a      	mov	r2, r3
    fd34:	4619      	mov	r1, r3
    fd36:	4618      	mov	r0, r3
    fd38:	f7fd fb12 	bl	d360 <__assert_func>
    CCP_STATS_INC(master_cnt);
    fd3c:	69a3      	ldr	r3, [r4, #24]
    fd3e:	3301      	adds	r3, #1
    fd40:	61a3      	str	r3, [r4, #24]
    ccp->status.timer_restarted = 0;
    fd42:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fd46:	f36f 03c3 	bfc	r3, #3, #1
    fd4a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    fd4e:	2100      	movs	r1, #0
    fd50:	4620      	mov	r0, r4
    fd52:	f7ff fe9d 	bl	fa90 <ccp_send>
    fd56:	f010 0f40 	tst.w	r0, #64	; 0x40
    fd5a:	d004      	beq.n	fd66 <ccp_master_timer_ev_cb+0x56>
        if (!ccp->status.enabled) {
    fd5c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fd60:	f013 0f10 	tst.w	r3, #16
    fd64:	d0dd      	beq.n	fd22 <ccp_master_timer_ev_cb+0x12>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    fd66:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fd6a:	f003 0318 	and.w	r3, r3, #24
    fd6e:	2b10      	cmp	r3, #16
    fd70:	d1d7      	bne.n	fd22 <ccp_master_timer_ev_cb+0x12>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    fd72:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    fd76:	f5a5 757a 	sub.w	r5, r5, #1000	; 0x3e8
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    fd7a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    fd7e:	f011 fdf3 	bl	21968 <__aeabi_ui2d>
    fd82:	a30f      	add	r3, pc, #60	; (adr r3, fdc0 <ccp_master_timer_ev_cb+0xb0>)
    fd84:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd88:	f011 fe68 	bl	21a5c <__aeabi_dmul>
    fd8c:	4606      	mov	r6, r0
    fd8e:	460f      	mov	r7, r1
    fd90:	4628      	mov	r0, r5
    fd92:	f011 fde9 	bl	21968 <__aeabi_ui2d>
    fd96:	4632      	mov	r2, r6
    fd98:	463b      	mov	r3, r7
    fd9a:	f011 fca9 	bl	216f0 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    fd9e:	f012 f935 	bl	2200c <__aeabi_d2uiz>
    fda2:	4601      	mov	r1, r0
    fda4:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    fda8:	f001 fffb 	bl	11da2 <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    fdac:	2800      	cmp	r0, #0
    fdae:	d1b8      	bne.n	fd22 <ccp_master_timer_ev_cb+0x12>
    fdb0:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    fdb4:	f043 0308 	orr.w	r3, r3, #8
    fdb8:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    fdbc:	e7b1      	b.n	fd22 <ccp_master_timer_ev_cb+0x12>
    fdbe:	bf00      	nop
    fdc0:	90690691 	.word	0x90690691
    fdc4:	3ff06906 	.word	0x3ff06906

0000fdc8 <uwb_ccp_init>:
{
    fdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdcc:	b08e      	sub	sp, #56	; 0x38
    assert(dev);
    fdce:	2800      	cmp	r0, #0
    fdd0:	d05c      	beq.n	fe8c <uwb_ccp_init+0xc4>
    fdd2:	460d      	mov	r5, r1
    fdd4:	4607      	mov	r7, r0
    assert(nframes > 1);
    fdd6:	2901      	cmp	r1, #1
    fdd8:	d95e      	bls.n	fe98 <uwb_ccp_init+0xd0>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    fdda:	2101      	movs	r1, #1
    fddc:	f7f8 fedd 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    fde0:	4604      	mov	r4, r0
    fde2:	2800      	cmp	r0, #0
    fde4:	d05e      	beq.n	fea4 <uwb_ccp_init+0xdc>
        assert(ccp->nframes == nframes);
    fde6:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    fdea:	42ab      	cmp	r3, r5
    fdec:	f040 80b7 	bne.w	ff5e <uwb_ccp_init+0x196>
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    fdf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    fdf4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    fdf8:	2300      	movs	r3, #0
    fdfa:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    fdfe:	f44f 7360 	mov.w	r3, #896	; 0x380
    fe02:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    fe06:	2101      	movs	r1, #1
    fe08:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    fe0c:	f7fe fa96 	bl	e33c <os_sem_init>
    assert(err == DPL_OK);
    fe10:	2800      	cmp	r0, #0
    fe12:	f040 80aa 	bne.w	ff6a <uwb_ccp_init+0x1a2>
    ccp->cbs = (struct uwb_mac_interface){
    fe16:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    fe1a:	223c      	movs	r2, #60	; 0x3c
    fe1c:	2100      	movs	r1, #0
    fe1e:	4628      	mov	r0, r5
    fe20:	f001 fb37 	bl	11492 <memset>
    fe24:	2301      	movs	r3, #1
    fe26:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    fe2a:	6724      	str	r4, [r4, #112]	; 0x70
    fe2c:	4b58      	ldr	r3, [pc, #352]	; (ff90 <uwb_ccp_init+0x1c8>)
    fe2e:	67a3      	str	r3, [r4, #120]	; 0x78
    fe30:	4b58      	ldr	r3, [pc, #352]	; (ff94 <uwb_ccp_init+0x1cc>)
    fe32:	67e3      	str	r3, [r4, #124]	; 0x7c
    fe34:	4b58      	ldr	r3, [pc, #352]	; (ff98 <uwb_ccp_init+0x1d0>)
    fe36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    fe3a:	4b58      	ldr	r3, [pc, #352]	; (ff9c <uwb_ccp_init+0x1d4>)
    fe3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    fe40:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    fe44:	4b56      	ldr	r3, [pc, #344]	; (ffa0 <uwb_ccp_init+0x1d8>)
    fe46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    fe4a:	4629      	mov	r1, r5
    fe4c:	4638      	mov	r0, r7
    fe4e:	f7f8 fe4f 	bl	8af0 <uwb_mac_append_interface>
    ccp_tasks_init(ccp);
    fe52:	4620      	mov	r0, r4
    fe54:	f7ff fc3e 	bl	f6d4 <ccp_tasks_init>
    ccp->status.initialized = 1;
    fe58:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    fe5c:	f043 0302 	orr.w	r3, r3, #2
    fe60:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    fe64:	1d25      	adds	r5, r4, #4
    fe66:	2214      	movs	r2, #20
    fe68:	9200      	str	r2, [sp, #0]
    fe6a:	4b4e      	ldr	r3, [pc, #312]	; (ffa4 <uwb_ccp_init+0x1dc>)
    fe6c:	2104      	movs	r1, #4
    fe6e:	4628      	mov	r0, r5
    fe70:	f004 fecc 	bl	14c0c <stats_init>
    assert(rc == 0);
    fe74:	2800      	cmp	r0, #0
    fe76:	d17e      	bne.n	ff76 <uwb_ccp_init+0x1ae>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    fe78:	4629      	mov	r1, r5
    fe7a:	484b      	ldr	r0, [pc, #300]	; (ffa8 <uwb_ccp_init+0x1e0>)
    fe7c:	f004 ff50 	bl	14d20 <stats_register>
    assert(rc == 0);
    fe80:	2800      	cmp	r0, #0
    fe82:	d17e      	bne.n	ff82 <uwb_ccp_init+0x1ba>
}
    fe84:	4620      	mov	r0, r4
    fe86:	b00e      	add	sp, #56	; 0x38
    fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(dev);
    fe8c:	2300      	movs	r3, #0
    fe8e:	461a      	mov	r2, r3
    fe90:	4619      	mov	r1, r3
    fe92:	4618      	mov	r0, r3
    fe94:	f7fd fa64 	bl	d360 <__assert_func>
    assert(nframes > 1);
    fe98:	2300      	movs	r3, #0
    fe9a:	461a      	mov	r2, r3
    fe9c:	4619      	mov	r1, r3
    fe9e:	4618      	mov	r0, r3
    fea0:	f7fd fa5e 	bl	d360 <__assert_func>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    fea4:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
    fea8:	0089      	lsls	r1, r1, #2
    feaa:	2001      	movs	r0, #1
    feac:	f001 f9db 	bl	11266 <calloc>
        assert(ccp);
    feb0:	4604      	mov	r4, r0
    feb2:	b1b8      	cbz	r0, fee4 <uwb_ccp_init+0x11c>
        ccp->status.selfmalloc = 1;
    feb4:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    feb8:	f043 0301 	orr.w	r3, r3, #1
    febc:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    fec0:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
        uwb_ccp_frame_t ccp_default = {
    fec4:	2230      	movs	r2, #48	; 0x30
    fec6:	2100      	movs	r1, #0
    fec8:	a802      	add	r0, sp, #8
    feca:	f001 fae2 	bl	11492 <memset>
    fece:	23c5      	movs	r3, #197	; 0xc5
    fed0:	f88d 3008 	strb.w	r3, [sp, #8]
    fed4:	23ff      	movs	r3, #255	; 0xff
    fed6:	f88d 3009 	strb.w	r3, [sp, #9]
    feda:	2304      	movs	r3, #4
    fedc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        for (i = 0; i < ccp->nframes; i++){
    fee0:	2600      	movs	r6, #0
    fee2:	e022      	b.n	ff2a <uwb_ccp_init+0x162>
        assert(ccp);
    fee4:	2300      	movs	r3, #0
    fee6:	461a      	mov	r2, r3
    fee8:	4619      	mov	r1, r3
    feea:	4618      	mov	r0, r3
    feec:	f7fd fa38 	bl	d360 <__assert_func>
            assert(ccp->frames[i]);
    fef0:	2300      	movs	r3, #0
    fef2:	461a      	mov	r2, r3
    fef4:	4619      	mov	r1, r3
    fef6:	4618      	mov	r0, r3
    fef8:	f7fd fa32 	bl	d360 <__assert_func>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    fefc:	46ae      	mov	lr, r5
    fefe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    ff02:	f8cc 0000 	str.w	r0, [ip]
    ff06:	f8cc 1004 	str.w	r1, [ip, #4]
    ff0a:	f8cc 2008 	str.w	r2, [ip, #8]
    ff0e:	f8cc 300c 	str.w	r3, [ip, #12]
    ff12:	4675      	mov	r5, lr
    ff14:	f10c 0c10 	add.w	ip, ip, #16
    ff18:	45c6      	cmp	lr, r8
    ff1a:	d1ef      	bne.n	fefc <uwb_ccp_init+0x134>
            ccp->frames[i]->seq_num = 0;
    ff1c:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    ff20:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    ff24:	2200      	movs	r2, #0
    ff26:	705a      	strb	r2, [r3, #1]
        for (i = 0; i < ccp->nframes; i++){
    ff28:	3601      	adds	r6, #1
    ff2a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    ff2e:	42b3      	cmp	r3, r6
    ff30:	dd0e      	ble.n	ff50 <uwb_ccp_init+0x188>
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    ff32:	2130      	movs	r1, #48	; 0x30
    ff34:	2001      	movs	r0, #1
    ff36:	f001 f996 	bl	11266 <calloc>
    ff3a:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    ff3e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
            assert(ccp->frames[i]);
    ff42:	2800      	cmp	r0, #0
    ff44:	d0d4      	beq.n	fef0 <uwb_ccp_init+0x128>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    ff46:	ad02      	add	r5, sp, #8
    ff48:	4684      	mov	ip, r0
    ff4a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    ff4e:	e7d5      	b.n	fefc <uwb_ccp_init+0x134>
        ccp->dev_inst = dev;
    ff50:	6027      	str	r7, [r4, #0]
        ccp->task_prio = dev->task_prio - 0x4;
    ff52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    ff56:	3b04      	subs	r3, #4
    ff58:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    ff5c:	e748      	b.n	fdf0 <uwb_ccp_init+0x28>
        assert(ccp->nframes == nframes);
    ff5e:	2300      	movs	r3, #0
    ff60:	461a      	mov	r2, r3
    ff62:	4619      	mov	r1, r3
    ff64:	4618      	mov	r0, r3
    ff66:	f7fd f9fb 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
    ff6a:	2300      	movs	r3, #0
    ff6c:	461a      	mov	r2, r3
    ff6e:	4619      	mov	r1, r3
    ff70:	4618      	mov	r0, r3
    ff72:	f7fd f9f5 	bl	d360 <__assert_func>
    assert(rc == 0);
    ff76:	2300      	movs	r3, #0
    ff78:	461a      	mov	r2, r3
    ff7a:	4619      	mov	r1, r3
    ff7c:	4618      	mov	r0, r3
    ff7e:	f7fd f9ef 	bl	d360 <__assert_func>
    assert(rc == 0);
    ff82:	2300      	movs	r3, #0
    ff84:	461a      	mov	r2, r3
    ff86:	4619      	mov	r1, r3
    ff88:	4618      	mov	r0, r3
    ff8a:	f7fd f9e9 	bl	d360 <__assert_func>
    ff8e:	bf00      	nop
    ff90:	0000f511 	.word	0x0000f511
    ff94:	000101a1 	.word	0x000101a1
    ff98:	0000f4a3 	.word	0x0000f4a3
    ff9c:	0000f44f 	.word	0x0000f44f
    ffa0:	0000f421 	.word	0x0000f421
    ffa4:	00023acc 	.word	0x00023acc
    ffa8:	000239a4 	.word	0x000239a4

0000ffac <uwb_ccp_free>:
{
    ffac:	b538      	push	{r3, r4, r5, lr}
    assert(inst);
    ffae:	b1f8      	cbz	r0, fff0 <uwb_ccp_free+0x44>
    ffb0:	4605      	mov	r5, r0
    inst->status.enabled = 0;
    ffb2:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    ffb6:	f36f 1304 	bfc	r3, #4, #1
    ffba:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    ffbe:	30b0      	adds	r0, #176	; 0xb0
    ffc0:	f7fe f9c4 	bl	e34c <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    ffc4:	462c      	mov	r4, r5
    ffc6:	f8b5 106e 	ldrh.w	r1, [r5, #110]	; 0x6e
    ffca:	f854 0bf4 	ldr.w	r0, [r4], #244
    ffce:	f7f8 fdb4 	bl	8b3a <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    ffd2:	4620      	mov	r0, r4
    ffd4:	f001 fee9 	bl	11daa <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    ffd8:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    ffdc:	f013 0f01 	tst.w	r3, #1
    ffe0:	d11b      	bne.n	1001a <uwb_ccp_free+0x6e>
        inst->status.initialized = 0;
    ffe2:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    ffe6:	f36f 0341 	bfc	r3, #1, #1
    ffea:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
}
    ffee:	e013      	b.n	10018 <uwb_ccp_free+0x6c>
    assert(inst);
    fff0:	2300      	movs	r3, #0
    fff2:	461a      	mov	r2, r3
    fff4:	4619      	mov	r1, r3
    fff6:	4618      	mov	r0, r3
    fff8:	f7fd f9b2 	bl	d360 <__assert_func>
            free(inst->frames[i]);
    fffc:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
   10000:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   10004:	f001 f9fe 	bl	11404 <free>
        for (i = 0; i < inst->nframes; i++) {
   10008:	3401      	adds	r4, #1
   1000a:	f8b5 30ec 	ldrh.w	r3, [r5, #236]	; 0xec
   1000e:	42a3      	cmp	r3, r4
   10010:	dcf4      	bgt.n	fffc <uwb_ccp_free+0x50>
        free(inst);
   10012:	4628      	mov	r0, r5
   10014:	f001 f9f6 	bl	11404 <free>
}
   10018:	bd38      	pop	{r3, r4, r5, pc}
        for (i = 0; i < inst->nframes; i++) {
   1001a:	2400      	movs	r4, #0
   1001c:	e7f5      	b.n	1000a <uwb_ccp_free+0x5e>

0001001e <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
   1001e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10022:	4604      	mov	r4, r0
   10024:	460e      	mov	r6, r1
    struct uwb_dev * inst = ccp->dev_inst;
   10026:	f8d0 8000 	ldr.w	r8, [r0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
   1002a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   1002e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10032:	4640      	mov	r0, r8
   10034:	4798      	blx	r3
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
   10036:	2c00      	cmp	r4, #0
   10038:	d05e      	beq.n	100f8 <uwb_ccp_start+0xda>
   1003a:	4605      	mov	r5, r0
    ccp->idx = 0x0;
   1003c:	2200      	movs	r2, #0
   1003e:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
    ccp->status.valid = false;
   10042:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   10046:	f362 0382 	bfi	r3, r2, #2, #1
   1004a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_euid = 0x0;
   1004e:	2200      	movs	r2, #0
   10050:	2300      	movs	r3, #0
   10052:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   10056:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->config.role = role;
   1005a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   1005e:	f366 0344 	bfi	r3, r6, #1, #4
   10062:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    ccp->status.enabled = 1;
   10066:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   1006a:	f043 0310 	orr.w	r3, r3, #16
   1006e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
   10072:	f001 fe9e 	bl	11db2 <dpl_cputime_get32>
   10076:	1b40      	subs	r0, r0, r5
   10078:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dev->uw_funcs->uf_read_systime(dev));
   1007c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   10080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10082:	4640      	mov	r0, r8
   10084:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
   10086:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1008a:	041a      	lsls	r2, r3, #16
   1008c:	1a80      	subs	r0, r0, r2
   1008e:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
   10092:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
   10096:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
   1009a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   1009e:	040a      	lsls	r2, r1, #16
   100a0:	1812      	adds	r2, r2, r0
   100a2:	eb43 4311 	adc.w	r3, r3, r1, lsr #16

    if (ccp->config.role == CCP_ROLE_MASTER){
   100a6:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
   100aa:	f011 0f1e 	tst.w	r1, #30
   100ae:	d129      	bne.n	10104 <uwb_ccp_start+0xe6>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
   100b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   100b4:	617a      	str	r2, [r7, #20]
   100b6:	763b      	strb	r3, [r7, #24]
   100b8:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
   100bc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->transmission_timestamp.hi = 0;
   100c0:	2300      	movs	r3, #0
   100c2:	767b      	strb	r3, [r7, #25]
   100c4:	76bb      	strb	r3, [r7, #26]
   100c6:	7efb      	ldrb	r3, [r7, #27]
   100c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   100cc:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
   100ce:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   100d2:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   100d6:	1b40      	subs	r0, r0, r5
   100d8:	f163 0300 	sbc.w	r3, r3, #0
   100dc:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
   100e0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->local_epoch &= UWB_DTU_40BMASK;
   100e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   100e8:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

    ccp_timer_init(ccp, role);
   100ec:	4631      	mov	r1, r6
   100ee:	4620      	mov	r0, r4
   100f0:	f7ff fb16 	bl	f720 <ccp_timer_init>
}
   100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ccp);
   100f8:	2300      	movs	r3, #0
   100fa:	461a      	mov	r2, r3
   100fc:	4619      	mov	r1, r3
   100fe:	4618      	mov	r0, r3
   10100:	f7fd f92e 	bl	d360 <__assert_func>
        ccp->local_epoch = frame->reception_timestamp = ts;
   10104:	623a      	str	r2, [r7, #32]
   10106:	627b      	str	r3, [r7, #36]	; 0x24
   10108:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
   1010c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   10110:	e7dd      	b.n	100ce <uwb_ccp_start+0xb0>

00010112 <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
   10112:	b510      	push	{r4, lr}
    assert(ccp);
   10114:	b1a8      	cbz	r0, 10142 <uwb_ccp_stop+0x30>
   10116:	4604      	mov	r4, r0
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
   10118:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
   1011c:	f36f 1304 	bfc	r3, #4, #1
   10120:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
   10124:	30f4      	adds	r0, #244	; 0xf4
   10126:	f001 fe40 	bl	11daa <dpl_cputime_timer_stop>
   1012a:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
   1012e:	b93b      	cbnz	r3, 10140 <uwb_ccp_stop+0x2e>
        uwb_phy_forcetrxoff(ccp->dev_inst);
   10130:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
   10132:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   10138:	4798      	blx	r3
   1013a:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
   1013e:	b133      	cbz	r3, 1014e <uwb_ccp_stop+0x3c>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
        }
    }
}
   10140:	bd10      	pop	{r4, pc}
    assert(ccp);
   10142:	2300      	movs	r3, #0
   10144:	461a      	mov	r2, r3
   10146:	4619      	mov	r1, r3
   10148:	4618      	mov	r0, r3
   1014a:	f7fd f909 	bl	d360 <__assert_func>
   1014e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   10152:	f7fe f8fb 	bl	e34c <os_sem_release>
            assert(err == DPL_OK);
   10156:	2800      	cmp	r0, #0
   10158:	d0f2      	beq.n	10140 <uwb_ccp_stop+0x2e>
   1015a:	2300      	movs	r3, #0
   1015c:	461a      	mov	r2, r3
   1015e:	4619      	mov	r1, r3
   10160:	4618      	mov	r0, r3
   10162:	f7fd f8fd 	bl	d360 <__assert_func>
	...

00010168 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
   10168:	b570      	push	{r4, r5, r6, lr}
   1016a:	4619      	mov	r1, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
   1016c:	6e86      	ldr	r6, [r0, #104]	; 0x68
    if (!wcs) return value;
   1016e:	b19e      	cbz	r6, 10198 <uwb_ccp_skew_compensation_ui64+0x30>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
   10170:	4610      	mov	r0, r2
   10172:	f011 fc3d 	bl	219f0 <__aeabi_ul2d>
   10176:	4604      	mov	r4, r0
   10178:	460d      	mov	r5, r1
   1017a:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
   1017e:	2000      	movs	r0, #0
   10180:	4906      	ldr	r1, [pc, #24]	; (1019c <uwb_ccp_skew_compensation_ui64+0x34>)
   10182:	f011 fab3 	bl	216ec <__aeabi_dsub>
   10186:	4602      	mov	r2, r0
   10188:	460b      	mov	r3, r1
   1018a:	4620      	mov	r0, r4
   1018c:	4629      	mov	r1, r5
   1018e:	f011 fc65 	bl	21a5c <__aeabi_dmul>
   10192:	f012 f84b 	bl	2222c <__aeabi_d2ulz>
#endif
    return value;
}
   10196:	bd70      	pop	{r4, r5, r6, pc}
    if (!wcs) return value;
   10198:	4610      	mov	r0, r2
   1019a:	e7fc      	b.n	10196 <uwb_ccp_skew_compensation_ui64+0x2e>
   1019c:	3ff00000 	.word	0x3ff00000

000101a0 <rx_complete_cb>:
{
   101a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   101a4:	b08f      	sub	sp, #60	; 0x3c
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
   101a6:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
   101a8:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   101ac:	f013 0f1e 	tst.w	r3, #30
   101b0:	f000 8230 	beq.w	10614 <rx_complete_cb+0x474>
   101b4:	4605      	mov	r5, r0
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
   101b6:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
   101ba:	2bc5      	cmp	r3, #197	; 0xc5
   101bc:	d00e      	beq.n	101dc <rx_complete_cb+0x3c>
   101be:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
   101c2:	2b00      	cmp	r3, #0
   101c4:	f040 822a 	bne.w	1061c <rx_complete_cb+0x47c>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
   101c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   101ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   101cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   101d0:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
   101d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   101d4:	3301      	adds	r3, #1
   101d6:	63e3      	str	r3, [r4, #60]	; 0x3c
            return true;
   101d8:	2001      	movs	r0, #1
   101da:	e21c      	b.n	10616 <rx_complete_cb+0x476>
   101dc:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) != 0){
   101e0:	b99b      	cbnz	r3, 1020a <rx_complete_cb+0x6a>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
   101e2:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   101e6:	3301      	adds	r3, #1
   101e8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
   101ec:	fb93 f1f2 	sdiv	r1, r3, r2
   101f0:	fb02 3311 	mls	r3, r2, r1, r3
   101f4:	33e0      	adds	r3, #224	; 0xe0
   101f6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
   101fa:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
   101fe:	3b20      	subs	r3, #32
   10200:	b29b      	uxth	r3, r3
   10202:	2b10      	cmp	r3, #16
   10204:	d906      	bls.n	10214 <rx_complete_cb+0x74>
        return true;
   10206:	2001      	movs	r0, #1
   10208:	e205      	b.n	10616 <rx_complete_cb+0x476>
        CCP_STATS_INC(rx_unsolicited);
   1020a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1020c:	3301      	adds	r3, #1
   1020e:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
   10210:	2000      	movs	r0, #0
   10212:	e200      	b.n	10616 <rx_complete_cb+0x476>
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
   10214:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
   10218:	681f      	ldr	r7, [r3, #0]
   1021a:	6858      	ldr	r0, [r3, #4]
   1021c:	6899      	ldr	r1, [r3, #8]
   1021e:	68da      	ldr	r2, [r3, #12]
   10220:	6037      	str	r7, [r6, #0]
   10222:	6070      	str	r0, [r6, #4]
   10224:	60b1      	str	r1, [r6, #8]
   10226:	60f2      	str	r2, [r6, #12]
   10228:	691f      	ldr	r7, [r3, #16]
   1022a:	6958      	ldr	r0, [r3, #20]
   1022c:	6999      	ldr	r1, [r3, #24]
   1022e:	69da      	ldr	r2, [r3, #28]
   10230:	6137      	str	r7, [r6, #16]
   10232:	6170      	str	r0, [r6, #20]
   10234:	61b1      	str	r1, [r6, #24]
   10236:	61f2      	str	r2, [r6, #28]
    if (inst->status.lde_error)
   10238:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
   1023c:	f013 0f04 	tst.w	r3, #4
   10240:	f040 81ee 	bne.w	10620 <rx_complete_cb+0x480>
    return (dev->uw_funcs->uf_stop_rx(dev));
   10244:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   10248:	4628      	mov	r0, r5
   1024a:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
   1024c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   10250:	3301      	adds	r3, #1
   10252:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
   10256:	7873      	ldrb	r3, [r6, #1]
   10258:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
   1025c:	2700      	movs	r7, #0
   1025e:	f884 70f1 	strb.w	r7, [r4, #241]	; 0xf1
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
   10262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10266:	4628      	mov	r0, r5
   10268:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
   1026a:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
   1026e:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
   10272:	f001 fd9e 	bl	11db2 <dpl_cputime_get32>
   10276:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
   1027a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1027c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1027e:	4628      	mov	r0, r5
   10280:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
   10282:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
   10286:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
   10288:	0840      	lsrs	r0, r0, #1
   1028a:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
   1028e:	0c00      	lsrs	r0, r0, #16
   10290:	f011 fb6a 	bl	21968 <__aeabi_ui2d>
   10294:	a3e6      	add	r3, pc, #920	; (adr r3, 10630 <rx_complete_cb+0x490>)
   10296:	e9d3 2300 	ldrd	r2, r3, [r3]
   1029a:	f011 fbdf 	bl	21a5c <__aeabi_dmul>
   1029e:	4680      	mov	r8, r0
   102a0:	4689      	mov	r9, r1
   102a2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   102a6:	f011 fb5f 	bl	21968 <__aeabi_ui2d>
   102aa:	4642      	mov	r2, r8
   102ac:	464b      	mov	r3, r9
   102ae:	f011 fa1d 	bl	216ec <__aeabi_dsub>
   102b2:	f011 feab 	bl	2200c <__aeabi_d2uiz>
   102b6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
   102ba:	6527      	str	r7, [r4, #80]	; 0x50
   102bc:	2200      	movs	r2, #0
   102be:	2300      	movs	r3, #0
   102c0:	4640      	mov	r0, r8
   102c2:	4649      	mov	r1, r9
   102c4:	f011 fa14 	bl	216f0 <__adddf3>
   102c8:	f011 fea0 	bl	2200c <__aeabi_d2uiz>
   102cc:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
   102ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   102d0:	3301      	adds	r3, #1
   102d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
   102d4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
   102d8:	f367 0341 	bfi	r3, r7, #1, #1
   102dc:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
   102e0:	6970      	ldr	r0, [r6, #20]
   102e2:	69b2      	ldr	r2, [r6, #24]
   102e4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
   102e8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   102ec:	4288      	cmp	r0, r1
   102ee:	eb72 0303 	sbcs.w	r3, r2, r3
   102f2:	d30c      	bcc.n	1030e <rx_complete_cb+0x16e>
        frame->euid != ccp->master_euid) {
   102f4:	f8d6 0002 	ldr.w	r0, [r6, #2]
   102f8:	f8d6 2006 	ldr.w	r2, [r6, #6]
   102fc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
   10300:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
   10304:	429a      	cmp	r2, r3
   10306:	bf08      	it	eq
   10308:	4288      	cmpeq	r0, r1
   1030a:	f000 80ce 	beq.w	104aa <rx_complete_cb+0x30a>
        ccp->master_euid = frame->euid;
   1030e:	f8d6 2002 	ldr.w	r2, [r6, #2]
   10312:	f8d6 3006 	ldr.w	r3, [r6, #6]
   10316:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
   1031a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
   1031e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   10322:	f36f 0382 	bfc	r3, #2, #1
   10326:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid_count = 0;
   1032a:	b2db      	uxtb	r3, r3
   1032c:	f36f 03c5 	bfc	r3, #3, #3
   10330:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_epoch.timestamp = frame->transmission_timestamp.timestamp;
   10334:	6972      	ldr	r2, [r6, #20]
   10336:	69b3      	ldr	r3, [r6, #24]
   10338:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
   1033c:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
   10340:	f8d5 24e8 	ldr.w	r2, [r5, #1256]	; 0x4e8
   10344:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
   10348:	6232      	str	r2, [r6, #32]
   1034a:	6273      	str	r3, [r6, #36]	; 0x24
   1034c:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
   10350:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->period = (frame->transmission_interval >> 16);
   10354:	68f3      	ldr	r3, [r6, #12]
   10356:	7c32      	ldrb	r2, [r6, #16]
   10358:	0c1b      	lsrs	r3, r3, #16
   1035a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1035e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
   10362:	8bf1      	ldrh	r1, [r6, #30]
   10364:	4620      	mov	r0, r4
   10366:	f7ff f827 	bl	f3b8 <adjust_for_epoch_to_rm>
    frame->carrier_integrator = inst->carrier_integrator;
   1036a:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
   1036e:	62b3      	str	r3, [r6, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
   10370:	f995 352c 	ldrsb.w	r3, [r5, #1324]	; 0x52c
   10374:	2b00      	cmp	r3, #0
   10376:	f2c0 80b3 	blt.w	104e0 <rx_complete_cb+0x340>
        frame->rxttcko = 0;
   1037a:	2300      	movs	r3, #0
   1037c:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
   10380:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
   10384:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   10388:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    if (ccp->tof_comp_cb) {
   1038c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
   10390:	b19b      	cbz	r3, 103ba <rx_complete_cb+0x21a>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
   10392:	8970      	ldrh	r0, [r6, #10]
   10394:	4798      	blx	r3
   10396:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
   10398:	2300      	movs	r3, #0
   1039a:	4620      	mov	r0, r4
   1039c:	f7ff fee4 	bl	10168 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
   103a0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   103a4:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
   103a8:	1a1b      	subs	r3, r3, r0
   103aa:	f162 0200 	sbc.w	r2, r2, #0
   103ae:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
   103b2:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
   103b6:	6233      	str	r3, [r6, #32]
   103b8:	6272      	str	r2, [r6, #36]	; 0x24
    if (frame->rpt_count != 0) {
   103ba:	7f33      	ldrb	r3, [r6, #28]
   103bc:	2b00      	cmp	r3, #0
   103be:	d05c      	beq.n	1047a <rx_complete_cb+0x2da>
        CCP_STATS_INC(rx_relayed);
   103c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   103c2:	3301      	adds	r3, #1
   103c4:	6323      	str	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
   103c6:	f896 c010 	ldrb.w	ip, [r6, #16]
   103ca:	f11c 0c01 	adds.w	ip, ip, #1
   103ce:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
   103d0:	ea4f 430c 	mov.w	r3, ip, lsl #16
   103d4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
   103d8:	68f1      	ldr	r1, [r6, #12]
   103da:	f896 e010 	ldrb.w	lr, [r6, #16]
   103de:	1a7a      	subs	r2, r7, r1
   103e0:	eb6c 030e 	sbc.w	r3, ip, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
   103e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   103e8:	9001      	str	r0, [sp, #4]
   103ea:	1bc9      	subs	r1, r1, r7
   103ec:	ebae 0c0c 	sub.w	ip, lr, ip
   103f0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   103f4:	1809      	adds	r1, r1, r0
   103f6:	9801      	ldr	r0, [sp, #4]
   103f8:	eb40 000c 	adc.w	r0, r0, ip
   103fc:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
   10400:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
   10404:	4620      	mov	r0, r4
   10406:	f7ff feaf 	bl	10168 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
   1040a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   1040e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   10412:	1a12      	subs	r2, r2, r0
   10414:	eb63 0301 	sbc.w	r3, r3, r1
   10418:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1041c:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
   10420:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
   10424:	6232      	str	r2, [r6, #32]
   10426:	6273      	str	r3, [r6, #36]	; 0x24
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
   10428:	0c00      	lsrs	r0, r0, #16
   1042a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1042e:	0c09      	lsrs	r1, r1, #16
   10430:	f011 fade 	bl	219f0 <__aeabi_ul2d>
   10434:	a37e      	add	r3, pc, #504	; (adr r3, 10630 <rx_complete_cb+0x490>)
   10436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1043a:	f011 fb0f 	bl	21a5c <__aeabi_dmul>
   1043e:	4680      	mov	r8, r0
   10440:	4689      	mov	r9, r1
   10442:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
   10446:	f011 fa8f 	bl	21968 <__aeabi_ui2d>
   1044a:	4642      	mov	r2, r8
   1044c:	464b      	mov	r3, r9
   1044e:	f011 f94d 	bl	216ec <__aeabi_dsub>
   10452:	f011 fddb 	bl	2200c <__aeabi_d2uiz>
   10456:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
   1045a:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
   1045e:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
   10462:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
   10466:	f886 702b 	strb.w	r7, [r6, #43]	; 0x2b
        frame->rxttcko = 0;
   1046a:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
   1046e:	f886 702d 	strb.w	r7, [r6, #45]	; 0x2d
   10472:	f886 702e 	strb.w	r7, [r6, #46]	; 0x2e
   10476:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
   1047a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
   1047e:	4b6a      	ldr	r3, [pc, #424]	; (10628 <rx_complete_cb+0x488>)
   10480:	4013      	ands	r3, r2
   10482:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
   10486:	d02f      	beq.n	104e8 <rx_complete_cb+0x348>
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   10488:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
   1048c:	2e00      	cmp	r6, #0
   1048e:	f040 80b0 	bne.w	105f2 <rx_complete_cb+0x452>
    if (ccp->config.postprocess && ccp->status.valid) {
   10492:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
   10496:	4b65      	ldr	r3, [pc, #404]	; (1062c <rx_complete_cb+0x48c>)
   10498:	4393      	bics	r3, r2
   1049a:	f000 80b4 	beq.w	10606 <rx_complete_cb+0x466>
   1049e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   104a2:	f7fd ff53 	bl	e34c <os_sem_release>
    return false;
   104a6:	2000      	movs	r0, #0
   104a8:	e0b5      	b.n	10616 <rx_complete_cb+0x476>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
   104aa:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   104ae:	f013 0f38 	tst.w	r3, #56	; 0x38
   104b2:	d106      	bne.n	104c2 <rx_complete_cb+0x322>
            ccp->status.valid_count++;
   104b4:	f3c3 02c2 	ubfx	r2, r3, #3, #3
   104b8:	3201      	adds	r2, #1
   104ba:	f362 03c5 	bfi	r3, r2, #3, #3
   104be:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
   104c2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   104c6:	f3c3 0280 	ubfx	r2, r3, #2, #1
   104ca:	f003 0138 	and.w	r1, r3, #56	; 0x38
   104ce:	2908      	cmp	r1, #8
   104d0:	bf08      	it	eq
   104d2:	f042 0201 	orreq.w	r2, r2, #1
   104d6:	f362 0382 	bfi	r3, r2, #2, #1
   104da:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   104de:	e729      	b.n	10334 <rx_complete_cb+0x194>
        frame->rxttcko = inst->rxttcko;
   104e0:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
   104e4:	62f3      	str	r3, [r6, #44]	; 0x2c
   104e6:	e751      	b.n	1038c <rx_complete_cb+0x1ec>
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
   104e8:	f896 e01c 	ldrb.w	lr, [r6, #28]
   104ec:	7f73      	ldrb	r3, [r6, #29]
   104ee:	459e      	cmp	lr, r3
   104f0:	d2ca      	bcs.n	10488 <rx_complete_cb+0x2e8>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
   104f2:	4637      	mov	r7, r6
   104f4:	f10d 0808 	add.w	r8, sp, #8
   104f8:	f106 0930 	add.w	r9, r6, #48	; 0x30
   104fc:	46c4      	mov	ip, r8
   104fe:	6838      	ldr	r0, [r7, #0]
   10500:	6879      	ldr	r1, [r7, #4]
   10502:	68ba      	ldr	r2, [r7, #8]
   10504:	68fb      	ldr	r3, [r7, #12]
   10506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1050a:	3710      	adds	r7, #16
   1050c:	46e0      	mov	r8, ip
   1050e:	454f      	cmp	r7, r9
   10510:	d1f4      	bne.n	104fc <rx_complete_cb+0x35c>
        tx_frame.short_address = inst->my_short_address;
   10512:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
   10516:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
   1051a:	f10e 0301 	add.w	r3, lr, #1
   1051e:	b2db      	uxtb	r3, r3
   10520:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        uint64_t tx_timestamp = frame->reception_timestamp;
   10524:	6a31      	ldr	r1, [r6, #32]
   10526:	6a70      	ldr	r0, [r6, #36]	; 0x24
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
   10528:	f04f 0800 	mov.w	r8, #0
   1052c:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   10530:	0412      	lsls	r2, r2, #16
   10532:	fba3 3202 	umull	r3, r2, r3, r2
   10536:	185b      	adds	r3, r3, r1
   10538:	eb42 0000 	adc.w	r0, r2, r0
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
   1053c:	f8b5 24c2 	ldrh.w	r2, [r5, #1218]	; 0x4c2
   10540:	f002 0203 	and.w	r2, r2, #3
   10544:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   10548:	0409      	lsls	r1, r1, #16
   1054a:	fba2 2901 	umull	r2, r9, r2, r1
   1054e:	18d3      	adds	r3, r2, r3
   10550:	eb49 0900 	adc.w	r9, r9, r0
        tx_timestamp &= 0x0FFFFFFFE00UL;
   10554:	f423 77ff 	bic.w	r7, r3, #510	; 0x1fe
   10558:	f027 0701 	bic.w	r7, r7, #1
   1055c:	f009 09ff 	and.w	r9, r9, #255	; 0xff
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   10560:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10562:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10564:	463a      	mov	r2, r7
   10566:	464b      	mov	r3, r9
   10568:	4628      	mov	r0, r5
   1056a:	4788      	blx	r1
        tx_timestamp += inst->tx_antenna_delay;
   1056c:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
   10570:	19df      	adds	r7, r3, r7
   10572:	f149 0900 	adc.w	r9, r9, #0
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
   10576:	6a32      	ldr	r2, [r6, #32]
   10578:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1057a:	1aba      	subs	r2, r7, r2
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
   1057c:	eb69 0303 	sbc.w	r3, r9, r3
   10580:	4620      	mov	r0, r4
   10582:	f7ff fdf1 	bl	10168 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
   10586:	9b07      	ldr	r3, [sp, #28]
   10588:	181b      	adds	r3, r3, r0
   1058a:	9a08      	ldr	r2, [sp, #32]
   1058c:	eb41 0202 	adc.w	r2, r1, r2
   10590:	9307      	str	r3, [sp, #28]
   10592:	9208      	str	r2, [sp, #32]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
   10594:	68f3      	ldr	r3, [r6, #12]
   10596:	7c32      	ldrb	r2, [r6, #16]
   10598:	1a1b      	subs	r3, r3, r0
   1059a:	eb62 0101 	sbc.w	r1, r2, r1
   1059e:	9305      	str	r3, [sp, #20]
   105a0:	f88d 1018 	strb.w	r1, [sp, #24]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   105a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   105a6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   105a8:	2320      	movs	r3, #32
   105aa:	4642      	mov	r2, r8
   105ac:	a902      	add	r1, sp, #8
   105ae:	4628      	mov	r0, r5
   105b0:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   105b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   105b4:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   105b6:	4643      	mov	r3, r8
   105b8:	4642      	mov	r2, r8
   105ba:	2120      	movs	r1, #32
   105bc:	4628      	mov	r0, r5
   105be:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
   105c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   105c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   105c4:	4628      	mov	r0, r5
   105c6:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
   105c8:	f3c0 0380 	ubfx	r3, r0, #2, #1
   105cc:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
   105d0:	f363 1286 	bfi	r2, r3, #6, #1
   105d4:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
   105d8:	b2d3      	uxtb	r3, r2
   105da:	f013 0f40 	tst.w	r3, #64	; 0x40
   105de:	d003      	beq.n	105e8 <rx_complete_cb+0x448>
            CCP_STATS_INC(tx_relay_error);
   105e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   105e2:	3301      	adds	r3, #1
   105e4:	64a3      	str	r3, [r4, #72]	; 0x48
   105e6:	e74f      	b.n	10488 <rx_complete_cb+0x2e8>
            CCP_STATS_INC(tx_relay_ok);
   105e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   105ea:	3301      	adds	r3, #1
   105ec:	64e3      	str	r3, [r4, #76]	; 0x4c
   105ee:	e74b      	b.n	10488 <rx_complete_cb+0x2e8>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
   105f0:	6bb6      	ldr	r6, [r6, #56]	; 0x38
   105f2:	2e00      	cmp	r6, #0
   105f4:	f43f af4d 	beq.w	10492 <rx_complete_cb+0x2f2>
            if (lcbs != NULL && lcbs->superframe_cb) {
   105f8:	6b73      	ldr	r3, [r6, #52]	; 0x34
   105fa:	2b00      	cmp	r3, #0
   105fc:	d0f8      	beq.n	105f0 <rx_complete_cb+0x450>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
   105fe:	4631      	mov	r1, r6
   10600:	4628      	mov	r0, r5
   10602:	4798      	blx	r3
   10604:	e7f4      	b.n	105f0 <rx_complete_cb+0x450>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   10606:	f7fd fa8d 	bl	db24 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1060a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
   1060e:	f7fd f9db 	bl	d9c8 <os_eventq_put>
}
   10612:	e744      	b.n	1049e <rx_complete_cb+0x2fe>
        return true;
   10614:	2001      	movs	r0, #1
}
   10616:	b00f      	add	sp, #60	; 0x3c
   10618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   1061c:	2000      	movs	r0, #0
   1061e:	e7fa      	b.n	10616 <rx_complete_cb+0x476>
        return true;
   10620:	2001      	movs	r0, #1
   10622:	e7f8      	b.n	10616 <rx_complete_cb+0x476>
   10624:	f3af 8000 	nop.w
   10628:	001e0004 	.word	0x001e0004
   1062c:	00010004 	.word	0x00010004
   10630:	90690691 	.word	0x90690691
   10634:	3ff06906 	.word	0x3ff06906

00010638 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
   10638:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
   1063a:	f001 fbba 	bl	11db2 <dpl_cputime_get32>
   1063e:	4601      	mov	r1, r0
   10640:	4808      	ldr	r0, [pc, #32]	; (10664 <uwb_ccp_pkg_init+0x2c>)
   10642:	f001 fb27 	bl	11c94 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   10646:	2400      	movs	r4, #0
   10648:	e000      	b.n	1064c <uwb_ccp_pkg_init+0x14>
   1064a:	3401      	adds	r4, #1
   1064c:	2c02      	cmp	r4, #2
   1064e:	dc08      	bgt.n	10662 <uwb_ccp_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
   10650:	4620      	mov	r0, r4
   10652:	f7f8 fa1d 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   10656:	2800      	cmp	r0, #0
   10658:	d0f7      	beq.n	1064a <uwb_ccp_pkg_init+0x12>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
   1065a:	2102      	movs	r1, #2
   1065c:	f7ff fbb4 	bl	fdc8 <uwb_ccp_init>
   10660:	e7f3      	b.n	1064a <uwb_ccp_pkg_init+0x12>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
   10662:	bd10      	pop	{r4, pc}
   10664:	000239a8 	.word	0x000239a8

00010668 <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
   10668:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1066a:	2400      	movs	r4, #0
   1066c:	e003      	b.n	10676 <uwb_ccp_pkg_down+0xe>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
   1066e:	4628      	mov	r0, r5
   10670:	f7ff fc9c 	bl	ffac <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   10674:	3401      	adds	r4, #1
   10676:	2c02      	cmp	r4, #2
   10678:	dc12      	bgt.n	106a0 <uwb_ccp_pkg_down+0x38>
        udev = uwb_dev_idx_lookup(i);
   1067a:	4620      	mov	r0, r4
   1067c:	f7f8 fa08 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   10680:	2800      	cmp	r0, #0
   10682:	d0f7      	beq.n	10674 <uwb_ccp_pkg_down+0xc>
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   10684:	2101      	movs	r1, #1
   10686:	f7f8 fa88 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   1068a:	4605      	mov	r5, r0
   1068c:	2800      	cmp	r0, #0
   1068e:	d0f1      	beq.n	10674 <uwb_ccp_pkg_down+0xc>
        if (ccp->status.enabled) {
   10690:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
   10694:	f013 0f10 	tst.w	r3, #16
   10698:	d0e9      	beq.n	1066e <uwb_ccp_pkg_down+0x6>
            uwb_ccp_stop(ccp);
   1069a:	f7ff fd3a 	bl	10112 <uwb_ccp_stop>
   1069e:	e7e6      	b.n	1066e <uwb_ccp_pkg_down+0x6>
    }

    return 0;
}
   106a0:	2000      	movs	r0, #0
   106a2:	bd38      	pop	{r3, r4, r5, pc}

000106a4 <extension_signal_tx>:
}
EXPORT_SYMBOL(uwb_transport_remove_extension);

static void
extension_signal_tx(struct _uwb_transport_instance * uwb_transport)
{
   106a4:	b538      	push	{r3, r4, r5, lr}
   106a6:	4605      	mov	r5, r0
    struct _uwb_transport_extension * extension;
    if(!(SLIST_EMPTY(&uwb_transport->extension_list))){
   106a8:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
   106ac:	b90c      	cbnz	r4, 106b2 <extension_signal_tx+0xe>
            if (extension->transmit_cb != NULL) {
                extension->transmit_cb(uwb_transport->dev_inst);
            }
        }
    }
}
   106ae:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(extension, &uwb_transport->extension_list, next){
   106b0:	6924      	ldr	r4, [r4, #16]
   106b2:	2c00      	cmp	r4, #0
   106b4:	d0fb      	beq.n	106ae <extension_signal_tx+0xa>
            if (extension->transmit_cb != NULL) {
   106b6:	68e3      	ldr	r3, [r4, #12]
   106b8:	2b00      	cmp	r3, #0
   106ba:	d0f9      	beq.n	106b0 <extension_signal_tx+0xc>
                extension->transmit_cb(uwb_transport->dev_inst);
   106bc:	6828      	ldr	r0, [r5, #0]
   106be:	4798      	blx	r3
   106c0:	e7f6      	b.n	106b0 <extension_signal_tx+0xc>

000106c2 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
   106c2:	b510      	push	{r4, lr}
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
   106c4:	684c      	ldr	r4, [r1, #4]
   106c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
   106c8:	b12b      	cbz	r3, 106d6 <reset_cb+0x14>
   106ca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
        uwb_transport->ack_seq_num = -1;
        dpl_sem_release(&uwb_transport->ack_sem);
    }
    if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
   106cc:	b15b      	cbz	r3, 106e6 <reset_cb+0x24>
   106ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        dpl_sem_release(&uwb_transport->sem);
    }
    if(dpl_sem_get_count(&uwb_transport->write_tx_lock) == 0) {
   106d0:	b173      	cbz	r3, 106f0 <reset_cb+0x2e>
        dpl_sem_release(&uwb_transport->write_tx_lock);
    }
    return false;  // Pass it forward
}
   106d2:	2000      	movs	r0, #0
   106d4:	bd10      	pop	{r4, pc}
        uwb_transport->ack_seq_num = -1;
   106d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   106da:	60e3      	str	r3, [r4, #12]
    return (dpl_error_t)os_sem_release(&sem->sem);
   106dc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   106e0:	f7fd fe34 	bl	e34c <os_sem_release>
   106e4:	e7f1      	b.n	106ca <reset_cb+0x8>
   106e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   106ea:	f7fd fe2f 	bl	e34c <os_sem_release>
   106ee:	e7ee      	b.n	106ce <reset_cb+0xc>
   106f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   106f4:	f7fd fe2a 	bl	e34c <os_sem_release>
   106f8:	e7eb      	b.n	106d2 <reset_cb+0x10>

000106fa <rx_timeout_cb>:
{
   106fa:	b508      	push	{r3, lr}
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
   106fc:	6848      	ldr	r0, [r1, #4]
   106fe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
   10700:	b11b      	cbz	r3, 1070a <rx_timeout_cb+0x10>
   10702:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    if(dpl_sem_get_count(&uwb_transport->sem) == 0){
   10704:	b14b      	cbz	r3, 1071a <rx_timeout_cb+0x20>
    return false;
   10706:	2000      	movs	r0, #0
}
   10708:	bd08      	pop	{r3, pc}
        uwb_transport->ack_seq_num = -1;
   1070a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1070e:	60c3      	str	r3, [r0, #12]
   10710:	3038      	adds	r0, #56	; 0x38
   10712:	f7fd fe1b 	bl	e34c <os_sem_release>
        return true;
   10716:	2001      	movs	r0, #1
   10718:	e7f6      	b.n	10708 <rx_timeout_cb+0xe>
   1071a:	3028      	adds	r0, #40	; 0x28
   1071c:	f7fd fe16 	bl	e34c <os_sem_release>
        return true;
   10720:	2001      	movs	r0, #1
   10722:	e7f1      	b.n	10708 <rx_timeout_cb+0xe>

00010724 <tx_complete_cb>:
{
   10724:	b508      	push	{r3, lr}
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
   10726:	6848      	ldr	r0, [r1, #4]
    if (uwb_transport->status.awaiting_ack_tx) {
   10728:	7903      	ldrb	r3, [r0, #4]
   1072a:	f013 0f02 	tst.w	r3, #2
   1072e:	d003      	beq.n	10738 <tx_complete_cb+0x14>
        uwb_transport->status.awaiting_ack_tx = 0;
   10730:	7903      	ldrb	r3, [r0, #4]
   10732:	f36f 0341 	bfc	r3, #1, #1
   10736:	7103      	strb	r3, [r0, #4]
   10738:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
   1073a:	b10b      	cbz	r3, 10740 <tx_complete_cb+0x1c>
    return false;
   1073c:	2000      	movs	r0, #0
}
   1073e:	bd08      	pop	{r3, pc}
   10740:	3028      	adds	r0, #40	; 0x28
   10742:	f7fd fe03 	bl	e34c <os_sem_release>
        return true;
   10746:	2001      	movs	r0, #1
   10748:	e7f9      	b.n	1073e <tx_complete_cb+0x1a>

0001074a <tx_begins_cb>:
{
   1074a:	b508      	push	{r3, lr}
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
   1074c:	6848      	ldr	r0, [r1, #4]
   1074e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    if(dpl_sem_get_count(&uwb_transport->write_tx_lock) == 0) {
   10750:	b10b      	cbz	r3, 10756 <tx_begins_cb+0xc>
    return false;
   10752:	2000      	movs	r0, #0
}
   10754:	bd08      	pop	{r3, pc}
   10756:	3030      	adds	r0, #48	; 0x30
   10758:	f7fd fdf8 	bl	e34c <os_sem_release>
        return true;
   1075c:	2001      	movs	r0, #1
   1075e:	e7f9      	b.n	10754 <tx_begins_cb+0xa>

00010760 <rx_complete_cb>:
{
   10760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10762:	4604      	mov	r4, r0
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t *)cbs->inst_ptr;
   10764:	684d      	ldr	r5, [r1, #4]
    uint32_t cputime = dpl_cputime_get32();
   10766:	f001 fb24 	bl	11db2 <dpl_cputime_get32>
    if (inst->fctrl == UWB_FCTRL_FRAME_TYPE_ACK) {
   1076a:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
   1076e:	2b02      	cmp	r3, #2
   10770:	d06b      	beq.n	1084a <rx_complete_cb+0xea>
   10772:	4607      	mov	r7, r0
    if(inst->fctrl != UWB_TRANSPORT_FCTRL &&
   10774:	f648 0241 	movw	r2, #34881	; 0x8841
   10778:	4293      	cmp	r3, r2
   1077a:	d004      	beq.n	10786 <rx_complete_cb+0x26>
   1077c:	f648 0261 	movw	r2, #34913	; 0x8861
   10780:	4293      	cmp	r3, r2
   10782:	f040 8084 	bne.w	1088e <rx_complete_cb+0x12e>
    if (inst->status.autoack_triggered) {
   10786:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1078a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1078e:	d003      	beq.n	10798 <rx_complete_cb+0x38>
        uwb_transport->status.awaiting_ack_tx = 1;
   10790:	792b      	ldrb	r3, [r5, #4]
   10792:	f043 0302 	orr.w	r3, r3, #2
   10796:	712b      	strb	r3, [r5, #4]
    uwb_transport_frame_header_t * frame = (uwb_transport_frame_header_t* )inst->rxbuf;
   10798:	f8d4 64fc 	ldr.w	r6, [r4, #1276]	; 0x4fc
    if(frame->code < UWB_DATA_CODE_TRNSPRT_REQUEST ||
   1079c:	f8b6 3009 	ldrh.w	r3, [r6, #9]
   107a0:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
   107a4:	b29b      	uxth	r3, r3
   107a6:	2b0e      	cmp	r3, #14
   107a8:	d871      	bhi.n	1088e <rx_complete_cb+0x12e>
    if(frame->dst_address != inst->my_short_address && frame->dst_address != 0xffff) {
   107aa:	f8b6 3005 	ldrh.w	r3, [r6, #5]
   107ae:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   107b2:	4293      	cmp	r3, r2
   107b4:	d003      	beq.n	107be <rx_complete_cb+0x5e>
   107b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   107ba:	4293      	cmp	r3, r2
   107bc:	d167      	bne.n	1088e <rx_complete_cb+0x12e>
    if ((cputime - uwb_transport->last_frame_time) < dpl_cputime_usecs_to_ticks(10000) &&
   107be:	692b      	ldr	r3, [r5, #16]
   107c0:	1afb      	subs	r3, r7, r3
   107c2:	f242 720f 	movw	r2, #9999	; 0x270f
   107c6:	4293      	cmp	r3, r2
   107c8:	d807      	bhi.n	107da <rx_complete_cb+0x7a>
        !memcmp(&uwb_transport->last_frame, frame, sizeof(*frame))) {
   107ca:	220d      	movs	r2, #13
   107cc:	4631      	mov	r1, r6
   107ce:	f105 0014 	add.w	r0, r5, #20
   107d2:	f000 fe2d 	bl	11430 <memcmp>
    if ((cputime - uwb_transport->last_frame_time) < dpl_cputime_usecs_to_ticks(10000) &&
   107d6:	2800      	cmp	r0, #0
   107d8:	d059      	beq.n	1088e <rx_complete_cb+0x12e>
    memcpy(&uwb_transport->last_frame, frame, sizeof(*frame));
   107da:	6831      	ldr	r1, [r6, #0]
   107dc:	6872      	ldr	r2, [r6, #4]
   107de:	68b3      	ldr	r3, [r6, #8]
   107e0:	6169      	str	r1, [r5, #20]
   107e2:	61aa      	str	r2, [r5, #24]
   107e4:	61eb      	str	r3, [r5, #28]
   107e6:	7b33      	ldrb	r3, [r6, #12]
   107e8:	f885 3020 	strb.w	r3, [r5, #32]
    uwb_transport->last_frame_time = cputime;
   107ec:	612f      	str	r7, [r5, #16]
    if (uwb_transport->config.os_msys_mpool){
   107ee:	79ab      	ldrb	r3, [r5, #6]
   107f0:	f013 0f01 	tst.w	r3, #1
   107f4:	d036      	beq.n	10864 <rx_complete_cb+0x104>
        mbuf = dpl_msys_get_pkthdr(inst->frame_len - sizeof(uwb_transport_frame_header_t),
   107f6:	f8b4 04e2 	ldrh.w	r0, [r4, #1250]	; 0x4e2
   107fa:	380d      	subs	r0, #13
   107fc:	2108      	movs	r1, #8
   107fe:	b280      	uxth	r0, r0
   10800:	f001 fba3 	bl	11f4a <dpl_msys_get_pkthdr>
   10804:	4607      	mov	r7, r0
    if (mbuf) {
   10806:	2f00      	cmp	r7, #0
   10808:	d04b      	beq.n	108a2 <rx_complete_cb+0x142>
        hdr->tsp_code = frame->tsp_code;
   1080a:	f8b6 300b 	ldrh.w	r3, [r6, #11]
   1080e:	833b      	strh	r3, [r7, #24]
        hdr->uid = frame->src_address;
   10810:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   10814:	837b      	strh	r3, [r7, #26]
        hdr->uwb_transport = uwb_transport;
   10816:	61fd      	str	r5, [r7, #28]
        int rc = dpl_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(uwb_transport_frame_header_t),
   10818:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
                                      (inst->frame_len - sizeof(uwb_transport_frame_header_t)));
   1081c:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        int rc = dpl_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(uwb_transport_frame_header_t),
   10820:	3b0d      	subs	r3, #13
   10822:	320d      	adds	r2, #13
   10824:	2100      	movs	r1, #0
   10826:	4638      	mov	r0, r7
   10828:	f001 fccd 	bl	121c6 <dpl_mbuf_copyinto>
        if (rc == 0){
   1082c:	bb50      	cbnz	r0, 10884 <rx_complete_cb+0x124>
            if (uwb_transport->config.dflt_eventq){
   1082e:	79ab      	ldrb	r3, [r5, #6]
   10830:	f013 0f02 	tst.w	r3, #2
   10834:	d01d      	beq.n	10872 <rx_complete_cb+0x112>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   10836:	f7fd f975 	bl	db24 <os_eventq_dflt_get>
   1083a:	4601      	mov	r1, r0
                dpl_mqueue_put(&uwb_transport->rx_q, dpl_eventq_dflt_get(), mbuf);
   1083c:	463a      	mov	r2, r7
   1083e:	f105 0064 	add.w	r0, r5, #100	; 0x64
   10842:	f001 fb1d 	bl	11e80 <dpl_mqueue_put>
    return ret;
   10846:	2001      	movs	r0, #1
   10848:	e024      	b.n	10894 <rx_complete_cb+0x134>
   1084a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
        if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
   1084c:	b10b      	cbz	r3, 10852 <rx_complete_cb+0xf2>
        return true;
   1084e:	2001      	movs	r0, #1
   10850:	e020      	b.n	10894 <rx_complete_cb+0x134>
            uwb_transport->ack_seq_num = inst->rxbuf[2];
   10852:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   10856:	789b      	ldrb	r3, [r3, #2]
   10858:	60eb      	str	r3, [r5, #12]
    return (dpl_error_t)os_sem_release(&sem->sem);
   1085a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1085e:	f7fd fd75 	bl	e34c <os_sem_release>
   10862:	e7f4      	b.n	1084e <rx_complete_cb+0xee>
        mbuf = dpl_mbuf_get_pkthdr(uwb_transport->omp, sizeof(uwb_transport_user_header_t));
   10864:	2108      	movs	r1, #8
   10866:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1086a:	f001 fb55 	bl	11f18 <dpl_mbuf_get_pkthdr>
   1086e:	4607      	mov	r7, r0
   10870:	e7c9      	b.n	10806 <rx_complete_cb+0xa6>
                dpl_mqueue_put(&uwb_transport->rx_q, uwb_transport->oeq, mbuf);
   10872:	463a      	mov	r2, r7
   10874:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
   10878:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1087c:	f001 fb00 	bl	11e80 <dpl_mqueue_put>
    return ret;
   10880:	2001      	movs	r0, #1
   10882:	e007      	b.n	10894 <rx_complete_cb+0x134>
            dpl_mbuf_free_chain(mbuf);
   10884:	4638      	mov	r0, r7
   10886:	f001 fb78 	bl	11f7a <dpl_mbuf_free_chain>
    return ret;
   1088a:	2001      	movs	r0, #1
   1088c:	e002      	b.n	10894 <rx_complete_cb+0x134>
   1088e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    if(dpl_sem_get_count(&uwb_transport->sem) == 0){
   10890:	b10b      	cbz	r3, 10896 <rx_complete_cb+0x136>
    return ret;
   10892:	2000      	movs	r0, #0
}
   10894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10896:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1089a:	f7fd fd57 	bl	e34c <os_sem_release>
    return ret;
   1089e:	2000      	movs	r0, #0
   108a0:	e7f8      	b.n	10894 <rx_complete_cb+0x134>
    return ret;
   108a2:	2001      	movs	r0, #1
   108a4:	e7f6      	b.n	10894 <rx_complete_cb+0x134>
	...

000108a8 <uwb_transport_create_mbuf_pool>:
{
   108a8:	b510      	push	{r4, lr}
   108aa:	b082      	sub	sp, #8
   108ac:	4604      	mov	r4, r0
    rc = dpl_mempool_init(&g_mbuf_mempool, MBUF_NUM_MBUFS,
   108ae:	4b13      	ldr	r3, [pc, #76]	; (108fc <uwb_transport_create_mbuf_pool+0x54>)
   108b0:	9300      	str	r3, [sp, #0]
   108b2:	4b13      	ldr	r3, [pc, #76]	; (10900 <uwb_transport_create_mbuf_pool+0x58>)
   108b4:	f44f 7208 	mov.w	r2, #544	; 0x220
   108b8:	2110      	movs	r1, #16
   108ba:	4812      	ldr	r0, [pc, #72]	; (10904 <uwb_transport_create_mbuf_pool+0x5c>)
   108bc:	f001 fd5c 	bl	12378 <dpl_mempool_init>
    assert(rc == 0);
   108c0:	b980      	cbnz	r0, 108e4 <uwb_transport_create_mbuf_pool+0x3c>
    rc = dpl_mbuf_pool_init(&g_mbuf_pool, &g_mbuf_mempool, MBUF_MEMBLOCK_SIZE,
   108c2:	2310      	movs	r3, #16
   108c4:	f44f 7208 	mov.w	r2, #544	; 0x220
   108c8:	490e      	ldr	r1, [pc, #56]	; (10904 <uwb_transport_create_mbuf_pool+0x5c>)
   108ca:	480f      	ldr	r0, [pc, #60]	; (10908 <uwb_transport_create_mbuf_pool+0x60>)
   108cc:	f001 fb08 	bl	11ee0 <dpl_mbuf_pool_init>
    assert(rc == 0);
   108d0:	b970      	cbnz	r0, 108f0 <uwb_transport_create_mbuf_pool+0x48>
    uwb_transport->omp = &g_mbuf_pool;
   108d2:	4b0d      	ldr	r3, [pc, #52]	; (10908 <uwb_transport_create_mbuf_pool+0x60>)
   108d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    uwb_transport->config.os_msys_mpool = false;
   108d8:	79a3      	ldrb	r3, [r4, #6]
   108da:	f36f 0300 	bfc	r3, #0, #1
   108de:	71a3      	strb	r3, [r4, #6]
}
   108e0:	b002      	add	sp, #8
   108e2:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   108e4:	2300      	movs	r3, #0
   108e6:	461a      	mov	r2, r3
   108e8:	4619      	mov	r1, r3
   108ea:	4618      	mov	r0, r3
   108ec:	f7fc fd38 	bl	d360 <__assert_func>
    assert(rc == 0);
   108f0:	2300      	movs	r3, #0
   108f2:	461a      	mov	r2, r3
   108f4:	4619      	mov	r1, r3
   108f6:	4618      	mov	r0, r3
   108f8:	f7fc fd32 	bl	d360 <__assert_func>
   108fc:	00023b44 	.word	0x00023b44
   10900:	20003da4 	.word	0x20003da4
   10904:	20005fa4 	.word	0x20005fa4
   10908:	20005fcc 	.word	0x20005fcc

0001090c <uwb_transport_init>:
{
   1090c:	b538      	push	{r3, r4, r5, lr}
   1090e:	4605      	mov	r5, r0
    uwb_transport_instance_t * uwb_transport = (uwb_transport_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TRANSPORT);
   10910:	2160      	movs	r1, #96	; 0x60
   10912:	f7f8 f942 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (uwb_transport == NULL) {
   10916:	4604      	mov	r4, r0
   10918:	b378      	cbz	r0, 1097a <uwb_transport_init+0x6e>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   1091a:	2101      	movs	r1, #1
   1091c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10920:	f7fd fd0c 	bl	e33c <os_sem_init>
   10924:	2101      	movs	r1, #1
   10926:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1092a:	f7fd fd07 	bl	e33c <os_sem_init>
   1092e:	2101      	movs	r1, #1
   10930:	f104 0038 	add.w	r0, r4, #56	; 0x38
   10934:	f7fd fd02 	bl	e33c <os_sem_init>
    dpl_mqueue_init(&uwb_transport->tx_q, NULL, NULL);
   10938:	2200      	movs	r2, #0
   1093a:	4611      	mov	r1, r2
   1093c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   10940:	f001 fa72 	bl	11e28 <dpl_mqueue_init>
    dpl_mqueue_init(&uwb_transport->rx_q, (dpl_event_fn *) uwb_transport_process_rx_queue, uwb_transport);
   10944:	4622      	mov	r2, r4
   10946:	4919      	ldr	r1, [pc, #100]	; (109ac <uwb_transport_init+0xa0>)
   10948:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1094c:	f001 fa6c 	bl	11e28 <dpl_mqueue_init>
    snprintf(uwb_transport->device_name, sizeof(uwb_transport->device_name), "uwbtp%d", dev->idx);
   10950:	f895 34b0 	ldrb.w	r3, [r5, #1200]	; 0x4b0
   10954:	4a16      	ldr	r2, [pc, #88]	; (109b0 <uwb_transport_init+0xa4>)
   10956:	210c      	movs	r1, #12
   10958:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1095c:	f001 f9c9 	bl	11cf2 <snprintf>
    uwb_transport->config.request_acks = 1;
   10960:	79a3      	ldrb	r3, [r4, #6]
   10962:	f043 0304 	orr.w	r3, r3, #4
   10966:	71a3      	strb	r3, [r4, #6]
    uwb_transport_create_mbuf_pool(uwb_transport);
   10968:	4620      	mov	r0, r4
   1096a:	f7ff ff9d 	bl	108a8 <uwb_transport_create_mbuf_pool>
    uwb_transport->status.has_init = 1;
   1096e:	7923      	ldrb	r3, [r4, #4]
   10970:	f043 0301 	orr.w	r3, r3, #1
   10974:	7123      	strb	r3, [r4, #4]
}
   10976:	4620      	mov	r0, r4
   10978:	bd38      	pop	{r3, r4, r5, pc}
        uwb_transport = (uwb_transport_instance_t *)calloc(1, sizeof(uwb_transport_instance_t));
   1097a:	21a0      	movs	r1, #160	; 0xa0
   1097c:	2001      	movs	r0, #1
   1097e:	f000 fc72 	bl	11266 <calloc>
        assert(uwb_transport);
   10982:	4604      	mov	r4, r0
   10984:	b158      	cbz	r0, 1099e <uwb_transport_init+0x92>
        uwb_transport->dev_inst = dev;
   10986:	6005      	str	r5, [r0, #0]
        uwb_transport->config = (uwb_transport_config_t){
   10988:	2300      	movs	r3, #0
   1098a:	80c3      	strh	r3, [r0, #6]
   1098c:	7983      	ldrb	r3, [r0, #6]
   1098e:	f043 0301 	orr.w	r3, r3, #1
   10992:	7183      	strb	r3, [r0, #6]
   10994:	b2db      	uxtb	r3, r3
   10996:	f043 0302 	orr.w	r3, r3, #2
   1099a:	7183      	strb	r3, [r0, #6]
   1099c:	e7bd      	b.n	1091a <uwb_transport_init+0xe>
        assert(uwb_transport);
   1099e:	2300      	movs	r3, #0
   109a0:	461a      	mov	r2, r3
   109a2:	4619      	mov	r1, r3
   109a4:	4618      	mov	r0, r3
   109a6:	f7fc fcdb 	bl	d360 <__assert_func>
   109aa:	bf00      	nop
   109ac:	000109d9 	.word	0x000109d9
   109b0:	00023b5c 	.word	0x00023b5c

000109b4 <uwb_transport_get_extension>:
{
   109b4:	b508      	push	{r3, lr}
    assert(uwb_transport);
   109b6:	b140      	cbz	r0, 109ca <uwb_transport_get_extension+0x16>
    if(!(SLIST_EMPTY(&uwb_transport->extension_list))){
   109b8:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
   109bc:	b158      	cbz	r0, 109d6 <uwb_transport_get_extension+0x22>
        SLIST_FOREACH(extension, &uwb_transport->extension_list, next){
   109be:	b150      	cbz	r0, 109d6 <uwb_transport_get_extension+0x22>
            if (extension != NULL && extension->tsp_code == tsp_code) {
   109c0:	8803      	ldrh	r3, [r0, #0]
   109c2:	428b      	cmp	r3, r1
   109c4:	d007      	beq.n	109d6 <uwb_transport_get_extension+0x22>
        SLIST_FOREACH(extension, &uwb_transport->extension_list, next){
   109c6:	6900      	ldr	r0, [r0, #16]
   109c8:	e7f9      	b.n	109be <uwb_transport_get_extension+0xa>
    assert(uwb_transport);
   109ca:	2300      	movs	r3, #0
   109cc:	461a      	mov	r2, r3
   109ce:	4619      	mov	r1, r3
   109d0:	4618      	mov	r0, r3
   109d2:	f7fc fcc5 	bl	d360 <__assert_func>
}
   109d6:	bd08      	pop	{r3, pc}

000109d8 <uwb_transport_process_rx_queue>:
{
   109d8:	b538      	push	{r3, r4, r5, lr}
    return ev->ev.ev_arg;
   109da:	6884      	ldr	r4, [r0, #8]
    while ((mbuf = dpl_mqueue_get(&uwb_transport->rx_q)) &&
   109dc:	e002      	b.n	109e4 <uwb_transport_process_rx_queue+0xc>
            dpl_mbuf_free_chain(mbuf);
   109de:	4628      	mov	r0, r5
   109e0:	f001 facb 	bl	11f7a <dpl_mbuf_free_chain>
    while ((mbuf = dpl_mqueue_get(&uwb_transport->rx_q)) &&
   109e4:	f104 0064 	add.w	r0, r4, #100	; 0x64
   109e8:	f001 fa2d 	bl	11e46 <dpl_mqueue_get>
   109ec:	4605      	mov	r5, r0
   109ee:	b178      	cbz	r0, 10a10 <uwb_transport_process_rx_queue+0x38>
   109f0:	7923      	ldrb	r3, [r4, #4]
   109f2:	f013 0f01 	tst.w	r3, #1
   109f6:	d00b      	beq.n	10a10 <uwb_transport_process_rx_queue+0x38>
        extension = uwb_transport_get_extension(uwb_transport, hdr->tsp_code);
   109f8:	8b29      	ldrh	r1, [r5, #24]
   109fa:	4620      	mov	r0, r4
   109fc:	f7ff ffda 	bl	109b4 <uwb_transport_get_extension>
        if (extension)
   10a00:	2800      	cmp	r0, #0
   10a02:	d0ec      	beq.n	109de <uwb_transport_process_rx_queue+0x6>
            extension->receive_cb(uwb_transport->dev_inst, hdr->uid, mbuf);
   10a04:	6883      	ldr	r3, [r0, #8]
   10a06:	462a      	mov	r2, r5
   10a08:	8b69      	ldrh	r1, [r5, #26]
   10a0a:	6820      	ldr	r0, [r4, #0]
   10a0c:	4798      	blx	r3
   10a0e:	e7e9      	b.n	109e4 <uwb_transport_process_rx_queue+0xc>
}
   10a10:	bd38      	pop	{r3, r4, r5, pc}

00010a12 <uwb_transport_append_extension>:
{
   10a12:	b508      	push	{r3, lr}
    assert(uwb_transport);
   10a14:	b120      	cbz	r0, 10a20 <uwb_transport_append_extension+0xe>
    if(!(SLIST_EMPTY(&uwb_transport->extension_list))) {
   10a16:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
   10a1a:	b17b      	cbz	r3, 10a3c <uwb_transport_append_extension+0x2a>
        struct _uwb_transport_extension * prev = NULL;
   10a1c:	2200      	movs	r2, #0
   10a1e:	e007      	b.n	10a30 <uwb_transport_append_extension+0x1e>
    assert(uwb_transport);
   10a20:	2300      	movs	r3, #0
   10a22:	461a      	mov	r2, r3
   10a24:	4619      	mov	r1, r3
   10a26:	4618      	mov	r0, r3
   10a28:	f7fc fc9a 	bl	d360 <__assert_func>
            prev = cur;
   10a2c:	461a      	mov	r2, r3
        SLIST_FOREACH(cur, &uwb_transport->extension_list, next){
   10a2e:	691b      	ldr	r3, [r3, #16]
   10a30:	2b00      	cmp	r3, #0
   10a32:	d1fb      	bne.n	10a2c <uwb_transport_append_extension+0x1a>
        SLIST_INSERT_AFTER(prev, extension, next);
   10a34:	6913      	ldr	r3, [r2, #16]
   10a36:	610b      	str	r3, [r1, #16]
   10a38:	6111      	str	r1, [r2, #16]
}
   10a3a:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&uwb_transport->extension_list, extension, next);
   10a3c:	610b      	str	r3, [r1, #16]
   10a3e:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
}
   10a42:	e7fa      	b.n	10a3a <uwb_transport_append_extension+0x28>

00010a44 <uwb_transport_listen>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_transport_listen(struct _uwb_transport_instance *uwb_transport, uwb_dev_modes_t mode, uint64_t dx_time, uint64_t dx_time_end)
{
   10a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a48:	b082      	sub	sp, #8
   10a4a:	4604      	mov	r4, r0
   10a4c:	4688      	mov	r8, r1
   10a4e:	4692      	mov	sl, r2
   10a50:	461e      	mov	r6, r3
   10a52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10a54:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   10a56:	f100 0928 	add.w	r9, r0, #40	; 0x28
   10a5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10a5e:	4648      	mov	r0, r9
   10a60:	f7fd fca6 	bl	e3b0 <os_sem_pend>
    dpl_error_t err;
    dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
    struct uwb_dev * inst = uwb_transport->dev_inst;
   10a64:	6824      	ldr	r4, [r4, #0]
    /* Stop listening in time to get ready for next slot */
    if (dx_time) {
   10a66:	ea5a 0306 	orrs.w	r3, sl, r6
   10a6a:	d038      	beq.n	10ade <uwb_transport_listen+0x9a>
        dx_time_end -= (MYNEWT_VAL(UWB_TRANSPORT_PERIOD_END_GUARD) << 16);
   10a6c:	f1b5 65fa 	subs.w	r5, r5, #131072000	; 0x7d00000
   10a70:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
        dx_time_end &= UWB_DTU_40BMASK;
   10a74:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    return (dev->uw_funcs->uf_set_rx_window(dev, rx_start, rx_end));
   10a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   10a7c:	9500      	str	r5, [sp, #0]
   10a7e:	9701      	str	r7, [sp, #4]
   10a80:	4652      	mov	r2, sl
   10a82:	4633      	mov	r3, r6
   10a84:	4620      	mov	r0, r4
   10a86:	4788      	blx	r1
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_autoack(dev, enable));
   10a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10a8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
   10a8e:	2101      	movs	r1, #1
   10a90:	4620      	mov	r0, r4
   10a92:	4798      	blx	r3
 * @return struct uwb_dev_status
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
    return (dev->uw_funcs->uf_set_autoack_delay(dev, delay));
   10a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10a96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   10a9a:	210c      	movs	r1, #12
   10a9c:	4620      	mov	r0, r4
   10a9e:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   10aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   10aa4:	2101      	movs	r1, #1
   10aa6:	4620      	mov	r0, r4
   10aa8:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_wait4resp_delay(dev, delay));
   10aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10aae:	2100      	movs	r1, #0
   10ab0:	4620      	mov	r0, r4
   10ab2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
   10ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   10aba:	2101      	movs	r1, #1
   10abc:	4620      	mov	r0, r4
   10abe:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
   10ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   10ac4:	4620      	mov	r0, r4
   10ac6:	4798      	blx	r3
    uwb_set_autoack_delay(inst, 12);
    uwb_set_wait4resp(inst, 1);
    uwb_set_wait4resp_delay(inst, 0);

    uwb_set_on_error_continue(inst, true);
    if(uwb_start_rx(inst).start_rx_error) {
   10ac8:	f010 0f08 	tst.w	r0, #8
   10acc:	d10f      	bne.n	10aee <uwb_transport_listen+0xaa>
        UWB_TRANSPORT_INC(rx_start_err);
        err = dpl_sem_release(&uwb_transport->sem);
        assert(err == DPL_OK);
    }

    if (mode == UWB_BLOCKING){
   10ace:	f1b8 0f00 	cmp.w	r8, #0
   10ad2:	d017      	beq.n	10b04 <uwb_transport_listen+0xc0>
        assert(err == DPL_OK);
        err = dpl_sem_release(&uwb_transport->sem);
        assert(err == DPL_OK);
    }
    return inst->status;
}
   10ad4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   10ad8:	b002      	add	sp, #8
   10ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        uwb_set_rx_timeout(inst, dx_time_end>>16);
   10ade:	0c2d      	lsrs	r5, r5, #16
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   10ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10ae4:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   10ae8:	4620      	mov	r0, r4
   10aea:	4798      	blx	r3
   10aec:	e7cc      	b.n	10a88 <uwb_transport_listen+0x44>
    return (dpl_error_t)os_sem_release(&sem->sem);
   10aee:	4648      	mov	r0, r9
   10af0:	f7fd fc2c 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   10af4:	2800      	cmp	r0, #0
   10af6:	d0ea      	beq.n	10ace <uwb_transport_listen+0x8a>
   10af8:	2300      	movs	r3, #0
   10afa:	461a      	mov	r2, r3
   10afc:	4619      	mov	r1, r3
   10afe:	4618      	mov	r0, r3
   10b00:	f7fc fc2e 	bl	d360 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   10b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10b08:	4648      	mov	r0, r9
   10b0a:	f7fd fc51 	bl	e3b0 <os_sem_pend>
        assert(err == DPL_OK);
   10b0e:	b950      	cbnz	r0, 10b26 <uwb_transport_listen+0xe2>
    return (dpl_error_t)os_sem_release(&sem->sem);
   10b10:	4648      	mov	r0, r9
   10b12:	f7fd fc1b 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   10b16:	2800      	cmp	r0, #0
   10b18:	d0dc      	beq.n	10ad4 <uwb_transport_listen+0x90>
   10b1a:	2300      	movs	r3, #0
   10b1c:	461a      	mov	r2, r3
   10b1e:	4619      	mov	r1, r3
   10b20:	4618      	mov	r0, r3
   10b22:	f7fc fc1d 	bl	d360 <__assert_func>
        assert(err == DPL_OK);
   10b26:	2300      	movs	r3, #0
   10b28:	461a      	mov	r2, r3
   10b2a:	4619      	mov	r1, r3
   10b2c:	4618      	mov	r0, r3
   10b2e:	f7fc fc17 	bl	d360 <__assert_func>
	...

00010b34 <uwb_transport_write_tx>:
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_transport_write_tx(struct _uwb_transport_instance *uwb_transport,
                       struct dpl_mbuf *om, uint16_t idx)
{
   10b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b38:	b0a7      	sub	sp, #156	; 0x9c
   10b3a:	4683      	mov	fp, r0
   10b3c:	4689      	mov	r9, r1
    int rc;
    struct uwb_dev * inst = uwb_transport->dev_inst;
   10b3e:	6806      	ldr	r6, [r0, #0]
    uwb_transport_frame_header_t uwb_hdr;
    uint8_t buf[128];
    int mbuf_offset = 0;
    int device_offset;
    struct uwb_dev_status status;
    int tx_buffer_offset = (idx%2)?512:0;
   10b40:	0257      	lsls	r7, r2, #9
   10b42:	f407 7700 	and.w	r7, r7, #512	; 0x200
    int tx_len = DPL_MBUF_PKTLEN(om) - 6;
   10b46:	f8b1 8010 	ldrh.w	r8, [r1, #16]
   10b4a:	f1a8 0806 	sub.w	r8, r8, #6
    size_t mtu = (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? UWB_TRANSPORT_MTU_STD : UWB_TRANSPORT_MTU_EXT;
   10b4e:	f896 3513 	ldrb.w	r3, [r6, #1299]	; 0x513
   10b52:	2b00      	cmp	r3, #0
   10b54:	d144      	bne.n	10be0 <uwb_transport_write_tx+0xac>
   10b56:	2271      	movs	r2, #113	; 0x71
    if (tx_len > mtu) {
   10b58:	4590      	cmp	r8, r2
   10b5a:	d844      	bhi.n	10be6 <uwb_transport_write_tx+0xb2>
        slog("uwb_transport: ERROR %d > MTU %zd", tx_len, mtu);
    }

    /* Prepare header and write to device */
    uwb_hdr.src_address = inst->uid;
   10b5c:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
   10b60:	f8ad 308f 	strh.w	r3, [sp, #143]	; 0x8f
    uwb_hdr.code = UWB_DATA_CODE_TRNSPRT_REQUEST;
   10b64:	2311      	movs	r3, #17
   10b66:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
   10b6a:	2304      	movs	r3, #4
   10b6c:	f88d 3092 	strb.w	r3, [sp, #146]	; 0x92
    uwb_hdr.seq_num = ++uwb_transport->frame_seq_num;
   10b70:	f89b 3008 	ldrb.w	r3, [fp, #8]
   10b74:	3301      	adds	r3, #1
   10b76:	b2db      	uxtb	r3, r3
   10b78:	f88b 3008 	strb.w	r3, [fp, #8]
   10b7c:	f88d 308a 	strb.w	r3, [sp, #138]	; 0x8a
    uwb_hdr.PANID = inst->pan_id;
   10b80:	f8b6 34c0 	ldrh.w	r3, [r6, #1216]	; 0x4c0
   10b84:	f8ad 308b 	strh.w	r3, [sp, #139]	; 0x8b
    uwb_hdr.fctrl = UWB_TRANSPORT_FCTRL;
   10b88:	f648 0341 	movw	r3, #34881	; 0x8841
   10b8c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    if (uwb_transport->config.request_acks) {
   10b90:	f89b 3006 	ldrb.w	r3, [fp, #6]
   10b94:	f013 0f04 	tst.w	r3, #4
   10b98:	d003      	beq.n	10ba2 <uwb_transport_write_tx+0x6e>
        uwb_hdr.fctrl |= UWB_FCTRL_ACK_REQUESTED;
   10b9a:	f648 0361 	movw	r3, #34913	; 0x8861
   10b9e:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    }

    /* Extract dest address and tsp_code */
    rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-6, sizeof(uwb_hdr.dst_address), &uwb_hdr.dst_address);
   10ba2:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   10ba6:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   10baa:	2202      	movs	r2, #2
   10bac:	3906      	subs	r1, #6
   10bae:	4648      	mov	r0, r9
   10bb0:	f001 fa85 	bl	120be <dpl_mbuf_copydata>
    assert(rc==0);
   10bb4:	b9e0      	cbnz	r0, 10bf0 <uwb_transport_write_tx+0xbc>
    rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-4, sizeof(uwb_hdr.tsp_code), &uwb_hdr.tsp_code);
   10bb6:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   10bba:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   10bbe:	2202      	movs	r2, #2
   10bc0:	3904      	subs	r1, #4
   10bc2:	4648      	mov	r0, r9
   10bc4:	f001 fa7b 	bl	120be <dpl_mbuf_copydata>
    assert(rc==0);
   10bc8:	4605      	mov	r5, r0
   10bca:	b9b8      	cbnz	r0, 10bfc <uwb_transport_write_tx+0xc8>

    status = uwb_write_tx(inst, (uint8_t*)&uwb_hdr, tx_buffer_offset, sizeof(uwb_transport_frame_header_t));
   10bcc:	b2ba      	uxth	r2, r7
   10bce:	9201      	str	r2, [sp, #4]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   10bd0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10bd2:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   10bd4:	230d      	movs	r3, #13
   10bd6:	a922      	add	r1, sp, #136	; 0x88
   10bd8:	4630      	mov	r0, r6
   10bda:	47a0      	blx	r4
    device_offset = sizeof(uwb_transport_frame_header_t) + tx_buffer_offset;
   10bdc:	370d      	adds	r7, #13

    /* Copy the mbuf payload data to the device to be sent */
    while (mbuf_offset < tx_len) {
   10bde:	e02e      	b.n	10c3e <uwb_transport_write_tx+0x10a>
    size_t mtu = (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? UWB_TRANSPORT_MTU_STD : UWB_TRANSPORT_MTU_EXT;
   10be0:	f240 12f1 	movw	r2, #497	; 0x1f1
   10be4:	e7b8      	b.n	10b58 <uwb_transport_write_tx+0x24>
        slog("uwb_transport: ERROR %d > MTU %zd", tx_len, mtu);
   10be6:	4641      	mov	r1, r8
   10be8:	481b      	ldr	r0, [pc, #108]	; (10c58 <uwb_transport_write_tx+0x124>)
   10bea:	f001 f853 	bl	11c94 <printf>
   10bee:	e7b5      	b.n	10b5c <uwb_transport_write_tx+0x28>
    assert(rc==0);
   10bf0:	2300      	movs	r3, #0
   10bf2:	461a      	mov	r2, r3
   10bf4:	4619      	mov	r1, r3
   10bf6:	4618      	mov	r0, r3
   10bf8:	f7fc fbb2 	bl	d360 <__assert_func>
    assert(rc==0);
   10bfc:	2300      	movs	r3, #0
   10bfe:	461a      	mov	r2, r3
   10c00:	4619      	mov	r1, r3
   10c02:	4618      	mov	r0, r3
   10c04:	f7fc fbac 	bl	d360 <__assert_func>
        int cpy_len = tx_len - mbuf_offset;
   10c08:	eba8 0405 	sub.w	r4, r8, r5
        cpy_len = (cpy_len > sizeof(buf)) ? sizeof(buf) : cpy_len;
   10c0c:	2c80      	cmp	r4, #128	; 0x80
   10c0e:	bf28      	it	cs
   10c10:	2480      	movcs	r4, #128	; 0x80
    return (dev->uw_funcs->uf_hal_noblock_wait(dev, timeout));
   10c12:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10c16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10c1a:	4630      	mov	r0, r6
   10c1c:	4798      	blx	r3

        /* The uwb_write_tx can do a dma transfer, make sure we wait
         * until that's finished before updating the buffer */
        uwb_hal_noblock_wait(inst, DPL_TIMEOUT_NEVER);
        dpl_mbuf_copydata(om, mbuf_offset, cpy_len, buf);
   10c1e:	ab02      	add	r3, sp, #8
   10c20:	4622      	mov	r2, r4
   10c22:	4629      	mov	r1, r5
   10c24:	4648      	mov	r0, r9
   10c26:	f001 fa4a 	bl	120be <dpl_mbuf_copydata>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   10c2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10c2c:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
   10c30:	b2a3      	uxth	r3, r4
   10c32:	b2ba      	uxth	r2, r7
   10c34:	a902      	add	r1, sp, #8
   10c36:	4630      	mov	r0, r6
   10c38:	47d0      	blx	sl
        status = uwb_write_tx(inst, buf, device_offset, cpy_len);
        mbuf_offset += cpy_len;
   10c3a:	4425      	add	r5, r4
        device_offset += cpy_len;
   10c3c:	4427      	add	r7, r4
    while (mbuf_offset < tx_len) {
   10c3e:	4545      	cmp	r5, r8
   10c40:	dbe2      	blt.n	10c08 <uwb_transport_write_tx+0xd4>
    }

    /* Store next fctrl values but don't write them here as this affects the frame thay may be still sending */
    uwb_transport->tx_buffer_len = sizeof(uwb_transport_frame_header_t) + DPL_MBUF_PKTLEN(om) - 6;
   10c42:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   10c46:	3307      	adds	r3, #7
   10c48:	f8ab 3022 	strh.w	r3, [fp, #34]	; 0x22
    uwb_transport->tx_buffer_offset = tx_buffer_offset;
   10c4c:	9b01      	ldr	r3, [sp, #4]
   10c4e:	f8ab 3024 	strh.w	r3, [fp, #36]	; 0x24
    return status;
}
   10c52:	b027      	add	sp, #156	; 0x9c
   10c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c58:	00023b64 	.word	0x00023b64

00010c5c <uwb_transport_start_tx>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_transport_start_tx(struct _uwb_transport_instance *uwb_transport, struct dpl_mbuf *om, uint64_t dx_time)
{
   10c5c:	b570      	push	{r4, r5, r6, lr}
   10c5e:	4605      	mov	r5, r0
    struct uwb_dev * inst = uwb_transport->dev_inst;
   10c60:	6804      	ldr	r4, [r0, #0]
    struct uwb_dev_status status;

    /* If dx_time provided, delay until then with tx */
    if (dx_time) {
   10c62:	ea52 0103 	orrs.w	r1, r2, r3
   10c66:	d003      	beq.n	10c70 <uwb_transport_start_tx+0x14>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   10c68:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10c6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
   10c6c:	4620      	mov	r0, r4
   10c6e:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    /* Wait for ack? */
    if (uwb_transport->config.request_acks) {
   10c70:	79ab      	ldrb	r3, [r5, #6]
   10c72:	f013 0f04 	tst.w	r3, #4
   10c76:	d014      	beq.n	10ca2 <uwb_transport_start_tx+0x46>
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   10c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   10c7c:	2101      	movs	r1, #1
   10c7e:	4620      	mov	r0, r4
   10c80:	4798      	blx	r3
        uwb_set_wait4resp(inst, 1);
        uwb_set_rx_timeout(inst, 12 + 10 + uwb_phy_frame_duration(uwb_transport->dev_inst, 5));
   10c82:	6828      	ldr	r0, [r5, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   10c84:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10c88:	2105      	movs	r1, #5
   10c8a:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   10c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10c90:	f100 0116 	add.w	r1, r0, #22
   10c94:	4620      	mov	r0, r4
   10c96:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_rxauto_disable(dev, disable));
   10c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10c9c:	2101      	movs	r1, #1
   10c9e:	4620      	mov	r0, r4
   10ca0:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   10ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10ca4:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   10ca6:	2300      	movs	r3, #0
   10ca8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   10caa:	8c69      	ldrh	r1, [r5, #34]	; 0x22
   10cac:	4620      	mov	r0, r4
   10cae:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
   10cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   10cb4:	4620      	mov	r0, r4
   10cb6:	4798      	blx	r3
    }

    uwb_write_tx_fctrl(inst, uwb_transport->tx_buffer_len, uwb_transport->tx_buffer_offset);
    status = uwb_start_tx(inst);
    return status;
}
   10cb8:	bd70      	pop	{r4, r5, r6, pc}
   10cba:	0000      	movs	r0, r0
   10cbc:	0000      	movs	r0, r0
	...

00010cc0 <uwb_transport_dequeue_tx>:
 *
 * @return int 1 if some tx was attemted, 0 otherwise
 */
int
uwb_transport_dequeue_tx(struct _uwb_transport_instance *uwb_transport, uint64_t arg_dx_time, uint64_t dx_time_end)
{
   10cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cc4:	b08d      	sub	sp, #52	; 0x34
   10cc6:	9202      	str	r2, [sp, #8]
   10cc8:	461f      	mov	r7, r3
   10cca:	9303      	str	r3, [sp, #12]
   10ccc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   10cd0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10cd2:	9107      	str	r1, [sp, #28]
    uint16_t idx=0, retries, *retries_p;
    uint64_t dx_time, systime;
    uint64_t preamble_duration, data_duration;
    uint64_t last_duration = 0, next_duration;

    if (STAILQ_FIRST(&uwb_transport->tx_q.mq_head) == NULL) {
   10cd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	f000 816e 	beq.w	10fb8 <uwb_transport_dequeue_tx+0x2f8>
   10cdc:	4606      	mov	r6, r0
   10cde:	4693      	mov	fp, r2
        return false;
    }
    dx_time = arg_dx_time;
    preamble_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(uwb_transport->dev_inst)));
   10ce0:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
   10ce2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   10ce8:	4798      	blx	r3
   10cea:	f010 fe4d 	bl	21988 <__aeabi_i2d>
   10cee:	a3b5      	add	r3, pc, #724	; (adr r3, 10fc4 <uwb_transport_dequeue_tx+0x304>)
   10cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10cf4:	f010 ffdc 	bl	21cb0 <__aeabi_ddiv>
   10cf8:	f011 f9a8 	bl	2204c <__aeabi_d2f>
   10cfc:	ee00 0a10 	vmov	s0, r0
   10d00:	f011 fc26 	bl	22550 <ceilf>
   10d04:	ee10 0a10 	vmov	r0, s0
   10d08:	f011 fa70 	bl	221ec <__aeabi_f2ulz>
   10d0c:	9005      	str	r0, [sp, #20]
   10d0e:	9106      	str	r1, [sp, #24]
    uint64_t last_duration = 0, next_duration;
   10d10:	2400      	movs	r4, #0
   10d12:	4625      	mov	r5, r4
    uint16_t idx=0, retries, *retries_p;
   10d14:	9409      	str	r4, [sp, #36]	; 0x24
    struct dpl_mbuf_pkthdr * mp = NULL;
   10d16:	9401      	str	r4, [sp, #4]
    struct dpl_mbuf *om = NULL;
   10d18:	46a1      	mov	r9, r4
    bool membuf_transferred = false;
   10d1a:	46a2      	mov	sl, r4
    int rc, n_sent = 0;
   10d1c:	9400      	str	r4, [sp, #0]
   10d1e:	e087      	b.n	10e30 <uwb_transport_dequeue_tx+0x170>
    do {
        if (!uwb_transport->status.has_init) {
            break;
        }
        if (!mp) {
            mp = STAILQ_FIRST(&uwb_transport->tx_q.mq_head);
   10d20:	6c33      	ldr	r3, [r6, #64]	; 0x40
   10d22:	9301      	str	r3, [sp, #4]
            if(mp == NULL)
   10d24:	2b00      	cmp	r3, #0
   10d26:	f000 8135 	beq.w	10f94 <uwb_transport_dequeue_tx+0x2d4>
                break;
            om = DPL_MBUF_PKTHDR_TO_MBUF(mp);
   10d2a:	f1a3 0910 	sub.w	r9, r3, #16
            membuf_transferred = false;
   10d2e:	f04f 0a00 	mov.w	sl, #0
   10d32:	e086      	b.n	10e42 <uwb_transport_dequeue_tx+0x182>

        /* DW1000 Errata 1.1, inhibit overlapping writes until transmission begins */
        dpl_sem_pend(&uwb_transport->write_tx_lock, DPL_TIMEOUT_NEVER);
        if (!membuf_transferred) {
            UWB_TRANSPORT_INC(om_writes);
            uwb_transport_write_tx(uwb_transport, om, ++idx);
   10d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d36:	3301      	adds	r3, #1
   10d38:	b29b      	uxth	r3, r3
   10d3a:	9309      	str	r3, [sp, #36]	; 0x24
   10d3c:	461a      	mov	r2, r3
   10d3e:	4649      	mov	r1, r9
   10d40:	4630      	mov	r0, r6
   10d42:	f7ff fef7 	bl	10b34 <uwb_transport_write_tx>
            n_sent = 0;
   10d46:	2300      	movs	r3, #0
   10d48:	9300      	str	r3, [sp, #0]
   10d4a:	e0ce      	b.n	10eea <uwb_transport_dequeue_tx+0x22a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   10d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d50:	f106 0038 	add.w	r0, r6, #56	; 0x38
   10d54:	f7fd fb2c 	bl	e3b0 <os_sem_pend>
   10d58:	e0d3      	b.n	10f02 <uwb_transport_dequeue_tx+0x242>
        /* Wait for overlapping transmission to complete */
        dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
        if (uwb_transport->config.request_acks) {
            dpl_sem_pend(&uwb_transport->ack_sem, DPL_TIMEOUT_NEVER);
        }
        if(uwb_transport_start_tx(uwb_transport, om, (arg_dx_time) ? dx_time : 0).start_tx_error){
   10d5a:	9a02      	ldr	r2, [sp, #8]
   10d5c:	9b03      	ldr	r3, [sp, #12]
   10d5e:	e0d7      	b.n	10f10 <uwb_transport_dequeue_tx+0x250>
   10d60:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
            UWB_TRANSPORT_INC(tx_err);
            if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
   10d62:	b303      	cbz	r3, 10da6 <uwb_transport_dequeue_tx+0xe6>
   10d64:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
                dpl_sem_release(&uwb_transport->sem);
            }
            if(dpl_sem_get_count(&uwb_transport->write_tx_lock) == 0) {
   10d66:	b313      	cbz	r3, 10dae <uwb_transport_dequeue_tx+0xee>
   10d68:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
                dpl_sem_release(&uwb_transport->write_tx_lock);
            }
            if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
   10d6a:	b323      	cbz	r3, 10db6 <uwb_transport_dequeue_tx+0xf6>
                dpl_sem_release(&uwb_transport->ack_sem);
            }
            /* Check if we've slipped far behind systime and correct if so */
            systime = uwb_read_systime(uwb_transport->dev_inst);
   10d6c:	6830      	ldr	r0, [r6, #0]
    return (dev->uw_funcs->uf_read_systime(dev));
   10d6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10d72:	4798      	blx	r3
            if (dx_time - systime > 0x7fffffffffULL) {
   10d74:	ebbb 0200 	subs.w	r2, fp, r0
   10d78:	eb67 0301 	sbc.w	r3, r7, r1
   10d7c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   10d80:	4594      	cmp	ip, r2
   10d82:	f04f 027f 	mov.w	r2, #127	; 0x7f
   10d86:	eb72 0303 	sbcs.w	r3, r2, r3
   10d8a:	d209      	bcs.n	10da0 <uwb_transport_dequeue_tx+0xe0>
                dx_time = systime + (preamble_duration<<16);
   10d8c:	9b06      	ldr	r3, [sp, #24]
   10d8e:	041f      	lsls	r7, r3, #16
   10d90:	9b05      	ldr	r3, [sp, #20]
   10d92:	ea47 4713 	orr.w	r7, r7, r3, lsr #16
   10d96:	041b      	lsls	r3, r3, #16
   10d98:	eb13 0b00 	adds.w	fp, r3, r0
   10d9c:	eb47 0701 	adc.w	r7, r7, r1
        membuf_transferred = true;
   10da0:	f04f 0a01 	mov.w	sl, #1
            }
            continue;
   10da4:	e03b      	b.n	10e1e <uwb_transport_dequeue_tx+0x15e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   10da6:	4650      	mov	r0, sl
   10da8:	f7fd fad0 	bl	e34c <os_sem_release>
   10dac:	e7da      	b.n	10d64 <uwb_transport_dequeue_tx+0xa4>
   10dae:	9808      	ldr	r0, [sp, #32]
   10db0:	f7fd facc 	bl	e34c <os_sem_release>
   10db4:	e7d8      	b.n	10d68 <uwb_transport_dequeue_tx+0xa8>
   10db6:	f106 0038 	add.w	r0, r6, #56	; 0x38
   10dba:	f7fd fac7 	bl	e34c <os_sem_release>
   10dbe:	e7d5      	b.n	10d6c <uwb_transport_dequeue_tx+0xac>
   10dc0:	4650      	mov	r0, sl
   10dc2:	f7fd fac3 	bl	e34c <os_sem_release>
   10dc6:	e0be      	b.n	10f46 <uwb_transport_dequeue_tx+0x286>
                dpl_sem_release(&uwb_transport->ack_sem);
            }

            if (uwb_transport->ack_seq_num != uwb_transport->frame_seq_num) {
                rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-2, sizeof(uint16_t), &retries);
                assert(rc==0);
   10dc8:	2300      	movs	r3, #0
   10dca:	461a      	mov	r2, r3
   10dcc:	4619      	mov	r1, r3
   10dce:	4618      	mov	r0, r3
   10dd0:	f7fc fac6 	bl	d360 <__assert_func>
                    mp = NULL;
                    om = NULL;
                    membuf_transferred = false;
                } else {
                    /* Remove current retries value */
                    dpl_mbuf_adj(om, -2);
   10dd4:	f06f 0101 	mvn.w	r1, #1
   10dd8:	4648      	mov	r0, r9
   10dda:	f001 f99d 	bl	12118 <dpl_mbuf_adj>
                    retries_p = dpl_mbuf_extend(om, sizeof(uint16_t));
   10dde:	2102      	movs	r1, #2
   10de0:	4648      	mov	r0, r9
   10de2:	f001 fa34 	bl	1224e <dpl_mbuf_extend>
                    if (retries_p) {
   10de6:	b148      	cbz	r0, 10dfc <uwb_transport_dequeue_tx+0x13c>
                        *retries_p = retries - n_sent;
   10de8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   10dec:	9900      	ldr	r1, [sp, #0]
   10dee:	1a5b      	subs	r3, r3, r1
   10df0:	8003      	strh	r3, [r0, #0]
                        n_sent = 0;
   10df2:	f8cd a000 	str.w	sl, [sp]
        membuf_transferred = true;
   10df6:	f04f 0a01 	mov.w	sl, #1
   10dfa:	e010      	b.n	10e1e <uwb_transport_dequeue_tx+0x15e>
   10dfc:	f04f 0a01 	mov.w	sl, #1
                    }
                }
                /* Ack failed, retransmit */
                continue;
   10e00:	e00d      	b.n	10e1e <uwb_transport_dequeue_tx+0x15e>
        UWB_TRANSPORT_UPDATE(tx_bitrate, &uwb_transport->tx_bits_per_second,
                             &uwb_transport->tx_br_last, DPL_MBUF_PKTLEN(om) - 4);
#endif

        /* Successfully sent, dequeue and free */
        om = dpl_mqueue_get(&uwb_transport->tx_q);
   10e02:	f106 0040 	add.w	r0, r6, #64	; 0x40
   10e06:	f001 f81e 	bl	11e46 <dpl_mqueue_get>
        if (om) {
   10e0a:	b108      	cbz	r0, 10e10 <uwb_transport_dequeue_tx+0x150>
            dpl_mbuf_free_chain(om);
   10e0c:	f001 f8b5 	bl	11f7a <dpl_mbuf_free_chain>
        }
        mp = NULL;
        om = NULL;
        membuf_transferred = false;

        extension_signal_tx(uwb_transport);
   10e10:	4630      	mov	r0, r6
   10e12:	f7ff fc47 	bl	106a4 <extension_signal_tx>
        mp = NULL;
   10e16:	2300      	movs	r3, #0
   10e18:	9301      	str	r3, [sp, #4]
        om = NULL;
   10e1a:	4699      	mov	r9, r3
        membuf_transferred = false;
   10e1c:	469a      	mov	sl, r3
    } while(STAILQ_FIRST(&uwb_transport->tx_q.mq_head) != NULL &&
   10e1e:	6c33      	ldr	r3, [r6, #64]	; 0x40
            uwb_transport->status.has_init);
   10e20:	2b00      	cmp	r3, #0
   10e22:	f000 80b7 	beq.w	10f94 <uwb_transport_dequeue_tx+0x2d4>
    } while(STAILQ_FIRST(&uwb_transport->tx_q.mq_head) != NULL &&
   10e26:	7933      	ldrb	r3, [r6, #4]
   10e28:	f013 0f01 	tst.w	r3, #1
   10e2c:	f000 80b2 	beq.w	10f94 <uwb_transport_dequeue_tx+0x2d4>
        if (!uwb_transport->status.has_init) {
   10e30:	7933      	ldrb	r3, [r6, #4]
   10e32:	f013 0f01 	tst.w	r3, #1
   10e36:	f000 80ad 	beq.w	10f94 <uwb_transport_dequeue_tx+0x2d4>
        if (!mp) {
   10e3a:	9b01      	ldr	r3, [sp, #4]
   10e3c:	2b00      	cmp	r3, #0
   10e3e:	f43f af6f 	beq.w	10d20 <uwb_transport_dequeue_tx+0x60>
        dx_time += last_duration;
   10e42:	eb1b 0304 	adds.w	r3, fp, r4
   10e46:	9304      	str	r3, [sp, #16]
   10e48:	eb47 0705 	adc.w	r7, r7, r5
        dx_time &= UWB_DTU_40BMASK;
   10e4c:	469b      	mov	fp, r3
   10e4e:	f007 07ff 	and.w	r7, r7, #255	; 0xff
        data_duration = (uint64_t) ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_data_duration(uwb_transport->dev_inst,
   10e52:	6830      	ldr	r0, [r6, #0]
   10e54:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   10e58:	310d      	adds	r1, #13
    return (dev->uw_funcs->uf_phy_data_duration(dev, nlen));
   10e5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   10e60:	b289      	uxth	r1, r1
   10e62:	4798      	blx	r3
   10e64:	f010 fd90 	bl	21988 <__aeabi_i2d>
   10e68:	a356      	add	r3, pc, #344	; (adr r3, 10fc4 <uwb_transport_dequeue_tx+0x304>)
   10e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e6e:	f010 ff1f 	bl	21cb0 <__aeabi_ddiv>
   10e72:	f011 f8eb 	bl	2204c <__aeabi_d2f>
   10e76:	ee00 0a10 	vmov	s0, r0
   10e7a:	f011 fb69 	bl	22550 <ceilf>
   10e7e:	ee10 0a10 	vmov	r0, s0
   10e82:	f011 f9b3 	bl	221ec <__aeabi_f2ulz>
        next_duration = ((preamble_duration + data_duration + MYNEWT_VAL(UWB_TRANSPORT_SUBSLOT_GUARD)) << 16);
   10e86:	9b05      	ldr	r3, [sp, #20]
   10e88:	181c      	adds	r4, r3, r0
   10e8a:	9b06      	ldr	r3, [sp, #24]
   10e8c:	eb43 0501 	adc.w	r5, r3, r1
   10e90:	f514 74c8 	adds.w	r4, r4, #400	; 0x190
   10e94:	f145 0500 	adc.w	r5, r5, #0
   10e98:	042d      	lsls	r5, r5, #16
   10e9a:	ea45 4514 	orr.w	r5, r5, r4, lsr #16
   10e9e:	0424      	lsls	r4, r4, #16
        uint64_t tx_time_remaining = dx_time_end - ((dx_time + next_duration)&UWB_DTU_40BMASK);
   10ea0:	eb1b 0304 	adds.w	r3, fp, r4
   10ea4:	eb47 0205 	adc.w	r2, r7, r5
   10ea8:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   10eac:	ebb8 0303 	subs.w	r3, r8, r3
   10eb0:	9907      	ldr	r1, [sp, #28]
   10eb2:	eb61 0202 	sbc.w	r2, r1, r2
        tx_time_remaining -= (MYNEWT_VAL(UWB_TRANSPORT_PERIOD_END_GUARD) << 16);
   10eb6:	f1b3 63fa 	subs.w	r3, r3, #131072000	; 0x7d00000
   10eba:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
        if (dx_time_end && tx_time_remaining > 0x7fffffffffULL) {
   10ebe:	ea58 0101 	orrs.w	r1, r8, r1
   10ec2:	d006      	beq.n	10ed2 <uwb_transport_dequeue_tx+0x212>
   10ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10ec8:	4299      	cmp	r1, r3
   10eca:	f04f 037f 	mov.w	r3, #127	; 0x7f
   10ece:	4193      	sbcs	r3, r2
   10ed0:	d360      	bcc.n	10f94 <uwb_transport_dequeue_tx+0x2d4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   10ed2:	f106 0330 	add.w	r3, r6, #48	; 0x30
   10ed6:	9308      	str	r3, [sp, #32]
   10ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10edc:	4618      	mov	r0, r3
   10ede:	f7fd fa67 	bl	e3b0 <os_sem_pend>
        if (!membuf_transferred) {
   10ee2:	f1ba 0f00 	cmp.w	sl, #0
   10ee6:	f43f af25 	beq.w	10d34 <uwb_transport_dequeue_tx+0x74>
   10eea:	f106 0a28 	add.w	sl, r6, #40	; 0x28
   10eee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10ef2:	4650      	mov	r0, sl
   10ef4:	f7fd fa5c 	bl	e3b0 <os_sem_pend>
        if (uwb_transport->config.request_acks) {
   10ef8:	79b3      	ldrb	r3, [r6, #6]
   10efa:	f013 0f04 	tst.w	r3, #4
   10efe:	f47f af25 	bne.w	10d4c <uwb_transport_dequeue_tx+0x8c>
        if(uwb_transport_start_tx(uwb_transport, om, (arg_dx_time) ? dx_time : 0).start_tx_error){
   10f02:	9b02      	ldr	r3, [sp, #8]
   10f04:	9a03      	ldr	r2, [sp, #12]
   10f06:	4313      	orrs	r3, r2
   10f08:	f43f af27 	beq.w	10d5a <uwb_transport_dequeue_tx+0x9a>
   10f0c:	9a04      	ldr	r2, [sp, #16]
   10f0e:	463b      	mov	r3, r7
   10f10:	4649      	mov	r1, r9
   10f12:	4630      	mov	r0, r6
   10f14:	f7ff fea2 	bl	10c5c <uwb_transport_start_tx>
   10f18:	f010 0f04 	tst.w	r0, #4
   10f1c:	f47f af20 	bne.w	10d60 <uwb_transport_dequeue_tx+0xa0>
            n_sent++;
   10f20:	9b00      	ldr	r3, [sp, #0]
   10f22:	3301      	adds	r3, #1
   10f24:	9300      	str	r3, [sp, #0]
        if (uwb_transport->config.request_acks) {
   10f26:	79b3      	ldrb	r3, [r6, #6]
   10f28:	f013 0f04 	tst.w	r3, #4
   10f2c:	f43f af69 	beq.w	10e02 <uwb_transport_dequeue_tx+0x142>
   10f30:	f106 0a38 	add.w	sl, r6, #56	; 0x38
   10f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10f38:	4650      	mov	r0, sl
   10f3a:	f7fd fa39 	bl	e3b0 <os_sem_pend>
   10f3e:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
            if(dpl_sem_get_count(&uwb_transport->ack_sem) == 0) {
   10f40:	2b00      	cmp	r3, #0
   10f42:	f43f af3d 	beq.w	10dc0 <uwb_transport_dequeue_tx+0x100>
            if (uwb_transport->ack_seq_num != uwb_transport->frame_seq_num) {
   10f46:	68f2      	ldr	r2, [r6, #12]
   10f48:	7a33      	ldrb	r3, [r6, #8]
   10f4a:	429a      	cmp	r2, r3
   10f4c:	f43f af59 	beq.w	10e02 <uwb_transport_dequeue_tx+0x142>
                rc = dpl_mbuf_copydata(om, DPL_MBUF_PKTLEN(om)-2, sizeof(uint16_t), &retries);
   10f50:	f8b9 1010 	ldrh.w	r1, [r9, #16]
   10f54:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   10f58:	2202      	movs	r2, #2
   10f5a:	3902      	subs	r1, #2
   10f5c:	4648      	mov	r0, r9
   10f5e:	f001 f8ae 	bl	120be <dpl_mbuf_copydata>
                assert(rc==0);
   10f62:	4682      	mov	sl, r0
   10f64:	2800      	cmp	r0, #0
   10f66:	f47f af2f 	bne.w	10dc8 <uwb_transport_dequeue_tx+0x108>
                if (n_sent > retries) {
   10f6a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   10f6e:	9b00      	ldr	r3, [sp, #0]
   10f70:	429a      	cmp	r2, r3
   10f72:	f6bf af2f 	bge.w	10dd4 <uwb_transport_dequeue_tx+0x114>
                    printf("dropped n:%d r:%d\n", n_sent, retries);
   10f76:	4619      	mov	r1, r3
   10f78:	4811      	ldr	r0, [pc, #68]	; (10fc0 <uwb_transport_dequeue_tx+0x300>)
   10f7a:	f000 fe8b 	bl	11c94 <printf>
                    om = dpl_mqueue_get(&uwb_transport->tx_q);
   10f7e:	f106 0040 	add.w	r0, r6, #64	; 0x40
   10f82:	f000 ff60 	bl	11e46 <dpl_mqueue_get>
                    dpl_mbuf_free_chain(om);
   10f86:	f000 fff8 	bl	11f7a <dpl_mbuf_free_chain>
                    mp = NULL;
   10f8a:	2300      	movs	r3, #0
   10f8c:	9301      	str	r3, [sp, #4]
                    om = NULL;
   10f8e:	4699      	mov	r9, r3
                    membuf_transferred = false;
   10f90:	469a      	mov	sl, r3
   10f92:	e744      	b.n	10e1e <uwb_transport_dequeue_tx+0x15e>
   10f94:	f106 0428 	add.w	r4, r6, #40	; 0x28
   10f98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10f9c:	4620      	mov	r0, r4
   10f9e:	f7fd fa07 	bl	e3b0 <os_sem_pend>
   10fa2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e

    dpl_sem_pend(&uwb_transport->sem, DPL_TIMEOUT_NEVER);
    if(dpl_sem_get_count(&uwb_transport->sem) == 0) {
   10fa4:	b11b      	cbz	r3, 10fae <uwb_transport_dequeue_tx+0x2ee>
        dpl_sem_release(&uwb_transport->sem);
    }

    return true;
   10fa6:	2001      	movs	r0, #1
}
   10fa8:	b00d      	add	sp, #52	; 0x34
   10faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   10fae:	4620      	mov	r0, r4
   10fb0:	f7fd f9cc 	bl	e34c <os_sem_release>
    return true;
   10fb4:	2001      	movs	r0, #1
   10fb6:	e7f7      	b.n	10fa8 <uwb_transport_dequeue_tx+0x2e8>
        return false;
   10fb8:	2000      	movs	r0, #0
   10fba:	e7f5      	b.n	10fa8 <uwb_transport_dequeue_tx+0x2e8>
   10fbc:	f3af 8000 	nop.w
   10fc0:	00023b88 	.word	0x00023b88
   10fc4:	90690691 	.word	0x90690691
   10fc8:	3ff06906 	.word	0x3ff06906

00010fcc <uwb_transport_pkg_init>:
 *
 *
 * @return void
 */
void uwb_transport_pkg_init(void)
{
   10fcc:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev* udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_transport_pkg_init\"}\n",
   10fce:	f000 fef0 	bl	11db2 <dpl_cputime_get32>
   10fd2:	4601      	mov	r1, r0
   10fd4:	480c      	ldr	r0, [pc, #48]	; (11008 <uwb_transport_pkg_init+0x3c>)
   10fd6:	f000 fe5d 	bl	11c94 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   10fda:	2400      	movs	r4, #0
   10fdc:	b104      	cbz	r4, 10fe0 <uwb_transport_pkg_init+0x14>
            continue;
        }
        g_cbs[i].inst_ptr = uwb_transport_init(udev);
        uwb_mac_append_interface(udev, &g_cbs[i]);
    }
}
   10fde:	bd38      	pop	{r3, r4, r5, pc}
        if (i >= MYNEWT_VAL(UWB_DEVICE_MAX)) {
   10fe0:	2c02      	cmp	r4, #2
   10fe2:	dcfc      	bgt.n	10fde <uwb_transport_pkg_init+0x12>
        udev = uwb_dev_idx_lookup(i);
   10fe4:	4620      	mov	r0, r4
   10fe6:	f7f7 fd53 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   10fea:	4605      	mov	r5, r0
   10fec:	b150      	cbz	r0, 11004 <uwb_transport_pkg_init+0x38>
        g_cbs[i].inst_ptr = uwb_transport_init(udev);
   10fee:	f7ff fc8d 	bl	1090c <uwb_transport_init>
   10ff2:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   10ff6:	4b05      	ldr	r3, [pc, #20]	; (1100c <uwb_transport_pkg_init+0x40>)
   10ff8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   10ffc:	6048      	str	r0, [r1, #4]
        uwb_mac_append_interface(udev, &g_cbs[i]);
   10ffe:	4628      	mov	r0, r5
   11000:	f7f7 fd76 	bl	8af0 <uwb_mac_append_interface>
    for (i=0;i < sizeof(g_cbs)/sizeof(g_cbs[0]);i++) {
   11004:	3401      	adds	r4, #1
   11006:	e7e9      	b.n	10fdc <uwb_transport_pkg_init+0x10>
   11008:	00023b9c 	.word	0x00023b9c
   1100c:	20001358 	.word	0x20001358

00011010 <uwb_wcs_init>:
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
{
   11010:	b510      	push	{r4, lr}
   11012:	460c      	mov	r4, r1
    if (wcs == NULL ) {
   11014:	4603      	mov	r3, r0
   11016:	b150      	cbz	r0, 1102e <uwb_wcs_init+0x1e>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
        wcs->status.selfmalloc = 1;
    }
    wcs->ccp = ccp;
   11018:	661c      	str	r4, [r3, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
   1101a:	2000      	movs	r0, #0
   1101c:	490c      	ldr	r1, [pc, #48]	; (11050 <uwb_wcs_init+0x40>)
   1101e:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
   11022:	2000      	movs	r0, #0
   11024:	2100      	movs	r1, #0
   11026:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48

    return wcs;
}
   1102a:	4618      	mov	r0, r3
   1102c:	bd10      	pop	{r4, pc}
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
   1102e:	21a8      	movs	r1, #168	; 0xa8
   11030:	2001      	movs	r0, #1
   11032:	f000 f918 	bl	11266 <calloc>
        assert(wcs);
   11036:	4603      	mov	r3, r0
   11038:	b120      	cbz	r0, 11044 <uwb_wcs_init+0x34>
        wcs->status.selfmalloc = 1;
   1103a:	7802      	ldrb	r2, [r0, #0]
   1103c:	f042 0201 	orr.w	r2, r2, #1
   11040:	7002      	strb	r2, [r0, #0]
   11042:	e7e9      	b.n	11018 <uwb_wcs_init+0x8>
        assert(wcs);
   11044:	2300      	movs	r3, #0
   11046:	461a      	mov	r2, r3
   11048:	4619      	mov	r1, r3
   1104a:	4618      	mov	r0, r3
   1104c:	f7fc f988 	bl	d360 <__assert_func>
   11050:	3ff00000 	.word	0x3ff00000

00011054 <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
   11054:	b510      	push	{r4, lr}
    assert(inst);
   11056:	b168      	cbz	r0, 11074 <uwb_wcs_free+0x20>
   11058:	4604      	mov	r4, r0
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
   1105a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1105e:	f008 fd9f 	bl	19ba0 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
   11062:	7823      	ldrb	r3, [r4, #0]
   11064:	f013 0f01 	tst.w	r3, #1
   11068:	d10a      	bne.n	11080 <uwb_wcs_free+0x2c>
        free(inst);
    else
        inst->status.initialized = 0;
   1106a:	7823      	ldrb	r3, [r4, #0]
   1106c:	f36f 0341 	bfc	r3, #1, #1
   11070:	7023      	strb	r3, [r4, #0]
}
   11072:	bd10      	pop	{r4, pc}
    assert(inst);
   11074:	2300      	movs	r3, #0
   11076:	461a      	mov	r2, r3
   11078:	4619      	mov	r1, r3
   1107a:	4618      	mov	r0, r3
   1107c:	f7fc f970 	bl	d360 <__assert_func>
        free(inst);
   11080:	4620      	mov	r0, r4
   11082:	f000 f9bf 	bl	11404 <free>
   11086:	e7f4      	b.n	11072 <uwb_wcs_free+0x1e>

00011088 <uwb_wcs_set_postprocess>:
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    if(!wcs) return;
   11088:	4603      	mov	r3, r0
   1108a:	b150      	cbz	r0, 110a2 <uwb_wcs_set_postprocess+0x1a>
    memset(ev, 0, sizeof(*ev));
   1108c:	2200      	movs	r2, #0
   1108e:	6502      	str	r2, [r0, #80]	; 0x50
   11090:	6542      	str	r2, [r0, #84]	; 0x54
   11092:	6582      	str	r2, [r0, #88]	; 0x58
   11094:	65c2      	str	r2, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   11096:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
   11098:	6598      	str	r0, [r3, #88]	; 0x58
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
   1109a:	7902      	ldrb	r2, [r0, #4]
   1109c:	f042 0201 	orr.w	r2, r2, #1
   110a0:	7102      	strb	r2, [r0, #4]
}
   110a2:	4770      	bx	lr

000110a4 <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
   110a4:	4619      	mov	r1, r3
    if(!wcs) return dtu_time;
   110a6:	b1b8      	cbz	r0, 110d8 <uwb_wcs_dtu_time_adjust+0x34>
{
   110a8:	b538      	push	{r3, r4, r5, lr}
   110aa:	4603      	mov	r3, r0
    if (wcs->status.valid){
   110ac:	7800      	ldrb	r0, [r0, #0]
   110ae:	f010 0f04 	tst.w	r0, #4
   110b2:	d00d      	beq.n	110d0 <uwb_wcs_dtu_time_adjust+0x2c>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
   110b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
   110b8:	4610      	mov	r0, r2
   110ba:	f010 fc99 	bl	219f0 <__aeabi_ul2d>
   110be:	4602      	mov	r2, r0
   110c0:	460b      	mov	r3, r1
   110c2:	4620      	mov	r0, r4
   110c4:	4629      	mov	r1, r5
   110c6:	f010 fcc9 	bl	21a5c <__aeabi_dmul>
   110ca:	f011 f877 	bl	221bc <__aeabi_d2lz>
   110ce:	4602      	mov	r2, r0
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
   110d0:	4610      	mov	r0, r2
   110d2:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
   110d6:	bd38      	pop	{r3, r4, r5, pc}
    if(!wcs) return dtu_time;
   110d8:	4610      	mov	r0, r2
}
   110da:	4770      	bx	lr

000110dc <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
   110dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   110de:	b087      	sub	sp, #28
   110e0:	4605      	mov	r5, r0
   110e2:	ec51 0b10 	vmov	r0, r1, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
   110e6:	2200      	movs	r2, #0
   110e8:	4b17      	ldr	r3, [pc, #92]	; (11148 <uwb_wcs_prediction+0x6c>)
   110ea:	e9cd 2300 	strd	r2, r3, [sp]
   110ee:	ed8d 0b02 	vstr	d0, [sp, #8]
   110f2:	ee10 2a10 	vmov	r2, s0
   110f6:	460b      	mov	r3, r1
   110f8:	f010 fcb0 	bl	21a5c <__aeabi_dmul>
   110fc:	2200      	movs	r2, #0
   110fe:	4b13      	ldr	r3, [pc, #76]	; (1114c <uwb_wcs_prediction+0x70>)
   11100:	f010 fcac 	bl	21a5c <__aeabi_dmul>
   11104:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   11108:	2400      	movs	r4, #0
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
   1110a:	2600      	movs	r6, #0
   1110c:	2700      	movs	r7, #0
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   1110e:	e014      	b.n	1113a <uwb_wcs_prediction+0x5e>
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
   11110:	ab06      	add	r3, sp, #24
   11112:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   11116:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   1111a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1111e:	e951 0106 	ldrd	r0, r1, [r1, #-24]
   11122:	f010 fc9b 	bl	21a5c <__aeabi_dmul>
   11126:	4602      	mov	r2, r0
   11128:	460b      	mov	r3, r1
   1112a:	4630      	mov	r0, r6
   1112c:	4639      	mov	r1, r7
   1112e:	f010 fadf 	bl	216f0 <__adddf3>
   11132:	4606      	mov	r6, r0
   11134:	460f      	mov	r7, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   11136:	3401      	adds	r4, #1
   11138:	b2e4      	uxtb	r4, r4
   1113a:	2c02      	cmp	r4, #2
   1113c:	d9e8      	bls.n	11110 <uwb_wcs_prediction+0x34>
    }
    return tmp;
}
   1113e:	ec47 6b10 	vmov	d0, r6, r7
   11142:	b007      	add	sp, #28
   11144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11146:	bf00      	nop
   11148:	3ff00000 	.word	0x3ff00000
   1114c:	3fe00000 	.word	0x3fe00000

00011150 <uwb_wcs_local_to_master64>:
    if(!wcs) return 0xffffffffffffffffULL;
   11150:	b350      	cbz	r0, 111a8 <uwb_wcs_local_to_master64+0x58>
{
   11152:	b510      	push	{r4, lr}
   11154:	4604      	mov	r4, r0
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
   11156:	6980      	ldr	r0, [r0, #24]
   11158:	7f21      	ldrb	r1, [r4, #28]
   1115a:	1a10      	subs	r0, r2, r0
   1115c:	eb63 0301 	sbc.w	r3, r3, r1
   11160:	4602      	mov	r2, r0
   11162:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    if (wcs->status.valid) {
   11166:	7823      	ldrb	r3, [r4, #0]
   11168:	f013 0f04 	tst.w	r3, #4
   1116c:	d016      	beq.n	1119c <uwb_wcs_local_to_master64+0x4c>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
   1116e:	f010 fc3f 	bl	219f0 <__aeabi_ul2d>
   11172:	a30f      	add	r3, pc, #60	; (adr r3, 111b0 <uwb_wcs_local_to_master64+0x60>)
   11174:	e9d3 2300 	ldrd	r2, r3, [r3]
   11178:	f010 fd9a 	bl	21cb0 <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
   1117c:	ec41 0b10 	vmov	d0, r0, r1
   11180:	f104 0020 	add.w	r0, r4, #32
   11184:	f7ff ffaa 	bl	110dc <uwb_wcs_prediction>
   11188:	ec51 0b10 	vmov	r0, r1, d0
   1118c:	f011 f816 	bl	221bc <__aeabi_d2lz>
   11190:	460b      	mov	r3, r1
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
   11192:	6961      	ldr	r1, [r4, #20]
   11194:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   11198:	4419      	add	r1, r3
}
   1119a:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
   1119c:	6920      	ldr	r0, [r4, #16]
   1119e:	7d23      	ldrb	r3, [r4, #20]
   111a0:	1880      	adds	r0, r0, r2
   111a2:	eb43 0301 	adc.w	r3, r3, r1
   111a6:	e7f4      	b.n	11192 <uwb_wcs_local_to_master64+0x42>
    if(!wcs) return 0xffffffffffffffffULL;
   111a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   111ac:	4601      	mov	r1, r0
}
   111ae:	4770      	bx	lr
   111b0:	00000000 	.word	0x00000000
   111b4:	422e8480 	.word	0x422e8480

000111b8 <uwb_wcs_local_to_master>:
{
   111b8:	b508      	push	{r3, lr}
    assert(wcs);
   111ba:	b118      	cbz	r0, 111c4 <uwb_wcs_local_to_master+0xc>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
   111bc:	f7ff ffc8 	bl	11150 <uwb_wcs_local_to_master64>
}
   111c0:	b2c9      	uxtb	r1, r1
   111c2:	bd08      	pop	{r3, pc}
    assert(wcs);
   111c4:	2300      	movs	r3, #0
   111c6:	461a      	mov	r2, r3
   111c8:	4619      	mov	r1, r3
   111ca:	4618      	mov	r0, r3
   111cc:	f7fc f8c8 	bl	d360 <__assert_func>

000111d0 <uwb_wcs_read_systime_master64>:
{
   111d0:	b538      	push	{r3, r4, r5, lr}
   111d2:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   111d4:	2101      	movs	r1, #1
   111d6:	f7f7 fce0 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    struct uwb_wcs_instance *wcs = ccp->wcs;
   111da:	6e85      	ldr	r5, [r0, #104]	; 0x68
    return (dev->uw_funcs->uf_read_systime(dev));
   111dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   111de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   111e0:	4620      	mov	r0, r4
   111e2:	4798      	blx	r3
   111e4:	4602      	mov	r2, r0
   111e6:	460b      	mov	r3, r1
    return uwb_wcs_local_to_master64(wcs, uwb_read_systime(inst));
   111e8:	4628      	mov	r0, r5
   111ea:	f7ff ffb1 	bl	11150 <uwb_wcs_local_to_master64>
}
   111ee:	bd38      	pop	{r3, r4, r5, pc}

000111f0 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
   111f0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
   111f2:	f000 fdde 	bl	11db2 <dpl_cputime_get32>
   111f6:	4601      	mov	r1, r0
   111f8:	480c      	ldr	r0, [pc, #48]	; (1122c <uwb_wcs_pkg_init+0x3c>)
   111fa:	f000 fd4b 	bl	11c94 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   111fe:	2400      	movs	r4, #0
   11200:	e000      	b.n	11204 <uwb_wcs_pkg_init+0x14>
   11202:	3401      	adds	r4, #1
   11204:	2c02      	cmp	r4, #2
   11206:	dc10      	bgt.n	1122a <uwb_wcs_pkg_init+0x3a>
        udev = uwb_dev_idx_lookup(i);
   11208:	4620      	mov	r0, r4
   1120a:	f7f7 fc41 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   1120e:	2800      	cmp	r0, #0
   11210:	d0f7      	beq.n	11202 <uwb_wcs_pkg_init+0x12>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   11212:	2101      	movs	r1, #1
   11214:	f7f7 fcc1 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   11218:	4605      	mov	r5, r0
   1121a:	2800      	cmp	r0, #0
   1121c:	d0f1      	beq.n	11202 <uwb_wcs_pkg_init+0x12>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
   1121e:	4601      	mov	r1, r0
   11220:	2000      	movs	r0, #0
   11222:	f7ff fef5 	bl	11010 <uwb_wcs_init>
   11226:	66a8      	str	r0, [r5, #104]	; 0x68
   11228:	e7eb      	b.n	11202 <uwb_wcs_pkg_init+0x12>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
   1122a:	bd38      	pop	{r3, r4, r5, pc}
   1122c:	00023bcc 	.word	0x00023bcc

00011230 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
   11230:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   11232:	2400      	movs	r4, #0
   11234:	e000      	b.n	11238 <uwb_wcs_pkg_down+0x8>
   11236:	3401      	adds	r4, #1
   11238:	2c02      	cmp	r4, #2
   1123a:	dc12      	bgt.n	11262 <uwb_wcs_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
   1123c:	4620      	mov	r0, r4
   1123e:	f7f7 fc27 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   11242:	2800      	cmp	r0, #0
   11244:	d0f7      	beq.n	11236 <uwb_wcs_pkg_down+0x6>
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
#ifdef __KERNEL__
        wcs_chrdev_destroy(i);
#endif /* __KERNEL__ */
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   11246:	2101      	movs	r1, #1
   11248:	f7f7 fca7 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   1124c:	4605      	mov	r5, r0
   1124e:	2800      	cmp	r0, #0
   11250:	d0f1      	beq.n	11236 <uwb_wcs_pkg_down+0x6>
            continue;
        }
        if (ccp->wcs) {
   11252:	6e80      	ldr	r0, [r0, #104]	; 0x68
   11254:	2800      	cmp	r0, #0
   11256:	d0ee      	beq.n	11236 <uwb_wcs_pkg_down+0x6>
            uwb_wcs_free(ccp->wcs);
   11258:	f7ff fefc 	bl	11054 <uwb_wcs_free>
            ccp->wcs = 0;
   1125c:	2300      	movs	r3, #0
   1125e:	66ab      	str	r3, [r5, #104]	; 0x68
   11260:	e7e9      	b.n	11236 <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
   11262:	2000      	movs	r0, #0
   11264:	bd38      	pop	{r3, r4, r5, pc}

00011266 <calloc>:
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

void *calloc(size_t nmemb, size_t size)
{
   11266:	b538      	push	{r3, r4, r5, lr}
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
   11268:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1126c:	4299      	cmp	r1, r3
   1126e:	d80e      	bhi.n	1128e <calloc+0x28>
   11270:	4298      	cmp	r0, r3
   11272:	d80e      	bhi.n	11292 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
   11274:	fb00 f401 	mul.w	r4, r0, r1
	ptr = malloc(size);
   11278:	4620      	mov	r0, r4
   1127a:	f000 f88d 	bl	11398 <malloc>
	if (ptr)
   1127e:	4605      	mov	r5, r0
   11280:	b118      	cbz	r0, 1128a <calloc+0x24>
		memset(ptr, 0, size);
   11282:	4622      	mov	r2, r4
   11284:	2100      	movs	r1, #0
   11286:	f000 f904 	bl	11492 <memset>

	return ptr;
}
   1128a:	4628      	mov	r0, r5
   1128c:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
   1128e:	2500      	movs	r5, #0
   11290:	e7fb      	b.n	1128a <calloc+0x24>
   11292:	2500      	movs	r5, #0
   11294:	e7f9      	b.n	1128a <calloc+0x24>

00011296 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   11296:	2001      	movs	r0, #1
   11298:	4770      	bx	lr

0001129a <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   1129a:	4770      	bx	lr

0001129c <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   1129c:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   1129e:	f101 0320 	add.w	r3, r1, #32
   112a2:	4293      	cmp	r3, r2
   112a4:	d816      	bhi.n	112d4 <__malloc_from_block+0x38>
{
   112a6:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   112a8:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   112aa:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   112ac:	2501      	movs	r5, #1
   112ae:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   112b0:	1a52      	subs	r2, r2, r1
   112b2:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   112b4:	2200      	movs	r2, #0
   112b6:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   112b8:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   112ba:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   112bc:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   112be:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   112c0:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   112c2:	6901      	ldr	r1, [r0, #16]
   112c4:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   112c6:	6942      	ldr	r2, [r0, #20]
   112c8:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   112ca:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   112cc:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   112ce:	3010      	adds	r0, #16
   112d0:	bc30      	pop	{r4, r5}
   112d2:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   112d4:	2300      	movs	r3, #0
   112d6:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   112d8:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   112da:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   112dc:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   112de:	615a      	str	r2, [r3, #20]
}
   112e0:	3010      	adds	r0, #16
   112e2:	4770      	bx	lr

000112e4 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   112e4:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   112e6:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   112e8:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   112ea:	6802      	ldr	r2, [r0, #0]
   112ec:	2a01      	cmp	r2, #1
   112ee:	d00d      	beq.n	1130c <__free_block+0x28>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   112f0:	2201      	movs	r2, #1
   112f2:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   112f4:	4a13      	ldr	r2, [pc, #76]	; (11344 <__free_block+0x60>)
   112f6:	6910      	ldr	r0, [r2, #16]
   112f8:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   112fa:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   112fc:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   112fe:	691a      	ldr	r2, [r3, #16]
   11300:	6153      	str	r3, [r2, #20]
   11302:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   11304:	680b      	ldr	r3, [r1, #0]
   11306:	2b01      	cmp	r3, #1
   11308:	d00b      	beq.n	11322 <__free_block+0x3e>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   1130a:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   1130c:	6842      	ldr	r2, [r0, #4]
   1130e:	eb00 0c02 	add.w	ip, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   11312:	459c      	cmp	ip, r3
   11314:	d1ec      	bne.n	112f0 <__free_block+0xc>
        pah->a.size += ah->a.size;
   11316:	685b      	ldr	r3, [r3, #4]
   11318:	441a      	add	r2, r3
   1131a:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   1131c:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   1131e:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   11320:	e7f0      	b.n	11304 <__free_block+0x20>
        (char *)ah + ah->a.size == (char *)nah) {
   11322:	6843      	ldr	r3, [r0, #4]
   11324:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   11326:	428a      	cmp	r2, r1
   11328:	d1ef      	bne.n	1130a <__free_block+0x26>
        ah->a.size += nah->a.size;
   1132a:	684a      	ldr	r2, [r1, #4]
   1132c:	4413      	add	r3, r2
   1132e:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   11330:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   11332:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   11334:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   11336:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   11338:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   1133a:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   1133c:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   1133e:	60da      	str	r2, [r3, #12]
    return ah;
   11340:	e7e3      	b.n	1130a <__free_block+0x26>
   11342:	bf00      	nop
   11344:	20001394 	.word	0x20001394

00011348 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   11348:	2917      	cmp	r1, #23
   1134a:	d91e      	bls.n	1138a <add_malloc_block+0x42>
{
   1134c:	b510      	push	{r4, lr}
   1134e:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   11350:	2301      	movs	r3, #1
   11352:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   11354:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   11356:	4b0d      	ldr	r3, [pc, #52]	; (1138c <add_malloc_block+0x44>)
   11358:	681b      	ldr	r3, [r3, #0]
   1135a:	4798      	blx	r3
   1135c:	b1a0      	cbz	r0, 11388 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1135e:	4b0c      	ldr	r3, [pc, #48]	; (11390 <add_malloc_block+0x48>)
   11360:	68db      	ldr	r3, [r3, #12]
   11362:	e000      	b.n	11366 <add_malloc_block+0x1e>
         pah = pah->a.prev) {
   11364:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   11366:	681a      	ldr	r2, [r3, #0]
   11368:	2a02      	cmp	r2, #2
   1136a:	d001      	beq.n	11370 <add_malloc_block+0x28>
        if (pah < fp)
   1136c:	42a3      	cmp	r3, r4
   1136e:	d2f9      	bcs.n	11364 <add_malloc_block+0x1c>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   11370:	689a      	ldr	r2, [r3, #8]
   11372:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   11374:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   11376:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   11378:	68a3      	ldr	r3, [r4, #8]
   1137a:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   1137c:	4620      	mov	r0, r4
   1137e:	f7ff ffb1 	bl	112e4 <__free_block>

    malloc_unlock();
   11382:	4b04      	ldr	r3, [pc, #16]	; (11394 <add_malloc_block+0x4c>)
   11384:	681b      	ldr	r3, [r3, #0]
   11386:	4798      	blx	r3
}
   11388:	bd10      	pop	{r4, pc}
   1138a:	4770      	bx	lr
   1138c:	200013ac 	.word	0x200013ac
   11390:	20001394 	.word	0x20001394
   11394:	200013b0 	.word	0x200013b0

00011398 <malloc>:
{
   11398:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1139a:	1e43      	subs	r3, r0, #1
   1139c:	f113 0f12 	cmn.w	r3, #18
   113a0:	d825      	bhi.n	113ee <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   113a2:	301f      	adds	r0, #31
   113a4:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   113a8:	4b13      	ldr	r3, [pc, #76]	; (113f8 <malloc+0x60>)
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	4798      	blx	r3
   113ae:	b300      	cbz	r0, 113f2 <malloc+0x5a>
    void *result = NULL;
   113b0:	2500      	movs	r5, #0
   113b2:	e00d      	b.n	113d0 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   113b4:	4621      	mov	r1, r4
   113b6:	f7ff ff71 	bl	1129c <__malloc_from_block>
   113ba:	4605      	mov	r5, r0
    if (result == NULL) {
   113bc:	b995      	cbnz	r5, 113e4 <malloc+0x4c>
        more_mem = _sbrk(size);
   113be:	4620      	mov	r0, r4
   113c0:	f7f6 feda 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   113c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   113c8:	d00c      	beq.n	113e4 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   113ca:	4621      	mov	r1, r4
   113cc:	f7ff ffbc 	bl	11348 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   113d0:	4b0a      	ldr	r3, [pc, #40]	; (113fc <malloc+0x64>)
   113d2:	6918      	ldr	r0, [r3, #16]
   113d4:	6803      	ldr	r3, [r0, #0]
   113d6:	2b02      	cmp	r3, #2
   113d8:	d0f0      	beq.n	113bc <malloc+0x24>
        if (fp->a.size >= size) {
   113da:	6843      	ldr	r3, [r0, #4]
   113dc:	42a3      	cmp	r3, r4
   113de:	d2e9      	bcs.n	113b4 <malloc+0x1c>
         fp = fp->next_free) {
   113e0:	6900      	ldr	r0, [r0, #16]
   113e2:	e7f7      	b.n	113d4 <malloc+0x3c>
    malloc_unlock();
   113e4:	4b06      	ldr	r3, [pc, #24]	; (11400 <malloc+0x68>)
   113e6:	681b      	ldr	r3, [r3, #0]
   113e8:	4798      	blx	r3
}
   113ea:	4628      	mov	r0, r5
   113ec:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   113ee:	2500      	movs	r5, #0
   113f0:	e7fb      	b.n	113ea <malloc+0x52>
        return NULL;
   113f2:	2500      	movs	r5, #0
   113f4:	e7f9      	b.n	113ea <malloc+0x52>
   113f6:	bf00      	nop
   113f8:	200013ac 	.word	0x200013ac
   113fc:	20001394 	.word	0x20001394
   11400:	200013b0 	.word	0x200013b0

00011404 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   11404:	b170      	cbz	r0, 11424 <free+0x20>
{
   11406:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   11408:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   1140c:	4b06      	ldr	r3, [pc, #24]	; (11428 <free+0x24>)
   1140e:	681b      	ldr	r3, [r3, #0]
   11410:	4798      	blx	r3
   11412:	b900      	cbnz	r0, 11416 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   11414:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   11416:	4620      	mov	r0, r4
   11418:	f7ff ff64 	bl	112e4 <__free_block>
    malloc_unlock();
   1141c:	4b03      	ldr	r3, [pc, #12]	; (1142c <free+0x28>)
   1141e:	681b      	ldr	r3, [r3, #0]
   11420:	4798      	blx	r3
   11422:	e7f7      	b.n	11414 <free+0x10>
   11424:	4770      	bx	lr
   11426:	bf00      	nop
   11428:	200013ac 	.word	0x200013ac
   1142c:	200013b0 	.word	0x200013b0

00011430 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   11430:	b470      	push	{r4, r5, r6}
   11432:	f04f 0500 	mov.w	r5, #0
   11436:	f022 0603 	bic.w	r6, r2, #3
   1143a:	e005      	b.n	11448 <test1>

0001143c <loop1>:
   1143c:	5943      	ldr	r3, [r0, r5]
   1143e:	594c      	ldr	r4, [r1, r5]
   11440:	42a3      	cmp	r3, r4
   11442:	d104      	bne.n	1144e <res1>
   11444:	f105 0504 	add.w	r5, r5, #4

00011448 <test1>:
   11448:	42b5      	cmp	r5, r6
   1144a:	d1f7      	bne.n	1143c <loop1>
   1144c:	e00d      	b.n	1146a <test2>

0001144e <res1>:
   1144e:	ba1b      	rev	r3, r3
   11450:	ba24      	rev	r4, r4
   11452:	1b1b      	subs	r3, r3, r4
   11454:	bf8c      	ite	hi
   11456:	2301      	movhi	r3, #1
   11458:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1145c:	e009      	b.n	11472 <done>

0001145e <loop2>:
   1145e:	5d43      	ldrb	r3, [r0, r5]
   11460:	5d4c      	ldrb	r4, [r1, r5]
   11462:	1b1b      	subs	r3, r3, r4
   11464:	d105      	bne.n	11472 <done>
   11466:	f105 0501 	add.w	r5, r5, #1

0001146a <test2>:
   1146a:	4295      	cmp	r5, r2
   1146c:	d1f7      	bne.n	1145e <loop2>
   1146e:	f04f 0300 	mov.w	r3, #0

00011472 <done>:
   11472:	4618      	mov	r0, r3
   11474:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   11476:	4770      	bx	lr

00011478 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   11478:	e001      	b.n	1147e <test1>

0001147a <loop1>:
   1147a:	588b      	ldr	r3, [r1, r2]
   1147c:	5083      	str	r3, [r0, r2]

0001147e <test1>:
   1147e:	3a04      	subs	r2, #4
   11480:	d5fb      	bpl.n	1147a <loop1>
   11482:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   11486:	e001      	b.n	1148c <test2>

00011488 <loop2>:
   11488:	5c8b      	ldrb	r3, [r1, r2]
   1148a:	5483      	strb	r3, [r0, r2]

0001148c <test2>:
   1148c:	3a01      	subs	r2, #1
   1148e:	d5fb      	bpl.n	11488 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   11490:	4770      	bx	lr

00011492 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   11492:	b410      	push	{r4}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   11494:	4684      	mov	ip, r0
   11496:	b2c9      	uxtb	r1, r1
   11498:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1149c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   114a0:	eb1c 0302 	adds.w	r3, ip, r2
   114a4:	2403      	movs	r4, #3
   114a6:	4023      	ands	r3, r4
   114a8:	1ad3      	subs	r3, r2, r3
   114aa:	d40e      	bmi.n	114ca <memset+0x38>
   114ac:	e002      	b.n	114b4 <memset+0x22>
   114ae:	3a01      	subs	r2, #1
   114b0:	f80c 1002 	strb.w	r1, [ip, r2]
   114b4:	429a      	cmp	r2, r3
   114b6:	d1fa      	bne.n	114ae <memset+0x1c>
   114b8:	e001      	b.n	114be <memset+0x2c>
   114ba:	f84c 1002 	str.w	r1, [ip, r2]
   114be:	3a04      	subs	r2, #4
   114c0:	d5fb      	bpl.n	114ba <memset+0x28>
   114c2:	3204      	adds	r2, #4
   114c4:	e001      	b.n	114ca <memset+0x38>
   114c6:	f80c 1002 	strb.w	r1, [ip, r2]
   114ca:	3a01      	subs	r2, #1
   114cc:	d5fb      	bpl.n	114c6 <memset+0x34>
		*q++ = c;
	}
#endif

	return dst;
}
   114ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   114d2:	4770      	bx	lr

000114d4 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   114d4:	4684      	mov	ip, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   114d6:	f89c 2000 	ldrb.w	r2, [ip]
   114da:	f10c 0c01 	add.w	ip, ip, #1
   114de:	7808      	ldrb	r0, [r1, #0]
   114e0:	3101      	adds	r1, #1
		if (d || !ch)
   114e2:	1a10      	subs	r0, r2, r0
   114e4:	d101      	bne.n	114ea <strcmp+0x16>
   114e6:	2a00      	cmp	r2, #0
   114e8:	d1f5      	bne.n	114d6 <strcmp+0x2>
			break;
	}

	return d;
}
   114ea:	4770      	bx	lr

000114ec <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   114ec:	b510      	push	{r4, lr}
   114ee:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   114f0:	b132      	cbz	r2, 11500 <strncpy+0x14>
		n--;
   114f2:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   114f4:	f811 3b01 	ldrb.w	r3, [r1], #1
   114f8:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   114fc:	2b00      	cmp	r3, #0
   114fe:	d1f7      	bne.n	114f0 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   11500:	2100      	movs	r1, #0
   11502:	f7ff ffc6 	bl	11492 <memset>

	return dst;
}
   11506:	4620      	mov	r0, r4
   11508:	bd10      	pop	{r4, pc}

0001150a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1150a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1150e:	b085      	sub	sp, #20
   11510:	4606      	mov	r6, r0
   11512:	460f      	mov	r7, r1
   11514:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   11516:	6853      	ldr	r3, [r2, #4]
   11518:	9302      	str	r3, [sp, #8]
    unsigned long long int d = 1;
   1151a:	2501      	movs	r5, #1
   1151c:	2400      	movs	r4, #0
    while (num / d >= p->base)
   1151e:	e004      	b.n	1152a <ui2a+0x20>
        d *= p->base;
   11520:	fb04 f303 	mul.w	r3, r4, r3
   11524:	fba5 5402 	umull	r5, r4, r5, r2
   11528:	441c      	add	r4, r3
    while (num / d >= p->base)
   1152a:	462a      	mov	r2, r5
   1152c:	4623      	mov	r3, r4
   1152e:	4630      	mov	r0, r6
   11530:	4639      	mov	r1, r7
   11532:	f010 fe2b 	bl	2218c <__aeabi_uldivmod>
   11536:	f899 3003 	ldrb.w	r3, [r9, #3]
   1153a:	461a      	mov	r2, r3
   1153c:	4298      	cmp	r0, r3
   1153e:	f171 0100 	sbcs.w	r1, r1, #0
   11542:	d2ed      	bcs.n	11520 <ui2a+0x16>
    int n = 0;
   11544:	f04f 0a00 	mov.w	sl, #0
   11548:	e00b      	b.n	11562 <ui2a+0x58>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1154a:	2230      	movs	r2, #48	; 0x30
   1154c:	9b02      	ldr	r3, [sp, #8]
   1154e:	4490      	add	r8, r2
   11550:	f803 8b01 	strb.w	r8, [r3], #1
            ++n;
   11554:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   11558:	9302      	str	r3, [sp, #8]
   1155a:	4605      	mov	r5, r0
   1155c:	460c      	mov	r4, r1
   1155e:	9e00      	ldr	r6, [sp, #0]
   11560:	9f01      	ldr	r7, [sp, #4]
    while (d != 0) {
   11562:	ea55 0304 	orrs.w	r3, r5, r4
   11566:	d031      	beq.n	115cc <ui2a+0xc2>
        unsigned long long  dgt = num / d;
   11568:	462a      	mov	r2, r5
   1156a:	4623      	mov	r3, r4
   1156c:	4630      	mov	r0, r6
   1156e:	4639      	mov	r1, r7
   11570:	f010 fe0c 	bl	2218c <__aeabi_uldivmod>
   11574:	4680      	mov	r8, r0
   11576:	9103      	str	r1, [sp, #12]
        num %= d;
   11578:	462a      	mov	r2, r5
   1157a:	4623      	mov	r3, r4
   1157c:	4630      	mov	r0, r6
   1157e:	4639      	mov	r1, r7
   11580:	f010 fe04 	bl	2218c <__aeabi_uldivmod>
   11584:	9200      	str	r2, [sp, #0]
   11586:	9301      	str	r3, [sp, #4]
        d /= p->base;
   11588:	f899 b003 	ldrb.w	fp, [r9, #3]
   1158c:	465a      	mov	r2, fp
   1158e:	2300      	movs	r3, #0
   11590:	4628      	mov	r0, r5
   11592:	4621      	mov	r1, r4
   11594:	f010 fdfa 	bl	2218c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   11598:	f1ba 0f00 	cmp.w	sl, #0
   1159c:	d107      	bne.n	115ae <ui2a+0xa4>
   1159e:	42ae      	cmp	r6, r5
   115a0:	eb77 0304 	sbcs.w	r3, r7, r4
   115a4:	d203      	bcs.n	115ae <ui2a+0xa4>
   115a6:	455d      	cmp	r5, fp
   115a8:	f174 0300 	sbcs.w	r3, r4, #0
   115ac:	d2d5      	bcs.n	1155a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   115ae:	f1b8 0f0a 	cmp.w	r8, #10
   115b2:	9b03      	ldr	r3, [sp, #12]
   115b4:	f173 0300 	sbcs.w	r3, r3, #0
   115b8:	d3c7      	bcc.n	1154a <ui2a+0x40>
   115ba:	f899 3002 	ldrb.w	r3, [r9, #2]
   115be:	f013 0f04 	tst.w	r3, #4
   115c2:	d001      	beq.n	115c8 <ui2a+0xbe>
   115c4:	2237      	movs	r2, #55	; 0x37
   115c6:	e7c1      	b.n	1154c <ui2a+0x42>
   115c8:	2257      	movs	r2, #87	; 0x57
   115ca:	e7bf      	b.n	1154c <ui2a+0x42>
        }
    }
    *bf = 0;
   115cc:	2300      	movs	r3, #0
   115ce:	9a02      	ldr	r2, [sp, #8]
   115d0:	7013      	strb	r3, [r2, #0]
}
   115d2:	b005      	add	sp, #20
   115d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000115d8 <i2a>:

static void i2a(long long int num, struct param *p)
{
   115d8:	b508      	push	{r3, lr}
    if (num < 0) {
   115da:	2900      	cmp	r1, #0
   115dc:	db02      	blt.n	115e4 <i2a+0xc>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   115de:	f7ff ff94 	bl	1150a <ui2a>
}
   115e2:	bd08      	pop	{r3, pc}
        num = -num;
   115e4:	4240      	negs	r0, r0
   115e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   115ea:	7893      	ldrb	r3, [r2, #2]
   115ec:	f043 0301 	orr.w	r3, r3, #1
   115f0:	7093      	strb	r3, [r2, #2]
   115f2:	e7f4      	b.n	115de <i2a+0x6>

000115f4 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   115f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   115f8:	b2db      	uxtb	r3, r3
   115fa:	2b09      	cmp	r3, #9
   115fc:	d90b      	bls.n	11616 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   115fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   11602:	b2db      	uxtb	r3, r3
   11604:	2b05      	cmp	r3, #5
   11606:	d908      	bls.n	1161a <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   11608:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1160c:	b2db      	uxtb	r3, r3
   1160e:	2b05      	cmp	r3, #5
   11610:	d805      	bhi.n	1161e <a2d+0x2a>
        return ch - 'A' + 10;
   11612:	3837      	subs	r0, #55	; 0x37
   11614:	4770      	bx	lr
        return ch - '0';
   11616:	3830      	subs	r0, #48	; 0x30
   11618:	4770      	bx	lr
        return ch - 'a' + 10;
   1161a:	3857      	subs	r0, #87	; 0x57
   1161c:	4770      	bx	lr
    else
        return -1;
   1161e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   11622:	4770      	bx	lr

00011624 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   11624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11628:	4604      	mov	r4, r0
   1162a:	460f      	mov	r7, r1
   1162c:	4615      	mov	r5, r2
   1162e:	4698      	mov	r8, r3
    const char *p = *src;
   11630:	f8d1 9000 	ldr.w	r9, [r1]
    int num = 0;
   11634:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   11636:	e005      	b.n	11644 <a2i+0x20>
        if (digit > base)
            break;
        num = num * base + digit;
   11638:	fb05 0606 	mla	r6, r5, r6, r0
        ch = *p++;
   1163c:	46cc      	mov	ip, r9
   1163e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   11642:	46e1      	mov	r9, ip
    while ((digit = a2d(ch)) >= 0) {
   11644:	4620      	mov	r0, r4
   11646:	f7ff ffd5 	bl	115f4 <a2d>
   1164a:	2800      	cmp	r0, #0
   1164c:	db01      	blt.n	11652 <a2i+0x2e>
        if (digit > base)
   1164e:	42a8      	cmp	r0, r5
   11650:	ddf2      	ble.n	11638 <a2i+0x14>
    }
    *src = p;
   11652:	f8c7 9000 	str.w	r9, [r7]
    *nump = num;
   11656:	f888 6000 	strb.w	r6, [r8]
    return ch;
}
   1165a:	4620      	mov	r0, r4
   1165c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011660 <putf>:

static int putf(FILE *putp, char c)
{
   11660:	b500      	push	{lr}
   11662:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   11664:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   11668:	6803      	ldr	r3, [r0, #0]
   1166a:	681b      	ldr	r3, [r3, #0]
   1166c:	b143      	cbz	r3, 11680 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1166e:	2201      	movs	r2, #1
   11670:	f10d 0107 	add.w	r1, sp, #7
   11674:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   11676:	2801      	cmp	r0, #1
   11678:	d102      	bne.n	11680 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   1167a:	b003      	add	sp, #12
   1167c:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   11680:	2000      	movs	r0, #0
   11682:	e7fa      	b.n	1167a <putf+0x1a>

00011684 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   11684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11688:	4607      	mov	r7, r0
   1168a:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1168c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1168e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   11690:	e000      	b.n	11694 <putchw+0x10>
        n--;
   11692:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   11694:	f813 2b01 	ldrb.w	r2, [r3], #1
   11698:	b10a      	cbz	r2, 1169e <putchw+0x1a>
   1169a:	2c00      	cmp	r4, #0
   1169c:	dcf9      	bgt.n	11692 <putchw+0xe>
    if (p->sign)
   1169e:	f898 3002 	ldrb.w	r3, [r8, #2]
   116a2:	f013 0f01 	tst.w	r3, #1
   116a6:	d000      	beq.n	116aa <putchw+0x26>
        n--;
   116a8:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   116aa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   116ae:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   116b2:	b29b      	uxth	r3, r3
   116b4:	f241 0202 	movw	r2, #4098	; 0x1002
   116b8:	4293      	cmp	r3, r2
   116ba:	d021      	beq.n	11700 <putchw+0x7c>
        n -= 2;
    else if (p->alt && p->base == 8)
   116bc:	f640 0202 	movw	r2, #2050	; 0x802
   116c0:	4293      	cmp	r3, r2
   116c2:	d01f      	beq.n	11704 <putchw+0x80>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   116c4:	f8d8 3000 	ldr.w	r3, [r8]
   116c8:	4e36      	ldr	r6, [pc, #216]	; (117a4 <putchw+0x120>)
   116ca:	401e      	ands	r6, r3
   116cc:	b316      	cbz	r6, 11714 <putchw+0x90>
    unsigned written = 0;
   116ce:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   116d0:	f898 3002 	ldrb.w	r3, [r8, #2]
   116d4:	f013 0f01 	tst.w	r3, #1
   116d8:	d121      	bne.n	1171e <putchw+0x9a>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   116da:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   116de:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   116e2:	b29b      	uxth	r3, r3
   116e4:	f241 0202 	movw	r2, #4098	; 0x1002
   116e8:	4293      	cmp	r3, r2
   116ea:	d01e      	beq.n	1172a <putchw+0xa6>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   116ec:	f640 0202 	movw	r2, #2050	; 0x802
   116f0:	4293      	cmp	r3, r2
   116f2:	d02c      	beq.n	1174e <putchw+0xca>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   116f4:	f898 3001 	ldrb.w	r3, [r8, #1]
   116f8:	bbab      	cbnz	r3, 11766 <putchw+0xe2>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   116fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   116fe:	e03b      	b.n	11778 <putchw+0xf4>
        n -= 2;
   11700:	3c02      	subs	r4, #2
   11702:	e7df      	b.n	116c4 <putchw+0x40>
        n--;
   11704:	3c01      	subs	r4, #1
   11706:	e7dd      	b.n	116c4 <putchw+0x40>
            written += putf(putp, ' ');
   11708:	2120      	movs	r1, #32
   1170a:	4638      	mov	r0, r7
   1170c:	f7ff ffa8 	bl	11660 <putf>
   11710:	4406      	add	r6, r0
        while (n-- > 0)
   11712:	462c      	mov	r4, r5
   11714:	1e65      	subs	r5, r4, #1
   11716:	2c00      	cmp	r4, #0
   11718:	dcf6      	bgt.n	11708 <putchw+0x84>
   1171a:	462c      	mov	r4, r5
   1171c:	e7d8      	b.n	116d0 <putchw+0x4c>
        written += putf(putp, '-');
   1171e:	212d      	movs	r1, #45	; 0x2d
   11720:	4638      	mov	r0, r7
   11722:	f7ff ff9d 	bl	11660 <putf>
   11726:	4406      	add	r6, r0
   11728:	e7d7      	b.n	116da <putchw+0x56>
        written += putf(putp, '0');
   1172a:	2130      	movs	r1, #48	; 0x30
   1172c:	4638      	mov	r0, r7
   1172e:	f7ff ff97 	bl	11660 <putf>
   11732:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   11734:	f898 3002 	ldrb.w	r3, [r8, #2]
   11738:	f013 0f04 	tst.w	r3, #4
   1173c:	d005      	beq.n	1174a <putchw+0xc6>
   1173e:	2158      	movs	r1, #88	; 0x58
   11740:	4638      	mov	r0, r7
   11742:	f7ff ff8d 	bl	11660 <putf>
   11746:	4406      	add	r6, r0
   11748:	e7d4      	b.n	116f4 <putchw+0x70>
   1174a:	2178      	movs	r1, #120	; 0x78
   1174c:	e7f8      	b.n	11740 <putchw+0xbc>
        written += putf(putp, '0');
   1174e:	2130      	movs	r1, #48	; 0x30
   11750:	4638      	mov	r0, r7
   11752:	f7ff ff85 	bl	11660 <putf>
   11756:	4406      	add	r6, r0
   11758:	e7cc      	b.n	116f4 <putchw+0x70>
            written += putf(putp, '0');
   1175a:	2130      	movs	r1, #48	; 0x30
   1175c:	4638      	mov	r0, r7
   1175e:	f7ff ff7f 	bl	11660 <putf>
   11762:	4406      	add	r6, r0
        while (n-- > 0)
   11764:	462c      	mov	r4, r5
   11766:	1e65      	subs	r5, r4, #1
   11768:	2c00      	cmp	r4, #0
   1176a:	dcf6      	bgt.n	1175a <putchw+0xd6>
   1176c:	462c      	mov	r4, r5
   1176e:	e7c4      	b.n	116fa <putchw+0x76>
        written += putf(putp, ch);
   11770:	4638      	mov	r0, r7
   11772:	f7ff ff75 	bl	11660 <putf>
   11776:	4406      	add	r6, r0
    while ((ch = *bf++))
   11778:	f815 1b01 	ldrb.w	r1, [r5], #1
   1177c:	2900      	cmp	r1, #0
   1177e:	d1f7      	bne.n	11770 <putchw+0xec>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   11780:	f898 3002 	ldrb.w	r3, [r8, #2]
   11784:	f013 0f08 	tst.w	r3, #8
   11788:	d108      	bne.n	1179c <putchw+0x118>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   1178a:	4630      	mov	r0, r6
   1178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            written += putf(putp, ' ');
   11790:	2120      	movs	r1, #32
   11792:	4638      	mov	r0, r7
   11794:	f7ff ff64 	bl	11660 <putf>
   11798:	4406      	add	r6, r0
        while (n-- > 0)
   1179a:	462c      	mov	r4, r5
   1179c:	1e65      	subs	r5, r4, #1
   1179e:	2c00      	cmp	r4, #0
   117a0:	dcf6      	bgt.n	11790 <putchw+0x10c>
   117a2:	e7f2      	b.n	1178a <putchw+0x106>
   117a4:	0008ff00 	.word	0x0008ff00

000117a8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   117a8:	b160      	cbz	r0, 117c4 <intarg+0x1c>
   117aa:	2801      	cmp	r0, #1
   117ac:	d018      	beq.n	117e0 <intarg+0x38>
        }
        break;

    case 2:
    default:
        if (sign) {
   117ae:	b329      	cbz	r1, 117fc <intarg+0x54>
            val = va_arg(*va, long long);
   117b0:	6813      	ldr	r3, [r2, #0]
   117b2:	3307      	adds	r3, #7
   117b4:	f023 0307 	bic.w	r3, r3, #7
   117b8:	f103 0108 	add.w	r1, r3, #8
   117bc:	6011      	str	r1, [r2, #0]
   117be:	6818      	ldr	r0, [r3, #0]
   117c0:	6859      	ldr	r1, [r3, #4]
   117c2:	4770      	bx	lr
        if (sign) {
   117c4:	b131      	cbz	r1, 117d4 <intarg+0x2c>
            val = va_arg(*va, int);
   117c6:	6813      	ldr	r3, [r2, #0]
   117c8:	1d19      	adds	r1, r3, #4
   117ca:	6011      	str	r1, [r2, #0]
   117cc:	6819      	ldr	r1, [r3, #0]
   117ce:	4608      	mov	r0, r1
   117d0:	17c9      	asrs	r1, r1, #31
   117d2:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   117d4:	6813      	ldr	r3, [r2, #0]
   117d6:	1d19      	adds	r1, r3, #4
   117d8:	6011      	str	r1, [r2, #0]
   117da:	6818      	ldr	r0, [r3, #0]
   117dc:	2100      	movs	r1, #0
   117de:	4770      	bx	lr
        if (sign) {
   117e0:	b131      	cbz	r1, 117f0 <intarg+0x48>
            val = va_arg(*va, long);
   117e2:	6813      	ldr	r3, [r2, #0]
   117e4:	1d19      	adds	r1, r3, #4
   117e6:	6011      	str	r1, [r2, #0]
   117e8:	6819      	ldr	r1, [r3, #0]
   117ea:	4608      	mov	r0, r1
   117ec:	17c9      	asrs	r1, r1, #31
   117ee:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   117f0:	6813      	ldr	r3, [r2, #0]
   117f2:	1d19      	adds	r1, r3, #4
   117f4:	6011      	str	r1, [r2, #0]
   117f6:	6818      	ldr	r0, [r3, #0]
   117f8:	2100      	movs	r1, #0
   117fa:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   117fc:	6813      	ldr	r3, [r2, #0]
   117fe:	3307      	adds	r3, #7
   11800:	f023 0307 	bic.w	r3, r3, #7
   11804:	f103 0108 	add.w	r1, r3, #8
   11808:	6011      	str	r1, [r2, #0]
   1180a:	6818      	ldr	r0, [r3, #0]
   1180c:	6859      	ldr	r1, [r3, #4]
        }
        break;
    }

    return val;
}
   1180e:	4770      	bx	lr

00011810 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   11810:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   11814:	b08a      	sub	sp, #40	; 0x28
   11816:	4606      	mov	r6, r0
   11818:	9101      	str	r1, [sp, #4]
   1181a:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1181c:	ab02      	add	r3, sp, #8
   1181e:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   11820:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   11822:	9b01      	ldr	r3, [sp, #4]
   11824:	1c5a      	adds	r2, r3, #1
   11826:	9201      	str	r2, [sp, #4]
   11828:	7819      	ldrb	r1, [r3, #0]
   1182a:	2900      	cmp	r1, #0
   1182c:	f000 8227 	beq.w	11c7e <tfp_format+0x46e>
        if (ch != '%') {
   11830:	2925      	cmp	r1, #37	; 0x25
   11832:	d004      	beq.n	1183e <tfp_format+0x2e>
            written += putf(putp, ch);
   11834:	4630      	mov	r0, r6
   11836:	f7ff ff13 	bl	11660 <putf>
   1183a:	4405      	add	r5, r0
   1183c:	e7f1      	b.n	11822 <tfp_format+0x12>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1183e:	2300      	movs	r3, #0
   11840:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
            p.alt = 0;
   11844:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   11848:	f363 0241 	bfi	r2, r3, #1, #1
   1184c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.width = 0;
   11850:	f88d 3020 	strb.w	r3, [sp, #32]
            p.sign = 0;
   11854:	b2d2      	uxtb	r2, r2
   11856:	f363 0200 	bfi	r2, r3, #0, #1
   1185a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.left = 0;
   1185e:	b2d2      	uxtb	r2, r2
   11860:	f363 02c3 	bfi	r2, r3, #3, #1
   11864:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.uc = 0;
   11868:	b2d2      	uxtb	r2, r2
   1186a:	f363 0282 	bfi	r2, r3, #2, #1
   1186e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   11872:	9b01      	ldr	r3, [sp, #4]
   11874:	1c5a      	adds	r2, r3, #1
   11876:	9201      	str	r2, [sp, #4]
   11878:	781c      	ldrb	r4, [r3, #0]
   1187a:	b144      	cbz	r4, 1188e <tfp_format+0x7e>
                switch (ch) {
   1187c:	2c2d      	cmp	r4, #45	; 0x2d
   1187e:	f000 80de 	beq.w	11a3e <tfp_format+0x22e>
   11882:	2c30      	cmp	r4, #48	; 0x30
   11884:	f000 80ca 	beq.w	11a1c <tfp_format+0x20c>
   11888:	2c23      	cmp	r4, #35	; 0x23
   1188a:	f000 80d1 	beq.w	11a30 <tfp_format+0x220>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1188e:	2c2a      	cmp	r4, #42	; 0x2a
   11890:	f000 80df 	beq.w	11a52 <tfp_format+0x242>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   11894:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   11898:	b2db      	uxtb	r3, r3
   1189a:	2b09      	cmp	r3, #9
   1189c:	f240 80ed 	bls.w	11a7a <tfp_format+0x26a>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   118a0:	2c6c      	cmp	r4, #108	; 0x6c
   118a2:	f000 80f2 	beq.w	11a8a <tfp_format+0x27a>
            lng = 0;
   118a6:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   118a8:	2c7a      	cmp	r4, #122	; 0x7a
   118aa:	f000 80fb 	beq.w	11aa4 <tfp_format+0x294>
                ch = *(fmt++);
            }

            switch (ch) {
   118ae:	2c00      	cmp	r4, #0
   118b0:	f000 81e5 	beq.w	11c7e <tfp_format+0x46e>
   118b4:	2c78      	cmp	r4, #120	; 0x78
   118b6:	d8b4      	bhi.n	11822 <tfp_format+0x12>
   118b8:	2c25      	cmp	r4, #37	; 0x25
   118ba:	d3b2      	bcc.n	11822 <tfp_format+0x12>
   118bc:	f1a4 0325 	sub.w	r3, r4, #37	; 0x25
   118c0:	2b53      	cmp	r3, #83	; 0x53
   118c2:	d8ae      	bhi.n	11822 <tfp_format+0x12>
   118c4:	a201      	add	r2, pc, #4	; (adr r2, 118cc <tfp_format+0xbc>)
   118c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   118ca:	bf00      	nop
   118cc:	00011c73 	.word	0x00011c73
   118d0:	00011823 	.word	0x00011823
   118d4:	00011823 	.word	0x00011823
   118d8:	00011823 	.word	0x00011823
   118dc:	00011823 	.word	0x00011823
   118e0:	00011823 	.word	0x00011823
   118e4:	00011823 	.word	0x00011823
   118e8:	00011823 	.word	0x00011823
   118ec:	00011823 	.word	0x00011823
   118f0:	00011823 	.word	0x00011823
   118f4:	00011823 	.word	0x00011823
   118f8:	00011823 	.word	0x00011823
   118fc:	00011823 	.word	0x00011823
   11900:	00011823 	.word	0x00011823
   11904:	00011823 	.word	0x00011823
   11908:	00011823 	.word	0x00011823
   1190c:	00011823 	.word	0x00011823
   11910:	00011823 	.word	0x00011823
   11914:	00011823 	.word	0x00011823
   11918:	00011823 	.word	0x00011823
   1191c:	00011823 	.word	0x00011823
   11920:	00011823 	.word	0x00011823
   11924:	00011823 	.word	0x00011823
   11928:	00011823 	.word	0x00011823
   1192c:	00011823 	.word	0x00011823
   11930:	00011823 	.word	0x00011823
   11934:	00011823 	.word	0x00011823
   11938:	00011823 	.word	0x00011823
   1193c:	00011823 	.word	0x00011823
   11940:	00011823 	.word	0x00011823
   11944:	00011823 	.word	0x00011823
   11948:	00011823 	.word	0x00011823
   1194c:	00011823 	.word	0x00011823
   11950:	00011823 	.word	0x00011823
   11954:	00011823 	.word	0x00011823
   11958:	00011823 	.word	0x00011823
   1195c:	00011823 	.word	0x00011823
   11960:	00011823 	.word	0x00011823
   11964:	00011823 	.word	0x00011823
   11968:	00011823 	.word	0x00011823
   1196c:	00011823 	.word	0x00011823
   11970:	00011823 	.word	0x00011823
   11974:	00011823 	.word	0x00011823
   11978:	00011823 	.word	0x00011823
   1197c:	00011823 	.word	0x00011823
   11980:	00011823 	.word	0x00011823
   11984:	00011823 	.word	0x00011823
   11988:	00011823 	.word	0x00011823
   1198c:	00011823 	.word	0x00011823
   11990:	00011823 	.word	0x00011823
   11994:	00011823 	.word	0x00011823
   11998:	00011aef 	.word	0x00011aef
   1199c:	00011823 	.word	0x00011823
   119a0:	00011823 	.word	0x00011823
   119a4:	00011823 	.word	0x00011823
   119a8:	00011823 	.word	0x00011823
   119ac:	00011823 	.word	0x00011823
   119b0:	00011823 	.word	0x00011823
   119b4:	00011823 	.word	0x00011823
   119b8:	00011823 	.word	0x00011823
   119bc:	00011823 	.word	0x00011823
   119c0:	00011823 	.word	0x00011823
   119c4:	00011b85 	.word	0x00011b85
   119c8:	00011acf 	.word	0x00011acf
   119cc:	00011823 	.word	0x00011823
   119d0:	00011bb1 	.word	0x00011bb1
   119d4:	00011823 	.word	0x00011823
   119d8:	00011823 	.word	0x00011823
   119dc:	00011acf 	.word	0x00011acf
   119e0:	00011823 	.word	0x00011823
   119e4:	00011823 	.word	0x00011823
   119e8:	00011823 	.word	0x00011823
   119ec:	00011823 	.word	0x00011823
   119f0:	00011823 	.word	0x00011823
   119f4:	00011b23 	.word	0x00011b23
   119f8:	00011b43 	.word	0x00011b43
   119fc:	00011823 	.word	0x00011823
   11a00:	00011823 	.word	0x00011823
   11a04:	00011b97 	.word	0x00011b97
   11a08:	00011823 	.word	0x00011823
   11a0c:	00011aaf 	.word	0x00011aaf
   11a10:	00011823 	.word	0x00011823
   11a14:	00011823 	.word	0x00011823
   11a18:	00011aef 	.word	0x00011aef
                    if (!p.left) {
   11a1c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11a20:	f013 0f08 	tst.w	r3, #8
   11a24:	f47f af25 	bne.w	11872 <tfp_format+0x62>
                        p.lz = 1;
   11a28:	2301      	movs	r3, #1
   11a2a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   11a2e:	e720      	b.n	11872 <tfp_format+0x62>
                    p.alt = 1;
   11a30:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11a34:	f043 0302 	orr.w	r3, r3, #2
   11a38:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   11a3c:	e719      	b.n	11872 <tfp_format+0x62>
                    p.left = 1;
   11a3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11a42:	f043 0308 	orr.w	r3, r3, #8
   11a46:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   11a4a:	2300      	movs	r3, #0
   11a4c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   11a50:	e70f      	b.n	11872 <tfp_format+0x62>
                i = intarg(0, 1, &va);
   11a52:	466a      	mov	r2, sp
   11a54:	2101      	movs	r1, #1
   11a56:	2000      	movs	r0, #0
   11a58:	f7ff fea6 	bl	117a8 <intarg>
                if (i > UCHAR_MAX) {
   11a5c:	28ff      	cmp	r0, #255	; 0xff
   11a5e:	dd07      	ble.n	11a70 <tfp_format+0x260>
                    p.width = UCHAR_MAX;
   11a60:	23ff      	movs	r3, #255	; 0xff
   11a62:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   11a66:	9b01      	ldr	r3, [sp, #4]
   11a68:	1c5a      	adds	r2, r3, #1
   11a6a:	9201      	str	r2, [sp, #4]
   11a6c:	781c      	ldrb	r4, [r3, #0]
   11a6e:	e717      	b.n	118a0 <tfp_format+0x90>
                } else if (i > 0) {
   11a70:	2800      	cmp	r0, #0
   11a72:	ddf8      	ble.n	11a66 <tfp_format+0x256>
                    p.width = i;
   11a74:	f88d 0020 	strb.w	r0, [sp, #32]
   11a78:	e7f5      	b.n	11a66 <tfp_format+0x256>
                ch = a2i(ch, &fmt, 10, &(p.width));
   11a7a:	ab08      	add	r3, sp, #32
   11a7c:	220a      	movs	r2, #10
   11a7e:	a901      	add	r1, sp, #4
   11a80:	4620      	mov	r0, r4
   11a82:	f7ff fdcf 	bl	11624 <a2i>
   11a86:	4604      	mov	r4, r0
   11a88:	e70a      	b.n	118a0 <tfp_format+0x90>
                ch = *(fmt++);
   11a8a:	9b01      	ldr	r3, [sp, #4]
   11a8c:	1c5a      	adds	r2, r3, #1
   11a8e:	9201      	str	r2, [sp, #4]
   11a90:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   11a92:	2c6c      	cmp	r4, #108	; 0x6c
   11a94:	d001      	beq.n	11a9a <tfp_format+0x28a>
                lng = 1;
   11a96:	2001      	movs	r0, #1
   11a98:	e706      	b.n	118a8 <tfp_format+0x98>
                    ch = *(fmt++);
   11a9a:	1c9a      	adds	r2, r3, #2
   11a9c:	9201      	str	r2, [sp, #4]
   11a9e:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   11aa0:	2002      	movs	r0, #2
   11aa2:	e701      	b.n	118a8 <tfp_format+0x98>
                ch = *(fmt++);
   11aa4:	9b01      	ldr	r3, [sp, #4]
   11aa6:	1c5a      	adds	r2, r3, #1
   11aa8:	9201      	str	r2, [sp, #4]
   11aaa:	781c      	ldrb	r4, [r3, #0]
   11aac:	e6ff      	b.n	118ae <tfp_format+0x9e>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
   11aae:	230a      	movs	r3, #10
   11ab0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   11ab4:	466a      	mov	r2, sp
   11ab6:	2100      	movs	r1, #0
   11ab8:	f7ff fe76 	bl	117a8 <intarg>
   11abc:	aa08      	add	r2, sp, #32
   11abe:	f7ff fd24 	bl	1150a <ui2a>
                written += putchw(putp, &p);
   11ac2:	a908      	add	r1, sp, #32
   11ac4:	4630      	mov	r0, r6
   11ac6:	f7ff fddd 	bl	11684 <putchw>
   11aca:	4405      	add	r5, r0
                break;
   11acc:	e6a9      	b.n	11822 <tfp_format+0x12>
            case 'd':
            case 'i':
                p.base = 10;
   11ace:	230a      	movs	r3, #10
   11ad0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   11ad4:	466a      	mov	r2, sp
   11ad6:	2101      	movs	r1, #1
   11ad8:	f7ff fe66 	bl	117a8 <intarg>
   11adc:	aa08      	add	r2, sp, #32
   11ade:	f7ff fd7b 	bl	115d8 <i2a>
                written += putchw(putp, &p);
   11ae2:	a908      	add	r1, sp, #32
   11ae4:	4630      	mov	r0, r6
   11ae6:	f7ff fdcd 	bl	11684 <putchw>
   11aea:	4405      	add	r5, r0
                break;
   11aec:	e699      	b.n	11822 <tfp_format+0x12>
            case 'x':
            case 'X':
                p.base = 16;
   11aee:	2310      	movs	r3, #16
   11af0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   11af4:	2c58      	cmp	r4, #88	; 0x58
   11af6:	bf14      	ite	ne
   11af8:	2400      	movne	r4, #0
   11afa:	2401      	moveq	r4, #1
   11afc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11b00:	f364 0382 	bfi	r3, r4, #2, #1
   11b04:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   11b08:	466a      	mov	r2, sp
   11b0a:	2100      	movs	r1, #0
   11b0c:	f7ff fe4c 	bl	117a8 <intarg>
   11b10:	aa08      	add	r2, sp, #32
   11b12:	f7ff fcfa 	bl	1150a <ui2a>
                written += putchw(putp, &p);
   11b16:	a908      	add	r1, sp, #32
   11b18:	4630      	mov	r0, r6
   11b1a:	f7ff fdb3 	bl	11684 <putchw>
   11b1e:	4405      	add	r5, r0
                break;
   11b20:	e67f      	b.n	11822 <tfp_format+0x12>
            case 'o':
                p.base = 8;
   11b22:	2308      	movs	r3, #8
   11b24:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   11b28:	466a      	mov	r2, sp
   11b2a:	2100      	movs	r1, #0
   11b2c:	f7ff fe3c 	bl	117a8 <intarg>
   11b30:	aa08      	add	r2, sp, #32
   11b32:	f7ff fcea 	bl	1150a <ui2a>
                written += putchw(putp, &p);
   11b36:	a908      	add	r1, sp, #32
   11b38:	4630      	mov	r0, r6
   11b3a:	f7ff fda3 	bl	11684 <putchw>
   11b3e:	4405      	add	r5, r0
                break;
   11b40:	e66f      	b.n	11822 <tfp_format+0x12>
            case 'p':
                v = va_arg(va, void *);
   11b42:	9b00      	ldr	r3, [sp, #0]
   11b44:	1d1a      	adds	r2, r3, #4
   11b46:	9200      	str	r2, [sp, #0]
   11b48:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   11b4a:	2310      	movs	r3, #16
   11b4c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   11b50:	aa08      	add	r2, sp, #32
   11b52:	2100      	movs	r1, #0
   11b54:	f7ff fcd9 	bl	1150a <ui2a>
                p.width = 2 * sizeof(void*);
   11b58:	2308      	movs	r3, #8
   11b5a:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   11b5e:	2301      	movs	r3, #1
   11b60:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   11b64:	2130      	movs	r1, #48	; 0x30
   11b66:	4630      	mov	r0, r6
   11b68:	f7ff fd7a 	bl	11660 <putf>
   11b6c:	4405      	add	r5, r0
                written += putf(putp, 'x');
   11b6e:	2178      	movs	r1, #120	; 0x78
   11b70:	4630      	mov	r0, r6
   11b72:	f7ff fd75 	bl	11660 <putf>
   11b76:	4405      	add	r5, r0
                written += putchw(putp, &p);
   11b78:	a908      	add	r1, sp, #32
   11b7a:	4630      	mov	r0, r6
   11b7c:	f7ff fd82 	bl	11684 <putchw>
   11b80:	4405      	add	r5, r0
                break;
   11b82:	e64e      	b.n	11822 <tfp_format+0x12>
            case 'c':
                written += putf(putp, (char)(va_arg(va, int)));
   11b84:	9b00      	ldr	r3, [sp, #0]
   11b86:	1d1a      	adds	r2, r3, #4
   11b88:	9200      	str	r2, [sp, #0]
   11b8a:	7819      	ldrb	r1, [r3, #0]
   11b8c:	4630      	mov	r0, r6
   11b8e:	f7ff fd67 	bl	11660 <putf>
   11b92:	4405      	add	r5, r0
                break;
   11b94:	e645      	b.n	11822 <tfp_format+0x12>
            case 's':
                p.bf = va_arg(va, char *);
   11b96:	9b00      	ldr	r3, [sp, #0]
   11b98:	1d1a      	adds	r2, r3, #4
   11b9a:	9200      	str	r2, [sp, #0]
   11b9c:	681b      	ldr	r3, [r3, #0]
   11b9e:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   11ba0:	a908      	add	r1, sp, #32
   11ba2:	4630      	mov	r0, r6
   11ba4:	f7ff fd6e 	bl	11684 <putchw>
   11ba8:	4405      	add	r5, r0
                p.bf = bf;
   11baa:	ab02      	add	r3, sp, #8
   11bac:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   11bae:	e638      	b.n	11822 <tfp_format+0x12>
#if MYNEWT_VAL(FLOAT_USER)
            case 'f':
                p.base = 10;
   11bb0:	230a      	movs	r3, #10
   11bb2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                d = va_arg(va, double);
   11bb6:	9b00      	ldr	r3, [sp, #0]
   11bb8:	3307      	adds	r3, #7
   11bba:	f023 0307 	bic.w	r3, r3, #7
   11bbe:	f103 0208 	add.w	r2, r3, #8
   11bc2:	9200      	str	r2, [sp, #0]
   11bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
                /* Convert to an int to get the integer part of the number. */
                n = d;
   11bc8:	4640      	mov	r0, r8
   11bca:	4649      	mov	r1, r9
   11bcc:	f010 f9f6 	bl	21fbc <__aeabi_d2iz>
   11bd0:	4604      	mov	r4, r0
                /* Convert to ascii */
                i2a(n, &p);
   11bd2:	aa08      	add	r2, sp, #32
   11bd4:	17c1      	asrs	r1, r0, #31
   11bd6:	f7ff fcff 	bl	115d8 <i2a>
                /* When the double was converted to an int it was truncated
                 * towards 0.  If the number is in the range (-1, 0), the
                 * negative sign was lost.  Preserve the sign in this case.
                 */
                if (d < 0.0) {
   11bda:	2200      	movs	r2, #0
   11bdc:	2300      	movs	r3, #0
   11bde:	4640      	mov	r0, r8
   11be0:	4649      	mov	r1, r9
   11be2:	f010 f9ad 	bl	21f40 <__aeabi_dcmplt>
   11be6:	bbc8      	cbnz	r0, 11c5c <tfp_format+0x44c>
                    p.sign = 1;
                }
                /* Ignore left align for integer part */
                p.left = 0;
   11be8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11bec:	f36f 03c3 	bfc	r3, #3, #1
   11bf0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Subtract width for decimal part and decimal point */
                if (p.width >= 4) {
   11bf4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11bf8:	2b03      	cmp	r3, #3
   11bfa:	d936      	bls.n	11c6a <tfp_format+0x45a>
                    p.width -= 4;
   11bfc:	3b04      	subs	r3, #4
   11bfe:	f88d 3020 	strb.w	r3, [sp, #32]
                } else {
                    p.width = 0;
                }
                /* Write integer part to console */
                written += putchw(putp, &p);
   11c02:	a908      	add	r1, sp, #32
   11c04:	4630      	mov	r0, r6
   11c06:	f7ff fd3d 	bl	11684 <putchw>
   11c0a:	4405      	add	r5, r0
                /* Take the decimal part and multiply by 1000 */
                n = (d-n)*1000;
   11c0c:	4620      	mov	r0, r4
   11c0e:	f00f febb 	bl	21988 <__aeabi_i2d>
   11c12:	4602      	mov	r2, r0
   11c14:	460b      	mov	r3, r1
   11c16:	4640      	mov	r0, r8
   11c18:	4649      	mov	r1, r9
   11c1a:	f00f fd67 	bl	216ec <__aeabi_dsub>
   11c1e:	2200      	movs	r2, #0
   11c20:	4b19      	ldr	r3, [pc, #100]	; (11c88 <tfp_format+0x478>)
   11c22:	f00f ff1b 	bl	21a5c <__aeabi_dmul>
   11c26:	f010 f9c9 	bl	21fbc <__aeabi_d2iz>
                /* Convert to ascii */
                i2a(n, &p);
   11c2a:	aa08      	add	r2, sp, #32
   11c2c:	17c1      	asrs	r1, r0, #31
   11c2e:	f7ff fcd3 	bl	115d8 <i2a>
                /* Set the leading zeros for the next integer output to 3 */
                p.lz = 3;
   11c32:	2303      	movs	r3, #3
   11c34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                /* Always use the same decimal width */
                p.width = 3;
   11c38:	f88d 3020 	strb.w	r3, [sp, #32]
                /* Ignore sign for decimal part*/
                p.sign = 0;
   11c3c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11c40:	f36f 0300 	bfc	r3, #0, #1
   11c44:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Output a decimal point */
                putf(putp, '.');
   11c48:	212e      	movs	r1, #46	; 0x2e
   11c4a:	4630      	mov	r0, r6
   11c4c:	f7ff fd08 	bl	11660 <putf>
                /* Output the decimal part. */
                written += putchw(putp, &p);
   11c50:	a908      	add	r1, sp, #32
   11c52:	4630      	mov	r0, r6
   11c54:	f7ff fd16 	bl	11684 <putchw>
   11c58:	4405      	add	r5, r0
                break;
   11c5a:	e5e2      	b.n	11822 <tfp_format+0x12>
                    p.sign = 1;
   11c5c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11c60:	f043 0301 	orr.w	r3, r3, #1
   11c64:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   11c68:	e7be      	b.n	11be8 <tfp_format+0x3d8>
                    p.width = 0;
   11c6a:	2300      	movs	r3, #0
   11c6c:	f88d 3020 	strb.w	r3, [sp, #32]
   11c70:	e7c7      	b.n	11c02 <tfp_format+0x3f2>
#endif
            case '%':
                written += putf(putp, ch);
   11c72:	4621      	mov	r1, r4
   11c74:	4630      	mov	r0, r6
   11c76:	f7ff fcf3 	bl	11660 <putf>
   11c7a:	4405      	add	r5, r0
                break;
   11c7c:	e5d1      	b.n	11822 <tfp_format+0x12>
        }
    }
 abort:;
 
 return written;
}
   11c7e:	4628      	mov	r0, r5
   11c80:	b00a      	add	sp, #40	; 0x28
   11c82:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   11c86:	bf00      	nop
   11c88:	408f4000 	.word	0x408f4000

00011c8c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   11c8c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   11c8e:	f7ff fdbf 	bl	11810 <tfp_format>
}
   11c92:	bd08      	pop	{r3, pc}

00011c94 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   11c94:	b40f      	push	{r0, r1, r2, r3}
   11c96:	b500      	push	{lr}
   11c98:	b083      	sub	sp, #12
   11c9a:	aa04      	add	r2, sp, #16
   11c9c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   11ca0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   11ca2:	4b04      	ldr	r3, [pc, #16]	; (11cb4 <printf+0x20>)
   11ca4:	6818      	ldr	r0, [r3, #0]
   11ca6:	f7ff fff1 	bl	11c8c <vfprintf>
    va_end(va);
    return rv;
}
   11caa:	b003      	add	sp, #12
   11cac:	f85d eb04 	ldr.w	lr, [sp], #4
   11cb0:	b004      	add	sp, #16
   11cb2:	4770      	bx	lr
   11cb4:	00023c00 	.word	0x00023c00

00011cb8 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   11cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cba:	b085      	sub	sp, #20
   11cbc:	4605      	mov	r5, r0
   11cbe:	460c      	mov	r4, r1
   11cc0:	4616      	mov	r6, r2
   11cc2:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   11cc4:	460a      	mov	r2, r1
   11cc6:	4601      	mov	r1, r0
   11cc8:	4668      	mov	r0, sp
   11cca:	f000 f83d 	bl	11d48 <fmemopen_w>
    tfp_format(f, fmt, va);
   11cce:	463a      	mov	r2, r7
   11cd0:	4631      	mov	r1, r6
   11cd2:	f7ff fd9d 	bl	11810 <tfp_format>
    if (size > 0) {
   11cd6:	b12c      	cbz	r4, 11ce4 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   11cd8:	9b02      	ldr	r3, [sp, #8]
   11cda:	42a3      	cmp	r3, r4
   11cdc:	d205      	bcs.n	11cea <vsnprintf+0x32>
            *(state.buffer) = '\0';
   11cde:	9b01      	ldr	r3, [sp, #4]
   11ce0:	2200      	movs	r2, #0
   11ce2:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   11ce4:	9802      	ldr	r0, [sp, #8]
   11ce6:	b005      	add	sp, #20
   11ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   11cea:	3c01      	subs	r4, #1
   11cec:	2300      	movs	r3, #0
   11cee:	552b      	strb	r3, [r5, r4]
   11cf0:	e7f8      	b.n	11ce4 <vsnprintf+0x2c>

00011cf2 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   11cf2:	b40c      	push	{r2, r3}
   11cf4:	b500      	push	{lr}
   11cf6:	b083      	sub	sp, #12
   11cf8:	ab04      	add	r3, sp, #16
   11cfa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   11cfe:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   11d00:	f7ff ffda 	bl	11cb8 <vsnprintf>
    va_end(va);
    return rv;
}
   11d04:	b003      	add	sp, #12
   11d06:	f85d eb04 	ldr.w	lr, [sp], #4
   11d0a:	b002      	add	sp, #8
   11d0c:	4770      	bx	lr

00011d0e <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   11d0e:	b500      	push	{lr}
   11d10:	4684      	mov	ip, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   11d12:	2000      	movs	r0, #0
    
    while (n--)
   11d14:	e000      	b.n	11d18 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   11d16:	4672      	mov	r2, lr
    while (n--)
   11d18:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   11d1c:	b192      	cbz	r2, 11d44 <memfile_write+0x36>
        f->bytes_written++;
   11d1e:	f8dc 3008 	ldr.w	r3, [ip, #8]
   11d22:	3301      	adds	r3, #1
   11d24:	f8cc 3008 	str.w	r3, [ip, #8]
        if (f->bytes_written <= f->size)
   11d28:	f8dc 200c 	ldr.w	r2, [ip, #12]
   11d2c:	4293      	cmp	r3, r2
   11d2e:	d8f2      	bhi.n	11d16 <memfile_write+0x8>
            *f->buffer++ = *bp++;
   11d30:	f8dc 3004 	ldr.w	r3, [ip, #4]
   11d34:	1c5a      	adds	r2, r3, #1
   11d36:	f8cc 2004 	str.w	r2, [ip, #4]
   11d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
   11d3e:	701a      	strb	r2, [r3, #0]
            i++;
   11d40:	3001      	adds	r0, #1
   11d42:	e7e8      	b.n	11d16 <memfile_write+0x8>
        }
    }
    
    return i;
}
   11d44:	f85d fb04 	ldr.w	pc, [sp], #4

00011d48 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   11d48:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   11d4a:	4c04      	ldr	r4, [pc, #16]	; (11d5c <fmemopen_w+0x14>)
   11d4c:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   11d4e:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   11d50:	2100      	movs	r1, #0
   11d52:	6081      	str	r1, [r0, #8]
    storage->size = size;
   11d54:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   11d56:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d5a:	4770      	bx	lr
   11d5c:	00023bf8 	.word	0x00023bf8

00011d60 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   11d60:	2000      	movs	r0, #0
   11d62:	4770      	bx	lr

00011d64 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   11d64:	b510      	push	{r4, lr}
   11d66:	4608      	mov	r0, r1
   11d68:	4614      	mov	r4, r2
    console_write(bp, n);
   11d6a:	4611      	mov	r1, r2
   11d6c:	f001 fa64 	bl	13238 <console_write>
    return n;
}
   11d70:	4620      	mov	r0, r4
   11d72:	bd10      	pop	{r4, pc}

00011d74 <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   11d74:	b510      	push	{r4, lr}
    assert(timer != NULL);
   11d76:	b140      	cbz	r0, 11d8a <dpl_cputime_timer_init+0x16>
   11d78:	460c      	mov	r4, r1
   11d7a:	4613      	mov	r3, r2
   11d7c:	4601      	mov	r1, r0
    assert(fp != NULL);
   11d7e:	b154      	cbz	r4, 11d96 <dpl_cputime_timer_init+0x22>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   11d80:	4622      	mov	r2, r4
   11d82:	2000      	movs	r0, #0
   11d84:	f007 f98c 	bl	190a0 <hal_timer_set_cb>
}
   11d88:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   11d8a:	2300      	movs	r3, #0
   11d8c:	461a      	mov	r2, r3
   11d8e:	4619      	mov	r1, r3
   11d90:	4618      	mov	r0, r3
   11d92:	f7fb fae5 	bl	d360 <__assert_func>
    assert(fp != NULL);
   11d96:	2300      	movs	r3, #0
   11d98:	461a      	mov	r2, r3
   11d9a:	4619      	mov	r1, r3
   11d9c:	4618      	mov	r0, r3
   11d9e:	f7fb fadf 	bl	d360 <__assert_func>

00011da2 <dpl_cputime_timer_start>:

int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   11da2:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   11da4:	f007 f992 	bl	190cc <hal_timer_start_at>
    return rc;
}
   11da8:	bd08      	pop	{r3, pc}

00011daa <dpl_cputime_timer_stop>:
    return rc;
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
   11daa:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   11dac:	f007 f9d4 	bl	19158 <hal_timer_stop>
}
   11db0:	bd08      	pop	{r3, pc}

00011db2 <dpl_cputime_get32>:

uint32_t
dpl_cputime_get32(void)
{
   11db2:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   11db4:	2000      	movs	r0, #0
   11db6:	f007 f95b 	bl	19070 <hal_timer_read>
return cpu_time;
}
   11dba:	bd08      	pop	{r3, pc}

00011dbc <dpl_cputime_delay_ticks>:
{
   11dbc:	b510      	push	{r4, lr}
   11dbe:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
   11dc0:	f7ff fff7 	bl	11db2 <dpl_cputime_get32>
   11dc4:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
   11dc6:	f7ff fff4 	bl	11db2 <dpl_cputime_get32>
   11dca:	1b00      	subs	r0, r0, r4
   11dcc:	2800      	cmp	r0, #0
   11dce:	dbfa      	blt.n	11dc6 <dpl_cputime_delay_ticks+0xa>
}
   11dd0:	bd10      	pop	{r4, pc}

00011dd2 <dpl_cputime_delay_usecs>:
{
   11dd2:	b508      	push	{r3, lr}
    dpl_cputime_delay_ticks(ticks);
   11dd4:	f7ff fff2 	bl	11dbc <dpl_cputime_delay_ticks>
}
   11dd8:	bd08      	pop	{r3, pc}

00011dda <dpl_cputime_timer_relative>:
{
   11dda:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
   11ddc:	b140      	cbz	r0, 11df0 <dpl_cputime_timer_relative+0x16>
   11dde:	460c      	mov	r4, r1
   11de0:	4605      	mov	r5, r0
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
   11de2:	f7ff ffe6 	bl	11db2 <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
   11de6:	1901      	adds	r1, r0, r4
   11de8:	4628      	mov	r0, r5
   11dea:	f007 f96f 	bl	190cc <hal_timer_start_at>
}
   11dee:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
   11df0:	2300      	movs	r3, #0
   11df2:	461a      	mov	r2, r3
   11df4:	4619      	mov	r1, r3
   11df6:	4618      	mov	r0, r3
   11df8:	f7fb fab2 	bl	d360 <__assert_func>

00011dfc <_dpl_msys_find_pool>:
    STAILQ_INIT(&g_msys_pool_list);
}

static struct dpl_mbuf_pool *
_dpl_msys_find_pool(uint16_t dsize)
{
   11dfc:	4602      	mov	r2, r0
    struct dpl_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   11dfe:	4b09      	ldr	r3, [pc, #36]	; (11e24 <_dpl_msys_find_pool+0x28>)
   11e00:	6819      	ldr	r1, [r3, #0]
   11e02:	4608      	mov	r0, r1
   11e04:	e000      	b.n	11e08 <_dpl_msys_find_pool+0xc>
   11e06:	6880      	ldr	r0, [r0, #8]
   11e08:	b110      	cbz	r0, 11e10 <_dpl_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
   11e0a:	8803      	ldrh	r3, [r0, #0]
   11e0c:	4293      	cmp	r3, r2
   11e0e:	d3fa      	bcc.n	11e06 <_dpl_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
   11e10:	b100      	cbz	r0, 11e14 <_dpl_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, dpl_mbuf_pool, omp_next);
    }

    return (pool);
}
   11e12:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, dpl_mbuf_pool, omp_next);
   11e14:	b119      	cbz	r1, 11e1e <_dpl_msys_find_pool+0x22>
   11e16:	4b03      	ldr	r3, [pc, #12]	; (11e24 <_dpl_msys_find_pool+0x28>)
   11e18:	6858      	ldr	r0, [r3, #4]
   11e1a:	3808      	subs	r0, #8
   11e1c:	4770      	bx	lr
   11e1e:	4608      	mov	r0, r1
    return (pool);
   11e20:	e7f7      	b.n	11e12 <_dpl_msys_find_pool+0x16>
   11e22:	bf00      	nop
   11e24:	200013c0 	.word	0x200013c0

00011e28 <dpl_mqueue_init>:
{
   11e28:	b510      	push	{r4, lr}
    STAILQ_INIT(&mq->mq_head);
   11e2a:	2400      	movs	r4, #0
   11e2c:	6004      	str	r4, [r0, #0]
   11e2e:	6040      	str	r0, [r0, #4]
    memset(ev, 0, sizeof(*ev));
   11e30:	6084      	str	r4, [r0, #8]
   11e32:	60c4      	str	r4, [r0, #12]
   11e34:	6104      	str	r4, [r0, #16]
   11e36:	6144      	str	r4, [r0, #20]
    ev->ev.ev_cb = (os_event_fn *)fn;
   11e38:	60c1      	str	r1, [r0, #12]
    ev->ev.ev_arg = arg;
   11e3a:	6102      	str	r2, [r0, #16]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   11e3c:	3018      	adds	r0, #24
   11e3e:	f7fb ffb5 	bl	ddac <os_mutex_init>
}
   11e42:	4620      	mov	r0, r4
   11e44:	bd10      	pop	{r4, pc}

00011e46 <dpl_mqueue_get>:
{
   11e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e48:	4605      	mov	r5, r0
    return os_arch_save_sr();
   11e4a:	f7fb f9b3 	bl	d1b4 <os_arch_save_sr>
   11e4e:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   11e50:	f105 0718 	add.w	r7, r5, #24
   11e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11e58:	4638      	mov	r0, r7
   11e5a:	f7fc f80d 	bl	de78 <os_mutex_pend>
    mp = STAILQ_FIRST(&mq->mq_head);
   11e5e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   11e60:	b114      	cbz	r4, 11e68 <dpl_mqueue_get+0x22>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   11e62:	6863      	ldr	r3, [r4, #4]
   11e64:	602b      	str	r3, [r5, #0]
   11e66:	b14b      	cbz	r3, 11e7c <dpl_mqueue_get+0x36>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   11e68:	4638      	mov	r0, r7
   11e6a:	f7fb ffa9 	bl	ddc0 <os_mutex_release>
    os_arch_restore_sr(ctx);
   11e6e:	4630      	mov	r0, r6
   11e70:	f7fb f9a6 	bl	d1c0 <os_arch_restore_sr>
    if (mp) {
   11e74:	b104      	cbz	r4, 11e78 <dpl_mqueue_get+0x32>
        m = DPL_MBUF_PKTHDR_TO_MBUF(mp);
   11e76:	3c10      	subs	r4, #16
}
   11e78:	4620      	mov	r0, r4
   11e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   11e7c:	606d      	str	r5, [r5, #4]
   11e7e:	e7f3      	b.n	11e68 <dpl_mqueue_get+0x22>

00011e80 <dpl_mqueue_put>:
{
   11e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!DPL_MBUF_IS_PKTHDR(m)) {
   11e84:	7953      	ldrb	r3, [r2, #5]
   11e86:	2b07      	cmp	r3, #7
   11e88:	d925      	bls.n	11ed6 <dpl_mqueue_put+0x56>
   11e8a:	4605      	mov	r5, r0
   11e8c:	4688      	mov	r8, r1
   11e8e:	4614      	mov	r4, r2
    mp = DPL_MBUF_PKTHDR(m);
   11e90:	f102 0910 	add.w	r9, r2, #16
    return os_arch_save_sr();
   11e94:	f7fb f98e 	bl	d1b4 <os_arch_save_sr>
   11e98:	4607      	mov	r7, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   11e9a:	f105 0618 	add.w	r6, r5, #24
   11e9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11ea2:	4630      	mov	r0, r6
   11ea4:	f7fb ffe8 	bl	de78 <os_mutex_pend>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   11ea8:	2300      	movs	r3, #0
   11eaa:	f844 3f14 	str.w	r3, [r4, #20]!
   11eae:	686b      	ldr	r3, [r5, #4]
   11eb0:	f8c3 9000 	str.w	r9, [r3]
   11eb4:	606c      	str	r4, [r5, #4]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   11eb6:	4630      	mov	r0, r6
   11eb8:	f7fb ff82 	bl	ddc0 <os_mutex_release>
    os_arch_restore_sr(ctx);
   11ebc:	4638      	mov	r0, r7
   11ebe:	f7fb f97f 	bl	d1c0 <os_arch_restore_sr>
    if (evq) {
   11ec2:	f1b8 0f00 	cmp.w	r8, #0
   11ec6:	d009      	beq.n	11edc <dpl_mqueue_put+0x5c>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   11ec8:	f105 0108 	add.w	r1, r5, #8
   11ecc:	4640      	mov	r0, r8
   11ece:	f7fb fd7b 	bl	d9c8 <os_eventq_put>
    return (0);
   11ed2:	2000      	movs	r0, #0
}
   11ed4:	e000      	b.n	11ed8 <dpl_mqueue_put+0x58>
    return (rc);
   11ed6:	2002      	movs	r0, #2
}
   11ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return (0);
   11edc:	2000      	movs	r0, #0
   11ede:	e7fb      	b.n	11ed8 <dpl_mqueue_put+0x58>

00011ee0 <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
   11ee0:	3a10      	subs	r2, #16
   11ee2:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   11ee4:	6041      	str	r1, [r0, #4]

    return (0);
}
   11ee6:	2000      	movs	r0, #0
   11ee8:	4770      	bx	lr

00011eea <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
   11eea:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
   11eec:	8803      	ldrh	r3, [r0, #0]
   11eee:	428b      	cmp	r3, r1
   11ef0:	d310      	bcc.n	11f14 <dpl_mbuf_get+0x2a>
   11ef2:	4604      	mov	r4, r0
   11ef4:	460d      	mov	r5, r1
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
   11ef6:	6840      	ldr	r0, [r0, #4]
   11ef8:	f000 fa7e 	bl	123f8 <dpl_memblock_get>
    if (!om) {
   11efc:	b148      	cbz	r0, 11f12 <dpl_mbuf_get+0x28>
        goto err;
    }

    SLIST_NEXT(om, om_next) = NULL;
   11efe:	2300      	movs	r3, #0
   11f00:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   11f02:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   11f04:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   11f06:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   11f08:	f100 0110 	add.w	r1, r0, #16
   11f0c:	440d      	add	r5, r1
   11f0e:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   11f10:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
   11f12:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   11f14:	2000      	movs	r0, #0
   11f16:	e7fc      	b.n	11f12 <dpl_mbuf_get+0x28>

00011f18 <dpl_mbuf_get_pkthdr>:

struct dpl_mbuf *
dpl_mbuf_get_pkthdr(struct dpl_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   11f18:	b538      	push	{r3, r4, r5, lr}
    uint16_t pkthdr_len;
    struct dpl_mbuf_pkthdr *pkthdr;
    struct dpl_mbuf *om;

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct dpl_mbuf_pkthdr);
   11f1a:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   11f1e:	8803      	ldrh	r3, [r0, #0]
   11f20:	42ab      	cmp	r3, r5
   11f22:	d30e      	bcc.n	11f42 <dpl_mbuf_get_pkthdr+0x2a>
   11f24:	2dff      	cmp	r5, #255	; 0xff
   11f26:	d80e      	bhi.n	11f46 <dpl_mbuf_get_pkthdr+0x2e>
        return NULL;
    }

    om = dpl_mbuf_get(omp, 0);
   11f28:	2100      	movs	r1, #0
   11f2a:	f7ff ffde 	bl	11eea <dpl_mbuf_get>
    if (om) {
   11f2e:	b138      	cbz	r0, 11f40 <dpl_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
   11f30:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
   11f32:	6803      	ldr	r3, [r0, #0]
   11f34:	442b      	add	r3, r5
   11f36:	6003      	str	r3, [r0, #0]

        pkthdr = DPL_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   11f38:	2300      	movs	r3, #0
   11f3a:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
   11f3c:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   11f3e:	6143      	str	r3, [r0, #20]
    }

    return om;
}
   11f40:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   11f42:	2000      	movs	r0, #0
   11f44:	e7fc      	b.n	11f40 <dpl_mbuf_get_pkthdr+0x28>
   11f46:	2000      	movs	r0, #0
   11f48:	e7fa      	b.n	11f40 <dpl_mbuf_get_pkthdr+0x28>

00011f4a <dpl_msys_get_pkthdr>:
{
   11f4a:	b510      	push	{r4, lr}
   11f4c:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct dpl_mbuf_pkthdr);
   11f4e:	f101 0308 	add.w	r3, r1, #8
    pool = _dpl_msys_find_pool(dsize + total_pkthdr_len);
   11f52:	fa10 f083 	uxtah	r0, r0, r3
   11f56:	b280      	uxth	r0, r0
   11f58:	f7ff ff50 	bl	11dfc <_dpl_msys_find_pool>
    if (!pool) {
   11f5c:	b110      	cbz	r0, 11f64 <dpl_msys_get_pkthdr+0x1a>
    m = dpl_mbuf_get_pkthdr(pool, user_hdr_len);
   11f5e:	b2e1      	uxtb	r1, r4
   11f60:	f7ff ffda 	bl	11f18 <dpl_mbuf_get_pkthdr>
}
   11f64:	bd10      	pop	{r4, pc}

00011f66 <dpl_mbuf_free>:

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
   11f66:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
   11f68:	6883      	ldr	r3, [r0, #8]
   11f6a:	b123      	cbz	r3, 11f76 <dpl_mbuf_free+0x10>
   11f6c:	4601      	mov	r1, r0
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
   11f6e:	6858      	ldr	r0, [r3, #4]
   11f70:	f000 fa82 	bl	12478 <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
   11f74:	bd08      	pop	{r3, pc}
    return (0);
   11f76:	2000      	movs	r0, #0
   11f78:	e7fc      	b.n	11f74 <dpl_mbuf_free+0xe>

00011f7a <dpl_mbuf_free_chain>:
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
   11f7a:	b158      	cbz	r0, 11f94 <dpl_mbuf_free_chain+0x1a>
{
   11f7c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   11f7e:	68c4      	ldr	r4, [r0, #12]

        rc = dpl_mbuf_free(om);
   11f80:	f7ff fff1 	bl	11f66 <dpl_mbuf_free>
        if (rc != 0) {
   11f84:	4603      	mov	r3, r0
   11f86:	b918      	cbnz	r0, 11f90 <dpl_mbuf_free_chain+0x16>
            goto err;
        }

        om = next;
   11f88:	4620      	mov	r0, r4
    while (om != NULL) {
   11f8a:	2c00      	cmp	r4, #0
   11f8c:	d1f7      	bne.n	11f7e <dpl_mbuf_free_chain+0x4>
    }

    return (0);
   11f8e:	2300      	movs	r3, #0
err:
    return (rc);
}
   11f90:	4618      	mov	r0, r3
   11f92:	bd10      	pop	{r4, pc}
    return (0);
   11f94:	2300      	movs	r3, #0
}
   11f96:	4618      	mov	r0, r3
   11f98:	4770      	bx	lr

00011f9a <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
   11f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   11f9e:	2800      	cmp	r0, #0
   11fa0:	d04b      	beq.n	1203a <dpl_mbuf_append+0xa0>
   11fa2:	460f      	mov	r7, r1
   11fa4:	4691      	mov	r9, r2
   11fa6:	4682      	mov	sl, r0
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   11fa8:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   11fac:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   11fae:	461e      	mov	r6, r3
   11fb0:	68db      	ldr	r3, [r3, #12]
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d1fb      	bne.n	11fae <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   11fb6:	464d      	mov	r5, r9
static inline uint16_t
_dpl_mbuf_trailingspace(struct dpl_mbuf *om)
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;
   11fb8:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11fba:	f106 0410 	add.w	r4, r6, #16
   11fbe:	881b      	ldrh	r3, [r3, #0]
   11fc0:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   11fc2:	6830      	ldr	r0, [r6, #0]
   11fc4:	88f3      	ldrh	r3, [r6, #6]
   11fc6:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11fc8:	1a24      	subs	r4, r4, r0
   11fca:	b2a4      	uxth	r4, r4
    space = DPL_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   11fcc:	b164      	cbz	r4, 11fe8 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
   11fce:	454c      	cmp	r4, r9
   11fd0:	dd00      	ble.n	11fd4 <dpl_mbuf_append+0x3a>
            space = remainder;
   11fd2:	464c      	mov	r4, r9
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   11fd4:	4622      	mov	r2, r4
   11fd6:	4639      	mov	r1, r7
   11fd8:	f7ff fa4e 	bl	11478 <memcpy>

        last->om_len += space;
   11fdc:	88f3      	ldrh	r3, [r6, #6]
   11fde:	4423      	add	r3, r4
   11fe0:	80f3      	strh	r3, [r6, #6]
        data += space;
   11fe2:	4427      	add	r7, r4
        remainder -= space;
   11fe4:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   11fe8:	2d00      	cmp	r5, #0
   11fea:	dd16      	ble.n	1201a <dpl_mbuf_append+0x80>
        new = dpl_mbuf_get(omp, 0);
   11fec:	2100      	movs	r1, #0
   11fee:	4640      	mov	r0, r8
   11ff0:	f7ff ff7b 	bl	11eea <dpl_mbuf_get>
        if (!new) {
   11ff4:	4604      	mov	r4, r0
   11ff6:	b180      	cbz	r0, 1201a <dpl_mbuf_append+0x80>
            break;
        }

        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
   11ff8:	f8b8 2000 	ldrh.w	r2, [r8]
   11ffc:	42aa      	cmp	r2, r5
   11ffe:	bfa8      	it	ge
   12000:	462a      	movge	r2, r5
   12002:	b292      	uxth	r2, r2
   12004:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
   12006:	4639      	mov	r1, r7
   12008:	6800      	ldr	r0, [r0, #0]
   1200a:	f7ff fa35 	bl	11478 <memcpy>
        data += new->om_len;
   1200e:	88e3      	ldrh	r3, [r4, #6]
   12010:	441f      	add	r7, r3
        remainder -= new->om_len;
   12012:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   12014:	60f4      	str	r4, [r6, #12]
        last = new;
   12016:	4626      	mov	r6, r4
   12018:	e7e6      	b.n	11fe8 <dpl_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
   1201a:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1201e:	2b07      	cmp	r3, #7
   12020:	d907      	bls.n	12032 <dpl_mbuf_append+0x98>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
   12022:	eba9 0905 	sub.w	r9, r9, r5
   12026:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1202a:	fa13 f989 	uxtah	r9, r3, r9
   1202e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   12032:	b925      	cbnz	r5, 1203e <dpl_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   12034:	4628      	mov	r0, r5
   12036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = DPL_EINVAL;
   1203a:	2502      	movs	r5, #2
   1203c:	e7fa      	b.n	12034 <dpl_mbuf_append+0x9a>
        rc = DPL_ENOMEM;
   1203e:	2501      	movs	r5, #1
   12040:	e7f8      	b.n	12034 <dpl_mbuf_append+0x9a>

00012042 <dpl_mbuf_off>:

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   12042:	b178      	cbz	r0, 12064 <dpl_mbuf_off+0x22>
{
   12044:	b410      	push	{r4}
   12046:	e002      	b.n	1204e <dpl_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   12048:	1ac9      	subs	r1, r1, r3
        cur = next;
   1204a:	4620      	mov	r0, r4
        if (cur == NULL) {
   1204c:	b13c      	cbz	r4, 1205e <dpl_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   1204e:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   12050:	88c3      	ldrh	r3, [r0, #6]
   12052:	428b      	cmp	r3, r1
   12054:	dc02      	bgt.n	1205c <dpl_mbuf_off+0x1a>
   12056:	d1f7      	bne.n	12048 <dpl_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   12058:	2c00      	cmp	r4, #0
   1205a:	d1f5      	bne.n	12048 <dpl_mbuf_off+0x6>
            *out_off = off;
   1205c:	8011      	strh	r1, [r2, #0]
    }
}
   1205e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12062:	4770      	bx	lr
   12064:	4770      	bx	lr

00012066 <dpl_mbuf_appendfrom>:
{
   12066:	b5f0      	push	{r4, r5, r6, r7, lr}
   12068:	b083      	sub	sp, #12
   1206a:	4607      	mov	r7, r0
   1206c:	4608      	mov	r0, r1
   1206e:	4611      	mov	r1, r2
   12070:	461e      	mov	r6, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   12072:	f10d 0206 	add.w	r2, sp, #6
   12076:	f7ff ffe4 	bl	12042 <dpl_mbuf_off>
   1207a:	4605      	mov	r5, r0
    while (len > 0) {
   1207c:	e005      	b.n	1208a <dpl_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   1207e:	1b34      	subs	r4, r6, r4
   12080:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   12082:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   12084:	2300      	movs	r3, #0
   12086:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   1208a:	b196      	cbz	r6, 120b2 <dpl_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   1208c:	b1ad      	cbz	r5, 120ba <dpl_mbuf_appendfrom+0x54>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   1208e:	88ec      	ldrh	r4, [r5, #6]
   12090:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12094:	1ae4      	subs	r4, r4, r3
   12096:	42b4      	cmp	r4, r6
   12098:	bfa8      	it	ge
   1209a:	4634      	movge	r4, r6
   1209c:	b2a4      	uxth	r4, r4
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   1209e:	6829      	ldr	r1, [r5, #0]
   120a0:	4622      	mov	r2, r4
   120a2:	4419      	add	r1, r3
   120a4:	4638      	mov	r0, r7
   120a6:	f7ff ff78 	bl	11f9a <dpl_mbuf_append>
        if (rc != 0) {
   120aa:	4603      	mov	r3, r0
   120ac:	2800      	cmp	r0, #0
   120ae:	d0e6      	beq.n	1207e <dpl_mbuf_appendfrom+0x18>
   120b0:	e000      	b.n	120b4 <dpl_mbuf_appendfrom+0x4e>
    return 0;
   120b2:	2300      	movs	r3, #0
}
   120b4:	4618      	mov	r0, r3
   120b6:	b003      	add	sp, #12
   120b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return DPL_EINVAL;
   120ba:	2302      	movs	r3, #2
   120bc:	e7fa      	b.n	120b4 <dpl_mbuf_appendfrom+0x4e>

000120be <dpl_mbuf_copydata>:

int
dpl_mbuf_copydata(const struct dpl_mbuf *m, int off, int len, void *dst)
{
   120be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120c0:	4604      	mov	r4, r0
   120c2:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   120c4:	4616      	mov	r6, r2
   120c6:	b91a      	cbnz	r2, 120d0 <dpl_mbuf_copydata+0x12>
        return 0;
   120c8:	4610      	mov	r0, r2
   120ca:	e01e      	b.n	1210a <dpl_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
   120cc:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
   120ce:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
   120d0:	2900      	cmp	r1, #0
   120d2:	dd13      	ble.n	120fc <dpl_mbuf_copydata+0x3e>
        if (!m) {
   120d4:	b1ec      	cbz	r4, 12112 <dpl_mbuf_copydata+0x54>
        if (off < m->om_len)
   120d6:	88e2      	ldrh	r2, [r4, #6]
   120d8:	428a      	cmp	r2, r1
   120da:	ddf7      	ble.n	120cc <dpl_mbuf_copydata+0xe>
   120dc:	e00e      	b.n	120fc <dpl_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = mynewt_min(m->om_len - off, len);
   120de:	88e5      	ldrh	r5, [r4, #6]
   120e0:	1a6d      	subs	r5, r5, r1
   120e2:	42b5      	cmp	r5, r6
   120e4:	bfa8      	it	ge
   120e6:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   120e8:	6823      	ldr	r3, [r4, #0]
   120ea:	462a      	mov	r2, r5
   120ec:	4419      	add	r1, r3
   120ee:	4638      	mov	r0, r7
   120f0:	f7ff f9c2 	bl	11478 <memcpy>
        len -= count;
   120f4:	1b76      	subs	r6, r6, r5
        udst += count;
   120f6:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   120f8:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   120fa:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
   120fc:	2e00      	cmp	r6, #0
   120fe:	dd01      	ble.n	12104 <dpl_mbuf_copydata+0x46>
   12100:	2c00      	cmp	r4, #0
   12102:	d1ec      	bne.n	120de <dpl_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
   12104:	2e00      	cmp	r6, #0
   12106:	dc01      	bgt.n	1210c <dpl_mbuf_copydata+0x4e>
   12108:	2000      	movs	r0, #0
}
   1210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
   1210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12110:	e7fb      	b.n	1210a <dpl_mbuf_copydata+0x4c>
            return (-1);
   12112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12116:	e7f8      	b.n	1210a <dpl_mbuf_copydata+0x4c>

00012118 <dpl_mbuf_adj>:
{
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   12118:	2800      	cmp	r0, #0
   1211a:	d053      	beq.n	121c4 <dpl_mbuf_adj+0xac>
{
   1211c:	b510      	push	{r4, lr}
   1211e:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   12120:	2900      	cmp	r1, #0
   12122:	db1b      	blt.n	1215c <dpl_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   12124:	4603      	mov	r3, r0
    int len = req_len;
   12126:	460a      	mov	r2, r1
   12128:	e005      	b.n	12136 <dpl_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   1212a:	1a80      	subs	r0, r0, r2
   1212c:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   1212e:	6818      	ldr	r0, [r3, #0]
   12130:	4402      	add	r2, r0
   12132:	601a      	str	r2, [r3, #0]
                len = 0;
   12134:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   12136:	b14b      	cbz	r3, 1214c <dpl_mbuf_adj+0x34>
   12138:	2a00      	cmp	r2, #0
   1213a:	dd07      	ble.n	1214c <dpl_mbuf_adj+0x34>
            if (m->om_len <= len) {
   1213c:	88d8      	ldrh	r0, [r3, #6]
   1213e:	4290      	cmp	r0, r2
   12140:	dcf3      	bgt.n	1212a <dpl_mbuf_adj+0x12>
                len -= m->om_len;
   12142:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   12144:	2000      	movs	r0, #0
   12146:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   12148:	68db      	ldr	r3, [r3, #12]
   1214a:	e7f4      	b.n	12136 <dpl_mbuf_adj+0x1e>
            }
        }
        if (DPL_MBUF_IS_PKTHDR(mp))
   1214c:	7963      	ldrb	r3, [r4, #5]
   1214e:	2b07      	cmp	r3, #7
   12150:	d903      	bls.n	1215a <dpl_mbuf_adj+0x42>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   12152:	1a52      	subs	r2, r2, r1
   12154:	8a23      	ldrh	r3, [r4, #16]
   12156:	441a      	add	r2, r3
   12158:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   1215a:	bd10      	pop	{r4, pc}
        len = -len;
   1215c:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
   12160:	4603      	mov	r3, r0
        count = 0;
   12162:	2200      	movs	r2, #0
            count += m->om_len;
   12164:	88d8      	ldrh	r0, [r3, #6]
   12166:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   12168:	469c      	mov	ip, r3
   1216a:	68db      	ldr	r3, [r3, #12]
   1216c:	2b00      	cmp	r3, #0
   1216e:	d1f9      	bne.n	12164 <dpl_mbuf_adj+0x4c>
        if (m->om_len >= len) {
   12170:	4570      	cmp	r0, lr
   12172:	da0d      	bge.n	12190 <dpl_mbuf_adj+0x78>
        if (count < 0)
   12174:	188a      	adds	r2, r1, r2
   12176:	d41a      	bmi.n	121ae <dpl_mbuf_adj+0x96>
        if (DPL_MBUF_IS_PKTHDR(m))
   12178:	7963      	ldrb	r3, [r4, #5]
   1217a:	2b07      	cmp	r3, #7
   1217c:	d900      	bls.n	12180 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(m)->omp_len = count;
   1217e:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   12180:	2c00      	cmp	r4, #0
   12182:	d0ea      	beq.n	1215a <dpl_mbuf_adj+0x42>
            if (m->om_len >= count) {
   12184:	88e3      	ldrh	r3, [r4, #6]
   12186:	4293      	cmp	r3, r2
   12188:	da13      	bge.n	121b2 <dpl_mbuf_adj+0x9a>
            count -= m->om_len;
   1218a:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   1218c:	68e4      	ldr	r4, [r4, #12]
   1218e:	e7f7      	b.n	12180 <dpl_mbuf_adj+0x68>
            m->om_len -= len;
   12190:	fa1f fe8e 	uxth.w	lr, lr
   12194:	eba0 000e 	sub.w	r0, r0, lr
   12198:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
   1219c:	7963      	ldrb	r3, [r4, #5]
   1219e:	2b07      	cmp	r3, #7
   121a0:	d9db      	bls.n	1215a <dpl_mbuf_adj+0x42>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   121a2:	8a23      	ldrh	r3, [r4, #16]
   121a4:	eba3 0e0e 	sub.w	lr, r3, lr
   121a8:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
   121ac:	e7d5      	b.n	1215a <dpl_mbuf_adj+0x42>
            count = 0;
   121ae:	2200      	movs	r2, #0
   121b0:	e7e2      	b.n	12178 <dpl_mbuf_adj+0x60>
                m->om_len = count;
   121b2:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   121b4:	68e0      	ldr	r0, [r4, #12]
   121b6:	2800      	cmp	r0, #0
   121b8:	d0cf      	beq.n	1215a <dpl_mbuf_adj+0x42>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
   121ba:	f7ff fede 	bl	11f7a <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   121be:	2300      	movs	r3, #0
   121c0:	60e3      	str	r3, [r4, #12]
   121c2:	e7ca      	b.n	1215a <dpl_mbuf_adj+0x42>
   121c4:	4770      	bx	lr

000121c6 <dpl_mbuf_copyinto>:
    return om;
}

int
dpl_mbuf_copyinto(struct dpl_mbuf *om, int off, const void *src, int len)
{
   121c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   121ca:	b083      	sub	sp, #12
   121cc:	4681      	mov	r9, r0
   121ce:	4688      	mov	r8, r1
   121d0:	4617      	mov	r7, r2
   121d2:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = dpl_mbuf_off(om, off, &cur_off);
   121d4:	f10d 0206 	add.w	r2, sp, #6
   121d8:	f7ff ff33 	bl	12042 <dpl_mbuf_off>
    if (cur == NULL) {
   121dc:	4605      	mov	r5, r0
   121de:	b948      	cbnz	r0, 121f4 <dpl_mbuf_copyinto+0x2e>
        return -1;
   121e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   121e4:	e02d      	b.n	12242 <dpl_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   121e6:	b366      	cbz	r6, 12242 <dpl_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   121e8:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   121ea:	b1ab      	cbz	r3, 12218 <dpl_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   121ec:	2200      	movs	r2, #0
   121ee:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   121f2:	461d      	mov	r5, r3
        copylen = mynewt_min(cur->om_len - cur_off, len);
   121f4:	88ec      	ldrh	r4, [r5, #6]
   121f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   121fa:	1ae4      	subs	r4, r4, r3
   121fc:	42b4      	cmp	r4, r6
   121fe:	bfa8      	it	ge
   12200:	4634      	movge	r4, r6
        if (copylen > 0) {
   12202:	2c00      	cmp	r4, #0
   12204:	ddef      	ble.n	121e6 <dpl_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   12206:	6828      	ldr	r0, [r5, #0]
   12208:	4622      	mov	r2, r4
   1220a:	4639      	mov	r1, r7
   1220c:	4418      	add	r0, r3
   1220e:	f7ff f933 	bl	11478 <memcpy>
            sptr += copylen;
   12212:	4427      	add	r7, r4
            len -= copylen;
   12214:	1b36      	subs	r6, r6, r4
            copylen = 0;
   12216:	e7e6      	b.n	121e6 <dpl_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = dpl_mbuf_append(cur, sptr, len);
   12218:	b2b2      	uxth	r2, r6
   1221a:	4639      	mov	r1, r7
   1221c:	4628      	mov	r0, r5
   1221e:	f7ff febc 	bl	11f9a <dpl_mbuf_append>
    if (rc != 0) {
   12222:	b968      	cbnz	r0, 12240 <dpl_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (DPL_MBUF_IS_PKTHDR(om)) {
   12224:	f899 2005 	ldrb.w	r2, [r9, #5]
   12228:	2a07      	cmp	r2, #7
   1222a:	d90e      	bls.n	1224a <dpl_mbuf_copyinto+0x84>
        DPL_MBUF_PKTHDR(om)->omp_len =
            mynewt_max(DPL_MBUF_PKTHDR(om)->omp_len, off + len);
   1222c:	4446      	add	r6, r8
   1222e:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   12232:	4546      	cmp	r6, r8
   12234:	bfb8      	it	lt
   12236:	4646      	movlt	r6, r8
        DPL_MBUF_PKTHDR(om)->omp_len =
   12238:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   1223c:	4606      	mov	r6, r0
   1223e:	e000      	b.n	12242 <dpl_mbuf_copyinto+0x7c>
        return rc;
   12240:	4606      	mov	r6, r0
}
   12242:	4630      	mov	r0, r6
   12244:	b003      	add	sp, #12
   12246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   1224a:	4606      	mov	r6, r0
   1224c:	e7f9      	b.n	12242 <dpl_mbuf_copyinto+0x7c>

0001224e <dpl_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
dpl_mbuf_extend(struct dpl_mbuf *om, uint16_t len)
{
   1224e:	b570      	push	{r4, r5, r6, lr}
   12250:	4606      	mov	r6, r0
    struct dpl_mbuf *newm;
    struct dpl_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   12252:	6880      	ldr	r0, [r0, #8]
   12254:	8803      	ldrh	r3, [r0, #0]
   12256:	428b      	cmp	r3, r1
   12258:	d325      	bcc.n	122a6 <dpl_mbuf_extend+0x58>
   1225a:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   1225c:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
   1225e:	461c      	mov	r4, r3
   12260:	68db      	ldr	r3, [r3, #12]
   12262:	2b00      	cmp	r3, #0
   12264:	d1fb      	bne.n	1225e <dpl_mbuf_extend+0x10>
    omp = om->om_omp;
   12266:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   12268:	f104 0310 	add.w	r3, r4, #16
   1226c:	8812      	ldrh	r2, [r2, #0]
   1226e:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   12270:	6822      	ldr	r2, [r4, #0]
   12272:	88e1      	ldrh	r1, [r4, #6]
   12274:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   12276:	1a9b      	subs	r3, r3, r2
   12278:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (DPL_MBUF_TRAILINGSPACE(last) < len) {
   1227a:	429d      	cmp	r5, r3
   1227c:	d80b      	bhi.n	12296 <dpl_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   1227e:	6820      	ldr	r0, [r4, #0]
   12280:	88e3      	ldrh	r3, [r4, #6]
   12282:	4418      	add	r0, r3
    last->om_len += len;
   12284:	442b      	add	r3, r5
   12286:	80e3      	strh	r3, [r4, #6]

    if (DPL_MBUF_IS_PKTHDR(om)) {
   12288:	7973      	ldrb	r3, [r6, #5]
   1228a:	2b07      	cmp	r3, #7
   1228c:	d902      	bls.n	12294 <dpl_mbuf_extend+0x46>
        DPL_MBUF_PKTHDR(om)->omp_len += len;
   1228e:	8a33      	ldrh	r3, [r6, #16]
   12290:	441d      	add	r5, r3
   12292:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   12294:	bd70      	pop	{r4, r5, r6, pc}
        newm = dpl_mbuf_get(om->om_omp, 0);
   12296:	2100      	movs	r1, #0
   12298:	f7ff fe27 	bl	11eea <dpl_mbuf_get>
        if (newm == NULL) {
   1229c:	2800      	cmp	r0, #0
   1229e:	d0f9      	beq.n	12294 <dpl_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
   122a0:	60e0      	str	r0, [r4, #12]
        last = newm;
   122a2:	4604      	mov	r4, r0
   122a4:	e7eb      	b.n	1227e <dpl_mbuf_extend+0x30>
        return NULL;
   122a6:	2000      	movs	r0, #0
   122a8:	e7f4      	b.n	12294 <dpl_mbuf_extend+0x46>

000122aa <dpl_mbuf_trim_front>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_trim_front(struct dpl_mbuf *om)
{
   122aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122ac:	4606      	mov	r6, r0
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   122ae:	88c7      	ldrh	r7, [r0, #6]
   122b0:	b9cf      	cbnz	r7, 122e6 <dpl_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   122b2:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   122b4:	b144      	cbz	r4, 122c8 <dpl_mbuf_trim_front+0x1e>
   122b6:	88e3      	ldrh	r3, [r4, #6]
   122b8:	b933      	cbnz	r3, 122c8 <dpl_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   122ba:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   122bc:	60f5      	str	r5, [r6, #12]
        dpl_mbuf_free(cur);
   122be:	4620      	mov	r0, r4
   122c0:	f7ff fe51 	bl	11f66 <dpl_mbuf_free>

        cur = next;
   122c4:	462c      	mov	r4, r5
   122c6:	e7f5      	b.n	122b4 <dpl_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   122c8:	b16c      	cbz	r4, 122e6 <dpl_mbuf_trim_front+0x3c>
    if (DPL_MBUF_IS_PKTHDR(om)) {
   122ca:	7963      	ldrb	r3, [r4, #5]
   122cc:	2b07      	cmp	r3, #7
   122ce:	d900      	bls.n	122d2 <dpl_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   122d0:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   122d2:	4620      	mov	r0, r4
   122d4:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   122d8:	4407      	add	r7, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   122da:	1bdf      	subs	r7, r3, r7
   122dc:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   122de:	7972      	ldrb	r2, [r6, #5]
   122e0:	b293      	uxth	r3, r2
   122e2:	42bb      	cmp	r3, r7
   122e4:	d901      	bls.n	122ea <dpl_mbuf_trim_front+0x40>
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
   122e6:	4630      	mov	r0, r6
   122e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   122ea:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
   122ec:	f106 0110 	add.w	r1, r6, #16
   122f0:	f7ff f8c2 	bl	11478 <memcpy>
        dpl_mbuf_free(om);
   122f4:	4630      	mov	r0, r6
   122f6:	f7ff fe36 	bl	11f66 <dpl_mbuf_free>
        om = cur;
   122fa:	4626      	mov	r6, r4
   122fc:	e7f3      	b.n	122e6 <dpl_mbuf_trim_front+0x3c>

000122fe <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   122fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   12300:	b083      	sub	sp, #12
   12302:	460d      	mov	r5, r1
   12304:	4617      	mov	r7, r2
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   12306:	b29e      	uxth	r6, r3
   12308:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1230a:	9300      	str	r3, [sp, #0]
   1230c:	4603      	mov	r3, r0
   1230e:	9a08      	ldr	r2, [sp, #32]
   12310:	4631      	mov	r1, r6
   12312:	4628      	mov	r0, r5
   12314:	f000 f830 	bl	12378 <dpl_mempool_init>
    if (rc != 0) {
   12318:	b108      	cbz	r0, 1231e <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1231a:	b003      	add	sp, #12
   1231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1231e:	4633      	mov	r3, r6
   12320:	9a08      	ldr	r2, [sp, #32]
   12322:	b292      	uxth	r2, r2
   12324:	4629      	mov	r1, r5
   12326:	4638      	mov	r0, r7
   12328:	f7ff fdda 	bl	11ee0 <dpl_mbuf_pool_init>
    if (rc != 0) {
   1232c:	e7f5      	b.n	1231a <mem_init_mbuf_pool+0x1c>

0001232e <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1232e:	b570      	push	{r4, r5, r6, lr}
   12330:	4604      	mov	r4, r0
   12332:	460d      	mov	r5, r1
   12334:	4619      	mov	r1, r3
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   12336:	6806      	ldr	r6, [r0, #0]
   12338:	8a33      	ldrh	r3, [r6, #16]
   1233a:	42ab      	cmp	r3, r5
   1233c:	d913      	bls.n	12366 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   1233e:	4628      	mov	r0, r5
   12340:	4790      	blx	r2
    if (frag == NULL) {
   12342:	4606      	mov	r6, r0
   12344:	b190      	cbz	r0, 1236c <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   12346:	462b      	mov	r3, r5
   12348:	2200      	movs	r2, #0
   1234a:	6821      	ldr	r1, [r4, #0]
   1234c:	f7ff fe8b 	bl	12066 <dpl_mbuf_appendfrom>
    if (rc != 0) {
   12350:	b960      	cbnz	r0, 1236c <mem_split_frag+0x3e>
        goto err;
    }
    dpl_mbuf_adj(*om, max_frag_sz);
   12352:	4629      	mov	r1, r5
   12354:	6820      	ldr	r0, [r4, #0]
   12356:	f7ff fedf 	bl	12118 <dpl_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = dpl_mbuf_trim_front(*om);
   1235a:	6820      	ldr	r0, [r4, #0]
   1235c:	f7ff ffa5 	bl	122aa <dpl_mbuf_trim_front>
   12360:	6020      	str	r0, [r4, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
   12362:	4630      	mov	r0, r6
   12364:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   12366:	2300      	movs	r3, #0
   12368:	6003      	str	r3, [r0, #0]
        return frag;
   1236a:	e7fa      	b.n	12362 <mem_split_frag+0x34>
    dpl_mbuf_free_chain(frag);
   1236c:	4630      	mov	r0, r6
   1236e:	f7ff fe04 	bl	11f7a <dpl_mbuf_free_chain>
    return NULL;
   12372:	2600      	movs	r6, #0
   12374:	e7f5      	b.n	12362 <mem_split_frag+0x34>
	...

00012378 <dpl_mempool_init>:
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   12378:	2800      	cmp	r0, #0
   1237a:	d035      	beq.n	123e8 <dpl_mempool_init+0x70>
{
   1237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1237e:	460c      	mov	r4, r1
   12380:	461d      	mov	r5, r3
   12382:	4606      	mov	r6, r0
    if (!mp || (block_size == 0)) {
   12384:	2a00      	cmp	r2, #0
   12386:	d031      	beq.n	123ec <dpl_mempool_init+0x74>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
   12388:	b1c3      	cbz	r3, 123bc <dpl_mempool_init+0x44>
        return DPL_INVALID_PARAM;
    }

    if (membuf != NULL) {
   1238a:	b115      	cbz	r5, 12392 <dpl_mempool_init+0x1a>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
   1238c:	f015 0f03 	tst.w	r5, #3
   12390:	d12e      	bne.n	123f0 <dpl_mempool_init+0x78>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   12392:	f012 0f03 	tst.w	r2, #3
   12396:	d015      	beq.n	123c4 <dpl_mempool_init+0x4c>
   12398:	f022 0703 	bic.w	r7, r2, #3
   1239c:	3704      	adds	r7, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1239e:	6032      	str	r2, [r6, #0]
    mp->mp_num_free = blocks;
   123a0:	80f4      	strh	r4, [r6, #6]
    mp->mp_min_free = blocks;
   123a2:	8134      	strh	r4, [r6, #8]
    mp->mp_flags = 0;
   123a4:	2300      	movs	r3, #0
   123a6:	72b3      	strb	r3, [r6, #10]
    mp->mp_num_blocks = blocks;
   123a8:	80b4      	strh	r4, [r6, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
   123aa:	60f5      	str	r5, [r6, #12]
    mp->name = name;
   123ac:	9b06      	ldr	r3, [sp, #24]
   123ae:	61b3      	str	r3, [r6, #24]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
   123b0:	6175      	str	r5, [r6, #20]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   123b2:	f106 001c 	add.w	r0, r6, #28
   123b6:	f7fb fcf9 	bl	ddac <os_mutex_init>
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
   123ba:	e00a      	b.n	123d2 <dpl_mempool_init+0x5a>
    if ((!membuf) && (blocks != 0)) {
   123bc:	2900      	cmp	r1, #0
   123be:	d0e4      	beq.n	1238a <dpl_mempool_init+0x12>
        return DPL_INVALID_PARAM;
   123c0:	2003      	movs	r0, #3
   123c2:	e010      	b.n	123e6 <dpl_mempool_init+0x6e>
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   123c4:	4617      	mov	r7, r2
   123c6:	e7ea      	b.n	1239e <dpl_mempool_init+0x26>
        block_addr += true_block_size;
   123c8:	19eb      	adds	r3, r5, r7
        dpl_mempool_poison(block_addr, true_block_size);
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
   123ca:	602b      	str	r3, [r5, #0]
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
   123cc:	3c01      	subs	r4, #1
   123ce:	b2a4      	uxth	r4, r4
        block_addr += true_block_size;
   123d0:	461d      	mov	r5, r3
    while (blocks > 1) {
   123d2:	2c01      	cmp	r4, #1
   123d4:	d8f8      	bhi.n	123c8 <dpl_mempool_init+0x50>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   123d6:	2000      	movs	r0, #0
   123d8:	6028      	str	r0, [r5, #0]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
   123da:	6130      	str	r0, [r6, #16]
   123dc:	4b05      	ldr	r3, [pc, #20]	; (123f4 <dpl_mempool_init+0x7c>)
   123de:	685a      	ldr	r2, [r3, #4]
   123e0:	6016      	str	r6, [r2, #0]
   123e2:	3610      	adds	r6, #16
   123e4:	605e      	str	r6, [r3, #4]

    return DPL_OK;
}
   123e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_INVALID_PARAM;
   123e8:	2003      	movs	r0, #3
}
   123ea:	4770      	bx	lr
        return DPL_INVALID_PARAM;
   123ec:	2003      	movs	r0, #3
   123ee:	e7fa      	b.n	123e6 <dpl_mempool_init+0x6e>
            return DPL_MEM_NOT_ALIGNED;
   123f0:	2004      	movs	r0, #4
   123f2:	e7f8      	b.n	123e6 <dpl_mempool_init+0x6e>
   123f4:	200013c8 	.word	0x200013c8

000123f8 <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
   123f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   123fa:	4604      	mov	r4, r0
   123fc:	b1f8      	cbz	r0, 1243e <dpl_memblock_get+0x46>
    return os_arch_save_sr();
   123fe:	f7fa fed9 	bl	d1b4 <os_arch_save_sr>
   12402:	4605      	mov	r5, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   12404:	f104 071c 	add.w	r7, r4, #28
   12408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1240c:	4638      	mov	r0, r7
   1240e:	f7fb fd33 	bl	de78 <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
   12412:	88e3      	ldrh	r3, [r4, #6]
   12414:	b153      	cbz	r3, 1242c <dpl_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   12416:	6966      	ldr	r6, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   12418:	6832      	ldr	r2, [r6, #0]
   1241a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1241c:	3b01      	subs	r3, #1
   1241e:	b29b      	uxth	r3, r3
   12420:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   12422:	8922      	ldrh	r2, [r4, #8]
   12424:	4293      	cmp	r3, r2
   12426:	d202      	bcs.n	1242e <dpl_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
   12428:	8123      	strh	r3, [r4, #8]
   1242a:	e000      	b.n	1242e <dpl_memblock_get+0x36>
    block = NULL;
   1242c:	2600      	movs	r6, #0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1242e:	4638      	mov	r0, r7
   12430:	f7fb fcc6 	bl	ddc0 <os_mutex_release>
    os_arch_restore_sr(ctx);
   12434:	4628      	mov	r0, r5
   12436:	f7fa fec3 	bl	d1c0 <os_arch_restore_sr>
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
   1243a:	4630      	mov	r0, r6
   1243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
   1243e:	4606      	mov	r6, r0
    return (void *)block;
   12440:	e7fb      	b.n	1243a <dpl_memblock_get+0x42>

00012442 <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
   12442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12444:	4604      	mov	r4, r0
   12446:	460d      	mov	r5, r1
    return os_arch_save_sr();
   12448:	f7fa feb4 	bl	d1b4 <os_arch_save_sr>
   1244c:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1244e:	f104 071c 	add.w	r7, r4, #28
   12452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12456:	4638      	mov	r0, r7
   12458:	f7fb fd0e 	bl	de78 <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1245c:	6963      	ldr	r3, [r4, #20]
   1245e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   12460:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   12462:	88e3      	ldrh	r3, [r4, #6]
   12464:	3301      	adds	r3, #1
   12466:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12468:	4638      	mov	r0, r7
   1246a:	f7fb fca9 	bl	ddc0 <os_mutex_release>
    os_arch_restore_sr(ctx);
   1246e:	4630      	mov	r0, r6
   12470:	f7fa fea6 	bl	d1c0 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
   12474:	2000      	movs	r0, #0
   12476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012478 <dpl_memblock_put>:
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   12478:	b178      	cbz	r0, 1249a <dpl_memblock_put+0x22>
   1247a:	4603      	mov	r3, r0
   1247c:	b179      	cbz	r1, 1249e <dpl_memblock_put+0x26>
{
   1247e:	b510      	push	{r4, lr}
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
   12480:	7a82      	ldrb	r2, [r0, #10]
   12482:	f012 0f01 	tst.w	r2, #1
   12486:	d004      	beq.n	12492 <dpl_memblock_put+0x1a>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   12488:	6a84      	ldr	r4, [r0, #40]	; 0x28
   1248a:	b114      	cbz	r4, 12492 <dpl_memblock_put+0x1a>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1248c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1248e:	47a0      	blx	r4
            return rc;
   12490:	e002      	b.n	12498 <dpl_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
   12492:	4618      	mov	r0, r3
   12494:	f7ff ffd5 	bl	12442 <dpl_memblock_put_from_cb>
}
   12498:	bd10      	pop	{r4, pc}
        return DPL_INVALID_PARAM;
   1249a:	2003      	movs	r0, #3
   1249c:	4770      	bx	lr
   1249e:	2003      	movs	r0, #3
}
   124a0:	4770      	bx	lr

000124a2 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   124a2:	b538      	push	{r3, r4, r5, lr}
   124a4:	460d      	mov	r5, r1
   124a6:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   124a8:	6811      	ldr	r1, [r2, #0]
   124aa:	f7ff f813 	bl	114d4 <strcmp>
   124ae:	b9a8      	cbnz	r0, 124dc <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
   124b0:	b145      	cbz	r5, 124c4 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   124b2:	6861      	ldr	r1, [r4, #4]
   124b4:	b181      	cbz	r1, 124d8 <conf_dup_check_cb+0x36>
   124b6:	4628      	mov	r0, r5
   124b8:	f7ff f80c 	bl	114d4 <strcmp>
   124bc:	b960      	cbnz	r0, 124d8 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
   124be:	2301      	movs	r3, #1
   124c0:	60a3      	str	r3, [r4, #8]
   124c2:	e00b      	b.n	124dc <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
   124c4:	6863      	ldr	r3, [r4, #4]
   124c6:	b10b      	cbz	r3, 124cc <conf_dup_check_cb+0x2a>
   124c8:	781b      	ldrb	r3, [r3, #0]
   124ca:	b913      	cbnz	r3, 124d2 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   124cc:	2301      	movs	r3, #1
   124ce:	60a3      	str	r3, [r4, #8]
   124d0:	e004      	b.n	124dc <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
   124d2:	2300      	movs	r3, #0
   124d4:	60a3      	str	r3, [r4, #8]
   124d6:	e001      	b.n	124dc <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
   124d8:	2300      	movs	r3, #0
   124da:	60a3      	str	r3, [r4, #8]
        }
    }
}
   124dc:	bd38      	pop	{r3, r4, r5, pc}

000124de <conf_load_cb>:
{
   124de:	b538      	push	{r3, r4, r5, lr}
   124e0:	4604      	mov	r4, r0
   124e2:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   124e4:	b122      	cbz	r2, 124f0 <conf_load_cb+0x12>
   124e6:	4610      	mov	r0, r2
   124e8:	4621      	mov	r1, r4
   124ea:	f7fe fff3 	bl	114d4 <strcmp>
   124ee:	b918      	cbnz	r0, 124f8 <conf_load_cb+0x1a>
        conf_set_value(name, val);
   124f0:	4629      	mov	r1, r5
   124f2:	4620      	mov	r0, r4
   124f4:	f000 f9ec 	bl	128d0 <conf_set_value>
}
   124f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000124fc <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   124fc:	4b08      	ldr	r3, [pc, #32]	; (12520 <conf_src_register+0x24>)
   124fe:	6819      	ldr	r1, [r3, #0]
   12500:	460b      	mov	r3, r1
    prev = NULL;
   12502:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   12504:	e001      	b.n	1250a <conf_src_register+0xe>
        prev = cur;
   12506:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   12508:	681b      	ldr	r3, [r3, #0]
   1250a:	2b00      	cmp	r3, #0
   1250c:	d1fb      	bne.n	12506 <conf_src_register+0xa>
    if (!prev) {
   1250e:	b11a      	cbz	r2, 12518 <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   12510:	6813      	ldr	r3, [r2, #0]
   12512:	6003      	str	r3, [r0, #0]
   12514:	6010      	str	r0, [r2, #0]
}
   12516:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   12518:	6001      	str	r1, [r0, #0]
   1251a:	4b01      	ldr	r3, [pc, #4]	; (12520 <conf_src_register+0x24>)
   1251c:	6018      	str	r0, [r3, #0]
   1251e:	4770      	bx	lr
   12520:	20005fd8 	.word	0x20005fd8

00012524 <conf_dst_register>:
    conf_save_dst = cs;
   12524:	4b01      	ldr	r3, [pc, #4]	; (1252c <conf_dst_register+0x8>)
   12526:	6018      	str	r0, [r3, #0]
}
   12528:	4770      	bx	lr
   1252a:	bf00      	nop
   1252c:	20005fe0 	.word	0x20005fe0

00012530 <conf_load>:
{
   12530:	b510      	push	{r4, lr}
    conf_lock();
   12532:	f000 f8d5 	bl	126e0 <conf_lock>
    conf_loaded = true;
   12536:	2301      	movs	r3, #1
   12538:	4a0e      	ldr	r2, [pc, #56]	; (12574 <conf_load+0x44>)
   1253a:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   1253c:	4a0e      	ldr	r2, [pc, #56]	; (12578 <conf_load+0x48>)
   1253e:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   12540:	4b0e      	ldr	r3, [pc, #56]	; (1257c <conf_load+0x4c>)
   12542:	681c      	ldr	r4, [r3, #0]
   12544:	e000      	b.n	12548 <conf_load+0x18>
   12546:	6824      	ldr	r4, [r4, #0]
   12548:	b164      	cbz	r4, 12564 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   1254a:	6863      	ldr	r3, [r4, #4]
   1254c:	681b      	ldr	r3, [r3, #0]
   1254e:	2200      	movs	r2, #0
   12550:	490b      	ldr	r1, [pc, #44]	; (12580 <conf_load+0x50>)
   12552:	4620      	mov	r0, r4
   12554:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   12556:	6823      	ldr	r3, [r4, #0]
   12558:	2b00      	cmp	r3, #0
   1255a:	d0f4      	beq.n	12546 <conf_load+0x16>
            conf_commit(NULL);
   1255c:	2000      	movs	r0, #0
   1255e:	f000 f9ef 	bl	12940 <conf_commit>
   12562:	e7f0      	b.n	12546 <conf_load+0x16>
    conf_loading = false;
   12564:	4b04      	ldr	r3, [pc, #16]	; (12578 <conf_load+0x48>)
   12566:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   12568:	f000 f8c4 	bl	126f4 <conf_unlock>
    return conf_commit(NULL);
   1256c:	4620      	mov	r0, r4
   1256e:	f000 f9e7 	bl	12940 <conf_commit>
}
   12572:	bd10      	pop	{r4, pc}
   12574:	20005fdc 	.word	0x20005fdc
   12578:	20005fdd 	.word	0x20005fdd
   1257c:	20005fd8 	.word	0x20005fd8
   12580:	000124df 	.word	0x000124df

00012584 <conf_ensure_loaded>:
{
   12584:	b508      	push	{r3, lr}
    if (conf_loaded) {
   12586:	4b04      	ldr	r3, [pc, #16]	; (12598 <conf_ensure_loaded+0x14>)
   12588:	781b      	ldrb	r3, [r3, #0]
   1258a:	b10b      	cbz	r3, 12590 <conf_ensure_loaded+0xc>
        return 0;
   1258c:	2000      	movs	r0, #0
}
   1258e:	bd08      	pop	{r3, pc}
    return conf_load();
   12590:	f7ff ffce 	bl	12530 <conf_load>
   12594:	e7fb      	b.n	1258e <conf_ensure_loaded+0xa>
   12596:	bf00      	nop
   12598:	20005fdc 	.word	0x20005fdc

0001259c <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   1259c:	b570      	push	{r4, r5, r6, lr}
   1259e:	b084      	sub	sp, #16
   125a0:	4605      	mov	r5, r0
   125a2:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   125a4:	f000 f89c 	bl	126e0 <conf_lock>
    if (!conf_save_dst) {
   125a8:	4b13      	ldr	r3, [pc, #76]	; (125f8 <conf_save_one+0x5c>)
   125aa:	681b      	ldr	r3, [r3, #0]
   125ac:	b1fb      	cbz	r3, 125ee <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   125ae:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   125b0:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   125b2:	2300      	movs	r3, #0
   125b4:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   125b6:	4b11      	ldr	r3, [pc, #68]	; (125fc <conf_save_one+0x60>)
   125b8:	681c      	ldr	r4, [r3, #0]
   125ba:	e006      	b.n	125ca <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   125bc:	6863      	ldr	r3, [r4, #4]
   125be:	681b      	ldr	r3, [r3, #0]
   125c0:	aa01      	add	r2, sp, #4
   125c2:	490f      	ldr	r1, [pc, #60]	; (12600 <conf_save_one+0x64>)
   125c4:	4620      	mov	r0, r4
   125c6:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   125c8:	6824      	ldr	r4, [r4, #0]
   125ca:	2c00      	cmp	r4, #0
   125cc:	d1f6      	bne.n	125bc <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   125ce:	9b03      	ldr	r3, [sp, #12]
   125d0:	2b01      	cmp	r3, #1
   125d2:	d00e      	beq.n	125f2 <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   125d4:	4b08      	ldr	r3, [pc, #32]	; (125f8 <conf_save_one+0x5c>)
   125d6:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   125d8:	6843      	ldr	r3, [r0, #4]
   125da:	689b      	ldr	r3, [r3, #8]
   125dc:	4632      	mov	r2, r6
   125de:	4629      	mov	r1, r5
   125e0:	4798      	blx	r3
   125e2:	4604      	mov	r4, r0
out:
    conf_unlock();
   125e4:	f000 f886 	bl	126f4 <conf_unlock>
    return rc;
}
   125e8:	4620      	mov	r0, r4
   125ea:	b004      	add	sp, #16
   125ec:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   125ee:	240a      	movs	r4, #10
   125f0:	e7f8      	b.n	125e4 <conf_save_one+0x48>
        rc = 0;
   125f2:	2400      	movs	r4, #0
   125f4:	e7f6      	b.n	125e4 <conf_save_one+0x48>
   125f6:	bf00      	nop
   125f8:	20005fe0 	.word	0x20005fe0
   125fc:	20005fd8 	.word	0x20005fd8
   12600:	000124a3 	.word	0x000124a3

00012604 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
   12604:	b508      	push	{r3, lr}
    conf_save_one(name, value);
   12606:	f7ff ffc9 	bl	1259c <conf_save_one>
}
   1260a:	bd08      	pop	{r3, pc}

0001260c <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   1260c:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   1260e:	f000 f867 	bl	126e0 <conf_lock>
    cs = conf_save_dst;
   12612:	4b11      	ldr	r3, [pc, #68]	; (12658 <conf_save+0x4c>)
   12614:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
   12616:	b1ee      	cbz	r6, 12654 <conf_save+0x48>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   12618:	6873      	ldr	r3, [r6, #4]
   1261a:	685b      	ldr	r3, [r3, #4]
   1261c:	b10b      	cbz	r3, 12622 <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   1261e:	4630      	mov	r0, r6
   12620:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   12622:	4b0e      	ldr	r3, [pc, #56]	; (1265c <conf_save+0x50>)
   12624:	681c      	ldr	r4, [r3, #0]
    rc = 0;
   12626:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   12628:	e000      	b.n	1262c <conf_save+0x20>
   1262a:	6824      	ldr	r4, [r4, #0]
   1262c:	b14c      	cbz	r4, 12642 <conf_save+0x36>
        if (ch->ch_export) {
   1262e:	6963      	ldr	r3, [r4, #20]
   12630:	2b00      	cmp	r3, #0
   12632:	d0fa      	beq.n	1262a <conf_save+0x1e>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   12634:	2100      	movs	r1, #0
   12636:	480a      	ldr	r0, [pc, #40]	; (12660 <conf_save+0x54>)
   12638:	4798      	blx	r3
            if (!rc) {
   1263a:	2d00      	cmp	r5, #0
   1263c:	d1f5      	bne.n	1262a <conf_save+0x1e>
                rc = rc2;
   1263e:	4605      	mov	r5, r0
   12640:	e7f3      	b.n	1262a <conf_save+0x1e>
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
   12642:	6873      	ldr	r3, [r6, #4]
   12644:	68db      	ldr	r3, [r3, #12]
   12646:	b10b      	cbz	r3, 1264c <conf_save+0x40>
        cs->cs_itf->csi_save_end(cs);
   12648:	4630      	mov	r0, r6
   1264a:	4798      	blx	r3
    }
out:
    conf_unlock();
   1264c:	f000 f852 	bl	126f4 <conf_unlock>
    return rc;
}
   12650:	4628      	mov	r0, r5
   12652:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   12654:	250a      	movs	r5, #10
   12656:	e7f9      	b.n	1264c <conf_save+0x40>
   12658:	20005fe0 	.word	0x20005fe0
   1265c:	20005fe4 	.word	0x20005fe4
   12660:	00012605 	.word	0x00012605

00012664 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   12664:	2300      	movs	r3, #0
   12666:	4a02      	ldr	r2, [pc, #8]	; (12670 <conf_store_init+0xc>)
   12668:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   1266a:	4a02      	ldr	r2, [pc, #8]	; (12674 <conf_store_init+0x10>)
   1266c:	6013      	str	r3, [r2, #0]
}
   1266e:	4770      	bx	lr
   12670:	20005fdc 	.word	0x20005fdc
   12674:	20005fd8 	.word	0x20005fd8

00012678 <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
   12678:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   1267a:	f7ff ff83 	bl	12584 <conf_ensure_loaded>
}
   1267e:	bd08      	pop	{r3, pc}

00012680 <conf_init>:
{
   12680:	b510      	push	{r4, lr}
   12682:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
   12684:	4812      	ldr	r0, [pc, #72]	; (126d0 <conf_init+0x50>)
   12686:	f7fb fb91 	bl	ddac <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   1268a:	4b12      	ldr	r3, [pc, #72]	; (126d4 <conf_init+0x54>)
   1268c:	2200      	movs	r2, #0
   1268e:	601a      	str	r2, [r3, #0]
    conf_store_init();
   12690:	f7ff ffe8 	bl	12664 <conf_store_init>
    rc = conf_cli_register();
   12694:	f000 fa0c 	bl	12ab0 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   12698:	b138      	cbz	r0, 126aa <conf_init+0x2a>
   1269a:	2000      	movs	r0, #0
   1269c:	9000      	str	r0, [sp, #0]
   1269e:	4b0e      	ldr	r3, [pc, #56]	; (126d8 <conf_init+0x58>)
   126a0:	681c      	ldr	r4, [r3, #0]
   126a2:	4603      	mov	r3, r0
   126a4:	4602      	mov	r2, r0
   126a6:	4601      	mov	r1, r0
   126a8:	47a0      	blx	r4
    rc = conf_nmgr_register();
   126aa:	f000 faa5 	bl	12bf8 <conf_nmgr_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   126ae:	b138      	cbz	r0, 126c0 <conf_init+0x40>
   126b0:	2000      	movs	r0, #0
   126b2:	9000      	str	r0, [sp, #0]
   126b4:	4b08      	ldr	r3, [pc, #32]	; (126d8 <conf_init+0x58>)
   126b6:	681c      	ldr	r4, [r3, #0]
   126b8:	4603      	mov	r3, r0
   126ba:	4602      	mov	r2, r0
   126bc:	4601      	mov	r1, r0
   126be:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   126c0:	f7fb fa30 	bl	db24 <os_eventq_dflt_get>
   126c4:	4905      	ldr	r1, [pc, #20]	; (126dc <conf_init+0x5c>)
   126c6:	f7fb f97f 	bl	d9c8 <os_eventq_put>
}
   126ca:	b002      	add	sp, #8
   126cc:	bd10      	pop	{r4, pc}
   126ce:	bf00      	nop
   126d0:	20005fe8 	.word	0x20005fe8
   126d4:	20005fe4 	.word	0x20005fe4
   126d8:	2000143c 	.word	0x2000143c
   126dc:	200013d0 	.word	0x200013d0

000126e0 <conf_lock>:
{
   126e0:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   126e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   126e6:	4802      	ldr	r0, [pc, #8]	; (126f0 <conf_lock+0x10>)
   126e8:	f7fb fbc6 	bl	de78 <os_mutex_pend>
}
   126ec:	bd08      	pop	{r3, pc}
   126ee:	bf00      	nop
   126f0:	20005fe8 	.word	0x20005fe8

000126f4 <conf_unlock>:
{
   126f4:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   126f6:	4802      	ldr	r0, [pc, #8]	; (12700 <conf_unlock+0xc>)
   126f8:	f7fb fb62 	bl	ddc0 <os_mutex_release>
}
   126fc:	bd08      	pop	{r3, pc}
   126fe:	bf00      	nop
   12700:	20005fe8 	.word	0x20005fe8

00012704 <conf_register>:
{
   12704:	b510      	push	{r4, lr}
   12706:	4604      	mov	r4, r0
    conf_lock();
   12708:	f7ff ffea 	bl	126e0 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   1270c:	4b03      	ldr	r3, [pc, #12]	; (1271c <conf_register+0x18>)
   1270e:	681a      	ldr	r2, [r3, #0]
   12710:	6022      	str	r2, [r4, #0]
   12712:	601c      	str	r4, [r3, #0]
    conf_unlock();
   12714:	f7ff ffee 	bl	126f4 <conf_unlock>
}
   12718:	2000      	movs	r0, #0
   1271a:	bd10      	pop	{r4, pc}
   1271c:	20005fe4 	.word	0x20005fe4

00012720 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
   12720:	b538      	push	{r3, r4, r5, lr}
   12722:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   12724:	4b06      	ldr	r3, [pc, #24]	; (12740 <conf_handler_lookup+0x20>)
   12726:	681c      	ldr	r4, [r3, #0]
   12728:	e000      	b.n	1272c <conf_handler_lookup+0xc>
   1272a:	6824      	ldr	r4, [r4, #0]
   1272c:	b12c      	cbz	r4, 1273a <conf_handler_lookup+0x1a>
        if (!strcmp(name, ch->ch_name)) {
   1272e:	6861      	ldr	r1, [r4, #4]
   12730:	4628      	mov	r0, r5
   12732:	f7fe fecf 	bl	114d4 <strcmp>
   12736:	2800      	cmp	r0, #0
   12738:	d1f7      	bne.n	1272a <conf_handler_lookup+0xa>
            return ch;
        }
    }
    return NULL;
}
   1273a:	4620      	mov	r0, r4
   1273c:	bd38      	pop	{r3, r4, r5, pc}
   1273e:	bf00      	nop
   12740:	20005fe4 	.word	0x20005fe4

00012744 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
   12744:	b570      	push	{r4, r5, r6, lr}
   12746:	b082      	sub	sp, #8
   12748:	460e      	mov	r6, r1
   1274a:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
   1274c:	aa01      	add	r2, sp, #4
   1274e:	4909      	ldr	r1, [pc, #36]	; (12774 <conf_parse_name+0x30>)
   12750:	f009 ffec 	bl	1c72c <strtok_r>

    i = 0;
   12754:	2300      	movs	r3, #0
    while (tok) {
   12756:	e008      	b.n	1276a <conf_parse_name+0x26>
        name_argv[i++] = tok;
   12758:	1c5c      	adds	r4, r3, #1
   1275a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   1275e:	aa01      	add	r2, sp, #4
   12760:	4904      	ldr	r1, [pc, #16]	; (12774 <conf_parse_name+0x30>)
   12762:	2000      	movs	r0, #0
   12764:	f009 ffe2 	bl	1c72c <strtok_r>
        name_argv[i++] = tok;
   12768:	4623      	mov	r3, r4
    while (tok) {
   1276a:	2800      	cmp	r0, #0
   1276c:	d1f4      	bne.n	12758 <conf_parse_name+0x14>
    }
    *name_argc = i;
   1276e:	6033      	str	r3, [r6, #0]

    return 0;
}
   12770:	b002      	add	sp, #8
   12772:	bd70      	pop	{r4, r5, r6, pc}
   12774:	00023c04 	.word	0x00023c04

00012778 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
   12778:	b510      	push	{r4, lr}
   1277a:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
   1277c:	f7ff ffe2 	bl	12744 <conf_parse_name>
    if (rc) {
   12780:	b918      	cbnz	r0, 1278a <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
   12782:	6820      	ldr	r0, [r4, #0]
   12784:	f7ff ffcc 	bl	12720 <conf_handler_lookup>
}
   12788:	bd10      	pop	{r4, pc}
        return NULL;
   1278a:	2000      	movs	r0, #0
   1278c:	e7fc      	b.n	12788 <conf_parse_and_lookup+0x10>

0001278e <conf_value_from_str>:
{
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
   1278e:	2800      	cmp	r0, #0
   12790:	d051      	beq.n	12836 <conf_value_from_str+0xa8>
{
   12792:	b5f0      	push	{r4, r5, r6, r7, lr}
   12794:	b083      	sub	sp, #12
   12796:	460c      	mov	r4, r1
   12798:	4616      	mov	r6, r2
   1279a:	461d      	mov	r5, r3
   1279c:	4607      	mov	r7, r0
        goto err;
    }
    switch (type) {
   1279e:	1e8b      	subs	r3, r1, #2
   127a0:	2b08      	cmp	r3, #8
   127a2:	d84a      	bhi.n	1283a <conf_value_from_str+0xac>
   127a4:	e8df f003 	tbb	[pc, r3]
   127a8:	32050505 	.word	0x32050505
   127ac:	4949493d 	.word	0x4949493d
   127b0:	05          	.byte	0x05
   127b1:	00          	.byte	0x00
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
   127b2:	2200      	movs	r2, #0
   127b4:	a901      	add	r1, sp, #4
   127b6:	f009 ffc9 	bl	1c74c <strtol>
        if (*eptr != '\0') {
   127ba:	9b01      	ldr	r3, [sp, #4]
   127bc:	781b      	ldrb	r3, [r3, #0]
   127be:	2b00      	cmp	r3, #0
   127c0:	d13e      	bne.n	12840 <conf_value_from_str+0xb2>
            goto err;
        }
        if (type == CONF_BOOL) {
   127c2:	2c0a      	cmp	r4, #10
   127c4:	d007      	beq.n	127d6 <conf_value_from_str+0x48>
            if (val < 0 || val > 1) {
                goto err;
            }
            *(bool *)vp = val;
        } else if (type == CONF_INT8) {
   127c6:	2c02      	cmp	r4, #2
   127c8:	d00d      	beq.n	127e6 <conf_value_from_str+0x58>
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
        } else if (type == CONF_INT16) {
   127ca:	2c03      	cmp	r4, #3
   127cc:	d013      	beq.n	127f6 <conf_value_from_str+0x68>
            if (val < INT16_MIN || val > UINT16_MAX) {
                goto err;
            }
            *(int16_t *)vp = val;
        } else if (type == CONF_INT32) {
   127ce:	2c04      	cmp	r4, #4
   127d0:	d019      	beq.n	12806 <conf_value_from_str+0x78>
        strcpy(vp, val_str);
        break;
    default:
        goto err;
    }
    return 0;
   127d2:	2000      	movs	r0, #0
   127d4:	e032      	b.n	1283c <conf_value_from_str+0xae>
            if (val < 0 || val > 1) {
   127d6:	2801      	cmp	r0, #1
   127d8:	d834      	bhi.n	12844 <conf_value_from_str+0xb6>
            *(bool *)vp = val;
   127da:	3800      	subs	r0, #0
   127dc:	bf18      	it	ne
   127de:	2001      	movne	r0, #1
   127e0:	7030      	strb	r0, [r6, #0]
    return 0;
   127e2:	2000      	movs	r0, #0
   127e4:	e02a      	b.n	1283c <conf_value_from_str+0xae>
            if (val < INT8_MIN || val > UINT8_MAX) {
   127e6:	f100 0380 	add.w	r3, r0, #128	; 0x80
   127ea:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   127ee:	d22b      	bcs.n	12848 <conf_value_from_str+0xba>
            *(int8_t *)vp = val;
   127f0:	7030      	strb	r0, [r6, #0]
    return 0;
   127f2:	2000      	movs	r0, #0
   127f4:	e022      	b.n	1283c <conf_value_from_str+0xae>
            if (val < INT16_MIN || val > UINT16_MAX) {
   127f6:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
   127fa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
   127fe:	d225      	bcs.n	1284c <conf_value_from_str+0xbe>
            *(int16_t *)vp = val;
   12800:	8030      	strh	r0, [r6, #0]
    return 0;
   12802:	2000      	movs	r0, #0
   12804:	e01a      	b.n	1283c <conf_value_from_str+0xae>
            *(int32_t *)vp = val;
   12806:	6030      	str	r0, [r6, #0]
    return 0;
   12808:	2000      	movs	r0, #0
   1280a:	e017      	b.n	1283c <conf_value_from_str+0xae>
        val64 = strtoll(val_str, &eptr, 0);
   1280c:	2200      	movs	r2, #0
   1280e:	a901      	add	r1, sp, #4
   12810:	f009 ffa2 	bl	1c758 <strtoll>
        if (*eptr != '\0') {
   12814:	9b01      	ldr	r3, [sp, #4]
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	b9d3      	cbnz	r3, 12850 <conf_value_from_str+0xc2>
        *(int64_t *)vp = val64;
   1281a:	6030      	str	r0, [r6, #0]
   1281c:	6071      	str	r1, [r6, #4]
    return 0;
   1281e:	2000      	movs	r0, #0
        break;
   12820:	e00c      	b.n	1283c <conf_value_from_str+0xae>
        val = strlen(val_str);
   12822:	f009 ff5d 	bl	1c6e0 <strlen>
        if (val + 1 > maxlen) {
   12826:	42a8      	cmp	r0, r5
   12828:	da14      	bge.n	12854 <conf_value_from_str+0xc6>
        strcpy(vp, val_str);
   1282a:	4639      	mov	r1, r7
   1282c:	4630      	mov	r0, r6
   1282e:	f009 ff4c 	bl	1c6ca <strcpy>
    return 0;
   12832:	2000      	movs	r0, #0
        break;
   12834:	e002      	b.n	1283c <conf_value_from_str+0xae>
err:
    return OS_INVALID_PARM;
   12836:	2003      	movs	r0, #3
}
   12838:	4770      	bx	lr
    switch (type) {
   1283a:	2003      	movs	r0, #3
}
   1283c:	b003      	add	sp, #12
   1283e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return OS_INVALID_PARM;
   12840:	2003      	movs	r0, #3
   12842:	e7fb      	b.n	1283c <conf_value_from_str+0xae>
   12844:	2003      	movs	r0, #3
   12846:	e7f9      	b.n	1283c <conf_value_from_str+0xae>
   12848:	2003      	movs	r0, #3
   1284a:	e7f7      	b.n	1283c <conf_value_from_str+0xae>
   1284c:	2003      	movs	r0, #3
   1284e:	e7f5      	b.n	1283c <conf_value_from_str+0xae>
   12850:	2003      	movs	r0, #3
   12852:	e7f3      	b.n	1283c <conf_value_from_str+0xae>
   12854:	2003      	movs	r0, #3
   12856:	e7f1      	b.n	1283c <conf_value_from_str+0xae>

00012858 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
   12858:	468c      	mov	ip, r1
    int32_t val;

    if (type == CONF_STRING) {
   1285a:	2806      	cmp	r0, #6
   1285c:	d02f      	beq.n	128be <conf_str_from_value+0x66>
{
   1285e:	b510      	push	{r4, lr}
   12860:	b082      	sub	sp, #8
   12862:	4614      	mov	r4, r2
   12864:	4619      	mov	r1, r3
        return vp;
    }
    switch (type) {
   12866:	2805      	cmp	r0, #5
   12868:	d01f      	beq.n	128aa <conf_str_from_value+0x52>
   1286a:	d903      	bls.n	12874 <conf_str_from_value+0x1c>
   1286c:	280a      	cmp	r0, #10
   1286e:	d005      	beq.n	1287c <conf_str_from_value+0x24>
   12870:	2000      	movs	r0, #0
   12872:	e027      	b.n	128c4 <conf_str_from_value+0x6c>
   12874:	1e83      	subs	r3, r0, #2
   12876:	b2db      	uxtb	r3, r3
   12878:	2b02      	cmp	r3, #2
   1287a:	d822      	bhi.n	128c2 <conf_str_from_value+0x6a>
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
   1287c:	280a      	cmp	r0, #10
   1287e:	d006      	beq.n	1288e <conf_str_from_value+0x36>
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
   12880:	2802      	cmp	r0, #2
   12882:	d00c      	beq.n	1289e <conf_str_from_value+0x46>
            val = *(int8_t *)vp;
        } else if (type == CONF_INT16) {
   12884:	2803      	cmp	r0, #3
   12886:	d00d      	beq.n	128a4 <conf_str_from_value+0x4c>
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
   12888:	f8dc 3000 	ldr.w	r3, [ip]
   1288c:	e001      	b.n	12892 <conf_str_from_value+0x3a>
            val = *(bool *)vp;
   1288e:	f89c 3000 	ldrb.w	r3, [ip]
        }
        snprintf(buf, buf_len, "%ld", (long)val);
   12892:	4a0d      	ldr	r2, [pc, #52]	; (128c8 <conf_str_from_value+0x70>)
   12894:	4620      	mov	r0, r4
   12896:	f7ff fa2c 	bl	11cf2 <snprintf>
        return buf;
   1289a:	4620      	mov	r0, r4
   1289c:	e012      	b.n	128c4 <conf_str_from_value+0x6c>
            val = *(int8_t *)vp;
   1289e:	f99c 3000 	ldrsb.w	r3, [ip]
   128a2:	e7f6      	b.n	12892 <conf_str_from_value+0x3a>
            val = *(int16_t *)vp;
   128a4:	f9bc 3000 	ldrsh.w	r3, [ip]
   128a8:	e7f3      	b.n	12892 <conf_str_from_value+0x3a>
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
   128aa:	e9dc 2300 	ldrd	r2, r3, [ip]
   128ae:	e9cd 2300 	strd	r2, r3, [sp]
   128b2:	4a06      	ldr	r2, [pc, #24]	; (128cc <conf_str_from_value+0x74>)
   128b4:	4620      	mov	r0, r4
   128b6:	f7ff fa1c 	bl	11cf2 <snprintf>
        return buf;
   128ba:	4620      	mov	r0, r4
   128bc:	e002      	b.n	128c4 <conf_str_from_value+0x6c>
        return vp;
   128be:	4608      	mov	r0, r1
    default:
        return NULL;
    }
}
   128c0:	4770      	bx	lr
    switch (type) {
   128c2:	2000      	movs	r0, #0
}
   128c4:	b002      	add	sp, #8
   128c6:	bd10      	pop	{r4, pc}
   128c8:	00023c08 	.word	0x00023c08
   128cc:	00023c0c 	.word	0x00023c0c

000128d0 <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
   128d0:	b530      	push	{r4, r5, lr}
   128d2:	b08b      	sub	sp, #44	; 0x2c
   128d4:	4604      	mov	r4, r0
   128d6:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   128d8:	f7ff ff02 	bl	126e0 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   128dc:	aa01      	add	r2, sp, #4
   128de:	a909      	add	r1, sp, #36	; 0x24
   128e0:	4620      	mov	r0, r4
   128e2:	f7ff ff49 	bl	12778 <conf_parse_and_lookup>
    if (!ch) {
   128e6:	b158      	cbz	r0, 12900 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
   128e8:	68c3      	ldr	r3, [r0, #12]
   128ea:	462a      	mov	r2, r5
   128ec:	a902      	add	r1, sp, #8
   128ee:	9809      	ldr	r0, [sp, #36]	; 0x24
   128f0:	3801      	subs	r0, #1
   128f2:	4798      	blx	r3
   128f4:	4604      	mov	r4, r0
out:
    conf_unlock();
   128f6:	f7ff fefd 	bl	126f4 <conf_unlock>
    return rc;
}
   128fa:	4620      	mov	r0, r4
   128fc:	b00b      	add	sp, #44	; 0x2c
   128fe:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   12900:	2403      	movs	r4, #3
   12902:	e7f8      	b.n	128f6 <conf_set_value+0x26>

00012904 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   12904:	b570      	push	{r4, r5, r6, lr}
   12906:	b08a      	sub	sp, #40	; 0x28
   12908:	4604      	mov	r4, r0
   1290a:	460d      	mov	r5, r1
   1290c:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   1290e:	f7ff fee7 	bl	126e0 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   12912:	aa01      	add	r2, sp, #4
   12914:	a909      	add	r1, sp, #36	; 0x24
   12916:	4620      	mov	r0, r4
   12918:	f7ff ff2e 	bl	12778 <conf_parse_and_lookup>
    if (!ch) {
   1291c:	4604      	mov	r4, r0
   1291e:	b140      	cbz	r0, 12932 <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
   12920:	6884      	ldr	r4, [r0, #8]
   12922:	b15c      	cbz	r4, 1293c <conf_get_value+0x38>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
   12924:	4633      	mov	r3, r6
   12926:	462a      	mov	r2, r5
   12928:	a902      	add	r1, sp, #8
   1292a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1292c:	3801      	subs	r0, #1
   1292e:	47a0      	blx	r4
   12930:	4604      	mov	r4, r0
out:
    conf_unlock();
   12932:	f7ff fedf 	bl	126f4 <conf_unlock>
    return rval;
}
   12936:	4620      	mov	r0, r4
   12938:	b00a      	add	sp, #40	; 0x28
   1293a:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
   1293c:	2400      	movs	r4, #0
   1293e:	e7f8      	b.n	12932 <conf_get_value+0x2e>

00012940 <conf_commit>:

int
conf_commit(char *name)
{
   12940:	b530      	push	{r4, r5, lr}
   12942:	b08b      	sub	sp, #44	; 0x2c
   12944:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   12946:	f7ff fecb 	bl	126e0 <conf_lock>
    if (name) {
   1294a:	b174      	cbz	r4, 1296a <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   1294c:	aa01      	add	r2, sp, #4
   1294e:	a909      	add	r1, sp, #36	; 0x24
   12950:	4620      	mov	r0, r4
   12952:	f7ff ff11 	bl	12778 <conf_parse_and_lookup>
        if (!ch) {
   12956:	b1b8      	cbz	r0, 12988 <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
   12958:	6903      	ldr	r3, [r0, #16]
   1295a:	b1bb      	cbz	r3, 1298c <conf_commit+0x4c>
            rc = ch->ch_commit();
   1295c:	4798      	blx	r3
   1295e:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   12960:	f7ff fec8 	bl	126f4 <conf_unlock>
    return rc;
}
   12964:	4628      	mov	r0, r5
   12966:	b00b      	add	sp, #44	; 0x2c
   12968:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1296a:	4b09      	ldr	r3, [pc, #36]	; (12990 <conf_commit+0x50>)
   1296c:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   1296e:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   12970:	e000      	b.n	12974 <conf_commit+0x34>
   12972:	6824      	ldr	r4, [r4, #0]
   12974:	2c00      	cmp	r4, #0
   12976:	d0f3      	beq.n	12960 <conf_commit+0x20>
            if (ch->ch_commit) {
   12978:	6923      	ldr	r3, [r4, #16]
   1297a:	2b00      	cmp	r3, #0
   1297c:	d0f9      	beq.n	12972 <conf_commit+0x32>
                rc2 = ch->ch_commit();
   1297e:	4798      	blx	r3
                if (!rc) {
   12980:	2d00      	cmp	r5, #0
   12982:	d1f6      	bne.n	12972 <conf_commit+0x32>
                    rc = rc2;
   12984:	4605      	mov	r5, r0
   12986:	e7f4      	b.n	12972 <conf_commit+0x32>
            rc = OS_INVALID_PARM;
   12988:	2503      	movs	r5, #3
   1298a:	e7e9      	b.n	12960 <conf_commit+0x20>
            rc = 0;
   1298c:	2500      	movs	r5, #0
   1298e:	e7e7      	b.n	12960 <conf_commit+0x20>
   12990:	20005fe4 	.word	0x20005fe4

00012994 <conf_running_one>:
};

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
   12994:	b508      	push	{r3, lr}
    console_printf("%s = %s\n", name, val ? val : "<del>");
   12996:	460a      	mov	r2, r1
   12998:	b121      	cbz	r1, 129a4 <conf_running_one+0x10>
   1299a:	4601      	mov	r1, r0
   1299c:	4802      	ldr	r0, [pc, #8]	; (129a8 <conf_running_one+0x14>)
   1299e:	f000 fe73 	bl	13688 <console_printf>
}
   129a2:	bd08      	pop	{r3, pc}
    console_printf("%s = %s\n", name, val ? val : "<del>");
   129a4:	4a01      	ldr	r2, [pc, #4]	; (129ac <conf_running_one+0x18>)
   129a6:	e7f8      	b.n	1299a <conf_running_one+0x6>
   129a8:	00023c1c 	.word	0x00023c1c
   129ac:	00023c14 	.word	0x00023c14

000129b0 <conf_dump_running>:

static void
conf_dump_running(void)
{
   129b0:	b510      	push	{r4, lr}
    struct conf_handler *ch;

    conf_lock();
   129b2:	f7ff fe95 	bl	126e0 <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   129b6:	4b07      	ldr	r3, [pc, #28]	; (129d4 <conf_dump_running+0x24>)
   129b8:	681c      	ldr	r4, [r3, #0]
   129ba:	e003      	b.n	129c4 <conf_dump_running+0x14>
        if (ch->ch_export) {
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   129bc:	2101      	movs	r1, #1
   129be:	4806      	ldr	r0, [pc, #24]	; (129d8 <conf_dump_running+0x28>)
   129c0:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   129c2:	6824      	ldr	r4, [r4, #0]
   129c4:	b11c      	cbz	r4, 129ce <conf_dump_running+0x1e>
        if (ch->ch_export) {
   129c6:	6963      	ldr	r3, [r4, #20]
   129c8:	2b00      	cmp	r3, #0
   129ca:	d1f7      	bne.n	129bc <conf_dump_running+0xc>
   129cc:	e7f9      	b.n	129c2 <conf_dump_running+0x12>
        }
    }
    conf_unlock();
   129ce:	f7ff fe91 	bl	126f4 <conf_unlock>
}
   129d2:	bd10      	pop	{r4, pc}
   129d4:	20005fe4 	.word	0x20005fe4
   129d8:	00012995 	.word	0x00012995

000129dc <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
   129dc:	b530      	push	{r4, r5, lr}
   129de:	b0c3      	sub	sp, #268	; 0x10c
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
   129e0:	2802      	cmp	r0, #2
   129e2:	d007      	beq.n	129f4 <shell_conf_command+0x18>
   129e4:	2803      	cmp	r0, #3
   129e6:	d022      	beq.n	12a2e <shell_conf_command+0x52>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
   129e8:	4826      	ldr	r0, [pc, #152]	; (12a84 <shell_conf_command+0xa8>)
   129ea:	f000 fe4d 	bl	13688 <console_printf>
    return 0;
}
   129ee:	2000      	movs	r0, #0
   129f0:	b043      	add	sp, #268	; 0x10c
   129f2:	bd30      	pop	{r4, r5, pc}
        name = argv[1];
   129f4:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
   129f6:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
   129f8:	4923      	ldr	r1, [pc, #140]	; (12a88 <shell_conf_command+0xac>)
   129fa:	4620      	mov	r0, r4
   129fc:	f7fe fd6a 	bl	114d4 <strcmp>
   12a00:	b1c0      	cbz	r0, 12a34 <shell_conf_command+0x58>
        if (!strcmp(name, "dump")) {
   12a02:	4922      	ldr	r1, [pc, #136]	; (12a8c <shell_conf_command+0xb0>)
   12a04:	4620      	mov	r0, r4
   12a06:	f7fe fd65 	bl	114d4 <strcmp>
   12a0a:	b1f0      	cbz	r0, 12a4a <shell_conf_command+0x6e>
            if (!strcmp(name, "save")) {
   12a0c:	4920      	ldr	r1, [pc, #128]	; (12a90 <shell_conf_command+0xb4>)
   12a0e:	4620      	mov	r0, r4
   12a10:	f7fe fd60 	bl	114d4 <strcmp>
   12a14:	b318      	cbz	r0, 12a5e <shell_conf_command+0x82>
    if (!val) {
   12a16:	b32d      	cbz	r5, 12a64 <shell_conf_command+0x88>
        rc = conf_set_value(name, val);
   12a18:	4629      	mov	r1, r5
   12a1a:	4620      	mov	r0, r4
   12a1c:	f7ff ff58 	bl	128d0 <conf_set_value>
        if (rc) {
   12a20:	4601      	mov	r1, r0
   12a22:	2800      	cmp	r0, #0
   12a24:	d0e3      	beq.n	129ee <shell_conf_command+0x12>
            console_printf("Failed to set, err: %d\n", rc);
   12a26:	481b      	ldr	r0, [pc, #108]	; (12a94 <shell_conf_command+0xb8>)
   12a28:	f000 fe2e 	bl	13688 <console_printf>
            goto err;
   12a2c:	e7dc      	b.n	129e8 <shell_conf_command+0xc>
        name = argv[1];
   12a2e:	684c      	ldr	r4, [r1, #4]
        val = argv[2];
   12a30:	688d      	ldr	r5, [r1, #8]
        break;
   12a32:	e7e1      	b.n	129f8 <shell_conf_command+0x1c>
        rc = conf_commit(val);
   12a34:	4628      	mov	r0, r5
   12a36:	f7ff ff83 	bl	12940 <conf_commit>
        if (rc) {
   12a3a:	b120      	cbz	r0, 12a46 <shell_conf_command+0x6a>
            val = "Failed to commit\n";
   12a3c:	4916      	ldr	r1, [pc, #88]	; (12a98 <shell_conf_command+0xbc>)
        console_printf("%s", val);
   12a3e:	4817      	ldr	r0, [pc, #92]	; (12a9c <shell_conf_command+0xc0>)
   12a40:	f000 fe22 	bl	13688 <console_printf>
        return 0;
   12a44:	e7d3      	b.n	129ee <shell_conf_command+0x12>
            val = "Done\n";
   12a46:	4916      	ldr	r1, [pc, #88]	; (12aa0 <shell_conf_command+0xc4>)
   12a48:	e7f9      	b.n	12a3e <shell_conf_command+0x62>
            if (!val || !strcmp(val, "running")) {
   12a4a:	b12d      	cbz	r5, 12a58 <shell_conf_command+0x7c>
   12a4c:	4915      	ldr	r1, [pc, #84]	; (12aa4 <shell_conf_command+0xc8>)
   12a4e:	4628      	mov	r0, r5
   12a50:	f7fe fd40 	bl	114d4 <strcmp>
   12a54:	2800      	cmp	r0, #0
   12a56:	d1ca      	bne.n	129ee <shell_conf_command+0x12>
                conf_dump_running();
   12a58:	f7ff ffaa 	bl	129b0 <conf_dump_running>
            return 0;
   12a5c:	e7c7      	b.n	129ee <shell_conf_command+0x12>
                conf_save();
   12a5e:	f7ff fdd5 	bl	1260c <conf_save>
                return 0;
   12a62:	e7c4      	b.n	129ee <shell_conf_command+0x12>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
   12a64:	f240 1201 	movw	r2, #257	; 0x101
   12a68:	a901      	add	r1, sp, #4
   12a6a:	4620      	mov	r0, r4
   12a6c:	f7ff ff4a 	bl	12904 <conf_get_value>
        if (!val) {
   12a70:	4601      	mov	r1, r0
   12a72:	b118      	cbz	r0, 12a7c <shell_conf_command+0xa0>
        console_printf("%s\n", val);
   12a74:	480c      	ldr	r0, [pc, #48]	; (12aa8 <shell_conf_command+0xcc>)
   12a76:	f000 fe07 	bl	13688 <console_printf>
   12a7a:	e7b8      	b.n	129ee <shell_conf_command+0x12>
            console_printf("Cannot display value\n");
   12a7c:	480b      	ldr	r0, [pc, #44]	; (12aac <shell_conf_command+0xd0>)
   12a7e:	f000 fe03 	bl	13688 <console_printf>
            goto err;
   12a82:	e7b1      	b.n	129e8 <shell_conf_command+0xc>
   12a84:	00023c98 	.word	0x00023c98
   12a88:	00023c44 	.word	0x00023c44
   12a8c:	00023c50 	.word	0x00023c50
   12a90:	00023c60 	.word	0x00023c60
   12a94:	00023c80 	.word	0x00023c80
   12a98:	00023c30 	.word	0x00023c30
   12a9c:	00023c4c 	.word	0x00023c4c
   12aa0:	00023c28 	.word	0x00023c28
   12aa4:	00023c58 	.word	0x00023c58
   12aa8:	00023fa0 	.word	0x00023fa0
   12aac:	00023c68 	.word	0x00023c68

00012ab0 <conf_cli_register>:

int
conf_cli_register(void)
{
   12ab0:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_conf_cmd);
   12ab2:	4802      	ldr	r0, [pc, #8]	; (12abc <conf_cli_register+0xc>)
   12ab4:	f001 fcd8 	bl	14468 <shell_cmd_register>
}
   12ab8:	bd08      	pop	{r3, pc}
   12aba:	bf00      	nop
   12abc:	200013e0 	.word	0x200013e0

00012ac0 <conf_nmgr_write>:
    return 0;
}

static int
conf_nmgr_write(struct mgmt_cbuf *cb)
{
   12ac0:	b570      	push	{r4, r5, r6, lr}
   12ac2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   12ac6:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
   12ac8:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
   12acc:	2400      	movs	r4, #0
   12ace:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
   12ad2:	22c0      	movs	r2, #192	; 0xc0
   12ad4:	4621      	mov	r1, r4
   12ad6:	4668      	mov	r0, sp
   12ad8:	f7fe fcdb 	bl	11492 <memset>
   12adc:	4b23      	ldr	r3, [pc, #140]	; (12b6c <conf_nmgr_write+0xac>)
   12ade:	9300      	str	r3, [sp, #0]
   12ae0:	2304      	movs	r3, #4
   12ae2:	f88d 3004 	strb.w	r3, [sp, #4]
   12ae6:	aa72      	add	r2, sp, #456	; 0x1c8
   12ae8:	9202      	str	r2, [sp, #8]
   12aea:	2240      	movs	r2, #64	; 0x40
   12aec:	920a      	str	r2, [sp, #40]	; 0x28
   12aee:	4a20      	ldr	r2, [pc, #128]	; (12b70 <conf_nmgr_write+0xb0>)
   12af0:	920c      	str	r2, [sp, #48]	; 0x30
   12af2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   12af6:	ab32      	add	r3, sp, #200	; 0xc8
   12af8:	930e      	str	r3, [sp, #56]	; 0x38
   12afa:	f44f 7280 	mov.w	r2, #256	; 0x100
   12afe:	9216      	str	r2, [sp, #88]	; 0x58
   12b00:	4a1c      	ldr	r2, [pc, #112]	; (12b74 <conf_nmgr_write+0xb4>)
   12b02:	9218      	str	r2, [sp, #96]	; 0x60
   12b04:	2205      	movs	r2, #5
   12b06:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
   12b0a:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
   12b0c:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
   12b10:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
   12b14:	4669      	mov	r1, sp
   12b16:	f105 001c 	add.w	r0, r5, #28
   12b1a:	f003 ffa7 	bl	16a6c <cbor_read_object>
    if (rc) {
   12b1e:	b9f8      	cbnz	r0, 12b60 <conf_nmgr_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
   12b20:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
   12b24:	b13b      	cbz	r3, 12b36 <conf_nmgr_write+0x76>
        if (val_str[0] != '\0') {
   12b26:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
   12b2a:	b173      	cbz	r3, 12b4a <conf_nmgr_write+0x8a>
            rc = conf_set_value(name_str, val_str);
   12b2c:	a932      	add	r1, sp, #200	; 0xc8
   12b2e:	a872      	add	r0, sp, #456	; 0x1c8
   12b30:	f7ff fece 	bl	128d0 <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
   12b34:	b9b0      	cbnz	r0, 12b64 <conf_nmgr_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
   12b36:	2000      	movs	r0, #0
   12b38:	f7ff ff02 	bl	12940 <conf_commit>
    if (rc) {
   12b3c:	b9a0      	cbnz	r0, 12b68 <conf_nmgr_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
   12b3e:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
   12b42:	b93b      	cbnz	r3, 12b54 <conf_nmgr_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
   12b44:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   12b48:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
   12b4a:	2100      	movs	r1, #0
   12b4c:	a872      	add	r0, sp, #456	; 0x1c8
   12b4e:	f7ff febf 	bl	128d0 <conf_set_value>
   12b52:	e7ef      	b.n	12b34 <conf_nmgr_write+0x74>
        rc = conf_save();
   12b54:	f7ff fd5a 	bl	1260c <conf_save>
        if (rc) {
   12b58:	2800      	cmp	r0, #0
   12b5a:	d0f3      	beq.n	12b44 <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
   12b5c:	2003      	movs	r0, #3
   12b5e:	e7f1      	b.n	12b44 <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
   12b60:	2003      	movs	r0, #3
   12b62:	e7ef      	b.n	12b44 <conf_nmgr_write+0x84>
            return MGMT_ERR_EINVAL;
   12b64:	2003      	movs	r0, #3
   12b66:	e7ed      	b.n	12b44 <conf_nmgr_write+0x84>
        return MGMT_ERR_EINVAL;
   12b68:	2003      	movs	r0, #3
   12b6a:	e7eb      	b.n	12b44 <conf_nmgr_write+0x84>
   12b6c:	000258b8 	.word	0x000258b8
   12b70:	00023cb0 	.word	0x00023cb0
   12b74:	00023c60 	.word	0x00023c60

00012b78 <conf_nmgr_read>:
{
   12b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b7a:	b0e9      	sub	sp, #420	; 0x1a4
   12b7c:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
   12b7e:	2260      	movs	r2, #96	; 0x60
   12b80:	2100      	movs	r1, #0
   12b82:	4668      	mov	r0, sp
   12b84:	f7fe fc85 	bl	11492 <memset>
   12b88:	4b19      	ldr	r3, [pc, #100]	; (12bf0 <conf_nmgr_read+0x78>)
   12b8a:	9300      	str	r3, [sp, #0]
   12b8c:	2304      	movs	r3, #4
   12b8e:	f88d 3004 	strb.w	r3, [sp, #4]
   12b92:	ab58      	add	r3, sp, #352	; 0x160
   12b94:	9302      	str	r3, [sp, #8]
   12b96:	2340      	movs	r3, #64	; 0x40
   12b98:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
   12b9a:	4669      	mov	r1, sp
   12b9c:	f104 001c 	add.w	r0, r4, #28
   12ba0:	f003 ff64 	bl	16a6c <cbor_read_object>
    if (rc) {
   12ba4:	b9e8      	cbnz	r0, 12be2 <conf_nmgr_read+0x6a>
   12ba6:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
   12ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
   12bac:	a918      	add	r1, sp, #96	; 0x60
   12bae:	a858      	add	r0, sp, #352	; 0x160
   12bb0:	f7ff fea8 	bl	12904 <conf_get_value>
    if (!val) {
   12bb4:	4607      	mov	r7, r0
   12bb6:	b1b0      	cbz	r0, 12be6 <conf_nmgr_read+0x6e>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "val");
   12bb8:	340c      	adds	r4, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   12bba:	2203      	movs	r2, #3
   12bbc:	490d      	ldr	r1, [pc, #52]	; (12bf4 <conf_nmgr_read+0x7c>)
   12bbe:	4620      	mov	r0, r4
   12bc0:	f004 f93b 	bl	16e3a <cbor_encode_text_string>
   12bc4:	4606      	mov	r6, r0
   12bc6:	4638      	mov	r0, r7
   12bc8:	f009 fd8a 	bl	1c6e0 <strlen>
   12bcc:	4602      	mov	r2, r0
   12bce:	4639      	mov	r1, r7
   12bd0:	4620      	mov	r0, r4
   12bd2:	f004 f932 	bl	16e3a <cbor_encode_text_string>
    if (g_err) {
   12bd6:	ea50 0306 	orrs.w	r3, r0, r6
   12bda:	d106      	bne.n	12bea <conf_nmgr_read+0x72>
}
   12bdc:	4628      	mov	r0, r5
   12bde:	b069      	add	sp, #420	; 0x1a4
   12be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
   12be2:	2503      	movs	r5, #3
   12be4:	e7fa      	b.n	12bdc <conf_nmgr_read+0x64>
        return MGMT_ERR_EINVAL;
   12be6:	2503      	movs	r5, #3
   12be8:	e7f8      	b.n	12bdc <conf_nmgr_read+0x64>
        return MGMT_ERR_ENOMEM;
   12bea:	2502      	movs	r5, #2
   12bec:	e7f6      	b.n	12bdc <conf_nmgr_read+0x64>
   12bee:	bf00      	nop
   12bf0:	000258b8 	.word	0x000258b8
   12bf4:	00023cb0 	.word	0x00023cb0

00012bf8 <conf_nmgr_register>:

int
conf_nmgr_register(void)
{
   12bf8:	b508      	push	{r3, lr}
    return mgmt_group_register(&conf_nmgr_group);
   12bfa:	4802      	ldr	r0, [pc, #8]	; (12c04 <conf_nmgr_register+0xc>)
   12bfc:	f00a fcca 	bl	1d594 <mgmt_group_register>
}
   12c00:	bd08      	pop	{r3, pc}
   12c02:	bf00      	nop
   12c04:	200013f0 	.word	0x200013f0

00012c08 <ring_buf_next>:
}

static uint8_t
ring_buf_next(uint8_t i, uint8_t size)
{
    return (uint8_t) ((i + 1) % size);
   12c08:	3001      	adds	r0, #1
   12c0a:	fb90 f3f1 	sdiv	r3, r0, r1
   12c0e:	fb01 0013 	mls	r0, r1, r3, r0
}
   12c12:	b2c0      	uxtb	r0, r0
   12c14:	4770      	bx	lr

00012c16 <ring_buf_prev>:

static uint8_t
ring_buf_prev(uint8_t i, uint8_t size)
{
    return i == 0 ? i = size - 1 : --i;
   12c16:	b910      	cbnz	r0, 12c1e <ring_buf_prev+0x8>
   12c18:	3901      	subs	r1, #1
   12c1a:	b2c8      	uxtb	r0, r1
   12c1c:	4770      	bx	lr
   12c1e:	3801      	subs	r0, #1
   12c20:	b2c0      	uxtb	r0, r0
}
   12c22:	4770      	bx	lr

00012c24 <console_hist_is_full>:

static bool
console_hist_is_full(void)
{
   12c24:	b510      	push	{r4, lr}
    struct console_hist *sh = &console_hist;

    return ring_buf_next(sh->head, sh->size) == sh->tail;
   12c26:	4c05      	ldr	r4, [pc, #20]	; (12c3c <console_hist_is_full+0x18>)
   12c28:	78a1      	ldrb	r1, [r4, #2]
   12c2a:	7820      	ldrb	r0, [r4, #0]
   12c2c:	f7ff ffec 	bl	12c08 <ring_buf_next>
   12c30:	7863      	ldrb	r3, [r4, #1]
}
   12c32:	4298      	cmp	r0, r3
   12c34:	bf14      	ite	ne
   12c36:	2000      	movne	r0, #0
   12c38:	2001      	moveq	r0, #1
   12c3a:	bd10      	pop	{r4, pc}
   12c3c:	20006014 	.word	0x20006014

00012c40 <handle_nlip>:
}

static int
handle_nlip(uint8_t byte)
{
    if (((nlip_state & NLIP_PKT_START1) &&
   12c40:	4b13      	ldr	r3, [pc, #76]	; (12c90 <handle_nlip+0x50>)
   12c42:	681b      	ldr	r3, [r3, #0]
   12c44:	f003 0203 	and.w	r2, r3, #3
   12c48:	2a03      	cmp	r2, #3
   12c4a:	d01d      	beq.n	12c88 <handle_nlip+0x48>
         (nlip_state & NLIP_PKT_START2)) ||
        ((nlip_state & NLIP_DATA_START1) &&
   12c4c:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
   12c50:	2a0c      	cmp	r2, #12
   12c52:	d01b      	beq.n	12c8c <handle_nlip+0x4c>
         (nlip_state & NLIP_DATA_START2)))
    {
        return 1;
    }

    if ((nlip_state & NLIP_PKT_START1) &&
   12c54:	f013 0f01 	tst.w	r3, #1
   12c58:	d001      	beq.n	12c5e <handle_nlip+0x1e>
   12c5a:	2809      	cmp	r0, #9
   12c5c:	d008      	beq.n	12c70 <handle_nlip+0x30>
        (byte == CONSOLE_NLIP_PKT_START2)) {
        nlip_state |= NLIP_PKT_START2;
        return 1;
    } else if ((nlip_state & NLIP_DATA_START1) &&
   12c5e:	f013 0f04 	tst.w	r3, #4
   12c62:	d001      	beq.n	12c68 <handle_nlip+0x28>
   12c64:	2814      	cmp	r0, #20
   12c66:	d009      	beq.n	12c7c <handle_nlip+0x3c>
               (byte == CONSOLE_NLIP_DATA_START2)) {
        nlip_state |= NLIP_DATA_START2;
        return 1;
    } else {
        nlip_state = 0;
   12c68:	2000      	movs	r0, #0
   12c6a:	4b09      	ldr	r3, [pc, #36]	; (12c90 <handle_nlip+0x50>)
   12c6c:	6018      	str	r0, [r3, #0]
        return 0;
   12c6e:	4770      	bx	lr
        nlip_state |= NLIP_PKT_START2;
   12c70:	f043 0302 	orr.w	r3, r3, #2
   12c74:	4a06      	ldr	r2, [pc, #24]	; (12c90 <handle_nlip+0x50>)
   12c76:	6013      	str	r3, [r2, #0]
        return 1;
   12c78:	2001      	movs	r0, #1
   12c7a:	4770      	bx	lr
        nlip_state |= NLIP_DATA_START2;
   12c7c:	f043 0308 	orr.w	r3, r3, #8
   12c80:	4a03      	ldr	r2, [pc, #12]	; (12c90 <handle_nlip+0x50>)
   12c82:	6013      	str	r3, [r2, #0]
        return 1;
   12c84:	2001      	movs	r0, #1
   12c86:	4770      	bx	lr
        return 1;
   12c88:	2001      	movs	r0, #1
   12c8a:	4770      	bx	lr
   12c8c:	2001      	movs	r0, #1
    }
}
   12c8e:	4770      	bx	lr
   12c90:	20006864 	.word	0x20006864

00012c94 <trim_whitespace>:
{
   12c94:	b570      	push	{r4, r5, r6, lr}
   12c96:	4604      	mov	r4, r0
   12c98:	4615      	mov	r5, r2
    if (len == 0) {
   12c9a:	460e      	mov	r6, r1
   12c9c:	b909      	cbnz	r1, 12ca2 <trim_whitespace+0xe>
   12c9e:	e02c      	b.n	12cfa <trim_whitespace+0x66>
        str++;
   12ca0:	3401      	adds	r4, #1
    while (isspace((unsigned char)*str)) {
   12ca2:	7823      	ldrb	r3, [r4, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   12ca4:	2b20      	cmp	r3, #32
   12ca6:	d0fb      	beq.n	12ca0 <trim_whitespace+0xc>
   12ca8:	2b0a      	cmp	r3, #10
   12caa:	d0f9      	beq.n	12ca0 <trim_whitespace+0xc>
   12cac:	2b09      	cmp	r3, #9
   12cae:	d0f7      	beq.n	12ca0 <trim_whitespace+0xc>
   12cb0:	2b0d      	cmp	r3, #13
   12cb2:	d0f5      	beq.n	12ca0 <trim_whitespace+0xc>
    if (*str == 0) { /* All spaces? */
   12cb4:	b12b      	cbz	r3, 12cc2 <trim_whitespace+0x2e>
    end = str + strlen(str) - 1;
   12cb6:	4620      	mov	r0, r4
   12cb8:	f009 fd12 	bl	1c6e0 <strlen>
   12cbc:	1e43      	subs	r3, r0, #1
   12cbe:	4423      	add	r3, r4
    while (end > str && isspace((unsigned char)*end)) {
   12cc0:	e003      	b.n	12cca <trim_whitespace+0x36>
        *out = 0;
   12cc2:	702b      	strb	r3, [r5, #0]
        return 0;
   12cc4:	461e      	mov	r6, r3
   12cc6:	e018      	b.n	12cfa <trim_whitespace+0x66>
        end--;
   12cc8:	3b01      	subs	r3, #1
    while (end > str && isspace((unsigned char)*end)) {
   12cca:	429c      	cmp	r4, r3
   12ccc:	d208      	bcs.n	12ce0 <trim_whitespace+0x4c>
   12cce:	781a      	ldrb	r2, [r3, #0]
   12cd0:	2a20      	cmp	r2, #32
   12cd2:	d0f9      	beq.n	12cc8 <trim_whitespace+0x34>
   12cd4:	2a0a      	cmp	r2, #10
   12cd6:	d0f7      	beq.n	12cc8 <trim_whitespace+0x34>
   12cd8:	2a09      	cmp	r2, #9
   12cda:	d0f5      	beq.n	12cc8 <trim_whitespace+0x34>
   12cdc:	2a0d      	cmp	r2, #13
   12cde:	d0f3      	beq.n	12cc8 <trim_whitespace+0x34>
    end++;
   12ce0:	3301      	adds	r3, #1
    out_size = min(end - str, len - 1);
   12ce2:	3e01      	subs	r6, #1
   12ce4:	1b1b      	subs	r3, r3, r4
   12ce6:	429e      	cmp	r6, r3
   12ce8:	bf28      	it	cs
   12cea:	461e      	movcs	r6, r3
    memcpy(out, str, out_size);
   12cec:	4632      	mov	r2, r6
   12cee:	4621      	mov	r1, r4
   12cf0:	4628      	mov	r0, r5
   12cf2:	f7fe fbc1 	bl	11478 <memcpy>
    out[out_size] = 0;
   12cf6:	2300      	movs	r3, #0
   12cf8:	55ab      	strb	r3, [r5, r6]
}
   12cfa:	4630      	mov	r0, r6
   12cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

00012d00 <console_hist_move_to_head>:
{
   12d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d04:	4605      	mov	r5, r0
    curr = sh->tail;
   12d06:	4b1d      	ldr	r3, [pc, #116]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d08:	785c      	ldrb	r4, [r3, #1]
    while (curr != sh->head) {
   12d0a:	e005      	b.n	12d18 <console_hist_move_to_head+0x18>
        curr = ring_buf_next(curr, sh->size);
   12d0c:	4b1b      	ldr	r3, [pc, #108]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d0e:	7899      	ldrb	r1, [r3, #2]
   12d10:	4620      	mov	r0, r4
   12d12:	f7ff ff79 	bl	12c08 <ring_buf_next>
   12d16:	4604      	mov	r4, r0
    while (curr != sh->head) {
   12d18:	4b18      	ldr	r3, [pc, #96]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d1a:	781e      	ldrb	r6, [r3, #0]
   12d1c:	42a6      	cmp	r6, r4
   12d1e:	d00a      	beq.n	12d36 <console_hist_move_to_head+0x36>
        if (strcmp(sh->lines[curr], line) == 0) {
   12d20:	4b16      	ldr	r3, [pc, #88]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12d26:	685f      	ldr	r7, [r3, #4]
   12d28:	4629      	mov	r1, r5
   12d2a:	4638      	mov	r0, r7
   12d2c:	f7fe fbd2 	bl	114d4 <strcmp>
   12d30:	2800      	cmp	r0, #0
   12d32:	d1eb      	bne.n	12d0c <console_hist_move_to_head+0xc>
   12d34:	e000      	b.n	12d38 <console_hist_move_to_head+0x38>
    char *match = NULL;
   12d36:	2700      	movs	r7, #0
    if (!match) {
   12d38:	b1f7      	cbz	r7, 12d78 <console_hist_move_to_head+0x78>
    curr = ring_buf_next(curr, sh->size);
   12d3a:	4b10      	ldr	r3, [pc, #64]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d3c:	f893 8002 	ldrb.w	r8, [r3, #2]
   12d40:	4641      	mov	r1, r8
   12d42:	4620      	mov	r0, r4
   12d44:	f7ff ff60 	bl	12c08 <ring_buf_next>
   12d48:	4605      	mov	r5, r0
    while (curr != sh->head) {
   12d4a:	e00c      	b.n	12d66 <console_hist_move_to_head+0x66>
        sh->lines[prev] = sh->lines[curr];
   12d4c:	480b      	ldr	r0, [pc, #44]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d4e:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   12d52:	685b      	ldr	r3, [r3, #4]
   12d54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   12d58:	6043      	str	r3, [r0, #4]
        curr = ring_buf_next(curr, sh->size);
   12d5a:	4641      	mov	r1, r8
   12d5c:	4628      	mov	r0, r5
   12d5e:	f7ff ff53 	bl	12c08 <ring_buf_next>
        prev = curr;
   12d62:	462c      	mov	r4, r5
        curr = ring_buf_next(curr, sh->size);
   12d64:	4605      	mov	r5, r0
    while (curr != sh->head) {
   12d66:	42ae      	cmp	r6, r5
   12d68:	d1f0      	bne.n	12d4c <console_hist_move_to_head+0x4c>
    sh->lines[prev] = match;
   12d6a:	4804      	ldr	r0, [pc, #16]	; (12d7c <console_hist_move_to_head+0x7c>)
   12d6c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   12d70:	6067      	str	r7, [r4, #4]
    return true;
   12d72:	2001      	movs	r0, #1
}
   12d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   12d78:	2000      	movs	r0, #0
   12d7a:	e7fb      	b.n	12d74 <console_hist_move_to_head+0x74>
   12d7c:	20006014 	.word	0x20006014

00012d80 <console_hist_add>:
{
   12d80:	b510      	push	{r4, lr}
   12d82:	b0c0      	sub	sp, #256	; 0x100
    sh->curr = sh->head;
   12d84:	4b1d      	ldr	r3, [pc, #116]	; (12dfc <console_hist_add+0x7c>)
   12d86:	781a      	ldrb	r2, [r3, #0]
   12d88:	70da      	strb	r2, [r3, #3]
    len = trim_whitespace(line, sizeof(buf), buf);
   12d8a:	466a      	mov	r2, sp
   12d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
   12d90:	f7ff ff80 	bl	12c94 <trim_whitespace>
    if (!len) {
   12d94:	b908      	cbnz	r0, 12d9a <console_hist_add+0x1a>
}
   12d96:	b040      	add	sp, #256	; 0x100
   12d98:	bd10      	pop	{r4, pc}
    if (console_hist_move_to_head(buf)) {
   12d9a:	4668      	mov	r0, sp
   12d9c:	f7ff ffb0 	bl	12d00 <console_hist_move_to_head>
   12da0:	2800      	cmp	r0, #0
   12da2:	d1f8      	bne.n	12d96 <console_hist_add+0x16>
    if (console_hist_is_full()) {
   12da4:	f7ff ff3e 	bl	12c24 <console_hist_is_full>
   12da8:	b198      	cbz	r0, 12dd2 <console_hist_add+0x52>
        assert(sh->lines[sh->head] == NULL);
   12daa:	4a14      	ldr	r2, [pc, #80]	; (12dfc <console_hist_add+0x7c>)
   12dac:	7813      	ldrb	r3, [r2, #0]
   12dae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12db2:	6852      	ldr	r2, [r2, #4]
   12db4:	b9e2      	cbnz	r2, 12df0 <console_hist_add+0x70>
        sh->lines[sh->head] = sh->lines[sh->tail];
   12db6:	4c11      	ldr	r4, [pc, #68]	; (12dfc <console_hist_add+0x7c>)
   12db8:	7860      	ldrb	r0, [r4, #1]
   12dba:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   12dbe:	6851      	ldr	r1, [r2, #4]
   12dc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   12dc4:	6059      	str	r1, [r3, #4]
        sh->lines[sh->tail] = NULL;
   12dc6:	2300      	movs	r3, #0
   12dc8:	6053      	str	r3, [r2, #4]
        sh->tail = ring_buf_next(sh->tail, sh->size);
   12dca:	78a1      	ldrb	r1, [r4, #2]
   12dcc:	f7ff ff1c 	bl	12c08 <ring_buf_next>
   12dd0:	7060      	strb	r0, [r4, #1]
    strcpy(sh->lines[sh->head], buf);
   12dd2:	4c0a      	ldr	r4, [pc, #40]	; (12dfc <console_hist_add+0x7c>)
   12dd4:	7823      	ldrb	r3, [r4, #0]
   12dd6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   12dda:	4669      	mov	r1, sp
   12ddc:	6858      	ldr	r0, [r3, #4]
   12dde:	f009 fc74 	bl	1c6ca <strcpy>
    sh->head = ring_buf_next(sh->head, sh->size);
   12de2:	78a1      	ldrb	r1, [r4, #2]
   12de4:	7820      	ldrb	r0, [r4, #0]
   12de6:	f7ff ff0f 	bl	12c08 <ring_buf_next>
   12dea:	7020      	strb	r0, [r4, #0]
    sh->curr = sh->head;
   12dec:	70e0      	strb	r0, [r4, #3]
   12dee:	e7d2      	b.n	12d96 <console_hist_add+0x16>
        assert(sh->lines[sh->head] == NULL);
   12df0:	2300      	movs	r3, #0
   12df2:	461a      	mov	r2, r3
   12df4:	4619      	mov	r1, r3
   12df6:	4618      	mov	r0, r3
   12df8:	f7fa fab2 	bl	d360 <__assert_func>
   12dfc:	20006014 	.word	0x20006014

00012e00 <console_hist_init>:
{
   12e00:	b510      	push	{r4, lr}
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
   12e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12e06:	2100      	movs	r1, #0
   12e08:	480b      	ldr	r0, [pc, #44]	; (12e38 <console_hist_init+0x38>)
   12e0a:	f7fe fb42 	bl	11492 <memset>
    memset(&console_hist, 0, sizeof(console_hist));
   12e0e:	4c0b      	ldr	r4, [pc, #44]	; (12e3c <console_hist_init+0x3c>)
   12e10:	2228      	movs	r2, #40	; 0x28
   12e12:	2100      	movs	r1, #0
   12e14:	4620      	mov	r0, r4
   12e16:	f7fe fb3c 	bl	11492 <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
   12e1a:	2309      	movs	r3, #9
   12e1c:	70a3      	strb	r3, [r4, #2]
    for (i = 0; i < sh->size - 1; i++) {
   12e1e:	2300      	movs	r3, #0
   12e20:	e007      	b.n	12e32 <console_hist_init+0x32>
        sh->lines[i] = console_hist_lines[i];
   12e22:	4905      	ldr	r1, [pc, #20]	; (12e38 <console_hist_init+0x38>)
   12e24:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   12e28:	4a04      	ldr	r2, [pc, #16]	; (12e3c <console_hist_init+0x3c>)
   12e2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12e2e:	6051      	str	r1, [r2, #4]
    for (i = 0; i < sh->size - 1; i++) {
   12e30:	3301      	adds	r3, #1
   12e32:	2b07      	cmp	r3, #7
   12e34:	ddf5      	ble.n	12e22 <console_hist_init+0x22>
}
   12e36:	bd10      	pop	{r4, pc}
   12e38:	2000603c 	.word	0x2000603c
   12e3c:	20006014 	.word	0x20006014

00012e40 <console_echo>:
    echo = on;
   12e40:	4b01      	ldr	r3, [pc, #4]	; (12e48 <console_echo+0x8>)
   12e42:	6018      	str	r0, [r3, #0]
}
   12e44:	4770      	bx	lr
   12e46:	bf00      	nop
   12e48:	200013fc 	.word	0x200013fc

00012e4c <console_lock>:
{
   12e4c:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   12e4e:	4b0a      	ldr	r3, [pc, #40]	; (12e78 <console_lock+0x2c>)
   12e50:	685b      	ldr	r3, [r3, #4]
   12e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   12e56:	b133      	cbz	r3, 12e66 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   12e58:	4b08      	ldr	r3, [pc, #32]	; (12e7c <console_lock+0x30>)
   12e5a:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   12e5c:	b90b      	cbnz	r3, 12e62 <console_lock+0x16>
    int rc = OS_OK;
   12e5e:	2000      	movs	r0, #0
   12e60:	e007      	b.n	12e72 <console_lock+0x26>
            rc = OS_EBUSY;
   12e62:	200b      	movs	r0, #11
        goto end;
   12e64:	e005      	b.n	12e72 <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   12e66:	4601      	mov	r1, r0
   12e68:	4804      	ldr	r0, [pc, #16]	; (12e7c <console_lock+0x30>)
   12e6a:	f7fb f805 	bl	de78 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   12e6e:	2809      	cmp	r0, #9
   12e70:	d000      	beq.n	12e74 <console_lock+0x28>
}
   12e72:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   12e74:	2000      	movs	r0, #0
    return rc;
   12e76:	e7fc      	b.n	12e72 <console_lock+0x26>
   12e78:	e000ed00 	.word	0xe000ed00
   12e7c:	20006840 	.word	0x20006840

00012e80 <console_unlock>:
{
   12e80:	b508      	push	{r3, lr}
   12e82:	4b0a      	ldr	r3, [pc, #40]	; (12eac <console_unlock+0x2c>)
   12e84:	685b      	ldr	r3, [r3, #4]
   12e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   12e8a:	b10b      	cbz	r3, 12e90 <console_unlock+0x10>
    int rc = OS_OK;
   12e8c:	2000      	movs	r0, #0
}
   12e8e:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   12e90:	4807      	ldr	r0, [pc, #28]	; (12eb0 <console_unlock+0x30>)
   12e92:	f7fa ff95 	bl	ddc0 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   12e96:	2800      	cmp	r0, #0
   12e98:	d0f9      	beq.n	12e8e <console_unlock+0xe>
   12e9a:	2809      	cmp	r0, #9
   12e9c:	d0f7      	beq.n	12e8e <console_unlock+0xe>
   12e9e:	2300      	movs	r3, #0
   12ea0:	461a      	mov	r2, r3
   12ea2:	4619      	mov	r1, r3
   12ea4:	4618      	mov	r0, r3
   12ea6:	f7fa fa5b 	bl	d360 <__assert_func>
   12eaa:	bf00      	nop
   12eac:	e000ed00 	.word	0xe000ed00
   12eb0:	20006840 	.word	0x20006840

00012eb4 <console_out>:
{
   12eb4:	b510      	push	{r4, lr}
   12eb6:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
   12eb8:	2080      	movs	r0, #128	; 0x80
   12eba:	f7ff ffc7 	bl	12e4c <console_lock>
   12ebe:	b108      	cbz	r0, 12ec4 <console_out+0x10>
}
   12ec0:	4620      	mov	r0, r4
   12ec2:	bd10      	pop	{r4, pc}
    rc = console_out_nolock(c);
   12ec4:	4620      	mov	r0, r4
   12ec6:	f000 fc59 	bl	1377c <console_out_nolock>
   12eca:	4604      	mov	r4, r0
    (void)console_unlock();
   12ecc:	f7ff ffd8 	bl	12e80 <console_unlock>
    return rc;
   12ed0:	e7f6      	b.n	12ec0 <console_out+0xc>
	...

00012ed4 <console_append_char>:

static int
console_append_char(char *line, uint8_t byte)
{
   12ed4:	b508      	push	{r3, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   12ed6:	4b0d      	ldr	r3, [pc, #52]	; (12f0c <console_append_char+0x38>)
   12ed8:	881b      	ldrh	r3, [r3, #0]
   12eda:	4a0d      	ldr	r2, [pc, #52]	; (12f10 <console_append_char+0x3c>)
   12edc:	8812      	ldrh	r2, [r2, #0]
   12ede:	4413      	add	r3, r2
   12ee0:	2bfe      	cmp	r3, #254	; 0xfe
   12ee2:	dc0e      	bgt.n	12f02 <console_append_char+0x2e>
        return 0;
    }

    line[cur + end] = byte;
   12ee4:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   12ee6:	b171      	cbz	r1, 12f06 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   12ee8:	4b0a      	ldr	r3, [pc, #40]	; (12f14 <console_append_char+0x40>)
   12eea:	681b      	ldr	r3, [r3, #0]
   12eec:	b92b      	cbnz	r3, 12efa <console_append_char+0x26>
        /* Echo back to console */
        console_out(byte);
    }
    ++cur;
   12eee:	4a07      	ldr	r2, [pc, #28]	; (12f0c <console_append_char+0x38>)
   12ef0:	8813      	ldrh	r3, [r2, #0]
   12ef2:	3301      	adds	r3, #1
   12ef4:	8013      	strh	r3, [r2, #0]
    return 1;
   12ef6:	2001      	movs	r0, #1
}
   12ef8:	bd08      	pop	{r3, pc}
        console_out(byte);
   12efa:	4608      	mov	r0, r1
   12efc:	f7ff ffda 	bl	12eb4 <console_out>
   12f00:	e7f5      	b.n	12eee <console_append_char+0x1a>
        return 0;
   12f02:	2000      	movs	r0, #0
   12f04:	e7f8      	b.n	12ef8 <console_append_char+0x24>
        return 1;
   12f06:	2001      	movs	r0, #1
   12f08:	e7f6      	b.n	12ef8 <console_append_char+0x24>
   12f0a:	bf00      	nop
   12f0c:	2000684c 	.word	0x2000684c
   12f10:	2000684e 	.word	0x2000684e
   12f14:	200013fc 	.word	0x200013fc

00012f18 <console_clear_line>:
{
   12f18:	b508      	push	{r3, lr}
    if (cur) {
   12f1a:	4b0b      	ldr	r3, [pc, #44]	; (12f48 <console_clear_line+0x30>)
   12f1c:	8819      	ldrh	r1, [r3, #0]
   12f1e:	b971      	cbnz	r1, 12f3e <console_clear_line+0x26>
    cur = 0;
   12f20:	2300      	movs	r3, #0
   12f22:	4a09      	ldr	r2, [pc, #36]	; (12f48 <console_clear_line+0x30>)
   12f24:	8013      	strh	r3, [r2, #0]
    end = 0;
   12f26:	4a09      	ldr	r2, [pc, #36]	; (12f4c <console_clear_line+0x34>)
   12f28:	8013      	strh	r3, [r2, #0]
    console_out(ESC);
   12f2a:	201b      	movs	r0, #27
   12f2c:	f7ff ffc2 	bl	12eb4 <console_out>
    console_out('[');
   12f30:	205b      	movs	r0, #91	; 0x5b
   12f32:	f7ff ffbf 	bl	12eb4 <console_out>
    console_out('K');
   12f36:	204b      	movs	r0, #75	; 0x4b
   12f38:	f7ff ffbc 	bl	12eb4 <console_out>
}
   12f3c:	bd08      	pop	{r3, pc}
    console_printf("\x1b[%uD", count);
   12f3e:	4804      	ldr	r0, [pc, #16]	; (12f50 <console_clear_line+0x38>)
   12f40:	f000 fba2 	bl	13688 <console_printf>
}
   12f44:	e7ec      	b.n	12f20 <console_clear_line+0x8>
   12f46:	bf00      	nop
   12f48:	2000684c 	.word	0x2000684c
   12f4c:	2000684e 	.word	0x2000684e
   12f50:	00023cbc 	.word	0x00023cbc

00012f54 <insert_char>:
{
   12f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   12f56:	4b1d      	ldr	r3, [pc, #116]	; (12fcc <insert_char+0x78>)
   12f58:	881b      	ldrh	r3, [r3, #0]
   12f5a:	4413      	add	r3, r2
   12f5c:	2bfe      	cmp	r3, #254	; 0xfe
   12f5e:	dc0b      	bgt.n	12f78 <insert_char+0x24>
   12f60:	4604      	mov	r4, r0
   12f62:	460e      	mov	r6, r1
   12f64:	4615      	mov	r5, r2
    if (echo) {
   12f66:	4b1a      	ldr	r3, [pc, #104]	; (12fd0 <insert_char+0x7c>)
   12f68:	681b      	ldr	r3, [r3, #0]
   12f6a:	b933      	cbnz	r3, 12f7a <insert_char+0x26>
    ++cur;
   12f6c:	4a17      	ldr	r2, [pc, #92]	; (12fcc <insert_char+0x78>)
   12f6e:	8813      	ldrh	r3, [r2, #0]
   12f70:	3301      	adds	r3, #1
   12f72:	8013      	strh	r3, [r2, #0]
    if (end == 0) {
   12f74:	b92d      	cbnz	r5, 12f82 <insert_char+0x2e>
        *pos = c;
   12f76:	7026      	strb	r6, [r4, #0]
}
   12f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        console_out(c);
   12f7a:	4608      	mov	r0, r1
   12f7c:	f7ff ff9a 	bl	12eb4 <console_out>
   12f80:	e7f4      	b.n	12f6c <insert_char+0x18>
    tmp = *pos;
   12f82:	7827      	ldrb	r7, [r4, #0]
    *(pos++) = c;
   12f84:	f804 6b01 	strb.w	r6, [r4], #1
    console_out(ESC);
   12f88:	201b      	movs	r0, #27
   12f8a:	f7ff ff93 	bl	12eb4 <console_out>
    console_out('[');
   12f8e:	205b      	movs	r0, #91	; 0x5b
   12f90:	f7ff ff90 	bl	12eb4 <console_out>
    console_out('s');
   12f94:	2073      	movs	r0, #115	; 0x73
   12f96:	f7ff ff8d 	bl	12eb4 <console_out>
}
   12f9a:	e009      	b.n	12fb0 <insert_char+0x5c>
        console_out(tmp);
   12f9c:	4638      	mov	r0, r7
   12f9e:	f7ff ff89 	bl	12eb4 <console_out>
        c = *pos;
   12fa2:	7823      	ldrb	r3, [r4, #0]
        *(pos++) = tmp;
   12fa4:	4620      	mov	r0, r4
   12fa6:	f800 7b01 	strb.w	r7, [r0], #1
        tmp = c;
   12faa:	461f      	mov	r7, r3
    while (end-- > 0) {
   12fac:	4635      	mov	r5, r6
        *(pos++) = tmp;
   12fae:	4604      	mov	r4, r0
    while (end-- > 0) {
   12fb0:	1e6b      	subs	r3, r5, #1
   12fb2:	b29e      	uxth	r6, r3
   12fb4:	2d00      	cmp	r5, #0
   12fb6:	d1f1      	bne.n	12f9c <insert_char+0x48>
    console_out(ESC);
   12fb8:	201b      	movs	r0, #27
   12fba:	f7ff ff7b 	bl	12eb4 <console_out>
    console_out('[');
   12fbe:	205b      	movs	r0, #91	; 0x5b
   12fc0:	f7ff ff78 	bl	12eb4 <console_out>
    console_out('u');
   12fc4:	2075      	movs	r0, #117	; 0x75
   12fc6:	f7ff ff75 	bl	12eb4 <console_out>
}
   12fca:	e7d5      	b.n	12f78 <insert_char+0x24>
   12fcc:	2000684c 	.word	0x2000684c
   12fd0:	200013fc 	.word	0x200013fc

00012fd4 <console_hist_move>:
{
   12fd4:	b538      	push	{r3, r4, r5, lr}
   12fd6:	4605      	mov	r5, r0
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   12fd8:	2941      	cmp	r1, #65	; 0x41
   12fda:	d014      	beq.n	13006 <console_hist_move+0x32>
   12fdc:	4b15      	ldr	r3, [pc, #84]	; (13034 <console_hist_move+0x60>)
   12fde:	781b      	ldrb	r3, [r3, #0]
    if (sh->curr == limit) {
   12fe0:	4a14      	ldr	r2, [pc, #80]	; (13034 <console_hist_move+0x60>)
   12fe2:	78d0      	ldrb	r0, [r2, #3]
   12fe4:	4298      	cmp	r0, r3
   12fe6:	d023      	beq.n	13030 <console_hist_move+0x5c>
    if (direction == ANSI_UP) {
   12fe8:	2941      	cmp	r1, #65	; 0x41
   12fea:	d00f      	beq.n	1300c <console_hist_move+0x38>
        sh->curr = ring_buf_next(sh->curr, sh->size);
   12fec:	4c11      	ldr	r4, [pc, #68]	; (13034 <console_hist_move+0x60>)
   12fee:	78a1      	ldrb	r1, [r4, #2]
   12ff0:	f7ff fe0a 	bl	12c08 <ring_buf_next>
   12ff4:	70e0      	strb	r0, [r4, #3]
    console_clear_line();
   12ff6:	f7ff ff8f 	bl	12f18 <console_clear_line>
    str = sh->lines[sh->curr];
   12ffa:	4b0e      	ldr	r3, [pc, #56]	; (13034 <console_hist_move+0x60>)
   12ffc:	78da      	ldrb	r2, [r3, #3]
   12ffe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13002:	685c      	ldr	r4, [r3, #4]
    while (str && *str != '\0') {
   13004:	e010      	b.n	13028 <console_hist_move+0x54>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   13006:	4b0b      	ldr	r3, [pc, #44]	; (13034 <console_hist_move+0x60>)
   13008:	785b      	ldrb	r3, [r3, #1]
   1300a:	e7e9      	b.n	12fe0 <console_hist_move+0xc>
        sh->curr = ring_buf_prev(sh->curr, sh->size);
   1300c:	4614      	mov	r4, r2
   1300e:	7891      	ldrb	r1, [r2, #2]
   13010:	f7ff fe01 	bl	12c16 <ring_buf_prev>
   13014:	70e0      	strb	r0, [r4, #3]
   13016:	e7ee      	b.n	12ff6 <console_hist_move+0x22>
        insert_char(&line[cur], *str, end);
   13018:	4b07      	ldr	r3, [pc, #28]	; (13038 <console_hist_move+0x64>)
   1301a:	8818      	ldrh	r0, [r3, #0]
   1301c:	4b07      	ldr	r3, [pc, #28]	; (1303c <console_hist_move+0x68>)
   1301e:	881a      	ldrh	r2, [r3, #0]
   13020:	4428      	add	r0, r5
   13022:	f7ff ff97 	bl	12f54 <insert_char>
        ++str;
   13026:	3401      	adds	r4, #1
    while (str && *str != '\0') {
   13028:	b114      	cbz	r4, 13030 <console_hist_move+0x5c>
   1302a:	7821      	ldrb	r1, [r4, #0]
   1302c:	2900      	cmp	r1, #0
   1302e:	d1f3      	bne.n	13018 <console_hist_move+0x44>
}
   13030:	bd38      	pop	{r3, r4, r5, pc}
   13032:	bf00      	nop
   13034:	20006014 	.word	0x20006014
   13038:	2000684c 	.word	0x2000684c
   1303c:	2000684e 	.word	0x2000684e

00013040 <del_char>:
{
   13040:	b570      	push	{r4, r5, r6, lr}
   13042:	4606      	mov	r6, r0
   13044:	460d      	mov	r5, r1
    console_out('\b');
   13046:	2008      	movs	r0, #8
   13048:	f7ff ff34 	bl	12eb4 <console_out>
    if (end == 0) {
   1304c:	b14d      	cbz	r5, 13062 <del_char+0x22>
    console_out(ESC);
   1304e:	201b      	movs	r0, #27
   13050:	f7ff ff30 	bl	12eb4 <console_out>
    console_out('[');
   13054:	205b      	movs	r0, #91	; 0x5b
   13056:	f7ff ff2d 	bl	12eb4 <console_out>
    console_out('s');
   1305a:	2073      	movs	r0, #115	; 0x73
   1305c:	f7ff ff2a 	bl	12eb4 <console_out>
}
   13060:	e00c      	b.n	1307c <del_char+0x3c>
        console_out(' ');
   13062:	2020      	movs	r0, #32
   13064:	f7ff ff26 	bl	12eb4 <console_out>
        console_out('\b');
   13068:	2008      	movs	r0, #8
   1306a:	f7ff ff23 	bl	12eb4 <console_out>
        return;
   1306e:	e015      	b.n	1309c <del_char+0x5c>
        *pos = *(pos + 1);
   13070:	7870      	ldrb	r0, [r6, #1]
   13072:	f806 0b01 	strb.w	r0, [r6], #1
        console_out(*(pos++));
   13076:	f7ff ff1d 	bl	12eb4 <console_out>
    while (end-- > 0) {
   1307a:	4625      	mov	r5, r4
   1307c:	1e6b      	subs	r3, r5, #1
   1307e:	b29c      	uxth	r4, r3
   13080:	2d00      	cmp	r5, #0
   13082:	d1f5      	bne.n	13070 <del_char+0x30>
    console_out(' ');
   13084:	2020      	movs	r0, #32
   13086:	f7ff ff15 	bl	12eb4 <console_out>
    console_out(ESC);
   1308a:	201b      	movs	r0, #27
   1308c:	f7ff ff12 	bl	12eb4 <console_out>
    console_out('[');
   13090:	205b      	movs	r0, #91	; 0x5b
   13092:	f7ff ff0f 	bl	12eb4 <console_out>
    console_out('u');
   13096:	2075      	movs	r0, #117	; 0x75
   13098:	f7ff ff0c 	bl	12eb4 <console_out>
}
   1309c:	bd70      	pop	{r4, r5, r6, pc}
	...

000130a0 <handle_ansi>:
{
   130a0:	b510      	push	{r4, lr}
   130a2:	460c      	mov	r4, r1
    if (esc_state & ESC_ANSI_FIRST) {
   130a4:	4b5d      	ldr	r3, [pc, #372]	; (1321c <handle_ansi+0x17c>)
   130a6:	681b      	ldr	r3, [r3, #0]
   130a8:	f013 0f04 	tst.w	r3, #4
   130ac:	d023      	beq.n	130f6 <handle_ansi+0x56>
        esc_state &= ~ESC_ANSI_FIRST;
   130ae:	f023 0304 	bic.w	r3, r3, #4
   130b2:	4a5a      	ldr	r2, [pc, #360]	; (1321c <handle_ansi+0x17c>)
   130b4:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
   130b6:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   130ba:	2a09      	cmp	r2, #9
   130bc:	d910      	bls.n	130e0 <handle_ansi+0x40>
            ansi_val = 1;
   130be:	4b58      	ldr	r3, [pc, #352]	; (13220 <handle_ansi+0x180>)
   130c0:	2201      	movs	r2, #1
   130c2:	601a      	str	r2, [r3, #0]
    switch (byte) {
   130c4:	2848      	cmp	r0, #72	; 0x48
   130c6:	d846      	bhi.n	13156 <handle_ansi+0xb6>
   130c8:	2841      	cmp	r0, #65	; 0x41
   130ca:	d35c      	bcc.n	13186 <handle_ansi+0xe6>
   130cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   130d0:	2b07      	cmp	r3, #7
   130d2:	d858      	bhi.n	13186 <handle_ansi+0xe6>
   130d4:	e8df f003 	tbb	[pc, r3]
   130d8:	5d6f5353 	.word	0x5d6f5353
   130dc:	81579157 	.word	0x81579157
        esc_state |= ESC_ANSI_VAL;
   130e0:	f043 0308 	orr.w	r3, r3, #8
   130e4:	4a4d      	ldr	r2, [pc, #308]	; (1321c <handle_ansi+0x17c>)
   130e6:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
   130e8:	3830      	subs	r0, #48	; 0x30
   130ea:	4b4d      	ldr	r3, [pc, #308]	; (13220 <handle_ansi+0x180>)
   130ec:	6018      	str	r0, [r3, #0]
        ansi_val_2 = 0;
   130ee:	4b4d      	ldr	r3, [pc, #308]	; (13224 <handle_ansi+0x184>)
   130f0:	2200      	movs	r2, #0
   130f2:	601a      	str	r2, [r3, #0]
        return;
   130f4:	e04c      	b.n	13190 <handle_ansi+0xf0>
    if (esc_state & ESC_ANSI_VAL) {
   130f6:	f013 0f08 	tst.w	r3, #8
   130fa:	d0e3      	beq.n	130c4 <handle_ansi+0x24>
        if (isdigit(byte)) {
   130fc:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   13100:	2a09      	cmp	r2, #9
   13102:	d909      	bls.n	13118 <handle_ansi+0x78>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   13104:	283b      	cmp	r0, #59	; 0x3b
   13106:	d01e      	beq.n	13146 <handle_ansi+0xa6>
        esc_state &= ~ESC_ANSI_VAL;
   13108:	f023 0108 	bic.w	r1, r3, #8
   1310c:	4a43      	ldr	r2, [pc, #268]	; (1321c <handle_ansi+0x17c>)
   1310e:	6011      	str	r1, [r2, #0]
        esc_state &= ~ESC_ANSI_VAL_2;
   13110:	f023 0318 	bic.w	r3, r3, #24
   13114:	6013      	str	r3, [r2, #0]
   13116:	e7d5      	b.n	130c4 <handle_ansi+0x24>
            if (esc_state & ESC_ANSI_VAL_2) {
   13118:	f013 0f10 	tst.w	r3, #16
   1311c:	d009      	beq.n	13132 <handle_ansi+0x92>
                ansi_val_2 *= 10;
   1311e:	4a41      	ldr	r2, [pc, #260]	; (13224 <handle_ansi+0x184>)
   13120:	6813      	ldr	r3, [r2, #0]
   13122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13126:	005b      	lsls	r3, r3, #1
   13128:	6013      	str	r3, [r2, #0]
                ansi_val_2 += byte - '0';
   1312a:	4403      	add	r3, r0
   1312c:	3b30      	subs	r3, #48	; 0x30
   1312e:	6013      	str	r3, [r2, #0]
   13130:	e02e      	b.n	13190 <handle_ansi+0xf0>
                ansi_val *= 10;
   13132:	4a3b      	ldr	r2, [pc, #236]	; (13220 <handle_ansi+0x180>)
   13134:	6813      	ldr	r3, [r2, #0]
   13136:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1313a:	005b      	lsls	r3, r3, #1
   1313c:	6013      	str	r3, [r2, #0]
                ansi_val += byte - '0';
   1313e:	4403      	add	r3, r0
   13140:	3b30      	subs	r3, #48	; 0x30
   13142:	6013      	str	r3, [r2, #0]
            return;
   13144:	e024      	b.n	13190 <handle_ansi+0xf0>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   13146:	f013 0f10 	tst.w	r3, #16
   1314a:	d1dd      	bne.n	13108 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   1314c:	f043 0310 	orr.w	r3, r3, #16
   13150:	4a32      	ldr	r2, [pc, #200]	; (1321c <handle_ansi+0x17c>)
   13152:	6013      	str	r3, [r2, #0]
            return;
   13154:	e01c      	b.n	13190 <handle_ansi+0xf0>
    switch (byte) {
   13156:	287e      	cmp	r0, #126	; 0x7e
   13158:	d115      	bne.n	13186 <handle_ansi+0xe6>
        if (!end) {
   1315a:	4b33      	ldr	r3, [pc, #204]	; (13228 <handle_ansi+0x188>)
   1315c:	881b      	ldrh	r3, [r3, #0]
   1315e:	b193      	cbz	r3, 13186 <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
   13160:	2101      	movs	r1, #1
   13162:	4832      	ldr	r0, [pc, #200]	; (1322c <handle_ansi+0x18c>)
   13164:	f000 fa90 	bl	13688 <console_printf>
        del_char(&line[cur], --end);
   13168:	4b31      	ldr	r3, [pc, #196]	; (13230 <handle_ansi+0x190>)
   1316a:	8818      	ldrh	r0, [r3, #0]
   1316c:	4b2e      	ldr	r3, [pc, #184]	; (13228 <handle_ansi+0x188>)
   1316e:	8819      	ldrh	r1, [r3, #0]
   13170:	3901      	subs	r1, #1
   13172:	b289      	uxth	r1, r1
   13174:	8019      	strh	r1, [r3, #0]
   13176:	4420      	add	r0, r4
   13178:	f7ff ff62 	bl	13040 <del_char>
        break;
   1317c:	e003      	b.n	13186 <handle_ansi+0xe6>
        console_hist_move(line, byte);
   1317e:	4601      	mov	r1, r0
   13180:	4620      	mov	r0, r4
   13182:	f7ff ff27 	bl	12fd4 <console_hist_move>
    esc_state &= ~ESC_ANSI;
   13186:	4a25      	ldr	r2, [pc, #148]	; (1321c <handle_ansi+0x17c>)
   13188:	6813      	ldr	r3, [r2, #0]
   1318a:	f023 0302 	bic.w	r3, r3, #2
   1318e:	6013      	str	r3, [r2, #0]
}
   13190:	bd10      	pop	{r4, pc}
        if (ansi_val > cur) {
   13192:	4b27      	ldr	r3, [pc, #156]	; (13230 <handle_ansi+0x190>)
   13194:	881b      	ldrh	r3, [r3, #0]
   13196:	4a22      	ldr	r2, [pc, #136]	; (13220 <handle_ansi+0x180>)
   13198:	6811      	ldr	r1, [r2, #0]
   1319a:	428b      	cmp	r3, r1
   1319c:	d3f3      	bcc.n	13186 <handle_ansi+0xe6>
        end += ansi_val;
   1319e:	b288      	uxth	r0, r1
   131a0:	4c21      	ldr	r4, [pc, #132]	; (13228 <handle_ansi+0x188>)
   131a2:	8822      	ldrh	r2, [r4, #0]
   131a4:	4402      	add	r2, r0
   131a6:	8022      	strh	r2, [r4, #0]
        cur -= ansi_val;
   131a8:	1a1b      	subs	r3, r3, r0
   131aa:	4a21      	ldr	r2, [pc, #132]	; (13230 <handle_ansi+0x190>)
   131ac:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uD", count);
   131ae:	4821      	ldr	r0, [pc, #132]	; (13234 <handle_ansi+0x194>)
   131b0:	f000 fa6a 	bl	13688 <console_printf>
}
   131b4:	e7e7      	b.n	13186 <handle_ansi+0xe6>
        if (ansi_val > end) {
   131b6:	4b1c      	ldr	r3, [pc, #112]	; (13228 <handle_ansi+0x188>)
   131b8:	881b      	ldrh	r3, [r3, #0]
   131ba:	4a19      	ldr	r2, [pc, #100]	; (13220 <handle_ansi+0x180>)
   131bc:	6811      	ldr	r1, [r2, #0]
   131be:	428b      	cmp	r3, r1
   131c0:	d3e1      	bcc.n	13186 <handle_ansi+0xe6>
        end -= ansi_val;
   131c2:	b28a      	uxth	r2, r1
   131c4:	1a9b      	subs	r3, r3, r2
   131c6:	4818      	ldr	r0, [pc, #96]	; (13228 <handle_ansi+0x188>)
   131c8:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   131ca:	4b19      	ldr	r3, [pc, #100]	; (13230 <handle_ansi+0x190>)
   131cc:	8818      	ldrh	r0, [r3, #0]
   131ce:	4402      	add	r2, r0
   131d0:	801a      	strh	r2, [r3, #0]
    console_printf("\x1b[%uC", count);
   131d2:	4816      	ldr	r0, [pc, #88]	; (1322c <handle_ansi+0x18c>)
   131d4:	f000 fa58 	bl	13688 <console_printf>
}
   131d8:	e7d5      	b.n	13186 <handle_ansi+0xe6>
        if (!cur) {
   131da:	4b15      	ldr	r3, [pc, #84]	; (13230 <handle_ansi+0x190>)
   131dc:	8819      	ldrh	r1, [r3, #0]
   131de:	2900      	cmp	r1, #0
   131e0:	d0d1      	beq.n	13186 <handle_ansi+0xe6>
    console_printf("\x1b[%uD", count);
   131e2:	4814      	ldr	r0, [pc, #80]	; (13234 <handle_ansi+0x194>)
   131e4:	f000 fa50 	bl	13688 <console_printf>
        end += cur;
   131e8:	490f      	ldr	r1, [pc, #60]	; (13228 <handle_ansi+0x188>)
   131ea:	4a11      	ldr	r2, [pc, #68]	; (13230 <handle_ansi+0x190>)
   131ec:	880b      	ldrh	r3, [r1, #0]
   131ee:	8810      	ldrh	r0, [r2, #0]
   131f0:	4403      	add	r3, r0
   131f2:	800b      	strh	r3, [r1, #0]
        cur = 0;
   131f4:	2300      	movs	r3, #0
   131f6:	8013      	strh	r3, [r2, #0]
        break;
   131f8:	e7c5      	b.n	13186 <handle_ansi+0xe6>
        if (!end) {
   131fa:	4b0b      	ldr	r3, [pc, #44]	; (13228 <handle_ansi+0x188>)
   131fc:	8819      	ldrh	r1, [r3, #0]
   131fe:	2900      	cmp	r1, #0
   13200:	d0c1      	beq.n	13186 <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
   13202:	480a      	ldr	r0, [pc, #40]	; (1322c <handle_ansi+0x18c>)
   13204:	f000 fa40 	bl	13688 <console_printf>
        cur += end;
   13208:	4909      	ldr	r1, [pc, #36]	; (13230 <handle_ansi+0x190>)
   1320a:	4a07      	ldr	r2, [pc, #28]	; (13228 <handle_ansi+0x188>)
   1320c:	880b      	ldrh	r3, [r1, #0]
   1320e:	8810      	ldrh	r0, [r2, #0]
   13210:	4403      	add	r3, r0
   13212:	800b      	strh	r3, [r1, #0]
        end = 0;
   13214:	2300      	movs	r3, #0
   13216:	8013      	strh	r3, [r2, #0]
        break;
   13218:	e7b5      	b.n	13186 <handle_ansi+0xe6>
   1321a:	bf00      	nop
   1321c:	20006850 	.word	0x20006850
   13220:	20005ff4 	.word	0x20005ff4
   13224:	20005ff8 	.word	0x20005ff8
   13228:	2000684e 	.word	0x2000684e
   1322c:	00023cc4 	.word	0x00023cc4
   13230:	2000684c 	.word	0x2000684c
   13234:	00023cbc 	.word	0x00023cbc

00013238 <console_write>:
{
   13238:	b570      	push	{r4, r5, r6, lr}
   1323a:	4606      	mov	r6, r0
   1323c:	460d      	mov	r5, r1
    if (console_lock(timeout) != OS_OK) {
   1323e:	2080      	movs	r0, #128	; 0x80
   13240:	f7ff fe04 	bl	12e4c <console_lock>
   13244:	bb88      	cbnz	r0, 132aa <console_write+0x72>
   13246:	4604      	mov	r4, r0
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   13248:	2d01      	cmp	r5, #1
   1324a:	dd02      	ble.n	13252 <console_write+0x1a>
   1324c:	7833      	ldrb	r3, [r6, #0]
   1324e:	2b04      	cmp	r3, #4
   13250:	d014      	beq.n	1327c <console_write+0x44>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   13252:	2d02      	cmp	r5, #2
   13254:	dd02      	ble.n	1325c <console_write+0x24>
   13256:	7873      	ldrb	r3, [r6, #1]
   13258:	2b06      	cmp	r3, #6
   1325a:	d016      	beq.n	1328a <console_write+0x52>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   1325c:	4b15      	ldr	r3, [pc, #84]	; (132b4 <console_write+0x7c>)
   1325e:	781b      	ldrb	r3, [r3, #0]
   13260:	b913      	cbnz	r3, 13268 <console_write+0x30>
   13262:	4b15      	ldr	r3, [pc, #84]	; (132b8 <console_write+0x80>)
   13264:	781b      	ldrb	r3, [r3, #0]
   13266:	b9bb      	cbnz	r3, 13298 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
   13268:	42ac      	cmp	r4, r5
   1326a:	da15      	bge.n	13298 <console_write+0x60>
        if (console_out_nolock((int)str[i]) == EOF) {
   1326c:	5d30      	ldrb	r0, [r6, r4]
   1326e:	f000 fa85 	bl	1377c <console_out_nolock>
   13272:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13276:	d00f      	beq.n	13298 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
   13278:	3401      	adds	r4, #1
   1327a:	e7f5      	b.n	13268 <console_write+0x30>
        str[1] == CONSOLE_NLIP_DATA_START2) {
   1327c:	7873      	ldrb	r3, [r6, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   1327e:	2b14      	cmp	r3, #20
   13280:	d1e7      	bne.n	13252 <console_write+0x1a>
        g_is_output_nlip = 1;
   13282:	4b0c      	ldr	r3, [pc, #48]	; (132b4 <console_write+0x7c>)
   13284:	2201      	movs	r2, #1
   13286:	701a      	strb	r2, [r3, #0]
   13288:	e7e3      	b.n	13252 <console_write+0x1a>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   1328a:	78b3      	ldrb	r3, [r6, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1328c:	2b09      	cmp	r3, #9
   1328e:	d1e5      	bne.n	1325c <console_write+0x24>
        g_is_output_nlip = 1;
   13290:	4b08      	ldr	r3, [pc, #32]	; (132b4 <console_write+0x7c>)
   13292:	2201      	movs	r2, #1
   13294:	701a      	strb	r2, [r3, #0]
   13296:	e7e1      	b.n	1325c <console_write+0x24>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   13298:	2d00      	cmp	r5, #0
   1329a:	dd04      	ble.n	132a6 <console_write+0x6e>
   1329c:	4435      	add	r5, r6
   1329e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   132a2:	2b0a      	cmp	r3, #10
   132a4:	d002      	beq.n	132ac <console_write+0x74>
    (void)console_unlock();
   132a6:	f7ff fdeb 	bl	12e80 <console_unlock>
}
   132aa:	bd70      	pop	{r4, r5, r6, pc}
        g_is_output_nlip = 0;
   132ac:	4b01      	ldr	r3, [pc, #4]	; (132b4 <console_write+0x7c>)
   132ae:	2200      	movs	r2, #0
   132b0:	701a      	strb	r2, [r3, #0]
   132b2:	e7f8      	b.n	132a6 <console_write+0x6e>
   132b4:	2000685b 	.word	0x2000685b
   132b8:	2000685a 	.word	0x2000685a

000132bc <console_blocking_mode>:
}
   132bc:	4770      	bx	lr
	...

000132c0 <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
   132c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   132c4:	4b8a      	ldr	r3, [pc, #552]	; (134f0 <console_handle_char+0x230>)
   132c6:	681b      	ldr	r3, [r3, #0]
   132c8:	2b00      	cmp	r3, #0
   132ca:	f000 8161 	beq.w	13590 <console_handle_char+0x2d0>
   132ce:	4604      	mov	r4, r0
        return 0;
    }

    if (!ev) {
   132d0:	4b88      	ldr	r3, [pc, #544]	; (134f4 <console_handle_char+0x234>)
   132d2:	681b      	ldr	r3, [r3, #0]
   132d4:	b1cb      	cbz	r3, 1330a <console_handle_char+0x4a>
            return -1;
        }
        input = ev->ev_arg;
    }

    if (handle_nlip(byte))  {
   132d6:	4620      	mov	r0, r4
   132d8:	f7ff fcb2 	bl	12c40 <handle_nlip>
   132dc:	4605      	mov	r5, r0
   132de:	2800      	cmp	r0, #0
   132e0:	d064      	beq.n	133ac <console_handle_char+0xec>
        if (byte == '\n') {
   132e2:	2c0a      	cmp	r4, #10
   132e4:	d021      	beq.n	1332a <console_handle_char+0x6a>
            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
        /* Ignore characters if there's no more buffer space */
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
   132e6:	2c09      	cmp	r4, #9
   132e8:	d044      	beq.n	13374 <console_handle_char+0xb4>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
   132ea:	2c14      	cmp	r4, #20
   132ec:	d050      	beq.n	13390 <console_handle_char+0xd0>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
        }

        insert_char(&input->line[cur], byte, end);
   132ee:	4b82      	ldr	r3, [pc, #520]	; (134f8 <console_handle_char+0x238>)
   132f0:	6818      	ldr	r0, [r3, #0]
   132f2:	4b82      	ldr	r3, [pc, #520]	; (134fc <console_handle_char+0x23c>)
   132f4:	881b      	ldrh	r3, [r3, #0]
   132f6:	4a82      	ldr	r2, [pc, #520]	; (13500 <console_handle_char+0x240>)
   132f8:	8812      	ldrh	r2, [r2, #0]
   132fa:	4621      	mov	r1, r4
   132fc:	4418      	add	r0, r3
   132fe:	f7ff fe29 	bl	12f54 <insert_char>

        return 0;
   13302:	2500      	movs	r5, #0

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
   13304:	4628      	mov	r0, r5
   13306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ev = os_eventq_get_no_wait(&avail_queue);
   1330a:	487e      	ldr	r0, [pc, #504]	; (13504 <console_handle_char+0x244>)
   1330c:	f7fa fb90 	bl	da30 <os_eventq_get_no_wait>
   13310:	4b78      	ldr	r3, [pc, #480]	; (134f4 <console_handle_char+0x234>)
   13312:	6018      	str	r0, [r3, #0]
        if (!ev) {
   13314:	b118      	cbz	r0, 1331e <console_handle_char+0x5e>
        input = ev->ev_arg;
   13316:	6882      	ldr	r2, [r0, #8]
   13318:	4b77      	ldr	r3, [pc, #476]	; (134f8 <console_handle_char+0x238>)
   1331a:	601a      	str	r2, [r3, #0]
   1331c:	e7db      	b.n	132d6 <console_handle_char+0x16>
            rx_stalled = true;
   1331e:	4b7a      	ldr	r3, [pc, #488]	; (13508 <console_handle_char+0x248>)
   13320:	2201      	movs	r2, #1
   13322:	701a      	strb	r2, [r3, #0]
            return -1;
   13324:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13328:	e7ec      	b.n	13304 <console_handle_char+0x44>
            insert_char(&input->line[cur], byte, end);
   1332a:	4f73      	ldr	r7, [pc, #460]	; (134f8 <console_handle_char+0x238>)
   1332c:	6838      	ldr	r0, [r7, #0]
   1332e:	4d73      	ldr	r5, [pc, #460]	; (134fc <console_handle_char+0x23c>)
   13330:	882b      	ldrh	r3, [r5, #0]
   13332:	4e73      	ldr	r6, [pc, #460]	; (13500 <console_handle_char+0x240>)
   13334:	8832      	ldrh	r2, [r6, #0]
   13336:	4621      	mov	r1, r4
   13338:	4418      	add	r0, r3
   1333a:	f7ff fe0b 	bl	12f54 <insert_char>
            input->line[cur] = '\0';
   1333e:	683a      	ldr	r2, [r7, #0]
   13340:	882b      	ldrh	r3, [r5, #0]
   13342:	2400      	movs	r4, #0
   13344:	54d4      	strb	r4, [r2, r3]
            cur = 0;
   13346:	802c      	strh	r4, [r5, #0]
            end = 0;
   13348:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
   1334a:	4b6a      	ldr	r3, [pc, #424]	; (134f4 <console_handle_char+0x234>)
   1334c:	6819      	ldr	r1, [r3, #0]
   1334e:	4b68      	ldr	r3, [pc, #416]	; (134f0 <console_handle_char+0x230>)
   13350:	6818      	ldr	r0, [r3, #0]
   13352:	f7fa fb39 	bl	d9c8 <os_eventq_put>
            nlip_state = 0;
   13356:	4b6d      	ldr	r3, [pc, #436]	; (1350c <console_handle_char+0x24c>)
   13358:	601c      	str	r4, [r3, #0]
            if (console_compat_rx_cb) {
   1335a:	4b6d      	ldr	r3, [pc, #436]	; (13510 <console_handle_char+0x250>)
   1335c:	681b      	ldr	r3, [r3, #0]
   1335e:	b103      	cbz	r3, 13362 <console_handle_char+0xa2>
                console_compat_rx_cb();
   13360:	4798      	blx	r3
            input = NULL;
   13362:	2500      	movs	r5, #0
   13364:	4b64      	ldr	r3, [pc, #400]	; (134f8 <console_handle_char+0x238>)
   13366:	601d      	str	r5, [r3, #0]
            ev = NULL;
   13368:	4b62      	ldr	r3, [pc, #392]	; (134f4 <console_handle_char+0x234>)
   1336a:	601d      	str	r5, [r3, #0]
            console_echo(1);
   1336c:	2001      	movs	r0, #1
   1336e:	f7ff fd67 	bl	12e40 <console_echo>
            return 0;
   13372:	e7c7      	b.n	13304 <console_handle_char+0x44>
            console_echo(0);
   13374:	2000      	movs	r0, #0
   13376:	f7ff fd63 	bl	12e40 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
   1337a:	4b5f      	ldr	r3, [pc, #380]	; (134f8 <console_handle_char+0x238>)
   1337c:	6818      	ldr	r0, [r3, #0]
   1337e:	4b5f      	ldr	r3, [pc, #380]	; (134fc <console_handle_char+0x23c>)
   13380:	881b      	ldrh	r3, [r3, #0]
   13382:	4a5f      	ldr	r2, [pc, #380]	; (13500 <console_handle_char+0x240>)
   13384:	8812      	ldrh	r2, [r2, #0]
   13386:	2106      	movs	r1, #6
   13388:	4418      	add	r0, r3
   1338a:	f7ff fde3 	bl	12f54 <insert_char>
   1338e:	e7ae      	b.n	132ee <console_handle_char+0x2e>
            console_echo(0);
   13390:	2000      	movs	r0, #0
   13392:	f7ff fd55 	bl	12e40 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   13396:	4b58      	ldr	r3, [pc, #352]	; (134f8 <console_handle_char+0x238>)
   13398:	6818      	ldr	r0, [r3, #0]
   1339a:	4b58      	ldr	r3, [pc, #352]	; (134fc <console_handle_char+0x23c>)
   1339c:	881b      	ldrh	r3, [r3, #0]
   1339e:	4a58      	ldr	r2, [pc, #352]	; (13500 <console_handle_char+0x240>)
   133a0:	8812      	ldrh	r2, [r2, #0]
   133a2:	2104      	movs	r1, #4
   133a4:	4418      	add	r0, r3
   133a6:	f7ff fdd5 	bl	12f54 <insert_char>
   133aa:	e7a0      	b.n	132ee <console_handle_char+0x2e>
    if (esc_state & ESC_ANSI) {
   133ac:	4b59      	ldr	r3, [pc, #356]	; (13514 <console_handle_char+0x254>)
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	f013 0602 	ands.w	r6, r3, #2
   133b4:	d009      	beq.n	133ca <console_handle_char+0x10a>
        if (g_console_ignore_non_nlip) {
   133b6:	4b58      	ldr	r3, [pc, #352]	; (13518 <console_handle_char+0x258>)
   133b8:	781b      	ldrb	r3, [r3, #0]
   133ba:	2b00      	cmp	r3, #0
   133bc:	d1a2      	bne.n	13304 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
   133be:	4b4e      	ldr	r3, [pc, #312]	; (134f8 <console_handle_char+0x238>)
   133c0:	6819      	ldr	r1, [r3, #0]
   133c2:	4620      	mov	r0, r4
   133c4:	f7ff fe6c 	bl	130a0 <handle_ansi>
        return 0;
   133c8:	e79c      	b.n	13304 <console_handle_char+0x44>
    if (esc_state & ESC_ESC) {
   133ca:	f013 0501 	ands.w	r5, r3, #1
   133ce:	d01a      	beq.n	13406 <console_handle_char+0x146>
        if (g_console_ignore_non_nlip) {
   133d0:	4a51      	ldr	r2, [pc, #324]	; (13518 <console_handle_char+0x258>)
   133d2:	7812      	ldrb	r2, [r2, #0]
   133d4:	b10a      	cbz	r2, 133da <console_handle_char+0x11a>
            return 0;
   133d6:	4635      	mov	r5, r6
   133d8:	e794      	b.n	13304 <console_handle_char+0x44>
        esc_state &= ~ESC_ESC;
   133da:	f023 0301 	bic.w	r3, r3, #1
   133de:	4a4d      	ldr	r2, [pc, #308]	; (13514 <console_handle_char+0x254>)
   133e0:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   133e2:	4b45      	ldr	r3, [pc, #276]	; (134f8 <console_handle_char+0x238>)
   133e4:	6819      	ldr	r1, [r3, #0]
   133e6:	4620      	mov	r0, r4
   133e8:	f7ff fe5a 	bl	130a0 <handle_ansi>
        switch (byte) {
   133ec:	2c5b      	cmp	r4, #91	; 0x5b
   133ee:	d001      	beq.n	133f4 <console_handle_char+0x134>
        return 0;
   133f0:	4635      	mov	r5, r6
   133f2:	e787      	b.n	13304 <console_handle_char+0x44>
            esc_state |= ESC_ANSI;
   133f4:	4a47      	ldr	r2, [pc, #284]	; (13514 <console_handle_char+0x254>)
   133f6:	6813      	ldr	r3, [r2, #0]
   133f8:	f043 0102 	orr.w	r1, r3, #2
   133fc:	6011      	str	r1, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   133fe:	f043 0306 	orr.w	r3, r3, #6
   13402:	6013      	str	r3, [r2, #0]
            break;
   13404:	e7f4      	b.n	133f0 <console_handle_char+0x130>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   13406:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   1340a:	2b5e      	cmp	r3, #94	; 0x5e
   1340c:	d80f      	bhi.n	1342e <console_handle_char+0x16e>
    if (!g_console_ignore_non_nlip) {
   1340e:	4b42      	ldr	r3, [pc, #264]	; (13518 <console_handle_char+0x258>)
   13410:	781b      	ldrb	r3, [r3, #0]
   13412:	2b00      	cmp	r3, #0
   13414:	f47f af76 	bne.w	13304 <console_handle_char+0x44>
        insert_char(&input->line[cur], byte, end);
   13418:	4b37      	ldr	r3, [pc, #220]	; (134f8 <console_handle_char+0x238>)
   1341a:	6818      	ldr	r0, [r3, #0]
   1341c:	4b37      	ldr	r3, [pc, #220]	; (134fc <console_handle_char+0x23c>)
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	4a37      	ldr	r2, [pc, #220]	; (13500 <console_handle_char+0x240>)
   13422:	8812      	ldrh	r2, [r2, #0]
   13424:	4621      	mov	r1, r4
   13426:	4418      	add	r0, r3
   13428:	f7ff fd94 	bl	12f54 <insert_char>
   1342c:	e76a      	b.n	13304 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
   1342e:	4b32      	ldr	r3, [pc, #200]	; (134f8 <console_handle_char+0x238>)
   13430:	6819      	ldr	r1, [r3, #0]
   13432:	4620      	mov	r0, r4
   13434:	f7ff fe34 	bl	130a0 <handle_ansi>
        switch (byte) {
   13438:	2c1b      	cmp	r4, #27
   1343a:	d812      	bhi.n	13462 <console_handle_char+0x1a2>
   1343c:	2c04      	cmp	r4, #4
   1343e:	d312      	bcc.n	13466 <console_handle_char+0x1a6>
   13440:	1f23      	subs	r3, r4, #4
   13442:	2b17      	cmp	r3, #23
   13444:	d80f      	bhi.n	13466 <console_handle_char+0x1a6>
   13446:	e8df f003 	tbb	[pc, r3]
   1344a:	0e4d      	.short	0x0e4d
   1344c:	8f6b0e47 	.word	0x8f6b0e47
   13450:	180e0e18 	.word	0x180e0e18
   13454:	0e0e0e0e 	.word	0x0e0e0e0e
   13458:	0e0e0e0e 	.word	0x0e0e0e0e
   1345c:	0e0e0e0e 	.word	0x0e0e0e0e
   13460:	810e      	.short	0x810e
   13462:	2c7f      	cmp	r4, #127	; 0x7f
   13464:	d05c      	beq.n	13520 <console_handle_char+0x260>
            insert_char(&input->line[cur], byte, end);
   13466:	4b24      	ldr	r3, [pc, #144]	; (134f8 <console_handle_char+0x238>)
   13468:	6818      	ldr	r0, [r3, #0]
   1346a:	4b24      	ldr	r3, [pc, #144]	; (134fc <console_handle_char+0x23c>)
   1346c:	881b      	ldrh	r3, [r3, #0]
   1346e:	4a24      	ldr	r2, [pc, #144]	; (13500 <console_handle_char+0x240>)
   13470:	8812      	ldrh	r2, [r2, #0]
   13472:	4621      	mov	r1, r4
   13474:	4418      	add	r0, r3
   13476:	f7ff fd6d 	bl	12f54 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   1347a:	2c0a      	cmp	r4, #10
   1347c:	d103      	bne.n	13486 <console_handle_char+0x1c6>
   1347e:	4b27      	ldr	r3, [pc, #156]	; (1351c <console_handle_char+0x25c>)
   13480:	781b      	ldrb	r3, [r3, #0]
   13482:	2b0d      	cmp	r3, #13
   13484:	d06d      	beq.n	13562 <console_handle_char+0x2a2>
            prev_endl = byte;
   13486:	4b25      	ldr	r3, [pc, #148]	; (1351c <console_handle_char+0x25c>)
   13488:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
   1348a:	4e1b      	ldr	r6, [pc, #108]	; (134f8 <console_handle_char+0x238>)
   1348c:	6832      	ldr	r2, [r6, #0]
   1348e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 134fc <console_handle_char+0x23c>
   13492:	f8b8 3000 	ldrh.w	r3, [r8]
   13496:	4f1a      	ldr	r7, [pc, #104]	; (13500 <console_handle_char+0x240>)
   13498:	8839      	ldrh	r1, [r7, #0]
   1349a:	440b      	add	r3, r1
   1349c:	2400      	movs	r4, #0
   1349e:	54d4      	strb	r4, [r2, r3]
            console_out('\r');
   134a0:	200d      	movs	r0, #13
   134a2:	f7ff fd07 	bl	12eb4 <console_out>
            console_out('\n');
   134a6:	200a      	movs	r0, #10
   134a8:	f7ff fd04 	bl	12eb4 <console_out>
            cur = 0;
   134ac:	f8a8 4000 	strh.w	r4, [r8]
            end = 0;
   134b0:	803c      	strh	r4, [r7, #0]
            os_eventq_put(lines_queue, ev);
   134b2:	4b10      	ldr	r3, [pc, #64]	; (134f4 <console_handle_char+0x234>)
   134b4:	6819      	ldr	r1, [r3, #0]
   134b6:	4b0e      	ldr	r3, [pc, #56]	; (134f0 <console_handle_char+0x230>)
   134b8:	6818      	ldr	r0, [r3, #0]
   134ba:	f7fa fa85 	bl	d9c8 <os_eventq_put>
            console_hist_add(input->line);
   134be:	6830      	ldr	r0, [r6, #0]
   134c0:	f7ff fc5e 	bl	12d80 <console_hist_add>
            if (console_compat_rx_cb) {
   134c4:	4b12      	ldr	r3, [pc, #72]	; (13510 <console_handle_char+0x250>)
   134c6:	681b      	ldr	r3, [r3, #0]
   134c8:	b103      	cbz	r3, 134cc <console_handle_char+0x20c>
                console_compat_rx_cb();
   134ca:	4798      	blx	r3
            input = NULL;
   134cc:	2300      	movs	r3, #0
   134ce:	4a0a      	ldr	r2, [pc, #40]	; (134f8 <console_handle_char+0x238>)
   134d0:	6013      	str	r3, [r2, #0]
            ev = NULL;
   134d2:	4a08      	ldr	r2, [pc, #32]	; (134f4 <console_handle_char+0x234>)
   134d4:	6013      	str	r3, [r2, #0]
            break;
   134d6:	e715      	b.n	13304 <console_handle_char+0x44>
            nlip_state |= NLIP_PKT_START1;
   134d8:	4a0c      	ldr	r2, [pc, #48]	; (1350c <console_handle_char+0x24c>)
   134da:	6813      	ldr	r3, [r2, #0]
   134dc:	f043 0301 	orr.w	r3, r3, #1
   134e0:	6013      	str	r3, [r2, #0]
            break;
   134e2:	e70f      	b.n	13304 <console_handle_char+0x44>
            nlip_state |= NLIP_DATA_START1;
   134e4:	4a09      	ldr	r2, [pc, #36]	; (1350c <console_handle_char+0x24c>)
   134e6:	6813      	ldr	r3, [r2, #0]
   134e8:	f043 0304 	orr.w	r3, r3, #4
   134ec:	6013      	str	r3, [r2, #0]
            break;
   134ee:	e709      	b.n	13304 <console_handle_char+0x44>
   134f0:	20006860 	.word	0x20006860
   134f4:	20006854 	.word	0x20006854
   134f8:	2000685c 	.word	0x2000685c
   134fc:	2000684c 	.word	0x2000684c
   13500:	2000684e 	.word	0x2000684e
   13504:	20005ffc 	.word	0x20005ffc
   13508:	20006869 	.word	0x20006869
   1350c:	20006864 	.word	0x20006864
   13510:	20006010 	.word	0x20006010
   13514:	20006850 	.word	0x20006850
   13518:	20006858 	.word	0x20006858
   1351c:	20006868 	.word	0x20006868
            if (g_console_ignore_non_nlip) {
   13520:	4b1c      	ldr	r3, [pc, #112]	; (13594 <console_handle_char+0x2d4>)
   13522:	781b      	ldrb	r3, [r3, #0]
   13524:	2b00      	cmp	r3, #0
   13526:	f47f aeed 	bne.w	13304 <console_handle_char+0x44>
            if (cur > 0) {
   1352a:	4b1b      	ldr	r3, [pc, #108]	; (13598 <console_handle_char+0x2d8>)
   1352c:	881b      	ldrh	r3, [r3, #0]
   1352e:	2b00      	cmp	r3, #0
   13530:	f43f aee8 	beq.w	13304 <console_handle_char+0x44>
                del_char(&input->line[--cur], end);
   13534:	4a19      	ldr	r2, [pc, #100]	; (1359c <console_handle_char+0x2dc>)
   13536:	6810      	ldr	r0, [r2, #0]
   13538:	3b01      	subs	r3, #1
   1353a:	b29b      	uxth	r3, r3
   1353c:	4a16      	ldr	r2, [pc, #88]	; (13598 <console_handle_char+0x2d8>)
   1353e:	8013      	strh	r3, [r2, #0]
   13540:	4a17      	ldr	r2, [pc, #92]	; (135a0 <console_handle_char+0x2e0>)
   13542:	8811      	ldrh	r1, [r2, #0]
   13544:	4418      	add	r0, r3
   13546:	f7ff fd7b 	bl	13040 <del_char>
   1354a:	e6db      	b.n	13304 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
   1354c:	4b11      	ldr	r3, [pc, #68]	; (13594 <console_handle_char+0x2d4>)
   1354e:	781b      	ldrb	r3, [r3, #0]
   13550:	2b00      	cmp	r3, #0
   13552:	f47f aed7 	bne.w	13304 <console_handle_char+0x44>
            esc_state |= ESC_ESC;
   13556:	4a13      	ldr	r2, [pc, #76]	; (135a4 <console_handle_char+0x2e4>)
   13558:	6813      	ldr	r3, [r2, #0]
   1355a:	f043 0301 	orr.w	r3, r3, #1
   1355e:	6013      	str	r3, [r2, #0]
            break;
   13560:	e6d0      	b.n	13304 <console_handle_char+0x44>
                prev_endl = byte;
   13562:	4b11      	ldr	r3, [pc, #68]	; (135a8 <console_handle_char+0x2e8>)
   13564:	701c      	strb	r4, [r3, #0]
                break;
   13566:	e6cd      	b.n	13304 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
   13568:	4b0a      	ldr	r3, [pc, #40]	; (13594 <console_handle_char+0x2d4>)
   1356a:	781b      	ldrb	r3, [r3, #0]
   1356c:	2b00      	cmp	r3, #0
   1356e:	f47f aec9 	bne.w	13304 <console_handle_char+0x44>
            if (completion && !end) {
   13572:	4b0e      	ldr	r3, [pc, #56]	; (135ac <console_handle_char+0x2ec>)
   13574:	681b      	ldr	r3, [r3, #0]
   13576:	2b00      	cmp	r3, #0
   13578:	f43f aec4 	beq.w	13304 <console_handle_char+0x44>
   1357c:	4a08      	ldr	r2, [pc, #32]	; (135a0 <console_handle_char+0x2e0>)
   1357e:	8812      	ldrh	r2, [r2, #0]
   13580:	2a00      	cmp	r2, #0
   13582:	f47f aebf 	bne.w	13304 <console_handle_char+0x44>
                completion(input->line, console_append_char);
   13586:	490a      	ldr	r1, [pc, #40]	; (135b0 <console_handle_char+0x2f0>)
   13588:	4a04      	ldr	r2, [pc, #16]	; (1359c <console_handle_char+0x2dc>)
   1358a:	6810      	ldr	r0, [r2, #0]
   1358c:	4798      	blx	r3
        return 0;
   1358e:	e6b9      	b.n	13304 <console_handle_char+0x44>
        return 0;
   13590:	2500      	movs	r5, #0
   13592:	e6b7      	b.n	13304 <console_handle_char+0x44>
   13594:	20006858 	.word	0x20006858
   13598:	2000684c 	.word	0x2000684c
   1359c:	2000685c 	.word	0x2000685c
   135a0:	2000684e 	.word	0x2000684e
   135a4:	20006850 	.word	0x20006850
   135a8:	20006868 	.word	0x20006868
   135ac:	2000600c 	.word	0x2000600c
   135b0:	00012ed5 	.word	0x00012ed5

000135b4 <console_is_init>:

int
console_is_init(void)
{
   135b4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    return rtt_console_is_init();
   135b6:	f000 f907 	bl	137c8 <rtt_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
   135ba:	bd08      	pop	{r3, pc}

000135bc <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   135bc:	4b01      	ldr	r3, [pc, #4]	; (135c4 <console_line_queue_set+0x8>)
   135be:	6018      	str	r0, [r3, #0]
}
   135c0:	4770      	bx	lr
   135c2:	bf00      	nop
   135c4:	20006860 	.word	0x20006860

000135c8 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   135c8:	b508      	push	{r3, lr}
   135ca:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   135cc:	4806      	ldr	r0, [pc, #24]	; (135e8 <console_line_event_put+0x20>)
   135ce:	f7fa f9fb 	bl	d9c8 <os_eventq_put>

    if (rx_stalled) {
   135d2:	4b06      	ldr	r3, [pc, #24]	; (135ec <console_line_event_put+0x24>)
   135d4:	781b      	ldrb	r3, [r3, #0]
   135d6:	b903      	cbnz	r3, 135da <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
   135d8:	bd08      	pop	{r3, pc}
        rx_stalled = false;
   135da:	4b04      	ldr	r3, [pc, #16]	; (135ec <console_line_event_put+0x24>)
   135dc:	2200      	movs	r2, #0
   135de:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
   135e0:	f000 f8ea 	bl	137b8 <console_rx_restart>
}
   135e4:	e7f8      	b.n	135d8 <console_line_event_put+0x10>
   135e6:	bf00      	nop
   135e8:	20005ffc 	.word	0x20005ffc
   135ec:	20006869 	.word	0x20006869

000135f0 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   135f0:	4b01      	ldr	r3, [pc, #4]	; (135f8 <console_set_completion_cb+0x8>)
   135f2:	6018      	str	r0, [r3, #0]
}
   135f4:	4770      	bx	lr
   135f6:	bf00      	nop
   135f8:	2000600c 	.word	0x2000600c

000135fc <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   135fc:	b510      	push	{r4, lr}
   135fe:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13600:	4b0e      	ldr	r3, [pc, #56]	; (1363c <console_pkg_init+0x40>)
   13602:	781b      	ldrb	r3, [r3, #0]
   13604:	b1a3      	cbz	r3, 13630 <console_pkg_init+0x34>

    os_eventq_init(&avail_queue);
   13606:	480e      	ldr	r0, [pc, #56]	; (13640 <console_pkg_init+0x44>)
   13608:	f7fa f9d0 	bl	d9ac <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1360c:	480d      	ldr	r0, [pc, #52]	; (13644 <console_pkg_init+0x48>)
   1360e:	f7fa fbcd 	bl	ddac <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_HISTORY_SIZE) > 0
    console_hist_init();
   13612:	f7ff fbf5 	bl	12e00 <console_hist_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
   13616:	f000 f8d9 	bl	137cc <rtt_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1361a:	b138      	cbz	r0, 1362c <console_pkg_init+0x30>
   1361c:	2000      	movs	r0, #0
   1361e:	9000      	str	r0, [sp, #0]
   13620:	4b09      	ldr	r3, [pc, #36]	; (13648 <console_pkg_init+0x4c>)
   13622:	681c      	ldr	r4, [r3, #0]
   13624:	4603      	mov	r3, r0
   13626:	4602      	mov	r2, r0
   13628:	4601      	mov	r1, r0
   1362a:	47a0      	blx	r4
}
   1362c:	b002      	add	sp, #8
   1362e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   13630:	461a      	mov	r2, r3
   13632:	4619      	mov	r1, r3
   13634:	4618      	mov	r0, r3
   13636:	f7f9 fe93 	bl	d360 <__assert_func>
   1363a:	bf00      	nop
   1363c:	20006ca8 	.word	0x20006ca8
   13640:	20005ffc 	.word	0x20005ffc
   13644:	20006840 	.word	0x20006840
   13648:	2000143c 	.word	0x2000143c

0001364c <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   1364c:	b570      	push	{r4, r5, r6, lr}
   1364e:	4604      	mov	r4, r0
   13650:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   13652:	f000 f8db 	bl	1380c <console_get_ticks>
   13656:	b160      	cbz	r0, 13672 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   13658:	4b09      	ldr	r3, [pc, #36]	; (13680 <console_vprintf+0x34>)
   1365a:	681b      	ldr	r3, [r3, #0]
   1365c:	b10b      	cbz	r3, 13662 <console_vprintf+0x16>
    num_chars = 0;
   1365e:	2600      	movs	r6, #0
   13660:	e008      	b.n	13674 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   13662:	f7fb f845 	bl	e6f0 <os_time_get>
   13666:	4601      	mov	r1, r0
   13668:	4806      	ldr	r0, [pc, #24]	; (13684 <console_vprintf+0x38>)
   1366a:	f7fe fb13 	bl	11c94 <printf>
   1366e:	4606      	mov	r6, r0
   13670:	e000      	b.n	13674 <console_vprintf+0x28>
    num_chars = 0;
   13672:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   13674:	4629      	mov	r1, r5
   13676:	4620      	mov	r0, r4
   13678:	f009 f874 	bl	1c764 <vprintf>

    return num_chars;
}
   1367c:	4430      	add	r0, r6
   1367e:	bd70      	pop	{r4, r5, r6, pc}
   13680:	2000683c 	.word	0x2000683c
   13684:	00023ccc 	.word	0x00023ccc

00013688 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   13688:	b40f      	push	{r0, r1, r2, r3}
   1368a:	b500      	push	{lr}
   1368c:	b083      	sub	sp, #12
   1368e:	a904      	add	r1, sp, #16
   13690:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   13694:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   13696:	f7ff ffd9 	bl	1364c <console_vprintf>
    va_end(args);

    return num_chars;
}
   1369a:	b003      	add	sp, #12
   1369c:	f85d eb04 	ldr.w	lr, [sp], #4
   136a0:	b004      	add	sp, #16
   136a2:	4770      	bx	lr

000136a4 <rtt_console_wait_for_retry>:

#if MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT) > 0

static void
rtt_console_wait_for_retry(void)
{
   136a4:	b508      	push	{r3, lr}
   136a6:	4b05      	ldr	r3, [pc, #20]	; (136bc <rtt_console_wait_for_retry+0x18>)
   136a8:	685b      	ldr	r3, [r3, #4]
   136aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    uint32_t ticks;

    if (os_arch_in_isr()) {
   136ae:	b103      	cbz	r3, 136b2 <rtt_console_wait_for_retry+0xe>
#endif
    } else {
        ticks = max(1, os_time_ms_to_ticks32(MYNEWT_VAL(CONSOLE_RTT_RETRY_DELAY_MS)));
        os_time_delay(ticks);
    }
}
   136b0:	bd08      	pop	{r3, pc}
        os_time_delay(ticks);
   136b2:	2001      	movs	r0, #1
   136b4:	f7fb f844 	bl	e740 <os_time_delay>
}
   136b8:	e7fa      	b.n	136b0 <rtt_console_wait_for_retry+0xc>
   136ba:	bf00      	nop
   136bc:	e000ed00 	.word	0xe000ed00

000136c0 <rtt_console_write_ch>:

static void
rtt_console_write_ch(char c)
{
   136c0:	b530      	push	{r4, r5, lr}
   136c2:	b083      	sub	sp, #12
   136c4:	f88d 0007 	strb.w	r0, [sp, #7]
   136c8:	e00a      	b.n	136e0 <rtt_console_write_ch+0x20>
         * read data), we stop retrying until successful write (which means that
         * host is reading data).
         */

        if (ret) {
            rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
   136ca:	4b0f      	ldr	r3, [pc, #60]	; (13708 <rtt_console_write_ch+0x48>)
   136cc:	2202      	movs	r2, #2
   136ce:	601a      	str	r2, [r3, #0]
        }

        rtt_console_wait_for_retry();
        rtt_console_retries_left--;
    }
}
   136d0:	b003      	add	sp, #12
   136d2:	bd30      	pop	{r4, r5, pc}
        rtt_console_wait_for_retry();
   136d4:	f7ff ffe6 	bl	136a4 <rtt_console_wait_for_retry>
        rtt_console_retries_left--;
   136d8:	4a0b      	ldr	r2, [pc, #44]	; (13708 <rtt_console_write_ch+0x48>)
   136da:	6813      	ldr	r3, [r2, #0]
   136dc:	3b01      	subs	r3, #1
   136de:	6013      	str	r3, [r2, #0]
        OS_ENTER_CRITICAL(sr);
   136e0:	f7f9 fd68 	bl	d1b4 <os_arch_save_sr>
   136e4:	4605      	mov	r5, r0
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
   136e6:	2201      	movs	r2, #1
   136e8:	f10d 0107 	add.w	r1, sp, #7
   136ec:	2000      	movs	r0, #0
   136ee:	f003 ffcb 	bl	17688 <SEGGER_RTT_WriteNoLock>
   136f2:	4604      	mov	r4, r0
        OS_EXIT_CRITICAL(sr);
   136f4:	4628      	mov	r0, r5
   136f6:	f7f9 fd63 	bl	d1c0 <os_arch_restore_sr>
        if (ret) {
   136fa:	2c00      	cmp	r4, #0
   136fc:	d1e5      	bne.n	136ca <rtt_console_write_ch+0xa>
        if (rtt_console_retries_left <= 0) {
   136fe:	4b02      	ldr	r3, [pc, #8]	; (13708 <rtt_console_write_ch+0x48>)
   13700:	681b      	ldr	r3, [r3, #0]
   13702:	2b00      	cmp	r3, #0
   13704:	dce6      	bgt.n	136d4 <rtt_console_write_ch+0x14>
   13706:	e7e3      	b.n	136d0 <rtt_console_write_ch+0x10>
   13708:	20001408 	.word	0x20001408

0001370c <rtt_console_poll_func>:
#define RTT_INPUT_POLL_INTERVAL_STEP    10 /* ms */
#define RTT_INPUT_POLL_INTERVAL_MAX     MYNEWT_VAL(CONSOLE_RTT_INPUT_POLL_INTERVAL_MAX)

static void
rtt_console_poll_func(void *arg)
{
   1370c:	b508      	push	{r3, lr}
    static uint32_t itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    static int key = -1;
    int ret;

    if (key < 0) {
   1370e:	4b18      	ldr	r3, [pc, #96]	; (13770 <rtt_console_poll_func+0x64>)
   13710:	681b      	ldr	r3, [r3, #0]
   13712:	2b00      	cmp	r3, #0
   13714:	db11      	blt.n	1373a <rtt_console_poll_func+0x2e>
        key = SEGGER_RTT_GetKey();
    }

    if (key < 0) {
   13716:	4b16      	ldr	r3, [pc, #88]	; (13770 <rtt_console_poll_func+0x64>)
   13718:	681b      	ldr	r3, [r3, #0]
   1371a:	2b00      	cmp	r3, #0
   1371c:	db12      	blt.n	13744 <rtt_console_poll_func+0x38>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
    } else {
        while (key >= 0) {
   1371e:	4b14      	ldr	r3, [pc, #80]	; (13770 <rtt_console_poll_func+0x64>)
   13720:	6818      	ldr	r0, [r3, #0]
   13722:	2800      	cmp	r0, #0
   13724:	db20      	blt.n	13768 <rtt_console_poll_func+0x5c>
            ret = console_handle_char((char)key);
   13726:	b2c0      	uxtb	r0, r0
   13728:	f7ff fdca 	bl	132c0 <console_handle_char>
            if (ret < 0) {
   1372c:	2800      	cmp	r0, #0
   1372e:	db1a      	blt.n	13766 <rtt_console_poll_func+0x5a>
                return;
            }
            key = SEGGER_RTT_GetKey();
   13730:	f004 f880 	bl	17834 <SEGGER_RTT_GetKey>
   13734:	4b0e      	ldr	r3, [pc, #56]	; (13770 <rtt_console_poll_func+0x64>)
   13736:	6018      	str	r0, [r3, #0]
   13738:	e7f1      	b.n	1371e <rtt_console_poll_func+0x12>
        key = SEGGER_RTT_GetKey();
   1373a:	f004 f87b 	bl	17834 <SEGGER_RTT_GetKey>
   1373e:	4b0c      	ldr	r3, [pc, #48]	; (13770 <rtt_console_poll_func+0x64>)
   13740:	6018      	str	r0, [r3, #0]
   13742:	e7e8      	b.n	13716 <rtt_console_poll_func+0xa>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
   13744:	4a0b      	ldr	r2, [pc, #44]	; (13774 <rtt_console_poll_func+0x68>)
   13746:	6813      	ldr	r3, [r2, #0]
   13748:	330a      	adds	r3, #10
   1374a:	6013      	str	r3, [r2, #0]
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
   1374c:	2bfa      	cmp	r3, #250	; 0xfa
   1374e:	bf28      	it	cs
   13750:	23fa      	movcs	r3, #250	; 0xfa
   13752:	6013      	str	r3, [r2, #0]
        }
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    }

    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
   13754:	4b07      	ldr	r3, [pc, #28]	; (13774 <rtt_console_poll_func+0x68>)
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1375c:	fb03 f101 	mul.w	r1, r3, r1
   13760:	4805      	ldr	r0, [pc, #20]	; (13778 <rtt_console_poll_func+0x6c>)
   13762:	f7fa f85d 	bl	d820 <os_cputime_timer_relative>
}
   13766:	bd08      	pop	{r3, pc}
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
   13768:	4b02      	ldr	r3, [pc, #8]	; (13774 <rtt_console_poll_func+0x68>)
   1376a:	220a      	movs	r2, #10
   1376c:	601a      	str	r2, [r3, #0]
   1376e:	e7f1      	b.n	13754 <rtt_console_poll_func+0x48>
   13770:	20001404 	.word	0x20001404
   13774:	20001400 	.word	0x20001400
   13778:	2000686c 	.word	0x2000686c

0001377c <console_out_nolock>:
{
   1377c:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   1377e:	b2c5      	uxtb	r5, r0
    if (g_console_silence) {
   13780:	4b0b      	ldr	r3, [pc, #44]	; (137b0 <console_out_nolock+0x34>)
   13782:	781b      	ldrb	r3, [r3, #0]
   13784:	b953      	cbnz	r3, 1379c <console_out_nolock+0x20>
   13786:	4604      	mov	r4, r0
    if ('\n' == c) {
   13788:	2d0a      	cmp	r5, #10
   1378a:	d009      	beq.n	137a0 <console_out_nolock+0x24>
        console_is_midline = 1;
   1378c:	4b09      	ldr	r3, [pc, #36]	; (137b4 <console_out_nolock+0x38>)
   1378e:	2201      	movs	r2, #1
   13790:	601a      	str	r2, [r3, #0]
    rtt_console_write_ch(c);
   13792:	4628      	mov	r0, r5
   13794:	f7ff ff94 	bl	136c0 <rtt_console_write_ch>
    return character;
   13798:	4620      	mov	r0, r4
}
   1379a:	bd38      	pop	{r3, r4, r5, pc}
        return c;
   1379c:	4628      	mov	r0, r5
   1379e:	e7fc      	b.n	1379a <console_out_nolock+0x1e>
        rtt_console_write_ch('\r');
   137a0:	200d      	movs	r0, #13
   137a2:	f7ff ff8d 	bl	136c0 <rtt_console_write_ch>
        console_is_midline = 0;
   137a6:	4b03      	ldr	r3, [pc, #12]	; (137b4 <console_out_nolock+0x38>)
   137a8:	2200      	movs	r2, #0
   137aa:	601a      	str	r2, [r3, #0]
   137ac:	e7f1      	b.n	13792 <console_out_nolock+0x16>
   137ae:	bf00      	nop
   137b0:	20006859 	.word	0x20006859
   137b4:	2000683c 	.word	0x2000683c

000137b8 <console_rx_restart>:
{
   137b8:	b508      	push	{r3, lr}
    os_cputime_timer_relative(&rtt_timer, 0);
   137ba:	2100      	movs	r1, #0
   137bc:	4801      	ldr	r0, [pc, #4]	; (137c4 <console_rx_restart+0xc>)
   137be:	f7fa f82f 	bl	d820 <os_cputime_timer_relative>
}
   137c2:	bd08      	pop	{r3, pc}
   137c4:	2000686c 	.word	0x2000686c

000137c8 <rtt_console_is_init>:

int
rtt_console_is_init(void)
{
    return 1;
}
   137c8:	2001      	movs	r0, #1
   137ca:	4770      	bx	lr

000137cc <rtt_console_init>:

int
rtt_console_init(void)
{
   137cc:	b510      	push	{r4, lr}
#if MYNEWT_VAL(CONSOLE_INPUT)
    os_cputime_timer_init(&rtt_timer, rtt_console_poll_func, NULL);
   137ce:	4c06      	ldr	r4, [pc, #24]	; (137e8 <rtt_console_init+0x1c>)
   137d0:	2200      	movs	r2, #0
   137d2:	4906      	ldr	r1, [pc, #24]	; (137ec <rtt_console_init+0x20>)
   137d4:	4620      	mov	r0, r4
   137d6:	f7fa f807 	bl	d7e8 <os_cputime_timer_init>
    /* start after a second */
    os_cputime_timer_relative(&rtt_timer, 1000000);
   137da:	4905      	ldr	r1, [pc, #20]	; (137f0 <rtt_console_init+0x24>)
   137dc:	4620      	mov	r0, r4
   137de:	f7fa f81f 	bl	d820 <os_cputime_timer_relative>
#endif
    return 0;
}
   137e2:	2000      	movs	r0, #0
   137e4:	bd10      	pop	{r4, pc}
   137e6:	bf00      	nop
   137e8:	2000686c 	.word	0x2000686c
   137ec:	0001370d 	.word	0x0001370d
   137f0:	000f4240 	.word	0x000f4240

000137f4 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
   137f4:	4b01      	ldr	r3, [pc, #4]	; (137fc <console_no_ticks+0x8>)
   137f6:	2200      	movs	r2, #0
   137f8:	701a      	strb	r2, [r3, #0]
}
   137fa:	4770      	bx	lr
   137fc:	2000140c 	.word	0x2000140c

00013800 <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
   13800:	4b01      	ldr	r3, [pc, #4]	; (13808 <console_yes_ticks+0x8>)
   13802:	2201      	movs	r2, #1
   13804:	701a      	strb	r2, [r3, #0]
}
   13806:	4770      	bx	lr
   13808:	2000140c 	.word	0x2000140c

0001380c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1380c:	4b01      	ldr	r3, [pc, #4]	; (13814 <console_get_ticks+0x8>)
   1380e:	7818      	ldrb	r0, [r3, #0]
   13810:	4770      	bx	lr
   13812:	bf00      	nop
   13814:	2000140c 	.word	0x2000140c

00013818 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
   13818:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
   1381a:	4b09      	ldr	r3, [pc, #36]	; (13840 <get_prompt+0x28>)
   1381c:	681b      	ldr	r3, [r3, #0]
   1381e:	b113      	cbz	r3, 13826 <get_prompt+0xe>

        str = app_prompt_handler();
   13820:	4798      	blx	r3
        if (str) {
   13822:	b100      	cbz	r0, 13826 <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
   13824:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
   13826:	4b07      	ldr	r3, [pc, #28]	; (13844 <get_prompt+0x2c>)
   13828:	681b      	ldr	r3, [r3, #0]
   1382a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1382e:	d003      	beq.n	13838 <get_prompt+0x20>
        return shell_modules[default_module].name;
   13830:	4a05      	ldr	r2, [pc, #20]	; (13848 <get_prompt+0x30>)
   13832:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   13836:	e7f5      	b.n	13824 <get_prompt+0xc>
    return prompt;
   13838:	4b04      	ldr	r3, [pc, #16]	; (1384c <get_prompt+0x34>)
   1383a:	6818      	ldr	r0, [r3, #0]
   1383c:	e7f2      	b.n	13824 <get_prompt+0xc>
   1383e:	bf00      	nop
   13840:	20006894 	.word	0x20006894
   13844:	20001410 	.word	0x20001410
   13848:	20006c1c 	.word	0x20006c1c
   1384c:	20006bf4 	.word	0x20006bf4

00013850 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   13850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13852:	4606      	mov	r6, r0
   13854:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   13856:	4914      	ldr	r1, [pc, #80]	; (138a8 <print_module_commands+0x58>)
   13858:	4628      	mov	r0, r5
   1385a:	f002 fbf8 	bl	1604e <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1385e:	2400      	movs	r4, #0
   13860:	e004      	b.n	1386c <print_module_commands+0x1c>
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
   13862:	4912      	ldr	r1, [pc, #72]	; (138ac <print_module_commands+0x5c>)
   13864:	4628      	mov	r0, r5
   13866:	f002 fbf2 	bl	1604e <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1386a:	3401      	adds	r4, #1
   1386c:	4b10      	ldr	r3, [pc, #64]	; (138b0 <print_module_commands+0x60>)
   1386e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   13872:	685b      	ldr	r3, [r3, #4]
   13874:	0127      	lsls	r7, r4, #4
   13876:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1387a:	689a      	ldr	r2, [r3, #8]
   1387c:	b19a      	cbz	r2, 138a6 <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   1387e:	490d      	ldr	r1, [pc, #52]	; (138b4 <print_module_commands+0x64>)
   13880:	4628      	mov	r0, r5
   13882:	f002 fbe4 	bl	1604e <streamer_printf>
        if (shell_module->commands[i].help &&
   13886:	4b0a      	ldr	r3, [pc, #40]	; (138b0 <print_module_commands+0x60>)
   13888:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1388c:	685b      	ldr	r3, [r3, #4]
   1388e:	443b      	add	r3, r7
   13890:	68db      	ldr	r3, [r3, #12]
   13892:	2b00      	cmp	r3, #0
   13894:	d0e5      	beq.n	13862 <print_module_commands+0x12>
            shell_module->commands[i].help->summary) {
   13896:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   13898:	2a00      	cmp	r2, #0
   1389a:	d0e2      	beq.n	13862 <print_module_commands+0x12>
            streamer_printf(streamer, "%s",
   1389c:	4906      	ldr	r1, [pc, #24]	; (138b8 <print_module_commands+0x68>)
   1389e:	4628      	mov	r0, r5
   138a0:	f002 fbd5 	bl	1604e <streamer_printf>
   138a4:	e7dd      	b.n	13862 <print_module_commands+0x12>
    }
}
   138a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138a8:	00023cd4 	.word	0x00023cd4
   138ac:	00023d90 	.word	0x00023d90
   138b0:	20006c1c 	.word	0x20006c1c
   138b4:	00023cdc 	.word	0x00023cdc
   138b8:	00023c4c 	.word	0x00023c4c

000138bc <print_modules>:
{
   138bc:	b538      	push	{r3, r4, r5, lr}
   138be:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   138c0:	2400      	movs	r4, #0
   138c2:	e007      	b.n	138d4 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   138c4:	4b06      	ldr	r3, [pc, #24]	; (138e0 <print_modules+0x24>)
   138c6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   138ca:	4906      	ldr	r1, [pc, #24]	; (138e4 <print_modules+0x28>)
   138cc:	4628      	mov	r0, r5
   138ce:	f002 fbbe 	bl	1604e <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   138d2:	3401      	adds	r4, #1
   138d4:	4b04      	ldr	r3, [pc, #16]	; (138e8 <print_modules+0x2c>)
   138d6:	681b      	ldr	r3, [r3, #0]
   138d8:	429c      	cmp	r4, r3
   138da:	d3f3      	bcc.n	138c4 <print_modules+0x8>
}
   138dc:	bd38      	pop	{r3, r4, r5, pc}
   138de:	bf00      	nop
   138e0:	20006c1c 	.word	0x20006c1c
   138e4:	00023fa0 	.word	0x00023fa0
   138e8:	20006bf0 	.word	0x20006bf0

000138ec <print_command_params>:
{
   138ec:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   138ee:	4b0e      	ldr	r3, [pc, #56]	; (13928 <print_command_params+0x3c>)
   138f0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   138f4:	685d      	ldr	r5, [r3, #4]
   138f6:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   138fa:	68eb      	ldr	r3, [r5, #12]
   138fc:	b19b      	cbz	r3, 13926 <print_command_params+0x3a>
   138fe:	4616      	mov	r6, r2
   13900:	689b      	ldr	r3, [r3, #8]
   13902:	b183      	cbz	r3, 13926 <print_command_params+0x3a>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   13904:	2400      	movs	r4, #0
   13906:	e006      	b.n	13916 <print_command_params+0x2a>
		streamer_printf(streamer, "%-30s%s\n",
   13908:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1390c:	4907      	ldr	r1, [pc, #28]	; (1392c <print_command_params+0x40>)
   1390e:	4630      	mov	r0, r6
   13910:	f002 fb9d 	bl	1604e <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   13914:	3401      	adds	r4, #1
   13916:	68eb      	ldr	r3, [r5, #12]
   13918:	689b      	ldr	r3, [r3, #8]
   1391a:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
   1391e:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   13922:	2a00      	cmp	r2, #0
   13924:	d1f0      	bne.n	13908 <print_command_params+0x1c>
}
   13926:	bd70      	pop	{r4, r5, r6, pc}
   13928:	20006c1c 	.word	0x20006c1c
   1392c:	00023ce4 	.word	0x00023ce4

00013930 <get_destination_module>:
{
   13930:	b570      	push	{r4, r5, r6, lr}
   13932:	4606      	mov	r6, r0
   13934:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   13936:	2400      	movs	r4, #0
   13938:	e007      	b.n	1394a <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
   1393a:	4b0e      	ldr	r3, [pc, #56]	; (13974 <get_destination_module+0x44>)
   1393c:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   13940:	4630      	mov	r0, r6
   13942:	f7fd fdc7 	bl	114d4 <strcmp>
   13946:	b190      	cbz	r0, 1396e <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
   13948:	3401      	adds	r4, #1
   1394a:	4b0b      	ldr	r3, [pc, #44]	; (13978 <get_destination_module+0x48>)
   1394c:	681b      	ldr	r3, [r3, #0]
   1394e:	429c      	cmp	r4, r3
   13950:	d20b      	bcs.n	1396a <get_destination_module+0x3a>
        if (len < 0) {
   13952:	2d00      	cmp	r5, #0
   13954:	dbf1      	blt.n	1393a <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   13956:	462a      	mov	r2, r5
   13958:	4b06      	ldr	r3, [pc, #24]	; (13974 <get_destination_module+0x44>)
   1395a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1395e:	4630      	mov	r0, r6
   13960:	f008 fec6 	bl	1c6f0 <strncmp>
   13964:	2800      	cmp	r0, #0
   13966:	d1ef      	bne.n	13948 <get_destination_module+0x18>
   13968:	e001      	b.n	1396e <get_destination_module+0x3e>
    return -1;
   1396a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1396e:	4620      	mov	r0, r4
   13970:	bd70      	pop	{r4, r5, r6, pc}
   13972:	bf00      	nop
   13974:	20006c1c 	.word	0x20006c1c
   13978:	20006bf0 	.word	0x20006bf0

0001397c <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   1397c:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   1397e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13982:	f7ff ffd5 	bl	13930 <get_destination_module>

    if (module == -1) {
   13986:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1398a:	d002      	beq.n	13992 <set_default_module+0x16>
        return -1;
    }

    default_module = module;
   1398c:	4b01      	ldr	r3, [pc, #4]	; (13994 <set_default_module+0x18>)
   1398e:	6018      	str	r0, [r3, #0]

    return 0;
   13990:	2000      	movs	r0, #0
}
   13992:	bd08      	pop	{r3, pc}
   13994:	20001410 	.word	0x20001410

00013998 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
   13998:	b508      	push	{r3, lr}
    if (argc == 1) {
   1399a:	2901      	cmp	r1, #1
   1399c:	d105      	bne.n	139aa <select_module+0x12>
        default_module = -1;
   1399e:	4b05      	ldr	r3, [pc, #20]	; (139b4 <select_module+0x1c>)
   139a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139a4:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   139a6:	2000      	movs	r0, #0
   139a8:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   139aa:	6850      	ldr	r0, [r2, #4]
   139ac:	f7ff ffe6 	bl	1397c <set_default_module>
   139b0:	e7f9      	b.n	139a6 <select_module+0xe>
   139b2:	bf00      	nop
   139b4:	20001410 	.word	0x20001410

000139b8 <get_command_and_module>:
{
   139b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139ba:	4617      	mov	r7, r2
    *module = -1;
   139bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   139c0:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
   139c2:	6806      	ldr	r6, [r0, #0]
   139c4:	b156      	cbz	r6, 139dc <get_command_and_module+0x24>
   139c6:	4604      	mov	r4, r0
   139c8:	460d      	mov	r5, r1
    if (default_module == -1) {
   139ca:	4b15      	ldr	r3, [pc, #84]	; (13a20 <get_command_and_module+0x68>)
   139cc:	681b      	ldr	r3, [r3, #0]
   139ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   139d2:	d008      	beq.n	139e6 <get_command_and_module+0x2e>
    *module = default_module;
   139d4:	600b      	str	r3, [r1, #0]
    return argv[0];
   139d6:	6806      	ldr	r6, [r0, #0]
}
   139d8:	4630      	mov	r0, r6
   139da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
   139dc:	4911      	ldr	r1, [pc, #68]	; (13a24 <get_command_and_module+0x6c>)
   139de:	4610      	mov	r0, r2
   139e0:	f002 fb35 	bl	1604e <streamer_printf>
        return NULL;
   139e4:	e7f8      	b.n	139d8 <get_command_and_module+0x20>
        if (!argv[1] || argv[1][0] == '\0') {
   139e6:	6843      	ldr	r3, [r0, #4]
   139e8:	b163      	cbz	r3, 13a04 <get_command_and_module+0x4c>
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	b153      	cbz	r3, 13a04 <get_command_and_module+0x4c>
        *module = get_destination_module(argv[0], -1);
   139ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   139f2:	4630      	mov	r0, r6
   139f4:	f7ff ff9c 	bl	13930 <get_destination_module>
   139f8:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   139fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   139fe:	d008      	beq.n	13a12 <get_command_and_module+0x5a>
        return argv[1];
   13a00:	6866      	ldr	r6, [r4, #4]
   13a02:	e7e9      	b.n	139d8 <get_command_and_module+0x20>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   13a04:	4632      	mov	r2, r6
   13a06:	4908      	ldr	r1, [pc, #32]	; (13a28 <get_command_and_module+0x70>)
   13a08:	4638      	mov	r0, r7
   13a0a:	f002 fb20 	bl	1604e <streamer_printf>
            return NULL;
   13a0e:	2600      	movs	r6, #0
   13a10:	e7e2      	b.n	139d8 <get_command_and_module+0x20>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   13a12:	6822      	ldr	r2, [r4, #0]
   13a14:	4905      	ldr	r1, [pc, #20]	; (13a2c <get_command_and_module+0x74>)
   13a16:	4638      	mov	r0, r7
   13a18:	f002 fb19 	bl	1604e <streamer_printf>
            return NULL;
   13a1c:	2600      	movs	r6, #0
   13a1e:	e7db      	b.n	139d8 <get_command_and_module+0x20>
   13a20:	20001410 	.word	0x20001410
   13a24:	00023cf0 	.word	0x00023cf0
   13a28:	00023d08 	.word	0x00023d08
   13a2c:	00023d24 	.word	0x00023d24

00013a30 <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
   13a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a32:	b083      	sub	sp, #12
   13a34:	4616      	mov	r6, r2
    const char *first_string = argv[0];
   13a36:	680d      	ldr	r5, [r1, #0]
    int module = -1;
   13a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a3c:	9301      	str	r3, [sp, #4]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
   13a3e:	b31d      	cbz	r5, 13a88 <shell_find_cmd+0x58>
   13a40:	4607      	mov	r7, r0
   13a42:	460c      	mov	r4, r1
   13a44:	782b      	ldrb	r3, [r5, #0]
   13a46:	b1fb      	cbz	r3, 13a88 <shell_find_cmd+0x58>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (!strcmp(first_string, "help")) {
   13a48:	4922      	ldr	r1, [pc, #136]	; (13ad4 <shell_find_cmd+0xa4>)
   13a4a:	4628      	mov	r0, r5
   13a4c:	f7fd fd42 	bl	114d4 <strcmp>
   13a50:	2800      	cmp	r0, #0
   13a52:	d035      	beq.n	13ac0 <shell_find_cmd+0x90>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
   13a54:	4920      	ldr	r1, [pc, #128]	; (13ad8 <shell_find_cmd+0xa8>)
   13a56:	4628      	mov	r0, r5
   13a58:	f7fd fd3c 	bl	114d4 <strcmp>
   13a5c:	2800      	cmp	r0, #0
   13a5e:	d033      	beq.n	13ac8 <shell_find_cmd+0x98>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (default_module == -1)) {
   13a60:	2f01      	cmp	r7, #1
   13a62:	d104      	bne.n	13a6e <shell_find_cmd+0x3e>
   13a64:	4b1d      	ldr	r3, [pc, #116]	; (13adc <shell_find_cmd+0xac>)
   13a66:	681b      	ldr	r3, [r3, #0]
   13a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13a6c:	d012      	beq.n	13a94 <shell_find_cmd+0x64>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
   13a6e:	4632      	mov	r2, r6
   13a70:	a901      	add	r1, sp, #4
   13a72:	4620      	mov	r0, r4
   13a74:	f7ff ffa0 	bl	139b8 <get_command_and_module>
   13a78:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
   13a7a:	9f01      	ldr	r7, [sp, #4]
   13a7c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   13a80:	d024      	beq.n	13acc <shell_find_cmd+0x9c>
   13a82:	b328      	cbz	r0, 13ad0 <shell_find_cmd+0xa0>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13a84:	2500      	movs	r5, #0
   13a86:	e00c      	b.n	13aa2 <shell_find_cmd+0x72>
        streamer_printf(streamer, "Illegal parameter\n");
   13a88:	4915      	ldr	r1, [pc, #84]	; (13ae0 <shell_find_cmd+0xb0>)
   13a8a:	4630      	mov	r0, r6
   13a8c:	f002 fadf 	bl	1604e <streamer_printf>
        return NULL;
   13a90:	2100      	movs	r1, #0
   13a92:	e016      	b.n	13ac2 <shell_find_cmd+0x92>
        streamer_printf(streamer, "Missing parameter\n");
   13a94:	4913      	ldr	r1, [pc, #76]	; (13ae4 <shell_find_cmd+0xb4>)
   13a96:	4630      	mov	r0, r6
   13a98:	f002 fad9 	bl	1604e <streamer_printf>
        return NULL;
   13a9c:	2100      	movs	r1, #0
   13a9e:	e010      	b.n	13ac2 <shell_find_cmd+0x92>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13aa0:	3501      	adds	r5, #1
   13aa2:	4b11      	ldr	r3, [pc, #68]	; (13ae8 <shell_find_cmd+0xb8>)
   13aa4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   13aa8:	685c      	ldr	r4, [r3, #4]
   13aaa:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   13aae:	68a1      	ldr	r1, [r4, #8]
   13ab0:	b139      	cbz	r1, 13ac2 <shell_find_cmd+0x92>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   13ab2:	4630      	mov	r0, r6
   13ab4:	f7fd fd0e 	bl	114d4 <strcmp>
   13ab8:	2800      	cmp	r0, #0
   13aba:	d1f1      	bne.n	13aa0 <shell_find_cmd+0x70>
            return &shell_module->commands[i];
   13abc:	4621      	mov	r1, r4
   13abe:	e000      	b.n	13ac2 <shell_find_cmd+0x92>
        return &shell_cmd_help;
   13ac0:	490a      	ldr	r1, [pc, #40]	; (13aec <shell_find_cmd+0xbc>)
        }
    }

    return NULL;
}
   13ac2:	4608      	mov	r0, r1
   13ac4:	b003      	add	sp, #12
   13ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &shell_cmd_select_module;
   13ac8:	4909      	ldr	r1, [pc, #36]	; (13af0 <shell_find_cmd+0xc0>)
   13aca:	e7fa      	b.n	13ac2 <shell_find_cmd+0x92>
        return NULL;
   13acc:	2100      	movs	r1, #0
   13ace:	e7f8      	b.n	13ac2 <shell_find_cmd+0x92>
   13ad0:	4601      	mov	r1, r0
   13ad2:	e7f6      	b.n	13ac2 <shell_find_cmd+0x92>
   13ad4:	00023d4c 	.word	0x00023d4c
   13ad8:	00023d54 	.word	0x00023d54
   13adc:	20001410 	.word	0x20001410
   13ae0:	00023d38 	.word	0x00023d38
   13ae4:	00023d5c 	.word	0x00023d5c
   13ae8:	20006c1c 	.word	0x20006c1c
   13aec:	00023ed0 	.word	0x00023ed0
   13af0:	00023ee0 	.word	0x00023ee0

00013af4 <show_cmd_help>:
{
   13af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13af8:	b083      	sub	sp, #12
   13afa:	4681      	mov	r9, r0
   13afc:	4688      	mov	r8, r1
    int module = -1;
   13afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b02:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
   13b04:	460a      	mov	r2, r1
   13b06:	a901      	add	r1, sp, #4
   13b08:	f7ff ff56 	bl	139b8 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
   13b0c:	9f01      	ldr	r7, [sp, #4]
   13b0e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   13b12:	d04d      	beq.n	13bb0 <show_cmd_help+0xbc>
   13b14:	4606      	mov	r6, r0
   13b16:	2800      	cmp	r0, #0
   13b18:	d04a      	beq.n	13bb0 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13b1a:	2500      	movs	r5, #0
   13b1c:	e009      	b.n	13b32 <show_cmd_help+0x3e>
                               !cmd->help->usage &&
   13b1e:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
   13b20:	b9d9      	cbnz	r1, 13b5a <show_cmd_help+0x66>
                               !cmd->help->params)) {
   13b22:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
   13b24:	b9cb      	cbnz	r3, 13b5a <show_cmd_help+0x66>
                streamer_printf(streamer, "(no help available)\n");
   13b26:	4924      	ldr	r1, [pc, #144]	; (13bb8 <show_cmd_help+0xc4>)
   13b28:	4640      	mov	r0, r8
   13b2a:	f002 fa90 	bl	1604e <streamer_printf>
                return 0;
   13b2e:	e03f      	b.n	13bb0 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13b30:	3501      	adds	r5, #1
   13b32:	4b22      	ldr	r3, [pc, #136]	; (13bbc <show_cmd_help+0xc8>)
   13b34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   13b38:	685c      	ldr	r4, [r3, #4]
   13b3a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   13b3e:	68a1      	ldr	r1, [r4, #8]
   13b40:	2900      	cmp	r1, #0
   13b42:	d02f      	beq.n	13ba4 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
   13b44:	4630      	mov	r0, r6
   13b46:	f7fd fcc5 	bl	114d4 <strcmp>
   13b4a:	2800      	cmp	r0, #0
   13b4c:	d1f0      	bne.n	13b30 <show_cmd_help+0x3c>
            if (!cmd->help || (!cmd->help->summary &&
   13b4e:	68e3      	ldr	r3, [r4, #12]
   13b50:	2b00      	cmp	r3, #0
   13b52:	d0e8      	beq.n	13b26 <show_cmd_help+0x32>
   13b54:	681a      	ldr	r2, [r3, #0]
   13b56:	2a00      	cmp	r2, #0
   13b58:	d0e1      	beq.n	13b1e <show_cmd_help+0x2a>
            if (cmd->help->summary) {
   13b5a:	b14a      	cbz	r2, 13b70 <show_cmd_help+0x7c>
                streamer_printf(streamer, "Summary:\n");
   13b5c:	4918      	ldr	r1, [pc, #96]	; (13bc0 <show_cmd_help+0xcc>)
   13b5e:	4640      	mov	r0, r8
   13b60:	f002 fa75 	bl	1604e <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   13b64:	68e3      	ldr	r3, [r4, #12]
   13b66:	681a      	ldr	r2, [r3, #0]
   13b68:	4916      	ldr	r1, [pc, #88]	; (13bc4 <show_cmd_help+0xd0>)
   13b6a:	4640      	mov	r0, r8
   13b6c:	f002 fa6f 	bl	1604e <streamer_printf>
            if (cmd->help->usage) {
   13b70:	68e3      	ldr	r3, [r4, #12]
   13b72:	685b      	ldr	r3, [r3, #4]
   13b74:	b14b      	cbz	r3, 13b8a <show_cmd_help+0x96>
                streamer_printf(streamer, "Usage:\n");
   13b76:	4914      	ldr	r1, [pc, #80]	; (13bc8 <show_cmd_help+0xd4>)
   13b78:	4640      	mov	r0, r8
   13b7a:	f002 fa68 	bl	1604e <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   13b7e:	68e3      	ldr	r3, [r4, #12]
   13b80:	685a      	ldr	r2, [r3, #4]
   13b82:	4910      	ldr	r1, [pc, #64]	; (13bc4 <show_cmd_help+0xd0>)
   13b84:	4640      	mov	r0, r8
   13b86:	f002 fa62 	bl	1604e <streamer_printf>
            if (cmd->help->params) {
   13b8a:	68e3      	ldr	r3, [r4, #12]
   13b8c:	689b      	ldr	r3, [r3, #8]
   13b8e:	b17b      	cbz	r3, 13bb0 <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
   13b90:	490e      	ldr	r1, [pc, #56]	; (13bcc <show_cmd_help+0xd8>)
   13b92:	4640      	mov	r0, r8
   13b94:	f002 fa5b 	bl	1604e <streamer_printf>
                print_command_params(module, i, streamer);
   13b98:	4642      	mov	r2, r8
   13b9a:	4629      	mov	r1, r5
   13b9c:	9801      	ldr	r0, [sp, #4]
   13b9e:	f7ff fea5 	bl	138ec <print_command_params>
            return 0;
   13ba2:	e005      	b.n	13bb0 <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   13ba4:	f8d9 2000 	ldr.w	r2, [r9]
   13ba8:	4909      	ldr	r1, [pc, #36]	; (13bd0 <show_cmd_help+0xdc>)
   13baa:	4640      	mov	r0, r8
   13bac:	f002 fa4f 	bl	1604e <streamer_printf>
}
   13bb0:	2000      	movs	r0, #0
   13bb2:	b003      	add	sp, #12
   13bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13bb8:	00023d70 	.word	0x00023d70
   13bbc:	20006c1c 	.word	0x20006c1c
   13bc0:	00023d88 	.word	0x00023d88
   13bc4:	00023fa0 	.word	0x00023fa0
   13bc8:	00023d94 	.word	0x00023d94
   13bcc:	00023d9c 	.word	0x00023d9c
   13bd0:	00023d08 	.word	0x00023d08

00013bd4 <show_help>:
{
   13bd4:	b538      	push	{r3, r4, r5, lr}
   13bd6:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   13bd8:	2902      	cmp	r1, #2
   13bda:	dc1a      	bgt.n	13c12 <show_help+0x3e>
   13bdc:	4b1b      	ldr	r3, [pc, #108]	; (13c4c <show_help+0x78>)
   13bde:	6818      	ldr	r0, [r3, #0]
   13be0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13be4:	d001      	beq.n	13bea <show_help+0x16>
   13be6:	2902      	cmp	r1, #2
   13be8:	d013      	beq.n	13c12 <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   13bea:	2902      	cmp	r1, #2
   13bec:	d016      	beq.n	13c1c <show_help+0x48>
   13bee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13bf2:	d001      	beq.n	13bf8 <show_help+0x24>
   13bf4:	2901      	cmp	r1, #1
   13bf6:	d011      	beq.n	13c1c <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
   13bf8:	4915      	ldr	r1, [pc, #84]	; (13c50 <show_help+0x7c>)
   13bfa:	4620      	mov	r0, r4
   13bfc:	f002 fa27 	bl	1604e <streamer_printf>
        print_modules(streamer);
   13c00:	4620      	mov	r0, r4
   13c02:	f7ff fe5b 	bl	138bc <print_modules>
        streamer_printf(streamer,
   13c06:	4913      	ldr	r1, [pc, #76]	; (13c54 <show_help+0x80>)
   13c08:	4620      	mov	r0, r4
   13c0a:	f002 fa20 	bl	1604e <streamer_printf>
    return 0;
   13c0e:	2000      	movs	r0, #0
   13c10:	e014      	b.n	13c3c <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
   13c12:	4621      	mov	r1, r4
   13c14:	1d10      	adds	r0, r2, #4
   13c16:	f7ff ff6d 	bl	13af4 <show_cmd_help>
   13c1a:	e00f      	b.n	13c3c <show_help+0x68>
        if (default_module == -1) {
   13c1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13c20:	d108      	bne.n	13c34 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   13c22:	6855      	ldr	r5, [r2, #4]
   13c24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13c28:	4628      	mov	r0, r5
   13c2a:	f7ff fe81 	bl	13930 <get_destination_module>
            if (module == -1) {
   13c2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13c32:	d004      	beq.n	13c3e <show_help+0x6a>
        print_module_commands(module, streamer);
   13c34:	4621      	mov	r1, r4
   13c36:	f7ff fe0b 	bl	13850 <print_module_commands>
    return 0;
   13c3a:	2000      	movs	r0, #0
}
   13c3c:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   13c3e:	462a      	mov	r2, r5
   13c40:	4905      	ldr	r1, [pc, #20]	; (13c58 <show_help+0x84>)
   13c42:	4620      	mov	r0, r4
   13c44:	f002 fa03 	bl	1604e <streamer_printf>
                return 0;
   13c48:	2000      	movs	r0, #0
   13c4a:	e7f7      	b.n	13c3c <show_help+0x68>
   13c4c:	20001410 	.word	0x20001410
   13c50:	00023dac 	.word	0x00023dac
   13c54:	00023dc0 	.word	0x00023dc0
   13c58:	00023d24 	.word	0x00023d24

00013c5c <print_prompt>:
{
   13c5c:	b508      	push	{r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   13c5e:	f7ff fddb 	bl	13818 <get_prompt>
   13c62:	4601      	mov	r1, r0
   13c64:	4a02      	ldr	r2, [pc, #8]	; (13c70 <print_prompt+0x14>)
   13c66:	4803      	ldr	r0, [pc, #12]	; (13c74 <print_prompt+0x18>)
   13c68:	f7ff fd0e 	bl	13688 <console_printf>
}
   13c6c:	bd08      	pop	{r3, pc}
   13c6e:	bf00      	nop
   13c70:	00023df4 	.word	0x00023df4
   13c74:	00023df8 	.word	0x00023df8

00013c78 <print_prompt_if_console>:
{
   13c78:	b510      	push	{r4, lr}
   13c7a:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   13c7c:	f002 fa02 	bl	16084 <streamer_console_get>
   13c80:	4284      	cmp	r4, r0
   13c82:	d000      	beq.n	13c86 <print_prompt_if_console+0xe>
}
   13c84:	bd10      	pop	{r4, pc}
        print_prompt();
   13c86:	f7ff ffe9 	bl	13c5c <print_prompt>
}
   13c8a:	e7fb      	b.n	13c84 <print_prompt_if_console+0xc>

00013c8c <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   13c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c90:	b083      	sub	sp, #12
   13c92:	4681      	mov	r9, r0
   13c94:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   13c96:	4615      	mov	r5, r2
   13c98:	b132      	cbz	r2, 13ca8 <complete_module+0x1c>
   13c9a:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   13c9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   13ca0:	f04f 0800 	mov.w	r8, #0
        print_prompt();
        console_printf("%s", line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   13ca4:	4646      	mov	r6, r8
   13ca6:	e02b      	b.n	13d00 <complete_module+0x74>
        console_printf("\n");
   13ca8:	4837      	ldr	r0, [pc, #220]	; (13d88 <complete_module+0xfc>)
   13caa:	f7ff fced 	bl	13688 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   13cae:	e006      	b.n	13cbe <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   13cb0:	4b36      	ldr	r3, [pc, #216]	; (13d8c <complete_module+0x100>)
   13cb2:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   13cb6:	4836      	ldr	r0, [pc, #216]	; (13d90 <complete_module+0x104>)
   13cb8:	f7ff fce6 	bl	13688 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   13cbc:	3501      	adds	r5, #1
   13cbe:	4b35      	ldr	r3, [pc, #212]	; (13d94 <complete_module+0x108>)
   13cc0:	681b      	ldr	r3, [r3, #0]
   13cc2:	429d      	cmp	r5, r3
   13cc4:	d3f4      	bcc.n	13cb0 <complete_module+0x24>
        print_prompt();
   13cc6:	f7ff ffc9 	bl	13c5c <print_prompt>
        console_printf("%s", line);
   13cca:	4649      	mov	r1, r9
   13ccc:	4832      	ldr	r0, [pc, #200]	; (13d98 <complete_module+0x10c>)
   13cce:	f7ff fcdb 	bl	13688 <console_printf>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   13cd2:	b003      	add	sp, #12
   13cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_printf("\n");
   13cd8:	482b      	ldr	r0, [pc, #172]	; (13d88 <complete_module+0xfc>)
   13cda:	f7ff fcd5 	bl	13688 <console_printf>
            console_printf("%s\n", first_match);
   13cde:	4641      	mov	r1, r8
   13ce0:	482b      	ldr	r0, [pc, #172]	; (13d90 <complete_module+0x104>)
   13ce2:	f7ff fcd1 	bl	13688 <console_printf>
            common_chars = strlen(first_match);
   13ce6:	4640      	mov	r0, r8
   13ce8:	f008 fcfa 	bl	1c6e0 <strlen>
   13cec:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   13cee:	e01b      	b.n	13d28 <complete_module+0x9c>
        console_printf("%s\n", shell_modules[i].name);
   13cf0:	4b26      	ldr	r3, [pc, #152]	; (13d8c <complete_module+0x100>)
   13cf2:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   13cf6:	4826      	ldr	r0, [pc, #152]	; (13d90 <complete_module+0x104>)
   13cf8:	f7ff fcc6 	bl	13688 <console_printf>
        common_chars = j;
   13cfc:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   13cfe:	3601      	adds	r6, #1
   13d00:	4b24      	ldr	r3, [pc, #144]	; (13d94 <complete_module+0x108>)
   13d02:	681b      	ldr	r3, [r3, #0]
   13d04:	429e      	cmp	r6, r3
   13d06:	d21d      	bcs.n	13d44 <complete_module+0xb8>
        if (strncmp(module_prefix,
   13d08:	4b20      	ldr	r3, [pc, #128]	; (13d8c <complete_module+0x100>)
   13d0a:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   13d0e:	462a      	mov	r2, r5
   13d10:	4659      	mov	r1, fp
   13d12:	9801      	ldr	r0, [sp, #4]
   13d14:	f008 fcec 	bl	1c6f0 <strncmp>
   13d18:	4604      	mov	r4, r0
   13d1a:	2800      	cmp	r0, #0
   13d1c:	d1ef      	bne.n	13cfe <complete_module+0x72>
        if (!first_match) {
   13d1e:	f1b8 0f00 	cmp.w	r8, #0
   13d22:	d00d      	beq.n	13d40 <complete_module+0xb4>
        if (first_match && (common_chars < 0)) {
   13d24:	2f00      	cmp	r7, #0
   13d26:	dbd7      	blt.n	13cd8 <complete_module+0x4c>
        for (j = 0; j < common_chars; j++) {
   13d28:	42bc      	cmp	r4, r7
   13d2a:	dae1      	bge.n	13cf0 <complete_module+0x64>
            if (first_match[j] != shell_modules[i].name[j]) {
   13d2c:	f818 2004 	ldrb.w	r2, [r8, r4]
   13d30:	4b16      	ldr	r3, [pc, #88]	; (13d8c <complete_module+0x100>)
   13d32:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   13d36:	5d1b      	ldrb	r3, [r3, r4]
   13d38:	429a      	cmp	r2, r3
   13d3a:	d1d9      	bne.n	13cf0 <complete_module+0x64>
        for (j = 0; j < common_chars; j++) {
   13d3c:	3401      	adds	r4, #1
   13d3e:	e7f3      	b.n	13d28 <complete_module+0x9c>
            first_match = shell_modules[i].name;
   13d40:	46d8      	mov	r8, fp
   13d42:	e7dc      	b.n	13cfe <complete_module+0x72>
    if (!first_match) {
   13d44:	f1b8 0f00 	cmp.w	r8, #0
   13d48:	d0c3      	beq.n	13cd2 <complete_module+0x46>
    if (common_chars >= 0) {
   13d4a:	2f00      	cmp	r7, #0
   13d4c:	da0e      	bge.n	13d6c <complete_module+0xe0>
        common_chars = strlen(first_match);
   13d4e:	4640      	mov	r0, r8
   13d50:	f008 fcc6 	bl	1c6e0 <strlen>
   13d54:	4607      	mov	r7, r0
        space = 1;
   13d56:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   13d58:	42bd      	cmp	r5, r7
   13d5a:	da0f      	bge.n	13d7c <complete_module+0xf0>
        if (!append_char(line, first_match[i])) {
   13d5c:	f818 1005 	ldrb.w	r1, [r8, r5]
   13d60:	4648      	mov	r0, r9
   13d62:	47d0      	blx	sl
   13d64:	2800      	cmp	r0, #0
   13d66:	d0b4      	beq.n	13cd2 <complete_module+0x46>
    for (i = module_len; i < common_chars; i++) {
   13d68:	3501      	adds	r5, #1
   13d6a:	e7f5      	b.n	13d58 <complete_module+0xcc>
        print_prompt();
   13d6c:	f7ff ff76 	bl	13c5c <print_prompt>
        console_printf("%s", line);
   13d70:	4649      	mov	r1, r9
   13d72:	4809      	ldr	r0, [pc, #36]	; (13d98 <complete_module+0x10c>)
   13d74:	f7ff fc88 	bl	13688 <console_printf>
    int common_chars = -1, space = 0;
   13d78:	2400      	movs	r4, #0
   13d7a:	e7ed      	b.n	13d58 <complete_module+0xcc>
    if (space) {
   13d7c:	2c00      	cmp	r4, #0
   13d7e:	d0a8      	beq.n	13cd2 <complete_module+0x46>
        append_char(line, ' ');
   13d80:	2120      	movs	r1, #32
   13d82:	4648      	mov	r0, r9
   13d84:	47d0      	blx	sl
   13d86:	e7a4      	b.n	13cd2 <complete_module+0x46>
   13d88:	00023d90 	.word	0x00023d90
   13d8c:	20006c1c 	.word	0x20006c1c
   13d90:	00023fa0 	.word	0x00023fa0
   13d94:	20006bf0 	.word	0x20006bf0
   13d98:	00023c4c 	.word	0x00023c4c

00013d9c <complete_command>:
{
   13d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13da0:	b083      	sub	sp, #12
   13da2:	9001      	str	r0, [sp, #4]
   13da4:	468b      	mov	fp, r1
   13da6:	4615      	mov	r5, r2
    commands = shell_modules[module_idx].commands;
   13da8:	4a3a      	ldr	r2, [pc, #232]	; (13e94 <complete_command+0xf8>)
   13daa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   13dae:	6857      	ldr	r7, [r2, #4]
    int i, j, common_chars = -1;
   13db0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   13db4:	f04f 0900 	mov.w	r9, #0
    int match_count = 0;
   13db8:	46ca      	mov	sl, r9
    int first_match = -1;
   13dba:	46b0      	mov	r8, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   13dbc:	e006      	b.n	13dcc <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   13dbe:	4620      	mov	r0, r4
   13dc0:	f008 fc8e 	bl	1c6e0 <strlen>
   13dc4:	4606      	mov	r6, r0
            first_match = i;
   13dc6:	46c8      	mov	r8, r9
    for (i = 0; commands[i].sc_cmd; i++) {
   13dc8:	f109 0901 	add.w	r9, r9, #1
   13dcc:	eb07 1309 	add.w	r3, r7, r9, lsl #4
   13dd0:	689c      	ldr	r4, [r3, #8]
   13dd2:	b1ec      	cbz	r4, 13e10 <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   13dd4:	462a      	mov	r2, r5
   13dd6:	4621      	mov	r1, r4
   13dd8:	4658      	mov	r0, fp
   13dda:	f008 fc89 	bl	1c6f0 <strncmp>
   13dde:	2800      	cmp	r0, #0
   13de0:	d1f2      	bne.n	13dc8 <complete_command+0x2c>
        match_count++;
   13de2:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   13de6:	f1ba 0f01 	cmp.w	sl, #1
   13dea:	d0e8      	beq.n	13dbe <complete_command+0x22>
        if (common_chars <= command_len) {
   13dec:	42ae      	cmp	r6, r5
   13dee:	ddeb      	ble.n	13dc8 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   13df0:	462b      	mov	r3, r5
   13df2:	42b3      	cmp	r3, r6
   13df4:	da08      	bge.n	13e08 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   13df6:	eb07 1208 	add.w	r2, r7, r8, lsl #4
   13dfa:	6892      	ldr	r2, [r2, #8]
   13dfc:	5cd1      	ldrb	r1, [r2, r3]
   13dfe:	5ce2      	ldrb	r2, [r4, r3]
   13e00:	4291      	cmp	r1, r2
   13e02:	d103      	bne.n	13e0c <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   13e04:	3301      	adds	r3, #1
   13e06:	e7f4      	b.n	13df2 <complete_command+0x56>
        common_chars = j;
   13e08:	461e      	mov	r6, r3
   13e0a:	e7dd      	b.n	13dc8 <complete_command+0x2c>
   13e0c:	461e      	mov	r6, r3
   13e0e:	e7db      	b.n	13dc8 <complete_command+0x2c>
    if (match_count == 0) {
   13e10:	f1ba 0f00 	cmp.w	sl, #0
   13e14:	d03b      	beq.n	13e8e <complete_command+0xf2>
    if (common_chars > command_len) {
   13e16:	42ae      	cmp	r6, r5
   13e18:	dd15      	ble.n	13e46 <complete_command+0xaa>
   13e1a:	9c01      	ldr	r4, [sp, #4]
   13e1c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   13e20:	42b5      	cmp	r5, r6
   13e22:	da08      	bge.n	13e36 <complete_command+0x9a>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   13e24:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   13e28:	689b      	ldr	r3, [r3, #8]
   13e2a:	5d59      	ldrb	r1, [r3, r5]
   13e2c:	4620      	mov	r0, r4
   13e2e:	47c8      	blx	r9
   13e30:	b368      	cbz	r0, 13e8e <complete_command+0xf2>
        for (i = command_len; i < common_chars; i++) {
   13e32:	3501      	adds	r5, #1
   13e34:	e7f4      	b.n	13e20 <complete_command+0x84>
        if (match_count == 1) {
   13e36:	f1ba 0f01 	cmp.w	sl, #1
   13e3a:	d128      	bne.n	13e8e <complete_command+0xf2>
            append_char(line, ' ');
   13e3c:	2120      	movs	r1, #32
   13e3e:	9801      	ldr	r0, [sp, #4]
   13e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13e42:	4798      	blx	r3
        return;
   13e44:	e023      	b.n	13e8e <complete_command+0xf2>
    console_printf("\n");
   13e46:	4814      	ldr	r0, [pc, #80]	; (13e98 <complete_command+0xfc>)
   13e48:	f7ff fc1e 	bl	13688 <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   13e4c:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   13e50:	6899      	ldr	r1, [r3, #8]
   13e52:	4812      	ldr	r0, [pc, #72]	; (13e9c <complete_command+0x100>)
   13e54:	f7ff fc18 	bl	13688 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   13e58:	f108 0801 	add.w	r8, r8, #1
   13e5c:	e001      	b.n	13e62 <complete_command+0xc6>
   13e5e:	f108 0801 	add.w	r8, r8, #1
   13e62:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   13e66:	689c      	ldr	r4, [r3, #8]
   13e68:	b15c      	cbz	r4, 13e82 <complete_command+0xe6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   13e6a:	462a      	mov	r2, r5
   13e6c:	4621      	mov	r1, r4
   13e6e:	4658      	mov	r0, fp
   13e70:	f008 fc3e 	bl	1c6f0 <strncmp>
   13e74:	2800      	cmp	r0, #0
   13e76:	d1f2      	bne.n	13e5e <complete_command+0xc2>
            console_printf("%s\n", commands[i].sc_cmd);
   13e78:	4621      	mov	r1, r4
   13e7a:	4808      	ldr	r0, [pc, #32]	; (13e9c <complete_command+0x100>)
   13e7c:	f7ff fc04 	bl	13688 <console_printf>
   13e80:	e7ed      	b.n	13e5e <complete_command+0xc2>
    print_prompt();
   13e82:	f7ff feeb 	bl	13c5c <print_prompt>
    console_printf("%s", line);
   13e86:	9901      	ldr	r1, [sp, #4]
   13e88:	4805      	ldr	r0, [pc, #20]	; (13ea0 <complete_command+0x104>)
   13e8a:	f7ff fbfd 	bl	13688 <console_printf>
}
   13e8e:	b003      	add	sp, #12
   13e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e94:	20006c1c 	.word	0x20006c1c
   13e98:	00023d90 	.word	0x00023d90
   13e9c:	00023fa0 	.word	0x00023fa0
   13ea0:	00023c4c 	.word	0x00023c4c

00013ea4 <get_command_from_module>:
{
   13ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ea8:	4680      	mov	r8, r0
   13eaa:	460d      	mov	r5, r1
   13eac:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   13eae:	2400      	movs	r4, #0
   13eb0:	e000      	b.n	13eb4 <get_command_from_module+0x10>
   13eb2:	3401      	adds	r4, #1
   13eb4:	4b0c      	ldr	r3, [pc, #48]	; (13ee8 <get_command_from_module+0x44>)
   13eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   13eba:	685b      	ldr	r3, [r3, #4]
   13ebc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   13ec0:	689f      	ldr	r7, [r3, #8]
   13ec2:	b167      	cbz	r7, 13ede <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   13ec4:	4638      	mov	r0, r7
   13ec6:	f008 fc0b 	bl	1c6e0 <strlen>
   13eca:	42a8      	cmp	r0, r5
   13ecc:	d1f1      	bne.n	13eb2 <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   13ece:	462a      	mov	r2, r5
   13ed0:	4639      	mov	r1, r7
   13ed2:	4640      	mov	r0, r8
   13ed4:	f008 fc0c 	bl	1c6f0 <strncmp>
   13ed8:	2800      	cmp	r0, #0
   13eda:	d1ea      	bne.n	13eb2 <get_command_from_module+0xe>
   13edc:	e001      	b.n	13ee2 <get_command_from_module+0x3e>
    return -1;
   13ede:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   13ee2:	4620      	mov	r0, r4
   13ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ee8:	20006c1c 	.word	0x20006c1c

00013eec <complete_param>:
{
   13eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ef0:	b083      	sub	sp, #12
   13ef2:	9001      	str	r0, [sp, #4]
   13ef4:	9100      	str	r1, [sp, #0]
   13ef6:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   13ef8:	4a34      	ldr	r2, [pc, #208]	; (13fcc <complete_param+0xe0>)
   13efa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   13efe:	6857      	ldr	r7, [r2, #4]
   13f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13f02:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   13f06:	68fb      	ldr	r3, [r7, #12]
   13f08:	2b00      	cmp	r3, #0
   13f0a:	d05c      	beq.n	13fc6 <complete_param+0xda>
   13f0c:	689b      	ldr	r3, [r3, #8]
   13f0e:	2b00      	cmp	r3, #0
   13f10:	d059      	beq.n	13fc6 <complete_param+0xda>
    int i, j, common_chars = -1;
   13f12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   13f16:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   13f1a:	4656      	mov	r6, sl
   13f1c:	e015      	b.n	13f4a <complete_param+0x5e>
            console_printf("\n");
   13f1e:	482c      	ldr	r0, [pc, #176]	; (13fd0 <complete_param+0xe4>)
   13f20:	f7ff fbb2 	bl	13688 <console_printf>
            console_printf("%s\n", first_match);
   13f24:	4631      	mov	r1, r6
   13f26:	482b      	ldr	r0, [pc, #172]	; (13fd4 <complete_param+0xe8>)
   13f28:	f7ff fbae 	bl	13688 <console_printf>
            common_chars = strlen(first_match);
   13f2c:	4630      	mov	r0, r6
   13f2e:	f008 fbd7 	bl	1c6e0 <strlen>
   13f32:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   13f34:	e01d      	b.n	13f72 <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   13f36:	68fb      	ldr	r3, [r7, #12]
   13f38:	689b      	ldr	r3, [r3, #8]
   13f3a:	f853 1008 	ldr.w	r1, [r3, r8]
   13f3e:	4825      	ldr	r0, [pc, #148]	; (13fd4 <complete_param+0xe8>)
   13f40:	f7ff fba2 	bl	13688 <console_printf>
        common_chars = j;
   13f44:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   13f46:	f10a 0a01 	add.w	sl, sl, #1
   13f4a:	68fb      	ldr	r3, [r7, #12]
   13f4c:	689b      	ldr	r3, [r3, #8]
   13f4e:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   13f52:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   13f56:	f1bb 0f00 	cmp.w	fp, #0
   13f5a:	d018      	beq.n	13f8e <complete_param+0xa2>
        if (strncmp(param_prefix,
   13f5c:	464a      	mov	r2, r9
   13f5e:	4659      	mov	r1, fp
   13f60:	9800      	ldr	r0, [sp, #0]
   13f62:	f008 fbc5 	bl	1c6f0 <strncmp>
   13f66:	4604      	mov	r4, r0
   13f68:	2800      	cmp	r0, #0
   13f6a:	d1ec      	bne.n	13f46 <complete_param+0x5a>
        if (!first_match) {
   13f6c:	b16e      	cbz	r6, 13f8a <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   13f6e:	2d00      	cmp	r5, #0
   13f70:	dbd5      	blt.n	13f1e <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   13f72:	42ac      	cmp	r4, r5
   13f74:	dadf      	bge.n	13f36 <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   13f76:	5d32      	ldrb	r2, [r6, r4]
   13f78:	68fb      	ldr	r3, [r7, #12]
   13f7a:	689b      	ldr	r3, [r3, #8]
   13f7c:	f853 3008 	ldr.w	r3, [r3, r8]
   13f80:	5d1b      	ldrb	r3, [r3, r4]
   13f82:	429a      	cmp	r2, r3
   13f84:	d1d7      	bne.n	13f36 <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   13f86:	3401      	adds	r4, #1
   13f88:	e7f3      	b.n	13f72 <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   13f8a:	465e      	mov	r6, fp
   13f8c:	e7db      	b.n	13f46 <complete_param+0x5a>
    if (!first_match) {
   13f8e:	b1d6      	cbz	r6, 13fc6 <complete_param+0xda>
    if (common_chars >= 0) {
   13f90:	2d00      	cmp	r5, #0
   13f92:	da0f      	bge.n	13fb4 <complete_param+0xc8>
        common_chars = strlen(first_match);
   13f94:	4630      	mov	r0, r6
   13f96:	f008 fba3 	bl	1c6e0 <strlen>
   13f9a:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   13f9c:	9c01      	ldr	r4, [sp, #4]
   13f9e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   13fa0:	45a9      	cmp	r9, r5
   13fa2:	da10      	bge.n	13fc6 <complete_param+0xda>
        if (!append_char(line, first_match[i])) {
   13fa4:	f816 1009 	ldrb.w	r1, [r6, r9]
   13fa8:	4620      	mov	r0, r4
   13faa:	47b8      	blx	r7
   13fac:	b158      	cbz	r0, 13fc6 <complete_param+0xda>
    for (i = param_len; i < common_chars; i++) {
   13fae:	f109 0901 	add.w	r9, r9, #1
   13fb2:	e7f5      	b.n	13fa0 <complete_param+0xb4>
        print_prompt();
   13fb4:	f7ff fe52 	bl	13c5c <print_prompt>
        console_printf("%s", line);
   13fb8:	9c01      	ldr	r4, [sp, #4]
   13fba:	4621      	mov	r1, r4
   13fbc:	4806      	ldr	r0, [pc, #24]	; (13fd8 <complete_param+0xec>)
   13fbe:	f7ff fb63 	bl	13688 <console_printf>
   13fc2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   13fc4:	e7ec      	b.n	13fa0 <complete_param+0xb4>
}
   13fc6:	b003      	add	sp, #12
   13fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fcc:	20006c1c 	.word	0x20006c1c
   13fd0:	00023d90 	.word	0x00023d90
   13fd4:	00023fa0 	.word	0x00023fa0
   13fd8:	00023c4c 	.word	0x00023c4c

00013fdc <get_token>:
{
   13fdc:	b570      	push	{r4, r5, r6, lr}
   13fde:	4605      	mov	r5, r0
   13fe0:	460e      	mov	r6, r1
    char *str = *cur;
   13fe2:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   13fe4:	2300      	movs	r3, #0
   13fe6:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   13fe8:	e000      	b.n	13fec <get_token+0x10>
        str++;
   13fea:	3401      	adds	r4, #1
    while (*str && *str == ' ') {
   13fec:	7823      	ldrb	r3, [r4, #0]
   13fee:	2b20      	cmp	r3, #32
   13ff0:	d0fb      	beq.n	13fea <get_token+0xe>
    if (*str == '\0') {
   13ff2:	b13b      	cbz	r3, 14004 <get_token+0x28>
    *cur = str;
   13ff4:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   13ff6:	2120      	movs	r1, #32
   13ff8:	4620      	mov	r0, r4
   13ffa:	f008 fb5b 	bl	1c6b4 <strchr>
    if (str == NULL) {
   13ffe:	b128      	cbz	r0, 1400c <get_token+0x30>
    return str - *cur;
   14000:	1b00      	subs	r0, r0, r4
}
   14002:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   14004:	2301      	movs	r3, #1
   14006:	6033      	str	r3, [r6, #0]
        return 0;
   14008:	2000      	movs	r0, #0
   1400a:	e7fa      	b.n	14002 <get_token+0x26>
        *null_terminated = 1;
   1400c:	2301      	movs	r3, #1
   1400e:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   14010:	6828      	ldr	r0, [r5, #0]
   14012:	f008 fb65 	bl	1c6e0 <strlen>
   14016:	e7f4      	b.n	14002 <get_token+0x26>

00014018 <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   14018:	b530      	push	{r4, r5, lr}
   1401a:	b085      	sub	sp, #20
   1401c:	4604      	mov	r4, r0
   1401e:	9101      	str	r1, [sp, #4]
   14020:	461d      	mov	r5, r3
    int null_terminated = 0;
   14022:	2000      	movs	r0, #0
   14024:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   14026:	3201      	adds	r2, #1
   14028:	4411      	add	r1, r2
   1402a:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   1402c:	a903      	add	r1, sp, #12
   1402e:	a801      	add	r0, sp, #4
   14030:	f7ff ffd4 	bl	13fdc <get_token>
    if (tok_len == 0) {
   14034:	b9a0      	cbnz	r0, 14060 <complete_select+0x48>
        if (default_module != -1) {
   14036:	4b12      	ldr	r3, [pc, #72]	; (14080 <complete_select+0x68>)
   14038:	681b      	ldr	r3, [r3, #0]
   1403a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1403e:	d001      	beq.n	14044 <complete_select+0x2c>
    if (null_terminated) {
        if (default_module == -1) {
            complete_module(line, cur, tok_len, append_char);
        }
    }
}
   14040:	b005      	add	sp, #20
   14042:	bd30      	pop	{r4, r5, pc}
        console_printf("\n");
   14044:	480f      	ldr	r0, [pc, #60]	; (14084 <complete_select+0x6c>)
   14046:	f7ff fb1f 	bl	13688 <console_printf>
        print_modules(streamer_console_get());
   1404a:	f002 f81b 	bl	16084 <streamer_console_get>
   1404e:	f7ff fc35 	bl	138bc <print_modules>
        print_prompt();
   14052:	f7ff fe03 	bl	13c5c <print_prompt>
        console_printf("%s", line);
   14056:	4621      	mov	r1, r4
   14058:	480b      	ldr	r0, [pc, #44]	; (14088 <complete_select+0x70>)
   1405a:	f7ff fb15 	bl	13688 <console_printf>
        return;
   1405e:	e7ef      	b.n	14040 <complete_select+0x28>
   14060:	4602      	mov	r2, r0
    if (null_terminated) {
   14062:	9b03      	ldr	r3, [sp, #12]
   14064:	2b00      	cmp	r3, #0
   14066:	d0eb      	beq.n	14040 <complete_select+0x28>
        if (default_module == -1) {
   14068:	4b05      	ldr	r3, [pc, #20]	; (14080 <complete_select+0x68>)
   1406a:	681b      	ldr	r3, [r3, #0]
   1406c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14070:	d1e6      	bne.n	14040 <complete_select+0x28>
            complete_module(line, cur, tok_len, append_char);
   14072:	462b      	mov	r3, r5
   14074:	9901      	ldr	r1, [sp, #4]
   14076:	4620      	mov	r0, r4
   14078:	f7ff fe08 	bl	13c8c <complete_module>
   1407c:	e7e0      	b.n	14040 <complete_select+0x28>
   1407e:	bf00      	nop
   14080:	20001410 	.word	0x20001410
   14084:	00023d90 	.word	0x00023d90
   14088:	00023c4c 	.word	0x00023c4c

0001408c <line2argv>:
{
   1408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1408e:	460d      	mov	r5, r1
   14090:	4616      	mov	r6, r2
   14092:	461f      	mov	r7, r3
    if (!strlen(str)) {
   14094:	7803      	ldrb	r3, [r0, #0]
   14096:	b91b      	cbnz	r3, 140a0 <line2argv+0x14>
        return 0;
   14098:	2400      	movs	r4, #0
}
   1409a:	4620      	mov	r0, r4
   1409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str++;
   1409e:	3001      	adds	r0, #1
    while (*str && *str == ' ') {
   140a0:	7804      	ldrb	r4, [r0, #0]
   140a2:	2c20      	cmp	r4, #32
   140a4:	d0fb      	beq.n	1409e <line2argv+0x12>
    if (!*str) {
   140a6:	b314      	cbz	r4, 140ee <line2argv+0x62>
    argv[argc++] = str;
   140a8:	6028      	str	r0, [r5, #0]
   140aa:	2401      	movs	r4, #1
    while ((str = strchr(str, ' '))) {
   140ac:	e00a      	b.n	140c4 <line2argv+0x38>
            str++;
   140ae:	3001      	adds	r0, #1
        while (*str && *str == ' ') {
   140b0:	7803      	ldrb	r3, [r0, #0]
   140b2:	2b20      	cmp	r3, #32
   140b4:	d0fb      	beq.n	140ae <line2argv+0x22>
        if (!*str) {
   140b6:	b1b3      	cbz	r3, 140e6 <line2argv+0x5a>
        argv[argc++] = str;
   140b8:	1c63      	adds	r3, r4, #1
   140ba:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        if (argc == size) {
   140be:	42b3      	cmp	r3, r6
   140c0:	d00a      	beq.n	140d8 <line2argv+0x4c>
        argv[argc++] = str;
   140c2:	461c      	mov	r4, r3
    while ((str = strchr(str, ' '))) {
   140c4:	2120      	movs	r1, #32
   140c6:	f008 faf5 	bl	1c6b4 <strchr>
   140ca:	4603      	mov	r3, r0
   140cc:	b158      	cbz	r0, 140e6 <line2argv+0x5a>
        *str++ = '\0';
   140ce:	4618      	mov	r0, r3
   140d0:	2300      	movs	r3, #0
   140d2:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   140d6:	e7eb      	b.n	140b0 <line2argv+0x24>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   140d8:	1e72      	subs	r2, r6, #1
   140da:	4906      	ldr	r1, [pc, #24]	; (140f4 <line2argv+0x68>)
   140dc:	4638      	mov	r0, r7
   140de:	f001 ffb6 	bl	1604e <streamer_printf>
            return 0;
   140e2:	2400      	movs	r4, #0
   140e4:	e7d9      	b.n	1409a <line2argv+0xe>
    argv[argc] = NULL;
   140e6:	2300      	movs	r3, #0
   140e8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    return argc;
   140ec:	e7d5      	b.n	1409a <line2argv+0xe>
        return 0;
   140ee:	2400      	movs	r4, #0
   140f0:	e7d3      	b.n	1409a <line2argv+0xe>
   140f2:	bf00      	nop
   140f4:	00023e00 	.word	0x00023e00

000140f8 <get_last_token>:
{
   140f8:	b510      	push	{r4, lr}
   140fa:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   140fc:	2120      	movs	r1, #32
   140fe:	6800      	ldr	r0, [r0, #0]
   14100:	f008 fb07 	bl	1c712 <strrchr>
   14104:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   14106:	b120      	cbz	r0, 14112 <get_last_token+0x1a>
    (*cur)++;
   14108:	3001      	adds	r0, #1
   1410a:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   1410c:	f008 fae8 	bl	1c6e0 <strlen>
}
   14110:	bd10      	pop	{r4, pc}
        return 0;
   14112:	2000      	movs	r0, #0
   14114:	e7fc      	b.n	14110 <get_last_token+0x18>
	...

00014118 <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   14118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1411c:	b085      	sub	sp, #20
   1411e:	4605      	mov	r5, r0
   14120:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   14122:	2100      	movs	r1, #0
   14124:	9102      	str	r1, [sp, #8]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   14126:	47a0      	blx	r4
   14128:	b910      	cbnz	r0, 14130 <completion+0x18>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   1412a:	b005      	add	sp, #20
   1412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   14130:	9503      	str	r5, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   14132:	a902      	add	r1, sp, #8
   14134:	a803      	add	r0, sp, #12
   14136:	f7ff ff51 	bl	13fdc <get_token>
    if (tok_len == 0) {
   1413a:	4606      	mov	r6, r0
   1413c:	b168      	cbz	r0, 1415a <completion+0x42>
    if (null_terminated) {
   1413e:	9b02      	ldr	r3, [sp, #8]
   14140:	b363      	cbz	r3, 1419c <completion+0x84>
        if (default_module == -1) {
   14142:	4b4d      	ldr	r3, [pc, #308]	; (14278 <completion+0x160>)
   14144:	681b      	ldr	r3, [r3, #0]
   14146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1414a:	d020      	beq.n	1418e <completion+0x76>
        complete_command(line, cur, tok_len,
   1414c:	9400      	str	r4, [sp, #0]
   1414e:	4602      	mov	r2, r0
   14150:	9903      	ldr	r1, [sp, #12]
   14152:	4628      	mov	r0, r5
   14154:	f7ff fe22 	bl	13d9c <complete_command>
        return;
   14158:	e7e7      	b.n	1412a <completion+0x12>
        console_printf("\n");
   1415a:	4848      	ldr	r0, [pc, #288]	; (1427c <completion+0x164>)
   1415c:	f7ff fa94 	bl	13688 <console_printf>
        if (default_module == -1) {
   14160:	4b45      	ldr	r3, [pc, #276]	; (14278 <completion+0x160>)
   14162:	681c      	ldr	r4, [r3, #0]
   14164:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14168:	d00c      	beq.n	14184 <completion+0x6c>
            print_module_commands(default_module, streamer_console_get());
   1416a:	f001 ff8b 	bl	16084 <streamer_console_get>
   1416e:	4601      	mov	r1, r0
   14170:	4620      	mov	r0, r4
   14172:	f7ff fb6d 	bl	13850 <print_module_commands>
        print_prompt();
   14176:	f7ff fd71 	bl	13c5c <print_prompt>
        console_printf("%s", line);
   1417a:	4629      	mov	r1, r5
   1417c:	4840      	ldr	r0, [pc, #256]	; (14280 <completion+0x168>)
   1417e:	f7ff fa83 	bl	13688 <console_printf>
        return;
   14182:	e7d2      	b.n	1412a <completion+0x12>
            print_modules(streamer_console_get());
   14184:	f001 ff7e 	bl	16084 <streamer_console_get>
   14188:	f7ff fb98 	bl	138bc <print_modules>
   1418c:	e7f3      	b.n	14176 <completion+0x5e>
            complete_module(line, cur, tok_len, append_char);
   1418e:	4623      	mov	r3, r4
   14190:	4602      	mov	r2, r0
   14192:	9903      	ldr	r1, [sp, #12]
   14194:	4628      	mov	r0, r5
   14196:	f7ff fd79 	bl	13c8c <complete_module>
            return;
   1419a:	e7c6      	b.n	1412a <completion+0x12>
    if (strncmp("select", cur, tok_len) == 0) {
   1419c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   141a0:	4602      	mov	r2, r0
   141a2:	4641      	mov	r1, r8
   141a4:	4837      	ldr	r0, [pc, #220]	; (14284 <completion+0x16c>)
   141a6:	f008 faa3 	bl	1c6f0 <strncmp>
   141aa:	b300      	cbz	r0, 141ee <completion+0xd6>
    if (default_module != -1) {
   141ac:	4b32      	ldr	r3, [pc, #200]	; (14278 <completion+0x160>)
   141ae:	681f      	ldr	r7, [r3, #0]
   141b0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   141b4:	d022      	beq.n	141fc <completion+0xe4>
    command = get_command_from_module(cur, tok_len, module);
   141b6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   141ba:	463a      	mov	r2, r7
   141bc:	4631      	mov	r1, r6
   141be:	4648      	mov	r0, r9
   141c0:	f7ff fe70 	bl	13ea4 <get_command_from_module>
   141c4:	4680      	mov	r8, r0
    if (command == -1) {
   141c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   141ca:	d0ae      	beq.n	1412a <completion+0x12>
    cur += tok_len;
   141cc:	444e      	add	r6, r9
   141ce:	9603      	str	r6, [sp, #12]
    tok_len = get_last_token(&cur);
   141d0:	a803      	add	r0, sp, #12
   141d2:	f7ff ff91 	bl	140f8 <get_last_token>
    if (tok_len == 0) {
   141d6:	4602      	mov	r2, r0
   141d8:	2800      	cmp	r0, #0
   141da:	d03b      	beq.n	14254 <completion+0x13c>
    complete_param(line, cur, tok_len,
   141dc:	9401      	str	r4, [sp, #4]
   141de:	f8cd 8000 	str.w	r8, [sp]
   141e2:	463b      	mov	r3, r7
   141e4:	9903      	ldr	r1, [sp, #12]
   141e6:	4628      	mov	r0, r5
   141e8:	f7ff fe80 	bl	13eec <complete_param>
    return;
   141ec:	e79d      	b.n	1412a <completion+0x12>
        complete_select(line, cur, tok_len, append_char);
   141ee:	4623      	mov	r3, r4
   141f0:	4632      	mov	r2, r6
   141f2:	4641      	mov	r1, r8
   141f4:	4628      	mov	r0, r5
   141f6:	f7ff ff0f 	bl	14018 <complete_select>
        return;
   141fa:	e796      	b.n	1412a <completion+0x12>
        module = get_destination_module(cur, tok_len);
   141fc:	4631      	mov	r1, r6
   141fe:	4640      	mov	r0, r8
   14200:	f7ff fb96 	bl	13930 <get_destination_module>
   14204:	4607      	mov	r7, r0
        if (module == -1) {
   14206:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1420a:	d08e      	beq.n	1412a <completion+0x12>
        cur += tok_len + 1;
   1420c:	1c73      	adds	r3, r6, #1
   1420e:	4443      	add	r3, r8
   14210:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   14212:	a902      	add	r1, sp, #8
   14214:	a803      	add	r0, sp, #12
   14216:	f7ff fee1 	bl	13fdc <get_token>
        if (tok_len == 0) {
   1421a:	4606      	mov	r6, r0
   1421c:	b150      	cbz	r0, 14234 <completion+0x11c>
        if (null_terminated) {
   1421e:	9b02      	ldr	r3, [sp, #8]
   14220:	2b00      	cmp	r3, #0
   14222:	d0c8      	beq.n	141b6 <completion+0x9e>
            complete_command(line, cur, tok_len,
   14224:	9400      	str	r4, [sp, #0]
   14226:	463b      	mov	r3, r7
   14228:	4602      	mov	r2, r0
   1422a:	9903      	ldr	r1, [sp, #12]
   1422c:	4628      	mov	r0, r5
   1422e:	f7ff fdb5 	bl	13d9c <complete_command>
            return;
   14232:	e77a      	b.n	1412a <completion+0x12>
            console_printf("\n");
   14234:	4811      	ldr	r0, [pc, #68]	; (1427c <completion+0x164>)
   14236:	f7ff fa27 	bl	13688 <console_printf>
            print_module_commands(module, streamer_console_get());
   1423a:	f001 ff23 	bl	16084 <streamer_console_get>
   1423e:	4601      	mov	r1, r0
   14240:	4638      	mov	r0, r7
   14242:	f7ff fb05 	bl	13850 <print_module_commands>
            print_prompt();
   14246:	f7ff fd09 	bl	13c5c <print_prompt>
            console_printf("%s", line);
   1424a:	4629      	mov	r1, r5
   1424c:	480c      	ldr	r0, [pc, #48]	; (14280 <completion+0x168>)
   1424e:	f7ff fa1b 	bl	13688 <console_printf>
            return;
   14252:	e76a      	b.n	1412a <completion+0x12>
        console_printf("\n");
   14254:	4809      	ldr	r0, [pc, #36]	; (1427c <completion+0x164>)
   14256:	f7ff fa17 	bl	13688 <console_printf>
        print_command_params(module, command, streamer_console_get());
   1425a:	f001 ff13 	bl	16084 <streamer_console_get>
   1425e:	4602      	mov	r2, r0
   14260:	4641      	mov	r1, r8
   14262:	4638      	mov	r0, r7
   14264:	f7ff fb42 	bl	138ec <print_command_params>
        print_prompt();
   14268:	f7ff fcf8 	bl	13c5c <print_prompt>
        console_printf("%s", line);
   1426c:	4629      	mov	r1, r5
   1426e:	4804      	ldr	r0, [pc, #16]	; (14280 <completion+0x168>)
   14270:	f7ff fa0a 	bl	13688 <console_printf>
        return;
   14274:	e759      	b.n	1412a <completion+0x12>
   14276:	bf00      	nop
   14278:	20001410 	.word	0x20001410
   1427c:	00023d90 	.word	0x00023d90
   14280:	00023c4c 	.word	0x00023c4c
   14284:	00023d54 	.word	0x00023d54

00014288 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   14288:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   1428a:	2400      	movs	r4, #0
   1428c:	e00b      	b.n	142a6 <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   1428e:	4807      	ldr	r0, [pc, #28]	; (142ac <shell_avail_queue_init+0x24>)
   14290:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   14294:	4b06      	ldr	r3, [pc, #24]	; (142b0 <shell_avail_queue_init+0x28>)
   14296:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   14298:	4b06      	ldr	r3, [pc, #24]	; (142b4 <shell_avail_queue_init+0x2c>)
   1429a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1429e:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   142a0:	f7ff f992 	bl	135c8 <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   142a4:	3401      	adds	r4, #1
   142a6:	2c01      	cmp	r4, #1
   142a8:	ddf1      	ble.n	1428e <shell_avail_queue_init+0x6>
    }
}
   142aa:	bd10      	pop	{r4, pc}
   142ac:	20006bf8 	.word	0x20006bf8
   142b0:	000143f9 	.word	0x000143f9
   142b4:	20006898 	.word	0x20006898

000142b8 <shell_evq_set>:
{
   142b8:	b508      	push	{r3, lr}
    shell_evq = evq;
   142ba:	4b02      	ldr	r3, [pc, #8]	; (142c4 <shell_evq_set+0xc>)
   142bc:	6018      	str	r0, [r3, #0]
    console_line_queue_set(shell_evq);
   142be:	f7ff f97d 	bl	135bc <console_line_queue_set>
}
   142c2:	bd08      	pop	{r3, pc}
   142c4:	20006c18 	.word	0x20006c18

000142c8 <shell_exec>:
{
   142c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142cc:	4607      	mov	r7, r0
   142ce:	460e      	mov	r6, r1
   142d0:	4615      	mov	r5, r2
    cmd = shell_find_cmd(argc, argv, streamer);
   142d2:	f7ff fbad 	bl	13a30 <shell_find_cmd>
    if (!cmd) {
   142d6:	4604      	mov	r4, r0
   142d8:	b1b8      	cbz	r0, 1430a <shell_exec+0x42>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   142da:	4b23      	ldr	r3, [pc, #140]	; (14368 <shell_exec+0xa0>)
   142dc:	681b      	ldr	r3, [r3, #0]
   142de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   142e2:	d026      	beq.n	14332 <shell_exec+0x6a>
    size_t argc_offset = 0;
   142e4:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   142e6:	7823      	ldrb	r3, [r4, #0]
   142e8:	f013 0f01 	tst.w	r3, #1
   142ec:	d12d      	bne.n	1434a <shell_exec+0x82>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   142ee:	6863      	ldr	r3, [r4, #4]
   142f0:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   142f4:	1a38      	subs	r0, r7, r0
   142f6:	4798      	blx	r3
   142f8:	4604      	mov	r4, r0
    if (rc < 0) {
   142fa:	2c00      	cmp	r4, #0
   142fc:	db2f      	blt.n	1435e <shell_exec+0x96>
    print_prompt_if_console(streamer);
   142fe:	4628      	mov	r0, r5
   14300:	f7ff fcba 	bl	13c78 <print_prompt_if_console>
}
   14304:	4620      	mov	r0, r4
   14306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   1430a:	4b18      	ldr	r3, [pc, #96]	; (1436c <shell_exec+0xa4>)
   1430c:	685b      	ldr	r3, [r3, #4]
   1430e:	b10b      	cbz	r3, 14314 <shell_exec+0x4c>
            cmd = &app_cmd;
   14310:	4c16      	ldr	r4, [pc, #88]	; (1436c <shell_exec+0xa4>)
   14312:	e7e2      	b.n	142da <shell_exec+0x12>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   14314:	6832      	ldr	r2, [r6, #0]
   14316:	4916      	ldr	r1, [pc, #88]	; (14370 <shell_exec+0xa8>)
   14318:	4628      	mov	r0, r5
   1431a:	f001 fe98 	bl	1604e <streamer_printf>
            streamer_printf(streamer,
   1431e:	4915      	ldr	r1, [pc, #84]	; (14374 <shell_exec+0xac>)
   14320:	4628      	mov	r0, r5
   14322:	f001 fe94 	bl	1604e <streamer_printf>
            print_prompt_if_console(streamer);
   14326:	4628      	mov	r0, r5
   14328:	f7ff fca6 	bl	13c78 <print_prompt_if_console>
            return SYS_ENOENT;
   1432c:	f06f 0403 	mvn.w	r4, #3
   14330:	e7e8      	b.n	14304 <shell_exec+0x3c>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   14332:	4b11      	ldr	r3, [pc, #68]	; (14378 <shell_exec+0xb0>)
   14334:	429c      	cmp	r4, r3
   14336:	d006      	beq.n	14346 <shell_exec+0x7e>
   14338:	4b10      	ldr	r3, [pc, #64]	; (1437c <shell_exec+0xb4>)
   1433a:	429c      	cmp	r4, r3
   1433c:	d001      	beq.n	14342 <shell_exec+0x7a>
        argc_offset = 1;
   1433e:	2001      	movs	r0, #1
   14340:	e7d1      	b.n	142e6 <shell_exec+0x1e>
    size_t argc_offset = 0;
   14342:	2000      	movs	r0, #0
   14344:	e7cf      	b.n	142e6 <shell_exec+0x1e>
   14346:	2000      	movs	r0, #0
   14348:	e7cd      	b.n	142e6 <shell_exec+0x1e>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   1434a:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1434e:	462b      	mov	r3, r5
   14350:	eb06 0280 	add.w	r2, r6, r0, lsl #2
   14354:	1a39      	subs	r1, r7, r0
   14356:	4620      	mov	r0, r4
   14358:	47c0      	blx	r8
   1435a:	4604      	mov	r4, r0
   1435c:	e7cd      	b.n	142fa <shell_exec+0x32>
        show_cmd_help(argv, streamer);
   1435e:	4629      	mov	r1, r5
   14360:	4630      	mov	r0, r6
   14362:	f7ff fbc7 	bl	13af4 <show_cmd_help>
   14366:	e7ca      	b.n	142fe <shell_exec+0x36>
   14368:	20001410 	.word	0x20001410
   1436c:	20006884 	.word	0x20006884
   14370:	00023d08 	.word	0x00023d08
   14374:	00023e20 	.word	0x00023e20
   14378:	00023ee0 	.word	0x00023ee0
   1437c:	00023ed0 	.word	0x00023ed0

00014380 <shell_process_command>:
{
   14380:	b510      	push	{r4, lr}
   14382:	b08e      	sub	sp, #56	; 0x38
   14384:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   14386:	460b      	mov	r3, r1
   14388:	220d      	movs	r2, #13
   1438a:	a901      	add	r1, sp, #4
   1438c:	f7ff fe7e 	bl	1408c <line2argv>
    if (!argc) {
   14390:	b128      	cbz	r0, 1439e <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   14392:	4622      	mov	r2, r4
   14394:	a901      	add	r1, sp, #4
   14396:	f7ff ff97 	bl	142c8 <shell_exec>
}
   1439a:	b00e      	add	sp, #56	; 0x38
   1439c:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   1439e:	4620      	mov	r0, r4
   143a0:	f7ff fc6a 	bl	13c78 <print_prompt_if_console>
        return;
   143a4:	e7f9      	b.n	1439a <shell_process_command+0x1a>

000143a6 <shell_process_nlip_line>:
{
   143a6:	b570      	push	{r4, r5, r6, lr}
   143a8:	4604      	mov	r4, r0
   143aa:	460e      	mov	r6, r1
    shell_line_len = strlen(shell_line);
   143ac:	f008 f998 	bl	1c6e0 <strlen>
    if (shell_line_len > 2) {
   143b0:	2802      	cmp	r0, #2
   143b2:	d91c      	bls.n	143ee <shell_process_nlip_line+0x48>
   143b4:	4605      	mov	r5, r0
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   143b6:	7823      	ldrb	r3, [r4, #0]
   143b8:	2b06      	cmp	r3, #6
   143ba:	d009      	beq.n	143d0 <shell_process_nlip_line+0x2a>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   143bc:	2b04      	cmp	r3, #4
   143be:	d102      	bne.n	143c6 <shell_process_nlip_line+0x20>
                shell_line[1] == SHELL_NLIP_DATA_START2) {
   143c0:	7863      	ldrb	r3, [r4, #1]
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   143c2:	2b14      	cmp	r3, #20
   143c4:	d00e      	beq.n	143e4 <shell_process_nlip_line+0x3e>
            shell_process_command(shell_line, streamer);
   143c6:	4631      	mov	r1, r6
   143c8:	4620      	mov	r0, r4
   143ca:	f7ff ffd9 	bl	14380 <shell_process_command>
}
   143ce:	bd70      	pop	{r4, r5, r6, pc}
                shell_line[1] == SHELL_NLIP_PKT_START2) {
   143d0:	7862      	ldrb	r2, [r4, #1]
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   143d2:	2a09      	cmp	r2, #9
   143d4:	d1f2      	bne.n	143bc <shell_process_nlip_line+0x16>
            shell_nlip_clear_pkt();
   143d6:	f000 f95b 	bl	14690 <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   143da:	1ea9      	subs	r1, r5, #2
   143dc:	1ca0      	adds	r0, r4, #2
   143de:	f000 f969 	bl	146b4 <shell_nlip_process>
   143e2:	e7f4      	b.n	143ce <shell_process_nlip_line+0x28>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   143e4:	1ea9      	subs	r1, r5, #2
   143e6:	1ca0      	adds	r0, r4, #2
   143e8:	f000 f964 	bl	146b4 <shell_nlip_process>
   143ec:	e7ef      	b.n	143ce <shell_process_nlip_line+0x28>
        shell_process_command(shell_line, streamer);
   143ee:	4631      	mov	r1, r6
   143f0:	4620      	mov	r0, r4
   143f2:	f7ff ffc5 	bl	14380 <shell_process_command>
}
   143f6:	e7ea      	b.n	143ce <shell_process_nlip_line+0x28>

000143f8 <shell>:
{
   143f8:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   143fa:	b160      	cbz	r0, 14416 <shell+0x1e>
   143fc:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   143fe:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   14400:	b165      	cbz	r5, 1441c <shell+0x24>
    streamer = streamer_console_get();
   14402:	f001 fe3f 	bl	16084 <streamer_console_get>
   14406:	4601      	mov	r1, r0
    shell_process_nlip_line(cmd->line, streamer);
   14408:	4628      	mov	r0, r5
   1440a:	f7ff ffcc 	bl	143a6 <shell_process_nlip_line>
    console_line_event_put(ev);
   1440e:	4620      	mov	r0, r4
   14410:	f7ff f8da 	bl	135c8 <console_line_event_put>
}
   14414:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt();
   14416:	f7ff fc21 	bl	13c5c <print_prompt>
        return;
   1441a:	e7fb      	b.n	14414 <shell+0x1c>
        print_prompt();
   1441c:	f7ff fc1e 	bl	13c5c <print_prompt>
        return;
   14420:	e7f8      	b.n	14414 <shell+0x1c>
	...

00014424 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   14424:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   14426:	4b0d      	ldr	r3, [pc, #52]	; (1445c <shell_register+0x38>)
   14428:	681b      	ldr	r3, [r3, #0]
   1442a:	2b02      	cmp	r3, #2
   1442c:	d80a      	bhi.n	14444 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   1442e:	4a0c      	ldr	r2, [pc, #48]	; (14460 <shell_register+0x3c>)
   14430:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   14434:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   14438:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   1443a:	3301      	adds	r3, #1
   1443c:	4a07      	ldr	r2, [pc, #28]	; (1445c <shell_register+0x38>)
   1443e:	6013      	str	r3, [r2, #0]

    return 0;
}
   14440:	2000      	movs	r0, #0
   14442:	bd08      	pop	{r3, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   14444:	4a07      	ldr	r2, [pc, #28]	; (14464 <shell_register+0x40>)
   14446:	2103      	movs	r1, #3
   14448:	2000      	movs	r0, #0
   1444a:	f00b f8b1 	bl	1f5b0 <modlog_printf>
        assert(0);
   1444e:	2300      	movs	r3, #0
   14450:	461a      	mov	r2, r3
   14452:	4619      	mov	r1, r3
   14454:	4618      	mov	r0, r3
   14456:	f7f8 ff83 	bl	d360 <__assert_func>
   1445a:	bf00      	nop
   1445c:	20006bf0 	.word	0x20006bf0
   14460:	20006c1c 	.word	0x20006c1c
   14464:	00023e4c 	.word	0x00023e4c

00014468 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   14468:	b570      	push	{r4, r5, r6, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   1446a:	4b1a      	ldr	r3, [pc, #104]	; (144d4 <shell_cmd_register+0x6c>)
   1446c:	681b      	ldr	r3, [r3, #0]
   1446e:	2b13      	cmp	r3, #19
   14470:	dc10      	bgt.n	14494 <shell_cmd_register+0x2c>
   14472:	4604      	mov	r4, r0
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   14474:	4b18      	ldr	r3, [pc, #96]	; (144d8 <shell_cmd_register+0x70>)
   14476:	681b      	ldr	r3, [r3, #0]
   14478:	b1bb      	cbz	r3, 144aa <shell_cmd_register+0x42>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   1447a:	4e16      	ldr	r6, [pc, #88]	; (144d4 <shell_cmd_register+0x6c>)
   1447c:	6835      	ldr	r5, [r6, #0]
   1447e:	4b17      	ldr	r3, [pc, #92]	; (144dc <shell_cmd_register+0x74>)
   14480:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
   14484:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   14488:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ++num_compat_commands;
   1448c:	3501      	adds	r5, #1
   1448e:	6035      	str	r5, [r6, #0]
    return 0;
}
   14490:	2000      	movs	r0, #0
   14492:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   14494:	4a12      	ldr	r2, [pc, #72]	; (144e0 <shell_cmd_register+0x78>)
   14496:	2103      	movs	r1, #3
   14498:	2000      	movs	r0, #0
   1449a:	f00b f889 	bl	1f5b0 <modlog_printf>
        assert(0);
   1449e:	2300      	movs	r3, #0
   144a0:	461a      	mov	r2, r3
   144a2:	4619      	mov	r1, r3
   144a4:	4618      	mov	r0, r3
   144a6:	f7f8 ff5b 	bl	d360 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   144aa:	4d0e      	ldr	r5, [pc, #56]	; (144e4 <shell_cmd_register+0x7c>)
   144ac:	490b      	ldr	r1, [pc, #44]	; (144dc <shell_cmd_register+0x74>)
   144ae:	4628      	mov	r0, r5
   144b0:	f7ff ffb8 	bl	14424 <shell_register>
        module_registered = 1;
   144b4:	4b08      	ldr	r3, [pc, #32]	; (144d8 <shell_cmd_register+0x70>)
   144b6:	2201      	movs	r2, #1
   144b8:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   144ba:	4628      	mov	r0, r5
   144bc:	f7ff fa5e 	bl	1397c <set_default_module>
        if (rc != 0) {
   144c0:	2800      	cmp	r0, #0
   144c2:	d0da      	beq.n	1447a <shell_cmd_register+0x12>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   144c4:	462b      	mov	r3, r5
   144c6:	4a08      	ldr	r2, [pc, #32]	; (144e8 <shell_cmd_register+0x80>)
   144c8:	2103      	movs	r1, #3
   144ca:	2000      	movs	r0, #0
   144cc:	f00b f870 	bl	1f5b0 <modlog_printf>
   144d0:	e7d3      	b.n	1447a <shell_cmd_register+0x12>
   144d2:	bf00      	nop
   144d4:	20006bec 	.word	0x20006bec
   144d8:	20006be8 	.word	0x20006be8
   144dc:	20006a98 	.word	0x20006a98
   144e0:	00023e6c 	.word	0x00023e6c
   144e4:	00023e94 	.word	0x00023e94
   144e8:	00023e9c 	.word	0x00023e9c

000144ec <shell_init>:
#endif

void
shell_init(void)
{
   144ec:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   144ee:	4b0d      	ldr	r3, [pc, #52]	; (14524 <shell_init+0x38>)
   144f0:	781b      	ldrb	r3, [r3, #0]
   144f2:	b193      	cbz	r3, 1451a <shell_init+0x2e>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   144f4:	f7ff fec8 	bl	14288 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   144f8:	f7f9 fb14 	bl	db24 <os_eventq_dflt_get>
   144fc:	f7ff fedc 	bl	142b8 <shell_evq_set>

    prompt = SHELL_PROMPT;
   14500:	4b09      	ldr	r3, [pc, #36]	; (14528 <shell_init+0x3c>)
   14502:	4a0a      	ldr	r2, [pc, #40]	; (1452c <shell_init+0x40>)
   14504:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   14506:	f000 f95b 	bl	147c0 <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   1450a:	4809      	ldr	r0, [pc, #36]	; (14530 <shell_init+0x44>)
   1450c:	f7ff f870 	bl	135f0 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   14510:	f000 faac 	bl	14a6c <shell_os_register>
#endif
#if MYNEWT_VAL(SHELL_PROMPT_MODULE)
    shell_prompt_register();
   14514:	f000 faf0 	bl	14af8 <shell_prompt_register>
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   14518:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1451a:	461a      	mov	r2, r3
   1451c:	4619      	mov	r1, r3
   1451e:	4618      	mov	r0, r3
   14520:	f7f8 ff1e 	bl	d360 <__assert_func>
   14524:	20006ca8 	.word	0x20006ca8
   14528:	20006bf4 	.word	0x20006bf4
   1452c:	00023ec8 	.word	0x00023ec8
   14530:	00014119 	.word	0x00014119

00014534 <shell_nlip_mtx>:
    return (rc);
}

static int
shell_nlip_mtx(struct os_mbuf *m)
{
   14534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14538:	b08b      	sub	sp, #44	; 0x2c
   1453a:	4680      	mov	r8, r0
#define SHELL_NLIP_MTX_BUF_SIZE (12)
    uint8_t readbuf[SHELL_NLIP_MTX_BUF_SIZE];
    char encodebuf[BASE64_ENCODE_SIZE(SHELL_NLIP_MTX_BUF_SIZE)];
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   1453c:	4b49      	ldr	r3, [pc, #292]	; (14664 <shell_nlip_mtx+0x130>)
   1453e:	681b      	ldr	r3, [r3, #0]
   14540:	f8ad 3008 	strh.w	r3, [sp, #8]
   14544:	0c1b      	lsrs	r3, r3, #16
   14546:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   1454a:	f241 4304 	movw	r3, #5124	; 0x1404
   1454e:	f8ad 3004 	strh.w	r3, [sp, #4]
     *
     * continuation packets are preceded by 04 20 until the entire
     * buffer has been sent.
     */
    crc = CRC16_INITIAL_CRC;
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   14552:	4604      	mov	r4, r0
    crc = CRC16_INITIAL_CRC;
   14554:	2000      	movs	r0, #0
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   14556:	e004      	b.n	14562 <shell_nlip_mtx+0x2e>
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   14558:	88e2      	ldrh	r2, [r4, #6]
   1455a:	6821      	ldr	r1, [r4, #0]
   1455c:	f001 fd38 	bl	15fd0 <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   14560:	68e4      	ldr	r4, [r4, #12]
   14562:	2c00      	cmp	r4, #0
   14564:	d1f8      	bne.n	14558 <shell_nlip_mtx+0x24>
    }
    crc = htons(crc);
   14566:	f3c0 230f 	ubfx	r3, r0, #8, #16
   1456a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1456e:	b284      	uxth	r4, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   14570:	2102      	movs	r1, #2
   14572:	4640      	mov	r0, r8
   14574:	f7fa fc34 	bl	ede0 <os_mbuf_extend>
    if (!ptr) {
   14578:	2800      	cmp	r0, #0
   1457a:	d070      	beq.n	1465e <shell_nlip_mtx+0x12a>
        rc = -1;
        goto err;
    }
    memcpy(ptr, &crc, sizeof(crc));
   1457c:	8004      	strh	r4, [r0, #0]

    totlen = OS_MBUF_PKTHDR(m)->omp_len;
   1457e:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    off = 0;
    bodylen = 0;
    rb_off = 0;

    rc = console_lock(OS_TICKS_PER_SEC);
   14582:	2080      	movs	r0, #128	; 0x80
   14584:	f7fe fc62 	bl	12e4c <console_lock>
    if (rc != OS_OK) {
   14588:	4682      	mov	sl, r0
   1458a:	b118      	cbz	r0, 14594 <shell_nlip_mtx+0x60>
end:
    (void)console_unlock();

err:
    return (rc);
}
   1458c:	4650      	mov	r0, sl
   1458e:	b00b      	add	sp, #44	; 0x2c
   14590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    console_write(pkt_seq, sizeof(pkt_seq));
   14594:	2103      	movs	r1, #3
   14596:	a802      	add	r0, sp, #8
   14598:	f7fe fe4e 	bl	13238 <console_write>
    dlen = htons(totlen);
   1459c:	022b      	lsls	r3, r5, #8
   1459e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    memcpy(readbuf, &dlen, sizeof(dlen));
   145a2:	f8ad 301c 	strh.w	r3, [sp, #28]
    rc = console_lock(OS_TICKS_PER_SEC);
   145a6:	46d3      	mov	fp, sl
    bodylen = 0;
   145a8:	2600      	movs	r6, #0
    rb_off += 2;
   145aa:	2302      	movs	r3, #2
    off = 0;
   145ac:	46b1      	mov	r9, r6
    while (totlen > 0) {
   145ae:	e01c      	b.n	145ea <shell_nlip_mtx+0xb6>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   145b0:	aa07      	add	r2, sp, #28
   145b2:	4413      	add	r3, r2
   145b4:	4622      	mov	r2, r4
   145b6:	4649      	mov	r1, r9
   145b8:	4640      	mov	r0, r8
   145ba:	f7fa fb0c 	bl	ebd6 <os_mbuf_copydata>
            if (rc != 0) {
   145be:	4683      	mov	fp, r0
   145c0:	2800      	cmp	r0, #0
   145c2:	d14a      	bne.n	1465a <shell_nlip_mtx+0x126>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   145c4:	2300      	movs	r3, #0
   145c6:	aa03      	add	r2, sp, #12
   145c8:	4639      	mov	r1, r7
   145ca:	a807      	add	r0, sp, #28
   145cc:	f001 fe94 	bl	162f8 <base64_encode>
   145d0:	4607      	mov	r7, r0
            console_write(encodebuf, elen);
   145d2:	4601      	mov	r1, r0
   145d4:	a803      	add	r0, sp, #12
   145d6:	f7fe fe2f 	bl	13238 <console_write>
            bodylen += elen;
   145da:	443e      	add	r6, r7
   145dc:	b2b6      	uxth	r6, r6
            totlen -= dlen;
   145de:	1b2d      	subs	r5, r5, r4
   145e0:	b2ad      	uxth	r5, r5
            off += dlen;
   145e2:	44a1      	add	r9, r4
   145e4:	fa1f f989 	uxth.w	r9, r9
            bodylen = 0;
   145e8:	4653      	mov	r3, sl
    while (totlen > 0) {
   145ea:	b335      	cbz	r5, 1463a <shell_nlip_mtx+0x106>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   145ec:	f1c3 040c 	rsb	r4, r3, #12
   145f0:	42ac      	cmp	r4, r5
   145f2:	bfa8      	it	ge
   145f4:	462c      	movge	r4, r5
   145f6:	b2a4      	uxth	r4, r4
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   145f8:	191f      	adds	r7, r3, r4
   145fa:	1e79      	subs	r1, r7, #1
   145fc:	4a1a      	ldr	r2, [pc, #104]	; (14668 <shell_nlip_mtx+0x134>)
   145fe:	fb82 0201 	smull	r0, r2, r2, r1
   14602:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   14606:	3201      	adds	r2, #1
   14608:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   1460c:	b292      	uxth	r2, r2
   1460e:	3203      	adds	r2, #3
   14610:	b292      	uxth	r2, r2
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   14612:	2a7f      	cmp	r2, #127	; 0x7f
   14614:	d9cc      	bls.n	145b0 <shell_nlip_mtx+0x7c>
            elen = base64_pad(encodebuf, bodylen);
   14616:	4631      	mov	r1, r6
   14618:	a803      	add	r0, sp, #12
   1461a:	f001 feb7 	bl	1638c <base64_pad>
   1461e:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   14620:	a803      	add	r0, sp, #12
   14622:	f7fe fe09 	bl	13238 <console_write>
            console_write("\n", 1);
   14626:	2101      	movs	r1, #1
   14628:	4810      	ldr	r0, [pc, #64]	; (1466c <shell_nlip_mtx+0x138>)
   1462a:	f7fe fe05 	bl	13238 <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   1462e:	2102      	movs	r1, #2
   14630:	a801      	add	r0, sp, #4
   14632:	f7fe fe01 	bl	13238 <console_write>
            bodylen = 0;
   14636:	2600      	movs	r6, #0
   14638:	e7d6      	b.n	145e8 <shell_nlip_mtx+0xb4>
    elen = base64_pad(encodebuf, bodylen);
   1463a:	4631      	mov	r1, r6
   1463c:	a803      	add	r0, sp, #12
   1463e:	f001 fea5 	bl	1638c <base64_pad>
   14642:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   14644:	a803      	add	r0, sp, #12
   14646:	f7fe fdf7 	bl	13238 <console_write>
    console_write("\n", 1);
   1464a:	2101      	movs	r1, #1
   1464c:	4807      	ldr	r0, [pc, #28]	; (1466c <shell_nlip_mtx+0x138>)
   1464e:	f7fe fdf3 	bl	13238 <console_write>
   14652:	46da      	mov	sl, fp
    (void)console_unlock();
   14654:	f7fe fc14 	bl	12e80 <console_unlock>
   14658:	e798      	b.n	1458c <shell_nlip_mtx+0x58>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   1465a:	4682      	mov	sl, r0
   1465c:	e7fa      	b.n	14654 <shell_nlip_mtx+0x120>
        rc = -1;
   1465e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    return (rc);
   14662:	e793      	b.n	1458c <shell_nlip_mtx+0x58>
   14664:	00023ef0 	.word	0x00023ef0
   14668:	55555556 	.word	0x55555556
   1466c:	00023d90 	.word	0x00023d90

00014670 <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   14670:	b510      	push	{r4, lr}
   14672:	e005      	b.n	14680 <shell_event_data_in+0x10>
   14674:	4604      	mov	r4, r0
        m = os_mqueue_get(&g_shell_nlip_mq);
        if (!m) {
            break;
        }

        (void) shell_nlip_mtx(m);
   14676:	f7ff ff5d 	bl	14534 <shell_nlip_mtx>

        os_mbuf_free_chain(m);
   1467a:	4620      	mov	r0, r4
   1467c:	f7fa fa35 	bl	eaea <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   14680:	4802      	ldr	r0, [pc, #8]	; (1468c <shell_event_data_in+0x1c>)
   14682:	f7fa f9c8 	bl	ea16 <os_mqueue_get>
        if (!m) {
   14686:	2800      	cmp	r0, #0
   14688:	d1f4      	bne.n	14674 <shell_event_data_in+0x4>
    }
}
   1468a:	bd10      	pop	{r4, pc}
   1468c:	20006c44 	.word	0x20006c44

00014690 <shell_nlip_clear_pkt>:
{
   14690:	b508      	push	{r3, lr}
    if (g_nlip_mbuf) {
   14692:	4b06      	ldr	r3, [pc, #24]	; (146ac <shell_nlip_clear_pkt+0x1c>)
   14694:	6818      	ldr	r0, [r3, #0]
   14696:	b120      	cbz	r0, 146a2 <shell_nlip_clear_pkt+0x12>
        os_mbuf_free_chain(g_nlip_mbuf);
   14698:	f7fa fa27 	bl	eaea <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   1469c:	4b03      	ldr	r3, [pc, #12]	; (146ac <shell_nlip_clear_pkt+0x1c>)
   1469e:	2200      	movs	r2, #0
   146a0:	601a      	str	r2, [r3, #0]
    g_nlip_expected_len = 0;
   146a2:	4b03      	ldr	r3, [pc, #12]	; (146b0 <shell_nlip_clear_pkt+0x20>)
   146a4:	2200      	movs	r2, #0
   146a6:	801a      	strh	r2, [r3, #0]
}
   146a8:	bd08      	pop	{r3, pc}
   146aa:	bf00      	nop
   146ac:	20006c38 	.word	0x20006c38
   146b0:	20006c34 	.word	0x20006c34

000146b4 <shell_nlip_process>:
{
   146b4:	b538      	push	{r3, r4, r5, lr}
   146b6:	4605      	mov	r5, r0
    rc = base64_decode(data, data);
   146b8:	4601      	mov	r1, r0
   146ba:	f001 fe7d 	bl	163b8 <base64_decode>
    if (rc < 0) {
   146be:	1e04      	subs	r4, r0, #0
   146c0:	db18      	blt.n	146f4 <shell_nlip_process+0x40>
    if (g_nlip_mbuf == NULL) {
   146c2:	4b30      	ldr	r3, [pc, #192]	; (14784 <shell_nlip_process+0xd0>)
   146c4:	681b      	ldr	r3, [r3, #0]
   146c6:	b1bb      	cbz	r3, 146f8 <shell_nlip_process+0x44>
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   146c8:	4b2e      	ldr	r3, [pc, #184]	; (14784 <shell_nlip_process+0xd0>)
   146ca:	6818      	ldr	r0, [r3, #0]
   146cc:	8a01      	ldrh	r1, [r0, #16]
   146ce:	4b2e      	ldr	r3, [pc, #184]	; (14788 <shell_nlip_process+0xd4>)
   146d0:	881b      	ldrh	r3, [r3, #0]
   146d2:	1a5b      	subs	r3, r3, r1
   146d4:	42a3      	cmp	r3, r4
   146d6:	bfa8      	it	ge
   146d8:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   146da:	b29b      	uxth	r3, r3
   146dc:	462a      	mov	r2, r5
   146de:	f7fa fb3b 	bl	ed58 <os_mbuf_copyinto>
    if (rc != 0) {
   146e2:	4604      	mov	r4, r0
   146e4:	b930      	cbnz	r0, 146f4 <shell_nlip_process+0x40>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   146e6:	4b27      	ldr	r3, [pc, #156]	; (14784 <shell_nlip_process+0xd0>)
   146e8:	681d      	ldr	r5, [r3, #0]
   146ea:	8a2a      	ldrh	r2, [r5, #16]
   146ec:	4b26      	ldr	r3, [pc, #152]	; (14788 <shell_nlip_process+0xd4>)
   146ee:	881b      	ldrh	r3, [r3, #0]
   146f0:	429a      	cmp	r2, r3
   146f2:	d014      	beq.n	1471e <shell_nlip_process+0x6a>
}
   146f4:	4620      	mov	r0, r4
   146f6:	bd38      	pop	{r3, r4, r5, pc}
        if (len < 2) {
   146f8:	2c01      	cmp	r4, #1
   146fa:	dd3c      	ble.n	14776 <shell_nlip_process+0xc2>
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   146fc:	882b      	ldrh	r3, [r5, #0]
   146fe:	0218      	lsls	r0, r3, #8
   14700:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   14704:	b280      	uxth	r0, r0
   14706:	4b20      	ldr	r3, [pc, #128]	; (14788 <shell_nlip_process+0xd4>)
   14708:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   1470a:	2100      	movs	r1, #0
   1470c:	f7f9 fb22 	bl	dd54 <os_msys_get_pkthdr>
   14710:	4b1c      	ldr	r3, [pc, #112]	; (14784 <shell_nlip_process+0xd0>)
   14712:	6018      	str	r0, [r3, #0]
        if (!g_nlip_mbuf) {
   14714:	2800      	cmp	r0, #0
   14716:	d031      	beq.n	1477c <shell_nlip_process+0xc8>
        data += sizeof(uint16_t);
   14718:	3502      	adds	r5, #2
        len -= sizeof(uint16_t);
   1471a:	3c02      	subs	r4, #2
   1471c:	e7d4      	b.n	146c8 <shell_nlip_process+0x14>
        if (g_shell_nlip_in_func) {
   1471e:	4b1b      	ldr	r3, [pc, #108]	; (1478c <shell_nlip_process+0xd8>)
   14720:	681b      	ldr	r3, [r3, #0]
   14722:	b323      	cbz	r3, 1476e <shell_nlip_process+0xba>
            crc = CRC16_INITIAL_CRC;
   14724:	2000      	movs	r0, #0
   14726:	e004      	b.n	14732 <shell_nlip_process+0x7e>
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   14728:	88ea      	ldrh	r2, [r5, #6]
   1472a:	6829      	ldr	r1, [r5, #0]
   1472c:	f001 fc50 	bl	15fd0 <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   14730:	68ed      	ldr	r5, [r5, #12]
   14732:	2d00      	cmp	r5, #0
   14734:	d1f8      	bne.n	14728 <shell_nlip_process+0x74>
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   14736:	b918      	cbnz	r0, 14740 <shell_nlip_process+0x8c>
   14738:	4b13      	ldr	r3, [pc, #76]	; (14788 <shell_nlip_process+0xd4>)
   1473a:	881b      	ldrh	r3, [r3, #0]
   1473c:	2b01      	cmp	r3, #1
   1473e:	d809      	bhi.n	14754 <shell_nlip_process+0xa0>
                os_mbuf_free_chain(g_nlip_mbuf);
   14740:	4b10      	ldr	r3, [pc, #64]	; (14784 <shell_nlip_process+0xd0>)
   14742:	6818      	ldr	r0, [r3, #0]
   14744:	f7fa f9d1 	bl	eaea <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   14748:	2300      	movs	r3, #0
   1474a:	4a0e      	ldr	r2, [pc, #56]	; (14784 <shell_nlip_process+0xd0>)
   1474c:	6013      	str	r3, [r2, #0]
        g_nlip_expected_len = 0;
   1474e:	4a0e      	ldr	r2, [pc, #56]	; (14788 <shell_nlip_process+0xd4>)
   14750:	8013      	strh	r3, [r2, #0]
   14752:	e7cf      	b.n	146f4 <shell_nlip_process+0x40>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   14754:	4d0b      	ldr	r5, [pc, #44]	; (14784 <shell_nlip_process+0xd0>)
   14756:	f06f 0101 	mvn.w	r1, #1
   1475a:	6828      	ldr	r0, [r5, #0]
   1475c:	f7fa fa68 	bl	ec30 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   14760:	4b0a      	ldr	r3, [pc, #40]	; (1478c <shell_nlip_process+0xd8>)
   14762:	681b      	ldr	r3, [r3, #0]
   14764:	4a0a      	ldr	r2, [pc, #40]	; (14790 <shell_nlip_process+0xdc>)
   14766:	6811      	ldr	r1, [r2, #0]
   14768:	6828      	ldr	r0, [r5, #0]
   1476a:	4798      	blx	r3
   1476c:	e7ec      	b.n	14748 <shell_nlip_process+0x94>
            os_mbuf_free_chain(g_nlip_mbuf);
   1476e:	4628      	mov	r0, r5
   14770:	f7fa f9bb 	bl	eaea <os_mbuf_free_chain>
   14774:	e7e8      	b.n	14748 <shell_nlip_process+0x94>
            rc = -1;
   14776:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1477a:	e7bb      	b.n	146f4 <shell_nlip_process+0x40>
            rc = -1;
   1477c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14780:	e7b8      	b.n	146f4 <shell_nlip_process+0x40>
   14782:	bf00      	nop
   14784:	20006c38 	.word	0x20006c38
   14788:	20006c34 	.word	0x20006c34
   1478c:	20006c40 	.word	0x20006c40
   14790:	20006c3c 	.word	0x20006c3c

00014794 <shell_nlip_input_register>:
    g_shell_nlip_in_func = nf;
   14794:	4b02      	ldr	r3, [pc, #8]	; (147a0 <shell_nlip_input_register+0xc>)
   14796:	6018      	str	r0, [r3, #0]
    g_shell_nlip_in_arg = arg;
   14798:	4b02      	ldr	r3, [pc, #8]	; (147a4 <shell_nlip_input_register+0x10>)
   1479a:	6019      	str	r1, [r3, #0]
}
   1479c:	2000      	movs	r0, #0
   1479e:	4770      	bx	lr
   147a0:	20006c40 	.word	0x20006c40
   147a4:	20006c3c 	.word	0x20006c3c

000147a8 <shell_nlip_output>:
{
   147a8:	b510      	push	{r4, lr}
   147aa:	4604      	mov	r4, r0
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
   147ac:	f7f9 f9ba 	bl	db24 <os_eventq_dflt_get>
   147b0:	4601      	mov	r1, r0
   147b2:	4622      	mov	r2, r4
   147b4:	4801      	ldr	r0, [pc, #4]	; (147bc <shell_nlip_output+0x14>)
   147b6:	f7fa f93f 	bl	ea38 <os_mqueue_put>
}
   147ba:	bd10      	pop	{r4, pc}
   147bc:	20006c44 	.word	0x20006c44

000147c0 <shell_nlip_init>:

void
shell_nlip_init(void)
{
   147c0:	b508      	push	{r3, lr}
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   147c2:	2200      	movs	r2, #0
   147c4:	4902      	ldr	r1, [pc, #8]	; (147d0 <shell_nlip_init+0x10>)
   147c6:	4803      	ldr	r0, [pc, #12]	; (147d4 <shell_nlip_init+0x14>)
   147c8:	f7fa f91a 	bl	ea00 <os_mqueue_init>
}
   147cc:	bd08      	pop	{r3, pc}
   147ce:	bf00      	nop
   147d0:	00014671 	.word	0x00014671
   147d4:	20006c44 	.word	0x20006c44

000147d8 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   147d8:	b500      	push	{lr}
   147da:	b083      	sub	sp, #12
   147dc:	4602      	mov	r2, r0
   147de:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   147e0:	69d3      	ldr	r3, [r2, #28]
   147e2:	9300      	str	r3, [sp, #0]
   147e4:	7ed3      	ldrb	r3, [r2, #27]
   147e6:	7e92      	ldrb	r2, [r2, #26]
   147e8:	4903      	ldr	r1, [pc, #12]	; (147f8 <shell_os_ls_dev+0x20>)
   147ea:	f001 fc30 	bl	1604e <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   147ee:	2000      	movs	r0, #0
   147f0:	b003      	add	sp, #12
   147f2:	f85d fb04 	ldr.w	pc, [sp], #4
   147f6:	bf00      	nop
   147f8:	00023ef4 	.word	0x00023ef4

000147fc <shell_os_mpool_display_cmd>:
{
   147fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   147fe:	b091      	sub	sp, #68	; 0x44
   14800:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   14802:	2901      	cmp	r1, #1
   14804:	dd04      	ble.n	14810 <shell_os_mpool_display_cmd+0x14>
   14806:	6855      	ldr	r5, [r2, #4]
   14808:	782b      	ldrb	r3, [r5, #0]
   1480a:	b913      	cbnz	r3, 14812 <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   1480c:	2500      	movs	r5, #0
   1480e:	e000      	b.n	14812 <shell_os_mpool_display_cmd+0x16>
   14810:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   14812:	491d      	ldr	r1, [pc, #116]	; (14888 <shell_os_mpool_display_cmd+0x8c>)
   14814:	4630      	mov	r0, r6
   14816:	f001 fc1a 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   1481a:	4b1c      	ldr	r3, [pc, #112]	; (1488c <shell_os_mpool_display_cmd+0x90>)
   1481c:	9302      	str	r3, [sp, #8]
   1481e:	4b1c      	ldr	r3, [pc, #112]	; (14890 <shell_os_mpool_display_cmd+0x94>)
   14820:	9301      	str	r3, [sp, #4]
   14822:	4b1c      	ldr	r3, [pc, #112]	; (14894 <shell_os_mpool_display_cmd+0x98>)
   14824:	9300      	str	r3, [sp, #0]
   14826:	4b1c      	ldr	r3, [pc, #112]	; (14898 <shell_os_mpool_display_cmd+0x9c>)
   14828:	4a1c      	ldr	r2, [pc, #112]	; (1489c <shell_os_mpool_display_cmd+0xa0>)
   1482a:	491d      	ldr	r1, [pc, #116]	; (148a0 <shell_os_mpool_display_cmd+0xa4>)
   1482c:	4630      	mov	r0, r6
   1482e:	f001 fc0e 	bl	1604e <streamer_printf>
    found = 0;
   14832:	2700      	movs	r7, #0
    mp = NULL;
   14834:	463c      	mov	r4, r7
   14836:	e00b      	b.n	14850 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   14838:	9b07      	ldr	r3, [sp, #28]
   1483a:	9302      	str	r3, [sp, #8]
   1483c:	9a06      	ldr	r2, [sp, #24]
   1483e:	9201      	str	r2, [sp, #4]
   14840:	9a05      	ldr	r2, [sp, #20]
   14842:	9200      	str	r2, [sp, #0]
   14844:	9b04      	ldr	r3, [sp, #16]
   14846:	aa08      	add	r2, sp, #32
   14848:	4916      	ldr	r1, [pc, #88]	; (148a4 <shell_os_mpool_display_cmd+0xa8>)
   1484a:	4630      	mov	r0, r6
   1484c:	f001 fbff 	bl	1604e <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   14850:	a904      	add	r1, sp, #16
   14852:	4620      	mov	r0, r4
   14854:	f7f9 f9ee 	bl	dc34 <os_mempool_info_get_next>
        if (mp == NULL) {
   14858:	4604      	mov	r4, r0
   1485a:	b148      	cbz	r0, 14870 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   1485c:	2d00      	cmp	r5, #0
   1485e:	d0eb      	beq.n	14838 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   14860:	a908      	add	r1, sp, #32
   14862:	4628      	mov	r0, r5
   14864:	f7fc fe36 	bl	114d4 <strcmp>
   14868:	2800      	cmp	r0, #0
   1486a:	d1f1      	bne.n	14850 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   1486c:	2701      	movs	r7, #1
   1486e:	e7e3      	b.n	14838 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   14870:	b105      	cbz	r5, 14874 <shell_os_mpool_display_cmd+0x78>
   14872:	b117      	cbz	r7, 1487a <shell_os_mpool_display_cmd+0x7e>
}
   14874:	2000      	movs	r0, #0
   14876:	b011      	add	sp, #68	; 0x44
   14878:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   1487a:	462a      	mov	r2, r5
   1487c:	490a      	ldr	r1, [pc, #40]	; (148a8 <shell_os_mpool_display_cmd+0xac>)
   1487e:	4630      	mov	r0, r6
   14880:	f001 fbe5 	bl	1604e <streamer_printf>
   14884:	e7f6      	b.n	14874 <shell_os_mpool_display_cmd+0x78>
   14886:	bf00      	nop
   14888:	00023f00 	.word	0x00023f00
   1488c:	00023f2c 	.word	0x00023f2c
   14890:	00023f30 	.word	0x00023f30
   14894:	00023618 	.word	0x00023618
   14898:	00023f0c 	.word	0x00023f0c
   1489c:	000258b8 	.word	0x000258b8
   148a0:	00023f14 	.word	0x00023f14
   148a4:	00023f38 	.word	0x00023f38
   148a8:	00023f50 	.word	0x00023f50

000148ac <shell_os_date_cmd>:
{
   148ac:	b530      	push	{r4, r5, lr}
   148ae:	b08f      	sub	sp, #60	; 0x3c
   148b0:	461c      	mov	r4, r3
    if (argc == 0) {
   148b2:	3901      	subs	r1, #1
   148b4:	d00f      	beq.n	148d6 <shell_os_date_cmd+0x2a>
   148b6:	4610      	mov	r0, r2
    } else if (argc == 1) {
   148b8:	2901      	cmp	r1, #1
   148ba:	d132      	bne.n	14922 <shell_os_date_cmd+0x76>
        rc = datetime_parse(*argv, &tv, &tz);
   148bc:	aa09      	add	r2, sp, #36	; 0x24
   148be:	a90a      	add	r1, sp, #40	; 0x28
   148c0:	6840      	ldr	r0, [r0, #4]
   148c2:	f001 fa1d 	bl	15d00 <datetime_parse>
        if (rc == 0) {
   148c6:	4605      	mov	r5, r0
   148c8:	bb30      	cbnz	r0, 14918 <shell_os_date_cmd+0x6c>
            rc = os_settimeofday(&tv, &tz);
   148ca:	a909      	add	r1, sp, #36	; 0x24
   148cc:	a80a      	add	r0, sp, #40	; 0x28
   148ce:	f7f9 ff97 	bl	e800 <os_settimeofday>
   148d2:	4605      	mov	r5, r0
   148d4:	e011      	b.n	148fa <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   148d6:	a909      	add	r1, sp, #36	; 0x24
   148d8:	a80a      	add	r0, sp, #40	; 0x28
   148da:	f7f9 ff45 	bl	e768 <os_gettimeofday>
        assert(rc == 0);
   148de:	b978      	cbnz	r0, 14900 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   148e0:	2321      	movs	r3, #33	; 0x21
   148e2:	466a      	mov	r2, sp
   148e4:	a909      	add	r1, sp, #36	; 0x24
   148e6:	a80a      	add	r0, sp, #40	; 0x28
   148e8:	f001 fb0a 	bl	15f00 <datetime_format>
        assert(rc == 0);
   148ec:	4605      	mov	r5, r0
   148ee:	b968      	cbnz	r0, 1490c <shell_os_date_cmd+0x60>
        streamer_printf(streamer, "%s\n", buf);
   148f0:	466a      	mov	r2, sp
   148f2:	490d      	ldr	r1, [pc, #52]	; (14928 <shell_os_date_cmd+0x7c>)
   148f4:	4620      	mov	r0, r4
   148f6:	f001 fbaa 	bl	1604e <streamer_printf>
}
   148fa:	4628      	mov	r0, r5
   148fc:	b00f      	add	sp, #60	; 0x3c
   148fe:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   14900:	2300      	movs	r3, #0
   14902:	461a      	mov	r2, r3
   14904:	4619      	mov	r1, r3
   14906:	4618      	mov	r0, r3
   14908:	f7f8 fd2a 	bl	d360 <__assert_func>
        assert(rc == 0);
   1490c:	2300      	movs	r3, #0
   1490e:	461a      	mov	r2, r3
   14910:	4619      	mov	r1, r3
   14912:	4618      	mov	r0, r3
   14914:	f7f8 fd24 	bl	d360 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   14918:	4904      	ldr	r1, [pc, #16]	; (1492c <shell_os_date_cmd+0x80>)
   1491a:	4620      	mov	r0, r4
   1491c:	f001 fb97 	bl	1604e <streamer_printf>
   14920:	e7eb      	b.n	148fa <shell_os_date_cmd+0x4e>
        rc = -1;
   14922:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   14926:	e7e8      	b.n	148fa <shell_os_date_cmd+0x4e>
   14928:	00023fa0 	.word	0x00023fa0
   1492c:	00023f7c 	.word	0x00023f7c

00014930 <shell_os_reset_cmd>:
{
   14930:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   14932:	200c      	movs	r0, #12
   14934:	f7f9 ff04 	bl	e740 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   14938:	2006      	movs	r0, #6
   1493a:	f7f8 fe7a 	bl	d632 <os_reboot>
}
   1493e:	2000      	movs	r0, #0
   14940:	bd08      	pop	{r3, pc}
	...

00014944 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   14944:	b510      	push	{r4, lr}
   14946:	b082      	sub	sp, #8
   14948:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   1494a:	4b07      	ldr	r3, [pc, #28]	; (14968 <shell_os_ls_dev_cmd+0x24>)
   1494c:	9300      	str	r3, [sp, #0]
   1494e:	4b07      	ldr	r3, [pc, #28]	; (1496c <shell_os_ls_dev_cmd+0x28>)
   14950:	4a07      	ldr	r2, [pc, #28]	; (14970 <shell_os_ls_dev_cmd+0x2c>)
   14952:	4908      	ldr	r1, [pc, #32]	; (14974 <shell_os_ls_dev_cmd+0x30>)
   14954:	4620      	mov	r0, r4
   14956:	f001 fb7a 	bl	1604e <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   1495a:	4621      	mov	r1, r4
   1495c:	4806      	ldr	r0, [pc, #24]	; (14978 <shell_os_ls_dev_cmd+0x34>)
   1495e:	f7f9 f815 	bl	d98c <os_dev_walk>
    return 0;
}
   14962:	2000      	movs	r0, #0
   14964:	b002      	add	sp, #8
   14966:	bd10      	pop	{r4, pc}
   14968:	000258b8 	.word	0x000258b8
   1496c:	00023f90 	.word	0x00023f90
   14970:	00023f94 	.word	0x00023f94
   14974:	00023f98 	.word	0x00023f98
   14978:	000147d9 	.word	0x000147d9

0001497c <shell_os_tasks_display_cmd>:
{
   1497c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1497e:	b097      	sub	sp, #92	; 0x5c
   14980:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   14982:	2901      	cmp	r1, #1
   14984:	dd04      	ble.n	14990 <shell_os_tasks_display_cmd+0x14>
   14986:	6855      	ldr	r5, [r2, #4]
   14988:	782b      	ldrb	r3, [r5, #0]
   1498a:	b913      	cbnz	r3, 14992 <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   1498c:	2500      	movs	r5, #0
   1498e:	e000      	b.n	14992 <shell_os_tasks_display_cmd+0x16>
   14990:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   14992:	4928      	ldr	r1, [pc, #160]	; (14a34 <shell_os_tasks_display_cmd+0xb8>)
   14994:	4630      	mov	r0, r6
   14996:	f001 fb5a 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   1499a:	4b27      	ldr	r3, [pc, #156]	; (14a38 <shell_os_tasks_display_cmd+0xbc>)
   1499c:	9307      	str	r3, [sp, #28]
   1499e:	4b27      	ldr	r3, [pc, #156]	; (14a3c <shell_os_tasks_display_cmd+0xc0>)
   149a0:	9306      	str	r3, [sp, #24]
   149a2:	4b27      	ldr	r3, [pc, #156]	; (14a40 <shell_os_tasks_display_cmd+0xc4>)
   149a4:	9305      	str	r3, [sp, #20]
   149a6:	4b27      	ldr	r3, [pc, #156]	; (14a44 <shell_os_tasks_display_cmd+0xc8>)
   149a8:	9304      	str	r3, [sp, #16]
   149aa:	4b27      	ldr	r3, [pc, #156]	; (14a48 <shell_os_tasks_display_cmd+0xcc>)
   149ac:	9303      	str	r3, [sp, #12]
   149ae:	4b27      	ldr	r3, [pc, #156]	; (14a4c <shell_os_tasks_display_cmd+0xd0>)
   149b0:	9302      	str	r3, [sp, #8]
   149b2:	4b27      	ldr	r3, [pc, #156]	; (14a50 <shell_os_tasks_display_cmd+0xd4>)
   149b4:	9301      	str	r3, [sp, #4]
   149b6:	4b27      	ldr	r3, [pc, #156]	; (14a54 <shell_os_tasks_display_cmd+0xd8>)
   149b8:	9300      	str	r3, [sp, #0]
   149ba:	4b27      	ldr	r3, [pc, #156]	; (14a58 <shell_os_tasks_display_cmd+0xdc>)
   149bc:	4a27      	ldr	r2, [pc, #156]	; (14a5c <shell_os_tasks_display_cmd+0xe0>)
   149be:	4928      	ldr	r1, [pc, #160]	; (14a60 <shell_os_tasks_display_cmd+0xe4>)
   149c0:	4630      	mov	r0, r6
   149c2:	f001 fb44 	bl	1604e <streamer_printf>
    found = 0;
   149c6:	2700      	movs	r7, #0
    prev_task = NULL;
   149c8:	463c      	mov	r4, r7
   149ca:	e017      	b.n	149fc <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   149cc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   149d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   149d4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   149d8:	980d      	ldr	r0, [sp, #52]	; 0x34
   149da:	9006      	str	r0, [sp, #24]
   149dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   149de:	9005      	str	r0, [sp, #20]
   149e0:	9104      	str	r1, [sp, #16]
   149e2:	9303      	str	r3, [sp, #12]
   149e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149e6:	9302      	str	r3, [sp, #8]
   149e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   149ea:	9101      	str	r1, [sp, #4]
   149ec:	9200      	str	r2, [sp, #0]
   149ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
   149f2:	aa0e      	add	r2, sp, #56	; 0x38
   149f4:	491b      	ldr	r1, [pc, #108]	; (14a64 <shell_os_tasks_display_cmd+0xe8>)
   149f6:	4630      	mov	r0, r6
   149f8:	f001 fb29 	bl	1604e <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   149fc:	a908      	add	r1, sp, #32
   149fe:	4620      	mov	r0, r4
   14a00:	f7f9 fdce 	bl	e5a0 <os_task_info_get_next>
        if (prev_task == NULL) {
   14a04:	4604      	mov	r4, r0
   14a06:	b148      	cbz	r0, 14a1c <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   14a08:	2d00      	cmp	r5, #0
   14a0a:	d0df      	beq.n	149cc <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   14a0c:	a90e      	add	r1, sp, #56	; 0x38
   14a0e:	4628      	mov	r0, r5
   14a10:	f7fc fd60 	bl	114d4 <strcmp>
   14a14:	2800      	cmp	r0, #0
   14a16:	d1f1      	bne.n	149fc <shell_os_tasks_display_cmd+0x80>
                found = 1;
   14a18:	2701      	movs	r7, #1
   14a1a:	e7d7      	b.n	149cc <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   14a1c:	b105      	cbz	r5, 14a20 <shell_os_tasks_display_cmd+0xa4>
   14a1e:	b117      	cbz	r7, 14a26 <shell_os_tasks_display_cmd+0xaa>
}
   14a20:	2000      	movs	r0, #0
   14a22:	b017      	add	sp, #92	; 0x5c
   14a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   14a26:	462a      	mov	r2, r5
   14a28:	490f      	ldr	r1, [pc, #60]	; (14a68 <shell_os_tasks_display_cmd+0xec>)
   14a2a:	4630      	mov	r0, r6
   14a2c:	f001 fb0f 	bl	1604e <streamer_printf>
   14a30:	e7f6      	b.n	14a20 <shell_os_tasks_display_cmd+0xa4>
   14a32:	bf00      	nop
   14a34:	00023fa4 	.word	0x00023fa4
   14a38:	00023f90 	.word	0x00023f90
   14a3c:	00023fe8 	.word	0x00023fe8
   14a40:	00023ff0 	.word	0x00023ff0
   14a44:	00023ff8 	.word	0x00023ff8
   14a48:	00024000 	.word	0x00024000
   14a4c:	00024008 	.word	0x00024008
   14a50:	0002400c 	.word	0x0002400c
   14a54:	00024014 	.word	0x00024014
   14a58:	00023fb0 	.word	0x00023fb0
   14a5c:	00023fb4 	.word	0x00023fb4
   14a60:	00023fbc 	.word	0x00023fbc
   14a64:	00024018 	.word	0x00024018
   14a68:	00024044 	.word	0x00024044

00014a6c <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   14a6c:	b530      	push	{r4, r5, lr}
   14a6e:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   14a70:	4c0a      	ldr	r4, [pc, #40]	; (14a9c <shell_os_register+0x30>)
   14a72:	e000      	b.n	14a76 <shell_os_register+0xa>
   14a74:	3410      	adds	r4, #16
   14a76:	68a3      	ldr	r3, [r4, #8]
   14a78:	b16b      	cbz	r3, 14a96 <shell_os_register+0x2a>
        rc = shell_cmd_register(cmd);
   14a7a:	4620      	mov	r0, r4
   14a7c:	f7ff fcf4 	bl	14468 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   14a80:	2800      	cmp	r0, #0
   14a82:	d0f7      	beq.n	14a74 <shell_os_register+0x8>
   14a84:	2000      	movs	r0, #0
   14a86:	9000      	str	r0, [sp, #0]
   14a88:	4b05      	ldr	r3, [pc, #20]	; (14aa0 <shell_os_register+0x34>)
   14a8a:	681d      	ldr	r5, [r3, #0]
   14a8c:	4603      	mov	r3, r0
   14a8e:	4602      	mov	r2, r0
   14a90:	4601      	mov	r1, r0
   14a92:	47a8      	blx	r5
   14a94:	e7ee      	b.n	14a74 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   14a96:	b003      	add	sp, #12
   14a98:	bd30      	pop	{r4, r5, pc}
   14a9a:	bf00      	nop
   14a9c:	00024134 	.word	0x00024134
   14aa0:	2000143c 	.word	0x2000143c

00014aa4 <shell_ticks_cmd>:
/**
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
   14aa4:	b510      	push	{r4, lr}
    if (argc > 1) {
   14aa6:	2801      	cmp	r0, #1
   14aa8:	dd16      	ble.n	14ad8 <shell_ticks_cmd+0x34>
        if (!strcmp(argv[1], "on")) {
   14aaa:	684c      	ldr	r4, [r1, #4]
   14aac:	490d      	ldr	r1, [pc, #52]	; (14ae4 <shell_ticks_cmd+0x40>)
   14aae:	4620      	mov	r0, r4
   14ab0:	f7fc fd10 	bl	114d4 <strcmp>
   14ab4:	b150      	cbz	r0, 14acc <shell_ticks_cmd+0x28>
            console_yes_ticks();
            console_printf(" Console Ticks on\n");
        }
        else if (!strcmp(argv[1],"off")) {
   14ab6:	490c      	ldr	r1, [pc, #48]	; (14ae8 <shell_ticks_cmd+0x44>)
   14ab8:	4620      	mov	r0, r4
   14aba:	f7fc fd0b 	bl	114d4 <strcmp>
   14abe:	b970      	cbnz	r0, 14ade <shell_ticks_cmd+0x3a>
            console_printf(" Console Ticks off\n");
   14ac0:	480a      	ldr	r0, [pc, #40]	; (14aec <shell_ticks_cmd+0x48>)
   14ac2:	f7fe fde1 	bl	13688 <console_printf>
            console_no_ticks();
   14ac6:	f7fe fe95 	bl	137f4 <console_no_ticks>
        }
        return 0;
   14aca:	e008      	b.n	14ade <shell_ticks_cmd+0x3a>
            console_yes_ticks();
   14acc:	f7fe fe98 	bl	13800 <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   14ad0:	4807      	ldr	r0, [pc, #28]	; (14af0 <shell_ticks_cmd+0x4c>)
   14ad2:	f7fe fdd9 	bl	13688 <console_printf>
   14ad6:	e002      	b.n	14ade <shell_ticks_cmd+0x3a>
    }
    console_printf(" Usage: ticks [on|off]\n");
   14ad8:	4806      	ldr	r0, [pc, #24]	; (14af4 <shell_ticks_cmd+0x50>)
   14ada:	f7fe fdd5 	bl	13688 <console_printf>
    return 0;
}
   14ade:	2000      	movs	r0, #0
   14ae0:	bd10      	pop	{r4, pc}
   14ae2:	bf00      	nop
   14ae4:	000241c4 	.word	0x000241c4
   14ae8:	000241dc 	.word	0x000241dc
   14aec:	000241e0 	.word	0x000241e0
   14af0:	000241c8 	.word	0x000241c8
   14af4:	000241f4 	.word	0x000241f4

00014af8 <shell_prompt_register>:
};


void
shell_prompt_register(void)
{
   14af8:	b508      	push	{r3, lr}
    shell_register(SHELL_PROMPT, prompt_commands);
   14afa:	4902      	ldr	r1, [pc, #8]	; (14b04 <shell_prompt_register+0xc>)
   14afc:	4802      	ldr	r0, [pc, #8]	; (14b08 <shell_prompt_register+0x10>)
   14afe:	f7ff fc91 	bl	14424 <shell_register>
}
   14b02:	bd08      	pop	{r3, pc}
   14b04:	00024250 	.word	0x00024250
   14b08:	0002420c 	.word	0x0002420c

00014b0c <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   14b0c:	88c3      	ldrh	r3, [r0, #6]
   14b0e:	f013 0f01 	tst.w	r3, #1
   14b12:	d001      	beq.n	14b18 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   14b14:	2038      	movs	r0, #56	; 0x38
   14b16:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   14b18:	2014      	movs	r0, #20
    }
}
   14b1a:	4770      	bx	lr

00014b1c <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   14b1c:	b570      	push	{r4, r5, r6, lr}
   14b1e:	4606      	mov	r6, r0
   14b20:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   14b22:	4b0f      	ldr	r3, [pc, #60]	; (14b60 <stats_register_internal+0x44>)
   14b24:	681c      	ldr	r4, [r3, #0]
   14b26:	e000      	b.n	14b2a <stats_register_internal+0xe>
   14b28:	6924      	ldr	r4, [r4, #16]
   14b2a:	b14c      	cbz	r4, 14b40 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   14b2c:	4631      	mov	r1, r6
   14b2e:	6820      	ldr	r0, [r4, #0]
   14b30:	f7fc fcd0 	bl	114d4 <strcmp>
   14b34:	b188      	cbz	r0, 14b5a <stats_register_internal+0x3e>
   14b36:	42ac      	cmp	r4, r5
   14b38:	d1f6      	bne.n	14b28 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   14b3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b3e:	e00b      	b.n	14b58 <stats_register_internal+0x3c>
    shdr->s_name = name;
   14b40:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   14b42:	2000      	movs	r0, #0
   14b44:	6128      	str	r0, [r5, #16]
   14b46:	4b06      	ldr	r3, [pc, #24]	; (14b60 <stats_register_internal+0x44>)
   14b48:	685a      	ldr	r2, [r3, #4]
   14b4a:	6015      	str	r5, [r2, #0]
   14b4c:	3510      	adds	r5, #16
   14b4e:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   14b50:	4a04      	ldr	r2, [pc, #16]	; (14b64 <stats_register_internal+0x48>)
   14b52:	6953      	ldr	r3, [r2, #20]
   14b54:	3301      	adds	r3, #1
   14b56:	6153      	str	r3, [r2, #20]
}
   14b58:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   14b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b5e:	e7fb      	b.n	14b58 <stats_register_internal+0x3c>
   14b60:	20001414 	.word	0x20001414
   14b64:	20006c5c 	.word	0x20006c5c

00014b68 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   14b68:	7943      	ldrb	r3, [r0, #5]
   14b6a:	7900      	ldrb	r0, [r0, #4]
}
   14b6c:	fb03 f000 	mul.w	r0, r3, r0
   14b70:	4770      	bx	lr
	...

00014b74 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   14b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14b78:	b085      	sub	sp, #20
   14b7a:	4604      	mov	r4, r0
   14b7c:	4688      	mov	r8, r1
   14b7e:	4617      	mov	r7, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   14b80:	f7ff ffc4 	bl	14b0c <stats_offset>
   14b84:	4681      	mov	r9, r0
   14b86:	b285      	uxth	r5, r0
    cur = start;
    end = start + stats_size(hdr);
   14b88:	4620      	mov	r0, r4
   14b8a:	f7ff ffed 	bl	14b68 <stats_size>
   14b8e:	fa15 f680 	uxtah	r6, r5, r0
   14b92:	b2b6      	uxth	r6, r6

    while (cur < end) {
   14b94:	e00d      	b.n	14bb2 <stats_walk+0x3e>
         * offset.  This annotation allows for naming only certain statistics,
         * and doesn't enforce ordering restrictions on the stats name map.
         */
        for (i = 0; i < hdr->s_map_cnt; ++i) {
            if (hdr->s_map[i].snm_off == cur) {
                name = hdr->s_map[i].snm_name;
   14b96:	f8d0 2002 	ldr.w	r2, [r0, #2]
                break;
   14b9a:	e000      	b.n	14b9e <stats_walk+0x2a>
        name = NULL;
   14b9c:	2200      	movs	r2, #0
#endif
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
   14b9e:	b1ca      	cbz	r2, 14bd4 <stats_walk+0x60>
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
            name_buf[len] = '\0';
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   14ba0:	462b      	mov	r3, r5
   14ba2:	4639      	mov	r1, r7
   14ba4:	4620      	mov	r0, r4
   14ba6:	47c0      	blx	r8
        if (rc != 0) {
   14ba8:	4603      	mov	r3, r0
   14baa:	bb40      	cbnz	r0, 14bfe <stats_walk+0x8a>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   14bac:	7923      	ldrb	r3, [r4, #4]
   14bae:	441d      	add	r5, r3
   14bb0:	b2ad      	uxth	r5, r5
    while (cur < end) {
   14bb2:	42b5      	cmp	r5, r6
   14bb4:	d222      	bcs.n	14bfc <stats_walk+0x88>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   14bb6:	2300      	movs	r3, #0
   14bb8:	68e2      	ldr	r2, [r4, #12]
   14bba:	429a      	cmp	r2, r3
   14bbc:	ddee      	ble.n	14b9c <stats_walk+0x28>
            if (hdr->s_map[i].snm_off == cur) {
   14bbe:	68a2      	ldr	r2, [r4, #8]
   14bc0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   14bc4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   14bc8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   14bcc:	42aa      	cmp	r2, r5
   14bce:	d0e2      	beq.n	14b96 <stats_walk+0x22>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   14bd0:	3301      	adds	r3, #1
   14bd2:	e7f1      	b.n	14bb8 <stats_walk+0x44>
            ent_n = (cur - start) / hdr->s_size;
   14bd4:	fa1f f389 	uxth.w	r3, r9
   14bd8:	1aeb      	subs	r3, r5, r3
   14bda:	7922      	ldrb	r2, [r4, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   14bdc:	fb93 f3f2 	sdiv	r3, r3, r2
   14be0:	4a09      	ldr	r2, [pc, #36]	; (14c08 <stats_walk+0x94>)
   14be2:	210c      	movs	r1, #12
   14be4:	a801      	add	r0, sp, #4
   14be6:	f7fd f884 	bl	11cf2 <snprintf>
            name_buf[len] = '\0';
   14bea:	f100 0310 	add.w	r3, r0, #16
   14bee:	eb0d 0003 	add.w	r0, sp, r3
   14bf2:	2300      	movs	r3, #0
   14bf4:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   14bf8:	aa01      	add	r2, sp, #4
   14bfa:	e7d1      	b.n	14ba0 <stats_walk+0x2c>
    }

    return (0);
   14bfc:	2300      	movs	r3, #0
err:
    return (rc);
}
   14bfe:	4618      	mov	r0, r3
   14c00:	b005      	add	sp, #20
   14c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14c06:	bf00      	nop
   14c08:	00024294 	.word	0x00024294

00014c0c <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   14c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c0e:	4604      	mov	r4, r0
   14c10:	460e      	mov	r6, r1
   14c12:	4615      	mov	r5, r2
   14c14:	461f      	mov	r7, r3
    size_t offset;

    offset = stats_offset(shdr);
   14c16:	f7ff ff79 	bl	14b0c <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   14c1a:	fb05 f206 	mul.w	r2, r5, r6
   14c1e:	2100      	movs	r1, #0
   14c20:	4420      	add	r0, r4
   14c22:	f7fc fc36 	bl	11492 <memset>

    shdr->s_size = size;
   14c26:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   14c28:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   14c2a:	2000      	movs	r0, #0
   14c2c:	80e0      	strh	r0, [r4, #6]
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
   14c2e:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   14c30:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14c34:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   14c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014c38 <stats_module_init_internal>:
{
   14c38:	b500      	push	{lr}
   14c3a:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   14c3c:	4b10      	ldr	r3, [pc, #64]	; (14c80 <stats_module_init_internal+0x48>)
   14c3e:	2200      	movs	r2, #0
   14c40:	601a      	str	r2, [r3, #0]
   14c42:	605b      	str	r3, [r3, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   14c44:	2201      	movs	r2, #1
   14c46:	9200      	str	r2, [sp, #0]
   14c48:	4b0e      	ldr	r3, [pc, #56]	; (14c84 <stats_module_init_internal+0x4c>)
   14c4a:	2104      	movs	r1, #4
   14c4c:	480e      	ldr	r0, [pc, #56]	; (14c88 <stats_module_init_internal+0x50>)
   14c4e:	f7ff ffdd 	bl	14c0c <stats_init>
    if (rc) {
   14c52:	4603      	mov	r3, r0
   14c54:	b118      	cbz	r0, 14c5e <stats_module_init_internal+0x26>
}
   14c56:	4618      	mov	r0, r3
   14c58:	b003      	add	sp, #12
   14c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   14c5e:	490a      	ldr	r1, [pc, #40]	; (14c88 <stats_module_init_internal+0x50>)
   14c60:	480a      	ldr	r0, [pc, #40]	; (14c8c <stats_module_init_internal+0x54>)
   14c62:	f7ff ff5b 	bl	14b1c <stats_register_internal>
    if (rc) {
   14c66:	4603      	mov	r3, r0
   14c68:	2800      	cmp	r0, #0
   14c6a:	d1f4      	bne.n	14c56 <stats_module_init_internal+0x1e>
    rc = stats_nmgr_register_group();
   14c6c:	f000 f952 	bl	14f14 <stats_nmgr_register_group>
    if (rc) {
   14c70:	4603      	mov	r3, r0
   14c72:	2800      	cmp	r0, #0
   14c74:	d1ef      	bne.n	14c56 <stats_module_init_internal+0x1e>
    rc = stats_shell_register();
   14c76:	f000 f9c5 	bl	15004 <stats_shell_register>
   14c7a:	4603      	mov	r3, r0
    if (rc) {
   14c7c:	e7eb      	b.n	14c56 <stats_module_init_internal+0x1e>
   14c7e:	bf00      	nop
   14c80:	20001414 	.word	0x20001414
   14c84:	000242b0 	.word	0x000242b0
   14c88:	20006c5c 	.word	0x20006c5c
   14c8c:	00024298 	.word	0x00024298

00014c90 <stats_module_init>:
{
   14c90:	b510      	push	{r4, lr}
   14c92:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   14c94:	4b0c      	ldr	r3, [pc, #48]	; (14cc8 <stats_module_init+0x38>)
   14c96:	781b      	ldrb	r3, [r3, #0]
   14c98:	b123      	cbz	r3, 14ca4 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   14c9a:	4b0c      	ldr	r3, [pc, #48]	; (14ccc <stats_module_init+0x3c>)
   14c9c:	695b      	ldr	r3, [r3, #20]
   14c9e:	b133      	cbz	r3, 14cae <stats_module_init+0x1e>
}
   14ca0:	b002      	add	sp, #8
   14ca2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   14ca4:	461a      	mov	r2, r3
   14ca6:	4619      	mov	r1, r3
   14ca8:	4618      	mov	r0, r3
   14caa:	f7f8 fb59 	bl	d360 <__assert_func>
    rc = stats_module_init_internal();
   14cae:	f7ff ffc3 	bl	14c38 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14cb2:	2800      	cmp	r0, #0
   14cb4:	d0f4      	beq.n	14ca0 <stats_module_init+0x10>
   14cb6:	2000      	movs	r0, #0
   14cb8:	9000      	str	r0, [sp, #0]
   14cba:	4b05      	ldr	r3, [pc, #20]	; (14cd0 <stats_module_init+0x40>)
   14cbc:	681c      	ldr	r4, [r3, #0]
   14cbe:	4603      	mov	r3, r0
   14cc0:	4602      	mov	r2, r0
   14cc2:	4601      	mov	r1, r0
   14cc4:	47a0      	blx	r4
   14cc6:	e7eb      	b.n	14ca0 <stats_module_init+0x10>
   14cc8:	20006ca8 	.word	0x20006ca8
   14ccc:	20006c5c 	.word	0x20006c5c
   14cd0:	2000143c 	.word	0x2000143c

00014cd4 <stats_group_walk>:
 *
 * @return 0 on success, non-zero error code on failure
 */
int
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
   14cd4:	b570      	push	{r4, r5, r6, lr}
   14cd6:	4606      	mov	r6, r0
   14cd8:	460d      	mov	r5, r1
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   14cda:	4b07      	ldr	r3, [pc, #28]	; (14cf8 <stats_group_walk+0x24>)
   14cdc:	681c      	ldr	r4, [r3, #0]
   14cde:	e000      	b.n	14ce2 <stats_group_walk+0xe>
   14ce0:	6924      	ldr	r4, [r4, #16]
   14ce2:	b134      	cbz	r4, 14cf2 <stats_group_walk+0x1e>
        rc = walk_func(hdr, arg);
   14ce4:	4629      	mov	r1, r5
   14ce6:	4620      	mov	r0, r4
   14ce8:	47b0      	blx	r6
        if (rc != 0) {
   14cea:	4603      	mov	r3, r0
   14cec:	2800      	cmp	r0, #0
   14cee:	d0f7      	beq.n	14ce0 <stats_group_walk+0xc>
   14cf0:	e000      	b.n	14cf4 <stats_group_walk+0x20>
            goto err;
        }
    }
    return (0);
   14cf2:	2300      	movs	r3, #0
err:
    return (rc);
}
   14cf4:	4618      	mov	r0, r3
   14cf6:	bd70      	pop	{r4, r5, r6, pc}
   14cf8:	20001414 	.word	0x20001414

00014cfc <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   14cfc:	b538      	push	{r3, r4, r5, lr}
   14cfe:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   14d00:	4b06      	ldr	r3, [pc, #24]	; (14d1c <stats_group_find+0x20>)
   14d02:	681c      	ldr	r4, [r3, #0]
   14d04:	e000      	b.n	14d08 <stats_group_find+0xc>
   14d06:	6924      	ldr	r4, [r4, #16]
   14d08:	b12c      	cbz	r4, 14d16 <stats_group_find+0x1a>
        if (!strcmp(cur->s_name, name)) {
   14d0a:	4629      	mov	r1, r5
   14d0c:	6820      	ldr	r0, [r4, #0]
   14d0e:	f7fc fbe1 	bl	114d4 <strcmp>
   14d12:	2800      	cmp	r0, #0
   14d14:	d1f7      	bne.n	14d06 <stats_group_find+0xa>
            break;
        }
    }

    return (cur);
}
   14d16:	4620      	mov	r0, r4
   14d18:	bd38      	pop	{r3, r4, r5, pc}
   14d1a:	bf00      	nop
   14d1c:	20001414 	.word	0x20001414

00014d20 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   14d20:	b538      	push	{r3, r4, r5, lr}
   14d22:	4604      	mov	r4, r0
   14d24:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   14d26:	4b07      	ldr	r3, [pc, #28]	; (14d44 <stats_register+0x24>)
   14d28:	695b      	ldr	r3, [r3, #20]
   14d2a:	b913      	cbnz	r3, 14d32 <stats_register+0x12>
        if (stats_module_init_internal()) {
   14d2c:	f7ff ff84 	bl	14c38 <stats_module_init_internal>
   14d30:	b920      	cbnz	r0, 14d3c <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   14d32:	4629      	mov	r1, r5
   14d34:	4620      	mov	r0, r4
   14d36:	f7ff fef1 	bl	14b1c <stats_register_internal>
}
   14d3a:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   14d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14d40:	e7fb      	b.n	14d3a <stats_register+0x1a>
   14d42:	bf00      	nop
   14d44:	20006c5c 	.word	0x20006c5c

00014d48 <stats_nmgr_encode_name>:
    return (g_err);
}

static int
stats_nmgr_encode_name(struct stats_hdr *hdr, void *arg)
{
   14d48:	b538      	push	{r3, r4, r5, lr}
   14d4a:	460c      	mov	r4, r1
    CborEncoder *penc = (CborEncoder *) arg;

    return cbor_encode_text_stringz(penc, hdr->s_name);
   14d4c:	6805      	ldr	r5, [r0, #0]
   14d4e:	4628      	mov	r0, r5
   14d50:	f007 fcc6 	bl	1c6e0 <strlen>
   14d54:	4602      	mov	r2, r0
   14d56:	4629      	mov	r1, r5
   14d58:	4620      	mov	r0, r4
   14d5a:	f002 f86e 	bl	16e3a <cbor_encode_text_string>
}
   14d5e:	bd38      	pop	{r3, r4, r5, pc}

00014d60 <stats_nmgr_list>:
    return (0);
}

static int
stats_nmgr_list(struct mgmt_cbuf *cb)
{
   14d60:	b530      	push	{r4, r5, lr}
   14d62:	b085      	sub	sp, #20
    CborError g_err = CborNoError;
    CborEncoder stats;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   14d64:	f100 050c 	add.w	r5, r0, #12
   14d68:	2202      	movs	r2, #2
   14d6a:	4914      	ldr	r1, [pc, #80]	; (14dbc <stats_nmgr_list+0x5c>)
   14d6c:	4628      	mov	r0, r5
   14d6e:	f002 f864 	bl	16e3a <cbor_encode_text_string>
   14d72:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   14d74:	2200      	movs	r2, #0
   14d76:	2300      	movs	r3, #0
   14d78:	4628      	mov	r0, r5
   14d7a:	f001 ffe3 	bl	16d44 <cbor_encode_int>
   14d7e:	4304      	orrs	r4, r0
   14d80:	2209      	movs	r2, #9
   14d82:	490f      	ldr	r1, [pc, #60]	; (14dc0 <stats_nmgr_list+0x60>)
   14d84:	4628      	mov	r0, r5
   14d86:	f002 f858 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "stat_list");
   14d8a:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &stats,
   14d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d90:	4669      	mov	r1, sp
   14d92:	4628      	mov	r0, r5
   14d94:	f002 f858 	bl	16e48 <cbor_encoder_create_array>
   14d98:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    stats_group_walk(stats_nmgr_encode_name, &stats);
   14d9a:	4669      	mov	r1, sp
   14d9c:	4809      	ldr	r0, [pc, #36]	; (14dc4 <stats_nmgr_list+0x64>)
   14d9e:	f7ff ff99 	bl	14cd4 <stats_group_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   14da2:	4669      	mov	r1, sp
   14da4:	4628      	mov	r0, r5
   14da6:	f002 f862 	bl	16e6e <cbor_encoder_close_container>

    if (g_err) {
   14daa:	ea54 0300 	orrs.w	r3, r4, r0
   14dae:	d102      	bne.n	14db6 <stats_nmgr_list+0x56>
        return MGMT_ERR_ENOMEM;
    }
    return (0);
   14db0:	2000      	movs	r0, #0
}
   14db2:	b005      	add	sp, #20
   14db4:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   14db6:	2002      	movs	r0, #2
   14db8:	e7fb      	b.n	14db2 <stats_nmgr_list+0x52>
   14dba:	bf00      	nop
   14dbc:	000242b8 	.word	0x000242b8
   14dc0:	000242bc 	.word	0x000242bc
   14dc4:	00014d49 	.word	0x00014d49

00014dc8 <stats_nmgr_walk_func>:
{
   14dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dcc:	4605      	mov	r5, r0
   14dce:	460e      	mov	r6, r1
   14dd0:	4614      	mov	r4, r2
   14dd2:	461f      	mov	r7, r3
    stat_val = (uint8_t *)hdr + stat_off;
   14dd4:	eb00 0803 	add.w	r8, r0, r3
   14dd8:	4610      	mov	r0, r2
   14dda:	f007 fc81 	bl	1c6e0 <strlen>
   14dde:	4602      	mov	r2, r0
   14de0:	4621      	mov	r1, r4
   14de2:	4630      	mov	r0, r6
   14de4:	f002 f829 	bl	16e3a <cbor_encode_text_string>
   14de8:	4604      	mov	r4, r0
    switch (hdr->s_size) {
   14dea:	792a      	ldrb	r2, [r5, #4]
   14dec:	2a04      	cmp	r2, #4
   14dee:	d00d      	beq.n	14e0c <stats_nmgr_walk_func+0x44>
   14df0:	2a08      	cmp	r2, #8
   14df2:	d012      	beq.n	14e1a <stats_nmgr_walk_func+0x52>
   14df4:	2a02      	cmp	r2, #2
   14df6:	d002      	beq.n	14dfe <stats_nmgr_walk_func+0x36>
}
   14df8:	4620      	mov	r0, r4
   14dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            g_err |= cbor_encode_uint(penc, *(uint16_t *) stat_val);
   14dfe:	5bea      	ldrh	r2, [r5, r7]
   14e00:	2300      	movs	r3, #0
   14e02:	4630      	mov	r0, r6
   14e04:	f001 ff5e 	bl	16cc4 <cbor_encode_uint>
   14e08:	4304      	orrs	r4, r0
            break;
   14e0a:	e7f5      	b.n	14df8 <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint32_t *) stat_val);
   14e0c:	59ea      	ldr	r2, [r5, r7]
   14e0e:	2300      	movs	r3, #0
   14e10:	4630      	mov	r0, r6
   14e12:	f001 ff57 	bl	16cc4 <cbor_encode_uint>
   14e16:	4304      	orrs	r4, r0
            break;
   14e18:	e7ee      	b.n	14df8 <stats_nmgr_walk_func+0x30>
            g_err |= cbor_encode_uint(penc, *(uint64_t *) stat_val);
   14e1a:	e9d8 2300 	ldrd	r2, r3, [r8]
   14e1e:	4630      	mov	r0, r6
   14e20:	f001 ff50 	bl	16cc4 <cbor_encode_uint>
   14e24:	4304      	orrs	r4, r0
            break;
   14e26:	e7e7      	b.n	14df8 <stats_nmgr_walk_func+0x30>

00014e28 <stats_nmgr_read>:
{
   14e28:	b570      	push	{r4, r5, r6, lr}
   14e2a:	b0a4      	sub	sp, #144	; 0x90
   14e2c:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   14e2e:	2260      	movs	r2, #96	; 0x60
   14e30:	2100      	movs	r1, #0
   14e32:	a804      	add	r0, sp, #16
   14e34:	f7fc fb2d 	bl	11492 <memset>
   14e38:	4b30      	ldr	r3, [pc, #192]	; (14efc <stats_nmgr_read+0xd4>)
   14e3a:	9304      	str	r3, [sp, #16]
   14e3c:	2304      	movs	r3, #4
   14e3e:	f88d 3014 	strb.w	r3, [sp, #20]
   14e42:	ab1c      	add	r3, sp, #112	; 0x70
   14e44:	9306      	str	r3, [sp, #24]
   14e46:	2320      	movs	r3, #32
   14e48:	930e      	str	r3, [sp, #56]	; 0x38
    g_err = cbor_read_object(&cb->it, attrs);
   14e4a:	a904      	add	r1, sp, #16
   14e4c:	f105 001c 	add.w	r0, r5, #28
   14e50:	f001 fe0c 	bl	16a6c <cbor_read_object>
    if (g_err != 0) {
   14e54:	2800      	cmp	r0, #0
   14e56:	d14a      	bne.n	14eee <stats_nmgr_read+0xc6>
   14e58:	4604      	mov	r4, r0
    hdr = stats_group_find(stats_name);
   14e5a:	a81c      	add	r0, sp, #112	; 0x70
   14e5c:	f7ff ff4e 	bl	14cfc <stats_group_find>
    if (!hdr) {
   14e60:	4606      	mov	r6, r0
   14e62:	2800      	cmp	r0, #0
   14e64:	d045      	beq.n	14ef2 <stats_nmgr_read+0xca>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   14e66:	350c      	adds	r5, #12
   14e68:	2202      	movs	r2, #2
   14e6a:	4925      	ldr	r1, [pc, #148]	; (14f00 <stats_nmgr_read+0xd8>)
   14e6c:	4628      	mov	r0, r5
   14e6e:	f001 ffe4 	bl	16e3a <cbor_encode_text_string>
   14e72:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   14e74:	2200      	movs	r2, #0
   14e76:	2300      	movs	r3, #0
   14e78:	4628      	mov	r0, r5
   14e7a:	f001 ff63 	bl	16d44 <cbor_encode_int>
   14e7e:	4304      	orrs	r4, r0
   14e80:	2204      	movs	r2, #4
   14e82:	491e      	ldr	r1, [pc, #120]	; (14efc <stats_nmgr_read+0xd4>)
   14e84:	4628      	mov	r0, r5
   14e86:	f001 ffd8 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "name");
   14e8a:	4304      	orrs	r4, r0
   14e8c:	a81c      	add	r0, sp, #112	; 0x70
   14e8e:	f007 fc27 	bl	1c6e0 <strlen>
   14e92:	4602      	mov	r2, r0
   14e94:	a91c      	add	r1, sp, #112	; 0x70
   14e96:	4628      	mov	r0, r5
   14e98:	f001 ffcf 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, stats_name);
   14e9c:	4304      	orrs	r4, r0
   14e9e:	2205      	movs	r2, #5
   14ea0:	4918      	ldr	r1, [pc, #96]	; (14f04 <stats_nmgr_read+0xdc>)
   14ea2:	4628      	mov	r0, r5
   14ea4:	f001 ffc9 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "group");
   14ea8:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_string(&cb->encoder, "sys", sizeof("sys")-1);
   14eaa:	2203      	movs	r2, #3
   14eac:	4916      	ldr	r1, [pc, #88]	; (14f08 <stats_nmgr_read+0xe0>)
   14eae:	4628      	mov	r0, r5
   14eb0:	f001 ffc3 	bl	16e3a <cbor_encode_text_string>
   14eb4:	4304      	orrs	r4, r0
   14eb6:	2206      	movs	r2, #6
   14eb8:	4914      	ldr	r1, [pc, #80]	; (14f0c <stats_nmgr_read+0xe4>)
   14eba:	4628      	mov	r0, r5
   14ebc:	f001 ffbd 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "fields");
   14ec0:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &stats,
   14ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14ec6:	4669      	mov	r1, sp
   14ec8:	4628      	mov	r0, r5
   14eca:	f001 ffc2 	bl	16e52 <cbor_encoder_create_map>
   14ece:	4304      	orrs	r4, r0
    stats_walk(hdr, stats_nmgr_walk_func, &stats);
   14ed0:	466a      	mov	r2, sp
   14ed2:	490f      	ldr	r1, [pc, #60]	; (14f10 <stats_nmgr_read+0xe8>)
   14ed4:	4630      	mov	r0, r6
   14ed6:	f7ff fe4d 	bl	14b74 <stats_walk>
    g_err |= cbor_encoder_close_container(&cb->encoder, &stats);
   14eda:	4669      	mov	r1, sp
   14edc:	4628      	mov	r0, r5
   14ede:	f001 ffc6 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   14ee2:	ea54 0300 	orrs.w	r3, r4, r0
   14ee6:	d106      	bne.n	14ef6 <stats_nmgr_read+0xce>
    return (0);
   14ee8:	2000      	movs	r0, #0
}
   14eea:	b024      	add	sp, #144	; 0x90
   14eec:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
   14eee:	2003      	movs	r0, #3
   14ef0:	e7fb      	b.n	14eea <stats_nmgr_read+0xc2>
        return MGMT_ERR_EINVAL;
   14ef2:	2003      	movs	r0, #3
   14ef4:	e7f9      	b.n	14eea <stats_nmgr_read+0xc2>
        return MGMT_ERR_ENOMEM;
   14ef6:	2002      	movs	r0, #2
   14ef8:	e7f7      	b.n	14eea <stats_nmgr_read+0xc2>
   14efa:	bf00      	nop
   14efc:	000258b8 	.word	0x000258b8
   14f00:	000242b8 	.word	0x000242b8
   14f04:	000242c8 	.word	0x000242c8
   14f08:	000242d0 	.word	0x000242d0
   14f0c:	000242d4 	.word	0x000242d4
   14f10:	00014dc9 	.word	0x00014dc9

00014f14 <stats_nmgr_register_group>:
/**
 * Register nmgr group handlers
 */
int
stats_nmgr_register_group(void)
{
   14f14:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&shell_nmgr_group, shell_nmgr_group_handlers);
   14f16:	4804      	ldr	r0, [pc, #16]	; (14f28 <stats_nmgr_register_group+0x14>)
   14f18:	4b04      	ldr	r3, [pc, #16]	; (14f2c <stats_nmgr_register_group+0x18>)
   14f1a:	6003      	str	r3, [r0, #0]
   14f1c:	2302      	movs	r3, #2
   14f1e:	8083      	strh	r3, [r0, #4]
    shell_nmgr_group.mg_group_id = MGMT_GROUP_ID_STATS;
   14f20:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&shell_nmgr_group);
   14f22:	f008 fb37 	bl	1d594 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   14f26:	bd08      	pop	{r3, pc}
   14f28:	20006c74 	.word	0x20006c74
   14f2c:	2000141c 	.word	0x2000141c

00014f30 <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   14f30:	b500      	push	{lr}
   14f32:	b083      	sub	sp, #12
   14f34:	4684      	mov	ip, r0
   14f36:	4608      	mov	r0, r1
    struct streamer *streamer;
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
   14f38:	eb0c 0103 	add.w	r1, ip, r3
    switch (hdr->s_size) {
   14f3c:	f89c e004 	ldrb.w	lr, [ip, #4]
   14f40:	f1be 0f04 	cmp.w	lr, #4
   14f44:	d013      	beq.n	14f6e <stats_shell_display_entry+0x3e>
   14f46:	f1be 0f08 	cmp.w	lr, #8
   14f4a:	d016      	beq.n	14f7a <stats_shell_display_entry+0x4a>
   14f4c:	f1be 0f02 	cmp.w	lr, #2
   14f50:	d004      	beq.n	14f5c <stats_shell_display_entry+0x2c>
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   14f52:	4673      	mov	r3, lr
   14f54:	490d      	ldr	r1, [pc, #52]	; (14f8c <stats_shell_display_entry+0x5c>)
   14f56:	f001 f87a 	bl	1604e <streamer_printf>
                    hdr->s_size);
            break;
   14f5a:	e004      	b.n	14f66 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %u\n", name,
   14f5c:	f83c 3003 	ldrh.w	r3, [ip, r3]
   14f60:	490b      	ldr	r1, [pc, #44]	; (14f90 <stats_shell_display_entry+0x60>)
   14f62:	f001 f874 	bl	1604e <streamer_printf>
    }

    return (0);
}
   14f66:	2000      	movs	r0, #0
   14f68:	b003      	add	sp, #12
   14f6a:	f85d fb04 	ldr.w	pc, [sp], #4
            streamer_printf(streamer, "%s: %lu\n", name,
   14f6e:	f85c 3003 	ldr.w	r3, [ip, r3]
   14f72:	4908      	ldr	r1, [pc, #32]	; (14f94 <stats_shell_display_entry+0x64>)
   14f74:	f001 f86b 	bl	1604e <streamer_printf>
            break;
   14f78:	e7f5      	b.n	14f66 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %llu\n", name,
   14f7a:	ed91 7b00 	vldr	d7, [r1]
   14f7e:	ed8d 7b00 	vstr	d7, [sp]
   14f82:	4905      	ldr	r1, [pc, #20]	; (14f98 <stats_shell_display_entry+0x68>)
   14f84:	f001 f863 	bl	1604e <streamer_printf>
            break;
   14f88:	e7ed      	b.n	14f66 <stats_shell_display_entry+0x36>
   14f8a:	bf00      	nop
   14f8c:	000242fc 	.word	0x000242fc
   14f90:	000242dc 	.word	0x000242dc
   14f94:	000242e4 	.word	0x000242e4
   14f98:	000242f0 	.word	0x000242f0

00014f9c <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   14f9c:	b508      	push	{r3, lr}
   14f9e:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   14fa0:	6802      	ldr	r2, [r0, #0]
   14fa2:	4903      	ldr	r1, [pc, #12]	; (14fb0 <stats_shell_display_group+0x14>)
   14fa4:	4618      	mov	r0, r3
   14fa6:	f001 f852 	bl	1604e <streamer_printf>
    return (0);
}
   14faa:	2000      	movs	r0, #0
   14fac:	bd08      	pop	{r3, pc}
   14fae:	bf00      	nop
   14fb0:	0002431c 	.word	0x0002431c

00014fb4 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   14fb4:	b538      	push	{r3, r4, r5, lr}
   14fb6:	461c      	mov	r4, r3
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   14fb8:	6855      	ldr	r5, [r2, #4]
    if (name == NULL || !strcmp(name, "")) {
   14fba:	b155      	cbz	r5, 14fd2 <shell_stats_display+0x1e>
   14fbc:	782b      	ldrb	r3, [r5, #0]
   14fbe:	b143      	cbz	r3, 14fd2 <shell_stats_display+0x1e>
        stats_group_walk(stats_shell_display_group, streamer);
        rc = OS_EINVAL;
        goto err;
    }

    hdr = stats_group_find(name);
   14fc0:	4628      	mov	r0, r5
   14fc2:	f7ff fe9b 	bl	14cfc <stats_group_find>
    if (!hdr) {
   14fc6:	b170      	cbz	r0, 14fe6 <shell_stats_display+0x32>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
        rc = OS_EINVAL;
        goto err;
    }

    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   14fc8:	4622      	mov	r2, r4
   14fca:	490a      	ldr	r1, [pc, #40]	; (14ff4 <shell_stats_display+0x40>)
   14fcc:	f7ff fdd2 	bl	14b74 <stats_walk>
    }

    return (0);
err:
    return (rc);
}
   14fd0:	bd38      	pop	{r3, r4, r5, pc}
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   14fd2:	4909      	ldr	r1, [pc, #36]	; (14ff8 <shell_stats_display+0x44>)
   14fd4:	4620      	mov	r0, r4
   14fd6:	f001 f83a 	bl	1604e <streamer_printf>
        stats_group_walk(stats_shell_display_group, streamer);
   14fda:	4621      	mov	r1, r4
   14fdc:	4807      	ldr	r0, [pc, #28]	; (14ffc <shell_stats_display+0x48>)
   14fde:	f7ff fe79 	bl	14cd4 <stats_group_walk>
        rc = OS_EINVAL;
   14fe2:	2002      	movs	r0, #2
        goto err;
   14fe4:	e7f4      	b.n	14fd0 <shell_stats_display+0x1c>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   14fe6:	462a      	mov	r2, r5
   14fe8:	4905      	ldr	r1, [pc, #20]	; (15000 <shell_stats_display+0x4c>)
   14fea:	4620      	mov	r0, r4
   14fec:	f001 f82f 	bl	1604e <streamer_printf>
        rc = OS_EINVAL;
   14ff0:	2002      	movs	r0, #2
        goto err;
   14ff2:	e7ed      	b.n	14fd0 <shell_stats_display+0x1c>
   14ff4:	00014f31 	.word	0x00014f31
   14ff8:	00024324 	.word	0x00024324
   14ffc:	00014f9d 	.word	0x00014f9d
   15000:	00024360 	.word	0x00024360

00015004 <stats_shell_register>:


int 
stats_shell_register(void)
{
   15004:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   15006:	4b06      	ldr	r3, [pc, #24]	; (15020 <stats_shell_register+0x1c>)
   15008:	781b      	ldrb	r3, [r3, #0]
   1500a:	b10b      	cbz	r3, 15010 <stats_shell_register+0xc>
        stats_shell_registered = 1;
        shell_cmd_register(&shell_stats_cmd);
    }

    return (0);
}
   1500c:	2000      	movs	r0, #0
   1500e:	bd08      	pop	{r3, pc}
        stats_shell_registered = 1;
   15010:	4b03      	ldr	r3, [pc, #12]	; (15020 <stats_shell_register+0x1c>)
   15012:	2201      	movs	r2, #1
   15014:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   15016:	4803      	ldr	r0, [pc, #12]	; (15024 <stats_shell_register+0x20>)
   15018:	f7ff fa26 	bl	14468 <shell_cmd_register>
   1501c:	e7f6      	b.n	1500c <stats_shell_register+0x8>
   1501e:	bf00      	nop
   15020:	20006c80 	.word	0x20006c80
   15024:	2000142c 	.word	0x2000142c

00015028 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   15028:	b508      	push	{r3, lr}
    assert(0);
   1502a:	2300      	movs	r3, #0
   1502c:	461a      	mov	r2, r3
   1502e:	4619      	mov	r1, r3
   15030:	4618      	mov	r0, r3
   15032:	f7f8 f995 	bl	d360 <__assert_func>
	...

00015038 <sysdown_complete>:
{
   15038:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   1503a:	4803      	ldr	r0, [pc, #12]	; (15048 <sysdown_complete+0x10>)
   1503c:	f7f8 fb2c 	bl	d698 <os_callout_stop>
    os_system_reset();
   15040:	f7f8 fafb 	bl	d63a <os_system_reset>
}
   15044:	bd08      	pop	{r3, pc}
   15046:	bf00      	nop
   15048:	20006c88 	.word	0x20006c88

0001504c <sysdown>:
}

int
sysdown(int reason)
{
   1504c:	b570      	push	{r4, r5, r6, lr}
   1504e:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   15050:	f7f8 f8b0 	bl	d1b4 <os_arch_save_sr>
    if (sysdown_active) {
   15054:	4b20      	ldr	r3, [pc, #128]	; (150d8 <sysdown+0x8c>)
   15056:	781b      	ldrb	r3, [r3, #0]
   15058:	b943      	cbnz	r3, 1506c <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1505a:	4b1f      	ldr	r3, [pc, #124]	; (150d8 <sysdown+0x8c>)
   1505c:	2201      	movs	r2, #1
   1505e:	701a      	strb	r2, [r3, #0]
        rc = 0;
   15060:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   15062:	f7f8 f8ad 	bl	d1c0 <os_arch_restore_sr>

    if (rc != 0) {
   15066:	b126      	cbz	r6, 15072 <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   15068:	4630      	mov	r0, r6
   1506a:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   1506c:	f06f 060a 	mvn.w	r6, #10
   15070:	e7f7      	b.n	15062 <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   15072:	f7f8 fd57 	bl	db24 <os_eventq_dflt_get>
   15076:	4601      	mov	r1, r0
   15078:	4c18      	ldr	r4, [pc, #96]	; (150dc <sysdown+0x90>)
   1507a:	2300      	movs	r3, #0
   1507c:	4a18      	ldr	r2, [pc, #96]	; (150e0 <sysdown+0x94>)
   1507e:	4620      	mov	r0, r4
   15080:	f7f8 fafc 	bl	d67c <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   15084:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   15088:	4620      	mov	r0, r4
   1508a:	f7f8 fb23 	bl	d6d4 <os_callout_reset>
    assert(rc == 0);
   1508e:	4606      	mov	r6, r0
   15090:	b908      	cbnz	r0, 15096 <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   15092:	4604      	mov	r4, r0
   15094:	e006      	b.n	150a4 <sysdown+0x58>
    assert(rc == 0);
   15096:	2300      	movs	r3, #0
   15098:	461a      	mov	r2, r3
   1509a:	4619      	mov	r1, r3
   1509c:	4618      	mov	r0, r3
   1509e:	f7f8 f95f 	bl	d360 <__assert_func>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   150a2:	3401      	adds	r4, #1
   150a4:	4b0f      	ldr	r3, [pc, #60]	; (150e4 <sysdown+0x98>)
   150a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   150aa:	b163      	cbz	r3, 150c6 <sysdown+0x7a>
        rc = sysdown_cbs[i](reason);
   150ac:	4628      	mov	r0, r5
   150ae:	4798      	blx	r3
        switch (rc) {
   150b0:	2801      	cmp	r0, #1
   150b2:	d1f6      	bne.n	150a2 <sysdown+0x56>
            OS_ENTER_CRITICAL(sr);
   150b4:	f7f8 f87e 	bl	d1b4 <os_arch_save_sr>
            sysdown_num_in_progress++;
   150b8:	4a0b      	ldr	r2, [pc, #44]	; (150e8 <sysdown+0x9c>)
   150ba:	6813      	ldr	r3, [r2, #0]
   150bc:	3301      	adds	r3, #1
   150be:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   150c0:	f7f8 f87e 	bl	d1c0 <os_arch_restore_sr>
            break;
   150c4:	e7ed      	b.n	150a2 <sysdown+0x56>
    if (sysdown_num_in_progress == 0) {
   150c6:	4b08      	ldr	r3, [pc, #32]	; (150e8 <sysdown+0x9c>)
   150c8:	681c      	ldr	r4, [r3, #0]
   150ca:	2c00      	cmp	r4, #0
   150cc:	d1cc      	bne.n	15068 <sysdown+0x1c>
        sysdown_complete();
   150ce:	f7ff ffb3 	bl	15038 <sysdown_complete>
    return 0;
   150d2:	4626      	mov	r6, r4
   150d4:	e7c8      	b.n	15068 <sysdown+0x1c>
   150d6:	bf00      	nop
   150d8:	20006c81 	.word	0x20006c81
   150dc:	20006c88 	.word	0x20006c88
   150e0:	00015029 	.word	0x00015029
   150e4:	000247a0 	.word	0x000247a0
   150e8:	20006c84 	.word	0x20006c84

000150ec <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   150ec:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   150ee:	f7f8 f937 	bl	d360 <__assert_func>
	...

000150f4 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   150f4:	4b01      	ldr	r3, [pc, #4]	; (150fc <sysinit_start+0x8>)
   150f6:	2201      	movs	r2, #1
   150f8:	701a      	strb	r2, [r3, #0]
}
   150fa:	4770      	bx	lr
   150fc:	20006ca8 	.word	0x20006ca8

00015100 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   15100:	4b01      	ldr	r3, [pc, #4]	; (15108 <sysinit_end+0x8>)
   15102:	2200      	movs	r2, #0
   15104:	701a      	strb	r2, [r3, #0]
}
   15106:	4770      	bx	lr
   15108:	20006ca8 	.word	0x20006ca8

0001510c <uwbcfg_set>:

static int
uwbcfg_set(int argc, char **argv, char *val)
{
    int i;
    if (argc == 1) {
   1510c:	2801      	cmp	r0, #1
   1510e:	d00a      	beq.n	15126 <uwbcfg_set+0x1a>
        for (i=0;i<CFGSTR_MAX;i++) {
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
        }
    }
    return DPL_ENOENT;
   15110:	200a      	movs	r0, #10
}
   15112:	4770      	bx	lr
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   15114:	2308      	movs	r3, #8
   15116:	4a0d      	ldr	r2, [pc, #52]	; (1514c <uwbcfg_set+0x40>)
   15118:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   1511c:	2106      	movs	r1, #6
   1511e:	4630      	mov	r0, r6
   15120:	f7fd fb35 	bl	1278e <conf_value_from_str>
}
   15124:	bd70      	pop	{r4, r5, r6, pc}
{
   15126:	b570      	push	{r4, r5, r6, lr}
   15128:	460d      	mov	r5, r1
   1512a:	4616      	mov	r6, r2
        for (i=0;i<CFGSTR_MAX;i++) {
   1512c:	2400      	movs	r4, #0
   1512e:	2c13      	cmp	r4, #19
   15130:	dc09      	bgt.n	15146 <uwbcfg_set+0x3a>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   15132:	4b07      	ldr	r3, [pc, #28]	; (15150 <uwbcfg_set+0x44>)
   15134:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   15138:	6828      	ldr	r0, [r5, #0]
   1513a:	f7fc f9cb 	bl	114d4 <strcmp>
   1513e:	2800      	cmp	r0, #0
   15140:	d0e8      	beq.n	15114 <uwbcfg_set+0x8>
        for (i=0;i<CFGSTR_MAX;i++) {
   15142:	3401      	adds	r4, #1
   15144:	e7f3      	b.n	1512e <uwbcfg_set+0x22>
    return DPL_ENOENT;
   15146:	200a      	movs	r0, #10
   15148:	e7ec      	b.n	15124 <uwbcfg_set+0x18>
   1514a:	bf00      	nop
   1514c:	20001440 	.word	0x20001440
   15150:	200014e0 	.word	0x200014e0

00015154 <uwbcfg_get>:
    if (argc == 1) {
   15154:	2801      	cmp	r0, #1
   15156:	d10d      	bne.n	15174 <uwbcfg_get+0x20>
{
   15158:	b538      	push	{r3, r4, r5, lr}
   1515a:	460d      	mov	r5, r1
        for (i=0;i<CFGSTR_MAX;i++) {
   1515c:	2400      	movs	r4, #0
   1515e:	2c13      	cmp	r4, #19
   15160:	dc0e      	bgt.n	15180 <uwbcfg_get+0x2c>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   15162:	4b08      	ldr	r3, [pc, #32]	; (15184 <uwbcfg_get+0x30>)
   15164:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   15168:	6828      	ldr	r0, [r5, #0]
   1516a:	f7fc f9b3 	bl	114d4 <strcmp>
   1516e:	b118      	cbz	r0, 15178 <uwbcfg_get+0x24>
        for (i=0;i<CFGSTR_MAX;i++) {
   15170:	3401      	adds	r4, #1
   15172:	e7f4      	b.n	1515e <uwbcfg_get+0xa>
    return NULL;
   15174:	2000      	movs	r0, #0
}
   15176:	4770      	bx	lr
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   15178:	4803      	ldr	r0, [pc, #12]	; (15188 <uwbcfg_get+0x34>)
   1517a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   1517e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
   15180:	2000      	movs	r0, #0
   15182:	e7fc      	b.n	1517e <uwbcfg_get+0x2a>
   15184:	200014e0 	.word	0x200014e0
   15188:	20001440 	.word	0x20001440

0001518c <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   1518c:	b530      	push	{r4, r5, lr}
   1518e:	b08b      	sub	sp, #44	; 0x2c
   15190:	4605      	mov	r5, r0
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
   15192:	2400      	movs	r4, #0
   15194:	e010      	b.n	151b8 <uwbcfg_export+0x2c>
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   15196:	4b0b      	ldr	r3, [pc, #44]	; (151c4 <uwbcfg_export+0x38>)
   15198:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1519c:	9300      	str	r3, [sp, #0]
   1519e:	4b0a      	ldr	r3, [pc, #40]	; (151c8 <uwbcfg_export+0x3c>)
   151a0:	685b      	ldr	r3, [r3, #4]
   151a2:	4a0a      	ldr	r2, [pc, #40]	; (151cc <uwbcfg_export+0x40>)
   151a4:	2120      	movs	r1, #32
   151a6:	a802      	add	r0, sp, #8
   151a8:	f7fc fda3 	bl	11cf2 <snprintf>
        export_func(b, g_uwb_config[i]);
   151ac:	4908      	ldr	r1, [pc, #32]	; (151d0 <uwbcfg_export+0x44>)
   151ae:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   151b2:	a802      	add	r0, sp, #8
   151b4:	47a8      	blx	r5
    for (i=0;i<CFGSTR_MAX;i++) {
   151b6:	3401      	adds	r4, #1
   151b8:	2c13      	cmp	r4, #19
   151ba:	ddec      	ble.n	15196 <uwbcfg_export+0xa>
    }
    return 0;
}
   151bc:	2000      	movs	r0, #0
   151be:	b00b      	add	sp, #44	; 0x2c
   151c0:	bd30      	pop	{r4, r5, pc}
   151c2:	bf00      	nop
   151c4:	200014e0 	.word	0x200014e0
   151c8:	20001530 	.word	0x20001530
   151cc:	00024384 	.word	0x00024384
   151d0:	20001440 	.word	0x20001440

000151d4 <uwbcfg_commit_to_inst>:
{
   151d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   151d6:	b083      	sub	sp, #12
   151d8:	4604      	mov	r4, r0
   151da:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   151dc:	2300      	movs	r3, #0
   151de:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   151e2:	2102      	movs	r1, #2
   151e4:	4628      	mov	r0, r5
   151e6:	f7fd fad2 	bl	1278e <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   151ea:	f105 0610 	add.w	r6, r5, #16
   151ee:	4984      	ldr	r1, [pc, #528]	; (15400 <uwbcfg_commit_to_inst+0x22c>)
   151f0:	4630      	mov	r0, r6
   151f2:	f7fc f96f 	bl	114d4 <strcmp>
   151f6:	2800      	cmp	r0, #0
   151f8:	f040 80c0 	bne.w	1537c <uwbcfg_commit_to_inst+0x1a8>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   151fc:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   15200:	4a80      	ldr	r2, [pc, #512]	; (15404 <uwbcfg_commit_to_inst+0x230>)
   15202:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   15204:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   15206:	2300      	movs	r3, #0
   15208:	f10d 0207 	add.w	r2, sp, #7
   1520c:	2102      	movs	r1, #2
   1520e:	f105 0018 	add.w	r0, r5, #24
   15212:	f7fd fabc 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   15216:	2300      	movs	r3, #0
   15218:	f204 5212 	addw	r2, r4, #1298	; 0x512
   1521c:	2102      	movs	r1, #2
   1521e:	f105 0028 	add.w	r0, r5, #40	; 0x28
   15222:	f7fd fab4 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   15226:	2300      	movs	r3, #0
   15228:	f10d 0202 	add.w	r2, sp, #2
   1522c:	2103      	movs	r1, #3
   1522e:	f105 0030 	add.w	r0, r5, #48	; 0x30
   15232:	f7fd faac 	bl	1278e <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   15236:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1523a:	2b73      	cmp	r3, #115	; 0x73
   1523c:	f000 80b6 	beq.w	153ac <uwbcfg_commit_to_inst+0x1d8>
   15240:	2303      	movs	r3, #3
   15242:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   15246:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
   1524a:	b192      	cbz	r2, 15272 <uwbcfg_commit_to_inst+0x9e>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   1524c:	2300      	movs	r3, #0
   1524e:	3202      	adds	r2, #2
   15250:	2103      	movs	r1, #3
   15252:	f105 0040 	add.w	r0, r5, #64	; 0x40
   15256:	f7fd fa9a 	bl	1278e <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   1525a:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   1525e:	885b      	ldrh	r3, [r3, #2]
   15260:	3b00      	subs	r3, #0
   15262:	bf18      	it	ne
   15264:	2301      	movne	r3, #1
   15266:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1526a:	f363 1286 	bfi	r2, r3, #6, #1
   1526e:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   15272:	2300      	movs	r3, #0
   15274:	f204 5211 	addw	r2, r4, #1297	; 0x511
   15278:	2102      	movs	r1, #2
   1527a:	f105 0020 	add.w	r0, r5, #32
   1527e:	f7fd fa86 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   15282:	2300      	movs	r3, #0
   15284:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   15288:	2102      	movs	r1, #2
   1528a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1528e:	f7fd fa7e 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   15292:	2300      	movs	r3, #0
   15294:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   15298:	2103      	movs	r1, #3
   1529a:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1529e:	f7fd fa76 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   152a2:	2300      	movs	r3, #0
   152a4:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   152a8:	2103      	movs	r1, #3
   152aa:	f105 0070 	add.w	r0, r5, #112	; 0x70
   152ae:	f7fd fa6e 	bl	1278e <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   152b2:	2100      	movs	r1, #0
   152b4:	f105 0078 	add.w	r0, r5, #120	; 0x78
   152b8:	f000 fa92 	bl	157e0 <strtod_soft>
   152bc:	ec51 0b10 	vmov	r0, r1, d0
   152c0:	f00c fec4 	bl	2204c <__aeabi_d2f>
   152c4:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
   152c8:	6018      	str	r0, [r3, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   152ca:	2300      	movs	r3, #0
   152cc:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   152d0:	2104      	movs	r1, #4
   152d2:	f105 0080 	add.w	r0, r5, #128	; 0x80
   152d6:	f7fd fa5a 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   152da:	2300      	movs	r3, #0
   152dc:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   152e0:	2103      	movs	r1, #3
   152e2:	f105 0088 	add.w	r0, r5, #136	; 0x88
   152e6:	f7fd fa52 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   152ea:	2300      	movs	r3, #0
   152ec:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   152f0:	2103      	movs	r1, #3
   152f2:	f105 0090 	add.w	r0, r5, #144	; 0x90
   152f6:	f7fd fa4a 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   152fa:	2300      	movs	r3, #0
   152fc:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   15300:	2102      	movs	r1, #2
   15302:	f105 0098 	add.w	r0, r5, #152	; 0x98
   15306:	f7fd fa42 	bl	1278e <conf_value_from_str>
    txP = inst->config.tx.preambleLength;
   1530a:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    sfd_timeout = inst->config.rx.sfdTimeout;
   1530e:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   15312:	f8ad 3002 	strh.w	r3, [sp, #2]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   15316:	2300      	movs	r3, #0
   15318:	aa01      	add	r2, sp, #4
   1531a:	2103      	movs	r1, #3
   1531c:	f105 0050 	add.w	r0, r5, #80	; 0x50
   15320:	f7fd fa35 	bl	1278e <conf_value_from_str>
    switch (preamble_len)
   15324:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1532c:	d058      	beq.n	153e0 <uwbcfg_commit_to_inst+0x20c>
   1532e:	d843      	bhi.n	153b8 <uwbcfg_commit_to_inst+0x1e4>
   15330:	2b80      	cmp	r3, #128	; 0x80
   15332:	d057      	beq.n	153e4 <uwbcfg_commit_to_inst+0x210>
   15334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   15338:	d13a      	bne.n	153b0 <uwbcfg_commit_to_inst+0x1dc>
    case (256):  txP = DWT_PLEN_256 ;break;
   1533a:	2624      	movs	r6, #36	; 0x24
    if (sfd_timeout < 1) {
   1533c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   15340:	b94b      	cbnz	r3, 15356 <uwbcfg_commit_to_inst+0x182>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   15342:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15346:	443b      	add	r3, r7
   15348:	b29b      	uxth	r3, r3
   1534a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1534e:	1a9b      	subs	r3, r3, r2
   15350:	3301      	adds	r3, #1
   15352:	f8ad 3002 	strh.w	r3, [sp, #2]
    inst->config.tx.preambleLength = txP;
   15356:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->config.rx.sfdTimeout = sfd_timeout;
   1535a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1535e:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->attrib.nsfd = sfd_len;
   15362:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   15366:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1536a:	f8a4 3542 	strh.w	r3, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   1536e:	4629      	mov	r1, r5
   15370:	4620      	mov	r0, r4
   15372:	f000 f913 	bl	1559c <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   15376:	4b24      	ldr	r3, [pc, #144]	; (15408 <uwbcfg_commit_to_inst+0x234>)
   15378:	681c      	ldr	r4, [r3, #0]
   1537a:	e039      	b.n	153f0 <uwbcfg_commit_to_inst+0x21c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   1537c:	4923      	ldr	r1, [pc, #140]	; (1540c <uwbcfg_commit_to_inst+0x238>)
   1537e:	4630      	mov	r0, r6
   15380:	f7fc f8a8 	bl	114d4 <strcmp>
   15384:	b928      	cbnz	r0, 15392 <uwbcfg_commit_to_inst+0x1be>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   15386:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1538a:	4a21      	ldr	r2, [pc, #132]	; (15410 <uwbcfg_commit_to_inst+0x23c>)
   1538c:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   1538e:	2708      	movs	r7, #8
   15390:	e739      	b.n	15206 <uwbcfg_commit_to_inst+0x32>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   15392:	4920      	ldr	r1, [pc, #128]	; (15414 <uwbcfg_commit_to_inst+0x240>)
   15394:	4630      	mov	r0, r6
   15396:	f7fc f89d 	bl	114d4 <strcmp>
   1539a:	b928      	cbnz	r0, 153a8 <uwbcfg_commit_to_inst+0x1d4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   1539c:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   153a0:	4a1d      	ldr	r2, [pc, #116]	; (15418 <uwbcfg_commit_to_inst+0x244>)
   153a2:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   153a4:	2740      	movs	r7, #64	; 0x40
   153a6:	e72e      	b.n	15206 <uwbcfg_commit_to_inst+0x32>
    int sfd_len=0;
   153a8:	2700      	movs	r7, #0
   153aa:	e72c      	b.n	15206 <uwbcfg_commit_to_inst+0x32>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   153ac:	2300      	movs	r3, #0
   153ae:	e748      	b.n	15242 <uwbcfg_commit_to_inst+0x6e>
    switch (preamble_len)
   153b0:	2b40      	cmp	r3, #64	; 0x40
   153b2:	d10e      	bne.n	153d2 <uwbcfg_commit_to_inst+0x1fe>
   153b4:	2604      	movs	r6, #4
   153b6:	e7c1      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
   153b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   153bc:	d014      	beq.n	153e8 <uwbcfg_commit_to_inst+0x214>
   153be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   153c2:	d101      	bne.n	153c8 <uwbcfg_commit_to_inst+0x1f4>
    case (4096): txP = DWT_PLEN_4096;break;
   153c4:	260c      	movs	r6, #12
   153c6:	e7b9      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
    switch (preamble_len)
   153c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   153cc:	d101      	bne.n	153d2 <uwbcfg_commit_to_inst+0x1fe>
    case (1024): txP = DWT_PLEN_1024;break;
   153ce:	2608      	movs	r6, #8
   153d0:	e7b4      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
        UC_WARN("inv preamb_len\n");
   153d2:	4b12      	ldr	r3, [pc, #72]	; (1541c <uwbcfg_commit_to_inst+0x248>)
   153d4:	2202      	movs	r2, #2
   153d6:	215c      	movs	r1, #92	; 0x5c
   153d8:	4811      	ldr	r0, [pc, #68]	; (15420 <uwbcfg_commit_to_inst+0x24c>)
   153da:	f009 fa41 	bl	1e860 <log_printf>
        break;
   153de:	e7ad      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
    case (512):  txP = DWT_PLEN_512 ;break;
   153e0:	2634      	movs	r6, #52	; 0x34
   153e2:	e7ab      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
    case (128):  txP = DWT_PLEN_128 ;break;
   153e4:	2614      	movs	r6, #20
   153e6:	e7a9      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
    case (2048): txP = DWT_PLEN_2048;break;
   153e8:	2628      	movs	r6, #40	; 0x28
   153ea:	e7a7      	b.n	1533c <uwbcfg_commit_to_inst+0x168>
            cb->uc_update();
   153ec:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   153ee:	6824      	ldr	r4, [r4, #0]
   153f0:	b11c      	cbz	r4, 153fa <uwbcfg_commit_to_inst+0x226>
        if (cb->uc_update) {
   153f2:	6863      	ldr	r3, [r4, #4]
   153f4:	2b00      	cmp	r3, #0
   153f6:	d1f9      	bne.n	153ec <uwbcfg_commit_to_inst+0x218>
   153f8:	e7f9      	b.n	153ee <uwbcfg_commit_to_inst+0x21a>
}
   153fa:	2000      	movs	r0, #0
   153fc:	b003      	add	sp, #12
   153fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15400:	0002438c 	.word	0x0002438c
   15404:	3e03497b 	.word	0x3e03497b
   15408:	20006cc4 	.word	0x20006cc4
   1540c:	00024390 	.word	0x00024390
   15410:	3f83482c 	.word	0x3f83482c
   15414:	00024398 	.word	0x00024398
   15418:	41034836 	.word	0x41034836
   1541c:	000243a0 	.word	0x000243a0
   15420:	20006cac 	.word	0x20006cac

00015424 <uwbcfg_commit>:
{
   15424:	b510      	push	{r4, lr}
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   15426:	2400      	movs	r4, #0
   15428:	e000      	b.n	1542c <uwbcfg_commit+0x8>
   1542a:	3401      	adds	r4, #1
   1542c:	2c02      	cmp	r4, #2
   1542e:	dc08      	bgt.n	15442 <uwbcfg_commit+0x1e>
        udev = uwb_dev_idx_lookup(i);
   15430:	4620      	mov	r0, r4
   15432:	f7f3 fb2d 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   15436:	2800      	cmp	r0, #0
   15438:	d0f7      	beq.n	1542a <uwbcfg_commit+0x6>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   1543a:	4903      	ldr	r1, [pc, #12]	; (15448 <uwbcfg_commit+0x24>)
   1543c:	f7ff feca 	bl	151d4 <uwbcfg_commit_to_inst>
   15440:	e7f3      	b.n	1542a <uwbcfg_commit+0x6>
}
   15442:	2000      	movs	r0, #0
   15444:	bd10      	pop	{r4, pc}
   15446:	bf00      	nop
   15448:	20001440 	.word	0x20001440

0001544c <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   1544c:	4b02      	ldr	r3, [pc, #8]	; (15458 <uwbcfg_register+0xc>)
   1544e:	681a      	ldr	r2, [r3, #0]
   15450:	6002      	str	r2, [r0, #0]
   15452:	6018      	str	r0, [r3, #0]
    return 0;
}
   15454:	2000      	movs	r0, #0
   15456:	4770      	bx	lr
   15458:	20006cc4 	.word	0x20006cc4

0001545c <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   1545c:	b510      	push	{r4, lr}
   1545e:	b082      	sub	sp, #8
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   15460:	480d      	ldr	r0, [pc, #52]	; (15498 <uwbcfg_pkg_init+0x3c>)
   15462:	f7fd f94f 	bl	12704 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15466:	b138      	cbz	r0, 15478 <uwbcfg_pkg_init+0x1c>
   15468:	2000      	movs	r0, #0
   1546a:	9000      	str	r0, [sp, #0]
   1546c:	4b0b      	ldr	r3, [pc, #44]	; (1549c <uwbcfg_pkg_init+0x40>)
   1546e:	681c      	ldr	r4, [r3, #0]
   15470:	4603      	mov	r3, r0
   15472:	4602      	mov	r2, r0
   15474:	4601      	mov	r1, r0
   15476:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   15478:	2400      	movs	r4, #0
   1547a:	9400      	str	r4, [sp, #0]
   1547c:	4623      	mov	r3, r4
   1547e:	4a08      	ldr	r2, [pc, #32]	; (154a0 <uwbcfg_pkg_init+0x44>)
   15480:	4908      	ldr	r1, [pc, #32]	; (154a4 <uwbcfg_pkg_init+0x48>)
   15482:	4809      	ldr	r0, [pc, #36]	; (154a8 <uwbcfg_pkg_init+0x4c>)
   15484:	f009 fa36 	bl	1e8f4 <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   15488:	4b08      	ldr	r3, [pc, #32]	; (154ac <uwbcfg_pkg_init+0x50>)
   1548a:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   1548c:	f7ff ffca 	bl	15424 <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   15490:	4620      	mov	r0, r4
   15492:	b002      	add	sp, #8
   15494:	bd10      	pop	{r4, pc}
   15496:	bf00      	nop
   15498:	20001530 	.word	0x20001530
   1549c:	2000143c 	.word	0x2000143c
   154a0:	00025810 	.word	0x00025810
   154a4:	20006cac 	.word	0x20006cac
   154a8:	000243b0 	.word	0x000243b0
   154ac:	20006cc4 	.word	0x20006cc4

000154b0 <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   154b0:	2000      	movs	r0, #0
   154b2:	4770      	bx	lr

000154b4 <check_preamble_code>:
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
{
   154b4:	b530      	push	{r4, r5, lr}
   154b6:	b083      	sub	sp, #12
   154b8:	460c      	mov	r4, r1
    int new_code = 0;
    int ch = inst->config.channel;
   154ba:	f890 250c 	ldrb.w	r2, [r0, #1292]	; 0x50c
    int prf = inst->config.prf;
   154be:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    uint8_t code = *arg_code;
   154c2:	7823      	ldrb	r3, [r4, #0]
    if (prf == DWT_PRF_16M) {
   154c4:	2901      	cmp	r1, #1
   154c6:	d00a      	beq.n	154de <check_preamble_code+0x2a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
    } else {
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   154c8:	1e51      	subs	r1, r2, #1
   154ca:	2902      	cmp	r1, #2
   154cc:	d932      	bls.n	15534 <check_preamble_code+0x80>
   154ce:	2a05      	cmp	r2, #5
   154d0:	d030      	beq.n	15534 <check_preamble_code+0x80>
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
   154d2:	3b11      	subs	r3, #17
   154d4:	b2db      	uxtb	r3, r3
   154d6:	2b03      	cmp	r3, #3
   154d8:	d939      	bls.n	1554e <check_preamble_code+0x9a>
   154da:	2511      	movs	r5, #17
   154dc:	e02f      	b.n	1553e <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   154de:	2a01      	cmp	r2, #1
   154e0:	d00c      	beq.n	154fc <check_preamble_code+0x48>
    int new_code = 0;
   154e2:	2500      	movs	r5, #0
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   154e4:	2a02      	cmp	r2, #2
   154e6:	d013      	beq.n	15510 <check_preamble_code+0x5c>
   154e8:	2a05      	cmp	r2, #5
   154ea:	d011      	beq.n	15510 <check_preamble_code+0x5c>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   154ec:	2a03      	cmp	r2, #3
   154ee:	d015      	beq.n	1551c <check_preamble_code+0x68>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   154f0:	2a04      	cmp	r2, #4
   154f2:	d019      	beq.n	15528 <check_preamble_code+0x74>
   154f4:	2a07      	cmp	r2, #7
   154f6:	d017      	beq.n	15528 <check_preamble_code+0x74>
        }
    }
    if (new_code) {
   154f8:	b34d      	cbz	r5, 1554e <check_preamble_code+0x9a>
   154fa:	e020      	b.n	1553e <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   154fc:	2b01      	cmp	r3, #1
   154fe:	d005      	beq.n	1550c <check_preamble_code+0x58>
   15500:	2b02      	cmp	r3, #2
   15502:	d001      	beq.n	15508 <check_preamble_code+0x54>
   15504:	4615      	mov	r5, r2
   15506:	e7ed      	b.n	154e4 <check_preamble_code+0x30>
    int new_code = 0;
   15508:	2500      	movs	r5, #0
   1550a:	e7eb      	b.n	154e4 <check_preamble_code+0x30>
   1550c:	2500      	movs	r5, #0
   1550e:	e7e9      	b.n	154e4 <check_preamble_code+0x30>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   15510:	2b03      	cmp	r3, #3
   15512:	d0eb      	beq.n	154ec <check_preamble_code+0x38>
   15514:	2b04      	cmp	r3, #4
   15516:	d0e9      	beq.n	154ec <check_preamble_code+0x38>
   15518:	2503      	movs	r5, #3
   1551a:	e7e7      	b.n	154ec <check_preamble_code+0x38>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   1551c:	2b05      	cmp	r3, #5
   1551e:	d0e7      	beq.n	154f0 <check_preamble_code+0x3c>
   15520:	2b06      	cmp	r3, #6
   15522:	d0e5      	beq.n	154f0 <check_preamble_code+0x3c>
   15524:	2505      	movs	r5, #5
   15526:	e7e3      	b.n	154f0 <check_preamble_code+0x3c>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   15528:	2b07      	cmp	r3, #7
   1552a:	d0e5      	beq.n	154f8 <check_preamble_code+0x44>
   1552c:	2b08      	cmp	r3, #8
   1552e:	d0e3      	beq.n	154f8 <check_preamble_code+0x44>
   15530:	2507      	movs	r5, #7
   15532:	e004      	b.n	1553e <check_preamble_code+0x8a>
            if (code < 9 || code > 12)  new_code = 9;
   15534:	3b09      	subs	r3, #9
   15536:	b2db      	uxtb	r3, r3
   15538:	2b03      	cmp	r3, #3
   1553a:	d908      	bls.n	1554e <check_preamble_code+0x9a>
   1553c:	2509      	movs	r5, #9
        UC_WARN("inv pream code (using %d)\n", new_code);
   1553e:	9500      	str	r5, [sp, #0]
   15540:	4b04      	ldr	r3, [pc, #16]	; (15554 <check_preamble_code+0xa0>)
   15542:	2202      	movs	r2, #2
   15544:	215c      	movs	r1, #92	; 0x5c
   15546:	4804      	ldr	r0, [pc, #16]	; (15558 <check_preamble_code+0xa4>)
   15548:	f009 f98a 	bl	1e860 <log_printf>
        *arg_code = new_code;
   1554c:	7025      	strb	r5, [r4, #0]
    }
}
   1554e:	b003      	add	sp, #12
   15550:	bd30      	pop	{r4, r5, pc}
   15552:	bf00      	nop
   15554:	000244b8 	.word	0x000244b8
   15558:	20006cac 	.word	0x20006cac

0001555c <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   1555c:	4603      	mov	r3, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   1555e:	f010 0001 	ands.w	r0, r0, #1
   15562:	d000      	beq.n	15566 <remap_framefilter+0xa>
   15564:	2004      	movs	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   15566:	f013 0f02 	tst.w	r3, #2
   1556a:	d001      	beq.n	15570 <remap_framefilter+0x14>
   1556c:	f040 0008 	orr.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   15570:	f013 0f04 	tst.w	r3, #4
   15574:	d001      	beq.n	1557a <remap_framefilter+0x1e>
   15576:	f040 0010 	orr.w	r0, r0, #16
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   1557a:	f013 0f08 	tst.w	r3, #8
   1557e:	d001      	beq.n	15584 <remap_framefilter+0x28>
   15580:	f040 0020 	orr.w	r0, r0, #32
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   15584:	f013 0f10 	tst.w	r3, #16
   15588:	d001      	beq.n	1558e <remap_framefilter+0x32>
   1558a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   1558e:	f413 7f80 	tst.w	r3, #256	; 0x100
   15592:	d001      	beq.n	15598 <remap_framefilter+0x3c>
   15594:	f040 0002 	orr.w	r0, r0, #2
    return r;
}
   15598:	4770      	bx	lr
	...

0001559c <uwbcfg_commit_to_inst_dw1000>:
{
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   1559c:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   155a0:	4b84      	ldr	r3, [pc, #528]	; (157b4 <uwbcfg_commit_to_inst_dw1000+0x218>)
   155a2:	429a      	cmp	r2, r3
   155a4:	d001      	beq.n	155aa <uwbcfg_commit_to_inst_dw1000+0xe>
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   155a6:	2000      	movs	r0, #0
   155a8:	4770      	bx	lr
{
   155aa:	b570      	push	{r4, r5, r6, lr}
   155ac:	b084      	sub	sp, #16
   155ae:	4604      	mov	r4, r0
   155b0:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   155b2:	2300      	movs	r3, #0
   155b4:	f10d 020f 	add.w	r2, sp, #15
   155b8:	2102      	movs	r1, #2
   155ba:	f105 0008 	add.w	r0, r5, #8
   155be:	f7fd f8e6 	bl	1278e <conf_value_from_str>
    if (prf == 16) {
   155c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   155c6:	2b10      	cmp	r3, #16
   155c8:	d005      	beq.n	155d6 <uwbcfg_commit_to_inst_dw1000+0x3a>
    } else if (prf == 64) {
   155ca:	2b40      	cmp	r3, #64	; 0x40
   155cc:	d11b      	bne.n	15606 <uwbcfg_commit_to_inst_dw1000+0x6a>
        inst->config.prf = DWT_PRF_64M;
   155ce:	2302      	movs	r3, #2
   155d0:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
   155d4:	e002      	b.n	155dc <uwbcfg_commit_to_inst_dw1000+0x40>
        inst->config.prf = DWT_PRF_16M;
   155d6:	2301      	movs	r3, #1
   155d8:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   155dc:	f204 5111 	addw	r1, r4, #1297	; 0x511
   155e0:	4620      	mov	r0, r4
   155e2:	f7ff ff67 	bl	154b4 <check_preamble_code>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   155e6:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
   155ea:	4620      	mov	r0, r4
   155ec:	f7ff ff62 	bl	154b4 <check_preamble_code>
    switch (inst->config.channel) {
   155f0:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   155f4:	3b01      	subs	r3, #1
   155f6:	2b06      	cmp	r3, #6
   155f8:	d842      	bhi.n	15680 <uwbcfg_commit_to_inst_dw1000+0xe4>
   155fa:	e8df f003 	tbb	[pc, r3]
   155fe:	2d0c      	.short	0x2d0c
   15600:	413d3531 	.word	0x413d3531
   15604:	39          	.byte	0x39
   15605:	00          	.byte	0x00
        UC_WARN("inv prf %d\n", prf);
   15606:	9300      	str	r3, [sp, #0]
   15608:	4b6b      	ldr	r3, [pc, #428]	; (157b8 <uwbcfg_commit_to_inst_dw1000+0x21c>)
   1560a:	2202      	movs	r2, #2
   1560c:	215c      	movs	r1, #92	; 0x5c
   1560e:	486b      	ldr	r0, [pc, #428]	; (157bc <uwbcfg_commit_to_inst_dw1000+0x220>)
   15610:	f009 f926 	bl	1e860 <log_printf>
   15614:	e7e2      	b.n	155dc <uwbcfg_commit_to_inst_dw1000+0x40>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   15616:	23c9      	movs	r3, #201	; 0xc9
   15618:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   1561c:	f105 0610 	add.w	r6, r5, #16
   15620:	4967      	ldr	r1, [pc, #412]	; (157c0 <uwbcfg_commit_to_inst_dw1000+0x224>)
   15622:	4630      	mov	r0, r6
   15624:	f7fb ff56 	bl	114d4 <strcmp>
   15628:	bb88      	cbnz	r0, 1568e <uwbcfg_commit_to_inst_dw1000+0xf2>
        inst->config.dataRate = DWT_BR_6M8;
   1562a:	2302      	movs	r3, #2
   1562c:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   15630:	2300      	movs	r3, #0
   15632:	aa03      	add	r2, sp, #12
   15634:	2102      	movs	r1, #2
   15636:	f105 0018 	add.w	r0, r5, #24
   1563a:	f7fd f8a8 	bl	1278e <conf_value_from_str>
    switch (paclen) {
   1563e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   15642:	2b20      	cmp	r3, #32
   15644:	d06b      	beq.n	1571e <uwbcfg_commit_to_inst_dw1000+0x182>
   15646:	d83b      	bhi.n	156c0 <uwbcfg_commit_to_inst_dw1000+0x124>
   15648:	2b08      	cmp	r3, #8
   1564a:	d03f      	beq.n	156cc <uwbcfg_commit_to_inst_dw1000+0x130>
   1564c:	2b10      	cmp	r3, #16
   1564e:	d16a      	bne.n	15726 <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   15650:	2301      	movs	r3, #1
   15652:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   15656:	e03c      	b.n	156d2 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   15658:	23c2      	movs	r3, #194	; 0xc2
   1565a:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   1565e:	e7dd      	b.n	1561c <uwbcfg_commit_to_inst_dw1000+0x80>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   15660:	23c5      	movs	r3, #197	; 0xc5
   15662:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   15666:	e7d9      	b.n	1561c <uwbcfg_commit_to_inst_dw1000+0x80>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   15668:	2395      	movs	r3, #149	; 0x95
   1566a:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   1566e:	e7d5      	b.n	1561c <uwbcfg_commit_to_inst_dw1000+0x80>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   15670:	2393      	movs	r3, #147	; 0x93
   15672:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   15676:	e7d1      	b.n	1561c <uwbcfg_commit_to_inst_dw1000+0x80>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   15678:	23c0      	movs	r3, #192	; 0xc0
   1567a:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   1567e:	e7cd      	b.n	1561c <uwbcfg_commit_to_inst_dw1000+0x80>
        UC_WARN("inv ch\n");
   15680:	4b50      	ldr	r3, [pc, #320]	; (157c4 <uwbcfg_commit_to_inst_dw1000+0x228>)
   15682:	2202      	movs	r2, #2
   15684:	215c      	movs	r1, #92	; 0x5c
   15686:	484d      	ldr	r0, [pc, #308]	; (157bc <uwbcfg_commit_to_inst_dw1000+0x220>)
   15688:	f009 f8ea 	bl	1e860 <log_printf>
        break;
   1568c:	e7c6      	b.n	1561c <uwbcfg_commit_to_inst_dw1000+0x80>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   1568e:	494e      	ldr	r1, [pc, #312]	; (157c8 <uwbcfg_commit_to_inst_dw1000+0x22c>)
   15690:	4630      	mov	r0, r6
   15692:	f7fb ff1f 	bl	114d4 <strcmp>
   15696:	b918      	cbnz	r0, 156a0 <uwbcfg_commit_to_inst_dw1000+0x104>
        inst->config.dataRate = DWT_BR_850K;
   15698:	2301      	movs	r3, #1
   1569a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   1569e:	e7c7      	b.n	15630 <uwbcfg_commit_to_inst_dw1000+0x94>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   156a0:	494a      	ldr	r1, [pc, #296]	; (157cc <uwbcfg_commit_to_inst_dw1000+0x230>)
   156a2:	4630      	mov	r0, r6
   156a4:	f7fb ff16 	bl	114d4 <strcmp>
   156a8:	b918      	cbnz	r0, 156b2 <uwbcfg_commit_to_inst_dw1000+0x116>
        inst->config.dataRate = DWT_BR_110K;
   156aa:	2300      	movs	r3, #0
   156ac:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   156b0:	e7be      	b.n	15630 <uwbcfg_commit_to_inst_dw1000+0x94>
        UC_WARN("inv datarate\n");
   156b2:	4b47      	ldr	r3, [pc, #284]	; (157d0 <uwbcfg_commit_to_inst_dw1000+0x234>)
   156b4:	2202      	movs	r2, #2
   156b6:	215c      	movs	r1, #92	; 0x5c
   156b8:	4840      	ldr	r0, [pc, #256]	; (157bc <uwbcfg_commit_to_inst_dw1000+0x220>)
   156ba:	f009 f8d1 	bl	1e860 <log_printf>
   156be:	e7b7      	b.n	15630 <uwbcfg_commit_to_inst_dw1000+0x94>
    switch (paclen) {
   156c0:	2b40      	cmp	r3, #64	; 0x40
   156c2:	d130      	bne.n	15726 <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   156c4:	2303      	movs	r3, #3
   156c6:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   156ca:	e002      	b.n	156d2 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   156cc:	2300      	movs	r3, #0
   156ce:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    if (inst->config.rx.sfdType>1) {
   156d2:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   156d6:	2b01      	cmp	r3, #1
   156d8:	d82c      	bhi.n	15734 <uwbcfg_commit_to_inst_dw1000+0x198>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   156da:	2300      	movs	r3, #0
   156dc:	f10d 020e 	add.w	r2, sp, #14
   156e0:	2102      	movs	r1, #2
   156e2:	f105 0058 	add.w	r0, r5, #88	; 0x58
   156e6:	f7fd f852 	bl	1278e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   156ea:	2300      	movs	r3, #0
   156ec:	f10d 020d 	add.w	r2, sp, #13
   156f0:	2102      	movs	r1, #2
   156f2:	f105 0060 	add.w	r0, r5, #96	; 0x60
   156f6:	f7fd f84a 	bl	1278e <conf_value_from_str>
    txpwr = inst->config.txrf.BOOSTNORM;
   156fa:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
    switch (coarse) {
   156fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   15702:	2b12      	cmp	r3, #18
   15704:	d84e      	bhi.n	157a4 <uwbcfg_commit_to_inst_dw1000+0x208>
   15706:	e8df f003 	tbb	[pc, r3]
   1570a:	4d48      	.short	0x4d48
   1570c:	4d4d434d 	.word	0x4d4d434d
   15710:	394d4d3e 	.word	0x394d4d3e
   15714:	4d344d4d 	.word	0x4d344d4d
   15718:	4d4d2f4d 	.word	0x4d4d2f4d
   1571c:	1c          	.byte	0x1c
   1571d:	00          	.byte	0x00
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   1571e:	2302      	movs	r3, #2
   15720:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   15724:	e7d5      	b.n	156d2 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv paclen\n");
   15726:	4b2b      	ldr	r3, [pc, #172]	; (157d4 <uwbcfg_commit_to_inst_dw1000+0x238>)
   15728:	2202      	movs	r2, #2
   1572a:	215c      	movs	r1, #92	; 0x5c
   1572c:	4823      	ldr	r0, [pc, #140]	; (157bc <uwbcfg_commit_to_inst_dw1000+0x220>)
   1572e:	f009 f897 	bl	1e860 <log_printf>
   15732:	e7ce      	b.n	156d2 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   15734:	4b28      	ldr	r3, [pc, #160]	; (157d8 <uwbcfg_commit_to_inst_dw1000+0x23c>)
   15736:	2202      	movs	r2, #2
   15738:	215c      	movs	r1, #92	; 0x5c
   1573a:	4820      	ldr	r0, [pc, #128]	; (157bc <uwbcfg_commit_to_inst_dw1000+0x220>)
   1573c:	f009 f890 	bl	1e860 <log_printf>
   15740:	e7cb      	b.n	156da <uwbcfg_commit_to_inst_dw1000+0x13e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   15742:	f89d 500d 	ldrb.w	r5, [sp, #13]
    inst->config.txrf.BOOSTNORM = txpwr;
   15746:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   1574a:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   1574e:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   15752:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   15756:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
   1575a:	f7ff feff 	bl	1555c <remap_framefilter>
   1575e:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
}
   15762:	2000      	movs	r0, #0
   15764:	b004      	add	sp, #16
   15766:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   15768:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1576c:	3520      	adds	r5, #32
   1576e:	b2ed      	uxtb	r5, r5
   15770:	e7e9      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   15772:	f89d 500d 	ldrb.w	r5, [sp, #13]
   15776:	3540      	adds	r5, #64	; 0x40
   15778:	b2ed      	uxtb	r5, r5
   1577a:	e7e4      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   1577c:	f89d 500d 	ldrb.w	r5, [sp, #13]
   15780:	3560      	adds	r5, #96	; 0x60
   15782:	b2ed      	uxtb	r5, r5
   15784:	e7df      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   15786:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1578a:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   1578e:	e7da      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   15790:	f89d 500d 	ldrb.w	r5, [sp, #13]
   15794:	3d60      	subs	r5, #96	; 0x60
   15796:	b2ed      	uxtb	r5, r5
        break;
   15798:	e7d5      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   1579a:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1579e:	3d40      	subs	r5, #64	; 0x40
   157a0:	b2ed      	uxtb	r5, r5
        break;
   157a2:	e7d0      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   157a4:	4b0d      	ldr	r3, [pc, #52]	; (157dc <uwbcfg_commit_to_inst_dw1000+0x240>)
   157a6:	2202      	movs	r2, #2
   157a8:	215c      	movs	r1, #92	; 0x5c
   157aa:	4804      	ldr	r0, [pc, #16]	; (157bc <uwbcfg_commit_to_inst_dw1000+0x220>)
   157ac:	f009 f858 	bl	1e860 <log_printf>
   157b0:	e7c9      	b.n	15746 <uwbcfg_commit_to_inst_dw1000+0x1aa>
   157b2:	bf00      	nop
   157b4:	deca0130 	.word	0xdeca0130
   157b8:	000244d4 	.word	0x000244d4
   157bc:	20006cac 	.word	0x20006cac
   157c0:	0002438c 	.word	0x0002438c
   157c4:	000244e0 	.word	0x000244e0
   157c8:	00024390 	.word	0x00024390
   157cc:	00024398 	.word	0x00024398
   157d0:	000244e8 	.word	0x000244e8
   157d4:	000244f8 	.word	0x000244f8
   157d8:	00024504 	.word	0x00024504
   157dc:	00024514 	.word	0x00024514

000157e0 <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   157e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157e4:	ed2d 8b02 	vpush	{d8}
   157e8:	b085      	sub	sp, #20
   157ea:	4604      	mov	r4, r0
   157ec:	460f      	mov	r7, r1
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   157ee:	2300      	movs	r3, #0
   157f0:	9303      	str	r3, [sp, #12]
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   157f2:	212e      	movs	r1, #46	; 0x2e
   157f4:	f006 ff5e 	bl	1c6b4 <strchr>
   157f8:	4606      	mov	r6, r0
    dash_at = strchr(nptr, '-');
   157fa:	212d      	movs	r1, #45	; 0x2d
   157fc:	4620      	mov	r0, r4
   157fe:	f006 ff59 	bl	1c6b4 <strchr>
   15802:	9001      	str	r0, [sp, #4]
    exponent_at = strchr(nptr, 'e');
   15804:	2165      	movs	r1, #101	; 0x65
   15806:	4620      	mov	r0, r4
   15808:	f006 ff54 	bl	1c6b4 <strchr>
   1580c:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   1580e:	220a      	movs	r2, #10
   15810:	a903      	add	r1, sp, #12
   15812:	4620      	mov	r0, r4
   15814:	f006 ffa0 	bl	1c758 <strtoll>
   15818:	468b      	mov	fp, r1
    f = (double)(ival);
   1581a:	f00c f8f1 	bl	21a00 <__aeabi_l2d>
   1581e:	ec41 0b18 	vmov	d8, r0, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   15822:	b10e      	cbz	r6, 15828 <strtod_soft+0x48>
   15824:	7873      	ldrb	r3, [r6, #1]
   15826:	b95b      	cbnz	r3, 15840 <strtod_soft+0x60>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   15828:	b10f      	cbz	r7, 1582e <strtod_soft+0x4e>
   1582a:	9b03      	ldr	r3, [sp, #12]
   1582c:	603b      	str	r3, [r7, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   1582e:	eeb0 0a48 	vmov.f32	s0, s16
   15832:	eef0 0a68 	vmov.f32	s1, s17
   15836:	b005      	add	sp, #20
   15838:	ecbd 8b02 	vpop	{d8}
   1583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   15840:	1c74      	adds	r4, r6, #1
   15842:	220a      	movs	r2, #10
   15844:	a903      	add	r1, sp, #12
   15846:	4620      	mov	r0, r4
   15848:	f006 ff86 	bl	1c758 <strtoll>
   1584c:	4680      	mov	r8, r0
   1584e:	4689      	mov	r9, r1
    if (endptr == 0) n = strlen(period_at + 1);
   15850:	b137      	cbz	r7, 15860 <strtod_soft+0x80>
    else n = *endptr - period_at + 1;
   15852:	6838      	ldr	r0, [r7, #0]
   15854:	1b80      	subs	r0, r0, r6
   15856:	3001      	adds	r0, #1
    div = 1;
   15858:	2401      	movs	r4, #1
   1585a:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) div *= 10;
   1585c:	4629      	mov	r1, r5
   1585e:	e00d      	b.n	1587c <strtod_soft+0x9c>
    if (endptr == 0) n = strlen(period_at + 1);
   15860:	4620      	mov	r0, r4
   15862:	f006 ff3d 	bl	1c6e0 <strlen>
   15866:	e7f7      	b.n	15858 <strtod_soft+0x78>
    for (i = 0; i < n; i++) div *= 10;
   15868:	00aa      	lsls	r2, r5, #2
   1586a:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
   1586e:	00a3      	lsls	r3, r4, #2
   15870:	191c      	adds	r4, r3, r4
   15872:	eb45 0502 	adc.w	r5, r5, r2
   15876:	1924      	adds	r4, r4, r4
   15878:	416d      	adcs	r5, r5
   1587a:	3101      	adds	r1, #1
   1587c:	4281      	cmp	r1, r0
   1587e:	dbf3      	blt.n	15868 <strtod_soft+0x88>
    f_frac = (double)frac / (double)div;
   15880:	4640      	mov	r0, r8
   15882:	4649      	mov	r1, r9
   15884:	f00c f8bc 	bl	21a00 <__aeabi_l2d>
   15888:	4680      	mov	r8, r0
   1588a:	4689      	mov	r9, r1
   1588c:	4620      	mov	r0, r4
   1588e:	4629      	mov	r1, r5
   15890:	f00c f8b6 	bl	21a00 <__aeabi_l2d>
   15894:	4602      	mov	r2, r0
   15896:	460b      	mov	r3, r1
   15898:	4640      	mov	r0, r8
   1589a:	4649      	mov	r1, r9
   1589c:	f00c fa08 	bl	21cb0 <__aeabi_ddiv>
   158a0:	4602      	mov	r2, r0
   158a2:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   158a4:	f1bb 0f00 	cmp.w	fp, #0
   158a8:	db03      	blt.n	158b2 <strtod_soft+0xd2>
   158aa:	9901      	ldr	r1, [sp, #4]
   158ac:	b311      	cbz	r1, 158f4 <strtod_soft+0x114>
   158ae:	428e      	cmp	r6, r1
   158b0:	d920      	bls.n	158f4 <strtod_soft+0x114>
        f -= f_frac;
   158b2:	ec51 0b18 	vmov	r0, r1, d8
   158b6:	f00b ff19 	bl	216ec <__aeabi_dsub>
   158ba:	ec41 0b18 	vmov	d8, r0, r1
    if (endptr) *endptr = ep;
   158be:	b10f      	cbz	r7, 158c4 <strtod_soft+0xe4>
   158c0:	9b03      	ldr	r3, [sp, #12]
   158c2:	603b      	str	r3, [r7, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   158c4:	f1ba 0f00 	cmp.w	sl, #0
   158c8:	d0b1      	beq.n	1582e <strtod_soft+0x4e>
   158ca:	f89a 3001 	ldrb.w	r3, [sl, #1]
   158ce:	2b00      	cmp	r3, #0
   158d0:	d0ad      	beq.n	1582e <strtod_soft+0x4e>
   158d2:	9b03      	ldr	r3, [sp, #12]
   158d4:	2b00      	cmp	r3, #0
   158d6:	d0aa      	beq.n	1582e <strtod_soft+0x4e>
   158d8:	4553      	cmp	r3, sl
   158da:	d1a8      	bne.n	1582e <strtod_soft+0x4e>
    n = strtoll(exponent_at+1, &ep, 10);
   158dc:	220a      	movs	r2, #10
   158de:	a903      	add	r1, sp, #12
   158e0:	f10a 0001 	add.w	r0, sl, #1
   158e4:	f006 ff38 	bl	1c758 <strtoll>
    if (n < 0) {
   158e8:	1e05      	subs	r5, r0, #0
   158ea:	db12      	blt.n	15912 <strtod_soft+0x132>
        exp = 1;
   158ec:	2001      	movs	r0, #1
   158ee:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) exp *= 10;
   158f0:	460c      	mov	r4, r1
   158f2:	e028      	b.n	15946 <strtod_soft+0x166>
        f += f_frac;
   158f4:	ec51 0b18 	vmov	r0, r1, d8
   158f8:	f00b fefa 	bl	216f0 <__adddf3>
   158fc:	ec41 0b18 	vmov	d8, r0, r1
   15900:	e7dd      	b.n	158be <strtod_soft+0xde>
        for (i = 0; i < n; i++) div *= 10;
   15902:	220a      	movs	r2, #10
   15904:	fb02 f401 	mul.w	r4, r2, r1
   15908:	fba0 0102 	umull	r0, r1, r0, r2
   1590c:	4421      	add	r1, r4
   1590e:	3301      	adds	r3, #1
   15910:	e002      	b.n	15918 <strtod_soft+0x138>
        div = 1;
   15912:	2001      	movs	r0, #1
   15914:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) div *= 10;
   15916:	460b      	mov	r3, r1
   15918:	42ab      	cmp	r3, r5
   1591a:	dbf2      	blt.n	15902 <strtod_soft+0x122>
        f /= (double)div;
   1591c:	f00c f870 	bl	21a00 <__aeabi_l2d>
   15920:	4602      	mov	r2, r0
   15922:	460b      	mov	r3, r1
   15924:	ec51 0b18 	vmov	r0, r1, d8
   15928:	f00c f9c2 	bl	21cb0 <__aeabi_ddiv>
   1592c:	ec41 0b18 	vmov	d8, r0, r1
   15930:	e77d      	b.n	1582e <strtod_soft+0x4e>
        for (i = 0; i < n; i++) exp *= 10;
   15932:	008b      	lsls	r3, r1, #2
   15934:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   15938:	0082      	lsls	r2, r0, #2
   1593a:	1810      	adds	r0, r2, r0
   1593c:	eb41 0103 	adc.w	r1, r1, r3
   15940:	1800      	adds	r0, r0, r0
   15942:	4149      	adcs	r1, r1
   15944:	3401      	adds	r4, #1
   15946:	42ac      	cmp	r4, r5
   15948:	dbf3      	blt.n	15932 <strtod_soft+0x152>
        f *= (double)exp;
   1594a:	f00c f859 	bl	21a00 <__aeabi_l2d>
   1594e:	4602      	mov	r2, r0
   15950:	460b      	mov	r3, r1
   15952:	ec51 0b18 	vmov	r0, r1, d8
   15956:	f00c f881 	bl	21a5c <__aeabi_dmul>
   1595a:	ec41 0b18 	vmov	d8, r0, r1
   1595e:	e766      	b.n	1582e <strtod_soft+0x4e>

00015960 <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   15960:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   15962:	f010 0f03 	tst.w	r0, #3
   15966:	d115      	bne.n	15994 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   15968:	4a0d      	ldr	r2, [pc, #52]	; (159a0 <leapyear+0x40>)
   1596a:	fb82 1200 	smull	r1, r2, r2, r0
   1596e:	17c0      	asrs	r0, r0, #31
   15970:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   15974:	2264      	movs	r2, #100	; 0x64
   15976:	fb02 3010 	mls	r0, r2, r0, r3
   1597a:	b968      	cbnz	r0, 15998 <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   1597c:	4908      	ldr	r1, [pc, #32]	; (159a0 <leapyear+0x40>)
   1597e:	fb81 2103 	smull	r2, r1, r1, r3
   15982:	17da      	asrs	r2, r3, #31
   15984:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   15988:	f44f 71c8 	mov.w	r1, #400	; 0x190
   1598c:	fb01 3212 	mls	r2, r1, r2, r3
   15990:	b122      	cbz	r2, 1599c <leapyear+0x3c>
   15992:	4770      	bx	lr
    int rv = 0;
   15994:	2000      	movs	r0, #0
   15996:	4770      	bx	lr
        rv = 1;
   15998:	2001      	movs	r0, #1
   1599a:	4770      	bx	lr
                rv = 1;
   1599c:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   1599e:	4770      	bx	lr
   159a0:	51eb851f 	.word	0x51eb851f

000159a4 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   159a4:	4684      	mov	ip, r0
    const char *cp;
    const char *end;

    *val = 0;
   159a6:	2300      	movs	r3, #0
   159a8:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   159aa:	4408      	add	r0, r1
    while (cp < end) {
   159ac:	4584      	cmp	ip, r0
   159ae:	d21a      	bcs.n	159e6 <parse_number+0x42>
        if (!isdigit((int) *cp)) {
   159b0:	f89c 3000 	ldrb.w	r3, [ip]
   159b4:	3b30      	subs	r3, #48	; 0x30
   159b6:	2b09      	cmp	r3, #9
   159b8:	d816      	bhi.n	159e8 <parse_number+0x44>
{
   159ba:	b500      	push	{lr}
            return (NULL);
        }
        *val *= 10;
   159bc:	6813      	ldr	r3, [r2, #0]
   159be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   159c2:	005b      	lsls	r3, r3, #1
   159c4:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   159c6:	f81c eb01 	ldrb.w	lr, [ip], #1
   159ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   159ce:	4473      	add	r3, lr
   159d0:	6013      	str	r3, [r2, #0]
    while (cp < end) {
   159d2:	4584      	cmp	ip, r0
   159d4:	d205      	bcs.n	159e2 <parse_number+0x3e>
        if (!isdigit((int) *cp)) {
   159d6:	f89c 3000 	ldrb.w	r3, [ip]
   159da:	3b30      	subs	r3, #48	; 0x30
   159dc:	2b09      	cmp	r3, #9
   159de:	d9ed      	bls.n	159bc <parse_number+0x18>
            return (NULL);
   159e0:	2000      	movs	r0, #0
        cp++;
    }
    return (end);
}
   159e2:	f85d fb04 	ldr.w	pc, [sp], #4
   159e6:	4770      	bx	lr
            return (NULL);
   159e8:	2000      	movs	r0, #0
}
   159ea:	4770      	bx	lr

000159ec <clocktime_to_timeval>:
{
   159ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159f0:	b085      	sub	sp, #20
   159f2:	9101      	str	r1, [sp, #4]
   159f4:	9200      	str	r2, [sp, #0]
    year = ct->year;
   159f6:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   159f8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   159fc:	429e      	cmp	r6, r3
   159fe:	f340 80bc 	ble.w	15b7a <clocktime_to_timeval+0x18e>
   15a02:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   15a04:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   15a06:	2d00      	cmp	r5, #0
   15a08:	f340 80bb 	ble.w	15b82 <clocktime_to_timeval+0x196>
        ct->mon < 1 || ct->mon > 12 ||
   15a0c:	2d0c      	cmp	r5, #12
   15a0e:	f300 80ba 	bgt.w	15b86 <clocktime_to_timeval+0x19a>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   15a12:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   15a16:	f1b8 0f00 	cmp.w	r8, #0
   15a1a:	f340 80b6 	ble.w	15b8a <clocktime_to_timeval+0x19e>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   15a1e:	1e6b      	subs	r3, r5, #1
   15a20:	4a65      	ldr	r2, [pc, #404]	; (15bb8 <clocktime_to_timeval+0x1cc>)
   15a22:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   15a26:	2d02      	cmp	r5, #2
   15a28:	d02b      	beq.n	15a82 <clocktime_to_timeval+0x96>
   15a2a:	2000      	movs	r0, #0
   15a2c:	4407      	add	r7, r0
   15a2e:	45b8      	cmp	r8, r7
   15a30:	f300 80ad 	bgt.w	15b8e <clocktime_to_timeval+0x1a2>
        ct->hour < 0 || ct->hour > 23 ||
   15a34:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   15a38:	f1bb 0f00 	cmp.w	fp, #0
   15a3c:	f2c0 80a9 	blt.w	15b92 <clocktime_to_timeval+0x1a6>
        ct->hour < 0 || ct->hour > 23 ||
   15a40:	f1bb 0f17 	cmp.w	fp, #23
   15a44:	f300 80a7 	bgt.w	15b96 <clocktime_to_timeval+0x1aa>
        ct->min < 0 || ct->min > 59 ||
   15a48:	6923      	ldr	r3, [r4, #16]
   15a4a:	9302      	str	r3, [sp, #8]
        ct->hour < 0 || ct->hour > 23 ||
   15a4c:	2b00      	cmp	r3, #0
   15a4e:	f2c0 80a4 	blt.w	15b9a <clocktime_to_timeval+0x1ae>
        ct->min < 0 || ct->min > 59 ||
   15a52:	2b3b      	cmp	r3, #59	; 0x3b
   15a54:	f300 80a3 	bgt.w	15b9e <clocktime_to_timeval+0x1b2>
        ct->sec < 0 || ct->sec > 59 ||
   15a58:	6963      	ldr	r3, [r4, #20]
   15a5a:	9303      	str	r3, [sp, #12]
        ct->min < 0 || ct->min > 59 ||
   15a5c:	2b00      	cmp	r3, #0
   15a5e:	f2c0 80a0 	blt.w	15ba2 <clocktime_to_timeval+0x1b6>
        ct->sec < 0 || ct->sec > 59 ||
   15a62:	2b3b      	cmp	r3, #59	; 0x3b
   15a64:	f300 809f 	bgt.w	15ba6 <clocktime_to_timeval+0x1ba>
        ct->usec < 0 || ct->usec > 999999) {
   15a68:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   15a6a:	2b00      	cmp	r3, #0
   15a6c:	f2c0 809d 	blt.w	15baa <clocktime_to_timeval+0x1be>
        ct->usec < 0 || ct->usec > 999999) {
   15a70:	4a52      	ldr	r2, [pc, #328]	; (15bbc <clocktime_to_timeval+0x1d0>)
   15a72:	4293      	cmp	r3, r2
   15a74:	f300 809b 	bgt.w	15bae <clocktime_to_timeval+0x1c2>
    days = 0;
   15a78:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   15a7c:	f240 77b2 	movw	r7, #1970	; 0x7b2
   15a80:	e007      	b.n	15a92 <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   15a82:	4630      	mov	r0, r6
   15a84:	f7ff ff6c 	bl	15960 <leapyear>
   15a88:	e7d0      	b.n	15a2c <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   15a8a:	f240 136d 	movw	r3, #365	; 0x16d
   15a8e:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   15a90:	3701      	adds	r7, #1
   15a92:	42b7      	cmp	r7, r6
   15a94:	da07      	bge.n	15aa6 <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   15a96:	4638      	mov	r0, r7
   15a98:	f7ff ff62 	bl	15960 <leapyear>
   15a9c:	2800      	cmp	r0, #0
   15a9e:	d0f4      	beq.n	15a8a <clocktime_to_timeval+0x9e>
   15aa0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   15aa4:	e7f3      	b.n	15a8e <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   15aa6:	2701      	movs	r7, #1
   15aa8:	46aa      	mov	sl, r5
   15aaa:	e005      	b.n	15ab8 <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   15aac:	4630      	mov	r0, r6
   15aae:	f7ff ff57 	bl	15960 <leapyear>
   15ab2:	4405      	add	r5, r0
   15ab4:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   15ab6:	3701      	adds	r7, #1
   15ab8:	45ba      	cmp	sl, r7
   15aba:	dd07      	ble.n	15acc <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   15abc:	1e7b      	subs	r3, r7, #1
   15abe:	4a3e      	ldr	r2, [pc, #248]	; (15bb8 <clocktime_to_timeval+0x1cc>)
   15ac0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   15ac4:	2f02      	cmp	r7, #2
   15ac6:	d0f1      	beq.n	15aac <clocktime_to_timeval+0xc0>
   15ac8:	2000      	movs	r0, #0
   15aca:	e7f2      	b.n	15ab2 <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   15acc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   15ad0:	44c1      	add	r9, r8
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   15ad2:	ea4f 72e9 	mov.w	r2, r9, asr #31
   15ad6:	eb19 0309 	adds.w	r3, r9, r9
   15ada:	eb42 0102 	adc.w	r1, r2, r2
   15ade:	eb13 0309 	adds.w	r3, r3, r9
   15ae2:	eb42 0201 	adc.w	r2, r2, r1
   15ae6:	00d2      	lsls	r2, r2, #3
   15ae8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   15aec:	00db      	lsls	r3, r3, #3
   15aee:	eb13 030b 	adds.w	r3, r3, fp
   15af2:	eb42 7beb 	adc.w	fp, r2, fp, asr #31
   15af6:	ea4f 120b 	mov.w	r2, fp, lsl #4
   15afa:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   15afe:	0119      	lsls	r1, r3, #4
   15b00:	1acb      	subs	r3, r1, r3
   15b02:	eb62 020b 	sbc.w	r2, r2, fp
   15b06:	0092      	lsls	r2, r2, #2
   15b08:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   15b0c:	009b      	lsls	r3, r3, #2
   15b0e:	9802      	ldr	r0, [sp, #8]
   15b10:	1819      	adds	r1, r3, r0
   15b12:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
   15b16:	0102      	lsls	r2, r0, #4
   15b18:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
   15b1c:	010b      	lsls	r3, r1, #4
   15b1e:	1a5b      	subs	r3, r3, r1
   15b20:	eb62 0200 	sbc.w	r2, r2, r0
   15b24:	0092      	lsls	r2, r2, #2
   15b26:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   15b2a:	009b      	lsls	r3, r3, #2
   15b2c:	9903      	ldr	r1, [sp, #12]
   15b2e:	185b      	adds	r3, r3, r1
   15b30:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   15b34:	9800      	ldr	r0, [sp, #0]
   15b36:	6003      	str	r3, [r0, #0]
   15b38:	6042      	str	r2, [r0, #4]
    tv->tv_usec = ct->usec;
   15b3a:	69e1      	ldr	r1, [r4, #28]
   15b3c:	4604      	mov	r4, r0
   15b3e:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   15b40:	9d01      	ldr	r5, [sp, #4]
   15b42:	b3b5      	cbz	r5, 15bb2 <clocktime_to_timeval+0x1c6>
	tv->tv_sec += tz->tz_minuteswest * 60;
   15b44:	f9b5 1000 	ldrsh.w	r1, [r5]
   15b48:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   15b4c:	0088      	lsls	r0, r1, #2
   15b4e:	181b      	adds	r3, r3, r0
   15b50:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   15b54:	6023      	str	r3, [r4, #0]
   15b56:	6062      	str	r2, [r4, #4]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   15b58:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   15b5c:	b151      	cbz	r1, 15b74 <clocktime_to_timeval+0x188>
   15b5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   15b62:	2000      	movs	r0, #0
   15b64:	1a5b      	subs	r3, r3, r1
   15b66:	eb62 0200 	sbc.w	r2, r2, r0
   15b6a:	9900      	ldr	r1, [sp, #0]
   15b6c:	600b      	str	r3, [r1, #0]
   15b6e:	604a      	str	r2, [r1, #4]
    return (0);
   15b70:	2000      	movs	r0, #0
   15b72:	e003      	b.n	15b7c <clocktime_to_timeval+0x190>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   15b74:	2100      	movs	r1, #0
   15b76:	4608      	mov	r0, r1
   15b78:	e7f4      	b.n	15b64 <clocktime_to_timeval+0x178>
        return (OS_EINVAL);
   15b7a:	2002      	movs	r0, #2
}
   15b7c:	b005      	add	sp, #20
   15b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   15b82:	2002      	movs	r0, #2
   15b84:	e7fa      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b86:	2002      	movs	r0, #2
   15b88:	e7f8      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b8a:	2002      	movs	r0, #2
   15b8c:	e7f6      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b8e:	2002      	movs	r0, #2
   15b90:	e7f4      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b92:	2002      	movs	r0, #2
   15b94:	e7f2      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b96:	2002      	movs	r0, #2
   15b98:	e7f0      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b9a:	2002      	movs	r0, #2
   15b9c:	e7ee      	b.n	15b7c <clocktime_to_timeval+0x190>
   15b9e:	2002      	movs	r0, #2
   15ba0:	e7ec      	b.n	15b7c <clocktime_to_timeval+0x190>
   15ba2:	2002      	movs	r0, #2
   15ba4:	e7ea      	b.n	15b7c <clocktime_to_timeval+0x190>
   15ba6:	2002      	movs	r0, #2
   15ba8:	e7e8      	b.n	15b7c <clocktime_to_timeval+0x190>
   15baa:	2002      	movs	r0, #2
   15bac:	e7e6      	b.n	15b7c <clocktime_to_timeval+0x190>
   15bae:	2002      	movs	r0, #2
   15bb0:	e7e4      	b.n	15b7c <clocktime_to_timeval+0x190>
    return (0);
   15bb2:	2000      	movs	r0, #0
   15bb4:	e7e2      	b.n	15b7c <clocktime_to_timeval+0x190>
   15bb6:	bf00      	nop
   15bb8:	00024558 	.word	0x00024558
   15bbc:	000f423f 	.word	0x000f423f

00015bc0 <timeval_to_clocktime>:
{
   15bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15bc4:	4606      	mov	r6, r0
   15bc6:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   15bc8:	6807      	ldr	r7, [r0, #0]
   15bca:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (tz != NULL) {
   15bce:	b189      	cbz	r1, 15bf4 <timeval_to_clocktime+0x34>
        secs -= tz->tz_minuteswest * 60;
   15bd0:	f9b1 3000 	ldrsh.w	r3, [r1]
   15bd4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   15bd8:	009a      	lsls	r2, r3, #2
   15bda:	1abf      	subs	r7, r7, r2
   15bdc:	eb68 73e3 	sbc.w	r3, r8, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   15be0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   15be4:	b37a      	cbz	r2, 15c46 <timeval_to_clocktime+0x86>
   15be6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   15bea:	f04f 0800 	mov.w	r8, #0
   15bee:	19d7      	adds	r7, r2, r7
   15bf0:	eb48 0803 	adc.w	r8, r8, r3
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   15bf4:	f1b8 0f00 	cmp.w	r8, #0
   15bf8:	db73      	blt.n	15ce2 <timeval_to_clocktime+0x122>
   15bfa:	68b3      	ldr	r3, [r6, #8]
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	db72      	blt.n	15ce6 <timeval_to_clocktime+0x126>
   15c00:	4a3b      	ldr	r2, [pc, #236]	; (15cf0 <timeval_to_clocktime+0x130>)
   15c02:	4293      	cmp	r3, r2
   15c04:	dc71      	bgt.n	15cea <timeval_to_clocktime+0x12a>
    days = secs / SECDAY;
   15c06:	4a3b      	ldr	r2, [pc, #236]	; (15cf4 <timeval_to_clocktime+0x134>)
   15c08:	2300      	movs	r3, #0
   15c0a:	4638      	mov	r0, r7
   15c0c:	4641      	mov	r1, r8
   15c0e:	f00c fa6d 	bl	220ec <__aeabi_ldivmod>
   15c12:	4681      	mov	r9, r0
   15c14:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   15c16:	4a37      	ldr	r2, [pc, #220]	; (15cf4 <timeval_to_clocktime+0x134>)
   15c18:	2300      	movs	r3, #0
   15c1a:	4638      	mov	r0, r7
   15c1c:	4641      	mov	r1, r8
   15c1e:	f00c fa65 	bl	220ec <__aeabi_ldivmod>
   15c22:	4690      	mov	r8, r2
   15c24:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   15c26:	f109 0004 	add.w	r0, r9, #4
   15c2a:	4b33      	ldr	r3, [pc, #204]	; (15cf8 <timeval_to_clocktime+0x138>)
   15c2c:	fb83 2300 	smull	r2, r3, r3, r0
   15c30:	181a      	adds	r2, r3, r0
   15c32:	17c3      	asrs	r3, r0, #31
   15c34:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   15c38:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   15c3c:	1ac3      	subs	r3, r0, r3
   15c3e:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   15c40:	f240 79b2 	movw	r9, #1970	; 0x7b2
   15c44:	e009      	b.n	15c5a <timeval_to_clocktime+0x9a>
        secs += tz->tz_dsttime ? 3600 : 0;
   15c46:	2200      	movs	r2, #0
   15c48:	4690      	mov	r8, r2
   15c4a:	e7d0      	b.n	15bee <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   15c4c:	f240 136d 	movw	r3, #365	; 0x16d
   15c50:	429c      	cmp	r4, r3
   15c52:	db0b      	blt.n	15c6c <timeval_to_clocktime+0xac>
        days -= days_in_year(year);
   15c54:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   15c56:	f109 0901 	add.w	r9, r9, #1
   15c5a:	4648      	mov	r0, r9
   15c5c:	f7ff fe80 	bl	15960 <leapyear>
   15c60:	4686      	mov	lr, r0
   15c62:	2800      	cmp	r0, #0
   15c64:	d0f2      	beq.n	15c4c <timeval_to_clocktime+0x8c>
   15c66:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   15c6a:	e7f1      	b.n	15c50 <timeval_to_clocktime+0x90>
    ct->year = year;
   15c6c:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   15c70:	2301      	movs	r3, #1
   15c72:	e006      	b.n	15c82 <timeval_to_clocktime+0xc2>
   15c74:	46f4      	mov	ip, lr
   15c76:	448c      	add	ip, r1
   15c78:	45a4      	cmp	ip, r4
   15c7a:	dc0b      	bgt.n	15c94 <timeval_to_clocktime+0xd4>
        days -= days_in_month(year, i);
   15c7c:	eba4 040c 	sub.w	r4, r4, ip
    for (i = 1; days >= days_in_month(year, i); i++)
   15c80:	3301      	adds	r3, #1
   15c82:	1e5a      	subs	r2, r3, #1
   15c84:	491d      	ldr	r1, [pc, #116]	; (15cfc <timeval_to_clocktime+0x13c>)
   15c86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   15c8a:	2b02      	cmp	r3, #2
   15c8c:	d0f2      	beq.n	15c74 <timeval_to_clocktime+0xb4>
   15c8e:	f04f 0c00 	mov.w	ip, #0
   15c92:	e7f0      	b.n	15c76 <timeval_to_clocktime+0xb6>
    ct->mon = i;
   15c94:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   15c96:	3401      	adds	r4, #1
   15c98:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   15c9a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   15c9e:	2300      	movs	r3, #0
   15ca0:	4640      	mov	r0, r8
   15ca2:	4639      	mov	r1, r7
   15ca4:	f00c fa22 	bl	220ec <__aeabi_ldivmod>
   15ca8:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   15caa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   15cae:	2300      	movs	r3, #0
   15cb0:	4640      	mov	r0, r8
   15cb2:	4639      	mov	r1, r7
   15cb4:	f00c fa1a 	bl	220ec <__aeabi_ldivmod>
   15cb8:	4617      	mov	r7, r2
   15cba:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   15cbc:	223c      	movs	r2, #60	; 0x3c
   15cbe:	2300      	movs	r3, #0
   15cc0:	4638      	mov	r0, r7
   15cc2:	4621      	mov	r1, r4
   15cc4:	f00c fa12 	bl	220ec <__aeabi_ldivmod>
   15cc8:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   15cca:	223c      	movs	r2, #60	; 0x3c
   15ccc:	2300      	movs	r3, #0
   15cce:	4638      	mov	r0, r7
   15cd0:	4621      	mov	r1, r4
   15cd2:	f00c fa0b 	bl	220ec <__aeabi_ldivmod>
    ct->sec  = rsec;
   15cd6:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   15cd8:	68b3      	ldr	r3, [r6, #8]
   15cda:	61eb      	str	r3, [r5, #28]
    return (0);
   15cdc:	2000      	movs	r0, #0
}
   15cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (OS_EINVAL);
   15ce2:	2002      	movs	r0, #2
   15ce4:	e7fb      	b.n	15cde <timeval_to_clocktime+0x11e>
   15ce6:	2002      	movs	r0, #2
   15ce8:	e7f9      	b.n	15cde <timeval_to_clocktime+0x11e>
   15cea:	2002      	movs	r0, #2
   15cec:	e7f7      	b.n	15cde <timeval_to_clocktime+0x11e>
   15cee:	bf00      	nop
   15cf0:	000f423f 	.word	0x000f423f
   15cf4:	00015180 	.word	0x00015180
   15cf8:	92492493 	.word	0x92492493
   15cfc:	00024558 	.word	0x00024558

00015d00 <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   15d00:	b570      	push	{r4, r5, r6, lr}
   15d02:	b08a      	sub	sp, #40	; 0x28
   15d04:	4604      	mov	r4, r0
   15d06:	460d      	mov	r5, r1
   15d08:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   15d0a:	2220      	movs	r2, #32
   15d0c:	2100      	movs	r1, #0
   15d0e:	4668      	mov	r0, sp
   15d10:	f7fb fbbf 	bl	11492 <memset>
    bzero(tv, sizeof(struct os_timeval));
   15d14:	2300      	movs	r3, #0
   15d16:	602b      	str	r3, [r5, #0]
   15d18:	606b      	str	r3, [r5, #4]
   15d1a:	60ab      	str	r3, [r5, #8]
   15d1c:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   15d1e:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   15d20:	466a      	mov	r2, sp
   15d22:	2104      	movs	r1, #4
   15d24:	4620      	mov	r0, r4
   15d26:	f7ff fe3d 	bl	159a4 <parse_number>
    if (cp == NULL || *cp != '-') {
   15d2a:	2800      	cmp	r0, #0
   15d2c:	f000 80a6 	beq.w	15e7c <datetime_parse+0x17c>
   15d30:	7802      	ldrb	r2, [r0, #0]
   15d32:	2a2d      	cmp	r2, #45	; 0x2d
   15d34:	f040 80a5 	bne.w	15e82 <datetime_parse+0x182>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   15d38:	aa01      	add	r2, sp, #4
   15d3a:	2102      	movs	r1, #2
   15d3c:	3001      	adds	r0, #1
   15d3e:	f7ff fe31 	bl	159a4 <parse_number>
    if (cp == NULL || *cp != '-') {
   15d42:	2800      	cmp	r0, #0
   15d44:	f000 80a0 	beq.w	15e88 <datetime_parse+0x188>
   15d48:	7802      	ldrb	r2, [r0, #0]
   15d4a:	2a2d      	cmp	r2, #45	; 0x2d
   15d4c:	f040 809f 	bne.w	15e8e <datetime_parse+0x18e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   15d50:	aa02      	add	r2, sp, #8
   15d52:	2102      	movs	r1, #2
   15d54:	3001      	adds	r0, #1
   15d56:	f7ff fe25 	bl	159a4 <parse_number>
    if (cp == NULL || *cp != 'T') {
   15d5a:	2800      	cmp	r0, #0
   15d5c:	f000 809a 	beq.w	15e94 <datetime_parse+0x194>
   15d60:	7802      	ldrb	r2, [r0, #0]
   15d62:	2a54      	cmp	r2, #84	; 0x54
   15d64:	f040 8099 	bne.w	15e9a <datetime_parse+0x19a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   15d68:	aa03      	add	r2, sp, #12
   15d6a:	2102      	movs	r1, #2
   15d6c:	3001      	adds	r0, #1
   15d6e:	f7ff fe19 	bl	159a4 <parse_number>
    if (cp == NULL || *cp != ':') {
   15d72:	2800      	cmp	r0, #0
   15d74:	f000 8094 	beq.w	15ea0 <datetime_parse+0x1a0>
   15d78:	7802      	ldrb	r2, [r0, #0]
   15d7a:	2a3a      	cmp	r2, #58	; 0x3a
   15d7c:	f040 8093 	bne.w	15ea6 <datetime_parse+0x1a6>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   15d80:	aa04      	add	r2, sp, #16
   15d82:	2102      	movs	r1, #2
   15d84:	3001      	adds	r0, #1
   15d86:	f7ff fe0d 	bl	159a4 <parse_number>
    if (cp == NULL || *cp != ':') {
   15d8a:	2800      	cmp	r0, #0
   15d8c:	f000 808e 	beq.w	15eac <datetime_parse+0x1ac>
   15d90:	7802      	ldrb	r2, [r0, #0]
   15d92:	2a3a      	cmp	r2, #58	; 0x3a
   15d94:	f040 808d 	bne.w	15eb2 <datetime_parse+0x1b2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   15d98:	aa05      	add	r2, sp, #20
   15d9a:	2102      	movs	r1, #2
   15d9c:	3001      	adds	r0, #1
   15d9e:	f7ff fe01 	bl	159a4 <parse_number>
    if (cp == NULL) {
   15da2:	4684      	mov	ip, r0
   15da4:	2800      	cmp	r0, #0
   15da6:	f000 8087 	beq.w	15eb8 <datetime_parse+0x1b8>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   15daa:	7803      	ldrb	r3, [r0, #0]
   15dac:	2b2e      	cmp	r3, #46	; 0x2e
   15dae:	d037      	beq.n	15e20 <datetime_parse+0x120>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   15db0:	f89c 3000 	ldrb.w	r3, [ip]
   15db4:	2b5a      	cmp	r3, #90	; 0x5a
   15db6:	d050      	beq.n	15e5a <datetime_parse+0x15a>
   15db8:	2b7a      	cmp	r3, #122	; 0x7a
   15dba:	d04e      	beq.n	15e5a <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   15dbc:	2b2b      	cmp	r3, #43	; 0x2b
   15dbe:	d001      	beq.n	15dc4 <datetime_parse+0xc4>
   15dc0:	2b2d      	cmp	r3, #45	; 0x2d
   15dc2:	d14c      	bne.n	15e5e <datetime_parse+0x15e>
        sign = (*cp == '+') ? +1 : -1;
   15dc4:	2b2b      	cmp	r3, #43	; 0x2b
   15dc6:	d057      	beq.n	15e78 <datetime_parse+0x178>
   15dc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   15dcc:	aa09      	add	r2, sp, #36	; 0x24
   15dce:	2102      	movs	r1, #2
   15dd0:	f10c 0001 	add.w	r0, ip, #1
   15dd4:	f7ff fde6 	bl	159a4 <parse_number>
        if (cp == NULL || *cp != ':') {
   15dd8:	2800      	cmp	r0, #0
   15dda:	d076      	beq.n	15eca <datetime_parse+0x1ca>
   15ddc:	7802      	ldrb	r2, [r0, #0]
   15dde:	2a3a      	cmp	r2, #58	; 0x3a
   15de0:	d176      	bne.n	15ed0 <datetime_parse+0x1d0>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   15de2:	aa08      	add	r2, sp, #32
   15de4:	2102      	movs	r1, #2
   15de6:	3001      	adds	r0, #1
   15de8:	f7ff fddc 	bl	159a4 <parse_number>
        if (cp == NULL) {
   15dec:	4684      	mov	ip, r0
   15dee:	2800      	cmp	r0, #0
   15df0:	d071      	beq.n	15ed6 <datetime_parse+0x1d6>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   15df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15df4:	2a17      	cmp	r2, #23
   15df6:	d871      	bhi.n	15edc <datetime_parse+0x1dc>
   15df8:	9b08      	ldr	r3, [sp, #32]
   15dfa:	2b00      	cmp	r3, #0
   15dfc:	db71      	blt.n	15ee2 <datetime_parse+0x1e2>
   15dfe:	2b3b      	cmp	r3, #59	; 0x3b
   15e00:	dc72      	bgt.n	15ee8 <datetime_parse+0x1e8>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   15e02:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   15e06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   15e0a:	b29a      	uxth	r2, r3
   15e0c:	b21b      	sxth	r3, r3
   15e0e:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   15e10:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   15e14:	dc6b      	bgt.n	15eee <datetime_parse+0x1ee>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   15e16:	2c00      	cmp	r4, #0
   15e18:	dd21      	ble.n	15e5e <datetime_parse+0x15e>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   15e1a:	4252      	negs	r2, r2
   15e1c:	8032      	strh	r2, [r6, #0]
   15e1e:	e01e      	b.n	15e5e <datetime_parse+0x15e>
        ep = ++cp;
   15e20:	3001      	adds	r0, #1
   15e22:	4604      	mov	r4, r0
        while (isdigit((int) *ep)) {
   15e24:	e000      	b.n	15e28 <datetime_parse+0x128>
            ep++;
   15e26:	3401      	adds	r4, #1
        while (isdigit((int) *ep)) {
   15e28:	7823      	ldrb	r3, [r4, #0]
   15e2a:	3b30      	subs	r3, #48	; 0x30
   15e2c:	2b09      	cmp	r3, #9
   15e2e:	d9fa      	bls.n	15e26 <datetime_parse+0x126>
        digits = ep - cp;
   15e30:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   15e32:	1e63      	subs	r3, r4, #1
   15e34:	2b05      	cmp	r3, #5
   15e36:	d842      	bhi.n	15ebe <datetime_parse+0x1be>
        cp = parse_number(cp, digits, &ct.usec);
   15e38:	aa07      	add	r2, sp, #28
   15e3a:	4621      	mov	r1, r4
   15e3c:	f7ff fdb2 	bl	159a4 <parse_number>
        if (cp == NULL) {
   15e40:	4684      	mov	ip, r0
   15e42:	2800      	cmp	r0, #0
   15e44:	d03e      	beq.n	15ec4 <datetime_parse+0x1c4>
        while (digits++ < 6) {
   15e46:	1c62      	adds	r2, r4, #1
   15e48:	2c05      	cmp	r4, #5
   15e4a:	dcb1      	bgt.n	15db0 <datetime_parse+0xb0>
            ct.usec *= 10;
   15e4c:	9b07      	ldr	r3, [sp, #28]
   15e4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15e52:	005b      	lsls	r3, r3, #1
   15e54:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   15e56:	4614      	mov	r4, r2
   15e58:	e7f5      	b.n	15e46 <datetime_parse+0x146>
        cp++;
   15e5a:	f10c 0c01 	add.w	ip, ip, #1
        /*
         * 'time offset' is not specified so date/time defaults to UTC.
         */
    }

    if (*cp != '\0') {
   15e5e:	f89c 3000 	ldrb.w	r3, [ip]
   15e62:	2b00      	cmp	r3, #0
   15e64:	d146      	bne.n	15ef4 <datetime_parse+0x1f4>
        goto err;
    }

    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   15e66:	462a      	mov	r2, r5
   15e68:	4631      	mov	r1, r6
   15e6a:	4668      	mov	r0, sp
   15e6c:	f7ff fdbe 	bl	159ec <clocktime_to_timeval>
   15e70:	2800      	cmp	r0, #0
   15e72:	d142      	bne.n	15efa <datetime_parse+0x1fa>
    }

    return (0);
err:
    return (-1);
}
   15e74:	b00a      	add	sp, #40	; 0x28
   15e76:	bd70      	pop	{r4, r5, r6, pc}
        sign = (*cp == '+') ? +1 : -1;
   15e78:	2401      	movs	r4, #1
   15e7a:	e7a7      	b.n	15dcc <datetime_parse+0xcc>
    return (-1);
   15e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e80:	e7f8      	b.n	15e74 <datetime_parse+0x174>
   15e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e86:	e7f5      	b.n	15e74 <datetime_parse+0x174>
   15e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e8c:	e7f2      	b.n	15e74 <datetime_parse+0x174>
   15e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e92:	e7ef      	b.n	15e74 <datetime_parse+0x174>
   15e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e98:	e7ec      	b.n	15e74 <datetime_parse+0x174>
   15e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15e9e:	e7e9      	b.n	15e74 <datetime_parse+0x174>
   15ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ea4:	e7e6      	b.n	15e74 <datetime_parse+0x174>
   15ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15eaa:	e7e3      	b.n	15e74 <datetime_parse+0x174>
   15eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15eb0:	e7e0      	b.n	15e74 <datetime_parse+0x174>
   15eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15eb6:	e7dd      	b.n	15e74 <datetime_parse+0x174>
   15eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ebc:	e7da      	b.n	15e74 <datetime_parse+0x174>
   15ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ec2:	e7d7      	b.n	15e74 <datetime_parse+0x174>
   15ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ec8:	e7d4      	b.n	15e74 <datetime_parse+0x174>
   15eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ece:	e7d1      	b.n	15e74 <datetime_parse+0x174>
   15ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ed4:	e7ce      	b.n	15e74 <datetime_parse+0x174>
   15ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15eda:	e7cb      	b.n	15e74 <datetime_parse+0x174>
   15edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ee0:	e7c8      	b.n	15e74 <datetime_parse+0x174>
   15ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ee6:	e7c5      	b.n	15e74 <datetime_parse+0x174>
   15ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15eec:	e7c2      	b.n	15e74 <datetime_parse+0x174>
   15eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ef2:	e7bf      	b.n	15e74 <datetime_parse+0x174>
   15ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ef8:	e7bc      	b.n	15e74 <datetime_parse+0x174>
   15efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15efe:	e7b9      	b.n	15e74 <datetime_parse+0x174>

00015f00 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   15f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f02:	b08f      	sub	sp, #60	; 0x3c
   15f04:	460e      	mov	r6, r1
   15f06:	4617      	mov	r7, r2
   15f08:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   15f0a:	aa06      	add	r2, sp, #24
   15f0c:	f7ff fe58 	bl	15bc0 <timeval_to_clocktime>
    if (rc != 0) {
   15f10:	2800      	cmp	r0, #0
   15f12:	d147      	bne.n	15fa4 <datetime_format+0xa4>
   15f14:	4605      	mov	r5, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   15f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15f18:	9305      	str	r3, [sp, #20]
   15f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15f1c:	9304      	str	r3, [sp, #16]
   15f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15f20:	9303      	str	r3, [sp, #12]
   15f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15f24:	9302      	str	r3, [sp, #8]
   15f26:	9b08      	ldr	r3, [sp, #32]
   15f28:	9301      	str	r3, [sp, #4]
   15f2a:	9b07      	ldr	r3, [sp, #28]
   15f2c:	9300      	str	r3, [sp, #0]
   15f2e:	9b06      	ldr	r3, [sp, #24]
   15f30:	4a24      	ldr	r2, [pc, #144]	; (15fc4 <datetime_format+0xc4>)
   15f32:	4621      	mov	r1, r4
   15f34:	4638      	mov	r0, r7
   15f36:	f7fb fedc 	bl	11cf2 <snprintf>
   15f3a:	4684      	mov	ip, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   15f3c:	1838      	adds	r0, r7, r0
    rlen -= rc;
   15f3e:	eba4 040c 	sub.w	r4, r4, ip
    if (rc < 0 || rlen <= 0) {
   15f42:	f1bc 0f00 	cmp.w	ip, #0
   15f46:	db30      	blt.n	15faa <datetime_format+0xaa>
   15f48:	2c00      	cmp	r4, #0
   15f4a:	dd31      	ble.n	15fb0 <datetime_format+0xb0>
        goto err;
    }

    if (tz != NULL) {
   15f4c:	b15e      	cbz	r6, 15f66 <datetime_format+0x66>
        minswest = tz->tz_minuteswest;
   15f4e:	f9b6 c000 	ldrsh.w	ip, [r6]
        if (tz->tz_dsttime) {
   15f52:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   15f56:	b10b      	cbz	r3, 15f5c <datetime_format+0x5c>
            minswest -= 60;
   15f58:	f1ac 0c3c 	sub.w	ip, ip, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   15f5c:	f1bc 0f00 	cmp.w	ip, #0
   15f60:	dd02      	ble.n	15f68 <datetime_format+0x68>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   15f62:	232d      	movs	r3, #45	; 0x2d
   15f64:	e003      	b.n	15f6e <datetime_format+0x6e>
        minswest = 0;
   15f66:	46ac      	mov	ip, r5
        minswest = -minswest;
   15f68:	f1cc 0c00 	rsb	ip, ip, #0
        sign = '+';
   15f6c:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   15f6e:	4a16      	ldr	r2, [pc, #88]	; (15fc8 <datetime_format+0xc8>)
   15f70:	fb82 120c 	smull	r1, r2, r2, ip
   15f74:	eb02 010c 	add.w	r1, r2, ip
   15f78:	ea4f 72ec 	mov.w	r2, ip, asr #31
   15f7c:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   15f80:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   15f84:	ebac 0181 	sub.w	r1, ip, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   15f88:	9101      	str	r1, [sp, #4]
   15f8a:	9200      	str	r2, [sp, #0]
   15f8c:	4a0f      	ldr	r2, [pc, #60]	; (15fcc <datetime_format+0xcc>)
   15f8e:	4621      	mov	r1, r4
   15f90:	f7fb feaf 	bl	11cf2 <snprintf>
    cp += rc;
    rlen -= rc;
   15f94:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   15f96:	2800      	cmp	r0, #0
   15f98:	db0d      	blt.n	15fb6 <datetime_format+0xb6>
   15f9a:	2c00      	cmp	r4, #0
   15f9c:	dd0e      	ble.n	15fbc <datetime_format+0xbc>

    return (0);

err:
    return (-1);
}
   15f9e:	4628      	mov	r0, r5
   15fa0:	b00f      	add	sp, #60	; 0x3c
   15fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (-1);
   15fa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15fa8:	e7f9      	b.n	15f9e <datetime_format+0x9e>
   15faa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15fae:	e7f6      	b.n	15f9e <datetime_format+0x9e>
   15fb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15fb4:	e7f3      	b.n	15f9e <datetime_format+0x9e>
   15fb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15fba:	e7f0      	b.n	15f9e <datetime_format+0x9e>
   15fbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15fc0:	e7ed      	b.n	15f9e <datetime_format+0x9e>
   15fc2:	bf00      	nop
   15fc4:	00024528 	.word	0x00024528
   15fc8:	88888889 	.word	0x88888889
   15fcc:	0002454c 	.word	0x0002454c

00015fd0 <crc16_ccitt>:
    int counter;

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
   15fd0:	f04f 0c00 	mov.w	ip, #0
   15fd4:	4594      	cmp	ip, r2
   15fd6:	da11      	bge.n	15ffc <crc16_ccitt+0x2c>
{
   15fd8:	b410      	push	{r4}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   15fda:	f811 3b01 	ldrb.w	r3, [r1], #1
   15fde:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
   15fe2:	4c07      	ldr	r4, [pc, #28]	; (16000 <crc16_ccitt+0x30>)
   15fe4:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
   15fe8:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
   15fec:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   15fee:	f10c 0c01 	add.w	ip, ip, #1
   15ff2:	4594      	cmp	ip, r2
   15ff4:	dbf1      	blt.n	15fda <crc16_ccitt+0xa>
    }

    return crc;
}
   15ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
   15ffa:	4770      	bx	lr
   15ffc:	4770      	bx	lr
   15ffe:	bf00      	nop
   16000:	00024588 	.word	0x00024588

00016004 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   16004:	20ff      	movs	r0, #255	; 0xff
   16006:	4770      	bx	lr

00016008 <crc8_calc>:
crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   16008:	f04f 0c00 	mov.w	ip, #0
   1600c:	4594      	cmp	ip, r2
   1600e:	da16      	bge.n	1603e <crc8_calc+0x36>
{
   16010:	b410      	push	{r4}
		val ^= p[i];
   16012:	f811 300c 	ldrb.w	r3, [r1, ip]
   16016:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   16018:	0918      	lsrs	r0, r3, #4
   1601a:	4c09      	ldr	r4, [pc, #36]	; (16040 <crc8_calc+0x38>)
   1601c:	5620      	ldrsb	r0, [r4, r0]
   1601e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   16022:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   16024:	f3c0 1003 	ubfx	r0, r0, #4, #4
   16028:	5620      	ldrsb	r0, [r4, r0]
   1602a:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   1602e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   16030:	f10c 0c01 	add.w	ip, ip, #1
   16034:	4594      	cmp	ip, r2
   16036:	dbec      	blt.n	16012 <crc8_calc+0xa>
	}
	return val;
}
   16038:	f85d 4b04 	ldr.w	r4, [sp], #4
   1603c:	4770      	bx	lr
   1603e:	4770      	bx	lr
   16040:	00024788 	.word	0x00024788

00016044 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   16044:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   16046:	6803      	ldr	r3, [r0, #0]
   16048:	685b      	ldr	r3, [r3, #4]
   1604a:	4798      	blx	r3
}
   1604c:	bd08      	pop	{r3, pc}

0001604e <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   1604e:	b40e      	push	{r1, r2, r3}
   16050:	b500      	push	{lr}
   16052:	b082      	sub	sp, #8
   16054:	aa03      	add	r2, sp, #12
   16056:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   1605a:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   1605c:	f7ff fff2 	bl	16044 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   16060:	b002      	add	sp, #8
   16062:	f85d eb04 	ldr.w	lr, [sp], #4
   16066:	b003      	add	sp, #12
   16068:	4770      	bx	lr

0001606a <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   1606a:	b508      	push	{r3, lr}
   1606c:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   1606e:	4611      	mov	r1, r2
   16070:	f7fd faec 	bl	1364c <console_vprintf>
}
   16074:	bd08      	pop	{r3, pc}

00016076 <streamer_console_write>:
{
   16076:	b508      	push	{r3, lr}
   16078:	4608      	mov	r0, r1
    console_write(src, len);
   1607a:	4611      	mov	r1, r2
   1607c:	f7fd f8dc 	bl	13238 <console_write>
}
   16080:	2000      	movs	r0, #0
   16082:	bd08      	pop	{r3, pc}

00016084 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   16084:	4800      	ldr	r0, [pc, #0]	; (16088 <streamer_console_get+0x4>)
   16086:	4770      	bx	lr
   16088:	20001548 	.word	0x20001548

0001608c <sysinit_app>:
void nmgr_shell_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   1608c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1608e:	f7f7 fad9 	bl	d644 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   16092:	f008 fa5f 	bl	1e554 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   16096:	f7fe fdfb 	bl	14c90 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   1609a:	f7fd faaf 	bl	135fc <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   1609e:	f007 ff75 	bl	1df8c <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   160a2:	f008 fb3b 	bl	1e71c <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   160a6:	f009 fbf5 	bl	1f894 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   160aa:	f009 fa9f 	bl	1f5ec <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   160ae:	f009 fd69 	bl	1fb84 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   160b2:	f007 ff7b 	bl	1dfac <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   160b6:	f001 fc77 	bl	179a8 <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   160ba:	f7fa fabd 	bl	10638 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   160be:	f7fb f897 	bl	111f0 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   160c2:	f7f9 f941 	bl	f348 <tdma_pkg_init>
    /* 404.1: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   160c6:	f005 fd5d 	bl	1bb84 <uwb_rng_pkg_init>
    /* 404.2: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   160ca:	f006 fa67 	bl	1c59c <wcs_timescale_pkg_init>

    /*** Stage 411 */
    /* 411.0: nrng_pkg_init (lib/nrng) */
    nrng_pkg_init();
   160ce:	f003 f9d1 	bl	19474 <nrng_pkg_init>

    /*** Stage 414 */
    /* 414.0: twr_ss_nrng_pkg_init (lib/twr_ss_nrng) */
    twr_ss_nrng_pkg_init();
   160d2:	f005 f945 	bl	1b360 <twr_ss_nrng_pkg_init>

    /*** Stage 420 */
    /* 420.0: uwb_transport_pkg_init (lib/uwb_transport) */
    uwb_transport_pkg_init();
   160d6:	f7fa ff79 	bl	10fcc <uwb_transport_pkg_init>

    /*** Stage 500 */
    /* 500.0: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   160da:	f006 ff9d 	bl	1d018 <imgmgr_module_init>
    /* 500.1: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   160de:	f007 fc29 	bl	1d934 <nmgr_pkg_init>
    /* 500.2: shell_init (sys/shell) */
    shell_init();
   160e2:	f7fe fa03 	bl	144ec <shell_init>
    /* 500.3: split_app_init (boot/split) */
    split_app_init();
   160e6:	f000 f807 	bl	160f8 <split_app_init>
    /* 500.4: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   160ea:	f7ff f9b7 	bl	1545c <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: nmgr_shell_pkg_init (mgmt/newtmgr/transport/nmgr_shell) */
    nmgr_shell_pkg_init();
   160ee:	f007 fec3 	bl	1de78 <nmgr_shell_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
   160f2:	f005 fda3 	bl	1bc3c <uwb_rng_pkg_init2>
}
   160f6:	bd08      	pop	{r3, pc}

000160f8 <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   160f8:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   160fa:	4b09      	ldr	r3, [pc, #36]	; (16120 <split_app_init+0x28>)
   160fc:	781b      	ldrb	r3, [r3, #0]
   160fe:	b11b      	cbz	r3, 16108 <split_app_init+0x10>

    rc = split_conf_init();
   16100:	f000 f89e 	bl	16240 <split_conf_init>
    assert(rc == 0);
   16104:	b928      	cbnz	r0, 16112 <split_app_init+0x1a>
}
   16106:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16108:	461a      	mov	r2, r3
   1610a:	4619      	mov	r1, r3
   1610c:	4618      	mov	r0, r3
   1610e:	f7f7 f927 	bl	d360 <__assert_func>
    assert(rc == 0);
   16112:	2300      	movs	r3, #0
   16114:	461a      	mov	r2, r3
   16116:	4619      	mov	r1, r3
   16118:	4618      	mov	r0, r3
   1611a:	f7f7 f921 	bl	d360 <__assert_func>
   1611e:	bf00      	nop
   16120:	20006ca8 	.word	0x20006ca8

00016124 <split_check_status>:

split_status_t
split_check_status(void)
{
   16124:	b500      	push	{lr}
   16126:	b083      	sub	sp, #12
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   16128:	aa01      	add	r2, sp, #4
   1612a:	2101      	movs	r1, #1
   1612c:	2000      	movs	r0, #0
   1612e:	f00a f873 	bl	20218 <split_go>
    switch (rc) {
   16132:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16136:	d009      	beq.n	1614c <split_check_status+0x28>
   16138:	b150      	cbz	r0, 16150 <split_check_status+0x2c>
   1613a:	f110 0f02 	cmn.w	r0, #2
   1613e:	d00b      	beq.n	16158 <split_check_status+0x34>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   16140:	2300      	movs	r3, #0
   16142:	461a      	mov	r2, r3
   16144:	4619      	mov	r1, r3
   16146:	4618      	mov	r0, r3
   16148:	f7f7 f90a 	bl	d360 <__assert_func>
        return SPLIT_STATUS_NOT_MATCHING;
   1614c:	2001      	movs	r0, #1
   1614e:	e000      	b.n	16152 <split_check_status+0x2e>
        return SPLIT_STATUS_MATCHING;
   16150:	2002      	movs	r0, #2
        return SPLIT_STATUS_INVALID;
    }
}
   16152:	b003      	add	sp, #12
   16154:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (rc) {
   16158:	2000      	movs	r0, #0
   1615a:	e7fa      	b.n	16152 <split_check_status+0x2e>

0001615c <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   1615c:	4b01      	ldr	r3, [pc, #4]	; (16164 <split_mode_get+0x8>)
   1615e:	7818      	ldrb	r0, [r3, #0]
   16160:	4770      	bx	lr
   16162:	bf00      	nop
   16164:	20006cc9 	.word	0x20006cc9

00016168 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   16168:	4b01      	ldr	r3, [pc, #4]	; (16170 <split_app_active_get+0x8>)
   1616a:	f993 0000 	ldrsb.w	r0, [r3]
   1616e:	4770      	bx	lr
   16170:	20006cc8 	.word	0x20006cc8

00016174 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   16174:	2803      	cmp	r0, #3
   16176:	d803      	bhi.n	16180 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   16178:	4b03      	ldr	r3, [pc, #12]	; (16188 <split_mode_set+0x14>)
   1617a:	7018      	strb	r0, [r3, #0]
    return 0;
   1617c:	2000      	movs	r0, #0
   1617e:	4770      	bx	lr
        return SYS_EINVAL;
   16180:	f06f 0001 	mvn.w	r0, #1
}
   16184:	4770      	bx	lr
   16186:	bf00      	nop
   16188:	20006cc9 	.word	0x20006cc9

0001618c <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   1618c:	2000      	movs	r0, #0
   1618e:	4770      	bx	lr

00016190 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   16190:	b510      	push	{r4, lr}
   16192:	b082      	sub	sp, #8
   16194:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   16196:	f7ff ffe1 	bl	1615c <split_mode_get>
   1619a:	f88d 0007 	strb.w	r0, [sp, #7]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   1619e:	2304      	movs	r3, #4
   161a0:	466a      	mov	r2, sp
   161a2:	f10d 0107 	add.w	r1, sp, #7
   161a6:	2002      	movs	r0, #2
   161a8:	f7fc fb56 	bl	12858 <conf_str_from_value>
    func("split/status", buf);
   161ac:	4669      	mov	r1, sp
   161ae:	4802      	ldr	r0, [pc, #8]	; (161b8 <split_conf_export+0x28>)
   161b0:	47a0      	blx	r4
    return 0;
}
   161b2:	2000      	movs	r0, #0
   161b4:	b002      	add	sp, #8
   161b6:	bd10      	pop	{r4, pc}
   161b8:	000247c0 	.word	0x000247c0

000161bc <split_conf_get>:
    if (argc == 1) {
   161bc:	2801      	cmp	r0, #1
   161be:	d119      	bne.n	161f4 <split_conf_get+0x38>
{
   161c0:	b530      	push	{r4, r5, lr}
   161c2:	b083      	sub	sp, #12
   161c4:	468c      	mov	ip, r1
   161c6:	4614      	mov	r4, r2
   161c8:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "status")) {
   161ca:	490b      	ldr	r1, [pc, #44]	; (161f8 <split_conf_get+0x3c>)
   161cc:	f8dc 0000 	ldr.w	r0, [ip]
   161d0:	f7fb f980 	bl	114d4 <strcmp>
   161d4:	b110      	cbz	r0, 161dc <split_conf_get+0x20>
    return NULL;
   161d6:	2000      	movs	r0, #0
}
   161d8:	b003      	add	sp, #12
   161da:	bd30      	pop	{r4, r5, pc}
            split_mode = split_mode_get();
   161dc:	f7ff ffbe 	bl	1615c <split_mode_get>
   161e0:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   161e4:	462b      	mov	r3, r5
   161e6:	4622      	mov	r2, r4
   161e8:	f10d 0107 	add.w	r1, sp, #7
   161ec:	2002      	movs	r0, #2
   161ee:	f7fc fb33 	bl	12858 <conf_str_from_value>
   161f2:	e7f1      	b.n	161d8 <split_conf_get+0x1c>
    return NULL;
   161f4:	2000      	movs	r0, #0
}
   161f6:	4770      	bx	lr
   161f8:	000247d0 	.word	0x000247d0

000161fc <split_conf_set>:
    if (argc == 1) {
   161fc:	2801      	cmp	r0, #1
   161fe:	d117      	bne.n	16230 <split_conf_set+0x34>
{
   16200:	b510      	push	{r4, lr}
   16202:	b082      	sub	sp, #8
   16204:	460b      	mov	r3, r1
   16206:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "status")) {
   16208:	490c      	ldr	r1, [pc, #48]	; (1623c <split_conf_set+0x40>)
   1620a:	6818      	ldr	r0, [r3, #0]
   1620c:	f7fb f962 	bl	114d4 <strcmp>
   16210:	b988      	cbnz	r0, 16236 <split_conf_set+0x3a>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   16212:	2301      	movs	r3, #1
   16214:	f10d 0207 	add.w	r2, sp, #7
   16218:	2102      	movs	r1, #2
   1621a:	4620      	mov	r0, r4
   1621c:	f7fc fab7 	bl	1278e <conf_value_from_str>
            if (rc != 0) {
   16220:	b108      	cbz	r0, 16226 <split_conf_set+0x2a>
}
   16222:	b002      	add	sp, #8
   16224:	bd10      	pop	{r4, pc}
            rc = split_mode_set(split_mode);
   16226:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1622a:	f7ff ffa3 	bl	16174 <split_mode_set>
            if (rc != 0) {
   1622e:	e7f8      	b.n	16222 <split_conf_set+0x26>
    return -1;
   16230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16234:	4770      	bx	lr
    return -1;
   16236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1623a:	e7f2      	b.n	16222 <split_conf_set+0x26>
   1623c:	000247d0 	.word	0x000247d0

00016240 <split_conf_init>:
{
   16240:	b508      	push	{r3, lr}
    rc = conf_register(&split_conf_handler);
   16242:	4802      	ldr	r0, [pc, #8]	; (1624c <split_conf_init+0xc>)
   16244:	f7fc fa5e 	bl	12704 <conf_register>
}
   16248:	bd08      	pop	{r3, pc}
   1624a:	bf00      	nop
   1624c:	2000154c 	.word	0x2000154c

00016250 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   16250:	b500      	push	{lr}
   16252:	b085      	sub	sp, #20
   16254:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   16258:	b2c0      	uxtb	r0, r0
   1625a:	f7ff ff8b 	bl	16174 <split_mode_set>
    if (rc != 0) {
   1625e:	b110      	cbz	r0, 16266 <split_write_split+0x16>

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
        return -1;
    }
    return conf_save_one("split/status", str);
}
   16260:	b005      	add	sp, #20
   16262:	f85d fb04 	ldr.w	pc, [sp], #4
    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   16266:	2305      	movs	r3, #5
   16268:	aa02      	add	r2, sp, #8
   1626a:	f10d 0107 	add.w	r1, sp, #7
   1626e:	2002      	movs	r0, #2
   16270:	f7fc faf2 	bl	12858 <conf_str_from_value>
   16274:	b120      	cbz	r0, 16280 <split_write_split+0x30>
    return conf_save_one("split/status", str);
   16276:	a902      	add	r1, sp, #8
   16278:	4803      	ldr	r0, [pc, #12]	; (16288 <split_write_split+0x38>)
   1627a:	f7fc f98f 	bl	1259c <conf_save_one>
   1627e:	e7ef      	b.n	16260 <split_write_split+0x10>
        return -1;
   16280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16284:	e7ec      	b.n	16260 <split_write_split+0x10>
   16286:	bf00      	nop
   16288:	000247c0 	.word	0x000247c0

0001628c <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   1628c:	4b06      	ldr	r3, [pc, #24]	; (162a8 <pos+0x1c>)
   1628e:	e000      	b.n	16292 <pos+0x6>
   16290:	3301      	adds	r3, #1
   16292:	781a      	ldrb	r2, [r3, #0]
   16294:	b122      	cbz	r2, 162a0 <pos+0x14>
        if (*p == c)
   16296:	4282      	cmp	r2, r0
   16298:	d1fa      	bne.n	16290 <pos+0x4>
            return p - base64_chars;
   1629a:	4803      	ldr	r0, [pc, #12]	; (162a8 <pos+0x1c>)
   1629c:	1a18      	subs	r0, r3, r0
   1629e:	4770      	bx	lr
    return -1;
   162a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   162a4:	4770      	bx	lr
   162a6:	bf00      	nop
   162a8:	000247e0 	.word	0x000247e0

000162ac <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   162ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162ae:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   162b0:	f006 fa16 	bl	1c6e0 <strlen>
   162b4:	2803      	cmp	r0, #3
   162b6:	d916      	bls.n	162e6 <token_decode+0x3a>
    int marker = 0;
   162b8:	2600      	movs	r6, #0
    unsigned int val = 0;
   162ba:	4635      	mov	r5, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   162bc:	4634      	mov	r4, r6
   162be:	e001      	b.n	162c4 <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   162c0:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   162c2:	3401      	adds	r4, #1
   162c4:	2c03      	cmp	r4, #3
   162c6:	dc09      	bgt.n	162dc <token_decode+0x30>
        val *= 64;
   162c8:	01ad      	lsls	r5, r5, #6
        if (token[i] == '=')
   162ca:	5d38      	ldrb	r0, [r7, r4]
   162cc:	283d      	cmp	r0, #61	; 0x3d
   162ce:	d0f7      	beq.n	162c0 <token_decode+0x14>
        else if (marker > 0)
   162d0:	2e00      	cmp	r6, #0
   162d2:	dc0b      	bgt.n	162ec <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   162d4:	f7ff ffda 	bl	1628c <pos>
   162d8:	4405      	add	r5, r0
   162da:	e7f2      	b.n	162c2 <token_decode+0x16>
    }
    if (marker > 2)
   162dc:	2e02      	cmp	r6, #2
   162de:	dc08      	bgt.n	162f2 <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   162e0:	ea45 6006 	orr.w	r0, r5, r6, lsl #24
}
   162e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   162e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162ea:	e7fb      	b.n	162e4 <token_decode+0x38>
            return DECODE_ERROR;
   162ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162f0:	e7f8      	b.n	162e4 <token_decode+0x38>
        return DECODE_ERROR;
   162f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162f6:	e7f5      	b.n	162e4 <token_decode+0x38>

000162f8 <base64_encode>:
{
   162f8:	b570      	push	{r4, r5, r6, lr}
   162fa:	4615      	mov	r5, r2
    p = s;
   162fc:	4614      	mov	r4, r2
    last = NULL;
   162fe:	2600      	movs	r6, #0
    i = 0;
   16300:	4632      	mov	r2, r6
    while (i < size) {
   16302:	e021      	b.n	16348 <base64_encode+0x50>
        i++;
   16304:	1c96      	adds	r6, r2, #2
        c *= 256;
   16306:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   1630a:	42b1      	cmp	r1, r6
   1630c:	dd01      	ble.n	16312 <base64_encode+0x1a>
            c += q[i];
   1630e:	5d86      	ldrb	r6, [r0, r6]
   16310:	44b4      	add	ip, r6
        i++;
   16312:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   16314:	f3cc 4e85 	ubfx	lr, ip, #18, #6
   16318:	4e1b      	ldr	r6, [pc, #108]	; (16388 <base64_encode+0x90>)
   1631a:	f816 e00e 	ldrb.w	lr, [r6, lr]
   1631e:	f884 e000 	strb.w	lr, [r4]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   16322:	f3cc 3e05 	ubfx	lr, ip, #12, #6
   16326:	f816 e00e 	ldrb.w	lr, [r6, lr]
   1632a:	f884 e001 	strb.w	lr, [r4, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   1632e:	f3cc 1e85 	ubfx	lr, ip, #6, #6
   16332:	f816 e00e 	ldrb.w	lr, [r6, lr]
   16336:	f884 e002 	strb.w	lr, [r4, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   1633a:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   1633e:	f816 600c 	ldrb.w	r6, [r6, ip]
   16342:	70e6      	strb	r6, [r4, #3]
        last = p;
   16344:	4626      	mov	r6, r4
        p += 4;
   16346:	3404      	adds	r4, #4
    while (i < size) {
   16348:	428a      	cmp	r2, r1
   1634a:	da09      	bge.n	16360 <base64_encode+0x68>
        c = q[i++];
   1634c:	1c56      	adds	r6, r2, #1
   1634e:	f810 c002 	ldrb.w	ip, [r0, r2]
        c *= 256;
   16352:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   16356:	42b1      	cmp	r1, r6
   16358:	ddd4      	ble.n	16304 <base64_encode+0xc>
            c += q[i];
   1635a:	5d86      	ldrb	r6, [r0, r6]
   1635c:	44b4      	add	ip, r6
   1635e:	e7d1      	b.n	16304 <base64_encode+0xc>
    if (last) {
   16360:	b136      	cbz	r6, 16370 <base64_encode+0x78>
        diff = i - size;
   16362:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   16364:	2a00      	cmp	r2, #0
   16366:	dd03      	ble.n	16370 <base64_encode+0x78>
            if (should_pad) {
   16368:	b933      	cbnz	r3, 16378 <base64_encode+0x80>
                p = last + (4 - diff);
   1636a:	f1c2 0304 	rsb	r3, r2, #4
   1636e:	18f4      	adds	r4, r6, r3
    *p = 0;
   16370:	2300      	movs	r3, #0
   16372:	7023      	strb	r3, [r4, #0]
}
   16374:	1b60      	subs	r0, r4, r5
   16376:	bd70      	pop	{r4, r5, r6, pc}
                memset(last + (4 - diff), '=', diff);
   16378:	f1c2 0004 	rsb	r0, r2, #4
   1637c:	213d      	movs	r1, #61	; 0x3d
   1637e:	4430      	add	r0, r6
   16380:	f7fb f887 	bl	11492 <memset>
   16384:	e7f4      	b.n	16370 <base64_encode+0x78>
   16386:	bf00      	nop
   16388:	000247e0 	.word	0x000247e0

0001638c <base64_pad>:
{
   1638c:	b510      	push	{r4, lr}
    remainder = len % 4;
   1638e:	424b      	negs	r3, r1
   16390:	f001 0203 	and.w	r2, r1, #3
   16394:	f003 0303 	and.w	r3, r3, #3
   16398:	bf58      	it	pl
   1639a:	425a      	negpl	r2, r3
    if (remainder == 0) {
   1639c:	f011 0f03 	tst.w	r1, #3
   163a0:	d102      	bne.n	163a8 <base64_pad+0x1c>
        return (0);
   163a2:	2400      	movs	r4, #0
}
   163a4:	4620      	mov	r0, r4
   163a6:	bd10      	pop	{r4, pc}
    memset(buf, '=', 4 - remainder);
   163a8:	f1c2 0404 	rsb	r4, r2, #4
   163ac:	4622      	mov	r2, r4
   163ae:	213d      	movs	r1, #61	; 0x3d
   163b0:	f7fb f86f 	bl	11492 <memset>
    return (4 - remainder);
   163b4:	e7f6      	b.n	163a4 <base64_pad+0x18>
	...

000163b8 <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   163b8:	b570      	push	{r4, r5, r6, lr}
   163ba:	4604      	mov	r4, r0
   163bc:	460d      	mov	r5, r1
    const char *p;
    unsigned char *q;

    q = data;
   163be:	460e      	mov	r6, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   163c0:	e005      	b.n	163ce <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   163c2:	0a02      	lsrs	r2, r0, #8
   163c4:	1cb3      	adds	r3, r6, #2
   163c6:	7072      	strb	r2, [r6, #1]
   163c8:	e016      	b.n	163f8 <base64_decode+0x40>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   163ca:	3404      	adds	r4, #4
   163cc:	461e      	mov	r6, r3
   163ce:	7821      	ldrb	r1, [r4, #0]
   163d0:	b1b9      	cbz	r1, 16402 <base64_decode+0x4a>
   163d2:	293d      	cmp	r1, #61	; 0x3d
   163d4:	d003      	beq.n	163de <base64_decode+0x26>
   163d6:	480d      	ldr	r0, [pc, #52]	; (1640c <base64_decode+0x54>)
   163d8:	f006 f96c 	bl	1c6b4 <strchr>
   163dc:	b188      	cbz	r0, 16402 <base64_decode+0x4a>
        unsigned int val = token_decode(p);
   163de:	4620      	mov	r0, r4
   163e0:	f7ff ff64 	bl	162ac <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   163e4:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   163e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   163ea:	d00c      	beq.n	16406 <base64_decode+0x4e>
        *q++ = (val >> 16) & 0xff;
   163ec:	0c02      	lsrs	r2, r0, #16
   163ee:	4633      	mov	r3, r6
   163f0:	f803 2b01 	strb.w	r2, [r3], #1
        if (marker < 2)
   163f4:	2901      	cmp	r1, #1
   163f6:	d9e4      	bls.n	163c2 <base64_decode+0xa>
        if (marker < 1)
   163f8:	2900      	cmp	r1, #0
   163fa:	d1e6      	bne.n	163ca <base64_decode+0x12>
            *q++ = val & 0xff;
   163fc:	f803 0b01 	strb.w	r0, [r3], #1
   16400:	e7e3      	b.n	163ca <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   16402:	1b70      	subs	r0, r6, r5
}
   16404:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   16406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1640a:	e7fb      	b.n	16404 <base64_decode+0x4c>
   1640c:	000247e0 	.word	0x000247e0

00016410 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   16410:	3901      	subs	r1, #1
   16412:	290a      	cmp	r1, #10
   16414:	d828      	bhi.n	16468 <valid_attr_type+0x58>
   16416:	e8df f001 	tbb	[pc, r1]
   1641a:	0606      	.short	0x0606
   1641c:	13110d09 	.word	0x13110d09
   16420:	271f1b17 	.word	0x271f1b17
   16424:	23          	.byte	0x23
   16425:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   16426:	b308      	cbz	r0, 1646c <valid_attr_type+0x5c>
        }
        break;
    default:
        break;
    }
    return 0;
   16428:	2000      	movs	r0, #0
   1642a:	4770      	bx	lr
        if (ct == CborByteStringType) {
   1642c:	2840      	cmp	r0, #64	; 0x40
   1642e:	d01f      	beq.n	16470 <valid_attr_type+0x60>
    return 0;
   16430:	2000      	movs	r0, #0
   16432:	4770      	bx	lr
        if (ct == CborTextStringType) {
   16434:	2860      	cmp	r0, #96	; 0x60
   16436:	d01d      	beq.n	16474 <valid_attr_type+0x64>
    return 0;
   16438:	2000      	movs	r0, #0
   1643a:	4770      	bx	lr
        if (ct == CborBooleanType) {
   1643c:	28f5      	cmp	r0, #245	; 0xf5
   1643e:	d01b      	beq.n	16478 <valid_attr_type+0x68>
        if (ct == CborFloatType) {
   16440:	28fa      	cmp	r0, #250	; 0xfa
   16442:	d01b      	beq.n	1647c <valid_attr_type+0x6c>
    return 0;
   16444:	2000      	movs	r0, #0
   16446:	4770      	bx	lr
        if (ct == CborDoubleType) {
   16448:	28fb      	cmp	r0, #251	; 0xfb
   1644a:	d019      	beq.n	16480 <valid_attr_type+0x70>
    return 0;
   1644c:	2000      	movs	r0, #0
   1644e:	4770      	bx	lr
        if (ct == CborArrayType) {
   16450:	2880      	cmp	r0, #128	; 0x80
   16452:	d017      	beq.n	16484 <valid_attr_type+0x74>
    return 0;
   16454:	2000      	movs	r0, #0
   16456:	4770      	bx	lr
        if (ct == CborMapType) {
   16458:	28a0      	cmp	r0, #160	; 0xa0
   1645a:	d015      	beq.n	16488 <valid_attr_type+0x78>
    return 0;
   1645c:	2000      	movs	r0, #0
   1645e:	4770      	bx	lr
        if (ct == CborNullType) {
   16460:	28f6      	cmp	r0, #246	; 0xf6
   16462:	d013      	beq.n	1648c <valid_attr_type+0x7c>
    return 0;
   16464:	2000      	movs	r0, #0
   16466:	4770      	bx	lr
    switch (at) {
   16468:	2000      	movs	r0, #0
   1646a:	4770      	bx	lr
            return 1;
   1646c:	2001      	movs	r0, #1
   1646e:	4770      	bx	lr
            return 1;
   16470:	2001      	movs	r0, #1
   16472:	4770      	bx	lr
            return 1;
   16474:	2001      	movs	r0, #1
   16476:	4770      	bx	lr
            return 1;
   16478:	2001      	movs	r0, #1
   1647a:	4770      	bx	lr
            return 1;
   1647c:	2001      	movs	r0, #1
   1647e:	4770      	bx	lr
            return 1;
   16480:	2001      	movs	r0, #1
   16482:	4770      	bx	lr
            return 1;
   16484:	2001      	movs	r0, #1
   16486:	4770      	bx	lr
            return 1;
   16488:	2001      	movs	r0, #1
   1648a:	4770      	bx	lr
            return 1;
   1648c:	2001      	movs	r0, #1
}
   1648e:	4770      	bx	lr

00016490 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   16490:	460b      	mov	r3, r1
   16492:	b111      	cbz	r1, 1649a <cbor_target_address+0xa>
   16494:	7809      	ldrb	r1, [r1, #0]
   16496:	290a      	cmp	r1, #10
   16498:	d020      	beq.n	164dc <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   1649a:	7903      	ldrb	r3, [r0, #4]
   1649c:	3b01      	subs	r3, #1
   1649e:	2b06      	cmp	r3, #6
   164a0:	d823      	bhi.n	164ea <cbor_target_address+0x5a>
   164a2:	e8df f003 	tbb	[pc, r3]
   164a6:	0804      	.short	0x0804
   164a8:	0c181614 	.word	0x0c181614
   164ac:	10          	.byte	0x10
   164ad:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   164ae:	6880      	ldr	r0, [r0, #8]
   164b0:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   164b4:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   164b6:	6880      	ldr	r0, [r0, #8]
   164b8:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   164bc:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   164be:	6880      	ldr	r0, [r0, #8]
   164c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   164c4:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   164c6:	6880      	ldr	r0, [r0, #8]
   164c8:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   164cc:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   164ce:	6880      	ldr	r0, [r0, #8]
            break;
   164d0:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   164d2:	6880      	ldr	r0, [r0, #8]
            break;
   164d4:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   164d6:	6880      	ldr	r0, [r0, #8]
   164d8:	4410      	add	r0, r2
            break;
   164da:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   164dc:	6899      	ldr	r1, [r3, #8]
   164de:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   164e0:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   164e2:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   164e6:	4408      	add	r0, r1
   164e8:	4770      	bx	lr
        switch (cursor->type) {
   164ea:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   164ec:	4770      	bx	lr
	...

000164f0 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   164f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164f4:	b08b      	sub	sp, #44	; 0x2c
   164f6:	9001      	str	r0, [sp, #4]
   164f8:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   164fa:	a906      	add	r1, sp, #24
   164fc:	f000 ff59 	bl	173b2 <cbor_value_enter_container>
    if (err) {
   16500:	4605      	mov	r5, r0
   16502:	2800      	cmp	r0, #0
   16504:	f040 80fd 	bne.w	16702 <cbor_read_array+0x212>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   16508:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   1650c:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   1650e:	463e      	mov	r6, r7
   16510:	e0be      	b.n	16690 <cbor_read_array+0x1a0>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   16512:	6862      	ldr	r2, [r4, #4]
CBOR_INLINE_API bool cbor_value_is_undefined(const CborValue *value)
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
   16514:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
{
    assert(cbor_value_is_boolean(value));
   16518:	2bf5      	cmp	r3, #245	; 0xf5
   1651a:	d106      	bne.n	1652a <cbor_read_array+0x3a>
    *result = !!value->extra;
   1651c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   16520:	3b00      	subs	r3, #0
   16522:	bf18      	it	ne
   16524:	2301      	movne	r3, #1
   16526:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   16528:	e0a7      	b.n	1667a <cbor_read_array+0x18a>
    assert(cbor_value_is_boolean(value));
   1652a:	2300      	movs	r3, #0
   1652c:	461a      	mov	r2, r3
   1652e:	4619      	mov	r1, r3
   16530:	4618      	mov	r0, r3
   16532:	f7f6 ff15 	bl	d360 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   16536:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1653a:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1653e:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
   16542:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
   16546:	b9c3      	cbnz	r3, 1657a <cbor_read_array+0x8a>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   16548:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   1654c:	f013 0f01 	tst.w	r3, #1
   16550:	d119      	bne.n	16586 <cbor_read_array+0x96>
   16552:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   16556:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   16558:	f849 000b 	str.w	r0, [r9, fp]
   1655c:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   16560:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16564:	f013 0f02 	tst.w	r3, #2
   16568:	f000 8087 	beq.w	1667a <cbor_read_array+0x18a>
        *result = -*result - 1;
   1656c:	43c0      	mvns	r0, r0
   1656e:	43c9      	mvns	r1, r1
   16570:	f849 000b 	str.w	r0, [r9, fp]
   16574:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   16578:	e07f      	b.n	1667a <cbor_read_array+0x18a>
    assert(cbor_value_is_integer(value));
   1657a:	2300      	movs	r3, #0
   1657c:	461a      	mov	r2, r3
   1657e:	4619      	mov	r1, r3
   16580:	4618      	mov	r0, r3
   16582:	f7f6 feed 	bl	d360 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   16586:	a806      	add	r0, sp, #24
   16588:	f000 fec5 	bl	17316 <_cbor_value_decode_int64_internal>
   1658c:	e7e4      	b.n	16558 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   1658e:	f8d4 9004 	ldr.w	r9, [r4, #4]
   16592:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   16596:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   1659a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1659e:	b933      	cbnz	r3, 165ae <cbor_read_array+0xbe>
   165a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   165a4:	f013 0f02 	tst.w	r3, #2
   165a8:	d010      	beq.n	165cc <cbor_read_array+0xdc>
   165aa:	2300      	movs	r3, #0
   165ac:	e000      	b.n	165b0 <cbor_read_array+0xc0>
   165ae:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   165b0:	b173      	cbz	r3, 165d0 <cbor_read_array+0xe0>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   165b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   165b6:	f013 0f01 	tst.w	r3, #1
   165ba:	d10e      	bne.n	165da <cbor_read_array+0xea>
   165bc:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   165c0:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   165c2:	f849 000b 	str.w	r0, [r9, fp]
   165c6:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   165ca:	e056      	b.n	1667a <cbor_read_array+0x18a>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   165cc:	2301      	movs	r3, #1
   165ce:	e7ef      	b.n	165b0 <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   165d0:	461a      	mov	r2, r3
   165d2:	4619      	mov	r1, r3
   165d4:	4618      	mov	r0, r3
   165d6:	f7f6 fec3 	bl	d360 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   165da:	a806      	add	r0, sp, #24
   165dc:	f000 fe9b 	bl	17316 <_cbor_value_decode_int64_internal>
   165e0:	e7ef      	b.n	165c2 <cbor_read_array+0xd2>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   165e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
   165e6:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   165ea:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   165ee:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   165f2:	2bfb      	cmp	r3, #251	; 0xfb
   165f4:	d110      	bne.n	16618 <cbor_read_array+0x128>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   165f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   165fa:	f013 0f01 	tst.w	r3, #1
   165fe:	d011      	beq.n	16624 <cbor_read_array+0x134>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   16600:	a806      	add	r0, sp, #24
   16602:	f000 fe88 	bl	17316 <_cbor_value_decode_int64_internal>
   16606:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   1660a:	ab02      	add	r3, sp, #8
   1660c:	cb03      	ldmia	r3!, {r0, r1}
   1660e:	f849 000b 	str.w	r0, [r9, fp]
   16612:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   16616:	e030      	b.n	1667a <cbor_read_array+0x18a>
    assert(cbor_value_is_double(value));
   16618:	2300      	movs	r3, #0
   1661a:	461a      	mov	r2, r3
   1661c:	4619      	mov	r1, r3
   1661e:	4618      	mov	r0, r3
   16620:	f7f6 fe9e 	bl	d360 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   16624:	2300      	movs	r3, #0
   16626:	461a      	mov	r2, r3
   16628:	4619      	mov	r1, r3
   1662a:	4618      	mov	r0, r3
   1662c:	f7f6 fe98 	bl	d360 <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   16630:	68e3      	ldr	r3, [r4, #12]
   16632:	68a2      	ldr	r2, [r4, #8]
   16634:	eba8 0202 	sub.w	r2, r8, r2
   16638:	1a9b      	subs	r3, r3, r2
   1663a:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   1663c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   16640:	2b60      	cmp	r3, #96	; 0x60
   16642:	d10d      	bne.n	16660 <cbor_read_array+0x170>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   16644:	2300      	movs	r3, #0
   16646:	aa05      	add	r2, sp, #20
   16648:	4641      	mov	r1, r8
   1664a:	a806      	add	r0, sp, #24
   1664c:	f000 ff66 	bl	1751c <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   16650:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   16652:	6863      	ldr	r3, [r4, #4]
   16654:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   16658:	9b05      	ldr	r3, [sp, #20]
   1665a:	3301      	adds	r3, #1
   1665c:	4498      	add	r8, r3
            break;
   1665e:	e00c      	b.n	1667a <cbor_read_array+0x18a>
    assert(cbor_value_is_text_string(value));
   16660:	2300      	movs	r3, #0
   16662:	461a      	mov	r2, r3
   16664:	4619      	mov	r1, r3
   16666:	4618      	mov	r0, r3
   16668:	f7f6 fe7a 	bl	d360 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   1666c:	4633      	mov	r3, r6
   1666e:	4622      	mov	r2, r4
   16670:	6861      	ldr	r1, [r4, #4]
   16672:	a806      	add	r0, sp, #24
   16674:	f000 f848 	bl	16708 <cbor_internal_read_object>
   16678:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   1667a:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   1667c:	7823      	ldrb	r3, [r4, #0]
   1667e:	2b0a      	cmp	r3, #10
   16680:	d127      	bne.n	166d2 <cbor_read_array+0x1e2>
{ return value && value->type != CborInvalidType; }
   16682:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   16686:	2bff      	cmp	r3, #255	; 0xff
   16688:	d028      	beq.n	166dc <cbor_read_array+0x1ec>
   1668a:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   1668c:	b343      	cbz	r3, 166e0 <cbor_read_array+0x1f0>
    for (off = 0; off < arr->maxlen; off++) {
   1668e:	3601      	adds	r6, #1
   16690:	6963      	ldr	r3, [r4, #20]
   16692:	42b3      	cmp	r3, r6
   16694:	dd24      	ble.n	166e0 <cbor_read_array+0x1f0>
        switch (arr->element_type) {
   16696:	7823      	ldrb	r3, [r4, #0]
   16698:	3b01      	subs	r3, #1
   1669a:	2b09      	cmp	r3, #9
   1669c:	d816      	bhi.n	166cc <cbor_read_array+0x1dc>
   1669e:	a201      	add	r2, pc, #4	; (adr r2, 166a4 <cbor_read_array+0x1b4>)
   166a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   166a4:	00016537 	.word	0x00016537
   166a8:	0001658f 	.word	0x0001658f
   166ac:	000166cd 	.word	0x000166cd
   166b0:	00016631 	.word	0x00016631
   166b4:	00016513 	.word	0x00016513
   166b8:	000165e3 	.word	0x000165e3
   166bc:	000165e3 	.word	0x000165e3
   166c0:	000166cd 	.word	0x000166cd
   166c4:	000166cd 	.word	0x000166cd
   166c8:	0001666d 	.word	0x0001666d
            err |= CborErrorIllegalType;
   166cc:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   166d0:	e7d3      	b.n	1667a <cbor_read_array+0x18a>
            err |= cbor_value_advance(&elem);
   166d2:	a806      	add	r0, sp, #24
   166d4:	f000 ff7f 	bl	175d6 <cbor_value_advance>
   166d8:	4305      	orrs	r5, r0
   166da:	e7d2      	b.n	16682 <cbor_read_array+0x192>
   166dc:	2300      	movs	r3, #0
   166de:	e7d5      	b.n	1668c <cbor_read_array+0x19c>
            break;
        }
    }
    if (arr->count) {
   166e0:	6923      	ldr	r3, [r4, #16]
   166e2:	b133      	cbz	r3, 166f2 <cbor_read_array+0x202>
        *arr->count = arrcount;
   166e4:	601f      	str	r7, [r3, #0]
   166e6:	e004      	b.n	166f2 <cbor_read_array+0x202>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   166e8:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   166ec:	a806      	add	r0, sp, #24
   166ee:	f000 ff72 	bl	175d6 <cbor_value_advance>
{ return it->remaining == 0; }
   166f2:	9b08      	ldr	r3, [sp, #32]
    while (!cbor_value_at_end(&elem)) {
   166f4:	2b00      	cmp	r3, #0
   166f6:	d1f7      	bne.n	166e8 <cbor_read_array+0x1f8>
    }
    err |= cbor_value_leave_container(value, &elem);
   166f8:	a906      	add	r1, sp, #24
   166fa:	9801      	ldr	r0, [sp, #4]
   166fc:	f000 feee 	bl	174dc <cbor_value_leave_container>
   16700:	4328      	orrs	r0, r5
    return err;
}
   16702:	b00b      	add	sp, #44	; 0x2c
   16704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016708 <cbor_internal_read_object>:
{
   16708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1670c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   16710:	9001      	str	r0, [sp, #4]
   16712:	9100      	str	r1, [sp, #0]
   16714:	4691      	mov	r9, r2
   16716:	469a      	mov	sl, r3
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   16718:	460c      	mov	r4, r1
   1671a:	e004      	b.n	16726 <cbor_internal_read_object+0x1e>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   1671c:	6a21      	ldr	r1, [r4, #32]
   1671e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16720:	6001      	str	r1, [r0, #0]
   16722:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   16724:	3430      	adds	r4, #48	; 0x30
   16726:	6827      	ldr	r7, [r4, #0]
   16728:	b38f      	cbz	r7, 1678e <cbor_internal_read_object+0x86>
        if (!cursor->nodefault) {
   1672a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1672e:	2b00      	cmp	r3, #0
   16730:	d1f8      	bne.n	16724 <cbor_internal_read_object+0x1c>
            lptr = cbor_target_address(cursor, parent, offset);
   16732:	4652      	mov	r2, sl
   16734:	4649      	mov	r1, r9
   16736:	4620      	mov	r0, r4
   16738:	f7ff feaa 	bl	16490 <cbor_target_address>
            if (lptr != NULL) {
   1673c:	2800      	cmp	r0, #0
   1673e:	d0f1      	beq.n	16724 <cbor_internal_read_object+0x1c>
                switch (cursor->type) {
   16740:	7923      	ldrb	r3, [r4, #4]
   16742:	3b01      	subs	r3, #1
   16744:	2b06      	cmp	r3, #6
   16746:	d8ed      	bhi.n	16724 <cbor_internal_read_object+0x1c>
   16748:	a101      	add	r1, pc, #4	; (adr r1, 16750 <cbor_internal_read_object+0x48>)
   1674a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1674e:	bf00      	nop
   16750:	0001671d 	.word	0x0001671d
   16754:	0001676d 	.word	0x0001676d
   16758:	00016725 	.word	0x00016725
   1675c:	00016725 	.word	0x00016725
   16760:	00016777 	.word	0x00016777
   16764:	0001677f 	.word	0x0001677f
   16768:	00016785 	.word	0x00016785
                    memcpy(lptr, &cursor->dflt.integer,
   1676c:	6a21      	ldr	r1, [r4, #32]
   1676e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16770:	6001      	str	r1, [r0, #0]
   16772:	6043      	str	r3, [r0, #4]
                    break;
   16774:	e7d6      	b.n	16724 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   16776:	f894 3020 	ldrb.w	r3, [r4, #32]
   1677a:	7003      	strb	r3, [r0, #0]
                    break;
   1677c:	e7d2      	b.n	16724 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   1677e:	6a23      	ldr	r3, [r4, #32]
   16780:	6003      	str	r3, [r0, #0]
                    break;
   16782:	e7cf      	b.n	16724 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   16784:	6a21      	ldr	r1, [r4, #32]
   16786:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16788:	6001      	str	r1, [r0, #0]
   1678a:	6043      	str	r3, [r0, #4]
                    break;
   1678c:	e7ca      	b.n	16724 <cbor_internal_read_object+0x1c>
{ return value->type == CborMapType; }
   1678e:	9801      	ldr	r0, [sp, #4]
   16790:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   16792:	2ba0      	cmp	r3, #160	; 0xa0
   16794:	d005      	beq.n	167a2 <cbor_internal_read_object+0x9a>
        return err;
   16796:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1679a:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   1679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   167a2:	a905      	add	r1, sp, #20
   167a4:	f000 fe05 	bl	173b2 <cbor_value_enter_container>
   167a8:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   167aa:	e140      	b.n	16a2e <cbor_internal_read_object+0x326>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   167ac:	a904      	add	r1, sp, #16
   167ae:	a805      	add	r0, sp, #20
   167b0:	f000 ff23 	bl	175fa <cbor_value_calculate_string_length>
   167b4:	b978      	cbnz	r0, 167d6 <cbor_internal_read_object+0xce>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   167b6:	9b04      	ldr	r3, [sp, #16]
   167b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   167bc:	d820      	bhi.n	16800 <cbor_internal_read_object+0xf8>
{ return value->type == CborTextStringType; }
   167be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   167c2:	2b60      	cmp	r3, #96	; 0x60
   167c4:	d11f      	bne.n	16806 <cbor_internal_read_object+0xfe>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   167c6:	2300      	movs	r3, #0
   167c8:	aa04      	add	r2, sp, #16
   167ca:	a909      	add	r1, sp, #36	; 0x24
   167cc:	a805      	add	r0, sp, #20
   167ce:	f000 fea5 	bl	1751c <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   167d2:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   167d6:	a805      	add	r0, sp, #20
   167d8:	f000 fefd 	bl	175d6 <cbor_value_advance>
   167dc:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   167e0:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   167e4:	2eff      	cmp	r6, #255	; 0xff
   167e6:	d014      	beq.n	16812 <cbor_internal_read_object+0x10a>
   167e8:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   167ea:	2b00      	cmp	r3, #0
   167ec:	f040 8131 	bne.w	16a52 <cbor_internal_read_object+0x34a>
                err |= CborErrorIllegalType;
   167f0:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   167f4:	f1b8 0f00 	cmp.w	r8, #0
   167f8:	f000 8130 	beq.w	16a5c <cbor_internal_read_object+0x354>
    return err;
   167fc:	4640      	mov	r0, r8
   167fe:	e7cc      	b.n	1679a <cbor_internal_read_object+0x92>
                    err |= CborErrorDataTooLarge;
   16800:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   16804:	e7f6      	b.n	167f4 <cbor_internal_read_object+0xec>
    assert(cbor_value_is_text_string(value));
   16806:	2300      	movs	r3, #0
   16808:	461a      	mov	r2, r3
   1680a:	4619      	mov	r1, r3
   1680c:	4618      	mov	r0, r3
   1680e:	f7f6 fda7 	bl	d360 <__assert_func>
{ return value && value->type != CborInvalidType; }
   16812:	2300      	movs	r3, #0
   16814:	e7e9      	b.n	167ea <cbor_internal_read_object+0xe2>
                    attrbuf[0] == '\0') {
   16816:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   1681a:	b963      	cbnz	r3, 16836 <cbor_internal_read_object+0x12e>
                    best_match = cursor;
   1681c:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1681e:	3430      	adds	r4, #48	; 0x30
   16820:	6825      	ldr	r5, [r4, #0]
   16822:	b1a5      	cbz	r5, 1684e <cbor_internal_read_object+0x146>
            if (valid_attr_type(type, cursor->type)) {
   16824:	7921      	ldrb	r1, [r4, #4]
   16826:	4630      	mov	r0, r6
   16828:	f7ff fdf2 	bl	16410 <valid_attr_type>
   1682c:	2800      	cmp	r0, #0
   1682e:	d0f6      	beq.n	1681e <cbor_internal_read_object+0x116>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   16830:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   16834:	d0ef      	beq.n	16816 <cbor_internal_read_object+0x10e>
                } else if (strlen(cursor->attribute) == len &&
   16836:	4628      	mov	r0, r5
   16838:	f005 ff52 	bl	1c6e0 <strlen>
   1683c:	9a04      	ldr	r2, [sp, #16]
   1683e:	4290      	cmp	r0, r2
   16840:	d1ed      	bne.n	1681e <cbor_internal_read_object+0x116>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   16842:	a909      	add	r1, sp, #36	; 0x24
   16844:	4628      	mov	r0, r5
   16846:	f7fa fdf3 	bl	11430 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   1684a:	2800      	cmp	r0, #0
   1684c:	d1e7      	bne.n	1681e <cbor_internal_read_object+0x116>
        if (!cursor->attribute && best_match) {
   1684e:	b1b5      	cbz	r5, 1687e <cbor_internal_read_object+0x176>
        if (cursor->attribute != NULL) {
   16850:	6823      	ldr	r3, [r4, #0]
   16852:	2b00      	cmp	r3, #0
   16854:	f000 80e8 	beq.w	16a28 <cbor_internal_read_object+0x320>
            lptr = cbor_target_address(cursor, parent, offset);
   16858:	4652      	mov	r2, sl
   1685a:	4649      	mov	r1, r9
   1685c:	4620      	mov	r0, r4
   1685e:	f7ff fe17 	bl	16490 <cbor_target_address>
   16862:	4605      	mov	r5, r0
            switch (cursor->type) {
   16864:	7923      	ldrb	r3, [r4, #4]
   16866:	3b01      	subs	r3, #1
   16868:	2b0a      	cmp	r3, #10
   1686a:	f200 80db 	bhi.w	16a24 <cbor_internal_read_object+0x31c>
   1686e:	e8df f003 	tbb	[pc, r3]
   16872:	401c      	.short	0x401c
   16874:	620bb39b 	.word	0x620bb39b
   16878:	d9d0c87c 	.word	0xd9d0c87c
   1687c:	db          	.byte	0xdb
   1687d:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   1687e:	f1bb 0f00 	cmp.w	fp, #0
   16882:	d0e5      	beq.n	16850 <cbor_internal_read_object+0x148>
            cursor = best_match;
   16884:	465c      	mov	r4, fp
   16886:	e7e3      	b.n	16850 <cbor_internal_read_object+0x148>
{ return value->type == CborBooleanType; }
   16888:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   1688c:	2bf5      	cmp	r3, #245	; 0xf5
   1688e:	d106      	bne.n	1689e <cbor_internal_read_object+0x196>
    *result = !!value->extra;
   16890:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   16894:	3b00      	subs	r3, #0
   16896:	bf18      	it	ne
   16898:	2301      	movne	r3, #1
   1689a:	7003      	strb	r3, [r0, #0]
                break;
   1689c:	e0c4      	b.n	16a28 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_boolean(value));
   1689e:	2300      	movs	r3, #0
   168a0:	461a      	mov	r2, r3
   168a2:	4619      	mov	r1, r3
   168a4:	4618      	mov	r0, r3
   168a6:	f7f6 fd5b 	bl	d360 <__assert_func>
{ return value->type == CborIntegerType; }
   168aa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   168ae:	b9a3      	cbnz	r3, 168da <cbor_internal_read_object+0x1d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   168b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   168b4:	f013 0f01 	tst.w	r3, #1
   168b8:	d115      	bne.n	168e6 <cbor_internal_read_object+0x1de>
   168ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   168be:	2300      	movs	r3, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   168c0:	602a      	str	r2, [r5, #0]
   168c2:	606b      	str	r3, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   168c4:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   168c8:	f011 0f02 	tst.w	r1, #2
   168cc:	f000 80ac 	beq.w	16a28 <cbor_internal_read_object+0x320>
        *result = -*result - 1;
   168d0:	43d2      	mvns	r2, r2
   168d2:	43db      	mvns	r3, r3
   168d4:	602a      	str	r2, [r5, #0]
   168d6:	606b      	str	r3, [r5, #4]
                break;
   168d8:	e0a6      	b.n	16a28 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_integer(value));
   168da:	2300      	movs	r3, #0
   168dc:	461a      	mov	r2, r3
   168de:	4619      	mov	r1, r3
   168e0:	4618      	mov	r0, r3
   168e2:	f7f6 fd3d 	bl	d360 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   168e6:	a805      	add	r0, sp, #20
   168e8:	f000 fd15 	bl	17316 <_cbor_value_decode_int64_internal>
   168ec:	4602      	mov	r2, r0
   168ee:	460b      	mov	r3, r1
   168f0:	e7e6      	b.n	168c0 <cbor_internal_read_object+0x1b8>
{ return value->type == CborIntegerType; }
   168f2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   168f6:	b933      	cbnz	r3, 16906 <cbor_internal_read_object+0x1fe>
   168f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   168fc:	f013 0f02 	tst.w	r3, #2
   16900:	d00e      	beq.n	16920 <cbor_internal_read_object+0x218>
   16902:	2300      	movs	r3, #0
   16904:	e000      	b.n	16908 <cbor_internal_read_object+0x200>
   16906:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   16908:	b163      	cbz	r3, 16924 <cbor_internal_read_object+0x21c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1690a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   1690e:	f013 0f01 	tst.w	r3, #1
   16912:	d10c      	bne.n	1692e <cbor_internal_read_object+0x226>
   16914:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   16918:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   1691a:	6028      	str	r0, [r5, #0]
   1691c:	6069      	str	r1, [r5, #4]
                break;
   1691e:	e083      	b.n	16a28 <cbor_internal_read_object+0x320>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   16920:	2301      	movs	r3, #1
   16922:	e7f1      	b.n	16908 <cbor_internal_read_object+0x200>
    assert(cbor_value_is_unsigned_integer(value));
   16924:	461a      	mov	r2, r3
   16926:	4619      	mov	r1, r3
   16928:	4618      	mov	r0, r3
   1692a:	f7f6 fd19 	bl	d360 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1692e:	a805      	add	r0, sp, #20
   16930:	f000 fcf1 	bl	17316 <_cbor_value_decode_int64_internal>
   16934:	e7f1      	b.n	1691a <cbor_internal_read_object+0x212>
{ return value->type == CborFloatType; }
   16936:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   1693a:	2bfa      	cmp	r3, #250	; 0xfa
   1693c:	d109      	bne.n	16952 <cbor_internal_read_object+0x24a>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   1693e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   16942:	f013 0f01 	tst.w	r3, #1
   16946:	d00a      	beq.n	1695e <cbor_internal_read_object+0x256>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   16948:	a805      	add	r0, sp, #20
   1694a:	f000 fce4 	bl	17316 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   1694e:	6028      	str	r0, [r5, #0]
                break;
   16950:	e06a      	b.n	16a28 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_float(value));
   16952:	2300      	movs	r3, #0
   16954:	461a      	mov	r2, r3
   16956:	4619      	mov	r1, r3
   16958:	4618      	mov	r0, r3
   1695a:	f7f6 fd01 	bl	d360 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   1695e:	2300      	movs	r3, #0
   16960:	461a      	mov	r2, r3
   16962:	4619      	mov	r1, r3
   16964:	4618      	mov	r0, r3
   16966:	f7f6 fcfb 	bl	d360 <__assert_func>
{ return value->type == CborDoubleType; }
   1696a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   1696e:	2bfb      	cmp	r3, #251	; 0xfb
   16970:	d10e      	bne.n	16990 <cbor_internal_read_object+0x288>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   16972:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   16976:	f013 0f01 	tst.w	r3, #1
   1697a:	d00f      	beq.n	1699c <cbor_internal_read_object+0x294>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   1697c:	a805      	add	r0, sp, #20
   1697e:	f000 fcca 	bl	17316 <_cbor_value_decode_int64_internal>
   16982:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   16986:	ab02      	add	r3, sp, #8
   16988:	cb03      	ldmia	r3!, {r0, r1}
   1698a:	6028      	str	r0, [r5, #0]
   1698c:	6069      	str	r1, [r5, #4]
                break;
   1698e:	e04b      	b.n	16a28 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_double(value));
   16990:	2300      	movs	r3, #0
   16992:	461a      	mov	r2, r3
   16994:	4619      	mov	r1, r3
   16996:	4618      	mov	r0, r3
   16998:	f7f6 fce2 	bl	d360 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   1699c:	2300      	movs	r3, #0
   1699e:	461a      	mov	r2, r3
   169a0:	4619      	mov	r1, r3
   169a2:	4618      	mov	r0, r3
   169a4:	f7f6 fcdc 	bl	d360 <__assert_func>
                size_t len = cursor->len;
   169a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   169aa:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   169ac:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   169b0:	2b40      	cmp	r3, #64	; 0x40
   169b2:	d10b      	bne.n	169cc <cbor_internal_read_object+0x2c4>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   169b4:	2300      	movs	r3, #0
   169b6:	aa02      	add	r2, sp, #8
   169b8:	4601      	mov	r1, r0
   169ba:	a805      	add	r0, sp, #20
   169bc:	f000 fdae 	bl	1751c <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   169c0:	ea48 0800 	orr.w	r8, r8, r0
                *cursor->addr.bytestring.len = len;
   169c4:	68e3      	ldr	r3, [r4, #12]
   169c6:	9a02      	ldr	r2, [sp, #8]
   169c8:	601a      	str	r2, [r3, #0]
                break;
   169ca:	e02d      	b.n	16a28 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_byte_string(value));
   169cc:	2300      	movs	r3, #0
   169ce:	461a      	mov	r2, r3
   169d0:	4619      	mov	r1, r3
   169d2:	4618      	mov	r0, r3
   169d4:	f7f6 fcc4 	bl	d360 <__assert_func>
                size_t len = cursor->len;
   169d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   169da:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   169dc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   169e0:	2b60      	cmp	r3, #96	; 0x60
   169e2:	d108      	bne.n	169f6 <cbor_internal_read_object+0x2ee>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   169e4:	2300      	movs	r3, #0
   169e6:	aa02      	add	r2, sp, #8
   169e8:	4601      	mov	r1, r0
   169ea:	a805      	add	r0, sp, #20
   169ec:	f000 fd96 	bl	1751c <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   169f0:	ea48 0800 	orr.w	r8, r8, r0
                break;
   169f4:	e018      	b.n	16a28 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_text_string(value));
   169f6:	2300      	movs	r3, #0
   169f8:	461a      	mov	r2, r3
   169fa:	4619      	mov	r1, r3
   169fc:	4618      	mov	r0, r3
   169fe:	f7f6 fcaf 	bl	d360 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   16a02:	f104 0108 	add.w	r1, r4, #8
   16a06:	a805      	add	r0, sp, #20
   16a08:	f7ff fd72 	bl	164f0 <cbor_read_array>
   16a0c:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   16a10:	e00d      	b.n	16a2e <cbor_internal_read_object+0x326>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   16a12:	2300      	movs	r3, #0
   16a14:	461a      	mov	r2, r3
   16a16:	68a1      	ldr	r1, [r4, #8]
   16a18:	a805      	add	r0, sp, #20
   16a1a:	f7ff fe75 	bl	16708 <cbor_internal_read_object>
   16a1e:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   16a22:	e004      	b.n	16a2e <cbor_internal_read_object+0x326>
                err |= CborErrorIllegalType;
   16a24:	f448 7882 	orr.w	r8, r8, #260	; 0x104
        cbor_value_advance(&cur_value);
   16a28:	a805      	add	r0, sp, #20
   16a2a:	f000 fdd4 	bl	175d6 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   16a2e:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   16a32:	2eff      	cmp	r6, #255	; 0xff
   16a34:	d010      	beq.n	16a58 <cbor_internal_read_object+0x350>
   16a36:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   16a38:	2b00      	cmp	r3, #0
   16a3a:	f43f aedb 	beq.w	167f4 <cbor_internal_read_object+0xec>
   16a3e:	f1b8 0f00 	cmp.w	r8, #0
   16a42:	f47f aed7 	bne.w	167f4 <cbor_internal_read_object+0xec>
        if (cbor_value_is_text_string(&cur_value)) {
   16a46:	2e60      	cmp	r6, #96	; 0x60
   16a48:	f43f aeb0 	beq.w	167ac <cbor_internal_read_object+0xa4>
            attrbuf[0] = '\0';
   16a4c:	2300      	movs	r3, #0
   16a4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   16a52:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   16a54:	9c00      	ldr	r4, [sp, #0]
   16a56:	e6e3      	b.n	16820 <cbor_internal_read_object+0x118>
   16a58:	2300      	movs	r3, #0
   16a5a:	e7ed      	b.n	16a38 <cbor_internal_read_object+0x330>
        err |= cbor_value_leave_container(root_value, &cur_value);
   16a5c:	a905      	add	r1, sp, #20
   16a5e:	9801      	ldr	r0, [sp, #4]
   16a60:	f000 fd3c 	bl	174dc <cbor_value_leave_container>
   16a64:	ea48 0800 	orr.w	r8, r8, r0
   16a68:	e6c8      	b.n	167fc <cbor_internal_read_object+0xf4>
   16a6a:	bf00      	nop

00016a6c <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   16a6c:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   16a6e:	2300      	movs	r3, #0
   16a70:	461a      	mov	r2, r3
   16a72:	f7ff fe49 	bl	16708 <cbor_internal_read_object>
    return st;
}
   16a76:	bd08      	pop	{r3, pc}

00016a78 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   16a78:	b508      	push	{r3, lr}
   16a7a:	4694      	mov	ip, r2
   16a7c:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   16a7e:	460b      	mov	r3, r1
   16a80:	69c1      	ldr	r1, [r0, #28]
   16a82:	4461      	add	r1, ip
   16a84:	6a00      	ldr	r0, [r0, #32]
   16a86:	f7f8 f8a6 	bl	ebd6 <os_mbuf_copydata>
    if (rc == 0) {
   16a8a:	b108      	cbz	r0, 16a90 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   16a8c:	2000      	movs	r0, #0
}
   16a8e:	bd08      	pop	{r3, pc}
        return true;
   16a90:	2001      	movs	r0, #1
   16a92:	e7fc      	b.n	16a8e <cbor_mbuf_reader_cpy+0x16>

00016a94 <cbor_mbuf_reader_get8>:
{
   16a94:	b510      	push	{r4, lr}
   16a96:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   16a98:	f10d 0307 	add.w	r3, sp, #7
   16a9c:	2201      	movs	r2, #1
   16a9e:	69c4      	ldr	r4, [r0, #28]
   16aa0:	4421      	add	r1, r4
   16aa2:	6a00      	ldr	r0, [r0, #32]
   16aa4:	f7f8 f897 	bl	ebd6 <os_mbuf_copydata>
}
   16aa8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16aac:	b002      	add	sp, #8
   16aae:	bd10      	pop	{r4, pc}

00016ab0 <cbor_mbuf_reader_cmp>:
{
   16ab0:	b508      	push	{r3, lr}
   16ab2:	4694      	mov	ip, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   16ab4:	460a      	mov	r2, r1
   16ab6:	69c1      	ldr	r1, [r0, #28]
   16ab8:	4461      	add	r1, ip
   16aba:	6a00      	ldr	r0, [r0, #32]
   16abc:	f7f8 f90f 	bl	ecde <os_mbuf_cmpf>
}
   16ac0:	fab0 f080 	clz	r0, r0
   16ac4:	0940      	lsrs	r0, r0, #5
   16ac6:	bd08      	pop	{r3, pc}

00016ac8 <cbor_mbuf_reader_get64>:
{
   16ac8:	b510      	push	{r4, lr}
   16aca:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   16acc:	466b      	mov	r3, sp
   16ace:	2208      	movs	r2, #8
   16ad0:	69c4      	ldr	r4, [r0, #28]
   16ad2:	4421      	add	r1, r4
   16ad4:	6a00      	ldr	r0, [r0, #32]
   16ad6:	f7f8 f87e 	bl	ebd6 <os_mbuf_copydata>
}
   16ada:	9801      	ldr	r0, [sp, #4]
   16adc:	ba00      	rev	r0, r0
   16ade:	9900      	ldr	r1, [sp, #0]
   16ae0:	ba09      	rev	r1, r1
   16ae2:	b002      	add	sp, #8
   16ae4:	bd10      	pop	{r4, pc}

00016ae6 <cbor_mbuf_reader_get32>:
{
   16ae6:	b510      	push	{r4, lr}
   16ae8:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   16aea:	ab01      	add	r3, sp, #4
   16aec:	2204      	movs	r2, #4
   16aee:	69c4      	ldr	r4, [r0, #28]
   16af0:	4421      	add	r1, r4
   16af2:	6a00      	ldr	r0, [r0, #32]
   16af4:	f7f8 f86f 	bl	ebd6 <os_mbuf_copydata>
}
   16af8:	9801      	ldr	r0, [sp, #4]
   16afa:	ba00      	rev	r0, r0
   16afc:	b002      	add	sp, #8
   16afe:	bd10      	pop	{r4, pc}

00016b00 <cbor_mbuf_reader_get16>:
{
   16b00:	b510      	push	{r4, lr}
   16b02:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   16b04:	f10d 0306 	add.w	r3, sp, #6
   16b08:	2202      	movs	r2, #2
   16b0a:	69c4      	ldr	r4, [r0, #28]
   16b0c:	4421      	add	r1, r4
   16b0e:	6a00      	ldr	r0, [r0, #32]
   16b10:	f7f8 f861 	bl	ebd6 <os_mbuf_copydata>
    return cbor_ntohs(val);
   16b14:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   16b18:	ba40      	rev16	r0, r0
}
   16b1a:	b280      	uxth	r0, r0
   16b1c:	b002      	add	sp, #8
   16b1e:	bd10      	pop	{r4, pc}

00016b20 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   16b20:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   16b22:	4b0d      	ldr	r3, [pc, #52]	; (16b58 <cbor_mbuf_reader_init+0x38>)
   16b24:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   16b26:	4b0d      	ldr	r3, [pc, #52]	; (16b5c <cbor_mbuf_reader_init+0x3c>)
   16b28:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   16b2a:	4b0d      	ldr	r3, [pc, #52]	; (16b60 <cbor_mbuf_reader_init+0x40>)
   16b2c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   16b2e:	4b0d      	ldr	r3, [pc, #52]	; (16b64 <cbor_mbuf_reader_init+0x44>)
   16b30:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   16b32:	4b0d      	ldr	r3, [pc, #52]	; (16b68 <cbor_mbuf_reader_init+0x48>)
   16b34:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   16b36:	4b0d      	ldr	r3, [pc, #52]	; (16b6c <cbor_mbuf_reader_init+0x4c>)
   16b38:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   16b3a:	794b      	ldrb	r3, [r1, #5]
   16b3c:	2b07      	cmp	r3, #7
   16b3e:	d905      	bls.n	16b4c <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   16b40:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   16b42:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   16b44:	8a0b      	ldrh	r3, [r1, #16]
   16b46:	1a9a      	subs	r2, r3, r2
   16b48:	6182      	str	r2, [r0, #24]
}
   16b4a:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   16b4c:	2300      	movs	r3, #0
   16b4e:	461a      	mov	r2, r3
   16b50:	4619      	mov	r1, r3
   16b52:	4618      	mov	r0, r3
   16b54:	f7f6 fc04 	bl	d360 <__assert_func>
   16b58:	00016a95 	.word	0x00016a95
   16b5c:	00016b01 	.word	0x00016b01
   16b60:	00016ae7 	.word	0x00016ae7
   16b64:	00016ac9 	.word	0x00016ac9
   16b68:	00016ab1 	.word	0x00016ab1
   16b6c:	00016a79 	.word	0x00016a79

00016b70 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   16b70:	b538      	push	{r3, r4, r5, lr}
   16b72:	4604      	mov	r4, r0
   16b74:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   16b76:	b292      	uxth	r2, r2
   16b78:	6880      	ldr	r0, [r0, #8]
   16b7a:	f7f7 ffc6 	bl	eb0a <os_mbuf_append>
    if (rc) {
   16b7e:	b918      	cbnz	r0, 16b88 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   16b80:	6862      	ldr	r2, [r4, #4]
   16b82:	442a      	add	r2, r5
   16b84:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   16b86:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   16b88:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   16b8c:	e7fb      	b.n	16b86 <cbor_mbuf_writer+0x16>
	...

00016b90 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   16b90:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   16b92:	2300      	movs	r3, #0
   16b94:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   16b96:	4b01      	ldr	r3, [pc, #4]	; (16b9c <cbor_mbuf_writer_init+0xc>)
   16b98:	6003      	str	r3, [r0, #0]
}
   16b9a:	4770      	bx	lr
   16b9c:	00016b71 	.word	0x00016b71

00016ba0 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   16ba0:	b510      	push	{r4, lr}
   16ba2:	b084      	sub	sp, #16
   16ba4:	468c      	mov	ip, r1
    CborError err;
    container->writer = encoder->writer;
   16ba6:	6801      	ldr	r1, [r0, #0]
   16ba8:	f8cc 1000 	str.w	r1, [ip]
    ++encoder->added;
   16bac:	6881      	ldr	r1, [r0, #8]
   16bae:	3101      	adds	r1, #1
   16bb0:	6081      	str	r1, [r0, #8]
    container->added = 0;
   16bb2:	2100      	movs	r1, #0
   16bb4:	f8cc 1008 	str.w	r1, [ip, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   16bb8:	f003 0120 	and.w	r1, r3, #32
   16bbc:	f8cc 100c 	str.w	r1, [ip, #12]

    if (length == CborIndefiniteLength) {
   16bc0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   16bc4:	d10f      	bne.n	16be6 <create_container+0x46>
        container->flags |= CborIteratorFlag_UnknownLength;
   16bc6:	f041 0104 	orr.w	r1, r1, #4
   16bca:	f8cc 100c 	str.w	r1, [ip, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   16bce:	331f      	adds	r3, #31
   16bd0:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   16bd4:	f8dc 0000 	ldr.w	r0, [ip]
   16bd8:	6803      	ldr	r3, [r0, #0]
   16bda:	2201      	movs	r2, #1
   16bdc:	4669      	mov	r1, sp
   16bde:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   16be0:	2000      	movs	r0, #0
   16be2:	b004      	add	sp, #16
   16be4:	bd10      	pop	{r4, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   16be6:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   16be8:	ba10      	rev	r0, r2
    memcpy(where, &v, sizeof(v));
   16bea:	9102      	str	r1, [sp, #8]
   16bec:	9003      	str	r0, [sp, #12]
    if (ui < Value8Bit) {
   16bee:	2a18      	cmp	r2, #24
   16bf0:	f171 0400 	sbcs.w	r4, r1, #0
   16bf4:	d20c      	bcs.n	16c10 <create_container+0x70>
        *bufstart += shiftedMajorType;
   16bf6:	eb03 6310 	add.w	r3, r3, r0, lsr #24
   16bfa:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   16bfe:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   16c02:	f8dc 0000 	ldr.w	r0, [ip]
   16c06:	6803      	ldr	r3, [r0, #0]
   16c08:	aa04      	add	r2, sp, #16
   16c0a:	1a52      	subs	r2, r2, r1
   16c0c:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   16c0e:	e7e7      	b.n	16be0 <create_container+0x40>
        if (ui > 0xffU)
   16c10:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   16c14:	f171 0000 	sbcs.w	r0, r1, #0
   16c18:	d210      	bcs.n	16c3c <create_container+0x9c>
        unsigned more = 0;
   16c1a:	2000      	movs	r0, #0
        if (ui > 0xffffU)
   16c1c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   16c20:	f171 0200 	sbcs.w	r2, r1, #0
   16c24:	d300      	bcc.n	16c28 <create_container+0x88>
            ++more;
   16c26:	3001      	adds	r0, #1
        bufstart -= (size_t)1 << more;
   16c28:	2101      	movs	r1, #1
   16c2a:	fa01 f200 	lsl.w	r2, r1, r0
   16c2e:	f10d 010f 	add.w	r1, sp, #15
   16c32:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   16c34:	4403      	add	r3, r0
   16c36:	3318      	adds	r3, #24
   16c38:	700b      	strb	r3, [r1, #0]
   16c3a:	e7e2      	b.n	16c02 <create_container+0x62>
            ++more;
   16c3c:	2001      	movs	r0, #1
   16c3e:	e7ed      	b.n	16c1c <create_container+0x7c>

00016c40 <encode_string>:
{
   16c40:	b570      	push	{r4, r5, r6, lr}
   16c42:	b084      	sub	sp, #16
   16c44:	4605      	mov	r5, r0
   16c46:	460c      	mov	r4, r1
   16c48:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   16c4a:	2300      	movs	r3, #0
    ++encoder->added;
   16c4c:	6881      	ldr	r1, [r0, #8]
   16c4e:	3101      	adds	r1, #1
   16c50:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   16c52:	ba21      	rev	r1, r4
    memcpy(where, &v, sizeof(v));
   16c54:	9302      	str	r3, [sp, #8]
   16c56:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   16c58:	2c18      	cmp	r4, #24
   16c5a:	f173 0000 	sbcs.w	r0, r3, #0
   16c5e:	d211      	bcs.n	16c84 <encode_string+0x44>
        *bufstart += shiftedMajorType;
   16c60:	eb02 6211 	add.w	r2, r2, r1, lsr #24
   16c64:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   16c68:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   16c6c:	6828      	ldr	r0, [r5, #0]
   16c6e:	6803      	ldr	r3, [r0, #0]
   16c70:	aa04      	add	r2, sp, #16
   16c72:	1a52      	subs	r2, r2, r1
   16c74:	4798      	blx	r3
   16c76:	6828      	ldr	r0, [r5, #0]
   16c78:	6803      	ldr	r3, [r0, #0]
   16c7a:	4622      	mov	r2, r4
   16c7c:	4631      	mov	r1, r6
   16c7e:	4798      	blx	r3
}
   16c80:	b004      	add	sp, #16
   16c82:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   16c84:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   16c88:	f173 0100 	sbcs.w	r1, r3, #0
   16c8c:	d212      	bcs.n	16cb4 <encode_string+0x74>
        unsigned more = 0;
   16c8e:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   16c92:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   16c96:	f173 0300 	sbcs.w	r3, r3, #0
   16c9a:	d301      	bcc.n	16ca0 <encode_string+0x60>
            ++more;
   16c9c:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   16ca0:	2101      	movs	r1, #1
   16ca2:	fa01 f10c 	lsl.w	r1, r1, ip
   16ca6:	f10d 000f 	add.w	r0, sp, #15
   16caa:	1a41      	subs	r1, r0, r1
        *bufstart = shiftedMajorType + Value8Bit + more;
   16cac:	4462      	add	r2, ip
   16cae:	3218      	adds	r2, #24
   16cb0:	700a      	strb	r2, [r1, #0]
   16cb2:	e7db      	b.n	16c6c <encode_string+0x2c>
            ++more;
   16cb4:	f04f 0c01 	mov.w	ip, #1
   16cb8:	e7eb      	b.n	16c92 <encode_string+0x52>

00016cba <cbor_encoder_init>:
    encoder->writer = writer;
   16cba:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   16cbc:	2300      	movs	r3, #0
   16cbe:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   16cc0:	60c2      	str	r2, [r0, #12]
}
   16cc2:	4770      	bx	lr

00016cc4 <cbor_encode_uint>:
{
   16cc4:	b510      	push	{r4, lr}
   16cc6:	b084      	sub	sp, #16
    ++encoder->added;
   16cc8:	6881      	ldr	r1, [r0, #8]
   16cca:	3101      	adds	r1, #1
   16ccc:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   16cce:	ba11      	rev	r1, r2
   16cd0:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   16cd2:	9402      	str	r4, [sp, #8]
   16cd4:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   16cd6:	2a18      	cmp	r2, #24
   16cd8:	f173 0400 	sbcs.w	r4, r3, #0
   16cdc:	d20c      	bcs.n	16cf8 <cbor_encode_uint+0x34>
        *bufstart += shiftedMajorType;
   16cde:	f3c1 6107 	ubfx	r1, r1, #24, #8
   16ce2:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   16ce6:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   16cea:	6800      	ldr	r0, [r0, #0]
   16cec:	6803      	ldr	r3, [r0, #0]
   16cee:	aa04      	add	r2, sp, #16
   16cf0:	1a52      	subs	r2, r2, r1
   16cf2:	4798      	blx	r3
}
   16cf4:	b004      	add	sp, #16
   16cf6:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   16cf8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   16cfc:	f173 0100 	sbcs.w	r1, r3, #0
   16d00:	d21d      	bcs.n	16d3e <cbor_encode_uint+0x7a>
        unsigned more = 0;
   16d02:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   16d06:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   16d0a:	f173 0100 	sbcs.w	r1, r3, #0
   16d0e:	d301      	bcc.n	16d14 <cbor_encode_uint+0x50>
            ++more;
   16d10:	f10c 0c01 	add.w	ip, ip, #1
        if (ui > 0xffffffffU)
   16d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16d18:	4291      	cmp	r1, r2
   16d1a:	f04f 0200 	mov.w	r2, #0
   16d1e:	eb72 0303 	sbcs.w	r3, r2, r3
   16d22:	d201      	bcs.n	16d28 <cbor_encode_uint+0x64>
            ++more;
   16d24:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   16d28:	2101      	movs	r1, #1
   16d2a:	fa01 f30c 	lsl.w	r3, r1, ip
   16d2e:	f10d 010f 	add.w	r1, sp, #15
   16d32:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   16d34:	f10c 0c18 	add.w	ip, ip, #24
   16d38:	f881 c000 	strb.w	ip, [r1]
   16d3c:	e7d5      	b.n	16cea <cbor_encode_uint+0x26>
            ++more;
   16d3e:	f04f 0c01 	mov.w	ip, #1
   16d42:	e7e0      	b.n	16d06 <cbor_encode_uint+0x42>

00016d44 <cbor_encode_int>:
{
   16d44:	b510      	push	{r4, lr}
   16d46:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   16d48:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   16d4a:	f001 0c20 	and.w	ip, r1, #32
    ui ^= value;                            /* complement negatives */
   16d4e:	404a      	eors	r2, r1
   16d50:	404b      	eors	r3, r1
    ++encoder->added;
   16d52:	6881      	ldr	r1, [r0, #8]
   16d54:	3101      	adds	r1, #1
   16d56:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   16d58:	ba11      	rev	r1, r2
   16d5a:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   16d5c:	9402      	str	r4, [sp, #8]
   16d5e:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   16d60:	2a18      	cmp	r2, #24
   16d62:	f173 0400 	sbcs.w	r4, r3, #0
   16d66:	d20c      	bcs.n	16d82 <cbor_encode_int+0x3e>
        *bufstart += shiftedMajorType;
   16d68:	eb0c 6111 	add.w	r1, ip, r1, lsr #24
   16d6c:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   16d70:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   16d74:	6800      	ldr	r0, [r0, #0]
   16d76:	6803      	ldr	r3, [r0, #0]
   16d78:	aa04      	add	r2, sp, #16
   16d7a:	1a52      	subs	r2, r2, r1
   16d7c:	4798      	blx	r3
}
   16d7e:	b004      	add	sp, #16
   16d80:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   16d82:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   16d86:	f173 0100 	sbcs.w	r1, r3, #0
   16d8a:	d21e      	bcs.n	16dca <cbor_encode_int+0x86>
        unsigned more = 0;
   16d8c:	f04f 0e00 	mov.w	lr, #0
        if (ui > 0xffffU)
   16d90:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   16d94:	f173 0100 	sbcs.w	r1, r3, #0
   16d98:	d301      	bcc.n	16d9e <cbor_encode_int+0x5a>
            ++more;
   16d9a:	f10e 0e01 	add.w	lr, lr, #1
        if (ui > 0xffffffffU)
   16d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16da2:	4291      	cmp	r1, r2
   16da4:	f04f 0200 	mov.w	r2, #0
   16da8:	eb72 0303 	sbcs.w	r3, r2, r3
   16dac:	d201      	bcs.n	16db2 <cbor_encode_int+0x6e>
            ++more;
   16dae:	f10e 0e01 	add.w	lr, lr, #1
        bufstart -= (size_t)1 << more;
   16db2:	2101      	movs	r1, #1
   16db4:	fa01 f30e 	lsl.w	r3, r1, lr
   16db8:	f10d 010f 	add.w	r1, sp, #15
   16dbc:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   16dbe:	44f4      	add	ip, lr
   16dc0:	f10c 0c18 	add.w	ip, ip, #24
   16dc4:	f881 c000 	strb.w	ip, [r1]
   16dc8:	e7d4      	b.n	16d74 <cbor_encode_int+0x30>
            ++more;
   16dca:	f04f 0e01 	mov.w	lr, #1
   16dce:	e7df      	b.n	16d90 <cbor_encode_int+0x4c>

00016dd0 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   16dd0:	f1a1 0319 	sub.w	r3, r1, #25
   16dd4:	b2db      	uxtb	r3, r3
   16dd6:	2b06      	cmp	r3, #6
   16dd8:	d925      	bls.n	16e26 <cbor_encode_simple_value+0x56>
{
   16dda:	b500      	push	{lr}
   16ddc:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   16dde:	2200      	movs	r2, #0
    ++encoder->added;
   16de0:	6883      	ldr	r3, [r0, #8]
   16de2:	3301      	adds	r3, #1
   16de4:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   16de6:	ba0b      	rev	r3, r1
    memcpy(where, &v, sizeof(v));
   16de8:	9202      	str	r2, [sp, #8]
   16dea:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   16dec:	2918      	cmp	r1, #24
   16dee:	f172 0200 	sbcs.w	r2, r2, #0
   16df2:	d20e      	bcs.n	16e12 <cbor_encode_simple_value+0x42>
        *bufstart += shiftedMajorType;
   16df4:	f3c3 6307 	ubfx	r3, r3, #24, #8
   16df8:	3b20      	subs	r3, #32
   16dfa:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   16dfe:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   16e02:	6800      	ldr	r0, [r0, #0]
   16e04:	6803      	ldr	r3, [r0, #0]
   16e06:	aa04      	add	r2, sp, #16
   16e08:	1a52      	subs	r2, r2, r1
   16e0a:	4798      	blx	r3
}
   16e0c:	b005      	add	sp, #20
   16e0e:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned more = 0;
   16e12:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   16e14:	2101      	movs	r1, #1
   16e16:	fa01 f203 	lsl.w	r2, r1, r3
   16e1a:	f10d 010f 	add.w	r1, sp, #15
   16e1e:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   16e20:	3b08      	subs	r3, #8
   16e22:	700b      	strb	r3, [r1, #0]
   16e24:	e7ed      	b.n	16e02 <cbor_encode_simple_value+0x32>
        return CborErrorIllegalSimpleType;
   16e26:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   16e2a:	4770      	bx	lr

00016e2c <cbor_encode_byte_string>:
{
   16e2c:	b508      	push	{r3, lr}
   16e2e:	460b      	mov	r3, r1
   16e30:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   16e32:	2240      	movs	r2, #64	; 0x40
   16e34:	f7ff ff04 	bl	16c40 <encode_string>
}
   16e38:	bd08      	pop	{r3, pc}

00016e3a <cbor_encode_text_string>:
{
   16e3a:	b508      	push	{r3, lr}
   16e3c:	460b      	mov	r3, r1
   16e3e:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   16e40:	2260      	movs	r2, #96	; 0x60
   16e42:	f7ff fefd 	bl	16c40 <encode_string>
}
   16e46:	bd08      	pop	{r3, pc}

00016e48 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   16e48:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   16e4a:	2380      	movs	r3, #128	; 0x80
   16e4c:	f7ff fea8 	bl	16ba0 <create_container>
}
   16e50:	bd08      	pop	{r3, pc}

00016e52 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   16e52:	b508      	push	{r3, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   16e54:	f102 4c00 	add.w	ip, r2, #2147483648	; 0x80000000
   16e58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   16e5c:	459c      	cmp	ip, r3
   16e5e:	d303      	bcc.n	16e68 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   16e60:	23a0      	movs	r3, #160	; 0xa0
   16e62:	f7ff fe9d 	bl	16ba0 <create_container>
}
   16e66:	bd08      	pop	{r3, pc}
        return CborErrorDataTooLarge;
   16e68:	f44f 6080 	mov.w	r0, #1024	; 0x400
   16e6c:	e7fb      	b.n	16e66 <cbor_encoder_create_map+0x14>

00016e6e <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   16e6e:	680b      	ldr	r3, [r1, #0]
   16e70:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   16e72:	68cb      	ldr	r3, [r1, #12]
   16e74:	f013 0f04 	tst.w	r3, #4
   16e78:	d101      	bne.n	16e7e <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   16e7a:	2000      	movs	r0, #0
}
   16e7c:	4770      	bx	lr
{
   16e7e:	b500      	push	{lr}
   16e80:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   16e82:	23ff      	movs	r3, #255	; 0xff
   16e84:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   16e88:	6800      	ldr	r0, [r0, #0]
   16e8a:	6803      	ldr	r3, [r0, #0]
   16e8c:	2201      	movs	r2, #1
   16e8e:	f10d 0107 	add.w	r1, sp, #7
   16e92:	4798      	blx	r3
}
   16e94:	b003      	add	sp, #12
   16e96:	f85d fb04 	ldr.w	pc, [sp], #4

00016e9a <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   16e9a:	2860      	cmp	r0, #96	; 0x60
   16e9c:	d009      	beq.n	16eb2 <is_fixed_type+0x18>
   16e9e:	2840      	cmp	r0, #64	; 0x40
   16ea0:	d009      	beq.n	16eb6 <is_fixed_type+0x1c>
   16ea2:	2880      	cmp	r0, #128	; 0x80
   16ea4:	d009      	beq.n	16eba <is_fixed_type+0x20>
   16ea6:	28a0      	cmp	r0, #160	; 0xa0
   16ea8:	d001      	beq.n	16eae <is_fixed_type+0x14>
   16eaa:	2001      	movs	r0, #1
           type != CborMapType;
}
   16eac:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   16eae:	2000      	movs	r0, #0
   16eb0:	4770      	bx	lr
   16eb2:	2000      	movs	r0, #0
   16eb4:	4770      	bx	lr
   16eb6:	2000      	movs	r0, #0
   16eb8:	4770      	bx	lr
   16eba:	2000      	movs	r0, #0
   16ebc:	4770      	bx	lr

00016ebe <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   16ebe:	2001      	movs	r0, #1
   16ec0:	4770      	bx	lr

00016ec2 <preparse_value>:
{
   16ec2:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   16ec4:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   16ec6:	23ff      	movs	r3, #255	; 0xff
   16ec8:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   16eca:	6841      	ldr	r1, [r0, #4]
   16ecc:	686b      	ldr	r3, [r5, #4]
   16ece:	4299      	cmp	r1, r3
   16ed0:	f000 8089 	beq.w	16fe6 <preparse_value+0x124>
   16ed4:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   16ed6:	6828      	ldr	r0, [r5, #0]
   16ed8:	6803      	ldr	r3, [r0, #0]
   16eda:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   16edc:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   16ee0:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   16ee2:	2300      	movs	r3, #0
   16ee4:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   16ee6:	f000 031f 	and.w	r3, r0, #31
   16eea:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   16eec:	2b1b      	cmp	r3, #27
   16eee:	d91d      	bls.n	16f2c <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   16ef0:	2b1f      	cmp	r3, #31
   16ef2:	d10b      	bne.n	16f0c <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   16ef4:	4630      	mov	r0, r6
   16ef6:	f7ff ffd0 	bl	16e9a <is_fixed_type>
   16efa:	f080 0001 	eor.w	r0, r0, #1
   16efe:	f010 0fff 	tst.w	r0, #255	; 0xff
   16f02:	d00b      	beq.n	16f1c <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   16f04:	2304      	movs	r3, #4
   16f06:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   16f08:	2000      	movs	r0, #0
}
   16f0a:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   16f0c:	2ee0      	cmp	r6, #224	; 0xe0
   16f0e:	d002      	beq.n	16f16 <preparse_value+0x54>
   16f10:	f240 1005 	movw	r0, #261	; 0x105
   16f14:	e7f9      	b.n	16f0a <preparse_value+0x48>
   16f16:	f240 1003 	movw	r0, #259	; 0x103
   16f1a:	e7f6      	b.n	16f0a <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   16f1c:	2ee0      	cmp	r6, #224	; 0xe0
   16f1e:	d002      	beq.n	16f26 <preparse_value+0x64>
   16f20:	f240 1005 	movw	r0, #261	; 0x105
   16f24:	e7f1      	b.n	16f0a <preparse_value+0x48>
   16f26:	f44f 7081 	mov.w	r0, #258	; 0x102
   16f2a:	e7ee      	b.n	16f0a <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   16f2c:	2b17      	cmp	r3, #23
   16f2e:	d91a      	bls.n	16f66 <preparse_value+0xa4>
   16f30:	f1a3 0118 	sub.w	r1, r3, #24
   16f34:	2201      	movs	r2, #1
   16f36:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   16f38:	3201      	adds	r2, #1
   16f3a:	6868      	ldr	r0, [r5, #4]
   16f3c:	6861      	ldr	r1, [r4, #4]
   16f3e:	1a40      	subs	r0, r0, r1
   16f40:	4282      	cmp	r2, r0
   16f42:	d853      	bhi.n	16fec <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
   16f44:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   16f46:	2e20      	cmp	r6, #32
   16f48:	d00f      	beq.n	16f6a <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   16f4a:	2a07      	cmp	r2, #7
   16f4c:	d012      	beq.n	16f74 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   16f4e:	2b17      	cmp	r3, #23
   16f50:	d94f      	bls.n	16ff2 <preparse_value+0x130>
    if (descriptor == Value8Bit)
   16f52:	2b18      	cmp	r3, #24
   16f54:	d039      	beq.n	16fca <preparse_value+0x108>
    else if (descriptor == Value16Bit)
   16f56:	2b19      	cmp	r3, #25
   16f58:	d03e      	beq.n	16fd8 <preparse_value+0x116>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   16f5a:	7be3      	ldrb	r3, [r4, #15]
   16f5c:	f043 0301 	orr.w	r3, r3, #1
   16f60:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   16f62:	2000      	movs	r0, #0
   16f64:	e7d1      	b.n	16f0a <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   16f66:	2200      	movs	r2, #0
   16f68:	e7e6      	b.n	16f38 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   16f6a:	2202      	movs	r2, #2
   16f6c:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   16f6e:	2200      	movs	r2, #0
   16f70:	73a2      	strb	r2, [r4, #14]
   16f72:	e7ec      	b.n	16f4e <preparse_value+0x8c>
        switch (descriptor) {
   16f74:	3b14      	subs	r3, #20
   16f76:	2b0b      	cmp	r3, #11
   16f78:	d812      	bhi.n	16fa0 <preparse_value+0xde>
   16f7a:	e8df f003 	tbb	[pc, r3]
   16f7e:	0d06      	.short	0x0d06
   16f80:	0d130d0d 	.word	0x0d130d0d
   16f84:	20200b0b 	.word	0x20200b0b
   16f88:	2020      	.short	0x2020
            it->extra = false;
   16f8a:	2300      	movs	r3, #0
   16f8c:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   16f8e:	23f5      	movs	r3, #245	; 0xf5
   16f90:	73a3      	strb	r3, [r4, #14]
            break;
   16f92:	e005      	b.n	16fa0 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   16f94:	2301      	movs	r3, #1
   16f96:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   16f98:	6828      	ldr	r0, [r5, #0]
   16f9a:	6803      	ldr	r3, [r0, #0]
   16f9c:	4798      	blx	r3
   16f9e:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   16fa0:	2000      	movs	r0, #0
   16fa2:	e7b2      	b.n	16f0a <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   16fa4:	6828      	ldr	r0, [r5, #0]
   16fa6:	6803      	ldr	r3, [r0, #0]
   16fa8:	3101      	adds	r1, #1
   16faa:	4798      	blx	r3
   16fac:	b283      	uxth	r3, r0
   16fae:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   16fb0:	2b1f      	cmp	r3, #31
   16fb2:	d8f5      	bhi.n	16fa0 <preparse_value+0xde>
                it->type = CborInvalidType;
   16fb4:	23ff      	movs	r3, #255	; 0xff
   16fb6:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   16fb8:	f44f 7083 	mov.w	r0, #262	; 0x106
   16fbc:	e7a5      	b.n	16f0a <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   16fbe:	2300      	movs	r3, #0
   16fc0:	461a      	mov	r2, r3
   16fc2:	4619      	mov	r1, r3
   16fc4:	4618      	mov	r0, r3
   16fc6:	f7f6 f9cb 	bl	d360 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   16fca:	6828      	ldr	r0, [r5, #0]
   16fcc:	6803      	ldr	r3, [r0, #0]
   16fce:	3101      	adds	r1, #1
   16fd0:	4798      	blx	r3
   16fd2:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   16fd4:	2000      	movs	r0, #0
   16fd6:	e798      	b.n	16f0a <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   16fd8:	6828      	ldr	r0, [r5, #0]
   16fda:	6843      	ldr	r3, [r0, #4]
   16fdc:	3101      	adds	r1, #1
   16fde:	4798      	blx	r3
   16fe0:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   16fe2:	2000      	movs	r0, #0
   16fe4:	e791      	b.n	16f0a <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   16fe6:	f240 1001 	movw	r0, #257	; 0x101
   16fea:	e78e      	b.n	16f0a <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   16fec:	f240 1001 	movw	r0, #257	; 0x101
   16ff0:	e78b      	b.n	16f0a <preparse_value+0x48>
        return CborNoError;
   16ff2:	2000      	movs	r0, #0
   16ff4:	e789      	b.n	16f0a <preparse_value+0x48>

00016ff6 <preparse_next_value>:
{
   16ff6:	b510      	push	{r4, lr}
   16ff8:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   16ffa:	6880      	ldr	r0, [r0, #8]
   16ffc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17000:	d00c      	beq.n	1701c <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   17002:	7ba2      	ldrb	r2, [r4, #14]
   17004:	2ac0      	cmp	r2, #192	; 0xc0
   17006:	d002      	beq.n	1700e <preparse_next_value+0x18>
   17008:	3801      	subs	r0, #1
   1700a:	60a0      	str	r0, [r4, #8]
   1700c:	b118      	cbz	r0, 17016 <preparse_next_value+0x20>
    return preparse_value(it);
   1700e:	4620      	mov	r0, r4
   17010:	f7ff ff57 	bl	16ec2 <preparse_value>
}
   17014:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   17016:	23ff      	movs	r3, #255	; 0xff
   17018:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   1701a:	e7fb      	b.n	17014 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   1701c:	6861      	ldr	r1, [r4, #4]
   1701e:	6823      	ldr	r3, [r4, #0]
   17020:	685a      	ldr	r2, [r3, #4]
   17022:	4291      	cmp	r1, r2
   17024:	d0f3      	beq.n	1700e <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   17026:	6818      	ldr	r0, [r3, #0]
   17028:	6803      	ldr	r3, [r0, #0]
   1702a:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   1702c:	28ff      	cmp	r0, #255	; 0xff
   1702e:	d1ee      	bne.n	1700e <preparse_next_value+0x18>
        ++it->offset;
   17030:	6863      	ldr	r3, [r4, #4]
   17032:	3301      	adds	r3, #1
   17034:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   17036:	23ff      	movs	r3, #255	; 0xff
   17038:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   1703a:	2000      	movs	r0, #0
   1703c:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   1703e:	e7e9      	b.n	17014 <preparse_next_value+0x1e>

00017040 <extract_length>:
{
   17040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17042:	4607      	mov	r7, r0
   17044:	460c      	mov	r4, r1
   17046:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17048:	6800      	ldr	r0, [r0, #0]
   1704a:	6803      	ldr	r3, [r0, #0]
   1704c:	6809      	ldr	r1, [r1, #0]
   1704e:	4798      	blx	r3
   17050:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   17054:	6822      	ldr	r2, [r4, #0]
   17056:	3201      	adds	r2, #1
   17058:	6022      	str	r2, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   1705a:	2b17      	cmp	r3, #23
   1705c:	d914      	bls.n	17088 <extract_length+0x48>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   1705e:	2b1b      	cmp	r3, #27
   17060:	d82e      	bhi.n	170c0 <extract_length+0x80>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   17062:	3b18      	subs	r3, #24
   17064:	2601      	movs	r6, #1
   17066:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17068:	687b      	ldr	r3, [r7, #4]
   1706a:	6821      	ldr	r1, [r4, #0]
   1706c:	1a5b      	subs	r3, r3, r1
   1706e:	429e      	cmp	r6, r3
   17070:	d82b      	bhi.n	170ca <extract_length+0x8a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   17072:	2e01      	cmp	r6, #1
   17074:	d00b      	beq.n	1708e <extract_length+0x4e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   17076:	2e02      	cmp	r6, #2
   17078:	d016      	beq.n	170a8 <extract_length+0x68>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   1707a:	2e04      	cmp	r6, #4
   1707c:	d01a      	beq.n	170b4 <extract_length+0x74>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   1707e:	6838      	ldr	r0, [r7, #0]
   17080:	68c3      	ldr	r3, [r0, #12]
   17082:	4798      	blx	r3
   17084:	4603      	mov	r3, r0
   17086:	e007      	b.n	17098 <extract_length+0x58>
        *len = additional_information;
   17088:	2000      	movs	r0, #0
   1708a:	4601      	mov	r1, r0
        return CborNoError;
   1708c:	e008      	b.n	170a0 <extract_length+0x60>
        *len = p->d->get8(p->d, *offset);
   1708e:	6838      	ldr	r0, [r7, #0]
   17090:	6803      	ldr	r3, [r0, #0]
   17092:	4798      	blx	r3
   17094:	4603      	mov	r3, r0
   17096:	2100      	movs	r1, #0
    }
    *offset += bytesNeeded;
   17098:	6822      	ldr	r2, [r4, #0]
   1709a:	4432      	add	r2, r6
   1709c:	6022      	str	r2, [r4, #0]
    return CborNoError;
   1709e:	2000      	movs	r0, #0
    if (err) {
   170a0:	b9c0      	cbnz	r0, 170d4 <extract_length+0x94>
    *len = v;
   170a2:	602b      	str	r3, [r5, #0]
    if (v != *len)
   170a4:	b9c9      	cbnz	r1, 170da <extract_length+0x9a>
}
   170a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *len =  p->d->get16(p->d, *offset);
   170a8:	6838      	ldr	r0, [r7, #0]
   170aa:	6843      	ldr	r3, [r0, #4]
   170ac:	4798      	blx	r3
   170ae:	4603      	mov	r3, r0
   170b0:	2100      	movs	r1, #0
   170b2:	e7f1      	b.n	17098 <extract_length+0x58>
        *len =  p->d->get32(p->d, *offset);
   170b4:	6838      	ldr	r0, [r7, #0]
   170b6:	6883      	ldr	r3, [r0, #8]
   170b8:	4798      	blx	r3
   170ba:	4603      	mov	r3, r0
   170bc:	2100      	movs	r1, #0
   170be:	e7eb      	b.n	17098 <extract_length+0x58>
    *len = 1;
   170c0:	2301      	movs	r3, #1
   170c2:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   170c4:	f240 1005 	movw	r0, #261	; 0x105
   170c8:	e7ea      	b.n	170a0 <extract_length+0x60>
    *len = 1;
   170ca:	2301      	movs	r3, #1
   170cc:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   170ce:	f240 1001 	movw	r0, #257	; 0x101
   170d2:	e7e5      	b.n	170a0 <extract_length+0x60>
        *len = 0;
   170d4:	2300      	movs	r3, #0
   170d6:	602b      	str	r3, [r5, #0]
        return err;
   170d8:	e7e5      	b.n	170a6 <extract_length+0x66>
        return CborErrorDataTooLarge;
   170da:	f44f 6080 	mov.w	r0, #1024	; 0x400
   170de:	e7e2      	b.n	170a6 <extract_length+0x66>

000170e0 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   170e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   170e4:	b085      	sub	sp, #20
   170e6:	4604      	mov	r4, r0
   170e8:	4689      	mov	r9, r1
   170ea:	4616      	mov	r6, r2
   170ec:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   170ee:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   170f0:	2b40      	cmp	r3, #64	; 0x40
   170f2:	d001      	beq.n	170f8 <iterate_string_chunks+0x18>
   170f4:	2b60      	cmp	r3, #96	; 0x60
   170f6:	d10c      	bne.n	17112 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   170f8:	6863      	ldr	r3, [r4, #4]
   170fa:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   170fc:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   170fe:	f012 0f04 	tst.w	r2, #4
   17102:	d00c      	beq.n	1711e <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   17104:	3301      	adds	r3, #1
   17106:	9302      	str	r3, [sp, #8]
        total = 0;
   17108:	2300      	movs	r3, #0
   1710a:	9303      	str	r3, [sp, #12]
        *result = true;
   1710c:	2301      	movs	r3, #1
   1710e:	702b      	strb	r3, [r5, #0]
   17110:	e048      	b.n	171a4 <iterate_string_chunks+0xc4>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   17112:	2300      	movs	r3, #0
   17114:	461a      	mov	r2, r3
   17116:	4619      	mov	r1, r3
   17118:	4618      	mov	r0, r3
   1711a:	f7f6 f921 	bl	d360 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   1711e:	aa03      	add	r2, sp, #12
   17120:	a902      	add	r1, sp, #8
   17122:	6820      	ldr	r0, [r4, #0]
   17124:	f7ff ff8c 	bl	17040 <extract_length>
        if (err)
   17128:	4603      	mov	r3, r0
   1712a:	2800      	cmp	r0, #0
   1712c:	d178      	bne.n	17220 <iterate_string_chunks+0x140>
        if (total > (size_t)(value->parser->end - offset))
   1712e:	6820      	ldr	r0, [r4, #0]
   17130:	6843      	ldr	r3, [r0, #4]
   17132:	9a02      	ldr	r2, [sp, #8]
   17134:	1a99      	subs	r1, r3, r2
   17136:	9b03      	ldr	r3, [sp, #12]
   17138:	4299      	cmp	r1, r3
   1713a:	f0c0 8084 	bcc.w	17246 <iterate_string_chunks+0x166>
        if (total <= *buflen)
   1713e:	6831      	ldr	r1, [r6, #0]
   17140:	428b      	cmp	r3, r1
   17142:	d81e      	bhi.n	17182 <iterate_string_chunks+0xa2>
            *result = !!func(value->parser->d, buffer, offset, total);
   17144:	4649      	mov	r1, r9
   17146:	6800      	ldr	r0, [r0, #0]
   17148:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1714a:	47b8      	blx	r7
   1714c:	3800      	subs	r0, #0
   1714e:	bf18      	it	ne
   17150:	2001      	movne	r0, #1
   17152:	7028      	strb	r0, [r5, #0]
        offset += total;
   17154:	9b02      	ldr	r3, [sp, #8]
   17156:	9a03      	ldr	r2, [sp, #12]
   17158:	4413      	add	r3, r2
   1715a:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   1715c:	782b      	ldrb	r3, [r5, #0]
   1715e:	b14b      	cbz	r3, 17174 <iterate_string_chunks+0x94>
   17160:	6832      	ldr	r2, [r6, #0]
   17162:	9b03      	ldr	r3, [sp, #12]
   17164:	429a      	cmp	r2, r3
   17166:	d905      	bls.n	17174 <iterate_string_chunks+0x94>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   17168:	f1b9 0f00 	cmp.w	r9, #0
   1716c:	d002      	beq.n	17174 <iterate_string_chunks+0x94>
            *(buffer + total) = '\0';
   1716e:	2200      	movs	r2, #0
   17170:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   17174:	9b03      	ldr	r3, [sp, #12]
   17176:	6033      	str	r3, [r6, #0]

    if (next) {
   17178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1717a:	2b00      	cmp	r3, #0
   1717c:	d157      	bne.n	1722e <iterate_string_chunks+0x14e>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   1717e:	2300      	movs	r3, #0
   17180:	e04e      	b.n	17220 <iterate_string_chunks+0x140>
            *result = false;
   17182:	2300      	movs	r3, #0
   17184:	702b      	strb	r3, [r5, #0]
   17186:	e7e5      	b.n	17154 <iterate_string_chunks+0x74>
                ++offset;
   17188:	9b02      	ldr	r3, [sp, #8]
   1718a:	3301      	adds	r3, #1
   1718c:	9302      	str	r3, [sp, #8]
                break;
   1718e:	e7e5      	b.n	1715c <iterate_string_chunks+0x7c>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   17190:	2201      	movs	r2, #1
   17192:	e023      	b.n	171dc <iterate_string_chunks+0xfc>
                *result = false;
   17194:	2300      	movs	r3, #0
   17196:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   17198:	9b02      	ldr	r3, [sp, #8]
   1719a:	9a01      	ldr	r2, [sp, #4]
   1719c:	4413      	add	r3, r2
   1719e:	9302      	str	r3, [sp, #8]
            total = newTotal;
   171a0:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   171a4:	6823      	ldr	r3, [r4, #0]
   171a6:	685a      	ldr	r2, [r3, #4]
   171a8:	9902      	ldr	r1, [sp, #8]
   171aa:	428a      	cmp	r2, r1
   171ac:	d030      	beq.n	17210 <iterate_string_chunks+0x130>
            val = value->parser->d->get8(value->parser->d, offset);
   171ae:	6818      	ldr	r0, [r3, #0]
   171b0:	6803      	ldr	r3, [r0, #0]
   171b2:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   171b4:	28ff      	cmp	r0, #255	; 0xff
   171b6:	d0e7      	beq.n	17188 <iterate_string_chunks+0xa8>
            if ((val & MajorTypeMask) != value->type)
   171b8:	f020 001f 	bic.w	r0, r0, #31
   171bc:	7ba3      	ldrb	r3, [r4, #14]
   171be:	4298      	cmp	r0, r3
   171c0:	d129      	bne.n	17216 <iterate_string_chunks+0x136>
            err = extract_length(value->parser, &offset, &chunkLen);
   171c2:	aa01      	add	r2, sp, #4
   171c4:	a902      	add	r1, sp, #8
   171c6:	6820      	ldr	r0, [r4, #0]
   171c8:	f7ff ff3a 	bl	17040 <extract_length>
            if (err)
   171cc:	4603      	mov	r3, r0
   171ce:	bb38      	cbnz	r0, 17220 <iterate_string_chunks+0x140>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   171d0:	9803      	ldr	r0, [sp, #12]
   171d2:	9b01      	ldr	r3, [sp, #4]
   171d4:	2200      	movs	r2, #0
   171d6:	eb10 0803 	adds.w	r8, r0, r3
   171da:	d2d9      	bcs.n	17190 <iterate_string_chunks+0xb0>
   171dc:	b9f2      	cbnz	r2, 1721c <iterate_string_chunks+0x13c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   171de:	f8d4 c000 	ldr.w	ip, [r4]
   171e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
   171e6:	9a02      	ldr	r2, [sp, #8]
   171e8:	1a89      	subs	r1, r1, r2
   171ea:	428b      	cmp	r3, r1
   171ec:	d81c      	bhi.n	17228 <iterate_string_chunks+0x148>
            if (*result && *buflen >= newTotal)
   171ee:	7829      	ldrb	r1, [r5, #0]
   171f0:	2900      	cmp	r1, #0
   171f2:	d0cf      	beq.n	17194 <iterate_string_chunks+0xb4>
   171f4:	6831      	ldr	r1, [r6, #0]
   171f6:	4541      	cmp	r1, r8
   171f8:	d3cc      	bcc.n	17194 <iterate_string_chunks+0xb4>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   171fa:	eb09 0100 	add.w	r1, r9, r0
   171fe:	f8dc 0000 	ldr.w	r0, [ip]
   17202:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   17204:	47b8      	blx	r7
   17206:	3800      	subs	r0, #0
   17208:	bf18      	it	ne
   1720a:	2001      	movne	r0, #1
   1720c:	7028      	strb	r0, [r5, #0]
   1720e:	e7c3      	b.n	17198 <iterate_string_chunks+0xb8>
                return CborErrorUnexpectedEOF;
   17210:	f240 1301 	movw	r3, #257	; 0x101
   17214:	e004      	b.n	17220 <iterate_string_chunks+0x140>
                return CborErrorIllegalType;
   17216:	f44f 7382 	mov.w	r3, #260	; 0x104
   1721a:	e001      	b.n	17220 <iterate_string_chunks+0x140>
                return CborErrorDataTooLarge;
   1721c:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   17220:	4618      	mov	r0, r3
   17222:	b005      	add	sp, #20
   17224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   17228:	f240 1301 	movw	r3, #257	; 0x101
   1722c:	e7f8      	b.n	17220 <iterate_string_chunks+0x140>
        *next = *value;
   1722e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17232:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   17234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   17238:	9b02      	ldr	r3, [sp, #8]
   1723a:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   1723c:	4620      	mov	r0, r4
   1723e:	f7ff feda 	bl	16ff6 <preparse_next_value>
   17242:	4603      	mov	r3, r0
   17244:	e7ec      	b.n	17220 <iterate_string_chunks+0x140>
            return CborErrorUnexpectedEOF;
   17246:	f240 1301 	movw	r3, #257	; 0x101
   1724a:	e7e9      	b.n	17220 <iterate_string_chunks+0x140>

0001724c <advance_internal>:
{
   1724c:	b570      	push	{r4, r5, r6, lr}
   1724e:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   17250:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17252:	6830      	ldr	r0, [r6, #0]
   17254:	6803      	ldr	r3, [r0, #0]
   17256:	6861      	ldr	r1, [r4, #4]
   17258:	4798      	blx	r3
   1725a:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   1725e:	6863      	ldr	r3, [r4, #4]
   17260:	3301      	adds	r3, #1
   17262:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   17264:	2817      	cmp	r0, #23
   17266:	d913      	bls.n	17290 <advance_internal+0x44>
    if (unlikely(additional_information > Value64Bit))
   17268:	281b      	cmp	r0, #27
   1726a:	d838      	bhi.n	172de <advance_internal+0x92>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1726c:	3818      	subs	r0, #24
   1726e:	2501      	movs	r5, #1
   17270:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17272:	6873      	ldr	r3, [r6, #4]
   17274:	6861      	ldr	r1, [r4, #4]
   17276:	1a5b      	subs	r3, r3, r1
   17278:	429d      	cmp	r5, r3
   1727a:	d835      	bhi.n	172e8 <advance_internal+0x9c>
    } else if (bytesNeeded == 1) {
   1727c:	2d01      	cmp	r5, #1
   1727e:	d00a      	beq.n	17296 <advance_internal+0x4a>
    } else if (bytesNeeded == 2) {
   17280:	2d02      	cmp	r5, #2
   17282:	d022      	beq.n	172ca <advance_internal+0x7e>
    } else if (bytesNeeded == 4) {
   17284:	2d04      	cmp	r5, #4
   17286:	d025      	beq.n	172d4 <advance_internal+0x88>
        *len =  p->d->get64(p->d, *offset);
   17288:	6830      	ldr	r0, [r6, #0]
   1728a:	68c3      	ldr	r3, [r0, #12]
   1728c:	4798      	blx	r3
   1728e:	e006      	b.n	1729e <advance_internal+0x52>
        *len = additional_information;
   17290:	2300      	movs	r3, #0
   17292:	4619      	mov	r1, r3
        return CborNoError;
   17294:	e007      	b.n	172a6 <advance_internal+0x5a>
        *len = p->d->get8(p->d, *offset);
   17296:	6830      	ldr	r0, [r6, #0]
   17298:	6803      	ldr	r3, [r0, #0]
   1729a:	4798      	blx	r3
   1729c:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   1729e:	6863      	ldr	r3, [r4, #4]
   172a0:	442b      	add	r3, r5
   172a2:	6063      	str	r3, [r4, #4]
    return CborNoError;
   172a4:	2300      	movs	r3, #0
    assert(err == CborNoError);
   172a6:	bb23      	cbnz	r3, 172f2 <advance_internal+0xa6>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   172a8:	7ba3      	ldrb	r3, [r4, #14]
   172aa:	2b40      	cmp	r3, #64	; 0x40
   172ac:	d001      	beq.n	172b2 <advance_internal+0x66>
   172ae:	2b60      	cmp	r3, #96	; 0x60
   172b0:	d107      	bne.n	172c2 <advance_internal+0x76>
        assert(length == (size_t)length);
   172b2:	bb21      	cbnz	r1, 172fe <advance_internal+0xb2>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   172b4:	7be3      	ldrb	r3, [r4, #15]
   172b6:	f013 0f04 	tst.w	r3, #4
   172ba:	d126      	bne.n	1730a <advance_internal+0xbe>
        it->offset += length;
   172bc:	6863      	ldr	r3, [r4, #4]
   172be:	4418      	add	r0, r3
   172c0:	6060      	str	r0, [r4, #4]
    return preparse_next_value(it);
   172c2:	4620      	mov	r0, r4
   172c4:	f7ff fe97 	bl	16ff6 <preparse_next_value>
}
   172c8:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   172ca:	6830      	ldr	r0, [r6, #0]
   172cc:	6843      	ldr	r3, [r0, #4]
   172ce:	4798      	blx	r3
   172d0:	2100      	movs	r1, #0
   172d2:	e7e4      	b.n	1729e <advance_internal+0x52>
        *len =  p->d->get32(p->d, *offset);
   172d4:	6830      	ldr	r0, [r6, #0]
   172d6:	6883      	ldr	r3, [r0, #8]
   172d8:	4798      	blx	r3
   172da:	2100      	movs	r1, #0
   172dc:	e7df      	b.n	1729e <advance_internal+0x52>
    *len = 1;
   172de:	2001      	movs	r0, #1
   172e0:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   172e2:	f240 1305 	movw	r3, #261	; 0x105
   172e6:	e7de      	b.n	172a6 <advance_internal+0x5a>
    *len = 1;
   172e8:	2001      	movs	r0, #1
   172ea:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   172ec:	f240 1301 	movw	r3, #257	; 0x101
   172f0:	e7d9      	b.n	172a6 <advance_internal+0x5a>
    assert(err == CborNoError);
   172f2:	2300      	movs	r3, #0
   172f4:	461a      	mov	r2, r3
   172f6:	4619      	mov	r1, r3
   172f8:	4618      	mov	r0, r3
   172fa:	f7f6 f831 	bl	d360 <__assert_func>
        assert(length == (size_t)length);
   172fe:	2300      	movs	r3, #0
   17300:	461a      	mov	r2, r3
   17302:	4619      	mov	r1, r3
   17304:	4618      	mov	r0, r3
   17306:	f7f6 f82b 	bl	d360 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   1730a:	2300      	movs	r3, #0
   1730c:	461a      	mov	r2, r3
   1730e:	4619      	mov	r1, r3
   17310:	4618      	mov	r0, r3
   17312:	f7f6 f825 	bl	d360 <__assert_func>

00017316 <_cbor_value_decode_int64_internal>:
{
   17316:	b510      	push	{r4, lr}
   17318:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   1731a:	6803      	ldr	r3, [r0, #0]
   1731c:	6818      	ldr	r0, [r3, #0]
   1731e:	6803      	ldr	r3, [r0, #0]
   17320:	6861      	ldr	r1, [r4, #4]
   17322:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   17324:	7be3      	ldrb	r3, [r4, #15]
   17326:	f013 0f01 	tst.w	r3, #1
   1732a:	d104      	bne.n	17336 <_cbor_value_decode_int64_internal+0x20>
   1732c:	7ba3      	ldrb	r3, [r4, #14]
   1732e:	2bfa      	cmp	r3, #250	; 0xfa
   17330:	d001      	beq.n	17336 <_cbor_value_decode_int64_internal+0x20>
   17332:	2bfb      	cmp	r3, #251	; 0xfb
   17334:	d111      	bne.n	1735a <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   17336:	f000 031e 	and.w	r3, r0, #30
   1733a:	2b1a      	cmp	r3, #26
   1733c:	d113      	bne.n	17366 <_cbor_value_decode_int64_internal+0x50>
    if ((val & 1) == (Value32Bit & 1))
   1733e:	f010 0f01 	tst.w	r0, #1
   17342:	d016      	beq.n	17372 <_cbor_value_decode_int64_internal+0x5c>
    assert((val & SmallValueMask) == Value64Bit);
   17344:	f000 001f 	and.w	r0, r0, #31
   17348:	281b      	cmp	r0, #27
   1734a:	d11a      	bne.n	17382 <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   1734c:	6823      	ldr	r3, [r4, #0]
   1734e:	6818      	ldr	r0, [r3, #0]
   17350:	68c3      	ldr	r3, [r0, #12]
   17352:	6861      	ldr	r1, [r4, #4]
   17354:	3101      	adds	r1, #1
   17356:	4798      	blx	r3
}
   17358:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   1735a:	2300      	movs	r3, #0
   1735c:	461a      	mov	r2, r3
   1735e:	4619      	mov	r1, r3
   17360:	4618      	mov	r0, r3
   17362:	f7f5 fffd 	bl	d360 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   17366:	2300      	movs	r3, #0
   17368:	461a      	mov	r2, r3
   1736a:	4619      	mov	r1, r3
   1736c:	4618      	mov	r0, r3
   1736e:	f7f5 fff7 	bl	d360 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   17372:	6823      	ldr	r3, [r4, #0]
   17374:	6818      	ldr	r0, [r3, #0]
   17376:	6883      	ldr	r3, [r0, #8]
   17378:	6861      	ldr	r1, [r4, #4]
   1737a:	3101      	adds	r1, #1
   1737c:	4798      	blx	r3
   1737e:	2100      	movs	r1, #0
   17380:	e7ea      	b.n	17358 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   17382:	2300      	movs	r3, #0
   17384:	461a      	mov	r2, r3
   17386:	4619      	mov	r1, r3
   17388:	4618      	mov	r0, r3
   1738a:	f7f5 ffe9 	bl	d360 <__assert_func>

0001738e <cbor_parser_init>:
{
   1738e:	b510      	push	{r4, lr}
   17390:	4604      	mov	r4, r0
   17392:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   17394:	2300      	movs	r3, #0
   17396:	6013      	str	r3, [r2, #0]
   17398:	6053      	str	r3, [r2, #4]
   1739a:	6093      	str	r3, [r2, #8]
    parser->d = d;
   1739c:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   1739e:	69a4      	ldr	r4, [r4, #24]
   173a0:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   173a2:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   173a4:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   173a6:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   173a8:	2301      	movs	r3, #1
   173aa:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   173ac:	f7ff fd89 	bl	16ec2 <preparse_value>
}
   173b0:	bd10      	pop	{r4, pc}

000173b2 <cbor_value_enter_container>:
{
   173b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   173b4:	4605      	mov	r5, r0
   173b6:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   173b8:	7b83      	ldrb	r3, [r0, #14]
   173ba:	2b80      	cmp	r3, #128	; 0x80
   173bc:	d021      	beq.n	17402 <cbor_value_enter_container+0x50>
   173be:	2ba0      	cmp	r3, #160	; 0xa0
   173c0:	d01d      	beq.n	173fe <cbor_value_enter_container+0x4c>
   173c2:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   173c4:	b1fb      	cbz	r3, 17406 <cbor_value_enter_container+0x54>
    *recursed = *it;
   173c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   173ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   173ce:	7beb      	ldrb	r3, [r5, #15]
   173d0:	f013 0f04 	tst.w	r3, #4
   173d4:	d01c      	beq.n	17410 <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
   173d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   173da:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   173dc:	460b      	mov	r3, r1
   173de:	3301      	adds	r3, #1
   173e0:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   173e2:	4620      	mov	r0, r4
   173e4:	f7ff fd6d 	bl	16ec2 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   173e8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   173ec:	d106      	bne.n	173fc <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   173ee:	6863      	ldr	r3, [r4, #4]
   173f0:	3301      	adds	r3, #1
   173f2:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   173f4:	23ff      	movs	r3, #255	; 0xff
   173f6:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   173f8:	2000      	movs	r0, #0
   173fa:	60a0      	str	r0, [r4, #8]
}
   173fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   173fe:	2301      	movs	r3, #1
   17400:	e7e0      	b.n	173c4 <cbor_value_enter_container+0x12>
   17402:	2301      	movs	r3, #1
   17404:	e7de      	b.n	173c4 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   17406:	461a      	mov	r2, r3
   17408:	4619      	mov	r1, r3
   1740a:	4618      	mov	r0, r3
   1740c:	f7f5 ffa8 	bl	d360 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   17410:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17412:	6838      	ldr	r0, [r7, #0]
   17414:	6803      	ldr	r3, [r0, #0]
   17416:	6861      	ldr	r1, [r4, #4]
   17418:	4798      	blx	r3
   1741a:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   1741e:	6863      	ldr	r3, [r4, #4]
   17420:	3301      	adds	r3, #1
   17422:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   17424:	2817      	cmp	r0, #23
   17426:	d913      	bls.n	17450 <cbor_value_enter_container+0x9e>
    if (unlikely(additional_information > Value64Bit))
   17428:	281b      	cmp	r0, #27
   1742a:	d838      	bhi.n	1749e <cbor_value_enter_container+0xec>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1742c:	3818      	subs	r0, #24
   1742e:	2601      	movs	r6, #1
   17430:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17432:	687b      	ldr	r3, [r7, #4]
   17434:	6861      	ldr	r1, [r4, #4]
   17436:	1a5b      	subs	r3, r3, r1
   17438:	429e      	cmp	r6, r3
   1743a:	d835      	bhi.n	174a8 <cbor_value_enter_container+0xf6>
    } else if (bytesNeeded == 1) {
   1743c:	2e01      	cmp	r6, #1
   1743e:	d00a      	beq.n	17456 <cbor_value_enter_container+0xa4>
    } else if (bytesNeeded == 2) {
   17440:	2e02      	cmp	r6, #2
   17442:	d022      	beq.n	1748a <cbor_value_enter_container+0xd8>
    } else if (bytesNeeded == 4) {
   17444:	2e04      	cmp	r6, #4
   17446:	d025      	beq.n	17494 <cbor_value_enter_container+0xe2>
        *len =  p->d->get64(p->d, *offset);
   17448:	6838      	ldr	r0, [r7, #0]
   1744a:	68c3      	ldr	r3, [r0, #12]
   1744c:	4798      	blx	r3
   1744e:	e006      	b.n	1745e <cbor_value_enter_container+0xac>
        *len = additional_information;
   17450:	2300      	movs	r3, #0
   17452:	4619      	mov	r1, r3
        return CborNoError;
   17454:	e007      	b.n	17466 <cbor_value_enter_container+0xb4>
        *len = p->d->get8(p->d, *offset);
   17456:	6838      	ldr	r0, [r7, #0]
   17458:	6803      	ldr	r3, [r0, #0]
   1745a:	4798      	blx	r3
   1745c:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   1745e:	6863      	ldr	r3, [r4, #4]
   17460:	4433      	add	r3, r6
   17462:	6063      	str	r3, [r4, #4]
    return CborNoError;
   17464:	2300      	movs	r3, #0
        assert(err == CborNoError);
   17466:	bb23      	cbnz	r3, 174b2 <cbor_value_enter_container+0x100>
        recursed->remaining = (uint32_t)len;
   17468:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   1746a:	bb41      	cbnz	r1, 174be <cbor_value_enter_container+0x10c>
   1746c:	2900      	cmp	r1, #0
   1746e:	bf08      	it	eq
   17470:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   17474:	d023      	beq.n	174be <cbor_value_enter_container+0x10c>
        if (recursed->type == CborMapType) {
   17476:	7ba2      	ldrb	r2, [r4, #14]
   17478:	2aa0      	cmp	r2, #160	; 0xa0
   1747a:	d025      	beq.n	174c8 <cbor_value_enter_container+0x116>
        if (len != 0)
   1747c:	ea50 0301 	orrs.w	r3, r0, r1
   17480:	d0b8      	beq.n	173f4 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   17482:	4620      	mov	r0, r4
   17484:	f7ff fd1d 	bl	16ec2 <preparse_value>
   17488:	e7b8      	b.n	173fc <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   1748a:	6838      	ldr	r0, [r7, #0]
   1748c:	6843      	ldr	r3, [r0, #4]
   1748e:	4798      	blx	r3
   17490:	2100      	movs	r1, #0
   17492:	e7e4      	b.n	1745e <cbor_value_enter_container+0xac>
        *len =  p->d->get32(p->d, *offset);
   17494:	6838      	ldr	r0, [r7, #0]
   17496:	6883      	ldr	r3, [r0, #8]
   17498:	4798      	blx	r3
   1749a:	2100      	movs	r1, #0
   1749c:	e7df      	b.n	1745e <cbor_value_enter_container+0xac>
    *len = 1;
   1749e:	2001      	movs	r0, #1
   174a0:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   174a2:	f240 1305 	movw	r3, #261	; 0x105
   174a6:	e7de      	b.n	17466 <cbor_value_enter_container+0xb4>
    *len = 1;
   174a8:	2001      	movs	r0, #1
   174aa:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   174ac:	f240 1301 	movw	r3, #257	; 0x101
   174b0:	e7d9      	b.n	17466 <cbor_value_enter_container+0xb4>
        assert(err == CborNoError);
   174b2:	2300      	movs	r3, #0
   174b4:	461a      	mov	r2, r3
   174b6:	4619      	mov	r1, r3
   174b8:	4618      	mov	r0, r3
   174ba:	f7f5 ff51 	bl	d360 <__assert_func>
            recursed->offset = it->offset;
   174be:	686b      	ldr	r3, [r5, #4]
   174c0:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   174c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   174c6:	e799      	b.n	173fc <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   174c8:	2800      	cmp	r0, #0
   174ca:	db02      	blt.n	174d2 <cbor_value_enter_container+0x120>
            recursed->remaining *= 2;
   174cc:	0043      	lsls	r3, r0, #1
   174ce:	60a3      	str	r3, [r4, #8]
   174d0:	e7d4      	b.n	1747c <cbor_value_enter_container+0xca>
                recursed->offset = it->offset;
   174d2:	686b      	ldr	r3, [r5, #4]
   174d4:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   174d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   174da:	e78f      	b.n	173fc <cbor_value_enter_container+0x4a>

000174dc <cbor_value_leave_container>:
{
   174dc:	b508      	push	{r3, lr}
   174de:	7b83      	ldrb	r3, [r0, #14]
   174e0:	2b80      	cmp	r3, #128	; 0x80
   174e2:	d00d      	beq.n	17500 <cbor_value_leave_container+0x24>
   174e4:	2ba0      	cmp	r3, #160	; 0xa0
   174e6:	d009      	beq.n	174fc <cbor_value_leave_container+0x20>
   174e8:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   174ea:	b15b      	cbz	r3, 17504 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   174ec:	7b8b      	ldrb	r3, [r1, #14]
   174ee:	2bff      	cmp	r3, #255	; 0xff
   174f0:	d10d      	bne.n	1750e <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
   174f2:	684b      	ldr	r3, [r1, #4]
   174f4:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   174f6:	f7ff fd7e 	bl	16ff6 <preparse_next_value>
}
   174fa:	bd08      	pop	{r3, pc}
   174fc:	2301      	movs	r3, #1
   174fe:	e7f4      	b.n	174ea <cbor_value_leave_container+0xe>
   17500:	2301      	movs	r3, #1
   17502:	e7f2      	b.n	174ea <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   17504:	461a      	mov	r2, r3
   17506:	4619      	mov	r1, r3
   17508:	4618      	mov	r0, r3
   1750a:	f7f5 ff29 	bl	d360 <__assert_func>
    assert(recursed->type == CborInvalidType);
   1750e:	2300      	movs	r3, #0
   17510:	461a      	mov	r2, r3
   17512:	4619      	mov	r1, r3
   17514:	4618      	mov	r0, r3
   17516:	f7f5 ff23 	bl	d360 <__assert_func>
	...

0001751c <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   1751c:	b500      	push	{lr}
   1751e:	b085      	sub	sp, #20
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   17520:	468c      	mov	ip, r1
   17522:	b181      	cbz	r1, 17546 <_cbor_value_copy_string+0x2a>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   17524:	6801      	ldr	r1, [r0, #0]
   17526:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   17528:	6949      	ldr	r1, [r1, #20]
   1752a:	9101      	str	r1, [sp, #4]
   1752c:	9300      	str	r3, [sp, #0]
   1752e:	f10d 030f 	add.w	r3, sp, #15
   17532:	4661      	mov	r1, ip
   17534:	f7ff fdd4 	bl	170e0 <iterate_string_chunks>
    return err ? err :
   17538:	b910      	cbnz	r0, 17540 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   1753a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   1753e:	b123      	cbz	r3, 1754a <_cbor_value_copy_string+0x2e>
}
   17540:	b005      	add	sp, #20
   17542:	f85d fb04 	ldr.w	pc, [sp], #4
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   17546:	4902      	ldr	r1, [pc, #8]	; (17550 <_cbor_value_copy_string+0x34>)
   17548:	e7ef      	b.n	1752a <_cbor_value_copy_string+0xe>
    return err ? err :
   1754a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1754e:	e7f7      	b.n	17540 <_cbor_value_copy_string+0x24>
   17550:	00016ebf 	.word	0x00016ebf

00017554 <advance_recursive>:
{
   17554:	b570      	push	{r4, r5, r6, lr}
   17556:	b086      	sub	sp, #24
   17558:	4604      	mov	r4, r0
   1755a:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   1755c:	7b86      	ldrb	r6, [r0, #14]
   1755e:	4630      	mov	r0, r6
   17560:	f7ff fc9b 	bl	16e9a <is_fixed_type>
   17564:	b9c0      	cbnz	r0, 17598 <advance_recursive+0x44>
   17566:	2e80      	cmp	r6, #128	; 0x80
   17568:	d01f      	beq.n	175aa <advance_recursive+0x56>
   1756a:	2ea0      	cmp	r6, #160	; 0xa0
   1756c:	d01b      	beq.n	175a6 <advance_recursive+0x52>
   1756e:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   17570:	b1eb      	cbz	r3, 175ae <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   17572:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   17576:	d02b      	beq.n	175d0 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   17578:	a902      	add	r1, sp, #8
   1757a:	4620      	mov	r0, r4
   1757c:	f7ff ff19 	bl	173b2 <cbor_value_enter_container>
    if (err)
   17580:	4603      	mov	r3, r0
   17582:	b968      	cbnz	r0, 175a0 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   17584:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   17586:	b1eb      	cbz	r3, 175c4 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   17588:	1c69      	adds	r1, r5, #1
   1758a:	a802      	add	r0, sp, #8
   1758c:	f7ff ffe2 	bl	17554 <advance_recursive>
        if (err)
   17590:	4603      	mov	r3, r0
   17592:	2800      	cmp	r0, #0
   17594:	d0f6      	beq.n	17584 <advance_recursive+0x30>
   17596:	e003      	b.n	175a0 <advance_recursive+0x4c>
        return advance_internal(it);
   17598:	4620      	mov	r0, r4
   1759a:	f7ff fe57 	bl	1724c <advance_internal>
   1759e:	4603      	mov	r3, r0
}
   175a0:	4618      	mov	r0, r3
   175a2:	b006      	add	sp, #24
   175a4:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   175a6:	2301      	movs	r3, #1
   175a8:	e7e2      	b.n	17570 <advance_recursive+0x1c>
   175aa:	2301      	movs	r3, #1
   175ac:	e7e0      	b.n	17570 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   175ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175b2:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   175b4:	4623      	mov	r3, r4
   175b6:	aa01      	add	r2, sp, #4
   175b8:	2100      	movs	r1, #0
   175ba:	4620      	mov	r0, r4
   175bc:	f7ff ffae 	bl	1751c <_cbor_value_copy_string>
   175c0:	4603      	mov	r3, r0
   175c2:	e7ed      	b.n	175a0 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   175c4:	a902      	add	r1, sp, #8
   175c6:	4620      	mov	r0, r4
   175c8:	f7ff ff88 	bl	174dc <cbor_value_leave_container>
   175cc:	4603      	mov	r3, r0
   175ce:	e7e7      	b.n	175a0 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   175d0:	f240 4301 	movw	r3, #1025	; 0x401
   175d4:	e7e4      	b.n	175a0 <advance_recursive+0x4c>

000175d6 <cbor_value_advance>:
{
   175d6:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   175d8:	7b83      	ldrb	r3, [r0, #14]
   175da:	2bff      	cmp	r3, #255	; 0xff
   175dc:	d005      	beq.n	175ea <cbor_value_advance+0x14>
    if (!it->remaining)
   175de:	6883      	ldr	r3, [r0, #8]
   175e0:	b14b      	cbz	r3, 175f6 <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
   175e2:	2100      	movs	r1, #0
   175e4:	f7ff ffb6 	bl	17554 <advance_recursive>
}
   175e8:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   175ea:	2300      	movs	r3, #0
   175ec:	461a      	mov	r2, r3
   175ee:	4619      	mov	r1, r3
   175f0:	4618      	mov	r0, r3
   175f2:	f7f5 feb5 	bl	d360 <__assert_func>
        return CborErrorAdvancePastEOF;
   175f6:	2003      	movs	r0, #3
   175f8:	e7f6      	b.n	175e8 <cbor_value_advance+0x12>

000175fa <cbor_value_calculate_string_length>:
{
   175fa:	b508      	push	{r3, lr}
   175fc:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   175fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17602:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   17604:	2300      	movs	r3, #0
   17606:	4619      	mov	r1, r3
   17608:	f7ff ff88 	bl	1751c <_cbor_value_copy_string>
}
   1760c:	bd08      	pop	{r3, pc}
	...

00017610 <hal_bsp_flash_dev>:


const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    switch (id) {
   17610:	b908      	cbnz	r0, 17616 <hal_bsp_flash_dev+0x6>
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
   17612:	4802      	ldr	r0, [pc, #8]	; (1761c <hal_bsp_flash_dev+0xc>)
   17614:	4770      	bx	lr
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   17616:	2000      	movs	r0, #0
    }
}
   17618:	4770      	bx	lr
   1761a:	bf00      	nop
   1761c:	00025160 	.word	0x00025160

00017620 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   17620:	b500      	push	{lr}
   17622:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   17624:	f7f0 fdea 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   17628:	f001 fe58 	bl	192dc <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   1762c:	2101      	movs	r1, #1
   1762e:	4811      	ldr	r0, [pc, #68]	; (17674 <hal_bsp_init+0x54>)
   17630:	f7f6 fe84 	bl	e33c <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   17634:	b988      	cbnz	r0, 1765a <hal_bsp_init+0x3a>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   17636:	2000      	movs	r0, #0
   17638:	f7f1 fc46 	bl	8ec8 <hal_dw1000_inst>
   1763c:	4b0e      	ldr	r3, [pc, #56]	; (17678 <hal_bsp_init+0x58>)
   1763e:	6018      	str	r0, [r3, #0]
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   17640:	4b0e      	ldr	r3, [pc, #56]	; (1767c <hal_bsp_init+0x5c>)
   17642:	9301      	str	r3, [sp, #4]
   17644:	4b0e      	ldr	r3, [pc, #56]	; (17680 <hal_bsp_init+0x60>)
   17646:	9300      	str	r3, [sp, #0]
   17648:	2300      	movs	r3, #0
   1764a:	2201      	movs	r2, #1
   1764c:	490d      	ldr	r1, [pc, #52]	; (17684 <hal_bsp_init+0x64>)
   1764e:	f7f6 f951 	bl	d8f4 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   17652:	b940      	cbnz	r0, 17666 <hal_bsp_init+0x46>
#endif
}
   17654:	b003      	add	sp, #12
   17656:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1765a:	2300      	movs	r3, #0
   1765c:	461a      	mov	r2, r3
   1765e:	4619      	mov	r1, r3
   17660:	4618      	mov	r0, r3
   17662:	f7f5 fe7d 	bl	d360 <__assert_func>
    assert(rc == 0);
   17666:	2300      	movs	r3, #0
   17668:	461a      	mov	r2, r3
   1766a:	4619      	mov	r1, r3
   1766c:	4618      	mov	r0, r3
   1766e:	f7f5 fe77 	bl	d360 <__assert_func>
   17672:	bf00      	nop
   17674:	20006cd0 	.word	0x20006cd0
   17678:	20006ccc 	.word	0x20006ccc
   1767c:	00024830 	.word	0x00024830
   17680:	0000a07d 	.word	0x0000a07d
   17684:	00024824 	.word	0x00024824

00017688 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   17688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1768c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 17830 <SEGGER_RTT_WriteNoLock+0x1a8>
   17690:	eb00 0640 	add.w	r6, r0, r0, lsl #1
   17694:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   17698:	b083      	sub	sp, #12
  switch (pRing->Flags) {
   1769a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
   1769c:	2f01      	cmp	r7, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1769e:	4680      	mov	r8, r0
   176a0:	468b      	mov	fp, r1
   176a2:	4692      	mov	sl, r2
  switch (pRing->Flags) {
   176a4:	ea4f 0440 	mov.w	r4, r0, lsl #1
   176a8:	d007      	beq.n	176ba <SEGGER_RTT_WriteNoLock+0x32>
   176aa:	2f02      	cmp	r7, #2
   176ac:	d049      	beq.n	17742 <SEGGER_RTT_WriteNoLock+0xba>
   176ae:	b33f      	cbz	r7, 17700 <SEGGER_RTT_WriteNoLock+0x78>
   176b0:	2700      	movs	r7, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   176b2:	4638      	mov	r0, r7
   176b4:	b003      	add	sp, #12
   176b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   176ba:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   176bc:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   176be:	42af      	cmp	r7, r5
   176c0:	d97a      	bls.n	177b8 <SEGGER_RTT_WriteNoLock+0x130>
    r = RdOff - WrOff - 1u;
   176c2:	3f01      	subs	r7, #1
   176c4:	1b7f      	subs	r7, r7, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   176c6:	6a36      	ldr	r6, [r6, #32]
    Status = Avail < NumBytes ? Avail : NumBytes;
   176c8:	4557      	cmp	r7, sl
   176ca:	bf28      	it	cs
   176cc:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   176ce:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   176d0:	4297      	cmp	r7, r2
   176d2:	d27b      	bcs.n	177cc <SEGGER_RTT_WriteNoLock+0x144>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   176d4:	f108 0301 	add.w	r3, r8, #1
   176d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   176dc:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   176e0:	4659      	mov	r1, fp
   176e2:	6858      	ldr	r0, [r3, #4]
   176e4:	463a      	mov	r2, r7
   176e6:	4428      	add	r0, r5
   176e8:	f7f9 fec6 	bl	11478 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   176ec:	4444      	add	r4, r8
   176ee:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
   176f2:	443d      	add	r5, r7
}
   176f4:	4638      	mov	r0, r7
    pRing->WrOff = WrOff + NumBytes;
   176f6:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   176fa:	b003      	add	sp, #12
   176fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   17700:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   17702:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   17704:	42ab      	cmp	r3, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   17706:	bf9c      	itt	ls
   17708:	6a32      	ldrls	r2, [r6, #32]
   1770a:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   1770c:	3b01      	subs	r3, #1
   1770e:	1b5b      	subs	r3, r3, r5
    if (Avail < NumBytes) {
   17710:	459a      	cmp	sl, r3
   17712:	d8ce      	bhi.n	176b2 <SEGGER_RTT_WriteNoLock+0x2a>
  Rem = pRing->SizeOfBuffer - WrOff;
   17714:	4404      	add	r4, r0
   17716:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1771a:	f100 0801 	add.w	r8, r0, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   1771e:	6a26      	ldr	r6, [r4, #32]
   17720:	1b77      	subs	r7, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   17722:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   17726:	45ba      	cmp	sl, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   17728:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
  if (Rem > NumBytes) {
   1772c:	d26e      	bcs.n	1780c <SEGGER_RTT_WriteNoLock+0x184>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1772e:	f8d9 0004 	ldr.w	r0, [r9, #4]
   17732:	4652      	mov	r2, sl
   17734:	4428      	add	r0, r5
    pRing->WrOff = WrOff + NumBytes;
   17736:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   17738:	f7f9 fe9e 	bl	11478 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1773c:	4657      	mov	r7, sl
   1773e:	6265      	str	r5, [r4, #36]	; 0x24
   17740:	e7b7      	b.n	176b2 <SEGGER_RTT_WriteNoLock+0x2a>
  WrOff = pRing->WrOff;
   17742:	f100 0801 	add.w	r8, r0, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   17746:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1774a:	6a75      	ldr	r5, [r6, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1774c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   17750:	2700      	movs	r7, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   17752:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   17754:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   17756:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1775a:	d922      	bls.n	177a2 <SEGGER_RTT_WriteNoLock+0x11a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   1775c:	1b62      	subs	r2, r4, r5
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1775e:	6a34      	ldr	r4, [r6, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   17760:	4552      	cmp	r2, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   17762:	eb09 0108 	add.w	r1, r9, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   17766:	eba4 0405 	sub.w	r4, r4, r5
   1776a:	bf28      	it	cs
   1776c:	4652      	movcs	r2, sl
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1776e:	4294      	cmp	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   17770:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   17772:	bf28      	it	cs
   17774:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   17776:	4428      	add	r0, r5
   17778:	4659      	mov	r1, fp
   1777a:	4622      	mov	r2, r4
   1777c:	f7f9 fe7c 	bl	11478 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   17780:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
   17782:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   17784:	429d      	cmp	r5, r3
    NumBytes        -= NumBytesToWrite;
   17786:	ebaa 0a04 	sub.w	sl, sl, r4
    NumBytesWritten += NumBytesToWrite;
   1778a:	4427      	add	r7, r4
    pBuffer         += NumBytesToWrite;
   1778c:	44a3      	add	fp, r4
    if (WrOff == pRing->SizeOfBuffer) {
   1778e:	d00d      	beq.n	177ac <SEGGER_RTT_WriteNoLock+0x124>
    pRing->WrOff = WrOff;
   17790:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   17792:	f1ba 0f00 	cmp.w	sl, #0
   17796:	d08c      	beq.n	176b2 <SEGGER_RTT_WriteNoLock+0x2a>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   17798:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   1779a:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   1779c:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   177a0:	d8dc      	bhi.n	1775c <SEGGER_RTT_WriteNoLock+0xd4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   177a2:	6a34      	ldr	r4, [r6, #32]
   177a4:	4422      	add	r2, r4
   177a6:	3a01      	subs	r2, #1
   177a8:	1b52      	subs	r2, r2, r5
   177aa:	e7d9      	b.n	17760 <SEGGER_RTT_WriteNoLock+0xd8>
    pRing->WrOff = WrOff;
   177ac:	2500      	movs	r5, #0
   177ae:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   177b0:	f1ba 0f00 	cmp.w	sl, #0
   177b4:	d1cd      	bne.n	17752 <SEGGER_RTT_WriteNoLock+0xca>
   177b6:	e77c      	b.n	176b2 <SEGGER_RTT_WriteNoLock+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   177b8:	6a36      	ldr	r6, [r6, #32]
   177ba:	4437      	add	r7, r6
   177bc:	3f01      	subs	r7, #1
   177be:	1b7f      	subs	r7, r7, r5
    Status = Avail < NumBytes ? Avail : NumBytes;
   177c0:	4557      	cmp	r7, sl
   177c2:	bf28      	it	cs
   177c4:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   177c6:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   177c8:	4297      	cmp	r7, r2
   177ca:	d383      	bcc.n	176d4 <SEGGER_RTT_WriteNoLock+0x4c>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   177cc:	f108 0a01 	add.w	sl, r8, #1
   177d0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   177d4:	eb09 0aca 	add.w	sl, r9, sl, lsl #3
   177d8:	4659      	mov	r1, fp
   177da:	f8da 0004 	ldr.w	r0, [sl, #4]
   177de:	9201      	str	r2, [sp, #4]
   177e0:	4428      	add	r0, r5
   177e2:	f7f9 fe49 	bl	11478 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   177e6:	1bbe      	subs	r6, r7, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   177e8:	9a01      	ldr	r2, [sp, #4]
   177ea:	f8da 0004 	ldr.w	r0, [sl, #4]
    NumBytesAtOnce = NumBytes - Rem;
   177ee:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   177f0:	eb0b 0102 	add.w	r1, fp, r2
   177f4:	462a      	mov	r2, r5
   177f6:	f7f9 fe3f 	bl	11478 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   177fa:	4444      	add	r4, r8
   177fc:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
}
   17800:	4638      	mov	r0, r7
    pRing->WrOff = NumBytesAtOnce;
   17802:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   17806:	b003      	add	sp, #12
   17808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1780c:	f8d9 0004 	ldr.w	r0, [r9, #4]
   17810:	4428      	add	r0, r5
    NumBytesAtOnce = NumBytes - Rem;
   17812:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   17814:	463a      	mov	r2, r7
    NumBytesAtOnce = NumBytes - Rem;
   17816:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   17818:	f7f9 fe2e 	bl	11478 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1781c:	eb0b 0107 	add.w	r1, fp, r7
   17820:	f8d9 0004 	ldr.w	r0, [r9, #4]
   17824:	462a      	mov	r2, r5
   17826:	f7f9 fe27 	bl	11478 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1782a:	4657      	mov	r7, sl
   1782c:	6265      	str	r5, [r4, #36]	; 0x24
   1782e:	e740      	b.n	176b2 <SEGGER_RTT_WriteNoLock+0x2a>
   17830:	200000d8 	.word	0x200000d8

00017834 <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
   17834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INIT();
   17838:	4c3e      	ldr	r4, [pc, #248]	; (17934 <SEGGER_RTT_GetKey+0x100>)
int SEGGER_RTT_GetKey(void) {
   1783a:	b082      	sub	sp, #8
  SEGGER_RTT_LOCK();
   1783c:	f7f5 fcba 	bl	d1b4 <os_arch_save_sr>
  INIT();
   17840:	7825      	ldrb	r5, [r4, #0]
  SEGGER_RTT_LOCK();
   17842:	4606      	mov	r6, r0
  INIT();
   17844:	2d00      	cmp	r5, #0
   17846:	d04d      	beq.n	178e4 <SEGGER_RTT_GetKey+0xb0>
  WrOff = pRing->WrOff;
   17848:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  RdOff = pRing->RdOff;
   1784c:	6c25      	ldr	r5, [r4, #64]	; 0x40
  if (RdOff > WrOff) {
   1784e:	4555      	cmp	r5, sl
   17850:	d809      	bhi.n	17866 <SEGGER_RTT_GetKey+0x32>
  if (NumBytesRem > 0u) {
   17852:	4555      	cmp	r5, sl
   17854:	d128      	bne.n	178a8 <SEGGER_RTT_GetKey+0x74>
  SEGGER_RTT_UNLOCK();
   17856:	4630      	mov	r0, r6
   17858:	f7f5 fcb2 	bl	d1c0 <os_arch_restore_sr>

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
  if (r == 1) {
    r = (int)(unsigned char)c;
  } else {
    r = -1;
   1785c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
   17860:	b002      	add	sp, #8
   17862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   17866:	e9d4 980d 	ldrd	r9, r8, [r4, #52]	; 0x34
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
   1786a:	eba8 0705 	sub.w	r7, r8, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
   1786e:	2f01      	cmp	r7, #1
   17870:	bf28      	it	cs
   17872:	2701      	movcs	r7, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   17874:	463a      	mov	r2, r7
   17876:	eb09 0105 	add.w	r1, r9, r5
   1787a:	f10d 0007 	add.w	r0, sp, #7
   1787e:	f7f9 fdfb 	bl	11478 <memcpy>
    RdOff        += NumBytesRem;
   17882:	19eb      	adds	r3, r5, r7
    if (RdOff == pRing->SizeOfBuffer) {
   17884:	4598      	cmp	r8, r3
    BufferSize   -= NumBytesRem;
   17886:	f1c7 0201 	rsb	r2, r7, #1
  NumBytesRem = WrOff - RdOff;
   1788a:	bf14      	ite	ne
   1788c:	ebaa 0a03 	subne.w	sl, sl, r3
      RdOff = 0u;
   17890:	2300      	moveq	r3, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
   17892:	4552      	cmp	r2, sl
   17894:	bf28      	it	cs
   17896:	4652      	movcs	r2, sl
  if (NumBytesRem > 0u) {
   17898:	b9a2      	cbnz	r2, 178c4 <SEGGER_RTT_GetKey+0x90>
  if (NumBytesRead) {
   1789a:	4545      	cmp	r5, r8
   1789c:	d0db      	beq.n	17856 <SEGGER_RTT_GetKey+0x22>
  SEGGER_RTT_UNLOCK();
   1789e:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   178a0:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   178a2:	f7f5 fc8d 	bl	d1c0 <os_arch_restore_sr>
  if (r == 1) {
   178a6:	e008      	b.n	178ba <SEGGER_RTT_GetKey+0x86>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   178a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    RdOff        += NumBytesRem;
   178aa:	1c6b      	adds	r3, r5, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   178ac:	5d52      	ldrb	r2, [r2, r5]
   178ae:	f88d 2007 	strb.w	r2, [sp, #7]
  SEGGER_RTT_UNLOCK();
   178b2:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   178b4:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   178b6:	f7f5 fc83 	bl	d1c0 <os_arch_restore_sr>
    r = (int)(unsigned char)c;
   178ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   178be:	b002      	add	sp, #8
   178c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   178c4:	f107 0208 	add.w	r2, r7, #8
   178c8:	eb0d 0702 	add.w	r7, sp, r2
   178cc:	f819 2003 	ldrb.w	r2, [r9, r3]
   178d0:	f807 2c01 	strb.w	r2, [r7, #-1]
    RdOff        += NumBytesRem;
   178d4:	3301      	adds	r3, #1
  SEGGER_RTT_UNLOCK();
   178d6:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   178d8:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   178da:	f7f5 fc71 	bl	d1c0 <os_arch_restore_sr>
  if (r == 1) {
   178de:	4545      	cmp	r5, r8
   178e0:	d0eb      	beq.n	178ba <SEGGER_RTT_GetKey+0x86>
   178e2:	e7bb      	b.n	1785c <SEGGER_RTT_GetKey+0x28>
  p->aUp[0].sName         = "Terminal";
   178e4:	4a14      	ldr	r2, [pc, #80]	; (17938 <SEGGER_RTT_GetKey+0x104>)
  p->aUp[0].RdOff         = 0u;
   178e6:	62a5      	str	r5, [r4, #40]	; 0x28
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   178e8:	2301      	movs	r3, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   178ea:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   178ee:	f104 0348 	add.w	r3, r4, #72	; 0x48
   178f2:	e9c4 2306 	strd	r2, r3, [r4, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   178f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   178fa:	6223      	str	r3, [r4, #32]
  strcpy(&p->acID[7], "RTT");
   178fc:	4b0f      	ldr	r3, [pc, #60]	; (1793c <SEGGER_RTT_GetKey+0x108>)
  p->aDown[0].WrOff         = 0u;
   178fe:	63e5      	str	r5, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   17900:	6818      	ldr	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
   17902:	4b0f      	ldr	r3, [pc, #60]	; (17940 <SEGGER_RTT_GetKey+0x10c>)
  WrOff = pRing->WrOff;
   17904:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   17908:	f8c4 0007 	str.w	r0, [r4, #7]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1790c:	f504 6189 	add.w	r1, r4, #1096	; 0x448
   17910:	6361      	str	r1, [r4, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   17912:	e893 0003 	ldmia.w	r3, {r0, r1}
  p->acID[6] = ' ';
   17916:	2320      	movs	r3, #32
   17918:	71a3      	strb	r3, [r4, #6]
  if (NumBytesRem > 0u) {
   1791a:	4555      	cmp	r5, sl
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1791c:	f04f 0310 	mov.w	r3, #16
  p->aDown[0].sName         = "Terminal";
   17920:	e9c4 520b 	strd	r5, r2, [r4, #44]	; 0x2c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   17924:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  p->aUp[0].WrOff         = 0u;
   17928:	6265      	str	r5, [r4, #36]	; 0x24
  strcpy(&p->acID[0], "SEGGER");
   1792a:	6020      	str	r0, [r4, #0]
   1792c:	80a1      	strh	r1, [r4, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1792e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (NumBytesRem > 0u) {
   17930:	d091      	beq.n	17856 <SEGGER_RTT_GetKey+0x22>
   17932:	e7b9      	b.n	178a8 <SEGGER_RTT_GetKey+0x74>
   17934:	200000d8 	.word	0x200000d8
   17938:	00024848 	.word	0x00024848
   1793c:	00024854 	.word	0x00024854
   17940:	00024858 	.word	0x00024858

00017944 <SEGGER_RTT_Init>:
  strcpy(&p->acID[7], "RTT");
   17944:	4814      	ldr	r0, [pc, #80]	; (17998 <SEGGER_RTT_Init+0x54>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   17946:	4b15      	ldr	r3, [pc, #84]	; (1799c <SEGGER_RTT_Init+0x58>)
  strcpy(&p->acID[0], "SEGGER");
   17948:	4915      	ldr	r1, [pc, #84]	; (179a0 <SEGGER_RTT_Init+0x5c>)
  strcpy(&p->acID[7], "RTT");
   1794a:	6800      	ldr	r0, [r0, #0]
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1794c:	b410      	push	{r4}
  strcpy(&p->acID[7], "RTT");
   1794e:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
   17952:	c903      	ldmia	r1, {r0, r1}
  p->aUp[0].sName         = "Terminal";
   17954:	4c13      	ldr	r4, [pc, #76]	; (179a4 <SEGGER_RTT_Init+0x60>)
  strcpy(&p->acID[0], "SEGGER");
   17956:	6018      	str	r0, [r3, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   17958:	2001      	movs	r0, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1795a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1795e:	f103 0048 	add.w	r0, r3, #72	; 0x48
   17962:	e9c3 4006 	strd	r4, r0, [r3, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   17966:	f44f 6080 	mov.w	r0, #1024	; 0x400
  p->acID[6] = ' ';
   1796a:	f04f 0c20 	mov.w	ip, #32
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1796e:	6218      	str	r0, [r3, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   17970:	f503 6089 	add.w	r0, r3, #1096	; 0x448
  p->aUp[0].RdOff         = 0u;
   17974:	2200      	movs	r2, #0
  p->acID[6] = ' ';
   17976:	f883 c006 	strb.w	ip, [r3, #6]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1797a:	6358      	str	r0, [r3, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   1797c:	8099      	strh	r1, [r3, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1797e:	2010      	movs	r0, #16
  p->aDown[0].sName         = "Terminal";
   17980:	e9c3 240b 	strd	r2, r4, [r3, #44]	; 0x2c
  p->aUp[0].RdOff         = 0u;
   17984:	629a      	str	r2, [r3, #40]	; 0x28
  _DoInit();
}
   17986:	f85d 4b04 	ldr.w	r4, [sp], #4
  p->aUp[0].WrOff         = 0u;
   1798a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1798c:	6398      	str	r0, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
   1798e:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
   17990:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   17992:	645a      	str	r2, [r3, #68]	; 0x44
}
   17994:	4770      	bx	lr
   17996:	bf00      	nop
   17998:	00024854 	.word	0x00024854
   1799c:	200000d8 	.word	0x200000d8
   179a0:	00024858 	.word	0x00024858
   179a4:	00024848 	.word	0x00024848

000179a8 <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   179a8:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   179aa:	f7fa fa02 	bl	11db2 <dpl_cputime_get32>
   179ae:	4601      	mov	r1, r0
   179b0:	4805      	ldr	r0, [pc, #20]	; (179c8 <dw1000_pkg_init+0x20>)
   179b2:	f7fa f96f 	bl	11c94 <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   179b6:	2000      	movs	r0, #0
   179b8:	f7f1 fa86 	bl	8ec8 <hal_dw1000_inst>
   179bc:	f7f2 fa36 	bl	9e2c <dw1000_dev_config>
        dw1000_dev_config((struct _dw1000_dev_instance_t*)dev);
    }
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
   179c0:	f000 ffee 	bl	189a0 <dw1000_cli_register>
#endif
}
   179c4:	bd08      	pop	{r3, pc}
   179c6:	bf00      	nop
   179c8:	00024860 	.word	0x00024860

000179cc <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   179cc:	b510      	push	{r4, lr}
   179ce:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   179d0:	f7fa f9ef 	bl	11db2 <dpl_cputime_get32>
   179d4:	4601      	mov	r1, r0
   179d6:	480d      	ldr	r0, [pc, #52]	; (17a0c <dw1000_pkg_down+0x40>)
   179d8:	f7fa f95c 	bl	11c94 <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   179dc:	480c      	ldr	r0, [pc, #48]	; (17a10 <dw1000_pkg_down+0x44>)
   179de:	f7f5 ffbb 	bl	d958 <os_dev_lookup>
    if (dev) {
   179e2:	b108      	cbz	r0, 179e8 <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   179e4:	f7f2 fbe4 	bl	a1b0 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   179e8:	480a      	ldr	r0, [pc, #40]	; (17a14 <dw1000_pkg_down+0x48>)
   179ea:	f7f5 ffb5 	bl	d958 <os_dev_lookup>
    if (dev) {
   179ee:	b108      	cbz	r0, 179f4 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   179f0:	f7f2 fbde 	bl	a1b0 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   179f4:	4808      	ldr	r0, [pc, #32]	; (17a18 <dw1000_pkg_down+0x4c>)
   179f6:	f7f5 ffaf 	bl	d958 <os_dev_lookup>
    if (dev) {
   179fa:	b108      	cbz	r0, 17a00 <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   179fc:	f7f2 fbd8 	bl	a1b0 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   17a00:	4620      	mov	r0, r4
   17a02:	f000 ffd5 	bl	189b0 <dw1000_cli_down>
#endif
    return 0;
}
   17a06:	2000      	movs	r0, #0
   17a08:	bd10      	pop	{r4, pc}
   17a0a:	bf00      	nop
   17a0c:	0002488c 	.word	0x0002488c
   17a10:	00024824 	.word	0x00024824
   17a14:	000248b8 	.word	0x000248b8
   17a18:	000248c4 	.word	0x000248c4

00017a1c <fctrl_ledgend>:
    return b;
}

static void
fctrl_ledgend(struct streamer *streamer)
{
   17a1c:	b510      	push	{r4, lr}
   17a1e:	4604      	mov	r4, r0
    streamer_printf(streamer, "   D=Data, A=Ack, M=Mac\n");
   17a20:	4909      	ldr	r1, [pc, #36]	; (17a48 <fctrl_ledgend+0x2c>)
   17a22:	f7fe fb14 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "   Secr: Security enabled, fPnd: Frame pending, ACKr: Ack requested, PANc: PANID Compress\n");
   17a26:	4909      	ldr	r1, [pc, #36]	; (17a4c <fctrl_ledgend+0x30>)
   17a28:	4620      	mov	r0, r4
   17a2a:	f7fe fb10 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "   Dst: No=no dest addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   17a2e:	4908      	ldr	r1, [pc, #32]	; (17a50 <fctrl_ledgend+0x34>)
   17a30:	4620      	mov	r0, r4
   17a32:	f7fe fb0c 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "   Frame version: I-IEEE 802.15.4, I2003-IEEE 802.15.4-2003, iFv-Invalid Frame Version\n");
   17a36:	4907      	ldr	r1, [pc, #28]	; (17a54 <fctrl_ledgend+0x38>)
   17a38:	4620      	mov	r0, r4
   17a3a:	f7fe fb08 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "   Src: No=no src addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   17a3e:	4906      	ldr	r1, [pc, #24]	; (17a58 <fctrl_ledgend+0x3c>)
   17a40:	4620      	mov	r0, r4
   17a42:	f7fe fb04 	bl	1604e <streamer_printf>
}
   17a46:	bd10      	pop	{r4, pc}
   17a48:	000248d0 	.word	0x000248d0
   17a4c:	000248ec 	.word	0x000248ec
   17a50:	00024948 	.word	0x00024948
   17a54:	00024990 	.word	0x00024990
   17a58:	000249e8 	.word	0x000249e8

00017a5c <dw1000_cli_too_few_args>:
#endif

#ifndef __KERNEL__
static void
dw1000_cli_too_few_args(struct streamer *streamer)
{
   17a5c:	b508      	push	{r3, lr}
    streamer_printf(streamer, "Too few args\n");
   17a5e:	4902      	ldr	r1, [pc, #8]	; (17a68 <dw1000_cli_too_few_args+0xc>)
   17a60:	f7fe faf5 	bl	1604e <streamer_printf>
}
   17a64:	bd08      	pop	{r3, pc}
   17a66:	bf00      	nop
   17a68:	00024a30 	.word	0x00024a30

00017a6c <fctrl_to_string>:
{
   17a6c:	b570      	push	{r4, r5, r6, lr}
   17a6e:	4605      	mov	r5, r0
    memset(b,0,sizeof(b));
   17a70:	2228      	movs	r2, #40	; 0x28
   17a72:	2100      	movs	r1, #0
   17a74:	489c      	ldr	r0, [pc, #624]	; (17ce8 <fctrl_to_string+0x27c>)
   17a76:	f7f9 fd0c 	bl	11492 <memset>
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   17a7a:	f005 0607 	and.w	r6, r5, #7
   17a7e:	2e01      	cmp	r6, #1
   17a80:	d04e      	beq.n	17b20 <fctrl_to_string+0xb4>
    char *bp = b;
   17a82:	4c99      	ldr	r4, [pc, #612]	; (17ce8 <fctrl_to_string+0x27c>)
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   17a84:	2e02      	cmp	r6, #2
   17a86:	d054      	beq.n	17b32 <fctrl_to_string+0xc6>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   17a88:	2e03      	cmp	r6, #3
   17a8a:	d05c      	beq.n	17b46 <fctrl_to_string+0xda>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17a8c:	2e04      	cmp	r6, #4
   17a8e:	d064      	beq.n	17b5a <fctrl_to_string+0xee>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17a90:	2e05      	cmp	r6, #5
   17a92:	d06c      	beq.n	17b6e <fctrl_to_string+0x102>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17a94:	2e06      	cmp	r6, #6
   17a96:	d074      	beq.n	17b82 <fctrl_to_string+0x116>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17a98:	2e07      	cmp	r6, #7
   17a9a:	d07c      	beq.n	17b96 <fctrl_to_string+0x12a>
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   17a9c:	f015 0f08 	tst.w	r5, #8
   17aa0:	f040 8083 	bne.w	17baa <fctrl_to_string+0x13e>
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   17aa4:	f015 0f10 	tst.w	r5, #16
   17aa8:	f040 8089 	bne.w	17bbe <fctrl_to_string+0x152>
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   17aac:	f015 0f20 	tst.w	r5, #32
   17ab0:	f040 808f 	bne.w	17bd2 <fctrl_to_string+0x166>
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   17ab4:	f015 0f40 	tst.w	r5, #64	; 0x40
   17ab8:	f040 8095 	bne.w	17be6 <fctrl_to_string+0x17a>
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   17abc:	f415 6640 	ands.w	r6, r5, #3072	; 0xc00
   17ac0:	f000 809b 	beq.w	17bfa <fctrl_to_string+0x18e>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   17ac4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   17ac8:	f000 80a1 	beq.w	17c0e <fctrl_to_string+0x1a2>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   17acc:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   17ad0:	f000 80a7 	beq.w	17c22 <fctrl_to_string+0x1b6>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   17ad4:	f5b6 6f40 	cmp.w	r6, #3072	; 0xc00
   17ad8:	f000 80ad 	beq.w	17c36 <fctrl_to_string+0x1ca>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   17adc:	f415 5640 	ands.w	r6, r5, #12288	; 0x3000
   17ae0:	f000 80b3 	beq.w	17c4a <fctrl_to_string+0x1de>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   17ae4:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   17ae8:	f000 80b9 	beq.w	17c5e <fctrl_to_string+0x1f2>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   17aec:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   17af0:	f000 80bf 	beq.w	17c72 <fctrl_to_string+0x206>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   17af4:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
   17af8:	f000 80c5 	beq.w	17c86 <fctrl_to_string+0x21a>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   17afc:	f415 4540 	ands.w	r5, r5, #49152	; 0xc000
   17b00:	f000 80cb 	beq.w	17c9a <fctrl_to_string+0x22e>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   17b04:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   17b08:	f000 80d1 	beq.w	17cae <fctrl_to_string+0x242>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   17b0c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   17b10:	f000 80d7 	beq.w	17cc2 <fctrl_to_string+0x256>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   17b14:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
   17b18:	f000 80dd 	beq.w	17cd6 <fctrl_to_string+0x26a>
}
   17b1c:	4872      	ldr	r0, [pc, #456]	; (17ce8 <fctrl_to_string+0x27c>)
   17b1e:	bd70      	pop	{r4, r5, r6, pc}
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   17b20:	4a71      	ldr	r2, [pc, #452]	; (17ce8 <fctrl_to_string+0x27c>)
   17b22:	4b72      	ldr	r3, [pc, #456]	; (17cec <fctrl_to_string+0x280>)
   17b24:	681b      	ldr	r3, [r3, #0]
   17b26:	4614      	mov	r4, r2
   17b28:	f824 3b02 	strh.w	r3, [r4], #2
   17b2c:	0c1b      	lsrs	r3, r3, #16
   17b2e:	7093      	strb	r3, [r2, #2]
   17b30:	e7a8      	b.n	17a84 <fctrl_to_string+0x18>
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   17b32:	496d      	ldr	r1, [pc, #436]	; (17ce8 <fctrl_to_string+0x27c>)
   17b34:	1a61      	subs	r1, r4, r1
   17b36:	4a6e      	ldr	r2, [pc, #440]	; (17cf0 <fctrl_to_string+0x284>)
   17b38:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17b3c:	4620      	mov	r0, r4
   17b3e:	f7fa f8d8 	bl	11cf2 <snprintf>
   17b42:	4404      	add	r4, r0
   17b44:	e7a0      	b.n	17a88 <fctrl_to_string+0x1c>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   17b46:	4968      	ldr	r1, [pc, #416]	; (17ce8 <fctrl_to_string+0x27c>)
   17b48:	1a61      	subs	r1, r4, r1
   17b4a:	4a6a      	ldr	r2, [pc, #424]	; (17cf4 <fctrl_to_string+0x288>)
   17b4c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17b50:	4620      	mov	r0, r4
   17b52:	f7fa f8ce 	bl	11cf2 <snprintf>
   17b56:	4404      	add	r4, r0
   17b58:	e798      	b.n	17a8c <fctrl_to_string+0x20>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17b5a:	4963      	ldr	r1, [pc, #396]	; (17ce8 <fctrl_to_string+0x27c>)
   17b5c:	1a61      	subs	r1, r4, r1
   17b5e:	4a66      	ldr	r2, [pc, #408]	; (17cf8 <fctrl_to_string+0x28c>)
   17b60:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17b64:	4620      	mov	r0, r4
   17b66:	f7fa f8c4 	bl	11cf2 <snprintf>
   17b6a:	4404      	add	r4, r0
   17b6c:	e790      	b.n	17a90 <fctrl_to_string+0x24>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17b6e:	495e      	ldr	r1, [pc, #376]	; (17ce8 <fctrl_to_string+0x27c>)
   17b70:	1a61      	subs	r1, r4, r1
   17b72:	4a61      	ldr	r2, [pc, #388]	; (17cf8 <fctrl_to_string+0x28c>)
   17b74:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17b78:	4620      	mov	r0, r4
   17b7a:	f7fa f8ba 	bl	11cf2 <snprintf>
   17b7e:	4404      	add	r4, r0
   17b80:	e788      	b.n	17a94 <fctrl_to_string+0x28>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17b82:	4959      	ldr	r1, [pc, #356]	; (17ce8 <fctrl_to_string+0x27c>)
   17b84:	1a61      	subs	r1, r4, r1
   17b86:	4a5c      	ldr	r2, [pc, #368]	; (17cf8 <fctrl_to_string+0x28c>)
   17b88:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17b8c:	4620      	mov	r0, r4
   17b8e:	f7fa f8b0 	bl	11cf2 <snprintf>
   17b92:	4404      	add	r4, r0
   17b94:	e780      	b.n	17a98 <fctrl_to_string+0x2c>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   17b96:	4954      	ldr	r1, [pc, #336]	; (17ce8 <fctrl_to_string+0x27c>)
   17b98:	1a61      	subs	r1, r4, r1
   17b9a:	4a57      	ldr	r2, [pc, #348]	; (17cf8 <fctrl_to_string+0x28c>)
   17b9c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17ba0:	4620      	mov	r0, r4
   17ba2:	f7fa f8a6 	bl	11cf2 <snprintf>
   17ba6:	4404      	add	r4, r0
   17ba8:	e778      	b.n	17a9c <fctrl_to_string+0x30>
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   17baa:	494f      	ldr	r1, [pc, #316]	; (17ce8 <fctrl_to_string+0x27c>)
   17bac:	1a61      	subs	r1, r4, r1
   17bae:	4a53      	ldr	r2, [pc, #332]	; (17cfc <fctrl_to_string+0x290>)
   17bb0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17bb4:	4620      	mov	r0, r4
   17bb6:	f7fa f89c 	bl	11cf2 <snprintf>
   17bba:	4404      	add	r4, r0
   17bbc:	e772      	b.n	17aa4 <fctrl_to_string+0x38>
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   17bbe:	494a      	ldr	r1, [pc, #296]	; (17ce8 <fctrl_to_string+0x27c>)
   17bc0:	1a61      	subs	r1, r4, r1
   17bc2:	4a4f      	ldr	r2, [pc, #316]	; (17d00 <fctrl_to_string+0x294>)
   17bc4:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17bc8:	4620      	mov	r0, r4
   17bca:	f7fa f892 	bl	11cf2 <snprintf>
   17bce:	4404      	add	r4, r0
   17bd0:	e76c      	b.n	17aac <fctrl_to_string+0x40>
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   17bd2:	4945      	ldr	r1, [pc, #276]	; (17ce8 <fctrl_to_string+0x27c>)
   17bd4:	1a61      	subs	r1, r4, r1
   17bd6:	4a4b      	ldr	r2, [pc, #300]	; (17d04 <fctrl_to_string+0x298>)
   17bd8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17bdc:	4620      	mov	r0, r4
   17bde:	f7fa f888 	bl	11cf2 <snprintf>
   17be2:	4404      	add	r4, r0
   17be4:	e766      	b.n	17ab4 <fctrl_to_string+0x48>
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   17be6:	4940      	ldr	r1, [pc, #256]	; (17ce8 <fctrl_to_string+0x27c>)
   17be8:	1a61      	subs	r1, r4, r1
   17bea:	4a47      	ldr	r2, [pc, #284]	; (17d08 <fctrl_to_string+0x29c>)
   17bec:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17bf0:	4620      	mov	r0, r4
   17bf2:	f7fa f87e 	bl	11cf2 <snprintf>
   17bf6:	4404      	add	r4, r0
   17bf8:	e760      	b.n	17abc <fctrl_to_string+0x50>
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   17bfa:	493b      	ldr	r1, [pc, #236]	; (17ce8 <fctrl_to_string+0x27c>)
   17bfc:	1a61      	subs	r1, r4, r1
   17bfe:	4a43      	ldr	r2, [pc, #268]	; (17d0c <fctrl_to_string+0x2a0>)
   17c00:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c04:	4620      	mov	r0, r4
   17c06:	f7fa f874 	bl	11cf2 <snprintf>
   17c0a:	4404      	add	r4, r0
   17c0c:	e75a      	b.n	17ac4 <fctrl_to_string+0x58>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   17c0e:	4936      	ldr	r1, [pc, #216]	; (17ce8 <fctrl_to_string+0x27c>)
   17c10:	1a61      	subs	r1, r4, r1
   17c12:	4a3f      	ldr	r2, [pc, #252]	; (17d10 <fctrl_to_string+0x2a4>)
   17c14:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c18:	4620      	mov	r0, r4
   17c1a:	f7fa f86a 	bl	11cf2 <snprintf>
   17c1e:	4404      	add	r4, r0
   17c20:	e754      	b.n	17acc <fctrl_to_string+0x60>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   17c22:	4931      	ldr	r1, [pc, #196]	; (17ce8 <fctrl_to_string+0x27c>)
   17c24:	1a61      	subs	r1, r4, r1
   17c26:	4a3b      	ldr	r2, [pc, #236]	; (17d14 <fctrl_to_string+0x2a8>)
   17c28:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c2c:	4620      	mov	r0, r4
   17c2e:	f7fa f860 	bl	11cf2 <snprintf>
   17c32:	4404      	add	r4, r0
   17c34:	e74e      	b.n	17ad4 <fctrl_to_string+0x68>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   17c36:	492c      	ldr	r1, [pc, #176]	; (17ce8 <fctrl_to_string+0x27c>)
   17c38:	1a61      	subs	r1, r4, r1
   17c3a:	4a37      	ldr	r2, [pc, #220]	; (17d18 <fctrl_to_string+0x2ac>)
   17c3c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c40:	4620      	mov	r0, r4
   17c42:	f7fa f856 	bl	11cf2 <snprintf>
   17c46:	4404      	add	r4, r0
   17c48:	e748      	b.n	17adc <fctrl_to_string+0x70>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   17c4a:	4927      	ldr	r1, [pc, #156]	; (17ce8 <fctrl_to_string+0x27c>)
   17c4c:	1a61      	subs	r1, r4, r1
   17c4e:	4a33      	ldr	r2, [pc, #204]	; (17d1c <fctrl_to_string+0x2b0>)
   17c50:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c54:	4620      	mov	r0, r4
   17c56:	f7fa f84c 	bl	11cf2 <snprintf>
   17c5a:	4404      	add	r4, r0
   17c5c:	e742      	b.n	17ae4 <fctrl_to_string+0x78>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   17c5e:	4922      	ldr	r1, [pc, #136]	; (17ce8 <fctrl_to_string+0x27c>)
   17c60:	1a61      	subs	r1, r4, r1
   17c62:	4a2f      	ldr	r2, [pc, #188]	; (17d20 <fctrl_to_string+0x2b4>)
   17c64:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c68:	4620      	mov	r0, r4
   17c6a:	f7fa f842 	bl	11cf2 <snprintf>
   17c6e:	4404      	add	r4, r0
   17c70:	e73c      	b.n	17aec <fctrl_to_string+0x80>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   17c72:	491d      	ldr	r1, [pc, #116]	; (17ce8 <fctrl_to_string+0x27c>)
   17c74:	1a61      	subs	r1, r4, r1
   17c76:	4a2b      	ldr	r2, [pc, #172]	; (17d24 <fctrl_to_string+0x2b8>)
   17c78:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c7c:	4620      	mov	r0, r4
   17c7e:	f7fa f838 	bl	11cf2 <snprintf>
   17c82:	4404      	add	r4, r0
   17c84:	e736      	b.n	17af4 <fctrl_to_string+0x88>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   17c86:	4918      	ldr	r1, [pc, #96]	; (17ce8 <fctrl_to_string+0x27c>)
   17c88:	1a61      	subs	r1, r4, r1
   17c8a:	4a26      	ldr	r2, [pc, #152]	; (17d24 <fctrl_to_string+0x2b8>)
   17c8c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17c90:	4620      	mov	r0, r4
   17c92:	f7fa f82e 	bl	11cf2 <snprintf>
   17c96:	4404      	add	r4, r0
   17c98:	e730      	b.n	17afc <fctrl_to_string+0x90>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   17c9a:	4913      	ldr	r1, [pc, #76]	; (17ce8 <fctrl_to_string+0x27c>)
   17c9c:	1a61      	subs	r1, r4, r1
   17c9e:	4a22      	ldr	r2, [pc, #136]	; (17d28 <fctrl_to_string+0x2bc>)
   17ca0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17ca4:	4620      	mov	r0, r4
   17ca6:	f7fa f824 	bl	11cf2 <snprintf>
   17caa:	4404      	add	r4, r0
   17cac:	e72a      	b.n	17b04 <fctrl_to_string+0x98>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   17cae:	490e      	ldr	r1, [pc, #56]	; (17ce8 <fctrl_to_string+0x27c>)
   17cb0:	1a61      	subs	r1, r4, r1
   17cb2:	4a1e      	ldr	r2, [pc, #120]	; (17d2c <fctrl_to_string+0x2c0>)
   17cb4:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17cb8:	4620      	mov	r0, r4
   17cba:	f7fa f81a 	bl	11cf2 <snprintf>
   17cbe:	4404      	add	r4, r0
   17cc0:	e724      	b.n	17b0c <fctrl_to_string+0xa0>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   17cc2:	4909      	ldr	r1, [pc, #36]	; (17ce8 <fctrl_to_string+0x27c>)
   17cc4:	1a61      	subs	r1, r4, r1
   17cc6:	4a1a      	ldr	r2, [pc, #104]	; (17d30 <fctrl_to_string+0x2c4>)
   17cc8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17ccc:	4620      	mov	r0, r4
   17cce:	f7fa f810 	bl	11cf2 <snprintf>
   17cd2:	4404      	add	r4, r0
   17cd4:	e71e      	b.n	17b14 <fctrl_to_string+0xa8>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   17cd6:	4904      	ldr	r1, [pc, #16]	; (17ce8 <fctrl_to_string+0x27c>)
   17cd8:	1a61      	subs	r1, r4, r1
   17cda:	4a16      	ldr	r2, [pc, #88]	; (17d34 <fctrl_to_string+0x2c8>)
   17cdc:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   17ce0:	4620      	mov	r0, r4
   17ce2:	f7fa f806 	bl	11cf2 <snprintf>
   17ce6:	e719      	b.n	17b1c <fctrl_to_string+0xb0>
   17ce8:	20006d58 	.word	0x20006d58
   17cec:	00024a40 	.word	0x00024a40
   17cf0:	00024a44 	.word	0x00024a44
   17cf4:	00024a48 	.word	0x00024a48
   17cf8:	00024a4c 	.word	0x00024a4c
   17cfc:	00024a50 	.word	0x00024a50
   17d00:	00024a58 	.word	0x00024a58
   17d04:	00024a60 	.word	0x00024a60
   17d08:	00024a68 	.word	0x00024a68
   17d0c:	00024a70 	.word	0x00024a70
   17d10:	00024a78 	.word	0x00024a78
   17d14:	00024a80 	.word	0x00024a80
   17d18:	00024a88 	.word	0x00024a88
   17d1c:	00024a90 	.word	0x00024a90
   17d20:	00024a98 	.word	0x00024a98
   17d24:	00024a9c 	.word	0x00024a9c
   17d28:	00024aa4 	.word	0x00024aa4
   17d2c:	00024aac 	.word	0x00024aac
   17d30:	00024ab4 	.word	0x00024ab4
   17d34:	00024abc 	.word	0x00024abc

00017d38 <sys_status_to_string>:
{
   17d38:	b570      	push	{r4, r5, r6, lr}
   17d3a:	4605      	mov	r5, r0
   17d3c:	460e      	mov	r6, r1
    memset(b,0,sizeof(b));
   17d3e:	2280      	movs	r2, #128	; 0x80
   17d40:	2100      	movs	r1, #0
   17d42:	48c0      	ldr	r0, [pc, #768]	; (18044 <sys_status_to_string+0x30c>)
   17d44:	f7f9 fba5 	bl	11492 <memset>
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   17d48:	f016 0f04 	tst.w	r6, #4
   17d4c:	f040 808a 	bne.w	17e64 <sys_status_to_string+0x12c>
    char *bp = b;
   17d50:	4cbc      	ldr	r4, [pc, #752]	; (18044 <sys_status_to_string+0x30c>)
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   17d52:	f016 0f02 	tst.w	r6, #2
   17d56:	f040 808f 	bne.w	17e78 <sys_status_to_string+0x140>
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   17d5a:	f016 0f01 	tst.w	r6, #1
   17d5e:	f040 8095 	bne.w	17e8c <sys_status_to_string+0x154>
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   17d62:	2d00      	cmp	r5, #0
   17d64:	f2c0 809c 	blt.w	17ea0 <sys_status_to_string+0x168>
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   17d68:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
   17d6c:	f040 80a2 	bne.w	17eb4 <sys_status_to_string+0x17c>
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   17d70:	f015 5f00 	tst.w	r5, #536870912	; 0x20000000
   17d74:	f040 80a8 	bne.w	17ec8 <sys_status_to_string+0x190>
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   17d78:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
   17d7c:	f040 80ae 	bne.w	17edc <sys_status_to_string+0x1a4>
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   17d80:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
   17d84:	f040 80b4 	bne.w	17ef0 <sys_status_to_string+0x1b8>
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   17d88:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
   17d8c:	f040 80ba 	bne.w	17f04 <sys_status_to_string+0x1cc>
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   17d90:	f015 7f00 	tst.w	r5, #33554432	; 0x2000000
   17d94:	f040 80c0 	bne.w	17f18 <sys_status_to_string+0x1e0>
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   17d98:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
   17d9c:	f040 80c6 	bne.w	17f2c <sys_status_to_string+0x1f4>
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   17da0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   17da4:	f040 80cc 	bne.w	17f40 <sys_status_to_string+0x208>
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   17da8:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
   17dac:	f040 80d2 	bne.w	17f54 <sys_status_to_string+0x21c>
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   17db0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
   17db4:	f040 80d8 	bne.w	17f68 <sys_status_to_string+0x230>
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   17db8:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
   17dbc:	f040 80de 	bne.w	17f7c <sys_status_to_string+0x244>
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   17dc0:	f415 2f00 	tst.w	r5, #524288	; 0x80000
   17dc4:	f040 80e4 	bne.w	17f90 <sys_status_to_string+0x258>
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   17dc8:	f415 2f80 	tst.w	r5, #262144	; 0x40000
   17dcc:	f040 80ea 	bne.w	17fa4 <sys_status_to_string+0x26c>
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   17dd0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
   17dd4:	f040 80f0 	bne.w	17fb8 <sys_status_to_string+0x280>
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   17dd8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
   17ddc:	f040 80f6 	bne.w	17fcc <sys_status_to_string+0x294>
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   17de0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   17de4:	f040 80fc 	bne.w	17fe0 <sys_status_to_string+0x2a8>
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   17de8:	f415 4f80 	tst.w	r5, #16384	; 0x4000
   17dec:	f040 8102 	bne.w	17ff4 <sys_status_to_string+0x2bc>
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   17df0:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   17df4:	f040 8108 	bne.w	18008 <sys_status_to_string+0x2d0>
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   17df8:	f415 5f80 	tst.w	r5, #4096	; 0x1000
   17dfc:	f040 810e 	bne.w	1801c <sys_status_to_string+0x2e4>
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   17e00:	f415 6f00 	tst.w	r5, #2048	; 0x800
   17e04:	f040 8114 	bne.w	18030 <sys_status_to_string+0x2f8>
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   17e08:	f415 6f80 	tst.w	r5, #1024	; 0x400
   17e0c:	f040 814c 	bne.w	180a8 <sys_status_to_string+0x370>
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   17e10:	f415 7f00 	tst.w	r5, #512	; 0x200
   17e14:	f040 8152 	bne.w	180bc <sys_status_to_string+0x384>
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   17e18:	f415 7f80 	tst.w	r5, #256	; 0x100
   17e1c:	f040 8158 	bne.w	180d0 <sys_status_to_string+0x398>
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   17e20:	f015 0f80 	tst.w	r5, #128	; 0x80
   17e24:	f040 815e 	bne.w	180e4 <sys_status_to_string+0x3ac>
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   17e28:	f015 0f40 	tst.w	r5, #64	; 0x40
   17e2c:	f040 8164 	bne.w	180f8 <sys_status_to_string+0x3c0>
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   17e30:	f015 0f20 	tst.w	r5, #32
   17e34:	f040 816a 	bne.w	1810c <sys_status_to_string+0x3d4>
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   17e38:	f015 0f10 	tst.w	r5, #16
   17e3c:	f040 8170 	bne.w	18120 <sys_status_to_string+0x3e8>
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   17e40:	f015 0f08 	tst.w	r5, #8
   17e44:	f040 8176 	bne.w	18134 <sys_status_to_string+0x3fc>
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   17e48:	f015 0f04 	tst.w	r5, #4
   17e4c:	f040 817c 	bne.w	18148 <sys_status_to_string+0x410>
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   17e50:	f015 0f02 	tst.w	r5, #2
   17e54:	f040 8182 	bne.w	1815c <sys_status_to_string+0x424>
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   17e58:	f015 0f01 	tst.w	r5, #1
   17e5c:	f040 8188 	bne.w	18170 <sys_status_to_string+0x438>
}
   17e60:	4878      	ldr	r0, [pc, #480]	; (18044 <sys_status_to_string+0x30c>)
   17e62:	bd70      	pop	{r4, r5, r6, pc}
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   17e64:	4c77      	ldr	r4, [pc, #476]	; (18044 <sys_status_to_string+0x30c>)
   17e66:	4b78      	ldr	r3, [pc, #480]	; (18048 <sys_status_to_string+0x310>)
   17e68:	46a4      	mov	ip, r4
   17e6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   17e6c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
   17e70:	f8ac 3000 	strh.w	r3, [ip]
   17e74:	340d      	adds	r4, #13
   17e76:	e76c      	b.n	17d52 <sys_status_to_string+0x1a>
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   17e78:	4972      	ldr	r1, [pc, #456]	; (18044 <sys_status_to_string+0x30c>)
   17e7a:	1a61      	subs	r1, r4, r1
   17e7c:	4a73      	ldr	r2, [pc, #460]	; (1804c <sys_status_to_string+0x314>)
   17e7e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17e82:	4620      	mov	r0, r4
   17e84:	f7f9 ff35 	bl	11cf2 <snprintf>
   17e88:	4404      	add	r4, r0
   17e8a:	e766      	b.n	17d5a <sys_status_to_string+0x22>
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   17e8c:	496d      	ldr	r1, [pc, #436]	; (18044 <sys_status_to_string+0x30c>)
   17e8e:	1a61      	subs	r1, r4, r1
   17e90:	4a6f      	ldr	r2, [pc, #444]	; (18050 <sys_status_to_string+0x318>)
   17e92:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17e96:	4620      	mov	r0, r4
   17e98:	f7f9 ff2b 	bl	11cf2 <snprintf>
   17e9c:	4404      	add	r4, r0
   17e9e:	e760      	b.n	17d62 <sys_status_to_string+0x2a>
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   17ea0:	4968      	ldr	r1, [pc, #416]	; (18044 <sys_status_to_string+0x30c>)
   17ea2:	1a61      	subs	r1, r4, r1
   17ea4:	4a6b      	ldr	r2, [pc, #428]	; (18054 <sys_status_to_string+0x31c>)
   17ea6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17eaa:	4620      	mov	r0, r4
   17eac:	f7f9 ff21 	bl	11cf2 <snprintf>
   17eb0:	4404      	add	r4, r0
   17eb2:	e759      	b.n	17d68 <sys_status_to_string+0x30>
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   17eb4:	4963      	ldr	r1, [pc, #396]	; (18044 <sys_status_to_string+0x30c>)
   17eb6:	1a61      	subs	r1, r4, r1
   17eb8:	4a67      	ldr	r2, [pc, #412]	; (18058 <sys_status_to_string+0x320>)
   17eba:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17ebe:	4620      	mov	r0, r4
   17ec0:	f7f9 ff17 	bl	11cf2 <snprintf>
   17ec4:	4404      	add	r4, r0
   17ec6:	e753      	b.n	17d70 <sys_status_to_string+0x38>
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   17ec8:	495e      	ldr	r1, [pc, #376]	; (18044 <sys_status_to_string+0x30c>)
   17eca:	1a61      	subs	r1, r4, r1
   17ecc:	4a63      	ldr	r2, [pc, #396]	; (1805c <sys_status_to_string+0x324>)
   17ece:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17ed2:	4620      	mov	r0, r4
   17ed4:	f7f9 ff0d 	bl	11cf2 <snprintf>
   17ed8:	4404      	add	r4, r0
   17eda:	e74d      	b.n	17d78 <sys_status_to_string+0x40>
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   17edc:	4959      	ldr	r1, [pc, #356]	; (18044 <sys_status_to_string+0x30c>)
   17ede:	1a61      	subs	r1, r4, r1
   17ee0:	4a5f      	ldr	r2, [pc, #380]	; (18060 <sys_status_to_string+0x328>)
   17ee2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17ee6:	4620      	mov	r0, r4
   17ee8:	f7f9 ff03 	bl	11cf2 <snprintf>
   17eec:	4404      	add	r4, r0
   17eee:	e747      	b.n	17d80 <sys_status_to_string+0x48>
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   17ef0:	4954      	ldr	r1, [pc, #336]	; (18044 <sys_status_to_string+0x30c>)
   17ef2:	1a61      	subs	r1, r4, r1
   17ef4:	4a5b      	ldr	r2, [pc, #364]	; (18064 <sys_status_to_string+0x32c>)
   17ef6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17efa:	4620      	mov	r0, r4
   17efc:	f7f9 fef9 	bl	11cf2 <snprintf>
   17f00:	4404      	add	r4, r0
   17f02:	e741      	b.n	17d88 <sys_status_to_string+0x50>
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   17f04:	494f      	ldr	r1, [pc, #316]	; (18044 <sys_status_to_string+0x30c>)
   17f06:	1a61      	subs	r1, r4, r1
   17f08:	4a57      	ldr	r2, [pc, #348]	; (18068 <sys_status_to_string+0x330>)
   17f0a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f0e:	4620      	mov	r0, r4
   17f10:	f7f9 feef 	bl	11cf2 <snprintf>
   17f14:	4404      	add	r4, r0
   17f16:	e73b      	b.n	17d90 <sys_status_to_string+0x58>
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   17f18:	494a      	ldr	r1, [pc, #296]	; (18044 <sys_status_to_string+0x30c>)
   17f1a:	1a61      	subs	r1, r4, r1
   17f1c:	4a53      	ldr	r2, [pc, #332]	; (1806c <sys_status_to_string+0x334>)
   17f1e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f22:	4620      	mov	r0, r4
   17f24:	f7f9 fee5 	bl	11cf2 <snprintf>
   17f28:	4404      	add	r4, r0
   17f2a:	e735      	b.n	17d98 <sys_status_to_string+0x60>
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   17f2c:	4945      	ldr	r1, [pc, #276]	; (18044 <sys_status_to_string+0x30c>)
   17f2e:	1a61      	subs	r1, r4, r1
   17f30:	4a4f      	ldr	r2, [pc, #316]	; (18070 <sys_status_to_string+0x338>)
   17f32:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f36:	4620      	mov	r0, r4
   17f38:	f7f9 fedb 	bl	11cf2 <snprintf>
   17f3c:	4404      	add	r4, r0
   17f3e:	e72f      	b.n	17da0 <sys_status_to_string+0x68>
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   17f40:	4940      	ldr	r1, [pc, #256]	; (18044 <sys_status_to_string+0x30c>)
   17f42:	1a61      	subs	r1, r4, r1
   17f44:	4a4b      	ldr	r2, [pc, #300]	; (18074 <sys_status_to_string+0x33c>)
   17f46:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f4a:	4620      	mov	r0, r4
   17f4c:	f7f9 fed1 	bl	11cf2 <snprintf>
   17f50:	4404      	add	r4, r0
   17f52:	e729      	b.n	17da8 <sys_status_to_string+0x70>
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   17f54:	493b      	ldr	r1, [pc, #236]	; (18044 <sys_status_to_string+0x30c>)
   17f56:	1a61      	subs	r1, r4, r1
   17f58:	4a47      	ldr	r2, [pc, #284]	; (18078 <sys_status_to_string+0x340>)
   17f5a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f5e:	4620      	mov	r0, r4
   17f60:	f7f9 fec7 	bl	11cf2 <snprintf>
   17f64:	4404      	add	r4, r0
   17f66:	e723      	b.n	17db0 <sys_status_to_string+0x78>
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   17f68:	4936      	ldr	r1, [pc, #216]	; (18044 <sys_status_to_string+0x30c>)
   17f6a:	1a61      	subs	r1, r4, r1
   17f6c:	4a43      	ldr	r2, [pc, #268]	; (1807c <sys_status_to_string+0x344>)
   17f6e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f72:	4620      	mov	r0, r4
   17f74:	f7f9 febd 	bl	11cf2 <snprintf>
   17f78:	4404      	add	r4, r0
   17f7a:	e71d      	b.n	17db8 <sys_status_to_string+0x80>
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   17f7c:	4931      	ldr	r1, [pc, #196]	; (18044 <sys_status_to_string+0x30c>)
   17f7e:	1a61      	subs	r1, r4, r1
   17f80:	4a3f      	ldr	r2, [pc, #252]	; (18080 <sys_status_to_string+0x348>)
   17f82:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f86:	4620      	mov	r0, r4
   17f88:	f7f9 feb3 	bl	11cf2 <snprintf>
   17f8c:	4404      	add	r4, r0
   17f8e:	e717      	b.n	17dc0 <sys_status_to_string+0x88>
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   17f90:	492c      	ldr	r1, [pc, #176]	; (18044 <sys_status_to_string+0x30c>)
   17f92:	1a61      	subs	r1, r4, r1
   17f94:	4a3b      	ldr	r2, [pc, #236]	; (18084 <sys_status_to_string+0x34c>)
   17f96:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17f9a:	4620      	mov	r0, r4
   17f9c:	f7f9 fea9 	bl	11cf2 <snprintf>
   17fa0:	4404      	add	r4, r0
   17fa2:	e711      	b.n	17dc8 <sys_status_to_string+0x90>
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   17fa4:	4927      	ldr	r1, [pc, #156]	; (18044 <sys_status_to_string+0x30c>)
   17fa6:	1a61      	subs	r1, r4, r1
   17fa8:	4a37      	ldr	r2, [pc, #220]	; (18088 <sys_status_to_string+0x350>)
   17faa:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17fae:	4620      	mov	r0, r4
   17fb0:	f7f9 fe9f 	bl	11cf2 <snprintf>
   17fb4:	4404      	add	r4, r0
   17fb6:	e70b      	b.n	17dd0 <sys_status_to_string+0x98>
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   17fb8:	4922      	ldr	r1, [pc, #136]	; (18044 <sys_status_to_string+0x30c>)
   17fba:	1a61      	subs	r1, r4, r1
   17fbc:	4a33      	ldr	r2, [pc, #204]	; (1808c <sys_status_to_string+0x354>)
   17fbe:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17fc2:	4620      	mov	r0, r4
   17fc4:	f7f9 fe95 	bl	11cf2 <snprintf>
   17fc8:	4404      	add	r4, r0
   17fca:	e705      	b.n	17dd8 <sys_status_to_string+0xa0>
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   17fcc:	491d      	ldr	r1, [pc, #116]	; (18044 <sys_status_to_string+0x30c>)
   17fce:	1a61      	subs	r1, r4, r1
   17fd0:	4a2f      	ldr	r2, [pc, #188]	; (18090 <sys_status_to_string+0x358>)
   17fd2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17fd6:	4620      	mov	r0, r4
   17fd8:	f7f9 fe8b 	bl	11cf2 <snprintf>
   17fdc:	4404      	add	r4, r0
   17fde:	e6ff      	b.n	17de0 <sys_status_to_string+0xa8>
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   17fe0:	4918      	ldr	r1, [pc, #96]	; (18044 <sys_status_to_string+0x30c>)
   17fe2:	1a61      	subs	r1, r4, r1
   17fe4:	4a2b      	ldr	r2, [pc, #172]	; (18094 <sys_status_to_string+0x35c>)
   17fe6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17fea:	4620      	mov	r0, r4
   17fec:	f7f9 fe81 	bl	11cf2 <snprintf>
   17ff0:	4404      	add	r4, r0
   17ff2:	e6f9      	b.n	17de8 <sys_status_to_string+0xb0>
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   17ff4:	4913      	ldr	r1, [pc, #76]	; (18044 <sys_status_to_string+0x30c>)
   17ff6:	1a61      	subs	r1, r4, r1
   17ff8:	4a27      	ldr	r2, [pc, #156]	; (18098 <sys_status_to_string+0x360>)
   17ffa:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   17ffe:	4620      	mov	r0, r4
   18000:	f7f9 fe77 	bl	11cf2 <snprintf>
   18004:	4404      	add	r4, r0
   18006:	e6f3      	b.n	17df0 <sys_status_to_string+0xb8>
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   18008:	490e      	ldr	r1, [pc, #56]	; (18044 <sys_status_to_string+0x30c>)
   1800a:	1a61      	subs	r1, r4, r1
   1800c:	4a23      	ldr	r2, [pc, #140]	; (1809c <sys_status_to_string+0x364>)
   1800e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   18012:	4620      	mov	r0, r4
   18014:	f7f9 fe6d 	bl	11cf2 <snprintf>
   18018:	4404      	add	r4, r0
   1801a:	e6ed      	b.n	17df8 <sys_status_to_string+0xc0>
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   1801c:	4909      	ldr	r1, [pc, #36]	; (18044 <sys_status_to_string+0x30c>)
   1801e:	1a61      	subs	r1, r4, r1
   18020:	4a1f      	ldr	r2, [pc, #124]	; (180a0 <sys_status_to_string+0x368>)
   18022:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   18026:	4620      	mov	r0, r4
   18028:	f7f9 fe63 	bl	11cf2 <snprintf>
   1802c:	4404      	add	r4, r0
   1802e:	e6e7      	b.n	17e00 <sys_status_to_string+0xc8>
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   18030:	4904      	ldr	r1, [pc, #16]	; (18044 <sys_status_to_string+0x30c>)
   18032:	1a61      	subs	r1, r4, r1
   18034:	4a1b      	ldr	r2, [pc, #108]	; (180a4 <sys_status_to_string+0x36c>)
   18036:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1803a:	4620      	mov	r0, r4
   1803c:	f7f9 fe59 	bl	11cf2 <snprintf>
   18040:	4404      	add	r4, r0
   18042:	e6e1      	b.n	17e08 <sys_status_to_string+0xd0>
   18044:	20006cd8 	.word	0x20006cd8
   18048:	00024ac4 	.word	0x00024ac4
   1804c:	00024ad4 	.word	0x00024ad4
   18050:	00024ae4 	.word	0x00024ae4
   18054:	00024af4 	.word	0x00024af4
   18058:	00024b04 	.word	0x00024b04
   1805c:	00024b14 	.word	0x00024b14
   18060:	00024b28 	.word	0x00024b28
   18064:	00024b40 	.word	0x00024b40
   18068:	00024b58 	.word	0x00024b58
   1806c:	00024b68 	.word	0x00024b68
   18070:	00024b7c 	.word	0x00024b7c
   18074:	00024b90 	.word	0x00024b90
   18078:	00024b9c 	.word	0x00024b9c
   1807c:	00024ba8 	.word	0x00024ba8
   18080:	00024bbc 	.word	0x00024bbc
   18084:	00024bc8 	.word	0x00024bc8
   18088:	00024bdc 	.word	0x00024bdc
   1808c:	00024be8 	.word	0x00024be8
   18090:	00024bf4 	.word	0x00024bf4
   18094:	00024c10 	.word	0x00024c10
   18098:	00024c1c 	.word	0x00024c1c
   1809c:	00024c28 	.word	0x00024c28
   180a0:	00024c38 	.word	0x00024c38
   180a4:	00024c44 	.word	0x00024c44
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   180a8:	4936      	ldr	r1, [pc, #216]	; (18184 <sys_status_to_string+0x44c>)
   180aa:	1a61      	subs	r1, r4, r1
   180ac:	4a36      	ldr	r2, [pc, #216]	; (18188 <sys_status_to_string+0x450>)
   180ae:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   180b2:	4620      	mov	r0, r4
   180b4:	f7f9 fe1d 	bl	11cf2 <snprintf>
   180b8:	4404      	add	r4, r0
   180ba:	e6a9      	b.n	17e10 <sys_status_to_string+0xd8>
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   180bc:	4931      	ldr	r1, [pc, #196]	; (18184 <sys_status_to_string+0x44c>)
   180be:	1a61      	subs	r1, r4, r1
   180c0:	4a32      	ldr	r2, [pc, #200]	; (1818c <sys_status_to_string+0x454>)
   180c2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   180c6:	4620      	mov	r0, r4
   180c8:	f7f9 fe13 	bl	11cf2 <snprintf>
   180cc:	4404      	add	r4, r0
   180ce:	e6a3      	b.n	17e18 <sys_status_to_string+0xe0>
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   180d0:	492c      	ldr	r1, [pc, #176]	; (18184 <sys_status_to_string+0x44c>)
   180d2:	1a61      	subs	r1, r4, r1
   180d4:	4a2e      	ldr	r2, [pc, #184]	; (18190 <sys_status_to_string+0x458>)
   180d6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   180da:	4620      	mov	r0, r4
   180dc:	f7f9 fe09 	bl	11cf2 <snprintf>
   180e0:	4404      	add	r4, r0
   180e2:	e69d      	b.n	17e20 <sys_status_to_string+0xe8>
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   180e4:	4927      	ldr	r1, [pc, #156]	; (18184 <sys_status_to_string+0x44c>)
   180e6:	1a61      	subs	r1, r4, r1
   180e8:	4a2a      	ldr	r2, [pc, #168]	; (18194 <sys_status_to_string+0x45c>)
   180ea:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   180ee:	4620      	mov	r0, r4
   180f0:	f7f9 fdff 	bl	11cf2 <snprintf>
   180f4:	4404      	add	r4, r0
   180f6:	e697      	b.n	17e28 <sys_status_to_string+0xf0>
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   180f8:	4922      	ldr	r1, [pc, #136]	; (18184 <sys_status_to_string+0x44c>)
   180fa:	1a61      	subs	r1, r4, r1
   180fc:	4a26      	ldr	r2, [pc, #152]	; (18198 <sys_status_to_string+0x460>)
   180fe:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   18102:	4620      	mov	r0, r4
   18104:	f7f9 fdf5 	bl	11cf2 <snprintf>
   18108:	4404      	add	r4, r0
   1810a:	e691      	b.n	17e30 <sys_status_to_string+0xf8>
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   1810c:	491d      	ldr	r1, [pc, #116]	; (18184 <sys_status_to_string+0x44c>)
   1810e:	1a61      	subs	r1, r4, r1
   18110:	4a22      	ldr	r2, [pc, #136]	; (1819c <sys_status_to_string+0x464>)
   18112:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   18116:	4620      	mov	r0, r4
   18118:	f7f9 fdeb 	bl	11cf2 <snprintf>
   1811c:	4404      	add	r4, r0
   1811e:	e68b      	b.n	17e38 <sys_status_to_string+0x100>
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   18120:	4918      	ldr	r1, [pc, #96]	; (18184 <sys_status_to_string+0x44c>)
   18122:	1a61      	subs	r1, r4, r1
   18124:	4a1e      	ldr	r2, [pc, #120]	; (181a0 <sys_status_to_string+0x468>)
   18126:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1812a:	4620      	mov	r0, r4
   1812c:	f7f9 fde1 	bl	11cf2 <snprintf>
   18130:	4404      	add	r4, r0
   18132:	e685      	b.n	17e40 <sys_status_to_string+0x108>
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   18134:	4913      	ldr	r1, [pc, #76]	; (18184 <sys_status_to_string+0x44c>)
   18136:	1a61      	subs	r1, r4, r1
   18138:	4a1a      	ldr	r2, [pc, #104]	; (181a4 <sys_status_to_string+0x46c>)
   1813a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1813e:	4620      	mov	r0, r4
   18140:	f7f9 fdd7 	bl	11cf2 <snprintf>
   18144:	4404      	add	r4, r0
   18146:	e67f      	b.n	17e48 <sys_status_to_string+0x110>
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   18148:	490e      	ldr	r1, [pc, #56]	; (18184 <sys_status_to_string+0x44c>)
   1814a:	1a61      	subs	r1, r4, r1
   1814c:	4a16      	ldr	r2, [pc, #88]	; (181a8 <sys_status_to_string+0x470>)
   1814e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   18152:	4620      	mov	r0, r4
   18154:	f7f9 fdcd 	bl	11cf2 <snprintf>
   18158:	4404      	add	r4, r0
   1815a:	e679      	b.n	17e50 <sys_status_to_string+0x118>
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   1815c:	4909      	ldr	r1, [pc, #36]	; (18184 <sys_status_to_string+0x44c>)
   1815e:	1a61      	subs	r1, r4, r1
   18160:	4a12      	ldr	r2, [pc, #72]	; (181ac <sys_status_to_string+0x474>)
   18162:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   18166:	4620      	mov	r0, r4
   18168:	f7f9 fdc3 	bl	11cf2 <snprintf>
   1816c:	4404      	add	r4, r0
   1816e:	e673      	b.n	17e58 <sys_status_to_string+0x120>
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   18170:	4904      	ldr	r1, [pc, #16]	; (18184 <sys_status_to_string+0x44c>)
   18172:	1a61      	subs	r1, r4, r1
   18174:	4a0e      	ldr	r2, [pc, #56]	; (181b0 <sys_status_to_string+0x478>)
   18176:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1817a:	4620      	mov	r0, r4
   1817c:	f7f9 fdb9 	bl	11cf2 <snprintf>
   18180:	e66e      	b.n	17e60 <sys_status_to_string+0x128>
   18182:	bf00      	nop
   18184:	20006cd8 	.word	0x20006cd8
   18188:	00024c50 	.word	0x00024c50
   1818c:	00024c5c 	.word	0x00024c5c
   18190:	00024c68 	.word	0x00024c68
   18194:	00024c74 	.word	0x00024c74
   18198:	00024c84 	.word	0x00024c84
   1819c:	00024c90 	.word	0x00024c90
   181a0:	00024ca0 	.word	0x00024ca0
   181a4:	00024cac 	.word	0x00024cac
   181a8:	00024cb8 	.word	0x00024cb8
   181ac:	00024cc8 	.word	0x00024cc8
   181b0:	00024cd8 	.word	0x00024cd8

000181b4 <print_interrupt_bt_line>:
{
   181b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   181b8:	b085      	sub	sp, #20
   181ba:	4614      	mov	r4, r2
   181bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (!p->utime) return 0;
   181be:	6812      	ldr	r2, [r2, #0]
   181c0:	2a00      	cmp	r2, #0
   181c2:	d078      	beq.n	182b6 <print_interrupt_bt_line+0x102>
   181c4:	4606      	mov	r6, r0
   181c6:	460f      	mov	r7, r1
    if (!*start_t) *start_t = p->utime;
   181c8:	6801      	ldr	r1, [r0, #0]
   181ca:	b901      	cbnz	r1, 181ce <print_interrupt_bt_line+0x1a>
   181cc:	6002      	str	r2, [r0, #0]
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   181ce:	2b00      	cmp	r3, #0
   181d0:	d055      	beq.n	1827e <print_interrupt_bt_line+0xca>
   181d2:	6822      	ldr	r2, [r4, #0]
   181d4:	681b      	ldr	r3, [r3, #0]
    if (diff < 0) diff = 0;
   181d6:	ebb2 0803 	subs.w	r8, r2, r3
   181da:	d453      	bmi.n	18284 <print_interrupt_bt_line+0xd0>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime));
   181dc:	f8df 910c 	ldr.w	r9, [pc, #268]	; 182ec <print_interrupt_bt_line+0x138>
   181e0:	6822      	ldr	r2, [r4, #0]
   181e2:	4649      	mov	r1, r9
   181e4:	4628      	mov	r0, r5
   181e6:	f7fd ff32 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime-*start_t));
   181ea:	6822      	ldr	r2, [r4, #0]
   181ec:	6833      	ldr	r3, [r6, #0]
   181ee:	1ad2      	subs	r2, r2, r3
   181f0:	4649      	mov	r1, r9
   181f2:	4628      	mov	r0, r5
   181f4:	f7fd ff2b 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %8lu ", dpl_cputime_ticks_to_usecs(diff));
   181f8:	4642      	mov	r2, r8
   181fa:	4930      	ldr	r1, [pc, #192]	; (182bc <print_interrupt_bt_line+0x108>)
   181fc:	4628      	mov	r0, r5
   181fe:	f7fd ff26 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %6lu ", dpl_cputime_ticks_to_usecs(p->utime_end-p->utime));
   18202:	68e2      	ldr	r2, [r4, #12]
   18204:	6823      	ldr	r3, [r4, #0]
   18206:	1ad2      	subs	r2, r2, r3
   18208:	492d      	ldr	r1, [pc, #180]	; (182c0 <print_interrupt_bt_line+0x10c>)
   1820a:	4628      	mov	r0, r5
   1820c:	f7fd ff1f 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   18210:	7a63      	ldrb	r3, [r4, #9]
   18212:	f013 0f01 	tst.w	r3, #1
   18216:	d038      	beq.n	1828a <print_interrupt_bt_line+0xd6>
   18218:	4a2a      	ldr	r2, [pc, #168]	; (182c4 <print_interrupt_bt_line+0x110>)
   1821a:	492b      	ldr	r1, [pc, #172]	; (182c8 <print_interrupt_bt_line+0x114>)
   1821c:	4628      	mov	r0, r5
   1821e:	f7fd ff16 	bl	1604e <streamer_printf>
    if (p->fctrl) {
   18222:	8960      	ldrh	r0, [r4, #10]
   18224:	2800      	cmp	r0, #0
   18226:	d039      	beq.n	1829c <print_interrupt_bt_line+0xe8>
        if (verbose&0x1) {
   18228:	f017 0f01 	tst.w	r7, #1
   1822c:	d02f      	beq.n	1828e <print_interrupt_bt_line+0xda>
            char *s = fctrl_to_string(p->fctrl);
   1822e:	f7ff fc1d 	bl	17a6c <fctrl_to_string>
   18232:	4606      	mov	r6, r0
            streamer_printf(streamer, " %02X %02X (%s)%*s", p->fctrl&0xff, p->fctrl>>8, s, 32-strlen(s), " ");
   18234:	8967      	ldrh	r7, [r4, #10]
   18236:	f004 fa53 	bl	1c6e0 <strlen>
   1823a:	4b24      	ldr	r3, [pc, #144]	; (182cc <print_interrupt_bt_line+0x118>)
   1823c:	9302      	str	r3, [sp, #8]
   1823e:	f1c0 0020 	rsb	r0, r0, #32
   18242:	9001      	str	r0, [sp, #4]
   18244:	9600      	str	r6, [sp, #0]
   18246:	0a3b      	lsrs	r3, r7, #8
   18248:	b2fa      	uxtb	r2, r7
   1824a:	4921      	ldr	r1, [pc, #132]	; (182d0 <print_interrupt_bt_line+0x11c>)
   1824c:	4628      	mov	r0, r5
   1824e:	f7fd fefe 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %0*llX ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, DW1000_SYS_STATUS_ASSEMBLE(p));
   18252:	6863      	ldr	r3, [r4, #4]
   18254:	2600      	movs	r6, #0
   18256:	9300      	str	r3, [sp, #0]
   18258:	9601      	str	r6, [sp, #4]
   1825a:	2208      	movs	r2, #8
   1825c:	491d      	ldr	r1, [pc, #116]	; (182d4 <print_interrupt_bt_line+0x120>)
   1825e:	4628      	mov	r0, r5
   18260:	f7fd fef5 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %s", sys_status_to_string(DW1000_SYS_STATUS_ASSEMBLE(p)));
   18264:	6860      	ldr	r0, [r4, #4]
   18266:	4631      	mov	r1, r6
   18268:	f7ff fd66 	bl	17d38 <sys_status_to_string>
   1826c:	4602      	mov	r2, r0
   1826e:	491a      	ldr	r1, [pc, #104]	; (182d8 <print_interrupt_bt_line+0x124>)
   18270:	4628      	mov	r0, r5
   18272:	f7fd feec 	bl	1604e <streamer_printf>
    return 1;
   18276:	2001      	movs	r0, #1
}
   18278:	b005      	add	sp, #20
   1827a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   1827e:	f04f 0800 	mov.w	r8, #0
   18282:	e7ab      	b.n	181dc <print_interrupt_bt_line+0x28>
    if (diff < 0) diff = 0;
   18284:	f04f 0800 	mov.w	r8, #0
   18288:	e7a8      	b.n	181dc <print_interrupt_bt_line+0x28>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   1828a:	4a10      	ldr	r2, [pc, #64]	; (182cc <print_interrupt_bt_line+0x118>)
   1828c:	e7c5      	b.n	1821a <print_interrupt_bt_line+0x66>
            streamer_printf(streamer, " %02X %02X ", p->fctrl&0xff, p->fctrl>>8);
   1828e:	0a03      	lsrs	r3, r0, #8
   18290:	b2c2      	uxtb	r2, r0
   18292:	4912      	ldr	r1, [pc, #72]	; (182dc <print_interrupt_bt_line+0x128>)
   18294:	4628      	mov	r0, r5
   18296:	f7fd feda 	bl	1604e <streamer_printf>
   1829a:	e7da      	b.n	18252 <print_interrupt_bt_line+0x9e>
        streamer_printf(streamer, "       ");
   1829c:	4910      	ldr	r1, [pc, #64]	; (182e0 <print_interrupt_bt_line+0x12c>)
   1829e:	4628      	mov	r0, r5
   182a0:	f7fd fed5 	bl	1604e <streamer_printf>
        if (verbose&0x1) {
   182a4:	f017 0f01 	tst.w	r7, #1
   182a8:	d0d3      	beq.n	18252 <print_interrupt_bt_line+0x9e>
            streamer_printf(streamer, " %32s ", "");
   182aa:	4a0e      	ldr	r2, [pc, #56]	; (182e4 <print_interrupt_bt_line+0x130>)
   182ac:	490e      	ldr	r1, [pc, #56]	; (182e8 <print_interrupt_bt_line+0x134>)
   182ae:	4628      	mov	r0, r5
   182b0:	f7fd fecd 	bl	1604e <streamer_printf>
   182b4:	e7cd      	b.n	18252 <print_interrupt_bt_line+0x9e>
    if (!p->utime) return 0;
   182b6:	2000      	movs	r0, #0
   182b8:	e7de      	b.n	18278 <print_interrupt_bt_line+0xc4>
   182ba:	bf00      	nop
   182bc:	00024ce4 	.word	0x00024ce4
   182c0:	00024cec 	.word	0x00024cec
   182c4:	000250b0 	.word	0x000250b0
   182c8:	00024cf4 	.word	0x00024cf4
   182cc:	00025804 	.word	0x00025804
   182d0:	00024cfc 	.word	0x00024cfc
   182d4:	00024d2c 	.word	0x00024d2c
   182d8:	00024d38 	.word	0x00024d38
   182dc:	00024d10 	.word	0x00024d10
   182e0:	00024d1c 	.word	0x00024d1c
   182e4:	00024fa8 	.word	0x00024fa8
   182e8:	00024d24 	.word	0x00024d24
   182ec:	00024cdc 	.word	0x00024cdc

000182f0 <dw1000_cli_dump_registers>:
{
   182f0:	b570      	push	{r4, r5, r6, lr}
   182f2:	b082      	sub	sp, #8
   182f4:	4605      	mov	r5, r0
   182f6:	460e      	mov	r6, r1
    for(i=0; i<0x37; i++)
   182f8:	2400      	movs	r4, #0
   182fa:	e00e      	b.n	1831a <dw1000_cli_dump_registers+0x2a>
            reg = dw1000_read_reg(inst, i, 0, 4);
   182fc:	2304      	movs	r3, #4
   182fe:	2200      	movs	r2, #0
   18300:	b2a1      	uxth	r1, r4
   18302:	4628      	mov	r0, r5
   18304:	f7f1 fb16 	bl	9934 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   18308:	9000      	str	r0, [sp, #0]
   1830a:	2300      	movs	r3, #0
   1830c:	9301      	str	r3, [sp, #4]
   1830e:	4622      	mov	r2, r4
   18310:	4950      	ldr	r1, [pc, #320]	; (18454 <dw1000_cli_dump_registers+0x164>)
   18312:	4630      	mov	r0, r6
   18314:	f7fd fe9b 	bl	1604e <streamer_printf>
    for(i=0; i<0x37; i++)
   18318:	3401      	adds	r4, #1
   1831a:	2c36      	cmp	r4, #54	; 0x36
   1831c:	dc77      	bgt.n	1840e <dw1000_cli_dump_registers+0x11e>
        if (i==0x05 || i==0x07 || i==0x0B ||
   1831e:	2c05      	cmp	r4, #5
   18320:	d0fa      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
   18322:	2c07      	cmp	r4, #7
   18324:	d0f8      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
   18326:	2c0b      	cmp	r4, #11
   18328:	d0f6      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
   1832a:	2c16      	cmp	r4, #22
   1832c:	d0f4      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
            i==0x16 || i==0x1B || i==0x1C ||
   1832e:	2c1b      	cmp	r4, #27
   18330:	d0f2      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
   18332:	2c1c      	cmp	r4, #28
   18334:	d0f0      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
   18336:	2c20      	cmp	r4, #32
   18338:	d0ee      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
            i==0x20 || i==0x22 || i==0x29 ||
   1833a:	2c22      	cmp	r4, #34	; 0x22
   1833c:	d0ec      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
   1833e:	2c29      	cmp	r4, #41	; 0x29
   18340:	d0ea      	beq.n	18318 <dw1000_cli_dump_registers+0x28>
            (i>0x29 && i<0x36)) {
   18342:	f1a4 032a 	sub.w	r3, r4, #42	; 0x2a
            i==0x20 || i==0x22 || i==0x29 ||
   18346:	2b0b      	cmp	r3, #11
   18348:	d9e6      	bls.n	18318 <dw1000_cli_dump_registers+0x28>
        switch (i) {
   1834a:	2c1f      	cmp	r4, #31
   1834c:	d851      	bhi.n	183f2 <dw1000_cli_dump_registers+0x102>
   1834e:	a301      	add	r3, pc, #4	; (adr r3, 18354 <dw1000_cli_dump_registers+0x64>)
   18350:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   18354:	000182fd 	.word	0x000182fd
   18358:	000183f3 	.word	0x000183f3
   1835c:	000183f3 	.word	0x000183f3
   18360:	000182fd 	.word	0x000182fd
   18364:	000182fd 	.word	0x000182fd
   18368:	000183f3 	.word	0x000183f3
   1836c:	000183d5 	.word	0x000183d5
   18370:	000183f3 	.word	0x000183f3
   18374:	000183d5 	.word	0x000183d5
   18378:	000183f3 	.word	0x000183f3
   1837c:	000183d5 	.word	0x000183d5
   18380:	000183f3 	.word	0x000183f3
   18384:	000182fd 	.word	0x000182fd
   18388:	000182fd 	.word	0x000182fd
   1838c:	000183d5 	.word	0x000183d5
   18390:	000183d5 	.word	0x000183d5
   18394:	000182fd 	.word	0x000182fd
   18398:	000183f3 	.word	0x000183f3
   1839c:	000183f3 	.word	0x000183f3
   183a0:	000182fd 	.word	0x000182fd
   183a4:	000183d5 	.word	0x000183d5
   183a8:	000183d5 	.word	0x000183d5
   183ac:	000183f3 	.word	0x000183f3
   183b0:	000183d5 	.word	0x000183d5
   183b4:	000182fd 	.word	0x000182fd
   183b8:	000183d5 	.word	0x000183d5
   183bc:	000182fd 	.word	0x000182fd
   183c0:	000183f3 	.word	0x000183f3
   183c4:	000183f3 	.word	0x000183f3
   183c8:	000182fd 	.word	0x000182fd
   183cc:	000182fd 	.word	0x000182fd
   183d0:	000182fd 	.word	0x000182fd
            reg = dw1000_read_reg(inst, i, 0, 5);
   183d4:	2305      	movs	r3, #5
   183d6:	2200      	movs	r2, #0
   183d8:	b2a1      	uxth	r1, r4
   183da:	4628      	mov	r0, r5
   183dc:	f7f1 faaa 	bl	9934 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   183e0:	b2c9      	uxtb	r1, r1
   183e2:	9000      	str	r0, [sp, #0]
   183e4:	9101      	str	r1, [sp, #4]
   183e6:	4622      	mov	r2, r4
   183e8:	491b      	ldr	r1, [pc, #108]	; (18458 <dw1000_cli_dump_registers+0x168>)
   183ea:	4630      	mov	r0, r6
   183ec:	f7fd fe2f 	bl	1604e <streamer_printf>
            break;
   183f0:	e792      	b.n	18318 <dw1000_cli_dump_registers+0x28>
            reg = dw1000_read_reg(inst, i, 0, l);
   183f2:	2308      	movs	r3, #8
   183f4:	2200      	movs	r2, #0
   183f6:	b2a1      	uxth	r1, r4
   183f8:	4628      	mov	r0, r5
   183fa:	f7f1 fa9b 	bl	9934 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   183fe:	e9cd 0100 	strd	r0, r1, [sp]
   18402:	4622      	mov	r2, r4
   18404:	4915      	ldr	r1, [pc, #84]	; (1845c <dw1000_cli_dump_registers+0x16c>)
   18406:	4630      	mov	r0, r6
   18408:	f7fd fe21 	bl	1604e <streamer_printf>
   1840c:	e784      	b.n	18318 <dw1000_cli_dump_registers+0x28>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   1840e:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   18410:	4913      	ldr	r1, [pc, #76]	; (18460 <dw1000_cli_dump_registers+0x170>)
   18412:	4630      	mov	r0, r6
   18414:	f7fd fe1b 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   18418:	f8b5 2566 	ldrh.w	r2, [r5, #1382]	; 0x566
   1841c:	4911      	ldr	r1, [pc, #68]	; (18464 <dw1000_cli_dump_registers+0x174>)
   1841e:	4630      	mov	r0, r6
   18420:	f7fd fe15 	bl	1604e <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   18424:	2104      	movs	r1, #4
   18426:	4628      	mov	r0, r5
   18428:	f7f0 fbb7 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (rng)
   1842c:	b128      	cbz	r0, 1843a <dw1000_cli_dump_registers+0x14a>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   1842e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   18432:	490d      	ldr	r1, [pc, #52]	; (18468 <dw1000_cli_dump_registers+0x178>)
   18434:	4630      	mov	r0, r6
   18436:	f7fd fe0a 	bl	1604e <streamer_printf>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   1843a:	2101      	movs	r1, #1
   1843c:	4628      	mov	r0, r5
   1843e:	f7f0 fbac 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   18442:	b128      	cbz	r0, 18450 <dw1000_cli_dump_registers+0x160>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   18444:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   18448:	4908      	ldr	r1, [pc, #32]	; (1846c <dw1000_cli_dump_registers+0x17c>)
   1844a:	4630      	mov	r0, r6
   1844c:	f7fd fdff 	bl	1604e <streamer_printf>
}
   18450:	b002      	add	sp, #8
   18452:	bd70      	pop	{r4, r5, r6, pc}
   18454:	00024d3c 	.word	0x00024d3c
   18458:	00024d58 	.word	0x00024d58
   1845c:	00024d74 	.word	0x00024d74
   18460:	00024d90 	.word	0x00024d90
   18464:	00024da8 	.word	0x00024da8
   18468:	00024dc0 	.word	0x00024dc0
   1846c:	00024dd4 	.word	0x00024dd4

00018470 <dw1000_cli_dump_address>:
{
   18470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18474:	b09b      	sub	sp, #108	; 0x6c
   18476:	9013      	str	r0, [sp, #76]	; 0x4c
   18478:	9114      	str	r1, [sp, #80]	; 0x50
   1847a:	9212      	str	r2, [sp, #72]	; 0x48
   1847c:	9315      	str	r3, [sp, #84]	; 0x54
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   1847e:	460a      	mov	r2, r1
   18480:	492d      	ldr	r1, [pc, #180]	; (18538 <dw1000_cli_dump_address+0xc8>)
   18482:	4618      	mov	r0, r3
   18484:	f7fd fde3 	bl	1604e <streamer_printf>
    for (i=0;i<length;i+=step) {
   18488:	f04f 0800 	mov.w	r8, #0
   1848c:	e04d      	b.n	1852a <dw1000_cli_dump_address+0xba>
        memset(b,0,sizeof(b));
   1848e:	2300      	movs	r3, #0
   18490:	9316      	str	r3, [sp, #88]	; 0x58
   18492:	9317      	str	r3, [sp, #92]	; 0x5c
   18494:	9318      	str	r3, [sp, #96]	; 0x60
   18496:	9319      	str	r3, [sp, #100]	; 0x64
        dw1000_read(inst, addr, i, b, step);
   18498:	2310      	movs	r3, #16
   1849a:	9300      	str	r3, [sp, #0]
   1849c:	ab16      	add	r3, sp, #88	; 0x58
   1849e:	fa1f f288 	uxth.w	r2, r8
   184a2:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   184a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   184a8:	f7f1 f97a 	bl	97a0 <dw1000_read>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
   184ac:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   184b0:	9310      	str	r3, [sp, #64]	; 0x40
   184b2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   184b6:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   184ba:	9211      	str	r2, [sp, #68]	; 0x44
   184bc:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   184c0:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   184c4:	f89d 405e 	ldrb.w	r4, [sp, #94]	; 0x5e
   184c8:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
   184cc:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   184d0:	f89d 7061 	ldrb.w	r7, [sp, #97]	; 0x61
   184d4:	f89d c062 	ldrb.w	ip, [sp, #98]	; 0x62
   184d8:	f89d e063 	ldrb.w	lr, [sp, #99]	; 0x63
   184dc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   184e0:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
   184e4:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
   184e8:	f89d b067 	ldrb.w	fp, [sp, #103]	; 0x67
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   184ec:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   184f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   184f4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   184f8:	920b      	str	r2, [sp, #44]	; 0x2c
   184fa:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   184fe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   18502:	9708      	str	r7, [sp, #32]
   18504:	9607      	str	r6, [sp, #28]
   18506:	9506      	str	r5, [sp, #24]
   18508:	9405      	str	r4, [sp, #20]
   1850a:	9004      	str	r0, [sp, #16]
   1850c:	9103      	str	r1, [sp, #12]
   1850e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18510:	9202      	str	r2, [sp, #8]
   18512:	9301      	str	r3, [sp, #4]
   18514:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18516:	9300      	str	r3, [sp, #0]
   18518:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1851c:	4642      	mov	r2, r8
   1851e:	4907      	ldr	r1, [pc, #28]	; (1853c <dw1000_cli_dump_address+0xcc>)
   18520:	9815      	ldr	r0, [sp, #84]	; 0x54
   18522:	f7fd fd94 	bl	1604e <streamer_printf>
    for (i=0;i<length;i+=step) {
   18526:	f108 0810 	add.w	r8, r8, #16
   1852a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1852c:	4543      	cmp	r3, r8
   1852e:	dcae      	bgt.n	1848e <dw1000_cli_dump_address+0x1e>
}
   18530:	b01b      	add	sp, #108	; 0x6c
   18532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18536:	bf00      	nop
   18538:	00024de8 	.word	0x00024de8
   1853c:	00024e04 	.word	0x00024e04

00018540 <dw1000_cli_interrupt_backtrace>:
{
   18540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18544:	b085      	sub	sp, #20
   18546:	4607      	mov	r7, r0
   18548:	4688      	mov	r8, r1
   1854a:	4616      	mov	r6, r2
    uint32_t start_t = 0;
   1854c:	2300      	movs	r3, #0
   1854e:	9303      	str	r3, [sp, #12]
    streamer_printf(streamer, " %10s ", "abs");
   18550:	4c43      	ldr	r4, [pc, #268]	; (18660 <dw1000_cli_interrupt_backtrace+0x120>)
   18552:	4a44      	ldr	r2, [pc, #272]	; (18664 <dw1000_cli_interrupt_backtrace+0x124>)
   18554:	4621      	mov	r1, r4
   18556:	4630      	mov	r0, r6
   18558:	f7fd fd79 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %10s ", "usec");
   1855c:	4a42      	ldr	r2, [pc, #264]	; (18668 <dw1000_cli_interrupt_backtrace+0x128>)
   1855e:	4621      	mov	r1, r4
   18560:	4630      	mov	r0, r6
   18562:	f7fd fd74 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %8s ", "diff");
   18566:	4a41      	ldr	r2, [pc, #260]	; (1866c <dw1000_cli_interrupt_backtrace+0x12c>)
   18568:	4941      	ldr	r1, [pc, #260]	; (18670 <dw1000_cli_interrupt_backtrace+0x130>)
   1856a:	4630      	mov	r0, r6
   1856c:	f7fd fd6f 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %6s ", "dur");
   18570:	4a40      	ldr	r2, [pc, #256]	; (18674 <dw1000_cli_interrupt_backtrace+0x134>)
   18572:	4941      	ldr	r1, [pc, #260]	; (18678 <dw1000_cli_interrupt_backtrace+0x138>)
   18574:	4630      	mov	r0, r6
   18576:	f7fd fd6a 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %2s", "ir");
   1857a:	4a40      	ldr	r2, [pc, #256]	; (1867c <dw1000_cli_interrupt_backtrace+0x13c>)
   1857c:	4940      	ldr	r1, [pc, #256]	; (18680 <dw1000_cli_interrupt_backtrace+0x140>)
   1857e:	4630      	mov	r0, r6
   18580:	f7fd fd65 	bl	1604e <streamer_printf>
    streamer_printf(streamer, " %5s", "fctrl");
   18584:	4a3f      	ldr	r2, [pc, #252]	; (18684 <dw1000_cli_interrupt_backtrace+0x144>)
   18586:	4940      	ldr	r1, [pc, #256]	; (18688 <dw1000_cli_interrupt_backtrace+0x148>)
   18588:	4630      	mov	r0, r6
   1858a:	f7fd fd60 	bl	1604e <streamer_printf>
    if (verbose&0x1) {
   1858e:	f018 0901 	ands.w	r9, r8, #1
   18592:	d10b      	bne.n	185ac <dw1000_cli_interrupt_backtrace+0x6c>
    streamer_printf(streamer, " %*s ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, "status");
   18594:	4b3d      	ldr	r3, [pc, #244]	; (1868c <dw1000_cli_interrupt_backtrace+0x14c>)
   18596:	2208      	movs	r2, #8
   18598:	493d      	ldr	r1, [pc, #244]	; (18690 <dw1000_cli_interrupt_backtrace+0x150>)
   1859a:	4630      	mov	r0, r6
   1859c:	f7fd fd57 	bl	1604e <streamer_printf>
    streamer_printf(streamer, "   status2txt\n");
   185a0:	493c      	ldr	r1, [pc, #240]	; (18694 <dw1000_cli_interrupt_backtrace+0x154>)
   185a2:	4630      	mov	r0, r6
   185a4:	f7fd fd53 	bl	1604e <streamer_printf>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   185a8:	2400      	movs	r4, #0
   185aa:	e00a      	b.n	185c2 <dw1000_cli_interrupt_backtrace+0x82>
        streamer_printf(streamer, "(fctrl2txt)%21s ", "");
   185ac:	4a3a      	ldr	r2, [pc, #232]	; (18698 <dw1000_cli_interrupt_backtrace+0x158>)
   185ae:	493b      	ldr	r1, [pc, #236]	; (1869c <dw1000_cli_interrupt_backtrace+0x15c>)
   185b0:	4630      	mov	r0, r6
   185b2:	f7fd fd4c 	bl	1604e <streamer_printf>
   185b6:	e7ed      	b.n	18594 <dw1000_cli_interrupt_backtrace+0x54>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   185b8:	4939      	ldr	r1, [pc, #228]	; (186a0 <dw1000_cli_interrupt_backtrace+0x160>)
   185ba:	4630      	mov	r0, r6
   185bc:	f7fd fd47 	bl	1604e <streamer_printf>
   185c0:	3401      	adds	r4, #1
   185c2:	2c4f      	cmp	r4, #79	; 0x4f
   185c4:	ddf8      	ble.n	185b8 <dw1000_cli_interrupt_backtrace+0x78>
    if (verbose&0x1) {
   185c6:	f1b9 0f00 	cmp.w	r9, #0
   185ca:	d111      	bne.n	185f0 <dw1000_cli_interrupt_backtrace+0xb0>
    streamer_printf(streamer, "\n");
   185cc:	4935      	ldr	r1, [pc, #212]	; (186a4 <dw1000_cli_interrupt_backtrace+0x164>)
   185ce:	4630      	mov	r0, r6
   185d0:	f7fd fd3d 	bl	1604e <streamer_printf>
    inst->sys_status_bt_lock = 1;
   185d4:	2301      	movs	r3, #1
   185d6:	f887 3df2 	strb.w	r3, [r7, #3570]	; 0xdf2
    struct dw1000_sys_status_backtrace *p, *p_last=0;
   185da:	2300      	movs	r3, #0
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   185dc:	461d      	mov	r5, r3
   185de:	e00b      	b.n	185f8 <dw1000_cli_interrupt_backtrace+0xb8>
        for (i=0;i<34;i++) streamer_printf(streamer, "-");
   185e0:	492f      	ldr	r1, [pc, #188]	; (186a0 <dw1000_cli_interrupt_backtrace+0x160>)
   185e2:	4630      	mov	r0, r6
   185e4:	f7fd fd33 	bl	1604e <streamer_printf>
   185e8:	3401      	adds	r4, #1
   185ea:	2c21      	cmp	r4, #33	; 0x21
   185ec:	ddf8      	ble.n	185e0 <dw1000_cli_interrupt_backtrace+0xa0>
   185ee:	e7ed      	b.n	185cc <dw1000_cli_interrupt_backtrace+0x8c>
   185f0:	2400      	movs	r4, #0
   185f2:	e7fa      	b.n	185ea <dw1000_cli_interrupt_backtrace+0xaa>
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   185f4:	3501      	adds	r5, #1
        p_last = p;
   185f6:	4623      	mov	r3, r4
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   185f8:	2d7f      	cmp	r5, #127	; 0x7f
   185fa:	dc1f      	bgt.n	1863c <dw1000_cli_interrupt_backtrace+0xfc>
        uint16_t i_mod = (inst->sys_status_bt_idx + i + 1) % MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);
   185fc:	f8b7 cdf0 	ldrh.w	ip, [r7, #3568]	; 0xdf0
   18600:	44ac      	add	ip, r5
   18602:	f10c 0c01 	add.w	ip, ip, #1
   18606:	f1dc 0200 	rsbs	r2, ip, #0
   1860a:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1860e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   18612:	bf58      	it	pl
   18614:	f1c2 0c00 	rsbpl	ip, r2, #0
        p = &inst->sys_status_bt[i_mod];
   18618:	fa1f f48c 	uxth.w	r4, ip
   1861c:	345f      	adds	r4, #95	; 0x5f
   1861e:	eb07 1404 	add.w	r4, r7, r4, lsl #4
        if (print_interrupt_bt_line(&start_t, verbose, p, p_last, streamer)) {
   18622:	9600      	str	r6, [sp, #0]
   18624:	4622      	mov	r2, r4
   18626:	4641      	mov	r1, r8
   18628:	a803      	add	r0, sp, #12
   1862a:	f7ff fdc3 	bl	181b4 <print_interrupt_bt_line>
   1862e:	2800      	cmp	r0, #0
   18630:	d0e0      	beq.n	185f4 <dw1000_cli_interrupt_backtrace+0xb4>
            streamer_printf(streamer, "\n");
   18632:	491c      	ldr	r1, [pc, #112]	; (186a4 <dw1000_cli_interrupt_backtrace+0x164>)
   18634:	4630      	mov	r0, r6
   18636:	f7fd fd0a 	bl	1604e <streamer_printf>
   1863a:	e7db      	b.n	185f4 <dw1000_cli_interrupt_backtrace+0xb4>
    inst->sys_status_bt_lock = 0;
   1863c:	2300      	movs	r3, #0
   1863e:	f887 3df2 	strb.w	r3, [r7, #3570]	; 0xdf2
    if (verbose&0x1) {
   18642:	f1b9 0f00 	cmp.w	r9, #0
   18646:	d102      	bne.n	1864e <dw1000_cli_interrupt_backtrace+0x10e>
}
   18648:	b005      	add	sp, #20
   1864a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        streamer_printf(streamer, "----\n fctrl2txt: \n");
   1864e:	4916      	ldr	r1, [pc, #88]	; (186a8 <dw1000_cli_interrupt_backtrace+0x168>)
   18650:	4630      	mov	r0, r6
   18652:	f7fd fcfc 	bl	1604e <streamer_printf>
        fctrl_ledgend(streamer);
   18656:	4630      	mov	r0, r6
   18658:	f7ff f9e0 	bl	17a1c <fctrl_ledgend>
}
   1865c:	e7f4      	b.n	18648 <dw1000_cli_interrupt_backtrace+0x108>
   1865e:	bf00      	nop
   18660:	00024e60 	.word	0x00024e60
   18664:	00024e5c 	.word	0x00024e5c
   18668:	00024e68 	.word	0x00024e68
   1866c:	00024e70 	.word	0x00024e70
   18670:	00024e78 	.word	0x00024e78
   18674:	00024e80 	.word	0x00024e80
   18678:	00024e84 	.word	0x00024e84
   1867c:	00024e8c 	.word	0x00024e8c
   18680:	00024e90 	.word	0x00024e90
   18684:	00024e98 	.word	0x00024e98
   18688:	00024ea0 	.word	0x00024ea0
   1868c:	000247d0 	.word	0x000247d0
   18690:	00024ebc 	.word	0x00024ebc
   18694:	00024ec4 	.word	0x00024ec4
   18698:	00024fa8 	.word	0x00024fa8
   1869c:	00024ea8 	.word	0x00024ea8
   186a0:	00024ed4 	.word	0x00024ed4
   186a4:	00023d90 	.word	0x00023d90
   186a8:	00024ed8 	.word	0x00024ed8

000186ac <dw1000_cli_cmd>:
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   186ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   186b0:	b085      	sub	sp, #20
   186b2:	461f      	mov	r7, r3
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   186b4:	2901      	cmp	r1, #1
   186b6:	dd1a      	ble.n	186ee <dw1000_cli_cmd+0x42>
   186b8:	460c      	mov	r4, r1
   186ba:	4615      	mov	r5, r2
        dw1000_cli_too_few_args(streamer);
        return 0;
    }

    if (!strcmp(argv[1], "dump")) {
   186bc:	6856      	ldr	r6, [r2, #4]
   186be:	49a9      	ldr	r1, [pc, #676]	; (18964 <dw1000_cli_cmd+0x2b8>)
   186c0:	4630      	mov	r0, r6
   186c2:	f7f8 ff07 	bl	114d4 <strcmp>
   186c6:	b9e8      	cbnz	r0, 18704 <dw1000_cli_cmd+0x58>
        if (argc < 3) {
   186c8:	2c02      	cmp	r4, #2
   186ca:	dc14      	bgt.n	186f6 <dw1000_cli_cmd+0x4a>
            inst_n=0;
   186cc:	2000      	movs	r0, #0
        } else {
            inst_n = strtol(argv[2], NULL, 0);
        }
        inst = hal_dw1000_inst(inst_n);
   186ce:	b2c0      	uxtb	r0, r0
   186d0:	f7f0 fbfa 	bl	8ec8 <hal_dw1000_inst>
   186d4:	4604      	mov	r4, r0
        console_no_ticks();
   186d6:	f7fb f88d 	bl	137f4 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   186da:	4639      	mov	r1, r7
   186dc:	4620      	mov	r0, r4
   186de:	f7ff fe07 	bl	182f0 <dw1000_cli_dump_registers>
        console_yes_ticks();
   186e2:	f7fb f88d 	bl	13800 <console_yes_ticks>
        streamer_printf(streamer, "Unknown cmd\n");
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   186e6:	2000      	movs	r0, #0
   186e8:	b005      	add	sp, #20
   186ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dw1000_cli_too_few_args(streamer);
   186ee:	4618      	mov	r0, r3
   186f0:	f7ff f9b4 	bl	17a5c <dw1000_cli_too_few_args>
        return 0;
   186f4:	e7f7      	b.n	186e6 <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   186f6:	2200      	movs	r2, #0
   186f8:	4611      	mov	r1, r2
   186fa:	68a8      	ldr	r0, [r5, #8]
   186fc:	f004 f826 	bl	1c74c <strtol>
   18700:	b280      	uxth	r0, r0
   18702:	e7e4      	b.n	186ce <dw1000_cli_cmd+0x22>
    } else if (!strcmp(argv[1], "da")) {
   18704:	4998      	ldr	r1, [pc, #608]	; (18968 <dw1000_cli_cmd+0x2bc>)
   18706:	4630      	mov	r0, r6
   18708:	f7f8 fee4 	bl	114d4 <strcmp>
   1870c:	bb08      	cbnz	r0, 18752 <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   1870e:	2c02      	cmp	r4, #2
   18710:	dde9      	ble.n	186e6 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   18712:	2200      	movs	r2, #0
   18714:	4611      	mov	r1, r2
   18716:	68a8      	ldr	r0, [r5, #8]
   18718:	f004 f818 	bl	1c74c <strtol>
   1871c:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1871e:	2200      	movs	r2, #0
   18720:	4611      	mov	r1, r2
   18722:	68e8      	ldr	r0, [r5, #12]
   18724:	f004 f812 	bl	1c74c <strtol>
   18728:	4606      	mov	r6, r0
        if (argc>4) {
   1872a:	2c04      	cmp	r4, #4
   1872c:	dc0a      	bgt.n	18744 <dw1000_cli_cmd+0x98>
        int length = 128;
   1872e:	2480      	movs	r4, #128	; 0x80
        inst = hal_dw1000_inst(inst_n);
   18730:	fa5f f088 	uxtb.w	r0, r8
   18734:	f7f0 fbc8 	bl	8ec8 <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   18738:	463b      	mov	r3, r7
   1873a:	b2a2      	uxth	r2, r4
   1873c:	4631      	mov	r1, r6
   1873e:	f7ff fe97 	bl	18470 <dw1000_cli_dump_address>
   18742:	e7d0      	b.n	186e6 <dw1000_cli_cmd+0x3a>
            length = strtol(argv[4], NULL, 0);
   18744:	2200      	movs	r2, #0
   18746:	4611      	mov	r1, r2
   18748:	6928      	ldr	r0, [r5, #16]
   1874a:	f003 ffff 	bl	1c74c <strtol>
   1874e:	4604      	mov	r4, r0
   18750:	e7ee      	b.n	18730 <dw1000_cli_cmd+0x84>
    } else if (!strcmp(argv[1], "cw")) {
   18752:	4986      	ldr	r1, [pc, #536]	; (1896c <dw1000_cli_cmd+0x2c0>)
   18754:	4630      	mov	r0, r6
   18756:	f7f8 febd 	bl	114d4 <strcmp>
   1875a:	2800      	cmp	r0, #0
   1875c:	d034      	beq.n	187c8 <dw1000_cli_cmd+0x11c>
    } else if (!strcmp(argv[1], "wr")) {
   1875e:	4984      	ldr	r1, [pc, #528]	; (18970 <dw1000_cli_cmd+0x2c4>)
   18760:	4630      	mov	r0, r6
   18762:	f7f8 feb7 	bl	114d4 <strcmp>
   18766:	2800      	cmp	r0, #0
   18768:	d15e      	bne.n	18828 <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   1876a:	2c06      	cmp	r4, #6
   1876c:	ddbb      	ble.n	186e6 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1876e:	2200      	movs	r2, #0
   18770:	4611      	mov	r1, r2
   18772:	68a8      	ldr	r0, [r5, #8]
   18774:	f003 ffea 	bl	1c74c <strtol>
   18778:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1877a:	2200      	movs	r2, #0
   1877c:	4611      	mov	r1, r2
   1877e:	68e8      	ldr	r0, [r5, #12]
   18780:	f003 ffe4 	bl	1c74c <strtol>
   18784:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   18786:	2200      	movs	r2, #0
   18788:	4611      	mov	r1, r2
   1878a:	6928      	ldr	r0, [r5, #16]
   1878c:	f003 ffde 	bl	1c74c <strtol>
   18790:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   18792:	2200      	movs	r2, #0
   18794:	4611      	mov	r1, r2
   18796:	6968      	ldr	r0, [r5, #20]
   18798:	f003 ffd8 	bl	1c74c <strtol>
   1879c:	4604      	mov	r4, r0
   1879e:	ea4f 79e0 	mov.w	r9, r0, asr #31
        int length = strtol(argv[6], NULL, 0);
   187a2:	2200      	movs	r2, #0
   187a4:	4611      	mov	r1, r2
   187a6:	69a8      	ldr	r0, [r5, #24]
   187a8:	f003 ffd0 	bl	1c74c <strtol>
   187ac:	4605      	mov	r5, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   187ae:	fa5f f088 	uxtb.w	r0, r8
   187b2:	f7f0 fb89 	bl	8ec8 <hal_dw1000_inst>
   187b6:	9502      	str	r5, [sp, #8]
   187b8:	9400      	str	r4, [sp, #0]
   187ba:	f8cd 9004 	str.w	r9, [sp, #4]
   187be:	b2ba      	uxth	r2, r7
   187c0:	b2b1      	uxth	r1, r6
   187c2:	f7f1 f927 	bl	9a14 <dw1000_write_reg>
   187c6:	e78e      	b.n	186e6 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   187c8:	2200      	movs	r2, #0
   187ca:	4611      	mov	r1, r2
   187cc:	68a8      	ldr	r0, [r5, #8]
   187ce:	f003 ffbd 	bl	1c74c <strtol>
   187d2:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   187d4:	b2c0      	uxtb	r0, r0
   187d6:	f7f0 fb77 	bl	8ec8 <hal_dw1000_inst>
   187da:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   187dc:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   187e0:	f7f4 f9d6 	bl	cb90 <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   187e4:	2304      	movs	r3, #4
   187e6:	9302      	str	r3, [sp, #8]
   187e8:	2200      	movs	r2, #0
   187ea:	2300      	movs	r3, #0
   187ec:	e9cd 2300 	strd	r2, r3, [sp]
   187f0:	210e      	movs	r1, #14
   187f2:	4620      	mov	r0, r4
   187f4:	f7f1 f90e 	bl	9a14 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   187f8:	2301      	movs	r3, #1
   187fa:	9302      	str	r3, [sp, #8]
   187fc:	2240      	movs	r2, #64	; 0x40
   187fe:	2300      	movs	r3, #0
   18800:	e9cd 2300 	strd	r2, r3, [sp]
   18804:	2200      	movs	r2, #0
   18806:	210d      	movs	r1, #13
   18808:	4620      	mov	r0, r4
   1880a:	f7f1 f903 	bl	9a14 <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   1880e:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   18812:	4620      	mov	r0, r4
   18814:	f7f3 fb7a 	bl	bf0c <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   18818:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   1881c:	b2aa      	uxth	r2, r5
   1881e:	4955      	ldr	r1, [pc, #340]	; (18974 <dw1000_cli_cmd+0x2c8>)
   18820:	4638      	mov	r0, r7
   18822:	f7fd fc14 	bl	1604e <streamer_printf>
   18826:	e75e      	b.n	186e6 <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "rd")) {
   18828:	4953      	ldr	r1, [pc, #332]	; (18978 <dw1000_cli_cmd+0x2cc>)
   1882a:	4630      	mov	r0, r6
   1882c:	f7f8 fe52 	bl	114d4 <strcmp>
   18830:	bb60      	cbnz	r0, 1888c <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   18832:	2c05      	cmp	r4, #5
   18834:	f77f af57 	ble.w	186e6 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   18838:	2200      	movs	r2, #0
   1883a:	4611      	mov	r1, r2
   1883c:	68a8      	ldr	r0, [r5, #8]
   1883e:	f003 ff85 	bl	1c74c <strtol>
   18842:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   18844:	2200      	movs	r2, #0
   18846:	4611      	mov	r1, r2
   18848:	68e8      	ldr	r0, [r5, #12]
   1884a:	f003 ff7f 	bl	1c74c <strtol>
   1884e:	4604      	mov	r4, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   18850:	2200      	movs	r2, #0
   18852:	4611      	mov	r1, r2
   18854:	6928      	ldr	r0, [r5, #16]
   18856:	f003 ff79 	bl	1c74c <strtol>
   1885a:	b286      	uxth	r6, r0
        int length = strtol(argv[5], NULL, 0);
   1885c:	2200      	movs	r2, #0
   1885e:	4611      	mov	r1, r2
   18860:	6968      	ldr	r0, [r5, #20]
   18862:	f003 ff73 	bl	1c74c <strtol>
   18866:	4605      	mov	r5, r0
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   18868:	fa5f f088 	uxtb.w	r0, r8
   1886c:	f7f0 fb2c 	bl	8ec8 <hal_dw1000_inst>
   18870:	462b      	mov	r3, r5
   18872:	4632      	mov	r2, r6
   18874:	b2a1      	uxth	r1, r4
   18876:	f7f1 f85d 	bl	9934 <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   1887a:	e9cd 0100 	strd	r0, r1, [sp]
   1887e:	4633      	mov	r3, r6
   18880:	4622      	mov	r2, r4
   18882:	493e      	ldr	r1, [pc, #248]	; (1897c <dw1000_cli_cmd+0x2d0>)
   18884:	4638      	mov	r0, r7
   18886:	f7fd fbe2 	bl	1604e <streamer_printf>
   1888a:	e72c      	b.n	186e6 <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "ibt")){
   1888c:	493c      	ldr	r1, [pc, #240]	; (18980 <dw1000_cli_cmd+0x2d4>)
   1888e:	4630      	mov	r0, r6
   18890:	f7f8 fe20 	bl	114d4 <strcmp>
   18894:	bb08      	cbnz	r0, 188da <dw1000_cli_cmd+0x22e>
        if (argc < 3) {
   18896:	2c02      	cmp	r4, #2
   18898:	dc11      	bgt.n	188be <dw1000_cli_cmd+0x212>
            inst_n=0;
   1889a:	2600      	movs	r6, #0
        if (argc < 4) {
   1889c:	2c03      	cmp	r4, #3
   1889e:	dc15      	bgt.n	188cc <dw1000_cli_cmd+0x220>
            d=0;
   188a0:	2500      	movs	r5, #0
        inst = hal_dw1000_inst(inst_n);
   188a2:	b2f0      	uxtb	r0, r6
   188a4:	f7f0 fb10 	bl	8ec8 <hal_dw1000_inst>
   188a8:	4604      	mov	r4, r0
        console_no_ticks();
   188aa:	f7fa ffa3 	bl	137f4 <console_no_ticks>
        dw1000_cli_interrupt_backtrace(inst, d, streamer);
   188ae:	463a      	mov	r2, r7
   188b0:	4629      	mov	r1, r5
   188b2:	4620      	mov	r0, r4
   188b4:	f7ff fe44 	bl	18540 <dw1000_cli_interrupt_backtrace>
        console_yes_ticks();
   188b8:	f7fa ffa2 	bl	13800 <console_yes_ticks>
   188bc:	e713      	b.n	186e6 <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   188be:	2200      	movs	r2, #0
   188c0:	4611      	mov	r1, r2
   188c2:	68a8      	ldr	r0, [r5, #8]
   188c4:	f003 ff42 	bl	1c74c <strtol>
   188c8:	b286      	uxth	r6, r0
   188ca:	e7e7      	b.n	1889c <dw1000_cli_cmd+0x1f0>
            d = strtol(argv[3], NULL, 0);
   188cc:	2200      	movs	r2, #0
   188ce:	4611      	mov	r1, r2
   188d0:	68e8      	ldr	r0, [r5, #12]
   188d2:	f003 ff3b 	bl	1c74c <strtol>
   188d6:	b2c5      	uxtb	r5, r0
   188d8:	e7e3      	b.n	188a2 <dw1000_cli_cmd+0x1f6>
    } else if (!strcmp(argv[1], "status2txt")){
   188da:	492a      	ldr	r1, [pc, #168]	; (18984 <dw1000_cli_cmd+0x2d8>)
   188dc:	4630      	mov	r0, r6
   188de:	f7f8 fdf9 	bl	114d4 <strcmp>
   188e2:	b328      	cbz	r0, 18930 <dw1000_cli_cmd+0x284>
    } else if (!strcmp(argv[1], "fctrl2txt")){
   188e4:	4928      	ldr	r1, [pc, #160]	; (18988 <dw1000_cli_cmd+0x2dc>)
   188e6:	4630      	mov	r0, r6
   188e8:	f7f8 fdf4 	bl	114d4 <strcmp>
   188ec:	bba0      	cbnz	r0, 18958 <dw1000_cli_cmd+0x2ac>
        if (argc < 4) {
   188ee:	2c03      	cmp	r4, #3
   188f0:	dd2e      	ble.n	18950 <dw1000_cli_cmd+0x2a4>
            d = strtol(argv[2], NULL, 16);
   188f2:	2210      	movs	r2, #16
   188f4:	2100      	movs	r1, #0
   188f6:	68a8      	ldr	r0, [r5, #8]
   188f8:	f003 ff28 	bl	1c74c <strtol>
   188fc:	b2c4      	uxtb	r4, r0
            d2 = strtol(argv[3], NULL, 16);
   188fe:	2210      	movs	r2, #16
   18900:	2100      	movs	r1, #0
   18902:	68e8      	ldr	r0, [r5, #12]
   18904:	f003 ff22 	bl	1c74c <strtol>
        streamer_printf(streamer, "%02X %02X: %s\n", (uint8_t)d, (uint8_t)d2, fctrl_to_string((d2<<8)|d));
   18908:	b2c5      	uxtb	r5, r0
   1890a:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
   1890e:	f7ff f8ad 	bl	17a6c <fctrl_to_string>
   18912:	9000      	str	r0, [sp, #0]
   18914:	462b      	mov	r3, r5
   18916:	4622      	mov	r2, r4
   18918:	491c      	ldr	r1, [pc, #112]	; (1898c <dw1000_cli_cmd+0x2e0>)
   1891a:	4638      	mov	r0, r7
   1891c:	f7fd fb97 	bl	1604e <streamer_printf>
        streamer_printf(streamer, "----\n ledgend: \n");
   18920:	491b      	ldr	r1, [pc, #108]	; (18990 <dw1000_cli_cmd+0x2e4>)
   18922:	4638      	mov	r0, r7
   18924:	f7fd fb93 	bl	1604e <streamer_printf>
        fctrl_ledgend(streamer);
   18928:	4638      	mov	r0, r7
   1892a:	f7ff f877 	bl	17a1c <fctrl_ledgend>
   1892e:	e6da      	b.n	186e6 <dw1000_cli_cmd+0x3a>
        uint64_t d = strtoll(argv[2], NULL, 0);
   18930:	2200      	movs	r2, #0
   18932:	4611      	mov	r1, r2
   18934:	68a8      	ldr	r0, [r5, #8]
   18936:	f003 ff0f 	bl	1c758 <strtoll>
   1893a:	4605      	mov	r5, r0
   1893c:	460c      	mov	r4, r1
        console_printf("%010llX: %s\n", d, sys_status_to_string(d));
   1893e:	f7ff f9fb 	bl	17d38 <sys_status_to_string>
   18942:	9000      	str	r0, [sp, #0]
   18944:	462a      	mov	r2, r5
   18946:	4623      	mov	r3, r4
   18948:	4812      	ldr	r0, [pc, #72]	; (18994 <dw1000_cli_cmd+0x2e8>)
   1894a:	f7fa fe9d 	bl	13688 <console_printf>
   1894e:	e6ca      	b.n	186e6 <dw1000_cli_cmd+0x3a>
            console_printf("2 bytes needed\n");
   18950:	4811      	ldr	r0, [pc, #68]	; (18998 <dw1000_cli_cmd+0x2ec>)
   18952:	f7fa fe99 	bl	13688 <console_printf>
            return 0;
   18956:	e6c6      	b.n	186e6 <dw1000_cli_cmd+0x3a>
        streamer_printf(streamer, "Unknown cmd\n");
   18958:	4910      	ldr	r1, [pc, #64]	; (1899c <dw1000_cli_cmd+0x2f0>)
   1895a:	4638      	mov	r0, r7
   1895c:	f7fd fb77 	bl	1604e <streamer_printf>
   18960:	e6c1      	b.n	186e6 <dw1000_cli_cmd+0x3a>
   18962:	bf00      	nop
   18964:	00023c50 	.word	0x00023c50
   18968:	00024eec 	.word	0x00024eec
   1896c:	00024ef0 	.word	0x00024ef0
   18970:	00024f2c 	.word	0x00024f2c
   18974:	00024ef4 	.word	0x00024ef4
   18978:	00024f30 	.word	0x00024f30
   1897c:	00024f34 	.word	0x00024f34
   18980:	00024f4c 	.word	0x00024f4c
   18984:	00024f50 	.word	0x00024f50
   18988:	00024f6c 	.word	0x00024f6c
   1898c:	00024f88 	.word	0x00024f88
   18990:	00024f98 	.word	0x00024f98
   18994:	00024f5c 	.word	0x00024f5c
   18998:	00024f78 	.word	0x00024f78
   1899c:	00024fac 	.word	0x00024fac

000189a0 <dw1000_cli_register>:
#endif


int
dw1000_cli_register(void)
{
   189a0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   189a2:	4802      	ldr	r0, [pc, #8]	; (189ac <dw1000_cli_register+0xc>)
   189a4:	f7fb fd60 	bl	14468 <shell_cmd_register>
#endif
    return rc;
#else
    return 0;
#endif
}
   189a8:	bd08      	pop	{r3, pc}
   189aa:	bf00      	nop
   189ac:	20001564 	.word	0x20001564

000189b0 <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   189b0:	2000      	movs	r0, #0
   189b2:	4770      	bx	lr

000189b4 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   189b4:	2300      	movs	r3, #0
   189b6:	4a07      	ldr	r2, [pc, #28]	; (189d4 <nrf52k_flash_wait_ready+0x20>)
   189b8:	4293      	cmp	r3, r2
   189ba:	dc06      	bgt.n	189ca <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   189bc:	4a06      	ldr	r2, [pc, #24]	; (189d8 <nrf52k_flash_wait_ready+0x24>)
   189be:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   189c2:	2a01      	cmp	r2, #1
   189c4:	d004      	beq.n	189d0 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   189c6:	3301      	adds	r3, #1
   189c8:	e7f5      	b.n	189b6 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   189ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   189ce:	4770      	bx	lr
            return 0;
   189d0:	2000      	movs	r0, #0
}
   189d2:	4770      	bx	lr
   189d4:	0001869f 	.word	0x0001869f
   189d8:	4001e000 	.word	0x4001e000

000189dc <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   189dc:	b538      	push	{r3, r4, r5, lr}
   189de:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   189e0:	f7ff ffe8 	bl	189b4 <nrf52k_flash_wait_ready>
   189e4:	b9e0      	cbnz	r0, 18a20 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   189e6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   189ea:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   189ec:	4b0e      	ldr	r3, [pc, #56]	; (18a28 <nrf52k_flash_erase_sector+0x4c>)
   189ee:	2202      	movs	r2, #2
   189f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   189f4:	f7ff ffde 	bl	189b4 <nrf52k_flash_wait_ready>
   189f8:	b140      	cbz	r0, 18a0c <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   189fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   189fe:	4b0a      	ldr	r3, [pc, #40]	; (18a28 <nrf52k_flash_erase_sector+0x4c>)
   18a00:	2200      	movs	r2, #0
   18a02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   18a06:	b905      	cbnz	r5, 18a0a <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   18a08:	b662      	cpsie	i
    return rc;
}
   18a0a:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   18a0c:	4b06      	ldr	r3, [pc, #24]	; (18a28 <nrf52k_flash_erase_sector+0x4c>)
   18a0e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   18a12:	f7ff ffcf 	bl	189b4 <nrf52k_flash_wait_ready>
   18a16:	2800      	cmp	r0, #0
   18a18:	d0f1      	beq.n	189fe <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   18a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a1e:	e7ee      	b.n	189fe <nrf52k_flash_erase_sector+0x22>
        return -1;
   18a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a24:	e7f1      	b.n	18a0a <nrf52k_flash_erase_sector+0x2e>
   18a26:	bf00      	nop
   18a28:	4001e000 	.word	0x4001e000

00018a2c <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   18a2c:	2000      	movs	r0, #0
   18a2e:	4770      	bx	lr

00018a30 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   18a30:	297f      	cmp	r1, #127	; 0x7f
   18a32:	dc06      	bgt.n	18a42 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   18a34:	0309      	lsls	r1, r1, #12
   18a36:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   18a38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   18a3c:	601a      	str	r2, [r3, #0]
}
   18a3e:	2000      	movs	r0, #0
   18a40:	4770      	bx	lr
{
   18a42:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   18a44:	2300      	movs	r3, #0
   18a46:	461a      	mov	r2, r3
   18a48:	4619      	mov	r1, r3
   18a4a:	4618      	mov	r0, r3
   18a4c:	f7f4 fc88 	bl	d360 <__assert_func>

00018a50 <nrf52k_flash_write>:
{
   18a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a54:	b082      	sub	sp, #8
   18a56:	460d      	mov	r5, r1
   18a58:	4616      	mov	r6, r2
   18a5a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   18a5c:	f7ff ffaa 	bl	189b4 <nrf52k_flash_wait_ready>
   18a60:	2800      	cmp	r0, #0
   18a62:	d154      	bne.n	18b0e <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18a64:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18a68:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   18a6a:	4b2a      	ldr	r3, [pc, #168]	; (18b14 <nrf52k_flash_write+0xc4>)
   18a6c:	2201      	movs	r2, #1
   18a6e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   18a72:	f015 0803 	ands.w	r8, r5, #3
   18a76:	d10a      	bne.n	18a8e <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   18a78:	2c03      	cmp	r4, #3
   18a7a:	d924      	bls.n	18ac6 <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   18a7c:	f7ff ff9a 	bl	189b4 <nrf52k_flash_wait_ready>
   18a80:	bbb8      	cbnz	r0, 18af2 <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   18a82:	f856 3b04 	ldr.w	r3, [r6], #4
   18a86:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   18a8a:	3c04      	subs	r4, #4
   18a8c:	e7f4      	b.n	18a78 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   18a8e:	f7ff ff91 	bl	189b4 <nrf52k_flash_wait_ready>
   18a92:	bb58      	cbnz	r0, 18aec <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   18a94:	f025 0a03 	bic.w	sl, r5, #3
   18a98:	f8da 3000 	ldr.w	r3, [sl]
   18a9c:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   18a9e:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   18aa2:	45a1      	cmp	r9, r4
   18aa4:	d900      	bls.n	18aa8 <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   18aa6:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   18aa8:	464a      	mov	r2, r9
   18aaa:	4631      	mov	r1, r6
   18aac:	ab01      	add	r3, sp, #4
   18aae:	eb03 0008 	add.w	r0, r3, r8
   18ab2:	f7f8 fce1 	bl	11478 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   18ab6:	9b01      	ldr	r3, [sp, #4]
   18ab8:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   18abc:	444d      	add	r5, r9
        num_bytes -= cnt;
   18abe:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   18ac2:	444e      	add	r6, r9
   18ac4:	e7d8      	b.n	18a78 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   18ac6:	b15c      	cbz	r4, 18ae0 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   18ac8:	682b      	ldr	r3, [r5, #0]
   18aca:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   18acc:	4622      	mov	r2, r4
   18ace:	4631      	mov	r1, r6
   18ad0:	a801      	add	r0, sp, #4
   18ad2:	f7f8 fcd1 	bl	11478 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   18ad6:	f7ff ff6d 	bl	189b4 <nrf52k_flash_wait_ready>
   18ada:	b9a8      	cbnz	r0, 18b08 <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   18adc:	9b01      	ldr	r3, [sp, #4]
   18ade:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   18ae0:	f7ff ff68 	bl	189b4 <nrf52k_flash_wait_ready>
   18ae4:	b138      	cbz	r0, 18af6 <nrf52k_flash_write+0xa6>
        rc = -1;
   18ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18aea:	e004      	b.n	18af6 <nrf52k_flash_write+0xa6>
    int rc = -1;
   18aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18af0:	e001      	b.n	18af6 <nrf52k_flash_write+0xa6>
   18af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   18af6:	4b07      	ldr	r3, [pc, #28]	; (18b14 <nrf52k_flash_write+0xc4>)
   18af8:	2200      	movs	r2, #0
   18afa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   18afe:	b907      	cbnz	r7, 18b02 <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   18b00:	b662      	cpsie	i
}
   18b02:	b002      	add	sp, #8
   18b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   18b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b0c:	e7f3      	b.n	18af6 <nrf52k_flash_write+0xa6>
        return -1;
   18b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b12:	e7f6      	b.n	18b02 <nrf52k_flash_write+0xb2>
   18b14:	4001e000 	.word	0x4001e000

00018b18 <nrf52k_flash_read>:
{
   18b18:	b508      	push	{r3, lr}
   18b1a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   18b1c:	461a      	mov	r2, r3
   18b1e:	f7f8 fcab 	bl	11478 <memcpy>
}
   18b22:	2000      	movs	r0, #0
   18b24:	bd08      	pop	{r3, pc}
	...

00018b28 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   18b28:	b570      	push	{r4, r5, r6, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   18b2a:	f7f4 fb43 	bl	d1b4 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   18b2e:	4b31      	ldr	r3, [pc, #196]	; (18bf4 <nrf52_timer_handler+0xcc>)
   18b30:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   18b34:	4b30      	ldr	r3, [pc, #192]	; (18bf8 <nrf52_timer_handler+0xd0>)
   18b36:	689c      	ldr	r4, [r3, #8]
    assert(x <= 0xffffff);
   18b38:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   18b3c:	d227      	bcs.n	18b8e <nrf52_timer_handler+0x66>
   18b3e:	4605      	mov	r5, r0
    assert(y <= 0xffffff);
   18b40:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   18b44:	d229      	bcs.n	18b9a <nrf52_timer_handler+0x72>
    result = x - y;
   18b46:	1b12      	subs	r2, r2, r4
    if (result & 0x800000) {
   18b48:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   18b4c:	d02b      	beq.n	18ba6 <nrf52_timer_handler+0x7e>
        return (result | 0xff800000);
   18b4e:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   18b52:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   18b56:	4e28      	ldr	r6, [pc, #160]	; (18bf8 <nrf52_timer_handler+0xd0>)
   18b58:	6834      	ldr	r4, [r6, #0]
   18b5a:	fb92 f4f4 	sdiv	r4, r2, r4
    os_time_advance(ticks);
   18b5e:	4620      	mov	r0, r4
   18b60:	f7f5 fdcc 	bl	e6fc <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   18b64:	4b23      	ldr	r3, [pc, #140]	; (18bf4 <nrf52_timer_handler+0xcc>)
   18b66:	2200      	movs	r2, #0
   18b68:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   18b6c:	68b3      	ldr	r3, [r6, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   18b6e:	6831      	ldr	r1, [r6, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   18b70:	fb04 3201 	mla	r2, r4, r1, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   18b74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   18b78:	60b2      	str	r2, [r6, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   18b7a:	1854      	adds	r4, r2, r1
    OS_ASSERT_CRITICAL();
   18b7c:	f7f4 fb23 	bl	d1c6 <os_arch_in_critical>
   18b80:	bb08      	cbnz	r0, 18bc6 <nrf52_timer_handler+0x9e>
   18b82:	2300      	movs	r3, #0
   18b84:	461a      	mov	r2, r3
   18b86:	4619      	mov	r1, r3
   18b88:	4618      	mov	r0, r3
   18b8a:	f7f4 fbe9 	bl	d360 <__assert_func>
    assert(x <= 0xffffff);
   18b8e:	2300      	movs	r3, #0
   18b90:	461a      	mov	r2, r3
   18b92:	4619      	mov	r1, r3
   18b94:	4618      	mov	r0, r3
   18b96:	f7f4 fbe3 	bl	d360 <__assert_func>
    assert(y <= 0xffffff);
   18b9a:	2300      	movs	r3, #0
   18b9c:	461a      	mov	r2, r3
   18b9e:	4619      	mov	r1, r3
   18ba0:	4618      	mov	r0, r3
   18ba2:	f7f4 fbdd 	bl	d360 <__assert_func>
        return (result & 0x007fffff);
   18ba6:	f3c2 0216 	ubfx	r2, r2, #0, #23
   18baa:	e7d4      	b.n	18b56 <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   18bac:	2300      	movs	r3, #0
   18bae:	461a      	mov	r2, r3
   18bb0:	4619      	mov	r1, r3
   18bb2:	4618      	mov	r0, r3
   18bb4:	f7f4 fbd4 	bl	d360 <__assert_func>
        return (result & 0x007fffff);
   18bb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   18bbc:	2b02      	cmp	r3, #2
   18bbe:	dc15      	bgt.n	18bec <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   18bc0:	4b0d      	ldr	r3, [pc, #52]	; (18bf8 <nrf52_timer_handler+0xd0>)
   18bc2:	681c      	ldr	r4, [r3, #0]
   18bc4:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   18bc6:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   18bca:	4b0a      	ldr	r3, [pc, #40]	; (18bf4 <nrf52_timer_handler+0xcc>)
   18bcc:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   18bd0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   18bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18bd8:	d2e8      	bcs.n	18bac <nrf52_timer_handler+0x84>
    result = x - y;
   18bda:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   18bdc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   18be0:	d0ea      	beq.n	18bb8 <nrf52_timer_handler+0x90>
        return (result | 0xff800000);
   18be2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   18be6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   18bea:	e7e7      	b.n	18bbc <nrf52_timer_handler+0x94>

    OS_EXIT_CRITICAL(sr);
   18bec:	4628      	mov	r0, r5
   18bee:	f7f4 fae7 	bl	d1c0 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   18bf2:	bd70      	pop	{r4, r5, r6, pc}
   18bf4:	40011000 	.word	0x40011000
   18bf8:	20006d80 	.word	0x20006d80

00018bfc <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   18bfc:	b538      	push	{r3, r4, r5, lr}
   18bfe:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   18c00:	f7f4 fae1 	bl	d1c6 <os_arch_in_critical>
   18c04:	b1a0      	cbz	r0, 18c30 <os_tick_idle+0x34>

    if (ticks > 0) {
   18c06:	2d00      	cmp	r5, #0
   18c08:	d038      	beq.n	18c7c <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   18c0a:	4b20      	ldr	r3, [pc, #128]	; (18c8c <os_tick_idle+0x90>)
   18c0c:	685b      	ldr	r3, [r3, #4]
   18c0e:	42ab      	cmp	r3, r5
   18c10:	d200      	bcs.n	18c14 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   18c12:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   18c14:	4b1d      	ldr	r3, [pc, #116]	; (18c8c <os_tick_idle+0x90>)
   18c16:	689a      	ldr	r2, [r3, #8]
   18c18:	681c      	ldr	r4, [r3, #0]
   18c1a:	fb05 2404 	mla	r4, r5, r4, r2
    OS_ASSERT_CRITICAL();
   18c1e:	f7f4 fad2 	bl	d1c6 <os_arch_in_critical>
   18c22:	b9c0      	cbnz	r0, 18c56 <os_tick_idle+0x5a>
   18c24:	2300      	movs	r3, #0
   18c26:	461a      	mov	r2, r3
   18c28:	4619      	mov	r1, r3
   18c2a:	4618      	mov	r0, r3
   18c2c:	f7f4 fb98 	bl	d360 <__assert_func>
    OS_ASSERT_CRITICAL();
   18c30:	2300      	movs	r3, #0
   18c32:	461a      	mov	r2, r3
   18c34:	4619      	mov	r1, r3
   18c36:	4618      	mov	r0, r3
   18c38:	f7f4 fb92 	bl	d360 <__assert_func>
    assert(y <= 0xffffff);
   18c3c:	2300      	movs	r3, #0
   18c3e:	461a      	mov	r2, r3
   18c40:	4619      	mov	r1, r3
   18c42:	4618      	mov	r0, r3
   18c44:	f7f4 fb8c 	bl	d360 <__assert_func>
        return (result & 0x007fffff);
   18c48:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   18c4c:	2b02      	cmp	r3, #2
   18c4e:	dc15      	bgt.n	18c7c <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   18c50:	4b0e      	ldr	r3, [pc, #56]	; (18c8c <os_tick_idle+0x90>)
   18c52:	681c      	ldr	r4, [r3, #0]
   18c54:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   18c56:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   18c5a:	4b0d      	ldr	r3, [pc, #52]	; (18c90 <os_tick_idle+0x94>)
   18c5c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   18c60:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   18c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18c68:	d2e8      	bcs.n	18c3c <os_tick_idle+0x40>
    result = x - y;
   18c6a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   18c6c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   18c70:	d0ea      	beq.n	18c48 <os_tick_idle+0x4c>
        return (result | 0xff800000);
   18c72:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   18c76:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   18c7a:	e7e7      	b.n	18c4c <os_tick_idle+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
   18c7c:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   18c80:	bf30      	wfi

    if (ticks > 0) {
   18c82:	b905      	cbnz	r5, 18c86 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   18c84:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   18c86:	f7ff ff4f 	bl	18b28 <nrf52_timer_handler>
}
   18c8a:	e7fb      	b.n	18c84 <os_tick_idle+0x88>
   18c8c:	20006d80 	.word	0x20006d80
   18c90:	40011000 	.word	0x40011000

00018c94 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   18c94:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   18c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18c9a:	fbb3 f3f0 	udiv	r3, r3, r0
   18c9e:	fb00 f303 	mul.w	r3, r0, r3
   18ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18ca6:	d136      	bne.n	18d16 <os_tick_init+0x82>
   18ca8:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   18caa:	4d1e      	ldr	r5, [pc, #120]	; (18d24 <os_tick_init+0x90>)
   18cac:	2600      	movs	r6, #0
   18cae:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   18cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18cb4:	fbb3 f0f0 	udiv	r0, r3, r0
   18cb8:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   18cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18cbe:	fbb3 f0f0 	udiv	r0, r3, r0
   18cc2:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   18cc4:	f7f4 fa76 	bl	d1b4 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18cc8:	0164      	lsls	r4, r4, #5
   18cca:	b2e4      	uxtb	r4, r4
   18ccc:	4b16      	ldr	r3, [pc, #88]	; (18d28 <os_tick_init+0x94>)
   18cce:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18cd2:	4a16      	ldr	r2, [pc, #88]	; (18d2c <os_tick_init+0x98>)
   18cd4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18cd6:	4916      	ldr	r1, [pc, #88]	; (18d30 <os_tick_init+0x9c>)
   18cd8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18cdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18ce0:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   18ce2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   18ce6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   18cea:	2201      	movs	r2, #1
   18cec:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   18cee:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   18cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18cf4:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   18cf8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   18cfc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   18d00:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   18d04:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   18d08:	6829      	ldr	r1, [r5, #0]
   18d0a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   18d0e:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   18d10:	f7f4 fa56 	bl	d1c0 <os_arch_restore_sr>
}
   18d14:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   18d16:	2300      	movs	r3, #0
   18d18:	461a      	mov	r2, r3
   18d1a:	4619      	mov	r1, r3
   18d1c:	4618      	mov	r0, r3
   18d1e:	f7f4 fb1f 	bl	d360 <__assert_func>
   18d22:	bf00      	nop
   18d24:	20006d80 	.word	0x20006d80
   18d28:	e000e100 	.word	0xe000e100
   18d2c:	e000ed00 	.word	0xe000ed00
   18d30:	00018b29 	.word	0x00018b29

00018d34 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   18d34:	2301      	movs	r3, #1
   18d36:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   18d38:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   18d3c:	4770      	bx	lr
	...

00018d40 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   18d40:	b538      	push	{r3, r4, r5, lr}
   18d42:	4604      	mov	r4, r0
   18d44:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   18d46:	7883      	ldrb	r3, [r0, #2]
   18d48:	b39b      	cbz	r3, 18db2 <nrf_timer_set_ocmp+0x72>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   18d4a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18d4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18d50:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   18d54:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   18d56:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   18d5a:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   18d5e:	b118      	cbz	r0, 18d68 <nrf_timer_set_ocmp+0x28>
            temp += (1UL << 24);
   18d60:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   18d64:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   18d68:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   18d6a:	1aeb      	subs	r3, r5, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   18d6c:	2b02      	cmp	r3, #2
   18d6e:	dc0f      	bgt.n	18d90 <nrf_timer_set_ocmp+0x50>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18d70:	7862      	ldrb	r2, [r4, #1]
   18d72:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   18d76:	2b00      	cmp	r3, #0
   18d78:	db15      	blt.n	18da6 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18d7a:	f002 021f 	and.w	r2, r2, #31
   18d7e:	095b      	lsrs	r3, r3, #5
   18d80:	2101      	movs	r1, #1
   18d82:	fa01 f202 	lsl.w	r2, r1, r2
   18d86:	3340      	adds	r3, #64	; 0x40
   18d88:	491a      	ldr	r1, [pc, #104]	; (18df4 <nrf_timer_set_ocmp+0xb4>)
   18d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   18d8e:	e00a      	b.n	18da6 <nrf_timer_set_ocmp+0x66>
        } else  {
            if (delta_t < (1UL << 24)) {
   18d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18d94:	d208      	bcs.n	18da8 <nrf_timer_set_ocmp+0x68>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   18d96:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   18d9a:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18d9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18da2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   18da6:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   18da8:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   18dac:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   18db0:	e7f5      	b.n	18d9e <nrf_timer_set_ocmp+0x5e>
        hwtimer = bsptimer->tmr_reg;
   18db2:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18db4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18db8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   18dbc:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   18dc0:	2200      	movs	r2, #0
   18dc2:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18dc6:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   18dca:	f7ff ffb3 	bl	18d34 <nrf_read_timer_cntr>
   18dce:	1b45      	subs	r5, r0, r5
   18dd0:	2d00      	cmp	r5, #0
   18dd2:	dbe8      	blt.n	18da6 <nrf_timer_set_ocmp+0x66>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18dd4:	7862      	ldrb	r2, [r4, #1]
   18dd6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   18dda:	2b00      	cmp	r3, #0
   18ddc:	dbe3      	blt.n	18da6 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18dde:	f002 021f 	and.w	r2, r2, #31
   18de2:	095b      	lsrs	r3, r3, #5
   18de4:	2101      	movs	r1, #1
   18de6:	fa01 f202 	lsl.w	r2, r1, r2
   18dea:	3340      	adds	r3, #64	; 0x40
   18dec:	4901      	ldr	r1, [pc, #4]	; (18df4 <nrf_timer_set_ocmp+0xb4>)
   18dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18df2:	e7d8      	b.n	18da6 <nrf_timer_set_ocmp+0x66>
   18df4:	e000e100 	.word	0xe000e100

00018df8 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18df8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18dfc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18e00:	4770      	bx	lr

00018e02 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18e02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18e06:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18e0a:	4770      	bx	lr

00018e0c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   18e0c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   18e0e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18e10:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18e14:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   18e16:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   18e18:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   18e1c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   18e20:	b1b5      	cbz	r5, 18e50 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   18e22:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   18e26:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   18e28:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   18e2c:	2500      	movs	r5, #0
   18e2e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18e32:	7845      	ldrb	r5, [r0, #1]
   18e34:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   18e38:	2a00      	cmp	r2, #0
   18e3a:	db09      	blt.n	18e50 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18e3c:	f005 051f 	and.w	r5, r5, #31
   18e40:	0952      	lsrs	r2, r2, #5
   18e42:	2001      	movs	r0, #1
   18e44:	fa00 f505 	lsl.w	r5, r0, r5
   18e48:	3240      	adds	r2, #64	; 0x40
   18e4a:	4804      	ldr	r0, [pc, #16]	; (18e5c <hal_timer_read_bsptimer+0x50>)
   18e4c:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   18e50:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   18e54:	b904      	cbnz	r4, 18e58 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   18e56:	b662      	cpsie	i

    return tcntr;
}
   18e58:	bc30      	pop	{r4, r5}
   18e5a:	4770      	bx	lr
   18e5c:	e000e100 	.word	0xe000e100

00018e60 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   18e60:	b570      	push	{r4, r5, r6, lr}
   18e62:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18e64:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18e68:	b672      	cpsid	i
}
   18e6a:	e013      	b.n	18e94 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   18e6c:	6928      	ldr	r0, [r5, #16]
   18e6e:	f7ff ff61 	bl	18d34 <nrf_read_timer_cntr>
            delta = 0;
   18e72:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   18e74:	68e3      	ldr	r3, [r4, #12]
   18e76:	1ac3      	subs	r3, r0, r3
   18e78:	4293      	cmp	r3, r2
   18e7a:	db19      	blt.n	18eb0 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18e7c:	6923      	ldr	r3, [r4, #16]
   18e7e:	b1a3      	cbz	r3, 18eaa <hal_timer_chk_queue+0x4a>
   18e80:	6962      	ldr	r2, [r4, #20]
   18e82:	615a      	str	r2, [r3, #20]
   18e84:	6963      	ldr	r3, [r4, #20]
   18e86:	6922      	ldr	r2, [r4, #16]
   18e88:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   18e8a:	2300      	movs	r3, #0
   18e8c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   18e8e:	6863      	ldr	r3, [r4, #4]
   18e90:	68a0      	ldr	r0, [r4, #8]
   18e92:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   18e94:	696c      	ldr	r4, [r5, #20]
   18e96:	b15c      	cbz	r4, 18eb0 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   18e98:	78ab      	ldrb	r3, [r5, #2]
   18e9a:	2b00      	cmp	r3, #0
   18e9c:	d0e6      	beq.n	18e6c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   18e9e:	4628      	mov	r0, r5
   18ea0:	f7ff ffb4 	bl	18e0c <hal_timer_read_bsptimer>
            delta = -3;
   18ea4:	f06f 0202 	mvn.w	r2, #2
   18ea8:	e7e4      	b.n	18e74 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18eaa:	6963      	ldr	r3, [r4, #20]
   18eac:	61ab      	str	r3, [r5, #24]
   18eae:	e7e9      	b.n	18e84 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   18eb0:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   18eb2:	b133      	cbz	r3, 18ec2 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   18eb4:	68d9      	ldr	r1, [r3, #12]
   18eb6:	4628      	mov	r0, r5
   18eb8:	f7ff ff42 	bl	18d40 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   18ebc:	b906      	cbnz	r6, 18ec0 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   18ebe:	b662      	cpsie	i
}
   18ec0:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   18ec2:	78ab      	ldrb	r3, [r5, #2]
   18ec4:	b11b      	cbz	r3, 18ece <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   18ec6:	6928      	ldr	r0, [r5, #16]
   18ec8:	f7ff ff9b 	bl	18e02 <nrf_rtc_disable_ocmp>
   18ecc:	e7f6      	b.n	18ebc <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   18ece:	6928      	ldr	r0, [r5, #16]
   18ed0:	f7ff ff92 	bl	18df8 <nrf_timer_disable_ocmp>
   18ed4:	e7f2      	b.n	18ebc <hal_timer_chk_queue+0x5c>

00018ed6 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   18ed6:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   18ed8:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   18eda:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   18ede:	b113      	cbz	r3, 18ee6 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   18ee0:	2300      	movs	r3, #0
   18ee2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   18ee6:	6883      	ldr	r3, [r0, #8]
   18ee8:	3301      	adds	r3, #1
   18eea:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   18eec:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   18ef0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   18ef4:	d100      	bne.n	18ef8 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   18ef6:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   18ef8:	f7ff ffb2 	bl	18e60 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   18efc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   18f00:	e7f9      	b.n	18ef6 <hal_timer_irq_handler+0x20>
	...

00018f04 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   18f04:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   18f06:	4802      	ldr	r0, [pc, #8]	; (18f10 <nrf52_timer0_irq_handler+0xc>)
   18f08:	f7ff ffe5 	bl	18ed6 <hal_timer_irq_handler>
}
   18f0c:	bd08      	pop	{r3, pc}
   18f0e:	bf00      	nop
   18f10:	20006d8c 	.word	0x20006d8c

00018f14 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18f14:	2805      	cmp	r0, #5
   18f16:	dc1c      	bgt.n	18f52 <hal_timer_init+0x3e>
   18f18:	4b12      	ldr	r3, [pc, #72]	; (18f64 <hal_timer_init+0x50>)
   18f1a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18f1e:	b1d3      	cbz	r3, 18f56 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   18f20:	781a      	ldrb	r2, [r3, #0]
   18f22:	b9d2      	cbnz	r2, 18f5a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   18f24:	b9d8      	cbnz	r0, 18f5e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   18f26:	4a10      	ldr	r2, [pc, #64]	; (18f68 <hal_timer_init+0x54>)
   18f28:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   18f2a:	2208      	movs	r2, #8
   18f2c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18f2e:	4b0f      	ldr	r3, [pc, #60]	; (18f6c <hal_timer_init+0x58>)
   18f30:	f44f 7280 	mov.w	r2, #256	; 0x100
   18f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   18f38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18f3c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18f40:	22e0      	movs	r2, #224	; 0xe0
   18f42:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18f46:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   18f4a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18f4c:	4a08      	ldr	r2, [pc, #32]	; (18f70 <hal_timer_init+0x5c>)
   18f4e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   18f50:	4770      	bx	lr

err:
    return rc;
   18f52:	2016      	movs	r0, #22
   18f54:	4770      	bx	lr
   18f56:	2016      	movs	r0, #22
   18f58:	4770      	bx	lr
   18f5a:	2016      	movs	r0, #22
   18f5c:	4770      	bx	lr
   18f5e:	2016      	movs	r0, #22
}
   18f60:	4770      	bx	lr
   18f62:	bf00      	nop
   18f64:	00025194 	.word	0x00025194
   18f68:	40008000 	.word	0x40008000
   18f6c:	e000e100 	.word	0xe000e100
   18f70:	00018f05 	.word	0x00018f05

00018f74 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18f74:	2805      	cmp	r0, #5
   18f76:	dc65      	bgt.n	19044 <hal_timer_config+0xd0>
{
   18f78:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   18f7a:	4b3a      	ldr	r3, [pc, #232]	; (19064 <hal_timer_config+0xf0>)
   18f7c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18f80:	2c00      	cmp	r4, #0
   18f82:	d061      	beq.n	19048 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   18f84:	4838      	ldr	r0, [pc, #224]	; (19068 <hal_timer_config+0xf4>)
   18f86:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   18f8a:	7823      	ldrb	r3, [r4, #0]
   18f8c:	2b00      	cmp	r3, #0
   18f8e:	d15d      	bne.n	1904c <hal_timer_config+0xd8>
   18f90:	4a35      	ldr	r2, [pc, #212]	; (19068 <hal_timer_config+0xf4>)
   18f92:	4291      	cmp	r1, r2
   18f94:	d85d      	bhi.n	19052 <hal_timer_config+0xde>
   18f96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   18f9a:	d85c      	bhi.n	19056 <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
   18f9c:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   18f9e:	2a00      	cmp	r2, #0
   18fa0:	d05b      	beq.n	1905a <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   18fa2:	2801      	cmp	r0, #1
   18fa4:	d013      	beq.n	18fce <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   18fa6:	2301      	movs	r3, #1
   18fa8:	2b09      	cmp	r3, #9
   18faa:	d810      	bhi.n	18fce <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
   18fac:	2201      	movs	r2, #1
   18fae:	409a      	lsls	r2, r3
   18fb0:	4282      	cmp	r2, r0
   18fb2:	d202      	bcs.n	18fba <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   18fb4:	3301      	adds	r3, #1
   18fb6:	b2db      	uxtb	r3, r3
   18fb8:	e7f6      	b.n	18fa8 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
   18fba:	1e59      	subs	r1, r3, #1
   18fbc:	2501      	movs	r5, #1
   18fbe:	fa05 f101 	lsl.w	r1, r5, r1
   18fc2:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
   18fc4:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
   18fc6:	4291      	cmp	r1, r2
   18fc8:	d201      	bcs.n	18fce <hal_timer_config+0x5a>
                    prescaler -= 1;
   18fca:	3b01      	subs	r3, #1
   18fcc:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   18fce:	4a26      	ldr	r2, [pc, #152]	; (19068 <hal_timer_config+0xf4>)
   18fd0:	411a      	asrs	r2, r3
   18fd2:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   18fd4:	2201      	movs	r2, #1
   18fd6:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18fd8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18fdc:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   18fde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18fe2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   18fe6:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   18fea:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   18fee:	d00c      	beq.n	1900a <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   18ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18ff4:	2100      	movs	r1, #0
   18ff6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   18ffa:	2101      	movs	r1, #1
   18ffc:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   18ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19002:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   19006:	2a00      	cmp	r2, #0
   19008:	d0f9      	beq.n	18ffe <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1900a:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1900c:	2101      	movs	r1, #1
   1900e:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   19010:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   19012:	2500      	movs	r5, #0
   19014:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   19018:	2503      	movs	r5, #3
   1901a:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1901e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   19022:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   19024:	7862      	ldrb	r2, [r4, #1]
   19026:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1902a:	2b00      	cmp	r3, #0
   1902c:	db07      	blt.n	1903e <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1902e:	f002 021f 	and.w	r2, r2, #31
   19032:	095b      	lsrs	r3, r3, #5
   19034:	fa01 f202 	lsl.w	r2, r1, r2
   19038:	490c      	ldr	r1, [pc, #48]	; (1906c <hal_timer_config+0xf8>)
   1903a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1903e:	b970      	cbnz	r0, 1905e <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
   19040:	b662      	cpsie	i
}
   19042:	e004      	b.n	1904e <hal_timer_config+0xda>

    return 0;

err:
    return rc;
   19044:	2016      	movs	r0, #22
}
   19046:	4770      	bx	lr
    return rc;
   19048:	2016      	movs	r0, #22
   1904a:	e000      	b.n	1904e <hal_timer_config+0xda>
   1904c:	2016      	movs	r0, #22
}
   1904e:	bc30      	pop	{r4, r5}
   19050:	4770      	bx	lr
    return rc;
   19052:	2016      	movs	r0, #22
   19054:	e7fb      	b.n	1904e <hal_timer_config+0xda>
   19056:	2016      	movs	r0, #22
   19058:	e7f9      	b.n	1904e <hal_timer_config+0xda>
   1905a:	2016      	movs	r0, #22
   1905c:	e7f7      	b.n	1904e <hal_timer_config+0xda>
    return 0;
   1905e:	2000      	movs	r0, #0
   19060:	e7f5      	b.n	1904e <hal_timer_config+0xda>
   19062:	bf00      	nop
   19064:	00025194 	.word	0x00025194
   19068:	00f42400 	.word	0x00f42400
   1906c:	e000e100 	.word	0xe000e100

00019070 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   19070:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   19072:	2805      	cmp	r0, #5
   19074:	dc0c      	bgt.n	19090 <hal_timer_read+0x20>
   19076:	4b09      	ldr	r3, [pc, #36]	; (1909c <hal_timer_read+0x2c>)
   19078:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1907c:	b140      	cbz	r0, 19090 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1907e:	7883      	ldrb	r3, [r0, #2]
   19080:	b113      	cbz	r3, 19088 <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   19082:	f7ff fec3 	bl	18e0c <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   19086:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   19088:	6900      	ldr	r0, [r0, #16]
   1908a:	f7ff fe53 	bl	18d34 <nrf_read_timer_cntr>
    return tcntr;
   1908e:	e7fa      	b.n	19086 <hal_timer_read+0x16>
    assert(0);
   19090:	2300      	movs	r3, #0
   19092:	461a      	mov	r2, r3
   19094:	4619      	mov	r1, r3
   19096:	4618      	mov	r0, r3
   19098:	f7f4 f962 	bl	d360 <__assert_func>
   1909c:	00025194 	.word	0x00025194

000190a0 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   190a0:	2805      	cmp	r0, #5
   190a2:	dc0c      	bgt.n	190be <hal_timer_set_cb+0x1e>
{
   190a4:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   190a6:	4c08      	ldr	r4, [pc, #32]	; (190c8 <hal_timer_set_cb+0x28>)
   190a8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   190ac:	b14c      	cbz	r4, 190c2 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   190ae:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   190b0:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   190b2:	2000      	movs	r0, #0
   190b4:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   190b6:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   190b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   190bc:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   190be:	2016      	movs	r0, #22
}
   190c0:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   190c2:	2016      	movs	r0, #22
    return rc;
   190c4:	e7f8      	b.n	190b8 <hal_timer_set_cb+0x18>
   190c6:	bf00      	nop
   190c8:	00025194 	.word	0x00025194

000190cc <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   190cc:	2800      	cmp	r0, #0
   190ce:	d03b      	beq.n	19148 <hal_timer_start_at+0x7c>
{
   190d0:	b538      	push	{r3, r4, r5, lr}
   190d2:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   190d4:	6943      	ldr	r3, [r0, #20]
   190d6:	2b00      	cmp	r3, #0
   190d8:	d138      	bne.n	1914c <hal_timer_start_at+0x80>
        (timer->cb_func == NULL)) {
   190da:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   190dc:	2b00      	cmp	r3, #0
   190de:	d037      	beq.n	19150 <hal_timer_start_at+0x84>
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   190e0:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   190e2:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   190e4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   190e8:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   190ea:	6943      	ldr	r3, [r0, #20]
   190ec:	b13b      	cbz	r3, 190fe <hal_timer_start_at+0x32>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
    } else {
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   190ee:	b1bb      	cbz	r3, 19120 <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   190f0:	68e2      	ldr	r2, [r4, #12]
   190f2:	68d9      	ldr	r1, [r3, #12]
   190f4:	1a52      	subs	r2, r2, r1
   190f6:	2a00      	cmp	r2, #0
   190f8:	db0a      	blt.n	19110 <hal_timer_start_at+0x44>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   190fa:	691b      	ldr	r3, [r3, #16]
   190fc:	e7f7      	b.n	190ee <hal_timer_start_at+0x22>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   190fe:	4622      	mov	r2, r4
   19100:	f842 3f10 	str.w	r3, [r2, #16]!
   19104:	6182      	str	r2, [r0, #24]
   19106:	4603      	mov	r3, r0
   19108:	f843 4f14 	str.w	r4, [r3, #20]!
   1910c:	6163      	str	r3, [r4, #20]
   1910e:	e008      	b.n	19122 <hal_timer_start_at+0x56>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   19110:	695a      	ldr	r2, [r3, #20]
   19112:	6162      	str	r2, [r4, #20]
   19114:	6123      	str	r3, [r4, #16]
   19116:	695a      	ldr	r2, [r3, #20]
   19118:	6014      	str	r4, [r2, #0]
   1911a:	f104 0210 	add.w	r2, r4, #16
   1911e:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (!entry) {
   19120:	b133      	cbz	r3, 19130 <hal_timer_start_at+0x64>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   19122:	6943      	ldr	r3, [r0, #20]
   19124:	42a3      	cmp	r3, r4
   19126:	d00b      	beq.n	19140 <hal_timer_start_at+0x74>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   19128:	b9a5      	cbnz	r5, 19154 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   1912a:	b662      	cpsie	i

    return 0;
   1912c:	2000      	movs	r0, #0
}
   1912e:	e00e      	b.n	1914e <hal_timer_start_at+0x82>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   19130:	6123      	str	r3, [r4, #16]
   19132:	6983      	ldr	r3, [r0, #24]
   19134:	6163      	str	r3, [r4, #20]
   19136:	601c      	str	r4, [r3, #0]
   19138:	f104 0310 	add.w	r3, r4, #16
   1913c:	6183      	str	r3, [r0, #24]
   1913e:	e7f0      	b.n	19122 <hal_timer_start_at+0x56>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   19140:	68e1      	ldr	r1, [r4, #12]
   19142:	f7ff fdfd 	bl	18d40 <nrf_timer_set_ocmp>
   19146:	e7ef      	b.n	19128 <hal_timer_start_at+0x5c>
        return EINVAL;
   19148:	2016      	movs	r0, #22
}
   1914a:	4770      	bx	lr
        return EINVAL;
   1914c:	2016      	movs	r0, #22
}
   1914e:	bd38      	pop	{r3, r4, r5, pc}
        return EINVAL;
   19150:	2016      	movs	r0, #22
   19152:	e7fc      	b.n	1914e <hal_timer_start_at+0x82>
    return 0;
   19154:	2000      	movs	r0, #0
   19156:	e7fa      	b.n	1914e <hal_timer_start_at+0x82>

00019158 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   19158:	b360      	cbz	r0, 191b4 <hal_timer_stop+0x5c>
{
   1915a:	b570      	push	{r4, r5, r6, lr}
   1915c:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1915e:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19160:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19164:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   19166:	6942      	ldr	r2, [r0, #20]
   19168:	b18a      	cbz	r2, 1918e <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1916a:	6948      	ldr	r0, [r1, #20]
   1916c:	4298      	cmp	r0, r3
   1916e:	d012      	beq.n	19196 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   19170:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   19172:	6918      	ldr	r0, [r3, #16]
   19174:	b190      	cbz	r0, 1919c <hal_timer_stop+0x44>
   19176:	6142      	str	r2, [r0, #20]
   19178:	695a      	ldr	r2, [r3, #20]
   1917a:	6918      	ldr	r0, [r3, #16]
   1917c:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   1917e:	2200      	movs	r2, #0
   19180:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   19182:	b125      	cbz	r5, 1918e <hal_timer_stop+0x36>
            if (entry) {
   19184:	b166      	cbz	r6, 191a0 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   19186:	68f1      	ldr	r1, [r6, #12]
   19188:	6830      	ldr	r0, [r6, #0]
   1918a:	f7ff fdd9 	bl	18d40 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1918e:	b99c      	cbnz	r4, 191b8 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   19190:	b662      	cpsie	i

    return 0;
   19192:	2000      	movs	r0, #0
}
   19194:	e011      	b.n	191ba <hal_timer_stop+0x62>
            entry = TAILQ_NEXT(timer, link);
   19196:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   19198:	2501      	movs	r5, #1
   1919a:	e7ea      	b.n	19172 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1919c:	618a      	str	r2, [r1, #24]
   1919e:	e7eb      	b.n	19178 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   191a0:	788b      	ldrb	r3, [r1, #2]
   191a2:	b11b      	cbz	r3, 191ac <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   191a4:	6908      	ldr	r0, [r1, #16]
   191a6:	f7ff fe2c 	bl	18e02 <nrf_rtc_disable_ocmp>
   191aa:	e7f0      	b.n	1918e <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   191ac:	6908      	ldr	r0, [r1, #16]
   191ae:	f7ff fe23 	bl	18df8 <nrf_timer_disable_ocmp>
   191b2:	e7ec      	b.n	1918e <hal_timer_stop+0x36>
        return EINVAL;
   191b4:	2016      	movs	r0, #22
}
   191b6:	4770      	bx	lr
    return 0;
   191b8:	2000      	movs	r0, #0
}
   191ba:	bd70      	pop	{r4, r5, r6, pc}

000191bc <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   191bc:	b508      	push	{r3, lr}
    assert(0);
   191be:	2300      	movs	r3, #0
   191c0:	461a      	mov	r2, r3
   191c2:	4619      	mov	r1, r3
   191c4:	4618      	mov	r0, r3
   191c6:	f7f4 f8cb 	bl	d360 <__assert_func>
	...

000191cc <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   191cc:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   191ce:	4b06      	ldr	r3, [pc, #24]	; (191e8 <nrf52_wdt_irq_handler+0x1c>)
   191d0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   191d4:	f013 0f01 	tst.w	r3, #1
   191d8:	d100      	bne.n	191dc <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   191da:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   191dc:	4b02      	ldr	r3, [pc, #8]	; (191e8 <nrf52_wdt_irq_handler+0x1c>)
   191de:	2200      	movs	r2, #0
   191e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   191e4:	f7ff ffea 	bl	191bc <nrf52_hal_wdt_default_handler>
   191e8:	40010000 	.word	0x40010000

000191ec <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   191ec:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   191ee:	4b17      	ldr	r3, [pc, #92]	; (1924c <hal_watchdog_init+0x60>)
   191f0:	2201      	movs	r2, #1
   191f2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   191f6:	4b16      	ldr	r3, [pc, #88]	; (19250 <hal_watchdog_init+0x64>)
   191f8:	4298      	cmp	r0, r3
   191fa:	d821      	bhi.n	19240 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   191fc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   19200:	015b      	lsls	r3, r3, #5
   19202:	4a14      	ldr	r2, [pc, #80]	; (19254 <hal_watchdog_init+0x68>)
   19204:	fba2 2303 	umull	r2, r3, r2, r3
   19208:	08db      	lsrs	r3, r3, #3
   1920a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1920e:	4b0f      	ldr	r3, [pc, #60]	; (1924c <hal_watchdog_init+0x60>)
   19210:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19214:	4a10      	ldr	r2, [pc, #64]	; (19258 <hal_watchdog_init+0x6c>)
   19216:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19218:	4910      	ldr	r1, [pc, #64]	; (1925c <hal_watchdog_init+0x70>)
   1921a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1921e:	4a10      	ldr	r2, [pc, #64]	; (19260 <hal_watchdog_init+0x74>)
   19220:	21e0      	movs	r1, #224	; 0xe0
   19222:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19226:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1922a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1922e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   19230:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   19234:	f042 0201 	orr.w	r2, r2, #1
   19238:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1923c:	2000      	movs	r0, #0
   1923e:	bd08      	pop	{r3, pc}
        assert(0);
   19240:	2300      	movs	r3, #0
   19242:	461a      	mov	r2, r3
   19244:	4619      	mov	r1, r3
   19246:	4618      	mov	r0, r3
   19248:	f7f4 f88a 	bl	d360 <__assert_func>
   1924c:	40010000 	.word	0x40010000
   19250:	02aaaaaa 	.word	0x02aaaaaa
   19254:	10624dd3 	.word	0x10624dd3
   19258:	e000ed00 	.word	0xe000ed00
   1925c:	000191cd 	.word	0x000191cd
   19260:	e000e100 	.word	0xe000e100

00019264 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   19264:	4b02      	ldr	r3, [pc, #8]	; (19270 <hal_watchdog_enable+0xc>)
   19266:	2201      	movs	r2, #1
   19268:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1926c:	601a      	str	r2, [r3, #0]
}
   1926e:	4770      	bx	lr
   19270:	40010000 	.word	0x40010000

00019274 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   19274:	4b02      	ldr	r3, [pc, #8]	; (19280 <hal_watchdog_tickle+0xc>)
   19276:	4a03      	ldr	r2, [pc, #12]	; (19284 <hal_watchdog_tickle+0x10>)
   19278:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1927c:	4770      	bx	lr
   1927e:	bf00      	nop
   19280:	40010000 	.word	0x40010000
   19284:	6e524635 	.word	0x6e524635

00019288 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   19288:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1928a:	2100      	movs	r1, #0
   1928c:	4608      	mov	r0, r1
   1928e:	f7ff fe41 	bl	18f14 <hal_timer_init>
    assert(rc == 0);
   19292:	b920      	cbnz	r0, 1929e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   19294:	4808      	ldr	r0, [pc, #32]	; (192b8 <nrf52_periph_create_timers+0x30>)
   19296:	f7f4 faa1 	bl	d7dc <os_cputime_init>
    assert(rc == 0);
   1929a:	b930      	cbnz	r0, 192aa <nrf52_periph_create_timers+0x22>
#endif
}
   1929c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1929e:	2300      	movs	r3, #0
   192a0:	461a      	mov	r2, r3
   192a2:	4619      	mov	r1, r3
   192a4:	4618      	mov	r0, r3
   192a6:	f7f4 f85b 	bl	d360 <__assert_func>
    assert(rc == 0);
   192aa:	2300      	movs	r3, #0
   192ac:	461a      	mov	r2, r3
   192ae:	4619      	mov	r1, r3
   192b0:	4618      	mov	r0, r3
   192b2:	f7f4 f855 	bl	d360 <__assert_func>
   192b6:	bf00      	nop
   192b8:	000f4240 	.word	0x000f4240

000192bc <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
   192bc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   192be:	2200      	movs	r2, #0
   192c0:	4905      	ldr	r1, [pc, #20]	; (192d8 <nrf52_periph_create_spi+0x1c>)
   192c2:	4610      	mov	r0, r2
   192c4:	f7f3 fe4e 	bl	cf64 <hal_spi_init>
    assert(rc == 0);
   192c8:	b900      	cbnz	r0, 192cc <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   192ca:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   192cc:	2300      	movs	r3, #0
   192ce:	461a      	mov	r2, r3
   192d0:	4619      	mov	r1, r3
   192d2:	4618      	mov	r0, r3
   192d4:	f7f4 f844 	bl	d360 <__assert_func>
   192d8:	000251ac 	.word	0x000251ac

000192dc <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   192dc:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   192de:	f7ff ffd3 	bl	19288 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
   192e2:	f7ff ffeb 	bl	192bc <nrf52_periph_create_spi>
}
   192e6:	bd08      	pop	{r3, pc}

000192e8 <nrng_get_config>:
struct uwb_rng_config *
nrng_get_config(struct nrng_instance * nrng, uwb_dataframe_code_t code)
{
    struct rng_config_list * cfgs;

    if(!(SLIST_EMPTY(&nrng->rng_configs))){
   192e8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   192ec:	b12b      	cbz	r3, 192fa <nrng_get_config+0x12>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
   192ee:	b143      	cbz	r3, 19302 <nrng_get_config+0x1a>
            if (cfgs != NULL && cfgs->rng_code == code) {
   192f0:	881a      	ldrh	r2, [r3, #0]
   192f2:	428a      	cmp	r2, r1
   192f4:	d003      	beq.n	192fe <nrng_get_config+0x16>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
   192f6:	68db      	ldr	r3, [r3, #12]
   192f8:	e7f9      	b.n	192ee <nrng_get_config+0x6>
                return cfgs->config;
            }
        }
    }
    return &g_config;
   192fa:	4803      	ldr	r0, [pc, #12]	; (19308 <nrng_get_config+0x20>)
   192fc:	4770      	bx	lr
                return cfgs->config;
   192fe:	6898      	ldr	r0, [r3, #8]
   19300:	4770      	bx	lr
    return &g_config;
   19302:	4801      	ldr	r0, [pc, #4]	; (19308 <nrng_get_config+0x20>)
}
   19304:	4770      	bx	lr
   19306:	bf00      	nop
   19308:	20001574 	.word	0x20001574

0001930c <nrng_append_config>:
 * @param callbacks  callback instance.
 * @return void
 */
void
nrng_append_config(struct nrng_instance * nrng, struct rng_config_list *cfgs)
{
   1930c:	b508      	push	{r3, lr}
    assert(nrng);
   1930e:	b120      	cbz	r0, 1931a <nrng_append_config+0xe>

    if(!(SLIST_EMPTY(&nrng->rng_configs))) {
   19310:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   19314:	b17b      	cbz	r3, 19336 <nrng_append_config+0x2a>
        struct rng_config_list * prev_cfgs = NULL;
   19316:	2200      	movs	r2, #0
   19318:	e007      	b.n	1932a <nrng_append_config+0x1e>
    assert(nrng);
   1931a:	2300      	movs	r3, #0
   1931c:	461a      	mov	r2, r3
   1931e:	4619      	mov	r1, r3
   19320:	4618      	mov	r0, r3
   19322:	f7f4 f81d 	bl	d360 <__assert_func>
        struct rng_config_list * cur_cfgs = NULL;
        SLIST_FOREACH(cur_cfgs, &nrng->rng_configs, next){
            prev_cfgs = cur_cfgs;
   19326:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cfgs, &nrng->rng_configs, next){
   19328:	68db      	ldr	r3, [r3, #12]
   1932a:	2b00      	cmp	r3, #0
   1932c:	d1fb      	bne.n	19326 <nrng_append_config+0x1a>
        }
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
   1932e:	68d3      	ldr	r3, [r2, #12]
   19330:	60cb      	str	r3, [r1, #12]
   19332:	60d1      	str	r1, [r2, #12]
    } else {
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
    }
}
   19334:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
   19336:	60cb      	str	r3, [r1, #12]
   19338:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
}
   1933c:	e7fa      	b.n	19334 <nrng_append_config+0x28>

0001933e <nrng_config>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
nrng_config(struct nrng_instance * nrng, struct uwb_rng_config * config)
{
   1933e:	b508      	push	{r3, lr}
    assert(config);
   19340:	b189      	cbz	r1, 19366 <nrng_config+0x28>
   19342:	460b      	mov	r3, r1

    memcpy(&nrng->config, config, sizeof(struct uwb_rng_config));
   19344:	f8d1 c000 	ldr.w	ip, [r1]
   19348:	6849      	ldr	r1, [r1, #4]
   1934a:	689a      	ldr	r2, [r3, #8]
   1934c:	68db      	ldr	r3, [r3, #12]
   1934e:	f8c0 c0b0 	str.w	ip, [r0, #176]	; 0xb0
   19352:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   19356:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   1935a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    return nrng->dev_inst->status;
   1935e:	6803      	ldr	r3, [r0, #0]
}
   19360:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   19364:	bd08      	pop	{r3, pc}
    assert(config);
   19366:	2300      	movs	r3, #0
   19368:	461a      	mov	r2, r3
   1936a:	4619      	mov	r1, r3
   1936c:	4618      	mov	r0, r3
   1936e:	f7f3 fff7 	bl	d360 <__assert_func>
	...

00019374 <nrng_init>:
{
   19374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19378:	b082      	sub	sp, #8
    assert(inst);
   1937a:	2800      	cmp	r0, #0
   1937c:	d04c      	beq.n	19418 <nrng_init+0xa4>
   1937e:	460d      	mov	r5, r1
   19380:	4690      	mov	r8, r2
   19382:	461e      	mov	r6, r3
   19384:	4607      	mov	r7, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
   19386:	210b      	movs	r1, #11
   19388:	f7ef fc07 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (nrng == NULL) {
   1938c:	4604      	mov	r4, r0
   1938e:	2800      	cmp	r0, #0
   19390:	d048      	beq.n	19424 <nrng_init+0xb0>
   19392:	2101      	movs	r1, #1
   19394:	f104 0064 	add.w	r0, r4, #100	; 0x64
   19398:	f7f4 ffd0 	bl	e33c <os_sem_init>
    assert(err == DPL_OK);
   1939c:	2800      	cmp	r0, #0
   1939e:	d159      	bne.n	19454 <nrng_init+0xe0>
    nrng->dev_inst = inst;
   193a0:	6027      	str	r7, [r4, #0]
    nrng->nframes = nframes;
   193a2:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
    nrng->nnodes = nnodes;
   193a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   193aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    nrng->device_type = type;
   193ae:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    nrng->idx = 0xFFFF;
   193b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   193b6:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
    nrng->resp_count = nrng->t1_final_flag = 0;
   193ba:	2300      	movs	r3, #0
   193bc:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
   193c0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    nrng->seq_num = 0;
   193c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (config != NULL ){
   193c8:	b11d      	cbz	r5, 193d2 <nrng_init+0x5e>
        nrng_config(nrng, config);
   193ca:	4629      	mov	r1, r5
   193cc:	4620      	mov	r0, r4
   193ce:	f7ff ffb6 	bl	1933e <nrng_config>
    nrng->cbs = (struct uwb_mac_interface){
   193d2:	f104 056c 	add.w	r5, r4, #108	; 0x6c
   193d6:	223c      	movs	r2, #60	; 0x3c
   193d8:	2100      	movs	r1, #0
   193da:	4628      	mov	r0, r5
   193dc:	f7f8 f859 	bl	11492 <memset>
   193e0:	260b      	movs	r6, #11
   193e2:	f8a4 606e 	strh.w	r6, [r4, #110]	; 0x6e
   193e6:	6724      	str	r4, [r4, #112]	; 0x70
    uwb_mac_append_interface(inst, &nrng->cbs);
   193e8:	4629      	mov	r1, r5
   193ea:	4638      	mov	r0, r7
   193ec:	f7ef fb80 	bl	8af0 <uwb_mac_append_interface>
    int rc = stats_init(
   193f0:	1d25      	adds	r5, r4, #4
   193f2:	9600      	str	r6, [sp, #0]
   193f4:	4b1d      	ldr	r3, [pc, #116]	; (1946c <nrng_init+0xf8>)
   193f6:	4632      	mov	r2, r6
   193f8:	2104      	movs	r1, #4
   193fa:	4628      	mov	r0, r5
   193fc:	f7fb fc06 	bl	14c0c <stats_init>
   19400:	4606      	mov	r6, r0
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
   19402:	4629      	mov	r1, r5
   19404:	481a      	ldr	r0, [pc, #104]	; (19470 <nrng_init+0xfc>)
   19406:	f7fb fc8b 	bl	14d20 <stats_register>
    assert(rc == 0);
   1940a:	ea56 0300 	orrs.w	r3, r6, r0
   1940e:	d127      	bne.n	19460 <nrng_init+0xec>
}
   19410:	4620      	mov	r0, r4
   19412:	b002      	add	sp, #8
   19414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(inst);
   19418:	2300      	movs	r3, #0
   1941a:	461a      	mov	r2, r3
   1941c:	4619      	mov	r1, r3
   1941e:	4618      	mov	r0, r3
   19420:	f7f3 ff9e 	bl	d360 <__assert_func>
        nrng = (struct nrng_instance*) malloc(sizeof(struct nrng_instance) + nframes * sizeof(nrng_frame_t * ));
   19424:	f106 0032 	add.w	r0, r6, #50	; 0x32
   19428:	0080      	lsls	r0, r0, #2
   1942a:	f7f7 ffb5 	bl	11398 <malloc>
        assert(nrng);
   1942e:	4604      	mov	r4, r0
   19430:	b150      	cbz	r0, 19448 <nrng_init+0xd4>
        memset(nrng, 0, sizeof(struct nrng_instance));
   19432:	22c8      	movs	r2, #200	; 0xc8
   19434:	2100      	movs	r1, #0
   19436:	f7f8 f82c 	bl	11492 <memset>
        nrng->status.selfmalloc = 1;
   1943a:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
   1943e:	f043 0301 	orr.w	r3, r3, #1
   19442:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
   19446:	e7a4      	b.n	19392 <nrng_init+0x1e>
        assert(nrng);
   19448:	2300      	movs	r3, #0
   1944a:	461a      	mov	r2, r3
   1944c:	4619      	mov	r1, r3
   1944e:	4618      	mov	r0, r3
   19450:	f7f3 ff86 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
   19454:	2300      	movs	r3, #0
   19456:	461a      	mov	r2, r3
   19458:	4619      	mov	r1, r3
   1945a:	4618      	mov	r0, r3
   1945c:	f7f3 ff80 	bl	d360 <__assert_func>
    assert(rc == 0);
   19460:	2300      	movs	r3, #0
   19462:	461a      	mov	r2, r3
   19464:	4619      	mov	r1, r3
   19466:	4618      	mov	r0, r3
   19468:	f7f3 ff7a 	bl	d360 <__assert_func>
   1946c:	00025240 	.word	0x00025240
   19470:	000251b0 	.word	0x000251b0

00019474 <nrng_pkg_init>:


void nrng_pkg_init(void)
{
   19474:	b5f0      	push	{r4, r5, r6, r7, lr}
   19476:	b091      	sub	sp, #68	; 0x44
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   19478:	f7f4 f9cd 	bl	d816 <os_cputime_get32>
   1947c:	4601      	mov	r1, r0
   1947e:	482f      	ldr	r0, [pc, #188]	; (1953c <nrng_pkg_init+0xc8>)
   19480:	f7f8 fc08 	bl	11c94 <printf>
#endif

    struct nrng_instance *nrng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_DEVICE_0)
    udev = uwb_dev_idx_lookup(0);
   19484:	2000      	movs	r0, #0
   19486:	f7ef fb03 	bl	8a90 <uwb_dev_idx_lookup>
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
   1948a:	2310      	movs	r3, #16
   1948c:	9300      	str	r3, [sp, #0]
   1948e:	2320      	movs	r3, #32
   19490:	2201      	movs	r2, #1
   19492:	492b      	ldr	r1, [pc, #172]	; (19540 <nrng_pkg_init+0xcc>)
   19494:	f7ff ff6e 	bl	19374 <nrng_init>
    assert(nframes <= nrng->nframes);
   19498:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1949c:	2b1f      	cmp	r3, #31
   1949e:	d919      	bls.n	194d4 <nrng_pkg_init+0x60>
   194a0:	4607      	mov	r7, r0
    nrng_frame_t default_frame = {
   194a2:	2234      	movs	r2, #52	; 0x34
   194a4:	2100      	movs	r1, #0
   194a6:	a803      	add	r0, sp, #12
   194a8:	f7f7 fff3 	bl	11492 <memset>
   194ac:	f648 0341 	movw	r3, #34881	; 0x8841
   194b0:	f8ad 300c 	strh.w	r3, [sp, #12]
   194b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
   194b8:	f88d 300f 	strb.w	r3, [sp, #15]
   194bc:	f06f 0321 	mvn.w	r3, #33	; 0x21
   194c0:	f88d 3010 	strb.w	r3, [sp, #16]
   194c4:	234a      	movs	r3, #74	; 0x4a
   194c6:	f88d 3015 	strb.w	r3, [sp, #21]
   194ca:	2301      	movs	r3, #1
   194cc:	f88d 3016 	strb.w	r3, [sp, #22]
    for (uint16_t i = 0; i < nframes; i++){
   194d0:	2500      	movs	r5, #0
   194d2:	e021      	b.n	19518 <nrng_pkg_init+0xa4>
    assert(nframes <= nrng->nframes);
   194d4:	2300      	movs	r3, #0
   194d6:	461a      	mov	r2, r3
   194d8:	4619      	mov	r1, r3
   194da:	4618      	mov	r0, r3
   194dc:	f7f3 ff40 	bl	d360 <__assert_func>
        assert(nrng->frames[i]);
   194e0:	2300      	movs	r3, #0
   194e2:	461a      	mov	r2, r3
   194e4:	4619      	mov	r1, r3
   194e6:	4618      	mov	r0, r3
   194e8:	f7f3 ff3a 	bl	d360 <__assert_func>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
   194ec:	46a6      	mov	lr, r4
   194ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   194f2:	f8cc 0000 	str.w	r0, [ip]
   194f6:	f8cc 1004 	str.w	r1, [ip, #4]
   194fa:	f8cc 2008 	str.w	r2, [ip, #8]
   194fe:	f8cc 300c 	str.w	r3, [ip, #12]
   19502:	4674      	mov	r4, lr
   19504:	f10c 0c10 	add.w	ip, ip, #16
   19508:	45b6      	cmp	lr, r6
   1950a:	d1ef      	bne.n	194ec <nrng_pkg_init+0x78>
   1950c:	f8de 0000 	ldr.w	r0, [lr]
   19510:	f8cc 0000 	str.w	r0, [ip]
    for (uint16_t i = 0; i < nframes; i++){
   19514:	3501      	adds	r5, #1
   19516:	b2ad      	uxth	r5, r5
   19518:	2d1f      	cmp	r5, #31
   1951a:	d80c      	bhi.n	19536 <nrng_pkg_init+0xc2>
        nrng->frames[i] = (nrng_frame_t * ) malloc(sizeof(nrng_frame_t));
   1951c:	2034      	movs	r0, #52	; 0x34
   1951e:	f7f7 ff3b 	bl	11398 <malloc>
   19522:	f105 0332 	add.w	r3, r5, #50	; 0x32
   19526:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
        assert(nrng->frames[i]);
   1952a:	2800      	cmp	r0, #0
   1952c:	d0d8      	beq.n	194e0 <nrng_pkg_init+0x6c>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
   1952e:	ac03      	add	r4, sp, #12
   19530:	4684      	mov	ip, r0
   19532:	ae0f      	add	r6, sp, #60	; 0x3c
   19534:	e7da      	b.n	194ec <nrng_pkg_init+0x78>
    udev = uwb_dev_idx_lookup(2);
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
    nrng_set_frames(nrng, MYNEWT_VAL(NRNG_NFRAMES));
#endif

}
   19536:	b011      	add	sp, #68	; 0x44
   19538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1953a:	bf00      	nop
   1953c:	000251b8 	.word	0x000251b8
   19540:	20001574 	.word	0x20001574
   19544:	00000000 	.word	0x00000000

00019548 <usecs_to_response>:
 * @param duration     Time delay between request.
 *
 * @return ret of uint32_t constant
 */
uint32_t
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
   19548:	b538      	push	{r3, r4, r5, lr}
   1954a:	460c      	mov	r4, r1
   1954c:	461d      	mov	r5, r3
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
   1954e:	6890      	ldr	r0, [r2, #8]
   19550:	f008 fa0a 	bl	21968 <__aeabi_ui2d>
   19554:	a306      	add	r3, pc, #24	; (adr r3, 19570 <usecs_to_response+0x28>)
   19556:	e9d3 2300 	ldrd	r2, r3, [r3]
   1955a:	f008 fa7f 	bl	21a5c <__aeabi_dmul>
   1955e:	f008 fd55 	bl	2200c <__aeabi_d2uiz>
   19562:	4428      	add	r0, r5
    return ret;
}
   19564:	fb04 f000 	mul.w	r0, r4, r0
   19568:	bd38      	pop	{r3, r4, r5, pc}
   1956a:	bf00      	nop
   1956c:	f3af 8000 	nop.w
   19570:	90690691 	.word	0x90690691
   19574:	3ff06906 	.word	0x3ff06906

00019578 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
   19578:	b538      	push	{r3, r4, r5, lr}
   1957a:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
   1957e:	ee10 2a10 	vmov	r2, s0
   19582:	462b      	mov	r3, r5
   19584:	ee10 0a10 	vmov	r0, s0
   19588:	4629      	mov	r1, r5
   1958a:	f008 fd01 	bl	21f90 <__aeabi_dcmpun>
   1958e:	b948      	cbnz	r0, 195a4 <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
   19590:	a309      	add	r3, pc, #36	; (adr r3, 195b8 <uwb_rng_tof_to_meters+0x40>)
   19592:	e9d3 2300 	ldrd	r2, r3, [r3]
   19596:	4620      	mov	r0, r4
   19598:	4629      	mov	r1, r5
   1959a:	f008 fa5f 	bl	21a5c <__aeabi_dmul>
   1959e:	ec41 0b10 	vmov	d0, r0, r1
}
   195a2:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
   195a4:	ed9f 0b02 	vldr	d0, [pc, #8]	; 195b0 <uwb_rng_tof_to_meters+0x38>
   195a8:	e7fb      	b.n	195a2 <uwb_rng_tof_to_meters+0x2a>
   195aa:	bf00      	nop
   195ac:	f3af 8000 	nop.w
   195b0:	00000000 	.word	0x00000000
   195b4:	7ff80000 	.word	0x7ff80000
   195b8:	e57d514d 	.word	0xe57d514d
   195bc:	3f73363a 	.word	0x3f73363a

000195c0 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
   195c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   195c4:	ec59 8b10 	vmov	r8, r9, d0
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0), tmpf;
    uint64_t T1R, T1r;

    T1R = (response_timestamp - request_timestamp);
   195c8:	1a46      	subs	r6, r0, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
   195ca:	9806      	ldr	r0, [sp, #24]
   195cc:	1a10      	subs	r0, r2, r0
   195ce:	2100      	movs	r1, #0
   195d0:	f008 fa0e 	bl	219f0 <__aeabi_ul2d>
   195d4:	4604      	mov	r4, r0
   195d6:	460d      	mov	r5, r1
   195d8:	4642      	mov	r2, r8
   195da:	464b      	mov	r3, r9
   195dc:	2000      	movs	r0, #0
   195de:	490d      	ldr	r1, [pc, #52]	; (19614 <calc_tof_ss+0x54>)
   195e0:	f008 f884 	bl	216ec <__aeabi_dsub>
   195e4:	4602      	mov	r2, r0
   195e6:	460b      	mov	r3, r1
   195e8:	4620      	mov	r0, r4
   195ea:	4629      	mov	r1, r5
   195ec:	f008 fa36 	bl	21a5c <__aeabi_dmul>
   195f0:	4604      	mov	r4, r0
   195f2:	460d      	mov	r5, r1
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
   195f4:	4630      	mov	r0, r6
   195f6:	f008 f9b7 	bl	21968 <__aeabi_ui2d>
   195fa:	4622      	mov	r2, r4
   195fc:	462b      	mov	r3, r5
   195fe:	f008 f875 	bl	216ec <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
   19602:	2200      	movs	r2, #0
   19604:	4b04      	ldr	r3, [pc, #16]	; (19618 <calc_tof_ss+0x58>)
   19606:	f008 fa29 	bl	21a5c <__aeabi_dmul>

    return ToF;
}
   1960a:	ec41 0b10 	vmov	d0, r0, r1
   1960e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   19612:	bf00      	nop
   19614:	3ff00000 	.word	0x3ff00000
   19618:	3fe00000 	.word	0x3fe00000
   1961c:	00000000 	.word	0x00000000

00019620 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
   19620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19622:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
   19624:	1a43      	subs	r3, r0, r1
   19626:	f04f 0c00 	mov.w	ip, #0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
   1962a:	9906      	ldr	r1, [sp, #24]
   1962c:	1a52      	subs	r2, r2, r1
    T2R = (response_timestamp - request_timestamp);
   1962e:	9d08      	ldr	r5, [sp, #32]
   19630:	9909      	ldr	r1, [sp, #36]	; 0x24
   19632:	1a6d      	subs	r5, r5, r1
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
   19634:	990a      	ldr	r1, [sp, #40]	; 0x28
   19636:	1b0c      	subs	r4, r1, r4
    nom = T1R * T2R  - T1r * T2r;
   19638:	fba3 e105 	umull	lr, r1, r3, r5
   1963c:	fba2 0604 	umull	r0, r6, r2, r4
   19640:	ebbe 0000 	subs.w	r0, lr, r0
   19644:	eb61 0106 	sbc.w	r1, r1, r6
    denom = T1R + T2R  + T1r + T2r;
   19648:	195b      	adds	r3, r3, r5
   1964a:	eb4c 0c0c 	adc.w	ip, ip, ip
   1964e:	189b      	adds	r3, r3, r2
   19650:	f14c 0500 	adc.w	r5, ip, #0
   19654:	191c      	adds	r4, r3, r4
   19656:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
   1965a:	ea54 0305 	orrs.w	r3, r4, r5
   1965e:	d010      	beq.n	19682 <calc_tof_ds+0x62>
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
   19660:	f008 f9ce 	bl	21a00 <__aeabi_l2d>
   19664:	4606      	mov	r6, r0
   19666:	460f      	mov	r7, r1
   19668:	4620      	mov	r0, r4
   1966a:	4629      	mov	r1, r5
   1966c:	f008 f9c8 	bl	21a00 <__aeabi_l2d>
   19670:	4602      	mov	r2, r0
   19672:	460b      	mov	r3, r1
   19674:	4630      	mov	r0, r6
   19676:	4639      	mov	r1, r7
   19678:	f008 fb1a 	bl	21cb0 <__aeabi_ddiv>
   1967c:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
   19680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
   19682:	ed9f 0b01 	vldr	d0, [pc, #4]	; 19688 <calc_tof_ds+0x68>
   19686:	e7fb      	b.n	19680 <calc_tof_ds+0x60>
   19688:	00000000 	.word	0x00000000
   1968c:	7ff80000 	.word	0x7ff80000

00019690 <timescale_QUpdate>:
   19690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19694:	4614      	mov	r4, r2
   19696:	461d      	mov	r5, r3
   19698:	460f      	mov	r7, r1
   1969a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1969c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   196a0:	4682      	mov	sl, r0
   196a2:	4629      	mov	r1, r5
   196a4:	4620      	mov	r0, r4
   196a6:	f008 f9d9 	bl	21a5c <__aeabi_dmul>
   196aa:	4622      	mov	r2, r4
   196ac:	462b      	mov	r3, r5
   196ae:	f008 f9d5 	bl	21a5c <__aeabi_dmul>
   196b2:	2200      	movs	r2, #0
   196b4:	4b4f      	ldr	r3, [pc, #316]	; (197f4 <timescale_QUpdate+0x164>)
   196b6:	f008 fafb 	bl	21cb0 <__aeabi_ddiv>
   196ba:	e9d7 2300 	ldrd	r2, r3, [r7]
   196be:	f008 f817 	bl	216f0 <__adddf3>
   196c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   196c6:	4680      	mov	r8, r0
   196c8:	4689      	mov	r9, r1
   196ca:	4620      	mov	r0, r4
   196cc:	4629      	mov	r1, r5
   196ce:	f008 f9c5 	bl	21a5c <__aeabi_dmul>
   196d2:	4622      	mov	r2, r4
   196d4:	462b      	mov	r3, r5
   196d6:	f008 f9c1 	bl	21a5c <__aeabi_dmul>
   196da:	4622      	mov	r2, r4
   196dc:	462b      	mov	r3, r5
   196de:	f008 f9bd 	bl	21a5c <__aeabi_dmul>
   196e2:	4622      	mov	r2, r4
   196e4:	462b      	mov	r3, r5
   196e6:	f008 f9b9 	bl	21a5c <__aeabi_dmul>
   196ea:	2200      	movs	r2, #0
   196ec:	4b42      	ldr	r3, [pc, #264]	; (197f8 <timescale_QUpdate+0x168>)
   196ee:	f008 fadf 	bl	21cb0 <__aeabi_ddiv>
   196f2:	4602      	mov	r2, r0
   196f4:	460b      	mov	r3, r1
   196f6:	4640      	mov	r0, r8
   196f8:	4649      	mov	r1, r9
   196fa:	f007 fff9 	bl	216f0 <__adddf3>
   196fe:	e9c6 0100 	strd	r0, r1, [r6]
   19702:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19706:	4620      	mov	r0, r4
   19708:	4629      	mov	r1, r5
   1970a:	f008 f9a7 	bl	21a5c <__aeabi_dmul>
   1970e:	4622      	mov	r2, r4
   19710:	462b      	mov	r3, r5
   19712:	f008 f9a3 	bl	21a5c <__aeabi_dmul>
   19716:	4622      	mov	r2, r4
   19718:	462b      	mov	r3, r5
   1971a:	f008 f99f 	bl	21a5c <__aeabi_dmul>
   1971e:	2200      	movs	r2, #0
   19720:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   19724:	f008 f99a 	bl	21a5c <__aeabi_dmul>
   19728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1972c:	4680      	mov	r8, r0
   1972e:	4689      	mov	r9, r1
   19730:	4620      	mov	r0, r4
   19732:	4629      	mov	r1, r5
   19734:	f008 f992 	bl	21a5c <__aeabi_dmul>
   19738:	2200      	movs	r2, #0
   1973a:	4b30      	ldr	r3, [pc, #192]	; (197fc <timescale_QUpdate+0x16c>)
   1973c:	f008 f98e 	bl	21a5c <__aeabi_dmul>
   19740:	4602      	mov	r2, r0
   19742:	460b      	mov	r3, r1
   19744:	4640      	mov	r0, r8
   19746:	4649      	mov	r1, r9
   19748:	f007 ffd2 	bl	216f0 <__adddf3>
   1974c:	4680      	mov	r8, r0
   1974e:	4689      	mov	r9, r1
   19750:	e9c6 8902 	strd	r8, r9, [r6, #8]
   19754:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   19758:	4620      	mov	r0, r4
   1975a:	4629      	mov	r1, r5
   1975c:	f008 f97e 	bl	21a5c <__aeabi_dmul>
   19760:	4622      	mov	r2, r4
   19762:	462b      	mov	r3, r5
   19764:	f008 f97a 	bl	21a5c <__aeabi_dmul>
   19768:	2200      	movs	r2, #0
   1976a:	4b25      	ldr	r3, [pc, #148]	; (19800 <timescale_QUpdate+0x170>)
   1976c:	f008 faa0 	bl	21cb0 <__aeabi_ddiv>
   19770:	f8ba 3000 	ldrh.w	r3, [sl]
   19774:	9301      	str	r3, [sp, #4]
   19776:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1977a:	eb06 0a0b 	add.w	sl, r6, fp
   1977e:	e9c6 0104 	strd	r0, r1, [r6, #16]
   19782:	e9ca 8900 	strd	r8, r9, [sl]
   19786:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1978a:	4620      	mov	r0, r4
   1978c:	4629      	mov	r1, r5
   1978e:	f008 f965 	bl	21a5c <__aeabi_dmul>
   19792:	4622      	mov	r2, r4
   19794:	462b      	mov	r3, r5
   19796:	f008 f961 	bl	21a5c <__aeabi_dmul>
   1979a:	2200      	movs	r2, #0
   1979c:	4b15      	ldr	r3, [pc, #84]	; (197f4 <timescale_QUpdate+0x164>)
   1979e:	f008 fa87 	bl	21cb0 <__aeabi_ddiv>
   197a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   197a6:	f007 ffa3 	bl	216f0 <__adddf3>
   197aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
   197ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   197b2:	4620      	mov	r0, r4
   197b4:	4629      	mov	r1, r5
   197b6:	f008 f951 	bl	21a5c <__aeabi_dmul>
   197ba:	2200      	movs	r2, #0
   197bc:	4b0f      	ldr	r3, [pc, #60]	; (197fc <timescale_QUpdate+0x16c>)
   197be:	f008 f94d 	bl	21a5c <__aeabi_dmul>
   197c2:	f10b 0810 	add.w	r8, fp, #16
   197c6:	44b0      	add	r8, r6
   197c8:	e9c8 0100 	strd	r0, r1, [r8]
   197cc:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   197d0:	44da      	add	sl, fp
   197d2:	e9ca 2300 	strd	r2, r3, [sl]
   197d6:	9901      	ldr	r1, [sp, #4]
   197d8:	e9d8 2300 	ldrd	r2, r3, [r8]
   197dc:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   197e0:	e9c6 2302 	strd	r2, r3, [r6, #8]
   197e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   197e8:	e9c6 2304 	strd	r2, r3, [r6, #16]
   197ec:	b003      	add	sp, #12
   197ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197f2:	bf00      	nop
   197f4:	40080000 	.word	0x40080000
   197f8:	40340000 	.word	0x40340000
   197fc:	3fe00000 	.word	0x3fe00000
   19800:	40180000 	.word	0x40180000

00019804 <timescale_JofAx>:
   19804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19808:	ec55 4b10 	vmov	r4, r5, d0
   1980c:	4f1c      	ldr	r7, [pc, #112]	; (19880 <timescale_JofAx+0x7c>)
   1980e:	b092      	sub	sp, #72	; 0x48
   19810:	2600      	movs	r6, #0
   19812:	ee10 2a10 	vmov	r2, s0
   19816:	462b      	mov	r3, r5
   19818:	4680      	mov	r8, r0
   1981a:	4629      	mov	r1, r5
   1981c:	ee10 0a10 	vmov	r0, s0
   19820:	ed8d 0b02 	vstr	d0, [sp, #8]
   19824:	e9cd 6700 	strd	r6, r7, [sp]
   19828:	f008 f918 	bl	21a5c <__aeabi_dmul>
   1982c:	2200      	movs	r2, #0
   1982e:	4b15      	ldr	r3, [pc, #84]	; (19884 <timescale_JofAx+0x80>)
   19830:	f008 f914 	bl	21a5c <__aeabi_dmul>
   19834:	e9cd 6708 	strd	r6, r7, [sp, #32]
   19838:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1983c:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   19840:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   19844:	2300      	movs	r3, #0
   19846:	2200      	movs	r2, #0
   19848:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1984c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   19850:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   19854:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   19858:	f101 0518 	add.w	r5, r1, #24
   1985c:	2300      	movs	r3, #0
   1985e:	eb0d 0003 	add.w	r0, sp, r3
   19862:	185a      	adds	r2, r3, r1
   19864:	18ec      	adds	r4, r5, r3
   19866:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   1986a:	e8e2 6702 	strd	r6, r7, [r2], #8
   1986e:	42a2      	cmp	r2, r4
   19870:	d1f9      	bne.n	19866 <timescale_JofAx+0x62>
   19872:	3318      	adds	r3, #24
   19874:	2b48      	cmp	r3, #72	; 0x48
   19876:	d1f2      	bne.n	1985e <timescale_JofAx+0x5a>
   19878:	b012      	add	sp, #72	; 0x48
   1987a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1987e:	bf00      	nop
   19880:	3ff00000 	.word	0x3ff00000
   19884:	3fe00000 	.word	0x3fe00000

00019888 <timescale_Aofx>:
   19888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1988c:	4606      	mov	r6, r0
   1988e:	b089      	sub	sp, #36	; 0x24
   19890:	2218      	movs	r2, #24
   19892:	2100      	movs	r1, #0
   19894:	a802      	add	r0, sp, #8
   19896:	f7f7 fdfc 	bl	11492 <memset>
   1989a:	68b5      	ldr	r5, [r6, #8]
   1989c:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   1989e:	f106 0348 	add.w	r3, r6, #72	; 0x48
   198a2:	ac02      	add	r4, sp, #8
   198a4:	9301      	str	r3, [sp, #4]
   198a6:	f105 0918 	add.w	r9, r5, #24
   198aa:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   198ae:	462f      	mov	r7, r5
   198b0:	46b0      	mov	r8, r6
   198b2:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   198b6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   198ba:	f008 f8cf 	bl	21a5c <__aeabi_dmul>
   198be:	4602      	mov	r2, r0
   198c0:	460b      	mov	r3, r1
   198c2:	4650      	mov	r0, sl
   198c4:	4659      	mov	r1, fp
   198c6:	f007 ff13 	bl	216f0 <__adddf3>
   198ca:	454f      	cmp	r7, r9
   198cc:	4682      	mov	sl, r0
   198ce:	468b      	mov	fp, r1
   198d0:	d1ef      	bne.n	198b2 <timescale_Aofx+0x2a>
   198d2:	9b01      	ldr	r3, [sp, #4]
   198d4:	3618      	adds	r6, #24
   198d6:	429e      	cmp	r6, r3
   198d8:	e944 ab02 	strd	sl, fp, [r4, #-8]
   198dc:	d1e5      	bne.n	198aa <timescale_Aofx+0x22>
   198de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   198e2:	e9c5 2300 	strd	r2, r3, [r5]
   198e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   198ea:	e9c5 2302 	strd	r2, r3, [r5, #8]
   198ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   198f2:	e9c5 2304 	strd	r2, r3, [r5, #16]
   198f6:	b009      	add	sp, #36	; 0x24
   198f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198fc:	0000      	movs	r0, r0
	...

00019900 <timescale_innovation>:
   19900:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19904:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   19906:	88aa      	ldrh	r2, [r5, #4]
   19908:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1990c:	4604      	mov	r4, r0
   1990e:	b37a      	cbz	r2, 19970 <timescale_innovation+0x70>
   19910:	6946      	ldr	r6, [r0, #20]
   19912:	4b37      	ldr	r3, [pc, #220]	; (199f0 <timescale_innovation+0xf0>)
   19914:	ed96 0b00 	vldr	d0, [r6]
   19918:	2200      	movs	r2, #0
   1991a:	ec51 0b10 	vmov	r0, r1, d0
   1991e:	ed8d 0b00 	vstr	d0, [sp]
   19922:	f008 fb0d 	bl	21f40 <__aeabi_dcmplt>
   19926:	f04f 0701 	mov.w	r7, #1
   1992a:	ed9d 0b00 	vldr	d0, [sp]
   1992e:	b900      	cbnz	r0, 19932 <timescale_innovation+0x32>
   19930:	4607      	mov	r7, r0
   19932:	792b      	ldrb	r3, [r5, #4]
   19934:	f367 1345 	bfi	r3, r7, #5, #1
   19938:	712b      	strb	r3, [r5, #4]
   1993a:	88ab      	ldrh	r3, [r5, #4]
   1993c:	069b      	lsls	r3, r3, #26
   1993e:	d509      	bpl.n	19954 <timescale_innovation+0x54>
   19940:	ed9f 1b29 	vldr	d1, [pc, #164]	; 199e8 <timescale_innovation+0xe8>
   19944:	f008 fe86 	bl	22654 <fmod>
   19948:	792b      	ldrb	r3, [r5, #4]
   1994a:	ed86 0b00 	vstr	d0, [r6]
   1994e:	f36f 1386 	bfc	r3, #6, #1
   19952:	712b      	strb	r3, [r5, #4]
   19954:	f8df 909c 	ldr.w	r9, [pc, #156]	; 199f4 <timescale_innovation+0xf4>
   19958:	f04f 0a00 	mov.w	sl, #0
   1995c:	f04f 0800 	mov.w	r8, #0
   19960:	8862      	ldrh	r2, [r4, #2]
   19962:	fa1f f38a 	uxth.w	r3, sl
   19966:	429a      	cmp	r2, r3
   19968:	d806      	bhi.n	19978 <timescale_innovation+0x78>
   1996a:	b002      	add	sp, #8
   1996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19970:	792b      	ldrb	r3, [r5, #4]
   19972:	f362 1345 	bfi	r3, r2, #5, #1
   19976:	e7ec      	b.n	19952 <timescale_innovation+0x52>
   19978:	6963      	ldr	r3, [r4, #20]
   1997a:	fa1f f58a 	uxth.w	r5, sl
   1997e:	00ed      	lsls	r5, r5, #3
   19980:	1959      	adds	r1, r3, r5
   19982:	6923      	ldr	r3, [r4, #16]
   19984:	442b      	add	r3, r5
   19986:	e9d3 2300 	ldrd	r2, r3, [r3]
   1998a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1998e:	f007 fead 	bl	216ec <__aeabi_dsub>
   19992:	69a3      	ldr	r3, [r4, #24]
   19994:	442b      	add	r3, r5
   19996:	e9c3 0100 	strd	r0, r1, [r3]
   1999a:	ec41 0b10 	vmov	d0, r0, r1
   1999e:	f008 fdcd 	bl	2253c <fabs>
   199a2:	2200      	movs	r2, #0
   199a4:	4b12      	ldr	r3, [pc, #72]	; (199f0 <timescale_innovation+0xf0>)
   199a6:	ec51 0b10 	vmov	r0, r1, d0
   199aa:	f008 fae7 	bl	21f7c <__aeabi_dcmpgt>
   199ae:	b190      	cbz	r0, 199d6 <timescale_innovation+0xd6>
   199b0:	69a3      	ldr	r3, [r4, #24]
   199b2:	441d      	add	r5, r3
   199b4:	e9d5 6700 	ldrd	r6, r7, [r5]
   199b8:	2200      	movs	r2, #0
   199ba:	2300      	movs	r3, #0
   199bc:	4630      	mov	r0, r6
   199be:	4639      	mov	r1, r7
   199c0:	f008 fabe 	bl	21f40 <__aeabi_dcmplt>
   199c4:	4642      	mov	r2, r8
   199c6:	464b      	mov	r3, r9
   199c8:	b140      	cbz	r0, 199dc <timescale_innovation+0xdc>
   199ca:	4630      	mov	r0, r6
   199cc:	4639      	mov	r1, r7
   199ce:	f007 fe8f 	bl	216f0 <__adddf3>
   199d2:	e9c5 0100 	strd	r0, r1, [r5]
   199d6:	f10a 0a01 	add.w	sl, sl, #1
   199da:	e7c1      	b.n	19960 <timescale_innovation+0x60>
   199dc:	4630      	mov	r0, r6
   199de:	4639      	mov	r1, r7
   199e0:	f007 fe84 	bl	216ec <__aeabi_dsub>
   199e4:	e7f5      	b.n	199d2 <timescale_innovation+0xd2>
   199e6:	bf00      	nop
   199e8:	00000000 	.word	0x00000000
   199ec:	42700000 	.word	0x42700000
   199f0:	42600000 	.word	0x42600000
   199f4:	42700000 	.word	0x42700000

000199f8 <timescale_constraints>:
   199f8:	b513      	push	{r0, r1, r4, lr}
   199fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   199fc:	889b      	ldrh	r3, [r3, #4]
   199fe:	065b      	lsls	r3, r3, #25
   19a00:	d513      	bpl.n	19a2a <timescale_constraints+0x32>
   19a02:	6884      	ldr	r4, [r0, #8]
   19a04:	4b0c      	ldr	r3, [pc, #48]	; (19a38 <timescale_constraints+0x40>)
   19a06:	ed94 0b00 	vldr	d0, [r4]
   19a0a:	2200      	movs	r2, #0
   19a0c:	ec51 0b10 	vmov	r0, r1, d0
   19a10:	ed8d 0b00 	vstr	d0, [sp]
   19a14:	f008 fab2 	bl	21f7c <__aeabi_dcmpgt>
   19a18:	ed9d 0b00 	vldr	d0, [sp]
   19a1c:	b128      	cbz	r0, 19a2a <timescale_constraints+0x32>
   19a1e:	ed9f 1b04 	vldr	d1, [pc, #16]	; 19a30 <timescale_constraints+0x38>
   19a22:	f008 fe17 	bl	22654 <fmod>
   19a26:	ed84 0b00 	vstr	d0, [r4]
   19a2a:	b002      	add	sp, #8
   19a2c:	bd10      	pop	{r4, pc}
   19a2e:	bf00      	nop
   19a30:	00000000 	.word	0x00000000
   19a34:	42700000 	.word	0x42700000
   19a38:	42700000 	.word	0x42700000
   19a3c:	00000000 	.word	0x00000000

00019a40 <timescale_Hofx>:
   19a40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19a44:	6904      	ldr	r4, [r0, #16]
   19a46:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   19a48:	69c5      	ldr	r5, [r0, #28]
   19a4a:	6886      	ldr	r6, [r0, #8]
   19a4c:	2200      	movs	r2, #0
   19a4e:	2300      	movs	r3, #0
   19a50:	e9c4 2300 	strd	r2, r3, [r4]
   19a54:	f105 0818 	add.w	r8, r5, #24
   19a58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   19a5c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   19a60:	f007 fffc 	bl	21a5c <__aeabi_dmul>
   19a64:	e9d4 2300 	ldrd	r2, r3, [r4]
   19a68:	f007 fe42 	bl	216f0 <__adddf3>
   19a6c:	4545      	cmp	r5, r8
   19a6e:	e9c4 0100 	strd	r0, r1, [r4]
   19a72:	d1f1      	bne.n	19a58 <timescale_Hofx+0x18>
   19a74:	e9cd 0100 	strd	r0, r1, [sp]
   19a78:	88bb      	ldrh	r3, [r7, #4]
   19a7a:	065b      	lsls	r3, r3, #25
   19a7c:	d50c      	bpl.n	19a98 <timescale_Hofx+0x58>
   19a7e:	2200      	movs	r2, #0
   19a80:	4b09      	ldr	r3, [pc, #36]	; (19aa8 <timescale_Hofx+0x68>)
   19a82:	f008 fa7b 	bl	21f7c <__aeabi_dcmpgt>
   19a86:	ed9d 0b00 	vldr	d0, [sp]
   19a8a:	b128      	cbz	r0, 19a98 <timescale_Hofx+0x58>
   19a8c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 19aa0 <timescale_Hofx+0x60>
   19a90:	f008 fde0 	bl	22654 <fmod>
   19a94:	ed84 0b00 	vstr	d0, [r4]
   19a98:	b002      	add	sp, #8
   19a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a9e:	bf00      	nop
   19aa0:	00000000 	.word	0x00000000
   19aa4:	42700000 	.word	0x42700000
   19aa8:	42700000 	.word	0x42700000

00019aac <timescale_init>:
   19aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ab0:	4688      	mov	r8, r1
   19ab2:	4614      	mov	r4, r2
   19ab4:	ec57 6b10 	vmov	r6, r7, d0
   19ab8:	4605      	mov	r5, r0
   19aba:	b990      	cbnz	r0, 19ae2 <timescale_init+0x36>
   19abc:	2008      	movs	r0, #8
   19abe:	f7f7 fc6b 	bl	11398 <malloc>
   19ac2:	4605      	mov	r5, r0
   19ac4:	b928      	cbnz	r0, 19ad2 <timescale_init+0x26>
   19ac6:	4b2c      	ldr	r3, [pc, #176]	; (19b78 <timescale_init+0xcc>)
   19ac8:	4a2c      	ldr	r2, [pc, #176]	; (19b7c <timescale_init+0xd0>)
   19aca:	482d      	ldr	r0, [pc, #180]	; (19b80 <timescale_init+0xd4>)
   19acc:	21e0      	movs	r1, #224	; 0xe0
   19ace:	f7f3 fc47 	bl	d360 <__assert_func>
   19ad2:	2208      	movs	r2, #8
   19ad4:	2100      	movs	r1, #0
   19ad6:	f7f7 fcdc 	bl	11492 <memset>
   19ada:	792b      	ldrb	r3, [r5, #4]
   19adc:	f043 0301 	orr.w	r3, r3, #1
   19ae0:	712b      	strb	r3, [r5, #4]
   19ae2:	4641      	mov	r1, r8
   19ae4:	2301      	movs	r3, #1
   19ae6:	2203      	movs	r2, #3
   19ae8:	6828      	ldr	r0, [r5, #0]
   19aea:	f000 fad3 	bl	1a094 <srkf_dbl_init>
   19aee:	463b      	mov	r3, r7
   19af0:	4621      	mov	r1, r4
   19af2:	6028      	str	r0, [r5, #0]
   19af4:	4632      	mov	r2, r6
   19af6:	f7ff fdcb 	bl	19690 <timescale_QUpdate>
   19afa:	682c      	ldr	r4, [r5, #0]
   19afc:	2700      	movs	r7, #0
   19afe:	f8b4 a000 	ldrh.w	sl, [r4]
   19b02:	46b8      	mov	r8, r7
   19b04:	fa1f f388 	uxth.w	r3, r8
   19b08:	459a      	cmp	sl, r3
   19b0a:	d91a      	bls.n	19b42 <timescale_init+0x96>
   19b0c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   19b10:	2600      	movs	r6, #0
   19b12:	e00f      	b.n	19b34 <timescale_init+0x88>
   19b14:	6a22      	ldr	r2, [r4, #32]
   19b16:	19f3      	adds	r3, r6, r7
   19b18:	00db      	lsls	r3, r3, #3
   19b1a:	eb02 0903 	add.w	r9, r2, r3
   19b1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19b20:	18d1      	adds	r1, r2, r3
   19b22:	e9d1 0100 	ldrd	r0, r1, [r1]
   19b26:	2200      	movs	r2, #0
   19b28:	4b16      	ldr	r3, [pc, #88]	; (19b84 <timescale_init+0xd8>)
   19b2a:	f007 ff97 	bl	21a5c <__aeabi_dmul>
   19b2e:	e9c9 0100 	strd	r0, r1, [r9]
   19b32:	3601      	adds	r6, #1
   19b34:	b2b3      	uxth	r3, r6
   19b36:	459b      	cmp	fp, r3
   19b38:	d8ec      	bhi.n	19b14 <timescale_init+0x68>
   19b3a:	f108 0801 	add.w	r8, r8, #1
   19b3e:	4457      	add	r7, sl
   19b40:	e7e0      	b.n	19b04 <timescale_init+0x58>
   19b42:	69e3      	ldr	r3, [r4, #28]
   19b44:	4910      	ldr	r1, [pc, #64]	; (19b88 <timescale_init+0xdc>)
   19b46:	792a      	ldrb	r2, [r5, #4]
   19b48:	2000      	movs	r0, #0
   19b4a:	e9c3 0100 	strd	r0, r1, [r3]
   19b4e:	4b0f      	ldr	r3, [pc, #60]	; (19b8c <timescale_init+0xe0>)
   19b50:	65a3      	str	r3, [r4, #88]	; 0x58
   19b52:	4b0f      	ldr	r3, [pc, #60]	; (19b90 <timescale_init+0xe4>)
   19b54:	6563      	str	r3, [r4, #84]	; 0x54
   19b56:	4b0f      	ldr	r3, [pc, #60]	; (19b94 <timescale_init+0xe8>)
   19b58:	65e3      	str	r3, [r4, #92]	; 0x5c
   19b5a:	4b0f      	ldr	r3, [pc, #60]	; (19b98 <timescale_init+0xec>)
   19b5c:	6663      	str	r3, [r4, #100]	; 0x64
   19b5e:	4b0f      	ldr	r3, [pc, #60]	; (19b9c <timescale_init+0xf0>)
   19b60:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   19b64:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19b68:	f3c3 0340 	ubfx	r3, r3, #1, #1
   19b6c:	f363 0241 	bfi	r2, r3, #1, #1
   19b70:	712a      	strb	r2, [r5, #4]
   19b72:	4628      	mov	r0, r5
   19b74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b78:	000252aa 	.word	0x000252aa
   19b7c:	00025282 	.word	0x00025282
   19b80:	000252af 	.word	0x000252af
   19b84:	40590000 	.word	0x40590000
   19b88:	3ff00000 	.word	0x3ff00000
   19b8c:	00019805 	.word	0x00019805
   19b90:	00019889 	.word	0x00019889
   19b94:	00019a41 	.word	0x00019a41
   19b98:	000199f9 	.word	0x000199f9
   19b9c:	00019901 	.word	0x00019901

00019ba0 <timescale_free>:
   19ba0:	b510      	push	{r4, lr}
   19ba2:	4604      	mov	r4, r0
   19ba4:	6800      	ldr	r0, [r0, #0]
   19ba6:	b930      	cbnz	r0, 19bb6 <timescale_free+0x16>
   19ba8:	4b08      	ldr	r3, [pc, #32]	; (19bcc <timescale_free+0x2c>)
   19baa:	4a09      	ldr	r2, [pc, #36]	; (19bd0 <timescale_free+0x30>)
   19bac:	4809      	ldr	r0, [pc, #36]	; (19bd4 <timescale_free+0x34>)
   19bae:	f44f 7181 	mov.w	r1, #258	; 0x102
   19bb2:	f7f3 fbd5 	bl	d360 <__assert_func>
   19bb6:	f000 fced 	bl	1a594 <srkf_dbl_free>
   19bba:	7923      	ldrb	r3, [r4, #4]
   19bbc:	07db      	lsls	r3, r3, #31
   19bbe:	d504      	bpl.n	19bca <timescale_free+0x2a>
   19bc0:	4620      	mov	r0, r4
   19bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19bc6:	f7f7 bc1d 	b.w	11404 <free>
   19bca:	bd10      	pop	{r4, pc}
   19bcc:	000252a0 	.word	0x000252a0
   19bd0:	00025291 	.word	0x00025291
   19bd4:	000252af 	.word	0x000252af

00019bd8 <timescale_main>:
   19bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bdc:	ed2d 8b02 	vpush	{d8}
   19be0:	eeb0 8a40 	vmov.f32	s16, s0
   19be4:	eef0 8a60 	vmov.f32	s17, s1
   19be8:	b083      	sub	sp, #12
   19bea:	4604      	mov	r4, r0
   19bec:	468a      	mov	sl, r1
   19bee:	4617      	mov	r7, r2
   19bf0:	461d      	mov	r5, r3
   19bf2:	2200      	movs	r2, #0
   19bf4:	4b29      	ldr	r3, [pc, #164]	; (19c9c <timescale_main+0xc4>)
   19bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   19bfa:	f04f 0601 	mov.w	r6, #1
   19bfe:	f008 f9bd 	bl	21f7c <__aeabi_dcmpgt>
   19c02:	b900      	cbnz	r0, 19c06 <timescale_main+0x2e>
   19c04:	4606      	mov	r6, r0
   19c06:	7923      	ldrb	r3, [r4, #4]
   19c08:	6820      	ldr	r0, [r4, #0]
   19c0a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19c0e:	4316      	orrs	r6, r2
   19c10:	f366 1386 	bfi	r3, r6, #6, #1
   19c14:	7123      	strb	r3, [r4, #4]
   19c16:	4639      	mov	r1, r7
   19c18:	ec53 2b18 	vmov	r2, r3, d8
   19c1c:	f7ff fd38 	bl	19690 <timescale_QUpdate>
   19c20:	6827      	ldr	r7, [r4, #0]
   19c22:	887a      	ldrh	r2, [r7, #2]
   19c24:	f06f 0907 	mvn.w	r9, #7
   19c28:	1c53      	adds	r3, r2, #1
   19c2a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   19c2e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   19c32:	9201      	str	r2, [sp, #4]
   19c34:	fb09 f903 	mul.w	r9, r9, r3
   19c38:	f04f 0800 	mov.w	r8, #0
   19c3c:	9b01      	ldr	r3, [sp, #4]
   19c3e:	429d      	cmp	r5, r3
   19c40:	44d8      	add	r8, fp
   19c42:	d11e      	bne.n	19c82 <timescale_main+0xaa>
   19c44:	eeb0 0a48 	vmov.f32	s0, s16
   19c48:	eef0 0a68 	vmov.f32	s1, s17
   19c4c:	2300      	movs	r3, #0
   19c4e:	461a      	mov	r2, r3
   19c50:	4651      	mov	r1, sl
   19c52:	4638      	mov	r0, r7
   19c54:	f000 f8b4 	bl	19dc0 <srkf_dbl_main>
   19c58:	7923      	ldrb	r3, [r4, #4]
   19c5a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   19c5e:	f3c3 0280 	ubfx	r2, r3, #2, #1
   19c62:	4302      	orrs	r2, r0
   19c64:	f362 0382 	bfi	r3, r2, #2, #1
   19c68:	7123      	strb	r3, [r4, #4]
   19c6a:	b2db      	uxtb	r3, r3
   19c6c:	075a      	lsls	r2, r3, #29
   19c6e:	bf5c      	itt	pl
   19c70:	f043 0308 	orrpl.w	r3, r3, #8
   19c74:	7123      	strbpl	r3, [r4, #4]
   19c76:	88a0      	ldrh	r0, [r4, #4]
   19c78:	b003      	add	sp, #12
   19c7a:	ecbd 8b02 	vpop	{d8}
   19c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   19c86:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   19c88:	4610      	mov	r0, r2
   19c8a:	4619      	mov	r1, r3
   19c8c:	f007 fee6 	bl	21a5c <__aeabi_dmul>
   19c90:	4446      	add	r6, r8
   19c92:	444e      	add	r6, r9
   19c94:	e9c6 0100 	strd	r0, r1, [r6]
   19c98:	e7d0      	b.n	19c3c <timescale_main+0x64>
   19c9a:	bf00      	nop
   19c9c:	42600000 	.word	0x42600000

00019ca0 <Hofx>:
   19ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ca4:	ed2d 8b02 	vpush	{d8}
   19ca8:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 19d18 <Hofx+0x78>
   19cac:	f04f 0800 	mov.w	r8, #0
   19cb0:	f8b0 9000 	ldrh.w	r9, [r0]
   19cb4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   19cb8:	4604      	mov	r4, r0
   19cba:	4647      	mov	r7, r8
   19cbc:	b2bb      	uxth	r3, r7
   19cbe:	459a      	cmp	sl, r3
   19cc0:	d803      	bhi.n	19cca <Hofx+0x2a>
   19cc2:	ecbd 8b02 	vpop	{d8}
   19cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19cca:	6926      	ldr	r6, [r4, #16]
   19ccc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   19cd0:	ed86 8b00 	vstr	d8, [r6]
   19cd4:	2500      	movs	r5, #0
   19cd6:	b2ab      	uxth	r3, r5
   19cd8:	4599      	cmp	r9, r3
   19cda:	d802      	bhi.n	19ce2 <Hofx+0x42>
   19cdc:	3701      	adds	r7, #1
   19cde:	44c8      	add	r8, r9
   19ce0:	e7ec      	b.n	19cbc <Hofx+0x1c>
   19ce2:	69e3      	ldr	r3, [r4, #28]
   19ce4:	eb05 0108 	add.w	r1, r5, r8
   19ce8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19cec:	68a3      	ldr	r3, [r4, #8]
   19cee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   19cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   19cfa:	f007 feaf 	bl	21a5c <__aeabi_dmul>
   19cfe:	4602      	mov	r2, r0
   19d00:	460b      	mov	r3, r1
   19d02:	e9d6 0100 	ldrd	r0, r1, [r6]
   19d06:	f007 fcf3 	bl	216f0 <__adddf3>
   19d0a:	3501      	adds	r5, #1
   19d0c:	e9c6 0100 	strd	r0, r1, [r6]
   19d10:	e7e1      	b.n	19cd6 <Hofx+0x36>
   19d12:	bf00      	nop
   19d14:	f3af 8000 	nop.w
	...

00019d20 <Aofx>:
   19d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d24:	f8b0 a000 	ldrh.w	sl, [r0]
   19d28:	ed2d 8b02 	vpush	{d8}
   19d2c:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   19d30:	f109 030e 	add.w	r3, r9, #14
   19d34:	466a      	mov	r2, sp
   19d36:	08db      	lsrs	r3, r3, #3
   19d38:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   19d3c:	af00      	add	r7, sp, #0
   19d3e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 19db8 <Aofx+0x98>
   19d42:	469d      	mov	sp, r3
   19d44:	46e8      	mov	r8, sp
   19d46:	4606      	mov	r6, r0
   19d48:	44c1      	add	r9, r8
   19d4a:	4644      	mov	r4, r8
   19d4c:	f04f 0b00 	mov.w	fp, #0
   19d50:	454c      	cmp	r4, r9
   19d52:	d107      	bne.n	19d64 <Aofx+0x44>
   19d54:	4643      	mov	r3, r8
   19d56:	42a3      	cmp	r3, r4
   19d58:	d124      	bne.n	19da4 <Aofx+0x84>
   19d5a:	46bd      	mov	sp, r7
   19d5c:	ecbd 8b02 	vpop	{d8}
   19d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d64:	eca4 8b02 	vstmia	r4!, {d8}
   19d68:	2500      	movs	r5, #0
   19d6a:	b2ab      	uxth	r3, r5
   19d6c:	459a      	cmp	sl, r3
   19d6e:	d801      	bhi.n	19d74 <Aofx+0x54>
   19d70:	44d3      	add	fp, sl
   19d72:	e7ed      	b.n	19d50 <Aofx+0x30>
   19d74:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   19d76:	eb05 030b 	add.w	r3, r5, fp
   19d7a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19d7e:	68b3      	ldr	r3, [r6, #8]
   19d80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d88:	e9d1 0100 	ldrd	r0, r1, [r1]
   19d8c:	f007 fe66 	bl	21a5c <__aeabi_dmul>
   19d90:	4602      	mov	r2, r0
   19d92:	460b      	mov	r3, r1
   19d94:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   19d98:	f007 fcaa 	bl	216f0 <__adddf3>
   19d9c:	3501      	adds	r5, #1
   19d9e:	e944 0102 	strd	r0, r1, [r4, #-8]
   19da2:	e7e2      	b.n	19d6a <Aofx+0x4a>
   19da4:	68b2      	ldr	r2, [r6, #8]
   19da6:	eba3 0108 	sub.w	r1, r3, r8
   19daa:	440a      	add	r2, r1
   19dac:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   19db0:	e9c2 0100 	strd	r0, r1, [r2]
   19db4:	e7cf      	b.n	19d56 <Aofx+0x36>
   19db6:	bf00      	nop
	...

00019dc0 <srkf_dbl_main>:
   19dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dc4:	ed2d 8b02 	vpush	{d8}
   19dc8:	eeb0 8a40 	vmov.f32	s16, s0
   19dcc:	eef0 8a60 	vmov.f32	s17, s1
   19dd0:	b089      	sub	sp, #36	; 0x24
   19dd2:	460d      	mov	r5, r1
   19dd4:	af04      	add	r7, sp, #16
   19dd6:	4690      	mov	r8, r2
   19dd8:	461e      	mov	r6, r3
   19dda:	4604      	mov	r4, r0
   19ddc:	b928      	cbnz	r0, 19dea <srkf_dbl_main+0x2a>
   19dde:	4ba8      	ldr	r3, [pc, #672]	; (1a080 <srkf_dbl_main+0x2c0>)
   19de0:	4aa8      	ldr	r2, [pc, #672]	; (1a084 <srkf_dbl_main+0x2c4>)
   19de2:	2185      	movs	r1, #133	; 0x85
   19de4:	48a8      	ldr	r0, [pc, #672]	; (1a088 <srkf_dbl_main+0x2c8>)
   19de6:	f7f3 fabb 	bl	d360 <__assert_func>
   19dea:	6d43      	ldr	r3, [r0, #84]	; 0x54
   19dec:	b91b      	cbnz	r3, 19df6 <srkf_dbl_main+0x36>
   19dee:	4ba7      	ldr	r3, [pc, #668]	; (1a08c <srkf_dbl_main+0x2cc>)
   19df0:	4aa4      	ldr	r2, [pc, #656]	; (1a084 <srkf_dbl_main+0x2c4>)
   19df2:	2186      	movs	r1, #134	; 0x86
   19df4:	e7f6      	b.n	19de4 <srkf_dbl_main+0x24>
   19df6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   19df8:	b91b      	cbnz	r3, 19e02 <srkf_dbl_main+0x42>
   19dfa:	4ba5      	ldr	r3, [pc, #660]	; (1a090 <srkf_dbl_main+0x2d0>)
   19dfc:	4aa1      	ldr	r2, [pc, #644]	; (1a084 <srkf_dbl_main+0x2c4>)
   19dfe:	2187      	movs	r1, #135	; 0x87
   19e00:	e7f0      	b.n	19de4 <srkf_dbl_main+0x24>
   19e02:	6d83      	ldr	r3, [r0, #88]	; 0x58
   19e04:	b10b      	cbz	r3, 19e0a <srkf_dbl_main+0x4a>
   19e06:	4611      	mov	r1, r2
   19e08:	4798      	blx	r3
   19e0a:	eeb0 0a48 	vmov.f32	s0, s16
   19e0e:	eef0 0a68 	vmov.f32	s1, s17
   19e12:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19e14:	4641      	mov	r1, r8
   19e16:	4620      	mov	r0, r4
   19e18:	4798      	blx	r3
   19e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19e1c:	b12b      	cbz	r3, 19e2a <srkf_dbl_main+0x6a>
   19e1e:	eeb0 0a48 	vmov.f32	s0, s16
   19e22:	eef0 0a68 	vmov.f32	s1, s17
   19e26:	4620      	mov	r0, r4
   19e28:	4798      	blx	r3
   19e2a:	8863      	ldrh	r3, [r4, #2]
   19e2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   19e2e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   19e32:	f000 fc65 	bl	1a700 <ud_dbl>
   19e36:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   19e3a:	8823      	ldrh	r3, [r4, #0]
   19e3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   19e3e:	f000 fc5f 	bl	1a700 <ud_dbl>
   19e42:	8823      	ldrh	r3, [r4, #0]
   19e44:	9302      	str	r3, [sp, #8]
   19e46:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19e48:	9301      	str	r3, [sp, #4]
   19e4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   19e4c:	9300      	str	r3, [sp, #0]
   19e4e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   19e52:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   19e56:	f000 fd27 	bl	1a8a8 <thornton_dbl>
   19e5a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19e5e:	f000 0001 	and.w	r0, r0, #1
   19e62:	f3c3 1240 	ubfx	r2, r3, #5, #1
   19e66:	4302      	orrs	r2, r0
   19e68:	f362 1345 	bfi	r3, r2, #5, #1
   19e6c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   19e70:	2e00      	cmp	r6, #0
   19e72:	d156      	bne.n	19f22 <srkf_dbl_main+0x162>
   19e74:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19e76:	466e      	mov	r6, sp
   19e78:	b12b      	cbz	r3, 19e86 <srkf_dbl_main+0xc6>
   19e7a:	eeb0 0a48 	vmov.f32	s0, s16
   19e7e:	eef0 0a68 	vmov.f32	s1, s17
   19e82:	4620      	mov	r0, r4
   19e84:	4798      	blx	r3
   19e86:	eeb0 0a48 	vmov.f32	s0, s16
   19e8a:	eef0 0a68 	vmov.f32	s1, s17
   19e8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   19e90:	4620      	mov	r0, r4
   19e92:	4798      	blx	r3
   19e94:	8863      	ldrh	r3, [r4, #2]
   19e96:	8822      	ldrh	r2, [r4, #0]
   19e98:	435a      	muls	r2, r3
   19e9a:	00d2      	lsls	r2, r2, #3
   19e9c:	3208      	adds	r2, #8
   19e9e:	ebad 0d02 	sub.w	sp, sp, r2
   19ea2:	2201      	movs	r2, #1
   19ea4:	9200      	str	r2, [sp, #0]
   19ea6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   19ea8:	6960      	ldr	r0, [r4, #20]
   19eaa:	462a      	mov	r2, r5
   19eac:	f000 fbc2 	bl	1a634 <trisolve_dbl>
   19eb0:	8822      	ldrh	r2, [r4, #0]
   19eb2:	8863      	ldrh	r3, [r4, #2]
   19eb4:	9200      	str	r2, [sp, #0]
   19eb6:	f10d 0810 	add.w	r8, sp, #16
   19eba:	69e2      	ldr	r2, [r4, #28]
   19ebc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   19ebe:	4640      	mov	r0, r8
   19ec0:	f000 fbb8 	bl	1a634 <trisolve_dbl>
   19ec4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   19ec6:	b9b5      	cbnz	r5, 19ef6 <srkf_dbl_main+0x136>
   19ec8:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   19ecc:	b2ab      	uxth	r3, r5
   19ece:	459a      	cmp	sl, r3
   19ed0:	d917      	bls.n	19f02 <srkf_dbl_main+0x142>
   19ed2:	69a3      	ldr	r3, [r4, #24]
   19ed4:	00ea      	lsls	r2, r5, #3
   19ed6:	eb03 0902 	add.w	r9, r3, r2
   19eda:	6963      	ldr	r3, [r4, #20]
   19edc:	1899      	adds	r1, r3, r2
   19ede:	6923      	ldr	r3, [r4, #16]
   19ee0:	4413      	add	r3, r2
   19ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   19ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
   19eea:	f007 fbff 	bl	216ec <__aeabi_dsub>
   19eee:	3501      	adds	r5, #1
   19ef0:	e9c9 0100 	strd	r0, r1, [r9]
   19ef4:	e7ea      	b.n	19ecc <srkf_dbl_main+0x10c>
   19ef6:	eeb0 0a48 	vmov.f32	s0, s16
   19efa:	eef0 0a68 	vmov.f32	s1, s17
   19efe:	4620      	mov	r0, r4
   19f00:	47a8      	blx	r5
   19f02:	2300      	movs	r3, #0
   19f04:	8862      	ldrh	r2, [r4, #2]
   19f06:	b299      	uxth	r1, r3
   19f08:	4291      	cmp	r1, r2
   19f0a:	f103 0501 	add.w	r5, r3, #1
   19f0e:	d326      	bcc.n	19f5e <srkf_dbl_main+0x19e>
   19f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19f12:	b12b      	cbz	r3, 19f20 <srkf_dbl_main+0x160>
   19f14:	eeb0 0a48 	vmov.f32	s0, s16
   19f18:	eef0 0a68 	vmov.f32	s1, s17
   19f1c:	4620      	mov	r0, r4
   19f1e:	4798      	blx	r3
   19f20:	46b5      	mov	sp, r6
   19f22:	f8b4 a000 	ldrh.w	sl, [r4]
   19f26:	ed9f 8b54 	vldr	d8, [pc, #336]	; 1a078 <srkf_dbl_main+0x2b8>
   19f2a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   19f2e:	2500      	movs	r5, #0
   19f30:	60fb      	str	r3, [r7, #12]
   19f32:	60bd      	str	r5, [r7, #8]
   19f34:	893b      	ldrh	r3, [r7, #8]
   19f36:	459a      	cmp	sl, r3
   19f38:	d85d      	bhi.n	19ff6 <srkf_dbl_main+0x236>
   19f3a:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 1a078 <srkf_dbl_main+0x2b8>
   19f3e:	2500      	movs	r5, #0
   19f40:	68fb      	ldr	r3, [r7, #12]
   19f42:	603b      	str	r3, [r7, #0]
   19f44:	46ab      	mov	fp, r5
   19f46:	607d      	str	r5, [r7, #4]
   19f48:	88bb      	ldrh	r3, [r7, #4]
   19f4a:	459a      	cmp	sl, r3
   19f4c:	f240 808b 	bls.w	1a066 <srkf_dbl_main+0x2a6>
   19f50:	f06f 0307 	mvn.w	r3, #7
   19f54:	436b      	muls	r3, r5
   19f56:	60bb      	str	r3, [r7, #8]
   19f58:	f04f 0900 	mov.w	r9, #0
   19f5c:	e05e      	b.n	1a01c <srkf_dbl_main+0x25c>
   19f5e:	b29b      	uxth	r3, r3
   19f60:	fb02 3c03 	mla	ip, r2, r3, r3
   19f64:	6c22      	ldr	r2, [r4, #64]	; 0x40
   19f66:	8821      	ldrh	r1, [r4, #0]
   19f68:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   19f6c:	69a2      	ldr	r2, [r4, #24]
   19f6e:	9100      	str	r1, [sp, #0]
   19f70:	fb03 f001 	mul.w	r0, r3, r1
   19f74:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   19f78:	68a1      	ldr	r1, [r4, #8]
   19f7a:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   19f7e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   19f82:	ed9c 1b00 	vldr	d1, [ip]
   19f86:	ed9e 0b00 	vldr	d0, [lr]
   19f8a:	f000 feb1 	bl	1acf0 <bierman_dbl>
   19f8e:	462b      	mov	r3, r5
   19f90:	e7b8      	b.n	19f04 <srkf_dbl_main+0x144>
   19f92:	6c63      	ldr	r3, [r4, #68]	; 0x44
   19f94:	eb06 0805 	add.w	r8, r6, r5
   19f98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   19f9c:	ed88 8b00 	vstr	d8, [r8]
   19fa0:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   19fa4:	f04f 0900 	mov.w	r9, #0
   19fa8:	fa1f f389 	uxth.w	r3, r9
   19fac:	459a      	cmp	sl, r3
   19fae:	d808      	bhi.n	19fc2 <srkf_dbl_main+0x202>
   19fb0:	3601      	adds	r6, #1
   19fb2:	b2b3      	uxth	r3, r6
   19fb4:	459a      	cmp	sl, r3
   19fb6:	d8ec      	bhi.n	19f92 <srkf_dbl_main+0x1d2>
   19fb8:	68bb      	ldr	r3, [r7, #8]
   19fba:	3301      	adds	r3, #1
   19fbc:	60bb      	str	r3, [r7, #8]
   19fbe:	4455      	add	r5, sl
   19fc0:	e7b8      	b.n	19f34 <srkf_dbl_main+0x174>
   19fc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19fc4:	eb09 0305 	add.w	r3, r9, r5
   19fc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   19fcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19fce:	445b      	add	r3, fp
   19fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   19fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
   19fd8:	f007 fd40 	bl	21a5c <__aeabi_dmul>
   19fdc:	460b      	mov	r3, r1
   19fde:	4602      	mov	r2, r0
   19fe0:	e9d8 0100 	ldrd	r0, r1, [r8]
   19fe4:	f007 fb84 	bl	216f0 <__adddf3>
   19fe8:	68fb      	ldr	r3, [r7, #12]
   19fea:	e9c8 0100 	strd	r0, r1, [r8]
   19fee:	f109 0901 	add.w	r9, r9, #1
   19ff2:	449b      	add	fp, r3
   19ff4:	e7d8      	b.n	19fa8 <srkf_dbl_main+0x1e8>
   19ff6:	2600      	movs	r6, #0
   19ff8:	e7db      	b.n	19fb2 <srkf_dbl_main+0x1f2>
   19ffa:	6a23      	ldr	r3, [r4, #32]
   19ffc:	eb09 0805 	add.w	r8, r9, r5
   1a000:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   1a004:	ed88 8b00 	vstr	d8, [r8]
   1a008:	465e      	mov	r6, fp
   1a00a:	683b      	ldr	r3, [r7, #0]
   1a00c:	429e      	cmp	r6, r3
   1a00e:	d114      	bne.n	1a03a <srkf_dbl_main+0x27a>
   1a010:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   1a014:	4413      	add	r3, r2
   1a016:	f109 0901 	add.w	r9, r9, #1
   1a01a:	60bb      	str	r3, [r7, #8]
   1a01c:	fa1f f389 	uxth.w	r3, r9
   1a020:	459a      	cmp	sl, r3
   1a022:	d8ea      	bhi.n	19ffa <srkf_dbl_main+0x23a>
   1a024:	687b      	ldr	r3, [r7, #4]
   1a026:	68fa      	ldr	r2, [r7, #12]
   1a028:	3301      	adds	r3, #1
   1a02a:	607b      	str	r3, [r7, #4]
   1a02c:	68fb      	ldr	r3, [r7, #12]
   1a02e:	449b      	add	fp, r3
   1a030:	683b      	ldr	r3, [r7, #0]
   1a032:	4413      	add	r3, r2
   1a034:	603b      	str	r3, [r7, #0]
   1a036:	4455      	add	r5, sl
   1a038:	e786      	b.n	19f48 <srkf_dbl_main+0x188>
   1a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a03c:	68ba      	ldr	r2, [r7, #8]
   1a03e:	4413      	add	r3, r2
   1a040:	1999      	adds	r1, r3, r6
   1a042:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1a044:	4433      	add	r3, r6
   1a046:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a04a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a04e:	f007 fd05 	bl	21a5c <__aeabi_dmul>
   1a052:	4602      	mov	r2, r0
   1a054:	460b      	mov	r3, r1
   1a056:	e9d8 0100 	ldrd	r0, r1, [r8]
   1a05a:	f007 fb49 	bl	216f0 <__adddf3>
   1a05e:	3608      	adds	r6, #8
   1a060:	e9c8 0100 	strd	r0, r1, [r8]
   1a064:	e7d1      	b.n	1a00a <srkf_dbl_main+0x24a>
   1a066:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   1a06a:	3714      	adds	r7, #20
   1a06c:	46bd      	mov	sp, r7
   1a06e:	ecbd 8b02 	vpop	{d8}
   1a072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a076:	bf00      	nop
	...
   1a080:	000253b9 	.word	0x000253b9
   1a084:	000252df 	.word	0x000252df
   1a088:	000253c6 	.word	0x000253c6
   1a08c:	000253f5 	.word	0x000253f5
   1a090:	00025408 	.word	0x00025408

0001a094 <srkf_dbl_init>:
   1a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a098:	4688      	mov	r8, r1
   1a09a:	4615      	mov	r5, r2
   1a09c:	461e      	mov	r6, r3
   1a09e:	4604      	mov	r4, r0
   1a0a0:	b9d8      	cbnz	r0, 1a0da <srkf_dbl_init+0x46>
   1a0a2:	2074      	movs	r0, #116	; 0x74
   1a0a4:	f7f7 f978 	bl	11398 <malloc>
   1a0a8:	4604      	mov	r4, r0
   1a0aa:	b928      	cbnz	r0, 1a0b8 <srkf_dbl_init+0x24>
   1a0ac:	4baa      	ldr	r3, [pc, #680]	; (1a358 <srkf_dbl_init+0x2c4>)
   1a0ae:	4aab      	ldr	r2, [pc, #684]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a0b0:	21c5      	movs	r1, #197	; 0xc5
   1a0b2:	48ab      	ldr	r0, [pc, #684]	; (1a360 <srkf_dbl_init+0x2cc>)
   1a0b4:	f7f3 f954 	bl	d360 <__assert_func>
   1a0b8:	2274      	movs	r2, #116	; 0x74
   1a0ba:	2100      	movs	r1, #0
   1a0bc:	f7f7 f9e9 	bl	11492 <memset>
   1a0c0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a0c4:	8025      	strh	r5, [r4, #0]
   1a0c6:	f043 0301 	orr.w	r3, r3, #1
   1a0ca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1a0ce:	4ba5      	ldr	r3, [pc, #660]	; (1a364 <srkf_dbl_init+0x2d0>)
   1a0d0:	6563      	str	r3, [r4, #84]	; 0x54
   1a0d2:	4ba5      	ldr	r3, [pc, #660]	; (1a368 <srkf_dbl_init+0x2d4>)
   1a0d4:	80a6      	strh	r6, [r4, #4]
   1a0d6:	8066      	strh	r6, [r4, #2]
   1a0d8:	65e3      	str	r3, [r4, #92]	; 0x5c
   1a0da:	8823      	ldrh	r3, [r4, #0]
   1a0dc:	42ab      	cmp	r3, r5
   1a0de:	d003      	beq.n	1a0e8 <srkf_dbl_init+0x54>
   1a0e0:	4ba2      	ldr	r3, [pc, #648]	; (1a36c <srkf_dbl_init+0x2d8>)
   1a0e2:	4a9e      	ldr	r2, [pc, #632]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a0e4:	21ce      	movs	r1, #206	; 0xce
   1a0e6:	e7e4      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a0e8:	88a3      	ldrh	r3, [r4, #4]
   1a0ea:	42b3      	cmp	r3, r6
   1a0ec:	d920      	bls.n	1a130 <srkf_dbl_init+0x9c>
   1a0ee:	00f7      	lsls	r7, r6, #3
   1a0f0:	8066      	strh	r6, [r4, #2]
   1a0f2:	463a      	mov	r2, r7
   1a0f4:	2100      	movs	r1, #0
   1a0f6:	4375      	muls	r5, r6
   1a0f8:	6920      	ldr	r0, [r4, #16]
   1a0fa:	f7f7 f9ca 	bl	11492 <memset>
   1a0fe:	00ed      	lsls	r5, r5, #3
   1a100:	463a      	mov	r2, r7
   1a102:	2100      	movs	r1, #0
   1a104:	69a0      	ldr	r0, [r4, #24]
   1a106:	f7f7 f9c4 	bl	11492 <memset>
   1a10a:	4376      	muls	r6, r6
   1a10c:	462a      	mov	r2, r5
   1a10e:	2100      	movs	r1, #0
   1a110:	69e0      	ldr	r0, [r4, #28]
   1a112:	f7f7 f9be 	bl	11492 <memset>
   1a116:	00f2      	lsls	r2, r6, #3
   1a118:	2100      	movs	r1, #0
   1a11a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a11c:	f7f7 f9b9 	bl	11492 <memset>
   1a120:	462a      	mov	r2, r5
   1a122:	2100      	movs	r1, #0
   1a124:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1a126:	f7f7 f9b4 	bl	11492 <memset>
   1a12a:	4620      	mov	r0, r4
   1a12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a130:	68a7      	ldr	r7, [r4, #8]
   1a132:	b177      	cbz	r7, 1a152 <srkf_dbl_init+0xbe>
   1a134:	f8d4 8010 	ldr.w	r8, [r4, #16]
   1a138:	00f7      	lsls	r7, r6, #3
   1a13a:	f1b8 0f00 	cmp.w	r8, #0
   1a13e:	d126      	bne.n	1a18e <srkf_dbl_init+0xfa>
   1a140:	4638      	mov	r0, r7
   1a142:	f7f7 f929 	bl	11398 <malloc>
   1a146:	6120      	str	r0, [r4, #16]
   1a148:	bb58      	cbnz	r0, 1a1a2 <srkf_dbl_init+0x10e>
   1a14a:	4b89      	ldr	r3, [pc, #548]	; (1a370 <srkf_dbl_init+0x2dc>)
   1a14c:	4a83      	ldr	r2, [pc, #524]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a14e:	21e6      	movs	r1, #230	; 0xe6
   1a150:	e7af      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a152:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1a156:	4648      	mov	r0, r9
   1a158:	f7f7 f91e 	bl	11398 <malloc>
   1a15c:	60a0      	str	r0, [r4, #8]
   1a15e:	b918      	cbnz	r0, 1a168 <srkf_dbl_init+0xd4>
   1a160:	4b84      	ldr	r3, [pc, #528]	; (1a374 <srkf_dbl_init+0x2e0>)
   1a162:	4a7e      	ldr	r2, [pc, #504]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a164:	21dc      	movs	r1, #220	; 0xdc
   1a166:	e7a4      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a168:	464a      	mov	r2, r9
   1a16a:	4639      	mov	r1, r7
   1a16c:	f7f7 f991 	bl	11492 <memset>
   1a170:	f1b8 0f00 	cmp.w	r8, #0
   1a174:	d0de      	beq.n	1a134 <srkf_dbl_init+0xa0>
   1a176:	463b      	mov	r3, r7
   1a178:	429d      	cmp	r5, r3
   1a17a:	dddb      	ble.n	1a134 <srkf_dbl_init+0xa0>
   1a17c:	68a2      	ldr	r2, [r4, #8]
   1a17e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1a182:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a186:	e9c2 0100 	strd	r0, r1, [r2]
   1a18a:	3301      	adds	r3, #1
   1a18c:	e7f4      	b.n	1a178 <srkf_dbl_init+0xe4>
   1a18e:	4639      	mov	r1, r7
   1a190:	4640      	mov	r0, r8
   1a192:	f002 fa5f 	bl	1c654 <realloc>
   1a196:	6120      	str	r0, [r4, #16]
   1a198:	b918      	cbnz	r0, 1a1a2 <srkf_dbl_init+0x10e>
   1a19a:	4b75      	ldr	r3, [pc, #468]	; (1a370 <srkf_dbl_init+0x2dc>)
   1a19c:	4a6f      	ldr	r2, [pc, #444]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a19e:	21ea      	movs	r1, #234	; 0xea
   1a1a0:	e787      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a1a2:	463a      	mov	r2, r7
   1a1a4:	2100      	movs	r1, #0
   1a1a6:	f7f7 f974 	bl	11492 <memset>
   1a1aa:	f8d4 8014 	ldr.w	r8, [r4, #20]
   1a1ae:	f1b8 0f00 	cmp.w	r8, #0
   1a1b2:	d108      	bne.n	1a1c6 <srkf_dbl_init+0x132>
   1a1b4:	4638      	mov	r0, r7
   1a1b6:	f7f7 f8ef 	bl	11398 <malloc>
   1a1ba:	6160      	str	r0, [r4, #20]
   1a1bc:	b968      	cbnz	r0, 1a1da <srkf_dbl_init+0x146>
   1a1be:	4b6e      	ldr	r3, [pc, #440]	; (1a378 <srkf_dbl_init+0x2e4>)
   1a1c0:	4a66      	ldr	r2, [pc, #408]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a1c2:	21ef      	movs	r1, #239	; 0xef
   1a1c4:	e775      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a1c6:	4639      	mov	r1, r7
   1a1c8:	4640      	mov	r0, r8
   1a1ca:	f002 fa43 	bl	1c654 <realloc>
   1a1ce:	6160      	str	r0, [r4, #20]
   1a1d0:	b918      	cbnz	r0, 1a1da <srkf_dbl_init+0x146>
   1a1d2:	4b69      	ldr	r3, [pc, #420]	; (1a378 <srkf_dbl_init+0x2e4>)
   1a1d4:	4a61      	ldr	r2, [pc, #388]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a1d6:	21f3      	movs	r1, #243	; 0xf3
   1a1d8:	e76b      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a1da:	463a      	mov	r2, r7
   1a1dc:	2100      	movs	r1, #0
   1a1de:	f7f7 f958 	bl	11492 <memset>
   1a1e2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1a1e6:	f1b8 0f00 	cmp.w	r8, #0
   1a1ea:	d108      	bne.n	1a1fe <srkf_dbl_init+0x16a>
   1a1ec:	4638      	mov	r0, r7
   1a1ee:	f7f7 f8d3 	bl	11398 <malloc>
   1a1f2:	61a0      	str	r0, [r4, #24]
   1a1f4:	b968      	cbnz	r0, 1a212 <srkf_dbl_init+0x17e>
   1a1f6:	4b61      	ldr	r3, [pc, #388]	; (1a37c <srkf_dbl_init+0x2e8>)
   1a1f8:	4a58      	ldr	r2, [pc, #352]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a1fa:	21f8      	movs	r1, #248	; 0xf8
   1a1fc:	e759      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a1fe:	4639      	mov	r1, r7
   1a200:	4640      	mov	r0, r8
   1a202:	f002 fa27 	bl	1c654 <realloc>
   1a206:	61a0      	str	r0, [r4, #24]
   1a208:	b918      	cbnz	r0, 1a212 <srkf_dbl_init+0x17e>
   1a20a:	4b5c      	ldr	r3, [pc, #368]	; (1a37c <srkf_dbl_init+0x2e8>)
   1a20c:	4a53      	ldr	r2, [pc, #332]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a20e:	21fc      	movs	r1, #252	; 0xfc
   1a210:	e74f      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a212:	463a      	mov	r2, r7
   1a214:	2100      	movs	r1, #0
   1a216:	f7f7 f93c 	bl	11492 <memset>
   1a21a:	69e7      	ldr	r7, [r4, #28]
   1a21c:	fb05 f806 	mul.w	r8, r5, r6
   1a220:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   1a224:	b94f      	cbnz	r7, 1a23a <srkf_dbl_init+0x1a6>
   1a226:	4640      	mov	r0, r8
   1a228:	f7f7 f8b6 	bl	11398 <malloc>
   1a22c:	61e0      	str	r0, [r4, #28]
   1a22e:	b978      	cbnz	r0, 1a250 <srkf_dbl_init+0x1bc>
   1a230:	4b53      	ldr	r3, [pc, #332]	; (1a380 <srkf_dbl_init+0x2ec>)
   1a232:	4a4a      	ldr	r2, [pc, #296]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a234:	f240 1101 	movw	r1, #257	; 0x101
   1a238:	e73b      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a23a:	4641      	mov	r1, r8
   1a23c:	4638      	mov	r0, r7
   1a23e:	f002 fa09 	bl	1c654 <realloc>
   1a242:	61e0      	str	r0, [r4, #28]
   1a244:	b920      	cbnz	r0, 1a250 <srkf_dbl_init+0x1bc>
   1a246:	4b4e      	ldr	r3, [pc, #312]	; (1a380 <srkf_dbl_init+0x2ec>)
   1a248:	4a44      	ldr	r2, [pc, #272]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a24a:	f240 1105 	movw	r1, #261	; 0x105
   1a24e:	e730      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a250:	4642      	mov	r2, r8
   1a252:	2100      	movs	r1, #0
   1a254:	f7f7 f91d 	bl	11492 <memset>
   1a258:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1a25c:	f1b9 0f00 	cmp.w	r9, #0
   1a260:	d110      	bne.n	1a284 <srkf_dbl_init+0x1f0>
   1a262:	fb05 f705 	mul.w	r7, r5, r5
   1a266:	00ff      	lsls	r7, r7, #3
   1a268:	4638      	mov	r0, r7
   1a26a:	f7f7 f895 	bl	11398 <malloc>
   1a26e:	6220      	str	r0, [r4, #32]
   1a270:	b920      	cbnz	r0, 1a27c <srkf_dbl_init+0x1e8>
   1a272:	4b44      	ldr	r3, [pc, #272]	; (1a384 <srkf_dbl_init+0x2f0>)
   1a274:	4a39      	ldr	r2, [pc, #228]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a276:	f44f 7185 	mov.w	r1, #266	; 0x10a
   1a27a:	e71a      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a27c:	463a      	mov	r2, r7
   1a27e:	4649      	mov	r1, r9
   1a280:	f7f7 f907 	bl	11492 <memset>
   1a284:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   1a288:	f1b9 0f00 	cmp.w	r9, #0
   1a28c:	d110      	bne.n	1a2b0 <srkf_dbl_init+0x21c>
   1a28e:	fb05 f705 	mul.w	r7, r5, r5
   1a292:	00ff      	lsls	r7, r7, #3
   1a294:	4638      	mov	r0, r7
   1a296:	f7f7 f87f 	bl	11398 <malloc>
   1a29a:	6260      	str	r0, [r4, #36]	; 0x24
   1a29c:	b920      	cbnz	r0, 1a2a8 <srkf_dbl_init+0x214>
   1a29e:	4b3a      	ldr	r3, [pc, #232]	; (1a388 <srkf_dbl_init+0x2f4>)
   1a2a0:	4a2e      	ldr	r2, [pc, #184]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a2a2:	f240 110f 	movw	r1, #271	; 0x10f
   1a2a6:	e704      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a2a8:	463a      	mov	r2, r7
   1a2aa:	4649      	mov	r1, r9
   1a2ac:	f7f7 f8f1 	bl	11492 <memset>
   1a2b0:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   1a2b4:	f1b9 0f00 	cmp.w	r9, #0
   1a2b8:	d110      	bne.n	1a2dc <srkf_dbl_init+0x248>
   1a2ba:	fb05 f705 	mul.w	r7, r5, r5
   1a2be:	00ff      	lsls	r7, r7, #3
   1a2c0:	4638      	mov	r0, r7
   1a2c2:	f7f7 f869 	bl	11398 <malloc>
   1a2c6:	62a0      	str	r0, [r4, #40]	; 0x28
   1a2c8:	b920      	cbnz	r0, 1a2d4 <srkf_dbl_init+0x240>
   1a2ca:	4b30      	ldr	r3, [pc, #192]	; (1a38c <srkf_dbl_init+0x2f8>)
   1a2cc:	4a23      	ldr	r2, [pc, #140]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a2ce:	f44f 718a 	mov.w	r1, #276	; 0x114
   1a2d2:	e6ee      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a2d4:	463a      	mov	r2, r7
   1a2d6:	4649      	mov	r1, r9
   1a2d8:	f7f7 f8db 	bl	11492 <memset>
   1a2dc:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   1a2e0:	f1b9 0f00 	cmp.w	r9, #0
   1a2e4:	d110      	bne.n	1a308 <srkf_dbl_init+0x274>
   1a2e6:	fb05 f705 	mul.w	r7, r5, r5
   1a2ea:	00ff      	lsls	r7, r7, #3
   1a2ec:	4638      	mov	r0, r7
   1a2ee:	f7f7 f853 	bl	11398 <malloc>
   1a2f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   1a2f4:	b920      	cbnz	r0, 1a300 <srkf_dbl_init+0x26c>
   1a2f6:	4b26      	ldr	r3, [pc, #152]	; (1a390 <srkf_dbl_init+0x2fc>)
   1a2f8:	4a18      	ldr	r2, [pc, #96]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a2fa:	f240 1119 	movw	r1, #281	; 0x119
   1a2fe:	e6d8      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a300:	463a      	mov	r2, r7
   1a302:	4649      	mov	r1, r9
   1a304:	f7f7 f8c5 	bl	11492 <memset>
   1a308:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   1a30c:	f1b9 0f00 	cmp.w	r9, #0
   1a310:	d110      	bne.n	1a334 <srkf_dbl_init+0x2a0>
   1a312:	fb05 f705 	mul.w	r7, r5, r5
   1a316:	00ff      	lsls	r7, r7, #3
   1a318:	4638      	mov	r0, r7
   1a31a:	f7f7 f83d 	bl	11398 <malloc>
   1a31e:	6320      	str	r0, [r4, #48]	; 0x30
   1a320:	b920      	cbnz	r0, 1a32c <srkf_dbl_init+0x298>
   1a322:	4b1c      	ldr	r3, [pc, #112]	; (1a394 <srkf_dbl_init+0x300>)
   1a324:	4a0d      	ldr	r2, [pc, #52]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a326:	f44f 718f 	mov.w	r1, #286	; 0x11e
   1a32a:	e6c2      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a32c:	463a      	mov	r2, r7
   1a32e:	4649      	mov	r1, r9
   1a330:	f7f7 f8af 	bl	11492 <memset>
   1a334:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1a338:	f1b9 0f00 	cmp.w	r9, #0
   1a33c:	d132      	bne.n	1a3a4 <srkf_dbl_init+0x310>
   1a33e:	fb05 f705 	mul.w	r7, r5, r5
   1a342:	00ff      	lsls	r7, r7, #3
   1a344:	4638      	mov	r0, r7
   1a346:	f7f7 f827 	bl	11398 <malloc>
   1a34a:	6360      	str	r0, [r4, #52]	; 0x34
   1a34c:	bb30      	cbnz	r0, 1a39c <srkf_dbl_init+0x308>
   1a34e:	4b12      	ldr	r3, [pc, #72]	; (1a398 <srkf_dbl_init+0x304>)
   1a350:	4a02      	ldr	r2, [pc, #8]	; (1a35c <srkf_dbl_init+0x2c8>)
   1a352:	f240 1123 	movw	r1, #291	; 0x123
   1a356:	e6ac      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a358:	000252aa 	.word	0x000252aa
   1a35c:	000252ed 	.word	0x000252ed
   1a360:	000253c6 	.word	0x000253c6
   1a364:	00019d21 	.word	0x00019d21
   1a368:	00019ca1 	.word	0x00019ca1
   1a36c:	00025315 	.word	0x00025315
   1a370:	0002532a 	.word	0x0002532a
   1a374:	00025322 	.word	0x00025322
   1a378:	00025332 	.word	0x00025332
   1a37c:	0002533a 	.word	0x0002533a
   1a380:	00025342 	.word	0x00025342
   1a384:	0002534a 	.word	0x0002534a
   1a388:	00025352 	.word	0x00025352
   1a38c:	0002535b 	.word	0x0002535b
   1a390:	00025364 	.word	0x00025364
   1a394:	0002536c 	.word	0x0002536c
   1a398:	00025375 	.word	0x00025375
   1a39c:	463a      	mov	r2, r7
   1a39e:	4649      	mov	r1, r9
   1a3a0:	f7f7 f877 	bl	11492 <memset>
   1a3a4:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   1a3a8:	fb06 f706 	mul.w	r7, r6, r6
   1a3ac:	00ff      	lsls	r7, r7, #3
   1a3ae:	f1b9 0f00 	cmp.w	r9, #0
   1a3b2:	d109      	bne.n	1a3c8 <srkf_dbl_init+0x334>
   1a3b4:	4638      	mov	r0, r7
   1a3b6:	f7f6 ffef 	bl	11398 <malloc>
   1a3ba:	63a0      	str	r0, [r4, #56]	; 0x38
   1a3bc:	b978      	cbnz	r0, 1a3de <srkf_dbl_init+0x34a>
   1a3be:	4b6d      	ldr	r3, [pc, #436]	; (1a574 <srkf_dbl_init+0x4e0>)
   1a3c0:	4a6d      	ldr	r2, [pc, #436]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a3c2:	f44f 7194 	mov.w	r1, #296	; 0x128
   1a3c6:	e674      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a3c8:	4639      	mov	r1, r7
   1a3ca:	4648      	mov	r0, r9
   1a3cc:	f002 f942 	bl	1c654 <realloc>
   1a3d0:	63a0      	str	r0, [r4, #56]	; 0x38
   1a3d2:	b920      	cbnz	r0, 1a3de <srkf_dbl_init+0x34a>
   1a3d4:	4b67      	ldr	r3, [pc, #412]	; (1a574 <srkf_dbl_init+0x4e0>)
   1a3d6:	4a68      	ldr	r2, [pc, #416]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a3d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1a3dc:	e669      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a3de:	463a      	mov	r2, r7
   1a3e0:	2100      	movs	r1, #0
   1a3e2:	f7f7 f856 	bl	11492 <memset>
   1a3e6:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   1a3ea:	f1b9 0f00 	cmp.w	r9, #0
   1a3ee:	d109      	bne.n	1a404 <srkf_dbl_init+0x370>
   1a3f0:	4638      	mov	r0, r7
   1a3f2:	f7f6 ffd1 	bl	11398 <malloc>
   1a3f6:	63e0      	str	r0, [r4, #60]	; 0x3c
   1a3f8:	b978      	cbnz	r0, 1a41a <srkf_dbl_init+0x386>
   1a3fa:	4b60      	ldr	r3, [pc, #384]	; (1a57c <srkf_dbl_init+0x4e8>)
   1a3fc:	4a5e      	ldr	r2, [pc, #376]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a3fe:	f240 1131 	movw	r1, #305	; 0x131
   1a402:	e656      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a404:	4639      	mov	r1, r7
   1a406:	4648      	mov	r0, r9
   1a408:	f002 f924 	bl	1c654 <realloc>
   1a40c:	63e0      	str	r0, [r4, #60]	; 0x3c
   1a40e:	b920      	cbnz	r0, 1a41a <srkf_dbl_init+0x386>
   1a410:	4b5a      	ldr	r3, [pc, #360]	; (1a57c <srkf_dbl_init+0x4e8>)
   1a412:	4a59      	ldr	r2, [pc, #356]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a414:	f240 1135 	movw	r1, #309	; 0x135
   1a418:	e64b      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a41a:	463a      	mov	r2, r7
   1a41c:	2100      	movs	r1, #0
   1a41e:	f7f7 f838 	bl	11492 <memset>
   1a422:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   1a426:	f1b9 0f00 	cmp.w	r9, #0
   1a42a:	d109      	bne.n	1a440 <srkf_dbl_init+0x3ac>
   1a42c:	4638      	mov	r0, r7
   1a42e:	f7f6 ffb3 	bl	11398 <malloc>
   1a432:	6420      	str	r0, [r4, #64]	; 0x40
   1a434:	b978      	cbnz	r0, 1a456 <srkf_dbl_init+0x3c2>
   1a436:	4b52      	ldr	r3, [pc, #328]	; (1a580 <srkf_dbl_init+0x4ec>)
   1a438:	4a4f      	ldr	r2, [pc, #316]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a43a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1a43e:	e638      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a440:	4639      	mov	r1, r7
   1a442:	4648      	mov	r0, r9
   1a444:	f002 f906 	bl	1c654 <realloc>
   1a448:	6420      	str	r0, [r4, #64]	; 0x40
   1a44a:	b920      	cbnz	r0, 1a456 <srkf_dbl_init+0x3c2>
   1a44c:	4b4c      	ldr	r3, [pc, #304]	; (1a580 <srkf_dbl_init+0x4ec>)
   1a44e:	4a4a      	ldr	r2, [pc, #296]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a450:	f44f 719f 	mov.w	r1, #318	; 0x13e
   1a454:	e62d      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a456:	463a      	mov	r2, r7
   1a458:	2100      	movs	r1, #0
   1a45a:	f7f7 f81a 	bl	11492 <memset>
   1a45e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1a460:	b988      	cbnz	r0, 1a486 <srkf_dbl_init+0x3f2>
   1a462:	42b5      	cmp	r5, r6
   1a464:	bf8c      	ite	hi
   1a466:	fb15 f705 	smulbbhi	r7, r5, r5
   1a46a:	fb16 f706 	smulbbls	r7, r6, r6
   1a46e:	b2bf      	uxth	r7, r7
   1a470:	00ff      	lsls	r7, r7, #3
   1a472:	4638      	mov	r0, r7
   1a474:	f7f6 ff90 	bl	11398 <malloc>
   1a478:	6460      	str	r0, [r4, #68]	; 0x44
   1a47a:	b9b0      	cbnz	r0, 1a4aa <srkf_dbl_init+0x416>
   1a47c:	4b41      	ldr	r3, [pc, #260]	; (1a584 <srkf_dbl_init+0x4f0>)
   1a47e:	4a3e      	ldr	r2, [pc, #248]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a480:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1a484:	e615      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a486:	42b5      	cmp	r5, r6
   1a488:	bf8c      	ite	hi
   1a48a:	fb15 f705 	smulbbhi	r7, r5, r5
   1a48e:	fb16 f706 	smulbbls	r7, r6, r6
   1a492:	b2bf      	uxth	r7, r7
   1a494:	00ff      	lsls	r7, r7, #3
   1a496:	4639      	mov	r1, r7
   1a498:	f002 f8dc 	bl	1c654 <realloc>
   1a49c:	6460      	str	r0, [r4, #68]	; 0x44
   1a49e:	b920      	cbnz	r0, 1a4aa <srkf_dbl_init+0x416>
   1a4a0:	4b38      	ldr	r3, [pc, #224]	; (1a584 <srkf_dbl_init+0x4f0>)
   1a4a2:	4a35      	ldr	r2, [pc, #212]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a4a4:	f240 1149 	movw	r1, #329	; 0x149
   1a4a8:	e603      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a4aa:	463a      	mov	r2, r7
   1a4ac:	2100      	movs	r1, #0
   1a4ae:	f7f6 fff0 	bl	11492 <memset>
   1a4b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1a4b4:	b988      	cbnz	r0, 1a4da <srkf_dbl_init+0x446>
   1a4b6:	42b5      	cmp	r5, r6
   1a4b8:	bf8c      	ite	hi
   1a4ba:	fb15 f705 	smulbbhi	r7, r5, r5
   1a4be:	fb16 f706 	smulbbls	r7, r6, r6
   1a4c2:	b2bf      	uxth	r7, r7
   1a4c4:	00ff      	lsls	r7, r7, #3
   1a4c6:	4638      	mov	r0, r7
   1a4c8:	f7f6 ff66 	bl	11398 <malloc>
   1a4cc:	64a0      	str	r0, [r4, #72]	; 0x48
   1a4ce:	b9b0      	cbnz	r0, 1a4fe <srkf_dbl_init+0x46a>
   1a4d0:	4b2d      	ldr	r3, [pc, #180]	; (1a588 <srkf_dbl_init+0x4f4>)
   1a4d2:	4a29      	ldr	r2, [pc, #164]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a4d4:	f240 114f 	movw	r1, #335	; 0x14f
   1a4d8:	e5eb      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a4da:	42b5      	cmp	r5, r6
   1a4dc:	bf8c      	ite	hi
   1a4de:	fb15 f705 	smulbbhi	r7, r5, r5
   1a4e2:	fb16 f706 	smulbbls	r7, r6, r6
   1a4e6:	b2bf      	uxth	r7, r7
   1a4e8:	00ff      	lsls	r7, r7, #3
   1a4ea:	4639      	mov	r1, r7
   1a4ec:	f002 f8b2 	bl	1c654 <realloc>
   1a4f0:	64a0      	str	r0, [r4, #72]	; 0x48
   1a4f2:	b920      	cbnz	r0, 1a4fe <srkf_dbl_init+0x46a>
   1a4f4:	4b24      	ldr	r3, [pc, #144]	; (1a588 <srkf_dbl_init+0x4f4>)
   1a4f6:	4a20      	ldr	r2, [pc, #128]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a4f8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1a4fc:	e5d9      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a4fe:	463a      	mov	r2, r7
   1a500:	2100      	movs	r1, #0
   1a502:	f7f6 ffc6 	bl	11492 <memset>
   1a506:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   1a508:	b97f      	cbnz	r7, 1a52a <srkf_dbl_init+0x496>
   1a50a:	436d      	muls	r5, r5
   1a50c:	00ed      	lsls	r5, r5, #3
   1a50e:	4628      	mov	r0, r5
   1a510:	f7f6 ff42 	bl	11398 <malloc>
   1a514:	64e0      	str	r0, [r4, #76]	; 0x4c
   1a516:	b920      	cbnz	r0, 1a522 <srkf_dbl_init+0x48e>
   1a518:	4b1c      	ldr	r3, [pc, #112]	; (1a58c <srkf_dbl_init+0x4f8>)
   1a51a:	4a17      	ldr	r2, [pc, #92]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a51c:	f240 1159 	movw	r1, #345	; 0x159
   1a520:	e5c7      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a522:	462a      	mov	r2, r5
   1a524:	4639      	mov	r1, r7
   1a526:	f7f6 ffb4 	bl	11492 <memset>
   1a52a:	6d25      	ldr	r5, [r4, #80]	; 0x50
   1a52c:	b94d      	cbnz	r5, 1a542 <srkf_dbl_init+0x4ae>
   1a52e:	4640      	mov	r0, r8
   1a530:	f7f6 ff32 	bl	11398 <malloc>
   1a534:	6520      	str	r0, [r4, #80]	; 0x50
   1a536:	b978      	cbnz	r0, 1a558 <srkf_dbl_init+0x4c4>
   1a538:	4b15      	ldr	r3, [pc, #84]	; (1a590 <srkf_dbl_init+0x4fc>)
   1a53a:	4a0f      	ldr	r2, [pc, #60]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a53c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1a540:	e5b7      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a542:	4641      	mov	r1, r8
   1a544:	4628      	mov	r0, r5
   1a546:	f002 f885 	bl	1c654 <realloc>
   1a54a:	6520      	str	r0, [r4, #80]	; 0x50
   1a54c:	b920      	cbnz	r0, 1a558 <srkf_dbl_init+0x4c4>
   1a54e:	4b10      	ldr	r3, [pc, #64]	; (1a590 <srkf_dbl_init+0x4fc>)
   1a550:	4a09      	ldr	r2, [pc, #36]	; (1a578 <srkf_dbl_init+0x4e4>)
   1a552:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1a556:	e5ac      	b.n	1a0b2 <srkf_dbl_init+0x1e>
   1a558:	4642      	mov	r2, r8
   1a55a:	2100      	movs	r1, #0
   1a55c:	f7f6 ff99 	bl	11492 <memset>
   1a560:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a564:	80a6      	strh	r6, [r4, #4]
   1a566:	f043 0302 	orr.w	r3, r3, #2
   1a56a:	8066      	strh	r6, [r4, #2]
   1a56c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1a570:	e5db      	b.n	1a12a <srkf_dbl_init+0x96>
   1a572:	bf00      	nop
   1a574:	0002537e 	.word	0x0002537e
   1a578:	000252ed 	.word	0x000252ed
   1a57c:	00025386 	.word	0x00025386
   1a580:	0002538f 	.word	0x0002538f
   1a584:	00025398 	.word	0x00025398
   1a588:	000253a0 	.word	0x000253a0
   1a58c:	000253a9 	.word	0x000253a9
   1a590:	000253b1 	.word	0x000253b1

0001a594 <srkf_dbl_free>:
   1a594:	b510      	push	{r4, lr}
   1a596:	4604      	mov	r4, r0
   1a598:	b930      	cbnz	r0, 1a5a8 <srkf_dbl_free+0x14>
   1a59a:	4b23      	ldr	r3, [pc, #140]	; (1a628 <srkf_dbl_free+0x94>)
   1a59c:	4a23      	ldr	r2, [pc, #140]	; (1a62c <srkf_dbl_free+0x98>)
   1a59e:	4824      	ldr	r0, [pc, #144]	; (1a630 <srkf_dbl_free+0x9c>)
   1a5a0:	f240 1173 	movw	r1, #371	; 0x173
   1a5a4:	f7f2 fedc 	bl	d360 <__assert_func>
   1a5a8:	6880      	ldr	r0, [r0, #8]
   1a5aa:	f7f6 ff2b 	bl	11404 <free>
   1a5ae:	6920      	ldr	r0, [r4, #16]
   1a5b0:	f7f6 ff28 	bl	11404 <free>
   1a5b4:	69a0      	ldr	r0, [r4, #24]
   1a5b6:	f7f6 ff25 	bl	11404 <free>
   1a5ba:	69e0      	ldr	r0, [r4, #28]
   1a5bc:	f7f6 ff22 	bl	11404 <free>
   1a5c0:	6a20      	ldr	r0, [r4, #32]
   1a5c2:	f7f6 ff1f 	bl	11404 <free>
   1a5c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a5c8:	f7f6 ff1c 	bl	11404 <free>
   1a5cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a5ce:	f7f6 ff19 	bl	11404 <free>
   1a5d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a5d4:	f7f6 ff16 	bl	11404 <free>
   1a5d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1a5da:	f7f6 ff13 	bl	11404 <free>
   1a5de:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1a5e0:	f7f6 ff10 	bl	11404 <free>
   1a5e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a5e6:	f7f6 ff0d 	bl	11404 <free>
   1a5ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1a5ec:	f7f6 ff0a 	bl	11404 <free>
   1a5f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1a5f2:	f7f6 ff07 	bl	11404 <free>
   1a5f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1a5f8:	f7f6 ff04 	bl	11404 <free>
   1a5fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1a5fe:	f7f6 ff01 	bl	11404 <free>
   1a602:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1a604:	f7f6 fefe 	bl	11404 <free>
   1a608:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1a60a:	f7f6 fefb 	bl	11404 <free>
   1a60e:	2300      	movs	r3, #0
   1a610:	6023      	str	r3, [r4, #0]
   1a612:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1a616:	07db      	lsls	r3, r3, #31
   1a618:	d504      	bpl.n	1a624 <srkf_dbl_free+0x90>
   1a61a:	4620      	mov	r0, r4
   1a61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a620:	f7f6 bef0 	b.w	11404 <free>
   1a624:	bd10      	pop	{r4, pc}
   1a626:	bf00      	nop
   1a628:	00025309 	.word	0x00025309
   1a62c:	000252fb 	.word	0x000252fb
   1a630:	000253c6 	.word	0x000253c6

0001a634 <trisolve_dbl>:
   1a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a638:	b08b      	sub	sp, #44	; 0x2c
   1a63a:	4699      	mov	r9, r3
   1a63c:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   1a640:	9004      	str	r0, [sp, #16]
   1a642:	f06f 0307 	mvn.w	r3, #7
   1a646:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   1a64a:	fb03 f308 	mul.w	r3, r3, r8
   1a64e:	b236      	sxth	r6, r6
   1a650:	9303      	str	r3, [sp, #12]
   1a652:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1a656:	fb06 f308 	mul.w	r3, r6, r8
   1a65a:	9306      	str	r3, [sp, #24]
   1a65c:	fb09 f306 	mul.w	r3, r9, r6
   1a660:	9307      	str	r3, [sp, #28]
   1a662:	f04f 0b00 	mov.w	fp, #0
   1a666:	fa0f fa8b 	sxth.w	sl, fp
   1a66a:	45c2      	cmp	sl, r8
   1a66c:	db02      	blt.n	1a674 <trisolve_dbl+0x40>
   1a66e:	b00b      	add	sp, #44	; 0x2c
   1a670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a674:	9b06      	ldr	r3, [sp, #24]
   1a676:	4453      	add	r3, sl
   1a678:	00db      	lsls	r3, r3, #3
   1a67a:	9305      	str	r3, [sp, #20]
   1a67c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1a680:	189f      	adds	r7, r3, r2
   1a682:	9b07      	ldr	r3, [sp, #28]
   1a684:	9301      	str	r3, [sp, #4]
   1a686:	2300      	movs	r3, #0
   1a688:	4635      	mov	r5, r6
   1a68a:	9302      	str	r3, [sp, #8]
   1a68c:	2d00      	cmp	r5, #0
   1a68e:	da02      	bge.n	1a696 <trisolve_dbl+0x62>
   1a690:	f10b 0b01 	add.w	fp, fp, #1
   1a694:	e7e7      	b.n	1a666 <trisolve_dbl+0x32>
   1a696:	9a05      	ldr	r2, [sp, #20]
   1a698:	9b02      	ldr	r3, [sp, #8]
   1a69a:	4413      	add	r3, r2
   1a69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a69e:	4413      	add	r3, r2
   1a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6a4:	e9c7 2300 	strd	r2, r3, [r7]
   1a6a8:	b2ad      	uxth	r5, r5
   1a6aa:	1c6c      	adds	r4, r5, #1
   1a6ac:	b224      	sxth	r4, r4
   1a6ae:	454c      	cmp	r4, r9
   1a6b0:	db0c      	blt.n	1a6cc <trisolve_dbl+0x98>
   1a6b2:	9b03      	ldr	r3, [sp, #12]
   1a6b4:	441f      	add	r7, r3
   1a6b6:	9b01      	ldr	r3, [sp, #4]
   1a6b8:	eba3 0309 	sub.w	r3, r3, r9
   1a6bc:	9301      	str	r3, [sp, #4]
   1a6be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1a6c2:	3d01      	subs	r5, #1
   1a6c4:	4413      	add	r3, r2
   1a6c6:	9302      	str	r3, [sp, #8]
   1a6c8:	b22d      	sxth	r5, r5
   1a6ca:	e7df      	b.n	1a68c <trisolve_dbl+0x58>
   1a6cc:	9b04      	ldr	r3, [sp, #16]
   1a6ce:	9a08      	ldr	r2, [sp, #32]
   1a6d0:	fb08 a104 	mla	r1, r8, r4, sl
   1a6d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1a6d8:	9b01      	ldr	r3, [sp, #4]
   1a6da:	4423      	add	r3, r4
   1a6dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a6e8:	f007 f9b8 	bl	21a5c <__aeabi_dmul>
   1a6ec:	4602      	mov	r2, r0
   1a6ee:	460b      	mov	r3, r1
   1a6f0:	e9d7 0100 	ldrd	r0, r1, [r7]
   1a6f4:	f006 fffa 	bl	216ec <__aeabi_dsub>
   1a6f8:	3401      	adds	r4, #1
   1a6fa:	e9c7 0100 	strd	r0, r1, [r7]
   1a6fe:	e7d5      	b.n	1a6ac <trisolve_dbl+0x78>

0001a700 <ud_dbl>:
   1a700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a704:	ed2d 8b02 	vpush	{d8}
   1a708:	fb03 f503 	mul.w	r5, r3, r3
   1a70c:	b091      	sub	sp, #68	; 0x44
   1a70e:	460f      	mov	r7, r1
   1a710:	00ed      	lsls	r5, r5, #3
   1a712:	4606      	mov	r6, r0
   1a714:	9209      	str	r2, [sp, #36]	; 0x24
   1a716:	2100      	movs	r1, #0
   1a718:	462a      	mov	r2, r5
   1a71a:	4638      	mov	r0, r7
   1a71c:	461c      	mov	r4, r3
   1a71e:	f7f6 feb8 	bl	11492 <memset>
   1a722:	462a      	mov	r2, r5
   1a724:	2100      	movs	r1, #0
   1a726:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a728:	f7f6 feb3 	bl	11492 <memset>
   1a72c:	43e3      	mvns	r3, r4
   1a72e:	00db      	lsls	r3, r3, #3
   1a730:	1e65      	subs	r5, r4, #1
   1a732:	b22d      	sxth	r5, r5
   1a734:	9306      	str	r3, [sp, #24]
   1a736:	1c63      	adds	r3, r4, #1
   1a738:	930d      	str	r3, [sp, #52]	; 0x34
   1a73a:	436b      	muls	r3, r5
   1a73c:	00da      	lsls	r2, r3, #3
   1a73e:	00d9      	lsls	r1, r3, #3
   1a740:	3301      	adds	r3, #1
   1a742:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1a746:	9308      	str	r3, [sp, #32]
   1a748:	f06f 0307 	mvn.w	r3, #7
   1a74c:	4363      	muls	r3, r4
   1a74e:	920b      	str	r2, [sp, #44]	; 0x2c
   1a750:	ed9f 8b51 	vldr	d8, [pc, #324]	; 1a898 <ud_dbl+0x198>
   1a754:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a756:	930c      	str	r3, [sp, #48]	; 0x30
   1a758:	fb05 fa04 	mul.w	sl, r5, r4
   1a75c:	187b      	adds	r3, r7, r1
   1a75e:	f04f 0900 	mov.w	r9, #0
   1a762:	eb02 0b01 	add.w	fp, r2, r1
   1a766:	f8cd a01c 	str.w	sl, [sp, #28]
   1a76a:	930f      	str	r3, [sp, #60]	; 0x3c
   1a76c:	f8cd 9010 	str.w	r9, [sp, #16]
   1a770:	2d00      	cmp	r5, #0
   1a772:	da0d      	bge.n	1a790 <ud_dbl+0x90>
   1a774:	2000      	movs	r0, #0
   1a776:	f04f 0800 	mov.w	r8, #0
   1a77a:	f04f 0900 	mov.w	r9, #0
   1a77e:	b201      	sxth	r1, r0
   1a780:	428c      	cmp	r4, r1
   1a782:	dd7f      	ble.n	1a884 <ud_dbl+0x184>
   1a784:	fb04 f301 	mul.w	r3, r4, r1
   1a788:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a78c:	2200      	movs	r2, #0
   1a78e:	e074      	b.n	1a87a <ud_dbl+0x17a>
   1a790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a792:	f8cd a014 	str.w	sl, [sp, #20]
   1a796:	444b      	add	r3, r9
   1a798:	9303      	str	r3, [sp, #12]
   1a79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a79c:	444b      	add	r3, r9
   1a79e:	18fb      	adds	r3, r7, r3
   1a7a0:	930e      	str	r3, [sp, #56]	; 0x38
   1a7a2:	9b08      	ldr	r3, [sp, #32]
   1a7a4:	930a      	str	r3, [sp, #40]	; 0x28
   1a7a6:	46a8      	mov	r8, r5
   1a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a7aa:	ed33 7b02 	vldmdb	r3!, {d7}
   1a7ae:	ed8d 7b00 	vstr	d7, [sp]
   1a7b2:	930a      	str	r3, [sp, #40]	; 0x28
   1a7b4:	462e      	mov	r6, r5
   1a7b6:	42b4      	cmp	r4, r6
   1a7b8:	dc30      	bgt.n	1a81c <ud_dbl+0x11c>
   1a7ba:	4545      	cmp	r5, r8
   1a7bc:	d150      	bne.n	1a860 <ud_dbl+0x160>
   1a7be:	4b38      	ldr	r3, [pc, #224]	; (1a8a0 <ud_dbl+0x1a0>)
   1a7c0:	2200      	movs	r2, #0
   1a7c2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7c6:	f007 fbc5 	bl	21f54 <__aeabi_dcmple>
   1a7ca:	2800      	cmp	r0, #0
   1a7cc:	9b04      	ldr	r3, [sp, #16]
   1a7ce:	ed9d 7b00 	vldr	d7, [sp]
   1a7d2:	bf18      	it	ne
   1a7d4:	2301      	movne	r3, #1
   1a7d6:	9304      	str	r3, [sp, #16]
   1a7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a7da:	ed8b 7b00 	vstr	d7, [fp]
   1a7de:	ed83 8b00 	vstr	d8, [r3]
   1a7e2:	9b03      	ldr	r3, [sp, #12]
   1a7e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a7e6:	4413      	add	r3, r2
   1a7e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1a7ec:	9303      	str	r3, [sp, #12]
   1a7ee:	9b05      	ldr	r3, [sp, #20]
   1a7f0:	fa0f f888 	sxth.w	r8, r8
   1a7f4:	1b1b      	subs	r3, r3, r4
   1a7f6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1a7fa:	9305      	str	r3, [sp, #20]
   1a7fc:	d1d4      	bne.n	1a7a8 <ud_dbl+0xa8>
   1a7fe:	9b06      	ldr	r3, [sp, #24]
   1a800:	9a06      	ldr	r2, [sp, #24]
   1a802:	449b      	add	fp, r3
   1a804:	9b08      	ldr	r3, [sp, #32]
   1a806:	4413      	add	r3, r2
   1a808:	9308      	str	r3, [sp, #32]
   1a80a:	9b07      	ldr	r3, [sp, #28]
   1a80c:	3d01      	subs	r5, #1
   1a80e:	1b1b      	subs	r3, r3, r4
   1a810:	b22d      	sxth	r5, r5
   1a812:	ebaa 0a04 	sub.w	sl, sl, r4
   1a816:	9307      	str	r3, [sp, #28]
   1a818:	4491      	add	r9, r2
   1a81a:	e7a9      	b.n	1a770 <ud_dbl+0x70>
   1a81c:	9b05      	ldr	r3, [sp, #20]
   1a81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a820:	1999      	adds	r1, r3, r6
   1a822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a824:	4373      	muls	r3, r6
   1a826:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1a82a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a832:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a836:	f007 f911 	bl	21a5c <__aeabi_dmul>
   1a83a:	9b07      	ldr	r3, [sp, #28]
   1a83c:	4433      	add	r3, r6
   1a83e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a842:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a846:	f007 f909 	bl	21a5c <__aeabi_dmul>
   1a84a:	4602      	mov	r2, r0
   1a84c:	460b      	mov	r3, r1
   1a84e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a852:	f006 ff4b 	bl	216ec <__aeabi_dsub>
   1a856:	3601      	adds	r6, #1
   1a858:	e9cd 0100 	strd	r0, r1, [sp]
   1a85c:	b236      	sxth	r6, r6
   1a85e:	e7aa      	b.n	1a7b6 <ud_dbl+0xb6>
   1a860:	e9db 2300 	ldrd	r2, r3, [fp]
   1a864:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a868:	f007 fa22 	bl	21cb0 <__aeabi_ddiv>
   1a86c:	9b03      	ldr	r3, [sp, #12]
   1a86e:	e9c3 0100 	strd	r0, r1, [r3]
   1a872:	e7b6      	b.n	1a7e2 <ud_dbl+0xe2>
   1a874:	e8e3 8902 	strd	r8, r9, [r3], #8
   1a878:	3201      	adds	r2, #1
   1a87a:	b215      	sxth	r5, r2
   1a87c:	42a9      	cmp	r1, r5
   1a87e:	dcf9      	bgt.n	1a874 <ud_dbl+0x174>
   1a880:	3001      	adds	r0, #1
   1a882:	e77c      	b.n	1a77e <ud_dbl+0x7e>
   1a884:	9b04      	ldr	r3, [sp, #16]
   1a886:	f04f 0000 	mov.w	r0, #0
   1a88a:	f363 0000 	bfi	r0, r3, #0, #1
   1a88e:	b011      	add	sp, #68	; 0x44
   1a890:	ecbd 8b02 	vpop	{d8}
   1a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a898:	00000000 	.word	0x00000000
   1a89c:	3ff00000 	.word	0x3ff00000
   1a8a0:	3cb00000 	.word	0x3cb00000
   1a8a4:	00000000 	.word	0x00000000

0001a8a8 <thornton_dbl>:
   1a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8ac:	ed2d 8b02 	vpush	{d8}
   1a8b0:	b09d      	sub	sp, #116	; 0x74
   1a8b2:	af00      	add	r7, sp, #0
   1a8b4:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   1a8b8:	603b      	str	r3, [r7, #0]
   1a8ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1a8be:	6578      	str	r0, [r7, #84]	; 0x54
   1a8c0:	667b      	str	r3, [r7, #100]	; 0x64
   1a8c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1a8c6:	6279      	str	r1, [r7, #36]	; 0x24
   1a8c8:	2300      	movs	r3, #0
   1a8ca:	637a      	str	r2, [r7, #52]	; 0x34
   1a8cc:	4619      	mov	r1, r3
   1a8ce:	b28a      	uxth	r2, r1
   1a8d0:	4593      	cmp	fp, r2
   1a8d2:	d856      	bhi.n	1a982 <thornton_dbl+0xda>
   1a8d4:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   1a8d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a8da:	b224      	sxth	r4, r4
   1a8dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1a8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a8e2:	65fc      	str	r4, [r7, #92]	; 0x5c
   1a8e4:	2300      	movs	r3, #0
   1a8e6:	65bb      	str	r3, [r7, #88]	; 0x58
   1a8e8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   1a8ec:	455b      	cmp	r3, fp
   1a8ee:	db4e      	blt.n	1a98e <thornton_dbl+0xe6>
   1a8f0:	fb0b f304 	mul.w	r3, fp, r4
   1a8f4:	643b      	str	r3, [r7, #64]	; 0x40
   1a8f6:	ea6f 030b 	mvn.w	r3, fp
   1a8fa:	00db      	lsls	r3, r3, #3
   1a8fc:	60bb      	str	r3, [r7, #8]
   1a8fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a902:	f10b 0301 	add.w	r3, fp, #1
   1a906:	63bb      	str	r3, [r7, #56]	; 0x38
   1a908:	4363      	muls	r3, r4
   1a90a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a910:	f06f 0307 	mvn.w	r3, #7
   1a914:	fb03 f30b 	mul.w	r3, r3, fp
   1a918:	607b      	str	r3, [r7, #4]
   1a91a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a91c:	4363      	muls	r3, r4
   1a91e:	65bb      	str	r3, [r7, #88]	; 0x58
   1a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a922:	00db      	lsls	r3, r3, #3
   1a924:	62bb      	str	r3, [r7, #40]	; 0x28
   1a926:	2300      	movs	r3, #0
   1a928:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a92a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1a92c:	330e      	adds	r3, #14
   1a92e:	08db      	lsrs	r3, r3, #3
   1a930:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 1abf8 <thornton_dbl+0x350>
   1a934:	00db      	lsls	r3, r3, #3
   1a936:	653b      	str	r3, [r7, #80]	; 0x50
   1a938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1a93a:	041b      	lsls	r3, r3, #16
   1a93c:	d56b      	bpl.n	1aa16 <thornton_dbl+0x16e>
   1a93e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 1abf8 <thornton_dbl+0x350>
   1a942:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1ac04 <thornton_dbl+0x35c>
   1a946:	2100      	movs	r1, #0
   1a948:	f04f 0800 	mov.w	r8, #0
   1a94c:	b20a      	sxth	r2, r1
   1a94e:	455a      	cmp	r2, fp
   1a950:	f2c0 81a3 	blt.w	1ac9a <thornton_dbl+0x3f2>
   1a954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a956:	f04f 0000 	mov.w	r0, #0
   1a95a:	f363 0000 	bfi	r0, r3, #0, #1
   1a95e:	3774      	adds	r7, #116	; 0x74
   1a960:	46bd      	mov	sp, r7
   1a962:	ecbd 8b02 	vpop	{d8}
   1a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a96a:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   1a96e:	e8e4 8902 	strd	r8, r9, [r4], #8
   1a972:	3201      	adds	r2, #1
   1a974:	b296      	uxth	r6, r2
   1a976:	45b3      	cmp	fp, r6
   1a978:	d8f7      	bhi.n	1a96a <thornton_dbl+0xc2>
   1a97a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1a97c:	3101      	adds	r1, #1
   1a97e:	4413      	add	r3, r2
   1a980:	e7a5      	b.n	1a8ce <thornton_dbl+0x26>
   1a982:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a986:	18c5      	adds	r5, r0, r3
   1a988:	18d4      	adds	r4, r2, r3
   1a98a:	2200      	movs	r2, #0
   1a98c:	e7f2      	b.n	1a974 <thornton_dbl+0xcc>
   1a98e:	fb0b f303 	mul.w	r3, fp, r3
   1a992:	191d      	adds	r5, r3, r4
   1a994:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a998:	3501      	adds	r5, #1
   1a99a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   1a99e:	663a      	str	r2, [r7, #96]	; 0x60
   1a9a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1a9a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a9a8:	653b      	str	r3, [r7, #80]	; 0x50
   1a9aa:	4626      	mov	r6, r4
   1a9ac:	f04f 0800 	mov.w	r8, #0
   1a9b0:	2e00      	cmp	r6, #0
   1a9b2:	da02      	bge.n	1a9ba <thornton_dbl+0x112>
   1a9b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1a9b6:	3301      	adds	r3, #1
   1a9b8:	e795      	b.n	1a8e6 <thornton_dbl+0x3e>
   1a9ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a9bc:	ed13 7b02 	vldr	d7, [r3, #-8]
   1a9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a9c2:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   1a9c6:	eb08 0a03 	add.w	sl, r8, r3
   1a9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a9cc:	f04f 0900 	mov.w	r9, #0
   1a9d0:	461d      	mov	r5, r3
   1a9d2:	fa0f f389 	sxth.w	r3, r9
   1a9d6:	429e      	cmp	r6, r3
   1a9d8:	dc0a      	bgt.n	1a9f0 <thornton_dbl+0x148>
   1a9da:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1a9de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1a9e0:	ed23 7b02 	vstmdb	r3!, {d7}
   1a9e4:	3e01      	subs	r6, #1
   1a9e6:	663b      	str	r3, [r7, #96]	; 0x60
   1a9e8:	b236      	sxth	r6, r6
   1a9ea:	f1a8 0808 	sub.w	r8, r8, #8
   1a9ee:	e7df      	b.n	1a9b0 <thornton_dbl+0x108>
   1a9f0:	e9da 2300 	ldrd	r2, r3, [sl]
   1a9f4:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1a9f8:	f007 f830 	bl	21a5c <__aeabi_dmul>
   1a9fc:	460b      	mov	r3, r1
   1a9fe:	4602      	mov	r2, r0
   1aa00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1aa04:	f006 fe74 	bl	216f0 <__adddf3>
   1aa08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1aa0a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1aa0e:	f109 0901 	add.w	r9, r9, #1
   1aa12:	449a      	add	sl, r3
   1aa14:	e7dd      	b.n	1a9d2 <thornton_dbl+0x12a>
   1aa16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1aa18:	f8c7 d020 	str.w	sp, [r7, #32]
   1aa1c:	ebad 0d03 	sub.w	sp, sp, r3
   1aa20:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   1aa24:	ebad 0d03 	sub.w	sp, sp, r3
   1aa28:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1aa2c:	ebad 0d03 	sub.w	sp, sp, r3
   1aa30:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   1aa34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1aa38:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1aa3a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   1aa3c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   1aa40:	ebad 0d03 	sub.w	sp, sp, r3
   1aa44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1aa46:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   1aa4a:	4413      	add	r3, r2
   1aa4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1aa4e:	663b      	str	r3, [r7, #96]	; 0x60
   1aa50:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   1aa54:	4623      	mov	r3, r4
   1aa56:	4413      	add	r3, r2
   1aa58:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   1aa5a:	60fb      	str	r3, [r7, #12]
   1aa5c:	68fb      	ldr	r3, [r7, #12]
   1aa5e:	429c      	cmp	r4, r3
   1aa60:	d137      	bne.n	1aad2 <thornton_dbl+0x22a>
   1aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1aa64:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1aa66:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1aa68:	683d      	ldr	r5, [r7, #0]
   1aa6a:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   1aa6e:	189e      	adds	r6, r3, r2
   1aa70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1aa72:	4623      	mov	r3, r4
   1aa74:	4413      	add	r3, r2
   1aa76:	60fb      	str	r3, [r7, #12]
   1aa78:	68fb      	ldr	r3, [r7, #12]
   1aa7a:	429c      	cmp	r4, r3
   1aa7c:	d146      	bne.n	1ab0c <thornton_dbl+0x264>
   1aa7e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   1aa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aa84:	ec51 0b17 	vmov	r0, r1, d7
   1aa88:	ed83 7b00 	vstr	d7, [r3]
   1aa8c:	2200      	movs	r2, #0
   1aa8e:	4b5c      	ldr	r3, [pc, #368]	; (1ac00 <thornton_dbl+0x358>)
   1aa90:	f007 fa60 	bl	21f54 <__aeabi_dcmple>
   1aa94:	2800      	cmp	r0, #0
   1aa96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1aa98:	495a      	ldr	r1, [pc, #360]	; (1ac04 <thornton_dbl+0x35c>)
   1aa9a:	bf18      	it	ne
   1aa9c:	2301      	movne	r3, #1
   1aa9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   1aaa0:	2000      	movs	r0, #0
   1aaa2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1aaa6:	f007 f903 	bl	21cb0 <__aeabi_ddiv>
   1aaaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1aaac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1aaae:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1aab2:	fa12 fa83 	uxtah	sl, r2, r3
   1aab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1aaba:	2600      	movs	r6, #0
   1aabc:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   1aac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1aac2:	4553      	cmp	r3, sl
   1aac4:	f000 80d7 	beq.w	1ac76 <thornton_dbl+0x3ce>
   1aac8:	f04f 0800 	mov.w	r8, #0
   1aacc:	ec55 4b18 	vmov	r4, r5, d8
   1aad0:	e04f      	b.n	1ab72 <thornton_dbl+0x2ca>
   1aad2:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1aad6:	e9d5 2300 	ldrd	r2, r3, [r5]
   1aada:	e8e4 8902 	strd	r8, r9, [r4], #8
   1aade:	4640      	mov	r0, r8
   1aae0:	4649      	mov	r1, r9
   1aae2:	f006 ffbb 	bl	21a5c <__aeabi_dmul>
   1aae6:	4602      	mov	r2, r0
   1aae8:	460b      	mov	r3, r1
   1aaea:	e8ea 2302 	strd	r2, r3, [sl], #8
   1aaee:	4640      	mov	r0, r8
   1aaf0:	4649      	mov	r1, r9
   1aaf2:	f006 ffb3 	bl	21a5c <__aeabi_dmul>
   1aaf6:	460b      	mov	r3, r1
   1aaf8:	4602      	mov	r2, r0
   1aafa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1aafe:	f006 fdf7 	bl	216f0 <__adddf3>
   1ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ab04:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1ab08:	441d      	add	r5, r3
   1ab0a:	e7a7      	b.n	1aa5c <thornton_dbl+0x1b4>
   1ab0c:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   1ab10:	e9d5 2300 	ldrd	r2, r3, [r5]
   1ab14:	e8e4 8902 	strd	r8, r9, [r4], #8
   1ab18:	4640      	mov	r0, r8
   1ab1a:	4649      	mov	r1, r9
   1ab1c:	f006 ff9e 	bl	21a5c <__aeabi_dmul>
   1ab20:	4602      	mov	r2, r0
   1ab22:	460b      	mov	r3, r1
   1ab24:	e8ea 2302 	strd	r2, r3, [sl], #8
   1ab28:	4640      	mov	r0, r8
   1ab2a:	4649      	mov	r1, r9
   1ab2c:	f006 ff96 	bl	21a5c <__aeabi_dmul>
   1ab30:	460b      	mov	r3, r1
   1ab32:	4602      	mov	r2, r0
   1ab34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1ab38:	f006 fdda 	bl	216f0 <__adddf3>
   1ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ab3e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   1ab42:	441d      	add	r5, r3
   1ab44:	e798      	b.n	1aa78 <thornton_dbl+0x1d0>
   1ab46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ab4a:	18f1      	adds	r1, r6, r3
   1ab4c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1ab50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ab5a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ab5e:	f006 ff7d 	bl	21a5c <__aeabi_dmul>
   1ab62:	4602      	mov	r2, r0
   1ab64:	460b      	mov	r3, r1
   1ab66:	4620      	mov	r0, r4
   1ab68:	4629      	mov	r1, r5
   1ab6a:	f006 fdc1 	bl	216f0 <__adddf3>
   1ab6e:	4604      	mov	r4, r0
   1ab70:	460d      	mov	r5, r1
   1ab72:	fa0f f388 	sxth.w	r3, r8
   1ab76:	455b      	cmp	r3, fp
   1ab78:	f108 0801 	add.w	r8, r8, #1
   1ab7c:	dbe3      	blt.n	1ab46 <thornton_dbl+0x29e>
   1ab7e:	f04f 0800 	mov.w	r8, #0
   1ab82:	fa0f f388 	sxth.w	r3, r8
   1ab86:	455b      	cmp	r3, fp
   1ab88:	f108 0801 	add.w	r8, r8, #1
   1ab8c:	db1d      	blt.n	1abca <thornton_dbl+0x322>
   1ab8e:	4620      	mov	r0, r4
   1ab90:	4629      	mov	r1, r5
   1ab92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   1ab96:	f006 ff61 	bl	21a5c <__aeabi_dmul>
   1ab9a:	f04f 0900 	mov.w	r9, #0
   1ab9e:	4604      	mov	r4, r0
   1aba0:	460d      	mov	r5, r1
   1aba2:	fa0f f389 	sxth.w	r3, r9
   1aba6:	455b      	cmp	r3, fp
   1aba8:	f109 0901 	add.w	r9, r9, #1
   1abac:	db2c      	blt.n	1ac08 <thornton_dbl+0x360>
   1abae:	f04f 0900 	mov.w	r9, #0
   1abb2:	fa0f f389 	sxth.w	r3, r9
   1abb6:	455b      	cmp	r3, fp
   1abb8:	f109 0901 	add.w	r9, r9, #1
   1abbc:	db40      	blt.n	1ac40 <thornton_dbl+0x398>
   1abbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1abc0:	e8e3 4502 	strd	r4, r5, [r3], #8
   1abc4:	445e      	add	r6, fp
   1abc6:	663b      	str	r3, [r7, #96]	; 0x60
   1abc8:	e77a      	b.n	1aac0 <thornton_dbl+0x218>
   1abca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1abcc:	18f1      	adds	r1, r6, r3
   1abce:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   1abd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1abd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1abe0:	f006 ff3c 	bl	21a5c <__aeabi_dmul>
   1abe4:	4602      	mov	r2, r0
   1abe6:	460b      	mov	r3, r1
   1abe8:	4620      	mov	r0, r4
   1abea:	4629      	mov	r1, r5
   1abec:	f006 fd80 	bl	216f0 <__adddf3>
   1abf0:	4604      	mov	r4, r0
   1abf2:	460d      	mov	r5, r1
   1abf4:	e7c5      	b.n	1ab82 <thornton_dbl+0x2da>
   1abf6:	bf00      	nop
	...
   1ac00:	3cb00000 	.word	0x3cb00000
   1ac04:	3ff00000 	.word	0x3ff00000
   1ac08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ac0c:	61bc      	str	r4, [r7, #24]
   1ac0e:	eb06 0803 	add.w	r8, r6, r3
   1ac12:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1ac16:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1ac18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ac1c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1ac20:	61fa      	str	r2, [r7, #28]
   1ac22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ac2a:	f006 ff17 	bl	21a5c <__aeabi_dmul>
   1ac2e:	4602      	mov	r2, r0
   1ac30:	460b      	mov	r3, r1
   1ac32:	e9d8 0100 	ldrd	r0, r1, [r8]
   1ac36:	f006 fd5b 	bl	216f0 <__adddf3>
   1ac3a:	e9c8 0100 	strd	r0, r1, [r8]
   1ac3e:	e7b0      	b.n	1aba2 <thornton_dbl+0x2fa>
   1ac40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ac42:	613c      	str	r4, [r7, #16]
   1ac44:	eb06 0803 	add.w	r8, r6, r3
   1ac48:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   1ac4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1ac4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ac52:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   1ac56:	617a      	str	r2, [r7, #20]
   1ac58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ac60:	f006 fefc 	bl	21a5c <__aeabi_dmul>
   1ac64:	4602      	mov	r2, r0
   1ac66:	460b      	mov	r3, r1
   1ac68:	e9d8 0100 	ldrd	r0, r1, [r8]
   1ac6c:	f006 fd40 	bl	216f0 <__adddf3>
   1ac70:	e9c8 0100 	strd	r0, r1, [r8]
   1ac74:	e79d      	b.n	1abb2 <thornton_dbl+0x30a>
   1ac76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ac78:	68ba      	ldr	r2, [r7, #8]
   1ac7a:	f8d7 d020 	ldr.w	sp, [r7, #32]
   1ac7e:	3b01      	subs	r3, #1
   1ac80:	65fb      	str	r3, [r7, #92]	; 0x5c
   1ac82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ac84:	eba3 030b 	sub.w	r3, r3, fp
   1ac88:	643b      	str	r3, [r7, #64]	; 0x40
   1ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ac8c:	4413      	add	r3, r2
   1ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ac90:	687a      	ldr	r2, [r7, #4]
   1ac92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1ac94:	4413      	add	r3, r2
   1ac96:	65bb      	str	r3, [r7, #88]	; 0x58
   1ac98:	e64e      	b.n	1a938 <thornton_dbl+0x90>
   1ac9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ac9c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1aca0:	4353      	muls	r3, r2
   1aca2:	00db      	lsls	r3, r3, #3
   1aca4:	4418      	add	r0, r3
   1aca6:	e9d0 4500 	ldrd	r4, r5, [r0]
   1acaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1acac:	4418      	add	r0, r3
   1acae:	e9c0 4500 	strd	r4, r5, [r0]
   1acb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1acb4:	4403      	add	r3, r0
   1acb6:	e9c3 8900 	strd	r8, r9, [r3]
   1acba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1acbe:	fb0b f302 	mul.w	r3, fp, r2
   1acc2:	00db      	lsls	r3, r3, #3
   1acc4:	18c5      	adds	r5, r0, r3
   1acc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1acc8:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   1accc:	4403      	add	r3, r0
   1acce:	2000      	movs	r0, #0
   1acd0:	b206      	sxth	r6, r0
   1acd2:	42b2      	cmp	r2, r6
   1acd4:	dc01      	bgt.n	1acda <thornton_dbl+0x432>
   1acd6:	3101      	adds	r1, #1
   1acd8:	e638      	b.n	1a94c <thornton_dbl+0xa4>
   1acda:	ecb5 7b02 	vldmia	r5!, {d7}
   1acde:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   1ace0:	ed84 7b00 	vstr	d7, [r4]
   1ace4:	3001      	adds	r0, #1
   1ace6:	eca3 6b02 	vstmia	r3!, {d6}
   1acea:	4434      	add	r4, r6
   1acec:	e7f0      	b.n	1acd0 <thornton_dbl+0x428>
   1acee:	bf00      	nop

0001acf0 <bierman_dbl>:
   1acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acf4:	ed2d 8b04 	vpush	{d8-d9}
   1acf8:	eeb0 8a40 	vmov.f32	s16, s0
   1acfc:	eef0 8a60 	vmov.f32	s17, s1
   1ad00:	b095      	sub	sp, #84	; 0x54
   1ad02:	af00      	add	r7, sp, #0
   1ad04:	4682      	mov	sl, r0
   1ad06:	62bb      	str	r3, [r7, #40]	; 0x28
   1ad08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   1ad0c:	637b      	str	r3, [r7, #52]	; 0x34
   1ad0e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1ad12:	f10b 030e 	add.w	r3, fp, #14
   1ad16:	08db      	lsrs	r3, r3, #3
   1ad18:	00db      	lsls	r3, r3, #3
   1ad1a:	ebad 0d03 	sub.w	sp, sp, r3
   1ad1e:	466c      	mov	r4, sp
   1ad20:	6079      	str	r1, [r7, #4]
   1ad22:	ebad 0d03 	sub.w	sp, sp, r3
   1ad26:	61ba      	str	r2, [r7, #24]
   1ad28:	2000      	movs	r0, #0
   1ad2a:	ec53 2b11 	vmov	r2, r3, d1
   1ad2e:	4970      	ldr	r1, [pc, #448]	; (1aef0 <bierman_dbl+0x200>)
   1ad30:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   1ad34:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   1ad38:	f006 ffba 	bl	21cb0 <__aeabi_ddiv>
   1ad3c:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 1aee8 <bierman_dbl+0x1f8>
   1ad40:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1ad44:	eb0a 030b 	add.w	r3, sl, fp
   1ad48:	627c      	str	r4, [r7, #36]	; 0x24
   1ad4a:	643b      	str	r3, [r7, #64]	; 0x40
   1ad4c:	4626      	mov	r6, r4
   1ad4e:	2500      	movs	r5, #0
   1ad50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ad52:	b2ab      	uxth	r3, r5
   1ad54:	429a      	cmp	r2, r3
   1ad56:	d820      	bhi.n	1ad9a <bierman_dbl+0xaa>
   1ad58:	f10b 0308 	add.w	r3, fp, #8
   1ad5c:	61fb      	str	r3, [r7, #28]
   1ad5e:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   1ad62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ad64:	633b      	str	r3, [r7, #48]	; 0x30
   1ad66:	eb04 060b 	add.w	r6, r4, fp
   1ad6a:	461d      	mov	r5, r3
   1ad6c:	46d0      	mov	r8, sl
   1ad6e:	42b4      	cmp	r4, r6
   1ad70:	d12e      	bne.n	1add0 <bierman_dbl+0xe0>
   1ad72:	2300      	movs	r3, #0
   1ad74:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   1ad76:	643b      	str	r3, [r7, #64]	; 0x40
   1ad78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   1ad7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ad7e:	429a      	cmp	r2, r3
   1ad80:	d831      	bhi.n	1ade6 <bierman_dbl+0xf6>
   1ad82:	687e      	ldr	r6, [r7, #4]
   1ad84:	eb06 0a0b 	add.w	sl, r6, fp
   1ad88:	4556      	cmp	r6, sl
   1ad8a:	f040 8095 	bne.w	1aeb8 <bierman_dbl+0x1c8>
   1ad8e:	3754      	adds	r7, #84	; 0x54
   1ad90:	46bd      	mov	sp, r7
   1ad92:	ecbd 8b04 	vpop	{d8-d9}
   1ad96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad9a:	69bb      	ldr	r3, [r7, #24]
   1ad9c:	eca6 9b02 	vstmia	r6!, {d9}
   1ada0:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   1ada4:	46d0      	mov	r8, sl
   1ada6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ada8:	4598      	cmp	r8, r3
   1adaa:	d101      	bne.n	1adb0 <bierman_dbl+0xc0>
   1adac:	3501      	adds	r5, #1
   1adae:	e7cf      	b.n	1ad50 <bierman_dbl+0x60>
   1adb0:	e9d9 2300 	ldrd	r2, r3, [r9]
   1adb4:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1adb8:	f006 fe50 	bl	21a5c <__aeabi_dmul>
   1adbc:	4602      	mov	r2, r0
   1adbe:	460b      	mov	r3, r1
   1adc0:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   1adc4:	f006 fc94 	bl	216f0 <__adddf3>
   1adc8:	44d9      	add	r9, fp
   1adca:	e946 0102 	strd	r0, r1, [r6, #-8]
   1adce:	e7ea      	b.n	1ada6 <bierman_dbl+0xb6>
   1add0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1add4:	e9d8 0100 	ldrd	r0, r1, [r8]
   1add8:	f006 fe40 	bl	21a5c <__aeabi_dmul>
   1addc:	69fb      	ldr	r3, [r7, #28]
   1adde:	e8e5 0102 	strd	r0, r1, [r5], #8
   1ade2:	4498      	add	r8, r3
   1ade4:	e7c3      	b.n	1ad6e <bierman_dbl+0x7e>
   1ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ade8:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1adec:	627b      	str	r3, [r7, #36]	; 0x24
   1adee:	f104 0308 	add.w	r3, r4, #8
   1adf2:	623b      	str	r3, [r7, #32]
   1adf4:	4640      	mov	r0, r8
   1adf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1adfa:	4649      	mov	r1, r9
   1adfc:	f006 fe2e 	bl	21a5c <__aeabi_dmul>
   1ae00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1ae04:	f006 fc74 	bl	216f0 <__adddf3>
   1ae08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1ae0c:	617b      	str	r3, [r7, #20]
   1ae0e:	f8c7 8010 	str.w	r8, [r7, #16]
   1ae12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1ae16:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   1ae1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1ae1e:	f006 fe1d 	bl	21a5c <__aeabi_dmul>
   1ae22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1ae26:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1ae2a:	2000      	movs	r0, #0
   1ae2c:	4930      	ldr	r1, [pc, #192]	; (1aef0 <bierman_dbl+0x200>)
   1ae2e:	f006 ff3f 	bl	21cb0 <__aeabi_ddiv>
   1ae32:	4602      	mov	r2, r0
   1ae34:	460b      	mov	r3, r1
   1ae36:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   1ae3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1ae3e:	f006 fe0d 	bl	21a5c <__aeabi_dmul>
   1ae42:	4602      	mov	r2, r0
   1ae44:	460b      	mov	r3, r1
   1ae46:	e9da 0100 	ldrd	r0, r1, [sl]
   1ae4a:	f006 fe07 	bl	21a5c <__aeabi_dmul>
   1ae4e:	69bb      	ldr	r3, [r7, #24]
   1ae50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ae52:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   1ae54:	e9ca 0100 	strd	r0, r1, [sl]
   1ae58:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   1ae5c:	42a5      	cmp	r5, r4
   1ae5e:	d10a      	bne.n	1ae76 <bierman_dbl+0x186>
   1ae60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ae62:	6a3c      	ldr	r4, [r7, #32]
   1ae64:	3301      	adds	r3, #1
   1ae66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   1ae6a:	643b      	str	r3, [r7, #64]	; 0x40
   1ae6c:	69fb      	ldr	r3, [r7, #28]
   1ae6e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1ae72:	449a      	add	sl, r3
   1ae74:	e780      	b.n	1ad78 <bierman_dbl+0x88>
   1ae76:	e9d5 8900 	ldrd	r8, r9, [r5]
   1ae7a:	ed96 7b00 	vldr	d7, [r6]
   1ae7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1ae82:	4640      	mov	r0, r8
   1ae84:	4649      	mov	r1, r9
   1ae86:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   1ae8a:	f006 fde7 	bl	21a5c <__aeabi_dmul>
   1ae8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1ae92:	f006 fc2d 	bl	216f0 <__adddf3>
   1ae96:	6a3b      	ldr	r3, [r7, #32]
   1ae98:	e9c6 0100 	strd	r0, r1, [r6]
   1ae9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1aea0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1aea4:	f006 fdda 	bl	21a5c <__aeabi_dmul>
   1aea8:	4642      	mov	r2, r8
   1aeaa:	464b      	mov	r3, r9
   1aeac:	f006 fc20 	bl	216f0 <__adddf3>
   1aeb0:	445e      	add	r6, fp
   1aeb2:	e8e5 0102 	strd	r0, r1, [r5], #8
   1aeb6:	e7d1      	b.n	1ae5c <bierman_dbl+0x16c>
   1aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aeba:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   1aebe:	e9d6 4500 	ldrd	r4, r5, [r6]
   1aec2:	633b      	str	r3, [r7, #48]	; 0x30
   1aec4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   1aec8:	ec53 2b18 	vmov	r2, r3, d8
   1aecc:	f006 fdc6 	bl	21a5c <__aeabi_dmul>
   1aed0:	4642      	mov	r2, r8
   1aed2:	464b      	mov	r3, r9
   1aed4:	f006 fdc2 	bl	21a5c <__aeabi_dmul>
   1aed8:	4622      	mov	r2, r4
   1aeda:	462b      	mov	r3, r5
   1aedc:	f006 fc08 	bl	216f0 <__adddf3>
   1aee0:	e8e6 0102 	strd	r0, r1, [r6], #8
   1aee4:	e750      	b.n	1ad88 <bierman_dbl+0x98>
   1aee6:	bf00      	nop
	...
   1aef0:	3ff00000 	.word	0x3ff00000

0001aef4 <reset_cb>:
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1aef4:	b508      	push	{r3, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1aef6:	6848      	ldr	r0, [r1, #4]
   1aef8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
   1aefc:	b10b      	cbz	r3, 1af02 <reset_cb+0xe>
        assert(err == DPL_OK);
        SS_STATS_INC(reset);
        return true;
    }
    else
        return false;
   1aefe:	2000      	movs	r0, #0
}
   1af00:	bd08      	pop	{r3, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   1af02:	3064      	adds	r0, #100	; 0x64
   1af04:	f7f3 fa22 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   1af08:	b928      	cbnz	r0, 1af16 <reset_cb+0x22>
        SS_STATS_INC(reset);
   1af0a:	4a06      	ldr	r2, [pc, #24]	; (1af24 <reset_cb+0x30>)
   1af0c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1af0e:	3301      	adds	r3, #1
   1af10:	6253      	str	r3, [r2, #36]	; 0x24
        return true;
   1af12:	2001      	movs	r0, #1
   1af14:	e7f4      	b.n	1af00 <reset_cb+0xc>
        assert(err == DPL_OK);
   1af16:	2300      	movs	r3, #0
   1af18:	461a      	mov	r2, r3
   1af1a:	4619      	mov	r1, r3
   1af1c:	4618      	mov	r0, r3
   1af1e:	f7f2 fa1f 	bl	d360 <__assert_func>
   1af22:	bf00      	nop
   1af24:	20006da8 	.word	0x20006da8

0001af28 <rx_error_cb>:
{
   1af28:	b508      	push	{r3, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1af2a:	6849      	ldr	r1, [r1, #4]
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1af2c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1af30:	f648 0341 	movw	r3, #34881	; 0x8841
   1af34:	429a      	cmp	r2, r3
   1af36:	d115      	bne.n	1af64 <rx_error_cb+0x3c>
   1af38:	f8b1 306a 	ldrh.w	r3, [r1, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
   1af3c:	b10b      	cbz	r3, 1af42 <rx_error_cb+0x1a>
    return false;
   1af3e:	2000      	movs	r0, #0
   1af40:	e011      	b.n	1af66 <rx_error_cb+0x3e>
        SS_STATS_INC(rx_error);
   1af42:	4a09      	ldr	r2, [pc, #36]	; (1af68 <rx_error_cb+0x40>)
   1af44:	6953      	ldr	r3, [r2, #20]
   1af46:	3301      	adds	r3, #1
   1af48:	6153      	str	r3, [r2, #20]
   1af4a:	f101 0064 	add.w	r0, r1, #100	; 0x64
   1af4e:	f7f3 f9fd 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   1af52:	b908      	cbnz	r0, 1af58 <rx_error_cb+0x30>
        return true;
   1af54:	2001      	movs	r0, #1
   1af56:	e006      	b.n	1af66 <rx_error_cb+0x3e>
        assert(err == DPL_OK);
   1af58:	2300      	movs	r3, #0
   1af5a:	461a      	mov	r2, r3
   1af5c:	4619      	mov	r1, r3
   1af5e:	4618      	mov	r0, r3
   1af60:	f7f2 f9fe 	bl	d360 <__assert_func>
        return false;
   1af64:	2000      	movs	r0, #0
}
   1af66:	bd08      	pop	{r3, pc}
   1af68:	20006da8 	.word	0x20006da8

0001af6c <rx_timeout_cb>:
{
   1af6c:	b570      	push	{r4, r5, r6, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1af6e:	684e      	ldr	r6, [r1, #4]
   1af70:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 1)
   1af74:	2b01      	cmp	r3, #1
   1af76:	d01f      	beq.n	1afb8 <rx_timeout_cb+0x4c>
   1af78:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&nrng->sem) == 0){
   1af7a:	b9fb      	cbnz	r3, 1afbc <rx_timeout_cb+0x50>
        SS_STATS_INC(rx_timeout);
   1af7c:	4a10      	ldr	r2, [pc, #64]	; (1afc0 <rx_timeout_cb+0x54>)
   1af7e:	6993      	ldr	r3, [r2, #24]
   1af80:	3301      	adds	r3, #1
   1af82:	6193      	str	r3, [r2, #24]
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   1af84:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
   1af88:	b93c      	cbnz	r4, 1af9a <rx_timeout_cb+0x2e>
   1af8a:	f106 0064 	add.w	r0, r6, #100	; 0x64
   1af8e:	f7f3 f9dd 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   1af92:	b958      	cbnz	r0, 1afac <rx_timeout_cb+0x40>
    return true;
   1af94:	2001      	movs	r0, #1
   1af96:	e012      	b.n	1afbe <rx_timeout_cb+0x52>
            SLIST_FOREACH(cbs, &inst->interface_cbs, next){
   1af98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1af9a:	2c00      	cmp	r4, #0
   1af9c:	d0f5      	beq.n	1af8a <rx_timeout_cb+0x1e>
            if (cbs!=NULL && cbs->complete_cb)
   1af9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1afa0:	2b00      	cmp	r3, #0
   1afa2:	d0f9      	beq.n	1af98 <rx_timeout_cb+0x2c>
                if(cbs->complete_cb(inst, cbs)) continue;
   1afa4:	4621      	mov	r1, r4
   1afa6:	4628      	mov	r0, r5
   1afa8:	4798      	blx	r3
   1afaa:	e7f5      	b.n	1af98 <rx_timeout_cb+0x2c>
        assert(err == DPL_OK);
   1afac:	2300      	movs	r3, #0
   1afae:	461a      	mov	r2, r3
   1afb0:	4619      	mov	r1, r3
   1afb2:	4618      	mov	r0, r3
   1afb4:	f7f2 f9d4 	bl	d360 <__assert_func>
        return false;
   1afb8:	2000      	movs	r0, #0
   1afba:	e000      	b.n	1afbe <rx_timeout_cb+0x52>
    return true;
   1afbc:	2001      	movs	r0, #1
}
   1afbe:	bd70      	pop	{r4, r5, r6, pc}
   1afc0:	20006da8 	.word	0x20006da8
   1afc4:	00000000 	.word	0x00000000

0001afc8 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afcc:	ed2d 8b02 	vpush	{d8}
   1afd0:	b087      	sub	sp, #28
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   1afd2:	684d      	ldr	r5, [r1, #4]

    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   1afd4:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1afd8:	f648 0341 	movw	r3, #34881	; 0x8841
   1afdc:	429a      	cmp	r2, r3
   1afde:	f040 81b1 	bne.w	1b344 <rx_complete_cb+0x37c>
   1afe2:	4604      	mov	r4, r0
   1afe4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 1){
   1afe8:	2b01      	cmp	r3, #1
   1afea:	d022      	beq.n	1b032 <rx_complete_cb+0x6a>
        // unsolicited inbound
        SS_STATS_INC(rx_unsolicited);
        return false;
    }

    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   1afec:	f44f 7198 	mov.w	r1, #304	; 0x130
   1aff0:	4628      	mov	r0, r5
   1aff2:	f7fe f979 	bl	192e8 <nrng_get_config>
   1aff6:	4680      	mov	r8, r0
    nrng_request_frame_t * _frame = (nrng_request_frame_t * )inst->rxbuf;
   1aff8:	f8d4 64fc 	ldr.w	r6, [r4, #1276]	; 0x4fc

    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   1affc:	f8b6 3005 	ldrh.w	r3, [r6, #5]
   1b000:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   1b004:	4293      	cmp	r3, r2
   1b006:	d004      	beq.n	1b012 <rx_complete_cb+0x4a>
   1b008:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b00c:	4293      	cmp	r3, r2
   1b00e:	f040 819f 	bne.w	1b350 <rx_complete_cb+0x388>
        return true;

    SS_STATS_INC(rx_complete);
   1b012:	4acb      	ldr	r2, [pc, #812]	; (1b340 <rx_complete_cb+0x378>)
   1b014:	69d3      	ldr	r3, [r2, #28]
   1b016:	3301      	adds	r3, #1
   1b018:	61d3      	str	r3, [r2, #28]

    switch(_frame->code){
   1b01a:	f8b6 3009 	ldrh.w	r3, [r6, #9]
   1b01e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   1b022:	d00c      	beq.n	1b03e <rx_complete_cb+0x76>
   1b024:	f240 1231 	movw	r2, #305	; 0x131
   1b028:	4293      	cmp	r3, r2
   1b02a:	f000 80f4 	beq.w	1b216 <rx_complete_cb+0x24e>
   1b02e:	2000      	movs	r0, #0
   1b030:	e189      	b.n	1b346 <rx_complete_cb+0x37e>
        SS_STATS_INC(rx_unsolicited);
   1b032:	4ac3      	ldr	r2, [pc, #780]	; (1b340 <rx_complete_cb+0x378>)
   1b034:	6a13      	ldr	r3, [r2, #32]
   1b036:	3301      	adds	r3, #1
   1b038:	6213      	str	r3, [r2, #32]
        return false;
   1b03a:	2000      	movs	r0, #0
   1b03c:	e183      	b.n	1b346 <rx_complete_cb+0x37e>
        case UWB_DATA_CODE_SS_TWR_NRNG:
            {
                // This code executes on the device that is responding to a request
                DIAGMSG("{\"utime\": %lu,\"msg\": \"UWB_DATA_CODE_SS_TWR_NRNG\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
                if (inst->frame_len < sizeof(nrng_request_frame_t))
   1b03e:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b042:	2b12      	cmp	r3, #18
   1b044:	f240 8186 	bls.w	1b354 <rx_complete_cb+0x38c>
                    break;
                uint16_t slot_idx;
#if MYNEWT_VAL(CELL_ENABLED)
                if (_frame->ptype != PTYPE_CELL)
   1b048:	7af3      	ldrb	r3, [r6, #11]
   1b04a:	f013 0f03 	tst.w	r3, #3
   1b04e:	f040 8183 	bne.w	1b358 <rx_complete_cb+0x390>
                    break;
                if (_frame->cell_id != inst->cell_id)
   1b052:	7bf3      	ldrb	r3, [r6, #15]
   1b054:	7c32      	ldrb	r2, [r6, #16]
   1b056:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1b05a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b05e:	f8b4 24c4 	ldrh.w	r2, [r4, #1220]	; 0x4c4
   1b062:	4293      	cmp	r3, r2
   1b064:	d001      	beq.n	1b06a <rx_complete_cb+0xa2>
            }
        default:
                return false;
            break;
        }
    return true;
   1b066:	2001      	movs	r0, #1
   1b068:	e16d      	b.n	1b346 <rx_complete_cb+0x37e>
                if (_frame->slot_mask & (1UL << inst->slot_id))
   1b06a:	7c33      	ldrb	r3, [r6, #16]
   1b06c:	7c70      	ldrb	r0, [r6, #17]
   1b06e:	0080      	lsls	r0, r0, #2
   1b070:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
   1b074:	7cb3      	ldrb	r3, [r6, #18]
   1b076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b07a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   1b07e:	f8b4 14c2 	ldrh.w	r1, [r4, #1218]	; 0x4c2
   1b082:	fa20 f301 	lsr.w	r3, r0, r1
   1b086:	f013 0f01 	tst.w	r3, #1
   1b08a:	d101      	bne.n	1b090 <rx_complete_cb+0xc8>
    return true;
   1b08c:	2001      	movs	r0, #1
   1b08e:	e15a      	b.n	1b346 <rx_complete_cb+0x37e>
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   1b090:	f04f 0b01 	mov.w	fp, #1
   1b094:	465a      	mov	r2, fp
   1b096:	fa0b f101 	lsl.w	r1, fp, r1
   1b09a:	f000 f9bb 	bl	1b414 <BitIndex>
   1b09e:	9001      	str	r0, [sp, #4]
   1b0a0:	f8bd 9004 	ldrh.w	r9, [sp, #4]
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   1b0a4:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
   1b0a8:	445b      	add	r3, fp
   1b0aa:	b29b      	uxth	r3, r3
   1b0ac:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
   1b0b0:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
   1b0b4:	fbb3 f1f2 	udiv	r1, r3, r2
   1b0b8:	fb02 3311 	mls	r3, r2, r1, r3
   1b0bc:	b29b      	uxth	r3, r3
   1b0be:	3332      	adds	r3, #50	; 0x32
   1b0c0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
                memcpy(frame->array, inst->rxbuf, sizeof(nrng_request_frame_t));
   1b0c4:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   1b0c8:	f8d3 c000 	ldr.w	ip, [r3]
   1b0cc:	6858      	ldr	r0, [r3, #4]
   1b0ce:	6899      	ldr	r1, [r3, #8]
   1b0d0:	68da      	ldr	r2, [r3, #12]
   1b0d2:	f8c7 c000 	str.w	ip, [r7]
   1b0d6:	6078      	str	r0, [r7, #4]
   1b0d8:	60b9      	str	r1, [r7, #8]
   1b0da:	60fa      	str	r2, [r7, #12]
   1b0dc:	8a1a      	ldrh	r2, [r3, #16]
   1b0de:	7c9b      	ldrb	r3, [r3, #18]
   1b0e0:	823a      	strh	r2, [r7, #16]
   1b0e2:	74bb      	strb	r3, [r7, #18]
                uint64_t request_timestamp = inst->rxtimestamp;
   1b0e4:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
   1b0e8:	9202      	str	r2, [sp, #8]
   1b0ea:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
   1b0ee:	9303      	str	r3, [sp, #12]
                            + (((uint64_t)config->tx_holdoff_delay
   1b0f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1b0f4:	9104      	str	r1, [sp, #16]
   1b0f6:	f04f 0a00 	mov.w	sl, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   1b0fa:	f8d8 8008 	ldr.w	r8, [r8, #8]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b102:	2114      	movs	r1, #20
   1b104:	4620      	mov	r0, r4
   1b106:	4798      	blx	r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   1b108:	f006 fc3e 	bl	21988 <__aeabi_i2d>
   1b10c:	a388      	add	r3, pc, #544	; (adr r3, 1b330 <rx_complete_cb+0x368>)
   1b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b112:	f006 fdcd 	bl	21cb0 <__aeabi_ddiv>
   1b116:	f007 f889 	bl	2222c <__aeabi_d2ulz>
   1b11a:	eb18 0300 	adds.w	r3, r8, r0
   1b11e:	f141 0100 	adc.w	r1, r1, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   1b122:	fba9 8303 	umull	r8, r3, r9, r3
   1b126:	fb09 3901 	mla	r9, r9, r1, r3
   1b12a:	9904      	ldr	r1, [sp, #16]
   1b12c:	eb11 0808 	adds.w	r8, r1, r8
   1b130:	f149 0900 	adc.w	r9, r9, #0
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   1b134:	ea4f 4909 	mov.w	r9, r9, lsl #16
   1b138:	ea49 4918 	orr.w	r9, r9, r8, lsr #16
   1b13c:	ea4f 4808 	mov.w	r8, r8, lsl #16
                uint64_t response_tx_delay = request_timestamp
   1b140:	9a02      	ldr	r2, [sp, #8]
   1b142:	eb18 0802 	adds.w	r8, r8, r2
   1b146:	9b03      	ldr	r3, [sp, #12]
   1b148:	eb49 0903 	adc.w	r9, r9, r3
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   1b14c:	f428 73ff 	bic.w	r3, r8, #510	; 0x1fe
   1b150:	f023 0301 	bic.w	r3, r3, #1
   1b154:	f009 01ff 	and.w	r1, r9, #255	; 0xff
   1b158:	f8b4 24ce 	ldrh.w	r2, [r4, #1230]	; 0x4ce
   1b15c:	1898      	adds	r0, r3, r2
   1b15e:	9004      	str	r0, [sp, #16]
   1b160:	f141 0100 	adc.w	r1, r1, #0
   1b164:	9105      	str	r1, [sp, #20]
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   1b166:	4659      	mov	r1, fp
   1b168:	4620      	mov	r0, r4
   1b16a:	f7ed fd16 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   1b16e:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   1b172:	9a02      	ldr	r2, [sp, #8]
   1b174:	9b03      	ldr	r3, [sp, #12]
   1b176:	4658      	mov	r0, fp
   1b178:	f7f6 f81e 	bl	111b8 <uwb_wcs_local_to_master>
   1b17c:	f8c7 000b 	str.w	r0, [r7, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   1b180:	9a04      	ldr	r2, [sp, #16]
   1b182:	9b05      	ldr	r3, [sp, #20]
   1b184:	4658      	mov	r0, fp
   1b186:	f7f6 f817 	bl	111b8 <uwb_wcs_local_to_master>
   1b18a:	f8c7 000f 	str.w	r0, [r7, #15]
                frame->dst_address = _frame->src_address;
   1b18e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1b192:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1b196:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b19a:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   1b19e:	2331      	movs	r3, #49	; 0x31
   1b1a0:	727b      	strb	r3, [r7, #9]
   1b1a2:	2301      	movs	r3, #1
   1b1a4:	72bb      	strb	r3, [r7, #10]
                frame->slot_id = slot_idx;
   1b1a6:	9b01      	ldr	r3, [sp, #4]
   1b1a8:	74fb      	strb	r3, [r7, #19]
                frame->seq_num = _frame->seq_num;
   1b1aa:	78b3      	ldrb	r3, [r6, #2]
   1b1ac:	70bb      	strb	r3, [r7, #2]
                frame->carrier_integrator  = 0.0l;
   1b1ae:	f887 a01c 	strb.w	sl, [r7, #28]
   1b1b2:	f887 a01d 	strb.w	sl, [r7, #29]
   1b1b6:	f887 a01e 	strb.w	sl, [r7, #30]
   1b1ba:	f887 a01f 	strb.w	sl, [r7, #31]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   1b1be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1c0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   1b1c2:	2314      	movs	r3, #20
   1b1c4:	4652      	mov	r2, sl
   1b1c6:	4639      	mov	r1, r7
   1b1c8:	4620      	mov	r0, r4
   1b1ca:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   1b1cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1ce:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   1b1d0:	4653      	mov	r3, sl
   1b1d2:	4652      	mov	r2, sl
   1b1d4:	2114      	movs	r1, #20
   1b1d6:	4620      	mov	r0, r4
   1b1d8:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   1b1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1b1de:	4651      	mov	r1, sl
   1b1e0:	4620      	mov	r0, r4
   1b1e2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1b1e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b1e8:	4642      	mov	r2, r8
   1b1ea:	464b      	mov	r3, r9
   1b1ec:	4620      	mov	r0, r4
   1b1ee:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   1b1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b1f4:	4620      	mov	r0, r4
   1b1f6:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   1b1f8:	f010 0f04 	tst.w	r0, #4
   1b1fc:	d005      	beq.n	1b20a <rx_complete_cb+0x242>
   1b1fe:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1b202:	f7f3 f8a3 	bl	e34c <os_sem_release>
    return true;
   1b206:	2001      	movs	r0, #1
   1b208:	e09d      	b.n	1b346 <rx_complete_cb+0x37e>
   1b20a:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1b20e:	f7f3 f89d 	bl	e34c <os_sem_release>
   1b212:	2001      	movs	r0, #1
   1b214:	e097      	b.n	1b346 <rx_complete_cb+0x37e>
                if (inst->frame_len < sizeof(nrng_response_frame_t))
   1b216:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b21a:	2b13      	cmp	r3, #19
   1b21c:	f240 809e 	bls.w	1b35c <rx_complete_cb+0x394>
                uint16_t idx = _frame->slot_id;
   1b220:	f896 9013 	ldrb.w	r9, [r6, #19]
   1b224:	fa1f fa89 	uxth.w	sl, r9
                if (nrng->seq_num != _frame->seq_num)
   1b228:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
   1b22c:	78b3      	ldrb	r3, [r6, #2]
   1b22e:	429a      	cmp	r2, r3
   1b230:	d001      	beq.n	1b236 <rx_complete_cb+0x26e>
    return true;
   1b232:	2001      	movs	r0, #1
   1b234:	e087      	b.n	1b346 <rx_complete_cb+0x37e>
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   1b236:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
   1b23a:	444b      	add	r3, r9
   1b23c:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
   1b240:	fb93 f1f2 	sdiv	r1, r3, r2
   1b244:	fb02 3311 	mls	r3, r2, r1, r3
   1b248:	3332      	adds	r3, #50	; 0x32
   1b24a:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   1b24e:	6833      	ldr	r3, [r6, #0]
   1b250:	6870      	ldr	r0, [r6, #4]
   1b252:	68b1      	ldr	r1, [r6, #8]
   1b254:	68f2      	ldr	r2, [r6, #12]
   1b256:	603b      	str	r3, [r7, #0]
   1b258:	6078      	str	r0, [r7, #4]
   1b25a:	60b9      	str	r1, [r7, #8]
   1b25c:	60fa      	str	r2, [r7, #12]
   1b25e:	6933      	ldr	r3, [r6, #16]
   1b260:	613b      	str	r3, [r7, #16]
                if (inst->status.lde_error == 0)
   1b262:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1b266:	f013 0f04 	tst.w	r3, #4
   1b26a:	d14c      	bne.n	1b306 <rx_complete_cb+0x33e>
                   response_timestamp = inst->rxtimestamp;
   1b26c:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
   1b270:	ed13 8b02 	vldr	d8, [r3, #-8]
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   1b274:	2101      	movs	r1, #1
   1b276:	4620      	mov	r0, r4
   1b278:	f7ed fc8f 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   1b27c:	6e86      	ldr	r6, [r0, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   1b27e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   1b282:	4620      	mov	r0, r4
   1b284:	4798      	blx	r3
   1b286:	4602      	mov	r2, r0
   1b288:	460b      	mov	r3, r1
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   1b28a:	4630      	mov	r0, r6
   1b28c:	f7f5 ff94 	bl	111b8 <uwb_wcs_local_to_master>
   1b290:	6178      	str	r0, [r7, #20]
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   1b292:	ec53 2b18 	vmov	r2, r3, d8
   1b296:	4630      	mov	r0, r6
   1b298:	f7f5 ff8e 	bl	111b8 <uwb_wcs_local_to_master>
   1b29c:	61b8      	str	r0, [r7, #24]
                frame->dst_address = frame->src_address;
   1b29e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   1b2a2:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   1b2a6:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b2aa:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   1b2ae:	2300      	movs	r3, #0
   1b2b0:	2232      	movs	r2, #50	; 0x32
   1b2b2:	727a      	strb	r2, [r7, #9]
   1b2b4:	2201      	movs	r2, #1
   1b2b6:	72ba      	strb	r2, [r7, #10]
                frame->carrier_integrator  = 0.0l;
   1b2b8:	773b      	strb	r3, [r7, #28]
   1b2ba:	777b      	strb	r3, [r7, #29]
   1b2bc:	77bb      	strb	r3, [r7, #30]
   1b2be:	77fb      	strb	r3, [r7, #31]
                if(inst->config.rxdiag_enable) {
   1b2c0:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1b2c4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b2c8:	d120      	bne.n	1b30c <rx_complete_cb+0x344>
                if(idx == nrng->nnodes-1){
   1b2ca:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
   1b2ce:	1e5a      	subs	r2, r3, #1
   1b2d0:	4591      	cmp	r9, r2
   1b2d2:	d023      	beq.n	1b31c <rx_complete_cb+0x354>
                    uint16_t timeout = usecs_to_response(inst,
   1b2d4:	eba3 030a 	sub.w	r3, r3, sl
   1b2d8:	b29d      	uxth	r5, r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   1b2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1b2de:	2114      	movs	r1, #20
   1b2e0:	4620      	mov	r0, r4
   1b2e2:	4798      	blx	r3
   1b2e4:	4603      	mov	r3, r0
   1b2e6:	4642      	mov	r2, r8
   1b2e8:	4629      	mov	r1, r5
   1b2ea:	4620      	mov	r0, r4
   1b2ec:	f7fe f92c 	bl	19548 <usecs_to_response>
                            ) + config->rx_timeout_delay;          // TOF allowance.
   1b2f0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
                    uint16_t timeout = usecs_to_response(inst,
   1b2f4:	fa11 f180 	uxtah	r1, r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   1b2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b2fc:	b289      	uxth	r1, r1
   1b2fe:	4620      	mov	r0, r4
   1b300:	4798      	blx	r3
    return true;
   1b302:	2001      	movs	r0, #1
   1b304:	e01f      	b.n	1b346 <rx_complete_cb+0x37e>
                uint64_t response_timestamp = 0x0;
   1b306:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 1b338 <rx_complete_cb+0x370>
   1b30a:	e7b3      	b.n	1b274 <rx_complete_cb+0x2ac>
                    memcpy(&frame->diag, inst->rxdiag, inst->rxdiag->rxd_len);
   1b30c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1b310:	880a      	ldrh	r2, [r1, #0]
   1b312:	f107 0020 	add.w	r0, r7, #32
   1b316:	f7f6 f8af 	bl	11478 <memcpy>
   1b31a:	e7d6      	b.n	1b2ca <rx_complete_cb+0x302>
   1b31c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b320:	2101      	movs	r1, #1
   1b322:	4620      	mov	r0, r4
   1b324:	4798      	blx	r3
    return true;
   1b326:	2001      	movs	r0, #1
   1b328:	e00d      	b.n	1b346 <rx_complete_cb+0x37e>
   1b32a:	bf00      	nop
   1b32c:	f3af 8000 	nop.w
   1b330:	90690691 	.word	0x90690691
   1b334:	3ff06906 	.word	0x3ff06906
	...
   1b340:	20006da8 	.word	0x20006da8
        return false;
   1b344:	2000      	movs	r0, #0
}
   1b346:	b007      	add	sp, #28
   1b348:	ecbd 8b02 	vpop	{d8}
   1b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
   1b350:	2001      	movs	r0, #1
   1b352:	e7f8      	b.n	1b346 <rx_complete_cb+0x37e>
    return true;
   1b354:	2001      	movs	r0, #1
   1b356:	e7f6      	b.n	1b346 <rx_complete_cb+0x37e>
   1b358:	2001      	movs	r0, #1
   1b35a:	e7f4      	b.n	1b346 <rx_complete_cb+0x37e>
   1b35c:	2001      	movs	r0, #1
   1b35e:	e7f2      	b.n	1b346 <rx_complete_cb+0x37e>

0001b360 <twr_ss_nrng_pkg_init>:
{
   1b360:	b530      	push	{r4, r5, lr}
   1b362:	b083      	sub	sp, #12
    printf("{\"utime\": %lu,\"msg\": \"ss_nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   1b364:	f7f2 fa57 	bl	d816 <os_cputime_get32>
   1b368:	4601      	mov	r1, r0
   1b36a:	4817      	ldr	r0, [pc, #92]	; (1b3c8 <twr_ss_nrng_pkg_init+0x68>)
   1b36c:	f7f6 fc92 	bl	11c94 <printf>
    udev = uwb_dev_idx_lookup(0);
   1b370:	2000      	movs	r0, #0
   1b372:	f7ed fb8d 	bl	8a90 <uwb_dev_idx_lookup>
   1b376:	4605      	mov	r5, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   1b378:	210b      	movs	r1, #11
   1b37a:	f7ed fc0e 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
   1b37e:	4604      	mov	r4, r0
    g_cbs.inst_ptr = nrng;
   1b380:	4912      	ldr	r1, [pc, #72]	; (1b3cc <twr_ss_nrng_pkg_init+0x6c>)
   1b382:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs);
   1b384:	4628      	mov	r0, r5
   1b386:	f7ed fbb3 	bl	8af0 <uwb_mac_append_interface>
    nrng_append_config(nrng, &g_rng_cfgs);
   1b38a:	4911      	ldr	r1, [pc, #68]	; (1b3d0 <twr_ss_nrng_pkg_init+0x70>)
   1b38c:	4620      	mov	r0, r4
   1b38e:	f7fd ffbd 	bl	1930c <nrng_append_config>
    int rc = stats_init(
   1b392:	2205      	movs	r2, #5
   1b394:	9200      	str	r2, [sp, #0]
   1b396:	4b0f      	ldr	r3, [pc, #60]	; (1b3d4 <twr_ss_nrng_pkg_init+0x74>)
   1b398:	2104      	movs	r1, #4
   1b39a:	480f      	ldr	r0, [pc, #60]	; (1b3d8 <twr_ss_nrng_pkg_init+0x78>)
   1b39c:	f7f9 fc36 	bl	14c0c <stats_init>
    assert(rc == 0);
   1b3a0:	b930      	cbnz	r0, 1b3b0 <twr_ss_nrng_pkg_init+0x50>
    rc = stats_register("twr_ss_nrng", STATS_HDR(g_twr_ss_nrng_stat));
   1b3a2:	490d      	ldr	r1, [pc, #52]	; (1b3d8 <twr_ss_nrng_pkg_init+0x78>)
   1b3a4:	480d      	ldr	r0, [pc, #52]	; (1b3dc <twr_ss_nrng_pkg_init+0x7c>)
   1b3a6:	f7f9 fcbb 	bl	14d20 <stats_register>
    assert(rc == 0);
   1b3aa:	b938      	cbnz	r0, 1b3bc <twr_ss_nrng_pkg_init+0x5c>
}
   1b3ac:	b003      	add	sp, #12
   1b3ae:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   1b3b0:	2300      	movs	r3, #0
   1b3b2:	461a      	mov	r2, r3
   1b3b4:	4619      	mov	r1, r3
   1b3b6:	4618      	mov	r0, r3
   1b3b8:	f7f1 ffd2 	bl	d360 <__assert_func>
    assert(rc == 0);
   1b3bc:	2300      	movs	r3, #0
   1b3be:	461a      	mov	r2, r3
   1b3c0:	4619      	mov	r1, r3
   1b3c2:	4618      	mov	r0, r3
   1b3c4:	f7f1 ffcc 	bl	d360 <__assert_func>
   1b3c8:	0002541c 	.word	0x0002541c
   1b3cc:	20001584 	.word	0x20001584
   1b3d0:	200015d0 	.word	0x200015d0
   1b3d4:	00025454 	.word	0x00025454
   1b3d8:	20006da8 	.word	0x20006da8
   1b3dc:	00025448 	.word	0x00025448

0001b3e0 <NumberOfBits>:
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t
NumberOfBits(uint32_t n) {
   1b3e0:	4603      	mov	r3, r0
    uint32_t count = 0;
   1b3e2:	2000      	movs	r0, #0
    while (n) {
   1b3e4:	e002      	b.n	1b3ec <NumberOfBits+0xc>
        n &= (n-1);
   1b3e6:	1e5a      	subs	r2, r3, #1
   1b3e8:	4013      	ands	r3, r2
        count++;
   1b3ea:	3001      	adds	r0, #1
    while (n) {
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	d1fa      	bne.n	1b3e6 <NumberOfBits+0x6>
    }
    return count;
}
   1b3f0:	4770      	bx	lr

0001b3f2 <BitPosition>:
 *
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t BitPosition(uint32_t n) {
   1b3f2:	b508      	push	{r3, lr}
    uint32_t count = 0;
    assert(n && (! (n & (n-1)) )); // single bit set
   1b3f4:	b118      	cbz	r0, 1b3fe <BitPosition+0xc>
   1b3f6:	4603      	mov	r3, r0
   1b3f8:	3801      	subs	r0, #1
   1b3fa:	4018      	ands	r0, r3
   1b3fc:	d007      	beq.n	1b40e <BitPosition+0x1c>
   1b3fe:	2300      	movs	r3, #0
   1b400:	461a      	mov	r2, r3
   1b402:	4619      	mov	r1, r3
   1b404:	4618      	mov	r0, r3
   1b406:	f7f1 ffab 	bl	d360 <__assert_func>

    while (n){
        n = n >> 1;
   1b40a:	085b      	lsrs	r3, r3, #1
        ++count; // position of bit within bitfield
   1b40c:	3001      	adds	r0, #1
    while (n){
   1b40e:	2b00      	cmp	r3, #0
   1b410:	d1fb      	bne.n	1b40a <BitPosition+0x18>
    }
    return count;
}
   1b412:	bd08      	pop	{r3, pc}

0001b414 <BitIndex>:
 *
 * @return numerical ordering of a bit witin bitmask.
 */
uint32_t
BitIndex(uint32_t nslots_mask, uint32_t n, slot_mode_t mode)
{
   1b414:	b538      	push	{r3, r4, r5, lr}
    uint32_t idx, slot_mask, remaining_mask;
    assert(n && (! (n & (n-1)) ));  // single bit set
   1b416:	b1c1      	cbz	r1, 1b44a <BitIndex+0x36>
   1b418:	4604      	mov	r4, r0
   1b41a:	4615      	mov	r5, r2
   1b41c:	4608      	mov	r0, r1
   1b41e:	1e4b      	subs	r3, r1, #1
   1b420:	420b      	tst	r3, r1
   1b422:	d112      	bne.n	1b44a <BitIndex+0x36>
    assert(n & nslots_mask);        // bit set is within ROI
   1b424:	4221      	tst	r1, r4
   1b426:	d016      	beq.n	1b456 <BitIndex+0x42>

    idx = BitPosition(n);
   1b428:	f7ff ffe3 	bl	1b3f2 <BitPosition>
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
   1b42c:	f1c0 0220 	rsb	r2, r0, #32
   1b430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b434:	fa23 f202 	lsr.w	r2, r3, r2
    remaining_mask = ((uint32_t)~0UL << idx);
   1b438:	fa03 f000 	lsl.w	r0, r3, r0

    if (mode == SLOT_POSITION)
   1b43c:	2d01      	cmp	r5, #1
   1b43e:	d010      	beq.n	1b462 <BitIndex+0x4e>
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
    else
        return NumberOfBits(nslots_mask & remaining_mask) - 1; // no. of slots remaining
   1b440:	4020      	ands	r0, r4
   1b442:	f7ff ffcd 	bl	1b3e0 <NumberOfBits>
   1b446:	3801      	subs	r0, #1
}
   1b448:	bd38      	pop	{r3, r4, r5, pc}
    assert(n && (! (n & (n-1)) ));  // single bit set
   1b44a:	2300      	movs	r3, #0
   1b44c:	461a      	mov	r2, r3
   1b44e:	4619      	mov	r1, r3
   1b450:	4618      	mov	r0, r3
   1b452:	f7f1 ff85 	bl	d360 <__assert_func>
    assert(n & nslots_mask);        // bit set is within ROI
   1b456:	2300      	movs	r3, #0
   1b458:	461a      	mov	r2, r3
   1b45a:	4619      	mov	r1, r3
   1b45c:	4618      	mov	r0, r3
   1b45e:	f7f1 ff7f 	bl	d360 <__assert_func>
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
   1b462:	ea04 0002 	and.w	r0, r4, r2
   1b466:	f7ff ffbb 	bl	1b3e0 <NumberOfBits>
   1b46a:	3801      	subs	r0, #1
   1b46c:	e7ec      	b.n	1b448 <BitIndex+0x34>

0001b46e <reset_cb>:
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b46e:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b470:	684c      	ldr	r4, [r1, #4]
   1b472:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
   1b476:	b10b      	cbz	r3, 1b47c <reset_cb+0xe>
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
        return true;
    }
    else
        return false;
   1b478:	2000      	movs	r0, #0
}
   1b47a:	bd10      	pop	{r4, pc}
   1b47c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b480:	f7f2 ff64 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   1b484:	b978      	cbnz	r0, 1b4a6 <reset_cb+0x38>
        RNG_STATS_INC(reset);
   1b486:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b488:	3301      	adds	r3, #1
   1b48a:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
   1b48c:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b490:	f36f 1345 	bfc	r3, #5, #1
   1b494:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
   1b498:	b2db      	uxtb	r3, r3
   1b49a:	f36f 1304 	bfc	r3, #4, #1
   1b49e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
   1b4a2:	2001      	movs	r0, #1
   1b4a4:	e7e9      	b.n	1b47a <reset_cb+0xc>
        assert(err == DPL_OK);
   1b4a6:	2300      	movs	r3, #0
   1b4a8:	461a      	mov	r2, r3
   1b4aa:	4619      	mov	r1, r3
   1b4ac:	4618      	mov	r0, r3
   1b4ae:	f7f1 ff57 	bl	d360 <__assert_func>

0001b4b2 <rx_timeout_cb>:
{
   1b4b2:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b4b4:	684c      	ldr	r4, [r1, #4]
   1b4b6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1)
   1b4ba:	2b01      	cmp	r3, #1
   1b4bc:	d01a      	beq.n	1b4f4 <rx_timeout_cb+0x42>
    if(dpl_sem_get_count(&rng->sem) == 0){
   1b4be:	b10b      	cbz	r3, 1b4c4 <rx_timeout_cb+0x12>
    return false;
   1b4c0:	2000      	movs	r0, #0
}
   1b4c2:	bd10      	pop	{r4, pc}
   1b4c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b4c8:	f7f2 ff40 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   1b4cc:	b960      	cbnz	r0, 1b4e8 <rx_timeout_cb+0x36>
        RNG_STATS_INC(rx_timeout);
   1b4ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b4d0:	3301      	adds	r3, #1
   1b4d2:	63e3      	str	r3, [r4, #60]	; 0x3c
        switch(rng->code){
   1b4d4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   1b4d8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
   1b4dc:	2a18      	cmp	r2, #24
   1b4de:	d80b      	bhi.n	1b4f8 <rx_timeout_cb+0x46>
                    RNG_STATS_INC(rx_timeout);
   1b4e0:	3301      	adds	r3, #1
   1b4e2:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
   1b4e4:	2001      	movs	r0, #1
   1b4e6:	e7ec      	b.n	1b4c2 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
   1b4e8:	2300      	movs	r3, #0
   1b4ea:	461a      	mov	r2, r3
   1b4ec:	4619      	mov	r1, r3
   1b4ee:	4618      	mov	r0, r3
   1b4f0:	f7f1 ff36 	bl	d360 <__assert_func>
        return false;
   1b4f4:	2000      	movs	r0, #0
   1b4f6:	e7e4      	b.n	1b4c2 <rx_timeout_cb+0x10>
                return false;
   1b4f8:	2000      	movs	r0, #0
   1b4fa:	e7e2      	b.n	1b4c2 <rx_timeout_cb+0x10>

0001b4fc <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b4fc:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b4fe:	684c      	ldr	r4, [r1, #4]
   1b500:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
   1b504:	b10b      	cbz	r3, 1b50a <superframe_reset_cb+0xe>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
    }
    return false;
}
   1b506:	2000      	movs	r0, #0
   1b508:	bd10      	pop	{r4, pc}
   1b50a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b50e:	f7f2 ff1d 	bl	e34c <os_sem_release>
        assert(err == DPL_OK);
   1b512:	b9a0      	cbnz	r0, 1b53e <superframe_reset_cb+0x42>
        RNG_STATS_INC(superframe_reset);
   1b514:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b516:	3301      	adds	r3, #1
   1b518:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
   1b51a:	f7f6 fc4a 	bl	11db2 <dpl_cputime_get32>
   1b51e:	4601      	mov	r1, r0
   1b520:	480a      	ldr	r0, [pc, #40]	; (1b54c <superframe_reset_cb+0x50>)
   1b522:	f7f6 fbb7 	bl	11c94 <printf>
        rng->status.rx_ack_expected = 0;
   1b526:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b52a:	f36f 1345 	bfc	r3, #5, #1
   1b52e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
   1b532:	b2db      	uxtb	r3, r3
   1b534:	f36f 1304 	bfc	r3, #4, #1
   1b538:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
   1b53c:	e7e3      	b.n	1b506 <superframe_reset_cb+0xa>
        assert(err == DPL_OK);
   1b53e:	2300      	movs	r3, #0
   1b540:	461a      	mov	r2, r3
   1b542:	4619      	mov	r1, r3
   1b544:	4618      	mov	r0, r3
   1b546:	f7f1 ff0b 	bl	d360 <__assert_func>
   1b54a:	bf00      	nop
   1b54c:	00025474 	.word	0x00025474

0001b550 <complete_ev_cb>:
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev)
{
   1b550:	b508      	push	{r3, lr}
   1b552:	4603      	mov	r3, r0
    return ev->ev.ev_arg;
   1b554:	6880      	ldr	r0, [r0, #8]
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)dpl_event_get_arg(ev);
    assert(ev != NULL);
   1b556:	b11b      	cbz	r3, 1b560 <complete_ev_cb+0x10>
    assert(rng);
   1b558:	b138      	cbz	r0, 1b56a <complete_ev_cb+0x1a>
    rng_encode(rng);
   1b55a:	f000 fb8d 	bl	1bc78 <rng_encode>
}
   1b55e:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
   1b560:	461a      	mov	r2, r3
   1b562:	4619      	mov	r1, r3
   1b564:	4618      	mov	r0, r3
   1b566:	f7f1 fefb 	bl	d360 <__assert_func>
    assert(rng);
   1b56a:	2300      	movs	r3, #0
   1b56c:	461a      	mov	r2, r3
   1b56e:	4619      	mov	r1, r3
   1b570:	4618      	mov	r0, r3
   1b572:	f7f1 fef5 	bl	d360 <__assert_func>
	...

0001b578 <complete_cb>:
 *
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b578:	b570      	push	{r4, r5, r6, lr}
   1b57a:	4604      	mov	r4, r0
    twr_frame_t * frame;
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b57c:	684d      	ldr	r5, [r1, #4]
    RNG_STATS_INC(complete_cb);
   1b57e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1b580:	3301      	adds	r3, #1
   1b582:	642b      	str	r3, [r5, #64]	; 0x40
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1b584:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   1b588:	f648 0241 	movw	r2, #34881	; 0x8841
   1b58c:	4293      	cmp	r3, r2
   1b58e:	d004      	beq.n	1b59a <complete_cb+0x22>
   1b590:	f648 0261 	movw	r2, #34913	; 0x8861
   1b594:	4293      	cmp	r3, r2
   1b596:	f040 8082 	bne.w	1b69e <complete_cb+0x126>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED))
        return false;

    /* Calculate Local results and diagnostics.
     * XXX TODO: Generalise antenna distance */
    rng->idx_current = (rng->idx)%rng->nframes;
   1b59a:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1b59e:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   1b5a2:	fbb3 f1f2 	udiv	r1, r3, r2
   1b5a6:	fb02 3311 	mls	r3, r2, r1, r3
   1b5aa:	b29b      	uxth	r3, r3
   1b5ac:	f8a5 3078 	strh.w	r3, [r5, #120]	; 0x78
    frame = rng->frames[rng->idx_current];
   1b5b0:	3326      	adds	r3, #38	; 0x26
   1b5b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1b5b6:	685e      	ldr	r6, [r3, #4]
    if (inst->capabilities.single_receiver_pdoa) {
   1b5b8:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
   1b5bc:	f013 0f02 	tst.w	r3, #2
   1b5c0:	d01b      	beq.n	1b5fa <complete_cb+0x82>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   1b5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1b5c8:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1b5cc:	4620      	mov	r0, r4
   1b5ce:	4798      	blx	r3
        dpl_float32_t tmp_pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
        if (!DPL_FLOAT32_ISNAN(tmp_pdoa)) {
   1b5d0:	eeb4 0a40 	vcmp.f32	s0, s0
   1b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b5d8:	d60f      	bvs.n	1b5fa <complete_cb+0x82>
            frame->local.pdoa = tmp_pdoa;
   1b5da:	ed86 0a36 	vstr	s0, [r6, #216]	; 0xd8
            frame->local.spherical.azimuth = DPL_FLOAT64_FROM_F32(
   1b5de:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
   1b5e2:	edd3 0a00 	vldr	s1, [r3]
   1b5e6:	f894 050c 	ldrb.w	r0, [r4, #1292]	; 0x50c
   1b5ea:	f7ed fb4d 	bl	8c88 <uwb_calc_aoa>
   1b5ee:	ee10 0a10 	vmov	r0, s0
   1b5f2:	f006 f9db 	bl	219ac <__aeabi_f2d>
   1b5f6:	e9c6 0124 	strd	r0, r1, [r6, #144]	; 0x90
                uwb_calc_aoa(frame->local.pdoa, inst->config.channel, inst->rx_ant_separation)
                );
        }
    }

    frame->local.vrssi[0] = DPL_FLOAT32_NAN();
   1b5fa:	4b2a      	ldr	r3, [pc, #168]	; (1b6a4 <complete_cb+0x12c>)
   1b5fc:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   1b600:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b602:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1b606:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1b60a:	4620      	mov	r0, r4
   1b60c:	4798      	blx	r3
    frame->local.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   1b60e:	ed86 0a34 	vstr	s0, [r6, #208]	; 0xd0
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   1b612:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1b618:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1b61c:	4620      	mov	r0, r4
   1b61e:	4798      	blx	r3
    frame->local.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   1b620:	ed86 0a35 	vstr	s0, [r6, #212]	; 0xd4

    if (inst->capabilities.sts) {
   1b624:	f894 34b2 	ldrb.w	r3, [r4, #1202]	; 0x4b2
   1b628:	f013 0f01 	tst.w	r3, #1
   1b62c:	d031      	beq.n	1b692 <complete_cb+0x11a>
        frame->local.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   1b62e:	f894 3518 	ldrb.w	r3, [r4, #1304]	; 0x518
   1b632:	3b00      	subs	r3, #0
   1b634:	bf18      	it	ne
   1b636:	2301      	movne	r3, #1
   1b638:	f896 20dc 	ldrb.w	r2, [r6, #220]	; 0xdc
   1b63c:	f363 0200 	bfi	r2, r3, #0, #1
   1b640:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   1b644:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b648:	f013 0f30 	tst.w	r3, #48	; 0x30
   1b64c:	bf0c      	ite	eq
   1b64e:	2201      	moveq	r2, #1
   1b650:	2200      	movne	r2, #0
   1b652:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
   1b656:	f362 0341 	bfi	r3, r2, #1, #1
   1b65a:	f886 30dc 	strb.w	r3, [r6, #220]	; 0xdc
        frame->local.vrssi[0] = frame->local.rssi;
   1b65e:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1b662:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
    return (dev->uw_funcs->uf_calc_seq_rssi(dev, diag, type));
   1b666:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1b66c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1b670:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1b674:	4620      	mov	r0, r4
   1b676:	4798      	blx	r3
        frame->local.vrssi[1] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS);
   1b678:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
   1b67c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b67e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1b682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1b686:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   1b68a:	4620      	mov	r0, r4
   1b68c:	4798      	blx	r3
        frame->local.vrssi[2] = uwb_calc_seq_rssi(inst, inst->rxdiag, UWB_RXDIAG_STS2);
   1b68e:	ed86 0a3a 	vstr	s0, [r6, #232]	; 0xe8
    return (struct dpl_eventq *) os_eventq_dflt_get();
   1b692:	f7f2 fa47 	bl	db24 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1b696:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1b69a:	f7f2 f995 	bl	d9c8 <os_eventq_put>
    }

    /* Postprocess in thread context */
    dpl_eventq_put(dpl_eventq_dflt_get(), &rng->complete_event);
    return false;
}
   1b69e:	2000      	movs	r0, #0
   1b6a0:	bd70      	pop	{r4, r5, r6, pc}
   1b6a2:	bf00      	nop
   1b6a4:	7fc00000 	.word	0x7fc00000

0001b6a8 <uwb_rng_free>:
{
   1b6a8:	b508      	push	{r3, lr}
    assert(rng);
   1b6aa:	b158      	cbz	r0, 1b6c4 <uwb_rng_free+0x1c>
    if (rng->status.selfmalloc)
   1b6ac:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   1b6b0:	f012 0f01 	tst.w	r2, #1
   1b6b4:	d10c      	bne.n	1b6d0 <uwb_rng_free+0x28>
        rng->status.initialized = 0;
   1b6b6:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   1b6ba:	f36f 0241 	bfc	r2, #1, #1
   1b6be:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
}
   1b6c2:	bd08      	pop	{r3, pc}
    assert(rng);
   1b6c4:	2300      	movs	r3, #0
   1b6c6:	461a      	mov	r2, r3
   1b6c8:	4619      	mov	r1, r3
   1b6ca:	4618      	mov	r0, r3
   1b6cc:	f7f1 fe48 	bl	d360 <__assert_func>
        free(rng);
   1b6d0:	f7f5 fe98 	bl	11404 <free>
   1b6d4:	e7f5      	b.n	1b6c2 <uwb_rng_free+0x1a>

0001b6d6 <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
   1b6d6:	b508      	push	{r3, lr}
    assert(config);
   1b6d8:	b171      	cbz	r1, 1b6f8 <uwb_rng_config+0x22>
   1b6da:	460b      	mov	r3, r1
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
   1b6dc:	f8d1 c000 	ldr.w	ip, [r1]
   1b6e0:	6849      	ldr	r1, [r1, #4]
   1b6e2:	689a      	ldr	r2, [r3, #8]
   1b6e4:	68db      	ldr	r3, [r3, #12]
   1b6e6:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
   1b6ea:	6641      	str	r1, [r0, #100]	; 0x64
   1b6ec:	6682      	str	r2, [r0, #104]	; 0x68
   1b6ee:	66c3      	str	r3, [r0, #108]	; 0x6c
    return rng->dev_inst->status;
   1b6f0:	6803      	ldr	r3, [r0, #0]
}
   1b6f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   1b6f6:	bd08      	pop	{r3, pc}
    assert(config);
   1b6f8:	2300      	movs	r3, #0
   1b6fa:	461a      	mov	r2, r3
   1b6fc:	4619      	mov	r1, r3
   1b6fe:	4618      	mov	r0, r3
   1b700:	f7f1 fe2e 	bl	d360 <__assert_func>

0001b704 <uwb_rng_init>:
{
   1b704:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b706:	b083      	sub	sp, #12
    assert(dev);
   1b708:	2800      	cmp	r0, #0
   1b70a:	d03d      	beq.n	1b788 <uwb_rng_init+0x84>
   1b70c:	460d      	mov	r5, r1
   1b70e:	4617      	mov	r7, r2
   1b710:	4606      	mov	r6, r0
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
   1b712:	2104      	movs	r1, #4
   1b714:	f7ed fa41 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
   1b718:	4604      	mov	r4, r0
   1b71a:	2800      	cmp	r0, #0
   1b71c:	d03a      	beq.n	1b794 <uwb_rng_init+0x90>
    rng->dev_inst = dev;
   1b71e:	6026      	str	r6, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
   1b720:	2101      	movs	r1, #1
   1b722:	4630      	mov	r0, r6
   1b724:	f7ed fa39 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
   1b728:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
   1b72a:	2800      	cmp	r0, #0
   1b72c:	d049      	beq.n	1b7c2 <uwb_rng_init+0xbe>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   1b72e:	2101      	movs	r1, #1
   1b730:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1b734:	f7f2 fe02 	bl	e33c <os_sem_init>
    assert(err == DPL_OK);
   1b738:	2800      	cmp	r0, #0
   1b73a:	d148      	bne.n	1b7ce <uwb_rng_init+0xca>
    if (config != NULL ) {
   1b73c:	b11d      	cbz	r5, 1b746 <uwb_rng_init+0x42>
        uwb_rng_config(rng, config);
   1b73e:	4629      	mov	r1, r5
   1b740:	4620      	mov	r0, r4
   1b742:	f7ff ffc8 	bl	1b6d6 <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
   1b746:	2300      	movs	r3, #0
   1b748:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
   1b74c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b750:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
   1b754:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   1b758:	f043 0302 	orr.w	r3, r3, #2
   1b75c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   1b760:	f104 0508 	add.w	r5, r4, #8
   1b764:	220c      	movs	r2, #12
   1b766:	9200      	str	r2, [sp, #0]
   1b768:	4b1f      	ldr	r3, [pc, #124]	; (1b7e8 <uwb_rng_init+0xe4>)
   1b76a:	2104      	movs	r1, #4
   1b76c:	4628      	mov	r0, r5
   1b76e:	f7f9 fa4d 	bl	14c0c <stats_init>
   1b772:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   1b774:	4629      	mov	r1, r5
   1b776:	481d      	ldr	r0, [pc, #116]	; (1b7ec <uwb_rng_init+0xe8>)
   1b778:	f7f9 fad2 	bl	14d20 <stats_register>
        assert(rc == 0);
   1b77c:	ea56 0300 	orrs.w	r3, r6, r0
   1b780:	d12b      	bne.n	1b7da <uwb_rng_init+0xd6>
}
   1b782:	4620      	mov	r0, r4
   1b784:	b003      	add	sp, #12
   1b786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev);
   1b788:	2300      	movs	r3, #0
   1b78a:	461a      	mov	r2, r3
   1b78c:	4619      	mov	r1, r3
   1b78e:	4618      	mov	r0, r3
   1b790:	f7f1 fde6 	bl	d360 <__assert_func>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
   1b794:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1b798:	0089      	lsls	r1, r1, #2
   1b79a:	2001      	movs	r0, #1
   1b79c:	f7f5 fd63 	bl	11266 <calloc>
        assert(rng);
   1b7a0:	4604      	mov	r4, r0
   1b7a2:	b140      	cbz	r0, 1b7b6 <uwb_rng_init+0xb2>
        rng->status.selfmalloc = 1;
   1b7a4:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   1b7a8:	f043 0301 	orr.w	r3, r3, #1
   1b7ac:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
   1b7b0:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
   1b7b4:	e7b3      	b.n	1b71e <uwb_rng_init+0x1a>
        assert(rng);
   1b7b6:	2300      	movs	r3, #0
   1b7b8:	461a      	mov	r2, r3
   1b7ba:	4619      	mov	r1, r3
   1b7bc:	4618      	mov	r0, r3
   1b7be:	f7f1 fdcf 	bl	d360 <__assert_func>
    assert(rng->ccp_inst);
   1b7c2:	2300      	movs	r3, #0
   1b7c4:	461a      	mov	r2, r3
   1b7c6:	4619      	mov	r1, r3
   1b7c8:	4618      	mov	r0, r3
   1b7ca:	f7f1 fdc9 	bl	d360 <__assert_func>
    assert(err == DPL_OK);
   1b7ce:	2300      	movs	r3, #0
   1b7d0:	461a      	mov	r2, r3
   1b7d2:	4619      	mov	r1, r3
   1b7d4:	4618      	mov	r0, r3
   1b7d6:	f7f1 fdc3 	bl	d360 <__assert_func>
        assert(rc == 0);
   1b7da:	2300      	movs	r3, #0
   1b7dc:	461a      	mov	r2, r3
   1b7de:	4619      	mov	r1, r3
   1b7e0:	4618      	mov	r0, r3
   1b7e2:	f7f1 fdbd 	bl	d360 <__assert_func>
   1b7e6:	bf00      	nop
   1b7e8:	00025500 	.word	0x00025500
   1b7ec:	00025450 	.word	0x00025450

0001b7f0 <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
   1b7f0:	2200      	movs	r2, #0
   1b7f2:	4b07      	ldr	r3, [pc, #28]	; (1b810 <uwb_rng_clear_twr_data+0x20>)
   1b7f4:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
   1b7f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
   1b7fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
   1b800:	4b04      	ldr	r3, [pc, #16]	; (1b814 <uwb_rng_clear_twr_data+0x24>)
   1b802:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
   1b804:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
   1b806:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
   1b808:	2300      	movs	r3, #0
   1b80a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
   1b80e:	4770      	bx	lr
   1b810:	7ff80000 	.word	0x7ff80000
   1b814:	7fc00000 	.word	0x7fc00000

0001b818 <rx_complete_cb>:
{
   1b818:	b570      	push	{r4, r5, r6, lr}
   1b81a:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b81c:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   1b81e:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   1b822:	f648 0241 	movw	r2, #34881	; 0x8841
   1b826:	4293      	cmp	r3, r2
   1b828:	d012      	beq.n	1b850 <rx_complete_cb+0x38>
   1b82a:	f648 0261 	movw	r2, #34913	; 0x8861
   1b82e:	4293      	cmp	r3, r2
   1b830:	d00e      	beq.n	1b850 <rx_complete_cb+0x38>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   1b832:	2b02      	cmp	r3, #2
   1b834:	d00c      	beq.n	1b850 <rx_complete_cb+0x38>
   1b836:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
        if(dpl_sem_get_count(&rng->sem) == 0) {
   1b83a:	b10b      	cbz	r3, 1b840 <rx_complete_cb+0x28>
        return false;
   1b83c:	2000      	movs	r0, #0
   1b83e:	e01b      	b.n	1b878 <rx_complete_cb+0x60>
            RNG_STATS_INC(rx_other_frame);
   1b840:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1b842:	3301      	adds	r3, #1
   1b844:	632b      	str	r3, [r5, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
   1b846:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b84a:	f7f2 fd7f 	bl	e34c <os_sem_release>
   1b84e:	e7f5      	b.n	1b83c <rx_complete_cb+0x24>
   1b850:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1){
   1b854:	2b01      	cmp	r3, #1
   1b856:	d010      	beq.n	1b87a <rx_complete_cb+0x62>
    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
   1b858:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   1b85c:	2b0a      	cmp	r3, #10
   1b85e:	d94e      	bls.n	1b8fe <rx_complete_cb+0xe6>
    req_frame = (ieee_rng_request_frame_t * ) inst->rxbuf;
   1b860:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    rng->code = req_frame->code;
   1b864:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   1b868:	b293      	uxth	r3, r2
   1b86a:	f8a5 204c 	strh.w	r2, [r5, #76]	; 0x4c
    switch(rng->code) {
   1b86e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   1b872:	2b19      	cmp	r3, #25
   1b874:	d906      	bls.n	1b884 <rx_complete_cb+0x6c>
            return false;
   1b876:	2000      	movs	r0, #0
}
   1b878:	bd70      	pop	{r4, r5, r6, pc}
        RNG_STATS_INC(rx_unsolicited);
   1b87a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1b87c:	3301      	adds	r3, #1
   1b87e:	62eb      	str	r3, [r5, #44]	; 0x2c
        return false;
   1b880:	2000      	movs	r0, #0
   1b882:	e7f9      	b.n	1b878 <rx_complete_cb+0x60>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
   1b884:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1b888:	3301      	adds	r3, #1
   1b88a:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   1b88e:	fb93 f1f2 	sdiv	r1, r3, r2
   1b892:	fb02 3311 	mls	r3, r2, r1, r3
   1b896:	3326      	adds	r3, #38	; 0x26
   1b898:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1b89c:	685e      	ldr	r6, [r3, #4]
                uwb_rng_clear_twr_data(&frame->remote);
   1b89e:	f106 0020 	add.w	r0, r6, #32
   1b8a2:	f7ff ffa5 	bl	1b7f0 <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
   1b8a6:	f106 0088 	add.w	r0, r6, #136	; 0x88
   1b8aa:	f7ff ffa1 	bl	1b7f0 <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
   1b8ae:	f8b4 24e2 	ldrh.w	r2, [r4, #1250]	; 0x4e2
   1b8b2:	2a88      	cmp	r2, #136	; 0x88
   1b8b4:	d901      	bls.n	1b8ba <rx_complete_cb+0xa2>
    return false;
   1b8b6:	2000      	movs	r0, #0
   1b8b8:	e7de      	b.n	1b878 <rx_complete_cb+0x60>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
   1b8ba:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   1b8be:	4630      	mov	r0, r6
   1b8c0:	f7f5 fdda 	bl	11478 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
   1b8c4:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
   1b8c8:	b97b      	cbnz	r3, 1b8ea <rx_complete_cb+0xd2>
   1b8ca:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   1b8ce:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1b8d2:	429a      	cmp	r2, r3
   1b8d4:	d009      	beq.n	1b8ea <rx_complete_cb+0xd2>
   1b8d6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
                    if(dpl_sem_get_count(&rng->sem) == 0){
   1b8da:	b10b      	cbz	r3, 1b8e0 <rx_complete_cb+0xc8>
                    return true;
   1b8dc:	2001      	movs	r0, #1
   1b8de:	e7cb      	b.n	1b878 <rx_complete_cb+0x60>
   1b8e0:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1b8e4:	f7f2 fd32 	bl	e34c <os_sem_release>
   1b8e8:	e7f8      	b.n	1b8dc <rx_complete_cb+0xc4>
                    RNG_STATS_INC(rx_complete);
   1b8ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b8ec:	3301      	adds	r3, #1
   1b8ee:	62ab      	str	r3, [r5, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
   1b8f0:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   1b8f4:	3301      	adds	r3, #1
   1b8f6:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
                    return false;   // Allow sub extensions to handle event
   1b8fa:	2000      	movs	r0, #0
   1b8fc:	e7bc      	b.n	1b878 <rx_complete_cb+0x60>
       return false;
   1b8fe:	2000      	movs	r0, #0
   1b900:	e7ba      	b.n	1b878 <rx_complete_cb+0x60>
   1b902:	0000      	movs	r0, r0
   1b904:	0000      	movs	r0, r0
	...

0001b908 <uwb_rng_twr_to_tof>:
{
   1b908:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b90a:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   1b90c:	1e4b      	subs	r3, r1, #1
   1b90e:	b29b      	uxth	r3, r3
   1b910:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
   1b914:	fbb3 f4f2 	udiv	r4, r3, r2
   1b918:	fb02 3314 	mls	r3, r2, r4, r3
   1b91c:	b29b      	uxth	r3, r3
   1b91e:	3326      	adds	r3, #38	; 0x26
   1b920:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1b924:	685d      	ldr	r5, [r3, #4]
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   1b926:	fbb1 f3f2 	udiv	r3, r1, r2
   1b92a:	fb02 1113 	mls	r1, r2, r3, r1
   1b92e:	b289      	uxth	r1, r1
   1b930:	3126      	adds	r1, #38	; 0x26
   1b932:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1b936:	6844      	ldr	r4, [r0, #4]
    switch(frame->code) {
   1b938:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1b93c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   1b940:	d321      	bcc.n	1b986 <uwb_rng_twr_to_tof+0x7e>
   1b942:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   1b946:	b29b      	uxth	r3, r3
   1b948:	2b09      	cmp	r3, #9
   1b94a:	d833      	bhi.n	1b9b4 <uwb_rng_twr_to_tof+0xac>
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   1b94c:	f8d5 200f 	ldr.w	r2, [r5, #15]
   1b950:	f8d5 600b 	ldr.w	r6, [r5, #11]
                              frame->transmission_timestamp, frame->reception_timestamp);
   1b954:	f8d4 700f 	ldr.w	r7, [r4, #15]
   1b958:	f8d4 c00b 	ldr.w	ip, [r4, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   1b95c:	2300      	movs	r3, #0
   1b95e:	f8d5 1013 	ldr.w	r1, [r5, #19]
   1b962:	f8d5 0017 	ldr.w	r0, [r5, #23]
   1b966:	f8cd c018 	str.w	ip, [sp, #24]
   1b96a:	9307      	str	r3, [sp, #28]
   1b96c:	9704      	str	r7, [sp, #16]
   1b96e:	9305      	str	r3, [sp, #20]
   1b970:	f8d4 5013 	ldr.w	r5, [r4, #19]
   1b974:	9503      	str	r5, [sp, #12]
   1b976:	f8d4 4017 	ldr.w	r4, [r4, #23]
   1b97a:	9402      	str	r4, [sp, #8]
   1b97c:	9600      	str	r6, [sp, #0]
   1b97e:	9301      	str	r3, [sp, #4]
   1b980:	f7fd fe4e 	bl	19620 <calc_tof_ds>
            break;
   1b984:	e004      	b.n	1b990 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
   1b986:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   1b98a:	d203      	bcs.n	1b994 <uwb_rng_twr_to_tof+0x8c>
   1b98c:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 1b9c0 <uwb_rng_twr_to_tof+0xb8>
}
   1b990:	b009      	add	sp, #36	; 0x24
   1b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   1b994:	f8d4 200f 	ldr.w	r2, [r4, #15]
   1b998:	f8d4 500b 	ldr.w	r5, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   1b99c:	2300      	movs	r3, #0
   1b99e:	f8d4 1013 	ldr.w	r1, [r4, #19]
   1b9a2:	f8d4 0017 	ldr.w	r0, [r4, #23]
   1b9a6:	9500      	str	r5, [sp, #0]
   1b9a8:	9301      	str	r3, [sp, #4]
   1b9aa:	ed9f 0b05 	vldr	d0, [pc, #20]	; 1b9c0 <uwb_rng_twr_to_tof+0xb8>
   1b9ae:	f7fd fe07 	bl	195c0 <calc_tof_ss>
            break;
   1b9b2:	e7ed      	b.n	1b990 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
   1b9b4:	ed9f 0b02 	vldr	d0, [pc, #8]	; 1b9c0 <uwb_rng_twr_to_tof+0xb8>
    return ToF;
   1b9b8:	e7ea      	b.n	1b990 <uwb_rng_twr_to_tof+0x88>
   1b9ba:	bf00      	nop
   1b9bc:	f3af 8000 	nop.w
	...

0001b9c8 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1b9c8:	b570      	push	{r4, r5, r6, lr}
   1b9ca:	4605      	mov	r5, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1b9cc:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   1b9ce:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   1b9d2:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   1b9d6:	fbb3 f1f2 	udiv	r1, r3, r2
   1b9da:	fb02 3311 	mls	r3, r2, r1, r3
   1b9de:	b29b      	uxth	r3, r3
   1b9e0:	3326      	adds	r3, #38	; 0x26
   1b9e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1b9e6:	685c      	ldr	r4, [r3, #4]

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   1b9e8:	2200      	movs	r2, #0
   1b9ea:	2300      	movs	r3, #0
   1b9ec:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
   1b9f0:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
   1b9f4:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
   1b9f8:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
   1b9fc:	f013 0f02 	tst.w	r3, #2
   1ba00:	d007      	beq.n	1ba12 <tx_final_cb+0x4a>
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   1ba02:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ba04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1ba08:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
   1ba0c:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
   1ba0e:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
   1ba12:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
   1ba16:	f013 0f01 	tst.w	r3, #1
   1ba1a:	d017      	beq.n	1ba4c <tx_final_cb+0x84>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   1ba1c:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
   1ba20:	3b00      	subs	r3, #0
   1ba22:	bf18      	it	ne
   1ba24:	2301      	movne	r3, #1
   1ba26:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1ba2a:	f363 0200 	bfi	r2, r3, #0, #1
   1ba2e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   1ba32:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1ba36:	f013 0f30 	tst.w	r3, #48	; 0x30
   1ba3a:	bf0c      	ite	eq
   1ba3c:	2201      	moveq	r2, #1
   1ba3e:	2200      	movne	r2, #0
   1ba40:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1ba44:	f362 0341 	bfi	r3, r2, #1, #1
   1ba48:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   1ba4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ba4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1ba52:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   1ba56:	4628      	mov	r0, r5
   1ba58:	4798      	blx	r3
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   1ba5a:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   1ba5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ba60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1ba64:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   1ba68:	4628      	mov	r0, r5
   1ba6a:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   1ba6c:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   1ba70:	f8b4 2009 	ldrh.w	r2, [r4, #9]
   1ba74:	f240 1315 	movw	r3, #277	; 0x115
   1ba78:	429a      	cmp	r2, r3
   1ba7a:	d125      	bne.n	1bac8 <tx_final_cb+0x100>
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
   1ba7c:	2200      	movs	r2, #0
   1ba7e:	4b1e      	ldr	r3, [pc, #120]	; (1baf8 <tx_final_cb+0x130>)
   1ba80:	e9c4 2308 	strd	r2, r3, [r4, #32]
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   1ba84:	2200      	movs	r2, #0
   1ba86:	4b1d      	ldr	r3, [pc, #116]	; (1bafc <tx_final_cb+0x134>)
   1ba88:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
   1ba8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   1ba90:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
   1ba94:	eeb4 0a40 	vcmp.f32	s0, s0
   1ba98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ba9c:	d612      	bvs.n	1bac4 <tx_final_cb+0xfc>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   1ba9e:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
   1baa2:	edd3 0a00 	vldr	s1, [r3]
   1baa6:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
   1baaa:	f7ed f8ed 	bl	8c88 <uwb_calc_aoa>
   1baae:	ee10 0a10 	vmov	r0, s0
   1bab2:	f005 ff7b 	bl	219ac <__aeabi_f2d>
   1bab6:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   1baba:	a30b      	add	r3, pc, #44	; (adr r3, 1bae8 <tx_final_cb+0x120>)
   1babc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bac0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
   1bac4:	2001      	movs	r0, #1
   1bac6:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   1bac8:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
   1bacc:	4630      	mov	r0, r6
   1bace:	f7ff ff1b 	bl	1b908 <uwb_rng_twr_to_tof>
   1bad2:	f7fd fd51 	bl	19578 <uwb_rng_tof_to_meters>
   1bad6:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   1bada:	a305      	add	r3, pc, #20	; (adr r3, 1baf0 <tx_final_cb+0x128>)
   1badc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bae0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   1bae4:	e7ce      	b.n	1ba84 <tx_final_cb+0xbc>
   1bae6:	bf00      	nop
   1bae8:	00000000 	.word	0x00000000
   1baec:	3f9dcc64 	.word	0x3f9dcc64
   1baf0:	00000000 	.word	0x00000000
   1baf4:	3f41d718 	.word	0x3f41d718
   1baf8:	7ff80000 	.word	0x7ff80000
   1bafc:	bff00000 	.word	0xbff00000

0001bb00 <rng_issue_complete>:
{
   1bb00:	b538      	push	{r3, r4, r5, lr}
   1bb02:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   1bb04:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
   1bb08:	b90c      	cbnz	r4, 1bb0e <rng_issue_complete+0xe>
}
   1bb0a:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   1bb0c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1bb0e:	2c00      	cmp	r4, #0
   1bb10:	d0fb      	beq.n	1bb0a <rng_issue_complete+0xa>
            if (cbs_i != NULL && cbs_i->complete_cb)
   1bb12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bb14:	2b00      	cmp	r3, #0
   1bb16:	d0f9      	beq.n	1bb0c <rng_issue_complete+0xc>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
   1bb18:	4621      	mov	r1, r4
   1bb1a:	4628      	mov	r0, r5
   1bb1c:	4798      	blx	r3
   1bb1e:	e7f5      	b.n	1bb0c <rng_issue_complete+0xc>

0001bb20 <tx_complete_cb>:
{
   1bb20:	b538      	push	{r3, r4, r5, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   1bb22:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   1bb24:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   1bb28:	f648 0341 	movw	r3, #34881	; 0x8841
   1bb2c:	429a      	cmp	r2, r3
   1bb2e:	d122      	bne.n	1bb76 <tx_complete_cb+0x56>
   1bb30:	4604      	mov	r4, r0
   1bb32:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
   1bb36:	2b01      	cmp	r3, #1
   1bb38:	d01f      	beq.n	1bb7a <tx_complete_cb+0x5a>
    switch(rng->code) {
   1bb3a:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   1bb3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   1bb42:	2b19      	cmp	r3, #25
   1bb44:	d81b      	bhi.n	1bb7e <tx_complete_cb+0x5e>
            RNG_STATS_INC(tx_complete);
   1bb46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bb48:	3301      	adds	r3, #1
   1bb4a:	626b      	str	r3, [r5, #36]	; 0x24
            if (rng->control.complete_after_tx) {
   1bb4c:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1bb50:	f013 0f02 	tst.w	r3, #2
   1bb54:	d107      	bne.n	1bb66 <tx_complete_cb+0x46>
            rng->control.complete_after_tx = 0;
   1bb56:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   1bb5a:	f36f 0341 	bfc	r3, #1, #1
   1bb5e:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
            return true;
   1bb62:	2001      	movs	r0, #1
   1bb64:	e008      	b.n	1bb78 <tx_complete_cb+0x58>
   1bb66:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1bb6a:	f7f2 fbef 	bl	e34c <os_sem_release>
                rng_issue_complete(inst);
   1bb6e:	4620      	mov	r0, r4
   1bb70:	f7ff ffc6 	bl	1bb00 <rng_issue_complete>
   1bb74:	e7ef      	b.n	1bb56 <tx_complete_cb+0x36>
        return false;
   1bb76:	2000      	movs	r0, #0
}
   1bb78:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   1bb7a:	2000      	movs	r0, #0
   1bb7c:	e7fc      	b.n	1bb78 <tx_complete_cb+0x58>
            return false;
   1bb7e:	2000      	movs	r0, #0
   1bb80:	e7fa      	b.n	1bb78 <tx_complete_cb+0x58>
	...

0001bb84 <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
   1bb84:	b570      	push	{r4, r5, r6, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
   1bb86:	f7f6 f914 	bl	11db2 <dpl_cputime_get32>
   1bb8a:	4601      	mov	r1, r0
   1bb8c:	4826      	ldr	r0, [pc, #152]	; (1bc28 <uwb_rng_pkg_init+0xa4>)
   1bb8e:	f7f6 f881 	bl	11c94 <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   1bb92:	2500      	movs	r5, #0
   1bb94:	b105      	cbz	r5, 1bb98 <uwb_rng_pkg_init+0x14>
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
   1bb96:	bd70      	pop	{r4, r5, r6, pc}
        udev = uwb_dev_idx_lookup(i);
   1bb98:	4628      	mov	r0, r5
   1bb9a:	f7ec ff79 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) continue;
   1bb9e:	4606      	mov	r6, r0
   1bba0:	2800      	cmp	r0, #0
   1bba2:	d03e      	beq.n	1bc22 <uwb_rng_pkg_init+0x9e>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   1bba4:	2204      	movs	r2, #4
   1bba6:	4921      	ldr	r1, [pc, #132]	; (1bc2c <uwb_rng_pkg_init+0xa8>)
   1bba8:	f7ff fdac 	bl	1b704 <uwb_rng_init>
   1bbac:	4604      	mov	r4, r0
   1bbae:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
   1bbb2:	4a1f      	ldr	r2, [pc, #124]	; (1bc30 <uwb_rng_pkg_init+0xac>)
   1bbb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1bbb8:	6058      	str	r0, [r3, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   1bbba:	ebc5 1005 	rsb	r0, r5, r5, lsl #4
   1bbbe:	4b1d      	ldr	r3, [pc, #116]	; (1bc34 <uwb_rng_pkg_init+0xb0>)
   1bbc0:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    assert(nframes <= rng->nframes);
   1bbc4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1bbc8:	2b03      	cmp	r3, #3
   1bbca:	d901      	bls.n	1bbd0 <uwb_rng_pkg_init+0x4c>
    for (i = 0; i < nframes; i++)
   1bbcc:	2300      	movs	r3, #0
   1bbce:	e010      	b.n	1bbf2 <uwb_rng_pkg_init+0x6e>
    assert(nframes <= rng->nframes);
   1bbd0:	2300      	movs	r3, #0
   1bbd2:	461a      	mov	r2, r3
   1bbd4:	4619      	mov	r1, r3
   1bbd6:	4618      	mov	r0, r3
   1bbd8:	f7f1 fbc2 	bl	d360 <__assert_func>
        rng->frames[i] = &twr[i];
   1bbdc:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1bbe0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   1bbe4:	f103 0226 	add.w	r2, r3, #38	; 0x26
   1bbe8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1bbec:	6051      	str	r1, [r2, #4]
    for (i = 0; i < nframes; i++)
   1bbee:	3301      	adds	r3, #1
   1bbf0:	b29b      	uxth	r3, r3
   1bbf2:	2b03      	cmp	r3, #3
   1bbf4:	d9f2      	bls.n	1bbdc <uwb_rng_pkg_init+0x58>
        uwb_mac_append_interface(udev, &g_cbs[i]);
   1bbf6:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
   1bbfa:	490d      	ldr	r1, [pc, #52]	; (1bc30 <uwb_rng_pkg_init+0xac>)
   1bbfc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1bc00:	4630      	mov	r0, r6
   1bc02:	f7ec ff75 	bl	8af0 <uwb_mac_append_interface>
    memset(ev, 0, sizeof(*ev));
   1bc06:	2300      	movs	r3, #0
   1bc08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   1bc0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   1bc10:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   1bc14:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ev->ev.ev_cb = (os_event_fn *)fn;
   1bc18:	4b07      	ldr	r3, [pc, #28]	; (1bc38 <uwb_rng_pkg_init+0xb4>)
   1bc1a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ev->ev.ev_arg = arg;
   1bc1e:	f8c4 4090 	str.w	r4, [r4, #144]	; 0x90
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   1bc22:	3501      	adds	r5, #1
   1bc24:	e7b6      	b.n	1bb94 <uwb_rng_pkg_init+0x10>
   1bc26:	bf00      	nop
   1bc28:	000254a0 	.word	0x000254a0
   1bc2c:	2000161c 	.word	0x2000161c
   1bc30:	200015e0 	.word	0x200015e0
   1bc34:	20006dd0 	.word	0x20006dd0
   1bc38:	0001b551 	.word	0x0001b551

0001bc3c <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
   1bc3c:	4770      	bx	lr
	...

0001bc40 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
   1bc40:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   1bc42:	2400      	movs	r4, #0
   1bc44:	b10c      	cbz	r4, 1bc4a <uwb_rng_pkg_down+0xa>
        uwb_rng_free(g_cbs[i].inst_ptr);
        g_cbs[i].inst_ptr = 0;
    }

    return 0;
}
   1bc46:	2000      	movs	r0, #0
   1bc48:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   1bc4a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1bc4e:	009a      	lsls	r2, r3, #2
   1bc50:	4b08      	ldr	r3, [pc, #32]	; (1bc74 <uwb_rng_pkg_down+0x34>)
   1bc52:	4413      	add	r3, r2
   1bc54:	685b      	ldr	r3, [r3, #4]
        if (!rng) continue;
   1bc56:	b153      	cbz	r3, 1bc6e <uwb_rng_pkg_down+0x2e>
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
   1bc58:	4d06      	ldr	r5, [pc, #24]	; (1bc74 <uwb_rng_pkg_down+0x34>)
   1bc5a:	4415      	add	r5, r2
   1bc5c:	8869      	ldrh	r1, [r5, #2]
   1bc5e:	6818      	ldr	r0, [r3, #0]
   1bc60:	f7ec ff6b 	bl	8b3a <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
   1bc64:	6868      	ldr	r0, [r5, #4]
   1bc66:	f7ff fd1f 	bl	1b6a8 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
   1bc6a:	2300      	movs	r3, #0
   1bc6c:	606b      	str	r3, [r5, #4]
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   1bc6e:	3401      	adds	r4, #1
   1bc70:	e7e8      	b.n	1bc44 <uwb_rng_pkg_down+0x4>
   1bc72:	bf00      	nop
   1bc74:	200015e0 	.word	0x200015e0

0001bc78 <rng_encode>:
 * output parameters
 * returns void
 */
void
rng_encode(struct uwb_rng_instance * rng)
{
   1bc78:	b570      	push	{r4, r5, r6, lr}
   1bc7a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
   1bc7e:	4605      	mov	r5, r0
    int rc;

    twr_frame_t * frame = rng->frames[rng->idx_current];
   1bc80:	f8b0 1078 	ldrh.w	r1, [r0, #120]	; 0x78
   1bc84:	f101 0326 	add.w	r3, r1, #38	; 0x26
   1bc88:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1bc8c:	685c      	ldr	r4, [r3, #4]
    dpl_float64_t time_of_flight = uwb_rng_twr_to_tof(rng, rng->idx_current);
   1bc8e:	f7ff fe3b 	bl	1b908 <uwb_rng_twr_to_tof>
    frame->local.spherical.range = uwb_rng_tof_to_meters(time_of_flight);
   1bc92:	f7fd fc71 	bl	19578 <uwb_rng_tof_to_meters>
   1bc96:	ed84 0b22 	vstr	d0, [r4, #136]	; 0x88

    rng_json_t json = {
   1bc9a:	f44f 7206 	mov.w	r2, #536	; 0x218
   1bc9e:	2100      	movs	r1, #0
   1bca0:	4668      	mov	r0, sp
   1bca2:	f7f5 fbf6 	bl	11492 <memset>
#if MYNEWT_VAL(UWB_WCS_ENABLED)
        .utime = uwb_wcs_read_systime_master64(rng->dev_inst),
   1bca6:	6828      	ldr	r0, [r5, #0]
   1bca8:	f7f5 fa92 	bl	111d0 <uwb_wcs_read_systime_master64>
    rng_json_t json = {
   1bcac:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
#else
        .utime = dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
#endif
        .uid = frame->src_address,
   1bcb0:	f8b4 2007 	ldrh.w	r2, [r4, #7]
   1bcb4:	2300      	movs	r3, #0
    rng_json_t json = {
   1bcb6:	9220      	str	r2, [sp, #128]	; 0x80
   1bcb8:	9321      	str	r3, [sp, #132]	; 0x84
        .ouid = frame->dst_address,
   1bcba:	f8b4 2005 	ldrh.w	r2, [r4, #5]
    rng_json_t json = {
   1bcbe:	9222      	str	r2, [sp, #136]	; 0x88
   1bcc0:	9323      	str	r3, [sp, #140]	; 0x8c
   1bcc2:	2000      	movs	r0, #0
   1bcc4:	494e      	ldr	r1, [pc, #312]	; (1be00 <rng_encode+0x188>)
   1bcc6:	e9cd 0140 	strd	r0, r1, [sp, #256]	; 0x100
   1bcca:	e9cd 0142 	strd	r0, r1, [sp, #264]	; 0x108
        .ppm = DPL_FLOAT64_NAN(),
        .sts = DPL_FLOAT64_NAN(),
        .idx =0
    };

    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
   1bcce:	e015      	b.n	1bcfc <rng_encode+0x84>
            json.raz.array[i] = json.braz.array[i] = json.los[i] = DPL_FLOAT64_NAN();
   1bcd0:	f103 021c 	add.w	r2, r3, #28
   1bcd4:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
   1bcd8:	2000      	movs	r0, #0
   1bcda:	4949      	ldr	r1, [pc, #292]	; (1be00 <rng_encode+0x188>)
   1bcdc:	e9c2 0100 	strd	r0, r1, [r2]
   1bce0:	f103 0215 	add.w	r2, r3, #21
   1bce4:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
   1bce8:	e9c2 0100 	strd	r0, r1, [r2]
   1bcec:	f103 0212 	add.w	r2, r3, #18
   1bcf0:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
   1bcf4:	e9c2 0100 	strd	r0, r1, [r2]
    for (uint8_t i = 0;i< sizeof(json.raz)/sizeof(json.raz.array[0]);i++)
   1bcf8:	3301      	adds	r3, #1
   1bcfa:	b2db      	uxtb	r3, r3
   1bcfc:	2b02      	cmp	r3, #2
   1bcfe:	d9e7      	bls.n	1bcd0 <rng_encode+0x58>

    switch(frame->code){
   1bd00:	f8b4 1009 	ldrh.w	r1, [r4, #9]
   1bd04:	f5a1 7389 	sub.w	r3, r1, #274	; 0x112
   1bd08:	2b16      	cmp	r3, #22
   1bd0a:	d84b      	bhi.n	1bda4 <rng_encode+0x12c>
   1bd0c:	e8df f003 	tbb	[pc, r3]
   1bd10:	4a4a4a1b 	.word	0x4a4a4a1b
   1bd14:	4a4a4a1d 	.word	0x4a4a4a1d
   1bd18:	4a4a4a1b 	.word	0x4a4a4a1b
   1bd1c:	4a4a4a4a 	.word	0x4a4a4a4a
   1bd20:	4a4a1b4a 	.word	0x4a4a1b4a
   1bd24:	4a4a      	.short	0x4a4a
   1bd26:	1d          	.byte	0x1d
   1bd27:	00          	.byte	0x00
        case UWB_DATA_CODE_SS_TWR_EXT_FINAL:
        case UWB_DATA_CODE_DS_TWR_EXT_FINAL:
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
            json.braz.array[i] = frame->remote.spherical.array[i];
   1bd28:	1d1a      	adds	r2, r3, #4
   1bd2a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1bd2e:	e9d2 0100 	ldrd	r0, r1, [r2]
   1bd32:	f103 0215 	add.w	r2, r3, #21
   1bd36:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
   1bd3a:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.braz)/sizeof(json.braz.array[0]);i++){
   1bd3e:	3301      	adds	r3, #1
   1bd40:	b2db      	uxtb	r3, r3
   1bd42:	2b02      	cmp	r3, #2
   1bd44:	d9f0      	bls.n	1bd28 <rng_encode+0xb0>
    switch(frame->code){
   1bd46:	2300      	movs	r3, #0
   1bd48:	e00f      	b.n	1bd6a <rng_encode+0xf2>
   1bd4a:	2300      	movs	r3, #0
   1bd4c:	e7f9      	b.n	1bd42 <rng_encode+0xca>
        /* Intentionally fall through */
        case UWB_DATA_CODE_SS_TWR_FINAL:
        case UWB_DATA_CODE_SS_TWR_ACK_FINAL:
        case UWB_DATA_CODE_DS_TWR_FINAL:
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
            json.raz.array[i] = frame->local.spherical.array[i];
   1bd4e:	f103 0211 	add.w	r2, r3, #17
   1bd52:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1bd56:	e9d2 0100 	ldrd	r0, r1, [r2]
   1bd5a:	f103 0212 	add.w	r2, r3, #18
   1bd5e:	eb0d 02c2 	add.w	r2, sp, r2, lsl #3
   1bd62:	e9c2 0100 	strd	r0, r1, [r2]
        for (uint8_t i = 0; i < sizeof(json.raz)/sizeof(json.raz.array[0]);i++){
   1bd66:	3301      	adds	r3, #1
   1bd68:	b2db      	uxtb	r3, r3
   1bd6a:	2b02      	cmp	r3, #2
   1bd6c:	d9ef      	bls.n	1bd4e <rng_encode+0xd6>
        break;
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
    }

#if MYNEWT_VAL(RNG_VERBOSE) > 1
    json.pd   = DPL_FLOAT64_FROM_F32(frame->local.pdoa);
   1bd6e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   1bd72:	f005 fe1b 	bl	219ac <__aeabi_f2d>
   1bd76:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
    json.code = frame->code;
   1bd7a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1bd7e:	931e      	str	r3, [sp, #120]	; 0x78
   1bd80:	2300      	movs	r3, #0
   1bd82:	931f      	str	r3, [sp, #124]	; 0x7c
    if(rng->dev_inst->config.rxdiag_enable){
   1bd84:	682b      	ldr	r3, [r5, #0]
   1bd86:	f893 352c 	ldrb.w	r3, [r3, #1324]	; 0x52c
   1bd8a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd8e:	d10d      	bne.n	1bdac <rng_encode+0x134>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
        dpl_float32_t fppl = frame->local.fppl;
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
    }

    rc = rng_json_write(&json);
   1bd90:	4668      	mov	r0, sp
   1bd92:	f000 f85b 	bl	1be4c <rng_json_write>
    assert(rc == 0);
   1bd96:	bb60      	cbnz	r0, 1bdf2 <rng_encode+0x17a>
    size_t n = strlen(json.iobuf);
    json.iobuf[n]='\n';
    json.iobuf[n+1]='\0';
    rng_encode_output(rng->dev_inst->idx, json.iobuf, strlen(json.iobuf));
#else
    printf("%s\n",json.iobuf);
   1bd98:	a844      	add	r0, sp, #272	; 0x110
   1bd9a:	f000 fc41 	bl	1c620 <puts>
#endif

}
   1bd9e:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
   1bda2:	bd70      	pop	{r4, r5, r6, pc}
        default: printf(",error: \"Unknown Frame Code\", %x\n", frame->code);
   1bda4:	4817      	ldr	r0, [pc, #92]	; (1be04 <rng_encode+0x18c>)
   1bda6:	f7f5 ff75 	bl	11c94 <printf>
   1bdaa:	e7e0      	b.n	1bd6e <rng_encode+0xf6>
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
   1bdac:	2600      	movs	r6, #0
   1bdae:	2e02      	cmp	r6, #2
   1bdb0:	d80f      	bhi.n	1bdd2 <rng_encode+0x15a>
            json.rssi[i] = DPL_FLOAT64_FROM_F32(frame->local.vrssi[i]);
   1bdb2:	f106 0338 	add.w	r3, r6, #56	; 0x38
   1bdb6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1bdba:	6818      	ldr	r0, [r3, #0]
   1bdbc:	f005 fdf6 	bl	219ac <__aeabi_f2d>
   1bdc0:	f106 0318 	add.w	r3, r6, #24
   1bdc4:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
   1bdc8:	e9c3 0100 	strd	r0, r1, [r3]
        for (uint8_t i=0;i< sizeof(json.rssi)/sizeof(json.rssi[0]);i++)
   1bdcc:	3601      	adds	r6, #1
   1bdce:	b2f6      	uxtb	r6, r6
   1bdd0:	e7ed      	b.n	1bdae <rng_encode+0x136>
        json.los[0] = DPL_FLOAT64_FROM_F32(uwb_estimate_los(rng->dev_inst, frame->local.rssi, fppl));
   1bdd2:	6828      	ldr	r0, [r5, #0]
    return (dev->uw_funcs->uf_estimate_los(dev, rssi, fppl));
   1bdd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1bdd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   1bdda:	edd4 0a35 	vldr	s1, [r4, #212]	; 0xd4
   1bdde:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
   1bde2:	4798      	blx	r3
   1bde4:	ee10 0a10 	vmov	r0, s0
   1bde8:	f005 fde0 	bl	219ac <__aeabi_f2d>
   1bdec:	e9cd 0138 	strd	r0, r1, [sp, #224]	; 0xe0
   1bdf0:	e7ce      	b.n	1bd90 <rng_encode+0x118>
    assert(rc == 0);
   1bdf2:	2300      	movs	r3, #0
   1bdf4:	461a      	mov	r2, r3
   1bdf6:	4619      	mov	r1, r3
   1bdf8:	4618      	mov	r0, r3
   1bdfa:	f7f1 fab1 	bl	d360 <__assert_func>
   1bdfe:	bf00      	nop
   1be00:	7ff80000 	.word	0x7ff80000
   1be04:	00025548 	.word	0x00025548

0001be08 <rng_write_line>:
        free(json);
}

static int
rng_write_line(void *buf, char* data, int len)
{
   1be08:	b510      	push	{r4, lr}
   1be0a:	4686      	mov	lr, r0
   1be0c:	4610      	mov	r0, r2
    rng_json_t * json = buf;
    for (uint16_t i=0; i < len; i++){
   1be0e:	2300      	movs	r3, #0
   1be10:	e001      	b.n	1be16 <rng_write_line+0xe>
   1be12:	3301      	adds	r3, #1
   1be14:	b29b      	uxth	r3, r3
   1be16:	4283      	cmp	r3, r0
   1be18:	da0d      	bge.n	1be36 <rng_write_line+0x2e>
        json->iobuf[(json->idx++)%MYNEWT_VAL(UWB_RNG_JSON_BUFSIZE)] = data[i];
   1be1a:	f8be c210 	ldrh.w	ip, [lr, #528]	; 0x210
   1be1e:	f10c 0401 	add.w	r4, ip, #1
   1be22:	f8ae 4210 	strh.w	r4, [lr, #528]	; 0x210
   1be26:	5ccc      	ldrb	r4, [r1, r3]
   1be28:	fa5e fc8c 	uxtab	ip, lr, ip
   1be2c:	f88c 4110 	strb.w	r4, [ip, #272]	; 0x110
        if (data[i]=='\0'){
   1be30:	5ccc      	ldrb	r4, [r1, r3]
   1be32:	2c00      	cmp	r4, #0
   1be34:	d1ed      	bne.n	1be12 <rng_write_line+0xa>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
   1be36:	f8be 3210 	ldrh.w	r3, [lr, #528]	; 0x210
   1be3a:	3b01      	subs	r3, #1
   1be3c:	4473      	add	r3, lr
   1be3e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
   1be42:	b90b      	cbnz	r3, 1be48 <rng_write_line+0x40>
        json->idx = 0;
   1be44:	f8ae 3210 	strh.w	r3, [lr, #528]	; 0x210
    return len;
}
   1be48:	bd10      	pop	{r4, pc}
	...

0001be4c <rng_json_write>:

int
rng_json_write(rng_json_t * json){
   1be4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1be50:	b085      	sub	sp, #20
   1be52:	4604      	mov	r4, r0

    struct json_value value;
    int rc;

    json->encoder.je_write = rng_write_line;
   1be54:	4bbe      	ldr	r3, [pc, #760]	; (1c150 <rng_json_write+0x304>)
   1be56:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
   1be58:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
   1be5a:	4bbe      	ldr	r3, [pc, #760]	; (1c154 <rng_json_write+0x308>)
   1be5c:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
   1be5e:	4bbe      	ldr	r3, [pc, #760]	; (1c158 <rng_json_write+0x30c>)
   1be60:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
   1be62:	4bbe      	ldr	r3, [pc, #760]	; (1c15c <rng_json_write+0x310>)
   1be64:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
   1be66:	f890 3020 	ldrb.w	r3, [r0, #32]
   1be6a:	f36f 0300 	bfc	r3, #0, #1
   1be6e:	f880 3020 	strb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
   1be72:	f100 0518 	add.w	r5, r0, #24
   1be76:	4628      	mov	r0, r5
   1be78:	f005 f9be 	bl	211f8 <json_encode_object_start>
   1be7c:	4606      	mov	r6, r0
    JSON_VALUE_UINT(&value, json->utime);
   1be7e:	2301      	movs	r3, #1
   1be80:	f88d 3001 	strb.w	r3, [sp, #1]
   1be84:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   1be88:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
   1be8c:	466a      	mov	r2, sp
   1be8e:	49b4      	ldr	r1, [pc, #720]	; (1c160 <rng_json_write+0x314>)
   1be90:	4628      	mov	r0, r5
   1be92:	f005 f9f9 	bl	21288 <json_encode_object_entry>
   1be96:	4306      	orrs	r6, r0

    if (json->seq){
   1be98:	6f22      	ldr	r2, [r4, #112]	; 0x70
   1be9a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1be9c:	ea52 0103 	orrs.w	r1, r2, r3
   1bea0:	d126      	bne.n	1bef0 <rng_json_write+0xa4>
        JSON_VALUE_UINT(&value, json->seq);
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    }
    if (json->code){
   1bea2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   1bea4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   1bea6:	ea52 0103 	orrs.w	r1, r2, r3
   1beaa:	d12d      	bne.n	1bf08 <rng_json_write+0xbc>
        JSON_VALUE_UINT(&value, json->code);
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
    }
    if (json->uid){
   1beac:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1beb0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1beb4:	ea52 0103 	orrs.w	r1, r2, r3
   1beb8:	d132      	bne.n	1bf20 <rng_json_write+0xd4>
        JSON_VALUE_UINT(&value, json->uid);
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    }
    if (json->ouid){
   1beba:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1bebe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   1bec2:	ea52 0103 	orrs.w	r1, r2, r3
   1bec6:	d137      	bne.n	1bf38 <rng_json_write+0xec>
        JSON_VALUE_UINT(&value, json->ouid);
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
    }

    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
   1bec8:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   1becc:	4602      	mov	r2, r0
   1bece:	460b      	mov	r3, r1
   1bed0:	f006 f85e 	bl	21f90 <__aeabi_dcmpun>
   1bed4:	2800      	cmp	r0, #0
   1bed6:	d13b      	bne.n	1bf50 <rng_json_write+0x104>
        rc |= json_encode_array_start(&json->encoder);
        JSON_VALUE_FLOAT64(&value, json->raz.range);
        rc |= json_encode_array_value(&json->encoder, &value);
        rc |= json_encode_array_finish(&json->encoder);
    }else{
        rc |= json_encode_array_name(&json->encoder, "raz");
   1bed8:	49a2      	ldr	r1, [pc, #648]	; (1c164 <rng_json_write+0x318>)
   1beda:	4628      	mov	r0, r5
   1bedc:	f005 fb8a 	bl	215f4 <json_encode_array_name>
   1bee0:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
   1bee2:	4628      	mov	r0, r5
   1bee4:	f005 fb8a 	bl	215fc <json_encode_array_start>
   1bee8:	ea46 0700 	orr.w	r7, r6, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
   1beec:	2600      	movs	r6, #0
   1beee:	e063      	b.n	1bfb8 <rng_json_write+0x16c>
        JSON_VALUE_UINT(&value, json->seq);
   1bef0:	2101      	movs	r1, #1
   1bef2:	f88d 1001 	strb.w	r1, [sp, #1]
   1bef6:	9202      	str	r2, [sp, #8]
   1bef8:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "seq", &value);
   1befa:	466a      	mov	r2, sp
   1befc:	499a      	ldr	r1, [pc, #616]	; (1c168 <rng_json_write+0x31c>)
   1befe:	4628      	mov	r0, r5
   1bf00:	f005 f9c2 	bl	21288 <json_encode_object_entry>
   1bf04:	4306      	orrs	r6, r0
   1bf06:	e7cc      	b.n	1bea2 <rng_json_write+0x56>
        JSON_VALUE_UINT(&value, json->code);
   1bf08:	2101      	movs	r1, #1
   1bf0a:	f88d 1001 	strb.w	r1, [sp, #1]
   1bf0e:	9202      	str	r2, [sp, #8]
   1bf10:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "c", &value);
   1bf12:	466a      	mov	r2, sp
   1bf14:	4995      	ldr	r1, [pc, #596]	; (1c16c <rng_json_write+0x320>)
   1bf16:	4628      	mov	r0, r5
   1bf18:	f005 f9b6 	bl	21288 <json_encode_object_entry>
   1bf1c:	4306      	orrs	r6, r0
   1bf1e:	e7c5      	b.n	1beac <rng_json_write+0x60>
        JSON_VALUE_UINT(&value, json->uid);
   1bf20:	2101      	movs	r1, #1
   1bf22:	f88d 1001 	strb.w	r1, [sp, #1]
   1bf26:	9202      	str	r2, [sp, #8]
   1bf28:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
   1bf2a:	466a      	mov	r2, sp
   1bf2c:	4990      	ldr	r1, [pc, #576]	; (1c170 <rng_json_write+0x324>)
   1bf2e:	4628      	mov	r0, r5
   1bf30:	f005 f9aa 	bl	21288 <json_encode_object_entry>
   1bf34:	4306      	orrs	r6, r0
   1bf36:	e7c0      	b.n	1beba <rng_json_write+0x6e>
        JSON_VALUE_UINT(&value, json->ouid);
   1bf38:	2101      	movs	r1, #1
   1bf3a:	f88d 1001 	strb.w	r1, [sp, #1]
   1bf3e:	9202      	str	r2, [sp, #8]
   1bf40:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "ouid", &value);
   1bf42:	466a      	mov	r2, sp
   1bf44:	498b      	ldr	r1, [pc, #556]	; (1c174 <rng_json_write+0x328>)
   1bf46:	4628      	mov	r0, r5
   1bf48:	f005 f99e 	bl	21288 <json_encode_object_entry>
   1bf4c:	4306      	orrs	r6, r0
   1bf4e:	e7bb      	b.n	1bec8 <rng_json_write+0x7c>
    if(DPL_FLOAT64_ISNAN(json->raz.azimuth) && DPL_FLOAT64_ISNAN(json->raz.zenith)){
   1bf50:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
   1bf54:	4602      	mov	r2, r0
   1bf56:	460b      	mov	r3, r1
   1bf58:	f006 f81a 	bl	21f90 <__aeabi_dcmpun>
   1bf5c:	2800      	cmp	r0, #0
   1bf5e:	d0bb      	beq.n	1bed8 <rng_json_write+0x8c>
        rc |= json_encode_array_name(&json->encoder, "raz");
   1bf60:	4980      	ldr	r1, [pc, #512]	; (1c164 <rng_json_write+0x318>)
   1bf62:	4628      	mov	r0, r5
   1bf64:	f005 fb46 	bl	215f4 <json_encode_array_name>
   1bf68:	4306      	orrs	r6, r0
        rc |= json_encode_array_start(&json->encoder);
   1bf6a:	4628      	mov	r0, r5
   1bf6c:	f005 fb46 	bl	215fc <json_encode_array_start>
   1bf70:	4306      	orrs	r6, r0
        JSON_VALUE_FLOAT64(&value, json->raz.range);
   1bf72:	2306      	movs	r3, #6
   1bf74:	f88d 3001 	strb.w	r3, [sp, #1]
   1bf78:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   1bf7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
   1bf80:	4669      	mov	r1, sp
   1bf82:	4628      	mov	r0, r5
   1bf84:	f005 fb4a 	bl	2161c <json_encode_array_value>
   1bf88:	4306      	orrs	r6, r0
        rc |= json_encode_array_finish(&json->encoder);
   1bf8a:	4628      	mov	r0, r5
   1bf8c:	f005 fb62 	bl	21654 <json_encode_array_finish>
   1bf90:	4306      	orrs	r6, r0
   1bf92:	e018      	b.n	1bfc6 <rng_json_write+0x17a>
            JSON_VALUE_FLOAT64(&value, json->raz.array[i]);
   1bf94:	2306      	movs	r3, #6
   1bf96:	f88d 3001 	strb.w	r3, [sp, #1]
   1bf9a:	f106 0312 	add.w	r3, r6, #18
   1bf9e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bfa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
   1bfaa:	4669      	mov	r1, sp
   1bfac:	4628      	mov	r0, r5
   1bfae:	f005 fb35 	bl	2161c <json_encode_array_value>
   1bfb2:	4307      	orrs	r7, r0
        for (uint8_t i = 0; i< sizeof(json->raz)/sizeof(dpl_float64_t); i++){
   1bfb4:	3601      	adds	r6, #1
   1bfb6:	b2f6      	uxtb	r6, r6
   1bfb8:	2e02      	cmp	r6, #2
   1bfba:	d9eb      	bls.n	1bf94 <rng_json_write+0x148>
        }
        rc |= json_encode_array_finish(&json->encoder);
   1bfbc:	4628      	mov	r0, r5
   1bfbe:	f005 fb49 	bl	21654 <json_encode_array_finish>
   1bfc2:	ea47 0600 	orr.w	r6, r7, r0
    }

    if(!DPL_FLOAT64_ISNAN(json->braz.range)){
   1bfc6:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
   1bfca:	4602      	mov	r2, r0
   1bfcc:	460b      	mov	r3, r1
   1bfce:	f005 ffdf 	bl	21f90 <__aeabi_dcmpun>
   1bfd2:	2800      	cmp	r0, #0
   1bfd4:	d14b      	bne.n	1c06e <rng_json_write+0x222>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
   1bfd6:	e9d4 012c 	ldrd	r0, r1, [r4, #176]	; 0xb0
   1bfda:	4602      	mov	r2, r0
   1bfdc:	460b      	mov	r3, r1
   1bfde:	f005 ffd7 	bl	21f90 <__aeabi_dcmpun>
   1bfe2:	b950      	cbnz	r0, 1bffa <rng_json_write+0x1ae>
            rc |= json_encode_array_start(&json->encoder);
            JSON_VALUE_FLOAT64(&value, json->braz.range);
            rc |= json_encode_array_value(&json->encoder, &value);
            rc |= json_encode_array_finish(&json->encoder);
        }else{
            rc |= json_encode_array_name(&json->encoder, "braz");
   1bfe4:	4964      	ldr	r1, [pc, #400]	; (1c178 <rng_json_write+0x32c>)
   1bfe6:	4628      	mov	r0, r5
   1bfe8:	f005 fb04 	bl	215f4 <json_encode_array_name>
   1bfec:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
   1bfee:	4628      	mov	r0, r5
   1bff0:	f005 fb04 	bl	215fc <json_encode_array_start>
   1bff4:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
   1bff6:	2700      	movs	r7, #0
   1bff8:	e033      	b.n	1c062 <rng_json_write+0x216>
        if(DPL_FLOAT64_ISNAN(json->braz.azimuth) && DPL_FLOAT64_ISNAN(json->braz.zenith)){
   1bffa:	e9d4 012e 	ldrd	r0, r1, [r4, #184]	; 0xb8
   1bffe:	4602      	mov	r2, r0
   1c000:	460b      	mov	r3, r1
   1c002:	f005 ffc5 	bl	21f90 <__aeabi_dcmpun>
   1c006:	2800      	cmp	r0, #0
   1c008:	d0ec      	beq.n	1bfe4 <rng_json_write+0x198>
            rc |= json_encode_array_name(&json->encoder, "braz");
   1c00a:	495b      	ldr	r1, [pc, #364]	; (1c178 <rng_json_write+0x32c>)
   1c00c:	4628      	mov	r0, r5
   1c00e:	f005 faf1 	bl	215f4 <json_encode_array_name>
   1c012:	4306      	orrs	r6, r0
            rc |= json_encode_array_start(&json->encoder);
   1c014:	4628      	mov	r0, r5
   1c016:	f005 faf1 	bl	215fc <json_encode_array_start>
   1c01a:	4306      	orrs	r6, r0
            JSON_VALUE_FLOAT64(&value, json->braz.range);
   1c01c:	2306      	movs	r3, #6
   1c01e:	f88d 3001 	strb.w	r3, [sp, #1]
   1c022:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
   1c026:	e9cd 2302 	strd	r2, r3, [sp, #8]
            rc |= json_encode_array_value(&json->encoder, &value);
   1c02a:	4669      	mov	r1, sp
   1c02c:	4628      	mov	r0, r5
   1c02e:	f005 faf5 	bl	2161c <json_encode_array_value>
   1c032:	4306      	orrs	r6, r0
            rc |= json_encode_array_finish(&json->encoder);
   1c034:	4628      	mov	r0, r5
   1c036:	f005 fb0d 	bl	21654 <json_encode_array_finish>
   1c03a:	4306      	orrs	r6, r0
   1c03c:	e017      	b.n	1c06e <rng_json_write+0x222>
                JSON_VALUE_FLOAT64(&value, json->braz.array[i]);
   1c03e:	2306      	movs	r3, #6
   1c040:	f88d 3001 	strb.w	r3, [sp, #1]
   1c044:	f107 0315 	add.w	r3, r7, #21
   1c048:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c050:	e9cd 2302 	strd	r2, r3, [sp, #8]
                rc |= json_encode_array_value(&json->encoder, &value);
   1c054:	4669      	mov	r1, sp
   1c056:	4628      	mov	r0, r5
   1c058:	f005 fae0 	bl	2161c <json_encode_array_value>
   1c05c:	4306      	orrs	r6, r0
            for (uint8_t i = 0; i< sizeof(json->braz)/sizeof(dpl_float64_t); i++){
   1c05e:	3701      	adds	r7, #1
   1c060:	b2ff      	uxtb	r7, r7
   1c062:	2f02      	cmp	r7, #2
   1c064:	d9eb      	bls.n	1c03e <rng_json_write+0x1f2>
            }
            rc |= json_encode_array_finish(&json->encoder);
   1c066:	4628      	mov	r0, r5
   1c068:	f005 faf4 	bl	21654 <json_encode_array_finish>
   1c06c:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->rssi[0])){
   1c06e:	e9d4 8930 	ldrd	r8, r9, [r4, #192]	; 0xc0
   1c072:	4642      	mov	r2, r8
   1c074:	464b      	mov	r3, r9
   1c076:	4640      	mov	r0, r8
   1c078:	4649      	mov	r1, r9
   1c07a:	f005 ff89 	bl	21f90 <__aeabi_dcmpun>
   1c07e:	2800      	cmp	r0, #0
   1c080:	d149      	bne.n	1c116 <rng_json_write+0x2ca>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
   1c082:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
   1c086:	4602      	mov	r2, r0
   1c088:	460b      	mov	r3, r1
   1c08a:	f005 ff81 	bl	21f90 <__aeabi_dcmpun>
   1c08e:	b950      	cbnz	r0, 1c0a6 <rng_json_write+0x25a>
                rc |= json_encode_array_name(&json->encoder, "rssi");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "rssi");
   1c090:	493a      	ldr	r1, [pc, #232]	; (1c17c <rng_json_write+0x330>)
   1c092:	4628      	mov	r0, r5
   1c094:	f005 faae 	bl	215f4 <json_encode_array_name>
   1c098:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
   1c09a:	4628      	mov	r0, r5
   1c09c:	f005 faae 	bl	215fc <json_encode_array_start>
   1c0a0:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
   1c0a2:	2700      	movs	r7, #0
   1c0a4:	e031      	b.n	1c10a <rng_json_write+0x2be>
        if(!DPL_FLOAT64_ISNAN(json->rssi[0]) && DPL_FLOAT64_ISNAN(json->rssi[1]) && DPL_FLOAT64_ISNAN(json->rssi[2])){
   1c0a6:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
   1c0aa:	4602      	mov	r2, r0
   1c0ac:	460b      	mov	r3, r1
   1c0ae:	f005 ff6f 	bl	21f90 <__aeabi_dcmpun>
   1c0b2:	2800      	cmp	r0, #0
   1c0b4:	d0ec      	beq.n	1c090 <rng_json_write+0x244>
                JSON_VALUE_FLOAT64(&value, json->rssi[0]);
   1c0b6:	2306      	movs	r3, #6
   1c0b8:	f88d 3001 	strb.w	r3, [sp, #1]
   1c0bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "rssi");
   1c0c0:	492e      	ldr	r1, [pc, #184]	; (1c17c <rng_json_write+0x330>)
   1c0c2:	4628      	mov	r0, r5
   1c0c4:	f005 fa96 	bl	215f4 <json_encode_array_name>
   1c0c8:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
   1c0ca:	4628      	mov	r0, r5
   1c0cc:	f005 fa96 	bl	215fc <json_encode_array_start>
   1c0d0:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
   1c0d2:	4669      	mov	r1, sp
   1c0d4:	4628      	mov	r0, r5
   1c0d6:	f005 faa1 	bl	2161c <json_encode_array_value>
   1c0da:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
   1c0dc:	4628      	mov	r0, r5
   1c0de:	f005 fab9 	bl	21654 <json_encode_array_finish>
   1c0e2:	4306      	orrs	r6, r0
   1c0e4:	e017      	b.n	1c116 <rng_json_write+0x2ca>
                    JSON_VALUE_FLOAT64(&value, json->rssi[i]);
   1c0e6:	2306      	movs	r3, #6
   1c0e8:	f88d 3001 	strb.w	r3, [sp, #1]
   1c0ec:	f107 0318 	add.w	r3, r7, #24
   1c0f0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c0f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
   1c0fc:	4669      	mov	r1, sp
   1c0fe:	4628      	mov	r0, r5
   1c100:	f005 fa8c 	bl	2161c <json_encode_array_value>
   1c104:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->rssi)/sizeof(dpl_float64_t); i++){
   1c106:	3701      	adds	r7, #1
   1c108:	b2ff      	uxtb	r7, r7
   1c10a:	2f02      	cmp	r7, #2
   1c10c:	d9eb      	bls.n	1c0e6 <rng_json_write+0x29a>
                }
                rc |= json_encode_array_finish(&json->encoder);
   1c10e:	4628      	mov	r0, r5
   1c110:	f005 faa0 	bl	21654 <json_encode_array_finish>
   1c114:	4306      	orrs	r6, r0
        }
    }

    if(!DPL_FLOAT64_ISNAN(json->los[0])){
   1c116:	e9d4 8938 	ldrd	r8, r9, [r4, #224]	; 0xe0
   1c11a:	4642      	mov	r2, r8
   1c11c:	464b      	mov	r3, r9
   1c11e:	4640      	mov	r0, r8
   1c120:	4649      	mov	r1, r9
   1c122:	f005 ff35 	bl	21f90 <__aeabi_dcmpun>
   1c126:	2800      	cmp	r0, #0
   1c128:	d164      	bne.n	1c1f4 <rng_json_write+0x3a8>
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
   1c12a:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
   1c12e:	4602      	mov	r2, r0
   1c130:	460b      	mov	r3, r1
   1c132:	f005 ff2d 	bl	21f90 <__aeabi_dcmpun>
   1c136:	bb28      	cbnz	r0, 1c184 <rng_json_write+0x338>
                rc |= json_encode_array_name(&json->encoder, "los");
                rc |= json_encode_array_start(&json->encoder);
                rc |= json_encode_array_value(&json->encoder, &value);
                rc |= json_encode_array_finish(&json->encoder);
        }else{
                rc |= json_encode_array_name(&json->encoder, "los");
   1c138:	4911      	ldr	r1, [pc, #68]	; (1c180 <rng_json_write+0x334>)
   1c13a:	4628      	mov	r0, r5
   1c13c:	f005 fa5a 	bl	215f4 <json_encode_array_name>
   1c140:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
   1c142:	4628      	mov	r0, r5
   1c144:	f005 fa5a 	bl	215fc <json_encode_array_start>
   1c148:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
   1c14a:	2700      	movs	r7, #0
   1c14c:	e04c      	b.n	1c1e8 <rng_json_write+0x39c>
   1c14e:	bf00      	nop
   1c150:	0001be09 	.word	0x0001be09
   1c154:	00021671 	.word	0x00021671
   1c158:	0002168d 	.word	0x0002168d
   1c15c:	0002169f 	.word	0x0002169f
   1c160:	0002556c 	.word	0x0002556c
   1c164:	00025584 	.word	0x00025584
   1c168:	00025574 	.word	0x00025574
   1c16c:	0002338c 	.word	0x0002338c
   1c170:	00025578 	.word	0x00025578
   1c174:	0002557c 	.word	0x0002557c
   1c178:	00025588 	.word	0x00025588
   1c17c:	00025590 	.word	0x00025590
   1c180:	00025598 	.word	0x00025598
        if(!DPL_FLOAT64_ISNAN(json->los[0]) && DPL_FLOAT64_ISNAN(json->los[1]) && DPL_FLOAT64_ISNAN(json->los[2])){
   1c184:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
   1c188:	4602      	mov	r2, r0
   1c18a:	460b      	mov	r3, r1
   1c18c:	f005 ff00 	bl	21f90 <__aeabi_dcmpun>
   1c190:	2800      	cmp	r0, #0
   1c192:	d0d1      	beq.n	1c138 <rng_json_write+0x2ec>
                JSON_VALUE_FLOAT64(&value, json->los[0]);
   1c194:	2306      	movs	r3, #6
   1c196:	f88d 3001 	strb.w	r3, [sp, #1]
   1c19a:	e9cd 8902 	strd	r8, r9, [sp, #8]
                rc |= json_encode_array_name(&json->encoder, "los");
   1c19e:	4936      	ldr	r1, [pc, #216]	; (1c278 <rng_json_write+0x42c>)
   1c1a0:	4628      	mov	r0, r5
   1c1a2:	f005 fa27 	bl	215f4 <json_encode_array_name>
   1c1a6:	4306      	orrs	r6, r0
                rc |= json_encode_array_start(&json->encoder);
   1c1a8:	4628      	mov	r0, r5
   1c1aa:	f005 fa27 	bl	215fc <json_encode_array_start>
   1c1ae:	4306      	orrs	r6, r0
                rc |= json_encode_array_value(&json->encoder, &value);
   1c1b0:	4669      	mov	r1, sp
   1c1b2:	4628      	mov	r0, r5
   1c1b4:	f005 fa32 	bl	2161c <json_encode_array_value>
   1c1b8:	4306      	orrs	r6, r0
                rc |= json_encode_array_finish(&json->encoder);
   1c1ba:	4628      	mov	r0, r5
   1c1bc:	f005 fa4a 	bl	21654 <json_encode_array_finish>
   1c1c0:	4306      	orrs	r6, r0
   1c1c2:	e017      	b.n	1c1f4 <rng_json_write+0x3a8>
                    JSON_VALUE_FLOAT64(&value, json->los[i]);
   1c1c4:	2306      	movs	r3, #6
   1c1c6:	f88d 3001 	strb.w	r3, [sp, #1]
   1c1ca:	f107 031c 	add.w	r3, r7, #28
   1c1ce:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   1c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
                    rc |= json_encode_array_value(&json->encoder, &value);
   1c1da:	4669      	mov	r1, sp
   1c1dc:	4628      	mov	r0, r5
   1c1de:	f005 fa1d 	bl	2161c <json_encode_array_value>
   1c1e2:	4306      	orrs	r6, r0
                for (uint8_t i = 0; i< sizeof(json->los)/sizeof(dpl_float64_t); i++){
   1c1e4:	3701      	adds	r7, #1
   1c1e6:	b2ff      	uxtb	r7, r7
   1c1e8:	2f02      	cmp	r7, #2
   1c1ea:	d9eb      	bls.n	1c1c4 <rng_json_write+0x378>
                }
                rc |= json_encode_array_finish(&json->encoder);
   1c1ec:	4628      	mov	r0, r5
   1c1ee:	f005 fa31 	bl	21654 <json_encode_array_finish>
   1c1f2:	4306      	orrs	r6, r0
        }
    }

    if (!DPL_FLOAT64_ISNAN(json->ppm)){
   1c1f4:	e9d4 8940 	ldrd	r8, r9, [r4, #256]	; 0x100
   1c1f8:	4642      	mov	r2, r8
   1c1fa:	464b      	mov	r3, r9
   1c1fc:	4640      	mov	r0, r8
   1c1fe:	4649      	mov	r1, r9
   1c200:	f005 fec6 	bl	21f90 <__aeabi_dcmpun>
   1c204:	b950      	cbnz	r0, 1c21c <rng_json_write+0x3d0>
        JSON_VALUE_FLOAT64(&value, json->ppm);
   1c206:	2306      	movs	r3, #6
   1c208:	f88d 3001 	strb.w	r3, [sp, #1]
   1c20c:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "ppm", &value);
   1c210:	466a      	mov	r2, sp
   1c212:	491a      	ldr	r1, [pc, #104]	; (1c27c <rng_json_write+0x430>)
   1c214:	4628      	mov	r0, r5
   1c216:	f005 f837 	bl	21288 <json_encode_object_entry>
   1c21a:	4306      	orrs	r6, r0
    }

    if (!DPL_FLOAT64_ISNAN(json->sts)){
   1c21c:	e9d4 8942 	ldrd	r8, r9, [r4, #264]	; 0x108
   1c220:	4642      	mov	r2, r8
   1c222:	464b      	mov	r3, r9
   1c224:	4640      	mov	r0, r8
   1c226:	4649      	mov	r1, r9
   1c228:	f005 feb2 	bl	21f90 <__aeabi_dcmpun>
   1c22c:	b950      	cbnz	r0, 1c244 <rng_json_write+0x3f8>
        JSON_VALUE_FLOAT64(&value, json->sts);
   1c22e:	2306      	movs	r3, #6
   1c230:	f88d 3001 	strb.w	r3, [sp, #1]
   1c234:	e9cd 8902 	strd	r8, r9, [sp, #8]
        rc |= json_encode_object_entry(&json->encoder, "sts", &value);
   1c238:	466a      	mov	r2, sp
   1c23a:	4911      	ldr	r1, [pc, #68]	; (1c280 <rng_json_write+0x434>)
   1c23c:	4628      	mov	r0, r5
   1c23e:	f005 f823 	bl	21288 <json_encode_object_entry>
   1c242:	4306      	orrs	r6, r0
    }
    rc |= json_encode_object_finish(&json->encoder);
   1c244:	4628      	mov	r0, r5
   1c246:	f005 f9c5 	bl	215d4 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
   1c24a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1c24e:	f36f 0300 	bfc	r3, #0, #1
   1c252:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
   1c256:	4306      	orrs	r6, r0
   1c258:	d108      	bne.n	1c26c <rng_json_write+0x420>

    rng_write_line(json->encoder.je_arg, "\0", 1);
   1c25a:	2201      	movs	r2, #1
   1c25c:	4909      	ldr	r1, [pc, #36]	; (1c284 <rng_json_write+0x438>)
   1c25e:	69e0      	ldr	r0, [r4, #28]
   1c260:	f7ff fdd2 	bl	1be08 <rng_write_line>

    return rc;
}
   1c264:	4630      	mov	r0, r6
   1c266:	b005      	add	sp, #20
   1c268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   1c26c:	2300      	movs	r3, #0
   1c26e:	461a      	mov	r2, r3
   1c270:	4619      	mov	r1, r3
   1c272:	4618      	mov	r0, r3
   1c274:	f7f1 f874 	bl	d360 <__assert_func>
   1c278:	00025598 	.word	0x00025598
   1c27c:	0002559c 	.word	0x0002559c
   1c280:	000255a0 	.word	0x000255a0
   1c284:	000255a4 	.word	0x000255a4

0001c288 <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   1c288:	b510      	push	{r4, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   1c28a:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c28c:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   1c28e:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   1c292:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   1c296:	fbb3 f0f1 	udiv	r0, r3, r1
   1c29a:	fb01 3310 	mls	r3, r1, r0, r3
   1c29e:	b29b      	uxth	r3, r3
   1c2a0:	33e0      	adds	r3, #224	; 0xe0
   1c2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    wcs->carrier_integrator = frame->carrier_integrator;
   1c2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c2a8:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   1c2aa:	f8d2 00d8 	ldr.w	r0, [r2, #216]	; 0xd8
   1c2ae:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1c2b2:	69a1      	ldr	r1, [r4, #24]
   1c2b4:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1c2b8:	1a40      	subs	r0, r0, r1
   1c2ba:	eb63 030c 	sbc.w	r3, r3, ip
   1c2be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1c2c2:	60a0      	str	r0, [r4, #8]
   1c2c4:	60e3      	str	r3, [r4, #12]
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   1c2c6:	ed92 7b34 	vldr	d7, [r2, #208]	; 0xd0
   1c2ca:	ed84 7b04 	vstr	d7, [r4, #16]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   1c2ce:	1809      	adds	r1, r1, r0
   1c2d0:	69e0      	ldr	r0, [r4, #28]
   1c2d2:	eb43 0300 	adc.w	r3, r3, r0
   1c2d6:	61a1      	str	r1, [r4, #24]
   1c2d8:	61e3      	str	r3, [r4, #28]

    if(ccp->status.valid){
   1c2da:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   1c2de:	f013 0f04 	tst.w	r3, #4
   1c2e2:	d00a      	beq.n	1c2fa <wcs_timescale_cb+0x72>
        if (wcs->config.postprocess == true)
   1c2e4:	7923      	ldrb	r3, [r4, #4]
   1c2e6:	f013 0f01 	tst.w	r3, #1
   1c2ea:	d012      	beq.n	1c312 <wcs_timescale_cb+0x8a>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   1c2ec:	f7f1 fc1a 	bl	db24 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1c2f0:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1c2f4:	f7f1 fb68 	bl	d9c8 <os_eventq_put>
}
   1c2f8:	e00b      	b.n	1c312 <wcs_timescale_cb+0x8a>
            dpl_eventq_put(dpl_eventq_dflt_get(), &wcs->postprocess_ev);
    }else{
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c2fa:	2200      	movs	r2, #0
   1c2fc:	4b06      	ldr	r3, [pc, #24]	; (1c318 <wcs_timescale_cb+0x90>)
   1c2fe:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c302:	2200      	movs	r2, #0
   1c304:	2300      	movs	r3, #0
   1c306:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   1c30a:	7823      	ldrb	r3, [r4, #0]
   1c30c:	f36f 0341 	bfc	r3, #1, #1
   1c310:	7023      	strb	r3, [r4, #0]
    }
    return true;

}
   1c312:	2001      	movs	r0, #1
   1c314:	bd10      	pop	{r4, pc}
   1c316:	bf00      	nop
   1c318:	3ff00000 	.word	0x3ff00000
   1c31c:	00000000 	.word	0x00000000

0001c320 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   1c320:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c322:	b091      	sub	sp, #68	; 0x44
    assert(ev != NULL);
   1c324:	2800      	cmp	r0, #0
   1c326:	f000 8089 	beq.w	1c43c <wcs_timescale_ev+0x11c>
    return ev->ev.ev_arg;
   1c32a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   1c32c:	2c00      	cmp	r4, #0
   1c32e:	f000 808b 	beq.w	1c448 <wcs_timescale_ev+0x128>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c332:	6e27      	ldr	r7, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;
   1c334:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0

    if(ccp->status.valid){
   1c338:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
   1c33c:	f013 0f04 	tst.w	r3, #4
   1c340:	d07a      	beq.n	1c438 <wcs_timescale_ev+0x118>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1c342:	f10d 0c10 	add.w	ip, sp, #16
   1c346:	4d68      	ldr	r5, [pc, #416]	; (1c4e8 <wcs_timescale_ev+0x1c8>)
   1c348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c34a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c34e:	e895 0003 	ldmia.w	r5, {r0, r1}
   1c352:	e88c 0003 	stmia.w	ip, {r0, r1}

        if (wcs->status.initialized == 0){
   1c356:	7823      	ldrb	r3, [r4, #0]
   1c358:	f013 0f02 	tst.w	r3, #2
   1c35c:	d17a      	bne.n	1c454 <wcs_timescale_ev+0x134>
            states->time = (double) wcs->master_epoch.lo;
   1c35e:	6920      	ldr	r0, [r4, #16]
   1c360:	7d21      	ldrb	r1, [r4, #20]
   1c362:	f005 fb45 	bl	219f0 <__aeabi_ul2d>
   1c366:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c36a:	6838      	ldr	r0, [r7, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   1c36c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c36e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c372:	2200      	movs	r2, #0
   1c374:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1c376:	4798      	blx	r3
   1c378:	ec51 0b10 	vmov	r0, r1, d0
   1c37c:	2200      	movs	r2, #0
   1c37e:	4b5b      	ldr	r3, [pc, #364]	; (1c4ec <wcs_timescale_ev+0x1cc>)
   1c380:	f005 f9b6 	bl	216f0 <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   1c384:	a354      	add	r3, pc, #336	; (adr r3, 1c4d8 <wcs_timescale_ev+0x1b8>)
   1c386:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c38a:	f005 fb67 	bl	21a5c <__aeabi_dmul>
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c38e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   1c392:	2200      	movs	r2, #0
   1c394:	2300      	movs	r3, #0
   1c396:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double x0[] = {states->time, states->skew, states->drift};
   1c39a:	ed94 7b08 	vldr	d7, [r4, #32]
   1c39e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1c3a2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1c3a6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   1c3aa:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 1c4e0 <wcs_timescale_ev+0x1c0>
   1c3ae:	aa04      	add	r2, sp, #16
   1c3b0:	a90a      	add	r1, sp, #40	; 0x28
   1c3b2:	4630      	mov	r0, r6
   1c3b4:	f7fd fb7a 	bl	19aac <timescale_init>
   1c3b8:	4606      	mov	r6, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   1c3ba:	6803      	ldr	r3, [r0, #0]
   1c3bc:	689b      	ldr	r3, [r3, #8]
   1c3be:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   1c3c2:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   1c3c6:	6833      	ldr	r3, [r6, #0]
   1c3c8:	689b      	ldr	r3, [r3, #8]
   1c3ca:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   1c3ce:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   1c3d2:	6833      	ldr	r3, [r6, #0]
   1c3d4:	689b      	ldr	r3, [r3, #8]
   1c3d6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   1c3da:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   1c3de:	7823      	ldrb	r3, [r4, #0]
   1c3e0:	f043 0302 	orr.w	r3, r3, #2
   1c3e4:	7023      	strb	r3, [r4, #0]
   1c3e6:	b2db      	uxtb	r3, r3
   1c3e8:	f043 0304 	orr.w	r3, r3, #4
   1c3ec:	7023      	strb	r3, [r4, #0]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
        }

        if (wcs->status.valid){
   1c3ee:	7823      	ldrb	r3, [r4, #0]
   1c3f0:	f013 0f04 	tst.w	r3, #4
   1c3f4:	d065      	beq.n	1c4c2 <wcs_timescale_ev+0x1a2>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   1c3f6:	6833      	ldr	r3, [r6, #0]
   1c3f8:	689b      	ldr	r3, [r3, #8]
   1c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c3fe:	e9c4 2308 	strd	r2, r3, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   1c402:	6833      	ldr	r3, [r6, #0]
   1c404:	689b      	ldr	r3, [r3, #8]
   1c406:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   1c40a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   1c40e:	6833      	ldr	r3, [r6, #0]
   1c410:	689b      	ldr	r3, [r3, #8]
   1c412:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   1c416:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   1c41a:	a32f      	add	r3, pc, #188	; (adr r3, 1c4d8 <wcs_timescale_ev+0x1b8>)
   1c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c420:	f005 fc46 	bl	21cb0 <__aeabi_ddiv>
   1c424:	4602      	mov	r2, r0
   1c426:	460b      	mov	r3, r1
   1c428:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   1c42c:	2000      	movs	r0, #0
   1c42e:	492f      	ldr	r1, [pc, #188]	; (1c4ec <wcs_timescale_ev+0x1cc>)
   1c430:	f005 f95c 	bl	216ec <__aeabi_dsub>
   1c434:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   1c438:	b011      	add	sp, #68	; 0x44
   1c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(ev != NULL);
   1c43c:	2300      	movs	r3, #0
   1c43e:	461a      	mov	r2, r3
   1c440:	4619      	mov	r1, r3
   1c442:	4618      	mov	r0, r3
   1c444:	f7f0 ff8c 	bl	d360 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
   1c448:	2300      	movs	r3, #0
   1c44a:	461a      	mov	r2, r3
   1c44c:	4619      	mov	r1, r3
   1c44e:	4618      	mov	r0, r3
   1c450:	f7f0 ff86 	bl	d360 <__assert_func>
            double z[] ={(double) wcs->master_epoch.lo,
   1c454:	6920      	ldr	r0, [r4, #16]
   1c456:	7d21      	ldrb	r1, [r4, #20]
   1c458:	f005 faca 	bl	219f0 <__aeabi_ul2d>
   1c45c:	e9cd 0100 	strd	r0, r1, [sp]
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   1c460:	6838      	ldr	r0, [r7, #0]
   1c462:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1c464:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c468:	2200      	movs	r2, #0
   1c46a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   1c46c:	4798      	blx	r3
   1c46e:	ec51 0b10 	vmov	r0, r1, d0
   1c472:	2200      	movs	r2, #0
   1c474:	4b1d      	ldr	r3, [pc, #116]	; (1c4ec <wcs_timescale_ev+0x1cc>)
   1c476:	f005 f93b 	bl	216f0 <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   1c47a:	a317      	add	r3, pc, #92	; (adr r3, 1c4d8 <wcs_timescale_ev+0x1b8>)
   1c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c480:	f005 faec 	bl	21a5c <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   1c484:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   1c488:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   1c48c:	f005 fab0 	bl	219f0 <__aeabi_ul2d>
   1c490:	a311      	add	r3, pc, #68	; (adr r3, 1c4d8 <wcs_timescale_ev+0x1b8>)
   1c492:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c496:	f005 fc0b 	bl	21cb0 <__aeabi_ddiv>
   1c49a:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   1c49e:	ad0a      	add	r5, sp, #40	; 0x28
   1c4a0:	4b13      	ldr	r3, [pc, #76]	; (1c4f0 <wcs_timescale_ev+0x1d0>)
   1c4a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c4a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   1c4a8:	462b      	mov	r3, r5
   1c4aa:	aa04      	add	r2, sp, #16
   1c4ac:	4669      	mov	r1, sp
   1c4ae:	4630      	mov	r0, r6
   1c4b0:	f7fd fb92 	bl	19bd8 <timescale_main>
   1c4b4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1c4b8:	7823      	ldrb	r3, [r4, #0]
   1c4ba:	f360 0382 	bfi	r3, r0, #2, #1
   1c4be:	7023      	strb	r3, [r4, #0]
   1c4c0:	e795      	b.n	1c3ee <wcs_timescale_ev+0xce>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c4c2:	2200      	movs	r2, #0
   1c4c4:	4b09      	ldr	r3, [pc, #36]	; (1c4ec <wcs_timescale_ev+0x1cc>)
   1c4c6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c4ca:	2200      	movs	r2, #0
   1c4cc:	2300      	movs	r3, #0
   1c4ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   1c4d2:	e7b1      	b.n	1c438 <wcs_timescale_ev+0x118>
   1c4d4:	f3af 8000 	nop.w
   1c4d8:	00000000 	.word	0x00000000
   1c4dc:	422e8480 	.word	0x422e8480
   1c4e0:	a0b5ed8d 	.word	0xa0b5ed8d
   1c4e4:	3ff0c6f7 	.word	0x3ff0c6f7
   1c4e8:	000255d8 	.word	0x000255d8
   1c4ec:	3ff00000 	.word	0x3ff00000
   1c4f0:	000255f0 	.word	0x000255f0
   1c4f4:	00000000 	.word	0x00000000

0001c4f8 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   1c4f8:	b570      	push	{r4, r5, r6, lr}
   1c4fa:	b086      	sub	sp, #24
   1c4fc:	4604      	mov	r4, r0
    struct uwb_ccp_instance * ccp = wcs->ccp;
   1c4fe:	6e06      	ldr	r6, [r0, #96]	; 0x60
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   1c500:	46ec      	mov	ip, sp
   1c502:	4d1b      	ldr	r5, [pc, #108]	; (1c570 <wcs_timescale_init+0x78>)
   1c504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1c50a:	e895 0003 	ldmia.w	r5, {r0, r1}
   1c50e:	e88c 0003 	stmia.w	ip, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   1c512:	ed9f 0b15 	vldr	d0, [pc, #84]	; 1c568 <wcs_timescale_init+0x70>
   1c516:	466a      	mov	r2, sp
   1c518:	2100      	movs	r1, #0
   1c51a:	4608      	mov	r0, r1
   1c51c:	f7fd fac6 	bl	19aac <timescale_init>
   1c520:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   1c524:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1c528:	223c      	movs	r2, #60	; 0x3c
   1c52a:	2100      	movs	r1, #0
   1c52c:	4628      	mov	r0, r5
   1c52e:	f7f4 ffb0 	bl	11492 <memset>
   1c532:	2302      	movs	r3, #2
   1c534:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   1c538:	66a4      	str	r4, [r4, #104]	; 0x68
   1c53a:	4b0e      	ldr	r3, [pc, #56]	; (1c574 <wcs_timescale_init+0x7c>)
   1c53c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   1c540:	2200      	movs	r2, #0
   1c542:	4b0d      	ldr	r3, [pc, #52]	; (1c578 <wcs_timescale_init+0x80>)
   1c544:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   1c548:	2200      	movs	r2, #0
   1c54a:	2300      	movs	r3, #0
   1c54c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   1c550:	4629      	mov	r1, r5
   1c552:	6830      	ldr	r0, [r6, #0]
   1c554:	f7ec facc 	bl	8af0 <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   1c558:	4908      	ldr	r1, [pc, #32]	; (1c57c <wcs_timescale_init+0x84>)
   1c55a:	4620      	mov	r0, r4
   1c55c:	f7f4 fd94 	bl	11088 <uwb_wcs_set_postprocess>
}
   1c560:	4620      	mov	r0, r4
   1c562:	b006      	add	sp, #24
   1c564:	bd70      	pop	{r4, r5, r6, pc}
   1c566:	bf00      	nop
   1c568:	a0b5ed8d 	.word	0xa0b5ed8d
   1c56c:	3ff0c6f7 	.word	0x3ff0c6f7
   1c570:	000255d8 	.word	0x000255d8
   1c574:	0001c289 	.word	0x0001c289
   1c578:	3ff00000 	.word	0x3ff00000
   1c57c:	0001c321 	.word	0x0001c321

0001c580 <wcs_timescale_free>:
{
   1c580:	b510      	push	{r4, lr}
   1c582:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   1c584:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c586:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
   1c58a:	6818      	ldr	r0, [r3, #0]
   1c58c:	f7ec fad5 	bl	8b3a <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   1c590:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   1c594:	f7fd fb04 	bl	19ba0 <timescale_free>
}
   1c598:	bd10      	pop	{r4, pc}
	...

0001c59c <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   1c59c:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1c59e:	f7f5 fc08 	bl	11db2 <dpl_cputime_get32>
   1c5a2:	4601      	mov	r1, r0
   1c5a4:	480a      	ldr	r0, [pc, #40]	; (1c5d0 <wcs_timescale_pkg_init+0x34>)
   1c5a6:	f7f5 fb75 	bl	11c94 <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1c5aa:	2400      	movs	r4, #0
   1c5ac:	e000      	b.n	1c5b0 <wcs_timescale_pkg_init+0x14>
   1c5ae:	3401      	adds	r4, #1
   1c5b0:	2c02      	cmp	r4, #2
   1c5b2:	dc0b      	bgt.n	1c5cc <wcs_timescale_pkg_init+0x30>
        udev = uwb_dev_idx_lookup(i);
   1c5b4:	4620      	mov	r0, r4
   1c5b6:	f7ec fa6b 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   1c5ba:	2800      	cmp	r0, #0
   1c5bc:	d0f7      	beq.n	1c5ae <wcs_timescale_pkg_init+0x12>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   1c5be:	2101      	movs	r1, #1
   1c5c0:	f7ec faeb 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   1c5c4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1c5c6:	f7ff ff97 	bl	1c4f8 <wcs_timescale_init>
   1c5ca:	e7f0      	b.n	1c5ae <wcs_timescale_pkg_init+0x12>
    }
}
   1c5cc:	bd10      	pop	{r4, pc}
   1c5ce:	bf00      	nop
   1c5d0:	000255a8 	.word	0x000255a8

0001c5d4 <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   1c5d4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1c5d6:	2400      	movs	r4, #0
   1c5d8:	e000      	b.n	1c5dc <wcs_timescale_pkg_down+0x8>
   1c5da:	3401      	adds	r4, #1
   1c5dc:	2c02      	cmp	r4, #2
   1c5de:	dc0c      	bgt.n	1c5fa <wcs_timescale_pkg_down+0x26>
        udev = uwb_dev_idx_lookup(i);
   1c5e0:	4620      	mov	r0, r4
   1c5e2:	f7ec fa55 	bl	8a90 <uwb_dev_idx_lookup>
        if (!udev) {
   1c5e6:	2800      	cmp	r0, #0
   1c5e8:	d0f7      	beq.n	1c5da <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   1c5ea:	2102      	movs	r1, #2
   1c5ec:	f7ec fad5 	bl	8b9a <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   1c5f0:	2800      	cmp	r0, #0
   1c5f2:	d0f2      	beq.n	1c5da <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs_timescale_free(wcs);
   1c5f4:	f7ff ffc4 	bl	1c580 <wcs_timescale_free>
   1c5f8:	e7ef      	b.n	1c5da <wcs_timescale_pkg_down+0x6>
    }

    return 0;
}
   1c5fa:	2000      	movs	r0, #0
   1c5fc:	bd10      	pop	{r4, pc}

0001c5fe <fwrite>:
{
   1c5fe:	4684      	mov	ip, r0
   1c600:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
   1c602:	681b      	ldr	r3, [r3, #0]
   1c604:	681b      	ldr	r3, [r3, #0]
   1c606:	b143      	cbz	r3, 1c61a <fwrite+0x1c>
{
   1c608:	b510      	push	{r4, lr}
   1c60a:	460c      	mov	r4, r1
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1c60c:	fb01 f202 	mul.w	r2, r1, r2
   1c610:	4661      	mov	r1, ip
   1c612:	4798      	blx	r3
   1c614:	fbb0 f0f4 	udiv	r0, r0, r4
}
   1c618:	bd10      	pop	{r4, pc}
    if (stream->vmt->write == NULL) return 0;
   1c61a:	2000      	movs	r0, #0
}
   1c61c:	4770      	bx	lr
	...

0001c620 <puts>:
{
   1c620:	b538      	push	{r3, r4, r5, lr}
   1c622:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
   1c624:	f000 f85c 	bl	1c6e0 <strlen>
   1c628:	4602      	mov	r2, r0
   1c62a:	4b08      	ldr	r3, [pc, #32]	; (1c64c <puts+0x2c>)
   1c62c:	681d      	ldr	r5, [r3, #0]
   1c62e:	462b      	mov	r3, r5
   1c630:	2101      	movs	r1, #1
   1c632:	4620      	mov	r0, r4
   1c634:	f7ff ffe3 	bl	1c5fe <fwrite>
   1c638:	4604      	mov	r4, r0
   1c63a:	462b      	mov	r3, r5
   1c63c:	2201      	movs	r2, #1
   1c63e:	4611      	mov	r1, r2
   1c640:	4803      	ldr	r0, [pc, #12]	; (1c650 <puts+0x30>)
   1c642:	f7ff ffdc 	bl	1c5fe <fwrite>
}
   1c646:	4420      	add	r0, r4
   1c648:	bd38      	pop	{r3, r4, r5, pc}
   1c64a:	bf00      	nop
   1c64c:	00023c00 	.word	0x00023c00
   1c650:	00023d90 	.word	0x00023d90

0001c654 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   1c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   1c656:	b300      	cbz	r0, 1c69a <realloc+0x46>
   1c658:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1c65a:	1e4b      	subs	r3, r1, #1
   1c65c:	f113 0f12 	cmn.w	r3, #18
   1c660:	d820      	bhi.n	1c6a4 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1c662:	311f      	adds	r1, #31
   1c664:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1c668:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   1c66c:	42a5      	cmp	r5, r4
   1c66e:	d302      	bcc.n	1c676 <realloc+0x22>
   1c670:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   1c674:	d21c      	bcs.n	1c6b0 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   1c676:	3d10      	subs	r5, #16

		newptr = malloc(size);
   1c678:	4620      	mov	r0, r4
   1c67a:	f7f4 fe8d 	bl	11398 <malloc>
                if (newptr) {
   1c67e:	4607      	mov	r7, r0
   1c680:	b1a0      	cbz	r0, 1c6ac <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   1c682:	4622      	mov	r2, r4
   1c684:	42ac      	cmp	r4, r5
   1c686:	bf28      	it	cs
   1c688:	462a      	movcs	r2, r5
   1c68a:	4631      	mov	r1, r6
   1c68c:	f7f4 fef4 	bl	11478 <memcpy>
                    free(ptr);
   1c690:	4630      	mov	r0, r6
   1c692:	f7f4 feb7 	bl	11404 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   1c696:	4638      	mov	r0, r7
   1c698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   1c69a:	4608      	mov	r0, r1
   1c69c:	f7f4 fe7c 	bl	11398 <malloc>
   1c6a0:	4607      	mov	r7, r0
   1c6a2:	e7f8      	b.n	1c696 <realloc+0x42>
		free(ptr);
   1c6a4:	f7f4 feae 	bl	11404 <free>
		return NULL;
   1c6a8:	2700      	movs	r7, #0
   1c6aa:	e7f4      	b.n	1c696 <realloc+0x42>
                    newptr = ptr;
   1c6ac:	4637      	mov	r7, r6
		return newptr;
   1c6ae:	e7f2      	b.n	1c696 <realloc+0x42>
		return ptr;
   1c6b0:	4607      	mov	r7, r0
   1c6b2:	e7f0      	b.n	1c696 <realloc+0x42>

0001c6b4 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1c6b4:	e000      	b.n	1c6b8 <strchr+0x4>
		if (!*s)
			return NULL;
		s++;
   1c6b6:	3001      	adds	r0, #1
	while (*s != (char)c) {
   1c6b8:	7803      	ldrb	r3, [r0, #0]
   1c6ba:	b2ca      	uxtb	r2, r1
   1c6bc:	4293      	cmp	r3, r2
   1c6be:	d003      	beq.n	1c6c8 <strchr+0x14>
		if (!*s)
   1c6c0:	2b00      	cmp	r3, #0
   1c6c2:	d1f8      	bne.n	1c6b6 <strchr+0x2>
			return NULL;
   1c6c4:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   1c6c6:	4770      	bx	lr
   1c6c8:	4770      	bx	lr

0001c6ca <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   1c6ca:	b410      	push	{r4}
	char *q = dst;
   1c6cc:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1c6ce:	780c      	ldrb	r4, [r1, #0]
   1c6d0:	3101      	adds	r1, #1
   1c6d2:	7014      	strb	r4, [r2, #0]
   1c6d4:	3201      	adds	r2, #1
	} while (ch);
   1c6d6:	2c00      	cmp	r4, #0
   1c6d8:	d1f9      	bne.n	1c6ce <strcpy+0x4>

	return dst;
}
   1c6da:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c6de:	4770      	bx	lr

0001c6e0 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1c6e0:	4603      	mov	r3, r0
	while (*ss)
   1c6e2:	e000      	b.n	1c6e6 <strlen+0x6>
		ss++;
   1c6e4:	3301      	adds	r3, #1
	while (*ss)
   1c6e6:	781a      	ldrb	r2, [r3, #0]
   1c6e8:	2a00      	cmp	r2, #0
   1c6ea:	d1fb      	bne.n	1c6e4 <strlen+0x4>
	return ss - s;
}
   1c6ec:	1a18      	subs	r0, r3, r0
   1c6ee:	4770      	bx	lr

0001c6f0 <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   1c6f0:	b410      	push	{r4}
   1c6f2:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   1c6f4:	2000      	movs	r0, #0

	while (n--) {
   1c6f6:	4614      	mov	r4, r2
   1c6f8:	3a01      	subs	r2, #1
   1c6fa:	b13c      	cbz	r4, 1c70c <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   1c6fc:	f813 4b01 	ldrb.w	r4, [r3], #1
   1c700:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   1c704:	1a20      	subs	r0, r4, r0
   1c706:	d101      	bne.n	1c70c <strncmp+0x1c>
   1c708:	2c00      	cmp	r4, #0
   1c70a:	d1f4      	bne.n	1c6f6 <strncmp+0x6>
			break;
	}

	return d;
}
   1c70c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c710:	4770      	bx	lr

0001c712 <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   1c712:	4603      	mov	r3, r0
	const char *found = NULL;
   1c714:	2000      	movs	r0, #0

	while (*s) {
   1c716:	e000      	b.n	1c71a <strrchr+0x8>
		if (*s == (char)c)
			found = s;
		s++;
   1c718:	3301      	adds	r3, #1
	while (*s) {
   1c71a:	781a      	ldrb	r2, [r3, #0]
   1c71c:	b12a      	cbz	r2, 1c72a <strrchr+0x18>
		if (*s == (char)c)
   1c71e:	fa5f fc81 	uxtb.w	ip, r1
   1c722:	4594      	cmp	ip, r2
   1c724:	d1f8      	bne.n	1c718 <strrchr+0x6>
			found = s;
   1c726:	4618      	mov	r0, r3
   1c728:	e7f6      	b.n	1c718 <strrchr+0x6>
	}

	return (char *)found;
}
   1c72a:	4770      	bx	lr

0001c72c <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1c72c:	b538      	push	{r3, r4, r5, lr}
   1c72e:	460d      	mov	r5, r1
   1c730:	4614      	mov	r4, r2
	if (s)
   1c732:	b100      	cbz	r0, 1c736 <strtok_r+0xa>
		*holder = s;
   1c734:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1c736:	4629      	mov	r1, r5
   1c738:	4620      	mov	r0, r4
   1c73a:	f000 f89d 	bl	1c878 <strsep>
	} while (s && !*s);
   1c73e:	4603      	mov	r3, r0
   1c740:	b110      	cbz	r0, 1c748 <strtok_r+0x1c>
   1c742:	7800      	ldrb	r0, [r0, #0]
   1c744:	2800      	cmp	r0, #0
   1c746:	d0f6      	beq.n	1c736 <strtok_r+0xa>

	return s;
}
   1c748:	4618      	mov	r0, r3
   1c74a:	bd38      	pop	{r3, r4, r5, pc}

0001c74c <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1c74c:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c74e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c752:	f000 f811 	bl	1c778 <strntoumax>
}
   1c756:	bd08      	pop	{r3, pc}

0001c758 <strtoll>:
{
   1c758:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c75e:	f000 f80b 	bl	1c778 <strntoumax>
}
   1c762:	bd08      	pop	{r3, pc}

0001c764 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c764:	b508      	push	{r3, lr}
   1c766:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1c768:	4601      	mov	r1, r0
   1c76a:	4b02      	ldr	r3, [pc, #8]	; (1c774 <vprintf+0x10>)
   1c76c:	6818      	ldr	r0, [r3, #0]
   1c76e:	f7f5 fa8d 	bl	11c8c <vfprintf>
}
   1c772:	bd08      	pop	{r3, pc}
   1c774:	00023c00 	.word	0x00023c00

0001c778 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1c778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c77a:	4604      	mov	r4, r0
   1c77c:	460d      	mov	r5, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1c77e:	e001      	b.n	1c784 <strntoumax+0xc>
		nptr++;
   1c780:	3401      	adds	r4, #1
		n--;
   1c782:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1c784:	b143      	cbz	r3, 1c798 <strntoumax+0x20>
   1c786:	7821      	ldrb	r1, [r4, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1c788:	2920      	cmp	r1, #32
   1c78a:	d0f9      	beq.n	1c780 <strntoumax+0x8>
   1c78c:	290a      	cmp	r1, #10
   1c78e:	d0f7      	beq.n	1c780 <strntoumax+0x8>
   1c790:	2909      	cmp	r1, #9
   1c792:	d0f5      	beq.n	1c780 <strntoumax+0x8>
   1c794:	290d      	cmp	r1, #13
   1c796:	d0f3      	beq.n	1c780 <strntoumax+0x8>
	}

	/* Single optional + or - */
	if (n) {
   1c798:	b16b      	cbz	r3, 1c7b6 <strntoumax+0x3e>
		char c = *nptr;
   1c79a:	7827      	ldrb	r7, [r4, #0]
		if (c == '-' || c == '+') {
   1c79c:	2f2d      	cmp	r7, #45	; 0x2d
   1c79e:	d003      	beq.n	1c7a8 <strntoumax+0x30>
   1c7a0:	2f2b      	cmp	r7, #43	; 0x2b
   1c7a2:	d001      	beq.n	1c7a8 <strntoumax+0x30>
	int minus = 0;
   1c7a4:	2700      	movs	r7, #0
   1c7a6:	e007      	b.n	1c7b8 <strntoumax+0x40>
			minus = (c == '-');
   1c7a8:	2f2d      	cmp	r7, #45	; 0x2d
   1c7aa:	bf14      	ite	ne
   1c7ac:	2700      	movne	r7, #0
   1c7ae:	2701      	moveq	r7, #1
			nptr++;
   1c7b0:	3401      	adds	r4, #1
			n--;
   1c7b2:	3b01      	subs	r3, #1
   1c7b4:	e000      	b.n	1c7b8 <strntoumax+0x40>
	int minus = 0;
   1c7b6:	2700      	movs	r7, #0
		}
	}

	if (base == 0) {
   1c7b8:	b9ba      	cbnz	r2, 1c7ea <strntoumax+0x72>
		if (n >= 2 && nptr[0] == '0' &&
   1c7ba:	2b01      	cmp	r3, #1
   1c7bc:	d902      	bls.n	1c7c4 <strntoumax+0x4c>
   1c7be:	7822      	ldrb	r2, [r4, #0]
   1c7c0:	2a30      	cmp	r2, #48	; 0x30
   1c7c2:	d005      	beq.n	1c7d0 <strntoumax+0x58>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1c7c4:	b31b      	cbz	r3, 1c80e <strntoumax+0x96>
   1c7c6:	7822      	ldrb	r2, [r4, #0]
   1c7c8:	2a30      	cmp	r2, #48	; 0x30
   1c7ca:	d00a      	beq.n	1c7e2 <strntoumax+0x6a>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1c7cc:	220a      	movs	r2, #10
   1c7ce:	e00e      	b.n	1c7ee <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c7d0:	7862      	ldrb	r2, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c7d2:	2a78      	cmp	r2, #120	; 0x78
   1c7d4:	d001      	beq.n	1c7da <strntoumax+0x62>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c7d6:	2a58      	cmp	r2, #88	; 0x58
   1c7d8:	d1f4      	bne.n	1c7c4 <strntoumax+0x4c>
			n -= 2;
   1c7da:	3b02      	subs	r3, #2
			nptr += 2;
   1c7dc:	3402      	adds	r4, #2
			base = 16;
   1c7de:	2210      	movs	r2, #16
   1c7e0:	e005      	b.n	1c7ee <strntoumax+0x76>
			n--;
   1c7e2:	3b01      	subs	r3, #1
			nptr++;
   1c7e4:	3401      	adds	r4, #1
			base = 8;
   1c7e6:	2208      	movs	r2, #8
   1c7e8:	e001      	b.n	1c7ee <strntoumax+0x76>
		}
	} else if (base == 16) {
   1c7ea:	2a10      	cmp	r2, #16
   1c7ec:	d002      	beq.n	1c7f4 <strntoumax+0x7c>
			base = 16;
   1c7ee:	2000      	movs	r0, #0
   1c7f0:	4601      	mov	r1, r0
   1c7f2:	e028      	b.n	1c846 <strntoumax+0xce>
		if (n >= 2 && nptr[0] == '0' &&
   1c7f4:	2b01      	cmp	r3, #1
   1c7f6:	d9fa      	bls.n	1c7ee <strntoumax+0x76>
   1c7f8:	7821      	ldrb	r1, [r4, #0]
   1c7fa:	2930      	cmp	r1, #48	; 0x30
   1c7fc:	d1f7      	bne.n	1c7ee <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c7fe:	7861      	ldrb	r1, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c800:	2978      	cmp	r1, #120	; 0x78
   1c802:	d001      	beq.n	1c808 <strntoumax+0x90>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c804:	2958      	cmp	r1, #88	; 0x58
   1c806:	d1f2      	bne.n	1c7ee <strntoumax+0x76>
			n -= 2;
   1c808:	3b02      	subs	r3, #2
			nptr += 2;
   1c80a:	3402      	adds	r4, #2
   1c80c:	e7ef      	b.n	1c7ee <strntoumax+0x76>
			base = 10;
   1c80e:	220a      	movs	r2, #10
   1c810:	e7ed      	b.n	1c7ee <strntoumax+0x76>
		return ch - '0';
   1c812:	46b4      	mov	ip, r6
   1c814:	e004      	b.n	1c820 <strntoumax+0xa8>
		return ch - 'A' + 10;
   1c816:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
   1c81a:	e001      	b.n	1c820 <strntoumax+0xa8>
		return ch - 'a' + 10;
   1c81c:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c820:	f1bc 0f00 	cmp.w	ip, #0
   1c824:	db21      	blt.n	1c86a <strntoumax+0xf2>
   1c826:	4562      	cmp	r2, ip
   1c828:	dd1f      	ble.n	1c86a <strntoumax+0xf2>
		v = v * base + d;
   1c82a:	17d6      	asrs	r6, r2, #31
   1c82c:	fb02 fe01 	mul.w	lr, r2, r1
   1c830:	fb00 e106 	mla	r1, r0, r6, lr
   1c834:	fba2 0600 	umull	r0, r6, r2, r0
   1c838:	4431      	add	r1, r6
   1c83a:	eb10 000c 	adds.w	r0, r0, ip
   1c83e:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
		n--;
   1c842:	3b01      	subs	r3, #1
		nptr++;
   1c844:	3401      	adds	r4, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c846:	b183      	cbz	r3, 1c86a <strntoumax+0xf2>
   1c848:	f894 c000 	ldrb.w	ip, [r4]
	if (ch >= '0' && ch <= '9') {
   1c84c:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
   1c850:	2e09      	cmp	r6, #9
   1c852:	d9de      	bls.n	1c812 <strntoumax+0x9a>
	} else if (ch >= 'A' && ch <= 'Z') {
   1c854:	f1ac 0641 	sub.w	r6, ip, #65	; 0x41
   1c858:	2e19      	cmp	r6, #25
   1c85a:	d9dc      	bls.n	1c816 <strntoumax+0x9e>
	} else if (ch >= 'a' && ch <= 'z') {
   1c85c:	f1ac 0661 	sub.w	r6, ip, #97	; 0x61
   1c860:	2e19      	cmp	r6, #25
   1c862:	d9db      	bls.n	1c81c <strntoumax+0xa4>
		return -1;
   1c864:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1c868:	e7da      	b.n	1c820 <strntoumax+0xa8>
	}

	if (endptr)
   1c86a:	b105      	cbz	r5, 1c86e <strntoumax+0xf6>
		*endptr = (char *)nptr;
   1c86c:	602c      	str	r4, [r5, #0]

	return minus ? -v : v;
   1c86e:	b117      	cbz	r7, 1c876 <strntoumax+0xfe>
   1c870:	4240      	negs	r0, r0
   1c872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   1c876:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c878 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1c878:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1c87a:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1c87c:	b14d      	cbz	r5, 1c892 <strsep+0x1a>
   1c87e:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1c880:	4628      	mov	r0, r5
   1c882:	f000 f808 	bl	1c896 <strpbrk>
	if (e)
   1c886:	4603      	mov	r3, r0
   1c888:	b110      	cbz	r0, 1c890 <strsep+0x18>
		*e++ = '\0';
   1c88a:	2200      	movs	r2, #0
   1c88c:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   1c890:	6023      	str	r3, [r4, #0]
	return s;
}
   1c892:	4628      	mov	r0, r5
   1c894:	bd38      	pop	{r3, r4, r5, pc}

0001c896 <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   1c896:	468c      	mov	ip, r1
  const char *c = s2;
  if (!*s1)
   1c898:	7803      	ldrb	r3, [r0, #0]
   1c89a:	b183      	cbz	r3, 1c8be <strpbrk+0x28>
  const char *c = s2;
   1c89c:	460a      	mov	r2, r1
   1c89e:	e001      	b.n	1c8a4 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1c8a0:	b953      	cbnz	r3, 1c8b8 <strpbrk+0x22>
	break;
      s1++;
   1c8a2:	3001      	adds	r0, #1
  while (*s1)
   1c8a4:	7801      	ldrb	r1, [r0, #0]
   1c8a6:	b139      	cbz	r1, 1c8b8 <strpbrk+0x22>
      for (c = s2; *c; c++)
   1c8a8:	4662      	mov	r2, ip
   1c8aa:	7813      	ldrb	r3, [r2, #0]
   1c8ac:	2b00      	cmp	r3, #0
   1c8ae:	d0f7      	beq.n	1c8a0 <strpbrk+0xa>
	  if (*s1 == *c)
   1c8b0:	428b      	cmp	r3, r1
   1c8b2:	d0f5      	beq.n	1c8a0 <strpbrk+0xa>
      for (c = s2; *c; c++)
   1c8b4:	3201      	adds	r2, #1
   1c8b6:	e7f8      	b.n	1c8aa <strpbrk+0x14>
    }

  if (*c == '\0')
   1c8b8:	7813      	ldrb	r3, [r2, #0]
   1c8ba:	b113      	cbz	r3, 1c8c2 <strpbrk+0x2c>
   1c8bc:	4770      	bx	lr
    return (char *) NULL;
   1c8be:	2000      	movs	r0, #0
   1c8c0:	4770      	bx	lr
    s1 = NULL;
   1c8c2:	2000      	movs	r0, #0

  return (char *) s1;
}
   1c8c4:	4770      	bx	lr

0001c8c6 <imgr_vercmp>:
 * @return                       1 if a > b
 */
static int
imgr_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1c8c6:	7802      	ldrb	r2, [r0, #0]
   1c8c8:	780b      	ldrb	r3, [r1, #0]
   1c8ca:	429a      	cmp	r2, r3
   1c8cc:	d30c      	bcc.n	1c8e8 <imgr_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1c8ce:	d80e      	bhi.n	1c8ee <imgr_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1c8d0:	7842      	ldrb	r2, [r0, #1]
   1c8d2:	784b      	ldrb	r3, [r1, #1]
   1c8d4:	429a      	cmp	r2, r3
   1c8d6:	d30c      	bcc.n	1c8f2 <imgr_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1c8d8:	d80e      	bhi.n	1c8f8 <imgr_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1c8da:	8842      	ldrh	r2, [r0, #2]
   1c8dc:	884b      	ldrh	r3, [r1, #2]
   1c8de:	429a      	cmp	r2, r3
   1c8e0:	d30c      	bcc.n	1c8fc <imgr_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1c8e2:	d80e      	bhi.n	1c902 <imgr_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1c8e4:	2000      	movs	r0, #0
   1c8e6:	4770      	bx	lr
        return -1;
   1c8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c8ec:	4770      	bx	lr
        return 1;
   1c8ee:	2001      	movs	r0, #1
   1c8f0:	4770      	bx	lr
        return -1;
   1c8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c8f6:	4770      	bx	lr
        return 1;
   1c8f8:	2001      	movs	r0, #1
   1c8fa:	4770      	bx	lr
        return -1;
   1c8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c900:	4770      	bx	lr
        return 1;
   1c902:	2001      	movs	r0, #1
}
   1c904:	4770      	bx	lr

0001c906 <imgr_img_tlvs>:
{
   1c906:	b530      	push	{r4, r5, lr}
   1c908:	b083      	sub	sp, #12
   1c90a:	4614      	mov	r4, r2
   1c90c:	461d      	mov	r5, r3
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   1c90e:	2304      	movs	r3, #4
   1c910:	eb0d 0203 	add.w	r2, sp, r3
   1c914:	6821      	ldr	r1, [r4, #0]
   1c916:	f001 fdaf 	bl	1e478 <flash_area_read>
    if (rc) {
   1c91a:	b968      	cbnz	r0, 1c938 <imgr_img_tlvs+0x32>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   1c91c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1c920:	f646 1307 	movw	r3, #26887	; 0x6907
   1c924:	429a      	cmp	r2, r3
   1c926:	d10b      	bne.n	1c940 <imgr_img_tlvs+0x3a>
    *start_off += sizeof(tlv_info);
   1c928:	6822      	ldr	r2, [r4, #0]
   1c92a:	3204      	adds	r2, #4
   1c92c:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1c92e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c932:	441a      	add	r2, r3
   1c934:	602a      	str	r2, [r5, #0]
    rc = 0;
   1c936:	e001      	b.n	1c93c <imgr_img_tlvs+0x36>
        rc = -1;
   1c938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c93c:	b003      	add	sp, #12
   1c93e:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   1c940:	2001      	movs	r0, #1
    return rc;
   1c942:	e7fb      	b.n	1c93c <imgr_img_tlvs+0x36>

0001c944 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   1c944:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1c946:	f100 040c 	add.w	r4, r0, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1c94a:	2202      	movs	r2, #2
   1c94c:	490e      	ldr	r1, [pc, #56]	; (1c988 <imgr_upload_good_rsp+0x44>)
   1c94e:	4620      	mov	r0, r4
   1c950:	f7fa fa73 	bl	16e3a <cbor_encode_text_string>
   1c954:	4605      	mov	r5, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1c956:	2200      	movs	r2, #0
   1c958:	2300      	movs	r3, #0
   1c95a:	4620      	mov	r0, r4
   1c95c:	f7fa f9f2 	bl	16d44 <cbor_encode_int>
   1c960:	4305      	orrs	r5, r0
   1c962:	2203      	movs	r2, #3
   1c964:	4909      	ldr	r1, [pc, #36]	; (1c98c <imgr_upload_good_rsp+0x48>)
   1c966:	4620      	mov	r0, r4
   1c968:	f7fa fa67 	bl	16e3a <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   1c96c:	4305      	orrs	r5, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   1c96e:	4b08      	ldr	r3, [pc, #32]	; (1c990 <imgr_upload_good_rsp+0x4c>)
   1c970:	685a      	ldr	r2, [r3, #4]
   1c972:	2300      	movs	r3, #0
   1c974:	4620      	mov	r0, r4
   1c976:	f7fa f9e5 	bl	16d44 <cbor_encode_int>

    if (err != 0) {
   1c97a:	ea55 0300 	orrs.w	r3, r5, r0
   1c97e:	d101      	bne.n	1c984 <imgr_upload_good_rsp+0x40>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1c980:	2000      	movs	r0, #0
}
   1c982:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1c984:	2002      	movs	r0, #2
   1c986:	e7fc      	b.n	1c982 <imgr_upload_good_rsp+0x3e>
   1c988:	000242b8 	.word	0x000242b8
   1c98c:	000241dc 	.word	0x000241dc
   1c990:	20007194 	.word	0x20007194

0001c994 <imgr_read_info>:
{
   1c994:	b570      	push	{r4, r5, r6, lr}
   1c996:	b08c      	sub	sp, #48	; 0x30
   1c998:	460c      	mov	r4, r1
   1c99a:	4615      	mov	r5, r2
   1c99c:	461e      	mov	r6, r3
    data_end = 0;
   1c99e:	2200      	movs	r2, #0
   1c9a0:	9201      	str	r2, [sp, #4]
    area_id = flash_area_id_from_image_slot(image_slot);
   1c9a2:	f001 fdc9 	bl	1e538 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1c9a6:	a90b      	add	r1, sp, #44	; 0x2c
   1c9a8:	b2c0      	uxtb	r0, r0
   1c9aa:	f001 fd05 	bl	1e3b8 <flash_area_open>
    if (rc2) {
   1c9ae:	2800      	cmp	r0, #0
   1c9b0:	d163      	bne.n	1ca7a <imgr_read_info+0xe6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   1c9b2:	2320      	movs	r3, #32
   1c9b4:	aa03      	add	r2, sp, #12
   1c9b6:	2100      	movs	r1, #0
   1c9b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c9ba:	f001 fdb6 	bl	1e52a <flash_area_read_is_empty>
    if (rc2 < 0) {
   1c9be:	2800      	cmp	r0, #0
   1c9c0:	db5e      	blt.n	1ca80 <imgr_read_info+0xec>
    if (ver) {
   1c9c2:	b11c      	cbz	r4, 1c9cc <imgr_read_info+0x38>
        memset(ver, 0xff, sizeof(*ver));
   1c9c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c9c8:	6023      	str	r3, [r4, #0]
   1c9ca:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   1c9cc:	9a03      	ldr	r2, [sp, #12]
   1c9ce:	4b2f      	ldr	r3, [pc, #188]	; (1ca8c <imgr_read_info+0xf8>)
   1c9d0:	429a      	cmp	r2, r3
   1c9d2:	d005      	beq.n	1c9e0 <imgr_read_info+0x4c>
    } else if (rc2 == 1) {
   1c9d4:	2801      	cmp	r0, #1
   1c9d6:	d020      	beq.n	1ca1a <imgr_read_info+0x86>
        rc = 1;
   1c9d8:	2401      	movs	r4, #1
}
   1c9da:	4620      	mov	r0, r4
   1c9dc:	b00c      	add	sp, #48	; 0x30
   1c9de:	bd70      	pop	{r4, r5, r6, pc}
        if (ver) {
   1c9e0:	b11c      	cbz	r4, 1c9ea <imgr_read_info+0x56>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   1c9e2:	ab08      	add	r3, sp, #32
   1c9e4:	cb03      	ldmia	r3!, {r0, r1}
   1c9e6:	6020      	str	r0, [r4, #0]
   1c9e8:	6061      	str	r1, [r4, #4]
    if (flags) {
   1c9ea:	b10e      	cbz	r6, 1c9f0 <imgr_read_info+0x5c>
        *flags = hdr->ih_flags;
   1c9ec:	9b07      	ldr	r3, [sp, #28]
   1c9ee:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   1c9f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1c9f4:	9a06      	ldr	r2, [sp, #24]
   1c9f6:	4413      	add	r3, r2
   1c9f8:	9302      	str	r3, [sp, #8]
    rc = imgr_img_tlvs(fa, hdr, &data_off, &data_end);
   1c9fa:	ab01      	add	r3, sp, #4
   1c9fc:	aa02      	add	r2, sp, #8
   1c9fe:	a903      	add	r1, sp, #12
   1ca00:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ca02:	f7ff ff80 	bl	1c906 <imgr_img_tlvs>
    if (rc) {
   1ca06:	4604      	mov	r4, r0
   1ca08:	2800      	cmp	r0, #0
   1ca0a:	d1e6      	bne.n	1c9da <imgr_read_info+0x46>
    if (data_end > fa->fa_size) {
   1ca0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ca0e:	689a      	ldr	r2, [r3, #8]
   1ca10:	9b01      	ldr	r3, [sp, #4]
   1ca12:	429a      	cmp	r2, r3
   1ca14:	d209      	bcs.n	1ca2a <imgr_read_info+0x96>
        rc = 1;
   1ca16:	2401      	movs	r4, #1
   1ca18:	e7df      	b.n	1c9da <imgr_read_info+0x46>
        rc = 2;
   1ca1a:	2402      	movs	r4, #2
   1ca1c:	e7dd      	b.n	1c9da <imgr_read_info+0x46>
            data_off += sizeof(*tlv) + tlv->it_len;
   1ca1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ca22:	9a02      	ldr	r2, [sp, #8]
   1ca24:	4413      	add	r3, r2
   1ca26:	3304      	adds	r3, #4
   1ca28:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof(*tlv) <= data_end) {
   1ca2a:	9902      	ldr	r1, [sp, #8]
   1ca2c:	1d0a      	adds	r2, r1, #4
   1ca2e:	9b01      	ldr	r3, [sp, #4]
   1ca30:	429a      	cmp	r2, r3
   1ca32:	d820      	bhi.n	1ca76 <imgr_read_info+0xe2>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   1ca34:	2304      	movs	r3, #4
   1ca36:	aa03      	add	r2, sp, #12
   1ca38:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ca3a:	f001 fd76 	bl	1e52a <flash_area_read_is_empty>
        if (rc2 < 0) {
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	dbcb      	blt.n	1c9da <imgr_read_info+0x46>
        if (rc2 == 1) {
   1ca42:	2801      	cmp	r0, #1
   1ca44:	d01f      	beq.n	1ca86 <imgr_read_info+0xf2>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1ca46:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ca4a:	2b10      	cmp	r3, #16
   1ca4c:	d1e7      	bne.n	1ca1e <imgr_read_info+0x8a>
          tlv->it_len != IMGMGR_HASH_LEN) {
   1ca4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1ca52:	2b20      	cmp	r3, #32
   1ca54:	d1e3      	bne.n	1ca1e <imgr_read_info+0x8a>
        data_off += sizeof(*tlv);
   1ca56:	9902      	ldr	r1, [sp, #8]
   1ca58:	3104      	adds	r1, #4
   1ca5a:	9102      	str	r1, [sp, #8]
        if (hash) {
   1ca5c:	2d00      	cmp	r5, #0
   1ca5e:	d0bc      	beq.n	1c9da <imgr_read_info+0x46>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   1ca60:	f101 0320 	add.w	r3, r1, #32
   1ca64:	9a01      	ldr	r2, [sp, #4]
   1ca66:	4293      	cmp	r3, r2
   1ca68:	d8b7      	bhi.n	1c9da <imgr_read_info+0x46>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1ca6a:	2320      	movs	r3, #32
   1ca6c:	462a      	mov	r2, r5
   1ca6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ca70:	f001 fd02 	bl	1e478 <flash_area_read>
            if (rc2) {
   1ca74:	e7b1      	b.n	1c9da <imgr_read_info+0x46>
    rc = 1;
   1ca76:	2401      	movs	r4, #1
   1ca78:	e7af      	b.n	1c9da <imgr_read_info+0x46>
        return -1;
   1ca7a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ca7e:	e7ac      	b.n	1c9da <imgr_read_info+0x46>
    int rc = -1;
   1ca80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ca84:	e7a9      	b.n	1c9da <imgr_read_info+0x46>
    rc = 1;
   1ca86:	4604      	mov	r4, r0
   1ca88:	e7a7      	b.n	1c9da <imgr_read_info+0x46>
   1ca8a:	bf00      	nop
   1ca8c:	96f3b83d 	.word	0x96f3b83d

0001ca90 <imgr_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
imgr_upload_log(bool is_first, bool is_last, int status)
{
   1ca90:	b510      	push	{r4, lr}
   1ca92:	b088      	sub	sp, #32
   1ca94:	4614      	mov	r4, r2
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1ca96:	b920      	cbnz	r0, 1caa2 <imgr_upload_log+0x12>
        return imgmgr_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1ca98:	b939      	cbnz	r1, 1caaa <imgr_upload_log+0x1a>
   1ca9a:	b932      	cbnz	r2, 1caaa <imgr_upload_log+0x1a>

        return imgmgr_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   1ca9c:	4610      	mov	r0, r2
}
   1ca9e:	b008      	add	sp, #32
   1caa0:	bd10      	pop	{r4, pc}
        return imgmgr_log_upload_start(status);
   1caa2:	4610      	mov	r0, r2
   1caa4:	f000 fad8 	bl	1d058 <imgmgr_log_upload_start>
   1caa8:	e7f9      	b.n	1ca9e <imgr_upload_log+0xe>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1caaa:	2300      	movs	r3, #0
   1caac:	466a      	mov	r2, sp
   1caae:	4619      	mov	r1, r3
   1cab0:	2001      	movs	r0, #1
   1cab2:	f7ff ff6f 	bl	1c994 <imgr_read_info>
        if (rc != 0) {
   1cab6:	b120      	cbz	r0, 1cac2 <imgr_upload_log+0x32>
            hashp = NULL;
   1cab8:	2100      	movs	r1, #0
        return imgmgr_log_upload_done(status, hashp);
   1caba:	4620      	mov	r0, r4
   1cabc:	f000 fad6 	bl	1d06c <imgmgr_log_upload_done>
   1cac0:	e7ed      	b.n	1ca9e <imgr_upload_log+0xe>
            hashp = hash;
   1cac2:	4669      	mov	r1, sp
   1cac4:	e7f9      	b.n	1caba <imgr_upload_log+0x2a>
	...

0001cac8 <imgr_my_version>:
{
   1cac8:	b508      	push	{r3, lr}
   1caca:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   1cacc:	2300      	movs	r3, #0
   1cace:	461a      	mov	r2, r3
   1cad0:	4802      	ldr	r0, [pc, #8]	; (1cadc <imgr_my_version+0x14>)
   1cad2:	6800      	ldr	r0, [r0, #0]
   1cad4:	f7ff ff5e 	bl	1c994 <imgr_read_info>
}
   1cad8:	bd08      	pop	{r3, pc}
   1cada:	bf00      	nop
   1cadc:	20007564 	.word	0x20007564

0001cae0 <imgr_find_by_hash>:
{
   1cae0:	b570      	push	{r4, r5, r6, lr}
   1cae2:	b088      	sub	sp, #32
   1cae4:	4606      	mov	r6, r0
   1cae6:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   1cae8:	2400      	movs	r4, #0
   1caea:	e000      	b.n	1caee <imgr_find_by_hash+0xe>
   1caec:	3401      	adds	r4, #1
   1caee:	2c01      	cmp	r4, #1
   1caf0:	dc0f      	bgt.n	1cb12 <imgr_find_by_hash+0x32>
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   1caf2:	2300      	movs	r3, #0
   1caf4:	466a      	mov	r2, sp
   1caf6:	4629      	mov	r1, r5
   1caf8:	4620      	mov	r0, r4
   1cafa:	f7ff ff4b 	bl	1c994 <imgr_read_info>
   1cafe:	2800      	cmp	r0, #0
   1cb00:	d1f4      	bne.n	1caec <imgr_find_by_hash+0xc>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   1cb02:	2220      	movs	r2, #32
   1cb04:	4631      	mov	r1, r6
   1cb06:	4668      	mov	r0, sp
   1cb08:	f7f4 fc92 	bl	11430 <memcmp>
   1cb0c:	2800      	cmp	r0, #0
   1cb0e:	d1ed      	bne.n	1caec <imgr_find_by_hash+0xc>
   1cb10:	e001      	b.n	1cb16 <imgr_find_by_hash+0x36>
    return -1;
   1cb12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1cb16:	4620      	mov	r0, r4
   1cb18:	b008      	add	sp, #32
   1cb1a:	bd70      	pop	{r4, r5, r6, pc}

0001cb1c <imgmgr_find_best_area_id>:
{
   1cb1c:	b530      	push	{r4, r5, lr}
   1cb1e:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   1cb20:	2400      	movs	r4, #0
    int best = -1;
   1cb22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1cb26:	e000      	b.n	1cb2a <imgmgr_find_best_area_id+0xe>
   1cb28:	3401      	adds	r4, #1
   1cb2a:	2c01      	cmp	r4, #1
   1cb2c:	dc10      	bgt.n	1cb50 <imgmgr_find_best_area_id+0x34>
        rc = imgr_read_info(i, &ver, NULL, NULL);
   1cb2e:	2300      	movs	r3, #0
   1cb30:	461a      	mov	r2, r3
   1cb32:	4669      	mov	r1, sp
   1cb34:	4620      	mov	r0, r4
   1cb36:	f7ff ff2d 	bl	1c994 <imgr_read_info>
        if (rc < 0) {
   1cb3a:	2800      	cmp	r0, #0
   1cb3c:	dbf4      	blt.n	1cb28 <imgmgr_find_best_area_id+0xc>
        if (rc == 0) {
   1cb3e:	b930      	cbnz	r0, 1cb4e <imgmgr_find_best_area_id+0x32>
            if (imgmgr_state_slot_in_use(i)) {
   1cb40:	4620      	mov	r0, r4
   1cb42:	f000 fb1f 	bl	1d184 <imgmgr_state_slot_in_use>
   1cb46:	2800      	cmp	r0, #0
   1cb48:	d1ee      	bne.n	1cb28 <imgmgr_find_best_area_id+0xc>
                best = i;
   1cb4a:	4625      	mov	r5, r4
   1cb4c:	e7ec      	b.n	1cb28 <imgmgr_find_best_area_id+0xc>
        best = i;
   1cb4e:	4625      	mov	r5, r4
    if (best >= 0) {
   1cb50:	2d00      	cmp	r5, #0
   1cb52:	da02      	bge.n	1cb5a <imgmgr_find_best_area_id+0x3e>
}
   1cb54:	4628      	mov	r0, r5
   1cb56:	b003      	add	sp, #12
   1cb58:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1cb5a:	4628      	mov	r0, r5
   1cb5c:	f001 fcec 	bl	1e538 <flash_area_id_from_image_slot>
   1cb60:	4605      	mov	r5, r0
    return best;
   1cb62:	e7f7      	b.n	1cb54 <imgmgr_find_best_area_id+0x38>

0001cb64 <imgr_erase_state>:
{
   1cb64:	b570      	push	{r4, r5, r6, lr}
   1cb66:	b082      	sub	sp, #8
   1cb68:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1cb6a:	f7ff ffd7 	bl	1cb1c <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1cb6e:	2800      	cmp	r0, #0
   1cb70:	db1f      	blt.n	1cbb2 <imgr_erase_state+0x4e>
        rc = flash_area_open(area_id, &fa);
   1cb72:	a901      	add	r1, sp, #4
   1cb74:	b2c0      	uxtb	r0, r0
   1cb76:	f001 fc1f 	bl	1e3b8 <flash_area_open>
        if (rc) {
   1cb7a:	b9f0      	cbnz	r0, 1cbba <imgr_erase_state+0x56>
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   1cb7c:	2220      	movs	r2, #32
   1cb7e:	2100      	movs	r1, #0
   1cb80:	9801      	ldr	r0, [sp, #4]
   1cb82:	f001 fca1 	bl	1e4c8 <flash_area_erase>
        if (rc) {
   1cb86:	4605      	mov	r5, r0
   1cb88:	b9c8      	cbnz	r0, 1cbbe <imgr_erase_state+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1cb8a:	340c      	adds	r4, #12
   1cb8c:	2202      	movs	r2, #2
   1cb8e:	490e      	ldr	r1, [pc, #56]	; (1cbc8 <imgr_erase_state+0x64>)
   1cb90:	4620      	mov	r0, r4
   1cb92:	f7fa f952 	bl	16e3a <cbor_encode_text_string>
   1cb96:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1cb98:	2200      	movs	r2, #0
   1cb9a:	2300      	movs	r3, #0
   1cb9c:	4620      	mov	r0, r4
   1cb9e:	f7fa f8d1 	bl	16d44 <cbor_encode_int>
    if (g_err) {
   1cba2:	ea50 0306 	orrs.w	r3, r0, r6
   1cba6:	d10c      	bne.n	1cbc2 <imgr_erase_state+0x5e>
    imgr_state.area_id = -1;
   1cba8:	4b08      	ldr	r3, [pc, #32]	; (1cbcc <imgr_erase_state+0x68>)
   1cbaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cbae:	601a      	str	r2, [r3, #0]
    return 0;
   1cbb0:	e000      	b.n	1cbb4 <imgr_erase_state+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1cbb2:	2502      	movs	r5, #2
}
   1cbb4:	4628      	mov	r0, r5
   1cbb6:	b002      	add	sp, #8
   1cbb8:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1cbba:	2503      	movs	r5, #3
   1cbbc:	e7fa      	b.n	1cbb4 <imgr_erase_state+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1cbbe:	2503      	movs	r5, #3
   1cbc0:	e7f8      	b.n	1cbb4 <imgr_erase_state+0x50>
        return MGMT_ERR_ENOMEM;
   1cbc2:	2502      	movs	r5, #2
   1cbc4:	e7f6      	b.n	1cbb4 <imgr_erase_state+0x50>
   1cbc6:	bf00      	nop
   1cbc8:	000242b8 	.word	0x000242b8
   1cbcc:	20007194 	.word	0x20007194

0001cbd0 <imgr_erase>:
{
   1cbd0:	b570      	push	{r4, r5, r6, lr}
   1cbd2:	b082      	sub	sp, #8
   1cbd4:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1cbd6:	f7ff ffa1 	bl	1cb1c <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1cbda:	2800      	cmp	r0, #0
   1cbdc:	db1f      	blt.n	1cc1e <imgr_erase+0x4e>
        rc = flash_area_open(area_id, &fa);
   1cbde:	a901      	add	r1, sp, #4
   1cbe0:	b2c0      	uxtb	r0, r0
   1cbe2:	f001 fbe9 	bl	1e3b8 <flash_area_open>
        if (rc) {
   1cbe6:	b9f0      	cbnz	r0, 1cc26 <imgr_erase+0x56>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1cbe8:	9801      	ldr	r0, [sp, #4]
   1cbea:	6882      	ldr	r2, [r0, #8]
   1cbec:	2100      	movs	r1, #0
   1cbee:	f001 fc6b 	bl	1e4c8 <flash_area_erase>
        if (rc) {
   1cbf2:	4605      	mov	r5, r0
   1cbf4:	b9c8      	cbnz	r0, 1cc2a <imgr_erase+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1cbf6:	340c      	adds	r4, #12
   1cbf8:	2202      	movs	r2, #2
   1cbfa:	490e      	ldr	r1, [pc, #56]	; (1cc34 <imgr_erase+0x64>)
   1cbfc:	4620      	mov	r0, r4
   1cbfe:	f7fa f91c 	bl	16e3a <cbor_encode_text_string>
   1cc02:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1cc04:	2200      	movs	r2, #0
   1cc06:	2300      	movs	r3, #0
   1cc08:	4620      	mov	r0, r4
   1cc0a:	f7fa f89b 	bl	16d44 <cbor_encode_int>
    if (g_err) {
   1cc0e:	ea50 0306 	orrs.w	r3, r0, r6
   1cc12:	d10c      	bne.n	1cc2e <imgr_erase+0x5e>
    imgr_state.area_id = -1;
   1cc14:	4b08      	ldr	r3, [pc, #32]	; (1cc38 <imgr_erase+0x68>)
   1cc16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cc1a:	601a      	str	r2, [r3, #0]
    return 0;
   1cc1c:	e000      	b.n	1cc20 <imgr_erase+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   1cc1e:	2502      	movs	r5, #2
}
   1cc20:	4628      	mov	r0, r5
   1cc22:	b002      	add	sp, #8
   1cc24:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1cc26:	2503      	movs	r5, #3
   1cc28:	e7fa      	b.n	1cc20 <imgr_erase+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1cc2a:	2503      	movs	r5, #3
   1cc2c:	e7f8      	b.n	1cc20 <imgr_erase+0x50>
        return MGMT_ERR_ENOMEM;
   1cc2e:	2502      	movs	r5, #2
   1cc30:	e7f6      	b.n	1cc20 <imgr_erase+0x50>
   1cc32:	bf00      	nop
   1cc34:	000242b8 	.word	0x000242b8
   1cc38:	20007194 	.word	0x20007194

0001cc3c <imgr_upload_inspect>:
{
   1cc3c:	b570      	push	{r4, r5, r6, lr}
   1cc3e:	b084      	sub	sp, #16
   1cc40:	460c      	mov	r4, r1
   1cc42:	4616      	mov	r6, r2
    memset(action, 0, sizeof *action);
   1cc44:	2300      	movs	r3, #0
   1cc46:	600b      	str	r3, [r1, #0]
   1cc48:	604b      	str	r3, [r1, #4]
   1cc4a:	608b      	str	r3, [r1, #8]
   1cc4c:	60cb      	str	r3, [r1, #12]
   1cc4e:	610b      	str	r3, [r1, #16]
   1cc50:	614b      	str	r3, [r1, #20]
    if (req->off == -1) {
   1cc52:	6801      	ldr	r1, [r0, #0]
   1cc54:	6843      	ldr	r3, [r0, #4]
   1cc56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cc5a:	bf08      	it	eq
   1cc5c:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   1cc60:	d03e      	beq.n	1cce0 <imgr_upload_inspect+0xa4>
   1cc62:	4605      	mov	r5, r0
    if (req->off == 0) {
   1cc64:	430b      	orrs	r3, r1
   1cc66:	d168      	bne.n	1cd3a <imgr_upload_inspect+0xfe>
        if (req->data_len < sizeof(struct image_header)) {
   1cc68:	6903      	ldr	r3, [r0, #16]
   1cc6a:	2b1f      	cmp	r3, #31
   1cc6c:	d93c      	bls.n	1cce8 <imgr_upload_inspect+0xac>
        if (req->size == -1) {
   1cc6e:	6882      	ldr	r2, [r0, #8]
   1cc70:	68c3      	ldr	r3, [r0, #12]
   1cc72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cc76:	bf08      	it	eq
   1cc78:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1cc7c:	d038      	beq.n	1ccf0 <imgr_upload_inspect+0xb4>
        action->size = req->size;
   1cc7e:	6022      	str	r2, [r4, #0]
   1cc80:	6063      	str	r3, [r4, #4]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1cc82:	6982      	ldr	r2, [r0, #24]
   1cc84:	4b4e      	ldr	r3, [pc, #312]	; (1cdc0 <imgr_upload_inspect+0x184>)
   1cc86:	429a      	cmp	r2, r3
   1cc88:	d136      	bne.n	1ccf8 <imgr_upload_inspect+0xbc>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1cc8a:	6942      	ldr	r2, [r0, #20]
   1cc8c:	2a20      	cmp	r2, #32
   1cc8e:	f200 808d 	bhi.w	1cdac <imgr_upload_inspect+0x170>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   1cc92:	b142      	cbz	r2, 1cca6 <imgr_upload_inspect+0x6a>
   1cc94:	4b4b      	ldr	r3, [pc, #300]	; (1cdc4 <imgr_upload_inspect+0x188>)
   1cc96:	681b      	ldr	r3, [r3, #0]
   1cc98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cc9c:	d003      	beq.n	1cca6 <imgr_upload_inspect+0x6a>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1cc9e:	4b49      	ldr	r3, [pc, #292]	; (1cdc4 <imgr_upload_inspect+0x188>)
   1cca0:	7b1b      	ldrb	r3, [r3, #12]
   1cca2:	429a      	cmp	r2, r3
   1cca4:	d02c      	beq.n	1cd00 <imgr_upload_inspect+0xc4>
        action->area_id = imgmgr_find_best_area_id();
   1cca6:	f7ff ff39 	bl	1cb1c <imgmgr_find_best_area_id>
   1ccaa:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1ccac:	2800      	cmp	r0, #0
   1ccae:	db2f      	blt.n	1cd10 <imgr_upload_inspect+0xd4>
        if (req->upgrade) {
   1ccb0:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   1ccb4:	b15b      	cbz	r3, 1ccce <imgr_upload_inspect+0x92>
            rc = imgr_my_version(&cur_ver);
   1ccb6:	a801      	add	r0, sp, #4
   1ccb8:	f7ff ff06 	bl	1cac8 <imgr_my_version>
            if (rc != 0) {
   1ccbc:	2800      	cmp	r0, #0
   1ccbe:	d177      	bne.n	1cdb0 <imgr_upload_inspect+0x174>
            if (imgr_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1ccc0:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1ccc4:	a801      	add	r0, sp, #4
   1ccc6:	f7ff fdfe 	bl	1c8c6 <imgr_vercmp>
   1ccca:	2800      	cmp	r0, #0
   1cccc:	da24      	bge.n	1cd18 <imgr_upload_inspect+0xdc>
        rc = flash_area_open(action->area_id, &fa);
   1ccce:	a903      	add	r1, sp, #12
   1ccd0:	7b20      	ldrb	r0, [r4, #12]
   1ccd2:	f001 fb71 	bl	1e3b8 <flash_area_open>
        if (rc) {
   1ccd6:	b318      	cbz	r0, 1cd20 <imgr_upload_inspect+0xe4>
            *errstr = imgmgr_err_str_flash_open_failed;
   1ccd8:	2300      	movs	r3, #0
   1ccda:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1ccdc:	2001      	movs	r0, #1
   1ccde:	e06c      	b.n	1cdba <imgr_upload_inspect+0x17e>
        *errstr = imgmgr_err_str_hdr_malformed;
   1cce0:	2300      	movs	r3, #0
   1cce2:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   1cce4:	2003      	movs	r0, #3
   1cce6:	e068      	b.n	1cdba <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1cce8:	2300      	movs	r3, #0
   1ccea:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1ccec:	2003      	movs	r0, #3
   1ccee:	e064      	b.n	1cdba <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1ccf0:	2300      	movs	r3, #0
   1ccf2:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1ccf4:	2003      	movs	r0, #3
   1ccf6:	e060      	b.n	1cdba <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_magic_mismatch;
   1ccf8:	2300      	movs	r3, #0
   1ccfa:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1ccfc:	2003      	movs	r0, #3
   1ccfe:	e05c      	b.n	1cdba <imgr_upload_inspect+0x17e>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   1cd00:	f500 7106 	add.w	r1, r0, #536	; 0x218
   1cd04:	4830      	ldr	r0, [pc, #192]	; (1cdc8 <imgr_upload_inspect+0x18c>)
   1cd06:	f7f4 fb93 	bl	11430 <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   1cd0a:	2800      	cmp	r0, #0
   1cd0c:	d1cb      	bne.n	1cca6 <imgr_upload_inspect+0x6a>
   1cd0e:	e054      	b.n	1cdba <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_no_slot;
   1cd10:	2300      	movs	r3, #0
   1cd12:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   1cd14:	2002      	movs	r0, #2
   1cd16:	e050      	b.n	1cdba <imgr_upload_inspect+0x17e>
                *errstr = imgmgr_err_str_downgrade;
   1cd18:	2300      	movs	r3, #0
   1cd1a:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   1cd1c:	2006      	movs	r0, #6
   1cd1e:	e04c      	b.n	1cdba <imgr_upload_inspect+0x17e>
        rc = flash_area_is_empty(fa, &empty);
   1cd20:	f10d 0103 	add.w	r1, sp, #3
   1cd24:	9803      	ldr	r0, [sp, #12]
   1cd26:	f001 fbed 	bl	1e504 <flash_area_is_empty>
        if (rc) {
   1cd2a:	2800      	cmp	r0, #0
   1cd2c:	d142      	bne.n	1cdb4 <imgr_upload_inspect+0x178>
        action->erase = !empty;
   1cd2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1cd32:	f083 0301 	eor.w	r3, r3, #1
   1cd36:	7463      	strb	r3, [r4, #17]
   1cd38:	e00d      	b.n	1cd56 <imgr_upload_inspect+0x11a>
        action->area_id = imgr_state.area_id;
   1cd3a:	4b22      	ldr	r3, [pc, #136]	; (1cdc4 <imgr_upload_inspect+0x188>)
   1cd3c:	681a      	ldr	r2, [r3, #0]
   1cd3e:	60e2      	str	r2, [r4, #12]
        action->size = imgr_state.size;
   1cd40:	6899      	ldr	r1, [r3, #8]
   1cd42:	2200      	movs	r2, #0
   1cd44:	6021      	str	r1, [r4, #0]
   1cd46:	6062      	str	r2, [r4, #4]
        if (req->off != imgr_state.off) {
   1cd48:	6800      	ldr	r0, [r0, #0]
   1cd4a:	6869      	ldr	r1, [r5, #4]
   1cd4c:	685b      	ldr	r3, [r3, #4]
   1cd4e:	4291      	cmp	r1, r2
   1cd50:	bf08      	it	eq
   1cd52:	4298      	cmpeq	r0, r3
   1cd54:	d130      	bne.n	1cdb8 <imgr_upload_inspect+0x17c>
    action->write_bytes = req->data_len;
   1cd56:	692b      	ldr	r3, [r5, #16]
   1cd58:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1cd5a:	682b      	ldr	r3, [r5, #0]
   1cd5c:	686a      	ldr	r2, [r5, #4]
   1cd5e:	6929      	ldr	r1, [r5, #16]
   1cd60:	185b      	adds	r3, r3, r1
   1cd62:	f142 0200 	adc.w	r2, r2, #0
   1cd66:	6820      	ldr	r0, [r4, #0]
   1cd68:	6861      	ldr	r1, [r4, #4]
   1cd6a:	4283      	cmp	r3, r0
   1cd6c:	eb72 0301 	sbcs.w	r3, r2, r1
   1cd70:	d303      	bcc.n	1cd7a <imgr_upload_inspect+0x13e>
    action->proceed = true;
   1cd72:	2301      	movs	r3, #1
   1cd74:	7423      	strb	r3, [r4, #16]
    return 0;
   1cd76:	2000      	movs	r0, #0
   1cd78:	e01f      	b.n	1cdba <imgr_upload_inspect+0x17e>
        rc = flash_area_open(action->area_id, &fa);
   1cd7a:	a903      	add	r1, sp, #12
   1cd7c:	7b20      	ldrb	r0, [r4, #12]
   1cd7e:	f001 fb1b 	bl	1e3b8 <flash_area_open>
        if (rc) {
   1cd82:	b118      	cbz	r0, 1cd8c <imgr_upload_inspect+0x150>
            *errstr = imgmgr_err_str_flash_open_failed;
   1cd84:	2300      	movs	r3, #0
   1cd86:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1cd88:	2001      	movs	r0, #1
   1cd8a:	e016      	b.n	1cdba <imgr_upload_inspect+0x17e>
        rem_bytes = req->data_len % flash_area_align(fa);
   1cd8c:	692d      	ldr	r5, [r5, #16]
   1cd8e:	9803      	ldr	r0, [sp, #12]
   1cd90:	f001 fbae 	bl	1e4f0 <flash_area_align>
   1cd94:	fbb5 f3f0 	udiv	r3, r5, r0
   1cd98:	fb00 5513 	mls	r5, r0, r3, r5
        if (rem_bytes) {
   1cd9c:	f015 0fff 	tst.w	r5, #255	; 0xff
   1cda0:	d0e7      	beq.n	1cd72 <imgr_upload_inspect+0x136>
            action->write_bytes -= rem_bytes;
   1cda2:	b2ed      	uxtb	r5, r5
   1cda4:	68a3      	ldr	r3, [r4, #8]
   1cda6:	1b5d      	subs	r5, r3, r5
   1cda8:	60a5      	str	r5, [r4, #8]
   1cdaa:	e7e2      	b.n	1cd72 <imgr_upload_inspect+0x136>
            return MGMT_ERR_EINVAL;
   1cdac:	2003      	movs	r0, #3
   1cdae:	e004      	b.n	1cdba <imgr_upload_inspect+0x17e>
                return MGMT_ERR_EUNKNOWN;
   1cdb0:	2001      	movs	r0, #1
   1cdb2:	e002      	b.n	1cdba <imgr_upload_inspect+0x17e>
            return MGMT_ERR_EUNKNOWN;
   1cdb4:	2001      	movs	r0, #1
   1cdb6:	e000      	b.n	1cdba <imgr_upload_inspect+0x17e>
            return 0;
   1cdb8:	2000      	movs	r0, #0
}
   1cdba:	b004      	add	sp, #16
   1cdbc:	bd70      	pop	{r4, r5, r6, pc}
   1cdbe:	bf00      	nop
   1cdc0:	96f3b83d 	.word	0x96f3b83d
   1cdc4:	20007194 	.word	0x20007194
   1cdc8:	200071a1 	.word	0x200071a1

0001cdcc <imgmgr_dfu_stopped>:
    return imgr_upload_good_rsp(cb);
}

void
imgmgr_dfu_stopped(void)
{
   1cdcc:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   1cdce:	4b03      	ldr	r3, [pc, #12]	; (1cddc <imgmgr_dfu_stopped+0x10>)
   1cdd0:	681b      	ldr	r3, [r3, #0]
   1cdd2:	b113      	cbz	r3, 1cdda <imgmgr_dfu_stopped+0xe>
   1cdd4:	685b      	ldr	r3, [r3, #4]
   1cdd6:	b103      	cbz	r3, 1cdda <imgmgr_dfu_stopped+0xe>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1cdd8:	4798      	blx	r3
    }
}
   1cdda:	bd08      	pop	{r3, pc}
   1cddc:	20007190 	.word	0x20007190

0001cde0 <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
   1cde0:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   1cde2:	4b03      	ldr	r3, [pc, #12]	; (1cdf0 <imgmgr_dfu_started+0x10>)
   1cde4:	681b      	ldr	r3, [r3, #0]
   1cde6:	b113      	cbz	r3, 1cdee <imgmgr_dfu_started+0xe>
   1cde8:	681b      	ldr	r3, [r3, #0]
   1cdea:	b103      	cbz	r3, 1cdee <imgmgr_dfu_started+0xe>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   1cdec:	4798      	blx	r3
    }
}
   1cdee:	bd08      	pop	{r3, pc}
   1cdf0:	20007190 	.word	0x20007190

0001cdf4 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
   1cdf4:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   1cdf6:	4b03      	ldr	r3, [pc, #12]	; (1ce04 <imgmgr_dfu_pending+0x10>)
   1cdf8:	681b      	ldr	r3, [r3, #0]
   1cdfa:	b113      	cbz	r3, 1ce02 <imgmgr_dfu_pending+0xe>
   1cdfc:	689b      	ldr	r3, [r3, #8]
   1cdfe:	b103      	cbz	r3, 1ce02 <imgmgr_dfu_pending+0xe>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   1ce00:	4798      	blx	r3
    }
}
   1ce02:	bd08      	pop	{r3, pc}
   1ce04:	20007190 	.word	0x20007190

0001ce08 <imgr_upload>:
{
   1ce08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce0c:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
   1ce10:	4605      	mov	r5, r0
    struct imgr_upload_req req = {
   1ce12:	ac52      	add	r4, sp, #328	; 0x148
   1ce14:	f44f 7210 	mov.w	r2, #576	; 0x240
   1ce18:	2100      	movs	r1, #0
   1ce1a:	4620      	mov	r0, r4
   1ce1c:	f7f4 fb39 	bl	11492 <memset>
   1ce20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ce24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce28:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
   1ce2c:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
    const struct cbor_attr_t off_attr[] = {
   1ce30:	f44f 7290 	mov.w	r2, #288	; 0x120
   1ce34:	2100      	movs	r1, #0
   1ce36:	a80a      	add	r0, sp, #40	; 0x28
   1ce38:	f7f4 fb2b 	bl	11492 <memset>
   1ce3c:	4b69      	ldr	r3, [pc, #420]	; (1cfe4 <imgr_upload+0x1dc>)
   1ce3e:	930a      	str	r3, [sp, #40]	; 0x28
   1ce40:	2303      	movs	r3, #3
   1ce42:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1ce46:	aa58      	add	r2, sp, #352	; 0x160
   1ce48:	920c      	str	r2, [sp, #48]	; 0x30
   1ce4a:	aa56      	add	r2, sp, #344	; 0x158
   1ce4c:	920d      	str	r2, [sp, #52]	; 0x34
   1ce4e:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ce52:	9214      	str	r2, [sp, #80]	; 0x50
   1ce54:	4a64      	ldr	r2, [pc, #400]	; (1cfe8 <imgr_upload+0x1e0>)
   1ce56:	9216      	str	r2, [sp, #88]	; 0x58
   1ce58:	2102      	movs	r1, #2
   1ce5a:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
   1ce5e:	aa54      	add	r2, sp, #336	; 0x150
   1ce60:	9218      	str	r2, [sp, #96]	; 0x60
   1ce62:	2201      	movs	r2, #1
   1ce64:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1ce68:	4860      	ldr	r0, [pc, #384]	; (1cfec <imgr_upload+0x1e4>)
   1ce6a:	9022      	str	r0, [sp, #136]	; 0x88
   1ce6c:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   1ce70:	9424      	str	r4, [sp, #144]	; 0x90
   1ce72:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1ce76:	4a5e      	ldr	r2, [pc, #376]	; (1cff0 <imgr_upload+0x1e8>)
   1ce78:	922e      	str	r2, [sp, #184]	; 0xb8
   1ce7a:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
   1ce7e:	abd8      	add	r3, sp, #864	; 0x360
   1ce80:	9330      	str	r3, [sp, #192]	; 0xc0
   1ce82:	ab57      	add	r3, sp, #348	; 0x15c
   1ce84:	9331      	str	r3, [sp, #196]	; 0xc4
   1ce86:	2320      	movs	r3, #32
   1ce88:	9338      	str	r3, [sp, #224]	; 0xe0
   1ce8a:	4b5a      	ldr	r3, [pc, #360]	; (1cff4 <imgr_upload+0x1ec>)
   1ce8c:	933a      	str	r3, [sp, #232]	; 0xe8
   1ce8e:	2305      	movs	r3, #5
   1ce90:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
   1ce94:	abe0      	add	r3, sp, #896	; 0x380
   1ce96:	933c      	str	r3, [sp, #240]	; 0xf0
    const char *errstr = NULL;
   1ce98:	2300      	movs	r3, #0
   1ce9a:	9309      	str	r3, [sp, #36]	; 0x24
    const struct flash_area *fa = NULL;
   1ce9c:	9301      	str	r3, [sp, #4]
    rc = cbor_read_object(&cb->it, off_attr);
   1ce9e:	a90a      	add	r1, sp, #40	; 0x28
   1cea0:	f105 001c 	add.w	r0, r5, #28
   1cea4:	f7f9 fde2 	bl	16a6c <cbor_read_object>
    if (rc != 0) {
   1cea8:	2800      	cmp	r0, #0
   1ceaa:	f040 8095 	bne.w	1cfd8 <imgr_upload+0x1d0>
    rc = imgr_upload_inspect(&req, &action, &errstr);
   1ceae:	aa09      	add	r2, sp, #36	; 0x24
   1ceb0:	a902      	add	r1, sp, #8
   1ceb2:	4620      	mov	r0, r4
   1ceb4:	f7ff fec2 	bl	1cc3c <imgr_upload_inspect>
    if (rc != 0) {
   1ceb8:	4604      	mov	r4, r0
   1ceba:	2800      	cmp	r0, #0
   1cebc:	d137      	bne.n	1cf2e <imgr_upload+0x126>
    if (!action.proceed) {
   1cebe:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1cec2:	2b00      	cmp	r3, #0
   1cec4:	d036      	beq.n	1cf34 <imgr_upload+0x12c>
    if (imgr_upload_cb != NULL) {
   1cec6:	4b4c      	ldr	r3, [pc, #304]	; (1cff8 <imgr_upload+0x1f0>)
   1cec8:	681b      	ldr	r3, [r3, #0]
   1ceca:	b13b      	cbz	r3, 1cedc <imgr_upload+0xd4>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   1cecc:	4a4b      	ldr	r2, [pc, #300]	; (1cffc <imgr_upload+0x1f4>)
   1cece:	6812      	ldr	r2, [r2, #0]
   1ced0:	9902      	ldr	r1, [sp, #8]
   1ced2:	9852      	ldr	r0, [sp, #328]	; 0x148
   1ced4:	4798      	blx	r3
        if (rc != 0) {
   1ced6:	4604      	mov	r4, r0
   1ced8:	2800      	cmp	r0, #0
   1ceda:	d130      	bne.n	1cf3e <imgr_upload+0x136>
    imgr_state.area_id = action.area_id;
   1cedc:	9805      	ldr	r0, [sp, #20]
   1cede:	4b48      	ldr	r3, [pc, #288]	; (1d000 <imgr_upload+0x1f8>)
   1cee0:	6018      	str	r0, [r3, #0]
    imgr_state.size = action.size;
   1cee2:	9a02      	ldr	r2, [sp, #8]
   1cee4:	609a      	str	r2, [r3, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1cee6:	a901      	add	r1, sp, #4
   1cee8:	b2c0      	uxtb	r0, r0
   1ceea:	f001 fa65 	bl	1e3b8 <flash_area_open>
    if (rc != 0) {
   1ceee:	4604      	mov	r4, r0
   1cef0:	bb40      	cbnz	r0, 1cf44 <imgr_upload+0x13c>
    if (req.off == 0) {
   1cef2:	9a52      	ldr	r2, [sp, #328]	; 0x148
   1cef4:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1cef6:	4313      	orrs	r3, r2
   1cef8:	d028      	beq.n	1cf4c <imgr_upload+0x144>
    if (req.data_len != 0) {
   1cefa:	9b56      	ldr	r3, [sp, #344]	; 0x158
   1cefc:	2b00      	cmp	r3, #0
   1cefe:	d14d      	bne.n	1cf9c <imgr_upload+0x194>
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   1cf00:	9852      	ldr	r0, [sp, #328]	; 0x148
   1cf02:	9a53      	ldr	r2, [sp, #332]	; 0x14c
   1cf04:	4b3e      	ldr	r3, [pc, #248]	; (1d000 <imgr_upload+0x1f8>)
   1cf06:	6859      	ldr	r1, [r3, #4]
   1cf08:	689b      	ldr	r3, [r3, #8]
   1cf0a:	4302      	orrs	r2, r0
   1cf0c:	bf0c      	ite	eq
   1cf0e:	2001      	moveq	r0, #1
   1cf10:	2000      	movne	r0, #0
   1cf12:	4622      	mov	r2, r4
   1cf14:	4299      	cmp	r1, r3
   1cf16:	bf14      	ite	ne
   1cf18:	2100      	movne	r1, #0
   1cf1a:	2101      	moveq	r1, #1
   1cf1c:	f7ff fdb8 	bl	1ca90 <imgr_upload_log>
    if (rc != 0) {
   1cf20:	2c00      	cmp	r4, #0
   1cf22:	d156      	bne.n	1cfd2 <imgr_upload+0x1ca>
    return imgr_upload_good_rsp(cb);
   1cf24:	4628      	mov	r0, r5
   1cf26:	f7ff fd0d 	bl	1c944 <imgr_upload_good_rsp>
   1cf2a:	4604      	mov	r4, r0
   1cf2c:	e055      	b.n	1cfda <imgr_upload+0x1d2>
        imgmgr_dfu_stopped();
   1cf2e:	f7ff ff4d 	bl	1cdcc <imgmgr_dfu_stopped>
        return rc;
   1cf32:	e052      	b.n	1cfda <imgr_upload+0x1d2>
        return imgr_upload_good_rsp(cb);
   1cf34:	4628      	mov	r0, r5
   1cf36:	f7ff fd05 	bl	1c944 <imgr_upload_good_rsp>
   1cf3a:	4604      	mov	r4, r0
   1cf3c:	e04d      	b.n	1cfda <imgr_upload+0x1d2>
            errstr = imgmgr_err_str_app_reject;
   1cf3e:	2300      	movs	r3, #0
   1cf40:	9309      	str	r3, [sp, #36]	; 0x24
            goto end;
   1cf42:	e7dd      	b.n	1cf00 <imgr_upload+0xf8>
        errstr = imgmgr_err_str_flash_open_failed;
   1cf44:	2300      	movs	r3, #0
   1cf46:	9309      	str	r3, [sp, #36]	; 0x24
        rc = MGMT_ERR_EUNKNOWN;
   1cf48:	2401      	movs	r4, #1
        goto end;
   1cf4a:	e7d9      	b.n	1cf00 <imgr_upload+0xf8>
        imgr_state.off = 0;
   1cf4c:	4e2c      	ldr	r6, [pc, #176]	; (1d000 <imgr_upload+0x1f8>)
   1cf4e:	f04f 0800 	mov.w	r8, #0
   1cf52:	f8c6 8004 	str.w	r8, [r6, #4]
        imgmgr_dfu_started();
   1cf56:	f7ff ff43 	bl	1cde0 <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1cf5a:	9f57      	ldr	r7, [sp, #348]	; 0x15c
   1cf5c:	7337      	strb	r7, [r6, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   1cf5e:	463a      	mov	r2, r7
   1cf60:	a9d8      	add	r1, sp, #864	; 0x360
   1cf62:	f106 000d 	add.w	r0, r6, #13
   1cf66:	f7f4 fa87 	bl	11478 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1cf6a:	f107 0008 	add.w	r0, r7, #8
   1cf6e:	4430      	add	r0, r6
   1cf70:	f1c7 0220 	rsb	r2, r7, #32
   1cf74:	4641      	mov	r1, r8
   1cf76:	3005      	adds	r0, #5
   1cf78:	f7f4 fa8b 	bl	11492 <memset>
        if (action.erase) {
   1cf7c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1cf80:	2b00      	cmp	r3, #0
   1cf82:	d0ba      	beq.n	1cefa <imgr_upload+0xf2>
            rc = flash_area_erase(fa, 0, req.size);
   1cf84:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1cf86:	4641      	mov	r1, r8
   1cf88:	9801      	ldr	r0, [sp, #4]
   1cf8a:	f001 fa9d 	bl	1e4c8 <flash_area_erase>
            if (rc != 0) {
   1cf8e:	4604      	mov	r4, r0
   1cf90:	2800      	cmp	r0, #0
   1cf92:	d0b2      	beq.n	1cefa <imgr_upload+0xf2>
                errstr = imgmgr_err_str_flash_erase_failed;
   1cf94:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
                rc = MGMT_ERR_EUNKNOWN;
   1cf98:	2401      	movs	r4, #1
                goto end;
   1cf9a:	e7b1      	b.n	1cf00 <imgr_upload+0xf8>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   1cf9c:	9b04      	ldr	r3, [sp, #16]
   1cf9e:	aa58      	add	r2, sp, #352	; 0x160
   1cfa0:	9952      	ldr	r1, [sp, #328]	; 0x148
   1cfa2:	9801      	ldr	r0, [sp, #4]
   1cfa4:	f001 fa7c 	bl	1e4a0 <flash_area_write>
        if (rc != 0) {
   1cfa8:	4604      	mov	r4, r0
   1cfaa:	b970      	cbnz	r0, 1cfca <imgr_upload+0x1c2>
            imgr_state.off += action.write_bytes;
   1cfac:	9b04      	ldr	r3, [sp, #16]
   1cfae:	4a14      	ldr	r2, [pc, #80]	; (1d000 <imgr_upload+0x1f8>)
   1cfb0:	6851      	ldr	r1, [r2, #4]
   1cfb2:	440b      	add	r3, r1
   1cfb4:	6053      	str	r3, [r2, #4]
            if (imgr_state.off == imgr_state.size) {
   1cfb6:	6892      	ldr	r2, [r2, #8]
   1cfb8:	4293      	cmp	r3, r2
   1cfba:	d1a1      	bne.n	1cf00 <imgr_upload+0xf8>
                imgmgr_dfu_pending();
   1cfbc:	f7ff ff1a 	bl	1cdf4 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   1cfc0:	4b0f      	ldr	r3, [pc, #60]	; (1d000 <imgr_upload+0x1f8>)
   1cfc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cfc6:	601a      	str	r2, [r3, #0]
   1cfc8:	e79a      	b.n	1cf00 <imgr_upload+0xf8>
            errstr = imgmgr_err_str_flash_write_failed;
   1cfca:	2300      	movs	r3, #0
   1cfcc:	9309      	str	r3, [sp, #36]	; 0x24
            rc = MGMT_ERR_EUNKNOWN;
   1cfce:	2401      	movs	r4, #1
            goto end;
   1cfd0:	e796      	b.n	1cf00 <imgr_upload+0xf8>
        imgmgr_dfu_stopped();
   1cfd2:	f7ff fefb 	bl	1cdcc <imgmgr_dfu_stopped>
        return imgr_error_rsp(cb, rc, errstr);
   1cfd6:	e000      	b.n	1cfda <imgr_upload+0x1d2>
        return MGMT_ERR_EINVAL;
   1cfd8:	2403      	movs	r4, #3
}
   1cfda:	4620      	mov	r0, r4
   1cfdc:	f50d 7d62 	add.w	sp, sp, #904	; 0x388
   1cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfe4:	00025600 	.word	0x00025600
   1cfe8:	00025608 	.word	0x00025608
   1cfec:	000241dc 	.word	0x000241dc
   1cff0:	0002560c 	.word	0x0002560c
   1cff4:	00025610 	.word	0x00025610
   1cff8:	200071c8 	.word	0x200071c8
   1cffc:	200071c4 	.word	0x200071c4
   1d000:	20007194 	.word	0x20007194

0001d004 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
   1d004:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   1d006:	4b03      	ldr	r3, [pc, #12]	; (1d014 <imgmgr_dfu_confirmed+0x10>)
   1d008:	681b      	ldr	r3, [r3, #0]
   1d00a:	b113      	cbz	r3, 1d012 <imgmgr_dfu_confirmed+0xe>
   1d00c:	68db      	ldr	r3, [r3, #12]
   1d00e:	b103      	cbz	r3, 1d012 <imgmgr_dfu_confirmed+0xe>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   1d010:	4798      	blx	r3
    }
}
   1d012:	bd08      	pop	{r3, pc}
   1d014:	20007190 	.word	0x20007190

0001d018 <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   1d018:	b510      	push	{r4, lr}
   1d01a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d01c:	4b0a      	ldr	r3, [pc, #40]	; (1d048 <imgmgr_module_init+0x30>)
   1d01e:	781b      	ldrb	r3, [r3, #0]
   1d020:	b16b      	cbz	r3, 1d03e <imgmgr_module_init+0x26>

    rc = mgmt_group_register(&imgr_nmgr_group);
   1d022:	480a      	ldr	r0, [pc, #40]	; (1d04c <imgmgr_module_init+0x34>)
   1d024:	f000 fab6 	bl	1d594 <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d028:	b138      	cbz	r0, 1d03a <imgmgr_module_init+0x22>
   1d02a:	2000      	movs	r0, #0
   1d02c:	9000      	str	r0, [sp, #0]
   1d02e:	4b08      	ldr	r3, [pc, #32]	; (1d050 <imgmgr_module_init+0x38>)
   1d030:	681c      	ldr	r4, [r3, #0]
   1d032:	4603      	mov	r3, r0
   1d034:	4602      	mov	r2, r0
   1d036:	4601      	mov	r1, r0
   1d038:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   1d03a:	b002      	add	sp, #8
   1d03c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d03e:	461a      	mov	r2, r3
   1d040:	4619      	mov	r1, r3
   1d042:	4618      	mov	r0, r3
   1d044:	f7f0 f98c 	bl	d360 <__assert_func>
   1d048:	20006ca8 	.word	0x20006ca8
   1d04c:	2000162c 	.word	0x2000162c
   1d050:	2000143c 	.word	0x2000143c

0001d054 <imgmgr_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMGMGR_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1d054:	2000      	movs	r0, #0
   1d056:	4770      	bx	lr

0001d058 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
   1d058:	b508      	push	{r3, lr}
   1d05a:	4601      	mov	r1, r0
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
   1d05c:	2200      	movs	r2, #0
   1d05e:	4802      	ldr	r0, [pc, #8]	; (1d068 <imgmgr_log_upload_start+0x10>)
   1d060:	f7ff fff8 	bl	1d054 <imgmgr_log_gen>
}
   1d064:	bd08      	pop	{r3, pc}
   1d066:	bf00      	nop
   1d068:	00025650 	.word	0x00025650

0001d06c <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
   1d06c:	b508      	push	{r3, lr}
   1d06e:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
   1d070:	2100      	movs	r1, #0
   1d072:	4802      	ldr	r0, [pc, #8]	; (1d07c <imgmgr_log_upload_done+0x10>)
   1d074:	f7ff ffee 	bl	1d054 <imgmgr_log_gen>
}
   1d078:	bd08      	pop	{r3, pc}
   1d07a:	bf00      	nop
   1d07c:	00025658 	.word	0x00025658

0001d080 <imgmgr_log_pending>:

int
imgmgr_log_pending(int status, const uint8_t *hash)
{
   1d080:	b508      	push	{r3, lr}
   1d082:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_PEND, status, hash);
   1d084:	4601      	mov	r1, r0
   1d086:	4802      	ldr	r0, [pc, #8]	; (1d090 <imgmgr_log_pending+0x10>)
   1d088:	f7ff ffe4 	bl	1d054 <imgmgr_log_gen>
}
   1d08c:	bd08      	pop	{r3, pc}
   1d08e:	bf00      	nop
   1d090:	00025660 	.word	0x00025660

0001d094 <imgmgr_log_confirm>:

int
imgmgr_log_confirm(int status, const uint8_t *hash)
{
   1d094:	b508      	push	{r3, lr}
   1d096:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_CONF, status, hash);
   1d098:	4601      	mov	r1, r0
   1d09a:	4802      	ldr	r0, [pc, #8]	; (1d0a4 <imgmgr_log_confirm+0x10>)
   1d09c:	f7ff ffda 	bl	1d054 <imgmgr_log_gen>
}
   1d0a0:	bd08      	pop	{r3, pc}
   1d0a2:	bf00      	nop
   1d0a4:	00025668 	.word	0x00025668

0001d0a8 <imgmgr_state_flags>:
#include "imgmgr_priv.h"
#include "log/log_fcb_slot1.h"

uint8_t
imgmgr_state_flags(int query_slot)
{
   1d0a8:	b538      	push	{r3, r4, r5, lr}
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1d0aa:	2801      	cmp	r0, #1
   1d0ac:	d809      	bhi.n	1d0c2 <imgmgr_state_flags+0x1a>
   1d0ae:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = boot_swap_type();
   1d0b0:	f002 ff48 	bl	1ff44 <boot_swap_type>
    switch (swap_type) {
   1d0b4:	3801      	subs	r0, #1
   1d0b6:	2803      	cmp	r0, #3
   1d0b8:	d825      	bhi.n	1d106 <imgmgr_state_flags+0x5e>
   1d0ba:	e8df f000 	tbb	[pc, r0]
   1d0be:	1508      	.short	0x1508
   1d0c0:	1f1a      	.short	0x1f1a
    assert(query_slot == 0 || query_slot == 1);
   1d0c2:	2300      	movs	r3, #0
   1d0c4:	461a      	mov	r2, r3
   1d0c6:	4619      	mov	r1, r3
   1d0c8:	4618      	mov	r0, r3
   1d0ca:	f7f0 f949 	bl	d360 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   1d0ce:	b1e4      	cbz	r4, 1d10a <imgmgr_state_flags+0x62>
    flags = 0;
   1d0d0:	2500      	movs	r5, #0

    /* Slot 0 is always active.  Slot 1 is also active if a split app is
     * currently running.
     */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0 || split_app_active_get()) {
   1d0d2:	bb44      	cbnz	r4, 1d126 <imgmgr_state_flags+0x7e>
        flags |= IMGMGR_STATE_F_ACTIVE;
   1d0d4:	f045 0504 	orr.w	r5, r5, #4
    }

    /* Read the split/status config state to determine any pending split-image
     * state changes.
     */
    split_mode = split_mode_get();
   1d0d8:	f7f9 f840 	bl	1615c <split_mode_get>
    switch (split_mode) {
   1d0dc:	2803      	cmp	r0, #3
   1d0de:	d838      	bhi.n	1d152 <imgmgr_state_flags+0xaa>
   1d0e0:	e8df f000 	tbb	[pc, r0]
   1d0e4:	2d263228 	.word	0x2d263228
        if (query_slot == 0) {
   1d0e8:	b18c      	cbz	r4, 1d10e <imgmgr_state_flags+0x66>
        } else if (query_slot == 1) {
   1d0ea:	2c01      	cmp	r4, #1
   1d0ec:	d011      	beq.n	1d112 <imgmgr_state_flags+0x6a>
    flags = 0;
   1d0ee:	2500      	movs	r5, #0
   1d0f0:	e7ef      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1d0f2:	b184      	cbz	r4, 1d116 <imgmgr_state_flags+0x6e>
        } else if (query_slot == 1) {
   1d0f4:	2c01      	cmp	r4, #1
   1d0f6:	d010      	beq.n	1d11a <imgmgr_state_flags+0x72>
    flags = 0;
   1d0f8:	2500      	movs	r5, #0
   1d0fa:	e7ea      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   1d0fc:	b17c      	cbz	r4, 1d11e <imgmgr_state_flags+0x76>
        } else if (query_slot == 1) {
   1d0fe:	2c01      	cmp	r4, #1
   1d100:	d00f      	beq.n	1d122 <imgmgr_state_flags+0x7a>
    flags = 0;
   1d102:	2500      	movs	r5, #0
   1d104:	e7e5      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
    switch (swap_type) {
   1d106:	2500      	movs	r5, #0
   1d108:	e7e3      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1d10a:	2506      	movs	r5, #6
   1d10c:	e7e1      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1d10e:	2502      	movs	r5, #2
   1d110:	e7df      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING;
   1d112:	2501      	movs	r5, #1
   1d114:	e7dd      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1d116:	2502      	movs	r5, #2
   1d118:	e7db      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   1d11a:	2509      	movs	r5, #9
   1d11c:	e7d9      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   1d11e:	2504      	movs	r5, #4
   1d120:	e7d7      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1d122:	2502      	movs	r5, #2
   1d124:	e7d5      	b.n	1d0d2 <imgmgr_state_flags+0x2a>
    if (query_slot == 0 || split_app_active_get()) {
   1d126:	f7f9 f81f 	bl	16168 <split_app_active_get>
   1d12a:	2800      	cmp	r0, #0
   1d12c:	d0d4      	beq.n	1d0d8 <imgmgr_state_flags+0x30>
   1d12e:	e7d1      	b.n	1d0d4 <imgmgr_state_flags+0x2c>
    case SPLIT_MODE_LOADER:
        break;

    case SPLIT_MODE_APP:
        if (query_slot == 1) {
   1d130:	2c01      	cmp	r4, #1
   1d132:	d001      	beq.n	1d138 <imgmgr_state_flags+0x90>
        assert(0);
        break;
    }

    return flags;
}
   1d134:	4628      	mov	r0, r5
   1d136:	bd38      	pop	{r3, r4, r5, pc}
            flags |= IMGMGR_STATE_F_CONFIRMED;
   1d138:	f045 0502 	orr.w	r5, r5, #2
   1d13c:	e7fa      	b.n	1d134 <imgmgr_state_flags+0x8c>
        if (query_slot == 0) {
   1d13e:	2c00      	cmp	r4, #0
   1d140:	d1f8      	bne.n	1d134 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1d142:	f045 0501 	orr.w	r5, r5, #1
   1d146:	e7f5      	b.n	1d134 <imgmgr_state_flags+0x8c>
        if (query_slot == 1) {
   1d148:	2c01      	cmp	r4, #1
   1d14a:	d1f3      	bne.n	1d134 <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   1d14c:	f045 0501 	orr.w	r5, r5, #1
   1d150:	e7f0      	b.n	1d134 <imgmgr_state_flags+0x8c>
        assert(0);
   1d152:	2300      	movs	r3, #0
   1d154:	461a      	mov	r2, r3
   1d156:	4619      	mov	r1, r3
   1d158:	4618      	mov	r0, r3
   1d15a:	f7f0 f901 	bl	d360 <__assert_func>

0001d15e <imgmgr_state_any_pending>:

static int
imgmgr_state_any_pending(void)
{
   1d15e:	b508      	push	{r3, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1d160:	2000      	movs	r0, #0
   1d162:	f7ff ffa1 	bl	1d0a8 <imgmgr_state_flags>
   1d166:	f010 0f01 	tst.w	r0, #1
   1d16a:	d001      	beq.n	1d170 <imgmgr_state_any_pending+0x12>
   1d16c:	2001      	movs	r0, #1
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}
   1d16e:	bd08      	pop	{r3, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   1d170:	2001      	movs	r0, #1
   1d172:	f7ff ff99 	bl	1d0a8 <imgmgr_state_flags>
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   1d176:	f010 0f01 	tst.w	r0, #1
   1d17a:	d101      	bne.n	1d180 <imgmgr_state_any_pending+0x22>
   1d17c:	2000      	movs	r0, #0
   1d17e:	e7f6      	b.n	1d16e <imgmgr_state_any_pending+0x10>
   1d180:	2001      	movs	r0, #1
   1d182:	e7f4      	b.n	1d16e <imgmgr_state_any_pending+0x10>

0001d184 <imgmgr_state_slot_in_use>:

int
imgmgr_state_slot_in_use(int slot)
{
   1d184:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   1d186:	f7ff ff8f 	bl	1d0a8 <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1d18a:	f010 0f06 	tst.w	r0, #6
   1d18e:	d104      	bne.n	1d19a <imgmgr_state_slot_in_use+0x16>
   1d190:	f010 0f01 	tst.w	r0, #1
   1d194:	d003      	beq.n	1d19e <imgmgr_state_slot_in_use+0x1a>
   1d196:	2001      	movs	r0, #1
   1d198:	e000      	b.n	1d19c <imgmgr_state_slot_in_use+0x18>
   1d19a:	2001      	movs	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   1d19c:	bd08      	pop	{r3, pc}
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   1d19e:	2000      	movs	r0, #0
   1d1a0:	e7fc      	b.n	1d19c <imgmgr_state_slot_in_use+0x18>

0001d1a2 <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   1d1a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1a4:	b08b      	sub	sp, #44	; 0x2c
   1d1a6:	4605      	mov	r5, r0
   1d1a8:	460c      	mov	r4, r1
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   1d1aa:	f7ff ff7d 	bl	1d0a8 <imgmgr_state_flags>
   1d1ae:	4606      	mov	r6, r0
    split_app_active = split_app_active_get();
   1d1b0:	f7f8 ffda 	bl	16168 <split_app_active_get>
   1d1b4:	4607      	mov	r7, r0
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   1d1b6:	f016 0f02 	tst.w	r6, #2
   1d1ba:	d001      	beq.n	1d1c0 <imgmgr_state_set_pending+0x1e>
   1d1bc:	bb6d      	cbnz	r5, 1d21a <imgmgr_state_set_pending+0x78>
        (slot != 0 || !split_app_active)) {
   1d1be:	b378      	cbz	r0, 1d220 <imgmgr_state_set_pending+0x7e>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   1d1c0:	ab09      	add	r3, sp, #36	; 0x24
   1d1c2:	aa01      	add	r2, sp, #4
   1d1c4:	2100      	movs	r1, #0
   1d1c6:	4628      	mov	r0, r5
   1d1c8:	f7ff fbe4 	bl	1c994 <imgr_read_info>
    if (rc != 0) {
   1d1cc:	bb58      	cbnz	r0, 1d226 <imgmgr_state_set_pending+0x84>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1d1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d1d0:	f013 0f10 	tst.w	r3, #16
   1d1d4:	d114      	bne.n	1d200 <imgmgr_state_set_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   1d1d6:	b13f      	cbz	r7, 1d1e8 <imgmgr_state_set_pending+0x46>
                rc = MGMT_ERR_EUNKNOWN;
                goto done;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1d1d8:	b16c      	cbz	r4, 1d1f6 <imgmgr_state_set_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1d1da:	2000      	movs	r0, #0
   1d1dc:	f7f9 f838 	bl	16250 <split_write_split>
   1d1e0:	4605      	mov	r5, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1d1e2:	bb65      	cbnz	r5, 1d23e <imgmgr_state_set_pending+0x9c>
    hashp = hash;
   1d1e4:	a901      	add	r1, sp, #4
   1d1e6:	e020      	b.n	1d22a <imgmgr_state_set_pending+0x88>
            rc = boot_set_pending(permanent);
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	f002 fefd 	bl	1ffe8 <boot_set_pending>
            if (rc != 0) {
   1d1ee:	4605      	mov	r5, r0
   1d1f0:	bb10      	cbnz	r0, 1d238 <imgmgr_state_set_pending+0x96>
    hashp = hash;
   1d1f2:	a901      	add	r1, sp, #4
   1d1f4:	e019      	b.n	1d22a <imgmgr_state_set_pending+0x88>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1d1f6:	2003      	movs	r0, #3
   1d1f8:	f7f9 f82a 	bl	16250 <split_write_split>
   1d1fc:	4605      	mov	r5, r0
   1d1fe:	e7f0      	b.n	1d1e2 <imgmgr_state_set_pending+0x40>
                goto done;
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1d200:	b134      	cbz	r4, 1d210 <imgmgr_state_set_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   1d202:	2002      	movs	r0, #2
   1d204:	f7f9 f824 	bl	16250 <split_write_split>
   1d208:	4605      	mov	r5, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1d20a:	b9dd      	cbnz	r5, 1d244 <imgmgr_state_set_pending+0xa2>
    hashp = hash;
   1d20c:	a901      	add	r1, sp, #4
   1d20e:	e00c      	b.n	1d22a <imgmgr_state_set_pending+0x88>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1d210:	2001      	movs	r0, #1
   1d212:	f7f9 f81d 	bl	16250 <split_write_split>
   1d216:	4605      	mov	r5, r0
   1d218:	e7f7      	b.n	1d20a <imgmgr_state_set_pending+0x68>
        rc = MGMT_ERR_EBADSTATE;
   1d21a:	2506      	movs	r5, #6
    hashp = NULL;
   1d21c:	2100      	movs	r1, #0
   1d21e:	e004      	b.n	1d22a <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EBADSTATE;
   1d220:	2506      	movs	r5, #6
    hashp = NULL;
   1d222:	2100      	movs	r1, #0
   1d224:	e001      	b.n	1d22a <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EUNKNOWN;
   1d226:	2501      	movs	r5, #1
    hashp = NULL;
   1d228:	2100      	movs	r1, #0
            goto done;
        }
    }

done:
    if (permanent) {
   1d22a:	b174      	cbz	r4, 1d24a <imgmgr_state_set_pending+0xa8>
        imgmgr_log_confirm(rc, hashp);
   1d22c:	4628      	mov	r0, r5
   1d22e:	f7ff ff31 	bl	1d094 <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   1d232:	4628      	mov	r0, r5
   1d234:	b00b      	add	sp, #44	; 0x2c
   1d236:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rc = MGMT_ERR_EUNKNOWN;
   1d238:	2501      	movs	r5, #1
    hashp = hash;
   1d23a:	a901      	add	r1, sp, #4
   1d23c:	e7f5      	b.n	1d22a <imgmgr_state_set_pending+0x88>
                rc = MGMT_ERR_EUNKNOWN;
   1d23e:	2501      	movs	r5, #1
    hashp = hash;
   1d240:	a901      	add	r1, sp, #4
   1d242:	e7f2      	b.n	1d22a <imgmgr_state_set_pending+0x88>
            rc = MGMT_ERR_EUNKNOWN;
   1d244:	2501      	movs	r5, #1
    hashp = hash;
   1d246:	a901      	add	r1, sp, #4
   1d248:	e7ef      	b.n	1d22a <imgmgr_state_set_pending+0x88>
        imgmgr_log_pending(rc, hashp);
   1d24a:	4628      	mov	r0, r5
   1d24c:	f7ff ff18 	bl	1d080 <imgmgr_log_pending>
    return rc;
   1d250:	e7ef      	b.n	1d232 <imgmgr_state_set_pending+0x90>

0001d252 <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   1d252:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
   1d254:	f7ff ff83 	bl	1d15e <imgmgr_state_any_pending>
   1d258:	b9b8      	cbnz	r0, 1d28a <imgmgr_state_confirm+0x38>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1d25a:	f002 ff08 	bl	2006e <boot_set_confirmed>
    if (rc != 0) {
   1d25e:	b108      	cbz	r0, 1d264 <imgmgr_state_confirm+0x12>
        rc = MGMT_ERR_EUNKNOWN;
   1d260:	2401      	movs	r4, #1
   1d262:	e013      	b.n	1d28c <imgmgr_state_confirm+0x3a>
        goto done;
    }

    /* If a split app in slot 1 is active, confirm it as well. */
    if (split_app_active_get()) {
   1d264:	f7f8 ff80 	bl	16168 <split_app_active_get>
   1d268:	b138      	cbz	r0, 1d27a <imgmgr_state_confirm+0x28>
        rc = split_write_split(SPLIT_MODE_APP);
   1d26a:	2002      	movs	r0, #2
   1d26c:	f7f8 fff0 	bl	16250 <split_write_split>
        if (rc != 0) {
   1d270:	4604      	mov	r4, r0
   1d272:	b988      	cbnz	r0, 1d298 <imgmgr_state_confirm+0x46>
        /* If logging to slot1 is enabled, we can unlock slot1 here. */
        log_fcb_slot1_unlock();
#endif
    }

    imgmgr_dfu_confirmed();
   1d274:	f7ff fec6 	bl	1d004 <imgmgr_dfu_confirmed>
   1d278:	e008      	b.n	1d28c <imgmgr_state_confirm+0x3a>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1d27a:	2000      	movs	r0, #0
   1d27c:	f7f8 ffe8 	bl	16250 <split_write_split>
        if (rc != 0) {
   1d280:	4604      	mov	r4, r0
   1d282:	2800      	cmp	r0, #0
   1d284:	d0f6      	beq.n	1d274 <imgmgr_state_confirm+0x22>
            rc = MGMT_ERR_EUNKNOWN;
   1d286:	2401      	movs	r4, #1
   1d288:	e000      	b.n	1d28c <imgmgr_state_confirm+0x3a>
        rc = MGMT_ERR_EBADSTATE;
   1d28a:	2406      	movs	r4, #6

done:
    imgmgr_log_confirm(rc, NULL);
   1d28c:	2100      	movs	r1, #0
   1d28e:	4620      	mov	r0, r4
   1d290:	f7ff ff00 	bl	1d094 <imgmgr_log_confirm>
    return rc;
}
   1d294:	4620      	mov	r0, r4
   1d296:	bd10      	pop	{r4, pc}
            rc = MGMT_ERR_EUNKNOWN;
   1d298:	2401      	movs	r4, #1
   1d29a:	e7f7      	b.n	1d28c <imgmgr_state_confirm+0x3a>

0001d29c <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   1d29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2a0:	b09a      	sub	sp, #104	; 0x68
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   1d2a2:	f100 070c 	add.w	r7, r0, #12
   1d2a6:	2206      	movs	r2, #6
   1d2a8:	4961      	ldr	r1, [pc, #388]	; (1d430 <imgmgr_state_read+0x194>)
   1d2aa:	4638      	mov	r0, r7
   1d2ac:	f7f9 fdc5 	bl	16e3a <cbor_encode_text_string>
   1d2b0:	4604      	mov	r4, r0

    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   1d2b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d2b6:	a904      	add	r1, sp, #16
   1d2b8:	4638      	mov	r0, r7
   1d2ba:	f7f9 fdc5 	bl	16e48 <cbor_encoder_create_array>
   1d2be:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   1d2c0:	f04f 0800 	mov.w	r8, #0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   1d2c4:	4645      	mov	r5, r8
   1d2c6:	e080      	b.n	1d3ca <imgmgr_state_read+0x12e>

        if (flags & IMAGE_F_NON_BOOTABLE) {
            any_non_bootable = 1;
        }

        state_flags = imgmgr_state_flags(i);
   1d2c8:	4628      	mov	r0, r5
   1d2ca:	f7ff feed 	bl	1d0a8 <imgmgr_state_flags>
   1d2ce:	4606      	mov	r6, r0

        g_err |= cbor_encoder_create_map(&images, &image,
   1d2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d2d4:	4669      	mov	r1, sp
   1d2d6:	a804      	add	r0, sp, #16
   1d2d8:	f7f9 fdbb 	bl	16e52 <cbor_encoder_create_map>
   1d2dc:	4304      	orrs	r4, r0
   1d2de:	2204      	movs	r2, #4
   1d2e0:	4954      	ldr	r1, [pc, #336]	; (1d434 <imgmgr_state_read+0x198>)
   1d2e2:	4668      	mov	r0, sp
   1d2e4:	f7f9 fda9 	bl	16e3a <cbor_encode_text_string>
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   1d2e8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   1d2ea:	462a      	mov	r2, r5
   1d2ec:	17eb      	asrs	r3, r5, #31
   1d2ee:	4668      	mov	r0, sp
   1d2f0:	f7f9 fd28 	bl	16d44 <cbor_encode_int>
   1d2f4:	4304      	orrs	r4, r0
   1d2f6:	2207      	movs	r2, #7
   1d2f8:	494f      	ldr	r1, [pc, #316]	; (1d438 <imgmgr_state_read+0x19c>)
   1d2fa:	4668      	mov	r0, sp
   1d2fc:	f7f9 fd9d 	bl	16e3a <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "version");
   1d300:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   1d302:	a908      	add	r1, sp, #32
   1d304:	a817      	add	r0, sp, #92	; 0x5c
   1d306:	f000 f8f5 	bl	1d4f4 <imgr_ver_str>
   1d30a:	a808      	add	r0, sp, #32
   1d30c:	f7ff f9e8 	bl	1c6e0 <strlen>
   1d310:	4602      	mov	r2, r0
   1d312:	a908      	add	r1, sp, #32
   1d314:	4668      	mov	r0, sp
   1d316:	f7f9 fd90 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   1d31a:	4304      	orrs	r4, r0
   1d31c:	2204      	movs	r2, #4
   1d31e:	4947      	ldr	r1, [pc, #284]	; (1d43c <imgmgr_state_read+0x1a0>)
   1d320:	4668      	mov	r0, sp
   1d322:	f7f9 fd8a 	bl	16e3a <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "hash");
   1d326:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   1d328:	2220      	movs	r2, #32
   1d32a:	a90f      	add	r1, sp, #60	; 0x3c
   1d32c:	4668      	mov	r0, sp
   1d32e:	f7f9 fd7d 	bl	16e2c <cbor_encode_byte_string>
   1d332:	4304      	orrs	r4, r0
   1d334:	2208      	movs	r2, #8
   1d336:	4942      	ldr	r1, [pc, #264]	; (1d440 <imgmgr_state_read+0x1a4>)
   1d338:	4668      	mov	r0, sp
   1d33a:	f7f9 fd7e 	bl	16e3a <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   1d33e:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1d340:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d342:	f013 0f10 	tst.w	r3, #16
   1d346:	bf0c      	ite	eq
   1d348:	2101      	moveq	r1, #1
   1d34a:	2100      	movne	r1, #0
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d34c:	3114      	adds	r1, #20
   1d34e:	4668      	mov	r0, sp
   1d350:	f7f9 fd3e 	bl	16dd0 <cbor_encode_simple_value>
   1d354:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d356:	2207      	movs	r2, #7
   1d358:	493a      	ldr	r1, [pc, #232]	; (1d444 <imgmgr_state_read+0x1a8>)
   1d35a:	4668      	mov	r0, sp
   1d35c:	f7f9 fd6d 	bl	16e3a <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   1d360:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d362:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d366:	3114      	adds	r1, #20
   1d368:	4668      	mov	r0, sp
   1d36a:	f7f9 fd31 	bl	16dd0 <cbor_encode_simple_value>
   1d36e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d370:	2209      	movs	r2, #9
   1d372:	4935      	ldr	r1, [pc, #212]	; (1d448 <imgmgr_state_read+0x1ac>)
   1d374:	4668      	mov	r0, sp
   1d376:	f7f9 fd60 	bl	16e3a <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   1d37a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d37c:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d380:	3114      	adds	r1, #20
   1d382:	4668      	mov	r0, sp
   1d384:	f7f9 fd24 	bl	16dd0 <cbor_encode_simple_value>
   1d388:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d38a:	2206      	movs	r2, #6
   1d38c:	492f      	ldr	r1, [pc, #188]	; (1d44c <imgmgr_state_read+0x1b0>)
   1d38e:	4668      	mov	r0, sp
   1d390:	f7f9 fd53 	bl	16e3a <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   1d394:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d396:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d39a:	3114      	adds	r1, #20
   1d39c:	4668      	mov	r0, sp
   1d39e:	f7f9 fd17 	bl	16dd0 <cbor_encode_simple_value>
   1d3a2:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d3a4:	2209      	movs	r2, #9
   1d3a6:	492a      	ldr	r1, [pc, #168]	; (1d450 <imgmgr_state_read+0x1b4>)
   1d3a8:	4668      	mov	r0, sp
   1d3aa:	f7f9 fd46 	bl	16e3a <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   1d3ae:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   1d3b0:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1d3b4:	3114      	adds	r1, #20
   1d3b6:	4668      	mov	r0, sp
   1d3b8:	f7f9 fd0a 	bl	16dd0 <cbor_encode_simple_value>
   1d3bc:	4304      	orrs	r4, r0
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   1d3be:	4669      	mov	r1, sp
   1d3c0:	a804      	add	r0, sp, #16
   1d3c2:	f7f9 fd54 	bl	16e6e <cbor_encoder_close_container>
   1d3c6:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   1d3c8:	3501      	adds	r5, #1
   1d3ca:	2d01      	cmp	r5, #1
   1d3cc:	dc0f      	bgt.n	1d3ee <imgmgr_state_read+0x152>
        rc = imgr_read_info(i, &ver, hash, &flags);
   1d3ce:	ab19      	add	r3, sp, #100	; 0x64
   1d3d0:	aa0f      	add	r2, sp, #60	; 0x3c
   1d3d2:	a917      	add	r1, sp, #92	; 0x5c
   1d3d4:	4628      	mov	r0, r5
   1d3d6:	f7ff fadd 	bl	1c994 <imgr_read_info>
        if (rc != 0) {
   1d3da:	2800      	cmp	r0, #0
   1d3dc:	d1f4      	bne.n	1d3c8 <imgmgr_state_read+0x12c>
        if (flags & IMAGE_F_NON_BOOTABLE) {
   1d3de:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d3e0:	f013 0f10 	tst.w	r3, #16
   1d3e4:	f43f af70 	beq.w	1d2c8 <imgmgr_state_read+0x2c>
            any_non_bootable = 1;
   1d3e8:	f04f 0801 	mov.w	r8, #1
   1d3ec:	e76c      	b.n	1d2c8 <imgmgr_state_read+0x2c>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   1d3ee:	a904      	add	r1, sp, #16
   1d3f0:	4638      	mov	r0, r7
   1d3f2:	f7f9 fd3c 	bl	16e6e <cbor_encoder_close_container>
   1d3f6:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   1d3f8:	f1b8 0f00 	cmp.w	r8, #0
   1d3fc:	d112      	bne.n	1d424 <imgmgr_state_read+0x188>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1d3fe:	220b      	movs	r2, #11
   1d400:	4914      	ldr	r1, [pc, #80]	; (1d454 <imgmgr_state_read+0x1b8>)
   1d402:	4638      	mov	r0, r7
   1d404:	f7f9 fd19 	bl	16e3a <cbor_encode_text_string>
        split_status = split_check_status();
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   1d408:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   1d40a:	4642      	mov	r2, r8
   1d40c:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1d410:	4638      	mov	r0, r7
   1d412:	f7f9 fc97 	bl	16d44 <cbor_encode_int>

    if (g_err) {
   1d416:	ea54 0300 	orrs.w	r3, r4, r0
   1d41a:	d107      	bne.n	1d42c <imgmgr_state_read+0x190>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   1d41c:	2000      	movs	r0, #0
}
   1d41e:	b01a      	add	sp, #104	; 0x68
   1d420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        split_status = split_check_status();
   1d424:	f7f8 fe7e 	bl	16124 <split_check_status>
   1d428:	4680      	mov	r8, r0
   1d42a:	e7e8      	b.n	1d3fe <imgmgr_state_read+0x162>
        return MGMT_ERR_ENOMEM;
   1d42c:	2002      	movs	r0, #2
   1d42e:	e7f6      	b.n	1d41e <imgmgr_state_read+0x182>
   1d430:	00025670 	.word	0x00025670
   1d434:	00025678 	.word	0x00025678
   1d438:	00025680 	.word	0x00025680
   1d43c:	00025688 	.word	0x00025688
   1d440:	00025690 	.word	0x00025690
   1d444:	0002569c 	.word	0x0002569c
   1d448:	000256a4 	.word	0x000256a4
   1d44c:	000256b0 	.word	0x000256b0
   1d450:	000256b8 	.word	0x000256b8
   1d454:	000256c4 	.word	0x000256c4

0001d458 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   1d458:	b510      	push	{r4, lr}
   1d45a:	b0ae      	sub	sp, #184	; 0xb8
   1d45c:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   1d45e:	2100      	movs	r1, #0
   1d460:	9125      	str	r1, [sp, #148]	; 0x94
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1d462:	2290      	movs	r2, #144	; 0x90
   1d464:	4668      	mov	r0, sp
   1d466:	f7f4 f814 	bl	11492 <memset>
   1d46a:	4b20      	ldr	r3, [pc, #128]	; (1d4ec <imgmgr_state_write+0x94>)
   1d46c:	9300      	str	r3, [sp, #0]
   1d46e:	2303      	movs	r3, #3
   1d470:	f88d 3004 	strb.w	r3, [sp, #4]
   1d474:	ab26      	add	r3, sp, #152	; 0x98
   1d476:	9302      	str	r3, [sp, #8]
   1d478:	ab25      	add	r3, sp, #148	; 0x94
   1d47a:	9303      	str	r3, [sp, #12]
   1d47c:	2320      	movs	r3, #32
   1d47e:	930a      	str	r3, [sp, #40]	; 0x28
   1d480:	4b1b      	ldr	r3, [pc, #108]	; (1d4f0 <imgmgr_state_write+0x98>)
   1d482:	930c      	str	r3, [sp, #48]	; 0x30
   1d484:	2305      	movs	r3, #5
   1d486:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1d48a:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   1d48e:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   1d490:	4669      	mov	r1, sp
   1d492:	f104 001c 	add.w	r0, r4, #28
   1d496:	f7f9 fae9 	bl	16a6c <cbor_read_object>
    if (rc != 0) {
   1d49a:	bb10      	cbnz	r0, 1d4e2 <imgmgr_state_write+0x8a>
   1d49c:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1d49e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1d4a0:	b97a      	cbnz	r2, 1d4c2 <imgmgr_state_write+0x6a>
        if (confirm) {
   1d4a2:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1d4a6:	b152      	cbz	r2, 1d4be <imgmgr_state_write+0x66>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   1d4a8:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   1d4ac:	b992      	cbnz	r2, 1d4d4 <imgmgr_state_write+0x7c>
        /* Confirm current setup. */
        rc = imgmgr_state_confirm();
    } else {
        rc = imgmgr_state_set_pending(slot, confirm);
   1d4ae:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   1d4b2:	4618      	mov	r0, r3
   1d4b4:	f7ff fe75 	bl	1d1a2 <imgmgr_state_set_pending>
    }
    if (rc != 0) {
   1d4b8:	b178      	cbz	r0, 1d4da <imgmgr_state_write+0x82>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d4ba:	b02e      	add	sp, #184	; 0xb8
   1d4bc:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   1d4be:	2003      	movs	r0, #3
   1d4c0:	e7fb      	b.n	1d4ba <imgmgr_state_write+0x62>
        slot = imgr_find_by_hash(hash, NULL);
   1d4c2:	2100      	movs	r1, #0
   1d4c4:	a826      	add	r0, sp, #152	; 0x98
   1d4c6:	f7ff fb0b 	bl	1cae0 <imgr_find_by_hash>
        if (slot < 0) {
   1d4ca:	1e03      	subs	r3, r0, #0
   1d4cc:	db0b      	blt.n	1d4e6 <imgmgr_state_write+0x8e>
    if (slot == 0 && confirm) {
   1d4ce:	2b00      	cmp	r3, #0
   1d4d0:	d1ed      	bne.n	1d4ae <imgmgr_state_write+0x56>
   1d4d2:	e7e9      	b.n	1d4a8 <imgmgr_state_write+0x50>
        rc = imgmgr_state_confirm();
   1d4d4:	f7ff febd 	bl	1d252 <imgmgr_state_confirm>
   1d4d8:	e7ee      	b.n	1d4b8 <imgmgr_state_write+0x60>
    rc = imgmgr_state_read(cb);
   1d4da:	4620      	mov	r0, r4
   1d4dc:	f7ff fede 	bl	1d29c <imgmgr_state_read>
    if (rc != 0) {
   1d4e0:	e7eb      	b.n	1d4ba <imgmgr_state_write+0x62>
        return MGMT_ERR_EINVAL;
   1d4e2:	2003      	movs	r0, #3
   1d4e4:	e7e9      	b.n	1d4ba <imgmgr_state_write+0x62>
            return MGMT_ERR_EINVAL;
   1d4e6:	2003      	movs	r0, #3
   1d4e8:	e7e7      	b.n	1d4ba <imgmgr_state_write+0x62>
   1d4ea:	bf00      	nop
   1d4ec:	00025688 	.word	0x00025688
   1d4f0:	000256d0 	.word	0x000256d0

0001d4f4 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   1d4f4:	b500      	push	{lr}
   1d4f6:	b083      	sub	sp, #12
   1d4f8:	4602      	mov	r2, r0
   1d4fa:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   1d4fc:	6853      	ldr	r3, [r2, #4]
   1d4fe:	b153      	cbz	r3, 1d516 <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   1d500:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   1d502:	9301      	str	r3, [sp, #4]
   1d504:	9100      	str	r1, [sp, #0]
   1d506:	7853      	ldrb	r3, [r2, #1]
   1d508:	7812      	ldrb	r2, [r2, #0]
   1d50a:	4907      	ldr	r1, [pc, #28]	; (1d528 <imgr_ver_str+0x34>)
   1d50c:	f004 f8da 	bl	216c4 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   1d510:	b003      	add	sp, #12
   1d512:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   1d516:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   1d518:	9300      	str	r3, [sp, #0]
   1d51a:	7853      	ldrb	r3, [r2, #1]
   1d51c:	7812      	ldrb	r2, [r2, #0]
   1d51e:	4903      	ldr	r1, [pc, #12]	; (1d52c <imgr_ver_str+0x38>)
   1d520:	f004 f8d0 	bl	216c4 <sprintf>
   1d524:	e7f4      	b.n	1d510 <imgr_ver_str+0x1c>
   1d526:	bf00      	nop
   1d528:	000256d8 	.word	0x000256d8
   1d52c:	000256e8 	.word	0x000256e8

0001d530 <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   1d530:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1d532:	f7ef ffcf 	bl	d4d4 <os_started>
   1d536:	b900      	cbnz	r0, 1d53a <mgmt_group_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1d538:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   1d53a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d53e:	4802      	ldr	r0, [pc, #8]	; (1d548 <mgmt_group_list_lock+0x18>)
   1d540:	f7f0 fc9a 	bl	de78 <os_mutex_pend>
    if (rc != 0) {
   1d544:	e7f8      	b.n	1d538 <mgmt_group_list_lock+0x8>
   1d546:	bf00      	nop
   1d548:	200071cc 	.word	0x200071cc

0001d54c <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   1d54c:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   1d54e:	f7ef ffc1 	bl	d4d4 <os_started>
   1d552:	b900      	cbnz	r0, 1d556 <mgmt_group_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1d554:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&mgmt_group_lock);
   1d556:	4802      	ldr	r0, [pc, #8]	; (1d560 <mgmt_group_list_unlock+0x14>)
   1d558:	f7f0 fc32 	bl	ddc0 <os_mutex_release>
    if (rc != 0) {
   1d55c:	e7fa      	b.n	1d554 <mgmt_group_list_unlock+0x8>
   1d55e:	bf00      	nop
   1d560:	200071cc 	.word	0x200071cc

0001d564 <mgmt_find_group>:
    return (rc);
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id)
{
   1d564:	b538      	push	{r3, r4, r5, lr}
   1d566:	4605      	mov	r5, r0
    struct mgmt_group *group;
    int rc;

    group = NULL;

    rc = mgmt_group_list_lock();
   1d568:	f7ff ffe2 	bl	1d530 <mgmt_group_list_lock>
    if (rc != 0) {
   1d56c:	b960      	cbnz	r0, 1d588 <mgmt_find_group+0x24>
        goto err;
    }

    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1d56e:	4b08      	ldr	r3, [pc, #32]	; (1d590 <mgmt_find_group+0x2c>)
   1d570:	681c      	ldr	r4, [r3, #0]
   1d572:	b124      	cbz	r4, 1d57e <mgmt_find_group+0x1a>
        if (group->mg_group_id == group_id) {
   1d574:	88e3      	ldrh	r3, [r4, #6]
   1d576:	42ab      	cmp	r3, r5
   1d578:	d001      	beq.n	1d57e <mgmt_find_group+0x1a>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   1d57a:	68a4      	ldr	r4, [r4, #8]
   1d57c:	e7f9      	b.n	1d572 <mgmt_find_group+0xe>
            break;
        }
    }

    rc = mgmt_group_list_unlock();
   1d57e:	f7ff ffe5 	bl	1d54c <mgmt_group_list_unlock>
    if (rc != 0) {
   1d582:	b918      	cbnz	r0, 1d58c <mgmt_find_group+0x28>
    }

    return (group);
err:
    return (NULL);
}
   1d584:	4620      	mov	r0, r4
   1d586:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   1d588:	2400      	movs	r4, #0
   1d58a:	e7fb      	b.n	1d584 <mgmt_find_group+0x20>
   1d58c:	2400      	movs	r4, #0
   1d58e:	e7f9      	b.n	1d584 <mgmt_find_group+0x20>
   1d590:	20001638 	.word	0x20001638

0001d594 <mgmt_group_register>:
{
   1d594:	b510      	push	{r4, lr}
   1d596:	4604      	mov	r4, r0
    rc = mgmt_group_list_lock();
   1d598:	f7ff ffca 	bl	1d530 <mgmt_group_list_lock>
    if (rc != 0) {
   1d59c:	b100      	cbz	r0, 1d5a0 <mgmt_group_register+0xc>
}
   1d59e:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   1d5a0:	60a0      	str	r0, [r4, #8]
   1d5a2:	4b04      	ldr	r3, [pc, #16]	; (1d5b4 <mgmt_group_register+0x20>)
   1d5a4:	685a      	ldr	r2, [r3, #4]
   1d5a6:	6014      	str	r4, [r2, #0]
   1d5a8:	3408      	adds	r4, #8
   1d5aa:	605c      	str	r4, [r3, #4]
    rc = mgmt_group_list_unlock();
   1d5ac:	f7ff ffce 	bl	1d54c <mgmt_group_list_unlock>
    if (rc != 0) {
   1d5b0:	e7f5      	b.n	1d59e <mgmt_group_register+0xa>
   1d5b2:	bf00      	nop
   1d5b4:	20001638 	.word	0x20001638

0001d5b8 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   1d5b8:	b510      	push	{r4, lr}
   1d5ba:	460c      	mov	r4, r1
    struct mgmt_group *group;
    const struct mgmt_handler *handler;

    group = mgmt_find_group(group_id);
   1d5bc:	f7ff ffd2 	bl	1d564 <mgmt_find_group>
    if (!group) {
   1d5c0:	4603      	mov	r3, r0
   1d5c2:	b128      	cbz	r0, 1d5d0 <mgmt_find_handler+0x18>
        goto err;
    }

    if (handler_id >= group->mg_handlers_count) {
   1d5c4:	8882      	ldrh	r2, [r0, #4]
   1d5c6:	42a2      	cmp	r2, r4
   1d5c8:	d904      	bls.n	1d5d4 <mgmt_find_handler+0x1c>
        goto err;
    }

    handler = &group->mg_handlers[handler_id];
   1d5ca:	6803      	ldr	r3, [r0, #0]
   1d5cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

    return (handler);
err:
    return (NULL);
}
   1d5d0:	4618      	mov	r0, r3
   1d5d2:	bd10      	pop	{r4, pc}
    return (NULL);
   1d5d4:	2300      	movs	r3, #0
   1d5d6:	e7fb      	b.n	1d5d0 <mgmt_find_handler+0x18>

0001d5d8 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   1d5d8:	b538      	push	{r3, r4, r5, lr}
   1d5da:	460d      	mov	r5, r1
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   1d5dc:	f100 040c 	add.w	r4, r0, #12
   1d5e0:	2202      	movs	r2, #2
   1d5e2:	4906      	ldr	r1, [pc, #24]	; (1d5fc <mgmt_cbuf_setoerr+0x24>)
   1d5e4:	4620      	mov	r0, r4
   1d5e6:	f7f9 fc28 	bl	16e3a <cbor_encode_text_string>
    if (rc != 0) {
   1d5ea:	b100      	cbz	r0, 1d5ee <mgmt_cbuf_setoerr+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d5ec:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&cb->encoder, errcode);
   1d5ee:	462a      	mov	r2, r5
   1d5f0:	17eb      	asrs	r3, r5, #31
   1d5f2:	4620      	mov	r0, r4
   1d5f4:	f7f9 fba6 	bl	16d44 <cbor_encode_int>
    if (rc != 0) {
   1d5f8:	e7f8      	b.n	1d5ec <mgmt_cbuf_setoerr+0x14>
   1d5fa:	bf00      	nop
   1d5fc:	000242b8 	.word	0x000242b8

0001d600 <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1d600:	b538      	push	{r3, r4, r5, lr}
   1d602:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1d604:	7949      	ldrb	r1, [r1, #5]
   1d606:	3908      	subs	r1, #8
   1d608:	b289      	uxth	r1, r1
   1d60a:	f7f0 fba3 	bl	dd54 <os_msys_get_pkthdr>
    if (frag != NULL) {
   1d60e:	4605      	mov	r5, r0
   1d610:	b130      	cbz	r0, 1d620 <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1d612:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1d614:	3a08      	subs	r2, #8
   1d616:	f104 0118 	add.w	r1, r4, #24
   1d61a:	3018      	adds	r0, #24
   1d61c:	f7f3 ff2c 	bl	11478 <memcpy>
    }

    return frag;
}
   1d620:	4628      	mov	r0, r5
   1d622:	bd38      	pop	{r3, r4, r5, pc}

0001d624 <nmgr_init_rsp>:
{
   1d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d626:	4606      	mov	r6, r0
   1d628:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   1d62a:	2108      	movs	r1, #8
   1d62c:	f7f1 fbd8 	bl	ede0 <os_mbuf_extend>
    if (!hdr) {
   1d630:	4604      	mov	r4, r0
   1d632:	b318      	cbz	r0, 1d67c <nmgr_init_rsp+0x58>
    memcpy(hdr, src, sizeof(*hdr));
   1d634:	682a      	ldr	r2, [r5, #0]
   1d636:	686b      	ldr	r3, [r5, #4]
   1d638:	6002      	str	r2, [r0, #0]
   1d63a:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   1d63c:	2300      	movs	r3, #0
   1d63e:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   1d640:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1d642:	782b      	ldrb	r3, [r5, #0]
   1d644:	f013 0f07 	tst.w	r3, #7
   1d648:	d11a      	bne.n	1d680 <nmgr_init_rsp+0x5c>
   1d64a:	2201      	movs	r2, #1
   1d64c:	7823      	ldrb	r3, [r4, #0]
   1d64e:	f362 0302 	bfi	r3, r2, #0, #3
   1d652:	7023      	strb	r3, [r4, #0]
    hdr->nh_group = src->nh_group;
   1d654:	88ab      	ldrh	r3, [r5, #4]
   1d656:	80a3      	strh	r3, [r4, #4]
    hdr->nh_seq = src->nh_seq;
   1d658:	79ab      	ldrb	r3, [r5, #6]
   1d65a:	71a3      	strb	r3, [r4, #6]
    hdr->nh_id = src->nh_id;
   1d65c:	79eb      	ldrb	r3, [r5, #7]
   1d65e:	71e3      	strb	r3, [r4, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   1d660:	4d08      	ldr	r5, [pc, #32]	; (1d684 <nmgr_init_rsp+0x60>)
   1d662:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   1d666:	4631      	mov	r1, r6
   1d668:	4638      	mov	r0, r7
   1d66a:	f7f9 fa91 	bl	16b90 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   1d66e:	2200      	movs	r2, #0
   1d670:	4639      	mov	r1, r7
   1d672:	f105 000c 	add.w	r0, r5, #12
   1d676:	f7f9 fb20 	bl	16cba <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   1d67a:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   1d67c:	4620      	mov	r0, r4
   1d67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1d680:	2203      	movs	r2, #3
   1d682:	e7e3      	b.n	1d64c <nmgr_init_rsp+0x28>
   1d684:	200071dc 	.word	0x200071dc

0001d688 <nmgr_rsp_tx>:
 * reason for this is to allow the caller to reuse the mbuf for an error
 * response.
 */
static int
nmgr_rsp_tx(struct nmgr_transport *nt, struct os_mbuf **rsp, uint16_t mtu)
{
   1d688:	b570      	push	{r4, r5, r6, lr}
   1d68a:	4605      	mov	r5, r0
   1d68c:	460c      	mov	r4, r1
   1d68e:	4616      	mov	r6, r2
    struct os_mbuf *frag;
    int rc;

    while (*rsp != NULL) {
   1d690:	6823      	ldr	r3, [r4, #0]
   1d692:	b16b      	cbz	r3, 1d6b0 <nmgr_rsp_tx+0x28>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   1d694:	4a08      	ldr	r2, [pc, #32]	; (1d6b8 <nmgr_rsp_tx+0x30>)
   1d696:	4631      	mov	r1, r6
   1d698:	4620      	mov	r0, r4
   1d69a:	f7f4 fe48 	bl	1232e <mem_split_frag>
        if (frag == NULL) {
   1d69e:	4601      	mov	r1, r0
   1d6a0:	b140      	cbz	r0, 1d6b4 <nmgr_rsp_tx+0x2c>
            return MGMT_ERR_ENOMEM;
        }

        rc = nt->nt_output(nt, frag);
   1d6a2:	69ab      	ldr	r3, [r5, #24]
   1d6a4:	4628      	mov	r0, r5
   1d6a6:	4798      	blx	r3
        if (rc != 0) {
   1d6a8:	2800      	cmp	r0, #0
   1d6aa:	d0f1      	beq.n	1d690 <nmgr_rsp_tx+0x8>
            /* Output function already freed mbuf. */
            return MGMT_ERR_EUNKNOWN;
   1d6ac:	2001      	movs	r0, #1
   1d6ae:	e000      	b.n	1d6b2 <nmgr_rsp_tx+0x2a>
        }
    }

    return MGMT_ERR_EOK;
   1d6b0:	2000      	movs	r0, #0
}
   1d6b2:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1d6b4:	2002      	movs	r0, #2
   1d6b6:	e7fc      	b.n	1d6b2 <nmgr_rsp_tx+0x2a>
   1d6b8:	0001d601 	.word	0x0001d601

0001d6bc <nmgr_send_err_rsp>:
{
   1d6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6be:	b085      	sub	sp, #20
   1d6c0:	4606      	mov	r6, r0
   1d6c2:	460c      	mov	r4, r1
   1d6c4:	461d      	mov	r5, r3
    hdr = nmgr_init_rsp(m, hdr);
   1d6c6:	4611      	mov	r1, r2
   1d6c8:	4620      	mov	r0, r4
   1d6ca:	f7ff ffab 	bl	1d624 <nmgr_init_rsp>
    if (!hdr) {
   1d6ce:	b148      	cbz	r0, 1d6e4 <nmgr_send_err_rsp+0x28>
   1d6d0:	4607      	mov	r7, r0
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1d6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d6d6:	4669      	mov	r1, sp
   1d6d8:	4811      	ldr	r0, [pc, #68]	; (1d720 <nmgr_send_err_rsp+0x64>)
   1d6da:	f7f9 fbba 	bl	16e52 <cbor_encoder_create_map>
    if (rc != 0) {
   1d6de:	b128      	cbz	r0, 1d6ec <nmgr_send_err_rsp+0x30>
}
   1d6e0:	b005      	add	sp, #20
   1d6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(m);
   1d6e4:	4620      	mov	r0, r4
   1d6e6:	f7f1 fa00 	bl	eaea <os_mbuf_free_chain>
        return;
   1d6ea:	e7f9      	b.n	1d6e0 <nmgr_send_err_rsp+0x24>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   1d6ec:	4629      	mov	r1, r5
   1d6ee:	480d      	ldr	r0, [pc, #52]	; (1d724 <nmgr_send_err_rsp+0x68>)
   1d6f0:	f7ff ff72 	bl	1d5d8 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d6f4:	2800      	cmp	r0, #0
   1d6f6:	d1f3      	bne.n	1d6e0 <nmgr_send_err_rsp+0x24>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   1d6f8:	4669      	mov	r1, sp
   1d6fa:	4809      	ldr	r0, [pc, #36]	; (1d720 <nmgr_send_err_rsp+0x64>)
   1d6fc:	f7f9 fbb7 	bl	16e6e <cbor_encoder_close_container>
    if (rc != 0) {
   1d700:	2800      	cmp	r0, #0
   1d702:	d1ed      	bne.n	1d6e0 <nmgr_send_err_rsp+0x24>
{   return encoder->writer->bytes_written; }
   1d704:	4907      	ldr	r1, [pc, #28]	; (1d724 <nmgr_send_err_rsp+0x68>)
   1d706:	68cb      	ldr	r3, [r1, #12]
   1d708:	685a      	ldr	r2, [r3, #4]
        htons(cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder));
   1d70a:	0213      	lsls	r3, r2, #8
   1d70c:	b29b      	uxth	r3, r3
   1d70e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d712:	4313      	orrs	r3, r2
    hdr->nh_len =
   1d714:	807b      	strh	r3, [r7, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1d716:	69b3      	ldr	r3, [r6, #24]
   1d718:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   1d71a:	4630      	mov	r0, r6
   1d71c:	4798      	blx	r3
   1d71e:	e7df      	b.n	1d6e0 <nmgr_send_err_rsp+0x24>
   1d720:	200071e8 	.word	0x200071e8
   1d724:	200071dc 	.word	0x200071dc

0001d728 <nmgr_handle_req>:

static void
nmgr_handle_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1d728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d72c:	b088      	sub	sp, #32
   1d72e:	4606      	mov	r6, r0
   1d730:	460c      	mov	r4, r1
    uint16_t mtu;
    int rc;

    rsp_hdr = NULL;

    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1d732:	7949      	ldrb	r1, [r1, #5]
   1d734:	3908      	subs	r1, #8
   1d736:	b289      	uxth	r1, r1
   1d738:	f44f 7000 	mov.w	r0, #512	; 0x200
   1d73c:	f7f0 fb0a 	bl	dd54 <os_msys_get_pkthdr>
   1d740:	9007      	str	r0, [sp, #28]
    if (!rsp) {
   1d742:	b168      	cbz	r0, 1d760 <nmgr_handle_req+0x38>
        rsp = req;
        req = NULL;
        goto err;
    }

    mtu = nt->nt_get_mtu(req);
   1d744:	69f3      	ldr	r3, [r6, #28]
   1d746:	4620      	mov	r0, r4
   1d748:	4798      	blx	r3
    if (mtu == 0) {
   1d74a:	4605      	mov	r5, r0
   1d74c:	bb08      	cbnz	r0, 1d792 <nmgr_handle_req+0x6a>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
    os_mbuf_free_chain(req);
    return;

err_norsp:
    os_mbuf_free_chain(rsp);
   1d74e:	9807      	ldr	r0, [sp, #28]
   1d750:	f7f1 f9cb 	bl	eaea <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1d754:	4620      	mov	r0, r4
   1d756:	f7f1 f9c8 	bl	eaea <os_mbuf_free_chain>
    return;
}
   1d75a:	b008      	add	sp, #32
   1d75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d760:	4605      	mov	r5, r0
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1d762:	ab01      	add	r3, sp, #4
   1d764:	2208      	movs	r2, #8
   1d766:	2100      	movs	r1, #0
   1d768:	4620      	mov	r0, r4
   1d76a:	f7f1 fa34 	bl	ebd6 <os_mbuf_copydata>
        if (rc < 0) {
   1d76e:	1e07      	subs	r7, r0, #0
   1d770:	dbed      	blt.n	1d74e <nmgr_handle_req+0x26>
        rsp = req;
   1d772:	9407      	str	r4, [sp, #28]
        req = NULL;
   1d774:	462c      	mov	r4, r5
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   1d776:	9807      	ldr	r0, [sp, #28]
   1d778:	8a01      	ldrh	r1, [r0, #16]
   1d77a:	f7f1 fa59 	bl	ec30 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   1d77e:	463b      	mov	r3, r7
   1d780:	aa01      	add	r2, sp, #4
   1d782:	9907      	ldr	r1, [sp, #28]
   1d784:	4630      	mov	r0, r6
   1d786:	f7ff ff99 	bl	1d6bc <nmgr_send_err_rsp>
    os_mbuf_free_chain(req);
   1d78a:	4620      	mov	r0, r4
   1d78c:	f7f1 f9ad 	bl	eaea <os_mbuf_free_chain>
    return;
   1d790:	e7e3      	b.n	1d75a <nmgr_handle_req+0x32>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   1d792:	7962      	ldrb	r2, [r4, #5]
   1d794:	3a08      	subs	r2, #8
   1d796:	f104 0118 	add.w	r1, r4, #24
   1d79a:	9807      	ldr	r0, [sp, #28]
   1d79c:	3018      	adds	r0, #24
   1d79e:	f7f3 fe6b 	bl	11478 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1d7a2:	ab01      	add	r3, sp, #4
   1d7a4:	2208      	movs	r2, #8
   1d7a6:	2100      	movs	r1, #0
   1d7a8:	4620      	mov	r0, r4
   1d7aa:	f7f1 fa14 	bl	ebd6 <os_mbuf_copydata>
    if (rc < 0) {
   1d7ae:	2800      	cmp	r0, #0
   1d7b0:	dbcd      	blt.n	1d74e <nmgr_handle_req+0x26>
    hdr.nh_len = ntohs(hdr.nh_len);
   1d7b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d7b6:	0213      	lsls	r3, r2, #8
   1d7b8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1d7bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   1d7c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1d7c4:	0218      	lsls	r0, r3, #8
   1d7c6:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   1d7ca:	f89d 100b 	ldrb.w	r1, [sp, #11]
   1d7ce:	b280      	uxth	r0, r0
   1d7d0:	f7ff fef2 	bl	1d5b8 <mgmt_find_handler>
    if (!handler) {
   1d7d4:	4680      	mov	r8, r0
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	d062      	beq.n	1d8a0 <nmgr_handle_req+0x178>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   1d7da:	a901      	add	r1, sp, #4
   1d7dc:	9807      	ldr	r0, [sp, #28]
   1d7de:	f7ff ff21 	bl	1d624 <nmgr_init_rsp>
    if (!rsp_hdr) {
   1d7e2:	4681      	mov	r9, r0
   1d7e4:	2800      	cmp	r0, #0
   1d7e6:	d0b2      	beq.n	1d74e <nmgr_handle_req+0x26>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   1d7e8:	4f2f      	ldr	r7, [pc, #188]	; (1d8a8 <nmgr_handle_req+0x180>)
   1d7ea:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   1d7ee:	2208      	movs	r2, #8
   1d7f0:	4621      	mov	r1, r4
   1d7f2:	4650      	mov	r0, sl
   1d7f4:	f7f9 f994 	bl	16b20 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   1d7f8:	f107 031c 	add.w	r3, r7, #28
   1d7fc:	463a      	mov	r2, r7
   1d7fe:	2100      	movs	r1, #0
   1d800:	4650      	mov	r0, sl
   1d802:	f7f9 fdc4 	bl	1738e <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1d806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d80a:	a903      	add	r1, sp, #12
   1d80c:	f107 000c 	add.w	r0, r7, #12
   1d810:	f7f9 fb1f 	bl	16e52 <cbor_encoder_create_map>
    if (rc != 0) {
   1d814:	2800      	cmp	r0, #0
   1d816:	d145      	bne.n	1d8a4 <nmgr_handle_req+0x17c>
    if (hdr.nh_op == NMGR_OP_READ) {
   1d818:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d81c:	f013 0307 	ands.w	r3, r3, #7
   1d820:	d10e      	bne.n	1d840 <nmgr_handle_req+0x118>
        if (handler->mh_read) {
   1d822:	f8d8 3000 	ldr.w	r3, [r8]
   1d826:	b1a3      	cbz	r3, 1d852 <nmgr_handle_req+0x12a>
            rc = handler->mh_read(&nmgr_task_cbuf.n_b);
   1d828:	4638      	mov	r0, r7
   1d82a:	4798      	blx	r3
   1d82c:	4607      	mov	r7, r0
    if (rc != 0) {
   1d82e:	2f00      	cmp	r7, #0
   1d830:	d1a1      	bne.n	1d776 <nmgr_handle_req+0x4e>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1d832:	a903      	add	r1, sp, #12
   1d834:	481d      	ldr	r0, [pc, #116]	; (1d8ac <nmgr_handle_req+0x184>)
   1d836:	f7f9 fb1a 	bl	16e6e <cbor_encoder_close_container>
    if (rc != 0) {
   1d83a:	b180      	cbz	r0, 1d85e <nmgr_handle_req+0x136>
        rc = MGMT_ERR_ENOMEM;
   1d83c:	2702      	movs	r7, #2
   1d83e:	e79a      	b.n	1d776 <nmgr_handle_req+0x4e>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   1d840:	2b02      	cmp	r3, #2
   1d842:	d108      	bne.n	1d856 <nmgr_handle_req+0x12e>
        if (handler->mh_write) {
   1d844:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d848:	b13b      	cbz	r3, 1d85a <nmgr_handle_req+0x132>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   1d84a:	4817      	ldr	r0, [pc, #92]	; (1d8a8 <nmgr_handle_req+0x180>)
   1d84c:	4798      	blx	r3
   1d84e:	4607      	mov	r7, r0
   1d850:	e7ed      	b.n	1d82e <nmgr_handle_req+0x106>
            rc = MGMT_ERR_ENOENT;
   1d852:	2705      	movs	r7, #5
   1d854:	e78f      	b.n	1d776 <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_EINVAL;
   1d856:	2703      	movs	r7, #3
   1d858:	e78d      	b.n	1d776 <nmgr_handle_req+0x4e>
            rc = MGMT_ERR_ENOENT;
   1d85a:	2705      	movs	r7, #5
        goto err;
   1d85c:	e78b      	b.n	1d776 <nmgr_handle_req+0x4e>
   1d85e:	4b12      	ldr	r3, [pc, #72]	; (1d8a8 <nmgr_handle_req+0x180>)
   1d860:	68db      	ldr	r3, [r3, #12]
   1d862:	685b      	ldr	r3, [r3, #4]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   1d864:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1d868:	4413      	add	r3, r2
   1d86a:	b29b      	uxth	r3, r3
   1d86c:	f8a9 3002 	strh.w	r3, [r9, #2]
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   1d870:	021a      	lsls	r2, r3, #8
   1d872:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   1d876:	f8a9 3002 	strh.w	r3, [r9, #2]
    rc = nmgr_rsp_tx(nt, &rsp, mtu);
   1d87a:	462a      	mov	r2, r5
   1d87c:	a907      	add	r1, sp, #28
   1d87e:	4630      	mov	r0, r6
   1d880:	f7ff ff02 	bl	1d688 <nmgr_rsp_tx>
    if (rc) {
   1d884:	4607      	mov	r7, r0
   1d886:	b120      	cbz	r0, 1d892 <nmgr_handle_req+0x16a>
        if (rsp == NULL) {
   1d888:	9b07      	ldr	r3, [sp, #28]
   1d88a:	2b00      	cmp	r3, #0
   1d88c:	f47f af73 	bne.w	1d776 <nmgr_handle_req+0x4e>
   1d890:	e75d      	b.n	1d74e <nmgr_handle_req+0x26>
    os_mbuf_free_chain(rsp);
   1d892:	9807      	ldr	r0, [sp, #28]
   1d894:	f7f1 f929 	bl	eaea <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1d898:	4620      	mov	r0, r4
   1d89a:	f7f1 f926 	bl	eaea <os_mbuf_free_chain>
    return;
   1d89e:	e75c      	b.n	1d75a <nmgr_handle_req+0x32>
        rc = MGMT_ERR_ENOENT;
   1d8a0:	2705      	movs	r7, #5
   1d8a2:	e768      	b.n	1d776 <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_ENOMEM;
   1d8a4:	2702      	movs	r7, #2
   1d8a6:	e766      	b.n	1d776 <nmgr_handle_req+0x4e>
   1d8a8:	200071dc 	.word	0x200071dc
   1d8ac:	200071e8 	.word	0x200071e8

0001d8b0 <nmgr_process>:


static void
nmgr_process(struct nmgr_transport *nt)
{
   1d8b0:	b510      	push	{r4, lr}
   1d8b2:	4604      	mov	r4, r0
   1d8b4:	e002      	b.n	1d8bc <nmgr_process+0xc>
        m = os_mqueue_get(&nt->nt_imq);
        if (!m) {
            break;
        }

        nmgr_handle_req(nt, m);
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	f7ff ff36 	bl	1d728 <nmgr_handle_req>
        m = os_mqueue_get(&nt->nt_imq);
   1d8bc:	4620      	mov	r0, r4
   1d8be:	f7f1 f8aa 	bl	ea16 <os_mqueue_get>
        if (!m) {
   1d8c2:	4601      	mov	r1, r0
   1d8c4:	2800      	cmp	r0, #0
   1d8c6:	d1f6      	bne.n	1d8b6 <nmgr_process+0x6>
    }
}
   1d8c8:	bd10      	pop	{r4, pc}

0001d8ca <nmgr_event_data_in>:

static void
nmgr_event_data_in(struct os_event *ev)
{
   1d8ca:	b508      	push	{r3, lr}
    nmgr_process(ev->ev_arg);
   1d8cc:	6880      	ldr	r0, [r0, #8]
   1d8ce:	f7ff ffef 	bl	1d8b0 <nmgr_process>
}
   1d8d2:	bd08      	pop	{r3, pc}

0001d8d4 <nmgr_cbuf_init>:
{
   1d8d4:	b508      	push	{r3, lr}
    memset(njb, 0, sizeof(*njb));
   1d8d6:	2260      	movs	r2, #96	; 0x60
   1d8d8:	2100      	movs	r1, #0
   1d8da:	f7f3 fdda 	bl	11492 <memset>
}
   1d8de:	2000      	movs	r0, #0
   1d8e0:	bd08      	pop	{r3, pc}
	...

0001d8e4 <mgmt_evq_get>:
}
   1d8e4:	4b01      	ldr	r3, [pc, #4]	; (1d8ec <mgmt_evq_get+0x8>)
   1d8e6:	6818      	ldr	r0, [r3, #0]
   1d8e8:	4770      	bx	lr
   1d8ea:	bf00      	nop
   1d8ec:	200071d8 	.word	0x200071d8

0001d8f0 <mgmt_evq_set>:
    nmgr_evq = evq;
   1d8f0:	4b01      	ldr	r3, [pc, #4]	; (1d8f8 <mgmt_evq_set+0x8>)
   1d8f2:	6018      	str	r0, [r3, #0]
}
   1d8f4:	4770      	bx	lr
   1d8f6:	bf00      	nop
   1d8f8:	200071d8 	.word	0x200071d8

0001d8fc <nmgr_transport_init>:

int
nmgr_transport_init(struct nmgr_transport *nt,
        nmgr_transport_out_func_t output_func,
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
   1d8fc:	b508      	push	{r3, lr}
    int rc;

    nt->nt_output = output_func;
   1d8fe:	6181      	str	r1, [r0, #24]
    nt->nt_get_mtu = get_mtu_func;
   1d900:	61c2      	str	r2, [r0, #28]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1d902:	4602      	mov	r2, r0
   1d904:	4901      	ldr	r1, [pc, #4]	; (1d90c <nmgr_transport_init+0x10>)
   1d906:	f7f1 f87b 	bl	ea00 <os_mqueue_init>
    }

    return (0);
err:
    return (rc);
}
   1d90a:	bd08      	pop	{r3, pc}
   1d90c:	0001d8cb 	.word	0x0001d8cb

0001d910 <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   1d910:	b538      	push	{r3, r4, r5, lr}
   1d912:	4605      	mov	r5, r0
   1d914:	460c      	mov	r4, r1
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1d916:	f7ff ffe5 	bl	1d8e4 <mgmt_evq_get>
   1d91a:	4601      	mov	r1, r0
   1d91c:	4622      	mov	r2, r4
   1d91e:	4628      	mov	r0, r5
   1d920:	f7f1 f88a 	bl	ea38 <os_mqueue_put>
    if (rc != 0) {
   1d924:	4605      	mov	r5, r0
   1d926:	b908      	cbnz	r0, 1d92c <nmgr_rx_req+0x1c>
        os_mbuf_free_chain(req);
    }

    return rc;
}
   1d928:	4628      	mov	r0, r5
   1d92a:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(req);
   1d92c:	4620      	mov	r0, r4
   1d92e:	f7f1 f8dc 	bl	eaea <os_mbuf_free_chain>
    return rc;
   1d932:	e7f9      	b.n	1d928 <nmgr_rx_req+0x18>

0001d934 <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1d934:	b510      	push	{r4, lr}
   1d936:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d938:	4b0d      	ldr	r3, [pc, #52]	; (1d970 <nmgr_pkg_init+0x3c>)
   1d93a:	781b      	ldrb	r3, [r3, #0]
   1d93c:	b19b      	cbz	r3, 1d966 <nmgr_pkg_init+0x32>

    rc = nmgr_os_groups_register();
   1d93e:	f000 fa79 	bl	1de34 <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d942:	b138      	cbz	r0, 1d954 <nmgr_pkg_init+0x20>
   1d944:	2000      	movs	r0, #0
   1d946:	9000      	str	r0, [sp, #0]
   1d948:	4b0a      	ldr	r3, [pc, #40]	; (1d974 <nmgr_pkg_init+0x40>)
   1d94a:	681c      	ldr	r4, [r3, #0]
   1d94c:	4603      	mov	r3, r0
   1d94e:	4602      	mov	r2, r0
   1d950:	4601      	mov	r1, r0
   1d952:	47a0      	blx	r4

    nmgr_cbuf_init(&nmgr_task_cbuf);
   1d954:	4808      	ldr	r0, [pc, #32]	; (1d978 <nmgr_pkg_init+0x44>)
   1d956:	f7ff ffbd 	bl	1d8d4 <nmgr_cbuf_init>

    mgmt_evq_set(os_eventq_dflt_get());
   1d95a:	f7f0 f8e3 	bl	db24 <os_eventq_dflt_get>
   1d95e:	f7ff ffc7 	bl	1d8f0 <mgmt_evq_set>
}
   1d962:	b002      	add	sp, #8
   1d964:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d966:	461a      	mov	r2, r3
   1d968:	4619      	mov	r1, r3
   1d96a:	4618      	mov	r0, r3
   1d96c:	f7ef fcf8 	bl	d360 <__assert_func>
   1d970:	20006ca8 	.word	0x20006ca8
   1d974:	2000143c 	.word	0x2000143c
   1d978:	200071dc 	.word	0x200071dc

0001d97c <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   1d97c:	b570      	push	{r4, r5, r6, lr}
   1d97e:	b084      	sub	sp, #16
   1d980:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   1d982:	f7ff ffaf 	bl	1d8e4 <mgmt_evq_get>
   1d986:	4601      	mov	r1, r0
   1d988:	4e0e      	ldr	r6, [pc, #56]	; (1d9c4 <nmgr_reset+0x48>)
   1d98a:	2300      	movs	r3, #0
   1d98c:	4a0e      	ldr	r2, [pc, #56]	; (1d9c8 <nmgr_reset+0x4c>)
   1d98e:	4630      	mov	r0, r6
   1d990:	f7ef fe74 	bl	d67c <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   1d994:	2306      	movs	r3, #6
   1d996:	f88d 3000 	strb.w	r3, [sp]
   1d99a:	2400      	movs	r4, #0
   1d99c:	9401      	str	r4, [sp, #4]
   1d99e:	9402      	str	r4, [sp, #8]
   1d9a0:	9403      	str	r4, [sp, #12]
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   1d9a2:	4668      	mov	r0, sp
   1d9a4:	f002 f8d2 	bl	1fb4c <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   1d9a8:	2120      	movs	r1, #32
   1d9aa:	4630      	mov	r0, r6
   1d9ac:	f7ef fe92 	bl	d6d4 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   1d9b0:	4621      	mov	r1, r4
   1d9b2:	4628      	mov	r0, r5
   1d9b4:	f7ff fe10 	bl	1d5d8 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1d9b8:	b908      	cbnz	r0, 1d9be <nmgr_reset+0x42>
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1d9ba:	b004      	add	sp, #16
   1d9bc:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   1d9be:	2001      	movs	r0, #1
   1d9c0:	e7fb      	b.n	1d9ba <nmgr_reset+0x3e>
   1d9c2:	bf00      	nop
   1d9c4:	2000723c 	.word	0x2000723c
   1d9c8:	0001d9cd 	.word	0x0001d9cd

0001d9cc <nmgr_reset_tmo>:
{
   1d9cc:	b508      	push	{r3, lr}
    os_reboot(HAL_RESET_REQUESTED);
   1d9ce:	2006      	movs	r0, #6
   1d9d0:	f7ef fe2f 	bl	d632 <os_reboot>
}
   1d9d4:	bd08      	pop	{r3, pc}
	...

0001d9d8 <nmgr_datetime_set>:
{
   1d9d8:	b510      	push	{r4, lr}
   1d9da:	b0a6      	sub	sp, #152	; 0x98
   1d9dc:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   1d9de:	2260      	movs	r2, #96	; 0x60
   1d9e0:	2100      	movs	r1, #0
   1d9e2:	4668      	mov	r0, sp
   1d9e4:	f7f3 fd55 	bl	11492 <memset>
   1d9e8:	4b12      	ldr	r3, [pc, #72]	; (1da34 <nmgr_datetime_set+0x5c>)
   1d9ea:	9300      	str	r3, [sp, #0]
   1d9ec:	2304      	movs	r3, #4
   1d9ee:	f88d 3004 	strb.w	r3, [sp, #4]
   1d9f2:	ab18      	add	r3, sp, #96	; 0x60
   1d9f4:	9302      	str	r3, [sp, #8]
   1d9f6:	2321      	movs	r3, #33	; 0x21
   1d9f8:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   1d9fa:	4669      	mov	r1, sp
   1d9fc:	f104 001c 	add.w	r0, r4, #28
   1da00:	f7f9 f834 	bl	16a6c <cbor_read_object>
    if (rc) {
   1da04:	b978      	cbnz	r0, 1da26 <nmgr_datetime_set+0x4e>
    rc = datetime_parse(buf, &tv, &tz);
   1da06:	aa21      	add	r2, sp, #132	; 0x84
   1da08:	a922      	add	r1, sp, #136	; 0x88
   1da0a:	a818      	add	r0, sp, #96	; 0x60
   1da0c:	f7f8 f978 	bl	15d00 <datetime_parse>
    if (!rc) {
   1da10:	b960      	cbnz	r0, 1da2c <nmgr_datetime_set+0x54>
        rc = os_settimeofday(&tv, &tz);
   1da12:	a921      	add	r1, sp, #132	; 0x84
   1da14:	a822      	add	r0, sp, #136	; 0x88
   1da16:	f7f0 fef3 	bl	e800 <os_settimeofday>
        if (rc) {
   1da1a:	b948      	cbnz	r0, 1da30 <nmgr_datetime_set+0x58>
    rc = mgmt_cbuf_setoerr(cb, 0);
   1da1c:	2100      	movs	r1, #0
   1da1e:	4620      	mov	r0, r4
   1da20:	f7ff fdda 	bl	1d5d8 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1da24:	e000      	b.n	1da28 <nmgr_datetime_set+0x50>
        return MGMT_ERR_EINVAL;
   1da26:	2003      	movs	r0, #3
}
   1da28:	b026      	add	sp, #152	; 0x98
   1da2a:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   1da2c:	2003      	movs	r0, #3
   1da2e:	e7fb      	b.n	1da28 <nmgr_datetime_set+0x50>
          return MGMT_ERR_EINVAL;
   1da30:	2003      	movs	r0, #3
   1da32:	e7f9      	b.n	1da28 <nmgr_datetime_set+0x50>
   1da34:	000256f4 	.word	0x000256f4

0001da38 <nmgr_def_console_echo>:
{
   1da38:	b510      	push	{r4, lr}
   1da3a:	b09a      	sub	sp, #104	; 0x68
   1da3c:	4604      	mov	r4, r0
    long long int echo_on = 1;
   1da3e:	2201      	movs	r2, #1
   1da40:	2300      	movs	r3, #0
   1da42:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    struct cbor_attr_t attrs[2] = {
   1da46:	2260      	movs	r2, #96	; 0x60
   1da48:	2100      	movs	r1, #0
   1da4a:	4668      	mov	r0, sp
   1da4c:	f7f3 fd21 	bl	11492 <memset>
   1da50:	4b0f      	ldr	r3, [pc, #60]	; (1da90 <nmgr_def_console_echo+0x58>)
   1da52:	9300      	str	r3, [sp, #0]
   1da54:	2301      	movs	r3, #1
   1da56:	f88d 3004 	strb.w	r3, [sp, #4]
   1da5a:	aa18      	add	r2, sp, #96	; 0x60
   1da5c:	9202      	str	r2, [sp, #8]
   1da5e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    rc = cbor_read_object(&cb->it, attrs);
   1da62:	4669      	mov	r1, sp
   1da64:	f104 001c 	add.w	r0, r4, #28
   1da68:	f7f9 f800 	bl	16a6c <cbor_read_object>
    if (rc) {
   1da6c:	b970      	cbnz	r0, 1da8c <nmgr_def_console_echo+0x54>
   1da6e:	4604      	mov	r4, r0
    if (echo_on) {
   1da70:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1da72:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1da74:	4313      	orrs	r3, r2
   1da76:	d005      	beq.n	1da84 <nmgr_def_console_echo+0x4c>
        console_echo(1);
   1da78:	2001      	movs	r0, #1
   1da7a:	f7f5 f9e1 	bl	12e40 <console_echo>
}
   1da7e:	4620      	mov	r0, r4
   1da80:	b01a      	add	sp, #104	; 0x68
   1da82:	bd10      	pop	{r4, pc}
        console_echo(0);
   1da84:	2000      	movs	r0, #0
   1da86:	f7f5 f9db 	bl	12e40 <console_echo>
   1da8a:	e7f8      	b.n	1da7e <nmgr_def_console_echo+0x46>
        return MGMT_ERR_EINVAL;
   1da8c:	2403      	movs	r4, #3
   1da8e:	e7f6      	b.n	1da7e <nmgr_def_console_echo+0x46>
   1da90:	00025700 	.word	0x00025700

0001da94 <nmgr_def_echo>:
{
   1da94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da96:	b0b9      	sub	sp, #228	; 0xe4
   1da98:	4604      	mov	r4, r0
    char echo_buf[128] = {'\0'};
   1da9a:	2500      	movs	r5, #0
   1da9c:	9518      	str	r5, [sp, #96]	; 0x60
   1da9e:	227c      	movs	r2, #124	; 0x7c
   1daa0:	4629      	mov	r1, r5
   1daa2:	a819      	add	r0, sp, #100	; 0x64
   1daa4:	f7f3 fcf5 	bl	11492 <memset>
    struct cbor_attr_t attrs[2] = {
   1daa8:	2260      	movs	r2, #96	; 0x60
   1daaa:	4629      	mov	r1, r5
   1daac:	4668      	mov	r0, sp
   1daae:	f7f3 fcf0 	bl	11492 <memset>
   1dab2:	4b14      	ldr	r3, [pc, #80]	; (1db04 <nmgr_def_echo+0x70>)
   1dab4:	9300      	str	r3, [sp, #0]
   1dab6:	2304      	movs	r3, #4
   1dab8:	f88d 3004 	strb.w	r3, [sp, #4]
   1dabc:	ad18      	add	r5, sp, #96	; 0x60
   1dabe:	9502      	str	r5, [sp, #8]
   1dac0:	2380      	movs	r3, #128	; 0x80
   1dac2:	930a      	str	r3, [sp, #40]	; 0x28
   1dac4:	2201      	movs	r2, #1
   1dac6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   1daca:	f104 070c 	add.w	r7, r4, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1dace:	490e      	ldr	r1, [pc, #56]	; (1db08 <nmgr_def_echo+0x74>)
   1dad0:	4638      	mov	r0, r7
   1dad2:	f7f9 f9b2 	bl	16e3a <cbor_encode_text_string>
   1dad6:	4606      	mov	r6, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   1dad8:	4669      	mov	r1, sp
   1dada:	f104 001c 	add.w	r0, r4, #28
   1dade:	f7f8 ffc5 	bl	16a6c <cbor_read_object>
   1dae2:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1dae4:	4628      	mov	r0, r5
   1dae6:	f7fe fdfb 	bl	1c6e0 <strlen>
   1daea:	4602      	mov	r2, r0
   1daec:	4629      	mov	r1, r5
   1daee:	4638      	mov	r0, r7
   1daf0:	f7f9 f9a3 	bl	16e3a <cbor_encode_text_string>
    if (g_err) {
   1daf4:	ea56 0300 	orrs.w	r3, r6, r0
   1daf8:	d102      	bne.n	1db00 <nmgr_def_echo+0x6c>
    return (0);
   1dafa:	2000      	movs	r0, #0
}
   1dafc:	b039      	add	sp, #228	; 0xe4
   1dafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1db00:	2002      	movs	r0, #2
   1db02:	e7fb      	b.n	1dafc <nmgr_def_echo+0x68>
   1db04:	00023494 	.word	0x00023494
   1db08:	000250b0 	.word	0x000250b0

0001db0c <nmgr_datetime_get>:
{
   1db0c:	b570      	push	{r4, r5, r6, lr}
   1db0e:	b08e      	sub	sp, #56	; 0x38
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1db10:	f100 040c 	add.w	r4, r0, #12
   1db14:	2202      	movs	r2, #2
   1db16:	491b      	ldr	r1, [pc, #108]	; (1db84 <nmgr_datetime_get+0x78>)
   1db18:	4620      	mov	r0, r4
   1db1a:	f7f9 f98e 	bl	16e3a <cbor_encode_text_string>
   1db1e:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1db20:	2200      	movs	r2, #0
   1db22:	2300      	movs	r3, #0
   1db24:	4620      	mov	r0, r4
   1db26:	f7f9 f90d 	bl	16d44 <cbor_encode_int>
   1db2a:	4305      	orrs	r5, r0
    rc = os_gettimeofday(&tv, &tz);
   1db2c:	a909      	add	r1, sp, #36	; 0x24
   1db2e:	a80a      	add	r0, sp, #40	; 0x28
   1db30:	f7f0 fe1a 	bl	e768 <os_gettimeofday>
    assert(rc == 0);
   1db34:	b9d8      	cbnz	r0, 1db6e <nmgr_datetime_get+0x62>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1db36:	2321      	movs	r3, #33	; 0x21
   1db38:	466a      	mov	r2, sp
   1db3a:	a909      	add	r1, sp, #36	; 0x24
   1db3c:	a80a      	add	r0, sp, #40	; 0x28
   1db3e:	f7f8 f9df 	bl	15f00 <datetime_format>
    if (rc) {
   1db42:	4606      	mov	r6, r0
   1db44:	b9c8      	cbnz	r0, 1db7a <nmgr_datetime_get+0x6e>
   1db46:	2208      	movs	r2, #8
   1db48:	490f      	ldr	r1, [pc, #60]	; (1db88 <nmgr_datetime_get+0x7c>)
   1db4a:	4620      	mov	r0, r4
   1db4c:	f7f9 f975 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   1db50:	4305      	orrs	r5, r0
   1db52:	4668      	mov	r0, sp
   1db54:	f7fe fdc4 	bl	1c6e0 <strlen>
   1db58:	4602      	mov	r2, r0
   1db5a:	4669      	mov	r1, sp
   1db5c:	4620      	mov	r0, r4
   1db5e:	f7f9 f96c 	bl	16e3a <cbor_encode_text_string>
    if (g_err) {
   1db62:	ea55 0300 	orrs.w	r3, r5, r0
   1db66:	d10a      	bne.n	1db7e <nmgr_datetime_get+0x72>
}
   1db68:	4630      	mov	r0, r6
   1db6a:	b00e      	add	sp, #56	; 0x38
   1db6c:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   1db6e:	2300      	movs	r3, #0
   1db70:	461a      	mov	r2, r3
   1db72:	4619      	mov	r1, r3
   1db74:	4618      	mov	r0, r3
   1db76:	f7ef fbf3 	bl	d360 <__assert_func>
    return (rc);
   1db7a:	2603      	movs	r6, #3
   1db7c:	e7f4      	b.n	1db68 <nmgr_datetime_get+0x5c>
        return MGMT_ERR_ENOMEM;
   1db7e:	2602      	movs	r6, #2
   1db80:	e7f2      	b.n	1db68 <nmgr_datetime_get+0x5c>
   1db82:	bf00      	nop
   1db84:	000242b8 	.word	0x000242b8
   1db88:	000256f4 	.word	0x000256f4

0001db8c <nmgr_def_mpstat_read>:
{
   1db8c:	b570      	push	{r4, r5, r6, lr}
   1db8e:	b094      	sub	sp, #80	; 0x50
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1db90:	f100 060c 	add.w	r6, r0, #12
   1db94:	2202      	movs	r2, #2
   1db96:	4939      	ldr	r1, [pc, #228]	; (1dc7c <nmgr_def_mpstat_read+0xf0>)
   1db98:	4630      	mov	r0, r6
   1db9a:	f7f9 f94e 	bl	16e3a <cbor_encode_text_string>
   1db9e:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1dba0:	2200      	movs	r2, #0
   1dba2:	2300      	movs	r3, #0
   1dba4:	4630      	mov	r0, r6
   1dba6:	f7f9 f8cd 	bl	16d44 <cbor_encode_int>
   1dbaa:	4304      	orrs	r4, r0
   1dbac:	2206      	movs	r2, #6
   1dbae:	4934      	ldr	r1, [pc, #208]	; (1dc80 <nmgr_def_mpstat_read+0xf4>)
   1dbb0:	4630      	mov	r0, r6
   1dbb2:	f7f9 f942 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1dbb6:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   1dbb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dbbc:	a904      	add	r1, sp, #16
   1dbbe:	4630      	mov	r0, r6
   1dbc0:	f7f9 f947 	bl	16e52 <cbor_encoder_create_map>
   1dbc4:	4304      	orrs	r4, r0
    prev_mp = NULL;
   1dbc6:	2500      	movs	r5, #0
   1dbc8:	e044      	b.n	1dc54 <nmgr_def_mpstat_read+0xc8>
   1dbca:	a80c      	add	r0, sp, #48	; 0x30
   1dbcc:	f7fe fd88 	bl	1c6e0 <strlen>
   1dbd0:	4602      	mov	r2, r0
   1dbd2:	a90c      	add	r1, sp, #48	; 0x30
   1dbd4:	a804      	add	r0, sp, #16
   1dbd6:	f7f9 f930 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   1dbda:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   1dbdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dbe0:	4669      	mov	r1, sp
   1dbe2:	a804      	add	r0, sp, #16
   1dbe4:	f7f9 f935 	bl	16e52 <cbor_encoder_create_map>
   1dbe8:	4304      	orrs	r4, r0
   1dbea:	2206      	movs	r2, #6
   1dbec:	4925      	ldr	r1, [pc, #148]	; (1dc84 <nmgr_def_mpstat_read+0xf8>)
   1dbee:	4668      	mov	r0, sp
   1dbf0:	f7f9 f923 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1dbf4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1dbf6:	9a08      	ldr	r2, [sp, #32]
   1dbf8:	17d3      	asrs	r3, r2, #31
   1dbfa:	4668      	mov	r0, sp
   1dbfc:	f7f9 f862 	bl	16cc4 <cbor_encode_uint>
   1dc00:	4304      	orrs	r4, r0
   1dc02:	2205      	movs	r2, #5
   1dc04:	4920      	ldr	r1, [pc, #128]	; (1dc88 <nmgr_def_mpstat_read+0xfc>)
   1dc06:	4668      	mov	r0, sp
   1dc08:	f7f9 f917 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   1dc0c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   1dc0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dc10:	17d3      	asrs	r3, r2, #31
   1dc12:	4668      	mov	r0, sp
   1dc14:	f7f9 f856 	bl	16cc4 <cbor_encode_uint>
   1dc18:	4304      	orrs	r4, r0
   1dc1a:	2205      	movs	r2, #5
   1dc1c:	491b      	ldr	r1, [pc, #108]	; (1dc8c <nmgr_def_mpstat_read+0x100>)
   1dc1e:	4668      	mov	r0, sp
   1dc20:	f7f9 f90b 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1dc24:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1dc26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dc28:	17d3      	asrs	r3, r2, #31
   1dc2a:	4668      	mov	r0, sp
   1dc2c:	f7f9 f84a 	bl	16cc4 <cbor_encode_uint>
   1dc30:	4304      	orrs	r4, r0
   1dc32:	2203      	movs	r2, #3
   1dc34:	4916      	ldr	r1, [pc, #88]	; (1dc90 <nmgr_def_mpstat_read+0x104>)
   1dc36:	4668      	mov	r0, sp
   1dc38:	f7f9 f8ff 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   1dc3c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   1dc3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dc40:	17d3      	asrs	r3, r2, #31
   1dc42:	4668      	mov	r0, sp
   1dc44:	f7f9 f83e 	bl	16cc4 <cbor_encode_uint>
   1dc48:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   1dc4a:	4669      	mov	r1, sp
   1dc4c:	a804      	add	r0, sp, #16
   1dc4e:	f7f9 f90e 	bl	16e6e <cbor_encoder_close_container>
   1dc52:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1dc54:	a908      	add	r1, sp, #32
   1dc56:	4628      	mov	r0, r5
   1dc58:	f7ef ffec 	bl	dc34 <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   1dc5c:	4605      	mov	r5, r0
   1dc5e:	2800      	cmp	r0, #0
   1dc60:	d1b3      	bne.n	1dbca <nmgr_def_mpstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   1dc62:	a904      	add	r1, sp, #16
   1dc64:	4630      	mov	r0, r6
   1dc66:	f7f9 f902 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   1dc6a:	ea54 0300 	orrs.w	r3, r4, r0
   1dc6e:	d102      	bne.n	1dc76 <nmgr_def_mpstat_read+0xea>
    return (0);
   1dc70:	2000      	movs	r0, #0
}
   1dc72:	b014      	add	sp, #80	; 0x50
   1dc74:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   1dc76:	2002      	movs	r0, #2
   1dc78:	e7fb      	b.n	1dc72 <nmgr_def_mpstat_read+0xe6>
   1dc7a:	bf00      	nop
   1dc7c:	000242b8 	.word	0x000242b8
   1dc80:	00025708 	.word	0x00025708
   1dc84:	00025710 	.word	0x00025710
   1dc88:	00025718 	.word	0x00025718
   1dc8c:	00025720 	.word	0x00025720
   1dc90:	00023f2c 	.word	0x00023f2c

0001dc94 <nmgr_def_taskstat_read>:
{
   1dc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc96:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1dc98:	f100 060c 	add.w	r6, r0, #12
   1dc9c:	2202      	movs	r2, #2
   1dc9e:	495a      	ldr	r1, [pc, #360]	; (1de08 <nmgr_def_taskstat_read+0x174>)
   1dca0:	4630      	mov	r0, r6
   1dca2:	f7f9 f8ca 	bl	16e3a <cbor_encode_text_string>
   1dca6:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1dca8:	2200      	movs	r2, #0
   1dcaa:	2300      	movs	r3, #0
   1dcac:	4630      	mov	r0, r6
   1dcae:	f7f9 f849 	bl	16d44 <cbor_encode_int>
   1dcb2:	4304      	orrs	r4, r0
   1dcb4:	2205      	movs	r2, #5
   1dcb6:	4955      	ldr	r1, [pc, #340]	; (1de0c <nmgr_def_taskstat_read+0x178>)
   1dcb8:	4630      	mov	r0, r6
   1dcba:	f7f9 f8be 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   1dcbe:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   1dcc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dcc4:	a904      	add	r1, sp, #16
   1dcc6:	4630      	mov	r0, r6
   1dcc8:	f7f9 f8c3 	bl	16e52 <cbor_encoder_create_map>
   1dccc:	4304      	orrs	r4, r0
    prev_task = NULL;
   1dcce:	2500      	movs	r5, #0
   1dcd0:	e086      	b.n	1dde0 <nmgr_def_taskstat_read+0x14c>
   1dcd2:	a80e      	add	r0, sp, #56	; 0x38
   1dcd4:	f7fe fd04 	bl	1c6e0 <strlen>
   1dcd8:	4602      	mov	r2, r0
   1dcda:	a90e      	add	r1, sp, #56	; 0x38
   1dcdc:	a804      	add	r0, sp, #16
   1dcde:	f7f9 f8ac 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1dce2:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1dce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dce8:	4669      	mov	r1, sp
   1dcea:	a804      	add	r0, sp, #16
   1dcec:	f7f9 f8b1 	bl	16e52 <cbor_encoder_create_map>
   1dcf0:	4304      	orrs	r4, r0
   1dcf2:	2204      	movs	r2, #4
   1dcf4:	4946      	ldr	r1, [pc, #280]	; (1de10 <nmgr_def_taskstat_read+0x17c>)
   1dcf6:	4668      	mov	r0, sp
   1dcf8:	f7f9 f89f 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   1dcfc:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   1dcfe:	2700      	movs	r7, #0
   1dd00:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1dd04:	463b      	mov	r3, r7
   1dd06:	4668      	mov	r0, sp
   1dd08:	f7f8 ffdc 	bl	16cc4 <cbor_encode_uint>
   1dd0c:	4304      	orrs	r4, r0
   1dd0e:	2203      	movs	r2, #3
   1dd10:	4940      	ldr	r1, [pc, #256]	; (1de14 <nmgr_def_taskstat_read+0x180>)
   1dd12:	4668      	mov	r0, sp
   1dd14:	f7f9 f891 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   1dd18:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   1dd1a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   1dd1e:	463b      	mov	r3, r7
   1dd20:	4668      	mov	r0, sp
   1dd22:	f7f8 ffcf 	bl	16cc4 <cbor_encode_uint>
   1dd26:	4304      	orrs	r4, r0
   1dd28:	2205      	movs	r2, #5
   1dd2a:	493b      	ldr	r1, [pc, #236]	; (1de18 <nmgr_def_taskstat_read+0x184>)
   1dd2c:	4668      	mov	r0, sp
   1dd2e:	f7f9 f884 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1dd32:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1dd34:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1dd38:	463b      	mov	r3, r7
   1dd3a:	4668      	mov	r0, sp
   1dd3c:	f7f8 ffc2 	bl	16cc4 <cbor_encode_uint>
   1dd40:	4304      	orrs	r4, r0
   1dd42:	2206      	movs	r2, #6
   1dd44:	4935      	ldr	r1, [pc, #212]	; (1de1c <nmgr_def_taskstat_read+0x188>)
   1dd46:	4668      	mov	r0, sp
   1dd48:	f7f9 f877 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   1dd4c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   1dd4e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1dd52:	463b      	mov	r3, r7
   1dd54:	4668      	mov	r0, sp
   1dd56:	f7f8 ffb5 	bl	16cc4 <cbor_encode_uint>
   1dd5a:	4304      	orrs	r4, r0
   1dd5c:	2206      	movs	r2, #6
   1dd5e:	4930      	ldr	r1, [pc, #192]	; (1de20 <nmgr_def_taskstat_read+0x18c>)
   1dd60:	4668      	mov	r0, sp
   1dd62:	f7f9 f86a 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   1dd66:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   1dd68:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1dd6c:	463b      	mov	r3, r7
   1dd6e:	4668      	mov	r0, sp
   1dd70:	f7f8 ffa8 	bl	16cc4 <cbor_encode_uint>
   1dd74:	4304      	orrs	r4, r0
   1dd76:	2206      	movs	r2, #6
   1dd78:	492a      	ldr	r1, [pc, #168]	; (1de24 <nmgr_def_taskstat_read+0x190>)
   1dd7a:	4668      	mov	r0, sp
   1dd7c:	f7f9 f85d 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   1dd80:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   1dd82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dd84:	463b      	mov	r3, r7
   1dd86:	4668      	mov	r0, sp
   1dd88:	f7f8 ff9c 	bl	16cc4 <cbor_encode_uint>
   1dd8c:	4304      	orrs	r4, r0
   1dd8e:	2207      	movs	r2, #7
   1dd90:	4925      	ldr	r1, [pc, #148]	; (1de28 <nmgr_def_taskstat_read+0x194>)
   1dd92:	4668      	mov	r0, sp
   1dd94:	f7f9 f851 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   1dd98:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   1dd9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dd9c:	463b      	mov	r3, r7
   1dd9e:	4668      	mov	r0, sp
   1dda0:	f7f8 ff90 	bl	16cc4 <cbor_encode_uint>
   1dda4:	4304      	orrs	r4, r0
   1dda6:	220c      	movs	r2, #12
   1dda8:	4920      	ldr	r1, [pc, #128]	; (1de2c <nmgr_def_taskstat_read+0x198>)
   1ddaa:	4668      	mov	r0, sp
   1ddac:	f7f9 f845 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   1ddb0:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1ddb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ddb4:	463b      	mov	r3, r7
   1ddb6:	4668      	mov	r0, sp
   1ddb8:	f7f8 ff84 	bl	16cc4 <cbor_encode_uint>
   1ddbc:	4304      	orrs	r4, r0
   1ddbe:	220c      	movs	r2, #12
   1ddc0:	491b      	ldr	r1, [pc, #108]	; (1de30 <nmgr_def_taskstat_read+0x19c>)
   1ddc2:	4668      	mov	r0, sp
   1ddc4:	f7f9 f839 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   1ddc8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   1ddca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ddcc:	463b      	mov	r3, r7
   1ddce:	4668      	mov	r0, sp
   1ddd0:	f7f8 ff78 	bl	16cc4 <cbor_encode_uint>
   1ddd4:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1ddd6:	4669      	mov	r1, sp
   1ddd8:	a804      	add	r0, sp, #16
   1ddda:	f7f9 f848 	bl	16e6e <cbor_encoder_close_container>
   1ddde:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   1dde0:	a908      	add	r1, sp, #32
   1dde2:	4628      	mov	r0, r5
   1dde4:	f7f0 fbdc 	bl	e5a0 <os_task_info_get_next>
        if (prev_task == NULL) {
   1dde8:	4605      	mov	r5, r0
   1ddea:	2800      	cmp	r0, #0
   1ddec:	f47f af71 	bne.w	1dcd2 <nmgr_def_taskstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   1ddf0:	a904      	add	r1, sp, #16
   1ddf2:	4630      	mov	r0, r6
   1ddf4:	f7f9 f83b 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   1ddf8:	ea54 0300 	orrs.w	r3, r4, r0
   1ddfc:	d102      	bne.n	1de04 <nmgr_def_taskstat_read+0x170>
    return (0);
   1ddfe:	2000      	movs	r0, #0
}
   1de00:	b017      	add	sp, #92	; 0x5c
   1de02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1de04:	2002      	movs	r0, #2
   1de06:	e7fb      	b.n	1de00 <nmgr_def_taskstat_read+0x16c>
   1de08:	000242b8 	.word	0x000242b8
   1de0c:	000240dc 	.word	0x000240dc
   1de10:	00025728 	.word	0x00025728
   1de14:	00024014 	.word	0x00024014
   1de18:	00025730 	.word	0x00025730
   1de1c:	00023ff8 	.word	0x00023ff8
   1de20:	00025738 	.word	0x00025738
   1de24:	00025740 	.word	0x00025740
   1de28:	0002400c 	.word	0x0002400c
   1de2c:	00025748 	.word	0x00025748
   1de30:	00025758 	.word	0x00025758

0001de34 <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
   1de34:	b508      	push	{r3, lr}
    return mgmt_group_register(&nmgr_def_group);
   1de36:	4802      	ldr	r0, [pc, #8]	; (1de40 <nmgr_os_groups_register+0xc>)
   1de38:	f7ff fbac 	bl	1d594 <mgmt_group_register>
}
   1de3c:	bd08      	pop	{r3, pc}
   1de3e:	bf00      	nop
   1de40:	20001640 	.word	0x20001640

0001de44 <nmgr_shell_get_mtu>:

static uint16_t
nmgr_shell_get_mtu(struct os_mbuf *m)
{
    return MGMT_MAX_MTU;
}
   1de44:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1de48:	4770      	bx	lr
	...

0001de4c <nmgr_shell_in>:
    return (rc);
}

static int
nmgr_shell_in(struct os_mbuf *m, void *arg)
{
   1de4c:	b508      	push	{r3, lr}
   1de4e:	4601      	mov	r1, r0
    return nmgr_rx_req(&nmgr_shell_transport, m);
   1de50:	4801      	ldr	r0, [pc, #4]	; (1de58 <nmgr_shell_in+0xc>)
   1de52:	f7ff fd5d 	bl	1d910 <nmgr_rx_req>
}
   1de56:	bd08      	pop	{r3, pc}
   1de58:	2000725c 	.word	0x2000725c

0001de5c <nmgr_shell_out>:
{
   1de5c:	b538      	push	{r3, r4, r5, lr}
   1de5e:	460c      	mov	r4, r1
    rc = shell_nlip_output(m);
   1de60:	4608      	mov	r0, r1
   1de62:	f7f6 fca1 	bl	147a8 <shell_nlip_output>
    if (rc != 0) {
   1de66:	4605      	mov	r5, r0
   1de68:	b908      	cbnz	r0, 1de6e <nmgr_shell_out+0x12>
}
   1de6a:	4628      	mov	r0, r5
   1de6c:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(m);
   1de6e:	4620      	mov	r0, r4
   1de70:	f7f0 fe3b 	bl	eaea <os_mbuf_free_chain>
    return (rc);
   1de74:	e7f9      	b.n	1de6a <nmgr_shell_out+0xe>
	...

0001de78 <nmgr_shell_pkg_init>:

void
nmgr_shell_pkg_init(void)
{
   1de78:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1de7a:	4b10      	ldr	r3, [pc, #64]	; (1debc <nmgr_shell_pkg_init+0x44>)
   1de7c:	781b      	ldrb	r3, [r3, #0]
   1de7e:	b15b      	cbz	r3, 1de98 <nmgr_shell_pkg_init+0x20>

    rc = nmgr_transport_init(&nmgr_shell_transport, nmgr_shell_out,
   1de80:	4a0f      	ldr	r2, [pc, #60]	; (1dec0 <nmgr_shell_pkg_init+0x48>)
   1de82:	4910      	ldr	r1, [pc, #64]	; (1dec4 <nmgr_shell_pkg_init+0x4c>)
   1de84:	4810      	ldr	r0, [pc, #64]	; (1dec8 <nmgr_shell_pkg_init+0x50>)
   1de86:	f7ff fd39 	bl	1d8fc <nmgr_transport_init>
      nmgr_shell_get_mtu);
    assert(rc == 0);
   1de8a:	b950      	cbnz	r0, 1dea2 <nmgr_shell_pkg_init+0x2a>

    rc = shell_nlip_input_register(nmgr_shell_in, &nmgr_shell_transport);
   1de8c:	490e      	ldr	r1, [pc, #56]	; (1dec8 <nmgr_shell_pkg_init+0x50>)
   1de8e:	480f      	ldr	r0, [pc, #60]	; (1decc <nmgr_shell_pkg_init+0x54>)
   1de90:	f7f6 fc80 	bl	14794 <shell_nlip_input_register>
    assert(rc == 0);
   1de94:	b958      	cbnz	r0, 1deae <nmgr_shell_pkg_init+0x36>
}
   1de96:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1de98:	461a      	mov	r2, r3
   1de9a:	4619      	mov	r1, r3
   1de9c:	4618      	mov	r0, r3
   1de9e:	f7ef fa5f 	bl	d360 <__assert_func>
    assert(rc == 0);
   1dea2:	2300      	movs	r3, #0
   1dea4:	461a      	mov	r2, r3
   1dea6:	4619      	mov	r1, r3
   1dea8:	4618      	mov	r0, r3
   1deaa:	f7ef fa59 	bl	d360 <__assert_func>
    assert(rc == 0);
   1deae:	2300      	movs	r3, #0
   1deb0:	461a      	mov	r2, r3
   1deb2:	4619      	mov	r1, r3
   1deb4:	4618      	mov	r0, r3
   1deb6:	f7ef fa53 	bl	d360 <__assert_func>
   1deba:	bf00      	nop
   1debc:	20006ca8 	.word	0x20006ca8
   1dec0:	0001de45 	.word	0x0001de45
   1dec4:	0001de5d 	.word	0x0001de5d
   1dec8:	2000725c 	.word	0x2000725c
   1decc:	0001de4d 	.word	0x0001de4d

0001ded0 <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   1ded0:	b510      	push	{r4, lr}
   1ded2:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   1ded4:	2200      	movs	r2, #0
   1ded6:	a903      	add	r1, sp, #12
   1ded8:	2011      	movs	r0, #17
   1deda:	f000 fa8f 	bl	1e3fc <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1dede:	b138      	cbz	r0, 1def0 <config_init_fcb+0x20>
   1dee0:	2000      	movs	r0, #0
   1dee2:	9000      	str	r0, [sp, #0]
   1dee4:	4b26      	ldr	r3, [pc, #152]	; (1df80 <config_init_fcb+0xb0>)
   1dee6:	681c      	ldr	r4, [r3, #0]
   1dee8:	4603      	mov	r3, r0
   1deea:	4602      	mov	r2, r0
   1deec:	4601      	mov	r1, r0
   1deee:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   1def0:	9b03      	ldr	r3, [sp, #12]
   1def2:	2b09      	cmp	r3, #9
   1def4:	d907      	bls.n	1df06 <config_init_fcb+0x36>
   1def6:	2000      	movs	r0, #0
   1def8:	9000      	str	r0, [sp, #0]
   1defa:	4b21      	ldr	r3, [pc, #132]	; (1df80 <config_init_fcb+0xb0>)
   1defc:	681c      	ldr	r4, [r3, #0]
   1defe:	4603      	mov	r3, r0
   1df00:	4602      	mov	r2, r0
   1df02:	4601      	mov	r1, r0
   1df04:	47a0      	blx	r4
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   1df06:	4a1f      	ldr	r2, [pc, #124]	; (1df84 <config_init_fcb+0xb4>)
   1df08:	a903      	add	r1, sp, #12
   1df0a:	2011      	movs	r0, #17
   1df0c:	f000 fa76 	bl	1e3fc <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1df10:	481d      	ldr	r0, [pc, #116]	; (1df88 <config_init_fcb+0xb8>)
   1df12:	9b03      	ldr	r3, [sp, #12]
   1df14:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   1df16:	f000 f933 	bl	1e180 <conf_fcb_src>
    if (rc) {
   1df1a:	4603      	mov	r3, r0
   1df1c:	b1c0      	cbz	r0, 1df50 <config_init_fcb+0x80>
        for (cnt = 0;
   1df1e:	2300      	movs	r3, #0
   1df20:	9303      	str	r3, [sp, #12]
   1df22:	e00c      	b.n	1df3e <config_init_fcb+0x6e>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   1df24:	4817      	ldr	r0, [pc, #92]	; (1df84 <config_init_fcb+0xb4>)
   1df26:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1df2a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1df2e:	689a      	ldr	r2, [r3, #8]
   1df30:	2100      	movs	r1, #0
   1df32:	4618      	mov	r0, r3
   1df34:	f000 fac8 	bl	1e4c8 <flash_area_erase>
             cnt++) {
   1df38:	9b03      	ldr	r3, [sp, #12]
   1df3a:	3301      	adds	r3, #1
   1df3c:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   1df3e:	4b12      	ldr	r3, [pc, #72]	; (1df88 <config_init_fcb+0xb8>)
   1df40:	7b5a      	ldrb	r2, [r3, #13]
   1df42:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   1df44:	429a      	cmp	r2, r3
   1df46:	dced      	bgt.n	1df24 <config_init_fcb+0x54>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   1df48:	480f      	ldr	r0, [pc, #60]	; (1df88 <config_init_fcb+0xb8>)
   1df4a:	f000 f919 	bl	1e180 <conf_fcb_src>
   1df4e:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   1df50:	b13b      	cbz	r3, 1df62 <config_init_fcb+0x92>
   1df52:	2000      	movs	r0, #0
   1df54:	9000      	str	r0, [sp, #0]
   1df56:	4b0a      	ldr	r3, [pc, #40]	; (1df80 <config_init_fcb+0xb0>)
   1df58:	681c      	ldr	r4, [r3, #0]
   1df5a:	4603      	mov	r3, r0
   1df5c:	4602      	mov	r2, r0
   1df5e:	4601      	mov	r1, r0
   1df60:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   1df62:	4809      	ldr	r0, [pc, #36]	; (1df88 <config_init_fcb+0xb8>)
   1df64:	f000 f938 	bl	1e1d8 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1df68:	b138      	cbz	r0, 1df7a <config_init_fcb+0xaa>
   1df6a:	2000      	movs	r0, #0
   1df6c:	9000      	str	r0, [sp, #0]
   1df6e:	4b04      	ldr	r3, [pc, #16]	; (1df80 <config_init_fcb+0xb0>)
   1df70:	681c      	ldr	r4, [r3, #0]
   1df72:	4603      	mov	r3, r0
   1df74:	4602      	mov	r2, r0
   1df76:	4601      	mov	r1, r0
   1df78:	47a0      	blx	r4
}
   1df7a:	b004      	add	sp, #16
   1df7c:	bd10      	pop	{r4, pc}
   1df7e:	bf00      	nop
   1df80:	2000143c 	.word	0x2000143c
   1df84:	2000727c 	.word	0x2000727c
   1df88:	2000164c 	.word	0x2000164c

0001df8c <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   1df8c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1df8e:	4b06      	ldr	r3, [pc, #24]	; (1dfa8 <config_pkg_init+0x1c>)
   1df90:	781b      	ldrb	r3, [r3, #0]
   1df92:	b123      	cbz	r3, 1df9e <config_pkg_init+0x12>

    conf_init();
   1df94:	f7f4 fb74 	bl	12680 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   1df98:	f7ff ff9a 	bl	1ded0 <config_init_fcb>
#endif
#endif
}
   1df9c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1df9e:	461a      	mov	r2, r3
   1dfa0:	4619      	mov	r1, r3
   1dfa2:	4618      	mov	r0, r3
   1dfa4:	f7ef f9dc 	bl	d360 <__assert_func>
   1dfa8:	20006ca8 	.word	0x20006ca8

0001dfac <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1dfac:	4770      	bx	lr
	...

0001dfb0 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1dfb0:	b500      	push	{lr}
   1dfb2:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   1dfb4:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   1dfb6:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   1dfb8:	466b      	mov	r3, sp
   1dfba:	4a05      	ldr	r2, [pc, #20]	; (1dfd0 <conf_fcb_load+0x20>)
   1dfbc:	2100      	movs	r1, #0
   1dfbe:	3008      	adds	r0, #8
   1dfc0:	f002 ff42 	bl	20e48 <fcb_walk>
    if (rc) {
   1dfc4:	b910      	cbnz	r0, 1dfcc <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   1dfc6:	b003      	add	sp, #12
   1dfc8:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   1dfcc:	2002      	movs	r0, #2
   1dfce:	e7fa      	b.n	1dfc6 <conf_fcb_load+0x16>
   1dfd0:	0001dfd5 	.word	0x0001dfd5

0001dfd4 <conf_fcb_load_cb>:
{
   1dfd4:	b530      	push	{r4, r5, lr}
   1dfd6:	b0db      	sub	sp, #364	; 0x16c
   1dfd8:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   1dfda:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   1dfdc:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   1dfe0:	d301      	bcc.n	1dfe6 <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   1dfe2:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   1dfe6:	4623      	mov	r3, r4
   1dfe8:	aa02      	add	r2, sp, #8
   1dfea:	6881      	ldr	r1, [r0, #8]
   1dfec:	6800      	ldr	r0, [r0, #0]
   1dfee:	f000 fa43 	bl	1e478 <flash_area_read>
    if (rc) {
   1dff2:	b110      	cbz	r0, 1dffa <conf_fcb_load_cb+0x26>
}
   1dff4:	2000      	movs	r0, #0
   1dff6:	b05b      	add	sp, #364	; 0x16c
   1dff8:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   1dffa:	a802      	add	r0, sp, #8
   1dffc:	2300      	movs	r3, #0
   1dffe:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1e000:	466a      	mov	r2, sp
   1e002:	a901      	add	r1, sp, #4
   1e004:	f000 f910 	bl	1e228 <conf_line_parse>
    if (rc) {
   1e008:	2800      	cmp	r0, #0
   1e00a:	d1f3      	bne.n	1dff4 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   1e00c:	682b      	ldr	r3, [r5, #0]
   1e00e:	686a      	ldr	r2, [r5, #4]
   1e010:	9900      	ldr	r1, [sp, #0]
   1e012:	9801      	ldr	r0, [sp, #4]
   1e014:	4798      	blx	r3
    return 0;
   1e016:	e7ed      	b.n	1dff4 <conf_fcb_load_cb+0x20>

0001e018 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   1e018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e01a:	4604      	mov	r4, r0
   1e01c:	460d      	mov	r5, r1
   1e01e:	4617      	mov	r7, r2
   1e020:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1e022:	8983      	ldrh	r3, [r0, #12]
   1e024:	460a      	mov	r2, r1
   1e026:	6881      	ldr	r1, [r0, #8]
   1e028:	6800      	ldr	r0, [r0, #0]
   1e02a:	f000 fa25 	bl	1e478 <flash_area_read>
    if (rc) {
   1e02e:	b100      	cbz	r0, 1e032 <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   1e030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   1e032:	89a3      	ldrh	r3, [r4, #12]
   1e034:	2200      	movs	r2, #0
   1e036:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   1e038:	4632      	mov	r2, r6
   1e03a:	4639      	mov	r1, r7
   1e03c:	4628      	mov	r0, r5
   1e03e:	f000 f8f3 	bl	1e228 <conf_line_parse>
    return rc;
   1e042:	e7f5      	b.n	1e030 <conf_fcb_var_read+0x18>

0001e044 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   1e044:	b570      	push	{r4, r5, r6, lr}
   1e046:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
   1e04a:	4604      	mov	r4, r0
   1e04c:	460d      	mov	r5, r1
   1e04e:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   1e050:	f002 fced 	bl	20a2e <fcb_append_to_scratch>
    if (rc) {
   1e054:	2800      	cmp	r0, #0
   1e056:	d15e      	bne.n	1e116 <conf_fcb_compress_internal+0xd2>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   1e058:	2300      	movs	r3, #0
   1e05a:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   1e05c:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   1e05e:	a908      	add	r1, sp, #32
   1e060:	4620      	mov	r0, r4
   1e062:	f002 fe9b 	bl	20d9c <fcb_getnext>
   1e066:	2800      	cmp	r0, #0
   1e068:	d152      	bne.n	1e110 <conf_fcb_compress_internal+0xcc>
        if (loc1.fe_area != fcb->f_oldest) {
   1e06a:	9a08      	ldr	r2, [sp, #32]
   1e06c:	69a3      	ldr	r3, [r4, #24]
   1e06e:	429a      	cmp	r2, r3
   1e070:	d14e      	bne.n	1e110 <conf_fcb_compress_internal+0xcc>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   1e072:	ab02      	add	r3, sp, #8
   1e074:	aa03      	add	r2, sp, #12
   1e076:	a964      	add	r1, sp, #400	; 0x190
   1e078:	a808      	add	r0, sp, #32
   1e07a:	f7ff ffcd 	bl	1e018 <conf_fcb_var_read>
        if (rc) {
   1e07e:	2800      	cmp	r0, #0
   1e080:	d1ed      	bne.n	1e05e <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   1e082:	9b02      	ldr	r3, [sp, #8]
   1e084:	2b00      	cmp	r3, #0
   1e086:	d0ea      	beq.n	1e05e <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   1e088:	f10d 0c10 	add.w	ip, sp, #16
   1e08c:	ab08      	add	r3, sp, #32
   1e08e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e090:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   1e094:	a904      	add	r1, sp, #16
   1e096:	4620      	mov	r0, r4
   1e098:	f002 fe80 	bl	20d9c <fcb_getnext>
   1e09c:	b978      	cbnz	r0, 1e0be <conf_fcb_compress_internal+0x7a>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   1e09e:	466b      	mov	r3, sp
   1e0a0:	aa01      	add	r2, sp, #4
   1e0a2:	a90c      	add	r1, sp, #48	; 0x30
   1e0a4:	a804      	add	r0, sp, #16
   1e0a6:	f7ff ffb7 	bl	1e018 <conf_fcb_var_read>
            if (rc) {
   1e0aa:	2800      	cmp	r0, #0
   1e0ac:	d1f2      	bne.n	1e094 <conf_fcb_compress_internal+0x50>
                continue;
            }
            if (!strcmp(name1, name2)) {
   1e0ae:	9901      	ldr	r1, [sp, #4]
   1e0b0:	9803      	ldr	r0, [sp, #12]
   1e0b2:	f7f3 fa0f 	bl	114d4 <strcmp>
   1e0b6:	4603      	mov	r3, r0
   1e0b8:	2800      	cmp	r0, #0
   1e0ba:	d1eb      	bne.n	1e094 <conf_fcb_compress_internal+0x50>
   1e0bc:	e000      	b.n	1e0c0 <conf_fcb_compress_internal+0x7c>
        copy = 1;
   1e0be:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   1e0c0:	2b00      	cmp	r3, #0
   1e0c2:	d0cc      	beq.n	1e05e <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   1e0c4:	b12d      	cbz	r5, 1e0d2 <conf_fcb_compress_internal+0x8e>
            if (copy_or_not(name1, val1, cn_arg)) {
   1e0c6:	4632      	mov	r2, r6
   1e0c8:	9902      	ldr	r1, [sp, #8]
   1e0ca:	9803      	ldr	r0, [sp, #12]
   1e0cc:	47a8      	blx	r5
   1e0ce:	2800      	cmp	r0, #0
   1e0d0:	d1c5      	bne.n	1e05e <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1e0d2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1e0d6:	aa64      	add	r2, sp, #400	; 0x190
   1e0d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e0da:	9808      	ldr	r0, [sp, #32]
   1e0dc:	f000 f9cc 	bl	1e478 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   1e0e0:	2800      	cmp	r0, #0
   1e0e2:	d1bc      	bne.n	1e05e <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1e0e4:	aa04      	add	r2, sp, #16
   1e0e6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   1e0ea:	4620      	mov	r0, r4
   1e0ec:	f002 fcb8 	bl	20a60 <fcb_append>
        if (rc) {
   1e0f0:	2800      	cmp	r0, #0
   1e0f2:	d1b4      	bne.n	1e05e <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1e0f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1e0f8:	aa64      	add	r2, sp, #400	; 0x190
   1e0fa:	9906      	ldr	r1, [sp, #24]
   1e0fc:	9804      	ldr	r0, [sp, #16]
   1e0fe:	f000 f9cf 	bl	1e4a0 <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   1e102:	2800      	cmp	r0, #0
   1e104:	d1ab      	bne.n	1e05e <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   1e106:	a904      	add	r1, sp, #16
   1e108:	4620      	mov	r0, r4
   1e10a:	f002 fd26 	bl	20b5a <fcb_append_finish>
   1e10e:	e7a6      	b.n	1e05e <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   1e110:	4620      	mov	r0, r4
   1e112:	f002 fe5d 	bl	20dd0 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   1e116:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   1e11a:	bd70      	pop	{r4, r5, r6, pc}

0001e11c <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   1e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e120:	b084      	sub	sp, #16
   1e122:	4606      	mov	r6, r0
   1e124:	4688      	mov	r8, r1
   1e126:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   1e128:	2500      	movs	r5, #0
   1e12a:	2d09      	cmp	r5, #9
   1e12c:	dc11      	bgt.n	1e152 <conf_fcb_append+0x36>
        rc = fcb_append(fcb, len, &loc);
   1e12e:	466a      	mov	r2, sp
   1e130:	b2b9      	uxth	r1, r7
   1e132:	4630      	mov	r0, r6
   1e134:	f002 fc94 	bl	20a60 <fcb_append>
   1e138:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   1e13a:	f110 0f04 	cmn.w	r0, #4
   1e13e:	d108      	bne.n	1e152 <conf_fcb_append+0x36>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
   1e140:	79b0      	ldrb	r0, [r6, #6]
   1e142:	b1b8      	cbz	r0, 1e174 <conf_fcb_append+0x58>
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   1e144:	2200      	movs	r2, #0
   1e146:	4611      	mov	r1, r2
   1e148:	4630      	mov	r0, r6
   1e14a:	f7ff ff7b 	bl	1e044 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   1e14e:	3501      	adds	r5, #1
   1e150:	e7eb      	b.n	1e12a <conf_fcb_append+0xe>
    }
    if (rc) {
   1e152:	b98c      	cbnz	r4, 1e178 <conf_fcb_append+0x5c>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   1e154:	463b      	mov	r3, r7
   1e156:	4642      	mov	r2, r8
   1e158:	9902      	ldr	r1, [sp, #8]
   1e15a:	9800      	ldr	r0, [sp, #0]
   1e15c:	f000 f9a0 	bl	1e4a0 <flash_area_write>
    if (rc) {
   1e160:	4604      	mov	r4, r0
   1e162:	b958      	cbnz	r0, 1e17c <conf_fcb_append+0x60>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   1e164:	4669      	mov	r1, sp
   1e166:	4630      	mov	r0, r6
   1e168:	f002 fcf7 	bl	20b5a <fcb_append_finish>
    return OS_OK;
}
   1e16c:	4620      	mov	r0, r4
   1e16e:	b004      	add	sp, #16
   1e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return OS_ENOMEM;
   1e174:	2401      	movs	r4, #1
   1e176:	e7f9      	b.n	1e16c <conf_fcb_append+0x50>
        return OS_EINVAL;
   1e178:	2402      	movs	r4, #2
   1e17a:	e7f7      	b.n	1e16c <conf_fcb_append+0x50>
        return OS_EINVAL;
   1e17c:	2402      	movs	r4, #2
   1e17e:	e7f5      	b.n	1e16c <conf_fcb_append+0x50>

0001e180 <conf_fcb_src>:
{
   1e180:	b570      	push	{r4, r5, r6, lr}
   1e182:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   1e184:	2301      	movs	r3, #1
   1e186:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   1e188:	7b43      	ldrb	r3, [r0, #13]
   1e18a:	2b01      	cmp	r3, #1
   1e18c:	d902      	bls.n	1e194 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   1e18e:	2301      	movs	r3, #1
   1e190:	7383      	strb	r3, [r0, #14]
   1e192:	e007      	b.n	1e1a4 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   1e194:	2300      	movs	r3, #0
   1e196:	7383      	strb	r3, [r0, #14]
   1e198:	e004      	b.n	1e1a4 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   1e19a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1e19c:	6882      	ldr	r2, [r0, #8]
   1e19e:	2100      	movs	r1, #0
   1e1a0:	f000 f992 	bl	1e4c8 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   1e1a4:	f104 0508 	add.w	r5, r4, #8
   1e1a8:	4628      	mov	r0, r5
   1e1aa:	f002 fb96 	bl	208da <fcb_init>
        if (rc) {
   1e1ae:	4606      	mov	r6, r0
   1e1b0:	b968      	cbnz	r0, 1e1ce <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   1e1b2:	7ba3      	ldrb	r3, [r4, #14]
   1e1b4:	b123      	cbz	r3, 1e1c0 <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   1e1b6:	4628      	mov	r0, r5
   1e1b8:	f002 fb19 	bl	207ee <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   1e1bc:	2800      	cmp	r0, #0
   1e1be:	ddec      	ble.n	1e19a <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1e1c0:	4b04      	ldr	r3, [pc, #16]	; (1e1d4 <conf_fcb_src+0x54>)
   1e1c2:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   1e1c4:	4620      	mov	r0, r4
   1e1c6:	f7f4 f999 	bl	124fc <conf_src_register>
}
   1e1ca:	4630      	mov	r0, r6
   1e1cc:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   1e1ce:	2603      	movs	r6, #3
   1e1d0:	e7fb      	b.n	1e1ca <conf_fcb_src+0x4a>
   1e1d2:	bf00      	nop
   1e1d4:	20001684 	.word	0x20001684

0001e1d8 <conf_fcb_dst>:
{
   1e1d8:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   1e1da:	4b03      	ldr	r3, [pc, #12]	; (1e1e8 <conf_fcb_dst+0x10>)
   1e1dc:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   1e1de:	f7f4 f9a1 	bl	12524 <conf_dst_register>
}
   1e1e2:	2000      	movs	r0, #0
   1e1e4:	bd08      	pop	{r3, pc}
   1e1e6:	bf00      	nop
   1e1e8:	20001684 	.word	0x20001684

0001e1ec <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   1e1ec:	b199      	cbz	r1, 1e216 <conf_fcb_kv_save+0x2a>
{
   1e1ee:	b510      	push	{r4, lr}
   1e1f0:	b0d8      	sub	sp, #352	; 0x160
   1e1f2:	4604      	mov	r4, r0
   1e1f4:	4613      	mov	r3, r2
   1e1f6:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   1e1f8:	f44f 71b0 	mov.w	r1, #352	; 0x160
   1e1fc:	4668      	mov	r0, sp
   1e1fe:	f000 f875 	bl	1e2ec <conf_line_make>
   1e202:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   1e204:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   1e208:	d807      	bhi.n	1e21a <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   1e20a:	4669      	mov	r1, sp
   1e20c:	4620      	mov	r0, r4
   1e20e:	f7ff ff85 	bl	1e11c <conf_fcb_append>
}
   1e212:	b058      	add	sp, #352	; 0x160
   1e214:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   1e216:	2003      	movs	r0, #3
}
   1e218:	4770      	bx	lr
        return OS_INVALID_PARM;
   1e21a:	2003      	movs	r0, #3
   1e21c:	e7f9      	b.n	1e212 <conf_fcb_kv_save+0x26>

0001e21e <conf_fcb_save>:
{
   1e21e:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   1e220:	3008      	adds	r0, #8
   1e222:	f7ff ffe3 	bl	1e1ec <conf_fcb_kv_save>
}
   1e226:	bd08      	pop	{r3, pc}

0001e228 <conf_line_parse>:
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   1e228:	2300      	movs	r3, #0
   1e22a:	6013      	str	r3, [r2, #0]
    } state = FIND_NAME;
   1e22c:	469c      	mov	ip, r3
    for (cp = buf; *cp != '\0'; cp++) {
   1e22e:	7803      	ldrb	r3, [r0, #0]
   1e230:	2b00      	cmp	r3, #0
   1e232:	d04f      	beq.n	1e2d4 <conf_line_parse+0xac>
{
   1e234:	b500      	push	{lr}
   1e236:	e01a      	b.n	1e26e <conf_line_parse+0x46>
   1e238:	2b20      	cmp	r3, #32
   1e23a:	d015      	beq.n	1e268 <conf_line_parse+0x40>
   1e23c:	2b0a      	cmp	r3, #10
   1e23e:	d013      	beq.n	1e268 <conf_line_parse+0x40>
   1e240:	2b09      	cmp	r3, #9
   1e242:	d011      	beq.n	1e268 <conf_line_parse+0x40>
   1e244:	2b0d      	cmp	r3, #13
   1e246:	d00f      	beq.n	1e268 <conf_line_parse+0x40>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   1e248:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   1e24a:	f04f 0c01 	mov.w	ip, #1
   1e24e:	e00b      	b.n	1e268 <conf_line_parse+0x40>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   1e250:	2b3d      	cmp	r3, #61	; 0x3d
   1e252:	d01b      	beq.n	1e28c <conf_line_parse+0x64>
   1e254:	2b20      	cmp	r3, #32
   1e256:	d005      	beq.n	1e264 <conf_line_parse+0x3c>
   1e258:	2b0a      	cmp	r3, #10
   1e25a:	d003      	beq.n	1e264 <conf_line_parse+0x3c>
   1e25c:	2b09      	cmp	r3, #9
   1e25e:	d001      	beq.n	1e264 <conf_line_parse+0x3c>
   1e260:	2b0d      	cmp	r3, #13
   1e262:	d101      	bne.n	1e268 <conf_line_parse+0x40>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   1e264:	2300      	movs	r3, #0
   1e266:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   1e268:	3001      	adds	r0, #1
   1e26a:	7803      	ldrb	r3, [r0, #0]
   1e26c:	b32b      	cbz	r3, 1e2ba <conf_line_parse+0x92>
        switch (state) {
   1e26e:	f1bc 0f03 	cmp.w	ip, #3
   1e272:	d8f9      	bhi.n	1e268 <conf_line_parse+0x40>
   1e274:	f20f 0e04 	addw	lr, pc, #4
   1e278:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   1e27c:	0001e239 	.word	0x0001e239
   1e280:	0001e251 	.word	0x0001e251
   1e284:	0001e297 	.word	0x0001e297
   1e288:	0001e2af 	.word	0x0001e2af
                *cp = '\0';
   1e28c:	2300      	movs	r3, #0
   1e28e:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   1e290:	f04f 0c02 	mov.w	ip, #2
   1e294:	e7e8      	b.n	1e268 <conf_line_parse+0x40>
   1e296:	2b20      	cmp	r3, #32
   1e298:	d0e6      	beq.n	1e268 <conf_line_parse+0x40>
   1e29a:	2b0a      	cmp	r3, #10
   1e29c:	d0e4      	beq.n	1e268 <conf_line_parse+0x40>
   1e29e:	2b09      	cmp	r3, #9
   1e2a0:	d0e2      	beq.n	1e268 <conf_line_parse+0x40>
   1e2a2:	2b0d      	cmp	r3, #13
   1e2a4:	d0e0      	beq.n	1e268 <conf_line_parse+0x40>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   1e2a6:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   1e2a8:	f04f 0c03 	mov.w	ip, #3
   1e2ac:	e7dc      	b.n	1e268 <conf_line_parse+0x40>
	return (__c >= 0x20 && __c <= 0x7e);
   1e2ae:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   1e2b0:	2b5e      	cmp	r3, #94	; 0x5e
   1e2b2:	d9d9      	bls.n	1e268 <conf_line_parse+0x40>
                *cp = '\0';
   1e2b4:	2300      	movs	r3, #0
   1e2b6:	7003      	strb	r3, [r0, #0]
   1e2b8:	e7d6      	b.n	1e268 <conf_line_parse+0x40>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1e2ba:	f1ac 0c02 	sub.w	ip, ip, #2
   1e2be:	fa5f fc8c 	uxtb.w	ip, ip
   1e2c2:	f1bc 0f01 	cmp.w	ip, #1
   1e2c6:	d802      	bhi.n	1e2ce <conf_line_parse+0xa6>
        return 0;
   1e2c8:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   1e2ca:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1e2ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e2d2:	e7fa      	b.n	1e2ca <conf_line_parse+0xa2>
    if (state == FIND_VAL_END || state == FIND_VAL) {
   1e2d4:	f1ac 0c02 	sub.w	ip, ip, #2
   1e2d8:	fa5f fc8c 	uxtb.w	ip, ip
   1e2dc:	f1bc 0f01 	cmp.w	ip, #1
   1e2e0:	d801      	bhi.n	1e2e6 <conf_line_parse+0xbe>
        return 0;
   1e2e2:	2000      	movs	r0, #0
   1e2e4:	4770      	bx	lr
        return -1;
   1e2e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1e2ea:	4770      	bx	lr

0001e2ec <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   1e2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e2f0:	4606      	mov	r6, r0
   1e2f2:	4689      	mov	r9, r1
   1e2f4:	4690      	mov	r8, r2
   1e2f6:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   1e2f8:	4610      	mov	r0, r2
   1e2fa:	f7fe f9f1 	bl	1c6e0 <strlen>
   1e2fe:	4605      	mov	r5, r0
    if (value) {
   1e300:	b1e7      	cbz	r7, 1e33c <conf_line_make+0x50>
        vlen = strlen(value);
   1e302:	4638      	mov	r0, r7
   1e304:	f7fe f9ec 	bl	1c6e0 <strlen>
   1e308:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   1e30a:	1963      	adds	r3, r4, r5
   1e30c:	3301      	adds	r3, #1
   1e30e:	454b      	cmp	r3, r9
   1e310:	da16      	bge.n	1e340 <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   1e312:	462a      	mov	r2, r5
   1e314:	4641      	mov	r1, r8
   1e316:	4630      	mov	r0, r6
   1e318:	f7f3 f8ae 	bl	11478 <memcpy>
    off = nlen;
    dst[off++] = '=';
   1e31c:	f105 0801 	add.w	r8, r5, #1
   1e320:	233d      	movs	r3, #61	; 0x3d
   1e322:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   1e324:	4622      	mov	r2, r4
   1e326:	4639      	mov	r1, r7
   1e328:	eb06 0008 	add.w	r0, r6, r8
   1e32c:	f7f3 f8a4 	bl	11478 <memcpy>
    off += vlen;
   1e330:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   1e334:	2300      	movs	r3, #0
   1e336:	5433      	strb	r3, [r6, r0]

    return off;
}
   1e338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   1e33c:	2400      	movs	r4, #0
   1e33e:	e7e4      	b.n	1e30a <conf_line_make+0x1e>
        return -1;
   1e340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e344:	e7f8      	b.n	1e338 <conf_line_make+0x4c>

0001e346 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1e346:	b570      	push	{r4, r5, r6, lr}
   1e348:	b086      	sub	sp, #24
   1e34a:	4605      	mov	r5, r0
   1e34c:	460e      	mov	r6, r1
   1e34e:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1e350:	2300      	movs	r3, #0
   1e352:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1e354:	f001 fa9e 	bl	1f894 <mfg_init>

    mfg_open(&reader);
   1e358:	a801      	add	r0, sp, #4
   1e35a:	f001 fac1 	bl	1f8e0 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1e35e:	6823      	ldr	r3, [r4, #0]
   1e360:	42ab      	cmp	r3, r5
   1e362:	da22      	bge.n	1e3aa <flash_map_read_mfg+0x64>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1e364:	2102      	movs	r1, #2
   1e366:	a801      	add	r0, sp, #4
   1e368:	f001 fa7c 	bl	1f864 <mfg_seek_next_with_type>
        switch (rc) {
   1e36c:	f110 0f0f 	cmn.w	r0, #15
   1e370:	d01e      	beq.n	1e3b0 <flash_map_read_mfg+0x6a>
   1e372:	b9f0      	cbnz	r0, 1e3b2 <flash_map_read_mfg+0x6c>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1e374:	a903      	add	r1, sp, #12
   1e376:	a801      	add	r0, sp, #4
   1e378:	f001 fa81 	bl	1f87e <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1e37c:	b9c8      	cbnz	r0, 1e3b2 <flash_map_read_mfg+0x6c>
            return rc;
        }

        fap = out_areas + *out_num_areas;
   1e37e:	6823      	ldr	r3, [r4, #0]
   1e380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e384:	eb06 0283 	add.w	r2, r6, r3, lsl #2
        fap->fa_id = meta_flash_area.area_id;
   1e388:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1e38c:	f806 1023 	strb.w	r1, [r6, r3, lsl #2]
        fap->fa_device_id = meta_flash_area.device_id;
   1e390:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e394:	7053      	strb	r3, [r2, #1]
        fap->fa_off = meta_flash_area.offset;
   1e396:	f8dd 300e 	ldr.w	r3, [sp, #14]
   1e39a:	6053      	str	r3, [r2, #4]
        fap->fa_size = meta_flash_area.size;
   1e39c:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1e3a0:	6093      	str	r3, [r2, #8]

        (*out_num_areas)++;
   1e3a2:	6823      	ldr	r3, [r4, #0]
   1e3a4:	3301      	adds	r3, #1
   1e3a6:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1e3a8:	e7d9      	b.n	1e35e <flash_map_read_mfg+0x18>
            return -1;
   1e3aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e3ae:	e000      	b.n	1e3b2 <flash_map_read_mfg+0x6c>
        switch (rc) {
   1e3b0:	2000      	movs	r0, #0
    }
}
   1e3b2:	b006      	add	sp, #24
   1e3b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0001e3b8 <flash_area_open>:
{
   1e3b8:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1e3ba:	4b0e      	ldr	r3, [pc, #56]	; (1e3f4 <flash_area_open+0x3c>)
   1e3bc:	681c      	ldr	r4, [r3, #0]
   1e3be:	b1ac      	cbz	r4, 1e3ec <flash_area_open+0x34>
    for (i = 0; i < flash_map_entries; i++) {
   1e3c0:	2300      	movs	r3, #0
   1e3c2:	4a0d      	ldr	r2, [pc, #52]	; (1e3f8 <flash_area_open+0x40>)
   1e3c4:	6812      	ldr	r2, [r2, #0]
   1e3c6:	429a      	cmp	r2, r3
   1e3c8:	dd0c      	ble.n	1e3e4 <flash_area_open+0x2c>
        area = flash_map + i;
   1e3ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1e3ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
        if (area->fa_id == id) {
   1e3d2:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   1e3d6:	4282      	cmp	r2, r0
   1e3d8:	d001      	beq.n	1e3de <flash_area_open+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   1e3da:	3301      	adds	r3, #1
   1e3dc:	e7f1      	b.n	1e3c2 <flash_area_open+0xa>
            *fap = area;
   1e3de:	600d      	str	r5, [r1, #0]
            return 0;
   1e3e0:	2000      	movs	r0, #0
   1e3e2:	e001      	b.n	1e3e8 <flash_area_open+0x30>
    return SYS_ENOENT;
   1e3e4:	f06f 0003 	mvn.w	r0, #3
}
   1e3e8:	bc30      	pop	{r4, r5}
   1e3ea:	4770      	bx	lr
        return SYS_EACCES;
   1e3ec:	f06f 0006 	mvn.w	r0, #6
   1e3f0:	e7fa      	b.n	1e3e8 <flash_area_open+0x30>
   1e3f2:	bf00      	nop
   1e3f4:	200072e8 	.word	0x200072e8
   1e3f8:	200072ec 	.word	0x200072ec

0001e3fc <flash_area_to_sectors>:
{
   1e3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e400:	b084      	sub	sp, #16
   1e402:	460f      	mov	r7, r1
   1e404:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   1e406:	fa5f f880 	uxtb.w	r8, r0
   1e40a:	a903      	add	r1, sp, #12
   1e40c:	4640      	mov	r0, r8
   1e40e:	f7ff ffd3 	bl	1e3b8 <flash_area_open>
    if (rc != 0) {
   1e412:	4681      	mov	r9, r0
   1e414:	b118      	cbz	r0, 1e41e <flash_area_to_sectors+0x22>
}
   1e416:	4648      	mov	r0, r9
   1e418:	b004      	add	sp, #16
   1e41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   1e41e:	2300      	movs	r3, #0
   1e420:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1e422:	9b03      	ldr	r3, [sp, #12]
   1e424:	7858      	ldrb	r0, [r3, #1]
   1e426:	f7f9 f8f3 	bl	17610 <hal_bsp_flash_dev>
   1e42a:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e42c:	464c      	mov	r4, r9
   1e42e:	e003      	b.n	1e438 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   1e430:	683b      	ldr	r3, [r7, #0]
   1e432:	3301      	adds	r3, #1
   1e434:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e436:	3401      	adds	r4, #1
   1e438:	68eb      	ldr	r3, [r5, #12]
   1e43a:	42a3      	cmp	r3, r4
   1e43c:	ddeb      	ble.n	1e416 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1e43e:	682b      	ldr	r3, [r5, #0]
   1e440:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1e444:	ab01      	add	r3, sp, #4
   1e446:	aa02      	add	r2, sp, #8
   1e448:	4621      	mov	r1, r4
   1e44a:	4628      	mov	r0, r5
   1e44c:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   1e44e:	9903      	ldr	r1, [sp, #12]
   1e450:	684b      	ldr	r3, [r1, #4]
   1e452:	9a02      	ldr	r2, [sp, #8]
   1e454:	4293      	cmp	r3, r2
   1e456:	d8ee      	bhi.n	1e436 <flash_area_to_sectors+0x3a>
   1e458:	6889      	ldr	r1, [r1, #8]
   1e45a:	440b      	add	r3, r1
   1e45c:	429a      	cmp	r2, r3
   1e45e:	d2ea      	bcs.n	1e436 <flash_area_to_sectors+0x3a>
            if (ret) {
   1e460:	2e00      	cmp	r6, #0
   1e462:	d0e5      	beq.n	1e430 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   1e464:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   1e468:	9b03      	ldr	r3, [sp, #12]
   1e46a:	785b      	ldrb	r3, [r3, #1]
   1e46c:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   1e46e:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   1e470:	9b01      	ldr	r3, [sp, #4]
   1e472:	60b3      	str	r3, [r6, #8]
                ret++;
   1e474:	360c      	adds	r6, #12
   1e476:	e7db      	b.n	1e430 <flash_area_to_sectors+0x34>

0001e478 <flash_area_read>:
{
   1e478:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e47a:	6884      	ldr	r4, [r0, #8]
   1e47c:	428c      	cmp	r4, r1
   1e47e:	d309      	bcc.n	1e494 <flash_area_read+0x1c>
   1e480:	eb01 0c03 	add.w	ip, r1, r3
   1e484:	4564      	cmp	r4, ip
   1e486:	d308      	bcc.n	1e49a <flash_area_read+0x22>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e488:	6844      	ldr	r4, [r0, #4]
   1e48a:	4421      	add	r1, r4
   1e48c:	7840      	ldrb	r0, [r0, #1]
   1e48e:	f002 fd48 	bl	20f22 <hal_flash_read>
}
   1e492:	bd10      	pop	{r4, pc}
        return -1;
   1e494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e498:	e7fb      	b.n	1e492 <flash_area_read+0x1a>
   1e49a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e49e:	e7f8      	b.n	1e492 <flash_area_read+0x1a>

0001e4a0 <flash_area_write>:
{
   1e4a0:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e4a2:	6884      	ldr	r4, [r0, #8]
   1e4a4:	428c      	cmp	r4, r1
   1e4a6:	d309      	bcc.n	1e4bc <flash_area_write+0x1c>
   1e4a8:	eb01 0c03 	add.w	ip, r1, r3
   1e4ac:	4564      	cmp	r4, ip
   1e4ae:	d308      	bcc.n	1e4c2 <flash_area_write+0x22>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1e4b0:	6844      	ldr	r4, [r0, #4]
   1e4b2:	4421      	add	r1, r4
   1e4b4:	7840      	ldrb	r0, [r0, #1]
   1e4b6:	f002 fd5d 	bl	20f74 <hal_flash_write>
}
   1e4ba:	bd10      	pop	{r4, pc}
        return -1;
   1e4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4c0:	e7fb      	b.n	1e4ba <flash_area_write+0x1a>
   1e4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4c6:	e7f8      	b.n	1e4ba <flash_area_write+0x1a>

0001e4c8 <flash_area_erase>:
{
   1e4c8:	b508      	push	{r3, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e4ca:	6883      	ldr	r3, [r0, #8]
   1e4cc:	428b      	cmp	r3, r1
   1e4ce:	d309      	bcc.n	1e4e4 <flash_area_erase+0x1c>
   1e4d0:	eb01 0c02 	add.w	ip, r1, r2
   1e4d4:	4563      	cmp	r3, ip
   1e4d6:	d308      	bcc.n	1e4ea <flash_area_erase+0x22>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   1e4d8:	6843      	ldr	r3, [r0, #4]
   1e4da:	4419      	add	r1, r3
   1e4dc:	7840      	ldrb	r0, [r0, #1]
   1e4de:	f002 fd81 	bl	20fe4 <hal_flash_erase>
}
   1e4e2:	bd08      	pop	{r3, pc}
        return -1;
   1e4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4e8:	e7fb      	b.n	1e4e2 <flash_area_erase+0x1a>
   1e4ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4ee:	e7f8      	b.n	1e4e2 <flash_area_erase+0x1a>

0001e4f0 <flash_area_align>:
{
   1e4f0:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   1e4f2:	7840      	ldrb	r0, [r0, #1]
   1e4f4:	f002 fd05 	bl	20f02 <hal_flash_align>
}
   1e4f8:	bd08      	pop	{r3, pc}

0001e4fa <flash_area_erased_val>:
{
   1e4fa:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   1e4fc:	7840      	ldrb	r0, [r0, #1]
   1e4fe:	f002 fd08 	bl	20f12 <hal_flash_erased_val>
}
   1e502:	bd08      	pop	{r3, pc}

0001e504 <flash_area_is_empty>:
{
   1e504:	b510      	push	{r4, lr}
   1e506:	460c      	mov	r4, r1
    *empty = false;
   1e508:	2300      	movs	r3, #0
   1e50a:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   1e50c:	6882      	ldr	r2, [r0, #8]
   1e50e:	6841      	ldr	r1, [r0, #4]
   1e510:	7840      	ldrb	r0, [r0, #1]
   1e512:	f002 fe17 	bl	21144 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   1e516:	2800      	cmp	r0, #0
   1e518:	db02      	blt.n	1e520 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   1e51a:	2801      	cmp	r0, #1
   1e51c:	d001      	beq.n	1e522 <flash_area_is_empty+0x1e>
    return 0;
   1e51e:	2000      	movs	r0, #0
}
   1e520:	bd10      	pop	{r4, pc}
        *empty = true;
   1e522:	2301      	movs	r3, #1
   1e524:	7023      	strb	r3, [r4, #0]
    return 0;
   1e526:	2000      	movs	r0, #0
   1e528:	e7fa      	b.n	1e520 <flash_area_is_empty+0x1c>

0001e52a <flash_area_read_is_empty>:
{
   1e52a:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e52c:	6844      	ldr	r4, [r0, #4]
   1e52e:	4421      	add	r1, r4
   1e530:	7840      	ldrb	r0, [r0, #1]
   1e532:	f002 fdd6 	bl	210e2 <hal_flash_isempty>
}
   1e536:	bd10      	pop	{r4, pc}

0001e538 <flash_area_id_from_image_slot>:
    switch (slot) {
   1e538:	b150      	cbz	r0, 1e550 <flash_area_id_from_image_slot+0x18>
{
   1e53a:	b508      	push	{r3, lr}
    switch (slot) {
   1e53c:	2801      	cmp	r0, #1
   1e53e:	d101      	bne.n	1e544 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   1e540:	2002      	movs	r0, #2
}
   1e542:	bd08      	pop	{r3, pc}
        assert(0);
   1e544:	2300      	movs	r3, #0
   1e546:	461a      	mov	r2, r3
   1e548:	4619      	mov	r1, r3
   1e54a:	4618      	mov	r0, r3
   1e54c:	f7ee ff08 	bl	d360 <__assert_func>
    switch (slot) {
   1e550:	2001      	movs	r0, #1
}
   1e552:	4770      	bx	lr

0001e554 <flash_map_init>:

void
flash_map_init(void)
{
   1e554:	b510      	push	{r4, lr}
   1e556:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e558:	4b14      	ldr	r3, [pc, #80]	; (1e5ac <flash_map_init+0x58>)
   1e55a:	781b      	ldrb	r3, [r3, #0]
   1e55c:	b303      	cbz	r3, 1e5a0 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1e55e:	f002 fcbc 	bl	20eda <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e562:	b138      	cbz	r0, 1e574 <flash_map_init+0x20>
   1e564:	2000      	movs	r0, #0
   1e566:	9000      	str	r0, [sp, #0]
   1e568:	4b11      	ldr	r3, [pc, #68]	; (1e5b0 <flash_map_init+0x5c>)
   1e56a:	681c      	ldr	r4, [r3, #0]
   1e56c:	4603      	mov	r3, r0
   1e56e:	4602      	mov	r2, r0
   1e570:	4601      	mov	r1, r0
   1e572:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1e574:	4b0f      	ldr	r3, [pc, #60]	; (1e5b4 <flash_map_init+0x60>)
   1e576:	4a10      	ldr	r2, [pc, #64]	; (1e5b8 <flash_map_init+0x64>)
   1e578:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1e57a:	4b10      	ldr	r3, [pc, #64]	; (1e5bc <flash_map_init+0x68>)
   1e57c:	2206      	movs	r2, #6
   1e57e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1e580:	aa03      	add	r2, sp, #12
   1e582:	490f      	ldr	r1, [pc, #60]	; (1e5c0 <flash_map_init+0x6c>)
   1e584:	200a      	movs	r0, #10
   1e586:	f7ff fede 	bl	1e346 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1e58a:	b938      	cbnz	r0, 1e59c <flash_map_init+0x48>
   1e58c:	9b03      	ldr	r3, [sp, #12]
   1e58e:	2b00      	cmp	r3, #0
   1e590:	dd04      	ble.n	1e59c <flash_map_init+0x48>
        flash_map = mfg_areas;
   1e592:	4a08      	ldr	r2, [pc, #32]	; (1e5b4 <flash_map_init+0x60>)
   1e594:	490a      	ldr	r1, [pc, #40]	; (1e5c0 <flash_map_init+0x6c>)
   1e596:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1e598:	4a08      	ldr	r2, [pc, #32]	; (1e5bc <flash_map_init+0x68>)
   1e59a:	6013      	str	r3, [r2, #0]
    }
}
   1e59c:	b004      	add	sp, #16
   1e59e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e5a0:	461a      	mov	r2, r3
   1e5a2:	4619      	mov	r1, r3
   1e5a4:	4618      	mov	r0, r3
   1e5a6:	f7ee fedb 	bl	d360 <__assert_func>
   1e5aa:	bf00      	nop
   1e5ac:	20006ca8 	.word	0x20006ca8
   1e5b0:	2000143c 	.word	0x2000143c
   1e5b4:	200072e8 	.word	0x200072e8
   1e5b8:	00025a10 	.word	0x00025a10
   1e5bc:	200072ec 	.word	0x200072ec
   1e5c0:	200072f0 	.word	0x200072f0

0001e5c4 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   1e5c4:	4b05      	ldr	r3, [pc, #20]	; (1e5dc <log_registered+0x18>)
   1e5c6:	681b      	ldr	r3, [r3, #0]
   1e5c8:	e000      	b.n	1e5cc <log_registered+0x8>
   1e5ca:	68db      	ldr	r3, [r3, #12]
   1e5cc:	b11b      	cbz	r3, 1e5d6 <log_registered+0x12>
        if (cur == log) {
   1e5ce:	4283      	cmp	r3, r0
   1e5d0:	d1fb      	bne.n	1e5ca <log_registered+0x6>
            return 1;
   1e5d2:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1e5d4:	4770      	bx	lr
    return 0;
   1e5d6:	2000      	movs	r0, #0
   1e5d8:	4770      	bx	lr
   1e5da:	bf00      	nop
   1e5dc:	20001694 	.word	0x20001694

0001e5e0 <log_chk_type>:
            break;
    }
#endif

    return rc;
}
   1e5e0:	2000      	movs	r0, #0
   1e5e2:	4770      	bx	lr

0001e5e4 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   1e5e4:	8ac3      	ldrh	r3, [r0, #22]
   1e5e6:	b11b      	cbz	r3, 1e5f0 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   1e5e8:	428b      	cmp	r3, r1
   1e5ea:	d303      	bcc.n	1e5f4 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1e5ec:	2000      	movs	r0, #0
   1e5ee:	4770      	bx	lr
   1e5f0:	2000      	movs	r0, #0
   1e5f2:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   1e5f4:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   1e5f6:	4770      	bx	lr

0001e5f8 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   1e5f8:	b500      	push	{lr}
   1e5fa:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1e5fc:	6903      	ldr	r3, [r0, #16]
   1e5fe:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1e600:	9b01      	ldr	r3, [sp, #4]
   1e602:	b10b      	cbz	r3, 1e608 <log_call_append_cb+0x10>
        cb(log, idx);
   1e604:	9b01      	ldr	r3, [sp, #4]
   1e606:	4798      	blx	r3
    }
}
   1e608:	b003      	add	sp, #12
   1e60a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001e610 <log_append_prepare>:
{
   1e610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e614:	b085      	sub	sp, #20
   1e616:	4605      	mov	r5, r0
   1e618:	4688      	mov	r8, r1
   1e61a:	4614      	mov	r4, r2
   1e61c:	461f      	mov	r7, r3
   1e61e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = log_chk_type(etype);
   1e620:	4618      	mov	r0, r3
   1e622:	f7ff ffdd 	bl	1e5e0 <log_chk_type>
    assert(rc == OS_OK);
   1e626:	2800      	cmp	r0, #0
   1e628:	d136      	bne.n	1e698 <log_append_prepare+0x88>
    if (log->l_name == NULL || log->l_log == NULL) {
   1e62a:	682b      	ldr	r3, [r5, #0]
   1e62c:	2b00      	cmp	r3, #0
   1e62e:	d063      	beq.n	1e6f8 <log_append_prepare+0xe8>
   1e630:	686b      	ldr	r3, [r5, #4]
   1e632:	2b00      	cmp	r3, #0
   1e634:	d063      	beq.n	1e6fe <log_append_prepare+0xee>
    if (level > LOG_LEVEL_MAX) {
   1e636:	2c0f      	cmp	r4, #15
   1e638:	d900      	bls.n	1e63c <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1e63a:	240f      	movs	r4, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1e63c:	681b      	ldr	r3, [r3, #0]
   1e63e:	2b02      	cmp	r3, #2
   1e640:	d030      	beq.n	1e6a4 <log_append_prepare+0x94>
    if (level < log->l_level) {
   1e642:	7d2b      	ldrb	r3, [r5, #20]
   1e644:	42a3      	cmp	r3, r4
   1e646:	d85d      	bhi.n	1e704 <log_append_prepare+0xf4>
    if (level < log_level_get(module)) {
   1e648:	4640      	mov	r0, r8
   1e64a:	f000 fa7b 	bl	1eb44 <log_level_get>
   1e64e:	42a0      	cmp	r0, r4
   1e650:	d85b      	bhi.n	1e70a <log_append_prepare+0xfa>
    OS_ENTER_CRITICAL(sr);
   1e652:	f7ee fdaf 	bl	d1b4 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   1e656:	4b2e      	ldr	r3, [pc, #184]	; (1e710 <log_append_prepare+0x100>)
   1e658:	681d      	ldr	r5, [r3, #0]
   1e65a:	1c6a      	adds	r2, r5, #1
   1e65c:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1e65e:	f7ee fdaf 	bl	d1c0 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   1e662:	2100      	movs	r1, #0
   1e664:	4668      	mov	r0, sp
   1e666:	f7f0 f87f 	bl	e768 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1e66a:	4681      	mov	r9, r0
   1e66c:	b938      	cbnz	r0, 1e67e <log_append_prepare+0x6e>
   1e66e:	9800      	ldr	r0, [sp, #0]
   1e670:	9901      	ldr	r1, [sp, #4]
   1e672:	4b28      	ldr	r3, [pc, #160]	; (1e714 <log_append_prepare+0x104>)
   1e674:	4283      	cmp	r3, r0
   1e676:	f04f 0300 	mov.w	r3, #0
   1e67a:	418b      	sbcs	r3, r1
   1e67c:	db16      	blt.n	1e6ac <log_append_prepare+0x9c>
        ue->ue_ts = os_get_uptime_usec();
   1e67e:	f7f0 f917 	bl	e8b0 <os_get_uptime_usec>
   1e682:	6030      	str	r0, [r6, #0]
   1e684:	6071      	str	r1, [r6, #4]
    ue->ue_level = level;
   1e686:	7374      	strb	r4, [r6, #13]
    ue->ue_module = module;
   1e688:	f886 800c 	strb.w	r8, [r6, #12]
    ue->ue_index = idx;
   1e68c:	60b5      	str	r5, [r6, #8]
    assert(etype == LOG_ETYPE_STRING);
   1e68e:	bb6f      	cbnz	r7, 1e6ec <log_append_prepare+0xdc>
}
   1e690:	4648      	mov	r0, r9
   1e692:	b005      	add	sp, #20
   1e694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == OS_OK);
   1e698:	2300      	movs	r3, #0
   1e69a:	461a      	mov	r2, r3
   1e69c:	4619      	mov	r1, r3
   1e69e:	4618      	mov	r0, r3
   1e6a0:	f7ee fe5e 	bl	d360 <__assert_func>
        log_written = 1;
   1e6a4:	4b1c      	ldr	r3, [pc, #112]	; (1e718 <log_append_prepare+0x108>)
   1e6a6:	2201      	movs	r2, #1
   1e6a8:	701a      	strb	r2, [r3, #0]
   1e6aa:	e7ca      	b.n	1e642 <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   1e6ac:	014a      	lsls	r2, r1, #5
   1e6ae:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1e6b2:	0143      	lsls	r3, r0, #5
   1e6b4:	1a1b      	subs	r3, r3, r0
   1e6b6:	eb62 0201 	sbc.w	r2, r2, r1
   1e6ba:	0252      	lsls	r2, r2, #9
   1e6bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   1e6c0:	025b      	lsls	r3, r3, #9
   1e6c2:	181b      	adds	r3, r3, r0
   1e6c4:	eb41 0c02 	adc.w	ip, r1, r2
   1e6c8:	ea4f 1e8c 	mov.w	lr, ip, lsl #6
   1e6cc:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   1e6d0:	019a      	lsls	r2, r3, #6
   1e6d2:	1ad3      	subs	r3, r2, r3
   1e6d4:	eb6e 020c 	sbc.w	r2, lr, ip
   1e6d8:	181b      	adds	r3, r3, r0
   1e6da:	eb41 0102 	adc.w	r1, r1, r2
   1e6de:	9a02      	ldr	r2, [sp, #8]
   1e6e0:	189b      	adds	r3, r3, r2
   1e6e2:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   1e6e6:	6033      	str	r3, [r6, #0]
   1e6e8:	6071      	str	r1, [r6, #4]
   1e6ea:	e7cc      	b.n	1e686 <log_append_prepare+0x76>
    assert(etype == LOG_ETYPE_STRING);
   1e6ec:	2300      	movs	r3, #0
   1e6ee:	461a      	mov	r2, r3
   1e6f0:	4619      	mov	r1, r3
   1e6f2:	4618      	mov	r0, r3
   1e6f4:	f7ee fe34 	bl	d360 <__assert_func>
        rc = -1;
   1e6f8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e6fc:	e7c8      	b.n	1e690 <log_append_prepare+0x80>
   1e6fe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e702:	e7c5      	b.n	1e690 <log_append_prepare+0x80>
        rc = -1;
   1e704:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e708:	e7c2      	b.n	1e690 <log_append_prepare+0x80>
        rc = -1;
   1e70a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    return (rc);
   1e70e:	e7bf      	b.n	1e690 <log_append_prepare+0x80>
   1e710:	20007368 	.word	0x20007368
   1e714:	5685c17f 	.word	0x5685c17f
   1e718:	20007374 	.word	0x20007374

0001e71c <log_init>:
{
   1e71c:	b510      	push	{r4, lr}
   1e71e:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1e720:	4b11      	ldr	r3, [pc, #68]	; (1e768 <log_init+0x4c>)
   1e722:	781b      	ldrb	r3, [r3, #0]
   1e724:	b1d3      	cbz	r3, 1e75c <log_init+0x40>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   1e726:	2300      	movs	r3, #0
   1e728:	4a10      	ldr	r2, [pc, #64]	; (1e76c <log_init+0x50>)
   1e72a:	6013      	str	r3, [r2, #0]
    log_written = 0;
   1e72c:	4a10      	ldr	r2, [pc, #64]	; (1e770 <log_init+0x54>)
   1e72e:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1e730:	4a10      	ldr	r2, [pc, #64]	; (1e774 <log_init+0x58>)
   1e732:	6013      	str	r3, [r2, #0]
   1e734:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1e736:	4a10      	ldr	r2, [pc, #64]	; (1e778 <log_init+0x5c>)
   1e738:	2102      	movs	r1, #2
   1e73a:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1e73c:	6013      	str	r3, [r2, #0]
    rc = log_nmgr_register_group();
   1e73e:	f000 fe09 	bl	1f354 <log_nmgr_register_group>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e742:	b138      	cbz	r0, 1e754 <log_init+0x38>
   1e744:	2000      	movs	r0, #0
   1e746:	9000      	str	r0, [sp, #0]
   1e748:	4b0c      	ldr	r3, [pc, #48]	; (1e77c <log_init+0x60>)
   1e74a:	681c      	ldr	r4, [r3, #0]
   1e74c:	4603      	mov	r3, r0
   1e74e:	4602      	mov	r2, r0
   1e750:	4601      	mov	r1, r0
   1e752:	47a0      	blx	r4
    log_console_init();
   1e754:	f000 f9d0 	bl	1eaf8 <log_console_init>
}
   1e758:	b002      	add	sp, #8
   1e75a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e75c:	461a      	mov	r2, r3
   1e75e:	4619      	mov	r1, r3
   1e760:	4618      	mov	r0, r3
   1e762:	f7ee fdfd 	bl	d360 <__assert_func>
   1e766:	bf00      	nop
   1e768:	20006ca8 	.word	0x20006ca8
   1e76c:	20007370 	.word	0x20007370
   1e770:	20007374 	.word	0x20007374
   1e774:	20001694 	.word	0x20001694
   1e778:	20007368 	.word	0x20007368
   1e77c:	2000143c 	.word	0x2000143c

0001e780 <log_list_get_next>:
    if (log == NULL) {
   1e780:	b108      	cbz	r0, 1e786 <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   1e782:	68c0      	ldr	r0, [r0, #12]
}
   1e784:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   1e786:	4b01      	ldr	r3, [pc, #4]	; (1e78c <log_list_get_next+0xc>)
   1e788:	6818      	ldr	r0, [r3, #0]
   1e78a:	4770      	bx	lr
   1e78c:	20001694 	.word	0x20001694

0001e790 <log_module_get_name>:
    if (module < LOG_MODULE_PERUSER) {
   1e790:	283f      	cmp	r0, #63	; 0x3f
   1e792:	d81a      	bhi.n	1e7ca <log_module_get_name+0x3a>
        switch (module) {
   1e794:	2808      	cmp	r0, #8
   1e796:	d806      	bhi.n	1e7a6 <log_module_get_name+0x16>
   1e798:	e8df f000 	tbb	[pc, r0]
   1e79c:	0b09071e 	.word	0x0b09071e
   1e7a0:	13110f0d 	.word	0x13110f0d
   1e7a4:	15          	.byte	0x15
   1e7a5:	00          	.byte	0x00
   1e7a6:	2000      	movs	r0, #0
   1e7a8:	4770      	bx	lr
            return "OS";
   1e7aa:	480d      	ldr	r0, [pc, #52]	; (1e7e0 <log_module_get_name+0x50>)
   1e7ac:	4770      	bx	lr
            return "NEWTMGR";
   1e7ae:	480d      	ldr	r0, [pc, #52]	; (1e7e4 <log_module_get_name+0x54>)
   1e7b0:	4770      	bx	lr
            return "NIMBLE_CTLR";
   1e7b2:	480d      	ldr	r0, [pc, #52]	; (1e7e8 <log_module_get_name+0x58>)
   1e7b4:	4770      	bx	lr
            return "NIMBLE_HOST";
   1e7b6:	480d      	ldr	r0, [pc, #52]	; (1e7ec <log_module_get_name+0x5c>)
   1e7b8:	4770      	bx	lr
            return "NFFS";
   1e7ba:	480d      	ldr	r0, [pc, #52]	; (1e7f0 <log_module_get_name+0x60>)
   1e7bc:	4770      	bx	lr
            return "REBOOT";
   1e7be:	480d      	ldr	r0, [pc, #52]	; (1e7f4 <log_module_get_name+0x64>)
   1e7c0:	4770      	bx	lr
            return "IOTIVITY";
   1e7c2:	480d      	ldr	r0, [pc, #52]	; (1e7f8 <log_module_get_name+0x68>)
   1e7c4:	4770      	bx	lr
            return "TEST";
   1e7c6:	480d      	ldr	r0, [pc, #52]	; (1e7fc <log_module_get_name+0x6c>)
   1e7c8:	4770      	bx	lr
    } else if (module - LOG_MODULE_PERUSER < MYNEWT_VAL(LOG_MAX_USER_MODULES)) {
   1e7ca:	2840      	cmp	r0, #64	; 0x40
   1e7cc:	d806      	bhi.n	1e7dc <log_module_get_name+0x4c>
        return g_log_module_list[module - LOG_MODULE_PERUSER];
   1e7ce:	3840      	subs	r0, #64	; 0x40
   1e7d0:	4b0b      	ldr	r3, [pc, #44]	; (1e800 <log_module_get_name+0x70>)
   1e7d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e7d6:	4770      	bx	lr
            return "DEFAULT";
   1e7d8:	480a      	ldr	r0, [pc, #40]	; (1e804 <log_module_get_name+0x74>)
   1e7da:	4770      	bx	lr
    return NULL;
   1e7dc:	2000      	movs	r0, #0
}
   1e7de:	4770      	bx	lr
   1e7e0:	000257a0 	.word	0x000257a0
   1e7e4:	000257a4 	.word	0x000257a4
   1e7e8:	000257ac 	.word	0x000257ac
   1e7ec:	000257b8 	.word	0x000257b8
   1e7f0:	000257c4 	.word	0x000257c4
   1e7f4:	000257cc 	.word	0x000257cc
   1e7f8:	000257d4 	.word	0x000257d4
   1e7fc:	000257e0 	.word	0x000257e0
   1e800:	20007370 	.word	0x20007370
   1e804:	00025798 	.word	0x00025798

0001e808 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   1e808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e80c:	b087      	sub	sp, #28
   1e80e:	4604      	mov	r4, r0
   1e810:	460d      	mov	r5, r1
   1e812:	4691      	mov	r9, r2
   1e814:	461e      	mov	r6, r3
   1e816:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1e81a:	4641      	mov	r1, r8
   1e81c:	f7ff fee2 	bl	1e5e4 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   1e820:	4607      	mov	r7, r0
   1e822:	b118      	cbz	r0, 1e82c <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1e824:	4638      	mov	r0, r7
   1e826:	b007      	add	sp, #28
   1e828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1e82c:	ab02      	add	r3, sp, #8
   1e82e:	9300      	str	r3, [sp, #0]
   1e830:	4633      	mov	r3, r6
   1e832:	464a      	mov	r2, r9
   1e834:	4629      	mov	r1, r5
   1e836:	4620      	mov	r0, r4
   1e838:	f7ff feea 	bl	1e610 <log_append_prepare>
    if (rc != 0) {
   1e83c:	4607      	mov	r7, r0
   1e83e:	2800      	cmp	r0, #0
   1e840:	d1f0      	bne.n	1e824 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   1e842:	6863      	ldr	r3, [r4, #4]
   1e844:	691d      	ldr	r5, [r3, #16]
   1e846:	4643      	mov	r3, r8
   1e848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e84a:	a902      	add	r1, sp, #8
   1e84c:	4620      	mov	r0, r4
   1e84e:	47a8      	blx	r5
    if (rc != 0) {
   1e850:	4607      	mov	r7, r0
   1e852:	2800      	cmp	r0, #0
   1e854:	d1e6      	bne.n	1e824 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1e856:	9904      	ldr	r1, [sp, #16]
   1e858:	4620      	mov	r0, r4
   1e85a:	f7ff fecd 	bl	1e5f8 <log_call_append_cb>
    return 0;
   1e85e:	e7e1      	b.n	1e824 <log_append_body+0x1c>

0001e860 <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   1e860:	b408      	push	{r3}
   1e862:	b570      	push	{r4, r5, r6, lr}
   1e864:	b0a5      	sub	sp, #148	; 0x94
   1e866:	4604      	mov	r4, r0
   1e868:	460d      	mov	r5, r1
   1e86a:	4616      	mov	r6, r2
   1e86c:	ab29      	add	r3, sp, #164	; 0xa4
   1e86e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
   1e872:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   1e874:	2180      	movs	r1, #128	; 0x80
   1e876:	a803      	add	r0, sp, #12
   1e878:	f7f3 fa1e 	bl	11cb8 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
   1e87c:	287f      	cmp	r0, #127	; 0x7f
   1e87e:	dd00      	ble.n	1e882 <log_printf+0x22>
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
   1e880:	207f      	movs	r0, #127	; 0x7f
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   1e882:	b280      	uxth	r0, r0
   1e884:	9001      	str	r0, [sp, #4]
   1e886:	ab03      	add	r3, sp, #12
   1e888:	9300      	str	r3, [sp, #0]
   1e88a:	2300      	movs	r3, #0
   1e88c:	4632      	mov	r2, r6
   1e88e:	4629      	mov	r1, r5
   1e890:	4620      	mov	r0, r4
   1e892:	f7ff ffb9 	bl	1e808 <log_append_body>
}
   1e896:	b025      	add	sp, #148	; 0x94
   1e898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e89c:	b001      	add	sp, #4
   1e89e:	4770      	bx	lr

0001e8a0 <log_walk>:

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   1e8a0:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1e8a2:	6843      	ldr	r3, [r0, #4]
   1e8a4:	69db      	ldr	r3, [r3, #28]
   1e8a6:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1e8a8:	bd08      	pop	{r3, pc}
   1e8aa:	0000      	movs	r0, r0
   1e8ac:	0000      	movs	r0, r0
	...

0001e8b0 <log_read_last_hdr>:
{
   1e8b0:	b500      	push	{lr}
   1e8b2:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1e8b4:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1e8b6:	2300      	movs	r3, #0
   1e8b8:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1e8ba:	aa06      	add	r2, sp, #24
   1e8bc:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1e8be:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 1e8e8 <log_read_last_hdr+0x38>
   1e8c2:	ed8d 7b00 	vstr	d7, [sp]
    log_offset.lo_index = 0;
   1e8c6:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   1e8c8:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1e8ca:	466a      	mov	r2, sp
   1e8cc:	4908      	ldr	r1, [pc, #32]	; (1e8f0 <log_read_last_hdr+0x40>)
   1e8ce:	f7ff ffe7 	bl	1e8a0 <log_walk>
    if (!arg.read_success) {
   1e8d2:	9b07      	ldr	r3, [sp, #28]
   1e8d4:	b11b      	cbz	r3, 1e8de <log_read_last_hdr+0x2e>
    return 0;
   1e8d6:	2000      	movs	r0, #0
}
   1e8d8:	b009      	add	sp, #36	; 0x24
   1e8da:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1e8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e8e2:	e7f9      	b.n	1e8d8 <log_read_last_hdr+0x28>
   1e8e4:	f3af 8000 	nop.w
   1e8e8:	ffffffff 	.word	0xffffffff
   1e8ec:	ffffffff 	.word	0xffffffff
   1e8f0:	0001e9c1 	.word	0x0001e9c1

0001e8f4 <log_register>:
{
   1e8f4:	b530      	push	{r4, r5, lr}
   1e8f6:	b085      	sub	sp, #20
   1e8f8:	460c      	mov	r4, r1
   1e8fa:	f89d 1020 	ldrb.w	r1, [sp, #32]
    assert(!log_written);
   1e8fe:	4d1f      	ldr	r5, [pc, #124]	; (1e97c <log_register+0x88>)
   1e900:	782d      	ldrb	r5, [r5, #0]
   1e902:	bb0d      	cbnz	r5, 1e948 <log_register+0x54>
    if (level > LOG_LEVEL_MAX) {
   1e904:	290f      	cmp	r1, #15
   1e906:	d900      	bls.n	1e90a <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1e908:	210f      	movs	r1, #15
    log->l_name = name;
   1e90a:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   1e90c:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1e90e:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1e910:	7521      	strb	r1, [r4, #20]
    log->l_append_cb = NULL;
   1e912:	2300      	movs	r3, #0
   1e914:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1e916:	82e3      	strh	r3, [r4, #22]
    if (!log_registered(log)) {
   1e918:	4620      	mov	r0, r4
   1e91a:	f7ff fe53 	bl	1e5c4 <log_registered>
   1e91e:	b938      	cbnz	r0, 1e930 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1e920:	2300      	movs	r3, #0
   1e922:	60e3      	str	r3, [r4, #12]
   1e924:	4b16      	ldr	r3, [pc, #88]	; (1e980 <log_register+0x8c>)
   1e926:	685a      	ldr	r2, [r3, #4]
   1e928:	6014      	str	r4, [r2, #0]
   1e92a:	f104 020c 	add.w	r2, r4, #12
   1e92e:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1e930:	6863      	ldr	r3, [r4, #4]
   1e932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e934:	b10b      	cbz	r3, 1e93a <log_register+0x46>
        log->l_log->log_registered(log);
   1e936:	4620      	mov	r0, r4
   1e938:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1e93a:	6863      	ldr	r3, [r4, #4]
   1e93c:	681b      	ldr	r3, [r3, #0]
   1e93e:	2b02      	cmp	r3, #2
   1e940:	d008      	beq.n	1e954 <log_register+0x60>
}
   1e942:	2000      	movs	r0, #0
   1e944:	b005      	add	sp, #20
   1e946:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   1e948:	2300      	movs	r3, #0
   1e94a:	461a      	mov	r2, r3
   1e94c:	4619      	mov	r1, r3
   1e94e:	4618      	mov	r0, r3
   1e950:	f7ee fd06 	bl	d360 <__assert_func>
        rc = log_read_last_hdr(log, &hdr);
   1e954:	4669      	mov	r1, sp
   1e956:	4620      	mov	r0, r4
   1e958:	f7ff ffaa 	bl	1e8b0 <log_read_last_hdr>
        if (rc == 0) {
   1e95c:	2800      	cmp	r0, #0
   1e95e:	d1f0      	bne.n	1e942 <log_register+0x4e>
            OS_ENTER_CRITICAL(sr);
   1e960:	f7ee fc28 	bl	d1b4 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   1e964:	9b02      	ldr	r3, [sp, #8]
   1e966:	4a07      	ldr	r2, [pc, #28]	; (1e984 <log_register+0x90>)
   1e968:	6812      	ldr	r2, [r2, #0]
   1e96a:	4293      	cmp	r3, r2
   1e96c:	d302      	bcc.n	1e974 <log_register+0x80>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1e96e:	3301      	adds	r3, #1
   1e970:	4a04      	ldr	r2, [pc, #16]	; (1e984 <log_register+0x90>)
   1e972:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1e974:	f7ee fc24 	bl	d1c0 <os_arch_restore_sr>
   1e978:	e7e3      	b.n	1e942 <log_register+0x4e>
   1e97a:	bf00      	nop
   1e97c:	20007374 	.word	0x20007374
   1e980:	20001694 	.word	0x20001694
   1e984:	20007368 	.word	0x20007368

0001e988 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   1e988:	b510      	push	{r4, lr}
   1e98a:	b082      	sub	sp, #8
   1e98c:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   1e98e:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   1e990:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   1e992:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   1e994:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1e998:	6843      	ldr	r3, [r0, #4]
   1e99a:	69db      	ldr	r3, [r3, #28]
   1e99c:	4902      	ldr	r1, [pc, #8]	; (1e9a8 <log_walk_body+0x20>)
   1e99e:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1e9a0:	9b01      	ldr	r3, [sp, #4]
   1e9a2:	6123      	str	r3, [r4, #16]

    return rc;
}
   1e9a4:	b002      	add	sp, #8
   1e9a6:	bd10      	pop	{r4, pc}
   1e9a8:	0001ea05 	.word	0x0001ea05

0001e9ac <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1e9ac:	b530      	push	{r4, r5, lr}
   1e9ae:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1e9b0:	6844      	ldr	r4, [r0, #4]
   1e9b2:	6864      	ldr	r4, [r4, #4]
   1e9b4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1e9b8:	9500      	str	r5, [sp, #0]
   1e9ba:	47a0      	blx	r4

    return (rc);
}
   1e9bc:	b003      	add	sp, #12
   1e9be:	bd30      	pop	{r4, r5, pc}

0001e9c0 <log_read_hdr_walk>:
{
   1e9c0:	b510      	push	{r4, lr}
   1e9c2:	b082      	sub	sp, #8
   1e9c4:	460b      	mov	r3, r1
   1e9c6:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1e9c8:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   1e9ca:	6822      	ldr	r2, [r4, #0]
   1e9cc:	230e      	movs	r3, #14
   1e9ce:	9300      	str	r3, [sp, #0]
   1e9d0:	2300      	movs	r3, #0
   1e9d2:	f7ff ffeb 	bl	1e9ac <log_read>
    if (rc >= sizeof *arg->hdr) {
   1e9d6:	280d      	cmp	r0, #13
   1e9d8:	d901      	bls.n	1e9de <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1e9da:	2301      	movs	r3, #1
   1e9dc:	6063      	str	r3, [r4, #4]
}
   1e9de:	2001      	movs	r0, #1
   1e9e0:	b002      	add	sp, #8
   1e9e2:	bd10      	pop	{r4, pc}

0001e9e4 <log_read_hdr>:

int
log_read_hdr(struct log *log, void *dptr, struct log_entry_hdr *hdr)
{
   1e9e4:	b500      	push	{lr}
   1e9e6:	b083      	sub	sp, #12
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_ENTRY_HDR_SIZE);
   1e9e8:	230e      	movs	r3, #14
   1e9ea:	9300      	str	r3, [sp, #0]
   1e9ec:	2300      	movs	r3, #0
   1e9ee:	f7ff ffdd 	bl	1e9ac <log_read>
    if (bytes_read != LOG_ENTRY_HDR_SIZE) {
   1e9f2:	280e      	cmp	r0, #14
   1e9f4:	d103      	bne.n	1e9fe <log_read_hdr+0x1a>
        return SYS_EIO;
    }

    return 0;
   1e9f6:	2000      	movs	r0, #0
}
   1e9f8:	b003      	add	sp, #12
   1e9fa:	f85d fb04 	ldr.w	pc, [sp], #4
        return SYS_EIO;
   1e9fe:	f06f 0004 	mvn.w	r0, #4
   1ea02:	e7f9      	b.n	1e9f8 <log_read_hdr+0x14>

0001ea04 <log_walk_body_fn>:
{
   1ea04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ea08:	b087      	sub	sp, #28
   1ea0a:	4680      	mov	r8, r0
   1ea0c:	460c      	mov	r4, r1
   1ea0e:	4616      	mov	r6, r2
   1ea10:	4699      	mov	r9, r3
    lwba = log_offset->lo_arg;
   1ea12:	690f      	ldr	r7, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   1ea14:	aa02      	add	r2, sp, #8
   1ea16:	4631      	mov	r1, r6
   1ea18:	f7ff ffe4 	bl	1e9e4 <log_read_hdr>
    if (rc != 0) {
   1ea1c:	b988      	cbnz	r0, 1ea42 <log_walk_body_fn+0x3e>
    if (log_offset->lo_index <= ueh.ue_index) {
   1ea1e:	68a2      	ldr	r2, [r4, #8]
   1ea20:	9b04      	ldr	r3, [sp, #16]
   1ea22:	429a      	cmp	r2, r3
   1ea24:	d80d      	bhi.n	1ea42 <log_walk_body_fn+0x3e>
        len -= sizeof ueh;
   1ea26:	f1a9 050e 	sub.w	r5, r9, #14
   1ea2a:	b2ad      	uxth	r5, r5
        log_offset->lo_arg = lwba->arg;
   1ea2c:	687b      	ldr	r3, [r7, #4]
   1ea2e:	6123      	str	r3, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1ea30:	f8d7 9000 	ldr.w	r9, [r7]
   1ea34:	9500      	str	r5, [sp, #0]
   1ea36:	4633      	mov	r3, r6
   1ea38:	aa02      	add	r2, sp, #8
   1ea3a:	4621      	mov	r1, r4
   1ea3c:	4640      	mov	r0, r8
   1ea3e:	47c8      	blx	r9
        log_offset->lo_arg = lwba;
   1ea40:	6127      	str	r7, [r4, #16]
}
   1ea42:	b007      	add	sp, #28
   1ea44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001ea48 <log_read_body>:

int
log_read_body(struct log *log, void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   1ea48:	b510      	push	{r4, lr}
   1ea4a:	b082      	sub	sp, #8
    return log_read(log, dptr, buf, LOG_ENTRY_HDR_SIZE + off, len);
   1ea4c:	330e      	adds	r3, #14
   1ea4e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   1ea52:	9400      	str	r4, [sp, #0]
   1ea54:	b29b      	uxth	r3, r3
   1ea56:	f7ff ffa9 	bl	1e9ac <log_read>
}
   1ea5a:	b002      	add	sp, #8
   1ea5c:	bd10      	pop	{r4, pc}

0001ea5e <log_flush>:
    return log_read_mbuf(log, dptr, om, LOG_ENTRY_HDR_SIZE + off, len);
}

int
log_flush(struct log *log)
{
   1ea5e:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   1ea60:	6843      	ldr	r3, [r0, #4]
   1ea62:	6a1b      	ldr	r3, [r3, #32]
   1ea64:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1ea66:	bd08      	pop	{r3, pc}

0001ea68 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1ea68:	2002      	movs	r0, #2
   1ea6a:	4770      	bx	lr

0001ea6c <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1ea6c:	2002      	movs	r0, #2
   1ea6e:	4770      	bx	lr

0001ea70 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1ea70:	2002      	movs	r0, #2
   1ea72:	4770      	bx	lr

0001ea74 <log_console_print_hdr>:
{
   1ea74:	b500      	push	{lr}
   1ea76:	b083      	sub	sp, #12
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1ea78:	7b03      	ldrb	r3, [r0, #12]
   1ea7a:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1ea7c:	9201      	str	r2, [sp, #4]
   1ea7e:	9300      	str	r3, [sp, #0]
   1ea80:	6802      	ldr	r2, [r0, #0]
   1ea82:	6843      	ldr	r3, [r0, #4]
   1ea84:	4802      	ldr	r0, [pc, #8]	; (1ea90 <log_console_print_hdr+0x1c>)
   1ea86:	f7f4 fdff 	bl	13688 <console_printf>
}
   1ea8a:	b003      	add	sp, #12
   1ea8c:	f85d fb04 	ldr.w	pc, [sp], #4
   1ea90:	000257e8 	.word	0x000257e8

0001ea94 <log_console_append_body>:
{
   1ea94:	b570      	push	{r4, r5, r6, lr}
   1ea96:	460e      	mov	r6, r1
   1ea98:	4614      	mov	r4, r2
   1ea9a:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1ea9c:	f7f4 fd8a 	bl	135b4 <console_is_init>
   1eaa0:	b130      	cbz	r0, 1eab0 <log_console_append_body+0x1c>
    if (!console_is_midline) {
   1eaa2:	4b06      	ldr	r3, [pc, #24]	; (1eabc <log_console_append_body+0x28>)
   1eaa4:	681b      	ldr	r3, [r3, #0]
   1eaa6:	b12b      	cbz	r3, 1eab4 <log_console_append_body+0x20>
    console_write(body, body_len);
   1eaa8:	4629      	mov	r1, r5
   1eaaa:	4620      	mov	r0, r4
   1eaac:	f7f4 fbc4 	bl	13238 <console_write>
}
   1eab0:	2000      	movs	r0, #0
   1eab2:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1eab4:	4630      	mov	r0, r6
   1eab6:	f7ff ffdd 	bl	1ea74 <log_console_print_hdr>
   1eaba:	e7f5      	b.n	1eaa8 <log_console_append_body+0x14>
   1eabc:	2000683c 	.word	0x2000683c

0001eac0 <log_console_append>:
{
   1eac0:	b538      	push	{r3, r4, r5, lr}
   1eac2:	460c      	mov	r4, r1
   1eac4:	4615      	mov	r5, r2
    if (!console_is_init()) {
   1eac6:	f7f4 fd75 	bl	135b4 <console_is_init>
   1eaca:	b140      	cbz	r0, 1eade <log_console_append+0x1e>
    if (!console_is_midline) {
   1eacc:	4b07      	ldr	r3, [pc, #28]	; (1eaec <log_console_append+0x2c>)
   1eace:	681b      	ldr	r3, [r3, #0]
   1ead0:	b13b      	cbz	r3, 1eae2 <log_console_append+0x22>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   1ead2:	f1a5 010e 	sub.w	r1, r5, #14
   1ead6:	f104 000e 	add.w	r0, r4, #14
   1eada:	f7f4 fbad 	bl	13238 <console_write>
}
   1eade:	2000      	movs	r0, #0
   1eae0:	bd38      	pop	{r3, r4, r5, pc}
        log_console_print_hdr(hdr);
   1eae2:	4620      	mov	r0, r4
   1eae4:	f7ff ffc6 	bl	1ea74 <log_console_print_hdr>
   1eae8:	e7f3      	b.n	1ead2 <log_console_append+0x12>
   1eaea:	bf00      	nop
   1eaec:	2000683c 	.word	0x2000683c

0001eaf0 <log_console_get>:
}
   1eaf0:	4800      	ldr	r0, [pc, #0]	; (1eaf4 <log_console_get+0x4>)
   1eaf2:	4770      	bx	lr
   1eaf4:	20007378 	.word	0x20007378

0001eaf8 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1eaf8:	b510      	push	{r4, lr}
   1eafa:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1eafc:	4b0c      	ldr	r3, [pc, #48]	; (1eb30 <log_console_init+0x38>)
   1eafe:	781b      	ldrb	r3, [r3, #0]
   1eb00:	b18b      	cbz	r3, 1eb26 <log_console_init+0x2e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1eb02:	2300      	movs	r3, #0
   1eb04:	9300      	str	r3, [sp, #0]
   1eb06:	4a0b      	ldr	r2, [pc, #44]	; (1eb34 <log_console_init+0x3c>)
   1eb08:	490b      	ldr	r1, [pc, #44]	; (1eb38 <log_console_init+0x40>)
   1eb0a:	480c      	ldr	r0, [pc, #48]	; (1eb3c <log_console_init+0x44>)
   1eb0c:	f7ff fef2 	bl	1e8f4 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1eb10:	b138      	cbz	r0, 1eb22 <log_console_init+0x2a>
   1eb12:	2000      	movs	r0, #0
   1eb14:	9000      	str	r0, [sp, #0]
   1eb16:	4b0a      	ldr	r3, [pc, #40]	; (1eb40 <log_console_init+0x48>)
   1eb18:	681c      	ldr	r4, [r3, #0]
   1eb1a:	4603      	mov	r3, r0
   1eb1c:	4602      	mov	r2, r0
   1eb1e:	4601      	mov	r1, r0
   1eb20:	47a0      	blx	r4
}
   1eb22:	b002      	add	sp, #8
   1eb24:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1eb26:	461a      	mov	r2, r3
   1eb28:	4619      	mov	r1, r3
   1eb2a:	4618      	mov	r0, r3
   1eb2c:	f7ee fc18 	bl	d360 <__assert_func>
   1eb30:	20006ca8 	.word	0x20006ca8
   1eb34:	00025810 	.word	0x00025810
   1eb38:	20007378 	.word	0x20007378
   1eb3c:	00025808 	.word	0x00025808
   1eb40:	2000143c 	.word	0x2000143c

0001eb44 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1eb44:	0843      	lsrs	r3, r0, #1
   1eb46:	4a05      	ldr	r2, [pc, #20]	; (1eb5c <log_level_get+0x18>)
   1eb48:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1eb4a:	f010 0f01 	tst.w	r0, #1
   1eb4e:	d102      	bne.n	1eb56 <log_level_get+0x12>
        return byte & 0x0f;
   1eb50:	f003 000f 	and.w	r0, r3, #15
   1eb54:	4770      	bx	lr
    } else {
        return byte >> 4;
   1eb56:	0918      	lsrs	r0, r3, #4
    }
}
   1eb58:	4770      	bx	lr
   1eb5a:	bf00      	nop
   1eb5c:	20007390 	.word	0x20007390

0001eb60 <log_level_set>:
int
log_level_set(uint8_t module, uint8_t level)
{
    uint8_t *byte;

    if (level > LOG_LEVEL_MAX) {
   1eb60:	290f      	cmp	r1, #15
   1eb62:	d900      	bls.n	1eb66 <log_level_set+0x6>
        level = LOG_LEVEL_MAX;
   1eb64:	210f      	movs	r1, #15
    }

    byte = &log_level_map[module / 2];
   1eb66:	0843      	lsrs	r3, r0, #1
    if (module % 2 == 0) {
   1eb68:	f010 0f01 	tst.w	r0, #1
   1eb6c:	d107      	bne.n	1eb7e <log_level_set+0x1e>
        *byte = (*byte & 0xf0) | level;
   1eb6e:	4808      	ldr	r0, [pc, #32]	; (1eb90 <log_level_set+0x30>)
   1eb70:	56c2      	ldrsb	r2, [r0, r3]
   1eb72:	f022 020f 	bic.w	r2, r2, #15
   1eb76:	4311      	orrs	r1, r2
   1eb78:	54c1      	strb	r1, [r0, r3]
    } else {
        *byte = (*byte & 0x0f) | (level << 4);
    }

    return 0;
}
   1eb7a:	2000      	movs	r0, #0
   1eb7c:	4770      	bx	lr
        *byte = (*byte & 0x0f) | (level << 4);
   1eb7e:	4804      	ldr	r0, [pc, #16]	; (1eb90 <log_level_set+0x30>)
   1eb80:	56c2      	ldrsb	r2, [r0, r3]
   1eb82:	f002 020f 	and.w	r2, r2, #15
   1eb86:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
   1eb8a:	54c1      	strb	r1, [r0, r3]
   1eb8c:	e7f5      	b.n	1eb7a <log_level_set+0x1a>
   1eb8e:	bf00      	nop
   1eb90:	20007390 	.word	0x20007390

0001eb94 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   1eb94:	6843      	ldr	r3, [r0, #4]
   1eb96:	4413      	add	r3, r2
   1eb98:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   1eb9a:	2000      	movs	r0, #0
   1eb9c:	4770      	bx	lr

0001eb9e <log_nmgr_clear>:
 * @param nmgr json buffer
 * @return 0 on success; non-zero on failure
 */
static int
log_nmgr_clear(struct mgmt_cbuf *cb)
{
   1eb9e:	b538      	push	{r3, r4, r5, lr}
   1eba0:	4605      	mov	r5, r0
    struct log *log;
    int rc;

    log = NULL;
   1eba2:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1eba4:	4620      	mov	r0, r4
   1eba6:	f7ff fdeb 	bl	1e780 <log_list_get_next>
        if (log == NULL) {
   1ebaa:	4604      	mov	r4, r0
   1ebac:	b148      	cbz	r0, 1ebc2 <log_nmgr_clear+0x24>
            break;
        }

        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1ebae:	6843      	ldr	r3, [r0, #4]
   1ebb0:	681b      	ldr	r3, [r3, #0]
   1ebb2:	2b00      	cmp	r3, #0
   1ebb4:	d0f6      	beq.n	1eba4 <log_nmgr_clear+0x6>
            continue;
        }

        rc = log_flush(log);
   1ebb6:	f7ff ff52 	bl	1ea5e <log_flush>
        if (rc) {
   1ebba:	4603      	mov	r3, r0
   1ebbc:	2800      	cmp	r0, #0
   1ebbe:	d0f1      	beq.n	1eba4 <log_nmgr_clear+0x6>
   1ebc0:	e004      	b.n	1ebcc <log_nmgr_clear+0x2e>
            return rc;
        }
    }

    rc = mgmt_cbuf_setoerr(cb, 0);
   1ebc2:	2100      	movs	r1, #0
   1ebc4:	4628      	mov	r0, r5
   1ebc6:	f7fe fd07 	bl	1d5d8 <mgmt_cbuf_setoerr>
   1ebca:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1ebcc:	4618      	mov	r0, r3
   1ebce:	bd38      	pop	{r3, r4, r5, pc}

0001ebd0 <log_nmgr_logs_list>:
{
   1ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebd2:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ebd4:	f100 070c 	add.w	r7, r0, #12
   1ebd8:	2202      	movs	r2, #2
   1ebda:	491c      	ldr	r1, [pc, #112]	; (1ec4c <log_nmgr_logs_list+0x7c>)
   1ebdc:	4638      	mov	r0, r7
   1ebde:	f7f8 f92c 	bl	16e3a <cbor_encode_text_string>
   1ebe2:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ebe4:	2200      	movs	r2, #0
   1ebe6:	2300      	movs	r3, #0
   1ebe8:	4638      	mov	r0, r7
   1ebea:	f7f8 f8ab 	bl	16d44 <cbor_encode_int>
   1ebee:	4305      	orrs	r5, r0
   1ebf0:	2208      	movs	r2, #8
   1ebf2:	4917      	ldr	r1, [pc, #92]	; (1ec50 <log_nmgr_logs_list+0x80>)
   1ebf4:	4638      	mov	r0, r7
   1ebf6:	f7f8 f920 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "log_list");
   1ebfa:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &log_list,
   1ebfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec00:	4669      	mov	r1, sp
   1ec02:	4638      	mov	r0, r7
   1ec04:	f7f8 f920 	bl	16e48 <cbor_encoder_create_array>
   1ec08:	4305      	orrs	r5, r0
    log = NULL;
   1ec0a:	2400      	movs	r4, #0
        log = log_list_get_next(log);
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	f7ff fdb7 	bl	1e780 <log_list_get_next>
        if (!log) {
   1ec12:	4604      	mov	r4, r0
   1ec14:	b170      	cbz	r0, 1ec34 <log_nmgr_logs_list+0x64>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1ec16:	6843      	ldr	r3, [r0, #4]
   1ec18:	681b      	ldr	r3, [r3, #0]
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	d0f6      	beq.n	1ec0c <log_nmgr_logs_list+0x3c>
        g_err |= cbor_encode_text_stringz(&log_list, log->l_name);
   1ec1e:	6806      	ldr	r6, [r0, #0]
   1ec20:	4630      	mov	r0, r6
   1ec22:	f7fd fd5d 	bl	1c6e0 <strlen>
   1ec26:	4602      	mov	r2, r0
   1ec28:	4631      	mov	r1, r6
   1ec2a:	4668      	mov	r0, sp
   1ec2c:	f7f8 f905 	bl	16e3a <cbor_encode_text_string>
   1ec30:	4305      	orrs	r5, r0
   1ec32:	e7eb      	b.n	1ec0c <log_nmgr_logs_list+0x3c>
    g_err |= cbor_encoder_close_container(&cb->encoder, &log_list);
   1ec34:	4669      	mov	r1, sp
   1ec36:	4638      	mov	r0, r7
   1ec38:	f7f8 f919 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   1ec3c:	ea55 0300 	orrs.w	r3, r5, r0
   1ec40:	d102      	bne.n	1ec48 <log_nmgr_logs_list+0x78>
    return (0);
   1ec42:	2000      	movs	r0, #0
}
   1ec44:	b005      	add	sp, #20
   1ec46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ec48:	2002      	movs	r0, #2
   1ec4a:	e7fb      	b.n	1ec44 <log_nmgr_logs_list+0x74>
   1ec4c:	000242b8 	.word	0x000242b8
   1ec50:	00025838 	.word	0x00025838

0001ec54 <log_nmgr_module_list>:
{
   1ec54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec56:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ec58:	f100 060c 	add.w	r6, r0, #12
   1ec5c:	2202      	movs	r2, #2
   1ec5e:	491f      	ldr	r1, [pc, #124]	; (1ecdc <log_nmgr_module_list+0x88>)
   1ec60:	4630      	mov	r0, r6
   1ec62:	f7f8 f8ea 	bl	16e3a <cbor_encode_text_string>
   1ec66:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ec68:	2200      	movs	r2, #0
   1ec6a:	2300      	movs	r3, #0
   1ec6c:	4630      	mov	r0, r6
   1ec6e:	f7f8 f869 	bl	16d44 <cbor_encode_int>
   1ec72:	4305      	orrs	r5, r0
   1ec74:	220a      	movs	r2, #10
   1ec76:	491a      	ldr	r1, [pc, #104]	; (1ece0 <log_nmgr_module_list+0x8c>)
   1ec78:	4630      	mov	r0, r6
   1ec7a:	f7f8 f8de 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "module_map");
   1ec7e:	4305      	orrs	r5, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &modules,
   1ec80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ec84:	4669      	mov	r1, sp
   1ec86:	4630      	mov	r0, r6
   1ec88:	f7f8 f8e3 	bl	16e52 <cbor_encoder_create_map>
   1ec8c:	4305      	orrs	r5, r0
    module = LOG_MODULE_DEFAULT;
   1ec8e:	2400      	movs	r4, #0
    while (module < LOG_MODULE_MAX) {
   1ec90:	e000      	b.n	1ec94 <log_nmgr_module_list+0x40>
            module++;
   1ec92:	3401      	adds	r4, #1
    while (module < LOG_MODULE_MAX) {
   1ec94:	2cfe      	cmp	r4, #254	; 0xfe
   1ec96:	dc15      	bgt.n	1ecc4 <log_nmgr_module_list+0x70>
        str = LOG_MODULE_STR(module);
   1ec98:	b2e0      	uxtb	r0, r4
   1ec9a:	f7ff fd79 	bl	1e790 <log_module_get_name>
        if (!str) {
   1ec9e:	4607      	mov	r7, r0
   1eca0:	2800      	cmp	r0, #0
   1eca2:	d0f6      	beq.n	1ec92 <log_nmgr_module_list+0x3e>
   1eca4:	f7fd fd1c 	bl	1c6e0 <strlen>
   1eca8:	4602      	mov	r2, r0
   1ecaa:	4639      	mov	r1, r7
   1ecac:	4668      	mov	r0, sp
   1ecae:	f7f8 f8c4 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&modules, str);
   1ecb2:	4305      	orrs	r5, r0
        g_err |= cbor_encode_uint(&modules, module);
   1ecb4:	4622      	mov	r2, r4
   1ecb6:	17e3      	asrs	r3, r4, #31
   1ecb8:	4668      	mov	r0, sp
   1ecba:	f7f8 f803 	bl	16cc4 <cbor_encode_uint>
   1ecbe:	4305      	orrs	r5, r0
        module++;
   1ecc0:	3401      	adds	r4, #1
   1ecc2:	e7e7      	b.n	1ec94 <log_nmgr_module_list+0x40>
    g_err |= cbor_encoder_close_container(&cb->encoder, &modules);
   1ecc4:	4669      	mov	r1, sp
   1ecc6:	4630      	mov	r0, r6
   1ecc8:	f7f8 f8d1 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   1eccc:	ea55 0300 	orrs.w	r3, r5, r0
   1ecd0:	d102      	bne.n	1ecd8 <log_nmgr_module_list+0x84>
    return (0);
   1ecd2:	2000      	movs	r0, #0
}
   1ecd4:	b005      	add	sp, #20
   1ecd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ecd8:	2002      	movs	r0, #2
   1ecda:	e7fb      	b.n	1ecd4 <log_nmgr_module_list+0x80>
   1ecdc:	000242b8 	.word	0x000242b8
   1ece0:	00025844 	.word	0x00025844

0001ece4 <log_nmgr_level_list>:
{
   1ece4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ece6:	b085      	sub	sp, #20
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ece8:	f100 070c 	add.w	r7, r0, #12
   1ecec:	2202      	movs	r2, #2
   1ecee:	492a      	ldr	r1, [pc, #168]	; (1ed98 <log_nmgr_level_list+0xb4>)
   1ecf0:	4638      	mov	r0, r7
   1ecf2:	f7f8 f8a2 	bl	16e3a <cbor_encode_text_string>
   1ecf6:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1ecf8:	2200      	movs	r2, #0
   1ecfa:	2300      	movs	r3, #0
   1ecfc:	4638      	mov	r0, r7
   1ecfe:	f7f8 f821 	bl	16d44 <cbor_encode_int>
   1ed02:	4306      	orrs	r6, r0
   1ed04:	2209      	movs	r2, #9
   1ed06:	4925      	ldr	r1, [pc, #148]	; (1ed9c <log_nmgr_level_list+0xb8>)
   1ed08:	4638      	mov	r0, r7
   1ed0a:	f7f8 f896 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level_map");
   1ed0e:	4306      	orrs	r6, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &level_map,
   1ed10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ed14:	4669      	mov	r1, sp
   1ed16:	4638      	mov	r0, r7
   1ed18:	f7f8 f89b 	bl	16e52 <cbor_encoder_create_map>
   1ed1c:	4306      	orrs	r6, r0
    level = LOG_LEVEL_DEBUG;
   1ed1e:	2400      	movs	r4, #0
    while (level < LOG_LEVEL_MAX) {
   1ed20:	e008      	b.n	1ed34 <log_nmgr_level_list+0x50>
        str = LOG_LEVEL_STR(level);
   1ed22:	4d1f      	ldr	r5, [pc, #124]	; (1eda0 <log_nmgr_level_list+0xbc>)
   1ed24:	e000      	b.n	1ed28 <log_nmgr_level_list+0x44>
   1ed26:	4d1f      	ldr	r5, [pc, #124]	; (1eda4 <log_nmgr_level_list+0xc0>)
        if (!strcmp(str, "UNKNOWN")) {
   1ed28:	491f      	ldr	r1, [pc, #124]	; (1eda8 <log_nmgr_level_list+0xc4>)
   1ed2a:	4628      	mov	r0, r5
   1ed2c:	f7f2 fbd2 	bl	114d4 <strcmp>
   1ed30:	b9a0      	cbnz	r0, 1ed5c <log_nmgr_level_list+0x78>
            level++;
   1ed32:	3401      	adds	r4, #1
    while (level < LOG_LEVEL_MAX) {
   1ed34:	2c0e      	cmp	r4, #14
   1ed36:	dc22      	bgt.n	1ed7e <log_nmgr_level_list+0x9a>
        str = LOG_LEVEL_STR(level);
   1ed38:	2c00      	cmp	r4, #0
   1ed3a:	d0f4      	beq.n	1ed26 <log_nmgr_level_list+0x42>
   1ed3c:	2c01      	cmp	r4, #1
   1ed3e:	d007      	beq.n	1ed50 <log_nmgr_level_list+0x6c>
   1ed40:	2c02      	cmp	r4, #2
   1ed42:	d007      	beq.n	1ed54 <log_nmgr_level_list+0x70>
   1ed44:	2c03      	cmp	r4, #3
   1ed46:	d007      	beq.n	1ed58 <log_nmgr_level_list+0x74>
   1ed48:	2c04      	cmp	r4, #4
   1ed4a:	d0ea      	beq.n	1ed22 <log_nmgr_level_list+0x3e>
   1ed4c:	4d16      	ldr	r5, [pc, #88]	; (1eda8 <log_nmgr_level_list+0xc4>)
   1ed4e:	e7eb      	b.n	1ed28 <log_nmgr_level_list+0x44>
   1ed50:	4d16      	ldr	r5, [pc, #88]	; (1edac <log_nmgr_level_list+0xc8>)
   1ed52:	e7e9      	b.n	1ed28 <log_nmgr_level_list+0x44>
   1ed54:	4d16      	ldr	r5, [pc, #88]	; (1edb0 <log_nmgr_level_list+0xcc>)
   1ed56:	e7e7      	b.n	1ed28 <log_nmgr_level_list+0x44>
   1ed58:	4d16      	ldr	r5, [pc, #88]	; (1edb4 <log_nmgr_level_list+0xd0>)
   1ed5a:	e7e5      	b.n	1ed28 <log_nmgr_level_list+0x44>
   1ed5c:	4628      	mov	r0, r5
   1ed5e:	f7fd fcbf 	bl	1c6e0 <strlen>
   1ed62:	4602      	mov	r2, r0
   1ed64:	4629      	mov	r1, r5
   1ed66:	4668      	mov	r0, sp
   1ed68:	f7f8 f867 	bl	16e3a <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&level_map, str);
   1ed6c:	4306      	orrs	r6, r0
        g_err |= cbor_encode_uint(&level_map, level);
   1ed6e:	4622      	mov	r2, r4
   1ed70:	17e3      	asrs	r3, r4, #31
   1ed72:	4668      	mov	r0, sp
   1ed74:	f7f7 ffa6 	bl	16cc4 <cbor_encode_uint>
   1ed78:	4306      	orrs	r6, r0
        level++;
   1ed7a:	3401      	adds	r4, #1
   1ed7c:	e7da      	b.n	1ed34 <log_nmgr_level_list+0x50>
    g_err |= cbor_encoder_close_container(&cb->encoder, &level_map);
   1ed7e:	4669      	mov	r1, sp
   1ed80:	4638      	mov	r0, r7
   1ed82:	f7f8 f874 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   1ed86:	ea56 0300 	orrs.w	r3, r6, r0
   1ed8a:	d102      	bne.n	1ed92 <log_nmgr_level_list+0xae>
    return (0);
   1ed8c:	2000      	movs	r0, #0
}
   1ed8e:	b005      	add	sp, #20
   1ed90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1ed92:	2002      	movs	r0, #2
   1ed94:	e7fb      	b.n	1ed8e <log_nmgr_level_list+0xaa>
   1ed96:	bf00      	nop
   1ed98:	000242b8 	.word	0x000242b8
   1ed9c:	00025884 	.word	0x00025884
   1eda0:	00025878 	.word	0x00025878
   1eda4:	00025850 	.word	0x00025850
   1eda8:	00025870 	.word	0x00025870
   1edac:	00025860 	.word	0x00025860
   1edb0:	00025868 	.word	0x00025868
   1edb4:	00025858 	.word	0x00025858

0001edb8 <log_nmgr_modlevel_set>:
{
   1edb8:	b570      	push	{r4, r5, r6, lr}
   1edba:	b0b4      	sub	sp, #208	; 0xd0
   1edbc:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1edbe:	22c0      	movs	r2, #192	; 0xc0
   1edc0:	2100      	movs	r1, #0
   1edc2:	4668      	mov	r0, sp
   1edc4:	f7f2 fb65 	bl	11492 <memset>
   1edc8:	4b15      	ldr	r3, [pc, #84]	; (1ee20 <log_nmgr_modlevel_set+0x68>)
   1edca:	9300      	str	r3, [sp, #0]
   1edcc:	2302      	movs	r3, #2
   1edce:	f88d 3004 	strb.w	r3, [sp, #4]
   1edd2:	aa30      	add	r2, sp, #192	; 0xc0
   1edd4:	9202      	str	r2, [sp, #8]
   1edd6:	4a13      	ldr	r2, [pc, #76]	; (1ee24 <log_nmgr_modlevel_set+0x6c>)
   1edd8:	920c      	str	r2, [sp, #48]	; 0x30
   1edda:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1edde:	ab32      	add	r3, sp, #200	; 0xc8
   1ede0:	930e      	str	r3, [sp, #56]	; 0x38
    rc = cbor_read_object(&cb->it, attr);
   1ede2:	4669      	mov	r1, sp
   1ede4:	f104 001c 	add.w	r0, r4, #28
   1ede8:	f7f7 fe40 	bl	16a6c <cbor_read_object>
    if (rc) {
   1edec:	4605      	mov	r5, r0
   1edee:	b110      	cbz	r0, 1edf6 <log_nmgr_modlevel_set+0x3e>
}
   1edf0:	4628      	mov	r0, r5
   1edf2:	b034      	add	sp, #208	; 0xd0
   1edf4:	bd70      	pop	{r4, r5, r6, pc}
    rc = log_level_set(module, level);
   1edf6:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
   1edfa:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1edfe:	f7ff feaf 	bl	1eb60 <log_level_set>
    if (rc) {
   1ee02:	4606      	mov	r6, r0
   1ee04:	b100      	cbz	r0, 1ee08 <log_nmgr_modlevel_set+0x50>
        rc = MGMT_ERR_EINVAL;
   1ee06:	2603      	movs	r6, #3
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1ee08:	340c      	adds	r4, #12
   1ee0a:	2202      	movs	r2, #2
   1ee0c:	4906      	ldr	r1, [pc, #24]	; (1ee28 <log_nmgr_modlevel_set+0x70>)
   1ee0e:	4620      	mov	r0, r4
   1ee10:	f7f8 f813 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1ee14:	4632      	mov	r2, r6
   1ee16:	17f3      	asrs	r3, r6, #31
   1ee18:	4620      	mov	r0, r4
   1ee1a:	f7f7 ff93 	bl	16d44 <cbor_encode_int>
    return (rc);
   1ee1e:	e7e7      	b.n	1edf0 <log_nmgr_modlevel_set+0x38>
   1ee20:	00025890 	.word	0x00025890
   1ee24:	0002589c 	.word	0x0002589c
   1ee28:	000242b8 	.word	0x000242b8

0001ee2c <log_nmgr_modlevel_get>:
{
   1ee2c:	b570      	push	{r4, r5, r6, lr}
   1ee2e:	b0b2      	sub	sp, #200	; 0xc8
   1ee30:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[4] = {
   1ee32:	22c0      	movs	r2, #192	; 0xc0
   1ee34:	2100      	movs	r1, #0
   1ee36:	4668      	mov	r0, sp
   1ee38:	f7f2 fb2b 	bl	11492 <memset>
   1ee3c:	4b15      	ldr	r3, [pc, #84]	; (1ee94 <log_nmgr_modlevel_get+0x68>)
   1ee3e:	9300      	str	r3, [sp, #0]
   1ee40:	2302      	movs	r3, #2
   1ee42:	f88d 3004 	strb.w	r3, [sp, #4]
   1ee46:	ab30      	add	r3, sp, #192	; 0xc0
   1ee48:	9302      	str	r3, [sp, #8]
    rc = cbor_read_object(&cb->it, attr);
   1ee4a:	4669      	mov	r1, sp
   1ee4c:	f104 001c 	add.w	r0, r4, #28
   1ee50:	f7f7 fe0c 	bl	16a6c <cbor_read_object>
    if (rc) {
   1ee54:	4605      	mov	r5, r0
   1ee56:	b110      	cbz	r0, 1ee5e <log_nmgr_modlevel_get+0x32>
}
   1ee58:	4628      	mov	r0, r5
   1ee5a:	b032      	add	sp, #200	; 0xc8
   1ee5c:	bd70      	pop	{r4, r5, r6, pc}
    level = log_level_get(module);
   1ee5e:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   1ee62:	f7ff fe6f 	bl	1eb44 <log_level_get>
   1ee66:	4606      	mov	r6, r0
    g_err |= cbor_encode_text_stringz(&cb->encoder, "level");
   1ee68:	340c      	adds	r4, #12
   1ee6a:	2205      	movs	r2, #5
   1ee6c:	490a      	ldr	r1, [pc, #40]	; (1ee98 <log_nmgr_modlevel_get+0x6c>)
   1ee6e:	4620      	mov	r0, r4
   1ee70:	f7f7 ffe3 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_uint(&cb->encoder, level);
   1ee74:	4632      	mov	r2, r6
   1ee76:	2300      	movs	r3, #0
   1ee78:	4620      	mov	r0, r4
   1ee7a:	f7f7 ff23 	bl	16cc4 <cbor_encode_uint>
   1ee7e:	2202      	movs	r2, #2
   1ee80:	4906      	ldr	r1, [pc, #24]	; (1ee9c <log_nmgr_modlevel_get+0x70>)
   1ee82:	4620      	mov	r0, r4
   1ee84:	f7f7 ffd9 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1ee88:	462a      	mov	r2, r5
   1ee8a:	17eb      	asrs	r3, r5, #31
   1ee8c:	4620      	mov	r0, r4
   1ee8e:	f7f7 ff59 	bl	16d44 <cbor_encode_int>
    return (rc);
   1ee92:	e7e1      	b.n	1ee58 <log_nmgr_modlevel_get+0x2c>
   1ee94:	00025890 	.word	0x00025890
   1ee98:	0002589c 	.word	0x0002589c
   1ee9c:	000242b8 	.word	0x000242b8

0001eea0 <log_encode_entries>:
{
   1eea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eea4:	b093      	sub	sp, #76	; 0x4c
   1eea6:	4606      	mov	r6, r0
   1eea8:	460c      	mov	r4, r1
   1eeaa:	4690      	mov	r8, r2
   1eeac:	461f      	mov	r7, r3
    memset(&log_offset, 0, sizeof(log_offset));
   1eeae:	2200      	movs	r2, #0
   1eeb0:	920c      	str	r2, [sp, #48]	; 0x30
   1eeb2:	920d      	str	r2, [sp, #52]	; 0x34
   1eeb4:	920e      	str	r2, [sp, #56]	; 0x38
   1eeb6:	920f      	str	r2, [sp, #60]	; 0x3c
   1eeb8:	9210      	str	r2, [sp, #64]	; 0x40
   1eeba:	9211      	str	r2, [sp, #68]	; 0x44

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   1eebc:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1eebe:	4b23      	ldr	r3, [pc, #140]	; (1ef4c <log_encode_entries+0xac>)
   1eec0:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1eec2:	a906      	add	r1, sp, #24
   1eec4:	a802      	add	r0, sp, #8
   1eec6:	f7f7 fef8 	bl	16cba <cbor_encoder_init>
   1eeca:	2207      	movs	r2, #7
   1eecc:	4920      	ldr	r1, [pc, #128]	; (1ef50 <log_encode_entries+0xb0>)
   1eece:	a802      	add	r0, sp, #8
   1eed0:	f7f7 ffb3 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   1eed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eed8:	a908      	add	r1, sp, #32
   1eeda:	a802      	add	r0, sp, #8
   1eedc:	f7f7 ffb4 	bl	16e48 <cbor_encoder_create_array>
    g_err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   1eee0:	a908      	add	r1, sp, #32
   1eee2:	a802      	add	r0, sp, #8
   1eee4:	f7f7 ffc3 	bl	16e6e <cbor_encoder_close_container>
{   return encoder->writer->bytes_written; }
   1eee8:	6823      	ldr	r3, [r4, #0]
   1eeea:	685b      	ldr	r3, [r3, #4]
   1eeec:	9a02      	ldr	r2, [sp, #8]
   1eeee:	6855      	ldr	r5, [r2, #4]
    rsp_len = cbor_encode_bytes_written(cb) +
   1eef0:	441d      	add	r5, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1eef2:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
   1eef6:	dd04      	ble.n	1ef02 <log_encode_entries+0x62>
        rc = OS_ENOMEM;
   1eef8:	2501      	movs	r5, #1
}
   1eefa:	4628      	mov	r0, r5
   1eefc:	b013      	add	sp, #76	; 0x4c
   1eefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ef02:	2207      	movs	r2, #7
   1ef04:	4912      	ldr	r1, [pc, #72]	; (1ef50 <log_encode_entries+0xb0>)
   1ef06:	4620      	mov	r0, r4
   1ef08:	f7f7 ff97 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encoder_create_array(cb, &entries, CborIndefiniteLength);
   1ef0c:	f10d 0920 	add.w	r9, sp, #32
   1ef10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ef14:	4649      	mov	r1, r9
   1ef16:	4620      	mov	r0, r4
   1ef18:	f7f7 ff96 	bl	16e48 <cbor_encoder_create_array>
    ed.counter = 0;
   1ef1c:	2300      	movs	r3, #0
   1ef1e:	9300      	str	r3, [sp, #0]
    ed.enc = &entries;
   1ef20:	f8cd 9004 	str.w	r9, [sp, #4]
    log_offset.lo_arg       = &ed;
   1ef24:	f8cd d040 	str.w	sp, [sp, #64]	; 0x40
    log_offset.lo_index     = index;
   1ef28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1ef2a:	930e      	str	r3, [sp, #56]	; 0x38
    log_offset.lo_ts        = ts;
   1ef2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1ef30:	970d      	str	r7, [sp, #52]	; 0x34
    log_offset.lo_data_len  = rsp_len;
   1ef32:	950f      	str	r5, [sp, #60]	; 0x3c
    rc = log_walk_body(log, log_nmgr_encode_entry, &log_offset);
   1ef34:	aa0c      	add	r2, sp, #48	; 0x30
   1ef36:	4907      	ldr	r1, [pc, #28]	; (1ef54 <log_encode_entries+0xb4>)
   1ef38:	4630      	mov	r0, r6
   1ef3a:	f7ff fd25 	bl	1e988 <log_walk_body>
   1ef3e:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &entries);
   1ef40:	4649      	mov	r1, r9
   1ef42:	4620      	mov	r0, r4
   1ef44:	f7f7 ff93 	bl	16e6e <cbor_encoder_close_container>
   1ef48:	e7d7      	b.n	1eefa <log_encode_entries+0x5a>
   1ef4a:	bf00      	nop
   1ef4c:	0001eb95 	.word	0x0001eb95
   1ef50:	000258a4 	.word	0x000258a4
   1ef54:	0001f11d 	.word	0x0001f11d

0001ef58 <log_encode>:
{
   1ef58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ef5c:	b087      	sub	sp, #28
   1ef5e:	4605      	mov	r5, r0
   1ef60:	460e      	mov	r6, r1
   1ef62:	4690      	mov	r8, r2
   1ef64:	461f      	mov	r7, r3
    g_err |= cbor_encoder_create_map(cb, &logs, CborIndefiniteLength);
   1ef66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ef6a:	a902      	add	r1, sp, #8
   1ef6c:	4630      	mov	r0, r6
   1ef6e:	f7f7 ff70 	bl	16e52 <cbor_encoder_create_map>
   1ef72:	4604      	mov	r4, r0
   1ef74:	2204      	movs	r2, #4
   1ef76:	4919      	ldr	r1, [pc, #100]	; (1efdc <log_encode+0x84>)
   1ef78:	a802      	add	r0, sp, #8
   1ef7a:	f7f7 ff5e 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "name");
   1ef7e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_text_stringz(&logs, log->l_name);
   1ef80:	f8d5 9000 	ldr.w	r9, [r5]
   1ef84:	4648      	mov	r0, r9
   1ef86:	f7fd fbab 	bl	1c6e0 <strlen>
   1ef8a:	4602      	mov	r2, r0
   1ef8c:	4649      	mov	r1, r9
   1ef8e:	a802      	add	r0, sp, #8
   1ef90:	f7f7 ff53 	bl	16e3a <cbor_encode_text_string>
   1ef94:	4304      	orrs	r4, r0
   1ef96:	2204      	movs	r2, #4
   1ef98:	4911      	ldr	r1, [pc, #68]	; (1efe0 <log_encode+0x88>)
   1ef9a:	a802      	add	r0, sp, #8
   1ef9c:	f7f7 ff4d 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&logs, "type");
   1efa0:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&logs, log->l_log->log_type);
   1efa2:	686b      	ldr	r3, [r5, #4]
   1efa4:	681a      	ldr	r2, [r3, #0]
   1efa6:	17d3      	asrs	r3, r2, #31
   1efa8:	a802      	add	r0, sp, #8
   1efaa:	f7f7 fe8b 	bl	16cc4 <cbor_encode_uint>
   1efae:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, ts, index);
   1efb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1efb2:	9300      	str	r3, [sp, #0]
   1efb4:	4642      	mov	r2, r8
   1efb6:	463b      	mov	r3, r7
   1efb8:	a902      	add	r1, sp, #8
   1efba:	4628      	mov	r0, r5
   1efbc:	f7ff ff70 	bl	1eea0 <log_encode_entries>
   1efc0:	4605      	mov	r5, r0
    g_err |= cbor_encoder_close_container(cb, &logs);
   1efc2:	a902      	add	r1, sp, #8
   1efc4:	4630      	mov	r0, r6
   1efc6:	f7f7 ff52 	bl	16e6e <cbor_encoder_close_container>
    if (g_err) {
   1efca:	ea54 0300 	orrs.w	r3, r4, r0
   1efce:	d103      	bne.n	1efd8 <log_encode+0x80>
}
   1efd0:	4628      	mov	r0, r5
   1efd2:	b007      	add	sp, #28
   1efd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return MGMT_ERR_ENOMEM;
   1efd8:	2502      	movs	r5, #2
   1efda:	e7f9      	b.n	1efd0 <log_encode+0x78>
   1efdc:	000258b8 	.word	0x000258b8
   1efe0:	000258ac 	.word	0x000258ac

0001efe4 <log_nmgr_read>:
{
   1efe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1efe8:	b0cb      	sub	sp, #300	; 0x12c
   1efea:	4606      	mov	r6, r0
    char name[LOG_NAME_MAX_LEN] = {0};
   1efec:	2400      	movs	r4, #0
   1efee:	943a      	str	r4, [sp, #232]	; 0xe8
   1eff0:	223c      	movs	r2, #60	; 0x3c
   1eff2:	4621      	mov	r1, r4
   1eff4:	a83b      	add	r0, sp, #236	; 0xec
   1eff6:	f7f2 fa4c 	bl	11492 <memset>
    const struct cbor_attr_t attr[4] = {
   1effa:	22c0      	movs	r2, #192	; 0xc0
   1effc:	4621      	mov	r1, r4
   1effe:	a802      	add	r0, sp, #8
   1f000:	f7f2 fa47 	bl	11492 <memset>
   1f004:	4b3e      	ldr	r3, [pc, #248]	; (1f100 <log_nmgr_read+0x11c>)
   1f006:	9302      	str	r3, [sp, #8]
   1f008:	2304      	movs	r3, #4
   1f00a:	f88d 300c 	strb.w	r3, [sp, #12]
   1f00e:	ab3a      	add	r3, sp, #232	; 0xe8
   1f010:	9304      	str	r3, [sp, #16]
   1f012:	2340      	movs	r3, #64	; 0x40
   1f014:	930c      	str	r3, [sp, #48]	; 0x30
   1f016:	4b3b      	ldr	r3, [pc, #236]	; (1f104 <log_nmgr_read+0x120>)
   1f018:	930e      	str	r3, [sp, #56]	; 0x38
   1f01a:	2301      	movs	r3, #1
   1f01c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   1f020:	ab38      	add	r3, sp, #224	; 0xe0
   1f022:	9310      	str	r3, [sp, #64]	; 0x40
   1f024:	4b38      	ldr	r3, [pc, #224]	; (1f108 <log_nmgr_read+0x124>)
   1f026:	931a      	str	r3, [sp, #104]	; 0x68
   1f028:	2302      	movs	r3, #2
   1f02a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   1f02e:	ab36      	add	r3, sp, #216	; 0xd8
   1f030:	931c      	str	r3, [sp, #112]	; 0x70
    rc = cbor_read_object(&cb->it, attr);
   1f032:	a902      	add	r1, sp, #8
   1f034:	f106 001c 	add.w	r0, r6, #28
   1f038:	f7f7 fd18 	bl	16a6c <cbor_read_object>
    if (rc) {
   1f03c:	4681      	mov	r9, r0
   1f03e:	b118      	cbz	r0, 1f048 <log_nmgr_read+0x64>
}
   1f040:	4648      	mov	r0, r9
   1f042:	b04b      	add	sp, #300	; 0x12c
   1f044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    g_err |= cbor_encode_text_stringz(&cb->encoder, "next_index");
   1f048:	360c      	adds	r6, #12
   1f04a:	220a      	movs	r2, #10
   1f04c:	492f      	ldr	r1, [pc, #188]	; (1f10c <log_nmgr_read+0x128>)
   1f04e:	4630      	mov	r0, r6
   1f050:	f7f7 fef3 	bl	16e3a <cbor_encode_text_string>
   1f054:	4607      	mov	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, g_log_info.li_next_index);
   1f056:	4b2e      	ldr	r3, [pc, #184]	; (1f110 <log_nmgr_read+0x12c>)
   1f058:	681a      	ldr	r2, [r3, #0]
   1f05a:	4623      	mov	r3, r4
   1f05c:	4630      	mov	r0, r6
   1f05e:	f7f7 fe71 	bl	16d44 <cbor_encode_int>
   1f062:	4307      	orrs	r7, r0
   1f064:	2204      	movs	r2, #4
   1f066:	492b      	ldr	r1, [pc, #172]	; (1f114 <log_nmgr_read+0x130>)
   1f068:	4630      	mov	r0, r6
   1f06a:	f7f7 fee6 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "logs");
   1f06e:	4307      	orrs	r7, r0
    g_err |= cbor_encoder_create_array(&cb->encoder, &logs,
   1f070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f074:	a932      	add	r1, sp, #200	; 0xc8
   1f076:	4630      	mov	r0, r6
   1f078:	f7f7 fee6 	bl	16e48 <cbor_encoder_create_array>
   1f07c:	4307      	orrs	r7, r0
    name_len = strlen(name);
   1f07e:	a83a      	add	r0, sp, #232	; 0xe8
   1f080:	f7fd fb2e 	bl	1c6e0 <strlen>
   1f084:	4605      	mov	r5, r0
    rc = cbor_read_object(&cb->it, attr);
   1f086:	46c8      	mov	r8, r9
   1f088:	e00b      	b.n	1f0a2 <log_nmgr_read+0xbe>
        rc = log_encode(log, &logs, ts, index);
   1f08a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1f08c:	9300      	str	r3, [sp, #0]
   1f08e:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
   1f092:	a932      	add	r1, sp, #200	; 0xc8
   1f094:	4620      	mov	r0, r4
   1f096:	f7ff ff5f 	bl	1ef58 <log_encode>
        if (rc) {
   1f09a:	4680      	mov	r8, r0
   1f09c:	b9a0      	cbnz	r0, 1f0c8 <log_nmgr_read+0xe4>
        if (name_len > 0) {
   1f09e:	2d00      	cmp	r5, #0
   1f0a0:	dc11      	bgt.n	1f0c6 <log_nmgr_read+0xe2>
        log = log_list_get_next(log);
   1f0a2:	4620      	mov	r0, r4
   1f0a4:	f7ff fb6c 	bl	1e780 <log_list_get_next>
        if (!log) {
   1f0a8:	4604      	mov	r4, r0
   1f0aa:	b160      	cbz	r0, 1f0c6 <log_nmgr_read+0xe2>
        if (log->l_log->log_type == LOG_TYPE_STREAM) {
   1f0ac:	6843      	ldr	r3, [r0, #4]
   1f0ae:	681b      	ldr	r3, [r3, #0]
   1f0b0:	2b00      	cmp	r3, #0
   1f0b2:	d0f6      	beq.n	1f0a2 <log_nmgr_read+0xbe>
        if ((name_len > 0) && strcmp(name, log->l_name)) {
   1f0b4:	2d00      	cmp	r5, #0
   1f0b6:	dde8      	ble.n	1f08a <log_nmgr_read+0xa6>
   1f0b8:	6801      	ldr	r1, [r0, #0]
   1f0ba:	a83a      	add	r0, sp, #232	; 0xe8
   1f0bc:	f7f2 fa0a 	bl	114d4 <strcmp>
   1f0c0:	2800      	cmp	r0, #0
   1f0c2:	d0e2      	beq.n	1f08a <log_nmgr_read+0xa6>
   1f0c4:	e7ed      	b.n	1f0a2 <log_nmgr_read+0xbe>
    if (!log && name_len > 0) {
   1f0c6:	b1b4      	cbz	r4, 1f0f6 <log_nmgr_read+0x112>
    g_err |= cbor_encoder_close_container(&cb->encoder, &logs);
   1f0c8:	a932      	add	r1, sp, #200	; 0xc8
   1f0ca:	4630      	mov	r0, r6
   1f0cc:	f7f7 fecf 	bl	16e6e <cbor_encoder_close_container>
   1f0d0:	4307      	orrs	r7, r0
   1f0d2:	2202      	movs	r2, #2
   1f0d4:	4910      	ldr	r1, [pc, #64]	; (1f118 <log_nmgr_read+0x134>)
   1f0d6:	4630      	mov	r0, r6
   1f0d8:	f7f7 feaf 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1f0dc:	4307      	orrs	r7, r0
    g_err |= cbor_encode_int(&cb->encoder, rc);
   1f0de:	4642      	mov	r2, r8
   1f0e0:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1f0e4:	4630      	mov	r0, r6
   1f0e6:	f7f7 fe2d 	bl	16d44 <cbor_encode_int>
    if (g_err) {
   1f0ea:	ea57 0300 	orrs.w	r3, r7, r0
   1f0ee:	d0a7      	beq.n	1f040 <log_nmgr_read+0x5c>
        return MGMT_ERR_ENOMEM;
   1f0f0:	f04f 0902 	mov.w	r9, #2
   1f0f4:	e7a4      	b.n	1f040 <log_nmgr_read+0x5c>
    if (!log && name_len > 0) {
   1f0f6:	2d00      	cmp	r5, #0
   1f0f8:	dde6      	ble.n	1f0c8 <log_nmgr_read+0xe4>
        rc = OS_EINVAL;
   1f0fa:	f04f 0802 	mov.w	r8, #2
   1f0fe:	e7e3      	b.n	1f0c8 <log_nmgr_read+0xe4>
   1f100:	000258b4 	.word	0x000258b4
   1f104:	000258c0 	.word	0x000258c0
   1f108:	000258c4 	.word	0x000258c4
   1f10c:	000258cc 	.word	0x000258cc
   1f110:	20007368 	.word	0x20007368
   1f114:	000258d8 	.word	0x000258d8
   1f118:	000242b8 	.word	0x000242b8

0001f11c <log_nmgr_encode_entry>:
{
   1f11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f120:	b0ad      	sub	sp, #180	; 0xb4
   1f122:	460e      	mov	r6, r1
   1f124:	4615      	mov	r5, r2
   1f126:	4619      	mov	r1, r3
    struct log_encode_data *ed = log_offset->lo_arg;
   1f128:	6937      	ldr	r7, [r6, #16]
    if (log_offset->lo_ts == 0) {
   1f12a:	6834      	ldr	r4, [r6, #0]
   1f12c:	6872      	ldr	r2, [r6, #4]
   1f12e:	ea54 0302 	orrs.w	r3, r4, r2
   1f132:	f040 80d7 	bne.w	1f2e4 <log_nmgr_encode_entry+0x1c8>
        if (log_offset->lo_index > ueh->ue_index) {
   1f136:	68b2      	ldr	r2, [r6, #8]
   1f138:	68ab      	ldr	r3, [r5, #8]
   1f13a:	429a      	cmp	r2, r3
   1f13c:	f200 80ee 	bhi.w	1f31c <log_nmgr_encode_entry+0x200>
    rc = log_read_body(log, dptr, data, 0, min(len, 128));
   1f140:	f8bd 20d0 	ldrh.w	r2, [sp, #208]	; 0xd0
   1f144:	2a80      	cmp	r2, #128	; 0x80
   1f146:	bf28      	it	cs
   1f148:	2280      	movcs	r2, #128	; 0x80
   1f14a:	9200      	str	r2, [sp, #0]
   1f14c:	2300      	movs	r3, #0
   1f14e:	aa0c      	add	r2, sp, #48	; 0x30
   1f150:	f7ff fc7a 	bl	1ea48 <log_read_body>
    if (rc < 0) {
   1f154:	2800      	cmp	r0, #0
   1f156:	f2c0 80e5 	blt.w	1f324 <log_nmgr_encode_entry+0x208>
    data[rc] = 0;
   1f15a:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
   1f15e:	eb0d 0003 	add.w	r0, sp, r3
   1f162:	f04f 0900 	mov.w	r9, #0
   1f166:	f800 9c80 	strb.w	r9, [r0, #-128]
    cb->enc.bytes_written = 0;
   1f16a:	f8cd 901c 	str.w	r9, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   1f16e:	4b72      	ldr	r3, [pc, #456]	; (1f338 <log_nmgr_encode_entry+0x21c>)
   1f170:	9306      	str	r3, [sp, #24]
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   1f172:	464a      	mov	r2, r9
   1f174:	a906      	add	r1, sp, #24
   1f176:	a802      	add	r0, sp, #8
   1f178:	f7f7 fd9f 	bl	16cba <cbor_encoder_init>
    rsp_len = log_offset->lo_data_len;
   1f17c:	f8d6 800c 	ldr.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(&cnt_encoder, &rsp, CborIndefiniteLength);
   1f180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f184:	a908      	add	r1, sp, #32
   1f186:	a802      	add	r0, sp, #8
   1f188:	f7f7 fe63 	bl	16e52 <cbor_encoder_create_map>
   1f18c:	4604      	mov	r4, r0
   1f18e:	2203      	movs	r2, #3
   1f190:	496a      	ldr	r1, [pc, #424]	; (1f33c <log_nmgr_encode_entry+0x220>)
   1f192:	a808      	add	r0, sp, #32
   1f194:	f7f7 fe51 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1f198:	4304      	orrs	r4, r0
   1f19a:	a80c      	add	r0, sp, #48	; 0x30
   1f19c:	f7fd faa0 	bl	1c6e0 <strlen>
   1f1a0:	4602      	mov	r2, r0
   1f1a2:	a90c      	add	r1, sp, #48	; 0x30
   1f1a4:	a808      	add	r0, sp, #32
   1f1a6:	f7f7 fe48 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1f1aa:	4304      	orrs	r4, r0
   1f1ac:	2202      	movs	r2, #2
   1f1ae:	4964      	ldr	r1, [pc, #400]	; (1f340 <log_nmgr_encode_entry+0x224>)
   1f1b0:	a808      	add	r0, sp, #32
   1f1b2:	f7f7 fe42 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1f1b6:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1f1b8:	682a      	ldr	r2, [r5, #0]
   1f1ba:	686b      	ldr	r3, [r5, #4]
   1f1bc:	a808      	add	r0, sp, #32
   1f1be:	f7f7 fdc1 	bl	16d44 <cbor_encode_int>
   1f1c2:	4304      	orrs	r4, r0
   1f1c4:	2205      	movs	r2, #5
   1f1c6:	495f      	ldr	r1, [pc, #380]	; (1f344 <log_nmgr_encode_entry+0x228>)
   1f1c8:	a808      	add	r0, sp, #32
   1f1ca:	f7f7 fe36 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1f1ce:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1f1d0:	7b6a      	ldrb	r2, [r5, #13]
   1f1d2:	464b      	mov	r3, r9
   1f1d4:	a808      	add	r0, sp, #32
   1f1d6:	f7f7 fd75 	bl	16cc4 <cbor_encode_uint>
   1f1da:	4304      	orrs	r4, r0
   1f1dc:	2205      	movs	r2, #5
   1f1de:	495a      	ldr	r1, [pc, #360]	; (1f348 <log_nmgr_encode_entry+0x22c>)
   1f1e0:	a808      	add	r0, sp, #32
   1f1e2:	f7f7 fe2a 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1f1e6:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1f1e8:	68aa      	ldr	r2, [r5, #8]
   1f1ea:	464b      	mov	r3, r9
   1f1ec:	a808      	add	r0, sp, #32
   1f1ee:	f7f7 fd69 	bl	16cc4 <cbor_encode_uint>
   1f1f2:	4304      	orrs	r4, r0
   1f1f4:	2206      	movs	r2, #6
   1f1f6:	4955      	ldr	r1, [pc, #340]	; (1f34c <log_nmgr_encode_entry+0x230>)
   1f1f8:	a808      	add	r0, sp, #32
   1f1fa:	f7f7 fe1e 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1f1fe:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1f200:	7b2a      	ldrb	r2, [r5, #12]
   1f202:	464b      	mov	r3, r9
   1f204:	a808      	add	r0, sp, #32
   1f206:	f7f7 fd5d 	bl	16cc4 <cbor_encode_uint>
   1f20a:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(&cnt_encoder, &rsp);
   1f20c:	a908      	add	r1, sp, #32
   1f20e:	a802      	add	r0, sp, #8
   1f210:	f7f7 fe2d 	bl	16e6e <cbor_encoder_close_container>
   1f214:	4304      	orrs	r4, r0
{   return encoder->writer->bytes_written; }
   1f216:	9b02      	ldr	r3, [sp, #8]
   1f218:	685b      	ldr	r3, [r3, #4]
    rsp_len += cbor_encode_bytes_written(&cnt_encoder);
   1f21a:	4498      	add	r8, r3
    if (rsp_len > MYNEWT_VAL(LOG_NMGR_MAX_RSP_LEN)) {
   1f21c:	f5b8 7fc8 	cmp.w	r8, #400	; 0x190
   1f220:	dd73      	ble.n	1f30a <log_nmgr_encode_entry+0x1ee>
        if (ed->counter == 0) {
   1f222:	683b      	ldr	r3, [r7, #0]
   1f224:	2b00      	cmp	r3, #0
   1f226:	f040 8081 	bne.w	1f32c <log_nmgr_encode_entry+0x210>
            too_long = true;
   1f22a:	f04f 0901 	mov.w	r9, #1
    log_offset->lo_data_len = rsp_len;
   1f22e:	f8c6 800c 	str.w	r8, [r6, #12]
    g_err |= cbor_encoder_create_map(ed->enc, &rsp, CborIndefiniteLength);
   1f232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f236:	a908      	add	r1, sp, #32
   1f238:	6878      	ldr	r0, [r7, #4]
   1f23a:	f7f7 fe0a 	bl	16e52 <cbor_encoder_create_map>
   1f23e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1f240:	2203      	movs	r2, #3
   1f242:	493e      	ldr	r1, [pc, #248]	; (1f33c <log_nmgr_encode_entry+0x220>)
   1f244:	a808      	add	r0, sp, #32
   1f246:	f7f7 fdf8 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "msg");
   1f24a:	4304      	orrs	r4, r0
    if (too_long) {
   1f24c:	f1b9 0f00 	cmp.w	r9, #0
   1f250:	d15e      	bne.n	1f310 <log_nmgr_encode_entry+0x1f4>
   1f252:	a80c      	add	r0, sp, #48	; 0x30
   1f254:	f7fd fa44 	bl	1c6e0 <strlen>
   1f258:	4602      	mov	r2, r0
   1f25a:	a90c      	add	r1, sp, #48	; 0x30
   1f25c:	a808      	add	r0, sp, #32
   1f25e:	f7f7 fdec 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, (char *)data);
   1f262:	4304      	orrs	r4, r0
   1f264:	2202      	movs	r2, #2
   1f266:	4936      	ldr	r1, [pc, #216]	; (1f340 <log_nmgr_encode_entry+0x224>)
   1f268:	a808      	add	r0, sp, #32
   1f26a:	f7f7 fde6 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "ts");
   1f26e:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&rsp, ueh->ue_ts);
   1f270:	682a      	ldr	r2, [r5, #0]
   1f272:	686b      	ldr	r3, [r5, #4]
   1f274:	a808      	add	r0, sp, #32
   1f276:	f7f7 fd65 	bl	16d44 <cbor_encode_int>
   1f27a:	4304      	orrs	r4, r0
   1f27c:	2205      	movs	r2, #5
   1f27e:	4931      	ldr	r1, [pc, #196]	; (1f344 <log_nmgr_encode_entry+0x228>)
   1f280:	a808      	add	r0, sp, #32
   1f282:	f7f7 fdda 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "level");
   1f286:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp, ueh->ue_level);
   1f288:	2600      	movs	r6, #0
   1f28a:	7b6a      	ldrb	r2, [r5, #13]
   1f28c:	4633      	mov	r3, r6
   1f28e:	a808      	add	r0, sp, #32
   1f290:	f7f7 fd18 	bl	16cc4 <cbor_encode_uint>
   1f294:	4304      	orrs	r4, r0
   1f296:	2205      	movs	r2, #5
   1f298:	492b      	ldr	r1, [pc, #172]	; (1f348 <log_nmgr_encode_entry+0x22c>)
   1f29a:	a808      	add	r0, sp, #32
   1f29c:	f7f7 fdcd 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "index");
   1f2a0:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_index);
   1f2a2:	68aa      	ldr	r2, [r5, #8]
   1f2a4:	4633      	mov	r3, r6
   1f2a6:	a808      	add	r0, sp, #32
   1f2a8:	f7f7 fd0c 	bl	16cc4 <cbor_encode_uint>
   1f2ac:	4304      	orrs	r4, r0
   1f2ae:	2206      	movs	r2, #6
   1f2b0:	4926      	ldr	r1, [pc, #152]	; (1f34c <log_nmgr_encode_entry+0x230>)
   1f2b2:	a808      	add	r0, sp, #32
   1f2b4:	f7f7 fdc1 	bl	16e3a <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&rsp, "module");
   1f2b8:	4304      	orrs	r4, r0
    g_err |= cbor_encode_uint(&rsp,  ueh->ue_module);
   1f2ba:	7b2a      	ldrb	r2, [r5, #12]
   1f2bc:	4633      	mov	r3, r6
   1f2be:	a808      	add	r0, sp, #32
   1f2c0:	f7f7 fd00 	bl	16cc4 <cbor_encode_uint>
   1f2c4:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_close_container(ed->enc, &rsp);
   1f2c6:	a908      	add	r1, sp, #32
   1f2c8:	6878      	ldr	r0, [r7, #4]
   1f2ca:	f7f7 fdd0 	bl	16e6e <cbor_encoder_close_container>
    ed->counter++;
   1f2ce:	683b      	ldr	r3, [r7, #0]
   1f2d0:	3301      	adds	r3, #1
   1f2d2:	603b      	str	r3, [r7, #0]
    if (g_err) {
   1f2d4:	ea54 0300 	orrs.w	r3, r4, r0
   1f2d8:	d12a      	bne.n	1f330 <log_nmgr_encode_entry+0x214>
    if (too_long) {
   1f2da:	f1b9 0f00 	cmp.w	r9, #0
   1f2de:	d029      	beq.n	1f334 <log_nmgr_encode_entry+0x218>
        rc = OS_ENOMEM;
   1f2e0:	2001      	movs	r0, #1
   1f2e2:	e020      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
    } else if (ueh->ue_ts < log_offset->lo_ts   ||
   1f2e4:	f8d5 c000 	ldr.w	ip, [r5]
   1f2e8:	686b      	ldr	r3, [r5, #4]
   1f2ea:	45a4      	cmp	ip, r4
   1f2ec:	eb73 0e02 	sbcs.w	lr, r3, r2
   1f2f0:	db16      	blt.n	1f320 <log_nmgr_encode_entry+0x204>
   1f2f2:	429a      	cmp	r2, r3
   1f2f4:	bf08      	it	eq
   1f2f6:	4564      	cmpeq	r4, ip
   1f2f8:	f47f af22 	bne.w	1f140 <log_nmgr_encode_entry+0x24>
                ueh->ue_index < log_offset->lo_index)) {
   1f2fc:	68aa      	ldr	r2, [r5, #8]
   1f2fe:	68b3      	ldr	r3, [r6, #8]
               (ueh->ue_ts == log_offset->lo_ts &&
   1f300:	429a      	cmp	r2, r3
   1f302:	f4bf af1d 	bcs.w	1f140 <log_nmgr_encode_entry+0x24>
    rc = OS_OK;
   1f306:	2000      	movs	r0, #0
   1f308:	e00d      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
    too_long = false;
   1f30a:	f04f 0900 	mov.w	r9, #0
   1f30e:	e78e      	b.n	1f22e <log_nmgr_encode_entry+0x112>
        sprintf((char *)data, "error: entry too large (%d bytes)", rsp_len);
   1f310:	4642      	mov	r2, r8
   1f312:	490f      	ldr	r1, [pc, #60]	; (1f350 <log_nmgr_encode_entry+0x234>)
   1f314:	a80c      	add	r0, sp, #48	; 0x30
   1f316:	f002 f9d5 	bl	216c4 <sprintf>
   1f31a:	e79a      	b.n	1f252 <log_nmgr_encode_entry+0x136>
    rc = OS_OK;
   1f31c:	2000      	movs	r0, #0
   1f31e:	e002      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
   1f320:	2000      	movs	r0, #0
   1f322:	e000      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
        rc = OS_ENOENT;
   1f324:	200a      	movs	r0, #10
}
   1f326:	b02d      	add	sp, #180	; 0xb4
   1f328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            rc = OS_ENOMEM;
   1f32c:	2001      	movs	r0, #1
   1f32e:	e7fa      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
        return MGMT_ERR_ENOMEM;
   1f330:	2002      	movs	r0, #2
   1f332:	e7f8      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
        rc = 0;
   1f334:	2000      	movs	r0, #0
   1f336:	e7f6      	b.n	1f326 <log_nmgr_encode_entry+0x20a>
   1f338:	0001eb95 	.word	0x0001eb95
   1f33c:	000258e0 	.word	0x000258e0
   1f340:	000258c0 	.word	0x000258c0
   1f344:	0002589c 	.word	0x0002589c
   1f348:	000258c4 	.word	0x000258c4
   1f34c:	00025894 	.word	0x00025894
   1f350:	000258e4 	.word	0x000258e4

0001f354 <log_nmgr_register_group>:
 * Register nmgr group handlers.
 * @return 0 on success; non-zero on failure
 */
int
log_nmgr_register_group(void)
{
   1f354:	b508      	push	{r3, lr}
    int rc;

    MGMT_GROUP_SET_HANDLERS(&log_nmgr_group, log_nmgr_group_handlers);
   1f356:	4805      	ldr	r0, [pc, #20]	; (1f36c <log_nmgr_register_group+0x18>)
   1f358:	4b05      	ldr	r3, [pc, #20]	; (1f370 <log_nmgr_register_group+0x1c>)
   1f35a:	6003      	str	r3, [r0, #0]
   1f35c:	2309      	movs	r3, #9
   1f35e:	8083      	strh	r3, [r0, #4]
    log_nmgr_group.mg_group_id = MGMT_GROUP_ID_LOGS;
   1f360:	2304      	movs	r3, #4
   1f362:	80c3      	strh	r3, [r0, #6]

    rc = mgmt_group_register(&log_nmgr_group);
   1f364:	f7fe f916 	bl	1d594 <mgmt_group_register>
    }

    return (0);
err:
    return (rc);
}
   1f368:	bd08      	pop	{r3, pc}
   1f36a:	bf00      	nop
   1f36c:	20007410 	.word	0x20007410
   1f370:	2000169c 	.word	0x2000169c

0001f374 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   1f374:	b410      	push	{r4}
   1f376:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f378:	4b08      	ldr	r3, [pc, #32]	; (1f39c <modlog_find_by_module+0x28>)
   1f37a:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1f37c:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f37e:	e001      	b.n	1f384 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   1f380:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   1f382:	6800      	ldr	r0, [r0, #0]
   1f384:	b120      	cbz	r0, 1f390 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1f386:	7a43      	ldrb	r3, [r0, #9]
   1f388:	4293      	cmp	r3, r2
   1f38a:	d001      	beq.n	1f390 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   1f38c:	d9f8      	bls.n	1f380 <modlog_find_by_module+0xc>
            cur = NULL;
   1f38e:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1f390:	b101      	cbz	r1, 1f394 <modlog_find_by_module+0x20>
        *out_prev = prev;
   1f392:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   1f394:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f398:	4770      	bx	lr
   1f39a:	bf00      	nop
   1f39c:	200074fc 	.word	0x200074fc

0001f3a0 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   1f3a0:	b510      	push	{r4, lr}
   1f3a2:	b082      	sub	sp, #8
   1f3a4:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1f3a6:	a901      	add	r1, sp, #4
   1f3a8:	7a40      	ldrb	r0, [r0, #9]
   1f3aa:	f7ff ffe3 	bl	1f374 <modlog_find_by_module>
    if (prev == NULL) {
   1f3ae:	9b01      	ldr	r3, [sp, #4]
   1f3b0:	b143      	cbz	r3, 1f3c4 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1f3b2:	681b      	ldr	r3, [r3, #0]
   1f3b4:	6023      	str	r3, [r4, #0]
   1f3b6:	9b01      	ldr	r3, [sp, #4]
   1f3b8:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1f3ba:	7a63      	ldrb	r3, [r4, #9]
   1f3bc:	2bff      	cmp	r3, #255	; 0xff
   1f3be:	d006      	beq.n	1f3ce <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   1f3c0:	b002      	add	sp, #8
   1f3c2:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1f3c4:	4b03      	ldr	r3, [pc, #12]	; (1f3d4 <modlog_insert+0x34>)
   1f3c6:	681a      	ldr	r2, [r3, #0]
   1f3c8:	6022      	str	r2, [r4, #0]
   1f3ca:	601c      	str	r4, [r3, #0]
   1f3cc:	e7f5      	b.n	1f3ba <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1f3ce:	4b02      	ldr	r3, [pc, #8]	; (1f3d8 <modlog_insert+0x38>)
   1f3d0:	601c      	str	r4, [r3, #0]
}
   1f3d2:	e7f5      	b.n	1f3c0 <modlog_insert+0x20>
   1f3d4:	200074fc 	.word	0x200074fc
   1f3d8:	2000741c 	.word	0x2000741c

0001f3dc <modlog_alloc>:
{
   1f3dc:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1f3de:	4805      	ldr	r0, [pc, #20]	; (1f3f4 <modlog_alloc+0x18>)
   1f3e0:	f7ee fbea 	bl	dbb8 <os_memblock_get>
    if (mm != NULL) {
   1f3e4:	4603      	mov	r3, r0
   1f3e6:	b118      	cbz	r0, 1f3f0 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   1f3e8:	2200      	movs	r2, #0
   1f3ea:	6002      	str	r2, [r0, #0]
   1f3ec:	6042      	str	r2, [r0, #4]
   1f3ee:	6082      	str	r2, [r0, #8]
}
   1f3f0:	4618      	mov	r0, r3
   1f3f2:	bd08      	pop	{r3, pc}
   1f3f4:	200074e0 	.word	0x200074e0

0001f3f8 <modlog_infer_handle>:
{
   1f3f8:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1f3fa:	4a0f      	ldr	r2, [pc, #60]	; (1f438 <modlog_infer_handle+0x40>)
   1f3fc:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1f3fe:	480f      	ldr	r0, [pc, #60]	; (1f43c <modlog_infer_handle+0x44>)
   1f400:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f404:	2abf      	cmp	r2, #191	; 0xbf
   1f406:	d80b      	bhi.n	1f420 <modlog_infer_handle+0x28>
   1f408:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1f40a:	4b0c      	ldr	r3, [pc, #48]	; (1f43c <modlog_infer_handle+0x44>)
   1f40c:	fba3 1302 	umull	r1, r3, r3, r2
   1f410:	08db      	lsrs	r3, r3, #3
   1f412:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f416:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1f41a:	d107      	bne.n	1f42c <modlog_infer_handle+0x34>
}
   1f41c:	b2c0      	uxtb	r0, r0
   1f41e:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1f420:	2300      	movs	r3, #0
   1f422:	461a      	mov	r2, r3
   1f424:	4619      	mov	r1, r3
   1f426:	4618      	mov	r0, r3
   1f428:	f7ed ff9a 	bl	d360 <__assert_func>
    assert(off % elem_sz == 0);
   1f42c:	2300      	movs	r3, #0
   1f42e:	461a      	mov	r2, r3
   1f430:	4619      	mov	r1, r3
   1f432:	4618      	mov	r0, r3
   1f434:	f7ed ff94 	bl	d360 <__assert_func>
   1f438:	20007420 	.word	0x20007420
   1f43c:	aaaaaaab 	.word	0xaaaaaaab

0001f440 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1f440:	b1c9      	cbz	r1, 1f476 <modlog_register_no_lock+0x36>
{
   1f442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f446:	4607      	mov	r7, r0
   1f448:	4616      	mov	r6, r2
   1f44a:	461d      	mov	r5, r3
   1f44c:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1f44e:	f7ff ffc5 	bl	1f3dc <modlog_alloc>
    if (mm == NULL) {
   1f452:	4604      	mov	r4, r0
   1f454:	b190      	cbz	r0, 1f47c <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   1f456:	f7ff ffcf 	bl	1f3f8 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   1f45a:	f8c4 8004 	str.w	r8, [r4, #4]
   1f45e:	7220      	strb	r0, [r4, #8]
   1f460:	7267      	strb	r7, [r4, #9]
   1f462:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   1f464:	4620      	mov	r0, r4
   1f466:	f7ff ff9b 	bl	1f3a0 <modlog_insert>

    if (out_handle != NULL) {
   1f46a:	b155      	cbz	r5, 1f482 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   1f46c:	7a23      	ldrb	r3, [r4, #8]
   1f46e:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   1f470:	2000      	movs	r0, #0
}
   1f472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1f476:	f06f 0001 	mvn.w	r0, #1
}
   1f47a:	4770      	bx	lr
        return SYS_ENOMEM;
   1f47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f480:	e7f7      	b.n	1f472 <modlog_register_no_lock+0x32>
    return 0;
   1f482:	2000      	movs	r0, #0
   1f484:	e7f5      	b.n	1f472 <modlog_register_no_lock+0x32>

0001f486 <modlog_append_one>:
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    int rc;

    if (level >= mm->desc.min_level) {
   1f486:	f890 c00a 	ldrb.w	ip, [r0, #10]
   1f48a:	4594      	cmp	ip, r2
   1f48c:	d901      	bls.n	1f492 <modlog_append_one+0xc>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   1f48e:	2000      	movs	r0, #0
}
   1f490:	4770      	bx	lr
{
   1f492:	b510      	push	{r4, lr}
   1f494:	b082      	sub	sp, #8
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1f496:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1f49a:	9401      	str	r4, [sp, #4]
   1f49c:	9c04      	ldr	r4, [sp, #16]
   1f49e:	9400      	str	r4, [sp, #0]
   1f4a0:	6840      	ldr	r0, [r0, #4]
   1f4a2:	f7ff f9b1 	bl	1e808 <log_append_body>
        if (rc != 0) {
   1f4a6:	b908      	cbnz	r0, 1f4ac <modlog_append_one+0x26>
}
   1f4a8:	b002      	add	sp, #8
   1f4aa:	bd10      	pop	{r4, pc}
            return SYS_EIO;
   1f4ac:	f06f 0004 	mvn.w	r0, #4
   1f4b0:	e7fa      	b.n	1f4a8 <modlog_append_one+0x22>
	...

0001f4b4 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   1f4b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f4b8:	b083      	sub	sp, #12
   1f4ba:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1f4be:	28ff      	cmp	r0, #255	; 0xff
   1f4c0:	d031      	beq.n	1f526 <modlog_append_no_lock+0x72>
   1f4c2:	4605      	mov	r5, r0
   1f4c4:	460e      	mov	r6, r1
   1f4c6:	4617      	mov	r7, r2
   1f4c8:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1f4ca:	2100      	movs	r1, #0
   1f4cc:	f7ff ff52 	bl	1f374 <modlog_find_by_module>
    if (mm != NULL) {
   1f4d0:	4604      	mov	r4, r0
   1f4d2:	b198      	cbz	r0, 1f4fc <modlog_append_no_lock+0x48>
        while (mm != NULL && mm->desc.module == module) {
   1f4d4:	b354      	cbz	r4, 1f52c <modlog_append_no_lock+0x78>
   1f4d6:	7a60      	ldrb	r0, [r4, #9]
   1f4d8:	42a8      	cmp	r0, r5
   1f4da:	d10d      	bne.n	1f4f8 <modlog_append_no_lock+0x44>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1f4dc:	f8cd 9004 	str.w	r9, [sp, #4]
   1f4e0:	f8cd 8000 	str.w	r8, [sp]
   1f4e4:	463b      	mov	r3, r7
   1f4e6:	4632      	mov	r2, r6
   1f4e8:	4629      	mov	r1, r5
   1f4ea:	4620      	mov	r0, r4
   1f4ec:	f7ff ffcb 	bl	1f486 <modlog_append_one>
            if (rc != 0) {
   1f4f0:	4603      	mov	r3, r0
   1f4f2:	b9e0      	cbnz	r0, 1f52e <modlog_append_no_lock+0x7a>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   1f4f4:	6824      	ldr	r4, [r4, #0]
   1f4f6:	e7ed      	b.n	1f4d4 <modlog_append_no_lock+0x20>
        }
        return 0;
   1f4f8:	2300      	movs	r3, #0
   1f4fa:	e018      	b.n	1f52e <modlog_append_no_lock+0x7a>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   1f4fc:	4b0e      	ldr	r3, [pc, #56]	; (1f538 <modlog_append_no_lock+0x84>)
   1f4fe:	681c      	ldr	r4, [r3, #0]
   1f500:	e000      	b.n	1f504 <modlog_append_no_lock+0x50>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   1f502:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1f504:	b16c      	cbz	r4, 1f522 <modlog_append_no_lock+0x6e>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1f506:	f8cd 9004 	str.w	r9, [sp, #4]
   1f50a:	f8cd 8000 	str.w	r8, [sp]
   1f50e:	463b      	mov	r3, r7
   1f510:	4632      	mov	r2, r6
   1f512:	4629      	mov	r1, r5
   1f514:	4620      	mov	r0, r4
   1f516:	f7ff ffb6 	bl	1f486 <modlog_append_one>
        if (rc != 0) {
   1f51a:	4603      	mov	r3, r0
   1f51c:	2800      	cmp	r0, #0
   1f51e:	d0f0      	beq.n	1f502 <modlog_append_no_lock+0x4e>
   1f520:	e005      	b.n	1f52e <modlog_append_no_lock+0x7a>
            return rc;
        }
    }

    return 0;
   1f522:	2300      	movs	r3, #0
   1f524:	e003      	b.n	1f52e <modlog_append_no_lock+0x7a>
        return SYS_EINVAL;
   1f526:	f06f 0301 	mvn.w	r3, #1
   1f52a:	e000      	b.n	1f52e <modlog_append_no_lock+0x7a>
        return 0;
   1f52c:	2300      	movs	r3, #0
}
   1f52e:	4618      	mov	r0, r3
   1f530:	b003      	add	sp, #12
   1f532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f536:	bf00      	nop
   1f538:	2000741c 	.word	0x2000741c

0001f53c <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   1f53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f540:	4604      	mov	r4, r0
   1f542:	460d      	mov	r5, r1
   1f544:	4616      	mov	r6, r2
   1f546:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1f548:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1f56c <modlog_register+0x30>
   1f54c:	4640      	mov	r0, r8
   1f54e:	f000 fbbe 	bl	1fcce <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   1f552:	463b      	mov	r3, r7
   1f554:	4632      	mov	r2, r6
   1f556:	4629      	mov	r1, r5
   1f558:	4620      	mov	r0, r4
   1f55a:	f7ff ff71 	bl	1f440 <modlog_register_no_lock>
   1f55e:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   1f560:	4640      	mov	r0, r8
   1f562:	f000 fbde 	bl	1fd22 <rwlock_release_write>

    return rc;
}
   1f566:	4620      	mov	r0, r4
   1f568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f56c:	20007500 	.word	0x20007500

0001f570 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   1f570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f574:	b082      	sub	sp, #8
   1f576:	4604      	mov	r4, r0
   1f578:	460d      	mov	r5, r1
   1f57a:	4616      	mov	r6, r2
   1f57c:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   1f57e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1f5ac <modlog_append+0x3c>
   1f582:	4640      	mov	r0, r8
   1f584:	f000 fb63 	bl	1fc4e <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   1f588:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1f58c:	9300      	str	r3, [sp, #0]
   1f58e:	463b      	mov	r3, r7
   1f590:	4632      	mov	r2, r6
   1f592:	4629      	mov	r1, r5
   1f594:	4620      	mov	r0, r4
   1f596:	f7ff ff8d 	bl	1f4b4 <modlog_append_no_lock>
   1f59a:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1f59c:	4640      	mov	r0, r8
   1f59e:	f000 fb83 	bl	1fca8 <rwlock_release_read>

    return rc;
}
   1f5a2:	4620      	mov	r0, r4
   1f5a4:	b002      	add	sp, #8
   1f5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5aa:	bf00      	nop
   1f5ac:	20007500 	.word	0x20007500

0001f5b0 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   1f5b0:	b40c      	push	{r2, r3}
   1f5b2:	b530      	push	{r4, r5, lr}
   1f5b4:	b0a5      	sub	sp, #148	; 0x94
   1f5b6:	4604      	mov	r4, r0
   1f5b8:	460d      	mov	r5, r1
   1f5ba:	ab28      	add	r3, sp, #160	; 0xa0
   1f5bc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   1f5c0:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1f5c2:	2180      	movs	r1, #128	; 0x80
   1f5c4:	a803      	add	r0, sp, #12
   1f5c6:	f7f2 fb77 	bl	11cb8 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1f5ca:	287f      	cmp	r0, #127	; 0x7f
   1f5cc:	dd00      	ble.n	1f5d0 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1f5ce:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   1f5d0:	b280      	uxth	r0, r0
   1f5d2:	9000      	str	r0, [sp, #0]
   1f5d4:	ab03      	add	r3, sp, #12
   1f5d6:	2200      	movs	r2, #0
   1f5d8:	4629      	mov	r1, r5
   1f5da:	4620      	mov	r0, r4
   1f5dc:	f7ff ffc8 	bl	1f570 <modlog_append>
}
   1f5e0:	b025      	add	sp, #148	; 0x94
   1f5e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f5e6:	b002      	add	sp, #8
   1f5e8:	4770      	bx	lr
	...

0001f5ec <modlog_init>:

void
modlog_init(void)
{
   1f5ec:	b510      	push	{r4, lr}
   1f5ee:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   1f5f0:	4b1e      	ldr	r3, [pc, #120]	; (1f66c <modlog_init+0x80>)
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	2b00      	cmp	r3, #0
   1f5f6:	d034      	beq.n	1f662 <modlog_init+0x76>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1f5f8:	4b1d      	ldr	r3, [pc, #116]	; (1f670 <modlog_init+0x84>)
   1f5fa:	9300      	str	r3, [sp, #0]
   1f5fc:	4b1d      	ldr	r3, [pc, #116]	; (1f674 <modlog_init+0x88>)
   1f5fe:	220c      	movs	r2, #12
   1f600:	2110      	movs	r1, #16
   1f602:	481d      	ldr	r0, [pc, #116]	; (1f678 <modlog_init+0x8c>)
   1f604:	f7ee face 	bl	dba4 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f608:	b138      	cbz	r0, 1f61a <modlog_init+0x2e>
   1f60a:	2000      	movs	r0, #0
   1f60c:	9000      	str	r0, [sp, #0]
   1f60e:	4b1b      	ldr	r3, [pc, #108]	; (1f67c <modlog_init+0x90>)
   1f610:	681c      	ldr	r4, [r3, #0]
   1f612:	4603      	mov	r3, r0
   1f614:	4602      	mov	r2, r0
   1f616:	4601      	mov	r1, r0
   1f618:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   1f61a:	2300      	movs	r3, #0
   1f61c:	4a18      	ldr	r2, [pc, #96]	; (1f680 <modlog_init+0x94>)
   1f61e:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1f620:	4a18      	ldr	r2, [pc, #96]	; (1f684 <modlog_init+0x98>)
   1f622:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1f624:	4818      	ldr	r0, [pc, #96]	; (1f688 <modlog_init+0x9c>)
   1f626:	f000 fb8b 	bl	1fd40 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f62a:	b138      	cbz	r0, 1f63c <modlog_init+0x50>
   1f62c:	2000      	movs	r0, #0
   1f62e:	9000      	str	r0, [sp, #0]
   1f630:	4b12      	ldr	r3, [pc, #72]	; (1f67c <modlog_init+0x90>)
   1f632:	681c      	ldr	r4, [r3, #0]
   1f634:	4603      	mov	r3, r0
   1f636:	4602      	mov	r2, r0
   1f638:	4601      	mov	r1, r0
   1f63a:	47a0      	blx	r4

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1f63c:	f7ff fa58 	bl	1eaf0 <log_console_get>
   1f640:	4601      	mov	r1, r0
   1f642:	2300      	movs	r3, #0
   1f644:	461a      	mov	r2, r3
   1f646:	20ff      	movs	r0, #255	; 0xff
   1f648:	f7ff ff78 	bl	1f53c <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1f64c:	b138      	cbz	r0, 1f65e <modlog_init+0x72>
   1f64e:	2000      	movs	r0, #0
   1f650:	9000      	str	r0, [sp, #0]
   1f652:	4b0a      	ldr	r3, [pc, #40]	; (1f67c <modlog_init+0x90>)
   1f654:	681c      	ldr	r4, [r3, #0]
   1f656:	4603      	mov	r3, r0
   1f658:	4602      	mov	r2, r0
   1f65a:	4601      	mov	r1, r0
   1f65c:	47a0      	blx	r4
#endif
}
   1f65e:	b002      	add	sp, #8
   1f660:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f662:	461a      	mov	r2, r3
   1f664:	4619      	mov	r1, r3
   1f666:	4618      	mov	r0, r3
   1f668:	f7ed fe7a 	bl	d360 <__assert_func>
   1f66c:	20006ca8 	.word	0x20006ca8
   1f670:	00025908 	.word	0x00025908
   1f674:	20007420 	.word	0x20007420
   1f678:	200074e0 	.word	0x200074e0
   1f67c:	2000143c 	.word	0x2000143c
   1f680:	200074fc 	.word	0x200074fc
   1f684:	2000741c 	.word	0x2000741c
   1f688:	20007500 	.word	0x20007500

0001f68c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1f68c:	b530      	push	{r4, r5, lr}
   1f68e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1f690:	7885      	ldrb	r5, [r0, #2]
   1f692:	4b20      	ldr	r3, [pc, #128]	; (1f714 <mfg_seek_next_aux+0x88>)
   1f694:	681b      	ldr	r3, [r3, #0]
   1f696:	429d      	cmp	r5, r3
   1f698:	da33      	bge.n	1f702 <mfg_seek_next_aux+0x76>
   1f69a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1f69c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1f6a0:	a901      	add	r1, sp, #4
   1f6a2:	4a1d      	ldr	r2, [pc, #116]	; (1f718 <mfg_seek_next_aux+0x8c>)
   1f6a4:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1f6a8:	f7fe fe86 	bl	1e3b8 <flash_area_open>
    if (rc != 0) {
   1f6ac:	bb60      	cbnz	r0, 1f708 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1f6ae:	6862      	ldr	r2, [r4, #4]
   1f6b0:	b9c2      	cbnz	r2, 1f6e4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1f6b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1f6b6:	4b18      	ldr	r3, [pc, #96]	; (1f718 <mfg_seek_next_aux+0x8c>)
   1f6b8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1f6bc:	686b      	ldr	r3, [r5, #4]
   1f6be:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1f6c0:	6861      	ldr	r1, [r4, #4]
   1f6c2:	9801      	ldr	r0, [sp, #4]
   1f6c4:	6883      	ldr	r3, [r0, #8]
   1f6c6:	3b08      	subs	r3, #8
   1f6c8:	4299      	cmp	r1, r3
   1f6ca:	d313      	bcc.n	1f6f4 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1f6cc:	78a3      	ldrb	r3, [r4, #2]
   1f6ce:	1c59      	adds	r1, r3, #1
   1f6d0:	4a10      	ldr	r2, [pc, #64]	; (1f714 <mfg_seek_next_aux+0x88>)
   1f6d2:	6812      	ldr	r2, [r2, #0]
   1f6d4:	4291      	cmp	r1, r2
   1f6d6:	da0a      	bge.n	1f6ee <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1f6d8:	2200      	movs	r2, #0
   1f6da:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1f6dc:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1f6de:	f06f 0005 	mvn.w	r0, #5
   1f6e2:	e00c      	b.n	1f6fe <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1f6e4:	7863      	ldrb	r3, [r4, #1]
   1f6e6:	4413      	add	r3, r2
   1f6e8:	3302      	adds	r3, #2
   1f6ea:	6063      	str	r3, [r4, #4]
   1f6ec:	e7e8      	b.n	1f6c0 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   1f6ee:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   1f6f2:	e004      	b.n	1f6fe <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1f6f4:	2302      	movs	r3, #2
   1f6f6:	4622      	mov	r2, r4
   1f6f8:	f7fe febe 	bl	1e478 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1f6fc:	b938      	cbnz	r0, 1f70e <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   1f6fe:	b003      	add	sp, #12
   1f700:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1f702:	f06f 0001 	mvn.w	r0, #1
   1f706:	e7fa      	b.n	1f6fe <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   1f708:	f06f 0004 	mvn.w	r0, #4
   1f70c:	e7f7      	b.n	1f6fe <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   1f70e:	f06f 0004 	mvn.w	r0, #4
   1f712:	e7f4      	b.n	1f6fe <mfg_seek_next_aux+0x72>
   1f714:	20007540 	.word	0x20007540
   1f718:	20007528 	.word	0x20007528

0001f71c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1f71c:	b530      	push	{r4, r5, lr}
   1f71e:	b085      	sub	sp, #20
   1f720:	4605      	mov	r5, r0
   1f722:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1f724:	a903      	add	r1, sp, #12
   1f726:	f7fe fe47 	bl	1e3b8 <flash_area_open>
    if (rc != 0) {
   1f72a:	b9d8      	cbnz	r0, 1f764 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1f72c:	9803      	ldr	r0, [sp, #12]
   1f72e:	6881      	ldr	r1, [r0, #8]
   1f730:	2308      	movs	r3, #8
   1f732:	aa01      	add	r2, sp, #4
   1f734:	3908      	subs	r1, #8
   1f736:	f7fe fe9f 	bl	1e478 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1f73a:	b9b0      	cbnz	r0, 1f76a <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1f73c:	9a02      	ldr	r2, [sp, #8]
   1f73e:	4b11      	ldr	r3, [pc, #68]	; (1f784 <mfg_read_mmr+0x68>)
   1f740:	429a      	cmp	r2, r3
   1f742:	d115      	bne.n	1f770 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1f744:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1f748:	2b02      	cmp	r3, #2
   1f74a:	d114      	bne.n	1f776 <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1f74c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1f750:	9b03      	ldr	r3, [sp, #12]
   1f752:	689b      	ldr	r3, [r3, #8]
   1f754:	429a      	cmp	r2, r3
   1f756:	d811      	bhi.n	1f77c <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1f758:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1f75a:	7025      	strb	r5, [r4, #0]
   1f75c:	6063      	str	r3, [r4, #4]
   1f75e:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1f760:	b005      	add	sp, #20
   1f762:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1f764:	f06f 0004 	mvn.w	r0, #4
   1f768:	e7fa      	b.n	1f760 <mfg_read_mmr+0x44>
        return SYS_EIO;
   1f76a:	f06f 0004 	mvn.w	r0, #4
   1f76e:	e7f7      	b.n	1f760 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1f770:	f06f 0008 	mvn.w	r0, #8
   1f774:	e7f4      	b.n	1f760 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   1f776:	f06f 000b 	mvn.w	r0, #11
   1f77a:	e7f1      	b.n	1f760 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1f77c:	f06f 0008 	mvn.w	r0, #8
   1f780:	e7ee      	b.n	1f760 <mfg_read_mmr+0x44>
   1f782:	bf00      	nop
   1f784:	3bb2a269 	.word	0x3bb2a269

0001f788 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1f788:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1f78a:	2300      	movs	r3, #0
   1f78c:	e000      	b.n	1f790 <mfg_read_next_mmr+0x8>
   1f78e:	3301      	adds	r3, #1
   1f790:	4a10      	ldr	r2, [pc, #64]	; (1f7d4 <mfg_read_next_mmr+0x4c>)
   1f792:	6811      	ldr	r1, [r2, #0]
   1f794:	4299      	cmp	r1, r3
   1f796:	dd09      	ble.n	1f7ac <mfg_read_next_mmr+0x24>
        if (mfg_mmrs[i].area_id == area_id) {
   1f798:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1f79c:	490e      	ldr	r1, [pc, #56]	; (1f7d8 <mfg_read_next_mmr+0x50>)
   1f79e:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1f7a2:	4282      	cmp	r2, r0
   1f7a4:	d1f3      	bne.n	1f78e <mfg_read_next_mmr+0x6>
            return SYS_EALREADY;
   1f7a6:	f06f 000a 	mvn.w	r0, #10
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   1f7aa:	bd08      	pop	{r3, pc}
    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1f7ac:	2901      	cmp	r1, #1
   1f7ae:	dc0d      	bgt.n	1f7cc <mfg_read_next_mmr+0x44>
    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1f7b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1f7b4:	4b08      	ldr	r3, [pc, #32]	; (1f7d8 <mfg_read_next_mmr+0x50>)
   1f7b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1f7ba:	f7ff ffaf 	bl	1f71c <mfg_read_mmr>
    if (rc != 0) {
   1f7be:	2800      	cmp	r0, #0
   1f7c0:	d1f3      	bne.n	1f7aa <mfg_read_next_mmr+0x22>
    mfg_num_mmrs++;
   1f7c2:	4a04      	ldr	r2, [pc, #16]	; (1f7d4 <mfg_read_next_mmr+0x4c>)
   1f7c4:	6813      	ldr	r3, [r2, #0]
   1f7c6:	3301      	adds	r3, #1
   1f7c8:	6013      	str	r3, [r2, #0]
    return 0;
   1f7ca:	e7ee      	b.n	1f7aa <mfg_read_next_mmr+0x22>
        return SYS_ENOMEM;
   1f7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f7d0:	e7eb      	b.n	1f7aa <mfg_read_next_mmr+0x22>
   1f7d2:	bf00      	nop
   1f7d4:	20007540 	.word	0x20007540
   1f7d8:	20007528 	.word	0x20007528

0001f7dc <mfg_open_flash_area>:
{
   1f7dc:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1f7de:	7883      	ldrb	r3, [r0, #2]
   1f7e0:	4a0a      	ldr	r2, [pc, #40]	; (1f80c <mfg_open_flash_area+0x30>)
   1f7e2:	6812      	ldr	r2, [r2, #0]
   1f7e4:	4293      	cmp	r3, r2
   1f7e6:	da08      	bge.n	1f7fa <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   1f7e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f7ec:	4a08      	ldr	r2, [pc, #32]	; (1f810 <mfg_open_flash_area+0x34>)
   1f7ee:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1f7f2:	f7fe fde1 	bl	1e3b8 <flash_area_open>
    if (rc != 0) {
   1f7f6:	b930      	cbnz	r0, 1f806 <mfg_open_flash_area+0x2a>
}
   1f7f8:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1f7fa:	2300      	movs	r3, #0
   1f7fc:	461a      	mov	r2, r3
   1f7fe:	4619      	mov	r1, r3
   1f800:	4618      	mov	r0, r3
   1f802:	f7ed fdad 	bl	d360 <__assert_func>
        return SYS_EIO;
   1f806:	f06f 0004 	mvn.w	r0, #4
   1f80a:	e7f5      	b.n	1f7f8 <mfg_open_flash_area+0x1c>
   1f80c:	20007540 	.word	0x20007540
   1f810:	20007528 	.word	0x20007528

0001f814 <mfg_read_tlv_body>:
{
   1f814:	b570      	push	{r4, r5, r6, lr}
   1f816:	b082      	sub	sp, #8
   1f818:	4606      	mov	r6, r0
   1f81a:	460c      	mov	r4, r1
   1f81c:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1f81e:	a901      	add	r1, sp, #4
   1f820:	f7ff ffdc 	bl	1f7dc <mfg_open_flash_area>
    if (rc != 0) {
   1f824:	b108      	cbz	r0, 1f82a <mfg_read_tlv_body+0x16>
}
   1f826:	b002      	add	sp, #8
   1f828:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1f82a:	462a      	mov	r2, r5
   1f82c:	2100      	movs	r1, #0
   1f82e:	4620      	mov	r0, r4
   1f830:	f7f1 fe2f 	bl	11492 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1f834:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1f836:	6871      	ldr	r1, [r6, #4]
   1f838:	42ab      	cmp	r3, r5
   1f83a:	bfa8      	it	ge
   1f83c:	462b      	movge	r3, r5
   1f83e:	4622      	mov	r2, r4
   1f840:	3102      	adds	r1, #2
   1f842:	9801      	ldr	r0, [sp, #4]
   1f844:	f7fe fe18 	bl	1e478 <flash_area_read>
    if (rc != 0) {
   1f848:	2800      	cmp	r0, #0
   1f84a:	d0ec      	beq.n	1f826 <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   1f84c:	f06f 0004 	mvn.w	r0, #4
   1f850:	e7e9      	b.n	1f826 <mfg_read_tlv_body+0x12>

0001f852 <mfg_seek_next>:
{
   1f852:	b510      	push	{r4, lr}
   1f854:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1f856:	4620      	mov	r0, r4
   1f858:	f7ff ff18 	bl	1f68c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1f85c:	f110 0f06 	cmn.w	r0, #6
   1f860:	d0f9      	beq.n	1f856 <mfg_seek_next+0x4>
}
   1f862:	bd10      	pop	{r4, pc}

0001f864 <mfg_seek_next_with_type>:
{
   1f864:	b538      	push	{r3, r4, r5, lr}
   1f866:	4604      	mov	r4, r0
   1f868:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1f86a:	4620      	mov	r0, r4
   1f86c:	f7ff fff1 	bl	1f852 <mfg_seek_next>
        if (rc != 0) {
   1f870:	4602      	mov	r2, r0
   1f872:	b910      	cbnz	r0, 1f87a <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1f874:	7823      	ldrb	r3, [r4, #0]
   1f876:	42ab      	cmp	r3, r5
   1f878:	d1f7      	bne.n	1f86a <mfg_seek_next_with_type+0x6>
}
   1f87a:	4610      	mov	r0, r2
   1f87c:	bd38      	pop	{r3, r4, r5, pc}

0001f87e <mfg_read_tlv_flash_area>:
{
   1f87e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1f880:	220a      	movs	r2, #10
   1f882:	f7ff ffc7 	bl	1f814 <mfg_read_tlv_body>
}
   1f886:	bd08      	pop	{r3, pc}

0001f888 <mfg_read_tlv_mmr_ref>:
{
   1f888:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1f88a:	2201      	movs	r2, #1
   1f88c:	f7ff ffc2 	bl	1f814 <mfg_read_tlv_body>
}
   1f890:	bd08      	pop	{r3, pc}
	...

0001f894 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1f894:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1f896:	4b0f      	ldr	r3, [pc, #60]	; (1f8d4 <mfg_init+0x40>)
   1f898:	781b      	ldrb	r3, [r3, #0]
   1f89a:	b97b      	cbnz	r3, 1f8bc <mfg_init+0x28>
        return;
    }
    mfg_initialized = true;
   1f89c:	4b0d      	ldr	r3, [pc, #52]	; (1f8d4 <mfg_init+0x40>)
   1f89e:	2201      	movs	r2, #1
   1f8a0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1f8a2:	4b0d      	ldr	r3, [pc, #52]	; (1f8d8 <mfg_init+0x44>)
   1f8a4:	781b      	ldrb	r3, [r3, #0]
   1f8a6:	b153      	cbz	r3, 1f8be <mfg_init+0x2a>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1f8a8:	2000      	movs	r0, #0
   1f8aa:	f7ff ff6d 	bl	1f788 <mfg_read_next_mmr>
    if (rc != 0) {
   1f8ae:	4603      	mov	r3, r0
   1f8b0:	b150      	cbz	r0, 1f8c8 <mfg_init+0x34>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1f8b2:	4a0a      	ldr	r2, [pc, #40]	; (1f8dc <mfg_init+0x48>)
   1f8b4:	2103      	movs	r1, #3
   1f8b6:	2080      	movs	r0, #128	; 0x80
   1f8b8:	f7ff fe7a 	bl	1f5b0 <modlog_printf>
}
   1f8bc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f8be:	461a      	mov	r2, r3
   1f8c0:	4619      	mov	r1, r3
   1f8c2:	4618      	mov	r0, r3
   1f8c4:	f7ed fd4c 	bl	d360 <__assert_func>
    rc = mfg_read_mmr_refs();
   1f8c8:	f000 f812 	bl	1f8f0 <mfg_read_mmr_refs>
    if (rc != 0) {
   1f8cc:	4603      	mov	r3, r0
   1f8ce:	2800      	cmp	r0, #0
   1f8d0:	d0f4      	beq.n	1f8bc <mfg_init+0x28>
   1f8d2:	e7ee      	b.n	1f8b2 <mfg_init+0x1e>
   1f8d4:	20007524 	.word	0x20007524
   1f8d8:	20006ca8 	.word	0x20006ca8
   1f8dc:	0002591c 	.word	0x0002591c

0001f8e0 <mfg_open>:
{
   1f8e0:	b510      	push	{r4, lr}
   1f8e2:	4604      	mov	r4, r0
    mfg_init();
   1f8e4:	f7ff ffd6 	bl	1f894 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1f8e8:	2300      	movs	r3, #0
   1f8ea:	6023      	str	r3, [r4, #0]
   1f8ec:	6063      	str	r3, [r4, #4]
}
   1f8ee:	bd10      	pop	{r4, pc}

0001f8f0 <mfg_read_mmr_refs>:
{
   1f8f0:	b500      	push	{lr}
   1f8f2:	b085      	sub	sp, #20
    mfg_open(&reader);
   1f8f4:	a801      	add	r0, sp, #4
   1f8f6:	f7ff fff3 	bl	1f8e0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1f8fa:	2104      	movs	r1, #4
   1f8fc:	eb0d 0001 	add.w	r0, sp, r1
   1f900:	f7ff ffb0 	bl	1f864 <mfg_seek_next_with_type>
        switch (rc) {
   1f904:	f110 0f0f 	cmn.w	r0, #15
   1f908:	d00f      	beq.n	1f92a <mfg_read_mmr_refs+0x3a>
   1f90a:	b978      	cbnz	r0, 1f92c <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1f90c:	a903      	add	r1, sp, #12
   1f90e:	a801      	add	r0, sp, #4
   1f910:	f7ff ffba 	bl	1f888 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1f914:	b950      	cbnz	r0, 1f92c <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1f916:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1f91a:	f7ff ff35 	bl	1f788 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1f91e:	2800      	cmp	r0, #0
   1f920:	d0eb      	beq.n	1f8fa <mfg_read_mmr_refs+0xa>
   1f922:	f110 0f0b 	cmn.w	r0, #11
   1f926:	d0e8      	beq.n	1f8fa <mfg_read_mmr_refs+0xa>
   1f928:	e000      	b.n	1f92c <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   1f92a:	2000      	movs	r0, #0
}
   1f92c:	b005      	add	sp, #20
   1f92e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001f934 <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   1f934:	2901      	cmp	r1, #1
   1f936:	d001      	beq.n	1f93c <reboot_conf_export+0x8>
        func("reboot/reboot_cnt", reboot_cnt_str);
        func("reboot/written", log_reboot_written_str);
    }
    return 0;
}
   1f938:	2000      	movs	r0, #0
   1f93a:	4770      	bx	lr
{
   1f93c:	b510      	push	{r4, lr}
   1f93e:	4604      	mov	r4, r0
        func("reboot/reboot_cnt", reboot_cnt_str);
   1f940:	4903      	ldr	r1, [pc, #12]	; (1f950 <reboot_conf_export+0x1c>)
   1f942:	4804      	ldr	r0, [pc, #16]	; (1f954 <reboot_conf_export+0x20>)
   1f944:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   1f946:	4904      	ldr	r1, [pc, #16]	; (1f958 <reboot_conf_export+0x24>)
   1f948:	4804      	ldr	r0, [pc, #16]	; (1f95c <reboot_conf_export+0x28>)
   1f94a:	47a0      	blx	r4
}
   1f94c:	2000      	movs	r0, #0
   1f94e:	bd10      	pop	{r4, pc}
   1f950:	20007558 	.word	0x20007558
   1f954:	00025938 	.word	0x00025938
   1f958:	20007548 	.word	0x20007548
   1f95c:	0002594c 	.word	0x0002594c

0001f960 <reboot_conf_set>:
    if (argc == 1) {
   1f960:	2801      	cmp	r0, #1
   1f962:	d001      	beq.n	1f968 <reboot_conf_set+0x8>
    return OS_ENOENT;
   1f964:	200a      	movs	r0, #10
}
   1f966:	4770      	bx	lr
{
   1f968:	b538      	push	{r3, r4, r5, lr}
   1f96a:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   1f96c:	680d      	ldr	r5, [r1, #0]
   1f96e:	490d      	ldr	r1, [pc, #52]	; (1f9a4 <reboot_conf_set+0x44>)
   1f970:	4628      	mov	r0, r5
   1f972:	f7f1 fdaf 	bl	114d4 <strcmp>
   1f976:	b130      	cbz	r0, 1f986 <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   1f978:	490b      	ldr	r1, [pc, #44]	; (1f9a8 <reboot_conf_set+0x48>)
   1f97a:	4628      	mov	r0, r5
   1f97c:	f7f1 fdaa 	bl	114d4 <strcmp>
   1f980:	b140      	cbz	r0, 1f994 <reboot_conf_set+0x34>
    return OS_ENOENT;
   1f982:	200a      	movs	r0, #10
}
   1f984:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   1f986:	2302      	movs	r3, #2
   1f988:	4a08      	ldr	r2, [pc, #32]	; (1f9ac <reboot_conf_set+0x4c>)
   1f98a:	2103      	movs	r1, #3
   1f98c:	4620      	mov	r0, r4
   1f98e:	f7f2 fefe 	bl	1278e <conf_value_from_str>
   1f992:	e7f7      	b.n	1f984 <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   1f994:	2301      	movs	r3, #1
   1f996:	4a06      	ldr	r2, [pc, #24]	; (1f9b0 <reboot_conf_set+0x50>)
   1f998:	2103      	movs	r1, #3
   1f99a:	4620      	mov	r0, r4
   1f99c:	f7f2 fef7 	bl	1278e <conf_value_from_str>
   1f9a0:	e7f0      	b.n	1f984 <reboot_conf_set+0x24>
   1f9a2:	bf00      	nop
   1f9a4:	0002595c 	.word	0x0002595c
   1f9a8:	00025968 	.word	0x00025968
   1f9ac:	20007554 	.word	0x20007554
   1f9b0:	20007544 	.word	0x20007544

0001f9b4 <reboot_conf_get>:
    if (argc == 1) {
   1f9b4:	2801      	cmp	r0, #1
   1f9b6:	d11b      	bne.n	1f9f0 <reboot_conf_get+0x3c>
{
   1f9b8:	b510      	push	{r4, lr}
        if (!strcmp(argv[0], "reboot_cnt")) {
   1f9ba:	680c      	ldr	r4, [r1, #0]
   1f9bc:	490d      	ldr	r1, [pc, #52]	; (1f9f4 <reboot_conf_get+0x40>)
   1f9be:	4620      	mov	r0, r4
   1f9c0:	f7f1 fd88 	bl	114d4 <strcmp>
   1f9c4:	b130      	cbz	r0, 1f9d4 <reboot_conf_get+0x20>
        } else if (!strcmp(argv[0], "written")) {
   1f9c6:	490c      	ldr	r1, [pc, #48]	; (1f9f8 <reboot_conf_get+0x44>)
   1f9c8:	4620      	mov	r0, r4
   1f9ca:	f7f1 fd83 	bl	114d4 <strcmp>
   1f9ce:	b140      	cbz	r0, 1f9e2 <reboot_conf_get+0x2e>
    return NULL;
   1f9d0:	2000      	movs	r0, #0
}
   1f9d2:	bd10      	pop	{r4, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   1f9d4:	230c      	movs	r3, #12
   1f9d6:	4a09      	ldr	r2, [pc, #36]	; (1f9fc <reboot_conf_get+0x48>)
   1f9d8:	4909      	ldr	r1, [pc, #36]	; (1fa00 <reboot_conf_get+0x4c>)
   1f9da:	2003      	movs	r0, #3
   1f9dc:	f7f2 ff3c 	bl	12858 <conf_str_from_value>
   1f9e0:	e7f7      	b.n	1f9d2 <reboot_conf_get+0x1e>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   1f9e2:	230c      	movs	r3, #12
   1f9e4:	4a07      	ldr	r2, [pc, #28]	; (1fa04 <reboot_conf_get+0x50>)
   1f9e6:	4908      	ldr	r1, [pc, #32]	; (1fa08 <reboot_conf_get+0x54>)
   1f9e8:	200a      	movs	r0, #10
   1f9ea:	f7f2 ff35 	bl	12858 <conf_str_from_value>
   1f9ee:	e7f0      	b.n	1f9d2 <reboot_conf_get+0x1e>
    return NULL;
   1f9f0:	2000      	movs	r0, #0
}
   1f9f2:	4770      	bx	lr
   1f9f4:	0002595c 	.word	0x0002595c
   1f9f8:	00025968 	.word	0x00025968
   1f9fc:	20007558 	.word	0x20007558
   1fa00:	20007554 	.word	0x20007554
   1fa04:	20007548 	.word	0x20007548
   1fa08:	20007544 	.word	0x20007544

0001fa0c <log_reboot_write>:
{
   1fa0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa0e:	b0d1      	sub	sp, #324	; 0x144
   1fa10:	4606      	mov	r6, r0
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   1fa12:	2300      	movs	r3, #0
   1fa14:	aa46      	add	r2, sp, #280	; 0x118
   1fa16:	a94e      	add	r1, sp, #312	; 0x138
   1fa18:	4839      	ldr	r0, [pc, #228]	; (1fb00 <log_reboot_write+0xf4>)
   1fa1a:	6800      	ldr	r0, [r0, #0]
   1fa1c:	f7fc ffba 	bl	1c994 <imgr_read_info>
    if (rc != 0) {
   1fa20:	4607      	mov	r7, r0
   1fa22:	2800      	cmp	r0, #0
   1fa24:	d15f      	bne.n	1fae6 <log_reboot_write+0xda>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1fa26:	7833      	ldrb	r3, [r6, #0]
    off += snprintf(buf + off, sizeof buf - off,
   1fa28:	2b01      	cmp	r3, #1
   1fa2a:	d00f      	beq.n	1fa4c <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1fa2c:	2b02      	cmp	r3, #2
   1fa2e:	d025      	beq.n	1fa7c <log_reboot_write+0x70>
   1fa30:	2b03      	cmp	r3, #3
   1fa32:	d025      	beq.n	1fa80 <log_reboot_write+0x74>
   1fa34:	2b04      	cmp	r3, #4
   1fa36:	d025      	beq.n	1fa84 <log_reboot_write+0x78>
   1fa38:	2b05      	cmp	r3, #5
   1fa3a:	d025      	beq.n	1fa88 <log_reboot_write+0x7c>
   1fa3c:	2b06      	cmp	r3, #6
   1fa3e:	d025      	beq.n	1fa8c <log_reboot_write+0x80>
   1fa40:	2b07      	cmp	r3, #7
   1fa42:	d001      	beq.n	1fa48 <log_reboot_write+0x3c>
   1fa44:	4b2f      	ldr	r3, [pc, #188]	; (1fb04 <log_reboot_write+0xf8>)
   1fa46:	e002      	b.n	1fa4e <log_reboot_write+0x42>
   1fa48:	4b2f      	ldr	r3, [pc, #188]	; (1fb08 <log_reboot_write+0xfc>)
   1fa4a:	e000      	b.n	1fa4e <log_reboot_write+0x42>
    off += snprintf(buf + off, sizeof buf - off,
   1fa4c:	4b2f      	ldr	r3, [pc, #188]	; (1fb0c <log_reboot_write+0x100>)
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1fa4e:	f89d 2138 	ldrb.w	r2, [sp, #312]	; 0x138
                    ver.iv_minor, ver.iv_revision,
   1fa52:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
   1fa56:	f8bd 013a 	ldrh.w	r0, [sp, #314]	; 0x13a
    off += snprintf(buf + off, sizeof buf - off,
   1fa5a:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
   1fa5c:	9404      	str	r4, [sp, #16]
   1fa5e:	9003      	str	r0, [sp, #12]
   1fa60:	9102      	str	r1, [sp, #8]
   1fa62:	9201      	str	r2, [sp, #4]
   1fa64:	4a2a      	ldr	r2, [pc, #168]	; (1fb10 <log_reboot_write+0x104>)
   1fa66:	8812      	ldrh	r2, [r2, #0]
   1fa68:	9200      	str	r2, [sp, #0]
   1fa6a:	4a2a      	ldr	r2, [pc, #168]	; (1fb14 <log_reboot_write+0x108>)
   1fa6c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1fa70:	a806      	add	r0, sp, #24
   1fa72:	f7f2 f93e 	bl	11cf2 <snprintf>
   1fa76:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1fa78:	463d      	mov	r5, r7
   1fa7a:	e017      	b.n	1faac <log_reboot_write+0xa0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   1fa7c:	4b26      	ldr	r3, [pc, #152]	; (1fb18 <log_reboot_write+0x10c>)
   1fa7e:	e7e6      	b.n	1fa4e <log_reboot_write+0x42>
   1fa80:	4b26      	ldr	r3, [pc, #152]	; (1fb1c <log_reboot_write+0x110>)
   1fa82:	e7e4      	b.n	1fa4e <log_reboot_write+0x42>
   1fa84:	4b26      	ldr	r3, [pc, #152]	; (1fb20 <log_reboot_write+0x114>)
   1fa86:	e7e2      	b.n	1fa4e <log_reboot_write+0x42>
   1fa88:	4b26      	ldr	r3, [pc, #152]	; (1fb24 <log_reboot_write+0x118>)
   1fa8a:	e7e0      	b.n	1fa4e <log_reboot_write+0x42>
   1fa8c:	4b26      	ldr	r3, [pc, #152]	; (1fb28 <log_reboot_write+0x11c>)
   1fa8e:	e7de      	b.n	1fa4e <log_reboot_write+0x42>
                        (unsigned int)hash[i]);
   1fa90:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   1fa94:	446b      	add	r3, sp
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   1fa96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   1fa9a:	4a24      	ldr	r2, [pc, #144]	; (1fb2c <log_reboot_write+0x120>)
   1fa9c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1faa0:	a806      	add	r0, sp, #24
   1faa2:	4420      	add	r0, r4
   1faa4:	f7f2 f925 	bl	11cf2 <snprintf>
   1faa8:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   1faaa:	3501      	adds	r5, #1
   1faac:	2d1f      	cmp	r5, #31
   1faae:	d9ef      	bls.n	1fa90 <log_reboot_write+0x84>
    if (info->file != NULL) {
   1fab0:	6873      	ldr	r3, [r6, #4]
   1fab2:	b14b      	cbz	r3, 1fac8 <log_reboot_write+0xbc>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   1fab4:	68b2      	ldr	r2, [r6, #8]
   1fab6:	9200      	str	r2, [sp, #0]
   1fab8:	4a1d      	ldr	r2, [pc, #116]	; (1fb30 <log_reboot_write+0x124>)
   1faba:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1fabe:	a806      	add	r0, sp, #24
   1fac0:	4420      	add	r0, r4
   1fac2:	f7f2 f916 	bl	11cf2 <snprintf>
   1fac6:	4404      	add	r4, r0
    if (info->pc != 0) {
   1fac8:	68f3      	ldr	r3, [r6, #12]
   1faca:	b97b      	cbnz	r3, 1faec <log_reboot_write+0xe0>
    if (off > sizeof buf) {
   1facc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1fad0:	d901      	bls.n	1fad6 <log_reboot_write+0xca>
        off = sizeof buf;
   1fad2:	f44f 7480 	mov.w	r4, #256	; 0x100
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   1fad6:	b2a4      	uxth	r4, r4
   1fad8:	9400      	str	r4, [sp, #0]
   1fada:	ab06      	add	r3, sp, #24
   1fadc:	2200      	movs	r2, #0
   1fade:	2104      	movs	r1, #4
   1fae0:	2006      	movs	r0, #6
   1fae2:	f7ff fd45 	bl	1f570 <modlog_append>
}
   1fae6:	4638      	mov	r0, r7
   1fae8:	b051      	add	sp, #324	; 0x144
   1faea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   1faec:	4a11      	ldr	r2, [pc, #68]	; (1fb34 <log_reboot_write+0x128>)
   1faee:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   1faf2:	a806      	add	r0, sp, #24
   1faf4:	4420      	add	r0, r4
   1faf6:	f7f2 f8fc 	bl	11cf2 <snprintf>
   1fafa:	4404      	add	r4, r0
   1fafc:	e7e6      	b.n	1facc <log_reboot_write+0xc0>
   1fafe:	bf00      	nop
   1fb00:	20007564 	.word	0x20007564
   1fb04:	00025870 	.word	0x00025870
   1fb08:	000259ac 	.word	0x000259ac
   1fb0c:	00025970 	.word	0x00025970
   1fb10:	20007554 	.word	0x20007554
   1fb14:	000259bc 	.word	0x000259bc
   1fb18:	00025984 	.word	0x00025984
   1fb1c:	00025990 	.word	0x00025990
   1fb20:	00025998 	.word	0x00025998
   1fb24:	000259a0 	.word	0x000259a0
   1fb28:	00025978 	.word	0x00025978
   1fb2c:	000259e4 	.word	0x000259e4
   1fb30:	000259ec 	.word	0x000259ec
   1fb34:	000259f8 	.word	0x000259f8

0001fb38 <log_reboot_init_console>:
{
   1fb38:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   1fb3a:	f7fe ffd9 	bl	1eaf0 <log_console_get>
   1fb3e:	4601      	mov	r1, r0
   1fb40:	2300      	movs	r3, #0
   1fb42:	461a      	mov	r2, r3
   1fb44:	2006      	movs	r0, #6
   1fb46:	f7ff fcf9 	bl	1f53c <modlog_register>
}
   1fb4a:	bd08      	pop	{r3, pc}

0001fb4c <log_reboot>:
{
   1fb4c:	b510      	push	{r4, lr}
    if (log_reboot_written) {
   1fb4e:	4b0a      	ldr	r3, [pc, #40]	; (1fb78 <log_reboot+0x2c>)
   1fb50:	f993 3000 	ldrsb.w	r3, [r3]
   1fb54:	b113      	cbz	r3, 1fb5c <log_reboot+0x10>
        return 0;
   1fb56:	2400      	movs	r4, #0
}
   1fb58:	4620      	mov	r0, r4
   1fb5a:	bd10      	pop	{r4, pc}
    rc = log_reboot_write(info);
   1fb5c:	f7ff ff56 	bl	1fa0c <log_reboot_write>
    if (rc != 0) {
   1fb60:	4604      	mov	r4, r0
   1fb62:	2800      	cmp	r0, #0
   1fb64:	d1f8      	bne.n	1fb58 <log_reboot+0xc>
    log_reboot_written = 1;
   1fb66:	4b04      	ldr	r3, [pc, #16]	; (1fb78 <log_reboot+0x2c>)
   1fb68:	2201      	movs	r2, #1
   1fb6a:	701a      	strb	r2, [r3, #0]
    conf_save_one("reboot/written", "1");
   1fb6c:	4903      	ldr	r1, [pc, #12]	; (1fb7c <log_reboot+0x30>)
   1fb6e:	4804      	ldr	r0, [pc, #16]	; (1fb80 <log_reboot+0x34>)
   1fb70:	f7f2 fd14 	bl	1259c <conf_save_one>
    return 0;
   1fb74:	e7f0      	b.n	1fb58 <log_reboot+0xc>
   1fb76:	bf00      	nop
   1fb78:	20007544 	.word	0x20007544
   1fb7c:	00025a04 	.word	0x00025a04
   1fb80:	0002594c 	.word	0x0002594c

0001fb84 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   1fb84:	b510      	push	{r4, lr}
   1fb86:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1fb88:	4b10      	ldr	r3, [pc, #64]	; (1fbcc <log_reboot_pkg_init+0x48>)
   1fb8a:	781b      	ldrb	r3, [r3, #0]
   1fb8c:	b1c3      	cbz	r3, 1fbc0 <log_reboot_pkg_init+0x3c>

    rc = conf_register(&reboot_conf_handler);
   1fb8e:	4810      	ldr	r0, [pc, #64]	; (1fbd0 <log_reboot_pkg_init+0x4c>)
   1fb90:	f7f2 fdb8 	bl	12704 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1fb94:	b138      	cbz	r0, 1fba6 <log_reboot_pkg_init+0x22>
   1fb96:	2000      	movs	r0, #0
   1fb98:	9000      	str	r0, [sp, #0]
   1fb9a:	4b0e      	ldr	r3, [pc, #56]	; (1fbd4 <log_reboot_pkg_init+0x50>)
   1fb9c:	681c      	ldr	r4, [r3, #0]
   1fb9e:	4603      	mov	r3, r0
   1fba0:	4602      	mov	r2, r0
   1fba2:	4601      	mov	r1, r0
   1fba4:	47a0      	blx	r4
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   1fba6:	f7ff ffc7 	bl	1fb38 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1fbaa:	b138      	cbz	r0, 1fbbc <log_reboot_pkg_init+0x38>
   1fbac:	2000      	movs	r0, #0
   1fbae:	9000      	str	r0, [sp, #0]
   1fbb0:	4b08      	ldr	r3, [pc, #32]	; (1fbd4 <log_reboot_pkg_init+0x50>)
   1fbb2:	681c      	ldr	r4, [r3, #0]
   1fbb4:	4603      	mov	r3, r0
   1fbb6:	4602      	mov	r2, r0
   1fbb8:	4601      	mov	r1, r0
   1fbba:	47a0      	blx	r4
#endif
}
   1fbbc:	b002      	add	sp, #8
   1fbbe:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1fbc0:	461a      	mov	r2, r3
   1fbc2:	4619      	mov	r1, r3
   1fbc4:	4618      	mov	r0, r3
   1fbc6:	f7ed fbcb 	bl	d360 <__assert_func>
   1fbca:	bf00      	nop
   1fbcc:	20006ca8 	.word	0x20006ca8
   1fbd0:	200016e4 	.word	0x200016e4
   1fbd4:	2000143c 	.word	0x2000143c

0001fbd8 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1fbd8:	f890 3020 	ldrb.w	r3, [r0, #32]
   1fbdc:	3b01      	subs	r3, #1
   1fbde:	f880 3020 	strb.w	r3, [r0, #32]
}
   1fbe2:	4770      	bx	lr

0001fbe4 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1fbe4:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1fbe6:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1fbea:	d104      	bne.n	1fbf6 <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1fbec:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1fbf0:	b11b      	cbz	r3, 1fbfa <rwlock_read_must_block+0x16>
   1fbf2:	2001      	movs	r0, #1
   1fbf4:	4770      	bx	lr
   1fbf6:	2001      	movs	r0, #1
   1fbf8:	4770      	bx	lr
   1fbfa:	2000      	movs	r0, #0
}
   1fbfc:	4770      	bx	lr

0001fbfe <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1fbfe:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1fc00:	b923      	cbnz	r3, 1fc0c <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1fc02:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1fc06:	b11b      	cbz	r3, 1fc10 <rwlock_write_must_block+0x12>
   1fc08:	2001      	movs	r0, #1
   1fc0a:	4770      	bx	lr
   1fc0c:	2001      	movs	r0, #1
   1fc0e:	4770      	bx	lr
   1fc10:	2000      	movs	r0, #0
}
   1fc12:	4770      	bx	lr

0001fc14 <rwlock_unblock>:
{
   1fc14:	b510      	push	{r4, lr}
   1fc16:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1fc18:	7fc3      	ldrb	r3, [r0, #31]
   1fc1a:	b91b      	cbnz	r3, 1fc24 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1fc1c:	7f83      	ldrb	r3, [r0, #30]
   1fc1e:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1fc22:	e010      	b.n	1fc46 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1fc24:	2301      	movs	r3, #1
   1fc26:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1fc2a:	3014      	adds	r0, #20
   1fc2c:	f7ee fb8e 	bl	e34c <os_sem_release>
        lock->pending_writers--;
   1fc30:	7fe3      	ldrb	r3, [r4, #31]
   1fc32:	3b01      	subs	r3, #1
   1fc34:	77e3      	strb	r3, [r4, #31]
   1fc36:	e009      	b.n	1fc4c <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1fc38:	f104 000c 	add.w	r0, r4, #12
   1fc3c:	f7ee fb86 	bl	e34c <os_sem_release>
            lock->pending_readers--;
   1fc40:	7fa3      	ldrb	r3, [r4, #30]
   1fc42:	3b01      	subs	r3, #1
   1fc44:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1fc46:	7fa3      	ldrb	r3, [r4, #30]
   1fc48:	2b00      	cmp	r3, #0
   1fc4a:	d1f5      	bne.n	1fc38 <rwlock_unblock+0x24>
}
   1fc4c:	bd10      	pop	{r4, pc}

0001fc4e <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1fc4e:	b538      	push	{r3, r4, r5, lr}
   1fc50:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fc52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc56:	f7ee f90f 	bl	de78 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	f7ff ffc2 	bl	1fbe4 <rwlock_read_must_block>
   1fc60:	b140      	cbz	r0, 1fc74 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1fc62:	7fa3      	ldrb	r3, [r4, #30]
   1fc64:	3301      	adds	r3, #1
   1fc66:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1fc68:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1fc6a:	4620      	mov	r0, r4
   1fc6c:	f7ee f8a8 	bl	ddc0 <os_mutex_release>

    if (acquired) {
   1fc70:	b12d      	cbz	r5, 1fc7e <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1fc72:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1fc74:	7f23      	ldrb	r3, [r4, #28]
   1fc76:	3301      	adds	r3, #1
   1fc78:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1fc7a:	2501      	movs	r5, #1
   1fc7c:	e7f5      	b.n	1fc6a <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1fc7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc82:	f104 000c 	add.w	r0, r4, #12
   1fc86:	f7ee fb93 	bl	e3b0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fc8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc8e:	4620      	mov	r0, r4
   1fc90:	f7ee f8f2 	bl	de78 <os_mutex_pend>
    lock->num_readers++;
   1fc94:	7f23      	ldrb	r3, [r4, #28]
   1fc96:	3301      	adds	r3, #1
   1fc98:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1fc9a:	4620      	mov	r0, r4
   1fc9c:	f7ff ff9c 	bl	1fbd8 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1fca0:	4620      	mov	r0, r4
   1fca2:	f7ee f88d 	bl	ddc0 <os_mutex_release>
   1fca6:	e7e4      	b.n	1fc72 <rwlock_acquire_read+0x24>

0001fca8 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1fca8:	b510      	push	{r4, lr}
   1fcaa:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fcac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fcb0:	f7ee f8e2 	bl	de78 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1fcb4:	7f23      	ldrb	r3, [r4, #28]
   1fcb6:	3b01      	subs	r3, #1
   1fcb8:	b2db      	uxtb	r3, r3
   1fcba:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1fcbc:	b11b      	cbz	r3, 1fcc6 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1fcbe:	4620      	mov	r0, r4
   1fcc0:	f7ee f87e 	bl	ddc0 <os_mutex_release>
}
   1fcc4:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1fcc6:	4620      	mov	r0, r4
   1fcc8:	f7ff ffa4 	bl	1fc14 <rwlock_unblock>
   1fccc:	e7f7      	b.n	1fcbe <rwlock_release_read+0x16>

0001fcce <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1fcce:	b538      	push	{r3, r4, r5, lr}
   1fcd0:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fcd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fcd6:	f7ee f8cf 	bl	de78 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1fcda:	4620      	mov	r0, r4
   1fcdc:	f7ff ff8f 	bl	1fbfe <rwlock_write_must_block>
   1fce0:	b140      	cbz	r0, 1fcf4 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1fce2:	7fe3      	ldrb	r3, [r4, #31]
   1fce4:	3301      	adds	r3, #1
   1fce6:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1fce8:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1fcea:	4620      	mov	r0, r4
   1fcec:	f7ee f868 	bl	ddc0 <os_mutex_release>

    if (acquired) {
   1fcf0:	b11d      	cbz	r5, 1fcfa <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1fcf2:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1fcf4:	2501      	movs	r5, #1
   1fcf6:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1fcf8:	e7f7      	b.n	1fcea <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1fcfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fcfe:	f104 0014 	add.w	r0, r4, #20
   1fd02:	f7ee fb55 	bl	e3b0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fd06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fd0a:	4620      	mov	r0, r4
   1fd0c:	f7ee f8b4 	bl	de78 <os_mutex_pend>
    lock->active_writer = true;
   1fd10:	2301      	movs	r3, #1
   1fd12:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1fd14:	4620      	mov	r0, r4
   1fd16:	f7ff ff5f 	bl	1fbd8 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1fd1a:	4620      	mov	r0, r4
   1fd1c:	f7ee f850 	bl	ddc0 <os_mutex_release>
   1fd20:	e7e7      	b.n	1fcf2 <rwlock_acquire_write+0x24>

0001fd22 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1fd22:	b510      	push	{r4, lr}
   1fd24:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1fd26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fd2a:	f7ee f8a5 	bl	de78 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1fd2e:	2300      	movs	r3, #0
   1fd30:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1fd32:	4620      	mov	r0, r4
   1fd34:	f7ff ff6e 	bl	1fc14 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1fd38:	4620      	mov	r0, r4
   1fd3a:	f7ee f841 	bl	ddc0 <os_mutex_release>
}
   1fd3e:	bd10      	pop	{r4, pc}

0001fd40 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1fd40:	b510      	push	{r4, lr}
   1fd42:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1fd44:	2224      	movs	r2, #36	; 0x24
   1fd46:	2100      	movs	r1, #0
   1fd48:	f7f1 fba3 	bl	11492 <memset>

    rc = os_mutex_init(&lock->mtx);
   1fd4c:	4620      	mov	r0, r4
   1fd4e:	f7ee f82d 	bl	ddac <os_mutex_init>
    if (rc != 0) {
   1fd52:	b100      	cbz	r0, 1fd56 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1fd54:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1fd56:	2100      	movs	r1, #0
   1fd58:	f104 000c 	add.w	r0, r4, #12
   1fd5c:	f7ee faee 	bl	e33c <os_sem_init>
    if (rc != 0) {
   1fd60:	2800      	cmp	r0, #0
   1fd62:	d1f7      	bne.n	1fd54 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1fd64:	2100      	movs	r1, #0
   1fd66:	f104 0014 	add.w	r0, r4, #20
   1fd6a:	f7ee fae7 	bl	e33c <os_sem_init>
    if (rc != 0) {
   1fd6e:	e7f1      	b.n	1fd54 <rwlock_init+0x14>

0001fd70 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   1fd70:	2801      	cmp	r0, #1
   1fd72:	d100      	bne.n	1fd76 <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   1fd74:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   1fd76:	2002      	movs	r0, #2
   1fd78:	e7fc      	b.n	1fd74 <boot_flag_decode+0x4>

0001fd7a <boot_magic_off>:
}

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   1fd7a:	6880      	ldr	r0, [r0, #8]
}
   1fd7c:	3810      	subs	r0, #16
   1fd7e:	4770      	bx	lr

0001fd80 <boot_copy_done_off>:
}

static uint32_t
boot_copy_done_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   1fd80:	6880      	ldr	r0, [r0, #8]
}
   1fd82:	3820      	subs	r0, #32
   1fd84:	4770      	bx	lr

0001fd86 <boot_image_ok_off>:

static uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   1fd86:	6880      	ldr	r0, [r0, #8]
}
   1fd88:	3818      	subs	r0, #24
   1fd8a:	4770      	bx	lr

0001fd8c <boot_magic_decode>:
{
   1fd8c:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1fd8e:	2210      	movs	r2, #16
   1fd90:	4903      	ldr	r1, [pc, #12]	; (1fda0 <boot_magic_decode+0x14>)
   1fd92:	f7f1 fb4d 	bl	11430 <memcmp>
   1fd96:	b108      	cbz	r0, 1fd9c <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   1fd98:	2002      	movs	r0, #2
}
   1fd9a:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   1fd9c:	2001      	movs	r0, #1
   1fd9e:	e7fc      	b.n	1fd9a <boot_magic_decode+0xe>
   1fda0:	00025a58 	.word	0x00025a58

0001fda4 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   1fda4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fda6:	b083      	sub	sp, #12
   1fda8:	4605      	mov	r5, r0
   1fdaa:	460e      	mov	r6, r1
   1fdac:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   1fdae:	f7fe fb9f 	bl	1e4f0 <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   1fdb2:	2808      	cmp	r0, #8
   1fdb4:	d813      	bhi.n	1fdde <boot_write_trailer_byte+0x3a>
   1fdb6:	4604      	mov	r4, r0
    erased_val = flash_area_erased_val(fap);
   1fdb8:	4628      	mov	r0, r5
   1fdba:	f7fe fb9e 	bl	1e4fa <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   1fdbe:	2208      	movs	r2, #8
   1fdc0:	b2c1      	uxtb	r1, r0
   1fdc2:	4668      	mov	r0, sp
   1fdc4:	f7f1 fb65 	bl	11492 <memset>
    buf[0] = val;
   1fdc8:	f88d 7000 	strb.w	r7, [sp]

    rc = flash_area_write(fap, off, buf, align);
   1fdcc:	4623      	mov	r3, r4
   1fdce:	466a      	mov	r2, sp
   1fdd0:	4631      	mov	r1, r6
   1fdd2:	4628      	mov	r0, r5
   1fdd4:	f7fe fb64 	bl	1e4a0 <flash_area_write>
    if (rc != 0) {
   1fdd8:	b938      	cbnz	r0, 1fdea <boot_write_trailer_byte+0x46>
        return BOOT_EFLASH;
    }

    return 0;
}
   1fdda:	b003      	add	sp, #12
   1fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(align <= BOOT_MAX_ALIGN);
   1fdde:	2300      	movs	r3, #0
   1fde0:	461a      	mov	r2, r3
   1fde2:	4619      	mov	r1, r3
   1fde4:	4618      	mov	r0, r3
   1fde6:	f7ed fabb 	bl	d360 <__assert_func>
        return BOOT_EFLASH;
   1fdea:	2001      	movs	r0, #1
   1fdec:	e7f5      	b.n	1fdda <boot_write_trailer_byte+0x36>

0001fdee <boot_magic_compatible_check>:
    switch (tbl_val) {
   1fdee:	2804      	cmp	r0, #4
   1fdf0:	d00a      	beq.n	1fe08 <boot_magic_compatible_check+0x1a>
   1fdf2:	2805      	cmp	r0, #5
   1fdf4:	d103      	bne.n	1fdfe <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   1fdf6:	1e48      	subs	r0, r1, #1
   1fdf8:	bf18      	it	ne
   1fdfa:	2001      	movne	r0, #1
   1fdfc:	4770      	bx	lr
        return tbl_val == val;
   1fdfe:	4288      	cmp	r0, r1
   1fe00:	bf14      	ite	ne
   1fe02:	2000      	movne	r0, #0
   1fe04:	2001      	moveq	r0, #1
   1fe06:	4770      	bx	lr
    switch (tbl_val) {
   1fe08:	2001      	movs	r0, #1
}
   1fe0a:	4770      	bx	lr

0001fe0c <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   1fe0c:	6880      	ldr	r0, [r0, #8]
}
   1fe0e:	3828      	subs	r0, #40	; 0x28
   1fe10:	4770      	bx	lr

0001fe12 <boot_read_swap_state>:
{
   1fe12:	b530      	push	{r4, r5, lr}
   1fe14:	b085      	sub	sp, #20
   1fe16:	4604      	mov	r4, r0
   1fe18:	460d      	mov	r5, r1
    off = boot_magic_off(fap);
   1fe1a:	f7ff ffae 	bl	1fd7a <boot_magic_off>
   1fe1e:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   1fe20:	2310      	movs	r3, #16
   1fe22:	466a      	mov	r2, sp
   1fe24:	4620      	mov	r0, r4
   1fe26:	f7fe fb80 	bl	1e52a <flash_area_read_is_empty>
    if (rc < 0) {
   1fe2a:	2800      	cmp	r0, #0
   1fe2c:	db45      	blt.n	1feba <boot_read_swap_state+0xa8>
    if (rc == 1) {
   1fe2e:	2801      	cmp	r0, #1
   1fe30:	d039      	beq.n	1fea6 <boot_read_swap_state+0x94>
        state->magic = boot_magic_decode(magic);
   1fe32:	4668      	mov	r0, sp
   1fe34:	f7ff ffaa 	bl	1fd8c <boot_magic_decode>
   1fe38:	7028      	strb	r0, [r5, #0]
    off = boot_swap_type_off(fap);
   1fe3a:	4620      	mov	r0, r4
   1fe3c:	f7ff ffe6 	bl	1fe0c <boot_swap_type_off>
   1fe40:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   1fe42:	2301      	movs	r3, #1
   1fe44:	18ea      	adds	r2, r5, r3
   1fe46:	4620      	mov	r0, r4
   1fe48:	f7fe fb6f 	bl	1e52a <flash_area_read_is_empty>
    if (rc < 0) {
   1fe4c:	2800      	cmp	r0, #0
   1fe4e:	db37      	blt.n	1fec0 <boot_read_swap_state+0xae>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   1fe50:	2801      	cmp	r0, #1
   1fe52:	d002      	beq.n	1fe5a <boot_read_swap_state+0x48>
   1fe54:	786b      	ldrb	r3, [r5, #1]
   1fe56:	2b04      	cmp	r3, #4
   1fe58:	d901      	bls.n	1fe5e <boot_read_swap_state+0x4c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1fe5a:	2301      	movs	r3, #1
   1fe5c:	706b      	strb	r3, [r5, #1]
    off = boot_copy_done_off(fap);
   1fe5e:	4620      	mov	r0, r4
   1fe60:	f7ff ff8e 	bl	1fd80 <boot_copy_done_off>
   1fe64:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   1fe66:	2301      	movs	r3, #1
   1fe68:	1caa      	adds	r2, r5, #2
   1fe6a:	4620      	mov	r0, r4
   1fe6c:	f7fe fb5d 	bl	1e52a <flash_area_read_is_empty>
    if (rc < 0) {
   1fe70:	2800      	cmp	r0, #0
   1fe72:	db27      	blt.n	1fec4 <boot_read_swap_state+0xb2>
    if (rc == 1) {
   1fe74:	2801      	cmp	r0, #1
   1fe76:	d019      	beq.n	1feac <boot_read_swap_state+0x9a>
        state->copy_done = boot_flag_decode(state->copy_done);
   1fe78:	78a8      	ldrb	r0, [r5, #2]
   1fe7a:	f7ff ff79 	bl	1fd70 <boot_flag_decode>
   1fe7e:	70a8      	strb	r0, [r5, #2]
    off = boot_image_ok_off(fap);
   1fe80:	4620      	mov	r0, r4
   1fe82:	f7ff ff80 	bl	1fd86 <boot_image_ok_off>
   1fe86:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   1fe88:	2301      	movs	r3, #1
   1fe8a:	1cea      	adds	r2, r5, #3
   1fe8c:	4620      	mov	r0, r4
   1fe8e:	f7fe fb4c 	bl	1e52a <flash_area_read_is_empty>
    if (rc < 0) {
   1fe92:	2800      	cmp	r0, #0
   1fe94:	db18      	blt.n	1fec8 <boot_read_swap_state+0xb6>
    if (rc == 1) {
   1fe96:	2801      	cmp	r0, #1
   1fe98:	d00b      	beq.n	1feb2 <boot_read_swap_state+0xa0>
        state->image_ok = boot_flag_decode(state->image_ok);
   1fe9a:	78e8      	ldrb	r0, [r5, #3]
   1fe9c:	f7ff ff68 	bl	1fd70 <boot_flag_decode>
   1fea0:	70e8      	strb	r0, [r5, #3]
    return 0;
   1fea2:	2000      	movs	r0, #0
   1fea4:	e00a      	b.n	1febc <boot_read_swap_state+0xaa>
        state->magic = BOOT_MAGIC_UNSET;
   1fea6:	2303      	movs	r3, #3
   1fea8:	702b      	strb	r3, [r5, #0]
   1feaa:	e7c6      	b.n	1fe3a <boot_read_swap_state+0x28>
        state->copy_done = BOOT_FLAG_UNSET;
   1feac:	2303      	movs	r3, #3
   1feae:	70ab      	strb	r3, [r5, #2]
   1feb0:	e7e6      	b.n	1fe80 <boot_read_swap_state+0x6e>
        state->image_ok = BOOT_FLAG_UNSET;
   1feb2:	2303      	movs	r3, #3
   1feb4:	70eb      	strb	r3, [r5, #3]
    return 0;
   1feb6:	2000      	movs	r0, #0
   1feb8:	e000      	b.n	1febc <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1feba:	2001      	movs	r0, #1
}
   1febc:	b005      	add	sp, #20
   1febe:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   1fec0:	2001      	movs	r0, #1
   1fec2:	e7fb      	b.n	1febc <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fec4:	2001      	movs	r0, #1
   1fec6:	e7f9      	b.n	1febc <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   1fec8:	2001      	movs	r0, #1
   1feca:	e7f7      	b.n	1febc <boot_read_swap_state+0xaa>

0001fecc <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
   1fecc:	1e43      	subs	r3, r0, #1
   1fece:	2b02      	cmp	r3, #2
   1fed0:	d901      	bls.n	1fed6 <boot_read_swap_state_by_id+0xa>
        return BOOT_EBADARGS;
   1fed2:	2007      	movs	r0, #7
}
   1fed4:	4770      	bx	lr
{
   1fed6:	b510      	push	{r4, lr}
   1fed8:	b082      	sub	sp, #8
   1feda:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   1fedc:	a901      	add	r1, sp, #4
   1fede:	b2c0      	uxtb	r0, r0
   1fee0:	f7fe fa6a 	bl	1e3b8 <flash_area_open>
        if (rc != 0) {
   1fee4:	b110      	cbz	r0, 1feec <boot_read_swap_state_by_id+0x20>
            return BOOT_EFLASH;
   1fee6:	2001      	movs	r0, #1
}
   1fee8:	b002      	add	sp, #8
   1feea:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   1feec:	4621      	mov	r1, r4
   1feee:	9801      	ldr	r0, [sp, #4]
   1fef0:	f7ff ff8f 	bl	1fe12 <boot_read_swap_state>
    return rc;
   1fef4:	e7f8      	b.n	1fee8 <boot_read_swap_state_by_id+0x1c>
	...

0001fef8 <boot_write_magic>:
{
   1fef8:	b510      	push	{r4, lr}
   1fefa:	4604      	mov	r4, r0
    off = boot_magic_off(fap);
   1fefc:	f7ff ff3d 	bl	1fd7a <boot_magic_off>
   1ff00:	4601      	mov	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1ff02:	2310      	movs	r3, #16
   1ff04:	4a03      	ldr	r2, [pc, #12]	; (1ff14 <boot_write_magic+0x1c>)
   1ff06:	4620      	mov	r0, r4
   1ff08:	f7fe faca 	bl	1e4a0 <flash_area_write>
    if (rc != 0) {
   1ff0c:	b900      	cbnz	r0, 1ff10 <boot_write_magic+0x18>
}
   1ff0e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   1ff10:	2001      	movs	r0, #1
   1ff12:	e7fc      	b.n	1ff0e <boot_write_magic+0x16>
   1ff14:	00025a58 	.word	0x00025a58

0001ff18 <boot_write_image_ok>:
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   1ff18:	b510      	push	{r4, lr}
   1ff1a:	4604      	mov	r4, r0
    uint32_t off;

    off = boot_image_ok_off(fap);
   1ff1c:	f7ff ff33 	bl	1fd86 <boot_image_ok_off>
   1ff20:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   1ff22:	2201      	movs	r2, #1
   1ff24:	4620      	mov	r0, r4
   1ff26:	f7ff ff3d 	bl	1fda4 <boot_write_trailer_byte>
}
   1ff2a:	bd10      	pop	{r4, pc}

0001ff2c <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   1ff2c:	b538      	push	{r3, r4, r5, lr}
   1ff2e:	4604      	mov	r4, r0
   1ff30:	460d      	mov	r5, r1
    uint32_t off;

    off = boot_swap_type_off(fap);
   1ff32:	f7ff ff6b 	bl	1fe0c <boot_swap_type_off>
   1ff36:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   1ff38:	462a      	mov	r2, r5
   1ff3a:	4620      	mov	r0, r4
   1ff3c:	f7ff ff32 	bl	1fda4 <boot_write_trailer_byte>
}
   1ff40:	bd38      	pop	{r3, r4, r5, pc}
	...

0001ff44 <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1ff44:	b530      	push	{r4, r5, lr}
   1ff46:	b083      	sub	sp, #12
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
   1ff48:	a901      	add	r1, sp, #4
   1ff4a:	2001      	movs	r0, #1
   1ff4c:	f7ff ffbe 	bl	1fecc <boot_read_swap_state_by_id>
    if (rc) {
   1ff50:	2800      	cmp	r0, #0
   1ff52:	d142      	bne.n	1ffda <boot_swap_type+0x96>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1ff54:	4669      	mov	r1, sp
   1ff56:	2002      	movs	r0, #2
   1ff58:	f7ff ffb8 	bl	1fecc <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   1ff5c:	2800      	cmp	r0, #0
   1ff5e:	d13e      	bne.n	1ffde <boot_swap_type+0x9a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1ff60:	2400      	movs	r4, #0
   1ff62:	e007      	b.n	1ff74 <boot_swap_type+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1ff64:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1ff66:	2b04      	cmp	r3, #4
   1ff68:	d029      	beq.n	1ffbe <boot_swap_type+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1ff6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1ff6e:	4293      	cmp	r3, r2
   1ff70:	d025      	beq.n	1ffbe <boot_swap_type+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1ff72:	3401      	adds	r4, #1
   1ff74:	2c02      	cmp	r4, #2
   1ff76:	d82d      	bhi.n	1ffd4 <boot_swap_type+0x90>
        table = boot_swap_tables + i;
   1ff78:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1ff7c:	4a19      	ldr	r2, [pc, #100]	; (1ffe4 <boot_swap_type+0xa0>)
   1ff7e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1ff82:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1ff86:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   1ff8a:	f7ff ff30 	bl	1fdee <boot_magic_compatible_check>
   1ff8e:	2800      	cmp	r0, #0
   1ff90:	d0ef      	beq.n	1ff72 <boot_swap_type+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   1ff92:	f89d 1000 	ldrb.w	r1, [sp]
   1ff96:	7868      	ldrb	r0, [r5, #1]
   1ff98:	f7ff ff29 	bl	1fdee <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1ff9c:	2800      	cmp	r0, #0
   1ff9e:	d0e8      	beq.n	1ff72 <boot_swap_type+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1ffa0:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   1ffa2:	2b04      	cmp	r3, #4
   1ffa4:	d003      	beq.n	1ffae <boot_swap_type+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1ffa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1ffaa:	4293      	cmp	r3, r2
   1ffac:	d1e1      	bne.n	1ff72 <boot_swap_type+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1ffae:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1ffb0:	2b04      	cmp	r3, #4
   1ffb2:	d0d7      	beq.n	1ff64 <boot_swap_type+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1ffb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1ffb8:	4293      	cmp	r3, r2
   1ffba:	d1da      	bne.n	1ff72 <boot_swap_type+0x2e>
   1ffbc:	e7d2      	b.n	1ff64 <boot_swap_type+0x20>
            BOOT_LOG_INF("Swap type: %s",
   1ffbe:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   1ffc0:	1e83      	subs	r3, r0, #2
   1ffc2:	b2db      	uxtb	r3, r3
   1ffc4:	2b02      	cmp	r3, #2
   1ffc6:	d906      	bls.n	1ffd6 <boot_swap_type+0x92>
   1ffc8:	2300      	movs	r3, #0
   1ffca:	461a      	mov	r2, r3
   1ffcc:	4619      	mov	r1, r3
   1ffce:	4618      	mov	r0, r3
   1ffd0:	f7ed f9c6 	bl	d360 <__assert_func>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1ffd4:	2001      	movs	r0, #1
}
   1ffd6:	b003      	add	sp, #12
   1ffd8:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   1ffda:	20ff      	movs	r0, #255	; 0xff
   1ffdc:	e7fb      	b.n	1ffd6 <boot_swap_type+0x92>
        return BOOT_SWAP_TYPE_PANIC;
   1ffde:	20ff      	movs	r0, #255	; 0xff
   1ffe0:	e7f9      	b.n	1ffd6 <boot_swap_type+0x92>
   1ffe2:	bf00      	nop
   1ffe4:	00025a68 	.word	0x00025a68

0001ffe8 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1ffe8:	b530      	push	{r4, r5, lr}
   1ffea:	b083      	sub	sp, #12
   1ffec:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1ffee:	4669      	mov	r1, sp
   1fff0:	2002      	movs	r0, #2
   1fff2:	f7ff ff6b 	bl	1fecc <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   1fff6:	4603      	mov	r3, r0
   1fff8:	bb78      	cbnz	r0, 2005a <boot_set_pending+0x72>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   1fffa:	f89d 5000 	ldrb.w	r5, [sp]
   1fffe:	2d02      	cmp	r5, #2
   20000:	d025      	beq.n	2004e <boot_set_pending+0x66>
   20002:	2d03      	cmp	r5, #3
   20004:	d007      	beq.n	20016 <boot_set_pending+0x2e>
   20006:	2d01      	cmp	r5, #1
   20008:	d027      	beq.n	2005a <boot_set_pending+0x72>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   2000a:	2300      	movs	r3, #0
   2000c:	461a      	mov	r2, r3
   2000e:	4619      	mov	r1, r3
   20010:	4618      	mov	r0, r3
   20012:	f7ed f9a5 	bl	d360 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   20016:	a901      	add	r1, sp, #4
   20018:	2002      	movs	r0, #2
   2001a:	f7fe f9cd 	bl	1e3b8 <flash_area_open>
        if (rc != 0) {
   2001e:	b148      	cbz	r0, 20034 <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
   20020:	2301      	movs	r3, #1
        if (rc == 0) {
   20022:	b9d3      	cbnz	r3, 2005a <boot_set_pending+0x72>
            if (permanent) {
   20024:	b904      	cbnz	r4, 20028 <boot_set_pending+0x40>
                swap_type = BOOT_SWAP_TYPE_TEST;
   20026:	2502      	movs	r5, #2
            rc = boot_write_swap_type(fap, swap_type);
   20028:	4629      	mov	r1, r5
   2002a:	9801      	ldr	r0, [sp, #4]
   2002c:	f7ff ff7e 	bl	1ff2c <boot_write_swap_type>
   20030:	4603      	mov	r3, r0
   20032:	e012      	b.n	2005a <boot_set_pending+0x72>
            rc = boot_write_magic(fap);
   20034:	9801      	ldr	r0, [sp, #4]
   20036:	f7ff ff5f 	bl	1fef8 <boot_write_magic>
        if (rc == 0 && permanent) {
   2003a:	4603      	mov	r3, r0
   2003c:	2800      	cmp	r0, #0
   2003e:	d1f0      	bne.n	20022 <boot_set_pending+0x3a>
   20040:	2c00      	cmp	r4, #0
   20042:	d0ee      	beq.n	20022 <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
   20044:	9801      	ldr	r0, [sp, #4]
   20046:	f7ff ff67 	bl	1ff18 <boot_write_image_ok>
   2004a:	4603      	mov	r3, r0
   2004c:	e7e9      	b.n	20022 <boot_set_pending+0x3a>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   2004e:	a901      	add	r1, sp, #4
   20050:	2002      	movs	r0, #2
   20052:	f7fe f9b1 	bl	1e3b8 <flash_area_open>
        if (rc != 0) {
   20056:	b118      	cbz	r0, 20060 <boot_set_pending+0x78>
            return BOOT_EFLASH;
   20058:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   2005a:	4618      	mov	r0, r3
   2005c:	b003      	add	sp, #12
   2005e:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   20060:	9801      	ldr	r0, [sp, #4]
   20062:	6882      	ldr	r2, [r0, #8]
   20064:	2100      	movs	r1, #0
   20066:	f7fe fa2f 	bl	1e4c8 <flash_area_erase>
        return BOOT_EBADIMAGE;
   2006a:	2303      	movs	r3, #3
   2006c:	e7f5      	b.n	2005a <boot_set_pending+0x72>

0002006e <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   2006e:	b500      	push	{lr}
   20070:	b083      	sub	sp, #12
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
   20072:	4669      	mov	r1, sp
   20074:	2001      	movs	r0, #1
   20076:	f7ff ff29 	bl	1fecc <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   2007a:	b9b8      	cbnz	r0, 200ac <boot_set_confirmed+0x3e>
        return rc;
    }

    switch (state_primary_slot.magic) {
   2007c:	f89d 3000 	ldrb.w	r3, [sp]
   20080:	2b02      	cmp	r3, #2
   20082:	d012      	beq.n	200aa <boot_set_confirmed+0x3c>
   20084:	2b03      	cmp	r3, #3
   20086:	d011      	beq.n	200ac <boot_set_confirmed+0x3e>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   20088:	a901      	add	r1, sp, #4
   2008a:	2001      	movs	r0, #1
   2008c:	f7fe f994 	bl	1e3b8 <flash_area_open>
    if (rc) {
   20090:	b978      	cbnz	r0, 200b2 <boot_set_confirmed+0x44>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   20092:	f89d 3002 	ldrb.w	r3, [sp, #2]
   20096:	2b03      	cmp	r3, #3
   20098:	d00d      	beq.n	200b6 <boot_set_confirmed+0x48>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   2009a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2009e:	2b03      	cmp	r3, #3
   200a0:	d104      	bne.n	200ac <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   200a2:	9801      	ldr	r0, [sp, #4]
   200a4:	f7ff ff38 	bl	1ff18 <boot_write_image_ok>
   200a8:	e000      	b.n	200ac <boot_set_confirmed+0x3e>
        return BOOT_EBADVECT;
   200aa:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   200ac:	b003      	add	sp, #12
   200ae:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   200b2:	2001      	movs	r0, #1
   200b4:	e7fa      	b.n	200ac <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   200b6:	2004      	movs	r0, #4
   200b8:	e7f8      	b.n	200ac <boot_set_confirmed+0x3e>
	...

000200bc <boot_write_sz>:
    return 0;
}

static uint8_t
boot_write_sz(void)
{
   200bc:	b538      	push	{r3, r4, r5, lr}

    /* Figure out what size to write update status update as.  The size depends
     * on what the minimum write size is for scratch area, active image slot.
     * We need to use the bigger of those 2 values.
     */
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   200be:	4d06      	ldr	r5, [pc, #24]	; (200d8 <boot_write_sz+0x1c>)
   200c0:	6a28      	ldr	r0, [r5, #32]
   200c2:	f7fe fa15 	bl	1e4f0 <flash_area_align>
   200c6:	4604      	mov	r4, r0
    align = flash_area_align(boot_data.scratch.area);
   200c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   200ca:	f7fe fa11 	bl	1e4f0 <flash_area_align>
    if (align > elem_sz) {
   200ce:	4284      	cmp	r4, r0
   200d0:	d300      	bcc.n	200d4 <boot_write_sz+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   200d2:	4620      	mov	r0, r4
        elem_sz = align;
    }

    return elem_sz;
}
   200d4:	bd38      	pop	{r3, r4, r5, pc}
   200d6:	bf00      	nop
   200d8:	20007568 	.word	0x20007568

000200dc <boot_read_image_header>:
{
   200dc:	b510      	push	{r4, lr}
   200de:	b082      	sub	sp, #8
   200e0:	460c      	mov	r4, r1
    area_id = flash_area_id_from_image_slot(slot);
   200e2:	f7fe fa29 	bl	1e538 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   200e6:	a901      	add	r1, sp, #4
   200e8:	b2c0      	uxtb	r0, r0
   200ea:	f7fe f965 	bl	1e3b8 <flash_area_open>
    if (rc != 0) {
   200ee:	b110      	cbz	r0, 200f6 <boot_read_image_header+0x1a>
        rc = BOOT_EFLASH;
   200f0:	2001      	movs	r0, #1
}
   200f2:	b002      	add	sp, #8
   200f4:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   200f6:	2320      	movs	r3, #32
   200f8:	4622      	mov	r2, r4
   200fa:	2100      	movs	r1, #0
   200fc:	9801      	ldr	r0, [sp, #4]
   200fe:	f7fe f9bb 	bl	1e478 <flash_area_read>
    if (rc != 0) {
   20102:	2800      	cmp	r0, #0
   20104:	d0f5      	beq.n	200f2 <boot_read_image_header+0x16>
        rc = BOOT_EFLASH;
   20106:	2001      	movs	r0, #1
    return rc;
   20108:	e7f3      	b.n	200f2 <boot_read_image_header+0x16>
	...

0002010c <boot_read_image_headers>:
{
   2010c:	b538      	push	{r3, r4, r5, lr}
   2010e:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   20110:	2400      	movs	r4, #0
   20112:	2c01      	cmp	r4, #1
   20114:	dc0f      	bgt.n	20136 <boot_read_image_headers+0x2a>
        rc = boot_read_image_header(i, boot_img_hdr(&boot_data, i));
   20116:	4b09      	ldr	r3, [pc, #36]	; (2013c <boot_read_image_headers+0x30>)
   20118:	212c      	movs	r1, #44	; 0x2c
   2011a:	fb01 3104 	mla	r1, r1, r4, r3
   2011e:	4620      	mov	r0, r4
   20120:	f7ff ffdc 	bl	200dc <boot_read_image_header>
        if (rc != 0) {
   20124:	4603      	mov	r3, r0
   20126:	b908      	cbnz	r0, 2012c <boot_read_image_headers+0x20>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   20128:	3401      	adds	r4, #1
   2012a:	e7f2      	b.n	20112 <boot_read_image_headers+0x6>
            if (i > 0 && !require_all) {
   2012c:	2c00      	cmp	r4, #0
   2012e:	dd03      	ble.n	20138 <boot_read_image_headers+0x2c>
   20130:	b915      	cbnz	r5, 20138 <boot_read_image_headers+0x2c>
                return 0;
   20132:	2300      	movs	r3, #0
   20134:	e000      	b.n	20138 <boot_read_image_headers+0x2c>
    return 0;
   20136:	2300      	movs	r3, #0
}
   20138:	4618      	mov	r0, r3
   2013a:	bd38      	pop	{r3, r4, r5, pc}
   2013c:	20007568 	.word	0x20007568

00020140 <split_image_check>:
static int
split_image_check(struct image_header *app_hdr,
                  const struct flash_area *app_fap,
                  struct image_header *loader_hdr,
                  const struct flash_area *loader_fap)
{
   20140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20144:	b08c      	sub	sp, #48	; 0x30
   20146:	4606      	mov	r6, r0
   20148:	460f      	mov	r7, r1
   2014a:	4690      	mov	r8, r2
   2014c:	461d      	mov	r5, r3
    static void *tmpbuf;
    uint8_t loader_hash[32];

    if (!tmpbuf) {
   2014e:	4c18      	ldr	r4, [pc, #96]	; (201b0 <split_image_check+0x70>)
   20150:	6824      	ldr	r4, [r4, #0]
   20152:	b1f4      	cbz	r4, 20192 <split_image_check+0x52>
        if (!tmpbuf) {
            return BOOT_ENOMEM;
        }
    }

    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   20154:	ab04      	add	r3, sp, #16
   20156:	9302      	str	r3, [sp, #8]
   20158:	2400      	movs	r4, #0
   2015a:	9401      	str	r4, [sp, #4]
   2015c:	9400      	str	r4, [sp, #0]
   2015e:	f44f 7380 	mov.w	r3, #256	; 0x100
   20162:	4a13      	ldr	r2, [pc, #76]	; (201b0 <split_image_check+0x70>)
   20164:	6812      	ldr	r2, [r2, #0]
   20166:	4629      	mov	r1, r5
   20168:	4640      	mov	r0, r8
   2016a:	f000 f8fd 	bl	20368 <bootutil_img_validate>
   2016e:	b9d0      	cbnz	r0, 201a6 <split_image_check+0x66>
                              NULL, 0, loader_hash)) {
        return BOOT_EBADIMAGE;
    }

    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   20170:	9402      	str	r4, [sp, #8]
   20172:	2320      	movs	r3, #32
   20174:	9301      	str	r3, [sp, #4]
   20176:	ab04      	add	r3, sp, #16
   20178:	9300      	str	r3, [sp, #0]
   2017a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2017e:	4a0c      	ldr	r2, [pc, #48]	; (201b0 <split_image_check+0x70>)
   20180:	6812      	ldr	r2, [r2, #0]
   20182:	4639      	mov	r1, r7
   20184:	4630      	mov	r0, r6
   20186:	f000 f8ef 	bl	20368 <bootutil_img_validate>
   2018a:	b970      	cbnz	r0, 201aa <split_image_check+0x6a>
                              loader_hash, 32, NULL)) {
        return BOOT_EBADIMAGE;
    }

    return 0;
}
   2018c:	b00c      	add	sp, #48	; 0x30
   2018e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   20192:	f44f 7080 	mov.w	r0, #256	; 0x100
   20196:	f001 f819 	bl	211cc <os_malloc>
   2019a:	4b05      	ldr	r3, [pc, #20]	; (201b0 <split_image_check+0x70>)
   2019c:	6018      	str	r0, [r3, #0]
        if (!tmpbuf) {
   2019e:	2800      	cmp	r0, #0
   201a0:	d1d8      	bne.n	20154 <split_image_check+0x14>
            return BOOT_ENOMEM;
   201a2:	2006      	movs	r0, #6
   201a4:	e7f2      	b.n	2018c <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   201a6:	2003      	movs	r0, #3
   201a8:	e7f0      	b.n	2018c <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   201aa:	2003      	movs	r0, #3
   201ac:	e7ee      	b.n	2018c <split_image_check+0x4c>
   201ae:	bf00      	nop
   201b0:	200075d0 	.word	0x200075d0

000201b4 <boot_read_sectors>:
{
   201b4:	b510      	push	{r4, lr}
   201b6:	b082      	sub	sp, #8
}

static inline int
boot_initialize_area(struct boot_loader_state *state, int flash_area)
{
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   201b8:	2380      	movs	r3, #128	; 0x80
   201ba:	9301      	str	r3, [sp, #4]
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   201bc:	4c15      	ldr	r4, [pc, #84]	; (20214 <boot_read_sectors+0x60>)
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   201be:	6a62      	ldr	r2, [r4, #36]	; 0x24
   201c0:	a901      	add	r1, sp, #4
   201c2:	2001      	movs	r0, #1
   201c4:	f7fe f91a 	bl	1e3fc <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   201c8:	9b01      	ldr	r3, [sp, #4]
   201ca:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
   201cc:	b118      	cbz	r0, 201d6 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
   201ce:	2401      	movs	r4, #1
}
   201d0:	4620      	mov	r0, r4
   201d2:	b002      	add	sp, #8
   201d4:	bd10      	pop	{r4, pc}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   201d6:	2380      	movs	r3, #128	; 0x80
   201d8:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   201da:	6d22      	ldr	r2, [r4, #80]	; 0x50
   201dc:	a901      	add	r1, sp, #4
   201de:	2002      	movs	r0, #2
   201e0:	f7fe f90c 	bl	1e3fc <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   201e4:	9b01      	ldr	r3, [sp, #4]
   201e6:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   201e8:	b108      	cbz	r0, 201ee <boot_read_sectors+0x3a>
        return BOOT_EFLASH;
   201ea:	2401      	movs	r4, #1
   201ec:	e7f0      	b.n	201d0 <boot_read_sectors+0x1c>
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   201ee:	2380      	movs	r3, #128	; 0x80
   201f0:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   201f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   201f4:	a901      	add	r1, sp, #4
   201f6:	2003      	movs	r0, #3
   201f8:	f7fe f900 	bl	1e3fc <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   201fc:	9b01      	ldr	r3, [sp, #4]
   201fe:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   20200:	4604      	mov	r4, r0
   20202:	b108      	cbz	r0, 20208 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
   20204:	2401      	movs	r4, #1
   20206:	e7e3      	b.n	201d0 <boot_read_sectors+0x1c>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   20208:	f7ff ff58 	bl	200bc <boot_write_sz>
   2020c:	4b01      	ldr	r3, [pc, #4]	; (20214 <boot_read_sectors+0x60>)
   2020e:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    return 0;
   20212:	e7dd      	b.n	201d0 <boot_read_sectors+0x1c>
   20214:	20007568 	.word	0x20007568

00020218 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   20218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2021c:	4605      	mov	r5, r0
   2021e:	460c      	mov	r4, r1
   20220:	4690      	mov	r8, r2
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   20222:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   20226:	f000 ffd1 	bl	211cc <os_malloc>
    if (sectors == NULL) {
   2022a:	2800      	cmp	r0, #0
   2022c:	d05b      	beq.n	202e6 <split_go+0xce>
   2022e:	4607      	mov	r7, r0
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   20230:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 202ec <split_go+0xd4>
   20234:	232c      	movs	r3, #44	; 0x2c
   20236:	fb03 f605 	mul.w	r6, r3, r5
   2023a:	eb09 0206 	add.w	r2, r9, r6
   2023e:	6250      	str	r0, [r2, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   20240:	f500 62c0 	add.w	r2, r0, #1536	; 0x600
   20244:	fb03 9304 	mla	r3, r3, r4, r9
   20248:	625a      	str	r2, [r3, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   2024a:	4628      	mov	r0, r5
   2024c:	f7fe f974 	bl	1e538 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   20250:	f106 0120 	add.w	r1, r6, #32
   20254:	4449      	add	r1, r9
   20256:	b2c0      	uxtb	r0, r0
   20258:	f7fe f8ae 	bl	1e3b8 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   2025c:	b9b8      	cbnz	r0, 2028e <split_go+0x76>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   2025e:	4620      	mov	r0, r4
   20260:	f7fe f96a 	bl	1e538 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   20264:	232c      	movs	r3, #44	; 0x2c
   20266:	fb04 f303 	mul.w	r3, r4, r3
   2026a:	3320      	adds	r3, #32
   2026c:	491f      	ldr	r1, [pc, #124]	; (202ec <split_go+0xd4>)
   2026e:	4419      	add	r1, r3
   20270:	b2c0      	uxtb	r0, r0
   20272:	f7fe f8a1 	bl	1e3b8 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   20276:	b980      	cbnz	r0, 2029a <split_go+0x82>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   20278:	f7ff ff9c 	bl	201b4 <boot_read_sectors>
    if (rc != 0) {
   2027c:	b198      	cbz	r0, 202a6 <split_go+0x8e>
        rc = SPLIT_GO_ERR;
   2027e:	f06f 0601 	mvn.w	r6, #1
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   20282:	4638      	mov	r0, r7
   20284:	f000 ffae 	bl	211e4 <os_free>
    return rc;
}
   20288:	4630      	mov	r0, r6
   2028a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   2028e:	2300      	movs	r3, #0
   20290:	461a      	mov	r2, r3
   20292:	4619      	mov	r1, r3
   20294:	4618      	mov	r0, r3
   20296:	f7ed f863 	bl	d360 <__assert_func>
    assert(rc == 0);
   2029a:	2300      	movs	r3, #0
   2029c:	461a      	mov	r2, r3
   2029e:	4619      	mov	r1, r3
   202a0:	4618      	mov	r0, r3
   202a2:	f7ed f85d 	bl	d360 <__assert_func>
    rc = boot_read_image_headers(true);
   202a6:	2001      	movs	r0, #1
   202a8:	f7ff ff30 	bl	2010c <boot_read_image_headers>
    if (rc != 0) {
   202ac:	4606      	mov	r6, r0
   202ae:	2800      	cmp	r0, #0
   202b0:	d1e7      	bne.n	20282 <split_go+0x6a>
    return &state->imgs[slot].hdr;
   202b2:	4a0e      	ldr	r2, [pc, #56]	; (202ec <split_go+0xd4>)
   202b4:	232c      	movs	r3, #44	; 0x2c
   202b6:	fb03 2004 	mla	r0, r3, r4, r2
   202ba:	fb03 2205 	mla	r2, r3, r5, r2
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   202be:	6a13      	ldr	r3, [r2, #32]
   202c0:	6a01      	ldr	r1, [r0, #32]
   202c2:	f7ff ff3d 	bl	20140 <split_image_check>
    if (rc != 0) {
   202c6:	4606      	mov	r6, r0
   202c8:	b950      	cbnz	r0, 202e0 <split_go+0xc8>
    return state->imgs[slot].area->fa_off;
   202ca:	4908      	ldr	r1, [pc, #32]	; (202ec <split_go+0xd4>)
   202cc:	232c      	movs	r3, #44	; 0x2c
   202ce:	fb03 1404 	mla	r4, r3, r4, r1
   202d2:	6a23      	ldr	r3, [r4, #32]
   202d4:	685a      	ldr	r2, [r3, #4]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   202d6:	8923      	ldrh	r3, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   202d8:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   202da:	f8c8 3000 	str.w	r3, [r8]
    rc = SPLIT_GO_OK;
   202de:	e7d0      	b.n	20282 <split_go+0x6a>
        rc = SPLIT_GO_NON_MATCHING;
   202e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   202e4:	e7cd      	b.n	20282 <split_go+0x6a>
        return SPLIT_GO_ERR;
   202e6:	f06f 0601 	mvn.w	r6, #1
   202ea:	e7cd      	b.n	20288 <split_go+0x70>
   202ec:	20007568 	.word	0x20007568

000202f0 <bootutil_img_hash>:
 */
static int
bootutil_img_hash(struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                  uint8_t *hash_result, uint8_t *seed, int seed_len)
{
   202f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   202f4:	b09d      	sub	sp, #116	; 0x74
   202f6:	4605      	mov	r5, r0
   202f8:	4689      	mov	r9, r1
   202fa:	4617      	mov	r7, r2
   202fc:	4698      	mov	r8, r3
   202fe:	9c25      	ldr	r4, [sp, #148]	; 0x94
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   20300:	a801      	add	r0, sp, #4
   20302:	f000 f8a1 	bl	20448 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   20306:	2100      	movs	r1, #0
   20308:	a801      	add	r0, sp, #4
   2030a:	f000 f8a3 	bl	20454 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
   2030e:	b114      	cbz	r4, 20316 <bootutil_img_hash+0x26>
   20310:	9b26      	ldr	r3, [sp, #152]	; 0x98
   20312:	2b00      	cmp	r3, #0
   20314:	dc04      	bgt.n	20320 <bootutil_img_hash+0x30>

    /*
     * Hash is computed over image header and image itself. No TLV is
     * included ATM.
     */
    hdr_size = hdr->ih_hdr_size;
   20316:	892b      	ldrh	r3, [r5, #8]
    size = hdr->ih_img_size + hdr_size;
   20318:	68ee      	ldr	r6, [r5, #12]
   2031a:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
   2031c:	2500      	movs	r5, #0
   2031e:	e013      	b.n	20348 <bootutil_img_hash+0x58>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   20320:	461a      	mov	r2, r3
   20322:	4621      	mov	r1, r4
   20324:	a801      	add	r0, sp, #4
   20326:	f000 f97f 	bl	20628 <mbedtls_sha256_update_ret>
}
   2032a:	e7f4      	b.n	20316 <bootutil_img_hash+0x26>
         */
        if ((off < hdr_size) && ((off + blk_sz) > hdr_size)) {
            blk_sz = hdr_size - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   2032c:	4623      	mov	r3, r4
   2032e:	463a      	mov	r2, r7
   20330:	4629      	mov	r1, r5
   20332:	4648      	mov	r0, r9
   20334:	f7fe f8a0 	bl	1e478 <flash_area_read>
        if (rc) {
   20338:	4603      	mov	r3, r0
   2033a:	b988      	cbnz	r0, 20360 <bootutil_img_hash+0x70>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   2033c:	4622      	mov	r2, r4
   2033e:	4639      	mov	r1, r7
   20340:	a801      	add	r0, sp, #4
   20342:	f000 f971 	bl	20628 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   20346:	4425      	add	r5, r4
   20348:	42b5      	cmp	r5, r6
   2034a:	d204      	bcs.n	20356 <bootutil_img_hash+0x66>
        blk_sz = size - off;
   2034c:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
   2034e:	4544      	cmp	r4, r8
   20350:	d9ec      	bls.n	2032c <bootutil_img_hash+0x3c>
            blk_sz = tmp_buf_sz;
   20352:	4644      	mov	r4, r8
   20354:	e7ea      	b.n	2032c <bootutil_img_hash+0x3c>

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   20356:	9924      	ldr	r1, [sp, #144]	; 0x90
   20358:	a801      	add	r0, sp, #4
   2035a:	f000 f9a8 	bl	206ae <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
   2035e:	2300      	movs	r3, #0
}
   20360:	4618      	mov	r0, r3
   20362:	b01d      	add	sp, #116	; 0x74
   20364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00020368 <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   20368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2036c:	b096      	sub	sp, #88	; 0x58
   2036e:	4680      	mov	r8, r0
   20370:	460d      	mov	r5, r1
   20372:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    struct image_tlv tlv;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
   20374:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   20376:	9402      	str	r4, [sp, #8]
   20378:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   2037a:	9401      	str	r4, [sp, #4]
   2037c:	ac04      	add	r4, sp, #16
   2037e:	9400      	str	r4, [sp, #0]
   20380:	f7ff ffb6 	bl	202f0 <bootutil_img_hash>
    if (rc) {
   20384:	4607      	mov	r7, r0
   20386:	2800      	cmp	r0, #0
   20388:	d14a      	bne.n	20420 <bootutil_img_validate+0xb8>
        return rc;
    }

    if (out_hash) {
   2038a:	b14e      	cbz	r6, 203a0 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
   2038c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2038e:	6030      	str	r0, [r6, #0]
   20390:	6071      	str	r1, [r6, #4]
   20392:	60b2      	str	r2, [r6, #8]
   20394:	60f3      	str	r3, [r6, #12]
   20396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   20398:	6130      	str	r0, [r6, #16]
   2039a:	6171      	str	r1, [r6, #20]
   2039c:	61b2      	str	r2, [r6, #24]
   2039e:	61f3      	str	r3, [r6, #28]
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   203a0:	f8d8 400c 	ldr.w	r4, [r8, #12]
   203a4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   203a8:	441c      	add	r4, r3

    rc = flash_area_read(fap, off, &info, sizeof(info));
   203aa:	2304      	movs	r3, #4
   203ac:	aa15      	add	r2, sp, #84	; 0x54
   203ae:	4621      	mov	r1, r4
   203b0:	4628      	mov	r0, r5
   203b2:	f7fe f861 	bl	1e478 <flash_area_read>
    if (rc) {
   203b6:	4607      	mov	r7, r0
   203b8:	bb90      	cbnz	r0, 20420 <bootutil_img_validate+0xb8>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   203ba:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   203be:	f646 1307 	movw	r3, #26887	; 0x6907
   203c2:	429a      	cmp	r2, r3
   203c4:	d130      	bne.n	20428 <bootutil_img_validate+0xc0>
        return -1;
    }
    end = off + info.it_tlv_tot;
   203c6:	f8bd 6056 	ldrh.w	r6, [sp, #86]	; 0x56
   203ca:	4426      	add	r6, r4
    off += sizeof(info);
   203cc:	3404      	adds	r4, #4
    int sha256_valid = 0;
   203ce:	4680      	mov	r8, r0

    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   203d0:	e003      	b.n	203da <bootutil_img_validate+0x72>
   203d2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   203d6:	441c      	add	r4, r3
   203d8:	3404      	adds	r4, #4
   203da:	42b4      	cmp	r4, r6
   203dc:	d21d      	bcs.n	2041a <bootutil_img_validate+0xb2>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   203de:	2304      	movs	r3, #4
   203e0:	aa14      	add	r2, sp, #80	; 0x50
   203e2:	4621      	mov	r1, r4
   203e4:	4628      	mov	r0, r5
   203e6:	f7fe f847 	bl	1e478 <flash_area_read>
        if (rc) {
   203ea:	bb00      	cbnz	r0, 2042e <bootutil_img_validate+0xc6>
            return rc;
        }

        if (tlv.it_type == IMAGE_TLV_SHA256) {
   203ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   203f0:	2b10      	cmp	r3, #16
   203f2:	d1ee      	bne.n	203d2 <bootutil_img_validate+0x6a>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (tlv.it_len != sizeof(hash)) {
   203f4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   203f8:	2b20      	cmp	r3, #32
   203fa:	d11a      	bne.n	20432 <bootutil_img_validate+0xca>
                return -1;
            }
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   203fc:	aa0c      	add	r2, sp, #48	; 0x30
   203fe:	1d21      	adds	r1, r4, #4
   20400:	4628      	mov	r0, r5
   20402:	f7fe f839 	bl	1e478 <flash_area_read>
            if (rc) {
   20406:	b9b8      	cbnz	r0, 20438 <bootutil_img_validate+0xd0>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
   20408:	2220      	movs	r2, #32
   2040a:	a90c      	add	r1, sp, #48	; 0x30
   2040c:	a804      	add	r0, sp, #16
   2040e:	f7f1 f80f 	bl	11430 <memcmp>
   20412:	b998      	cbnz	r0, 2043c <bootutil_img_validate+0xd4>
                return -1;
            }

            sha256_valid = 1;
   20414:	f04f 0801 	mov.w	r8, #1
   20418:	e7db      	b.n	203d2 <bootutil_img_validate+0x6a>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
   2041a:	f1b8 0f00 	cmp.w	r8, #0
   2041e:	d010      	beq.n	20442 <bootutil_img_validate+0xda>
        return -1;
    }
#endif

    return 0;
}
   20420:	4638      	mov	r0, r7
   20422:	b016      	add	sp, #88	; 0x58
   20424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   20428:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2042c:	e7f8      	b.n	20420 <bootutil_img_validate+0xb8>
            return rc;
   2042e:	4607      	mov	r7, r0
   20430:	e7f6      	b.n	20420 <bootutil_img_validate+0xb8>
                return -1;
   20432:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20436:	e7f3      	b.n	20420 <bootutil_img_validate+0xb8>
                return rc;
   20438:	4607      	mov	r7, r0
   2043a:	e7f1      	b.n	20420 <bootutil_img_validate+0xb8>
                return -1;
   2043c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20440:	e7ee      	b.n	20420 <bootutil_img_validate+0xb8>
        return -1;
   20442:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20446:	e7eb      	b.n	20420 <bootutil_img_validate+0xb8>

00020448 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
   20448:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   2044a:	226c      	movs	r2, #108	; 0x6c
   2044c:	2100      	movs	r1, #0
   2044e:	f7f1 f820 	bl	11492 <memset>
}
   20452:	bd08      	pop	{r3, pc}

00020454 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   20454:	2300      	movs	r3, #0
   20456:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   20458:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   2045a:	460b      	mov	r3, r1
   2045c:	b9b9      	cbnz	r1, 2048e <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   2045e:	4a19      	ldr	r2, [pc, #100]	; (204c4 <mbedtls_sha256_starts_ret+0x70>)
   20460:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   20462:	4a19      	ldr	r2, [pc, #100]	; (204c8 <mbedtls_sha256_starts_ret+0x74>)
   20464:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   20466:	4a19      	ldr	r2, [pc, #100]	; (204cc <mbedtls_sha256_starts_ret+0x78>)
   20468:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   2046a:	4a19      	ldr	r2, [pc, #100]	; (204d0 <mbedtls_sha256_starts_ret+0x7c>)
   2046c:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
   2046e:	4a19      	ldr	r2, [pc, #100]	; (204d4 <mbedtls_sha256_starts_ret+0x80>)
   20470:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   20472:	4a19      	ldr	r2, [pc, #100]	; (204d8 <mbedtls_sha256_starts_ret+0x84>)
   20474:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   20476:	4a19      	ldr	r2, [pc, #100]	; (204dc <mbedtls_sha256_starts_ret+0x88>)
   20478:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   2047a:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
   2047e:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
   20482:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
   20486:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
   20488:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
   2048a:	2000      	movs	r0, #0
   2048c:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
   2048e:	4a14      	ldr	r2, [pc, #80]	; (204e0 <mbedtls_sha256_starts_ret+0x8c>)
   20490:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
   20492:	4a14      	ldr	r2, [pc, #80]	; (204e4 <mbedtls_sha256_starts_ret+0x90>)
   20494:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   20496:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
   2049a:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   2049e:	f502 6201 	add.w	r2, r2, #2064	; 0x810
   204a2:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   204a4:	4a10      	ldr	r2, [pc, #64]	; (204e8 <mbedtls_sha256_starts_ret+0x94>)
   204a6:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   204a8:	4a10      	ldr	r2, [pc, #64]	; (204ec <mbedtls_sha256_starts_ret+0x98>)
   204aa:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
   204ac:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
   204b0:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   204b4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
   204b8:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   204ba:	4a0d      	ldr	r2, [pc, #52]	; (204f0 <mbedtls_sha256_starts_ret+0x9c>)
   204bc:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   204be:	4a0d      	ldr	r2, [pc, #52]	; (204f4 <mbedtls_sha256_starts_ret+0xa0>)
   204c0:	6242      	str	r2, [r0, #36]	; 0x24
   204c2:	e7e1      	b.n	20488 <mbedtls_sha256_starts_ret+0x34>
   204c4:	6a09e667 	.word	0x6a09e667
   204c8:	bb67ae85 	.word	0xbb67ae85
   204cc:	3c6ef372 	.word	0x3c6ef372
   204d0:	a54ff53a 	.word	0xa54ff53a
   204d4:	510e527f 	.word	0x510e527f
   204d8:	9b05688c 	.word	0x9b05688c
   204dc:	1f83d9ab 	.word	0x1f83d9ab
   204e0:	c1059ed8 	.word	0xc1059ed8
   204e4:	367cd507 	.word	0x367cd507
   204e8:	f70e5939 	.word	0xf70e5939
   204ec:	ffc00b31 	.word	0xffc00b31
   204f0:	64f98fa7 	.word	0x64f98fa7
   204f4:	befa4fa4 	.word	0xbefa4fa4

000204f8 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   204f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   204fc:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   204fe:	2300      	movs	r3, #0
   20500:	e005      	b.n	2050e <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
   20502:	1c9a      	adds	r2, r3, #2
   20504:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20508:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
   2050c:	3301      	adds	r3, #1
   2050e:	2b07      	cmp	r3, #7
   20510:	d9f7      	bls.n	20502 <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   20512:	2200      	movs	r2, #0
   20514:	e04f      	b.n	205b6 <mbedtls_internal_sha256_process+0xbe>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
   20516:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   2051a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   2051e:	7863      	ldrb	r3, [r4, #1]
   20520:	041b      	lsls	r3, r3, #16
   20522:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   20526:	78a5      	ldrb	r5, [r4, #2]
   20528:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2052c:	78e4      	ldrb	r4, [r4, #3]
   2052e:	4323      	orrs	r3, r4
   20530:	ac08      	add	r4, sp, #32
   20532:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   20536:	9b07      	ldr	r3, [sp, #28]
   20538:	9c04      	ldr	r4, [sp, #16]
   2053a:	ea4f 2cf4 	mov.w	ip, r4, ror #11
   2053e:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
   20542:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
   20546:	4463      	add	r3, ip
   20548:	9d06      	ldr	r5, [sp, #24]
   2054a:	9e05      	ldr	r6, [sp, #20]
   2054c:	ea85 0c06 	eor.w	ip, r5, r6
   20550:	ea04 0c0c 	and.w	ip, r4, ip
   20554:	ea85 0c0c 	eor.w	ip, r5, ip
   20558:	4463      	add	r3, ip
   2055a:	4f32      	ldr	r7, [pc, #200]	; (20624 <mbedtls_internal_sha256_process+0x12c>)
   2055c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   20560:	443b      	add	r3, r7
   20562:	af08      	add	r7, sp, #32
   20564:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   20568:	443b      	add	r3, r7
   2056a:	f8dd e000 	ldr.w	lr, [sp]
   2056e:	ea4f 3c7e 	mov.w	ip, lr, ror #13
   20572:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
   20576:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
   2057a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2057e:	ea0e 0708 	and.w	r7, lr, r8
   20582:	f8dd 9008 	ldr.w	r9, [sp, #8]
   20586:	ea4e 0a08 	orr.w	sl, lr, r8
   2058a:	ea09 0a0a 	and.w	sl, r9, sl
   2058e:	ea47 070a 	orr.w	r7, r7, sl
   20592:	44bc      	add	ip, r7
   20594:	9f03      	ldr	r7, [sp, #12]
   20596:	441f      	add	r7, r3
   20598:	9703      	str	r7, [sp, #12]
   2059a:	4463      	add	r3, ip
   2059c:	9307      	str	r3, [sp, #28]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
   2059e:	9507      	str	r5, [sp, #28]
   205a0:	9606      	str	r6, [sp, #24]
   205a2:	9405      	str	r4, [sp, #20]
   205a4:	9704      	str	r7, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
   205a6:	f8cd 900c 	str.w	r9, [sp, #12]
   205aa:	f8cd 8008 	str.w	r8, [sp, #8]
   205ae:	f8cd e004 	str.w	lr, [sp, #4]
   205b2:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
   205b4:	3201      	adds	r2, #1
   205b6:	2a3f      	cmp	r2, #63	; 0x3f
   205b8:	d822      	bhi.n	20600 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
   205ba:	2a0f      	cmp	r2, #15
   205bc:	d9ab      	bls.n	20516 <mbedtls_internal_sha256_process+0x1e>
            R( i );
   205be:	1e93      	subs	r3, r2, #2
   205c0:	ac08      	add	r4, sp, #32
   205c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   205c6:	ea4f 43f5 	mov.w	r3, r5, ror #19
   205ca:	ea83 4375 	eor.w	r3, r3, r5, ror #17
   205ce:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
   205d2:	1fd5      	subs	r5, r2, #7
   205d4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   205d8:	442b      	add	r3, r5
   205da:	f1a2 050f 	sub.w	r5, r2, #15
   205de:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   205e2:	ea4f 45b6 	mov.w	r5, r6, ror #18
   205e6:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
   205ea:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
   205ee:	442b      	add	r3, r5
   205f0:	f1a2 0510 	sub.w	r5, r2, #16
   205f4:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   205f8:	442b      	add	r3, r5
   205fa:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   205fe:	e79a      	b.n	20536 <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   20600:	2300      	movs	r3, #0
   20602:	e008      	b.n	20616 <mbedtls_internal_sha256_process+0x11e>
        ctx->state[i] += A[i];
   20604:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
   20608:	1c99      	adds	r1, r3, #2
   2060a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2060e:	4422      	add	r2, r4
   20610:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
   20614:	3301      	adds	r3, #1
   20616:	2b07      	cmp	r3, #7
   20618:	d9f4      	bls.n	20604 <mbedtls_internal_sha256_process+0x10c>

    return( 0 );
}
   2061a:	2000      	movs	r0, #0
   2061c:	b048      	add	sp, #288	; 0x120
   2061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20622:	bf00      	nop
   20624:	00025a7c 	.word	0x00025a7c

00020628 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   20628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   2062c:	b3da      	cbz	r2, 206a6 <mbedtls_sha256_update_ret+0x7e>
   2062e:	4606      	mov	r6, r0
   20630:	460d      	mov	r5, r1
   20632:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   20634:	6803      	ldr	r3, [r0, #0]
   20636:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   2063a:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   2063e:	4413      	add	r3, r2
   20640:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   20642:	4293      	cmp	r3, r2
   20644:	d202      	bcs.n	2064c <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
   20646:	6843      	ldr	r3, [r0, #4]
   20648:	3301      	adds	r3, #1
   2064a:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   2064c:	b10f      	cbz	r7, 20652 <mbedtls_sha256_update_ret+0x2a>
   2064e:	4544      	cmp	r4, r8
   20650:	d20a      	bcs.n	20668 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   20652:	2c3f      	cmp	r4, #63	; 0x3f
   20654:	d91b      	bls.n	2068e <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   20656:	4629      	mov	r1, r5
   20658:	4630      	mov	r0, r6
   2065a:	f7ff ff4d 	bl	204f8 <mbedtls_internal_sha256_process>
   2065e:	4603      	mov	r3, r0
   20660:	bb10      	cbnz	r0, 206a8 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
   20662:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   20664:	3c40      	subs	r4, #64	; 0x40
   20666:	e7f4      	b.n	20652 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   20668:	f106 0928 	add.w	r9, r6, #40	; 0x28
   2066c:	4642      	mov	r2, r8
   2066e:	4629      	mov	r1, r5
   20670:	eb09 0007 	add.w	r0, r9, r7
   20674:	f7f0 ff00 	bl	11478 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   20678:	4649      	mov	r1, r9
   2067a:	4630      	mov	r0, r6
   2067c:	f7ff ff3c 	bl	204f8 <mbedtls_internal_sha256_process>
   20680:	4603      	mov	r3, r0
   20682:	b988      	cbnz	r0, 206a8 <mbedtls_sha256_update_ret+0x80>
        input += fill;
   20684:	4445      	add	r5, r8
        ilen  -= fill;
   20686:	3f40      	subs	r7, #64	; 0x40
   20688:	443c      	add	r4, r7
        left = 0;
   2068a:	2700      	movs	r7, #0
   2068c:	e7e1      	b.n	20652 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
   2068e:	b90c      	cbnz	r4, 20694 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   20690:	2300      	movs	r3, #0
   20692:	e009      	b.n	206a8 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   20694:	f106 0028 	add.w	r0, r6, #40	; 0x28
   20698:	4622      	mov	r2, r4
   2069a:	4629      	mov	r1, r5
   2069c:	4438      	add	r0, r7
   2069e:	f7f0 feeb 	bl	11478 <memcpy>
    return( 0 );
   206a2:	2300      	movs	r3, #0
   206a4:	e000      	b.n	206a8 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
   206a6:	2300      	movs	r3, #0
}
   206a8:	4618      	mov	r0, r3
   206aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000206ae <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   206ae:	b570      	push	{r4, r5, r6, lr}
   206b0:	4604      	mov	r4, r0
   206b2:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   206b4:	6803      	ldr	r3, [r0, #0]
   206b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   206ba:	1c58      	adds	r0, r3, #1
   206bc:	4423      	add	r3, r4
   206be:	2280      	movs	r2, #128	; 0x80
   206c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
   206c4:	2838      	cmp	r0, #56	; 0x38
   206c6:	d87c      	bhi.n	207c2 <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   206c8:	f104 0328 	add.w	r3, r4, #40	; 0x28
   206cc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   206d0:	2100      	movs	r1, #0
   206d2:	4418      	add	r0, r3
   206d4:	f7f0 fedd 	bl	11492 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   206d8:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   206da:	6863      	ldr	r3, [r4, #4]
   206dc:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   206de:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   206e2:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   206e4:	0e1e      	lsrs	r6, r3, #24
   206e6:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
   206ea:	f3c3 4607 	ubfx	r6, r3, #16, #8
   206ee:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   206f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   206f6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   206fa:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   206fe:	f3c2 5347 	ubfx	r3, r2, #21, #8
   20702:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   20706:	f3c2 3347 	ubfx	r3, r2, #13, #8
   2070a:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   2070e:	f3c2 1247 	ubfx	r2, r2, #5, #8
   20712:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   20716:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   2071a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   2071e:	4620      	mov	r0, r4
   20720:	f7ff feea 	bl	204f8 <mbedtls_internal_sha256_process>
   20724:	4603      	mov	r3, r0
   20726:	2800      	cmp	r0, #0
   20728:	d159      	bne.n	207de <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   2072a:	7ae2      	ldrb	r2, [r4, #11]
   2072c:	702a      	strb	r2, [r5, #0]
   2072e:	7aa2      	ldrb	r2, [r4, #10]
   20730:	706a      	strb	r2, [r5, #1]
   20732:	7a62      	ldrb	r2, [r4, #9]
   20734:	70aa      	strb	r2, [r5, #2]
   20736:	7a22      	ldrb	r2, [r4, #8]
   20738:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   2073a:	7be2      	ldrb	r2, [r4, #15]
   2073c:	712a      	strb	r2, [r5, #4]
   2073e:	7ba2      	ldrb	r2, [r4, #14]
   20740:	716a      	strb	r2, [r5, #5]
   20742:	7b62      	ldrb	r2, [r4, #13]
   20744:	71aa      	strb	r2, [r5, #6]
   20746:	7b22      	ldrb	r2, [r4, #12]
   20748:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   2074a:	7ce2      	ldrb	r2, [r4, #19]
   2074c:	722a      	strb	r2, [r5, #8]
   2074e:	7ca2      	ldrb	r2, [r4, #18]
   20750:	726a      	strb	r2, [r5, #9]
   20752:	7c62      	ldrb	r2, [r4, #17]
   20754:	72aa      	strb	r2, [r5, #10]
   20756:	7c22      	ldrb	r2, [r4, #16]
   20758:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   2075a:	7de2      	ldrb	r2, [r4, #23]
   2075c:	732a      	strb	r2, [r5, #12]
   2075e:	7da2      	ldrb	r2, [r4, #22]
   20760:	736a      	strb	r2, [r5, #13]
   20762:	7d62      	ldrb	r2, [r4, #21]
   20764:	73aa      	strb	r2, [r5, #14]
   20766:	7d22      	ldrb	r2, [r4, #20]
   20768:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   2076a:	7ee2      	ldrb	r2, [r4, #27]
   2076c:	742a      	strb	r2, [r5, #16]
   2076e:	7ea2      	ldrb	r2, [r4, #26]
   20770:	746a      	strb	r2, [r5, #17]
   20772:	7e62      	ldrb	r2, [r4, #25]
   20774:	74aa      	strb	r2, [r5, #18]
   20776:	7e22      	ldrb	r2, [r4, #24]
   20778:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   2077a:	7fe2      	ldrb	r2, [r4, #31]
   2077c:	752a      	strb	r2, [r5, #20]
   2077e:	7fa2      	ldrb	r2, [r4, #30]
   20780:	756a      	strb	r2, [r5, #21]
   20782:	7f62      	ldrb	r2, [r4, #29]
   20784:	75aa      	strb	r2, [r5, #22]
   20786:	7f22      	ldrb	r2, [r4, #28]
   20788:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   2078a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   2078e:	762a      	strb	r2, [r5, #24]
   20790:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   20794:	766a      	strb	r2, [r5, #25]
   20796:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   2079a:	76aa      	strb	r2, [r5, #26]
   2079c:	f894 2020 	ldrb.w	r2, [r4, #32]
   207a0:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
   207a2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   207a4:	b9da      	cbnz	r2, 207de <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   207a6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   207aa:	772b      	strb	r3, [r5, #28]
   207ac:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   207b0:	776b      	strb	r3, [r5, #29]
   207b2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   207b6:	77ab      	strb	r3, [r5, #30]
   207b8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   207bc:	77eb      	strb	r3, [r5, #31]

    return( 0 );
   207be:	4613      	mov	r3, r2
   207c0:	e00d      	b.n	207de <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
   207c2:	f104 0628 	add.w	r6, r4, #40	; 0x28
   207c6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   207ca:	2100      	movs	r1, #0
   207cc:	4430      	add	r0, r6
   207ce:	f7f0 fe60 	bl	11492 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   207d2:	4631      	mov	r1, r6
   207d4:	4620      	mov	r0, r4
   207d6:	f7ff fe8f 	bl	204f8 <mbedtls_internal_sha256_process>
   207da:	4603      	mov	r3, r0
   207dc:	b108      	cbz	r0, 207e2 <mbedtls_sha256_finish_ret+0x134>
}
   207de:	4618      	mov	r0, r3
   207e0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
   207e2:	2238      	movs	r2, #56	; 0x38
   207e4:	2100      	movs	r1, #0
   207e6:	4630      	mov	r0, r6
   207e8:	f7f0 fe53 	bl	11492 <memset>
   207ec:	e774      	b.n	206d8 <mbedtls_sha256_finish_ret+0x2a>

000207ee <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   207ee:	b538      	push	{r3, r4, r5, lr}
   207f0:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   207f2:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   207f4:	2500      	movs	r5, #0
   207f6:	e000      	b.n	207fa <fcb_free_sector_cnt+0xc>
   207f8:	3501      	adds	r5, #1
   207fa:	7963      	ldrb	r3, [r4, #5]
   207fc:	42ab      	cmp	r3, r5
   207fe:	dd06      	ble.n	2080e <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   20800:	4620      	mov	r0, r4
   20802:	f000 fa7b 	bl	20cfc <fcb_getnext_area>
   20806:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   20808:	69a3      	ldr	r3, [r4, #24]
   2080a:	4283      	cmp	r3, r0
   2080c:	d1f4      	bne.n	207f8 <fcb_free_sector_cnt+0xa>
            break;
        }
    }
    return i;
}
   2080e:	4628      	mov	r0, r5
   20810:	bd38      	pop	{r3, r4, r5, pc}

00020812 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   20812:	297f      	cmp	r1, #127	; 0x7f
   20814:	d90a      	bls.n	2082c <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   20816:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   2081a:	4299      	cmp	r1, r3
   2081c:	d809      	bhi.n	20832 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   2081e:	f061 037f 	orn	r3, r1, #127	; 0x7f
   20822:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   20824:	09c9      	lsrs	r1, r1, #7
   20826:	7041      	strb	r1, [r0, #1]
        return 2;
   20828:	2002      	movs	r0, #2
   2082a:	4770      	bx	lr
        buf[0] = len;
   2082c:	7001      	strb	r1, [r0, #0]
        return 1;
   2082e:	2001      	movs	r0, #1
   20830:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   20832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   20836:	4770      	bx	lr

00020838 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   20838:	7803      	ldrb	r3, [r0, #0]
   2083a:	f990 2000 	ldrsb.w	r2, [r0]
   2083e:	2a00      	cmp	r2, #0
   20840:	db02      	blt.n	20848 <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   20842:	800b      	strh	r3, [r1, #0]
        rc = 1;
   20844:	2001      	movs	r0, #1
    }
    return rc;
}
   20846:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   20848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2084c:	7842      	ldrb	r2, [r0, #1]
   2084e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   20852:	800b      	strh	r3, [r1, #0]
        rc = 2;
   20854:	2002      	movs	r0, #2
   20856:	4770      	bx	lr

00020858 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   20858:	b500      	push	{lr}
   2085a:	b083      	sub	sp, #12
   2085c:	4603      	mov	r3, r0
   2085e:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   20860:	6819      	ldr	r1, [r3, #0]
   20862:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   20864:	791b      	ldrb	r3, [r3, #4]
   20866:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   2086a:	23ff      	movs	r3, #255	; 0xff
   2086c:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   20870:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   20874:	2308      	movs	r3, #8
   20876:	466a      	mov	r2, sp
   20878:	2100      	movs	r1, #0
   2087a:	f7fd fe11 	bl	1e4a0 <flash_area_write>
    if (rc) {
   2087e:	b910      	cbnz	r0, 20886 <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   20880:	b003      	add	sp, #12
   20882:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   20886:	f06f 0001 	mvn.w	r0, #1
   2088a:	e7f9      	b.n	20880 <fcb_sector_hdr_init+0x28>

0002088c <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   2088c:	b530      	push	{r4, r5, lr}
   2088e:	b083      	sub	sp, #12
   20890:	4604      	mov	r4, r0
   20892:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   20894:	4615      	mov	r5, r2
   20896:	b19a      	cbz	r2, 208c0 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   20898:	2308      	movs	r3, #8
   2089a:	462a      	mov	r2, r5
   2089c:	2100      	movs	r1, #0
   2089e:	f7fd fe44 	bl	1e52a <flash_area_read_is_empty>
    if (rc < 0) {
   208a2:	1e03      	subs	r3, r0, #0
   208a4:	db0e      	blt.n	208c4 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   208a6:	2b01      	cmp	r3, #1
   208a8:	d00f      	beq.n	208ca <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   208aa:	682a      	ldr	r2, [r5, #0]
   208ac:	6823      	ldr	r3, [r4, #0]
   208ae:	429a      	cmp	r2, r3
   208b0:	d10d      	bne.n	208ce <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   208b2:	792a      	ldrb	r2, [r5, #4]
   208b4:	7923      	ldrb	r3, [r4, #4]
   208b6:	429a      	cmp	r2, r3
   208b8:	d10c      	bne.n	208d4 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   208ba:	2001      	movs	r0, #1
}
   208bc:	b003      	add	sp, #12
   208be:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   208c0:	466d      	mov	r5, sp
   208c2:	e7e9      	b.n	20898 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   208c4:	f06f 0001 	mvn.w	r0, #1
   208c8:	e7f8      	b.n	208bc <fcb_sector_hdr_read+0x30>
        return 0;
   208ca:	2000      	movs	r0, #0
   208cc:	e7f6      	b.n	208bc <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   208ce:	f06f 0006 	mvn.w	r0, #6
   208d2:	e7f3      	b.n	208bc <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   208d4:	f06f 0007 	mvn.w	r0, #7
   208d8:	e7f0      	b.n	208bc <fcb_sector_hdr_read+0x30>

000208da <fcb_init>:
{
   208da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208de:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   208e0:	6883      	ldr	r3, [r0, #8]
   208e2:	2b00      	cmp	r3, #0
   208e4:	f000 8082 	beq.w	209ec <fcb_init+0x112>
   208e8:	4606      	mov	r6, r0
   208ea:	7943      	ldrb	r3, [r0, #5]
   208ec:	7982      	ldrb	r2, [r0, #6]
   208ee:	1a9b      	subs	r3, r3, r2
   208f0:	2b00      	cmp	r3, #0
   208f2:	dd7e      	ble.n	209f2 <fcb_init+0x118>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   208f4:	f04f 0b00 	mov.w	fp, #0
   208f8:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   208fc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   20900:	46d1      	mov	r9, sl
    int max_align = 1;
   20902:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   20906:	465f      	mov	r7, fp
   20908:	e00a      	b.n	20920 <fcb_init+0x46>
            max_align = flash_area_align(fap);
   2090a:	4620      	mov	r0, r4
   2090c:	f7fd fdf0 	bl	1e4f0 <flash_area_align>
   20910:	4680      	mov	r8, r0
   20912:	e012      	b.n	2093a <fcb_init+0x60>
            oldest = newest = fda.fd_id;
   20914:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   20918:	46a3      	mov	fp, r4
   2091a:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   2091c:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2091e:	3701      	adds	r7, #1
   20920:	7973      	ldrb	r3, [r6, #5]
   20922:	42bb      	cmp	r3, r7
   20924:	dd29      	ble.n	2097a <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   20926:	68b4      	ldr	r4, [r6, #8]
   20928:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2092c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   20930:	4620      	mov	r0, r4
   20932:	f7fd fddd 	bl	1e4f0 <flash_area_align>
        if (align > max_align) {
   20936:	4580      	cmp	r8, r0
   20938:	dbe7      	blt.n	2090a <fcb_init+0x30>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   2093a:	aa02      	add	r2, sp, #8
   2093c:	4621      	mov	r1, r4
   2093e:	4630      	mov	r0, r6
   20940:	f7ff ffa4 	bl	2088c <fcb_sector_hdr_read>
        if (rc < 0) {
   20944:	1e05      	subs	r5, r0, #0
   20946:	db3b      	blt.n	209c0 <fcb_init+0xe6>
        if (rc == 0) {
   20948:	2d00      	cmp	r5, #0
   2094a:	d0e8      	beq.n	2091e <fcb_init+0x44>
        if (oldest < 0) {
   2094c:	f1b9 0f00 	cmp.w	r9, #0
   20950:	dbe0      	blt.n	20914 <fcb_init+0x3a>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   20952:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20956:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   2095a:	fa0f f38a 	sxth.w	r3, sl
   2095e:	1ad3      	subs	r3, r2, r3
   20960:	2b00      	cmp	r3, #0
   20962:	dd02      	ble.n	2096a <fcb_init+0x90>
            newest = fda.fd_id;
   20964:	468a      	mov	sl, r1
            newest_fap = fap;
   20966:	46a3      	mov	fp, r4
   20968:	e7d9      	b.n	2091e <fcb_init+0x44>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2096a:	fa0f f389 	sxth.w	r3, r9
   2096e:	1a9a      	subs	r2, r3, r2
   20970:	2a00      	cmp	r2, #0
   20972:	ddd4      	ble.n	2091e <fcb_init+0x44>
            oldest = fda.fd_id;
   20974:	4689      	mov	r9, r1
            oldest_fap = fap;
   20976:	9401      	str	r4, [sp, #4]
   20978:	e7d1      	b.n	2091e <fcb_init+0x44>
    if (oldest < 0) {
   2097a:	f1b9 0f00 	cmp.w	r9, #0
   2097e:	db23      	blt.n	209c8 <fcb_init+0xee>
    fcb->f_align = max_align;
   20980:	fa5f f888 	uxtb.w	r8, r8
   20984:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   20988:	9b01      	ldr	r3, [sp, #4]
   2098a:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   2098c:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20990:	2308      	movs	r3, #8
   20992:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   20994:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   20998:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   2099c:	ea18 0505 	ands.w	r5, r8, r5
   209a0:	d11e      	bne.n	209e0 <fcb_init+0x106>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   209a2:	f106 011c 	add.w	r1, r6, #28
   209a6:	4630      	mov	r0, r6
   209a8:	f000 f984 	bl	20cb4 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   209ac:	f110 0f03 	cmn.w	r0, #3
   209b0:	d002      	beq.n	209b8 <fcb_init+0xde>
        if (rc != 0) {
   209b2:	2800      	cmp	r0, #0
   209b4:	d0f5      	beq.n	209a2 <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   209b6:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   209b8:	f106 000c 	add.w	r0, r6, #12
   209bc:	f7ed f9f6 	bl	ddac <os_mutex_init>
}
   209c0:	4628      	mov	r0, r5
   209c2:	b005      	add	sp, #20
   209c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   209c8:	68b3      	ldr	r3, [r6, #8]
   209ca:	461c      	mov	r4, r3
   209cc:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   209ce:	2200      	movs	r2, #0
   209d0:	4619      	mov	r1, r3
   209d2:	4630      	mov	r0, r6
   209d4:	f7ff ff40 	bl	20858 <fcb_sector_hdr_init>
        if (rc) {
   209d8:	4682      	mov	sl, r0
   209da:	b968      	cbnz	r0, 209f8 <fcb_init+0x11e>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   209dc:	46a3      	mov	fp, r4
   209de:	e7cf      	b.n	20980 <fcb_init+0xa6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   209e0:	2300      	movs	r3, #0
   209e2:	461a      	mov	r2, r3
   209e4:	4619      	mov	r1, r3
   209e6:	4618      	mov	r0, r3
   209e8:	f7ec fcba 	bl	d360 <__assert_func>
        return FCB_ERR_ARGS;
   209ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   209f0:	e7e6      	b.n	209c0 <fcb_init+0xe6>
   209f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   209f6:	e7e3      	b.n	209c0 <fcb_init+0xe6>
            return rc;
   209f8:	4605      	mov	r5, r0
   209fa:	e7e1      	b.n	209c0 <fcb_init+0xe6>

000209fc <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   209fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209fe:	4605      	mov	r5, r0
   20a00:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   20a02:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   20a04:	2400      	movs	r4, #0
    rfa = NULL;
   20a06:	4626      	mov	r6, r4
   20a08:	e006      	b.n	20a18 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   20a0a:	69ab      	ldr	r3, [r5, #24]
   20a0c:	428b      	cmp	r3, r1
   20a0e:	d00b      	beq.n	20a28 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   20a10:	1c63      	adds	r3, r4, #1
   20a12:	42bc      	cmp	r4, r7
   20a14:	da09      	bge.n	20a2a <fcb_new_area+0x2e>
   20a16:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   20a18:	4628      	mov	r0, r5
   20a1a:	f000 f96f 	bl	20cfc <fcb_getnext_area>
   20a1e:	4601      	mov	r1, r0
        if (!rfa) {
   20a20:	2e00      	cmp	r6, #0
   20a22:	d1f2      	bne.n	20a0a <fcb_new_area+0xe>
            rfa = fa;
   20a24:	4606      	mov	r6, r0
   20a26:	e7f0      	b.n	20a0a <fcb_new_area+0xe>
            return NULL;
   20a28:	2600      	movs	r6, #0
    return rfa;
}
   20a2a:	4630      	mov	r0, r6
   20a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020a2e <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   20a2e:	b538      	push	{r3, r4, r5, lr}
   20a30:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   20a32:	2100      	movs	r1, #0
   20a34:	f7ff ffe2 	bl	209fc <fcb_new_area>
    if (!fa) {
   20a38:	b178      	cbz	r0, 20a5a <fcb_append_to_scratch+0x2c>
   20a3a:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   20a3c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   20a3e:	3201      	adds	r2, #1
   20a40:	b292      	uxth	r2, r2
   20a42:	4601      	mov	r1, r0
   20a44:	4620      	mov	r0, r4
   20a46:	f7ff ff07 	bl	20858 <fcb_sector_hdr_init>
    if (rc) {
   20a4a:	b928      	cbnz	r0, 20a58 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   20a4c:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20a4e:	2308      	movs	r3, #8
   20a50:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   20a52:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   20a54:	3301      	adds	r3, #1
   20a56:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   20a58:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   20a5a:	f06f 0003 	mvn.w	r0, #3
   20a5e:	e7fb      	b.n	20a58 <fcb_append_to_scratch+0x2a>

00020a60 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   20a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20a64:	b082      	sub	sp, #8
   20a66:	4605      	mov	r5, r0
   20a68:	460c      	mov	r4, r1
   20a6a:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   20a6c:	a801      	add	r0, sp, #4
   20a6e:	f7ff fed0 	bl	20812 <fcb_put_len>
    if (cnt < 0) {
   20a72:	1e06      	subs	r6, r0, #0
   20a74:	db58      	blt.n	20b28 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   20a76:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20a7a:	2b01      	cmp	r3, #1
   20a7c:	d933      	bls.n	20ae6 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20a7e:	1e58      	subs	r0, r3, #1
   20a80:	fa10 f686 	uxtah	r6, r0, r6
   20a84:	4258      	negs	r0, r3
   20a86:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   20a88:	2b01      	cmp	r3, #1
   20a8a:	d903      	bls.n	20a94 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20a8c:	1e59      	subs	r1, r3, #1
   20a8e:	440c      	add	r4, r1
   20a90:	4259      	negs	r1, r3
   20a92:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   20a94:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   20a96:	2b01      	cmp	r3, #1
   20a98:	d927      	bls.n	20aea <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20a9a:	425c      	negs	r4, r3
   20a9c:	401c      	ands	r4, r3
   20a9e:	440c      	add	r4, r1
   20aa0:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20aa2:	f105 080c 	add.w	r8, r5, #12
   20aa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20aaa:	4640      	mov	r0, r8
   20aac:	f7ed f9e4 	bl	de78 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20ab0:	b108      	cbz	r0, 20ab6 <fcb_append+0x56>
   20ab2:	2809      	cmp	r0, #9
   20ab4:	d14e      	bne.n	20b54 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   20ab6:	6a2b      	ldr	r3, [r5, #32]
   20ab8:	4423      	add	r3, r4
   20aba:	46b1      	mov	r9, r6
   20abc:	441e      	add	r6, r3
   20abe:	69eb      	ldr	r3, [r5, #28]
   20ac0:	689b      	ldr	r3, [r3, #8]
   20ac2:	429e      	cmp	r6, r3
   20ac4:	d923      	bls.n	20b0e <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   20ac6:	79a9      	ldrb	r1, [r5, #6]
   20ac8:	4628      	mov	r0, r5
   20aca:	f7ff ff97 	bl	209fc <fcb_new_area>
        if (!fa || (fa->fa_size <
   20ace:	4682      	mov	sl, r0
   20ad0:	2800      	cmp	r0, #0
   20ad2:	d03c      	beq.n	20b4e <fcb_append+0xee>
   20ad4:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   20ad6:	eb04 0309 	add.w	r3, r4, r9
   20ada:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   20adc:	429a      	cmp	r2, r3
   20ade:	d206      	bcs.n	20aee <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   20ae0:	f06f 0603 	mvn.w	r6, #3
   20ae4:	e01d      	b.n	20b22 <fcb_append+0xc2>
        return len;
   20ae6:	b2b6      	uxth	r6, r6
   20ae8:	e7ce      	b.n	20a88 <fcb_append+0x28>
   20aea:	2401      	movs	r4, #1
   20aec:	e7d7      	b.n	20a9e <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   20aee:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   20af0:	3201      	adds	r2, #1
   20af2:	b292      	uxth	r2, r2
   20af4:	4601      	mov	r1, r0
   20af6:	4628      	mov	r0, r5
   20af8:	f7ff feae 	bl	20858 <fcb_sector_hdr_init>
        if (rc) {
   20afc:	4606      	mov	r6, r0
   20afe:	b980      	cbnz	r0, 20b22 <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   20b00:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20b04:	2308      	movs	r3, #8
   20b06:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   20b08:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   20b0a:	3301      	adds	r3, #1
   20b0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   20b0e:	464b      	mov	r3, r9
   20b10:	aa01      	add	r2, sp, #4
   20b12:	6a29      	ldr	r1, [r5, #32]
   20b14:	69e8      	ldr	r0, [r5, #28]
   20b16:	f7fd fcc3 	bl	1e4a0 <flash_area_write>
    if (rc) {
   20b1a:	4606      	mov	r6, r0
   20b1c:	b140      	cbz	r0, 20b30 <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   20b1e:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   20b22:	4640      	mov	r0, r8
   20b24:	f7ed f94c 	bl	ddc0 <os_mutex_release>
    return rc;
}
   20b28:	4630      	mov	r0, r6
   20b2a:	b002      	add	sp, #8
   20b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   20b30:	69eb      	ldr	r3, [r5, #28]
   20b32:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   20b34:	6a2b      	ldr	r3, [r5, #32]
   20b36:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   20b38:	444b      	add	r3, r9
   20b3a:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   20b3c:	4423      	add	r3, r4
   20b3e:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   20b40:	68bb      	ldr	r3, [r7, #8]
   20b42:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   20b44:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   20b46:	4640      	mov	r0, r8
   20b48:	f7ed f93a 	bl	ddc0 <os_mutex_release>
    return FCB_OK;
   20b4c:	e7ec      	b.n	20b28 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   20b4e:	f06f 0603 	mvn.w	r6, #3
   20b52:	e7e6      	b.n	20b22 <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   20b54:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20b58:	e7e6      	b.n	20b28 <fcb_append+0xc8>

00020b5a <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   20b5a:	b530      	push	{r4, r5, lr}
   20b5c:	b083      	sub	sp, #12
   20b5e:	4605      	mov	r5, r0
   20b60:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   20b62:	f10d 0207 	add.w	r2, sp, #7
   20b66:	f000 f818 	bl	20b9a <fcb_elem_crc8>
    if (rc) {
   20b6a:	b988      	cbnz	r0, 20b90 <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   20b6c:	68a0      	ldr	r0, [r4, #8]
   20b6e:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   20b70:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20b74:	2b01      	cmp	r3, #1
   20b76:	d903      	bls.n	20b80 <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20b78:	1e5a      	subs	r2, r3, #1
   20b7a:	4411      	add	r1, r2
   20b7c:	425b      	negs	r3, r3
   20b7e:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   20b80:	2301      	movs	r3, #1
   20b82:	f10d 0207 	add.w	r2, sp, #7
   20b86:	4401      	add	r1, r0
   20b88:	6820      	ldr	r0, [r4, #0]
   20b8a:	f7fd fc89 	bl	1e4a0 <flash_area_write>
    if (rc) {
   20b8e:	b908      	cbnz	r0, 20b94 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   20b90:	b003      	add	sp, #12
   20b92:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   20b94:	f06f 0001 	mvn.w	r0, #1
   20b98:	e7fa      	b.n	20b90 <fcb_append_finish+0x36>

00020b9a <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   20b9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20b9e:	b08b      	sub	sp, #44	; 0x2c
   20ba0:	4605      	mov	r5, r0
   20ba2:	4688      	mov	r8, r1
   20ba4:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   20ba6:	6849      	ldr	r1, [r1, #4]
   20ba8:	1c8a      	adds	r2, r1, #2
   20baa:	f8d8 0000 	ldr.w	r0, [r8]
   20bae:	6883      	ldr	r3, [r0, #8]
   20bb0:	429a      	cmp	r2, r3
   20bb2:	d84a      	bhi.n	20c4a <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   20bb4:	2302      	movs	r3, #2
   20bb6:	aa02      	add	r2, sp, #8
   20bb8:	f7fd fcb7 	bl	1e52a <flash_area_read_is_empty>
    if (rc < 0) {
   20bbc:	1e03      	subs	r3, r0, #0
   20bbe:	db47      	blt.n	20c50 <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   20bc0:	2b01      	cmp	r3, #1
   20bc2:	d048      	beq.n	20c56 <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   20bc4:	f10d 0106 	add.w	r1, sp, #6
   20bc8:	a802      	add	r0, sp, #8
   20bca:	f7ff fe35 	bl	20838 <fcb_get_len>
   20bce:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   20bd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   20bd4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20bd8:	2b01      	cmp	r3, #1
   20bda:	d918      	bls.n	20c0e <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20bdc:	1e5a      	subs	r2, r3, #1
   20bde:	fa12 f280 	uxtah	r2, r2, r0
   20be2:	425b      	negs	r3, r3
   20be4:	4013      	ands	r3, r2
   20be6:	440b      	add	r3, r1
   20be8:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   20bec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   20bf0:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   20bf4:	f7f5 fa06 	bl	16004 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   20bf8:	4622      	mov	r2, r4
   20bfa:	a902      	add	r1, sp, #8
   20bfc:	f7f5 fa04 	bl	16008 <crc8_calc>
   20c00:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   20c02:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   20c06:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   20c0a:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   20c0c:	e010      	b.n	20c30 <fcb_elem_crc8+0x96>
        return len;
   20c0e:	b283      	uxth	r3, r0
   20c10:	e7e9      	b.n	20be6 <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   20c12:	4623      	mov	r3, r4
   20c14:	aa02      	add	r2, sp, #8
   20c16:	4629      	mov	r1, r5
   20c18:	f8d8 0000 	ldr.w	r0, [r8]
   20c1c:	f7fd fc2c 	bl	1e478 <flash_area_read>
        if (rc) {
   20c20:	b9e0      	cbnz	r0, 20c5c <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   20c22:	4622      	mov	r2, r4
   20c24:	a902      	add	r1, sp, #8
   20c26:	4630      	mov	r0, r6
   20c28:	f7f5 f9ee 	bl	16008 <crc8_calc>
   20c2c:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   20c2e:	4425      	add	r5, r4
   20c30:	42bd      	cmp	r5, r7
   20c32:	d204      	bcs.n	20c3e <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   20c34:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   20c36:	2c20      	cmp	r4, #32
   20c38:	d9eb      	bls.n	20c12 <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   20c3a:	2420      	movs	r4, #32
   20c3c:	e7e9      	b.n	20c12 <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   20c3e:	f889 6000 	strb.w	r6, [r9]

    return 0;
   20c42:	2000      	movs	r0, #0
}
   20c44:	b00b      	add	sp, #44	; 0x2c
   20c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   20c4a:	f06f 0002 	mvn.w	r0, #2
   20c4e:	e7f9      	b.n	20c44 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   20c50:	f06f 0001 	mvn.w	r0, #1
   20c54:	e7f6      	b.n	20c44 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   20c56:	f06f 0002 	mvn.w	r0, #2
   20c5a:	e7f3      	b.n	20c44 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   20c5c:	f06f 0001 	mvn.w	r0, #1
   20c60:	e7f0      	b.n	20c44 <fcb_elem_crc8+0xaa>

00020c62 <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   20c62:	b530      	push	{r4, r5, lr}
   20c64:	b083      	sub	sp, #12
   20c66:	4605      	mov	r5, r0
   20c68:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   20c6a:	f10d 0207 	add.w	r2, sp, #7
   20c6e:	f7ff ff94 	bl	20b9a <fcb_elem_crc8>
    if (rc) {
   20c72:	b9b8      	cbnz	r0, 20ca4 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   20c74:	68a0      	ldr	r0, [r4, #8]
   20c76:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   20c78:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   20c7c:	2b01      	cmp	r3, #1
   20c7e:	d903      	bls.n	20c88 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20c80:	1e5a      	subs	r2, r3, #1
   20c82:	4411      	add	r1, r2
   20c84:	425b      	negs	r3, r3
   20c86:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   20c88:	2301      	movs	r3, #1
   20c8a:	f10d 0206 	add.w	r2, sp, #6
   20c8e:	4401      	add	r1, r0
   20c90:	6820      	ldr	r0, [r4, #0]
   20c92:	f7fd fbf1 	bl	1e478 <flash_area_read>
    if (rc) {
   20c96:	b938      	cbnz	r0, 20ca8 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   20c98:	f89d 2006 	ldrb.w	r2, [sp, #6]
   20c9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20ca0:	429a      	cmp	r2, r3
   20ca2:	d104      	bne.n	20cae <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   20ca4:	b003      	add	sp, #12
   20ca6:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   20ca8:	f06f 0001 	mvn.w	r0, #1
   20cac:	e7fa      	b.n	20ca4 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   20cae:	f06f 0005 	mvn.w	r0, #5
   20cb2:	e7f7      	b.n	20ca4 <fcb_elem_info+0x42>

00020cb4 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   20cb4:	b570      	push	{r4, r5, r6, lr}
   20cb6:	4606      	mov	r6, r0
   20cb8:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   20cba:	f7ff ffd2 	bl	20c62 <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   20cbe:	b170      	cbz	r0, 20cde <fcb_getnext_in_area+0x2a>
   20cc0:	f110 0f06 	cmn.w	r0, #6
   20cc4:	d00b      	beq.n	20cde <fcb_getnext_in_area+0x2a>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   20cc6:	bd70      	pop	{r4, r5, r6, pc}
   20cc8:	4259      	negs	r1, r3
   20cca:	400b      	ands	r3, r1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   20ccc:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   20cce:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   20cd0:	4629      	mov	r1, r5
   20cd2:	4630      	mov	r0, r6
   20cd4:	f7ff ffc5 	bl	20c62 <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   20cd8:	f110 0f06 	cmn.w	r0, #6
   20cdc:	d1f3      	bne.n	20cc6 <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   20cde:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   20ce0:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   20ce2:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   20ce6:	2b01      	cmp	r3, #1
   20ce8:	d903      	bls.n	20cf2 <fcb_getnext_in_area+0x3e>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   20cea:	1e59      	subs	r1, r3, #1
   20cec:	440a      	add	r2, r1
   20cee:	4259      	negs	r1, r3
   20cf0:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   20cf2:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   20cf4:	2b01      	cmp	r3, #1
   20cf6:	d8e7      	bhi.n	20cc8 <fcb_getnext_in_area+0x14>
        return len;
   20cf8:	2301      	movs	r3, #1
   20cfa:	e7e7      	b.n	20ccc <fcb_getnext_in_area+0x18>

00020cfc <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   20cfc:	4603      	mov	r3, r0
    fap++;
   20cfe:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   20d00:	6880      	ldr	r0, [r0, #8]
   20d02:	795b      	ldrb	r3, [r3, #5]
   20d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20d08:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   20d0c:	428b      	cmp	r3, r1
   20d0e:	d900      	bls.n	20d12 <fcb_getnext_area+0x16>
    fap++;
   20d10:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   20d12:	4770      	bx	lr

00020d14 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   20d14:	b538      	push	{r3, r4, r5, lr}
   20d16:	4605      	mov	r5, r0
   20d18:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   20d1a:	680b      	ldr	r3, [r1, #0]
   20d1c:	b313      	cbz	r3, 20d64 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   20d1e:	6863      	ldr	r3, [r4, #4]
   20d20:	bb1b      	cbnz	r3, 20d6a <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   20d22:	2308      	movs	r3, #8
   20d24:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   20d26:	4621      	mov	r1, r4
   20d28:	4628      	mov	r0, r5
   20d2a:	f7ff ff9a 	bl	20c62 <fcb_elem_info>
   20d2e:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   20d30:	f113 0f06 	cmn.w	r3, #6
   20d34:	d01f      	beq.n	20d76 <fcb_getnext_nolock+0x62>
   20d36:	b19b      	cbz	r3, 20d60 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   20d38:	6821      	ldr	r1, [r4, #0]
   20d3a:	69eb      	ldr	r3, [r5, #28]
   20d3c:	4299      	cmp	r1, r3
   20d3e:	d02a      	beq.n	20d96 <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   20d40:	4628      	mov	r0, r5
   20d42:	f7ff ffdb 	bl	20cfc <fcb_getnext_area>
   20d46:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   20d48:	2308      	movs	r3, #8
   20d4a:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   20d4c:	4621      	mov	r1, r4
   20d4e:	4628      	mov	r0, r5
   20d50:	f7ff ff87 	bl	20c62 <fcb_elem_info>
   20d54:	4603      	mov	r3, r0
            switch (rc) {
   20d56:	f110 0f06 	cmn.w	r0, #6
   20d5a:	d00c      	beq.n	20d76 <fcb_getnext_nolock+0x62>
   20d5c:	2800      	cmp	r0, #0
   20d5e:	d1eb      	bne.n	20d38 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   20d60:	4618      	mov	r0, r3
   20d62:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   20d64:	6983      	ldr	r3, [r0, #24]
   20d66:	600b      	str	r3, [r1, #0]
   20d68:	e7d9      	b.n	20d1e <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   20d6a:	4621      	mov	r1, r4
   20d6c:	4628      	mov	r0, r5
   20d6e:	f7ff ffa1 	bl	20cb4 <fcb_getnext_in_area>
   20d72:	4603      	mov	r3, r0
   20d74:	e7dc      	b.n	20d30 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   20d76:	f113 0f06 	cmn.w	r3, #6
   20d7a:	d10a      	bne.n	20d92 <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   20d7c:	4621      	mov	r1, r4
   20d7e:	4628      	mov	r0, r5
   20d80:	f7ff ff98 	bl	20cb4 <fcb_getnext_in_area>
        if (rc == 0) {
   20d84:	4603      	mov	r3, r0
   20d86:	2800      	cmp	r0, #0
   20d88:	d0ea      	beq.n	20d60 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   20d8a:	f110 0f06 	cmn.w	r0, #6
   20d8e:	d0f2      	beq.n	20d76 <fcb_getnext_nolock+0x62>
next_sector:
   20d90:	e7d2      	b.n	20d38 <fcb_getnext_nolock+0x24>
    return 0;
   20d92:	2300      	movs	r3, #0
   20d94:	e7e4      	b.n	20d60 <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   20d96:	f06f 0302 	mvn.w	r3, #2
   20d9a:	e7e1      	b.n	20d60 <fcb_getnext_nolock+0x4c>

00020d9c <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   20d9c:	b570      	push	{r4, r5, r6, lr}
   20d9e:	4604      	mov	r4, r0
   20da0:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20da2:	f100 060c 	add.w	r6, r0, #12
   20da6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20daa:	4630      	mov	r0, r6
   20dac:	f7ed f864 	bl	de78 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20db0:	b108      	cbz	r0, 20db6 <fcb_getnext+0x1a>
   20db2:	2809      	cmp	r0, #9
   20db4:	d109      	bne.n	20dca <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   20db6:	4629      	mov	r1, r5
   20db8:	4620      	mov	r0, r4
   20dba:	f7ff ffab 	bl	20d14 <fcb_getnext_nolock>
   20dbe:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   20dc0:	4630      	mov	r0, r6
   20dc2:	f7ec fffd 	bl	ddc0 <os_mutex_release>

    return rc;
}
   20dc6:	4620      	mov	r0, r4
   20dc8:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   20dca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20dce:	e7fa      	b.n	20dc6 <fcb_getnext+0x2a>

00020dd0 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   20dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20dd2:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20dd4:	f100 050c 	add.w	r5, r0, #12
   20dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ddc:	4628      	mov	r0, r5
   20dde:	f7ed f84b 	bl	de78 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20de2:	b108      	cbz	r0, 20de8 <fcb_rotate+0x18>
   20de4:	2809      	cmp	r0, #9
   20de6:	d12c      	bne.n	20e42 <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   20de8:	69a0      	ldr	r0, [r4, #24]
   20dea:	6882      	ldr	r2, [r0, #8]
   20dec:	2100      	movs	r1, #0
   20dee:	f7fd fb6b 	bl	1e4c8 <flash_area_erase>
    if (rc) {
   20df2:	4606      	mov	r6, r0
   20df4:	bb10      	cbnz	r0, 20e3c <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   20df6:	69a1      	ldr	r1, [r4, #24]
   20df8:	69e3      	ldr	r3, [r4, #28]
   20dfa:	4299      	cmp	r1, r3
   20dfc:	d009      	beq.n	20e12 <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   20dfe:	69a1      	ldr	r1, [r4, #24]
   20e00:	4620      	mov	r0, r4
   20e02:	f7ff ff7b 	bl	20cfc <fcb_getnext_area>
   20e06:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   20e08:	4628      	mov	r0, r5
   20e0a:	f7ec ffd9 	bl	ddc0 <os_mutex_release>
    return rc;
}
   20e0e:	4630      	mov	r0, r6
   20e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   20e12:	4620      	mov	r0, r4
   20e14:	f7ff ff72 	bl	20cfc <fcb_getnext_area>
   20e18:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   20e1a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   20e1c:	3201      	adds	r2, #1
   20e1e:	b292      	uxth	r2, r2
   20e20:	4601      	mov	r1, r0
   20e22:	4620      	mov	r0, r4
   20e24:	f7ff fd18 	bl	20858 <fcb_sector_hdr_init>
        if (rc) {
   20e28:	4606      	mov	r6, r0
   20e2a:	2800      	cmp	r0, #0
   20e2c:	d1ec      	bne.n	20e08 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   20e2e:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   20e30:	2308      	movs	r3, #8
   20e32:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   20e34:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   20e36:	3301      	adds	r3, #1
   20e38:	85a3      	strh	r3, [r4, #44]	; 0x2c
   20e3a:	e7e0      	b.n	20dfe <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   20e3c:	f06f 0601 	mvn.w	r6, #1
   20e40:	e7e2      	b.n	20e08 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   20e42:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20e46:	e7e2      	b.n	20e0e <fcb_rotate+0x3e>

00020e48 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   20e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20e4c:	b084      	sub	sp, #16
   20e4e:	4606      	mov	r6, r0
   20e50:	460d      	mov	r5, r1
   20e52:	4617      	mov	r7, r2
   20e54:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   20e56:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   20e58:	2300      	movs	r3, #0
   20e5a:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20e5c:	f100 040c 	add.w	r4, r0, #12
   20e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20e64:	4620      	mov	r0, r4
   20e66:	f7ed f807 	bl	de78 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   20e6a:	b170      	cbz	r0, 20e8a <fcb_walk+0x42>
   20e6c:	2809      	cmp	r0, #9
   20e6e:	d00c      	beq.n	20e8a <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   20e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e74:	e01e      	b.n	20eb4 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   20e76:	4641      	mov	r1, r8
   20e78:	4668      	mov	r0, sp
   20e7a:	47b8      	blx	r7
        if (rc) {
   20e7c:	4603      	mov	r3, r0
   20e7e:	b9c8      	cbnz	r0, 20eb4 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   20e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20e84:	4620      	mov	r0, r4
   20e86:	f7ec fff7 	bl	de78 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   20e8a:	4669      	mov	r1, sp
   20e8c:	4630      	mov	r0, r6
   20e8e:	f7ff ff41 	bl	20d14 <fcb_getnext_nolock>
   20e92:	f110 0f03 	cmn.w	r0, #3
   20e96:	d009      	beq.n	20eac <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   20e98:	4620      	mov	r0, r4
   20e9a:	f7ec ff91 	bl	ddc0 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   20e9e:	2d00      	cmp	r5, #0
   20ea0:	d0e9      	beq.n	20e76 <fcb_walk+0x2e>
   20ea2:	9800      	ldr	r0, [sp, #0]
   20ea4:	42a8      	cmp	r0, r5
   20ea6:	d0e6      	beq.n	20e76 <fcb_walk+0x2e>
            return 0;
   20ea8:	2300      	movs	r3, #0
   20eaa:	e003      	b.n	20eb4 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   20eac:	4620      	mov	r0, r4
   20eae:	f7ec ff87 	bl	ddc0 <os_mutex_release>
    return 0;
   20eb2:	2300      	movs	r3, #0
}
   20eb4:	4618      	mov	r0, r3
   20eb6:	b004      	add	sp, #16
   20eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020ebc <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   20ebc:	6843      	ldr	r3, [r0, #4]
   20ebe:	428b      	cmp	r3, r1
   20ec0:	d805      	bhi.n	20ece <hal_flash_check_addr+0x12>
   20ec2:	6882      	ldr	r2, [r0, #8]
   20ec4:	4413      	add	r3, r2
   20ec6:	428b      	cmp	r3, r1
   20ec8:	d304      	bcc.n	20ed4 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   20eca:	2000      	movs	r0, #0
   20ecc:	4770      	bx	lr
        return SYS_EINVAL;
   20ece:	f06f 0001 	mvn.w	r0, #1
   20ed2:	4770      	bx	lr
   20ed4:	f06f 0001 	mvn.w	r0, #1
}
   20ed8:	4770      	bx	lr

00020eda <hal_flash_init>:
{
   20eda:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   20edc:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   20ede:	462c      	mov	r4, r5
   20ee0:	e001      	b.n	20ee6 <hal_flash_init+0xc>
   20ee2:	3401      	adds	r4, #1
   20ee4:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   20ee6:	4620      	mov	r0, r4
   20ee8:	f7f6 fb92 	bl	17610 <hal_bsp_flash_dev>
        if (!hf) {
   20eec:	b138      	cbz	r0, 20efe <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   20eee:	6802      	ldr	r2, [r0, #0]
   20ef0:	6952      	ldr	r2, [r2, #20]
   20ef2:	4790      	blx	r2
   20ef4:	2800      	cmp	r0, #0
   20ef6:	d0f4      	beq.n	20ee2 <hal_flash_init+0x8>
            rc = SYS_EIO;
   20ef8:	f06f 0504 	mvn.w	r5, #4
   20efc:	e7f1      	b.n	20ee2 <hal_flash_init+0x8>
}
   20efe:	4628      	mov	r0, r5
   20f00:	bd38      	pop	{r3, r4, r5, pc}

00020f02 <hal_flash_align>:
{
   20f02:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   20f04:	f7f6 fb84 	bl	17610 <hal_bsp_flash_dev>
    if (!hf) {
   20f08:	b108      	cbz	r0, 20f0e <hal_flash_align+0xc>
    return hf->hf_align;
   20f0a:	7c00      	ldrb	r0, [r0, #16]
}
   20f0c:	bd08      	pop	{r3, pc}
        return 1;
   20f0e:	2001      	movs	r0, #1
   20f10:	e7fc      	b.n	20f0c <hal_flash_align+0xa>

00020f12 <hal_flash_erased_val>:
{
   20f12:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   20f14:	f7f6 fb7c 	bl	17610 <hal_bsp_flash_dev>
    if (!hf) {
   20f18:	b108      	cbz	r0, 20f1e <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   20f1a:	7d00      	ldrb	r0, [r0, #20]
}
   20f1c:	bd08      	pop	{r3, pc}
        return 1;
   20f1e:	2001      	movs	r0, #1
   20f20:	e7fc      	b.n	20f1c <hal_flash_erased_val+0xa>

00020f22 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   20f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f26:	460c      	mov	r4, r1
   20f28:	4617      	mov	r7, r2
   20f2a:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20f2c:	f7f6 fb70 	bl	17610 <hal_bsp_flash_dev>
    if (!hf) {
   20f30:	b1a0      	cbz	r0, 20f5c <hal_flash_read+0x3a>
   20f32:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20f34:	4621      	mov	r1, r4
   20f36:	f7ff ffc1 	bl	20ebc <hal_flash_check_addr>
   20f3a:	b990      	cbnz	r0, 20f62 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20f3c:	1961      	adds	r1, r4, r5
   20f3e:	4630      	mov	r0, r6
   20f40:	f7ff ffbc 	bl	20ebc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20f44:	b980      	cbnz	r0, 20f68 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   20f46:	6833      	ldr	r3, [r6, #0]
   20f48:	f8d3 8000 	ldr.w	r8, [r3]
   20f4c:	462b      	mov	r3, r5
   20f4e:	463a      	mov	r2, r7
   20f50:	4621      	mov	r1, r4
   20f52:	4630      	mov	r0, r6
   20f54:	47c0      	blx	r8
    if (rc != 0) {
   20f56:	b950      	cbnz	r0, 20f6e <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   20f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   20f5c:	f06f 0001 	mvn.w	r0, #1
   20f60:	e7fa      	b.n	20f58 <hal_flash_read+0x36>
        return SYS_EINVAL;
   20f62:	f06f 0001 	mvn.w	r0, #1
   20f66:	e7f7      	b.n	20f58 <hal_flash_read+0x36>
   20f68:	f06f 0001 	mvn.w	r0, #1
   20f6c:	e7f4      	b.n	20f58 <hal_flash_read+0x36>
        return SYS_EIO;
   20f6e:	f06f 0004 	mvn.w	r0, #4
   20f72:	e7f1      	b.n	20f58 <hal_flash_read+0x36>

00020f74 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   20f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f78:	4604      	mov	r4, r0
   20f7a:	460d      	mov	r5, r1
   20f7c:	4690      	mov	r8, r2
   20f7e:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20f80:	f7f6 fb46 	bl	17610 <hal_bsp_flash_dev>
    if (!hf) {
   20f84:	b1e8      	cbz	r0, 20fc2 <hal_flash_write+0x4e>
   20f86:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20f88:	4629      	mov	r1, r5
   20f8a:	f7ff ff97 	bl	20ebc <hal_flash_check_addr>
   20f8e:	b9d8      	cbnz	r0, 20fc8 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   20f90:	19a9      	adds	r1, r5, r6
   20f92:	4638      	mov	r0, r7
   20f94:	f7ff ff92 	bl	20ebc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   20f98:	b9c8      	cbnz	r0, 20fce <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   20f9a:	08e3      	lsrs	r3, r4, #3
   20f9c:	4a10      	ldr	r2, [pc, #64]	; (20fe0 <hal_flash_write+0x6c>)
   20f9e:	5cd0      	ldrb	r0, [r2, r3]
   20fa0:	f004 0407 	and.w	r4, r4, #7
   20fa4:	fa40 f404 	asr.w	r4, r0, r4
   20fa8:	f014 0f01 	tst.w	r4, #1
   20fac:	d112      	bne.n	20fd4 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   20fae:	683b      	ldr	r3, [r7, #0]
   20fb0:	685c      	ldr	r4, [r3, #4]
   20fb2:	4633      	mov	r3, r6
   20fb4:	4642      	mov	r2, r8
   20fb6:	4629      	mov	r1, r5
   20fb8:	4638      	mov	r0, r7
   20fba:	47a0      	blx	r4
    if (rc != 0) {
   20fbc:	b968      	cbnz	r0, 20fda <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   20fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   20fc2:	f06f 0001 	mvn.w	r0, #1
   20fc6:	e7fa      	b.n	20fbe <hal_flash_write+0x4a>
        return SYS_EINVAL;
   20fc8:	f06f 0001 	mvn.w	r0, #1
   20fcc:	e7f7      	b.n	20fbe <hal_flash_write+0x4a>
   20fce:	f06f 0001 	mvn.w	r0, #1
   20fd2:	e7f4      	b.n	20fbe <hal_flash_write+0x4a>
        return SYS_EACCES;
   20fd4:	f06f 0006 	mvn.w	r0, #6
   20fd8:	e7f1      	b.n	20fbe <hal_flash_write+0x4a>
        return SYS_EIO;
   20fda:	f06f 0004 	mvn.w	r0, #4
   20fde:	e7ee      	b.n	20fbe <hal_flash_write+0x4a>
   20fe0:	200075d4 	.word	0x200075d4

00020fe4 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   20fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20fe8:	b082      	sub	sp, #8
   20fea:	4605      	mov	r5, r0
   20fec:	460e      	mov	r6, r1
   20fee:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   20ff0:	f7f6 fb0e 	bl	17610 <hal_bsp_flash_dev>
    if (!hf) {
   20ff4:	2800      	cmp	r0, #0
   20ff6:	d049      	beq.n	2108c <hal_flash_erase+0xa8>
   20ff8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   20ffa:	4631      	mov	r1, r6
   20ffc:	f7ff ff5e 	bl	20ebc <hal_flash_check_addr>
   21000:	2800      	cmp	r0, #0
   21002:	d146      	bne.n	21092 <hal_flash_erase+0xae>
      hal_flash_check_addr(hf, address + num_bytes)) {
   21004:	eb06 0809 	add.w	r8, r6, r9
   21008:	4641      	mov	r1, r8
   2100a:	4620      	mov	r0, r4
   2100c:	f7ff ff56 	bl	20ebc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   21010:	2800      	cmp	r0, #0
   21012:	d141      	bne.n	21098 <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   21014:	08eb      	lsrs	r3, r5, #3
   21016:	4a25      	ldr	r2, [pc, #148]	; (210ac <hal_flash_erase+0xc8>)
   21018:	5cd7      	ldrb	r7, [r2, r3]
   2101a:	f005 0507 	and.w	r5, r5, #7
   2101e:	fa47 f505 	asr.w	r5, r7, r5
   21022:	f015 0a01 	ands.w	sl, r5, #1
   21026:	d13a      	bne.n	2109e <hal_flash_erase+0xba>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   21028:	45b0      	cmp	r8, r6
   2102a:	d93b      	bls.n	210a4 <hal_flash_erase+0xc0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   2102c:	6823      	ldr	r3, [r4, #0]
   2102e:	699b      	ldr	r3, [r3, #24]
   21030:	b353      	cbz	r3, 21088 <hal_flash_erase+0xa4>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   21032:	464a      	mov	r2, r9
   21034:	4631      	mov	r1, r6
   21036:	4620      	mov	r0, r4
   21038:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   2103a:	4650      	mov	r0, sl
   2103c:	b002      	add	sp, #8
   2103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   21042:	2300      	movs	r3, #0
   21044:	461a      	mov	r2, r3
   21046:	4619      	mov	r1, r3
   21048:	4618      	mov	r0, r3
   2104a:	f7ec f989 	bl	d360 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   2104e:	3501      	adds	r5, #1
   21050:	68e3      	ldr	r3, [r4, #12]
   21052:	42ab      	cmp	r3, r5
   21054:	ddf1      	ble.n	2103a <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   21056:	6823      	ldr	r3, [r4, #0]
   21058:	68df      	ldr	r7, [r3, #12]
   2105a:	466b      	mov	r3, sp
   2105c:	aa01      	add	r2, sp, #4
   2105e:	4629      	mov	r1, r5
   21060:	4620      	mov	r0, r4
   21062:	47b8      	blx	r7
            assert(rc == 0);
   21064:	2800      	cmp	r0, #0
   21066:	d1ec      	bne.n	21042 <hal_flash_erase+0x5e>
            end_area = start + size;
   21068:	9901      	ldr	r1, [sp, #4]
   2106a:	9b00      	ldr	r3, [sp, #0]
   2106c:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   2106e:	429e      	cmp	r6, r3
   21070:	d2ed      	bcs.n	2104e <hal_flash_erase+0x6a>
   21072:	4588      	cmp	r8, r1
   21074:	d9eb      	bls.n	2104e <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   21076:	6823      	ldr	r3, [r4, #0]
   21078:	689b      	ldr	r3, [r3, #8]
   2107a:	4620      	mov	r0, r4
   2107c:	4798      	blx	r3
   2107e:	2800      	cmp	r0, #0
   21080:	d0e5      	beq.n	2104e <hal_flash_erase+0x6a>
                    return SYS_EIO;
   21082:	f06f 0a04 	mvn.w	sl, #4
   21086:	e7d8      	b.n	2103a <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   21088:	4655      	mov	r5, sl
   2108a:	e7e1      	b.n	21050 <hal_flash_erase+0x6c>
        return SYS_EINVAL;
   2108c:	f06f 0a01 	mvn.w	sl, #1
   21090:	e7d3      	b.n	2103a <hal_flash_erase+0x56>
        return SYS_EINVAL;
   21092:	f06f 0a01 	mvn.w	sl, #1
   21096:	e7d0      	b.n	2103a <hal_flash_erase+0x56>
   21098:	f06f 0a01 	mvn.w	sl, #1
   2109c:	e7cd      	b.n	2103a <hal_flash_erase+0x56>
        return SYS_EACCES;
   2109e:	f06f 0a06 	mvn.w	sl, #6
   210a2:	e7ca      	b.n	2103a <hal_flash_erase+0x56>
        return SYS_EINVAL;
   210a4:	f06f 0a01 	mvn.w	sl, #1
   210a8:	e7c7      	b.n	2103a <hal_flash_erase+0x56>
   210aa:	bf00      	nop
   210ac:	200075d4 	.word	0x200075d4

000210b0 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   210b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   210b2:	4604      	mov	r4, r0
   210b4:	4616      	mov	r6, r2
   210b6:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   210b8:	6807      	ldr	r7, [r0, #0]
   210ba:	683f      	ldr	r7, [r7, #0]
   210bc:	47b8      	blx	r7
    if (rc != 0) {
   210be:	b968      	cbnz	r0, 210dc <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   210c0:	2100      	movs	r1, #0
   210c2:	e000      	b.n	210c6 <hal_flash_is_erased+0x16>
   210c4:	3101      	adds	r1, #1
   210c6:	42a9      	cmp	r1, r5
   210c8:	d206      	bcs.n	210d8 <hal_flash_is_erased+0x28>
        if (buf[i] != hf->hf_erased_val) {
   210ca:	f816 e001 	ldrb.w	lr, [r6, r1]
   210ce:	f894 c014 	ldrb.w	ip, [r4, #20]
   210d2:	45e6      	cmp	lr, ip
   210d4:	d0f6      	beq.n	210c4 <hal_flash_is_erased+0x14>
   210d6:	e000      	b.n	210da <hal_flash_is_erased+0x2a>
            return 0;
        }
    }
    return 1;
   210d8:	2001      	movs	r0, #1
}
   210da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   210dc:	f06f 0004 	mvn.w	r0, #4
   210e0:	e7fb      	b.n	210da <hal_flash_is_erased+0x2a>

000210e2 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   210e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   210e6:	460c      	mov	r4, r1
   210e8:	4690      	mov	r8, r2
   210ea:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   210ec:	f7f6 fa90 	bl	17610 <hal_bsp_flash_dev>
    if (!hf) {
   210f0:	b1f8      	cbz	r0, 21132 <hal_flash_isempty+0x50>
   210f2:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   210f4:	4621      	mov	r1, r4
   210f6:	f7ff fee1 	bl	20ebc <hal_flash_check_addr>
   210fa:	b9e8      	cbnz	r0, 21138 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   210fc:	1961      	adds	r1, r4, r5
   210fe:	4630      	mov	r0, r6
   21100:	f7ff fedc 	bl	20ebc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   21104:	b9d8      	cbnz	r0, 2113e <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   21106:	6833      	ldr	r3, [r6, #0]
   21108:	691f      	ldr	r7, [r3, #16]
   2110a:	b15f      	cbz	r7, 21124 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   2110c:	462b      	mov	r3, r5
   2110e:	4642      	mov	r2, r8
   21110:	4621      	mov	r1, r4
   21112:	4630      	mov	r0, r6
   21114:	47b8      	blx	r7
        if (rc < 0) {
   21116:	2800      	cmp	r0, #0
   21118:	db01      	blt.n	2111e <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   2111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   2111e:	f06f 0004 	mvn.w	r0, #4
   21122:	e7fa      	b.n	2111a <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   21124:	462b      	mov	r3, r5
   21126:	4642      	mov	r2, r8
   21128:	4621      	mov	r1, r4
   2112a:	4630      	mov	r0, r6
   2112c:	f7ff ffc0 	bl	210b0 <hal_flash_is_erased>
   21130:	e7f3      	b.n	2111a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   21132:	f06f 0001 	mvn.w	r0, #1
   21136:	e7f0      	b.n	2111a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   21138:	f06f 0001 	mvn.w	r0, #1
   2113c:	e7ed      	b.n	2111a <hal_flash_isempty+0x38>
   2113e:	f06f 0001 	mvn.w	r0, #1
   21142:	e7ea      	b.n	2111a <hal_flash_isempty+0x38>

00021144 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   21144:	b5f0      	push	{r4, r5, r6, r7, lr}
   21146:	b085      	sub	sp, #20
   21148:	4607      	mov	r7, r0
   2114a:	460e      	mov	r6, r1
   2114c:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   2114e:	2400      	movs	r4, #0
   21150:	e007      	b.n	21162 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   21152:	466a      	mov	r2, sp
   21154:	19a1      	adds	r1, r4, r6
   21156:	4638      	mov	r0, r7
   21158:	f7ff ffc3 	bl	210e2 <hal_flash_isempty>
        if (empty != 1) {
   2115c:	2801      	cmp	r0, #1
   2115e:	d108      	bne.n	21172 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   21160:	3410      	adds	r4, #16
   21162:	42ac      	cmp	r4, r5
   21164:	d204      	bcs.n	21170 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   21166:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   21168:	2b0f      	cmp	r3, #15
   2116a:	d9f2      	bls.n	21152 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   2116c:	2310      	movs	r3, #16
   2116e:	e7f0      	b.n	21152 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   21170:	2001      	movs	r0, #1
}
   21172:	b005      	add	sp, #20
   21174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00021178 <os_malloc_lock>:
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
{
   21178:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   2117a:	4b08      	ldr	r3, [pc, #32]	; (2119c <os_malloc_lock+0x24>)
   2117c:	681b      	ldr	r3, [r3, #0]
   2117e:	b903      	cbnz	r3, 21182 <os_malloc_lock+0xa>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
    }
#endif
}
   21180:	bd08      	pop	{r3, pc}
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   21182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21186:	4806      	ldr	r0, [pc, #24]	; (211a0 <os_malloc_lock+0x28>)
   21188:	f7ec fe76 	bl	de78 <os_mutex_pend>
        assert(rc == 0);
   2118c:	2800      	cmp	r0, #0
   2118e:	d0f7      	beq.n	21180 <os_malloc_lock+0x8>
   21190:	2300      	movs	r3, #0
   21192:	461a      	mov	r2, r3
   21194:	4619      	mov	r1, r3
   21196:	4618      	mov	r0, r3
   21198:	f7ec f8e2 	bl	d360 <__assert_func>
   2119c:	20002f48 	.word	0x20002f48
   211a0:	200075d8 	.word	0x200075d8

000211a4 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   211a4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   211a6:	4b07      	ldr	r3, [pc, #28]	; (211c4 <os_malloc_unlock+0x20>)
   211a8:	681b      	ldr	r3, [r3, #0]
   211aa:	b903      	cbnz	r3, 211ae <os_malloc_unlock+0xa>
        rc = os_mutex_release(&os_malloc_mutex);
        assert(rc == 0);
    }
#endif
}
   211ac:	bd08      	pop	{r3, pc}
        rc = os_mutex_release(&os_malloc_mutex);
   211ae:	4806      	ldr	r0, [pc, #24]	; (211c8 <os_malloc_unlock+0x24>)
   211b0:	f7ec fe06 	bl	ddc0 <os_mutex_release>
        assert(rc == 0);
   211b4:	2800      	cmp	r0, #0
   211b6:	d0f9      	beq.n	211ac <os_malloc_unlock+0x8>
   211b8:	2300      	movs	r3, #0
   211ba:	461a      	mov	r2, r3
   211bc:	4619      	mov	r1, r3
   211be:	4618      	mov	r0, r3
   211c0:	f7ec f8ce 	bl	d360 <__assert_func>
   211c4:	20002f48 	.word	0x20002f48
   211c8:	200075d8 	.word	0x200075d8

000211cc <os_malloc>:

void *
os_malloc(size_t size)
{
   211cc:	b510      	push	{r4, lr}
   211ce:	4604      	mov	r4, r0
    void *ptr;

    os_malloc_lock();
   211d0:	f7ff ffd2 	bl	21178 <os_malloc_lock>
    ptr = malloc(size);
   211d4:	4620      	mov	r0, r4
   211d6:	f7f0 f8df 	bl	11398 <malloc>
   211da:	4604      	mov	r4, r0
    os_malloc_unlock();
   211dc:	f7ff ffe2 	bl	211a4 <os_malloc_unlock>

    return ptr;
}
   211e0:	4620      	mov	r0, r4
   211e2:	bd10      	pop	{r4, pc}

000211e4 <os_free>:

void
os_free(void *mem)
{
   211e4:	b510      	push	{r4, lr}
   211e6:	4604      	mov	r4, r0
    os_malloc_lock();
   211e8:	f7ff ffc6 	bl	21178 <os_malloc_lock>
    free(mem);
   211ec:	4620      	mov	r0, r4
   211ee:	f7f0 f909 	bl	11404 <free>
    os_malloc_unlock();
   211f2:	f7ff ffd7 	bl	211a4 <os_malloc_unlock>
}
   211f6:	bd10      	pop	{r4, pc}

000211f8 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
   211f8:	b510      	push	{r4, lr}
   211fa:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   211fc:	7a03      	ldrb	r3, [r0, #8]
   211fe:	f013 0f01 	tst.w	r3, #1
   21202:	d008      	beq.n	21216 <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   21204:	6803      	ldr	r3, [r0, #0]
   21206:	2201      	movs	r2, #1
   21208:	4908      	ldr	r1, [pc, #32]	; (2122c <json_encode_object_start+0x34>)
   2120a:	6840      	ldr	r0, [r0, #4]
   2120c:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   2120e:	7a23      	ldrb	r3, [r4, #8]
   21210:	f36f 0300 	bfc	r3, #0, #1
   21214:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   21216:	6823      	ldr	r3, [r4, #0]
   21218:	2201      	movs	r2, #1
   2121a:	4905      	ldr	r1, [pc, #20]	; (21230 <json_encode_object_start+0x38>)
   2121c:	6860      	ldr	r0, [r4, #4]
   2121e:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   21220:	7a23      	ldrb	r3, [r4, #8]
   21222:	f36f 0300 	bfc	r3, #0, #1
   21226:	7223      	strb	r3, [r4, #8]

    return (0);
}
   21228:	2000      	movs	r0, #0
   2122a:	bd10      	pop	{r4, pc}
   2122c:	00025b7c 	.word	0x00025b7c
   21230:	00025b80 	.word	0x00025b80

00021234 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   21234:	b570      	push	{r4, r5, r6, lr}
   21236:	4604      	mov	r4, r0
   21238:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   2123a:	7a03      	ldrb	r3, [r0, #8]
   2123c:	f013 0f01 	tst.w	r3, #1
   21240:	d008      	beq.n	21254 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   21242:	6803      	ldr	r3, [r0, #0]
   21244:	2201      	movs	r2, #1
   21246:	490d      	ldr	r1, [pc, #52]	; (2127c <json_encode_object_key+0x48>)
   21248:	6840      	ldr	r0, [r0, #4]
   2124a:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   2124c:	7a23      	ldrb	r3, [r4, #8]
   2124e:	f36f 0300 	bfc	r3, #0, #1
   21252:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   21254:	6823      	ldr	r3, [r4, #0]
   21256:	2201      	movs	r2, #1
   21258:	4909      	ldr	r1, [pc, #36]	; (21280 <json_encode_object_key+0x4c>)
   2125a:	6860      	ldr	r0, [r4, #4]
   2125c:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   2125e:	6826      	ldr	r6, [r4, #0]
   21260:	4628      	mov	r0, r5
   21262:	f7fb fa3d 	bl	1c6e0 <strlen>
   21266:	4602      	mov	r2, r0
   21268:	4629      	mov	r1, r5
   2126a:	6860      	ldr	r0, [r4, #4]
   2126c:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   2126e:	6823      	ldr	r3, [r4, #0]
   21270:	2203      	movs	r2, #3
   21272:	4904      	ldr	r1, [pc, #16]	; (21284 <json_encode_object_key+0x50>)
   21274:	6860      	ldr	r0, [r4, #4]
   21276:	4798      	blx	r3

    return (0);
}
   21278:	2000      	movs	r0, #0
   2127a:	bd70      	pop	{r4, r5, r6, pc}
   2127c:	00025b7c 	.word	0x00025b7c
   21280:	00025b84 	.word	0x00025b84
   21284:	00025b88 	.word	0x00025b88

00021288 <json_encode_object_entry>:
EXPORT_SYMBOL(json_encode_object_key);

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
   21288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2128a:	4604      	mov	r4, r0
   2128c:	460d      	mov	r5, r1
   2128e:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
   21290:	7a03      	ldrb	r3, [r0, #8]
   21292:	f013 0f01 	tst.w	r3, #1
   21296:	d008      	beq.n	212aa <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   21298:	6803      	ldr	r3, [r0, #0]
   2129a:	2201      	movs	r2, #1
   2129c:	4911      	ldr	r1, [pc, #68]	; (212e4 <json_encode_object_entry+0x5c>)
   2129e:	6840      	ldr	r0, [r0, #4]
   212a0:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   212a2:	7a23      	ldrb	r3, [r4, #8]
   212a4:	f36f 0300 	bfc	r3, #0, #1
   212a8:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   212aa:	6823      	ldr	r3, [r4, #0]
   212ac:	2201      	movs	r2, #1
   212ae:	490e      	ldr	r1, [pc, #56]	; (212e8 <json_encode_object_entry+0x60>)
   212b0:	6860      	ldr	r0, [r4, #4]
   212b2:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   212b4:	6827      	ldr	r7, [r4, #0]
   212b6:	4628      	mov	r0, r5
   212b8:	f7fb fa12 	bl	1c6e0 <strlen>
   212bc:	4602      	mov	r2, r0
   212be:	4629      	mov	r1, r5
   212c0:	6860      	ldr	r0, [r4, #4]
   212c2:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   212c4:	6823      	ldr	r3, [r4, #0]
   212c6:	2203      	movs	r2, #3
   212c8:	4908      	ldr	r1, [pc, #32]	; (212ec <json_encode_object_entry+0x64>)
   212ca:	6860      	ldr	r0, [r4, #4]
   212cc:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   212ce:	4631      	mov	r1, r6
   212d0:	4620      	mov	r0, r4
   212d2:	f000 f80d 	bl	212f0 <json_encode_value>
    if (rc != 0) {
   212d6:	b918      	cbnz	r0, 212e0 <json_encode_object_entry+0x58>
        goto err;
    }
    encoder->je_wr_commas = 1;
   212d8:	7a23      	ldrb	r3, [r4, #8]
   212da:	f043 0301 	orr.w	r3, r3, #1
   212de:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   212e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   212e2:	bf00      	nop
   212e4:	00025b7c 	.word	0x00025b7c
   212e8:	00025b84 	.word	0x00025b84
   212ec:	00025b88 	.word	0x00025b88

000212f0 <json_encode_value>:
{
   212f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   212f2:	4605      	mov	r5, r0
   212f4:	460c      	mov	r4, r1
    switch (jv->jv_type) {
   212f6:	784b      	ldrb	r3, [r1, #1]
   212f8:	2b06      	cmp	r3, #6
   212fa:	f200 8141 	bhi.w	21580 <json_encode_value+0x290>
   212fe:	e8df f013 	tbh	[pc, r3, lsl #1]
   21302:	0007      	.short	0x0007
   21304:	002b001c 	.word	0x002b001c
   21308:	00fa005a 	.word	0x00fa005a
   2130c:	003a0120 	.word	0x003a0120
            len = sprintf(encoder->je_encode_buf, "%s",
   21310:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
   21314:	688a      	ldr	r2, [r1, #8]
   21316:	68cb      	ldr	r3, [r1, #12]
            len = sprintf(encoder->je_encode_buf, "%s",
   21318:	4313      	orrs	r3, r2
   2131a:	d00c      	beq.n	21336 <json_encode_value+0x46>
   2131c:	4a9a      	ldr	r2, [pc, #616]	; (21588 <json_encode_value+0x298>)
   2131e:	499b      	ldr	r1, [pc, #620]	; (2158c <json_encode_value+0x29c>)
   21320:	4630      	mov	r0, r6
   21322:	f000 f9cf 	bl	216c4 <sprintf>
   21326:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   21328:	682b      	ldr	r3, [r5, #0]
   2132a:	4631      	mov	r1, r6
   2132c:	6868      	ldr	r0, [r5, #4]
   2132e:	4798      	blx	r3
    return (0);
   21330:	2300      	movs	r3, #0
}
   21332:	4618      	mov	r0, r3
   21334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            len = sprintf(encoder->je_encode_buf, "%s",
   21336:	4a96      	ldr	r2, [pc, #600]	; (21590 <json_encode_value+0x2a0>)
   21338:	e7f1      	b.n	2131e <json_encode_value+0x2e>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   2133a:	f100 0609 	add.w	r6, r0, #9
   2133e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   21342:	4994      	ldr	r1, [pc, #592]	; (21594 <json_encode_value+0x2a4>)
   21344:	4630      	mov	r0, r6
   21346:	f000 f9bd 	bl	216c4 <sprintf>
   2134a:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   2134c:	682b      	ldr	r3, [r5, #0]
   2134e:	4631      	mov	r1, r6
   21350:	6868      	ldr	r0, [r5, #4]
   21352:	4798      	blx	r3
    return (0);
   21354:	2300      	movs	r3, #0
            break;
   21356:	e7ec      	b.n	21332 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   21358:	f100 0609 	add.w	r6, r0, #9
   2135c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   21360:	498d      	ldr	r1, [pc, #564]	; (21598 <json_encode_value+0x2a8>)
   21362:	4630      	mov	r0, r6
   21364:	f000 f9ae 	bl	216c4 <sprintf>
   21368:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   2136a:	682b      	ldr	r3, [r5, #0]
   2136c:	4631      	mov	r1, r6
   2136e:	6868      	ldr	r0, [r5, #4]
   21370:	4798      	blx	r3
    return (0);
   21372:	2300      	movs	r3, #0
            break;
   21374:	e7dd      	b.n	21332 <json_encode_value+0x42>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   21376:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
   2137a:	4632      	mov	r2, r6
   2137c:	463b      	mov	r3, r7
   2137e:	4630      	mov	r0, r6
   21380:	4639      	mov	r1, r7
   21382:	f000 fe05 	bl	21f90 <__aeabi_dcmpun>
   21386:	b970      	cbnz	r0, 213a6 <json_encode_value+0xb6>
            len = sprintf(encoder->je_encode_buf,
   21388:	4632      	mov	r2, r6
   2138a:	463b      	mov	r3, r7
   2138c:	4983      	ldr	r1, [pc, #524]	; (2159c <json_encode_value+0x2ac>)
   2138e:	f105 0009 	add.w	r0, r5, #9
   21392:	f000 f997 	bl	216c4 <sprintf>
   21396:	4602      	mov	r2, r0
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   21398:	4629      	mov	r1, r5
   2139a:	f851 3b09 	ldr.w	r3, [r1], #9
   2139e:	6868      	ldr	r0, [r5, #4]
   213a0:	4798      	blx	r3
    return (0);
   213a2:	2300      	movs	r3, #0
        break;
   213a4:	e7c5      	b.n	21332 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "null");
   213a6:	4b7e      	ldr	r3, [pc, #504]	; (215a0 <json_encode_value+0x2b0>)
   213a8:	6818      	ldr	r0, [r3, #0]
   213aa:	f8c5 0009 	str.w	r0, [r5, #9]
   213ae:	791b      	ldrb	r3, [r3, #4]
   213b0:	736b      	strb	r3, [r5, #13]
   213b2:	2204      	movs	r2, #4
   213b4:	e7f0      	b.n	21398 <json_encode_value+0xa8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   213b6:	6803      	ldr	r3, [r0, #0]
   213b8:	2201      	movs	r2, #1
   213ba:	497a      	ldr	r1, [pc, #488]	; (215a4 <json_encode_value+0x2b4>)
   213bc:	6840      	ldr	r0, [r0, #4]
   213be:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   213c0:	2600      	movs	r6, #0
   213c2:	e012      	b.n	213ea <json_encode_value+0xfa>
   213c4:	2b5c      	cmp	r3, #92	; 0x5c
   213c6:	d004      	beq.n	213d2 <json_encode_value+0xe2>
                        encoder->je_write(encoder->je_arg,
   213c8:	682b      	ldr	r3, [r5, #0]
   213ca:	2201      	movs	r2, #1
   213cc:	6868      	ldr	r0, [r5, #4]
   213ce:	4798      	blx	r3
                        break;
   213d0:	e00a      	b.n	213e8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\",
   213d2:	682b      	ldr	r3, [r5, #0]
   213d4:	2201      	movs	r2, #1
   213d6:	4974      	ldr	r1, [pc, #464]	; (215a8 <json_encode_value+0x2b8>)
   213d8:	6868      	ldr	r0, [r5, #4]
   213da:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
   213dc:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
   213de:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
   213e0:	2201      	movs	r2, #1
   213e2:	4439      	add	r1, r7
   213e4:	6868      	ldr	r0, [r5, #4]
   213e6:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   213e8:	3601      	adds	r6, #1
   213ea:	8863      	ldrh	r3, [r4, #2]
   213ec:	42b3      	cmp	r3, r6
   213ee:	dd7b      	ble.n	214e8 <json_encode_value+0x1f8>
                switch (jv->jv_val.str[i]) {
   213f0:	68a3      	ldr	r3, [r4, #8]
   213f2:	4637      	mov	r7, r6
   213f4:	1999      	adds	r1, r3, r6
   213f6:	5d9b      	ldrb	r3, [r3, r6]
   213f8:	2b2f      	cmp	r3, #47	; 0x2f
   213fa:	d8e3      	bhi.n	213c4 <json_encode_value+0xd4>
   213fc:	2b08      	cmp	r3, #8
   213fe:	d3e3      	bcc.n	213c8 <json_encode_value+0xd8>
   21400:	3b08      	subs	r3, #8
   21402:	2b27      	cmp	r3, #39	; 0x27
   21404:	d8e0      	bhi.n	213c8 <json_encode_value+0xd8>
   21406:	a201      	add	r2, pc, #4	; (adr r2, 2140c <json_encode_value+0x11c>)
   21408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2140c:	000214dd 	.word	0x000214dd
   21410:	000214ad 	.word	0x000214ad
   21414:	000214c5 	.word	0x000214c5
   21418:	000213c9 	.word	0x000213c9
   2141c:	000214d1 	.word	0x000214d1
   21420:	000214b9 	.word	0x000214b9
   21424:	000213c9 	.word	0x000213c9
   21428:	000213c9 	.word	0x000213c9
   2142c:	000213c9 	.word	0x000213c9
   21430:	000213c9 	.word	0x000213c9
   21434:	000213c9 	.word	0x000213c9
   21438:	000213c9 	.word	0x000213c9
   2143c:	000213c9 	.word	0x000213c9
   21440:	000213c9 	.word	0x000213c9
   21444:	000213c9 	.word	0x000213c9
   21448:	000213c9 	.word	0x000213c9
   2144c:	000213c9 	.word	0x000213c9
   21450:	000213c9 	.word	0x000213c9
   21454:	000213c9 	.word	0x000213c9
   21458:	000213c9 	.word	0x000213c9
   2145c:	000213c9 	.word	0x000213c9
   21460:	000213c9 	.word	0x000213c9
   21464:	000213c9 	.word	0x000213c9
   21468:	000213c9 	.word	0x000213c9
   2146c:	000213c9 	.word	0x000213c9
   21470:	000213c9 	.word	0x000213c9
   21474:	000213d3 	.word	0x000213d3
   21478:	000213c9 	.word	0x000213c9
   2147c:	000213c9 	.word	0x000213c9
   21480:	000213c9 	.word	0x000213c9
   21484:	000213c9 	.word	0x000213c9
   21488:	000213c9 	.word	0x000213c9
   2148c:	000213c9 	.word	0x000213c9
   21490:	000213c9 	.word	0x000213c9
   21494:	000213c9 	.word	0x000213c9
   21498:	000213c9 	.word	0x000213c9
   2149c:	000213c9 	.word	0x000213c9
   214a0:	000213c9 	.word	0x000213c9
   214a4:	000213c9 	.word	0x000213c9
   214a8:	000213d3 	.word	0x000213d3
                        encoder->je_write(encoder->je_arg, "\\t",
   214ac:	682b      	ldr	r3, [r5, #0]
   214ae:	2202      	movs	r2, #2
   214b0:	493e      	ldr	r1, [pc, #248]	; (215ac <json_encode_value+0x2bc>)
   214b2:	6868      	ldr	r0, [r5, #4]
   214b4:	4798      	blx	r3
                        break;
   214b6:	e797      	b.n	213e8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\r",
   214b8:	682b      	ldr	r3, [r5, #0]
   214ba:	2202      	movs	r2, #2
   214bc:	493c      	ldr	r1, [pc, #240]	; (215b0 <json_encode_value+0x2c0>)
   214be:	6868      	ldr	r0, [r5, #4]
   214c0:	4798      	blx	r3
                        break;
   214c2:	e791      	b.n	213e8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\n",
   214c4:	682b      	ldr	r3, [r5, #0]
   214c6:	2202      	movs	r2, #2
   214c8:	493a      	ldr	r1, [pc, #232]	; (215b4 <json_encode_value+0x2c4>)
   214ca:	6868      	ldr	r0, [r5, #4]
   214cc:	4798      	blx	r3
                        break;
   214ce:	e78b      	b.n	213e8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\f",
   214d0:	682b      	ldr	r3, [r5, #0]
   214d2:	2202      	movs	r2, #2
   214d4:	4938      	ldr	r1, [pc, #224]	; (215b8 <json_encode_value+0x2c8>)
   214d6:	6868      	ldr	r0, [r5, #4]
   214d8:	4798      	blx	r3
                        break;
   214da:	e785      	b.n	213e8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\b",
   214dc:	682b      	ldr	r3, [r5, #0]
   214de:	2202      	movs	r2, #2
   214e0:	4936      	ldr	r1, [pc, #216]	; (215bc <json_encode_value+0x2cc>)
   214e2:	6868      	ldr	r0, [r5, #4]
   214e4:	4798      	blx	r3
                        break;
   214e6:	e77f      	b.n	213e8 <json_encode_value+0xf8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   214e8:	682b      	ldr	r3, [r5, #0]
   214ea:	2201      	movs	r2, #1
   214ec:	492d      	ldr	r1, [pc, #180]	; (215a4 <json_encode_value+0x2b4>)
   214ee:	6868      	ldr	r0, [r5, #4]
   214f0:	4798      	blx	r3
    return (0);
   214f2:	2300      	movs	r3, #0
            break;
   214f4:	e71d      	b.n	21332 <json_encode_value+0x42>
            JSON_ENCODE_ARRAY_START(encoder);
   214f6:	6803      	ldr	r3, [r0, #0]
   214f8:	2201      	movs	r2, #1
   214fa:	4931      	ldr	r1, [pc, #196]	; (215c0 <json_encode_value+0x2d0>)
   214fc:	6840      	ldr	r0, [r0, #4]
   214fe:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   21500:	2600      	movs	r6, #0
   21502:	e000      	b.n	21506 <json_encode_value+0x216>
   21504:	3601      	adds	r6, #1
   21506:	8863      	ldrh	r3, [r4, #2]
   21508:	42b3      	cmp	r3, r6
   2150a:	dd13      	ble.n	21534 <json_encode_value+0x244>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   2150c:	68e3      	ldr	r3, [r4, #12]
   2150e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   21512:	4628      	mov	r0, r5
   21514:	f7ff feec 	bl	212f0 <json_encode_value>
                if (rc != 0) {
   21518:	4603      	mov	r3, r0
   2151a:	2800      	cmp	r0, #0
   2151c:	f47f af09 	bne.w	21332 <json_encode_value+0x42>
                if (i != jv->jv_len - 1) {
   21520:	8863      	ldrh	r3, [r4, #2]
   21522:	3b01      	subs	r3, #1
   21524:	42b3      	cmp	r3, r6
   21526:	d0ed      	beq.n	21504 <json_encode_value+0x214>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   21528:	682b      	ldr	r3, [r5, #0]
   2152a:	2201      	movs	r2, #1
   2152c:	4925      	ldr	r1, [pc, #148]	; (215c4 <json_encode_value+0x2d4>)
   2152e:	6868      	ldr	r0, [r5, #4]
   21530:	4798      	blx	r3
   21532:	e7e7      	b.n	21504 <json_encode_value+0x214>
            JSON_ENCODE_ARRAY_END(encoder);
   21534:	682b      	ldr	r3, [r5, #0]
   21536:	2201      	movs	r2, #1
   21538:	4923      	ldr	r1, [pc, #140]	; (215c8 <json_encode_value+0x2d8>)
   2153a:	6868      	ldr	r0, [r5, #4]
   2153c:	4798      	blx	r3
    return (0);
   2153e:	2300      	movs	r3, #0
            break;
   21540:	e6f7      	b.n	21332 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_START(encoder);
   21542:	6803      	ldr	r3, [r0, #0]
   21544:	2201      	movs	r2, #1
   21546:	4921      	ldr	r1, [pc, #132]	; (215cc <json_encode_value+0x2dc>)
   21548:	6840      	ldr	r0, [r0, #4]
   2154a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   2154c:	2600      	movs	r6, #0
   2154e:	e000      	b.n	21552 <json_encode_value+0x262>
   21550:	3601      	adds	r6, #1
   21552:	8863      	ldrh	r3, [r4, #2]
   21554:	42b3      	cmp	r3, r6
   21556:	dd0c      	ble.n	21572 <json_encode_value+0x282>
                        jv->jv_val.composite.keys[i],
   21558:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
   2155a:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
   2155c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   21560:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   21564:	4628      	mov	r0, r5
   21566:	f7ff fe8f 	bl	21288 <json_encode_object_entry>
                if (rc != 0) {
   2156a:	4603      	mov	r3, r0
   2156c:	2800      	cmp	r0, #0
   2156e:	d0ef      	beq.n	21550 <json_encode_value+0x260>
   21570:	e6df      	b.n	21332 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_END(encoder);
   21572:	682b      	ldr	r3, [r5, #0]
   21574:	2201      	movs	r2, #1
   21576:	4916      	ldr	r1, [pc, #88]	; (215d0 <json_encode_value+0x2e0>)
   21578:	6868      	ldr	r0, [r5, #4]
   2157a:	4798      	blx	r3
    return (0);
   2157c:	2300      	movs	r3, #0
            break;
   2157e:	e6d8      	b.n	21332 <json_encode_value+0x42>
    switch (jv->jv_type) {
   21580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21584:	e6d5      	b.n	21332 <json_encode_value+0x42>
   21586:	bf00      	nop
   21588:	00025b94 	.word	0x00025b94
   2158c:	00023c4c 	.word	0x00023c4c
   21590:	00025b8c 	.word	0x00025b8c
   21594:	00025b9c 	.word	0x00025b9c
   21598:	00025ba4 	.word	0x00025ba4
   2159c:	00025bb4 	.word	0x00025bb4
   215a0:	00025bac 	.word	0x00025bac
   215a4:	00025b84 	.word	0x00025b84
   215a8:	00025bb8 	.word	0x00025bb8
   215ac:	00025bbc 	.word	0x00025bbc
   215b0:	00025bc0 	.word	0x00025bc0
   215b4:	00025bc4 	.word	0x00025bc4
   215b8:	00025bc8 	.word	0x00025bc8
   215bc:	00025bcc 	.word	0x00025bcc
   215c0:	00025bd0 	.word	0x00025bd0
   215c4:	00025b7c 	.word	0x00025b7c
   215c8:	00024244 	.word	0x00024244
   215cc:	00025b80 	.word	0x00025b80
   215d0:	00025bd4 	.word	0x00025bd4

000215d4 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   215d4:	b510      	push	{r4, lr}
   215d6:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   215d8:	6803      	ldr	r3, [r0, #0]
   215da:	2201      	movs	r2, #1
   215dc:	4904      	ldr	r1, [pc, #16]	; (215f0 <json_encode_object_finish+0x1c>)
   215de:	6840      	ldr	r0, [r0, #4]
   215e0:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   215e2:	7a23      	ldrb	r3, [r4, #8]
   215e4:	f043 0301 	orr.w	r3, r3, #1
   215e8:	7223      	strb	r3, [r4, #8]

    return (0);
}
   215ea:	2000      	movs	r0, #0
   215ec:	bd10      	pop	{r4, pc}
   215ee:	bf00      	nop
   215f0:	00025bd4 	.word	0x00025bd4

000215f4 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
   215f4:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
   215f6:	f7ff fe1d 	bl	21234 <json_encode_object_key>
}
   215fa:	bd08      	pop	{r3, pc}

000215fc <json_encode_array_start>:
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   215fc:	b510      	push	{r4, lr}
   215fe:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   21600:	6803      	ldr	r3, [r0, #0]
   21602:	2201      	movs	r2, #1
   21604:	4904      	ldr	r1, [pc, #16]	; (21618 <json_encode_array_start+0x1c>)
   21606:	6840      	ldr	r0, [r0, #4]
   21608:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   2160a:	7a23      	ldrb	r3, [r4, #8]
   2160c:	f36f 0300 	bfc	r3, #0, #1
   21610:	7223      	strb	r3, [r4, #8]

    return (0);
}
   21612:	2000      	movs	r0, #0
   21614:	bd10      	pop	{r4, pc}
   21616:	bf00      	nop
   21618:	00025bd0 	.word	0x00025bd0

0002161c <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   2161c:	b538      	push	{r3, r4, r5, lr}
   2161e:	4604      	mov	r4, r0
   21620:	460d      	mov	r5, r1
    int rc;

    if (encoder->je_wr_commas) {
   21622:	7a03      	ldrb	r3, [r0, #8]
   21624:	f013 0f01 	tst.w	r3, #1
   21628:	d008      	beq.n	2163c <json_encode_array_value+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   2162a:	6803      	ldr	r3, [r0, #0]
   2162c:	2201      	movs	r2, #1
   2162e:	4908      	ldr	r1, [pc, #32]	; (21650 <json_encode_array_value+0x34>)
   21630:	6840      	ldr	r0, [r0, #4]
   21632:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   21634:	7a23      	ldrb	r3, [r4, #8]
   21636:	f36f 0300 	bfc	r3, #0, #1
   2163a:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   2163c:	4629      	mov	r1, r5
   2163e:	4620      	mov	r0, r4
   21640:	f7ff fe56 	bl	212f0 <json_encode_value>
    if (rc != 0) {
   21644:	b918      	cbnz	r0, 2164e <json_encode_array_value+0x32>
        goto err;
    }
    encoder->je_wr_commas = 1;
   21646:	7a23      	ldrb	r3, [r4, #8]
   21648:	f043 0301 	orr.w	r3, r3, #1
   2164c:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   2164e:	bd38      	pop	{r3, r4, r5, pc}
   21650:	00025b7c 	.word	0x00025b7c

00021654 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   21654:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   21656:	7a03      	ldrb	r3, [r0, #8]
   21658:	f043 0301 	orr.w	r3, r3, #1
   2165c:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   2165e:	6803      	ldr	r3, [r0, #0]
   21660:	2201      	movs	r2, #1
   21662:	4902      	ldr	r1, [pc, #8]	; (2166c <json_encode_array_finish+0x18>)
   21664:	6840      	ldr	r0, [r0, #4]
   21666:	4798      	blx	r3

    return (0);
}
   21668:	2000      	movs	r0, #0
   2166a:	bd08      	pop	{r3, pc}
   2166c:	00024244 	.word	0x00024244

00021670 <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   21670:	4603      	mov	r3, r0
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   21672:	68c1      	ldr	r1, [r0, #12]
   21674:	6942      	ldr	r2, [r0, #20]
   21676:	eb01 0c02 	add.w	ip, r1, r2
   2167a:	6900      	ldr	r0, [r0, #16]
   2167c:	4584      	cmp	ip, r0
   2167e:	d901      	bls.n	21684 <json_read_next+0x14>
        c = *(decoder->start_buf + decoder->current_position);
        decoder->current_position++;
        return c;
    }
   return '\0';
   21680:	2000      	movs	r0, #0
}
   21682:	4770      	bx	lr
        c = *(decoder->start_buf + decoder->current_position);
   21684:	5c88      	ldrb	r0, [r1, r2]
        decoder->current_position++;
   21686:	3201      	adds	r2, #1
   21688:	615a      	str	r2, [r3, #20]
        return c;
   2168a:	4770      	bx	lr

0002168c <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   2168c:	6943      	ldr	r3, [r0, #20]
   2168e:	b90b      	cbnz	r3, 21694 <json_read_prev+0x8>
       decoder->current_position--;
       c = *(decoder->start_buf + decoder->current_position);
       return c;
    }
    /* can't rewind */
    return '\0';
   21690:	2000      	movs	r0, #0
}
   21692:	4770      	bx	lr
       decoder->current_position--;
   21694:	3b01      	subs	r3, #1
   21696:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   21698:	68c2      	ldr	r2, [r0, #12]
   2169a:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   2169c:	4770      	bx	lr

0002169e <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   2169e:	b538      	push	{r3, r4, r5, lr}
   216a0:	4604      	mov	r4, r0
   216a2:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   216a4:	6925      	ldr	r5, [r4, #16]
   216a6:	68e3      	ldr	r3, [r4, #12]
   216a8:	6961      	ldr	r1, [r4, #20]
   216aa:	4419      	add	r1, r3
   216ac:	1a6d      	subs	r5, r5, r1
    if (size > remlen) {
   216ae:	4295      	cmp	r5, r2
   216b0:	db00      	blt.n	216b4 <json_readn+0x16>
   216b2:	4615      	mov	r5, r2
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   216b4:	462a      	mov	r2, r5
   216b6:	f7ef fedf 	bl	11478 <memcpy>
    decoder->current_position += size;
   216ba:	6963      	ldr	r3, [r4, #20]
   216bc:	442b      	add	r3, r5
   216be:	6163      	str	r3, [r4, #20]
    return size;
}
   216c0:	4628      	mov	r0, r5
   216c2:	bd38      	pop	{r3, r4, r5, pc}

000216c4 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   216c4:	b40e      	push	{r1, r2, r3}
   216c6:	b500      	push	{lr}
   216c8:	b082      	sub	sp, #8
   216ca:	ab03      	add	r3, sp, #12
   216cc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   216d0:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   216d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   216d6:	f7f0 faef 	bl	11cb8 <vsnprintf>
	va_end(ap);

	return rv;
}
   216da:	b002      	add	sp, #8
   216dc:	f85d eb04 	ldr.w	lr, [sp], #4
   216e0:	b003      	add	sp, #12
   216e2:	4770      	bx	lr

000216e4 <__aeabi_drsub>:
   216e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   216e8:	e002      	b.n	216f0 <__adddf3>
   216ea:	bf00      	nop

000216ec <__aeabi_dsub>:
   216ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000216f0 <__adddf3>:
   216f0:	b530      	push	{r4, r5, lr}
   216f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   216f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   216fa:	ea94 0f05 	teq	r4, r5
   216fe:	bf08      	it	eq
   21700:	ea90 0f02 	teqeq	r0, r2
   21704:	bf1f      	itttt	ne
   21706:	ea54 0c00 	orrsne.w	ip, r4, r0
   2170a:	ea55 0c02 	orrsne.w	ip, r5, r2
   2170e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   21712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   21716:	f000 80e2 	beq.w	218de <__adddf3+0x1ee>
   2171a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   2171e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   21722:	bfb8      	it	lt
   21724:	426d      	neglt	r5, r5
   21726:	dd0c      	ble.n	21742 <__adddf3+0x52>
   21728:	442c      	add	r4, r5
   2172a:	ea80 0202 	eor.w	r2, r0, r2
   2172e:	ea81 0303 	eor.w	r3, r1, r3
   21732:	ea82 0000 	eor.w	r0, r2, r0
   21736:	ea83 0101 	eor.w	r1, r3, r1
   2173a:	ea80 0202 	eor.w	r2, r0, r2
   2173e:	ea81 0303 	eor.w	r3, r1, r3
   21742:	2d36      	cmp	r5, #54	; 0x36
   21744:	bf88      	it	hi
   21746:	bd30      	pophi	{r4, r5, pc}
   21748:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   2174c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   21750:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   21754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   21758:	d002      	beq.n	21760 <__adddf3+0x70>
   2175a:	4240      	negs	r0, r0
   2175c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21760:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   21764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   21768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   2176c:	d002      	beq.n	21774 <__adddf3+0x84>
   2176e:	4252      	negs	r2, r2
   21770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21774:	ea94 0f05 	teq	r4, r5
   21778:	f000 80a7 	beq.w	218ca <__adddf3+0x1da>
   2177c:	f1a4 0401 	sub.w	r4, r4, #1
   21780:	f1d5 0e20 	rsbs	lr, r5, #32
   21784:	db0d      	blt.n	217a2 <__adddf3+0xb2>
   21786:	fa02 fc0e 	lsl.w	ip, r2, lr
   2178a:	fa22 f205 	lsr.w	r2, r2, r5
   2178e:	1880      	adds	r0, r0, r2
   21790:	f141 0100 	adc.w	r1, r1, #0
   21794:	fa03 f20e 	lsl.w	r2, r3, lr
   21798:	1880      	adds	r0, r0, r2
   2179a:	fa43 f305 	asr.w	r3, r3, r5
   2179e:	4159      	adcs	r1, r3
   217a0:	e00e      	b.n	217c0 <__adddf3+0xd0>
   217a2:	f1a5 0520 	sub.w	r5, r5, #32
   217a6:	f10e 0e20 	add.w	lr, lr, #32
   217aa:	2a01      	cmp	r2, #1
   217ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   217b0:	bf28      	it	cs
   217b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   217b6:	fa43 f305 	asr.w	r3, r3, r5
   217ba:	18c0      	adds	r0, r0, r3
   217bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   217c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   217c4:	d507      	bpl.n	217d6 <__adddf3+0xe6>
   217c6:	f04f 0e00 	mov.w	lr, #0
   217ca:	f1dc 0c00 	rsbs	ip, ip, #0
   217ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   217d2:	eb6e 0101 	sbc.w	r1, lr, r1
   217d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   217da:	d31b      	bcc.n	21814 <__adddf3+0x124>
   217dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   217e0:	d30c      	bcc.n	217fc <__adddf3+0x10c>
   217e2:	0849      	lsrs	r1, r1, #1
   217e4:	ea5f 0030 	movs.w	r0, r0, rrx
   217e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   217ec:	f104 0401 	add.w	r4, r4, #1
   217f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   217f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   217f8:	f080 809a 	bcs.w	21930 <__adddf3+0x240>
   217fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   21800:	bf08      	it	eq
   21802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   21806:	f150 0000 	adcs.w	r0, r0, #0
   2180a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2180e:	ea41 0105 	orr.w	r1, r1, r5
   21812:	bd30      	pop	{r4, r5, pc}
   21814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   21818:	4140      	adcs	r0, r0
   2181a:	eb41 0101 	adc.w	r1, r1, r1
   2181e:	3c01      	subs	r4, #1
   21820:	bf28      	it	cs
   21822:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   21826:	d2e9      	bcs.n	217fc <__adddf3+0x10c>
   21828:	f091 0f00 	teq	r1, #0
   2182c:	bf04      	itt	eq
   2182e:	4601      	moveq	r1, r0
   21830:	2000      	moveq	r0, #0
   21832:	fab1 f381 	clz	r3, r1
   21836:	bf08      	it	eq
   21838:	3320      	addeq	r3, #32
   2183a:	f1a3 030b 	sub.w	r3, r3, #11
   2183e:	f1b3 0220 	subs.w	r2, r3, #32
   21842:	da0c      	bge.n	2185e <__adddf3+0x16e>
   21844:	320c      	adds	r2, #12
   21846:	dd08      	ble.n	2185a <__adddf3+0x16a>
   21848:	f102 0c14 	add.w	ip, r2, #20
   2184c:	f1c2 020c 	rsb	r2, r2, #12
   21850:	fa01 f00c 	lsl.w	r0, r1, ip
   21854:	fa21 f102 	lsr.w	r1, r1, r2
   21858:	e00c      	b.n	21874 <__adddf3+0x184>
   2185a:	f102 0214 	add.w	r2, r2, #20
   2185e:	bfd8      	it	le
   21860:	f1c2 0c20 	rsble	ip, r2, #32
   21864:	fa01 f102 	lsl.w	r1, r1, r2
   21868:	fa20 fc0c 	lsr.w	ip, r0, ip
   2186c:	bfdc      	itt	le
   2186e:	ea41 010c 	orrle.w	r1, r1, ip
   21872:	4090      	lslle	r0, r2
   21874:	1ae4      	subs	r4, r4, r3
   21876:	bfa2      	ittt	ge
   21878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   2187c:	4329      	orrge	r1, r5
   2187e:	bd30      	popge	{r4, r5, pc}
   21880:	ea6f 0404 	mvn.w	r4, r4
   21884:	3c1f      	subs	r4, #31
   21886:	da1c      	bge.n	218c2 <__adddf3+0x1d2>
   21888:	340c      	adds	r4, #12
   2188a:	dc0e      	bgt.n	218aa <__adddf3+0x1ba>
   2188c:	f104 0414 	add.w	r4, r4, #20
   21890:	f1c4 0220 	rsb	r2, r4, #32
   21894:	fa20 f004 	lsr.w	r0, r0, r4
   21898:	fa01 f302 	lsl.w	r3, r1, r2
   2189c:	ea40 0003 	orr.w	r0, r0, r3
   218a0:	fa21 f304 	lsr.w	r3, r1, r4
   218a4:	ea45 0103 	orr.w	r1, r5, r3
   218a8:	bd30      	pop	{r4, r5, pc}
   218aa:	f1c4 040c 	rsb	r4, r4, #12
   218ae:	f1c4 0220 	rsb	r2, r4, #32
   218b2:	fa20 f002 	lsr.w	r0, r0, r2
   218b6:	fa01 f304 	lsl.w	r3, r1, r4
   218ba:	ea40 0003 	orr.w	r0, r0, r3
   218be:	4629      	mov	r1, r5
   218c0:	bd30      	pop	{r4, r5, pc}
   218c2:	fa21 f004 	lsr.w	r0, r1, r4
   218c6:	4629      	mov	r1, r5
   218c8:	bd30      	pop	{r4, r5, pc}
   218ca:	f094 0f00 	teq	r4, #0
   218ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   218d2:	bf06      	itte	eq
   218d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   218d8:	3401      	addeq	r4, #1
   218da:	3d01      	subne	r5, #1
   218dc:	e74e      	b.n	2177c <__adddf3+0x8c>
   218de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   218e2:	bf18      	it	ne
   218e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   218e8:	d029      	beq.n	2193e <__adddf3+0x24e>
   218ea:	ea94 0f05 	teq	r4, r5
   218ee:	bf08      	it	eq
   218f0:	ea90 0f02 	teqeq	r0, r2
   218f4:	d005      	beq.n	21902 <__adddf3+0x212>
   218f6:	ea54 0c00 	orrs.w	ip, r4, r0
   218fa:	bf04      	itt	eq
   218fc:	4619      	moveq	r1, r3
   218fe:	4610      	moveq	r0, r2
   21900:	bd30      	pop	{r4, r5, pc}
   21902:	ea91 0f03 	teq	r1, r3
   21906:	bf1e      	ittt	ne
   21908:	2100      	movne	r1, #0
   2190a:	2000      	movne	r0, #0
   2190c:	bd30      	popne	{r4, r5, pc}
   2190e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   21912:	d105      	bne.n	21920 <__adddf3+0x230>
   21914:	0040      	lsls	r0, r0, #1
   21916:	4149      	adcs	r1, r1
   21918:	bf28      	it	cs
   2191a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   2191e:	bd30      	pop	{r4, r5, pc}
   21920:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   21924:	bf3c      	itt	cc
   21926:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   2192a:	bd30      	popcc	{r4, r5, pc}
   2192c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   21930:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   21934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   21938:	f04f 0000 	mov.w	r0, #0
   2193c:	bd30      	pop	{r4, r5, pc}
   2193e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   21942:	bf1a      	itte	ne
   21944:	4619      	movne	r1, r3
   21946:	4610      	movne	r0, r2
   21948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   2194c:	bf1c      	itt	ne
   2194e:	460b      	movne	r3, r1
   21950:	4602      	movne	r2, r0
   21952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   21956:	bf06      	itte	eq
   21958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   2195c:	ea91 0f03 	teqeq	r1, r3
   21960:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   21964:	bd30      	pop	{r4, r5, pc}
   21966:	bf00      	nop

00021968 <__aeabi_ui2d>:
   21968:	f090 0f00 	teq	r0, #0
   2196c:	bf04      	itt	eq
   2196e:	2100      	moveq	r1, #0
   21970:	4770      	bxeq	lr
   21972:	b530      	push	{r4, r5, lr}
   21974:	f44f 6480 	mov.w	r4, #1024	; 0x400
   21978:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2197c:	f04f 0500 	mov.w	r5, #0
   21980:	f04f 0100 	mov.w	r1, #0
   21984:	e750      	b.n	21828 <__adddf3+0x138>
   21986:	bf00      	nop

00021988 <__aeabi_i2d>:
   21988:	f090 0f00 	teq	r0, #0
   2198c:	bf04      	itt	eq
   2198e:	2100      	moveq	r1, #0
   21990:	4770      	bxeq	lr
   21992:	b530      	push	{r4, r5, lr}
   21994:	f44f 6480 	mov.w	r4, #1024	; 0x400
   21998:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2199c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   219a0:	bf48      	it	mi
   219a2:	4240      	negmi	r0, r0
   219a4:	f04f 0100 	mov.w	r1, #0
   219a8:	e73e      	b.n	21828 <__adddf3+0x138>
   219aa:	bf00      	nop

000219ac <__aeabi_f2d>:
   219ac:	0042      	lsls	r2, r0, #1
   219ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   219b2:	ea4f 0131 	mov.w	r1, r1, rrx
   219b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   219ba:	bf1f      	itttt	ne
   219bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   219c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   219c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   219c8:	4770      	bxne	lr
   219ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   219ce:	bf08      	it	eq
   219d0:	4770      	bxeq	lr
   219d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   219d6:	bf04      	itt	eq
   219d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   219dc:	4770      	bxeq	lr
   219de:	b530      	push	{r4, r5, lr}
   219e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   219e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   219e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   219ec:	e71c      	b.n	21828 <__adddf3+0x138>
   219ee:	bf00      	nop

000219f0 <__aeabi_ul2d>:
   219f0:	ea50 0201 	orrs.w	r2, r0, r1
   219f4:	bf08      	it	eq
   219f6:	4770      	bxeq	lr
   219f8:	b530      	push	{r4, r5, lr}
   219fa:	f04f 0500 	mov.w	r5, #0
   219fe:	e00a      	b.n	21a16 <__aeabi_l2d+0x16>

00021a00 <__aeabi_l2d>:
   21a00:	ea50 0201 	orrs.w	r2, r0, r1
   21a04:	bf08      	it	eq
   21a06:	4770      	bxeq	lr
   21a08:	b530      	push	{r4, r5, lr}
   21a0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   21a0e:	d502      	bpl.n	21a16 <__aeabi_l2d+0x16>
   21a10:	4240      	negs	r0, r0
   21a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21a16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   21a1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   21a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   21a22:	f43f aed8 	beq.w	217d6 <__adddf3+0xe6>
   21a26:	f04f 0203 	mov.w	r2, #3
   21a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   21a2e:	bf18      	it	ne
   21a30:	3203      	addne	r2, #3
   21a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   21a36:	bf18      	it	ne
   21a38:	3203      	addne	r2, #3
   21a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   21a3e:	f1c2 0320 	rsb	r3, r2, #32
   21a42:	fa00 fc03 	lsl.w	ip, r0, r3
   21a46:	fa20 f002 	lsr.w	r0, r0, r2
   21a4a:	fa01 fe03 	lsl.w	lr, r1, r3
   21a4e:	ea40 000e 	orr.w	r0, r0, lr
   21a52:	fa21 f102 	lsr.w	r1, r1, r2
   21a56:	4414      	add	r4, r2
   21a58:	e6bd      	b.n	217d6 <__adddf3+0xe6>
   21a5a:	bf00      	nop

00021a5c <__aeabi_dmul>:
   21a5c:	b570      	push	{r4, r5, r6, lr}
   21a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   21a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   21a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   21a6a:	bf1d      	ittte	ne
   21a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   21a70:	ea94 0f0c 	teqne	r4, ip
   21a74:	ea95 0f0c 	teqne	r5, ip
   21a78:	f000 f8de 	bleq	21c38 <__aeabi_dmul+0x1dc>
   21a7c:	442c      	add	r4, r5
   21a7e:	ea81 0603 	eor.w	r6, r1, r3
   21a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   21a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   21a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   21a8e:	bf18      	it	ne
   21a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   21a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21a9c:	d038      	beq.n	21b10 <__aeabi_dmul+0xb4>
   21a9e:	fba0 ce02 	umull	ip, lr, r0, r2
   21aa2:	f04f 0500 	mov.w	r5, #0
   21aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
   21aaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   21aae:	fbe0 e503 	umlal	lr, r5, r0, r3
   21ab2:	f04f 0600 	mov.w	r6, #0
   21ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
   21aba:	f09c 0f00 	teq	ip, #0
   21abe:	bf18      	it	ne
   21ac0:	f04e 0e01 	orrne.w	lr, lr, #1
   21ac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   21ac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   21acc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   21ad0:	d204      	bcs.n	21adc <__aeabi_dmul+0x80>
   21ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   21ad6:	416d      	adcs	r5, r5
   21ad8:	eb46 0606 	adc.w	r6, r6, r6
   21adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   21ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   21ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   21ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   21aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   21af0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   21af4:	bf88      	it	hi
   21af6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   21afa:	d81e      	bhi.n	21b3a <__aeabi_dmul+0xde>
   21afc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   21b00:	bf08      	it	eq
   21b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   21b06:	f150 0000 	adcs.w	r0, r0, #0
   21b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   21b0e:	bd70      	pop	{r4, r5, r6, pc}
   21b10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   21b14:	ea46 0101 	orr.w	r1, r6, r1
   21b18:	ea40 0002 	orr.w	r0, r0, r2
   21b1c:	ea81 0103 	eor.w	r1, r1, r3
   21b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   21b24:	bfc2      	ittt	gt
   21b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   21b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   21b2e:	bd70      	popgt	{r4, r5, r6, pc}
   21b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21b34:	f04f 0e00 	mov.w	lr, #0
   21b38:	3c01      	subs	r4, #1
   21b3a:	f300 80ab 	bgt.w	21c94 <__aeabi_dmul+0x238>
   21b3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   21b42:	bfde      	ittt	le
   21b44:	2000      	movle	r0, #0
   21b46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   21b4a:	bd70      	pople	{r4, r5, r6, pc}
   21b4c:	f1c4 0400 	rsb	r4, r4, #0
   21b50:	3c20      	subs	r4, #32
   21b52:	da35      	bge.n	21bc0 <__aeabi_dmul+0x164>
   21b54:	340c      	adds	r4, #12
   21b56:	dc1b      	bgt.n	21b90 <__aeabi_dmul+0x134>
   21b58:	f104 0414 	add.w	r4, r4, #20
   21b5c:	f1c4 0520 	rsb	r5, r4, #32
   21b60:	fa00 f305 	lsl.w	r3, r0, r5
   21b64:	fa20 f004 	lsr.w	r0, r0, r4
   21b68:	fa01 f205 	lsl.w	r2, r1, r5
   21b6c:	ea40 0002 	orr.w	r0, r0, r2
   21b70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   21b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   21b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   21b7c:	fa21 f604 	lsr.w	r6, r1, r4
   21b80:	eb42 0106 	adc.w	r1, r2, r6
   21b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21b88:	bf08      	it	eq
   21b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   21b8e:	bd70      	pop	{r4, r5, r6, pc}
   21b90:	f1c4 040c 	rsb	r4, r4, #12
   21b94:	f1c4 0520 	rsb	r5, r4, #32
   21b98:	fa00 f304 	lsl.w	r3, r0, r4
   21b9c:	fa20 f005 	lsr.w	r0, r0, r5
   21ba0:	fa01 f204 	lsl.w	r2, r1, r4
   21ba4:	ea40 0002 	orr.w	r0, r0, r2
   21ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   21bb0:	f141 0100 	adc.w	r1, r1, #0
   21bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21bb8:	bf08      	it	eq
   21bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   21bbe:	bd70      	pop	{r4, r5, r6, pc}
   21bc0:	f1c4 0520 	rsb	r5, r4, #32
   21bc4:	fa00 f205 	lsl.w	r2, r0, r5
   21bc8:	ea4e 0e02 	orr.w	lr, lr, r2
   21bcc:	fa20 f304 	lsr.w	r3, r0, r4
   21bd0:	fa01 f205 	lsl.w	r2, r1, r5
   21bd4:	ea43 0302 	orr.w	r3, r3, r2
   21bd8:	fa21 f004 	lsr.w	r0, r1, r4
   21bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21be0:	fa21 f204 	lsr.w	r2, r1, r4
   21be4:	ea20 0002 	bic.w	r0, r0, r2
   21be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   21bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   21bf0:	bf08      	it	eq
   21bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   21bf6:	bd70      	pop	{r4, r5, r6, pc}
   21bf8:	f094 0f00 	teq	r4, #0
   21bfc:	d10f      	bne.n	21c1e <__aeabi_dmul+0x1c2>
   21bfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   21c02:	0040      	lsls	r0, r0, #1
   21c04:	eb41 0101 	adc.w	r1, r1, r1
   21c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21c0c:	bf08      	it	eq
   21c0e:	3c01      	subeq	r4, #1
   21c10:	d0f7      	beq.n	21c02 <__aeabi_dmul+0x1a6>
   21c12:	ea41 0106 	orr.w	r1, r1, r6
   21c16:	f095 0f00 	teq	r5, #0
   21c1a:	bf18      	it	ne
   21c1c:	4770      	bxne	lr
   21c1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   21c22:	0052      	lsls	r2, r2, #1
   21c24:	eb43 0303 	adc.w	r3, r3, r3
   21c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   21c2c:	bf08      	it	eq
   21c2e:	3d01      	subeq	r5, #1
   21c30:	d0f7      	beq.n	21c22 <__aeabi_dmul+0x1c6>
   21c32:	ea43 0306 	orr.w	r3, r3, r6
   21c36:	4770      	bx	lr
   21c38:	ea94 0f0c 	teq	r4, ip
   21c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   21c40:	bf18      	it	ne
   21c42:	ea95 0f0c 	teqne	r5, ip
   21c46:	d00c      	beq.n	21c62 <__aeabi_dmul+0x206>
   21c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   21c4c:	bf18      	it	ne
   21c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   21c52:	d1d1      	bne.n	21bf8 <__aeabi_dmul+0x19c>
   21c54:	ea81 0103 	eor.w	r1, r1, r3
   21c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21c5c:	f04f 0000 	mov.w	r0, #0
   21c60:	bd70      	pop	{r4, r5, r6, pc}
   21c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   21c66:	bf06      	itte	eq
   21c68:	4610      	moveq	r0, r2
   21c6a:	4619      	moveq	r1, r3
   21c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   21c70:	d019      	beq.n	21ca6 <__aeabi_dmul+0x24a>
   21c72:	ea94 0f0c 	teq	r4, ip
   21c76:	d102      	bne.n	21c7e <__aeabi_dmul+0x222>
   21c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   21c7c:	d113      	bne.n	21ca6 <__aeabi_dmul+0x24a>
   21c7e:	ea95 0f0c 	teq	r5, ip
   21c82:	d105      	bne.n	21c90 <__aeabi_dmul+0x234>
   21c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   21c88:	bf1c      	itt	ne
   21c8a:	4610      	movne	r0, r2
   21c8c:	4619      	movne	r1, r3
   21c8e:	d10a      	bne.n	21ca6 <__aeabi_dmul+0x24a>
   21c90:	ea81 0103 	eor.w	r1, r1, r3
   21c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   21c98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   21c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   21ca0:	f04f 0000 	mov.w	r0, #0
   21ca4:	bd70      	pop	{r4, r5, r6, pc}
   21ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   21caa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   21cae:	bd70      	pop	{r4, r5, r6, pc}

00021cb0 <__aeabi_ddiv>:
   21cb0:	b570      	push	{r4, r5, r6, lr}
   21cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   21cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   21cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   21cbe:	bf1d      	ittte	ne
   21cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   21cc4:	ea94 0f0c 	teqne	r4, ip
   21cc8:	ea95 0f0c 	teqne	r5, ip
   21ccc:	f000 f8a7 	bleq	21e1e <__aeabi_ddiv+0x16e>
   21cd0:	eba4 0405 	sub.w	r4, r4, r5
   21cd4:	ea81 0e03 	eor.w	lr, r1, r3
   21cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   21cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   21ce0:	f000 8088 	beq.w	21df4 <__aeabi_ddiv+0x144>
   21ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   21ce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   21cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   21cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   21cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   21cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   21cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   21d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   21d04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   21d08:	429d      	cmp	r5, r3
   21d0a:	bf08      	it	eq
   21d0c:	4296      	cmpeq	r6, r2
   21d0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   21d12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   21d16:	d202      	bcs.n	21d1e <__aeabi_ddiv+0x6e>
   21d18:	085b      	lsrs	r3, r3, #1
   21d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   21d1e:	1ab6      	subs	r6, r6, r2
   21d20:	eb65 0503 	sbc.w	r5, r5, r3
   21d24:	085b      	lsrs	r3, r3, #1
   21d26:	ea4f 0232 	mov.w	r2, r2, rrx
   21d2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   21d2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   21d32:	ebb6 0e02 	subs.w	lr, r6, r2
   21d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   21d3a:	bf22      	ittt	cs
   21d3c:	1ab6      	subcs	r6, r6, r2
   21d3e:	4675      	movcs	r5, lr
   21d40:	ea40 000c 	orrcs.w	r0, r0, ip
   21d44:	085b      	lsrs	r3, r3, #1
   21d46:	ea4f 0232 	mov.w	r2, r2, rrx
   21d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   21d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   21d52:	bf22      	ittt	cs
   21d54:	1ab6      	subcs	r6, r6, r2
   21d56:	4675      	movcs	r5, lr
   21d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   21d5c:	085b      	lsrs	r3, r3, #1
   21d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   21d62:	ebb6 0e02 	subs.w	lr, r6, r2
   21d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   21d6a:	bf22      	ittt	cs
   21d6c:	1ab6      	subcs	r6, r6, r2
   21d6e:	4675      	movcs	r5, lr
   21d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   21d74:	085b      	lsrs	r3, r3, #1
   21d76:	ea4f 0232 	mov.w	r2, r2, rrx
   21d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   21d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   21d82:	bf22      	ittt	cs
   21d84:	1ab6      	subcs	r6, r6, r2
   21d86:	4675      	movcs	r5, lr
   21d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   21d8c:	ea55 0e06 	orrs.w	lr, r5, r6
   21d90:	d018      	beq.n	21dc4 <__aeabi_ddiv+0x114>
   21d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   21d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   21d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   21d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   21da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   21da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   21daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   21dae:	d1c0      	bne.n	21d32 <__aeabi_ddiv+0x82>
   21db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21db4:	d10b      	bne.n	21dce <__aeabi_ddiv+0x11e>
   21db6:	ea41 0100 	orr.w	r1, r1, r0
   21dba:	f04f 0000 	mov.w	r0, #0
   21dbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   21dc2:	e7b6      	b.n	21d32 <__aeabi_ddiv+0x82>
   21dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   21dc8:	bf04      	itt	eq
   21dca:	4301      	orreq	r1, r0
   21dcc:	2000      	moveq	r0, #0
   21dce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   21dd2:	bf88      	it	hi
   21dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   21dd8:	f63f aeaf 	bhi.w	21b3a <__aeabi_dmul+0xde>
   21ddc:	ebb5 0c03 	subs.w	ip, r5, r3
   21de0:	bf04      	itt	eq
   21de2:	ebb6 0c02 	subseq.w	ip, r6, r2
   21de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   21dea:	f150 0000 	adcs.w	r0, r0, #0
   21dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   21df2:	bd70      	pop	{r4, r5, r6, pc}
   21df4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   21df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   21dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   21e00:	bfc2      	ittt	gt
   21e02:	ebd4 050c 	rsbsgt	r5, r4, ip
   21e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   21e0a:	bd70      	popgt	{r4, r5, r6, pc}
   21e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   21e10:	f04f 0e00 	mov.w	lr, #0
   21e14:	3c01      	subs	r4, #1
   21e16:	e690      	b.n	21b3a <__aeabi_dmul+0xde>
   21e18:	ea45 0e06 	orr.w	lr, r5, r6
   21e1c:	e68d      	b.n	21b3a <__aeabi_dmul+0xde>
   21e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   21e22:	ea94 0f0c 	teq	r4, ip
   21e26:	bf08      	it	eq
   21e28:	ea95 0f0c 	teqeq	r5, ip
   21e2c:	f43f af3b 	beq.w	21ca6 <__aeabi_dmul+0x24a>
   21e30:	ea94 0f0c 	teq	r4, ip
   21e34:	d10a      	bne.n	21e4c <__aeabi_ddiv+0x19c>
   21e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   21e3a:	f47f af34 	bne.w	21ca6 <__aeabi_dmul+0x24a>
   21e3e:	ea95 0f0c 	teq	r5, ip
   21e42:	f47f af25 	bne.w	21c90 <__aeabi_dmul+0x234>
   21e46:	4610      	mov	r0, r2
   21e48:	4619      	mov	r1, r3
   21e4a:	e72c      	b.n	21ca6 <__aeabi_dmul+0x24a>
   21e4c:	ea95 0f0c 	teq	r5, ip
   21e50:	d106      	bne.n	21e60 <__aeabi_ddiv+0x1b0>
   21e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   21e56:	f43f aefd 	beq.w	21c54 <__aeabi_dmul+0x1f8>
   21e5a:	4610      	mov	r0, r2
   21e5c:	4619      	mov	r1, r3
   21e5e:	e722      	b.n	21ca6 <__aeabi_dmul+0x24a>
   21e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   21e64:	bf18      	it	ne
   21e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   21e6a:	f47f aec5 	bne.w	21bf8 <__aeabi_dmul+0x19c>
   21e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   21e72:	f47f af0d 	bne.w	21c90 <__aeabi_dmul+0x234>
   21e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   21e7a:	f47f aeeb 	bne.w	21c54 <__aeabi_dmul+0x1f8>
   21e7e:	e712      	b.n	21ca6 <__aeabi_dmul+0x24a>

00021e80 <__gedf2>:
   21e80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   21e84:	e006      	b.n	21e94 <__cmpdf2+0x4>
   21e86:	bf00      	nop

00021e88 <__ledf2>:
   21e88:	f04f 0c01 	mov.w	ip, #1
   21e8c:	e002      	b.n	21e94 <__cmpdf2+0x4>
   21e8e:	bf00      	nop

00021e90 <__cmpdf2>:
   21e90:	f04f 0c01 	mov.w	ip, #1
   21e94:	f84d cd04 	str.w	ip, [sp, #-4]!
   21e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21ea4:	bf18      	it	ne
   21ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   21eaa:	d01b      	beq.n	21ee4 <__cmpdf2+0x54>
   21eac:	b001      	add	sp, #4
   21eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   21eb2:	bf0c      	ite	eq
   21eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   21eb8:	ea91 0f03 	teqne	r1, r3
   21ebc:	bf02      	ittt	eq
   21ebe:	ea90 0f02 	teqeq	r0, r2
   21ec2:	2000      	moveq	r0, #0
   21ec4:	4770      	bxeq	lr
   21ec6:	f110 0f00 	cmn.w	r0, #0
   21eca:	ea91 0f03 	teq	r1, r3
   21ece:	bf58      	it	pl
   21ed0:	4299      	cmppl	r1, r3
   21ed2:	bf08      	it	eq
   21ed4:	4290      	cmpeq	r0, r2
   21ed6:	bf2c      	ite	cs
   21ed8:	17d8      	asrcs	r0, r3, #31
   21eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   21ede:	f040 0001 	orr.w	r0, r0, #1
   21ee2:	4770      	bx	lr
   21ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21eec:	d102      	bne.n	21ef4 <__cmpdf2+0x64>
   21eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   21ef2:	d107      	bne.n	21f04 <__cmpdf2+0x74>
   21ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21efc:	d1d6      	bne.n	21eac <__cmpdf2+0x1c>
   21efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   21f02:	d0d3      	beq.n	21eac <__cmpdf2+0x1c>
   21f04:	f85d 0b04 	ldr.w	r0, [sp], #4
   21f08:	4770      	bx	lr
   21f0a:	bf00      	nop

00021f0c <__aeabi_cdrcmple>:
   21f0c:	4684      	mov	ip, r0
   21f0e:	4610      	mov	r0, r2
   21f10:	4662      	mov	r2, ip
   21f12:	468c      	mov	ip, r1
   21f14:	4619      	mov	r1, r3
   21f16:	4663      	mov	r3, ip
   21f18:	e000      	b.n	21f1c <__aeabi_cdcmpeq>
   21f1a:	bf00      	nop

00021f1c <__aeabi_cdcmpeq>:
   21f1c:	b501      	push	{r0, lr}
   21f1e:	f7ff ffb7 	bl	21e90 <__cmpdf2>
   21f22:	2800      	cmp	r0, #0
   21f24:	bf48      	it	mi
   21f26:	f110 0f00 	cmnmi.w	r0, #0
   21f2a:	bd01      	pop	{r0, pc}

00021f2c <__aeabi_dcmpeq>:
   21f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   21f30:	f7ff fff4 	bl	21f1c <__aeabi_cdcmpeq>
   21f34:	bf0c      	ite	eq
   21f36:	2001      	moveq	r0, #1
   21f38:	2000      	movne	r0, #0
   21f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   21f3e:	bf00      	nop

00021f40 <__aeabi_dcmplt>:
   21f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   21f44:	f7ff ffea 	bl	21f1c <__aeabi_cdcmpeq>
   21f48:	bf34      	ite	cc
   21f4a:	2001      	movcc	r0, #1
   21f4c:	2000      	movcs	r0, #0
   21f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   21f52:	bf00      	nop

00021f54 <__aeabi_dcmple>:
   21f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   21f58:	f7ff ffe0 	bl	21f1c <__aeabi_cdcmpeq>
   21f5c:	bf94      	ite	ls
   21f5e:	2001      	movls	r0, #1
   21f60:	2000      	movhi	r0, #0
   21f62:	f85d fb08 	ldr.w	pc, [sp], #8
   21f66:	bf00      	nop

00021f68 <__aeabi_dcmpge>:
   21f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   21f6c:	f7ff ffce 	bl	21f0c <__aeabi_cdrcmple>
   21f70:	bf94      	ite	ls
   21f72:	2001      	movls	r0, #1
   21f74:	2000      	movhi	r0, #0
   21f76:	f85d fb08 	ldr.w	pc, [sp], #8
   21f7a:	bf00      	nop

00021f7c <__aeabi_dcmpgt>:
   21f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   21f80:	f7ff ffc4 	bl	21f0c <__aeabi_cdrcmple>
   21f84:	bf34      	ite	cc
   21f86:	2001      	movcc	r0, #1
   21f88:	2000      	movcs	r0, #0
   21f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   21f8e:	bf00      	nop

00021f90 <__aeabi_dcmpun>:
   21f90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21f98:	d102      	bne.n	21fa0 <__aeabi_dcmpun+0x10>
   21f9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   21f9e:	d10a      	bne.n	21fb6 <__aeabi_dcmpun+0x26>
   21fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21fa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21fa8:	d102      	bne.n	21fb0 <__aeabi_dcmpun+0x20>
   21faa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   21fae:	d102      	bne.n	21fb6 <__aeabi_dcmpun+0x26>
   21fb0:	f04f 0000 	mov.w	r0, #0
   21fb4:	4770      	bx	lr
   21fb6:	f04f 0001 	mov.w	r0, #1
   21fba:	4770      	bx	lr

00021fbc <__aeabi_d2iz>:
   21fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   21fc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   21fc4:	d215      	bcs.n	21ff2 <__aeabi_d2iz+0x36>
   21fc6:	d511      	bpl.n	21fec <__aeabi_d2iz+0x30>
   21fc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   21fcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   21fd0:	d912      	bls.n	21ff8 <__aeabi_d2iz+0x3c>
   21fd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   21fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   21fda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   21fde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   21fe2:	fa23 f002 	lsr.w	r0, r3, r2
   21fe6:	bf18      	it	ne
   21fe8:	4240      	negne	r0, r0
   21fea:	4770      	bx	lr
   21fec:	f04f 0000 	mov.w	r0, #0
   21ff0:	4770      	bx	lr
   21ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   21ff6:	d105      	bne.n	22004 <__aeabi_d2iz+0x48>
   21ff8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   21ffc:	bf08      	it	eq
   21ffe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   22002:	4770      	bx	lr
   22004:	f04f 0000 	mov.w	r0, #0
   22008:	4770      	bx	lr
   2200a:	bf00      	nop

0002200c <__aeabi_d2uiz>:
   2200c:	004a      	lsls	r2, r1, #1
   2200e:	d211      	bcs.n	22034 <__aeabi_d2uiz+0x28>
   22010:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   22014:	d211      	bcs.n	2203a <__aeabi_d2uiz+0x2e>
   22016:	d50d      	bpl.n	22034 <__aeabi_d2uiz+0x28>
   22018:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   2201c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   22020:	d40e      	bmi.n	22040 <__aeabi_d2uiz+0x34>
   22022:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   22026:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2202a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   2202e:	fa23 f002 	lsr.w	r0, r3, r2
   22032:	4770      	bx	lr
   22034:	f04f 0000 	mov.w	r0, #0
   22038:	4770      	bx	lr
   2203a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   2203e:	d102      	bne.n	22046 <__aeabi_d2uiz+0x3a>
   22040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22044:	4770      	bx	lr
   22046:	f04f 0000 	mov.w	r0, #0
   2204a:	4770      	bx	lr

0002204c <__aeabi_d2f>:
   2204c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   22050:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   22054:	bf24      	itt	cs
   22056:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   2205a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   2205e:	d90d      	bls.n	2207c <__aeabi_d2f+0x30>
   22060:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   22064:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   22068:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   2206c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   22070:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   22074:	bf08      	it	eq
   22076:	f020 0001 	biceq.w	r0, r0, #1
   2207a:	4770      	bx	lr
   2207c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   22080:	d121      	bne.n	220c6 <__aeabi_d2f+0x7a>
   22082:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   22086:	bfbc      	itt	lt
   22088:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   2208c:	4770      	bxlt	lr
   2208e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   22092:	ea4f 5252 	mov.w	r2, r2, lsr #21
   22096:	f1c2 0218 	rsb	r2, r2, #24
   2209a:	f1c2 0c20 	rsb	ip, r2, #32
   2209e:	fa10 f30c 	lsls.w	r3, r0, ip
   220a2:	fa20 f002 	lsr.w	r0, r0, r2
   220a6:	bf18      	it	ne
   220a8:	f040 0001 	orrne.w	r0, r0, #1
   220ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   220b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   220b4:	fa03 fc0c 	lsl.w	ip, r3, ip
   220b8:	ea40 000c 	orr.w	r0, r0, ip
   220bc:	fa23 f302 	lsr.w	r3, r3, r2
   220c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   220c4:	e7cc      	b.n	22060 <__aeabi_d2f+0x14>
   220c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   220ca:	d107      	bne.n	220dc <__aeabi_d2f+0x90>
   220cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   220d0:	bf1e      	ittt	ne
   220d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   220d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   220da:	4770      	bxne	lr
   220dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   220e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   220e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   220e8:	4770      	bx	lr
   220ea:	bf00      	nop

000220ec <__aeabi_ldivmod>:
   220ec:	b97b      	cbnz	r3, 2210e <__aeabi_ldivmod+0x22>
   220ee:	b972      	cbnz	r2, 2210e <__aeabi_ldivmod+0x22>
   220f0:	2900      	cmp	r1, #0
   220f2:	bfbe      	ittt	lt
   220f4:	2000      	movlt	r0, #0
   220f6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   220fa:	e006      	blt.n	2210a <__aeabi_ldivmod+0x1e>
   220fc:	bf08      	it	eq
   220fe:	2800      	cmpeq	r0, #0
   22100:	bf1c      	itt	ne
   22102:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   22106:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2210a:	f000 ba15 	b.w	22538 <__aeabi_idiv0>
   2210e:	f1ad 0c08 	sub.w	ip, sp, #8
   22112:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   22116:	2900      	cmp	r1, #0
   22118:	db09      	blt.n	2212e <__aeabi_ldivmod+0x42>
   2211a:	2b00      	cmp	r3, #0
   2211c:	db1a      	blt.n	22154 <__aeabi_ldivmod+0x68>
   2211e:	f000 f8a3 	bl	22268 <__udivmoddi4>
   22122:	f8dd e004 	ldr.w	lr, [sp, #4]
   22126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2212a:	b004      	add	sp, #16
   2212c:	4770      	bx	lr
   2212e:	4240      	negs	r0, r0
   22130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   22134:	2b00      	cmp	r3, #0
   22136:	db1b      	blt.n	22170 <__aeabi_ldivmod+0x84>
   22138:	f000 f896 	bl	22268 <__udivmoddi4>
   2213c:	f8dd e004 	ldr.w	lr, [sp, #4]
   22140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22144:	b004      	add	sp, #16
   22146:	4240      	negs	r0, r0
   22148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2214c:	4252      	negs	r2, r2
   2214e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   22152:	4770      	bx	lr
   22154:	4252      	negs	r2, r2
   22156:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2215a:	f000 f885 	bl	22268 <__udivmoddi4>
   2215e:	f8dd e004 	ldr.w	lr, [sp, #4]
   22162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22166:	b004      	add	sp, #16
   22168:	4240      	negs	r0, r0
   2216a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2216e:	4770      	bx	lr
   22170:	4252      	negs	r2, r2
   22172:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   22176:	f000 f877 	bl	22268 <__udivmoddi4>
   2217a:	f8dd e004 	ldr.w	lr, [sp, #4]
   2217e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22182:	b004      	add	sp, #16
   22184:	4252      	negs	r2, r2
   22186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2218a:	4770      	bx	lr

0002218c <__aeabi_uldivmod>:
   2218c:	b953      	cbnz	r3, 221a4 <__aeabi_uldivmod+0x18>
   2218e:	b94a      	cbnz	r2, 221a4 <__aeabi_uldivmod+0x18>
   22190:	2900      	cmp	r1, #0
   22192:	bf08      	it	eq
   22194:	2800      	cmpeq	r0, #0
   22196:	bf1c      	itt	ne
   22198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   2219c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   221a0:	f000 b9ca 	b.w	22538 <__aeabi_idiv0>
   221a4:	f1ad 0c08 	sub.w	ip, sp, #8
   221a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   221ac:	f000 f85c 	bl	22268 <__udivmoddi4>
   221b0:	f8dd e004 	ldr.w	lr, [sp, #4]
   221b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   221b8:	b004      	add	sp, #16
   221ba:	4770      	bx	lr

000221bc <__aeabi_d2lz>:
   221bc:	b538      	push	{r3, r4, r5, lr}
   221be:	2200      	movs	r2, #0
   221c0:	2300      	movs	r3, #0
   221c2:	4604      	mov	r4, r0
   221c4:	460d      	mov	r5, r1
   221c6:	f7ff febb 	bl	21f40 <__aeabi_dcmplt>
   221ca:	b928      	cbnz	r0, 221d8 <__aeabi_d2lz+0x1c>
   221cc:	4620      	mov	r0, r4
   221ce:	4629      	mov	r1, r5
   221d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   221d4:	f000 b82a 	b.w	2222c <__aeabi_d2ulz>
   221d8:	4620      	mov	r0, r4
   221da:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   221de:	f000 f825 	bl	2222c <__aeabi_d2ulz>
   221e2:	4240      	negs	r0, r0
   221e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   221e8:	bd38      	pop	{r3, r4, r5, pc}
   221ea:	bf00      	nop

000221ec <__aeabi_f2ulz>:
   221ec:	b5d0      	push	{r4, r6, r7, lr}
   221ee:	f7ff fbdd 	bl	219ac <__aeabi_f2d>
   221f2:	4b0c      	ldr	r3, [pc, #48]	; (22224 <__aeabi_f2ulz+0x38>)
   221f4:	2200      	movs	r2, #0
   221f6:	4606      	mov	r6, r0
   221f8:	460f      	mov	r7, r1
   221fa:	f7ff fc2f 	bl	21a5c <__aeabi_dmul>
   221fe:	f7ff ff05 	bl	2200c <__aeabi_d2uiz>
   22202:	4604      	mov	r4, r0
   22204:	f7ff fbb0 	bl	21968 <__aeabi_ui2d>
   22208:	4b07      	ldr	r3, [pc, #28]	; (22228 <__aeabi_f2ulz+0x3c>)
   2220a:	2200      	movs	r2, #0
   2220c:	f7ff fc26 	bl	21a5c <__aeabi_dmul>
   22210:	4602      	mov	r2, r0
   22212:	460b      	mov	r3, r1
   22214:	4630      	mov	r0, r6
   22216:	4639      	mov	r1, r7
   22218:	f7ff fa68 	bl	216ec <__aeabi_dsub>
   2221c:	f7ff fef6 	bl	2200c <__aeabi_d2uiz>
   22220:	4621      	mov	r1, r4
   22222:	bdd0      	pop	{r4, r6, r7, pc}
   22224:	3df00000 	.word	0x3df00000
   22228:	41f00000 	.word	0x41f00000

0002222c <__aeabi_d2ulz>:
   2222c:	b5d0      	push	{r4, r6, r7, lr}
   2222e:	4b0c      	ldr	r3, [pc, #48]	; (22260 <__aeabi_d2ulz+0x34>)
   22230:	2200      	movs	r2, #0
   22232:	4606      	mov	r6, r0
   22234:	460f      	mov	r7, r1
   22236:	f7ff fc11 	bl	21a5c <__aeabi_dmul>
   2223a:	f7ff fee7 	bl	2200c <__aeabi_d2uiz>
   2223e:	4604      	mov	r4, r0
   22240:	f7ff fb92 	bl	21968 <__aeabi_ui2d>
   22244:	4b07      	ldr	r3, [pc, #28]	; (22264 <__aeabi_d2ulz+0x38>)
   22246:	2200      	movs	r2, #0
   22248:	f7ff fc08 	bl	21a5c <__aeabi_dmul>
   2224c:	4602      	mov	r2, r0
   2224e:	460b      	mov	r3, r1
   22250:	4630      	mov	r0, r6
   22252:	4639      	mov	r1, r7
   22254:	f7ff fa4a 	bl	216ec <__aeabi_dsub>
   22258:	f7ff fed8 	bl	2200c <__aeabi_d2uiz>
   2225c:	4621      	mov	r1, r4
   2225e:	bdd0      	pop	{r4, r6, r7, pc}
   22260:	3df00000 	.word	0x3df00000
   22264:	41f00000 	.word	0x41f00000

00022268 <__udivmoddi4>:
   22268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2226c:	9d08      	ldr	r5, [sp, #32]
   2226e:	4604      	mov	r4, r0
   22270:	468e      	mov	lr, r1
   22272:	2b00      	cmp	r3, #0
   22274:	d14d      	bne.n	22312 <__udivmoddi4+0xaa>
   22276:	428a      	cmp	r2, r1
   22278:	4694      	mov	ip, r2
   2227a:	d969      	bls.n	22350 <__udivmoddi4+0xe8>
   2227c:	fab2 f282 	clz	r2, r2
   22280:	b152      	cbz	r2, 22298 <__udivmoddi4+0x30>
   22282:	fa01 f302 	lsl.w	r3, r1, r2
   22286:	f1c2 0120 	rsb	r1, r2, #32
   2228a:	fa20 f101 	lsr.w	r1, r0, r1
   2228e:	fa0c fc02 	lsl.w	ip, ip, r2
   22292:	ea41 0e03 	orr.w	lr, r1, r3
   22296:	4094      	lsls	r4, r2
   22298:	ea4f 481c 	mov.w	r8, ip, lsr #16
   2229c:	0c21      	lsrs	r1, r4, #16
   2229e:	fbbe f6f8 	udiv	r6, lr, r8
   222a2:	fa1f f78c 	uxth.w	r7, ip
   222a6:	fb08 e316 	mls	r3, r8, r6, lr
   222aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   222ae:	fb06 f107 	mul.w	r1, r6, r7
   222b2:	4299      	cmp	r1, r3
   222b4:	d90a      	bls.n	222cc <__udivmoddi4+0x64>
   222b6:	eb1c 0303 	adds.w	r3, ip, r3
   222ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   222be:	f080 811f 	bcs.w	22500 <__udivmoddi4+0x298>
   222c2:	4299      	cmp	r1, r3
   222c4:	f240 811c 	bls.w	22500 <__udivmoddi4+0x298>
   222c8:	3e02      	subs	r6, #2
   222ca:	4463      	add	r3, ip
   222cc:	1a5b      	subs	r3, r3, r1
   222ce:	b2a4      	uxth	r4, r4
   222d0:	fbb3 f0f8 	udiv	r0, r3, r8
   222d4:	fb08 3310 	mls	r3, r8, r0, r3
   222d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   222dc:	fb00 f707 	mul.w	r7, r0, r7
   222e0:	42a7      	cmp	r7, r4
   222e2:	d90a      	bls.n	222fa <__udivmoddi4+0x92>
   222e4:	eb1c 0404 	adds.w	r4, ip, r4
   222e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   222ec:	f080 810a 	bcs.w	22504 <__udivmoddi4+0x29c>
   222f0:	42a7      	cmp	r7, r4
   222f2:	f240 8107 	bls.w	22504 <__udivmoddi4+0x29c>
   222f6:	4464      	add	r4, ip
   222f8:	3802      	subs	r0, #2
   222fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   222fe:	1be4      	subs	r4, r4, r7
   22300:	2600      	movs	r6, #0
   22302:	b11d      	cbz	r5, 2230c <__udivmoddi4+0xa4>
   22304:	40d4      	lsrs	r4, r2
   22306:	2300      	movs	r3, #0
   22308:	e9c5 4300 	strd	r4, r3, [r5]
   2230c:	4631      	mov	r1, r6
   2230e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22312:	428b      	cmp	r3, r1
   22314:	d909      	bls.n	2232a <__udivmoddi4+0xc2>
   22316:	2d00      	cmp	r5, #0
   22318:	f000 80ef 	beq.w	224fa <__udivmoddi4+0x292>
   2231c:	2600      	movs	r6, #0
   2231e:	e9c5 0100 	strd	r0, r1, [r5]
   22322:	4630      	mov	r0, r6
   22324:	4631      	mov	r1, r6
   22326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2232a:	fab3 f683 	clz	r6, r3
   2232e:	2e00      	cmp	r6, #0
   22330:	d14a      	bne.n	223c8 <__udivmoddi4+0x160>
   22332:	428b      	cmp	r3, r1
   22334:	d302      	bcc.n	2233c <__udivmoddi4+0xd4>
   22336:	4282      	cmp	r2, r0
   22338:	f200 80f9 	bhi.w	2252e <__udivmoddi4+0x2c6>
   2233c:	1a84      	subs	r4, r0, r2
   2233e:	eb61 0303 	sbc.w	r3, r1, r3
   22342:	2001      	movs	r0, #1
   22344:	469e      	mov	lr, r3
   22346:	2d00      	cmp	r5, #0
   22348:	d0e0      	beq.n	2230c <__udivmoddi4+0xa4>
   2234a:	e9c5 4e00 	strd	r4, lr, [r5]
   2234e:	e7dd      	b.n	2230c <__udivmoddi4+0xa4>
   22350:	b902      	cbnz	r2, 22354 <__udivmoddi4+0xec>
   22352:	deff      	udf	#255	; 0xff
   22354:	fab2 f282 	clz	r2, r2
   22358:	2a00      	cmp	r2, #0
   2235a:	f040 8092 	bne.w	22482 <__udivmoddi4+0x21a>
   2235e:	eba1 010c 	sub.w	r1, r1, ip
   22362:	ea4f 471c 	mov.w	r7, ip, lsr #16
   22366:	fa1f fe8c 	uxth.w	lr, ip
   2236a:	2601      	movs	r6, #1
   2236c:	0c20      	lsrs	r0, r4, #16
   2236e:	fbb1 f3f7 	udiv	r3, r1, r7
   22372:	fb07 1113 	mls	r1, r7, r3, r1
   22376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   2237a:	fb0e f003 	mul.w	r0, lr, r3
   2237e:	4288      	cmp	r0, r1
   22380:	d908      	bls.n	22394 <__udivmoddi4+0x12c>
   22382:	eb1c 0101 	adds.w	r1, ip, r1
   22386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2238a:	d202      	bcs.n	22392 <__udivmoddi4+0x12a>
   2238c:	4288      	cmp	r0, r1
   2238e:	f200 80cb 	bhi.w	22528 <__udivmoddi4+0x2c0>
   22392:	4643      	mov	r3, r8
   22394:	1a09      	subs	r1, r1, r0
   22396:	b2a4      	uxth	r4, r4
   22398:	fbb1 f0f7 	udiv	r0, r1, r7
   2239c:	fb07 1110 	mls	r1, r7, r0, r1
   223a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   223a4:	fb0e fe00 	mul.w	lr, lr, r0
   223a8:	45a6      	cmp	lr, r4
   223aa:	d908      	bls.n	223be <__udivmoddi4+0x156>
   223ac:	eb1c 0404 	adds.w	r4, ip, r4
   223b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   223b4:	d202      	bcs.n	223bc <__udivmoddi4+0x154>
   223b6:	45a6      	cmp	lr, r4
   223b8:	f200 80bb 	bhi.w	22532 <__udivmoddi4+0x2ca>
   223bc:	4608      	mov	r0, r1
   223be:	eba4 040e 	sub.w	r4, r4, lr
   223c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   223c6:	e79c      	b.n	22302 <__udivmoddi4+0x9a>
   223c8:	f1c6 0720 	rsb	r7, r6, #32
   223cc:	40b3      	lsls	r3, r6
   223ce:	fa22 fc07 	lsr.w	ip, r2, r7
   223d2:	ea4c 0c03 	orr.w	ip, ip, r3
   223d6:	fa20 f407 	lsr.w	r4, r0, r7
   223da:	fa01 f306 	lsl.w	r3, r1, r6
   223de:	431c      	orrs	r4, r3
   223e0:	40f9      	lsrs	r1, r7
   223e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   223e6:	fa00 f306 	lsl.w	r3, r0, r6
   223ea:	fbb1 f8f9 	udiv	r8, r1, r9
   223ee:	0c20      	lsrs	r0, r4, #16
   223f0:	fa1f fe8c 	uxth.w	lr, ip
   223f4:	fb09 1118 	mls	r1, r9, r8, r1
   223f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   223fc:	fb08 f00e 	mul.w	r0, r8, lr
   22400:	4288      	cmp	r0, r1
   22402:	fa02 f206 	lsl.w	r2, r2, r6
   22406:	d90b      	bls.n	22420 <__udivmoddi4+0x1b8>
   22408:	eb1c 0101 	adds.w	r1, ip, r1
   2240c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   22410:	f080 8088 	bcs.w	22524 <__udivmoddi4+0x2bc>
   22414:	4288      	cmp	r0, r1
   22416:	f240 8085 	bls.w	22524 <__udivmoddi4+0x2bc>
   2241a:	f1a8 0802 	sub.w	r8, r8, #2
   2241e:	4461      	add	r1, ip
   22420:	1a09      	subs	r1, r1, r0
   22422:	b2a4      	uxth	r4, r4
   22424:	fbb1 f0f9 	udiv	r0, r1, r9
   22428:	fb09 1110 	mls	r1, r9, r0, r1
   2242c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   22430:	fb00 fe0e 	mul.w	lr, r0, lr
   22434:	458e      	cmp	lr, r1
   22436:	d908      	bls.n	2244a <__udivmoddi4+0x1e2>
   22438:	eb1c 0101 	adds.w	r1, ip, r1
   2243c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   22440:	d26c      	bcs.n	2251c <__udivmoddi4+0x2b4>
   22442:	458e      	cmp	lr, r1
   22444:	d96a      	bls.n	2251c <__udivmoddi4+0x2b4>
   22446:	3802      	subs	r0, #2
   22448:	4461      	add	r1, ip
   2244a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   2244e:	fba0 9402 	umull	r9, r4, r0, r2
   22452:	eba1 010e 	sub.w	r1, r1, lr
   22456:	42a1      	cmp	r1, r4
   22458:	46c8      	mov	r8, r9
   2245a:	46a6      	mov	lr, r4
   2245c:	d356      	bcc.n	2250c <__udivmoddi4+0x2a4>
   2245e:	d053      	beq.n	22508 <__udivmoddi4+0x2a0>
   22460:	b15d      	cbz	r5, 2247a <__udivmoddi4+0x212>
   22462:	ebb3 0208 	subs.w	r2, r3, r8
   22466:	eb61 010e 	sbc.w	r1, r1, lr
   2246a:	fa01 f707 	lsl.w	r7, r1, r7
   2246e:	fa22 f306 	lsr.w	r3, r2, r6
   22472:	40f1      	lsrs	r1, r6
   22474:	431f      	orrs	r7, r3
   22476:	e9c5 7100 	strd	r7, r1, [r5]
   2247a:	2600      	movs	r6, #0
   2247c:	4631      	mov	r1, r6
   2247e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22482:	f1c2 0320 	rsb	r3, r2, #32
   22486:	40d8      	lsrs	r0, r3
   22488:	fa0c fc02 	lsl.w	ip, ip, r2
   2248c:	fa21 f303 	lsr.w	r3, r1, r3
   22490:	4091      	lsls	r1, r2
   22492:	4301      	orrs	r1, r0
   22494:	ea4f 471c 	mov.w	r7, ip, lsr #16
   22498:	fa1f fe8c 	uxth.w	lr, ip
   2249c:	fbb3 f0f7 	udiv	r0, r3, r7
   224a0:	fb07 3610 	mls	r6, r7, r0, r3
   224a4:	0c0b      	lsrs	r3, r1, #16
   224a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   224aa:	fb00 f60e 	mul.w	r6, r0, lr
   224ae:	429e      	cmp	r6, r3
   224b0:	fa04 f402 	lsl.w	r4, r4, r2
   224b4:	d908      	bls.n	224c8 <__udivmoddi4+0x260>
   224b6:	eb1c 0303 	adds.w	r3, ip, r3
   224ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   224be:	d22f      	bcs.n	22520 <__udivmoddi4+0x2b8>
   224c0:	429e      	cmp	r6, r3
   224c2:	d92d      	bls.n	22520 <__udivmoddi4+0x2b8>
   224c4:	3802      	subs	r0, #2
   224c6:	4463      	add	r3, ip
   224c8:	1b9b      	subs	r3, r3, r6
   224ca:	b289      	uxth	r1, r1
   224cc:	fbb3 f6f7 	udiv	r6, r3, r7
   224d0:	fb07 3316 	mls	r3, r7, r6, r3
   224d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   224d8:	fb06 f30e 	mul.w	r3, r6, lr
   224dc:	428b      	cmp	r3, r1
   224de:	d908      	bls.n	224f2 <__udivmoddi4+0x28a>
   224e0:	eb1c 0101 	adds.w	r1, ip, r1
   224e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   224e8:	d216      	bcs.n	22518 <__udivmoddi4+0x2b0>
   224ea:	428b      	cmp	r3, r1
   224ec:	d914      	bls.n	22518 <__udivmoddi4+0x2b0>
   224ee:	3e02      	subs	r6, #2
   224f0:	4461      	add	r1, ip
   224f2:	1ac9      	subs	r1, r1, r3
   224f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   224f8:	e738      	b.n	2236c <__udivmoddi4+0x104>
   224fa:	462e      	mov	r6, r5
   224fc:	4628      	mov	r0, r5
   224fe:	e705      	b.n	2230c <__udivmoddi4+0xa4>
   22500:	4606      	mov	r6, r0
   22502:	e6e3      	b.n	222cc <__udivmoddi4+0x64>
   22504:	4618      	mov	r0, r3
   22506:	e6f8      	b.n	222fa <__udivmoddi4+0x92>
   22508:	454b      	cmp	r3, r9
   2250a:	d2a9      	bcs.n	22460 <__udivmoddi4+0x1f8>
   2250c:	ebb9 0802 	subs.w	r8, r9, r2
   22510:	eb64 0e0c 	sbc.w	lr, r4, ip
   22514:	3801      	subs	r0, #1
   22516:	e7a3      	b.n	22460 <__udivmoddi4+0x1f8>
   22518:	4646      	mov	r6, r8
   2251a:	e7ea      	b.n	224f2 <__udivmoddi4+0x28a>
   2251c:	4620      	mov	r0, r4
   2251e:	e794      	b.n	2244a <__udivmoddi4+0x1e2>
   22520:	4640      	mov	r0, r8
   22522:	e7d1      	b.n	224c8 <__udivmoddi4+0x260>
   22524:	46d0      	mov	r8, sl
   22526:	e77b      	b.n	22420 <__udivmoddi4+0x1b8>
   22528:	3b02      	subs	r3, #2
   2252a:	4461      	add	r1, ip
   2252c:	e732      	b.n	22394 <__udivmoddi4+0x12c>
   2252e:	4630      	mov	r0, r6
   22530:	e709      	b.n	22346 <__udivmoddi4+0xde>
   22532:	4464      	add	r4, ip
   22534:	3802      	subs	r0, #2
   22536:	e742      	b.n	223be <__udivmoddi4+0x156>

00022538 <__aeabi_idiv0>:
   22538:	4770      	bx	lr
   2253a:	bf00      	nop

0002253c <fabs>:
   2253c:	ec51 0b10 	vmov	r0, r1, d0
   22540:	ee10 2a10 	vmov	r2, s0
   22544:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   22548:	ec43 2b10 	vmov	d0, r2, r3
   2254c:	4770      	bx	lr
   2254e:	bf00      	nop

00022550 <ceilf>:
   22550:	ee10 2a10 	vmov	r2, s0
   22554:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   22558:	3b7f      	subs	r3, #127	; 0x7f
   2255a:	2b16      	cmp	r3, #22
   2255c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   22560:	dc2f      	bgt.n	225c2 <ceilf+0x72>
   22562:	2b00      	cmp	r3, #0
   22564:	db18      	blt.n	22598 <ceilf+0x48>
   22566:	491a      	ldr	r1, [pc, #104]	; (225d0 <ceilf+0x80>)
   22568:	4119      	asrs	r1, r3
   2256a:	420a      	tst	r2, r1
   2256c:	d028      	beq.n	225c0 <ceilf+0x70>
   2256e:	eddf 7a19 	vldr	s15, [pc, #100]	; 225d4 <ceilf+0x84>
   22572:	ee70 7a27 	vadd.f32	s15, s0, s15
   22576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2257e:	dd1f      	ble.n	225c0 <ceilf+0x70>
   22580:	2a00      	cmp	r2, #0
   22582:	dd04      	ble.n	2258e <ceilf+0x3e>
   22584:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   22588:	fa40 f303 	asr.w	r3, r0, r3
   2258c:	441a      	add	r2, r3
   2258e:	ea22 0301 	bic.w	r3, r2, r1
   22592:	ee00 3a10 	vmov	s0, r3
   22596:	4770      	bx	lr
   22598:	eddf 7a0e 	vldr	s15, [pc, #56]	; 225d4 <ceilf+0x84>
   2259c:	ee70 7a27 	vadd.f32	s15, s0, s15
   225a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   225a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   225a8:	dd0a      	ble.n	225c0 <ceilf+0x70>
   225aa:	2a00      	cmp	r2, #0
   225ac:	db06      	blt.n	225bc <ceilf+0x6c>
   225ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   225b2:	2900      	cmp	r1, #0
   225b4:	bf18      	it	ne
   225b6:	eeb0 0a67 	vmovne.f32	s0, s15
   225ba:	4770      	bx	lr
   225bc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 225d8 <ceilf+0x88>
   225c0:	4770      	bx	lr
   225c2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   225c6:	d3fb      	bcc.n	225c0 <ceilf+0x70>
   225c8:	ee30 0a00 	vadd.f32	s0, s0, s0
   225cc:	4770      	bx	lr
   225ce:	bf00      	nop
   225d0:	007fffff 	.word	0x007fffff
   225d4:	7149f2ca 	.word	0x7149f2ca
   225d8:	80000000 	.word	0x80000000

000225dc <asin>:
   225dc:	b538      	push	{r3, r4, r5, lr}
   225de:	ed2d 8b02 	vpush	{d8}
   225e2:	ec55 4b10 	vmov	r4, r5, d0
   225e6:	f000 f8a7 	bl	22738 <__ieee754_asin>
   225ea:	4b17      	ldr	r3, [pc, #92]	; (22648 <asin+0x6c>)
   225ec:	eeb0 8a40 	vmov.f32	s16, s0
   225f0:	eef0 8a60 	vmov.f32	s17, s1
   225f4:	f993 3000 	ldrsb.w	r3, [r3]
   225f8:	3301      	adds	r3, #1
   225fa:	d011      	beq.n	22620 <asin+0x44>
   225fc:	4622      	mov	r2, r4
   225fe:	462b      	mov	r3, r5
   22600:	4620      	mov	r0, r4
   22602:	4629      	mov	r1, r5
   22604:	f7ff fcc4 	bl	21f90 <__aeabi_dcmpun>
   22608:	b950      	cbnz	r0, 22620 <asin+0x44>
   2260a:	ec45 4b10 	vmov	d0, r4, r5
   2260e:	f7ff ff95 	bl	2253c <fabs>
   22612:	4b0e      	ldr	r3, [pc, #56]	; (2264c <asin+0x70>)
   22614:	ec51 0b10 	vmov	r0, r1, d0
   22618:	2200      	movs	r2, #0
   2261a:	f7ff fcaf 	bl	21f7c <__aeabi_dcmpgt>
   2261e:	b930      	cbnz	r0, 2262e <asin+0x52>
   22620:	eeb0 0a48 	vmov.f32	s0, s16
   22624:	eef0 0a68 	vmov.f32	s1, s17
   22628:	ecbd 8b02 	vpop	{d8}
   2262c:	bd38      	pop	{r3, r4, r5, pc}
   2262e:	f000 fe4d 	bl	232cc <__errno>
   22632:	ecbd 8b02 	vpop	{d8}
   22636:	4603      	mov	r3, r0
   22638:	2221      	movs	r2, #33	; 0x21
   2263a:	601a      	str	r2, [r3, #0]
   2263c:	4804      	ldr	r0, [pc, #16]	; (22650 <asin+0x74>)
   2263e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22642:	f000 bd35 	b.w	230b0 <nan>
   22646:	bf00      	nop
   22648:	200016fc 	.word	0x200016fc
   2264c:	3ff00000 	.word	0x3ff00000
   22650:	00024fa8 	.word	0x00024fa8

00022654 <fmod>:
   22654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22656:	ed2d 8b02 	vpush	{d8}
   2265a:	ec57 6b10 	vmov	r6, r7, d0
   2265e:	ec55 4b11 	vmov	r4, r5, d1
   22662:	f000 fabb 	bl	22bdc <__ieee754_fmod>
   22666:	4b18      	ldr	r3, [pc, #96]	; (226c8 <fmod+0x74>)
   22668:	eeb0 8a40 	vmov.f32	s16, s0
   2266c:	eef0 8a60 	vmov.f32	s17, s1
   22670:	f993 3000 	ldrsb.w	r3, [r3]
   22674:	3301      	adds	r3, #1
   22676:	d00d      	beq.n	22694 <fmod+0x40>
   22678:	4630      	mov	r0, r6
   2267a:	4639      	mov	r1, r7
   2267c:	4622      	mov	r2, r4
   2267e:	462b      	mov	r3, r5
   22680:	f7ff fc86 	bl	21f90 <__aeabi_dcmpun>
   22684:	b930      	cbnz	r0, 22694 <fmod+0x40>
   22686:	2200      	movs	r2, #0
   22688:	2300      	movs	r3, #0
   2268a:	4620      	mov	r0, r4
   2268c:	4629      	mov	r1, r5
   2268e:	f7ff fc4d 	bl	21f2c <__aeabi_dcmpeq>
   22692:	b930      	cbnz	r0, 226a2 <fmod+0x4e>
   22694:	eeb0 0a48 	vmov.f32	s0, s16
   22698:	eef0 0a68 	vmov.f32	s1, s17
   2269c:	ecbd 8b02 	vpop	{d8}
   226a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   226a2:	f000 fe13 	bl	232cc <__errno>
   226a6:	2200      	movs	r2, #0
   226a8:	2300      	movs	r3, #0
   226aa:	2121      	movs	r1, #33	; 0x21
   226ac:	6001      	str	r1, [r0, #0]
   226ae:	4610      	mov	r0, r2
   226b0:	4619      	mov	r1, r3
   226b2:	f7ff fafd 	bl	21cb0 <__aeabi_ddiv>
   226b6:	ec41 0b18 	vmov	d8, r0, r1
   226ba:	eeb0 0a48 	vmov.f32	s0, s16
   226be:	eef0 0a68 	vmov.f32	s1, s17
   226c2:	ecbd 8b02 	vpop	{d8}
   226c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   226c8:	200016fc 	.word	0x200016fc

000226cc <log10f>:
   226cc:	b508      	push	{r3, lr}
   226ce:	ed2d 8b02 	vpush	{d8}
   226d2:	eeb0 8a40 	vmov.f32	s16, s0
   226d6:	f000 fc8b 	bl	22ff0 <__ieee754_log10f>
   226da:	4b14      	ldr	r3, [pc, #80]	; (2272c <log10f+0x60>)
   226dc:	f993 3000 	ldrsb.w	r3, [r3]
   226e0:	3301      	adds	r3, #1
   226e2:	d014      	beq.n	2270e <log10f+0x42>
   226e4:	eeb4 8a48 	vcmp.f32	s16, s16
   226e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   226ec:	d60f      	bvs.n	2270e <log10f+0x42>
   226ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   226f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   226f6:	d80a      	bhi.n	2270e <log10f+0x42>
   226f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   226fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22700:	d108      	bne.n	22714 <log10f+0x48>
   22702:	f000 fde3 	bl	232cc <__errno>
   22706:	2322      	movs	r3, #34	; 0x22
   22708:	ed9f 0a09 	vldr	s0, [pc, #36]	; 22730 <log10f+0x64>
   2270c:	6003      	str	r3, [r0, #0]
   2270e:	ecbd 8b02 	vpop	{d8}
   22712:	bd08      	pop	{r3, pc}
   22714:	f000 fdda 	bl	232cc <__errno>
   22718:	ecbd 8b02 	vpop	{d8}
   2271c:	4603      	mov	r3, r0
   2271e:	2221      	movs	r2, #33	; 0x21
   22720:	601a      	str	r2, [r3, #0]
   22722:	4804      	ldr	r0, [pc, #16]	; (22734 <log10f+0x68>)
   22724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22728:	f000 bcca 	b.w	230c0 <nanf>
   2272c:	200016fc 	.word	0x200016fc
   22730:	ff800000 	.word	0xff800000
   22734:	00024fa8 	.word	0x00024fa8

00022738 <__ieee754_asin>:
   22738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2273c:	ec55 4b10 	vmov	r4, r5, d0
   22740:	4bcf      	ldr	r3, [pc, #828]	; (22a80 <__ieee754_asin+0x348>)
   22742:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   22746:	429f      	cmp	r7, r3
   22748:	ed2d 8b04 	vpush	{d8-d9}
   2274c:	dd37      	ble.n	227be <__ieee754_asin+0x86>
   2274e:	ee10 3a10 	vmov	r3, s0
   22752:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   22756:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   2275a:	433b      	orrs	r3, r7
   2275c:	d010      	beq.n	22780 <__ieee754_asin+0x48>
   2275e:	ee10 2a10 	vmov	r2, s0
   22762:	462b      	mov	r3, r5
   22764:	4620      	mov	r0, r4
   22766:	4629      	mov	r1, r5
   22768:	f7fe ffc0 	bl	216ec <__aeabi_dsub>
   2276c:	4602      	mov	r2, r0
   2276e:	460b      	mov	r3, r1
   22770:	f7ff fa9e 	bl	21cb0 <__aeabi_ddiv>
   22774:	ec41 0b10 	vmov	d0, r0, r1
   22778:	ecbd 8b04 	vpop	{d8-d9}
   2277c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22780:	ee10 0a10 	vmov	r0, s0
   22784:	a3a2      	add	r3, pc, #648	; (adr r3, 22a10 <__ieee754_asin+0x2d8>)
   22786:	e9d3 2300 	ldrd	r2, r3, [r3]
   2278a:	4629      	mov	r1, r5
   2278c:	f7ff f966 	bl	21a5c <__aeabi_dmul>
   22790:	4602      	mov	r2, r0
   22792:	460b      	mov	r3, r1
   22794:	4620      	mov	r0, r4
   22796:	4629      	mov	r1, r5
   22798:	4614      	mov	r4, r2
   2279a:	461d      	mov	r5, r3
   2279c:	a39e      	add	r3, pc, #632	; (adr r3, 22a18 <__ieee754_asin+0x2e0>)
   2279e:	e9d3 2300 	ldrd	r2, r3, [r3]
   227a2:	f7ff f95b 	bl	21a5c <__aeabi_dmul>
   227a6:	4602      	mov	r2, r0
   227a8:	460b      	mov	r3, r1
   227aa:	4620      	mov	r0, r4
   227ac:	4629      	mov	r1, r5
   227ae:	f7fe ff9f 	bl	216f0 <__adddf3>
   227b2:	ecbd 8b04 	vpop	{d8-d9}
   227b6:	ec41 0b10 	vmov	d0, r0, r1
   227ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227be:	4bb1      	ldr	r3, [pc, #708]	; (22a84 <__ieee754_asin+0x34c>)
   227c0:	429f      	cmp	r7, r3
   227c2:	462e      	mov	r6, r5
   227c4:	dc12      	bgt.n	227ec <__ieee754_asin+0xb4>
   227c6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   227ca:	f280 8163 	bge.w	22a94 <__ieee754_asin+0x35c>
   227ce:	a394      	add	r3, pc, #592	; (adr r3, 22a20 <__ieee754_asin+0x2e8>)
   227d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   227d4:	ee10 0a10 	vmov	r0, s0
   227d8:	4629      	mov	r1, r5
   227da:	f7fe ff89 	bl	216f0 <__adddf3>
   227de:	4baa      	ldr	r3, [pc, #680]	; (22a88 <__ieee754_asin+0x350>)
   227e0:	2200      	movs	r2, #0
   227e2:	f7ff fbcb 	bl	21f7c <__aeabi_dcmpgt>
   227e6:	2800      	cmp	r0, #0
   227e8:	f040 810c 	bne.w	22a04 <__ieee754_asin+0x2cc>
   227ec:	ec45 4b10 	vmov	d0, r4, r5
   227f0:	f7ff fea4 	bl	2253c <fabs>
   227f4:	49a4      	ldr	r1, [pc, #656]	; (22a88 <__ieee754_asin+0x350>)
   227f6:	ec53 2b10 	vmov	r2, r3, d0
   227fa:	2000      	movs	r0, #0
   227fc:	f7fe ff76 	bl	216ec <__aeabi_dsub>
   22800:	4ba2      	ldr	r3, [pc, #648]	; (22a8c <__ieee754_asin+0x354>)
   22802:	2200      	movs	r2, #0
   22804:	f7ff f92a 	bl	21a5c <__aeabi_dmul>
   22808:	a387      	add	r3, pc, #540	; (adr r3, 22a28 <__ieee754_asin+0x2f0>)
   2280a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2280e:	4604      	mov	r4, r0
   22810:	460d      	mov	r5, r1
   22812:	f7ff f923 	bl	21a5c <__aeabi_dmul>
   22816:	a386      	add	r3, pc, #536	; (adr r3, 22a30 <__ieee754_asin+0x2f8>)
   22818:	e9d3 2300 	ldrd	r2, r3, [r3]
   2281c:	f7fe ff68 	bl	216f0 <__adddf3>
   22820:	4622      	mov	r2, r4
   22822:	462b      	mov	r3, r5
   22824:	f7ff f91a 	bl	21a5c <__aeabi_dmul>
   22828:	a383      	add	r3, pc, #524	; (adr r3, 22a38 <__ieee754_asin+0x300>)
   2282a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2282e:	f7fe ff5d 	bl	216ec <__aeabi_dsub>
   22832:	4622      	mov	r2, r4
   22834:	462b      	mov	r3, r5
   22836:	f7ff f911 	bl	21a5c <__aeabi_dmul>
   2283a:	a381      	add	r3, pc, #516	; (adr r3, 22a40 <__ieee754_asin+0x308>)
   2283c:	e9d3 2300 	ldrd	r2, r3, [r3]
   22840:	f7fe ff56 	bl	216f0 <__adddf3>
   22844:	4622      	mov	r2, r4
   22846:	462b      	mov	r3, r5
   22848:	f7ff f908 	bl	21a5c <__aeabi_dmul>
   2284c:	a37e      	add	r3, pc, #504	; (adr r3, 22a48 <__ieee754_asin+0x310>)
   2284e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22852:	f7fe ff4b 	bl	216ec <__aeabi_dsub>
   22856:	4622      	mov	r2, r4
   22858:	462b      	mov	r3, r5
   2285a:	f7ff f8ff 	bl	21a5c <__aeabi_dmul>
   2285e:	a37c      	add	r3, pc, #496	; (adr r3, 22a50 <__ieee754_asin+0x318>)
   22860:	e9d3 2300 	ldrd	r2, r3, [r3]
   22864:	f7fe ff44 	bl	216f0 <__adddf3>
   22868:	4622      	mov	r2, r4
   2286a:	462b      	mov	r3, r5
   2286c:	f7ff f8f6 	bl	21a5c <__aeabi_dmul>
   22870:	a379      	add	r3, pc, #484	; (adr r3, 22a58 <__ieee754_asin+0x320>)
   22872:	e9d3 2300 	ldrd	r2, r3, [r3]
   22876:	ec41 0b18 	vmov	d8, r0, r1
   2287a:	ec41 0b19 	vmov	d9, r0, r1
   2287e:	4620      	mov	r0, r4
   22880:	4629      	mov	r1, r5
   22882:	f7ff f8eb 	bl	21a5c <__aeabi_dmul>
   22886:	a376      	add	r3, pc, #472	; (adr r3, 22a60 <__ieee754_asin+0x328>)
   22888:	e9d3 2300 	ldrd	r2, r3, [r3]
   2288c:	f7fe ff2e 	bl	216ec <__aeabi_dsub>
   22890:	4622      	mov	r2, r4
   22892:	462b      	mov	r3, r5
   22894:	f7ff f8e2 	bl	21a5c <__aeabi_dmul>
   22898:	a373      	add	r3, pc, #460	; (adr r3, 22a68 <__ieee754_asin+0x330>)
   2289a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2289e:	f7fe ff27 	bl	216f0 <__adddf3>
   228a2:	4622      	mov	r2, r4
   228a4:	462b      	mov	r3, r5
   228a6:	f7ff f8d9 	bl	21a5c <__aeabi_dmul>
   228aa:	a371      	add	r3, pc, #452	; (adr r3, 22a70 <__ieee754_asin+0x338>)
   228ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   228b0:	f7fe ff1c 	bl	216ec <__aeabi_dsub>
   228b4:	4622      	mov	r2, r4
   228b6:	462b      	mov	r3, r5
   228b8:	f7ff f8d0 	bl	21a5c <__aeabi_dmul>
   228bc:	4b72      	ldr	r3, [pc, #456]	; (22a88 <__ieee754_asin+0x350>)
   228be:	2200      	movs	r2, #0
   228c0:	f7fe ff16 	bl	216f0 <__adddf3>
   228c4:	ec45 4b10 	vmov	d0, r4, r5
   228c8:	4680      	mov	r8, r0
   228ca:	4689      	mov	r9, r1
   228cc:	f000 fac4 	bl	22e58 <__ieee754_sqrt>
   228d0:	4b6f      	ldr	r3, [pc, #444]	; (22a90 <__ieee754_asin+0x358>)
   228d2:	429f      	cmp	r7, r3
   228d4:	ec5b ab10 	vmov	sl, fp, d0
   228d8:	dc73      	bgt.n	229c2 <__ieee754_asin+0x28a>
   228da:	465b      	mov	r3, fp
   228dc:	2200      	movs	r2, #0
   228de:	ee10 0a10 	vmov	r0, s0
   228e2:	ec43 2b18 	vmov	d8, r2, r3
   228e6:	4659      	mov	r1, fp
   228e8:	ee10 2a10 	vmov	r2, s0
   228ec:	f7fe ff00 	bl	216f0 <__adddf3>
   228f0:	4642      	mov	r2, r8
   228f2:	464b      	mov	r3, r9
   228f4:	4680      	mov	r8, r0
   228f6:	4689      	mov	r9, r1
   228f8:	ec51 0b19 	vmov	r0, r1, d9
   228fc:	f7ff f9d8 	bl	21cb0 <__aeabi_ddiv>
   22900:	4602      	mov	r2, r0
   22902:	460b      	mov	r3, r1
   22904:	4640      	mov	r0, r8
   22906:	4649      	mov	r1, r9
   22908:	f7ff f8a8 	bl	21a5c <__aeabi_dmul>
   2290c:	ec53 2b18 	vmov	r2, r3, d8
   22910:	4680      	mov	r8, r0
   22912:	4689      	mov	r9, r1
   22914:	ec51 0b18 	vmov	r0, r1, d8
   22918:	f7ff f8a0 	bl	21a5c <__aeabi_dmul>
   2291c:	4602      	mov	r2, r0
   2291e:	460b      	mov	r3, r1
   22920:	4620      	mov	r0, r4
   22922:	4629      	mov	r1, r5
   22924:	f7fe fee2 	bl	216ec <__aeabi_dsub>
   22928:	ec53 2b18 	vmov	r2, r3, d8
   2292c:	4604      	mov	r4, r0
   2292e:	460d      	mov	r5, r1
   22930:	4650      	mov	r0, sl
   22932:	4659      	mov	r1, fp
   22934:	f7fe fedc 	bl	216f0 <__adddf3>
   22938:	4602      	mov	r2, r0
   2293a:	460b      	mov	r3, r1
   2293c:	4620      	mov	r0, r4
   2293e:	4629      	mov	r1, r5
   22940:	f7ff f9b6 	bl	21cb0 <__aeabi_ddiv>
   22944:	4602      	mov	r2, r0
   22946:	460b      	mov	r3, r1
   22948:	f7fe fed2 	bl	216f0 <__adddf3>
   2294c:	4602      	mov	r2, r0
   2294e:	460b      	mov	r3, r1
   22950:	a131      	add	r1, pc, #196	; (adr r1, 22a18 <__ieee754_asin+0x2e0>)
   22952:	e9d1 0100 	ldrd	r0, r1, [r1]
   22956:	f7fe fec9 	bl	216ec <__aeabi_dsub>
   2295a:	4602      	mov	r2, r0
   2295c:	460b      	mov	r3, r1
   2295e:	4640      	mov	r0, r8
   22960:	4649      	mov	r1, r9
   22962:	f7fe fec3 	bl	216ec <__aeabi_dsub>
   22966:	ec53 2b18 	vmov	r2, r3, d8
   2296a:	4604      	mov	r4, r0
   2296c:	460d      	mov	r5, r1
   2296e:	ee18 0a10 	vmov	r0, s16
   22972:	4619      	mov	r1, r3
   22974:	f7fe febc 	bl	216f0 <__adddf3>
   22978:	4602      	mov	r2, r0
   2297a:	460b      	mov	r3, r1
   2297c:	a13e      	add	r1, pc, #248	; (adr r1, 22a78 <__ieee754_asin+0x340>)
   2297e:	e9d1 0100 	ldrd	r0, r1, [r1]
   22982:	f7fe feb3 	bl	216ec <__aeabi_dsub>
   22986:	4602      	mov	r2, r0
   22988:	460b      	mov	r3, r1
   2298a:	4620      	mov	r0, r4
   2298c:	4629      	mov	r1, r5
   2298e:	f7fe fead 	bl	216ec <__aeabi_dsub>
   22992:	4602      	mov	r2, r0
   22994:	460b      	mov	r3, r1
   22996:	a138      	add	r1, pc, #224	; (adr r1, 22a78 <__ieee754_asin+0x340>)
   22998:	e9d1 0100 	ldrd	r0, r1, [r1]
   2299c:	f7fe fea6 	bl	216ec <__aeabi_dsub>
   229a0:	ec41 0b10 	vmov	d0, r0, r1
   229a4:	2e00      	cmp	r6, #0
   229a6:	f73f aee7 	bgt.w	22778 <__ieee754_asin+0x40>
   229aa:	ecbd 8b04 	vpop	{d8-d9}
   229ae:	ee10 1a90 	vmov	r1, s1
   229b2:	ee10 2a10 	vmov	r2, s0
   229b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   229ba:	ec43 2b10 	vmov	d0, r2, r3
   229be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229c2:	4642      	mov	r2, r8
   229c4:	464b      	mov	r3, r9
   229c6:	ec51 0b18 	vmov	r0, r1, d8
   229ca:	f7ff f971 	bl	21cb0 <__aeabi_ddiv>
   229ce:	4652      	mov	r2, sl
   229d0:	465b      	mov	r3, fp
   229d2:	f7ff f843 	bl	21a5c <__aeabi_dmul>
   229d6:	4652      	mov	r2, sl
   229d8:	465b      	mov	r3, fp
   229da:	f7fe fe89 	bl	216f0 <__adddf3>
   229de:	4602      	mov	r2, r0
   229e0:	460b      	mov	r3, r1
   229e2:	f7fe fe85 	bl	216f0 <__adddf3>
   229e6:	a30c      	add	r3, pc, #48	; (adr r3, 22a18 <__ieee754_asin+0x2e0>)
   229e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   229ec:	f7fe fe7e 	bl	216ec <__aeabi_dsub>
   229f0:	4602      	mov	r2, r0
   229f2:	460b      	mov	r3, r1
   229f4:	a106      	add	r1, pc, #24	; (adr r1, 22a10 <__ieee754_asin+0x2d8>)
   229f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   229fa:	f7fe fe77 	bl	216ec <__aeabi_dsub>
   229fe:	ec41 0b10 	vmov	d0, r0, r1
   22a02:	e7cf      	b.n	229a4 <__ieee754_asin+0x26c>
   22a04:	ec45 4b10 	vmov	d0, r4, r5
   22a08:	e6b6      	b.n	22778 <__ieee754_asin+0x40>
   22a0a:	bf00      	nop
   22a0c:	f3af 8000 	nop.w
   22a10:	54442d18 	.word	0x54442d18
   22a14:	3ff921fb 	.word	0x3ff921fb
   22a18:	33145c07 	.word	0x33145c07
   22a1c:	3c91a626 	.word	0x3c91a626
   22a20:	8800759c 	.word	0x8800759c
   22a24:	7e37e43c 	.word	0x7e37e43c
   22a28:	0dfdf709 	.word	0x0dfdf709
   22a2c:	3f023de1 	.word	0x3f023de1
   22a30:	7501b288 	.word	0x7501b288
   22a34:	3f49efe0 	.word	0x3f49efe0
   22a38:	b5688f3b 	.word	0xb5688f3b
   22a3c:	3fa48228 	.word	0x3fa48228
   22a40:	0e884455 	.word	0x0e884455
   22a44:	3fc9c155 	.word	0x3fc9c155
   22a48:	03eb6f7d 	.word	0x03eb6f7d
   22a4c:	3fd4d612 	.word	0x3fd4d612
   22a50:	55555555 	.word	0x55555555
   22a54:	3fc55555 	.word	0x3fc55555
   22a58:	b12e9282 	.word	0xb12e9282
   22a5c:	3fb3b8c5 	.word	0x3fb3b8c5
   22a60:	1b8d0159 	.word	0x1b8d0159
   22a64:	3fe6066c 	.word	0x3fe6066c
   22a68:	9c598ac8 	.word	0x9c598ac8
   22a6c:	40002ae5 	.word	0x40002ae5
   22a70:	1c8a2d4b 	.word	0x1c8a2d4b
   22a74:	40033a27 	.word	0x40033a27
   22a78:	54442d18 	.word	0x54442d18
   22a7c:	3fe921fb 	.word	0x3fe921fb
   22a80:	3fefffff 	.word	0x3fefffff
   22a84:	3fdfffff 	.word	0x3fdfffff
   22a88:	3ff00000 	.word	0x3ff00000
   22a8c:	3fe00000 	.word	0x3fe00000
   22a90:	3fef3332 	.word	0x3fef3332
   22a94:	ee10 2a10 	vmov	r2, s0
   22a98:	ee10 0a10 	vmov	r0, s0
   22a9c:	462b      	mov	r3, r5
   22a9e:	4629      	mov	r1, r5
   22aa0:	f7fe ffdc 	bl	21a5c <__aeabi_dmul>
   22aa4:	a339      	add	r3, pc, #228	; (adr r3, 22b8c <__ieee754_asin+0x454>)
   22aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   22aaa:	4606      	mov	r6, r0
   22aac:	460f      	mov	r7, r1
   22aae:	f7fe ffd5 	bl	21a5c <__aeabi_dmul>
   22ab2:	a338      	add	r3, pc, #224	; (adr r3, 22b94 <__ieee754_asin+0x45c>)
   22ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
   22ab8:	f7fe fe1a 	bl	216f0 <__adddf3>
   22abc:	4632      	mov	r2, r6
   22abe:	463b      	mov	r3, r7
   22ac0:	f7fe ffcc 	bl	21a5c <__aeabi_dmul>
   22ac4:	a335      	add	r3, pc, #212	; (adr r3, 22b9c <__ieee754_asin+0x464>)
   22ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   22aca:	f7fe fe0f 	bl	216ec <__aeabi_dsub>
   22ace:	4632      	mov	r2, r6
   22ad0:	463b      	mov	r3, r7
   22ad2:	f7fe ffc3 	bl	21a5c <__aeabi_dmul>
   22ad6:	a333      	add	r3, pc, #204	; (adr r3, 22ba4 <__ieee754_asin+0x46c>)
   22ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
   22adc:	f7fe fe08 	bl	216f0 <__adddf3>
   22ae0:	4632      	mov	r2, r6
   22ae2:	463b      	mov	r3, r7
   22ae4:	f7fe ffba 	bl	21a5c <__aeabi_dmul>
   22ae8:	a330      	add	r3, pc, #192	; (adr r3, 22bac <__ieee754_asin+0x474>)
   22aea:	e9d3 2300 	ldrd	r2, r3, [r3]
   22aee:	f7fe fdfd 	bl	216ec <__aeabi_dsub>
   22af2:	4632      	mov	r2, r6
   22af4:	463b      	mov	r3, r7
   22af6:	f7fe ffb1 	bl	21a5c <__aeabi_dmul>
   22afa:	a32e      	add	r3, pc, #184	; (adr r3, 22bb4 <__ieee754_asin+0x47c>)
   22afc:	e9d3 2300 	ldrd	r2, r3, [r3]
   22b00:	f7fe fdf6 	bl	216f0 <__adddf3>
   22b04:	4632      	mov	r2, r6
   22b06:	463b      	mov	r3, r7
   22b08:	f7fe ffa8 	bl	21a5c <__aeabi_dmul>
   22b0c:	a32b      	add	r3, pc, #172	; (adr r3, 22bbc <__ieee754_asin+0x484>)
   22b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   22b12:	4680      	mov	r8, r0
   22b14:	4689      	mov	r9, r1
   22b16:	4630      	mov	r0, r6
   22b18:	4639      	mov	r1, r7
   22b1a:	f7fe ff9f 	bl	21a5c <__aeabi_dmul>
   22b1e:	a329      	add	r3, pc, #164	; (adr r3, 22bc4 <__ieee754_asin+0x48c>)
   22b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   22b24:	f7fe fde2 	bl	216ec <__aeabi_dsub>
   22b28:	4632      	mov	r2, r6
   22b2a:	463b      	mov	r3, r7
   22b2c:	f7fe ff96 	bl	21a5c <__aeabi_dmul>
   22b30:	a326      	add	r3, pc, #152	; (adr r3, 22bcc <__ieee754_asin+0x494>)
   22b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   22b36:	f7fe fddb 	bl	216f0 <__adddf3>
   22b3a:	4632      	mov	r2, r6
   22b3c:	463b      	mov	r3, r7
   22b3e:	f7fe ff8d 	bl	21a5c <__aeabi_dmul>
   22b42:	a324      	add	r3, pc, #144	; (adr r3, 22bd4 <__ieee754_asin+0x49c>)
   22b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   22b48:	f7fe fdd0 	bl	216ec <__aeabi_dsub>
   22b4c:	4632      	mov	r2, r6
   22b4e:	463b      	mov	r3, r7
   22b50:	f7fe ff84 	bl	21a5c <__aeabi_dmul>
   22b54:	4b0c      	ldr	r3, [pc, #48]	; (22b88 <__ieee754_asin+0x450>)
   22b56:	2200      	movs	r2, #0
   22b58:	f7fe fdca 	bl	216f0 <__adddf3>
   22b5c:	4602      	mov	r2, r0
   22b5e:	460b      	mov	r3, r1
   22b60:	4640      	mov	r0, r8
   22b62:	4649      	mov	r1, r9
   22b64:	f7ff f8a4 	bl	21cb0 <__aeabi_ddiv>
   22b68:	4622      	mov	r2, r4
   22b6a:	462b      	mov	r3, r5
   22b6c:	f7fe ff76 	bl	21a5c <__aeabi_dmul>
   22b70:	4622      	mov	r2, r4
   22b72:	462b      	mov	r3, r5
   22b74:	f7fe fdbc 	bl	216f0 <__adddf3>
   22b78:	ecbd 8b04 	vpop	{d8-d9}
   22b7c:	ec41 0b10 	vmov	d0, r0, r1
   22b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b84:	f3af 8000 	nop.w
   22b88:	3ff00000 	.word	0x3ff00000
   22b8c:	0dfdf709 	.word	0x0dfdf709
   22b90:	3f023de1 	.word	0x3f023de1
   22b94:	7501b288 	.word	0x7501b288
   22b98:	3f49efe0 	.word	0x3f49efe0
   22b9c:	b5688f3b 	.word	0xb5688f3b
   22ba0:	3fa48228 	.word	0x3fa48228
   22ba4:	0e884455 	.word	0x0e884455
   22ba8:	3fc9c155 	.word	0x3fc9c155
   22bac:	03eb6f7d 	.word	0x03eb6f7d
   22bb0:	3fd4d612 	.word	0x3fd4d612
   22bb4:	55555555 	.word	0x55555555
   22bb8:	3fc55555 	.word	0x3fc55555
   22bbc:	b12e9282 	.word	0xb12e9282
   22bc0:	3fb3b8c5 	.word	0x3fb3b8c5
   22bc4:	1b8d0159 	.word	0x1b8d0159
   22bc8:	3fe6066c 	.word	0x3fe6066c
   22bcc:	9c598ac8 	.word	0x9c598ac8
   22bd0:	40002ae5 	.word	0x40002ae5
   22bd4:	1c8a2d4b 	.word	0x1c8a2d4b
   22bd8:	40033a27 	.word	0x40033a27

00022bdc <__ieee754_fmod>:
   22bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22be0:	ec53 2b11 	vmov	r2, r3, d1
   22be4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   22be8:	ea5e 0402 	orrs.w	r4, lr, r2
   22bec:	ec51 0b10 	vmov	r0, r1, d0
   22bf0:	d033      	beq.n	22c5a <__ieee754_fmod+0x7e>
   22bf2:	4c93      	ldr	r4, [pc, #588]	; (22e40 <__ieee754_fmod+0x264>)
   22bf4:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   22bf8:	45a1      	cmp	r9, r4
   22bfa:	4688      	mov	r8, r1
   22bfc:	dc2d      	bgt.n	22c5a <__ieee754_fmod+0x7e>
   22bfe:	4254      	negs	r4, r2
   22c00:	4e90      	ldr	r6, [pc, #576]	; (22e44 <__ieee754_fmod+0x268>)
   22c02:	4314      	orrs	r4, r2
   22c04:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   22c08:	42b4      	cmp	r4, r6
   22c0a:	ee11 7a10 	vmov	r7, s2
   22c0e:	d824      	bhi.n	22c5a <__ieee754_fmod+0x7e>
   22c10:	45f1      	cmp	r9, lr
   22c12:	469c      	mov	ip, r3
   22c14:	ee11 5a10 	vmov	r5, s2
   22c18:	ee10 3a10 	vmov	r3, s0
   22c1c:	4602      	mov	r2, r0
   22c1e:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   22c22:	dc06      	bgt.n	22c32 <__ieee754_fmod+0x56>
   22c24:	f2c0 80bd 	blt.w	22da2 <__ieee754_fmod+0x1c6>
   22c28:	42b8      	cmp	r0, r7
   22c2a:	f0c0 80ba 	bcc.w	22da2 <__ieee754_fmod+0x1c6>
   22c2e:	f000 80ef 	beq.w	22e10 <__ieee754_fmod+0x234>
   22c32:	4984      	ldr	r1, [pc, #528]	; (22e44 <__ieee754_fmod+0x268>)
   22c34:	ea08 0101 	and.w	r1, r8, r1
   22c38:	b9c9      	cbnz	r1, 22c6e <__ieee754_fmod+0x92>
   22c3a:	f1b9 0f00 	cmp.w	r9, #0
   22c3e:	f040 80d0 	bne.w	22de2 <__ieee754_fmod+0x206>
   22c42:	2b00      	cmp	r3, #0
   22c44:	4618      	mov	r0, r3
   22c46:	f340 80f8 	ble.w	22e3a <__ieee754_fmod+0x25e>
   22c4a:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   22c4e:	0040      	lsls	r0, r0, #1
   22c50:	2800      	cmp	r0, #0
   22c52:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   22c56:	dcfa      	bgt.n	22c4e <__ieee754_fmod+0x72>
   22c58:	e00d      	b.n	22c76 <__ieee754_fmod+0x9a>
   22c5a:	f7fe feff 	bl	21a5c <__aeabi_dmul>
   22c5e:	4602      	mov	r2, r0
   22c60:	460b      	mov	r3, r1
   22c62:	f7ff f825 	bl	21cb0 <__aeabi_ddiv>
   22c66:	ec41 0b10 	vmov	d0, r0, r1
   22c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22c6e:	ea4f 5129 	mov.w	r1, r9, asr #20
   22c72:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   22c76:	4873      	ldr	r0, [pc, #460]	; (22e44 <__ieee754_fmod+0x268>)
   22c78:	ea0c 0000 	and.w	r0, ip, r0
   22c7c:	b968      	cbnz	r0, 22c9a <__ieee754_fmod+0xbe>
   22c7e:	f1be 0f00 	cmp.w	lr, #0
   22c82:	f040 80a2 	bne.w	22dca <__ieee754_fmod+0x1ee>
   22c86:	2f00      	cmp	r7, #0
   22c88:	4e6f      	ldr	r6, [pc, #444]	; (22e48 <__ieee754_fmod+0x26c>)
   22c8a:	4638      	mov	r0, r7
   22c8c:	dd09      	ble.n	22ca2 <__ieee754_fmod+0xc6>
   22c8e:	0040      	lsls	r0, r0, #1
   22c90:	2800      	cmp	r0, #0
   22c92:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   22c96:	dcfa      	bgt.n	22c8e <__ieee754_fmod+0xb2>
   22c98:	e003      	b.n	22ca2 <__ieee754_fmod+0xc6>
   22c9a:	ea4f 562e 	mov.w	r6, lr, asr #20
   22c9e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   22ca2:	486a      	ldr	r0, [pc, #424]	; (22e4c <__ieee754_fmod+0x270>)
   22ca4:	4281      	cmp	r1, r0
   22ca6:	db6f      	blt.n	22d88 <__ieee754_fmod+0x1ac>
   22ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
   22cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22cb0:	4866      	ldr	r0, [pc, #408]	; (22e4c <__ieee754_fmod+0x270>)
   22cb2:	4286      	cmp	r6, r0
   22cb4:	db58      	blt.n	22d68 <__ieee754_fmod+0x18c>
   22cb6:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   22cba:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   22cbe:	1bd0      	subs	r0, r2, r7
   22cc0:	1b89      	subs	r1, r1, r6
   22cc2:	d10b      	bne.n	22cdc <__ieee754_fmod+0x100>
   22cc4:	e01d      	b.n	22d02 <__ieee754_fmod+0x126>
   22cc6:	ea50 030e 	orrs.w	r3, r0, lr
   22cca:	d045      	beq.n	22d58 <__ieee754_fmod+0x17c>
   22ccc:	ea4f 73de 	mov.w	r3, lr, lsr #31
   22cd0:	3901      	subs	r1, #1
   22cd2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   22cd6:	ea4f 024e 	mov.w	r2, lr, lsl #1
   22cda:	d011      	beq.n	22d00 <__ieee754_fmod+0x124>
   22cdc:	eba3 000c 	sub.w	r0, r3, ip
   22ce0:	4295      	cmp	r5, r2
   22ce2:	bf88      	it	hi
   22ce4:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   22ce8:	2800      	cmp	r0, #0
   22cea:	eba2 0e05 	sub.w	lr, r2, r5
   22cee:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   22cf2:	dae8      	bge.n	22cc6 <__ieee754_fmod+0xea>
   22cf4:	3901      	subs	r1, #1
   22cf6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   22cfa:	ea4f 0242 	mov.w	r2, r2, lsl #1
   22cfe:	d1ed      	bne.n	22cdc <__ieee754_fmod+0x100>
   22d00:	1b50      	subs	r0, r2, r5
   22d02:	eba3 0c0c 	sub.w	ip, r3, ip
   22d06:	4295      	cmp	r5, r2
   22d08:	bf88      	it	hi
   22d0a:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   22d0e:	f1bc 0f00 	cmp.w	ip, #0
   22d12:	bfa4      	itt	ge
   22d14:	4602      	movge	r2, r0
   22d16:	4663      	movge	r3, ip
   22d18:	ea53 0102 	orrs.w	r1, r3, r2
   22d1c:	d105      	bne.n	22d2a <__ieee754_fmod+0x14e>
   22d1e:	e01b      	b.n	22d58 <__ieee754_fmod+0x17c>
   22d20:	0fd1      	lsrs	r1, r2, #31
   22d22:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   22d26:	0052      	lsls	r2, r2, #1
   22d28:	3e01      	subs	r6, #1
   22d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22d2e:	dbf7      	blt.n	22d20 <__ieee754_fmod+0x144>
   22d30:	4946      	ldr	r1, [pc, #280]	; (22e4c <__ieee754_fmod+0x270>)
   22d32:	428e      	cmp	r6, r1
   22d34:	da61      	bge.n	22dfa <__ieee754_fmod+0x21e>
   22d36:	1b89      	subs	r1, r1, r6
   22d38:	2914      	cmp	r1, #20
   22d3a:	dc6f      	bgt.n	22e1c <__ieee754_fmod+0x240>
   22d3c:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   22d40:	40ca      	lsrs	r2, r1
   22d42:	fa03 f000 	lsl.w	r0, r3, r0
   22d46:	fa43 f101 	asr.w	r1, r3, r1
   22d4a:	4310      	orrs	r0, r2
   22d4c:	430c      	orrs	r4, r1
   22d4e:	4623      	mov	r3, r4
   22d50:	4602      	mov	r2, r0
   22d52:	ec43 2b10 	vmov	d0, r2, r3
   22d56:	e788      	b.n	22c6a <__ieee754_fmod+0x8e>
   22d58:	4b3d      	ldr	r3, [pc, #244]	; (22e50 <__ieee754_fmod+0x274>)
   22d5a:	0fe4      	lsrs	r4, r4, #31
   22d5c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   22d60:	ed94 0b00 	vldr	d0, [r4]
   22d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22d68:	1b80      	subs	r0, r0, r6
   22d6a:	281f      	cmp	r0, #31
   22d6c:	dd21      	ble.n	22db2 <__ieee754_fmod+0x1d6>
   22d6e:	4839      	ldr	r0, [pc, #228]	; (22e54 <__ieee754_fmod+0x278>)
   22d70:	1b89      	subs	r1, r1, r6
   22d72:	eba0 0c06 	sub.w	ip, r0, r6
   22d76:	fa07 fc0c 	lsl.w	ip, r7, ip
   22d7a:	bf18      	it	ne
   22d7c:	2500      	movne	r5, #0
   22d7e:	d1ad      	bne.n	22cdc <__ieee754_fmod+0x100>
   22d80:	eba3 0c0c 	sub.w	ip, r3, ip
   22d84:	4610      	mov	r0, r2
   22d86:	e7c2      	b.n	22d0e <__ieee754_fmod+0x132>
   22d88:	1a40      	subs	r0, r0, r1
   22d8a:	281f      	cmp	r0, #31
   22d8c:	dc0c      	bgt.n	22da8 <__ieee754_fmod+0x1cc>
   22d8e:	fa09 f900 	lsl.w	r9, r9, r0
   22d92:	fa03 f200 	lsl.w	r2, r3, r0
   22d96:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   22d9a:	40c3      	lsrs	r3, r0
   22d9c:	ea43 0309 	orr.w	r3, r3, r9
   22da0:	e786      	b.n	22cb0 <__ieee754_fmod+0xd4>
   22da2:	ec41 0b10 	vmov	d0, r0, r1
   22da6:	e760      	b.n	22c6a <__ieee754_fmod+0x8e>
   22da8:	4a2a      	ldr	r2, [pc, #168]	; (22e54 <__ieee754_fmod+0x278>)
   22daa:	1a52      	subs	r2, r2, r1
   22dac:	4093      	lsls	r3, r2
   22dae:	2200      	movs	r2, #0
   22db0:	e77e      	b.n	22cb0 <__ieee754_fmod+0xd4>
   22db2:	fa0e fe00 	lsl.w	lr, lr, r0
   22db6:	fa07 f500 	lsl.w	r5, r7, r0
   22dba:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   22dbe:	fa27 f000 	lsr.w	r0, r7, r0
   22dc2:	ea40 0c0e 	orr.w	ip, r0, lr
   22dc6:	1b50      	subs	r0, r2, r5
   22dc8:	e77a      	b.n	22cc0 <__ieee754_fmod+0xe4>
   22dca:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   22dce:	2800      	cmp	r0, #0
   22dd0:	4e1e      	ldr	r6, [pc, #120]	; (22e4c <__ieee754_fmod+0x270>)
   22dd2:	f77f af66 	ble.w	22ca2 <__ieee754_fmod+0xc6>
   22dd6:	0040      	lsls	r0, r0, #1
   22dd8:	2800      	cmp	r0, #0
   22dda:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   22dde:	dcfa      	bgt.n	22dd6 <__ieee754_fmod+0x1fa>
   22de0:	e75f      	b.n	22ca2 <__ieee754_fmod+0xc6>
   22de2:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   22de6:	2800      	cmp	r0, #0
   22de8:	4918      	ldr	r1, [pc, #96]	; (22e4c <__ieee754_fmod+0x270>)
   22dea:	f77f af44 	ble.w	22c76 <__ieee754_fmod+0x9a>
   22dee:	0040      	lsls	r0, r0, #1
   22df0:	2800      	cmp	r0, #0
   22df2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   22df6:	dcfa      	bgt.n	22dee <__ieee754_fmod+0x212>
   22df8:	e73d      	b.n	22c76 <__ieee754_fmod+0x9a>
   22dfa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   22dfe:	431c      	orrs	r4, r3
   22e00:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   22e04:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   22e08:	4610      	mov	r0, r2
   22e0a:	ec41 0b10 	vmov	d0, r0, r1
   22e0e:	e72c      	b.n	22c6a <__ieee754_fmod+0x8e>
   22e10:	4b0f      	ldr	r3, [pc, #60]	; (22e50 <__ieee754_fmod+0x274>)
   22e12:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   22e16:	ed94 0b00 	vldr	d0, [r4]
   22e1a:	e726      	b.n	22c6a <__ieee754_fmod+0x8e>
   22e1c:	291f      	cmp	r1, #31
   22e1e:	dc07      	bgt.n	22e30 <__ieee754_fmod+0x254>
   22e20:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   22e24:	fa22 f101 	lsr.w	r1, r2, r1
   22e28:	4083      	lsls	r3, r0
   22e2a:	ea43 0001 	orr.w	r0, r3, r1
   22e2e:	e78e      	b.n	22d4e <__ieee754_fmod+0x172>
   22e30:	4908      	ldr	r1, [pc, #32]	; (22e54 <__ieee754_fmod+0x278>)
   22e32:	1b89      	subs	r1, r1, r6
   22e34:	fa43 f001 	asr.w	r0, r3, r1
   22e38:	e789      	b.n	22d4e <__ieee754_fmod+0x172>
   22e3a:	4903      	ldr	r1, [pc, #12]	; (22e48 <__ieee754_fmod+0x26c>)
   22e3c:	e71b      	b.n	22c76 <__ieee754_fmod+0x9a>
   22e3e:	bf00      	nop
   22e40:	7fefffff 	.word	0x7fefffff
   22e44:	7ff00000 	.word	0x7ff00000
   22e48:	fffffbed 	.word	0xfffffbed
   22e4c:	fffffc02 	.word	0xfffffc02
   22e50:	00025bd8 	.word	0x00025bd8
   22e54:	fffffbe2 	.word	0xfffffbe2

00022e58 <__ieee754_sqrt>:
   22e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e5c:	4a63      	ldr	r2, [pc, #396]	; (22fec <__ieee754_sqrt+0x194>)
   22e5e:	ec55 4b10 	vmov	r4, r5, d0
   22e62:	43aa      	bics	r2, r5
   22e64:	f000 809f 	beq.w	22fa6 <__ieee754_sqrt+0x14e>
   22e68:	2d00      	cmp	r5, #0
   22e6a:	ee10 ca10 	vmov	ip, s0
   22e6e:	462b      	mov	r3, r5
   22e70:	dd54      	ble.n	22f1c <__ieee754_sqrt+0xc4>
   22e72:	1529      	asrs	r1, r5, #20
   22e74:	d063      	beq.n	22f3e <__ieee754_sqrt+0xe6>
   22e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
   22e7a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   22e7e:	07c9      	lsls	r1, r1, #31
   22e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22e84:	d404      	bmi.n	22e90 <__ieee754_sqrt+0x38>
   22e86:	005b      	lsls	r3, r3, #1
   22e88:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   22e8c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22e90:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   22e94:	2600      	movs	r6, #0
   22e96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   22e9a:	107f      	asrs	r7, r7, #1
   22e9c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22ea0:	f04f 0e16 	mov.w	lr, #22
   22ea4:	4634      	mov	r4, r6
   22ea6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22eaa:	18a1      	adds	r1, r4, r2
   22eac:	4299      	cmp	r1, r3
   22eae:	dc02      	bgt.n	22eb6 <__ieee754_sqrt+0x5e>
   22eb0:	1a5b      	subs	r3, r3, r1
   22eb2:	188c      	adds	r4, r1, r2
   22eb4:	4416      	add	r6, r2
   22eb6:	005b      	lsls	r3, r3, #1
   22eb8:	f1be 0e01 	subs.w	lr, lr, #1
   22ebc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   22ec0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22ec4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22ec8:	d1ef      	bne.n	22eaa <__ieee754_sqrt+0x52>
   22eca:	4675      	mov	r5, lr
   22ecc:	2020      	movs	r0, #32
   22ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22ed2:	e00a      	b.n	22eea <__ieee754_sqrt+0x92>
   22ed4:	d044      	beq.n	22f60 <__ieee754_sqrt+0x108>
   22ed6:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   22eda:	3801      	subs	r0, #1
   22edc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   22ee0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   22ee4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22ee8:	d043      	beq.n	22f72 <__ieee754_sqrt+0x11a>
   22eea:	42a3      	cmp	r3, r4
   22eec:	eb02 010e 	add.w	r1, r2, lr
   22ef0:	ddf0      	ble.n	22ed4 <__ieee754_sqrt+0x7c>
   22ef2:	2900      	cmp	r1, #0
   22ef4:	eb01 0e02 	add.w	lr, r1, r2
   22ef8:	db0a      	blt.n	22f10 <__ieee754_sqrt+0xb8>
   22efa:	46a0      	mov	r8, r4
   22efc:	1b1b      	subs	r3, r3, r4
   22efe:	4561      	cmp	r1, ip
   22f00:	bf88      	it	hi
   22f02:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   22f06:	ebac 0c01 	sub.w	ip, ip, r1
   22f0a:	4415      	add	r5, r2
   22f0c:	4644      	mov	r4, r8
   22f0e:	e7e2      	b.n	22ed6 <__ieee754_sqrt+0x7e>
   22f10:	f1be 0f00 	cmp.w	lr, #0
   22f14:	dbf1      	blt.n	22efa <__ieee754_sqrt+0xa2>
   22f16:	f104 0801 	add.w	r8, r4, #1
   22f1a:	e7ef      	b.n	22efc <__ieee754_sqrt+0xa4>
   22f1c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   22f20:	4322      	orrs	r2, r4
   22f22:	d038      	beq.n	22f96 <__ieee754_sqrt+0x13e>
   22f24:	2d00      	cmp	r5, #0
   22f26:	d14e      	bne.n	22fc6 <__ieee754_sqrt+0x16e>
   22f28:	4629      	mov	r1, r5
   22f2a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   22f2e:	3915      	subs	r1, #21
   22f30:	4613      	mov	r3, r2
   22f32:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   22f36:	2a00      	cmp	r2, #0
   22f38:	d0f7      	beq.n	22f2a <__ieee754_sqrt+0xd2>
   22f3a:	02d6      	lsls	r6, r2, #11
   22f3c:	d450      	bmi.n	22fe0 <__ieee754_sqrt+0x188>
   22f3e:	2000      	movs	r0, #0
   22f40:	005b      	lsls	r3, r3, #1
   22f42:	02dd      	lsls	r5, r3, #11
   22f44:	4604      	mov	r4, r0
   22f46:	f100 0001 	add.w	r0, r0, #1
   22f4a:	d5f9      	bpl.n	22f40 <__ieee754_sqrt+0xe8>
   22f4c:	461a      	mov	r2, r3
   22f4e:	4663      	mov	r3, ip
   22f50:	fa0c fc00 	lsl.w	ip, ip, r0
   22f54:	f1c0 0020 	rsb	r0, r0, #32
   22f58:	40c3      	lsrs	r3, r0
   22f5a:	1b09      	subs	r1, r1, r4
   22f5c:	4313      	orrs	r3, r2
   22f5e:	e78a      	b.n	22e76 <__ieee754_sqrt+0x1e>
   22f60:	4561      	cmp	r1, ip
   22f62:	d8b8      	bhi.n	22ed6 <__ieee754_sqrt+0x7e>
   22f64:	2900      	cmp	r1, #0
   22f66:	eb01 0e02 	add.w	lr, r1, r2
   22f6a:	dbd1      	blt.n	22f10 <__ieee754_sqrt+0xb8>
   22f6c:	4698      	mov	r8, r3
   22f6e:	2300      	movs	r3, #0
   22f70:	e7c9      	b.n	22f06 <__ieee754_sqrt+0xae>
   22f72:	ea53 030c 	orrs.w	r3, r3, ip
   22f76:	d110      	bne.n	22f9a <__ieee754_sqrt+0x142>
   22f78:	0868      	lsrs	r0, r5, #1
   22f7a:	1071      	asrs	r1, r6, #1
   22f7c:	07f3      	lsls	r3, r6, #31
   22f7e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   22f82:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   22f86:	bf48      	it	mi
   22f88:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   22f8c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   22f90:	4602      	mov	r2, r0
   22f92:	ec43 2b10 	vmov	d0, r2, r3
   22f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f9a:	1c6a      	adds	r2, r5, #1
   22f9c:	bf16      	itet	ne
   22f9e:	1c68      	addne	r0, r5, #1
   22fa0:	3601      	addeq	r6, #1
   22fa2:	0840      	lsrne	r0, r0, #1
   22fa4:	e7e9      	b.n	22f7a <__ieee754_sqrt+0x122>
   22fa6:	ee10 2a10 	vmov	r2, s0
   22faa:	ee10 0a10 	vmov	r0, s0
   22fae:	462b      	mov	r3, r5
   22fb0:	4629      	mov	r1, r5
   22fb2:	f7fe fd53 	bl	21a5c <__aeabi_dmul>
   22fb6:	4622      	mov	r2, r4
   22fb8:	462b      	mov	r3, r5
   22fba:	f7fe fb99 	bl	216f0 <__adddf3>
   22fbe:	ec41 0b10 	vmov	d0, r0, r1
   22fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22fc6:	ee10 2a10 	vmov	r2, s0
   22fca:	4620      	mov	r0, r4
   22fcc:	4629      	mov	r1, r5
   22fce:	f7fe fb8d 	bl	216ec <__aeabi_dsub>
   22fd2:	4602      	mov	r2, r0
   22fd4:	460b      	mov	r3, r1
   22fd6:	f7fe fe6b 	bl	21cb0 <__aeabi_ddiv>
   22fda:	ec41 0b10 	vmov	d0, r0, r1
   22fde:	e7da      	b.n	22f96 <__ieee754_sqrt+0x13e>
   22fe0:	4663      	mov	r3, ip
   22fe2:	2020      	movs	r0, #32
   22fe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   22fe8:	e7b6      	b.n	22f58 <__ieee754_sqrt+0x100>
   22fea:	bf00      	nop
   22fec:	7ff00000 	.word	0x7ff00000

00022ff0 <__ieee754_log10f>:
   22ff0:	b508      	push	{r3, lr}
   22ff2:	ee10 3a10 	vmov	r3, s0
   22ff6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   22ffa:	ed2d 8b02 	vpush	{d8}
   22ffe:	d02b      	beq.n	23058 <__ieee754_log10f+0x68>
   23000:	2b00      	cmp	r3, #0
   23002:	db32      	blt.n	2306a <__ieee754_log10f+0x7a>
   23004:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   23008:	da41      	bge.n	2308e <__ieee754_log10f+0x9e>
   2300a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2300e:	db35      	blt.n	2307c <__ieee754_log10f+0x8c>
   23010:	2100      	movs	r1, #0
   23012:	15da      	asrs	r2, r3, #23
   23014:	3a7f      	subs	r2, #127	; 0x7f
   23016:	440a      	add	r2, r1
   23018:	0fd1      	lsrs	r1, r2, #31
   2301a:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   2301e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   23022:	f3c3 0316 	ubfx	r3, r3, #0, #23
   23026:	ee07 2a90 	vmov	s15, r2
   2302a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   2302e:	ee00 3a10 	vmov	s0, r3
   23032:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   23036:	f000 f849 	bl	230cc <__ieee754_logf>
   2303a:	eddf 7a17 	vldr	s15, [pc, #92]	; 23098 <__ieee754_log10f+0xa8>
   2303e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2309c <__ieee754_log10f+0xac>
   23042:	ee20 0a27 	vmul.f32	s0, s0, s15
   23046:	eddf 7a16 	vldr	s15, [pc, #88]	; 230a0 <__ieee754_log10f+0xb0>
   2304a:	eea8 0a07 	vfma.f32	s0, s16, s14
   2304e:	eea8 0a27 	vfma.f32	s0, s16, s15
   23052:	ecbd 8b02 	vpop	{d8}
   23056:	bd08      	pop	{r3, pc}
   23058:	ecbd 8b02 	vpop	{d8}
   2305c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 230a4 <__ieee754_log10f+0xb4>
   23060:	eddf 7a11 	vldr	s15, [pc, #68]	; 230a8 <__ieee754_log10f+0xb8>
   23064:	ee87 0a27 	vdiv.f32	s0, s14, s15
   23068:	bd08      	pop	{r3, pc}
   2306a:	ecbd 8b02 	vpop	{d8}
   2306e:	ee70 7a40 	vsub.f32	s15, s0, s0
   23072:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 230a8 <__ieee754_log10f+0xb8>
   23076:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2307a:	bd08      	pop	{r3, pc}
   2307c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 230ac <__ieee754_log10f+0xbc>
   23080:	ee60 7a27 	vmul.f32	s15, s0, s15
   23084:	f06f 0118 	mvn.w	r1, #24
   23088:	ee17 3a90 	vmov	r3, s15
   2308c:	e7c1      	b.n	23012 <__ieee754_log10f+0x22>
   2308e:	ecbd 8b02 	vpop	{d8}
   23092:	ee30 0a00 	vadd.f32	s0, s0, s0
   23096:	bd08      	pop	{r3, pc}
   23098:	3ede5bd9 	.word	0x3ede5bd9
   2309c:	355427db 	.word	0x355427db
   230a0:	3e9a2080 	.word	0x3e9a2080
   230a4:	cc000000 	.word	0xcc000000
   230a8:	00000000 	.word	0x00000000
   230ac:	4c000000 	.word	0x4c000000

000230b0 <nan>:
   230b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 230b8 <nan+0x8>
   230b4:	4770      	bx	lr
   230b6:	bf00      	nop
   230b8:	00000000 	.word	0x00000000
   230bc:	7ff80000 	.word	0x7ff80000

000230c0 <nanf>:
   230c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 230c8 <nanf+0x8>
   230c4:	4770      	bx	lr
   230c6:	bf00      	nop
   230c8:	7fc00000 	.word	0x7fc00000

000230cc <__ieee754_logf>:
   230cc:	ee10 3a10 	vmov	r3, s0
   230d0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   230d4:	d02e      	beq.n	23134 <__ieee754_logf+0x68>
   230d6:	2b00      	cmp	r3, #0
   230d8:	db33      	blt.n	23142 <__ieee754_logf+0x76>
   230da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   230de:	da40      	bge.n	23162 <__ieee754_logf+0x96>
   230e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   230e4:	db34      	blt.n	23150 <__ieee754_logf+0x84>
   230e6:	f04f 0c00 	mov.w	ip, #0
   230ea:	4868      	ldr	r0, [pc, #416]	; (2328c <__ieee754_logf+0x1c0>)
   230ec:	f3c3 0116 	ubfx	r1, r3, #0, #23
   230f0:	4408      	add	r0, r1
   230f2:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   230f6:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   230fa:	430a      	orrs	r2, r1
   230fc:	15db      	asrs	r3, r3, #23
   230fe:	ee00 2a10 	vmov	s0, r2
   23102:	3b7f      	subs	r3, #127	; 0x7f
   23104:	4a62      	ldr	r2, [pc, #392]	; (23290 <__ieee754_logf+0x1c4>)
   23106:	4463      	add	r3, ip
   23108:	f101 0c0f 	add.w	ip, r1, #15
   2310c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   23110:	ea0c 0202 	and.w	r2, ip, r2
   23114:	ee30 0a67 	vsub.f32	s0, s0, s15
   23118:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   2311c:	bb22      	cbnz	r2, 23168 <__ieee754_logf+0x9c>
   2311e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   23122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23126:	d160      	bne.n	231ea <__ieee754_logf+0x11e>
   23128:	2b00      	cmp	r3, #0
   2312a:	f040 8092 	bne.w	23252 <__ieee754_logf+0x186>
   2312e:	ed9f 0a59 	vldr	s0, [pc, #356]	; 23294 <__ieee754_logf+0x1c8>
   23132:	4770      	bx	lr
   23134:	ed9f 7a58 	vldr	s14, [pc, #352]	; 23298 <__ieee754_logf+0x1cc>
   23138:	eddf 7a56 	vldr	s15, [pc, #344]	; 23294 <__ieee754_logf+0x1c8>
   2313c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   23140:	4770      	bx	lr
   23142:	ee70 7a40 	vsub.f32	s15, s0, s0
   23146:	ed9f 7a53 	vldr	s14, [pc, #332]	; 23294 <__ieee754_logf+0x1c8>
   2314a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   2314e:	4770      	bx	lr
   23150:	eddf 7a52 	vldr	s15, [pc, #328]	; 2329c <__ieee754_logf+0x1d0>
   23154:	ee60 7a27 	vmul.f32	s15, s0, s15
   23158:	f06f 0c18 	mvn.w	ip, #24
   2315c:	ee17 3a90 	vmov	r3, s15
   23160:	e7c3      	b.n	230ea <__ieee754_logf+0x1e>
   23162:	ee30 0a00 	vadd.f32	s0, s0, s0
   23166:	4770      	bx	lr
   23168:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   2316c:	ee70 7a27 	vadd.f32	s15, s0, s15
   23170:	ee07 3a10 	vmov	s14, r3
   23174:	ee80 4a27 	vdiv.f32	s8, s0, s15
   23178:	4849      	ldr	r0, [pc, #292]	; (232a0 <__ieee754_logf+0x1d4>)
   2317a:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   2317e:	4408      	add	r0, r1
   23180:	f502 7222 	add.w	r2, r2, #648	; 0x288
   23184:	4302      	orrs	r2, r0
   23186:	2a00      	cmp	r2, #0
   23188:	ed9f 3a46 	vldr	s6, [pc, #280]	; 232a4 <__ieee754_logf+0x1d8>
   2318c:	eddf 4a46 	vldr	s9, [pc, #280]	; 232a8 <__ieee754_logf+0x1dc>
   23190:	eddf 5a46 	vldr	s11, [pc, #280]	; 232ac <__ieee754_logf+0x1e0>
   23194:	eddf 3a46 	vldr	s7, [pc, #280]	; 232b0 <__ieee754_logf+0x1e4>
   23198:	ed9f 5a46 	vldr	s10, [pc, #280]	; 232b4 <__ieee754_logf+0x1e8>
   2319c:	eddf 7a46 	vldr	s15, [pc, #280]	; 232b8 <__ieee754_logf+0x1ec>
   231a0:	eddf 6a46 	vldr	s13, [pc, #280]	; 232bc <__ieee754_logf+0x1f0>
   231a4:	ee24 6a04 	vmul.f32	s12, s8, s8
   231a8:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   231ac:	ee26 7a06 	vmul.f32	s14, s12, s12
   231b0:	eee7 4a03 	vfma.f32	s9, s14, s6
   231b4:	eea7 5a23 	vfma.f32	s10, s14, s7
   231b8:	eee4 5a87 	vfma.f32	s11, s9, s14
   231bc:	eee5 6a07 	vfma.f32	s13, s10, s14
   231c0:	eee5 7a87 	vfma.f32	s15, s11, s14
   231c4:	ee67 7a86 	vmul.f32	s15, s15, s12
   231c8:	eee6 7a87 	vfma.f32	s15, s13, s14
   231cc:	dd2a      	ble.n	23224 <__ieee754_logf+0x158>
   231ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   231d2:	ee20 7a07 	vmul.f32	s14, s0, s14
   231d6:	ee27 7a00 	vmul.f32	s14, s14, s0
   231da:	bb4b      	cbnz	r3, 23230 <__ieee754_logf+0x164>
   231dc:	ee77 7a87 	vadd.f32	s15, s15, s14
   231e0:	eea7 7ac4 	vfms.f32	s14, s15, s8
   231e4:	ee30 0a47 	vsub.f32	s0, s0, s14
   231e8:	4770      	bx	lr
   231ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   231ee:	eddf 6a34 	vldr	s13, [pc, #208]	; 232c0 <__ieee754_logf+0x1f4>
   231f2:	eef0 7a47 	vmov.f32	s15, s14
   231f6:	eee0 7a66 	vfms.f32	s15, s0, s13
   231fa:	ee20 7a00 	vmul.f32	s14, s0, s0
   231fe:	ee27 7a27 	vmul.f32	s14, s14, s15
   23202:	2b00      	cmp	r3, #0
   23204:	d0ee      	beq.n	231e4 <__ieee754_logf+0x118>
   23206:	ee07 3a90 	vmov	s15, r3
   2320a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 232c4 <__ieee754_logf+0x1f8>
   2320e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 232c8 <__ieee754_logf+0x1fc>
   23212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23216:	eea7 7ac6 	vfms.f32	s14, s15, s12
   2321a:	ee37 0a40 	vsub.f32	s0, s14, s0
   2321e:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   23222:	4770      	bx	lr
   23224:	bb13      	cbnz	r3, 2326c <__ieee754_logf+0x1a0>
   23226:	ee70 7a67 	vsub.f32	s15, s0, s15
   2322a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   2322e:	4770      	bx	lr
   23230:	eddf 6a24 	vldr	s13, [pc, #144]	; 232c4 <__ieee754_logf+0x1f8>
   23234:	ed9f 6a24 	vldr	s12, [pc, #144]	; 232c8 <__ieee754_logf+0x1fc>
   23238:	ee77 7a87 	vadd.f32	s15, s15, s14
   2323c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   23240:	eee7 6a84 	vfma.f32	s13, s15, s8
   23244:	ee37 7a66 	vsub.f32	s14, s14, s13
   23248:	ee37 0a40 	vsub.f32	s0, s14, s0
   2324c:	ee92 0a86 	vfnms.f32	s0, s5, s12
   23250:	4770      	bx	lr
   23252:	ee07 3a90 	vmov	s15, r3
   23256:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 232c4 <__ieee754_logf+0x1f8>
   2325a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 232c8 <__ieee754_logf+0x1fc>
   2325e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23262:	ee27 0a80 	vmul.f32	s0, s15, s0
   23266:	eea7 0a87 	vfma.f32	s0, s15, s14
   2326a:	4770      	bx	lr
   2326c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 232c4 <__ieee754_logf+0x1f8>
   23270:	eddf 6a15 	vldr	s13, [pc, #84]	; 232c8 <__ieee754_logf+0x1fc>
   23274:	ee70 7a67 	vsub.f32	s15, s0, s15
   23278:	ee27 7a62 	vnmul.f32	s14, s14, s5
   2327c:	eea7 7a84 	vfma.f32	s14, s15, s8
   23280:	ee37 0a40 	vsub.f32	s0, s14, s0
   23284:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   23288:	4770      	bx	lr
   2328a:	bf00      	nop
   2328c:	004afb20 	.word	0x004afb20
   23290:	007ffff0 	.word	0x007ffff0
   23294:	00000000 	.word	0x00000000
   23298:	cc000000 	.word	0xcc000000
   2329c:	4c000000 	.word	0x4c000000
   232a0:	ffcf5c30 	.word	0xffcf5c30
   232a4:	3e178897 	.word	0x3e178897
   232a8:	3e3a3325 	.word	0x3e3a3325
   232ac:	3e924925 	.word	0x3e924925
   232b0:	3e1cd04f 	.word	0x3e1cd04f
   232b4:	3e638e29 	.word	0x3e638e29
   232b8:	3f2aaaab 	.word	0x3f2aaaab
   232bc:	3ecccccd 	.word	0x3ecccccd
   232c0:	3eaaaaab 	.word	0x3eaaaaab
   232c4:	3717f7d1 	.word	0x3717f7d1
   232c8:	3f317180 	.word	0x3f317180

000232cc <__errno>:
   232cc:	4b01      	ldr	r3, [pc, #4]	; (232d4 <__errno+0x8>)
   232ce:	6818      	ldr	r0, [r3, #0]
   232d0:	4770      	bx	lr
   232d2:	bf00      	nop
   232d4:	20001700 	.word	0x20001700
   232d8:	7475227b 	.word	0x7475227b
   232dc:	22656d69 	.word	0x22656d69
   232e0:	6c25203a 	.word	0x6c25203a
   232e4:	65222c75 	.word	0x65222c75
   232e8:	726f7272 	.word	0x726f7272
   232ec:	22203a22 	.word	0x22203a22
   232f0:	63726320 	.word	0x63726320
   232f4:	73696d20 	.word	0x73696d20
   232f8:	6374616d 	.word	0x6374616d
   232fc:	656c2068 	.word	0x656c2068
   23300:	64253d6e 	.word	0x64253d6e
   23304:	6973202c 	.word	0x6973202c
   23308:	666f657a 	.word	0x666f657a
   2330c:	73657428 	.word	0x73657428
   23310:	3d202974 	.word	0x3d202974
   23314:	22642520 	.word	0x22642520
   23318:	00000a7d 	.word	0x00000a7d
   2331c:	7475227b 	.word	0x7475227b
   23320:	22656d69 	.word	0x22656d69
   23324:	6c25203a 	.word	0x6c25203a
   23328:	65222c75 	.word	0x65222c75
   2332c:	726f7272 	.word	0x726f7272
   23330:	22203a22 	.word	0x22203a22
   23334:	78646920 	.word	0x78646920
   23338:	73696d20 	.word	0x73696d20
   2333c:	6374616d 	.word	0x6374616d
   23340:	67282068 	.word	0x67282068
   23344:	2520746f 	.word	0x2520746f
   23348:	3d212064 	.word	0x3d212064
   2334c:	70786520 	.word	0x70786520
   23350:	65746365 	.word	0x65746365
   23354:	64252064 	.word	0x64252064
   23358:	6d282029 	.word	0x6d282029
   2335c:	65737369 	.word	0x65737369
   23360:	6c253a64 	.word	0x6c253a64
   23364:	6f202c64 	.word	0x6f202c64
   23368:	6c253a6b 	.word	0x6c253a6b
   2336c:	0a7d2264 	.word	0x0a7d2264
   23370:	00000000 	.word	0x00000000
   23374:	73707061 	.word	0x73707061
   23378:	7274732f 	.word	0x7274732f
   2337c:	696d6165 	.word	0x696d6165
   23380:	732f676e 	.word	0x732f676e
   23384:	6d2f6372 	.word	0x6d2f6372
   23388:	2e6e6961 	.word	0x2e6e6961
   2338c:	00000063 	.word	0x00000063
   23390:	7475227b 	.word	0x7475227b
   23394:	22656d69 	.word	0x22656d69
   23398:	6c25203a 	.word	0x6c25203a
   2339c:	65222c75 	.word	0x65222c75
   233a0:	22636578 	.word	0x22636578
   233a4:	2522203a 	.word	0x2522203a
   233a8:	0a7d2273 	.word	0x0a7d2273
   233ac:	00000000 	.word	0x00000000
   233b0:	6564227b 	.word	0x6564227b
   233b4:	65636976 	.word	0x65636976
   233b8:	2264695f 	.word	0x2264695f
   233bc:	6c25223d 	.word	0x6c25223d
   233c0:	00002258 	.word	0x00002258
   233c4:	6170222c 	.word	0x6170222c
   233c8:	3d64696e 	.word	0x3d64696e
   233cc:	22582522 	.word	0x22582522
   233d0:	00000000 	.word	0x00000000
   233d4:	6461222c 	.word	0x6461222c
   233d8:	3d227264 	.word	0x3d227264
   233dc:	22582522 	.word	0x22582522
   233e0:	00000000 	.word	0x00000000
   233e4:	6170222c 	.word	0x6170222c
   233e8:	695f7472 	.word	0x695f7472
   233ec:	223d2264 	.word	0x223d2264
   233f0:	22586c25 	.word	0x22586c25
   233f4:	00000000 	.word	0x00000000
   233f8:	6f6c222c 	.word	0x6f6c222c
   233fc:	64695f74 	.word	0x64695f74
   23400:	25223d22 	.word	0x25223d22
   23404:	7d22586c 	.word	0x7d22586c
   23408:	0000000a 	.word	0x0000000a
   2340c:	7475227b 	.word	0x7475227b
   23410:	22656d69 	.word	0x22656d69
   23414:	6c25203a 	.word	0x6c25203a
   23418:	6d222c75 	.word	0x6d222c75
   2341c:	3a226773 	.word	0x3a226773
   23420:	72662220 	.word	0x72662220
   23424:	5f656d61 	.word	0x5f656d61
   23428:	61727564 	.word	0x61727564
   2342c:	6e6f6974 	.word	0x6e6f6974
   23430:	25203d20 	.word	0x25203d20
   23434:	73752064 	.word	0x73752064
   23438:	7d226365 	.word	0x7d226365
   2343c:	0000000a 	.word	0x0000000a
   23440:	7475227b 	.word	0x7475227b
   23444:	22656d69 	.word	0x22656d69
   23448:	6c25203a 	.word	0x6c25203a
   2344c:	6d222c75 	.word	0x6d222c75
   23450:	3a226773 	.word	0x3a226773
   23454:	48532220 	.word	0x48532220
   23458:	75645f52 	.word	0x75645f52
   2345c:	69746172 	.word	0x69746172
   23460:	3d206e6f 	.word	0x3d206e6f
   23464:	20642520 	.word	0x20642520
   23468:	63657375 	.word	0x63657375
   2346c:	000a7d22 	.word	0x000a7d22
   23470:	5f425755 	.word	0x5f425755
   23474:	4e415254 	.word	0x4e415254
   23478:	524f5053 	.word	0x524f5053
   2347c:	4f525f54 	.word	0x4f525f54
   23480:	3d20454c 	.word	0x3d20454c
   23484:	0a642520 	.word	0x0a642520
   23488:	00000000 	.word	0x00000000
   2348c:	30317764 	.word	0x30317764
   23490:	255f3030 	.word	0x255f3030
   23494:	00000064 	.word	0x00000064
   23498:	30337764 	.word	0x30337764
   2349c:	255f3030 	.word	0x255f3030
   234a0:	00000064 	.word	0x00000064
   234a4:	5f627775 	.word	0x5f627775
   234a8:	00717269 	.word	0x00717269
   234ac:	6e207325 	.word	0x6e207325
   234b0:	6920746f 	.word	0x6920746f
   234b4:	656c706d 	.word	0x656c706d
   234b8:	746e656d 	.word	0x746e656d
   234bc:	000a6465 	.word	0x000a6465
   234c0:	7475227b 	.word	0x7475227b
   234c4:	22656d69 	.word	0x22656d69
   234c8:	6c25203a 	.word	0x6c25203a
   234cc:	6d222c75 	.word	0x6d222c75
   234d0:	3a226773 	.word	0x3a226773
   234d4:	77642220 	.word	0x77642220
   234d8:	30303031 	.word	0x30303031
   234dc:	7665645f 	.word	0x7665645f
   234e0:	696e695f 	.word	0x696e695f
   234e4:	0a7d2274 	.word	0x0a7d2274
   234e8:	00000000 	.word	0x00000000

000234ec <__func__.0>:
   234ec:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   234fc:	616f6470 00000000                       pdoa....

00023504 <dw1000_uwb_funcs>:
   23504:	00009797 0000978f 00009787 00009ca3     ................
   23514:	00009d21 0000a021 0000a073 00009fd1     !...!...s.......
   23524:	0000977f 00009775 0000976b 00009755     ....u...k...U...
   23534:	0000974d 00009745 0000973d 00009735     M...E...=...5...
   23544:	0000972d 00009725 0000971d 000095a5     -...%...........
   23554:	00009715 0000970d 00009705 000096fd     ................
   23564:	000096f5 000096ed 000096e5 000096dd     ................
   23574:	0000959b 000096d5 000096cd 000096c1     ................
   23584:	000096b5 000096a9 000096a1 00009699     ................
   23594:	00009691 00009689 00009b39 00009b1f     ........9.......
   235a4:	00009b05 00009661 00009659 00009651     ....a...Y...Q...
   235b4:	00009649 00009641 00009639 00009631     I...A...9...1...
   235c4:	00009611 00000000 000095ad 000095f1     ................
   235d4:	000095f9 00009601 00009609 0063616d     ............mac.
   235e4:	625f7874 73657479 00000000 625f7872     tx_bytes....rx_b
   235f4:	73657479 00000000 5f524644 00746e63     ytes....DFR_cnt.
   23604:	5f4f5452 00746e63 5f564f52 00727265     RTO_cnt.ROV_err.
   23614:	5f474654 00746e63 5f45444c 00727265     TFG_cnt.LDE_err.
   23624:	655f5852 00007272 55425854 72655f46     RX_err..TXBUF_er
   23634:	00000072 5f4c4c50 655f4c4c 00007272     r...PLL_LL_err..

00023644 <agc_config>:
   23644:	2502a907 889b8870                       ...%p...

0002364c <chan_idx>:
   2364c:	02010000 05000403                       ........

00023654 <digital_bb_config>:
   23654:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   23664:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

00023674 <dtune1>:
   23674:	008d0087                                ....

00023678 <dwnsSFDlen>:
   23678:	00081040                                @...

0002367c <fs_pll_cfg>:
   2367c:	09000407 08400508 08401009 08400508     ......@...@...@.
   2368c:	0800041d 0800041d                       ........

00023694 <fs_pll_tune>:
   23694:	2656261e 0000bebe                       .&V&....

0002369c <g_stats_map_mac_stat_section>:
   2369c:	35e40014 00180002 000235f0 35fc001c     ...5.....5.....5
   236ac:	00200002 00023604 360c0024 00280002     .. ..6..$..6..(.
   236bc:	00023614 361c002c 00300002 00023624     .6..,..6..0.$6..
   236cc:	362c0034 00380002 00023638              4.,6..8.86..

000236d8 <lde_replicaCoeff>:
   236d8:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   236e8:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   236f8:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   23708:	00003850                                P8..

0002370c <rx_config>:
   2370c:	0000bcd8                                ....

00023710 <sftsh>:
   23710:	0016000a 00060001 00020001              ............

0002371c <tx_config>:
   2371c:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   2372c:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   2373c:	203a5d30 0a786c25 00000000 43534d50     0]: %lx.....PMSC
   2374c:	5b44495f 203a5d31 0a786c25 00000000     _ID[1]: %lx.....

0002375c <nrf52_hal_spis>:
   2375c:	20001d74 00000000 00000000 00000000     t.. ............
   2376c:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   2377c:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   2378c:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   2379c:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   237ac:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   237bc:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   237cc:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   237dc:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   237ec:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   237fc:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   2380c:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   2381c:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   2382c:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   2383c:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   2384c:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   2385c:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   2386c:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   2387c:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   2388c:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   2389c:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   238ac:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   238bc:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   238cc:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   238dc:	656c6469 00000000 6e69616d 00000000     idle....main....
   238ec:	7379736d 0000315f 616d6474 00000000     msys_1..tdma....
   238fc:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   2390c:	3a226773 64742220 705f616d 695f676b     sg": "tdma_pkg_i
   2391c:	2274696e 00000a7d 7475227b 22656d69     nit"}...{"utime"
   2392c:	6c25203a 6d222c75 3a226773 64742220     : %lu,"msg": "td
   2393c:	705f616d 645f676b 226e776f 00000a7d     ma_pkg_down"}...
   2394c:	746f6c73 6d69745f 635f7265 0000746e     slot_timer_cnt..
   2395c:	65707573 61726672 635f656d 0000746e     superframe_cnt..
   2396c:	65707573 61726672 6d5f656d 00737369     superframe_miss.
   2397c:	706f7264 5f646570 746f6c73 00000073     dropped_slots...

0002398c <g_stats_map_tdma_stat_section>:
   2398c:	394c0014 00180002 0002395c 396c001c     ..L9....\9....l9
   2399c:	00200002 0002397c 00706363 7475227b     .. .|9..ccp.{"ut
   239ac:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   239bc:	77752220 63635f62 6b705f70 6e695f67      "uwb_ccp_pkg_in
   239cc:	7d227469 0000000a 7473616d 635f7265     it"}....master_c
   239dc:	0000746e 76616c73 6e635f65 00000074     nt..slave_cnt...
   239ec:	646e6573 00000000 635f7874 6c706d6f     send....tx_compl
   239fc:	00657465 635f7872 6c706d6f 00657465     ete.rx_complete.
   23a0c:	725f7872 79616c65 00006465 735f7872     rx_relayed..rx_s
   23a1c:	74726174 7272655f 0000726f 755f7872     tart_error..rx_u
   23a2c:	6c6f736e 74696369 00006465 6f5f7872     nsolicited..rx_o
   23a3c:	72656874 6172665f 0000656d 78727874     ther_frame..txrx
   23a4c:	7272655f 0000726f 735f7874 74726174     _error..tx_start
   23a5c:	7272655f 0000726f 725f7874 79616c65     _error..tx_relay
   23a6c:	7272655f 0000726f 725f7874 79616c65     _error..tx_relay
   23a7c:	006b6f5f 5f717269 6574616c 0079636e     _ok.irq_latency.
   23a8c:	6c5f736f 625f7461 6e696865 00000064     os_lat_behind...
   23a9c:	6c5f736f 6d5f7461 69677261 0000006e     os_lat_margin...
   23aac:	745f7872 6f656d69 00007475 5f6d6573     rx_timeout..sem_
   23abc:	656d6974 0074756f 65736572 00000074     timeout.reset...

00023acc <g_stats_map_uwb_ccp_stat_section>:
   23acc:	39d40014 00180002 000239e0 39ec001c     ...9.....9.....9
   23adc:	00200002 000254d8 39f40024 00280002     .. ..T..$..9..(.
   23aec:	00023a00 3a0c002c 00300002 00023a18     .:..,..:..0..:..
   23afc:	3a280034 00380002 00023a38 3a48003c     4.(:..8.8:..<.H:
   23b0c:	00400002 00023a54 3a640044 00480002     ..@.T:..D.d:..H.
   23b1c:	00023a74 3a80004c 00500002 00023a8c     t:..L..:..P..:..
   23b2c:	3a9c0054 00580002 00023aac 3ab8005c     T..:..X..:..\..:
   23b3c:	00600002 00023ac4 5f627775 6e617274     ..`..:..uwb_tran
   23b4c:	726f7073 626d5f74 705f6675 006c6f6f     sport_mbuf_pool.
   23b5c:	74627775 00642570 5f627775 6e617274     uwbtp%d.uwb_tran
   23b6c:	726f7073 45203a74 524f5252 20642520     sport: ERROR %d 
   23b7c:	544d203e 7a252055 00000064 706f7264     > MTU %zd...drop
   23b8c:	20646570 64253a6e 253a7220 00000a64     ped n:%d r:%d...
   23b9c:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   23bac:	3a226773 77752220 72745f62 70736e61     sg": "uwb_transp
   23bbc:	5f74726f 5f676b70 74696e69 000a7d22     ort_pkg_init"}..
   23bcc:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   23bdc:	3a226773 77752220 63775f62 6b705f73     sg": "uwb_wcs_pk
   23bec:	6e695f67 7d227469 0000000a              g_init"}....

00023bf8 <MemFile_methods>:
   23bf8:	00011d0f 00000000                       ........

00023c00 <stdout>:
   23c00:	200013b4 0000002f 00646c25 646c6c25     ... /...%ld.%lld
   23c10:	00000000 6c65643c 0000003e 3d207325     ....<del>...%s =
   23c20:	0a732520 00000000 656e6f44 0000000a      %s.....Done....
   23c30:	6c696146 74206465 6f63206f 74696d6d     Failed to commit
   23c40:	0000000a 6d6d6f63 00007469 00007325     ....commit..%s..
   23c50:	706d7564 00000000 6e6e7572 00676e69     dump....running.
   23c60:	65766173 00000000 6e6e6143 6420746f     save....Cannot d
   23c70:	6c707369 76207961 65756c61 0000000a     isplay value....
   23c80:	6c696146 74206465 6573206f 65202c74     Failed to set, e
   23c90:	203a7272 000a6425 61766e49 2064696c     rr: %d..Invalid 
   23ca0:	73677261 0000000a 666e6f63 00006769     args....config..
   23cb0:	006c6176                                val.

00023cb4 <conf_nmgr_handlers>:
   23cb4:	00012b79 00012ac1 75255b1b 00000044     y+...*...[%uD...
   23cc4:	75255b1b 00000043 6c363025 00002075     .[%uC...%06lu ..
   23cd4:	706c6568 0000000a 30332d25 00000073     help....%-30s...
   23ce4:	30332d25 0a732573 00000000 65726e55     %-30s%s.....Unre
   23cf4:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   23d04:	0000000a 65726e55 6e676f63 64657a69     ....Unrecognized
   23d14:	6d6f6320 646e616d 7325203a 0000000a      command: %s....
   23d24:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   23d34:	00000a73 656c6c49 206c6167 61726170     s...Illegal para
   23d44:	6574656d 00000a72 706c6568 00000000     meter...help....
   23d54:	656c6573 00007463 7373694d 20676e69     select..Missing 
   23d64:	61726170 6574656d 00000a72 206f6e28     parameter...(no 
   23d74:	706c6568 61766120 62616c69 0a29656c     help available).
   23d84:	00000000 6d6d7553 3a797261 0000000a     ....Summary:....
   23d94:	67617355 000a3a65 61726150 6574656d     Usage:..Paramete
   23da4:	0a3a7372 00000000 69617641 6c62616c     rs:.....Availabl
   23db4:	6f6d2065 656c7564 000a3a73 73206f54     e modules:..To s
   23dc4:	63656c65 20612074 75646f6d 202c656c     elect a module, 
   23dd4:	65746e65 73272072 63656c65 6d3c2074     enter 'select <m
   23de4:	6c75646f 616e2065 273e656d 00000a2e     odule name>'....
   23df4:	0000203e 73257325 00000000 206f6f54     > ..%s%s....Too 
   23e04:	796e616d 72617020 74656d61 20737265     many parameters 
   23e14:	78616d28 757a2520 00000a29 65707954     (max %zu)...Type
   23e24:	65682720 2027706c 20726f66 7473696c      'help' for list
   23e34:	20666f20 69617661 6c62616c 6f632065      of available co
   23e44:	6e616d6d 000a7364 2078614d 626d756e     mmands..Max numb
   23e54:	6f207265 6f6d2066 656c7564 65722073     er of modules re
   23e64:	65686361 00000a64 2078614d 626d756e     ached...Max numb
   23e74:	6f207265 6f632066 7461706d 6d6f6320     er of compat com
   23e84:	646e616d 65722073 65686361 00000a64     mands reached...
   23e94:	706d6f63 00007461 656c6c49 206c6167     compat..Illegal 
   23ea4:	75646f6d 2520656c 64202c73 75616665     module %s, defau
   23eb4:	6920746c 6f6e2073 68632074 65676e61     lt is not change
   23ec4:	00000a64 6c656873 0000006c              d...shell...

00023ed0 <shell_cmd_help>:
   23ed0:	00000001 00013bd5 00023d4c 00000000     .....;..L=......

00023ee0 <shell_cmd_select_module>:
   23ee0:	00000001 00013999 00023d54 00000000     .....9..T=......
   23ef0:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   23f00:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   23f10:	0000007a 73323325 73352520 73342520     z...%32s %5s %4s
   23f20:	73342520 73342520 0000000a 006e696d      %4s %4s....min.
   23f30:	65657266 00000000 73323325 64352520     free....%32s %5d
   23f40:	64342520 64342520 64342520 0000000a      %4d %4d %4d....
   23f50:	6c756f43 74276e64 6e696620 20612064     Couldn't find a 
   23f60:	6f6d656d 70207972 206c6f6f 68746977     memory pool with
   23f70:	6d616e20 73252065 0000000a 61766e49      name %s....Inva
   23f80:	2064696c 65746164 656d6974 0000000a     lid datetime....
   23f90:	00676c66 00666572 20733425 20733325     flg.ref.%4s %3s 
   23fa0:	000a7325 6b736154 0a203a73 00000000     %s..Tasks: .....
   23fb0:	00697270 6b736174 00000000 20733825     pri.task....%8s 
   23fc0:	20733325 20733325 20733825 20733825     %3s %3s %8s %8s 
   23fd0:	20733825 20733825 20733825 20733825     %8s %8s %8s %8s 
   23fe0:	0a733325 00000000 6568636e 00006b63     %3s.....ncheck..
   23ff0:	6568636c 00006b63 756b7473 00006573     lcheck..stkuse..
   24000:	736b7473 0000007a 00777363 746e7572     stksz...csw.runt
   24010:	00656d69 00646974 20733825 20753325     ime.tid.%8s %3u 
   24020:	20753325 756c3825 6c382520 38252075     %3u %8lu %8lu %8
   24030:	38252075 38252075 2520756c 0a756c38     u %8u %8lu %8lu.
   24040:	00000000 6c756f43 74276e64 6e696620     ....Couldn't fin
   24050:	61742064 77206b73 20687469 656d616e     d task with name
   24060:	0a732520 00000000 6564736c 00000076      %s.....lsdev...
   24070:	7473696c 20534f20 69766564 00736563     list OS devices.
   24080:	65736572 79732074 6d657473 00000000     reset system....
   24090:	776f6873 73797320 206d6574 65746164     show system date
   240a0:	00000000 65746164 656d6974 206f7420     ....datetime to 
   240b0:	00746573 776f6873 73797320 206d6574     set.show system 
   240c0:	6f6f706d 0000006c 6f6f706d 616e206c     mpool...mpool na
   240d0:	0000656d 776f6873 20736f20 6b736174     me..show os task
   240e0:	00000073 6b736174 6d616e20 00000065     s...task name...

000240f0 <date_help>:
   240f0:	00024090 00000000 000240fc              .@.......@..

000240fc <date_params>:
   240fc:	00024fa8 000240a4 00000000 00000000     .O...@..........

0002410c <ls_dev_help>:
   2410c:	00024070 00000000 00000000              p@..........

00024118 <mpool_help>:
   24118:	000240b4 00000000 00024124              .@......$A..

00024124 <mpool_params>:
   24124:	00024fa8 000240c8 00000000 00000000     .O...@..........

00024134 <os_commands>:
   24134:	00000001 0001497d 000240dc 000241a8     ....}I...@...A..
   24144:	00000001 000147fd 000240c0 00024118     .....G...@...A..
   24154:	00000001 000148ad 0002409c 000240f0     .....H...@...@..
   24164:	00000001 00014931 00023ac4 00024194     ....1I...:...A..
   24174:	00000001 00014945 00024068 0002410c     ....EI..h@...A..
	...

00024194 <reset_help>:
   24194:	00024080 00000000 000241a0              .@.......A..

000241a0 <reset_params>:
	...

000241a8 <tasks_help>:
   241a8:	000240d4 00000000 000241b4              .@.......A..

000241b4 <tasks_params>:
   241b4:	00024fa8 000240e4 00000000 00000000     .O...@..........
   241c4:	00006e6f 6e6f4320 656c6f73 63695420     on.. Console Tic
   241d4:	6f20736b 00000a6e 0066666f 6e6f4320     ks on...off. Con
   241e4:	656c6f73 63695420 6f20736b 000a6666     sole Ticks off..
   241f4:	61735520 203a6567 6b636974 6f5b2073      Usage: ticks [o
   24204:	666f7c6e 000a5d66 6d6f7270 00007470     n|off]..prompt..
   24214:	6b636974 00000073 6c656873 6974206c     ticks...shell ti
   24224:	20736b63 6d6d6f63 00646e61 67617375     cks command.usag
   24234:	74203a65 736b6369 6e6f5b20 66666f7c     e: ticks [on|off
   24244:	0000005d 6e727574 006e6f20              ]...turn on.

00024250 <prompt_commands>:
   24250:	00000000 00014aa5 00024214 00024270     .....J...B..pB..
	...

00024270 <ticks_help>:
   24270:	0002421c 00024230 0002427c              .B..0B..|B..

0002427c <ticks_params>:
   2427c:	000241c4 00024248 000241dc 00024248     .A..HB...A..HB..
	...
   24294:	00642573 74617473 00000000 5f6d756e     s%d.stat....num_
   242a4:	69676572 72657473 00006465              registered..

000242b0 <g_stats_map_stats>:
   242b0:	42a00014 00000002 00006372 74617473     ...B....rc..stat
   242c0:	73696c5f 00000074 756f7267 00000070     _list...group...
   242d0:	00737973 6c656966 00007364 203a7325     sys.fields..%s: 
   242e0:	000a7525 203a7325 0a756c25 00000000     %u..%s: %lu.....
   242f0:	203a7325 756c6c25 0000000a 6e6b6e55     %s: %llu....Unkn
   24300:	206e776f 74617473 7a697320 6f662065     own stat size fo
   24310:	73252072 0a752520 00000000 0a732509     r %s %u......%s.
   24320:	00000000 7473754d 65707320 79666963     ....Must specify
   24330:	73206120 69746174 63697473 6d616e20      a statistic nam
   24340:	6f742065 6d756420 70202c70 6973736f     e to dump, possi
   24350:	20656c62 656d616e 72612073 000a3a65     ble names are:..
   24360:	6c756f43 6f6e2064 69662074 7320646e     Could not find s
   24370:	69746174 63697473 6f726720 25207075     tatistic group %
   24380:	00000a73 252f7325 00000073 00386d36     s...%s/%s...6m8.
   24390:	6b303538 00000000 6b303131 00000000     850k....110k....
   243a0:	20766e69 61657270 6c5f626d 000a6e65     inv preamb_len..
   243b0:	63627775 00006766 00627775 00667270     uwbcfg..uwb.prf.
   243c0:	61746164 65746172 00000000 705f7872     datarate....rx_p
   243d0:	656c6361 0000006e 705f7872 6d616572     aclen...rx_pream
   243e0:	6469635f 00000078 735f7872 79746466     _cidx...rx_sfdty
   243f0:	00006570 735f7872 745f6466 0000006f     pe..rx_sfd_to...
   24400:	705f7872 6f6d7268 00006564 645f7872     rx_phrmode..rx_d
   24410:	5f676169 00006e65 705f7874 6d616572     iag_en..tx_pream
   24420:	6469635f 00000078 705f7874 6d616572     _cidx...tx_pream
   24430:	6e656c5f 00000000 66727874 776f705f     _len....txrf_pow
   24440:	635f7265 7372616f 00000065 66727874     er_coarse...txrf
   24450:	776f705f 665f7265 00656e69 615f7872     _power_fine.rx_a
   24460:	6c64746e 00000079 615f7874 6c64746e     ntdly...tx_antdl
   24470:	00000079 615f7872 735f746e 72617065     y...rx_ant_separ
   24480:	6f697461 0000006e 5f747865 646b6c63     ation...ext_clkd
   24490:	0000796c 656c6f72 00000000 6d617266     ly..role....fram
   244a0:	69665f65 7265746c 00000000 6c617478     e_filter....xtal
   244b0:	6972745f 0000006d 20766e69 61657270     _trim...inv prea
   244c0:	6f63206d 28206564 6e697375 64252067     m code (using %d
   244d0:	00000a29 20766e69 20667270 000a6425     )...inv prf %d..
   244e0:	20766e69 000a6863 20766e69 61746164     inv ch..inv data
   244f0:	65746172 0000000a 20766e69 6c636170     rate....inv pacl
   24500:	000a6e65 20766e69 54646673 0a657079     en..inv sfdType.
   24510:	00000000 20766e69 72616f63 74206573     ....inv coarse t
   24520:	72777078 0000000a 64343025 3230252d     xpwr....%04d-%02
   24530:	30252d64 25546432 3a643230 64323025     d-%02dT%02d:%02d
   24540:	3230253a 30252e64 00006436 30256325     :%02d.%06d..%c%0
   24550:	253a6432 00643230                       2d:%02d.

00024558 <month_days>:
   24558:	0000001f 0000001c 0000001f 0000001e     ................
   24568:	0000001f 0000001e 0000001f 0000001f     ................
   24578:	0000001e 0000001f 0000001e 0000001f     ................

00024588 <crc16tab>:
   24588:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   24598:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   245a8:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   245b8:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   245c8:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   245d8:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   245e8:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   245f8:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   24608:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   24618:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   24628:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   24638:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   24648:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   24658:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   24668:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   24678:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   24688:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   24698:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   246a8:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   246b8:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   246c8:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   246d8:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   246e8:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   246f8:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   24708:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   24718:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   24728:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   24738:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   24748:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   24758:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   24768:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   24778:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00024788 <crc8_small_table>:
   24788:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00024798 <streamer_cfg_console>:
   24798:	00016077 0001606b                       w`..k`..

000247a0 <sysdown_cbs>:
   247a0:	000179cd 00010669 00011231 0000f379     .y..i...1...y...
   247b0:	0001bc41 0001c5d5 000154b1 00000000     A........T......
   247c0:	696c7073 74732f74 73757461 00000000     split/status....
   247d0:	74617473 00007375 696c7073 00000074     status..split...

000247e0 <base64_chars>:
   247e0:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   247f0:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   24800:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   24810:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   24820:	00000000 30317764 305f3030 00000000     ....dw1000_0....

00024830 <dw1000_0_cfg>:
   24830:	20006cd0 00001f40 000007d0 11131800     .l. @...........
   24840:	40424042 00000000 6d726554 6c616e69     B@B@....Terminal
   24850:	00000000 00545452 47474553 00005245     ....RTT.SEGGER..
   24860:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   24870:	3a226773 77642220 30303031 676b705f     sg": "dw1000_pkg
   24880:	696e695f 0a7d2274 00000000 7475227b     _init"}.....{"ut
   24890:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   248a0:	77642220 30303031 676b705f 776f645f      "dw1000_pkg_dow
   248b0:	0a7d226e 00000000 30317764 315f3030     n"}.....dw1000_1
   248c0:	00000000 30317764 325f3030 00000000     ....dw1000_2....
   248d0:	44202020 7461443d 41202c61 6b63413d        D=Data, A=Ack
   248e0:	3d4d202c 0a63614d 00000000 53202020     , M=Mac.....   S
   248f0:	3a726365 63655320 74697275 6e652079     ecr: Security en
   24900:	656c6261 66202c64 3a646e50 61724620     abled, fPnd: Fra
   24910:	7020656d 69646e65 202c676e 724b4341     me pending, ACKr
   24920:	6341203a 6572206b 73657571 2c646574     : Ack requested,
   24930:	4e415020 50203a63 44494e41 6d6f4320      PANc: PANID Com
   24940:	73657270 00000a73 44202020 203a7473     press...   Dst: 
   24950:	6e3d6f4e 6564206f 61207473 65726464     No=no dest addre
   24960:	52202c73 65523d73 76726573 202c6465     s, Rs=Reserved, 
   24970:	622d3631 61207469 65726464 202c7373     16-bit address, 
   24980:	622d3436 61207469 65726464 000a7373     64-bit address..
   24990:	46202020 656d6172 72657620 6e6f6973        Frame version
   249a0:	2d49203a 45454549 32303820 2e35312e     : I-IEEE 802.15.
   249b0:	49202c34 33303032 4545492d 30382045     4, I2003-IEEE 80
   249c0:	35312e32 322d342e 2c333030 76466920     2.15.4-2003, iFv
   249d0:	766e492d 64696c61 61724620 5620656d     -Invalid Frame V
   249e0:	69737265 000a6e6f 53202020 203a6372     ersion..   Src: 
   249f0:	6e3d6f4e 7273206f 64612063 73657264     No=no src addres
   24a00:	7352202c 7365523d 65767265 31202c64     , Rs=Reserved, 1
   24a10:	69622d36 64612074 73657264 36202c73     6-bit address, 6
   24a20:	69622d34 64612074 73657264 00000a73     4-bit address...
   24a30:	206f6f54 20776566 73677261 0000000a     Too few args....
   24a40:	00007c44 00007c41 00007c4d 00007c52     D|..A|..M|..R|..
   24a50:	72636553 0000007c 646e5066 0000007c     Secr|...fPnd|...
   24a60:	724b4341 0000007c 634e4150 0000007c     ACKr|...PANc|...
   24a70:	4e747344 00007c6f 52747344 00007c73     DstNo|..DstRs|..
   24a80:	31747344 00007c36 36747344 00007c34     Dst16|..Dst64|..
   24a90:	30303249 00007c33 00007c49 7c764669     I2003|..I|..iFv|
   24aa0:	00000000 4e637253 0000006f 52637253     ....SrcNo...SrcR
   24ab0:	00000073 31637253 00000036 36637253     s...Src16...Src6
   24ac0:	00000034 77507854 54705572 7272456d     4...TxPwrUpTmErr
   24ad0:	0000007c 72507852 626d6165 7c6a6552     |...RxPreambRej|
   24ae0:	00000000 65527852 6f536465 726f436c     ....RxReedSolCor
   24af0:	00007c72 78524349 50667542 313d7274     r|..ICRxBufPtr=1
   24b00:	0000007c 74736f48 75427852 72745066     |...HostRxBufPtr
   24b10:	007c313d 46747541 656d6172 746c6946     =1|.AutFrameFilt
   24b20:	7c6a6552 00000000 6e617254 74696d73     Rej|....Transmit
   24b30:	66667542 72457265 7c726f72 00000000     BufferError|....
   24b40:	666c6148 69726550 6544646f 5779616c     HalfPeriodDelayW
   24b50:	7c6e7261 00000000 46535852 6d695444     arn|....RXSFDTim
   24b60:	74756f65 0000007c 636f6c43 4c4c506b     eout|...ClockPLL
   24b70:	69736f4c 6f4c676e 007c6b63 4c504652     LosingLock|.RFPL
   24b80:	736f4c4c 4c676e69 7c6b636f 00000000     LLosingLock|....
   24b90:	45454c53 4e493250 007c5449 6f697047     SLEEP2INIT|.Gpio
   24ba0:	7c746e49 00000000 72507852 446d6165     Int|....RxPreamD
   24bb0:	69547465 756f656d 00007c74 764f7852     etTimeout|..RxOv
   24bc0:	7c727245 00000000 74696228 72203931     Err|....(bit19 r
   24bd0:	72657365 29646576 0000007c 444c7852     eserved)|...RxLD
   24be0:	72726545 0000007c 69547852 756f656d     Eerr|...RxTimeou
   24bf0:	00007c74 65527852 6f536465 6f6d6f6c     t|..RxReedSolomo
   24c00:	6172466e 7953656d 6f4c636e 007c7373     nFrameSyncLoss|.
   24c10:	43467852 72724553 0000007c 43467852     RxFCSErr|...RxFC
   24c20:	6f6f4753 00007c64 61447852 72466174     SGood|..RxDataFr
   24c30:	7964526d 0000007c 48507852 72724559     mRdy|...RxPHYErr
   24c40:	0000007c 48507852 74654459 0000007c     |...RxPHYDet|...
   24c50:	444c7852 6e6f6445 00007c65 46537852     RxLDEdone|..RxSF
   24c60:	7c746544 00000000 72507852 446d6165     Det|....RxPreamD
   24c70:	007c7465 72467854 53656d61 7c746e65     et|.TxFrameSent|
   24c80:	00000000 48507854 6e6f4459 00007c65     ....TxPHYDone|..
   24c90:	72507854 446d6165 7c656e6f 00000000     TxPreamDone|....
   24ca0:	74537854 7c747261 00000000 6f747541     TxStart|....Auto
   24cb0:	7c6b6341 00000000 43747845 6b636f6c     Ack|....ExtClock
   24cc0:	73655220 007c7465 636f6c43 4c50206b      Reset|.Clock PL
   24cd0:	6f4c204c 007c6b63 00535249 30312520     L Lock|.IRS. %10
   24ce0:	0020756c 6c382520 00002075 6c362520     lu . %8lu .. %6l
   24cf0:	00002075 73322520 00000020 32302520     u .. %2s ... %02
   24d00:	30252058 28205832 25297325 0000732a     X %02X (%s)%*s..
   24d10:	32302520 30252058 00205832 20202020      %02X %02X .    
   24d20:	00202020 32332520 00002073 2a302520        . %32s .. %0*
   24d30:	20586c6c 00000000 00732520 6572227b     llX .... %s.{"re
   24d40:	30255b67 225d5832 7830223d 6c383025     g[%02X]"="0x%08l
   24d50:	7d22586c 0000000a 6572227b 30255b67     lX"}....{"reg[%0
   24d60:	225d5832 7830223d 30313025 22586c6c     2X]"="0x%010llX"
   24d70:	00000a7d 6572227b 30255b67 225d5832     }...{"reg[%02X]"
   24d80:	7830223d 36313025 22586c6c 00000a7d     ="0x%016llX"}...
   24d90:	6e69227b 3e2d7473 5f717269 226d6573     {"inst->irq_sem"
   24da0:	7d64253d 0000000a 6e69227b 3e2d7473     =%d}....{"inst->
   24db0:	735f7874 3d226d65 0a7d6425 00000000     tx_sem"=%d}.....
   24dc0:	6e72227b 733e2d67 3d226d65 0a7d6425     {"rng->sem"=%d}.
   24dd0:	00000000 6363227b 733e2d70 3d226d65     ....{"ccp->sem"=
   24de0:	0a7d6425 00000000 706d7544 61747320     %d}.....Dump sta
   24df0:	6e697472 74612067 36302520 0a3a586c     rting at %06lX:.
   24e00:	00000000 58343025 3025203a 25205832     ....%04X: %02X %
   24e10:	20583230 58323025 32302520 30252058     02X %02X %02X %0
   24e20:	25205832 20583230 58323025 32302520     2X %02X %02X %02
   24e30:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   24e40:	32302520 30252058 25205832 20583230      %02X %02X %02X 
   24e50:	58323025 32302520 00000a58 00736261     %02X %02X...abs.
   24e60:	30312520 00002073 63657375 00000000      %10s ..usec....
   24e70:	66666964 00000000 73382520 00000020     diff.... %8s ...
   24e80:	00727564 73362520 00000020 00007269     dur. %6s ...ir..
   24e90:	73322520 00000000 72746366 0000006c      %2s....fctrl...
   24ea0:	73352520 00000000 74636628 74326c72      %5s....(fctrl2t
   24eb0:	25297478 20733132 00000000 732a2520     xt)%21s .... %*s
   24ec0:	00000020 73202020 75746174 78743273      ...   status2tx
   24ed0:	00000a74 0000002d 2d2d2d2d 6366200a     t...-...----. fc
   24ee0:	326c7274 3a747874 00000a20 00006164     trl2txt: ...da..
   24ef0:	00007763 69766544 255b6563 6e205d64     cw..Device[%d] n
   24f00:	6920776f 5743206e 646f6d20 6e6f2065     ow in CW mode on
   24f10:	20686320 202e6425 65736552 6f742074      ch %d. Reset to
   24f20:	6e6f6320 756e6974 00000a65 00007277      continue...wr..
   24f30:	00006472 30257830 2c586c36 30257830     rd..0x%06lX,0x%0
   24f40:	203a5834 6c257830 000a586c 00746269     4X: 0x%llX..ibt.
   24f50:	74617473 74327375 00007478 30313025     status2txt..%010
   24f60:	3a586c6c 0a732520 00000000 72746366     llX: %s.....fctr
   24f70:	7874326c 00000074 79622032 20736574     l2txt...2 bytes 
   24f80:	6465656e 000a6465 58323025 32302520     needed..%02X %02
   24f90:	25203a58 00000a73 2d2d2d2d 656c200a     X: %s...----. le
   24fa0:	6e656764 0a203a64 00000000 6e6b6e55     dgend: .....Unkn
   24fb0:	206e776f 0a646d63 00000000 30317764     own cmd.....dw10
   24fc0:	00003030 30317764 64203030 00006762     00..dw1000 dbg..
   24fd0:	30317764 64203030 67756265 00000000     dw1000 debug....
   24fe0:	736e695b 64205d74 20706d75 206c6c61     [inst] dump all 
   24ff0:	69676572 72657473 00000073 736e693c     registers...<ins
   25000:	74203e74 57432078 206e6f20 72727563     t> tx CW on curr
   25010:	20746e65 6e616863 006c656e 736e693c     ent channel.<ins
   25020:	3c203e74 72646461 6c5b203e 74676e65     t> <addr> [lengt
   25030:	202c5d68 706d7564 65726120 00000061     h], dump area...
   25040:	736e693c 3c203e74 72646461 733c203e     <inst> <addr> <s
   25050:	64616275 203e7264 6e656c3c 3e687467     ubaddr> <length>
   25060:	6572202c 72206461 73696765 00726574     , read register.
   25070:	736e693c 3c203e74 72646461 733c203e     <inst> <addr> <s
   25080:	64616275 203e7264 6c61763c 203e6575     ubaddr> <value> 
   25090:	6e656c3c 3e687467 7277202c 20657469     <length>, write 
   250a0:	756c6176 6f742065 67657220 65747369     value to registe
   250b0:	00000072 736e695b 636e6174 765b2065     r...[instance [v
   250c0:	6f627265 6e2d6573 5d5d6d75 746e6920     erbose-num]] int
   250d0:	75727265 62207470 746b6361 65636172     errupt backtrace
   250e0:	00000000 7379733c 6174735f 3e737574     ....<sys_status>
   250f0:	206f7420 74786574 00000000 7463663c      to text....<fct
   25100:	203e6c72 74206f74 00747865              rl> to text.

0002510c <cmd_dw1000_help>:
   2510c:	00024fc4 00024fd0 00025118              .O...O...Q..

00025118 <cmd_dw1000_param>:
   25118:	00023c50 00024fe0 00024ef0 00024ffc     P<...O...N...O..
   25128:	00024eec 0002501c 00024f30 00025040     .N...P..0O..@P..
   25138:	00024f2c 00025070 00024f4c 000250b4     ,O..pP..LO...P..
   25148:	00024f50 000250e4 00024f6c 000250fc     PO...P..lO...P..
	...

00025160 <nrf52k_flash_dev>:
   25160:	00025178 00000000 00080000 00000080     xQ..............
   25170:	00000001 000000ff                       ........

00025178 <nrf52k_flash_funcs>:
   25178:	00018b19 00018a51 000189dd 00018a31     ....Q.......1...
   25188:	00000000 00018a2d 00000000              ....-.......

00025194 <nrf52_hal_timers>:
   25194:	20006d8c 00000000 00000000 00000000     .m. ............
	...

000251ac <os_bsp_spi0m_cfg>:
   251ac:	00121410 676e726e 00000000 7475227b     ....nrng....{"ut
   251bc:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   251cc:	726e2220 705f676e 695f676b 2274696e      "nrng_pkg_init"
   251dc:	00000a7d 676e726e 7165725f 74736575     }...nrng_request
   251ec:	00000000 676e726e 73696c5f 006e6574     ....nrng_listen.
   251fc:	655f7872 726f7272 00000000 706d6f63     rx_error....comp
   2520c:	6574656c 00000000 72617473 78725f74     lete....start_rx
   2521c:	7272655f 0000726f 655f7874 726f7272     _error..tx_error
   2522c:	00000000 72617473 78745f74 7272655f     ....start_tx_err
   2523c:	0000726f                                or..

00025240 <g_stats_map_nrng_stat_section>:
   25240:	51e00014 00180002 000251f0 3a00001c     ...Q.....Q.....:
   25250:	00280002 000251fc 3aac0020 00240002     ..(..Q.. ..:..$.
   25260:	00025208 5214002c 00300002 00023a28     .R..,..R..0.(:..
   25270:	52240034 00380002 00025230 3ac4003c     4.$R..8.0R..<..:
   25280:	                                         ..

00025282 <__func__.7324>:
   25282:	656d6974 6c616373 6e695f65               timescale_init.

00025291 <__func__.7336>:
   25291:	656d6974 6c616373 72665f65 69006565     timescale_free.i
   252a1:	2d74736e 656b653e 736e6900 682f0074     nst->eke.inst./h
   252b1:	2f656d6f 6c6b696e 642f7361 742f7665     ome/niklas/dev/t
   252c1:	73656d69 656c6163 726f632d 696c2f65     imescale-core/li
   252d1:	69742f62 6373656d 2e656c61               b/timescale.c.

000252df <__func__.7283>:
   252df:	666b7273 6c62645f 69616d5f               srkf_dbl_main.

000252ed <__func__.7299>:
   252ed:	666b7273 6c62645f 696e695f               srkf_dbl_init.

000252fb <__func__.7311>:
   252fb:	666b7273 6c62645f 6572665f 6e690065     srkf_dbl_free.in
   2530b:	21207473 4c554e3d 6e69004c 3e2d7473     st !=NULL.inst->
   2531b:	3d3d206e 69006e20 2d74736e 6900783e     n == n.inst->x.i
   2532b:	2d74736e 6900793e 2d74736e 69007a3e     nst->y.inst->z.i
   2533b:	2d74736e 6900653e 2d74736e 6900483e     nst->e.inst->H.i
   2534b:	2d74736e 6900503e 2d74736e 0050553e     nst->P.inst->UP.
   2535b:	74736e69 50443e2d 736e6900 513e2d74     inst->DP.inst->Q
   2536b:	736e6900 553e2d74 6e690051 3e2d7473     .inst->UQ.inst->
   2537b:	69005144 2d74736e 6900523e 2d74736e     DQ.inst->R.inst-
   2538b:	0052553e 74736e69 52443e2d 736e6900     >UR.inst->DR.ins
   2539b:	533e2d74 736e6900 5f3e2d74 6e690053     t->S.inst->_S.in
   253ab:	3e2d7473 6e690041 3e2d7473 6e69004b     st->A.inst->K.in
   253bb:	21207473 554e203d 2f004c4c 656d6f68     st != NULL./home
   253cb:	6b696e2f 2f73616c 2f766564 656d6974     /niklas/dev/time
   253db:	6c616373 6f632d65 6c2f6572 732f6269     scale-core/lib/s
   253eb:	5f666b72 2e6c6264 6e690063 3e2d7473     rkf_dbl.c.inst->
   253fb:	78666f41 203d2120 4c4c554e 736e6900     Aofx != NULL.ins
   2540b:	483e2d74 2078666f 4e203d21 004c4c55     t->Hofx != NULL.
   2541b:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   2542b:	2267736d 7322203a 726e5f73 705f676e     msg": "ss_nrng_p
   2543b:	695f676b 2274696e 00000a7d 72777400     kg_init"}....twr
   2544b:	5f73735f 676e726e                        _ss_nrng.

00025454 <g_stats_map_twr_ss_nrng_stat_section>:
   25454:	51fc0014 00180002 00023aac 3a00001c     ...Q.....:.....:
   25464:	00200002 00023a28 3ac40024 00000002     .. .(:..$..:....
   25474:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   25484:	3a226773 75732220 66726570 656d6172     sg": "superframe
   25494:	7365725f 7d227465 0000000a 7475227b     _reset"}....{"ut
   254a4:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   254b4:	6e722220 6b705f67 6e695f67 7d227469      "rng_pkg_init"}
   254c4:	0000000a 5f676e72 75716572 00747365     ....rng_request.
   254d4:	5f676e72 7473696c 00006e65 706d6f63     rng_listen..comp
   254e4:	6574656c 0062635f 65707573 61726672     lete_cb.superfra
   254f4:	725f656d 74657365 00000000              me_reset....

00025500 <g_stats_map_rng_stat_section>:
   25500:	54c80014 00180002 000254d4 39f4001c     ...T.....T.....9
   25510:	00200002 00023a00 3a280024 00280002     .. ..:..$.(:..(.
   25520:	00023a38 51fc002c 00300002 00025224     8:..,..Q..0.$R..
   25530:	3aac0034 00380002 000254e0 3ac4003c     4..:..8..T..<..:
   25540:	00400002 000254ec 7272652c 203a726f     ..@..T..,error: 
   25550:	6b6e5522 6e776f6e 61724620 4320656d     "Unknown Frame C
   25560:	2265646f 7825202c 0000000a 6d697475     ode", %x....utim
   25570:	00000065 00716573 00646975 6469756f     e...seq.uid.ouid
   25580:	00000000 007a6172 7a617262 00000000     ....raz.braz....
   25590:	69737372 00000000 00736f6c 006d7070     rssi....los.ppm.
   255a0:	00737473 00000000 7475227b 22656d69     sts.....{"utime"
   255b0:	6c25203a 6d222c75 3a226773 63772220     : %lu,"msg": "wc
   255c0:	69745f73 6373656d 5f656c61 5f676b70     s_timescale_pkg_
   255d0:	74696e69 000a7d22 a4f8e0b5 3e20e374     init"}......t. >
   255e0:	6e5b0122 3deb0587 f1e2674e 3db59e05     ".[n...=Ng.....=
   255f0:	a4f8e0b5 3e30e374 b7320335 4654adf4     ....t.0>5.2...TF
   25600:	61746164 00000000 006e656c 00616873     data....len.sha.
   25610:	72677075 00656461                       upgrade.

00025618 <imgr_nmgr_handlers>:
   25618:	0001d29d 0001d459 00000000 0001ce09     ....Y...........
	...
   25644:	0001cbd1 00000000 0001cb65 74737075     ........e...upst
   25654:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   25664:	00000000 666e6f63 00000000 67616d69     ....conf....imag
   25674:	00007365 746f6c73 00000000 73726576     es..slot....vers
   25684:	006e6f69 68736168 00000000 746f6f62     ion.hash....boot
   25694:	656c6261 00000000 646e6570 00676e69     able....pending.
   256a4:	666e6f63 656d7269 00000064 69746361     confirmed...acti
   256b4:	00006576 6d726570 6e656e61 00000074     ve..permanent...
   256c4:	696c7073 61745374 00737574 666e6f63     splitStatus.conf
   256d4:	006d7269 252e7525 75252e75 756c252e     irm.%u.%u.%u.%lu
   256e4:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....
   256f4:	65746164 656d6974 00000000 6f686365     datetime....echo
   25704:	00000000 6f6f706d 0000736c 736b6c62     ....mpools..blks
   25714:	00007a69 6b6c626e 00000073 6572666e     iz..nblks...nfre
   25724:	00000065 6f697270 00000000 74617473     e...prio....stat
   25734:	00000065 736b7473 00007a69 63777363     e...stksiz..cswc
   25744:	0000746e 7473616c 6568635f 6e696b63     nt..last_checkin
   25754:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   25764:	00000000                                ....

00025768 <nmgr_def_group_handlers>:
   25768:	0001da95 0001da95 0001da39 0001da39     ........9...9...
   25778:	0001dc95 00000000 0001db8d 00000000     ................
   25788:	0001db0d 0001d9d9 00000000 0001d97d     ............}...
   25798:	41464544 00544c55 0000534f 5457454e     DEFAULT.OS..NEWT
   257a8:	0052474d 424d494e 435f454c 00524c54     MGR.NIMBLE_CTLR.
   257b8:	424d494e 485f454c 0054534f 5346464e     NIMBLE_HOST.NFFS
   257c8:	00000000 4f424552 0000544f 49544f49     ....REBOOT..IOTI
   257d8:	59544956 00000000 54534554 00000000     VITY....TEST....
   257e8:	3d73745b 756c6c25 202c7375 3d646f6d     [ts=%lluus, mod=
   257f8:	6c207525 6c657665 5d75253d 00000020     %u level=%u] ...
   25808:	736e6f63 00656c6f                       console.

00025810 <log_console_handler>:
   25810:	00000000 0001ea69 00000000 0001eac1     ....i...........
   25820:	0001ea95 00000000 00000000 0001ea6d     ............m...
   25830:	0001ea71 00000000 5f676f6c 7473696c     q.......log_list
   25840:	00000000 75646f6d 6d5f656c 00007061     ....module_map..
   25850:	55424544 00000047 4f525245 00000052     DEBUG...ERROR...
   25860:	4f464e49 00000000 4e524157 00000000     INFO....WARN....
   25870:	4e4b4e55 004e574f 54495243 4c414349     UNKNOWN.CRITICAL
   25880:	00000000 6576656c 616d5f6c 00000070     ....level_map...
   25890:	5f676f6c 75646f6d 0000656c 6576656c     log_module..leve
   258a0:	0000006c 72746e65 00736569 65707974     l...entries.type
   258b0:	00000000 5f676f6c 656d616e 00000000     ....log_name....
   258c0:	00007374 65646e69 00000078 7478656e     ts..index...next
   258d0:	646e695f 00007865 73676f6c 00000000     _index..logs....
   258e0:	0067736d 6f727265 65203a72 7972746e     msg.error: entry
   258f0:	6f6f7420 72616c20 28206567 62206425      too large (%d b
   25900:	73657479 00000029 6c646f6d 6d5f676f     ytes)...modlog_m
   25910:	69707061 705f676e 006c6f6f 6c696166     apping_pool.fail
   25920:	74206465 6572206f 4d206461 3a73524d     ed to read MMRs:
   25930:	3d637220 00006425 6f626572 722f746f      rc=%d..reboot/r
   25940:	6f6f6265 6e635f74 00000074 6f626572     eboot_cnt...rebo
   25950:	772f746f 74746972 00006e65 6f626572     ot/written..rebo
   25960:	635f746f 0000746e 74697277 006e6574     ot_cnt..written.
   25970:	44524148 00000000 55514552 45545345     HARD....REQUESTE
   25980:	00000044 45534552 49505f54 0000004e     D...RESET_PIN...
   25990:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   259a0:	574f5242 54554f4e 00000000 54535953     BROWNOUT....SYST
   259b0:	4f5f4d45 495f4646 0000544e 3a6e7372     EM_OFF_INT..rsn:
   259c0:	202c7325 3a746e63 202c7525 3a676d69     %s, cnt:%u, img:
   259d0:	252e7525 75252e75 2c75252e 73616820     %u.%u.%u.%u, has
   259e0:	00003a68 78323025 00000000 6964202c     h:..%02x...., di
   259f0:	73253a65 0064253a 6370202c 2578303a     e:%s:%d., pc:0x%
   25a00:	0000786c 00000031 6f626572 0000746f     lx..1...reboot..

00025a10 <sysflash_map_dflt>:
	...
   25a18:	00004000 00000001 00008000 0003a000     .@..............
   25a28:	00000002 00042000 0003a000 00000003     ..... ..........
   25a38:	0007c000 00001000 00000010 00004000     .............@..
   25a48:	00004000 00000011 0007d000 00003000     .@...........0..

00025a58 <boot_img_magic>:
   25a58:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00025a68 <boot_swap_tables>:
   25a68:	03040104 01040204 03040104 04030301     ................
   25a78:	00000401                                ....

00025a7c <K>:
   25a7c:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   25a8c:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   25a9c:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   25aac:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   25abc:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   25acc:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   25adc:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   25aec:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   25afc:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   25b0c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   25b1c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   25b2c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   25b3c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   25b4c:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   25b5c:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   25b6c:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   25b7c:	0000002c 0000007b 00000022 00203a22     ,...{..."...": .
   25b8c:	736c6166 00000065 65757274 00000000     false...true....
   25b9c:	756c6c25 00000000 696c6c25 00000000     %llu....%lli....
   25bac:	6c6c756e 00000000 00006625 0000005c     null....%f..\...
   25bbc:	0000745c 0000725c 00006e5c 0000665c     \t..\r..\n..\f..
   25bcc:	0000625c 0000005b 0000007d              \b..[...}...

00025bd8 <Zero>:
	...
   25be4:	80000000                                ....

/home/joel/Capstone/uwb-apps/bin/targets/rx_stream/app/apps/streaming/streaming.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 121824	   5632	  24580	 152036	  251e4	/home/joel/Capstone/uwb-apps/bin/targets/rx_stream/app/apps/streaming/streaming.elf
