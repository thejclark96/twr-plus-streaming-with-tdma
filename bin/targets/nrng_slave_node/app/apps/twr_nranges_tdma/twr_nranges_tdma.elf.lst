
/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00027c88 vaddr 0x00027c88 paddr 0x00027c88 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00027ca0 memsz 0x00027ca0 flags rwx
    LOAD off    0x00030530 vaddr 0x20000530 paddr 0x00027ca0 align 2**16
         filesz 0x00000ea0 memsz 0x00004d7c flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000530 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001fc68  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00027c88  00027c88  000313d0  2**0  CONTENTS
  3 .ARM.exidx         00000018  00027c88  00027c88  00027c88  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000458  200000d8  200000d8  00040000  2**2  ALLOC
  6 .data              00000ea0  20000530  00027ca0  00030530  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  200013d0  200013d0  000313d0  2**0  CONTENTS
  8 .bss               00003edc  200013d0  00028b40  000313d0  2**3  ALLOC
  9 .stack_dummy       000001b0  200052b0  200052b0  000313d0  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  00031580  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  000315b0  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00031662  2**0  CONTENTS, READONLY
 13 .debug_line        00045da4  00000000  00000000  00031666  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000c404c  00000000  00000000  0007740a  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      0001c202  00000000  00000000  0013b456  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00004118  00000000  00000000  00157658  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         0001af11  00000000  00000000  0015b770  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         0004debf  00000000  00000000  00176681  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00005290  00000000  00000000  001c4540  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       0000b320  00000000  00000000  001c97d0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001d4af0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00027c88 l    d  .ARM.extab	00000000 .ARM.extab
00027c88 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
20000530 l    d  .data	00000000 .data
200013d0 l    d  .bssnz	00000000 .bssnz
200013d0 l    d  .bss	00000000 .bss
200052b0 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000530 l     O .data	00000004 sbrkBase
20000534 l     O .data	00000004 sbrkLimit
20000538 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003a errata_16
00008282 l     F .text	0000004a errata_31
000082cc l     F .text	0000003a errata_32
00008306 l     F .text	0000004a errata_36
00008350 l     F .text	0000003a errata_37
0000838a l     F .text	0000003a errata_57
000083c4 l     F .text	0000003a errata_66
000083fe l     F .text	0000004a errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00008698 l     F .text	0000005c pan_complete_cb
000086f4 l     F .text	00000178 slot_cb
00008870 l     F .text	00000028 tof_comp_cb
00008898 l     F .text	00000024 complete_cb
000088bc l     F .text	0000005c nrng_complete_cb
200013d0 l     O .bss	00000010 nrng_complete_event
200013e0 l     O .bss	00000001 uwb_config_updated
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008c64 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 hal_gpio.c
00008f28 l     F .text	00000050 hal_gpio_irq_handler
00008f78 l     F .text	0000002c hal_gpio_irq_setup
00008fa4 l     F .text	0000001c hal_gpio_find_empty_slot
00008fc0 l     F .text	00000038 hal_gpio_find_pin
200013e4 l     O .bss	00000040 hal_gpio_irqs
20001424 l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00009320 l     F .text	00000016 os_main
20001580 l     O .bss	00001000 g_os_main_stack
20001478 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
000096c4 l     F .text	0000005c os_dev_add
00009720 l     F .text	00000022 os_dev_initialize
00009742 l     F .text	00000030 os_dev_init
200025dc l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
200025e4 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
000099ac l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00009af8 l     F .text	00000010 os_msys_find_biggest_pool
00009b08 l     F .text	0000002c os_msys_find_pool
00009b80 l     F .text	00000044 os_msys_init_once
200025fc l     O .bss	00000db0 os_msys_1_data
200033ac l     O .bss	0000000c os_msys_1_mbuf_pool
200033b8 l     O .bss	0000001c os_msys_1_mempool
20000548 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00009c64 l     F .text	00000020 os_sanity_check_list_lock
00009c84 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0000a1a0 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000a35c l     F .text	00000054 os_deltatime
0000a3b0 l     F .text	00000020 os_time_change_notify
0000a3d0 l     F .text	0000005c os_time_tick
0000a4f4 l     F .text	00000048 os_time_populate_info
200033f8 l     O .bss	00000030 basetod
20000560 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000ae48 l       .text	00000000 SVC_User
0000ae66 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 nmgr_uwb.c
0000aef0 l     F .text	00000010 uwb_transport
0000af00 l     F .text	00000016 rx_timeout_cb
0000af16 l     F .text	00000016 tx_complete_cb
0000af2c l     F .text	00000164 rx_complete_cb
0000b0a8 l     F .text	0000000a nmgr_uwb_mtu_0
0000b358 l     F .text	0000008e nmgr_resp_cb
20003430 l     O .bss	00000001 last_rpt_seq_num.0
20003432 l     O .bss	00000002 last_rpt_src.1
20003434 l     O .bss	00000020 uwb_transport_0
20000568 l     O .data	0000003c g_cbs
00000000 l    df *ABS*	00000000 nrng.c
0000b3e6 l     F .text	00000036 complete_ev_cb
0000b41c l     F .text	00000040 complete_cb
200005a4 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 nrng_encode.c
00000000 l    df *ABS*	00000000 nrng_json.c
0000bd88 l     F .text	0000004c nrng_write_line
00000000 l    df *ABS*	00000000 pan_utils.c
00000000 l    df *ABS*	00000000 panmaster.c
0000c00c l     F .text	00000018 pm_conf_export
0000c024 l     F .text	00000050 first_free_short_addr
0000c074 l     F .text	00000024 short_addr_is_free
0000c098 l     F .text	0000004c slot_lease_expired
0000c0e4 l     F .text	00000074 first_free_slot_id
0000c158 l     F .text	00000058 find_first_empty_nodes_to_save
0000c1b0 l     F .text	0000001c pm_conf_commit
0000c1cc l     F .text	00000034 pm_conf_set
0000c200 l     F .text	00000028 pm_conf_get
0000c228 l     F .text	000000a4 panm_init_fcb
20003464 l     O .bss	00000018 _log
20003480 l     O .bss	00000600 node_idx
20003a80 l     O .bss	000000f8 nodes_to_save
20003b78 l     O .bss	00000002 pan_id
20003b7c l     O .bss	000000cc pm_fcb_area
20003c48 l     O .bss	0000000c save_mutex
200005b4 l     O .data	00000018 pm_conf_cbs
200005cc l     O .data	00000008 pm_config
200005d4 l     O .data	00000030 pm_init_conf_fcb
00000000 l    df *ABS*	00000000 panmaster_cli.c
0000ca60 l     F .text	0000001c dump
0000ca7c l     F .text	0000006c dump_cb
0000cae8 l     F .text	00000258 list_nodes_blk
0000cfc4 l     F .text	00000052 list_nodes_load_cb
0000cd40 l     F .text	00000284 panmaster_cli_cmd
20000604 l     O .data	00000010 shell_panmaster_cmd
00000000 l    df *ABS*	00000000 panmaster_fcb.c
0000d028 l     F .text	00000080 node_idx_load_cb
0000d0a8 l     F .text	00000040 fcb_load_cb
0000d0e8 l     F .text	00000074 find_node_load_cb
0000d15c l     F .text	00000046 sort_nodes_load_cb
0000d2e2 l     F .text	00000058 panm_fcb_append
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 survey.c
0000d500 l     F .text	0000002e survey_complete_cb
0000d52e l     F .text	00000030 reset_cb
0000d55e l     F .text	00000030 rx_timeout_cb
0000d58e l     F .text	00000024 tx_complete_cb
0000d5b2 l     F .text	00000104 rx_complete_cb
20003c54 l     O .bss	00000010 survey_complete_event
00000000 l    df *ABS*	00000000 survey_encode.c
00000000 l    df *ABS*	00000000 tdma.c
0000de88 l     F .text	000000e8 tdma_superframe_slot_cb
0000df70 l     F .text	00000034 slot_timer_cb
0000dfa4 l     F .text	0000002c superframe_cb
0000dfd0 l     F .text	00000040 tdma_task
0000e010 l     F .text	0000006c tdma_tasks_init
0000e07c l     F .text	00000032 sanity_feeding_cb
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000e460 l     F .text	00000068 adjust_for_epoch_to_rm
0000e4c8 l     F .text	0000002e reset_cb
0000e4f6 l     F .text	00000054 error_cb
0000e54a l     F .text	0000004a rx_timeout_cb
0000e594 l     F .text	0000001e ccp_timer_irq
0000e5b8 l     F .text	000001b4 tx_complete_cb
0000e76c l     F .text	0000000e ccp_task
0000e77c l     F .text	0000004c ccp_tasks_init
0000e7c8 l     F .text	0000007c ccp_timer_init
0000edb8 l     F .text	000000b8 ccp_master_timer_ev_cb
0000e980 l     F .text	000001b8 ccp_slave_timer_ev_cb
0000e848 l     F .text	00000138 ccp_listen
0000eb38 l     F .text	00000280 ccp_send
0000f250 l     F .text	00000498 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_pan.c
0000f754 l     F .text	00000082 handle_pan_request
0000f7d8 l     F .text	00000028 tx_complete_cb
0000f800 l     F .text	00000020 pan_postprocess
0000f820 l     F .text	00000064 lease_expiry_cb
0000f884 l     F .text	00000034 reset_cb
0000f8b8 l     F .text	00000034 rx_timeout_cb
0000f8ec l     F .text	00000270 rx_complete_cb
20003c64 l     O .bss	00000001 _pan_cycles.0
20000614 l     O .data	0000003c g_cbs
20000650 l     O .data	00000010 g_config
20000660 l     O .data	00000032 g_pan_0
00000000 l    df *ABS*	00000000 slots.c
00000000 l    df *ABS*	00000000 uwb_wcs.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 malloc.c
0001049c l     F .text	00000004 malloc_lock_nop
000104a0 l     F .text	00000002 malloc_unlock_nop
000104a2 l     F .text	00000048 __malloc_from_block
000104ec l     F .text	00000064 __free_block
20000694 l     O .data	00000018 __malloc_head
200006ac l     O .data	00000004 malloc_lock
200006b0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00010650 l       .text	00000000 test1
00010644 l       .text	00000000 loop1
00010656 l       .text	00000000 res1
00010672 l       .text	00000000 test2
0001067a l       .text	00000000 done
00010666 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00010686 l       .text	00000000 test1
00010682 l       .text	00000000 loop1
00010694 l       .text	00000000 test2
00010690 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mynewt.c
000106dc l     F .text	00000004 stdin_read
000106e0 l     F .text	00000010 stdout_write
200006b4 l     O .data	00000004 _stdin
200006b8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00010742 l     F .text	000000ce ui2a
00010810 l     F .text	0000001c i2a
0001082c l     F .text	00000030 a2d
0001085c l     F .text	0000003c a2i
00010898 l     F .text	00000024 putf
000108bc l     F .text	00000124 putchw
000109e0 l     F .text	00000068 intarg
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 imgmgr.c
00011098 l     F .text	00000040 imgr_vercmp
000110d8 l     F .text	0000003e imgr_img_tlvs
00011118 l     F .text	00000050 imgr_upload_good_rsp
00011264 l     F .text	00000036 imgr_upload_log
00011338 l     F .text	0000006c imgr_erase_state
000113a4 l     F .text	0000006c imgr_erase
00011410 l     F .text	00000190 imgr_upload_inspect
000115dc l     F .text	000001fc imgr_upload
20003cb4 l     O .bss	00000030 imgr_state
20003ce4 l     O .bss	00000004 imgr_upload_arg
20003ce8 l     O .bss	00000004 imgr_upload_cb
200006c0 l     O .data	0000000c imgr_nmgr_group
00025d2c l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_cli.c
00011840 l     F .text	00000010 imgr_cli_too_few_args
00011850 l     F .text	00000044 imgr_cli_flags_str
00011894 l     F .text	00000050 imgr_cli_show_slot
000118e4 l     F .text	00000018 imgr_cli_confirm
000118fc l     F .text	0000003e imgr_cli_hash_parse
0001193c l     F .text	0000005c imgr_cli_slot_or_hash_parse
00011998 l     F .text	00000030 imgr_cli_set_pending
000119c8 l     F .text	0000004c imgr_cli_erase
00011a14 l     F .text	00000098 imgr_cli_cmd
20003cec l     O .bss	00000008 buf.0
200006cc l     O .data	00000010 shell_imgr_cmd
00025ee0 l     O .text	0000000c imgr_cli_help
00000000 l    df *ABS*	00000000 imgmgr_log.c
00011abc l     F .text	00000004 imgmgr_log_gen
00000000 l    df *ABS*	00000000 imgmgr_state.c
00011bc6 l     F .text	00000026 imgmgr_state_any_pending
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
00011f98 l     F .text	0000001c mgmt_group_list_lock
00011fcc l     F .text	00000030 mgmt_find_group
20003cf4 l     O .bss	0000000c mgmt_group_lock
200006dc l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
00012068 l     F .text	00000024 nmgr_rsp_frag_alloc
0001208c l     F .text	00000064 nmgr_init_rsp
000120f0 l     F .text	00000034 nmgr_rsp_tx
00012124 l     F .text	0000006c nmgr_send_err_rsp
00012190 l     F .text	00000188 nmgr_handle_req
00012318 l     F .text	0000001a nmgr_process
00012332 l     F .text	0000000a nmgr_event_data_in
0001233c l     F .text	0000000e nmgr_cbuf_init
20003d04 l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
000123e4 l     F .text	00000050 nmgr_reset
00012434 l     F .text	0000000a nmgr_reset_tmo
00012440 l     F .text	00000060 nmgr_datetime_set
000124a0 l     F .text	0000005c nmgr_def_console_echo
000124fc l     F .text	00000078 nmgr_def_echo
00012574 l     F .text	00000080 nmgr_datetime_get
000125f4 l     F .text	00000108 nmgr_def_mpstat_read
000126fc l     F .text	000001a0 nmgr_def_taskstat_read
20003d64 l     O .bss	00000020 nmgr_reset_callout
200006e4 l     O .data	0000000c nmgr_def_group
00026014 l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00000000 l    df *ABS*	00000000 config.c
00012d8e l     F .text	00000008 conf_ev_fn_load
20003d88 l     O .bss	0000000c conf_mtx
200006f8 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
00013094 l     F .text	0000001c conf_running_one
000130b0 l     F .text	0000002c conf_dump_running
000130dc l     F .text	000000d4 shell_conf_command
20000708 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_store.c
000131c0 l     F .text	0000003c conf_dup_check_cb
000131fc l     F .text	0000001c conf_load_cb
00013320 l     F .text	00000008 conf_store_one
20003d98 l     O .bss	00000001 conf_loaded
20003d99 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 console.c
00013394 l     F .text	0000000e ring_buf_next
000133a2 l     F .text	0000000e ring_buf_prev
000133b0 l     F .text	0000001c console_hist_is_full
000133cc l     F .text	00000054 handle_nlip
00013420 l     F .text	0000006a trim_whitespace
0001348c l     F .text	00000080 console_hist_move_to_head
0001350c l     F .text	00000080 console_hist_add
0001358c l     F .text	00000040 console_hist_init
00013660 l     F .text	00000044 console_append_char
000136a4 l     F .text	0000003c console_clear_line
000136e0 l     F .text	00000080 insert_char
00013760 l     F .text	0000006c console_hist_move
000137cc l     F .text	0000005e del_char
0001382c l     F .text	00000198 handle_ansi
20003da0 l     O .bss	00000004 ansi_val
20003da4 l     O .bss	00000004 ansi_val_2
20003da8 l     O .bss	00000010 avail_queue
20003db8 l     O .bss	00000004 completion
20003dbc l     O .bss	00000004 console_compat_rx_cb
20003dc0 l     O .bss	00000028 console_hist
20003de8 l     O .bss	00000800 console_hist_lines
200045ec l     O .bss	0000000c console_write_lock
200045f8 l     O .bss	00000002 cur
200045fa l     O .bss	00000002 end
200045fc l     O .bss	00000004 esc_state
20004600 l     O .bss	00000004 ev.2
20004608 l     O .bss	00000004 input.1
2000460c l     O .bss	00000004 lines_queue
20004610 l     O .bss	00000004 nlip_state
20004614 l     O .bss	00000001 prev_endl.0
20004615 l     O .bss	00000001 rx_stalled
20000718 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 rtt_console.c
00013e30 l     F .text	0000001c rtt_console_wait_for_retry
00013e4c l     F .text	0000004c rtt_console_write_ch
00013e98 l     F .text	00000070 rtt_console_poll_func
20004618 l     O .bss	00000018 rtt_timer
2000071c l     O .data	00000004 itvl_ms.0
20000720 l     O .data	00000004 key.1
20000724 l     O .data	00000004 rtt_console_retries_left.2
00000000 l    df *ABS*	00000000 ticks.c
20000728 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 flash_map.c
00013fa4 l     F .text	00000070 flash_map_read_mfg
20004638 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
00014220 l     F .text	0000001c log_registered
0001423c l     F .text	00000004 log_chk_type
00014240 l     F .text	00000014 log_chk_max_entry_len
00014254 l     F .text	00000016 log_call_append_cb
0001426c l     F .text	0000010c log_append_prepare
00014460 l     F .text	00000044 log_read_last_hdr
0001454c l     F .text	00000024 log_read_hdr_walk
200046b8 l     O .bss	00000004 g_log_module_list
200046bc l     O .bss	00000001 log_written
2000072c l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00014570 l     F .text	00000004 log_console_read
00014574 l     F .text	00000004 log_console_walk
00014578 l     F .text	00000004 log_console_flush
0001457c l     F .text	00000020 log_console_print_hdr
0001459c l     F .text	0000002c log_console_append_body
000145c8 l     F .text	00000030 log_console_append
200046c0 l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
200046d8 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 mfg.c
00014668 l     F .text	00000090 mfg_seek_next_aux
000146f8 l     F .text	0000006c mfg_read_mmr
00014764 l     F .text	00000054 mfg_read_next_mmr
000147b8 l     F .text	00000038 mfg_open_flash_area
000147f0 l     F .text	0000003e mfg_read_tlv_body
000148cc l     F .text	00000042 mfg_read_mmr_refs
20004758 l     O .bss	00000001 mfg_initialized
2000475c l     O .bss	00000018 mfg_mmrs
20004774 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
00014910 l     F .text	0000002c reboot_conf_export
0001493c l     F .text	00000054 reboot_conf_set
00014990 l     F .text	00000058 reboot_conf_get
000149e8 l     F .text	0000012c log_reboot_write
00014b14 l     F .text	00000014 log_reboot_init_console
20004778 l     O .bss	00000001 log_reboot_written
2000477c l     O .bss	0000000c log_reboot_written_str
2000478c l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 shell.c
00014bb4 l     F .text	00000038 get_prompt
00014bec l     F .text	0000006c print_module_commands
00014c58 l     F .text	00000030 print_modules
00014c88 l     F .text	00000044 print_command_params
00014ccc l     F .text	0000004c get_destination_module
00014d18 l     F .text	0000001c set_default_module
00014d34 l     F .text	00000020 select_module
00014d54 l     F .text	00000078 get_command_and_module
00014dcc l     F .text	000000c4 shell_find_cmd
00014e90 l     F .text	000000e0 show_cmd_help
00014f70 l     F .text	00000088 show_help
00014ff8 l     F .text	0000001c print_prompt
00015014 l     F .text	00000014 print_prompt_if_console
00015028 l     F .text	00000110 complete_module
00015138 l     F .text	00000108 complete_command
00015240 l     F .text	00000048 get_command_from_module
00015288 l     F .text	000000f0 complete_param
00015378 l     F .text	0000003c get_token
000153b4 l     F .text	00000074 complete_select
00015428 l     F .text	0000006c line2argv
00015494 l     F .text	0000001e get_last_token
000154b4 l     F .text	00000170 completion
00015624 l     F .text	00000030 shell_avail_queue_init
00015794 l     F .text	0000002a shell
0001571c l     F .text	00000026 shell_process_command
00015742 l     F .text	00000052 shell_process_nlip_line
20004798 l     O .bss	00000010 app_cmd
200047a8 l     O .bss	00000004 app_prompt_handler
200047ac l     O .bss	00000200 buf
200049ac l     O .bss	00000150 compat_commands
20004afc l     O .bss	00000004 module_registered
20004b00 l     O .bss	00000004 num_compat_commands
20004b04 l     O .bss	00000004 num_of_shell_entities
20004b08 l     O .bss	00000004 prompt
20004b0c l     O .bss	00000020 shell_console_ev
20004b2c l     O .bss	00000004 shell_evq
20004b30 l     O .bss	00000018 shell_modules
2000074c l     O .data	00000004 default_module
00026444 l     O .text	00000010 shell_cmd_help
00026454 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
000158d0 l     F .text	0000013c shell_nlip_mtx
00015a0c l     F .text	00000020 shell_event_data_in
20004b48 l     O .bss	00000002 g_nlip_expected_len
20004b4c l     O .bss	00000004 g_nlip_mbuf
20004b50 l     O .bss	00000004 g_shell_nlip_in_arg
20004b54 l     O .bss	00000004 g_shell_nlip_in_func
20004b58 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
00015b48 l     F .text	00000024 shell_os_ls_dev
00015cec l     F .text	000000f0 shell_os_tasks_display_cmd
00026654 l     O .text	0000000c date_help
00026660 l     O .text	00000010 date_params
00026670 l     O .text	0000000c ls_dev_help
0002667c l     O .text	0000000c mpool_help
00026688 l     O .text	00000010 mpool_params
00026698 l     O .text	00000060 os_commands
0002670c l     O .text	0000000c tasks_help
000266f8 l     O .text	0000000c reset_help
00026704 l     O .text	00000008 reset_params
00026718 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
000267b0 l     O .text	00000020 prompt_commands
000267d0 l     O .text	0000000c ticks_help
000267dc l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
00015e7c l     F .text	00000010 stats_offset
00015e8c l     F .text	0000004c stats_register_internal
00015fa8 l     F .text	0000004c stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_shell.c
000160ac l     F .text	0000006c stats_shell_display_entry
00016118 l     F .text	00000018 stats_shell_display_group
00016130 l     F .text	00000050 shell_stats_display
20000758 l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
000161a4 l     F .text	0000000e sysdown_timer_exp
000161b4 l     F .text	00000014 sysdown_complete
20004b8c l     O .bss	00000004 sysdown_num_in_progress
20004b90 l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
00016268 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
00016288 l     F .text	00000048 uwbcfg_set
000162d0 l     F .text	00000038 uwbcfg_get
00016308 l     F .text	00000048 uwbcfg_export
20004bcc l     O .bss	00000004 uwbcfg_callbacks
2000085c l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
00016630 l     F .text	000000a8 check_preamble_code
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00016adc l     F .text	00000044 leapyear
00016b20 l     F .text	00000048 parse_number
00026a8c l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
00026abc l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 parse.c
00017180 l     F .text	00000024 parse_num_base
00000000 l    df *ABS*	00000000 streamer_console.c
000171fe l     F .text	0000000c streamer_console_vprintf
0001720a l     F .text	0000000e streamer_console_write
20000874 l     O .data	00000004 streamer_console
00026cbc l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 nrng_slave_node-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00017298 l     F .text	0000000a boot_flag_decode
000172a2 l     F .text	00000006 boot_magic_off
000172a8 l     F .text	00000006 boot_copy_done_off
000172ae l     F .text	00000006 boot_image_ok_off
000172b4 l     F .text	00000018 boot_magic_decode
000172cc l     F .text	0000004a boot_write_trailer_byte
00026d3c l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 split.c
20004bd4 l     O .bss	00000001 split_app_active
20004bd5 l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
00017678 l     F .text	00000004 split_conf_commit
0001767c l     F .text	0000002c split_conf_export
000176a8 l     F .text	00000040 split_conf_get
000176e8 l     F .text	00000044 split_conf_set
20000878 l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
00017778 l     F .text	00000020 pos
00017798 l     F .text	0000004c token_decode
00026d70 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 hex.c
00026db4 l     O .text	00000011 hex_bytes
00000000 l    df *ABS*	00000000 cborattr.c
000179de l     F .text	00000080 valid_attr_type
00017a5e l     F .text	0000005e cbor_target_address
00017cd4 l     F .text	00000362 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00018044 l     F .text	0000001c cbor_mbuf_reader_cpy
00018060 l     F .text	0000001c cbor_mbuf_reader_get8
0001807c l     F .text	00000018 cbor_mbuf_reader_cmp
00018094 l     F .text	0000001e cbor_mbuf_reader_get64
000180b2 l     F .text	0000001a cbor_mbuf_reader_get32
000180cc l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
0001816c l     F .text	000000a0 create_container
0001820c l     F .text	0000007a encode_string
00000000 l    df *ABS*	00000000 cborparser.c
00018466 l     F .text	00000024 is_fixed_type
0001848a l     F .text	00000004 iterate_noop
0001848e l     F .text	00000134 preparse_value
000185c2 l     F .text	0000004a preparse_next_value
0001860c l     F .text	000000a0 extract_length
000186ac l     F .text	0000016c iterate_string_chunks
00018818 l     F .text	000000ca advance_internal
00018b20 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
00018e20 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
20004bd8 l     O .bss	00000004 dw1000_0
00026dd4 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
20000120 l     O .rtt	00000400 _acUpBuffer
20000520 l     O .rtt	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 dw1000_dev.c
00019678 l     F .text	0000000a uwb_dw1000_read_sts_rxtime
00019682 l     F .text	00000008 uwb_dw1000_hal_noblock_wait
000196f0 l     F .text	00000020 uwb_dw1000_calc_pdoa
00019710 l     F .text	00000008 uwb_dw1000_estimate_los
00019718 l     F .text	00000008 uwb_dw1000_calc_fppl
00019720 l     F .text	00000008 uwb_dw1000_calc_seq_rssi
00019728 l     F .text	00000008 uwb_dw1000_calc_rssi
00019730 l     F .text	00000008 uwb_dw1000_get_fppl
00019738 l     F .text	00000008 uwb_dw1000_get_rssi
00019740 l     F .text	00000028 uwb_dw1000_calc_clock_offset_ratio
00019768 l     F .text	00000008 uwb_dw1000_set_on_error_continue
00019770 l     F .text	00000008 uwb_dw1000_phy_repeated_frames
00019778 l     F .text	00000008 uwb_dw1000_phy_rx_reset
00019780 l     F .text	00000008 uwb_dw1000_phy_forcetrxoff
00019788 l     F .text	0000000c uwb_dw1000_phy_data_duration
00019794 l     F .text	0000000c uwb_dw1000_phy_SHR_duration
000197a0 l     F .text	0000000c uwb_dw1000_phy_frame_duration
000197ac l     F .text	00000008 uwb_dw1000_read_txtime_lo32
000197b4 l     F .text	00000008 uwb_dw1000_read_txtime
000197bc l     F .text	00000008 uwb_dw1000_read_rxtime_lo32
000197c4 l     F .text	00000008 uwb_dw1000_read_rxtime
000197cc l     F .text	00000008 uwb_dw1000_read_systime_lo32
000197d4 l     F .text	00000008 uwb_dw1000_read_systime
000197dc l     F .text	00000008 uwb_dw1000_set_rxauto_disable
000197e4 l     F .text	00000008 uwb_dw1000_set_wait4resp_delay
000197ec l     F .text	00000008 uwb_dw1000_set_wait4resp
000197f4 l     F .text	00000008 uwb_dw1000_tx_wait
000197fc l     F .text	00000008 uwb_dw1000_write_tx_fctrl
00019804 l     F .text	00000008 uwb_dw1000_write_tx
0001980c l     F .text	00000008 uwb_dw1000_stop_rx
00019814 l     F .text	00000008 uwb_dw1000_start_rx
0001981c l     F .text	00000008 uwb_dw1000_start_tx
00019824 l     F .text	00000008 uwb_dw1000_set_delay_start
0001982c l     F .text	00000008 uwb_dw1000_set_abs_timeout
00019834 l     F .text	00000016 uwb_dw1000_set_rx_window
0001984a l     F .text	0000000a uwb_dw1000_adj_rx_timeout
00019854 l     F .text	0000000a uwb_dw1000_set_rx_timeout
0001985e l     F .text	00000008 uwb_dw1000_set_dblrxbuf
00019866 l     F .text	00000008 uwb_dw1000_txrf_power_value
0001986e l     F .text	00000008 uwb_dw1000_txrf_config
00019876 l     F .text	00000008 uwb_dw1000_mac_config
00019be4 l     F .text	0000001a uwb_dw1000_set_euid
00019bfe l     F .text	0000001a uwb_dw1000_set_uid
00019c18 l     F .text	0000001a uwb_dw1000_set_panid
00019d82 l     F .text	00000008 uwb_dw1000_sleep_config
00019e00 l     F .text	00000008 uwb_dw1000_enter_sleep
0001a0b0 l     F .text	00000008 uwb_dw1000_wakeup
0001a100 l     F .text	00000008 uwb_dw1000_enter_sleep_after_tx
0001a152 l     F .text	00000008 uwb_dw1000_enter_sleep_after_rx
00026e44 l     O .text	00000015 __func__.0
00026e5c l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000890 l     O .data	000005f0 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_mac.c
0001a9f6 l     F .text	00000028 calc_rx_window_timeout
0001aa1e l     F .text	00000012 dw1000_checkoverrun
0001aa30 l     F .text	00000024 dw1000_irq
0001b040 l     F .text	00000022 update_rx_window_timeout
0001bac8 l     F .text	000009a8 dw1000_interrupt_ev_cb
00026f9c l     O .text	00000008 agc_config
00026fa4 l     O .text	00000008 chan_idx
00026fac l     O .text	00000020 digital_bb_config
00026fcc l     O .text	00000004 dtune1
00026fd0 l     O .text	00000003 dwnsSFDlen
00026fd4 l     O .text	00000018 fs_pll_cfg
00026fec l     O .text	00000006 fs_pll_tune
00027030 l     O .text	00000032 lde_replicaCoeff
00027064 l     O .text	00000002 rx_config
00027068 l     O .text	0000000c sftsh
00027074 l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
0001d0c0 l     F .text	00000010 dw1000_cli_too_few_args
0001d320 l     F .text	0000020c dw1000_cli_cmd
20000e80 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001d66a l     F .text	0000001e hal_flash_check_addr
20004be4 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0001d928 l     F .text	00000028 nrf52k_flash_wait_ready
0001d950 l     F .text	00000050 nrf52k_flash_erase_sector
0001d9a0 l     F .text	00000004 nrf52k_flash_init
0001d9a4 l     F .text	00000020 nrf52k_flash_sector_info
0001d9c4 l     F .text	000000c8 nrf52k_flash_write
0001da8c l     F .text	0000000e nrf52k_flash_read
000273f0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001da9c l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
0001dca8 l     F .text	0000006e nrf52_irqm_handler
0001dd30 l     F .text	00000014 hal_spi_stop_transfer
0001dd44 l     F .text	0000004a hal_spi_config_slave
0001dd90 l     F .text	000000bc hal_spi_init_master
0001de4c l     F .text	000000ea hal_spi_config_master
0002740c l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_timer.c
0001e254 l     F .text	0000000a nrf_read_timer_cntr
0001e260 l     F .text	000000b8 nrf_timer_set_ocmp
0001e318 l     F .text	0000000a nrf_timer_disable_ocmp
0001e322 l     F .text	0000000a nrf_rtc_disable_ocmp
0001e32c l     F .text	00000054 hal_timer_read_bsptimer
0001e380 l     F .text	00000076 hal_timer_chk_queue
0001e3f6 l     F .text	0000002c hal_timer_irq_handler
0002741c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001e6dc l     F .text	0000000e nrf52_hal_wdt_default_handler
0001e6ec l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001e7a8 l     F .text	00000034 nrf52_periph_create_timers
0001e7dc l     F .text	00000020 nrf52_periph_create_spi
00027434 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 json_encode.c
0001e900 l     F .text	000002e4 json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 timescale.c
0001ecd4 l     F .text	00000174 timescale_QUpdate
0001ee48 l     F .text	00000084 timescale_JofAx
0001eecc l     F .text	00000074 timescale_Aofx
0001ef40 l     F .text	000000f8 timescale_innovation
0001f038 l     F .text	00000044 timescale_constraints
0001f080 l     F .text	0000006c timescale_Hofx
0002748e l     O .text	0000000f __func__.7324
0002749d l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
0001f2e0 l     F .text	00000080 Hofx
0001f360 l     F .text	000000a0 Aofx
000274eb l     O .text	0000000e __func__.7283
000274f9 l     O .text	0000000e __func__.7299
00027507 l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ss_nrng.c
00020534 l     F .text	00000034 reset_cb
00020568 l     F .text	00000044 rx_error_cb
000205ac l     F .text	00000058 rx_timeout_cb
00020608 l     F .text	00000398 rx_complete_cb
20000e90 l     O .data	0000003c g_cbs
20000ecc l     O .data	00000010 g_config
20000edc l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 uwb_rng.c
00020a20 l     F .text	00000044 reset_cb
00020a64 l     F .text	0000004a rx_timeout_cb
00020ab0 l     F .text	00000054 superframe_reset_cb
00020c74 l     F .text	000000ea rx_complete_cb
00020e20 l     F .text	00000138 tx_final_cb
00020f78 l     F .text	00000062 tx_complete_cb
20004c60 l     O .bss	000003c0 g_twr_frames
20000eec l     O .data	0000003c g_cbs
20000f28 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 wcs_timescale.c
000210ac l     F .text	00000094 wcs_timescale_cb
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 bcast_ota.c
00021594 l     F .text	00000184 buf_to_bota_nmgr_mbuf
20005038 l     O .bss	00000004 g_mbuf_pool
2000503c l     O .bss	00000004 off.0
00000000 l    df *ABS*	00000000 bcast_ota_cli.c
0002191c l     F .text	00000004 nmgr_mstr_get_mtu
00021920 l     F .text	00000068 check_image
00021988 l     F .text	000000fc txim_ev_cb
00021a84 l     F .text	00000078 nmgr_mstr_out
00021b1c l     F .text	00000148 bota_cli_cmd
20005040 l     O .bss	00000020 nmgr_mstr_transport
20005060 l     O .bss	00000040 tx_im_inst
20000f38 l     O .data	00000010 shell_bota_cmd
00000000 l    df *ABS*	00000000 bcast_ota_nmgr.c
00021cb0 l     F .text	0000004c bota_check_image
00021cfc l     F .text	00000064 bota_confirm
00021d60 l     F .text	000003d8 bota_upload
200050a0 l     O .bss	00000004 _new_image_cb
20000f48 l     O .data	0000000c bota_nmgr_group
00027b40 l     O .text	00000010 bota_nmgr_handlers
00000000 l    df *ABS*	00000000 config_init.c
0002218c l     F .text	000000bc config_init_fcb
200050c0 l     O .bss	0000006c conf_fcb_area
20000f54 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
0002226c l     F .text	00000024 conf_fcb_load
00022290 l     F .text	00000044 conf_fcb_load_cb
000222d4 l     F .text	0000002c conf_fcb_var_read
00022300 l     F .text	000000d8 conf_fcb_compress_internal
000223d8 l     F .text	00000064 conf_fcb_append
000224da l     F .text	0000000a conf_fcb_save
20000f8c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 modlog.c
00022604 l     F .text	0000002c modlog_find_by_module
00022630 l     F .text	0000003c modlog_insert
0002266c l     F .text	0000001c modlog_alloc
00022688 l     F .text	00000048 modlog_infer_handle
000226d0 l     F .text	00000046 modlog_register_no_lock
00022716 l     F .text	0000002c modlog_append_one
00022744 l     F .text	00000088 modlog_append_no_lock
2000512c l     O .bss	00000004 modlog_first_dflt
20005130 l     O .bss	000000c0 modlog_mapping_buf
2000520c l     O .bss	00000004 modlog_mappings
20005210 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 crc8.c
00027b64 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 rwlock.c
0002295c l     F .text	0000000c rwlock_complete_handoff
00022968 l     F .text	0000001a rwlock_read_must_block
00022982 l     F .text	00000016 rwlock_write_must_block
00022998 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 image_validate.c
00022af4 l     F .text	00000078 bootutil_img_hash
00000000 l    df *ABS*	00000000 loader.c
00022c4c l     F .text	00000020 boot_write_sz
00022c6c l     F .text	0000002e boot_read_image_header
00022c9c l     F .text	00000034 boot_read_image_headers
00022cd0 l     F .text	00000074 split_image_check
00022d44 l     F .text	00000064 boot_read_sectors
20005234 l     O .bss	00000068 boot_data
2000529c l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 sha256.c
00027b74 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 os_heap.c
00023228 l     F .text	0000002c os_malloc_lock
00023254 l     F .text	00000028 os_malloc_unlock
200052a0 l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
00027c78 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 nrng_slave_node-sysdown-app.c
00000000 l    df *ABS*	00000000 nrng_slave_node-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20000fa8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000188e2 g     F .text	00000078 _cbor_value_decode_int64_internal
00019358 g     F .text	000001ac SEGGER_RTT_WriteNoLock
0000c960 g     F .text	00000100 panmaster_pkg_init
0001815c g     F .text	00000010 cbor_mbuf_writer_init
00023b54 g     F .text	0000002c .hidden __aeabi_dcmpun
00009640 g     F .text	0000001c os_callout_remaining_ticks
0000a78c g     F .text	00000030 os_arch_start
00014194 g     F .text	0000001c flash_area_id_from_image_slot
0001290a g     F .text	00000008 dpl_cputime_delay_usecs
00022494 g     F .text	00000014 conf_fcb_dst
200052b0 g       .bss	00000000 __HeapBase
200033ec g     O .bss	00000008 g_os_task_list
000092a8 g     F .text	00000078 os_idle_task
00023b18 g     F .text	00000012 .hidden __aeabi_dcmple
0001af38 g     F .text	000000a8 dw1000_stop_rx
000214b4 g     F .text	00000016 strcpy
0001c89e g     F .text	0000005a dw1000_phy_config_lde
0001cfae g     F .text	00000046 dw1000_phy_event_cnt_ctrl
000213a0 g     F .text	0000001a wcs_timescale_free
0001c7c2 g     F .text	0000002e dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
0001b022 g     F .text	0000001e dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
00010f80 g     F .text	00000018 fmemopen_w
0000bfd4 g     F .text	00000038 uwb_pan_set_postprocess
00023a54 g     F .text	0000007a .hidden __cmpdf2
000213f4 g     F .text	0000002a wcs_timescale_pkg_down
00012964 g     F .text	00000048 mem_split_frag
0002431c g     F .text	00000012 fabs
0000a9fa g     F .text	0000005a os_mbuf_copydata
200025f4 g     O .bss	00000008 g_os_mempool_list
000094e0 g     F .text	0000001a os_callout_init
000094fc g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
000196ce g     F .text	00000008 uwb_dw1000_set_autoack
0001733a g     F .text	000000ba boot_read_swap_state
0001fee8 g     F .text	00000446 thornton_dbl
00010550 g     F .text	00000050 add_malloc_block
00023a54 g     F .text	0000007a .hidden __eqdf2
0001b10e g     F .text	00000042 dw1000_set_rx_window
00009848 g     F .text	00000068 os_eventq_put
00015654 g     F .text	00000010 shell_evq_set
0000d018 g     F .text	00000010 panmaster_cli_register
0001a33c g     F .text	00000054 hal_dw1000_reset
0001fc74 g     F .text	000000cc trisolve_dbl
20000530 g       .data	00000000 __data_start__
0000ac04 g     F .text	0000005c os_mbuf_extend
0000f0ce g     F .text	000000f4 uwb_ccp_start
00021524 g     F .text	00000020 strtok_r
000273d8 g     O .text	00000018 nrf52k_flash_dev
000235c4 g     F .text	0000005a .hidden __floatdidf
0000ffd0 g     F .text	00000180 uwb_pan_slot_timer_cb
00018f7e g     F .text	00000040 fcb_append_finish
00010ecc g     F .text	00000024 printf
00011cba g     F .text	0000004a imgmgr_state_confirm
0001a750 g     F .text	000001e4 hal_dw1000_write_noblock
00025d00 g     O .text	00000004 stdout
00015e14 g     F .text	00000054 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000905c g     F .text	00000022 hal_gpio_write
00022f30 g     F .text	00000130 mbedtls_internal_sha256_process
00018bda g     F .text	00000024 fcb_free_sector_cnt
0000a6ec g     F .text	0000009c os_arch_os_init
00014b28 g     F .text	00000038 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
0001707c g     F .text	000000d0 datetime_format
0000bc34 g     F .text	00000154 nrng_encode
0001e434 g     F .text	00000060 hal_timer_init
00014840 g     F .text	0000001a mfg_seek_next_with_type
00018310 g     F .text	0000008c cbor_encode_int
0000a7bc g     F .text	00000064 os_arch_os_start
20004604 g     O .bss	00000001 g_console_ignore_non_nlip
20004606 g     O .bss	00000001 g_console_silence_non_nlip
0001d6b0 g     F .text	00000010 hal_flash_align
00014538 g     F .text	00000014 log_read
00016038 g     F .text	00000028 stats_group_walk
00020fdc g     F .text	00000094 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00017316 g     F .text	0000001e boot_magic_compatible_check
00013f80 g     F .text	0000000c console_no_ticks
00008e68 g     F .text	000000c0 uwb_calc_aoa
0000e3a0 g     F .text	00000050 tdma_tx_slot_start
0000aeb2 g     F .text	0000000c SysTick_Handler
00010162 g     F .text	00000022 BitPosition
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000a290 g     F .text	0000004a os_task_remove
0001e424 g     F .text	00000010 nrf52_timer0_irq_handler
00018038 g     F .text	0000000c cbor_read_object
0001d52c g     F .text	00000010 dw1000_cli_register
0001813c g     F .text	0000001e cbor_mbuf_writer
00009a88 g     F .text	0000002a os_memblock_put
0001fd40 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
00013240 g     F .text	0000000c conf_dst_register
00009bd4 g     F .text	00000024 os_msys_get_pkthdr
20004630 g     O .bss	00000004 flash_map
0000c590 g     F .text	00000014 panmaster_load
00016718 g     F .text	00000244 uwbcfg_commit_to_inst_dw1000
0001d860 g     F .text	00000032 hal_flash_is_erased
0000ae6c g     F .text	00000046 PendSV_Handler
00010f2a g     F .text	0000001c snprintf
00008154  w    F .text	00000002 NMI_Handler
00027ca0 g       .ARM.exidx	00000000 __exidx_end
00022e80 g     F .text	0000000c mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
0001b2d4 g     F .text	00000028 dw1000_set_autoack_delay
00014378 g     F .text	00000044 log_init
00010f46 g     F .text	0000003a memfile_write
0000a664 g     F .text	00000014 os_arch_ctx_sw
00013f54 g     F .text	00000004 rtt_console_is_init
0001839c g     F .text	0000005c cbor_encode_simple_value
0000949e g     F .text	0000000a os_system_reset
0001a324 g     F .text	00000018 hal_dw1000_inst
000081d0 g     F .text	0000002c hal_system_reset
00019d8a g     F .text	00000076 dw1000_dev_enter_sleep
00009344 g     F .text	00000070 os_init_idle_task
20000568 g       .data	00000000 __aeabi_unwind_cpp_pr0
00023a44 g     F .text	0000008a .hidden __gtdf2
00009e0c g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
000250ac g     F .text	0000000c __errno
00027ca0 g       .ARM.exidx	00000000 __etext
0000a5ec g     F .text	00000052 os_get_uptime_usec
000102ac g     F .text	00000074 uwb_wcs_prediction
00013dd8 g     F .text	0000003c console_vprintf
0000d34a g     F .text	00000008 panm_fcb_clear
00008164  w    F .text	00000002 RADIO_IRQHandler
000140fc g     F .text	00000028 flash_area_write
0000b6c8 g     F .text	00000030 usecs_to_response
0000b280 g     F .text	0000007e uwb_nmgr_process_tx_queue
00023f9c g     F .text	0000002e .hidden __aeabi_d2lz
0000ac74 g     F .text	000000b8 os_mutex_release
00015ed8 g     F .text	0000000a stats_size
00016084 g     F .text	00000028 stats_register
000249bc g     F .text	0000027c __ieee754_fmod
20003d00 g     O .bss	00000004 nmgr_evq
00009cb0 g     F .text	00000020 os_sanity_check_register
200013d0 g       .bssnz	00000000 __bssnz_start__
20003d94 g     O .bss	00000004 conf_load_srcs
0001c92c g     F .text	000001d2 dw1000_phy_init
00018c3e g     F .text	00000020 fcb_get_len
0000a47c g     F .text	00000026 os_time_delay
0001746c g     F .text	000000a4 boot_swap_type
2000076c g     O .data	000000a0 g_uwb_config
0000ab7c g     F .text	00000088 os_mbuf_copyinto
00008164  w    F .text	00000002 PDM_IRQHandler
00023ae0 g     F .text	00000010 .hidden __aeabi_cdcmple
0001cafe g     F .text	00000066 dw1000_phy_rx_reset
0001485a g     F .text	0000000a mfg_read_tlv_flash_area
00013f98 g     F .text	0000000c console_get_ticks
0001b010 g     F .text	00000012 dw1000_set_rxauto_disable
00011bec g     F .text	0000001e imgmgr_state_slot_in_use
00023cbc g     F .text	00000160 .hidden __aeabi_fadd
0001714c g     F .text	00000034 crc16_ccitt
00021140 g     F .text	000001d4 wcs_timescale_ev
0001895a g     F .text	00000024 cbor_parser_init
00023cb8 g     F .text	00000164 .hidden __subsf3
0001c528 g     F .text	00000060 dw1000_calc_rssi
0000d1fc g     F .text	00000010 panm_fcb_load_idx
00013f44 g     F .text	00000010 console_rx_restart
00009ae8 g     F .text	00000010 os_mempool_module_init
00012358 g     F .text	0000000c mgmt_evq_set
00008164  w    F .text	00000002 TEMP_IRQHandler
0000a68a g     F .text	0000000a os_arch_in_critical
00026ff4 g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
0001ce74 g     F .text	00000054 dw1000_phy_data_duration
2000080c g     O .data	00000050 g_uwbcfg_str
00019504 g     F .text	00000110 SEGGER_RTT_GetKey
0000fd64 g     F .text	00000154 uwb_pan_blink
00008164  w    F .text	00000002 TIMER3_IRQHandler
00020c4c g     F .text	00000028 uwb_rng_clear_twr_data
0000bb5e g     F .text	000000d6 nrng_get_uids
0000a658 g     F .text	0000000a timer_handler
0000b6f8 g     F .text	000001d6 nrng_request
000097d8 g     F .text	00000024 os_dev_lookup
00009e18 g     F .text	00000090 os_sched_sleep
00019a14 g     F .text	000000e0 dw1000_read_reg
00019880 g     F .text	000000c8 dw1000_read
00013d7c g     F .text	0000000c console_set_completion_cb
00010680 g     F .text	0000001a memcpy
00023ad0 g     F .text	00000020 .hidden __aeabi_cdrcmple
00027660 g     O .text	0000001e g_stats_map_twr_ss_nrng_stat_section
00015a50 g     F .text	000000e0 shell_nlip_process
0001772c g     F .text	00000010 split_conf_init
00012e44 g     F .text	00000034 conf_parse_name
00008d90 g     F .text	00000074 uwb_task_init
0000d20c g     F .text	00000014 panm_fcb_find_node
0001e70c g     F .text	00000078 hal_watchdog_init
0002354c g     F .text	00000022 .hidden __floatsidf
0000d220 g     F .text	000000c2 panm_fcb_compress
0001324c g     F .text	00000054 conf_load
0001ec2c g     F .text	00000038 json_encode_array_value
00010320 g     F .text	00000068 uwb_wcs_local_to_master64
00023a4c g     F .text	00000082 .hidden __ltdf2
00022138 g     F .text	0000000c bcast_ota_set_new_fw_cb
0001ecae g     F .text	00000026 json_readn
0000965c g     F .text	0000000c os_cputime_init
20003d84 g     O .bss	00000004 conf_handlers
0001ec64 g     F .text	0000001c json_encode_array_finish
0001e5c0 g     F .text	0000002c hal_timer_set_cb
0000c2ec g     F .text	00000034 panmaster_clear_list
00023f6c g     F .text	00000000 .hidden __aeabi_uldivmod
000175e4 g     F .text	0000002c split_app_init
0001d892 g     F .text	00000062 hal_flash_isempty
00020f58 g     F .text	00000020 rng_issue_complete
00010468 g     F .text	00000034 puts
00000020 g       *ABS*	00000000 _imghdr_size
00009dd0 g     F .text	00000030 os_sched_ctx_sw_hook
00024eac g     F .text	00000200 __ieee754_logf
00019086 g     F .text	00000052 fcb_elem_info
200045e8 g     O .bss	00000004 console_is_midline
00015664 g     F .text	000000b8 shell_exec
0000a8fa g     F .text	00000014 os_mbuf_free
2000053c g     O .data	00000004 SystemCoreClock
00012912 g     F .text	00000022 dpl_cputime_timer_relative
0001afe0 g     F .text	0000001e dw1000_set_wait4resp
000081b4 g     F .text	0000000c hal_system_init
000183f8 g     F .text	0000000e cbor_encode_byte_string
0001cb68 g     F .text	00000120 dw1000_phy_forcetrxoff
0000d6b8 g     F .text	000001b0 survey_init
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000a694 g     F .text	00000040 os_arch_task_stack_init
0001b95a g     F .text	00000036 dw1000_calc_clock_offset_ratio_ttco
00019af4 g     F .text	000000f0 dw1000_write_reg
000105a0 g     F .text	0000006c malloc
000140d4 g     F .text	00000028 flash_area_read
00023e24 g     F .text	0000001c .hidden __aeabi_i2f
0001c87a g     F .text	00000024 dw1000_phy_disable_sequencing
000091c4 g     F .text	0000004c __assert_func
0001dd18 g     F .text	00000018 nrf52_spi0_irq_handler
0001129c g     F .text	00000018 imgr_my_version
0000fc00 g     F .text	00000038 uwb_pan_set_frames
00011b10 g     F .text	000000b6 imgmgr_state_flags
00009fdc g     F .text	00000040 os_sched_wakeup_ticks
00016180 g     F .text	00000024 stats_shell_register
00013d88 g     F .text	00000050 console_pkg_init
000117ec g     F .text	00000054 imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
0001ad20 g     F .text	0000006a dw1000_set_delay_start
00010ef0 g     F .text	0000003a vsnprintf
00010736 g     F .text	0000000c strtoll
20004bb4 g     O .bss	00000018 _uwbcfg_log
00023bd0 g     F .text	00000040 .hidden __fixunsdfsi
200025d4 g     O .bss	00000008 g_callout_list
0002327c g     F .text	00000018 os_malloc
0000f05c g     F .text	00000072 uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00010a48 g     F .text	0000047c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
200013d0 g       .bss	00000000 __bss_start__
0000e294 g     F .text	0000003e tdma_release_slot
000081c0 g     F .text	00000010 hal_debugger_connected
0002352c g     F .text	0000001e .hidden __aeabi_ui2d
0001d724 g     F .text	00000070 hal_flash_write
00012c34 g     F .text	00000058 dpl_mbuf_appendfrom
00011aac g     F .text	00000010 imgr_cli_register
00011ac0 g     F .text	00000014 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001a2d0 g     F .text	00000052 hal_dw1000_spi_txrx_cb
00024048 g     F .text	000002d0 .hidden __udivmoddi4
00009ce8 g     F .text	00000018 os_sanity_task_checkin
000232a8 g     F .text	00000000 .hidden __aeabi_drsub
000128e2 g     F .text	00000008 dpl_cputime_timer_stop
0000e304 g     F .text	0000003e tdma_free
0001239c g     F .text	00000048 nmgr_pkg_init
0000d33a g     F .text	00000010 panm_fcb_save
00018ae8 g     F .text	00000038 _cbor_value_copy_string
0001d540 g     F .text	000000d2 dw1000_gpio_config_leds
0000fb5c g     F .text	000000a4 uwb_pan_init
00008e04 g     F .text	00000018 uwb_task_deinit
200033e4 g     O .bss	00000004 g_current_task
00009d00 g     F .text	0000006c os_sanity_run
000171a4 g     F .text	0000005a parse_ll_bounds
0001843a g     F .text	0000002c cbor_encoder_close_container
0000a678 g     F .text	0000000c os_arch_save_sr
20004b89 g     O .bss	00000001 sysdown_active
00023b04 g     F .text	00000012 .hidden __aeabi_dcmplt
00017420 g     F .text	00000020 boot_write_magic
00009a24 g     F .text	00000014 os_mempool_init
00022248 g     F .text	00000020 config_pkg_init
0000a4a4 g     F .text	00000038 os_gettimeofday
200033f4 g     O .bss	00000001 g_task_id
20005020 g     O .bss	00000018 g_bcast_ota_log
00012e78 g     F .text	00000016 conf_parse_and_lookup
00016d3c g     F .text	00000140 timeval_to_clocktime
000165c8 g     F .text	00000010 uwbcfg_register
20000750 g     O .data	00000008 g_stats_registry
00023570 g     F .text	00000042 .hidden __extendsfdf2
00012e20 g     F .text	00000024 conf_handler_lookup
0001c588 g     F .text	00000020 dw1000_get_rssi
00023874 g     F .text	000001d0 .hidden __aeabi_ddiv
000232b4 g     F .text	00000276 .hidden __adddf3
00008c74 g     F .text	00000060 uwb_dev_idx_lookup
0000c5a4 g     F .text	00000040 panmaster_save_node
00027c88 g       .text	00000000 __exidx_start
00010f98 g     F .text	00000100 strntoumax
00023620 g     F .text	00000254 .hidden __aeabi_dmul
00025ba0 g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
00009d6c g     F .text	00000010 os_sanity_init
20000f9c g     O .data	00000001 __fdlib_version
20003cb0 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
0000d3e8 g     F .text	00000048 uwb_rng_tof_to_meters
00011d04 g     F .text	000001bc imgmgr_state_read
0000a92e g     F .text	000000a8 os_mbuf_append
00014864 g     F .text	0000000a mfg_read_tlv_mmr_ref
00013f58 g     F .text	00000028 rtt_console_init
0000ae0c g     F .text	00000014 os_set_env
00012a76 g     F .text	00000036 dpl_memblock_put_from_cb
0001a0b8 g     F .text	00000048 dw1000_dev_enter_sleep_after_tx
0001c608 g     F .text	0000000e dw1000_read_systime_lo
0001c5a8 g     F .text	00000050 dw1000_estimate_los
000192e0 g     F .text	00000010 hal_bsp_flash_dev
0001b386 g     F .text	000000c4 dw1000_set_dblrxbuff
000209a0 g     F .text	00000080 twr_ss_nrng_pkg_init
0000fc38 g     F .text	00000098 uwb_pan_pkg_init
0001e7fc g     F .text	0000000c nrf52_periph_create
0001f0ec g     F .text	000000f4 timescale_init
0001c7f0 g     F .text	0000002e dw1000_phy_txclk_PLL
0001baa4 g     F .text	0000001e dw1000_ic_and_host_ptrs_equal
00025d04 g     O .text	00000008 MemFile_methods
0001cc88 g     F .text	00000068 dw1000_phy_interrupt_mask
200033d8 g     O .bss	0000000c g_os_sanity_check_mu
0001414c g     F .text	0000000a flash_area_align
0000c6fc g     F .text	00000034 postprocess_cb
0002352c g     F .text	0000001e .hidden __floatunsidf
00011afc g     F .text	00000014 imgmgr_log_confirm
00013d48 g     F .text	0000000c console_line_queue_set
00023294 g     F .text	00000014 os_free
00008178 g     F .text	0000003c _sbrk
00017878 g     F .text	0000002a base64_pad
0000ff58 g     F .text	0000003e uwb_pan_start
0000b910 g     F .text	0000008a nrng_listen
00018bc6 g     F .text	00000014 cbor_value_calculate_string_length
0001b834 g     F .text	00000024 dw1000_read_carrier_integrator
0001db70 g     F .text	00000098 os_tick_idle
00013e14 g     F .text	0000001c console_printf
00012364 g     F .text	00000014 nmgr_transport_init
000117d8 g     F .text	00000014 imgmgr_dfu_confirmed
00015ca0 g     F .text	00000012 shell_os_reset_cmd
00019948 g     F .text	000000cc dw1000_write
0001c470 g     F .text	00000098 dw1000_calc_fppl
0000dd5c g     F .text	0000012a survey_encode
0000b090 g     F .text	00000018 nmgr_uwb_mtu
00013a48 g     F .text	00000002 console_blocking_mode
000132a0 g     F .text	00000018 conf_ensure_loaded
0001b2fc g     F .text	0000008a dw1000_set_wait4resp_delay
0001897e g     F .text	0000012a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
0000d354 g     F .text	00000090 panm_fcb_sort
00008644 g     F .text	00000002 _init
00017334 g     F .text	00000006 boot_swap_type_off
0001d794 g     F .text	000000cc hal_flash_erase
00017648 g     F .text	0000000c split_mode_get
00021544 g     F .text	0000000c strtol
00015c1c g     F .text	00000084 shell_os_date_cmd
0000e3f0 g     F .text	00000030 tdma_pkg_init
0000bdd4 g     F .text	0000018c nrng_json_write
00024dd0 g     F .text	000000c0 __ieee754_log10f
000190d8 g     F .text	00000048 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00023c10 g     F .text	0000009e .hidden __aeabi_d2f
00025924 g     O .text	00000050 cmd_pm_param
0001dc08 g     F .text	000000a0 os_tick_init
0002400c g     F .text	0000003c .hidden __aeabi_d2ulz
0001ccf0 g     F .text	0000015c dw1000_phy_repeated_frames
00023cb8 g     F .text	00000164 .hidden __aeabi_fsub
00018e02 g     F .text	0000001e fcb_clear
0001b150 g     F .text	00000022 dw1000_set_abs_timeout
200006f0 g     O .data	00000008 g_dpl_mempool_list
00018fbe g     F .text	000000c8 fcb_elem_crc8
000145f8 g     F .text	00000008 log_console_get
00008164  w    F .text	00000002 TIMER0_IRQHandler
00021844 g     F .text	00000084 bcast_ota_get_reset_mbuf
000093b4 g     F .text	000000c8 os_init
00011ad4 g     F .text	00000014 imgmgr_log_upload_done
000080f8 g     F .text	0000005c Reset_Handler
0001fbd4 g     F .text	000000a0 srkf_dbl_free
000214ec g     F .text	0000001a strrchr
00018c18 g     F .text	00000026 fcb_put_len
00017610 g     F .text	00000038 split_check_status
0001d0d0 g     F .text	00000180 dw1000_cli_dump_registers
00022800 g     F .text	00000040 modlog_append
000135cc g     F .text	0000000c console_echo
00023b80 g     F .text	0000004e .hidden __fixdfsi
00010416 g     F .text	00000030 calloc
00021afc g     F .text	0000001e check_image_fid
00009ab4 g     F .text	00000034 os_mempool_info_get_next
20004bb0 g     O .bss	00000001 sysinit_active
00019614 g     F .text	00000064 SEGGER_RTT_Init
20004605 g     O .bss	00000001 g_console_silence
00017654 g     F .text	0000000c split_app_active_get
00023e50 g     F .text	0000007c .hidden __floatdisf
00018414 g     F .text	0000000a cbor_encoder_create_array
000090b2 g     F .text	0000001a hal_gpio_toggle
0000aebe g     F .text	0000001e os_default_irq_asm
200050a8 g     O .bss	00000018 bota_state
20004c38 g     O .bss	00000028 g_twr_ss_nrng_stat
0002739c g     O .text	0000000c cmd_dw1000_help
0000a01c g     F .text	0000000c os_sched_next_task
00009d7c g     F .text	00000054 os_sched_insert
00009538 g     F .text	00000078 os_callout_reset
00014870 g     F .text	0000004c mfg_init
0000c890 g     F .text	000000a4 panmaster_delete_node
000097fc g     F .text	00000010 os_dev_reset
00015888 g     F .text	00000048 shell_init
000232b4 g     F .text	00000276 .hidden __aeabi_dadd
00023a4c g     F .text	00000082 .hidden __ledf2
00011fb4 g     F .text	00000018 mgmt_group_list_unlock
000178fc g     F .text	00000058 hex_format
0000ac60 g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
00023fcc g     F .text	00000040 .hidden __aeabi_f2ulz
000098b0 g     F .text	0000001a os_eventq_get_no_wait
000235b4 g     F .text	0000006a .hidden __aeabi_ul2d
000103e0 g     F .text	00000036 uwb_wcs_pkg_down
200013d0 g       .bssnz	00000000 __bssnz_end__
000141b0 g     F .text	00000070 flash_map_init
0002799c g     O .text	00000020 cmd_bota_param
00021550 g     F .text	00000014 vprintf
00025918 g     O .text	0000000c cmd_pm_help
00009338 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000734 g     O .data	00000018 reboot_conf_handler
00012df4 g     F .text	00000010 conf_unlock
00009fa0 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000da34 g     F .text	0000017c survey_broadcaster
0001cec8 g     F .text	0000001a dw1000_phy_frame_duration
00016060 g     F .text	00000024 stats_group_find
00026124 g     O .text	00000028 log_console_handler
00022aa6 g     F .text	0000001e rwlock_release_write
00012378 g     F .text	00000024 nmgr_rx_req
20003454 g     O .bss	00000010 nrng_event
00008ff8 g     F .text	0000002c hal_gpio_init_in
00010274 g     F .text	00000038 uwb_wcs_dtu_time_adjust
0001d53c g     F .text	00000004 dw1000_cli_down
00015b30 g     F .text	00000018 shell_nlip_init
00018ba2 g     F .text	00000024 cbor_value_advance
00025a90 g     O .text	00000018 g_stats_map_tdma_stat_section
00008164  w    F .text	00000002 PWM2_IRQHandler
0001ec80 g     F .text	0000001c json_read_next
000244ac g     F .text	0000006c log10f
00011f5c g     F .text	0000003c imgr_ver_str
200013d0 g       .data	00000000 __data_end__
000144a4 g     F .text	00000094 log_register
000230e6 g     F .text	00000140 mbedtls_sha256_finish_ret
00008d7e g     F .text	00000010 uwb_mac_find_cb_inst_ptr
0001662c g     F .text	00000004 uwbcfg_pkg_down
00019120 g     F .text	00000018 fcb_getnext_area
00011ae8 g     F .text	00000014 imgmgr_log_pending
00022a2c g     F .text	00000026 rwlock_release_read
0001c508 g     F .text	00000020 dw1000_get_fppl
00008164  w    F .text	00000002 ECB_IRQHandler
00015e68 g     F .text	00000014 shell_prompt_register
0000fcd0 g     F .text	00000094 uwb_pan_listen
00024518 g     F .text	000004a4 __ieee754_asin
00012b34 g     F .text	00000014 dpl_mbuf_free
00013f8c g     F .text	0000000c console_yes_ticks
00023b40 g     F .text	00000012 .hidden __aeabi_dcmpgt
00024434 g     F .text	00000078 fmod
00012d3a g     F .text	00000054 dpl_mbuf_trim_front
20003428 g     O .bss	00000004 g_os_time
0001e024 g     F .text	00000060 hal_spi_init
0001234c g     F .text	0000000c mgmt_evq_get
0001e794 g     F .text	00000014 hal_watchdog_tickle
200052ac g       .bss	00000000 __bss_end__
0000980c g     F .text	00000020 os_dev_walk
0001a108 g     F .text	0000004a dw1000_dev_enter_sleep_after_rx
0000a89a g     F .text	0000002e os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00027990 g     O .text	0000000c cmd_bota_help
0000b4e8 g     F .text	0000010c nrng_init
00023b2c g     F .text	00000012 .hidden __aeabi_dcmpge
00020b60 g     F .text	000000ec uwb_rng_init
0001d04c g     F .text	00000024 dw1000_pkg_init
00018c5e g     F .text	00000034 fcb_sector_hdr_init
00011168 g     F .text	000000fc imgr_read_info
000166d8 g     F .text	0000003e remap_framefilter
0000ee78 g     F .text	000001e4 uwb_ccp_init
00018bfe g     F .text	0000001a fcb_is_empty
0000b5f4 g     F .text	000000d0 nrng_pkg_init
000232b0 g     F .text	0000027a .hidden __aeabi_dsub
00009bc4 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
00008630 g     F .text	00000014 _start
0001a934 g     F .text	0000003c hal_dw1000_rw_noblock_wait
0000d430 g     F .text	0000005c calc_tof_ss
00015cb4 g     F .text	00000038 shell_os_ls_dev_cmd
000235b4 g     F .text	0000006a .hidden __floatundidf
00008e1c g     F .text	0000004a uwb_dev_init
00010258 g     F .text	0000001c uwb_wcs_set_postprocess
20004b88 g     O .bss	00000001 stats_shell_registered
20004b70 g     O .bss	00000018 g_stats_stats
000177e4 g     F .text	00000094 base64_encode
0000a4dc g     F .text	00000018 os_time_is_set
0000ae20 g     F .text	00000006 os_arch_init_task_stack
00009948 g     F .text	00000018 os_eventq_run
00023e24 g     F .text	0000001c .hidden __floatsisf
00012de0 g     F .text	00000014 conf_lock
0000a2dc g     F .text	00000080 os_task_info_get_next
0000feb8 g     F .text	000000a0 uwb_pan_reset
00026d2c g     O .text	00000010 boot_img_magic
00009cd0 g     F .text	00000018 os_sanity_check_reset
0001773c g     F .text	0000003c split_write_split
000135d8 g     F .text	00000034 console_lock
000214ca g     F .text	00000022 strncmp
00015ee4 g     F .text	00000098 stats_walk
20003d9c g     O .bss	00000004 conf_save_dst
0001ce4c g     F .text	00000028 dw1000_phy_SHR_duration
00009188 g     F .text	0000003c hal_gpio_irq_release
20001428 g     O .bss	00000050 g_idle_task
00009024 g     F .text	00000038 hal_gpio_init_out
0000ba84 g     F .text	000000da nrng_get_ranges
0000907e g     F .text	00000034 hal_gpio_read
20000768 g     O .data	00000004 sysinit_panic_cb
0001e5ec g     F .text	0000008c hal_timer_start_at
00019f0c g     F .text	000001a4 dw1000_dev_config
000115a0 g     F .text	00000014 imgmgr_dfu_stopped
0000d490 g     F .text	00000070 calc_tof_ds
200033d4 g     O .bss	00000004 g_os_sanity_check_list
0001b23c g     F .text	00000098 dw1000_set_autoack
0000d95c g     F .text	0000004e survey_listen
0001ec9c g     F .text	00000012 json_read_prev
00010718 g     F .text	0000001e strncpy
0001b990 g     F .text	0000003c dw1000_read_rxdiag
0001c626 g     F .text	0000000e dw1000_read_rxtime_lo
0000c944 g     F .text	0000001c panmaster_sort
00009a38 g     F .text	00000032 os_memblock_get
00009f2c g     F .text	00000074 os_sched_wakeup
0000a83a g     F .text	00000022 os_mqueue_get
0000a078 g     F .text	00000010 os_sem_init
00015b6c g     F .text	000000b0 shell_os_mpool_display_cmd
0001cee2 g     F .text	000000cc dw1000_phy_txrf_power_value
0001a970 g     F .text	00000086 hal_dw1000_wakeup
0002141e g     F .text	00000060 realloc
00015ddc g     F .text	00000038 shell_os_register
00012934 g     F .text	00000030 mem_init_mbuf_pool
0001f1e0 g     F .text	00000038 timescale_free
00009210 g     F .text	00000098 os_default_irq
00019e08 g     F .text	00000104 dw1000_dev_wakeup
00014156 g     F .text	0000000a flash_area_erased_val
0002354c g     F .text	00000022 .hidden __aeabi_i2d
00012b48 g     F .text	00000020 dpl_mbuf_free_chain
200033e8 g     O .bss	00000004 g_os_last_ctx_sw_time
0000a088 g     F .text	00000064 os_sem_release
20003c68 g     O .bss	00000048 g_stat
00010638 g     F .text	00000048 memcmp
0000a6d4 g     F .text	00000018 os_arch_init
0000b10c g     F .text	0000005c nmgr_uwb_pkg_init
0001a15c g     F .text	00000124 dw1000_dev_init
00023e40 g     F .text	0000008c .hidden __floatundisf
0000ff96 g     F .text	0000003a uwb_pan_lease_remaining
00018c92 g     F .text	0000004e fcb_sector_hdr_read
000224e4 g     F .text	000000c4 conf_line_parse
00024318  w    F .text	00000002 .hidden __aeabi_ldiv0
00012afc g     F .text	0000000a dpl_mbuf_pool_init
00021074 g     F .text	00000038 uwb_rng_pkg_down
00022920 g     F .text	0000003c crc8_calc
00013040 g     F .text	00000054 conf_commit
0000f1c2 g     F .text	00000054 uwb_ccp_stop
00016270 g     F .text	0000000c sysinit_start
00023874 g     F .text	000001d0 .hidden __divdf3
0001e494 g     F .text	000000fc hal_timer_config
0001ad08 g     F .text	00000018 dw1000_tx_wait
000101e0 g     F .text	00000044 uwb_wcs_init
0000dc70 g     F .text	000000c8 survey_slot_broadcast_cb
0000e420 g     F .text	0000003c tdma_pkg_down
00017660 g     F .text	00000018 split_mode_set
00018ce0 g     F .text	00000122 fcb_init
00023e1c g     F .text	00000024 .hidden __aeabi_ui2f
0000e1fc g     F .text	00000098 tdma_assign_slot
00023620 g     F .text	00000254 .hidden __muldf3
00013d40 g     F .text	00000008 console_is_init
00013328 g     F .text	00000058 conf_save
00020d60 g     F .text	000000c0 uwb_rng_twr_to_tof
0000e0b0 g     F .text	0000014c tdma_init
0000a0ec g     F .text	000000b4 os_sem_pend
0001289c g     F .text	00000010 nmgr_os_groups_register
0001e784 g     F .text	00000010 hal_watchdog_enable
0000c4f8 g     F .text	00000098 panrequest_cb
00022ac4 g     F .text	00000030 rwlock_init
00025564 g     O .text	00000042 g_stats_map_nrng_stat_section
000103a0 g     F .text	00000040 uwb_wcs_pkg_init
000229d2 g     F .text	0000005a rwlock_acquire_read
000096a0 g     F .text	00000022 os_cputime_timer_relative
0001ab50 g     F .text	00000082 dw1000_write_tx_fctrl
0000c5e4 g     F .text	00000084 panmaster_update_node
0000a85c g     F .text	0000003e os_mqueue_put
00009b34 g     F .text	0000004c os_msys_register
20001578 g     O .bss	00000004 g_os_idle_ctr
0001b062 g     F .text	000000ac dw1000_set_rx_timeout
00014014 g     F .text	00000044 flash_area_open
0000ab02 g     F .text	0000007a os_mbuf_cmpf
20000540 g     O .data	00000008 uwb_cb
00008164  w    F .text	00000002 SAADC_IRQHandler
000173f4 g     F .text	0000002a boot_read_swap_state_by_id
00010150 g     F .text	00000012 NumberOfBits
00017954 g     F .text	0000008a hex_parse
0001f6d4 g     F .text	00000500 srkf_dbl_init
00008d5c g     F .text	00000022 uwb_mac_get_interface
0001069a g     F .text	00000042 memset
0000d868 g     F .text	000000f4 survey_request
00008020 g       .text	000000d8 __isr_vector
00008918 g     F .text	00000318 main
0001e084 g     F .text	0000002c hal_spi_set_txrx_cb
000191c0 g     F .text	00000034 fcb_getnext
20004bdc g     O .bss	00000008 g_spi0_sem
00013f08 g     F .text	0000003c console_out_nolock
00018290 g     F .text	00000080 cbor_encode_uint
00023e50 g     F .text	0000007c .hidden __aeabi_l2f
00008648 g     F .text	00000050 uwb_config_updated_cb
00012a2c g     F .text	0000004a dpl_memblock_get
0001ec0c g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
000227cc g     F .text	00000034 modlog_register
000191f4 g     F .text	00000078 fcb_rotate
0001627c g     F .text	0000000c sysinit_end
0002287c g     F .text	000000a0 modlog_init
0000ae26 g     F .text	00000046 SVC_Handler
0000b0b2 g     F .text	00000058 nmgr_uwb_init
0000983e g     F .text	0000000a os_eventq_inited
00023c10 g     F .text	0000009e .hidden __truncdfsf2
00026cc4 g     O .text	00000020 sysdown_cbs
00016b68 g     F .text	000001d4 clocktime_to_timeval
00011ffc g     F .text	00000024 mgmt_group_register
00012ae0 g     F .text	0000001c streamer_printf
000129ac g     F .text	00000080 dpl_mempool_init
000235c4 g     F .text	0000005a .hidden __aeabi_l2d
0001d6d0 g     F .text	00000052 hal_flash_read
0001360c g     F .text	00000034 console_unlock
000099a4 g     F .text	00000008 os_eventq_dflt_get
0001e590 g     F .text	00000030 hal_timer_read
0000b300 g     F .text	00000058 uwb_nmgr_queue_tx
00020b32 g     F .text	0000002e uwb_rng_config
000098ca g     F .text	0000007e os_eventq_get
00014124 g     F .text	00000028 flash_area_erase
20004bf4 g     O .bss	00000028 nrf52_hal_spi0
0000bf60 g     F .text	00000064 lease_expiry_cb
0001c654 g     F .text	00000140 dw1000_configcwmode
000196de g     F .text	00000008 uwb_dw1000_event_cnt_ctrl
0000a63e g     F .text	0000001a os_time_ms_to_ticks
00014454 g     F .text	0000000a log_walk
0000960c g     F .text	00000034 os_callout_wakeup_ticks
00023e40 g     F .text	0000008c .hidden __aeabi_ul2f
00023fcc g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0001b938 g     F .text	00000022 dw1000_read_time_tracking_offset
0001abd2 g     F .text	00000136 dw1000_start_tx
00012ad6 g     F .text	0000000a streamer_vprintf
20004634 g     O .bss	00000004 flash_map_entries
0000aa54 g     F .text	000000ae os_mbuf_adj
20004788 g     O .bss	00000002 reboot_cnt
00012e04 g     F .text	0000001c conf_register
00009496 g     F .text	00000008 os_reboot
00008020 g       .imghdr	00000000 __text
0002291c g     F .text	00000004 crc8_init
000224a8 g     F .text	00000032 conf_fcb_kv_save
0000f6e8 g     F .text	00000030 uwb_ccp_pkg_init
0001482e g     F .text	00000012 mfg_seek_next
0000b4b2 g     F .text	00000034 nrng_config
000106f0 g     F .text	00000018 strcmp
00014186 g     F .text	0000000e flash_area_read_is_empty
00009e00 g     F .text	0000000c os_sched_get_current_task
0001841e g     F .text	0000001c cbor_encoder_create_map
000139c4 g     F .text	00000084 console_write
0000e342 g     F .text	0000005c tdma_rx_slot_start
00008458 g     F .text	000001d8 SystemInit
00009696 g     F .text	0000000a os_cputime_get32
0002243c g     F .text	00000058 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0001b1bc g     F .text	00000080 dw1000_mac_framefilter
0002400c g     F .text	0000003c .hidden __fixunsdfdi
00023a54 g     F .text	0000007a .hidden __nedf2
0001ec04 g     F .text	00000008 json_encode_array_name
00009960 g     F .text	00000042 os_eventq_remove
0001a6b4 g     F .text	0000009a hal_dw1000_write
0001aab6 g     F .text	0000009a dw1000_write_tx
000132b8 g     F .text	00000068 conf_save_one
00009c14 g     F .text	0000001c os_msys_num_free
00012e8e g     F .text	000000ca conf_value_from_str
000196d6 g     F .text	00000008 uwb_dw1000_set_autoack_delay
0000c668 g     F .text	00000094 panmaster_postprocess
0002147e g     F .text	00000020 sprintf
00023f9c g     F .text	0000002e .hidden __fixdfdi
0000a028 g     F .text	00000022 os_sched
0001d6c0 g     F .text	00000010 hal_flash_erased_val
0000bfc4 g     F .text	00000010 uwb_pan_set_request_cb
00022b6c g     F .text	000000e0 bootutil_img_validate
0001d612 g     F .text	00000058 _dw1000_otp_read
0000ad2c g     F .text	000000e0 os_mutex_pend
0001968a g     F .text	00000044 uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
000243bc g     F .text	00000078 asin
00011c0a g     F .text	000000b0 imgmgr_state_set_pending
00008164  w    F .text	00000002 RTC2_IRQHandler
0002770c g     O .text	00000048 g_stats_map_rng_stat_section
00023cb0 g     F .text	0000016c .hidden __aeabi_frsub
0001c634 g     F .text	00000010 dw1000_read_txtime
000259c0 g     O .text	00000036 g_stats_map_survey_stat_section
0001e808 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
00018406 g     F .text	0000000e cbor_encode_text_string
00024ea0 g     F .text	0000000c nanf
00017abc g     F .text	00000218 cbor_read_array
20000fa0 g     O .data	00000004 _impure_ptr
00022268 g     F .text	00000002 config_pkg_init_stage2
0000a824 g     F .text	00000016 os_mqueue_init
0000a53c g     F .text	00000074 os_settimeofday
0001d250 g     F .text	000000d0 dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
0000b99c g     F .text	000000e8 nrng_twr_to_tof_frames
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001df38 g     F .text	00000038 hal_spi_config
00021506 g     F .text	0000001e strsep
000225a8 g     F .text	0000005a conf_line_make
00014058 g     F .text	0000007c flash_area_to_sectors
000178a4 g     F .text	00000058 base64_decode
0001c644 g     F .text	0000000e dw1000_read_txtime_lo
00020330 g     F .text	00000204 bierman_dbl
00008d1e g     F .text	0000003e uwb_mac_remove_interface
0001f400 g     F .text	000002d4 srkf_dbl_main
000095b0 g     F .text	0000005c os_callout_tick
00026ce4 g     O .text	00000048 sysflash_map_dflt
20004c1c g     O .bss	0000001c nrf52_hal_timer0
00010184 g     F .text	0000005a BitIndex
000080f8 g       .text	00000000 __isr_vector_end
0001e15c g     F .text	000000f8 hal_spi_txrx_noblock
0000947c g     F .text	0000001a os_start
0001c8f8 g     F .text	00000034 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
00017510 g     F .text	00000086 boot_set_pending
0001a280 g     F .text	00000050 dw1000_dev_deinit
0001df70 g     F .text	0000004c hal_spi_enable
00011ec0 g     F .text	0000009c imgmgr_state_write
00023bd0 g     F .text	00000040 .hidden __aeabi_d2uiz
000128ac g     F .text	0000002e dpl_cputime_timer_init
00024e90 g     F .text	00000010 nan
00009668 g     F .text	0000002e os_cputime_timer_init
00008cd4 g     F .text	0000004a uwb_mac_append_interface
0000c730 g     F .text	00000160 panmaster_add_node
00024c38 g     F .text	00000198 __ieee754_sqrt
00013380 g     F .text	00000014 conf_store_init
0000c320 g     F .text	000001d8 panmaster_idx_find_node
0001cff4 g     F .text	00000056 dw1000_phy_event_cnt_read
000128da g     F .text	00000008 dpl_cputime_timer_start
0000ee70 g     F .text	00000006 uwb_ccp_set_tof_comp_cb
0000b45c g     F .text	00000024 nrng_get_config
00024330 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00013a4c g     F .text	000002f4 console_handle_char
00025c84 g     O .text	0000004e g_stats_map_pan_stat_section
0001c81e g     F .text	00000032 dw1000_phy_sysclk_LDE
00023af0 g     F .text	00000012 .hidden __aeabi_dcmpeq
000157c0 g     F .text	00000044 shell_register
00010446 g     F .text	00000020 fwrite
000148bc g     F .text	00000010 mfg_open
20000550 g     O .data	00000008 g_os_run_list
0001ba4c g     F .text	00000058 dw1000_mac_init
0001c616 g     F .text	00000010 dw1000_read_rxtime
00021070 g     F .text	00000002 uwb_rng_pkg_init2
0001b450 g     F .text	000003e4 dw1000_mac_config
00008c30 g     F .text	00000034 NVIC_Relocate
00013218 g     F .text	00000028 conf_src_register
00018286 g     F .text	0000000a cbor_encoder_init
00017220 g     F .text	00000078 sysinit_app
2000342c g     O .bss	00000004 os_flags
0001e844 g     F .text	00000054 json_encode_object_key
0000e2d2 g     F .text	00000032 tdma_stop
00017454 g     F .text	00000016 boot_write_swap_type
0000a684 g     F .text	00000006 os_arch_restore_sr
20004be8 g     O .bss	0000000c g_hal_os_tick
00012b06 g     F .text	0000002e dpl_mbuf_get
0001ad8a g     F .text	000001ac dw1000_start_rx
0000f218 g     F .text	00000038 uwb_ccp_skew_compensation_ui64
0001e898 g     F .text	00000068 json_encode_object_entry
00014b60 g     F .text	00000054 log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
000115b4 g     F .text	00000014 imgmgr_dfu_started
00014160 g     F .text	00000026 flash_area_is_empty
200025d0 g     O .bss	00000004 g_os_started
00023060 g     F .text	00000086 mbedtls_sha256_update_ret
000213bc g     F .text	00000038 wcs_timescale_pkg_init
00022da8 g     F .text	000000d8 split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
00016350 g     F .text	00000250 uwbcfg_commit_to_inst
000112b4 g     F .text	0000003c imgr_find_by_hash
000128f4 g     F .text	00000016 dpl_cputime_delay_ticks
00018aa8 g     F .text	0000003e cbor_value_leave_container
00018e52 g     F .text	00000032 fcb_append_to_scratch
00012040 g     F .text	00000028 mgmt_cbuf_setoerr
00008448 g     F .text	00000010 SystemCoreClockUpdate
0001ebe4 g     F .text	00000020 json_encode_object_finish
00023e1c g     F .text	00000024 .hidden __floatunsisf
0000a90e g     F .text	00000020 os_mbuf_free_chain
00023b80 g     F .text	0000004e .hidden __aeabi_d2iz
0000a5b0 g     F .text	0000003c os_get_uptime
0000b480 g     F .text	00000032 nrng_append_config
00009c30 g     F .text	00000034 os_msys_init
0000c934 g     F .text	00000010 panmaster_compress
00019138 g     F .text	00000088 fcb_getnext_nolock
0000c2cc g     F .text	00000010 panmaster_node_idx
0000a9d6 g     F .text	00000024 os_mbuf_off
20004607 g     O .bss	00000001 g_is_output_nlip
00015804 g     F .text	00000084 shell_cmd_register
00009144 g     F .text	00000028 hal_gpio_irq_enable
0000a42c g     F .text	0000000c os_time_get
200051f0 g     O .bss	0000001c modlog_mapping_pool
00022144 g     F .text	00000048 bcast_ota_nmgr_module_init
0000c2dc g     F .text	00000010 panmaster_find_node_general
0001e0b0 g     F .text	000000ac hal_spi_txrx
0001f218 g     F .text	000000c8 timescale_main
0001e678 g     F .text	00000064 hal_timer_stop
0001aa54 g     F .text	00000062 dw1000_read_rx
0001b172 g     F .text	00000048 dw1000_sync_rxbufptrs
00013004 g     F .text	0000003c conf_get_value
000143bc g     F .text	00000058 log_append_body
00020b04 g     F .text	0000002e uwb_rng_free
0000a8c8 g     F .text	00000032 os_mbuf_get_pkthdr
200046b0 g     O .bss	00000008 g_log_info
00012f58 g     F .text	00000078 conf_str_from_value
00024318  w    F .text	00000002 .hidden __aeabi_idiv0
000180ec g     F .text	00000050 cbor_mbuf_reader_init
00023b54 g     F .text	0000002c .hidden __unorddf2
00016e7c g     F .text	00000200 datetime_parse
0000b168 g     F .text	00000118 nmgr_uwb_tx
00018e84 g     F .text	000000fa fcb_append
200000d8 g     O .rtt	00000048 _SEGGER_RTT
00012fd0 g     F .text	00000034 conf_set_value
0000dbb0 g     F .text	000000c0 survey_receiver
000273a8 g     O .text	00000030 cmd_dw1000_param
000128ea g     F .text	0000000a dpl_cputime_get32
00014414 g     F .text	00000040 log_printf
00026810 g     O .text	00000006 g_stats_map_stats
0000a1b8 g     F .text	000000d8 os_task_init
00012c8c g     F .text	000000ae dpl_mbuf_adj
000081fc g     F .text	0000004c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
00014600 g     F .text	0000004c log_console_init
000161c8 g     F .text	000000a0 sysdown
000196e6 g     F .text	00000008 uwb_dw1000_event_cnt_read
00010388 g     F .text	00000018 uwb_wcs_local_to_master
00013d54 g     F .text	00000028 console_line_event_put
00010708 g     F .text	00000010 strlen
00009774 g     F .text	00000038 os_dev_create
00009bf8 g     F .text	0000001c os_msys_count
00009a6a g     F .text	0000001e os_memblock_put_from_cb
00022a52 g     F .text	00000054 rwlock_acquire_write
00019cd0 g     F .text	000000b2 dw1000_dev_configure_sleep
0000982c g     F .text	00000012 os_eventq_init
0000d1d8 g     F .text	00000024 panm_fcb_load
0000a438 g     F .text	00000044 os_time_advance
0000b8ce g     F .text	00000042 nrng_request_delay_start
0001a448 g     F .text	0000026c hal_dw1000_read_noblock
00023ae0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
000131b0 g     F .text	00000010 conf_cli_register
00023a44 g     F .text	0000008a .hidden __gedf2
00021718 g     F .text	0000012c bcast_ota_get_packet
0000a04c g     F .text	0000002c os_sched_resort
20004bd0 g     O .bss	00000004 boot_current_slot
00021318 g     F .text	00000088 wcs_timescale_init
0001d070 g     F .text	00000050 dw1000_pkg_down
00012aac g     F .text	0000002a dpl_memblock_put
0001d688 g     F .text	00000028 hal_flash_init
00010224 g     F .text	00000034 uwb_wcs_free
0002149e g     F .text	00000016 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
00015ff4 g     F .text	00000044 stats_module_init
00012020 g     F .text	00000020 mgmt_find_handler
00023570 g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
00019c32 g     F .text	0000009e dw1000_softreset
0001a390 g     F .text	000000b6 hal_dw1000_read
000115c8 g     F .text	00000014 imgmgr_dfu_pending
00012b68 g     F .text	000000a8 dpl_mbuf_append
0001464c g     F .text	0000001c log_level_get
00017596 g     F .text	0000004c boot_set_confirmed
0000d9aa g     F .text	0000008a survey_slot_range_cb
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001d8f4 g     F .text	00000032 hal_flash_isempty_no_buf
000165a0 g     F .text	00000028 uwbcfg_commit
000097ac g     F .text	0000002c os_dev_initialize_all
000232b0 g     F .text	0000027a .hidden __subdf3
00015a2c g     F .text	00000024 shell_nlip_clear_pkt
00022840 g     F .text	0000003a modlog_printf
0001affe g     F .text	00000012 dw1000_set_on_error_continue
00009ea8 g     F .text	00000084 os_sched_remove
000112f0 g     F .text	00000048 imgmgr_find_best_area_id
20000558 g     O .data	00000008 g_os_sleep_list
00023ecc g     F .text	00000000 .hidden __aeabi_ldivmod
00017218 g     F .text	00000008 streamer_console_get
000192f0 g     F .text	00000068 hal_bsp_init
000094a8 g     F .text	00000038 os_pkg_init
0001b9d0 g     F .text	0000007c dw1000_tasks_init
0001dfbc g     F .text	00000068 hal_spi_disable
0001695c g     F .text	00000180 strtod_soft
00023cbc g     F .text	00000160 .hidden __addsf3
00012d98 g     F .text	00000048 conf_init
00009ca0 g     F .text	00000010 os_sanity_check_init
0001926c g     F .text	00000074 fcb_walk
000218c8 g     F .text	00000054 bcast_ota_pkg_init
00012c10 g     F .text	00000024 dpl_mbuf_off
0001c5f8 g     F .text	00000010 dw1000_read_systime
00015f7c g     F .text	0000002c stats_init
0000dd38 g     F .text	00000024 survey_pkg_init
00021c64 g     F .text	0000004c bota_cli_register
00010ec4 g     F .text	00000008 vfprintf
00021564 g     F .text	00000030 strpbrk
0001b858 g     F .text	000000e0 dw1000_calc_clock_offset_ratio
000090cc g     F .text	00000078 hal_gpio_irq_init
0001c794 g     F .text	0000002e dw1000_phy_sysclk_XTAL
20002580 g     O .bss	00000050 g_os_main_task
0000916c g     F .text	0000001c hal_gpio_irq_disable
0001060c g     F .text	0000002c free
0000d1a2 g     F .text	00000034 panm_fcb_src
0000f718 g     F .text	0000003c uwb_ccp_pkg_down
00017440 g     F .text	00000014 boot_write_image_ok
00022e8c g     F .text	000000a4 mbedtls_sha256_starts_ret
000165d8 g     F .text	00000054 uwbcfg_pkg_init
0001c850 g     F .text	0000002a dw1000_phy_sysclk_SEQ
00013640 g     F .text	0000001e console_out



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000ae27 	.word	0x0000ae27
	...
    8058:	0000ae6d 	.word	0x0000ae6d
    805c:	0000aeb3 	.word	0x0000aeb3
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	200013d0 	.word	0x200013d0
    ldr     r3, =__bss_end__
    8134:	200052ac 	.word	0x200052ac
    ldr    r1, =__etext
    8138:	00027ca0 	.word	0x00027ca0
    ldr    r2, =__data_start__
    813c:	20000530 	.word	0x20000530
    ldr    r3, =__data_end__
    8140:	200013d0 	.word	0x200013d0
    LDR     R0, =__HeapBase
    8144:	200052b0 	.word	0x200052b0
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008459 	.word	0x00008459
    LDR     R0, =_start
    8150:	00008631 	.word	0x00008631

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	20000530 	.word	0x20000530

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	20000530 	.word	0x20000530

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81c6:	f000 0001 	and.w	r0, r0, #1
    81ca:	4770      	bx	lr
    81cc:	e000ed00 	.word	0xe000ed00

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    824c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8250:	2b06      	cmp	r3, #6
    8252:	d001      	beq.n	8258 <errata_16+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8258:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    825c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8260:	f013 0f0f 	tst.w	r3, #15
    8264:	d109      	bne.n	827a <errata_16+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    826a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    826e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8272:	2b30      	cmp	r3, #48	; 0x30
    8274:	d003      	beq.n	827e <errata_16+0x36>
    return false;
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
    827a:	2000      	movs	r0, #0
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
}
    8280:	4770      	bx	lr

00008282 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8282:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8286:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    828a:	2b06      	cmp	r3, #6
    828c:	d001      	beq.n	8292 <errata_31+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828e:	2000      	movs	r0, #0
    8290:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8292:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8296:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    829a:	f013 0f0f 	tst.w	r3, #15
    829e:	d10d      	bne.n	82bc <errata_31+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82a0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82a4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ac:	2b30      	cmp	r3, #48	; 0x30
    82ae:	d007      	beq.n	82c0 <errata_31+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82b0:	2b40      	cmp	r3, #64	; 0x40
    82b2:	d007      	beq.n	82c4 <errata_31+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82b4:	2b50      	cmp	r3, #80	; 0x50
    82b6:	d007      	beq.n	82c8 <errata_31+0x46>
    return false;
    82b8:	2000      	movs	r0, #0
    82ba:	4770      	bx	lr
    82bc:	2000      	movs	r0, #0
    82be:	4770      	bx	lr
            return true;
    82c0:	2001      	movs	r0, #1
    82c2:	4770      	bx	lr
            return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
            return true;
    82c8:	2001      	movs	r0, #1
}
    82ca:	4770      	bx	lr

000082cc <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82cc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82d0:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    82e4:	f013 0f0f 	tst.w	r3, #15
    82e8:	d109      	bne.n	82fe <errata_32+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82f6:	2b30      	cmp	r3, #48	; 0x30
    82f8:	d003      	beq.n	8302 <errata_32+0x36>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
}
    8304:	4770      	bx	lr

00008306 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8306:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    830a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    830e:	2b06      	cmp	r3, #6
    8310:	d001      	beq.n	8316 <errata_36+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8316:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    831a:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    831e:	f013 0f0f 	tst.w	r3, #15
    8322:	d10d      	bne.n	8340 <errata_36+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8324:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8328:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8330:	2b30      	cmp	r3, #48	; 0x30
    8332:	d007      	beq.n	8344 <errata_36+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8334:	2b40      	cmp	r3, #64	; 0x40
    8336:	d007      	beq.n	8348 <errata_36+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8338:	2b50      	cmp	r3, #80	; 0x50
    833a:	d007      	beq.n	834c <errata_36+0x46>
    return false;
    833c:	2000      	movs	r0, #0
    833e:	4770      	bx	lr
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
            return true;
    8344:	2001      	movs	r0, #1
    8346:	4770      	bx	lr
            return true;
    8348:	2001      	movs	r0, #1
    834a:	4770      	bx	lr
            return true;
    834c:	2001      	movs	r0, #1
}
    834e:	4770      	bx	lr

00008350 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8350:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8354:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8358:	2b06      	cmp	r3, #6
    835a:	d001      	beq.n	8360 <errata_37+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8360:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8364:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d109      	bne.n	8382 <errata_37+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8372:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    837a:	2b30      	cmp	r3, #48	; 0x30
    837c:	d003      	beq.n	8386 <errata_37+0x36>
    return false;
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
    8382:	2000      	movs	r0, #0
    8384:	4770      	bx	lr
            return true;
    8386:	2001      	movs	r0, #1
}
    8388:	4770      	bx	lr

0000838a <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    838a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    838e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8392:	2b06      	cmp	r3, #6
    8394:	d001      	beq.n	839a <errata_57+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    839a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    839e:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83a2:	f013 0f0f 	tst.w	r3, #15
    83a6:	d109      	bne.n	83bc <errata_57+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83ac:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b4:	2b30      	cmp	r3, #48	; 0x30
    83b6:	d003      	beq.n	83c0 <errata_57+0x36>
    return false;
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr
            return true;
    83c0:	2001      	movs	r0, #1
}
    83c2:	4770      	bx	lr

000083c4 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83c8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    83cc:	2b06      	cmp	r3, #6
    83ce:	d001      	beq.n	83d4 <errata_66+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d0:	2000      	movs	r0, #0
    83d2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83dc:	f013 0f0f 	tst.w	r3, #15
    83e0:	d109      	bne.n	83f6 <errata_66+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83e6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x36>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr

000083fe <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83fe:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8402:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8406:	2b06      	cmp	r3, #6
    8408:	d001      	beq.n	840e <errata_108+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    840a:	2000      	movs	r0, #0
    840c:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8412:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8416:	f013 0f0f 	tst.w	r3, #15
    841a:	d10d      	bne.n	8438 <errata_108+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    841c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8420:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8428:	2b30      	cmp	r3, #48	; 0x30
    842a:	d007      	beq.n	843c <errata_108+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842c:	2b40      	cmp	r3, #64	; 0x40
    842e:	d007      	beq.n	8440 <errata_108+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8430:	2b50      	cmp	r3, #80	; 0x50
    8432:	d007      	beq.n	8444 <errata_108+0x46>
    return false;
    8434:	2000      	movs	r0, #0
    8436:	4770      	bx	lr
    8438:	2000      	movs	r0, #0
    843a:	4770      	bx	lr
            return true;
    843c:	2001      	movs	r0, #1
    843e:	4770      	bx	lr
            return true;
    8440:	2001      	movs	r0, #1
    8442:	4770      	bx	lr
            return true;
    8444:	2001      	movs	r0, #1
}
    8446:	4770      	bx	lr

00008448 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b01      	ldr	r3, [pc, #4]	; (8450 <SystemCoreClockUpdate+0x8>)
    844a:	4a02      	ldr	r2, [pc, #8]	; (8454 <SystemCoreClockUpdate+0xc>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	4770      	bx	lr
    8450:	2000053c 	.word	0x2000053c
    8454:	03d09000 	.word	0x03d09000

00008458 <SystemInit>:
{
    8458:	b508      	push	{r3, lr}
    if (errata_16()){
    845a:	f7ff fef5 	bl	8248 <errata_16>
    845e:	b110      	cbz	r0, 8466 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8460:	4b6c      	ldr	r3, [pc, #432]	; (8614 <SystemInit+0x1bc>)
    8462:	4a6d      	ldr	r2, [pc, #436]	; (8618 <SystemInit+0x1c0>)
    8464:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8466:	f7ff ff0c 	bl	8282 <errata_31>
    846a:	b148      	cbz	r0, 8480 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8470:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    8474:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    847c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    8480:	f7ff ff24 	bl	82cc <errata_32>
    8484:	b130      	cbz	r0, 8494 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8486:	4a65      	ldr	r2, [pc, #404]	; (861c <SystemInit+0x1c4>)
    8488:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    8494:	f7ff ff37 	bl	8306 <errata_36>
    8498:	b140      	cbz	r0, 84ac <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    849e:	2200      	movs	r2, #0
    84a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84a8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84ac:	f7ff ff50 	bl	8350 <errata_37>
    84b0:	b120      	cbz	r0, 84bc <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b6:	2203      	movs	r2, #3
    84b8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    84bc:	f7ff ff65 	bl	838a <errata_57>
    84c0:	b160      	cbz	r0, 84dc <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1c8>)
    84c4:	2205      	movs	r2, #5
    84c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84ca:	2201      	movs	r2, #1
    84cc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84d0:	2200      	movs	r2, #0
    84d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    if (errata_66()){
    84dc:	f7ff ff72 	bl	83c4 <errata_66>
    84e0:	2800      	cmp	r0, #0
    84e2:	d046      	beq.n	8572 <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ec:	4b4d      	ldr	r3, [pc, #308]	; (8624 <SystemInit+0x1cc>)
    84ee:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84fa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fe:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8502:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8506:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    850a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8512:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8516:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    851a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8522:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8526:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    852a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8532:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8536:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    853a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8542:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8546:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    854a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8552:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8556:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    855a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8562:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8566:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    856a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8572:	f7ff ff44 	bl	83fe <errata_108>
    8576:	b148      	cbz	r0, 858c <SystemInit+0x134>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    857c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8580:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8588:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    858c:	4a23      	ldr	r2, [pc, #140]	; (861c <SystemInit+0x1c4>)
    858e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    859a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859e:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    85a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    85a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85aa:	f013 0f01 	tst.w	r3, #1
    85ae:	d104      	bne.n	85ba <SystemInit+0x162>
    SystemCoreClockUpdate();
    85b0:	f7ff ff4a 	bl	8448 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85b4:	f000 fb3c 	bl	8c30 <NVIC_Relocate>
}
    85b8:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85ba:	4b1b      	ldr	r3, [pc, #108]	; (8628 <SystemInit+0x1d0>)
    85bc:	2201      	movs	r2, #1
    85be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <SystemInit+0x1d0>)
    85c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85c8:	2b00      	cmp	r3, #0
    85ca:	d0fa      	beq.n	85c2 <SystemInit+0x16a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85d0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85d4:	f023 0301 	bic.w	r3, r3, #1
    85d8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <SystemInit+0x1d0>)
    85de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85e2:	2b00      	cmp	r3, #0
    85e4:	d0fa      	beq.n	85dc <SystemInit+0x184>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85e6:	4b10      	ldr	r3, [pc, #64]	; (8628 <SystemInit+0x1d0>)
    85e8:	2200      	movs	r2, #0
    85ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85ee:	4b0e      	ldr	r3, [pc, #56]	; (8628 <SystemInit+0x1d0>)
    85f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85f4:	2b00      	cmp	r3, #0
    85f6:	d0fa      	beq.n	85ee <SystemInit+0x196>
  __ASM volatile ("dsb 0xF":::"memory");
    85f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85fc:	4907      	ldr	r1, [pc, #28]	; (861c <SystemInit+0x1c4>)
    85fe:	68ca      	ldr	r2, [r1, #12]
    8600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8604:	4b09      	ldr	r3, [pc, #36]	; (862c <SystemInit+0x1d4>)
    8606:	4313      	orrs	r3, r2
    8608:	60cb      	str	r3, [r1, #12]
    860a:	f3bf 8f4f 	dsb	sy
    __NOP();
    860e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8610:	e7fd      	b.n	860e <SystemInit+0x1b6>
    8612:	bf00      	nop
    8614:	4007c000 	.word	0x4007c000
    8618:	baadf00d 	.word	0xbaadf00d
    861c:	e000ed00 	.word	0xe000ed00
    8620:	40005000 	.word	0x40005000
    8624:	4000c000 	.word	0x4000c000
    8628:	4001e000 	.word	0x4001e000
    862c:	05fa0004 	.word	0x05fa0004

00008630 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8630:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8632:	4803      	ldr	r0, [pc, #12]	; (8640 <_start+0x10>)
    8634:	f000 febe 	bl	93b4 <os_init>
    os_start();
    8638:	f000 ff20 	bl	947c <os_start>
#endif
}
    863c:	bd08      	pop	{r3, pc}
    863e:	bf00      	nop
    8640:	00008919 	.word	0x00008919

00008644 <_init>:

void
_init(void)
{
}
    8644:	4770      	bx	lr
	...

00008648 <uwb_config_updated_cb>:
#endif

static bool uwb_config_updated = false;
int
uwb_config_updated_cb()
{
    8648:	b510      	push	{r4, lr}
    /* Workaround in case we're stuck waiting for ccp with the
     * wrong radio settings */
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    864a:	2000      	movs	r0, #0
    864c:	f000 fb12 	bl	8c74 <uwb_dev_idx_lookup>
    8650:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8652:	2101      	movs	r1, #1
    8654:	f000 fb93 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    8658:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    865c:	b123      	cbz	r3, 8668 <uwb_config_updated_cb+0x20>
        uwb_txrf_config(udev, &udev->config.txrf);
        uwb_start_rx(udev);
        return 0;
    }

    uwb_config_updated = true;
    865e:	4b0d      	ldr	r3, [pc, #52]	; (8694 <uwb_config_updated_cb+0x4c>)
    8660:	2201      	movs	r2, #1
    8662:	701a      	strb	r2, [r3, #0]
    return 0;
}
    8664:	2000      	movs	r0, #0
    8666:	bd10      	pop	{r4, pc}
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    8668:	6a63      	ldr	r3, [r4, #36]	; 0x24
    866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    866e:	4620      	mov	r0, r4
    8670:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8672:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	2100      	movs	r1, #0
    8678:	4620      	mov	r0, r4
    867a:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    867c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    867e:	685b      	ldr	r3, [r3, #4]
    8680:	f204 5124 	addw	r1, r4, #1316	; 0x524
    8684:	4620      	mov	r0, r4
    8686:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    8688:	6a63      	ldr	r3, [r4, #36]	; 0x24
    868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    868c:	4620      	mov	r0, r4
    868e:	4798      	blx	r3
        return 0;
    8690:	e7e8      	b.n	8664 <uwb_config_updated_cb+0x1c>
    8692:	bf00      	nop
    8694:	200013e0 	.word	0x200013e0

00008698 <pan_complete_cb>:
    }
}

static void
pan_complete_cb(struct dpl_event * ev)
{
    8698:	b538      	push	{r3, r4, r5, lr}
    assert(ev != NULL);
    869a:	b148      	cbz	r0, 86b0 <pan_complete_cb+0x18>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    869c:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    869e:	b16c      	cbz	r4, 86bc <pan_complete_cb+0x24>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*) dpl_event_get_arg(ev);

    if (pan->dev_inst->slot_id != 0xffff) {
    86a0:	6823      	ldr	r3, [r4, #0]
    86a2:	f8b3 24c2 	ldrh.w	r2, [r3, #1218]	; 0x4c2
    86a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86aa:	429a      	cmp	r2, r3
    86ac:	d10c      	bne.n	86c8 <pan_complete_cb+0x30>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
        printf("{\"utime\": %lu,\"msg\": \"slot_id = %d\"}\n", utime, pan->dev_inst->slot_id);
        printf("{\"utime\": %lu,\"msg\": \"euid16 = 0x%X\"}\n", utime, pan->dev_inst->my_short_address);
    }
}
    86ae:	bd38      	pop	{r3, r4, r5, pc}
    assert(ev != NULL);
    86b0:	2300      	movs	r3, #0
    86b2:	461a      	mov	r2, r3
    86b4:	4619      	mov	r1, r3
    86b6:	4618      	mov	r0, r3
    86b8:	f000 fd84 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    86bc:	2300      	movs	r3, #0
    86be:	461a      	mov	r2, r3
    86c0:	4619      	mov	r1, r3
    86c2:	4618      	mov	r0, r3
    86c4:	f000 fd7e 	bl	91c4 <__assert_func>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    86c8:	f000 ffe5 	bl	9696 <os_cputime_get32>
    86cc:	4605      	mov	r5, r0
        printf("{\"utime\": %lu,\"msg\": \"slot_id = %d\"}\n", utime, pan->dev_inst->slot_id);
    86ce:	6823      	ldr	r3, [r4, #0]
    86d0:	f8b3 24c2 	ldrh.w	r2, [r3, #1218]	; 0x4c2
    86d4:	4601      	mov	r1, r0
    86d6:	4805      	ldr	r0, [pc, #20]	; (86ec <pan_complete_cb+0x54>)
    86d8:	f008 fbf8 	bl	10ecc <printf>
        printf("{\"utime\": %lu,\"msg\": \"euid16 = 0x%X\"}\n", utime, pan->dev_inst->my_short_address);
    86dc:	6823      	ldr	r3, [r4, #0]
    86de:	f8b3 24b6 	ldrh.w	r2, [r3, #1206]	; 0x4b6
    86e2:	4629      	mov	r1, r5
    86e4:	4802      	ldr	r0, [pc, #8]	; (86f0 <pan_complete_cb+0x58>)
    86e6:	f008 fbf1 	bl	10ecc <printf>
}
    86ea:	e7e0      	b.n	86ae <pan_complete_cb+0x16>
    86ec:	000250b8 	.word	0x000250b8
    86f0:	000250e0 	.word	0x000250e0

000086f4 <slot_cb>:
slot_cb(struct dpl_event * ev){
    86f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86f8:	b084      	sub	sp, #16
    assert(ev);
    86fa:	2800      	cmp	r0, #0
    86fc:	d03c      	beq.n	8778 <slot_cb+0x84>
    86fe:	6883      	ldr	r3, [r0, #8]
    tdma_instance_t * tdma = slot->parent;
    8700:	689e      	ldr	r6, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    8702:	6872      	ldr	r2, [r6, #4]
    struct uwb_dev * udev = tdma->dev_inst;
    8704:	6834      	ldr	r4, [r6, #0]
    uint16_t idx = slot->idx;
    8706:	881f      	ldrh	r7, [r3, #0]
    struct nrng_instance *nrng = (struct nrng_instance *)slot->arg;
    8708:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
    870c:	f8b2 30b6 	ldrh.w	r3, [r2, #182]	; 0xb6
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    8710:	2b00      	cmp	r3, #0
    8712:	d04a      	beq.n	87aa <slot_cb+0xb6>
    if (uwb_config_updated) {
    8714:	4b53      	ldr	r3, [pc, #332]	; (8864 <slot_cb+0x170>)
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	bba3      	cbnz	r3, 8784 <slot_cb+0x90>
    if (ccp->local_epoch==0 || udev->slot_id == 0xffff) return;
    871a:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
    871e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    8722:	430b      	orrs	r3, r1
    8724:	d041      	beq.n	87aa <slot_cb+0xb6>
    8726:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
    872a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    872e:	429a      	cmp	r2, r3
    8730:	d03b      	beq.n	87aa <slot_cb+0xb6>
    if (idx > 6 && idx < (tdma->nslots-6) && (idx%4)==0) {
    8732:	2f06      	cmp	r7, #6
    8734:	d907      	bls.n	8746 <slot_cb+0x52>
    8736:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
    873a:	3b06      	subs	r3, #6
    873c:	429f      	cmp	r7, r3
    873e:	da02      	bge.n	8746 <slot_cb+0x52>
    8740:	f017 0f03 	tst.w	r7, #3
    8744:	d034      	beq.n	87b0 <slot_cb+0xbc>
    if (udev->role&UWB_ROLE_ANCHOR) {
    8746:	f8b4 54b4 	ldrh.w	r5, [r4, #1204]	; 0x4b4
    874a:	f015 0504 	ands.w	r5, r5, #4
    874e:	d14a      	bne.n	87e6 <slot_cb+0xf2>
        if (idx%MYNEWT_VAL(NRNG_NTAGS) != udev->slot_id) {      // NRNG_NTAGS   = Max number of tags to allow in slots
    8750:	f007 0303 	and.w	r3, r7, #3
    8754:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
    8758:	4293      	cmp	r3, r2
    875a:	d126      	bne.n	87aa <slot_cb+0xb6>
        uint64_t dx_time = tdma_tx_slot_start(tdma, idx) & 0xFFFFFFFFFE00UL;
    875c:	ee07 7a90 	vmov	s15, r7
    8760:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    8764:	4630      	mov	r0, r6
    8766:	f005 fe1b 	bl	e3a0 <tdma_tx_slot_start>
    876a:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    876e:	f022 0201 	bic.w	r2, r2, #1
    8772:	b28b      	uxth	r3, r1
        uint32_t slot_mask = 0;
    8774:	2600      	movs	r6, #0
        for (uint16_t i = MYNEWT_VAL(NODE_START_SLOT_ID);
    8776:	e05c      	b.n	8832 <slot_cb+0x13e>
    assert(ev);
    8778:	2300      	movs	r3, #0
    877a:	461a      	mov	r2, r3
    877c:	4619      	mov	r1, r3
    877e:	4618      	mov	r0, r3
    8780:	f000 fd20 	bl	91c4 <__assert_func>
        uwb_config_updated = false;
    8784:	2500      	movs	r5, #0
    8786:	4b37      	ldr	r3, [pc, #220]	; (8864 <slot_cb+0x170>)
    8788:	701d      	strb	r5, [r3, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    878a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    8790:	4620      	mov	r0, r4
    8792:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8794:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	4629      	mov	r1, r5
    879a:	4620      	mov	r0, r4
    879c:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    879e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87a0:	685b      	ldr	r3, [r3, #4]
    87a2:	f204 5124 	addw	r1, r4, #1316	; 0x524
    87a6:	4620      	mov	r0, r4
    87a8:	4798      	blx	r3
}
    87aa:	b004      	add	sp, #16
    87ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NMGR_UWB);
    87b0:	2113      	movs	r1, #19
    87b2:	4620      	mov	r0, r4
    87b4:	f000 fae3 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        assert(nmgruwb);
    87b8:	4605      	mov	r5, r0
    87ba:	b170      	cbz	r0, 87da <slot_cb+0xe6>
        if (uwb_nmgr_process_tx_queue(nmgruwb, tdma_tx_slot_start(tdma, idx))) {
    87bc:	ee07 7a90 	vmov	s15, r7
    87c0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    87c4:	4630      	mov	r0, r6
    87c6:	f005 fdeb 	bl	e3a0 <tdma_tx_slot_start>
    87ca:	4602      	mov	r2, r0
    87cc:	460b      	mov	r3, r1
    87ce:	4628      	mov	r0, r5
    87d0:	f002 fd56 	bl	b280 <uwb_nmgr_process_tx_queue>
    87d4:	2800      	cmp	r0, #0
    87d6:	d0b6      	beq.n	8746 <slot_cb+0x52>
    87d8:	e7e7      	b.n	87aa <slot_cb+0xb6>
        assert(nmgruwb);
    87da:	2300      	movs	r3, #0
    87dc:	461a      	mov	r2, r3
    87de:	4619      	mov	r1, r3
    87e0:	4618      	mov	r0, r3
    87e2:	f000 fcef 	bl	91c4 <__assert_func>
        uwb_set_delay_start(udev, tdma_rx_slot_start(tdma, idx));
    87e6:	ee07 7a90 	vmov	s15, r7
    87ea:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    87ee:	4630      	mov	r0, r6
    87f0:	f005 fda7 	bl	e342 <tdma_rx_slot_start>
    87f4:	4602      	mov	r2, r0
    87f6:	460b      	mov	r3, r1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    87f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    87fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
    87fc:	4620      	mov	r0, r4
    87fe:	4788      	blx	r1
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8800:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8804:	2113      	movs	r1, #19
    8806:	4620      	mov	r0, r4
    8808:	4798      	blx	r3
            + nrng->config.rx_timeout_delay;
    880a:	f8b8 10bc 	ldrh.w	r1, [r8, #188]	; 0xbc
        uint16_t timeout = uwb_phy_frame_duration(udev, sizeof(nrng_request_frame_t))
    880e:	4401      	add	r1, r0
    8810:	b289      	uxth	r1, r1
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    8812:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8816:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    881a:	4620      	mov	r0, r4
    881c:	4798      	blx	r3
        nrng_listen(nrng, UWB_BLOCKING);
    881e:	2100      	movs	r1, #0
    8820:	4640      	mov	r0, r8
    8822:	f003 f875 	bl	b910 <nrng_listen>
    8826:	e7c0      	b.n	87aa <slot_cb+0xb6>
            slot_mask |= 1UL << i;
    8828:	2401      	movs	r4, #1
    882a:	40ac      	lsls	r4, r5
    882c:	4326      	orrs	r6, r4
             i <= MYNEWT_VAL(NODE_END_SLOT_ID); i++) {
    882e:	3501      	adds	r5, #1
    8830:	b2ad      	uxth	r5, r5
        for (uint16_t i = MYNEWT_VAL(NODE_START_SLOT_ID);
    8832:	2d07      	cmp	r5, #7
    8834:	d9f8      	bls.n	8828 <slot_cb+0x134>
        if(nrng_request_delay_start(
    8836:	2100      	movs	r1, #0
    8838:	9102      	str	r1, [sp, #8]
    883a:	b2b6      	uxth	r6, r6
    883c:	9601      	str	r6, [sp, #4]
    883e:	f44f 7198 	mov.w	r1, #304	; 0x130
    8842:	9100      	str	r1, [sp, #0]
    8844:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8848:	4640      	mov	r0, r8
    884a:	f003 f840 	bl	b8ce <nrng_request_delay_start>
    884e:	f010 0f04 	tst.w	r0, #4
    8852:	d0aa      	beq.n	87aa <slot_cb+0xb6>
            uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8854:	f000 ff1f 	bl	9696 <os_cputime_get32>
    8858:	4601      	mov	r1, r0
            printf("{\"utime\": %lu,\"msg\": \"slot_timer_cb_%d:start_tx_error\"}\n",
    885a:	463a      	mov	r2, r7
    885c:	4802      	ldr	r0, [pc, #8]	; (8868 <slot_cb+0x174>)
    885e:	f008 fb35 	bl	10ecc <printf>
    8862:	e7a2      	b.n	87aa <slot_cb+0xb6>
    8864:	200013e0 	.word	0x200013e0
    8868:	00025108 	.word	0x00025108
    886c:	00000000 	.word	0x00000000

00008870 <tof_comp_cb>:
 * Ideally this should use a map generated and make use of the euid in case
 * the ccp packet is relayed through another node.
 */
static uint32_t
tof_comp_cb(uint16_t short_addr)
{
    8870:	b508      	push	{r3, lr}
    float dist_in_meters = sqrtf(x*x+y*y+z*z);
#ifdef VERBOSE
    printf("d=%dm, %ld dwunits\n", (int)dist_in_meters,
           (uint32_t)(dist_in_meters/uwb_rng_tof_to_meters(1.0)));
#endif
    return dist_in_meters/uwb_rng_tof_to_meters(1.0);
    8872:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8890 <tof_comp_cb+0x20>
    8876:	f004 fdb7 	bl	d3e8 <uwb_rng_tof_to_meters>
    887a:	ec53 2b10 	vmov	r2, r3, d0
    887e:	2000      	movs	r0, #0
    8880:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8884:	f01a fff6 	bl	23874 <__aeabi_ddiv>
    8888:	f01b f9a2 	bl	23bd0 <__aeabi_d2uiz>
}
    888c:	bd08      	pop	{r3, pc}
    888e:	bf00      	nop
    8890:	00000000 	.word	0x00000000
    8894:	3ff00000 	.word	0x3ff00000

00008898 <complete_cb>:
{
    8898:	b508      	push	{r3, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16){
    889a:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    889e:	f648 0341 	movw	r3, #34881	; 0x8841
    88a2:	429a      	cmp	r2, r3
    88a4:	d001      	beq.n	88aa <complete_cb+0x12>
        return false;
    88a6:	2000      	movs	r0, #0
}
    88a8:	bd08      	pop	{r3, pc}
    return (struct dpl_eventq *) os_eventq_dflt_get();
    88aa:	f001 f87b 	bl	99a4 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    88ae:	4902      	ldr	r1, [pc, #8]	; (88b8 <complete_cb+0x20>)
    88b0:	f000 ffca 	bl	9848 <os_eventq_put>
    return true;
    88b4:	2001      	movs	r0, #1
    88b6:	e7f7      	b.n	88a8 <complete_cb+0x10>
    88b8:	200013d0 	.word	0x200013d0

000088bc <nrng_complete_cb>:
static void nrng_complete_cb(struct dpl_event *ev) {
    88bc:	b510      	push	{r4, lr}
    assert(ev != NULL);
    88be:	b300      	cbz	r0, 8902 <nrng_complete_cb+0x46>
    88c0:	4604      	mov	r4, r0
    return ev->ev.ev_arg;
    88c2:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    88c4:	b31b      	cbz	r3, 890e <nrng_complete_cb+0x52>
    hal_gpio_toggle(LED_BLINK_PIN);
    88c6:	201f      	movs	r0, #31
    88c8:	f000 fbf3 	bl	90b2 <hal_gpio_toggle>
    88cc:	68a2      	ldr	r2, [r4, #8]
    nrng_frame_t * frame = nrng->frames[(nrng->idx)%nrng->nframes];
    88ce:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
    88d2:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
    88d6:	fbb3 f0f1 	udiv	r0, r3, r1
    88da:	fb01 3310 	mls	r3, r1, r0, r3
    88de:	b29b      	uxth	r3, r3
    88e0:	3332      	adds	r3, #50	; 0x32
    88e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (frame->code == UWB_DATA_CODE_DS_TWR_NRNG_FINAL || frame->code == UWB_DATA_CODE_DS_TWR_NRNG_EXT_FINAL){
    88e6:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    88ea:	f240 1143 	movw	r1, #323	; 0x143
    88ee:	428a      	cmp	r2, r1
    88f0:	d002      	beq.n	88f8 <nrng_complete_cb+0x3c>
    88f2:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    88f6:	d103      	bne.n	8900 <nrng_complete_cb+0x44>
        frame->code = UWB_DATA_CODE_DS_TWR_NRNG_END;
    88f8:	2244      	movs	r2, #68	; 0x44
    88fa:	725a      	strb	r2, [r3, #9]
    88fc:	2201      	movs	r2, #1
    88fe:	729a      	strb	r2, [r3, #10]
}
    8900:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    8902:	2300      	movs	r3, #0
    8904:	461a      	mov	r2, r3
    8906:	4619      	mov	r1, r3
    8908:	4618      	mov	r0, r3
    890a:	f000 fc5b 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    890e:	461a      	mov	r2, r3
    8910:	4619      	mov	r1, r3
    8912:	4618      	mov	r0, r3
    8914:	f000 fc56 	bl	91c4 <__assert_func>

00008918 <main>:


int main(int argc, char **argv){
    8918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    891c:	b093      	sub	sp, #76	; 0x4c
    int rc;

    sysinit();
    891e:	f00d fca7 	bl	16270 <sysinit_start>
    8922:	f00e fc7d 	bl	17220 <sysinit_app>
    8926:	f00d fca9 	bl	1627c <sysinit_end>
    uwbcfg_register(&uwb_cb);
    892a:	48ad      	ldr	r0, [pc, #692]	; (8be0 <main+0x2c8>)
    892c:	f00d fe4c 	bl	165c8 <uwbcfg_register>
    conf_load();
    8930:	f00a fc8c 	bl	1324c <conf_load>

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    8934:	2101      	movs	r1, #1
    8936:	201f      	movs	r0, #31
    8938:	f000 fb74 	bl	9024 <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    893c:	2101      	movs	r1, #1
    893e:	201e      	movs	r0, #30
    8940:	f000 fb70 	bl	9024 <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    8944:	2101      	movs	r1, #1
    8946:	2016      	movs	r0, #22
    8948:	f000 fb6c 	bl	9024 <hal_gpio_init_out>

    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    894c:	2000      	movs	r0, #0
    894e:	f000 f991 	bl	8c74 <uwb_dev_idx_lookup>
    8952:	4604      	mov	r4, r0
    udev->config.rxauto_enable = false;
    8954:	f890 352d 	ldrb.w	r3, [r0, #1325]	; 0x52d
    8958:	f36f 0300 	bfc	r3, #0, #1
    895c:	f880 352d 	strb.w	r3, [r0, #1325]	; 0x52d
    udev->config.dblbuffon_enabled = false;
    8960:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    8964:	f36f 1304 	bfc	r3, #4, #1
    8968:	f880 352c 	strb.w	r3, [r0, #1324]	; 0x52c
    return (dev->uw_funcs->uf_set_dblrxbuf(dev, enable));
    896c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    896e:	6a1b      	ldr	r3, [r3, #32]
    8970:	2100      	movs	r1, #0
    8972:	4798      	blx	r3
    uwb_set_dblrxbuff(udev, udev->config.dblbuffon_enabled);

    struct nrng_instance* nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
    8974:	210b      	movs	r1, #11
    8976:	4620      	mov	r0, r4
    8978:	f000 fa01 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(nrng);
    897c:	2800      	cmp	r0, #0
    897e:	d06a      	beq.n	8a56 <main+0x13e>
    8980:	4605      	mov	r5, r0
    memset(ev, 0, sizeof(*ev));
    8982:	4b98      	ldr	r3, [pc, #608]	; (8be4 <main+0x2cc>)
    8984:	2100      	movs	r1, #0
    8986:	6019      	str	r1, [r3, #0]
    8988:	6059      	str	r1, [r3, #4]
    898a:	6099      	str	r1, [r3, #8]
    898c:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    898e:	4a96      	ldr	r2, [pc, #600]	; (8be8 <main+0x2d0>)
    8990:	605a      	str	r2, [r3, #4]
    ev->ev.ev_arg = arg;
    8992:	6098      	str	r0, [r3, #8]

    dpl_event_init(&nrng_complete_event, nrng_complete_cb, nrng);

    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    8994:	223c      	movs	r2, #60	; 0x3c
    8996:	a803      	add	r0, sp, #12
    8998:	f007 fe7f 	bl	1069a <memset>
    899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    89a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    89a4:	9504      	str	r5, [sp, #16]
    89a6:	4b91      	ldr	r3, [pc, #580]	; (8bec <main+0x2d4>)
    89a8:	930e      	str	r3, [sp, #56]	; 0x38
        .id = UWBEXT_APP0,
        .inst_ptr = nrng,
        .complete_cb = complete_cb
    };

    uwb_mac_append_interface(udev, &cbs);
    89aa:	a903      	add	r1, sp, #12
    89ac:	4620      	mov	r0, r4
    89ae:	f000 f991 	bl	8cd4 <uwb_mac_append_interface>
    udev->slot_id = 0xffff;
    89b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    89b6:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
#if MYNEWT_VAL(BLEPRPH_ENABLED)
    ble_init(udev->euid);
#endif
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    89ba:	2101      	movs	r1, #1
    89bc:	4620      	mov	r0, r4
    89be:	f000 f9de 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(ccp);
    89c2:	4606      	mov	r6, r0
    89c4:	2800      	cmp	r0, #0
    89c6:	d04c      	beq.n	8a62 <main+0x14a>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_PAN);
    89c8:	2111      	movs	r1, #17
    89ca:	4620      	mov	r0, r4
    89cc:	f000 f9d7 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(pan);
    89d0:	4607      	mov	r7, r0
    89d2:	2800      	cmp	r0, #0
    89d4:	d04b      	beq.n	8a6e <main+0x156>
    struct uwb_rng_instance* rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    89d6:	2104      	movs	r1, #4
    89d8:	4620      	mov	r0, r4
    89da:	f000 f9d0 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(rng);
    89de:	4681      	mov	r9, r0
    89e0:	2800      	cmp	r0, #0
    89e2:	d04a      	beq.n	8a7a <main+0x162>

    if (udev->role&UWB_ROLE_CCP_MASTER) {
    89e4:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    89e8:	f013 0f01 	tst.w	r3, #1
    89ec:	d04b      	beq.n	8a86 <main+0x16e>
        /* Start as clock-master */
        uwb_ccp_start(ccp, CCP_ROLE_MASTER);
    89ee:	2100      	movs	r1, #0
    89f0:	4630      	mov	r0, r6
    89f2:	f006 fb6c 	bl	f0ce <uwb_ccp_start>
    } else {
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
        uwb_ccp_set_tof_comp_cb(ccp, tof_comp_cb);
    }

    if (udev->role&UWB_ROLE_PAN_MASTER) {
    89f6:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    89fa:	f013 0f02 	tst.w	r3, #2
    89fe:	d050      	beq.n	8aa2 <main+0x18a>
        /* As pan-master, first lookup our address and slot_id */
        struct image_version fw_ver;
        struct panmaster_node *node;
        panmaster_idx_find_node(udev->euid, NETWORK_ROLE_ANCHOR, &node);
    8a00:	f504 6198 	add.w	r1, r4, #1216	; 0x4c0
    8a04:	466b      	mov	r3, sp
    8a06:	2201      	movs	r2, #1
    8a08:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    8a0c:	f003 fc88 	bl	c320 <panmaster_idx_find_node>
        assert(node);
    8a10:	9b00      	ldr	r3, [sp, #0]
    8a12:	2b00      	cmp	r3, #0
    8a14:	d040      	beq.n	8a98 <main+0x180>
        imgr_my_version(&fw_ver);
    8a16:	a801      	add	r0, sp, #4
    8a18:	f008 fc40 	bl	1129c <imgr_my_version>
        node->fw_ver.iv_major = fw_ver.iv_major;
    8a1c:	9b00      	ldr	r3, [sp, #0]
    8a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8a22:	75da      	strb	r2, [r3, #23]
        node->fw_ver.iv_minor = fw_ver.iv_minor;
    8a24:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8a28:	761a      	strb	r2, [r3, #24]
        node->fw_ver.iv_revision = fw_ver.iv_revision;
    8a2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a2e:	f8a3 2019 	strh.w	r2, [r3, #25]
        node->fw_ver.iv_build_num = fw_ver.iv_build_num;
    8a32:	9a02      	ldr	r2, [sp, #8]
    8a34:	f8c3 201b 	str.w	r2, [r3, #27]
        udev->my_short_address = node->addr;
    8a38:	8a1a      	ldrh	r2, [r3, #16]
    8a3a:	f8a4 24b6 	strh.w	r2, [r4, #1206]	; 0x4b6
        udev->slot_id = node->slot_id;
    8a3e:	f8b3 3015 	ldrh.w	r3, [r3, #21]
    8a42:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
        panmaster_postprocess();
    8a46:	f003 fe0f 	bl	c668 <panmaster_postprocess>
        uwb_pan_start(pan, UWB_PAN_ROLE_MASTER, NETWORK_ROLE_ANCHOR);
    8a4a:	2201      	movs	r2, #1
    8a4c:	4611      	mov	r1, r2
    8a4e:	4638      	mov	r0, r7
    8a50:	f007 fa82 	bl	ff58 <uwb_pan_start>
    8a54:	e034      	b.n	8ac0 <main+0x1a8>
    assert(nrng);
    8a56:	2300      	movs	r3, #0
    8a58:	461a      	mov	r2, r3
    8a5a:	4619      	mov	r1, r3
    8a5c:	4618      	mov	r0, r3
    8a5e:	f000 fbb1 	bl	91c4 <__assert_func>
    assert(ccp);
    8a62:	2300      	movs	r3, #0
    8a64:	461a      	mov	r2, r3
    8a66:	4619      	mov	r1, r3
    8a68:	4618      	mov	r0, r3
    8a6a:	f000 fbab 	bl	91c4 <__assert_func>
    assert(pan);
    8a6e:	2300      	movs	r3, #0
    8a70:	461a      	mov	r2, r3
    8a72:	4619      	mov	r1, r3
    8a74:	4618      	mov	r0, r3
    8a76:	f000 fba5 	bl	91c4 <__assert_func>
    assert(rng);
    8a7a:	2300      	movs	r3, #0
    8a7c:	461a      	mov	r2, r3
    8a7e:	4619      	mov	r1, r3
    8a80:	4618      	mov	r0, r3
    8a82:	f000 fb9f 	bl	91c4 <__assert_func>
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
    8a86:	2101      	movs	r1, #1
    8a88:	4630      	mov	r0, r6
    8a8a:	f006 fb20 	bl	f0ce <uwb_ccp_start>
        uwb_ccp_set_tof_comp_cb(ccp, tof_comp_cb);
    8a8e:	4958      	ldr	r1, [pc, #352]	; (8bf0 <main+0x2d8>)
    8a90:	4630      	mov	r0, r6
    8a92:	f006 f9ed 	bl	ee70 <uwb_ccp_set_tof_comp_cb>
    8a96:	e7ae      	b.n	89f6 <main+0xde>
        assert(node);
    8a98:	461a      	mov	r2, r3
    8a9a:	4619      	mov	r1, r3
    8a9c:	4618      	mov	r0, r3
    8a9e:	f000 fb91 	bl	91c4 <__assert_func>
    } else {
        uwb_pan_set_postprocess(pan, pan_complete_cb);
    8aa2:	4954      	ldr	r1, [pc, #336]	; (8bf4 <main+0x2dc>)
    8aa4:	4638      	mov	r0, r7
    8aa6:	f003 fa95 	bl	bfd4 <uwb_pan_set_postprocess>
        network_role_t role = (udev->role&UWB_ROLE_ANCHOR)?
    8aaa:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
            NETWORK_ROLE_ANCHOR : NETWORK_ROLE_TAG;
    8aae:	f013 0f04 	tst.w	r3, #4
    8ab2:	f000 8082 	beq.w	8bba <main+0x2a2>
    8ab6:	2201      	movs	r2, #1
        uwb_pan_start(pan, UWB_PAN_ROLE_RELAY, role);
    8ab8:	2103      	movs	r1, #3
    8aba:	4638      	mov	r0, r7
    8abc:	f007 fa4c 	bl	ff58 <uwb_pan_start>
    }

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8ac0:	f000 fde9 	bl	9696 <os_cputime_get32>
    8ac4:	4606      	mov	r6, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    8ac6:	4a4c      	ldr	r2, [pc, #304]	; (8bf8 <main+0x2e0>)
    8ac8:	4601      	mov	r1, r0
    8aca:	484c      	ldr	r0, [pc, #304]	; (8bfc <main+0x2e4>)
    8acc:	f008 f9fe 	bl	10ecc <printf>
    printf("{\"device_id\":\"%lX\"",udev->device_id);
    8ad0:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
    8ad4:	484a      	ldr	r0, [pc, #296]	; (8c00 <main+0x2e8>)
    8ad6:	f008 f9f9 	bl	10ecc <printf>
    printf(",\"panid\":\"%X\"",udev->pan_id);
    8ada:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
    8ade:	4849      	ldr	r0, [pc, #292]	; (8c04 <main+0x2ec>)
    8ae0:	f008 f9f4 	bl	10ecc <printf>
    printf(",\"addr\":\"%X\"",udev->uid);
    8ae4:	f8b4 14b6 	ldrh.w	r1, [r4, #1206]	; 0x4b6
    8ae8:	4847      	ldr	r0, [pc, #284]	; (8c08 <main+0x2f0>)
    8aea:	f008 f9ef 	bl	10ecc <printf>
    printf(",\"part_id\":\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    8aee:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    8af2:	4846      	ldr	r0, [pc, #280]	; (8c0c <main+0x2f4>)
    8af4:	f008 f9ea 	bl	10ecc <printf>
    printf(",\"lot_id\":\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    8af8:	f8d4 14bc 	ldr.w	r1, [r4, #1212]	; 0x4bc
    8afc:	4844      	ldr	r0, [pc, #272]	; (8c10 <main+0x2f8>)
    8afe:	f008 f9e5 	bl	10ecc <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8b06:	211f      	movs	r1, #31
    8b08:	4620      	mov	r0, r4
    8b0a:	4798      	blx	r3
    8b0c:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime, uwb_phy_frame_duration(udev, sizeof(twr_frame_final_t)));
    8b0e:	4631      	mov	r1, r6
    8b10:	4840      	ldr	r0, [pc, #256]	; (8c14 <main+0x2fc>)
    8b12:	f008 f9db 	bl	10ecc <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    8b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8b1c:	4620      	mov	r0, r4
    8b1e:	4798      	blx	r3
    8b20:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime, uwb_phy_SHR_duration(udev));
    8b22:	4631      	mov	r1, r6
    8b24:	483c      	ldr	r0, [pc, #240]	; (8c18 <main+0x300>)
    8b26:	f008 f9d1 	bl	10ecc <printf>
    printf("{\"utime\": %lu,\"msg\": \"holdoff = %d usec\"}\n",utime,(uint16_t)ceilf(uwb_dwt_usecs_to_usecs(rng->config.tx_holdoff_delay)));
    8b2a:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    8b2e:	f01a fcfd 	bl	2352c <__aeabi_ui2d>
    8b32:	a329      	add	r3, pc, #164	; (adr r3, 8bd8 <main+0x2c0>)
    8b34:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b38:	f01a fd72 	bl	23620 <__aeabi_dmul>
    8b3c:	f01b f868 	bl	23c10 <__aeabi_d2f>
    8b40:	ee00 0a10 	vmov	s0, r0
    8b44:	f01b fbf4 	bl	24330 <ceilf>
    8b48:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    8b4c:	ee17 3a90 	vmov	r3, s15
    8b50:	b29a      	uxth	r2, r3
    8b52:	4631      	mov	r1, r6
    8b54:	4831      	ldr	r0, [pc, #196]	; (8c1c <main+0x304>)
    8b56:	f008 f9b9 	bl	10ecc <printf>

    /* Pan is slots 1&2 */
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    8b5a:	2103      	movs	r1, #3
    8b5c:	4620      	mov	r0, r4
    8b5e:	f000 f90e 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    8b62:	4606      	mov	r6, r0
    8b64:	b358      	cbz	r0, 8bbe <main+0x2a6>
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 1, (void*)pan);
    8b66:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8c2c <main+0x314>
    8b6a:	463b      	mov	r3, r7
    8b6c:	2201      	movs	r2, #1
    8b6e:	4641      	mov	r1, r8
    8b70:	f005 fb44 	bl	e1fc <tdma_assign_slot>
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 2, (void*)pan);
    8b74:	463b      	mov	r3, r7
    8b76:	2202      	movs	r2, #2
    8b78:	4641      	mov	r1, r8
    8b7a:	4630      	mov	r0, r6
    8b7c:	f005 fb3e 	bl	e1fc <tdma_assign_slot>

#if MYNEWT_VAL(SURVEY_ENABLED)
    survey_instance_t *survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_SURVEY);
    8b80:	2150      	movs	r1, #80	; 0x50
    8b82:	4620      	mov	r0, r4
    8b84:	f000 f8fb 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    8b88:	4604      	mov	r4, r0

    tdma_assign_slot(tdma, survey_slot_range_cb, MYNEWT_VAL(SURVEY_RANGE_SLOT), (void*)survey);
    8b8a:	4603      	mov	r3, r0
    8b8c:	2203      	movs	r2, #3
    8b8e:	4924      	ldr	r1, [pc, #144]	; (8c20 <main+0x308>)
    8b90:	4630      	mov	r0, r6
    8b92:	f005 fb33 	bl	e1fc <tdma_assign_slot>
    tdma_assign_slot(tdma, survey_slot_broadcast_cb, MYNEWT_VAL(SURVEY_BROADCAST_SLOT), (void*)survey);
    8b96:	4623      	mov	r3, r4
    8b98:	2204      	movs	r2, #4
    8b9a:	4922      	ldr	r1, [pc, #136]	; (8c24 <main+0x30c>)
    8b9c:	4630      	mov	r0, r6
    8b9e:	f005 fb2d 	bl	e1fc <tdma_assign_slot>
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8ba2:	2406      	movs	r4, #6
    8ba4:	2c9f      	cmp	r4, #159	; 0x9f
    8ba6:	d810      	bhi.n	8bca <main+0x2b2>
#else
    for (uint16_t i = 3; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
#endif
        tdma_assign_slot(tdma, slot_cb, i, (void*)nrng);
    8ba8:	462b      	mov	r3, r5
    8baa:	4622      	mov	r2, r4
    8bac:	491e      	ldr	r1, [pc, #120]	; (8c28 <main+0x310>)
    8bae:	4630      	mov	r0, r6
    8bb0:	f005 fb24 	bl	e1fc <tdma_assign_slot>
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8bb4:	3401      	adds	r4, #1
    8bb6:	b2a4      	uxth	r4, r4
    8bb8:	e7f4      	b.n	8ba4 <main+0x28c>
            NETWORK_ROLE_ANCHOR : NETWORK_ROLE_TAG;
    8bba:	2202      	movs	r2, #2
    8bbc:	e77c      	b.n	8ab8 <main+0x1a0>
    assert(tdma);
    8bbe:	2300      	movs	r3, #0
    8bc0:	461a      	mov	r2, r3
    8bc2:	4619      	mov	r1, r3
    8bc4:	4618      	mov	r0, r3
    8bc6:	f000 fafd 	bl	91c4 <__assert_func>

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    8bca:	f000 feeb 	bl	99a4 <os_eventq_dflt_get>
    8bce:	f000 febb 	bl	9948 <os_eventq_run>
    while (1) {
    8bd2:	e7fa      	b.n	8bca <main+0x2b2>
    8bd4:	f3af 8000 	nop.w
    8bd8:	90690691 	.word	0x90690691
    8bdc:	3ff06906 	.word	0x3ff06906
    8be0:	20000540 	.word	0x20000540
    8be4:	200013d0 	.word	0x200013d0
    8be8:	000088bd 	.word	0x000088bd
    8bec:	00008899 	.word	0x00008899
    8bf0:	00008871 	.word	0x00008871
    8bf4:	00008699 	.word	0x00008699
    8bf8:	00025144 	.word	0x00025144
    8bfc:	00025168 	.word	0x00025168
    8c00:	00025188 	.word	0x00025188
    8c04:	0002519c 	.word	0x0002519c
    8c08:	000251ac 	.word	0x000251ac
    8c0c:	000251bc 	.word	0x000251bc
    8c10:	000251d0 	.word	0x000251d0
    8c14:	000251e4 	.word	0x000251e4
    8c18:	00025218 	.word	0x00025218
    8c1c:	00025248 	.word	0x00025248
    8c20:	0000d9ab 	.word	0x0000d9ab
    8c24:	0000dc71 	.word	0x0000dc71
    8c28:	000086f5 	.word	0x000086f5
    8c2c:	0000ffd1 	.word	0x0000ffd1

00008c30 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    8c30:	4a09      	ldr	r2, [pc, #36]	; (8c58 <NVIC_Relocate+0x28>)
    8c32:	4b0a      	ldr	r3, [pc, #40]	; (8c5c <NVIC_Relocate+0x2c>)
    8c34:	429a      	cmp	r2, r3
    8c36:	d00a      	beq.n	8c4e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8c38:	2300      	movs	r3, #0
    8c3a:	e006      	b.n	8c4a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    8c3c:	4a07      	ldr	r2, [pc, #28]	; (8c5c <NVIC_Relocate+0x2c>)
    8c3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    8c42:	4a05      	ldr	r2, [pc, #20]	; (8c58 <NVIC_Relocate+0x28>)
    8c44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8c48:	3301      	adds	r3, #1
    8c4a:	2b35      	cmp	r3, #53	; 0x35
    8c4c:	ddf6      	ble.n	8c3c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    8c4e:	4a02      	ldr	r2, [pc, #8]	; (8c58 <NVIC_Relocate+0x28>)
    8c50:	4b03      	ldr	r3, [pc, #12]	; (8c60 <NVIC_Relocate+0x30>)
    8c52:	609a      	str	r2, [r3, #8]
#endif
}
    8c54:	4770      	bx	lr
    8c56:	bf00      	nop
    8c58:	20000000 	.word	0x20000000
    8c5c:	00008020 	.word	0x00008020
    8c60:	e000ed00 	.word	0xe000ed00

00008c64 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8c64:	b510      	push	{r4, lr}
    8c66:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    8c68:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8c6c:	f000 fe6c 	bl	9948 <os_eventq_run>
    8c70:	e7fa      	b.n	8c68 <uwb_interrupt_task+0x4>
	...

00008c74 <uwb_dev_idx_lookup>:
{
    8c74:	b510      	push	{r4, lr}
    8c76:	b08a      	sub	sp, #40	; 0x28
    8c78:	4604      	mov	r4, r0
    const char base1k[] = "dw1000_%d";
    8c7a:	4b14      	ldr	r3, [pc, #80]	; (8ccc <uwb_dev_idx_lookup+0x58>)
    8c7c:	f10d 0c1c 	add.w	ip, sp, #28
    8c80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8c84:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8c88:	f8ac 2000 	strh.w	r2, [ip]
    const char base3k[] = "dw3000_%d";
    8c8c:	4b10      	ldr	r3, [pc, #64]	; (8cd0 <uwb_dev_idx_lookup+0x5c>)
    8c8e:	f10d 0c10 	add.w	ip, sp, #16
    8c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8c96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8c9a:	f8ac 2000 	strh.w	r2, [ip]
    snprintf(buf, sizeof buf, base1k, idx);
    8c9e:	4623      	mov	r3, r4
    8ca0:	aa07      	add	r2, sp, #28
    8ca2:	210c      	movs	r1, #12
    8ca4:	a801      	add	r0, sp, #4
    8ca6:	f008 f940 	bl	10f2a <snprintf>
    odev = os_dev_lookup(buf);
    8caa:	a801      	add	r0, sp, #4
    8cac:	f000 fd94 	bl	97d8 <os_dev_lookup>
    if (!odev) {
    8cb0:	b108      	cbz	r0, 8cb6 <uwb_dev_idx_lookup+0x42>
}
    8cb2:	b00a      	add	sp, #40	; 0x28
    8cb4:	bd10      	pop	{r4, pc}
        snprintf(buf, sizeof buf, base3k, idx);
    8cb6:	4623      	mov	r3, r4
    8cb8:	aa04      	add	r2, sp, #16
    8cba:	210c      	movs	r1, #12
    8cbc:	a801      	add	r0, sp, #4
    8cbe:	f008 f934 	bl	10f2a <snprintf>
        odev = os_dev_lookup(buf);
    8cc2:	a801      	add	r0, sp, #4
    8cc4:	f000 fd88 	bl	97d8 <os_dev_lookup>
    return (struct uwb_dev*)odev;
    8cc8:	e7f3      	b.n	8cb2 <uwb_dev_idx_lookup+0x3e>
    8cca:	bf00      	nop
    8ccc:	00025274 	.word	0x00025274
    8cd0:	00025280 	.word	0x00025280

00008cd4 <uwb_mac_append_interface>:
{
    8cd4:	b508      	push	{r3, lr}
    assert(dev);
    8cd6:	b148      	cbz	r0, 8cec <uwb_mac_append_interface+0x18>
    assert(cbs);
    8cd8:	b171      	cbz	r1, 8cf8 <uwb_mac_append_interface+0x24>
    cbs->status.initialized = true;
    8cda:	780b      	ldrb	r3, [r1, #0]
    8cdc:	f043 0301 	orr.w	r3, r3, #1
    8ce0:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8ce2:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8ce6:	b1b3      	cbz	r3, 8d16 <uwb_mac_append_interface+0x42>
        struct uwb_mac_interface * prev_cbs = NULL;
    8ce8:	2200      	movs	r2, #0
    8cea:	e00d      	b.n	8d08 <uwb_mac_append_interface+0x34>
    assert(dev);
    8cec:	2300      	movs	r3, #0
    8cee:	461a      	mov	r2, r3
    8cf0:	4619      	mov	r1, r3
    8cf2:	4618      	mov	r0, r3
    8cf4:	f000 fa66 	bl	91c4 <__assert_func>
    assert(cbs);
    8cf8:	2300      	movs	r3, #0
    8cfa:	461a      	mov	r2, r3
    8cfc:	4619      	mov	r1, r3
    8cfe:	4618      	mov	r0, r3
    8d00:	f000 fa60 	bl	91c4 <__assert_func>
            prev_cbs = cur_cbs;
    8d04:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d1fb      	bne.n	8d04 <uwb_mac_append_interface+0x30>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8d0c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8d0e:	638b      	str	r3, [r1, #56]	; 0x38
    8d10:	6391      	str	r1, [r2, #56]	; 0x38
}
    8d12:	4608      	mov	r0, r1
    8d14:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8d16:	638b      	str	r3, [r1, #56]	; 0x38
    8d18:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    8d1c:	e7f9      	b.n	8d12 <uwb_mac_append_interface+0x3e>

00008d1e <uwb_mac_remove_interface>:
{
    8d1e:	b508      	push	{r3, lr}
    assert(dev);
    8d20:	b148      	cbz	r0, 8d36 <uwb_mac_remove_interface+0x18>
    8d22:	4684      	mov	ip, r0
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d24:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8d28:	4603      	mov	r3, r0
    8d2a:	b193      	cbz	r3, 8d52 <uwb_mac_remove_interface+0x34>
        if(cbs->id == id){
    8d2c:	885a      	ldrh	r2, [r3, #2]
    8d2e:	428a      	cmp	r2, r1
    8d30:	d007      	beq.n	8d42 <uwb_mac_remove_interface+0x24>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8d34:	e7f9      	b.n	8d2a <uwb_mac_remove_interface+0xc>
    assert(dev);
    8d36:	2300      	movs	r3, #0
    8d38:	461a      	mov	r2, r3
    8d3a:	4619      	mov	r1, r3
    8d3c:	4618      	mov	r0, r3
    8d3e:	f000 fa41 	bl	91c4 <__assert_func>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8d42:	4283      	cmp	r3, r0
    8d44:	d006      	beq.n	8d54 <uwb_mac_remove_interface+0x36>
    8d46:	4602      	mov	r2, r0
    8d48:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8d4a:	4298      	cmp	r0, r3
    8d4c:	d1fb      	bne.n	8d46 <uwb_mac_remove_interface+0x28>
    8d4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8d50:	6393      	str	r3, [r2, #56]	; 0x38
}
    8d52:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8d54:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8d56:	f8cc 3530 	str.w	r3, [ip, #1328]	; 0x530
    8d5a:	e7fa      	b.n	8d52 <uwb_mac_remove_interface+0x34>

00008d5c <uwb_mac_get_interface>:
{
    8d5c:	b508      	push	{r3, lr}
    assert(dev);
    8d5e:	b138      	cbz	r0, 8d70 <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d60:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8d64:	b150      	cbz	r0, 8d7c <uwb_mac_get_interface+0x20>
        if(cbs->id == id){
    8d66:	8843      	ldrh	r3, [r0, #2]
    8d68:	428b      	cmp	r3, r1
    8d6a:	d007      	beq.n	8d7c <uwb_mac_get_interface+0x20>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d6c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8d6e:	e7f9      	b.n	8d64 <uwb_mac_get_interface+0x8>
    assert(dev);
    8d70:	2300      	movs	r3, #0
    8d72:	461a      	mov	r2, r3
    8d74:	4619      	mov	r1, r3
    8d76:	4618      	mov	r0, r3
    8d78:	f000 fa24 	bl	91c4 <__assert_func>
}
    8d7c:	bd08      	pop	{r3, pc}

00008d7e <uwb_mac_find_cb_inst_ptr>:
{
    8d7e:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8d80:	f7ff ffec 	bl	8d5c <uwb_mac_get_interface>
    if (cbs) {
    8d84:	4603      	mov	r3, r0
    8d86:	b100      	cbz	r0, 8d8a <uwb_mac_find_cb_inst_ptr+0xc>
        return cbs->inst_ptr;
    8d88:	6843      	ldr	r3, [r0, #4]
}
    8d8a:	4618      	mov	r0, r3
    8d8c:	bd08      	pop	{r3, pc}
	...

00008d90 <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8d90:	b570      	push	{r4, r5, r6, lr}
    8d92:	b084      	sub	sp, #16
    8d94:	4604      	mov	r4, r0
    8d96:	460d      	mov	r5, r1
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8d98:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    return os_eventq_inited((struct os_eventq *) evq);
    8d9c:	4630      	mov	r0, r6
    8d9e:	f000 fd4e 	bl	983e <os_eventq_inited>
    8da2:	b108      	cbz	r0, 8da8 <uwb_task_init+0x18>
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8da4:	b004      	add	sp, #16
    8da6:	bd70      	pop	{r4, r5, r6, pc}
    os_eventq_init((struct os_eventq *) evq);
    8da8:	4630      	mov	r0, r6
    8daa:	f000 fd3f 	bl	982c <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8dae:	2300      	movs	r3, #0
    8db0:	64e3      	str	r3, [r4, #76]	; 0x4c
    8db2:	6523      	str	r3, [r4, #80]	; 0x50
    8db4:	6563      	str	r3, [r4, #84]	; 0x54
    8db6:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
    8db8:	6525      	str	r5, [r4, #80]	; 0x50
    ev->ev.ev_arg = arg;
    8dba:	6564      	str	r4, [r4, #84]	; 0x54
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8dbc:	2101      	movs	r1, #1
    8dbe:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8dc2:	f001 f959 	bl	a078 <os_sem_init>
        assert(rc == DPL_OK);
    8dc6:	b998      	cbnz	r0, 8df0 <uwb_task_init+0x60>
        dpl_task_init(&inst->task_str, "uwb_irq",
    8dc8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                      inst->task_stack,
    8dcc:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
    8dd4:	9103      	str	r1, [sp, #12]
    8dd6:	9202      	str	r2, [sp, #8]
    8dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8ddc:	9201      	str	r2, [sp, #4]
    8dde:	9300      	str	r3, [sp, #0]
    8de0:	4623      	mov	r3, r4
    8de2:	4a06      	ldr	r2, [pc, #24]	; (8dfc <uwb_task_init+0x6c>)
    8de4:	4906      	ldr	r1, [pc, #24]	; (8e00 <uwb_task_init+0x70>)
    8de6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8dea:	f001 f9e5 	bl	a1b8 <os_task_init>
}
    8dee:	e7d9      	b.n	8da4 <uwb_task_init+0x14>
        assert(rc == DPL_OK);
    8df0:	2300      	movs	r3, #0
    8df2:	461a      	mov	r2, r3
    8df4:	4619      	mov	r1, r3
    8df6:	4618      	mov	r0, r3
    8df8:	f000 f9e4 	bl	91c4 <__assert_func>
    8dfc:	00008c65 	.word	0x00008c65
    8e00:	0002528c 	.word	0x0002528c

00008e04 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8e04:	b510      	push	{r4, lr}
    8e06:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8e08:	303c      	adds	r0, #60	; 0x3c
    8e0a:	f000 fd18 	bl	983e <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8e0e:	b900      	cbnz	r0, 8e12 <uwb_task_deinit+0xe>
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8e10:	bd10      	pop	{r4, pc}
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8e12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8e16:	f001 fa3b 	bl	a290 <os_task_remove>
    8e1a:	e7f9      	b.n	8e10 <uwb_task_deinit+0xc>

00008e1c <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    8e1c:	b510      	push	{r4, lr}
    8e1e:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8e20:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    8e24:	b11b      	cbz	r3, 8e2e <uwb_dev_init+0x12>
#else
        inst->txbuf = malloc(inst->txbuf_size);
        assert(inst->txbuf);
#endif
    }
    if (!inst->rxbuf) {
    8e26:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8e2a:	b173      	cbz	r3, 8e4a <uwb_dev_init+0x2e>
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
        assert(inst->rxbuf);
#endif
    }
}
    8e2c:	bd10      	pop	{r4, pc}
        inst->txbuf = malloc(inst->txbuf_size);
    8e2e:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8e32:	f007 fbb5 	bl	105a0 <malloc>
    8e36:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8e3a:	2800      	cmp	r0, #0
    8e3c:	d1f3      	bne.n	8e26 <uwb_dev_init+0xa>
    8e3e:	2300      	movs	r3, #0
    8e40:	461a      	mov	r2, r3
    8e42:	4619      	mov	r1, r3
    8e44:	4618      	mov	r0, r3
    8e46:	f000 f9bd 	bl	91c4 <__assert_func>
        inst->rxbuf = malloc(inst->rxbuf_size);
    8e4a:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8e4e:	f007 fba7 	bl	105a0 <malloc>
    8e52:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8e56:	2800      	cmp	r0, #0
    8e58:	d1e8      	bne.n	8e2c <uwb_dev_init+0x10>
    8e5a:	2300      	movs	r3, #0
    8e5c:	461a      	mov	r2, r3
    8e5e:	4619      	mov	r1, r3
    8e60:	4618      	mov	r0, r3
    8e62:	f000 f9af 	bl	91c4 <__assert_func>
	...

00008e68 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8e68:	b508      	push	{r3, lr}
    8e6a:	ed2d 8b02 	vpush	{d8}
    8e6e:	ee10 3a10 	vmov	r3, s0
    8e72:	eeb0 8a60 	vmov.f32	s16, s1
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8e76:	3801      	subs	r0, #1
    8e78:	2808      	cmp	r0, #8
    8e7a:	d839      	bhi.n	8ef0 <uwb_calc_aoa+0x88>
    8e7c:	e8df f000 	tbb	[pc, r0]
    8e80:	2c05413e 	.word	0x2c05413e
    8e84:	3832382f 	.word	0x3832382f
    8e88:	35          	.byte	0x35
    8e89:	00          	.byte	0x00
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8e8a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8f10 <uwb_calc_aoa+0xa8>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8e8e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8f14 <uwb_calc_aoa+0xac>
    8e92:	eec7 8a87 	vdiv.f32	s17, s15, s14
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8e96:	4618      	mov	r0, r3
    8e98:	f01a fb6a 	bl	23570 <__aeabi_f2d>
    8e9c:	a31a      	add	r3, pc, #104	; (adr r3, 8f08 <uwb_calc_aoa+0xa0>)
    8e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ea2:	f01a fce7 	bl	23874 <__aeabi_ddiv>
    8ea6:	f01a feb3 	bl	23c10 <__aeabi_d2f>
    8eaa:	ee07 0a90 	vmov	s15, r0
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8eae:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return DPL_FLOAT32_FROM_F64(
    8eb2:	eec8 7a88 	vdiv.f32	s15, s17, s16
    8eb6:	ee17 0a90 	vmov	r0, s15
    8eba:	f01a fb59 	bl	23570 <__aeabi_f2d>
    8ebe:	ec41 0b10 	vmov	d0, r0, r1
    8ec2:	f01b fa7b 	bl	243bc <asin>
    8ec6:	ec51 0b10 	vmov	r0, r1, d0
    8eca:	f01a fea1 	bl	23c10 <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8ece:	ee00 0a10 	vmov	s0, r0
    8ed2:	ecbd 8b02 	vpop	{d8}
    8ed6:	bd08      	pop	{r3, pc}
    case (4): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_4);break;
    8ed8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8f10 <uwb_calc_aoa+0xa8>
    8edc:	e7d7      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8ede:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8f18 <uwb_calc_aoa+0xb0>
    8ee2:	e7d4      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    8ee4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8f18 <uwb_calc_aoa+0xb0>
    8ee8:	e7d1      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8eea:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8f1c <uwb_calc_aoa+0xb4>
    8eee:	e7ce      	b.n	8e8e <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8ef0:	2300      	movs	r3, #0
    8ef2:	461a      	mov	r2, r3
    8ef4:	4619      	mov	r1, r3
    8ef6:	4618      	mov	r0, r3
    8ef8:	f000 f964 	bl	91c4 <__assert_func>
    switch(channel) {
    8efc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8f20 <uwb_calc_aoa+0xb8>
    8f00:	e7c5      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    8f02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8f24 <uwb_calc_aoa+0xbc>
    8f06:	e7c2      	b.n	8e8e <uwb_calc_aoa+0x26>
    8f08:	54442d18 	.word	0x54442d18
    8f0c:	401921fb 	.word	0x401921fb
    8f10:	4f85e558 	.word	0x4f85e558
    8f14:	4d8ef3c2 	.word	0x4d8ef3c2
    8f18:	4fc167b8 	.word	0x4fc167b8
    8f1c:	4fee0980 	.word	0x4fee0980
    8f20:	4f504850 	.word	0x4f504850
    8f24:	4f6e0980 	.word	0x4f6e0980

00008f28 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    8f28:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8f2a:	2400      	movs	r4, #0
    8f2c:	e000      	b.n	8f30 <hal_gpio_irq_handler+0x8>
    8f2e:	3401      	adds	r4, #1
    8f30:	2c07      	cmp	r4, #7
    8f32:	dc1c      	bgt.n	8f6e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8f34:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8f38:	4a0d      	ldr	r2, [pc, #52]	; (8f70 <hal_gpio_irq_handler+0x48>)
    8f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d0f5      	beq.n	8f2e <hal_gpio_irq_handler+0x6>
    8f42:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8f46:	2301      	movs	r3, #1
    8f48:	40a3      	lsls	r3, r4
    8f4a:	421a      	tst	r2, r3
    8f4c:	d0ef      	beq.n	8f2e <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8f4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8f52:	4a07      	ldr	r2, [pc, #28]	; (8f70 <hal_gpio_irq_handler+0x48>)
    8f54:	2100      	movs	r1, #0
    8f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
    8f5a:	4b06      	ldr	r3, [pc, #24]	; (8f74 <hal_gpio_irq_handler+0x4c>)
    8f5c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    8f60:	2a00      	cmp	r2, #0
    8f62:	d0e4      	beq.n	8f2e <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    8f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8f68:	6858      	ldr	r0, [r3, #4]
    8f6a:	4790      	blx	r2
    8f6c:	e7df      	b.n	8f2e <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
    8f6e:	bd10      	pop	{r4, pc}
    8f70:	40006000 	.word	0x40006000
    8f74:	200013e4 	.word	0x200013e4

00008f78 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
    8f78:	4b06      	ldr	r3, [pc, #24]	; (8f94 <hal_gpio_irq_setup+0x1c>)
    8f7a:	781b      	ldrb	r3, [r3, #0]
    8f7c:	b94b      	cbnz	r3, 8f92 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8f7e:	4b06      	ldr	r3, [pc, #24]	; (8f98 <hal_gpio_irq_setup+0x20>)
    8f80:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8f82:	4a06      	ldr	r2, [pc, #24]	; (8f9c <hal_gpio_irq_setup+0x24>)
    8f84:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f86:	4b06      	ldr	r3, [pc, #24]	; (8fa0 <hal_gpio_irq_setup+0x28>)
    8f88:	2240      	movs	r2, #64	; 0x40
    8f8a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
    8f8c:	4b01      	ldr	r3, [pc, #4]	; (8f94 <hal_gpio_irq_setup+0x1c>)
    8f8e:	2201      	movs	r2, #1
    8f90:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
    8f92:	4770      	bx	lr
    8f94:	20001424 	.word	0x20001424
    8f98:	e000ed00 	.word	0xe000ed00
    8f9c:	00008f29 	.word	0x00008f29
    8fa0:	e000e100 	.word	0xe000e100

00008fa4 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8fa4:	2000      	movs	r0, #0
    8fa6:	2807      	cmp	r0, #7
    8fa8:	dc05      	bgt.n	8fb6 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
    8faa:	4b04      	ldr	r3, [pc, #16]	; (8fbc <hal_gpio_find_empty_slot+0x18>)
    8fac:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8fb0:	b11b      	cbz	r3, 8fba <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8fb2:	3001      	adds	r0, #1
    8fb4:	e7f7      	b.n	8fa6 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
    8fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8fba:	4770      	bx	lr
    8fbc:	200013e4 	.word	0x200013e4

00008fc0 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    8fc0:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8fc2:	2000      	movs	r0, #0
    8fc4:	e000      	b.n	8fc8 <hal_gpio_find_pin+0x8>
    8fc6:	3001      	adds	r0, #1
    8fc8:	2807      	cmp	r0, #7
    8fca:	dc0e      	bgt.n	8fea <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
    8fcc:	4b08      	ldr	r3, [pc, #32]	; (8ff0 <hal_gpio_find_pin+0x30>)
    8fce:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d0f7      	beq.n	8fc6 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8fd6:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    8fda:	4a06      	ldr	r2, [pc, #24]	; (8ff4 <hal_gpio_find_pin+0x34>)
    8fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    8fe4:	428b      	cmp	r3, r1
    8fe6:	d1ee      	bne.n	8fc6 <hal_gpio_find_pin+0x6>
    8fe8:	e001      	b.n	8fee <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
    8fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8fee:	4770      	bx	lr
    8ff0:	200013e4 	.word	0x200013e4
    8ff4:	40006000 	.word	0x40006000

00008ff8 <hal_gpio_init_in>:
    switch (pull) {
    8ff8:	2901      	cmp	r1, #1
    8ffa:	d00f      	beq.n	901c <hal_gpio_init_in+0x24>
    8ffc:	2902      	cmp	r1, #2
    8ffe:	d10f      	bne.n	9020 <hal_gpio_init_in+0x28>
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
    9000:	2304      	movs	r3, #4
    port->PIN_CNF[pin_index] = conf;
    9002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9006:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    900a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    900e:	2301      	movs	r3, #1
    9010:	fa03 f000 	lsl.w	r0, r3, r0
    9014:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    9018:	2000      	movs	r0, #0
    901a:	4770      	bx	lr
    switch (pull) {
    901c:	230c      	movs	r3, #12
    901e:	e7f0      	b.n	9002 <hal_gpio_init_in+0xa>
        conf = 0;
    9020:	2300      	movs	r3, #0
    9022:	e7ee      	b.n	9002 <hal_gpio_init_in+0xa>

00009024 <hal_gpio_init_out>:
    if (val) {
    9024:	b199      	cbz	r1, 904e <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    9026:	2301      	movs	r3, #1
    9028:	4083      	lsls	r3, r0
    902a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    902e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    9032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9036:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    903a:	2103      	movs	r1, #3
    903c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    9040:	2301      	movs	r3, #1
    9042:	fa03 f000 	lsl.w	r0, r3, r0
    9046:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
    904a:	2000      	movs	r0, #0
    904c:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    904e:	2301      	movs	r3, #1
    9050:	4083      	lsls	r3, r0
    9052:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9056:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    905a:	e7ea      	b.n	9032 <hal_gpio_init_out+0xe>

0000905c <hal_gpio_write>:
    if (val) {
    905c:	b139      	cbz	r1, 906e <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    905e:	2301      	movs	r3, #1
    9060:	fa03 f000 	lsl.w	r0, r3, r0
    9064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9068:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    906c:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    906e:	2301      	movs	r3, #1
    9070:	fa03 f000 	lsl.w	r0, r3, r0
    9074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9078:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    907c:	4770      	bx	lr

0000907e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    907e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9082:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    9086:	2301      	movs	r3, #1
    9088:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    908a:	421a      	tst	r2, r3
    908c:	d008      	beq.n	90a0 <hal_gpio_read+0x22>
    908e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9092:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    9096:	fa23 f000 	lsr.w	r0, r3, r0
    909a:	f000 0001 	and.w	r0, r0, #1
    909e:	4770      	bx	lr
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    90a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    90a4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    90a8:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    90ac:	f000 0001 	and.w	r0, r0, #1
}
    90b0:	4770      	bx	lr

000090b2 <hal_gpio_toggle>:
{
    90b2:	b538      	push	{r3, r4, r5, lr}
    90b4:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    90b6:	f7ff ffe2 	bl	907e <hal_gpio_read>
    90ba:	fab0 f480 	clz	r4, r0
    90be:	0964      	lsrs	r4, r4, #5
    hal_gpio_write(pin, pin_state);
    90c0:	4621      	mov	r1, r4
    90c2:	4628      	mov	r0, r5
    90c4:	f7ff ffca 	bl	905c <hal_gpio_write>
}
    90c8:	4620      	mov	r0, r4
    90ca:	bd38      	pop	{r3, r4, r5, pc}

000090cc <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    90cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90d0:	4606      	mov	r6, r0
    90d2:	4688      	mov	r8, r1
    90d4:	4617      	mov	r7, r2
    90d6:	461d      	mov	r5, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
    90d8:	f7ff ff4e 	bl	8f78 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
    90dc:	f7ff ff62 	bl	8fa4 <hal_gpio_find_empty_slot>
    if (i < 0) {
    90e0:	1e04      	subs	r4, r0, #0
    90e2:	db27      	blt.n	9134 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
    90e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    90e8:	4630      	mov	r0, r6
    90ea:	f7ff ff85 	bl	8ff8 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
    90ee:	2d02      	cmp	r5, #2
    90f0:	d01a      	beq.n	9128 <hal_gpio_irq_init+0x5c>
    90f2:	2d03      	cmp	r5, #3
    90f4:	d01b      	beq.n	912e <hal_gpio_irq_init+0x62>
    90f6:	2d01      	cmp	r5, #1
    90f8:	d002      	beq.n	9100 <hal_gpio_irq_init+0x34>
    90fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    90fe:	e011      	b.n	9124 <hal_gpio_irq_init+0x58>
    9100:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        break;
    default:
        return -1;
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    9104:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    9108:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
    910c:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    9110:	4b0a      	ldr	r3, [pc, #40]	; (913c <hal_gpio_irq_init+0x70>)
    9112:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
    9116:	480a      	ldr	r0, [pc, #40]	; (9140 <hal_gpio_irq_init+0x74>)
    9118:	f840 8034 	str.w	r8, [r0, r4, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    911c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    9120:	6047      	str	r7, [r0, #4]

    return 0;
    9122:	2000      	movs	r0, #0
}
    9124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
    9128:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    912c:	e7ea      	b.n	9104 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
    912e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    9132:	e7e7      	b.n	9104 <hal_gpio_irq_init+0x38>
        return -1;
    9134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9138:	e7f4      	b.n	9124 <hal_gpio_irq_init+0x58>
    913a:	bf00      	nop
    913c:	40006000 	.word	0x40006000
    9140:	200013e4 	.word	0x200013e4

00009144 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    9144:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    9146:	f7ff ff3b 	bl	8fc0 <hal_gpio_find_pin>
    if (i < 0) {
    914a:	2800      	cmp	r0, #0
    914c:	db0a      	blt.n	9164 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    914e:	4a06      	ldr	r2, [pc, #24]	; (9168 <hal_gpio_irq_enable+0x24>)
    9150:	f100 0340 	add.w	r3, r0, #64	; 0x40
    9154:	2100      	movs	r1, #0
    9156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    915a:	2301      	movs	r3, #1
    915c:	fa03 f000 	lsl.w	r0, r3, r0
    9160:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    9164:	bd08      	pop	{r3, pc}
    9166:	bf00      	nop
    9168:	40006000 	.word	0x40006000

0000916c <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    916c:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    916e:	f7ff ff27 	bl	8fc0 <hal_gpio_find_pin>
    if (i < 0) {
    9172:	2800      	cmp	r0, #0
    9174:	db05      	blt.n	9182 <hal_gpio_irq_disable+0x16>

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    9176:	2301      	movs	r3, #1
    9178:	fa03 f000 	lsl.w	r0, r3, r0
    917c:	4b01      	ldr	r3, [pc, #4]	; (9184 <hal_gpio_irq_disable+0x18>)
    917e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
#endif
}
    9182:	bd08      	pop	{r3, pc}
    9184:	40006000 	.word	0x40006000

00009188 <hal_gpio_irq_release>:
{
    9188:	b538      	push	{r3, r4, r5, lr}
    918a:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    918c:	f7ff ff18 	bl	8fc0 <hal_gpio_find_pin>
    if (i < 0) {
    9190:	1e04      	subs	r4, r0, #0
    9192:	db12      	blt.n	91ba <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    9194:	4628      	mov	r0, r5
    9196:	f7ff ffe9 	bl	916c <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    919a:	4a08      	ldr	r2, [pc, #32]	; (91bc <hal_gpio_irq_release+0x34>)
    919c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    91a0:	2300      	movs	r3, #0
    91a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    91a6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    91aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    hal_gpio_irqs[i].arg = NULL;
    91ae:	4a04      	ldr	r2, [pc, #16]	; (91c0 <hal_gpio_irq_release+0x38>)
    91b0:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    91b4:	604b      	str	r3, [r1, #4]
    hal_gpio_irqs[i].func = NULL;
    91b6:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
}
    91ba:	bd38      	pop	{r3, r4, r5, pc}
    91bc:	40006000 	.word	0x40006000
    91c0:	200013e4 	.word	0x200013e4

000091c4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    91c4:	b508      	push	{r3, lr}
    91c6:	4675      	mov	r5, lr
    91c8:	4604      	mov	r4, r0
    91ca:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    91cc:	f001 fa54 	bl	a678 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    91d0:	f00a fc3a 	bl	13a48 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    91d4:	b18c      	cbz	r4, 91fa <__assert_func+0x36>
    91d6:	4633      	mov	r3, r6
    91d8:	4622      	mov	r2, r4
    91da:	4629      	mov	r1, r5
    91dc:	4809      	ldr	r0, [pc, #36]	; (9204 <__assert_func+0x40>)
    91de:	f00a fe19 	bl	13e14 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    91e2:	f7fe ffed 	bl	81c0 <hal_debugger_connected>
    91e6:	b100      	cbz	r0, 91ea <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    91e8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    91ea:	4b07      	ldr	r3, [pc, #28]	; (9208 <__assert_func+0x44>)
    91ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    91f0:	605a      	str	r2, [r3, #4]
    asm("isb");
    91f2:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    91f6:	f7fe ffeb 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    91fa:	4629      	mov	r1, r5
    91fc:	4803      	ldr	r0, [pc, #12]	; (920c <__assert_func+0x48>)
    91fe:	f00a fe09 	bl	13e14 <console_printf>
    9202:	e7ee      	b.n	91e2 <__assert_func+0x1e>
    9204:	000252a4 	.word	0x000252a4
    9208:	e000ed00 	.word	0xe000ed00
    920c:	00025294 	.word	0x00025294

00009210 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    9210:	b500      	push	{lr}
    9212:	b083      	sub	sp, #12
    9214:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    9216:	f00a fc17 	bl	13a48 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    921a:	4d1b      	ldr	r5, [pc, #108]	; (9288 <os_default_irq+0x78>)
    921c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    921e:	6822      	ldr	r2, [r4, #0]
    9220:	f3c1 0108 	ubfx	r1, r1, #0, #9
    9224:	4819      	ldr	r0, [pc, #100]	; (928c <os_default_irq+0x7c>)
    9226:	f00a fdf5 	bl	13e14 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    922a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    922c:	6883      	ldr	r3, [r0, #8]
    922e:	6842      	ldr	r2, [r0, #4]
    9230:	6801      	ldr	r1, [r0, #0]
    9232:	68c0      	ldr	r0, [r0, #12]
    9234:	9000      	str	r0, [sp, #0]
    9236:	4816      	ldr	r0, [pc, #88]	; (9290 <os_default_irq+0x80>)
    9238:	f00a fdec 	bl	13e14 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    923c:	6923      	ldr	r3, [r4, #16]
    923e:	9300      	str	r3, [sp, #0]
    9240:	68e3      	ldr	r3, [r4, #12]
    9242:	68a2      	ldr	r2, [r4, #8]
    9244:	6861      	ldr	r1, [r4, #4]
    9246:	4813      	ldr	r0, [pc, #76]	; (9294 <os_default_irq+0x84>)
    9248:	f00a fde4 	bl	13e14 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    924c:	6a23      	ldr	r3, [r4, #32]
    924e:	9300      	str	r3, [sp, #0]
    9250:	69e3      	ldr	r3, [r4, #28]
    9252:	69a2      	ldr	r2, [r4, #24]
    9254:	6961      	ldr	r1, [r4, #20]
    9256:	4810      	ldr	r0, [pc, #64]	; (9298 <os_default_irq+0x88>)
    9258:	f00a fddc 	bl	13e14 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    925c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    925e:	6983      	ldr	r3, [r0, #24]
    9260:	6942      	ldr	r2, [r0, #20]
    9262:	6901      	ldr	r1, [r0, #16]
    9264:	69c0      	ldr	r0, [r0, #28]
    9266:	9000      	str	r0, [sp, #0]
    9268:	480c      	ldr	r0, [pc, #48]	; (929c <os_default_irq+0x8c>)
    926a:	f00a fdd3 	bl	13e14 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    926e:	6869      	ldr	r1, [r5, #4]
    9270:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    9272:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9274:	480a      	ldr	r0, [pc, #40]	; (92a0 <os_default_irq+0x90>)
    9276:	f00a fdcd 	bl	13e14 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    927a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    927c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    927e:	4809      	ldr	r0, [pc, #36]	; (92a4 <os_default_irq+0x94>)
    9280:	f00a fdc8 	bl	13e14 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    9284:	f7fe ffa4 	bl	81d0 <hal_system_reset>
    9288:	e000ed00 	.word	0xe000ed00
    928c:	000252bc 	.word	0x000252bc
    9290:	000252f0 	.word	0x000252f0
    9294:	00025324 	.word	0x00025324
    9298:	00025358 	.word	0x00025358
    929c:	0002538c 	.word	0x0002538c
    92a0:	000253c0 	.word	0x000253c0
    92a4:	000253e8 	.word	0x000253e8

000092a8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    92aa:	f015 fa73 	bl	1e794 <hal_watchdog_tickle>
    sanity_last = 0;
    92ae:	2600      	movs	r6, #0
    92b0:	e00b      	b.n	92ca <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    92b2:	f000 fd25 	bl	9d00 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    92b6:	f015 fa6d 	bl	1e794 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    92ba:	4626      	mov	r6, r4
    92bc:	e011      	b.n	92e2 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    92be:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    92c0:	f014 fc56 	bl	1db70 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    92c4:	4628      	mov	r0, r5
    92c6:	f001 f9dd 	bl	a684 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    92ca:	4a14      	ldr	r2, [pc, #80]	; (931c <os_idle_task+0x74>)
    92cc:	6813      	ldr	r3, [r2, #0]
    92ce:	3301      	adds	r3, #1
    92d0:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    92d2:	f001 f8ab 	bl	a42c <os_time_get>
    92d6:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    92d8:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    92dc:	1ac3      	subs	r3, r0, r3
    92de:	2b00      	cmp	r3, #0
    92e0:	dce7      	bgt.n	92b2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    92e2:	f001 f9c9 	bl	a678 <os_arch_save_sr>
    92e6:	4605      	mov	r5, r0
        now = os_time_get();
    92e8:	f001 f8a0 	bl	a42c <os_time_get>
    92ec:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    92ee:	f000 fe75 	bl	9fdc <os_sched_wakeup_ticks>
    92f2:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    92f4:	4638      	mov	r0, r7
    92f6:	f000 f989 	bl	960c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    92fa:	4284      	cmp	r4, r0
    92fc:	bf28      	it	cs
    92fe:	4604      	movcs	r4, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    9300:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    9304:	1bd8      	subs	r0, r3, r7
    9306:	42a0      	cmp	r0, r4
    9308:	bf28      	it	cs
    930a:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    930c:	280b      	cmp	r0, #11
    930e:	d9d6      	bls.n	92be <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
    9310:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    9314:	d9d4      	bls.n	92c0 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
    9316:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    931a:	e7d1      	b.n	92c0 <os_idle_task+0x18>
    931c:	20001578 	.word	0x20001578

00009320 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    9320:	b508      	push	{r3, lr}
    9322:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    9324:	2100      	movs	r1, #0
    9326:	4608      	mov	r0, r1
    9328:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    932a:	2300      	movs	r3, #0
    932c:	461a      	mov	r2, r3
    932e:	4619      	mov	r1, r3
    9330:	4618      	mov	r0, r3
    9332:	f7ff ff47 	bl	91c4 <__assert_func>
	...

00009338 <os_started>:
}
    9338:	4b01      	ldr	r3, [pc, #4]	; (9340 <os_started+0x8>)
    933a:	6818      	ldr	r0, [r3, #0]
    933c:	4770      	bx	lr
    933e:	bf00      	nop
    9340:	200025d0 	.word	0x200025d0

00009344 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    9344:	b500      	push	{lr}
    9346:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    9348:	2340      	movs	r3, #64	; 0x40
    934a:	9303      	str	r3, [sp, #12]
    934c:	4b15      	ldr	r3, [pc, #84]	; (93a4 <os_init_idle_task+0x60>)
    934e:	9302      	str	r3, [sp, #8]
    9350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9354:	9301      	str	r3, [sp, #4]
    9356:	23ff      	movs	r3, #255	; 0xff
    9358:	9300      	str	r3, [sp, #0]
    935a:	2300      	movs	r3, #0
    935c:	4a12      	ldr	r2, [pc, #72]	; (93a8 <os_init_idle_task+0x64>)
    935e:	4913      	ldr	r1, [pc, #76]	; (93ac <os_init_idle_task+0x68>)
    9360:	4813      	ldr	r0, [pc, #76]	; (93b0 <os_init_idle_task+0x6c>)
    9362:	f000 ff29 	bl	a1b8 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    9366:	b950      	cbnz	r0, 937e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    9368:	f000 fd00 	bl	9d6c <os_sanity_init>
    assert(rc == 0);
    936c:	b968      	cbnz	r0, 938a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    936e:	f247 5030 	movw	r0, #30000	; 0x7530
    9372:	f015 f9cb 	bl	1e70c <hal_watchdog_init>
    assert(rc == 0);
    9376:	b970      	cbnz	r0, 9396 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    9378:	b005      	add	sp, #20
    937a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    937e:	2300      	movs	r3, #0
    9380:	461a      	mov	r2, r3
    9382:	4619      	mov	r1, r3
    9384:	4618      	mov	r0, r3
    9386:	f7ff ff1d 	bl	91c4 <__assert_func>
    assert(rc == 0);
    938a:	2300      	movs	r3, #0
    938c:	461a      	mov	r2, r3
    938e:	4619      	mov	r1, r3
    9390:	4618      	mov	r0, r3
    9392:	f7ff ff17 	bl	91c4 <__assert_func>
    assert(rc == 0);
    9396:	2300      	movs	r3, #0
    9398:	461a      	mov	r2, r3
    939a:	4619      	mov	r1, r3
    939c:	4618      	mov	r0, r3
    939e:	f7ff ff11 	bl	91c4 <__assert_func>
    93a2:	bf00      	nop
    93a4:	20001478 	.word	0x20001478
    93a8:	000092a9 	.word	0x000092a9
    93ac:	00025404 	.word	0x00025404
    93b0:	20001428 	.word	0x20001428

000093b4 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    93b4:	b510      	push	{r4, lr}
    93b6:	b084      	sub	sp, #16
    93b8:	4604      	mov	r4, r0
    os_error_t err;

#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    93ba:	2248      	movs	r2, #72	; 0x48
    93bc:	2100      	movs	r1, #0
    93be:	4828      	ldr	r0, [pc, #160]	; (9460 <os_init+0xac>)
    93c0:	f007 f96b 	bl	1069a <memset>
    SEGGER_RTT_Init();
    93c4:	f010 f926 	bl	19614 <SEGGER_RTT_Init>
#endif

    TAILQ_INIT(&g_callout_list);
    93c8:	4b26      	ldr	r3, [pc, #152]	; (9464 <os_init+0xb0>)
    93ca:	2200      	movs	r2, #0
    93cc:	601a      	str	r2, [r3, #0]
    93ce:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    93d0:	4b25      	ldr	r3, [pc, #148]	; (9468 <os_init+0xb4>)
    93d2:	601a      	str	r2, [r3, #0]
    93d4:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    93d6:	f000 fae5 	bl	99a4 <os_eventq_dflt_get>
    93da:	f000 fa27 	bl	982c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    93de:	f000 fa0d 	bl	97fc <os_dev_reset>

    err = os_arch_os_init();
    93e2:	f001 f983 	bl	a6ec <os_arch_os_init>
    assert(err == OS_OK);
    93e6:	bb18      	cbnz	r0, 9430 <os_init+0x7c>

    if (main_fn) {
    93e8:	b194      	cbz	r4, 9410 <os_init+0x5c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    93ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
    93ee:	9303      	str	r3, [sp, #12]
    93f0:	4b1e      	ldr	r3, [pc, #120]	; (946c <os_init+0xb8>)
    93f2:	9302      	str	r3, [sp, #8]
    93f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    93f8:	9301      	str	r3, [sp, #4]
    93fa:	237f      	movs	r3, #127	; 0x7f
    93fc:	9300      	str	r3, [sp, #0]
    93fe:	4623      	mov	r3, r4
    9400:	4a1b      	ldr	r2, [pc, #108]	; (9470 <os_init+0xbc>)
    9402:	491c      	ldr	r1, [pc, #112]	; (9474 <os_init+0xc0>)
    9404:	481c      	ldr	r0, [pc, #112]	; (9478 <os_init+0xc4>)
    9406:	f000 fed7 	bl	a1b8 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    940a:	f010 0fff 	tst.w	r0, #255	; 0xff
    940e:	d115      	bne.n	943c <os_init+0x88>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9410:	f00f ff6e 	bl	192f0 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    9414:	2001      	movs	r0, #1
    9416:	f000 f9c9 	bl	97ac <os_dev_initialize_all>
    assert(err == OS_OK);
    941a:	f010 0fff 	tst.w	r0, #255	; 0xff
    941e:	d113      	bne.n	9448 <os_init+0x94>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    9420:	2002      	movs	r0, #2
    9422:	f000 f9c3 	bl	97ac <os_dev_initialize_all>
    assert(err == OS_OK);
    9426:	f010 0fff 	tst.w	r0, #255	; 0xff
    942a:	d113      	bne.n	9454 <os_init+0xa0>
}
    942c:	b004      	add	sp, #16
    942e:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    9430:	2300      	movs	r3, #0
    9432:	461a      	mov	r2, r3
    9434:	4619      	mov	r1, r3
    9436:	4618      	mov	r0, r3
    9438:	f7ff fec4 	bl	91c4 <__assert_func>
        assert(err == 0);
    943c:	2300      	movs	r3, #0
    943e:	461a      	mov	r2, r3
    9440:	4619      	mov	r1, r3
    9442:	4618      	mov	r0, r3
    9444:	f7ff febe 	bl	91c4 <__assert_func>
    assert(err == OS_OK);
    9448:	2300      	movs	r3, #0
    944a:	461a      	mov	r2, r3
    944c:	4619      	mov	r1, r3
    944e:	4618      	mov	r0, r3
    9450:	f7ff feb8 	bl	91c4 <__assert_func>
    assert(err == OS_OK);
    9454:	2300      	movs	r3, #0
    9456:	461a      	mov	r2, r3
    9458:	4619      	mov	r1, r3
    945a:	4618      	mov	r0, r3
    945c:	f7ff feb2 	bl	91c4 <__assert_func>
    9460:	200000d8 	.word	0x200000d8
    9464:	200025d4 	.word	0x200025d4
    9468:	200033ec 	.word	0x200033ec
    946c:	20001580 	.word	0x20001580
    9470:	00009321 	.word	0x00009321
    9474:	0002540c 	.word	0x0002540c
    9478:	20002580 	.word	0x20002580

0000947c <os_start>:

void
os_start(void)
{
    947c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    947e:	f015 f981 	bl	1e784 <hal_watchdog_enable>

    err = os_arch_os_start();
    9482:	f001 f99b 	bl	a7bc <os_arch_os_start>
    assert(err == OS_OK);
    9486:	b900      	cbnz	r0, 948a <os_start+0xe>
#else
    assert(0);
#endif
}
    9488:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    948a:	2300      	movs	r3, #0
    948c:	461a      	mov	r2, r3
    948e:	4619      	mov	r1, r3
    9490:	4618      	mov	r0, r3
    9492:	f7ff fe97 	bl	91c4 <__assert_func>

00009496 <os_reboot>:

void
os_reboot(int reason)
{
    9496:	b508      	push	{r3, lr}
    sysdown(reason);
    9498:	f00c fe96 	bl	161c8 <sysdown>
}
    949c:	bd08      	pop	{r3, pc}

0000949e <os_system_reset>:

void
os_system_reset(void)
{
    949e:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    94a0:	f015 f978 	bl	1e794 <hal_watchdog_tickle>
    hal_system_reset();
    94a4:	f7fe fe94 	bl	81d0 <hal_system_reset>

000094a8 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    94a8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    94aa:	4b0c      	ldr	r3, [pc, #48]	; (94dc <os_pkg_init+0x34>)
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	b153      	cbz	r3, 94c6 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    94b0:	2003      	movs	r0, #3
    94b2:	f000 f97b 	bl	97ac <os_dev_initialize_all>
    assert(err == OS_OK);
    94b6:	f010 0fff 	tst.w	r0, #255	; 0xff
    94ba:	d109      	bne.n	94d0 <os_pkg_init+0x28>

    os_mempool_module_init();
    94bc:	f000 fb14 	bl	9ae8 <os_mempool_module_init>
    os_msys_init();
    94c0:	f000 fbb6 	bl	9c30 <os_msys_init>
}
    94c4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    94c6:	461a      	mov	r2, r3
    94c8:	4619      	mov	r1, r3
    94ca:	4618      	mov	r0, r3
    94cc:	f7ff fe7a 	bl	91c4 <__assert_func>
    assert(err == OS_OK);
    94d0:	2300      	movs	r3, #0
    94d2:	461a      	mov	r2, r3
    94d4:	4619      	mov	r1, r3
    94d6:	4618      	mov	r0, r3
    94d8:	f7ff fe74 	bl	91c4 <__assert_func>
    94dc:	20004bb0 	.word	0x20004bb0

000094e0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    94e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94e2:	4604      	mov	r4, r0
    94e4:	460d      	mov	r5, r1
    94e6:	4617      	mov	r7, r2
    94e8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    94ea:	2220      	movs	r2, #32
    94ec:	2100      	movs	r1, #0
    94ee:	f007 f8d4 	bl	1069a <memset>
    c->c_ev.ev_cb = ev_cb;
    94f2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    94f4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    94f6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    94f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000094fc <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    94fc:	b538      	push	{r3, r4, r5, lr}
    94fe:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    9500:	f001 f8ba 	bl	a678 <os_arch_save_sr>
    9504:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    9506:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    9508:	b13b      	cbz	r3, 951a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    950a:	69a2      	ldr	r2, [r4, #24]
    950c:	b172      	cbz	r2, 952c <os_callout_stop+0x30>
    950e:	61d3      	str	r3, [r2, #28]
    9510:	69e3      	ldr	r3, [r4, #28]
    9512:	69a2      	ldr	r2, [r4, #24]
    9514:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    9516:	2300      	movs	r3, #0
    9518:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    951a:	6920      	ldr	r0, [r4, #16]
    951c:	b110      	cbz	r0, 9524 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    951e:	4621      	mov	r1, r4
    9520:	f000 fa1e 	bl	9960 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    9524:	4628      	mov	r0, r5
    9526:	f001 f8ad 	bl	a684 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    952a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    952c:	4a01      	ldr	r2, [pc, #4]	; (9534 <os_callout_stop+0x38>)
    952e:	6053      	str	r3, [r2, #4]
    9530:	e7ee      	b.n	9510 <os_callout_stop+0x14>
    9532:	bf00      	nop
    9534:	200025d4 	.word	0x200025d4

00009538 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    9538:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    953a:	6903      	ldr	r3, [r0, #16]
    953c:	b193      	cbz	r3, 9564 <os_callout_reset+0x2c>
    953e:	4604      	mov	r4, r0
    9540:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    9542:	2900      	cmp	r1, #0
    9544:	db2f      	blt.n	95a6 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    9546:	f001 f897 	bl	a678 <os_arch_save_sr>
    954a:	4605      	mov	r5, r0

    os_callout_stop(c);
    954c:	4620      	mov	r0, r4
    954e:	f7ff ffd5 	bl	94fc <os_callout_stop>

    if (ticks == 0) {
    9552:	b906      	cbnz	r6, 9556 <os_callout_reset+0x1e>
        ticks = 1;
    9554:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    9556:	f000 ff69 	bl	a42c <os_time_get>
    955a:	4430      	add	r0, r6
    955c:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    955e:	4b13      	ldr	r3, [pc, #76]	; (95ac <os_callout_reset+0x74>)
    9560:	681b      	ldr	r3, [r3, #0]
    9562:	e005      	b.n	9570 <os_callout_reset+0x38>
    assert(c->c_evq != NULL);
    9564:	461a      	mov	r2, r3
    9566:	4619      	mov	r1, r3
    9568:	4618      	mov	r0, r3
    956a:	f7ff fe2b 	bl	91c4 <__assert_func>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    956e:	699b      	ldr	r3, [r3, #24]
    9570:	b11b      	cbz	r3, 957a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    9572:	695a      	ldr	r2, [r3, #20]
    9574:	1a82      	subs	r2, r0, r2
    9576:	2a00      	cmp	r2, #0
    9578:	daf9      	bge.n	956e <os_callout_reset+0x36>
            break;
        }
    }

    if (entry) {
    957a:	b15b      	cbz	r3, 9594 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    957c:	69da      	ldr	r2, [r3, #28]
    957e:	61e2      	str	r2, [r4, #28]
    9580:	61a3      	str	r3, [r4, #24]
    9582:	69da      	ldr	r2, [r3, #28]
    9584:	6014      	str	r4, [r2, #0]
    9586:	3418      	adds	r4, #24
    9588:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    958a:	4628      	mov	r0, r5
    958c:	f001 f87a 	bl	a684 <os_arch_restore_sr>

    ret = OS_OK;
    9590:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    9592:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    9594:	2300      	movs	r3, #0
    9596:	61a3      	str	r3, [r4, #24]
    9598:	4b04      	ldr	r3, [pc, #16]	; (95ac <os_callout_reset+0x74>)
    959a:	685a      	ldr	r2, [r3, #4]
    959c:	61e2      	str	r2, [r4, #28]
    959e:	6014      	str	r4, [r2, #0]
    95a0:	3418      	adds	r4, #24
    95a2:	605c      	str	r4, [r3, #4]
    95a4:	e7f1      	b.n	958a <os_callout_reset+0x52>
        ret = OS_EINVAL;
    95a6:	2002      	movs	r0, #2
    return ret;
    95a8:	e7f3      	b.n	9592 <os_callout_reset+0x5a>
    95aa:	bf00      	nop
    95ac:	200025d4 	.word	0x200025d4

000095b0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    95b0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    95b2:	f000 ff3b 	bl	a42c <os_time_get>
    95b6:	4605      	mov	r5, r0
    95b8:	e00f      	b.n	95da <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    95ba:	69e2      	ldr	r2, [r4, #28]
    95bc:	4b12      	ldr	r3, [pc, #72]	; (9608 <os_callout_tick+0x58>)
    95be:	605a      	str	r2, [r3, #4]
    95c0:	69e3      	ldr	r3, [r4, #28]
    95c2:	69a2      	ldr	r2, [r4, #24]
    95c4:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    95c6:	2300      	movs	r3, #0
    95c8:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    95ca:	f001 f85b 	bl	a684 <os_arch_restore_sr>

        if (c) {
    95ce:	b1d4      	cbz	r4, 9606 <os_callout_tick+0x56>
            if (c->c_evq) {
    95d0:	6920      	ldr	r0, [r4, #16]
    95d2:	b1a0      	cbz	r0, 95fe <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    95d4:	4621      	mov	r1, r4
    95d6:	f000 f937 	bl	9848 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    95da:	f001 f84d 	bl	a678 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    95de:	4b0a      	ldr	r3, [pc, #40]	; (9608 <os_callout_tick+0x58>)
    95e0:	681c      	ldr	r4, [r3, #0]
        if (c) {
    95e2:	2c00      	cmp	r4, #0
    95e4:	d0f1      	beq.n	95ca <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    95e6:	6963      	ldr	r3, [r4, #20]
    95e8:	1aeb      	subs	r3, r5, r3
    95ea:	2b00      	cmp	r3, #0
    95ec:	db05      	blt.n	95fa <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    95ee:	69a3      	ldr	r3, [r4, #24]
    95f0:	2b00      	cmp	r3, #0
    95f2:	d0e2      	beq.n	95ba <os_callout_tick+0xa>
    95f4:	69e2      	ldr	r2, [r4, #28]
    95f6:	61da      	str	r2, [r3, #28]
    95f8:	e7e2      	b.n	95c0 <os_callout_tick+0x10>
                c = NULL;
    95fa:	2400      	movs	r4, #0
    95fc:	e7e5      	b.n	95ca <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    95fe:	6863      	ldr	r3, [r4, #4]
    9600:	4620      	mov	r0, r4
    9602:	4798      	blx	r3
    9604:	e7e9      	b.n	95da <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    9606:	bd38      	pop	{r3, r4, r5, pc}
    9608:	200025d4 	.word	0x200025d4

0000960c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    960c:	b510      	push	{r4, lr}
    960e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    9610:	f001 f83b 	bl	a68a <os_arch_in_critical>
    9614:	b130      	cbz	r0, 9624 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    9616:	4b09      	ldr	r3, [pc, #36]	; (963c <os_callout_wakeup_ticks+0x30>)
    9618:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    961a:	b15b      	cbz	r3, 9634 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    961c:	6958      	ldr	r0, [r3, #20]
    961e:	1b00      	subs	r0, r0, r4
    9620:	d406      	bmi.n	9630 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    9622:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9624:	2300      	movs	r3, #0
    9626:	461a      	mov	r2, r3
    9628:	4619      	mov	r1, r3
    962a:	4618      	mov	r0, r3
    962c:	f7ff fdca 	bl	91c4 <__assert_func>
            rt = 0;     /* callout time is in the past */
    9630:	2000      	movs	r0, #0
    9632:	e7f6      	b.n	9622 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    9634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9638:	e7f3      	b.n	9622 <os_callout_wakeup_ticks+0x16>
    963a:	bf00      	nop
    963c:	200025d4 	.word	0x200025d4

00009640 <os_callout_remaining_ticks>:


os_time_t
os_callout_remaining_ticks(struct os_callout *c, os_time_t now)
{
    9640:	b538      	push	{r3, r4, r5, lr}
    9642:	4605      	mov	r5, r0
    9644:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t rt;

    OS_ENTER_CRITICAL(sr);
    9646:	f001 f817 	bl	a678 <os_arch_save_sr>

    if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    964a:	696b      	ldr	r3, [r5, #20]
    964c:	1b1c      	subs	r4, r3, r4
    964e:	d403      	bmi.n	9658 <os_callout_remaining_ticks+0x18>
        rt = c->c_ticks - now;
    } else {
        rt = 0;     /* callout time is in the past */
    }

    OS_EXIT_CRITICAL(sr);
    9650:	f001 f818 	bl	a684 <os_arch_restore_sr>

    return rt;
}
    9654:	4620      	mov	r0, r4
    9656:	bd38      	pop	{r3, r4, r5, pc}
        rt = 0;     /* callout time is in the past */
    9658:	2400      	movs	r4, #0
    965a:	e7f9      	b.n	9650 <os_callout_remaining_ticks+0x10>

0000965c <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    965c:	b508      	push	{r3, lr}
    965e:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    9660:	2000      	movs	r0, #0
    9662:	f014 ff17 	bl	1e494 <hal_timer_config>
    return rc;
}
    9666:	bd08      	pop	{r3, pc}

00009668 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
    9668:	b510      	push	{r4, lr}
    assert(timer != NULL);
    966a:	b140      	cbz	r0, 967e <os_cputime_timer_init+0x16>
    966c:	460c      	mov	r4, r1
    966e:	4613      	mov	r3, r2
    9670:	4601      	mov	r1, r0
    assert(fp != NULL);
    9672:	b154      	cbz	r4, 968a <os_cputime_timer_init+0x22>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
    9674:	4622      	mov	r2, r4
    9676:	2000      	movs	r0, #0
    9678:	f014 ffa2 	bl	1e5c0 <hal_timer_set_cb>
}
    967c:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
    967e:	2300      	movs	r3, #0
    9680:	461a      	mov	r2, r3
    9682:	4619      	mov	r1, r3
    9684:	4618      	mov	r0, r3
    9686:	f7ff fd9d 	bl	91c4 <__assert_func>
    assert(fp != NULL);
    968a:	2300      	movs	r3, #0
    968c:	461a      	mov	r2, r3
    968e:	4619      	mov	r1, r3
    9690:	4618      	mov	r0, r3
    9692:	f7ff fd97 	bl	91c4 <__assert_func>

00009696 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    9696:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    9698:	2000      	movs	r0, #0
    969a:	f014 ff79 	bl	1e590 <hal_timer_read>
    return cpu_time;
}
    969e:	bd08      	pop	{r3, pc}

000096a0 <os_cputime_timer_relative>:
{
    96a0:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
    96a2:	b140      	cbz	r0, 96b6 <os_cputime_timer_relative+0x16>
    96a4:	460c      	mov	r4, r1
    96a6:	4605      	mov	r5, r0
    cputime = os_cputime_get32() + os_cputime_usecs_to_ticks(usecs);
    96a8:	f7ff fff5 	bl	9696 <os_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
    96ac:	1901      	adds	r1, r0, r4
    96ae:	4628      	mov	r0, r5
    96b0:	f014 ff9c 	bl	1e5ec <hal_timer_start_at>
}
    96b4:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
    96b6:	2300      	movs	r3, #0
    96b8:	461a      	mov	r2, r3
    96ba:	4619      	mov	r1, r3
    96bc:	4618      	mov	r0, r3
    96be:	f7ff fd81 	bl	91c4 <__assert_func>
	...

000096c4 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    96c4:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    96c6:	4b15      	ldr	r3, [pc, #84]	; (971c <os_dev_add+0x58>)
    96c8:	681d      	ldr	r5, [r3, #0]
    96ca:	b115      	cbz	r5, 96d2 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    96cc:	462b      	mov	r3, r5
    prev_dev = NULL;
    96ce:	2400      	movs	r4, #0
    96d0:	e008      	b.n	96e4 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    96d2:	4603      	mov	r3, r0
    96d4:	f843 5f20 	str.w	r5, [r3, #32]!
    96d8:	4a10      	ldr	r2, [pc, #64]	; (971c <os_dev_add+0x58>)
    96da:	6053      	str	r3, [r2, #4]
    96dc:	6010      	str	r0, [r2, #0]
        return (0);
    96de:	e010      	b.n	9702 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    96e0:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    96e2:	6a1b      	ldr	r3, [r3, #32]
    96e4:	b143      	cbz	r3, 96f8 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    96e6:	7e01      	ldrb	r1, [r0, #24]
    96e8:	7e1a      	ldrb	r2, [r3, #24]
    96ea:	4291      	cmp	r1, r2
    96ec:	d304      	bcc.n	96f8 <os_dev_add+0x34>
    96ee:	d1f7      	bne.n	96e0 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    96f0:	7e41      	ldrb	r1, [r0, #25]
    96f2:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    96f4:	4291      	cmp	r1, r2
    96f6:	d2f3      	bcs.n	96e0 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    96f8:	b15c      	cbz	r4, 9712 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    96fa:	6a23      	ldr	r3, [r4, #32]
    96fc:	6203      	str	r3, [r0, #32]
    96fe:	b11b      	cbz	r3, 9708 <os_dev_add+0x44>
    9700:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    9702:	2000      	movs	r0, #0
    9704:	bc30      	pop	{r4, r5}
    9706:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9708:	f100 0320 	add.w	r3, r0, #32
    970c:	4a03      	ldr	r2, [pc, #12]	; (971c <os_dev_add+0x58>)
    970e:	6053      	str	r3, [r2, #4]
    9710:	e7f6      	b.n	9700 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9712:	6205      	str	r5, [r0, #32]
    9714:	4b01      	ldr	r3, [pc, #4]	; (971c <os_dev_add+0x58>)
    9716:	6018      	str	r0, [r3, #0]
    9718:	e7f3      	b.n	9702 <os_dev_add+0x3e>
    971a:	bf00      	nop
    971c:	200025dc 	.word	0x200025dc

00009720 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    9720:	b510      	push	{r4, lr}
    9722:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    9724:	6903      	ldr	r3, [r0, #16]
    9726:	6941      	ldr	r1, [r0, #20]
    9728:	4798      	blx	r3
    if (rc != 0) {
    972a:	b128      	cbz	r0, 9738 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    972c:	7ee3      	ldrb	r3, [r4, #27]
    972e:	f013 0f08 	tst.w	r3, #8
    9732:	d105      	bne.n	9740 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    9734:	2000      	movs	r0, #0
    9736:	e003      	b.n	9740 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    9738:	7ee3      	ldrb	r3, [r4, #27]
    973a:	f043 0301 	orr.w	r3, r3, #1
    973e:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    9740:	bd10      	pop	{r4, pc}

00009742 <os_dev_init>:
{
    9742:	4684      	mov	ip, r0
    dev->od_name = name;
    9744:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    9746:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    9748:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    974a:	2000      	movs	r0, #0
    974c:	f88c 001b 	strb.w	r0, [ip, #27]
    dev->od_open_ref = 0;
    9750:	f88c 001a 	strb.w	r0, [ip, #26]
    dev->od_init = od_init;
    9754:	9b00      	ldr	r3, [sp, #0]
    9756:	f8cc 3010 	str.w	r3, [ip, #16]
    dev->od_init_arg = arg;
    975a:	9b01      	ldr	r3, [sp, #4]
    975c:	f8cc 3014 	str.w	r3, [ip, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    9760:	f8cc 0000 	str.w	r0, [ip]
    9764:	f8cc 0004 	str.w	r0, [ip, #4]
    9768:	f8cc 0008 	str.w	r0, [ip, #8]
    976c:	f8cc 000c 	str.w	r0, [ip, #12]
}
    9770:	4770      	bx	lr
	...

00009774 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    9774:	b530      	push	{r4, r5, lr}
    9776:	b083      	sub	sp, #12
    9778:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    977a:	9d07      	ldr	r5, [sp, #28]
    977c:	9501      	str	r5, [sp, #4]
    977e:	9d06      	ldr	r5, [sp, #24]
    9780:	9500      	str	r5, [sp, #0]
    9782:	f7ff ffde 	bl	9742 <os_dev_init>
    if (rc != 0) {
    9786:	b108      	cbz	r0, 978c <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    9788:	b003      	add	sp, #12
    978a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    978c:	4620      	mov	r0, r4
    978e:	f7ff ff99 	bl	96c4 <os_dev_add>
    if (rc != 0) {
    9792:	2800      	cmp	r0, #0
    9794:	d1f8      	bne.n	9788 <os_dev_create+0x14>
    if (g_os_started) {
    9796:	4b04      	ldr	r3, [pc, #16]	; (97a8 <os_dev_create+0x34>)
    9798:	681b      	ldr	r3, [r3, #0]
    979a:	2b00      	cmp	r3, #0
    979c:	d0f4      	beq.n	9788 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    979e:	4620      	mov	r0, r4
    97a0:	f7ff ffbe 	bl	9720 <os_dev_initialize>
    return (rc);
    97a4:	e7f0      	b.n	9788 <os_dev_create+0x14>
    97a6:	bf00      	nop
    97a8:	200025d0 	.word	0x200025d0

000097ac <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    97ac:	b538      	push	{r3, r4, r5, lr}
    97ae:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    97b0:	4b08      	ldr	r3, [pc, #32]	; (97d4 <os_dev_initialize_all+0x28>)
    97b2:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    97b4:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    97b6:	e000      	b.n	97ba <os_dev_initialize_all+0xe>
    97b8:	6a24      	ldr	r4, [r4, #32]
    97ba:	b144      	cbz	r4, 97ce <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    97bc:	7e23      	ldrb	r3, [r4, #24]
    97be:	42ab      	cmp	r3, r5
    97c0:	d1fa      	bne.n	97b8 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    97c2:	4620      	mov	r0, r4
    97c4:	f7ff ffac 	bl	9720 <os_dev_initialize>
            if (rc) {
    97c8:	4602      	mov	r2, r0
    97ca:	2800      	cmp	r0, #0
    97cc:	d0f4      	beq.n	97b8 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    97ce:	4610      	mov	r0, r2
    97d0:	bd38      	pop	{r3, r4, r5, pc}
    97d2:	bf00      	nop
    97d4:	200025dc 	.word	0x200025dc

000097d8 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    97d8:	b538      	push	{r3, r4, r5, lr}
    97da:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    97dc:	4b06      	ldr	r3, [pc, #24]	; (97f8 <os_dev_lookup+0x20>)
    97de:	681c      	ldr	r4, [r3, #0]
    97e0:	e000      	b.n	97e4 <os_dev_lookup+0xc>
    97e2:	6a24      	ldr	r4, [r4, #32]
    97e4:	b12c      	cbz	r4, 97f2 <os_dev_lookup+0x1a>
        if (!strcmp(dev->od_name, name)) {
    97e6:	4629      	mov	r1, r5
    97e8:	69e0      	ldr	r0, [r4, #28]
    97ea:	f006 ff81 	bl	106f0 <strcmp>
    97ee:	2800      	cmp	r0, #0
    97f0:	d1f7      	bne.n	97e2 <os_dev_lookup+0xa>
            break;
        }
    }
    return (dev);
}
    97f2:	4620      	mov	r0, r4
    97f4:	bd38      	pop	{r3, r4, r5, pc}
    97f6:	bf00      	nop
    97f8:	200025dc 	.word	0x200025dc

000097fc <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    97fc:	4b02      	ldr	r3, [pc, #8]	; (9808 <os_dev_reset+0xc>)
    97fe:	2200      	movs	r2, #0
    9800:	601a      	str	r2, [r3, #0]
    9802:	605b      	str	r3, [r3, #4]
}
    9804:	4770      	bx	lr
    9806:	bf00      	nop
    9808:	200025dc 	.word	0x200025dc

0000980c <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    980c:	b570      	push	{r4, r5, r6, lr}
    980e:	4606      	mov	r6, r0
    9810:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9812:	4b05      	ldr	r3, [pc, #20]	; (9828 <os_dev_walk+0x1c>)
    9814:	681c      	ldr	r4, [r3, #0]
    9816:	e000      	b.n	981a <os_dev_walk+0xe>
    9818:	6a24      	ldr	r4, [r4, #32]
    981a:	b124      	cbz	r4, 9826 <os_dev_walk+0x1a>
        if (walk_func(dev, arg)) {
    981c:	4629      	mov	r1, r5
    981e:	4620      	mov	r0, r4
    9820:	47b0      	blx	r6
    9822:	2800      	cmp	r0, #0
    9824:	d0f8      	beq.n	9818 <os_dev_walk+0xc>
            break;
        }
    }
}
    9826:	bd70      	pop	{r4, r5, r6, pc}
    9828:	200025dc 	.word	0x200025dc

0000982c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    982c:	2300      	movs	r3, #0
    982e:	6003      	str	r3, [r0, #0]
    9830:	6043      	str	r3, [r0, #4]
    9832:	6083      	str	r3, [r0, #8]
    9834:	60c3      	str	r3, [r0, #12]
    STAILQ_INIT(&evq->evq_list);
    9836:	f100 0308 	add.w	r3, r0, #8
    983a:	60c3      	str	r3, [r0, #12]
}
    983c:	4770      	bx	lr

0000983e <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    983e:	68c0      	ldr	r0, [r0, #12]
}
    9840:	3800      	subs	r0, #0
    9842:	bf18      	it	ne
    9844:	2001      	movne	r0, #1
    9846:	4770      	bx	lr

00009848 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    9848:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    984a:	b1f0      	cbz	r0, 988a <os_eventq_put+0x42>
    984c:	460c      	mov	r4, r1
    984e:	4606      	mov	r6, r0
    9850:	f7ff fff5 	bl	983e <os_eventq_inited>
    9854:	b1c8      	cbz	r0, 988a <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    9856:	f000 ff0f 	bl	a678 <os_arch_save_sr>
    985a:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    985c:	7823      	ldrb	r3, [r4, #0]
    985e:	b9d3      	cbnz	r3, 9896 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    9860:	2301      	movs	r3, #1
    9862:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    9864:	2300      	movs	r3, #0
    9866:	60e3      	str	r3, [r4, #12]
    9868:	68f3      	ldr	r3, [r6, #12]
    986a:	601c      	str	r4, [r3, #0]
    986c:	340c      	adds	r4, #12
    986e:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    9870:	6870      	ldr	r0, [r6, #4]
    9872:	b1b8      	cbz	r0, 98a4 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    9874:	7b03      	ldrb	r3, [r0, #12]
    9876:	2b02      	cmp	r3, #2
    9878:	d010      	beq.n	989c <os_eventq_put+0x54>
    resched = 0;
    987a:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    987c:	2300      	movs	r3, #0
    987e:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    9880:	4628      	mov	r0, r5
    9882:	f000 feff 	bl	a684 <os_arch_restore_sr>

    if (resched) {
    9886:	b97c      	cbnz	r4, 98a8 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    9888:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    988a:	2300      	movs	r3, #0
    988c:	461a      	mov	r2, r3
    988e:	4619      	mov	r1, r3
    9890:	4618      	mov	r0, r3
    9892:	f7ff fc97 	bl	91c4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    9896:	f000 fef5 	bl	a684 <os_arch_restore_sr>
        return;
    989a:	e7f5      	b.n	9888 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    989c:	f000 fb46 	bl	9f2c <os_sched_wakeup>
            resched = 1;
    98a0:	2401      	movs	r4, #1
    98a2:	e7eb      	b.n	987c <os_eventq_put+0x34>
    resched = 0;
    98a4:	2400      	movs	r4, #0
    98a6:	e7eb      	b.n	9880 <os_eventq_put+0x38>
        os_sched(NULL);
    98a8:	2000      	movs	r0, #0
    98aa:	f000 fbbd 	bl	a028 <os_sched>
    98ae:	e7eb      	b.n	9888 <os_eventq_put+0x40>

000098b0 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    98b0:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    98b2:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    98b4:	b120      	cbz	r0, 98c0 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    98b6:	68c2      	ldr	r2, [r0, #12]
    98b8:	609a      	str	r2, [r3, #8]
    98ba:	b112      	cbz	r2, 98c2 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    98bc:	2300      	movs	r3, #0
    98be:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    98c0:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    98c2:	f103 0208 	add.w	r2, r3, #8
    98c6:	60da      	str	r2, [r3, #12]
    98c8:	e7f8      	b.n	98bc <os_eventq_get_no_wait+0xc>

000098ca <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    98ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98cc:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    98ce:	f000 fa97 	bl	9e00 <os_sched_get_current_task>
    98d2:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    98d4:	6833      	ldr	r3, [r6, #0]
    98d6:	4283      	cmp	r3, r0
    98d8:	d001      	beq.n	98de <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    98da:	b923      	cbnz	r3, 98e6 <os_eventq_get+0x1c>
            evq->evq_owner = t;
    98dc:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    98de:	f000 fecb 	bl	a678 <os_arch_save_sr>
    98e2:	4605      	mov	r5, r0
    98e4:	e01e      	b.n	9924 <os_eventq_get+0x5a>
            assert(0);
    98e6:	2300      	movs	r3, #0
    98e8:	461a      	mov	r2, r3
    98ea:	4619      	mov	r1, r3
    98ec:	4618      	mov	r0, r3
    98ee:	f7ff fc69 	bl	91c4 <__assert_func>
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    if (ev) {
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    98f2:	f106 0308 	add.w	r3, r6, #8
    98f6:	60f3      	str	r3, [r6, #12]
    98f8:	e01b      	b.n	9932 <os_eventq_get+0x68>
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    98fa:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    98fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9900:	4620      	mov	r0, r4
    9902:	f000 fa89 	bl	9e18 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    9906:	7b63      	ldrb	r3, [r4, #13]
    9908:	f043 0308 	orr.w	r3, r3, #8
    990c:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    990e:	4628      	mov	r0, r5
    9910:	f000 feb8 	bl	a684 <os_arch_restore_sr>

        os_sched(NULL);
    9914:	2000      	movs	r0, #0
    9916:	f000 fb87 	bl	a028 <os_sched>

        OS_ENTER_CRITICAL(sr);
    991a:	f000 fead 	bl	a678 <os_arch_save_sr>
    991e:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    9920:	2300      	movs	r3, #0
    9922:	6073      	str	r3, [r6, #4]
    ev = STAILQ_FIRST(&evq->evq_list);
    9924:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    9926:	2f00      	cmp	r7, #0
    9928:	d0e7      	beq.n	98fa <os_eventq_get+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    992a:	68fb      	ldr	r3, [r7, #12]
    992c:	60b3      	str	r3, [r6, #8]
    992e:	2b00      	cmp	r3, #0
    9930:	d0df      	beq.n	98f2 <os_eventq_get+0x28>
        ev->ev_queued = 0;
    9932:	2300      	movs	r3, #0
    9934:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    9936:	7b63      	ldrb	r3, [r4, #13]
    9938:	f023 0308 	bic.w	r3, r3, #8
    993c:	7363      	strb	r3, [r4, #13]
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    993e:	4628      	mov	r0, r5
    9940:	f000 fea0 	bl	a684 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    9944:	4638      	mov	r0, r7
    9946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009948 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    9948:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    994a:	f7ff ffbe 	bl	98ca <os_eventq_get>
    assert(ev->ev_cb != NULL);
    994e:	6843      	ldr	r3, [r0, #4]
    9950:	b10b      	cbz	r3, 9956 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    9952:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    9954:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    9956:	461a      	mov	r2, r3
    9958:	4619      	mov	r1, r3
    995a:	4618      	mov	r0, r3
    995c:	f7ff fc32 	bl	91c4 <__assert_func>

00009960 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    9960:	b538      	push	{r3, r4, r5, lr}
    9962:	4605      	mov	r5, r0
    9964:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    9966:	f000 fe87 	bl	a678 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    996a:	7823      	ldrb	r3, [r4, #0]
    996c:	b14b      	cbz	r3, 9982 <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    996e:	68ab      	ldr	r3, [r5, #8]
    9970:	42a3      	cmp	r3, r4
    9972:	d00b      	beq.n	998c <os_eventq_remove+0x2c>
    9974:	461a      	mov	r2, r3
    9976:	68db      	ldr	r3, [r3, #12]
    9978:	42a3      	cmp	r3, r4
    997a:	d1fb      	bne.n	9974 <os_eventq_remove+0x14>
    997c:	68db      	ldr	r3, [r3, #12]
    997e:	60d3      	str	r3, [r2, #12]
    9980:	b163      	cbz	r3, 999c <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    9982:	2300      	movs	r3, #0
    9984:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    9986:	f000 fe7d 	bl	a684 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    998a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    998c:	68db      	ldr	r3, [r3, #12]
    998e:	60ab      	str	r3, [r5, #8]
    9990:	2b00      	cmp	r3, #0
    9992:	d1f6      	bne.n	9982 <os_eventq_remove+0x22>
    9994:	f105 0308 	add.w	r3, r5, #8
    9998:	60eb      	str	r3, [r5, #12]
    999a:	e7f2      	b.n	9982 <os_eventq_remove+0x22>
    999c:	320c      	adds	r2, #12
    999e:	60ea      	str	r2, [r5, #12]
    99a0:	e7ef      	b.n	9982 <os_eventq_remove+0x22>
	...

000099a4 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    99a4:	4800      	ldr	r0, [pc, #0]	; (99a8 <os_eventq_dflt_get+0x4>)
    99a6:	4770      	bx	lr
    99a8:	200025e4 	.word	0x200025e4

000099ac <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    99ac:	2800      	cmp	r0, #0
    99ae:	d031      	beq.n	9a14 <os_mempool_init_internal+0x68>
{
    99b0:	b430      	push	{r4, r5}
    99b2:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    99b4:	2a00      	cmp	r2, #0
    99b6:	d02f      	beq.n	9a18 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    99b8:	b1bb      	cbz	r3, 99ea <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    99ba:	b113      	cbz	r3, 99c2 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    99bc:	f013 0f03 	tst.w	r3, #3
    99c0:	d12c      	bne.n	9a1c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    99c2:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    99c4:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    99c6:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    99c8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    99cc:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    99ce:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    99d0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    99d2:	9802      	ldr	r0, [sp, #8]
    99d4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    99d6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    99d8:	b199      	cbz	r1, 9a02 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    99da:	f012 0f03 	tst.w	r2, #3
    99de:	d002      	beq.n	99e6 <os_mempool_init_internal+0x3a>
    99e0:	f022 0203 	bic.w	r2, r2, #3
    99e4:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    99e6:	2001      	movs	r0, #1
    99e8:	e007      	b.n	99fa <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    99ea:	2900      	cmp	r1, #0
    99ec:	d0e5      	beq.n	99ba <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    99ee:	2003      	movs	r0, #3
    99f0:	e00e      	b.n	9a10 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    99f2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    99f4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    99f6:	3001      	adds	r0, #1
            block_addr += true_block_size;
    99f8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    99fa:	4281      	cmp	r1, r0
    99fc:	dcf9      	bgt.n	99f2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    99fe:	2200      	movs	r2, #0
    9a00:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    9a02:	2000      	movs	r0, #0
    9a04:	6120      	str	r0, [r4, #16]
    9a06:	4b06      	ldr	r3, [pc, #24]	; (9a20 <os_mempool_init_internal+0x74>)
    9a08:	685a      	ldr	r2, [r3, #4]
    9a0a:	6014      	str	r4, [r2, #0]
    9a0c:	3410      	adds	r4, #16
    9a0e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    9a10:	bc30      	pop	{r4, r5}
    9a12:	4770      	bx	lr
        return OS_INVALID_PARM;
    9a14:	2003      	movs	r0, #3
}
    9a16:	4770      	bx	lr
        return OS_INVALID_PARM;
    9a18:	2003      	movs	r0, #3
    9a1a:	e7f9      	b.n	9a10 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    9a1c:	2004      	movs	r0, #4
    9a1e:	e7f7      	b.n	9a10 <os_mempool_init_internal+0x64>
    9a20:	200025f4 	.word	0x200025f4

00009a24 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    9a24:	b510      	push	{r4, lr}
    9a26:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    9a28:	2400      	movs	r4, #0
    9a2a:	9401      	str	r4, [sp, #4]
    9a2c:	9c04      	ldr	r4, [sp, #16]
    9a2e:	9400      	str	r4, [sp, #0]
    9a30:	f7ff ffbc 	bl	99ac <os_mempool_init_internal>
}
    9a34:	b002      	add	sp, #8
    9a36:	bd10      	pop	{r4, pc}

00009a38 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    9a38:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    9a3a:	4604      	mov	r4, r0
    9a3c:	b198      	cbz	r0, 9a66 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    9a3e:	f000 fe1b 	bl	a678 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    9a42:	88e3      	ldrh	r3, [r4, #6]
    9a44:	b153      	cbz	r3, 9a5c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    9a46:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    9a48:	682a      	ldr	r2, [r5, #0]
    9a4a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    9a4c:	3b01      	subs	r3, #1
    9a4e:	b29b      	uxth	r3, r3
    9a50:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    9a52:	8922      	ldrh	r2, [r4, #8]
    9a54:	4293      	cmp	r3, r2
    9a56:	d202      	bcs.n	9a5e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    9a58:	8123      	strh	r3, [r4, #8]
    9a5a:	e000      	b.n	9a5e <os_memblock_get+0x26>
    block = NULL;
    9a5c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    9a5e:	f000 fe11 	bl	a684 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    9a62:	4628      	mov	r0, r5
    9a64:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    9a66:	4605      	mov	r5, r0
    return (void *)block;
    9a68:	e7fb      	b.n	9a62 <os_memblock_get+0x2a>

00009a6a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    9a6a:	b538      	push	{r3, r4, r5, lr}
    9a6c:	4604      	mov	r4, r0
    9a6e:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    9a70:	f000 fe02 	bl	a678 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    9a74:	6963      	ldr	r3, [r4, #20]
    9a76:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    9a78:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    9a7a:	88e3      	ldrh	r3, [r4, #6]
    9a7c:	3301      	adds	r3, #1
    9a7e:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    9a80:	f000 fe00 	bl	a684 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    9a84:	2000      	movs	r0, #0
    9a86:	bd38      	pop	{r3, r4, r5, pc}

00009a88 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    9a88:	b178      	cbz	r0, 9aaa <os_memblock_put+0x22>
    9a8a:	4603      	mov	r3, r0
    9a8c:	b179      	cbz	r1, 9aae <os_memblock_put+0x26>
{
    9a8e:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    9a90:	7a82      	ldrb	r2, [r0, #10]
    9a92:	f012 0f01 	tst.w	r2, #1
    9a96:	d004      	beq.n	9aa2 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    9a98:	69c4      	ldr	r4, [r0, #28]
    9a9a:	b114      	cbz	r4, 9aa2 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    9a9c:	6a02      	ldr	r2, [r0, #32]
    9a9e:	47a0      	blx	r4
            goto done;
    9aa0:	e002      	b.n	9aa8 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    9aa2:	4618      	mov	r0, r3
    9aa4:	f7ff ffe1 	bl	9a6a <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    9aa8:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    9aaa:	2003      	movs	r0, #3
    9aac:	4770      	bx	lr
    9aae:	2003      	movs	r0, #3
}
    9ab0:	4770      	bx	lr
	...

00009ab4 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    9ab4:	b510      	push	{r4, lr}
    9ab6:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    9ab8:	b188      	cbz	r0, 9ade <os_mempool_info_get_next+0x2a>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    9aba:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
    9abc:	b16c      	cbz	r4, 9ada <os_mempool_info_get_next+0x26>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    9abe:	6822      	ldr	r2, [r4, #0]
    9ac0:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    9ac2:	88a2      	ldrh	r2, [r4, #4]
    9ac4:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    9ac6:	88e2      	ldrh	r2, [r4, #6]
    9ac8:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    9aca:	8922      	ldrh	r2, [r4, #8]
    9acc:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    9ace:	2220      	movs	r2, #32
    9ad0:	69a1      	ldr	r1, [r4, #24]
    9ad2:	f103 0010 	add.w	r0, r3, #16
    9ad6:	f006 fe1f 	bl	10718 <strncpy>

    return (cur);
}
    9ada:	4620      	mov	r0, r4
    9adc:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
    9ade:	4a01      	ldr	r2, [pc, #4]	; (9ae4 <os_mempool_info_get_next+0x30>)
    9ae0:	6814      	ldr	r4, [r2, #0]
    9ae2:	e7eb      	b.n	9abc <os_mempool_info_get_next+0x8>
    9ae4:	200025f4 	.word	0x200025f4

00009ae8 <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    9ae8:	4b02      	ldr	r3, [pc, #8]	; (9af4 <os_mempool_module_init+0xc>)
    9aea:	2200      	movs	r2, #0
    9aec:	601a      	str	r2, [r3, #0]
    9aee:	605b      	str	r3, [r3, #4]
}
    9af0:	4770      	bx	lr
    9af2:	bf00      	nop
    9af4:	200025f4 	.word	0x200025f4

00009af8 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9af8:	4b02      	ldr	r3, [pc, #8]	; (9b04 <os_msys_find_biggest_pool+0xc>)
    9afa:	6818      	ldr	r0, [r3, #0]
    9afc:	b108      	cbz	r0, 9b02 <os_msys_find_biggest_pool+0xa>
    9afe:	6858      	ldr	r0, [r3, #4]
    9b00:	3808      	subs	r0, #8
}
    9b02:	4770      	bx	lr
    9b04:	20000548 	.word	0x20000548

00009b08 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    9b08:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b0a:	4b09      	ldr	r3, [pc, #36]	; (9b30 <os_msys_find_pool+0x28>)
    9b0c:	6819      	ldr	r1, [r3, #0]
    9b0e:	4608      	mov	r0, r1
    9b10:	e000      	b.n	9b14 <os_msys_find_pool+0xc>
    9b12:	6880      	ldr	r0, [r0, #8]
    9b14:	b110      	cbz	r0, 9b1c <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    9b16:	8803      	ldrh	r3, [r0, #0]
    9b18:	4293      	cmp	r3, r2
    9b1a:	d3fa      	bcc.n	9b12 <os_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
    9b1c:	b100      	cbz	r0, 9b20 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    9b1e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9b20:	b119      	cbz	r1, 9b2a <os_msys_find_pool+0x22>
    9b22:	4b03      	ldr	r3, [pc, #12]	; (9b30 <os_msys_find_pool+0x28>)
    9b24:	6858      	ldr	r0, [r3, #4]
    9b26:	3808      	subs	r0, #8
    9b28:	4770      	bx	lr
    9b2a:	4608      	mov	r0, r1
    return (pool);
    9b2c:	e7f7      	b.n	9b1e <os_msys_find_pool+0x16>
    9b2e:	bf00      	nop
    9b30:	20000548 	.word	0x20000548

00009b34 <os_msys_register>:
{
    9b34:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b36:	4b11      	ldr	r3, [pc, #68]	; (9b7c <os_msys_register+0x48>)
    9b38:	681d      	ldr	r5, [r3, #0]
    9b3a:	462b      	mov	r3, r5
    prev = NULL;
    9b3c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b3e:	e001      	b.n	9b44 <os_msys_register+0x10>
        prev = pool;
    9b40:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b42:	689b      	ldr	r3, [r3, #8]
    9b44:	b11b      	cbz	r3, 9b4e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    9b46:	8801      	ldrh	r1, [r0, #0]
    9b48:	881a      	ldrh	r2, [r3, #0]
    9b4a:	4291      	cmp	r1, r2
    9b4c:	d2f8      	bcs.n	9b40 <os_msys_register+0xc>
    if (prev) {
    9b4e:	b15c      	cbz	r4, 9b68 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    9b50:	68a3      	ldr	r3, [r4, #8]
    9b52:	6083      	str	r3, [r0, #8]
    9b54:	b11b      	cbz	r3, 9b5e <os_msys_register+0x2a>
    9b56:	60a0      	str	r0, [r4, #8]
}
    9b58:	2000      	movs	r0, #0
    9b5a:	bc30      	pop	{r4, r5}
    9b5c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    9b5e:	f100 0308 	add.w	r3, r0, #8
    9b62:	4a06      	ldr	r2, [pc, #24]	; (9b7c <os_msys_register+0x48>)
    9b64:	6053      	str	r3, [r2, #4]
    9b66:	e7f6      	b.n	9b56 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    9b68:	6085      	str	r5, [r0, #8]
    9b6a:	b115      	cbz	r5, 9b72 <os_msys_register+0x3e>
    9b6c:	4b03      	ldr	r3, [pc, #12]	; (9b7c <os_msys_register+0x48>)
    9b6e:	6018      	str	r0, [r3, #0]
    9b70:	e7f2      	b.n	9b58 <os_msys_register+0x24>
    9b72:	f100 0308 	add.w	r3, r0, #8
    9b76:	4a01      	ldr	r2, [pc, #4]	; (9b7c <os_msys_register+0x48>)
    9b78:	6053      	str	r3, [r2, #4]
    9b7a:	e7f7      	b.n	9b6c <os_msys_register+0x38>
    9b7c:	20000548 	.word	0x20000548

00009b80 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    9b80:	b530      	push	{r4, r5, lr}
    9b82:	b083      	sub	sp, #12
    9b84:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    9b86:	9d07      	ldr	r5, [sp, #28]
    9b88:	9501      	str	r5, [sp, #4]
    9b8a:	9d06      	ldr	r5, [sp, #24]
    9b8c:	9500      	str	r5, [sp, #0]
    9b8e:	f008 fed1 	bl	12934 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    9b92:	b138      	cbz	r0, 9ba4 <os_msys_init_once+0x24>
    9b94:	2000      	movs	r0, #0
    9b96:	9000      	str	r0, [sp, #0]
    9b98:	4b09      	ldr	r3, [pc, #36]	; (9bc0 <os_msys_init_once+0x40>)
    9b9a:	681d      	ldr	r5, [r3, #0]
    9b9c:	4603      	mov	r3, r0
    9b9e:	4602      	mov	r2, r0
    9ba0:	4601      	mov	r1, r0
    9ba2:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    9ba4:	4620      	mov	r0, r4
    9ba6:	f7ff ffc5 	bl	9b34 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    9baa:	b138      	cbz	r0, 9bbc <os_msys_init_once+0x3c>
    9bac:	2000      	movs	r0, #0
    9bae:	9000      	str	r0, [sp, #0]
    9bb0:	4b03      	ldr	r3, [pc, #12]	; (9bc0 <os_msys_init_once+0x40>)
    9bb2:	681c      	ldr	r4, [r3, #0]
    9bb4:	4603      	mov	r3, r0
    9bb6:	4602      	mov	r2, r0
    9bb8:	4601      	mov	r1, r0
    9bba:	47a0      	blx	r4
}
    9bbc:	b003      	add	sp, #12
    9bbe:	bd30      	pop	{r4, r5, pc}
    9bc0:	20000768 	.word	0x20000768

00009bc4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    9bc4:	4b02      	ldr	r3, [pc, #8]	; (9bd0 <os_msys_reset+0xc>)
    9bc6:	2200      	movs	r2, #0
    9bc8:	601a      	str	r2, [r3, #0]
    9bca:	605b      	str	r3, [r3, #4]
}
    9bcc:	4770      	bx	lr
    9bce:	bf00      	nop
    9bd0:	20000548 	.word	0x20000548

00009bd4 <os_msys_get_pkthdr>:
{
    9bd4:	b510      	push	{r4, lr}
    9bd6:	460c      	mov	r4, r1
    if (dsize == 0) {
    9bd8:	b930      	cbnz	r0, 9be8 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    9bda:	f7ff ff8d 	bl	9af8 <os_msys_find_biggest_pool>
    if (!pool) {
    9bde:	b110      	cbz	r0, 9be6 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    9be0:	b2e1      	uxtb	r1, r4
    9be2:	f000 fe71 	bl	a8c8 <os_mbuf_get_pkthdr>
}
    9be6:	bd10      	pop	{r4, pc}
    9be8:	f101 0308 	add.w	r3, r1, #8
    9bec:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    9bee:	4403      	add	r3, r0
    9bf0:	b298      	uxth	r0, r3
    9bf2:	f7ff ff89 	bl	9b08 <os_msys_find_pool>
    9bf6:	e7f2      	b.n	9bde <os_msys_get_pkthdr+0xa>

00009bf8 <os_msys_count>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9bf8:	4b05      	ldr	r3, [pc, #20]	; (9c10 <os_msys_count+0x18>)
    9bfa:	681b      	ldr	r3, [r3, #0]
    total = 0;
    9bfc:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9bfe:	e003      	b.n	9c08 <os_msys_count+0x10>
        total += omp->omp_pool->mp_num_blocks;
    9c00:	685a      	ldr	r2, [r3, #4]
    9c02:	8892      	ldrh	r2, [r2, #4]
    9c04:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9c06:	689b      	ldr	r3, [r3, #8]
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d1f9      	bne.n	9c00 <os_msys_count+0x8>
}
    9c0c:	4770      	bx	lr
    9c0e:	bf00      	nop
    9c10:	20000548 	.word	0x20000548

00009c14 <os_msys_num_free>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9c14:	4b05      	ldr	r3, [pc, #20]	; (9c2c <os_msys_num_free+0x18>)
    9c16:	681b      	ldr	r3, [r3, #0]
    total = 0;
    9c18:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9c1a:	e003      	b.n	9c24 <os_msys_num_free+0x10>
        total += omp->omp_pool->mp_num_free;
    9c1c:	685a      	ldr	r2, [r3, #4]
    9c1e:	88d2      	ldrh	r2, [r2, #6]
    9c20:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9c22:	689b      	ldr	r3, [r3, #8]
    9c24:	2b00      	cmp	r3, #0
    9c26:	d1f9      	bne.n	9c1c <os_msys_num_free+0x8>
}
    9c28:	4770      	bx	lr
    9c2a:	bf00      	nop
    9c2c:	20000548 	.word	0x20000548

00009c30 <os_msys_init>:

void
os_msys_init(void)
{
    9c30:	b500      	push	{lr}
    9c32:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    9c34:	f7ff ffc6 	bl	9bc4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    9c38:	4b06      	ldr	r3, [pc, #24]	; (9c54 <os_msys_init+0x24>)
    9c3a:	9301      	str	r3, [sp, #4]
    9c3c:	f44f 7392 	mov.w	r3, #292	; 0x124
    9c40:	9300      	str	r3, [sp, #0]
    9c42:	230c      	movs	r3, #12
    9c44:	4a04      	ldr	r2, [pc, #16]	; (9c58 <os_msys_init+0x28>)
    9c46:	4905      	ldr	r1, [pc, #20]	; (9c5c <os_msys_init+0x2c>)
    9c48:	4805      	ldr	r0, [pc, #20]	; (9c60 <os_msys_init+0x30>)
    9c4a:	f7ff ff99 	bl	9b80 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    9c4e:	b003      	add	sp, #12
    9c50:	f85d fb04 	ldr.w	pc, [sp], #4
    9c54:	00025414 	.word	0x00025414
    9c58:	200033ac 	.word	0x200033ac
    9c5c:	200033b8 	.word	0x200033b8
    9c60:	200025fc 	.word	0x200025fc

00009c64 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    9c64:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9c66:	4b05      	ldr	r3, [pc, #20]	; (9c7c <os_sanity_check_list_lock+0x18>)
    9c68:	6818      	ldr	r0, [r3, #0]
    9c6a:	b900      	cbnz	r0, 9c6e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    9c6c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    9c6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9c72:	4803      	ldr	r0, [pc, #12]	; (9c80 <os_sanity_check_list_lock+0x1c>)
    9c74:	f001 f85a 	bl	ad2c <os_mutex_pend>
    if (rc != OS_OK) {
    9c78:	e7f8      	b.n	9c6c <os_sanity_check_list_lock+0x8>
    9c7a:	bf00      	nop
    9c7c:	200025d0 	.word	0x200025d0
    9c80:	200033d8 	.word	0x200033d8

00009c84 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    9c84:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9c86:	4b04      	ldr	r3, [pc, #16]	; (9c98 <os_sanity_check_list_unlock+0x14>)
    9c88:	6818      	ldr	r0, [r3, #0]
    9c8a:	b900      	cbnz	r0, 9c8e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    9c8c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    9c8e:	4803      	ldr	r0, [pc, #12]	; (9c9c <os_sanity_check_list_unlock+0x18>)
    9c90:	f000 fff0 	bl	ac74 <os_mutex_release>
    if (rc != 0) {
    9c94:	e7fa      	b.n	9c8c <os_sanity_check_list_unlock+0x8>
    9c96:	bf00      	nop
    9c98:	200025d0 	.word	0x200025d0
    9c9c:	200033d8 	.word	0x200033d8

00009ca0 <os_sanity_check_init>:
{
    9ca0:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    9ca2:	2000      	movs	r0, #0
    9ca4:	6018      	str	r0, [r3, #0]
    9ca6:	6058      	str	r0, [r3, #4]
    9ca8:	6098      	str	r0, [r3, #8]
    9caa:	60d8      	str	r0, [r3, #12]
    9cac:	6118      	str	r0, [r3, #16]
}
    9cae:	4770      	bx	lr

00009cb0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    9cb0:	b510      	push	{r4, lr}
    9cb2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9cb4:	f7ff ffd6 	bl	9c64 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9cb8:	b100      	cbz	r0, 9cbc <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    9cba:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    9cbc:	4b03      	ldr	r3, [pc, #12]	; (9ccc <os_sanity_check_register+0x1c>)
    9cbe:	681a      	ldr	r2, [r3, #0]
    9cc0:	6122      	str	r2, [r4, #16]
    9cc2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    9cc4:	f7ff ffde 	bl	9c84 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    9cc8:	e7f7      	b.n	9cba <os_sanity_check_register+0xa>
    9cca:	bf00      	nop
    9ccc:	200033d4 	.word	0x200033d4

00009cd0 <os_sanity_check_reset>:


int
os_sanity_check_reset(struct os_sanity_check *sc)
{
    9cd0:	b510      	push	{r4, lr}
    9cd2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9cd4:	f7ff ffc6 	bl	9c64 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9cd8:	b100      	cbz	r0, 9cdc <os_sanity_check_reset+0xc>
    }

    return (0);
err:
    return (rc);
}
    9cda:	bd10      	pop	{r4, pc}
    sc->sc_checkin_last = os_time_get();
    9cdc:	f000 fba6 	bl	a42c <os_time_get>
    9ce0:	6020      	str	r0, [r4, #0]
    rc = os_sanity_check_list_unlock();
    9ce2:	f7ff ffcf 	bl	9c84 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    9ce6:	e7f8      	b.n	9cda <os_sanity_check_reset+0xa>

00009ce8 <os_sanity_task_checkin>:
{
    9ce8:	b508      	push	{r3, lr}
    if (t == NULL) {
    9cea:	4603      	mov	r3, r0
    9cec:	b120      	cbz	r0, 9cf8 <os_sanity_task_checkin+0x10>
    rc = os_sanity_check_reset(&t->t_sanity_check);
    9cee:	f103 0020 	add.w	r0, r3, #32
    9cf2:	f7ff ffed 	bl	9cd0 <os_sanity_check_reset>
}
    9cf6:	bd08      	pop	{r3, pc}
        t = os_sched_get_current_task();
    9cf8:	f000 f882 	bl	9e00 <os_sched_get_current_task>
    9cfc:	4603      	mov	r3, r0
    9cfe:	e7f6      	b.n	9cee <os_sanity_task_checkin+0x6>

00009d00 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    9d00:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    9d02:	f7ff ffaf 	bl	9c64 <os_sanity_check_list_lock>
    if (rc != 0) {
    9d06:	b910      	cbnz	r0, 9d0e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9d08:	4b17      	ldr	r3, [pc, #92]	; (9d68 <os_sanity_run+0x68>)
    9d0a:	681c      	ldr	r4, [r3, #0]
    9d0c:	e00e      	b.n	9d2c <os_sanity_run+0x2c>
        assert(0);
    9d0e:	2300      	movs	r3, #0
    9d10:	461a      	mov	r2, r3
    9d12:	4619      	mov	r1, r3
    9d14:	4618      	mov	r0, r3
    9d16:	f7ff fa55 	bl	91c4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    9d1a:	f000 fb87 	bl	a42c <os_time_get>
    9d1e:	6823      	ldr	r3, [r4, #0]
    9d20:	6862      	ldr	r2, [r4, #4]
    9d22:	4413      	add	r3, r2
    9d24:	1ac0      	subs	r0, r0, r3
    9d26:	2800      	cmp	r0, #0
    9d28:	dc0d      	bgt.n	9d46 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9d2a:	6924      	ldr	r4, [r4, #16]
    9d2c:	b18c      	cbz	r4, 9d52 <os_sanity_run+0x52>
        if (sc->sc_func) {
    9d2e:	68a3      	ldr	r3, [r4, #8]
    9d30:	2b00      	cmp	r3, #0
    9d32:	d0f2      	beq.n	9d1a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
    9d34:	68e1      	ldr	r1, [r4, #12]
    9d36:	4620      	mov	r0, r4
    9d38:	4798      	blx	r3
            if (rc == OS_OK) {
    9d3a:	2800      	cmp	r0, #0
    9d3c:	d1ed      	bne.n	9d1a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
    9d3e:	f000 fb75 	bl	a42c <os_time_get>
    9d42:	6020      	str	r0, [r4, #0]
                continue;
    9d44:	e7f1      	b.n	9d2a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    9d46:	2300      	movs	r3, #0
    9d48:	461a      	mov	r2, r3
    9d4a:	4619      	mov	r1, r3
    9d4c:	4618      	mov	r0, r3
    9d4e:	f7ff fa39 	bl	91c4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    9d52:	f7ff ff97 	bl	9c84 <os_sanity_check_list_unlock>
    if (rc != 0) {
    9d56:	b900      	cbnz	r0, 9d5a <os_sanity_run+0x5a>
        assert(0);
    }
}
    9d58:	bd10      	pop	{r4, pc}
        assert(0);
    9d5a:	2300      	movs	r3, #0
    9d5c:	461a      	mov	r2, r3
    9d5e:	4619      	mov	r1, r3
    9d60:	4618      	mov	r0, r3
    9d62:	f7ff fa2f 	bl	91c4 <__assert_func>
    9d66:	bf00      	nop
    9d68:	200033d4 	.word	0x200033d4

00009d6c <os_sanity_init>:

int
os_sanity_init(void)
{
    9d6c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    9d6e:	4802      	ldr	r0, [pc, #8]	; (9d78 <os_sanity_init+0xc>)
    9d70:	f000 ff76 	bl	ac60 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    9d74:	bd08      	pop	{r3, pc}
    9d76:	bf00      	nop
    9d78:	200033d8 	.word	0x200033d8

00009d7c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    9d7c:	7b03      	ldrb	r3, [r0, #12]
    9d7e:	2b01      	cmp	r3, #1
    9d80:	d001      	beq.n	9d86 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    9d82:	2002      	movs	r0, #2
}
    9d84:	4770      	bx	lr
{
    9d86:	b510      	push	{r4, lr}
    9d88:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9d8a:	f000 fc75 	bl	a678 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9d8e:	4b0f      	ldr	r3, [pc, #60]	; (9dcc <os_sched_insert+0x50>)
    9d90:	681b      	ldr	r3, [r3, #0]
    9d92:	b12b      	cbz	r3, 9da0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    9d94:	7ae1      	ldrb	r1, [r4, #11]
    9d96:	7ada      	ldrb	r2, [r3, #11]
    9d98:	4291      	cmp	r1, r2
    9d9a:	d301      	bcc.n	9da0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9d9e:	e7f8      	b.n	9d92 <os_sched_insert+0x16>
    if (entry) {
    9da0:	b153      	cbz	r3, 9db8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    9da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9da4:	64a2      	str	r2, [r4, #72]	; 0x48
    9da6:	6463      	str	r3, [r4, #68]	; 0x44
    9da8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9daa:	6014      	str	r4, [r2, #0]
    9dac:	3444      	adds	r4, #68	; 0x44
    9dae:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    9db0:	f000 fc68 	bl	a684 <os_arch_restore_sr>
    return (0);
    9db4:	2000      	movs	r0, #0
}
    9db6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    9db8:	2300      	movs	r3, #0
    9dba:	6463      	str	r3, [r4, #68]	; 0x44
    9dbc:	4b03      	ldr	r3, [pc, #12]	; (9dcc <os_sched_insert+0x50>)
    9dbe:	685a      	ldr	r2, [r3, #4]
    9dc0:	64a2      	str	r2, [r4, #72]	; 0x48
    9dc2:	6014      	str	r4, [r2, #0]
    9dc4:	3444      	adds	r4, #68	; 0x44
    9dc6:	605c      	str	r4, [r3, #4]
    9dc8:	e7f2      	b.n	9db0 <os_sched_insert+0x34>
    9dca:	bf00      	nop
    9dcc:	20000550 	.word	0x20000550

00009dd0 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    9dd0:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    9dd2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9dd4:	3301      	adds	r3, #1
    9dd6:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    9dd8:	4b06      	ldr	r3, [pc, #24]	; (9df4 <os_sched_ctx_sw_hook+0x24>)
    9dda:	681c      	ldr	r4, [r3, #0]
    9ddc:	4b06      	ldr	r3, [pc, #24]	; (9df8 <os_sched_ctx_sw_hook+0x28>)
    9dde:	6818      	ldr	r0, [r3, #0]
    9de0:	4906      	ldr	r1, [pc, #24]	; (9dfc <os_sched_ctx_sw_hook+0x2c>)
    9de2:	680b      	ldr	r3, [r1, #0]
    9de4:	1ac2      	subs	r2, r0, r3
    9de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9de8:	4413      	add	r3, r2
    9dea:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    9dec:	6008      	str	r0, [r1, #0]
}
    9dee:	f85d 4b04 	ldr.w	r4, [sp], #4
    9df2:	4770      	bx	lr
    9df4:	200033e4 	.word	0x200033e4
    9df8:	20003428 	.word	0x20003428
    9dfc:	200033e8 	.word	0x200033e8

00009e00 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    9e00:	4b01      	ldr	r3, [pc, #4]	; (9e08 <os_sched_get_current_task+0x8>)
    9e02:	6818      	ldr	r0, [r3, #0]
    9e04:	4770      	bx	lr
    9e06:	bf00      	nop
    9e08:	200033e4 	.word	0x200033e4

00009e0c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    9e0c:	4b01      	ldr	r3, [pc, #4]	; (9e14 <os_sched_set_current_task+0x8>)
    9e0e:	6018      	str	r0, [r3, #0]
}
    9e10:	4770      	bx	lr
    9e12:	bf00      	nop
    9e14:	200033e4 	.word	0x200033e4

00009e18 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    9e18:	b538      	push	{r3, r4, r5, lr}
    9e1a:	4604      	mov	r4, r0
    9e1c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9e1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9e20:	b183      	cbz	r3, 9e44 <os_sched_sleep+0x2c>
    9e22:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9e24:	649a      	str	r2, [r3, #72]	; 0x48
    9e26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9e28:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9e2a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    9e2c:	2302      	movs	r3, #2
    9e2e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    9e30:	f000 fafc 	bl	a42c <os_time_get>
    9e34:	4428      	add	r0, r5
    9e36:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    9e38:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9e3c:	d006      	beq.n	9e4c <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9e3e:	4b18      	ldr	r3, [pc, #96]	; (9ea0 <os_sched_sleep+0x88>)
    9e40:	681b      	ldr	r3, [r3, #0]
    9e42:	e011      	b.n	9e68 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9e44:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9e46:	4b17      	ldr	r3, [pc, #92]	; (9ea4 <os_sched_sleep+0x8c>)
    9e48:	605a      	str	r2, [r3, #4]
    9e4a:	e7ec      	b.n	9e26 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9e4c:	7b63      	ldrb	r3, [r4, #13]
    9e4e:	f043 0301 	orr.w	r3, r3, #1
    9e52:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9e54:	2300      	movs	r3, #0
    9e56:	6463      	str	r3, [r4, #68]	; 0x44
    9e58:	4b11      	ldr	r3, [pc, #68]	; (9ea0 <os_sched_sleep+0x88>)
    9e5a:	685a      	ldr	r2, [r3, #4]
    9e5c:	64a2      	str	r2, [r4, #72]	; 0x48
    9e5e:	6014      	str	r4, [r2, #0]
    9e60:	3444      	adds	r4, #68	; 0x44
    9e62:	605c      	str	r4, [r3, #4]
    9e64:	e011      	b.n	9e8a <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9e68:	b13b      	cbz	r3, 9e7a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9e6a:	7b5a      	ldrb	r2, [r3, #13]
    9e6c:	f012 0f01 	tst.w	r2, #1
    9e70:	d103      	bne.n	9e7a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    9e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9e74:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9e76:	2a00      	cmp	r2, #0
    9e78:	ddf5      	ble.n	9e66 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    9e7a:	b143      	cbz	r3, 9e8e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    9e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9e7e:	64a2      	str	r2, [r4, #72]	; 0x48
    9e80:	6463      	str	r3, [r4, #68]	; 0x44
    9e82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9e84:	6014      	str	r4, [r2, #0]
    9e86:	3444      	adds	r4, #68	; 0x44
    9e88:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    9e8a:	2000      	movs	r0, #0
    9e8c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9e8e:	2300      	movs	r3, #0
    9e90:	6463      	str	r3, [r4, #68]	; 0x44
    9e92:	4b03      	ldr	r3, [pc, #12]	; (9ea0 <os_sched_sleep+0x88>)
    9e94:	685a      	ldr	r2, [r3, #4]
    9e96:	64a2      	str	r2, [r4, #72]	; 0x48
    9e98:	6014      	str	r4, [r2, #0]
    9e9a:	3444      	adds	r4, #68	; 0x44
    9e9c:	605c      	str	r4, [r3, #4]
    9e9e:	e7f4      	b.n	9e8a <os_sched_sleep+0x72>
    9ea0:	20000558 	.word	0x20000558
    9ea4:	20000550 	.word	0x20000550

00009ea8 <os_sched_remove>:
 */
int
os_sched_remove(struct os_task *t)
{

    if (t->t_state == OS_TASK_SLEEP) {
    9ea8:	7b03      	ldrb	r3, [r0, #12]
    9eaa:	2b02      	cmp	r3, #2
    9eac:	d014      	beq.n	9ed8 <os_sched_remove+0x30>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    } else if (t->t_state == OS_TASK_READY) {
    9eae:	2b01      	cmp	r3, #1
    9eb0:	d01e      	beq.n	9ef0 <os_sched_remove+0x48>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    }
    t->t_next_wakeup = 0;
    9eb2:	2300      	movs	r3, #0
    9eb4:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9eb6:	7b43      	ldrb	r3, [r0, #13]
    9eb8:	f043 0301 	orr.w	r3, r3, #1
    9ebc:	7343      	strb	r3, [r0, #13]

    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9ebe:	4b18      	ldr	r3, [pc, #96]	; (9f20 <os_sched_remove+0x78>)
    9ec0:	681b      	ldr	r3, [r3, #0]
    9ec2:	4283      	cmp	r3, r0
    9ec4:	d020      	beq.n	9f08 <os_sched_remove+0x60>
    9ec6:	461a      	mov	r2, r3
    9ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9eca:	4283      	cmp	r3, r0
    9ecc:	d1fb      	bne.n	9ec6 <os_sched_remove+0x1e>
    9ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9ed0:	6413      	str	r3, [r2, #64]	; 0x40
    9ed2:	b303      	cbz	r3, 9f16 <os_sched_remove+0x6e>

    os_trace_task_stop_exec();
    return OS_OK;
}
    9ed4:	2000      	movs	r0, #0
    9ed6:	4770      	bx	lr
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9ed8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9eda:	b12b      	cbz	r3, 9ee8 <os_sched_remove+0x40>
    9edc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ede:	649a      	str	r2, [r3, #72]	; 0x48
    9ee0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9ee2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9ee4:	601a      	str	r2, [r3, #0]
    9ee6:	e7e4      	b.n	9eb2 <os_sched_remove+0xa>
    9ee8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9eea:	4b0e      	ldr	r3, [pc, #56]	; (9f24 <os_sched_remove+0x7c>)
    9eec:	605a      	str	r2, [r3, #4]
    9eee:	e7f7      	b.n	9ee0 <os_sched_remove+0x38>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9ef0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9ef2:	b12b      	cbz	r3, 9f00 <os_sched_remove+0x58>
    9ef4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ef6:	649a      	str	r2, [r3, #72]	; 0x48
    9ef8:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9efa:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9efc:	601a      	str	r2, [r3, #0]
    9efe:	e7d8      	b.n	9eb2 <os_sched_remove+0xa>
    9f00:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9f02:	4b09      	ldr	r3, [pc, #36]	; (9f28 <os_sched_remove+0x80>)
    9f04:	605a      	str	r2, [r3, #4]
    9f06:	e7f7      	b.n	9ef8 <os_sched_remove+0x50>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9f0a:	4a05      	ldr	r2, [pc, #20]	; (9f20 <os_sched_remove+0x78>)
    9f0c:	6013      	str	r3, [r2, #0]
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d1e0      	bne.n	9ed4 <os_sched_remove+0x2c>
    9f12:	6052      	str	r2, [r2, #4]
    9f14:	e7de      	b.n	9ed4 <os_sched_remove+0x2c>
    9f16:	3240      	adds	r2, #64	; 0x40
    9f18:	4b01      	ldr	r3, [pc, #4]	; (9f20 <os_sched_remove+0x78>)
    9f1a:	605a      	str	r2, [r3, #4]
    9f1c:	e7da      	b.n	9ed4 <os_sched_remove+0x2c>
    9f1e:	bf00      	nop
    9f20:	200033ec 	.word	0x200033ec
    9f24:	20000558 	.word	0x20000558
    9f28:	20000550 	.word	0x20000550

00009f2c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    9f2c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    9f2e:	7b03      	ldrb	r3, [r0, #12]
    9f30:	2b02      	cmp	r3, #2
    9f32:	d121      	bne.n	9f78 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    9f34:	69c2      	ldr	r2, [r0, #28]
    9f36:	b162      	cbz	r2, 9f52 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9f38:	6813      	ldr	r3, [r2, #0]
    9f3a:	b31b      	cbz	r3, 9f84 <os_sched_wakeup+0x58>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9f3c:	4283      	cmp	r3, r0
    9f3e:	d026      	beq.n	9f8e <os_sched_wakeup+0x62>
    9f40:	461a      	mov	r2, r3
    9f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f44:	4283      	cmp	r3, r0
    9f46:	d1fb      	bne.n	9f40 <os_sched_wakeup+0x14>
    9f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    9f4c:	2300      	movs	r3, #0
    9f4e:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    9f50:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    9f52:	2301      	movs	r3, #1
    9f54:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    9f56:	2300      	movs	r3, #0
    9f58:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    9f5a:	7b43      	ldrb	r3, [r0, #13]
    9f5c:	f023 0301 	bic.w	r3, r3, #1
    9f60:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9f62:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9f64:	b1b3      	cbz	r3, 9f94 <os_sched_wakeup+0x68>
    9f66:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9f68:	649a      	str	r2, [r3, #72]	; 0x48
    9f6a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9f6e:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    9f70:	f7ff ff04 	bl	9d7c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    9f74:	2000      	movs	r0, #0
    9f76:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    9f78:	2300      	movs	r3, #0
    9f7a:	461a      	mov	r2, r3
    9f7c:	4619      	mov	r1, r3
    9f7e:	4618      	mov	r0, r3
    9f80:	f7ff f920 	bl	91c4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9f84:	461a      	mov	r2, r3
    9f86:	4619      	mov	r1, r3
    9f88:	4618      	mov	r0, r3
    9f8a:	f7ff f91b 	bl	91c4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f90:	6013      	str	r3, [r2, #0]
    9f92:	e7db      	b.n	9f4c <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9f94:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9f96:	4b01      	ldr	r3, [pc, #4]	; (9f9c <os_sched_wakeup+0x70>)
    9f98:	605a      	str	r2, [r3, #4]
    9f9a:	e7e6      	b.n	9f6a <os_sched_wakeup+0x3e>
    9f9c:	20000558 	.word	0x20000558

00009fa0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    9fa0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    9fa2:	f000 fa43 	bl	a42c <os_time_get>
    9fa6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9fa8:	f000 fb66 	bl	a678 <os_arch_save_sr>
    9fac:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    9fae:	4b0a      	ldr	r3, [pc, #40]	; (9fd8 <os_sched_os_timer_exp+0x38>)
    9fb0:	6818      	ldr	r0, [r3, #0]
    while (t) {
    9fb2:	e002      	b.n	9fba <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    9fb4:	f7ff ffba 	bl	9f2c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    9fb8:	4620      	mov	r0, r4
    while (t) {
    9fba:	b140      	cbz	r0, 9fce <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9fbc:	7b43      	ldrb	r3, [r0, #13]
    9fbe:	f013 0f01 	tst.w	r3, #1
    9fc2:	d104      	bne.n	9fce <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    9fc4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9fc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9fc8:	1aeb      	subs	r3, r5, r3
    9fca:	2b00      	cmp	r3, #0
    9fcc:	daf2      	bge.n	9fb4 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    9fce:	4630      	mov	r0, r6
    9fd0:	f000 fb58 	bl	a684 <os_arch_restore_sr>
}
    9fd4:	bd70      	pop	{r4, r5, r6, pc}
    9fd6:	bf00      	nop
    9fd8:	20000558 	.word	0x20000558

00009fdc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    9fdc:	b510      	push	{r4, lr}
    9fde:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    9fe0:	f000 fb53 	bl	a68a <os_arch_in_critical>
    9fe4:	b150      	cbz	r0, 9ffc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    9fe6:	4b0c      	ldr	r3, [pc, #48]	; (a018 <os_sched_wakeup_ticks+0x3c>)
    9fe8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9fea:	b17b      	cbz	r3, a00c <os_sched_wakeup_ticks+0x30>
    9fec:	7b5a      	ldrb	r2, [r3, #13]
    9fee:	f012 0f01 	tst.w	r2, #1
    9ff2:	d10e      	bne.n	a012 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    9ff4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    9ff6:	1b00      	subs	r0, r0, r4
    9ff8:	d406      	bmi.n	a008 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    9ffa:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9ffc:	2300      	movs	r3, #0
    9ffe:	461a      	mov	r2, r3
    a000:	4619      	mov	r1, r3
    a002:	4618      	mov	r0, r3
    a004:	f7ff f8de 	bl	91c4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    a008:	2000      	movs	r0, #0
    a00a:	e7f6      	b.n	9ffa <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    a00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a010:	e7f3      	b.n	9ffa <os_sched_wakeup_ticks+0x1e>
    a012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    a016:	e7f0      	b.n	9ffa <os_sched_wakeup_ticks+0x1e>
    a018:	20000558 	.word	0x20000558

0000a01c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    a01c:	4b01      	ldr	r3, [pc, #4]	; (a024 <os_sched_next_task+0x8>)
    a01e:	6818      	ldr	r0, [r3, #0]
    a020:	4770      	bx	lr
    a022:	bf00      	nop
    a024:	20000550 	.word	0x20000550

0000a028 <os_sched>:
{
    a028:	b538      	push	{r3, r4, r5, lr}
    a02a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    a02c:	f000 fb24 	bl	a678 <os_arch_save_sr>
    a030:	4605      	mov	r5, r0
    if (!next_t) {
    a032:	b134      	cbz	r4, a042 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    a034:	4620      	mov	r0, r4
    a036:	f000 fb15 	bl	a664 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    a03a:	4628      	mov	r0, r5
    a03c:	f000 fb22 	bl	a684 <os_arch_restore_sr>
}
    a040:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    a042:	f7ff ffeb 	bl	a01c <os_sched_next_task>
    a046:	4604      	mov	r4, r0
    a048:	e7f4      	b.n	a034 <os_sched+0xc>
	...

0000a04c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    a04c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    a04e:	7b03      	ldrb	r3, [r0, #12]
    a050:	2b01      	cmp	r3, #1
    a052:	d000      	beq.n	a056 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    a054:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    a056:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a058:	b13b      	cbz	r3, a06a <os_sched_resort+0x1e>
    a05a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    a05c:	649a      	str	r2, [r3, #72]	; 0x48
    a05e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    a060:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a062:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    a064:	f7ff fe8a 	bl	9d7c <os_sched_insert>
}
    a068:	e7f4      	b.n	a054 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    a06a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    a06c:	4b01      	ldr	r3, [pc, #4]	; (a074 <os_sched_resort+0x28>)
    a06e:	605a      	str	r2, [r3, #4]
    a070:	e7f5      	b.n	a05e <os_sched_resort+0x12>
    a072:	bf00      	nop
    a074:	20000550 	.word	0x20000550

0000a078 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    a078:	4603      	mov	r3, r0
    a07a:	b118      	cbz	r0, a084 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    a07c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    a07e:	2000      	movs	r0, #0
    a080:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    a082:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    a084:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    a086:	4770      	bx	lr

0000a088 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    a08a:	4b17      	ldr	r3, [pc, #92]	; (a0e8 <os_sem_release+0x60>)
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	b33b      	cbz	r3, a0e0 <os_sem_release+0x58>
    a090:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    a092:	b338      	cbz	r0, a0e4 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    a094:	f7ff feb4 	bl	9e00 <os_sched_get_current_task>
    a098:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    a09a:	f000 faed 	bl	a678 <os_arch_save_sr>
    a09e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    a0a0:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
    a0a2:	b165      	cbz	r5, a0be <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    a0a4:	7b6b      	ldrb	r3, [r5, #13]
    a0a6:	f023 0302 	bic.w	r3, r3, #2
    a0aa:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    a0ac:	4628      	mov	r0, r5
    a0ae:	f7ff ff3d 	bl	9f2c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    a0b2:	7afa      	ldrb	r2, [r7, #11]
    a0b4:	7aeb      	ldrb	r3, [r5, #11]
    a0b6:	429a      	cmp	r2, r3
    a0b8:	d80b      	bhi.n	a0d2 <os_sem_release+0x4a>
    resched = 0;
    a0ba:	2400      	movs	r4, #0
    a0bc:	e003      	b.n	a0c6 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    a0be:	88e3      	ldrh	r3, [r4, #6]
    a0c0:	3301      	adds	r3, #1
    a0c2:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    a0c4:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
    a0c6:	4630      	mov	r0, r6
    a0c8:	f000 fadc 	bl	a684 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    a0cc:	b91c      	cbnz	r4, a0d6 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
    a0ce:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
    a0d2:	2401      	movs	r4, #1
    a0d4:	e7f7      	b.n	a0c6 <os_sem_release+0x3e>
        os_sched(rdy);
    a0d6:	4628      	mov	r0, r5
    a0d8:	f7ff ffa6 	bl	a028 <os_sched>
    ret = OS_OK;
    a0dc:	2000      	movs	r0, #0
    a0de:	e7f7      	b.n	a0d0 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
    a0e0:	2009      	movs	r0, #9
    a0e2:	e7f5      	b.n	a0d0 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
    a0e4:	2003      	movs	r0, #3
    a0e6:	e7f3      	b.n	a0d0 <os_sem_release+0x48>
    a0e8:	200025d0 	.word	0x200025d0

0000a0ec <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    a0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    a0ee:	4b2b      	ldr	r3, [pc, #172]	; (a19c <os_sem_pend+0xb0>)
    a0f0:	681b      	ldr	r3, [r3, #0]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	d04d      	beq.n	a192 <os_sem_pend+0xa6>
    a0f6:	4604      	mov	r4, r0
    a0f8:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    a0fa:	2800      	cmp	r0, #0
    a0fc:	d04b      	beq.n	a196 <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    a0fe:	f7ff fe7f 	bl	9e00 <os_sched_get_current_task>
    a102:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    a104:	f000 fab8 	bl	a678 <os_arch_save_sr>
    a108:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    a10a:	88e3      	ldrh	r3, [r4, #6]
    a10c:	b14b      	cbz	r3, a122 <os_sem_pend+0x36>
        sem->sem_tokens--;
    a10e:	3b01      	subs	r3, #1
    a110:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    a112:	2400      	movs	r4, #0
    sched = 0;
    a114:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    a116:	4630      	mov	r0, r6
    a118:	f000 fab4 	bl	a684 <os_arch_restore_sr>

    if (sched) {
    a11c:	bb47      	cbnz	r7, a170 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    a11e:	4620      	mov	r0, r4
    a120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    a122:	b317      	cbz	r7, a16a <os_sem_pend+0x7e>
        current->t_obj = sem;
    a124:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    a126:	7b6b      	ldrb	r3, [r5, #13]
    a128:	f043 0302 	orr.w	r3, r3, #2
    a12c:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    a12e:	f8d4 c000 	ldr.w	ip, [r4]
    a132:	f1bc 0f00 	cmp.w	ip, #0
    a136:	d00e      	beq.n	a156 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    a138:	4663      	mov	r3, ip
        last = NULL;
    a13a:	2000      	movs	r0, #0
    a13c:	e001      	b.n	a142 <os_sem_pend+0x56>
                last = entry;
    a13e:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    a140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a142:	b11b      	cbz	r3, a14c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
    a144:	7ae9      	ldrb	r1, [r5, #11]
    a146:	7ada      	ldrb	r2, [r3, #11]
    a148:	4291      	cmp	r1, r2
    a14a:	d2f8      	bcs.n	a13e <os_sem_pend+0x52>
        if (last) {
    a14c:	b118      	cbz	r0, a156 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    a14e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a150:	64eb      	str	r3, [r5, #76]	; 0x4c
    a152:	64c5      	str	r5, [r0, #76]	; 0x4c
    a154:	e002      	b.n	a15c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    a156:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
    a15a:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
    a15c:	4639      	mov	r1, r7
    a15e:	4628      	mov	r0, r5
    a160:	f7ff fe5a 	bl	9e18 <os_sched_sleep>
        ret = OS_OK;
    a164:	2400      	movs	r4, #0
        sched = 1;
    a166:	2701      	movs	r7, #1
    a168:	e7d5      	b.n	a116 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
    a16a:	2406      	movs	r4, #6
    sched = 0;
    a16c:	2700      	movs	r7, #0
    a16e:	e7d2      	b.n	a116 <os_sem_pend+0x2a>
        os_sched(NULL);
    a170:	2000      	movs	r0, #0
    a172:	f7ff ff59 	bl	a028 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    a176:	7b6c      	ldrb	r4, [r5, #13]
    a178:	f014 0402 	ands.w	r4, r4, #2
    a17c:	d0cf      	beq.n	a11e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
    a17e:	f000 fa7b 	bl	a678 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    a182:	7b6b      	ldrb	r3, [r5, #13]
    a184:	f023 0302 	bic.w	r3, r3, #2
    a188:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
    a18a:	f000 fa7b 	bl	a684 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    a18e:	2406      	movs	r4, #6
    a190:	e7c5      	b.n	a11e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
    a192:	2409      	movs	r4, #9
    a194:	e7c3      	b.n	a11e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
    a196:	2403      	movs	r4, #3
    a198:	e7c1      	b.n	a11e <os_sem_pend+0x32>
    a19a:	bf00      	nop
    a19c:	200025d0 	.word	0x200025d0

0000a1a0 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    a1a0:	2300      	movs	r3, #0
    a1a2:	e003      	b.n	a1ac <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    a1a4:	4a03      	ldr	r2, [pc, #12]	; (a1b4 <_clear_stack+0x14>)
    a1a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    a1aa:	3301      	adds	r3, #1
    a1ac:	428b      	cmp	r3, r1
    a1ae:	dbf9      	blt.n	a1a4 <_clear_stack+0x4>
    }
}
    a1b0:	4770      	bx	lr
    a1b2:	bf00      	nop
    a1b4:	deadbeef 	.word	0xdeadbeef

0000a1b8 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    a1b8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    a1bc:	4604      	mov	r4, r0
    a1be:	460d      	mov	r5, r1
    a1c0:	4617      	mov	r7, r2
    a1c2:	461e      	mov	r6, r3
    a1c4:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    a1c8:	2250      	movs	r2, #80	; 0x50
    a1ca:	2100      	movs	r1, #0
    a1cc:	f006 fa65 	bl	1069a <memset>

    t->t_func = func;
    a1d0:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    a1d2:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    a1d4:	f000 fa50 	bl	a678 <os_arch_save_sr>
    rc = g_task_id;
    a1d8:	4b2b      	ldr	r3, [pc, #172]	; (a288 <os_task_init+0xd0>)
    a1da:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    a1dc:	1c72      	adds	r2, r6, #1
    a1de:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    a1e0:	f000 fa50 	bl	a684 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    a1e4:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    a1e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a1ea:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    a1ec:	2301      	movs	r3, #1
    a1ee:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    a1f0:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    a1f2:	2300      	movs	r3, #0
    a1f4:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
    a1f6:	f104 0620 	add.w	r6, r4, #32
    a1fa:	4630      	mov	r0, r6
    a1fc:	f7ff fd50 	bl	9ca0 <os_sanity_check_init>
    if (rc != OS_OK) {
    a200:	4605      	mov	r5, r0
    a202:	2800      	cmp	r0, #0
    a204:	d133      	bne.n	a26e <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    a206:	9b07      	ldr	r3, [sp, #28]
    a208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a20c:	d005      	beq.n	a21a <os_task_init+0x62>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
    a20e:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
    a210:	4630      	mov	r0, r6
    a212:	f7ff fd4d 	bl	9cb0 <os_sanity_check_register>
        if (rc != OS_OK) {
    a216:	4605      	mov	r5, r0
    a218:	bb48      	cbnz	r0, a26e <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    a21a:	4649      	mov	r1, r9
    a21c:	9808      	ldr	r0, [sp, #32]
    a21e:	f7ff ffbf 	bl	a1a0 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
    a222:	9b08      	ldr	r3, [sp, #32]
    a224:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    a228:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    a22a:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    a22e:	464a      	mov	r2, r9
    a230:	4620      	mov	r0, r4
    a232:	f000 fa2f 	bl	a694 <os_arch_task_stack_init>
    a236:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    a238:	4b14      	ldr	r3, [pc, #80]	; (a28c <os_task_init+0xd4>)
    a23a:	681b      	ldr	r3, [r3, #0]
    a23c:	b15b      	cbz	r3, a256 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
    a23e:	7ae1      	ldrb	r1, [r4, #11]
    a240:	7ada      	ldrb	r2, [r3, #11]
    a242:	4291      	cmp	r1, r2
    a244:	d001      	beq.n	a24a <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a248:	e7f8      	b.n	a23c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
    a24a:	2300      	movs	r3, #0
    a24c:	461a      	mov	r2, r3
    a24e:	4619      	mov	r1, r3
    a250:	4618      	mov	r0, r3
    a252:	f7fe ffb7 	bl	91c4 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    a256:	6423      	str	r3, [r4, #64]	; 0x40
    a258:	4b0c      	ldr	r3, [pc, #48]	; (a28c <os_task_init+0xd4>)
    a25a:	685a      	ldr	r2, [r3, #4]
    a25c:	6014      	str	r4, [r2, #0]
    a25e:	f104 0240 	add.w	r2, r4, #64	; 0x40
    a262:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    a264:	4620      	mov	r0, r4
    a266:	f7ff fd89 	bl	9d7c <os_sched_insert>
    a26a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    a26c:	b110      	cbz	r0, a274 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
    a26e:	4628      	mov	r0, r5
    a270:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    a274:	f7ff f860 	bl	9338 <os_started>
    a278:	b908      	cbnz	r0, a27e <os_task_init+0xc6>
    return (0);
    a27a:	4605      	mov	r5, r0
    a27c:	e7f7      	b.n	a26e <os_task_init+0xb6>
        os_sched(NULL);
    a27e:	2000      	movs	r0, #0
    a280:	f7ff fed2 	bl	a028 <os_sched>
    a284:	e7f3      	b.n	a26e <os_task_init+0xb6>
    a286:	bf00      	nop
    a288:	200033f4 	.word	0x200033f4
    a28c:	200033ec 	.word	0x200033ec

0000a290 <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    a290:	b538      	push	{r3, r4, r5, lr}
    a292:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    a294:	f7ff fdb4 	bl	9e00 <os_sched_get_current_task>
    a298:	4284      	cmp	r4, r0
    a29a:	d016      	beq.n	a2ca <os_task_remove+0x3a>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    a29c:	7b23      	ldrb	r3, [r4, #12]
    a29e:	3b01      	subs	r3, #1
    a2a0:	b2db      	uxtb	r3, r3
    a2a2:	2b01      	cmp	r3, #1
    a2a4:	d813      	bhi.n	a2ce <os_task_remove+0x3e>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    a2a6:	7b63      	ldrb	r3, [r4, #13]
    a2a8:	f013 0f0e 	tst.w	r3, #14
    a2ac:	d111      	bne.n	a2d2 <os_task_remove+0x42>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    a2ae:	7ba3      	ldrb	r3, [r4, #14]
    a2b0:	b98b      	cbnz	r3, a2d6 <os_task_remove+0x46>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    a2b2:	f000 f9e1 	bl	a678 <os_arch_save_sr>
    a2b6:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    a2b8:	4620      	mov	r0, r4
    a2ba:	f7ff fdf5 	bl	9ea8 <os_sched_remove>
    a2be:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    a2c0:	4628      	mov	r0, r5
    a2c2:	f000 f9df 	bl	a684 <os_arch_restore_sr>
    return rc;
}
    a2c6:	4620      	mov	r0, r4
    a2c8:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    a2ca:	2403      	movs	r4, #3
    a2cc:	e7fb      	b.n	a2c6 <os_task_remove+0x36>
        return OS_NOT_STARTED;
    a2ce:	2409      	movs	r4, #9
    a2d0:	e7f9      	b.n	a2c6 <os_task_remove+0x36>
        return OS_EBUSY;
    a2d2:	240b      	movs	r4, #11
    a2d4:	e7f7      	b.n	a2c6 <os_task_remove+0x36>
        return OS_EBUSY;
    a2d6:	240b      	movs	r4, #11
    a2d8:	e7f5      	b.n	a2c6 <os_task_remove+0x36>
	...

0000a2dc <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    a2dc:	b538      	push	{r3, r4, r5, lr}
    a2de:	468c      	mov	ip, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    a2e0:	b1b8      	cbz	r0, a312 <os_task_info_get_next+0x36>
        next = STAILQ_NEXT(prev, t_os_task_list);
    a2e2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    a2e4:	2d00      	cmp	r5, #0
    a2e6:	d032      	beq.n	a34e <os_task_info_get_next+0x72>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    a2e8:	7aeb      	ldrb	r3, [r5, #11]
    a2ea:	f88c 3000 	strb.w	r3, [ip]
    oti->oti_taskid = next->t_taskid;
    a2ee:	7aab      	ldrb	r3, [r5, #10]
    a2f0:	f88c 3001 	strb.w	r3, [ip, #1]
    oti->oti_state = next->t_state;
    a2f4:	7b2b      	ldrb	r3, [r5, #12]
    a2f6:	f88c 3002 	strb.w	r3, [ip, #2]

    top = next->t_stacktop;
    a2fa:	686c      	ldr	r4, [r5, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    a2fc:	892b      	ldrh	r3, [r5, #8]
    a2fe:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
    while (bottom < top) {
    a302:	42a3      	cmp	r3, r4
    a304:	d208      	bcs.n	a318 <os_task_info_get_next+0x3c>
        if (*bottom != OS_STACK_PATTERN) {
    a306:	4a13      	ldr	r2, [pc, #76]	; (a354 <os_task_info_get_next+0x78>)
    a308:	6819      	ldr	r1, [r3, #0]
    a30a:	4291      	cmp	r1, r2
    a30c:	d104      	bne.n	a318 <os_task_info_get_next+0x3c>
            break;
        }
        ++bottom;
    a30e:	3304      	adds	r3, #4
    a310:	e7f7      	b.n	a302 <os_task_info_get_next+0x26>
        next = STAILQ_FIRST(&g_os_task_list);
    a312:	4b11      	ldr	r3, [pc, #68]	; (a358 <os_task_info_get_next+0x7c>)
    a314:	681d      	ldr	r5, [r3, #0]
    a316:	e7e5      	b.n	a2e4 <os_task_info_get_next+0x8>
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    a318:	1ae3      	subs	r3, r4, r3
    a31a:	f3c3 038f 	ubfx	r3, r3, #2, #16
    a31e:	f8ac 3004 	strh.w	r3, [ip, #4]
    oti->oti_stksize = next->t_stacksize;
    a322:	892b      	ldrh	r3, [r5, #8]
    a324:	f8ac 3006 	strh.w	r3, [ip, #6]
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    a328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a32a:	f8cc 3008 	str.w	r3, [ip, #8]
    oti->oti_runtime = next->t_run_time;
    a32e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a330:	f8cc 300c 	str.w	r3, [ip, #12]
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    a334:	6a2b      	ldr	r3, [r5, #32]
    a336:	f8cc 3010 	str.w	r3, [ip, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
        next->t_sanity_check.sc_checkin_itvl;
    a33a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    a33c:	4413      	add	r3, r2
    a33e:	f8cc 3014 	str.w	r3, [ip, #20]
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    a342:	2220      	movs	r2, #32
    a344:	6929      	ldr	r1, [r5, #16]
    a346:	f10c 0018 	add.w	r0, ip, #24
    a34a:	f006 f9e5 	bl	10718 <strncpy>

    return (next);
}
    a34e:	4628      	mov	r0, r5
    a350:	bd38      	pop	{r3, r4, r5, pc}
    a352:	bf00      	nop
    a354:	deadbeef 	.word	0xdeadbeef
    a358:	200033ec 	.word	0x200033ec

0000a35c <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    a35c:	b430      	push	{r4, r5}
    a35e:	b084      	sub	sp, #16
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    a360:	09c4      	lsrs	r4, r0, #7
    a362:	9400      	str	r4, [sp, #0]
    a364:	2300      	movs	r3, #0
    a366:	9301      	str	r3, [sp, #4]
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    a368:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a36c:	f641 6084 	movw	r0, #7812	; 0x1e84
    a370:	fb00 f303 	mul.w	r3, r0, r3
    a374:	9302      	str	r3, [sp, #8]
    os_timeradd(base, &tvdelta, result);
    a376:	6848      	ldr	r0, [r1, #4]
    a378:	680d      	ldr	r5, [r1, #0]
    a37a:	1964      	adds	r4, r4, r5
    a37c:	f140 0000 	adc.w	r0, r0, #0
    a380:	6014      	str	r4, [r2, #0]
    a382:	6050      	str	r0, [r2, #4]
    a384:	6889      	ldr	r1, [r1, #8]
    a386:	440b      	add	r3, r1
    a388:	6093      	str	r3, [r2, #8]
    a38a:	4908      	ldr	r1, [pc, #32]	; (a3ac <os_deltatime+0x50>)
    a38c:	428b      	cmp	r3, r1
    a38e:	dd09      	ble.n	a3a4 <os_deltatime+0x48>
    a390:	3401      	adds	r4, #1
    a392:	f140 0000 	adc.w	r0, r0, #0
    a396:	6014      	str	r4, [r2, #0]
    a398:	6050      	str	r0, [r2, #4]
    a39a:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
    a39e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a3a2:	6093      	str	r3, [r2, #8]
}
    a3a4:	b004      	add	sp, #16
    a3a6:	bc30      	pop	{r4, r5}
    a3a8:	4770      	bx	lr
    a3aa:	bf00      	nop
    a3ac:	000f423f 	.word	0x000f423f

0000a3b0 <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
    a3b0:	b538      	push	{r3, r4, r5, lr}
    a3b2:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a3b4:	4b05      	ldr	r3, [pc, #20]	; (a3cc <os_time_change_notify+0x1c>)
    a3b6:	681c      	ldr	r4, [r3, #0]
    a3b8:	e004      	b.n	a3c4 <os_time_change_notify+0x14>
        listener->tcl_fn(info, listener->tcl_arg);
    a3ba:	6823      	ldr	r3, [r4, #0]
    a3bc:	6861      	ldr	r1, [r4, #4]
    a3be:	4628      	mov	r0, r5
    a3c0:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a3c2:	68a4      	ldr	r4, [r4, #8]
    a3c4:	2c00      	cmp	r4, #0
    a3c6:	d1f8      	bne.n	a3ba <os_time_change_notify+0xa>
    }
}
    a3c8:	bd38      	pop	{r3, r4, r5, pc}
    a3ca:	bf00      	nop
    a3cc:	20000560 	.word	0x20000560

0000a3d0 <os_time_tick>:
{
    a3d0:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
    a3d2:	1e04      	subs	r4, r0, #0
    a3d4:	db0d      	blt.n	a3f2 <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
    a3d6:	f000 f94f 	bl	a678 <os_arch_save_sr>
    a3da:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    a3dc:	4911      	ldr	r1, [pc, #68]	; (a424 <os_time_tick+0x54>)
    a3de:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    a3e0:	18a3      	adds	r3, r4, r2
    a3e2:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    a3e4:	ea93 0f02 	teq	r3, r2
    a3e8:	d409      	bmi.n	a3fe <os_time_tick+0x2e>
    OS_EXIT_CRITICAL(sr);
    a3ea:	4628      	mov	r0, r5
    a3ec:	f000 f94a 	bl	a684 <os_arch_restore_sr>
}
    a3f0:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    a3f2:	2300      	movs	r3, #0
    a3f4:	461a      	mov	r2, r3
    a3f6:	4619      	mov	r1, r3
    a3f8:	4618      	mov	r0, r3
    a3fa:	f7fe fee3 	bl	91c4 <__assert_func>
        delta = g_os_time - basetod.ostime;
    a3fe:	4e0a      	ldr	r6, [pc, #40]	; (a428 <os_time_tick+0x58>)
    a400:	4631      	mov	r1, r6
    a402:	f851 4b08 	ldr.w	r4, [r1], #8
    a406:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a408:	460a      	mov	r2, r1
    a40a:	4620      	mov	r0, r4
    a40c:	f7ff ffa6 	bl	a35c <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    a410:	f106 0118 	add.w	r1, r6, #24
    a414:	460a      	mov	r2, r1
    a416:	4620      	mov	r0, r4
    a418:	f7ff ffa0 	bl	a35c <os_deltatime>
        basetod.ostime = g_os_time;
    a41c:	4b01      	ldr	r3, [pc, #4]	; (a424 <os_time_tick+0x54>)
    a41e:	681b      	ldr	r3, [r3, #0]
    a420:	6033      	str	r3, [r6, #0]
    a422:	e7e2      	b.n	a3ea <os_time_tick+0x1a>
    a424:	20003428 	.word	0x20003428
    a428:	200033f8 	.word	0x200033f8

0000a42c <os_time_get>:
}
    a42c:	4b01      	ldr	r3, [pc, #4]	; (a434 <os_time_get+0x8>)
    a42e:	6818      	ldr	r0, [r3, #0]
    a430:	4770      	bx	lr
    a432:	bf00      	nop
    a434:	20003428 	.word	0x20003428

0000a438 <os_time_advance>:
{
    a438:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    a43a:	1e04      	subs	r4, r0, #0
    a43c:	db02      	blt.n	a444 <os_time_advance+0xc>
    if (ticks > 0) {
    a43e:	2c00      	cmp	r4, #0
    a440:	dc06      	bgt.n	a450 <os_time_advance+0x18>
}
    a442:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    a444:	2300      	movs	r3, #0
    a446:	461a      	mov	r2, r3
    a448:	4619      	mov	r1, r3
    a44a:	4618      	mov	r0, r3
    a44c:	f7fe feba 	bl	91c4 <__assert_func>
        if (!os_started()) {
    a450:	f7fe ff72 	bl	9338 <os_started>
    a454:	b920      	cbnz	r0, a460 <os_time_advance+0x28>
            g_os_time += ticks;
    a456:	4b08      	ldr	r3, [pc, #32]	; (a478 <os_time_advance+0x40>)
    a458:	6818      	ldr	r0, [r3, #0]
    a45a:	4420      	add	r0, r4
    a45c:	6018      	str	r0, [r3, #0]
    a45e:	e7f0      	b.n	a442 <os_time_advance+0xa>
            os_time_tick(ticks);
    a460:	4620      	mov	r0, r4
    a462:	f7ff ffb5 	bl	a3d0 <os_time_tick>
            os_callout_tick();
    a466:	f7ff f8a3 	bl	95b0 <os_callout_tick>
            os_sched_os_timer_exp();
    a46a:	f7ff fd99 	bl	9fa0 <os_sched_os_timer_exp>
            os_sched(NULL);
    a46e:	2000      	movs	r0, #0
    a470:	f7ff fdda 	bl	a028 <os_sched>
}
    a474:	e7e5      	b.n	a442 <os_time_advance+0xa>
    a476:	bf00      	nop
    a478:	20003428 	.word	0x20003428

0000a47c <os_time_delay>:
    if (osticks > 0) {
    a47c:	b900      	cbnz	r0, a480 <os_time_delay+0x4>
    a47e:	4770      	bx	lr
{
    a480:	b538      	push	{r3, r4, r5, lr}
    a482:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    a484:	f000 f8f8 	bl	a678 <os_arch_save_sr>
    a488:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    a48a:	f7ff fcb9 	bl	9e00 <os_sched_get_current_task>
    a48e:	4621      	mov	r1, r4
    a490:	f7ff fcc2 	bl	9e18 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    a494:	4628      	mov	r0, r5
    a496:	f000 f8f5 	bl	a684 <os_arch_restore_sr>
        os_sched(NULL);
    a49a:	2000      	movs	r0, #0
    a49c:	f7ff fdc4 	bl	a028 <os_sched>
}
    a4a0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a4a4 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    a4a4:	b570      	push	{r4, r5, r6, lr}
    a4a6:	4605      	mov	r5, r0
    a4a8:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    a4aa:	f000 f8e5 	bl	a678 <os_arch_save_sr>
    a4ae:	4606      	mov	r6, r0
    if (tv != NULL) {
    a4b0:	b145      	cbz	r5, a4c4 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    a4b2:	f7ff ffbb 	bl	a42c <os_time_get>
    a4b6:	4908      	ldr	r1, [pc, #32]	; (a4d8 <os_gettimeofday+0x34>)
    a4b8:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    a4bc:	462a      	mov	r2, r5
    a4be:	1ac0      	subs	r0, r0, r3
    a4c0:	f7ff ff4c 	bl	a35c <os_deltatime>
    }

    if (tz != NULL) {
    a4c4:	b114      	cbz	r4, a4cc <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    a4c6:	4b04      	ldr	r3, [pc, #16]	; (a4d8 <os_gettimeofday+0x34>)
    a4c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a4ca:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    a4cc:	4630      	mov	r0, r6
    a4ce:	f000 f8d9 	bl	a684 <os_arch_restore_sr>

    return (0);
}
    a4d2:	2000      	movs	r0, #0
    a4d4:	bd70      	pop	{r4, r5, r6, pc}
    a4d6:	bf00      	nop
    a4d8:	200033f8 	.word	0x200033f8

0000a4dc <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    a4dc:	4b04      	ldr	r3, [pc, #16]	; (a4f0 <os_time_is_set+0x14>)
    a4de:	699a      	ldr	r2, [r3, #24]
    a4e0:	69db      	ldr	r3, [r3, #28]
    a4e2:	2a01      	cmp	r2, #1
    a4e4:	f173 0300 	sbcs.w	r3, r3, #0
}
    a4e8:	bfac      	ite	ge
    a4ea:	2001      	movge	r0, #1
    a4ec:	2000      	movlt	r0, #0
    a4ee:	4770      	bx	lr
    a4f0:	200033f8 	.word	0x200033f8

0000a4f4 <os_time_populate_info>:
{
    a4f4:	b510      	push	{r4, lr}
    a4f6:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
    a4f8:	4608      	mov	r0, r1
    a4fa:	b181      	cbz	r1, a51e <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
    a4fc:	b1a0      	cbz	r0, a528 <os_time_populate_info+0x34>
    if (new_tz == NULL) {
    a4fe:	b1aa      	cbz	r2, a52c <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
    a500:	4b0b      	ldr	r3, [pc, #44]	; (a530 <os_time_populate_info+0x3c>)
    a502:	f103 0118 	add.w	r1, r3, #24
    a506:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
    a508:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
    a50a:	3328      	adds	r3, #40	; 0x28
    a50c:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
    a50e:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
    a510:	f7ff ffe4 	bl	a4dc <os_time_is_set>
    a514:	f080 0001 	eor.w	r0, r0, #1
    a518:	7420      	strb	r0, [r4, #16]
    return 0;
    a51a:	2000      	movs	r0, #0
}
    a51c:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
    a51e:	2a00      	cmp	r2, #0
    a520:	d1ec      	bne.n	a4fc <os_time_populate_info+0x8>
        return SYS_EINVAL;
    a522:	f06f 0001 	mvn.w	r0, #1
    a526:	e7f9      	b.n	a51c <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
    a528:	4802      	ldr	r0, [pc, #8]	; (a534 <os_time_populate_info+0x40>)
    a52a:	e7e8      	b.n	a4fe <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
    a52c:	4a02      	ldr	r2, [pc, #8]	; (a538 <os_time_populate_info+0x44>)
    a52e:	e7e7      	b.n	a500 <os_time_populate_info+0xc>
    a530:	200033f8 	.word	0x200033f8
    a534:	20003410 	.word	0x20003410
    a538:	20003420 	.word	0x20003420

0000a53c <os_settimeofday>:
{
    a53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a540:	b087      	sub	sp, #28
    a542:	4604      	mov	r4, r0
    a544:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
    a546:	f000 f897 	bl	a678 <os_arch_save_sr>
    a54a:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
    a54c:	462a      	mov	r2, r5
    a54e:	4621      	mov	r1, r4
    a550:	a801      	add	r0, sp, #4
    a552:	f7ff ffcf 	bl	a4f4 <os_time_populate_info>
    a556:	4606      	mov	r6, r0
    if (utctime != NULL) {
    a558:	b1bc      	cbz	r4, a58a <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
    a55a:	f7ff ff67 	bl	a42c <os_time_get>
    a55e:	f8df 804c 	ldr.w	r8, [pc, #76]	; a5ac <os_settimeofday+0x70>
    a562:	4641      	mov	r1, r8
    a564:	f851 3b08 	ldr.w	r3, [r1], #8
    a568:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a56c:	460a      	mov	r2, r1
    a56e:	4648      	mov	r0, r9
    a570:	f7ff fef4 	bl	a35c <os_deltatime>
        basetod.utctime = *utctime;
    a574:	f108 0c18 	add.w	ip, r8, #24
    a578:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a57c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
    a580:	f8d8 0000 	ldr.w	r0, [r8]
    a584:	4448      	add	r0, r9
    a586:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
    a58a:	b115      	cbz	r5, a592 <os_settimeofday+0x56>
        basetod.timezone = *tz;
    a58c:	6828      	ldr	r0, [r5, #0]
    a58e:	4b07      	ldr	r3, [pc, #28]	; (a5ac <os_settimeofday+0x70>)
    a590:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
    a592:	4638      	mov	r0, r7
    a594:	f000 f876 	bl	a684 <os_arch_restore_sr>
    if (notify) {
    a598:	b11e      	cbz	r6, a5a2 <os_settimeofday+0x66>
}
    a59a:	2000      	movs	r0, #0
    a59c:	b007      	add	sp, #28
    a59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
    a5a2:	a801      	add	r0, sp, #4
    a5a4:	f7ff ff04 	bl	a3b0 <os_time_change_notify>
    a5a8:	e7f7      	b.n	a59a <os_settimeofday+0x5e>
    a5aa:	bf00      	nop
    a5ac:	200033f8 	.word	0x200033f8

0000a5b0 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5b2:	b085      	sub	sp, #20
    a5b4:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    a5b6:	f000 f85f 	bl	a678 <os_arch_save_sr>
    a5ba:	4607      	mov	r7, r0
  tv = basetod.uptime;
    a5bc:	4d0a      	ldr	r5, [pc, #40]	; (a5e8 <os_get_uptime+0x38>)
    a5be:	466c      	mov	r4, sp
    a5c0:	f105 0308 	add.w	r3, r5, #8
    a5c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a5c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    a5ca:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    a5cc:	f7ff ff2e 	bl	a42c <os_time_get>
    a5d0:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    a5d2:	4638      	mov	r0, r7
    a5d4:	f000 f856 	bl	a684 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    a5d8:	4632      	mov	r2, r6
    a5da:	4621      	mov	r1, r4
    a5dc:	4628      	mov	r0, r5
    a5de:	f7ff febd 	bl	a35c <os_deltatime>
}
    a5e2:	b005      	add	sp, #20
    a5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5e6:	bf00      	nop
    a5e8:	200033f8 	.word	0x200033f8

0000a5ec <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    a5ec:	b510      	push	{r4, lr}
    a5ee:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    a5f0:	4668      	mov	r0, sp
    a5f2:	f7ff ffdd 	bl	a5b0 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    a5f6:	9a00      	ldr	r2, [sp, #0]
    a5f8:	9c01      	ldr	r4, [sp, #4]
    a5fa:	0163      	lsls	r3, r4, #5
    a5fc:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
    a600:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    a604:	ebbc 0c02 	subs.w	ip, ip, r2
    a608:	eb63 0304 	sbc.w	r3, r3, r4
    a60c:	0259      	lsls	r1, r3, #9
    a60e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
    a612:	ea4f 204c 	mov.w	r0, ip, lsl #9
    a616:	1883      	adds	r3, r0, r2
    a618:	eb44 0101 	adc.w	r1, r4, r1
    a61c:	ea4f 1c81 	mov.w	ip, r1, lsl #6
    a620:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
    a624:	0198      	lsls	r0, r3, #6
    a626:	1ac0      	subs	r0, r0, r3
    a628:	eb6c 0101 	sbc.w	r1, ip, r1
    a62c:	1880      	adds	r0, r0, r2
    a62e:	eb44 0401 	adc.w	r4, r4, r1
    a632:	9902      	ldr	r1, [sp, #8]
    a634:	1840      	adds	r0, r0, r1
}
    a636:	eb44 71e1 	adc.w	r1, r4, r1, asr #31
    a63a:	b004      	add	sp, #16
    a63c:	bd10      	pop	{r4, pc}

0000a63e <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    a63e:	b538      	push	{r3, r4, r5, lr}
    a640:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    a642:	0e41      	lsrs	r1, r0, #25
    a644:	01c4      	lsls	r4, r0, #7
    a646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a64a:	2300      	movs	r3, #0
    a64c:	4620      	mov	r0, r4
    a64e:	f019 fc8d 	bl	23f6c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    a652:	6028      	str	r0, [r5, #0]
    return 0;
}
    a654:	2000      	movs	r0, #0
    a656:	bd38      	pop	{r3, r4, r5, pc}

0000a658 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    a658:	b508      	push	{r3, lr}
    os_time_advance(1);
    a65a:	2001      	movs	r0, #1
    a65c:	f7ff feec 	bl	a438 <os_time_advance>
}
    a660:	bd08      	pop	{r3, pc}
	...

0000a664 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
    a664:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    a666:	f7ff fbb3 	bl	9dd0 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    a66a:	4b02      	ldr	r3, [pc, #8]	; (a674 <os_arch_ctx_sw+0x10>)
    a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a670:	605a      	str	r2, [r3, #4]
}
    a672:	bd08      	pop	{r3, pc}
    a674:	e000ed00 	.word	0xe000ed00

0000a678 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a678:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    a67c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    a67e:	f000 0001 	and.w	r0, r0, #1
    a682:	4770      	bx	lr

0000a684 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    a684:	b900      	cbnz	r0, a688 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    a686:	b662      	cpsie	i
        __enable_irq();
    }
}
    a688:	4770      	bx	lr

0000a68a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a68a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    a68e:	f000 0001 	and.w	r0, r0, #1
    a692:	4770      	bx	lr

0000a694 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    a694:	b570      	push	{r4, r5, r6, lr}
    a696:	4606      	mov	r6, r0
    a698:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    a69a:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
    a69e:	2309      	movs	r3, #9
    a6a0:	e003      	b.n	a6aa <os_arch_task_stack_init+0x16>
        s[i] = 0;
    a6a2:	2200      	movs	r2, #0
    a6a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
    a6a8:	3301      	adds	r3, #1
    a6aa:	2b0d      	cmp	r3, #13
    a6ac:	ddf9      	ble.n	a6a2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    a6ae:	4620      	mov	r0, r4
    a6b0:	f000 fbb6 	bl	ae20 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    a6b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a6b8:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    a6bc:	6973      	ldr	r3, [r6, #20]
    a6be:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    a6c2:	69b3      	ldr	r3, [r6, #24]
    a6c4:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    a6c8:	f06f 0302 	mvn.w	r3, #2
    a6cc:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    a6d0:	4620      	mov	r0, r4
    a6d2:	bd70      	pop	{r4, r5, r6, pc}

0000a6d4 <os_arch_init>:

void
os_arch_init(void)
{
    a6d4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a6d6:	4a04      	ldr	r2, [pc, #16]	; (a6e8 <os_arch_init+0x14>)
    a6d8:	6953      	ldr	r3, [r2, #20]
    a6da:	f043 0310 	orr.w	r3, r3, #16
    a6de:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    a6e0:	f7fe fe30 	bl	9344 <os_init_idle_task>
}
    a6e4:	bd08      	pop	{r3, pc}
    a6e6:	bf00      	nop
    a6e8:	e000ed00 	.word	0xe000ed00

0000a6ec <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    a6ec:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a6ee:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a6f2:	b914      	cbnz	r4, a6fa <os_arch_os_init+0xe>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a6f4:	f04f 0c00 	mov.w	ip, #0
    a6f8:	e00a      	b.n	a710 <os_arch_os_init+0x24>
    err = OS_ERR_IN_ISR;
    a6fa:	2007      	movs	r0, #7
    a6fc:	e034      	b.n	a768 <os_arch_os_init+0x7c>
            NVIC->IP[i] = -1;
    a6fe:	f10c 4e60 	add.w	lr, ip, #3758096384	; 0xe0000000
    a702:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
    a706:	24ff      	movs	r4, #255	; 0xff
    a708:	f88e 4300 	strb.w	r4, [lr, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a70c:	f10c 0c01 	add.w	ip, ip, #1
    a710:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
    a714:	d9f3      	bls.n	a6fe <os_arch_os_init+0x12>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a716:	f06f 0c0d 	mvn.w	ip, #13
    a71a:	e00a      	b.n	a732 <os_arch_os_init+0x46>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    a71c:	fa4f fe8c 	sxtb.w	lr, ip
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a720:	4c14      	ldr	r4, [pc, #80]	; (a774 <os_arch_os_init+0x88>)
    a722:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a724:	f10e 0e10 	add.w	lr, lr, #16
    a728:	4d13      	ldr	r5, [pc, #76]	; (a778 <os_arch_os_init+0x8c>)
    a72a:	f844 502e 	str.w	r5, [r4, lr, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    a72e:	f10c 0c01 	add.w	ip, ip, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a732:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    a736:	ddf1      	ble.n	a71c <os_arch_os_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a738:	4c0e      	ldr	r4, [pc, #56]	; (a774 <os_arch_os_init+0x88>)
    a73a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a73c:	4e0f      	ldr	r6, [pc, #60]	; (a77c <os_arch_os_init+0x90>)
    a73e:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a740:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a742:	4e0f      	ldr	r6, [pc, #60]	; (a780 <os_arch_os_init+0x94>)
    a744:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a746:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a748:	4e0e      	ldr	r6, [pc, #56]	; (a784 <os_arch_os_init+0x98>)
    a74a:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a74c:	25e0      	movs	r5, #224	; 0xe0
    a74e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    a752:	2520      	movs	r5, #32
    a754:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a756:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    a75a:	f014 0f01 	tst.w	r4, #1
    a75e:	d004      	beq.n	a76a <os_arch_os_init+0x7e>
    SVC_Call(os_arch_init);
    a760:	f8df c024 	ldr.w	ip, [pc, #36]	; a788 <os_arch_os_init+0x9c>
    a764:	df00      	svc	0
        err = OS_OK;
    a766:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    a768:	bd70      	pop	{r4, r5, r6, pc}
            os_arch_init();
    a76a:	f7ff ffb3 	bl	a6d4 <os_arch_init>
        err = OS_OK;
    a76e:	2000      	movs	r0, #0
    a770:	e7fa      	b.n	a768 <os_arch_os_init+0x7c>
    a772:	bf00      	nop
    a774:	e000ed00 	.word	0xe000ed00
    a778:	0000aebf 	.word	0x0000aebf
    a77c:	0000ae27 	.word	0x0000ae27
    a780:	0000ae6d 	.word	0x0000ae6d
    a784:	0000aeb3 	.word	0x0000aeb3
    a788:	0000a6d5 	.word	0x0000a6d5

0000a78c <os_arch_start>:

uint32_t
os_arch_start(void)
{
    a78c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    a78e:	f7ff fc45 	bl	a01c <os_sched_next_task>
    a792:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    a794:	f7ff fb3a 	bl	9e0c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    a798:	6823      	ldr	r3, [r4, #0]
    a79a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    a79c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    a7a0:	2106      	movs	r1, #6
    a7a2:	2080      	movs	r0, #128	; 0x80
    a7a4:	f013 fa30 	bl	1dc08 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    a7a8:	4b03      	ldr	r3, [pc, #12]	; (a7b8 <os_arch_start+0x2c>)
    a7aa:	2201      	movs	r2, #1
    a7ac:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    a7ae:	4620      	mov	r0, r4
    a7b0:	f7ff ff58 	bl	a664 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    a7b4:	69a0      	ldr	r0, [r4, #24]
    a7b6:	bd10      	pop	{r4, pc}
    a7b8:	200025d0 	.word	0x200025d0

0000a7bc <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    a7bc:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    a7be:	4816      	ldr	r0, [pc, #88]	; (a818 <os_arch_os_start+0x5c>)
    a7c0:	6800      	ldr	r0, [r0, #0]
    a7c2:	3804      	subs	r0, #4
    a7c4:	f000 fb22 	bl	ae0c <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a7c8:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a7cc:	bb04      	cbnz	r4, a810 <os_arch_os_start+0x54>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a7ce:	f3ef 8c14 	mrs	ip, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    a7d2:	f00c 0c03 	and.w	ip, ip, #3
    a7d6:	f1bc 0f02 	cmp.w	ip, #2
    a7da:	d00f      	beq.n	a7fc <os_arch_os_start+0x40>
    a7dc:	d804      	bhi.n	a7e8 <os_arch_os_start+0x2c>
    a7de:	f1bc 0f01 	cmp.w	ip, #1
    a7e2:	d810      	bhi.n	a806 <os_arch_os_start+0x4a>
    a7e4:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    a7e6:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    a7e8:	f1bc 0f03 	cmp.w	ip, #3
    a7ec:	d10b      	bne.n	a806 <os_arch_os_start+0x4a>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    a7ee:	4c0b      	ldr	r4, [pc, #44]	; (a81c <os_arch_os_start+0x60>)
    a7f0:	6824      	ldr	r4, [r4, #0]
    a7f2:	f014 0f01 	tst.w	r4, #1
    a7f6:	d106      	bne.n	a806 <os_arch_os_start+0x4a>
                err = OS_ERR_PRIV;
    a7f8:	2008      	movs	r0, #8
    a7fa:	e7f4      	b.n	a7e6 <os_arch_os_start+0x2a>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    a7fc:	4c07      	ldr	r4, [pc, #28]	; (a81c <os_arch_os_start+0x60>)
    a7fe:	6824      	ldr	r4, [r4, #0]
    a800:	f014 0f01 	tst.w	r4, #1
    a804:	d106      	bne.n	a814 <os_arch_os_start+0x58>
    SVC_Call(os_arch_start);
    a806:	f8df c018 	ldr.w	ip, [pc, #24]	; a820 <os_arch_os_start+0x64>
    a80a:	df00      	svc	0
}
    a80c:	2000      	movs	r0, #0
    a80e:	e7ea      	b.n	a7e6 <os_arch_os_start+0x2a>
    err = OS_ERR_IN_ISR;
    a810:	2007      	movs	r0, #7
    a812:	e7e8      	b.n	a7e6 <os_arch_os_start+0x2a>
                err = OS_ERR_PRIV;
    a814:	2008      	movs	r0, #8
    a816:	e7e6      	b.n	a7e6 <os_arch_os_start+0x2a>
    a818:	20001428 	.word	0x20001428
    a81c:	2000342c 	.word	0x2000342c
    a820:	0000a78d 	.word	0x0000a78d

0000a824 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a824:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a826:	2000      	movs	r0, #0
    a828:	6018      	str	r0, [r3, #0]
    a82a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a82c:	6098      	str	r0, [r3, #8]
    a82e:	60d8      	str	r0, [r3, #12]
    a830:	6118      	str	r0, [r3, #16]
    a832:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a834:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a836:	611a      	str	r2, [r3, #16]

    return (0);
}
    a838:	4770      	bx	lr

0000a83a <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a83a:	b538      	push	{r3, r4, r5, lr}
    a83c:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a83e:	f7ff ff1b 	bl	a678 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a842:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a844:	b114      	cbz	r4, a84c <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a846:	6863      	ldr	r3, [r4, #4]
    a848:	602b      	str	r3, [r5, #0]
    a84a:	b12b      	cbz	r3, a858 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a84c:	f7ff ff1a 	bl	a684 <os_arch_restore_sr>

    if (mp) {
    a850:	b104      	cbz	r4, a854 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a852:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a854:	4620      	mov	r0, r4
    a856:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a858:	606d      	str	r5, [r5, #4]
    a85a:	e7f7      	b.n	a84c <os_mqueue_get+0x12>

0000a85c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a85e:	7953      	ldrb	r3, [r2, #5]
    a860:	2b07      	cmp	r3, #7
    a862:	d916      	bls.n	a892 <os_mqueue_put+0x36>
    a864:	4605      	mov	r5, r0
    a866:	460e      	mov	r6, r1
    a868:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a86a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a86e:	f7ff ff03 	bl	a678 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a872:	2300      	movs	r3, #0
    a874:	f844 3f14 	str.w	r3, [r4, #20]!
    a878:	686b      	ldr	r3, [r5, #4]
    a87a:	601f      	str	r7, [r3, #0]
    a87c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a87e:	f7ff ff01 	bl	a684 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a882:	b146      	cbz	r6, a896 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a884:	f105 0108 	add.w	r1, r5, #8
    a888:	4630      	mov	r0, r6
    a88a:	f7fe ffdd 	bl	9848 <os_eventq_put>
    }

    return (0);
    a88e:	2000      	movs	r0, #0
    a890:	e000      	b.n	a894 <os_mqueue_put+0x38>
err:
    return (rc);
    a892:	2002      	movs	r0, #2
}
    a894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a896:	2000      	movs	r0, #0
    a898:	e7fc      	b.n	a894 <os_mqueue_put+0x38>

0000a89a <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a89a:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a89c:	8803      	ldrh	r3, [r0, #0]
    a89e:	428b      	cmp	r3, r1
    a8a0:	d310      	bcc.n	a8c4 <os_mbuf_get+0x2a>
    a8a2:	4604      	mov	r4, r0
    a8a4:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a8a6:	6840      	ldr	r0, [r0, #4]
    a8a8:	f7ff f8c6 	bl	9a38 <os_memblock_get>
    if (!om) {
    a8ac:	b148      	cbz	r0, a8c2 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a8ae:	2300      	movs	r3, #0
    a8b0:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    a8b2:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    a8b4:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    a8b6:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a8b8:	f100 0110 	add.w	r1, r0, #16
    a8bc:	440d      	add	r5, r1
    a8be:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    a8c0:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a8c2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a8c4:	2000      	movs	r0, #0
    return om;
    a8c6:	e7fc      	b.n	a8c2 <os_mbuf_get+0x28>

0000a8c8 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a8c8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a8ca:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a8ce:	8803      	ldrh	r3, [r0, #0]
    a8d0:	42ab      	cmp	r3, r5
    a8d2:	d30e      	bcc.n	a8f2 <os_mbuf_get_pkthdr+0x2a>
    a8d4:	2dff      	cmp	r5, #255	; 0xff
    a8d6:	d80e      	bhi.n	a8f6 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a8d8:	2100      	movs	r1, #0
    a8da:	f7ff ffde 	bl	a89a <os_mbuf_get>
    if (om) {
    a8de:	b138      	cbz	r0, a8f0 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    a8e0:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    a8e2:	6803      	ldr	r3, [r0, #0]
    a8e4:	442b      	add	r3, r5
    a8e6:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a8e8:	2300      	movs	r3, #0
    a8ea:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    a8ec:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a8ee:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a8f0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a8f2:	2000      	movs	r0, #0
    a8f4:	e7fc      	b.n	a8f0 <os_mbuf_get_pkthdr+0x28>
    a8f6:	2000      	movs	r0, #0
    return om;
    a8f8:	e7fa      	b.n	a8f0 <os_mbuf_get_pkthdr+0x28>

0000a8fa <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a8fa:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a8fc:	6883      	ldr	r3, [r0, #8]
    a8fe:	b123      	cbz	r3, a90a <os_mbuf_free+0x10>
    a900:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a902:	6858      	ldr	r0, [r3, #4]
    a904:	f7ff f8c0 	bl	9a88 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a908:	bd08      	pop	{r3, pc}
    rc = 0;
    a90a:	2000      	movs	r0, #0
    return (rc);
    a90c:	e7fc      	b.n	a908 <os_mbuf_free+0xe>

0000a90e <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a90e:	b158      	cbz	r0, a928 <os_mbuf_free_chain+0x1a>
{
    a910:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a912:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    a914:	f7ff fff1 	bl	a8fa <os_mbuf_free>
        if (rc != 0) {
    a918:	4603      	mov	r3, r0
    a91a:	b918      	cbnz	r0, a924 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    a91c:	4620      	mov	r0, r4
    while (om != NULL) {
    a91e:	2c00      	cmp	r4, #0
    a920:	d1f7      	bne.n	a912 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    a922:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a924:	4618      	mov	r0, r3
    a926:	bd10      	pop	{r4, pc}
    rc = 0;
    a928:	2300      	movs	r3, #0
}
    a92a:	4618      	mov	r0, r3
    a92c:	4770      	bx	lr

0000a92e <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a92e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a932:	2800      	cmp	r0, #0
    a934:	d04b      	beq.n	a9ce <os_mbuf_append+0xa0>
    a936:	460f      	mov	r7, r1
    a938:	4691      	mov	r9, r2
    a93a:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a93c:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a940:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a942:	461e      	mov	r6, r3
    a944:	68db      	ldr	r3, [r3, #12]
    a946:	2b00      	cmp	r3, #0
    a948:	d1fb      	bne.n	a942 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    a94a:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a94c:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a94e:	f106 0410 	add.w	r4, r6, #16
    a952:	881b      	ldrh	r3, [r3, #0]
    a954:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a956:	6830      	ldr	r0, [r6, #0]
    a958:	88f3      	ldrh	r3, [r6, #6]
    a95a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a95c:	1a24      	subs	r4, r4, r0
    a95e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a960:	b164      	cbz	r4, a97c <os_mbuf_append+0x4e>
        if (space > remainder) {
    a962:	454c      	cmp	r4, r9
    a964:	dd00      	ble.n	a968 <os_mbuf_append+0x3a>
            space = remainder;
    a966:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a968:	4622      	mov	r2, r4
    a96a:	4639      	mov	r1, r7
    a96c:	f005 fe88 	bl	10680 <memcpy>

        last->om_len += space;
    a970:	88f3      	ldrh	r3, [r6, #6]
    a972:	4423      	add	r3, r4
    a974:	80f3      	strh	r3, [r6, #6]
        data += space;
    a976:	4427      	add	r7, r4
        remainder -= space;
    a978:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a97c:	2d00      	cmp	r5, #0
    a97e:	dd16      	ble.n	a9ae <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    a980:	2100      	movs	r1, #0
    a982:	4640      	mov	r0, r8
    a984:	f7ff ff89 	bl	a89a <os_mbuf_get>
        if (!new) {
    a988:	4604      	mov	r4, r0
    a98a:	b180      	cbz	r0, a9ae <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a98c:	f8b8 2000 	ldrh.w	r2, [r8]
    a990:	42aa      	cmp	r2, r5
    a992:	bfa8      	it	ge
    a994:	462a      	movge	r2, r5
    a996:	b292      	uxth	r2, r2
    a998:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a99a:	4639      	mov	r1, r7
    a99c:	6800      	ldr	r0, [r0, #0]
    a99e:	f005 fe6f 	bl	10680 <memcpy>
        data += new->om_len;
    a9a2:	88e3      	ldrh	r3, [r4, #6]
    a9a4:	441f      	add	r7, r3
        remainder -= new->om_len;
    a9a6:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    a9a8:	60f4      	str	r4, [r6, #12]
        last = new;
    a9aa:	4626      	mov	r6, r4
    a9ac:	e7e6      	b.n	a97c <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a9ae:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a9b2:	2b07      	cmp	r3, #7
    a9b4:	d907      	bls.n	a9c6 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a9b6:	eba9 0905 	sub.w	r9, r9, r5
    a9ba:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a9be:	fa13 f989 	uxtah	r9, r3, r9
    a9c2:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a9c6:	b925      	cbnz	r5, a9d2 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    a9c8:	4628      	mov	r0, r5
    a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a9ce:	2502      	movs	r5, #2
    a9d0:	e7fa      	b.n	a9c8 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    a9d2:	2501      	movs	r5, #1
    a9d4:	e7f8      	b.n	a9c8 <os_mbuf_append+0x9a>

0000a9d6 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a9d6:	b178      	cbz	r0, a9f8 <os_mbuf_off+0x22>
{
    a9d8:	b410      	push	{r4}
    a9da:	e002      	b.n	a9e2 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a9dc:	1ac9      	subs	r1, r1, r3
        cur = next;
    a9de:	4620      	mov	r0, r4
        if (cur == NULL) {
    a9e0:	b13c      	cbz	r4, a9f2 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a9e2:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a9e4:	88c3      	ldrh	r3, [r0, #6]
    a9e6:	428b      	cmp	r3, r1
    a9e8:	dc02      	bgt.n	a9f0 <os_mbuf_off+0x1a>
    a9ea:	d1f7      	bne.n	a9dc <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a9ec:	2c00      	cmp	r4, #0
    a9ee:	d1f5      	bne.n	a9dc <os_mbuf_off+0x6>
            *out_off = off;
    a9f0:	8011      	strh	r1, [r2, #0]
    }
}
    a9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    a9f6:	4770      	bx	lr
    a9f8:	4770      	bx	lr

0000a9fa <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9fc:	4604      	mov	r4, r0
    a9fe:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    aa00:	4616      	mov	r6, r2
    aa02:	b91a      	cbnz	r2, aa0c <os_mbuf_copydata+0x12>
        return 0;
    aa04:	4610      	mov	r0, r2
    aa06:	e01e      	b.n	aa46 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    aa08:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    aa0a:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    aa0c:	2900      	cmp	r1, #0
    aa0e:	dd13      	ble.n	aa38 <os_mbuf_copydata+0x3e>
        if (!m) {
    aa10:	b1ec      	cbz	r4, aa4e <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    aa12:	88e2      	ldrh	r2, [r4, #6]
    aa14:	428a      	cmp	r2, r1
    aa16:	ddf7      	ble.n	aa08 <os_mbuf_copydata+0xe>
    aa18:	e00e      	b.n	aa38 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    aa1a:	88e5      	ldrh	r5, [r4, #6]
    aa1c:	1a6d      	subs	r5, r5, r1
    aa1e:	42b5      	cmp	r5, r6
    aa20:	bfa8      	it	ge
    aa22:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    aa24:	6823      	ldr	r3, [r4, #0]
    aa26:	462a      	mov	r2, r5
    aa28:	4419      	add	r1, r3
    aa2a:	4638      	mov	r0, r7
    aa2c:	f005 fe28 	bl	10680 <memcpy>
        len -= count;
    aa30:	1b76      	subs	r6, r6, r5
        udst += count;
    aa32:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    aa34:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    aa36:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    aa38:	2e00      	cmp	r6, #0
    aa3a:	dd01      	ble.n	aa40 <os_mbuf_copydata+0x46>
    aa3c:	2c00      	cmp	r4, #0
    aa3e:	d1ec      	bne.n	aa1a <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    aa40:	2e00      	cmp	r6, #0
    aa42:	dc01      	bgt.n	aa48 <os_mbuf_copydata+0x4e>
    aa44:	2000      	movs	r0, #0
}
    aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    aa48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa4c:	e7fb      	b.n	aa46 <os_mbuf_copydata+0x4c>
            return (-1);
    aa4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa52:	e7f8      	b.n	aa46 <os_mbuf_copydata+0x4c>

0000aa54 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    aa54:	2800      	cmp	r0, #0
    aa56:	d053      	beq.n	ab00 <os_mbuf_adj+0xac>
{
    aa58:	b510      	push	{r4, lr}
    aa5a:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    aa5c:	2900      	cmp	r1, #0
    aa5e:	db1b      	blt.n	aa98 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    aa60:	4603      	mov	r3, r0
    int len = req_len;
    aa62:	460a      	mov	r2, r1
    aa64:	e005      	b.n	aa72 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    aa66:	1a80      	subs	r0, r0, r2
    aa68:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    aa6a:	6818      	ldr	r0, [r3, #0]
    aa6c:	4402      	add	r2, r0
    aa6e:	601a      	str	r2, [r3, #0]
                len = 0;
    aa70:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    aa72:	b14b      	cbz	r3, aa88 <os_mbuf_adj+0x34>
    aa74:	2a00      	cmp	r2, #0
    aa76:	dd07      	ble.n	aa88 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    aa78:	88d8      	ldrh	r0, [r3, #6]
    aa7a:	4290      	cmp	r0, r2
    aa7c:	dcf3      	bgt.n	aa66 <os_mbuf_adj+0x12>
                len -= m->om_len;
    aa7e:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    aa80:	2000      	movs	r0, #0
    aa82:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    aa84:	68db      	ldr	r3, [r3, #12]
    aa86:	e7f4      	b.n	aa72 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    aa88:	7963      	ldrb	r3, [r4, #5]
    aa8a:	2b07      	cmp	r3, #7
    aa8c:	d903      	bls.n	aa96 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    aa8e:	1a52      	subs	r2, r2, r1
    aa90:	8a23      	ldrh	r3, [r4, #16]
    aa92:	441a      	add	r2, r3
    aa94:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    aa96:	bd10      	pop	{r4, pc}
        len = -len;
    aa98:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    aa9c:	4603      	mov	r3, r0
        count = 0;
    aa9e:	2200      	movs	r2, #0
            count += m->om_len;
    aaa0:	88d8      	ldrh	r0, [r3, #6]
    aaa2:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    aaa4:	469c      	mov	ip, r3
    aaa6:	68db      	ldr	r3, [r3, #12]
    aaa8:	2b00      	cmp	r3, #0
    aaaa:	d1f9      	bne.n	aaa0 <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    aaac:	4570      	cmp	r0, lr
    aaae:	da0d      	bge.n	aacc <os_mbuf_adj+0x78>
        if (count < 0)
    aab0:	188a      	adds	r2, r1, r2
    aab2:	d41a      	bmi.n	aaea <os_mbuf_adj+0x96>
        if (OS_MBUF_IS_PKTHDR(m))
    aab4:	7963      	ldrb	r3, [r4, #5]
    aab6:	2b07      	cmp	r3, #7
    aab8:	d900      	bls.n	aabc <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    aaba:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    aabc:	2c00      	cmp	r4, #0
    aabe:	d0ea      	beq.n	aa96 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    aac0:	88e3      	ldrh	r3, [r4, #6]
    aac2:	4293      	cmp	r3, r2
    aac4:	da13      	bge.n	aaee <os_mbuf_adj+0x9a>
            count -= m->om_len;
    aac6:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    aac8:	68e4      	ldr	r4, [r4, #12]
    aaca:	e7f7      	b.n	aabc <os_mbuf_adj+0x68>
            m->om_len -= len;
    aacc:	fa1f fe8e 	uxth.w	lr, lr
    aad0:	eba0 000e 	sub.w	r0, r0, lr
    aad4:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    aad8:	7963      	ldrb	r3, [r4, #5]
    aada:	2b07      	cmp	r3, #7
    aadc:	d9db      	bls.n	aa96 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    aade:	8a23      	ldrh	r3, [r4, #16]
    aae0:	eba3 0e0e 	sub.w	lr, r3, lr
    aae4:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    aae8:	e7d5      	b.n	aa96 <os_mbuf_adj+0x42>
            count = 0;
    aaea:	2200      	movs	r2, #0
    aaec:	e7e2      	b.n	aab4 <os_mbuf_adj+0x60>
                m->om_len = count;
    aaee:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    aaf0:	68e0      	ldr	r0, [r4, #12]
    aaf2:	2800      	cmp	r0, #0
    aaf4:	d0cf      	beq.n	aa96 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    aaf6:	f7ff ff0a 	bl	a90e <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    aafa:	2300      	movs	r3, #0
    aafc:	60e3      	str	r3, [r4, #12]
    aafe:	e7ca      	b.n	aa96 <os_mbuf_adj+0x42>
    ab00:	4770      	bx	lr

0000ab02 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    ab02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab06:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    ab08:	1e1e      	subs	r6, r3, #0
    ab0a:	dd2d      	ble.n	ab68 <os_mbuf_cmpf+0x66>
    ab0c:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    ab0e:	f10d 0206 	add.w	r2, sp, #6
    ab12:	f7ff ff60 	bl	a9d6 <os_mbuf_off>
    ab16:	4604      	mov	r4, r0
    data_off = 0;
    ab18:	f04f 0800 	mov.w	r8, #0
    ab1c:	e009      	b.n	ab32 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    ab1e:	4445      	add	r5, r8
    ab20:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    ab24:	45b0      	cmp	r8, r6
    ab26:	d027      	beq.n	ab78 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    ab28:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    ab2a:	2300      	movs	r3, #0
    ab2c:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    ab30:	b1bc      	cbz	r4, ab62 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    ab32:	b1f4      	cbz	r4, ab72 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    ab34:	eba6 0208 	sub.w	r2, r6, r8
    ab38:	88e3      	ldrh	r3, [r4, #6]
    ab3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ab3e:	1a1b      	subs	r3, r3, r0
    ab40:	429a      	cmp	r2, r3
    ab42:	bfa8      	it	ge
    ab44:	461a      	movge	r2, r3
    ab46:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    ab48:	2d00      	cmp	r5, #0
    ab4a:	d0e8      	beq.n	ab1e <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    ab4c:	6823      	ldr	r3, [r4, #0]
    ab4e:	462a      	mov	r2, r5
    ab50:	eb07 0108 	add.w	r1, r7, r8
    ab54:	4418      	add	r0, r3
    ab56:	f005 fd6f 	bl	10638 <memcmp>
            if (rc != 0) {
    ab5a:	4603      	mov	r3, r0
    ab5c:	2800      	cmp	r0, #0
    ab5e:	d0de      	beq.n	ab1e <os_mbuf_cmpf+0x1c>
    ab60:	e003      	b.n	ab6a <os_mbuf_cmpf+0x68>
            return INT_MAX;
    ab62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ab66:	e000      	b.n	ab6a <os_mbuf_cmpf+0x68>
        return 0;
    ab68:	2300      	movs	r3, #0
        }
    }
}
    ab6a:	4618      	mov	r0, r3
    ab6c:	b002      	add	sp, #8
    ab6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    ab72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ab76:	e7f8      	b.n	ab6a <os_mbuf_cmpf+0x68>
            return 0;
    ab78:	2300      	movs	r3, #0
    ab7a:	e7f6      	b.n	ab6a <os_mbuf_cmpf+0x68>

0000ab7c <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    ab7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab80:	b083      	sub	sp, #12
    ab82:	4681      	mov	r9, r0
    ab84:	4688      	mov	r8, r1
    ab86:	4617      	mov	r7, r2
    ab88:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    ab8a:	f10d 0206 	add.w	r2, sp, #6
    ab8e:	f7ff ff22 	bl	a9d6 <os_mbuf_off>
    if (cur == NULL) {
    ab92:	4605      	mov	r5, r0
    ab94:	b948      	cbnz	r0, abaa <os_mbuf_copyinto+0x2e>
        return -1;
    ab96:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ab9a:	e02d      	b.n	abf8 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    ab9c:	b366      	cbz	r6, abf8 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    ab9e:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    aba0:	b1ab      	cbz	r3, abce <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    aba2:	2200      	movs	r2, #0
    aba4:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    aba8:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    abaa:	88ec      	ldrh	r4, [r5, #6]
    abac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    abb0:	1ae4      	subs	r4, r4, r3
    abb2:	42b4      	cmp	r4, r6
    abb4:	bfa8      	it	ge
    abb6:	4634      	movge	r4, r6
        if (copylen > 0) {
    abb8:	2c00      	cmp	r4, #0
    abba:	ddef      	ble.n	ab9c <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    abbc:	6828      	ldr	r0, [r5, #0]
    abbe:	4622      	mov	r2, r4
    abc0:	4639      	mov	r1, r7
    abc2:	4418      	add	r0, r3
    abc4:	f005 fd5c 	bl	10680 <memcpy>
            sptr += copylen;
    abc8:	4427      	add	r7, r4
            len -= copylen;
    abca:	1b36      	subs	r6, r6, r4
            copylen = 0;
    abcc:	e7e6      	b.n	ab9c <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    abce:	b2b2      	uxth	r2, r6
    abd0:	4639      	mov	r1, r7
    abd2:	4628      	mov	r0, r5
    abd4:	f7ff feab 	bl	a92e <os_mbuf_append>
    if (rc != 0) {
    abd8:	b968      	cbnz	r0, abf6 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    abda:	f899 2005 	ldrb.w	r2, [r9, #5]
    abde:	2a07      	cmp	r2, #7
    abe0:	d90e      	bls.n	ac00 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    abe2:	4446      	add	r6, r8
    abe4:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    abe8:	4546      	cmp	r6, r8
    abea:	bfb8      	it	lt
    abec:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    abee:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    abf2:	4606      	mov	r6, r0
    abf4:	e000      	b.n	abf8 <os_mbuf_copyinto+0x7c>
        return rc;
    abf6:	4606      	mov	r6, r0
}
    abf8:	4630      	mov	r0, r6
    abfa:	b003      	add	sp, #12
    abfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    ac00:	4606      	mov	r6, r0
    ac02:	e7f9      	b.n	abf8 <os_mbuf_copyinto+0x7c>

0000ac04 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    ac04:	b570      	push	{r4, r5, r6, lr}
    ac06:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    ac08:	6880      	ldr	r0, [r0, #8]
    ac0a:	8803      	ldrh	r3, [r0, #0]
    ac0c:	428b      	cmp	r3, r1
    ac0e:	d325      	bcc.n	ac5c <os_mbuf_extend+0x58>
    ac10:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    ac12:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    ac14:	461c      	mov	r4, r3
    ac16:	68db      	ldr	r3, [r3, #12]
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d1fb      	bne.n	ac14 <os_mbuf_extend+0x10>
    omp = om->om_omp;
    ac1c:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ac1e:	f104 0310 	add.w	r3, r4, #16
    ac22:	8812      	ldrh	r2, [r2, #0]
    ac24:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    ac26:	6822      	ldr	r2, [r4, #0]
    ac28:	88e1      	ldrh	r1, [r4, #6]
    ac2a:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ac2c:	1a9b      	subs	r3, r3, r2
    ac2e:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    ac30:	429d      	cmp	r5, r3
    ac32:	d80b      	bhi.n	ac4c <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    ac34:	6820      	ldr	r0, [r4, #0]
    ac36:	88e3      	ldrh	r3, [r4, #6]
    ac38:	4418      	add	r0, r3
    last->om_len += len;
    ac3a:	442b      	add	r3, r5
    ac3c:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    ac3e:	7973      	ldrb	r3, [r6, #5]
    ac40:	2b07      	cmp	r3, #7
    ac42:	d902      	bls.n	ac4a <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    ac44:	8a33      	ldrh	r3, [r6, #16]
    ac46:	441d      	add	r5, r3
    ac48:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    ac4a:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    ac4c:	2100      	movs	r1, #0
    ac4e:	f7ff fe24 	bl	a89a <os_mbuf_get>
        if (newm == NULL) {
    ac52:	2800      	cmp	r0, #0
    ac54:	d0f9      	beq.n	ac4a <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    ac56:	60e0      	str	r0, [r4, #12]
        last = newm;
    ac58:	4604      	mov	r4, r0
    ac5a:	e7eb      	b.n	ac34 <os_mbuf_extend+0x30>
        return NULL;
    ac5c:	2000      	movs	r0, #0
    ac5e:	e7f4      	b.n	ac4a <os_mbuf_extend+0x46>

0000ac60 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    ac60:	4603      	mov	r3, r0
    ac62:	b128      	cbz	r0, ac70 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    ac64:	2000      	movs	r0, #0
    ac66:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    ac68:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    ac6a:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    ac6c:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    ac6e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    ac70:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    ac72:	4770      	bx	lr

0000ac74 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    ac76:	4b2c      	ldr	r3, [pc, #176]	; (ad28 <os_mutex_release+0xb4>)
    ac78:	681b      	ldr	r3, [r3, #0]
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d04b      	beq.n	ad16 <os_mutex_release+0xa2>
    ac7e:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ac80:	2800      	cmp	r0, #0
    ac82:	d04a      	beq.n	ad1a <os_mutex_release+0xa6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    ac84:	f7ff f8bc 	bl	9e00 <os_sched_get_current_task>
    ac88:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    ac8a:	88e3      	ldrh	r3, [r4, #6]
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d046      	beq.n	ad1e <os_mutex_release+0xaa>
    ac90:	68a2      	ldr	r2, [r4, #8]
    ac92:	4282      	cmp	r2, r0
    ac94:	d145      	bne.n	ad22 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    ac96:	2b01      	cmp	r3, #1
    ac98:	d003      	beq.n	aca2 <os_mutex_release+0x2e>
        --mu->mu_level;
    ac9a:	3b01      	subs	r3, #1
    ac9c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    ac9e:	2000      	movs	r0, #0
        goto done;
    aca0:	e03a      	b.n	ad18 <os_mutex_release+0xa4>
    }

    OS_ENTER_CRITICAL(sr);
    aca2:	f7ff fce9 	bl	a678 <os_arch_save_sr>
    aca6:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    aca8:	88e3      	ldrh	r3, [r4, #6]
    acaa:	3b01      	subs	r3, #1
    acac:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    acae:	7aea      	ldrb	r2, [r5, #11]
    acb0:	7963      	ldrb	r3, [r4, #5]
    acb2:	429a      	cmp	r2, r3
    acb4:	d11e      	bne.n	acf4 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    acb6:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    acb8:	b146      	cbz	r6, accc <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    acba:	69f3      	ldr	r3, [r6, #28]
    acbc:	b1fb      	cbz	r3, acfe <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    acbe:	4630      	mov	r0, r6
    acc0:	f7ff f934 	bl	9f2c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    acc4:	2301      	movs	r3, #1
    acc6:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    acc8:	7af3      	ldrb	r3, [r6, #11]
    acca:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    accc:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    acce:	b116      	cbz	r6, acd6 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    acd0:	7bb3      	ldrb	r3, [r6, #14]
    acd2:	3301      	adds	r3, #1
    acd4:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    acd6:	7bab      	ldrb	r3, [r5, #14]
    acd8:	3b01      	subs	r3, #1
    acda:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    acdc:	f7ff f99e 	bl	a01c <os_sched_next_task>
    ace0:	4604      	mov	r4, r0
    if (rdy != current) {
    ace2:	4285      	cmp	r5, r0
    ace4:	d010      	beq.n	ad08 <os_mutex_release+0x94>
        resched = 1;
    ace6:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    ace8:	4638      	mov	r0, r7
    acea:	f7ff fccb 	bl	a684 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    acee:	b96d      	cbnz	r5, ad0c <os_mutex_release+0x98>
        os_sched(rdy);
    }

    ret = OS_OK;
    acf0:	2000      	movs	r0, #0
    acf2:	e011      	b.n	ad18 <os_mutex_release+0xa4>
        current->t_prio = mu->mu_prio;
    acf4:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    acf6:	4628      	mov	r0, r5
    acf8:	f7ff f9a8 	bl	a04c <os_sched_resort>
    acfc:	e7db      	b.n	acb6 <os_mutex_release+0x42>
        assert(rdy->t_obj);
    acfe:	461a      	mov	r2, r3
    ad00:	4619      	mov	r1, r3
    ad02:	4618      	mov	r0, r3
    ad04:	f7fe fa5e 	bl	91c4 <__assert_func>
    resched = 0;
    ad08:	2500      	movs	r5, #0
    ad0a:	e7ed      	b.n	ace8 <os_mutex_release+0x74>
        os_sched(rdy);
    ad0c:	4620      	mov	r0, r4
    ad0e:	f7ff f98b 	bl	a028 <os_sched>
    ret = OS_OK;
    ad12:	2000      	movs	r0, #0
    ad14:	e000      	b.n	ad18 <os_mutex_release+0xa4>
        ret = OS_NOT_STARTED;
    ad16:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    ad18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    ad1a:	2003      	movs	r0, #3
    ad1c:	e7fc      	b.n	ad18 <os_mutex_release+0xa4>
        ret = OS_BAD_MUTEX;
    ad1e:	2005      	movs	r0, #5
    ad20:	e7fa      	b.n	ad18 <os_mutex_release+0xa4>
    ad22:	2005      	movs	r0, #5
    ad24:	e7f8      	b.n	ad18 <os_mutex_release+0xa4>
    ad26:	bf00      	nop
    ad28:	200025d0 	.word	0x200025d0

0000ad2c <os_mutex_pend>:

os_error_t
os_mutex_pend(struct os_mutex *mu, os_time_t timeout)
{
    ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    ad2e:	4b36      	ldr	r3, [pc, #216]	; (ae08 <os_mutex_pend+0xdc>)
    ad30:	681b      	ldr	r3, [r3, #0]
    ad32:	2b00      	cmp	r3, #0
    ad34:	d063      	beq.n	adfe <os_mutex_pend+0xd2>
    ad36:	4605      	mov	r5, r0
    ad38:	460e      	mov	r6, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ad3a:	2800      	cmp	r0, #0
    ad3c:	d061      	beq.n	ae02 <os_mutex_pend+0xd6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    ad3e:	f7ff fc9b 	bl	a678 <os_arch_save_sr>
    ad42:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    ad44:	f7ff f85c 	bl	9e00 <os_sched_get_current_task>
    ad48:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    ad4a:	88ea      	ldrh	r2, [r5, #6]
    ad4c:	b1a2      	cbz	r2, ad78 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    ad4e:	68ab      	ldr	r3, [r5, #8]
    ad50:	4283      	cmp	r3, r0
    ad52:	d01e      	beq.n	ad92 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    ad54:	b326      	cbz	r6, ada0 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    ad56:	7ad9      	ldrb	r1, [r3, #11]
    ad58:	7ac2      	ldrb	r2, [r0, #11]
    ad5a:	4291      	cmp	r1, r2
    ad5c:	d825      	bhi.n	adaa <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    ad5e:	6828      	ldr	r0, [r5, #0]
    ad60:	b368      	cbz	r0, adbe <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad62:	4603      	mov	r3, r0
    last = NULL;
    ad64:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad66:	b32b      	cbz	r3, adb4 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    ad68:	f894 c00b 	ldrb.w	ip, [r4, #11]
    ad6c:	7ada      	ldrb	r2, [r3, #11]
    ad6e:	4594      	cmp	ip, r2
    ad70:	d320      	bcc.n	adb4 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    ad72:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ad76:	e7f6      	b.n	ad66 <os_mutex_pend+0x3a>
        mu->mu_owner = current;
    ad78:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    ad7a:	7ac3      	ldrb	r3, [r0, #11]
    ad7c:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    ad7e:	7b83      	ldrb	r3, [r0, #14]
    ad80:	3301      	adds	r3, #1
    ad82:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    ad84:	2301      	movs	r3, #1
    ad86:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ad88:	4638      	mov	r0, r7
    ad8a:	f7ff fc7b 	bl	a684 <os_arch_restore_sr>
        ret = OS_OK;
    ad8e:	2000      	movs	r0, #0
        goto done;
    ad90:	e032      	b.n	adf8 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    ad92:	3201      	adds	r2, #1
    ad94:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ad96:	4638      	mov	r0, r7
    ad98:	f7ff fc74 	bl	a684 <os_arch_restore_sr>
        ret = OS_OK;
    ad9c:	2000      	movs	r0, #0
        goto done;
    ad9e:	e02b      	b.n	adf8 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    ada0:	4638      	mov	r0, r7
    ada2:	f7ff fc6f 	bl	a684 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    ada6:	2006      	movs	r0, #6
        goto done;
    ada8:	e026      	b.n	adf8 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    adaa:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    adac:	68a8      	ldr	r0, [r5, #8]
    adae:	f7ff f94d 	bl	a04c <os_sched_resort>
    adb2:	e7d4      	b.n	ad5e <os_mutex_pend+0x32>
        }
    }

    if (last) {
    adb4:	b119      	cbz	r1, adbe <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    adb6:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    adb8:	64e3      	str	r3, [r4, #76]	; 0x4c
    adba:	64cc      	str	r4, [r1, #76]	; 0x4c
    adbc:	e001      	b.n	adc2 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    adbe:	64e0      	str	r0, [r4, #76]	; 0x4c
    adc0:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    adc2:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    adc4:	7b63      	ldrb	r3, [r4, #13]
    adc6:	f043 0304 	orr.w	r3, r3, #4
    adca:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    adcc:	4631      	mov	r1, r6
    adce:	4620      	mov	r0, r4
    add0:	f7ff f822 	bl	9e18 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    add4:	4638      	mov	r0, r7
    add6:	f7ff fc55 	bl	a684 <os_arch_restore_sr>

    os_sched(NULL);
    adda:	2000      	movs	r0, #0
    addc:	f7ff f924 	bl	a028 <os_sched>

    OS_ENTER_CRITICAL(sr);
    ade0:	f7ff fc4a 	bl	a678 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    ade4:	7b63      	ldrb	r3, [r4, #13]
    ade6:	f023 0304 	bic.w	r3, r3, #4
    adea:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    adec:	f7ff fc4a 	bl	a684 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    adf0:	68ab      	ldr	r3, [r5, #8]
    adf2:	42a3      	cmp	r3, r4
    adf4:	d001      	beq.n	adfa <os_mutex_pend+0xce>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    adf6:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    adf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_OK;
    adfa:	2000      	movs	r0, #0
    adfc:	e7fc      	b.n	adf8 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    adfe:	2009      	movs	r0, #9
    ae00:	e7fa      	b.n	adf8 <os_mutex_pend+0xcc>
        ret = OS_INVALID_PARM;
    ae02:	2003      	movs	r0, #3
    ae04:	e7f8      	b.n	adf8 <os_mutex_pend+0xcc>
    ae06:	bf00      	nop
    ae08:	200025d0 	.word	0x200025d0

0000ae0c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    ae0c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    ae10:	4832      	ldr	r0, [pc, #200]	; (aedc <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    ae12:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    ae14:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    ae16:	f380 8814 	msr	CONTROL, r0
        ISB
    ae1a:	f3bf 8f6f 	isb	sy
        BX      LR
    ae1e:	4770      	bx	lr

0000ae20 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    ae20:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    ae24:	4770      	bx	lr

0000ae26 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    ae26:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    ae2a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    ae2c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    ae30:	b951      	cbnz	r1, ae48 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ae32:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ae36:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    ae38:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ae3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    ae3e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    ae42:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    ae46:	4770      	bx	lr

0000ae48 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ae48:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    ae4a:	4a25      	ldr	r2, [pc, #148]	; (aee0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    ae4c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    ae4e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    ae50:	d809      	bhi.n	ae66 <SVC_Done>

        LDR     R4,=SVC_Table-4
    ae52:	4c24      	ldr	r4, [pc, #144]	; (aee4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    ae54:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ae58:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    ae5c:	47a0      	blx	r4

        MRS     R12,PSP
    ae5e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    ae62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000ae66 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    ae6a:	4770      	bx	lr

0000ae6c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    ae6c:	4b1e      	ldr	r3, [pc, #120]	; (aee8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    ae6e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    ae70:	4b1e      	ldr	r3, [pc, #120]	; (aeec <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    ae72:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    ae74:	4291      	cmp	r1, r2
        IT      EQ
    ae76:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    ae78:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    ae7a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    ae7e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    ae82:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    ae84:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    ae88:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    ae8c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    ae90:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    ae92:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    ae96:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    ae9a:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    ae9e:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    aea0:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    aea4:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    aea8:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    aeac:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    aeb0:	4770      	bx	lr

0000aeb2 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    aeb2:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    aeb4:	f7ff fbd0 	bl	a658 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    aebc:	4770      	bx	lr

0000aebe <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    aebe:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    aec2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    aec4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    aec8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    aecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    aed0:	4668      	mov	r0, sp
        BL      os_default_irq
    aed2:	f7fe f99d 	bl	9210 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    aed6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    aeda:	4770      	bx	lr
        LDR     R0,=os_flags
    aedc:	2000342c 	.word	0x2000342c
        LDR     R2,=SVC_Count
    aee0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    aee4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    aee8:	20000550 	.word	0x20000550
        LDR     R3,=g_current_task      /* Get current task */
    aeec:	200033e4 	.word	0x200033e4

0000aef0 <uwb_transport>:
static struct nmgr_transport uwb_transport_2;
#endif

static struct nmgr_transport*
uwb_transport(int idx) {
    if (idx == 0) return &uwb_transport_0;
    aef0:	b908      	cbnz	r0, aef6 <uwb_transport+0x6>
    aef2:	4802      	ldr	r0, [pc, #8]	; (aefc <uwb_transport+0xc>)
#endif
#if MYNEWT_VAL(UWB_DEVICE_2)
    if (idx == 2) return &uwb_transport_2;
#endif
    return 0;
}
    aef4:	4770      	bx	lr
    return 0;
    aef6:	2000      	movs	r0, #0
    aef8:	4770      	bx	lr
    aefa:	bf00      	nop
    aefc:	20003434 	.word	0x20003434

0000af00 <rx_timeout_cb>:
 *
 * @return true on sucess
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    af00:	b508      	push	{r3, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    af02:	6848      	ldr	r0, [r1, #4]
    af04:	89c3      	ldrh	r3, [r0, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0){
    af06:	b10b      	cbz	r3, af0c <rx_timeout_cb+0xc>
        dpl_sem_release(&nmgruwb->sem);
        return true;
    }
    return false;
    af08:	2000      	movs	r0, #0
}
    af0a:	bd08      	pop	{r3, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    af0c:	3008      	adds	r0, #8
    af0e:	f7ff f8bb 	bl	a088 <os_sem_release>
        return true;
    af12:	2001      	movs	r0, #1
    af14:	e7f9      	b.n	af0a <rx_timeout_cb+0xa>

0000af16 <tx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    af16:	b508      	push	{r3, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    af18:	6848      	ldr	r0, [r1, #4]
    af1a:	89c3      	ldrh	r3, [r0, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    af1c:	b10b      	cbz	r3, af22 <tx_complete_cb+0xc>
        dpl_sem_release(&nmgruwb->sem);
        return true;
    }
    return false;
    af1e:	2000      	movs	r0, #0
}
    af20:	bd08      	pop	{r3, pc}
    af22:	3008      	adds	r0, #8
    af24:	f7ff f8b0 	bl	a088 <os_sem_release>
        return true;
    af28:	2001      	movs	r0, #1
    af2a:	e7f9      	b.n	af20 <tx_complete_cb+0xa>

0000af2c <rx_complete_cb>:
{
    af2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    af2e:	684e      	ldr	r6, [r1, #4]
    if(inst->fctrl != NMGR_UWB_FCTRL) {
    af30:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    af34:	f648 0341 	movw	r3, #34881	; 0x8841
    af38:	429a      	cmp	r2, r3
    af3a:	f040 8093 	bne.w	b064 <rx_complete_cb+0x138>
    af3e:	4604      	mov	r4, r0
    nmgr_uwb_frame_header_t *frame = (nmgr_uwb_frame_header_t*)inst->rxbuf;
    af40:	f8d0 54fc 	ldr.w	r5, [r0, #1276]	; 0x4fc
    if(frame->code < UWB_DATA_CODE_NMGR_INVALID ||
    af44:	f8b5 3009 	ldrh.w	r3, [r5, #9]
    af48:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
    af4c:	b29b      	uxth	r3, r3
    af4e:	2b0f      	cmp	r3, #15
    af50:	f200 808d 	bhi.w	b06e <rx_complete_cb+0x142>
    if (frame->rpt_count < frame->rpt_max &&
    af54:	7aeb      	ldrb	r3, [r5, #11]
    af56:	7b2a      	ldrb	r2, [r5, #12]
    af58:	4293      	cmp	r3, r2
    af5a:	d23e      	bcs.n	afda <rx_complete_cb+0xae>
        frame->dst_address != inst->my_short_address &&
    af5c:	f8b5 1005 	ldrh.w	r1, [r5, #5]
    af60:	f8b0 24b6 	ldrh.w	r2, [r0, #1206]	; 0x4b6
    if (frame->rpt_count < frame->rpt_max &&
    af64:	4291      	cmp	r1, r2
    af66:	d038      	beq.n	afda <rx_complete_cb+0xae>
        frame->src_address != inst->my_short_address &&
    af68:	f8b5 1007 	ldrh.w	r1, [r5, #7]
        frame->dst_address != inst->my_short_address &&
    af6c:	428a      	cmp	r2, r1
    af6e:	d034      	beq.n	afda <rx_complete_cb+0xae>
        !(frame->src_address = last_rpt_src && frame->seq_num != last_rpt_seq_num)
    af70:	4a43      	ldr	r2, [pc, #268]	; (b080 <rx_complete_cb+0x154>)
    af72:	8812      	ldrh	r2, [r2, #0]
    af74:	b142      	cbz	r2, af88 <rx_complete_cb+0x5c>
    af76:	78a9      	ldrb	r1, [r5, #2]
    af78:	4a42      	ldr	r2, [pc, #264]	; (b084 <rx_complete_cb+0x158>)
    af7a:	7812      	ldrb	r2, [r2, #0]
    af7c:	4291      	cmp	r1, r2
    af7e:	d001      	beq.n	af84 <rx_complete_cb+0x58>
    af80:	2201      	movs	r2, #1
    af82:	e002      	b.n	af8a <rx_complete_cb+0x5e>
    af84:	2200      	movs	r2, #0
    af86:	e000      	b.n	af8a <rx_complete_cb+0x5e>
    af88:	2200      	movs	r2, #0
    af8a:	b291      	uxth	r1, r2
    af8c:	f8a5 2007 	strh.w	r2, [r5, #7]
        frame->src_address != inst->my_short_address &&
    af90:	bb19      	cbnz	r1, afda <rx_complete_cb+0xae>
        last_rpt_src = frame->src_address;
    af92:	4a3b      	ldr	r2, [pc, #236]	; (b080 <rx_complete_cb+0x154>)
    af94:	8011      	strh	r1, [r2, #0]
        last_rpt_seq_num = frame->seq_num;
    af96:	78a9      	ldrb	r1, [r5, #2]
    af98:	4a3a      	ldr	r2, [pc, #232]	; (b084 <rx_complete_cb+0x158>)
    af9a:	7011      	strb	r1, [r2, #0]
        frame->rpt_count++;
    af9c:	3301      	adds	r3, #1
    af9e:	72eb      	strb	r3, [r5, #11]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    afa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    afa4:	2101      	movs	r1, #1
    afa6:	4620      	mov	r0, r4
    afa8:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    afaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afac:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    afae:	2300      	movs	r3, #0
    afb0:	461a      	mov	r2, r3
    afb2:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    afb6:	4620      	mov	r0, r4
    afb8:	47b8      	blx	r7
    return (dev->uw_funcs->uf_start_tx(dev));
    afba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    afbe:	4620      	mov	r0, r4
    afc0:	4798      	blx	r3
        if (uwb_start_tx(inst).start_tx_error) {
    afc2:	f010 0f04 	tst.w	r0, #4
    afc6:	d108      	bne.n	afda <rx_complete_cb+0xae>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    afc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afca:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    afcc:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    afd0:	2200      	movs	r2, #0
    afd2:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    afd6:	4620      	mov	r0, r4
    afd8:	47b8      	blx	r7
    if(frame->dst_address != inst->my_short_address && frame->dst_address != 0xffff) {
    afda:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    afde:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
    afe2:	4293      	cmp	r3, r2
    afe4:	d003      	beq.n	afee <rx_complete_cb+0xc2>
    afe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    afea:	4293      	cmp	r3, r2
    afec:	d141      	bne.n	b072 <rx_complete_cb+0x146>
    switch(frame->code) {
    afee:	f8b5 2009 	ldrh.w	r2, [r5, #9]
    aff2:	f240 4321 	movw	r3, #1057	; 0x421
    aff6:	429a      	cmp	r2, r3
    aff8:	d001      	beq.n	affe <rx_complete_cb+0xd2>
    bool ret = false;
    affa:	2400      	movs	r4, #0
    affc:	e033      	b.n	b066 <rx_complete_cb+0x13a>
            mbuf = os_msys_get_pkthdr(inst->frame_len - sizeof(nmgr_uwb_frame_header_t),
    affe:	f8b4 04e2 	ldrh.w	r0, [r4, #1250]	; 0x4e2
    b002:	380d      	subs	r0, #13
    b004:	2111      	movs	r1, #17
    b006:	b280      	uxth	r0, r0
    b008:	f7fe fde4 	bl	9bd4 <os_msys_get_pkthdr>
            if (!mbuf) {
    b00c:	4605      	mov	r5, r0
    b00e:	b1e0      	cbz	r0, b04a <rx_complete_cb+0x11e>
            hdr->nmgruwb_inst = nmgruwb;
    b010:	6186      	str	r6, [r0, #24]
            memcpy(&hdr->uwb_hdr, inst->rxbuf, sizeof(nmgr_uwb_frame_header_t));
    b012:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    b016:	6818      	ldr	r0, [r3, #0]
    b018:	6859      	ldr	r1, [r3, #4]
    b01a:	689a      	ldr	r2, [r3, #8]
    b01c:	61e8      	str	r0, [r5, #28]
    b01e:	6229      	str	r1, [r5, #32]
    b020:	626a      	str	r2, [r5, #36]	; 0x24
    b022:	7b1b      	ldrb	r3, [r3, #12]
    b024:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
            int rc = os_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(nmgr_uwb_frame_header_t),
    b028:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
                                      (inst->frame_len - sizeof(nmgr_uwb_frame_header_t)));
    b02c:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
            int rc = os_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(nmgr_uwb_frame_header_t),
    b030:	3b0d      	subs	r3, #13
    b032:	320d      	adds	r2, #13
    b034:	2100      	movs	r1, #0
    b036:	4628      	mov	r0, r5
    b038:	f7ff fda0 	bl	ab7c <os_mbuf_copyinto>
            if (rc == 0) {
    b03c:	b968      	cbnz	r0, b05a <rx_complete_cb+0x12e>
                nmgr_rx_req(&uwb_transport_0, mbuf);
    b03e:	4629      	mov	r1, r5
    b040:	4811      	ldr	r0, [pc, #68]	; (b088 <rx_complete_cb+0x15c>)
    b042:	f007 f999 	bl	12378 <nmgr_rx_req>
            ret = true;
    b046:	2401      	movs	r4, #1
    b048:	e00d      	b.n	b066 <rx_complete_cb+0x13a>
                printf("ERRMEM %d\n", inst->frame_len - sizeof(nmgr_uwb_frame_header_t) +
    b04a:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    b04e:	3104      	adds	r1, #4
    b050:	480e      	ldr	r0, [pc, #56]	; (b08c <rx_complete_cb+0x160>)
    b052:	f005 ff3b 	bl	10ecc <printf>
            ret = true;
    b056:	2401      	movs	r4, #1
                break;
    b058:	e005      	b.n	b066 <rx_complete_cb+0x13a>
                os_mbuf_free_chain(mbuf);
    b05a:	4628      	mov	r0, r5
    b05c:	f7ff fc57 	bl	a90e <os_mbuf_free_chain>
            ret = true;
    b060:	2401      	movs	r4, #1
    b062:	e000      	b.n	b066 <rx_complete_cb+0x13a>
    bool ret = false;
    b064:	2400      	movs	r4, #0
    b066:	89f3      	ldrh	r3, [r6, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    b068:	b12b      	cbz	r3, b076 <rx_complete_cb+0x14a>
}
    b06a:	4620      	mov	r0, r4
    b06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ret = false;
    b06e:	2400      	movs	r4, #0
    b070:	e7f9      	b.n	b066 <rx_complete_cb+0x13a>
    b072:	2400      	movs	r4, #0
    b074:	e7f7      	b.n	b066 <rx_complete_cb+0x13a>
    b076:	f106 0008 	add.w	r0, r6, #8
    b07a:	f7ff f805 	bl	a088 <os_sem_release>
    b07e:	e7f4      	b.n	b06a <rx_complete_cb+0x13e>
    b080:	20003432 	.word	0x20003432
    b084:	20003430 	.word	0x20003430
    b088:	20003434 	.word	0x20003434
    b08c:	0002541c 	.word	0x0002541c

0000b090 <nmgr_uwb_mtu>:
{
    b090:	b508      	push	{r3, lr}
    struct uwb_dev* inst = uwb_dev_idx_lookup(idx);
    b092:	4608      	mov	r0, r1
    b094:	f7fd fdee 	bl	8c74 <uwb_dev_idx_lookup>
    return (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? NMGR_UWB_MTU_STD : NMGR_UWB_MTU_EXT;
    b098:	f890 3513 	ldrb.w	r3, [r0, #1299]	; 0x513
    b09c:	b90b      	cbnz	r3, b0a2 <nmgr_uwb_mtu+0x12>
    b09e:	2071      	movs	r0, #113	; 0x71
}
    b0a0:	bd08      	pop	{r3, pc}
    return (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? NMGR_UWB_MTU_STD : NMGR_UWB_MTU_EXT;
    b0a2:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    b0a6:	e7fb      	b.n	b0a0 <nmgr_uwb_mtu+0x10>

0000b0a8 <nmgr_uwb_mtu_0>:
{
    b0a8:	b508      	push	{r3, lr}
    return nmgr_uwb_mtu(m, 0);
    b0aa:	2100      	movs	r1, #0
    b0ac:	f7ff fff0 	bl	b090 <nmgr_uwb_mtu>
}
    b0b0:	bd08      	pop	{r3, pc}

0000b0b2 <nmgr_uwb_init>:
{
    b0b2:	b538      	push	{r3, r4, r5, lr}
    assert(dev != NULL);
    b0b4:	b190      	cbz	r0, b0dc <nmgr_uwb_init+0x2a>
    b0b6:	4605      	mov	r5, r0
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_NMGR_UWB);
    b0b8:	2113      	movs	r1, #19
    b0ba:	f7fd fe60 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if(nmgruwb == NULL){
    b0be:	4604      	mov	r4, r0
    b0c0:	b190      	cbz	r0, b0e8 <nmgr_uwb_init+0x36>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    b0c2:	2101      	movs	r1, #1
    b0c4:	f104 0008 	add.w	r0, r4, #8
    b0c8:	f7fe ffd6 	bl	a078 <os_sem_init>
    os_mqueue_init(&nmgruwb->tx_q, NULL, NULL);
    b0cc:	2200      	movs	r2, #0
    b0ce:	4611      	mov	r1, r2
    b0d0:	f104 0010 	add.w	r0, r4, #16
    b0d4:	f7ff fba6 	bl	a824 <os_mqueue_init>
}
    b0d8:	4620      	mov	r0, r4
    b0da:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev != NULL);
    b0dc:	2300      	movs	r3, #0
    b0de:	461a      	mov	r2, r3
    b0e0:	4619      	mov	r1, r3
    b0e2:	4618      	mov	r0, r3
    b0e4:	f7fe f86e 	bl	91c4 <__assert_func>
        nmgruwb = (nmgr_uwb_instance_t*)malloc(sizeof(nmgr_uwb_instance_t));
    b0e8:	2028      	movs	r0, #40	; 0x28
    b0ea:	f005 fa59 	bl	105a0 <malloc>
    b0ee:	4604      	mov	r4, r0
        memset(nmgruwb,0,sizeof(nmgr_uwb_instance_t));
    b0f0:	2228      	movs	r2, #40	; 0x28
    b0f2:	2100      	movs	r1, #0
    b0f4:	f005 fad1 	bl	1069a <memset>
        assert(nmgruwb);
    b0f8:	b10c      	cbz	r4, b0fe <nmgr_uwb_init+0x4c>
        nmgruwb->dev_inst = dev;
    b0fa:	6025      	str	r5, [r4, #0]
    b0fc:	e7e1      	b.n	b0c2 <nmgr_uwb_init+0x10>
        assert(nmgruwb);
    b0fe:	2300      	movs	r3, #0
    b100:	461a      	mov	r2, r3
    b102:	4619      	mov	r1, r3
    b104:	4618      	mov	r0, r3
    b106:	f7fe f85d 	bl	91c4 <__assert_func>
	...

0000b10c <nmgr_uwb_pkg_init>:
{
    b10c:	b510      	push	{r4, lr}
    SYSINIT_ASSERT_ACTIVE();
    b10e:	4b11      	ldr	r3, [pc, #68]	; (b154 <nmgr_uwb_pkg_init+0x48>)
    b110:	781b      	ldrb	r3, [r3, #0]
    b112:	b1cb      	cbz	r3, b148 <nmgr_uwb_pkg_init+0x3c>
    printf("{\"utime\": %lu,\"msg\": \"nmgr_uwb_init\"}\n", os_cputime_ticks_to_usecs(os_cputime_get32()));
    b114:	f7fe fabf 	bl	9696 <os_cputime_get32>
    b118:	4601      	mov	r1, r0
    b11a:	480f      	ldr	r0, [pc, #60]	; (b158 <nmgr_uwb_pkg_init+0x4c>)
    b11c:	f005 fed6 	bl	10ecc <printf>
    udev = uwb_dev_idx_lookup(0);
    b120:	2000      	movs	r0, #0
    b122:	f7fd fda7 	bl	8c74 <uwb_dev_idx_lookup>
    b126:	4604      	mov	r4, r0
    nmgr_transport_init(uwb_transport(0), nmgr_resp_cb, nmgr_uwb_mtu_0);
    b128:	2000      	movs	r0, #0
    b12a:	f7ff fee1 	bl	aef0 <uwb_transport>
    b12e:	4a0b      	ldr	r2, [pc, #44]	; (b15c <nmgr_uwb_pkg_init+0x50>)
    b130:	490b      	ldr	r1, [pc, #44]	; (b160 <nmgr_uwb_pkg_init+0x54>)
    b132:	f007 f917 	bl	12364 <nmgr_transport_init>
    g_cbs[0].inst_ptr = nmgr_uwb_init(udev);
    b136:	4620      	mov	r0, r4
    b138:	f7ff ffbb 	bl	b0b2 <nmgr_uwb_init>
    b13c:	4909      	ldr	r1, [pc, #36]	; (b164 <nmgr_uwb_pkg_init+0x58>)
    b13e:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs[0]);
    b140:	4620      	mov	r0, r4
    b142:	f7fd fdc7 	bl	8cd4 <uwb_mac_append_interface>
}
    b146:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    b148:	461a      	mov	r2, r3
    b14a:	4619      	mov	r1, r3
    b14c:	4618      	mov	r0, r3
    b14e:	f7fe f839 	bl	91c4 <__assert_func>
    b152:	bf00      	nop
    b154:	20004bb0 	.word	0x20004bb0
    b158:	00025428 	.word	0x00025428
    b15c:	0000b0a9 	.word	0x0000b0a9
    b160:	0000b359 	.word	0x0000b359
    b164:	20000568 	.word	0x20000568

0000b168 <nmgr_uwb_tx>:


int
nmgr_uwb_tx(struct _nmgr_uwb_instance_t *nmgruwb, uint16_t dst_addr, uint16_t code,
            struct os_mbuf *m, uint64_t dx_time)
{
    b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b16c:	b08d      	sub	sp, #52	; 0x34
    b16e:	4681      	mov	r9, r0
    b170:	460c      	mov	r4, r1
    b172:	4615      	mov	r5, r2
    b174:	4698      	mov	r8, r3
    b176:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    b17a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    struct uwb_dev* inst = nmgruwb->dev_inst;
    b17c:	4682      	mov	sl, r0
    b17e:	f85a 6b08 	ldr.w	r6, [sl], #8
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b186:	4650      	mov	r0, sl
    b188:	f7fe ffb0 	bl	a0ec <os_sem_pend>
    int mbuf_offset = 0;
    int device_offset;
    dpl_sem_pend(&nmgruwb->sem, DPL_TIMEOUT_NEVER);

    /* Prepare header and write to device */
    uwb_hdr.fctrl = NMGR_UWB_FCTRL;
    b18c:	f648 0341 	movw	r3, #34881	; 0x8841
    b190:	f8ad 3020 	strh.w	r3, [sp, #32]
    uwb_hdr.src_address = inst->uid;
    b194:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
    b198:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
    uwb_hdr.code = code;
    b19c:	f8ad 5029 	strh.w	r5, [sp, #41]	; 0x29
    uwb_hdr.dst_address = dst_addr;
    b1a0:	f8ad 4025 	strh.w	r4, [sp, #37]	; 0x25
    uwb_hdr.seq_num = nmgruwb->frame_seq_num++;
    b1a4:	f899 3004 	ldrb.w	r3, [r9, #4]
    b1a8:	1c5a      	adds	r2, r3, #1
    b1aa:	f889 2004 	strb.w	r2, [r9, #4]
    b1ae:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uwb_hdr.PANID = inst->pan_id;
    b1b2:	f8b6 34c0 	ldrh.w	r3, [r6, #1216]	; 0x4c0
    b1b6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
    uwb_hdr.rpt_count = 0;
    b1ba:	2300      	movs	r3, #0
    b1bc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if MYNEWT_VAL(UWB_CCP_ENABLED)
    uwb_hdr.rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    b1c0:	2304      	movs	r3, #4
    b1c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
#else
    uwb_hdr.rpt_max = 0;
#endif

    /* If fx_time provided, delay until then with tx */
    if (dx_time) {
    b1c6:	ea5b 0307 	orrs.w	r3, fp, r7
    b1ca:	d005      	beq.n	b1d8 <nmgr_uwb_tx+0x70>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b1cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b1d0:	465a      	mov	r2, fp
    b1d2:	463b      	mov	r3, r7
    b1d4:	4630      	mov	r0, r6
    b1d6:	4788      	blx	r1
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b1d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1da:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    b1dc:	230d      	movs	r3, #13
    b1de:	2200      	movs	r2, #0
    b1e0:	a908      	add	r1, sp, #32
    b1e2:	4630      	mov	r0, r6
    b1e4:	47a0      	blx	r4
        uwb_set_delay_start(inst, dx_time);
    }

    uwb_write_tx(inst, (uint8_t*)&uwb_hdr, 0, sizeof(nmgr_uwb_frame_header_t));
    device_offset = sizeof(nmgr_uwb_frame_header_t);
    b1e6:	270d      	movs	r7, #13
    int mbuf_offset = 0;
    b1e8:	2500      	movs	r5, #0

    /* Copy the mbuf payload data to the device to be sent */
    while (mbuf_offset < OS_MBUF_PKTLEN(m)) {
    b1ea:	e019      	b.n	b220 <nmgr_uwb_tx+0xb8>
        int cpy_len = OS_MBUF_PKTLEN(m) - mbuf_offset;
    b1ec:	1b64      	subs	r4, r4, r5
        cpy_len = (cpy_len > sizeof(buf)) ? sizeof(buf) : cpy_len;
    b1ee:	2c20      	cmp	r4, #32
    b1f0:	bf28      	it	cs
    b1f2:	2420      	movcs	r4, #32
    return (dev->uw_funcs->uf_hal_noblock_wait(dev, timeout));
    b1f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b1f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b1fc:	4630      	mov	r0, r6
    b1fe:	4798      	blx	r3

        /* The uwb_write_tx can do a dma transfer, make sure we wait
         * until that's finished before updating the buffer */
        uwb_hal_noblock_wait(inst, OS_TIMEOUT_NEVER);
        os_mbuf_copydata(m, mbuf_offset, cpy_len, buf);
    b200:	466b      	mov	r3, sp
    b202:	4622      	mov	r2, r4
    b204:	4629      	mov	r1, r5
    b206:	4640      	mov	r0, r8
    b208:	f7ff fbf7 	bl	a9fa <os_mbuf_copydata>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b20c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b20e:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    b212:	b2a3      	uxth	r3, r4
    b214:	b2ba      	uxth	r2, r7
    b216:	4669      	mov	r1, sp
    b218:	4630      	mov	r0, r6
    b21a:	47d8      	blx	fp
        uwb_write_tx(inst, buf, device_offset, cpy_len);
        mbuf_offset += cpy_len;
    b21c:	4425      	add	r5, r4
        device_offset += cpy_len;
    b21e:	4427      	add	r7, r4
    while (mbuf_offset < OS_MBUF_PKTLEN(m)) {
    b220:	f8b8 4010 	ldrh.w	r4, [r8, #16]
    b224:	42ac      	cmp	r4, r5
    b226:	dce1      	bgt.n	b1ec <nmgr_uwb_tx+0x84>
    }

    uwb_write_tx_fctrl(inst, sizeof(nmgr_uwb_frame_header_t) + OS_MBUF_PKTLEN(m), 0);
    b228:	340d      	adds	r4, #13
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b22a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b22c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    b22e:	2300      	movs	r3, #0
    b230:	461a      	mov	r2, r3
    b232:	b2a1      	uxth	r1, r4
    b234:	4630      	mov	r0, r6
    b236:	47a8      	blx	r5
    return (dev->uw_funcs->uf_start_tx(dev));
    b238:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b23c:	4630      	mov	r0, r6
    b23e:	4798      	blx	r3

    if(uwb_start_tx(inst).start_tx_error){
    b240:	f010 0f04 	tst.w	r0, #4
    b244:	d10e      	bne.n	b264 <nmgr_uwb_tx+0xfc>
    b246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b24a:	4650      	mov	r0, sl
    b24c:	f7fe ff4e 	bl	a0ec <os_sem_pend>
    b250:	f8b9 300e 	ldrh.w	r3, [r9, #14]
        dpl_sem_release(&nmgruwb->sem);
        printf("UWB NMGR_tx: Tx Error \n");
    }

    dpl_sem_pend(&nmgruwb->sem, DPL_TIMEOUT_NEVER);
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    b254:	b16b      	cbz	r3, b272 <nmgr_uwb_tx+0x10a>
        dpl_sem_release(&nmgruwb->sem);
    }

    os_mbuf_free_chain(m);
    b256:	4640      	mov	r0, r8
    b258:	f7ff fb59 	bl	a90e <os_mbuf_free_chain>
    return 0;
}
    b25c:	2000      	movs	r0, #0
    b25e:	b00d      	add	sp, #52	; 0x34
    b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    b264:	4650      	mov	r0, sl
    b266:	f7fe ff0f 	bl	a088 <os_sem_release>
        printf("UWB NMGR_tx: Tx Error \n");
    b26a:	4804      	ldr	r0, [pc, #16]	; (b27c <nmgr_uwb_tx+0x114>)
    b26c:	f005 f8fc 	bl	10468 <puts>
    b270:	e7e9      	b.n	b246 <nmgr_uwb_tx+0xde>
    b272:	4650      	mov	r0, sl
    b274:	f7fe ff08 	bl	a088 <os_sem_release>
    b278:	e7ed      	b.n	b256 <nmgr_uwb_tx+0xee>
    b27a:	bf00      	nop
    b27c:	00025450 	.word	0x00025450

0000b280 <uwb_nmgr_process_tx_queue>:

int
uwb_nmgr_process_tx_queue(struct _nmgr_uwb_instance_t *nmgruwb, uint64_t dx_time)
{
    b280:	b5f0      	push	{r4, r5, r6, r7, lr}
    b282:	b085      	sub	sp, #20
    b284:	4604      	mov	r4, r0
    b286:	4617      	mov	r7, r2
    b288:	461e      	mov	r6, r3
    int rc;
    uint16_t dst_addr = 0;
    b28a:	2100      	movs	r1, #0
    b28c:	f8ad 100e 	strh.w	r1, [sp, #14]
    uint16_t code = 0;
    b290:	f8ad 100c 	strh.w	r1, [sp, #12]
    struct os_mbuf *om;

    if ((om = os_mqueue_get(&nmgruwb->tx_q)) != NULL) {
    b294:	3010      	adds	r0, #16
    b296:	f7ff fad0 	bl	a83a <os_mqueue_get>
    b29a:	b370      	cbz	r0, b2fa <uwb_nmgr_process_tx_queue+0x7a>
    b29c:	4605      	mov	r5, r0
        /* Extract dest address and code */
        rc = os_mbuf_copydata(om, OS_MBUF_PKTLEN(om)-4, sizeof(dst_addr), &dst_addr);
    b29e:	8a01      	ldrh	r1, [r0, #16]
    b2a0:	f10d 030e 	add.w	r3, sp, #14
    b2a4:	2202      	movs	r2, #2
    b2a6:	3904      	subs	r1, #4
    b2a8:	f7ff fba7 	bl	a9fa <os_mbuf_copydata>
        assert(rc==0);
    b2ac:	b9c8      	cbnz	r0, b2e2 <uwb_nmgr_process_tx_queue+0x62>
        rc = os_mbuf_copydata(om, OS_MBUF_PKTLEN(om)-2, sizeof(code), &code);
    b2ae:	8a29      	ldrh	r1, [r5, #16]
    b2b0:	ab03      	add	r3, sp, #12
    b2b2:	2202      	movs	r2, #2
    b2b4:	3902      	subs	r1, #2
    b2b6:	4628      	mov	r0, r5
    b2b8:	f7ff fb9f 	bl	a9fa <os_mbuf_copydata>
        assert(rc==0);
    b2bc:	b9b8      	cbnz	r0, b2ee <uwb_nmgr_process_tx_queue+0x6e>
        os_mbuf_adj(om, -4);
    b2be:	f06f 0103 	mvn.w	r1, #3
    b2c2:	4628      	mov	r0, r5
    b2c4:	f7ff fbc6 	bl	aa54 <os_mbuf_adj>
        /* nmgr_uwb_tx consumes the mbuf */
        nmgr_uwb_tx(nmgruwb, dst_addr, code, om, dx_time);
    b2c8:	9700      	str	r7, [sp, #0]
    b2ca:	9601      	str	r6, [sp, #4]
    b2cc:	462b      	mov	r3, r5
    b2ce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b2d2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b2d6:	4620      	mov	r0, r4
    b2d8:	f7ff ff46 	bl	b168 <nmgr_uwb_tx>
        return true;
    b2dc:	2001      	movs	r0, #1
    }
    return false;
}
    b2de:	b005      	add	sp, #20
    b2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(rc==0);
    b2e2:	2300      	movs	r3, #0
    b2e4:	461a      	mov	r2, r3
    b2e6:	4619      	mov	r1, r3
    b2e8:	4618      	mov	r0, r3
    b2ea:	f7fd ff6b 	bl	91c4 <__assert_func>
        assert(rc==0);
    b2ee:	2300      	movs	r3, #0
    b2f0:	461a      	mov	r2, r3
    b2f2:	4619      	mov	r1, r3
    b2f4:	4618      	mov	r0, r3
    b2f6:	f7fd ff65 	bl	91c4 <__assert_func>
    return false;
    b2fa:	2000      	movs	r0, #0
    b2fc:	e7ef      	b.n	b2de <uwb_nmgr_process_tx_queue+0x5e>
	...

0000b300 <uwb_nmgr_queue_tx>:

int
uwb_nmgr_queue_tx(struct _nmgr_uwb_instance_t *nmgruwb, uint16_t dst_addr, uint16_t code, struct os_mbuf *om)
{
    b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b302:	4605      	mov	r5, r0
    b304:	460e      	mov	r6, r1
    b306:	461c      	mov	r4, r3
#if MYNEWT_VAL(NMGR_UWB_LOOPBACK)
    nmgr_rx_req(&uwb_transport_0, om);
#else
    int rc;
    if (code==0) {
    b308:	4617      	mov	r7, r2
    b30a:	b90a      	cbnz	r2, b310 <uwb_nmgr_queue_tx+0x10>
         code = UWB_DATA_CODE_NMGR_REQUEST;
    b30c:	f240 4721 	movw	r7, #1057	; 0x421
    }

    /* Append the code and address to the end of the mbuf */
    uint16_t *p = os_mbuf_extend(om, sizeof(uint16_t)*2);
    b310:	2104      	movs	r1, #4
    b312:	4620      	mov	r0, r4
    b314:	f7ff fc76 	bl	ac04 <os_mbuf_extend>
    if (!p) {
    b318:	b148      	cbz	r0, b32e <uwb_nmgr_queue_tx+0x2e>
        printf("##### ERROR uwb_nmgr_q ext_failed\n");
        rc = os_mbuf_free_chain(om);
        return OS_EINVAL;
    }
    p[0] = dst_addr;
    b31a:	8006      	strh	r6, [r0, #0]
    p[1] = code;
    b31c:	8047      	strh	r7, [r0, #2]

    /* Enqueue the packet for sending at the next slot */
    rc = os_mqueue_put(&nmgruwb->tx_q, NULL, om);
    b31e:	4622      	mov	r2, r4
    b320:	2100      	movs	r1, #0
    b322:	f105 0010 	add.w	r0, r5, #16
    b326:	f7ff fa99 	bl	a85c <os_mqueue_put>
    if (rc != 0) {
    b32a:	b940      	cbnz	r0, b33e <uwb_nmgr_queue_tx+0x3e>
        rc = os_mbuf_free_chain(om);
        return OS_EINVAL;
    }
#endif
    return 0;
}
    b32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printf("##### ERROR uwb_nmgr_q ext_failed\n");
    b32e:	4808      	ldr	r0, [pc, #32]	; (b350 <uwb_nmgr_queue_tx+0x50>)
    b330:	f005 f89a 	bl	10468 <puts>
        rc = os_mbuf_free_chain(om);
    b334:	4620      	mov	r0, r4
    b336:	f7ff faea 	bl	a90e <os_mbuf_free_chain>
        return OS_EINVAL;
    b33a:	2002      	movs	r0, #2
    b33c:	e7f6      	b.n	b32c <uwb_nmgr_queue_tx+0x2c>
        printf("##### ERROR uwb_nmgr_q rc:%d\n", rc);
    b33e:	4601      	mov	r1, r0
    b340:	4804      	ldr	r0, [pc, #16]	; (b354 <uwb_nmgr_queue_tx+0x54>)
    b342:	f005 fdc3 	bl	10ecc <printf>
        rc = os_mbuf_free_chain(om);
    b346:	4620      	mov	r0, r4
    b348:	f7ff fae1 	bl	a90e <os_mbuf_free_chain>
        return OS_EINVAL;
    b34c:	2002      	movs	r0, #2
    b34e:	e7ed      	b.n	b32c <uwb_nmgr_queue_tx+0x2c>
    b350:	00025468 	.word	0x00025468
    b354:	0002548c 	.word	0x0002548c

0000b358 <nmgr_resp_cb>:
{
    b358:	b538      	push	{r3, r4, r5, lr}
    b35a:	460c      	mov	r4, r1
    if (OS_MBUF_USRHDR_LEN(m) != sizeof(struct nmgr_uwb_usr_hdr)) {
    b35c:	794b      	ldrb	r3, [r1, #5]
    b35e:	2b19      	cmp	r3, #25
    b360:	d114      	bne.n	b38c <nmgr_resp_cb+0x34>
    struct _nmgr_uwb_instance_t *nmgruwb = hdr->nmgruwb_inst;
    b362:	698d      	ldr	r5, [r1, #24]
    assert(nmgruwb);
    b364:	b1b5      	cbz	r5, b394 <nmgr_resp_cb+0x3c>
    if (hdr->uwb_hdr.dst_address == UWB_BROADCAST_ADDRESS) {
    b366:	f8b1 2021 	ldrh.w	r2, [r1, #33]	; 0x21
    b36a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b36e:	429a      	cmp	r2, r3
    b370:	d016      	beq.n	b3a0 <nmgr_resp_cb+0x48>
    if (uwb_nmgr_queue_tx(nmgruwb, frame->src_address,
    b372:	460b      	mov	r3, r1
    b374:	f240 4222 	movw	r2, #1058	; 0x422
    b378:	f8b1 1023 	ldrh.w	r1, [r1, #35]	; 0x23
    b37c:	4628      	mov	r0, r5
    b37e:	f7ff ffbf 	bl	b300 <uwb_nmgr_queue_tx>
    b382:	b9c0      	cbnz	r0, b3b6 <nmgr_resp_cb+0x5e>
    b384:	89eb      	ldrh	r3, [r5, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0){
    b386:	b30b      	cbz	r3, b3cc <nmgr_resp_cb+0x74>
    return 0;
    b388:	2000      	movs	r0, #0
}
    b38a:	bd38      	pop	{r3, r4, r5, pc}
        rc = os_mbuf_free_chain(m);
    b38c:	4608      	mov	r0, r1
    b38e:	f7ff fabe 	bl	a90e <os_mbuf_free_chain>
        return rc;
    b392:	e7fa      	b.n	b38a <nmgr_resp_cb+0x32>
    assert(nmgruwb);
    b394:	2300      	movs	r3, #0
    b396:	461a      	mov	r2, r3
    b398:	4619      	mov	r1, r3
    b39a:	4618      	mov	r0, r3
    b39c:	f7fd ff12 	bl	91c4 <__assert_func>
        rc = os_mbuf_free_chain(m);
    b3a0:	4608      	mov	r0, r1
    b3a2:	f7ff fab4 	bl	a90e <os_mbuf_free_chain>
        assert(rc==0);
    b3a6:	2800      	cmp	r0, #0
    b3a8:	d0ec      	beq.n	b384 <nmgr_resp_cb+0x2c>
    b3aa:	2300      	movs	r3, #0
    b3ac:	461a      	mov	r2, r3
    b3ae:	4619      	mov	r1, r3
    b3b0:	4618      	mov	r0, r3
    b3b2:	f7fd ff07 	bl	91c4 <__assert_func>
        rc = os_mbuf_free_chain(m);
    b3b6:	4620      	mov	r0, r4
    b3b8:	f7ff faa9 	bl	a90e <os_mbuf_free_chain>
        assert(rc==0);
    b3bc:	2800      	cmp	r0, #0
    b3be:	d0e1      	beq.n	b384 <nmgr_resp_cb+0x2c>
    b3c0:	2300      	movs	r3, #0
    b3c2:	461a      	mov	r2, r3
    b3c4:	4619      	mov	r1, r3
    b3c6:	4618      	mov	r0, r3
    b3c8:	f7fd fefc 	bl	91c4 <__assert_func>
    b3cc:	f105 0008 	add.w	r0, r5, #8
    b3d0:	f7fe fe5a 	bl	a088 <os_sem_release>
        assert(rc==0);
    b3d4:	b908      	cbnz	r0, b3da <nmgr_resp_cb+0x82>
    return 0;
    b3d6:	2000      	movs	r0, #0
    b3d8:	e7d7      	b.n	b38a <nmgr_resp_cb+0x32>
        assert(rc==0);
    b3da:	2300      	movs	r3, #0
    b3dc:	461a      	mov	r2, r3
    b3de:	4619      	mov	r1, r3
    b3e0:	4618      	mov	r0, r3
    b3e2:	f7fd feef 	bl	91c4 <__assert_func>

0000b3e6 <complete_ev_cb>:
 * @param ev    Pointer to os_event.
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev) {
    b3e6:	b510      	push	{r4, lr}
    assert(ev != NULL);
    b3e8:	b160      	cbz	r0, b404 <complete_ev_cb+0x1e>
    return ev->ev.ev_arg;
    b3ea:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    b3ec:	b184      	cbz	r4, b410 <complete_ev_cb+0x2a>

    struct nrng_instance * nrng = (struct nrng_instance *) dpl_event_get_arg(ev);
    nrng_encode(nrng, nrng->seq_num, nrng->idx);
    b3ee:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    b3f2:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    b3f6:	4620      	mov	r0, r4
    b3f8:	f000 fc1c 	bl	bc34 <nrng_encode>
    nrng->slot_mask = 0;
    b3fc:	2300      	movs	r3, #0
    b3fe:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
}
    b402:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    b404:	2300      	movs	r3, #0
    b406:	461a      	mov	r2, r3
    b408:	4619      	mov	r1, r3
    b40a:	4618      	mov	r0, r3
    b40c:	f7fd feda 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    b410:	2300      	movs	r3, #0
    b412:	461a      	mov	r2, r3
    b414:	4619      	mov	r1, r3
    b416:	4618      	mov	r0, r3
    b418:	f7fd fed4 	bl	91c4 <__assert_func>

0000b41c <complete_cb>:
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * udev, struct uwb_mac_interface * cbs)
{
    if (udev->fctrl != FCNTL_IEEE_RANGE_16)
    b41c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    b420:	f648 0341 	movw	r3, #34881	; 0x8841
    b424:	429a      	cmp	r2, r3
    b426:	d103      	bne.n	b430 <complete_cb+0x14>
        return false;
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
    b428:	684b      	ldr	r3, [r1, #4]
    b42a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
    b42e:	b10a      	cbz	r2, b434 <complete_cb+0x18>
        dpl_event_init(&nrng_event, complete_ev_cb, (void*) nrng);
        dpl_eventq_put(dpl_eventq_dflt_get(), &nrng_event);
    }
    return false;
}
    b430:	2000      	movs	r0, #0
    b432:	4770      	bx	lr
{
    b434:	b510      	push	{r4, lr}
    memset(ev, 0, sizeof(*ev));
    b436:	4c07      	ldr	r4, [pc, #28]	; (b454 <complete_cb+0x38>)
    b438:	6022      	str	r2, [r4, #0]
    b43a:	6062      	str	r2, [r4, #4]
    b43c:	60a2      	str	r2, [r4, #8]
    b43e:	60e2      	str	r2, [r4, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    b440:	4a05      	ldr	r2, [pc, #20]	; (b458 <complete_cb+0x3c>)
    b442:	6062      	str	r2, [r4, #4]
    ev->ev.ev_arg = arg;
    b444:	60a3      	str	r3, [r4, #8]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    b446:	f7fe faad 	bl	99a4 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b44a:	4621      	mov	r1, r4
    b44c:	f7fe f9fc 	bl	9848 <os_eventq_put>
}
    b450:	2000      	movs	r0, #0
    b452:	bd10      	pop	{r4, pc}
    b454:	20003454 	.word	0x20003454
    b458:	0000b3e7 	.word	0x0000b3e7

0000b45c <nrng_get_config>:
    if(!(SLIST_EMPTY(&nrng->rng_configs))){
    b45c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b460:	b12b      	cbz	r3, b46e <nrng_get_config+0x12>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
    b462:	b143      	cbz	r3, b476 <nrng_get_config+0x1a>
            if (cfgs != NULL && cfgs->rng_code == code) {
    b464:	881a      	ldrh	r2, [r3, #0]
    b466:	428a      	cmp	r2, r1
    b468:	d003      	beq.n	b472 <nrng_get_config+0x16>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
    b46a:	68db      	ldr	r3, [r3, #12]
    b46c:	e7f9      	b.n	b462 <nrng_get_config+0x6>
    return &g_config;
    b46e:	4803      	ldr	r0, [pc, #12]	; (b47c <nrng_get_config+0x20>)
    b470:	4770      	bx	lr
                return cfgs->config;
    b472:	6898      	ldr	r0, [r3, #8]
    b474:	4770      	bx	lr
    return &g_config;
    b476:	4801      	ldr	r0, [pc, #4]	; (b47c <nrng_get_config+0x20>)
}
    b478:	4770      	bx	lr
    b47a:	bf00      	nop
    b47c:	200005a4 	.word	0x200005a4

0000b480 <nrng_append_config>:
{
    b480:	b508      	push	{r3, lr}
    assert(nrng);
    b482:	b120      	cbz	r0, b48e <nrng_append_config+0xe>
    if(!(SLIST_EMPTY(&nrng->rng_configs))) {
    b484:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b488:	b17b      	cbz	r3, b4aa <nrng_append_config+0x2a>
        struct rng_config_list * prev_cfgs = NULL;
    b48a:	2200      	movs	r2, #0
    b48c:	e007      	b.n	b49e <nrng_append_config+0x1e>
    assert(nrng);
    b48e:	2300      	movs	r3, #0
    b490:	461a      	mov	r2, r3
    b492:	4619      	mov	r1, r3
    b494:	4618      	mov	r0, r3
    b496:	f7fd fe95 	bl	91c4 <__assert_func>
            prev_cfgs = cur_cfgs;
    b49a:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cfgs, &nrng->rng_configs, next){
    b49c:	68db      	ldr	r3, [r3, #12]
    b49e:	2b00      	cmp	r3, #0
    b4a0:	d1fb      	bne.n	b49a <nrng_append_config+0x1a>
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
    b4a2:	68d3      	ldr	r3, [r2, #12]
    b4a4:	60cb      	str	r3, [r1, #12]
    b4a6:	60d1      	str	r1, [r2, #12]
}
    b4a8:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
    b4aa:	60cb      	str	r3, [r1, #12]
    b4ac:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
}
    b4b0:	e7fa      	b.n	b4a8 <nrng_append_config+0x28>

0000b4b2 <nrng_config>:
{
    b4b2:	b508      	push	{r3, lr}
    assert(config);
    b4b4:	b189      	cbz	r1, b4da <nrng_config+0x28>
    b4b6:	460b      	mov	r3, r1
    memcpy(&nrng->config, config, sizeof(struct uwb_rng_config));
    b4b8:	f8d1 c000 	ldr.w	ip, [r1]
    b4bc:	6849      	ldr	r1, [r1, #4]
    b4be:	689a      	ldr	r2, [r3, #8]
    b4c0:	68db      	ldr	r3, [r3, #12]
    b4c2:	f8c0 c0b0 	str.w	ip, [r0, #176]	; 0xb0
    b4c6:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
    b4ca:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
    b4ce:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    return nrng->dev_inst->status;
    b4d2:	6803      	ldr	r3, [r0, #0]
}
    b4d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b4d8:	bd08      	pop	{r3, pc}
    assert(config);
    b4da:	2300      	movs	r3, #0
    b4dc:	461a      	mov	r2, r3
    b4de:	4619      	mov	r1, r3
    b4e0:	4618      	mov	r0, r3
    b4e2:	f7fd fe6f 	bl	91c4 <__assert_func>
	...

0000b4e8 <nrng_init>:
{
    b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4ec:	b082      	sub	sp, #8
    assert(inst);
    b4ee:	2800      	cmp	r0, #0
    b4f0:	d04f      	beq.n	b592 <nrng_init+0xaa>
    b4f2:	460d      	mov	r5, r1
    b4f4:	4690      	mov	r8, r2
    b4f6:	461e      	mov	r6, r3
    b4f8:	4607      	mov	r7, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    b4fa:	210b      	movs	r1, #11
    b4fc:	f7fd fc3f 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (nrng == NULL) {
    b500:	4604      	mov	r4, r0
    b502:	2800      	cmp	r0, #0
    b504:	d04b      	beq.n	b59e <nrng_init+0xb6>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    b506:	2101      	movs	r1, #1
    b508:	f104 0064 	add.w	r0, r4, #100	; 0x64
    b50c:	f7fe fdb4 	bl	a078 <os_sem_init>
    assert(err == DPL_OK);
    b510:	2800      	cmp	r0, #0
    b512:	d15c      	bne.n	b5ce <nrng_init+0xe6>
    nrng->dev_inst = inst;
    b514:	6027      	str	r7, [r4, #0]
    nrng->nframes = nframes;
    b516:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
    nrng->nnodes = nnodes;
    b51a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b51e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    nrng->device_type = type;
    b522:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    nrng->idx = 0xFFFF;
    b526:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b52a:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
    nrng->resp_count = nrng->t1_final_flag = 0;
    b52e:	2300      	movs	r3, #0
    b530:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    b534:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    nrng->seq_num = 0;
    b538:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (config != NULL ){
    b53c:	b11d      	cbz	r5, b546 <nrng_init+0x5e>
        nrng_config(nrng, config);
    b53e:	4629      	mov	r1, r5
    b540:	4620      	mov	r0, r4
    b542:	f7ff ffb6 	bl	b4b2 <nrng_config>
    nrng->cbs = (struct uwb_mac_interface){
    b546:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    b54a:	223c      	movs	r2, #60	; 0x3c
    b54c:	2100      	movs	r1, #0
    b54e:	4628      	mov	r0, r5
    b550:	f005 f8a3 	bl	1069a <memset>
    b554:	260b      	movs	r6, #11
    b556:	f8a4 606e 	strh.w	r6, [r4, #110]	; 0x6e
    b55a:	6724      	str	r4, [r4, #112]	; 0x70
    b55c:	4b22      	ldr	r3, [pc, #136]	; (b5e8 <nrng_init+0x100>)
    b55e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    uwb_mac_append_interface(inst, &nrng->cbs);
    b562:	4629      	mov	r1, r5
    b564:	4638      	mov	r0, r7
    b566:	f7fd fbb5 	bl	8cd4 <uwb_mac_append_interface>
    int rc = stats_init(
    b56a:	1d25      	adds	r5, r4, #4
    b56c:	9600      	str	r6, [sp, #0]
    b56e:	4b1f      	ldr	r3, [pc, #124]	; (b5ec <nrng_init+0x104>)
    b570:	4632      	mov	r2, r6
    b572:	2104      	movs	r1, #4
    b574:	4628      	mov	r0, r5
    b576:	f00a fd01 	bl	15f7c <stats_init>
    b57a:	4606      	mov	r6, r0
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
    b57c:	4629      	mov	r1, r5
    b57e:	481c      	ldr	r0, [pc, #112]	; (b5f0 <nrng_init+0x108>)
    b580:	f00a fd80 	bl	16084 <stats_register>
    assert(rc == 0);
    b584:	ea56 0300 	orrs.w	r3, r6, r0
    b588:	d127      	bne.n	b5da <nrng_init+0xf2>
}
    b58a:	4620      	mov	r0, r4
    b58c:	b002      	add	sp, #8
    b58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(inst);
    b592:	2300      	movs	r3, #0
    b594:	461a      	mov	r2, r3
    b596:	4619      	mov	r1, r3
    b598:	4618      	mov	r0, r3
    b59a:	f7fd fe13 	bl	91c4 <__assert_func>
        nrng = (struct nrng_instance*) malloc(sizeof(struct nrng_instance) + nframes * sizeof(nrng_frame_t * ));
    b59e:	f106 0032 	add.w	r0, r6, #50	; 0x32
    b5a2:	0080      	lsls	r0, r0, #2
    b5a4:	f004 fffc 	bl	105a0 <malloc>
        assert(nrng);
    b5a8:	4604      	mov	r4, r0
    b5aa:	b150      	cbz	r0, b5c2 <nrng_init+0xda>
        memset(nrng, 0, sizeof(struct nrng_instance));
    b5ac:	22c8      	movs	r2, #200	; 0xc8
    b5ae:	2100      	movs	r1, #0
    b5b0:	f005 f873 	bl	1069a <memset>
        nrng->status.selfmalloc = 1;
    b5b4:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    b5b8:	f043 0301 	orr.w	r3, r3, #1
    b5bc:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
    b5c0:	e7a1      	b.n	b506 <nrng_init+0x1e>
        assert(nrng);
    b5c2:	2300      	movs	r3, #0
    b5c4:	461a      	mov	r2, r3
    b5c6:	4619      	mov	r1, r3
    b5c8:	4618      	mov	r0, r3
    b5ca:	f7fd fdfb 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    b5ce:	2300      	movs	r3, #0
    b5d0:	461a      	mov	r2, r3
    b5d2:	4619      	mov	r1, r3
    b5d4:	4618      	mov	r0, r3
    b5d6:	f7fd fdf5 	bl	91c4 <__assert_func>
    assert(rc == 0);
    b5da:	2300      	movs	r3, #0
    b5dc:	461a      	mov	r2, r3
    b5de:	4619      	mov	r1, r3
    b5e0:	4618      	mov	r0, r3
    b5e2:	f7fd fdef 	bl	91c4 <__assert_func>
    b5e6:	bf00      	nop
    b5e8:	0000b41d 	.word	0x0000b41d
    b5ec:	00025564 	.word	0x00025564
    b5f0:	000254ac 	.word	0x000254ac

0000b5f4 <nrng_pkg_init>:
{
    b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5f6:	b091      	sub	sp, #68	; 0x44
    printf("{\"utime\": %lu,\"msg\": \"nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
    b5f8:	f7fe f84d 	bl	9696 <os_cputime_get32>
    b5fc:	4601      	mov	r1, r0
    b5fe:	482f      	ldr	r0, [pc, #188]	; (b6bc <nrng_pkg_init+0xc8>)
    b600:	f005 fc64 	bl	10ecc <printf>
    udev = uwb_dev_idx_lookup(0);
    b604:	2000      	movs	r0, #0
    b606:	f7fd fb35 	bl	8c74 <uwb_dev_idx_lookup>
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
    b60a:	2310      	movs	r3, #16
    b60c:	9300      	str	r3, [sp, #0]
    b60e:	2320      	movs	r3, #32
    b610:	2201      	movs	r2, #1
    b612:	492b      	ldr	r1, [pc, #172]	; (b6c0 <nrng_pkg_init+0xcc>)
    b614:	f7ff ff68 	bl	b4e8 <nrng_init>
    assert(nframes <= nrng->nframes);
    b618:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    b61c:	2b1f      	cmp	r3, #31
    b61e:	d919      	bls.n	b654 <nrng_pkg_init+0x60>
    b620:	4607      	mov	r7, r0
    nrng_frame_t default_frame = {
    b622:	2234      	movs	r2, #52	; 0x34
    b624:	2100      	movs	r1, #0
    b626:	a803      	add	r0, sp, #12
    b628:	f005 f837 	bl	1069a <memset>
    b62c:	f648 0341 	movw	r3, #34881	; 0x8841
    b630:	f8ad 300c 	strh.w	r3, [sp, #12]
    b634:	f06f 0335 	mvn.w	r3, #53	; 0x35
    b638:	f88d 300f 	strb.w	r3, [sp, #15]
    b63c:	f06f 0321 	mvn.w	r3, #33	; 0x21
    b640:	f88d 3010 	strb.w	r3, [sp, #16]
    b644:	234a      	movs	r3, #74	; 0x4a
    b646:	f88d 3015 	strb.w	r3, [sp, #21]
    b64a:	2301      	movs	r3, #1
    b64c:	f88d 3016 	strb.w	r3, [sp, #22]
    for (uint16_t i = 0; i < nframes; i++){
    b650:	2500      	movs	r5, #0
    b652:	e021      	b.n	b698 <nrng_pkg_init+0xa4>
    assert(nframes <= nrng->nframes);
    b654:	2300      	movs	r3, #0
    b656:	461a      	mov	r2, r3
    b658:	4619      	mov	r1, r3
    b65a:	4618      	mov	r0, r3
    b65c:	f7fd fdb2 	bl	91c4 <__assert_func>
        assert(nrng->frames[i]);
    b660:	2300      	movs	r3, #0
    b662:	461a      	mov	r2, r3
    b664:	4619      	mov	r1, r3
    b666:	4618      	mov	r0, r3
    b668:	f7fd fdac 	bl	91c4 <__assert_func>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
    b66c:	46a6      	mov	lr, r4
    b66e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    b672:	f8cc 0000 	str.w	r0, [ip]
    b676:	f8cc 1004 	str.w	r1, [ip, #4]
    b67a:	f8cc 2008 	str.w	r2, [ip, #8]
    b67e:	f8cc 300c 	str.w	r3, [ip, #12]
    b682:	4674      	mov	r4, lr
    b684:	f10c 0c10 	add.w	ip, ip, #16
    b688:	45b6      	cmp	lr, r6
    b68a:	d1ef      	bne.n	b66c <nrng_pkg_init+0x78>
    b68c:	f8de 0000 	ldr.w	r0, [lr]
    b690:	f8cc 0000 	str.w	r0, [ip]
    for (uint16_t i = 0; i < nframes; i++){
    b694:	3501      	adds	r5, #1
    b696:	b2ad      	uxth	r5, r5
    b698:	2d1f      	cmp	r5, #31
    b69a:	d80c      	bhi.n	b6b6 <nrng_pkg_init+0xc2>
        nrng->frames[i] = (nrng_frame_t * ) malloc(sizeof(nrng_frame_t));
    b69c:	2034      	movs	r0, #52	; 0x34
    b69e:	f004 ff7f 	bl	105a0 <malloc>
    b6a2:	f105 0332 	add.w	r3, r5, #50	; 0x32
    b6a6:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
        assert(nrng->frames[i]);
    b6aa:	2800      	cmp	r0, #0
    b6ac:	d0d8      	beq.n	b660 <nrng_pkg_init+0x6c>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
    b6ae:	ac03      	add	r4, sp, #12
    b6b0:	4684      	mov	ip, r0
    b6b2:	ae0f      	add	r6, sp, #60	; 0x3c
    b6b4:	e7da      	b.n	b66c <nrng_pkg_init+0x78>
}
    b6b6:	b011      	add	sp, #68	; 0x44
    b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6ba:	bf00      	nop
    b6bc:	000254b4 	.word	0x000254b4
    b6c0:	200005a4 	.word	0x200005a4
    b6c4:	00000000 	.word	0x00000000

0000b6c8 <usecs_to_response>:
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
    b6c8:	b538      	push	{r3, r4, r5, lr}
    b6ca:	460c      	mov	r4, r1
    b6cc:	461d      	mov	r5, r3
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
    b6ce:	6890      	ldr	r0, [r2, #8]
    b6d0:	f017 ff2c 	bl	2352c <__aeabi_ui2d>
    b6d4:	a306      	add	r3, pc, #24	; (adr r3, b6f0 <usecs_to_response+0x28>)
    b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6da:	f017 ffa1 	bl	23620 <__aeabi_dmul>
    b6de:	f018 fa77 	bl	23bd0 <__aeabi_d2uiz>
    b6e2:	4428      	add	r0, r5
}
    b6e4:	fb04 f000 	mul.w	r0, r4, r0
    b6e8:	bd38      	pop	{r3, r4, r5, pc}
    b6ea:	bf00      	nop
    b6ec:	f3af 8000 	nop.w
    b6f0:	90690691 	.word	0x90690691
    b6f4:	3ff06906 	.word	0x3ff06906

0000b6f8 <nrng_request>:
{
    b6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6fc:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    struct uwb_dev * inst = nrng->dev_inst;
    b700:	6805      	ldr	r5, [r0, #0]
    assert(inst);
    b702:	2d00      	cmp	r5, #0
    b704:	f000 80af 	beq.w	b866 <nrng_request+0x16e>
    b708:	4604      	mov	r4, r0
    b70a:	468a      	mov	sl, r1
    b70c:	4691      	mov	r9, r2
    b70e:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b710:	f100 0b64 	add.w	fp, r0, #100	; 0x64
    b714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b718:	4658      	mov	r0, fp
    b71a:	f7fe fce7 	bl	a0ec <os_sem_pend>
    assert(err == DPL_OK);
    b71e:	2800      	cmp	r0, #0
    b720:	f040 80a7 	bne.w	b872 <nrng_request+0x17a>
    NRNG_STATS_INC(nrng_request);
    b724:	69a3      	ldr	r3, [r4, #24]
    b726:	3301      	adds	r3, #1
    b728:	61a3      	str	r3, [r4, #24]
    struct uwb_rng_config * config = nrng_get_config(nrng, code);
    b72a:	4649      	mov	r1, r9
    b72c:	4620      	mov	r0, r4
    b72e:	f7ff fe95 	bl	b45c <nrng_get_config>
    b732:	4680      	mov	r8, r0
    nrng->nnodes = NumberOfBits(slot_mask); // Number of nodes involved in request
    b734:	4630      	mov	r0, r6
    b736:	f004 fd0b 	bl	10150 <NumberOfBits>
    b73a:	b280      	uxth	r0, r0
    b73c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
    nrng->idx += nrng->nnodes;
    b740:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
    b744:	4418      	add	r0, r3
    b746:	b280      	uxth	r0, r0
    b748:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    nrng_request_frame_t * frame = (nrng_request_frame_t *) nrng->frames[nrng->idx%nrng->nframes];
    b74c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b750:	fbb0 f2f3 	udiv	r2, r0, r3
    b754:	fb03 0012 	mls	r0, r3, r2, r0
    b758:	b280      	uxth	r0, r0
    b75a:	3032      	adds	r0, #50	; 0x32
    b75c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
    frame->seq_num = ++nrng->seq_num;
    b760:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    b764:	3301      	adds	r3, #1
    b766:	b2db      	uxtb	r3, r3
    b768:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    b76c:	708b      	strb	r3, [r1, #2]
    frame->code = code;
    b76e:	f8a1 9009 	strh.w	r9, [r1, #9]
    frame->src_address = inst->uid;
    b772:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    b776:	f8a1 3007 	strh.w	r3, [r1, #7]
    frame->dst_address = dst_address;
    b77a:	f8a1 a005 	strh.w	sl, [r1, #5]
    frame->ptype = PTYPE_CELL;
    b77e:	7acb      	ldrb	r3, [r1, #11]
    b780:	f36f 0301 	bfc	r3, #0, #2
    b784:	72cb      	strb	r3, [r1, #11]
    frame->cell_id = nrng->cell_id = cell_id;
    b786:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    b78a:	f04f 0900 	mov.w	r9, #0
    b78e:	73cf      	strb	r7, [r1, #15]
    b790:	f3c7 2705 	ubfx	r7, r7, #8, #6
    b794:	7c0b      	ldrb	r3, [r1, #16]
    b796:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b79a:	431f      	orrs	r7, r3
    b79c:	740f      	strb	r7, [r1, #16]
    frame->slot_mask = nrng->slot_mask = slot_mask;
    b79e:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
    b7a2:	f006 0203 	and.w	r2, r6, #3
    b7a6:	7c0b      	ldrb	r3, [r1, #16]
    b7a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7ac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    b7b0:	740b      	strb	r3, [r1, #16]
    b7b2:	f3c6 0387 	ubfx	r3, r6, #2, #8
    b7b6:	744b      	strb	r3, [r1, #17]
    b7b8:	7c8b      	ldrb	r3, [r1, #18]
    b7ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b7be:	ea43 2696 	orr.w	r6, r3, r6, lsr #10
    b7c2:	748e      	strb	r6, [r1, #18]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b7c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7c6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    b7c8:	2313      	movs	r3, #19
    b7ca:	464a      	mov	r2, r9
    b7cc:	4628      	mov	r0, r5
    b7ce:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b7d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7d2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    b7d4:	464b      	mov	r3, r9
    b7d6:	464a      	mov	r2, r9
    b7d8:	2113      	movs	r1, #19
    b7da:	4628      	mov	r0, r5
    b7dc:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    b7de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b7e2:	2101      	movs	r1, #1
    b7e4:	4628      	mov	r0, r5
    b7e6:	4798      	blx	r3
    uint16_t timeout = config->tx_holdoff_delay         // Remote side turn arround time.
    b7e8:	f8d8 6004 	ldr.w	r6, [r8, #4]
                        + usecs_to_response(inst,       // Remaining timeout
    b7ec:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b7f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b7f4:	2114      	movs	r1, #20
    b7f6:	4628      	mov	r0, r5
    b7f8:	4798      	blx	r3
    b7fa:	4603      	mov	r3, r0
    b7fc:	4642      	mov	r2, r8
    b7fe:	4639      	mov	r1, r7
    b800:	4628      	mov	r0, r5
    b802:	f7ff ff61 	bl	b6c8 <usecs_to_response>
    b806:	4406      	add	r6, r0
                        ) + config->rx_timeout_delay;     // TOF allowance.
    b808:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    uint16_t timeout = config->tx_holdoff_delay         // Remote side turn arround time.
    b80c:	fa11 f186 	uxtah	r1, r1, r6
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b810:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b814:	b289      	uxth	r1, r1
    b816:	4628      	mov	r0, r5
    b818:	4798      	blx	r3
    if (nrng->control.delay_start_enabled)
    b81a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b81e:	f013 0f01 	tst.w	r3, #1
    b822:	d005      	beq.n	b830 <nrng_request+0x138>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b824:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b826:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b828:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    b82c:	4628      	mov	r0, r5
    b82e:	4788      	blx	r1
    if(inst->config.dblbuffon_enabled)
    b830:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
    b834:	f013 0f10 	tst.w	r3, #16
    b838:	d004      	beq.n	b844 <nrng_request+0x14c>
        assert(inst->config.rxauto_enable == 0);
    b83a:	f895 352d 	ldrb.w	r3, [r5, #1325]	; 0x52d
    b83e:	f013 0f01 	tst.w	r3, #1
    b842:	d11c      	bne.n	b87e <nrng_request+0x186>
    return (dev->uw_funcs->uf_start_tx(dev));
    b844:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b848:	4628      	mov	r0, r5
    b84a:	4798      	blx	r3
    if (uwb_start_tx(inst).start_tx_error){
    b84c:	f010 0f04 	tst.w	r0, #4
    b850:	d026      	beq.n	b8a0 <nrng_request+0x1a8>
        NRNG_STATS_INC(start_tx_error);
    b852:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b854:	3301      	adds	r3, #1
    b856:	63e3      	str	r3, [r4, #60]	; 0x3c
    b858:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        if (dpl_sem_get_count(&nrng->sem) == 0) {
    b85c:	b1ab      	cbz	r3, b88a <nrng_request+0x192>
}
    b85e:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    b862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst);
    b866:	2300      	movs	r3, #0
    b868:	461a      	mov	r2, r3
    b86a:	4619      	mov	r1, r3
    b86c:	4618      	mov	r0, r3
    b86e:	f7fd fca9 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    b872:	2300      	movs	r3, #0
    b874:	461a      	mov	r2, r3
    b876:	4619      	mov	r1, r3
    b878:	4618      	mov	r0, r3
    b87a:	f7fd fca3 	bl	91c4 <__assert_func>
        assert(inst->config.rxauto_enable == 0);
    b87e:	2300      	movs	r3, #0
    b880:	461a      	mov	r2, r3
    b882:	4619      	mov	r1, r3
    b884:	4618      	mov	r0, r3
    b886:	f7fd fc9d 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b88a:	4658      	mov	r0, fp
    b88c:	f7fe fbfc 	bl	a088 <os_sem_release>
            assert(err == DPL_OK);
    b890:	2800      	cmp	r0, #0
    b892:	d0e4      	beq.n	b85e <nrng_request+0x166>
    b894:	2300      	movs	r3, #0
    b896:	461a      	mov	r2, r3
    b898:	4619      	mov	r1, r3
    b89a:	4618      	mov	r0, r3
    b89c:	f7fd fc92 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b8a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b8a4:	4658      	mov	r0, fp
    b8a6:	f7fe fc21 	bl	a0ec <os_sem_pend>
        assert(err == DPL_OK);
    b8aa:	b950      	cbnz	r0, b8c2 <nrng_request+0x1ca>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b8ac:	4658      	mov	r0, fp
    b8ae:	f7fe fbeb 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    b8b2:	2800      	cmp	r0, #0
    b8b4:	d0d3      	beq.n	b85e <nrng_request+0x166>
    b8b6:	2300      	movs	r3, #0
    b8b8:	461a      	mov	r2, r3
    b8ba:	4619      	mov	r1, r3
    b8bc:	4618      	mov	r0, r3
    b8be:	f7fd fc81 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    b8c2:	2300      	movs	r3, #0
    b8c4:	461a      	mov	r2, r3
    b8c6:	4619      	mov	r1, r3
    b8c8:	4618      	mov	r0, r3
    b8ca:	f7fd fc7b 	bl	91c4 <__assert_func>

0000b8ce <nrng_request_delay_start>:
{
    b8ce:	b5d0      	push	{r4, r6, r7, lr}
    b8d0:	b082      	sub	sp, #8
    b8d2:	4604      	mov	r4, r0
    b8d4:	4616      	mov	r6, r2
    b8d6:	461f      	mov	r7, r3
    nrng->control.delay_start_enabled = 1;
    b8d8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    b8dc:	f043 0301 	orr.w	r3, r3, #1
    b8e0:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
    nrng->delay = delay;
    b8e4:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    nrng_request(nrng, dst_address, code, slot_mask, cell_id);
    b8e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b8ec:	9300      	str	r3, [sp, #0]
    b8ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b8f2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    b8f6:	f7ff feff 	bl	b6f8 <nrng_request>
    nrng->control.delay_start_enabled = 0;
    b8fa:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b8fe:	f36f 0300 	bfc	r3, #0, #1
    b902:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
    return nrng->dev_inst->status;
    b906:	6823      	ldr	r3, [r4, #0]
}
    b908:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b90c:	b002      	add	sp, #8
    b90e:	bdd0      	pop	{r4, r6, r7, pc}

0000b910 <nrng_listen>:
{
    b910:	b570      	push	{r4, r5, r6, lr}
    b912:	4604      	mov	r4, r0
    b914:	460e      	mov	r6, r1
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b916:	f100 0564 	add.w	r5, r0, #100	; 0x64
    b91a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b91e:	4628      	mov	r0, r5
    b920:	f7fe fbe4 	bl	a0ec <os_sem_pend>
    assert(err == DPL_OK);
    b924:	b970      	cbnz	r0, b944 <nrng_listen+0x34>
    NRNG_STATS_INC(nrng_listen);
    b926:	69e3      	ldr	r3, [r4, #28]
    b928:	3301      	adds	r3, #1
    b92a:	61e3      	str	r3, [r4, #28]
    if(uwb_start_rx(nrng->dev_inst).start_rx_error){
    b92c:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_rx(dev));
    b92e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b932:	4798      	blx	r3
    b934:	f010 0f08 	tst.w	r0, #8
    b938:	d10a      	bne.n	b950 <nrng_listen+0x40>
    if (mode == UWB_BLOCKING){
    b93a:	b1be      	cbz	r6, b96c <nrng_listen+0x5c>
   return nrng->dev_inst->status;
    b93c:	6823      	ldr	r3, [r4, #0]
}
    b93e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b942:	bd70      	pop	{r4, r5, r6, pc}
    assert(err == DPL_OK);
    b944:	2300      	movs	r3, #0
    b946:	461a      	mov	r2, r3
    b948:	4619      	mov	r1, r3
    b94a:	4618      	mov	r0, r3
    b94c:	f7fd fc3a 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b950:	4628      	mov	r0, r5
    b952:	f7fe fb99 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    b956:	b918      	cbnz	r0, b960 <nrng_listen+0x50>
        NRNG_STATS_INC(start_rx_error);
    b958:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b95a:	3301      	adds	r3, #1
    b95c:	6323      	str	r3, [r4, #48]	; 0x30
    b95e:	e7ec      	b.n	b93a <nrng_listen+0x2a>
        assert(err == DPL_OK);
    b960:	2300      	movs	r3, #0
    b962:	461a      	mov	r2, r3
    b964:	4619      	mov	r1, r3
    b966:	4618      	mov	r0, r3
    b968:	f7fd fc2c 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b96c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b970:	4628      	mov	r0, r5
    b972:	f7fe fbbb 	bl	a0ec <os_sem_pend>
        assert(err == DPL_OK);
    b976:	b950      	cbnz	r0, b98e <nrng_listen+0x7e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b978:	4628      	mov	r0, r5
    b97a:	f7fe fb85 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    b97e:	2800      	cmp	r0, #0
    b980:	d0dc      	beq.n	b93c <nrng_listen+0x2c>
    b982:	2300      	movs	r3, #0
    b984:	461a      	mov	r2, r3
    b986:	4619      	mov	r1, r3
    b988:	4618      	mov	r0, r3
    b98a:	f7fd fc1b 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    b98e:	2300      	movs	r3, #0
    b990:	461a      	mov	r2, r3
    b992:	4619      	mov	r1, r3
    b994:	4618      	mov	r0, r3
    b996:	f7fd fc15 	bl	91c4 <__assert_func>
	...

0000b99c <nrng_twr_to_tof_frames>:
{
    b99c:	b570      	push	{r4, r5, r6, lr}
    b99e:	ed2d 8b02 	vpush	{d8}
    switch(final_frame->code){
    b9a2:	f8b2 3009 	ldrh.w	r3, [r2, #9]
    b9a6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    b9aa:	d939      	bls.n	ba20 <nrng_twr_to_tof_frames+0x84>
    b9ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
    b9b0:	b29b      	uxth	r3, r3
    b9b2:	2b09      	cmp	r3, #9
    b9b4:	d861      	bhi.n	ba7a <nrng_twr_to_tof_frames+0xde>
            assert(first_frame != NULL);
    b9b6:	b3d9      	cbz	r1, ba30 <nrng_twr_to_tof_frames+0x94>
            assert(final_frame != NULL);
    b9b8:	2a00      	cmp	r2, #0
    b9ba:	d03f      	beq.n	ba3c <nrng_twr_to_tof_frames+0xa0>
            T1R = (first_frame->response_timestamp - first_frame->request_timestamp);
    b9bc:	6988      	ldr	r0, [r1, #24]
    b9be:	694b      	ldr	r3, [r1, #20]
    b9c0:	1ac3      	subs	r3, r0, r3
    b9c2:	2500      	movs	r5, #0
            T1r = (first_frame->transmission_timestamp  - first_frame->reception_timestamp);
    b9c4:	f8d1 e00f 	ldr.w	lr, [r1, #15]
    b9c8:	f8d1 100b 	ldr.w	r1, [r1, #11]
    b9cc:	ebae 0e01 	sub.w	lr, lr, r1
            T2R = (final_frame->response_timestamp - final_frame->request_timestamp);
    b9d0:	f8d2 c018 	ldr.w	ip, [r2, #24]
    b9d4:	6951      	ldr	r1, [r2, #20]
    b9d6:	ebac 0c01 	sub.w	ip, ip, r1
            T2r = (final_frame->transmission_timestamp - final_frame->reception_timestamp);
    b9da:	f8d2 400f 	ldr.w	r4, [r2, #15]
    b9de:	f8d2 200b 	ldr.w	r2, [r2, #11]
    b9e2:	1aa4      	subs	r4, r4, r2
            nom = T1R * T2R  - T1r * T2r;
    b9e4:	fba3 210c 	umull	r2, r1, r3, ip
    b9e8:	fbae 0604 	umull	r0, r6, lr, r4
    b9ec:	1a10      	subs	r0, r2, r0
    b9ee:	eb61 0106 	sbc.w	r1, r1, r6
            denom = T1R + T2R  + T1r + T2r;
    b9f2:	eb13 030c 	adds.w	r3, r3, ip
    b9f6:	416d      	adcs	r5, r5
    b9f8:	eb13 030e 	adds.w	r3, r3, lr
    b9fc:	f145 0500 	adc.w	r5, r5, #0
    ba00:	191c      	adds	r4, r3, r4
    ba02:	f145 0500 	adc.w	r5, r5, #0
            ToF = (float) (nom) / denom;
    ba06:	f018 fa23 	bl	23e50 <__aeabi_l2f>
    ba0a:	ee08 0a10 	vmov	s16, r0
    ba0e:	4620      	mov	r0, r4
    ba10:	4629      	mov	r1, r5
    ba12:	f018 fa1d 	bl	23e50 <__aeabi_l2f>
    ba16:	ee07 0a90 	vmov	s15, r0
    ba1a:	ee88 0a27 	vdiv.f32	s0, s16, s15
            break;
    ba1e:	e004      	b.n	ba2a <nrng_twr_to_tof_frames+0x8e>
    switch(final_frame->code){
    ba20:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    ba24:	d210      	bcs.n	ba48 <nrng_twr_to_tof_frames+0xac>
    ba26:	ed9f 0a16 	vldr	s0, [pc, #88]	; ba80 <nrng_twr_to_tof_frames+0xe4>
}
    ba2a:	ecbd 8b02 	vpop	{d8}
    ba2e:	bd70      	pop	{r4, r5, r6, pc}
            assert(first_frame != NULL);
    ba30:	2300      	movs	r3, #0
    ba32:	461a      	mov	r2, r3
    ba34:	4619      	mov	r1, r3
    ba36:	4618      	mov	r0, r3
    ba38:	f7fd fbc4 	bl	91c4 <__assert_func>
            assert(final_frame != NULL);
    ba3c:	2300      	movs	r3, #0
    ba3e:	461a      	mov	r2, r3
    ba40:	4619      	mov	r1, r3
    ba42:	4618      	mov	r0, r3
    ba44:	f7fd fbbe 	bl	91c4 <__assert_func>
            assert(first_frame != NULL);
    ba48:	b189      	cbz	r1, ba6e <nrng_twr_to_tof_frames+0xd2>
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    ba4a:	698a      	ldr	r2, [r1, #24]
    ba4c:	694b      	ldr	r3, [r1, #20]
    ba4e:	1ad2      	subs	r2, r2, r3
                    -  (first_frame->transmission_timestamp - first_frame->reception_timestamp))/2.0f;
    ba50:	f8d1 300b 	ldr.w	r3, [r1, #11]
    ba54:	f8d1 100f 	ldr.w	r1, [r1, #15]
    ba58:	1a5b      	subs	r3, r3, r1
    ba5a:	4413      	add	r3, r2
    ba5c:	ee00 3a10 	vmov	s0, r3
    ba60:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    ba64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    ba68:	ee20 0a27 	vmul.f32	s0, s0, s15
            break;
    ba6c:	e7dd      	b.n	ba2a <nrng_twr_to_tof_frames+0x8e>
            assert(first_frame != NULL);
    ba6e:	2300      	movs	r3, #0
    ba70:	461a      	mov	r2, r3
    ba72:	4619      	mov	r1, r3
    ba74:	4618      	mov	r0, r3
    ba76:	f7fd fba5 	bl	91c4 <__assert_func>
    switch(final_frame->code){
    ba7a:	ed9f 0a01 	vldr	s0, [pc, #4]	; ba80 <nrng_twr_to_tof_frames+0xe4>
    return ToF;
    ba7e:	e7d4      	b.n	ba2a <nrng_twr_to_tof_frames+0x8e>
    ba80:	00000000 	.word	0x00000000

0000ba84 <nrng_get_ranges>:
{
    ba84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba88:	4605      	mov	r5, r0
    ba8a:	4689      	mov	r9, r1
    ba8c:	4616      	mov	r6, r2
    ba8e:	4698      	mov	r8, r3
    for (uint16_t i=0; i < nranges; i++){
    ba90:	2400      	movs	r4, #0
    uint32_t mask = 0;
    ba92:	4627      	mov	r7, r4
    for (uint16_t i=0; i < nranges; i++){
    ba94:	e001      	b.n	ba9a <nrng_get_ranges+0x16>
    ba96:	3401      	adds	r4, #1
    ba98:	b2a4      	uxth	r4, r4
    ba9a:	42b4      	cmp	r4, r6
    ba9c:	d224      	bcs.n	bae8 <nrng_get_ranges+0x64>
        if (nrng->slot_mask & 1UL << i){
    ba9e:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    baa2:	fa20 f304 	lsr.w	r3, r0, r4
    baa6:	f013 0f01 	tst.w	r3, #1
    baaa:	d0f4      	beq.n	ba96 <nrng_get_ranges+0x12>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    baac:	2201      	movs	r2, #1
    baae:	fa02 fa04 	lsl.w	sl, r2, r4
    bab2:	4651      	mov	r1, sl
    bab4:	f004 fb66 	bl	10184 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bab8:	fa18 f080 	uxtah	r0, r8, r0
    babc:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bac0:	fb90 f2f3 	sdiv	r2, r0, r3
    bac4:	fb03 0012 	mls	r0, r3, r2, r0
    bac8:	3032      	adds	r0, #50	; 0x32
    baca:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == nrng->seq_num){
    bace:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    bad2:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bad6:	d1de      	bne.n	ba96 <nrng_get_ranges+0x12>
    bad8:	789a      	ldrb	r2, [r3, #2]
    bada:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    bade:	429a      	cmp	r2, r3
    bae0:	d1d9      	bne.n	ba96 <nrng_get_ranges+0x12>
                mask |= 1UL << i;
    bae2:	ea47 070a 	orr.w	r7, r7, sl
    bae6:	e7d6      	b.n	ba96 <nrng_get_ranges+0x12>
    for (uint16_t i=0; i < nranges; i++){
    bae8:	2400      	movs	r4, #0
    uint16_t j = 0;
    baea:	46a2      	mov	sl, r4
    baec:	e001      	b.n	baf2 <nrng_get_ranges+0x6e>
    for (uint16_t i=0; i < nranges; i++){
    baee:	3401      	adds	r4, #1
    baf0:	b2a4      	uxth	r4, r4
    baf2:	42b4      	cmp	r4, r6
    baf4:	d230      	bcs.n	bb58 <nrng_get_ranges+0xd4>
        if (mask & 1UL << i){
    baf6:	fa27 f304 	lsr.w	r3, r7, r4
    bafa:	f013 0f01 	tst.w	r3, #1
    bafe:	d0f6      	beq.n	baee <nrng_get_ranges+0x6a>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bb00:	2201      	movs	r2, #1
    bb02:	fa02 f104 	lsl.w	r1, r2, r4
    bb06:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bb0a:	f004 fb3b 	bl	10184 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bb0e:	fa18 f080 	uxtah	r0, r8, r0
    bb12:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bb16:	fb90 f2f3 	sdiv	r2, r0, r3
    bb1a:	fb03 0012 	mls	r0, r3, r2, r0
    bb1e:	3032      	adds	r0, #50	; 0x32
    bb20:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
            ranges[j++] = uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    bb24:	460a      	mov	r2, r1
    bb26:	6828      	ldr	r0, [r5, #0]
    bb28:	f7ff ff38 	bl	b99c <nrng_twr_to_tof_frames>
    bb2c:	ee10 0a10 	vmov	r0, s0
    bb30:	f017 fd1e 	bl	23570 <__aeabi_f2d>
    bb34:	ec41 0b10 	vmov	d0, r0, r1
    bb38:	f001 fc56 	bl	d3e8 <uwb_rng_tof_to_meters>
    bb3c:	ec51 0b10 	vmov	r0, r1, d0
    bb40:	f10a 0b01 	add.w	fp, sl, #1
    bb44:	fa1f fb8b 	uxth.w	fp, fp
    bb48:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
    bb4c:	f018 f860 	bl	23c10 <__aeabi_d2f>
    bb50:	f8ca 0000 	str.w	r0, [sl]
    bb54:	46da      	mov	sl, fp
    bb56:	e7ca      	b.n	baee <nrng_get_ranges+0x6a>
}
    bb58:	4638      	mov	r0, r7
    bb5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bb5e <nrng_get_uids>:
{
    bb5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb62:	4605      	mov	r5, r0
    bb64:	4689      	mov	r9, r1
    bb66:	4616      	mov	r6, r2
    bb68:	4698      	mov	r8, r3
    for (uint16_t i=0; i < nranges; i++){
    bb6a:	2400      	movs	r4, #0
    uint32_t mask = 0;
    bb6c:	4627      	mov	r7, r4
    for (uint16_t i=0; i < nranges; i++){
    bb6e:	e001      	b.n	bb74 <nrng_get_uids+0x16>
    bb70:	3401      	adds	r4, #1
    bb72:	b2a4      	uxth	r4, r4
    bb74:	42b4      	cmp	r4, r6
    bb76:	d224      	bcs.n	bbc2 <nrng_get_uids+0x64>
        if (nrng->slot_mask & 1UL << i){
    bb78:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bb7c:	fa20 f304 	lsr.w	r3, r0, r4
    bb80:	f013 0f01 	tst.w	r3, #1
    bb84:	d0f4      	beq.n	bb70 <nrng_get_uids+0x12>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bb86:	2201      	movs	r2, #1
    bb88:	fa02 fa04 	lsl.w	sl, r2, r4
    bb8c:	4651      	mov	r1, sl
    bb8e:	f004 faf9 	bl	10184 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bb92:	fa18 f080 	uxtah	r0, r8, r0
    bb96:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bb9a:	fb90 f2f3 	sdiv	r2, r0, r3
    bb9e:	fb03 0012 	mls	r0, r3, r2, r0
    bba2:	3032      	adds	r0, #50	; 0x32
    bba4:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == nrng->seq_num){
    bba8:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    bbac:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bbb0:	d1de      	bne.n	bb70 <nrng_get_uids+0x12>
    bbb2:	789a      	ldrb	r2, [r3, #2]
    bbb4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    bbb8:	429a      	cmp	r2, r3
    bbba:	d1d9      	bne.n	bb70 <nrng_get_uids+0x12>
                mask |= 1UL << i;
    bbbc:	ea47 070a 	orr.w	r7, r7, sl
    bbc0:	e7d6      	b.n	bb70 <nrng_get_uids+0x12>
    for (uint16_t i=0; i < nranges; i++){
    bbc2:	2400      	movs	r4, #0
    uint16_t j = 0;
    bbc4:	46a2      	mov	sl, r4
    bbc6:	e001      	b.n	bbcc <nrng_get_uids+0x6e>
    for (uint16_t i=0; i < nranges; i++){
    bbc8:	3401      	adds	r4, #1
    bbca:	b2a4      	uxth	r4, r4
    bbcc:	42b4      	cmp	r4, r6
    bbce:	d22e      	bcs.n	bc2e <nrng_get_uids+0xd0>
        if (mask & 1UL << i){
    bbd0:	fa27 f304 	lsr.w	r3, r7, r4
    bbd4:	f013 0f01 	tst.w	r3, #1
    bbd8:	d0f6      	beq.n	bbc8 <nrng_get_uids+0x6a>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bbda:	2201      	movs	r2, #1
    bbdc:	fa02 f104 	lsl.w	r1, r2, r4
    bbe0:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bbe4:	f004 face 	bl	10184 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bbe8:	fa18 f080 	uxtah	r0, r8, r0
    bbec:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bbf0:	fb90 f2f3 	sdiv	r2, r0, r3
    bbf4:	fb03 0012 	mls	r0, r3, r2, r0
    bbf8:	3032      	adds	r0, #50	; 0x32
    bbfa:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
            uids[j++] = uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    bbfe:	460a      	mov	r2, r1
    bc00:	6828      	ldr	r0, [r5, #0]
    bc02:	f7ff fecb 	bl	b99c <nrng_twr_to_tof_frames>
    bc06:	ee10 0a10 	vmov	r0, s0
    bc0a:	f017 fcb1 	bl	23570 <__aeabi_f2d>
    bc0e:	ec41 0b10 	vmov	d0, r0, r1
    bc12:	f001 fbe9 	bl	d3e8 <uwb_rng_tof_to_meters>
    bc16:	ec51 0b10 	vmov	r0, r1, d0
    bc1a:	f10a 0b01 	add.w	fp, sl, #1
    bc1e:	fa1f fb8b 	uxth.w	fp, fp
    bc22:	f017 ffd5 	bl	23bd0 <__aeabi_d2uiz>
    bc26:	f829 001a 	strh.w	r0, [r9, sl, lsl #1]
    bc2a:	46da      	mov	sl, fp
    bc2c:	e7cc      	b.n	bbc8 <nrng_get_uids+0x6a>
}
    bc2e:	4638      	mov	r0, r7
    bc30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc34 <nrng_encode>:
#include <nrng/nrng_json.h>

#if MYNEWT_VAL(NRNG_VERBOSE)

void
nrng_encode(struct nrng_instance * nrng, uint8_t seq_num, uint16_t base){
    bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc38:	f5ad 7d65 	sub.w	sp, sp, #916	; 0x394
    bc3c:	4605      	mov	r5, r0
    bc3e:	4689      	mov	r9, r1
    bc40:	4617      	mov	r7, r2

    uint32_t valid_mask = 0;
    nrng_frame_t * frame = nrng->frames[(base)%nrng->nframes];
    bc42:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    bc46:	fbb7 f3f2 	udiv	r3, r7, r2
    bc4a:	fb02 7313 	mls	r3, r2, r3, r7
    bc4e:	b29b      	uxth	r3, r3
    bc50:	3332      	adds	r3, #50	; 0x32
    bc52:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

    nrng_json_t json = {
    bc56:	f44f 7264 	mov.w	r2, #912	; 0x390
    bc5a:	2100      	movs	r1, #0
    bc5c:	4668      	mov	r0, sp
    bc5e:	f004 fd1c 	bl	1069a <memset>
        .utime =  os_cputime_ticks_to_usecs(os_cputime_get32()),
    bc62:	f7fd fd18 	bl	9696 <os_cputime_get32>
    bc66:	2600      	movs	r6, #0
    nrng_json_t json = {
    bc68:	901a      	str	r0, [sp, #104]	; 0x68
    bc6a:	961b      	str	r6, [sp, #108]	; 0x6c
    bc6c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    bc70:	961d      	str	r6, [sp, #116]	; 0x74
        .seq = seq_num,
        .uid = frame->src_address
    bc72:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    nrng_json_t json = {
    bc76:	931e      	str	r3, [sp, #120]	; 0x78
    bc78:	961f      	str	r6, [sp, #124]	; 0x7c
    };
    // Workout which slots responded with a valid frames
    for (uint16_t i=0; i < 16; i++){
    bc7a:	4634      	mov	r4, r6
    bc7c:	e001      	b.n	bc82 <nrng_encode+0x4e>
    bc7e:	3401      	adds	r4, #1
    bc80:	b2a4      	uxth	r4, r4
    bc82:	2c0f      	cmp	r4, #15
    bc84:	d823      	bhi.n	bcce <nrng_encode+0x9a>
        if (nrng->slot_mask & 1UL << i){
    bc86:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bc8a:	fa20 f304 	lsr.w	r3, r0, r4
    bc8e:	f013 0f01 	tst.w	r3, #1
    bc92:	d0f4      	beq.n	bc7e <nrng_encode+0x4a>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bc94:	2201      	movs	r2, #1
    bc96:	fa02 f804 	lsl.w	r8, r2, r4
    bc9a:	4641      	mov	r1, r8
    bc9c:	f004 fa72 	bl	10184 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bca0:	fa17 f080 	uxtah	r0, r7, r0
    bca4:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bca8:	fb90 f2f3 	sdiv	r2, r0, r3
    bcac:	fb03 0012 	mls	r0, r3, r2, r0
    bcb0:	f100 0332 	add.w	r3, r0, #50	; 0x32
    bcb4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == seq_num){
    bcb8:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    bcbc:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bcc0:	d1dd      	bne.n	bc7e <nrng_encode+0x4a>
    bcc2:	789b      	ldrb	r3, [r3, #2]
    bcc4:	454b      	cmp	r3, r9
    bcc6:	d1da      	bne.n	bc7e <nrng_encode+0x4a>
                valid_mask |= 1UL << i;
    bcc8:	ea46 0608 	orr.w	r6, r6, r8
    bccc:	e7d7      	b.n	bc7e <nrng_encode+0x4a>
            }
        }
    }
    // tdoa results are reference to slot 0, so reject it slot 0 did not respond. An alternative approach is needed @Niklas
    if (valid_mask == 0 || (valid_mask & 1) == 0)
    bcce:	2e00      	cmp	r6, #0
    bcd0:	d056      	beq.n	bd80 <nrng_encode+0x14c>
    bcd2:	f016 0f01 	tst.w	r6, #1
    bcd6:	d053      	beq.n	bd80 <nrng_encode+0x14c>
       return;

    uint16_t j=0;
    for (uint16_t i=0; i < 16; i++){
    bcd8:	2400      	movs	r4, #0
    uint16_t j=0;
    bcda:	46a0      	mov	r8, r4
    bcdc:	e001      	b.n	bce2 <nrng_encode+0xae>
    for (uint16_t i=0; i < 16; i++){
    bcde:	3401      	adds	r4, #1
    bce0:	b2a4      	uxth	r4, r4
    bce2:	2c0f      	cmp	r4, #15
    bce4:	d842      	bhi.n	bd6c <nrng_encode+0x138>
        if (valid_mask & 1UL << i){
    bce6:	fa26 f304 	lsr.w	r3, r6, r4
    bcea:	f013 0f01 	tst.w	r3, #1
    bcee:	d0f6      	beq.n	bcde <nrng_encode+0xaa>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bcf0:	2201      	movs	r2, #1
    bcf2:	fa02 f104 	lsl.w	r1, r2, r4
    bcf6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bcfa:	f004 fa43 	bl	10184 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bcfe:	fa17 f080 	uxtah	r0, r7, r0
    bd02:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bd06:	fb90 f2f3 	sdiv	r2, r0, r3
    bd0a:	fb03 0012 	mls	r0, r3, r2, r0
    bd0e:	3032      	adds	r0, #50	; 0x32
    bd10:	f855 a020 	ldr.w	sl, [r5, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == seq_num){
    bd14:	f8ba 3009 	ldrh.w	r3, [sl, #9]
    bd18:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    bd1c:	d1df      	bne.n	bcde <nrng_encode+0xaa>
    bd1e:	f89a 3002 	ldrb.w	r3, [sl, #2]
    bd22:	454b      	cmp	r3, r9
    bd24:	d1db      	bne.n	bcde <nrng_encode+0xaa>
                json.rng[j] = (dpl_float64_t) uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    bd26:	4652      	mov	r2, sl
    bd28:	4651      	mov	r1, sl
    bd2a:	6828      	ldr	r0, [r5, #0]
    bd2c:	f7ff fe36 	bl	b99c <nrng_twr_to_tof_frames>
    bd30:	ee10 0a10 	vmov	r0, s0
    bd34:	46c3      	mov	fp, r8
    bd36:	f017 fc1b 	bl	23570 <__aeabi_f2d>
    bd3a:	ec41 0b10 	vmov	d0, r0, r1
    bd3e:	f001 fb53 	bl	d3e8 <uwb_rng_tof_to_meters>
    bd42:	f108 0320 	add.w	r3, r8, #32
    bd46:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
    bd4a:	ed83 0b00 	vstr	d0, [r3]
                json.ouid[j++] = frame->dst_address;
    bd4e:	f108 0801 	add.w	r8, r8, #1
    bd52:	fa1f f888 	uxth.w	r8, r8
    bd56:	f8ba 1005 	ldrh.w	r1, [sl, #5]
    bd5a:	f10b 0310 	add.w	r3, fp, #16
    bd5e:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
    bd62:	f84d 1033 	str.w	r1, [sp, r3, lsl #3]
    bd66:	2300      	movs	r3, #0
    bd68:	6053      	str	r3, [r2, #4]
    bd6a:	e7b8      	b.n	bcde <nrng_encode+0xaa>
            }
        }
    }
    json.nsize = j;
    bd6c:	f8cd 8180 	str.w	r8, [sp, #384]	; 0x180
    bd70:	2300      	movs	r3, #0
    bd72:	9361      	str	r3, [sp, #388]	; 0x184

    nrng_json_write(&json);
    bd74:	4668      	mov	r0, sp
    bd76:	f000 f82d 	bl	bdd4 <nrng_json_write>
    printf("%s\n",json.iobuf);
    bd7a:	a862      	add	r0, sp, #392	; 0x188
    bd7c:	f004 fb74 	bl	10468 <puts>
}
    bd80:	f50d 7d65 	add.w	sp, sp, #916	; 0x394
    bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bd88 <nrng_write_line>:

static int nrng_write_line(void *buf, char* data, int len);

static int
nrng_write_line(void *buf, char* data, int len)
{
    bd88:	b510      	push	{r4, lr}
    bd8a:	4686      	mov	lr, r0
    nrng_json_t * json = buf;
    // Fix for serial output overflowing and printing dogshit nonsense
    len =   min(len, sizeof(json->iobuf) - json->idx);
    bd8c:	f8b0 3388 	ldrh.w	r3, [r0, #904]	; 0x388
    bd90:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
    bd94:	4290      	cmp	r0, r2
    bd96:	bf28      	it	cs
    bd98:	4610      	movcs	r0, r2

    for (uint16_t i=0; i < len; i++){
    bd9a:	2300      	movs	r3, #0
    bd9c:	e001      	b.n	bda2 <nrng_write_line+0x1a>
    bd9e:	3301      	adds	r3, #1
    bda0:	b29b      	uxth	r3, r3
    bda2:	4283      	cmp	r3, r0
    bda4:	da0c      	bge.n	bdc0 <nrng_write_line+0x38>
        json->iobuf[json->idx++] = data[i];
    bda6:	f8be c388 	ldrh.w	ip, [lr, #904]	; 0x388
    bdaa:	f10c 0401 	add.w	r4, ip, #1
    bdae:	f8ae 4388 	strh.w	r4, [lr, #904]	; 0x388
    bdb2:	5ccc      	ldrb	r4, [r1, r3]
    bdb4:	44f4      	add	ip, lr
    bdb6:	f88c 4188 	strb.w	r4, [ip, #392]	; 0x188
        if (data[i]=='\0'){
    bdba:	5ccc      	ldrb	r4, [r1, r3]
    bdbc:	2c00      	cmp	r4, #0
    bdbe:	d1ee      	bne.n	bd9e <nrng_write_line+0x16>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
    bdc0:	f8be 3388 	ldrh.w	r3, [lr, #904]	; 0x388
    bdc4:	3b01      	subs	r3, #1
    bdc6:	4473      	add	r3, lr
    bdc8:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
    bdcc:	b90b      	cbnz	r3, bdd2 <nrng_write_line+0x4a>
        json->idx = 0;
    bdce:	f8ae 3388 	strh.w	r3, [lr, #904]	; 0x388
    return len;
}
    bdd2:	bd10      	pop	{r4, pc}

0000bdd4 <nrng_json_write>:

int
nrng_json_write(nrng_json_t * json){
    bdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdd6:	b085      	sub	sp, #20
    bdd8:	4604      	mov	r4, r0

    struct json_value value;
    int rc;

    json->encoder.je_write = nrng_write_line;
    bdda:	4b57      	ldr	r3, [pc, #348]	; (bf38 <nrng_json_write+0x164>)
    bddc:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
    bdde:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
    bde0:	4b56      	ldr	r3, [pc, #344]	; (bf3c <nrng_json_write+0x168>)
    bde2:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
    bde4:	4b56      	ldr	r3, [pc, #344]	; (bf40 <nrng_json_write+0x16c>)
    bde6:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
    bde8:	4b56      	ldr	r3, [pc, #344]	; (bf44 <nrng_json_write+0x170>)
    bdea:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
    bdec:	f890 3020 	ldrb.w	r3, [r0, #32]
    bdf0:	f36f 0300 	bfc	r3, #0, #1
    bdf4:	f880 3020 	strb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
    bdf8:	f100 0718 	add.w	r7, r0, #24
    bdfc:	4638      	mov	r0, r7
    bdfe:	f012 fd03 	bl	1e808 <json_encode_object_start>
    be02:	4606      	mov	r6, r0
    JSON_VALUE_UINT(&value, json->utime);
    be04:	2501      	movs	r5, #1
    be06:	f88d 5001 	strb.w	r5, [sp, #1]
    be0a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    be0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    be12:	466a      	mov	r2, sp
    be14:	494c      	ldr	r1, [pc, #304]	; (bf48 <nrng_json_write+0x174>)
    be16:	4638      	mov	r0, r7
    be18:	f012 fd3e 	bl	1e898 <json_encode_object_entry>
    be1c:	4306      	orrs	r6, r0
    JSON_VALUE_UINT(&value, json->seq);
    be1e:	f88d 5001 	strb.w	r5, [sp, #1]
    be22:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    be26:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    be2a:	466a      	mov	r2, sp
    be2c:	4947      	ldr	r1, [pc, #284]	; (bf4c <nrng_json_write+0x178>)
    be2e:	4638      	mov	r0, r7
    be30:	f012 fd32 	bl	1e898 <json_encode_object_entry>
    be34:	4306      	orrs	r6, r0
    if (json->uid){
    be36:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    be38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    be3a:	ea52 0103 	orrs.w	r1, r2, r3
    be3e:	d10a      	bne.n	be56 <nrng_json_write+0x82>
        JSON_VALUE_UINT(&value, json->uid);
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    }
    rc |= json_encode_array_name(&json->encoder, "ouid");
    be40:	4943      	ldr	r1, [pc, #268]	; (bf50 <nrng_json_write+0x17c>)
    be42:	4638      	mov	r0, r7
    be44:	f012 fede 	bl	1ec04 <json_encode_array_name>
    be48:	4306      	orrs	r6, r0
    rc |= json_encode_array_start(&json->encoder);
    be4a:	4638      	mov	r0, r7
    be4c:	f012 fede 	bl	1ec0c <json_encode_array_start>
    be50:	4306      	orrs	r6, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    be52:	2500      	movs	r5, #0
    be54:	e01c      	b.n	be90 <nrng_json_write+0xbc>
        JSON_VALUE_UINT(&value, json->uid);
    be56:	f88d 5001 	strb.w	r5, [sp, #1]
    be5a:	9202      	str	r2, [sp, #8]
    be5c:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    be5e:	466a      	mov	r2, sp
    be60:	493c      	ldr	r1, [pc, #240]	; (bf54 <nrng_json_write+0x180>)
    be62:	4638      	mov	r0, r7
    be64:	f012 fd18 	bl	1e898 <json_encode_object_entry>
    be68:	4306      	orrs	r6, r0
    be6a:	e7e9      	b.n	be40 <nrng_json_write+0x6c>
        JSON_VALUE_UINT(&value, json->ouid[i]);
    be6c:	2301      	movs	r3, #1
    be6e:	f88d 3001 	strb.w	r3, [sp, #1]
    be72:	f105 0310 	add.w	r3, r5, #16
    be76:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    be7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    be82:	4669      	mov	r1, sp
    be84:	4638      	mov	r0, r7
    be86:	f012 fed1 	bl	1ec2c <json_encode_array_value>
    be8a:	4306      	orrs	r6, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    be8c:	3501      	adds	r5, #1
    be8e:	b2ed      	uxtb	r5, r5
    be90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    be94:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    be98:	4295      	cmp	r5, r2
    be9a:	f04f 0200 	mov.w	r2, #0
    be9e:	eb72 0303 	sbcs.w	r3, r2, r3
    bea2:	d3e3      	bcc.n	be6c <nrng_json_write+0x98>
    }
    rc |= json_encode_array_finish(&json->encoder);
    bea4:	4638      	mov	r0, r7
    bea6:	f012 fedd 	bl	1ec64 <json_encode_array_finish>
    beaa:	ea46 0500 	orr.w	r5, r6, r0

    rc |= json_encode_array_name(&json->encoder, "rng");
    beae:	492a      	ldr	r1, [pc, #168]	; (bf58 <nrng_json_write+0x184>)
    beb0:	4638      	mov	r0, r7
    beb2:	f012 fea7 	bl	1ec04 <json_encode_array_name>
    beb6:	4305      	orrs	r5, r0
    rc |= json_encode_array_start(&json->encoder);
    beb8:	4638      	mov	r0, r7
    beba:	f012 fea7 	bl	1ec0c <json_encode_array_start>
    bebe:	4305      	orrs	r5, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    bec0:	2600      	movs	r6, #0
    bec2:	e011      	b.n	bee8 <nrng_json_write+0x114>
        JSON_VALUE_FLOAT64(&value, json->rng[i]);
    bec4:	2306      	movs	r3, #6
    bec6:	f88d 3001 	strb.w	r3, [sp, #1]
    beca:	f106 0320 	add.w	r3, r6, #32
    bece:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
    bed6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    beda:	4669      	mov	r1, sp
    bedc:	4638      	mov	r0, r7
    bede:	f012 fea5 	bl	1ec2c <json_encode_array_value>
    bee2:	4305      	orrs	r5, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    bee4:	3601      	adds	r6, #1
    bee6:	b2f6      	uxtb	r6, r6
    bee8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    beec:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
    bef0:	4296      	cmp	r6, r2
    bef2:	f04f 0200 	mov.w	r2, #0
    bef6:	eb72 0303 	sbcs.w	r3, r2, r3
    befa:	d3e3      	bcc.n	bec4 <nrng_json_write+0xf0>
    }
    rc |= json_encode_array_finish(&json->encoder);
    befc:	4638      	mov	r0, r7
    befe:	f012 feb1 	bl	1ec64 <json_encode_array_finish>
    bf02:	4305      	orrs	r5, r0
    rc |= json_encode_object_finish(&json->encoder);
    bf04:	4638      	mov	r0, r7
    bf06:	f012 fe6d 	bl	1ebe4 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
    bf0a:	f894 3020 	ldrb.w	r3, [r4, #32]
    bf0e:	f36f 0300 	bfc	r3, #0, #1
    bf12:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
    bf16:	4305      	orrs	r5, r0
    bf18:	d107      	bne.n	bf2a <nrng_json_write+0x156>

    nrng_write_line(json->encoder.je_arg, "\0", 1);
    bf1a:	2201      	movs	r2, #1
    bf1c:	490f      	ldr	r1, [pc, #60]	; (bf5c <nrng_json_write+0x188>)
    bf1e:	69e0      	ldr	r0, [r4, #28]
    bf20:	f7ff ff32 	bl	bd88 <nrng_write_line>

    return rc;
}
    bf24:	4628      	mov	r0, r5
    bf26:	b005      	add	sp, #20
    bf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
    bf2a:	2300      	movs	r3, #0
    bf2c:	461a      	mov	r2, r3
    bf2e:	4619      	mov	r1, r3
    bf30:	4618      	mov	r0, r3
    bf32:	f7fd f947 	bl	91c4 <__assert_func>
    bf36:	bf00      	nop
    bf38:	0000bd89 	.word	0x0000bd89
    bf3c:	0001ec81 	.word	0x0001ec81
    bf40:	0001ec9d 	.word	0x0001ec9d
    bf44:	0001ecaf 	.word	0x0001ecaf
    bf48:	000255a8 	.word	0x000255a8
    bf4c:	000255b0 	.word	0x000255b0
    bf50:	000255b8 	.word	0x000255b8
    bf54:	000255b4 	.word	0x000255b4
    bf58:	0002765c 	.word	0x0002765c
    bf5c:	000255c0 	.word	0x000255c0

0000bf60 <lease_expiry_cb>:

#include "pan_utils/pan_utils.h"

void
lease_expiry_cb(struct dpl_event * ev)
{
    bf60:	b508      	push	{r3, lr}
    assert(ev != NULL);
    bf62:	b1d8      	cbz	r0, bf9c <lease_expiry_cb+0x3c>
    return ev->ev.ev_arg;
    bf64:	6881      	ldr	r1, [r0, #8]
    assert(dpl_event_get_arg(ev));
    bf66:	b1f9      	cbz	r1, bfa8 <lease_expiry_cb+0x48>

    struct uwb_pan_instance * pan = (struct uwb_pan_instance *) dpl_event_get_arg(ev);
#if !MYNEWT_VAL(SELFTEST)
    STATS_INC(g_stat, lease_expiry);
    bf68:	4a15      	ldr	r2, [pc, #84]	; (bfc0 <lease_expiry_cb+0x60>)
    bf6a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    bf6c:	3301      	adds	r3, #1
    bf6e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
    pan->status.valid = false;
    bf70:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    bf74:	f36f 0382 	bfc	r3, #2, #1
    bf78:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->status.lease_expired = true;
    bf7c:	b2db      	uxtb	r3, r3
    bf7e:	f043 0310 	orr.w	r3, r3, #16
    bf82:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->dev_inst->slot_id = 0xffff;
    bf86:	680b      	ldr	r3, [r1, #0]
    bf88:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bf8c:	f8a3 24c2 	strh.w	r2, [r3, #1218]	; 0x4c2

    /*DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_lease_expired\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));*/
    if (pan->control.postprocess) {
    bf90:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
    bf94:	f013 0f01 	tst.w	r3, #1
    bf98:	d10c      	bne.n	bfb4 <lease_expiry_cb+0x54>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    }
}
    bf9a:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    bf9c:	2300      	movs	r3, #0
    bf9e:	461a      	mov	r2, r3
    bfa0:	4619      	mov	r1, r3
    bfa2:	4618      	mov	r0, r3
    bfa4:	f7fd f90e 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    bfa8:	2300      	movs	r3, #0
    bfaa:	461a      	mov	r2, r3
    bfac:	4619      	mov	r1, r3
    bfae:	4618      	mov	r0, r3
    bfb0:	f7fd f908 	bl	91c4 <__assert_func>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    bfb4:	f851 0b50 	ldr.w	r0, [r1], #80
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    bfb8:	303c      	adds	r0, #60	; 0x3c
    bfba:	f7fd fc45 	bl	9848 <os_eventq_put>
}
    bfbe:	e7ec      	b.n	bf9a <lease_expiry_cb+0x3a>
    bfc0:	20003c68 	.word	0x20003c68

0000bfc4 <uwb_pan_set_request_cb>:
 * @return void
 */
void
uwb_pan_set_request_cb(struct uwb_pan_instance *pan, uwb_pan_request_cb_func_t callback)
{
    pan->request_cb = callback;
    bfc4:	64c1      	str	r1, [r0, #76]	; 0x4c
    pan->control.request_cb = true;
    bfc6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    bfca:	f043 0302 	orr.w	r3, r3, #2
    bfce:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
    bfd2:	4770      	bx	lr

0000bfd4 <uwb_pan_set_postprocess>:
 *
 * @return void
 */
void
uwb_pan_set_postprocess(struct uwb_pan_instance *pan, dpl_event_fn * cb)
{
    bfd4:	b510      	push	{r4, lr}
    bfd6:	4604      	mov	r4, r0
    memset(ev, 0, sizeof(*ev));
    bfd8:	2300      	movs	r3, #0
    bfda:	6503      	str	r3, [r0, #80]	; 0x50
    bfdc:	6543      	str	r3, [r0, #84]	; 0x54
    bfde:	6583      	str	r3, [r0, #88]	; 0x58
    bfe0:	65c3      	str	r3, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
    bfe2:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
    bfe4:	6580      	str	r0, [r0, #88]	; 0x58
    return (struct dpl_eventq *) os_eventq_dflt_get();
    bfe6:	f7fd fcdd 	bl	99a4 <os_eventq_dflt_get>
    bfea:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    bfec:	4623      	mov	r3, r4
    bfee:	4a06      	ldr	r2, [pc, #24]	; (c008 <uwb_pan_set_postprocess+0x34>)
    bff0:	f104 0060 	add.w	r0, r4, #96	; 0x60
    bff4:	f7fd fa74 	bl	94e0 <os_callout_init>
    dpl_event_init(&pan->postprocess_event, cb, (void *) pan);
    dpl_callout_init(&pan->pan_lease_callout_expiry, dpl_eventq_dflt_get(),
                    lease_expiry_cb, (void *) pan);

    pan->control.postprocess = true;
    bff8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    bffc:	f043 0301 	orr.w	r3, r3, #1
    c000:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    c004:	bd10      	pop	{r4, pc}
    c006:	bf00      	nop
    c008:	0000bf61 	.word	0x0000bf61

0000c00c <pm_conf_export>:
}

static int
pm_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
    c00c:	b508      	push	{r3, lr}
    c00e:	4603      	mov	r3, r0
    export_func("panmstr/pan_id", pm_config.pan_id);
    c010:	4902      	ldr	r1, [pc, #8]	; (c01c <pm_conf_export+0x10>)
    c012:	4803      	ldr	r0, [pc, #12]	; (c020 <pm_conf_export+0x14>)
    c014:	4798      	blx	r3
    return 0;
}
    c016:	2000      	movs	r0, #0
    c018:	bd08      	pop	{r3, pc}
    c01a:	bf00      	nop
    c01c:	200005cc 	.word	0x200005cc
    c020:	000255c4 	.word	0x000255c4

0000c024 <first_free_short_addr>:
    return 0;
}

static uint16_t
first_free_short_addr(uint64_t euid)
{
    c024:	b500      	push	{lr}
    int i, j;
    uint16_t addr = euid&0xffff;
    c026:	fa1f fe80 	uxth.w	lr, r0
    c02a:	4670      	mov	r0, lr
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c02c:	f04f 0c00 	mov.w	ip, #0
    c030:	e003      	b.n	c03a <first_free_short_addr+0x16>

        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
        {
            if (addr == node_idx[j].addr)
            {
                addr = 0;
    c032:	2000      	movs	r0, #0
                break;
            }
        }

        if (addr) {
    c034:	b9c8      	cbnz	r0, c06a <first_free_short_addr+0x46>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c036:	f10c 0c01 	add.w	ip, ip, #1
    c03a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    c03e:	dc14      	bgt.n	c06a <first_free_short_addr+0x46>
        if (i>0) {
    c040:	f1bc 0f00 	cmp.w	ip, #0
    c044:	dd05      	ble.n	c052 <first_free_short_addr+0x2e>
            addr = (i<<12) | (euid&0x0fff);
    c046:	ea4f 300c 	mov.w	r0, ip, lsl #12
    c04a:	b280      	uxth	r0, r0
    c04c:	f3ce 030b 	ubfx	r3, lr, #0, #12
    c050:	4318      	orrs	r0, r3
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c052:	2300      	movs	r3, #0
    c054:	2b3f      	cmp	r3, #63	; 0x3f
    c056:	dced      	bgt.n	c034 <first_free_short_addr+0x10>
            if (addr == node_idx[j].addr)
    c058:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c05c:	4904      	ldr	r1, [pc, #16]	; (c070 <first_free_short_addr+0x4c>)
    c05e:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
    c062:	4282      	cmp	r2, r0
    c064:	d0e5      	beq.n	c032 <first_free_short_addr+0xe>
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c066:	3301      	adds	r3, #1
    c068:	e7f4      	b.n	c054 <first_free_short_addr+0x30>
            return addr;
        }
    }

    return addr;
}
    c06a:	f85d fb04 	ldr.w	pc, [sp], #4
    c06e:	bf00      	nop
    c070:	20003480 	.word	0x20003480

0000c074 <short_addr_is_free>:

static bool
short_addr_is_free(uint16_t addr)
{
    int j;
    for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c074:	2300      	movs	r3, #0
    c076:	e000      	b.n	c07a <short_addr_is_free+0x6>
    c078:	3301      	adds	r3, #1
    c07a:	2b3f      	cmp	r3, #63	; 0x3f
    c07c:	dc08      	bgt.n	c090 <short_addr_is_free+0x1c>
    {
        if (addr == node_idx[j].addr)
    c07e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c082:	4904      	ldr	r1, [pc, #16]	; (c094 <short_addr_is_free+0x20>)
    c084:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
    c088:	4282      	cmp	r2, r0
    c08a:	d1f5      	bne.n	c078 <short_addr_is_free+0x4>
        {
            return false;
    c08c:	2000      	movs	r0, #0
        }
    }
    return true;
}
    c08e:	4770      	bx	lr
    return true;
    c090:	2001      	movs	r0, #1
    c092:	4770      	bx	lr
    c094:	20003480 	.word	0x20003480

0000c098 <slot_lease_expired>:

static bool
slot_lease_expired(int idx)
{
    c098:	b510      	push	{r4, lr}
    c09a:	b084      	sub	sp, #16
    c09c:	4604      	mov	r4, r0
    os_get_uptime((struct os_timeval*)tvp);
    c09e:	4668      	mov	r0, sp
    c0a0:	f7fe fa86 	bl	a5b0 <os_get_uptime>
    struct dpl_timeval tv;
    dpl_get_uptime(&tv);
    int32_t le_ms = node_idx[idx].lease_ends;
    c0a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c0a8:	480c      	ldr	r0, [pc, #48]	; (c0dc <slot_lease_expired+0x44>)
    c0aa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    c0ae:	6962      	ldr	r2, [r4, #20]
    if (le_ms==0) return false;
    c0b0:	b18a      	cbz	r2, c0d6 <slot_lease_expired+0x3e>
    int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    c0b2:	9b02      	ldr	r3, [sp, #8]
    c0b4:	490a      	ldr	r1, [pc, #40]	; (c0e0 <slot_lease_expired+0x48>)
    c0b6:	fb81 0103 	smull	r0, r1, r1, r3
    c0ba:	17d8      	asrs	r0, r3, #31
    c0bc:	ebc0 10a1 	rsb	r0, r0, r1, asr #6
    c0c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c0c4:	9b00      	ldr	r3, [sp, #0]
    c0c6:	fb01 0003 	mla	r0, r1, r3, r0
    return now_ms > le_ms;
    c0ca:	4282      	cmp	r2, r0
    c0cc:	bfac      	ite	ge
    c0ce:	2000      	movge	r0, #0
    c0d0:	2001      	movlt	r0, #1
}
    c0d2:	b004      	add	sp, #16
    c0d4:	bd10      	pop	{r4, pc}
    if (le_ms==0) return false;
    c0d6:	2000      	movs	r0, #0
    c0d8:	e7fb      	b.n	c0d2 <slot_lease_expired+0x3a>
    c0da:	bf00      	nop
    c0dc:	20003480 	.word	0x20003480
    c0e0:	10624dd3 	.word	0x10624dd3

0000c0e4 <first_free_slot_id>:

static uint16_t
first_free_slot_id(uint16_t node_addr, uint16_t role)
{
    c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0e6:	4607      	mov	r7, r0
    c0e8:	460d      	mov	r5, r1
    int j;
    uint16_t slot_id=0;
    c0ea:	2600      	movs	r6, #0
    while (slot_id < 0xffff)
    c0ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0f0:	429e      	cmp	r6, r3
    c0f2:	d02d      	beq.n	c150 <first_free_slot_id+0x6c>
    {
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c0f4:	2400      	movs	r4, #0
    c0f6:	e000      	b.n	c0fa <first_free_slot_id+0x16>
    c0f8:	3401      	adds	r4, #1
    c0fa:	2c3f      	cmp	r4, #63	; 0x3f
    c0fc:	dc28      	bgt.n	c150 <first_free_slot_id+0x6c>
        {
            if (node_idx[j].addr == 0xffff || role != node_idx[j].role) {
    c0fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c102:	4a14      	ldr	r2, [pc, #80]	; (c154 <first_free_slot_id+0x70>)
    c104:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
    c108:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c10c:	4299      	cmp	r1, r3
    c10e:	d0f3      	beq.n	c0f8 <first_free_slot_id+0x14>
    c110:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c114:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c118:	7c1b      	ldrb	r3, [r3, #16]
    c11a:	42ab      	cmp	r3, r5
    c11c:	d1ec      	bne.n	c0f8 <first_free_slot_id+0x14>
                continue;
            }

            if (slot_id == node_idx[j].slot_id &&
    c11e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c122:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c126:	885b      	ldrh	r3, [r3, #2]
    c128:	42b3      	cmp	r3, r6
    c12a:	d1e5      	bne.n	c0f8 <first_free_slot_id+0x14>
    c12c:	42b9      	cmp	r1, r7
    c12e:	d0e3      	beq.n	c0f8 <first_free_slot_id+0x14>
                node_addr != node_idx[j].addr &&
                (slot_lease_expired(j) == false || node_idx[j].has_perm_slot)
    c130:	4620      	mov	r0, r4
    c132:	f7ff ffb1 	bl	c098 <slot_lease_expired>
                node_addr != node_idx[j].addr &&
    c136:	b140      	cbz	r0, c14a <first_free_slot_id+0x66>
                (slot_lease_expired(j) == false || node_idx[j].has_perm_slot)
    c138:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c13c:	4a05      	ldr	r2, [pc, #20]	; (c154 <first_free_slot_id+0x70>)
    c13e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c142:	7c5b      	ldrb	r3, [r3, #17]
    c144:	f013 0f01 	tst.w	r3, #1
    c148:	d0d6      	beq.n	c0f8 <first_free_slot_id+0x14>
            }
        }

        return slot_id;
    next_slot:
        slot_id++;
    c14a:	3601      	adds	r6, #1
    c14c:	b2b6      	uxth	r6, r6
    c14e:	e7cd      	b.n	c0ec <first_free_slot_id+0x8>
    }

    return 0xffff;
}
    c150:	4630      	mov	r0, r6
    c152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c154:	20003480 	.word	0x20003480

0000c158 <find_first_empty_nodes_to_save>:

static bool
find_first_empty_nodes_to_save(uint64_t euid, struct panmaster_node **results)
{
    c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c15a:	4607      	mov	r7, r0
    c15c:	460e      	mov	r6, r1
    c15e:	4615      	mov	r5, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c160:	2100      	movs	r1, #0
    c162:	4811      	ldr	r0, [pc, #68]	; (c1a8 <find_first_empty_nodes_to_save+0x50>)
    c164:	f7fe fde2 	bl	ad2c <os_mutex_pend>
    int i, slots;
    if (dpl_mutex_pend(&save_mutex, 0) != DPL_OK) {
    c168:	b9d8      	cbnz	r0, c1a2 <find_first_empty_nodes_to_save+0x4a>
        return false;
    }
    slots = sizeof(nodes_to_save)/sizeof(nodes_to_save[0]);
    for (i=0;i < slots;i++) {
    c16a:	2400      	movs	r4, #0
    c16c:	2c07      	cmp	r4, #7
    c16e:	dc10      	bgt.n	c192 <find_first_empty_nodes_to_save+0x3a>
        if (!nodes_to_save[i].euid) {
    c170:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
    c174:	4b0d      	ldr	r3, [pc, #52]	; (c1ac <find_first_empty_nodes_to_save+0x54>)
    c176:	4413      	add	r3, r2
    c178:	f8d3 c008 	ldr.w	ip, [r3, #8]
    c17c:	68db      	ldr	r3, [r3, #12]
    c17e:	ea5c 0303 	orrs.w	r3, ip, r3
    c182:	d001      	beq.n	c188 <find_first_empty_nodes_to_save+0x30>
    for (i=0;i < slots;i++) {
    c184:	3401      	adds	r4, #1
    c186:	e7f1      	b.n	c16c <find_first_empty_nodes_to_save+0x14>
            nodes_to_save[i].euid = euid;
    c188:	4b08      	ldr	r3, [pc, #32]	; (c1ac <find_first_empty_nodes_to_save+0x54>)
    c18a:	4413      	add	r3, r2
    c18c:	609f      	str	r7, [r3, #8]
    c18e:	60de      	str	r6, [r3, #12]
            *results = &nodes_to_save[i];
    c190:	602b      	str	r3, [r5, #0]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c192:	4805      	ldr	r0, [pc, #20]	; (c1a8 <find_first_empty_nodes_to_save+0x50>)
    c194:	f7fe fd6e 	bl	ac74 <os_mutex_release>
        }
    }

    dpl_mutex_release(&save_mutex);
    /* If i == slots then we failed to find a free slot */
    return (i!=slots) ? true : false;
    c198:	f1b4 0008 	subs.w	r0, r4, #8
    c19c:	bf18      	it	ne
    c19e:	2001      	movne	r0, #1
}
    c1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    c1a2:	2000      	movs	r0, #0
    c1a4:	e7fc      	b.n	c1a0 <find_first_empty_nodes_to_save+0x48>
    c1a6:	bf00      	nop
    c1a8:	20003c48 	.word	0x20003c48
    c1ac:	20003a80 	.word	0x20003a80

0000c1b0 <pm_conf_commit>:
{
    c1b0:	b508      	push	{r3, lr}
    conf_value_from_str(pm_config.pan_id, CONF_INT16,
    c1b2:	2300      	movs	r3, #0
    c1b4:	4a03      	ldr	r2, [pc, #12]	; (c1c4 <pm_conf_commit+0x14>)
    c1b6:	2103      	movs	r1, #3
    c1b8:	4803      	ldr	r0, [pc, #12]	; (c1c8 <pm_conf_commit+0x18>)
    c1ba:	f006 fe68 	bl	12e8e <conf_value_from_str>
}
    c1be:	2000      	movs	r0, #0
    c1c0:	bd08      	pop	{r3, pc}
    c1c2:	bf00      	nop
    c1c4:	20003b78 	.word	0x20003b78
    c1c8:	200005cc 	.word	0x200005cc

0000c1cc <pm_conf_set>:
    if (argc == 1) {
    c1cc:	2801      	cmp	r0, #1
    c1ce:	d001      	beq.n	c1d4 <pm_conf_set+0x8>
    return DPL_ENOENT;
    c1d0:	200a      	movs	r0, #10
}
    c1d2:	4770      	bx	lr
{
    c1d4:	b510      	push	{r4, lr}
    c1d6:	460b      	mov	r3, r1
    c1d8:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "pan_id")) {
    c1da:	4907      	ldr	r1, [pc, #28]	; (c1f8 <pm_conf_set+0x2c>)
    c1dc:	6818      	ldr	r0, [r3, #0]
    c1de:	f004 fa87 	bl	106f0 <strcmp>
    c1e2:	b108      	cbz	r0, c1e8 <pm_conf_set+0x1c>
    return DPL_ENOENT;
    c1e4:	200a      	movs	r0, #10
}
    c1e6:	bd10      	pop	{r4, pc}
            return CONF_VALUE_SET(val, CONF_STRING, pm_config.pan_id);
    c1e8:	2308      	movs	r3, #8
    c1ea:	4a04      	ldr	r2, [pc, #16]	; (c1fc <pm_conf_set+0x30>)
    c1ec:	2106      	movs	r1, #6
    c1ee:	4620      	mov	r0, r4
    c1f0:	f006 fe4d 	bl	12e8e <conf_value_from_str>
    c1f4:	e7f7      	b.n	c1e6 <pm_conf_set+0x1a>
    c1f6:	bf00      	nop
    c1f8:	000255cc 	.word	0x000255cc
    c1fc:	200005cc 	.word	0x200005cc

0000c200 <pm_conf_get>:
    if (argc == 1) {
    c200:	2801      	cmp	r0, #1
    c202:	d10a      	bne.n	c21a <pm_conf_get+0x1a>
{
    c204:	b508      	push	{r3, lr}
    c206:	460b      	mov	r3, r1
        if (!strcmp(argv[0], "pan_id")) {
    c208:	4905      	ldr	r1, [pc, #20]	; (c220 <pm_conf_get+0x20>)
    c20a:	6818      	ldr	r0, [r3, #0]
    c20c:	f004 fa70 	bl	106f0 <strcmp>
    c210:	b908      	cbnz	r0, c216 <pm_conf_get+0x16>
            return pm_config.pan_id;
    c212:	4804      	ldr	r0, [pc, #16]	; (c224 <pm_conf_get+0x24>)
}
    c214:	bd08      	pop	{r3, pc}
    return NULL;
    c216:	2000      	movs	r0, #0
    c218:	e7fc      	b.n	c214 <pm_conf_get+0x14>
    c21a:	2000      	movs	r0, #0
}
    c21c:	4770      	bx	lr
    c21e:	bf00      	nop
    c220:	000255cc 	.word	0x000255cc
    c224:	200005cc 	.word	0x200005cc

0000c228 <panm_init_fcb>:
{
    c228:	b510      	push	{r4, lr}
    c22a:	b084      	sub	sp, #16
    rc = flash_area_to_sectors(MYNEWT_VAL(PANMASTER_FCB_FLASH_AREA), &cnt, NULL);
    c22c:	2200      	movs	r2, #0
    c22e:	a903      	add	r1, sp, #12
    c230:	2010      	movs	r0, #16
    c232:	f007 ff11 	bl	14058 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c236:	b138      	cbz	r0, c248 <panm_init_fcb+0x20>
    c238:	2000      	movs	r0, #0
    c23a:	9000      	str	r0, [sp, #0]
    c23c:	4b20      	ldr	r3, [pc, #128]	; (c2c0 <panm_init_fcb+0x98>)
    c23e:	681c      	ldr	r4, [r3, #0]
    c240:	4603      	mov	r3, r0
    c242:	4602      	mov	r2, r0
    c244:	4601      	mov	r1, r0
    c246:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
    c248:	9b03      	ldr	r3, [sp, #12]
    c24a:	2b11      	cmp	r3, #17
    c24c:	d907      	bls.n	c25e <panm_init_fcb+0x36>
    c24e:	2000      	movs	r0, #0
    c250:	9000      	str	r0, [sp, #0]
    c252:	4b1b      	ldr	r3, [pc, #108]	; (c2c0 <panm_init_fcb+0x98>)
    c254:	681c      	ldr	r4, [r3, #0]
    c256:	4603      	mov	r3, r0
    c258:	4602      	mov	r2, r0
    c25a:	4601      	mov	r1, r0
    c25c:	47a0      	blx	r4
    flash_area_to_sectors(
    c25e:	4a19      	ldr	r2, [pc, #100]	; (c2c4 <panm_init_fcb+0x9c>)
    c260:	a903      	add	r1, sp, #12
    c262:	2010      	movs	r0, #16
    c264:	f007 fef8 	bl	14058 <flash_area_to_sectors>
    pm_init_conf_fcb.pm_fcb.f_sector_cnt = cnt;
    c268:	4817      	ldr	r0, [pc, #92]	; (c2c8 <panm_init_fcb+0xa0>)
    c26a:	9b03      	ldr	r3, [sp, #12]
    c26c:	7143      	strb	r3, [r0, #5]
    rc = panm_fcb_src(&pm_init_conf_fcb);
    c26e:	f000 ff98 	bl	d1a2 <panm_fcb_src>
    if (rc) {
    c272:	4603      	mov	r3, r0
    c274:	b1c0      	cbz	r0, c2a8 <panm_init_fcb+0x80>
        for (cnt = 0;
    c276:	2300      	movs	r3, #0
    c278:	9303      	str	r3, [sp, #12]
    c27a:	e00c      	b.n	c296 <panm_init_fcb+0x6e>
            flash_area_erase(&pm_fcb_area[cnt], 0,
    c27c:	4811      	ldr	r0, [pc, #68]	; (c2c4 <panm_init_fcb+0x9c>)
    c27e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c282:	eb00 038c 	add.w	r3, r0, ip, lsl #2
    c286:	689a      	ldr	r2, [r3, #8]
    c288:	2100      	movs	r1, #0
    c28a:	4618      	mov	r0, r3
    c28c:	f007 ff4a 	bl	14124 <flash_area_erase>
             cnt++) {
    c290:	9b03      	ldr	r3, [sp, #12]
    c292:	3301      	adds	r3, #1
    c294:	9303      	str	r3, [sp, #12]
             cnt < pm_init_conf_fcb.pm_fcb.f_sector_cnt;
    c296:	4b0c      	ldr	r3, [pc, #48]	; (c2c8 <panm_init_fcb+0xa0>)
    c298:	795a      	ldrb	r2, [r3, #5]
    c29a:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
    c29c:	429a      	cmp	r2, r3
    c29e:	dced      	bgt.n	c27c <panm_init_fcb+0x54>
        rc = panm_fcb_src(&pm_init_conf_fcb);
    c2a0:	4809      	ldr	r0, [pc, #36]	; (c2c8 <panm_init_fcb+0xa0>)
    c2a2:	f000 ff7e 	bl	d1a2 <panm_fcb_src>
    c2a6:	4603      	mov	r3, r0
    SYSINIT_PANIC_ASSERT(rc == 0);
    c2a8:	b13b      	cbz	r3, c2ba <panm_init_fcb+0x92>
    c2aa:	2000      	movs	r0, #0
    c2ac:	9000      	str	r0, [sp, #0]
    c2ae:	4b04      	ldr	r3, [pc, #16]	; (c2c0 <panm_init_fcb+0x98>)
    c2b0:	681c      	ldr	r4, [r3, #0]
    c2b2:	4603      	mov	r3, r0
    c2b4:	4602      	mov	r2, r0
    c2b6:	4601      	mov	r1, r0
    c2b8:	47a0      	blx	r4
}
    c2ba:	b004      	add	sp, #16
    c2bc:	bd10      	pop	{r4, pc}
    c2be:	bf00      	nop
    c2c0:	20000768 	.word	0x20000768
    c2c4:	20003b7c 	.word	0x20003b7c
    c2c8:	200005d4 	.word	0x200005d4

0000c2cc <panmaster_node_idx>:
    *node_idx_arg = node_idx;
    c2cc:	4b02      	ldr	r3, [pc, #8]	; (c2d8 <panmaster_node_idx+0xc>)
    c2ce:	6003      	str	r3, [r0, #0]
    *num_nodes = MYNEWT_VAL(PANMASTER_MAXNUM_NODES);
    c2d0:	2340      	movs	r3, #64	; 0x40
    c2d2:	600b      	str	r3, [r1, #0]
}
    c2d4:	4770      	bx	lr
    c2d6:	bf00      	nop
    c2d8:	20003480 	.word	0x20003480

0000c2dc <panmaster_find_node_general>:
{
    c2dc:	b508      	push	{r3, lr}
    c2de:	4601      	mov	r1, r0
    return panm_fcb_find_node(&pm_init_conf_fcb, fns);
    c2e0:	4801      	ldr	r0, [pc, #4]	; (c2e8 <panmaster_find_node_general+0xc>)
    c2e2:	f000 ff93 	bl	d20c <panm_fcb_find_node>
}
    c2e6:	bd08      	pop	{r3, pc}
    c2e8:	200005d4 	.word	0x200005d4

0000c2ec <panmaster_clear_list>:
{
    c2ec:	b510      	push	{r4, lr}
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c2ee:	2300      	movs	r3, #0
    c2f0:	e00b      	b.n	c30a <panmaster_clear_list+0x1e>
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    c2f2:	4c09      	ldr	r4, [pc, #36]	; (c318 <panmaster_clear_list+0x2c>)
    c2f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    c2f8:	00ca      	lsls	r2, r1, #3
    c2fa:	18a1      	adds	r1, r4, r2
    c2fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c300:	52a0      	strh	r0, [r4, r2]
    c302:	8048      	strh	r0, [r1, #2]
    c304:	2200      	movs	r2, #0
    c306:	740a      	strb	r2, [r1, #16]
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c308:	3301      	adds	r3, #1
    c30a:	2b3f      	cmp	r3, #63	; 0x3f
    c30c:	ddf1      	ble.n	c2f2 <panmaster_clear_list+0x6>
    panm_fcb_clear(&pm_init_conf_fcb);
    c30e:	4803      	ldr	r0, [pc, #12]	; (c31c <panmaster_clear_list+0x30>)
    c310:	f001 f81b 	bl	d34a <panm_fcb_clear>
}
    c314:	2000      	movs	r0, #0
    c316:	bd10      	pop	{r4, pc}
    c318:	20003480 	.word	0x20003480
    c31c:	200005d4 	.word	0x200005d4

0000c320 <panmaster_idx_find_node>:

int
panmaster_idx_find_node(uint64_t euid, uint16_t role, struct panmaster_node **results)
{
    c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c324:	b087      	sub	sp, #28
    c326:	4606      	mov	r6, r0
    c328:	460d      	mov	r5, r1
    c32a:	4617      	mov	r7, r2
    c32c:	4698      	mov	r8, r3
    int i;
    struct dpl_timeval utctime;
    struct panmaster_node *node;
    bool node_is_found = false;

    if (!find_first_empty_nodes_to_save(euid, &node)) {
    c32e:	aa01      	add	r2, sp, #4
    c330:	f7ff ff12 	bl	c158 <find_first_empty_nodes_to_save>
    c334:	b108      	cbz	r0, c33a <panmaster_idx_find_node+0x1a>
        return 1;
    }

    /* Look for an existing node */
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c336:	2400      	movs	r4, #0
    c338:	e002      	b.n	c340 <panmaster_idx_find_node+0x20>
        return 1;
    c33a:	2001      	movs	r0, #1
    c33c:	e052      	b.n	c3e4 <panmaster_idx_find_node+0xc4>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c33e:	3401      	adds	r4, #1
    c340:	2c3f      	cmp	r4, #63	; 0x3f
    c342:	dc52      	bgt.n	c3ea <panmaster_idx_find_node+0xca>
        if (node_idx[i].addr == 0xffff) {
    c344:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    c348:	4b6a      	ldr	r3, [pc, #424]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c34a:	f833 203c 	ldrh.w	r2, [r3, ip, lsl #3]
    c34e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c352:	429a      	cmp	r2, r3
    c354:	d0f3      	beq.n	c33e <panmaster_idx_find_node+0x1e>
            continue;
        }
        if (euid == node_idx[i].euid) {
    c356:	4b67      	ldr	r3, [pc, #412]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c358:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    c35c:	f8dc 2008 	ldr.w	r2, [ip, #8]
    c360:	f8dc 300c 	ldr.w	r3, [ip, #12]
    c364:	42ab      	cmp	r3, r5
    c366:	bf08      	it	eq
    c368:	42b2      	cmpeq	r2, r6
    c36a:	d1e8      	bne.n	c33e <panmaster_idx_find_node+0x1e>
            node_is_found = true;
            node->index = i;
    c36c:	9d01      	ldr	r5, [sp, #4]
    c36e:	752c      	strb	r4, [r5, #20]
            break;
        }
    }

    if (node_is_found) {
        *results = node;
    c370:	f8c8 5000 	str.w	r5, [r8]

        node->addr = node_idx[i].addr;
    c374:	4b5f      	ldr	r3, [pc, #380]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c376:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    c37a:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
    c37e:	8228      	strh	r0, [r5, #16]
        node->euid = node_idx[i].euid;
    c380:	f8dc 6008 	ldr.w	r6, [ip, #8]
    c384:	f8dc 100c 	ldr.w	r1, [ip, #12]
    c388:	60ae      	str	r6, [r5, #8]
    c38a:	60e9      	str	r1, [r5, #12]
        node->role = node_idx[i].role;
    c38c:	f89c 6010 	ldrb.w	r6, [ip, #16]
    c390:	7ce9      	ldrb	r1, [r5, #19]
    c392:	f366 1107 	bfi	r1, r6, #4, #4
    c396:	74e9      	strb	r1, [r5, #19]
        node->has_perm_slot = node_idx[i].has_perm_slot;
    c398:	f89c 1011 	ldrb.w	r1, [ip, #17]
    c39c:	7cea      	ldrb	r2, [r5, #19]
    c39e:	f361 02c3 	bfi	r2, r1, #3, #1
    c3a2:	74ea      	strb	r2, [r5, #19]
        node->slot_id = node_idx[node->index].slot_id;
    c3a4:	7d2a      	ldrb	r2, [r5, #20]
    c3a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c3ae:	885b      	ldrh	r3, [r3, #2]
    c3b0:	f8a5 3015 	strh.w	r3, [r5, #21]
        if (!node->has_perm_slot) {
    c3b4:	7ceb      	ldrb	r3, [r5, #19]
    c3b6:	f013 0f08 	tst.w	r3, #8
    c3ba:	d027      	beq.n	c40c <panmaster_idx_find_node+0xec>
            node->slot_id = first_free_slot_id(node->addr, role);
            node_idx[node->index].slot_id = node->slot_id;
        }

        /* Only check role if given */
        if (node->role != role && role > 0) {
    c3bc:	9b01      	ldr	r3, [sp, #4]
    c3be:	7cda      	ldrb	r2, [r3, #19]
    c3c0:	ebb7 1f12 	cmp.w	r7, r2, lsr #4
    c3c4:	d00d      	beq.n	c3e2 <panmaster_idx_find_node+0xc2>
    c3c6:	b167      	cbz	r7, c3e2 <panmaster_idx_find_node+0xc2>
            node->role = role;
    c3c8:	7cda      	ldrb	r2, [r3, #19]
    c3ca:	f367 1207 	bfi	r2, r7, #4, #4
    c3ce:	74da      	strb	r2, [r3, #19]
            node_idx[i].save_needed = 1;
    c3d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c3d4:	4b47      	ldr	r3, [pc, #284]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c3d6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    c3da:	7c63      	ldrb	r3, [r4, #17]
    c3dc:	f043 0302 	orr.w	r3, r3, #2
    c3e0:	7463      	strb	r3, [r4, #17]
        }
        return 0;
    c3e2:	2000      	movs	r0, #0
        node_idx[i].save_needed = 1;
        break;
    }

    return 0;
}
    c3e4:	b007      	add	sp, #28
    c3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c3ea:	f04f 0900 	mov.w	r9, #0
    c3ee:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
    c3f2:	dc7d      	bgt.n	c4f0 <panmaster_idx_find_node+0x1d0>
        if (node_idx[i].addr != 0xffff) {
    c3f4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    c3f8:	4a3e      	ldr	r2, [pc, #248]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c3fa:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    c3fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c402:	429a      	cmp	r2, r3
    c404:	d012      	beq.n	c42c <panmaster_idx_find_node+0x10c>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c406:	f109 0901 	add.w	r9, r9, #1
    c40a:	e7f0      	b.n	c3ee <panmaster_idx_find_node+0xce>
            node->slot_id = first_free_slot_id(node->addr, role);
    c40c:	4639      	mov	r1, r7
    c40e:	f7ff fe69 	bl	c0e4 <first_free_slot_id>
    c412:	f8a5 0015 	strh.w	r0, [r5, #21]
            node_idx[node->index].slot_id = node->slot_id;
    c416:	9a01      	ldr	r2, [sp, #4]
    c418:	7d13      	ldrb	r3, [r2, #20]
    c41a:	f8b2 1015 	ldrh.w	r1, [r2, #21]
    c41e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c422:	4a34      	ldr	r2, [pc, #208]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c424:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c428:	8059      	strh	r1, [r3, #2]
    c42a:	e7c7      	b.n	c3bc <panmaster_idx_find_node+0x9c>
        PANMASTER_NODE_DEFAULT(*node);
    c42c:	9b01      	ldr	r3, [sp, #4]
    c42e:	2400      	movs	r4, #0
    c430:	701c      	strb	r4, [r3, #0]
    c432:	705c      	strb	r4, [r3, #1]
    c434:	709c      	strb	r4, [r3, #2]
    c436:	70dc      	strb	r4, [r3, #3]
    c438:	711c      	strb	r4, [r3, #4]
    c43a:	715c      	strb	r4, [r3, #5]
    c43c:	719c      	strb	r4, [r3, #6]
    c43e:	71dc      	strb	r4, [r3, #7]
    c440:	9b01      	ldr	r3, [sp, #4]
    c442:	721c      	strb	r4, [r3, #8]
    c444:	725c      	strb	r4, [r3, #9]
    c446:	729c      	strb	r4, [r3, #10]
    c448:	72dc      	strb	r4, [r3, #11]
    c44a:	731c      	strb	r4, [r3, #12]
    c44c:	735c      	strb	r4, [r3, #13]
    c44e:	739c      	strb	r4, [r3, #14]
    c450:	73dc      	strb	r4, [r3, #15]
    c452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c456:	741a      	strb	r2, [r3, #16]
    c458:	745a      	strb	r2, [r3, #17]
    c45a:	749c      	strb	r4, [r3, #18]
    c45c:	74dc      	strb	r4, [r3, #19]
    c45e:	751c      	strb	r4, [r3, #20]
    c460:	755a      	strb	r2, [r3, #21]
    c462:	759a      	strb	r2, [r3, #22]
    c464:	75dc      	strb	r4, [r3, #23]
    c466:	761c      	strb	r4, [r3, #24]
    c468:	765c      	strb	r4, [r3, #25]
    c46a:	769c      	strb	r4, [r3, #26]
    c46c:	76dc      	strb	r4, [r3, #27]
    c46e:	771c      	strb	r4, [r3, #28]
    c470:	775c      	strb	r4, [r3, #29]
    c472:	779c      	strb	r4, [r3, #30]
    return os_gettimeofday((struct os_timeval*)tv, (struct os_timezone*)tz);
    c474:	4621      	mov	r1, r4
    c476:	a802      	add	r0, sp, #8
    c478:	f7fe f814 	bl	a4a4 <os_gettimeofday>
        node->euid = euid;
    c47c:	f8dd a004 	ldr.w	sl, [sp, #4]
    c480:	f8ca 6008 	str.w	r6, [sl, #8]
    c484:	f8ca 500c 	str.w	r5, [sl, #12]
        node->addr = first_free_short_addr(euid);
    c488:	4630      	mov	r0, r6
    c48a:	4629      	mov	r1, r5
    c48c:	f7ff fdca 	bl	c024 <first_free_short_addr>
    c490:	f8aa 0010 	strh.w	r0, [sl, #16]
        node_idx[i].addr = node->addr;
    c494:	4d17      	ldr	r5, [pc, #92]	; (c4f4 <panmaster_idx_find_node+0x1d4>)
    c496:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    c49a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    c49e:	f825 0033 	strh.w	r0, [r5, r3, lsl #3]
        node_idx[i].euid = node->euid;
    c4a2:	f8da 2008 	ldr.w	r2, [sl, #8]
    c4a6:	f8da 300c 	ldr.w	r3, [sl, #12]
    c4aa:	60b2      	str	r2, [r6, #8]
    c4ac:	60f3      	str	r3, [r6, #12]
        node_idx[i].role = role;
    c4ae:	7437      	strb	r7, [r6, #16]
        node->role = role;
    c4b0:	f89a 3013 	ldrb.w	r3, [sl, #19]
    c4b4:	f367 1307 	bfi	r3, r7, #4, #4
    c4b8:	f88a 3013 	strb.w	r3, [sl, #19]
        node->slot_id = first_free_slot_id(node->addr, role);
    c4bc:	4639      	mov	r1, r7
    c4be:	f8ba 0010 	ldrh.w	r0, [sl, #16]
    c4c2:	f7ff fe0f 	bl	c0e4 <first_free_slot_id>
    c4c6:	f8aa 0015 	strh.w	r0, [sl, #21]
        node_idx[i].slot_id = node->slot_id;
    c4ca:	9b01      	ldr	r3, [sp, #4]
    c4cc:	f8b3 2015 	ldrh.w	r2, [r3, #21]
    c4d0:	8072      	strh	r2, [r6, #2]
        node->first_seen_utc = utctime.tv_sec;
    c4d2:	9a03      	ldr	r2, [sp, #12]
    c4d4:	9902      	ldr	r1, [sp, #8]
    c4d6:	6019      	str	r1, [r3, #0]
    c4d8:	605a      	str	r2, [r3, #4]
        node->index = i;
    c4da:	9b01      	ldr	r3, [sp, #4]
    c4dc:	f883 9014 	strb.w	r9, [r3, #20]
        *results = node;
    c4e0:	f8c8 3000 	str.w	r3, [r8]
        node_idx[i].save_needed = 1;
    c4e4:	7c73      	ldrb	r3, [r6, #17]
    c4e6:	f043 0302 	orr.w	r3, r3, #2
    c4ea:	7473      	strb	r3, [r6, #17]
    return 0;
    c4ec:	4620      	mov	r0, r4
        break;
    c4ee:	e779      	b.n	c3e4 <panmaster_idx_find_node+0xc4>
    return 0;
    c4f0:	2000      	movs	r0, #0
    c4f2:	e777      	b.n	c3e4 <panmaster_idx_find_node+0xc4>
    c4f4:	20003480 	.word	0x20003480

0000c4f8 <panrequest_cb>:
{
    c4f8:	b530      	push	{r4, r5, lr}
    c4fa:	b087      	sub	sp, #28
    c4fc:	4615      	mov	r5, r2
    c4fe:	461c      	mov	r4, r3
    struct panmaster_node *node = 0;
    c500:	2300      	movs	r3, #0
    c502:	9301      	str	r3, [sp, #4]
    panmaster_idx_find_node(euid, request->role, &node);
    c504:	ab01      	add	r3, sp, #4
    c506:	8812      	ldrh	r2, [r2, #0]
    c508:	f7ff ff0a 	bl	c320 <panmaster_idx_find_node>
    if (!node) {
    c50c:	9b01      	ldr	r3, [sp, #4]
    c50e:	2b00      	cmp	r3, #0
    c510:	d035      	beq.n	c57e <panrequest_cb+0x86>
    memcpy(&node->fw_ver, &request->fw_ver, sizeof(struct pan_image_version));
    c512:	6869      	ldr	r1, [r5, #4]
    c514:	68aa      	ldr	r2, [r5, #8]
    c516:	f8c3 1017 	str.w	r1, [r3, #23]
    c51a:	f8c3 201b 	str.w	r2, [r3, #27]
    response->short_address = node->addr;
    c51e:	8a1a      	ldrh	r2, [r3, #16]
    c520:	80e2      	strh	r2, [r4, #6]
    response->slot_id = node_idx[node->index].slot_id;
    c522:	7d1b      	ldrb	r3, [r3, #20]
    c524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c528:	4a16      	ldr	r2, [pc, #88]	; (c584 <panrequest_cb+0x8c>)
    c52a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c52e:	885b      	ldrh	r3, [r3, #2]
    c530:	8123      	strh	r3, [r4, #8]
    os_get_uptime((struct os_timeval*)tvp);
    c532:	a802      	add	r0, sp, #8
    c534:	f7fe f83c 	bl	a5b0 <os_get_uptime>
    if (response->lease_time == 0) {
    c538:	8863      	ldrh	r3, [r4, #2]
    c53a:	b90b      	cbnz	r3, c540 <panrequest_cb+0x48>
        response->lease_time = MYNEWT_VAL(PANMASTER_DEFAULT_LEASE_TIME);
    c53c:	231e      	movs	r3, #30
    c53e:	8063      	strh	r3, [r4, #2]
    node_idx[node->index].lease_ends = tv.tv_sec*1000 + tv.tv_usec/1000 + (uint32_t)request->lease_time*1000;
    c540:	8869      	ldrh	r1, [r5, #2]
    c542:	9b04      	ldr	r3, [sp, #16]
    c544:	4a10      	ldr	r2, [pc, #64]	; (c588 <panrequest_cb+0x90>)
    c546:	fb82 0203 	smull	r0, r2, r2, r3
    c54a:	17db      	asrs	r3, r3, #31
    c54c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    c550:	9801      	ldr	r0, [sp, #4]
    c552:	7d02      	ldrb	r2, [r0, #20]
    c554:	9d02      	ldr	r5, [sp, #8]
    c556:	4429      	add	r1, r5
    c558:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    c55c:	fb05 3301 	mla	r3, r5, r1, r3
    c560:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c564:	4907      	ldr	r1, [pc, #28]	; (c584 <panrequest_cb+0x8c>)
    c566:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    c56a:	6153      	str	r3, [r2, #20]
    response->pan_id = pan_id;
    c56c:	4b07      	ldr	r3, [pc, #28]	; (c58c <panrequest_cb+0x94>)
    c56e:	881b      	ldrh	r3, [r3, #0]
    c570:	80a3      	strh	r3, [r4, #4]
    response->role = node->role;
    c572:	7cc3      	ldrb	r3, [r0, #19]
    c574:	091b      	lsrs	r3, r3, #4
    c576:	8023      	strh	r3, [r4, #0]
    return true;
    c578:	2001      	movs	r0, #1
}
    c57a:	b007      	add	sp, #28
    c57c:	bd30      	pop	{r4, r5, pc}
        return false;
    c57e:	2000      	movs	r0, #0
    c580:	e7fb      	b.n	c57a <panrequest_cb+0x82>
    c582:	bf00      	nop
    c584:	20003480 	.word	0x20003480
    c588:	10624dd3 	.word	0x10624dd3
    c58c:	20003b78 	.word	0x20003b78

0000c590 <panmaster_load>:

int
panmaster_load(panm_load_cb cb, void *cb_arg)
{
    c590:	b508      	push	{r3, lr}
    c592:	460a      	mov	r2, r1
#if MYNEWT_VAL(PANMASTER_NFFS)
    return panm_file_load(&panmaster_storage_file, cb, cb_arg);
#elif MYNEWT_VAL(PANMASTER_FCB)
    return panm_fcb_load(&pm_init_conf_fcb, cb, cb_arg);
    c594:	4601      	mov	r1, r0
    c596:	4802      	ldr	r0, [pc, #8]	; (c5a0 <panmaster_load+0x10>)
    c598:	f000 fe1e 	bl	d1d8 <panm_fcb_load>
#endif
}
    c59c:	bd08      	pop	{r3, pc}
    c59e:	bf00      	nop
    c5a0:	200005d4 	.word	0x200005d4

0000c5a4 <panmaster_save_node>:
    return;
}

int
panmaster_save_node(struct panmaster_node *node)
{
    c5a4:	b508      	push	{r3, lr}
    c5a6:	4601      	mov	r1, r0
    /* Make sure index is up to date */
    node_idx[node->index].role = node->role;
    c5a8:	7d03      	ldrb	r3, [r0, #20]
    c5aa:	7cc0      	ldrb	r0, [r0, #19]
    c5ac:	f3c0 1003 	ubfx	r0, r0, #4, #4
    c5b0:	4a0a      	ldr	r2, [pc, #40]	; (c5dc <panmaster_save_node+0x38>)
    c5b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c5ba:	7418      	strb	r0, [r3, #16]
    node_idx[node->index].has_perm_slot = node->has_perm_slot;
    c5bc:	7d0b      	ldrb	r3, [r1, #20]
    c5be:	7cc8      	ldrb	r0, [r1, #19]
    c5c0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    c5c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c5cc:	7c5a      	ldrb	r2, [r3, #17]
    c5ce:	f360 0200 	bfi	r2, r0, #0, #1
    c5d2:	745a      	strb	r2, [r3, #17]

#if MYNEWT_VAL(PANMASTER_NFFS)
    return panm_file_save(&panmaster_storage_file, node);
#elif MYNEWT_VAL(PANMASTER_FCB)
    return panm_fcb_save(&pm_init_conf_fcb, node);
    c5d4:	4802      	ldr	r0, [pc, #8]	; (c5e0 <panmaster_save_node+0x3c>)
    c5d6:	f000 feb0 	bl	d33a <panm_fcb_save>
#endif
}
    c5da:	bd08      	pop	{r3, pc}
    c5dc:	20003480 	.word	0x20003480
    c5e0:	200005d4 	.word	0x200005d4

0000c5e4 <panmaster_update_node>:
{
    c5e4:	b570      	push	{r4, r5, r6, lr}
    c5e6:	b092      	sub	sp, #72	; 0x48
    c5e8:	4606      	mov	r6, r0
    c5ea:	460d      	mov	r5, r1
    c5ec:	4614      	mov	r4, r2
    struct find_node_s fns = { .results = &stored_node };
    c5ee:	2228      	movs	r2, #40	; 0x28
    c5f0:	2100      	movs	r1, #0
    c5f2:	4668      	mov	r0, sp
    c5f4:	f004 f851 	bl	1069a <memset>
    c5f8:	ab0a      	add	r3, sp, #40	; 0x28
    c5fa:	9308      	str	r3, [sp, #32]
    PANMASTER_NODE_DEFAULT(fns.find);
    c5fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c600:	f8ad 3010 	strh.w	r3, [sp, #16]
    c604:	f88d 3015 	strb.w	r3, [sp, #21]
    c608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c60c:	f88d 3016 	strb.w	r3, [sp, #22]
    fns.find.euid = euid;
    c610:	9602      	str	r6, [sp, #8]
    c612:	9503      	str	r5, [sp, #12]
    panmaster_find_node_general(&fns);
    c614:	4668      	mov	r0, sp
    c616:	f7ff fe61 	bl	c2dc <panmaster_find_node_general>
    if (fns.is_found) {
    c61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c61c:	b17b      	cbz	r3, c63e <panmaster_update_node+0x5a>
        if (memcmp(&upd_node->fw_ver, &stored_node.fw_ver, sizeof(upd_node->fw_ver)) != 0 ||
    c61e:	2208      	movs	r2, #8
    c620:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    c624:	f104 0017 	add.w	r0, r4, #23
    c628:	f004 f806 	bl	10638 <memcmp>
    c62c:	b938      	cbnz	r0, c63e <panmaster_update_node+0x5a>
            upd_node->first_seen_utc != stored_node.first_seen_utc ||
    c62e:	6820      	ldr	r0, [r4, #0]
    c630:	6862      	ldr	r2, [r4, #4]
        if (memcmp(&upd_node->fw_ver, &stored_node.fw_ver, sizeof(upd_node->fw_ver)) != 0 ||
    c632:	990a      	ldr	r1, [sp, #40]	; 0x28
    c634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c636:	429a      	cmp	r2, r3
    c638:	bf08      	it	eq
    c63a:	4288      	cmpeq	r0, r1
    c63c:	d004      	beq.n	c648 <panmaster_update_node+0x64>
        panmaster_save_node(upd_node);
    c63e:	4620      	mov	r0, r4
    c640:	f7ff ffb0 	bl	c5a4 <panmaster_save_node>
}
    c644:	b012      	add	sp, #72	; 0x48
    c646:	bd70      	pop	{r4, r5, r6, pc}
            upd_node->addr != stored_node.addr ||
    c648:	8a22      	ldrh	r2, [r4, #16]
    c64a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            upd_node->first_seen_utc != stored_node.first_seen_utc ||
    c64e:	429a      	cmp	r2, r3
    c650:	d1f5      	bne.n	c63e <panmaster_update_node+0x5a>
            upd_node->flags != stored_node.flags ||
    c652:	8a62      	ldrh	r2, [r4, #18]
    c654:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
            upd_node->addr != stored_node.addr ||
    c658:	429a      	cmp	r2, r3
    c65a:	d1f0      	bne.n	c63e <panmaster_update_node+0x5a>
            upd_node->index != stored_node.index
    c65c:	7d22      	ldrb	r2, [r4, #20]
    c65e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
            upd_node->flags != stored_node.flags ||
    c662:	429a      	cmp	r2, r3
    c664:	d1eb      	bne.n	c63e <panmaster_update_node+0x5a>
    c666:	e7ed      	b.n	c644 <panmaster_update_node+0x60>

0000c668 <panmaster_postprocess>:
{
    c668:	b570      	push	{r4, r5, r6, lr}
    c66a:	b088      	sub	sp, #32
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c66c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c670:	4820      	ldr	r0, [pc, #128]	; (c6f4 <panmaster_postprocess+0x8c>)
    c672:	f7fe fb5b 	bl	ad2c <os_mutex_pend>
    if (dpl_mutex_pend(&save_mutex, DPL_WAIT_FOREVER) != DPL_OK) {
    c676:	2800      	cmp	r0, #0
    c678:	d13a      	bne.n	c6f0 <panmaster_postprocess+0x88>
    for (i=0;i < slots;i++) {
    c67a:	2400      	movs	r4, #0
    c67c:	e000      	b.n	c680 <panmaster_postprocess+0x18>
    c67e:	3401      	adds	r4, #1
    c680:	2c07      	cmp	r4, #7
    c682:	dc32      	bgt.n	c6ea <panmaster_postprocess+0x82>
        if (nodes_to_save[i].euid) {
    c684:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
    c688:	4b1b      	ldr	r3, [pc, #108]	; (c6f8 <panmaster_postprocess+0x90>)
    c68a:	4413      	add	r3, r2
    c68c:	689a      	ldr	r2, [r3, #8]
    c68e:	68db      	ldr	r3, [r3, #12]
    c690:	4313      	orrs	r3, r2
    c692:	d0f4      	beq.n	c67e <panmaster_postprocess+0x16>
            memcpy(&node, &nodes_to_save[i], sizeof(node));
    c694:	4a18      	ldr	r2, [pc, #96]	; (c6f8 <panmaster_postprocess+0x90>)
    c696:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
    c69a:	18d5      	adds	r5, r2, r3
    c69c:	46ec      	mov	ip, sp
    c69e:	58d0      	ldr	r0, [r2, r3]
    c6a0:	6869      	ldr	r1, [r5, #4]
    c6a2:	68aa      	ldr	r2, [r5, #8]
    c6a4:	68eb      	ldr	r3, [r5, #12]
    c6a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c6aa:	6928      	ldr	r0, [r5, #16]
    c6ac:	6969      	ldr	r1, [r5, #20]
    c6ae:	69aa      	ldr	r2, [r5, #24]
    c6b0:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    c6b4:	8baa      	ldrh	r2, [r5, #28]
    c6b6:	7fab      	ldrb	r3, [r5, #30]
    c6b8:	f8ac 2000 	strh.w	r2, [ip]
    c6bc:	f88c 3002 	strb.w	r3, [ip, #2]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c6c0:	4e0c      	ldr	r6, [pc, #48]	; (c6f4 <panmaster_postprocess+0x8c>)
    c6c2:	4630      	mov	r0, r6
    c6c4:	f7fe fad6 	bl	ac74 <os_mutex_release>
            panmaster_update_node(node.euid, &node);
    c6c8:	466a      	mov	r2, sp
    c6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c6ce:	f7ff ff89 	bl	c5e4 <panmaster_update_node>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c6d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c6d6:	4630      	mov	r0, r6
    c6d8:	f7fe fb28 	bl	ad2c <os_mutex_pend>
            if (dpl_mutex_pend(&save_mutex, DPL_WAIT_FOREVER) != DPL_OK) {
    c6dc:	b940      	cbnz	r0, c6f0 <panmaster_postprocess+0x88>
            memset(&nodes_to_save[i], 0, sizeof(node));
    c6de:	221f      	movs	r2, #31
    c6e0:	2100      	movs	r1, #0
    c6e2:	4628      	mov	r0, r5
    c6e4:	f003 ffd9 	bl	1069a <memset>
    c6e8:	e7c9      	b.n	c67e <panmaster_postprocess+0x16>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c6ea:	4802      	ldr	r0, [pc, #8]	; (c6f4 <panmaster_postprocess+0x8c>)
    c6ec:	f7fe fac2 	bl	ac74 <os_mutex_release>
}
    c6f0:	b008      	add	sp, #32
    c6f2:	bd70      	pop	{r4, r5, r6, pc}
    c6f4:	20003c48 	.word	0x20003c48
    c6f8:	20003a80 	.word	0x20003a80

0000c6fc <postprocess_cb>:
{
    c6fc:	b508      	push	{r3, lr}
    assert(ev != NULL);
    c6fe:	b148      	cbz	r0, c714 <postprocess_cb+0x18>
    return ev->ev.ev_arg;
    c700:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev));
    c702:	b16b      	cbz	r3, c720 <postprocess_cb+0x24>
    if (pan->config->role != UWB_PAN_ROLE_MASTER) {
    c704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    c708:	7adb      	ldrb	r3, [r3, #11]
    c70a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c70e:	2b10      	cmp	r3, #16
    c710:	d00b      	beq.n	c72a <postprocess_cb+0x2e>
}
    c712:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    c714:	2300      	movs	r3, #0
    c716:	461a      	mov	r2, r3
    c718:	4619      	mov	r1, r3
    c71a:	4618      	mov	r0, r3
    c71c:	f7fc fd52 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    c720:	461a      	mov	r2, r3
    c722:	4619      	mov	r1, r3
    c724:	4618      	mov	r0, r3
    c726:	f7fc fd4d 	bl	91c4 <__assert_func>
    panmaster_postprocess();
    c72a:	f7ff ff9d 	bl	c668 <panmaster_postprocess>
    c72e:	e7f0      	b.n	c712 <postprocess_cb+0x16>

0000c730 <panmaster_add_node>:
{
    c730:	b530      	push	{r4, r5, lr}
    c732:	b09b      	sub	sp, #108	; 0x6c
    c734:	4605      	mov	r5, r0
    c736:	4614      	mov	r4, r2
    struct find_node_s fns = { .results = &node };
    c738:	2228      	movs	r2, #40	; 0x28
    c73a:	2100      	movs	r1, #0
    c73c:	a804      	add	r0, sp, #16
    c73e:	f003 ffac 	bl	1069a <memset>
    c742:	ab0e      	add	r3, sp, #56	; 0x38
    c744:	930c      	str	r3, [sp, #48]	; 0x30
    if (short_addr==0) {
    c746:	2d00      	cmp	r5, #0
    c748:	f000 808b 	beq.w	c862 <panmaster_add_node+0x132>
    rc = 1;
    c74c:	2201      	movs	r2, #1
    for (i=0;i<sizeof(uint64_t)&&rc;i++) {
    c74e:	2300      	movs	r3, #0
    c750:	e000      	b.n	c754 <panmaster_add_node+0x24>
    c752:	3301      	adds	r3, #1
    c754:	4619      	mov	r1, r3
    c756:	2b07      	cmp	r3, #7
    c758:	d805      	bhi.n	c766 <panmaster_add_node+0x36>
    c75a:	b122      	cbz	r2, c766 <panmaster_add_node+0x36>
        if (euid_u8[i]!=0xff) {
    c75c:	5c61      	ldrb	r1, [r4, r1]
    c75e:	29ff      	cmp	r1, #255	; 0xff
    c760:	d0f7      	beq.n	c752 <panmaster_add_node+0x22>
            rc = 0;
    c762:	2200      	movs	r2, #0
    c764:	e7f5      	b.n	c752 <panmaster_add_node+0x22>
    if (rc==1) {
    c766:	2a00      	cmp	r2, #0
    c768:	d17b      	bne.n	c862 <panmaster_add_node+0x132>
    memcpy(&euid, euid_u8, sizeof(uint64_t));
    c76a:	ab02      	add	r3, sp, #8
    c76c:	6820      	ldr	r0, [r4, #0]
    c76e:	6861      	ldr	r1, [r4, #4]
    c770:	c303      	stmia	r3!, {r0, r1}
    PANMASTER_NODE_DEFAULT(fns.find);
    c772:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c776:	f8ad 3020 	strh.w	r3, [sp, #32]
    c77a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    c77e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c782:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    fns.find.euid = euid;
    c786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c78a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    panmaster_find_node_general(&fns);
    c78e:	a804      	add	r0, sp, #16
    c790:	f7ff fda4 	bl	c2dc <panmaster_find_node_general>
    if (fns.is_found)
    c794:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c796:	b184      	cbz	r4, c7ba <panmaster_add_node+0x8a>
        if (node.addr == short_addr) {
    c798:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    c79c:	42ab      	cmp	r3, r5
    c79e:	d060      	beq.n	c862 <panmaster_add_node+0x132>
        node.addr = short_addr;
    c7a0:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
        panm_fcb_save(&pm_init_conf_fcb, &node);
    c7a4:	a90e      	add	r1, sp, #56	; 0x38
    c7a6:	4834      	ldr	r0, [pc, #208]	; (c878 <panmaster_add_node+0x148>)
    c7a8:	f000 fdc7 	bl	d33a <panm_fcb_save>
        PM_DEBUG("panm: node upd\n");
    c7ac:	4b33      	ldr	r3, [pc, #204]	; (c87c <panmaster_add_node+0x14c>)
    c7ae:	2200      	movs	r2, #0
    c7b0:	215b      	movs	r1, #91	; 0x5b
    c7b2:	4833      	ldr	r0, [pc, #204]	; (c880 <panmaster_add_node+0x150>)
    c7b4:	f007 fe2e 	bl	14414 <log_printf>
        return;
    c7b8:	e053      	b.n	c862 <panmaster_add_node+0x132>
    PANMASTER_NODE_DEFAULT(node);
    c7ba:	2200      	movs	r2, #0
    c7bc:	2300      	movs	r3, #0
    c7be:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    c7c2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    c7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c7ca:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    c7ce:	2300      	movs	r3, #0
    c7d0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    c7d4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    c7d8:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    c7dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c7e0:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    c7e4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    c7e8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    c7ec:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    c7f0:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    c7f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c7f8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    c7fc:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    c800:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c804:	2c3f      	cmp	r4, #63	; 0x3f
    c806:	dc2c      	bgt.n	c862 <panmaster_add_node+0x132>
        if (node_idx[i].addr != 0xffff) {
    c808:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c80c:	4a1d      	ldr	r2, [pc, #116]	; (c884 <panmaster_add_node+0x154>)
    c80e:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    c812:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c816:	429a      	cmp	r2, r3
    c818:	d001      	beq.n	c81e <panmaster_add_node+0xee>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c81a:	3401      	adds	r4, #1
    c81c:	e7f2      	b.n	c804 <panmaster_add_node+0xd4>
    return os_gettimeofday((struct os_timeval*)tv, (struct os_timezone*)tz);
    c81e:	2100      	movs	r1, #0
    c820:	a816      	add	r0, sp, #88	; 0x58
    c822:	f7fd fe3f 	bl	a4a4 <os_gettimeofday>
        node.euid = euid;
    c826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c82a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
        if (!short_addr_is_free(short_addr)) {
    c82e:	4628      	mov	r0, r5
    c830:	f7ff fc20 	bl	c074 <short_addr_is_free>
    c834:	b1b8      	cbz	r0, c866 <panmaster_add_node+0x136>
        node.addr = short_addr;
    c836:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
        node_idx[i].addr = node.addr;
    c83a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c83e:	4b11      	ldr	r3, [pc, #68]	; (c884 <panmaster_add_node+0x154>)
    c840:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
        node.first_seen_utc = utctime.tv_sec;
    c844:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    c848:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
        node.index = i;
    c84c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
        panmaster_save_node(&node);
    c850:	a80e      	add	r0, sp, #56	; 0x38
    c852:	f7ff fea7 	bl	c5a4 <panmaster_save_node>
        PM_DEBUG("panm: node added\n");
    c856:	4b0c      	ldr	r3, [pc, #48]	; (c888 <panmaster_add_node+0x158>)
    c858:	2200      	movs	r2, #0
    c85a:	215b      	movs	r1, #91	; 0x5b
    c85c:	4808      	ldr	r0, [pc, #32]	; (c880 <panmaster_add_node+0x150>)
    c85e:	f007 fdd9 	bl	14414 <log_printf>
}
    c862:	b01b      	add	sp, #108	; 0x6c
    c864:	bd30      	pop	{r4, r5, pc}
            PM_ERR("Dupl short addr %x\n", short_addr);
    c866:	9500      	str	r5, [sp, #0]
    c868:	4b08      	ldr	r3, [pc, #32]	; (c88c <panmaster_add_node+0x15c>)
    c86a:	2203      	movs	r2, #3
    c86c:	215b      	movs	r1, #91	; 0x5b
    c86e:	4804      	ldr	r0, [pc, #16]	; (c880 <panmaster_add_node+0x150>)
    c870:	f007 fdd0 	bl	14414 <log_printf>
    c874:	e7df      	b.n	c836 <panmaster_add_node+0x106>
    c876:	bf00      	nop
    c878:	200005d4 	.word	0x200005d4
    c87c:	000255d4 	.word	0x000255d4
    c880:	20003464 	.word	0x20003464
    c884:	20003480 	.word	0x20003480
    c888:	000255f8 	.word	0x000255f8
    c88c:	000255e4 	.word	0x000255e4

0000c890 <panmaster_delete_node>:
{
    c890:	b530      	push	{r4, r5, lr}
    c892:	b093      	sub	sp, #76	; 0x4c
    c894:	4605      	mov	r5, r0
    c896:	460c      	mov	r4, r1
    struct find_node_s fns = { .results = &node };
    c898:	2228      	movs	r2, #40	; 0x28
    c89a:	2100      	movs	r1, #0
    c89c:	4668      	mov	r0, sp
    c89e:	f003 fefc 	bl	1069a <memset>
    c8a2:	ab0a      	add	r3, sp, #40	; 0x28
    c8a4:	9308      	str	r3, [sp, #32]
    PANMASTER_NODE_DEFAULT(fns.find);
    c8a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c8aa:	f8ad 3010 	strh.w	r3, [sp, #16]
    c8ae:	f88d 3015 	strb.w	r3, [sp, #21]
    c8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8b6:	f88d 3016 	strb.w	r3, [sp, #22]
    fns.find.euid = euid;
    c8ba:	9502      	str	r5, [sp, #8]
    c8bc:	9403      	str	r4, [sp, #12]
    panmaster_find_node_general(&fns);
    c8be:	4668      	mov	r0, sp
    c8c0:	f7ff fd0c 	bl	c2dc <panmaster_find_node_general>
    if (!fns.is_found) {
    c8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8c6:	b163      	cbz	r3, c8e2 <panmaster_delete_node+0x52>
    if (node.index >= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    c8c8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    c8cc:	2b3f      	cmp	r3, #63	; 0x3f
    c8ce:	d808      	bhi.n	c8e2 <panmaster_delete_node+0x52>
    if (node_idx[node.index].addr != node.addr)
    c8d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c8d4:	4914      	ldr	r1, [pc, #80]	; (c928 <panmaster_delete_node+0x98>)
    c8d6:	f831 1032 	ldrh.w	r1, [r1, r2, lsl #3]
    c8da:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    c8de:	4291      	cmp	r1, r2
    c8e0:	d001      	beq.n	c8e6 <panmaster_delete_node+0x56>
}
    c8e2:	b013      	add	sp, #76	; 0x4c
    c8e4:	bd30      	pop	{r4, r5, pc}
    node.addr = 0xFFFF;
    c8e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c8ea:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    node_idx[node.index].addr = 0xFFFF;
    c8ee:	4a0e      	ldr	r2, [pc, #56]	; (c928 <panmaster_delete_node+0x98>)
    c8f0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    c8f4:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
    c8f8:	f822 1034 	strh.w	r1, [r2, r4, lsl #3]
    node_idx[node.index].euid = 0xFFFFFFFFFFFFFFFFULL;
    c8fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c900:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    c904:	e9c0 4502 	strd	r4, r5, [r0, #8]
    node_idx[node.index].slot_id = 0xFFFF;
    c908:	8041      	strh	r1, [r0, #2]
    node_idx[node.index].has_perm_slot = 0;
    c90a:	7c42      	ldrb	r2, [r0, #17]
    c90c:	f36f 0200 	bfc	r2, #0, #1
    c910:	7442      	strb	r2, [r0, #17]
    panmaster_save_node(&node);
    c912:	a80a      	add	r0, sp, #40	; 0x28
    c914:	f7ff fe46 	bl	c5a4 <panmaster_save_node>
    PM_DEBUG("panmaster_delete_node: node deleted\n");
    c918:	4b04      	ldr	r3, [pc, #16]	; (c92c <panmaster_delete_node+0x9c>)
    c91a:	2200      	movs	r2, #0
    c91c:	215b      	movs	r1, #91	; 0x5b
    c91e:	4804      	ldr	r0, [pc, #16]	; (c930 <panmaster_delete_node+0xa0>)
    c920:	f007 fd78 	bl	14414 <log_printf>
    return;
    c924:	e7dd      	b.n	c8e2 <panmaster_delete_node+0x52>
    c926:	bf00      	nop
    c928:	20003480 	.word	0x20003480
    c92c:	0002560c 	.word	0x0002560c
    c930:	20003464 	.word	0x20003464

0000c934 <panmaster_compress>:
    return addr;
}

void
panmaster_compress()
{
    c934:	b508      	push	{r3, lr}
#if MYNEWT_VAL(PANMASTER_NFFS)
    panm_file_compress(&panmaster_storage_file, node_idx);
#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_fcb_compress(&pm_init_conf_fcb);
    c936:	4802      	ldr	r0, [pc, #8]	; (c940 <panmaster_compress+0xc>)
    c938:	f000 fc72 	bl	d220 <panm_fcb_compress>
#endif
}
    c93c:	bd08      	pop	{r3, pc}
    c93e:	bf00      	nop
    c940:	200005d4 	.word	0x200005d4

0000c944 <panmaster_sort>:

void
panmaster_sort()
{
    c944:	b510      	push	{r4, lr}
#if MYNEWT_VAL(PANMASTER_NFFS)
    // Do nothing
#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_fcb_sort(&pm_init_conf_fcb);
    c946:	4c04      	ldr	r4, [pc, #16]	; (c958 <panmaster_sort+0x14>)
    c948:	4620      	mov	r0, r4
    c94a:	f000 fd03 	bl	d354 <panm_fcb_sort>
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    c94e:	4903      	ldr	r1, [pc, #12]	; (c95c <panmaster_sort+0x18>)
    c950:	4620      	mov	r0, r4
    c952:	f000 fc53 	bl	d1fc <panm_fcb_load_idx>
#endif
}
    c956:	bd10      	pop	{r4, pc}
    c958:	200005d4 	.word	0x200005d4
    c95c:	20003480 	.word	0x20003480

0000c960 <panmaster_pkg_init>:

void
panmaster_pkg_init(void)
{
    c960:	b510      	push	{r4, lr}
    c962:	b082      	sub	sp, #8
    int i;
    int rc;

    /* Init log and Config */
    log_register("panmstr", &_log, &log_console_handler,
    c964:	2300      	movs	r3, #0
    c966:	9300      	str	r3, [sp, #0]
    c968:	4a31      	ldr	r2, [pc, #196]	; (ca30 <panmaster_pkg_init+0xd0>)
    c96a:	4932      	ldr	r1, [pc, #200]	; (ca34 <panmaster_pkg_init+0xd4>)
    c96c:	4832      	ldr	r0, [pc, #200]	; (ca38 <panmaster_pkg_init+0xd8>)
    c96e:	f007 fd99 	bl	144a4 <log_register>
                 NULL, LOG_SYSLEVEL);

    rc = conf_register(&pm_conf_cbs);
    c972:	4832      	ldr	r0, [pc, #200]	; (ca3c <panmaster_pkg_init+0xdc>)
    c974:	f006 fa46 	bl	12e04 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c978:	b138      	cbz	r0, c98a <panmaster_pkg_init+0x2a>
    c97a:	2000      	movs	r0, #0
    c97c:	9000      	str	r0, [sp, #0]
    c97e:	4b30      	ldr	r3, [pc, #192]	; (ca40 <panmaster_pkg_init+0xe0>)
    c980:	681c      	ldr	r4, [r3, #0]
    c982:	4603      	mov	r3, r0
    c984:	4602      	mov	r2, r0
    c986:	4601      	mov	r1, r0
    c988:	47a0      	blx	r4

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c98a:	4b2e      	ldr	r3, [pc, #184]	; (ca44 <panmaster_pkg_init+0xe4>)
    c98c:	781b      	ldrb	r3, [r3, #0]
    c98e:	b10b      	cbz	r3, c994 <panmaster_pkg_init+0x34>

    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c990:	2300      	movs	r3, #0
    c992:	e011      	b.n	c9b8 <panmaster_pkg_init+0x58>
    SYSINIT_ASSERT_ACTIVE();
    c994:	461a      	mov	r2, r3
    c996:	4619      	mov	r1, r3
    c998:	4618      	mov	r0, r3
    c99a:	f7fc fc13 	bl	91c4 <__assert_func>
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    c99e:	482a      	ldr	r0, [pc, #168]	; (ca48 <panmaster_pkg_init+0xe8>)
    c9a0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c9a4:	eb00 02cc 	add.w	r2, r0, ip, lsl #3
    c9a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c9ac:	f820 103c 	strh.w	r1, [r0, ip, lsl #3]
    c9b0:	8051      	strh	r1, [r2, #2]
    c9b2:	2100      	movs	r1, #0
    c9b4:	7411      	strb	r1, [r2, #16]
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c9b6:	3301      	adds	r3, #1
    c9b8:	2b3f      	cmp	r3, #63	; 0x3f
    c9ba:	ddf0      	ble.n	c99e <panmaster_pkg_init+0x3e>
    return (dpl_error_t)os_mutex_init(&mu->mu);
    c9bc:	4823      	ldr	r0, [pc, #140]	; (ca4c <panmaster_pkg_init+0xec>)
    c9be:	f7fe f94f 	bl	ac60 <os_mutex_init>
    }
    rc = dpl_mutex_init(&save_mutex);
    assert(rc == DPL_OK);
    c9c2:	bb40      	cbnz	r0, ca16 <panmaster_pkg_init+0xb6>
    memset(&nodes_to_save, 0, sizeof(nodes_to_save));
    c9c4:	22f8      	movs	r2, #248	; 0xf8
    c9c6:	2100      	movs	r1, #0
    c9c8:	4821      	ldr	r0, [pc, #132]	; (ca50 <panmaster_pkg_init+0xf0>)
    c9ca:	f003 fe66 	bl	1069a <memset>

#if MYNEWT_VAL(UWB_PAN_ENABLED)

#if MYNEWT_VAL(UWB_DEVICE_0)
    struct uwb_pan_instance * pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_PAN);
    c9ce:	2000      	movs	r0, #0
    c9d0:	f7fc f950 	bl	8c74 <uwb_dev_idx_lookup>
    c9d4:	2111      	movs	r1, #17
    c9d6:	f7fc f9d2 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(pan);
    c9da:	4604      	mov	r4, r0
    c9dc:	b308      	cbz	r0, ca22 <panmaster_pkg_init+0xc2>
    uwb_pan_set_postprocess(pan, postprocess_cb);
    c9de:	491d      	ldr	r1, [pc, #116]	; (ca54 <panmaster_pkg_init+0xf4>)
    c9e0:	f7ff faf8 	bl	bfd4 <uwb_pan_set_postprocess>
    uwb_pan_set_request_cb(pan, panrequest_cb);
    c9e4:	491c      	ldr	r1, [pc, #112]	; (ca58 <panmaster_pkg_init+0xf8>)
    c9e6:	4620      	mov	r0, r4
    c9e8:	f7ff faec 	bl	bfc4 <uwb_pan_set_request_cb>
#endif

#endif

#if MYNEWT_VAL(PANMASTER_CLI)
    rc = panmaster_cli_register();
    c9ec:	f000 fb14 	bl	d018 <panmaster_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c9f0:	b138      	cbz	r0, ca02 <panmaster_pkg_init+0xa2>
    c9f2:	2000      	movs	r0, #0
    c9f4:	9000      	str	r0, [sp, #0]
    c9f6:	4b12      	ldr	r3, [pc, #72]	; (ca40 <panmaster_pkg_init+0xe0>)
    c9f8:	681c      	ldr	r4, [r3, #0]
    c9fa:	4603      	mov	r3, r0
    c9fc:	4602      	mov	r2, r0
    c9fe:	4601      	mov	r1, r0
    ca00:	47a0      	blx	r4
#if MYNEWT_VAL(PANMASTER_SORT_AT_INIT)
    panm_file_compress(&panmaster_storage_file, node_idx);
#endif

#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_init_fcb();
    ca02:	f7ff fc11 	bl	c228 <panm_init_fcb>

#if MYNEWT_VAL(PANMASTER_SORT_AT_INIT)
    panmaster_sort();
    ca06:	f7ff ff9d 	bl	c944 <panmaster_sort>
#endif
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    ca0a:	490f      	ldr	r1, [pc, #60]	; (ca48 <panmaster_pkg_init+0xe8>)
    ca0c:	4813      	ldr	r0, [pc, #76]	; (ca5c <panmaster_pkg_init+0xfc>)
    ca0e:	f000 fbf5 	bl	d1fc <panm_fcb_load_idx>
#endif
}
    ca12:	b002      	add	sp, #8
    ca14:	bd10      	pop	{r4, pc}
    assert(rc == DPL_OK);
    ca16:	2300      	movs	r3, #0
    ca18:	461a      	mov	r2, r3
    ca1a:	4619      	mov	r1, r3
    ca1c:	4618      	mov	r0, r3
    ca1e:	f7fc fbd1 	bl	91c4 <__assert_func>
    assert(pan);
    ca22:	2300      	movs	r3, #0
    ca24:	461a      	mov	r2, r3
    ca26:	4619      	mov	r1, r3
    ca28:	4618      	mov	r0, r3
    ca2a:	f7fc fbcb 	bl	91c4 <__assert_func>
    ca2e:	bf00      	nop
    ca30:	00026124 	.word	0x00026124
    ca34:	20003464 	.word	0x20003464
    ca38:	00025634 	.word	0x00025634
    ca3c:	200005b4 	.word	0x200005b4
    ca40:	20000768 	.word	0x20000768
    ca44:	20004bb0 	.word	0x20004bb0
    ca48:	20003480 	.word	0x20003480
    ca4c:	20003c48 	.word	0x20003c48
    ca50:	20003a80 	.word	0x20003a80
    ca54:	0000c6fd 	.word	0x0000c6fd
    ca58:	0000c4f9 	.word	0x0000c4f9
    ca5c:	200005d4 	.word	0x200005d4

0000ca60 <dump>:

}

static void
dump(struct streamer *streamer)
{
    ca60:	b510      	push	{r4, lr}
    ca62:	4604      	mov	r4, r0
    streamer_printf(streamer, "# index addr euid flags role pslot slot_id fw-ver\n");
    ca64:	4903      	ldr	r1, [pc, #12]	; (ca74 <dump+0x14>)
    ca66:	f006 f83b 	bl	12ae0 <streamer_printf>
    panmaster_load(dump_cb, streamer);
    ca6a:	4621      	mov	r1, r4
    ca6c:	4802      	ldr	r0, [pc, #8]	; (ca78 <dump+0x18>)
    ca6e:	f7ff fd8f 	bl	c590 <panmaster_load>
}
    ca72:	bd10      	pop	{r4, pc}
    ca74:	0002563c 	.word	0x0002563c
    ca78:	0000ca7d 	.word	0x0000ca7d

0000ca7c <dump_cb>:
{
    ca7c:	b530      	push	{r4, r5, lr}
    ca7e:	b091      	sub	sp, #68	; 0x44
    ca80:	4604      	mov	r4, r0
    ca82:	460d      	mov	r5, r1
                   n->flags, n->role, n->has_perm_slot, n->slot_id);
    ca84:	8a42      	ldrh	r2, [r0, #18]
    ca86:	7cc3      	ldrb	r3, [r0, #19]
    ca88:	0919      	lsrs	r1, r3, #4
    ca8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ca8e:	f8b0 0015 	ldrh.w	r0, [r0, #21]
    streamer_printf(streamer, "%3d %04x %016llx %x %x %d %d ", n->index, n->addr, n->euid,
    ca92:	9005      	str	r0, [sp, #20]
    ca94:	9304      	str	r3, [sp, #16]
    ca96:	9103      	str	r1, [sp, #12]
    ca98:	9202      	str	r2, [sp, #8]
    ca9a:	68a2      	ldr	r2, [r4, #8]
    ca9c:	68e3      	ldr	r3, [r4, #12]
    ca9e:	9200      	str	r2, [sp, #0]
    caa0:	9301      	str	r3, [sp, #4]
    caa2:	8a23      	ldrh	r3, [r4, #16]
    caa4:	7d22      	ldrb	r2, [r4, #20]
    caa6:	490e      	ldr	r1, [pc, #56]	; (cae0 <dump_cb+0x64>)
    caa8:	4628      	mov	r0, r5
    caaa:	f006 f819 	bl	12ae0 <streamer_printf>
        .iv_major = n->fw_ver.iv_major,
    caae:	7de3      	ldrb	r3, [r4, #23]
    struct image_version fw_ver = {
    cab0:	f88d 3018 	strb.w	r3, [sp, #24]
        .iv_minor = n->fw_ver.iv_minor,
    cab4:	7e23      	ldrb	r3, [r4, #24]
    struct image_version fw_ver = {
    cab6:	f88d 3019 	strb.w	r3, [sp, #25]
        .iv_revision = n->fw_ver.iv_revision,
    caba:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    struct image_version fw_ver = {
    cabe:	f8ad 301a 	strh.w	r3, [sp, #26]
        .iv_build_num = n->fw_ver.iv_build_num,
    cac2:	f8d4 301b 	ldr.w	r3, [r4, #27]
    struct image_version fw_ver = {
    cac6:	9307      	str	r3, [sp, #28]
    imgr_ver_str(&fw_ver, ver_str);
    cac8:	a908      	add	r1, sp, #32
    caca:	a806      	add	r0, sp, #24
    cacc:	f005 fa46 	bl	11f5c <imgr_ver_str>
    streamer_printf(streamer, "%s\n", ver_str);
    cad0:	aa08      	add	r2, sp, #32
    cad2:	4904      	ldr	r1, [pc, #16]	; (cae4 <dump_cb+0x68>)
    cad4:	4628      	mov	r0, r5
    cad6:	f006 f803 	bl	12ae0 <streamer_printf>
}
    cada:	b011      	add	sp, #68	; 0x44
    cadc:	bd30      	pop	{r4, r5, pc}
    cade:	bf00      	nop
    cae0:	00025670 	.word	0x00025670
    cae4:	00025db0 	.word	0x00025db0

0000cae8 <list_nodes_blk>:
{
    cae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    caec:	b0a3      	sub	sp, #140	; 0x8c
    caee:	4605      	mov	r5, r0
    lne.nodes = (struct panmaster_node*)malloc(lne_nodes_sz);
    caf0:	f44f 7078 	mov.w	r0, #992	; 0x3e0
    caf4:	f003 fd54 	bl	105a0 <malloc>
    caf8:	9014      	str	r0, [sp, #80]	; 0x50
    if (!lne.nodes) {
    cafa:	b168      	cbz	r0, cb18 <list_nodes_blk+0x30>
    panmaster_node_idx(&node_idx, &num_nodes);
    cafc:	a90b      	add	r1, sp, #44	; 0x2c
    cafe:	a821      	add	r0, sp, #132	; 0x84
    cb00:	f7ff fbe4 	bl	c2cc <panmaster_node_idx>
    os_gettimeofday(&utctime, &timezone);
    cb04:	a917      	add	r1, sp, #92	; 0x5c
    cb06:	a818      	add	r0, sp, #96	; 0x60
    cb08:	f7fd fccc 	bl	a4a4 <os_gettimeofday>
    streamer_printf(streamer, "#idx, addr, role, slot, p,  lease, euid,             flags,          date-added, fw-ver\n");
    cb0c:	497a      	ldr	r1, [pc, #488]	; (ccf8 <list_nodes_blk+0x210>)
    cb0e:	4628      	mov	r0, r5
    cb10:	f005 ffe6 	bl	12ae0 <streamer_printf>
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    cb14:	2700      	movs	r7, #0
    cb16:	e0d4      	b.n	ccc2 <list_nodes_blk+0x1da>
        streamer_printf(streamer, "err:mem\n");
    cb18:	4978      	ldr	r1, [pc, #480]	; (ccfc <list_nodes_blk+0x214>)
    cb1a:	4628      	mov	r0, r5
    cb1c:	f005 ffe0 	bl	12ae0 <streamer_printf>
        return;
    cb20:	e0e7      	b.n	ccf2 <list_nodes_blk+0x20a>
                streamer_printf(streamer, "    , ");
    cb22:	4977      	ldr	r1, [pc, #476]	; (cd00 <list_nodes_blk+0x218>)
    cb24:	4628      	mov	r0, r5
    cb26:	f005 ffdb 	bl	12ae0 <streamer_printf>
    cb2a:	e091      	b.n	cc50 <list_nodes_blk+0x168>
            streamer_printf(streamer, "%s, ", (lne.nodes[j].has_perm_slot)?"p":" ");
    cb2c:	4a75      	ldr	r2, [pc, #468]	; (cd04 <list_nodes_blk+0x21c>)
    cb2e:	e097      	b.n	cc60 <list_nodes_blk+0x178>
                streamer_printf(streamer, "%4ld.%ld, ", le_ms/1000, (le_ms-1000*(le_ms/1000))/100);
    cb30:	4a75      	ldr	r2, [pc, #468]	; (cd08 <list_nodes_blk+0x220>)
    cb32:	fb82 1203 	smull	r1, r2, r2, r3
    cb36:	17d8      	asrs	r0, r3, #31
    cb38:	ebc0 11a2 	rsb	r1, r0, r2, asr #6
    cb3c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    cb40:	fb0c 3111 	mls	r1, ip, r1, r3
    cb44:	4b71      	ldr	r3, [pc, #452]	; (cd0c <list_nodes_blk+0x224>)
    cb46:	fb83 c301 	smull	ip, r3, r3, r1
    cb4a:	17c9      	asrs	r1, r1, #31
    cb4c:	ebc1 1363 	rsb	r3, r1, r3, asr #5
    cb50:	ebc0 12a2 	rsb	r2, r0, r2, asr #6
    cb54:	496e      	ldr	r1, [pc, #440]	; (cd10 <list_nodes_blk+0x228>)
    cb56:	4628      	mov	r0, r5
    cb58:	f005 ffc2 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "%016llX, ", lne.nodes[j].euid);
    cb5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb5e:	4423      	add	r3, r4
    cb60:	689a      	ldr	r2, [r3, #8]
    cb62:	68db      	ldr	r3, [r3, #12]
    cb64:	496b      	ldr	r1, [pc, #428]	; (cd14 <list_nodes_blk+0x22c>)
    cb66:	4628      	mov	r0, r5
    cb68:	f005 ffba 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "%5X, ", lne.nodes[j].flags);
    cb6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb6e:	4423      	add	r3, r4
    cb70:	8a5a      	ldrh	r2, [r3, #18]
    cb72:	4969      	ldr	r1, [pc, #420]	; (cd18 <list_nodes_blk+0x230>)
    cb74:	4628      	mov	r0, r5
    cb76:	f005 ffb3 	bl	12ae0 <streamer_printf>
            utctime.tv_sec = lne.nodes[j].first_seen_utc;
    cb7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb7c:	1919      	adds	r1, r3, r4
    cb7e:	591a      	ldr	r2, [r3, r4]
    cb80:	684b      	ldr	r3, [r1, #4]
    cb82:	9218      	str	r2, [sp, #96]	; 0x60
    cb84:	9319      	str	r3, [sp, #100]	; 0x64
            utctime.tv_usec = 0;
    cb86:	f04f 0900 	mov.w	r9, #0
    cb8a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
            datetime_format(&utctime, &timezone, buf, sizeof(buf));
    cb8e:	2320      	movs	r3, #32
    cb90:	aa03      	add	r2, sp, #12
    cb92:	a917      	add	r1, sp, #92	; 0x5c
    cb94:	a818      	add	r0, sp, #96	; 0x60
    cb96:	f00a fa71 	bl	1707c <datetime_format>
            buf[19]='\0';
    cb9a:	f88d 901f 	strb.w	r9, [sp, #31]
            streamer_printf(streamer, "%s, ", buf);
    cb9e:	aa03      	add	r2, sp, #12
    cba0:	495e      	ldr	r1, [pc, #376]	; (cd1c <list_nodes_blk+0x234>)
    cba2:	4628      	mov	r0, r5
    cba4:	f005 ff9c 	bl	12ae0 <streamer_printf>
                .iv_major = lne.nodes[j].fw_ver.iv_major,
    cba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbaa:	441c      	add	r4, r3
    cbac:	7de3      	ldrb	r3, [r4, #23]
            struct image_version fw_ver = {
    cbae:	f88d 3004 	strb.w	r3, [sp, #4]
                .iv_minor = lne.nodes[j].fw_ver.iv_minor,
    cbb2:	7e23      	ldrb	r3, [r4, #24]
            struct image_version fw_ver = {
    cbb4:	f88d 3005 	strb.w	r3, [sp, #5]
                .iv_revision = lne.nodes[j].fw_ver.iv_revision,
    cbb8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
            struct image_version fw_ver = {
    cbbc:	f8ad 3006 	strh.w	r3, [sp, #6]
                .iv_build_num = lne.nodes[j].fw_ver.iv_build_num,
    cbc0:	f8d4 301b 	ldr.w	r3, [r4, #27]
            struct image_version fw_ver = {
    cbc4:	9302      	str	r3, [sp, #8]
            imgr_ver_str(&fw_ver, ver_str);
    cbc6:	a90c      	add	r1, sp, #48	; 0x30
    cbc8:	a801      	add	r0, sp, #4
    cbca:	f005 f9c7 	bl	11f5c <imgr_ver_str>
            streamer_printf(streamer, "%s", ver_str);
    cbce:	aa0c      	add	r2, sp, #48	; 0x30
    cbd0:	4953      	ldr	r1, [pc, #332]	; (cd20 <list_nodes_blk+0x238>)
    cbd2:	4628      	mov	r0, r5
    cbd4:	f005 ff84 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "\n");
    cbd8:	4952      	ldr	r1, [pc, #328]	; (cd24 <list_nodes_blk+0x23c>)
    cbda:	4628      	mov	r0, r5
    cbdc:	f005 ff80 	bl	12ae0 <streamer_printf>
        for (j=0;j<LIST_NODES_BLK_NNODES;j++) {
    cbe0:	3601      	adds	r6, #1
    cbe2:	2e1f      	cmp	r6, #31
    cbe4:	dc6c      	bgt.n	ccc0 <list_nodes_blk+0x1d8>
            if (lne.nodes[j].addr == 0xffff) {
    cbe6:	ebc6 1446 	rsb	r4, r6, r6, lsl #5
    cbea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbec:	4423      	add	r3, r4
    cbee:	8a1a      	ldrh	r2, [r3, #16]
    cbf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cbf4:	429a      	cmp	r2, r3
    cbf6:	d0f3      	beq.n	cbe0 <list_nodes_blk+0xf8>
            streamer_printf(streamer, "%4d, ", i+j);
    cbf8:	19ba      	adds	r2, r7, r6
    cbfa:	494b      	ldr	r1, [pc, #300]	; (cd28 <list_nodes_blk+0x240>)
    cbfc:	4628      	mov	r0, r5
    cbfe:	f005 ff6f 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "%4x, ", lne.nodes[j].addr);
    cc02:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc04:	4423      	add	r3, r4
    cc06:	8a1a      	ldrh	r2, [r3, #16]
    cc08:	4948      	ldr	r1, [pc, #288]	; (cd2c <list_nodes_blk+0x244>)
    cc0a:	4628      	mov	r0, r5
    cc0c:	f005 ff68 	bl	12ae0 <streamer_printf>
            int slot_id = node_idx[lne.nodes[j].index].slot_id;
    cc10:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc12:	4423      	add	r3, r4
    cc14:	7d1a      	ldrb	r2, [r3, #20]
    cc16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    cc1a:	9921      	ldr	r1, [sp, #132]	; 0x84
    cc1c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    cc20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
            if (lne.nodes[j].has_perm_slot) {
    cc24:	7cda      	ldrb	r2, [r3, #19]
    cc26:	f012 0f08 	tst.w	r2, #8
    cc2a:	d001      	beq.n	cc30 <list_nodes_blk+0x148>
                slot_id = lne.nodes[j].slot_id;
    cc2c:	f8b3 9015 	ldrh.w	r9, [r3, #21]
            streamer_printf(streamer, "%4X, ", lne.nodes[j].role);
    cc30:	7cda      	ldrb	r2, [r3, #19]
    cc32:	0912      	lsrs	r2, r2, #4
    cc34:	493e      	ldr	r1, [pc, #248]	; (cd30 <list_nodes_blk+0x248>)
    cc36:	4628      	mov	r0, r5
    cc38:	f005 ff52 	bl	12ae0 <streamer_printf>
            if (slot_id != 0xffff) {
    cc3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc40:	4599      	cmp	r9, r3
    cc42:	f43f af6e 	beq.w	cb22 <list_nodes_blk+0x3a>
                streamer_printf(streamer, "%4d, ", slot_id);
    cc46:	464a      	mov	r2, r9
    cc48:	4937      	ldr	r1, [pc, #220]	; (cd28 <list_nodes_blk+0x240>)
    cc4a:	4628      	mov	r0, r5
    cc4c:	f005 ff48 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "%s, ", (lne.nodes[j].has_perm_slot)?"p":" ");
    cc50:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc52:	4423      	add	r3, r4
    cc54:	7cdb      	ldrb	r3, [r3, #19]
    cc56:	f013 0f08 	tst.w	r3, #8
    cc5a:	f43f af67 	beq.w	cb2c <list_nodes_blk+0x44>
    cc5e:	4a35      	ldr	r2, [pc, #212]	; (cd34 <list_nodes_blk+0x24c>)
    cc60:	492e      	ldr	r1, [pc, #184]	; (cd1c <list_nodes_blk+0x234>)
    cc62:	4628      	mov	r0, r5
    cc64:	f005 ff3c 	bl	12ae0 <streamer_printf>
            if (node_idx[lne.nodes[j].index].lease_ends) {
    cc68:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc6a:	4423      	add	r3, r4
    cc6c:	7d1b      	ldrb	r3, [r3, #20]
    cc6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cc72:	9a21      	ldr	r2, [sp, #132]	; 0x84
    cc74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cc78:	695b      	ldr	r3, [r3, #20]
    cc7a:	b1e3      	cbz	r3, ccb6 <list_nodes_blk+0x1ce>
                os_get_uptime(&tv);
    cc7c:	a81c      	add	r0, sp, #112	; 0x70
    cc7e:	f7fd fc97 	bl	a5b0 <os_get_uptime>
                int32_t le_ms = node_idx[lne.nodes[j].index].lease_ends;
    cc82:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc84:	4423      	add	r3, r4
    cc86:	7d1b      	ldrb	r3, [r3, #20]
    cc88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cc8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
    cc8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cc92:	6959      	ldr	r1, [r3, #20]
                int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    cc94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    cc96:	481c      	ldr	r0, [pc, #112]	; (cd08 <list_nodes_blk+0x220>)
    cc98:	fb80 3002 	smull	r3, r0, r0, r2
    cc9c:	17d3      	asrs	r3, r2, #31
    cc9e:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
    cca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    cca6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cca8:	fb00 3302 	mla	r3, r0, r2, r3
                if (le_ms < 0) le_ms = 0;
    ccac:	1acb      	subs	r3, r1, r3
    ccae:	f57f af3f 	bpl.w	cb30 <list_nodes_blk+0x48>
    ccb2:	2300      	movs	r3, #0
    ccb4:	e73c      	b.n	cb30 <list_nodes_blk+0x48>
                streamer_printf(streamer, "      , ");
    ccb6:	4920      	ldr	r1, [pc, #128]	; (cd38 <list_nodes_blk+0x250>)
    ccb8:	4628      	mov	r0, r5
    ccba:	f005 ff11 	bl	12ae0 <streamer_printf>
    ccbe:	e74d      	b.n	cb5c <list_nodes_blk+0x74>
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    ccc0:	4647      	mov	r7, r8
    ccc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccc4:	42bb      	cmp	r3, r7
    ccc6:	dd11      	ble.n	ccec <list_nodes_blk+0x204>
        lne.index_off = i;
    ccc8:	9715      	str	r7, [sp, #84]	; 0x54
        lne.index_max = i+LIST_NODES_BLK_NNODES;
    ccca:	f107 0820 	add.w	r8, r7, #32
    ccce:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        memset(lne.nodes, 0xffff, lne_nodes_sz);
    ccd2:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    ccd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ccda:	9814      	ldr	r0, [sp, #80]	; 0x50
    ccdc:	f003 fcdd 	bl	1069a <memset>
        panmaster_load(list_nodes_load_cb, &lne);
    cce0:	a914      	add	r1, sp, #80	; 0x50
    cce2:	4816      	ldr	r0, [pc, #88]	; (cd3c <list_nodes_blk+0x254>)
    cce4:	f7ff fc54 	bl	c590 <panmaster_load>
        for (j=0;j<LIST_NODES_BLK_NNODES;j++) {
    cce8:	2600      	movs	r6, #0
    ccea:	e77a      	b.n	cbe2 <list_nodes_blk+0xfa>
    free(lne.nodes);
    ccec:	9814      	ldr	r0, [sp, #80]	; 0x50
    ccee:	f003 fc8d 	bl	1060c <free>
}
    ccf2:	b023      	add	sp, #140	; 0x8c
    ccf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ccf8:	000256a0 	.word	0x000256a0
    ccfc:	00025694 	.word	0x00025694
    cd00:	00025714 	.word	0x00025714
    cd04:	00025710 	.word	0x00025710
    cd08:	10624dd3 	.word	0x10624dd3
    cd0c:	51eb851f 	.word	0x51eb851f
    cd10:	00025724 	.word	0x00025724
    cd14:	0002573c 	.word	0x0002573c
    cd18:	00025748 	.word	0x00025748
    cd1c:	0002571c 	.word	0x0002571c
    cd20:	00025750 	.word	0x00025750
    cd24:	00026304 	.word	0x00026304
    cd28:	000256fc 	.word	0x000256fc
    cd2c:	00025704 	.word	0x00025704
    cd30:	0002570c 	.word	0x0002570c
    cd34:	00025690 	.word	0x00025690
    cd38:	00025730 	.word	0x00025730
    cd3c:	0000cfc5 	.word	0x0000cfc5

0000cd40 <panmaster_cli_cmd>:

static int
panmaster_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
    cd40:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd42:	b087      	sub	sp, #28
    cd44:	461f      	mov	r7, r3
    int slot_id, role;
    uint16_t addr;
    uint64_t euid;
    struct panmaster_node *node;

    if (argc < 2) {
    cd46:	2901      	cmp	r1, #1
    cd48:	dd2d      	ble.n	cda6 <panmaster_cli_cmd+0x66>
    cd4a:	460c      	mov	r4, r1
    cd4c:	4615      	mov	r5, r2
        streamer_printf(streamer, "Too few args\n");
        return 0;
    }
    if (!strcmp(argv[1], "list")) {
    cd4e:	6856      	ldr	r6, [r2, #4]
    cd50:	4987      	ldr	r1, [pc, #540]	; (cf70 <panmaster_cli_cmd+0x230>)
    cd52:	4630      	mov	r0, r6
    cd54:	f003 fccc 	bl	106f0 <strcmp>
    cd58:	b350      	cbz	r0, cdb0 <panmaster_cli_cmd+0x70>
        list_nodes_blk(streamer);
    } else if (!strcmp(argv[1], "add")) {
    cd5a:	4986      	ldr	r1, [pc, #536]	; (cf74 <panmaster_cli_cmd+0x234>)
    cd5c:	4630      	mov	r0, r6
    cd5e:	f003 fcc7 	bl	106f0 <strcmp>
    cd62:	2800      	cmp	r0, #0
    cd64:	d13f      	bne.n	cde6 <panmaster_cli_cmd+0xa6>
        if (argc < 3) {
    cd66:	2c02      	cmp	r4, #2
    cd68:	dd28      	ble.n	cdbc <panmaster_cli_cmd+0x7c>
            streamer_printf(streamer, "euid needed\n");
            return 0;
        }
        euid = strtoll(argv[2], NULL, 16);
    cd6a:	2210      	movs	r2, #16
    cd6c:	2100      	movs	r1, #0
    cd6e:	68a8      	ldr	r0, [r5, #8]
    cd70:	f003 fce1 	bl	10736 <strtoll>
    cd74:	9004      	str	r0, [sp, #16]
    cd76:	9105      	str	r1, [sp, #20]
        if (!euid) {
    cd78:	ea51 0300 	orrs.w	r3, r1, r0
    cd7c:	d01b      	beq.n	cdb6 <panmaster_cli_cmd+0x76>
            return 0;
        }
        if (argc > 3) {
    cd7e:	2c03      	cmp	r4, #3
    cd80:	dc21      	bgt.n	cdc6 <panmaster_cli_cmd+0x86>
            addr = strtoll(argv[3], NULL, 16);
            panmaster_add_node(addr, 0, (uint8_t*)&euid);
            return 0;
        }

        rc = panmaster_idx_find_node(euid, 0, &node);
    cd82:	ab03      	add	r3, sp, #12
    cd84:	2200      	movs	r2, #0
    cd86:	f7ff facb 	bl	c320 <panmaster_idx_find_node>
    cd8a:	4604      	mov	r4, r0
        panmaster_postprocess();
    cd8c:	f7ff fc6c 	bl	c668 <panmaster_postprocess>
        if (!rc) {
    cd90:	bb24      	cbnz	r4, cddc <panmaster_cli_cmd+0x9c>
            streamer_printf(streamer, "Added node euid: 0x%llX, addr 0x%X\n",
                           euid, node->addr);
    cd92:	9b03      	ldr	r3, [sp, #12]
    cd94:	8a1b      	ldrh	r3, [r3, #16]
            streamer_printf(streamer, "Added node euid: 0x%llX, addr 0x%X\n",
    cd96:	9300      	str	r3, [sp, #0]
    cd98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    cd9c:	4976      	ldr	r1, [pc, #472]	; (cf78 <panmaster_cli_cmd+0x238>)
    cd9e:	4638      	mov	r0, r7
    cda0:	f005 fe9e 	bl	12ae0 <streamer_printf>
    cda4:	e007      	b.n	cdb6 <panmaster_cli_cmd+0x76>
        streamer_printf(streamer, "Too few args\n");
    cda6:	4975      	ldr	r1, [pc, #468]	; (cf7c <panmaster_cli_cmd+0x23c>)
    cda8:	4618      	mov	r0, r3
    cdaa:	f005 fe99 	bl	12ae0 <streamer_printf>
        return 0;
    cdae:	e002      	b.n	cdb6 <panmaster_cli_cmd+0x76>
        list_nodes_blk(streamer);
    cdb0:	4638      	mov	r0, r7
    cdb2:	f7ff fe99 	bl	cae8 <list_nodes_blk>
        dump(streamer);
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
    }
    return 0;
}
    cdb6:	2000      	movs	r0, #0
    cdb8:	b007      	add	sp, #28
    cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            streamer_printf(streamer, "euid needed\n");
    cdbc:	4970      	ldr	r1, [pc, #448]	; (cf80 <panmaster_cli_cmd+0x240>)
    cdbe:	4638      	mov	r0, r7
    cdc0:	f005 fe8e 	bl	12ae0 <streamer_printf>
            return 0;
    cdc4:	e7f7      	b.n	cdb6 <panmaster_cli_cmd+0x76>
            addr = strtoll(argv[3], NULL, 16);
    cdc6:	2210      	movs	r2, #16
    cdc8:	2100      	movs	r1, #0
    cdca:	68e8      	ldr	r0, [r5, #12]
    cdcc:	f003 fcb3 	bl	10736 <strtoll>
            panmaster_add_node(addr, 0, (uint8_t*)&euid);
    cdd0:	aa04      	add	r2, sp, #16
    cdd2:	2100      	movs	r1, #0
    cdd4:	b280      	uxth	r0, r0
    cdd6:	f7ff fcab 	bl	c730 <panmaster_add_node>
            return 0;
    cdda:	e7ec      	b.n	cdb6 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "Add node err\n");
    cddc:	4969      	ldr	r1, [pc, #420]	; (cf84 <panmaster_cli_cmd+0x244>)
    cdde:	4638      	mov	r0, r7
    cde0:	f005 fe7e 	bl	12ae0 <streamer_printf>
    cde4:	e7e7      	b.n	cdb6 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "del")) {
    cde6:	4968      	ldr	r1, [pc, #416]	; (cf88 <panmaster_cli_cmd+0x248>)
    cde8:	4630      	mov	r0, r6
    cdea:	f003 fc81 	bl	106f0 <strcmp>
    cdee:	b990      	cbnz	r0, ce16 <panmaster_cli_cmd+0xd6>
        if (argc < 3) {
    cdf0:	2c02      	cmp	r4, #2
    cdf2:	dd0b      	ble.n	ce0c <panmaster_cli_cmd+0xcc>
        euid = strtoll(argv[2], NULL, 16);
    cdf4:	2210      	movs	r2, #16
    cdf6:	2100      	movs	r1, #0
    cdf8:	68a8      	ldr	r0, [r5, #8]
    cdfa:	f003 fc9c 	bl	10736 <strtoll>
    cdfe:	4602      	mov	r2, r0
    ce00:	460b      	mov	r3, r1
    ce02:	e9cd 2304 	strd	r2, r3, [sp, #16]
        panmaster_delete_node(euid);
    ce06:	f7ff fd43 	bl	c890 <panmaster_delete_node>
    ce0a:	e7d4      	b.n	cdb6 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "euid needed\n");
    ce0c:	495c      	ldr	r1, [pc, #368]	; (cf80 <panmaster_cli_cmd+0x240>)
    ce0e:	4638      	mov	r0, r7
    ce10:	f005 fe66 	bl	12ae0 <streamer_printf>
            return 0;
    ce14:	e7cf      	b.n	cdb6 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "pslot")) {
    ce16:	495d      	ldr	r1, [pc, #372]	; (cf8c <panmaster_cli_cmd+0x24c>)
    ce18:	4630      	mov	r0, r6
    ce1a:	f003 fc69 	bl	106f0 <strcmp>
    ce1e:	2800      	cmp	r0, #0
    ce20:	d147      	bne.n	ceb2 <panmaster_cli_cmd+0x172>
        if (argc < 4) {
    ce22:	2c03      	cmp	r4, #3
    ce24:	dd2e      	ble.n	ce84 <panmaster_cli_cmd+0x144>
        euid = strtoll(argv[2], NULL, 16);
    ce26:	2210      	movs	r2, #16
    ce28:	2100      	movs	r1, #0
    ce2a:	68a8      	ldr	r0, [r5, #8]
    ce2c:	f003 fc83 	bl	10736 <strtoll>
    ce30:	9004      	str	r0, [sp, #16]
    ce32:	9105      	str	r1, [sp, #20]
        if (!euid) {
    ce34:	ea51 0300 	orrs.w	r3, r1, r0
    ce38:	d0bd      	beq.n	cdb6 <panmaster_cli_cmd+0x76>
        slot_id = strtoll(argv[3], NULL, 0);
    ce3a:	2200      	movs	r2, #0
    ce3c:	4611      	mov	r1, r2
    ce3e:	68e8      	ldr	r0, [r5, #12]
    ce40:	f003 fc79 	bl	10736 <strtoll>
    ce44:	4604      	mov	r4, r0
        rc = panmaster_idx_find_node(euid, 0, &node);
    ce46:	ab03      	add	r3, sp, #12
    ce48:	2200      	movs	r2, #0
    ce4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ce4e:	f7ff fa67 	bl	c320 <panmaster_idx_find_node>
        if (!rc) {
    ce52:	bb48      	cbnz	r0, cea8 <panmaster_cli_cmd+0x168>
            streamer_printf(streamer, "0x%llX: pslot -> ", euid);
    ce54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ce58:	494d      	ldr	r1, [pc, #308]	; (cf90 <panmaster_cli_cmd+0x250>)
    ce5a:	4638      	mov	r0, r7
    ce5c:	f005 fe40 	bl	12ae0 <streamer_printf>
            if (slot_id > -1) {
    ce60:	2c00      	cmp	r4, #0
    ce62:	db14      	blt.n	ce8e <panmaster_cli_cmd+0x14e>
                node->slot_id = slot_id;
    ce64:	9b03      	ldr	r3, [sp, #12]
    ce66:	f8a3 4015 	strh.w	r4, [r3, #21]
                node->has_perm_slot = 1;
    ce6a:	7cda      	ldrb	r2, [r3, #19]
    ce6c:	f042 0208 	orr.w	r2, r2, #8
    ce70:	74da      	strb	r2, [r3, #19]
                streamer_printf(streamer, "%d\n ", slot_id);
    ce72:	4622      	mov	r2, r4
    ce74:	4947      	ldr	r1, [pc, #284]	; (cf94 <panmaster_cli_cmd+0x254>)
    ce76:	4638      	mov	r0, r7
    ce78:	f005 fe32 	bl	12ae0 <streamer_printf>
            panmaster_save_node(node);
    ce7c:	9803      	ldr	r0, [sp, #12]
    ce7e:	f7ff fb91 	bl	c5a4 <panmaster_save_node>
    ce82:	e798      	b.n	cdb6 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "euid+slot_id needed\n");
    ce84:	4944      	ldr	r1, [pc, #272]	; (cf98 <panmaster_cli_cmd+0x258>)
    ce86:	4638      	mov	r0, r7
    ce88:	f005 fe2a 	bl	12ae0 <streamer_printf>
            return 0;
    ce8c:	e793      	b.n	cdb6 <panmaster_cli_cmd+0x76>
                node->slot_id = 0;
    ce8e:	9b03      	ldr	r3, [sp, #12]
    ce90:	2200      	movs	r2, #0
    ce92:	755a      	strb	r2, [r3, #21]
    ce94:	759a      	strb	r2, [r3, #22]
                node->has_perm_slot = 0;
    ce96:	7cd9      	ldrb	r1, [r3, #19]
    ce98:	f362 01c3 	bfi	r1, r2, #3, #1
    ce9c:	74d9      	strb	r1, [r3, #19]
                streamer_printf(streamer, "<removed>\n");
    ce9e:	493f      	ldr	r1, [pc, #252]	; (cf9c <panmaster_cli_cmd+0x25c>)
    cea0:	4638      	mov	r0, r7
    cea2:	f005 fe1d 	bl	12ae0 <streamer_printf>
    cea6:	e7e9      	b.n	ce7c <panmaster_cli_cmd+0x13c>
            streamer_printf(streamer, "err\n");
    cea8:	493d      	ldr	r1, [pc, #244]	; (cfa0 <panmaster_cli_cmd+0x260>)
    ceaa:	4638      	mov	r0, r7
    ceac:	f005 fe18 	bl	12ae0 <streamer_printf>
    ceb0:	e781      	b.n	cdb6 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "role")) {
    ceb2:	493c      	ldr	r1, [pc, #240]	; (cfa4 <panmaster_cli_cmd+0x264>)
    ceb4:	4630      	mov	r0, r6
    ceb6:	f003 fc1b 	bl	106f0 <strcmp>
    ceba:	bb90      	cbnz	r0, cf22 <panmaster_cli_cmd+0x1e2>
        if (argc < 4) {
    cebc:	2c03      	cmp	r4, #3
    cebe:	dd26      	ble.n	cf0e <panmaster_cli_cmd+0x1ce>
        euid = strtoll(argv[2], NULL, 16);
    cec0:	2210      	movs	r2, #16
    cec2:	2100      	movs	r1, #0
    cec4:	68a8      	ldr	r0, [r5, #8]
    cec6:	f003 fc36 	bl	10736 <strtoll>
    ceca:	9004      	str	r0, [sp, #16]
    cecc:	9105      	str	r1, [sp, #20]
        if (!euid) {
    cece:	ea51 0300 	orrs.w	r3, r1, r0
    ced2:	f43f af70 	beq.w	cdb6 <panmaster_cli_cmd+0x76>
        role = strtoll(argv[3], NULL, 0);
    ced6:	2200      	movs	r2, #0
    ced8:	4611      	mov	r1, r2
    ceda:	68e8      	ldr	r0, [r5, #12]
    cedc:	f003 fc2b 	bl	10736 <strtoll>
    cee0:	4604      	mov	r4, r0
        rc = panmaster_idx_find_node(euid, 0, &node);
    cee2:	ab03      	add	r3, sp, #12
    cee4:	2200      	movs	r2, #0
    cee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ceea:	f7ff fa19 	bl	c320 <panmaster_idx_find_node>
        if (!rc) {
    ceee:	b998      	cbnz	r0, cf18 <panmaster_cli_cmd+0x1d8>
            streamer_printf(streamer, "0x%llX: role -> %d\n ", euid, role);
    cef0:	9400      	str	r4, [sp, #0]
    cef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    cef6:	492c      	ldr	r1, [pc, #176]	; (cfa8 <panmaster_cli_cmd+0x268>)
    cef8:	4638      	mov	r0, r7
    cefa:	f005 fdf1 	bl	12ae0 <streamer_printf>
            node->role = role;
    cefe:	9803      	ldr	r0, [sp, #12]
    cf00:	7cc3      	ldrb	r3, [r0, #19]
    cf02:	f364 1307 	bfi	r3, r4, #4, #4
    cf06:	74c3      	strb	r3, [r0, #19]
            panmaster_save_node(node);
    cf08:	f7ff fb4c 	bl	c5a4 <panmaster_save_node>
    cf0c:	e753      	b.n	cdb6 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "euid+role needed\n");
    cf0e:	4927      	ldr	r1, [pc, #156]	; (cfac <panmaster_cli_cmd+0x26c>)
    cf10:	4638      	mov	r0, r7
    cf12:	f005 fde5 	bl	12ae0 <streamer_printf>
            return 0;
    cf16:	e74e      	b.n	cdb6 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "err\n");
    cf18:	4921      	ldr	r1, [pc, #132]	; (cfa0 <panmaster_cli_cmd+0x260>)
    cf1a:	4638      	mov	r0, r7
    cf1c:	f005 fde0 	bl	12ae0 <streamer_printf>
    cf20:	e749      	b.n	cdb6 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "clear")) {
    cf22:	4923      	ldr	r1, [pc, #140]	; (cfb0 <panmaster_cli_cmd+0x270>)
    cf24:	4630      	mov	r0, r6
    cf26:	f003 fbe3 	bl	106f0 <strcmp>
    cf2a:	b190      	cbz	r0, cf52 <panmaster_cli_cmd+0x212>
    } else if (!strcmp(argv[1], "compr")) {
    cf2c:	4921      	ldr	r1, [pc, #132]	; (cfb4 <panmaster_cli_cmd+0x274>)
    cf2e:	4630      	mov	r0, r6
    cf30:	f003 fbde 	bl	106f0 <strcmp>
    cf34:	b180      	cbz	r0, cf58 <panmaster_cli_cmd+0x218>
    } else if (!strcmp(argv[1], "sort")) {
    cf36:	4920      	ldr	r1, [pc, #128]	; (cfb8 <panmaster_cli_cmd+0x278>)
    cf38:	4630      	mov	r0, r6
    cf3a:	f003 fbd9 	bl	106f0 <strcmp>
    cf3e:	b170      	cbz	r0, cf5e <panmaster_cli_cmd+0x21e>
    } else if (!strcmp(argv[1], "dump")) {
    cf40:	491e      	ldr	r1, [pc, #120]	; (cfbc <panmaster_cli_cmd+0x27c>)
    cf42:	4630      	mov	r0, r6
    cf44:	f003 fbd4 	bl	106f0 <strcmp>
    cf48:	b960      	cbnz	r0, cf64 <panmaster_cli_cmd+0x224>
        dump(streamer);
    cf4a:	4638      	mov	r0, r7
    cf4c:	f7ff fd88 	bl	ca60 <dump>
    cf50:	e731      	b.n	cdb6 <panmaster_cli_cmd+0x76>
        panmaster_clear_list();
    cf52:	f7ff f9cb 	bl	c2ec <panmaster_clear_list>
    cf56:	e72e      	b.n	cdb6 <panmaster_cli_cmd+0x76>
        panmaster_compress();
    cf58:	f7ff fcec 	bl	c934 <panmaster_compress>
    cf5c:	e72b      	b.n	cdb6 <panmaster_cli_cmd+0x76>
        panmaster_sort();
    cf5e:	f7ff fcf1 	bl	c944 <panmaster_sort>
    cf62:	e728      	b.n	cdb6 <panmaster_cli_cmd+0x76>
        streamer_printf(streamer, "Unknown cmd\n");
    cf64:	4916      	ldr	r1, [pc, #88]	; (cfc0 <panmaster_cli_cmd+0x280>)
    cf66:	4638      	mov	r0, r7
    cf68:	f005 fdba 	bl	12ae0 <streamer_printf>
    cf6c:	e723      	b.n	cdb6 <panmaster_cli_cmd+0x76>
    cf6e:	bf00      	nop
    cf70:	00025764 	.word	0x00025764
    cf74:	0002576c 	.word	0x0002576c
    cf78:	00025780 	.word	0x00025780
    cf7c:	00025754 	.word	0x00025754
    cf80:	00025770 	.word	0x00025770
    cf84:	000257a4 	.word	0x000257a4
    cf88:	000257b4 	.word	0x000257b4
    cf8c:	000257b8 	.word	0x000257b8
    cf90:	000257d8 	.word	0x000257d8
    cf94:	0002582c 	.word	0x0002582c
    cf98:	000257c0 	.word	0x000257c0
    cf9c:	000257ec 	.word	0x000257ec
    cfa0:	000257f8 	.word	0x000257f8
    cfa4:	00025800 	.word	0x00025800
    cfa8:	0002581c 	.word	0x0002581c
    cfac:	00025808 	.word	0x00025808
    cfb0:	00025834 	.word	0x00025834
    cfb4:	0002583c 	.word	0x0002583c
    cfb8:	00025844 	.word	0x00025844
    cfbc:	0002584c 	.word	0x0002584c
    cfc0:	00025854 	.word	0x00025854

0000cfc4 <list_nodes_load_cb>:
    if (node->index < lne->index_max  &&
    cfc4:	7d03      	ldrb	r3, [r0, #20]
    cfc6:	688a      	ldr	r2, [r1, #8]
    cfc8:	4293      	cmp	r3, r2
    cfca:	da02      	bge.n	cfd2 <list_nodes_load_cb+0xe>
        node->index >= lne->index_off) {
    cfcc:	684a      	ldr	r2, [r1, #4]
    if (node->index < lne->index_max  &&
    cfce:	4293      	cmp	r3, r2
    cfd0:	da00      	bge.n	cfd4 <list_nodes_load_cb+0x10>
    cfd2:	4770      	bx	lr
{
    cfd4:	b530      	push	{r4, r5, lr}
        memcpy(&lne->nodes[node->index - lne->index_off], node,
    cfd6:	680c      	ldr	r4, [r1, #0]
    cfd8:	1a9b      	subs	r3, r3, r2
    cfda:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    cfde:	18e2      	adds	r2, r4, r3
    cfe0:	f8d0 e000 	ldr.w	lr, [r0]
    cfe4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    cfe8:	6881      	ldr	r1, [r0, #8]
    cfea:	68c5      	ldr	r5, [r0, #12]
    cfec:	f844 e003 	str.w	lr, [r4, r3]
    cff0:	f8c2 c004 	str.w	ip, [r2, #4]
    cff4:	6091      	str	r1, [r2, #8]
    cff6:	60d5      	str	r5, [r2, #12]
    cff8:	f8d0 e010 	ldr.w	lr, [r0, #16]
    cffc:	f8d0 c014 	ldr.w	ip, [r0, #20]
    d000:	6981      	ldr	r1, [r0, #24]
    d002:	f8c2 e010 	str.w	lr, [r2, #16]
    d006:	f8c2 c014 	str.w	ip, [r2, #20]
    d00a:	6191      	str	r1, [r2, #24]
    d00c:	8b81      	ldrh	r1, [r0, #28]
    d00e:	7f83      	ldrb	r3, [r0, #30]
    d010:	8391      	strh	r1, [r2, #28]
    d012:	7793      	strb	r3, [r2, #30]
}
    d014:	bd30      	pop	{r4, r5, pc}
	...

0000d018 <panmaster_cli_register>:

int
panmaster_cli_register(void)
{
    d018:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_panmaster_cmd);
    d01a:	4802      	ldr	r0, [pc, #8]	; (d024 <panmaster_cli_register+0xc>)
    d01c:	f008 fbf2 	bl	15804 <shell_cmd_register>
}
    d020:	bd08      	pop	{r3, pc}
    d022:	bf00      	nop
    d024:	20000604 	.word	0x20000604

0000d028 <node_idx_load_cb>:
static void
node_idx_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct panmaster_node_idx *nodes = (struct panmaster_node_idx*)cb_arg;

    if (node->index <= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    d028:	7d03      	ldrb	r3, [r0, #20]
    d02a:	2b40      	cmp	r3, #64	; 0x40
    d02c:	d83b      	bhi.n	d0a6 <node_idx_load_cb+0x7e>
{
    d02e:	b410      	push	{r4}
        nodes[node->index].addr = node->addr;
    d030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d034:	8a02      	ldrh	r2, [r0, #16]
    d036:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
        nodes[node->index].euid = node->euid;
    d03a:	7d03      	ldrb	r3, [r0, #20]
    d03c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d040:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d044:	6884      	ldr	r4, [r0, #8]
    d046:	68c2      	ldr	r2, [r0, #12]
    d048:	609c      	str	r4, [r3, #8]
    d04a:	60da      	str	r2, [r3, #12]
        nodes[node->index].role = node->role;
    d04c:	7d03      	ldrb	r3, [r0, #20]
    d04e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d052:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d056:	7cc2      	ldrb	r2, [r0, #19]
    d058:	f3c2 1203 	ubfx	r2, r2, #4, #4
    d05c:	741a      	strb	r2, [r3, #16]
        nodes[node->index].has_perm_slot = node->has_perm_slot;
    d05e:	7d03      	ldrb	r3, [r0, #20]
    d060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d064:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d068:	7cc2      	ldrb	r2, [r0, #19]
    d06a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d06e:	f893 c011 	ldrb.w	ip, [r3, #17]
    d072:	f362 0c00 	bfi	ip, r2, #0, #1
    d076:	f883 c011 	strb.w	ip, [r3, #17]
        if (node->has_perm_slot) {
    d07a:	7cc3      	ldrb	r3, [r0, #19]
    d07c:	f013 0f08 	tst.w	r3, #8
    d080:	d00e      	beq.n	d0a0 <node_idx_load_cb+0x78>
            nodes[node->index].slot_id = node->slot_id;
    d082:	7d03      	ldrb	r3, [r0, #20]
    d084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d088:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d08c:	f8b0 2015 	ldrh.w	r2, [r0, #21]
    d090:	805a      	strh	r2, [r3, #2]
            nodes[node->index].lease_ends = 0;
    d092:	7d03      	ldrb	r3, [r0, #20]
    d094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d09c:	2300      	movs	r3, #0
    d09e:	614b      	str	r3, [r1, #20]
        }
    }
}
    d0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    d0a4:	4770      	bx	lr
    d0a6:	4770      	bx	lr

0000d0a8 <fcb_load_cb>:
{
    d0a8:	b530      	push	{r4, r5, lr}
    d0aa:	b089      	sub	sp, #36	; 0x24
    d0ac:	4604      	mov	r4, r0
    d0ae:	460d      	mov	r5, r1
    memset(&tmpnode,0,sizeof(struct panmaster_node));
    d0b0:	221f      	movs	r2, #31
    d0b2:	2100      	movs	r1, #0
    d0b4:	4668      	mov	r0, sp
    d0b6:	f003 faf0 	bl	1069a <memset>
    if (loc->fe_data_len != sizeof(struct panmaster_node) &&
    d0ba:	89a3      	ldrh	r3, [r4, #12]
    d0bc:	2b1f      	cmp	r3, #31
    d0be:	d001      	beq.n	d0c4 <fcb_load_cb+0x1c>
    d0c0:	2b17      	cmp	r3, #23
    d0c2:	d10b      	bne.n	d0dc <fcb_load_cb+0x34>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, &tmpnode, loc->fe_data_len);
    d0c4:	466a      	mov	r2, sp
    d0c6:	68a1      	ldr	r1, [r4, #8]
    d0c8:	6820      	ldr	r0, [r4, #0]
    d0ca:	f007 f803 	bl	140d4 <flash_area_read>
    if (rc) {
    d0ce:	4604      	mov	r4, r0
    d0d0:	b940      	cbnz	r0, d0e4 <fcb_load_cb+0x3c>
    argp->cb(&tmpnode, argp->cb_arg);
    d0d2:	682b      	ldr	r3, [r5, #0]
    d0d4:	6869      	ldr	r1, [r5, #4]
    d0d6:	4668      	mov	r0, sp
    d0d8:	4798      	blx	r3
    return 0;
    d0da:	e000      	b.n	d0de <fcb_load_cb+0x36>
        return 1;
    d0dc:	2401      	movs	r4, #1
}
    d0de:	4620      	mov	r0, r4
    d0e0:	b009      	add	sp, #36	; 0x24
    d0e2:	bd30      	pop	{r4, r5, pc}
        return 0;
    d0e4:	2400      	movs	r4, #0
    d0e6:	e7fa      	b.n	d0de <fcb_load_cb+0x36>

0000d0e8 <find_node_load_cb>:
    return panm_fcb_load(pm, node_idx_load_cb, (void*)nodes);
}

static void
find_node_load_cb(struct panmaster_node *node, void *cb_arg)
{
    d0e8:	b510      	push	{r4, lr}
    struct find_node_s *fn = (struct find_node_s*)cb_arg;

    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    d0ea:	7d0b      	ldrb	r3, [r1, #20]
    d0ec:	b113      	cbz	r3, d0f4 <find_node_load_cb+0xc>
    d0ee:	7d02      	ldrb	r2, [r0, #20]
    d0f0:	4293      	cmp	r3, r2
    d0f2:	d013      	beq.n	d11c <find_node_load_cb+0x34>
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    d0f4:	8a0b      	ldrh	r3, [r1, #16]
    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    d0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d0fa:	4293      	cmp	r3, r2
    d0fc:	d002      	beq.n	d104 <find_node_load_cb+0x1c>
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    d0fe:	8a02      	ldrh	r2, [r0, #16]
    d100:	4293      	cmp	r3, r2
    d102:	d00b      	beq.n	d11c <find_node_load_cb+0x34>
        (fn->find.euid != 0 && fn->find.euid == node->euid)) {
    d104:	688a      	ldr	r2, [r1, #8]
    d106:	68cb      	ldr	r3, [r1, #12]
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    d108:	ea52 0403 	orrs.w	r4, r2, r3
    d10c:	d025      	beq.n	d15a <find_node_load_cb+0x72>
        (fn->find.euid != 0 && fn->find.euid == node->euid)) {
    d10e:	f8d0 c008 	ldr.w	ip, [r0, #8]
    d112:	68c4      	ldr	r4, [r0, #12]
    d114:	42a3      	cmp	r3, r4
    d116:	bf08      	it	eq
    d118:	4562      	cmpeq	r2, ip
    d11a:	d11e      	bne.n	d15a <find_node_load_cb+0x72>
        memcpy(fn->results, node, sizeof(struct panmaster_node));
    d11c:	6a0b      	ldr	r3, [r1, #32]
    d11e:	f8d0 e000 	ldr.w	lr, [r0]
    d122:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d126:	6882      	ldr	r2, [r0, #8]
    d128:	68c4      	ldr	r4, [r0, #12]
    d12a:	f8c3 e000 	str.w	lr, [r3]
    d12e:	f8c3 c004 	str.w	ip, [r3, #4]
    d132:	609a      	str	r2, [r3, #8]
    d134:	60dc      	str	r4, [r3, #12]
    d136:	f8d0 e010 	ldr.w	lr, [r0, #16]
    d13a:	f8d0 c014 	ldr.w	ip, [r0, #20]
    d13e:	6982      	ldr	r2, [r0, #24]
    d140:	f8c3 e010 	str.w	lr, [r3, #16]
    d144:	f8c3 c014 	str.w	ip, [r3, #20]
    d148:	619a      	str	r2, [r3, #24]
    d14a:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
    d14e:	7f82      	ldrb	r2, [r0, #30]
    d150:	f8a3 c01c 	strh.w	ip, [r3, #28]
    d154:	779a      	strb	r2, [r3, #30]
        fn->is_found = 1;
    d156:	2301      	movs	r3, #1
    d158:	624b      	str	r3, [r1, #36]	; 0x24
    }
}
    d15a:	bd10      	pop	{r4, pc}

0000d15c <sort_nodes_load_cb>:
static void
sort_nodes_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct panmaster_node *nodes = (struct panmaster_node*)cb_arg;

    if (node->index < MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    d15c:	7d03      	ldrb	r3, [r0, #20]
    d15e:	2b3f      	cmp	r3, #63	; 0x3f
    d160:	d900      	bls.n	d164 <sort_nodes_load_cb+0x8>
    d162:	4770      	bx	lr
{
    d164:	b530      	push	{r4, r5, lr}
        memcpy(&nodes[node->index], node, sizeof(struct panmaster_node));
    d166:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    d16a:	18ca      	adds	r2, r1, r3
    d16c:	6804      	ldr	r4, [r0, #0]
    d16e:	f8d0 e004 	ldr.w	lr, [r0, #4]
    d172:	f8d0 c008 	ldr.w	ip, [r0, #8]
    d176:	68c5      	ldr	r5, [r0, #12]
    d178:	50cc      	str	r4, [r1, r3]
    d17a:	f8c2 e004 	str.w	lr, [r2, #4]
    d17e:	f8c2 c008 	str.w	ip, [r2, #8]
    d182:	60d5      	str	r5, [r2, #12]
    d184:	6904      	ldr	r4, [r0, #16]
    d186:	f8d0 e014 	ldr.w	lr, [r0, #20]
    d18a:	f8d0 c018 	ldr.w	ip, [r0, #24]
    d18e:	6114      	str	r4, [r2, #16]
    d190:	f8c2 e014 	str.w	lr, [r2, #20]
    d194:	f8c2 c018 	str.w	ip, [r2, #24]
    d198:	8b81      	ldrh	r1, [r0, #28]
    d19a:	7f83      	ldrb	r3, [r0, #30]
    d19c:	8391      	strh	r1, [r2, #28]
    d19e:	7793      	strb	r3, [r2, #30]
    }
}
    d1a0:	bd30      	pop	{r4, r5, pc}

0000d1a2 <panm_fcb_src>:
{
    d1a2:	b538      	push	{r3, r4, r5, lr}
    d1a4:	4604      	mov	r4, r0
    pm->pm_fcb.f_version = PANM_FCB_VERS;
    d1a6:	2302      	movs	r3, #2
    d1a8:	7103      	strb	r3, [r0, #4]
    pm->pm_fcb.f_scratch_cnt = 1;
    d1aa:	2301      	movs	r3, #1
    d1ac:	7183      	strb	r3, [r0, #6]
    d1ae:	e004      	b.n	d1ba <panm_fcb_src+0x18>
            flash_area_erase(pm->pm_fcb.f_active.fe_area, 0,
    d1b0:	69e0      	ldr	r0, [r4, #28]
    d1b2:	6882      	ldr	r2, [r0, #8]
    d1b4:	2100      	movs	r1, #0
    d1b6:	f006 ffb5 	bl	14124 <flash_area_erase>
        rc = fcb_init(&pm->pm_fcb);
    d1ba:	4620      	mov	r0, r4
    d1bc:	f00b fd90 	bl	18ce0 <fcb_init>
        if (rc) {
    d1c0:	4605      	mov	r5, r0
    d1c2:	b928      	cbnz	r0, d1d0 <panm_fcb_src+0x2e>
        if (fcb_free_sector_cnt(&pm->pm_fcb) < 1) {
    d1c4:	4620      	mov	r0, r4
    d1c6:	f00b fd08 	bl	18bda <fcb_free_sector_cnt>
    d1ca:	2800      	cmp	r0, #0
    d1cc:	ddf0      	ble.n	d1b0 <panm_fcb_src+0xe>
    d1ce:	e000      	b.n	d1d2 <panm_fcb_src+0x30>
            return OS_INVALID_PARM;
    d1d0:	2503      	movs	r5, #3
}
    d1d2:	4628      	mov	r0, r5
    d1d4:	bd38      	pop	{r3, r4, r5, pc}
	...

0000d1d8 <panm_fcb_load>:
{
    d1d8:	b500      	push	{lr}
    d1da:	b083      	sub	sp, #12
    arg.cb = cb;
    d1dc:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
    d1de:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&pm->pm_fcb, 0, fcb_load_cb, &arg);
    d1e0:	466b      	mov	r3, sp
    d1e2:	4a05      	ldr	r2, [pc, #20]	; (d1f8 <panm_fcb_load+0x20>)
    d1e4:	2100      	movs	r1, #0
    d1e6:	f00c f841 	bl	1926c <fcb_walk>
    if (rc) {
    d1ea:	b910      	cbnz	r0, d1f2 <panm_fcb_load+0x1a>
}
    d1ec:	b003      	add	sp, #12
    d1ee:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
    d1f2:	2002      	movs	r0, #2
    d1f4:	e7fa      	b.n	d1ec <panm_fcb_load+0x14>
    d1f6:	bf00      	nop
    d1f8:	0000d0a9 	.word	0x0000d0a9

0000d1fc <panm_fcb_load_idx>:
{
    d1fc:	b508      	push	{r3, lr}
    d1fe:	460a      	mov	r2, r1
    return panm_fcb_load(pm, node_idx_load_cb, (void*)nodes);
    d200:	4901      	ldr	r1, [pc, #4]	; (d208 <panm_fcb_load_idx+0xc>)
    d202:	f7ff ffe9 	bl	d1d8 <panm_fcb_load>
}
    d206:	bd08      	pop	{r3, pc}
    d208:	0000d029 	.word	0x0000d029

0000d20c <panm_fcb_find_node>:
{
    d20c:	b508      	push	{r3, lr}
    d20e:	460a      	mov	r2, r1
    fns->is_found = 0;
    d210:	2300      	movs	r3, #0
    d212:	624b      	str	r3, [r1, #36]	; 0x24
    return panm_fcb_load(pf, find_node_load_cb, (void*)fns);
    d214:	4901      	ldr	r1, [pc, #4]	; (d21c <panm_fcb_find_node+0x10>)
    d216:	f7ff ffdf 	bl	d1d8 <panm_fcb_load>
}
    d21a:	bd08      	pop	{r3, pc}
    d21c:	0000d0e9 	.word	0x0000d0e9

0000d220 <panm_fcb_compress>:
{
    d220:	b530      	push	{r4, r5, lr}
    d222:	b099      	sub	sp, #100	; 0x64
    d224:	4604      	mov	r4, r0
    rc = fcb_append_to_scratch(&pm->pm_fcb);
    d226:	f00b fe14 	bl	18e52 <fcb_append_to_scratch>
    if (rc) {
    d22a:	2800      	cmp	r0, #0
    d22c:	d157      	bne.n	d2de <panm_fcb_compress+0xbe>
    loc1.fe_area = NULL;
    d22e:	2300      	movs	r3, #0
    d230:	9304      	str	r3, [sp, #16]
    loc1.fe_elem_off = 0;
    d232:	9305      	str	r3, [sp, #20]
    while (fcb_getnext(&pm->pm_fcb, &loc1) == 0) {
    d234:	a904      	add	r1, sp, #16
    d236:	4620      	mov	r0, r4
    d238:	f00b ffc2 	bl	191c0 <fcb_getnext>
    d23c:	2800      	cmp	r0, #0
    d23e:	d14b      	bne.n	d2d8 <panm_fcb_compress+0xb8>
        if (loc1.fe_area != pm->pm_fcb.f_oldest) {
    d240:	9804      	ldr	r0, [sp, #16]
    d242:	69a3      	ldr	r3, [r4, #24]
    d244:	4298      	cmp	r0, r3
    d246:	d147      	bne.n	d2d8 <panm_fcb_compress+0xb8>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, &buf1,
    d248:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    d24c:	aa10      	add	r2, sp, #64	; 0x40
    d24e:	9906      	ldr	r1, [sp, #24]
    d250:	f006 ff40 	bl	140d4 <flash_area_read>
        if (rc) {
    d254:	2800      	cmp	r0, #0
    d256:	d1ed      	bne.n	d234 <panm_fcb_compress+0x14>
        loc2 = loc1;
    d258:	466d      	mov	r5, sp
    d25a:	ab04      	add	r3, sp, #16
    d25c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d25e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        while (fcb_getnext(&pm->pm_fcb, &loc2) == 0) {
    d262:	4669      	mov	r1, sp
    d264:	4620      	mov	r0, r4
    d266:	f00b ffab 	bl	191c0 <fcb_getnext>
    d26a:	b9a8      	cbnz	r0, d298 <panm_fcb_compress+0x78>
            if (loc2.fe_area == pm->pm_fcb.f_oldest) {
    d26c:	9800      	ldr	r0, [sp, #0]
    d26e:	69a3      	ldr	r3, [r4, #24]
    d270:	4298      	cmp	r0, r3
    d272:	d0f6      	beq.n	d262 <panm_fcb_compress+0x42>
            rc = flash_area_read(loc2.fe_area, loc2.fe_data_off, &buf2,
    d274:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    d278:	aa08      	add	r2, sp, #32
    d27a:	9902      	ldr	r1, [sp, #8]
    d27c:	f006 ff2a 	bl	140d4 <flash_area_read>
            if (rc) {
    d280:	4605      	mov	r5, r0
    d282:	2800      	cmp	r0, #0
    d284:	d1ed      	bne.n	d262 <panm_fcb_compress+0x42>
            if (buf1.euid == buf2.euid) {
    d286:	9812      	ldr	r0, [sp, #72]	; 0x48
    d288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d28a:	990a      	ldr	r1, [sp, #40]	; 0x28
    d28c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d28e:	429a      	cmp	r2, r3
    d290:	bf08      	it	eq
    d292:	4288      	cmpeq	r0, r1
    d294:	d1e5      	bne.n	d262 <panm_fcb_compress+0x42>
    d296:	e000      	b.n	d29a <panm_fcb_compress+0x7a>
        copy = 1;
    d298:	2501      	movs	r5, #1
        if (!copy) {
    d29a:	2d00      	cmp	r5, #0
    d29c:	d0ca      	beq.n	d234 <panm_fcb_compress+0x14>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, &buf1,
    d29e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    d2a2:	aa10      	add	r2, sp, #64	; 0x40
    d2a4:	9906      	ldr	r1, [sp, #24]
    d2a6:	9804      	ldr	r0, [sp, #16]
    d2a8:	f006 ff14 	bl	140d4 <flash_area_read>
        if (rc) {
    d2ac:	2800      	cmp	r0, #0
    d2ae:	d1c1      	bne.n	d234 <panm_fcb_compress+0x14>
        rc = fcb_append(&pm->pm_fcb, sizeof(struct panmaster_node), &loc2);
    d2b0:	466a      	mov	r2, sp
    d2b2:	211f      	movs	r1, #31
    d2b4:	4620      	mov	r0, r4
    d2b6:	f00b fde5 	bl	18e84 <fcb_append>
        if (rc) {
    d2ba:	2800      	cmp	r0, #0
    d2bc:	d1ba      	bne.n	d234 <panm_fcb_compress+0x14>
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, &buf1,
    d2be:	231f      	movs	r3, #31
    d2c0:	aa10      	add	r2, sp, #64	; 0x40
    d2c2:	9902      	ldr	r1, [sp, #8]
    d2c4:	9800      	ldr	r0, [sp, #0]
    d2c6:	f006 ff19 	bl	140fc <flash_area_write>
        if (rc) {
    d2ca:	2800      	cmp	r0, #0
    d2cc:	d1b2      	bne.n	d234 <panm_fcb_compress+0x14>
        fcb_append_finish(&pm->pm_fcb, &loc2);
    d2ce:	4669      	mov	r1, sp
    d2d0:	4620      	mov	r0, r4
    d2d2:	f00b fe54 	bl	18f7e <fcb_append_finish>
    d2d6:	e7ad      	b.n	d234 <panm_fcb_compress+0x14>
    rc = fcb_rotate(&pm->pm_fcb);
    d2d8:	4620      	mov	r0, r4
    d2da:	f00b ff8b 	bl	191f4 <fcb_rotate>
}
    d2de:	b019      	add	sp, #100	; 0x64
    d2e0:	bd30      	pop	{r4, r5, pc}

0000d2e2 <panm_fcb_append>:
{
    d2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2e6:	b084      	sub	sp, #16
    d2e8:	4606      	mov	r6, r0
    d2ea:	4688      	mov	r8, r1
    d2ec:	4617      	mov	r7, r2
    for (i = 0; i < 10; i++) {
    d2ee:	2500      	movs	r5, #0
    d2f0:	2d09      	cmp	r5, #9
    d2f2:	dc0d      	bgt.n	d310 <panm_fcb_append+0x2e>
        rc = fcb_append(&pm->pm_fcb, len, &loc);
    d2f4:	466a      	mov	r2, sp
    d2f6:	b2b9      	uxth	r1, r7
    d2f8:	4630      	mov	r0, r6
    d2fa:	f00b fdc3 	bl	18e84 <fcb_append>
    d2fe:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
    d300:	f110 0f04 	cmn.w	r0, #4
    d304:	d104      	bne.n	d310 <panm_fcb_append+0x2e>
        panm_fcb_compress(pm);
    d306:	4630      	mov	r0, r6
    d308:	f7ff ff8a 	bl	d220 <panm_fcb_compress>
    for (i = 0; i < 10; i++) {
    d30c:	3501      	adds	r5, #1
    d30e:	e7ef      	b.n	d2f0 <panm_fcb_append+0xe>
    if (rc) {
    d310:	b97c      	cbnz	r4, d332 <panm_fcb_append+0x50>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
    d312:	463b      	mov	r3, r7
    d314:	4642      	mov	r2, r8
    d316:	9902      	ldr	r1, [sp, #8]
    d318:	9800      	ldr	r0, [sp, #0]
    d31a:	f006 feef 	bl	140fc <flash_area_write>
    if (rc) {
    d31e:	4604      	mov	r4, r0
    d320:	b948      	cbnz	r0, d336 <panm_fcb_append+0x54>
    fcb_append_finish(&pm->pm_fcb, &loc);
    d322:	4669      	mov	r1, sp
    d324:	4630      	mov	r0, r6
    d326:	f00b fe2a 	bl	18f7e <fcb_append_finish>
}
    d32a:	4620      	mov	r0, r4
    d32c:	b004      	add	sp, #16
    d32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return OS_EINVAL;
    d332:	2402      	movs	r4, #2
    d334:	e7f9      	b.n	d32a <panm_fcb_append+0x48>
        return OS_EINVAL;
    d336:	2402      	movs	r4, #2
    d338:	e7f7      	b.n	d32a <panm_fcb_append+0x48>

0000d33a <panm_fcb_save>:
    if (!node) {
    d33a:	b121      	cbz	r1, d346 <panm_fcb_save+0xc>
{
    d33c:	b508      	push	{r3, lr}
    return panm_fcb_append(pm, (uint8_t*)node, sizeof(struct panmaster_node));
    d33e:	221f      	movs	r2, #31
    d340:	f7ff ffcf 	bl	d2e2 <panm_fcb_append>
}
    d344:	bd08      	pop	{r3, pc}
        return OS_INVALID_PARM;
    d346:	2003      	movs	r0, #3
}
    d348:	4770      	bx	lr

0000d34a <panm_fcb_clear>:
{
    d34a:	b508      	push	{r3, lr}
    return fcb_clear(&pm->pm_fcb);
    d34c:	f00b fd59 	bl	18e02 <fcb_clear>
}
    d350:	bd08      	pop	{r3, pc}
	...

0000d354 <panm_fcb_sort>:

void
panm_fcb_sort(struct panm_fcb *pm)
{
    d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d358:	4607      	mov	r7, r0
    int laddr_i;
    struct panmaster_node *nodes;
    int lne_nodes_sz = sizeof(struct panmaster_node)*
        MYNEWT_VAL(PANMASTER_MAXNUM_NODES);

    nodes = (struct panmaster_node*)malloc(lne_nodes_sz);
    d35a:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
    d35e:	f003 f91f 	bl	105a0 <malloc>
    if (!nodes) {
    d362:	b3d8      	cbz	r0, d3dc <panm_fcb_sort+0x88>
    d364:	4604      	mov	r4, r0
        return;
    }

    memset(nodes, 0xff, lne_nodes_sz);
    d366:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
    d36a:	21ff      	movs	r1, #255	; 0xff
    d36c:	f003 f995 	bl	1069a <memset>
    panmaster_load(sort_nodes_load_cb, nodes);
    d370:	4621      	mov	r1, r4
    d372:	481b      	ldr	r0, [pc, #108]	; (d3e0 <panm_fcb_sort+0x8c>)
    d374:	f7ff f90c 	bl	c590 <panmaster_load>

    /* Clear nodes storage area */
    panm_fcb_clear(pm);
    d378:	4638      	mov	r0, r7
    d37a:	f7ff ffe6 	bl	d34a <panm_fcb_clear>

    /* Save nodes from memory in sorted order */
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    d37e:	2600      	movs	r6, #0
    d380:	e023      	b.n	d3ca <panm_fcb_sort+0x76>
        laddr = 0xffff;

        /* find lowest addr of all nodes */
        for(i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    d382:	3301      	adds	r3, #1
    d384:	2b3f      	cmp	r3, #63	; 0x3f
    d386:	dc0c      	bgt.n	d3a2 <panm_fcb_sort+0x4e>
            if (nodes[i].addr == 0xffff) {
    d388:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    d38c:	4422      	add	r2, r4
    d38e:	8a12      	ldrh	r2, [r2, #16]
    d390:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d394:	428a      	cmp	r2, r1
    d396:	d0f4      	beq.n	d382 <panm_fcb_sort+0x2e>
                continue;
            }
            if (nodes[i].addr < laddr) {
    d398:	4282      	cmp	r2, r0
    d39a:	daf2      	bge.n	d382 <panm_fcb_sort+0x2e>
                laddr = nodes[i].addr;
                laddr_i = i;
    d39c:	461d      	mov	r5, r3
                laddr = nodes[i].addr;
    d39e:	4610      	mov	r0, r2
    d3a0:	e7ef      	b.n	d382 <panm_fcb_sort+0x2e>
            }
        }
        if (laddr == 0xffff) {
    d3a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d3a6:	4298      	cmp	r0, r3
    d3a8:	d015      	beq.n	d3d6 <panm_fcb_sort+0x82>
            break;
        }

        nodes[laddr_i].index = index;
    d3aa:	ebc5 1845 	rsb	r8, r5, r5, lsl #5
    d3ae:	44a0      	add	r8, r4
    d3b0:	f888 6014 	strb.w	r6, [r8, #20]
        panm_fcb_save(pm, &nodes[laddr_i]);
    d3b4:	4641      	mov	r1, r8
    d3b6:	4638      	mov	r0, r7
    d3b8:	f7ff ffbf 	bl	d33a <panm_fcb_save>
        nodes[laddr_i].addr = 0xffff;
    d3bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3c0:	f888 3010 	strb.w	r3, [r8, #16]
    d3c4:	f888 3011 	strb.w	r3, [r8, #17]
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    d3c8:	3601      	adds	r6, #1
    d3ca:	2e3f      	cmp	r6, #63	; 0x3f
    d3cc:	dc03      	bgt.n	d3d6 <panm_fcb_sort+0x82>
        laddr = 0xffff;
    d3ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
        for(i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    d3d2:	2300      	movs	r3, #0
    d3d4:	e7d6      	b.n	d384 <panm_fcb_sort+0x30>
    }

    free(nodes);
    d3d6:	4620      	mov	r0, r4
    d3d8:	f003 f918 	bl	1060c <free>
}
    d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3e0:	0000d15d 	.word	0x0000d15d
    d3e4:	00000000 	.word	0x00000000

0000d3e8 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
    d3e8:	b538      	push	{r3, r4, r5, lr}
    d3ea:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
    d3ee:	ee10 2a10 	vmov	r2, s0
    d3f2:	462b      	mov	r3, r5
    d3f4:	ee10 0a10 	vmov	r0, s0
    d3f8:	4629      	mov	r1, r5
    d3fa:	f016 fbab 	bl	23b54 <__aeabi_dcmpun>
    d3fe:	b948      	cbnz	r0, d414 <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
    d400:	a309      	add	r3, pc, #36	; (adr r3, d428 <uwb_rng_tof_to_meters+0x40>)
    d402:	e9d3 2300 	ldrd	r2, r3, [r3]
    d406:	4620      	mov	r0, r4
    d408:	4629      	mov	r1, r5
    d40a:	f016 f909 	bl	23620 <__aeabi_dmul>
    d40e:	ec41 0b10 	vmov	d0, r0, r1
}
    d412:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
    d414:	ed9f 0b02 	vldr	d0, [pc, #8]	; d420 <uwb_rng_tof_to_meters+0x38>
    d418:	e7fb      	b.n	d412 <uwb_rng_tof_to_meters+0x2a>
    d41a:	bf00      	nop
    d41c:	f3af 8000 	nop.w
    d420:	00000000 	.word	0x00000000
    d424:	7ff80000 	.word	0x7ff80000
    d428:	e57d514d 	.word	0xe57d514d
    d42c:	3f73363a 	.word	0x3f73363a

0000d430 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
    d430:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d434:	ec59 8b10 	vmov	r8, r9, d0
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0), tmpf;
    uint64_t T1R, T1r;

    T1R = (response_timestamp - request_timestamp);
    d438:	1a46      	subs	r6, r0, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
    d43a:	9806      	ldr	r0, [sp, #24]
    d43c:	1a10      	subs	r0, r2, r0
    d43e:	2100      	movs	r1, #0
    d440:	f016 f8b8 	bl	235b4 <__aeabi_ul2d>
    d444:	4604      	mov	r4, r0
    d446:	460d      	mov	r5, r1
    d448:	4642      	mov	r2, r8
    d44a:	464b      	mov	r3, r9
    d44c:	2000      	movs	r0, #0
    d44e:	490d      	ldr	r1, [pc, #52]	; (d484 <calc_tof_ss+0x54>)
    d450:	f015 ff2e 	bl	232b0 <__aeabi_dsub>
    d454:	4602      	mov	r2, r0
    d456:	460b      	mov	r3, r1
    d458:	4620      	mov	r0, r4
    d45a:	4629      	mov	r1, r5
    d45c:	f016 f8e0 	bl	23620 <__aeabi_dmul>
    d460:	4604      	mov	r4, r0
    d462:	460d      	mov	r5, r1
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
    d464:	4630      	mov	r0, r6
    d466:	f016 f861 	bl	2352c <__aeabi_ui2d>
    d46a:	4622      	mov	r2, r4
    d46c:	462b      	mov	r3, r5
    d46e:	f015 ff1f 	bl	232b0 <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
    d472:	2200      	movs	r2, #0
    d474:	4b04      	ldr	r3, [pc, #16]	; (d488 <calc_tof_ss+0x58>)
    d476:	f016 f8d3 	bl	23620 <__aeabi_dmul>

    return ToF;
}
    d47a:	ec41 0b10 	vmov	d0, r0, r1
    d47e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    d482:	bf00      	nop
    d484:	3ff00000 	.word	0x3ff00000
    d488:	3fe00000 	.word	0x3fe00000
    d48c:	00000000 	.word	0x00000000

0000d490 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
    d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d492:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
    d494:	1a43      	subs	r3, r0, r1
    d496:	f04f 0c00 	mov.w	ip, #0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    d49a:	9906      	ldr	r1, [sp, #24]
    d49c:	1a52      	subs	r2, r2, r1
    T2R = (response_timestamp - request_timestamp);
    d49e:	9d08      	ldr	r5, [sp, #32]
    d4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d4a2:	1a6d      	subs	r5, r5, r1
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
    d4a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    d4a6:	1b0c      	subs	r4, r1, r4
    nom = T1R * T2R  - T1r * T2r;
    d4a8:	fba3 e105 	umull	lr, r1, r3, r5
    d4ac:	fba2 0604 	umull	r0, r6, r2, r4
    d4b0:	ebbe 0000 	subs.w	r0, lr, r0
    d4b4:	eb61 0106 	sbc.w	r1, r1, r6
    denom = T1R + T2R  + T1r + T2r;
    d4b8:	195b      	adds	r3, r3, r5
    d4ba:	eb4c 0c0c 	adc.w	ip, ip, ip
    d4be:	189b      	adds	r3, r3, r2
    d4c0:	f14c 0500 	adc.w	r5, ip, #0
    d4c4:	191c      	adds	r4, r3, r4
    d4c6:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
    d4ca:	ea54 0305 	orrs.w	r3, r4, r5
    d4ce:	d010      	beq.n	d4f2 <calc_tof_ds+0x62>
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
    d4d0:	f016 f878 	bl	235c4 <__aeabi_l2d>
    d4d4:	4606      	mov	r6, r0
    d4d6:	460f      	mov	r7, r1
    d4d8:	4620      	mov	r0, r4
    d4da:	4629      	mov	r1, r5
    d4dc:	f016 f872 	bl	235c4 <__aeabi_l2d>
    d4e0:	4602      	mov	r2, r0
    d4e2:	460b      	mov	r3, r1
    d4e4:	4630      	mov	r0, r6
    d4e6:	4639      	mov	r1, r7
    d4e8:	f016 f9c4 	bl	23874 <__aeabi_ddiv>
    d4ec:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
    d4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
    d4f2:	ed9f 0b01 	vldr	d0, [pc, #4]	; d4f8 <calc_tof_ds+0x68>
    d4f6:	e7fb      	b.n	d4f0 <calc_tof_ds+0x60>
    d4f8:	00000000 	.word	0x00000000
    d4fc:	7ff80000 	.word	0x7ff80000

0000d500 <survey_complete_cb>:
 * API for verbose logging of survey results.
 *
 * @param struct os_event
 * @return none
 */
static void survey_complete_cb(struct dpl_event *ev) {
    d500:	b508      	push	{r3, lr}
    assert(ev != NULL);
    d502:	b140      	cbz	r0, d516 <survey_complete_cb+0x16>
    return ev->ev.ev_arg;
    d504:	6880      	ldr	r0, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    d506:	b160      	cbz	r0, d522 <survey_complete_cb+0x22>

    survey_instance_t * survey = (survey_instance_t *) dpl_event_get_arg(ev);
    survey_encode(survey, survey->seq_num, survey->idx);
    d508:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    d50c:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    d510:	f000 fc24 	bl	dd5c <survey_encode>
}
    d514:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    d516:	2300      	movs	r3, #0
    d518:	461a      	mov	r2, r3
    d51a:	4619      	mov	r1, r3
    d51c:	4618      	mov	r0, r3
    d51e:	f7fb fe51 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    d522:	2300      	movs	r3, #0
    d524:	461a      	mov	r2, r3
    d526:	4619      	mov	r1, r3
    d528:	4618      	mov	r0, r3
    d52a:	f7fb fe4b 	bl	91c4 <__assert_func>

0000d52e <reset_cb>:
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    d52e:	b510      	push	{r4, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d530:	684c      	ldr	r4, [r1, #4]
    d532:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a

    if(dpl_sem_get_count(&survey->sem) == 1)
    d536:	2b01      	cmp	r3, #1
    d538:	d00f      	beq.n	d55a <reset_cb+0x2c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    d53a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d53e:	f7fc fda3 	bl	a088 <os_sem_release>
        return false;

    dpl_error_t err = dpl_sem_release(&survey->sem);
    assert(err == DPL_OK);
    d542:	b920      	cbnz	r0, d54e <reset_cb+0x20>
    STATS_INC(survey->stat, reset);
    d544:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d546:	3301      	adds	r3, #1
    d548:	6423      	str	r3, [r4, #64]	; 0x40

    return true;
    d54a:	2001      	movs	r0, #1
}
    d54c:	bd10      	pop	{r4, pc}
    assert(err == DPL_OK);
    d54e:	2300      	movs	r3, #0
    d550:	461a      	mov	r2, r3
    d552:	4619      	mov	r1, r3
    d554:	4618      	mov	r0, r3
    d556:	f7fb fe35 	bl	91c4 <__assert_func>
        return false;
    d55a:	2000      	movs	r0, #0
    d55c:	e7f6      	b.n	d54c <reset_cb+0x1e>

0000d55e <rx_timeout_cb>:
{
    d55e:	b510      	push	{r4, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d560:	684c      	ldr	r4, [r1, #4]
    d562:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    if(dpl_sem_get_count(&survey->sem) == 1)
    d566:	2b01      	cmp	r3, #1
    d568:	d00f      	beq.n	d58a <rx_timeout_cb+0x2c>
    d56a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d56e:	f7fc fd8b 	bl	a088 <os_sem_release>
    assert(err == DPL_OK);
    d572:	b920      	cbnz	r0, d57e <rx_timeout_cb+0x20>
    STATS_INC(survey->stat, rx_timeout);
    d574:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d576:	3301      	adds	r3, #1
    d578:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    d57a:	2001      	movs	r0, #1
}
    d57c:	bd10      	pop	{r4, pc}
    assert(err == DPL_OK);
    d57e:	2300      	movs	r3, #0
    d580:	461a      	mov	r2, r3
    d582:	4619      	mov	r1, r3
    d584:	4618      	mov	r0, r3
    d586:	f7fb fe1d 	bl	91c4 <__assert_func>
        return false;
    d58a:	2000      	movs	r0, #0
    d58c:	e7f6      	b.n	d57c <rx_timeout_cb+0x1e>

0000d58e <tx_complete_cb>:
{
    d58e:	b508      	push	{r3, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d590:	6848      	ldr	r0, [r1, #4]
    d592:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
    if(dpl_sem_get_count(&survey->sem) == 1)
    d596:	2b01      	cmp	r3, #1
    d598:	d003      	beq.n	d5a2 <tx_complete_cb+0x14>
    d59a:	3084      	adds	r0, #132	; 0x84
    d59c:	f7fc fd74 	bl	a088 <os_sem_release>
    assert(err == DPL_OK);
    d5a0:	b908      	cbnz	r0, d5a6 <tx_complete_cb+0x18>
}
    d5a2:	2000      	movs	r0, #0
    d5a4:	bd08      	pop	{r3, pc}
    assert(err == DPL_OK);
    d5a6:	2300      	movs	r3, #0
    d5a8:	461a      	mov	r2, r3
    d5aa:	4619      	mov	r1, r3
    d5ac:	4618      	mov	r0, r3
    d5ae:	f7fb fe09 	bl	91c4 <__assert_func>

0000d5b2 <rx_complete_cb>:
{
    d5b2:	b570      	push	{r4, r5, r6, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d5b4:	684c      	ldr	r4, [r1, #4]
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
    d5b6:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    d5ba:	f648 0341 	movw	r3, #34881	; 0x8841
    d5be:	429a      	cmp	r2, r3
    d5c0:	d171      	bne.n	d6a6 <rx_complete_cb+0xf4>
    d5c2:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    if(dpl_sem_get_count(&survey->sem) == 1){ // unsolicited inbound
    d5c6:	2b01      	cmp	r3, #1
    d5c8:	d022      	beq.n	d610 <rx_complete_cb+0x5e>
    if(inst->frame_len < sizeof(survey_broadcast_frame_t))
    d5ca:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    d5ce:	2b42      	cmp	r3, #66	; 0x42
    d5d0:	d96b      	bls.n	d6aa <rx_complete_cb+0xf8>
    survey_broadcast_frame_t * frame = ((survey_broadcast_frame_t * ) inst->rxbuf);
    d5d2:	f8d0 54fc 	ldr.w	r5, [r0, #1276]	; 0x4fc
    if(frame->dst_address != 0xffff)
    d5d6:	f8b5 2005 	ldrh.w	r2, [r5, #5]
    d5da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d5de:	429a      	cmp	r2, r3
    d5e0:	d165      	bne.n	d6ae <rx_complete_cb+0xfc>
    if(survey->ccp->seq_num % survey->nnodes == 0)
    d5e2:	6863      	ldr	r3, [r4, #4]
    d5e4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    d5e8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    d5ec:	fb93 f1f2 	sdiv	r1, r3, r2
    d5f0:	fb02 3311 	mls	r3, r2, r1, r3
    d5f4:	b923      	cbnz	r3, d600 <rx_complete_cb+0x4e>
        survey->idx++;  // advance the nrngs idx at begining of sequence.
    d5f6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    d5fa:	3301      	adds	r3, #1
    d5fc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
    switch(frame->code) {
    d600:	f8b5 2009 	ldrh.w	r2, [r5, #9]
    d604:	f240 4331 	movw	r3, #1073	; 0x431
    d608:	429a      	cmp	r2, r3
    d60a:	d006      	beq.n	d61a <rx_complete_cb+0x68>
            return false;
    d60c:	2000      	movs	r0, #0
    d60e:	e04b      	b.n	d6a8 <rx_complete_cb+0xf6>
        STATS_INC(survey->stat, rx_unsolicited);
    d610:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d612:	3301      	adds	r3, #1
    d614:	62a3      	str	r3, [r4, #40]	; 0x28
        return false;
    d616:	2000      	movs	r0, #0
    d618:	e046      	b.n	d6a8 <rx_complete_cb+0xf6>
                if (frame->cell_id != inst->cell_id)
    d61a:	f8b5 200d 	ldrh.w	r2, [r5, #13]
    d61e:	f8b0 34c4 	ldrh.w	r3, [r0, #1220]	; 0x4c4
    d622:	429a      	cmp	r2, r3
    d624:	d145      	bne.n	d6b2 <rx_complete_cb+0x100>
                if (frame->seq_num != survey->seq_num)
    d626:	78aa      	ldrb	r2, [r5, #2]
    d628:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    d62c:	429a      	cmp	r2, r3
    d62e:	d006      	beq.n	d63e <rx_complete_cb+0x8c>
    d630:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d634:	f7fc fd28 	bl	a088 <os_sem_release>
    assert(err == DPL_OK);
    d638:	bb78      	cbnz	r0, d69a <rx_complete_cb+0xe8>
    return true;
    d63a:	2001      	movs	r0, #1
    d63c:	e034      	b.n	d6a8 <rx_complete_cb+0xf6>
                survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    d63e:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    d642:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    d646:	fbb3 f1f2 	udiv	r1, r3, r2
    d64a:	fb02 3311 	mls	r3, r2, r1, r3
    d64e:	b29b      	uxth	r3, r3
    d650:	3328      	adds	r3, #40	; 0x28
    d652:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
                uint16_t nnodes = NumberOfBits(frame->mask);
    d656:	f8b5 000f 	ldrh.w	r0, [r5, #15]
    d65a:	f002 fd79 	bl	10150 <NumberOfBits>
    d65e:	b283      	uxth	r3, r0
                survey->status.empty = nnodes == 0;
    d660:	fab3 f383 	clz	r3, r3
    d664:	095b      	lsrs	r3, r3, #5
    d666:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    d66a:	f363 1245 	bfi	r2, r3, #5, #1
    d66e:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
                if(survey->status.empty == 0){
    d672:	b2d3      	uxtb	r3, r2
    d674:	f013 0f20 	tst.w	r3, #32
    d678:	d107      	bne.n	d68a <rx_complete_cb+0xd8>
                    nrngs->mask |= 1U << frame->slot_id;
    d67a:	f8b5 200b 	ldrh.w	r2, [r5, #11]
    d67e:	2301      	movs	r3, #1
    d680:	4093      	lsls	r3, r2
    d682:	8832      	ldrh	r2, [r6, #0]
    d684:	4313      	orrs	r3, r2
    d686:	8033      	strh	r3, [r6, #0]
                    break;
    d688:	e7d2      	b.n	d630 <rx_complete_cb+0x7e>
                    nrngs->nrng[frame->slot_id].mask = 0;
    d68a:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    d68e:	2234      	movs	r2, #52	; 0x34
    d690:	fb02 6603 	mla	r6, r2, r3, r6
    d694:	2300      	movs	r3, #0
    d696:	80b3      	strh	r3, [r6, #4]
                    break;
    d698:	e7ca      	b.n	d630 <rx_complete_cb+0x7e>
    assert(err == DPL_OK);
    d69a:	2300      	movs	r3, #0
    d69c:	461a      	mov	r2, r3
    d69e:	4619      	mov	r1, r3
    d6a0:	4618      	mov	r0, r3
    d6a2:	f7fb fd8f 	bl	91c4 <__assert_func>
        return false;
    d6a6:	2000      	movs	r0, #0
}
    d6a8:	bd70      	pop	{r4, r5, r6, pc}
       return false;
    d6aa:	2000      	movs	r0, #0
    d6ac:	e7fc      	b.n	d6a8 <rx_complete_cb+0xf6>
        return false;
    d6ae:	2000      	movs	r0, #0
    d6b0:	e7fa      	b.n	d6a8 <rx_complete_cb+0xf6>
                    return false;
    d6b2:	2000      	movs	r0, #0
    d6b4:	e7f8      	b.n	d6a8 <rx_complete_cb+0xf6>
	...

0000d6b8 <survey_init>:
survey_init(struct uwb_dev * inst, uint16_t nnodes, uint16_t nframes){
    d6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6bc:	b094      	sub	sp, #80	; 0x50
    assert(inst);
    d6be:	2800      	cmp	r0, #0
    d6c0:	d046      	beq.n	d750 <survey_init+0x98>
    d6c2:	460f      	mov	r7, r1
    d6c4:	4615      	mov	r5, r2
    d6c6:	4606      	mov	r6, r0
    survey_instance_t * survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_SURVEY);
    d6c8:	2150      	movs	r1, #80	; 0x50
    d6ca:	f7fb fb58 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (survey == NULL) {
    d6ce:	4604      	mov	r4, r0
    d6d0:	2800      	cmp	r0, #0
    d6d2:	d043      	beq.n	d75c <survey_init+0xa4>
        assert(survey->nnodes == nnodes);
    d6d4:	f8b0 3096 	ldrh.w	r3, [r0, #150]	; 0x96
    d6d8:	42bb      	cmp	r3, r7
    d6da:	f040 80a5 	bne.w	d828 <survey_init+0x170>
    survey->status.initialized = 1;
    d6de:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    d6e2:	f043 0302 	orr.w	r3, r3, #2
    d6e6:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    survey->config = (survey_config_t){
    d6ea:	f44f 7340 	mov.w	r3, #768	; 0x300
    d6ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    survey->cbs = (struct uwb_mac_interface){
    d6f2:	f104 0544 	add.w	r5, r4, #68	; 0x44
    d6f6:	223c      	movs	r2, #60	; 0x3c
    d6f8:	2100      	movs	r1, #0
    d6fa:	4628      	mov	r0, r5
    d6fc:	f002 ffcd 	bl	1069a <memset>
    d700:	2350      	movs	r3, #80	; 0x50
    d702:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    d706:	64a4      	str	r4, [r4, #72]	; 0x48
    d708:	4b50      	ldr	r3, [pc, #320]	; (d84c <survey_init+0x194>)
    d70a:	6523      	str	r3, [r4, #80]	; 0x50
    d70c:	4b50      	ldr	r3, [pc, #320]	; (d850 <survey_init+0x198>)
    d70e:	6563      	str	r3, [r4, #84]	; 0x54
    d710:	4b50      	ldr	r3, [pc, #320]	; (d854 <survey_init+0x19c>)
    d712:	65e3      	str	r3, [r4, #92]	; 0x5c
    d714:	4b50      	ldr	r3, [pc, #320]	; (d858 <survey_init+0x1a0>)
    d716:	66a3      	str	r3, [r4, #104]	; 0x68
    survey->survey_complete_cb = survey_complete_cb;
    d718:	4b50      	ldr	r3, [pc, #320]	; (d85c <survey_init+0x1a4>)
    d71a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    uwb_mac_append_interface(inst, &survey->cbs);
    d71e:	4629      	mov	r1, r5
    d720:	4630      	mov	r0, r6
    d722:	f7fb fad7 	bl	8cd4 <uwb_mac_append_interface>
    int rc = stats_init(
    d726:	f104 050c 	add.w	r5, r4, #12
    d72a:	2209      	movs	r2, #9
    d72c:	9200      	str	r2, [sp, #0]
    d72e:	4b4c      	ldr	r3, [pc, #304]	; (d860 <survey_init+0x1a8>)
    d730:	2104      	movs	r1, #4
    d732:	4628      	mov	r0, r5
    d734:	f008 fc22 	bl	15f7c <stats_init>
    assert(rc == 0);
    d738:	2800      	cmp	r0, #0
    d73a:	d17b      	bne.n	d834 <survey_init+0x17c>
    rc = stats_register("survey", STATS_HDR(survey->stat));
    d73c:	4629      	mov	r1, r5
    d73e:	4849      	ldr	r0, [pc, #292]	; (d864 <survey_init+0x1ac>)
    d740:	f008 fca0 	bl	16084 <stats_register>
    assert(rc == 0);
    d744:	2800      	cmp	r0, #0
    d746:	d17b      	bne.n	d840 <survey_init+0x188>
}
    d748:	4620      	mov	r0, r4
    d74a:	b014      	add	sp, #80	; 0x50
    d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(inst);
    d750:	2300      	movs	r3, #0
    d752:	461a      	mov	r2, r3
    d754:	4619      	mov	r1, r3
    d756:	4618      	mov	r0, r3
    d758:	f7fb fd34 	bl	91c4 <__assert_func>
        survey = (survey_instance_t *) malloc(sizeof(survey_instance_t) + nframes * sizeof(survey_nrngs_t * ));
    d75c:	f105 0828 	add.w	r8, r5, #40	; 0x28
    d760:	ea4f 0888 	mov.w	r8, r8, lsl #2
    d764:	4640      	mov	r0, r8
    d766:	f002 ff1b 	bl	105a0 <malloc>
        assert(survey);
    d76a:	4604      	mov	r4, r0
    d76c:	2800      	cmp	r0, #0
    d76e:	d055      	beq.n	d81c <survey_init+0x164>
        memset(survey, 0, sizeof(survey_instance_t) + nframes * sizeof(survey_nrngs_t * ));
    d770:	4642      	mov	r2, r8
    d772:	2100      	movs	r1, #0
    d774:	f002 ff91 	bl	1069a <memset>
        memset(survey->frame, 0, sizeof(survey_broadcast_frame_t));
    d778:	f04f 0843 	mov.w	r8, #67	; 0x43
    d77c:	4642      	mov	r2, r8
    d77e:	2100      	movs	r1, #0
    d780:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d784:	f002 ff89 	bl	1069a <memset>
        survey_broadcast_frame_t frame = {
    d788:	4642      	mov	r2, r8
    d78a:	2100      	movs	r1, #0
    d78c:	a803      	add	r0, sp, #12
    d78e:	f002 ff84 	bl	1069a <memset>
    d792:	f648 0341 	movw	r3, #34881	; 0x8841
    d796:	f8ad 300c 	strh.w	r3, [sp, #12]
    d79a:	f06f 0335 	mvn.w	r3, #53	; 0x35
    d79e:	f88d 300f 	strb.w	r3, [sp, #15]
    d7a2:	f06f 0321 	mvn.w	r3, #33	; 0x21
    d7a6:	f88d 3010 	strb.w	r3, [sp, #16]
    d7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d7ae:	f88d 3011 	strb.w	r3, [sp, #17]
    d7b2:	f88d 3012 	strb.w	r3, [sp, #18]
            .src_address = inst->my_short_address,
    d7b6:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
        survey_broadcast_frame_t frame = {
    d7ba:	f8ad 3013 	strh.w	r3, [sp, #19]
    d7be:	2331      	movs	r3, #49	; 0x31
    d7c0:	f88d 3015 	strb.w	r3, [sp, #21]
    d7c4:	2304      	movs	r3, #4
    d7c6:	f88d 3016 	strb.w	r3, [sp, #22]
        memcpy(survey->frame, &frame, sizeof(survey_broadcast_frame_t));
    d7ca:	4642      	mov	r2, r8
    d7cc:	a903      	add	r1, sp, #12
    d7ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d7d2:	f002 ff55 	bl	10680 <memcpy>
        survey->status.selfmalloc = 1;
    d7d6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    d7da:	f043 0301 	orr.w	r3, r3, #1
    d7de:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
        survey->nnodes = nnodes;
    d7e2:	f8a4 7096 	strh.w	r7, [r4, #150]	; 0x96
        survey->nframes = nframes;
    d7e6:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
        survey->dev_inst = inst;
    d7ea:	6026      	str	r6, [r4, #0]
        survey->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    d7ec:	2101      	movs	r1, #1
    d7ee:	4630      	mov	r0, r6
    d7f0:	f7fb fac5 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    d7f4:	6060      	str	r0, [r4, #4]
        survey->nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    d7f6:	210b      	movs	r1, #11
    d7f8:	4630      	mov	r0, r6
    d7fa:	f7fb fac0 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    d7fe:	60a0      	str	r0, [r4, #8]
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    d800:	2101      	movs	r1, #1
    d802:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d806:	f7fc fc37 	bl	a078 <os_sem_init>
        assert(err == DPL_OK);
    d80a:	2800      	cmp	r0, #0
    d80c:	f43f af67 	beq.w	d6de <survey_init+0x26>
    d810:	2300      	movs	r3, #0
    d812:	461a      	mov	r2, r3
    d814:	4619      	mov	r1, r3
    d816:	4618      	mov	r0, r3
    d818:	f7fb fcd4 	bl	91c4 <__assert_func>
        assert(survey);
    d81c:	2300      	movs	r3, #0
    d81e:	461a      	mov	r2, r3
    d820:	4619      	mov	r1, r3
    d822:	4618      	mov	r0, r3
    d824:	f7fb fcce 	bl	91c4 <__assert_func>
        assert(survey->nnodes == nnodes);
    d828:	2300      	movs	r3, #0
    d82a:	461a      	mov	r2, r3
    d82c:	4619      	mov	r1, r3
    d82e:	4618      	mov	r0, r3
    d830:	f7fb fcc8 	bl	91c4 <__assert_func>
    assert(rc == 0);
    d834:	2300      	movs	r3, #0
    d836:	461a      	mov	r2, r3
    d838:	4619      	mov	r1, r3
    d83a:	4618      	mov	r0, r3
    d83c:	f7fb fcc2 	bl	91c4 <__assert_func>
    assert(rc == 0);
    d840:	2300      	movs	r3, #0
    d842:	461a      	mov	r2, r3
    d844:	4619      	mov	r1, r3
    d846:	4618      	mov	r0, r3
    d848:	f7fb fcbc 	bl	91c4 <__assert_func>
    d84c:	0000d58f 	.word	0x0000d58f
    d850:	0000d5b3 	.word	0x0000d5b3
    d854:	0000d55f 	.word	0x0000d55f
    d858:	0000d52f 	.word	0x0000d52f
    d85c:	0000d501 	.word	0x0000d501
    d860:	000259c0 	.word	0x000259c0
    d864:	00025974 	.word	0x00025974

0000d868 <survey_request>:
{
    d868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d86c:	b084      	sub	sp, #16
    d86e:	af04      	add	r7, sp, #16
    assert(survey);
    d870:	2800      	cmp	r0, #0
    d872:	d04e      	beq.n	d912 <survey_request+0xaa>
    d874:	4605      	mov	r5, r0
    uint16_t slot_id = survey->dev_inst->slot_id;
    d876:	6801      	ldr	r1, [r0, #0]
    d878:	f8b1 44c2 	ldrh.w	r4, [r1, #1218]	; 0x4c2
    STATS_INC(survey->stat, request);
    d87c:	6a01      	ldr	r1, [r0, #32]
    d87e:	3101      	adds	r1, #1
    d880:	6201      	str	r1, [r0, #32]
    uint32_t slot_mask = ~(~0UL << (survey->nnodes));
    d882:	f8b0 0096 	ldrh.w	r0, [r0, #150]	; 0x96
    d886:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d88a:	4081      	lsls	r1, r0
    d88c:	43c9      	mvns	r1, r1
    nrng_request_delay_start(survey->nrng, 0xffff, dx_time, UWB_DATA_CODE_SS_TWR_NRNG, slot_mask, 0);
    d88e:	f04f 0a00 	mov.w	sl, #0
    d892:	f8cd a008 	str.w	sl, [sp, #8]
    d896:	b289      	uxth	r1, r1
    d898:	9101      	str	r1, [sp, #4]
    d89a:	f44f 7198 	mov.w	r1, #304	; 0x130
    d89e:	9100      	str	r1, [sp, #0]
    d8a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d8a4:	68a8      	ldr	r0, [r5, #8]
    d8a6:	f7fe f812 	bl	b8ce <nrng_request_delay_start>
    survey_nrngs_t * nrngs = survey->nrngs[(survey->idx)%survey->nframes];
    d8aa:	f8b5 309e 	ldrh.w	r3, [r5, #158]	; 0x9e
    d8ae:	f8b5 209c 	ldrh.w	r2, [r5, #156]	; 0x9c
    d8b2:	fbb3 f1f2 	udiv	r1, r3, r2
    d8b6:	fb02 3311 	mls	r3, r2, r1, r3
    d8ba:	b29b      	uxth	r3, r3
    d8bc:	3328      	adds	r3, #40	; 0x28
    d8be:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    dpl_float32_t range[survey->nnodes];
    d8c2:	f8b5 2096 	ldrh.w	r2, [r5, #150]	; 0x96
    d8c6:	0093      	lsls	r3, r2, #2
    d8c8:	3307      	adds	r3, #7
    d8ca:	08db      	lsrs	r3, r3, #3
    d8cc:	4669      	mov	r1, sp
    d8ce:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    d8d2:	469d      	mov	sp, r3
    d8d4:	f10d 0910 	add.w	r9, sp, #16
    uint16_t uid[survey->nnodes];
    d8d8:	0053      	lsls	r3, r2, #1
    d8da:	3307      	adds	r3, #7
    d8dc:	08db      	lsrs	r3, r3, #3
    d8de:	4669      	mov	r1, sp
    d8e0:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    d8e4:	469d      	mov	sp, r3
    d8e6:	f10d 0810 	add.w	r8, sp, #16
    nrngs->nrng[slot_id].mask = nrng_get_ranges(survey->nrng,
    d8ea:	68a8      	ldr	r0, [r5, #8]
    d8ec:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    d8f0:	4649      	mov	r1, r9
    d8f2:	f7fe f8c7 	bl	ba84 <nrng_get_ranges>
    d8f6:	2334      	movs	r3, #52	; 0x34
    d8f8:	fb03 6304 	mla	r3, r3, r4, r6
    d8fc:	8098      	strh	r0, [r3, #4]
    nrng_get_uids(survey->nrng,
    d8fe:	68a8      	ldr	r0, [r5, #8]
    d900:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    d904:	f8b5 2096 	ldrh.w	r2, [r5, #150]	; 0x96
    d908:	4641      	mov	r1, r8
    d90a:	f7fe f928 	bl	bb5e <nrng_get_uids>
    for (uint16_t i = 0;i < survey->nnodes; i++){
    d90e:	4653      	mov	r3, sl
    d910:	e01b      	b.n	d94a <survey_request+0xe2>
    assert(survey);
    d912:	2300      	movs	r3, #0
    d914:	461a      	mov	r2, r3
    d916:	4619      	mov	r1, r3
    d918:	4618      	mov	r0, r3
    d91a:	f7fb fc53 	bl	91c4 <__assert_func>
        nrngs->nrng[slot_id].rng[i] = range[i];
    d91e:	eb09 0283 	add.w	r2, r9, r3, lsl #2
    d922:	6811      	ldr	r1, [r2, #0]
    d924:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d928:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    d92c:	441a      	add	r2, r3
    d92e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    d932:	6091      	str	r1, [r2, #8]
        nrngs->nrng[slot_id].uid[i] = uid[i];
    d934:	f838 1013 	ldrh.w	r1, [r8, r3, lsl #1]
    d938:	221a      	movs	r2, #26
    d93a:	fb02 3204 	mla	r2, r2, r4, r3
    d93e:	3210      	adds	r2, #16
    d940:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    d944:	8111      	strh	r1, [r2, #8]
    for (uint16_t i = 0;i < survey->nnodes; i++){
    d946:	3301      	adds	r3, #1
    d948:	b29b      	uxth	r3, r3
    d94a:	f8b5 2096 	ldrh.w	r2, [r5, #150]	; 0x96
    d94e:	4293      	cmp	r3, r2
    d950:	d3e5      	bcc.n	d91e <survey_request+0xb6>
}
    d952:	f8b5 008c 	ldrh.w	r0, [r5, #140]	; 0x8c
    d956:	46bd      	mov	sp, r7
    d958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d95c <survey_listen>:
survey_listen(survey_instance_t * survey, uint64_t dx_time){
    d95c:	b510      	push	{r4, lr}
    assert(survey);
    d95e:	b1f0      	cbz	r0, d99e <survey_listen+0x42>
    d960:	4604      	mov	r4, r0
    STATS_INC(survey->stat, listen);
    d962:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d964:	3101      	adds	r1, #1
    d966:	6241      	str	r1, [r0, #36]	; 0x24
    uwb_set_delay_start(survey->dev_inst, dx_time);
    d968:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    d96a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d96c:	6b49      	ldr	r1, [r1, #52]	; 0x34
    d96e:	4788      	blx	r1
    uint16_t timeout = uwb_phy_frame_duration(survey->dev_inst, sizeof(nrng_request_frame_t))
    d970:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    d972:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d976:	2113      	movs	r1, #19
    d978:	4798      	blx	r3
                        + survey->nrng->config.rx_timeout_delay;
    d97a:	68a3      	ldr	r3, [r4, #8]
    d97c:	f8b3 10bc 	ldrh.w	r1, [r3, #188]	; 0xbc
    uint16_t timeout = uwb_phy_frame_duration(survey->dev_inst, sizeof(nrng_request_frame_t))
    d980:	4401      	add	r1, r0
    d982:	b289      	uxth	r1, r1
    uwb_set_rx_timeout(survey->dev_inst, timeout + 0x1000);
    d984:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    d986:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d98a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    d98e:	4798      	blx	r3
    nrng_listen(survey->nrng, UWB_BLOCKING);
    d990:	2100      	movs	r1, #0
    d992:	68a0      	ldr	r0, [r4, #8]
    d994:	f7fd ffbc 	bl	b910 <nrng_listen>
}
    d998:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    d99c:	bd10      	pop	{r4, pc}
    assert(survey);
    d99e:	2300      	movs	r3, #0
    d9a0:	461a      	mov	r2, r3
    d9a2:	4619      	mov	r1, r3
    d9a4:	4618      	mov	r0, r3
    d9a6:	f7fb fc0d 	bl	91c4 <__assert_func>

0000d9aa <survey_slot_range_cb>:
{
    d9aa:	b510      	push	{r4, lr}
    assert(ev);
    d9ac:	b330      	cbz	r0, d9fc <survey_slot_range_cb+0x52>
    return ev->ev.ev_arg;
    d9ae:	6882      	ldr	r2, [r0, #8]
    assert(dpl_event_get_arg(ev));
    d9b0:	b352      	cbz	r2, da08 <survey_slot_range_cb+0x5e>
    tdma_instance_t * tdma = slot->parent;
    d9b2:	6890      	ldr	r0, [r2, #8]
    struct uwb_ccp_instance * ccp = tdma->ccp;
    d9b4:	6841      	ldr	r1, [r0, #4]
    survey_instance_t * survey = (survey_instance_t *)slot->arg;
    d9b6:	6b54      	ldr	r4, [r2, #52]	; 0x34
    survey->seq_num = (ccp->seq_num & ((uint32_t)~0UL << MYNEWT_VAL(SURVEY_MASK))) >> MYNEWT_VAL(SURVEY_MASK);
    d9b8:	f891 30f0 	ldrb.w	r3, [r1, #240]	; 0xf0
    d9bc:	08db      	lsrs	r3, r3, #3
    d9be:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    d9c2:	f891 30f0 	ldrb.w	r3, [r1, #240]	; 0xf0
    d9c6:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    d9ca:	fb93 fcf1 	sdiv	ip, r3, r1
    d9ce:	fb01 331c 	mls	r3, r1, ip, r3
    d9d2:	6801      	ldr	r1, [r0, #0]
    d9d4:	f8b1 14c2 	ldrh.w	r1, [r1, #1218]	; 0x4c2
    d9d8:	428b      	cmp	r3, r1
    d9da:	d01b      	beq.n	da14 <survey_slot_range_cb+0x6a>
        uint64_t dx_time = tdma_rx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d9dc:	8813      	ldrh	r3, [r2, #0]
    d9de:	ee00 3a10 	vmov	s0, r3
    d9e2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    d9e6:	f000 fcac 	bl	e342 <tdma_rx_slot_start>
        survey_listen(survey, dx_time);
    d9ea:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    d9ee:	f022 0201 	bic.w	r2, r2, #1
    d9f2:	b2cb      	uxtb	r3, r1
    d9f4:	4620      	mov	r0, r4
    d9f6:	f7ff ffb1 	bl	d95c <survey_listen>
}
    d9fa:	bd10      	pop	{r4, pc}
    assert(ev);
    d9fc:	2300      	movs	r3, #0
    d9fe:	461a      	mov	r2, r3
    da00:	4619      	mov	r1, r3
    da02:	4618      	mov	r0, r3
    da04:	f7fb fbde 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    da08:	2300      	movs	r3, #0
    da0a:	461a      	mov	r2, r3
    da0c:	4619      	mov	r1, r3
    da0e:	4618      	mov	r0, r3
    da10:	f7fb fbd8 	bl	91c4 <__assert_func>
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    da14:	8813      	ldrh	r3, [r2, #0]
    da16:	ee00 3a10 	vmov	s0, r3
    da1a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    da1e:	f000 fcbf 	bl	e3a0 <tdma_tx_slot_start>
        survey_request(survey, dx_time);
    da22:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    da26:	f022 0201 	bic.w	r2, r2, #1
    da2a:	b2cb      	uxtb	r3, r1
    da2c:	4620      	mov	r0, r4
    da2e:	f7ff ff1b 	bl	d868 <survey_request>
    da32:	e7e2      	b.n	d9fa <survey_slot_range_cb+0x50>

0000da34 <survey_broadcaster>:
survey_broadcaster(survey_instance_t * survey, uint64_t dx_time){
    da34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert(survey);
    da38:	2800      	cmp	r0, #0
    da3a:	d07f      	beq.n	db3c <survey_broadcaster+0x108>
    da3c:	4690      	mov	r8, r2
    da3e:	461f      	mov	r7, r3
    da40:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    da42:	f100 0984 	add.w	r9, r0, #132	; 0x84
    da46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    da4a:	4648      	mov	r0, r9
    da4c:	f7fc fb4e 	bl	a0ec <os_sem_pend>
    assert(err == DPL_OK);
    da50:	2800      	cmp	r0, #0
    da52:	d179      	bne.n	db48 <survey_broadcaster+0x114>
    STATS_INC(survey->stat, broadcaster);
    da54:	6b63      	ldr	r3, [r4, #52]	; 0x34
    da56:	3301      	adds	r3, #1
    da58:	6363      	str	r3, [r4, #52]	; 0x34
    struct uwb_dev * inst = survey->dev_inst;
    da5a:	6826      	ldr	r6, [r4, #0]
    survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    da5c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    da60:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    da64:	fbb3 f1f2 	udiv	r1, r3, r2
    da68:	fb02 3311 	mls	r3, r2, r1, r3
    da6c:	b29b      	uxth	r3, r3
    da6e:	3328      	adds	r3, #40	; 0x28
    da70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    survey->frame->mask = nrngs->nrng[inst->slot_id].mask;
    da74:	f8b6 14c2 	ldrh.w	r1, [r6, #1218]	; 0x4c2
    da78:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    da7c:	2034      	movs	r0, #52	; 0x34
    da7e:	fb00 3301 	mla	r3, r0, r1, r3
    da82:	889b      	ldrh	r3, [r3, #4]
    da84:	f8a2 300f 	strh.w	r3, [r2, #15]
    survey->frame->seq_num = survey->seq_num;
    da88:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    da8c:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    da90:	709a      	strb	r2, [r3, #2]
    survey->frame->slot_id = inst->slot_id;
    da92:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    da96:	f8b6 24c2 	ldrh.w	r2, [r6, #1218]	; 0x4c2
    da9a:	f8a3 200b 	strh.w	r2, [r3, #11]
    uint16_t nnodes = NumberOfBits(survey->frame->mask);
    da9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    daa2:	f8b3 000f 	ldrh.w	r0, [r3, #15]
    daa6:	f002 fb53 	bl	10150 <NumberOfBits>
    daaa:	b280      	uxth	r0, r0
    survey->status.empty = nnodes == 0;
    daac:	fab0 f380 	clz	r3, r0
    dab0:	095b      	lsrs	r3, r3, #5
    dab2:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    dab6:	f363 1245 	bfi	r2, r3, #5, #1
    daba:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
    if (survey->status.empty){
    dabe:	b2d3      	uxtb	r3, r2
    dac0:	f013 0f20 	tst.w	r3, #32
    dac4:	d146      	bne.n	db54 <survey_broadcaster+0x120>
    assert(nnodes < survey->nnodes);
    dac6:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    daca:	4283      	cmp	r3, r0
    dacc:	d94f      	bls.n	db6e <survey_broadcaster+0x13a>
        + nnodes * sizeof(uint16_t);
    dace:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    dad2:	006d      	lsls	r5, r5, #1
    dad4:	b2ad      	uxth	r5, r5
    uint16_t n = sizeof(struct _survey_broadcast_frame_t)
    dad6:	3545      	adds	r5, #69	; 0x45
    dad8:	b2ad      	uxth	r5, r5
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    dada:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dadc:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
    dae0:	462b      	mov	r3, r5
    dae2:	2200      	movs	r2, #0
    dae4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    dae8:	4630      	mov	r0, r6
    daea:	47d0      	blx	sl
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    daec:	6a73      	ldr	r3, [r6, #36]	; 0x24
    daee:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
    daf2:	2300      	movs	r3, #0
    daf4:	461a      	mov	r2, r3
    daf6:	4629      	mov	r1, r5
    daf8:	4630      	mov	r0, r6
    dafa:	47d0      	blx	sl
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    dafc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dafe:	6b59      	ldr	r1, [r3, #52]	; 0x34
    db00:	4642      	mov	r2, r8
    db02:	463b      	mov	r3, r7
    db04:	4630      	mov	r0, r6
    db06:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
    db08:	6a73      	ldr	r3, [r6, #36]	; 0x24
    db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    db0c:	4630      	mov	r0, r6
    db0e:	4798      	blx	r3
    survey->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    db10:	f3c0 0080 	ubfx	r0, r0, #2, #1
    db14:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    db18:	f360 1304 	bfi	r3, r0, #4, #1
    db1c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if (survey->status.start_tx_error){
    db20:	b2db      	uxtb	r3, r3
    db22:	f013 0f10 	tst.w	r3, #16
    db26:	d02c      	beq.n	db82 <survey_broadcaster+0x14e>
        STATS_INC(survey->stat, start_tx_error);
    db28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    db2a:	3301      	adds	r3, #1
    db2c:	62e3      	str	r3, [r4, #44]	; 0x2c
    db2e:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
        if (dpl_sem_get_count(&survey->sem) == 0)
    db32:	b313      	cbz	r3, db7a <survey_broadcaster+0x146>
    return survey->status;
    db34:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
}
    db38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(survey);
    db3c:	2300      	movs	r3, #0
    db3e:	461a      	mov	r2, r3
    db40:	4619      	mov	r1, r3
    db42:	4618      	mov	r0, r3
    db44:	f7fb fb3e 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    db48:	2300      	movs	r3, #0
    db4a:	461a      	mov	r2, r3
    db4c:	4619      	mov	r1, r3
    db4e:	4618      	mov	r0, r3
    db50:	f7fb fb38 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    db54:	4648      	mov	r0, r9
    db56:	f7fc fa97 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    db5a:	b910      	cbnz	r0, db62 <survey_broadcaster+0x12e>
        return survey->status;
    db5c:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    db60:	e7ea      	b.n	db38 <survey_broadcaster+0x104>
        assert(err == DPL_OK);
    db62:	2300      	movs	r3, #0
    db64:	461a      	mov	r2, r3
    db66:	4619      	mov	r1, r3
    db68:	4618      	mov	r0, r3
    db6a:	f7fb fb2b 	bl	91c4 <__assert_func>
    assert(nnodes < survey->nnodes);
    db6e:	2300      	movs	r3, #0
    db70:	461a      	mov	r2, r3
    db72:	4619      	mov	r1, r3
    db74:	4618      	mov	r0, r3
    db76:	f7fb fb25 	bl	91c4 <__assert_func>
    db7a:	4648      	mov	r0, r9
    db7c:	f7fc fa84 	bl	a088 <os_sem_release>
    db80:	e7d8      	b.n	db34 <survey_broadcaster+0x100>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    db82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    db86:	4648      	mov	r0, r9
    db88:	f7fc fab0 	bl	a0ec <os_sem_pend>
        assert(err == DPL_OK);
    db8c:	b950      	cbnz	r0, dba4 <survey_broadcaster+0x170>
    return (dpl_error_t)os_sem_release(&sem->sem);
    db8e:	4648      	mov	r0, r9
    db90:	f7fc fa7a 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    db94:	2800      	cmp	r0, #0
    db96:	d0cd      	beq.n	db34 <survey_broadcaster+0x100>
    db98:	2300      	movs	r3, #0
    db9a:	461a      	mov	r2, r3
    db9c:	4619      	mov	r1, r3
    db9e:	4618      	mov	r0, r3
    dba0:	f7fb fb10 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    dba4:	2300      	movs	r3, #0
    dba6:	461a      	mov	r2, r3
    dba8:	4619      	mov	r1, r3
    dbaa:	4618      	mov	r0, r3
    dbac:	f7fb fb0a 	bl	91c4 <__assert_func>

0000dbb0 <survey_receiver>:
survey_receiver(survey_instance_t * survey, uint64_t dx_time){
    dbb0:	b570      	push	{r4, r5, r6, lr}
    assert(survey);
    dbb2:	2800      	cmp	r0, #0
    dbb4:	d033      	beq.n	dc1e <survey_receiver+0x6e>
    dbb6:	4604      	mov	r4, r0
    struct uwb_dev * inst = survey->dev_inst;
    dbb8:	4606      	mov	r6, r0
    dbba:	f856 5b84 	ldr.w	r5, [r6], #132
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    dbbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dbc2:	4630      	mov	r0, r6
    dbc4:	f7fc fa92 	bl	a0ec <os_sem_pend>
    assert(err == DPL_OK);
    dbc8:	bb78      	cbnz	r0, dc2a <survey_receiver+0x7a>
    STATS_INC(survey->stat, receiver);
    dbca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dbcc:	3301      	adds	r3, #1
    dbce:	63a3      	str	r3, [r4, #56]	; 0x38
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    dbd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    dbd4:	2177      	movs	r1, #119	; 0x77
    dbd6:	4628      	mov	r0, r5
    dbd8:	4798      	blx	r3
                        + survey->config.rx_timeout_delay;
    dbda:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    uint16_t timeout = uwb_phy_frame_duration(inst, n)
    dbde:	4401      	add	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    dbe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dbe4:	b289      	uxth	r1, r1
    dbe6:	4628      	mov	r0, r5
    dbe8:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    dbea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    dbee:	4628      	mov	r0, r5
    dbf0:	4798      	blx	r3
    survey->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    dbf2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dbf6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    dbfa:	f360 03c3 	bfi	r3, r0, #3, #1
    dbfe:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if(survey->status.start_rx_error){
    dc02:	b2db      	uxtb	r3, r3
    dc04:	f013 0f08 	tst.w	r3, #8
    dc08:	d01b      	beq.n	dc42 <survey_receiver+0x92>
        STATS_INC(survey->stat, start_rx_error);
    dc0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dc0c:	3301      	adds	r3, #1
    dc0e:	6323      	str	r3, [r4, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
    dc10:	4630      	mov	r0, r6
    dc12:	f7fc fa39 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    dc16:	b970      	cbnz	r0, dc36 <survey_receiver+0x86>
}
    dc18:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    dc1c:	bd70      	pop	{r4, r5, r6, pc}
    assert(survey);
    dc1e:	2300      	movs	r3, #0
    dc20:	461a      	mov	r2, r3
    dc22:	4619      	mov	r1, r3
    dc24:	4618      	mov	r0, r3
    dc26:	f7fb facd 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    dc2a:	2300      	movs	r3, #0
    dc2c:	461a      	mov	r2, r3
    dc2e:	4619      	mov	r1, r3
    dc30:	4618      	mov	r0, r3
    dc32:	f7fb fac7 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    dc36:	2300      	movs	r3, #0
    dc38:	461a      	mov	r2, r3
    dc3a:	4619      	mov	r1, r3
    dc3c:	4618      	mov	r0, r3
    dc3e:	f7fb fac1 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    dc42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dc46:	4630      	mov	r0, r6
    dc48:	f7fc fa50 	bl	a0ec <os_sem_pend>
        assert(err == DPL_OK);
    dc4c:	b950      	cbnz	r0, dc64 <survey_receiver+0xb4>
    return (dpl_error_t)os_sem_release(&sem->sem);
    dc4e:	4630      	mov	r0, r6
    dc50:	f7fc fa1a 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    dc54:	2800      	cmp	r0, #0
    dc56:	d0df      	beq.n	dc18 <survey_receiver+0x68>
    dc58:	2300      	movs	r3, #0
    dc5a:	461a      	mov	r2, r3
    dc5c:	4619      	mov	r1, r3
    dc5e:	4618      	mov	r0, r3
    dc60:	f7fb fab0 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    dc64:	2300      	movs	r3, #0
    dc66:	461a      	mov	r2, r3
    dc68:	4619      	mov	r1, r3
    dc6a:	4618      	mov	r0, r3
    dc6c:	f7fb faaa 	bl	91c4 <__assert_func>

0000dc70 <survey_slot_broadcast_cb>:
{
    dc70:	b538      	push	{r3, r4, r5, lr}
    assert(ev);
    dc72:	b388      	cbz	r0, dcd8 <survey_slot_broadcast_cb+0x68>
    return ev->ev.ev_arg;
    dc74:	6882      	ldr	r2, [r0, #8]
    assert(dpl_event_get_arg(ev));
    dc76:	b3aa      	cbz	r2, dce4 <survey_slot_broadcast_cb+0x74>
    tdma_instance_t * tdma = slot->parent;
    dc78:	6890      	ldr	r0, [r2, #8]
    struct uwb_ccp_instance * ccp = tdma->ccp;
    dc7a:	6845      	ldr	r5, [r0, #4]
    survey_instance_t * survey = (survey_instance_t *)slot->arg;
    dc7c:	6b54      	ldr	r4, [r2, #52]	; 0x34
    survey->seq_num = (ccp->seq_num & ((uint32_t)~0UL << MYNEWT_VAL(SURVEY_MASK))) >> MYNEWT_VAL(SURVEY_MASK);
    dc7e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
    dc82:	08db      	lsrs	r3, r3, #3
    dc84:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    dc88:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
    dc8c:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    dc90:	fb93 fcf1 	sdiv	ip, r3, r1
    dc94:	fb01 331c 	mls	r3, r1, ip, r3
    dc98:	6801      	ldr	r1, [r0, #0]
    dc9a:	f8b1 14c2 	ldrh.w	r1, [r1, #1218]	; 0x4c2
    dc9e:	428b      	cmp	r3, r1
    dca0:	d026      	beq.n	dcf0 <survey_slot_broadcast_cb+0x80>
        uint64_t dx_time = tdma_rx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    dca2:	8813      	ldrh	r3, [r2, #0]
    dca4:	ee00 3a10 	vmov	s0, r3
    dca8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    dcac:	f000 fb49 	bl	e342 <tdma_rx_slot_start>
        survey_receiver(survey, dx_time);
    dcb0:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    dcb4:	f022 0201 	bic.w	r2, r2, #1
    dcb8:	b2cb      	uxtb	r3, r1
    dcba:	4620      	mov	r0, r4
    dcbc:	f7ff ff78 	bl	dbb0 <survey_receiver>
    if((ccp->seq_num % survey->nnodes == survey->nnodes - 1) && survey->survey_complete_cb){
    dcc0:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
    dcc4:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    dcc8:	fb92 f1f3 	sdiv	r1, r2, r3
    dccc:	fb03 2211 	mls	r2, r3, r1, r2
    dcd0:	3b01      	subs	r3, #1
    dcd2:	429a      	cmp	r2, r3
    dcd4:	d01c      	beq.n	dd10 <survey_slot_broadcast_cb+0xa0>
}
    dcd6:	bd38      	pop	{r3, r4, r5, pc}
    assert(ev);
    dcd8:	2300      	movs	r3, #0
    dcda:	461a      	mov	r2, r3
    dcdc:	4619      	mov	r1, r3
    dcde:	4618      	mov	r0, r3
    dce0:	f7fb fa70 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    dce4:	2300      	movs	r3, #0
    dce6:	461a      	mov	r2, r3
    dce8:	4619      	mov	r1, r3
    dcea:	4618      	mov	r0, r3
    dcec:	f7fb fa6a 	bl	91c4 <__assert_func>
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    dcf0:	8813      	ldrh	r3, [r2, #0]
    dcf2:	ee00 3a10 	vmov	s0, r3
    dcf6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    dcfa:	f000 fb51 	bl	e3a0 <tdma_tx_slot_start>
        survey_broadcaster(survey, dx_time);
    dcfe:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    dd02:	f022 0201 	bic.w	r2, r2, #1
    dd06:	b2cb      	uxtb	r3, r1
    dd08:	4620      	mov	r0, r4
    dd0a:	f7ff fe93 	bl	da34 <survey_broadcaster>
    dd0e:	e7d7      	b.n	dcc0 <survey_slot_broadcast_cb+0x50>
    if((ccp->seq_num % survey->nnodes == survey->nnodes - 1) && survey->survey_complete_cb){
    dd10:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    dd14:	2a00      	cmp	r2, #0
    dd16:	d0de      	beq.n	dcd6 <survey_slot_broadcast_cb+0x66>
    memset(ev, 0, sizeof(*ev));
    dd18:	4d06      	ldr	r5, [pc, #24]	; (dd34 <survey_slot_broadcast_cb+0xc4>)
    dd1a:	2300      	movs	r3, #0
    dd1c:	602b      	str	r3, [r5, #0]
    dd1e:	606b      	str	r3, [r5, #4]
    dd20:	60ab      	str	r3, [r5, #8]
    dd22:	60eb      	str	r3, [r5, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    dd24:	606a      	str	r2, [r5, #4]
    ev->ev.ev_arg = arg;
    dd26:	60ac      	str	r4, [r5, #8]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    dd28:	f7fb fe3c 	bl	99a4 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    dd2c:	4629      	mov	r1, r5
    dd2e:	f7fb fd8b 	bl	9848 <os_eventq_put>
}
    dd32:	e7d0      	b.n	dcd6 <survey_slot_broadcast_cb+0x66>
    dd34:	20003c54 	.word	0x20003c54

0000dd38 <survey_pkg_init>:
 *
 * @return void
 */
void
survey_pkg_init(void)
{
    dd38:	b508      	push	{r3, lr}
#if MYNEWT_VAL(SURVEY_ENABLED)
    printf("{\"utime\": %lu,\"msg\": \"survey_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
    dd3a:	f7fb fcac 	bl	9696 <os_cputime_get32>
    dd3e:	4601      	mov	r1, r0
    dd40:	4805      	ldr	r0, [pc, #20]	; (dd58 <survey_pkg_init+0x20>)
    dd42:	f003 f8c3 	bl	10ecc <printf>

#if MYNEWT_VAL(UWB_DEVICE_0)
    survey_init(uwb_dev_idx_lookup(0), MYNEWT_VAL(SURVEY_NNODES), MYNEWT_VAL(SURVEY_NFRAMES));
    dd46:	2000      	movs	r0, #0
    dd48:	f7fa ff94 	bl	8c74 <uwb_dev_idx_lookup>
    dd4c:	2202      	movs	r2, #2
    dd4e:	2108      	movs	r1, #8
    dd50:	f7ff fcb2 	bl	d6b8 <survey_init>
#endif
#endif // MYNEWT_VAL(SURVEY_ENABLED)
}
    dd54:	bd08      	pop	{r3, pc}
    dd56:	bf00      	nop
    dd58:	0002597c 	.word	0x0002597c

0000dd5c <survey_encode>:
 * @param survey survey_instance_t point
 * @param seq_num survey
 * @return none.
 */
void
survey_encode(survey_instance_t * survey, uint16_t seq, uint16_t idx){
    dd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd60:	f5ad 7d67 	sub.w	sp, sp, #924	; 0x39c
    dd64:	4680      	mov	r8, r0
    dd66:	468b      	mov	fp, r1
    dd68:	4614      	mov	r4, r2

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    dd6a:	f7fb fc94 	bl	9696 <os_cputime_get32>
    dd6e:	9001      	str	r0, [sp, #4]
    survey_nrngs_t * nrngs = survey->nrngs[idx%survey->nframes];
    dd70:	f8b8 209c 	ldrh.w	r2, [r8, #156]	; 0x9c
    dd74:	fbb4 f3f2 	udiv	r3, r4, r2
    dd78:	fb02 4413 	mls	r4, r2, r3, r4
    dd7c:	b2a4      	uxth	r4, r4
    dd7e:	3428      	adds	r4, #40	; 0x28
    dd80:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]

    uint16_t mask = 0;
    // Workout which node responded to the request
    for (uint16_t i=0; i < survey->nnodes; i++){
    dd84:	2300      	movs	r3, #0
    uint16_t mask = 0;
    dd86:	4618      	mov	r0, r3
    for (uint16_t i=0; i < survey->nnodes; i++){
    dd88:	e001      	b.n	dd8e <survey_encode+0x32>
    dd8a:	3301      	adds	r3, #1
    dd8c:	b29b      	uxth	r3, r3
    dd8e:	f8b8 2096 	ldrh.w	r2, [r8, #150]	; 0x96
    dd92:	429a      	cmp	r2, r3
    dd94:	d90a      	bls.n	ddac <survey_encode+0x50>
        if (nrngs->nrng[i].mask){
    dd96:	2234      	movs	r2, #52	; 0x34
    dd98:	fb02 7203 	mla	r2, r2, r3, r7
    dd9c:	8892      	ldrh	r2, [r2, #4]
    dd9e:	2a00      	cmp	r2, #0
    dda0:	d0f3      	beq.n	dd8a <survey_encode+0x2e>
                mask |= 1UL << i;
    dda2:	2201      	movs	r2, #1
    dda4:	409a      	lsls	r2, r3
    dda6:	4310      	orrs	r0, r2
    dda8:	b280      	uxth	r0, r0
    ddaa:	e7ee      	b.n	dd8a <survey_encode+0x2e>
        }
    }

    survey->status.empty = NumberOfBits(mask) == 0;
    ddac:	f002 f9d0 	bl	10150 <NumberOfBits>
    ddb0:	fab0 f080 	clz	r0, r0
    ddb4:	0940      	lsrs	r0, r0, #5
    ddb6:	f898 308c 	ldrb.w	r3, [r8, #140]	; 0x8c
    ddba:	f360 1345 	bfi	r3, r0, #5, #1
    ddbe:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
    if (survey->status.empty)
    ddc2:	b2db      	uxtb	r3, r3
    ddc4:	f013 0f20 	tst.w	r3, #32
    ddc8:	d159      	bne.n	de7e <survey_encode+0x122>
       return;

    for (uint16_t i=0; i < survey->nnodes; i++){
    ddca:	2500      	movs	r5, #0
    ddcc:	e030      	b.n	de30 <survey_encode+0xd4>
                .utime = utime,
                .seq = seq,
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
                };
            for (uint16_t j=0; j < json.nsize; j++){
                json.rng[j] = nrngs->nrng[i].rng[j];
    ddce:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    ddd2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    ddd6:	4423      	add	r3, r4
    ddd8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    dddc:	6898      	ldr	r0, [r3, #8]
    ddde:	f015 fbc7 	bl	23570 <__aeabi_f2d>
    dde2:	f104 0320 	add.w	r3, r4, #32
    dde6:	aa02      	add	r2, sp, #8
    dde8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ddec:	e9c3 0100 	strd	r0, r1, [r3]
                json.ouid[j] = nrngs->nrng[i].uid[j];
    ddf0:	231a      	movs	r3, #26
    ddf2:	fb03 4306 	mla	r3, r3, r6, r4
    ddf6:	3310      	adds	r3, #16
    ddf8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    ddfc:	8919      	ldrh	r1, [r3, #8]
    ddfe:	f104 0310 	add.w	r3, r4, #16
    de02:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    de06:	a802      	add	r0, sp, #8
    de08:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
    de0c:	2300      	movs	r3, #0
    de0e:	6053      	str	r3, [r2, #4]
            for (uint16_t j=0; j < json.nsize; j++){
    de10:	3401      	adds	r4, #1
    de12:	b2a4      	uxth	r4, r4
    de14:	4554      	cmp	r4, sl
    de16:	f04f 0300 	mov.w	r3, #0
    de1a:	eb73 0309 	sbcs.w	r3, r3, r9
    de1e:	d3d6      	bcc.n	ddce <survey_encode+0x72>
            }
            nrng_json_write(&json);
    de20:	a802      	add	r0, sp, #8
    de22:	f7fd ffd7 	bl	bdd4 <nrng_json_write>
            printf("%s\n", json.iobuf);
    de26:	a864      	add	r0, sp, #400	; 0x190
    de28:	f002 fb1e 	bl	10468 <puts>
    for (uint16_t i=0; i < survey->nnodes; i++){
    de2c:	3501      	adds	r5, #1
    de2e:	b2ad      	uxth	r5, r5
    de30:	f8b8 3096 	ldrh.w	r3, [r8, #150]	; 0x96
    de34:	42ab      	cmp	r3, r5
    de36:	d922      	bls.n	de7e <survey_encode+0x122>
        if (nrngs->nrng[i].mask){
    de38:	462e      	mov	r6, r5
    de3a:	2334      	movs	r3, #52	; 0x34
    de3c:	fb03 7305 	mla	r3, r3, r5, r7
    de40:	889b      	ldrh	r3, [r3, #4]
    de42:	2b00      	cmp	r3, #0
    de44:	d0f2      	beq.n	de2c <survey_encode+0xd0>
            nrng_json_t json={
    de46:	f44f 7264 	mov.w	r2, #912	; 0x390
    de4a:	2100      	movs	r1, #0
    de4c:	a802      	add	r0, sp, #8
    de4e:	f002 fc24 	bl	1069a <memset>
    de52:	f04f 0900 	mov.w	r9, #0
    de56:	9b01      	ldr	r3, [sp, #4]
    de58:	931c      	str	r3, [sp, #112]	; 0x70
    de5a:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
    de5e:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
    de62:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
    de66:	2334      	movs	r3, #52	; 0x34
    de68:	fb03 7305 	mla	r3, r3, r5, r7
    de6c:	8898      	ldrh	r0, [r3, #4]
    de6e:	f002 f96f 	bl	10150 <NumberOfBits>
    de72:	4682      	mov	sl, r0
            nrng_json_t json={
    de74:	9062      	str	r0, [sp, #392]	; 0x188
    de76:	f8cd 918c 	str.w	r9, [sp, #396]	; 0x18c
            for (uint16_t j=0; j < json.nsize; j++){
    de7a:	464c      	mov	r4, r9
    de7c:	e7ca      	b.n	de14 <survey_encode+0xb8>
        }
    }
}
    de7e:	f50d 7d67 	add.w	sp, sp, #924	; 0x39c
    de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000de88 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    de88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    de8c:	b170      	cbz	r0, deac <tdma_superframe_slot_cb+0x24>
    return ev->ev.ev_arg;
    de8e:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    de90:	b196      	cbz	r6, deb8 <tdma_superframe_slot_cb+0x30>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    de92:	68b5      	ldr	r5, [r6, #8]
    ccp = tdma->ccp;
    de94:	f8d5 8004 	ldr.w	r8, [r5, #4]

    TDMA_STATS_INC(superframe_cnt);
    de98:	6a2b      	ldr	r3, [r5, #32]
    de9a:	3301      	adds	r3, #1
    de9c:	622b      	str	r3, [r5, #32]

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    de9e:	f106 070c 	add.w	r7, r6, #12
    dea2:	4638      	mov	r0, r7
    dea4:	f004 fd1d 	bl	128e2 <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    dea8:	2400      	movs	r4, #0
    deaa:	e00d      	b.n	dec8 <tdma_superframe_slot_cb+0x40>
    assert(ev != NULL);
    deac:	2300      	movs	r3, #0
    deae:	461a      	mov	r2, r3
    deb0:	4619      	mov	r1, r3
    deb2:	4618      	mov	r0, r3
    deb4:	f7fb f986 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    deb8:	2300      	movs	r3, #0
    deba:	461a      	mov	r2, r3
    debc:	4619      	mov	r1, r3
    debe:	4618      	mov	r0, r3
    dec0:	f7fb f980 	bl	91c4 <__assert_func>
    for (i = 0; i < tdma->nslots; i++) {
    dec4:	3401      	adds	r4, #1
    dec6:	b2a4      	uxth	r4, r4
    dec8:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    decc:	42a3      	cmp	r3, r4
    dece:	d909      	bls.n	dee4 <tdma_superframe_slot_cb+0x5c>
        if (tdma->slot[i]){
    ded0:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    ded4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    ded8:	2800      	cmp	r0, #0
    deda:	d0f3      	beq.n	dec4 <tdma_superframe_slot_cb+0x3c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    dedc:	300c      	adds	r0, #12
    dede:	f004 fd00 	bl	128e2 <dpl_cputime_timer_stop>
    dee2:	e7ef      	b.n	dec4 <tdma_superframe_slot_cb+0x3c>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    dee4:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    dee8:	fbb0 f0f3 	udiv	r0, r0, r3
    deec:	f015 fb1e 	bl	2352c <__aeabi_ui2d>
    def0:	a31d      	add	r3, pc, #116	; (adr r3, df68 <tdma_superframe_slot_cb+0xe0>)
    def2:	e9d3 2300 	ldrd	r2, r3, [r3]
    def6:	f015 fb93 	bl	23620 <__aeabi_dmul>
    defa:	f015 fe69 	bl	23bd0 <__aeabi_d2uiz>
    defe:	4681      	mov	r9, r0
#endif
    for (i = 0; i < tdma->nslots; i++) {
    df00:	2400      	movs	r4, #0
    df02:	e001      	b.n	df08 <tdma_superframe_slot_cb+0x80>
    df04:	3401      	adds	r4, #1
    df06:	b2a4      	uxth	r4, r4
    df08:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    df0c:	42a3      	cmp	r3, r4
    df0e:	d914      	bls.n	df3a <tdma_superframe_slot_cb+0xb2>
        if (tdma->slot[i]){
    df10:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    df14:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    df18:	2a00      	cmp	r2, #0
    df1a:	d0f3      	beq.n	df04 <tdma_superframe_slot_cb+0x7c>
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    df1c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    df1e:	fb09 3304 	mla	r3, r9, r4, r3
    df22:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    df26:	6053      	str	r3, [r2, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    df28:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    df2c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    df30:	6841      	ldr	r1, [r0, #4]
    df32:	300c      	adds	r0, #12
    df34:	f010 fb5a 	bl	1e5ec <hal_timer_start_at>
    df38:	e7e4      	b.n	df04 <tdma_superframe_slot_cb+0x7c>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
    df3a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
        + dpl_cputime_usecs_to_ticks(
    df3c:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    df40:	f015 faf4 	bl	2352c <__aeabi_ui2d>
    df44:	a308      	add	r3, pc, #32	; (adr r3, df68 <tdma_superframe_slot_cb+0xe0>)
    df46:	e9d3 2300 	ldrd	r2, r3, [r3]
    df4a:	f015 fb69 	bl	23620 <__aeabi_dmul>
    df4e:	f015 fe3f 	bl	23bd0 <__aeabi_d2uiz>
    df52:	eb00 0109 	add.w	r1, r0, r9
    df56:	4421      	add	r1, r4
    slot->cputime_slot_start = tdma->os_epoch
    df58:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    df5a:	4638      	mov	r0, r7
    df5c:	f010 fb46 	bl	1e5ec <hal_timer_start_at>
}
    df60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df64:	f3af 8000 	nop.w
    df68:	90690691 	.word	0x90690691
    df6c:	3ff06906 	.word	0x3ff06906

0000df70 <slot_timer_cb>:
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
{
    df70:	b508      	push	{r3, lr}
    assert(arg);
    df72:	b168      	cbz	r0, df90 <slot_timer_cb+0x20>
    df74:	4601      	mov	r1, r0
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    df76:	6880      	ldr	r0, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    df78:	69c3      	ldr	r3, [r0, #28]
    df7a:	3301      	adds	r3, #1
    df7c:	61c3      	str	r3, [r0, #28]

    if (slot == &tdma->superframe_slot) {
    df7e:	f100 0380 	add.w	r3, r0, #128	; 0x80
    df82:	428b      	cmp	r3, r1
    df84:	d00a      	beq.n	df9c <slot_timer_cb+0x2c>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    df86:	3124      	adds	r1, #36	; 0x24
    df88:	30b8      	adds	r0, #184	; 0xb8
    df8a:	f7fb fc5d 	bl	9848 <os_eventq_put>
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    df8e:	bd08      	pop	{r3, pc}
    assert(arg);
    df90:	2300      	movs	r3, #0
    df92:	461a      	mov	r2, r3
    df94:	4619      	mov	r1, r3
    df96:	4618      	mov	r0, r3
    df98:	f7fb f914 	bl	91c4 <__assert_func>
        TDMA_STATS_INC(superframe_miss);
    df9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    df9e:	3301      	adds	r3, #1
    dfa0:	6243      	str	r3, [r0, #36]	; 0x24
        return;
    dfa2:	e7f4      	b.n	df8e <slot_timer_cb+0x1e>

0000dfa4 <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    dfa4:	6848      	ldr	r0, [r1, #4]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    dfa6:	6842      	ldr	r2, [r0, #4]
    if (!tdma) {
    dfa8:	b180      	cbz	r0, dfcc <superframe_cb+0x28>
{
    dfaa:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    dfac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    dfb0:	f013 0f02 	tst.w	r3, #2
    dfb4:	d101      	bne.n	dfba <superframe_cb+0x16>
}
    dfb6:	2000      	movs	r0, #0
    dfb8:	bd08      	pop	{r3, pc}
        tdma->os_epoch = ccp->os_epoch;
    dfba:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    dfbe:	67c3      	str	r3, [r0, #124]	; 0x7c
    dfc0:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    dfc4:	30b8      	adds	r0, #184	; 0xb8
    dfc6:	f7fb fc3f 	bl	9848 <os_eventq_put>
}
    dfca:	e7f4      	b.n	dfb6 <superframe_cb+0x12>
}
    dfcc:	2000      	movs	r0, #0
    dfce:	4770      	bx	lr

0000dfd0 <tdma_task>:
{
    dfd0:	b570      	push	{r4, r5, r6, lr}
    dfd2:	4605      	mov	r5, r0
    tdma_instance_t * tdma = arg;
    dfd4:	e001      	b.n	dfda <tdma_task+0xa>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    dfd6:	6843      	ldr	r3, [r0, #4]
    dfd8:	4798      	blx	r3
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    dfda:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    dfde:	f7fb fc74 	bl	98ca <os_eventq_get>
    dfe2:	4604      	mov	r4, r0
    return (struct dpl_event*)&co->co.c_ev;
    dfe4:	f505 63a4 	add.w	r3, r5, #1312	; 0x520
        if (ev == dpl_callout_get_event(&tdma->sanity_cb)) {
    dfe8:	4298      	cmp	r0, r3
    dfea:	d0f4      	beq.n	dfd6 <tdma_task+0x6>
    return ev->ev.ev_arg;
    dfec:	6886      	ldr	r6, [r0, #8]
        ticks = dpl_cputime_get32();
    dfee:	f004 fc7c 	bl	128ea <dpl_cputime_get32>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    dff2:	6873      	ldr	r3, [r6, #4]
    dff4:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    dff6:	8833      	ldrh	r3, [r6, #0]
    dff8:	b133      	cbz	r3, e008 <tdma_task+0x38>
    dffa:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    dffe:	d903      	bls.n	e008 <tdma_task+0x38>
            TDMA_STATS_INC(dropped_slots);
    e000:	6aab      	ldr	r3, [r5, #40]	; 0x28
    e002:	3301      	adds	r3, #1
    e004:	62ab      	str	r3, [r5, #40]	; 0x28
    e006:	e7e8      	b.n	dfda <tdma_task+0xa>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    e008:	6863      	ldr	r3, [r4, #4]
    e00a:	4620      	mov	r0, r4
    e00c:	4798      	blx	r3
    e00e:	e7e4      	b.n	dfda <tdma_task+0xa>

0000e010 <tdma_tasks_init>:
{
    e010:	b530      	push	{r4, r5, lr}
    e012:	b085      	sub	sp, #20
    e014:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    e016:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    return os_eventq_inited((struct os_eventq *) evq);
    e01a:	4628      	mov	r0, r5
    e01c:	f7fb fc0f 	bl	983e <os_eventq_inited>
    e020:	b170      	cbz	r0, e040 <tdma_tasks_init+0x30>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    e022:	f504 65a4 	add.w	r5, r4, #1312	; 0x520
    e026:	4623      	mov	r3, r4
    e028:	4a11      	ldr	r2, [pc, #68]	; (e070 <tdma_tasks_init+0x60>)
    e02a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e02e:	4628      	mov	r0, r5
    e030:	f7fb fa56 	bl	94e0 <os_callout_init>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    e034:	2180      	movs	r1, #128	; 0x80
    e036:	4628      	mov	r0, r5
    e038:	f7fb fa7e 	bl	9538 <os_callout_reset>
}
    e03c:	b005      	add	sp, #20
    e03e:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    e040:	4628      	mov	r0, r5
    e042:	f7fb fbf3 	bl	982c <os_eventq_init>
        dpl_task_init(&inst->task_str, "tdma",
    e046:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
                      inst->task_stack,
    e04a:	f504 7290 	add.w	r2, r4, #288	; 0x120
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    e04e:	f44f 7180 	mov.w	r1, #256	; 0x100
    e052:	9103      	str	r1, [sp, #12]
    e054:	9202      	str	r2, [sp, #8]
    e056:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    e05a:	9201      	str	r2, [sp, #4]
    e05c:	9300      	str	r3, [sp, #0]
    e05e:	4623      	mov	r3, r4
    e060:	4a04      	ldr	r2, [pc, #16]	; (e074 <tdma_tasks_init+0x64>)
    e062:	4905      	ldr	r1, [pc, #20]	; (e078 <tdma_tasks_init+0x68>)
    e064:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    e068:	f7fc f8a6 	bl	a1b8 <os_task_init>
    e06c:	e7d9      	b.n	e022 <tdma_tasks_init+0x12>
    e06e:	bf00      	nop
    e070:	0000e07d 	.word	0x0000e07d
    e074:	0000dfd1 	.word	0x0000dfd1
    e078:	000259f8 	.word	0x000259f8

0000e07c <sanity_feeding_cb>:
{
    e07c:	b510      	push	{r4, lr}
    assert(ev != NULL);
    e07e:	b150      	cbz	r0, e096 <sanity_feeding_cb+0x1a>
    return ev->ev.ev_arg;
    e080:	6884      	ldr	r4, [r0, #8]
    assert(tdma);
    e082:	b174      	cbz	r4, e0a2 <sanity_feeding_cb+0x26>
    os_sanity_task_checkin(0);
    e084:	2000      	movs	r0, #0
    e086:	f7fb fe2f 	bl	9ce8 <os_sanity_task_checkin>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    e08a:	2180      	movs	r1, #128	; 0x80
    e08c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
    e090:	f7fb fa52 	bl	9538 <os_callout_reset>
}
    e094:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    e096:	2300      	movs	r3, #0
    e098:	461a      	mov	r2, r3
    e09a:	4619      	mov	r1, r3
    e09c:	4618      	mov	r0, r3
    e09e:	f7fb f891 	bl	91c4 <__assert_func>
    assert(tdma);
    e0a2:	2300      	movs	r3, #0
    e0a4:	461a      	mov	r2, r3
    e0a6:	4619      	mov	r1, r3
    e0a8:	4618      	mov	r0, r3
    e0aa:	f7fb f88b 	bl	91c4 <__assert_func>
	...

0000e0b0 <tdma_init>:
{
    e0b0:	b570      	push	{r4, r5, r6, lr}
    e0b2:	b082      	sub	sp, #8
    assert(dev);
    e0b4:	2800      	cmp	r0, #0
    e0b6:	d057      	beq.n	e168 <tdma_init+0xb8>
    e0b8:	460d      	mov	r5, r1
    e0ba:	4606      	mov	r6, r0
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    e0bc:	2103      	movs	r1, #3
    e0be:	f7fa fe5e 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    e0c2:	4604      	mov	r4, r0
    e0c4:	2800      	cmp	r0, #0
    e0c6:	d055      	beq.n	e174 <tdma_init+0xc4>
    tdma->cbs = (struct uwb_mac_interface){
    e0c8:	f104 0530 	add.w	r5, r4, #48	; 0x30
    e0cc:	223c      	movs	r2, #60	; 0x3c
    e0ce:	2100      	movs	r1, #0
    e0d0:	4628      	mov	r0, r5
    e0d2:	f002 fae2 	bl	1069a <memset>
    e0d6:	2303      	movs	r3, #3
    e0d8:	8663      	strh	r3, [r4, #50]	; 0x32
    e0da:	6364      	str	r4, [r4, #52]	; 0x34
    e0dc:	4b42      	ldr	r3, [pc, #264]	; (e1e8 <tdma_init+0x138>)
    e0de:	6663      	str	r3, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    e0e0:	4629      	mov	r1, r5
    e0e2:	4630      	mov	r0, r6
    e0e4:	f7fa fdf6 	bl	8cd4 <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    e0e8:	2101      	movs	r1, #1
    e0ea:	4630      	mov	r0, r6
    e0ec:	f7fa fe47 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    e0f0:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    e0f2:	2800      	cmp	r0, #0
    e0f4:	d065      	beq.n	e1c2 <tdma_init+0x112>
    int rc = stats_init(
    e0f6:	f104 0508 	add.w	r5, r4, #8
    e0fa:	2104      	movs	r1, #4
    e0fc:	9100      	str	r1, [sp, #0]
    e0fe:	4b3b      	ldr	r3, [pc, #236]	; (e1ec <tdma_init+0x13c>)
    e100:	460a      	mov	r2, r1
    e102:	4628      	mov	r0, r5
    e104:	f007 ff3a 	bl	15f7c <stats_init>
    assert(rc == 0);
    e108:	2800      	cmp	r0, #0
    e10a:	d160      	bne.n	e1ce <tdma_init+0x11e>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    e10c:	4629      	mov	r1, r5
    e10e:	4838      	ldr	r0, [pc, #224]	; (e1f0 <tdma_init+0x140>)
    e110:	f007 ffb8 	bl	16084 <stats_register>
    assert(rc == 0);
    e114:	2800      	cmp	r0, #0
    e116:	d160      	bne.n	e1da <tdma_init+0x12a>
    tdma->superframe_slot.parent = tdma;
    e118:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    e11c:	2500      	movs	r5, #0
    e11e:	4626      	mov	r6, r4
    e120:	f826 5f80 	strh.w	r5, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    e124:	4632      	mov	r2, r6
    e126:	4933      	ldr	r1, [pc, #204]	; (e1f4 <tdma_init+0x144>)
    e128:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    e12c:	f004 fbbe 	bl	128ac <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    e130:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    e134:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    e138:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    e13c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    ev->ev.ev_cb = (os_event_fn *)fn;
    e140:	4b2d      	ldr	r3, [pc, #180]	; (e1f8 <tdma_init+0x148>)
    e142:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ev->ev.ev_arg = arg;
    e146:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    tdma->status.initialized = true;
    e14a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e14e:	f043 0302 	orr.w	r3, r3, #2
    e152:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    e156:	f004 fbc8 	bl	128ea <dpl_cputime_get32>
    e15a:	67e0      	str	r0, [r4, #124]	; 0x7c
    tdma_tasks_init(tdma);
    e15c:	4620      	mov	r0, r4
    e15e:	f7ff ff57 	bl	e010 <tdma_tasks_init>
}
    e162:	4620      	mov	r0, r4
    e164:	b002      	add	sp, #8
    e166:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);
    e168:	2300      	movs	r3, #0
    e16a:	461a      	mov	r2, r3
    e16c:	4619      	mov	r1, r3
    e16e:	4618      	mov	r0, r3
    e170:	f7fb f828 	bl	91c4 <__assert_func>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    e174:	f505 71a8 	add.w	r1, r5, #336	; 0x150
    e178:	0089      	lsls	r1, r1, #2
    e17a:	2001      	movs	r0, #1
    e17c:	f002 f94b 	bl	10416 <calloc>
        assert(tdma);
    e180:	4604      	mov	r4, r0
    e182:	b190      	cbz	r0, e1aa <tdma_init+0xfa>
        tdma->status.selfmalloc = 1;
    e184:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e188:	f043 0301 	orr.w	r3, r3, #1
    e18c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    e190:	306c      	adds	r0, #108	; 0x6c
    e192:	f7fc fd65 	bl	ac60 <os_mutex_init>
        assert(err == DPL_OK);
    e196:	b970      	cbnz	r0, e1b6 <tdma_init+0x106>
        tdma->nslots = nslots;
    e198:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
        tdma->dev_inst = dev;
    e19c:	6026      	str	r6, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    e19e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    e1a2:	3306      	adds	r3, #6
    e1a4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    e1a8:	e78e      	b.n	e0c8 <tdma_init+0x18>
        assert(tdma);
    e1aa:	2300      	movs	r3, #0
    e1ac:	461a      	mov	r2, r3
    e1ae:	4619      	mov	r1, r3
    e1b0:	4618      	mov	r0, r3
    e1b2:	f7fb f807 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    e1b6:	2300      	movs	r3, #0
    e1b8:	461a      	mov	r2, r3
    e1ba:	4619      	mov	r1, r3
    e1bc:	4618      	mov	r0, r3
    e1be:	f7fb f801 	bl	91c4 <__assert_func>
    assert(tdma->ccp);
    e1c2:	2300      	movs	r3, #0
    e1c4:	461a      	mov	r2, r3
    e1c6:	4619      	mov	r1, r3
    e1c8:	4618      	mov	r0, r3
    e1ca:	f7fa fffb 	bl	91c4 <__assert_func>
    assert(rc == 0);
    e1ce:	2300      	movs	r3, #0
    e1d0:	461a      	mov	r2, r3
    e1d2:	4619      	mov	r1, r3
    e1d4:	4618      	mov	r0, r3
    e1d6:	f7fa fff5 	bl	91c4 <__assert_func>
    assert(rc == 0);
    e1da:	2300      	movs	r3, #0
    e1dc:	461a      	mov	r2, r3
    e1de:	4619      	mov	r1, r3
    e1e0:	4618      	mov	r0, r3
    e1e2:	f7fa ffef 	bl	91c4 <__assert_func>
    e1e6:	bf00      	nop
    e1e8:	0000dfa5 	.word	0x0000dfa5
    e1ec:	00025a90 	.word	0x00025a90
    e1f0:	000259f8 	.word	0x000259f8
    e1f4:	0000df71 	.word	0x0000df71
    e1f8:	0000de89 	.word	0x0000de89

0000e1fc <tdma_assign_slot>:
{
    e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1fe:	4615      	mov	r5, r2
    assert(idx < inst->nslots);
    e200:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    e204:	42aa      	cmp	r2, r5
    e206:	d92c      	bls.n	e262 <tdma_assign_slot+0x66>
    e208:	4604      	mov	r4, r0
    e20a:	460e      	mov	r6, r1
    e20c:	461f      	mov	r7, r3
    if (inst->status.initialized == false)
    e20e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e212:	f013 0f02 	tst.w	r3, #2
    e216:	d023      	beq.n	e260 <tdma_assign_slot+0x64>
    if (inst->slot[idx] == NULL){
    e218:	f505 73a8 	add.w	r3, r5, #336	; 0x150
    e21c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e220:	b328      	cbz	r0, e26e <tdma_assign_slot+0x72>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    e222:	2238      	movs	r2, #56	; 0x38
    e224:	2100      	movs	r1, #0
    e226:	f002 fa38 	bl	1069a <memset>
    inst->slot[idx]->idx = idx;
    e22a:	f505 72a8 	add.w	r2, r5, #336	; 0x150
    e22e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    e232:	801d      	strh	r5, [r3, #0]
    inst->slot[idx]->parent = inst;
    e234:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    e238:	609c      	str	r4, [r3, #8]
    inst->slot[idx]->arg = arg;
    e23a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    e23e:	635f      	str	r7, [r3, #52]	; 0x34
    dpl_event_init(&inst->slot[idx]->event, call_back, (void *) inst->slot[idx]);
    e240:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    memset(ev, 0, sizeof(*ev));
    e244:	2100      	movs	r1, #0
    e246:	6259      	str	r1, [r3, #36]	; 0x24
    e248:	6299      	str	r1, [r3, #40]	; 0x28
    e24a:	62d9      	str	r1, [r3, #44]	; 0x2c
    e24c:	6319      	str	r1, [r3, #48]	; 0x30
    ev->ev.ev_cb = (os_event_fn *)fn;
    e24e:	629e      	str	r6, [r3, #40]	; 0x28
    ev->ev.ev_arg = arg;
    e250:	62db      	str	r3, [r3, #44]	; 0x2c
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    e252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    e256:	490e      	ldr	r1, [pc, #56]	; (e290 <tdma_assign_slot+0x94>)
    e258:	f102 000c 	add.w	r0, r2, #12
    e25c:	f004 fb26 	bl	128ac <dpl_cputime_timer_init>
}
    e260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(idx < inst->nslots);
    e262:	2300      	movs	r3, #0
    e264:	461a      	mov	r2, r3
    e266:	4619      	mov	r1, r3
    e268:	4618      	mov	r0, r3
    e26a:	f7fa ffab 	bl	91c4 <__assert_func>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    e26e:	2138      	movs	r1, #56	; 0x38
    e270:	2001      	movs	r0, #1
    e272:	f002 f8d0 	bl	10416 <calloc>
    e276:	f505 73a8 	add.w	r3, r5, #336	; 0x150
    e27a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        assert(inst->slot[idx]);
    e27e:	2800      	cmp	r0, #0
    e280:	d1d3      	bne.n	e22a <tdma_assign_slot+0x2e>
    e282:	2300      	movs	r3, #0
    e284:	461a      	mov	r2, r3
    e286:	4619      	mov	r1, r3
    e288:	4618      	mov	r0, r3
    e28a:	f7fa ff9b 	bl	91c4 <__assert_func>
    e28e:	bf00      	nop
    e290:	0000df71 	.word	0x0000df71

0000e294 <tdma_release_slot>:
{
    e294:	b538      	push	{r3, r4, r5, lr}
    assert(idx < inst->nslots);
    e296:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    e29a:	428b      	cmp	r3, r1
    e29c:	d913      	bls.n	e2c6 <tdma_release_slot+0x32>
    e29e:	4605      	mov	r5, r0
    e2a0:	460c      	mov	r4, r1
    if (inst->slot[idx]) {
    e2a2:	f501 73a8 	add.w	r3, r1, #336	; 0x150
    e2a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e2aa:	b158      	cbz	r0, e2c4 <tdma_release_slot+0x30>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    e2ac:	300c      	adds	r0, #12
    e2ae:	f004 fb18 	bl	128e2 <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    e2b2:	f504 74a8 	add.w	r4, r4, #336	; 0x150
    e2b6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    e2ba:	f002 f9a7 	bl	1060c <free>
        inst->slot[idx] =  NULL;
    e2be:	2300      	movs	r3, #0
    e2c0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
    e2c4:	bd38      	pop	{r3, r4, r5, pc}
    assert(idx < inst->nslots);
    e2c6:	2300      	movs	r3, #0
    e2c8:	461a      	mov	r2, r3
    e2ca:	4619      	mov	r1, r3
    e2cc:	4618      	mov	r0, r3
    e2ce:	f7fa ff79 	bl	91c4 <__assert_func>

0000e2d2 <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    e2d2:	b538      	push	{r3, r4, r5, lr}
    e2d4:	4605      	mov	r5, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    e2d6:	2400      	movs	r4, #0
    e2d8:	e001      	b.n	e2de <tdma_stop+0xc>
    e2da:	3401      	adds	r4, #1
    e2dc:	b2a4      	uxth	r4, r4
    e2de:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    e2e2:	42a3      	cmp	r3, r4
    e2e4:	d90d      	bls.n	e302 <tdma_stop+0x30>
        if (tdma->slot[i]){
    e2e6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    e2ea:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    e2ee:	2800      	cmp	r0, #0
    e2f0:	d0f3      	beq.n	e2da <tdma_stop+0x8>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    e2f2:	300c      	adds	r0, #12
    e2f4:	f004 faf5 	bl	128e2 <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    e2f8:	4621      	mov	r1, r4
    e2fa:	4628      	mov	r0, r5
    e2fc:	f7ff ffca 	bl	e294 <tdma_release_slot>
    e300:	e7eb      	b.n	e2da <tdma_stop+0x8>
        }
    }
}
    e302:	bd38      	pop	{r3, r4, r5, pc}

0000e304 <tdma_free>:
{
    e304:	b510      	push	{r4, lr}
    assert(inst);
    e306:	b190      	cbz	r0, e32e <tdma_free+0x2a>
    e308:	4604      	mov	r4, r0
    tdma_stop(inst);
    e30a:	f7ff ffe2 	bl	e2d2 <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    e30e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    e310:	6820      	ldr	r0, [r4, #0]
    e312:	f7fa fd04 	bl	8d1e <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    e316:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e31a:	f013 0f01 	tst.w	r3, #1
    e31e:	d10c      	bne.n	e33a <tdma_free+0x36>
        inst->status.initialized = 0;
    e320:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e324:	f36f 0341 	bfc	r3, #1, #1
    e328:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    e32c:	bd10      	pop	{r4, pc}
    assert(inst);
    e32e:	2300      	movs	r3, #0
    e330:	461a      	mov	r2, r3
    e332:	4619      	mov	r1, r3
    e334:	4618      	mov	r0, r3
    e336:	f7fa ff45 	bl	91c4 <__assert_func>
        free(inst);
    e33a:	4620      	mov	r0, r4
    e33c:	f002 f966 	bl	1060c <free>
    e340:	e7f4      	b.n	e32c <tdma_free+0x28>

0000e342 <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    e342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e346:	ee10 8a10 	vmov	r8, s0
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    e34a:	6845      	ldr	r5, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    e34c:	6803      	ldr	r3, [r0, #0]
    e34e:	f893 451b 	ldrb.w	r4, [r3, #1307]	; 0x51b
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    e352:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
    e356:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    e35a:	2300      	movs	r3, #0
    e35c:	0408      	lsls	r0, r1, #16
    e35e:	0c09      	lsrs	r1, r1, #16
    e360:	f015 fe04 	bl	23f6c <__aeabi_uldivmod>
    e364:	f015 f926 	bl	235b4 <__aeabi_ul2d>
    e368:	4606      	mov	r6, r0
    e36a:	460f      	mov	r7, r1
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    e36c:	4640      	mov	r0, r8
    e36e:	f015 f8ff 	bl	23570 <__aeabi_f2d>
    e372:	4632      	mov	r2, r6
    e374:	463b      	mov	r3, r7
    e376:	f015 f953 	bl	23620 <__aeabi_dmul>
    e37a:	f015 fe0f 	bl	23f9c <__aeabi_d2lz>
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    e37e:	0422      	lsls	r2, r4, #16
    e380:	1a82      	subs	r2, r0, r2

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    e382:	f8d5 40d8 	ldr.w	r4, [r5, #216]	; 0xd8
    e386:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
    e38a:	f161 0300 	sbc.w	r3, r1, #0
    e38e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    e390:	f001 ff70 	bl	10274 <uwb_wcs_dtu_time_adjust>
    e394:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    e396:	eb46 0101 	adc.w	r1, r6, r1
    e39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000e3a0 <tdma_tx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start (dtu)
 */
uint64_t
tdma_tx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    e3a0:	b570      	push	{r4, r5, r6, lr}
    e3a2:	4606      	mov	r6, r0
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    e3a4:	f7ff ffcd 	bl	e342 <tdma_rx_slot_start>
    e3a8:	4604      	mov	r4, r0
    e3aa:	460d      	mov	r5, r1
#ifndef __KERNEL__
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    e3ac:	6830      	ldr	r0, [r6, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    e3ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e3b4:	4798      	blx	r3
    e3b6:	f015 f8c9 	bl	2354c <__aeabi_i2d>
    e3ba:	a30b      	add	r3, pc, #44	; (adr r3, e3e8 <tdma_tx_slot_start+0x48>)
    e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3c0:	f015 fa58 	bl	23874 <__aeabi_ddiv>
    e3c4:	f015 fc24 	bl	23c10 <__aeabi_d2f>
    e3c8:	ee00 0a10 	vmov	s0, r0
    e3cc:	f015 ffb0 	bl	24330 <ceilf>
    e3d0:	ee10 0a10 	vmov	r0, s0
    e3d4:	f015 fdfa 	bl	23fcc <__aeabi_f2ulz>
    e3d8:	0409      	lsls	r1, r1, #16
    e3da:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    e3de:	0403      	lsls	r3, r0, #16
    e3e0:	1918      	adds	r0, r3, r4
#else
    dx_time = (dx_time + ((uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
#endif
    return dx_time;
}
    e3e2:	eb41 0105 	adc.w	r1, r1, r5
    e3e6:	bd70      	pop	{r4, r5, r6, pc}
    e3e8:	90690691 	.word	0x90690691
    e3ec:	3ff06906 	.word	0x3ff06906

0000e3f0 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    e3f0:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    e3f2:	f004 fa7a 	bl	128ea <dpl_cputime_get32>
    e3f6:	4601      	mov	r1, r0
    e3f8:	4808      	ldr	r0, [pc, #32]	; (e41c <tdma_pkg_init+0x2c>)
    e3fa:	f002 fd67 	bl	10ecc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e3fe:	2400      	movs	r4, #0
    e400:	e000      	b.n	e404 <tdma_pkg_init+0x14>
    e402:	3401      	adds	r4, #1
    e404:	2c02      	cmp	r4, #2
    e406:	dc08      	bgt.n	e41a <tdma_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    e408:	4620      	mov	r0, r4
    e40a:	f7fa fc33 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    e40e:	2800      	cmp	r0, #0
    e410:	d0f7      	beq.n	e402 <tdma_pkg_init+0x12>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    e412:	21a0      	movs	r1, #160	; 0xa0
    e414:	f7ff fe4c 	bl	e0b0 <tdma_init>
    e418:	e7f3      	b.n	e402 <tdma_pkg_init+0x12>
    }
}
    e41a:	bd10      	pop	{r4, pc}
    e41c:	00025a00 	.word	0x00025a00

0000e420 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    e420:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    e422:	f004 fa62 	bl	128ea <dpl_cputime_get32>
    e426:	4601      	mov	r1, r0
    e428:	480b      	ldr	r0, [pc, #44]	; (e458 <tdma_pkg_down+0x38>)
    e42a:	f002 fd4f 	bl	10ecc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e42e:	2400      	movs	r4, #0
    e430:	e000      	b.n	e434 <tdma_pkg_down+0x14>
    e432:	3401      	adds	r4, #1
    e434:	2c02      	cmp	r4, #2
    e436:	dc0c      	bgt.n	e452 <tdma_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    e438:	4620      	mov	r0, r4
    e43a:	f7fa fc1b 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    e43e:	2800      	cmp	r0, #0
    e440:	d0f7      	beq.n	e432 <tdma_pkg_down+0x12>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    e442:	2103      	movs	r1, #3
    e444:	f7fa fc9b 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    e448:	2800      	cmp	r0, #0
    e44a:	d0f2      	beq.n	e432 <tdma_pkg_down+0x12>
            continue;
        }
        tdma_free(tdma);
    e44c:	f7ff ff5a 	bl	e304 <tdma_free>
    e450:	e7ef      	b.n	e432 <tdma_pkg_down+0x12>
    }
    return 0;
}
    e452:	2000      	movs	r0, #0
    e454:	bd10      	pop	{r4, pc}
    e456:	bf00      	nop
    e458:	00025a28 	.word	0x00025a28
    e45c:	00000000 	.word	0x00000000

0000e460 <adjust_for_epoch_to_rm>:
}
#endif

static void
adjust_for_epoch_to_rm(struct uwb_ccp_instance * ccp, uint16_t epoch_to_rm_us)
{
    e460:	b5d0      	push	{r4, r6, r7, lr}
    e462:	4604      	mov	r4, r0
    e464:	4608      	mov	r0, r1
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    e466:	040a      	lsls	r2, r1, #16
    e468:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    e46c:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
    e470:	1a9b      	subs	r3, r3, r2
    e472:	f161 0100 	sbc.w	r1, r1, #0
    e476:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    e47a:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    e47e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    e482:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    e486:	1a9b      	subs	r3, r3, r2
    e488:	f161 0100 	sbc.w	r1, r1, #0
    e48c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    e490:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    e494:	f015 f85a 	bl	2354c <__aeabi_i2d>
    e498:	a309      	add	r3, pc, #36	; (adr r3, e4c0 <adjust_for_epoch_to_rm+0x60>)
    e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e49e:	f015 f8bf 	bl	23620 <__aeabi_dmul>
    e4a2:	4606      	mov	r6, r0
    e4a4:	460f      	mov	r7, r1
    e4a6:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e4aa:	f015 f83f 	bl	2352c <__aeabi_ui2d>
    e4ae:	4632      	mov	r2, r6
    e4b0:	463b      	mov	r3, r7
    e4b2:	f014 fefd 	bl	232b0 <__aeabi_dsub>
    e4b6:	f015 fb8b 	bl	23bd0 <__aeabi_d2uiz>
    e4ba:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
}
    e4be:	bdd0      	pop	{r4, r6, r7, pc}
    e4c0:	90690691 	.word	0x90690691
    e4c4:	3ff06906 	.word	0x3ff06906

0000e4c8 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
    e4c8:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e4ca:	684c      	ldr	r4, [r1, #4]
    e4cc:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e4d0:	b10b      	cbz	r3, e4d6 <reset_cb+0xe>
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
        CCP_STATS_INC(reset);
        return true;
    }
    return false;   // CCP is an observer and should not return true
    e4d2:	2000      	movs	r0, #0
}
    e4d4:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    e4d6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e4da:	f7fb fdd5 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    e4de:	b920      	cbnz	r0, e4ea <reset_cb+0x22>
        CCP_STATS_INC(reset);
    e4e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e4e2:	3301      	adds	r3, #1
    e4e4:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    e4e6:	2001      	movs	r0, #1
    e4e8:	e7f4      	b.n	e4d4 <reset_cb+0xc>
        assert(err == DPL_OK);
    e4ea:	2300      	movs	r3, #0
    e4ec:	461a      	mov	r2, r3
    e4ee:	4619      	mov	r1, r3
    e4f0:	4618      	mov	r0, r3
    e4f2:	f7fa fe67 	bl	91c4 <__assert_func>

0000e4f6 <error_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e4f6:	6848      	ldr	r0, [r1, #4]
    e4f8:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e4fc:	2a01      	cmp	r2, #1
    e4fe:	d020      	beq.n	e542 <error_cb+0x4c>
{
    e500:	b508      	push	{r3, lr}
    CCP_STATS_INC(txrx_error);
    e502:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e504:	3301      	adds	r3, #1
    e506:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    e508:	b9ea      	cbnz	r2, e546 <error_cb+0x50>
        if (ccp->config.role != CCP_ROLE_MASTER) {
    e50a:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    e50e:	f013 0f1e 	tst.w	r3, #30
    e512:	d00a      	beq.n	e52a <error_cb+0x34>
            ccp->status.rx_error = 1;
    e514:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e518:	f043 0301 	orr.w	r3, r3, #1
    e51c:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    e520:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    e524:	3301      	adds	r3, #1
    e526:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    e52a:	30b0      	adds	r0, #176	; 0xb0
    e52c:	f7fb fdac 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    e530:	b908      	cbnz	r0, e536 <error_cb+0x40>
    return true;
    e532:	2001      	movs	r0, #1
    e534:	e008      	b.n	e548 <error_cb+0x52>
        assert(err == DPL_OK);
    e536:	2300      	movs	r3, #0
    e538:	461a      	mov	r2, r3
    e53a:	4619      	mov	r1, r3
    e53c:	4618      	mov	r0, r3
    e53e:	f7fa fe41 	bl	91c4 <__assert_func>
        return false;
    e542:	2000      	movs	r0, #0
}
    e544:	4770      	bx	lr
    return true;
    e546:	2001      	movs	r0, #1
}
    e548:	bd08      	pop	{r3, pc}

0000e54a <rx_timeout_cb>:
{
    e54a:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e54c:	6848      	ldr	r0, [r1, #4]
    e54e:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e552:	2b01      	cmp	r3, #1
    e554:	d01c      	beq.n	e590 <rx_timeout_cb+0x46>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    e556:	b10b      	cbz	r3, e55c <rx_timeout_cb+0x12>
    return true;
    e558:	2001      	movs	r0, #1
}
    e55a:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    e55c:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e560:	f043 0302 	orr.w	r3, r3, #2
    e564:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    e568:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    e56c:	3301      	adds	r3, #1
    e56e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    e572:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    e574:	3301      	adds	r3, #1
    e576:	65c3      	str	r3, [r0, #92]	; 0x5c
    e578:	30b0      	adds	r0, #176	; 0xb0
    e57a:	f7fb fd85 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    e57e:	b908      	cbnz	r0, e584 <rx_timeout_cb+0x3a>
    return true;
    e580:	2001      	movs	r0, #1
    e582:	e7ea      	b.n	e55a <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    e584:	2300      	movs	r3, #0
    e586:	461a      	mov	r2, r3
    e588:	4619      	mov	r1, r3
    e58a:	4618      	mov	r0, r3
    e58c:	f7fa fe1a 	bl	91c4 <__assert_func>
        return false;
    e590:	2000      	movs	r0, #0
    e592:	e7e2      	b.n	e55a <rx_timeout_cb+0x10>

0000e594 <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    e594:	b508      	push	{r3, lr}
    assert(arg);
    e596:	b130      	cbz	r0, e5a6 <ccp_timer_irq+0x12>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e598:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    e59c:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    e5a0:	f7fb f952 	bl	9848 <os_eventq_put>
}
    e5a4:	bd08      	pop	{r3, pc}
    assert(arg);
    e5a6:	2300      	movs	r3, #0
    e5a8:	461a      	mov	r2, r3
    e5aa:	4619      	mov	r1, r3
    e5ac:	4618      	mov	r0, r3
    e5ae:	f7fa fe09 	bl	91c4 <__assert_func>
    e5b2:	0000      	movs	r0, r0
    e5b4:	0000      	movs	r0, r0
	...

0000e5b8 <tx_complete_cb>:
{
    e5b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e5bc:	684c      	ldr	r4, [r1, #4]
    e5be:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e5c2:	2b01      	cmp	r3, #1
    e5c4:	f000 8083 	beq.w	e6ce <tx_complete_cb+0x116>
    e5c8:	4606      	mov	r6, r0
    CCP_STATS_INC(tx_complete);
    e5ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e5cc:	3301      	adds	r3, #1
    e5ce:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    e5d0:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    e5d4:	f013 0f1e 	tst.w	r3, #30
    e5d8:	d179      	bne.n	e6ce <tx_complete_cb+0x116>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    e5da:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e5de:	3301      	adds	r3, #1
    e5e0:	b29b      	uxth	r3, r3
    e5e2:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    e5e6:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    e5ea:	fbb3 f1f2 	udiv	r1, r3, r2
    e5ee:	fb02 3311 	mls	r3, r2, r1, r3
    e5f2:	b29b      	uxth	r3, r3
    e5f4:	33e0      	adds	r3, #224	; 0xe0
    e5f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    e5fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e5fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e5fe:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e600:	696b      	ldr	r3, [r5, #20]
    e602:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    e606:	f004 f970 	bl	128ea <dpl_cputime_get32>
    e60a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e60e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e612:	4630      	mov	r0, r6
    e614:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e616:	696b      	ldr	r3, [r5, #20]
    e618:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    e61a:	0840      	lsrs	r0, r0, #1
    e61c:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e620:	0c00      	lsrs	r0, r0, #16
    e622:	f014 ff83 	bl	2352c <__aeabi_ui2d>
    e626:	a34e      	add	r3, pc, #312	; (adr r3, e760 <tx_complete_cb+0x1a8>)
    e628:	e9d3 2300 	ldrd	r2, r3, [r3]
    e62c:	f014 fff8 	bl	23620 <__aeabi_dmul>
    e630:	4680      	mov	r8, r0
    e632:	4689      	mov	r9, r1
    e634:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e638:	f014 ff78 	bl	2352c <__aeabi_ui2d>
    e63c:	4642      	mov	r2, r8
    e63e:	464b      	mov	r3, r9
    e640:	f014 fe36 	bl	232b0 <__aeabi_dsub>
    e644:	f015 fac4 	bl	23bd0 <__aeabi_d2uiz>
    e648:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e64c:	2300      	movs	r3, #0
    e64e:	6523      	str	r3, [r4, #80]	; 0x50
    e650:	2200      	movs	r2, #0
    e652:	2300      	movs	r3, #0
    e654:	4640      	mov	r0, r8
    e656:	4649      	mov	r1, r9
    e658:	f014 fe2c 	bl	232b4 <__adddf3>
    e65c:	f015 fab8 	bl	23bd0 <__aeabi_d2uiz>
    e660:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->local_epoch = frame->transmission_timestamp.lo;
    e662:	696a      	ldr	r2, [r5, #20]
    e664:	7e2b      	ldrb	r3, [r5, #24]
    e666:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    e66a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->master_epoch = frame->transmission_timestamp;
    e66e:	696a      	ldr	r2, [r5, #20]
    e670:	69ab      	ldr	r3, [r5, #24]
    e672:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    e676:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->period = (frame->transmission_interval >> 16);
    e67a:	68eb      	ldr	r3, [r5, #12]
    e67c:	7c2a      	ldrb	r2, [r5, #16]
    e67e:	0c1b      	lsrs	r3, r3, #16
    e680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e684:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    e688:	8be9      	ldrh	r1, [r5, #30]
    e68a:	4620      	mov	r0, r4
    e68c:	f7ff fee8 	bl	e460 <adjust_for_epoch_to_rm>
    if (ccp->status.timer_enabled){
    e690:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e694:	f013 0f04 	tst.w	r3, #4
    e698:	d11c      	bne.n	e6d4 <tx_complete_cb+0x11c>
    ccp->status.valid |= ccp->idx > 1;
    e69a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e69e:	f3c3 0280 	ubfx	r2, r3, #2, #1
    e6a2:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    e6a6:	2901      	cmp	r1, #1
    e6a8:	bf88      	it	hi
    e6aa:	f042 0201 	orrhi.w	r2, r2, #1
    e6ae:	f362 0382 	bfi	r3, r2, #2, #1
    e6b2:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    e6b6:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    e6ba:	bb95      	cbnz	r5, e722 <tx_complete_cb+0x16a>
    if (ccp->config.postprocess && ccp->status.valid)
    e6bc:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    e6c0:	4b29      	ldr	r3, [pc, #164]	; (e768 <tx_complete_cb+0x1b0>)
    e6c2:	4393      	bics	r3, r2
    e6c4:	d036      	beq.n	e734 <tx_complete_cb+0x17c>
    e6c6:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d039      	beq.n	e742 <tx_complete_cb+0x18a>
}
    e6ce:	2000      	movs	r0, #0
    e6d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    e6d4:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    e6d8:	f5a5 757a 	sub.w	r5, r5, #1000	; 0x3e8
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    e6dc:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    e6e0:	f014 ff24 	bl	2352c <__aeabi_ui2d>
    e6e4:	a31e      	add	r3, pc, #120	; (adr r3, e760 <tx_complete_cb+0x1a8>)
    e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6ea:	f014 ff99 	bl	23620 <__aeabi_dmul>
    e6ee:	4680      	mov	r8, r0
    e6f0:	4689      	mov	r9, r1
    e6f2:	4628      	mov	r0, r5
    e6f4:	f014 ff1a 	bl	2352c <__aeabi_ui2d>
    e6f8:	4642      	mov	r2, r8
    e6fa:	464b      	mov	r3, r9
    e6fc:	f014 fdda 	bl	232b4 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    e700:	f015 fa66 	bl	23bd0 <__aeabi_d2uiz>
    e704:	4601      	mov	r1, r0
    e706:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    e70a:	f004 f8e6 	bl	128da <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    e70e:	2800      	cmp	r0, #0
    e710:	d1c3      	bne.n	e69a <tx_complete_cb+0xe2>
    e712:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e716:	f043 0308 	orr.w	r3, r3, #8
    e71a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    e71e:	e7bc      	b.n	e69a <tx_complete_cb+0xe2>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    e720:	6bad      	ldr	r5, [r5, #56]	; 0x38
    e722:	2d00      	cmp	r5, #0
    e724:	d0ca      	beq.n	e6bc <tx_complete_cb+0x104>
            if (lcbs != NULL && lcbs->superframe_cb) {
    e726:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e728:	2b00      	cmp	r3, #0
    e72a:	d0f9      	beq.n	e720 <tx_complete_cb+0x168>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    e72c:	4629      	mov	r1, r5
    e72e:	4630      	mov	r0, r6
    e730:	4798      	blx	r3
    e732:	e7f5      	b.n	e720 <tx_complete_cb+0x168>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    e734:	f7fb f936 	bl	99a4 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e738:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e73c:	f7fb f884 	bl	9848 <os_eventq_put>
}
    e740:	e7c1      	b.n	e6c6 <tx_complete_cb+0x10e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e742:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e746:	f7fb fc9f 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    e74a:	2800      	cmp	r0, #0
    e74c:	d0bf      	beq.n	e6ce <tx_complete_cb+0x116>
    e74e:	2300      	movs	r3, #0
    e750:	461a      	mov	r2, r3
    e752:	4619      	mov	r1, r3
    e754:	4618      	mov	r0, r3
    e756:	f7fa fd35 	bl	91c4 <__assert_func>
    e75a:	bf00      	nop
    e75c:	f3af 8000 	nop.w
    e760:	90690691 	.word	0x90690691
    e764:	3ff06906 	.word	0x3ff06906
    e768:	00010004 	.word	0x00010004

0000e76c <ccp_task>:
{
    e76c:	b510      	push	{r4, lr}
    e76e:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    e770:	f504 7086 	add.w	r0, r4, #268	; 0x10c
    e774:	f7fb f8e8 	bl	9948 <os_eventq_run>
    e778:	e7fa      	b.n	e770 <ccp_task+0x4>
	...

0000e77c <ccp_tasks_init>:
{
    e77c:	b530      	push	{r4, r5, lr}
    e77e:	b085      	sub	sp, #20
    e780:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    e782:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    return os_eventq_inited((struct os_eventq *) evq);
    e786:	4628      	mov	r0, r5
    e788:	f7fb f859 	bl	983e <os_eventq_inited>
    e78c:	b108      	cbz	r0, e792 <ccp_tasks_init+0x16>
}
    e78e:	b005      	add	sp, #20
    e790:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    e792:	4628      	mov	r0, r5
    e794:	f7fb f84a 	bl	982c <os_eventq_init>
        dpl_task_init(&inst->task_str, "ccp",
    e798:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
                      inst->task_stack,
    e79c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    e7a0:	2180      	movs	r1, #128	; 0x80
    e7a2:	9103      	str	r1, [sp, #12]
    e7a4:	9202      	str	r2, [sp, #8]
    e7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e7aa:	9201      	str	r2, [sp, #4]
    e7ac:	9300      	str	r3, [sp, #0]
    e7ae:	4623      	mov	r3, r4
    e7b0:	4a03      	ldr	r2, [pc, #12]	; (e7c0 <ccp_tasks_init+0x44>)
    e7b2:	4904      	ldr	r1, [pc, #16]	; (e7c4 <ccp_tasks_init+0x48>)
    e7b4:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    e7b8:	f7fb fcfe 	bl	a1b8 <os_task_init>
}
    e7bc:	e7e7      	b.n	e78e <ccp_tasks_init+0x12>
    e7be:	bf00      	nop
    e7c0:	0000e76d 	.word	0x0000e76d
    e7c4:	00025aa8 	.word	0x00025aa8

0000e7c8 <ccp_timer_init>:
{
    e7c8:	b570      	push	{r4, r5, r6, lr}
    e7ca:	4604      	mov	r4, r0
    e7cc:	460d      	mov	r5, r1
    ccp->status.timer_enabled = true;
    e7ce:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e7d2:	f043 0304 	orr.w	r3, r3, #4
    e7d6:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    e7da:	f100 06f4 	add.w	r6, r0, #244	; 0xf4
    e7de:	4602      	mov	r2, r0
    e7e0:	4915      	ldr	r1, [pc, #84]	; (e838 <ccp_timer_init+0x70>)
    e7e2:	4630      	mov	r0, r6
    e7e4:	f004 f862 	bl	128ac <dpl_cputime_timer_init>
    return ev->ev.ev_arg;
    e7e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    e7ec:	429c      	cmp	r4, r3
    e7ee:	d00e      	beq.n	e80e <ccp_timer_init+0x46>
        if (role == CCP_ROLE_MASTER){
    e7f0:	b995      	cbnz	r5, e818 <ccp_timer_init+0x50>
    memset(ev, 0, sizeof(*ev));
    e7f2:	2300      	movs	r3, #0
    e7f4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    e7f8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    e7fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e800:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    e804:	4b0d      	ldr	r3, [pc, #52]	; (e83c <ccp_timer_init+0x74>)
    e806:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    e80a:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
    dpl_cputime_timer_relative(&ccp->timer, 0);
    e80e:	2100      	movs	r1, #0
    e810:	4630      	mov	r0, r6
    e812:	f004 f87e 	bl	12912 <dpl_cputime_timer_relative>
}
    e816:	bd70      	pop	{r4, r5, r6, pc}
    memset(ev, 0, sizeof(*ev));
    e818:	2300      	movs	r3, #0
    e81a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    e81e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    e822:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e826:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    e82a:	4b05      	ldr	r3, [pc, #20]	; (e840 <ccp_timer_init+0x78>)
    e82c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    e830:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
}
    e834:	e7eb      	b.n	e80e <ccp_timer_init+0x46>
    e836:	bf00      	nop
    e838:	0000e595 	.word	0x0000e595
    e83c:	0000edb9 	.word	0x0000edb9
    e840:	0000e981 	.word	0x0000e981
    e844:	00000000 	.word	0x00000000

0000e848 <ccp_listen>:
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
{
    e848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e84c:	4604      	mov	r4, r0
    e84e:	4616      	mov	r6, r2
    e850:	4698      	mov	r8, r3
    e852:	f89d 9020 	ldrb.w	r9, [sp, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    e856:	4607      	mov	r7, r0
    e858:	f857 5bb0 	ldr.w	r5, [r7], #176
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    e85c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    e862:	4628      	mov	r0, r5
    e864:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    e866:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e86a:	4638      	mov	r0, r7
    e86c:	f7fb fc3e 	bl	a0ec <os_sem_pend>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    e870:	2800      	cmp	r0, #0
    e872:	d14f      	bne.n	e914 <ccp_listen+0xcc>

    CCP_STATS_INC(listen);
    e874:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e876:	3301      	adds	r3, #1
    e878:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    e87a:	ea56 0308 	orrs.w	r3, r6, r8
    e87e:	d005      	beq.n	e88c <ccp_listen+0x44>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    e880:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e882:	6b59      	ldr	r1, [r3, #52]	; 0x34
    e884:	4632      	mov	r2, r6
    e886:	4643      	mov	r3, r8
    e888:	4628      	mov	r0, r5
    e88a:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    ccp->status.rx_timeout_error = 0;
    e88c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e890:	f36f 0341 	bfc	r3, #1, #1
    e894:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    e898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e89c:	4628      	mov	r0, r5
    e89e:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    e8a0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e8a4:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e8a8:	f360 13c7 	bfi	r3, r0, #7, #1
    e8ac:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    e8b0:	b25b      	sxtb	r3, r3
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	db34      	blt.n	e920 <ccp_listen+0xd8>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
        err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }else if(mode == UWB_BLOCKING){
    e8b6:	f1b9 0f00 	cmp.w	r9, #0
    e8ba:	d14e      	bne.n	e95a <ccp_listen+0x112>
#if MYNEWT_VAL(UWB_CCP_STATS)
        if (dx_time) {
    e8bc:	ea56 0308 	orrs.w	r3, r6, r8
    e8c0:	d015      	beq.n	e8ee <ccp_listen+0xa6>
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    e8c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e8c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e8c6:	4628      	mov	r0, r5
    e8c8:	4798      	blx	r3
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    e8ca:	1a30      	subs	r0, r6, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    e8cc:	2300      	movs	r3, #0
    e8ce:	65a3      	str	r3, [r4, #88]	; 0x58
    e8d0:	0c00      	lsrs	r0, r0, #16
    e8d2:	f014 fe2b 	bl	2352c <__aeabi_ui2d>
    e8d6:	a328      	add	r3, pc, #160	; (adr r3, e978 <ccp_listen+0x130>)
    e8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e8dc:	f014 fea0 	bl	23620 <__aeabi_dmul>
    e8e0:	2200      	movs	r2, #0
    e8e2:	2300      	movs	r3, #0
    e8e4:	f014 fce6 	bl	232b4 <__adddf3>
    e8e8:	f015 f972 	bl	23bd0 <__aeabi_d2uiz>
    e8ec:	65a0      	str	r0, [r4, #88]	; 0x58
    e8ee:	2121      	movs	r1, #33	; 0x21
    e8f0:	4638      	mov	r0, r7
    e8f2:	f7fb fbfb 	bl	a0ec <os_sem_pend>
        }
#endif
        /* Wait for completion of transactions */
        err = dpl_sem_pend(&ccp->sem, dpl_time_ms_to_ticks32(4*MYNEWT_VAL(UWB_CCP_LONG_RX_TO)/1000));
        if (err==DPL_TIMEOUT) {
    e8f6:	2806      	cmp	r0, #6
    e8f8:	d039      	beq.n	e96e <ccp_listen+0x126>
    e8fa:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
    e8fe:	bb63      	cbnz	r3, e95a <ccp_listen+0x112>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e900:	4638      	mov	r0, r7
    e902:	f7fb fbc1 	bl	a088 <os_sem_release>
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    e906:	b340      	cbz	r0, e95a <ccp_listen+0x112>
    e908:	2300      	movs	r3, #0
    e90a:	461a      	mov	r2, r3
    e90c:	4619      	mov	r1, r3
    e90e:	4618      	mov	r0, r3
    e910:	f7fa fc58 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    e914:	2300      	movs	r3, #0
    e916:	461a      	mov	r2, r3
    e918:	4619      	mov	r1, r3
    e91a:	4618      	mov	r0, r3
    e91c:	f7fa fc52 	bl	91c4 <__assert_func>
    e920:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e924:	4628      	mov	r0, r5
    e926:	4798      	blx	r3
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    e928:	1b80      	subs	r0, r0, r6
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    e92a:	2300      	movs	r3, #0
    e92c:	6563      	str	r3, [r4, #84]	; 0x54
    e92e:	0c00      	lsrs	r0, r0, #16
    e930:	f014 fdfc 	bl	2352c <__aeabi_ui2d>
    e934:	a310      	add	r3, pc, #64	; (adr r3, e978 <ccp_listen+0x130>)
    e936:	e9d3 2300 	ldrd	r2, r3, [r3]
    e93a:	f014 fe71 	bl	23620 <__aeabi_dmul>
    e93e:	2200      	movs	r2, #0
    e940:	2300      	movs	r3, #0
    e942:	f014 fcb7 	bl	232b4 <__adddf3>
    e946:	f015 f943 	bl	23bd0 <__aeabi_d2uiz>
    e94a:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    e94c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e94e:	3301      	adds	r3, #1
    e950:	6363      	str	r3, [r4, #52]	; 0x34
    e952:	4638      	mov	r0, r7
    e954:	f7fb fb98 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    e958:	b918      	cbnz	r0, e962 <ccp_listen+0x11a>
        }
    }
    return ccp->status;
}
    e95a:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        assert(err == DPL_OK);
    e962:	2300      	movs	r3, #0
    e964:	461a      	mov	r2, r3
    e966:	4619      	mov	r1, r3
    e968:	4618      	mov	r0, r3
    e96a:	f7fa fc2b 	bl	91c4 <__assert_func>
            CCP_STATS_INC(sem_timeout);
    e96e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e970:	3301      	adds	r3, #1
    e972:	6623      	str	r3, [r4, #96]	; 0x60
    e974:	e7c1      	b.n	e8fa <ccp_listen+0xb2>
    e976:	bf00      	nop
    e978:	90690691 	.word	0x90690691
    e97c:	3ff06906 	.word	0x3ff06906

0000e980 <ccp_slave_timer_ev_cb>:
{
    e980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e984:	b082      	sub	sp, #8
    assert(ev != NULL);
    e986:	2800      	cmp	r0, #0
    e988:	d06f      	beq.n	ea6a <ccp_slave_timer_ev_cb+0xea>
    return ev->ev.ev_arg;
    e98a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    e98c:	2c00      	cmp	r4, #0
    e98e:	d072      	beq.n	ea76 <ccp_slave_timer_ev_cb+0xf6>
    struct uwb_dev * inst = ccp->dev_inst;
    e990:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    e992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e996:	2120      	movs	r1, #32
    e998:	4628      	mov	r0, r5
    e99a:	4798      	blx	r3
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    e99c:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    e9a0:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e9a4:	f013 0f10 	tst.w	r3, #16
    e9a8:	d05c      	beq.n	ea64 <ccp_slave_timer_ev_cb+0xe4>
    if (ccp->status.rx_timeout_error) {
    e9aa:	f013 0f02 	tst.w	r3, #2
    e9ae:	d168      	bne.n	ea82 <ccp_slave_timer_ev_cb+0x102>
    CCP_STATS_INC(slave_cnt);
    e9b0:	69e3      	ldr	r3, [r4, #28]
    e9b2:	3301      	adds	r3, #1
    e9b4:	61e3      	str	r3, [r4, #28]
    dx_time = ccp->local_epoch;
    e9b6:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
    e9ba:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
    if (ccp->wcs) {
    e9be:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    e9c2:	f1b8 0f00 	cmp.w	r8, #0
    e9c6:	d00e      	beq.n	e9e6 <ccp_slave_timer_ev_cb+0x66>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    e9c8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    e9cc:	0408      	lsls	r0, r1, #16
    e9ce:	0c09      	lsrs	r1, r1, #16
    e9d0:	f014 fdf0 	bl	235b4 <__aeabi_ul2d>
    e9d4:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    e9d8:	f014 fe22 	bl	23620 <__aeabi_dmul>
    e9dc:	f015 fb16 	bl	2400c <__aeabi_d2ulz>
    e9e0:	19c7      	adds	r7, r0, r7
    e9e2:	eb46 0601 	adc.w	r6, r6, r1
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    e9e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e9e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e9ec:	4628      	mov	r0, r5
    e9ee:	4798      	blx	r3
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    e9f0:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    e9f4:	4418      	add	r0, r3
    e9f6:	f014 fda9 	bl	2354c <__aeabi_i2d>
    e9fa:	a34d      	add	r3, pc, #308	; (adr r3, eb30 <ccp_slave_timer_ev_cb+0x1b0>)
    e9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea00:	f014 ff38 	bl	23874 <__aeabi_ddiv>
    ea04:	f015 f904 	bl	23c10 <__aeabi_d2f>
    ea08:	ee00 0a10 	vmov	s0, r0
    ea0c:	f015 fc90 	bl	24330 <ceilf>
    ea10:	ee10 0a10 	vmov	r0, s0
    ea14:	f015 fada 	bl	23fcc <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    ea18:	0409      	lsls	r1, r1, #16
    ea1a:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    ea1e:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    ea20:	1a3f      	subs	r7, r7, r0
    ea22:	eb66 0601 	sbc.w	r6, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    ea26:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    ea2a:	f501 7380 	add.w	r3, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    ea2e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    ea32:	4411      	add	r1, r2
    ea34:	0089      	lsls	r1, r1, #2
    ea36:	fa11 f183 	uxtah	r1, r1, r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    ea3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea3e:	b289      	uxth	r1, r1
    ea40:	4628      	mov	r0, r5
    ea42:	4798      	blx	r3
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    ea44:	2300      	movs	r3, #0
    ea46:	9300      	str	r3, [sp, #0]
    ea48:	463a      	mov	r2, r7
    ea4a:	4633      	mov	r3, r6
    ea4c:	4620      	mov	r0, r4
    ea4e:	f7ff fefb 	bl	e848 <ccp_listen>
    if(ccp->status.start_rx_error){
    ea52:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    ea56:	2b00      	cmp	r3, #0
    ea58:	db21      	blt.n	ea9e <ccp_slave_timer_ev_cb+0x11e>
    if (!ccp->status.enabled) {
    ea5a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ea5e:	f013 0f10 	tst.w	r3, #16
    ea62:	d12a      	bne.n	eaba <ccp_slave_timer_ev_cb+0x13a>
}
    ea64:	b002      	add	sp, #8
    ea66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ev != NULL);
    ea6a:	2300      	movs	r3, #0
    ea6c:	461a      	mov	r2, r3
    ea6e:	4619      	mov	r1, r3
    ea70:	4618      	mov	r0, r3
    ea72:	f7fa fba7 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    ea76:	2300      	movs	r3, #0
    ea78:	461a      	mov	r2, r3
    ea7a:	4619      	mov	r1, r3
    ea7c:	4618      	mov	r0, r3
    ea7e:	f7fa fba1 	bl	91c4 <__assert_func>
    ea82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea86:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea8a:	4628      	mov	r0, r5
    ea8c:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    ea8e:	2300      	movs	r3, #0
    ea90:	9300      	str	r3, [sp, #0]
    ea92:	2200      	movs	r2, #0
    ea94:	2300      	movs	r3, #0
    ea96:	4620      	mov	r0, r4
    ea98:	f7ff fed6 	bl	e848 <ccp_listen>
        goto reset_timer;
    ea9c:	e7dd      	b.n	ea5a <ccp_slave_timer_ev_cb+0xda>
    ea9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eaa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eaa6:	4628      	mov	r0, r5
    eaa8:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    eaaa:	2300      	movs	r3, #0
    eaac:	9300      	str	r3, [sp, #0]
    eaae:	2200      	movs	r2, #0
    eab0:	2300      	movs	r3, #0
    eab2:	4620      	mov	r0, r4
    eab4:	f7ff fec8 	bl	e848 <ccp_listen>
    eab8:	e7cf      	b.n	ea5a <ccp_slave_timer_ev_cb+0xda>
    dpl_cputime_timer_stop(&ccp->timer);
    eaba:	f104 07f4 	add.w	r7, r4, #244	; 0xf4
    eabe:	4638      	mov	r0, r7
    eac0:	f003 ff0f 	bl	128e2 <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    eac4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    eac8:	f013 0f02 	tst.w	r3, #2
    eacc:	d002      	beq.n	ead4 <ccp_slave_timer_ev_cb+0x154>
        ccp->missed_frames > MYNEWT_VAL(UWB_CCP_TOLERATE_MISSED_FRAMES)) {
    eace:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if (ccp->status.rx_timeout_error &&
    ead2:	bb3b      	cbnz	r3, eb24 <ccp_slave_timer_ev_cb+0x1a4>
        ccp->status.rx_timeout_error = 0;
    ead4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ead8:	f36f 0341 	bfc	r3, #1, #1
    eadc:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    eae0:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
    eae4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    eae8:	f014 fd20 	bl	2352c <__aeabi_ui2d>
    eaec:	a310      	add	r3, pc, #64	; (adr r3, eb30 <ccp_slave_timer_ev_cb+0x1b0>)
    eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
    eaf2:	f014 fd95 	bl	23620 <__aeabi_dmul>
    eaf6:	f015 f86b 	bl	23bd0 <__aeabi_d2uiz>
    eafa:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    eafe:	1a41      	subs	r1, r0, r1
    eb00:	f895 051b 	ldrb.w	r0, [r5, #1307]	; 0x51b
    eb04:	1a09      	subs	r1, r1, r0
    eb06:	4431      	add	r1, r6
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    eb08:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    eb0c:	4638      	mov	r0, r7
    eb0e:	f003 fee4 	bl	128da <dpl_cputime_timer_start>
    if (rc == 0) ccp->status.timer_restarted = 1;
    eb12:	2800      	cmp	r0, #0
    eb14:	d1a6      	bne.n	ea64 <ccp_slave_timer_ev_cb+0xe4>
    eb16:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    eb1a:	f043 0308 	orr.w	r3, r3, #8
    eb1e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    eb22:	e79f      	b.n	ea64 <ccp_slave_timer_ev_cb+0xe4>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    eb24:	2100      	movs	r1, #0
    eb26:	4638      	mov	r0, r7
    eb28:	f003 fef3 	bl	12912 <dpl_cputime_timer_relative>
    eb2c:	e7f1      	b.n	eb12 <ccp_slave_timer_ev_cb+0x192>
    eb2e:	bf00      	nop
    eb30:	90690691 	.word	0x90690691
    eb34:	3ff06906 	.word	0x3ff06906

0000eb38 <ccp_send>:
{
    eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb3c:	b083      	sub	sp, #12
    eb3e:	9101      	str	r1, [sp, #4]
    assert(ccp);
    eb40:	2800      	cmp	r0, #0
    eb42:	f000 80f2 	beq.w	ed2a <ccp_send+0x1f2>
    eb46:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    eb48:	6805      	ldr	r5, [r0, #0]
    CCP_STATS_INC(send);
    eb4a:	6a03      	ldr	r3, [r0, #32]
    eb4c:	3301      	adds	r3, #1
    eb4e:	6203      	str	r3, [r0, #32]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    eb50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    eb56:	4628      	mov	r0, r5
    eb58:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    eb5a:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    eb5e:	9300      	str	r3, [sp, #0]
    eb60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eb64:	4618      	mov	r0, r3
    eb66:	f7fb fac1 	bl	a0ec <os_sem_pend>
    assert(err == DPL_OK);
    eb6a:	2800      	cmp	r0, #0
    eb6c:	f040 80e3 	bne.w	ed36 <ccp_send+0x1fe>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    eb70:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    eb74:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    eb78:	fbb3 f2f1 	udiv	r2, r3, r1
    eb7c:	fb01 3212 	mls	r2, r1, r2, r3
    eb80:	b292      	uxth	r2, r2
    eb82:	32e0      	adds	r2, #224	; 0xe0
    eb84:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    eb88:	3301      	adds	r3, #1
    eb8a:	fb93 f2f1 	sdiv	r2, r3, r1
    eb8e:	fb01 3312 	mls	r3, r1, r2, r3
    eb92:	33e0      	adds	r3, #224	; 0xe0
    eb94:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_count = 0;
    eb98:	f04f 0900 	mov.w	r9, #0
    eb9c:	f886 901c 	strb.w	r9, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    eba0:	2304      	movs	r3, #4
    eba2:	7773      	strb	r3, [r6, #29]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    eba4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ebaa:	4628      	mov	r0, r5
    ebac:	4798      	blx	r3
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    ebae:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    ebb0:	f8da 8014 	ldr.w	r8, [sl, #20]
    ebb4:	f8da 7018 	ldr.w	r7, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    ebb8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    ebbc:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    ebbe:	eb18 0802 	adds.w	r8, r8, r2
    ebc2:	eb47 4713 	adc.w	r7, r7, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    ebc6:	f428 78ff 	bic.w	r8, r8, #510	; 0x1fe
    ebca:	f028 0801 	bic.w	r8, r8, #1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    ebce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ebd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    ebd2:	4642      	mov	r2, r8
    ebd4:	463b      	mov	r3, r7
    ebd6:	4628      	mov	r0, r5
    ebd8:	4788      	blx	r1
    timestamp += inst->tx_antenna_delay;
    ebda:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    ebde:	eb13 0808 	adds.w	r8, r3, r8
    ebe2:	f147 0700 	adc.w	r7, r7, #0
    frame->transmission_timestamp.timestamp = timestamp;
    ebe6:	f8c6 8014 	str.w	r8, [r6, #20]
    ebea:	61b7      	str	r7, [r6, #24]
    frame->seq_num = ++ccp->seq_num;
    ebec:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    ebf0:	3301      	adds	r3, #1
    ebf2:	b2db      	uxtb	r3, r3
    ebf4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ebf8:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    ebfa:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    ebfe:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    ec02:	f8c6 2002 	str.w	r2, [r6, #2]
    ec06:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    ec0a:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    ec0e:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    ec10:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    ec14:	041a      	lsls	r2, r3, #16
    ec16:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ec1a:	60f2      	str	r2, [r6, #12]
    ec1c:	7433      	strb	r3, [r6, #16]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    ec1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec20:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    ec24:	2320      	movs	r3, #32
    ec26:	464a      	mov	r2, r9
    ec28:	4631      	mov	r1, r6
    ec2a:	4628      	mov	r0, r5
    ec2c:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    ec2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec30:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    ec34:	464b      	mov	r3, r9
    ec36:	464a      	mov	r2, r9
    ec38:	2120      	movs	r1, #32
    ec3a:	4628      	mov	r0, r5
    ec3c:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    ec3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ec42:	4649      	mov	r1, r9
    ec44:	4628      	mov	r0, r5
    ec46:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    ec48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ec4c:	4628      	mov	r0, r5
    ec4e:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    ec50:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ec54:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    ec58:	f360 1386 	bfi	r3, r0, #6, #1
    ec5c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    ec60:	b2db      	uxtb	r3, r3
    ec62:	f013 0f40 	tst.w	r3, #64	; 0x40
    ec66:	d072      	beq.n	ed4e <ccp_send+0x216>
    return (dev->uw_funcs->uf_read_systime(dev));
    ec68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ec6c:	4628      	mov	r0, r5
    ec6e:	4798      	blx	r3
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    ec70:	ebb0 0808 	subs.w	r8, r0, r8
    ec74:	eb61 0107 	sbc.w	r1, r1, r7
    ec78:	ea4f 4818 	mov.w	r8, r8, lsr #16
    ec7c:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    ec80:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        CCP_STATS_INC(tx_start_error);
    ec84:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ec86:	3301      	adds	r3, #1
    ec88:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    ec8a:	6973      	ldr	r3, [r6, #20]
    ec8c:	69b2      	ldr	r2, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    ec8e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    ec92:	0408      	lsls	r0, r1, #16
    ec94:	181b      	adds	r3, r3, r0
    ec96:	eb42 4211 	adc.w	r2, r2, r1, lsr #16
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    ec9a:	f8ca 3014 	str.w	r3, [sl, #20]
    ec9e:	f8ca 2018 	str.w	r2, [sl, #24]
        ccp->idx++;
    eca2:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    eca6:	3301      	adds	r3, #1
    eca8:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    ecac:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
    ecb0:	ebb5 0008 	subs.w	r0, r5, r8
    ecb4:	eb61 0101 	sbc.w	r1, r1, r1
    ecb8:	f014 fc7c 	bl	235b4 <__aeabi_ul2d>
    ecbc:	a33c      	add	r3, pc, #240	; (adr r3, edb0 <ccp_send+0x278>)
    ecbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecc2:	f014 fcad 	bl	23620 <__aeabi_dmul>
    ecc6:	4606      	mov	r6, r0
    ecc8:	460f      	mov	r7, r1
    ecca:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    ecce:	f014 fc2d 	bl	2352c <__aeabi_ui2d>
    ecd2:	4632      	mov	r2, r6
    ecd4:	463b      	mov	r3, r7
    ecd6:	f014 faed 	bl	232b4 <__adddf3>
    ecda:	f014 ff79 	bl	23bd0 <__aeabi_d2uiz>
    ecde:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    ece2:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    ece6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    ecea:	0429      	lsls	r1, r5, #16
    ecec:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    ecf0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    ecf4:	1852      	adds	r2, r2, r1
    ecf6:	eb43 4315 	adc.w	r3, r3, r5, lsr #16
    ecfa:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    ecfe:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    ed02:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ed06:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    ed0a:	185b      	adds	r3, r3, r1
    ed0c:	eb42 4215 	adc.w	r2, r2, r5, lsr #16
    ed10:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    ed14:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    return (dpl_error_t)os_sem_release(&sem->sem);
    ed18:	9800      	ldr	r0, [sp, #0]
    ed1a:	f7fb f9b5 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    ed1e:	b980      	cbnz	r0, ed42 <ccp_send+0x20a>
}
    ed20:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ed24:	b003      	add	sp, #12
    ed26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(ccp);
    ed2a:	2300      	movs	r3, #0
    ed2c:	461a      	mov	r2, r3
    ed2e:	4619      	mov	r1, r3
    ed30:	4618      	mov	r0, r3
    ed32:	f7fa fa47 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    ed36:	2300      	movs	r3, #0
    ed38:	461a      	mov	r2, r3
    ed3a:	4619      	mov	r1, r3
    ed3c:	4618      	mov	r0, r3
    ed3e:	f7fa fa41 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    ed42:	464b      	mov	r3, r9
    ed44:	464a      	mov	r2, r9
    ed46:	4649      	mov	r1, r9
    ed48:	4648      	mov	r0, r9
    ed4a:	f7fa fa3b 	bl	91c4 <__assert_func>
    }else if(mode == UWB_BLOCKING){
    ed4e:	9b01      	ldr	r3, [sp, #4]
    ed50:	2b00      	cmp	r3, #0
    ed52:	d1e5      	bne.n	ed20 <ccp_send+0x1e8>
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    ed54:	6976      	ldr	r6, [r6, #20]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    ed56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ed58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ed5a:	4628      	mov	r0, r5
    ed5c:	4798      	blx	r3
    ed5e:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    ed60:	2300      	movs	r3, #0
    ed62:	65a3      	str	r3, [r4, #88]	; 0x58
    ed64:	0c00      	lsrs	r0, r0, #16
    ed66:	f014 fbe1 	bl	2352c <__aeabi_ui2d>
    ed6a:	a311      	add	r3, pc, #68	; (adr r3, edb0 <ccp_send+0x278>)
    ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed70:	f014 fc56 	bl	23620 <__aeabi_dmul>
    ed74:	2200      	movs	r2, #0
    ed76:	2300      	movs	r3, #0
    ed78:	f014 fa9c 	bl	232b4 <__adddf3>
    ed7c:	f014 ff28 	bl	23bd0 <__aeabi_d2uiz>
    ed80:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ed82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed86:	9800      	ldr	r0, [sp, #0]
    ed88:	f7fb f9b0 	bl	a0ec <os_sem_pend>
        assert(err == DPL_OK);
    ed8c:	b950      	cbnz	r0, eda4 <ccp_send+0x26c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    ed8e:	9800      	ldr	r0, [sp, #0]
    ed90:	f7fb f97a 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    ed94:	2800      	cmp	r0, #0
    ed96:	d0c3      	beq.n	ed20 <ccp_send+0x1e8>
    ed98:	2300      	movs	r3, #0
    ed9a:	461a      	mov	r2, r3
    ed9c:	4619      	mov	r1, r3
    ed9e:	4618      	mov	r0, r3
    eda0:	f7fa fa10 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    eda4:	2300      	movs	r3, #0
    eda6:	461a      	mov	r2, r3
    eda8:	4619      	mov	r1, r3
    edaa:	4618      	mov	r0, r3
    edac:	f7fa fa0a 	bl	91c4 <__assert_func>
    edb0:	90690691 	.word	0x90690691
    edb4:	3ff06906 	.word	0x3ff06906

0000edb8 <ccp_master_timer_ev_cb>:
{
    edb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ev != NULL);
    edba:	b138      	cbz	r0, edcc <ccp_master_timer_ev_cb+0x14>
    return ev->ev.ev_arg;
    edbc:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    edbe:	b15c      	cbz	r4, edd8 <ccp_master_timer_ev_cb+0x20>
    if (!ccp->status.enabled) {
    edc0:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    edc4:	f013 0f10 	tst.w	r3, #16
    edc8:	d10c      	bne.n	ede4 <ccp_master_timer_ev_cb+0x2c>
}
    edca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(ev != NULL);
    edcc:	2300      	movs	r3, #0
    edce:	461a      	mov	r2, r3
    edd0:	4619      	mov	r1, r3
    edd2:	4618      	mov	r0, r3
    edd4:	f7fa f9f6 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    edd8:	2300      	movs	r3, #0
    edda:	461a      	mov	r2, r3
    eddc:	4619      	mov	r1, r3
    edde:	4618      	mov	r0, r3
    ede0:	f7fa f9f0 	bl	91c4 <__assert_func>
    CCP_STATS_INC(master_cnt);
    ede4:	69a3      	ldr	r3, [r4, #24]
    ede6:	3301      	adds	r3, #1
    ede8:	61a3      	str	r3, [r4, #24]
    ccp->status.timer_restarted = 0;
    edea:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    edee:	f36f 03c3 	bfc	r3, #3, #1
    edf2:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    edf6:	2100      	movs	r1, #0
    edf8:	4620      	mov	r0, r4
    edfa:	f7ff fe9d 	bl	eb38 <ccp_send>
    edfe:	f010 0f40 	tst.w	r0, #64	; 0x40
    ee02:	d004      	beq.n	ee0e <ccp_master_timer_ev_cb+0x56>
        if (!ccp->status.enabled) {
    ee04:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ee08:	f013 0f10 	tst.w	r3, #16
    ee0c:	d0dd      	beq.n	edca <ccp_master_timer_ev_cb+0x12>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    ee0e:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ee12:	f003 0318 	and.w	r3, r3, #24
    ee16:	2b10      	cmp	r3, #16
    ee18:	d1d7      	bne.n	edca <ccp_master_timer_ev_cb+0x12>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    ee1a:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    ee1e:	f5a5 757a 	sub.w	r5, r5, #1000	; 0x3e8
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    ee22:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    ee26:	f014 fb81 	bl	2352c <__aeabi_ui2d>
    ee2a:	a30f      	add	r3, pc, #60	; (adr r3, ee68 <ccp_master_timer_ev_cb+0xb0>)
    ee2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee30:	f014 fbf6 	bl	23620 <__aeabi_dmul>
    ee34:	4606      	mov	r6, r0
    ee36:	460f      	mov	r7, r1
    ee38:	4628      	mov	r0, r5
    ee3a:	f014 fb77 	bl	2352c <__aeabi_ui2d>
    ee3e:	4632      	mov	r2, r6
    ee40:	463b      	mov	r3, r7
    ee42:	f014 fa37 	bl	232b4 <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    ee46:	f014 fec3 	bl	23bd0 <__aeabi_d2uiz>
    ee4a:	4601      	mov	r1, r0
    ee4c:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    ee50:	f003 fd43 	bl	128da <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    ee54:	2800      	cmp	r0, #0
    ee56:	d1b8      	bne.n	edca <ccp_master_timer_ev_cb+0x12>
    ee58:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ee5c:	f043 0308 	orr.w	r3, r3, #8
    ee60:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    ee64:	e7b1      	b.n	edca <ccp_master_timer_ev_cb+0x12>
    ee66:	bf00      	nop
    ee68:	90690691 	.word	0x90690691
    ee6c:	3ff06906 	.word	0x3ff06906

0000ee70 <uwb_ccp_set_tof_comp_cb>:
    inst->tof_comp_cb = tof_comp_cb;
    ee70:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
}
    ee74:	4770      	bx	lr
	...

0000ee78 <uwb_ccp_init>:
{
    ee78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee7c:	b08e      	sub	sp, #56	; 0x38
    assert(dev);
    ee7e:	2800      	cmp	r0, #0
    ee80:	d05c      	beq.n	ef3c <uwb_ccp_init+0xc4>
    ee82:	460d      	mov	r5, r1
    ee84:	4607      	mov	r7, r0
    assert(nframes > 1);
    ee86:	2901      	cmp	r1, #1
    ee88:	d95e      	bls.n	ef48 <uwb_ccp_init+0xd0>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    ee8a:	2101      	movs	r1, #1
    ee8c:	f7f9 ff77 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    ee90:	4604      	mov	r4, r0
    ee92:	2800      	cmp	r0, #0
    ee94:	d05e      	beq.n	ef54 <uwb_ccp_init+0xdc>
        assert(ccp->nframes == nframes);
    ee96:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    ee9a:	42ab      	cmp	r3, r5
    ee9c:	f040 80b7 	bne.w	f00e <uwb_ccp_init+0x196>
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    eea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    eea4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    eea8:	2300      	movs	r3, #0
    eeaa:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    eeae:	f44f 7360 	mov.w	r3, #896	; 0x380
    eeb2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    eeb6:	2101      	movs	r1, #1
    eeb8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    eebc:	f7fb f8dc 	bl	a078 <os_sem_init>
    assert(err == DPL_OK);
    eec0:	2800      	cmp	r0, #0
    eec2:	f040 80aa 	bne.w	f01a <uwb_ccp_init+0x1a2>
    ccp->cbs = (struct uwb_mac_interface){
    eec6:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    eeca:	223c      	movs	r2, #60	; 0x3c
    eecc:	2100      	movs	r1, #0
    eece:	4628      	mov	r0, r5
    eed0:	f001 fbe3 	bl	1069a <memset>
    eed4:	2301      	movs	r3, #1
    eed6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    eeda:	6724      	str	r4, [r4, #112]	; 0x70
    eedc:	4b58      	ldr	r3, [pc, #352]	; (f040 <uwb_ccp_init+0x1c8>)
    eede:	67a3      	str	r3, [r4, #120]	; 0x78
    eee0:	4b58      	ldr	r3, [pc, #352]	; (f044 <uwb_ccp_init+0x1cc>)
    eee2:	67e3      	str	r3, [r4, #124]	; 0x7c
    eee4:	4b58      	ldr	r3, [pc, #352]	; (f048 <uwb_ccp_init+0x1d0>)
    eee6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    eeea:	4b58      	ldr	r3, [pc, #352]	; (f04c <uwb_ccp_init+0x1d4>)
    eeec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    eef0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    eef4:	4b56      	ldr	r3, [pc, #344]	; (f050 <uwb_ccp_init+0x1d8>)
    eef6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    eefa:	4629      	mov	r1, r5
    eefc:	4638      	mov	r0, r7
    eefe:	f7f9 fee9 	bl	8cd4 <uwb_mac_append_interface>
    ccp_tasks_init(ccp);
    ef02:	4620      	mov	r0, r4
    ef04:	f7ff fc3a 	bl	e77c <ccp_tasks_init>
    ccp->status.initialized = 1;
    ef08:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    ef0c:	f043 0302 	orr.w	r3, r3, #2
    ef10:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    ef14:	1d25      	adds	r5, r4, #4
    ef16:	2214      	movs	r2, #20
    ef18:	9200      	str	r2, [sp, #0]
    ef1a:	4b4e      	ldr	r3, [pc, #312]	; (f054 <uwb_ccp_init+0x1dc>)
    ef1c:	2104      	movs	r1, #4
    ef1e:	4628      	mov	r0, r5
    ef20:	f007 f82c 	bl	15f7c <stats_init>
    assert(rc == 0);
    ef24:	2800      	cmp	r0, #0
    ef26:	d17e      	bne.n	f026 <uwb_ccp_init+0x1ae>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    ef28:	4629      	mov	r1, r5
    ef2a:	484b      	ldr	r0, [pc, #300]	; (f058 <uwb_ccp_init+0x1e0>)
    ef2c:	f007 f8aa 	bl	16084 <stats_register>
    assert(rc == 0);
    ef30:	2800      	cmp	r0, #0
    ef32:	d17e      	bne.n	f032 <uwb_ccp_init+0x1ba>
}
    ef34:	4620      	mov	r0, r4
    ef36:	b00e      	add	sp, #56	; 0x38
    ef38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(dev);
    ef3c:	2300      	movs	r3, #0
    ef3e:	461a      	mov	r2, r3
    ef40:	4619      	mov	r1, r3
    ef42:	4618      	mov	r0, r3
    ef44:	f7fa f93e 	bl	91c4 <__assert_func>
    assert(nframes > 1);
    ef48:	2300      	movs	r3, #0
    ef4a:	461a      	mov	r2, r3
    ef4c:	4619      	mov	r1, r3
    ef4e:	4618      	mov	r0, r3
    ef50:	f7fa f938 	bl	91c4 <__assert_func>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    ef54:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
    ef58:	0089      	lsls	r1, r1, #2
    ef5a:	2001      	movs	r0, #1
    ef5c:	f001 fa5b 	bl	10416 <calloc>
        assert(ccp);
    ef60:	4604      	mov	r4, r0
    ef62:	b1b8      	cbz	r0, ef94 <uwb_ccp_init+0x11c>
        ccp->status.selfmalloc = 1;
    ef64:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    ef68:	f043 0301 	orr.w	r3, r3, #1
    ef6c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    ef70:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
        uwb_ccp_frame_t ccp_default = {
    ef74:	2230      	movs	r2, #48	; 0x30
    ef76:	2100      	movs	r1, #0
    ef78:	a802      	add	r0, sp, #8
    ef7a:	f001 fb8e 	bl	1069a <memset>
    ef7e:	23c5      	movs	r3, #197	; 0xc5
    ef80:	f88d 3008 	strb.w	r3, [sp, #8]
    ef84:	23ff      	movs	r3, #255	; 0xff
    ef86:	f88d 3009 	strb.w	r3, [sp, #9]
    ef8a:	2304      	movs	r3, #4
    ef8c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        for (i = 0; i < ccp->nframes; i++){
    ef90:	2600      	movs	r6, #0
    ef92:	e022      	b.n	efda <uwb_ccp_init+0x162>
        assert(ccp);
    ef94:	2300      	movs	r3, #0
    ef96:	461a      	mov	r2, r3
    ef98:	4619      	mov	r1, r3
    ef9a:	4618      	mov	r0, r3
    ef9c:	f7fa f912 	bl	91c4 <__assert_func>
            assert(ccp->frames[i]);
    efa0:	2300      	movs	r3, #0
    efa2:	461a      	mov	r2, r3
    efa4:	4619      	mov	r1, r3
    efa6:	4618      	mov	r0, r3
    efa8:	f7fa f90c 	bl	91c4 <__assert_func>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    efac:	46ae      	mov	lr, r5
    efae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    efb2:	f8cc 0000 	str.w	r0, [ip]
    efb6:	f8cc 1004 	str.w	r1, [ip, #4]
    efba:	f8cc 2008 	str.w	r2, [ip, #8]
    efbe:	f8cc 300c 	str.w	r3, [ip, #12]
    efc2:	4675      	mov	r5, lr
    efc4:	f10c 0c10 	add.w	ip, ip, #16
    efc8:	45c6      	cmp	lr, r8
    efca:	d1ef      	bne.n	efac <uwb_ccp_init+0x134>
            ccp->frames[i]->seq_num = 0;
    efcc:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    efd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    efd4:	2200      	movs	r2, #0
    efd6:	705a      	strb	r2, [r3, #1]
        for (i = 0; i < ccp->nframes; i++){
    efd8:	3601      	adds	r6, #1
    efda:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    efde:	42b3      	cmp	r3, r6
    efe0:	dd0e      	ble.n	f000 <uwb_ccp_init+0x188>
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    efe2:	2130      	movs	r1, #48	; 0x30
    efe4:	2001      	movs	r0, #1
    efe6:	f001 fa16 	bl	10416 <calloc>
    efea:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    efee:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
            assert(ccp->frames[i]);
    eff2:	2800      	cmp	r0, #0
    eff4:	d0d4      	beq.n	efa0 <uwb_ccp_init+0x128>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    eff6:	ad02      	add	r5, sp, #8
    eff8:	4684      	mov	ip, r0
    effa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    effe:	e7d5      	b.n	efac <uwb_ccp_init+0x134>
        ccp->dev_inst = dev;
    f000:	6027      	str	r7, [r4, #0]
        ccp->task_prio = dev->task_prio - 0x4;
    f002:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    f006:	3b04      	subs	r3, #4
    f008:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    f00c:	e748      	b.n	eea0 <uwb_ccp_init+0x28>
        assert(ccp->nframes == nframes);
    f00e:	2300      	movs	r3, #0
    f010:	461a      	mov	r2, r3
    f012:	4619      	mov	r1, r3
    f014:	4618      	mov	r0, r3
    f016:	f7fa f8d5 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    f01a:	2300      	movs	r3, #0
    f01c:	461a      	mov	r2, r3
    f01e:	4619      	mov	r1, r3
    f020:	4618      	mov	r0, r3
    f022:	f7fa f8cf 	bl	91c4 <__assert_func>
    assert(rc == 0);
    f026:	2300      	movs	r3, #0
    f028:	461a      	mov	r2, r3
    f02a:	4619      	mov	r1, r3
    f02c:	4618      	mov	r0, r3
    f02e:	f7fa f8c9 	bl	91c4 <__assert_func>
    assert(rc == 0);
    f032:	2300      	movs	r3, #0
    f034:	461a      	mov	r2, r3
    f036:	4619      	mov	r1, r3
    f038:	4618      	mov	r0, r3
    f03a:	f7fa f8c3 	bl	91c4 <__assert_func>
    f03e:	bf00      	nop
    f040:	0000e5b9 	.word	0x0000e5b9
    f044:	0000f251 	.word	0x0000f251
    f048:	0000e54b 	.word	0x0000e54b
    f04c:	0000e4f7 	.word	0x0000e4f7
    f050:	0000e4c9 	.word	0x0000e4c9
    f054:	00025ba0 	.word	0x00025ba0
    f058:	00025aa8 	.word	0x00025aa8

0000f05c <uwb_ccp_free>:
{
    f05c:	b538      	push	{r3, r4, r5, lr}
    assert(inst);
    f05e:	b1f8      	cbz	r0, f0a0 <uwb_ccp_free+0x44>
    f060:	4605      	mov	r5, r0
    inst->status.enabled = 0;
    f062:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f066:	f36f 1304 	bfc	r3, #4, #1
    f06a:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    f06e:	30b0      	adds	r0, #176	; 0xb0
    f070:	f7fb f80a 	bl	a088 <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    f074:	462c      	mov	r4, r5
    f076:	f8b5 106e 	ldrh.w	r1, [r5, #110]	; 0x6e
    f07a:	f854 0bf4 	ldr.w	r0, [r4], #244
    f07e:	f7f9 fe4e 	bl	8d1e <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    f082:	4620      	mov	r0, r4
    f084:	f003 fc2d 	bl	128e2 <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    f088:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    f08c:	f013 0f01 	tst.w	r3, #1
    f090:	d11b      	bne.n	f0ca <uwb_ccp_free+0x6e>
        inst->status.initialized = 0;
    f092:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    f096:	f36f 0341 	bfc	r3, #1, #1
    f09a:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
}
    f09e:	e013      	b.n	f0c8 <uwb_ccp_free+0x6c>
    assert(inst);
    f0a0:	2300      	movs	r3, #0
    f0a2:	461a      	mov	r2, r3
    f0a4:	4619      	mov	r1, r3
    f0a6:	4618      	mov	r0, r3
    f0a8:	f7fa f88c 	bl	91c4 <__assert_func>
            free(inst->frames[i]);
    f0ac:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
    f0b0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    f0b4:	f001 faaa 	bl	1060c <free>
        for (i = 0; i < inst->nframes; i++) {
    f0b8:	3401      	adds	r4, #1
    f0ba:	f8b5 30ec 	ldrh.w	r3, [r5, #236]	; 0xec
    f0be:	42a3      	cmp	r3, r4
    f0c0:	dcf4      	bgt.n	f0ac <uwb_ccp_free+0x50>
        free(inst);
    f0c2:	4628      	mov	r0, r5
    f0c4:	f001 faa2 	bl	1060c <free>
}
    f0c8:	bd38      	pop	{r3, r4, r5, pc}
        for (i = 0; i < inst->nframes; i++) {
    f0ca:	2400      	movs	r4, #0
    f0cc:	e7f5      	b.n	f0ba <uwb_ccp_free+0x5e>

0000f0ce <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
    f0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0d2:	4604      	mov	r4, r0
    f0d4:	460e      	mov	r6, r1
    struct uwb_dev * inst = ccp->dev_inst;
    f0d6:	f8d0 8000 	ldr.w	r8, [r0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    f0da:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    f0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f0e2:	4640      	mov	r0, r8
    f0e4:	4798      	blx	r3
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
    f0e6:	2c00      	cmp	r4, #0
    f0e8:	d05e      	beq.n	f1a8 <uwb_ccp_start+0xda>
    f0ea:	4605      	mov	r5, r0
    ccp->idx = 0x0;
    f0ec:	2200      	movs	r2, #0
    f0ee:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
    ccp->status.valid = false;
    f0f2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f0f6:	f362 0382 	bfi	r3, r2, #2, #1
    f0fa:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_euid = 0x0;
    f0fe:	2200      	movs	r2, #0
    f100:	2300      	movs	r3, #0
    f102:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    f106:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->config.role = role;
    f10a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    f10e:	f366 0344 	bfi	r3, r6, #1, #4
    f112:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    ccp->status.enabled = 1;
    f116:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f11a:	f043 0310 	orr.w	r3, r3, #16
    f11e:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
    f122:	f003 fbe2 	bl	128ea <dpl_cputime_get32>
    f126:	1b40      	subs	r0, r0, r5
    f128:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dev->uw_funcs->uf_read_systime(dev));
    f12c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    f130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    f132:	4640      	mov	r0, r8
    f134:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    f136:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    f13a:	041a      	lsls	r2, r3, #16
    f13c:	1a80      	subs	r0, r0, r2
    f13e:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
    f142:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    f146:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f14a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    f14e:	040a      	lsls	r2, r1, #16
    f150:	1812      	adds	r2, r2, r0
    f152:	eb43 4311 	adc.w	r3, r3, r1, lsr #16

    if (ccp->config.role == CCP_ROLE_MASTER){
    f156:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    f15a:	f011 0f1e 	tst.w	r1, #30
    f15e:	d129      	bne.n	f1b4 <uwb_ccp_start+0xe6>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
    f160:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f164:	617a      	str	r2, [r7, #20]
    f166:	763b      	strb	r3, [r7, #24]
    f168:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f16c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->transmission_timestamp.hi = 0;
    f170:	2300      	movs	r3, #0
    f172:	767b      	strb	r3, [r7, #25]
    f174:	76bb      	strb	r3, [r7, #26]
    f176:	7efb      	ldrb	r3, [r7, #27]
    f178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    f17c:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
    f17e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    f182:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    f186:	1b40      	subs	r0, r0, r5
    f188:	f163 0300 	sbc.w	r3, r3, #0
    f18c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    f190:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->local_epoch &= UWB_DTU_40BMASK;
    f194:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f198:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

    ccp_timer_init(ccp, role);
    f19c:	4631      	mov	r1, r6
    f19e:	4620      	mov	r0, r4
    f1a0:	f7ff fb12 	bl	e7c8 <ccp_timer_init>
}
    f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ccp);
    f1a8:	2300      	movs	r3, #0
    f1aa:	461a      	mov	r2, r3
    f1ac:	4619      	mov	r1, r3
    f1ae:	4618      	mov	r0, r3
    f1b0:	f7fa f808 	bl	91c4 <__assert_func>
        ccp->local_epoch = frame->reception_timestamp = ts;
    f1b4:	623a      	str	r2, [r7, #32]
    f1b6:	627b      	str	r3, [r7, #36]	; 0x24
    f1b8:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f1bc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    f1c0:	e7dd      	b.n	f17e <uwb_ccp_start+0xb0>

0000f1c2 <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
    f1c2:	b510      	push	{r4, lr}
    assert(ccp);
    f1c4:	b1a8      	cbz	r0, f1f2 <uwb_ccp_stop+0x30>
    f1c6:	4604      	mov	r4, r0
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
    f1c8:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f1cc:	f36f 1304 	bfc	r3, #4, #1
    f1d0:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
    f1d4:	30f4      	adds	r0, #244	; 0xf4
    f1d6:	f003 fb84 	bl	128e2 <dpl_cputime_timer_stop>
    f1da:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    f1de:	b93b      	cbnz	r3, f1f0 <uwb_ccp_stop+0x2e>
        uwb_phy_forcetrxoff(ccp->dev_inst);
    f1e0:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    f1e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    f1e8:	4798      	blx	r3
    f1ea:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f1ee:	b133      	cbz	r3, f1fe <uwb_ccp_stop+0x3c>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
        }
    }
}
    f1f0:	bd10      	pop	{r4, pc}
    assert(ccp);
    f1f2:	2300      	movs	r3, #0
    f1f4:	461a      	mov	r2, r3
    f1f6:	4619      	mov	r1, r3
    f1f8:	4618      	mov	r0, r3
    f1fa:	f7f9 ffe3 	bl	91c4 <__assert_func>
    f1fe:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f202:	f7fa ff41 	bl	a088 <os_sem_release>
            assert(err == DPL_OK);
    f206:	2800      	cmp	r0, #0
    f208:	d0f2      	beq.n	f1f0 <uwb_ccp_stop+0x2e>
    f20a:	2300      	movs	r3, #0
    f20c:	461a      	mov	r2, r3
    f20e:	4619      	mov	r1, r3
    f210:	4618      	mov	r0, r3
    f212:	f7f9 ffd7 	bl	91c4 <__assert_func>
	...

0000f218 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
    f218:	b570      	push	{r4, r5, r6, lr}
    f21a:	4619      	mov	r1, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
    f21c:	6e86      	ldr	r6, [r0, #104]	; 0x68
    if (!wcs) return value;
    f21e:	b19e      	cbz	r6, f248 <uwb_ccp_skew_compensation_ui64+0x30>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
    f220:	4610      	mov	r0, r2
    f222:	f014 f9c7 	bl	235b4 <__aeabi_ul2d>
    f226:	4604      	mov	r4, r0
    f228:	460d      	mov	r5, r1
    f22a:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
    f22e:	2000      	movs	r0, #0
    f230:	4906      	ldr	r1, [pc, #24]	; (f24c <uwb_ccp_skew_compensation_ui64+0x34>)
    f232:	f014 f83d 	bl	232b0 <__aeabi_dsub>
    f236:	4602      	mov	r2, r0
    f238:	460b      	mov	r3, r1
    f23a:	4620      	mov	r0, r4
    f23c:	4629      	mov	r1, r5
    f23e:	f014 f9ef 	bl	23620 <__aeabi_dmul>
    f242:	f014 fee3 	bl	2400c <__aeabi_d2ulz>
#endif
    return value;
}
    f246:	bd70      	pop	{r4, r5, r6, pc}
    if (!wcs) return value;
    f248:	4610      	mov	r0, r2
    f24a:	e7fc      	b.n	f246 <uwb_ccp_skew_compensation_ui64+0x2e>
    f24c:	3ff00000 	.word	0x3ff00000

0000f250 <rx_complete_cb>:
{
    f250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f254:	b08f      	sub	sp, #60	; 0x3c
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f256:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
    f258:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    f25c:	f013 0f1e 	tst.w	r3, #30
    f260:	f000 8230 	beq.w	f6c4 <rx_complete_cb+0x474>
    f264:	4605      	mov	r5, r0
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
    f266:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    f26a:	2bc5      	cmp	r3, #197	; 0xc5
    f26c:	d00e      	beq.n	f28c <rx_complete_cb+0x3c>
    f26e:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f272:	2b00      	cmp	r3, #0
    f274:	f040 822a 	bne.w	f6cc <rx_complete_cb+0x47c>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
    f278:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f27c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f280:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
    f282:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f284:	3301      	adds	r3, #1
    f286:	63e3      	str	r3, [r4, #60]	; 0x3c
            return true;
    f288:	2001      	movs	r0, #1
    f28a:	e21c      	b.n	f6c6 <rx_complete_cb+0x476>
    f28c:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) != 0){
    f290:	b99b      	cbnz	r3, f2ba <rx_complete_cb+0x6a>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
    f292:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f296:	3301      	adds	r3, #1
    f298:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    f29c:	fb93 f1f2 	sdiv	r1, r3, r2
    f2a0:	fb02 3311 	mls	r3, r2, r1, r3
    f2a4:	33e0      	adds	r3, #224	; 0xe0
    f2a6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
    f2aa:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    f2ae:	3b20      	subs	r3, #32
    f2b0:	b29b      	uxth	r3, r3
    f2b2:	2b10      	cmp	r3, #16
    f2b4:	d906      	bls.n	f2c4 <rx_complete_cb+0x74>
        return true;
    f2b6:	2001      	movs	r0, #1
    f2b8:	e205      	b.n	f6c6 <rx_complete_cb+0x476>
        CCP_STATS_INC(rx_unsolicited);
    f2ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f2bc:	3301      	adds	r3, #1
    f2be:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
    f2c0:	2000      	movs	r0, #0
    f2c2:	e200      	b.n	f6c6 <rx_complete_cb+0x476>
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
    f2c4:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
    f2c8:	681f      	ldr	r7, [r3, #0]
    f2ca:	6858      	ldr	r0, [r3, #4]
    f2cc:	6899      	ldr	r1, [r3, #8]
    f2ce:	68da      	ldr	r2, [r3, #12]
    f2d0:	6037      	str	r7, [r6, #0]
    f2d2:	6070      	str	r0, [r6, #4]
    f2d4:	60b1      	str	r1, [r6, #8]
    f2d6:	60f2      	str	r2, [r6, #12]
    f2d8:	691f      	ldr	r7, [r3, #16]
    f2da:	6958      	ldr	r0, [r3, #20]
    f2dc:	6999      	ldr	r1, [r3, #24]
    f2de:	69da      	ldr	r2, [r3, #28]
    f2e0:	6137      	str	r7, [r6, #16]
    f2e2:	6170      	str	r0, [r6, #20]
    f2e4:	61b1      	str	r1, [r6, #24]
    f2e6:	61f2      	str	r2, [r6, #28]
    if (inst->status.lde_error)
    f2e8:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
    f2ec:	f013 0f04 	tst.w	r3, #4
    f2f0:	f040 81ee 	bne.w	f6d0 <rx_complete_cb+0x480>
    return (dev->uw_funcs->uf_stop_rx(dev));
    f2f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f2f8:	4628      	mov	r0, r5
    f2fa:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
    f2fc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f300:	3301      	adds	r3, #1
    f302:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
    f306:	7873      	ldrb	r3, [r6, #1]
    f308:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
    f30c:	2700      	movs	r7, #0
    f30e:	f884 70f1 	strb.w	r7, [r4, #241]	; 0xf1
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    f312:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f316:	4628      	mov	r0, r5
    f318:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f31a:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    f31e:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    f322:	f003 fae2 	bl	128ea <dpl_cputime_get32>
    f326:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    f32a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f32c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f32e:	4628      	mov	r0, r5
    f330:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f332:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    f336:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    f338:	0840      	lsrs	r0, r0, #1
    f33a:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    f33e:	0c00      	lsrs	r0, r0, #16
    f340:	f014 f8f4 	bl	2352c <__aeabi_ui2d>
    f344:	a3e6      	add	r3, pc, #920	; (adr r3, f6e0 <rx_complete_cb+0x490>)
    f346:	e9d3 2300 	ldrd	r2, r3, [r3]
    f34a:	f014 f969 	bl	23620 <__aeabi_dmul>
    f34e:	4680      	mov	r8, r0
    f350:	4689      	mov	r9, r1
    f352:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f356:	f014 f8e9 	bl	2352c <__aeabi_ui2d>
    f35a:	4642      	mov	r2, r8
    f35c:	464b      	mov	r3, r9
    f35e:	f013 ffa7 	bl	232b0 <__aeabi_dsub>
    f362:	f014 fc35 	bl	23bd0 <__aeabi_d2uiz>
    f366:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f36a:	6527      	str	r7, [r4, #80]	; 0x50
    f36c:	2200      	movs	r2, #0
    f36e:	2300      	movs	r3, #0
    f370:	4640      	mov	r0, r8
    f372:	4649      	mov	r1, r9
    f374:	f013 ff9e 	bl	232b4 <__adddf3>
    f378:	f014 fc2a 	bl	23bd0 <__aeabi_d2uiz>
    f37c:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
    f37e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f380:	3301      	adds	r3, #1
    f382:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
    f384:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f388:	f367 0341 	bfi	r3, r7, #1, #1
    f38c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    f390:	6970      	ldr	r0, [r6, #20]
    f392:	69b2      	ldr	r2, [r6, #24]
    f394:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    f398:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    f39c:	4288      	cmp	r0, r1
    f39e:	eb72 0303 	sbcs.w	r3, r2, r3
    f3a2:	d30c      	bcc.n	f3be <rx_complete_cb+0x16e>
        frame->euid != ccp->master_euid) {
    f3a4:	f8d6 0002 	ldr.w	r0, [r6, #2]
    f3a8:	f8d6 2006 	ldr.w	r2, [r6, #6]
    f3ac:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f3b0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    f3b4:	429a      	cmp	r2, r3
    f3b6:	bf08      	it	eq
    f3b8:	4288      	cmpeq	r0, r1
    f3ba:	f000 80ce 	beq.w	f55a <rx_complete_cb+0x30a>
        ccp->master_euid = frame->euid;
    f3be:	f8d6 2002 	ldr.w	r2, [r6, #2]
    f3c2:	f8d6 3006 	ldr.w	r3, [r6, #6]
    f3c6:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    f3ca:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
    f3ce:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f3d2:	f36f 0382 	bfc	r3, #2, #1
    f3d6:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid_count = 0;
    f3da:	b2db      	uxtb	r3, r3
    f3dc:	f36f 03c5 	bfc	r3, #3, #3
    f3e0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_epoch.timestamp = frame->transmission_timestamp.timestamp;
    f3e4:	6972      	ldr	r2, [r6, #20]
    f3e6:	69b3      	ldr	r3, [r6, #24]
    f3e8:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    f3ec:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    f3f0:	f8d5 24e8 	ldr.w	r2, [r5, #1256]	; 0x4e8
    f3f4:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
    f3f8:	6232      	str	r2, [r6, #32]
    f3fa:	6273      	str	r3, [r6, #36]	; 0x24
    f3fc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f400:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->period = (frame->transmission_interval >> 16);
    f404:	68f3      	ldr	r3, [r6, #12]
    f406:	7c32      	ldrb	r2, [r6, #16]
    f408:	0c1b      	lsrs	r3, r3, #16
    f40a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f40e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    f412:	8bf1      	ldrh	r1, [r6, #30]
    f414:	4620      	mov	r0, r4
    f416:	f7ff f823 	bl	e460 <adjust_for_epoch_to_rm>
    frame->carrier_integrator = inst->carrier_integrator;
    f41a:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
    f41e:	62b3      	str	r3, [r6, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
    f420:	f995 352c 	ldrsb.w	r3, [r5, #1324]	; 0x52c
    f424:	2b00      	cmp	r3, #0
    f426:	f2c0 80b3 	blt.w	f590 <rx_complete_cb+0x340>
        frame->rxttcko = 0;
    f42a:	2300      	movs	r3, #0
    f42c:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    f430:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f434:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    f438:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    if (ccp->tof_comp_cb) {
    f43c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    f440:	b19b      	cbz	r3, f46a <rx_complete_cb+0x21a>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    f442:	8970      	ldrh	r0, [r6, #10]
    f444:	4798      	blx	r3
    f446:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    f448:	2300      	movs	r3, #0
    f44a:	4620      	mov	r0, r4
    f44c:	f7ff fee4 	bl	f218 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
    f450:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    f454:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    f458:	1a1b      	subs	r3, r3, r0
    f45a:	f162 0200 	sbc.w	r2, r2, #0
    f45e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    f462:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    f466:	6233      	str	r3, [r6, #32]
    f468:	6272      	str	r2, [r6, #36]	; 0x24
    if (frame->rpt_count != 0) {
    f46a:	7f33      	ldrb	r3, [r6, #28]
    f46c:	2b00      	cmp	r3, #0
    f46e:	d05c      	beq.n	f52a <rx_complete_cb+0x2da>
        CCP_STATS_INC(rx_relayed);
    f470:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f472:	3301      	adds	r3, #1
    f474:	6323      	str	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    f476:	f896 c010 	ldrb.w	ip, [r6, #16]
    f47a:	f11c 0c01 	adds.w	ip, ip, #1
    f47e:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
    f480:	ea4f 430c 	mov.w	r3, ip, lsl #16
    f484:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
    f488:	68f1      	ldr	r1, [r6, #12]
    f48a:	f896 e010 	ldrb.w	lr, [r6, #16]
    f48e:	1a7a      	subs	r2, r7, r1
    f490:	eb6c 030e 	sbc.w	r3, ip, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    f494:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    f498:	9001      	str	r0, [sp, #4]
    f49a:	1bc9      	subs	r1, r1, r7
    f49c:	ebae 0c0c 	sub.w	ip, lr, ip
    f4a0:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    f4a4:	1809      	adds	r1, r1, r0
    f4a6:	9801      	ldr	r0, [sp, #4]
    f4a8:	eb40 000c 	adc.w	r0, r0, ip
    f4ac:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    f4b0:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    f4b4:	4620      	mov	r0, r4
    f4b6:	f7ff feaf 	bl	f218 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    f4ba:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    f4be:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    f4c2:	1a12      	subs	r2, r2, r0
    f4c4:	eb63 0301 	sbc.w	r3, r3, r1
    f4c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f4cc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f4d0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    f4d4:	6232      	str	r2, [r6, #32]
    f4d6:	6273      	str	r3, [r6, #36]	; 0x24
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    f4d8:	0c00      	lsrs	r0, r0, #16
    f4da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    f4de:	0c09      	lsrs	r1, r1, #16
    f4e0:	f014 f868 	bl	235b4 <__aeabi_ul2d>
    f4e4:	a37e      	add	r3, pc, #504	; (adr r3, f6e0 <rx_complete_cb+0x490>)
    f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4ea:	f014 f899 	bl	23620 <__aeabi_dmul>
    f4ee:	4680      	mov	r8, r0
    f4f0:	4689      	mov	r9, r1
    f4f2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f4f6:	f014 f819 	bl	2352c <__aeabi_ui2d>
    f4fa:	4642      	mov	r2, r8
    f4fc:	464b      	mov	r3, r9
    f4fe:	f013 fed7 	bl	232b0 <__aeabi_dsub>
    f502:	f014 fb65 	bl	23bd0 <__aeabi_d2uiz>
    f506:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
    f50a:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
    f50e:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    f512:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
    f516:	f886 702b 	strb.w	r7, [r6, #43]	; 0x2b
        frame->rxttcko = 0;
    f51a:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
    f51e:	f886 702d 	strb.w	r7, [r6, #45]	; 0x2d
    f522:	f886 702e 	strb.w	r7, [r6, #46]	; 0x2e
    f526:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    f52a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f52e:	4b6a      	ldr	r3, [pc, #424]	; (f6d8 <rx_complete_cb+0x488>)
    f530:	4013      	ands	r3, r2
    f532:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
    f536:	d02f      	beq.n	f598 <rx_complete_cb+0x348>
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    f538:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
    f53c:	2e00      	cmp	r6, #0
    f53e:	f040 80b0 	bne.w	f6a2 <rx_complete_cb+0x452>
    if (ccp->config.postprocess && ccp->status.valid) {
    f542:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f546:	4b65      	ldr	r3, [pc, #404]	; (f6dc <rx_complete_cb+0x48c>)
    f548:	4393      	bics	r3, r2
    f54a:	f000 80b4 	beq.w	f6b6 <rx_complete_cb+0x466>
    f54e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f552:	f7fa fd99 	bl	a088 <os_sem_release>
    return false;
    f556:	2000      	movs	r0, #0
    f558:	e0b5      	b.n	f6c6 <rx_complete_cb+0x476>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
    f55a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f55e:	f013 0f38 	tst.w	r3, #56	; 0x38
    f562:	d106      	bne.n	f572 <rx_complete_cb+0x322>
            ccp->status.valid_count++;
    f564:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    f568:	3201      	adds	r2, #1
    f56a:	f362 03c5 	bfi	r3, r2, #3, #3
    f56e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    f572:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f576:	f3c3 0280 	ubfx	r2, r3, #2, #1
    f57a:	f003 0138 	and.w	r1, r3, #56	; 0x38
    f57e:	2908      	cmp	r1, #8
    f580:	bf08      	it	eq
    f582:	f042 0201 	orreq.w	r2, r2, #1
    f586:	f362 0382 	bfi	r3, r2, #2, #1
    f58a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    f58e:	e729      	b.n	f3e4 <rx_complete_cb+0x194>
        frame->rxttcko = inst->rxttcko;
    f590:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
    f594:	62f3      	str	r3, [r6, #44]	; 0x2c
    f596:	e751      	b.n	f43c <rx_complete_cb+0x1ec>
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    f598:	f896 e01c 	ldrb.w	lr, [r6, #28]
    f59c:	7f73      	ldrb	r3, [r6, #29]
    f59e:	459e      	cmp	lr, r3
    f5a0:	d2ca      	bcs.n	f538 <rx_complete_cb+0x2e8>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
    f5a2:	4637      	mov	r7, r6
    f5a4:	f10d 0808 	add.w	r8, sp, #8
    f5a8:	f106 0930 	add.w	r9, r6, #48	; 0x30
    f5ac:	46c4      	mov	ip, r8
    f5ae:	6838      	ldr	r0, [r7, #0]
    f5b0:	6879      	ldr	r1, [r7, #4]
    f5b2:	68ba      	ldr	r2, [r7, #8]
    f5b4:	68fb      	ldr	r3, [r7, #12]
    f5b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f5ba:	3710      	adds	r7, #16
    f5bc:	46e0      	mov	r8, ip
    f5be:	454f      	cmp	r7, r9
    f5c0:	d1f4      	bne.n	f5ac <rx_complete_cb+0x35c>
        tx_frame.short_address = inst->my_short_address;
    f5c2:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    f5c6:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
    f5ca:	f10e 0301 	add.w	r3, lr, #1
    f5ce:	b2db      	uxtb	r3, r3
    f5d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        uint64_t tx_timestamp = frame->reception_timestamp;
    f5d4:	6a31      	ldr	r1, [r6, #32]
    f5d6:	6a70      	ldr	r0, [r6, #36]	; 0x24
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    f5d8:	f04f 0800 	mov.w	r8, #0
    f5dc:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    f5e0:	0412      	lsls	r2, r2, #16
    f5e2:	fba3 3202 	umull	r3, r2, r3, r2
    f5e6:	185b      	adds	r3, r3, r1
    f5e8:	eb42 0000 	adc.w	r0, r2, r0
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    f5ec:	f8b5 24c2 	ldrh.w	r2, [r5, #1218]	; 0x4c2
    f5f0:	f002 0203 	and.w	r2, r2, #3
    f5f4:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    f5f8:	0409      	lsls	r1, r1, #16
    f5fa:	fba2 2901 	umull	r2, r9, r2, r1
    f5fe:	18d3      	adds	r3, r2, r3
    f600:	eb49 0900 	adc.w	r9, r9, r0
        tx_timestamp &= 0x0FFFFFFFE00UL;
    f604:	f423 77ff 	bic.w	r7, r3, #510	; 0x1fe
    f608:	f027 0701 	bic.w	r7, r7, #1
    f60c:	f009 09ff 	and.w	r9, r9, #255	; 0xff
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    f610:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f612:	6b59      	ldr	r1, [r3, #52]	; 0x34
    f614:	463a      	mov	r2, r7
    f616:	464b      	mov	r3, r9
    f618:	4628      	mov	r0, r5
    f61a:	4788      	blx	r1
        tx_timestamp += inst->tx_antenna_delay;
    f61c:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    f620:	19df      	adds	r7, r3, r7
    f622:	f149 0900 	adc.w	r9, r9, #0
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    f626:	6a32      	ldr	r2, [r6, #32]
    f628:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f62a:	1aba      	subs	r2, r7, r2
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
    f62c:	eb69 0303 	sbc.w	r3, r9, r3
    f630:	4620      	mov	r0, r4
    f632:	f7ff fdf1 	bl	f218 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
    f636:	9b07      	ldr	r3, [sp, #28]
    f638:	181b      	adds	r3, r3, r0
    f63a:	9a08      	ldr	r2, [sp, #32]
    f63c:	eb41 0202 	adc.w	r2, r1, r2
    f640:	9307      	str	r3, [sp, #28]
    f642:	9208      	str	r2, [sp, #32]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
    f644:	68f3      	ldr	r3, [r6, #12]
    f646:	7c32      	ldrb	r2, [r6, #16]
    f648:	1a1b      	subs	r3, r3, r0
    f64a:	eb62 0101 	sbc.w	r1, r2, r1
    f64e:	9305      	str	r3, [sp, #20]
    f650:	f88d 1018 	strb.w	r1, [sp, #24]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f654:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f656:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    f658:	2320      	movs	r3, #32
    f65a:	4642      	mov	r2, r8
    f65c:	a902      	add	r1, sp, #8
    f65e:	4628      	mov	r0, r5
    f660:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f664:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    f666:	4643      	mov	r3, r8
    f668:	4642      	mov	r2, r8
    f66a:	2120      	movs	r1, #32
    f66c:	4628      	mov	r0, r5
    f66e:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
    f670:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f674:	4628      	mov	r0, r5
    f676:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    f678:	f3c0 0380 	ubfx	r3, r0, #2, #1
    f67c:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    f680:	f363 1286 	bfi	r2, r3, #6, #1
    f684:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
    f688:	b2d3      	uxtb	r3, r2
    f68a:	f013 0f40 	tst.w	r3, #64	; 0x40
    f68e:	d003      	beq.n	f698 <rx_complete_cb+0x448>
            CCP_STATS_INC(tx_relay_error);
    f690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f692:	3301      	adds	r3, #1
    f694:	64a3      	str	r3, [r4, #72]	; 0x48
    f696:	e74f      	b.n	f538 <rx_complete_cb+0x2e8>
            CCP_STATS_INC(tx_relay_ok);
    f698:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f69a:	3301      	adds	r3, #1
    f69c:	64e3      	str	r3, [r4, #76]	; 0x4c
    f69e:	e74b      	b.n	f538 <rx_complete_cb+0x2e8>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    f6a0:	6bb6      	ldr	r6, [r6, #56]	; 0x38
    f6a2:	2e00      	cmp	r6, #0
    f6a4:	f43f af4d 	beq.w	f542 <rx_complete_cb+0x2f2>
            if (lcbs != NULL && lcbs->superframe_cb) {
    f6a8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    f6aa:	2b00      	cmp	r3, #0
    f6ac:	d0f8      	beq.n	f6a0 <rx_complete_cb+0x450>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    f6ae:	4631      	mov	r1, r6
    f6b0:	4628      	mov	r0, r5
    f6b2:	4798      	blx	r3
    f6b4:	e7f4      	b.n	f6a0 <rx_complete_cb+0x450>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    f6b6:	f7fa f975 	bl	99a4 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f6ba:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f6be:	f7fa f8c3 	bl	9848 <os_eventq_put>
}
    f6c2:	e744      	b.n	f54e <rx_complete_cb+0x2fe>
        return true;
    f6c4:	2001      	movs	r0, #1
}
    f6c6:	b00f      	add	sp, #60	; 0x3c
    f6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
    f6cc:	2000      	movs	r0, #0
    f6ce:	e7fa      	b.n	f6c6 <rx_complete_cb+0x476>
        return true;
    f6d0:	2001      	movs	r0, #1
    f6d2:	e7f8      	b.n	f6c6 <rx_complete_cb+0x476>
    f6d4:	f3af 8000 	nop.w
    f6d8:	001e0004 	.word	0x001e0004
    f6dc:	00010004 	.word	0x00010004
    f6e0:	90690691 	.word	0x90690691
    f6e4:	3ff06906 	.word	0x3ff06906

0000f6e8 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
    f6e8:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
    f6ea:	f003 f8fe 	bl	128ea <dpl_cputime_get32>
    f6ee:	4601      	mov	r1, r0
    f6f0:	4808      	ldr	r0, [pc, #32]	; (f714 <uwb_ccp_pkg_init+0x2c>)
    f6f2:	f001 fbeb 	bl	10ecc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f6f6:	2400      	movs	r4, #0
    f6f8:	e000      	b.n	f6fc <uwb_ccp_pkg_init+0x14>
    f6fa:	3401      	adds	r4, #1
    f6fc:	2c02      	cmp	r4, #2
    f6fe:	dc08      	bgt.n	f712 <uwb_ccp_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    f700:	4620      	mov	r0, r4
    f702:	f7f9 fab7 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    f706:	2800      	cmp	r0, #0
    f708:	d0f7      	beq.n	f6fa <uwb_ccp_pkg_init+0x12>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
    f70a:	2102      	movs	r1, #2
    f70c:	f7ff fbb4 	bl	ee78 <uwb_ccp_init>
    f710:	e7f3      	b.n	f6fa <uwb_ccp_pkg_init+0x12>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
    f712:	bd10      	pop	{r4, pc}
    f714:	00025aac 	.word	0x00025aac

0000f718 <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
    f718:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f71a:	2400      	movs	r4, #0
    f71c:	e003      	b.n	f726 <uwb_ccp_pkg_down+0xe>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
    f71e:	4628      	mov	r0, r5
    f720:	f7ff fc9c 	bl	f05c <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f724:	3401      	adds	r4, #1
    f726:	2c02      	cmp	r4, #2
    f728:	dc12      	bgt.n	f750 <uwb_ccp_pkg_down+0x38>
        udev = uwb_dev_idx_lookup(i);
    f72a:	4620      	mov	r0, r4
    f72c:	f7f9 faa2 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    f730:	2800      	cmp	r0, #0
    f732:	d0f7      	beq.n	f724 <uwb_ccp_pkg_down+0xc>
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    f734:	2101      	movs	r1, #1
    f736:	f7f9 fb22 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    f73a:	4605      	mov	r5, r0
    f73c:	2800      	cmp	r0, #0
    f73e:	d0f1      	beq.n	f724 <uwb_ccp_pkg_down+0xc>
        if (ccp->status.enabled) {
    f740:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f744:	f013 0f10 	tst.w	r3, #16
    f748:	d0e9      	beq.n	f71e <uwb_ccp_pkg_down+0x6>
            uwb_ccp_stop(ccp);
    f74a:	f7ff fd3a 	bl	f1c2 <uwb_ccp_stop>
    f74e:	e7e6      	b.n	f71e <uwb_ccp_pkg_down+0x6>
    }

    return 0;
}
    f750:	2000      	movs	r0, #0
    f752:	bd38      	pop	{r3, r4, r5, pc}

0000f754 <handle_pan_request>:


static void
handle_pan_request(struct uwb_pan_instance * pan, union pan_frame_t * request)
{
    if (!pan->request_cb) {
    f754:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    f756:	2b00      	cmp	r3, #0
    f758:	d03c      	beq.n	f7d4 <handle_pan_request+0x80>
{
    f75a:	b570      	push	{r4, r5, r6, lr}
    f75c:	4604      	mov	r4, r0
        return;
    }

    union pan_frame_t * response = pan->frames[(pan->idx)%pan->nframes];
    f75e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
    f762:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
    f766:	fbb3 f0f2 	udiv	r0, r3, r2
    f76a:	fb02 3310 	mls	r3, r2, r0, r3
    f76e:	b29b      	uxth	r3, r3
    f770:	3322      	adds	r3, #34	; 0x22
    f772:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    response->code = DWT_PAN_RESP;
    f776:	2302      	movs	r3, #2
    f778:	72eb      	strb	r3, [r5, #11]
    f77a:	2300      	movs	r3, #0
    f77c:	732b      	strb	r3, [r5, #12]

    if (pan->request_cb(request->long_address, &request->req, &response->req)) {
    f77e:	f105 030d 	add.w	r3, r5, #13
    f782:	f101 020d 	add.w	r2, r1, #13
    f786:	f8d1 0002 	ldr.w	r0, [r1, #2]
    f78a:	f8d1 1006 	ldr.w	r1, [r1, #6]
    f78e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    f790:	47b0      	blx	r6
    f792:	b1f0      	cbz	r0, f7d2 <handle_pan_request+0x7e>
        uwb_set_wait4resp(pan->dev_inst, false);
    f794:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    f796:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f79a:	2100      	movs	r1, #0
    f79c:	4798      	blx	r3
        uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    f79e:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f7a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f7a2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    f7a4:	2300      	movs	r3, #0
    f7a6:	461a      	mov	r2, r3
    f7a8:	2119      	movs	r1, #25
    f7aa:	47b0      	blx	r6
        uwb_write_tx(pan->dev_inst, response->array, 0, sizeof(union pan_frame_t));
    f7ac:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f7ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f7b0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    f7b2:	2319      	movs	r3, #25
    f7b4:	2200      	movs	r2, #0
    f7b6:	4629      	mov	r1, r5
    f7b8:	47b0      	blx	r6
        pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    f7ba:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_tx(dev));
    f7bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f7c0:	4798      	blx	r3
    f7c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f7c6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    f7ca:	f360 03c3 	bfi	r3, r0, #3, #1
    f7ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
}
    f7d2:	bd70      	pop	{r4, r5, r6, pc}
    f7d4:	4770      	bx	lr
	...

0000f7d8 <tx_complete_cb>:
 * @return bool
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f7d8:	684b      	ldr	r3, [r1, #4]
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64){
    f7da:	f890 24e0 	ldrb.w	r2, [r0, #1248]	; 0x4e0
    f7de:	2a56      	cmp	r2, #86	; 0x56
    f7e0:	d10a      	bne.n	f7f8 <tx_complete_cb+0x20>
        return false;
    }
    pan->idx++;
    f7e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
    f7e6:	3201      	adds	r2, #1
    f7e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    STATS_INC(g_stat, tx_complete);
    f7ec:	4a03      	ldr	r2, [pc, #12]	; (f7fc <tx_complete_cb+0x24>)
    f7ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f7f0:	3301      	adds	r3, #1
    f7f2:	6293      	str	r3, [r2, #40]	; 0x28
    return true;
    f7f4:	2001      	movs	r0, #1
    f7f6:	4770      	bx	lr
        return false;
    f7f8:	2000      	movs	r0, #0
}
    f7fa:	4770      	bx	lr
    f7fc:	20003c68 	.word	0x20003c68

0000f800 <pan_postprocess>:
pan_postprocess(struct dpl_event * ev){
    f800:	b508      	push	{r3, lr}
    assert(ev != NULL);
    f802:	b110      	cbz	r0, f80a <pan_postprocess+0xa>
    return ev->ev.ev_arg;
    f804:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev));
    f806:	b133      	cbz	r3, f816 <pan_postprocess+0x16>
}
    f808:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    f80a:	2300      	movs	r3, #0
    f80c:	461a      	mov	r2, r3
    f80e:	4619      	mov	r1, r3
    f810:	4618      	mov	r0, r3
    f812:	f7f9 fcd7 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    f816:	461a      	mov	r2, r3
    f818:	4619      	mov	r1, r3
    f81a:	4618      	mov	r0, r3
    f81c:	f7f9 fcd2 	bl	91c4 <__assert_func>

0000f820 <lease_expiry_cb>:
{
    f820:	b508      	push	{r3, lr}
    assert(ev != NULL);
    f822:	b1d8      	cbz	r0, f85c <lease_expiry_cb+0x3c>
    f824:	6881      	ldr	r1, [r0, #8]
    assert(dpl_event_get_arg(ev));
    f826:	b1f9      	cbz	r1, f868 <lease_expiry_cb+0x48>
    STATS_INC(g_stat, lease_expiry);
    f828:	4a15      	ldr	r2, [pc, #84]	; (f880 <lease_expiry_cb+0x60>)
    f82a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    f82c:	3301      	adds	r3, #1
    f82e:	6253      	str	r3, [r2, #36]	; 0x24
    pan->status.valid = false;
    f830:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    f834:	f36f 0382 	bfc	r3, #2, #1
    f838:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->status.lease_expired = true;
    f83c:	b2db      	uxtb	r3, r3
    f83e:	f043 0310 	orr.w	r3, r3, #16
    f842:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->dev_inst->slot_id = 0xffff;
    f846:	680b      	ldr	r3, [r1, #0]
    f848:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f84c:	f8a3 24c2 	strh.w	r2, [r3, #1218]	; 0x4c2
    if (pan->control.postprocess) {
    f850:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
    f854:	f013 0f01 	tst.w	r3, #1
    f858:	d10c      	bne.n	f874 <lease_expiry_cb+0x54>
}
    f85a:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    f85c:	2300      	movs	r3, #0
    f85e:	461a      	mov	r2, r3
    f860:	4619      	mov	r1, r3
    f862:	4618      	mov	r0, r3
    f864:	f7f9 fcae 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    f868:	2300      	movs	r3, #0
    f86a:	461a      	mov	r2, r3
    f86c:	4619      	mov	r1, r3
    f86e:	4618      	mov	r0, r3
    f870:	f7f9 fca8 	bl	91c4 <__assert_func>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    f874:	f851 0b50 	ldr.w	r0, [r1], #80
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f878:	303c      	adds	r0, #60	; 0x3c
    f87a:	f7f9 ffe5 	bl	9848 <os_eventq_put>
}
    f87e:	e7ec      	b.n	f85a <lease_expiry_cb+0x3a>
    f880:	20003c68 	.word	0x20003c68

0000f884 <reset_cb>:
 *
 * @return bool
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    f884:	b508      	push	{r3, lr}
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f886:	6848      	ldr	r0, [r1, #4]
    f888:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 0){
    f88c:	b10b      	cbz	r3, f892 <reset_cb+0xe>
        STATS_INC(g_stat, reset);
        dpl_error_t err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
        return true;
    }
    return false;
    f88e:	2000      	movs	r0, #0
}
    f890:	bd08      	pop	{r3, pc}
        STATS_INC(g_stat, reset);
    f892:	4a08      	ldr	r2, [pc, #32]	; (f8b4 <reset_cb+0x30>)
    f894:	6c53      	ldr	r3, [r2, #68]	; 0x44
    f896:	3301      	adds	r3, #1
    f898:	6453      	str	r3, [r2, #68]	; 0x44
    return (dpl_error_t)os_sem_release(&sem->sem);
    f89a:	3040      	adds	r0, #64	; 0x40
    f89c:	f7fa fbf4 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    f8a0:	b908      	cbnz	r0, f8a6 <reset_cb+0x22>
        return true;
    f8a2:	2001      	movs	r0, #1
    f8a4:	e7f4      	b.n	f890 <reset_cb+0xc>
        assert(err == DPL_OK);
    f8a6:	2300      	movs	r3, #0
    f8a8:	461a      	mov	r2, r3
    f8aa:	4619      	mov	r1, r3
    f8ac:	4618      	mov	r0, r3
    f8ae:	f7f9 fc89 	bl	91c4 <__assert_func>
    f8b2:	bf00      	nop
    f8b4:	20003c68 	.word	0x20003c68

0000f8b8 <rx_timeout_cb>:
 *
 * @return bool
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    f8b8:	b508      	push	{r3, lr}
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f8ba:	6848      	ldr	r0, [r1, #4]
    f8bc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 0){
    f8c0:	b10b      	cbz	r3, f8c6 <rx_timeout_cb+0xe>
        STATS_INC(g_stat, rx_timeout);
        dpl_error_t err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
        return true;
    }
    return false;
    f8c2:	2000      	movs	r0, #0
}
    f8c4:	bd08      	pop	{r3, pc}
        STATS_INC(g_stat, rx_timeout);
    f8c6:	4a08      	ldr	r2, [pc, #32]	; (f8e8 <rx_timeout_cb+0x30>)
    f8c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f8ca:	3301      	adds	r3, #1
    f8cc:	6413      	str	r3, [r2, #64]	; 0x40
    f8ce:	3040      	adds	r0, #64	; 0x40
    f8d0:	f7fa fbda 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    f8d4:	b908      	cbnz	r0, f8da <rx_timeout_cb+0x22>
        return true;
    f8d6:	2001      	movs	r0, #1
    f8d8:	e7f4      	b.n	f8c4 <rx_timeout_cb+0xc>
        assert(err == DPL_OK);
    f8da:	2300      	movs	r3, #0
    f8dc:	461a      	mov	r2, r3
    f8de:	4619      	mov	r1, r3
    f8e0:	4618      	mov	r0, r3
    f8e2:	f7f9 fc6f 	bl	91c4 <__assert_func>
    f8e6:	bf00      	nop
    f8e8:	20003c68 	.word	0x20003c68

0000f8ec <rx_complete_cb>:
{
    f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ee:	b083      	sub	sp, #12
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f8f0:	684d      	ldr	r5, [r1, #4]
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64) {
    f8f2:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    f8f6:	2b56      	cmp	r3, #86	; 0x56
    f8f8:	d00f      	beq.n	f91a <rx_complete_cb+0x2e>
    f8fa:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
        if (dpl_sem_get_count(&pan->sem) == 0) {
    f8fe:	b113      	cbz	r3, f906 <rx_complete_cb+0x1a>
        return false;
    f900:	2000      	movs	r0, #0
}
    f902:	b003      	add	sp, #12
    f904:	bdf0      	pop	{r4, r5, r6, r7, pc}
            STATS_INC(g_stat, rx_other_frame);
    f906:	4a92      	ldr	r2, [pc, #584]	; (fb50 <rx_complete_cb+0x264>)
    f908:	6b53      	ldr	r3, [r2, #52]	; 0x34
    f90a:	3301      	adds	r3, #1
    f90c:	6353      	str	r3, [r2, #52]	; 0x34
    f90e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    f912:	f7fa fbb9 	bl	a088 <os_sem_release>
            return false;
    f916:	2000      	movs	r0, #0
    f918:	e7f3      	b.n	f902 <rx_complete_cb+0x16>
    f91a:	4604      	mov	r4, r0
    f91c:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 1){
    f920:	2b01      	cmp	r3, #1
    f922:	d015      	beq.n	f950 <rx_complete_cb+0x64>
    STATS_INC(g_stat, rx_complete);
    f924:	4a8a      	ldr	r2, [pc, #552]	; (fb50 <rx_complete_cb+0x264>)
    f926:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    f928:	3301      	adds	r3, #1
    f92a:	62d3      	str	r3, [r2, #44]	; 0x2c
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    f92c:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    f930:	f8b5 2084 	ldrh.w	r2, [r5, #132]	; 0x84
    f934:	fbb3 f1f2 	udiv	r1, r3, r2
    f938:	fb02 3311 	mls	r3, r2, r1, r3
    f93c:	b29b      	uxth	r3, r3
    f93e:	3322      	adds	r3, #34	; 0x22
    f940:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    if (inst->frame_len > sizeof(union pan_frame_t)) {
    f944:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
    f948:	2a19      	cmp	r2, #25
    f94a:	d907      	bls.n	f95c <rx_complete_cb+0x70>
        return false;
    f94c:	2000      	movs	r0, #0
    f94e:	e7d8      	b.n	f902 <rx_complete_cb+0x16>
        STATS_INC(g_stat, rx_unsolicited);
    f950:	4a7f      	ldr	r2, [pc, #508]	; (fb50 <rx_complete_cb+0x264>)
    f952:	6b13      	ldr	r3, [r2, #48]	; 0x30
    f954:	3301      	adds	r3, #1
    f956:	6313      	str	r3, [r2, #48]	; 0x30
        return false;
    f958:	2000      	movs	r0, #0
    f95a:	e7d2      	b.n	f902 <rx_complete_cb+0x16>
    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    f95c:	f8d0 14fc 	ldr.w	r1, [r0, #1276]	; 0x4fc
    f960:	4630      	mov	r0, r6
    f962:	f000 fe8d 	bl	10680 <memcpy>
    if (pan->config->role == UWB_PAN_ROLE_RELAY &&
    f966:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    f96a:	7adb      	ldrb	r3, [r3, #11]
    f96c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    f970:	2b30      	cmp	r3, #48	; 0x30
    f972:	d00a      	beq.n	f98a <rx_complete_cb+0x9e>
    switch(frame->code) {
    f974:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    f978:	2b02      	cmp	r3, #2
    f97a:	d062      	beq.n	fa42 <rx_complete_cb+0x156>
    f97c:	2b03      	cmp	r3, #3
    f97e:	f000 80af 	beq.w	fae0 <rx_complete_cb+0x1f4>
    f982:	2b01      	cmp	r3, #1
    f984:	d03e      	beq.n	fa04 <rx_complete_cb+0x118>
    f986:	2000      	movs	r0, #0
    f988:	e7bb      	b.n	f902 <rx_complete_cb+0x16>
        frame->rpt_count < frame->rpt_max &&
    f98a:	7ab3      	ldrb	r3, [r6, #10]
    f98c:	f003 020f 	and.w	r2, r3, #15
    if (pan->config->role == UWB_PAN_ROLE_RELAY &&
    f990:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
    f994:	d2ee      	bcs.n	f974 <rx_complete_cb+0x88>
        frame->long_address != inst->my_long_address) {
    f996:	f8d6 c002 	ldr.w	ip, [r6, #2]
    f99a:	f8d6 1006 	ldr.w	r1, [r6, #6]
    f99e:	f8d4 04b8 	ldr.w	r0, [r4, #1208]	; 0x4b8
    f9a2:	f8d4 34bc 	ldr.w	r3, [r4, #1212]	; 0x4bc
        frame->rpt_count < frame->rpt_max &&
    f9a6:	4299      	cmp	r1, r3
    f9a8:	bf08      	it	eq
    f9aa:	4584      	cmpeq	ip, r0
    f9ac:	d0e2      	beq.n	f974 <rx_complete_cb+0x88>
        frame->rpt_count++;
    f9ae:	3201      	adds	r2, #1
    f9b0:	7ab3      	ldrb	r3, [r6, #10]
    f9b2:	f362 0303 	bfi	r3, r2, #0, #4
    f9b6:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    f9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f9bc:	2101      	movs	r1, #1
    f9be:	4620      	mov	r0, r4
    f9c0:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9c4:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    f9c6:	2300      	movs	r3, #0
    f9c8:	461a      	mov	r2, r3
    f9ca:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    f9ce:	4620      	mov	r0, r4
    f9d0:	47b8      	blx	r7
    return (dev->uw_funcs->uf_start_tx(dev));
    f9d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f9d6:	4620      	mov	r0, r4
    f9d8:	4798      	blx	r3
        pan->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    f9da:	f3c0 0380 	ubfx	r3, r0, #2, #1
    f9de:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
    f9e2:	f363 02c3 	bfi	r2, r3, #3, #1
    f9e6:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9ec:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    f9ee:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    f9f2:	2200      	movs	r2, #0
    f9f4:	4631      	mov	r1, r6
    f9f6:	4620      	mov	r0, r4
    f9f8:	47b8      	blx	r7
        STATS_INC(g_stat, relay_tx);
    f9fa:	4a55      	ldr	r2, [pc, #340]	; (fb50 <rx_complete_cb+0x264>)
    f9fc:	6a13      	ldr	r3, [r2, #32]
    f9fe:	3301      	adds	r3, #1
    fa00:	6213      	str	r3, [r2, #32]
    fa02:	e7b7      	b.n	f974 <rx_complete_cb+0x88>
        STATS_INC(g_stat, pan_request);
    fa04:	4a52      	ldr	r2, [pc, #328]	; (fb50 <rx_complete_cb+0x264>)
    fa06:	6953      	ldr	r3, [r2, #20]
    fa08:	3301      	adds	r3, #1
    fa0a:	6153      	str	r3, [r2, #20]
        if (pan->config->role == UWB_PAN_ROLE_MASTER) {
    fa0c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    fa10:	7adb      	ldrb	r3, [r3, #11]
    fa12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    fa16:	2b10      	cmp	r3, #16
    fa18:	f040 8096 	bne.w	fb48 <rx_complete_cb+0x25c>
    return (dev->uw_funcs->uf_stop_rx(dev));
    fa1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fa20:	4620      	mov	r0, r4
    fa22:	4798      	blx	r3
            handle_pan_request(pan, frame);
    fa24:	4631      	mov	r1, r6
    fa26:	4628      	mov	r0, r5
    fa28:	f7ff fe94 	bl	f754 <handle_pan_request>
    if (pan->control.postprocess) {
    fa2c:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
    fa30:	f013 0f01 	tst.w	r3, #1
    fa34:	d174      	bne.n	fb20 <rx_complete_cb+0x234>
    fa36:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 0) {
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	d077      	beq.n	fb2e <rx_complete_cb+0x242>
    return true;
    fa3e:	2001      	movs	r0, #1
    fa40:	e75f      	b.n	f902 <rx_complete_cb+0x16>
        if(frame->long_address == inst->my_long_address){
    fa42:	f8d6 0002 	ldr.w	r0, [r6, #2]
    fa46:	f8d6 2006 	ldr.w	r2, [r6, #6]
    fa4a:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    fa4e:	f8d4 34bc 	ldr.w	r3, [r4, #1212]	; 0x4bc
    fa52:	429a      	cmp	r2, r3
    fa54:	bf08      	it	eq
    fa56:	4288      	cmpeq	r0, r1
    fa58:	d001      	beq.n	fa5e <rx_complete_cb+0x172>
            return true;
    fa5a:	2001      	movs	r0, #1
    fa5c:	e751      	b.n	f902 <rx_complete_cb+0x16>
            inst->uid = frame->req.short_address;
    fa5e:	f8b6 3013 	ldrh.w	r3, [r6, #19]
    fa62:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
            inst->pan_id = frame->req.pan_id;
    fa66:	f8b6 3011 	ldrh.w	r3, [r6, #17]
    fa6a:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
            inst->slot_id = frame->req.slot_id;
    fa6e:	f8b6 3015 	ldrh.w	r3, [r6, #21]
    fa72:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
            pan->status.valid = true;
    fa76:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    fa7a:	f043 0304 	orr.w	r3, r3, #4
    fa7e:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            pan->status.lease_expired = false;
    fa82:	b2db      	uxtb	r3, r3
    fa84:	f36f 1304 	bfc	r3, #4, #1
    fa88:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
    os_callout_stop(&co->co);
    fa8c:	f105 0760 	add.w	r7, r5, #96	; 0x60
    fa90:	4638      	mov	r0, r7
    fa92:	f7f9 fd33 	bl	94fc <os_callout_stop>
            if (frame->req.lease_time > 0) {
    fa96:	f8b6 600f 	ldrh.w	r6, [r6, #15]
    fa9a:	2e00      	cmp	r6, #0
    fa9c:	d0c6      	beq.n	fa2c <rx_complete_cb+0x140>
                lease_us = (uint32_t)(frame->req.lease_time)*1000000;
    fa9e:	482d      	ldr	r0, [pc, #180]	; (fb54 <rx_complete_cb+0x268>)
    faa0:	fb00 f606 	mul.w	r6, r0, r6
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    faa4:	2101      	movs	r1, #1
    faa6:	4620      	mov	r0, r4
    faa8:	f7f9 f969 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
                lease_us -= (inst->rxtimestamp>>16) - (ccp->local_epoch>>16);
    faac:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
    fab0:	f8b0 30da 	ldrh.w	r3, [r0, #218]	; 0xda
    fab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    fab8:	f8d4 14ec 	ldr.w	r1, [r4, #1260]	; 0x4ec
    fabc:	f8b4 04ea 	ldrh.w	r0, [r4, #1258]	; 0x4ea
    fac0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    fac4:	1a18      	subs	r0, r3, r0
    fac6:	4430      	add	r0, r6
                dpl_time_ms_to_ticks(lease_us/1000, &exp_tics);
    fac8:	4b23      	ldr	r3, [pc, #140]	; (fb58 <rx_complete_cb+0x26c>)
    faca:	fba3 3000 	umull	r3, r0, r3, r0
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    face:	a901      	add	r1, sp, #4
    fad0:	0980      	lsrs	r0, r0, #6
    fad2:	f7fa fdb4 	bl	a63e <os_time_ms_to_ticks>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    fad6:	9901      	ldr	r1, [sp, #4]
    fad8:	4638      	mov	r0, r7
    fada:	f7f9 fd2d 	bl	9538 <os_callout_reset>
    fade:	e7a5      	b.n	fa2c <rx_complete_cb+0x140>
        STATS_INC(g_stat, pan_reset);
    fae0:	4a1b      	ldr	r2, [pc, #108]	; (fb50 <rx_complete_cb+0x264>)
    fae2:	69d3      	ldr	r3, [r2, #28]
    fae4:	3301      	adds	r3, #1
    fae6:	61d3      	str	r3, [r2, #28]
        if (pan->config->role != UWB_PAN_ROLE_MASTER) {
    fae8:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    faec:	7adb      	ldrb	r3, [r3, #11]
    faee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    faf2:	2b10      	cmp	r3, #16
    faf4:	d02a      	beq.n	fb4c <rx_complete_cb+0x260>
            pan->status.valid = false;
    faf6:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    fafa:	f36f 0382 	bfc	r3, #2, #1
    fafe:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            pan->status.lease_expired = true;
    fb02:	b2db      	uxtb	r3, r3
    fb04:	f043 0310 	orr.w	r3, r3, #16
    fb08:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            inst->slot_id = 0xffff;
    fb0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fb10:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
    os_callout_stop(&co->co);
    fb14:	f105 0060 	add.w	r0, r5, #96	; 0x60
    fb18:	f7f9 fcf0 	bl	94fc <os_callout_stop>
        return false;
    fb1c:	2000      	movs	r0, #0
}
    fb1e:	e6f0      	b.n	f902 <rx_complete_cb+0x16>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    fb20:	f105 0150 	add.w	r1, r5, #80	; 0x50
    fb24:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    fb28:	f7f9 fe8e 	bl	9848 <os_eventq_put>
}
    fb2c:	e783      	b.n	fa36 <rx_complete_cb+0x14a>
    return (dpl_error_t)os_sem_release(&sem->sem);
    fb2e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    fb32:	f7fa faa9 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    fb36:	b908      	cbnz	r0, fb3c <rx_complete_cb+0x250>
    return true;
    fb38:	2001      	movs	r0, #1
    fb3a:	e6e2      	b.n	f902 <rx_complete_cb+0x16>
        assert(err == DPL_OK);
    fb3c:	2300      	movs	r3, #0
    fb3e:	461a      	mov	r2, r3
    fb40:	4619      	mov	r1, r3
    fb42:	4618      	mov	r0, r3
    fb44:	f7f9 fb3e 	bl	91c4 <__assert_func>
            return true;
    fb48:	2001      	movs	r0, #1
    fb4a:	e6da      	b.n	f902 <rx_complete_cb+0x16>
            return false;
    fb4c:	2000      	movs	r0, #0
    fb4e:	e6d8      	b.n	f902 <rx_complete_cb+0x16>
    fb50:	20003c68 	.word	0x20003c68
    fb54:	000f4240 	.word	0x000f4240
    fb58:	10624dd3 	.word	0x10624dd3

0000fb5c <uwb_pan_init>:
{
    fb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(inst);
    fb5e:	b330      	cbz	r0, fbae <uwb_pan_init+0x52>
    fb60:	460f      	mov	r7, r1
    fb62:	4616      	mov	r6, r2
    fb64:	4605      	mov	r5, r0
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_PAN);
    fb66:	2111      	movs	r1, #17
    fb68:	f7f9 f909 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (pan == NULL ) {
    fb6c:	4604      	mov	r4, r0
    fb6e:	b320      	cbz	r0, fbba <uwb_pan_init+0x5e>
    pan->dev_inst = inst;
    fb70:	6025      	str	r5, [r4, #0]
    pan->config = config;
    fb72:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    pan->control = (struct uwb_pan_control_t){0};
    fb76:	2300      	movs	r3, #0
    fb78:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    fb7c:	2101      	movs	r1, #1
    fb7e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fb82:	f7fa fa79 	bl	a078 <os_sem_init>
    assert(err == DPL_OK);
    fb86:	bb90      	cbnz	r0, fbee <uwb_pan_init+0x92>
    uwb_pan_set_postprocess(pan, pan_postprocess);
    fb88:	491c      	ldr	r1, [pc, #112]	; (fbfc <uwb_pan_init+0xa0>)
    fb8a:	4620      	mov	r0, r4
    fb8c:	f7fc fa22 	bl	bfd4 <uwb_pan_set_postprocess>
    pan->request_cb = 0;
    fb90:	2300      	movs	r3, #0
    fb92:	64e3      	str	r3, [r4, #76]	; 0x4c
    pan->status.valid = true;
    fb94:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    fb98:	f043 0304 	orr.w	r3, r3, #4
    fb9c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    pan->status.initialized = 1;
    fba0:	b2db      	uxtb	r3, r3
    fba2:	f043 0302 	orr.w	r3, r3, #2
    fba6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    fbaa:	4620      	mov	r0, r4
    fbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(inst);
    fbae:	2300      	movs	r3, #0
    fbb0:	461a      	mov	r2, r3
    fbb2:	4619      	mov	r1, r3
    fbb4:	4618      	mov	r0, r3
    fbb6:	f7f9 fb05 	bl	91c4 <__assert_func>
        pan = (struct uwb_pan_instance *) malloc(sizeof(struct uwb_pan_instance) + nframes * sizeof(union pan_frame_t *));
    fbba:	f106 0022 	add.w	r0, r6, #34	; 0x22
    fbbe:	0080      	lsls	r0, r0, #2
    fbc0:	f000 fcee 	bl	105a0 <malloc>
        assert(pan);
    fbc4:	4604      	mov	r4, r0
    fbc6:	b160      	cbz	r0, fbe2 <uwb_pan_init+0x86>
        memset(pan, 0, sizeof(struct uwb_pan_instance));
    fbc8:	2288      	movs	r2, #136	; 0x88
    fbca:	2100      	movs	r1, #0
    fbcc:	f000 fd65 	bl	1069a <memset>
        pan->status.selfmalloc = 1;
    fbd0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    fbd4:	f043 0301 	orr.w	r3, r3, #1
    fbd8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        pan->nframes = nframes;
    fbdc:	f8a4 6084 	strh.w	r6, [r4, #132]	; 0x84
    fbe0:	e7c6      	b.n	fb70 <uwb_pan_init+0x14>
        assert(pan);
    fbe2:	2300      	movs	r3, #0
    fbe4:	461a      	mov	r2, r3
    fbe6:	4619      	mov	r1, r3
    fbe8:	4618      	mov	r0, r3
    fbea:	f7f9 faeb 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    fbee:	2300      	movs	r3, #0
    fbf0:	461a      	mov	r2, r3
    fbf2:	4619      	mov	r1, r3
    fbf4:	4618      	mov	r0, r3
    fbf6:	f7f9 fae5 	bl	91c4 <__assert_func>
    fbfa:	bf00      	nop
    fbfc:	0000f801 	.word	0x0000f801

0000fc00 <uwb_pan_set_frames>:
{
    fc00:	b510      	push	{r4, lr}
    assert(nframes <= pan->nframes);
    fc02:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
    fc06:	4293      	cmp	r3, r2
    fc08:	d301      	bcc.n	fc0e <uwb_pan_set_frames+0xe>
    for (uint16_t i = 0; i < nframes; i++)
    fc0a:	2300      	movs	r3, #0
    fc0c:	e011      	b.n	fc32 <uwb_pan_set_frames+0x32>
    assert(nframes <= pan->nframes);
    fc0e:	2300      	movs	r3, #0
    fc10:	461a      	mov	r2, r3
    fc12:	4619      	mov	r1, r3
    fc14:	4618      	mov	r0, r3
    fc16:	f7f9 fad5 	bl	91c4 <__assert_func>
        pan->frames[i] = &pan_f[i];
    fc1a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    fc1e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    fc22:	eb01 040c 	add.w	r4, r1, ip
    fc26:	f103 0c22 	add.w	ip, r3, #34	; 0x22
    fc2a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
    for (uint16_t i = 0; i < nframes; i++)
    fc2e:	3301      	adds	r3, #1
    fc30:	b29b      	uxth	r3, r3
    fc32:	4293      	cmp	r3, r2
    fc34:	d3f1      	bcc.n	fc1a <uwb_pan_set_frames+0x1a>
}
    fc36:	bd10      	pop	{r4, pc}

0000fc38 <uwb_pan_pkg_init>:
{
    fc38:	b570      	push	{r4, r5, r6, lr}
    fc3a:	b082      	sub	sp, #8
    printf("{\"utime\": %"PRIu32",\"msg\": \"pan_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    fc3c:	f002 fe55 	bl	128ea <dpl_cputime_get32>
    fc40:	4601      	mov	r1, r0
    fc42:	481b      	ldr	r0, [pc, #108]	; (fcb0 <uwb_pan_pkg_init+0x78>)
    fc44:	f001 f942 	bl	10ecc <printf>
    dpl_error_t rc = stats_init(
    fc48:	4d1a      	ldr	r5, [pc, #104]	; (fcb4 <uwb_pan_pkg_init+0x7c>)
    fc4a:	220d      	movs	r2, #13
    fc4c:	9200      	str	r2, [sp, #0]
    fc4e:	4b1a      	ldr	r3, [pc, #104]	; (fcb8 <uwb_pan_pkg_init+0x80>)
    fc50:	2104      	movs	r1, #4
    fc52:	4628      	mov	r0, r5
    fc54:	f006 f992 	bl	15f7c <stats_init>
    fc58:	4604      	mov	r4, r0
    rc |= stats_register("pan", STATS_HDR(g_stat));
    fc5a:	4629      	mov	r1, r5
    fc5c:	4817      	ldr	r0, [pc, #92]	; (fcbc <uwb_pan_pkg_init+0x84>)
    fc5e:	f006 fa11 	bl	16084 <stats_register>
    fc62:	4320      	orrs	r0, r4
    fc64:	b240      	sxtb	r0, r0
    assert(rc == DPL_OK);
    fc66:	b9e8      	cbnz	r0, fca4 <uwb_pan_pkg_init+0x6c>
    udev = uwb_dev_idx_lookup(0);
    fc68:	2000      	movs	r0, #0
    fc6a:	f7f9 f803 	bl	8c74 <uwb_dev_idx_lookup>
    fc6e:	4605      	mov	r5, r0
    g_cbs[0].inst_ptr = pan = uwb_pan_init(udev, &g_config, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    fc70:	2202      	movs	r2, #2
    fc72:	4913      	ldr	r1, [pc, #76]	; (fcc0 <uwb_pan_pkg_init+0x88>)
    fc74:	f7ff ff72 	bl	fb5c <uwb_pan_init>
    fc78:	4604      	mov	r4, r0
    fc7a:	4e12      	ldr	r6, [pc, #72]	; (fcc4 <uwb_pan_pkg_init+0x8c>)
    fc7c:	6070      	str	r0, [r6, #4]
    uwb_pan_set_frames(pan, g_pan_0, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    fc7e:	2202      	movs	r2, #2
    fc80:	4911      	ldr	r1, [pc, #68]	; (fcc8 <uwb_pan_pkg_init+0x90>)
    fc82:	f7ff ffbd 	bl	fc00 <uwb_pan_set_frames>
    uwb_mac_append_interface(udev, &g_cbs[0]);
    fc86:	4631      	mov	r1, r6
    fc88:	4628      	mov	r0, r5
    fc8a:	f7f9 f823 	bl	8cd4 <uwb_mac_append_interface>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    fc8e:	f7f9 fe89 	bl	99a4 <os_eventq_dflt_get>
    fc92:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    fc94:	4623      	mov	r3, r4
    fc96:	4a0d      	ldr	r2, [pc, #52]	; (fccc <uwb_pan_pkg_init+0x94>)
    fc98:	f104 0060 	add.w	r0, r4, #96	; 0x60
    fc9c:	f7f9 fc20 	bl	94e0 <os_callout_init>
}
    fca0:	b002      	add	sp, #8
    fca2:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == DPL_OK);
    fca4:	2300      	movs	r3, #0
    fca6:	461a      	mov	r2, r3
    fca8:	4619      	mov	r1, r3
    fcaa:	4618      	mov	r0, r3
    fcac:	f7f9 fa8a 	bl	91c4 <__assert_func>
    fcb0:	00025c18 	.word	0x00025c18
    fcb4:	20003c68 	.word	0x20003c68
    fcb8:	00025c84 	.word	0x00025c84
    fcbc:	00025c40 	.word	0x00025c40
    fcc0:	20000650 	.word	0x20000650
    fcc4:	20000614 	.word	0x20000614
    fcc8:	20000660 	.word	0x20000660
    fccc:	0000f821 	.word	0x0000f821

0000fcd0 <uwb_pan_listen>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_pan_listen(struct uwb_pan_instance * pan, uwb_dev_modes_t mode)
{
    fcd0:	b570      	push	{r4, r5, r6, lr}
    fcd2:	4604      	mov	r4, r0
    fcd4:	460e      	mov	r6, r1
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fcd6:	f100 0540 	add.w	r5, r0, #64	; 0x40
    fcda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fcde:	4628      	mov	r0, r5
    fce0:	f7fa fa04 	bl	a0ec <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&pan->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    fce4:	b978      	cbnz	r0, fd06 <uwb_pan_listen+0x36>

    STATS_INC(g_stat, pan_listen);
    fce6:	4a1e      	ldr	r2, [pc, #120]	; (fd60 <uwb_pan_listen+0x90>)
    fce8:	6993      	ldr	r3, [r2, #24]
    fcea:	3301      	adds	r3, #1
    fcec:	6193      	str	r3, [r2, #24]

    if(uwb_start_rx(pan->dev_inst).start_rx_error){
    fcee:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_rx(dev));
    fcf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fcf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    fcf4:	4798      	blx	r3
    fcf6:	f010 0f08 	tst.w	r0, #8
    fcfa:	d10a      	bne.n	fd12 <uwb_pan_listen+0x42>
        STATS_INC(g_stat, rx_error);
        err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }

    if (mode == UWB_BLOCKING){
    fcfc:	b1c6      	cbz	r6, fd30 <uwb_pan_listen+0x60>
        assert(err == DPL_OK);
        err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }

    return pan->dev_inst->status;
    fcfe:	6823      	ldr	r3, [r4, #0]
}
    fd00:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    fd04:	bd70      	pop	{r4, r5, r6, pc}
    assert(err == DPL_OK);
    fd06:	2300      	movs	r3, #0
    fd08:	461a      	mov	r2, r3
    fd0a:	4619      	mov	r1, r3
    fd0c:	4618      	mov	r0, r3
    fd0e:	f7f9 fa59 	bl	91c4 <__assert_func>
        STATS_INC(g_stat, rx_error);
    fd12:	4a13      	ldr	r2, [pc, #76]	; (fd60 <uwb_pan_listen+0x90>)
    fd14:	6b93      	ldr	r3, [r2, #56]	; 0x38
    fd16:	3301      	adds	r3, #1
    fd18:	6393      	str	r3, [r2, #56]	; 0x38
    return (dpl_error_t)os_sem_release(&sem->sem);
    fd1a:	4628      	mov	r0, r5
    fd1c:	f7fa f9b4 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    fd20:	2800      	cmp	r0, #0
    fd22:	d0eb      	beq.n	fcfc <uwb_pan_listen+0x2c>
    fd24:	2300      	movs	r3, #0
    fd26:	461a      	mov	r2, r3
    fd28:	4619      	mov	r1, r3
    fd2a:	4618      	mov	r0, r3
    fd2c:	f7f9 fa4a 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fd30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd34:	4628      	mov	r0, r5
    fd36:	f7fa f9d9 	bl	a0ec <os_sem_pend>
        assert(err == DPL_OK);
    fd3a:	b950      	cbnz	r0, fd52 <uwb_pan_listen+0x82>
    return (dpl_error_t)os_sem_release(&sem->sem);
    fd3c:	4628      	mov	r0, r5
    fd3e:	f7fa f9a3 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    fd42:	2800      	cmp	r0, #0
    fd44:	d0db      	beq.n	fcfe <uwb_pan_listen+0x2e>
    fd46:	2300      	movs	r3, #0
    fd48:	461a      	mov	r2, r3
    fd4a:	4619      	mov	r1, r3
    fd4c:	4618      	mov	r0, r3
    fd4e:	f7f9 fa39 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    fd52:	2300      	movs	r3, #0
    fd54:	461a      	mov	r2, r3
    fd56:	4619      	mov	r1, r3
    fd58:	4618      	mov	r0, r3
    fd5a:	f7f9 fa33 	bl	91c4 <__assert_func>
    fd5e:	bf00      	nop
    fd60:	20003c68 	.word	0x20003c68

0000fd64 <uwb_pan_blink>:
 * @return uwb_pan_status_t
 */
struct uwb_pan_status_t
uwb_pan_blink(struct uwb_pan_instance *pan, uint16_t role,
                 uwb_dev_modes_t mode, uint64_t delay)
{
    fd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fd68:	b083      	sub	sp, #12
    fd6a:	4604      	mov	r4, r0
    fd6c:	460e      	mov	r6, r1
    fd6e:	4617      	mov	r7, r2
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fd70:	f100 0840 	add.w	r8, r0, #64	; 0x40
    fd74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd78:	4640      	mov	r0, r8
    fd7a:	f7fa f9b7 	bl	a0ec <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&pan->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    fd7e:	2800      	cmp	r0, #0
    fd80:	d179      	bne.n	fe76 <uwb_pan_blink+0x112>

    STATS_INC(g_stat, pan_request);
    fd82:	4a4c      	ldr	r2, [pc, #304]	; (feb4 <uwb_pan_blink+0x150>)
    fd84:	6953      	ldr	r3, [r2, #20]
    fd86:	3301      	adds	r3, #1
    fd88:	6153      	str	r3, [r2, #20]
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    fd8a:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    fd8e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    fd92:	fbb3 f1f2 	udiv	r1, r3, r2
    fd96:	fb02 3311 	mls	r3, r2, r1, r3
    fd9a:	b29b      	uxth	r3, r3
    fd9c:	3322      	adds	r3, #34	; 0x22
    fd9e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]

    frame->seq_num += pan->nframes;
    fda2:	786b      	ldrb	r3, [r5, #1]
    fda4:	4413      	add	r3, r2
    fda6:	706b      	strb	r3, [r5, #1]
    frame->long_address = pan->dev_inst->euid;
    fda8:	6823      	ldr	r3, [r4, #0]
    fdaa:	f8d3 24b8 	ldr.w	r2, [r3, #1208]	; 0x4b8
    fdae:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
    fdb2:	f853 3c04 	ldr.w	r3, [r3, #-4]
    fdb6:	f8c5 2002 	str.w	r2, [r5, #2]
    fdba:	f8c5 3006 	str.w	r3, [r5, #6]
    frame->code = DWT_PAN_REQ;
    fdbe:	f04f 0900 	mov.w	r9, #0
    fdc2:	2301      	movs	r3, #1
    fdc4:	72eb      	strb	r3, [r5, #11]
    fdc6:	f885 900c 	strb.w	r9, [r5, #12]
    frame->rpt_count = 0;
    fdca:	7aab      	ldrb	r3, [r5, #10]
    fdcc:	f369 0303 	bfi	r3, r9, #0, #4
    fdd0:	72ab      	strb	r3, [r5, #10]
    frame->rpt_max = MYNEWT_VAL(UWB_PAN_RPT_MAX);
    fdd2:	b2db      	uxtb	r3, r3
    fdd4:	2202      	movs	r2, #2
    fdd6:	f362 1307 	bfi	r3, r2, #4, #4
    fdda:	72ab      	strb	r3, [r5, #10]
    frame->req.role = role;
    fddc:	f8a5 600d 	strh.w	r6, [r5, #13]
    frame->req.lease_time = pan->config->lease_time;
    fde0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    fde4:	899b      	ldrh	r3, [r3, #12]
    fde6:	f8a5 300f 	strh.w	r3, [r5, #15]

#if MYNEWT_VAL(UWB_PAN_VERSION_ENABLED)
    struct image_version iv;
    imgr_my_version(&iv);
    fdea:	4668      	mov	r0, sp
    fdec:	f001 fa56 	bl	1129c <imgr_my_version>
    frame->req.fw_ver.iv_major = iv.iv_major;
    fdf0:	f89d 3000 	ldrb.w	r3, [sp]
    fdf4:	746b      	strb	r3, [r5, #17]
    frame->req.fw_ver.iv_minor = iv.iv_minor;
    fdf6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fdfa:	74ab      	strb	r3, [r5, #18]
    frame->req.fw_ver.iv_revision = iv.iv_revision;
    fdfc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fe00:	f8a5 3013 	strh.w	r3, [r5, #19]
    frame->req.fw_ver.iv_build_num = iv.iv_build_num;
    fe04:	9b01      	ldr	r3, [sp, #4]
    fe06:	f8c5 3015 	str.w	r3, [r5, #21]
#endif

    uwb_set_delay_start(pan->dev_inst, delay);
    fe0a:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    fe0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    fe10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    fe14:	4788      	blx	r1
    uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    fe16:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    fe18:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe1a:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    fe1c:	464b      	mov	r3, r9
    fe1e:	464a      	mov	r2, r9
    fe20:	2119      	movs	r1, #25
    fe22:	47b0      	blx	r6
    uwb_write_tx(pan->dev_inst, frame->array, 0, sizeof(union pan_frame_t));
    fe24:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    fe26:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe28:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    fe2a:	2319      	movs	r3, #25
    fe2c:	464a      	mov	r2, r9
    fe2e:	4629      	mov	r1, r5
    fe30:	47b0      	blx	r6
    uwb_set_wait4resp(pan->dev_inst, true);
    fe32:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    fe34:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fe38:	2101      	movs	r1, #1
    fe3a:	4798      	blx	r3
    uwb_set_rx_timeout(pan->dev_inst, pan->config->rx_timeout_period);
    fe3c:	6820      	ldr	r0, [r4, #0]
    fe3e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    fe42:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe46:	8891      	ldrh	r1, [r2, #4]
    fe48:	4798      	blx	r3
    pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    fe4a:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_tx(dev));
    fe4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fe50:	4798      	blx	r3
    fe52:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fe56:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    fe5a:	f360 03c3 	bfi	r3, r0, #3, #1
    fe5e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    if (pan->status.start_tx_error){
    fe62:	b2db      	uxtb	r3, r3
    fe64:	f013 0f08 	tst.w	r3, #8
    fe68:	d10b      	bne.n	fe82 <uwb_pan_blink+0x11e>
        DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_blnk_txerr\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        // Half Period Delay Warning occured try for the next epoch
        // Use seq_num to detect this on receiver size
        dpl_sem_release(&pan->sem);
    }
    else if(mode == UWB_BLOCKING){
    fe6a:	b197      	cbz	r7, fe92 <uwb_pan_blink+0x12e>
        err = dpl_sem_pend(&pan->sem, DPL_TIMEOUT_NEVER); // Wait for completion of transactions
        dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }
    return pan->status;
}
    fe6c:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    fe70:	b003      	add	sp, #12
    fe72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(err == DPL_OK);
    fe76:	2300      	movs	r3, #0
    fe78:	461a      	mov	r2, r3
    fe7a:	4619      	mov	r1, r3
    fe7c:	4618      	mov	r0, r3
    fe7e:	f7f9 f9a1 	bl	91c4 <__assert_func>
        STATS_INC(g_stat, tx_error);
    fe82:	4a0c      	ldr	r2, [pc, #48]	; (feb4 <uwb_pan_blink+0x150>)
    fe84:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    fe86:	3301      	adds	r3, #1
    fe88:	63d3      	str	r3, [r2, #60]	; 0x3c
    return (dpl_error_t)os_sem_release(&sem->sem);
    fe8a:	4640      	mov	r0, r8
    fe8c:	f7fa f8fc 	bl	a088 <os_sem_release>
    fe90:	e7ec      	b.n	fe6c <uwb_pan_blink+0x108>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fe92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fe96:	4640      	mov	r0, r8
    fe98:	f7fa f928 	bl	a0ec <os_sem_pend>
    fe9c:	4605      	mov	r5, r0
    return (dpl_error_t)os_sem_release(&sem->sem);
    fe9e:	4640      	mov	r0, r8
    fea0:	f7fa f8f2 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
    fea4:	2d00      	cmp	r5, #0
    fea6:	d0e1      	beq.n	fe6c <uwb_pan_blink+0x108>
    fea8:	2300      	movs	r3, #0
    feaa:	461a      	mov	r2, r3
    feac:	4619      	mov	r1, r3
    feae:	4618      	mov	r0, r3
    feb0:	f7f9 f988 	bl	91c4 <__assert_func>
    feb4:	20003c68 	.word	0x20003c68

0000feb8 <uwb_pan_reset>:
 *
 * @return uwb_pan_status_t
 */
struct uwb_pan_status_t
uwb_pan_reset(struct uwb_pan_instance * pan, uint64_t delay)
{
    feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    feba:	4604      	mov	r4, r0
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    febc:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    fec0:	f8b0 0084 	ldrh.w	r0, [r0, #132]	; 0x84
    fec4:	fbb1 f5f0 	udiv	r5, r1, r0
    fec8:	fb00 1115 	mls	r1, r0, r5, r1
    fecc:	b289      	uxth	r1, r1
    fece:	3122      	adds	r1, #34	; 0x22
    fed0:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]

    frame->seq_num += pan->nframes;
    fed4:	7869      	ldrb	r1, [r5, #1]
    fed6:	4401      	add	r1, r0
    fed8:	7069      	strb	r1, [r5, #1]
    frame->long_address = pan->dev_inst->euid;
    feda:	6821      	ldr	r1, [r4, #0]
    fedc:	f8d1 04b8 	ldr.w	r0, [r1, #1208]	; 0x4b8
    fee0:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
    fee4:	f851 1c04 	ldr.w	r1, [r1, #-4]
    fee8:	f8c5 0002 	str.w	r0, [r5, #2]
    feec:	f8c5 1006 	str.w	r1, [r5, #6]
    frame->code = DWT_PAN_RESET;
    fef0:	2600      	movs	r6, #0
    fef2:	2103      	movs	r1, #3
    fef4:	72e9      	strb	r1, [r5, #11]
    fef6:	732e      	strb	r6, [r5, #12]

    uwb_set_delay_start(pan->dev_inst, delay);
    fef8:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    fefa:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fefc:	6b49      	ldr	r1, [r1, #52]	; 0x34
    fefe:	4788      	blx	r1
    uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    ff00:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    ff02:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff04:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    ff06:	4633      	mov	r3, r6
    ff08:	4632      	mov	r2, r6
    ff0a:	2119      	movs	r1, #25
    ff0c:	47b8      	blx	r7
    uwb_write_tx(pan->dev_inst, frame->array, 0, sizeof(union pan_frame_t));
    ff0e:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    ff10:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff12:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    ff14:	2319      	movs	r3, #25
    ff16:	4632      	mov	r2, r6
    ff18:	4629      	mov	r1, r5
    ff1a:	47b8      	blx	r7
    uwb_set_wait4resp(pan->dev_inst, false);
    ff1c:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    ff1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ff22:	4631      	mov	r1, r6
    ff24:	4798      	blx	r3
    pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    ff26:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_tx(dev));
    ff28:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ff2c:	4798      	blx	r3
    ff2e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ff32:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    ff36:	f360 03c3 	bfi	r3, r0, #3, #1
    ff3a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    if (pan->status.start_tx_error){
    ff3e:	b2db      	uxtb	r3, r3
    ff40:	f013 0f08 	tst.w	r3, #8
    ff44:	d003      	beq.n	ff4e <uwb_pan_reset+0x96>
        STATS_INC(g_stat, tx_error);
    ff46:	4a03      	ldr	r2, [pc, #12]	; (ff54 <uwb_pan_reset+0x9c>)
    ff48:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    ff4a:	3301      	adds	r3, #1
    ff4c:	63d3      	str	r3, [r2, #60]	; 0x3c
        DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_reset_tx_err\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    }
    return pan->status;
}
    ff4e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    ff52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff54:	20003c68 	.word	0x20003c68

0000ff58 <uwb_pan_start>:
 * @return void
 */
void
uwb_pan_start(struct uwb_pan_instance * pan, enum uwb_pan_role_t role, network_role_t network_role)
{
    pan->config->role = role;
    ff58:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    ff5c:	f893 c00b 	ldrb.w	ip, [r3, #11]
    ff60:	f361 1c07 	bfi	ip, r1, #4, #4
    ff64:	f883 c00b 	strb.w	ip, [r3, #11]
    pan->config->network_role = network_role;
    ff68:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    ff6c:	81da      	strh	r2, [r3, #14]

    if (pan->config->role == UWB_PAN_ROLE_MASTER) {
    ff6e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    ff72:	7adb      	ldrb	r3, [r3, #11]
    ff74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ff78:	2b10      	cmp	r3, #16
    ff7a:	d001      	beq.n	ff80 <uwb_pan_start+0x28>
        /* Nothing for now */
    } else if (pan->config->role == UWB_PAN_ROLE_SLAVE) {
    ff7c:	2b20      	cmp	r3, #32
    ff7e:	d000      	beq.n	ff82 <uwb_pan_start+0x2a>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
               "Provisioning"
            );
#endif
    }
}
    ff80:	4770      	bx	lr
        pan->idx = 0x1;
    ff82:	2301      	movs	r3, #1
    ff84:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        pan->status.valid = false;
    ff88:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ff8c:	f36f 0382 	bfc	r3, #2, #1
    ff90:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
    ff94:	e7f4      	b.n	ff80 <uwb_pan_start+0x28>

0000ff96 <uwb_pan_lease_remaining>:
 *
 * @return uint32_t ms to expiry, 0 if already expired
 */
uint32_t
uwb_pan_lease_remaining(struct uwb_pan_instance * pan)
{
    ff96:	b510      	push	{r4, lr}
    ff98:	4604      	mov	r4, r0
    return os_time_get();
    ff9a:	f7fa fa47 	bl	a42c <os_time_get>
    ff9e:	4601      	mov	r1, r0
    return os_callout_remaining_ticks(&co->co, time);
    ffa0:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ffa4:	f7f9 fb4c 	bl	9640 <os_callout_remaining_ticks>
os_time_ticks_to_ms32(os_time_t ticks)
{
#if OS_TICKS_PER_SEC == 1000
    return ticks;
#else
    return ((uint64_t)ticks * 1000) / OS_TICKS_PER_SEC;
    ffa8:	0ec2      	lsrs	r2, r0, #27
    ffaa:	0143      	lsls	r3, r0, #5
    ffac:	1a1b      	subs	r3, r3, r0
    ffae:	f162 0200 	sbc.w	r2, r2, #0
    ffb2:	0092      	lsls	r2, r2, #2
    ffb4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    ffb8:	009b      	lsls	r3, r3, #2
    ffba:	181b      	adds	r3, r3, r0
    ffbc:	f142 0000 	adc.w	r0, r2, #0
    ffc0:	00c0      	lsls	r0, r0, #3
    ffc2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    ffc6:	f3c3 1318 	ubfx	r3, r3, #4, #25
    dpl_time_t rt = dpl_callout_remaining_ticks(&pan->pan_lease_callout_expiry, dpl_time_get());
    return dpl_time_ticks_to_ms32(rt);
}
    ffca:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
    ffce:	bd10      	pop	{r4, pc}

0000ffd0 <uwb_pan_slot_timer_cb>:
 *
 * @return void
 */
void
uwb_pan_slot_timer_cb(struct dpl_event * ev)
{
    ffd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ffd4:	b083      	sub	sp, #12
    assert(ev);
    ffd6:	b1f8      	cbz	r0, 10018 <uwb_pan_slot_timer_cb+0x48>
    return ev->ev.ev_arg;
    ffd8:	6883      	ldr	r3, [r0, #8]
    tdma_slot_t * slot = (tdma_slot_t *) dpl_event_get_arg(ev);

    tdma_instance_t * tdma = slot->parent;
    ffda:	689c      	ldr	r4, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    ffdc:	6867      	ldr	r7, [r4, #4]
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)slot->arg;
    ffde:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    assert(pan);
    ffe0:	b305      	cbz	r5, 10024 <uwb_pan_slot_timer_cb+0x54>
    uint16_t idx = slot->idx;
    ffe2:	881e      	ldrh	r6, [r3, #0]

    /* Check if we are to act as a Master Node in the network */
    if (tdma->dev_inst->role&UWB_ROLE_PAN_MASTER) {
    ffe4:	6823      	ldr	r3, [r4, #0]
    ffe6:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
    ffea:	f013 0f02 	tst.w	r3, #2
    ffee:	d046      	beq.n	1007e <uwb_pan_slot_timer_cb+0xae>
        static uint8_t _pan_cycles = 0;

        /* Broadcast an initial reset message to clear all leases */
        if (_pan_cycles < 8) {
    fff0:	4b54      	ldr	r3, [pc, #336]	; (10144 <uwb_pan_slot_timer_cb+0x174>)
    fff2:	781b      	ldrb	r3, [r3, #0]
    fff4:	2b07      	cmp	r3, #7
    fff6:	d81b      	bhi.n	10030 <uwb_pan_slot_timer_cb+0x60>
            _pan_cycles++;
    fff8:	3301      	adds	r3, #1
    fffa:	4a52      	ldr	r2, [pc, #328]	; (10144 <uwb_pan_slot_timer_cb+0x174>)
    fffc:	7013      	strb	r3, [r2, #0]
            uwb_pan_reset(pan, tdma_tx_slot_start(tdma, idx));
    fffe:	ee07 6a90 	vmov	s15, r6
   10002:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   10006:	4620      	mov	r0, r4
   10008:	f7fe f9ca 	bl	e3a0 <tdma_tx_slot_start>
   1000c:	4602      	mov	r2, r0
   1000e:	460b      	mov	r3, r1
   10010:	4628      	mov	r0, r5
   10012:	f7ff ff51 	bl	feb8 <uwb_pan_reset>
   10016:	e091      	b.n	1013c <uwb_pan_slot_timer_cb+0x16c>
    assert(ev);
   10018:	2300      	movs	r3, #0
   1001a:	461a      	mov	r2, r3
   1001c:	4619      	mov	r1, r3
   1001e:	4618      	mov	r0, r3
   10020:	f7f9 f8d0 	bl	91c4 <__assert_func>
    assert(pan);
   10024:	2300      	movs	r3, #0
   10026:	461a      	mov	r2, r3
   10028:	4619      	mov	r1, r3
   1002a:	4618      	mov	r0, r3
   1002c:	f7f9 f8ca 	bl	91c4 <__assert_func>
        } else {
            uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
   10030:	ee07 6a90 	vmov	s15, r6
   10034:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   10038:	4620      	mov	r0, r4
   1003a:	f7fe f982 	bl	e342 <tdma_rx_slot_start>
   1003e:	4681      	mov	r9, r0
   10040:	4688      	mov	r8, r1
            uwb_set_rx_timeout(tdma->dev_inst, 3*ccp->period/tdma->nslots/4);
   10042:	6820      	ldr	r0, [r4, #0]
   10044:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
   10048:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1004c:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   10050:	fbb6 f1f1 	udiv	r1, r6, r1
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   10054:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10058:	0889      	lsrs	r1, r1, #2
   1005a:	4798      	blx	r3
            uwb_set_delay_start(tdma->dev_inst, dx_time);
   1005c:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1005e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10060:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10062:	464a      	mov	r2, r9
   10064:	4643      	mov	r3, r8
   10066:	4788      	blx	r1
            uwb_set_on_error_continue(tdma->dev_inst, true);
   10068:	6820      	ldr	r0, [r4, #0]
 *
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_on_error_continue(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
   1006a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1006c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   10070:	2101      	movs	r1, #1
   10072:	4798      	blx	r3
            uwb_pan_listen(pan, UWB_BLOCKING);
   10074:	2100      	movs	r1, #0
   10076:	4628      	mov	r0, r5
   10078:	f7ff fe2a 	bl	fcd0 <uwb_pan_listen>
   1007c:	e05e      	b.n	1013c <uwb_pan_slot_timer_cb+0x16c>
        }
    } else {
        /* Act as a slave Node in the network */
        if (pan->status.valid && uwb_pan_lease_remaining(pan)>MYNEWT_VAL(UWB_PAN_LEASE_EXP_MARGIN)) {
   1007e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   10082:	f013 0f04 	tst.w	r3, #4
   10086:	d044      	beq.n	10112 <uwb_pan_slot_timer_cb+0x142>
   10088:	4628      	mov	r0, r5
   1008a:	f7ff ff84 	bl	ff96 <uwb_pan_lease_remaining>
   1008e:	f64e 2360 	movw	r3, #60000	; 0xea60
   10092:	4298      	cmp	r0, r3
   10094:	d93d      	bls.n	10112 <uwb_pan_slot_timer_cb+0x142>
            /* Our lease is still valid - just listen */
            uint16_t timeout;
            if (pan->config->role == UWB_PAN_ROLE_RELAY) {
   10096:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   1009a:	7adb      	ldrb	r3, [r3, #11]
   1009c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   100a0:	2b30      	cmp	r3, #48	; 0x30
   100a2:	d02b      	beq.n	100fc <uwb_pan_slot_timer_cb+0x12c>
                timeout = 3*ccp->period/tdma->nslots/4;
            } else {
                /* Only listen long enough to get any resets from master */
                timeout = uwb_phy_frame_duration(tdma->dev_inst, sizeof(sizeof(union pan_frame_t)))
   100a4:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   100a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   100a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   100aa:	2104      	movs	r1, #4
   100ac:	4798      	blx	r3
   100ae:	f500 7180 	add.w	r1, r0, #256	; 0x100
   100b2:	b289      	uxth	r1, r1
                    + MYNEWT_VAL(XTALT_GUARD);
            }
            uwb_set_rx_timeout(tdma->dev_inst, timeout);
   100b4:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   100b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   100b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   100ba:	4798      	blx	r3
            uwb_set_delay_start(tdma->dev_inst, tdma_rx_slot_start(tdma, idx));
   100bc:	6827      	ldr	r7, [r4, #0]
   100be:	ee07 6a90 	vmov	s15, r6
   100c2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   100c6:	4620      	mov	r0, r4
   100c8:	f7fe f93b 	bl	e342 <tdma_rx_slot_start>
   100cc:	4602      	mov	r2, r0
   100ce:	460b      	mov	r3, r1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   100d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   100d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   100d4:	4638      	mov	r0, r7
   100d6:	4788      	blx	r1
            uwb_set_on_error_continue(tdma->dev_inst, true);
   100d8:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
   100da:	6a43      	ldr	r3, [r0, #36]	; 0x24
   100dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   100e0:	2101      	movs	r1, #1
   100e2:	4798      	blx	r3
            if (uwb_pan_listen(pan, UWB_BLOCKING).start_rx_error) {
   100e4:	2100      	movs	r1, #0
   100e6:	4628      	mov	r0, r5
   100e8:	f7ff fdf2 	bl	fcd0 <uwb_pan_listen>
   100ec:	f010 0f08 	tst.w	r0, #8
   100f0:	d024      	beq.n	1013c <uwb_pan_slot_timer_cb+0x16c>
                STATS_INC(g_stat, rx_error);
   100f2:	4a15      	ldr	r2, [pc, #84]	; (10148 <uwb_pan_slot_timer_cb+0x178>)
   100f4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   100f6:	3301      	adds	r3, #1
   100f8:	6393      	str	r3, [r2, #56]	; 0x38
   100fa:	e01f      	b.n	1013c <uwb_pan_slot_timer_cb+0x16c>
                timeout = 3*ccp->period/tdma->nslots/4;
   100fc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
   10100:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10104:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   10108:	fbb1 f1f3 	udiv	r1, r1, r3
   1010c:	f3c1 018f 	ubfx	r1, r1, #2, #16
   10110:	e7d0      	b.n	100b4 <uwb_pan_slot_timer_cb+0xe4>
            }
        } else {
            /* Subslot 0 is for master reset, subslot 1 is for sending requests */
            uint64_t dx_time = tdma_tx_slot_start(tdma, (float)idx+1.0f/16);
   10112:	ee07 6a90 	vmov	s15, r6
   10116:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   1011a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 1014c <uwb_pan_slot_timer_cb+0x17c>
   1011e:	ee30 0a27 	vadd.f32	s0, s0, s15
   10122:	4620      	mov	r0, r4
   10124:	f7fe f93c 	bl	e3a0 <tdma_tx_slot_start>
            uwb_pan_blink(pan, pan->config->network_role, UWB_BLOCKING, dx_time);
   10128:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   1012c:	89db      	ldrh	r3, [r3, #14]
   1012e:	e9cd 0100 	strd	r0, r1, [sp]
   10132:	2200      	movs	r2, #0
   10134:	4619      	mov	r1, r3
   10136:	4628      	mov	r0, r5
   10138:	f7ff fe14 	bl	fd64 <uwb_pan_blink>
        }
    }
}
   1013c:	b003      	add	sp, #12
   1013e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10142:	bf00      	nop
   10144:	20003c64 	.word	0x20003c64
   10148:	20003c68 	.word	0x20003c68
   1014c:	3d800000 	.word	0x3d800000

00010150 <NumberOfBits>:
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t
NumberOfBits(uint32_t n) {
   10150:	4603      	mov	r3, r0
    uint32_t count = 0;
   10152:	2000      	movs	r0, #0
    while (n) {
   10154:	e002      	b.n	1015c <NumberOfBits+0xc>
        n &= (n-1);
   10156:	1e5a      	subs	r2, r3, #1
   10158:	4013      	ands	r3, r2
        count++;
   1015a:	3001      	adds	r0, #1
    while (n) {
   1015c:	2b00      	cmp	r3, #0
   1015e:	d1fa      	bne.n	10156 <NumberOfBits+0x6>
    }
    return count;
}
   10160:	4770      	bx	lr

00010162 <BitPosition>:
 *
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t BitPosition(uint32_t n) {
   10162:	b508      	push	{r3, lr}
    uint32_t count = 0;
    assert(n && (! (n & (n-1)) )); // single bit set
   10164:	b118      	cbz	r0, 1016e <BitPosition+0xc>
   10166:	4603      	mov	r3, r0
   10168:	3801      	subs	r0, #1
   1016a:	4018      	ands	r0, r3
   1016c:	d007      	beq.n	1017e <BitPosition+0x1c>
   1016e:	2300      	movs	r3, #0
   10170:	461a      	mov	r2, r3
   10172:	4619      	mov	r1, r3
   10174:	4618      	mov	r0, r3
   10176:	f7f9 f825 	bl	91c4 <__assert_func>

    while (n){
        n = n >> 1;
   1017a:	085b      	lsrs	r3, r3, #1
        ++count; // position of bit within bitfield
   1017c:	3001      	adds	r0, #1
    while (n){
   1017e:	2b00      	cmp	r3, #0
   10180:	d1fb      	bne.n	1017a <BitPosition+0x18>
    }
    return count;
}
   10182:	bd08      	pop	{r3, pc}

00010184 <BitIndex>:
 *
 * @return numerical ordering of a bit witin bitmask.
 */
uint32_t
BitIndex(uint32_t nslots_mask, uint32_t n, slot_mode_t mode)
{
   10184:	b538      	push	{r3, r4, r5, lr}
    uint32_t idx, slot_mask, remaining_mask;
    assert(n && (! (n & (n-1)) ));  // single bit set
   10186:	b1c1      	cbz	r1, 101ba <BitIndex+0x36>
   10188:	4604      	mov	r4, r0
   1018a:	4615      	mov	r5, r2
   1018c:	4608      	mov	r0, r1
   1018e:	1e4b      	subs	r3, r1, #1
   10190:	420b      	tst	r3, r1
   10192:	d112      	bne.n	101ba <BitIndex+0x36>
    assert(n & nslots_mask);        // bit set is within ROI
   10194:	4221      	tst	r1, r4
   10196:	d016      	beq.n	101c6 <BitIndex+0x42>

    idx = BitPosition(n);
   10198:	f7ff ffe3 	bl	10162 <BitPosition>
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
   1019c:	f1c0 0220 	rsb	r2, r0, #32
   101a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   101a4:	fa23 f202 	lsr.w	r2, r3, r2
    remaining_mask = ((uint32_t)~0UL << idx);
   101a8:	fa03 f000 	lsl.w	r0, r3, r0

    if (mode == SLOT_POSITION)
   101ac:	2d01      	cmp	r5, #1
   101ae:	d010      	beq.n	101d2 <BitIndex+0x4e>
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
    else
        return NumberOfBits(nslots_mask & remaining_mask) - 1; // no. of slots remaining
   101b0:	4020      	ands	r0, r4
   101b2:	f7ff ffcd 	bl	10150 <NumberOfBits>
   101b6:	3801      	subs	r0, #1
}
   101b8:	bd38      	pop	{r3, r4, r5, pc}
    assert(n && (! (n & (n-1)) ));  // single bit set
   101ba:	2300      	movs	r3, #0
   101bc:	461a      	mov	r2, r3
   101be:	4619      	mov	r1, r3
   101c0:	4618      	mov	r0, r3
   101c2:	f7f8 ffff 	bl	91c4 <__assert_func>
    assert(n & nslots_mask);        // bit set is within ROI
   101c6:	2300      	movs	r3, #0
   101c8:	461a      	mov	r2, r3
   101ca:	4619      	mov	r1, r3
   101cc:	4618      	mov	r0, r3
   101ce:	f7f8 fff9 	bl	91c4 <__assert_func>
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
   101d2:	ea04 0002 	and.w	r0, r4, r2
   101d6:	f7ff ffbb 	bl	10150 <NumberOfBits>
   101da:	3801      	subs	r0, #1
   101dc:	e7ec      	b.n	101b8 <BitIndex+0x34>
	...

000101e0 <uwb_wcs_init>:
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
{
   101e0:	b510      	push	{r4, lr}
   101e2:	460c      	mov	r4, r1
    if (wcs == NULL ) {
   101e4:	4603      	mov	r3, r0
   101e6:	b150      	cbz	r0, 101fe <uwb_wcs_init+0x1e>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
        wcs->status.selfmalloc = 1;
    }
    wcs->ccp = ccp;
   101e8:	661c      	str	r4, [r3, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
   101ea:	2000      	movs	r0, #0
   101ec:	490c      	ldr	r1, [pc, #48]	; (10220 <uwb_wcs_init+0x40>)
   101ee:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
   101f2:	2000      	movs	r0, #0
   101f4:	2100      	movs	r1, #0
   101f6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48

    return wcs;
}
   101fa:	4618      	mov	r0, r3
   101fc:	bd10      	pop	{r4, pc}
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
   101fe:	21a8      	movs	r1, #168	; 0xa8
   10200:	2001      	movs	r0, #1
   10202:	f000 f908 	bl	10416 <calloc>
        assert(wcs);
   10206:	4603      	mov	r3, r0
   10208:	b120      	cbz	r0, 10214 <uwb_wcs_init+0x34>
        wcs->status.selfmalloc = 1;
   1020a:	7802      	ldrb	r2, [r0, #0]
   1020c:	f042 0201 	orr.w	r2, r2, #1
   10210:	7002      	strb	r2, [r0, #0]
   10212:	e7e9      	b.n	101e8 <uwb_wcs_init+0x8>
        assert(wcs);
   10214:	2300      	movs	r3, #0
   10216:	461a      	mov	r2, r3
   10218:	4619      	mov	r1, r3
   1021a:	4618      	mov	r0, r3
   1021c:	f7f8 ffd2 	bl	91c4 <__assert_func>
   10220:	3ff00000 	.word	0x3ff00000

00010224 <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
   10224:	b510      	push	{r4, lr}
    assert(inst);
   10226:	b168      	cbz	r0, 10244 <uwb_wcs_free+0x20>
   10228:	4604      	mov	r4, r0
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
   1022a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1022e:	f00e ffd7 	bl	1f1e0 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
   10232:	7823      	ldrb	r3, [r4, #0]
   10234:	f013 0f01 	tst.w	r3, #1
   10238:	d10a      	bne.n	10250 <uwb_wcs_free+0x2c>
        free(inst);
    else
        inst->status.initialized = 0;
   1023a:	7823      	ldrb	r3, [r4, #0]
   1023c:	f36f 0341 	bfc	r3, #1, #1
   10240:	7023      	strb	r3, [r4, #0]
}
   10242:	bd10      	pop	{r4, pc}
    assert(inst);
   10244:	2300      	movs	r3, #0
   10246:	461a      	mov	r2, r3
   10248:	4619      	mov	r1, r3
   1024a:	4618      	mov	r0, r3
   1024c:	f7f8 ffba 	bl	91c4 <__assert_func>
        free(inst);
   10250:	4620      	mov	r0, r4
   10252:	f000 f9db 	bl	1060c <free>
   10256:	e7f4      	b.n	10242 <uwb_wcs_free+0x1e>

00010258 <uwb_wcs_set_postprocess>:
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    if(!wcs) return;
   10258:	4603      	mov	r3, r0
   1025a:	b150      	cbz	r0, 10272 <uwb_wcs_set_postprocess+0x1a>
    memset(ev, 0, sizeof(*ev));
   1025c:	2200      	movs	r2, #0
   1025e:	6502      	str	r2, [r0, #80]	; 0x50
   10260:	6542      	str	r2, [r0, #84]	; 0x54
   10262:	6582      	str	r2, [r0, #88]	; 0x58
   10264:	65c2      	str	r2, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   10266:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
   10268:	6598      	str	r0, [r3, #88]	; 0x58
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
   1026a:	7902      	ldrb	r2, [r0, #4]
   1026c:	f042 0201 	orr.w	r2, r2, #1
   10270:	7102      	strb	r2, [r0, #4]
}
   10272:	4770      	bx	lr

00010274 <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
   10274:	4619      	mov	r1, r3
    if(!wcs) return dtu_time;
   10276:	b1b8      	cbz	r0, 102a8 <uwb_wcs_dtu_time_adjust+0x34>
{
   10278:	b538      	push	{r3, r4, r5, lr}
   1027a:	4603      	mov	r3, r0
    if (wcs->status.valid){
   1027c:	7800      	ldrb	r0, [r0, #0]
   1027e:	f010 0f04 	tst.w	r0, #4
   10282:	d00d      	beq.n	102a0 <uwb_wcs_dtu_time_adjust+0x2c>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
   10284:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
   10288:	4610      	mov	r0, r2
   1028a:	f013 f993 	bl	235b4 <__aeabi_ul2d>
   1028e:	4602      	mov	r2, r0
   10290:	460b      	mov	r3, r1
   10292:	4620      	mov	r0, r4
   10294:	4629      	mov	r1, r5
   10296:	f013 f9c3 	bl	23620 <__aeabi_dmul>
   1029a:	f013 fe7f 	bl	23f9c <__aeabi_d2lz>
   1029e:	4602      	mov	r2, r0
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
   102a0:	4610      	mov	r0, r2
   102a2:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
   102a6:	bd38      	pop	{r3, r4, r5, pc}
    if(!wcs) return dtu_time;
   102a8:	4610      	mov	r0, r2
}
   102aa:	4770      	bx	lr

000102ac <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
   102ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   102ae:	b087      	sub	sp, #28
   102b0:	4605      	mov	r5, r0
   102b2:	ec51 0b10 	vmov	r0, r1, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
   102b6:	2200      	movs	r2, #0
   102b8:	4b17      	ldr	r3, [pc, #92]	; (10318 <uwb_wcs_prediction+0x6c>)
   102ba:	e9cd 2300 	strd	r2, r3, [sp]
   102be:	ed8d 0b02 	vstr	d0, [sp, #8]
   102c2:	ee10 2a10 	vmov	r2, s0
   102c6:	460b      	mov	r3, r1
   102c8:	f013 f9aa 	bl	23620 <__aeabi_dmul>
   102cc:	2200      	movs	r2, #0
   102ce:	4b13      	ldr	r3, [pc, #76]	; (1031c <uwb_wcs_prediction+0x70>)
   102d0:	f013 f9a6 	bl	23620 <__aeabi_dmul>
   102d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   102d8:	2400      	movs	r4, #0
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
   102da:	2600      	movs	r6, #0
   102dc:	2700      	movs	r7, #0
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   102de:	e014      	b.n	1030a <uwb_wcs_prediction+0x5e>
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
   102e0:	ab06      	add	r3, sp, #24
   102e2:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   102e6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   102ee:	e951 0106 	ldrd	r0, r1, [r1, #-24]
   102f2:	f013 f995 	bl	23620 <__aeabi_dmul>
   102f6:	4602      	mov	r2, r0
   102f8:	460b      	mov	r3, r1
   102fa:	4630      	mov	r0, r6
   102fc:	4639      	mov	r1, r7
   102fe:	f012 ffd9 	bl	232b4 <__adddf3>
   10302:	4606      	mov	r6, r0
   10304:	460f      	mov	r7, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   10306:	3401      	adds	r4, #1
   10308:	b2e4      	uxtb	r4, r4
   1030a:	2c02      	cmp	r4, #2
   1030c:	d9e8      	bls.n	102e0 <uwb_wcs_prediction+0x34>
    }
    return tmp;
}
   1030e:	ec47 6b10 	vmov	d0, r6, r7
   10312:	b007      	add	sp, #28
   10314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10316:	bf00      	nop
   10318:	3ff00000 	.word	0x3ff00000
   1031c:	3fe00000 	.word	0x3fe00000

00010320 <uwb_wcs_local_to_master64>:
    if(!wcs) return 0xffffffffffffffffULL;
   10320:	b350      	cbz	r0, 10378 <uwb_wcs_local_to_master64+0x58>
{
   10322:	b510      	push	{r4, lr}
   10324:	4604      	mov	r4, r0
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
   10326:	6980      	ldr	r0, [r0, #24]
   10328:	7f21      	ldrb	r1, [r4, #28]
   1032a:	1a10      	subs	r0, r2, r0
   1032c:	eb63 0301 	sbc.w	r3, r3, r1
   10330:	4602      	mov	r2, r0
   10332:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    if (wcs->status.valid) {
   10336:	7823      	ldrb	r3, [r4, #0]
   10338:	f013 0f04 	tst.w	r3, #4
   1033c:	d016      	beq.n	1036c <uwb_wcs_local_to_master64+0x4c>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
   1033e:	f013 f939 	bl	235b4 <__aeabi_ul2d>
   10342:	a30f      	add	r3, pc, #60	; (adr r3, 10380 <uwb_wcs_local_to_master64+0x60>)
   10344:	e9d3 2300 	ldrd	r2, r3, [r3]
   10348:	f013 fa94 	bl	23874 <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
   1034c:	ec41 0b10 	vmov	d0, r0, r1
   10350:	f104 0020 	add.w	r0, r4, #32
   10354:	f7ff ffaa 	bl	102ac <uwb_wcs_prediction>
   10358:	ec51 0b10 	vmov	r0, r1, d0
   1035c:	f013 fe1e 	bl	23f9c <__aeabi_d2lz>
   10360:	460b      	mov	r3, r1
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
   10362:	6961      	ldr	r1, [r4, #20]
   10364:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   10368:	4419      	add	r1, r3
}
   1036a:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
   1036c:	6920      	ldr	r0, [r4, #16]
   1036e:	7d23      	ldrb	r3, [r4, #20]
   10370:	1880      	adds	r0, r0, r2
   10372:	eb43 0301 	adc.w	r3, r3, r1
   10376:	e7f4      	b.n	10362 <uwb_wcs_local_to_master64+0x42>
    if(!wcs) return 0xffffffffffffffffULL;
   10378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1037c:	4601      	mov	r1, r0
}
   1037e:	4770      	bx	lr
   10380:	00000000 	.word	0x00000000
   10384:	422e8480 	.word	0x422e8480

00010388 <uwb_wcs_local_to_master>:
{
   10388:	b508      	push	{r3, lr}
    assert(wcs);
   1038a:	b118      	cbz	r0, 10394 <uwb_wcs_local_to_master+0xc>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
   1038c:	f7ff ffc8 	bl	10320 <uwb_wcs_local_to_master64>
}
   10390:	b2c9      	uxtb	r1, r1
   10392:	bd08      	pop	{r3, pc}
    assert(wcs);
   10394:	2300      	movs	r3, #0
   10396:	461a      	mov	r2, r3
   10398:	4619      	mov	r1, r3
   1039a:	4618      	mov	r0, r3
   1039c:	f7f8 ff12 	bl	91c4 <__assert_func>

000103a0 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
   103a0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
   103a2:	f002 faa2 	bl	128ea <dpl_cputime_get32>
   103a6:	4601      	mov	r1, r0
   103a8:	480c      	ldr	r0, [pc, #48]	; (103dc <uwb_wcs_pkg_init+0x3c>)
   103aa:	f000 fd8f 	bl	10ecc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   103ae:	2400      	movs	r4, #0
   103b0:	e000      	b.n	103b4 <uwb_wcs_pkg_init+0x14>
   103b2:	3401      	adds	r4, #1
   103b4:	2c02      	cmp	r4, #2
   103b6:	dc10      	bgt.n	103da <uwb_wcs_pkg_init+0x3a>
        udev = uwb_dev_idx_lookup(i);
   103b8:	4620      	mov	r0, r4
   103ba:	f7f8 fc5b 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   103be:	2800      	cmp	r0, #0
   103c0:	d0f7      	beq.n	103b2 <uwb_wcs_pkg_init+0x12>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   103c2:	2101      	movs	r1, #1
   103c4:	f7f8 fcdb 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   103c8:	4605      	mov	r5, r0
   103ca:	2800      	cmp	r0, #0
   103cc:	d0f1      	beq.n	103b2 <uwb_wcs_pkg_init+0x12>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
   103ce:	4601      	mov	r1, r0
   103d0:	2000      	movs	r0, #0
   103d2:	f7ff ff05 	bl	101e0 <uwb_wcs_init>
   103d6:	66a8      	str	r0, [r5, #104]	; 0x68
   103d8:	e7eb      	b.n	103b2 <uwb_wcs_pkg_init+0x12>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
   103da:	bd38      	pop	{r3, r4, r5, pc}
   103dc:	00025cd4 	.word	0x00025cd4

000103e0 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
   103e0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   103e2:	2400      	movs	r4, #0
   103e4:	e000      	b.n	103e8 <uwb_wcs_pkg_down+0x8>
   103e6:	3401      	adds	r4, #1
   103e8:	2c02      	cmp	r4, #2
   103ea:	dc12      	bgt.n	10412 <uwb_wcs_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
   103ec:	4620      	mov	r0, r4
   103ee:	f7f8 fc41 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   103f2:	2800      	cmp	r0, #0
   103f4:	d0f7      	beq.n	103e6 <uwb_wcs_pkg_down+0x6>
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
#ifdef __KERNEL__
        wcs_chrdev_destroy(i);
#endif /* __KERNEL__ */
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   103f6:	2101      	movs	r1, #1
   103f8:	f7f8 fcc1 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   103fc:	4605      	mov	r5, r0
   103fe:	2800      	cmp	r0, #0
   10400:	d0f1      	beq.n	103e6 <uwb_wcs_pkg_down+0x6>
            continue;
        }
        if (ccp->wcs) {
   10402:	6e80      	ldr	r0, [r0, #104]	; 0x68
   10404:	2800      	cmp	r0, #0
   10406:	d0ee      	beq.n	103e6 <uwb_wcs_pkg_down+0x6>
            uwb_wcs_free(ccp->wcs);
   10408:	f7ff ff0c 	bl	10224 <uwb_wcs_free>
            ccp->wcs = 0;
   1040c:	2300      	movs	r3, #0
   1040e:	66ab      	str	r3, [r5, #104]	; 0x68
   10410:	e7e9      	b.n	103e6 <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
   10412:	2000      	movs	r0, #0
   10414:	bd38      	pop	{r3, r4, r5, pc}

00010416 <calloc>:
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

void *calloc(size_t nmemb, size_t size)
{
   10416:	b538      	push	{r3, r4, r5, lr}
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
   10418:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   1041c:	4299      	cmp	r1, r3
   1041e:	d80e      	bhi.n	1043e <calloc+0x28>
   10420:	4298      	cmp	r0, r3
   10422:	d80e      	bhi.n	10442 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
   10424:	fb00 f401 	mul.w	r4, r0, r1
	ptr = malloc(size);
   10428:	4620      	mov	r0, r4
   1042a:	f000 f8b9 	bl	105a0 <malloc>
	if (ptr)
   1042e:	4605      	mov	r5, r0
   10430:	b118      	cbz	r0, 1043a <calloc+0x24>
		memset(ptr, 0, size);
   10432:	4622      	mov	r2, r4
   10434:	2100      	movs	r1, #0
   10436:	f000 f930 	bl	1069a <memset>

	return ptr;
}
   1043a:	4628      	mov	r0, r5
   1043c:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
   1043e:	2500      	movs	r5, #0
   10440:	e7fb      	b.n	1043a <calloc+0x24>
   10442:	2500      	movs	r5, #0
   10444:	e7f9      	b.n	1043a <calloc+0x24>

00010446 <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
   10446:	4684      	mov	ip, r0
   10448:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
   1044a:	681b      	ldr	r3, [r3, #0]
   1044c:	681b      	ldr	r3, [r3, #0]
   1044e:	b143      	cbz	r3, 10462 <fwrite+0x1c>
{
   10450:	b510      	push	{r4, lr}
   10452:	460c      	mov	r4, r1
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   10454:	fb01 f202 	mul.w	r2, r1, r2
   10458:	4661      	mov	r1, ip
   1045a:	4798      	blx	r3
   1045c:	fbb0 f0f4 	udiv	r0, r0, r4
}
   10460:	bd10      	pop	{r4, pc}
    if (stream->vmt->write == NULL) return 0;
   10462:	2000      	movs	r0, #0
}
   10464:	4770      	bx	lr
	...

00010468 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
   10468:	b538      	push	{r3, r4, r5, lr}
   1046a:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
   1046c:	f000 f94c 	bl	10708 <strlen>
   10470:	4602      	mov	r2, r0
   10472:	4b08      	ldr	r3, [pc, #32]	; (10494 <puts+0x2c>)
   10474:	681d      	ldr	r5, [r3, #0]
   10476:	462b      	mov	r3, r5
   10478:	2101      	movs	r1, #1
   1047a:	4620      	mov	r0, r4
   1047c:	f7ff ffe3 	bl	10446 <fwrite>
   10480:	4604      	mov	r4, r0
   10482:	462b      	mov	r3, r5
   10484:	2201      	movs	r2, #1
   10486:	4611      	mov	r1, r2
   10488:	4803      	ldr	r0, [pc, #12]	; (10498 <puts+0x30>)
   1048a:	f7ff ffdc 	bl	10446 <fwrite>
}
   1048e:	4420      	add	r0, r4
   10490:	bd38      	pop	{r3, r4, r5, pc}
   10492:	bf00      	nop
   10494:	00025d00 	.word	0x00025d00
   10498:	00026304 	.word	0x00026304

0001049c <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   1049c:	2001      	movs	r0, #1
   1049e:	4770      	bx	lr

000104a0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   104a0:	4770      	bx	lr

000104a2 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   104a2:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   104a4:	f101 0320 	add.w	r3, r1, #32
   104a8:	4293      	cmp	r3, r2
   104aa:	d816      	bhi.n	104da <__malloc_from_block+0x38>
{
   104ac:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   104ae:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   104b0:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   104b2:	2501      	movs	r5, #1
   104b4:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   104b6:	1a52      	subs	r2, r2, r1
   104b8:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   104ba:	2200      	movs	r2, #0
   104bc:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   104be:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   104c0:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   104c2:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   104c4:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   104c6:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   104c8:	6901      	ldr	r1, [r0, #16]
   104ca:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   104cc:	6942      	ldr	r2, [r0, #20]
   104ce:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   104d0:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   104d2:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   104d4:	3010      	adds	r0, #16
   104d6:	bc30      	pop	{r4, r5}
   104d8:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   104da:	2300      	movs	r3, #0
   104dc:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   104de:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   104e0:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   104e2:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   104e4:	615a      	str	r2, [r3, #20]
}
   104e6:	3010      	adds	r0, #16
   104e8:	4770      	bx	lr
	...

000104ec <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   104ec:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   104ee:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   104f0:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   104f2:	6802      	ldr	r2, [r0, #0]
   104f4:	2a01      	cmp	r2, #1
   104f6:	d00d      	beq.n	10514 <__free_block+0x28>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   104f8:	2201      	movs	r2, #1
   104fa:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   104fc:	4a13      	ldr	r2, [pc, #76]	; (1054c <__free_block+0x60>)
   104fe:	6910      	ldr	r0, [r2, #16]
   10500:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   10502:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   10504:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   10506:	691a      	ldr	r2, [r3, #16]
   10508:	6153      	str	r3, [r2, #20]
   1050a:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   1050c:	680b      	ldr	r3, [r1, #0]
   1050e:	2b01      	cmp	r3, #1
   10510:	d00b      	beq.n	1052a <__free_block+0x3e>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   10512:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   10514:	6842      	ldr	r2, [r0, #4]
   10516:	eb00 0c02 	add.w	ip, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   1051a:	459c      	cmp	ip, r3
   1051c:	d1ec      	bne.n	104f8 <__free_block+0xc>
        pah->a.size += ah->a.size;
   1051e:	685b      	ldr	r3, [r3, #4]
   10520:	441a      	add	r2, r3
   10522:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   10524:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   10526:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   10528:	e7f0      	b.n	1050c <__free_block+0x20>
        (char *)ah + ah->a.size == (char *)nah) {
   1052a:	6843      	ldr	r3, [r0, #4]
   1052c:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   1052e:	428a      	cmp	r2, r1
   10530:	d1ef      	bne.n	10512 <__free_block+0x26>
        ah->a.size += nah->a.size;
   10532:	684a      	ldr	r2, [r1, #4]
   10534:	4413      	add	r3, r2
   10536:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   10538:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1053a:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   1053c:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1053e:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   10540:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   10542:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   10544:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   10546:	60da      	str	r2, [r3, #12]
    return ah;
   10548:	e7e3      	b.n	10512 <__free_block+0x26>
   1054a:	bf00      	nop
   1054c:	20000694 	.word	0x20000694

00010550 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   10550:	2917      	cmp	r1, #23
   10552:	d91e      	bls.n	10592 <add_malloc_block+0x42>
{
   10554:	b510      	push	{r4, lr}
   10556:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   10558:	2301      	movs	r3, #1
   1055a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   1055c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   1055e:	4b0d      	ldr	r3, [pc, #52]	; (10594 <add_malloc_block+0x44>)
   10560:	681b      	ldr	r3, [r3, #0]
   10562:	4798      	blx	r3
   10564:	b1a0      	cbz	r0, 10590 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   10566:	4b0c      	ldr	r3, [pc, #48]	; (10598 <add_malloc_block+0x48>)
   10568:	68db      	ldr	r3, [r3, #12]
   1056a:	e000      	b.n	1056e <add_malloc_block+0x1e>
         pah = pah->a.prev) {
   1056c:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1056e:	681a      	ldr	r2, [r3, #0]
   10570:	2a02      	cmp	r2, #2
   10572:	d001      	beq.n	10578 <add_malloc_block+0x28>
        if (pah < fp)
   10574:	42a3      	cmp	r3, r4
   10576:	d2f9      	bcs.n	1056c <add_malloc_block+0x1c>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   10578:	689a      	ldr	r2, [r3, #8]
   1057a:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   1057c:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1057e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   10580:	68a3      	ldr	r3, [r4, #8]
   10582:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   10584:	4620      	mov	r0, r4
   10586:	f7ff ffb1 	bl	104ec <__free_block>

    malloc_unlock();
   1058a:	4b04      	ldr	r3, [pc, #16]	; (1059c <add_malloc_block+0x4c>)
   1058c:	681b      	ldr	r3, [r3, #0]
   1058e:	4798      	blx	r3
}
   10590:	bd10      	pop	{r4, pc}
   10592:	4770      	bx	lr
   10594:	200006ac 	.word	0x200006ac
   10598:	20000694 	.word	0x20000694
   1059c:	200006b0 	.word	0x200006b0

000105a0 <malloc>:
{
   105a0:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   105a2:	1e43      	subs	r3, r0, #1
   105a4:	f113 0f12 	cmn.w	r3, #18
   105a8:	d825      	bhi.n	105f6 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   105aa:	301f      	adds	r0, #31
   105ac:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   105b0:	4b13      	ldr	r3, [pc, #76]	; (10600 <malloc+0x60>)
   105b2:	681b      	ldr	r3, [r3, #0]
   105b4:	4798      	blx	r3
   105b6:	b300      	cbz	r0, 105fa <malloc+0x5a>
    void *result = NULL;
   105b8:	2500      	movs	r5, #0
   105ba:	e00d      	b.n	105d8 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   105bc:	4621      	mov	r1, r4
   105be:	f7ff ff70 	bl	104a2 <__malloc_from_block>
   105c2:	4605      	mov	r5, r0
    if (result == NULL) {
   105c4:	b995      	cbnz	r5, 105ec <malloc+0x4c>
        more_mem = _sbrk(size);
   105c6:	4620      	mov	r0, r4
   105c8:	f7f7 fdd6 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   105cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   105d0:	d00c      	beq.n	105ec <malloc+0x4c>
            add_malloc_block(more_mem, size);
   105d2:	4621      	mov	r1, r4
   105d4:	f7ff ffbc 	bl	10550 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   105d8:	4b0a      	ldr	r3, [pc, #40]	; (10604 <malloc+0x64>)
   105da:	6918      	ldr	r0, [r3, #16]
   105dc:	6803      	ldr	r3, [r0, #0]
   105de:	2b02      	cmp	r3, #2
   105e0:	d0f0      	beq.n	105c4 <malloc+0x24>
        if (fp->a.size >= size) {
   105e2:	6843      	ldr	r3, [r0, #4]
   105e4:	42a3      	cmp	r3, r4
   105e6:	d2e9      	bcs.n	105bc <malloc+0x1c>
         fp = fp->next_free) {
   105e8:	6900      	ldr	r0, [r0, #16]
   105ea:	e7f7      	b.n	105dc <malloc+0x3c>
    malloc_unlock();
   105ec:	4b06      	ldr	r3, [pc, #24]	; (10608 <malloc+0x68>)
   105ee:	681b      	ldr	r3, [r3, #0]
   105f0:	4798      	blx	r3
}
   105f2:	4628      	mov	r0, r5
   105f4:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   105f6:	2500      	movs	r5, #0
   105f8:	e7fb      	b.n	105f2 <malloc+0x52>
        return NULL;
   105fa:	2500      	movs	r5, #0
   105fc:	e7f9      	b.n	105f2 <malloc+0x52>
   105fe:	bf00      	nop
   10600:	200006ac 	.word	0x200006ac
   10604:	20000694 	.word	0x20000694
   10608:	200006b0 	.word	0x200006b0

0001060c <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   1060c:	b170      	cbz	r0, 1062c <free+0x20>
{
   1060e:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   10610:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   10614:	4b06      	ldr	r3, [pc, #24]	; (10630 <free+0x24>)
   10616:	681b      	ldr	r3, [r3, #0]
   10618:	4798      	blx	r3
   1061a:	b900      	cbnz	r0, 1061e <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   1061c:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   1061e:	4620      	mov	r0, r4
   10620:	f7ff ff64 	bl	104ec <__free_block>
    malloc_unlock();
   10624:	4b03      	ldr	r3, [pc, #12]	; (10634 <free+0x28>)
   10626:	681b      	ldr	r3, [r3, #0]
   10628:	4798      	blx	r3
   1062a:	e7f7      	b.n	1061c <free+0x10>
   1062c:	4770      	bx	lr
   1062e:	bf00      	nop
   10630:	200006ac 	.word	0x200006ac
   10634:	200006b0 	.word	0x200006b0

00010638 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   10638:	b470      	push	{r4, r5, r6}
   1063a:	f04f 0500 	mov.w	r5, #0
   1063e:	f022 0603 	bic.w	r6, r2, #3
   10642:	e005      	b.n	10650 <test1>

00010644 <loop1>:
   10644:	5943      	ldr	r3, [r0, r5]
   10646:	594c      	ldr	r4, [r1, r5]
   10648:	42a3      	cmp	r3, r4
   1064a:	d104      	bne.n	10656 <res1>
   1064c:	f105 0504 	add.w	r5, r5, #4

00010650 <test1>:
   10650:	42b5      	cmp	r5, r6
   10652:	d1f7      	bne.n	10644 <loop1>
   10654:	e00d      	b.n	10672 <test2>

00010656 <res1>:
   10656:	ba1b      	rev	r3, r3
   10658:	ba24      	rev	r4, r4
   1065a:	1b1b      	subs	r3, r3, r4
   1065c:	bf8c      	ite	hi
   1065e:	2301      	movhi	r3, #1
   10660:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   10664:	e009      	b.n	1067a <done>

00010666 <loop2>:
   10666:	5d43      	ldrb	r3, [r0, r5]
   10668:	5d4c      	ldrb	r4, [r1, r5]
   1066a:	1b1b      	subs	r3, r3, r4
   1066c:	d105      	bne.n	1067a <done>
   1066e:	f105 0501 	add.w	r5, r5, #1

00010672 <test2>:
   10672:	4295      	cmp	r5, r2
   10674:	d1f7      	bne.n	10666 <loop2>
   10676:	f04f 0300 	mov.w	r3, #0

0001067a <done>:
   1067a:	4618      	mov	r0, r3
   1067c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1067e:	4770      	bx	lr

00010680 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   10680:	e001      	b.n	10686 <test1>

00010682 <loop1>:
   10682:	588b      	ldr	r3, [r1, r2]
   10684:	5083      	str	r3, [r0, r2]

00010686 <test1>:
   10686:	3a04      	subs	r2, #4
   10688:	d5fb      	bpl.n	10682 <loop1>
   1068a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1068e:	e001      	b.n	10694 <test2>

00010690 <loop2>:
   10690:	5c8b      	ldrb	r3, [r1, r2]
   10692:	5483      	strb	r3, [r0, r2]

00010694 <test2>:
   10694:	3a01      	subs	r2, #1
   10696:	d5fb      	bpl.n	10690 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   10698:	4770      	bx	lr

0001069a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1069a:	b410      	push	{r4}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1069c:	4684      	mov	ip, r0
   1069e:	b2c9      	uxtb	r1, r1
   106a0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   106a4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   106a8:	eb1c 0302 	adds.w	r3, ip, r2
   106ac:	2403      	movs	r4, #3
   106ae:	4023      	ands	r3, r4
   106b0:	1ad3      	subs	r3, r2, r3
   106b2:	d40e      	bmi.n	106d2 <memset+0x38>
   106b4:	e002      	b.n	106bc <memset+0x22>
   106b6:	3a01      	subs	r2, #1
   106b8:	f80c 1002 	strb.w	r1, [ip, r2]
   106bc:	429a      	cmp	r2, r3
   106be:	d1fa      	bne.n	106b6 <memset+0x1c>
   106c0:	e001      	b.n	106c6 <memset+0x2c>
   106c2:	f84c 1002 	str.w	r1, [ip, r2]
   106c6:	3a04      	subs	r2, #4
   106c8:	d5fb      	bpl.n	106c2 <memset+0x28>
   106ca:	3204      	adds	r2, #4
   106cc:	e001      	b.n	106d2 <memset+0x38>
   106ce:	f80c 1002 	strb.w	r1, [ip, r2]
   106d2:	3a01      	subs	r2, #1
   106d4:	d5fb      	bpl.n	106ce <memset+0x34>
		*q++ = c;
	}
#endif

	return dst;
}
   106d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   106da:	4770      	bx	lr

000106dc <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   106dc:	2000      	movs	r0, #0
   106de:	4770      	bx	lr

000106e0 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   106e0:	b510      	push	{r4, lr}
   106e2:	4608      	mov	r0, r1
   106e4:	4614      	mov	r4, r2
    console_write(bp, n);
   106e6:	4611      	mov	r1, r2
   106e8:	f003 f96c 	bl	139c4 <console_write>
    return n;
}
   106ec:	4620      	mov	r0, r4
   106ee:	bd10      	pop	{r4, pc}

000106f0 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   106f0:	4684      	mov	ip, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   106f2:	f89c 2000 	ldrb.w	r2, [ip]
   106f6:	f10c 0c01 	add.w	ip, ip, #1
   106fa:	7808      	ldrb	r0, [r1, #0]
   106fc:	3101      	adds	r1, #1
		if (d || !ch)
   106fe:	1a10      	subs	r0, r2, r0
   10700:	d101      	bne.n	10706 <strcmp+0x16>
   10702:	2a00      	cmp	r2, #0
   10704:	d1f5      	bne.n	106f2 <strcmp+0x2>
			break;
	}

	return d;
}
   10706:	4770      	bx	lr

00010708 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   10708:	4603      	mov	r3, r0
	while (*ss)
   1070a:	e000      	b.n	1070e <strlen+0x6>
		ss++;
   1070c:	3301      	adds	r3, #1
	while (*ss)
   1070e:	781a      	ldrb	r2, [r3, #0]
   10710:	2a00      	cmp	r2, #0
   10712:	d1fb      	bne.n	1070c <strlen+0x4>
	return ss - s;
}
   10714:	1a18      	subs	r0, r3, r0
   10716:	4770      	bx	lr

00010718 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   10718:	b510      	push	{r4, lr}
   1071a:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   1071c:	b132      	cbz	r2, 1072c <strncpy+0x14>
		n--;
   1071e:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   10720:	f811 3b01 	ldrb.w	r3, [r1], #1
   10724:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   10728:	2b00      	cmp	r3, #0
   1072a:	d1f7      	bne.n	1071c <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   1072c:	2100      	movs	r1, #0
   1072e:	f7ff ffb4 	bl	1069a <memset>

	return dst;
}
   10732:	4620      	mov	r0, r4
   10734:	bd10      	pop	{r4, pc}

00010736 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   10736:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   10738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1073c:	f000 fc2c 	bl	10f98 <strntoumax>
}
   10740:	bd08      	pop	{r3, pc}

00010742 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   10742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10746:	b085      	sub	sp, #20
   10748:	4606      	mov	r6, r0
   1074a:	460f      	mov	r7, r1
   1074c:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1074e:	6853      	ldr	r3, [r2, #4]
   10750:	9302      	str	r3, [sp, #8]
    unsigned long long int d = 1;
   10752:	2501      	movs	r5, #1
   10754:	2400      	movs	r4, #0
    while (num / d >= p->base)
   10756:	e004      	b.n	10762 <ui2a+0x20>
        d *= p->base;
   10758:	fb04 f303 	mul.w	r3, r4, r3
   1075c:	fba5 5402 	umull	r5, r4, r5, r2
   10760:	441c      	add	r4, r3
    while (num / d >= p->base)
   10762:	462a      	mov	r2, r5
   10764:	4623      	mov	r3, r4
   10766:	4630      	mov	r0, r6
   10768:	4639      	mov	r1, r7
   1076a:	f013 fbff 	bl	23f6c <__aeabi_uldivmod>
   1076e:	f899 3003 	ldrb.w	r3, [r9, #3]
   10772:	461a      	mov	r2, r3
   10774:	4298      	cmp	r0, r3
   10776:	f171 0100 	sbcs.w	r1, r1, #0
   1077a:	d2ed      	bcs.n	10758 <ui2a+0x16>
    int n = 0;
   1077c:	f04f 0a00 	mov.w	sl, #0
   10780:	e00b      	b.n	1079a <ui2a+0x58>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   10782:	2230      	movs	r2, #48	; 0x30
   10784:	9b02      	ldr	r3, [sp, #8]
   10786:	4490      	add	r8, r2
   10788:	f803 8b01 	strb.w	r8, [r3], #1
            ++n;
   1078c:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   10790:	9302      	str	r3, [sp, #8]
   10792:	4605      	mov	r5, r0
   10794:	460c      	mov	r4, r1
   10796:	9e00      	ldr	r6, [sp, #0]
   10798:	9f01      	ldr	r7, [sp, #4]
    while (d != 0) {
   1079a:	ea55 0304 	orrs.w	r3, r5, r4
   1079e:	d031      	beq.n	10804 <ui2a+0xc2>
        unsigned long long  dgt = num / d;
   107a0:	462a      	mov	r2, r5
   107a2:	4623      	mov	r3, r4
   107a4:	4630      	mov	r0, r6
   107a6:	4639      	mov	r1, r7
   107a8:	f013 fbe0 	bl	23f6c <__aeabi_uldivmod>
   107ac:	4680      	mov	r8, r0
   107ae:	9103      	str	r1, [sp, #12]
        num %= d;
   107b0:	462a      	mov	r2, r5
   107b2:	4623      	mov	r3, r4
   107b4:	4630      	mov	r0, r6
   107b6:	4639      	mov	r1, r7
   107b8:	f013 fbd8 	bl	23f6c <__aeabi_uldivmod>
   107bc:	9200      	str	r2, [sp, #0]
   107be:	9301      	str	r3, [sp, #4]
        d /= p->base;
   107c0:	f899 b003 	ldrb.w	fp, [r9, #3]
   107c4:	465a      	mov	r2, fp
   107c6:	2300      	movs	r3, #0
   107c8:	4628      	mov	r0, r5
   107ca:	4621      	mov	r1, r4
   107cc:	f013 fbce 	bl	23f6c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   107d0:	f1ba 0f00 	cmp.w	sl, #0
   107d4:	d107      	bne.n	107e6 <ui2a+0xa4>
   107d6:	42ae      	cmp	r6, r5
   107d8:	eb77 0304 	sbcs.w	r3, r7, r4
   107dc:	d203      	bcs.n	107e6 <ui2a+0xa4>
   107de:	455d      	cmp	r5, fp
   107e0:	f174 0300 	sbcs.w	r3, r4, #0
   107e4:	d2d5      	bcs.n	10792 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   107e6:	f1b8 0f0a 	cmp.w	r8, #10
   107ea:	9b03      	ldr	r3, [sp, #12]
   107ec:	f173 0300 	sbcs.w	r3, r3, #0
   107f0:	d3c7      	bcc.n	10782 <ui2a+0x40>
   107f2:	f899 3002 	ldrb.w	r3, [r9, #2]
   107f6:	f013 0f04 	tst.w	r3, #4
   107fa:	d001      	beq.n	10800 <ui2a+0xbe>
   107fc:	2237      	movs	r2, #55	; 0x37
   107fe:	e7c1      	b.n	10784 <ui2a+0x42>
   10800:	2257      	movs	r2, #87	; 0x57
   10802:	e7bf      	b.n	10784 <ui2a+0x42>
        }
    }
    *bf = 0;
   10804:	2300      	movs	r3, #0
   10806:	9a02      	ldr	r2, [sp, #8]
   10808:	7013      	strb	r3, [r2, #0]
}
   1080a:	b005      	add	sp, #20
   1080c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010810 <i2a>:

static void i2a(long long int num, struct param *p)
{
   10810:	b508      	push	{r3, lr}
    if (num < 0) {
   10812:	2900      	cmp	r1, #0
   10814:	db02      	blt.n	1081c <i2a+0xc>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   10816:	f7ff ff94 	bl	10742 <ui2a>
}
   1081a:	bd08      	pop	{r3, pc}
        num = -num;
   1081c:	4240      	negs	r0, r0
   1081e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   10822:	7893      	ldrb	r3, [r2, #2]
   10824:	f043 0301 	orr.w	r3, r3, #1
   10828:	7093      	strb	r3, [r2, #2]
   1082a:	e7f4      	b.n	10816 <i2a+0x6>

0001082c <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1082c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10830:	b2db      	uxtb	r3, r3
   10832:	2b09      	cmp	r3, #9
   10834:	d90b      	bls.n	1084e <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   10836:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1083a:	b2db      	uxtb	r3, r3
   1083c:	2b05      	cmp	r3, #5
   1083e:	d908      	bls.n	10852 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   10840:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   10844:	b2db      	uxtb	r3, r3
   10846:	2b05      	cmp	r3, #5
   10848:	d805      	bhi.n	10856 <a2d+0x2a>
        return ch - 'A' + 10;
   1084a:	3837      	subs	r0, #55	; 0x37
   1084c:	4770      	bx	lr
        return ch - '0';
   1084e:	3830      	subs	r0, #48	; 0x30
   10850:	4770      	bx	lr
        return ch - 'a' + 10;
   10852:	3857      	subs	r0, #87	; 0x57
   10854:	4770      	bx	lr
    else
        return -1;
   10856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1085a:	4770      	bx	lr

0001085c <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10860:	4604      	mov	r4, r0
   10862:	460f      	mov	r7, r1
   10864:	4615      	mov	r5, r2
   10866:	4698      	mov	r8, r3
    const char *p = *src;
   10868:	f8d1 9000 	ldr.w	r9, [r1]
    int num = 0;
   1086c:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1086e:	e005      	b.n	1087c <a2i+0x20>
        if (digit > base)
            break;
        num = num * base + digit;
   10870:	fb05 0606 	mla	r6, r5, r6, r0
        ch = *p++;
   10874:	46cc      	mov	ip, r9
   10876:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1087a:	46e1      	mov	r9, ip
    while ((digit = a2d(ch)) >= 0) {
   1087c:	4620      	mov	r0, r4
   1087e:	f7ff ffd5 	bl	1082c <a2d>
   10882:	2800      	cmp	r0, #0
   10884:	db01      	blt.n	1088a <a2i+0x2e>
        if (digit > base)
   10886:	42a8      	cmp	r0, r5
   10888:	ddf2      	ble.n	10870 <a2i+0x14>
    }
    *src = p;
   1088a:	f8c7 9000 	str.w	r9, [r7]
    *nump = num;
   1088e:	f888 6000 	strb.w	r6, [r8]
    return ch;
}
   10892:	4620      	mov	r0, r4
   10894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010898 <putf>:

static int putf(FILE *putp, char c)
{
   10898:	b500      	push	{lr}
   1089a:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1089c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   108a0:	6803      	ldr	r3, [r0, #0]
   108a2:	681b      	ldr	r3, [r3, #0]
   108a4:	b143      	cbz	r3, 108b8 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   108a6:	2201      	movs	r2, #1
   108a8:	f10d 0107 	add.w	r1, sp, #7
   108ac:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   108ae:	2801      	cmp	r0, #1
   108b0:	d102      	bne.n	108b8 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   108b2:	b003      	add	sp, #12
   108b4:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   108b8:	2000      	movs	r0, #0
   108ba:	e7fa      	b.n	108b2 <putf+0x1a>

000108bc <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   108bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108c0:	4607      	mov	r7, r0
   108c2:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   108c4:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   108c6:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   108c8:	e000      	b.n	108cc <putchw+0x10>
        n--;
   108ca:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   108cc:	f813 2b01 	ldrb.w	r2, [r3], #1
   108d0:	b10a      	cbz	r2, 108d6 <putchw+0x1a>
   108d2:	2c00      	cmp	r4, #0
   108d4:	dcf9      	bgt.n	108ca <putchw+0xe>
    if (p->sign)
   108d6:	f898 3002 	ldrb.w	r3, [r8, #2]
   108da:	f013 0f01 	tst.w	r3, #1
   108de:	d000      	beq.n	108e2 <putchw+0x26>
        n--;
   108e0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   108e2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   108e6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   108ea:	b29b      	uxth	r3, r3
   108ec:	f241 0202 	movw	r2, #4098	; 0x1002
   108f0:	4293      	cmp	r3, r2
   108f2:	d021      	beq.n	10938 <putchw+0x7c>
        n -= 2;
    else if (p->alt && p->base == 8)
   108f4:	f640 0202 	movw	r2, #2050	; 0x802
   108f8:	4293      	cmp	r3, r2
   108fa:	d01f      	beq.n	1093c <putchw+0x80>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   108fc:	f8d8 3000 	ldr.w	r3, [r8]
   10900:	4e36      	ldr	r6, [pc, #216]	; (109dc <putchw+0x120>)
   10902:	401e      	ands	r6, r3
   10904:	b316      	cbz	r6, 1094c <putchw+0x90>
    unsigned written = 0;
   10906:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   10908:	f898 3002 	ldrb.w	r3, [r8, #2]
   1090c:	f013 0f01 	tst.w	r3, #1
   10910:	d121      	bne.n	10956 <putchw+0x9a>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   10912:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   10916:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1091a:	b29b      	uxth	r3, r3
   1091c:	f241 0202 	movw	r2, #4098	; 0x1002
   10920:	4293      	cmp	r3, r2
   10922:	d01e      	beq.n	10962 <putchw+0xa6>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   10924:	f640 0202 	movw	r2, #2050	; 0x802
   10928:	4293      	cmp	r3, r2
   1092a:	d02c      	beq.n	10986 <putchw+0xca>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1092c:	f898 3001 	ldrb.w	r3, [r8, #1]
   10930:	bbab      	cbnz	r3, 1099e <putchw+0xe2>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   10932:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   10936:	e03b      	b.n	109b0 <putchw+0xf4>
        n -= 2;
   10938:	3c02      	subs	r4, #2
   1093a:	e7df      	b.n	108fc <putchw+0x40>
        n--;
   1093c:	3c01      	subs	r4, #1
   1093e:	e7dd      	b.n	108fc <putchw+0x40>
            written += putf(putp, ' ');
   10940:	2120      	movs	r1, #32
   10942:	4638      	mov	r0, r7
   10944:	f7ff ffa8 	bl	10898 <putf>
   10948:	4406      	add	r6, r0
        while (n-- > 0)
   1094a:	462c      	mov	r4, r5
   1094c:	1e65      	subs	r5, r4, #1
   1094e:	2c00      	cmp	r4, #0
   10950:	dcf6      	bgt.n	10940 <putchw+0x84>
   10952:	462c      	mov	r4, r5
   10954:	e7d8      	b.n	10908 <putchw+0x4c>
        written += putf(putp, '-');
   10956:	212d      	movs	r1, #45	; 0x2d
   10958:	4638      	mov	r0, r7
   1095a:	f7ff ff9d 	bl	10898 <putf>
   1095e:	4406      	add	r6, r0
   10960:	e7d7      	b.n	10912 <putchw+0x56>
        written += putf(putp, '0');
   10962:	2130      	movs	r1, #48	; 0x30
   10964:	4638      	mov	r0, r7
   10966:	f7ff ff97 	bl	10898 <putf>
   1096a:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1096c:	f898 3002 	ldrb.w	r3, [r8, #2]
   10970:	f013 0f04 	tst.w	r3, #4
   10974:	d005      	beq.n	10982 <putchw+0xc6>
   10976:	2158      	movs	r1, #88	; 0x58
   10978:	4638      	mov	r0, r7
   1097a:	f7ff ff8d 	bl	10898 <putf>
   1097e:	4406      	add	r6, r0
   10980:	e7d4      	b.n	1092c <putchw+0x70>
   10982:	2178      	movs	r1, #120	; 0x78
   10984:	e7f8      	b.n	10978 <putchw+0xbc>
        written += putf(putp, '0');
   10986:	2130      	movs	r1, #48	; 0x30
   10988:	4638      	mov	r0, r7
   1098a:	f7ff ff85 	bl	10898 <putf>
   1098e:	4406      	add	r6, r0
   10990:	e7cc      	b.n	1092c <putchw+0x70>
            written += putf(putp, '0');
   10992:	2130      	movs	r1, #48	; 0x30
   10994:	4638      	mov	r0, r7
   10996:	f7ff ff7f 	bl	10898 <putf>
   1099a:	4406      	add	r6, r0
        while (n-- > 0)
   1099c:	462c      	mov	r4, r5
   1099e:	1e65      	subs	r5, r4, #1
   109a0:	2c00      	cmp	r4, #0
   109a2:	dcf6      	bgt.n	10992 <putchw+0xd6>
   109a4:	462c      	mov	r4, r5
   109a6:	e7c4      	b.n	10932 <putchw+0x76>
        written += putf(putp, ch);
   109a8:	4638      	mov	r0, r7
   109aa:	f7ff ff75 	bl	10898 <putf>
   109ae:	4406      	add	r6, r0
    while ((ch = *bf++))
   109b0:	f815 1b01 	ldrb.w	r1, [r5], #1
   109b4:	2900      	cmp	r1, #0
   109b6:	d1f7      	bne.n	109a8 <putchw+0xec>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   109b8:	f898 3002 	ldrb.w	r3, [r8, #2]
   109bc:	f013 0f08 	tst.w	r3, #8
   109c0:	d108      	bne.n	109d4 <putchw+0x118>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   109c2:	4630      	mov	r0, r6
   109c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            written += putf(putp, ' ');
   109c8:	2120      	movs	r1, #32
   109ca:	4638      	mov	r0, r7
   109cc:	f7ff ff64 	bl	10898 <putf>
   109d0:	4406      	add	r6, r0
        while (n-- > 0)
   109d2:	462c      	mov	r4, r5
   109d4:	1e65      	subs	r5, r4, #1
   109d6:	2c00      	cmp	r4, #0
   109d8:	dcf6      	bgt.n	109c8 <putchw+0x10c>
   109da:	e7f2      	b.n	109c2 <putchw+0x106>
   109dc:	0008ff00 	.word	0x0008ff00

000109e0 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   109e0:	b160      	cbz	r0, 109fc <intarg+0x1c>
   109e2:	2801      	cmp	r0, #1
   109e4:	d018      	beq.n	10a18 <intarg+0x38>
        }
        break;

    case 2:
    default:
        if (sign) {
   109e6:	b329      	cbz	r1, 10a34 <intarg+0x54>
            val = va_arg(*va, long long);
   109e8:	6813      	ldr	r3, [r2, #0]
   109ea:	3307      	adds	r3, #7
   109ec:	f023 0307 	bic.w	r3, r3, #7
   109f0:	f103 0108 	add.w	r1, r3, #8
   109f4:	6011      	str	r1, [r2, #0]
   109f6:	6818      	ldr	r0, [r3, #0]
   109f8:	6859      	ldr	r1, [r3, #4]
   109fa:	4770      	bx	lr
        if (sign) {
   109fc:	b131      	cbz	r1, 10a0c <intarg+0x2c>
            val = va_arg(*va, int);
   109fe:	6813      	ldr	r3, [r2, #0]
   10a00:	1d19      	adds	r1, r3, #4
   10a02:	6011      	str	r1, [r2, #0]
   10a04:	6819      	ldr	r1, [r3, #0]
   10a06:	4608      	mov	r0, r1
   10a08:	17c9      	asrs	r1, r1, #31
   10a0a:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   10a0c:	6813      	ldr	r3, [r2, #0]
   10a0e:	1d19      	adds	r1, r3, #4
   10a10:	6011      	str	r1, [r2, #0]
   10a12:	6818      	ldr	r0, [r3, #0]
   10a14:	2100      	movs	r1, #0
   10a16:	4770      	bx	lr
        if (sign) {
   10a18:	b131      	cbz	r1, 10a28 <intarg+0x48>
            val = va_arg(*va, long);
   10a1a:	6813      	ldr	r3, [r2, #0]
   10a1c:	1d19      	adds	r1, r3, #4
   10a1e:	6011      	str	r1, [r2, #0]
   10a20:	6819      	ldr	r1, [r3, #0]
   10a22:	4608      	mov	r0, r1
   10a24:	17c9      	asrs	r1, r1, #31
   10a26:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   10a28:	6813      	ldr	r3, [r2, #0]
   10a2a:	1d19      	adds	r1, r3, #4
   10a2c:	6011      	str	r1, [r2, #0]
   10a2e:	6818      	ldr	r0, [r3, #0]
   10a30:	2100      	movs	r1, #0
   10a32:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   10a34:	6813      	ldr	r3, [r2, #0]
   10a36:	3307      	adds	r3, #7
   10a38:	f023 0307 	bic.w	r3, r3, #7
   10a3c:	f103 0108 	add.w	r1, r3, #8
   10a40:	6011      	str	r1, [r2, #0]
   10a42:	6818      	ldr	r0, [r3, #0]
   10a44:	6859      	ldr	r1, [r3, #4]
        }
        break;
    }

    return val;
}
   10a46:	4770      	bx	lr

00010a48 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   10a48:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   10a4c:	b08a      	sub	sp, #40	; 0x28
   10a4e:	4606      	mov	r6, r0
   10a50:	9101      	str	r1, [sp, #4]
   10a52:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   10a54:	ab02      	add	r3, sp, #8
   10a56:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   10a58:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   10a5a:	9b01      	ldr	r3, [sp, #4]
   10a5c:	1c5a      	adds	r2, r3, #1
   10a5e:	9201      	str	r2, [sp, #4]
   10a60:	7819      	ldrb	r1, [r3, #0]
   10a62:	2900      	cmp	r1, #0
   10a64:	f000 8227 	beq.w	10eb6 <tfp_format+0x46e>
        if (ch != '%') {
   10a68:	2925      	cmp	r1, #37	; 0x25
   10a6a:	d004      	beq.n	10a76 <tfp_format+0x2e>
            written += putf(putp, ch);
   10a6c:	4630      	mov	r0, r6
   10a6e:	f7ff ff13 	bl	10898 <putf>
   10a72:	4405      	add	r5, r0
   10a74:	e7f1      	b.n	10a5a <tfp_format+0x12>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   10a76:	2300      	movs	r3, #0
   10a78:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
            p.alt = 0;
   10a7c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10a80:	f363 0241 	bfi	r2, r3, #1, #1
   10a84:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.width = 0;
   10a88:	f88d 3020 	strb.w	r3, [sp, #32]
            p.sign = 0;
   10a8c:	b2d2      	uxtb	r2, r2
   10a8e:	f363 0200 	bfi	r2, r3, #0, #1
   10a92:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.left = 0;
   10a96:	b2d2      	uxtb	r2, r2
   10a98:	f363 02c3 	bfi	r2, r3, #3, #1
   10a9c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.uc = 0;
   10aa0:	b2d2      	uxtb	r2, r2
   10aa2:	f363 0282 	bfi	r2, r3, #2, #1
   10aa6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   10aaa:	9b01      	ldr	r3, [sp, #4]
   10aac:	1c5a      	adds	r2, r3, #1
   10aae:	9201      	str	r2, [sp, #4]
   10ab0:	781c      	ldrb	r4, [r3, #0]
   10ab2:	b144      	cbz	r4, 10ac6 <tfp_format+0x7e>
                switch (ch) {
   10ab4:	2c2d      	cmp	r4, #45	; 0x2d
   10ab6:	f000 80de 	beq.w	10c76 <tfp_format+0x22e>
   10aba:	2c30      	cmp	r4, #48	; 0x30
   10abc:	f000 80ca 	beq.w	10c54 <tfp_format+0x20c>
   10ac0:	2c23      	cmp	r4, #35	; 0x23
   10ac2:	f000 80d1 	beq.w	10c68 <tfp_format+0x220>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   10ac6:	2c2a      	cmp	r4, #42	; 0x2a
   10ac8:	f000 80df 	beq.w	10c8a <tfp_format+0x242>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   10acc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10ad0:	b2db      	uxtb	r3, r3
   10ad2:	2b09      	cmp	r3, #9
   10ad4:	f240 80ed 	bls.w	10cb2 <tfp_format+0x26a>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   10ad8:	2c6c      	cmp	r4, #108	; 0x6c
   10ada:	f000 80f2 	beq.w	10cc2 <tfp_format+0x27a>
            lng = 0;
   10ade:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   10ae0:	2c7a      	cmp	r4, #122	; 0x7a
   10ae2:	f000 80fb 	beq.w	10cdc <tfp_format+0x294>
                ch = *(fmt++);
            }

            switch (ch) {
   10ae6:	2c00      	cmp	r4, #0
   10ae8:	f000 81e5 	beq.w	10eb6 <tfp_format+0x46e>
   10aec:	2c78      	cmp	r4, #120	; 0x78
   10aee:	d8b4      	bhi.n	10a5a <tfp_format+0x12>
   10af0:	2c25      	cmp	r4, #37	; 0x25
   10af2:	d3b2      	bcc.n	10a5a <tfp_format+0x12>
   10af4:	f1a4 0325 	sub.w	r3, r4, #37	; 0x25
   10af8:	2b53      	cmp	r3, #83	; 0x53
   10afa:	d8ae      	bhi.n	10a5a <tfp_format+0x12>
   10afc:	a201      	add	r2, pc, #4	; (adr r2, 10b04 <tfp_format+0xbc>)
   10afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10b02:	bf00      	nop
   10b04:	00010eab 	.word	0x00010eab
   10b08:	00010a5b 	.word	0x00010a5b
   10b0c:	00010a5b 	.word	0x00010a5b
   10b10:	00010a5b 	.word	0x00010a5b
   10b14:	00010a5b 	.word	0x00010a5b
   10b18:	00010a5b 	.word	0x00010a5b
   10b1c:	00010a5b 	.word	0x00010a5b
   10b20:	00010a5b 	.word	0x00010a5b
   10b24:	00010a5b 	.word	0x00010a5b
   10b28:	00010a5b 	.word	0x00010a5b
   10b2c:	00010a5b 	.word	0x00010a5b
   10b30:	00010a5b 	.word	0x00010a5b
   10b34:	00010a5b 	.word	0x00010a5b
   10b38:	00010a5b 	.word	0x00010a5b
   10b3c:	00010a5b 	.word	0x00010a5b
   10b40:	00010a5b 	.word	0x00010a5b
   10b44:	00010a5b 	.word	0x00010a5b
   10b48:	00010a5b 	.word	0x00010a5b
   10b4c:	00010a5b 	.word	0x00010a5b
   10b50:	00010a5b 	.word	0x00010a5b
   10b54:	00010a5b 	.word	0x00010a5b
   10b58:	00010a5b 	.word	0x00010a5b
   10b5c:	00010a5b 	.word	0x00010a5b
   10b60:	00010a5b 	.word	0x00010a5b
   10b64:	00010a5b 	.word	0x00010a5b
   10b68:	00010a5b 	.word	0x00010a5b
   10b6c:	00010a5b 	.word	0x00010a5b
   10b70:	00010a5b 	.word	0x00010a5b
   10b74:	00010a5b 	.word	0x00010a5b
   10b78:	00010a5b 	.word	0x00010a5b
   10b7c:	00010a5b 	.word	0x00010a5b
   10b80:	00010a5b 	.word	0x00010a5b
   10b84:	00010a5b 	.word	0x00010a5b
   10b88:	00010a5b 	.word	0x00010a5b
   10b8c:	00010a5b 	.word	0x00010a5b
   10b90:	00010a5b 	.word	0x00010a5b
   10b94:	00010a5b 	.word	0x00010a5b
   10b98:	00010a5b 	.word	0x00010a5b
   10b9c:	00010a5b 	.word	0x00010a5b
   10ba0:	00010a5b 	.word	0x00010a5b
   10ba4:	00010a5b 	.word	0x00010a5b
   10ba8:	00010a5b 	.word	0x00010a5b
   10bac:	00010a5b 	.word	0x00010a5b
   10bb0:	00010a5b 	.word	0x00010a5b
   10bb4:	00010a5b 	.word	0x00010a5b
   10bb8:	00010a5b 	.word	0x00010a5b
   10bbc:	00010a5b 	.word	0x00010a5b
   10bc0:	00010a5b 	.word	0x00010a5b
   10bc4:	00010a5b 	.word	0x00010a5b
   10bc8:	00010a5b 	.word	0x00010a5b
   10bcc:	00010a5b 	.word	0x00010a5b
   10bd0:	00010d27 	.word	0x00010d27
   10bd4:	00010a5b 	.word	0x00010a5b
   10bd8:	00010a5b 	.word	0x00010a5b
   10bdc:	00010a5b 	.word	0x00010a5b
   10be0:	00010a5b 	.word	0x00010a5b
   10be4:	00010a5b 	.word	0x00010a5b
   10be8:	00010a5b 	.word	0x00010a5b
   10bec:	00010a5b 	.word	0x00010a5b
   10bf0:	00010a5b 	.word	0x00010a5b
   10bf4:	00010a5b 	.word	0x00010a5b
   10bf8:	00010a5b 	.word	0x00010a5b
   10bfc:	00010dbd 	.word	0x00010dbd
   10c00:	00010d07 	.word	0x00010d07
   10c04:	00010a5b 	.word	0x00010a5b
   10c08:	00010de9 	.word	0x00010de9
   10c0c:	00010a5b 	.word	0x00010a5b
   10c10:	00010a5b 	.word	0x00010a5b
   10c14:	00010d07 	.word	0x00010d07
   10c18:	00010a5b 	.word	0x00010a5b
   10c1c:	00010a5b 	.word	0x00010a5b
   10c20:	00010a5b 	.word	0x00010a5b
   10c24:	00010a5b 	.word	0x00010a5b
   10c28:	00010a5b 	.word	0x00010a5b
   10c2c:	00010d5b 	.word	0x00010d5b
   10c30:	00010d7b 	.word	0x00010d7b
   10c34:	00010a5b 	.word	0x00010a5b
   10c38:	00010a5b 	.word	0x00010a5b
   10c3c:	00010dcf 	.word	0x00010dcf
   10c40:	00010a5b 	.word	0x00010a5b
   10c44:	00010ce7 	.word	0x00010ce7
   10c48:	00010a5b 	.word	0x00010a5b
   10c4c:	00010a5b 	.word	0x00010a5b
   10c50:	00010d27 	.word	0x00010d27
                    if (!p.left) {
   10c54:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10c58:	f013 0f08 	tst.w	r3, #8
   10c5c:	f47f af25 	bne.w	10aaa <tfp_format+0x62>
                        p.lz = 1;
   10c60:	2301      	movs	r3, #1
   10c62:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   10c66:	e720      	b.n	10aaa <tfp_format+0x62>
                    p.alt = 1;
   10c68:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10c6c:	f043 0302 	orr.w	r3, r3, #2
   10c70:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   10c74:	e719      	b.n	10aaa <tfp_format+0x62>
                    p.left = 1;
   10c76:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10c7a:	f043 0308 	orr.w	r3, r3, #8
   10c7e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   10c82:	2300      	movs	r3, #0
   10c84:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   10c88:	e70f      	b.n	10aaa <tfp_format+0x62>
                i = intarg(0, 1, &va);
   10c8a:	466a      	mov	r2, sp
   10c8c:	2101      	movs	r1, #1
   10c8e:	2000      	movs	r0, #0
   10c90:	f7ff fea6 	bl	109e0 <intarg>
                if (i > UCHAR_MAX) {
   10c94:	28ff      	cmp	r0, #255	; 0xff
   10c96:	dd07      	ble.n	10ca8 <tfp_format+0x260>
                    p.width = UCHAR_MAX;
   10c98:	23ff      	movs	r3, #255	; 0xff
   10c9a:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   10c9e:	9b01      	ldr	r3, [sp, #4]
   10ca0:	1c5a      	adds	r2, r3, #1
   10ca2:	9201      	str	r2, [sp, #4]
   10ca4:	781c      	ldrb	r4, [r3, #0]
   10ca6:	e717      	b.n	10ad8 <tfp_format+0x90>
                } else if (i > 0) {
   10ca8:	2800      	cmp	r0, #0
   10caa:	ddf8      	ble.n	10c9e <tfp_format+0x256>
                    p.width = i;
   10cac:	f88d 0020 	strb.w	r0, [sp, #32]
   10cb0:	e7f5      	b.n	10c9e <tfp_format+0x256>
                ch = a2i(ch, &fmt, 10, &(p.width));
   10cb2:	ab08      	add	r3, sp, #32
   10cb4:	220a      	movs	r2, #10
   10cb6:	a901      	add	r1, sp, #4
   10cb8:	4620      	mov	r0, r4
   10cba:	f7ff fdcf 	bl	1085c <a2i>
   10cbe:	4604      	mov	r4, r0
   10cc0:	e70a      	b.n	10ad8 <tfp_format+0x90>
                ch = *(fmt++);
   10cc2:	9b01      	ldr	r3, [sp, #4]
   10cc4:	1c5a      	adds	r2, r3, #1
   10cc6:	9201      	str	r2, [sp, #4]
   10cc8:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   10cca:	2c6c      	cmp	r4, #108	; 0x6c
   10ccc:	d001      	beq.n	10cd2 <tfp_format+0x28a>
                lng = 1;
   10cce:	2001      	movs	r0, #1
   10cd0:	e706      	b.n	10ae0 <tfp_format+0x98>
                    ch = *(fmt++);
   10cd2:	1c9a      	adds	r2, r3, #2
   10cd4:	9201      	str	r2, [sp, #4]
   10cd6:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   10cd8:	2002      	movs	r0, #2
   10cda:	e701      	b.n	10ae0 <tfp_format+0x98>
                ch = *(fmt++);
   10cdc:	9b01      	ldr	r3, [sp, #4]
   10cde:	1c5a      	adds	r2, r3, #1
   10ce0:	9201      	str	r2, [sp, #4]
   10ce2:	781c      	ldrb	r4, [r3, #0]
   10ce4:	e6ff      	b.n	10ae6 <tfp_format+0x9e>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
   10ce6:	230a      	movs	r3, #10
   10ce8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   10cec:	466a      	mov	r2, sp
   10cee:	2100      	movs	r1, #0
   10cf0:	f7ff fe76 	bl	109e0 <intarg>
   10cf4:	aa08      	add	r2, sp, #32
   10cf6:	f7ff fd24 	bl	10742 <ui2a>
                written += putchw(putp, &p);
   10cfa:	a908      	add	r1, sp, #32
   10cfc:	4630      	mov	r0, r6
   10cfe:	f7ff fddd 	bl	108bc <putchw>
   10d02:	4405      	add	r5, r0
                break;
   10d04:	e6a9      	b.n	10a5a <tfp_format+0x12>
            case 'd':
            case 'i':
                p.base = 10;
   10d06:	230a      	movs	r3, #10
   10d08:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   10d0c:	466a      	mov	r2, sp
   10d0e:	2101      	movs	r1, #1
   10d10:	f7ff fe66 	bl	109e0 <intarg>
   10d14:	aa08      	add	r2, sp, #32
   10d16:	f7ff fd7b 	bl	10810 <i2a>
                written += putchw(putp, &p);
   10d1a:	a908      	add	r1, sp, #32
   10d1c:	4630      	mov	r0, r6
   10d1e:	f7ff fdcd 	bl	108bc <putchw>
   10d22:	4405      	add	r5, r0
                break;
   10d24:	e699      	b.n	10a5a <tfp_format+0x12>
            case 'x':
            case 'X':
                p.base = 16;
   10d26:	2310      	movs	r3, #16
   10d28:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   10d2c:	2c58      	cmp	r4, #88	; 0x58
   10d2e:	bf14      	ite	ne
   10d30:	2400      	movne	r4, #0
   10d32:	2401      	moveq	r4, #1
   10d34:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10d38:	f364 0382 	bfi	r3, r4, #2, #1
   10d3c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   10d40:	466a      	mov	r2, sp
   10d42:	2100      	movs	r1, #0
   10d44:	f7ff fe4c 	bl	109e0 <intarg>
   10d48:	aa08      	add	r2, sp, #32
   10d4a:	f7ff fcfa 	bl	10742 <ui2a>
                written += putchw(putp, &p);
   10d4e:	a908      	add	r1, sp, #32
   10d50:	4630      	mov	r0, r6
   10d52:	f7ff fdb3 	bl	108bc <putchw>
   10d56:	4405      	add	r5, r0
                break;
   10d58:	e67f      	b.n	10a5a <tfp_format+0x12>
            case 'o':
                p.base = 8;
   10d5a:	2308      	movs	r3, #8
   10d5c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   10d60:	466a      	mov	r2, sp
   10d62:	2100      	movs	r1, #0
   10d64:	f7ff fe3c 	bl	109e0 <intarg>
   10d68:	aa08      	add	r2, sp, #32
   10d6a:	f7ff fcea 	bl	10742 <ui2a>
                written += putchw(putp, &p);
   10d6e:	a908      	add	r1, sp, #32
   10d70:	4630      	mov	r0, r6
   10d72:	f7ff fda3 	bl	108bc <putchw>
   10d76:	4405      	add	r5, r0
                break;
   10d78:	e66f      	b.n	10a5a <tfp_format+0x12>
            case 'p':
                v = va_arg(va, void *);
   10d7a:	9b00      	ldr	r3, [sp, #0]
   10d7c:	1d1a      	adds	r2, r3, #4
   10d7e:	9200      	str	r2, [sp, #0]
   10d80:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   10d82:	2310      	movs	r3, #16
   10d84:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   10d88:	aa08      	add	r2, sp, #32
   10d8a:	2100      	movs	r1, #0
   10d8c:	f7ff fcd9 	bl	10742 <ui2a>
                p.width = 2 * sizeof(void*);
   10d90:	2308      	movs	r3, #8
   10d92:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   10d96:	2301      	movs	r3, #1
   10d98:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   10d9c:	2130      	movs	r1, #48	; 0x30
   10d9e:	4630      	mov	r0, r6
   10da0:	f7ff fd7a 	bl	10898 <putf>
   10da4:	4405      	add	r5, r0
                written += putf(putp, 'x');
   10da6:	2178      	movs	r1, #120	; 0x78
   10da8:	4630      	mov	r0, r6
   10daa:	f7ff fd75 	bl	10898 <putf>
   10dae:	4405      	add	r5, r0
                written += putchw(putp, &p);
   10db0:	a908      	add	r1, sp, #32
   10db2:	4630      	mov	r0, r6
   10db4:	f7ff fd82 	bl	108bc <putchw>
   10db8:	4405      	add	r5, r0
                break;
   10dba:	e64e      	b.n	10a5a <tfp_format+0x12>
            case 'c':
                written += putf(putp, (char)(va_arg(va, int)));
   10dbc:	9b00      	ldr	r3, [sp, #0]
   10dbe:	1d1a      	adds	r2, r3, #4
   10dc0:	9200      	str	r2, [sp, #0]
   10dc2:	7819      	ldrb	r1, [r3, #0]
   10dc4:	4630      	mov	r0, r6
   10dc6:	f7ff fd67 	bl	10898 <putf>
   10dca:	4405      	add	r5, r0
                break;
   10dcc:	e645      	b.n	10a5a <tfp_format+0x12>
            case 's':
                p.bf = va_arg(va, char *);
   10dce:	9b00      	ldr	r3, [sp, #0]
   10dd0:	1d1a      	adds	r2, r3, #4
   10dd2:	9200      	str	r2, [sp, #0]
   10dd4:	681b      	ldr	r3, [r3, #0]
   10dd6:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   10dd8:	a908      	add	r1, sp, #32
   10dda:	4630      	mov	r0, r6
   10ddc:	f7ff fd6e 	bl	108bc <putchw>
   10de0:	4405      	add	r5, r0
                p.bf = bf;
   10de2:	ab02      	add	r3, sp, #8
   10de4:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   10de6:	e638      	b.n	10a5a <tfp_format+0x12>
#if MYNEWT_VAL(FLOAT_USER)
            case 'f':
                p.base = 10;
   10de8:	230a      	movs	r3, #10
   10dea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                d = va_arg(va, double);
   10dee:	9b00      	ldr	r3, [sp, #0]
   10df0:	3307      	adds	r3, #7
   10df2:	f023 0307 	bic.w	r3, r3, #7
   10df6:	f103 0208 	add.w	r2, r3, #8
   10dfa:	9200      	str	r2, [sp, #0]
   10dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
                /* Convert to an int to get the integer part of the number. */
                n = d;
   10e00:	4640      	mov	r0, r8
   10e02:	4649      	mov	r1, r9
   10e04:	f012 febc 	bl	23b80 <__aeabi_d2iz>
   10e08:	4604      	mov	r4, r0
                /* Convert to ascii */
                i2a(n, &p);
   10e0a:	aa08      	add	r2, sp, #32
   10e0c:	17c1      	asrs	r1, r0, #31
   10e0e:	f7ff fcff 	bl	10810 <i2a>
                /* When the double was converted to an int it was truncated
                 * towards 0.  If the number is in the range (-1, 0), the
                 * negative sign was lost.  Preserve the sign in this case.
                 */
                if (d < 0.0) {
   10e12:	2200      	movs	r2, #0
   10e14:	2300      	movs	r3, #0
   10e16:	4640      	mov	r0, r8
   10e18:	4649      	mov	r1, r9
   10e1a:	f012 fe73 	bl	23b04 <__aeabi_dcmplt>
   10e1e:	bbc8      	cbnz	r0, 10e94 <tfp_format+0x44c>
                    p.sign = 1;
                }
                /* Ignore left align for integer part */
                p.left = 0;
   10e20:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e24:	f36f 03c3 	bfc	r3, #3, #1
   10e28:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Subtract width for decimal part and decimal point */
                if (p.width >= 4) {
   10e2c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e30:	2b03      	cmp	r3, #3
   10e32:	d936      	bls.n	10ea2 <tfp_format+0x45a>
                    p.width -= 4;
   10e34:	3b04      	subs	r3, #4
   10e36:	f88d 3020 	strb.w	r3, [sp, #32]
                } else {
                    p.width = 0;
                }
                /* Write integer part to console */
                written += putchw(putp, &p);
   10e3a:	a908      	add	r1, sp, #32
   10e3c:	4630      	mov	r0, r6
   10e3e:	f7ff fd3d 	bl	108bc <putchw>
   10e42:	4405      	add	r5, r0
                /* Take the decimal part and multiply by 1000 */
                n = (d-n)*1000;
   10e44:	4620      	mov	r0, r4
   10e46:	f012 fb81 	bl	2354c <__aeabi_i2d>
   10e4a:	4602      	mov	r2, r0
   10e4c:	460b      	mov	r3, r1
   10e4e:	4640      	mov	r0, r8
   10e50:	4649      	mov	r1, r9
   10e52:	f012 fa2d 	bl	232b0 <__aeabi_dsub>
   10e56:	2200      	movs	r2, #0
   10e58:	4b19      	ldr	r3, [pc, #100]	; (10ec0 <tfp_format+0x478>)
   10e5a:	f012 fbe1 	bl	23620 <__aeabi_dmul>
   10e5e:	f012 fe8f 	bl	23b80 <__aeabi_d2iz>
                /* Convert to ascii */
                i2a(n, &p);
   10e62:	aa08      	add	r2, sp, #32
   10e64:	17c1      	asrs	r1, r0, #31
   10e66:	f7ff fcd3 	bl	10810 <i2a>
                /* Set the leading zeros for the next integer output to 3 */
                p.lz = 3;
   10e6a:	2303      	movs	r3, #3
   10e6c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                /* Always use the same decimal width */
                p.width = 3;
   10e70:	f88d 3020 	strb.w	r3, [sp, #32]
                /* Ignore sign for decimal part*/
                p.sign = 0;
   10e74:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e78:	f36f 0300 	bfc	r3, #0, #1
   10e7c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Output a decimal point */
                putf(putp, '.');
   10e80:	212e      	movs	r1, #46	; 0x2e
   10e82:	4630      	mov	r0, r6
   10e84:	f7ff fd08 	bl	10898 <putf>
                /* Output the decimal part. */
                written += putchw(putp, &p);
   10e88:	a908      	add	r1, sp, #32
   10e8a:	4630      	mov	r0, r6
   10e8c:	f7ff fd16 	bl	108bc <putchw>
   10e90:	4405      	add	r5, r0
                break;
   10e92:	e5e2      	b.n	10a5a <tfp_format+0x12>
                    p.sign = 1;
   10e94:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e98:	f043 0301 	orr.w	r3, r3, #1
   10e9c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   10ea0:	e7be      	b.n	10e20 <tfp_format+0x3d8>
                    p.width = 0;
   10ea2:	2300      	movs	r3, #0
   10ea4:	f88d 3020 	strb.w	r3, [sp, #32]
   10ea8:	e7c7      	b.n	10e3a <tfp_format+0x3f2>
#endif
            case '%':
                written += putf(putp, ch);
   10eaa:	4621      	mov	r1, r4
   10eac:	4630      	mov	r0, r6
   10eae:	f7ff fcf3 	bl	10898 <putf>
   10eb2:	4405      	add	r5, r0
                break;
   10eb4:	e5d1      	b.n	10a5a <tfp_format+0x12>
        }
    }
 abort:;
 
 return written;
}
   10eb6:	4628      	mov	r0, r5
   10eb8:	b00a      	add	sp, #40	; 0x28
   10eba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   10ebe:	bf00      	nop
   10ec0:	408f4000 	.word	0x408f4000

00010ec4 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   10ec4:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   10ec6:	f7ff fdbf 	bl	10a48 <tfp_format>
}
   10eca:	bd08      	pop	{r3, pc}

00010ecc <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   10ecc:	b40f      	push	{r0, r1, r2, r3}
   10ece:	b500      	push	{lr}
   10ed0:	b083      	sub	sp, #12
   10ed2:	aa04      	add	r2, sp, #16
   10ed4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   10ed8:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   10eda:	4b04      	ldr	r3, [pc, #16]	; (10eec <printf+0x20>)
   10edc:	6818      	ldr	r0, [r3, #0]
   10ede:	f7ff fff1 	bl	10ec4 <vfprintf>
    va_end(va);
    return rv;
}
   10ee2:	b003      	add	sp, #12
   10ee4:	f85d eb04 	ldr.w	lr, [sp], #4
   10ee8:	b004      	add	sp, #16
   10eea:	4770      	bx	lr
   10eec:	00025d00 	.word	0x00025d00

00010ef0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   10ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ef2:	b085      	sub	sp, #20
   10ef4:	4605      	mov	r5, r0
   10ef6:	460c      	mov	r4, r1
   10ef8:	4616      	mov	r6, r2
   10efa:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   10efc:	460a      	mov	r2, r1
   10efe:	4601      	mov	r1, r0
   10f00:	4668      	mov	r0, sp
   10f02:	f000 f83d 	bl	10f80 <fmemopen_w>
    tfp_format(f, fmt, va);
   10f06:	463a      	mov	r2, r7
   10f08:	4631      	mov	r1, r6
   10f0a:	f7ff fd9d 	bl	10a48 <tfp_format>
    if (size > 0) {
   10f0e:	b12c      	cbz	r4, 10f1c <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   10f10:	9b02      	ldr	r3, [sp, #8]
   10f12:	42a3      	cmp	r3, r4
   10f14:	d205      	bcs.n	10f22 <vsnprintf+0x32>
            *(state.buffer) = '\0';
   10f16:	9b01      	ldr	r3, [sp, #4]
   10f18:	2200      	movs	r2, #0
   10f1a:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   10f1c:	9802      	ldr	r0, [sp, #8]
   10f1e:	b005      	add	sp, #20
   10f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   10f22:	3c01      	subs	r4, #1
   10f24:	2300      	movs	r3, #0
   10f26:	552b      	strb	r3, [r5, r4]
   10f28:	e7f8      	b.n	10f1c <vsnprintf+0x2c>

00010f2a <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   10f2a:	b40c      	push	{r2, r3}
   10f2c:	b500      	push	{lr}
   10f2e:	b083      	sub	sp, #12
   10f30:	ab04      	add	r3, sp, #16
   10f32:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   10f36:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   10f38:	f7ff ffda 	bl	10ef0 <vsnprintf>
    va_end(va);
    return rv;
}
   10f3c:	b003      	add	sp, #12
   10f3e:	f85d eb04 	ldr.w	lr, [sp], #4
   10f42:	b002      	add	sp, #8
   10f44:	4770      	bx	lr

00010f46 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   10f46:	b500      	push	{lr}
   10f48:	4684      	mov	ip, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   10f4a:	2000      	movs	r0, #0
    
    while (n--)
   10f4c:	e000      	b.n	10f50 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   10f4e:	4672      	mov	r2, lr
    while (n--)
   10f50:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   10f54:	b192      	cbz	r2, 10f7c <memfile_write+0x36>
        f->bytes_written++;
   10f56:	f8dc 3008 	ldr.w	r3, [ip, #8]
   10f5a:	3301      	adds	r3, #1
   10f5c:	f8cc 3008 	str.w	r3, [ip, #8]
        if (f->bytes_written <= f->size)
   10f60:	f8dc 200c 	ldr.w	r2, [ip, #12]
   10f64:	4293      	cmp	r3, r2
   10f66:	d8f2      	bhi.n	10f4e <memfile_write+0x8>
            *f->buffer++ = *bp++;
   10f68:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10f6c:	1c5a      	adds	r2, r3, #1
   10f6e:	f8cc 2004 	str.w	r2, [ip, #4]
   10f72:	f811 2b01 	ldrb.w	r2, [r1], #1
   10f76:	701a      	strb	r2, [r3, #0]
            i++;
   10f78:	3001      	adds	r0, #1
   10f7a:	e7e8      	b.n	10f4e <memfile_write+0x8>
        }
    }
    
    return i;
}
   10f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00010f80 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   10f80:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   10f82:	4c04      	ldr	r4, [pc, #16]	; (10f94 <fmemopen_w+0x14>)
   10f84:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   10f86:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   10f88:	2100      	movs	r1, #0
   10f8a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   10f8c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   10f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f92:	4770      	bx	lr
   10f94:	00025d04 	.word	0x00025d04

00010f98 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   10f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f9a:	4604      	mov	r4, r0
   10f9c:	460d      	mov	r5, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   10f9e:	e001      	b.n	10fa4 <strntoumax+0xc>
		nptr++;
   10fa0:	3401      	adds	r4, #1
		n--;
   10fa2:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   10fa4:	b143      	cbz	r3, 10fb8 <strntoumax+0x20>
   10fa6:	7821      	ldrb	r1, [r4, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   10fa8:	2920      	cmp	r1, #32
   10faa:	d0f9      	beq.n	10fa0 <strntoumax+0x8>
   10fac:	290a      	cmp	r1, #10
   10fae:	d0f7      	beq.n	10fa0 <strntoumax+0x8>
   10fb0:	2909      	cmp	r1, #9
   10fb2:	d0f5      	beq.n	10fa0 <strntoumax+0x8>
   10fb4:	290d      	cmp	r1, #13
   10fb6:	d0f3      	beq.n	10fa0 <strntoumax+0x8>
	}

	/* Single optional + or - */
	if (n) {
   10fb8:	b16b      	cbz	r3, 10fd6 <strntoumax+0x3e>
		char c = *nptr;
   10fba:	7827      	ldrb	r7, [r4, #0]
		if (c == '-' || c == '+') {
   10fbc:	2f2d      	cmp	r7, #45	; 0x2d
   10fbe:	d003      	beq.n	10fc8 <strntoumax+0x30>
   10fc0:	2f2b      	cmp	r7, #43	; 0x2b
   10fc2:	d001      	beq.n	10fc8 <strntoumax+0x30>
	int minus = 0;
   10fc4:	2700      	movs	r7, #0
   10fc6:	e007      	b.n	10fd8 <strntoumax+0x40>
			minus = (c == '-');
   10fc8:	2f2d      	cmp	r7, #45	; 0x2d
   10fca:	bf14      	ite	ne
   10fcc:	2700      	movne	r7, #0
   10fce:	2701      	moveq	r7, #1
			nptr++;
   10fd0:	3401      	adds	r4, #1
			n--;
   10fd2:	3b01      	subs	r3, #1
   10fd4:	e000      	b.n	10fd8 <strntoumax+0x40>
	int minus = 0;
   10fd6:	2700      	movs	r7, #0
		}
	}

	if (base == 0) {
   10fd8:	b9ba      	cbnz	r2, 1100a <strntoumax+0x72>
		if (n >= 2 && nptr[0] == '0' &&
   10fda:	2b01      	cmp	r3, #1
   10fdc:	d902      	bls.n	10fe4 <strntoumax+0x4c>
   10fde:	7822      	ldrb	r2, [r4, #0]
   10fe0:	2a30      	cmp	r2, #48	; 0x30
   10fe2:	d005      	beq.n	10ff0 <strntoumax+0x58>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   10fe4:	b31b      	cbz	r3, 1102e <strntoumax+0x96>
   10fe6:	7822      	ldrb	r2, [r4, #0]
   10fe8:	2a30      	cmp	r2, #48	; 0x30
   10fea:	d00a      	beq.n	11002 <strntoumax+0x6a>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   10fec:	220a      	movs	r2, #10
   10fee:	e00e      	b.n	1100e <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   10ff0:	7862      	ldrb	r2, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   10ff2:	2a78      	cmp	r2, #120	; 0x78
   10ff4:	d001      	beq.n	10ffa <strntoumax+0x62>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   10ff6:	2a58      	cmp	r2, #88	; 0x58
   10ff8:	d1f4      	bne.n	10fe4 <strntoumax+0x4c>
			n -= 2;
   10ffa:	3b02      	subs	r3, #2
			nptr += 2;
   10ffc:	3402      	adds	r4, #2
			base = 16;
   10ffe:	2210      	movs	r2, #16
   11000:	e005      	b.n	1100e <strntoumax+0x76>
			n--;
   11002:	3b01      	subs	r3, #1
			nptr++;
   11004:	3401      	adds	r4, #1
			base = 8;
   11006:	2208      	movs	r2, #8
   11008:	e001      	b.n	1100e <strntoumax+0x76>
		}
	} else if (base == 16) {
   1100a:	2a10      	cmp	r2, #16
   1100c:	d002      	beq.n	11014 <strntoumax+0x7c>
			base = 16;
   1100e:	2000      	movs	r0, #0
   11010:	4601      	mov	r1, r0
   11012:	e028      	b.n	11066 <strntoumax+0xce>
		if (n >= 2 && nptr[0] == '0' &&
   11014:	2b01      	cmp	r3, #1
   11016:	d9fa      	bls.n	1100e <strntoumax+0x76>
   11018:	7821      	ldrb	r1, [r4, #0]
   1101a:	2930      	cmp	r1, #48	; 0x30
   1101c:	d1f7      	bne.n	1100e <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1101e:	7861      	ldrb	r1, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   11020:	2978      	cmp	r1, #120	; 0x78
   11022:	d001      	beq.n	11028 <strntoumax+0x90>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   11024:	2958      	cmp	r1, #88	; 0x58
   11026:	d1f2      	bne.n	1100e <strntoumax+0x76>
			n -= 2;
   11028:	3b02      	subs	r3, #2
			nptr += 2;
   1102a:	3402      	adds	r4, #2
   1102c:	e7ef      	b.n	1100e <strntoumax+0x76>
			base = 10;
   1102e:	220a      	movs	r2, #10
   11030:	e7ed      	b.n	1100e <strntoumax+0x76>
		return ch - '0';
   11032:	46b4      	mov	ip, r6
   11034:	e004      	b.n	11040 <strntoumax+0xa8>
		return ch - 'A' + 10;
   11036:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
   1103a:	e001      	b.n	11040 <strntoumax+0xa8>
		return ch - 'a' + 10;
   1103c:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   11040:	f1bc 0f00 	cmp.w	ip, #0
   11044:	db21      	blt.n	1108a <strntoumax+0xf2>
   11046:	4562      	cmp	r2, ip
   11048:	dd1f      	ble.n	1108a <strntoumax+0xf2>
		v = v * base + d;
   1104a:	17d6      	asrs	r6, r2, #31
   1104c:	fb02 fe01 	mul.w	lr, r2, r1
   11050:	fb00 e106 	mla	r1, r0, r6, lr
   11054:	fba2 0600 	umull	r0, r6, r2, r0
   11058:	4431      	add	r1, r6
   1105a:	eb10 000c 	adds.w	r0, r0, ip
   1105e:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
		n--;
   11062:	3b01      	subs	r3, #1
		nptr++;
   11064:	3401      	adds	r4, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   11066:	b183      	cbz	r3, 1108a <strntoumax+0xf2>
   11068:	f894 c000 	ldrb.w	ip, [r4]
	if (ch >= '0' && ch <= '9') {
   1106c:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
   11070:	2e09      	cmp	r6, #9
   11072:	d9de      	bls.n	11032 <strntoumax+0x9a>
	} else if (ch >= 'A' && ch <= 'Z') {
   11074:	f1ac 0641 	sub.w	r6, ip, #65	; 0x41
   11078:	2e19      	cmp	r6, #25
   1107a:	d9dc      	bls.n	11036 <strntoumax+0x9e>
	} else if (ch >= 'a' && ch <= 'z') {
   1107c:	f1ac 0661 	sub.w	r6, ip, #97	; 0x61
   11080:	2e19      	cmp	r6, #25
   11082:	d9db      	bls.n	1103c <strntoumax+0xa4>
		return -1;
   11084:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   11088:	e7da      	b.n	11040 <strntoumax+0xa8>
	}

	if (endptr)
   1108a:	b105      	cbz	r5, 1108e <strntoumax+0xf6>
		*endptr = (char *)nptr;
   1108c:	602c      	str	r4, [r5, #0]

	return minus ? -v : v;
   1108e:	b117      	cbz	r7, 11096 <strntoumax+0xfe>
   11090:	4240      	negs	r0, r0
   11092:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   11096:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011098 <imgr_vercmp>:
 * @return                       1 if a > b
 */
static int
imgr_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   11098:	7802      	ldrb	r2, [r0, #0]
   1109a:	780b      	ldrb	r3, [r1, #0]
   1109c:	429a      	cmp	r2, r3
   1109e:	d30c      	bcc.n	110ba <imgr_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   110a0:	d80e      	bhi.n	110c0 <imgr_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   110a2:	7842      	ldrb	r2, [r0, #1]
   110a4:	784b      	ldrb	r3, [r1, #1]
   110a6:	429a      	cmp	r2, r3
   110a8:	d30c      	bcc.n	110c4 <imgr_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   110aa:	d80e      	bhi.n	110ca <imgr_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   110ac:	8842      	ldrh	r2, [r0, #2]
   110ae:	884b      	ldrh	r3, [r1, #2]
   110b0:	429a      	cmp	r2, r3
   110b2:	d30c      	bcc.n	110ce <imgr_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   110b4:	d80e      	bhi.n	110d4 <imgr_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   110b6:	2000      	movs	r0, #0
   110b8:	4770      	bx	lr
        return -1;
   110ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110be:	4770      	bx	lr
        return 1;
   110c0:	2001      	movs	r0, #1
   110c2:	4770      	bx	lr
        return -1;
   110c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110c8:	4770      	bx	lr
        return 1;
   110ca:	2001      	movs	r0, #1
   110cc:	4770      	bx	lr
        return -1;
   110ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110d2:	4770      	bx	lr
        return 1;
   110d4:	2001      	movs	r0, #1
}
   110d6:	4770      	bx	lr

000110d8 <imgr_img_tlvs>:
{
   110d8:	b530      	push	{r4, r5, lr}
   110da:	b083      	sub	sp, #12
   110dc:	4614      	mov	r4, r2
   110de:	461d      	mov	r5, r3
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   110e0:	2304      	movs	r3, #4
   110e2:	eb0d 0203 	add.w	r2, sp, r3
   110e6:	6821      	ldr	r1, [r4, #0]
   110e8:	f002 fff4 	bl	140d4 <flash_area_read>
    if (rc) {
   110ec:	b968      	cbnz	r0, 1110a <imgr_img_tlvs+0x32>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   110ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   110f2:	f646 1307 	movw	r3, #26887	; 0x6907
   110f6:	429a      	cmp	r2, r3
   110f8:	d10b      	bne.n	11112 <imgr_img_tlvs+0x3a>
    *start_off += sizeof(tlv_info);
   110fa:	6822      	ldr	r2, [r4, #0]
   110fc:	3204      	adds	r2, #4
   110fe:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   11100:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11104:	441a      	add	r2, r3
   11106:	602a      	str	r2, [r5, #0]
    rc = 0;
   11108:	e001      	b.n	1110e <imgr_img_tlvs+0x36>
        rc = -1;
   1110a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1110e:	b003      	add	sp, #12
   11110:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   11112:	2001      	movs	r0, #1
    return rc;
   11114:	e7fb      	b.n	1110e <imgr_img_tlvs+0x36>
	...

00011118 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   11118:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1111a:	f100 040c 	add.w	r4, r0, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1111e:	2202      	movs	r2, #2
   11120:	490e      	ldr	r1, [pc, #56]	; (1115c <imgr_upload_good_rsp+0x44>)
   11122:	4620      	mov	r0, r4
   11124:	f007 f96f 	bl	18406 <cbor_encode_text_string>
   11128:	4605      	mov	r5, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1112a:	2200      	movs	r2, #0
   1112c:	2300      	movs	r3, #0
   1112e:	4620      	mov	r0, r4
   11130:	f007 f8ee 	bl	18310 <cbor_encode_int>
   11134:	4305      	orrs	r5, r0
   11136:	2203      	movs	r2, #3
   11138:	4909      	ldr	r1, [pc, #36]	; (11160 <imgr_upload_good_rsp+0x48>)
   1113a:	4620      	mov	r0, r4
   1113c:	f007 f963 	bl	18406 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   11140:	4305      	orrs	r5, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   11142:	4b08      	ldr	r3, [pc, #32]	; (11164 <imgr_upload_good_rsp+0x4c>)
   11144:	685a      	ldr	r2, [r3, #4]
   11146:	2300      	movs	r3, #0
   11148:	4620      	mov	r0, r4
   1114a:	f007 f8e1 	bl	18310 <cbor_encode_int>

    if (err != 0) {
   1114e:	ea55 0300 	orrs.w	r3, r5, r0
   11152:	d101      	bne.n	11158 <imgr_upload_good_rsp+0x40>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   11154:	2000      	movs	r0, #0
}
   11156:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   11158:	2002      	movs	r0, #2
   1115a:	e7fc      	b.n	11156 <imgr_upload_good_rsp+0x3e>
   1115c:	00025d0c 	.word	0x00025d0c
   11160:	00025d10 	.word	0x00025d10
   11164:	20003cb4 	.word	0x20003cb4

00011168 <imgr_read_info>:
{
   11168:	b570      	push	{r4, r5, r6, lr}
   1116a:	b08c      	sub	sp, #48	; 0x30
   1116c:	460c      	mov	r4, r1
   1116e:	4615      	mov	r5, r2
   11170:	461e      	mov	r6, r3
    data_end = 0;
   11172:	2200      	movs	r2, #0
   11174:	9201      	str	r2, [sp, #4]
    area_id = flash_area_id_from_image_slot(image_slot);
   11176:	f003 f80d 	bl	14194 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1117a:	a90b      	add	r1, sp, #44	; 0x2c
   1117c:	b2c0      	uxtb	r0, r0
   1117e:	f002 ff49 	bl	14014 <flash_area_open>
    if (rc2) {
   11182:	2800      	cmp	r0, #0
   11184:	d163      	bne.n	1124e <imgr_read_info+0xe6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   11186:	2320      	movs	r3, #32
   11188:	aa03      	add	r2, sp, #12
   1118a:	2100      	movs	r1, #0
   1118c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1118e:	f002 fffa 	bl	14186 <flash_area_read_is_empty>
    if (rc2 < 0) {
   11192:	2800      	cmp	r0, #0
   11194:	db5e      	blt.n	11254 <imgr_read_info+0xec>
    if (ver) {
   11196:	b11c      	cbz	r4, 111a0 <imgr_read_info+0x38>
        memset(ver, 0xff, sizeof(*ver));
   11198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1119c:	6023      	str	r3, [r4, #0]
   1119e:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   111a0:	9a03      	ldr	r2, [sp, #12]
   111a2:	4b2f      	ldr	r3, [pc, #188]	; (11260 <imgr_read_info+0xf8>)
   111a4:	429a      	cmp	r2, r3
   111a6:	d005      	beq.n	111b4 <imgr_read_info+0x4c>
    } else if (rc2 == 1) {
   111a8:	2801      	cmp	r0, #1
   111aa:	d020      	beq.n	111ee <imgr_read_info+0x86>
        rc = 1;
   111ac:	2401      	movs	r4, #1
}
   111ae:	4620      	mov	r0, r4
   111b0:	b00c      	add	sp, #48	; 0x30
   111b2:	bd70      	pop	{r4, r5, r6, pc}
        if (ver) {
   111b4:	b11c      	cbz	r4, 111be <imgr_read_info+0x56>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   111b6:	ab08      	add	r3, sp, #32
   111b8:	cb03      	ldmia	r3!, {r0, r1}
   111ba:	6020      	str	r0, [r4, #0]
   111bc:	6061      	str	r1, [r4, #4]
    if (flags) {
   111be:	b10e      	cbz	r6, 111c4 <imgr_read_info+0x5c>
        *flags = hdr->ih_flags;
   111c0:	9b07      	ldr	r3, [sp, #28]
   111c2:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   111c4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   111c8:	9a06      	ldr	r2, [sp, #24]
   111ca:	4413      	add	r3, r2
   111cc:	9302      	str	r3, [sp, #8]
    rc = imgr_img_tlvs(fa, hdr, &data_off, &data_end);
   111ce:	ab01      	add	r3, sp, #4
   111d0:	aa02      	add	r2, sp, #8
   111d2:	a903      	add	r1, sp, #12
   111d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   111d6:	f7ff ff7f 	bl	110d8 <imgr_img_tlvs>
    if (rc) {
   111da:	4604      	mov	r4, r0
   111dc:	2800      	cmp	r0, #0
   111de:	d1e6      	bne.n	111ae <imgr_read_info+0x46>
    if (data_end > fa->fa_size) {
   111e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   111e2:	689a      	ldr	r2, [r3, #8]
   111e4:	9b01      	ldr	r3, [sp, #4]
   111e6:	429a      	cmp	r2, r3
   111e8:	d209      	bcs.n	111fe <imgr_read_info+0x96>
        rc = 1;
   111ea:	2401      	movs	r4, #1
   111ec:	e7df      	b.n	111ae <imgr_read_info+0x46>
        rc = 2;
   111ee:	2402      	movs	r4, #2
   111f0:	e7dd      	b.n	111ae <imgr_read_info+0x46>
            data_off += sizeof(*tlv) + tlv->it_len;
   111f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   111f6:	9a02      	ldr	r2, [sp, #8]
   111f8:	4413      	add	r3, r2
   111fa:	3304      	adds	r3, #4
   111fc:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof(*tlv) <= data_end) {
   111fe:	9902      	ldr	r1, [sp, #8]
   11200:	1d0a      	adds	r2, r1, #4
   11202:	9b01      	ldr	r3, [sp, #4]
   11204:	429a      	cmp	r2, r3
   11206:	d820      	bhi.n	1124a <imgr_read_info+0xe2>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   11208:	2304      	movs	r3, #4
   1120a:	aa03      	add	r2, sp, #12
   1120c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1120e:	f002 ffba 	bl	14186 <flash_area_read_is_empty>
        if (rc2 < 0) {
   11212:	2800      	cmp	r0, #0
   11214:	dbcb      	blt.n	111ae <imgr_read_info+0x46>
        if (rc2 == 1) {
   11216:	2801      	cmp	r0, #1
   11218:	d01f      	beq.n	1125a <imgr_read_info+0xf2>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   1121a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1121e:	2b10      	cmp	r3, #16
   11220:	d1e7      	bne.n	111f2 <imgr_read_info+0x8a>
          tlv->it_len != IMGMGR_HASH_LEN) {
   11222:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   11226:	2b20      	cmp	r3, #32
   11228:	d1e3      	bne.n	111f2 <imgr_read_info+0x8a>
        data_off += sizeof(*tlv);
   1122a:	9902      	ldr	r1, [sp, #8]
   1122c:	3104      	adds	r1, #4
   1122e:	9102      	str	r1, [sp, #8]
        if (hash) {
   11230:	2d00      	cmp	r5, #0
   11232:	d0bc      	beq.n	111ae <imgr_read_info+0x46>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   11234:	f101 0320 	add.w	r3, r1, #32
   11238:	9a01      	ldr	r2, [sp, #4]
   1123a:	4293      	cmp	r3, r2
   1123c:	d8b7      	bhi.n	111ae <imgr_read_info+0x46>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1123e:	2320      	movs	r3, #32
   11240:	462a      	mov	r2, r5
   11242:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11244:	f002 ff46 	bl	140d4 <flash_area_read>
            if (rc2) {
   11248:	e7b1      	b.n	111ae <imgr_read_info+0x46>
    rc = 1;
   1124a:	2401      	movs	r4, #1
   1124c:	e7af      	b.n	111ae <imgr_read_info+0x46>
        return -1;
   1124e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11252:	e7ac      	b.n	111ae <imgr_read_info+0x46>
    int rc = -1;
   11254:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11258:	e7a9      	b.n	111ae <imgr_read_info+0x46>
    rc = 1;
   1125a:	4604      	mov	r4, r0
   1125c:	e7a7      	b.n	111ae <imgr_read_info+0x46>
   1125e:	bf00      	nop
   11260:	96f3b83d 	.word	0x96f3b83d

00011264 <imgr_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
imgr_upload_log(bool is_first, bool is_last, int status)
{
   11264:	b510      	push	{r4, lr}
   11266:	b088      	sub	sp, #32
   11268:	4614      	mov	r4, r2
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1126a:	b920      	cbnz	r0, 11276 <imgr_upload_log+0x12>
        return imgmgr_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1126c:	b939      	cbnz	r1, 1127e <imgr_upload_log+0x1a>
   1126e:	b932      	cbnz	r2, 1127e <imgr_upload_log+0x1a>

        return imgmgr_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   11270:	4610      	mov	r0, r2
}
   11272:	b008      	add	sp, #32
   11274:	bd10      	pop	{r4, pc}
        return imgmgr_log_upload_start(status);
   11276:	4610      	mov	r0, r2
   11278:	f000 fc22 	bl	11ac0 <imgmgr_log_upload_start>
   1127c:	e7f9      	b.n	11272 <imgr_upload_log+0xe>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1127e:	2300      	movs	r3, #0
   11280:	466a      	mov	r2, sp
   11282:	4619      	mov	r1, r3
   11284:	2001      	movs	r0, #1
   11286:	f7ff ff6f 	bl	11168 <imgr_read_info>
        if (rc != 0) {
   1128a:	b120      	cbz	r0, 11296 <imgr_upload_log+0x32>
            hashp = NULL;
   1128c:	2100      	movs	r1, #0
        return imgmgr_log_upload_done(status, hashp);
   1128e:	4620      	mov	r0, r4
   11290:	f000 fc20 	bl	11ad4 <imgmgr_log_upload_done>
   11294:	e7ed      	b.n	11272 <imgr_upload_log+0xe>
            hashp = hash;
   11296:	4669      	mov	r1, sp
   11298:	e7f9      	b.n	1128e <imgr_upload_log+0x2a>
	...

0001129c <imgr_my_version>:
{
   1129c:	b508      	push	{r3, lr}
   1129e:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   112a0:	2300      	movs	r3, #0
   112a2:	461a      	mov	r2, r3
   112a4:	4802      	ldr	r0, [pc, #8]	; (112b0 <imgr_my_version+0x14>)
   112a6:	6800      	ldr	r0, [r0, #0]
   112a8:	f7ff ff5e 	bl	11168 <imgr_read_info>
}
   112ac:	bd08      	pop	{r3, pc}
   112ae:	bf00      	nop
   112b0:	20004bd0 	.word	0x20004bd0

000112b4 <imgr_find_by_hash>:
{
   112b4:	b570      	push	{r4, r5, r6, lr}
   112b6:	b088      	sub	sp, #32
   112b8:	4606      	mov	r6, r0
   112ba:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   112bc:	2400      	movs	r4, #0
   112be:	e000      	b.n	112c2 <imgr_find_by_hash+0xe>
   112c0:	3401      	adds	r4, #1
   112c2:	2c01      	cmp	r4, #1
   112c4:	dc0f      	bgt.n	112e6 <imgr_find_by_hash+0x32>
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   112c6:	2300      	movs	r3, #0
   112c8:	466a      	mov	r2, sp
   112ca:	4629      	mov	r1, r5
   112cc:	4620      	mov	r0, r4
   112ce:	f7ff ff4b 	bl	11168 <imgr_read_info>
   112d2:	2800      	cmp	r0, #0
   112d4:	d1f4      	bne.n	112c0 <imgr_find_by_hash+0xc>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   112d6:	2220      	movs	r2, #32
   112d8:	4631      	mov	r1, r6
   112da:	4668      	mov	r0, sp
   112dc:	f7ff f9ac 	bl	10638 <memcmp>
   112e0:	2800      	cmp	r0, #0
   112e2:	d1ed      	bne.n	112c0 <imgr_find_by_hash+0xc>
   112e4:	e001      	b.n	112ea <imgr_find_by_hash+0x36>
    return -1;
   112e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   112ea:	4620      	mov	r0, r4
   112ec:	b008      	add	sp, #32
   112ee:	bd70      	pop	{r4, r5, r6, pc}

000112f0 <imgmgr_find_best_area_id>:
{
   112f0:	b530      	push	{r4, r5, lr}
   112f2:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   112f4:	2400      	movs	r4, #0
    int best = -1;
   112f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   112fa:	e000      	b.n	112fe <imgmgr_find_best_area_id+0xe>
   112fc:	3401      	adds	r4, #1
   112fe:	2c01      	cmp	r4, #1
   11300:	dc10      	bgt.n	11324 <imgmgr_find_best_area_id+0x34>
        rc = imgr_read_info(i, &ver, NULL, NULL);
   11302:	2300      	movs	r3, #0
   11304:	461a      	mov	r2, r3
   11306:	4669      	mov	r1, sp
   11308:	4620      	mov	r0, r4
   1130a:	f7ff ff2d 	bl	11168 <imgr_read_info>
        if (rc < 0) {
   1130e:	2800      	cmp	r0, #0
   11310:	dbf4      	blt.n	112fc <imgmgr_find_best_area_id+0xc>
        if (rc == 0) {
   11312:	b930      	cbnz	r0, 11322 <imgmgr_find_best_area_id+0x32>
            if (imgmgr_state_slot_in_use(i)) {
   11314:	4620      	mov	r0, r4
   11316:	f000 fc69 	bl	11bec <imgmgr_state_slot_in_use>
   1131a:	2800      	cmp	r0, #0
   1131c:	d1ee      	bne.n	112fc <imgmgr_find_best_area_id+0xc>
                best = i;
   1131e:	4625      	mov	r5, r4
   11320:	e7ec      	b.n	112fc <imgmgr_find_best_area_id+0xc>
        best = i;
   11322:	4625      	mov	r5, r4
    if (best >= 0) {
   11324:	2d00      	cmp	r5, #0
   11326:	da02      	bge.n	1132e <imgmgr_find_best_area_id+0x3e>
}
   11328:	4628      	mov	r0, r5
   1132a:	b003      	add	sp, #12
   1132c:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1132e:	4628      	mov	r0, r5
   11330:	f002 ff30 	bl	14194 <flash_area_id_from_image_slot>
   11334:	4605      	mov	r5, r0
    return best;
   11336:	e7f7      	b.n	11328 <imgmgr_find_best_area_id+0x38>

00011338 <imgr_erase_state>:
{
   11338:	b570      	push	{r4, r5, r6, lr}
   1133a:	b082      	sub	sp, #8
   1133c:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1133e:	f7ff ffd7 	bl	112f0 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   11342:	2800      	cmp	r0, #0
   11344:	db1f      	blt.n	11386 <imgr_erase_state+0x4e>
        rc = flash_area_open(area_id, &fa);
   11346:	a901      	add	r1, sp, #4
   11348:	b2c0      	uxtb	r0, r0
   1134a:	f002 fe63 	bl	14014 <flash_area_open>
        if (rc) {
   1134e:	b9f0      	cbnz	r0, 1138e <imgr_erase_state+0x56>
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   11350:	2220      	movs	r2, #32
   11352:	2100      	movs	r1, #0
   11354:	9801      	ldr	r0, [sp, #4]
   11356:	f002 fee5 	bl	14124 <flash_area_erase>
        if (rc) {
   1135a:	4605      	mov	r5, r0
   1135c:	b9c8      	cbnz	r0, 11392 <imgr_erase_state+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1135e:	340c      	adds	r4, #12
   11360:	2202      	movs	r2, #2
   11362:	490e      	ldr	r1, [pc, #56]	; (1139c <imgr_erase_state+0x64>)
   11364:	4620      	mov	r0, r4
   11366:	f007 f84e 	bl	18406 <cbor_encode_text_string>
   1136a:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1136c:	2200      	movs	r2, #0
   1136e:	2300      	movs	r3, #0
   11370:	4620      	mov	r0, r4
   11372:	f006 ffcd 	bl	18310 <cbor_encode_int>
    if (g_err) {
   11376:	ea50 0306 	orrs.w	r3, r0, r6
   1137a:	d10c      	bne.n	11396 <imgr_erase_state+0x5e>
    imgr_state.area_id = -1;
   1137c:	4b08      	ldr	r3, [pc, #32]	; (113a0 <imgr_erase_state+0x68>)
   1137e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11382:	601a      	str	r2, [r3, #0]
    return 0;
   11384:	e000      	b.n	11388 <imgr_erase_state+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   11386:	2502      	movs	r5, #2
}
   11388:	4628      	mov	r0, r5
   1138a:	b002      	add	sp, #8
   1138c:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1138e:	2503      	movs	r5, #3
   11390:	e7fa      	b.n	11388 <imgr_erase_state+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   11392:	2503      	movs	r5, #3
   11394:	e7f8      	b.n	11388 <imgr_erase_state+0x50>
        return MGMT_ERR_ENOMEM;
   11396:	2502      	movs	r5, #2
   11398:	e7f6      	b.n	11388 <imgr_erase_state+0x50>
   1139a:	bf00      	nop
   1139c:	00025d0c 	.word	0x00025d0c
   113a0:	20003cb4 	.word	0x20003cb4

000113a4 <imgr_erase>:
{
   113a4:	b570      	push	{r4, r5, r6, lr}
   113a6:	b082      	sub	sp, #8
   113a8:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   113aa:	f7ff ffa1 	bl	112f0 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   113ae:	2800      	cmp	r0, #0
   113b0:	db1f      	blt.n	113f2 <imgr_erase+0x4e>
        rc = flash_area_open(area_id, &fa);
   113b2:	a901      	add	r1, sp, #4
   113b4:	b2c0      	uxtb	r0, r0
   113b6:	f002 fe2d 	bl	14014 <flash_area_open>
        if (rc) {
   113ba:	b9f0      	cbnz	r0, 113fa <imgr_erase+0x56>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   113bc:	9801      	ldr	r0, [sp, #4]
   113be:	6882      	ldr	r2, [r0, #8]
   113c0:	2100      	movs	r1, #0
   113c2:	f002 feaf 	bl	14124 <flash_area_erase>
        if (rc) {
   113c6:	4605      	mov	r5, r0
   113c8:	b9c8      	cbnz	r0, 113fe <imgr_erase+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   113ca:	340c      	adds	r4, #12
   113cc:	2202      	movs	r2, #2
   113ce:	490e      	ldr	r1, [pc, #56]	; (11408 <imgr_erase+0x64>)
   113d0:	4620      	mov	r0, r4
   113d2:	f007 f818 	bl	18406 <cbor_encode_text_string>
   113d6:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   113d8:	2200      	movs	r2, #0
   113da:	2300      	movs	r3, #0
   113dc:	4620      	mov	r0, r4
   113de:	f006 ff97 	bl	18310 <cbor_encode_int>
    if (g_err) {
   113e2:	ea50 0306 	orrs.w	r3, r0, r6
   113e6:	d10c      	bne.n	11402 <imgr_erase+0x5e>
    imgr_state.area_id = -1;
   113e8:	4b08      	ldr	r3, [pc, #32]	; (1140c <imgr_erase+0x68>)
   113ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   113ee:	601a      	str	r2, [r3, #0]
    return 0;
   113f0:	e000      	b.n	113f4 <imgr_erase+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   113f2:	2502      	movs	r5, #2
}
   113f4:	4628      	mov	r0, r5
   113f6:	b002      	add	sp, #8
   113f8:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   113fa:	2503      	movs	r5, #3
   113fc:	e7fa      	b.n	113f4 <imgr_erase+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   113fe:	2503      	movs	r5, #3
   11400:	e7f8      	b.n	113f4 <imgr_erase+0x50>
        return MGMT_ERR_ENOMEM;
   11402:	2502      	movs	r5, #2
   11404:	e7f6      	b.n	113f4 <imgr_erase+0x50>
   11406:	bf00      	nop
   11408:	00025d0c 	.word	0x00025d0c
   1140c:	20003cb4 	.word	0x20003cb4

00011410 <imgr_upload_inspect>:
{
   11410:	b570      	push	{r4, r5, r6, lr}
   11412:	b084      	sub	sp, #16
   11414:	460c      	mov	r4, r1
   11416:	4616      	mov	r6, r2
    memset(action, 0, sizeof *action);
   11418:	2300      	movs	r3, #0
   1141a:	600b      	str	r3, [r1, #0]
   1141c:	604b      	str	r3, [r1, #4]
   1141e:	608b      	str	r3, [r1, #8]
   11420:	60cb      	str	r3, [r1, #12]
   11422:	610b      	str	r3, [r1, #16]
   11424:	614b      	str	r3, [r1, #20]
    if (req->off == -1) {
   11426:	6801      	ldr	r1, [r0, #0]
   11428:	6843      	ldr	r3, [r0, #4]
   1142a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1142e:	bf08      	it	eq
   11430:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   11434:	d03e      	beq.n	114b4 <imgr_upload_inspect+0xa4>
   11436:	4605      	mov	r5, r0
    if (req->off == 0) {
   11438:	430b      	orrs	r3, r1
   1143a:	d168      	bne.n	1150e <imgr_upload_inspect+0xfe>
        if (req->data_len < sizeof(struct image_header)) {
   1143c:	6903      	ldr	r3, [r0, #16]
   1143e:	2b1f      	cmp	r3, #31
   11440:	d93c      	bls.n	114bc <imgr_upload_inspect+0xac>
        if (req->size == -1) {
   11442:	6882      	ldr	r2, [r0, #8]
   11444:	68c3      	ldr	r3, [r0, #12]
   11446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1144a:	bf08      	it	eq
   1144c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11450:	d038      	beq.n	114c4 <imgr_upload_inspect+0xb4>
        action->size = req->size;
   11452:	6022      	str	r2, [r4, #0]
   11454:	6063      	str	r3, [r4, #4]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   11456:	6982      	ldr	r2, [r0, #24]
   11458:	4b4e      	ldr	r3, [pc, #312]	; (11594 <imgr_upload_inspect+0x184>)
   1145a:	429a      	cmp	r2, r3
   1145c:	d136      	bne.n	114cc <imgr_upload_inspect+0xbc>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1145e:	6942      	ldr	r2, [r0, #20]
   11460:	2a20      	cmp	r2, #32
   11462:	f200 808d 	bhi.w	11580 <imgr_upload_inspect+0x170>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   11466:	b142      	cbz	r2, 1147a <imgr_upload_inspect+0x6a>
   11468:	4b4b      	ldr	r3, [pc, #300]	; (11598 <imgr_upload_inspect+0x188>)
   1146a:	681b      	ldr	r3, [r3, #0]
   1146c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11470:	d003      	beq.n	1147a <imgr_upload_inspect+0x6a>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   11472:	4b49      	ldr	r3, [pc, #292]	; (11598 <imgr_upload_inspect+0x188>)
   11474:	7b1b      	ldrb	r3, [r3, #12]
   11476:	429a      	cmp	r2, r3
   11478:	d02c      	beq.n	114d4 <imgr_upload_inspect+0xc4>
        action->area_id = imgmgr_find_best_area_id();
   1147a:	f7ff ff39 	bl	112f0 <imgmgr_find_best_area_id>
   1147e:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   11480:	2800      	cmp	r0, #0
   11482:	db2f      	blt.n	114e4 <imgr_upload_inspect+0xd4>
        if (req->upgrade) {
   11484:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   11488:	b15b      	cbz	r3, 114a2 <imgr_upload_inspect+0x92>
            rc = imgr_my_version(&cur_ver);
   1148a:	a801      	add	r0, sp, #4
   1148c:	f7ff ff06 	bl	1129c <imgr_my_version>
            if (rc != 0) {
   11490:	2800      	cmp	r0, #0
   11492:	d177      	bne.n	11584 <imgr_upload_inspect+0x174>
            if (imgr_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   11494:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   11498:	a801      	add	r0, sp, #4
   1149a:	f7ff fdfd 	bl	11098 <imgr_vercmp>
   1149e:	2800      	cmp	r0, #0
   114a0:	da24      	bge.n	114ec <imgr_upload_inspect+0xdc>
        rc = flash_area_open(action->area_id, &fa);
   114a2:	a903      	add	r1, sp, #12
   114a4:	7b20      	ldrb	r0, [r4, #12]
   114a6:	f002 fdb5 	bl	14014 <flash_area_open>
        if (rc) {
   114aa:	b318      	cbz	r0, 114f4 <imgr_upload_inspect+0xe4>
            *errstr = imgmgr_err_str_flash_open_failed;
   114ac:	2300      	movs	r3, #0
   114ae:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   114b0:	2001      	movs	r0, #1
   114b2:	e06c      	b.n	1158e <imgr_upload_inspect+0x17e>
        *errstr = imgmgr_err_str_hdr_malformed;
   114b4:	2300      	movs	r3, #0
   114b6:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   114b8:	2003      	movs	r0, #3
   114ba:	e068      	b.n	1158e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   114bc:	2300      	movs	r3, #0
   114be:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   114c0:	2003      	movs	r0, #3
   114c2:	e064      	b.n	1158e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   114c4:	2300      	movs	r3, #0
   114c6:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   114c8:	2003      	movs	r0, #3
   114ca:	e060      	b.n	1158e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_magic_mismatch;
   114cc:	2300      	movs	r3, #0
   114ce:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   114d0:	2003      	movs	r0, #3
   114d2:	e05c      	b.n	1158e <imgr_upload_inspect+0x17e>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   114d4:	f500 7106 	add.w	r1, r0, #536	; 0x218
   114d8:	4830      	ldr	r0, [pc, #192]	; (1159c <imgr_upload_inspect+0x18c>)
   114da:	f7ff f8ad 	bl	10638 <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   114de:	2800      	cmp	r0, #0
   114e0:	d1cb      	bne.n	1147a <imgr_upload_inspect+0x6a>
   114e2:	e054      	b.n	1158e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_no_slot;
   114e4:	2300      	movs	r3, #0
   114e6:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   114e8:	2002      	movs	r0, #2
   114ea:	e050      	b.n	1158e <imgr_upload_inspect+0x17e>
                *errstr = imgmgr_err_str_downgrade;
   114ec:	2300      	movs	r3, #0
   114ee:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   114f0:	2006      	movs	r0, #6
   114f2:	e04c      	b.n	1158e <imgr_upload_inspect+0x17e>
        rc = flash_area_is_empty(fa, &empty);
   114f4:	f10d 0103 	add.w	r1, sp, #3
   114f8:	9803      	ldr	r0, [sp, #12]
   114fa:	f002 fe31 	bl	14160 <flash_area_is_empty>
        if (rc) {
   114fe:	2800      	cmp	r0, #0
   11500:	d142      	bne.n	11588 <imgr_upload_inspect+0x178>
        action->erase = !empty;
   11502:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11506:	f083 0301 	eor.w	r3, r3, #1
   1150a:	7463      	strb	r3, [r4, #17]
   1150c:	e00d      	b.n	1152a <imgr_upload_inspect+0x11a>
        action->area_id = imgr_state.area_id;
   1150e:	4b22      	ldr	r3, [pc, #136]	; (11598 <imgr_upload_inspect+0x188>)
   11510:	681a      	ldr	r2, [r3, #0]
   11512:	60e2      	str	r2, [r4, #12]
        action->size = imgr_state.size;
   11514:	6899      	ldr	r1, [r3, #8]
   11516:	2200      	movs	r2, #0
   11518:	6021      	str	r1, [r4, #0]
   1151a:	6062      	str	r2, [r4, #4]
        if (req->off != imgr_state.off) {
   1151c:	6800      	ldr	r0, [r0, #0]
   1151e:	6869      	ldr	r1, [r5, #4]
   11520:	685b      	ldr	r3, [r3, #4]
   11522:	4291      	cmp	r1, r2
   11524:	bf08      	it	eq
   11526:	4298      	cmpeq	r0, r3
   11528:	d130      	bne.n	1158c <imgr_upload_inspect+0x17c>
    action->write_bytes = req->data_len;
   1152a:	692b      	ldr	r3, [r5, #16]
   1152c:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1152e:	682b      	ldr	r3, [r5, #0]
   11530:	686a      	ldr	r2, [r5, #4]
   11532:	6929      	ldr	r1, [r5, #16]
   11534:	185b      	adds	r3, r3, r1
   11536:	f142 0200 	adc.w	r2, r2, #0
   1153a:	6820      	ldr	r0, [r4, #0]
   1153c:	6861      	ldr	r1, [r4, #4]
   1153e:	4283      	cmp	r3, r0
   11540:	eb72 0301 	sbcs.w	r3, r2, r1
   11544:	d303      	bcc.n	1154e <imgr_upload_inspect+0x13e>
    action->proceed = true;
   11546:	2301      	movs	r3, #1
   11548:	7423      	strb	r3, [r4, #16]
    return 0;
   1154a:	2000      	movs	r0, #0
   1154c:	e01f      	b.n	1158e <imgr_upload_inspect+0x17e>
        rc = flash_area_open(action->area_id, &fa);
   1154e:	a903      	add	r1, sp, #12
   11550:	7b20      	ldrb	r0, [r4, #12]
   11552:	f002 fd5f 	bl	14014 <flash_area_open>
        if (rc) {
   11556:	b118      	cbz	r0, 11560 <imgr_upload_inspect+0x150>
            *errstr = imgmgr_err_str_flash_open_failed;
   11558:	2300      	movs	r3, #0
   1155a:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1155c:	2001      	movs	r0, #1
   1155e:	e016      	b.n	1158e <imgr_upload_inspect+0x17e>
        rem_bytes = req->data_len % flash_area_align(fa);
   11560:	692d      	ldr	r5, [r5, #16]
   11562:	9803      	ldr	r0, [sp, #12]
   11564:	f002 fdf2 	bl	1414c <flash_area_align>
   11568:	fbb5 f3f0 	udiv	r3, r5, r0
   1156c:	fb00 5513 	mls	r5, r0, r3, r5
        if (rem_bytes) {
   11570:	f015 0fff 	tst.w	r5, #255	; 0xff
   11574:	d0e7      	beq.n	11546 <imgr_upload_inspect+0x136>
            action->write_bytes -= rem_bytes;
   11576:	b2ed      	uxtb	r5, r5
   11578:	68a3      	ldr	r3, [r4, #8]
   1157a:	1b5d      	subs	r5, r3, r5
   1157c:	60a5      	str	r5, [r4, #8]
   1157e:	e7e2      	b.n	11546 <imgr_upload_inspect+0x136>
            return MGMT_ERR_EINVAL;
   11580:	2003      	movs	r0, #3
   11582:	e004      	b.n	1158e <imgr_upload_inspect+0x17e>
                return MGMT_ERR_EUNKNOWN;
   11584:	2001      	movs	r0, #1
   11586:	e002      	b.n	1158e <imgr_upload_inspect+0x17e>
            return MGMT_ERR_EUNKNOWN;
   11588:	2001      	movs	r0, #1
   1158a:	e000      	b.n	1158e <imgr_upload_inspect+0x17e>
            return 0;
   1158c:	2000      	movs	r0, #0
}
   1158e:	b004      	add	sp, #16
   11590:	bd70      	pop	{r4, r5, r6, pc}
   11592:	bf00      	nop
   11594:	96f3b83d 	.word	0x96f3b83d
   11598:	20003cb4 	.word	0x20003cb4
   1159c:	20003cc1 	.word	0x20003cc1

000115a0 <imgmgr_dfu_stopped>:
    return imgr_upload_good_rsp(cb);
}

void
imgmgr_dfu_stopped(void)
{
   115a0:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   115a2:	4b03      	ldr	r3, [pc, #12]	; (115b0 <imgmgr_dfu_stopped+0x10>)
   115a4:	681b      	ldr	r3, [r3, #0]
   115a6:	b113      	cbz	r3, 115ae <imgmgr_dfu_stopped+0xe>
   115a8:	685b      	ldr	r3, [r3, #4]
   115aa:	b103      	cbz	r3, 115ae <imgmgr_dfu_stopped+0xe>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   115ac:	4798      	blx	r3
    }
}
   115ae:	bd08      	pop	{r3, pc}
   115b0:	20003cb0 	.word	0x20003cb0

000115b4 <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
   115b4:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   115b6:	4b03      	ldr	r3, [pc, #12]	; (115c4 <imgmgr_dfu_started+0x10>)
   115b8:	681b      	ldr	r3, [r3, #0]
   115ba:	b113      	cbz	r3, 115c2 <imgmgr_dfu_started+0xe>
   115bc:	681b      	ldr	r3, [r3, #0]
   115be:	b103      	cbz	r3, 115c2 <imgmgr_dfu_started+0xe>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   115c0:	4798      	blx	r3
    }
}
   115c2:	bd08      	pop	{r3, pc}
   115c4:	20003cb0 	.word	0x20003cb0

000115c8 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
   115c8:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   115ca:	4b03      	ldr	r3, [pc, #12]	; (115d8 <imgmgr_dfu_pending+0x10>)
   115cc:	681b      	ldr	r3, [r3, #0]
   115ce:	b113      	cbz	r3, 115d6 <imgmgr_dfu_pending+0xe>
   115d0:	689b      	ldr	r3, [r3, #8]
   115d2:	b103      	cbz	r3, 115d6 <imgmgr_dfu_pending+0xe>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   115d4:	4798      	blx	r3
    }
}
   115d6:	bd08      	pop	{r3, pc}
   115d8:	20003cb0 	.word	0x20003cb0

000115dc <imgr_upload>:
{
   115dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115e0:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
   115e4:	4605      	mov	r5, r0
    struct imgr_upload_req req = {
   115e6:	ac52      	add	r4, sp, #328	; 0x148
   115e8:	f44f 7210 	mov.w	r2, #576	; 0x240
   115ec:	2100      	movs	r1, #0
   115ee:	4620      	mov	r0, r4
   115f0:	f7ff f853 	bl	1069a <memset>
   115f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   115f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115fc:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
   11600:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
    const struct cbor_attr_t off_attr[] = {
   11604:	f44f 7290 	mov.w	r2, #288	; 0x120
   11608:	2100      	movs	r1, #0
   1160a:	a80a      	add	r0, sp, #40	; 0x28
   1160c:	f7ff f845 	bl	1069a <memset>
   11610:	4b69      	ldr	r3, [pc, #420]	; (117b8 <imgr_upload+0x1dc>)
   11612:	930a      	str	r3, [sp, #40]	; 0x28
   11614:	2303      	movs	r3, #3
   11616:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1161a:	aa58      	add	r2, sp, #352	; 0x160
   1161c:	920c      	str	r2, [sp, #48]	; 0x30
   1161e:	aa56      	add	r2, sp, #344	; 0x158
   11620:	920d      	str	r2, [sp, #52]	; 0x34
   11622:	f44f 7200 	mov.w	r2, #512	; 0x200
   11626:	9214      	str	r2, [sp, #80]	; 0x50
   11628:	4a64      	ldr	r2, [pc, #400]	; (117bc <imgr_upload+0x1e0>)
   1162a:	9216      	str	r2, [sp, #88]	; 0x58
   1162c:	2102      	movs	r1, #2
   1162e:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
   11632:	aa54      	add	r2, sp, #336	; 0x150
   11634:	9218      	str	r2, [sp, #96]	; 0x60
   11636:	2201      	movs	r2, #1
   11638:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1163c:	4860      	ldr	r0, [pc, #384]	; (117c0 <imgr_upload+0x1e4>)
   1163e:	9022      	str	r0, [sp, #136]	; 0x88
   11640:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   11644:	9424      	str	r4, [sp, #144]	; 0x90
   11646:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1164a:	4a5e      	ldr	r2, [pc, #376]	; (117c4 <imgr_upload+0x1e8>)
   1164c:	922e      	str	r2, [sp, #184]	; 0xb8
   1164e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
   11652:	abd8      	add	r3, sp, #864	; 0x360
   11654:	9330      	str	r3, [sp, #192]	; 0xc0
   11656:	ab57      	add	r3, sp, #348	; 0x15c
   11658:	9331      	str	r3, [sp, #196]	; 0xc4
   1165a:	2320      	movs	r3, #32
   1165c:	9338      	str	r3, [sp, #224]	; 0xe0
   1165e:	4b5a      	ldr	r3, [pc, #360]	; (117c8 <imgr_upload+0x1ec>)
   11660:	933a      	str	r3, [sp, #232]	; 0xe8
   11662:	2305      	movs	r3, #5
   11664:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
   11668:	abe0      	add	r3, sp, #896	; 0x380
   1166a:	933c      	str	r3, [sp, #240]	; 0xf0
    const char *errstr = NULL;
   1166c:	2300      	movs	r3, #0
   1166e:	9309      	str	r3, [sp, #36]	; 0x24
    const struct flash_area *fa = NULL;
   11670:	9301      	str	r3, [sp, #4]
    rc = cbor_read_object(&cb->it, off_attr);
   11672:	a90a      	add	r1, sp, #40	; 0x28
   11674:	f105 001c 	add.w	r0, r5, #28
   11678:	f006 fcde 	bl	18038 <cbor_read_object>
    if (rc != 0) {
   1167c:	2800      	cmp	r0, #0
   1167e:	f040 8095 	bne.w	117ac <imgr_upload+0x1d0>
    rc = imgr_upload_inspect(&req, &action, &errstr);
   11682:	aa09      	add	r2, sp, #36	; 0x24
   11684:	a902      	add	r1, sp, #8
   11686:	4620      	mov	r0, r4
   11688:	f7ff fec2 	bl	11410 <imgr_upload_inspect>
    if (rc != 0) {
   1168c:	4604      	mov	r4, r0
   1168e:	2800      	cmp	r0, #0
   11690:	d137      	bne.n	11702 <imgr_upload+0x126>
    if (!action.proceed) {
   11692:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11696:	2b00      	cmp	r3, #0
   11698:	d036      	beq.n	11708 <imgr_upload+0x12c>
    if (imgr_upload_cb != NULL) {
   1169a:	4b4c      	ldr	r3, [pc, #304]	; (117cc <imgr_upload+0x1f0>)
   1169c:	681b      	ldr	r3, [r3, #0]
   1169e:	b13b      	cbz	r3, 116b0 <imgr_upload+0xd4>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   116a0:	4a4b      	ldr	r2, [pc, #300]	; (117d0 <imgr_upload+0x1f4>)
   116a2:	6812      	ldr	r2, [r2, #0]
   116a4:	9902      	ldr	r1, [sp, #8]
   116a6:	9852      	ldr	r0, [sp, #328]	; 0x148
   116a8:	4798      	blx	r3
        if (rc != 0) {
   116aa:	4604      	mov	r4, r0
   116ac:	2800      	cmp	r0, #0
   116ae:	d130      	bne.n	11712 <imgr_upload+0x136>
    imgr_state.area_id = action.area_id;
   116b0:	9805      	ldr	r0, [sp, #20]
   116b2:	4b48      	ldr	r3, [pc, #288]	; (117d4 <imgr_upload+0x1f8>)
   116b4:	6018      	str	r0, [r3, #0]
    imgr_state.size = action.size;
   116b6:	9a02      	ldr	r2, [sp, #8]
   116b8:	609a      	str	r2, [r3, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   116ba:	a901      	add	r1, sp, #4
   116bc:	b2c0      	uxtb	r0, r0
   116be:	f002 fca9 	bl	14014 <flash_area_open>
    if (rc != 0) {
   116c2:	4604      	mov	r4, r0
   116c4:	bb40      	cbnz	r0, 11718 <imgr_upload+0x13c>
    if (req.off == 0) {
   116c6:	9a52      	ldr	r2, [sp, #328]	; 0x148
   116c8:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   116ca:	4313      	orrs	r3, r2
   116cc:	d028      	beq.n	11720 <imgr_upload+0x144>
    if (req.data_len != 0) {
   116ce:	9b56      	ldr	r3, [sp, #344]	; 0x158
   116d0:	2b00      	cmp	r3, #0
   116d2:	d14d      	bne.n	11770 <imgr_upload+0x194>
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   116d4:	9852      	ldr	r0, [sp, #328]	; 0x148
   116d6:	9a53      	ldr	r2, [sp, #332]	; 0x14c
   116d8:	4b3e      	ldr	r3, [pc, #248]	; (117d4 <imgr_upload+0x1f8>)
   116da:	6859      	ldr	r1, [r3, #4]
   116dc:	689b      	ldr	r3, [r3, #8]
   116de:	4302      	orrs	r2, r0
   116e0:	bf0c      	ite	eq
   116e2:	2001      	moveq	r0, #1
   116e4:	2000      	movne	r0, #0
   116e6:	4622      	mov	r2, r4
   116e8:	4299      	cmp	r1, r3
   116ea:	bf14      	ite	ne
   116ec:	2100      	movne	r1, #0
   116ee:	2101      	moveq	r1, #1
   116f0:	f7ff fdb8 	bl	11264 <imgr_upload_log>
    if (rc != 0) {
   116f4:	2c00      	cmp	r4, #0
   116f6:	d156      	bne.n	117a6 <imgr_upload+0x1ca>
    return imgr_upload_good_rsp(cb);
   116f8:	4628      	mov	r0, r5
   116fa:	f7ff fd0d 	bl	11118 <imgr_upload_good_rsp>
   116fe:	4604      	mov	r4, r0
   11700:	e055      	b.n	117ae <imgr_upload+0x1d2>
        imgmgr_dfu_stopped();
   11702:	f7ff ff4d 	bl	115a0 <imgmgr_dfu_stopped>
        return rc;
   11706:	e052      	b.n	117ae <imgr_upload+0x1d2>
        return imgr_upload_good_rsp(cb);
   11708:	4628      	mov	r0, r5
   1170a:	f7ff fd05 	bl	11118 <imgr_upload_good_rsp>
   1170e:	4604      	mov	r4, r0
   11710:	e04d      	b.n	117ae <imgr_upload+0x1d2>
            errstr = imgmgr_err_str_app_reject;
   11712:	2300      	movs	r3, #0
   11714:	9309      	str	r3, [sp, #36]	; 0x24
            goto end;
   11716:	e7dd      	b.n	116d4 <imgr_upload+0xf8>
        errstr = imgmgr_err_str_flash_open_failed;
   11718:	2300      	movs	r3, #0
   1171a:	9309      	str	r3, [sp, #36]	; 0x24
        rc = MGMT_ERR_EUNKNOWN;
   1171c:	2401      	movs	r4, #1
        goto end;
   1171e:	e7d9      	b.n	116d4 <imgr_upload+0xf8>
        imgr_state.off = 0;
   11720:	4e2c      	ldr	r6, [pc, #176]	; (117d4 <imgr_upload+0x1f8>)
   11722:	f04f 0800 	mov.w	r8, #0
   11726:	f8c6 8004 	str.w	r8, [r6, #4]
        imgmgr_dfu_started();
   1172a:	f7ff ff43 	bl	115b4 <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1172e:	9f57      	ldr	r7, [sp, #348]	; 0x15c
   11730:	7337      	strb	r7, [r6, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   11732:	463a      	mov	r2, r7
   11734:	a9d8      	add	r1, sp, #864	; 0x360
   11736:	f106 000d 	add.w	r0, r6, #13
   1173a:	f7fe ffa1 	bl	10680 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1173e:	f107 0008 	add.w	r0, r7, #8
   11742:	4430      	add	r0, r6
   11744:	f1c7 0220 	rsb	r2, r7, #32
   11748:	4641      	mov	r1, r8
   1174a:	3005      	adds	r0, #5
   1174c:	f7fe ffa5 	bl	1069a <memset>
        if (action.erase) {
   11750:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11754:	2b00      	cmp	r3, #0
   11756:	d0ba      	beq.n	116ce <imgr_upload+0xf2>
            rc = flash_area_erase(fa, 0, req.size);
   11758:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1175a:	4641      	mov	r1, r8
   1175c:	9801      	ldr	r0, [sp, #4]
   1175e:	f002 fce1 	bl	14124 <flash_area_erase>
            if (rc != 0) {
   11762:	4604      	mov	r4, r0
   11764:	2800      	cmp	r0, #0
   11766:	d0b2      	beq.n	116ce <imgr_upload+0xf2>
                errstr = imgmgr_err_str_flash_erase_failed;
   11768:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
                rc = MGMT_ERR_EUNKNOWN;
   1176c:	2401      	movs	r4, #1
                goto end;
   1176e:	e7b1      	b.n	116d4 <imgr_upload+0xf8>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   11770:	9b04      	ldr	r3, [sp, #16]
   11772:	aa58      	add	r2, sp, #352	; 0x160
   11774:	9952      	ldr	r1, [sp, #328]	; 0x148
   11776:	9801      	ldr	r0, [sp, #4]
   11778:	f002 fcc0 	bl	140fc <flash_area_write>
        if (rc != 0) {
   1177c:	4604      	mov	r4, r0
   1177e:	b970      	cbnz	r0, 1179e <imgr_upload+0x1c2>
            imgr_state.off += action.write_bytes;
   11780:	9b04      	ldr	r3, [sp, #16]
   11782:	4a14      	ldr	r2, [pc, #80]	; (117d4 <imgr_upload+0x1f8>)
   11784:	6851      	ldr	r1, [r2, #4]
   11786:	440b      	add	r3, r1
   11788:	6053      	str	r3, [r2, #4]
            if (imgr_state.off == imgr_state.size) {
   1178a:	6892      	ldr	r2, [r2, #8]
   1178c:	4293      	cmp	r3, r2
   1178e:	d1a1      	bne.n	116d4 <imgr_upload+0xf8>
                imgmgr_dfu_pending();
   11790:	f7ff ff1a 	bl	115c8 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   11794:	4b0f      	ldr	r3, [pc, #60]	; (117d4 <imgr_upload+0x1f8>)
   11796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1179a:	601a      	str	r2, [r3, #0]
   1179c:	e79a      	b.n	116d4 <imgr_upload+0xf8>
            errstr = imgmgr_err_str_flash_write_failed;
   1179e:	2300      	movs	r3, #0
   117a0:	9309      	str	r3, [sp, #36]	; 0x24
            rc = MGMT_ERR_EUNKNOWN;
   117a2:	2401      	movs	r4, #1
            goto end;
   117a4:	e796      	b.n	116d4 <imgr_upload+0xf8>
        imgmgr_dfu_stopped();
   117a6:	f7ff fefb 	bl	115a0 <imgmgr_dfu_stopped>
        return imgr_error_rsp(cb, rc, errstr);
   117aa:	e000      	b.n	117ae <imgr_upload+0x1d2>
        return MGMT_ERR_EINVAL;
   117ac:	2403      	movs	r4, #3
}
   117ae:	4620      	mov	r0, r4
   117b0:	f50d 7d62 	add.w	sp, sp, #904	; 0x388
   117b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117b8:	00025d14 	.word	0x00025d14
   117bc:	00025d1c 	.word	0x00025d1c
   117c0:	00025d10 	.word	0x00025d10
   117c4:	00025d20 	.word	0x00025d20
   117c8:	00025d24 	.word	0x00025d24
   117cc:	20003ce8 	.word	0x20003ce8
   117d0:	20003ce4 	.word	0x20003ce4
   117d4:	20003cb4 	.word	0x20003cb4

000117d8 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
   117d8:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   117da:	4b03      	ldr	r3, [pc, #12]	; (117e8 <imgmgr_dfu_confirmed+0x10>)
   117dc:	681b      	ldr	r3, [r3, #0]
   117de:	b113      	cbz	r3, 117e6 <imgmgr_dfu_confirmed+0xe>
   117e0:	68db      	ldr	r3, [r3, #12]
   117e2:	b103      	cbz	r3, 117e6 <imgmgr_dfu_confirmed+0xe>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   117e4:	4798      	blx	r3
    }
}
   117e6:	bd08      	pop	{r3, pc}
   117e8:	20003cb0 	.word	0x20003cb0

000117ec <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   117ec:	b510      	push	{r4, lr}
   117ee:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   117f0:	4b10      	ldr	r3, [pc, #64]	; (11834 <imgmgr_module_init+0x48>)
   117f2:	781b      	ldrb	r3, [r3, #0]
   117f4:	b1c3      	cbz	r3, 11828 <imgmgr_module_init+0x3c>

    rc = mgmt_group_register(&imgr_nmgr_group);
   117f6:	4810      	ldr	r0, [pc, #64]	; (11838 <imgmgr_module_init+0x4c>)
   117f8:	f000 fc00 	bl	11ffc <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   117fc:	b138      	cbz	r0, 1180e <imgmgr_module_init+0x22>
   117fe:	2000      	movs	r0, #0
   11800:	9000      	str	r0, [sp, #0]
   11802:	4b0e      	ldr	r3, [pc, #56]	; (1183c <imgmgr_module_init+0x50>)
   11804:	681c      	ldr	r4, [r3, #0]
   11806:	4603      	mov	r3, r0
   11808:	4602      	mov	r2, r0
   1180a:	4601      	mov	r1, r0
   1180c:	47a0      	blx	r4

#if MYNEWT_VAL(IMGMGR_CLI)
    rc = imgr_cli_register();
   1180e:	f000 f94d 	bl	11aac <imgr_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11812:	b138      	cbz	r0, 11824 <imgmgr_module_init+0x38>
   11814:	2000      	movs	r0, #0
   11816:	9000      	str	r0, [sp, #0]
   11818:	4b08      	ldr	r3, [pc, #32]	; (1183c <imgmgr_module_init+0x50>)
   1181a:	681c      	ldr	r4, [r3, #0]
   1181c:	4603      	mov	r3, r0
   1181e:	4602      	mov	r2, r0
   11820:	4601      	mov	r1, r0
   11822:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   11824:	b002      	add	sp, #8
   11826:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11828:	461a      	mov	r2, r3
   1182a:	4619      	mov	r1, r3
   1182c:	4618      	mov	r0, r3
   1182e:	f7f7 fcc9 	bl	91c4 <__assert_func>
   11832:	bf00      	nop
   11834:	20004bb0 	.word	0x20004bb0
   11838:	200006c0 	.word	0x200006c0
   1183c:	20000768 	.word	0x20000768

00011840 <imgr_cli_too_few_args>:
#endif
};

static void
imgr_cli_too_few_args(void)
{
   11840:	b508      	push	{r3, lr}
    console_printf("Too few args\n");
   11842:	4802      	ldr	r0, [pc, #8]	; (1184c <imgr_cli_too_few_args+0xc>)
   11844:	f002 fae6 	bl	13e14 <console_printf>
}
   11848:	bd08      	pop	{r3, pc}
   1184a:	bf00      	nop
   1184c:	00025754 	.word	0x00025754

00011850 <imgr_cli_flags_str>:
imgr_cli_flags_str(uint32_t image_flags, uint8_t state_flags)
{
    static char buf[8];
    char *p;

    memset(buf, ' ', sizeof buf);
   11850:	4b0f      	ldr	r3, [pc, #60]	; (11890 <imgr_cli_flags_str+0x40>)
   11852:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
   11856:	601a      	str	r2, [r3, #0]
   11858:	605a      	str	r2, [r3, #4]
    p = buf;

    if (state_flags & IMGMGR_STATE_F_ACTIVE) {
   1185a:	f011 0f04 	tst.w	r1, #4
   1185e:	d001      	beq.n	11864 <imgr_cli_flags_str+0x14>
        *p = 'a';
   11860:	2261      	movs	r2, #97	; 0x61
   11862:	701a      	strb	r2, [r3, #0]
    }
    p++;
    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   11864:	f010 0f10 	tst.w	r0, #16
   11868:	d102      	bne.n	11870 <imgr_cli_flags_str+0x20>
        *p = 'b';
   1186a:	4b09      	ldr	r3, [pc, #36]	; (11890 <imgr_cli_flags_str+0x40>)
   1186c:	2262      	movs	r2, #98	; 0x62
   1186e:	705a      	strb	r2, [r3, #1]
    }
    p++;
    if (state_flags & IMGMGR_STATE_F_CONFIRMED) {
   11870:	f011 0f02 	tst.w	r1, #2
   11874:	d002      	beq.n	1187c <imgr_cli_flags_str+0x2c>
        *p = 'c';
   11876:	4b06      	ldr	r3, [pc, #24]	; (11890 <imgr_cli_flags_str+0x40>)
   11878:	2263      	movs	r2, #99	; 0x63
   1187a:	709a      	strb	r2, [r3, #2]
    }
    p++;
    if (state_flags & IMGMGR_STATE_F_PENDING) {
   1187c:	f011 0f01 	tst.w	r1, #1
   11880:	d002      	beq.n	11888 <imgr_cli_flags_str+0x38>
        *p = 'p';
   11882:	4b03      	ldr	r3, [pc, #12]	; (11890 <imgr_cli_flags_str+0x40>)
   11884:	2270      	movs	r2, #112	; 0x70
   11886:	70da      	strb	r2, [r3, #3]
    }
    p++;

    *p = '\0';
   11888:	4801      	ldr	r0, [pc, #4]	; (11890 <imgr_cli_flags_str+0x40>)
   1188a:	2300      	movs	r3, #0
   1188c:	7103      	strb	r3, [r0, #4]

    return buf;
}
   1188e:	4770      	bx	lr
   11890:	20003cec 	.word	0x20003cec

00011894 <imgr_cli_show_slot>:

static void
imgr_cli_show_slot(int slot)
{
   11894:	b570      	push	{r4, r5, r6, lr}
   11896:	b0a6      	sub	sp, #152	; 0x98
   11898:	4604      	mov	r4, r0
    struct image_version ver;
    char ver_str[IMGMGR_NMGR_MAX_VER];
    uint32_t flags;
    uint8_t state_flags;

    if (imgr_read_info(slot, &ver, hash, &flags)) {
   1189a:	ab03      	add	r3, sp, #12
   1189c:	aa1e      	add	r2, sp, #120	; 0x78
   1189e:	a90b      	add	r1, sp, #44	; 0x2c
   118a0:	f7ff fc62 	bl	11168 <imgr_read_info>
   118a4:	b108      	cbz	r0, 118aa <imgr_cli_show_slot+0x16>

    console_printf("%d %8s: %s %s\n",
      slot, ver_str,
      hex_format(hash, IMGMGR_HASH_LEN, hash_str, sizeof(hash_str)),
      imgr_cli_flags_str(flags, state_flags));
}
   118a6:	b026      	add	sp, #152	; 0x98
   118a8:	bd70      	pop	{r4, r5, r6, pc}
    state_flags = imgmgr_state_flags(slot);
   118aa:	4620      	mov	r0, r4
   118ac:	f000 f930 	bl	11b10 <imgmgr_state_flags>
   118b0:	4606      	mov	r6, r0
    (void)imgr_ver_str(&ver, ver_str);
   118b2:	a904      	add	r1, sp, #16
   118b4:	a80b      	add	r0, sp, #44	; 0x2c
   118b6:	f000 fb51 	bl	11f5c <imgr_ver_str>
    console_printf("%d %8s: %s %s\n",
   118ba:	2341      	movs	r3, #65	; 0x41
   118bc:	aa0d      	add	r2, sp, #52	; 0x34
   118be:	2120      	movs	r1, #32
   118c0:	a81e      	add	r0, sp, #120	; 0x78
   118c2:	f006 f81b 	bl	178fc <hex_format>
   118c6:	4605      	mov	r5, r0
   118c8:	4631      	mov	r1, r6
   118ca:	9803      	ldr	r0, [sp, #12]
   118cc:	f7ff ffc0 	bl	11850 <imgr_cli_flags_str>
   118d0:	9000      	str	r0, [sp, #0]
   118d2:	462b      	mov	r3, r5
   118d4:	aa04      	add	r2, sp, #16
   118d6:	4621      	mov	r1, r4
   118d8:	4801      	ldr	r0, [pc, #4]	; (118e0 <imgr_cli_show_slot+0x4c>)
   118da:	f002 fa9b 	bl	13e14 <console_printf>
   118de:	e7e2      	b.n	118a6 <imgr_cli_show_slot+0x12>
   118e0:	00025d64 	.word	0x00025d64

000118e4 <imgr_cli_confirm>:
    }
}

static void
imgr_cli_confirm(void)
{
   118e4:	b508      	push	{r3, lr}
    int rc;

    rc = imgmgr_state_confirm();
   118e6:	f000 f9e8 	bl	11cba <imgmgr_state_confirm>
    if (rc != 0) {
   118ea:	b900      	cbnz	r0, 118ee <imgr_cli_confirm+0xa>
        console_printf("Error confirming image state; rc=%d\n", rc);
        return;
    }
}
   118ec:	bd08      	pop	{r3, pc}
   118ee:	4601      	mov	r1, r0
        console_printf("Error confirming image state; rc=%d\n", rc);
   118f0:	4801      	ldr	r0, [pc, #4]	; (118f8 <imgr_cli_confirm+0x14>)
   118f2:	f002 fa8f 	bl	13e14 <console_printf>
        return;
   118f6:	e7f9      	b.n	118ec <imgr_cli_confirm+0x8>
   118f8:	00025d74 	.word	0x00025d74

000118fc <imgr_cli_hash_parse>:
{
   118fc:	b530      	push	{r4, r5, lr}
   118fe:	b08b      	sub	sp, #44	; 0x2c
   11900:	4604      	mov	r4, r0
   11902:	460d      	mov	r5, r1
    rc = hex_parse(arg, strlen(arg), hash, sizeof hash);
   11904:	f7fe ff00 	bl	10708 <strlen>
   11908:	4601      	mov	r1, r0
   1190a:	2320      	movs	r3, #32
   1190c:	aa02      	add	r2, sp, #8
   1190e:	4620      	mov	r0, r4
   11910:	f006 f820 	bl	17954 <hex_parse>
    if (rc != sizeof hash) {
   11914:	2820      	cmp	r0, #32
   11916:	d10a      	bne.n	1192e <imgr_cli_hash_parse+0x32>
    slot = imgr_find_by_hash(hash, &ver);
   11918:	4669      	mov	r1, sp
   1191a:	a802      	add	r0, sp, #8
   1191c:	f7ff fcca 	bl	112b4 <imgr_find_by_hash>
    if (slot == -1) {
   11920:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11924:	d006      	beq.n	11934 <imgr_cli_hash_parse+0x38>
    *out_slot = slot;
   11926:	6028      	str	r0, [r5, #0]
    return 0;
   11928:	2000      	movs	r0, #0
}
   1192a:	b00b      	add	sp, #44	; 0x2c
   1192c:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1192e:	f06f 0001 	mvn.w	r0, #1
   11932:	e7fa      	b.n	1192a <imgr_cli_hash_parse+0x2e>
        return SYS_ENOENT;
   11934:	f06f 0003 	mvn.w	r0, #3
   11938:	e7f7      	b.n	1192a <imgr_cli_hash_parse+0x2e>
	...

0001193c <imgr_cli_slot_or_hash_parse>:
{
   1193c:	b530      	push	{r4, r5, lr}
   1193e:	b087      	sub	sp, #28
   11940:	4605      	mov	r5, r0
   11942:	460c      	mov	r4, r1
    *out_slot = parse_ll_bounds(arg, 0, 1, &rc);
   11944:	ab05      	add	r3, sp, #20
   11946:	9302      	str	r3, [sp, #8]
   11948:	2201      	movs	r2, #1
   1194a:	2300      	movs	r3, #0
   1194c:	e9cd 2300 	strd	r2, r3, [sp]
   11950:	2200      	movs	r2, #0
   11952:	2300      	movs	r3, #0
   11954:	f005 fc26 	bl	171a4 <parse_ll_bounds>
   11958:	6020      	str	r0, [r4, #0]
    if (rc == 0) {
   1195a:	9805      	ldr	r0, [sp, #20]
   1195c:	b908      	cbnz	r0, 11962 <imgr_cli_slot_or_hash_parse+0x26>
}
   1195e:	b007      	add	sp, #28
   11960:	bd30      	pop	{r4, r5, pc}
    rc = imgr_cli_hash_parse(arg, out_slot);
   11962:	4621      	mov	r1, r4
   11964:	4628      	mov	r0, r5
   11966:	f7ff ffc9 	bl	118fc <imgr_cli_hash_parse>
   1196a:	9005      	str	r0, [sp, #20]
    switch (rc) {
   1196c:	f110 0f04 	cmn.w	r0, #4
   11970:	d007      	beq.n	11982 <imgr_cli_slot_or_hash_parse+0x46>
   11972:	2800      	cmp	r0, #0
   11974:	d0f3      	beq.n	1195e <imgr_cli_slot_or_hash_parse+0x22>
        console_printf("Invalid slot number or image hash: %s\n", arg);
   11976:	4629      	mov	r1, r5
   11978:	4805      	ldr	r0, [pc, #20]	; (11990 <imgr_cli_slot_or_hash_parse+0x54>)
   1197a:	f002 fa4b 	bl	13e14 <console_printf>
        return rc;
   1197e:	9805      	ldr	r0, [sp, #20]
   11980:	e7ed      	b.n	1195e <imgr_cli_slot_or_hash_parse+0x22>
        console_printf("No image with hash: %s\n", arg);
   11982:	4629      	mov	r1, r5
   11984:	4803      	ldr	r0, [pc, #12]	; (11994 <imgr_cli_slot_or_hash_parse+0x58>)
   11986:	f002 fa45 	bl	13e14 <console_printf>
        return rc;
   1198a:	9805      	ldr	r0, [sp, #20]
   1198c:	e7e7      	b.n	1195e <imgr_cli_slot_or_hash_parse+0x22>
   1198e:	bf00      	nop
   11990:	00025db4 	.word	0x00025db4
   11994:	00025d9c 	.word	0x00025d9c

00011998 <imgr_cli_set_pending>:
{
   11998:	b510      	push	{r4, lr}
   1199a:	b082      	sub	sp, #8
   1199c:	460c      	mov	r4, r1
    rc = imgr_cli_slot_or_hash_parse(arg, &slot);
   1199e:	a901      	add	r1, sp, #4
   119a0:	f7ff ffcc 	bl	1193c <imgr_cli_slot_or_hash_parse>
    if (rc != 0) {
   119a4:	b108      	cbz	r0, 119aa <imgr_cli_set_pending+0x12>
}
   119a6:	b002      	add	sp, #8
   119a8:	bd10      	pop	{r4, pc}
    rc = imgmgr_state_set_pending(slot, permanent);
   119aa:	4621      	mov	r1, r4
   119ac:	9801      	ldr	r0, [sp, #4]
   119ae:	f000 f92c 	bl	11c0a <imgmgr_state_set_pending>
    if (rc) {
   119b2:	4602      	mov	r2, r0
   119b4:	2800      	cmp	r0, #0
   119b6:	d0f6      	beq.n	119a6 <imgr_cli_set_pending+0xe>
        console_printf("Error setting slot %d to pending; rc=%d\n", slot, rc);
   119b8:	9901      	ldr	r1, [sp, #4]
   119ba:	4802      	ldr	r0, [pc, #8]	; (119c4 <imgr_cli_set_pending+0x2c>)
   119bc:	f002 fa2a 	bl	13e14 <console_printf>
        return;
   119c0:	e7f1      	b.n	119a6 <imgr_cli_set_pending+0xe>
   119c2:	bf00      	nop
   119c4:	00025ddc 	.word	0x00025ddc

000119c8 <imgr_cli_erase>:

static void
imgr_cli_erase(void)
{
   119c8:	b510      	push	{r4, lr}
   119ca:	b082      	sub	sp, #8
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = imgmgr_find_best_area_id();
   119cc:	f7ff fc90 	bl	112f0 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   119d0:	1e04      	subs	r4, r0, #0
   119d2:	db14      	blt.n	119fe <imgr_cli_erase+0x36>
        if (area_id == FLASH_AREA_IMAGE_1) {
            log_fcb_slot1_lock();
        }
#endif

        rc = flash_area_open(area_id, &fa);
   119d4:	a901      	add	r1, sp, #4
   119d6:	b2e0      	uxtb	r0, r4
   119d8:	f002 fb1c 	bl	14014 <flash_area_open>
        if (rc) {
   119dc:	b950      	cbnz	r0, 119f4 <imgr_cli_erase+0x2c>
            console_printf("Error opening area %d\n", area_id);
            return;
        }
        rc = flash_area_erase(fa, 0, fa->fa_size);
   119de:	9801      	ldr	r0, [sp, #4]
   119e0:	6882      	ldr	r2, [r0, #8]
   119e2:	2100      	movs	r1, #0
   119e4:	f002 fb9e 	bl	14124 <flash_area_erase>
        flash_area_close(fa);
        if (rc) {
   119e8:	4601      	mov	r1, r0
   119ea:	b158      	cbz	r0, 11a04 <imgr_cli_erase+0x3c>
            console_printf("Error erasing area rc=%d\n", rc);
   119ec:	4806      	ldr	r0, [pc, #24]	; (11a08 <imgr_cli_erase+0x40>)
   119ee:	f002 fa11 	bl	13e14 <console_printf>
   119f2:	e007      	b.n	11a04 <imgr_cli_erase+0x3c>
            console_printf("Error opening area %d\n", area_id);
   119f4:	4621      	mov	r1, r4
   119f6:	4805      	ldr	r0, [pc, #20]	; (11a0c <imgr_cli_erase+0x44>)
   119f8:	f002 fa0c 	bl	13e14 <console_printf>
            return;
   119fc:	e002      	b.n	11a04 <imgr_cli_erase+0x3c>
        }
    } else {
        /*
         * No slot where to erase!
         */
        console_printf("No suitable area to erase\n");
   119fe:	4804      	ldr	r0, [pc, #16]	; (11a10 <imgr_cli_erase+0x48>)
   11a00:	f002 fa08 	bl	13e14 <console_printf>
    }
}
   11a04:	b002      	add	sp, #8
   11a06:	bd10      	pop	{r4, pc}
   11a08:	00025e20 	.word	0x00025e20
   11a0c:	00025e08 	.word	0x00025e08
   11a10:	00025e3c 	.word	0x00025e3c

00011a14 <imgr_cli_cmd>:

static int
imgr_cli_cmd(int argc, char **argv)
{
   11a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i;

    if (argc < 2) {
   11a16:	2801      	cmp	r0, #1
   11a18:	dd14      	ble.n	11a44 <imgr_cli_cmd+0x30>
   11a1a:	4605      	mov	r5, r0
   11a1c:	460e      	mov	r6, r1
        imgr_cli_too_few_args();
        return 0;
    }
    if (!strcmp(argv[1], "list")) {
   11a1e:	684f      	ldr	r7, [r1, #4]
   11a20:	491d      	ldr	r1, [pc, #116]	; (11a98 <imgr_cli_cmd+0x84>)
   11a22:	4638      	mov	r0, r7
   11a24:	f7fe fe64 	bl	106f0 <strcmp>
   11a28:	4604      	mov	r4, r0
   11a2a:	b190      	cbz	r0, 11a52 <imgr_cli_cmd+0x3e>
        for (i = 0; i < 2; i++) {
            imgr_cli_show_slot(i);
        }
    } else if (!strcmp(argv[1], "test")) {
   11a2c:	491b      	ldr	r1, [pc, #108]	; (11a9c <imgr_cli_cmd+0x88>)
   11a2e:	4638      	mov	r0, r7
   11a30:	f7fe fe5e 	bl	106f0 <strcmp>
   11a34:	b9a0      	cbnz	r0, 11a60 <imgr_cli_cmd+0x4c>
        if (argc < 3) {
   11a36:	2d02      	cmp	r5, #2
   11a38:	dd0f      	ble.n	11a5a <imgr_cli_cmd+0x46>
            imgr_cli_too_few_args();
            return 0;
        } else {
            imgr_cli_set_pending(argv[2], 0);
   11a3a:	2100      	movs	r1, #0
   11a3c:	68b0      	ldr	r0, [r6, #8]
   11a3e:	f7ff ffab 	bl	11998 <imgr_cli_set_pending>
   11a42:	e008      	b.n	11a56 <imgr_cli_cmd+0x42>
        imgr_cli_too_few_args();
   11a44:	f7ff fefc 	bl	11840 <imgr_cli_too_few_args>
        return 0;
   11a48:	e005      	b.n	11a56 <imgr_cli_cmd+0x42>
            imgr_cli_show_slot(i);
   11a4a:	4620      	mov	r0, r4
   11a4c:	f7ff ff22 	bl	11894 <imgr_cli_show_slot>
        for (i = 0; i < 2; i++) {
   11a50:	3401      	adds	r4, #1
   11a52:	2c01      	cmp	r4, #1
   11a54:	ddf9      	ble.n	11a4a <imgr_cli_cmd+0x36>
        imgr_cli_erase();
    } else {
        console_printf("Unknown cmd\n");
    }
    return 0;
}
   11a56:	2000      	movs	r0, #0
   11a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            imgr_cli_too_few_args();
   11a5a:	f7ff fef1 	bl	11840 <imgr_cli_too_few_args>
            return 0;
   11a5e:	e7fa      	b.n	11a56 <imgr_cli_cmd+0x42>
    } else if (!strcmp(argv[1], "confirm")) {
   11a60:	490f      	ldr	r1, [pc, #60]	; (11aa0 <imgr_cli_cmd+0x8c>)
   11a62:	4638      	mov	r0, r7
   11a64:	f7fe fe44 	bl	106f0 <strcmp>
   11a68:	b948      	cbnz	r0, 11a7e <imgr_cli_cmd+0x6a>
        if (argc < 3) {
   11a6a:	2d02      	cmp	r5, #2
   11a6c:	dc02      	bgt.n	11a74 <imgr_cli_cmd+0x60>
            imgr_cli_confirm();
   11a6e:	f7ff ff39 	bl	118e4 <imgr_cli_confirm>
   11a72:	e7f0      	b.n	11a56 <imgr_cli_cmd+0x42>
            imgr_cli_set_pending(argv[2], 1);
   11a74:	2101      	movs	r1, #1
   11a76:	68b0      	ldr	r0, [r6, #8]
   11a78:	f7ff ff8e 	bl	11998 <imgr_cli_set_pending>
   11a7c:	e7eb      	b.n	11a56 <imgr_cli_cmd+0x42>
    } else if (!strcmp(argv[1], "erase")) {
   11a7e:	4909      	ldr	r1, [pc, #36]	; (11aa4 <imgr_cli_cmd+0x90>)
   11a80:	4638      	mov	r0, r7
   11a82:	f7fe fe35 	bl	106f0 <strcmp>
   11a86:	b910      	cbnz	r0, 11a8e <imgr_cli_cmd+0x7a>
        imgr_cli_erase();
   11a88:	f7ff ff9e 	bl	119c8 <imgr_cli_erase>
   11a8c:	e7e3      	b.n	11a56 <imgr_cli_cmd+0x42>
        console_printf("Unknown cmd\n");
   11a8e:	4806      	ldr	r0, [pc, #24]	; (11aa8 <imgr_cli_cmd+0x94>)
   11a90:	f002 f9c0 	bl	13e14 <console_printf>
   11a94:	e7df      	b.n	11a56 <imgr_cli_cmd+0x42>
   11a96:	bf00      	nop
   11a98:	00025764 	.word	0x00025764
   11a9c:	00025e58 	.word	0x00025e58
   11aa0:	00025e60 	.word	0x00025e60
   11aa4:	00025e68 	.word	0x00025e68
   11aa8:	00025854 	.word	0x00025854

00011aac <imgr_cli_register>:

int
imgr_cli_register(void)
{
   11aac:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_imgr_cmd);
   11aae:	4802      	ldr	r0, [pc, #8]	; (11ab8 <imgr_cli_register+0xc>)
   11ab0:	f003 fea8 	bl	15804 <shell_cmd_register>
}
   11ab4:	bd08      	pop	{r3, pc}
   11ab6:	bf00      	nop
   11ab8:	200006cc 	.word	0x200006cc

00011abc <imgmgr_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMGMGR_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   11abc:	2000      	movs	r0, #0
   11abe:	4770      	bx	lr

00011ac0 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
   11ac0:	b508      	push	{r3, lr}
   11ac2:	4601      	mov	r1, r0
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
   11ac4:	2200      	movs	r2, #0
   11ac6:	4802      	ldr	r0, [pc, #8]	; (11ad0 <imgmgr_log_upload_start+0x10>)
   11ac8:	f7ff fff8 	bl	11abc <imgmgr_log_gen>
}
   11acc:	bd08      	pop	{r3, pc}
   11ace:	bf00      	nop
   11ad0:	00025eec 	.word	0x00025eec

00011ad4 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
   11ad4:	b508      	push	{r3, lr}
   11ad6:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
   11ad8:	2100      	movs	r1, #0
   11ada:	4802      	ldr	r0, [pc, #8]	; (11ae4 <imgmgr_log_upload_done+0x10>)
   11adc:	f7ff ffee 	bl	11abc <imgmgr_log_gen>
}
   11ae0:	bd08      	pop	{r3, pc}
   11ae2:	bf00      	nop
   11ae4:	00025ef4 	.word	0x00025ef4

00011ae8 <imgmgr_log_pending>:

int
imgmgr_log_pending(int status, const uint8_t *hash)
{
   11ae8:	b508      	push	{r3, lr}
   11aea:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_PEND, status, hash);
   11aec:	4601      	mov	r1, r0
   11aee:	4802      	ldr	r0, [pc, #8]	; (11af8 <imgmgr_log_pending+0x10>)
   11af0:	f7ff ffe4 	bl	11abc <imgmgr_log_gen>
}
   11af4:	bd08      	pop	{r3, pc}
   11af6:	bf00      	nop
   11af8:	00025efc 	.word	0x00025efc

00011afc <imgmgr_log_confirm>:

int
imgmgr_log_confirm(int status, const uint8_t *hash)
{
   11afc:	b508      	push	{r3, lr}
   11afe:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_CONF, status, hash);
   11b00:	4601      	mov	r1, r0
   11b02:	4802      	ldr	r0, [pc, #8]	; (11b0c <imgmgr_log_confirm+0x10>)
   11b04:	f7ff ffda 	bl	11abc <imgmgr_log_gen>
}
   11b08:	bd08      	pop	{r3, pc}
   11b0a:	bf00      	nop
   11b0c:	00025f04 	.word	0x00025f04

00011b10 <imgmgr_state_flags>:
#include "imgmgr_priv.h"
#include "log/log_fcb_slot1.h"

uint8_t
imgmgr_state_flags(int query_slot)
{
   11b10:	b538      	push	{r3, r4, r5, lr}
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   11b12:	2801      	cmp	r0, #1
   11b14:	d809      	bhi.n	11b2a <imgmgr_state_flags+0x1a>
   11b16:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = boot_swap_type();
   11b18:	f005 fca8 	bl	1746c <boot_swap_type>
    switch (swap_type) {
   11b1c:	3801      	subs	r0, #1
   11b1e:	2803      	cmp	r0, #3
   11b20:	d825      	bhi.n	11b6e <imgmgr_state_flags+0x5e>
   11b22:	e8df f000 	tbb	[pc, r0]
   11b26:	1508      	.short	0x1508
   11b28:	1f1a      	.short	0x1f1a
    assert(query_slot == 0 || query_slot == 1);
   11b2a:	2300      	movs	r3, #0
   11b2c:	461a      	mov	r2, r3
   11b2e:	4619      	mov	r1, r3
   11b30:	4618      	mov	r0, r3
   11b32:	f7f7 fb47 	bl	91c4 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   11b36:	b1e4      	cbz	r4, 11b72 <imgmgr_state_flags+0x62>
    flags = 0;
   11b38:	2500      	movs	r5, #0

    /* Slot 0 is always active.  Slot 1 is also active if a split app is
     * currently running.
     */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0 || split_app_active_get()) {
   11b3a:	bb44      	cbnz	r4, 11b8e <imgmgr_state_flags+0x7e>
        flags |= IMGMGR_STATE_F_ACTIVE;
   11b3c:	f045 0504 	orr.w	r5, r5, #4
    }

    /* Read the split/status config state to determine any pending split-image
     * state changes.
     */
    split_mode = split_mode_get();
   11b40:	f005 fd82 	bl	17648 <split_mode_get>
    switch (split_mode) {
   11b44:	2803      	cmp	r0, #3
   11b46:	d838      	bhi.n	11bba <imgmgr_state_flags+0xaa>
   11b48:	e8df f000 	tbb	[pc, r0]
   11b4c:	2d263228 	.word	0x2d263228
        if (query_slot == 0) {
   11b50:	b18c      	cbz	r4, 11b76 <imgmgr_state_flags+0x66>
        } else if (query_slot == 1) {
   11b52:	2c01      	cmp	r4, #1
   11b54:	d011      	beq.n	11b7a <imgmgr_state_flags+0x6a>
    flags = 0;
   11b56:	2500      	movs	r5, #0
   11b58:	e7ef      	b.n	11b3a <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   11b5a:	b184      	cbz	r4, 11b7e <imgmgr_state_flags+0x6e>
        } else if (query_slot == 1) {
   11b5c:	2c01      	cmp	r4, #1
   11b5e:	d010      	beq.n	11b82 <imgmgr_state_flags+0x72>
    flags = 0;
   11b60:	2500      	movs	r5, #0
   11b62:	e7ea      	b.n	11b3a <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   11b64:	b17c      	cbz	r4, 11b86 <imgmgr_state_flags+0x76>
        } else if (query_slot == 1) {
   11b66:	2c01      	cmp	r4, #1
   11b68:	d00f      	beq.n	11b8a <imgmgr_state_flags+0x7a>
    flags = 0;
   11b6a:	2500      	movs	r5, #0
   11b6c:	e7e5      	b.n	11b3a <imgmgr_state_flags+0x2a>
    switch (swap_type) {
   11b6e:	2500      	movs	r5, #0
   11b70:	e7e3      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   11b72:	2506      	movs	r5, #6
   11b74:	e7e1      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b76:	2502      	movs	r5, #2
   11b78:	e7df      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING;
   11b7a:	2501      	movs	r5, #1
   11b7c:	e7dd      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b7e:	2502      	movs	r5, #2
   11b80:	e7db      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   11b82:	2509      	movs	r5, #9
   11b84:	e7d9      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   11b86:	2504      	movs	r5, #4
   11b88:	e7d7      	b.n	11b3a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b8a:	2502      	movs	r5, #2
   11b8c:	e7d5      	b.n	11b3a <imgmgr_state_flags+0x2a>
    if (query_slot == 0 || split_app_active_get()) {
   11b8e:	f005 fd61 	bl	17654 <split_app_active_get>
   11b92:	2800      	cmp	r0, #0
   11b94:	d0d4      	beq.n	11b40 <imgmgr_state_flags+0x30>
   11b96:	e7d1      	b.n	11b3c <imgmgr_state_flags+0x2c>
    case SPLIT_MODE_LOADER:
        break;

    case SPLIT_MODE_APP:
        if (query_slot == 1) {
   11b98:	2c01      	cmp	r4, #1
   11b9a:	d001      	beq.n	11ba0 <imgmgr_state_flags+0x90>
        assert(0);
        break;
    }

    return flags;
}
   11b9c:	4628      	mov	r0, r5
   11b9e:	bd38      	pop	{r3, r4, r5, pc}
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11ba0:	f045 0502 	orr.w	r5, r5, #2
   11ba4:	e7fa      	b.n	11b9c <imgmgr_state_flags+0x8c>
        if (query_slot == 0) {
   11ba6:	2c00      	cmp	r4, #0
   11ba8:	d1f8      	bne.n	11b9c <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   11baa:	f045 0501 	orr.w	r5, r5, #1
   11bae:	e7f5      	b.n	11b9c <imgmgr_state_flags+0x8c>
        if (query_slot == 1) {
   11bb0:	2c01      	cmp	r4, #1
   11bb2:	d1f3      	bne.n	11b9c <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   11bb4:	f045 0501 	orr.w	r5, r5, #1
   11bb8:	e7f0      	b.n	11b9c <imgmgr_state_flags+0x8c>
        assert(0);
   11bba:	2300      	movs	r3, #0
   11bbc:	461a      	mov	r2, r3
   11bbe:	4619      	mov	r1, r3
   11bc0:	4618      	mov	r0, r3
   11bc2:	f7f7 faff 	bl	91c4 <__assert_func>

00011bc6 <imgmgr_state_any_pending>:

static int
imgmgr_state_any_pending(void)
{
   11bc6:	b508      	push	{r3, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   11bc8:	2000      	movs	r0, #0
   11bca:	f7ff ffa1 	bl	11b10 <imgmgr_state_flags>
   11bce:	f010 0f01 	tst.w	r0, #1
   11bd2:	d001      	beq.n	11bd8 <imgmgr_state_any_pending+0x12>
   11bd4:	2001      	movs	r0, #1
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}
   11bd6:	bd08      	pop	{r3, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   11bd8:	2001      	movs	r0, #1
   11bda:	f7ff ff99 	bl	11b10 <imgmgr_state_flags>
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   11bde:	f010 0f01 	tst.w	r0, #1
   11be2:	d101      	bne.n	11be8 <imgmgr_state_any_pending+0x22>
   11be4:	2000      	movs	r0, #0
   11be6:	e7f6      	b.n	11bd6 <imgmgr_state_any_pending+0x10>
   11be8:	2001      	movs	r0, #1
   11bea:	e7f4      	b.n	11bd6 <imgmgr_state_any_pending+0x10>

00011bec <imgmgr_state_slot_in_use>:

int
imgmgr_state_slot_in_use(int slot)
{
   11bec:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   11bee:	f7ff ff8f 	bl	11b10 <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   11bf2:	f010 0f06 	tst.w	r0, #6
   11bf6:	d104      	bne.n	11c02 <imgmgr_state_slot_in_use+0x16>
   11bf8:	f010 0f01 	tst.w	r0, #1
   11bfc:	d003      	beq.n	11c06 <imgmgr_state_slot_in_use+0x1a>
   11bfe:	2001      	movs	r0, #1
   11c00:	e000      	b.n	11c04 <imgmgr_state_slot_in_use+0x18>
   11c02:	2001      	movs	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   11c04:	bd08      	pop	{r3, pc}
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   11c06:	2000      	movs	r0, #0
   11c08:	e7fc      	b.n	11c04 <imgmgr_state_slot_in_use+0x18>

00011c0a <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   11c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c0c:	b08b      	sub	sp, #44	; 0x2c
   11c0e:	4605      	mov	r5, r0
   11c10:	460c      	mov	r4, r1
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   11c12:	f7ff ff7d 	bl	11b10 <imgmgr_state_flags>
   11c16:	4606      	mov	r6, r0
    split_app_active = split_app_active_get();
   11c18:	f005 fd1c 	bl	17654 <split_app_active_get>
   11c1c:	4607      	mov	r7, r0
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   11c1e:	f016 0f02 	tst.w	r6, #2
   11c22:	d001      	beq.n	11c28 <imgmgr_state_set_pending+0x1e>
   11c24:	bb6d      	cbnz	r5, 11c82 <imgmgr_state_set_pending+0x78>
        (slot != 0 || !split_app_active)) {
   11c26:	b378      	cbz	r0, 11c88 <imgmgr_state_set_pending+0x7e>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   11c28:	ab09      	add	r3, sp, #36	; 0x24
   11c2a:	aa01      	add	r2, sp, #4
   11c2c:	2100      	movs	r1, #0
   11c2e:	4628      	mov	r0, r5
   11c30:	f7ff fa9a 	bl	11168 <imgr_read_info>
    if (rc != 0) {
   11c34:	bb58      	cbnz	r0, 11c8e <imgmgr_state_set_pending+0x84>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   11c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c38:	f013 0f10 	tst.w	r3, #16
   11c3c:	d114      	bne.n	11c68 <imgmgr_state_set_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   11c3e:	b13f      	cbz	r7, 11c50 <imgmgr_state_set_pending+0x46>
                rc = MGMT_ERR_EUNKNOWN;
                goto done;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   11c40:	b16c      	cbz	r4, 11c5e <imgmgr_state_set_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   11c42:	2000      	movs	r0, #0
   11c44:	f005 fd7a 	bl	1773c <split_write_split>
   11c48:	4605      	mov	r5, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   11c4a:	bb65      	cbnz	r5, 11ca6 <imgmgr_state_set_pending+0x9c>
    hashp = hash;
   11c4c:	a901      	add	r1, sp, #4
   11c4e:	e020      	b.n	11c92 <imgmgr_state_set_pending+0x88>
            rc = boot_set_pending(permanent);
   11c50:	4620      	mov	r0, r4
   11c52:	f005 fc5d 	bl	17510 <boot_set_pending>
            if (rc != 0) {
   11c56:	4605      	mov	r5, r0
   11c58:	bb10      	cbnz	r0, 11ca0 <imgmgr_state_set_pending+0x96>
    hashp = hash;
   11c5a:	a901      	add	r1, sp, #4
   11c5c:	e019      	b.n	11c92 <imgmgr_state_set_pending+0x88>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   11c5e:	2003      	movs	r0, #3
   11c60:	f005 fd6c 	bl	1773c <split_write_split>
   11c64:	4605      	mov	r5, r0
   11c66:	e7f0      	b.n	11c4a <imgmgr_state_set_pending+0x40>
                goto done;
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   11c68:	b134      	cbz	r4, 11c78 <imgmgr_state_set_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   11c6a:	2002      	movs	r0, #2
   11c6c:	f005 fd66 	bl	1773c <split_write_split>
   11c70:	4605      	mov	r5, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   11c72:	b9dd      	cbnz	r5, 11cac <imgmgr_state_set_pending+0xa2>
    hashp = hash;
   11c74:	a901      	add	r1, sp, #4
   11c76:	e00c      	b.n	11c92 <imgmgr_state_set_pending+0x88>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   11c78:	2001      	movs	r0, #1
   11c7a:	f005 fd5f 	bl	1773c <split_write_split>
   11c7e:	4605      	mov	r5, r0
   11c80:	e7f7      	b.n	11c72 <imgmgr_state_set_pending+0x68>
        rc = MGMT_ERR_EBADSTATE;
   11c82:	2506      	movs	r5, #6
    hashp = NULL;
   11c84:	2100      	movs	r1, #0
   11c86:	e004      	b.n	11c92 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EBADSTATE;
   11c88:	2506      	movs	r5, #6
    hashp = NULL;
   11c8a:	2100      	movs	r1, #0
   11c8c:	e001      	b.n	11c92 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EUNKNOWN;
   11c8e:	2501      	movs	r5, #1
    hashp = NULL;
   11c90:	2100      	movs	r1, #0
            goto done;
        }
    }

done:
    if (permanent) {
   11c92:	b174      	cbz	r4, 11cb2 <imgmgr_state_set_pending+0xa8>
        imgmgr_log_confirm(rc, hashp);
   11c94:	4628      	mov	r0, r5
   11c96:	f7ff ff31 	bl	11afc <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   11c9a:	4628      	mov	r0, r5
   11c9c:	b00b      	add	sp, #44	; 0x2c
   11c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rc = MGMT_ERR_EUNKNOWN;
   11ca0:	2501      	movs	r5, #1
    hashp = hash;
   11ca2:	a901      	add	r1, sp, #4
   11ca4:	e7f5      	b.n	11c92 <imgmgr_state_set_pending+0x88>
                rc = MGMT_ERR_EUNKNOWN;
   11ca6:	2501      	movs	r5, #1
    hashp = hash;
   11ca8:	a901      	add	r1, sp, #4
   11caa:	e7f2      	b.n	11c92 <imgmgr_state_set_pending+0x88>
            rc = MGMT_ERR_EUNKNOWN;
   11cac:	2501      	movs	r5, #1
    hashp = hash;
   11cae:	a901      	add	r1, sp, #4
   11cb0:	e7ef      	b.n	11c92 <imgmgr_state_set_pending+0x88>
        imgmgr_log_pending(rc, hashp);
   11cb2:	4628      	mov	r0, r5
   11cb4:	f7ff ff18 	bl	11ae8 <imgmgr_log_pending>
    return rc;
   11cb8:	e7ef      	b.n	11c9a <imgmgr_state_set_pending+0x90>

00011cba <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   11cba:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
   11cbc:	f7ff ff83 	bl	11bc6 <imgmgr_state_any_pending>
   11cc0:	b9b8      	cbnz	r0, 11cf2 <imgmgr_state_confirm+0x38>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   11cc2:	f005 fc68 	bl	17596 <boot_set_confirmed>
    if (rc != 0) {
   11cc6:	b108      	cbz	r0, 11ccc <imgmgr_state_confirm+0x12>
        rc = MGMT_ERR_EUNKNOWN;
   11cc8:	2401      	movs	r4, #1
   11cca:	e013      	b.n	11cf4 <imgmgr_state_confirm+0x3a>
        goto done;
    }

    /* If a split app in slot 1 is active, confirm it as well. */
    if (split_app_active_get()) {
   11ccc:	f005 fcc2 	bl	17654 <split_app_active_get>
   11cd0:	b138      	cbz	r0, 11ce2 <imgmgr_state_confirm+0x28>
        rc = split_write_split(SPLIT_MODE_APP);
   11cd2:	2002      	movs	r0, #2
   11cd4:	f005 fd32 	bl	1773c <split_write_split>
        if (rc != 0) {
   11cd8:	4604      	mov	r4, r0
   11cda:	b988      	cbnz	r0, 11d00 <imgmgr_state_confirm+0x46>
        /* If logging to slot1 is enabled, we can unlock slot1 here. */
        log_fcb_slot1_unlock();
#endif
    }

    imgmgr_dfu_confirmed();
   11cdc:	f7ff fd7c 	bl	117d8 <imgmgr_dfu_confirmed>
   11ce0:	e008      	b.n	11cf4 <imgmgr_state_confirm+0x3a>
        rc = split_write_split(SPLIT_MODE_LOADER);
   11ce2:	2000      	movs	r0, #0
   11ce4:	f005 fd2a 	bl	1773c <split_write_split>
        if (rc != 0) {
   11ce8:	4604      	mov	r4, r0
   11cea:	2800      	cmp	r0, #0
   11cec:	d0f6      	beq.n	11cdc <imgmgr_state_confirm+0x22>
            rc = MGMT_ERR_EUNKNOWN;
   11cee:	2401      	movs	r4, #1
   11cf0:	e000      	b.n	11cf4 <imgmgr_state_confirm+0x3a>
        rc = MGMT_ERR_EBADSTATE;
   11cf2:	2406      	movs	r4, #6

done:
    imgmgr_log_confirm(rc, NULL);
   11cf4:	2100      	movs	r1, #0
   11cf6:	4620      	mov	r0, r4
   11cf8:	f7ff ff00 	bl	11afc <imgmgr_log_confirm>
    return rc;
}
   11cfc:	4620      	mov	r0, r4
   11cfe:	bd10      	pop	{r4, pc}
            rc = MGMT_ERR_EUNKNOWN;
   11d00:	2401      	movs	r4, #1
   11d02:	e7f7      	b.n	11cf4 <imgmgr_state_confirm+0x3a>

00011d04 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   11d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d08:	b09a      	sub	sp, #104	; 0x68
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   11d0a:	f100 070c 	add.w	r7, r0, #12
   11d0e:	2206      	movs	r2, #6
   11d10:	4961      	ldr	r1, [pc, #388]	; (11e98 <imgmgr_state_read+0x194>)
   11d12:	4638      	mov	r0, r7
   11d14:	f006 fb77 	bl	18406 <cbor_encode_text_string>
   11d18:	4604      	mov	r4, r0

    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   11d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d1e:	a904      	add	r1, sp, #16
   11d20:	4638      	mov	r0, r7
   11d22:	f006 fb77 	bl	18414 <cbor_encoder_create_array>
   11d26:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   11d28:	f04f 0800 	mov.w	r8, #0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   11d2c:	4645      	mov	r5, r8
   11d2e:	e080      	b.n	11e32 <imgmgr_state_read+0x12e>

        if (flags & IMAGE_F_NON_BOOTABLE) {
            any_non_bootable = 1;
        }

        state_flags = imgmgr_state_flags(i);
   11d30:	4628      	mov	r0, r5
   11d32:	f7ff feed 	bl	11b10 <imgmgr_state_flags>
   11d36:	4606      	mov	r6, r0

        g_err |= cbor_encoder_create_map(&images, &image,
   11d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d3c:	4669      	mov	r1, sp
   11d3e:	a804      	add	r0, sp, #16
   11d40:	f006 fb6d 	bl	1841e <cbor_encoder_create_map>
   11d44:	4304      	orrs	r4, r0
   11d46:	2204      	movs	r2, #4
   11d48:	4954      	ldr	r1, [pc, #336]	; (11e9c <imgmgr_state_read+0x198>)
   11d4a:	4668      	mov	r0, sp
   11d4c:	f006 fb5b 	bl	18406 <cbor_encode_text_string>
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   11d50:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   11d52:	462a      	mov	r2, r5
   11d54:	17eb      	asrs	r3, r5, #31
   11d56:	4668      	mov	r0, sp
   11d58:	f006 fada 	bl	18310 <cbor_encode_int>
   11d5c:	4304      	orrs	r4, r0
   11d5e:	2207      	movs	r2, #7
   11d60:	494f      	ldr	r1, [pc, #316]	; (11ea0 <imgmgr_state_read+0x19c>)
   11d62:	4668      	mov	r0, sp
   11d64:	f006 fb4f 	bl	18406 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "version");
   11d68:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   11d6a:	a908      	add	r1, sp, #32
   11d6c:	a817      	add	r0, sp, #92	; 0x5c
   11d6e:	f000 f8f5 	bl	11f5c <imgr_ver_str>
   11d72:	a808      	add	r0, sp, #32
   11d74:	f7fe fcc8 	bl	10708 <strlen>
   11d78:	4602      	mov	r2, r0
   11d7a:	a908      	add	r1, sp, #32
   11d7c:	4668      	mov	r0, sp
   11d7e:	f006 fb42 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   11d82:	4304      	orrs	r4, r0
   11d84:	2204      	movs	r2, #4
   11d86:	4947      	ldr	r1, [pc, #284]	; (11ea4 <imgmgr_state_read+0x1a0>)
   11d88:	4668      	mov	r0, sp
   11d8a:	f006 fb3c 	bl	18406 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "hash");
   11d8e:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   11d90:	2220      	movs	r2, #32
   11d92:	a90f      	add	r1, sp, #60	; 0x3c
   11d94:	4668      	mov	r0, sp
   11d96:	f006 fb2f 	bl	183f8 <cbor_encode_byte_string>
   11d9a:	4304      	orrs	r4, r0
   11d9c:	2208      	movs	r2, #8
   11d9e:	4942      	ldr	r1, [pc, #264]	; (11ea8 <imgmgr_state_read+0x1a4>)
   11da0:	4668      	mov	r0, sp
   11da2:	f006 fb30 	bl	18406 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   11da6:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   11da8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11daa:	f013 0f10 	tst.w	r3, #16
   11dae:	bf0c      	ite	eq
   11db0:	2101      	moveq	r1, #1
   11db2:	2100      	movne	r1, #0
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API CborError cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11db4:	3114      	adds	r1, #20
   11db6:	4668      	mov	r0, sp
   11db8:	f006 faf0 	bl	1839c <cbor_encode_simple_value>
   11dbc:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11dbe:	2207      	movs	r2, #7
   11dc0:	493a      	ldr	r1, [pc, #232]	; (11eac <imgmgr_state_read+0x1a8>)
   11dc2:	4668      	mov	r0, sp
   11dc4:	f006 fb1f 	bl	18406 <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   11dc8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11dca:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11dce:	3114      	adds	r1, #20
   11dd0:	4668      	mov	r0, sp
   11dd2:	f006 fae3 	bl	1839c <cbor_encode_simple_value>
   11dd6:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11dd8:	2209      	movs	r2, #9
   11dda:	4935      	ldr	r1, [pc, #212]	; (11eb0 <imgmgr_state_read+0x1ac>)
   11ddc:	4668      	mov	r0, sp
   11dde:	f006 fb12 	bl	18406 <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   11de2:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11de4:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11de8:	3114      	adds	r1, #20
   11dea:	4668      	mov	r0, sp
   11dec:	f006 fad6 	bl	1839c <cbor_encode_simple_value>
   11df0:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11df2:	2206      	movs	r2, #6
   11df4:	492f      	ldr	r1, [pc, #188]	; (11eb4 <imgmgr_state_read+0x1b0>)
   11df6:	4668      	mov	r0, sp
   11df8:	f006 fb05 	bl	18406 <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   11dfc:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11dfe:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11e02:	3114      	adds	r1, #20
   11e04:	4668      	mov	r0, sp
   11e06:	f006 fac9 	bl	1839c <cbor_encode_simple_value>
   11e0a:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11e0c:	2209      	movs	r2, #9
   11e0e:	492a      	ldr	r1, [pc, #168]	; (11eb8 <imgmgr_state_read+0x1b4>)
   11e10:	4668      	mov	r0, sp
   11e12:	f006 faf8 	bl	18406 <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   11e16:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11e18:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11e1c:	3114      	adds	r1, #20
   11e1e:	4668      	mov	r0, sp
   11e20:	f006 fabc 	bl	1839c <cbor_encode_simple_value>
   11e24:	4304      	orrs	r4, r0
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   11e26:	4669      	mov	r1, sp
   11e28:	a804      	add	r0, sp, #16
   11e2a:	f006 fb06 	bl	1843a <cbor_encoder_close_container>
   11e2e:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   11e30:	3501      	adds	r5, #1
   11e32:	2d01      	cmp	r5, #1
   11e34:	dc0f      	bgt.n	11e56 <imgmgr_state_read+0x152>
        rc = imgr_read_info(i, &ver, hash, &flags);
   11e36:	ab19      	add	r3, sp, #100	; 0x64
   11e38:	aa0f      	add	r2, sp, #60	; 0x3c
   11e3a:	a917      	add	r1, sp, #92	; 0x5c
   11e3c:	4628      	mov	r0, r5
   11e3e:	f7ff f993 	bl	11168 <imgr_read_info>
        if (rc != 0) {
   11e42:	2800      	cmp	r0, #0
   11e44:	d1f4      	bne.n	11e30 <imgmgr_state_read+0x12c>
        if (flags & IMAGE_F_NON_BOOTABLE) {
   11e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11e48:	f013 0f10 	tst.w	r3, #16
   11e4c:	f43f af70 	beq.w	11d30 <imgmgr_state_read+0x2c>
            any_non_bootable = 1;
   11e50:	f04f 0801 	mov.w	r8, #1
   11e54:	e76c      	b.n	11d30 <imgmgr_state_read+0x2c>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   11e56:	a904      	add	r1, sp, #16
   11e58:	4638      	mov	r0, r7
   11e5a:	f006 faee 	bl	1843a <cbor_encoder_close_container>
   11e5e:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   11e60:	f1b8 0f00 	cmp.w	r8, #0
   11e64:	d112      	bne.n	11e8c <imgmgr_state_read+0x188>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11e66:	220b      	movs	r2, #11
   11e68:	4914      	ldr	r1, [pc, #80]	; (11ebc <imgmgr_state_read+0x1b8>)
   11e6a:	4638      	mov	r0, r7
   11e6c:	f006 facb 	bl	18406 <cbor_encode_text_string>
        split_status = split_check_status();
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   11e70:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   11e72:	4642      	mov	r2, r8
   11e74:	ea4f 73e8 	mov.w	r3, r8, asr #31
   11e78:	4638      	mov	r0, r7
   11e7a:	f006 fa49 	bl	18310 <cbor_encode_int>

    if (g_err) {
   11e7e:	ea54 0300 	orrs.w	r3, r4, r0
   11e82:	d107      	bne.n	11e94 <imgmgr_state_read+0x190>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   11e84:	2000      	movs	r0, #0
}
   11e86:	b01a      	add	sp, #104	; 0x68
   11e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        split_status = split_check_status();
   11e8c:	f005 fbc0 	bl	17610 <split_check_status>
   11e90:	4680      	mov	r8, r0
   11e92:	e7e8      	b.n	11e66 <imgmgr_state_read+0x162>
        return MGMT_ERR_ENOMEM;
   11e94:	2002      	movs	r0, #2
   11e96:	e7f6      	b.n	11e86 <imgmgr_state_read+0x182>
   11e98:	00025f0c 	.word	0x00025f0c
   11e9c:	00025f14 	.word	0x00025f14
   11ea0:	00025f1c 	.word	0x00025f1c
   11ea4:	00025f24 	.word	0x00025f24
   11ea8:	00025f2c 	.word	0x00025f2c
   11eac:	00025f38 	.word	0x00025f38
   11eb0:	00025f40 	.word	0x00025f40
   11eb4:	00025f4c 	.word	0x00025f4c
   11eb8:	00025f54 	.word	0x00025f54
   11ebc:	00025f60 	.word	0x00025f60

00011ec0 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   11ec0:	b510      	push	{r4, lr}
   11ec2:	b0ae      	sub	sp, #184	; 0xb8
   11ec4:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   11ec6:	2100      	movs	r1, #0
   11ec8:	9125      	str	r1, [sp, #148]	; 0x94
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   11eca:	2290      	movs	r2, #144	; 0x90
   11ecc:	4668      	mov	r0, sp
   11ece:	f7fe fbe4 	bl	1069a <memset>
   11ed2:	4b20      	ldr	r3, [pc, #128]	; (11f54 <imgmgr_state_write+0x94>)
   11ed4:	9300      	str	r3, [sp, #0]
   11ed6:	2303      	movs	r3, #3
   11ed8:	f88d 3004 	strb.w	r3, [sp, #4]
   11edc:	ab26      	add	r3, sp, #152	; 0x98
   11ede:	9302      	str	r3, [sp, #8]
   11ee0:	ab25      	add	r3, sp, #148	; 0x94
   11ee2:	9303      	str	r3, [sp, #12]
   11ee4:	2320      	movs	r3, #32
   11ee6:	930a      	str	r3, [sp, #40]	; 0x28
   11ee8:	4b1b      	ldr	r3, [pc, #108]	; (11f58 <imgmgr_state_write+0x98>)
   11eea:	930c      	str	r3, [sp, #48]	; 0x30
   11eec:	2305      	movs	r3, #5
   11eee:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   11ef2:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   11ef6:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   11ef8:	4669      	mov	r1, sp
   11efa:	f104 001c 	add.w	r0, r4, #28
   11efe:	f006 f89b 	bl	18038 <cbor_read_object>
    if (rc != 0) {
   11f02:	bb10      	cbnz	r0, 11f4a <imgmgr_state_write+0x8a>
   11f04:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   11f06:	9a25      	ldr	r2, [sp, #148]	; 0x94
   11f08:	b97a      	cbnz	r2, 11f2a <imgmgr_state_write+0x6a>
        if (confirm) {
   11f0a:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   11f0e:	b152      	cbz	r2, 11f26 <imgmgr_state_write+0x66>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   11f10:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   11f14:	b992      	cbnz	r2, 11f3c <imgmgr_state_write+0x7c>
        /* Confirm current setup. */
        rc = imgmgr_state_confirm();
    } else {
        rc = imgmgr_state_set_pending(slot, confirm);
   11f16:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   11f1a:	4618      	mov	r0, r3
   11f1c:	f7ff fe75 	bl	11c0a <imgmgr_state_set_pending>
    }
    if (rc != 0) {
   11f20:	b178      	cbz	r0, 11f42 <imgmgr_state_write+0x82>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   11f22:	b02e      	add	sp, #184	; 0xb8
   11f24:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   11f26:	2003      	movs	r0, #3
   11f28:	e7fb      	b.n	11f22 <imgmgr_state_write+0x62>
        slot = imgr_find_by_hash(hash, NULL);
   11f2a:	2100      	movs	r1, #0
   11f2c:	a826      	add	r0, sp, #152	; 0x98
   11f2e:	f7ff f9c1 	bl	112b4 <imgr_find_by_hash>
        if (slot < 0) {
   11f32:	1e03      	subs	r3, r0, #0
   11f34:	db0b      	blt.n	11f4e <imgmgr_state_write+0x8e>
    if (slot == 0 && confirm) {
   11f36:	2b00      	cmp	r3, #0
   11f38:	d1ed      	bne.n	11f16 <imgmgr_state_write+0x56>
   11f3a:	e7e9      	b.n	11f10 <imgmgr_state_write+0x50>
        rc = imgmgr_state_confirm();
   11f3c:	f7ff febd 	bl	11cba <imgmgr_state_confirm>
   11f40:	e7ee      	b.n	11f20 <imgmgr_state_write+0x60>
    rc = imgmgr_state_read(cb);
   11f42:	4620      	mov	r0, r4
   11f44:	f7ff fede 	bl	11d04 <imgmgr_state_read>
    if (rc != 0) {
   11f48:	e7eb      	b.n	11f22 <imgmgr_state_write+0x62>
        return MGMT_ERR_EINVAL;
   11f4a:	2003      	movs	r0, #3
   11f4c:	e7e9      	b.n	11f22 <imgmgr_state_write+0x62>
            return MGMT_ERR_EINVAL;
   11f4e:	2003      	movs	r0, #3
   11f50:	e7e7      	b.n	11f22 <imgmgr_state_write+0x62>
   11f52:	bf00      	nop
   11f54:	00025f24 	.word	0x00025f24
   11f58:	00025e60 	.word	0x00025e60

00011f5c <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   11f5c:	b500      	push	{lr}
   11f5e:	b083      	sub	sp, #12
   11f60:	4602      	mov	r2, r0
   11f62:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   11f64:	6853      	ldr	r3, [r2, #4]
   11f66:	b153      	cbz	r3, 11f7e <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   11f68:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   11f6a:	9301      	str	r3, [sp, #4]
   11f6c:	9100      	str	r1, [sp, #0]
   11f6e:	7853      	ldrb	r3, [r2, #1]
   11f70:	7812      	ldrb	r2, [r2, #0]
   11f72:	4907      	ldr	r1, [pc, #28]	; (11f90 <imgr_ver_str+0x34>)
   11f74:	f00f fa83 	bl	2147e <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   11f78:	b003      	add	sp, #12
   11f7a:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   11f7e:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   11f80:	9300      	str	r3, [sp, #0]
   11f82:	7853      	ldrb	r3, [r2, #1]
   11f84:	7812      	ldrb	r2, [r2, #0]
   11f86:	4903      	ldr	r1, [pc, #12]	; (11f94 <imgr_ver_str+0x38>)
   11f88:	f00f fa79 	bl	2147e <sprintf>
   11f8c:	e7f4      	b.n	11f78 <imgr_ver_str+0x1c>
   11f8e:	bf00      	nop
   11f90:	00025f6c 	.word	0x00025f6c
   11f94:	00025f7c 	.word	0x00025f7c

00011f98 <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   11f98:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   11f9a:	f7f7 f9cd 	bl	9338 <os_started>
   11f9e:	b900      	cbnz	r0, 11fa2 <mgmt_group_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   11fa0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   11fa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11fa6:	4802      	ldr	r0, [pc, #8]	; (11fb0 <mgmt_group_list_lock+0x18>)
   11fa8:	f7f8 fec0 	bl	ad2c <os_mutex_pend>
    if (rc != 0) {
   11fac:	e7f8      	b.n	11fa0 <mgmt_group_list_lock+0x8>
   11fae:	bf00      	nop
   11fb0:	20003cf4 	.word	0x20003cf4

00011fb4 <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   11fb4:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   11fb6:	f7f7 f9bf 	bl	9338 <os_started>
   11fba:	b900      	cbnz	r0, 11fbe <mgmt_group_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   11fbc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&mgmt_group_lock);
   11fbe:	4802      	ldr	r0, [pc, #8]	; (11fc8 <mgmt_group_list_unlock+0x14>)
   11fc0:	f7f8 fe58 	bl	ac74 <os_mutex_release>
    if (rc != 0) {
   11fc4:	e7fa      	b.n	11fbc <mgmt_group_list_unlock+0x8>
   11fc6:	bf00      	nop
   11fc8:	20003cf4 	.word	0x20003cf4

00011fcc <mgmt_find_group>:
    return (rc);
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id)
{
   11fcc:	b538      	push	{r3, r4, r5, lr}
   11fce:	4605      	mov	r5, r0
    struct mgmt_group *group;
    int rc;

    group = NULL;

    rc = mgmt_group_list_lock();
   11fd0:	f7ff ffe2 	bl	11f98 <mgmt_group_list_lock>
    if (rc != 0) {
   11fd4:	b960      	cbnz	r0, 11ff0 <mgmt_find_group+0x24>
        goto err;
    }

    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   11fd6:	4b08      	ldr	r3, [pc, #32]	; (11ff8 <mgmt_find_group+0x2c>)
   11fd8:	681c      	ldr	r4, [r3, #0]
   11fda:	b124      	cbz	r4, 11fe6 <mgmt_find_group+0x1a>
        if (group->mg_group_id == group_id) {
   11fdc:	88e3      	ldrh	r3, [r4, #6]
   11fde:	42ab      	cmp	r3, r5
   11fe0:	d001      	beq.n	11fe6 <mgmt_find_group+0x1a>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   11fe2:	68a4      	ldr	r4, [r4, #8]
   11fe4:	e7f9      	b.n	11fda <mgmt_find_group+0xe>
            break;
        }
    }

    rc = mgmt_group_list_unlock();
   11fe6:	f7ff ffe5 	bl	11fb4 <mgmt_group_list_unlock>
    if (rc != 0) {
   11fea:	b918      	cbnz	r0, 11ff4 <mgmt_find_group+0x28>
    }

    return (group);
err:
    return (NULL);
}
   11fec:	4620      	mov	r0, r4
   11fee:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   11ff0:	2400      	movs	r4, #0
   11ff2:	e7fb      	b.n	11fec <mgmt_find_group+0x20>
   11ff4:	2400      	movs	r4, #0
   11ff6:	e7f9      	b.n	11fec <mgmt_find_group+0x20>
   11ff8:	200006dc 	.word	0x200006dc

00011ffc <mgmt_group_register>:
{
   11ffc:	b510      	push	{r4, lr}
   11ffe:	4604      	mov	r4, r0
    rc = mgmt_group_list_lock();
   12000:	f7ff ffca 	bl	11f98 <mgmt_group_list_lock>
    if (rc != 0) {
   12004:	b100      	cbz	r0, 12008 <mgmt_group_register+0xc>
}
   12006:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   12008:	60a0      	str	r0, [r4, #8]
   1200a:	4b04      	ldr	r3, [pc, #16]	; (1201c <mgmt_group_register+0x20>)
   1200c:	685a      	ldr	r2, [r3, #4]
   1200e:	6014      	str	r4, [r2, #0]
   12010:	3408      	adds	r4, #8
   12012:	605c      	str	r4, [r3, #4]
    rc = mgmt_group_list_unlock();
   12014:	f7ff ffce 	bl	11fb4 <mgmt_group_list_unlock>
    if (rc != 0) {
   12018:	e7f5      	b.n	12006 <mgmt_group_register+0xa>
   1201a:	bf00      	nop
   1201c:	200006dc 	.word	0x200006dc

00012020 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   12020:	b510      	push	{r4, lr}
   12022:	460c      	mov	r4, r1
    struct mgmt_group *group;
    const struct mgmt_handler *handler;

    group = mgmt_find_group(group_id);
   12024:	f7ff ffd2 	bl	11fcc <mgmt_find_group>
    if (!group) {
   12028:	4603      	mov	r3, r0
   1202a:	b128      	cbz	r0, 12038 <mgmt_find_handler+0x18>
        goto err;
    }

    if (handler_id >= group->mg_handlers_count) {
   1202c:	8882      	ldrh	r2, [r0, #4]
   1202e:	42a2      	cmp	r2, r4
   12030:	d904      	bls.n	1203c <mgmt_find_handler+0x1c>
        goto err;
    }

    handler = &group->mg_handlers[handler_id];
   12032:	6803      	ldr	r3, [r0, #0]
   12034:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

    return (handler);
err:
    return (NULL);
}
   12038:	4618      	mov	r0, r3
   1203a:	bd10      	pop	{r4, pc}
    return (NULL);
   1203c:	2300      	movs	r3, #0
   1203e:	e7fb      	b.n	12038 <mgmt_find_handler+0x18>

00012040 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   12040:	b538      	push	{r3, r4, r5, lr}
   12042:	460d      	mov	r5, r1
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   12044:	f100 040c 	add.w	r4, r0, #12
   12048:	2202      	movs	r2, #2
   1204a:	4906      	ldr	r1, [pc, #24]	; (12064 <mgmt_cbuf_setoerr+0x24>)
   1204c:	4620      	mov	r0, r4
   1204e:	f006 f9da 	bl	18406 <cbor_encode_text_string>
    if (rc != 0) {
   12052:	b100      	cbz	r0, 12056 <mgmt_cbuf_setoerr+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12054:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&cb->encoder, errcode);
   12056:	462a      	mov	r2, r5
   12058:	17eb      	asrs	r3, r5, #31
   1205a:	4620      	mov	r0, r4
   1205c:	f006 f958 	bl	18310 <cbor_encode_int>
    if (rc != 0) {
   12060:	e7f8      	b.n	12054 <mgmt_cbuf_setoerr+0x14>
   12062:	bf00      	nop
   12064:	00025d0c 	.word	0x00025d0c

00012068 <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   12068:	b538      	push	{r3, r4, r5, lr}
   1206a:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1206c:	7949      	ldrb	r1, [r1, #5]
   1206e:	3908      	subs	r1, #8
   12070:	b289      	uxth	r1, r1
   12072:	f7f7 fdaf 	bl	9bd4 <os_msys_get_pkthdr>
    if (frag != NULL) {
   12076:	4605      	mov	r5, r0
   12078:	b130      	cbz	r0, 12088 <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1207a:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1207c:	3a08      	subs	r2, #8
   1207e:	f104 0118 	add.w	r1, r4, #24
   12082:	3018      	adds	r0, #24
   12084:	f7fe fafc 	bl	10680 <memcpy>
    }

    return frag;
}
   12088:	4628      	mov	r0, r5
   1208a:	bd38      	pop	{r3, r4, r5, pc}

0001208c <nmgr_init_rsp>:
{
   1208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1208e:	4606      	mov	r6, r0
   12090:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   12092:	2108      	movs	r1, #8
   12094:	f7f8 fdb6 	bl	ac04 <os_mbuf_extend>
    if (!hdr) {
   12098:	4604      	mov	r4, r0
   1209a:	b318      	cbz	r0, 120e4 <nmgr_init_rsp+0x58>
    memcpy(hdr, src, sizeof(*hdr));
   1209c:	682a      	ldr	r2, [r5, #0]
   1209e:	686b      	ldr	r3, [r5, #4]
   120a0:	6002      	str	r2, [r0, #0]
   120a2:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   120a4:	2300      	movs	r3, #0
   120a6:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   120a8:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   120aa:	782b      	ldrb	r3, [r5, #0]
   120ac:	f013 0f07 	tst.w	r3, #7
   120b0:	d11a      	bne.n	120e8 <nmgr_init_rsp+0x5c>
   120b2:	2201      	movs	r2, #1
   120b4:	7823      	ldrb	r3, [r4, #0]
   120b6:	f362 0302 	bfi	r3, r2, #0, #3
   120ba:	7023      	strb	r3, [r4, #0]
    hdr->nh_group = src->nh_group;
   120bc:	88ab      	ldrh	r3, [r5, #4]
   120be:	80a3      	strh	r3, [r4, #4]
    hdr->nh_seq = src->nh_seq;
   120c0:	79ab      	ldrb	r3, [r5, #6]
   120c2:	71a3      	strb	r3, [r4, #6]
    hdr->nh_id = src->nh_id;
   120c4:	79eb      	ldrb	r3, [r5, #7]
   120c6:	71e3      	strb	r3, [r4, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   120c8:	4d08      	ldr	r5, [pc, #32]	; (120ec <nmgr_init_rsp+0x60>)
   120ca:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   120ce:	4631      	mov	r1, r6
   120d0:	4638      	mov	r0, r7
   120d2:	f006 f843 	bl	1815c <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   120d6:	2200      	movs	r2, #0
   120d8:	4639      	mov	r1, r7
   120da:	f105 000c 	add.w	r0, r5, #12
   120de:	f006 f8d2 	bl	18286 <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   120e2:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   120e4:	4620      	mov	r0, r4
   120e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   120e8:	2203      	movs	r2, #3
   120ea:	e7e3      	b.n	120b4 <nmgr_init_rsp+0x28>
   120ec:	20003d04 	.word	0x20003d04

000120f0 <nmgr_rsp_tx>:
 * reason for this is to allow the caller to reuse the mbuf for an error
 * response.
 */
static int
nmgr_rsp_tx(struct nmgr_transport *nt, struct os_mbuf **rsp, uint16_t mtu)
{
   120f0:	b570      	push	{r4, r5, r6, lr}
   120f2:	4605      	mov	r5, r0
   120f4:	460c      	mov	r4, r1
   120f6:	4616      	mov	r6, r2
    struct os_mbuf *frag;
    int rc;

    while (*rsp != NULL) {
   120f8:	6823      	ldr	r3, [r4, #0]
   120fa:	b16b      	cbz	r3, 12118 <nmgr_rsp_tx+0x28>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   120fc:	4a08      	ldr	r2, [pc, #32]	; (12120 <nmgr_rsp_tx+0x30>)
   120fe:	4631      	mov	r1, r6
   12100:	4620      	mov	r0, r4
   12102:	f000 fc2f 	bl	12964 <mem_split_frag>
        if (frag == NULL) {
   12106:	4601      	mov	r1, r0
   12108:	b140      	cbz	r0, 1211c <nmgr_rsp_tx+0x2c>
            return MGMT_ERR_ENOMEM;
        }

        rc = nt->nt_output(nt, frag);
   1210a:	69ab      	ldr	r3, [r5, #24]
   1210c:	4628      	mov	r0, r5
   1210e:	4798      	blx	r3
        if (rc != 0) {
   12110:	2800      	cmp	r0, #0
   12112:	d0f1      	beq.n	120f8 <nmgr_rsp_tx+0x8>
            /* Output function already freed mbuf. */
            return MGMT_ERR_EUNKNOWN;
   12114:	2001      	movs	r0, #1
   12116:	e000      	b.n	1211a <nmgr_rsp_tx+0x2a>
        }
    }

    return MGMT_ERR_EOK;
   12118:	2000      	movs	r0, #0
}
   1211a:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1211c:	2002      	movs	r0, #2
   1211e:	e7fc      	b.n	1211a <nmgr_rsp_tx+0x2a>
   12120:	00012069 	.word	0x00012069

00012124 <nmgr_send_err_rsp>:
{
   12124:	b5f0      	push	{r4, r5, r6, r7, lr}
   12126:	b085      	sub	sp, #20
   12128:	4606      	mov	r6, r0
   1212a:	460c      	mov	r4, r1
   1212c:	461d      	mov	r5, r3
    hdr = nmgr_init_rsp(m, hdr);
   1212e:	4611      	mov	r1, r2
   12130:	4620      	mov	r0, r4
   12132:	f7ff ffab 	bl	1208c <nmgr_init_rsp>
    if (!hdr) {
   12136:	b148      	cbz	r0, 1214c <nmgr_send_err_rsp+0x28>
   12138:	4607      	mov	r7, r0
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1213a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1213e:	4669      	mov	r1, sp
   12140:	4811      	ldr	r0, [pc, #68]	; (12188 <nmgr_send_err_rsp+0x64>)
   12142:	f006 f96c 	bl	1841e <cbor_encoder_create_map>
    if (rc != 0) {
   12146:	b128      	cbz	r0, 12154 <nmgr_send_err_rsp+0x30>
}
   12148:	b005      	add	sp, #20
   1214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(m);
   1214c:	4620      	mov	r0, r4
   1214e:	f7f8 fbde 	bl	a90e <os_mbuf_free_chain>
        return;
   12152:	e7f9      	b.n	12148 <nmgr_send_err_rsp+0x24>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   12154:	4629      	mov	r1, r5
   12156:	480d      	ldr	r0, [pc, #52]	; (1218c <nmgr_send_err_rsp+0x68>)
   12158:	f7ff ff72 	bl	12040 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1215c:	2800      	cmp	r0, #0
   1215e:	d1f3      	bne.n	12148 <nmgr_send_err_rsp+0x24>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   12160:	4669      	mov	r1, sp
   12162:	4809      	ldr	r0, [pc, #36]	; (12188 <nmgr_send_err_rsp+0x64>)
   12164:	f006 f969 	bl	1843a <cbor_encoder_close_container>
    if (rc != 0) {
   12168:	2800      	cmp	r0, #0
   1216a:	d1ed      	bne.n	12148 <nmgr_send_err_rsp+0x24>
{   return encoder->writer->bytes_written; }
   1216c:	4907      	ldr	r1, [pc, #28]	; (1218c <nmgr_send_err_rsp+0x68>)
   1216e:	68cb      	ldr	r3, [r1, #12]
   12170:	685a      	ldr	r2, [r3, #4]
        htons(cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder));
   12172:	0213      	lsls	r3, r2, #8
   12174:	b29b      	uxth	r3, r3
   12176:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1217a:	4313      	orrs	r3, r2
    hdr->nh_len =
   1217c:	807b      	strh	r3, [r7, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1217e:	69b3      	ldr	r3, [r6, #24]
   12180:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   12182:	4630      	mov	r0, r6
   12184:	4798      	blx	r3
   12186:	e7df      	b.n	12148 <nmgr_send_err_rsp+0x24>
   12188:	20003d10 	.word	0x20003d10
   1218c:	20003d04 	.word	0x20003d04

00012190 <nmgr_handle_req>:

static void
nmgr_handle_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   12190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12194:	b088      	sub	sp, #32
   12196:	4606      	mov	r6, r0
   12198:	460c      	mov	r4, r1
    uint16_t mtu;
    int rc;

    rsp_hdr = NULL;

    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1219a:	7949      	ldrb	r1, [r1, #5]
   1219c:	3908      	subs	r1, #8
   1219e:	b289      	uxth	r1, r1
   121a0:	f44f 7000 	mov.w	r0, #512	; 0x200
   121a4:	f7f7 fd16 	bl	9bd4 <os_msys_get_pkthdr>
   121a8:	9007      	str	r0, [sp, #28]
    if (!rsp) {
   121aa:	b168      	cbz	r0, 121c8 <nmgr_handle_req+0x38>
        rsp = req;
        req = NULL;
        goto err;
    }

    mtu = nt->nt_get_mtu(req);
   121ac:	69f3      	ldr	r3, [r6, #28]
   121ae:	4620      	mov	r0, r4
   121b0:	4798      	blx	r3
    if (mtu == 0) {
   121b2:	4605      	mov	r5, r0
   121b4:	bb08      	cbnz	r0, 121fa <nmgr_handle_req+0x6a>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
    os_mbuf_free_chain(req);
    return;

err_norsp:
    os_mbuf_free_chain(rsp);
   121b6:	9807      	ldr	r0, [sp, #28]
   121b8:	f7f8 fba9 	bl	a90e <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   121bc:	4620      	mov	r0, r4
   121be:	f7f8 fba6 	bl	a90e <os_mbuf_free_chain>
    return;
}
   121c2:	b008      	add	sp, #32
   121c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   121c8:	4605      	mov	r5, r0
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   121ca:	ab01      	add	r3, sp, #4
   121cc:	2208      	movs	r2, #8
   121ce:	2100      	movs	r1, #0
   121d0:	4620      	mov	r0, r4
   121d2:	f7f8 fc12 	bl	a9fa <os_mbuf_copydata>
        if (rc < 0) {
   121d6:	1e07      	subs	r7, r0, #0
   121d8:	dbed      	blt.n	121b6 <nmgr_handle_req+0x26>
        rsp = req;
   121da:	9407      	str	r4, [sp, #28]
        req = NULL;
   121dc:	462c      	mov	r4, r5
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   121de:	9807      	ldr	r0, [sp, #28]
   121e0:	8a01      	ldrh	r1, [r0, #16]
   121e2:	f7f8 fc37 	bl	aa54 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   121e6:	463b      	mov	r3, r7
   121e8:	aa01      	add	r2, sp, #4
   121ea:	9907      	ldr	r1, [sp, #28]
   121ec:	4630      	mov	r0, r6
   121ee:	f7ff ff99 	bl	12124 <nmgr_send_err_rsp>
    os_mbuf_free_chain(req);
   121f2:	4620      	mov	r0, r4
   121f4:	f7f8 fb8b 	bl	a90e <os_mbuf_free_chain>
    return;
   121f8:	e7e3      	b.n	121c2 <nmgr_handle_req+0x32>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   121fa:	7962      	ldrb	r2, [r4, #5]
   121fc:	3a08      	subs	r2, #8
   121fe:	f104 0118 	add.w	r1, r4, #24
   12202:	9807      	ldr	r0, [sp, #28]
   12204:	3018      	adds	r0, #24
   12206:	f7fe fa3b 	bl	10680 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   1220a:	ab01      	add	r3, sp, #4
   1220c:	2208      	movs	r2, #8
   1220e:	2100      	movs	r1, #0
   12210:	4620      	mov	r0, r4
   12212:	f7f8 fbf2 	bl	a9fa <os_mbuf_copydata>
    if (rc < 0) {
   12216:	2800      	cmp	r0, #0
   12218:	dbcd      	blt.n	121b6 <nmgr_handle_req+0x26>
    hdr.nh_len = ntohs(hdr.nh_len);
   1221a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1221e:	0213      	lsls	r3, r2, #8
   12220:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   12224:	f8ad 3006 	strh.w	r3, [sp, #6]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   12228:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1222c:	0218      	lsls	r0, r3, #8
   1222e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   12232:	f89d 100b 	ldrb.w	r1, [sp, #11]
   12236:	b280      	uxth	r0, r0
   12238:	f7ff fef2 	bl	12020 <mgmt_find_handler>
    if (!handler) {
   1223c:	4680      	mov	r8, r0
   1223e:	2800      	cmp	r0, #0
   12240:	d062      	beq.n	12308 <nmgr_handle_req+0x178>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   12242:	a901      	add	r1, sp, #4
   12244:	9807      	ldr	r0, [sp, #28]
   12246:	f7ff ff21 	bl	1208c <nmgr_init_rsp>
    if (!rsp_hdr) {
   1224a:	4681      	mov	r9, r0
   1224c:	2800      	cmp	r0, #0
   1224e:	d0b2      	beq.n	121b6 <nmgr_handle_req+0x26>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   12250:	4f2f      	ldr	r7, [pc, #188]	; (12310 <nmgr_handle_req+0x180>)
   12252:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   12256:	2208      	movs	r2, #8
   12258:	4621      	mov	r1, r4
   1225a:	4650      	mov	r0, sl
   1225c:	f005 ff46 	bl	180ec <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   12260:	f107 031c 	add.w	r3, r7, #28
   12264:	463a      	mov	r2, r7
   12266:	2100      	movs	r1, #0
   12268:	4650      	mov	r0, sl
   1226a:	f006 fb76 	bl	1895a <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1226e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12272:	a903      	add	r1, sp, #12
   12274:	f107 000c 	add.w	r0, r7, #12
   12278:	f006 f8d1 	bl	1841e <cbor_encoder_create_map>
    if (rc != 0) {
   1227c:	2800      	cmp	r0, #0
   1227e:	d145      	bne.n	1230c <nmgr_handle_req+0x17c>
    if (hdr.nh_op == NMGR_OP_READ) {
   12280:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12284:	f013 0307 	ands.w	r3, r3, #7
   12288:	d10e      	bne.n	122a8 <nmgr_handle_req+0x118>
        if (handler->mh_read) {
   1228a:	f8d8 3000 	ldr.w	r3, [r8]
   1228e:	b1a3      	cbz	r3, 122ba <nmgr_handle_req+0x12a>
            rc = handler->mh_read(&nmgr_task_cbuf.n_b);
   12290:	4638      	mov	r0, r7
   12292:	4798      	blx	r3
   12294:	4607      	mov	r7, r0
    if (rc != 0) {
   12296:	2f00      	cmp	r7, #0
   12298:	d1a1      	bne.n	121de <nmgr_handle_req+0x4e>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1229a:	a903      	add	r1, sp, #12
   1229c:	481d      	ldr	r0, [pc, #116]	; (12314 <nmgr_handle_req+0x184>)
   1229e:	f006 f8cc 	bl	1843a <cbor_encoder_close_container>
    if (rc != 0) {
   122a2:	b180      	cbz	r0, 122c6 <nmgr_handle_req+0x136>
        rc = MGMT_ERR_ENOMEM;
   122a4:	2702      	movs	r7, #2
   122a6:	e79a      	b.n	121de <nmgr_handle_req+0x4e>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   122a8:	2b02      	cmp	r3, #2
   122aa:	d108      	bne.n	122be <nmgr_handle_req+0x12e>
        if (handler->mh_write) {
   122ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
   122b0:	b13b      	cbz	r3, 122c2 <nmgr_handle_req+0x132>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   122b2:	4817      	ldr	r0, [pc, #92]	; (12310 <nmgr_handle_req+0x180>)
   122b4:	4798      	blx	r3
   122b6:	4607      	mov	r7, r0
   122b8:	e7ed      	b.n	12296 <nmgr_handle_req+0x106>
            rc = MGMT_ERR_ENOENT;
   122ba:	2705      	movs	r7, #5
   122bc:	e78f      	b.n	121de <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_EINVAL;
   122be:	2703      	movs	r7, #3
   122c0:	e78d      	b.n	121de <nmgr_handle_req+0x4e>
            rc = MGMT_ERR_ENOENT;
   122c2:	2705      	movs	r7, #5
        goto err;
   122c4:	e78b      	b.n	121de <nmgr_handle_req+0x4e>
   122c6:	4b12      	ldr	r3, [pc, #72]	; (12310 <nmgr_handle_req+0x180>)
   122c8:	68db      	ldr	r3, [r3, #12]
   122ca:	685b      	ldr	r3, [r3, #4]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   122cc:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   122d0:	4413      	add	r3, r2
   122d2:	b29b      	uxth	r3, r3
   122d4:	f8a9 3002 	strh.w	r3, [r9, #2]
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   122d8:	021a      	lsls	r2, r3, #8
   122da:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   122de:	f8a9 3002 	strh.w	r3, [r9, #2]
    rc = nmgr_rsp_tx(nt, &rsp, mtu);
   122e2:	462a      	mov	r2, r5
   122e4:	a907      	add	r1, sp, #28
   122e6:	4630      	mov	r0, r6
   122e8:	f7ff ff02 	bl	120f0 <nmgr_rsp_tx>
    if (rc) {
   122ec:	4607      	mov	r7, r0
   122ee:	b120      	cbz	r0, 122fa <nmgr_handle_req+0x16a>
        if (rsp == NULL) {
   122f0:	9b07      	ldr	r3, [sp, #28]
   122f2:	2b00      	cmp	r3, #0
   122f4:	f47f af73 	bne.w	121de <nmgr_handle_req+0x4e>
   122f8:	e75d      	b.n	121b6 <nmgr_handle_req+0x26>
    os_mbuf_free_chain(rsp);
   122fa:	9807      	ldr	r0, [sp, #28]
   122fc:	f7f8 fb07 	bl	a90e <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   12300:	4620      	mov	r0, r4
   12302:	f7f8 fb04 	bl	a90e <os_mbuf_free_chain>
    return;
   12306:	e75c      	b.n	121c2 <nmgr_handle_req+0x32>
        rc = MGMT_ERR_ENOENT;
   12308:	2705      	movs	r7, #5
   1230a:	e768      	b.n	121de <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_ENOMEM;
   1230c:	2702      	movs	r7, #2
   1230e:	e766      	b.n	121de <nmgr_handle_req+0x4e>
   12310:	20003d04 	.word	0x20003d04
   12314:	20003d10 	.word	0x20003d10

00012318 <nmgr_process>:


static void
nmgr_process(struct nmgr_transport *nt)
{
   12318:	b510      	push	{r4, lr}
   1231a:	4604      	mov	r4, r0
   1231c:	e002      	b.n	12324 <nmgr_process+0xc>
        m = os_mqueue_get(&nt->nt_imq);
        if (!m) {
            break;
        }

        nmgr_handle_req(nt, m);
   1231e:	4620      	mov	r0, r4
   12320:	f7ff ff36 	bl	12190 <nmgr_handle_req>
        m = os_mqueue_get(&nt->nt_imq);
   12324:	4620      	mov	r0, r4
   12326:	f7f8 fa88 	bl	a83a <os_mqueue_get>
        if (!m) {
   1232a:	4601      	mov	r1, r0
   1232c:	2800      	cmp	r0, #0
   1232e:	d1f6      	bne.n	1231e <nmgr_process+0x6>
    }
}
   12330:	bd10      	pop	{r4, pc}

00012332 <nmgr_event_data_in>:

static void
nmgr_event_data_in(struct os_event *ev)
{
   12332:	b508      	push	{r3, lr}
    nmgr_process(ev->ev_arg);
   12334:	6880      	ldr	r0, [r0, #8]
   12336:	f7ff ffef 	bl	12318 <nmgr_process>
}
   1233a:	bd08      	pop	{r3, pc}

0001233c <nmgr_cbuf_init>:
{
   1233c:	b508      	push	{r3, lr}
    memset(njb, 0, sizeof(*njb));
   1233e:	2260      	movs	r2, #96	; 0x60
   12340:	2100      	movs	r1, #0
   12342:	f7fe f9aa 	bl	1069a <memset>
}
   12346:	2000      	movs	r0, #0
   12348:	bd08      	pop	{r3, pc}
	...

0001234c <mgmt_evq_get>:
}
   1234c:	4b01      	ldr	r3, [pc, #4]	; (12354 <mgmt_evq_get+0x8>)
   1234e:	6818      	ldr	r0, [r3, #0]
   12350:	4770      	bx	lr
   12352:	bf00      	nop
   12354:	20003d00 	.word	0x20003d00

00012358 <mgmt_evq_set>:
    nmgr_evq = evq;
   12358:	4b01      	ldr	r3, [pc, #4]	; (12360 <mgmt_evq_set+0x8>)
   1235a:	6018      	str	r0, [r3, #0]
}
   1235c:	4770      	bx	lr
   1235e:	bf00      	nop
   12360:	20003d00 	.word	0x20003d00

00012364 <nmgr_transport_init>:

int
nmgr_transport_init(struct nmgr_transport *nt,
        nmgr_transport_out_func_t output_func,
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
   12364:	b508      	push	{r3, lr}
    int rc;

    nt->nt_output = output_func;
   12366:	6181      	str	r1, [r0, #24]
    nt->nt_get_mtu = get_mtu_func;
   12368:	61c2      	str	r2, [r0, #28]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1236a:	4602      	mov	r2, r0
   1236c:	4901      	ldr	r1, [pc, #4]	; (12374 <nmgr_transport_init+0x10>)
   1236e:	f7f8 fa59 	bl	a824 <os_mqueue_init>
    }

    return (0);
err:
    return (rc);
}
   12372:	bd08      	pop	{r3, pc}
   12374:	00012333 	.word	0x00012333

00012378 <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   12378:	b538      	push	{r3, r4, r5, lr}
   1237a:	4605      	mov	r5, r0
   1237c:	460c      	mov	r4, r1
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1237e:	f7ff ffe5 	bl	1234c <mgmt_evq_get>
   12382:	4601      	mov	r1, r0
   12384:	4622      	mov	r2, r4
   12386:	4628      	mov	r0, r5
   12388:	f7f8 fa68 	bl	a85c <os_mqueue_put>
    if (rc != 0) {
   1238c:	4605      	mov	r5, r0
   1238e:	b908      	cbnz	r0, 12394 <nmgr_rx_req+0x1c>
        os_mbuf_free_chain(req);
    }

    return rc;
}
   12390:	4628      	mov	r0, r5
   12392:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(req);
   12394:	4620      	mov	r0, r4
   12396:	f7f8 faba 	bl	a90e <os_mbuf_free_chain>
    return rc;
   1239a:	e7f9      	b.n	12390 <nmgr_rx_req+0x18>

0001239c <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1239c:	b510      	push	{r4, lr}
   1239e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   123a0:	4b0d      	ldr	r3, [pc, #52]	; (123d8 <nmgr_pkg_init+0x3c>)
   123a2:	781b      	ldrb	r3, [r3, #0]
   123a4:	b19b      	cbz	r3, 123ce <nmgr_pkg_init+0x32>

    rc = nmgr_os_groups_register();
   123a6:	f000 fa79 	bl	1289c <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   123aa:	b138      	cbz	r0, 123bc <nmgr_pkg_init+0x20>
   123ac:	2000      	movs	r0, #0
   123ae:	9000      	str	r0, [sp, #0]
   123b0:	4b0a      	ldr	r3, [pc, #40]	; (123dc <nmgr_pkg_init+0x40>)
   123b2:	681c      	ldr	r4, [r3, #0]
   123b4:	4603      	mov	r3, r0
   123b6:	4602      	mov	r2, r0
   123b8:	4601      	mov	r1, r0
   123ba:	47a0      	blx	r4

    nmgr_cbuf_init(&nmgr_task_cbuf);
   123bc:	4808      	ldr	r0, [pc, #32]	; (123e0 <nmgr_pkg_init+0x44>)
   123be:	f7ff ffbd 	bl	1233c <nmgr_cbuf_init>

    mgmt_evq_set(os_eventq_dflt_get());
   123c2:	f7f7 faef 	bl	99a4 <os_eventq_dflt_get>
   123c6:	f7ff ffc7 	bl	12358 <mgmt_evq_set>
}
   123ca:	b002      	add	sp, #8
   123cc:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   123ce:	461a      	mov	r2, r3
   123d0:	4619      	mov	r1, r3
   123d2:	4618      	mov	r0, r3
   123d4:	f7f6 fef6 	bl	91c4 <__assert_func>
   123d8:	20004bb0 	.word	0x20004bb0
   123dc:	20000768 	.word	0x20000768
   123e0:	20003d04 	.word	0x20003d04

000123e4 <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   123e4:	b570      	push	{r4, r5, r6, lr}
   123e6:	b084      	sub	sp, #16
   123e8:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   123ea:	f7ff ffaf 	bl	1234c <mgmt_evq_get>
   123ee:	4601      	mov	r1, r0
   123f0:	4e0e      	ldr	r6, [pc, #56]	; (1242c <nmgr_reset+0x48>)
   123f2:	2300      	movs	r3, #0
   123f4:	4a0e      	ldr	r2, [pc, #56]	; (12430 <nmgr_reset+0x4c>)
   123f6:	4630      	mov	r0, r6
   123f8:	f7f7 f872 	bl	94e0 <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   123fc:	2306      	movs	r3, #6
   123fe:	f88d 3000 	strb.w	r3, [sp]
   12402:	2400      	movs	r4, #0
   12404:	9401      	str	r4, [sp, #4]
   12406:	9402      	str	r4, [sp, #8]
   12408:	9403      	str	r4, [sp, #12]
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   1240a:	4668      	mov	r0, sp
   1240c:	f002 fb8c 	bl	14b28 <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   12410:	2120      	movs	r1, #32
   12412:	4630      	mov	r0, r6
   12414:	f7f7 f890 	bl	9538 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   12418:	4621      	mov	r1, r4
   1241a:	4628      	mov	r0, r5
   1241c:	f7ff fe10 	bl	12040 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   12420:	b908      	cbnz	r0, 12426 <nmgr_reset+0x42>
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   12422:	b004      	add	sp, #16
   12424:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   12426:	2001      	movs	r0, #1
   12428:	e7fb      	b.n	12422 <nmgr_reset+0x3e>
   1242a:	bf00      	nop
   1242c:	20003d64 	.word	0x20003d64
   12430:	00012435 	.word	0x00012435

00012434 <nmgr_reset_tmo>:
{
   12434:	b508      	push	{r3, lr}
    os_reboot(HAL_RESET_REQUESTED);
   12436:	2006      	movs	r0, #6
   12438:	f7f7 f82d 	bl	9496 <os_reboot>
}
   1243c:	bd08      	pop	{r3, pc}
	...

00012440 <nmgr_datetime_set>:
{
   12440:	b510      	push	{r4, lr}
   12442:	b0a6      	sub	sp, #152	; 0x98
   12444:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   12446:	2260      	movs	r2, #96	; 0x60
   12448:	2100      	movs	r1, #0
   1244a:	4668      	mov	r0, sp
   1244c:	f7fe f925 	bl	1069a <memset>
   12450:	4b12      	ldr	r3, [pc, #72]	; (1249c <nmgr_datetime_set+0x5c>)
   12452:	9300      	str	r3, [sp, #0]
   12454:	2304      	movs	r3, #4
   12456:	f88d 3004 	strb.w	r3, [sp, #4]
   1245a:	ab18      	add	r3, sp, #96	; 0x60
   1245c:	9302      	str	r3, [sp, #8]
   1245e:	2321      	movs	r3, #33	; 0x21
   12460:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   12462:	4669      	mov	r1, sp
   12464:	f104 001c 	add.w	r0, r4, #28
   12468:	f005 fde6 	bl	18038 <cbor_read_object>
    if (rc) {
   1246c:	b978      	cbnz	r0, 1248e <nmgr_datetime_set+0x4e>
    rc = datetime_parse(buf, &tv, &tz);
   1246e:	aa21      	add	r2, sp, #132	; 0x84
   12470:	a922      	add	r1, sp, #136	; 0x88
   12472:	a818      	add	r0, sp, #96	; 0x60
   12474:	f004 fd02 	bl	16e7c <datetime_parse>
    if (!rc) {
   12478:	b960      	cbnz	r0, 12494 <nmgr_datetime_set+0x54>
        rc = os_settimeofday(&tv, &tz);
   1247a:	a921      	add	r1, sp, #132	; 0x84
   1247c:	a822      	add	r0, sp, #136	; 0x88
   1247e:	f7f8 f85d 	bl	a53c <os_settimeofday>
        if (rc) {
   12482:	b948      	cbnz	r0, 12498 <nmgr_datetime_set+0x58>
    rc = mgmt_cbuf_setoerr(cb, 0);
   12484:	2100      	movs	r1, #0
   12486:	4620      	mov	r0, r4
   12488:	f7ff fdda 	bl	12040 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1248c:	e000      	b.n	12490 <nmgr_datetime_set+0x50>
        return MGMT_ERR_EINVAL;
   1248e:	2003      	movs	r0, #3
}
   12490:	b026      	add	sp, #152	; 0x98
   12492:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   12494:	2003      	movs	r0, #3
   12496:	e7fb      	b.n	12490 <nmgr_datetime_set+0x50>
          return MGMT_ERR_EINVAL;
   12498:	2003      	movs	r0, #3
   1249a:	e7f9      	b.n	12490 <nmgr_datetime_set+0x50>
   1249c:	00025f88 	.word	0x00025f88

000124a0 <nmgr_def_console_echo>:
{
   124a0:	b510      	push	{r4, lr}
   124a2:	b09a      	sub	sp, #104	; 0x68
   124a4:	4604      	mov	r4, r0
    long long int echo_on = 1;
   124a6:	2201      	movs	r2, #1
   124a8:	2300      	movs	r3, #0
   124aa:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    struct cbor_attr_t attrs[2] = {
   124ae:	2260      	movs	r2, #96	; 0x60
   124b0:	2100      	movs	r1, #0
   124b2:	4668      	mov	r0, sp
   124b4:	f7fe f8f1 	bl	1069a <memset>
   124b8:	4b0f      	ldr	r3, [pc, #60]	; (124f8 <nmgr_def_console_echo+0x58>)
   124ba:	9300      	str	r3, [sp, #0]
   124bc:	2301      	movs	r3, #1
   124be:	f88d 3004 	strb.w	r3, [sp, #4]
   124c2:	aa18      	add	r2, sp, #96	; 0x60
   124c4:	9202      	str	r2, [sp, #8]
   124c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    rc = cbor_read_object(&cb->it, attrs);
   124ca:	4669      	mov	r1, sp
   124cc:	f104 001c 	add.w	r0, r4, #28
   124d0:	f005 fdb2 	bl	18038 <cbor_read_object>
    if (rc) {
   124d4:	b970      	cbnz	r0, 124f4 <nmgr_def_console_echo+0x54>
   124d6:	4604      	mov	r4, r0
    if (echo_on) {
   124d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   124da:	9b19      	ldr	r3, [sp, #100]	; 0x64
   124dc:	4313      	orrs	r3, r2
   124de:	d005      	beq.n	124ec <nmgr_def_console_echo+0x4c>
        console_echo(1);
   124e0:	2001      	movs	r0, #1
   124e2:	f001 f873 	bl	135cc <console_echo>
}
   124e6:	4620      	mov	r0, r4
   124e8:	b01a      	add	sp, #104	; 0x68
   124ea:	bd10      	pop	{r4, pc}
        console_echo(0);
   124ec:	2000      	movs	r0, #0
   124ee:	f001 f86d 	bl	135cc <console_echo>
   124f2:	e7f8      	b.n	124e6 <nmgr_def_console_echo+0x46>
        return MGMT_ERR_EINVAL;
   124f4:	2403      	movs	r4, #3
   124f6:	e7f6      	b.n	124e6 <nmgr_def_console_echo+0x46>
   124f8:	00025f94 	.word	0x00025f94

000124fc <nmgr_def_echo>:
{
   124fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   124fe:	b0b9      	sub	sp, #228	; 0xe4
   12500:	4604      	mov	r4, r0
    char echo_buf[128] = {'\0'};
   12502:	2500      	movs	r5, #0
   12504:	9518      	str	r5, [sp, #96]	; 0x60
   12506:	227c      	movs	r2, #124	; 0x7c
   12508:	4629      	mov	r1, r5
   1250a:	a819      	add	r0, sp, #100	; 0x64
   1250c:	f7fe f8c5 	bl	1069a <memset>
    struct cbor_attr_t attrs[2] = {
   12510:	2260      	movs	r2, #96	; 0x60
   12512:	4629      	mov	r1, r5
   12514:	4668      	mov	r0, sp
   12516:	f7fe f8c0 	bl	1069a <memset>
   1251a:	4b14      	ldr	r3, [pc, #80]	; (1256c <nmgr_def_echo+0x70>)
   1251c:	9300      	str	r3, [sp, #0]
   1251e:	2304      	movs	r3, #4
   12520:	f88d 3004 	strb.w	r3, [sp, #4]
   12524:	ad18      	add	r5, sp, #96	; 0x60
   12526:	9502      	str	r5, [sp, #8]
   12528:	2380      	movs	r3, #128	; 0x80
   1252a:	930a      	str	r3, [sp, #40]	; 0x28
   1252c:	2201      	movs	r2, #1
   1252e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   12532:	f104 070c 	add.w	r7, r4, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   12536:	490e      	ldr	r1, [pc, #56]	; (12570 <nmgr_def_echo+0x74>)
   12538:	4638      	mov	r0, r7
   1253a:	f005 ff64 	bl	18406 <cbor_encode_text_string>
   1253e:	4606      	mov	r6, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   12540:	4669      	mov	r1, sp
   12542:	f104 001c 	add.w	r0, r4, #28
   12546:	f005 fd77 	bl	18038 <cbor_read_object>
   1254a:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1254c:	4628      	mov	r0, r5
   1254e:	f7fe f8db 	bl	10708 <strlen>
   12552:	4602      	mov	r2, r0
   12554:	4629      	mov	r1, r5
   12556:	4638      	mov	r0, r7
   12558:	f005 ff55 	bl	18406 <cbor_encode_text_string>
    if (g_err) {
   1255c:	ea56 0300 	orrs.w	r3, r6, r0
   12560:	d102      	bne.n	12568 <nmgr_def_echo+0x6c>
    return (0);
   12562:	2000      	movs	r0, #0
}
   12564:	b039      	add	sp, #228	; 0xe4
   12566:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   12568:	2002      	movs	r0, #2
   1256a:	e7fb      	b.n	12564 <nmgr_def_echo+0x68>
   1256c:	0002527c 	.word	0x0002527c
   12570:	00025838 	.word	0x00025838

00012574 <nmgr_datetime_get>:
{
   12574:	b570      	push	{r4, r5, r6, lr}
   12576:	b08e      	sub	sp, #56	; 0x38
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   12578:	f100 040c 	add.w	r4, r0, #12
   1257c:	2202      	movs	r2, #2
   1257e:	491b      	ldr	r1, [pc, #108]	; (125ec <nmgr_datetime_get+0x78>)
   12580:	4620      	mov	r0, r4
   12582:	f005 ff40 	bl	18406 <cbor_encode_text_string>
   12586:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   12588:	2200      	movs	r2, #0
   1258a:	2300      	movs	r3, #0
   1258c:	4620      	mov	r0, r4
   1258e:	f005 febf 	bl	18310 <cbor_encode_int>
   12592:	4305      	orrs	r5, r0
    rc = os_gettimeofday(&tv, &tz);
   12594:	a909      	add	r1, sp, #36	; 0x24
   12596:	a80a      	add	r0, sp, #40	; 0x28
   12598:	f7f7 ff84 	bl	a4a4 <os_gettimeofday>
    assert(rc == 0);
   1259c:	b9d8      	cbnz	r0, 125d6 <nmgr_datetime_get+0x62>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1259e:	2321      	movs	r3, #33	; 0x21
   125a0:	466a      	mov	r2, sp
   125a2:	a909      	add	r1, sp, #36	; 0x24
   125a4:	a80a      	add	r0, sp, #40	; 0x28
   125a6:	f004 fd69 	bl	1707c <datetime_format>
    if (rc) {
   125aa:	4606      	mov	r6, r0
   125ac:	b9c8      	cbnz	r0, 125e2 <nmgr_datetime_get+0x6e>
   125ae:	2208      	movs	r2, #8
   125b0:	490f      	ldr	r1, [pc, #60]	; (125f0 <nmgr_datetime_get+0x7c>)
   125b2:	4620      	mov	r0, r4
   125b4:	f005 ff27 	bl	18406 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   125b8:	4305      	orrs	r5, r0
   125ba:	4668      	mov	r0, sp
   125bc:	f7fe f8a4 	bl	10708 <strlen>
   125c0:	4602      	mov	r2, r0
   125c2:	4669      	mov	r1, sp
   125c4:	4620      	mov	r0, r4
   125c6:	f005 ff1e 	bl	18406 <cbor_encode_text_string>
    if (g_err) {
   125ca:	ea55 0300 	orrs.w	r3, r5, r0
   125ce:	d10a      	bne.n	125e6 <nmgr_datetime_get+0x72>
}
   125d0:	4630      	mov	r0, r6
   125d2:	b00e      	add	sp, #56	; 0x38
   125d4:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   125d6:	2300      	movs	r3, #0
   125d8:	461a      	mov	r2, r3
   125da:	4619      	mov	r1, r3
   125dc:	4618      	mov	r0, r3
   125de:	f7f6 fdf1 	bl	91c4 <__assert_func>
    return (rc);
   125e2:	2603      	movs	r6, #3
   125e4:	e7f4      	b.n	125d0 <nmgr_datetime_get+0x5c>
        return MGMT_ERR_ENOMEM;
   125e6:	2602      	movs	r6, #2
   125e8:	e7f2      	b.n	125d0 <nmgr_datetime_get+0x5c>
   125ea:	bf00      	nop
   125ec:	00025d0c 	.word	0x00025d0c
   125f0:	00025f88 	.word	0x00025f88

000125f4 <nmgr_def_mpstat_read>:
{
   125f4:	b570      	push	{r4, r5, r6, lr}
   125f6:	b094      	sub	sp, #80	; 0x50
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   125f8:	f100 060c 	add.w	r6, r0, #12
   125fc:	2202      	movs	r2, #2
   125fe:	4939      	ldr	r1, [pc, #228]	; (126e4 <nmgr_def_mpstat_read+0xf0>)
   12600:	4630      	mov	r0, r6
   12602:	f005 ff00 	bl	18406 <cbor_encode_text_string>
   12606:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   12608:	2200      	movs	r2, #0
   1260a:	2300      	movs	r3, #0
   1260c:	4630      	mov	r0, r6
   1260e:	f005 fe7f 	bl	18310 <cbor_encode_int>
   12612:	4304      	orrs	r4, r0
   12614:	2206      	movs	r2, #6
   12616:	4934      	ldr	r1, [pc, #208]	; (126e8 <nmgr_def_mpstat_read+0xf4>)
   12618:	4630      	mov	r0, r6
   1261a:	f005 fef4 	bl	18406 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   1261e:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   12620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12624:	a904      	add	r1, sp, #16
   12626:	4630      	mov	r0, r6
   12628:	f005 fef9 	bl	1841e <cbor_encoder_create_map>
   1262c:	4304      	orrs	r4, r0
    prev_mp = NULL;
   1262e:	2500      	movs	r5, #0
   12630:	e044      	b.n	126bc <nmgr_def_mpstat_read+0xc8>
   12632:	a80c      	add	r0, sp, #48	; 0x30
   12634:	f7fe f868 	bl	10708 <strlen>
   12638:	4602      	mov	r2, r0
   1263a:	a90c      	add	r1, sp, #48	; 0x30
   1263c:	a804      	add	r0, sp, #16
   1263e:	f005 fee2 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   12642:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   12644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12648:	4669      	mov	r1, sp
   1264a:	a804      	add	r0, sp, #16
   1264c:	f005 fee7 	bl	1841e <cbor_encoder_create_map>
   12650:	4304      	orrs	r4, r0
   12652:	2206      	movs	r2, #6
   12654:	4925      	ldr	r1, [pc, #148]	; (126ec <nmgr_def_mpstat_read+0xf8>)
   12656:	4668      	mov	r0, sp
   12658:	f005 fed5 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1265c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1265e:	9a08      	ldr	r2, [sp, #32]
   12660:	17d3      	asrs	r3, r2, #31
   12662:	4668      	mov	r0, sp
   12664:	f005 fe14 	bl	18290 <cbor_encode_uint>
   12668:	4304      	orrs	r4, r0
   1266a:	2205      	movs	r2, #5
   1266c:	4920      	ldr	r1, [pc, #128]	; (126f0 <nmgr_def_mpstat_read+0xfc>)
   1266e:	4668      	mov	r0, sp
   12670:	f005 fec9 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   12674:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   12676:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12678:	17d3      	asrs	r3, r2, #31
   1267a:	4668      	mov	r0, sp
   1267c:	f005 fe08 	bl	18290 <cbor_encode_uint>
   12680:	4304      	orrs	r4, r0
   12682:	2205      	movs	r2, #5
   12684:	491b      	ldr	r1, [pc, #108]	; (126f4 <nmgr_def_mpstat_read+0x100>)
   12686:	4668      	mov	r0, sp
   12688:	f005 febd 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1268c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1268e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12690:	17d3      	asrs	r3, r2, #31
   12692:	4668      	mov	r0, sp
   12694:	f005 fdfc 	bl	18290 <cbor_encode_uint>
   12698:	4304      	orrs	r4, r0
   1269a:	2203      	movs	r2, #3
   1269c:	4916      	ldr	r1, [pc, #88]	; (126f8 <nmgr_def_mpstat_read+0x104>)
   1269e:	4668      	mov	r0, sp
   126a0:	f005 feb1 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   126a4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   126a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   126a8:	17d3      	asrs	r3, r2, #31
   126aa:	4668      	mov	r0, sp
   126ac:	f005 fdf0 	bl	18290 <cbor_encode_uint>
   126b0:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   126b2:	4669      	mov	r1, sp
   126b4:	a804      	add	r0, sp, #16
   126b6:	f005 fec0 	bl	1843a <cbor_encoder_close_container>
   126ba:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   126bc:	a908      	add	r1, sp, #32
   126be:	4628      	mov	r0, r5
   126c0:	f7f7 f9f8 	bl	9ab4 <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   126c4:	4605      	mov	r5, r0
   126c6:	2800      	cmp	r0, #0
   126c8:	d1b3      	bne.n	12632 <nmgr_def_mpstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   126ca:	a904      	add	r1, sp, #16
   126cc:	4630      	mov	r0, r6
   126ce:	f005 feb4 	bl	1843a <cbor_encoder_close_container>
    if (g_err) {
   126d2:	ea54 0300 	orrs.w	r3, r4, r0
   126d6:	d102      	bne.n	126de <nmgr_def_mpstat_read+0xea>
    return (0);
   126d8:	2000      	movs	r0, #0
}
   126da:	b014      	add	sp, #80	; 0x50
   126dc:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   126de:	2002      	movs	r0, #2
   126e0:	e7fb      	b.n	126da <nmgr_def_mpstat_read+0xe6>
   126e2:	bf00      	nop
   126e4:	00025d0c 	.word	0x00025d0c
   126e8:	00025f9c 	.word	0x00025f9c
   126ec:	00025fa4 	.word	0x00025fa4
   126f0:	00025fac 	.word	0x00025fac
   126f4:	00025fb4 	.word	0x00025fb4
   126f8:	00025fbc 	.word	0x00025fbc

000126fc <nmgr_def_taskstat_read>:
{
   126fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   126fe:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   12700:	f100 060c 	add.w	r6, r0, #12
   12704:	2202      	movs	r2, #2
   12706:	495a      	ldr	r1, [pc, #360]	; (12870 <nmgr_def_taskstat_read+0x174>)
   12708:	4630      	mov	r0, r6
   1270a:	f005 fe7c 	bl	18406 <cbor_encode_text_string>
   1270e:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   12710:	2200      	movs	r2, #0
   12712:	2300      	movs	r3, #0
   12714:	4630      	mov	r0, r6
   12716:	f005 fdfb 	bl	18310 <cbor_encode_int>
   1271a:	4304      	orrs	r4, r0
   1271c:	2205      	movs	r2, #5
   1271e:	4955      	ldr	r1, [pc, #340]	; (12874 <nmgr_def_taskstat_read+0x178>)
   12720:	4630      	mov	r0, r6
   12722:	f005 fe70 	bl	18406 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   12726:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   12728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1272c:	a904      	add	r1, sp, #16
   1272e:	4630      	mov	r0, r6
   12730:	f005 fe75 	bl	1841e <cbor_encoder_create_map>
   12734:	4304      	orrs	r4, r0
    prev_task = NULL;
   12736:	2500      	movs	r5, #0
   12738:	e086      	b.n	12848 <nmgr_def_taskstat_read+0x14c>
   1273a:	a80e      	add	r0, sp, #56	; 0x38
   1273c:	f7fd ffe4 	bl	10708 <strlen>
   12740:	4602      	mov	r2, r0
   12742:	a90e      	add	r1, sp, #56	; 0x38
   12744:	a804      	add	r0, sp, #16
   12746:	f005 fe5e 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1274a:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1274c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12750:	4669      	mov	r1, sp
   12752:	a804      	add	r0, sp, #16
   12754:	f005 fe63 	bl	1841e <cbor_encoder_create_map>
   12758:	4304      	orrs	r4, r0
   1275a:	2204      	movs	r2, #4
   1275c:	4946      	ldr	r1, [pc, #280]	; (12878 <nmgr_def_taskstat_read+0x17c>)
   1275e:	4668      	mov	r0, sp
   12760:	f005 fe51 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   12764:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   12766:	2700      	movs	r7, #0
   12768:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1276c:	463b      	mov	r3, r7
   1276e:	4668      	mov	r0, sp
   12770:	f005 fd8e 	bl	18290 <cbor_encode_uint>
   12774:	4304      	orrs	r4, r0
   12776:	2203      	movs	r2, #3
   12778:	4940      	ldr	r1, [pc, #256]	; (1287c <nmgr_def_taskstat_read+0x180>)
   1277a:	4668      	mov	r0, sp
   1277c:	f005 fe43 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   12780:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   12782:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   12786:	463b      	mov	r3, r7
   12788:	4668      	mov	r0, sp
   1278a:	f005 fd81 	bl	18290 <cbor_encode_uint>
   1278e:	4304      	orrs	r4, r0
   12790:	2205      	movs	r2, #5
   12792:	493b      	ldr	r1, [pc, #236]	; (12880 <nmgr_def_taskstat_read+0x184>)
   12794:	4668      	mov	r0, sp
   12796:	f005 fe36 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1279a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1279c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   127a0:	463b      	mov	r3, r7
   127a2:	4668      	mov	r0, sp
   127a4:	f005 fd74 	bl	18290 <cbor_encode_uint>
   127a8:	4304      	orrs	r4, r0
   127aa:	2206      	movs	r2, #6
   127ac:	4935      	ldr	r1, [pc, #212]	; (12884 <nmgr_def_taskstat_read+0x188>)
   127ae:	4668      	mov	r0, sp
   127b0:	f005 fe29 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   127b4:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   127b6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   127ba:	463b      	mov	r3, r7
   127bc:	4668      	mov	r0, sp
   127be:	f005 fd67 	bl	18290 <cbor_encode_uint>
   127c2:	4304      	orrs	r4, r0
   127c4:	2206      	movs	r2, #6
   127c6:	4930      	ldr	r1, [pc, #192]	; (12888 <nmgr_def_taskstat_read+0x18c>)
   127c8:	4668      	mov	r0, sp
   127ca:	f005 fe1c 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   127ce:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   127d0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   127d4:	463b      	mov	r3, r7
   127d6:	4668      	mov	r0, sp
   127d8:	f005 fd5a 	bl	18290 <cbor_encode_uint>
   127dc:	4304      	orrs	r4, r0
   127de:	2206      	movs	r2, #6
   127e0:	492a      	ldr	r1, [pc, #168]	; (1288c <nmgr_def_taskstat_read+0x190>)
   127e2:	4668      	mov	r0, sp
   127e4:	f005 fe0f 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   127e8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   127ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   127ec:	463b      	mov	r3, r7
   127ee:	4668      	mov	r0, sp
   127f0:	f005 fd4e 	bl	18290 <cbor_encode_uint>
   127f4:	4304      	orrs	r4, r0
   127f6:	2207      	movs	r2, #7
   127f8:	4925      	ldr	r1, [pc, #148]	; (12890 <nmgr_def_taskstat_read+0x194>)
   127fa:	4668      	mov	r0, sp
   127fc:	f005 fe03 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   12800:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   12802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12804:	463b      	mov	r3, r7
   12806:	4668      	mov	r0, sp
   12808:	f005 fd42 	bl	18290 <cbor_encode_uint>
   1280c:	4304      	orrs	r4, r0
   1280e:	220c      	movs	r2, #12
   12810:	4920      	ldr	r1, [pc, #128]	; (12894 <nmgr_def_taskstat_read+0x198>)
   12812:	4668      	mov	r0, sp
   12814:	f005 fdf7 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   12818:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   1281a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1281c:	463b      	mov	r3, r7
   1281e:	4668      	mov	r0, sp
   12820:	f005 fd36 	bl	18290 <cbor_encode_uint>
   12824:	4304      	orrs	r4, r0
   12826:	220c      	movs	r2, #12
   12828:	491b      	ldr	r1, [pc, #108]	; (12898 <nmgr_def_taskstat_read+0x19c>)
   1282a:	4668      	mov	r0, sp
   1282c:	f005 fdeb 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   12830:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   12832:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12834:	463b      	mov	r3, r7
   12836:	4668      	mov	r0, sp
   12838:	f005 fd2a 	bl	18290 <cbor_encode_uint>
   1283c:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1283e:	4669      	mov	r1, sp
   12840:	a804      	add	r0, sp, #16
   12842:	f005 fdfa 	bl	1843a <cbor_encoder_close_container>
   12846:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   12848:	a908      	add	r1, sp, #32
   1284a:	4628      	mov	r0, r5
   1284c:	f7f7 fd46 	bl	a2dc <os_task_info_get_next>
        if (prev_task == NULL) {
   12850:	4605      	mov	r5, r0
   12852:	2800      	cmp	r0, #0
   12854:	f47f af71 	bne.w	1273a <nmgr_def_taskstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   12858:	a904      	add	r1, sp, #16
   1285a:	4630      	mov	r0, r6
   1285c:	f005 fded 	bl	1843a <cbor_encoder_close_container>
    if (g_err) {
   12860:	ea54 0300 	orrs.w	r3, r4, r0
   12864:	d102      	bne.n	1286c <nmgr_def_taskstat_read+0x170>
    return (0);
   12866:	2000      	movs	r0, #0
}
   12868:	b017      	add	sp, #92	; 0x5c
   1286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1286c:	2002      	movs	r0, #2
   1286e:	e7fb      	b.n	12868 <nmgr_def_taskstat_read+0x16c>
   12870:	00025d0c 	.word	0x00025d0c
   12874:	00026640 	.word	0x00026640
   12878:	00025fc0 	.word	0x00025fc0
   1287c:	00025fc8 	.word	0x00025fc8
   12880:	00025fcc 	.word	0x00025fcc
   12884:	00025fd4 	.word	0x00025fd4
   12888:	00025fdc 	.word	0x00025fdc
   1288c:	00025fe4 	.word	0x00025fe4
   12890:	00025fec 	.word	0x00025fec
   12894:	00025ff4 	.word	0x00025ff4
   12898:	00026004 	.word	0x00026004

0001289c <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
   1289c:	b508      	push	{r3, lr}
    return mgmt_group_register(&nmgr_def_group);
   1289e:	4802      	ldr	r0, [pc, #8]	; (128a8 <nmgr_os_groups_register+0xc>)
   128a0:	f7ff fbac 	bl	11ffc <mgmt_group_register>
}
   128a4:	bd08      	pop	{r3, pc}
   128a6:	bf00      	nop
   128a8:	200006e4 	.word	0x200006e4

000128ac <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   128ac:	b510      	push	{r4, lr}
    assert(timer != NULL);
   128ae:	b140      	cbz	r0, 128c2 <dpl_cputime_timer_init+0x16>
   128b0:	460c      	mov	r4, r1
   128b2:	4613      	mov	r3, r2
   128b4:	4601      	mov	r1, r0
    assert(fp != NULL);
   128b6:	b154      	cbz	r4, 128ce <dpl_cputime_timer_init+0x22>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   128b8:	4622      	mov	r2, r4
   128ba:	2000      	movs	r0, #0
   128bc:	f00b fe80 	bl	1e5c0 <hal_timer_set_cb>
}
   128c0:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   128c2:	2300      	movs	r3, #0
   128c4:	461a      	mov	r2, r3
   128c6:	4619      	mov	r1, r3
   128c8:	4618      	mov	r0, r3
   128ca:	f7f6 fc7b 	bl	91c4 <__assert_func>
    assert(fp != NULL);
   128ce:	2300      	movs	r3, #0
   128d0:	461a      	mov	r2, r3
   128d2:	4619      	mov	r1, r3
   128d4:	4618      	mov	r0, r3
   128d6:	f7f6 fc75 	bl	91c4 <__assert_func>

000128da <dpl_cputime_timer_start>:

int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   128da:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   128dc:	f00b fe86 	bl	1e5ec <hal_timer_start_at>
    return rc;
}
   128e0:	bd08      	pop	{r3, pc}

000128e2 <dpl_cputime_timer_stop>:
    return rc;
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
   128e2:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   128e4:	f00b fec8 	bl	1e678 <hal_timer_stop>
}
   128e8:	bd08      	pop	{r3, pc}

000128ea <dpl_cputime_get32>:

uint32_t
dpl_cputime_get32(void)
{
   128ea:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   128ec:	2000      	movs	r0, #0
   128ee:	f00b fe4f 	bl	1e590 <hal_timer_read>
return cpu_time;
}
   128f2:	bd08      	pop	{r3, pc}

000128f4 <dpl_cputime_delay_ticks>:
{
   128f4:	b510      	push	{r4, lr}
   128f6:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
   128f8:	f7ff fff7 	bl	128ea <dpl_cputime_get32>
   128fc:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
   128fe:	f7ff fff4 	bl	128ea <dpl_cputime_get32>
   12902:	1b00      	subs	r0, r0, r4
   12904:	2800      	cmp	r0, #0
   12906:	dbfa      	blt.n	128fe <dpl_cputime_delay_ticks+0xa>
}
   12908:	bd10      	pop	{r4, pc}

0001290a <dpl_cputime_delay_usecs>:
{
   1290a:	b508      	push	{r3, lr}
    dpl_cputime_delay_ticks(ticks);
   1290c:	f7ff fff2 	bl	128f4 <dpl_cputime_delay_ticks>
}
   12910:	bd08      	pop	{r3, pc}

00012912 <dpl_cputime_timer_relative>:
{
   12912:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
   12914:	b140      	cbz	r0, 12928 <dpl_cputime_timer_relative+0x16>
   12916:	460c      	mov	r4, r1
   12918:	4605      	mov	r5, r0
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
   1291a:	f7ff ffe6 	bl	128ea <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
   1291e:	1901      	adds	r1, r0, r4
   12920:	4628      	mov	r0, r5
   12922:	f00b fe63 	bl	1e5ec <hal_timer_start_at>
}
   12926:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
   12928:	2300      	movs	r3, #0
   1292a:	461a      	mov	r2, r3
   1292c:	4619      	mov	r1, r3
   1292e:	4618      	mov	r0, r3
   12930:	f7f6 fc48 	bl	91c4 <__assert_func>

00012934 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   12934:	b5f0      	push	{r4, r5, r6, r7, lr}
   12936:	b083      	sub	sp, #12
   12938:	460d      	mov	r5, r1
   1293a:	4617      	mov	r7, r2
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   1293c:	b29e      	uxth	r6, r3
   1293e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12940:	9300      	str	r3, [sp, #0]
   12942:	4603      	mov	r3, r0
   12944:	9a08      	ldr	r2, [sp, #32]
   12946:	4631      	mov	r1, r6
   12948:	4628      	mov	r0, r5
   1294a:	f000 f82f 	bl	129ac <dpl_mempool_init>
    if (rc != 0) {
   1294e:	b108      	cbz	r0, 12954 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12950:	b003      	add	sp, #12
   12952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   12954:	4633      	mov	r3, r6
   12956:	9a08      	ldr	r2, [sp, #32]
   12958:	b292      	uxth	r2, r2
   1295a:	4629      	mov	r1, r5
   1295c:	4638      	mov	r0, r7
   1295e:	f000 f8cd 	bl	12afc <dpl_mbuf_pool_init>
    if (rc != 0) {
   12962:	e7f5      	b.n	12950 <mem_init_mbuf_pool+0x1c>

00012964 <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   12964:	b570      	push	{r4, r5, r6, lr}
   12966:	4604      	mov	r4, r0
   12968:	460d      	mov	r5, r1
   1296a:	4619      	mov	r1, r3
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1296c:	6806      	ldr	r6, [r0, #0]
   1296e:	8a33      	ldrh	r3, [r6, #16]
   12970:	42ab      	cmp	r3, r5
   12972:	d913      	bls.n	1299c <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   12974:	4628      	mov	r0, r5
   12976:	4790      	blx	r2
    if (frag == NULL) {
   12978:	4606      	mov	r6, r0
   1297a:	b190      	cbz	r0, 129a2 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1297c:	462b      	mov	r3, r5
   1297e:	2200      	movs	r2, #0
   12980:	6821      	ldr	r1, [r4, #0]
   12982:	f000 f957 	bl	12c34 <dpl_mbuf_appendfrom>
    if (rc != 0) {
   12986:	b960      	cbnz	r0, 129a2 <mem_split_frag+0x3e>
        goto err;
    }
    dpl_mbuf_adj(*om, max_frag_sz);
   12988:	4629      	mov	r1, r5
   1298a:	6820      	ldr	r0, [r4, #0]
   1298c:	f000 f97e 	bl	12c8c <dpl_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = dpl_mbuf_trim_front(*om);
   12990:	6820      	ldr	r0, [r4, #0]
   12992:	f000 f9d2 	bl	12d3a <dpl_mbuf_trim_front>
   12996:	6020      	str	r0, [r4, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
   12998:	4630      	mov	r0, r6
   1299a:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1299c:	2300      	movs	r3, #0
   1299e:	6003      	str	r3, [r0, #0]
        return frag;
   129a0:	e7fa      	b.n	12998 <mem_split_frag+0x34>
    dpl_mbuf_free_chain(frag);
   129a2:	4630      	mov	r0, r6
   129a4:	f000 f8d0 	bl	12b48 <dpl_mbuf_free_chain>
    return NULL;
   129a8:	2600      	movs	r6, #0
   129aa:	e7f5      	b.n	12998 <mem_split_frag+0x34>

000129ac <dpl_mempool_init>:
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   129ac:	2800      	cmp	r0, #0
   129ae:	d035      	beq.n	12a1c <dpl_mempool_init+0x70>
{
   129b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129b2:	460c      	mov	r4, r1
   129b4:	461d      	mov	r5, r3
   129b6:	4606      	mov	r6, r0
    if (!mp || (block_size == 0)) {
   129b8:	2a00      	cmp	r2, #0
   129ba:	d031      	beq.n	12a20 <dpl_mempool_init+0x74>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
   129bc:	b1c3      	cbz	r3, 129f0 <dpl_mempool_init+0x44>
        return DPL_INVALID_PARAM;
    }

    if (membuf != NULL) {
   129be:	b115      	cbz	r5, 129c6 <dpl_mempool_init+0x1a>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
   129c0:	f015 0f03 	tst.w	r5, #3
   129c4:	d12e      	bne.n	12a24 <dpl_mempool_init+0x78>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   129c6:	f012 0f03 	tst.w	r2, #3
   129ca:	d015      	beq.n	129f8 <dpl_mempool_init+0x4c>
   129cc:	f022 0703 	bic.w	r7, r2, #3
   129d0:	3704      	adds	r7, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   129d2:	6032      	str	r2, [r6, #0]
    mp->mp_num_free = blocks;
   129d4:	80f4      	strh	r4, [r6, #6]
    mp->mp_min_free = blocks;
   129d6:	8134      	strh	r4, [r6, #8]
    mp->mp_flags = 0;
   129d8:	2300      	movs	r3, #0
   129da:	72b3      	strb	r3, [r6, #10]
    mp->mp_num_blocks = blocks;
   129dc:	80b4      	strh	r4, [r6, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
   129de:	60f5      	str	r5, [r6, #12]
    mp->name = name;
   129e0:	9b06      	ldr	r3, [sp, #24]
   129e2:	61b3      	str	r3, [r6, #24]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
   129e4:	6175      	str	r5, [r6, #20]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   129e6:	f106 001c 	add.w	r0, r6, #28
   129ea:	f7f8 f939 	bl	ac60 <os_mutex_init>
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
   129ee:	e00a      	b.n	12a06 <dpl_mempool_init+0x5a>
    if ((!membuf) && (blocks != 0)) {
   129f0:	2900      	cmp	r1, #0
   129f2:	d0e4      	beq.n	129be <dpl_mempool_init+0x12>
        return DPL_INVALID_PARAM;
   129f4:	2003      	movs	r0, #3
   129f6:	e010      	b.n	12a1a <dpl_mempool_init+0x6e>
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   129f8:	4617      	mov	r7, r2
   129fa:	e7ea      	b.n	129d2 <dpl_mempool_init+0x26>
        block_addr += true_block_size;
   129fc:	19eb      	adds	r3, r5, r7
        dpl_mempool_poison(block_addr, true_block_size);
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
   129fe:	602b      	str	r3, [r5, #0]
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
   12a00:	3c01      	subs	r4, #1
   12a02:	b2a4      	uxth	r4, r4
        block_addr += true_block_size;
   12a04:	461d      	mov	r5, r3
    while (blocks > 1) {
   12a06:	2c01      	cmp	r4, #1
   12a08:	d8f8      	bhi.n	129fc <dpl_mempool_init+0x50>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   12a0a:	2000      	movs	r0, #0
   12a0c:	6028      	str	r0, [r5, #0]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
   12a0e:	6130      	str	r0, [r6, #16]
   12a10:	4b05      	ldr	r3, [pc, #20]	; (12a28 <dpl_mempool_init+0x7c>)
   12a12:	685a      	ldr	r2, [r3, #4]
   12a14:	6016      	str	r6, [r2, #0]
   12a16:	3610      	adds	r6, #16
   12a18:	605e      	str	r6, [r3, #4]

    return DPL_OK;
}
   12a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_INVALID_PARAM;
   12a1c:	2003      	movs	r0, #3
}
   12a1e:	4770      	bx	lr
        return DPL_INVALID_PARAM;
   12a20:	2003      	movs	r0, #3
   12a22:	e7fa      	b.n	12a1a <dpl_mempool_init+0x6e>
            return DPL_MEM_NOT_ALIGNED;
   12a24:	2004      	movs	r0, #4
   12a26:	e7f8      	b.n	12a1a <dpl_mempool_init+0x6e>
   12a28:	200006f0 	.word	0x200006f0

00012a2c <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
   12a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   12a2e:	4604      	mov	r4, r0
   12a30:	b1f8      	cbz	r0, 12a72 <dpl_memblock_get+0x46>
    return os_arch_save_sr();
   12a32:	f7f7 fe21 	bl	a678 <os_arch_save_sr>
   12a36:	4605      	mov	r5, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   12a38:	f104 071c 	add.w	r7, r4, #28
   12a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a40:	4638      	mov	r0, r7
   12a42:	f7f8 f973 	bl	ad2c <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
   12a46:	88e3      	ldrh	r3, [r4, #6]
   12a48:	b153      	cbz	r3, 12a60 <dpl_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   12a4a:	6966      	ldr	r6, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   12a4c:	6832      	ldr	r2, [r6, #0]
   12a4e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   12a50:	3b01      	subs	r3, #1
   12a52:	b29b      	uxth	r3, r3
   12a54:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   12a56:	8922      	ldrh	r2, [r4, #8]
   12a58:	4293      	cmp	r3, r2
   12a5a:	d202      	bcs.n	12a62 <dpl_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
   12a5c:	8123      	strh	r3, [r4, #8]
   12a5e:	e000      	b.n	12a62 <dpl_memblock_get+0x36>
    block = NULL;
   12a60:	2600      	movs	r6, #0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12a62:	4638      	mov	r0, r7
   12a64:	f7f8 f906 	bl	ac74 <os_mutex_release>
    os_arch_restore_sr(ctx);
   12a68:	4628      	mov	r0, r5
   12a6a:	f7f7 fe0b 	bl	a684 <os_arch_restore_sr>
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
   12a6e:	4630      	mov	r0, r6
   12a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
   12a72:	4606      	mov	r6, r0
    return (void *)block;
   12a74:	e7fb      	b.n	12a6e <dpl_memblock_get+0x42>

00012a76 <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
   12a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a78:	4604      	mov	r4, r0
   12a7a:	460d      	mov	r5, r1
    return os_arch_save_sr();
   12a7c:	f7f7 fdfc 	bl	a678 <os_arch_save_sr>
   12a80:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   12a82:	f104 071c 	add.w	r7, r4, #28
   12a86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a8a:	4638      	mov	r0, r7
   12a8c:	f7f8 f94e 	bl	ad2c <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   12a90:	6963      	ldr	r3, [r4, #20]
   12a92:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   12a94:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   12a96:	88e3      	ldrh	r3, [r4, #6]
   12a98:	3301      	adds	r3, #1
   12a9a:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12a9c:	4638      	mov	r0, r7
   12a9e:	f7f8 f8e9 	bl	ac74 <os_mutex_release>
    os_arch_restore_sr(ctx);
   12aa2:	4630      	mov	r0, r6
   12aa4:	f7f7 fdee 	bl	a684 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
   12aa8:	2000      	movs	r0, #0
   12aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012aac <dpl_memblock_put>:
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   12aac:	b178      	cbz	r0, 12ace <dpl_memblock_put+0x22>
   12aae:	4603      	mov	r3, r0
   12ab0:	b179      	cbz	r1, 12ad2 <dpl_memblock_put+0x26>
{
   12ab2:	b510      	push	{r4, lr}
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
   12ab4:	7a82      	ldrb	r2, [r0, #10]
   12ab6:	f012 0f01 	tst.w	r2, #1
   12aba:	d004      	beq.n	12ac6 <dpl_memblock_put+0x1a>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   12abc:	6a84      	ldr	r4, [r0, #40]	; 0x28
   12abe:	b114      	cbz	r4, 12ac6 <dpl_memblock_put+0x1a>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   12ac0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   12ac2:	47a0      	blx	r4
            return rc;
   12ac4:	e002      	b.n	12acc <dpl_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
   12ac6:	4618      	mov	r0, r3
   12ac8:	f7ff ffd5 	bl	12a76 <dpl_memblock_put_from_cb>
}
   12acc:	bd10      	pop	{r4, pc}
        return DPL_INVALID_PARAM;
   12ace:	2003      	movs	r0, #3
   12ad0:	4770      	bx	lr
   12ad2:	2003      	movs	r0, #3
}
   12ad4:	4770      	bx	lr

00012ad6 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   12ad6:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   12ad8:	6803      	ldr	r3, [r0, #0]
   12ada:	685b      	ldr	r3, [r3, #4]
   12adc:	4798      	blx	r3
}
   12ade:	bd08      	pop	{r3, pc}

00012ae0 <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   12ae0:	b40e      	push	{r1, r2, r3}
   12ae2:	b500      	push	{lr}
   12ae4:	b082      	sub	sp, #8
   12ae6:	aa03      	add	r2, sp, #12
   12ae8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   12aec:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   12aee:	f7ff fff2 	bl	12ad6 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   12af2:	b002      	add	sp, #8
   12af4:	f85d eb04 	ldr.w	lr, [sp], #4
   12af8:	b003      	add	sp, #12
   12afa:	4770      	bx	lr

00012afc <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
   12afc:	3a10      	subs	r2, #16
   12afe:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   12b00:	6041      	str	r1, [r0, #4]

    return (0);
}
   12b02:	2000      	movs	r0, #0
   12b04:	4770      	bx	lr

00012b06 <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
   12b06:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
   12b08:	8803      	ldrh	r3, [r0, #0]
   12b0a:	428b      	cmp	r3, r1
   12b0c:	d310      	bcc.n	12b30 <dpl_mbuf_get+0x2a>
   12b0e:	4604      	mov	r4, r0
   12b10:	460d      	mov	r5, r1
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
   12b12:	6840      	ldr	r0, [r0, #4]
   12b14:	f7ff ff8a 	bl	12a2c <dpl_memblock_get>
    if (!om) {
   12b18:	b148      	cbz	r0, 12b2e <dpl_mbuf_get+0x28>
        goto err;
    }

    SLIST_NEXT(om, om_next) = NULL;
   12b1a:	2300      	movs	r3, #0
   12b1c:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   12b1e:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   12b20:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   12b22:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   12b24:	f100 0110 	add.w	r1, r0, #16
   12b28:	440d      	add	r5, r1
   12b2a:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   12b2c:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
   12b2e:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   12b30:	2000      	movs	r0, #0
   12b32:	e7fc      	b.n	12b2e <dpl_mbuf_get+0x28>

00012b34 <dpl_mbuf_free>:
    return om;
}

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
   12b34:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
   12b36:	6883      	ldr	r3, [r0, #8]
   12b38:	b123      	cbz	r3, 12b44 <dpl_mbuf_free+0x10>
   12b3a:	4601      	mov	r1, r0
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
   12b3c:	6858      	ldr	r0, [r3, #4]
   12b3e:	f7ff ffb5 	bl	12aac <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
   12b42:	bd08      	pop	{r3, pc}
    return (0);
   12b44:	2000      	movs	r0, #0
   12b46:	e7fc      	b.n	12b42 <dpl_mbuf_free+0xe>

00012b48 <dpl_mbuf_free_chain>:
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
   12b48:	b158      	cbz	r0, 12b62 <dpl_mbuf_free_chain+0x1a>
{
   12b4a:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   12b4c:	68c4      	ldr	r4, [r0, #12]

        rc = dpl_mbuf_free(om);
   12b4e:	f7ff fff1 	bl	12b34 <dpl_mbuf_free>
        if (rc != 0) {
   12b52:	4603      	mov	r3, r0
   12b54:	b918      	cbnz	r0, 12b5e <dpl_mbuf_free_chain+0x16>
            goto err;
        }

        om = next;
   12b56:	4620      	mov	r0, r4
    while (om != NULL) {
   12b58:	2c00      	cmp	r4, #0
   12b5a:	d1f7      	bne.n	12b4c <dpl_mbuf_free_chain+0x4>
    }

    return (0);
   12b5c:	2300      	movs	r3, #0
err:
    return (rc);
}
   12b5e:	4618      	mov	r0, r3
   12b60:	bd10      	pop	{r4, pc}
    return (0);
   12b62:	2300      	movs	r3, #0
}
   12b64:	4618      	mov	r0, r3
   12b66:	4770      	bx	lr

00012b68 <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
   12b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   12b6c:	2800      	cmp	r0, #0
   12b6e:	d04b      	beq.n	12c08 <dpl_mbuf_append+0xa0>
   12b70:	460f      	mov	r7, r1
   12b72:	4691      	mov	r9, r2
   12b74:	4682      	mov	sl, r0
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   12b76:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   12b7a:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   12b7c:	461e      	mov	r6, r3
   12b7e:	68db      	ldr	r3, [r3, #12]
   12b80:	2b00      	cmp	r3, #0
   12b82:	d1fb      	bne.n	12b7c <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   12b84:	464d      	mov	r5, r9
static inline uint16_t
_dpl_mbuf_trailingspace(struct dpl_mbuf *om)
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;
   12b86:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   12b88:	f106 0410 	add.w	r4, r6, #16
   12b8c:	881b      	ldrh	r3, [r3, #0]
   12b8e:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   12b90:	6830      	ldr	r0, [r6, #0]
   12b92:	88f3      	ldrh	r3, [r6, #6]
   12b94:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   12b96:	1a24      	subs	r4, r4, r0
   12b98:	b2a4      	uxth	r4, r4
    space = DPL_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   12b9a:	b164      	cbz	r4, 12bb6 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
   12b9c:	454c      	cmp	r4, r9
   12b9e:	dd00      	ble.n	12ba2 <dpl_mbuf_append+0x3a>
            space = remainder;
   12ba0:	464c      	mov	r4, r9
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   12ba2:	4622      	mov	r2, r4
   12ba4:	4639      	mov	r1, r7
   12ba6:	f7fd fd6b 	bl	10680 <memcpy>

        last->om_len += space;
   12baa:	88f3      	ldrh	r3, [r6, #6]
   12bac:	4423      	add	r3, r4
   12bae:	80f3      	strh	r3, [r6, #6]
        data += space;
   12bb0:	4427      	add	r7, r4
        remainder -= space;
   12bb2:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   12bb6:	2d00      	cmp	r5, #0
   12bb8:	dd16      	ble.n	12be8 <dpl_mbuf_append+0x80>
        new = dpl_mbuf_get(omp, 0);
   12bba:	2100      	movs	r1, #0
   12bbc:	4640      	mov	r0, r8
   12bbe:	f7ff ffa2 	bl	12b06 <dpl_mbuf_get>
        if (!new) {
   12bc2:	4604      	mov	r4, r0
   12bc4:	b180      	cbz	r0, 12be8 <dpl_mbuf_append+0x80>
            break;
        }

        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
   12bc6:	f8b8 2000 	ldrh.w	r2, [r8]
   12bca:	42aa      	cmp	r2, r5
   12bcc:	bfa8      	it	ge
   12bce:	462a      	movge	r2, r5
   12bd0:	b292      	uxth	r2, r2
   12bd2:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
   12bd4:	4639      	mov	r1, r7
   12bd6:	6800      	ldr	r0, [r0, #0]
   12bd8:	f7fd fd52 	bl	10680 <memcpy>
        data += new->om_len;
   12bdc:	88e3      	ldrh	r3, [r4, #6]
   12bde:	441f      	add	r7, r3
        remainder -= new->om_len;
   12be0:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   12be2:	60f4      	str	r4, [r6, #12]
        last = new;
   12be4:	4626      	mov	r6, r4
   12be6:	e7e6      	b.n	12bb6 <dpl_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
   12be8:	f89a 3005 	ldrb.w	r3, [sl, #5]
   12bec:	2b07      	cmp	r3, #7
   12bee:	d907      	bls.n	12c00 <dpl_mbuf_append+0x98>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
   12bf0:	eba9 0905 	sub.w	r9, r9, r5
   12bf4:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   12bf8:	fa13 f989 	uxtah	r9, r3, r9
   12bfc:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   12c00:	b925      	cbnz	r5, 12c0c <dpl_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   12c02:	4628      	mov	r0, r5
   12c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = DPL_EINVAL;
   12c08:	2502      	movs	r5, #2
   12c0a:	e7fa      	b.n	12c02 <dpl_mbuf_append+0x9a>
        rc = DPL_ENOMEM;
   12c0c:	2501      	movs	r5, #1
   12c0e:	e7f8      	b.n	12c02 <dpl_mbuf_append+0x9a>

00012c10 <dpl_mbuf_off>:

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   12c10:	b178      	cbz	r0, 12c32 <dpl_mbuf_off+0x22>
{
   12c12:	b410      	push	{r4}
   12c14:	e002      	b.n	12c1c <dpl_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   12c16:	1ac9      	subs	r1, r1, r3
        cur = next;
   12c18:	4620      	mov	r0, r4
        if (cur == NULL) {
   12c1a:	b13c      	cbz	r4, 12c2c <dpl_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   12c1c:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   12c1e:	88c3      	ldrh	r3, [r0, #6]
   12c20:	428b      	cmp	r3, r1
   12c22:	dc02      	bgt.n	12c2a <dpl_mbuf_off+0x1a>
   12c24:	d1f7      	bne.n	12c16 <dpl_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   12c26:	2c00      	cmp	r4, #0
   12c28:	d1f5      	bne.n	12c16 <dpl_mbuf_off+0x6>
            *out_off = off;
   12c2a:	8011      	strh	r1, [r2, #0]
    }
}
   12c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
   12c30:	4770      	bx	lr
   12c32:	4770      	bx	lr

00012c34 <dpl_mbuf_appendfrom>:
{
   12c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c36:	b083      	sub	sp, #12
   12c38:	4607      	mov	r7, r0
   12c3a:	4608      	mov	r0, r1
   12c3c:	4611      	mov	r1, r2
   12c3e:	461e      	mov	r6, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   12c40:	f10d 0206 	add.w	r2, sp, #6
   12c44:	f7ff ffe4 	bl	12c10 <dpl_mbuf_off>
   12c48:	4605      	mov	r5, r0
    while (len > 0) {
   12c4a:	e005      	b.n	12c58 <dpl_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   12c4c:	1b34      	subs	r4, r6, r4
   12c4e:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   12c50:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   12c52:	2300      	movs	r3, #0
   12c54:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   12c58:	b196      	cbz	r6, 12c80 <dpl_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   12c5a:	b1ad      	cbz	r5, 12c88 <dpl_mbuf_appendfrom+0x54>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   12c5c:	88ec      	ldrh	r4, [r5, #6]
   12c5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12c62:	1ae4      	subs	r4, r4, r3
   12c64:	42b4      	cmp	r4, r6
   12c66:	bfa8      	it	ge
   12c68:	4634      	movge	r4, r6
   12c6a:	b2a4      	uxth	r4, r4
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   12c6c:	6829      	ldr	r1, [r5, #0]
   12c6e:	4622      	mov	r2, r4
   12c70:	4419      	add	r1, r3
   12c72:	4638      	mov	r0, r7
   12c74:	f7ff ff78 	bl	12b68 <dpl_mbuf_append>
        if (rc != 0) {
   12c78:	4603      	mov	r3, r0
   12c7a:	2800      	cmp	r0, #0
   12c7c:	d0e6      	beq.n	12c4c <dpl_mbuf_appendfrom+0x18>
   12c7e:	e000      	b.n	12c82 <dpl_mbuf_appendfrom+0x4e>
    return 0;
   12c80:	2300      	movs	r3, #0
}
   12c82:	4618      	mov	r0, r3
   12c84:	b003      	add	sp, #12
   12c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return DPL_EINVAL;
   12c88:	2302      	movs	r3, #2
   12c8a:	e7fa      	b.n	12c82 <dpl_mbuf_appendfrom+0x4e>

00012c8c <dpl_mbuf_adj>:
{
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   12c8c:	2800      	cmp	r0, #0
   12c8e:	d053      	beq.n	12d38 <dpl_mbuf_adj+0xac>
{
   12c90:	b510      	push	{r4, lr}
   12c92:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   12c94:	2900      	cmp	r1, #0
   12c96:	db1b      	blt.n	12cd0 <dpl_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   12c98:	4603      	mov	r3, r0
    int len = req_len;
   12c9a:	460a      	mov	r2, r1
   12c9c:	e005      	b.n	12caa <dpl_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   12c9e:	1a80      	subs	r0, r0, r2
   12ca0:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   12ca2:	6818      	ldr	r0, [r3, #0]
   12ca4:	4402      	add	r2, r0
   12ca6:	601a      	str	r2, [r3, #0]
                len = 0;
   12ca8:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   12caa:	b14b      	cbz	r3, 12cc0 <dpl_mbuf_adj+0x34>
   12cac:	2a00      	cmp	r2, #0
   12cae:	dd07      	ble.n	12cc0 <dpl_mbuf_adj+0x34>
            if (m->om_len <= len) {
   12cb0:	88d8      	ldrh	r0, [r3, #6]
   12cb2:	4290      	cmp	r0, r2
   12cb4:	dcf3      	bgt.n	12c9e <dpl_mbuf_adj+0x12>
                len -= m->om_len;
   12cb6:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   12cb8:	2000      	movs	r0, #0
   12cba:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   12cbc:	68db      	ldr	r3, [r3, #12]
   12cbe:	e7f4      	b.n	12caa <dpl_mbuf_adj+0x1e>
            }
        }
        if (DPL_MBUF_IS_PKTHDR(mp))
   12cc0:	7963      	ldrb	r3, [r4, #5]
   12cc2:	2b07      	cmp	r3, #7
   12cc4:	d903      	bls.n	12cce <dpl_mbuf_adj+0x42>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   12cc6:	1a52      	subs	r2, r2, r1
   12cc8:	8a23      	ldrh	r3, [r4, #16]
   12cca:	441a      	add	r2, r3
   12ccc:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   12cce:	bd10      	pop	{r4, pc}
        len = -len;
   12cd0:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
   12cd4:	4603      	mov	r3, r0
        count = 0;
   12cd6:	2200      	movs	r2, #0
            count += m->om_len;
   12cd8:	88d8      	ldrh	r0, [r3, #6]
   12cda:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   12cdc:	469c      	mov	ip, r3
   12cde:	68db      	ldr	r3, [r3, #12]
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d1f9      	bne.n	12cd8 <dpl_mbuf_adj+0x4c>
        if (m->om_len >= len) {
   12ce4:	4570      	cmp	r0, lr
   12ce6:	da0d      	bge.n	12d04 <dpl_mbuf_adj+0x78>
        if (count < 0)
   12ce8:	188a      	adds	r2, r1, r2
   12cea:	d41a      	bmi.n	12d22 <dpl_mbuf_adj+0x96>
        if (DPL_MBUF_IS_PKTHDR(m))
   12cec:	7963      	ldrb	r3, [r4, #5]
   12cee:	2b07      	cmp	r3, #7
   12cf0:	d900      	bls.n	12cf4 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(m)->omp_len = count;
   12cf2:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   12cf4:	2c00      	cmp	r4, #0
   12cf6:	d0ea      	beq.n	12cce <dpl_mbuf_adj+0x42>
            if (m->om_len >= count) {
   12cf8:	88e3      	ldrh	r3, [r4, #6]
   12cfa:	4293      	cmp	r3, r2
   12cfc:	da13      	bge.n	12d26 <dpl_mbuf_adj+0x9a>
            count -= m->om_len;
   12cfe:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   12d00:	68e4      	ldr	r4, [r4, #12]
   12d02:	e7f7      	b.n	12cf4 <dpl_mbuf_adj+0x68>
            m->om_len -= len;
   12d04:	fa1f fe8e 	uxth.w	lr, lr
   12d08:	eba0 000e 	sub.w	r0, r0, lr
   12d0c:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
   12d10:	7963      	ldrb	r3, [r4, #5]
   12d12:	2b07      	cmp	r3, #7
   12d14:	d9db      	bls.n	12cce <dpl_mbuf_adj+0x42>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   12d16:	8a23      	ldrh	r3, [r4, #16]
   12d18:	eba3 0e0e 	sub.w	lr, r3, lr
   12d1c:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
   12d20:	e7d5      	b.n	12cce <dpl_mbuf_adj+0x42>
            count = 0;
   12d22:	2200      	movs	r2, #0
   12d24:	e7e2      	b.n	12cec <dpl_mbuf_adj+0x60>
                m->om_len = count;
   12d26:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   12d28:	68e0      	ldr	r0, [r4, #12]
   12d2a:	2800      	cmp	r0, #0
   12d2c:	d0cf      	beq.n	12cce <dpl_mbuf_adj+0x42>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
   12d2e:	f7ff ff0b 	bl	12b48 <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   12d32:	2300      	movs	r3, #0
   12d34:	60e3      	str	r3, [r4, #12]
   12d36:	e7ca      	b.n	12cce <dpl_mbuf_adj+0x42>
   12d38:	4770      	bx	lr

00012d3a <dpl_mbuf_trim_front>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_trim_front(struct dpl_mbuf *om)
{
   12d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d3c:	4606      	mov	r6, r0
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   12d3e:	88c7      	ldrh	r7, [r0, #6]
   12d40:	b9cf      	cbnz	r7, 12d76 <dpl_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   12d42:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   12d44:	b144      	cbz	r4, 12d58 <dpl_mbuf_trim_front+0x1e>
   12d46:	88e3      	ldrh	r3, [r4, #6]
   12d48:	b933      	cbnz	r3, 12d58 <dpl_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   12d4a:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   12d4c:	60f5      	str	r5, [r6, #12]
        dpl_mbuf_free(cur);
   12d4e:	4620      	mov	r0, r4
   12d50:	f7ff fef0 	bl	12b34 <dpl_mbuf_free>

        cur = next;
   12d54:	462c      	mov	r4, r5
   12d56:	e7f5      	b.n	12d44 <dpl_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   12d58:	b16c      	cbz	r4, 12d76 <dpl_mbuf_trim_front+0x3c>
    if (DPL_MBUF_IS_PKTHDR(om)) {
   12d5a:	7963      	ldrb	r3, [r4, #5]
   12d5c:	2b07      	cmp	r3, #7
   12d5e:	d900      	bls.n	12d62 <dpl_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   12d60:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   12d62:	4620      	mov	r0, r4
   12d64:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   12d68:	4407      	add	r7, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   12d6a:	1bdf      	subs	r7, r3, r7
   12d6c:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   12d6e:	7972      	ldrb	r2, [r6, #5]
   12d70:	b293      	uxth	r3, r2
   12d72:	42bb      	cmp	r3, r7
   12d74:	d901      	bls.n	12d7a <dpl_mbuf_trim_front+0x40>
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
   12d76:	4630      	mov	r0, r6
   12d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   12d7a:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
   12d7c:	f106 0110 	add.w	r1, r6, #16
   12d80:	f7fd fc7e 	bl	10680 <memcpy>
        dpl_mbuf_free(om);
   12d84:	4630      	mov	r0, r6
   12d86:	f7ff fed5 	bl	12b34 <dpl_mbuf_free>
        om = cur;
   12d8a:	4626      	mov	r6, r4
   12d8c:	e7f3      	b.n	12d76 <dpl_mbuf_trim_front+0x3c>

00012d8e <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
   12d8e:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   12d90:	f000 fa86 	bl	132a0 <conf_ensure_loaded>
}
   12d94:	bd08      	pop	{r3, pc}
	...

00012d98 <conf_init>:
{
   12d98:	b510      	push	{r4, lr}
   12d9a:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
   12d9c:	480c      	ldr	r0, [pc, #48]	; (12dd0 <conf_init+0x38>)
   12d9e:	f7f7 ff5f 	bl	ac60 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   12da2:	4b0c      	ldr	r3, [pc, #48]	; (12dd4 <conf_init+0x3c>)
   12da4:	2200      	movs	r2, #0
   12da6:	601a      	str	r2, [r3, #0]
    conf_store_init();
   12da8:	f000 faea 	bl	13380 <conf_store_init>
    rc = conf_cli_register();
   12dac:	f000 fa00 	bl	131b0 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   12db0:	b138      	cbz	r0, 12dc2 <conf_init+0x2a>
   12db2:	2000      	movs	r0, #0
   12db4:	9000      	str	r0, [sp, #0]
   12db6:	4b08      	ldr	r3, [pc, #32]	; (12dd8 <conf_init+0x40>)
   12db8:	681c      	ldr	r4, [r3, #0]
   12dba:	4603      	mov	r3, r0
   12dbc:	4602      	mov	r2, r0
   12dbe:	4601      	mov	r1, r0
   12dc0:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   12dc2:	f7f6 fdef 	bl	99a4 <os_eventq_dflt_get>
   12dc6:	4905      	ldr	r1, [pc, #20]	; (12ddc <conf_init+0x44>)
   12dc8:	f7f6 fd3e 	bl	9848 <os_eventq_put>
}
   12dcc:	b002      	add	sp, #8
   12dce:	bd10      	pop	{r4, pc}
   12dd0:	20003d88 	.word	0x20003d88
   12dd4:	20003d84 	.word	0x20003d84
   12dd8:	20000768 	.word	0x20000768
   12ddc:	200006f8 	.word	0x200006f8

00012de0 <conf_lock>:
{
   12de0:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   12de2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12de6:	4802      	ldr	r0, [pc, #8]	; (12df0 <conf_lock+0x10>)
   12de8:	f7f7 ffa0 	bl	ad2c <os_mutex_pend>
}
   12dec:	bd08      	pop	{r3, pc}
   12dee:	bf00      	nop
   12df0:	20003d88 	.word	0x20003d88

00012df4 <conf_unlock>:
{
   12df4:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   12df6:	4802      	ldr	r0, [pc, #8]	; (12e00 <conf_unlock+0xc>)
   12df8:	f7f7 ff3c 	bl	ac74 <os_mutex_release>
}
   12dfc:	bd08      	pop	{r3, pc}
   12dfe:	bf00      	nop
   12e00:	20003d88 	.word	0x20003d88

00012e04 <conf_register>:
{
   12e04:	b510      	push	{r4, lr}
   12e06:	4604      	mov	r4, r0
    conf_lock();
   12e08:	f7ff ffea 	bl	12de0 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   12e0c:	4b03      	ldr	r3, [pc, #12]	; (12e1c <conf_register+0x18>)
   12e0e:	681a      	ldr	r2, [r3, #0]
   12e10:	6022      	str	r2, [r4, #0]
   12e12:	601c      	str	r4, [r3, #0]
    conf_unlock();
   12e14:	f7ff ffee 	bl	12df4 <conf_unlock>
}
   12e18:	2000      	movs	r0, #0
   12e1a:	bd10      	pop	{r4, pc}
   12e1c:	20003d84 	.word	0x20003d84

00012e20 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
   12e20:	b538      	push	{r3, r4, r5, lr}
   12e22:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   12e24:	4b06      	ldr	r3, [pc, #24]	; (12e40 <conf_handler_lookup+0x20>)
   12e26:	681c      	ldr	r4, [r3, #0]
   12e28:	e000      	b.n	12e2c <conf_handler_lookup+0xc>
   12e2a:	6824      	ldr	r4, [r4, #0]
   12e2c:	b12c      	cbz	r4, 12e3a <conf_handler_lookup+0x1a>
        if (!strcmp(name, ch->ch_name)) {
   12e2e:	6861      	ldr	r1, [r4, #4]
   12e30:	4628      	mov	r0, r5
   12e32:	f7fd fc5d 	bl	106f0 <strcmp>
   12e36:	2800      	cmp	r0, #0
   12e38:	d1f7      	bne.n	12e2a <conf_handler_lookup+0xa>
            return ch;
        }
    }
    return NULL;
}
   12e3a:	4620      	mov	r0, r4
   12e3c:	bd38      	pop	{r3, r4, r5, pc}
   12e3e:	bf00      	nop
   12e40:	20003d84 	.word	0x20003d84

00012e44 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
   12e44:	b570      	push	{r4, r5, r6, lr}
   12e46:	b082      	sub	sp, #8
   12e48:	460e      	mov	r6, r1
   12e4a:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
   12e4c:	aa01      	add	r2, sp, #4
   12e4e:	4909      	ldr	r1, [pc, #36]	; (12e74 <conf_parse_name+0x30>)
   12e50:	f00e fb68 	bl	21524 <strtok_r>

    i = 0;
   12e54:	2300      	movs	r3, #0
    while (tok) {
   12e56:	e008      	b.n	12e6a <conf_parse_name+0x26>
        name_argv[i++] = tok;
   12e58:	1c5c      	adds	r4, r3, #1
   12e5a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   12e5e:	aa01      	add	r2, sp, #4
   12e60:	4904      	ldr	r1, [pc, #16]	; (12e74 <conf_parse_name+0x30>)
   12e62:	2000      	movs	r0, #0
   12e64:	f00e fb5e 	bl	21524 <strtok_r>
        name_argv[i++] = tok;
   12e68:	4623      	mov	r3, r4
    while (tok) {
   12e6a:	2800      	cmp	r0, #0
   12e6c:	d1f4      	bne.n	12e58 <conf_parse_name+0x14>
    }
    *name_argc = i;
   12e6e:	6033      	str	r3, [r6, #0]

    return 0;
}
   12e70:	b002      	add	sp, #8
   12e72:	bd70      	pop	{r4, r5, r6, pc}
   12e74:	00026044 	.word	0x00026044

00012e78 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
   12e78:	b510      	push	{r4, lr}
   12e7a:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
   12e7c:	f7ff ffe2 	bl	12e44 <conf_parse_name>
    if (rc) {
   12e80:	b918      	cbnz	r0, 12e8a <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
   12e82:	6820      	ldr	r0, [r4, #0]
   12e84:	f7ff ffcc 	bl	12e20 <conf_handler_lookup>
}
   12e88:	bd10      	pop	{r4, pc}
        return NULL;
   12e8a:	2000      	movs	r0, #0
   12e8c:	e7fc      	b.n	12e88 <conf_parse_and_lookup+0x10>

00012e8e <conf_value_from_str>:
{
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
   12e8e:	2800      	cmp	r0, #0
   12e90:	d051      	beq.n	12f36 <conf_value_from_str+0xa8>
{
   12e92:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e94:	b083      	sub	sp, #12
   12e96:	460c      	mov	r4, r1
   12e98:	4616      	mov	r6, r2
   12e9a:	461d      	mov	r5, r3
   12e9c:	4607      	mov	r7, r0
        goto err;
    }
    switch (type) {
   12e9e:	1e8b      	subs	r3, r1, #2
   12ea0:	2b08      	cmp	r3, #8
   12ea2:	d84a      	bhi.n	12f3a <conf_value_from_str+0xac>
   12ea4:	e8df f003 	tbb	[pc, r3]
   12ea8:	32050505 	.word	0x32050505
   12eac:	4949493d 	.word	0x4949493d
   12eb0:	05          	.byte	0x05
   12eb1:	00          	.byte	0x00
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
   12eb2:	2200      	movs	r2, #0
   12eb4:	a901      	add	r1, sp, #4
   12eb6:	f00e fb45 	bl	21544 <strtol>
        if (*eptr != '\0') {
   12eba:	9b01      	ldr	r3, [sp, #4]
   12ebc:	781b      	ldrb	r3, [r3, #0]
   12ebe:	2b00      	cmp	r3, #0
   12ec0:	d13e      	bne.n	12f40 <conf_value_from_str+0xb2>
            goto err;
        }
        if (type == CONF_BOOL) {
   12ec2:	2c0a      	cmp	r4, #10
   12ec4:	d007      	beq.n	12ed6 <conf_value_from_str+0x48>
            if (val < 0 || val > 1) {
                goto err;
            }
            *(bool *)vp = val;
        } else if (type == CONF_INT8) {
   12ec6:	2c02      	cmp	r4, #2
   12ec8:	d00d      	beq.n	12ee6 <conf_value_from_str+0x58>
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
        } else if (type == CONF_INT16) {
   12eca:	2c03      	cmp	r4, #3
   12ecc:	d013      	beq.n	12ef6 <conf_value_from_str+0x68>
            if (val < INT16_MIN || val > UINT16_MAX) {
                goto err;
            }
            *(int16_t *)vp = val;
        } else if (type == CONF_INT32) {
   12ece:	2c04      	cmp	r4, #4
   12ed0:	d019      	beq.n	12f06 <conf_value_from_str+0x78>
        strcpy(vp, val_str);
        break;
    default:
        goto err;
    }
    return 0;
   12ed2:	2000      	movs	r0, #0
   12ed4:	e032      	b.n	12f3c <conf_value_from_str+0xae>
            if (val < 0 || val > 1) {
   12ed6:	2801      	cmp	r0, #1
   12ed8:	d834      	bhi.n	12f44 <conf_value_from_str+0xb6>
            *(bool *)vp = val;
   12eda:	3800      	subs	r0, #0
   12edc:	bf18      	it	ne
   12ede:	2001      	movne	r0, #1
   12ee0:	7030      	strb	r0, [r6, #0]
    return 0;
   12ee2:	2000      	movs	r0, #0
   12ee4:	e02a      	b.n	12f3c <conf_value_from_str+0xae>
            if (val < INT8_MIN || val > UINT8_MAX) {
   12ee6:	f100 0380 	add.w	r3, r0, #128	; 0x80
   12eea:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   12eee:	d22b      	bcs.n	12f48 <conf_value_from_str+0xba>
            *(int8_t *)vp = val;
   12ef0:	7030      	strb	r0, [r6, #0]
    return 0;
   12ef2:	2000      	movs	r0, #0
   12ef4:	e022      	b.n	12f3c <conf_value_from_str+0xae>
            if (val < INT16_MIN || val > UINT16_MAX) {
   12ef6:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
   12efa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
   12efe:	d225      	bcs.n	12f4c <conf_value_from_str+0xbe>
            *(int16_t *)vp = val;
   12f00:	8030      	strh	r0, [r6, #0]
    return 0;
   12f02:	2000      	movs	r0, #0
   12f04:	e01a      	b.n	12f3c <conf_value_from_str+0xae>
            *(int32_t *)vp = val;
   12f06:	6030      	str	r0, [r6, #0]
    return 0;
   12f08:	2000      	movs	r0, #0
   12f0a:	e017      	b.n	12f3c <conf_value_from_str+0xae>
        val64 = strtoll(val_str, &eptr, 0);
   12f0c:	2200      	movs	r2, #0
   12f0e:	a901      	add	r1, sp, #4
   12f10:	f7fd fc11 	bl	10736 <strtoll>
        if (*eptr != '\0') {
   12f14:	9b01      	ldr	r3, [sp, #4]
   12f16:	781b      	ldrb	r3, [r3, #0]
   12f18:	b9d3      	cbnz	r3, 12f50 <conf_value_from_str+0xc2>
        *(int64_t *)vp = val64;
   12f1a:	6030      	str	r0, [r6, #0]
   12f1c:	6071      	str	r1, [r6, #4]
    return 0;
   12f1e:	2000      	movs	r0, #0
        break;
   12f20:	e00c      	b.n	12f3c <conf_value_from_str+0xae>
        val = strlen(val_str);
   12f22:	f7fd fbf1 	bl	10708 <strlen>
        if (val + 1 > maxlen) {
   12f26:	42a8      	cmp	r0, r5
   12f28:	da14      	bge.n	12f54 <conf_value_from_str+0xc6>
        strcpy(vp, val_str);
   12f2a:	4639      	mov	r1, r7
   12f2c:	4630      	mov	r0, r6
   12f2e:	f00e fac1 	bl	214b4 <strcpy>
    return 0;
   12f32:	2000      	movs	r0, #0
        break;
   12f34:	e002      	b.n	12f3c <conf_value_from_str+0xae>
err:
    return OS_INVALID_PARM;
   12f36:	2003      	movs	r0, #3
}
   12f38:	4770      	bx	lr
    switch (type) {
   12f3a:	2003      	movs	r0, #3
}
   12f3c:	b003      	add	sp, #12
   12f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return OS_INVALID_PARM;
   12f40:	2003      	movs	r0, #3
   12f42:	e7fb      	b.n	12f3c <conf_value_from_str+0xae>
   12f44:	2003      	movs	r0, #3
   12f46:	e7f9      	b.n	12f3c <conf_value_from_str+0xae>
   12f48:	2003      	movs	r0, #3
   12f4a:	e7f7      	b.n	12f3c <conf_value_from_str+0xae>
   12f4c:	2003      	movs	r0, #3
   12f4e:	e7f5      	b.n	12f3c <conf_value_from_str+0xae>
   12f50:	2003      	movs	r0, #3
   12f52:	e7f3      	b.n	12f3c <conf_value_from_str+0xae>
   12f54:	2003      	movs	r0, #3
   12f56:	e7f1      	b.n	12f3c <conf_value_from_str+0xae>

00012f58 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
   12f58:	468c      	mov	ip, r1
    int32_t val;

    if (type == CONF_STRING) {
   12f5a:	2806      	cmp	r0, #6
   12f5c:	d02f      	beq.n	12fbe <conf_str_from_value+0x66>
{
   12f5e:	b510      	push	{r4, lr}
   12f60:	b082      	sub	sp, #8
   12f62:	4614      	mov	r4, r2
   12f64:	4619      	mov	r1, r3
        return vp;
    }
    switch (type) {
   12f66:	2805      	cmp	r0, #5
   12f68:	d01f      	beq.n	12faa <conf_str_from_value+0x52>
   12f6a:	d903      	bls.n	12f74 <conf_str_from_value+0x1c>
   12f6c:	280a      	cmp	r0, #10
   12f6e:	d005      	beq.n	12f7c <conf_str_from_value+0x24>
   12f70:	2000      	movs	r0, #0
   12f72:	e027      	b.n	12fc4 <conf_str_from_value+0x6c>
   12f74:	1e83      	subs	r3, r0, #2
   12f76:	b2db      	uxtb	r3, r3
   12f78:	2b02      	cmp	r3, #2
   12f7a:	d822      	bhi.n	12fc2 <conf_str_from_value+0x6a>
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
   12f7c:	280a      	cmp	r0, #10
   12f7e:	d006      	beq.n	12f8e <conf_str_from_value+0x36>
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
   12f80:	2802      	cmp	r0, #2
   12f82:	d00c      	beq.n	12f9e <conf_str_from_value+0x46>
            val = *(int8_t *)vp;
        } else if (type == CONF_INT16) {
   12f84:	2803      	cmp	r0, #3
   12f86:	d00d      	beq.n	12fa4 <conf_str_from_value+0x4c>
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
   12f88:	f8dc 3000 	ldr.w	r3, [ip]
   12f8c:	e001      	b.n	12f92 <conf_str_from_value+0x3a>
            val = *(bool *)vp;
   12f8e:	f89c 3000 	ldrb.w	r3, [ip]
        }
        snprintf(buf, buf_len, "%ld", (long)val);
   12f92:	4a0d      	ldr	r2, [pc, #52]	; (12fc8 <conf_str_from_value+0x70>)
   12f94:	4620      	mov	r0, r4
   12f96:	f7fd ffc8 	bl	10f2a <snprintf>
        return buf;
   12f9a:	4620      	mov	r0, r4
   12f9c:	e012      	b.n	12fc4 <conf_str_from_value+0x6c>
            val = *(int8_t *)vp;
   12f9e:	f99c 3000 	ldrsb.w	r3, [ip]
   12fa2:	e7f6      	b.n	12f92 <conf_str_from_value+0x3a>
            val = *(int16_t *)vp;
   12fa4:	f9bc 3000 	ldrsh.w	r3, [ip]
   12fa8:	e7f3      	b.n	12f92 <conf_str_from_value+0x3a>
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
   12faa:	e9dc 2300 	ldrd	r2, r3, [ip]
   12fae:	e9cd 2300 	strd	r2, r3, [sp]
   12fb2:	4a06      	ldr	r2, [pc, #24]	; (12fcc <conf_str_from_value+0x74>)
   12fb4:	4620      	mov	r0, r4
   12fb6:	f7fd ffb8 	bl	10f2a <snprintf>
        return buf;
   12fba:	4620      	mov	r0, r4
   12fbc:	e002      	b.n	12fc4 <conf_str_from_value+0x6c>
        return vp;
   12fbe:	4608      	mov	r0, r1
    default:
        return NULL;
    }
}
   12fc0:	4770      	bx	lr
    switch (type) {
   12fc2:	2000      	movs	r0, #0
}
   12fc4:	b002      	add	sp, #8
   12fc6:	bd10      	pop	{r4, pc}
   12fc8:	00026048 	.word	0x00026048
   12fcc:	0002604c 	.word	0x0002604c

00012fd0 <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
   12fd0:	b530      	push	{r4, r5, lr}
   12fd2:	b08b      	sub	sp, #44	; 0x2c
   12fd4:	4604      	mov	r4, r0
   12fd6:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   12fd8:	f7ff ff02 	bl	12de0 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   12fdc:	aa01      	add	r2, sp, #4
   12fde:	a909      	add	r1, sp, #36	; 0x24
   12fe0:	4620      	mov	r0, r4
   12fe2:	f7ff ff49 	bl	12e78 <conf_parse_and_lookup>
    if (!ch) {
   12fe6:	b158      	cbz	r0, 13000 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
   12fe8:	68c3      	ldr	r3, [r0, #12]
   12fea:	462a      	mov	r2, r5
   12fec:	a902      	add	r1, sp, #8
   12fee:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ff0:	3801      	subs	r0, #1
   12ff2:	4798      	blx	r3
   12ff4:	4604      	mov	r4, r0
out:
    conf_unlock();
   12ff6:	f7ff fefd 	bl	12df4 <conf_unlock>
    return rc;
}
   12ffa:	4620      	mov	r0, r4
   12ffc:	b00b      	add	sp, #44	; 0x2c
   12ffe:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   13000:	2403      	movs	r4, #3
   13002:	e7f8      	b.n	12ff6 <conf_set_value+0x26>

00013004 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   13004:	b570      	push	{r4, r5, r6, lr}
   13006:	b08a      	sub	sp, #40	; 0x28
   13008:	4604      	mov	r4, r0
   1300a:	460d      	mov	r5, r1
   1300c:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   1300e:	f7ff fee7 	bl	12de0 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   13012:	aa01      	add	r2, sp, #4
   13014:	a909      	add	r1, sp, #36	; 0x24
   13016:	4620      	mov	r0, r4
   13018:	f7ff ff2e 	bl	12e78 <conf_parse_and_lookup>
    if (!ch) {
   1301c:	4604      	mov	r4, r0
   1301e:	b140      	cbz	r0, 13032 <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
   13020:	6884      	ldr	r4, [r0, #8]
   13022:	b15c      	cbz	r4, 1303c <conf_get_value+0x38>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
   13024:	4633      	mov	r3, r6
   13026:	462a      	mov	r2, r5
   13028:	a902      	add	r1, sp, #8
   1302a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1302c:	3801      	subs	r0, #1
   1302e:	47a0      	blx	r4
   13030:	4604      	mov	r4, r0
out:
    conf_unlock();
   13032:	f7ff fedf 	bl	12df4 <conf_unlock>
    return rval;
}
   13036:	4620      	mov	r0, r4
   13038:	b00a      	add	sp, #40	; 0x28
   1303a:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
   1303c:	2400      	movs	r4, #0
   1303e:	e7f8      	b.n	13032 <conf_get_value+0x2e>

00013040 <conf_commit>:

int
conf_commit(char *name)
{
   13040:	b530      	push	{r4, r5, lr}
   13042:	b08b      	sub	sp, #44	; 0x2c
   13044:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   13046:	f7ff fecb 	bl	12de0 <conf_lock>
    if (name) {
   1304a:	b174      	cbz	r4, 1306a <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   1304c:	aa01      	add	r2, sp, #4
   1304e:	a909      	add	r1, sp, #36	; 0x24
   13050:	4620      	mov	r0, r4
   13052:	f7ff ff11 	bl	12e78 <conf_parse_and_lookup>
        if (!ch) {
   13056:	b1b8      	cbz	r0, 13088 <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
   13058:	6903      	ldr	r3, [r0, #16]
   1305a:	b1bb      	cbz	r3, 1308c <conf_commit+0x4c>
            rc = ch->ch_commit();
   1305c:	4798      	blx	r3
   1305e:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   13060:	f7ff fec8 	bl	12df4 <conf_unlock>
    return rc;
}
   13064:	4628      	mov	r0, r5
   13066:	b00b      	add	sp, #44	; 0x2c
   13068:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1306a:	4b09      	ldr	r3, [pc, #36]	; (13090 <conf_commit+0x50>)
   1306c:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   1306e:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   13070:	e000      	b.n	13074 <conf_commit+0x34>
   13072:	6824      	ldr	r4, [r4, #0]
   13074:	2c00      	cmp	r4, #0
   13076:	d0f3      	beq.n	13060 <conf_commit+0x20>
            if (ch->ch_commit) {
   13078:	6923      	ldr	r3, [r4, #16]
   1307a:	2b00      	cmp	r3, #0
   1307c:	d0f9      	beq.n	13072 <conf_commit+0x32>
                rc2 = ch->ch_commit();
   1307e:	4798      	blx	r3
                if (!rc) {
   13080:	2d00      	cmp	r5, #0
   13082:	d1f6      	bne.n	13072 <conf_commit+0x32>
                    rc = rc2;
   13084:	4605      	mov	r5, r0
   13086:	e7f4      	b.n	13072 <conf_commit+0x32>
            rc = OS_INVALID_PARM;
   13088:	2503      	movs	r5, #3
   1308a:	e7e9      	b.n	13060 <conf_commit+0x20>
            rc = 0;
   1308c:	2500      	movs	r5, #0
   1308e:	e7e7      	b.n	13060 <conf_commit+0x20>
   13090:	20003d84 	.word	0x20003d84

00013094 <conf_running_one>:
};

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
   13094:	b508      	push	{r3, lr}
    console_printf("%s = %s\n", name, val ? val : "<del>");
   13096:	460a      	mov	r2, r1
   13098:	b121      	cbz	r1, 130a4 <conf_running_one+0x10>
   1309a:	4601      	mov	r1, r0
   1309c:	4802      	ldr	r0, [pc, #8]	; (130a8 <conf_running_one+0x14>)
   1309e:	f000 feb9 	bl	13e14 <console_printf>
}
   130a2:	bd08      	pop	{r3, pc}
    console_printf("%s = %s\n", name, val ? val : "<del>");
   130a4:	4a01      	ldr	r2, [pc, #4]	; (130ac <conf_running_one+0x18>)
   130a6:	e7f8      	b.n	1309a <conf_running_one+0x6>
   130a8:	0002605c 	.word	0x0002605c
   130ac:	00026054 	.word	0x00026054

000130b0 <conf_dump_running>:

static void
conf_dump_running(void)
{
   130b0:	b510      	push	{r4, lr}
    struct conf_handler *ch;

    conf_lock();
   130b2:	f7ff fe95 	bl	12de0 <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   130b6:	4b07      	ldr	r3, [pc, #28]	; (130d4 <conf_dump_running+0x24>)
   130b8:	681c      	ldr	r4, [r3, #0]
   130ba:	e003      	b.n	130c4 <conf_dump_running+0x14>
        if (ch->ch_export) {
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   130bc:	2101      	movs	r1, #1
   130be:	4806      	ldr	r0, [pc, #24]	; (130d8 <conf_dump_running+0x28>)
   130c0:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   130c2:	6824      	ldr	r4, [r4, #0]
   130c4:	b11c      	cbz	r4, 130ce <conf_dump_running+0x1e>
        if (ch->ch_export) {
   130c6:	6963      	ldr	r3, [r4, #20]
   130c8:	2b00      	cmp	r3, #0
   130ca:	d1f7      	bne.n	130bc <conf_dump_running+0xc>
   130cc:	e7f9      	b.n	130c2 <conf_dump_running+0x12>
        }
    }
    conf_unlock();
   130ce:	f7ff fe91 	bl	12df4 <conf_unlock>
}
   130d2:	bd10      	pop	{r4, pc}
   130d4:	20003d84 	.word	0x20003d84
   130d8:	00013095 	.word	0x00013095

000130dc <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
   130dc:	b530      	push	{r4, r5, lr}
   130de:	b0c3      	sub	sp, #268	; 0x10c
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
   130e0:	2802      	cmp	r0, #2
   130e2:	d007      	beq.n	130f4 <shell_conf_command+0x18>
   130e4:	2803      	cmp	r0, #3
   130e6:	d022      	beq.n	1312e <shell_conf_command+0x52>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
   130e8:	4826      	ldr	r0, [pc, #152]	; (13184 <shell_conf_command+0xa8>)
   130ea:	f000 fe93 	bl	13e14 <console_printf>
    return 0;
}
   130ee:	2000      	movs	r0, #0
   130f0:	b043      	add	sp, #268	; 0x10c
   130f2:	bd30      	pop	{r4, r5, pc}
        name = argv[1];
   130f4:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
   130f6:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
   130f8:	4923      	ldr	r1, [pc, #140]	; (13188 <shell_conf_command+0xac>)
   130fa:	4620      	mov	r0, r4
   130fc:	f7fd faf8 	bl	106f0 <strcmp>
   13100:	b1c0      	cbz	r0, 13134 <shell_conf_command+0x58>
        if (!strcmp(name, "dump")) {
   13102:	4922      	ldr	r1, [pc, #136]	; (1318c <shell_conf_command+0xb0>)
   13104:	4620      	mov	r0, r4
   13106:	f7fd faf3 	bl	106f0 <strcmp>
   1310a:	b1f0      	cbz	r0, 1314a <shell_conf_command+0x6e>
            if (!strcmp(name, "save")) {
   1310c:	4920      	ldr	r1, [pc, #128]	; (13190 <shell_conf_command+0xb4>)
   1310e:	4620      	mov	r0, r4
   13110:	f7fd faee 	bl	106f0 <strcmp>
   13114:	b318      	cbz	r0, 1315e <shell_conf_command+0x82>
    if (!val) {
   13116:	b32d      	cbz	r5, 13164 <shell_conf_command+0x88>
        rc = conf_set_value(name, val);
   13118:	4629      	mov	r1, r5
   1311a:	4620      	mov	r0, r4
   1311c:	f7ff ff58 	bl	12fd0 <conf_set_value>
        if (rc) {
   13120:	4601      	mov	r1, r0
   13122:	2800      	cmp	r0, #0
   13124:	d0e3      	beq.n	130ee <shell_conf_command+0x12>
            console_printf("Failed to set, err: %d\n", rc);
   13126:	481b      	ldr	r0, [pc, #108]	; (13194 <shell_conf_command+0xb8>)
   13128:	f000 fe74 	bl	13e14 <console_printf>
            goto err;
   1312c:	e7dc      	b.n	130e8 <shell_conf_command+0xc>
        name = argv[1];
   1312e:	684c      	ldr	r4, [r1, #4]
        val = argv[2];
   13130:	688d      	ldr	r5, [r1, #8]
        break;
   13132:	e7e1      	b.n	130f8 <shell_conf_command+0x1c>
        rc = conf_commit(val);
   13134:	4628      	mov	r0, r5
   13136:	f7ff ff83 	bl	13040 <conf_commit>
        if (rc) {
   1313a:	b120      	cbz	r0, 13146 <shell_conf_command+0x6a>
            val = "Failed to commit\n";
   1313c:	4916      	ldr	r1, [pc, #88]	; (13198 <shell_conf_command+0xbc>)
        console_printf("%s", val);
   1313e:	4817      	ldr	r0, [pc, #92]	; (1319c <shell_conf_command+0xc0>)
   13140:	f000 fe68 	bl	13e14 <console_printf>
        return 0;
   13144:	e7d3      	b.n	130ee <shell_conf_command+0x12>
            val = "Done\n";
   13146:	4916      	ldr	r1, [pc, #88]	; (131a0 <shell_conf_command+0xc4>)
   13148:	e7f9      	b.n	1313e <shell_conf_command+0x62>
            if (!val || !strcmp(val, "running")) {
   1314a:	b12d      	cbz	r5, 13158 <shell_conf_command+0x7c>
   1314c:	4915      	ldr	r1, [pc, #84]	; (131a4 <shell_conf_command+0xc8>)
   1314e:	4628      	mov	r0, r5
   13150:	f7fd face 	bl	106f0 <strcmp>
   13154:	2800      	cmp	r0, #0
   13156:	d1ca      	bne.n	130ee <shell_conf_command+0x12>
                conf_dump_running();
   13158:	f7ff ffaa 	bl	130b0 <conf_dump_running>
            return 0;
   1315c:	e7c7      	b.n	130ee <shell_conf_command+0x12>
                conf_save();
   1315e:	f000 f8e3 	bl	13328 <conf_save>
                return 0;
   13162:	e7c4      	b.n	130ee <shell_conf_command+0x12>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
   13164:	f240 1201 	movw	r2, #257	; 0x101
   13168:	a901      	add	r1, sp, #4
   1316a:	4620      	mov	r0, r4
   1316c:	f7ff ff4a 	bl	13004 <conf_get_value>
        if (!val) {
   13170:	4601      	mov	r1, r0
   13172:	b118      	cbz	r0, 1317c <shell_conf_command+0xa0>
        console_printf("%s\n", val);
   13174:	480c      	ldr	r0, [pc, #48]	; (131a8 <shell_conf_command+0xcc>)
   13176:	f000 fe4d 	bl	13e14 <console_printf>
   1317a:	e7b8      	b.n	130ee <shell_conf_command+0x12>
            console_printf("Cannot display value\n");
   1317c:	480b      	ldr	r0, [pc, #44]	; (131ac <shell_conf_command+0xd0>)
   1317e:	f000 fe49 	bl	13e14 <console_printf>
            goto err;
   13182:	e7b1      	b.n	130e8 <shell_conf_command+0xc>
   13184:	000260cc 	.word	0x000260cc
   13188:	00026084 	.word	0x00026084
   1318c:	0002584c 	.word	0x0002584c
   13190:	00026094 	.word	0x00026094
   13194:	000260b4 	.word	0x000260b4
   13198:	00026070 	.word	0x00026070
   1319c:	00025750 	.word	0x00025750
   131a0:	00026068 	.word	0x00026068
   131a4:	0002608c 	.word	0x0002608c
   131a8:	00025db0 	.word	0x00025db0
   131ac:	0002609c 	.word	0x0002609c

000131b0 <conf_cli_register>:

int
conf_cli_register(void)
{
   131b0:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_conf_cmd);
   131b2:	4802      	ldr	r0, [pc, #8]	; (131bc <conf_cli_register+0xc>)
   131b4:	f002 fb26 	bl	15804 <shell_cmd_register>
}
   131b8:	bd08      	pop	{r3, pc}
   131ba:	bf00      	nop
   131bc:	20000708 	.word	0x20000708

000131c0 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   131c0:	b538      	push	{r3, r4, r5, lr}
   131c2:	460d      	mov	r5, r1
   131c4:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   131c6:	6811      	ldr	r1, [r2, #0]
   131c8:	f7fd fa92 	bl	106f0 <strcmp>
   131cc:	b9a8      	cbnz	r0, 131fa <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
   131ce:	b145      	cbz	r5, 131e2 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   131d0:	6861      	ldr	r1, [r4, #4]
   131d2:	b181      	cbz	r1, 131f6 <conf_dup_check_cb+0x36>
   131d4:	4628      	mov	r0, r5
   131d6:	f7fd fa8b 	bl	106f0 <strcmp>
   131da:	b960      	cbnz	r0, 131f6 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
   131dc:	2301      	movs	r3, #1
   131de:	60a3      	str	r3, [r4, #8]
   131e0:	e00b      	b.n	131fa <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
   131e2:	6863      	ldr	r3, [r4, #4]
   131e4:	b10b      	cbz	r3, 131ea <conf_dup_check_cb+0x2a>
   131e6:	781b      	ldrb	r3, [r3, #0]
   131e8:	b913      	cbnz	r3, 131f0 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   131ea:	2301      	movs	r3, #1
   131ec:	60a3      	str	r3, [r4, #8]
   131ee:	e004      	b.n	131fa <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
   131f0:	2300      	movs	r3, #0
   131f2:	60a3      	str	r3, [r4, #8]
   131f4:	e001      	b.n	131fa <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
   131f6:	2300      	movs	r3, #0
   131f8:	60a3      	str	r3, [r4, #8]
        }
    }
}
   131fa:	bd38      	pop	{r3, r4, r5, pc}

000131fc <conf_load_cb>:
{
   131fc:	b538      	push	{r3, r4, r5, lr}
   131fe:	4604      	mov	r4, r0
   13200:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   13202:	b122      	cbz	r2, 1320e <conf_load_cb+0x12>
   13204:	4610      	mov	r0, r2
   13206:	4621      	mov	r1, r4
   13208:	f7fd fa72 	bl	106f0 <strcmp>
   1320c:	b918      	cbnz	r0, 13216 <conf_load_cb+0x1a>
        conf_set_value(name, val);
   1320e:	4629      	mov	r1, r5
   13210:	4620      	mov	r0, r4
   13212:	f7ff fedd 	bl	12fd0 <conf_set_value>
}
   13216:	bd38      	pop	{r3, r4, r5, pc}

00013218 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   13218:	4b08      	ldr	r3, [pc, #32]	; (1323c <conf_src_register+0x24>)
   1321a:	6819      	ldr	r1, [r3, #0]
   1321c:	460b      	mov	r3, r1
    prev = NULL;
   1321e:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   13220:	e001      	b.n	13226 <conf_src_register+0xe>
        prev = cur;
   13222:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   13224:	681b      	ldr	r3, [r3, #0]
   13226:	2b00      	cmp	r3, #0
   13228:	d1fb      	bne.n	13222 <conf_src_register+0xa>
    if (!prev) {
   1322a:	b11a      	cbz	r2, 13234 <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   1322c:	6813      	ldr	r3, [r2, #0]
   1322e:	6003      	str	r3, [r0, #0]
   13230:	6010      	str	r0, [r2, #0]
}
   13232:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   13234:	6001      	str	r1, [r0, #0]
   13236:	4b01      	ldr	r3, [pc, #4]	; (1323c <conf_src_register+0x24>)
   13238:	6018      	str	r0, [r3, #0]
   1323a:	4770      	bx	lr
   1323c:	20003d94 	.word	0x20003d94

00013240 <conf_dst_register>:
    conf_save_dst = cs;
   13240:	4b01      	ldr	r3, [pc, #4]	; (13248 <conf_dst_register+0x8>)
   13242:	6018      	str	r0, [r3, #0]
}
   13244:	4770      	bx	lr
   13246:	bf00      	nop
   13248:	20003d9c 	.word	0x20003d9c

0001324c <conf_load>:
{
   1324c:	b510      	push	{r4, lr}
    conf_lock();
   1324e:	f7ff fdc7 	bl	12de0 <conf_lock>
    conf_loaded = true;
   13252:	2301      	movs	r3, #1
   13254:	4a0e      	ldr	r2, [pc, #56]	; (13290 <conf_load+0x44>)
   13256:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   13258:	4a0e      	ldr	r2, [pc, #56]	; (13294 <conf_load+0x48>)
   1325a:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   1325c:	4b0e      	ldr	r3, [pc, #56]	; (13298 <conf_load+0x4c>)
   1325e:	681c      	ldr	r4, [r3, #0]
   13260:	e000      	b.n	13264 <conf_load+0x18>
   13262:	6824      	ldr	r4, [r4, #0]
   13264:	b164      	cbz	r4, 13280 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   13266:	6863      	ldr	r3, [r4, #4]
   13268:	681b      	ldr	r3, [r3, #0]
   1326a:	2200      	movs	r2, #0
   1326c:	490b      	ldr	r1, [pc, #44]	; (1329c <conf_load+0x50>)
   1326e:	4620      	mov	r0, r4
   13270:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   13272:	6823      	ldr	r3, [r4, #0]
   13274:	2b00      	cmp	r3, #0
   13276:	d0f4      	beq.n	13262 <conf_load+0x16>
            conf_commit(NULL);
   13278:	2000      	movs	r0, #0
   1327a:	f7ff fee1 	bl	13040 <conf_commit>
   1327e:	e7f0      	b.n	13262 <conf_load+0x16>
    conf_loading = false;
   13280:	4b04      	ldr	r3, [pc, #16]	; (13294 <conf_load+0x48>)
   13282:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   13284:	f7ff fdb6 	bl	12df4 <conf_unlock>
    return conf_commit(NULL);
   13288:	4620      	mov	r0, r4
   1328a:	f7ff fed9 	bl	13040 <conf_commit>
}
   1328e:	bd10      	pop	{r4, pc}
   13290:	20003d98 	.word	0x20003d98
   13294:	20003d99 	.word	0x20003d99
   13298:	20003d94 	.word	0x20003d94
   1329c:	000131fd 	.word	0x000131fd

000132a0 <conf_ensure_loaded>:
{
   132a0:	b508      	push	{r3, lr}
    if (conf_loaded) {
   132a2:	4b04      	ldr	r3, [pc, #16]	; (132b4 <conf_ensure_loaded+0x14>)
   132a4:	781b      	ldrb	r3, [r3, #0]
   132a6:	b10b      	cbz	r3, 132ac <conf_ensure_loaded+0xc>
        return 0;
   132a8:	2000      	movs	r0, #0
}
   132aa:	bd08      	pop	{r3, pc}
    return conf_load();
   132ac:	f7ff ffce 	bl	1324c <conf_load>
   132b0:	e7fb      	b.n	132aa <conf_ensure_loaded+0xa>
   132b2:	bf00      	nop
   132b4:	20003d98 	.word	0x20003d98

000132b8 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   132b8:	b570      	push	{r4, r5, r6, lr}
   132ba:	b084      	sub	sp, #16
   132bc:	4605      	mov	r5, r0
   132be:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   132c0:	f7ff fd8e 	bl	12de0 <conf_lock>
    if (!conf_save_dst) {
   132c4:	4b13      	ldr	r3, [pc, #76]	; (13314 <conf_save_one+0x5c>)
   132c6:	681b      	ldr	r3, [r3, #0]
   132c8:	b1fb      	cbz	r3, 1330a <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   132ca:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   132cc:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   132ce:	2300      	movs	r3, #0
   132d0:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   132d2:	4b11      	ldr	r3, [pc, #68]	; (13318 <conf_save_one+0x60>)
   132d4:	681c      	ldr	r4, [r3, #0]
   132d6:	e006      	b.n	132e6 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   132d8:	6863      	ldr	r3, [r4, #4]
   132da:	681b      	ldr	r3, [r3, #0]
   132dc:	aa01      	add	r2, sp, #4
   132de:	490f      	ldr	r1, [pc, #60]	; (1331c <conf_save_one+0x64>)
   132e0:	4620      	mov	r0, r4
   132e2:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   132e4:	6824      	ldr	r4, [r4, #0]
   132e6:	2c00      	cmp	r4, #0
   132e8:	d1f6      	bne.n	132d8 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   132ea:	9b03      	ldr	r3, [sp, #12]
   132ec:	2b01      	cmp	r3, #1
   132ee:	d00e      	beq.n	1330e <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   132f0:	4b08      	ldr	r3, [pc, #32]	; (13314 <conf_save_one+0x5c>)
   132f2:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   132f4:	6843      	ldr	r3, [r0, #4]
   132f6:	689b      	ldr	r3, [r3, #8]
   132f8:	4632      	mov	r2, r6
   132fa:	4629      	mov	r1, r5
   132fc:	4798      	blx	r3
   132fe:	4604      	mov	r4, r0
out:
    conf_unlock();
   13300:	f7ff fd78 	bl	12df4 <conf_unlock>
    return rc;
}
   13304:	4620      	mov	r0, r4
   13306:	b004      	add	sp, #16
   13308:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   1330a:	240a      	movs	r4, #10
   1330c:	e7f8      	b.n	13300 <conf_save_one+0x48>
        rc = 0;
   1330e:	2400      	movs	r4, #0
   13310:	e7f6      	b.n	13300 <conf_save_one+0x48>
   13312:	bf00      	nop
   13314:	20003d9c 	.word	0x20003d9c
   13318:	20003d94 	.word	0x20003d94
   1331c:	000131c1 	.word	0x000131c1

00013320 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
   13320:	b508      	push	{r3, lr}
    conf_save_one(name, value);
   13322:	f7ff ffc9 	bl	132b8 <conf_save_one>
}
   13326:	bd08      	pop	{r3, pc}

00013328 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   13328:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   1332a:	f7ff fd59 	bl	12de0 <conf_lock>
    cs = conf_save_dst;
   1332e:	4b11      	ldr	r3, [pc, #68]	; (13374 <conf_save+0x4c>)
   13330:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
   13332:	b1ee      	cbz	r6, 13370 <conf_save+0x48>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   13334:	6873      	ldr	r3, [r6, #4]
   13336:	685b      	ldr	r3, [r3, #4]
   13338:	b10b      	cbz	r3, 1333e <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   1333a:	4630      	mov	r0, r6
   1333c:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1333e:	4b0e      	ldr	r3, [pc, #56]	; (13378 <conf_save+0x50>)
   13340:	681c      	ldr	r4, [r3, #0]
    rc = 0;
   13342:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   13344:	e000      	b.n	13348 <conf_save+0x20>
   13346:	6824      	ldr	r4, [r4, #0]
   13348:	b14c      	cbz	r4, 1335e <conf_save+0x36>
        if (ch->ch_export) {
   1334a:	6963      	ldr	r3, [r4, #20]
   1334c:	2b00      	cmp	r3, #0
   1334e:	d0fa      	beq.n	13346 <conf_save+0x1e>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   13350:	2100      	movs	r1, #0
   13352:	480a      	ldr	r0, [pc, #40]	; (1337c <conf_save+0x54>)
   13354:	4798      	blx	r3
            if (!rc) {
   13356:	2d00      	cmp	r5, #0
   13358:	d1f5      	bne.n	13346 <conf_save+0x1e>
                rc = rc2;
   1335a:	4605      	mov	r5, r0
   1335c:	e7f3      	b.n	13346 <conf_save+0x1e>
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
   1335e:	6873      	ldr	r3, [r6, #4]
   13360:	68db      	ldr	r3, [r3, #12]
   13362:	b10b      	cbz	r3, 13368 <conf_save+0x40>
        cs->cs_itf->csi_save_end(cs);
   13364:	4630      	mov	r0, r6
   13366:	4798      	blx	r3
    }
out:
    conf_unlock();
   13368:	f7ff fd44 	bl	12df4 <conf_unlock>
    return rc;
}
   1336c:	4628      	mov	r0, r5
   1336e:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   13370:	250a      	movs	r5, #10
   13372:	e7f9      	b.n	13368 <conf_save+0x40>
   13374:	20003d9c 	.word	0x20003d9c
   13378:	20003d84 	.word	0x20003d84
   1337c:	00013321 	.word	0x00013321

00013380 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   13380:	2300      	movs	r3, #0
   13382:	4a02      	ldr	r2, [pc, #8]	; (1338c <conf_store_init+0xc>)
   13384:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   13386:	4a02      	ldr	r2, [pc, #8]	; (13390 <conf_store_init+0x10>)
   13388:	6013      	str	r3, [r2, #0]
}
   1338a:	4770      	bx	lr
   1338c:	20003d98 	.word	0x20003d98
   13390:	20003d94 	.word	0x20003d94

00013394 <ring_buf_next>:
}

static uint8_t
ring_buf_next(uint8_t i, uint8_t size)
{
    return (uint8_t) ((i + 1) % size);
   13394:	3001      	adds	r0, #1
   13396:	fb90 f3f1 	sdiv	r3, r0, r1
   1339a:	fb01 0013 	mls	r0, r1, r3, r0
}
   1339e:	b2c0      	uxtb	r0, r0
   133a0:	4770      	bx	lr

000133a2 <ring_buf_prev>:

static uint8_t
ring_buf_prev(uint8_t i, uint8_t size)
{
    return i == 0 ? i = size - 1 : --i;
   133a2:	b910      	cbnz	r0, 133aa <ring_buf_prev+0x8>
   133a4:	3901      	subs	r1, #1
   133a6:	b2c8      	uxtb	r0, r1
   133a8:	4770      	bx	lr
   133aa:	3801      	subs	r0, #1
   133ac:	b2c0      	uxtb	r0, r0
}
   133ae:	4770      	bx	lr

000133b0 <console_hist_is_full>:

static bool
console_hist_is_full(void)
{
   133b0:	b510      	push	{r4, lr}
    struct console_hist *sh = &console_hist;

    return ring_buf_next(sh->head, sh->size) == sh->tail;
   133b2:	4c05      	ldr	r4, [pc, #20]	; (133c8 <console_hist_is_full+0x18>)
   133b4:	78a1      	ldrb	r1, [r4, #2]
   133b6:	7820      	ldrb	r0, [r4, #0]
   133b8:	f7ff ffec 	bl	13394 <ring_buf_next>
   133bc:	7863      	ldrb	r3, [r4, #1]
}
   133be:	4298      	cmp	r0, r3
   133c0:	bf14      	ite	ne
   133c2:	2000      	movne	r0, #0
   133c4:	2001      	moveq	r0, #1
   133c6:	bd10      	pop	{r4, pc}
   133c8:	20003dc0 	.word	0x20003dc0

000133cc <handle_nlip>:
}

static int
handle_nlip(uint8_t byte)
{
    if (((nlip_state & NLIP_PKT_START1) &&
   133cc:	4b13      	ldr	r3, [pc, #76]	; (1341c <handle_nlip+0x50>)
   133ce:	681b      	ldr	r3, [r3, #0]
   133d0:	f003 0203 	and.w	r2, r3, #3
   133d4:	2a03      	cmp	r2, #3
   133d6:	d01d      	beq.n	13414 <handle_nlip+0x48>
         (nlip_state & NLIP_PKT_START2)) ||
        ((nlip_state & NLIP_DATA_START1) &&
   133d8:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
   133dc:	2a0c      	cmp	r2, #12
   133de:	d01b      	beq.n	13418 <handle_nlip+0x4c>
         (nlip_state & NLIP_DATA_START2)))
    {
        return 1;
    }

    if ((nlip_state & NLIP_PKT_START1) &&
   133e0:	f013 0f01 	tst.w	r3, #1
   133e4:	d001      	beq.n	133ea <handle_nlip+0x1e>
   133e6:	2809      	cmp	r0, #9
   133e8:	d008      	beq.n	133fc <handle_nlip+0x30>
        (byte == CONSOLE_NLIP_PKT_START2)) {
        nlip_state |= NLIP_PKT_START2;
        return 1;
    } else if ((nlip_state & NLIP_DATA_START1) &&
   133ea:	f013 0f04 	tst.w	r3, #4
   133ee:	d001      	beq.n	133f4 <handle_nlip+0x28>
   133f0:	2814      	cmp	r0, #20
   133f2:	d009      	beq.n	13408 <handle_nlip+0x3c>
               (byte == CONSOLE_NLIP_DATA_START2)) {
        nlip_state |= NLIP_DATA_START2;
        return 1;
    } else {
        nlip_state = 0;
   133f4:	2000      	movs	r0, #0
   133f6:	4b09      	ldr	r3, [pc, #36]	; (1341c <handle_nlip+0x50>)
   133f8:	6018      	str	r0, [r3, #0]
        return 0;
   133fa:	4770      	bx	lr
        nlip_state |= NLIP_PKT_START2;
   133fc:	f043 0302 	orr.w	r3, r3, #2
   13400:	4a06      	ldr	r2, [pc, #24]	; (1341c <handle_nlip+0x50>)
   13402:	6013      	str	r3, [r2, #0]
        return 1;
   13404:	2001      	movs	r0, #1
   13406:	4770      	bx	lr
        nlip_state |= NLIP_DATA_START2;
   13408:	f043 0308 	orr.w	r3, r3, #8
   1340c:	4a03      	ldr	r2, [pc, #12]	; (1341c <handle_nlip+0x50>)
   1340e:	6013      	str	r3, [r2, #0]
        return 1;
   13410:	2001      	movs	r0, #1
   13412:	4770      	bx	lr
        return 1;
   13414:	2001      	movs	r0, #1
   13416:	4770      	bx	lr
   13418:	2001      	movs	r0, #1
    }
}
   1341a:	4770      	bx	lr
   1341c:	20004610 	.word	0x20004610

00013420 <trim_whitespace>:
{
   13420:	b570      	push	{r4, r5, r6, lr}
   13422:	4604      	mov	r4, r0
   13424:	4615      	mov	r5, r2
    if (len == 0) {
   13426:	460e      	mov	r6, r1
   13428:	b909      	cbnz	r1, 1342e <trim_whitespace+0xe>
   1342a:	e02c      	b.n	13486 <trim_whitespace+0x66>
        str++;
   1342c:	3401      	adds	r4, #1
    while (isspace((unsigned char)*str)) {
   1342e:	7823      	ldrb	r3, [r4, #0]
   13430:	2b20      	cmp	r3, #32
   13432:	d0fb      	beq.n	1342c <trim_whitespace+0xc>
   13434:	2b0a      	cmp	r3, #10
   13436:	d0f9      	beq.n	1342c <trim_whitespace+0xc>
   13438:	2b09      	cmp	r3, #9
   1343a:	d0f7      	beq.n	1342c <trim_whitespace+0xc>
   1343c:	2b0d      	cmp	r3, #13
   1343e:	d0f5      	beq.n	1342c <trim_whitespace+0xc>
    if (*str == 0) { /* All spaces? */
   13440:	b12b      	cbz	r3, 1344e <trim_whitespace+0x2e>
    end = str + strlen(str) - 1;
   13442:	4620      	mov	r0, r4
   13444:	f7fd f960 	bl	10708 <strlen>
   13448:	1e43      	subs	r3, r0, #1
   1344a:	4423      	add	r3, r4
    while (end > str && isspace((unsigned char)*end)) {
   1344c:	e003      	b.n	13456 <trim_whitespace+0x36>
        *out = 0;
   1344e:	702b      	strb	r3, [r5, #0]
        return 0;
   13450:	461e      	mov	r6, r3
   13452:	e018      	b.n	13486 <trim_whitespace+0x66>
        end--;
   13454:	3b01      	subs	r3, #1
    while (end > str && isspace((unsigned char)*end)) {
   13456:	429c      	cmp	r4, r3
   13458:	d208      	bcs.n	1346c <trim_whitespace+0x4c>
   1345a:	781a      	ldrb	r2, [r3, #0]
   1345c:	2a20      	cmp	r2, #32
   1345e:	d0f9      	beq.n	13454 <trim_whitespace+0x34>
   13460:	2a0a      	cmp	r2, #10
   13462:	d0f7      	beq.n	13454 <trim_whitespace+0x34>
   13464:	2a09      	cmp	r2, #9
   13466:	d0f5      	beq.n	13454 <trim_whitespace+0x34>
   13468:	2a0d      	cmp	r2, #13
   1346a:	d0f3      	beq.n	13454 <trim_whitespace+0x34>
    end++;
   1346c:	3301      	adds	r3, #1
    out_size = min(end - str, len - 1);
   1346e:	3e01      	subs	r6, #1
   13470:	1b1b      	subs	r3, r3, r4
   13472:	429e      	cmp	r6, r3
   13474:	bf28      	it	cs
   13476:	461e      	movcs	r6, r3
    memcpy(out, str, out_size);
   13478:	4632      	mov	r2, r6
   1347a:	4621      	mov	r1, r4
   1347c:	4628      	mov	r0, r5
   1347e:	f7fd f8ff 	bl	10680 <memcpy>
    out[out_size] = 0;
   13482:	2300      	movs	r3, #0
   13484:	55ab      	strb	r3, [r5, r6]
}
   13486:	4630      	mov	r0, r6
   13488:	bd70      	pop	{r4, r5, r6, pc}
	...

0001348c <console_hist_move_to_head>:
{
   1348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13490:	4605      	mov	r5, r0
    curr = sh->tail;
   13492:	4b1d      	ldr	r3, [pc, #116]	; (13508 <console_hist_move_to_head+0x7c>)
   13494:	785c      	ldrb	r4, [r3, #1]
    while (curr != sh->head) {
   13496:	e005      	b.n	134a4 <console_hist_move_to_head+0x18>
        curr = ring_buf_next(curr, sh->size);
   13498:	4b1b      	ldr	r3, [pc, #108]	; (13508 <console_hist_move_to_head+0x7c>)
   1349a:	7899      	ldrb	r1, [r3, #2]
   1349c:	4620      	mov	r0, r4
   1349e:	f7ff ff79 	bl	13394 <ring_buf_next>
   134a2:	4604      	mov	r4, r0
    while (curr != sh->head) {
   134a4:	4b18      	ldr	r3, [pc, #96]	; (13508 <console_hist_move_to_head+0x7c>)
   134a6:	781e      	ldrb	r6, [r3, #0]
   134a8:	42a6      	cmp	r6, r4
   134aa:	d00a      	beq.n	134c2 <console_hist_move_to_head+0x36>
        if (strcmp(sh->lines[curr], line) == 0) {
   134ac:	4b16      	ldr	r3, [pc, #88]	; (13508 <console_hist_move_to_head+0x7c>)
   134ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   134b2:	685f      	ldr	r7, [r3, #4]
   134b4:	4629      	mov	r1, r5
   134b6:	4638      	mov	r0, r7
   134b8:	f7fd f91a 	bl	106f0 <strcmp>
   134bc:	2800      	cmp	r0, #0
   134be:	d1eb      	bne.n	13498 <console_hist_move_to_head+0xc>
   134c0:	e000      	b.n	134c4 <console_hist_move_to_head+0x38>
    char *match = NULL;
   134c2:	2700      	movs	r7, #0
    if (!match) {
   134c4:	b1f7      	cbz	r7, 13504 <console_hist_move_to_head+0x78>
    curr = ring_buf_next(curr, sh->size);
   134c6:	4b10      	ldr	r3, [pc, #64]	; (13508 <console_hist_move_to_head+0x7c>)
   134c8:	f893 8002 	ldrb.w	r8, [r3, #2]
   134cc:	4641      	mov	r1, r8
   134ce:	4620      	mov	r0, r4
   134d0:	f7ff ff60 	bl	13394 <ring_buf_next>
   134d4:	4605      	mov	r5, r0
    while (curr != sh->head) {
   134d6:	e00c      	b.n	134f2 <console_hist_move_to_head+0x66>
        sh->lines[prev] = sh->lines[curr];
   134d8:	480b      	ldr	r0, [pc, #44]	; (13508 <console_hist_move_to_head+0x7c>)
   134da:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   134de:	685b      	ldr	r3, [r3, #4]
   134e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   134e4:	6043      	str	r3, [r0, #4]
        curr = ring_buf_next(curr, sh->size);
   134e6:	4641      	mov	r1, r8
   134e8:	4628      	mov	r0, r5
   134ea:	f7ff ff53 	bl	13394 <ring_buf_next>
        prev = curr;
   134ee:	462c      	mov	r4, r5
        curr = ring_buf_next(curr, sh->size);
   134f0:	4605      	mov	r5, r0
    while (curr != sh->head) {
   134f2:	42ae      	cmp	r6, r5
   134f4:	d1f0      	bne.n	134d8 <console_hist_move_to_head+0x4c>
    sh->lines[prev] = match;
   134f6:	4804      	ldr	r0, [pc, #16]	; (13508 <console_hist_move_to_head+0x7c>)
   134f8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   134fc:	6067      	str	r7, [r4, #4]
    return true;
   134fe:	2001      	movs	r0, #1
}
   13500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   13504:	2000      	movs	r0, #0
   13506:	e7fb      	b.n	13500 <console_hist_move_to_head+0x74>
   13508:	20003dc0 	.word	0x20003dc0

0001350c <console_hist_add>:
{
   1350c:	b510      	push	{r4, lr}
   1350e:	b0c0      	sub	sp, #256	; 0x100
    sh->curr = sh->head;
   13510:	4b1d      	ldr	r3, [pc, #116]	; (13588 <console_hist_add+0x7c>)
   13512:	781a      	ldrb	r2, [r3, #0]
   13514:	70da      	strb	r2, [r3, #3]
    len = trim_whitespace(line, sizeof(buf), buf);
   13516:	466a      	mov	r2, sp
   13518:	f44f 7180 	mov.w	r1, #256	; 0x100
   1351c:	f7ff ff80 	bl	13420 <trim_whitespace>
    if (!len) {
   13520:	b908      	cbnz	r0, 13526 <console_hist_add+0x1a>
}
   13522:	b040      	add	sp, #256	; 0x100
   13524:	bd10      	pop	{r4, pc}
    if (console_hist_move_to_head(buf)) {
   13526:	4668      	mov	r0, sp
   13528:	f7ff ffb0 	bl	1348c <console_hist_move_to_head>
   1352c:	2800      	cmp	r0, #0
   1352e:	d1f8      	bne.n	13522 <console_hist_add+0x16>
    if (console_hist_is_full()) {
   13530:	f7ff ff3e 	bl	133b0 <console_hist_is_full>
   13534:	b198      	cbz	r0, 1355e <console_hist_add+0x52>
        assert(sh->lines[sh->head] == NULL);
   13536:	4a14      	ldr	r2, [pc, #80]	; (13588 <console_hist_add+0x7c>)
   13538:	7813      	ldrb	r3, [r2, #0]
   1353a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1353e:	6852      	ldr	r2, [r2, #4]
   13540:	b9e2      	cbnz	r2, 1357c <console_hist_add+0x70>
        sh->lines[sh->head] = sh->lines[sh->tail];
   13542:	4c11      	ldr	r4, [pc, #68]	; (13588 <console_hist_add+0x7c>)
   13544:	7860      	ldrb	r0, [r4, #1]
   13546:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1354a:	6851      	ldr	r1, [r2, #4]
   1354c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   13550:	6059      	str	r1, [r3, #4]
        sh->lines[sh->tail] = NULL;
   13552:	2300      	movs	r3, #0
   13554:	6053      	str	r3, [r2, #4]
        sh->tail = ring_buf_next(sh->tail, sh->size);
   13556:	78a1      	ldrb	r1, [r4, #2]
   13558:	f7ff ff1c 	bl	13394 <ring_buf_next>
   1355c:	7060      	strb	r0, [r4, #1]
    strcpy(sh->lines[sh->head], buf);
   1355e:	4c0a      	ldr	r4, [pc, #40]	; (13588 <console_hist_add+0x7c>)
   13560:	7823      	ldrb	r3, [r4, #0]
   13562:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   13566:	4669      	mov	r1, sp
   13568:	6858      	ldr	r0, [r3, #4]
   1356a:	f00d ffa3 	bl	214b4 <strcpy>
    sh->head = ring_buf_next(sh->head, sh->size);
   1356e:	78a1      	ldrb	r1, [r4, #2]
   13570:	7820      	ldrb	r0, [r4, #0]
   13572:	f7ff ff0f 	bl	13394 <ring_buf_next>
   13576:	7020      	strb	r0, [r4, #0]
    sh->curr = sh->head;
   13578:	70e0      	strb	r0, [r4, #3]
   1357a:	e7d2      	b.n	13522 <console_hist_add+0x16>
        assert(sh->lines[sh->head] == NULL);
   1357c:	2300      	movs	r3, #0
   1357e:	461a      	mov	r2, r3
   13580:	4619      	mov	r1, r3
   13582:	4618      	mov	r0, r3
   13584:	f7f5 fe1e 	bl	91c4 <__assert_func>
   13588:	20003dc0 	.word	0x20003dc0

0001358c <console_hist_init>:
{
   1358c:	b510      	push	{r4, lr}
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
   1358e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13592:	2100      	movs	r1, #0
   13594:	480b      	ldr	r0, [pc, #44]	; (135c4 <console_hist_init+0x38>)
   13596:	f7fd f880 	bl	1069a <memset>
    memset(&console_hist, 0, sizeof(console_hist));
   1359a:	4c0b      	ldr	r4, [pc, #44]	; (135c8 <console_hist_init+0x3c>)
   1359c:	2228      	movs	r2, #40	; 0x28
   1359e:	2100      	movs	r1, #0
   135a0:	4620      	mov	r0, r4
   135a2:	f7fd f87a 	bl	1069a <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
   135a6:	2309      	movs	r3, #9
   135a8:	70a3      	strb	r3, [r4, #2]
    for (i = 0; i < sh->size - 1; i++) {
   135aa:	2300      	movs	r3, #0
   135ac:	e007      	b.n	135be <console_hist_init+0x32>
        sh->lines[i] = console_hist_lines[i];
   135ae:	4905      	ldr	r1, [pc, #20]	; (135c4 <console_hist_init+0x38>)
   135b0:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   135b4:	4a04      	ldr	r2, [pc, #16]	; (135c8 <console_hist_init+0x3c>)
   135b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   135ba:	6051      	str	r1, [r2, #4]
    for (i = 0; i < sh->size - 1; i++) {
   135bc:	3301      	adds	r3, #1
   135be:	2b07      	cmp	r3, #7
   135c0:	ddf5      	ble.n	135ae <console_hist_init+0x22>
}
   135c2:	bd10      	pop	{r4, pc}
   135c4:	20003de8 	.word	0x20003de8
   135c8:	20003dc0 	.word	0x20003dc0

000135cc <console_echo>:
    echo = on;
   135cc:	4b01      	ldr	r3, [pc, #4]	; (135d4 <console_echo+0x8>)
   135ce:	6018      	str	r0, [r3, #0]
}
   135d0:	4770      	bx	lr
   135d2:	bf00      	nop
   135d4:	20000718 	.word	0x20000718

000135d8 <console_lock>:
{
   135d8:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   135da:	4b0a      	ldr	r3, [pc, #40]	; (13604 <console_lock+0x2c>)
   135dc:	685b      	ldr	r3, [r3, #4]
   135de:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   135e2:	b133      	cbz	r3, 135f2 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   135e4:	4b08      	ldr	r3, [pc, #32]	; (13608 <console_lock+0x30>)
   135e6:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   135e8:	b90b      	cbnz	r3, 135ee <console_lock+0x16>
    int rc = OS_OK;
   135ea:	2000      	movs	r0, #0
   135ec:	e007      	b.n	135fe <console_lock+0x26>
            rc = OS_EBUSY;
   135ee:	200b      	movs	r0, #11
        goto end;
   135f0:	e005      	b.n	135fe <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   135f2:	4601      	mov	r1, r0
   135f4:	4804      	ldr	r0, [pc, #16]	; (13608 <console_lock+0x30>)
   135f6:	f7f7 fb99 	bl	ad2c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   135fa:	2809      	cmp	r0, #9
   135fc:	d000      	beq.n	13600 <console_lock+0x28>
}
   135fe:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   13600:	2000      	movs	r0, #0
    return rc;
   13602:	e7fc      	b.n	135fe <console_lock+0x26>
   13604:	e000ed00 	.word	0xe000ed00
   13608:	200045ec 	.word	0x200045ec

0001360c <console_unlock>:
{
   1360c:	b508      	push	{r3, lr}
   1360e:	4b0a      	ldr	r3, [pc, #40]	; (13638 <console_unlock+0x2c>)
   13610:	685b      	ldr	r3, [r3, #4]
   13612:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   13616:	b10b      	cbz	r3, 1361c <console_unlock+0x10>
    int rc = OS_OK;
   13618:	2000      	movs	r0, #0
}
   1361a:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   1361c:	4807      	ldr	r0, [pc, #28]	; (1363c <console_unlock+0x30>)
   1361e:	f7f7 fb29 	bl	ac74 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   13622:	2800      	cmp	r0, #0
   13624:	d0f9      	beq.n	1361a <console_unlock+0xe>
   13626:	2809      	cmp	r0, #9
   13628:	d0f7      	beq.n	1361a <console_unlock+0xe>
   1362a:	2300      	movs	r3, #0
   1362c:	461a      	mov	r2, r3
   1362e:	4619      	mov	r1, r3
   13630:	4618      	mov	r0, r3
   13632:	f7f5 fdc7 	bl	91c4 <__assert_func>
   13636:	bf00      	nop
   13638:	e000ed00 	.word	0xe000ed00
   1363c:	200045ec 	.word	0x200045ec

00013640 <console_out>:
{
   13640:	b510      	push	{r4, lr}
   13642:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
   13644:	2080      	movs	r0, #128	; 0x80
   13646:	f7ff ffc7 	bl	135d8 <console_lock>
   1364a:	b108      	cbz	r0, 13650 <console_out+0x10>
}
   1364c:	4620      	mov	r0, r4
   1364e:	bd10      	pop	{r4, pc}
    rc = console_out_nolock(c);
   13650:	4620      	mov	r0, r4
   13652:	f000 fc59 	bl	13f08 <console_out_nolock>
   13656:	4604      	mov	r4, r0
    (void)console_unlock();
   13658:	f7ff ffd8 	bl	1360c <console_unlock>
    return rc;
   1365c:	e7f6      	b.n	1364c <console_out+0xc>
	...

00013660 <console_append_char>:

static int
console_append_char(char *line, uint8_t byte)
{
   13660:	b508      	push	{r3, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   13662:	4b0d      	ldr	r3, [pc, #52]	; (13698 <console_append_char+0x38>)
   13664:	881b      	ldrh	r3, [r3, #0]
   13666:	4a0d      	ldr	r2, [pc, #52]	; (1369c <console_append_char+0x3c>)
   13668:	8812      	ldrh	r2, [r2, #0]
   1366a:	4413      	add	r3, r2
   1366c:	2bfe      	cmp	r3, #254	; 0xfe
   1366e:	dc0e      	bgt.n	1368e <console_append_char+0x2e>
        return 0;
    }

    line[cur + end] = byte;
   13670:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   13672:	b171      	cbz	r1, 13692 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   13674:	4b0a      	ldr	r3, [pc, #40]	; (136a0 <console_append_char+0x40>)
   13676:	681b      	ldr	r3, [r3, #0]
   13678:	b92b      	cbnz	r3, 13686 <console_append_char+0x26>
        /* Echo back to console */
        console_out(byte);
    }
    ++cur;
   1367a:	4a07      	ldr	r2, [pc, #28]	; (13698 <console_append_char+0x38>)
   1367c:	8813      	ldrh	r3, [r2, #0]
   1367e:	3301      	adds	r3, #1
   13680:	8013      	strh	r3, [r2, #0]
    return 1;
   13682:	2001      	movs	r0, #1
}
   13684:	bd08      	pop	{r3, pc}
        console_out(byte);
   13686:	4608      	mov	r0, r1
   13688:	f7ff ffda 	bl	13640 <console_out>
   1368c:	e7f5      	b.n	1367a <console_append_char+0x1a>
        return 0;
   1368e:	2000      	movs	r0, #0
   13690:	e7f8      	b.n	13684 <console_append_char+0x24>
        return 1;
   13692:	2001      	movs	r0, #1
   13694:	e7f6      	b.n	13684 <console_append_char+0x24>
   13696:	bf00      	nop
   13698:	200045f8 	.word	0x200045f8
   1369c:	200045fa 	.word	0x200045fa
   136a0:	20000718 	.word	0x20000718

000136a4 <console_clear_line>:
{
   136a4:	b508      	push	{r3, lr}
    if (cur) {
   136a6:	4b0b      	ldr	r3, [pc, #44]	; (136d4 <console_clear_line+0x30>)
   136a8:	8819      	ldrh	r1, [r3, #0]
   136aa:	b971      	cbnz	r1, 136ca <console_clear_line+0x26>
    cur = 0;
   136ac:	2300      	movs	r3, #0
   136ae:	4a09      	ldr	r2, [pc, #36]	; (136d4 <console_clear_line+0x30>)
   136b0:	8013      	strh	r3, [r2, #0]
    end = 0;
   136b2:	4a09      	ldr	r2, [pc, #36]	; (136d8 <console_clear_line+0x34>)
   136b4:	8013      	strh	r3, [r2, #0]
    console_out(ESC);
   136b6:	201b      	movs	r0, #27
   136b8:	f7ff ffc2 	bl	13640 <console_out>
    console_out('[');
   136bc:	205b      	movs	r0, #91	; 0x5b
   136be:	f7ff ffbf 	bl	13640 <console_out>
    console_out('K');
   136c2:	204b      	movs	r0, #75	; 0x4b
   136c4:	f7ff ffbc 	bl	13640 <console_out>
}
   136c8:	bd08      	pop	{r3, pc}
    console_printf("\x1b[%uD", count);
   136ca:	4804      	ldr	r0, [pc, #16]	; (136dc <console_clear_line+0x38>)
   136cc:	f000 fba2 	bl	13e14 <console_printf>
}
   136d0:	e7ec      	b.n	136ac <console_clear_line+0x8>
   136d2:	bf00      	nop
   136d4:	200045f8 	.word	0x200045f8
   136d8:	200045fa 	.word	0x200045fa
   136dc:	000260e4 	.word	0x000260e4

000136e0 <insert_char>:
{
   136e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   136e2:	4b1d      	ldr	r3, [pc, #116]	; (13758 <insert_char+0x78>)
   136e4:	881b      	ldrh	r3, [r3, #0]
   136e6:	4413      	add	r3, r2
   136e8:	2bfe      	cmp	r3, #254	; 0xfe
   136ea:	dc0b      	bgt.n	13704 <insert_char+0x24>
   136ec:	4604      	mov	r4, r0
   136ee:	460e      	mov	r6, r1
   136f0:	4615      	mov	r5, r2
    if (echo) {
   136f2:	4b1a      	ldr	r3, [pc, #104]	; (1375c <insert_char+0x7c>)
   136f4:	681b      	ldr	r3, [r3, #0]
   136f6:	b933      	cbnz	r3, 13706 <insert_char+0x26>
    ++cur;
   136f8:	4a17      	ldr	r2, [pc, #92]	; (13758 <insert_char+0x78>)
   136fa:	8813      	ldrh	r3, [r2, #0]
   136fc:	3301      	adds	r3, #1
   136fe:	8013      	strh	r3, [r2, #0]
    if (end == 0) {
   13700:	b92d      	cbnz	r5, 1370e <insert_char+0x2e>
        *pos = c;
   13702:	7026      	strb	r6, [r4, #0]
}
   13704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        console_out(c);
   13706:	4608      	mov	r0, r1
   13708:	f7ff ff9a 	bl	13640 <console_out>
   1370c:	e7f4      	b.n	136f8 <insert_char+0x18>
    tmp = *pos;
   1370e:	7827      	ldrb	r7, [r4, #0]
    *(pos++) = c;
   13710:	f804 6b01 	strb.w	r6, [r4], #1
    console_out(ESC);
   13714:	201b      	movs	r0, #27
   13716:	f7ff ff93 	bl	13640 <console_out>
    console_out('[');
   1371a:	205b      	movs	r0, #91	; 0x5b
   1371c:	f7ff ff90 	bl	13640 <console_out>
    console_out('s');
   13720:	2073      	movs	r0, #115	; 0x73
   13722:	f7ff ff8d 	bl	13640 <console_out>
}
   13726:	e009      	b.n	1373c <insert_char+0x5c>
        console_out(tmp);
   13728:	4638      	mov	r0, r7
   1372a:	f7ff ff89 	bl	13640 <console_out>
        c = *pos;
   1372e:	7823      	ldrb	r3, [r4, #0]
        *(pos++) = tmp;
   13730:	4620      	mov	r0, r4
   13732:	f800 7b01 	strb.w	r7, [r0], #1
        tmp = c;
   13736:	461f      	mov	r7, r3
    while (end-- > 0) {
   13738:	4635      	mov	r5, r6
        *(pos++) = tmp;
   1373a:	4604      	mov	r4, r0
    while (end-- > 0) {
   1373c:	1e6b      	subs	r3, r5, #1
   1373e:	b29e      	uxth	r6, r3
   13740:	2d00      	cmp	r5, #0
   13742:	d1f1      	bne.n	13728 <insert_char+0x48>
    console_out(ESC);
   13744:	201b      	movs	r0, #27
   13746:	f7ff ff7b 	bl	13640 <console_out>
    console_out('[');
   1374a:	205b      	movs	r0, #91	; 0x5b
   1374c:	f7ff ff78 	bl	13640 <console_out>
    console_out('u');
   13750:	2075      	movs	r0, #117	; 0x75
   13752:	f7ff ff75 	bl	13640 <console_out>
}
   13756:	e7d5      	b.n	13704 <insert_char+0x24>
   13758:	200045f8 	.word	0x200045f8
   1375c:	20000718 	.word	0x20000718

00013760 <console_hist_move>:
{
   13760:	b538      	push	{r3, r4, r5, lr}
   13762:	4605      	mov	r5, r0
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   13764:	2941      	cmp	r1, #65	; 0x41
   13766:	d014      	beq.n	13792 <console_hist_move+0x32>
   13768:	4b15      	ldr	r3, [pc, #84]	; (137c0 <console_hist_move+0x60>)
   1376a:	781b      	ldrb	r3, [r3, #0]
    if (sh->curr == limit) {
   1376c:	4a14      	ldr	r2, [pc, #80]	; (137c0 <console_hist_move+0x60>)
   1376e:	78d0      	ldrb	r0, [r2, #3]
   13770:	4298      	cmp	r0, r3
   13772:	d023      	beq.n	137bc <console_hist_move+0x5c>
    if (direction == ANSI_UP) {
   13774:	2941      	cmp	r1, #65	; 0x41
   13776:	d00f      	beq.n	13798 <console_hist_move+0x38>
        sh->curr = ring_buf_next(sh->curr, sh->size);
   13778:	4c11      	ldr	r4, [pc, #68]	; (137c0 <console_hist_move+0x60>)
   1377a:	78a1      	ldrb	r1, [r4, #2]
   1377c:	f7ff fe0a 	bl	13394 <ring_buf_next>
   13780:	70e0      	strb	r0, [r4, #3]
    console_clear_line();
   13782:	f7ff ff8f 	bl	136a4 <console_clear_line>
    str = sh->lines[sh->curr];
   13786:	4b0e      	ldr	r3, [pc, #56]	; (137c0 <console_hist_move+0x60>)
   13788:	78da      	ldrb	r2, [r3, #3]
   1378a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1378e:	685c      	ldr	r4, [r3, #4]
    while (str && *str != '\0') {
   13790:	e010      	b.n	137b4 <console_hist_move+0x54>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   13792:	4b0b      	ldr	r3, [pc, #44]	; (137c0 <console_hist_move+0x60>)
   13794:	785b      	ldrb	r3, [r3, #1]
   13796:	e7e9      	b.n	1376c <console_hist_move+0xc>
        sh->curr = ring_buf_prev(sh->curr, sh->size);
   13798:	4614      	mov	r4, r2
   1379a:	7891      	ldrb	r1, [r2, #2]
   1379c:	f7ff fe01 	bl	133a2 <ring_buf_prev>
   137a0:	70e0      	strb	r0, [r4, #3]
   137a2:	e7ee      	b.n	13782 <console_hist_move+0x22>
        insert_char(&line[cur], *str, end);
   137a4:	4b07      	ldr	r3, [pc, #28]	; (137c4 <console_hist_move+0x64>)
   137a6:	8818      	ldrh	r0, [r3, #0]
   137a8:	4b07      	ldr	r3, [pc, #28]	; (137c8 <console_hist_move+0x68>)
   137aa:	881a      	ldrh	r2, [r3, #0]
   137ac:	4428      	add	r0, r5
   137ae:	f7ff ff97 	bl	136e0 <insert_char>
        ++str;
   137b2:	3401      	adds	r4, #1
    while (str && *str != '\0') {
   137b4:	b114      	cbz	r4, 137bc <console_hist_move+0x5c>
   137b6:	7821      	ldrb	r1, [r4, #0]
   137b8:	2900      	cmp	r1, #0
   137ba:	d1f3      	bne.n	137a4 <console_hist_move+0x44>
}
   137bc:	bd38      	pop	{r3, r4, r5, pc}
   137be:	bf00      	nop
   137c0:	20003dc0 	.word	0x20003dc0
   137c4:	200045f8 	.word	0x200045f8
   137c8:	200045fa 	.word	0x200045fa

000137cc <del_char>:
{
   137cc:	b570      	push	{r4, r5, r6, lr}
   137ce:	4606      	mov	r6, r0
   137d0:	460d      	mov	r5, r1
    console_out('\b');
   137d2:	2008      	movs	r0, #8
   137d4:	f7ff ff34 	bl	13640 <console_out>
    if (end == 0) {
   137d8:	b14d      	cbz	r5, 137ee <del_char+0x22>
    console_out(ESC);
   137da:	201b      	movs	r0, #27
   137dc:	f7ff ff30 	bl	13640 <console_out>
    console_out('[');
   137e0:	205b      	movs	r0, #91	; 0x5b
   137e2:	f7ff ff2d 	bl	13640 <console_out>
    console_out('s');
   137e6:	2073      	movs	r0, #115	; 0x73
   137e8:	f7ff ff2a 	bl	13640 <console_out>
}
   137ec:	e00c      	b.n	13808 <del_char+0x3c>
        console_out(' ');
   137ee:	2020      	movs	r0, #32
   137f0:	f7ff ff26 	bl	13640 <console_out>
        console_out('\b');
   137f4:	2008      	movs	r0, #8
   137f6:	f7ff ff23 	bl	13640 <console_out>
        return;
   137fa:	e015      	b.n	13828 <del_char+0x5c>
        *pos = *(pos + 1);
   137fc:	7870      	ldrb	r0, [r6, #1]
   137fe:	f806 0b01 	strb.w	r0, [r6], #1
        console_out(*(pos++));
   13802:	f7ff ff1d 	bl	13640 <console_out>
    while (end-- > 0) {
   13806:	4625      	mov	r5, r4
   13808:	1e6b      	subs	r3, r5, #1
   1380a:	b29c      	uxth	r4, r3
   1380c:	2d00      	cmp	r5, #0
   1380e:	d1f5      	bne.n	137fc <del_char+0x30>
    console_out(' ');
   13810:	2020      	movs	r0, #32
   13812:	f7ff ff15 	bl	13640 <console_out>
    console_out(ESC);
   13816:	201b      	movs	r0, #27
   13818:	f7ff ff12 	bl	13640 <console_out>
    console_out('[');
   1381c:	205b      	movs	r0, #91	; 0x5b
   1381e:	f7ff ff0f 	bl	13640 <console_out>
    console_out('u');
   13822:	2075      	movs	r0, #117	; 0x75
   13824:	f7ff ff0c 	bl	13640 <console_out>
}
   13828:	bd70      	pop	{r4, r5, r6, pc}
	...

0001382c <handle_ansi>:
{
   1382c:	b510      	push	{r4, lr}
   1382e:	460c      	mov	r4, r1
    if (esc_state & ESC_ANSI_FIRST) {
   13830:	4b5d      	ldr	r3, [pc, #372]	; (139a8 <handle_ansi+0x17c>)
   13832:	681b      	ldr	r3, [r3, #0]
   13834:	f013 0f04 	tst.w	r3, #4
   13838:	d023      	beq.n	13882 <handle_ansi+0x56>
        esc_state &= ~ESC_ANSI_FIRST;
   1383a:	f023 0304 	bic.w	r3, r3, #4
   1383e:	4a5a      	ldr	r2, [pc, #360]	; (139a8 <handle_ansi+0x17c>)
   13840:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
   13842:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   13846:	2a09      	cmp	r2, #9
   13848:	d910      	bls.n	1386c <handle_ansi+0x40>
            ansi_val = 1;
   1384a:	4b58      	ldr	r3, [pc, #352]	; (139ac <handle_ansi+0x180>)
   1384c:	2201      	movs	r2, #1
   1384e:	601a      	str	r2, [r3, #0]
    switch (byte) {
   13850:	2848      	cmp	r0, #72	; 0x48
   13852:	d846      	bhi.n	138e2 <handle_ansi+0xb6>
   13854:	2841      	cmp	r0, #65	; 0x41
   13856:	d35c      	bcc.n	13912 <handle_ansi+0xe6>
   13858:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1385c:	2b07      	cmp	r3, #7
   1385e:	d858      	bhi.n	13912 <handle_ansi+0xe6>
   13860:	e8df f003 	tbb	[pc, r3]
   13864:	5d6f5353 	.word	0x5d6f5353
   13868:	81579157 	.word	0x81579157
        esc_state |= ESC_ANSI_VAL;
   1386c:	f043 0308 	orr.w	r3, r3, #8
   13870:	4a4d      	ldr	r2, [pc, #308]	; (139a8 <handle_ansi+0x17c>)
   13872:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
   13874:	3830      	subs	r0, #48	; 0x30
   13876:	4b4d      	ldr	r3, [pc, #308]	; (139ac <handle_ansi+0x180>)
   13878:	6018      	str	r0, [r3, #0]
        ansi_val_2 = 0;
   1387a:	4b4d      	ldr	r3, [pc, #308]	; (139b0 <handle_ansi+0x184>)
   1387c:	2200      	movs	r2, #0
   1387e:	601a      	str	r2, [r3, #0]
        return;
   13880:	e04c      	b.n	1391c <handle_ansi+0xf0>
    if (esc_state & ESC_ANSI_VAL) {
   13882:	f013 0f08 	tst.w	r3, #8
   13886:	d0e3      	beq.n	13850 <handle_ansi+0x24>
        if (isdigit(byte)) {
   13888:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   1388c:	2a09      	cmp	r2, #9
   1388e:	d909      	bls.n	138a4 <handle_ansi+0x78>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   13890:	283b      	cmp	r0, #59	; 0x3b
   13892:	d01e      	beq.n	138d2 <handle_ansi+0xa6>
        esc_state &= ~ESC_ANSI_VAL;
   13894:	f023 0108 	bic.w	r1, r3, #8
   13898:	4a43      	ldr	r2, [pc, #268]	; (139a8 <handle_ansi+0x17c>)
   1389a:	6011      	str	r1, [r2, #0]
        esc_state &= ~ESC_ANSI_VAL_2;
   1389c:	f023 0318 	bic.w	r3, r3, #24
   138a0:	6013      	str	r3, [r2, #0]
   138a2:	e7d5      	b.n	13850 <handle_ansi+0x24>
            if (esc_state & ESC_ANSI_VAL_2) {
   138a4:	f013 0f10 	tst.w	r3, #16
   138a8:	d009      	beq.n	138be <handle_ansi+0x92>
                ansi_val_2 *= 10;
   138aa:	4a41      	ldr	r2, [pc, #260]	; (139b0 <handle_ansi+0x184>)
   138ac:	6813      	ldr	r3, [r2, #0]
   138ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   138b2:	005b      	lsls	r3, r3, #1
   138b4:	6013      	str	r3, [r2, #0]
                ansi_val_2 += byte - '0';
   138b6:	4403      	add	r3, r0
   138b8:	3b30      	subs	r3, #48	; 0x30
   138ba:	6013      	str	r3, [r2, #0]
   138bc:	e02e      	b.n	1391c <handle_ansi+0xf0>
                ansi_val *= 10;
   138be:	4a3b      	ldr	r2, [pc, #236]	; (139ac <handle_ansi+0x180>)
   138c0:	6813      	ldr	r3, [r2, #0]
   138c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   138c6:	005b      	lsls	r3, r3, #1
   138c8:	6013      	str	r3, [r2, #0]
                ansi_val += byte - '0';
   138ca:	4403      	add	r3, r0
   138cc:	3b30      	subs	r3, #48	; 0x30
   138ce:	6013      	str	r3, [r2, #0]
            return;
   138d0:	e024      	b.n	1391c <handle_ansi+0xf0>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   138d2:	f013 0f10 	tst.w	r3, #16
   138d6:	d1dd      	bne.n	13894 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   138d8:	f043 0310 	orr.w	r3, r3, #16
   138dc:	4a32      	ldr	r2, [pc, #200]	; (139a8 <handle_ansi+0x17c>)
   138de:	6013      	str	r3, [r2, #0]
            return;
   138e0:	e01c      	b.n	1391c <handle_ansi+0xf0>
    switch (byte) {
   138e2:	287e      	cmp	r0, #126	; 0x7e
   138e4:	d115      	bne.n	13912 <handle_ansi+0xe6>
        if (!end) {
   138e6:	4b33      	ldr	r3, [pc, #204]	; (139b4 <handle_ansi+0x188>)
   138e8:	881b      	ldrh	r3, [r3, #0]
   138ea:	b193      	cbz	r3, 13912 <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
   138ec:	2101      	movs	r1, #1
   138ee:	4832      	ldr	r0, [pc, #200]	; (139b8 <handle_ansi+0x18c>)
   138f0:	f000 fa90 	bl	13e14 <console_printf>
        del_char(&line[cur], --end);
   138f4:	4b31      	ldr	r3, [pc, #196]	; (139bc <handle_ansi+0x190>)
   138f6:	8818      	ldrh	r0, [r3, #0]
   138f8:	4b2e      	ldr	r3, [pc, #184]	; (139b4 <handle_ansi+0x188>)
   138fa:	8819      	ldrh	r1, [r3, #0]
   138fc:	3901      	subs	r1, #1
   138fe:	b289      	uxth	r1, r1
   13900:	8019      	strh	r1, [r3, #0]
   13902:	4420      	add	r0, r4
   13904:	f7ff ff62 	bl	137cc <del_char>
        break;
   13908:	e003      	b.n	13912 <handle_ansi+0xe6>
        console_hist_move(line, byte);
   1390a:	4601      	mov	r1, r0
   1390c:	4620      	mov	r0, r4
   1390e:	f7ff ff27 	bl	13760 <console_hist_move>
    esc_state &= ~ESC_ANSI;
   13912:	4a25      	ldr	r2, [pc, #148]	; (139a8 <handle_ansi+0x17c>)
   13914:	6813      	ldr	r3, [r2, #0]
   13916:	f023 0302 	bic.w	r3, r3, #2
   1391a:	6013      	str	r3, [r2, #0]
}
   1391c:	bd10      	pop	{r4, pc}
        if (ansi_val > cur) {
   1391e:	4b27      	ldr	r3, [pc, #156]	; (139bc <handle_ansi+0x190>)
   13920:	881b      	ldrh	r3, [r3, #0]
   13922:	4a22      	ldr	r2, [pc, #136]	; (139ac <handle_ansi+0x180>)
   13924:	6811      	ldr	r1, [r2, #0]
   13926:	428b      	cmp	r3, r1
   13928:	d3f3      	bcc.n	13912 <handle_ansi+0xe6>
        end += ansi_val;
   1392a:	b288      	uxth	r0, r1
   1392c:	4c21      	ldr	r4, [pc, #132]	; (139b4 <handle_ansi+0x188>)
   1392e:	8822      	ldrh	r2, [r4, #0]
   13930:	4402      	add	r2, r0
   13932:	8022      	strh	r2, [r4, #0]
        cur -= ansi_val;
   13934:	1a1b      	subs	r3, r3, r0
   13936:	4a21      	ldr	r2, [pc, #132]	; (139bc <handle_ansi+0x190>)
   13938:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uD", count);
   1393a:	4821      	ldr	r0, [pc, #132]	; (139c0 <handle_ansi+0x194>)
   1393c:	f000 fa6a 	bl	13e14 <console_printf>
}
   13940:	e7e7      	b.n	13912 <handle_ansi+0xe6>
        if (ansi_val > end) {
   13942:	4b1c      	ldr	r3, [pc, #112]	; (139b4 <handle_ansi+0x188>)
   13944:	881b      	ldrh	r3, [r3, #0]
   13946:	4a19      	ldr	r2, [pc, #100]	; (139ac <handle_ansi+0x180>)
   13948:	6811      	ldr	r1, [r2, #0]
   1394a:	428b      	cmp	r3, r1
   1394c:	d3e1      	bcc.n	13912 <handle_ansi+0xe6>
        end -= ansi_val;
   1394e:	b28a      	uxth	r2, r1
   13950:	1a9b      	subs	r3, r3, r2
   13952:	4818      	ldr	r0, [pc, #96]	; (139b4 <handle_ansi+0x188>)
   13954:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   13956:	4b19      	ldr	r3, [pc, #100]	; (139bc <handle_ansi+0x190>)
   13958:	8818      	ldrh	r0, [r3, #0]
   1395a:	4402      	add	r2, r0
   1395c:	801a      	strh	r2, [r3, #0]
    console_printf("\x1b[%uC", count);
   1395e:	4816      	ldr	r0, [pc, #88]	; (139b8 <handle_ansi+0x18c>)
   13960:	f000 fa58 	bl	13e14 <console_printf>
}
   13964:	e7d5      	b.n	13912 <handle_ansi+0xe6>
        if (!cur) {
   13966:	4b15      	ldr	r3, [pc, #84]	; (139bc <handle_ansi+0x190>)
   13968:	8819      	ldrh	r1, [r3, #0]
   1396a:	2900      	cmp	r1, #0
   1396c:	d0d1      	beq.n	13912 <handle_ansi+0xe6>
    console_printf("\x1b[%uD", count);
   1396e:	4814      	ldr	r0, [pc, #80]	; (139c0 <handle_ansi+0x194>)
   13970:	f000 fa50 	bl	13e14 <console_printf>
        end += cur;
   13974:	490f      	ldr	r1, [pc, #60]	; (139b4 <handle_ansi+0x188>)
   13976:	4a11      	ldr	r2, [pc, #68]	; (139bc <handle_ansi+0x190>)
   13978:	880b      	ldrh	r3, [r1, #0]
   1397a:	8810      	ldrh	r0, [r2, #0]
   1397c:	4403      	add	r3, r0
   1397e:	800b      	strh	r3, [r1, #0]
        cur = 0;
   13980:	2300      	movs	r3, #0
   13982:	8013      	strh	r3, [r2, #0]
        break;
   13984:	e7c5      	b.n	13912 <handle_ansi+0xe6>
        if (!end) {
   13986:	4b0b      	ldr	r3, [pc, #44]	; (139b4 <handle_ansi+0x188>)
   13988:	8819      	ldrh	r1, [r3, #0]
   1398a:	2900      	cmp	r1, #0
   1398c:	d0c1      	beq.n	13912 <handle_ansi+0xe6>
    console_printf("\x1b[%uC", count);
   1398e:	480a      	ldr	r0, [pc, #40]	; (139b8 <handle_ansi+0x18c>)
   13990:	f000 fa40 	bl	13e14 <console_printf>
        cur += end;
   13994:	4909      	ldr	r1, [pc, #36]	; (139bc <handle_ansi+0x190>)
   13996:	4a07      	ldr	r2, [pc, #28]	; (139b4 <handle_ansi+0x188>)
   13998:	880b      	ldrh	r3, [r1, #0]
   1399a:	8810      	ldrh	r0, [r2, #0]
   1399c:	4403      	add	r3, r0
   1399e:	800b      	strh	r3, [r1, #0]
        end = 0;
   139a0:	2300      	movs	r3, #0
   139a2:	8013      	strh	r3, [r2, #0]
        break;
   139a4:	e7b5      	b.n	13912 <handle_ansi+0xe6>
   139a6:	bf00      	nop
   139a8:	200045fc 	.word	0x200045fc
   139ac:	20003da0 	.word	0x20003da0
   139b0:	20003da4 	.word	0x20003da4
   139b4:	200045fa 	.word	0x200045fa
   139b8:	000260ec 	.word	0x000260ec
   139bc:	200045f8 	.word	0x200045f8
   139c0:	000260e4 	.word	0x000260e4

000139c4 <console_write>:
{
   139c4:	b570      	push	{r4, r5, r6, lr}
   139c6:	4606      	mov	r6, r0
   139c8:	460d      	mov	r5, r1
    if (console_lock(timeout) != OS_OK) {
   139ca:	2080      	movs	r0, #128	; 0x80
   139cc:	f7ff fe04 	bl	135d8 <console_lock>
   139d0:	bb88      	cbnz	r0, 13a36 <console_write+0x72>
   139d2:	4604      	mov	r4, r0
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   139d4:	2d01      	cmp	r5, #1
   139d6:	dd02      	ble.n	139de <console_write+0x1a>
   139d8:	7833      	ldrb	r3, [r6, #0]
   139da:	2b04      	cmp	r3, #4
   139dc:	d014      	beq.n	13a08 <console_write+0x44>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   139de:	2d02      	cmp	r5, #2
   139e0:	dd02      	ble.n	139e8 <console_write+0x24>
   139e2:	7873      	ldrb	r3, [r6, #1]
   139e4:	2b06      	cmp	r3, #6
   139e6:	d016      	beq.n	13a16 <console_write+0x52>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   139e8:	4b15      	ldr	r3, [pc, #84]	; (13a40 <console_write+0x7c>)
   139ea:	781b      	ldrb	r3, [r3, #0]
   139ec:	b913      	cbnz	r3, 139f4 <console_write+0x30>
   139ee:	4b15      	ldr	r3, [pc, #84]	; (13a44 <console_write+0x80>)
   139f0:	781b      	ldrb	r3, [r3, #0]
   139f2:	b9bb      	cbnz	r3, 13a24 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
   139f4:	42ac      	cmp	r4, r5
   139f6:	da15      	bge.n	13a24 <console_write+0x60>
        if (console_out_nolock((int)str[i]) == EOF) {
   139f8:	5d30      	ldrb	r0, [r6, r4]
   139fa:	f000 fa85 	bl	13f08 <console_out_nolock>
   139fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   13a02:	d00f      	beq.n	13a24 <console_write+0x60>
    for (i = 0; i < cnt; i++) {
   13a04:	3401      	adds	r4, #1
   13a06:	e7f5      	b.n	139f4 <console_write+0x30>
        str[1] == CONSOLE_NLIP_DATA_START2) {
   13a08:	7873      	ldrb	r3, [r6, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   13a0a:	2b14      	cmp	r3, #20
   13a0c:	d1e7      	bne.n	139de <console_write+0x1a>
        g_is_output_nlip = 1;
   13a0e:	4b0c      	ldr	r3, [pc, #48]	; (13a40 <console_write+0x7c>)
   13a10:	2201      	movs	r2, #1
   13a12:	701a      	strb	r2, [r3, #0]
   13a14:	e7e3      	b.n	139de <console_write+0x1a>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   13a16:	78b3      	ldrb	r3, [r6, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   13a18:	2b09      	cmp	r3, #9
   13a1a:	d1e5      	bne.n	139e8 <console_write+0x24>
        g_is_output_nlip = 1;
   13a1c:	4b08      	ldr	r3, [pc, #32]	; (13a40 <console_write+0x7c>)
   13a1e:	2201      	movs	r2, #1
   13a20:	701a      	strb	r2, [r3, #0]
   13a22:	e7e1      	b.n	139e8 <console_write+0x24>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   13a24:	2d00      	cmp	r5, #0
   13a26:	dd04      	ble.n	13a32 <console_write+0x6e>
   13a28:	4435      	add	r5, r6
   13a2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13a2e:	2b0a      	cmp	r3, #10
   13a30:	d002      	beq.n	13a38 <console_write+0x74>
    (void)console_unlock();
   13a32:	f7ff fdeb 	bl	1360c <console_unlock>
}
   13a36:	bd70      	pop	{r4, r5, r6, pc}
        g_is_output_nlip = 0;
   13a38:	4b01      	ldr	r3, [pc, #4]	; (13a40 <console_write+0x7c>)
   13a3a:	2200      	movs	r2, #0
   13a3c:	701a      	strb	r2, [r3, #0]
   13a3e:	e7f8      	b.n	13a32 <console_write+0x6e>
   13a40:	20004607 	.word	0x20004607
   13a44:	20004606 	.word	0x20004606

00013a48 <console_blocking_mode>:
}
   13a48:	4770      	bx	lr
	...

00013a4c <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
   13a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   13a50:	4b8a      	ldr	r3, [pc, #552]	; (13c7c <console_handle_char+0x230>)
   13a52:	681b      	ldr	r3, [r3, #0]
   13a54:	2b00      	cmp	r3, #0
   13a56:	f000 8161 	beq.w	13d1c <console_handle_char+0x2d0>
   13a5a:	4604      	mov	r4, r0
        return 0;
    }

    if (!ev) {
   13a5c:	4b88      	ldr	r3, [pc, #544]	; (13c80 <console_handle_char+0x234>)
   13a5e:	681b      	ldr	r3, [r3, #0]
   13a60:	b1cb      	cbz	r3, 13a96 <console_handle_char+0x4a>
            return -1;
        }
        input = ev->ev_arg;
    }

    if (handle_nlip(byte))  {
   13a62:	4620      	mov	r0, r4
   13a64:	f7ff fcb2 	bl	133cc <handle_nlip>
   13a68:	4605      	mov	r5, r0
   13a6a:	2800      	cmp	r0, #0
   13a6c:	d064      	beq.n	13b38 <console_handle_char+0xec>
        if (byte == '\n') {
   13a6e:	2c0a      	cmp	r4, #10
   13a70:	d021      	beq.n	13ab6 <console_handle_char+0x6a>
            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
        /* Ignore characters if there's no more buffer space */
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
   13a72:	2c09      	cmp	r4, #9
   13a74:	d044      	beq.n	13b00 <console_handle_char+0xb4>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
   13a76:	2c14      	cmp	r4, #20
   13a78:	d050      	beq.n	13b1c <console_handle_char+0xd0>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
        }

        insert_char(&input->line[cur], byte, end);
   13a7a:	4b82      	ldr	r3, [pc, #520]	; (13c84 <console_handle_char+0x238>)
   13a7c:	6818      	ldr	r0, [r3, #0]
   13a7e:	4b82      	ldr	r3, [pc, #520]	; (13c88 <console_handle_char+0x23c>)
   13a80:	881b      	ldrh	r3, [r3, #0]
   13a82:	4a82      	ldr	r2, [pc, #520]	; (13c8c <console_handle_char+0x240>)
   13a84:	8812      	ldrh	r2, [r2, #0]
   13a86:	4621      	mov	r1, r4
   13a88:	4418      	add	r0, r3
   13a8a:	f7ff fe29 	bl	136e0 <insert_char>

        return 0;
   13a8e:	2500      	movs	r5, #0

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
   13a90:	4628      	mov	r0, r5
   13a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ev = os_eventq_get_no_wait(&avail_queue);
   13a96:	487e      	ldr	r0, [pc, #504]	; (13c90 <console_handle_char+0x244>)
   13a98:	f7f5 ff0a 	bl	98b0 <os_eventq_get_no_wait>
   13a9c:	4b78      	ldr	r3, [pc, #480]	; (13c80 <console_handle_char+0x234>)
   13a9e:	6018      	str	r0, [r3, #0]
        if (!ev) {
   13aa0:	b118      	cbz	r0, 13aaa <console_handle_char+0x5e>
        input = ev->ev_arg;
   13aa2:	6882      	ldr	r2, [r0, #8]
   13aa4:	4b77      	ldr	r3, [pc, #476]	; (13c84 <console_handle_char+0x238>)
   13aa6:	601a      	str	r2, [r3, #0]
   13aa8:	e7db      	b.n	13a62 <console_handle_char+0x16>
            rx_stalled = true;
   13aaa:	4b7a      	ldr	r3, [pc, #488]	; (13c94 <console_handle_char+0x248>)
   13aac:	2201      	movs	r2, #1
   13aae:	701a      	strb	r2, [r3, #0]
            return -1;
   13ab0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13ab4:	e7ec      	b.n	13a90 <console_handle_char+0x44>
            insert_char(&input->line[cur], byte, end);
   13ab6:	4f73      	ldr	r7, [pc, #460]	; (13c84 <console_handle_char+0x238>)
   13ab8:	6838      	ldr	r0, [r7, #0]
   13aba:	4d73      	ldr	r5, [pc, #460]	; (13c88 <console_handle_char+0x23c>)
   13abc:	882b      	ldrh	r3, [r5, #0]
   13abe:	4e73      	ldr	r6, [pc, #460]	; (13c8c <console_handle_char+0x240>)
   13ac0:	8832      	ldrh	r2, [r6, #0]
   13ac2:	4621      	mov	r1, r4
   13ac4:	4418      	add	r0, r3
   13ac6:	f7ff fe0b 	bl	136e0 <insert_char>
            input->line[cur] = '\0';
   13aca:	683a      	ldr	r2, [r7, #0]
   13acc:	882b      	ldrh	r3, [r5, #0]
   13ace:	2400      	movs	r4, #0
   13ad0:	54d4      	strb	r4, [r2, r3]
            cur = 0;
   13ad2:	802c      	strh	r4, [r5, #0]
            end = 0;
   13ad4:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
   13ad6:	4b6a      	ldr	r3, [pc, #424]	; (13c80 <console_handle_char+0x234>)
   13ad8:	6819      	ldr	r1, [r3, #0]
   13ada:	4b68      	ldr	r3, [pc, #416]	; (13c7c <console_handle_char+0x230>)
   13adc:	6818      	ldr	r0, [r3, #0]
   13ade:	f7f5 feb3 	bl	9848 <os_eventq_put>
            nlip_state = 0;
   13ae2:	4b6d      	ldr	r3, [pc, #436]	; (13c98 <console_handle_char+0x24c>)
   13ae4:	601c      	str	r4, [r3, #0]
            if (console_compat_rx_cb) {
   13ae6:	4b6d      	ldr	r3, [pc, #436]	; (13c9c <console_handle_char+0x250>)
   13ae8:	681b      	ldr	r3, [r3, #0]
   13aea:	b103      	cbz	r3, 13aee <console_handle_char+0xa2>
                console_compat_rx_cb();
   13aec:	4798      	blx	r3
            input = NULL;
   13aee:	2500      	movs	r5, #0
   13af0:	4b64      	ldr	r3, [pc, #400]	; (13c84 <console_handle_char+0x238>)
   13af2:	601d      	str	r5, [r3, #0]
            ev = NULL;
   13af4:	4b62      	ldr	r3, [pc, #392]	; (13c80 <console_handle_char+0x234>)
   13af6:	601d      	str	r5, [r3, #0]
            console_echo(1);
   13af8:	2001      	movs	r0, #1
   13afa:	f7ff fd67 	bl	135cc <console_echo>
            return 0;
   13afe:	e7c7      	b.n	13a90 <console_handle_char+0x44>
            console_echo(0);
   13b00:	2000      	movs	r0, #0
   13b02:	f7ff fd63 	bl	135cc <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
   13b06:	4b5f      	ldr	r3, [pc, #380]	; (13c84 <console_handle_char+0x238>)
   13b08:	6818      	ldr	r0, [r3, #0]
   13b0a:	4b5f      	ldr	r3, [pc, #380]	; (13c88 <console_handle_char+0x23c>)
   13b0c:	881b      	ldrh	r3, [r3, #0]
   13b0e:	4a5f      	ldr	r2, [pc, #380]	; (13c8c <console_handle_char+0x240>)
   13b10:	8812      	ldrh	r2, [r2, #0]
   13b12:	2106      	movs	r1, #6
   13b14:	4418      	add	r0, r3
   13b16:	f7ff fde3 	bl	136e0 <insert_char>
   13b1a:	e7ae      	b.n	13a7a <console_handle_char+0x2e>
            console_echo(0);
   13b1c:	2000      	movs	r0, #0
   13b1e:	f7ff fd55 	bl	135cc <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   13b22:	4b58      	ldr	r3, [pc, #352]	; (13c84 <console_handle_char+0x238>)
   13b24:	6818      	ldr	r0, [r3, #0]
   13b26:	4b58      	ldr	r3, [pc, #352]	; (13c88 <console_handle_char+0x23c>)
   13b28:	881b      	ldrh	r3, [r3, #0]
   13b2a:	4a58      	ldr	r2, [pc, #352]	; (13c8c <console_handle_char+0x240>)
   13b2c:	8812      	ldrh	r2, [r2, #0]
   13b2e:	2104      	movs	r1, #4
   13b30:	4418      	add	r0, r3
   13b32:	f7ff fdd5 	bl	136e0 <insert_char>
   13b36:	e7a0      	b.n	13a7a <console_handle_char+0x2e>
    if (esc_state & ESC_ANSI) {
   13b38:	4b59      	ldr	r3, [pc, #356]	; (13ca0 <console_handle_char+0x254>)
   13b3a:	681b      	ldr	r3, [r3, #0]
   13b3c:	f013 0602 	ands.w	r6, r3, #2
   13b40:	d009      	beq.n	13b56 <console_handle_char+0x10a>
        if (g_console_ignore_non_nlip) {
   13b42:	4b58      	ldr	r3, [pc, #352]	; (13ca4 <console_handle_char+0x258>)
   13b44:	781b      	ldrb	r3, [r3, #0]
   13b46:	2b00      	cmp	r3, #0
   13b48:	d1a2      	bne.n	13a90 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
   13b4a:	4b4e      	ldr	r3, [pc, #312]	; (13c84 <console_handle_char+0x238>)
   13b4c:	6819      	ldr	r1, [r3, #0]
   13b4e:	4620      	mov	r0, r4
   13b50:	f7ff fe6c 	bl	1382c <handle_ansi>
        return 0;
   13b54:	e79c      	b.n	13a90 <console_handle_char+0x44>
    if (esc_state & ESC_ESC) {
   13b56:	f013 0501 	ands.w	r5, r3, #1
   13b5a:	d01a      	beq.n	13b92 <console_handle_char+0x146>
        if (g_console_ignore_non_nlip) {
   13b5c:	4a51      	ldr	r2, [pc, #324]	; (13ca4 <console_handle_char+0x258>)
   13b5e:	7812      	ldrb	r2, [r2, #0]
   13b60:	b10a      	cbz	r2, 13b66 <console_handle_char+0x11a>
            return 0;
   13b62:	4635      	mov	r5, r6
   13b64:	e794      	b.n	13a90 <console_handle_char+0x44>
        esc_state &= ~ESC_ESC;
   13b66:	f023 0301 	bic.w	r3, r3, #1
   13b6a:	4a4d      	ldr	r2, [pc, #308]	; (13ca0 <console_handle_char+0x254>)
   13b6c:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   13b6e:	4b45      	ldr	r3, [pc, #276]	; (13c84 <console_handle_char+0x238>)
   13b70:	6819      	ldr	r1, [r3, #0]
   13b72:	4620      	mov	r0, r4
   13b74:	f7ff fe5a 	bl	1382c <handle_ansi>
        switch (byte) {
   13b78:	2c5b      	cmp	r4, #91	; 0x5b
   13b7a:	d001      	beq.n	13b80 <console_handle_char+0x134>
        return 0;
   13b7c:	4635      	mov	r5, r6
   13b7e:	e787      	b.n	13a90 <console_handle_char+0x44>
            esc_state |= ESC_ANSI;
   13b80:	4a47      	ldr	r2, [pc, #284]	; (13ca0 <console_handle_char+0x254>)
   13b82:	6813      	ldr	r3, [r2, #0]
   13b84:	f043 0102 	orr.w	r1, r3, #2
   13b88:	6011      	str	r1, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   13b8a:	f043 0306 	orr.w	r3, r3, #6
   13b8e:	6013      	str	r3, [r2, #0]
            break;
   13b90:	e7f4      	b.n	13b7c <console_handle_char+0x130>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   13b92:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   13b96:	2b5e      	cmp	r3, #94	; 0x5e
   13b98:	d80f      	bhi.n	13bba <console_handle_char+0x16e>
    if (!g_console_ignore_non_nlip) {
   13b9a:	4b42      	ldr	r3, [pc, #264]	; (13ca4 <console_handle_char+0x258>)
   13b9c:	781b      	ldrb	r3, [r3, #0]
   13b9e:	2b00      	cmp	r3, #0
   13ba0:	f47f af76 	bne.w	13a90 <console_handle_char+0x44>
        insert_char(&input->line[cur], byte, end);
   13ba4:	4b37      	ldr	r3, [pc, #220]	; (13c84 <console_handle_char+0x238>)
   13ba6:	6818      	ldr	r0, [r3, #0]
   13ba8:	4b37      	ldr	r3, [pc, #220]	; (13c88 <console_handle_char+0x23c>)
   13baa:	881b      	ldrh	r3, [r3, #0]
   13bac:	4a37      	ldr	r2, [pc, #220]	; (13c8c <console_handle_char+0x240>)
   13bae:	8812      	ldrh	r2, [r2, #0]
   13bb0:	4621      	mov	r1, r4
   13bb2:	4418      	add	r0, r3
   13bb4:	f7ff fd94 	bl	136e0 <insert_char>
   13bb8:	e76a      	b.n	13a90 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
   13bba:	4b32      	ldr	r3, [pc, #200]	; (13c84 <console_handle_char+0x238>)
   13bbc:	6819      	ldr	r1, [r3, #0]
   13bbe:	4620      	mov	r0, r4
   13bc0:	f7ff fe34 	bl	1382c <handle_ansi>
        switch (byte) {
   13bc4:	2c1b      	cmp	r4, #27
   13bc6:	d812      	bhi.n	13bee <console_handle_char+0x1a2>
   13bc8:	2c04      	cmp	r4, #4
   13bca:	d312      	bcc.n	13bf2 <console_handle_char+0x1a6>
   13bcc:	1f23      	subs	r3, r4, #4
   13bce:	2b17      	cmp	r3, #23
   13bd0:	d80f      	bhi.n	13bf2 <console_handle_char+0x1a6>
   13bd2:	e8df f003 	tbb	[pc, r3]
   13bd6:	0e4d      	.short	0x0e4d
   13bd8:	8f6b0e47 	.word	0x8f6b0e47
   13bdc:	180e0e18 	.word	0x180e0e18
   13be0:	0e0e0e0e 	.word	0x0e0e0e0e
   13be4:	0e0e0e0e 	.word	0x0e0e0e0e
   13be8:	0e0e0e0e 	.word	0x0e0e0e0e
   13bec:	810e      	.short	0x810e
   13bee:	2c7f      	cmp	r4, #127	; 0x7f
   13bf0:	d05c      	beq.n	13cac <console_handle_char+0x260>
            insert_char(&input->line[cur], byte, end);
   13bf2:	4b24      	ldr	r3, [pc, #144]	; (13c84 <console_handle_char+0x238>)
   13bf4:	6818      	ldr	r0, [r3, #0]
   13bf6:	4b24      	ldr	r3, [pc, #144]	; (13c88 <console_handle_char+0x23c>)
   13bf8:	881b      	ldrh	r3, [r3, #0]
   13bfa:	4a24      	ldr	r2, [pc, #144]	; (13c8c <console_handle_char+0x240>)
   13bfc:	8812      	ldrh	r2, [r2, #0]
   13bfe:	4621      	mov	r1, r4
   13c00:	4418      	add	r0, r3
   13c02:	f7ff fd6d 	bl	136e0 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   13c06:	2c0a      	cmp	r4, #10
   13c08:	d103      	bne.n	13c12 <console_handle_char+0x1c6>
   13c0a:	4b27      	ldr	r3, [pc, #156]	; (13ca8 <console_handle_char+0x25c>)
   13c0c:	781b      	ldrb	r3, [r3, #0]
   13c0e:	2b0d      	cmp	r3, #13
   13c10:	d06d      	beq.n	13cee <console_handle_char+0x2a2>
            prev_endl = byte;
   13c12:	4b25      	ldr	r3, [pc, #148]	; (13ca8 <console_handle_char+0x25c>)
   13c14:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
   13c16:	4e1b      	ldr	r6, [pc, #108]	; (13c84 <console_handle_char+0x238>)
   13c18:	6832      	ldr	r2, [r6, #0]
   13c1a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 13c88 <console_handle_char+0x23c>
   13c1e:	f8b8 3000 	ldrh.w	r3, [r8]
   13c22:	4f1a      	ldr	r7, [pc, #104]	; (13c8c <console_handle_char+0x240>)
   13c24:	8839      	ldrh	r1, [r7, #0]
   13c26:	440b      	add	r3, r1
   13c28:	2400      	movs	r4, #0
   13c2a:	54d4      	strb	r4, [r2, r3]
            console_out('\r');
   13c2c:	200d      	movs	r0, #13
   13c2e:	f7ff fd07 	bl	13640 <console_out>
            console_out('\n');
   13c32:	200a      	movs	r0, #10
   13c34:	f7ff fd04 	bl	13640 <console_out>
            cur = 0;
   13c38:	f8a8 4000 	strh.w	r4, [r8]
            end = 0;
   13c3c:	803c      	strh	r4, [r7, #0]
            os_eventq_put(lines_queue, ev);
   13c3e:	4b10      	ldr	r3, [pc, #64]	; (13c80 <console_handle_char+0x234>)
   13c40:	6819      	ldr	r1, [r3, #0]
   13c42:	4b0e      	ldr	r3, [pc, #56]	; (13c7c <console_handle_char+0x230>)
   13c44:	6818      	ldr	r0, [r3, #0]
   13c46:	f7f5 fdff 	bl	9848 <os_eventq_put>
            console_hist_add(input->line);
   13c4a:	6830      	ldr	r0, [r6, #0]
   13c4c:	f7ff fc5e 	bl	1350c <console_hist_add>
            if (console_compat_rx_cb) {
   13c50:	4b12      	ldr	r3, [pc, #72]	; (13c9c <console_handle_char+0x250>)
   13c52:	681b      	ldr	r3, [r3, #0]
   13c54:	b103      	cbz	r3, 13c58 <console_handle_char+0x20c>
                console_compat_rx_cb();
   13c56:	4798      	blx	r3
            input = NULL;
   13c58:	2300      	movs	r3, #0
   13c5a:	4a0a      	ldr	r2, [pc, #40]	; (13c84 <console_handle_char+0x238>)
   13c5c:	6013      	str	r3, [r2, #0]
            ev = NULL;
   13c5e:	4a08      	ldr	r2, [pc, #32]	; (13c80 <console_handle_char+0x234>)
   13c60:	6013      	str	r3, [r2, #0]
            break;
   13c62:	e715      	b.n	13a90 <console_handle_char+0x44>
            nlip_state |= NLIP_PKT_START1;
   13c64:	4a0c      	ldr	r2, [pc, #48]	; (13c98 <console_handle_char+0x24c>)
   13c66:	6813      	ldr	r3, [r2, #0]
   13c68:	f043 0301 	orr.w	r3, r3, #1
   13c6c:	6013      	str	r3, [r2, #0]
            break;
   13c6e:	e70f      	b.n	13a90 <console_handle_char+0x44>
            nlip_state |= NLIP_DATA_START1;
   13c70:	4a09      	ldr	r2, [pc, #36]	; (13c98 <console_handle_char+0x24c>)
   13c72:	6813      	ldr	r3, [r2, #0]
   13c74:	f043 0304 	orr.w	r3, r3, #4
   13c78:	6013      	str	r3, [r2, #0]
            break;
   13c7a:	e709      	b.n	13a90 <console_handle_char+0x44>
   13c7c:	2000460c 	.word	0x2000460c
   13c80:	20004600 	.word	0x20004600
   13c84:	20004608 	.word	0x20004608
   13c88:	200045f8 	.word	0x200045f8
   13c8c:	200045fa 	.word	0x200045fa
   13c90:	20003da8 	.word	0x20003da8
   13c94:	20004615 	.word	0x20004615
   13c98:	20004610 	.word	0x20004610
   13c9c:	20003dbc 	.word	0x20003dbc
   13ca0:	200045fc 	.word	0x200045fc
   13ca4:	20004604 	.word	0x20004604
   13ca8:	20004614 	.word	0x20004614
            if (g_console_ignore_non_nlip) {
   13cac:	4b1c      	ldr	r3, [pc, #112]	; (13d20 <console_handle_char+0x2d4>)
   13cae:	781b      	ldrb	r3, [r3, #0]
   13cb0:	2b00      	cmp	r3, #0
   13cb2:	f47f aeed 	bne.w	13a90 <console_handle_char+0x44>
            if (cur > 0) {
   13cb6:	4b1b      	ldr	r3, [pc, #108]	; (13d24 <console_handle_char+0x2d8>)
   13cb8:	881b      	ldrh	r3, [r3, #0]
   13cba:	2b00      	cmp	r3, #0
   13cbc:	f43f aee8 	beq.w	13a90 <console_handle_char+0x44>
                del_char(&input->line[--cur], end);
   13cc0:	4a19      	ldr	r2, [pc, #100]	; (13d28 <console_handle_char+0x2dc>)
   13cc2:	6810      	ldr	r0, [r2, #0]
   13cc4:	3b01      	subs	r3, #1
   13cc6:	b29b      	uxth	r3, r3
   13cc8:	4a16      	ldr	r2, [pc, #88]	; (13d24 <console_handle_char+0x2d8>)
   13cca:	8013      	strh	r3, [r2, #0]
   13ccc:	4a17      	ldr	r2, [pc, #92]	; (13d2c <console_handle_char+0x2e0>)
   13cce:	8811      	ldrh	r1, [r2, #0]
   13cd0:	4418      	add	r0, r3
   13cd2:	f7ff fd7b 	bl	137cc <del_char>
   13cd6:	e6db      	b.n	13a90 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
   13cd8:	4b11      	ldr	r3, [pc, #68]	; (13d20 <console_handle_char+0x2d4>)
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	f47f aed7 	bne.w	13a90 <console_handle_char+0x44>
            esc_state |= ESC_ESC;
   13ce2:	4a13      	ldr	r2, [pc, #76]	; (13d30 <console_handle_char+0x2e4>)
   13ce4:	6813      	ldr	r3, [r2, #0]
   13ce6:	f043 0301 	orr.w	r3, r3, #1
   13cea:	6013      	str	r3, [r2, #0]
            break;
   13cec:	e6d0      	b.n	13a90 <console_handle_char+0x44>
                prev_endl = byte;
   13cee:	4b11      	ldr	r3, [pc, #68]	; (13d34 <console_handle_char+0x2e8>)
   13cf0:	701c      	strb	r4, [r3, #0]
                break;
   13cf2:	e6cd      	b.n	13a90 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
   13cf4:	4b0a      	ldr	r3, [pc, #40]	; (13d20 <console_handle_char+0x2d4>)
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	2b00      	cmp	r3, #0
   13cfa:	f47f aec9 	bne.w	13a90 <console_handle_char+0x44>
            if (completion && !end) {
   13cfe:	4b0e      	ldr	r3, [pc, #56]	; (13d38 <console_handle_char+0x2ec>)
   13d00:	681b      	ldr	r3, [r3, #0]
   13d02:	2b00      	cmp	r3, #0
   13d04:	f43f aec4 	beq.w	13a90 <console_handle_char+0x44>
   13d08:	4a08      	ldr	r2, [pc, #32]	; (13d2c <console_handle_char+0x2e0>)
   13d0a:	8812      	ldrh	r2, [r2, #0]
   13d0c:	2a00      	cmp	r2, #0
   13d0e:	f47f aebf 	bne.w	13a90 <console_handle_char+0x44>
                completion(input->line, console_append_char);
   13d12:	490a      	ldr	r1, [pc, #40]	; (13d3c <console_handle_char+0x2f0>)
   13d14:	4a04      	ldr	r2, [pc, #16]	; (13d28 <console_handle_char+0x2dc>)
   13d16:	6810      	ldr	r0, [r2, #0]
   13d18:	4798      	blx	r3
        return 0;
   13d1a:	e6b9      	b.n	13a90 <console_handle_char+0x44>
        return 0;
   13d1c:	2500      	movs	r5, #0
   13d1e:	e6b7      	b.n	13a90 <console_handle_char+0x44>
   13d20:	20004604 	.word	0x20004604
   13d24:	200045f8 	.word	0x200045f8
   13d28:	20004608 	.word	0x20004608
   13d2c:	200045fa 	.word	0x200045fa
   13d30:	200045fc 	.word	0x200045fc
   13d34:	20004614 	.word	0x20004614
   13d38:	20003db8 	.word	0x20003db8
   13d3c:	00013661 	.word	0x00013661

00013d40 <console_is_init>:

int
console_is_init(void)
{
   13d40:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    return rtt_console_is_init();
   13d42:	f000 f907 	bl	13f54 <rtt_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
   13d46:	bd08      	pop	{r3, pc}

00013d48 <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   13d48:	4b01      	ldr	r3, [pc, #4]	; (13d50 <console_line_queue_set+0x8>)
   13d4a:	6018      	str	r0, [r3, #0]
}
   13d4c:	4770      	bx	lr
   13d4e:	bf00      	nop
   13d50:	2000460c 	.word	0x2000460c

00013d54 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   13d54:	b508      	push	{r3, lr}
   13d56:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   13d58:	4806      	ldr	r0, [pc, #24]	; (13d74 <console_line_event_put+0x20>)
   13d5a:	f7f5 fd75 	bl	9848 <os_eventq_put>

    if (rx_stalled) {
   13d5e:	4b06      	ldr	r3, [pc, #24]	; (13d78 <console_line_event_put+0x24>)
   13d60:	781b      	ldrb	r3, [r3, #0]
   13d62:	b903      	cbnz	r3, 13d66 <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
   13d64:	bd08      	pop	{r3, pc}
        rx_stalled = false;
   13d66:	4b04      	ldr	r3, [pc, #16]	; (13d78 <console_line_event_put+0x24>)
   13d68:	2200      	movs	r2, #0
   13d6a:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
   13d6c:	f000 f8ea 	bl	13f44 <console_rx_restart>
}
   13d70:	e7f8      	b.n	13d64 <console_line_event_put+0x10>
   13d72:	bf00      	nop
   13d74:	20003da8 	.word	0x20003da8
   13d78:	20004615 	.word	0x20004615

00013d7c <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   13d7c:	4b01      	ldr	r3, [pc, #4]	; (13d84 <console_set_completion_cb+0x8>)
   13d7e:	6018      	str	r0, [r3, #0]
}
   13d80:	4770      	bx	lr
   13d82:	bf00      	nop
   13d84:	20003db8 	.word	0x20003db8

00013d88 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   13d88:	b510      	push	{r4, lr}
   13d8a:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13d8c:	4b0e      	ldr	r3, [pc, #56]	; (13dc8 <console_pkg_init+0x40>)
   13d8e:	781b      	ldrb	r3, [r3, #0]
   13d90:	b1a3      	cbz	r3, 13dbc <console_pkg_init+0x34>

    os_eventq_init(&avail_queue);
   13d92:	480e      	ldr	r0, [pc, #56]	; (13dcc <console_pkg_init+0x44>)
   13d94:	f7f5 fd4a 	bl	982c <os_eventq_init>
    os_mutex_init(&console_write_lock);
   13d98:	480d      	ldr	r0, [pc, #52]	; (13dd0 <console_pkg_init+0x48>)
   13d9a:	f7f6 ff61 	bl	ac60 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_HISTORY_SIZE) > 0
    console_hist_init();
   13d9e:	f7ff fbf5 	bl	1358c <console_hist_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
   13da2:	f000 f8d9 	bl	13f58 <rtt_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   13da6:	b138      	cbz	r0, 13db8 <console_pkg_init+0x30>
   13da8:	2000      	movs	r0, #0
   13daa:	9000      	str	r0, [sp, #0]
   13dac:	4b09      	ldr	r3, [pc, #36]	; (13dd4 <console_pkg_init+0x4c>)
   13dae:	681c      	ldr	r4, [r3, #0]
   13db0:	4603      	mov	r3, r0
   13db2:	4602      	mov	r2, r0
   13db4:	4601      	mov	r1, r0
   13db6:	47a0      	blx	r4
}
   13db8:	b002      	add	sp, #8
   13dba:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   13dbc:	461a      	mov	r2, r3
   13dbe:	4619      	mov	r1, r3
   13dc0:	4618      	mov	r0, r3
   13dc2:	f7f5 f9ff 	bl	91c4 <__assert_func>
   13dc6:	bf00      	nop
   13dc8:	20004bb0 	.word	0x20004bb0
   13dcc:	20003da8 	.word	0x20003da8
   13dd0:	200045ec 	.word	0x200045ec
   13dd4:	20000768 	.word	0x20000768

00013dd8 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   13dd8:	b570      	push	{r4, r5, r6, lr}
   13dda:	4604      	mov	r4, r0
   13ddc:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   13dde:	f000 f8db 	bl	13f98 <console_get_ticks>
   13de2:	b160      	cbz	r0, 13dfe <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   13de4:	4b09      	ldr	r3, [pc, #36]	; (13e0c <console_vprintf+0x34>)
   13de6:	681b      	ldr	r3, [r3, #0]
   13de8:	b10b      	cbz	r3, 13dee <console_vprintf+0x16>
    num_chars = 0;
   13dea:	2600      	movs	r6, #0
   13dec:	e008      	b.n	13e00 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   13dee:	f7f6 fb1d 	bl	a42c <os_time_get>
   13df2:	4601      	mov	r1, r0
   13df4:	4806      	ldr	r0, [pc, #24]	; (13e10 <console_vprintf+0x38>)
   13df6:	f7fd f869 	bl	10ecc <printf>
   13dfa:	4606      	mov	r6, r0
   13dfc:	e000      	b.n	13e00 <console_vprintf+0x28>
    num_chars = 0;
   13dfe:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   13e00:	4629      	mov	r1, r5
   13e02:	4620      	mov	r0, r4
   13e04:	f00d fba4 	bl	21550 <vprintf>

    return num_chars;
}
   13e08:	4430      	add	r0, r6
   13e0a:	bd70      	pop	{r4, r5, r6, pc}
   13e0c:	200045e8 	.word	0x200045e8
   13e10:	000260f4 	.word	0x000260f4

00013e14 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   13e14:	b40f      	push	{r0, r1, r2, r3}
   13e16:	b500      	push	{lr}
   13e18:	b083      	sub	sp, #12
   13e1a:	a904      	add	r1, sp, #16
   13e1c:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   13e20:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   13e22:	f7ff ffd9 	bl	13dd8 <console_vprintf>
    va_end(args);

    return num_chars;
}
   13e26:	b003      	add	sp, #12
   13e28:	f85d eb04 	ldr.w	lr, [sp], #4
   13e2c:	b004      	add	sp, #16
   13e2e:	4770      	bx	lr

00013e30 <rtt_console_wait_for_retry>:

#if MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT) > 0

static void
rtt_console_wait_for_retry(void)
{
   13e30:	b508      	push	{r3, lr}
   13e32:	4b05      	ldr	r3, [pc, #20]	; (13e48 <rtt_console_wait_for_retry+0x18>)
   13e34:	685b      	ldr	r3, [r3, #4]
   13e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
    uint32_t ticks;

    if (os_arch_in_isr()) {
   13e3a:	b103      	cbz	r3, 13e3e <rtt_console_wait_for_retry+0xe>
#endif
    } else {
        ticks = max(1, os_time_ms_to_ticks32(MYNEWT_VAL(CONSOLE_RTT_RETRY_DELAY_MS)));
        os_time_delay(ticks);
    }
}
   13e3c:	bd08      	pop	{r3, pc}
        os_time_delay(ticks);
   13e3e:	2001      	movs	r0, #1
   13e40:	f7f6 fb1c 	bl	a47c <os_time_delay>
}
   13e44:	e7fa      	b.n	13e3c <rtt_console_wait_for_retry+0xc>
   13e46:	bf00      	nop
   13e48:	e000ed00 	.word	0xe000ed00

00013e4c <rtt_console_write_ch>:

static void
rtt_console_write_ch(char c)
{
   13e4c:	b530      	push	{r4, r5, lr}
   13e4e:	b083      	sub	sp, #12
   13e50:	f88d 0007 	strb.w	r0, [sp, #7]
   13e54:	e00a      	b.n	13e6c <rtt_console_write_ch+0x20>
         * read data), we stop retrying until successful write (which means that
         * host is reading data).
         */

        if (ret) {
            rtt_console_retries_left = MYNEWT_VAL(CONSOLE_RTT_RETRY_COUNT);
   13e56:	4b0f      	ldr	r3, [pc, #60]	; (13e94 <rtt_console_write_ch+0x48>)
   13e58:	2202      	movs	r2, #2
   13e5a:	601a      	str	r2, [r3, #0]
        }

        rtt_console_wait_for_retry();
        rtt_console_retries_left--;
    }
}
   13e5c:	b003      	add	sp, #12
   13e5e:	bd30      	pop	{r4, r5, pc}
        rtt_console_wait_for_retry();
   13e60:	f7ff ffe6 	bl	13e30 <rtt_console_wait_for_retry>
        rtt_console_retries_left--;
   13e64:	4a0b      	ldr	r2, [pc, #44]	; (13e94 <rtt_console_write_ch+0x48>)
   13e66:	6813      	ldr	r3, [r2, #0]
   13e68:	3b01      	subs	r3, #1
   13e6a:	6013      	str	r3, [r2, #0]
        OS_ENTER_CRITICAL(sr);
   13e6c:	f7f6 fc04 	bl	a678 <os_arch_save_sr>
   13e70:	4605      	mov	r5, r0
        ret = SEGGER_RTT_WriteNoLock(0, &c, 1);
   13e72:	2201      	movs	r2, #1
   13e74:	f10d 0107 	add.w	r1, sp, #7
   13e78:	2000      	movs	r0, #0
   13e7a:	f005 fa6d 	bl	19358 <SEGGER_RTT_WriteNoLock>
   13e7e:	4604      	mov	r4, r0
        OS_EXIT_CRITICAL(sr);
   13e80:	4628      	mov	r0, r5
   13e82:	f7f6 fbff 	bl	a684 <os_arch_restore_sr>
        if (ret) {
   13e86:	2c00      	cmp	r4, #0
   13e88:	d1e5      	bne.n	13e56 <rtt_console_write_ch+0xa>
        if (rtt_console_retries_left <= 0) {
   13e8a:	4b02      	ldr	r3, [pc, #8]	; (13e94 <rtt_console_write_ch+0x48>)
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	dce6      	bgt.n	13e60 <rtt_console_write_ch+0x14>
   13e92:	e7e3      	b.n	13e5c <rtt_console_write_ch+0x10>
   13e94:	20000724 	.word	0x20000724

00013e98 <rtt_console_poll_func>:
#define RTT_INPUT_POLL_INTERVAL_STEP    10 /* ms */
#define RTT_INPUT_POLL_INTERVAL_MAX     MYNEWT_VAL(CONSOLE_RTT_INPUT_POLL_INTERVAL_MAX)

static void
rtt_console_poll_func(void *arg)
{
   13e98:	b508      	push	{r3, lr}
    static uint32_t itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    static int key = -1;
    int ret;

    if (key < 0) {
   13e9a:	4b18      	ldr	r3, [pc, #96]	; (13efc <rtt_console_poll_func+0x64>)
   13e9c:	681b      	ldr	r3, [r3, #0]
   13e9e:	2b00      	cmp	r3, #0
   13ea0:	db11      	blt.n	13ec6 <rtt_console_poll_func+0x2e>
        key = SEGGER_RTT_GetKey();
    }

    if (key < 0) {
   13ea2:	4b16      	ldr	r3, [pc, #88]	; (13efc <rtt_console_poll_func+0x64>)
   13ea4:	681b      	ldr	r3, [r3, #0]
   13ea6:	2b00      	cmp	r3, #0
   13ea8:	db12      	blt.n	13ed0 <rtt_console_poll_func+0x38>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
    } else {
        while (key >= 0) {
   13eaa:	4b14      	ldr	r3, [pc, #80]	; (13efc <rtt_console_poll_func+0x64>)
   13eac:	6818      	ldr	r0, [r3, #0]
   13eae:	2800      	cmp	r0, #0
   13eb0:	db20      	blt.n	13ef4 <rtt_console_poll_func+0x5c>
            ret = console_handle_char((char)key);
   13eb2:	b2c0      	uxtb	r0, r0
   13eb4:	f7ff fdca 	bl	13a4c <console_handle_char>
            if (ret < 0) {
   13eb8:	2800      	cmp	r0, #0
   13eba:	db1a      	blt.n	13ef2 <rtt_console_poll_func+0x5a>
                return;
            }
            key = SEGGER_RTT_GetKey();
   13ebc:	f005 fb22 	bl	19504 <SEGGER_RTT_GetKey>
   13ec0:	4b0e      	ldr	r3, [pc, #56]	; (13efc <rtt_console_poll_func+0x64>)
   13ec2:	6018      	str	r0, [r3, #0]
   13ec4:	e7f1      	b.n	13eaa <rtt_console_poll_func+0x12>
        key = SEGGER_RTT_GetKey();
   13ec6:	f005 fb1d 	bl	19504 <SEGGER_RTT_GetKey>
   13eca:	4b0c      	ldr	r3, [pc, #48]	; (13efc <rtt_console_poll_func+0x64>)
   13ecc:	6018      	str	r0, [r3, #0]
   13ece:	e7e8      	b.n	13ea2 <rtt_console_poll_func+0xa>
        itvl_ms += RTT_INPUT_POLL_INTERVAL_STEP;
   13ed0:	4a0b      	ldr	r2, [pc, #44]	; (13f00 <rtt_console_poll_func+0x68>)
   13ed2:	6813      	ldr	r3, [r2, #0]
   13ed4:	330a      	adds	r3, #10
   13ed6:	6013      	str	r3, [r2, #0]
        itvl_ms = min(itvl_ms, RTT_INPUT_POLL_INTERVAL_MAX);
   13ed8:	2bfa      	cmp	r3, #250	; 0xfa
   13eda:	bf28      	it	cs
   13edc:	23fa      	movcs	r3, #250	; 0xfa
   13ede:	6013      	str	r3, [r2, #0]
        }
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
    }

    os_cputime_timer_relative(&rtt_timer, itvl_ms * 1000);
   13ee0:	4b07      	ldr	r3, [pc, #28]	; (13f00 <rtt_console_poll_func+0x68>)
   13ee2:	681b      	ldr	r3, [r3, #0]
   13ee4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13ee8:	fb03 f101 	mul.w	r1, r3, r1
   13eec:	4805      	ldr	r0, [pc, #20]	; (13f04 <rtt_console_poll_func+0x6c>)
   13eee:	f7f5 fbd7 	bl	96a0 <os_cputime_timer_relative>
}
   13ef2:	bd08      	pop	{r3, pc}
        itvl_ms = RTT_INPUT_POLL_INTERVAL_MIN;
   13ef4:	4b02      	ldr	r3, [pc, #8]	; (13f00 <rtt_console_poll_func+0x68>)
   13ef6:	220a      	movs	r2, #10
   13ef8:	601a      	str	r2, [r3, #0]
   13efa:	e7f1      	b.n	13ee0 <rtt_console_poll_func+0x48>
   13efc:	20000720 	.word	0x20000720
   13f00:	2000071c 	.word	0x2000071c
   13f04:	20004618 	.word	0x20004618

00013f08 <console_out_nolock>:
{
   13f08:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   13f0a:	b2c5      	uxtb	r5, r0
    if (g_console_silence) {
   13f0c:	4b0b      	ldr	r3, [pc, #44]	; (13f3c <console_out_nolock+0x34>)
   13f0e:	781b      	ldrb	r3, [r3, #0]
   13f10:	b953      	cbnz	r3, 13f28 <console_out_nolock+0x20>
   13f12:	4604      	mov	r4, r0
    if ('\n' == c) {
   13f14:	2d0a      	cmp	r5, #10
   13f16:	d009      	beq.n	13f2c <console_out_nolock+0x24>
        console_is_midline = 1;
   13f18:	4b09      	ldr	r3, [pc, #36]	; (13f40 <console_out_nolock+0x38>)
   13f1a:	2201      	movs	r2, #1
   13f1c:	601a      	str	r2, [r3, #0]
    rtt_console_write_ch(c);
   13f1e:	4628      	mov	r0, r5
   13f20:	f7ff ff94 	bl	13e4c <rtt_console_write_ch>
    return character;
   13f24:	4620      	mov	r0, r4
}
   13f26:	bd38      	pop	{r3, r4, r5, pc}
        return c;
   13f28:	4628      	mov	r0, r5
   13f2a:	e7fc      	b.n	13f26 <console_out_nolock+0x1e>
        rtt_console_write_ch('\r');
   13f2c:	200d      	movs	r0, #13
   13f2e:	f7ff ff8d 	bl	13e4c <rtt_console_write_ch>
        console_is_midline = 0;
   13f32:	4b03      	ldr	r3, [pc, #12]	; (13f40 <console_out_nolock+0x38>)
   13f34:	2200      	movs	r2, #0
   13f36:	601a      	str	r2, [r3, #0]
   13f38:	e7f1      	b.n	13f1e <console_out_nolock+0x16>
   13f3a:	bf00      	nop
   13f3c:	20004605 	.word	0x20004605
   13f40:	200045e8 	.word	0x200045e8

00013f44 <console_rx_restart>:
{
   13f44:	b508      	push	{r3, lr}
    os_cputime_timer_relative(&rtt_timer, 0);
   13f46:	2100      	movs	r1, #0
   13f48:	4801      	ldr	r0, [pc, #4]	; (13f50 <console_rx_restart+0xc>)
   13f4a:	f7f5 fba9 	bl	96a0 <os_cputime_timer_relative>
}
   13f4e:	bd08      	pop	{r3, pc}
   13f50:	20004618 	.word	0x20004618

00013f54 <rtt_console_is_init>:

int
rtt_console_is_init(void)
{
    return 1;
}
   13f54:	2001      	movs	r0, #1
   13f56:	4770      	bx	lr

00013f58 <rtt_console_init>:

int
rtt_console_init(void)
{
   13f58:	b510      	push	{r4, lr}
#if MYNEWT_VAL(CONSOLE_INPUT)
    os_cputime_timer_init(&rtt_timer, rtt_console_poll_func, NULL);
   13f5a:	4c06      	ldr	r4, [pc, #24]	; (13f74 <rtt_console_init+0x1c>)
   13f5c:	2200      	movs	r2, #0
   13f5e:	4906      	ldr	r1, [pc, #24]	; (13f78 <rtt_console_init+0x20>)
   13f60:	4620      	mov	r0, r4
   13f62:	f7f5 fb81 	bl	9668 <os_cputime_timer_init>
    /* start after a second */
    os_cputime_timer_relative(&rtt_timer, 1000000);
   13f66:	4905      	ldr	r1, [pc, #20]	; (13f7c <rtt_console_init+0x24>)
   13f68:	4620      	mov	r0, r4
   13f6a:	f7f5 fb99 	bl	96a0 <os_cputime_timer_relative>
#endif
    return 0;
}
   13f6e:	2000      	movs	r0, #0
   13f70:	bd10      	pop	{r4, pc}
   13f72:	bf00      	nop
   13f74:	20004618 	.word	0x20004618
   13f78:	00013e99 	.word	0x00013e99
   13f7c:	000f4240 	.word	0x000f4240

00013f80 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
   13f80:	4b01      	ldr	r3, [pc, #4]	; (13f88 <console_no_ticks+0x8>)
   13f82:	2200      	movs	r2, #0
   13f84:	701a      	strb	r2, [r3, #0]
}
   13f86:	4770      	bx	lr
   13f88:	20000728 	.word	0x20000728

00013f8c <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
   13f8c:	4b01      	ldr	r3, [pc, #4]	; (13f94 <console_yes_ticks+0x8>)
   13f8e:	2201      	movs	r2, #1
   13f90:	701a      	strb	r2, [r3, #0]
}
   13f92:	4770      	bx	lr
   13f94:	20000728 	.word	0x20000728

00013f98 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   13f98:	4b01      	ldr	r3, [pc, #4]	; (13fa0 <console_get_ticks+0x8>)
   13f9a:	7818      	ldrb	r0, [r3, #0]
   13f9c:	4770      	bx	lr
   13f9e:	bf00      	nop
   13fa0:	20000728 	.word	0x20000728

00013fa4 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   13fa4:	b570      	push	{r4, r5, r6, lr}
   13fa6:	b086      	sub	sp, #24
   13fa8:	4605      	mov	r5, r0
   13faa:	460e      	mov	r6, r1
   13fac:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   13fae:	2300      	movs	r3, #0
   13fb0:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   13fb2:	f000 fc5d 	bl	14870 <mfg_init>

    mfg_open(&reader);
   13fb6:	a801      	add	r0, sp, #4
   13fb8:	f000 fc80 	bl	148bc <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   13fbc:	6823      	ldr	r3, [r4, #0]
   13fbe:	42ab      	cmp	r3, r5
   13fc0:	da22      	bge.n	14008 <flash_map_read_mfg+0x64>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   13fc2:	2102      	movs	r1, #2
   13fc4:	a801      	add	r0, sp, #4
   13fc6:	f000 fc3b 	bl	14840 <mfg_seek_next_with_type>
        switch (rc) {
   13fca:	f110 0f0f 	cmn.w	r0, #15
   13fce:	d01e      	beq.n	1400e <flash_map_read_mfg+0x6a>
   13fd0:	b9f0      	cbnz	r0, 14010 <flash_map_read_mfg+0x6c>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   13fd2:	a903      	add	r1, sp, #12
   13fd4:	a801      	add	r0, sp, #4
   13fd6:	f000 fc40 	bl	1485a <mfg_read_tlv_flash_area>
        if (rc != 0) {
   13fda:	b9c8      	cbnz	r0, 14010 <flash_map_read_mfg+0x6c>
            return rc;
        }

        fap = out_areas + *out_num_areas;
   13fdc:	6823      	ldr	r3, [r4, #0]
   13fde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13fe2:	eb06 0283 	add.w	r2, r6, r3, lsl #2
        fap->fa_id = meta_flash_area.area_id;
   13fe6:	f89d 100c 	ldrb.w	r1, [sp, #12]
   13fea:	f806 1023 	strb.w	r1, [r6, r3, lsl #2]
        fap->fa_device_id = meta_flash_area.device_id;
   13fee:	f89d 300d 	ldrb.w	r3, [sp, #13]
   13ff2:	7053      	strb	r3, [r2, #1]
        fap->fa_off = meta_flash_area.offset;
   13ff4:	f8dd 300e 	ldr.w	r3, [sp, #14]
   13ff8:	6053      	str	r3, [r2, #4]
        fap->fa_size = meta_flash_area.size;
   13ffa:	f8dd 3012 	ldr.w	r3, [sp, #18]
   13ffe:	6093      	str	r3, [r2, #8]

        (*out_num_areas)++;
   14000:	6823      	ldr	r3, [r4, #0]
   14002:	3301      	adds	r3, #1
   14004:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   14006:	e7d9      	b.n	13fbc <flash_map_read_mfg+0x18>
            return -1;
   14008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1400c:	e000      	b.n	14010 <flash_map_read_mfg+0x6c>
        switch (rc) {
   1400e:	2000      	movs	r0, #0
    }
}
   14010:	b006      	add	sp, #24
   14012:	bd70      	pop	{r4, r5, r6, pc}

00014014 <flash_area_open>:
{
   14014:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   14016:	4b0e      	ldr	r3, [pc, #56]	; (14050 <flash_area_open+0x3c>)
   14018:	681c      	ldr	r4, [r3, #0]
   1401a:	b1ac      	cbz	r4, 14048 <flash_area_open+0x34>
    for (i = 0; i < flash_map_entries; i++) {
   1401c:	2300      	movs	r3, #0
   1401e:	4a0d      	ldr	r2, [pc, #52]	; (14054 <flash_area_open+0x40>)
   14020:	6812      	ldr	r2, [r2, #0]
   14022:	429a      	cmp	r2, r3
   14024:	dd0c      	ble.n	14040 <flash_area_open+0x2c>
        area = flash_map + i;
   14026:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1402a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
        if (area->fa_id == id) {
   1402e:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   14032:	4282      	cmp	r2, r0
   14034:	d001      	beq.n	1403a <flash_area_open+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   14036:	3301      	adds	r3, #1
   14038:	e7f1      	b.n	1401e <flash_area_open+0xa>
            *fap = area;
   1403a:	600d      	str	r5, [r1, #0]
            return 0;
   1403c:	2000      	movs	r0, #0
   1403e:	e001      	b.n	14044 <flash_area_open+0x30>
    return SYS_ENOENT;
   14040:	f06f 0003 	mvn.w	r0, #3
}
   14044:	bc30      	pop	{r4, r5}
   14046:	4770      	bx	lr
        return SYS_EACCES;
   14048:	f06f 0006 	mvn.w	r0, #6
   1404c:	e7fa      	b.n	14044 <flash_area_open+0x30>
   1404e:	bf00      	nop
   14050:	20004630 	.word	0x20004630
   14054:	20004634 	.word	0x20004634

00014058 <flash_area_to_sectors>:
{
   14058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1405c:	b084      	sub	sp, #16
   1405e:	460f      	mov	r7, r1
   14060:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   14062:	fa5f f880 	uxtb.w	r8, r0
   14066:	a903      	add	r1, sp, #12
   14068:	4640      	mov	r0, r8
   1406a:	f7ff ffd3 	bl	14014 <flash_area_open>
    if (rc != 0) {
   1406e:	4681      	mov	r9, r0
   14070:	b118      	cbz	r0, 1407a <flash_area_to_sectors+0x22>
}
   14072:	4648      	mov	r0, r9
   14074:	b004      	add	sp, #16
   14076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   1407a:	2300      	movs	r3, #0
   1407c:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   1407e:	9b03      	ldr	r3, [sp, #12]
   14080:	7858      	ldrb	r0, [r3, #1]
   14082:	f005 f92d 	bl	192e0 <hal_bsp_flash_dev>
   14086:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   14088:	464c      	mov	r4, r9
   1408a:	e003      	b.n	14094 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   1408c:	683b      	ldr	r3, [r7, #0]
   1408e:	3301      	adds	r3, #1
   14090:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   14092:	3401      	adds	r4, #1
   14094:	68eb      	ldr	r3, [r5, #12]
   14096:	42a3      	cmp	r3, r4
   14098:	ddeb      	ble.n	14072 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1409a:	682b      	ldr	r3, [r5, #0]
   1409c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   140a0:	ab01      	add	r3, sp, #4
   140a2:	aa02      	add	r2, sp, #8
   140a4:	4621      	mov	r1, r4
   140a6:	4628      	mov	r0, r5
   140a8:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   140aa:	9903      	ldr	r1, [sp, #12]
   140ac:	684b      	ldr	r3, [r1, #4]
   140ae:	9a02      	ldr	r2, [sp, #8]
   140b0:	4293      	cmp	r3, r2
   140b2:	d8ee      	bhi.n	14092 <flash_area_to_sectors+0x3a>
   140b4:	6889      	ldr	r1, [r1, #8]
   140b6:	440b      	add	r3, r1
   140b8:	429a      	cmp	r2, r3
   140ba:	d2ea      	bcs.n	14092 <flash_area_to_sectors+0x3a>
            if (ret) {
   140bc:	2e00      	cmp	r6, #0
   140be:	d0e5      	beq.n	1408c <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   140c0:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   140c4:	9b03      	ldr	r3, [sp, #12]
   140c6:	785b      	ldrb	r3, [r3, #1]
   140c8:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   140ca:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   140cc:	9b01      	ldr	r3, [sp, #4]
   140ce:	60b3      	str	r3, [r6, #8]
                ret++;
   140d0:	360c      	adds	r6, #12
   140d2:	e7db      	b.n	1408c <flash_area_to_sectors+0x34>

000140d4 <flash_area_read>:
{
   140d4:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   140d6:	6884      	ldr	r4, [r0, #8]
   140d8:	428c      	cmp	r4, r1
   140da:	d309      	bcc.n	140f0 <flash_area_read+0x1c>
   140dc:	eb01 0c03 	add.w	ip, r1, r3
   140e0:	4564      	cmp	r4, ip
   140e2:	d308      	bcc.n	140f6 <flash_area_read+0x22>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   140e4:	6844      	ldr	r4, [r0, #4]
   140e6:	4421      	add	r1, r4
   140e8:	7840      	ldrb	r0, [r0, #1]
   140ea:	f009 faf1 	bl	1d6d0 <hal_flash_read>
}
   140ee:	bd10      	pop	{r4, pc}
        return -1;
   140f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140f4:	e7fb      	b.n	140ee <flash_area_read+0x1a>
   140f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140fa:	e7f8      	b.n	140ee <flash_area_read+0x1a>

000140fc <flash_area_write>:
{
   140fc:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   140fe:	6884      	ldr	r4, [r0, #8]
   14100:	428c      	cmp	r4, r1
   14102:	d309      	bcc.n	14118 <flash_area_write+0x1c>
   14104:	eb01 0c03 	add.w	ip, r1, r3
   14108:	4564      	cmp	r4, ip
   1410a:	d308      	bcc.n	1411e <flash_area_write+0x22>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   1410c:	6844      	ldr	r4, [r0, #4]
   1410e:	4421      	add	r1, r4
   14110:	7840      	ldrb	r0, [r0, #1]
   14112:	f009 fb07 	bl	1d724 <hal_flash_write>
}
   14116:	bd10      	pop	{r4, pc}
        return -1;
   14118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1411c:	e7fb      	b.n	14116 <flash_area_write+0x1a>
   1411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14122:	e7f8      	b.n	14116 <flash_area_write+0x1a>

00014124 <flash_area_erase>:
{
   14124:	b508      	push	{r3, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   14126:	6883      	ldr	r3, [r0, #8]
   14128:	428b      	cmp	r3, r1
   1412a:	d309      	bcc.n	14140 <flash_area_erase+0x1c>
   1412c:	eb01 0c02 	add.w	ip, r1, r2
   14130:	4563      	cmp	r3, ip
   14132:	d308      	bcc.n	14146 <flash_area_erase+0x22>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   14134:	6843      	ldr	r3, [r0, #4]
   14136:	4419      	add	r1, r3
   14138:	7840      	ldrb	r0, [r0, #1]
   1413a:	f009 fb2b 	bl	1d794 <hal_flash_erase>
}
   1413e:	bd08      	pop	{r3, pc}
        return -1;
   14140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14144:	e7fb      	b.n	1413e <flash_area_erase+0x1a>
   14146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1414a:	e7f8      	b.n	1413e <flash_area_erase+0x1a>

0001414c <flash_area_align>:
{
   1414c:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   1414e:	7840      	ldrb	r0, [r0, #1]
   14150:	f009 faae 	bl	1d6b0 <hal_flash_align>
}
   14154:	bd08      	pop	{r3, pc}

00014156 <flash_area_erased_val>:
{
   14156:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   14158:	7840      	ldrb	r0, [r0, #1]
   1415a:	f009 fab1 	bl	1d6c0 <hal_flash_erased_val>
}
   1415e:	bd08      	pop	{r3, pc}

00014160 <flash_area_is_empty>:
{
   14160:	b510      	push	{r4, lr}
   14162:	460c      	mov	r4, r1
    *empty = false;
   14164:	2300      	movs	r3, #0
   14166:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   14168:	6882      	ldr	r2, [r0, #8]
   1416a:	6841      	ldr	r1, [r0, #4]
   1416c:	7840      	ldrb	r0, [r0, #1]
   1416e:	f009 fbc1 	bl	1d8f4 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   14172:	2800      	cmp	r0, #0
   14174:	db02      	blt.n	1417c <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   14176:	2801      	cmp	r0, #1
   14178:	d001      	beq.n	1417e <flash_area_is_empty+0x1e>
    return 0;
   1417a:	2000      	movs	r0, #0
}
   1417c:	bd10      	pop	{r4, pc}
        *empty = true;
   1417e:	2301      	movs	r3, #1
   14180:	7023      	strb	r3, [r4, #0]
    return 0;
   14182:	2000      	movs	r0, #0
   14184:	e7fa      	b.n	1417c <flash_area_is_empty+0x1c>

00014186 <flash_area_read_is_empty>:
{
   14186:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   14188:	6844      	ldr	r4, [r0, #4]
   1418a:	4421      	add	r1, r4
   1418c:	7840      	ldrb	r0, [r0, #1]
   1418e:	f009 fb80 	bl	1d892 <hal_flash_isempty>
}
   14192:	bd10      	pop	{r4, pc}

00014194 <flash_area_id_from_image_slot>:
    switch (slot) {
   14194:	b150      	cbz	r0, 141ac <flash_area_id_from_image_slot+0x18>
{
   14196:	b508      	push	{r3, lr}
    switch (slot) {
   14198:	2801      	cmp	r0, #1
   1419a:	d101      	bne.n	141a0 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   1419c:	2002      	movs	r0, #2
}
   1419e:	bd08      	pop	{r3, pc}
        assert(0);
   141a0:	2300      	movs	r3, #0
   141a2:	461a      	mov	r2, r3
   141a4:	4619      	mov	r1, r3
   141a6:	4618      	mov	r0, r3
   141a8:	f7f5 f80c 	bl	91c4 <__assert_func>
    switch (slot) {
   141ac:	2001      	movs	r0, #1
}
   141ae:	4770      	bx	lr

000141b0 <flash_map_init>:

void
flash_map_init(void)
{
   141b0:	b510      	push	{r4, lr}
   141b2:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   141b4:	4b14      	ldr	r3, [pc, #80]	; (14208 <flash_map_init+0x58>)
   141b6:	781b      	ldrb	r3, [r3, #0]
   141b8:	b303      	cbz	r3, 141fc <flash_map_init+0x4c>

    rc = hal_flash_init();
   141ba:	f009 fa65 	bl	1d688 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   141be:	b138      	cbz	r0, 141d0 <flash_map_init+0x20>
   141c0:	2000      	movs	r0, #0
   141c2:	9000      	str	r0, [sp, #0]
   141c4:	4b11      	ldr	r3, [pc, #68]	; (1420c <flash_map_init+0x5c>)
   141c6:	681c      	ldr	r4, [r3, #0]
   141c8:	4603      	mov	r3, r0
   141ca:	4602      	mov	r2, r0
   141cc:	4601      	mov	r1, r0
   141ce:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   141d0:	4b0f      	ldr	r3, [pc, #60]	; (14210 <flash_map_init+0x60>)
   141d2:	4a10      	ldr	r2, [pc, #64]	; (14214 <flash_map_init+0x64>)
   141d4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   141d6:	4b10      	ldr	r3, [pc, #64]	; (14218 <flash_map_init+0x68>)
   141d8:	2206      	movs	r2, #6
   141da:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   141dc:	aa03      	add	r2, sp, #12
   141de:	490f      	ldr	r1, [pc, #60]	; (1421c <flash_map_init+0x6c>)
   141e0:	200a      	movs	r0, #10
   141e2:	f7ff fedf 	bl	13fa4 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   141e6:	b938      	cbnz	r0, 141f8 <flash_map_init+0x48>
   141e8:	9b03      	ldr	r3, [sp, #12]
   141ea:	2b00      	cmp	r3, #0
   141ec:	dd04      	ble.n	141f8 <flash_map_init+0x48>
        flash_map = mfg_areas;
   141ee:	4a08      	ldr	r2, [pc, #32]	; (14210 <flash_map_init+0x60>)
   141f0:	490a      	ldr	r1, [pc, #40]	; (1421c <flash_map_init+0x6c>)
   141f2:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   141f4:	4a08      	ldr	r2, [pc, #32]	; (14218 <flash_map_init+0x68>)
   141f6:	6013      	str	r3, [r2, #0]
    }
}
   141f8:	b004      	add	sp, #16
   141fa:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   141fc:	461a      	mov	r2, r3
   141fe:	4619      	mov	r1, r3
   14200:	4618      	mov	r0, r3
   14202:	f7f4 ffdf 	bl	91c4 <__assert_func>
   14206:	bf00      	nop
   14208:	20004bb0 	.word	0x20004bb0
   1420c:	20000768 	.word	0x20000768
   14210:	20004630 	.word	0x20004630
   14214:	00026ce4 	.word	0x00026ce4
   14218:	20004634 	.word	0x20004634
   1421c:	20004638 	.word	0x20004638

00014220 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   14220:	4b05      	ldr	r3, [pc, #20]	; (14238 <log_registered+0x18>)
   14222:	681b      	ldr	r3, [r3, #0]
   14224:	e000      	b.n	14228 <log_registered+0x8>
   14226:	68db      	ldr	r3, [r3, #12]
   14228:	b11b      	cbz	r3, 14232 <log_registered+0x12>
        if (cur == log) {
   1422a:	4283      	cmp	r3, r0
   1422c:	d1fb      	bne.n	14226 <log_registered+0x6>
            return 1;
   1422e:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   14230:	4770      	bx	lr
    return 0;
   14232:	2000      	movs	r0, #0
   14234:	4770      	bx	lr
   14236:	bf00      	nop
   14238:	2000072c 	.word	0x2000072c

0001423c <log_chk_type>:
            break;
    }
#endif

    return rc;
}
   1423c:	2000      	movs	r0, #0
   1423e:	4770      	bx	lr

00014240 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   14240:	8ac3      	ldrh	r3, [r0, #22]
   14242:	b11b      	cbz	r3, 1424c <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   14244:	428b      	cmp	r3, r1
   14246:	d303      	bcc.n	14250 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   14248:	2000      	movs	r0, #0
   1424a:	4770      	bx	lr
   1424c:	2000      	movs	r0, #0
   1424e:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   14250:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   14252:	4770      	bx	lr

00014254 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   14254:	b500      	push	{lr}
   14256:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   14258:	6903      	ldr	r3, [r0, #16]
   1425a:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   1425c:	9b01      	ldr	r3, [sp, #4]
   1425e:	b10b      	cbz	r3, 14264 <log_call_append_cb+0x10>
        cb(log, idx);
   14260:	9b01      	ldr	r3, [sp, #4]
   14262:	4798      	blx	r3
    }
}
   14264:	b003      	add	sp, #12
   14266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001426c <log_append_prepare>:
{
   1426c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14270:	b085      	sub	sp, #20
   14272:	4605      	mov	r5, r0
   14274:	4688      	mov	r8, r1
   14276:	4614      	mov	r4, r2
   14278:	461f      	mov	r7, r3
   1427a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = log_chk_type(etype);
   1427c:	4618      	mov	r0, r3
   1427e:	f7ff ffdd 	bl	1423c <log_chk_type>
    assert(rc == OS_OK);
   14282:	2800      	cmp	r0, #0
   14284:	d136      	bne.n	142f4 <log_append_prepare+0x88>
    if (log->l_name == NULL || log->l_log == NULL) {
   14286:	682b      	ldr	r3, [r5, #0]
   14288:	2b00      	cmp	r3, #0
   1428a:	d063      	beq.n	14354 <log_append_prepare+0xe8>
   1428c:	686b      	ldr	r3, [r5, #4]
   1428e:	2b00      	cmp	r3, #0
   14290:	d063      	beq.n	1435a <log_append_prepare+0xee>
    if (level > LOG_LEVEL_MAX) {
   14292:	2c0f      	cmp	r4, #15
   14294:	d900      	bls.n	14298 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   14296:	240f      	movs	r4, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   14298:	681b      	ldr	r3, [r3, #0]
   1429a:	2b02      	cmp	r3, #2
   1429c:	d030      	beq.n	14300 <log_append_prepare+0x94>
    if (level < log->l_level) {
   1429e:	7d2b      	ldrb	r3, [r5, #20]
   142a0:	42a3      	cmp	r3, r4
   142a2:	d85d      	bhi.n	14360 <log_append_prepare+0xf4>
    if (level < log_level_get(module)) {
   142a4:	4640      	mov	r0, r8
   142a6:	f000 f9d1 	bl	1464c <log_level_get>
   142aa:	42a0      	cmp	r0, r4
   142ac:	d85b      	bhi.n	14366 <log_append_prepare+0xfa>
    OS_ENTER_CRITICAL(sr);
   142ae:	f7f6 f9e3 	bl	a678 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   142b2:	4b2e      	ldr	r3, [pc, #184]	; (1436c <log_append_prepare+0x100>)
   142b4:	681d      	ldr	r5, [r3, #0]
   142b6:	1c6a      	adds	r2, r5, #1
   142b8:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   142ba:	f7f6 f9e3 	bl	a684 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   142be:	2100      	movs	r1, #0
   142c0:	4668      	mov	r0, sp
   142c2:	f7f6 f8ef 	bl	a4a4 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   142c6:	4681      	mov	r9, r0
   142c8:	b938      	cbnz	r0, 142da <log_append_prepare+0x6e>
   142ca:	9800      	ldr	r0, [sp, #0]
   142cc:	9901      	ldr	r1, [sp, #4]
   142ce:	4b28      	ldr	r3, [pc, #160]	; (14370 <log_append_prepare+0x104>)
   142d0:	4283      	cmp	r3, r0
   142d2:	f04f 0300 	mov.w	r3, #0
   142d6:	418b      	sbcs	r3, r1
   142d8:	db16      	blt.n	14308 <log_append_prepare+0x9c>
        ue->ue_ts = os_get_uptime_usec();
   142da:	f7f6 f987 	bl	a5ec <os_get_uptime_usec>
   142de:	6030      	str	r0, [r6, #0]
   142e0:	6071      	str	r1, [r6, #4]
    ue->ue_level = level;
   142e2:	7374      	strb	r4, [r6, #13]
    ue->ue_module = module;
   142e4:	f886 800c 	strb.w	r8, [r6, #12]
    ue->ue_index = idx;
   142e8:	60b5      	str	r5, [r6, #8]
    assert(etype == LOG_ETYPE_STRING);
   142ea:	bb6f      	cbnz	r7, 14348 <log_append_prepare+0xdc>
}
   142ec:	4648      	mov	r0, r9
   142ee:	b005      	add	sp, #20
   142f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == OS_OK);
   142f4:	2300      	movs	r3, #0
   142f6:	461a      	mov	r2, r3
   142f8:	4619      	mov	r1, r3
   142fa:	4618      	mov	r0, r3
   142fc:	f7f4 ff62 	bl	91c4 <__assert_func>
        log_written = 1;
   14300:	4b1c      	ldr	r3, [pc, #112]	; (14374 <log_append_prepare+0x108>)
   14302:	2201      	movs	r2, #1
   14304:	701a      	strb	r2, [r3, #0]
   14306:	e7ca      	b.n	1429e <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   14308:	014a      	lsls	r2, r1, #5
   1430a:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1430e:	0143      	lsls	r3, r0, #5
   14310:	1a1b      	subs	r3, r3, r0
   14312:	eb62 0201 	sbc.w	r2, r2, r1
   14316:	0252      	lsls	r2, r2, #9
   14318:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   1431c:	025b      	lsls	r3, r3, #9
   1431e:	181b      	adds	r3, r3, r0
   14320:	eb41 0c02 	adc.w	ip, r1, r2
   14324:	ea4f 1e8c 	mov.w	lr, ip, lsl #6
   14328:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   1432c:	019a      	lsls	r2, r3, #6
   1432e:	1ad3      	subs	r3, r2, r3
   14330:	eb6e 020c 	sbc.w	r2, lr, ip
   14334:	181b      	adds	r3, r3, r0
   14336:	eb41 0102 	adc.w	r1, r1, r2
   1433a:	9a02      	ldr	r2, [sp, #8]
   1433c:	189b      	adds	r3, r3, r2
   1433e:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   14342:	6033      	str	r3, [r6, #0]
   14344:	6071      	str	r1, [r6, #4]
   14346:	e7cc      	b.n	142e2 <log_append_prepare+0x76>
    assert(etype == LOG_ETYPE_STRING);
   14348:	2300      	movs	r3, #0
   1434a:	461a      	mov	r2, r3
   1434c:	4619      	mov	r1, r3
   1434e:	4618      	mov	r0, r3
   14350:	f7f4 ff38 	bl	91c4 <__assert_func>
        rc = -1;
   14354:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14358:	e7c8      	b.n	142ec <log_append_prepare+0x80>
   1435a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1435e:	e7c5      	b.n	142ec <log_append_prepare+0x80>
        rc = -1;
   14360:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14364:	e7c2      	b.n	142ec <log_append_prepare+0x80>
        rc = -1;
   14366:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    return (rc);
   1436a:	e7bf      	b.n	142ec <log_append_prepare+0x80>
   1436c:	200046b0 	.word	0x200046b0
   14370:	5685c17f 	.word	0x5685c17f
   14374:	200046bc 	.word	0x200046bc

00014378 <log_init>:
{
   14378:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1437a:	4b0b      	ldr	r3, [pc, #44]	; (143a8 <log_init+0x30>)
   1437c:	781b      	ldrb	r3, [r3, #0]
   1437e:	b173      	cbz	r3, 1439e <log_init+0x26>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   14380:	2300      	movs	r3, #0
   14382:	4a0a      	ldr	r2, [pc, #40]	; (143ac <log_init+0x34>)
   14384:	6013      	str	r3, [r2, #0]
    log_written = 0;
   14386:	4a0a      	ldr	r2, [pc, #40]	; (143b0 <log_init+0x38>)
   14388:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1438a:	4a0a      	ldr	r2, [pc, #40]	; (143b4 <log_init+0x3c>)
   1438c:	6013      	str	r3, [r2, #0]
   1438e:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   14390:	4a09      	ldr	r2, [pc, #36]	; (143b8 <log_init+0x40>)
   14392:	2102      	movs	r1, #2
   14394:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   14396:	6013      	str	r3, [r2, #0]
    log_console_init();
   14398:	f000 f932 	bl	14600 <log_console_init>
}
   1439c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1439e:	461a      	mov	r2, r3
   143a0:	4619      	mov	r1, r3
   143a2:	4618      	mov	r0, r3
   143a4:	f7f4 ff0e 	bl	91c4 <__assert_func>
   143a8:	20004bb0 	.word	0x20004bb0
   143ac:	200046b8 	.word	0x200046b8
   143b0:	200046bc 	.word	0x200046bc
   143b4:	2000072c 	.word	0x2000072c
   143b8:	200046b0 	.word	0x200046b0

000143bc <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   143bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   143c0:	b087      	sub	sp, #28
   143c2:	4604      	mov	r4, r0
   143c4:	460d      	mov	r5, r1
   143c6:	4691      	mov	r9, r2
   143c8:	461e      	mov	r6, r3
   143ca:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   143ce:	4641      	mov	r1, r8
   143d0:	f7ff ff36 	bl	14240 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   143d4:	4607      	mov	r7, r0
   143d6:	b118      	cbz	r0, 143e0 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   143d8:	4638      	mov	r0, r7
   143da:	b007      	add	sp, #28
   143dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   143e0:	ab02      	add	r3, sp, #8
   143e2:	9300      	str	r3, [sp, #0]
   143e4:	4633      	mov	r3, r6
   143e6:	464a      	mov	r2, r9
   143e8:	4629      	mov	r1, r5
   143ea:	4620      	mov	r0, r4
   143ec:	f7ff ff3e 	bl	1426c <log_append_prepare>
    if (rc != 0) {
   143f0:	4607      	mov	r7, r0
   143f2:	2800      	cmp	r0, #0
   143f4:	d1f0      	bne.n	143d8 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   143f6:	6863      	ldr	r3, [r4, #4]
   143f8:	691d      	ldr	r5, [r3, #16]
   143fa:	4643      	mov	r3, r8
   143fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   143fe:	a902      	add	r1, sp, #8
   14400:	4620      	mov	r0, r4
   14402:	47a8      	blx	r5
    if (rc != 0) {
   14404:	4607      	mov	r7, r0
   14406:	2800      	cmp	r0, #0
   14408:	d1e6      	bne.n	143d8 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   1440a:	9904      	ldr	r1, [sp, #16]
   1440c:	4620      	mov	r0, r4
   1440e:	f7ff ff21 	bl	14254 <log_call_append_cb>
    return 0;
   14412:	e7e1      	b.n	143d8 <log_append_body+0x1c>

00014414 <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   14414:	b408      	push	{r3}
   14416:	b570      	push	{r4, r5, r6, lr}
   14418:	b0a5      	sub	sp, #148	; 0x94
   1441a:	4604      	mov	r4, r0
   1441c:	460d      	mov	r5, r1
   1441e:	4616      	mov	r6, r2
   14420:	ab29      	add	r3, sp, #164	; 0xa4
   14422:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
   14426:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   14428:	2180      	movs	r1, #128	; 0x80
   1442a:	a803      	add	r0, sp, #12
   1442c:	f7fc fd60 	bl	10ef0 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
   14430:	287f      	cmp	r0, #127	; 0x7f
   14432:	dd00      	ble.n	14436 <log_printf+0x22>
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
   14434:	207f      	movs	r0, #127	; 0x7f
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   14436:	b280      	uxth	r0, r0
   14438:	9001      	str	r0, [sp, #4]
   1443a:	ab03      	add	r3, sp, #12
   1443c:	9300      	str	r3, [sp, #0]
   1443e:	2300      	movs	r3, #0
   14440:	4632      	mov	r2, r6
   14442:	4629      	mov	r1, r5
   14444:	4620      	mov	r0, r4
   14446:	f7ff ffb9 	bl	143bc <log_append_body>
}
   1444a:	b025      	add	sp, #148	; 0x94
   1444c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14450:	b001      	add	sp, #4
   14452:	4770      	bx	lr

00014454 <log_walk>:

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   14454:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   14456:	6843      	ldr	r3, [r0, #4]
   14458:	69db      	ldr	r3, [r3, #28]
   1445a:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1445c:	bd08      	pop	{r3, pc}
	...

00014460 <log_read_last_hdr>:
{
   14460:	b500      	push	{lr}
   14462:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   14464:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   14466:	2300      	movs	r3, #0
   14468:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1446a:	aa06      	add	r2, sp, #24
   1446c:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1446e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 14498 <log_read_last_hdr+0x38>
   14472:	ed8d 7b00 	vstr	d7, [sp]
    log_offset.lo_index = 0;
   14476:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   14478:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1447a:	466a      	mov	r2, sp
   1447c:	4908      	ldr	r1, [pc, #32]	; (144a0 <log_read_last_hdr+0x40>)
   1447e:	f7ff ffe9 	bl	14454 <log_walk>
    if (!arg.read_success) {
   14482:	9b07      	ldr	r3, [sp, #28]
   14484:	b11b      	cbz	r3, 1448e <log_read_last_hdr+0x2e>
    return 0;
   14486:	2000      	movs	r0, #0
}
   14488:	b009      	add	sp, #36	; 0x24
   1448a:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   1448e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14492:	e7f9      	b.n	14488 <log_read_last_hdr+0x28>
   14494:	f3af 8000 	nop.w
   14498:	ffffffff 	.word	0xffffffff
   1449c:	ffffffff 	.word	0xffffffff
   144a0:	0001454d 	.word	0x0001454d

000144a4 <log_register>:
{
   144a4:	b530      	push	{r4, r5, lr}
   144a6:	b085      	sub	sp, #20
   144a8:	460c      	mov	r4, r1
   144aa:	f89d 1020 	ldrb.w	r1, [sp, #32]
    assert(!log_written);
   144ae:	4d1f      	ldr	r5, [pc, #124]	; (1452c <log_register+0x88>)
   144b0:	782d      	ldrb	r5, [r5, #0]
   144b2:	bb0d      	cbnz	r5, 144f8 <log_register+0x54>
    if (level > LOG_LEVEL_MAX) {
   144b4:	290f      	cmp	r1, #15
   144b6:	d900      	bls.n	144ba <log_register+0x16>
        level = LOG_LEVEL_MAX;
   144b8:	210f      	movs	r1, #15
    log->l_name = name;
   144ba:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   144bc:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   144be:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   144c0:	7521      	strb	r1, [r4, #20]
    log->l_append_cb = NULL;
   144c2:	2300      	movs	r3, #0
   144c4:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   144c6:	82e3      	strh	r3, [r4, #22]
    if (!log_registered(log)) {
   144c8:	4620      	mov	r0, r4
   144ca:	f7ff fea9 	bl	14220 <log_registered>
   144ce:	b938      	cbnz	r0, 144e0 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   144d0:	2300      	movs	r3, #0
   144d2:	60e3      	str	r3, [r4, #12]
   144d4:	4b16      	ldr	r3, [pc, #88]	; (14530 <log_register+0x8c>)
   144d6:	685a      	ldr	r2, [r3, #4]
   144d8:	6014      	str	r4, [r2, #0]
   144da:	f104 020c 	add.w	r2, r4, #12
   144de:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   144e0:	6863      	ldr	r3, [r4, #4]
   144e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   144e4:	b10b      	cbz	r3, 144ea <log_register+0x46>
        log->l_log->log_registered(log);
   144e6:	4620      	mov	r0, r4
   144e8:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   144ea:	6863      	ldr	r3, [r4, #4]
   144ec:	681b      	ldr	r3, [r3, #0]
   144ee:	2b02      	cmp	r3, #2
   144f0:	d008      	beq.n	14504 <log_register+0x60>
}
   144f2:	2000      	movs	r0, #0
   144f4:	b005      	add	sp, #20
   144f6:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   144f8:	2300      	movs	r3, #0
   144fa:	461a      	mov	r2, r3
   144fc:	4619      	mov	r1, r3
   144fe:	4618      	mov	r0, r3
   14500:	f7f4 fe60 	bl	91c4 <__assert_func>
        rc = log_read_last_hdr(log, &hdr);
   14504:	4669      	mov	r1, sp
   14506:	4620      	mov	r0, r4
   14508:	f7ff ffaa 	bl	14460 <log_read_last_hdr>
        if (rc == 0) {
   1450c:	2800      	cmp	r0, #0
   1450e:	d1f0      	bne.n	144f2 <log_register+0x4e>
            OS_ENTER_CRITICAL(sr);
   14510:	f7f6 f8b2 	bl	a678 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   14514:	9b02      	ldr	r3, [sp, #8]
   14516:	4a07      	ldr	r2, [pc, #28]	; (14534 <log_register+0x90>)
   14518:	6812      	ldr	r2, [r2, #0]
   1451a:	4293      	cmp	r3, r2
   1451c:	d302      	bcc.n	14524 <log_register+0x80>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1451e:	3301      	adds	r3, #1
   14520:	4a04      	ldr	r2, [pc, #16]	; (14534 <log_register+0x90>)
   14522:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   14524:	f7f6 f8ae 	bl	a684 <os_arch_restore_sr>
   14528:	e7e3      	b.n	144f2 <log_register+0x4e>
   1452a:	bf00      	nop
   1452c:	200046bc 	.word	0x200046bc
   14530:	2000072c 	.word	0x2000072c
   14534:	200046b0 	.word	0x200046b0

00014538 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   14538:	b530      	push	{r4, r5, lr}
   1453a:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1453c:	6844      	ldr	r4, [r0, #4]
   1453e:	6864      	ldr	r4, [r4, #4]
   14540:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   14544:	9500      	str	r5, [sp, #0]
   14546:	47a0      	blx	r4

    return (rc);
}
   14548:	b003      	add	sp, #12
   1454a:	bd30      	pop	{r4, r5, pc}

0001454c <log_read_hdr_walk>:
{
   1454c:	b510      	push	{r4, lr}
   1454e:	b082      	sub	sp, #8
   14550:	460b      	mov	r3, r1
   14552:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   14554:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   14556:	6822      	ldr	r2, [r4, #0]
   14558:	230e      	movs	r3, #14
   1455a:	9300      	str	r3, [sp, #0]
   1455c:	2300      	movs	r3, #0
   1455e:	f7ff ffeb 	bl	14538 <log_read>
    if (rc >= sizeof *arg->hdr) {
   14562:	280d      	cmp	r0, #13
   14564:	d901      	bls.n	1456a <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   14566:	2301      	movs	r3, #1
   14568:	6063      	str	r3, [r4, #4]
}
   1456a:	2001      	movs	r0, #1
   1456c:	b002      	add	sp, #8
   1456e:	bd10      	pop	{r4, pc}

00014570 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   14570:	2002      	movs	r0, #2
   14572:	4770      	bx	lr

00014574 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   14574:	2002      	movs	r0, #2
   14576:	4770      	bx	lr

00014578 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   14578:	2002      	movs	r0, #2
   1457a:	4770      	bx	lr

0001457c <log_console_print_hdr>:
{
   1457c:	b500      	push	{lr}
   1457e:	b083      	sub	sp, #12
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   14580:	7b03      	ldrb	r3, [r0, #12]
   14582:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   14584:	9201      	str	r2, [sp, #4]
   14586:	9300      	str	r3, [sp, #0]
   14588:	6802      	ldr	r2, [r0, #0]
   1458a:	6843      	ldr	r3, [r0, #4]
   1458c:	4802      	ldr	r0, [pc, #8]	; (14598 <log_console_print_hdr+0x1c>)
   1458e:	f7ff fc41 	bl	13e14 <console_printf>
}
   14592:	b003      	add	sp, #12
   14594:	f85d fb04 	ldr.w	pc, [sp], #4
   14598:	000260fc 	.word	0x000260fc

0001459c <log_console_append_body>:
{
   1459c:	b570      	push	{r4, r5, r6, lr}
   1459e:	460e      	mov	r6, r1
   145a0:	4614      	mov	r4, r2
   145a2:	461d      	mov	r5, r3
    if (!console_is_init()) {
   145a4:	f7ff fbcc 	bl	13d40 <console_is_init>
   145a8:	b130      	cbz	r0, 145b8 <log_console_append_body+0x1c>
    if (!console_is_midline) {
   145aa:	4b06      	ldr	r3, [pc, #24]	; (145c4 <log_console_append_body+0x28>)
   145ac:	681b      	ldr	r3, [r3, #0]
   145ae:	b12b      	cbz	r3, 145bc <log_console_append_body+0x20>
    console_write(body, body_len);
   145b0:	4629      	mov	r1, r5
   145b2:	4620      	mov	r0, r4
   145b4:	f7ff fa06 	bl	139c4 <console_write>
}
   145b8:	2000      	movs	r0, #0
   145ba:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   145bc:	4630      	mov	r0, r6
   145be:	f7ff ffdd 	bl	1457c <log_console_print_hdr>
   145c2:	e7f5      	b.n	145b0 <log_console_append_body+0x14>
   145c4:	200045e8 	.word	0x200045e8

000145c8 <log_console_append>:
{
   145c8:	b538      	push	{r3, r4, r5, lr}
   145ca:	460c      	mov	r4, r1
   145cc:	4615      	mov	r5, r2
    if (!console_is_init()) {
   145ce:	f7ff fbb7 	bl	13d40 <console_is_init>
   145d2:	b140      	cbz	r0, 145e6 <log_console_append+0x1e>
    if (!console_is_midline) {
   145d4:	4b07      	ldr	r3, [pc, #28]	; (145f4 <log_console_append+0x2c>)
   145d6:	681b      	ldr	r3, [r3, #0]
   145d8:	b13b      	cbz	r3, 145ea <log_console_append+0x22>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   145da:	f1a5 010e 	sub.w	r1, r5, #14
   145de:	f104 000e 	add.w	r0, r4, #14
   145e2:	f7ff f9ef 	bl	139c4 <console_write>
}
   145e6:	2000      	movs	r0, #0
   145e8:	bd38      	pop	{r3, r4, r5, pc}
        log_console_print_hdr(hdr);
   145ea:	4620      	mov	r0, r4
   145ec:	f7ff ffc6 	bl	1457c <log_console_print_hdr>
   145f0:	e7f3      	b.n	145da <log_console_append+0x12>
   145f2:	bf00      	nop
   145f4:	200045e8 	.word	0x200045e8

000145f8 <log_console_get>:
}
   145f8:	4800      	ldr	r0, [pc, #0]	; (145fc <log_console_get+0x4>)
   145fa:	4770      	bx	lr
   145fc:	200046c0 	.word	0x200046c0

00014600 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   14600:	b510      	push	{r4, lr}
   14602:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14604:	4b0c      	ldr	r3, [pc, #48]	; (14638 <log_console_init+0x38>)
   14606:	781b      	ldrb	r3, [r3, #0]
   14608:	b18b      	cbz	r3, 1462e <log_console_init+0x2e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1460a:	2300      	movs	r3, #0
   1460c:	9300      	str	r3, [sp, #0]
   1460e:	4a0b      	ldr	r2, [pc, #44]	; (1463c <log_console_init+0x3c>)
   14610:	490b      	ldr	r1, [pc, #44]	; (14640 <log_console_init+0x40>)
   14612:	480c      	ldr	r0, [pc, #48]	; (14644 <log_console_init+0x44>)
   14614:	f7ff ff46 	bl	144a4 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   14618:	b138      	cbz	r0, 1462a <log_console_init+0x2a>
   1461a:	2000      	movs	r0, #0
   1461c:	9000      	str	r0, [sp, #0]
   1461e:	4b0a      	ldr	r3, [pc, #40]	; (14648 <log_console_init+0x48>)
   14620:	681c      	ldr	r4, [r3, #0]
   14622:	4603      	mov	r3, r0
   14624:	4602      	mov	r2, r0
   14626:	4601      	mov	r1, r0
   14628:	47a0      	blx	r4
}
   1462a:	b002      	add	sp, #8
   1462c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1462e:	461a      	mov	r2, r3
   14630:	4619      	mov	r1, r3
   14632:	4618      	mov	r0, r3
   14634:	f7f4 fdc6 	bl	91c4 <__assert_func>
   14638:	20004bb0 	.word	0x20004bb0
   1463c:	00026124 	.word	0x00026124
   14640:	200046c0 	.word	0x200046c0
   14644:	0002611c 	.word	0x0002611c
   14648:	20000768 	.word	0x20000768

0001464c <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   1464c:	0843      	lsrs	r3, r0, #1
   1464e:	4a05      	ldr	r2, [pc, #20]	; (14664 <log_level_get+0x18>)
   14650:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   14652:	f010 0f01 	tst.w	r0, #1
   14656:	d102      	bne.n	1465e <log_level_get+0x12>
        return byte & 0x0f;
   14658:	f003 000f 	and.w	r0, r3, #15
   1465c:	4770      	bx	lr
    } else {
        return byte >> 4;
   1465e:	0918      	lsrs	r0, r3, #4
    }
}
   14660:	4770      	bx	lr
   14662:	bf00      	nop
   14664:	200046d8 	.word	0x200046d8

00014668 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   14668:	b530      	push	{r4, r5, lr}
   1466a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1466c:	7885      	ldrb	r5, [r0, #2]
   1466e:	4b20      	ldr	r3, [pc, #128]	; (146f0 <mfg_seek_next_aux+0x88>)
   14670:	681b      	ldr	r3, [r3, #0]
   14672:	429d      	cmp	r5, r3
   14674:	da33      	bge.n	146de <mfg_seek_next_aux+0x76>
   14676:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   14678:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1467c:	a901      	add	r1, sp, #4
   1467e:	4a1d      	ldr	r2, [pc, #116]	; (146f4 <mfg_seek_next_aux+0x8c>)
   14680:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   14684:	f7ff fcc6 	bl	14014 <flash_area_open>
    if (rc != 0) {
   14688:	bb60      	cbnz	r0, 146e4 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1468a:	6862      	ldr	r2, [r4, #4]
   1468c:	b9c2      	cbnz	r2, 146c0 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1468e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   14692:	4b18      	ldr	r3, [pc, #96]	; (146f4 <mfg_seek_next_aux+0x8c>)
   14694:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   14698:	686b      	ldr	r3, [r5, #4]
   1469a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1469c:	6861      	ldr	r1, [r4, #4]
   1469e:	9801      	ldr	r0, [sp, #4]
   146a0:	6883      	ldr	r3, [r0, #8]
   146a2:	3b08      	subs	r3, #8
   146a4:	4299      	cmp	r1, r3
   146a6:	d313      	bcc.n	146d0 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   146a8:	78a3      	ldrb	r3, [r4, #2]
   146aa:	1c59      	adds	r1, r3, #1
   146ac:	4a10      	ldr	r2, [pc, #64]	; (146f0 <mfg_seek_next_aux+0x88>)
   146ae:	6812      	ldr	r2, [r2, #0]
   146b0:	4291      	cmp	r1, r2
   146b2:	da0a      	bge.n	146ca <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   146b4:	2200      	movs	r2, #0
   146b6:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   146b8:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   146ba:	f06f 0005 	mvn.w	r0, #5
   146be:	e00c      	b.n	146da <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   146c0:	7863      	ldrb	r3, [r4, #1]
   146c2:	4413      	add	r3, r2
   146c4:	3302      	adds	r3, #2
   146c6:	6063      	str	r3, [r4, #4]
   146c8:	e7e8      	b.n	1469c <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   146ca:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   146ce:	e004      	b.n	146da <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   146d0:	2302      	movs	r3, #2
   146d2:	4622      	mov	r2, r4
   146d4:	f7ff fcfe 	bl	140d4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   146d8:	b938      	cbnz	r0, 146ea <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   146da:	b003      	add	sp, #12
   146dc:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   146de:	f06f 0001 	mvn.w	r0, #1
   146e2:	e7fa      	b.n	146da <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   146e4:	f06f 0004 	mvn.w	r0, #4
   146e8:	e7f7      	b.n	146da <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   146ea:	f06f 0004 	mvn.w	r0, #4
   146ee:	e7f4      	b.n	146da <mfg_seek_next_aux+0x72>
   146f0:	20004774 	.word	0x20004774
   146f4:	2000475c 	.word	0x2000475c

000146f8 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   146f8:	b530      	push	{r4, r5, lr}
   146fa:	b085      	sub	sp, #20
   146fc:	4605      	mov	r5, r0
   146fe:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   14700:	a903      	add	r1, sp, #12
   14702:	f7ff fc87 	bl	14014 <flash_area_open>
    if (rc != 0) {
   14706:	b9d8      	cbnz	r0, 14740 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   14708:	9803      	ldr	r0, [sp, #12]
   1470a:	6881      	ldr	r1, [r0, #8]
   1470c:	2308      	movs	r3, #8
   1470e:	aa01      	add	r2, sp, #4
   14710:	3908      	subs	r1, #8
   14712:	f7ff fcdf 	bl	140d4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   14716:	b9b0      	cbnz	r0, 14746 <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   14718:	9a02      	ldr	r2, [sp, #8]
   1471a:	4b11      	ldr	r3, [pc, #68]	; (14760 <mfg_read_mmr+0x68>)
   1471c:	429a      	cmp	r2, r3
   1471e:	d115      	bne.n	1474c <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   14720:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14724:	2b02      	cmp	r3, #2
   14726:	d114      	bne.n	14752 <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   14728:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1472c:	9b03      	ldr	r3, [sp, #12]
   1472e:	689b      	ldr	r3, [r3, #8]
   14730:	429a      	cmp	r2, r3
   14732:	d811      	bhi.n	14758 <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   14734:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   14736:	7025      	strb	r5, [r4, #0]
   14738:	6063      	str	r3, [r4, #4]
   1473a:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1473c:	b005      	add	sp, #20
   1473e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   14740:	f06f 0004 	mvn.w	r0, #4
   14744:	e7fa      	b.n	1473c <mfg_read_mmr+0x44>
        return SYS_EIO;
   14746:	f06f 0004 	mvn.w	r0, #4
   1474a:	e7f7      	b.n	1473c <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1474c:	f06f 0008 	mvn.w	r0, #8
   14750:	e7f4      	b.n	1473c <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   14752:	f06f 000b 	mvn.w	r0, #11
   14756:	e7f1      	b.n	1473c <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   14758:	f06f 0008 	mvn.w	r0, #8
   1475c:	e7ee      	b.n	1473c <mfg_read_mmr+0x44>
   1475e:	bf00      	nop
   14760:	3bb2a269 	.word	0x3bb2a269

00014764 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   14764:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   14766:	2300      	movs	r3, #0
   14768:	e000      	b.n	1476c <mfg_read_next_mmr+0x8>
   1476a:	3301      	adds	r3, #1
   1476c:	4a10      	ldr	r2, [pc, #64]	; (147b0 <mfg_read_next_mmr+0x4c>)
   1476e:	6811      	ldr	r1, [r2, #0]
   14770:	4299      	cmp	r1, r3
   14772:	dd09      	ble.n	14788 <mfg_read_next_mmr+0x24>
        if (mfg_mmrs[i].area_id == area_id) {
   14774:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14778:	490e      	ldr	r1, [pc, #56]	; (147b4 <mfg_read_next_mmr+0x50>)
   1477a:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1477e:	4282      	cmp	r2, r0
   14780:	d1f3      	bne.n	1476a <mfg_read_next_mmr+0x6>
            return SYS_EALREADY;
   14782:	f06f 000a 	mvn.w	r0, #10
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   14786:	bd08      	pop	{r3, pc}
    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   14788:	2901      	cmp	r1, #1
   1478a:	dc0d      	bgt.n	147a8 <mfg_read_next_mmr+0x44>
    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1478c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14790:	4b08      	ldr	r3, [pc, #32]	; (147b4 <mfg_read_next_mmr+0x50>)
   14792:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14796:	f7ff ffaf 	bl	146f8 <mfg_read_mmr>
    if (rc != 0) {
   1479a:	2800      	cmp	r0, #0
   1479c:	d1f3      	bne.n	14786 <mfg_read_next_mmr+0x22>
    mfg_num_mmrs++;
   1479e:	4a04      	ldr	r2, [pc, #16]	; (147b0 <mfg_read_next_mmr+0x4c>)
   147a0:	6813      	ldr	r3, [r2, #0]
   147a2:	3301      	adds	r3, #1
   147a4:	6013      	str	r3, [r2, #0]
    return 0;
   147a6:	e7ee      	b.n	14786 <mfg_read_next_mmr+0x22>
        return SYS_ENOMEM;
   147a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147ac:	e7eb      	b.n	14786 <mfg_read_next_mmr+0x22>
   147ae:	bf00      	nop
   147b0:	20004774 	.word	0x20004774
   147b4:	2000475c 	.word	0x2000475c

000147b8 <mfg_open_flash_area>:
{
   147b8:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   147ba:	7883      	ldrb	r3, [r0, #2]
   147bc:	4a0a      	ldr	r2, [pc, #40]	; (147e8 <mfg_open_flash_area+0x30>)
   147be:	6812      	ldr	r2, [r2, #0]
   147c0:	4293      	cmp	r3, r2
   147c2:	da08      	bge.n	147d6 <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   147c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   147c8:	4a08      	ldr	r2, [pc, #32]	; (147ec <mfg_open_flash_area+0x34>)
   147ca:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   147ce:	f7ff fc21 	bl	14014 <flash_area_open>
    if (rc != 0) {
   147d2:	b930      	cbnz	r0, 147e2 <mfg_open_flash_area+0x2a>
}
   147d4:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   147d6:	2300      	movs	r3, #0
   147d8:	461a      	mov	r2, r3
   147da:	4619      	mov	r1, r3
   147dc:	4618      	mov	r0, r3
   147de:	f7f4 fcf1 	bl	91c4 <__assert_func>
        return SYS_EIO;
   147e2:	f06f 0004 	mvn.w	r0, #4
   147e6:	e7f5      	b.n	147d4 <mfg_open_flash_area+0x1c>
   147e8:	20004774 	.word	0x20004774
   147ec:	2000475c 	.word	0x2000475c

000147f0 <mfg_read_tlv_body>:
{
   147f0:	b570      	push	{r4, r5, r6, lr}
   147f2:	b082      	sub	sp, #8
   147f4:	4606      	mov	r6, r0
   147f6:	460c      	mov	r4, r1
   147f8:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   147fa:	a901      	add	r1, sp, #4
   147fc:	f7ff ffdc 	bl	147b8 <mfg_open_flash_area>
    if (rc != 0) {
   14800:	b108      	cbz	r0, 14806 <mfg_read_tlv_body+0x16>
}
   14802:	b002      	add	sp, #8
   14804:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   14806:	462a      	mov	r2, r5
   14808:	2100      	movs	r1, #0
   1480a:	4620      	mov	r0, r4
   1480c:	f7fb ff45 	bl	1069a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   14810:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   14812:	6871      	ldr	r1, [r6, #4]
   14814:	42ab      	cmp	r3, r5
   14816:	bfa8      	it	ge
   14818:	462b      	movge	r3, r5
   1481a:	4622      	mov	r2, r4
   1481c:	3102      	adds	r1, #2
   1481e:	9801      	ldr	r0, [sp, #4]
   14820:	f7ff fc58 	bl	140d4 <flash_area_read>
    if (rc != 0) {
   14824:	2800      	cmp	r0, #0
   14826:	d0ec      	beq.n	14802 <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   14828:	f06f 0004 	mvn.w	r0, #4
   1482c:	e7e9      	b.n	14802 <mfg_read_tlv_body+0x12>

0001482e <mfg_seek_next>:
{
   1482e:	b510      	push	{r4, lr}
   14830:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   14832:	4620      	mov	r0, r4
   14834:	f7ff ff18 	bl	14668 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   14838:	f110 0f06 	cmn.w	r0, #6
   1483c:	d0f9      	beq.n	14832 <mfg_seek_next+0x4>
}
   1483e:	bd10      	pop	{r4, pc}

00014840 <mfg_seek_next_with_type>:
{
   14840:	b538      	push	{r3, r4, r5, lr}
   14842:	4604      	mov	r4, r0
   14844:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   14846:	4620      	mov	r0, r4
   14848:	f7ff fff1 	bl	1482e <mfg_seek_next>
        if (rc != 0) {
   1484c:	4602      	mov	r2, r0
   1484e:	b910      	cbnz	r0, 14856 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   14850:	7823      	ldrb	r3, [r4, #0]
   14852:	42ab      	cmp	r3, r5
   14854:	d1f7      	bne.n	14846 <mfg_seek_next_with_type+0x6>
}
   14856:	4610      	mov	r0, r2
   14858:	bd38      	pop	{r3, r4, r5, pc}

0001485a <mfg_read_tlv_flash_area>:
{
   1485a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1485c:	220a      	movs	r2, #10
   1485e:	f7ff ffc7 	bl	147f0 <mfg_read_tlv_body>
}
   14862:	bd08      	pop	{r3, pc}

00014864 <mfg_read_tlv_mmr_ref>:
{
   14864:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   14866:	2201      	movs	r2, #1
   14868:	f7ff ffc2 	bl	147f0 <mfg_read_tlv_body>
}
   1486c:	bd08      	pop	{r3, pc}
	...

00014870 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   14870:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   14872:	4b0f      	ldr	r3, [pc, #60]	; (148b0 <mfg_init+0x40>)
   14874:	781b      	ldrb	r3, [r3, #0]
   14876:	b97b      	cbnz	r3, 14898 <mfg_init+0x28>
        return;
    }
    mfg_initialized = true;
   14878:	4b0d      	ldr	r3, [pc, #52]	; (148b0 <mfg_init+0x40>)
   1487a:	2201      	movs	r2, #1
   1487c:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1487e:	4b0d      	ldr	r3, [pc, #52]	; (148b4 <mfg_init+0x44>)
   14880:	781b      	ldrb	r3, [r3, #0]
   14882:	b153      	cbz	r3, 1489a <mfg_init+0x2a>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   14884:	2000      	movs	r0, #0
   14886:	f7ff ff6d 	bl	14764 <mfg_read_next_mmr>
    if (rc != 0) {
   1488a:	4603      	mov	r3, r0
   1488c:	b150      	cbz	r0, 148a4 <mfg_init+0x34>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   1488e:	4a0a      	ldr	r2, [pc, #40]	; (148b8 <mfg_init+0x48>)
   14890:	2103      	movs	r1, #3
   14892:	2080      	movs	r0, #128	; 0x80
   14894:	f00d ffd4 	bl	22840 <modlog_printf>
}
   14898:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1489a:	461a      	mov	r2, r3
   1489c:	4619      	mov	r1, r3
   1489e:	4618      	mov	r0, r3
   148a0:	f7f4 fc90 	bl	91c4 <__assert_func>
    rc = mfg_read_mmr_refs();
   148a4:	f000 f812 	bl	148cc <mfg_read_mmr_refs>
    if (rc != 0) {
   148a8:	4603      	mov	r3, r0
   148aa:	2800      	cmp	r0, #0
   148ac:	d0f4      	beq.n	14898 <mfg_init+0x28>
   148ae:	e7ee      	b.n	1488e <mfg_init+0x1e>
   148b0:	20004758 	.word	0x20004758
   148b4:	20004bb0 	.word	0x20004bb0
   148b8:	0002614c 	.word	0x0002614c

000148bc <mfg_open>:
{
   148bc:	b510      	push	{r4, lr}
   148be:	4604      	mov	r4, r0
    mfg_init();
   148c0:	f7ff ffd6 	bl	14870 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   148c4:	2300      	movs	r3, #0
   148c6:	6023      	str	r3, [r4, #0]
   148c8:	6063      	str	r3, [r4, #4]
}
   148ca:	bd10      	pop	{r4, pc}

000148cc <mfg_read_mmr_refs>:
{
   148cc:	b500      	push	{lr}
   148ce:	b085      	sub	sp, #20
    mfg_open(&reader);
   148d0:	a801      	add	r0, sp, #4
   148d2:	f7ff fff3 	bl	148bc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   148d6:	2104      	movs	r1, #4
   148d8:	eb0d 0001 	add.w	r0, sp, r1
   148dc:	f7ff ffb0 	bl	14840 <mfg_seek_next_with_type>
        switch (rc) {
   148e0:	f110 0f0f 	cmn.w	r0, #15
   148e4:	d00f      	beq.n	14906 <mfg_read_mmr_refs+0x3a>
   148e6:	b978      	cbnz	r0, 14908 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   148e8:	a903      	add	r1, sp, #12
   148ea:	a801      	add	r0, sp, #4
   148ec:	f7ff ffba 	bl	14864 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   148f0:	b950      	cbnz	r0, 14908 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   148f2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   148f6:	f7ff ff35 	bl	14764 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   148fa:	2800      	cmp	r0, #0
   148fc:	d0eb      	beq.n	148d6 <mfg_read_mmr_refs+0xa>
   148fe:	f110 0f0b 	cmn.w	r0, #11
   14902:	d0e8      	beq.n	148d6 <mfg_read_mmr_refs+0xa>
   14904:	e000      	b.n	14908 <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   14906:	2000      	movs	r0, #0
}
   14908:	b005      	add	sp, #20
   1490a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00014910 <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   14910:	2901      	cmp	r1, #1
   14912:	d001      	beq.n	14918 <reboot_conf_export+0x8>
        func("reboot/reboot_cnt", reboot_cnt_str);
        func("reboot/written", log_reboot_written_str);
    }
    return 0;
}
   14914:	2000      	movs	r0, #0
   14916:	4770      	bx	lr
{
   14918:	b510      	push	{r4, lr}
   1491a:	4604      	mov	r4, r0
        func("reboot/reboot_cnt", reboot_cnt_str);
   1491c:	4903      	ldr	r1, [pc, #12]	; (1492c <reboot_conf_export+0x1c>)
   1491e:	4804      	ldr	r0, [pc, #16]	; (14930 <reboot_conf_export+0x20>)
   14920:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   14922:	4904      	ldr	r1, [pc, #16]	; (14934 <reboot_conf_export+0x24>)
   14924:	4804      	ldr	r0, [pc, #16]	; (14938 <reboot_conf_export+0x28>)
   14926:	47a0      	blx	r4
}
   14928:	2000      	movs	r0, #0
   1492a:	bd10      	pop	{r4, pc}
   1492c:	2000478c 	.word	0x2000478c
   14930:	00026168 	.word	0x00026168
   14934:	2000477c 	.word	0x2000477c
   14938:	0002617c 	.word	0x0002617c

0001493c <reboot_conf_set>:
    if (argc == 1) {
   1493c:	2801      	cmp	r0, #1
   1493e:	d001      	beq.n	14944 <reboot_conf_set+0x8>
    return OS_ENOENT;
   14940:	200a      	movs	r0, #10
}
   14942:	4770      	bx	lr
{
   14944:	b538      	push	{r3, r4, r5, lr}
   14946:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   14948:	680d      	ldr	r5, [r1, #0]
   1494a:	490d      	ldr	r1, [pc, #52]	; (14980 <reboot_conf_set+0x44>)
   1494c:	4628      	mov	r0, r5
   1494e:	f7fb fecf 	bl	106f0 <strcmp>
   14952:	b130      	cbz	r0, 14962 <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   14954:	490b      	ldr	r1, [pc, #44]	; (14984 <reboot_conf_set+0x48>)
   14956:	4628      	mov	r0, r5
   14958:	f7fb feca 	bl	106f0 <strcmp>
   1495c:	b140      	cbz	r0, 14970 <reboot_conf_set+0x34>
    return OS_ENOENT;
   1495e:	200a      	movs	r0, #10
}
   14960:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   14962:	2302      	movs	r3, #2
   14964:	4a08      	ldr	r2, [pc, #32]	; (14988 <reboot_conf_set+0x4c>)
   14966:	2103      	movs	r1, #3
   14968:	4620      	mov	r0, r4
   1496a:	f7fe fa90 	bl	12e8e <conf_value_from_str>
   1496e:	e7f7      	b.n	14960 <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   14970:	2301      	movs	r3, #1
   14972:	4a06      	ldr	r2, [pc, #24]	; (1498c <reboot_conf_set+0x50>)
   14974:	2103      	movs	r1, #3
   14976:	4620      	mov	r0, r4
   14978:	f7fe fa89 	bl	12e8e <conf_value_from_str>
   1497c:	e7f0      	b.n	14960 <reboot_conf_set+0x24>
   1497e:	bf00      	nop
   14980:	0002618c 	.word	0x0002618c
   14984:	00026198 	.word	0x00026198
   14988:	20004788 	.word	0x20004788
   1498c:	20004778 	.word	0x20004778

00014990 <reboot_conf_get>:
    if (argc == 1) {
   14990:	2801      	cmp	r0, #1
   14992:	d11b      	bne.n	149cc <reboot_conf_get+0x3c>
{
   14994:	b510      	push	{r4, lr}
        if (!strcmp(argv[0], "reboot_cnt")) {
   14996:	680c      	ldr	r4, [r1, #0]
   14998:	490d      	ldr	r1, [pc, #52]	; (149d0 <reboot_conf_get+0x40>)
   1499a:	4620      	mov	r0, r4
   1499c:	f7fb fea8 	bl	106f0 <strcmp>
   149a0:	b130      	cbz	r0, 149b0 <reboot_conf_get+0x20>
        } else if (!strcmp(argv[0], "written")) {
   149a2:	490c      	ldr	r1, [pc, #48]	; (149d4 <reboot_conf_get+0x44>)
   149a4:	4620      	mov	r0, r4
   149a6:	f7fb fea3 	bl	106f0 <strcmp>
   149aa:	b140      	cbz	r0, 149be <reboot_conf_get+0x2e>
    return NULL;
   149ac:	2000      	movs	r0, #0
}
   149ae:	bd10      	pop	{r4, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   149b0:	230c      	movs	r3, #12
   149b2:	4a09      	ldr	r2, [pc, #36]	; (149d8 <reboot_conf_get+0x48>)
   149b4:	4909      	ldr	r1, [pc, #36]	; (149dc <reboot_conf_get+0x4c>)
   149b6:	2003      	movs	r0, #3
   149b8:	f7fe face 	bl	12f58 <conf_str_from_value>
   149bc:	e7f7      	b.n	149ae <reboot_conf_get+0x1e>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   149be:	230c      	movs	r3, #12
   149c0:	4a07      	ldr	r2, [pc, #28]	; (149e0 <reboot_conf_get+0x50>)
   149c2:	4908      	ldr	r1, [pc, #32]	; (149e4 <reboot_conf_get+0x54>)
   149c4:	200a      	movs	r0, #10
   149c6:	f7fe fac7 	bl	12f58 <conf_str_from_value>
   149ca:	e7f0      	b.n	149ae <reboot_conf_get+0x1e>
    return NULL;
   149cc:	2000      	movs	r0, #0
}
   149ce:	4770      	bx	lr
   149d0:	0002618c 	.word	0x0002618c
   149d4:	00026198 	.word	0x00026198
   149d8:	2000478c 	.word	0x2000478c
   149dc:	20004788 	.word	0x20004788
   149e0:	2000477c 	.word	0x2000477c
   149e4:	20004778 	.word	0x20004778

000149e8 <log_reboot_write>:
{
   149e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   149ea:	b0d1      	sub	sp, #324	; 0x144
   149ec:	4606      	mov	r6, r0
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   149ee:	2300      	movs	r3, #0
   149f0:	aa46      	add	r2, sp, #280	; 0x118
   149f2:	a94e      	add	r1, sp, #312	; 0x138
   149f4:	4839      	ldr	r0, [pc, #228]	; (14adc <log_reboot_write+0xf4>)
   149f6:	6800      	ldr	r0, [r0, #0]
   149f8:	f7fc fbb6 	bl	11168 <imgr_read_info>
    if (rc != 0) {
   149fc:	4607      	mov	r7, r0
   149fe:	2800      	cmp	r0, #0
   14a00:	d15f      	bne.n	14ac2 <log_reboot_write+0xda>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14a02:	7833      	ldrb	r3, [r6, #0]
    off += snprintf(buf + off, sizeof buf - off,
   14a04:	2b01      	cmp	r3, #1
   14a06:	d00f      	beq.n	14a28 <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14a08:	2b02      	cmp	r3, #2
   14a0a:	d025      	beq.n	14a58 <log_reboot_write+0x70>
   14a0c:	2b03      	cmp	r3, #3
   14a0e:	d025      	beq.n	14a5c <log_reboot_write+0x74>
   14a10:	2b04      	cmp	r3, #4
   14a12:	d025      	beq.n	14a60 <log_reboot_write+0x78>
   14a14:	2b05      	cmp	r3, #5
   14a16:	d025      	beq.n	14a64 <log_reboot_write+0x7c>
   14a18:	2b06      	cmp	r3, #6
   14a1a:	d025      	beq.n	14a68 <log_reboot_write+0x80>
   14a1c:	2b07      	cmp	r3, #7
   14a1e:	d001      	beq.n	14a24 <log_reboot_write+0x3c>
   14a20:	4b2f      	ldr	r3, [pc, #188]	; (14ae0 <log_reboot_write+0xf8>)
   14a22:	e002      	b.n	14a2a <log_reboot_write+0x42>
   14a24:	4b2f      	ldr	r3, [pc, #188]	; (14ae4 <log_reboot_write+0xfc>)
   14a26:	e000      	b.n	14a2a <log_reboot_write+0x42>
    off += snprintf(buf + off, sizeof buf - off,
   14a28:	4b2f      	ldr	r3, [pc, #188]	; (14ae8 <log_reboot_write+0x100>)
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14a2a:	f89d 2138 	ldrb.w	r2, [sp, #312]	; 0x138
                    ver.iv_minor, ver.iv_revision,
   14a2e:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
   14a32:	f8bd 013a 	ldrh.w	r0, [sp, #314]	; 0x13a
    off += snprintf(buf + off, sizeof buf - off,
   14a36:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
   14a38:	9404      	str	r4, [sp, #16]
   14a3a:	9003      	str	r0, [sp, #12]
   14a3c:	9102      	str	r1, [sp, #8]
   14a3e:	9201      	str	r2, [sp, #4]
   14a40:	4a2a      	ldr	r2, [pc, #168]	; (14aec <log_reboot_write+0x104>)
   14a42:	8812      	ldrh	r2, [r2, #0]
   14a44:	9200      	str	r2, [sp, #0]
   14a46:	4a2a      	ldr	r2, [pc, #168]	; (14af0 <log_reboot_write+0x108>)
   14a48:	f44f 7180 	mov.w	r1, #256	; 0x100
   14a4c:	a806      	add	r0, sp, #24
   14a4e:	f7fc fa6c 	bl	10f2a <snprintf>
   14a52:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   14a54:	463d      	mov	r5, r7
   14a56:	e017      	b.n	14a88 <log_reboot_write+0xa0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14a58:	4b26      	ldr	r3, [pc, #152]	; (14af4 <log_reboot_write+0x10c>)
   14a5a:	e7e6      	b.n	14a2a <log_reboot_write+0x42>
   14a5c:	4b26      	ldr	r3, [pc, #152]	; (14af8 <log_reboot_write+0x110>)
   14a5e:	e7e4      	b.n	14a2a <log_reboot_write+0x42>
   14a60:	4b26      	ldr	r3, [pc, #152]	; (14afc <log_reboot_write+0x114>)
   14a62:	e7e2      	b.n	14a2a <log_reboot_write+0x42>
   14a64:	4b26      	ldr	r3, [pc, #152]	; (14b00 <log_reboot_write+0x118>)
   14a66:	e7e0      	b.n	14a2a <log_reboot_write+0x42>
   14a68:	4b26      	ldr	r3, [pc, #152]	; (14b04 <log_reboot_write+0x11c>)
   14a6a:	e7de      	b.n	14a2a <log_reboot_write+0x42>
                        (unsigned int)hash[i]);
   14a6c:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   14a70:	446b      	add	r3, sp
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   14a72:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   14a76:	4a24      	ldr	r2, [pc, #144]	; (14b08 <log_reboot_write+0x120>)
   14a78:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14a7c:	a806      	add	r0, sp, #24
   14a7e:	4420      	add	r0, r4
   14a80:	f7fc fa53 	bl	10f2a <snprintf>
   14a84:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   14a86:	3501      	adds	r5, #1
   14a88:	2d1f      	cmp	r5, #31
   14a8a:	d9ef      	bls.n	14a6c <log_reboot_write+0x84>
    if (info->file != NULL) {
   14a8c:	6873      	ldr	r3, [r6, #4]
   14a8e:	b14b      	cbz	r3, 14aa4 <log_reboot_write+0xbc>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   14a90:	68b2      	ldr	r2, [r6, #8]
   14a92:	9200      	str	r2, [sp, #0]
   14a94:	4a1d      	ldr	r2, [pc, #116]	; (14b0c <log_reboot_write+0x124>)
   14a96:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14a9a:	a806      	add	r0, sp, #24
   14a9c:	4420      	add	r0, r4
   14a9e:	f7fc fa44 	bl	10f2a <snprintf>
   14aa2:	4404      	add	r4, r0
    if (info->pc != 0) {
   14aa4:	68f3      	ldr	r3, [r6, #12]
   14aa6:	b97b      	cbnz	r3, 14ac8 <log_reboot_write+0xe0>
    if (off > sizeof buf) {
   14aa8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   14aac:	d901      	bls.n	14ab2 <log_reboot_write+0xca>
        off = sizeof buf;
   14aae:	f44f 7480 	mov.w	r4, #256	; 0x100
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   14ab2:	b2a4      	uxth	r4, r4
   14ab4:	9400      	str	r4, [sp, #0]
   14ab6:	ab06      	add	r3, sp, #24
   14ab8:	2200      	movs	r2, #0
   14aba:	2104      	movs	r1, #4
   14abc:	2006      	movs	r0, #6
   14abe:	f00d fe9f 	bl	22800 <modlog_append>
}
   14ac2:	4638      	mov	r0, r7
   14ac4:	b051      	add	sp, #324	; 0x144
   14ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   14ac8:	4a11      	ldr	r2, [pc, #68]	; (14b10 <log_reboot_write+0x128>)
   14aca:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14ace:	a806      	add	r0, sp, #24
   14ad0:	4420      	add	r0, r4
   14ad2:	f7fc fa2a 	bl	10f2a <snprintf>
   14ad6:	4404      	add	r4, r0
   14ad8:	e7e6      	b.n	14aa8 <log_reboot_write+0xc0>
   14ada:	bf00      	nop
   14adc:	20004bd0 	.word	0x20004bd0
   14ae0:	000261dc 	.word	0x000261dc
   14ae4:	000261e4 	.word	0x000261e4
   14ae8:	000261a0 	.word	0x000261a0
   14aec:	20004788 	.word	0x20004788
   14af0:	000261f4 	.word	0x000261f4
   14af4:	000261b4 	.word	0x000261b4
   14af8:	000261c0 	.word	0x000261c0
   14afc:	000261c8 	.word	0x000261c8
   14b00:	000261d0 	.word	0x000261d0
   14b04:	000261a8 	.word	0x000261a8
   14b08:	0002621c 	.word	0x0002621c
   14b0c:	00026224 	.word	0x00026224
   14b10:	00026230 	.word	0x00026230

00014b14 <log_reboot_init_console>:
{
   14b14:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   14b16:	f7ff fd6f 	bl	145f8 <log_console_get>
   14b1a:	4601      	mov	r1, r0
   14b1c:	2300      	movs	r3, #0
   14b1e:	461a      	mov	r2, r3
   14b20:	2006      	movs	r0, #6
   14b22:	f00d fe53 	bl	227cc <modlog_register>
}
   14b26:	bd08      	pop	{r3, pc}

00014b28 <log_reboot>:
{
   14b28:	b510      	push	{r4, lr}
    if (log_reboot_written) {
   14b2a:	4b0a      	ldr	r3, [pc, #40]	; (14b54 <log_reboot+0x2c>)
   14b2c:	f993 3000 	ldrsb.w	r3, [r3]
   14b30:	b113      	cbz	r3, 14b38 <log_reboot+0x10>
        return 0;
   14b32:	2400      	movs	r4, #0
}
   14b34:	4620      	mov	r0, r4
   14b36:	bd10      	pop	{r4, pc}
    rc = log_reboot_write(info);
   14b38:	f7ff ff56 	bl	149e8 <log_reboot_write>
    if (rc != 0) {
   14b3c:	4604      	mov	r4, r0
   14b3e:	2800      	cmp	r0, #0
   14b40:	d1f8      	bne.n	14b34 <log_reboot+0xc>
    log_reboot_written = 1;
   14b42:	4b04      	ldr	r3, [pc, #16]	; (14b54 <log_reboot+0x2c>)
   14b44:	2201      	movs	r2, #1
   14b46:	701a      	strb	r2, [r3, #0]
    conf_save_one("reboot/written", "1");
   14b48:	4903      	ldr	r1, [pc, #12]	; (14b58 <log_reboot+0x30>)
   14b4a:	4804      	ldr	r0, [pc, #16]	; (14b5c <log_reboot+0x34>)
   14b4c:	f7fe fbb4 	bl	132b8 <conf_save_one>
    return 0;
   14b50:	e7f0      	b.n	14b34 <log_reboot+0xc>
   14b52:	bf00      	nop
   14b54:	20004778 	.word	0x20004778
   14b58:	0002623c 	.word	0x0002623c
   14b5c:	0002617c 	.word	0x0002617c

00014b60 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   14b60:	b510      	push	{r4, lr}
   14b62:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14b64:	4b10      	ldr	r3, [pc, #64]	; (14ba8 <log_reboot_pkg_init+0x48>)
   14b66:	781b      	ldrb	r3, [r3, #0]
   14b68:	b1c3      	cbz	r3, 14b9c <log_reboot_pkg_init+0x3c>

    rc = conf_register(&reboot_conf_handler);
   14b6a:	4810      	ldr	r0, [pc, #64]	; (14bac <log_reboot_pkg_init+0x4c>)
   14b6c:	f7fe f94a 	bl	12e04 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14b70:	b138      	cbz	r0, 14b82 <log_reboot_pkg_init+0x22>
   14b72:	2000      	movs	r0, #0
   14b74:	9000      	str	r0, [sp, #0]
   14b76:	4b0e      	ldr	r3, [pc, #56]	; (14bb0 <log_reboot_pkg_init+0x50>)
   14b78:	681c      	ldr	r4, [r3, #0]
   14b7a:	4603      	mov	r3, r0
   14b7c:	4602      	mov	r2, r0
   14b7e:	4601      	mov	r1, r0
   14b80:	47a0      	blx	r4
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   14b82:	f7ff ffc7 	bl	14b14 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14b86:	b138      	cbz	r0, 14b98 <log_reboot_pkg_init+0x38>
   14b88:	2000      	movs	r0, #0
   14b8a:	9000      	str	r0, [sp, #0]
   14b8c:	4b08      	ldr	r3, [pc, #32]	; (14bb0 <log_reboot_pkg_init+0x50>)
   14b8e:	681c      	ldr	r4, [r3, #0]
   14b90:	4603      	mov	r3, r0
   14b92:	4602      	mov	r2, r0
   14b94:	4601      	mov	r1, r0
   14b96:	47a0      	blx	r4
#endif
}
   14b98:	b002      	add	sp, #8
   14b9a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   14b9c:	461a      	mov	r2, r3
   14b9e:	4619      	mov	r1, r3
   14ba0:	4618      	mov	r0, r3
   14ba2:	f7f4 fb0f 	bl	91c4 <__assert_func>
   14ba6:	bf00      	nop
   14ba8:	20004bb0 	.word	0x20004bb0
   14bac:	20000734 	.word	0x20000734
   14bb0:	20000768 	.word	0x20000768

00014bb4 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
   14bb4:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
   14bb6:	4b09      	ldr	r3, [pc, #36]	; (14bdc <get_prompt+0x28>)
   14bb8:	681b      	ldr	r3, [r3, #0]
   14bba:	b113      	cbz	r3, 14bc2 <get_prompt+0xe>

        str = app_prompt_handler();
   14bbc:	4798      	blx	r3
        if (str) {
   14bbe:	b100      	cbz	r0, 14bc2 <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
   14bc0:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
   14bc2:	4b07      	ldr	r3, [pc, #28]	; (14be0 <get_prompt+0x2c>)
   14bc4:	681b      	ldr	r3, [r3, #0]
   14bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14bca:	d003      	beq.n	14bd4 <get_prompt+0x20>
        return shell_modules[default_module].name;
   14bcc:	4a05      	ldr	r2, [pc, #20]	; (14be4 <get_prompt+0x30>)
   14bce:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   14bd2:	e7f5      	b.n	14bc0 <get_prompt+0xc>
    return prompt;
   14bd4:	4b04      	ldr	r3, [pc, #16]	; (14be8 <get_prompt+0x34>)
   14bd6:	6818      	ldr	r0, [r3, #0]
   14bd8:	e7f2      	b.n	14bc0 <get_prompt+0xc>
   14bda:	bf00      	nop
   14bdc:	200047a8 	.word	0x200047a8
   14be0:	2000074c 	.word	0x2000074c
   14be4:	20004b30 	.word	0x20004b30
   14be8:	20004b08 	.word	0x20004b08

00014bec <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   14bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14bee:	4606      	mov	r6, r0
   14bf0:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   14bf2:	4914      	ldr	r1, [pc, #80]	; (14c44 <print_module_commands+0x58>)
   14bf4:	4628      	mov	r0, r5
   14bf6:	f7fd ff73 	bl	12ae0 <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14bfa:	2400      	movs	r4, #0
   14bfc:	e004      	b.n	14c08 <print_module_commands+0x1c>
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
   14bfe:	4912      	ldr	r1, [pc, #72]	; (14c48 <print_module_commands+0x5c>)
   14c00:	4628      	mov	r0, r5
   14c02:	f7fd ff6d 	bl	12ae0 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14c06:	3401      	adds	r4, #1
   14c08:	4b10      	ldr	r3, [pc, #64]	; (14c4c <print_module_commands+0x60>)
   14c0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   14c0e:	685b      	ldr	r3, [r3, #4]
   14c10:	0127      	lsls	r7, r4, #4
   14c12:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   14c16:	689a      	ldr	r2, [r3, #8]
   14c18:	b19a      	cbz	r2, 14c42 <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   14c1a:	490d      	ldr	r1, [pc, #52]	; (14c50 <print_module_commands+0x64>)
   14c1c:	4628      	mov	r0, r5
   14c1e:	f7fd ff5f 	bl	12ae0 <streamer_printf>
        if (shell_module->commands[i].help &&
   14c22:	4b0a      	ldr	r3, [pc, #40]	; (14c4c <print_module_commands+0x60>)
   14c24:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   14c28:	685b      	ldr	r3, [r3, #4]
   14c2a:	443b      	add	r3, r7
   14c2c:	68db      	ldr	r3, [r3, #12]
   14c2e:	2b00      	cmp	r3, #0
   14c30:	d0e5      	beq.n	14bfe <print_module_commands+0x12>
            shell_module->commands[i].help->summary) {
   14c32:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   14c34:	2a00      	cmp	r2, #0
   14c36:	d0e2      	beq.n	14bfe <print_module_commands+0x12>
            streamer_printf(streamer, "%s",
   14c38:	4906      	ldr	r1, [pc, #24]	; (14c54 <print_module_commands+0x68>)
   14c3a:	4628      	mov	r0, r5
   14c3c:	f7fd ff50 	bl	12ae0 <streamer_printf>
   14c40:	e7dd      	b.n	14bfe <print_module_commands+0x12>
    }
}
   14c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c44:	00026248 	.word	0x00026248
   14c48:	00026304 	.word	0x00026304
   14c4c:	20004b30 	.word	0x20004b30
   14c50:	00026250 	.word	0x00026250
   14c54:	00025750 	.word	0x00025750

00014c58 <print_modules>:
{
   14c58:	b538      	push	{r3, r4, r5, lr}
   14c5a:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   14c5c:	2400      	movs	r4, #0
   14c5e:	e007      	b.n	14c70 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   14c60:	4b06      	ldr	r3, [pc, #24]	; (14c7c <print_modules+0x24>)
   14c62:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   14c66:	4906      	ldr	r1, [pc, #24]	; (14c80 <print_modules+0x28>)
   14c68:	4628      	mov	r0, r5
   14c6a:	f7fd ff39 	bl	12ae0 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   14c6e:	3401      	adds	r4, #1
   14c70:	4b04      	ldr	r3, [pc, #16]	; (14c84 <print_modules+0x2c>)
   14c72:	681b      	ldr	r3, [r3, #0]
   14c74:	429c      	cmp	r4, r3
   14c76:	d3f3      	bcc.n	14c60 <print_modules+0x8>
}
   14c78:	bd38      	pop	{r3, r4, r5, pc}
   14c7a:	bf00      	nop
   14c7c:	20004b30 	.word	0x20004b30
   14c80:	00025db0 	.word	0x00025db0
   14c84:	20004b04 	.word	0x20004b04

00014c88 <print_command_params>:
{
   14c88:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   14c8a:	4b0e      	ldr	r3, [pc, #56]	; (14cc4 <print_command_params+0x3c>)
   14c8c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   14c90:	685d      	ldr	r5, [r3, #4]
   14c92:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   14c96:	68eb      	ldr	r3, [r5, #12]
   14c98:	b19b      	cbz	r3, 14cc2 <print_command_params+0x3a>
   14c9a:	4616      	mov	r6, r2
   14c9c:	689b      	ldr	r3, [r3, #8]
   14c9e:	b183      	cbz	r3, 14cc2 <print_command_params+0x3a>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   14ca0:	2400      	movs	r4, #0
   14ca2:	e006      	b.n	14cb2 <print_command_params+0x2a>
		streamer_printf(streamer, "%-30s%s\n",
   14ca4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   14ca8:	4907      	ldr	r1, [pc, #28]	; (14cc8 <print_command_params+0x40>)
   14caa:	4630      	mov	r0, r6
   14cac:	f7fd ff18 	bl	12ae0 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   14cb0:	3401      	adds	r4, #1
   14cb2:	68eb      	ldr	r3, [r5, #12]
   14cb4:	689b      	ldr	r3, [r3, #8]
   14cb6:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
   14cba:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   14cbe:	2a00      	cmp	r2, #0
   14cc0:	d1f0      	bne.n	14ca4 <print_command_params+0x1c>
}
   14cc2:	bd70      	pop	{r4, r5, r6, pc}
   14cc4:	20004b30 	.word	0x20004b30
   14cc8:	00026258 	.word	0x00026258

00014ccc <get_destination_module>:
{
   14ccc:	b570      	push	{r4, r5, r6, lr}
   14cce:	4606      	mov	r6, r0
   14cd0:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   14cd2:	2400      	movs	r4, #0
   14cd4:	e007      	b.n	14ce6 <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
   14cd6:	4b0e      	ldr	r3, [pc, #56]	; (14d10 <get_destination_module+0x44>)
   14cd8:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   14cdc:	4630      	mov	r0, r6
   14cde:	f7fb fd07 	bl	106f0 <strcmp>
   14ce2:	b190      	cbz	r0, 14d0a <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
   14ce4:	3401      	adds	r4, #1
   14ce6:	4b0b      	ldr	r3, [pc, #44]	; (14d14 <get_destination_module+0x48>)
   14ce8:	681b      	ldr	r3, [r3, #0]
   14cea:	429c      	cmp	r4, r3
   14cec:	d20b      	bcs.n	14d06 <get_destination_module+0x3a>
        if (len < 0) {
   14cee:	2d00      	cmp	r5, #0
   14cf0:	dbf1      	blt.n	14cd6 <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   14cf2:	462a      	mov	r2, r5
   14cf4:	4b06      	ldr	r3, [pc, #24]	; (14d10 <get_destination_module+0x44>)
   14cf6:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   14cfa:	4630      	mov	r0, r6
   14cfc:	f00c fbe5 	bl	214ca <strncmp>
   14d00:	2800      	cmp	r0, #0
   14d02:	d1ef      	bne.n	14ce4 <get_destination_module+0x18>
   14d04:	e001      	b.n	14d0a <get_destination_module+0x3e>
    return -1;
   14d06:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   14d0a:	4620      	mov	r0, r4
   14d0c:	bd70      	pop	{r4, r5, r6, pc}
   14d0e:	bf00      	nop
   14d10:	20004b30 	.word	0x20004b30
   14d14:	20004b04 	.word	0x20004b04

00014d18 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   14d18:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   14d1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d1e:	f7ff ffd5 	bl	14ccc <get_destination_module>

    if (module == -1) {
   14d22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14d26:	d002      	beq.n	14d2e <set_default_module+0x16>
        return -1;
    }

    default_module = module;
   14d28:	4b01      	ldr	r3, [pc, #4]	; (14d30 <set_default_module+0x18>)
   14d2a:	6018      	str	r0, [r3, #0]

    return 0;
   14d2c:	2000      	movs	r0, #0
}
   14d2e:	bd08      	pop	{r3, pc}
   14d30:	2000074c 	.word	0x2000074c

00014d34 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
   14d34:	b508      	push	{r3, lr}
    if (argc == 1) {
   14d36:	2901      	cmp	r1, #1
   14d38:	d105      	bne.n	14d46 <select_module+0x12>
        default_module = -1;
   14d3a:	4b05      	ldr	r3, [pc, #20]	; (14d50 <select_module+0x1c>)
   14d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d40:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   14d42:	2000      	movs	r0, #0
   14d44:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   14d46:	6850      	ldr	r0, [r2, #4]
   14d48:	f7ff ffe6 	bl	14d18 <set_default_module>
   14d4c:	e7f9      	b.n	14d42 <select_module+0xe>
   14d4e:	bf00      	nop
   14d50:	2000074c 	.word	0x2000074c

00014d54 <get_command_and_module>:
{
   14d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d56:	4617      	mov	r7, r2
    *module = -1;
   14d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d5c:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
   14d5e:	6806      	ldr	r6, [r0, #0]
   14d60:	b156      	cbz	r6, 14d78 <get_command_and_module+0x24>
   14d62:	4604      	mov	r4, r0
   14d64:	460d      	mov	r5, r1
    if (default_module == -1) {
   14d66:	4b15      	ldr	r3, [pc, #84]	; (14dbc <get_command_and_module+0x68>)
   14d68:	681b      	ldr	r3, [r3, #0]
   14d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14d6e:	d008      	beq.n	14d82 <get_command_and_module+0x2e>
    *module = default_module;
   14d70:	600b      	str	r3, [r1, #0]
    return argv[0];
   14d72:	6806      	ldr	r6, [r0, #0]
}
   14d74:	4630      	mov	r0, r6
   14d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
   14d78:	4911      	ldr	r1, [pc, #68]	; (14dc0 <get_command_and_module+0x6c>)
   14d7a:	4610      	mov	r0, r2
   14d7c:	f7fd feb0 	bl	12ae0 <streamer_printf>
        return NULL;
   14d80:	e7f8      	b.n	14d74 <get_command_and_module+0x20>
        if (!argv[1] || argv[1][0] == '\0') {
   14d82:	6843      	ldr	r3, [r0, #4]
   14d84:	b163      	cbz	r3, 14da0 <get_command_and_module+0x4c>
   14d86:	781b      	ldrb	r3, [r3, #0]
   14d88:	b153      	cbz	r3, 14da0 <get_command_and_module+0x4c>
        *module = get_destination_module(argv[0], -1);
   14d8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14d8e:	4630      	mov	r0, r6
   14d90:	f7ff ff9c 	bl	14ccc <get_destination_module>
   14d94:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   14d96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14d9a:	d008      	beq.n	14dae <get_command_and_module+0x5a>
        return argv[1];
   14d9c:	6866      	ldr	r6, [r4, #4]
   14d9e:	e7e9      	b.n	14d74 <get_command_and_module+0x20>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   14da0:	4632      	mov	r2, r6
   14da2:	4908      	ldr	r1, [pc, #32]	; (14dc4 <get_command_and_module+0x70>)
   14da4:	4638      	mov	r0, r7
   14da6:	f7fd fe9b 	bl	12ae0 <streamer_printf>
            return NULL;
   14daa:	2600      	movs	r6, #0
   14dac:	e7e2      	b.n	14d74 <get_command_and_module+0x20>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   14dae:	6822      	ldr	r2, [r4, #0]
   14db0:	4905      	ldr	r1, [pc, #20]	; (14dc8 <get_command_and_module+0x74>)
   14db2:	4638      	mov	r0, r7
   14db4:	f7fd fe94 	bl	12ae0 <streamer_printf>
            return NULL;
   14db8:	2600      	movs	r6, #0
   14dba:	e7db      	b.n	14d74 <get_command_and_module+0x20>
   14dbc:	2000074c 	.word	0x2000074c
   14dc0:	00026264 	.word	0x00026264
   14dc4:	0002627c 	.word	0x0002627c
   14dc8:	00026298 	.word	0x00026298

00014dcc <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
   14dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dce:	b083      	sub	sp, #12
   14dd0:	4616      	mov	r6, r2
    const char *first_string = argv[0];
   14dd2:	680d      	ldr	r5, [r1, #0]
    int module = -1;
   14dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14dd8:	9301      	str	r3, [sp, #4]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
   14dda:	b31d      	cbz	r5, 14e24 <shell_find_cmd+0x58>
   14ddc:	4607      	mov	r7, r0
   14dde:	460c      	mov	r4, r1
   14de0:	782b      	ldrb	r3, [r5, #0]
   14de2:	b1fb      	cbz	r3, 14e24 <shell_find_cmd+0x58>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (!strcmp(first_string, "help")) {
   14de4:	4922      	ldr	r1, [pc, #136]	; (14e70 <shell_find_cmd+0xa4>)
   14de6:	4628      	mov	r0, r5
   14de8:	f7fb fc82 	bl	106f0 <strcmp>
   14dec:	2800      	cmp	r0, #0
   14dee:	d035      	beq.n	14e5c <shell_find_cmd+0x90>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
   14df0:	4920      	ldr	r1, [pc, #128]	; (14e74 <shell_find_cmd+0xa8>)
   14df2:	4628      	mov	r0, r5
   14df4:	f7fb fc7c 	bl	106f0 <strcmp>
   14df8:	2800      	cmp	r0, #0
   14dfa:	d033      	beq.n	14e64 <shell_find_cmd+0x98>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (default_module == -1)) {
   14dfc:	2f01      	cmp	r7, #1
   14dfe:	d104      	bne.n	14e0a <shell_find_cmd+0x3e>
   14e00:	4b1d      	ldr	r3, [pc, #116]	; (14e78 <shell_find_cmd+0xac>)
   14e02:	681b      	ldr	r3, [r3, #0]
   14e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14e08:	d012      	beq.n	14e30 <shell_find_cmd+0x64>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
   14e0a:	4632      	mov	r2, r6
   14e0c:	a901      	add	r1, sp, #4
   14e0e:	4620      	mov	r0, r4
   14e10:	f7ff ffa0 	bl	14d54 <get_command_and_module>
   14e14:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
   14e16:	9f01      	ldr	r7, [sp, #4]
   14e18:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   14e1c:	d024      	beq.n	14e68 <shell_find_cmd+0x9c>
   14e1e:	b328      	cbz	r0, 14e6c <shell_find_cmd+0xa0>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14e20:	2500      	movs	r5, #0
   14e22:	e00c      	b.n	14e3e <shell_find_cmd+0x72>
        streamer_printf(streamer, "Illegal parameter\n");
   14e24:	4915      	ldr	r1, [pc, #84]	; (14e7c <shell_find_cmd+0xb0>)
   14e26:	4630      	mov	r0, r6
   14e28:	f7fd fe5a 	bl	12ae0 <streamer_printf>
        return NULL;
   14e2c:	2100      	movs	r1, #0
   14e2e:	e016      	b.n	14e5e <shell_find_cmd+0x92>
        streamer_printf(streamer, "Missing parameter\n");
   14e30:	4913      	ldr	r1, [pc, #76]	; (14e80 <shell_find_cmd+0xb4>)
   14e32:	4630      	mov	r0, r6
   14e34:	f7fd fe54 	bl	12ae0 <streamer_printf>
        return NULL;
   14e38:	2100      	movs	r1, #0
   14e3a:	e010      	b.n	14e5e <shell_find_cmd+0x92>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14e3c:	3501      	adds	r5, #1
   14e3e:	4b11      	ldr	r3, [pc, #68]	; (14e84 <shell_find_cmd+0xb8>)
   14e40:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   14e44:	685c      	ldr	r4, [r3, #4]
   14e46:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   14e4a:	68a1      	ldr	r1, [r4, #8]
   14e4c:	b139      	cbz	r1, 14e5e <shell_find_cmd+0x92>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   14e4e:	4630      	mov	r0, r6
   14e50:	f7fb fc4e 	bl	106f0 <strcmp>
   14e54:	2800      	cmp	r0, #0
   14e56:	d1f1      	bne.n	14e3c <shell_find_cmd+0x70>
            return &shell_module->commands[i];
   14e58:	4621      	mov	r1, r4
   14e5a:	e000      	b.n	14e5e <shell_find_cmd+0x92>
        return &shell_cmd_help;
   14e5c:	490a      	ldr	r1, [pc, #40]	; (14e88 <shell_find_cmd+0xbc>)
        }
    }

    return NULL;
}
   14e5e:	4608      	mov	r0, r1
   14e60:	b003      	add	sp, #12
   14e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &shell_cmd_select_module;
   14e64:	4909      	ldr	r1, [pc, #36]	; (14e8c <shell_find_cmd+0xc0>)
   14e66:	e7fa      	b.n	14e5e <shell_find_cmd+0x92>
        return NULL;
   14e68:	2100      	movs	r1, #0
   14e6a:	e7f8      	b.n	14e5e <shell_find_cmd+0x92>
   14e6c:	4601      	mov	r1, r0
   14e6e:	e7f6      	b.n	14e5e <shell_find_cmd+0x92>
   14e70:	000262c0 	.word	0x000262c0
   14e74:	000262c8 	.word	0x000262c8
   14e78:	2000074c 	.word	0x2000074c
   14e7c:	000262ac 	.word	0x000262ac
   14e80:	000262d0 	.word	0x000262d0
   14e84:	20004b30 	.word	0x20004b30
   14e88:	00026444 	.word	0x00026444
   14e8c:	00026454 	.word	0x00026454

00014e90 <show_cmd_help>:
{
   14e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14e94:	b083      	sub	sp, #12
   14e96:	4681      	mov	r9, r0
   14e98:	4688      	mov	r8, r1
    int module = -1;
   14e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e9e:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
   14ea0:	460a      	mov	r2, r1
   14ea2:	a901      	add	r1, sp, #4
   14ea4:	f7ff ff56 	bl	14d54 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
   14ea8:	9f01      	ldr	r7, [sp, #4]
   14eaa:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   14eae:	d04d      	beq.n	14f4c <show_cmd_help+0xbc>
   14eb0:	4606      	mov	r6, r0
   14eb2:	2800      	cmp	r0, #0
   14eb4:	d04a      	beq.n	14f4c <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14eb6:	2500      	movs	r5, #0
   14eb8:	e009      	b.n	14ece <show_cmd_help+0x3e>
                               !cmd->help->usage &&
   14eba:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
   14ebc:	b9d9      	cbnz	r1, 14ef6 <show_cmd_help+0x66>
                               !cmd->help->params)) {
   14ebe:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
   14ec0:	b9cb      	cbnz	r3, 14ef6 <show_cmd_help+0x66>
                streamer_printf(streamer, "(no help available)\n");
   14ec2:	4924      	ldr	r1, [pc, #144]	; (14f54 <show_cmd_help+0xc4>)
   14ec4:	4640      	mov	r0, r8
   14ec6:	f7fd fe0b 	bl	12ae0 <streamer_printf>
                return 0;
   14eca:	e03f      	b.n	14f4c <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14ecc:	3501      	adds	r5, #1
   14ece:	4b22      	ldr	r3, [pc, #136]	; (14f58 <show_cmd_help+0xc8>)
   14ed0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   14ed4:	685c      	ldr	r4, [r3, #4]
   14ed6:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   14eda:	68a1      	ldr	r1, [r4, #8]
   14edc:	2900      	cmp	r1, #0
   14ede:	d02f      	beq.n	14f40 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
   14ee0:	4630      	mov	r0, r6
   14ee2:	f7fb fc05 	bl	106f0 <strcmp>
   14ee6:	2800      	cmp	r0, #0
   14ee8:	d1f0      	bne.n	14ecc <show_cmd_help+0x3c>
            if (!cmd->help || (!cmd->help->summary &&
   14eea:	68e3      	ldr	r3, [r4, #12]
   14eec:	2b00      	cmp	r3, #0
   14eee:	d0e8      	beq.n	14ec2 <show_cmd_help+0x32>
   14ef0:	681a      	ldr	r2, [r3, #0]
   14ef2:	2a00      	cmp	r2, #0
   14ef4:	d0e1      	beq.n	14eba <show_cmd_help+0x2a>
            if (cmd->help->summary) {
   14ef6:	b14a      	cbz	r2, 14f0c <show_cmd_help+0x7c>
                streamer_printf(streamer, "Summary:\n");
   14ef8:	4918      	ldr	r1, [pc, #96]	; (14f5c <show_cmd_help+0xcc>)
   14efa:	4640      	mov	r0, r8
   14efc:	f7fd fdf0 	bl	12ae0 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   14f00:	68e3      	ldr	r3, [r4, #12]
   14f02:	681a      	ldr	r2, [r3, #0]
   14f04:	4916      	ldr	r1, [pc, #88]	; (14f60 <show_cmd_help+0xd0>)
   14f06:	4640      	mov	r0, r8
   14f08:	f7fd fdea 	bl	12ae0 <streamer_printf>
            if (cmd->help->usage) {
   14f0c:	68e3      	ldr	r3, [r4, #12]
   14f0e:	685b      	ldr	r3, [r3, #4]
   14f10:	b14b      	cbz	r3, 14f26 <show_cmd_help+0x96>
                streamer_printf(streamer, "Usage:\n");
   14f12:	4914      	ldr	r1, [pc, #80]	; (14f64 <show_cmd_help+0xd4>)
   14f14:	4640      	mov	r0, r8
   14f16:	f7fd fde3 	bl	12ae0 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   14f1a:	68e3      	ldr	r3, [r4, #12]
   14f1c:	685a      	ldr	r2, [r3, #4]
   14f1e:	4910      	ldr	r1, [pc, #64]	; (14f60 <show_cmd_help+0xd0>)
   14f20:	4640      	mov	r0, r8
   14f22:	f7fd fddd 	bl	12ae0 <streamer_printf>
            if (cmd->help->params) {
   14f26:	68e3      	ldr	r3, [r4, #12]
   14f28:	689b      	ldr	r3, [r3, #8]
   14f2a:	b17b      	cbz	r3, 14f4c <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
   14f2c:	490e      	ldr	r1, [pc, #56]	; (14f68 <show_cmd_help+0xd8>)
   14f2e:	4640      	mov	r0, r8
   14f30:	f7fd fdd6 	bl	12ae0 <streamer_printf>
                print_command_params(module, i, streamer);
   14f34:	4642      	mov	r2, r8
   14f36:	4629      	mov	r1, r5
   14f38:	9801      	ldr	r0, [sp, #4]
   14f3a:	f7ff fea5 	bl	14c88 <print_command_params>
            return 0;
   14f3e:	e005      	b.n	14f4c <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   14f40:	f8d9 2000 	ldr.w	r2, [r9]
   14f44:	4909      	ldr	r1, [pc, #36]	; (14f6c <show_cmd_help+0xdc>)
   14f46:	4640      	mov	r0, r8
   14f48:	f7fd fdca 	bl	12ae0 <streamer_printf>
}
   14f4c:	2000      	movs	r0, #0
   14f4e:	b003      	add	sp, #12
   14f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14f54:	000262e4 	.word	0x000262e4
   14f58:	20004b30 	.word	0x20004b30
   14f5c:	000262fc 	.word	0x000262fc
   14f60:	00025db0 	.word	0x00025db0
   14f64:	00026308 	.word	0x00026308
   14f68:	00026310 	.word	0x00026310
   14f6c:	0002627c 	.word	0x0002627c

00014f70 <show_help>:
{
   14f70:	b538      	push	{r3, r4, r5, lr}
   14f72:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   14f74:	2902      	cmp	r1, #2
   14f76:	dc1a      	bgt.n	14fae <show_help+0x3e>
   14f78:	4b1b      	ldr	r3, [pc, #108]	; (14fe8 <show_help+0x78>)
   14f7a:	6818      	ldr	r0, [r3, #0]
   14f7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14f80:	d001      	beq.n	14f86 <show_help+0x16>
   14f82:	2902      	cmp	r1, #2
   14f84:	d013      	beq.n	14fae <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   14f86:	2902      	cmp	r1, #2
   14f88:	d016      	beq.n	14fb8 <show_help+0x48>
   14f8a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14f8e:	d001      	beq.n	14f94 <show_help+0x24>
   14f90:	2901      	cmp	r1, #1
   14f92:	d011      	beq.n	14fb8 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
   14f94:	4915      	ldr	r1, [pc, #84]	; (14fec <show_help+0x7c>)
   14f96:	4620      	mov	r0, r4
   14f98:	f7fd fda2 	bl	12ae0 <streamer_printf>
        print_modules(streamer);
   14f9c:	4620      	mov	r0, r4
   14f9e:	f7ff fe5b 	bl	14c58 <print_modules>
        streamer_printf(streamer,
   14fa2:	4913      	ldr	r1, [pc, #76]	; (14ff0 <show_help+0x80>)
   14fa4:	4620      	mov	r0, r4
   14fa6:	f7fd fd9b 	bl	12ae0 <streamer_printf>
    return 0;
   14faa:	2000      	movs	r0, #0
   14fac:	e014      	b.n	14fd8 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
   14fae:	4621      	mov	r1, r4
   14fb0:	1d10      	adds	r0, r2, #4
   14fb2:	f7ff ff6d 	bl	14e90 <show_cmd_help>
   14fb6:	e00f      	b.n	14fd8 <show_help+0x68>
        if (default_module == -1) {
   14fb8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14fbc:	d108      	bne.n	14fd0 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   14fbe:	6855      	ldr	r5, [r2, #4]
   14fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14fc4:	4628      	mov	r0, r5
   14fc6:	f7ff fe81 	bl	14ccc <get_destination_module>
            if (module == -1) {
   14fca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14fce:	d004      	beq.n	14fda <show_help+0x6a>
        print_module_commands(module, streamer);
   14fd0:	4621      	mov	r1, r4
   14fd2:	f7ff fe0b 	bl	14bec <print_module_commands>
    return 0;
   14fd6:	2000      	movs	r0, #0
}
   14fd8:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   14fda:	462a      	mov	r2, r5
   14fdc:	4905      	ldr	r1, [pc, #20]	; (14ff4 <show_help+0x84>)
   14fde:	4620      	mov	r0, r4
   14fe0:	f7fd fd7e 	bl	12ae0 <streamer_printf>
                return 0;
   14fe4:	2000      	movs	r0, #0
   14fe6:	e7f7      	b.n	14fd8 <show_help+0x68>
   14fe8:	2000074c 	.word	0x2000074c
   14fec:	00026320 	.word	0x00026320
   14ff0:	00026334 	.word	0x00026334
   14ff4:	00026298 	.word	0x00026298

00014ff8 <print_prompt>:
{
   14ff8:	b508      	push	{r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   14ffa:	f7ff fddb 	bl	14bb4 <get_prompt>
   14ffe:	4601      	mov	r1, r0
   15000:	4a02      	ldr	r2, [pc, #8]	; (1500c <print_prompt+0x14>)
   15002:	4803      	ldr	r0, [pc, #12]	; (15010 <print_prompt+0x18>)
   15004:	f7fe ff06 	bl	13e14 <console_printf>
}
   15008:	bd08      	pop	{r3, pc}
   1500a:	bf00      	nop
   1500c:	00026368 	.word	0x00026368
   15010:	0002636c 	.word	0x0002636c

00015014 <print_prompt_if_console>:
{
   15014:	b510      	push	{r4, lr}
   15016:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   15018:	f002 f8fe 	bl	17218 <streamer_console_get>
   1501c:	4284      	cmp	r4, r0
   1501e:	d000      	beq.n	15022 <print_prompt_if_console+0xe>
}
   15020:	bd10      	pop	{r4, pc}
        print_prompt();
   15022:	f7ff ffe9 	bl	14ff8 <print_prompt>
}
   15026:	e7fb      	b.n	15020 <print_prompt_if_console+0xc>

00015028 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   15028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1502c:	b083      	sub	sp, #12
   1502e:	4681      	mov	r9, r0
   15030:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   15032:	4615      	mov	r5, r2
   15034:	b132      	cbz	r2, 15044 <complete_module+0x1c>
   15036:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   15038:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   1503c:	f04f 0800 	mov.w	r8, #0
        print_prompt();
        console_printf("%s", line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   15040:	4646      	mov	r6, r8
   15042:	e02b      	b.n	1509c <complete_module+0x74>
        console_printf("\n");
   15044:	4837      	ldr	r0, [pc, #220]	; (15124 <complete_module+0xfc>)
   15046:	f7fe fee5 	bl	13e14 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   1504a:	e006      	b.n	1505a <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   1504c:	4b36      	ldr	r3, [pc, #216]	; (15128 <complete_module+0x100>)
   1504e:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   15052:	4836      	ldr	r0, [pc, #216]	; (1512c <complete_module+0x104>)
   15054:	f7fe fede 	bl	13e14 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   15058:	3501      	adds	r5, #1
   1505a:	4b35      	ldr	r3, [pc, #212]	; (15130 <complete_module+0x108>)
   1505c:	681b      	ldr	r3, [r3, #0]
   1505e:	429d      	cmp	r5, r3
   15060:	d3f4      	bcc.n	1504c <complete_module+0x24>
        print_prompt();
   15062:	f7ff ffc9 	bl	14ff8 <print_prompt>
        console_printf("%s", line);
   15066:	4649      	mov	r1, r9
   15068:	4832      	ldr	r0, [pc, #200]	; (15134 <complete_module+0x10c>)
   1506a:	f7fe fed3 	bl	13e14 <console_printf>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   1506e:	b003      	add	sp, #12
   15070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_printf("\n");
   15074:	482b      	ldr	r0, [pc, #172]	; (15124 <complete_module+0xfc>)
   15076:	f7fe fecd 	bl	13e14 <console_printf>
            console_printf("%s\n", first_match);
   1507a:	4641      	mov	r1, r8
   1507c:	482b      	ldr	r0, [pc, #172]	; (1512c <complete_module+0x104>)
   1507e:	f7fe fec9 	bl	13e14 <console_printf>
            common_chars = strlen(first_match);
   15082:	4640      	mov	r0, r8
   15084:	f7fb fb40 	bl	10708 <strlen>
   15088:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   1508a:	e01b      	b.n	150c4 <complete_module+0x9c>
        console_printf("%s\n", shell_modules[i].name);
   1508c:	4b26      	ldr	r3, [pc, #152]	; (15128 <complete_module+0x100>)
   1508e:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   15092:	4826      	ldr	r0, [pc, #152]	; (1512c <complete_module+0x104>)
   15094:	f7fe febe 	bl	13e14 <console_printf>
        common_chars = j;
   15098:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   1509a:	3601      	adds	r6, #1
   1509c:	4b24      	ldr	r3, [pc, #144]	; (15130 <complete_module+0x108>)
   1509e:	681b      	ldr	r3, [r3, #0]
   150a0:	429e      	cmp	r6, r3
   150a2:	d21d      	bcs.n	150e0 <complete_module+0xb8>
        if (strncmp(module_prefix,
   150a4:	4b20      	ldr	r3, [pc, #128]	; (15128 <complete_module+0x100>)
   150a6:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   150aa:	462a      	mov	r2, r5
   150ac:	4659      	mov	r1, fp
   150ae:	9801      	ldr	r0, [sp, #4]
   150b0:	f00c fa0b 	bl	214ca <strncmp>
   150b4:	4604      	mov	r4, r0
   150b6:	2800      	cmp	r0, #0
   150b8:	d1ef      	bne.n	1509a <complete_module+0x72>
        if (!first_match) {
   150ba:	f1b8 0f00 	cmp.w	r8, #0
   150be:	d00d      	beq.n	150dc <complete_module+0xb4>
        if (first_match && (common_chars < 0)) {
   150c0:	2f00      	cmp	r7, #0
   150c2:	dbd7      	blt.n	15074 <complete_module+0x4c>
        for (j = 0; j < common_chars; j++) {
   150c4:	42bc      	cmp	r4, r7
   150c6:	dae1      	bge.n	1508c <complete_module+0x64>
            if (first_match[j] != shell_modules[i].name[j]) {
   150c8:	f818 2004 	ldrb.w	r2, [r8, r4]
   150cc:	4b16      	ldr	r3, [pc, #88]	; (15128 <complete_module+0x100>)
   150ce:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   150d2:	5d1b      	ldrb	r3, [r3, r4]
   150d4:	429a      	cmp	r2, r3
   150d6:	d1d9      	bne.n	1508c <complete_module+0x64>
        for (j = 0; j < common_chars; j++) {
   150d8:	3401      	adds	r4, #1
   150da:	e7f3      	b.n	150c4 <complete_module+0x9c>
            first_match = shell_modules[i].name;
   150dc:	46d8      	mov	r8, fp
   150de:	e7dc      	b.n	1509a <complete_module+0x72>
    if (!first_match) {
   150e0:	f1b8 0f00 	cmp.w	r8, #0
   150e4:	d0c3      	beq.n	1506e <complete_module+0x46>
    if (common_chars >= 0) {
   150e6:	2f00      	cmp	r7, #0
   150e8:	da0e      	bge.n	15108 <complete_module+0xe0>
        common_chars = strlen(first_match);
   150ea:	4640      	mov	r0, r8
   150ec:	f7fb fb0c 	bl	10708 <strlen>
   150f0:	4607      	mov	r7, r0
        space = 1;
   150f2:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   150f4:	42bd      	cmp	r5, r7
   150f6:	da0f      	bge.n	15118 <complete_module+0xf0>
        if (!append_char(line, first_match[i])) {
   150f8:	f818 1005 	ldrb.w	r1, [r8, r5]
   150fc:	4648      	mov	r0, r9
   150fe:	47d0      	blx	sl
   15100:	2800      	cmp	r0, #0
   15102:	d0b4      	beq.n	1506e <complete_module+0x46>
    for (i = module_len; i < common_chars; i++) {
   15104:	3501      	adds	r5, #1
   15106:	e7f5      	b.n	150f4 <complete_module+0xcc>
        print_prompt();
   15108:	f7ff ff76 	bl	14ff8 <print_prompt>
        console_printf("%s", line);
   1510c:	4649      	mov	r1, r9
   1510e:	4809      	ldr	r0, [pc, #36]	; (15134 <complete_module+0x10c>)
   15110:	f7fe fe80 	bl	13e14 <console_printf>
    int common_chars = -1, space = 0;
   15114:	2400      	movs	r4, #0
   15116:	e7ed      	b.n	150f4 <complete_module+0xcc>
    if (space) {
   15118:	2c00      	cmp	r4, #0
   1511a:	d0a8      	beq.n	1506e <complete_module+0x46>
        append_char(line, ' ');
   1511c:	2120      	movs	r1, #32
   1511e:	4648      	mov	r0, r9
   15120:	47d0      	blx	sl
   15122:	e7a4      	b.n	1506e <complete_module+0x46>
   15124:	00026304 	.word	0x00026304
   15128:	20004b30 	.word	0x20004b30
   1512c:	00025db0 	.word	0x00025db0
   15130:	20004b04 	.word	0x20004b04
   15134:	00025750 	.word	0x00025750

00015138 <complete_command>:
{
   15138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1513c:	b083      	sub	sp, #12
   1513e:	9001      	str	r0, [sp, #4]
   15140:	468b      	mov	fp, r1
   15142:	4615      	mov	r5, r2
    commands = shell_modules[module_idx].commands;
   15144:	4a3a      	ldr	r2, [pc, #232]	; (15230 <complete_command+0xf8>)
   15146:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1514a:	6857      	ldr	r7, [r2, #4]
    int i, j, common_chars = -1;
   1514c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   15150:	f04f 0900 	mov.w	r9, #0
    int match_count = 0;
   15154:	46ca      	mov	sl, r9
    int first_match = -1;
   15156:	46b0      	mov	r8, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   15158:	e006      	b.n	15168 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   1515a:	4620      	mov	r0, r4
   1515c:	f7fb fad4 	bl	10708 <strlen>
   15160:	4606      	mov	r6, r0
            first_match = i;
   15162:	46c8      	mov	r8, r9
    for (i = 0; commands[i].sc_cmd; i++) {
   15164:	f109 0901 	add.w	r9, r9, #1
   15168:	eb07 1309 	add.w	r3, r7, r9, lsl #4
   1516c:	689c      	ldr	r4, [r3, #8]
   1516e:	b1ec      	cbz	r4, 151ac <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   15170:	462a      	mov	r2, r5
   15172:	4621      	mov	r1, r4
   15174:	4658      	mov	r0, fp
   15176:	f00c f9a8 	bl	214ca <strncmp>
   1517a:	2800      	cmp	r0, #0
   1517c:	d1f2      	bne.n	15164 <complete_command+0x2c>
        match_count++;
   1517e:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   15182:	f1ba 0f01 	cmp.w	sl, #1
   15186:	d0e8      	beq.n	1515a <complete_command+0x22>
        if (common_chars <= command_len) {
   15188:	42ae      	cmp	r6, r5
   1518a:	ddeb      	ble.n	15164 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   1518c:	462b      	mov	r3, r5
   1518e:	42b3      	cmp	r3, r6
   15190:	da08      	bge.n	151a4 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   15192:	eb07 1208 	add.w	r2, r7, r8, lsl #4
   15196:	6892      	ldr	r2, [r2, #8]
   15198:	5cd1      	ldrb	r1, [r2, r3]
   1519a:	5ce2      	ldrb	r2, [r4, r3]
   1519c:	4291      	cmp	r1, r2
   1519e:	d103      	bne.n	151a8 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   151a0:	3301      	adds	r3, #1
   151a2:	e7f4      	b.n	1518e <complete_command+0x56>
        common_chars = j;
   151a4:	461e      	mov	r6, r3
   151a6:	e7dd      	b.n	15164 <complete_command+0x2c>
   151a8:	461e      	mov	r6, r3
   151aa:	e7db      	b.n	15164 <complete_command+0x2c>
    if (match_count == 0) {
   151ac:	f1ba 0f00 	cmp.w	sl, #0
   151b0:	d03b      	beq.n	1522a <complete_command+0xf2>
    if (common_chars > command_len) {
   151b2:	42ae      	cmp	r6, r5
   151b4:	dd15      	ble.n	151e2 <complete_command+0xaa>
   151b6:	9c01      	ldr	r4, [sp, #4]
   151b8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   151bc:	42b5      	cmp	r5, r6
   151be:	da08      	bge.n	151d2 <complete_command+0x9a>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   151c0:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   151c4:	689b      	ldr	r3, [r3, #8]
   151c6:	5d59      	ldrb	r1, [r3, r5]
   151c8:	4620      	mov	r0, r4
   151ca:	47c8      	blx	r9
   151cc:	b368      	cbz	r0, 1522a <complete_command+0xf2>
        for (i = command_len; i < common_chars; i++) {
   151ce:	3501      	adds	r5, #1
   151d0:	e7f4      	b.n	151bc <complete_command+0x84>
        if (match_count == 1) {
   151d2:	f1ba 0f01 	cmp.w	sl, #1
   151d6:	d128      	bne.n	1522a <complete_command+0xf2>
            append_char(line, ' ');
   151d8:	2120      	movs	r1, #32
   151da:	9801      	ldr	r0, [sp, #4]
   151dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   151de:	4798      	blx	r3
        return;
   151e0:	e023      	b.n	1522a <complete_command+0xf2>
    console_printf("\n");
   151e2:	4814      	ldr	r0, [pc, #80]	; (15234 <complete_command+0xfc>)
   151e4:	f7fe fe16 	bl	13e14 <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   151e8:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   151ec:	6899      	ldr	r1, [r3, #8]
   151ee:	4812      	ldr	r0, [pc, #72]	; (15238 <complete_command+0x100>)
   151f0:	f7fe fe10 	bl	13e14 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   151f4:	f108 0801 	add.w	r8, r8, #1
   151f8:	e001      	b.n	151fe <complete_command+0xc6>
   151fa:	f108 0801 	add.w	r8, r8, #1
   151fe:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   15202:	689c      	ldr	r4, [r3, #8]
   15204:	b15c      	cbz	r4, 1521e <complete_command+0xe6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   15206:	462a      	mov	r2, r5
   15208:	4621      	mov	r1, r4
   1520a:	4658      	mov	r0, fp
   1520c:	f00c f95d 	bl	214ca <strncmp>
   15210:	2800      	cmp	r0, #0
   15212:	d1f2      	bne.n	151fa <complete_command+0xc2>
            console_printf("%s\n", commands[i].sc_cmd);
   15214:	4621      	mov	r1, r4
   15216:	4808      	ldr	r0, [pc, #32]	; (15238 <complete_command+0x100>)
   15218:	f7fe fdfc 	bl	13e14 <console_printf>
   1521c:	e7ed      	b.n	151fa <complete_command+0xc2>
    print_prompt();
   1521e:	f7ff feeb 	bl	14ff8 <print_prompt>
    console_printf("%s", line);
   15222:	9901      	ldr	r1, [sp, #4]
   15224:	4805      	ldr	r0, [pc, #20]	; (1523c <complete_command+0x104>)
   15226:	f7fe fdf5 	bl	13e14 <console_printf>
}
   1522a:	b003      	add	sp, #12
   1522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15230:	20004b30 	.word	0x20004b30
   15234:	00026304 	.word	0x00026304
   15238:	00025db0 	.word	0x00025db0
   1523c:	00025750 	.word	0x00025750

00015240 <get_command_from_module>:
{
   15240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15244:	4680      	mov	r8, r0
   15246:	460d      	mov	r5, r1
   15248:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1524a:	2400      	movs	r4, #0
   1524c:	e000      	b.n	15250 <get_command_from_module+0x10>
   1524e:	3401      	adds	r4, #1
   15250:	4b0c      	ldr	r3, [pc, #48]	; (15284 <get_command_from_module+0x44>)
   15252:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   15256:	685b      	ldr	r3, [r3, #4]
   15258:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1525c:	689f      	ldr	r7, [r3, #8]
   1525e:	b167      	cbz	r7, 1527a <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   15260:	4638      	mov	r0, r7
   15262:	f7fb fa51 	bl	10708 <strlen>
   15266:	42a8      	cmp	r0, r5
   15268:	d1f1      	bne.n	1524e <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   1526a:	462a      	mov	r2, r5
   1526c:	4639      	mov	r1, r7
   1526e:	4640      	mov	r0, r8
   15270:	f00c f92b 	bl	214ca <strncmp>
   15274:	2800      	cmp	r0, #0
   15276:	d1ea      	bne.n	1524e <get_command_from_module+0xe>
   15278:	e001      	b.n	1527e <get_command_from_module+0x3e>
    return -1;
   1527a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1527e:	4620      	mov	r0, r4
   15280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15284:	20004b30 	.word	0x20004b30

00015288 <complete_param>:
{
   15288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1528c:	b083      	sub	sp, #12
   1528e:	9001      	str	r0, [sp, #4]
   15290:	9100      	str	r1, [sp, #0]
   15292:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   15294:	4a34      	ldr	r2, [pc, #208]	; (15368 <complete_param+0xe0>)
   15296:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1529a:	6857      	ldr	r7, [r2, #4]
   1529c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1529e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   152a2:	68fb      	ldr	r3, [r7, #12]
   152a4:	2b00      	cmp	r3, #0
   152a6:	d05c      	beq.n	15362 <complete_param+0xda>
   152a8:	689b      	ldr	r3, [r3, #8]
   152aa:	2b00      	cmp	r3, #0
   152ac:	d059      	beq.n	15362 <complete_param+0xda>
    int i, j, common_chars = -1;
   152ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   152b2:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   152b6:	4656      	mov	r6, sl
   152b8:	e015      	b.n	152e6 <complete_param+0x5e>
            console_printf("\n");
   152ba:	482c      	ldr	r0, [pc, #176]	; (1536c <complete_param+0xe4>)
   152bc:	f7fe fdaa 	bl	13e14 <console_printf>
            console_printf("%s\n", first_match);
   152c0:	4631      	mov	r1, r6
   152c2:	482b      	ldr	r0, [pc, #172]	; (15370 <complete_param+0xe8>)
   152c4:	f7fe fda6 	bl	13e14 <console_printf>
            common_chars = strlen(first_match);
   152c8:	4630      	mov	r0, r6
   152ca:	f7fb fa1d 	bl	10708 <strlen>
   152ce:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   152d0:	e01d      	b.n	1530e <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   152d2:	68fb      	ldr	r3, [r7, #12]
   152d4:	689b      	ldr	r3, [r3, #8]
   152d6:	f853 1008 	ldr.w	r1, [r3, r8]
   152da:	4825      	ldr	r0, [pc, #148]	; (15370 <complete_param+0xe8>)
   152dc:	f7fe fd9a 	bl	13e14 <console_printf>
        common_chars = j;
   152e0:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   152e2:	f10a 0a01 	add.w	sl, sl, #1
   152e6:	68fb      	ldr	r3, [r7, #12]
   152e8:	689b      	ldr	r3, [r3, #8]
   152ea:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   152ee:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   152f2:	f1bb 0f00 	cmp.w	fp, #0
   152f6:	d018      	beq.n	1532a <complete_param+0xa2>
        if (strncmp(param_prefix,
   152f8:	464a      	mov	r2, r9
   152fa:	4659      	mov	r1, fp
   152fc:	9800      	ldr	r0, [sp, #0]
   152fe:	f00c f8e4 	bl	214ca <strncmp>
   15302:	4604      	mov	r4, r0
   15304:	2800      	cmp	r0, #0
   15306:	d1ec      	bne.n	152e2 <complete_param+0x5a>
        if (!first_match) {
   15308:	b16e      	cbz	r6, 15326 <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   1530a:	2d00      	cmp	r5, #0
   1530c:	dbd5      	blt.n	152ba <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   1530e:	42ac      	cmp	r4, r5
   15310:	dadf      	bge.n	152d2 <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   15312:	5d32      	ldrb	r2, [r6, r4]
   15314:	68fb      	ldr	r3, [r7, #12]
   15316:	689b      	ldr	r3, [r3, #8]
   15318:	f853 3008 	ldr.w	r3, [r3, r8]
   1531c:	5d1b      	ldrb	r3, [r3, r4]
   1531e:	429a      	cmp	r2, r3
   15320:	d1d7      	bne.n	152d2 <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   15322:	3401      	adds	r4, #1
   15324:	e7f3      	b.n	1530e <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   15326:	465e      	mov	r6, fp
   15328:	e7db      	b.n	152e2 <complete_param+0x5a>
    if (!first_match) {
   1532a:	b1d6      	cbz	r6, 15362 <complete_param+0xda>
    if (common_chars >= 0) {
   1532c:	2d00      	cmp	r5, #0
   1532e:	da0f      	bge.n	15350 <complete_param+0xc8>
        common_chars = strlen(first_match);
   15330:	4630      	mov	r0, r6
   15332:	f7fb f9e9 	bl	10708 <strlen>
   15336:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   15338:	9c01      	ldr	r4, [sp, #4]
   1533a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1533c:	45a9      	cmp	r9, r5
   1533e:	da10      	bge.n	15362 <complete_param+0xda>
        if (!append_char(line, first_match[i])) {
   15340:	f816 1009 	ldrb.w	r1, [r6, r9]
   15344:	4620      	mov	r0, r4
   15346:	47b8      	blx	r7
   15348:	b158      	cbz	r0, 15362 <complete_param+0xda>
    for (i = param_len; i < common_chars; i++) {
   1534a:	f109 0901 	add.w	r9, r9, #1
   1534e:	e7f5      	b.n	1533c <complete_param+0xb4>
        print_prompt();
   15350:	f7ff fe52 	bl	14ff8 <print_prompt>
        console_printf("%s", line);
   15354:	9c01      	ldr	r4, [sp, #4]
   15356:	4621      	mov	r1, r4
   15358:	4806      	ldr	r0, [pc, #24]	; (15374 <complete_param+0xec>)
   1535a:	f7fe fd5b 	bl	13e14 <console_printf>
   1535e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   15360:	e7ec      	b.n	1533c <complete_param+0xb4>
}
   15362:	b003      	add	sp, #12
   15364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15368:	20004b30 	.word	0x20004b30
   1536c:	00026304 	.word	0x00026304
   15370:	00025db0 	.word	0x00025db0
   15374:	00025750 	.word	0x00025750

00015378 <get_token>:
{
   15378:	b570      	push	{r4, r5, r6, lr}
   1537a:	4605      	mov	r5, r0
   1537c:	460e      	mov	r6, r1
    char *str = *cur;
   1537e:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   15380:	2300      	movs	r3, #0
   15382:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   15384:	e000      	b.n	15388 <get_token+0x10>
        str++;
   15386:	3401      	adds	r4, #1
    while (*str && *str == ' ') {
   15388:	7823      	ldrb	r3, [r4, #0]
   1538a:	2b20      	cmp	r3, #32
   1538c:	d0fb      	beq.n	15386 <get_token+0xe>
    if (*str == '\0') {
   1538e:	b13b      	cbz	r3, 153a0 <get_token+0x28>
    *cur = str;
   15390:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   15392:	2120      	movs	r1, #32
   15394:	4620      	mov	r0, r4
   15396:	f00c f882 	bl	2149e <strchr>
    if (str == NULL) {
   1539a:	b128      	cbz	r0, 153a8 <get_token+0x30>
    return str - *cur;
   1539c:	1b00      	subs	r0, r0, r4
}
   1539e:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   153a0:	2301      	movs	r3, #1
   153a2:	6033      	str	r3, [r6, #0]
        return 0;
   153a4:	2000      	movs	r0, #0
   153a6:	e7fa      	b.n	1539e <get_token+0x26>
        *null_terminated = 1;
   153a8:	2301      	movs	r3, #1
   153aa:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   153ac:	6828      	ldr	r0, [r5, #0]
   153ae:	f7fb f9ab 	bl	10708 <strlen>
   153b2:	e7f4      	b.n	1539e <get_token+0x26>

000153b4 <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   153b4:	b530      	push	{r4, r5, lr}
   153b6:	b085      	sub	sp, #20
   153b8:	4604      	mov	r4, r0
   153ba:	9101      	str	r1, [sp, #4]
   153bc:	461d      	mov	r5, r3
    int null_terminated = 0;
   153be:	2000      	movs	r0, #0
   153c0:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   153c2:	3201      	adds	r2, #1
   153c4:	4411      	add	r1, r2
   153c6:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   153c8:	a903      	add	r1, sp, #12
   153ca:	a801      	add	r0, sp, #4
   153cc:	f7ff ffd4 	bl	15378 <get_token>
    if (tok_len == 0) {
   153d0:	b9a0      	cbnz	r0, 153fc <complete_select+0x48>
        if (default_module != -1) {
   153d2:	4b12      	ldr	r3, [pc, #72]	; (1541c <complete_select+0x68>)
   153d4:	681b      	ldr	r3, [r3, #0]
   153d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   153da:	d001      	beq.n	153e0 <complete_select+0x2c>
    if (null_terminated) {
        if (default_module == -1) {
            complete_module(line, cur, tok_len, append_char);
        }
    }
}
   153dc:	b005      	add	sp, #20
   153de:	bd30      	pop	{r4, r5, pc}
        console_printf("\n");
   153e0:	480f      	ldr	r0, [pc, #60]	; (15420 <complete_select+0x6c>)
   153e2:	f7fe fd17 	bl	13e14 <console_printf>
        print_modules(streamer_console_get());
   153e6:	f001 ff17 	bl	17218 <streamer_console_get>
   153ea:	f7ff fc35 	bl	14c58 <print_modules>
        print_prompt();
   153ee:	f7ff fe03 	bl	14ff8 <print_prompt>
        console_printf("%s", line);
   153f2:	4621      	mov	r1, r4
   153f4:	480b      	ldr	r0, [pc, #44]	; (15424 <complete_select+0x70>)
   153f6:	f7fe fd0d 	bl	13e14 <console_printf>
        return;
   153fa:	e7ef      	b.n	153dc <complete_select+0x28>
   153fc:	4602      	mov	r2, r0
    if (null_terminated) {
   153fe:	9b03      	ldr	r3, [sp, #12]
   15400:	2b00      	cmp	r3, #0
   15402:	d0eb      	beq.n	153dc <complete_select+0x28>
        if (default_module == -1) {
   15404:	4b05      	ldr	r3, [pc, #20]	; (1541c <complete_select+0x68>)
   15406:	681b      	ldr	r3, [r3, #0]
   15408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1540c:	d1e6      	bne.n	153dc <complete_select+0x28>
            complete_module(line, cur, tok_len, append_char);
   1540e:	462b      	mov	r3, r5
   15410:	9901      	ldr	r1, [sp, #4]
   15412:	4620      	mov	r0, r4
   15414:	f7ff fe08 	bl	15028 <complete_module>
   15418:	e7e0      	b.n	153dc <complete_select+0x28>
   1541a:	bf00      	nop
   1541c:	2000074c 	.word	0x2000074c
   15420:	00026304 	.word	0x00026304
   15424:	00025750 	.word	0x00025750

00015428 <line2argv>:
{
   15428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1542a:	460d      	mov	r5, r1
   1542c:	4616      	mov	r6, r2
   1542e:	461f      	mov	r7, r3
    if (!strlen(str)) {
   15430:	7803      	ldrb	r3, [r0, #0]
   15432:	b91b      	cbnz	r3, 1543c <line2argv+0x14>
        return 0;
   15434:	2400      	movs	r4, #0
}
   15436:	4620      	mov	r0, r4
   15438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str++;
   1543a:	3001      	adds	r0, #1
    while (*str && *str == ' ') {
   1543c:	7804      	ldrb	r4, [r0, #0]
   1543e:	2c20      	cmp	r4, #32
   15440:	d0fb      	beq.n	1543a <line2argv+0x12>
    if (!*str) {
   15442:	b314      	cbz	r4, 1548a <line2argv+0x62>
    argv[argc++] = str;
   15444:	6028      	str	r0, [r5, #0]
   15446:	2401      	movs	r4, #1
    while ((str = strchr(str, ' '))) {
   15448:	e00a      	b.n	15460 <line2argv+0x38>
            str++;
   1544a:	3001      	adds	r0, #1
        while (*str && *str == ' ') {
   1544c:	7803      	ldrb	r3, [r0, #0]
   1544e:	2b20      	cmp	r3, #32
   15450:	d0fb      	beq.n	1544a <line2argv+0x22>
        if (!*str) {
   15452:	b1b3      	cbz	r3, 15482 <line2argv+0x5a>
        argv[argc++] = str;
   15454:	1c63      	adds	r3, r4, #1
   15456:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        if (argc == size) {
   1545a:	42b3      	cmp	r3, r6
   1545c:	d00a      	beq.n	15474 <line2argv+0x4c>
        argv[argc++] = str;
   1545e:	461c      	mov	r4, r3
    while ((str = strchr(str, ' '))) {
   15460:	2120      	movs	r1, #32
   15462:	f00c f81c 	bl	2149e <strchr>
   15466:	4603      	mov	r3, r0
   15468:	b158      	cbz	r0, 15482 <line2argv+0x5a>
        *str++ = '\0';
   1546a:	4618      	mov	r0, r3
   1546c:	2300      	movs	r3, #0
   1546e:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   15472:	e7eb      	b.n	1544c <line2argv+0x24>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   15474:	1e72      	subs	r2, r6, #1
   15476:	4906      	ldr	r1, [pc, #24]	; (15490 <line2argv+0x68>)
   15478:	4638      	mov	r0, r7
   1547a:	f7fd fb31 	bl	12ae0 <streamer_printf>
            return 0;
   1547e:	2400      	movs	r4, #0
   15480:	e7d9      	b.n	15436 <line2argv+0xe>
    argv[argc] = NULL;
   15482:	2300      	movs	r3, #0
   15484:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    return argc;
   15488:	e7d5      	b.n	15436 <line2argv+0xe>
        return 0;
   1548a:	2400      	movs	r4, #0
   1548c:	e7d3      	b.n	15436 <line2argv+0xe>
   1548e:	bf00      	nop
   15490:	00026374 	.word	0x00026374

00015494 <get_last_token>:
{
   15494:	b510      	push	{r4, lr}
   15496:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   15498:	2120      	movs	r1, #32
   1549a:	6800      	ldr	r0, [r0, #0]
   1549c:	f00c f826 	bl	214ec <strrchr>
   154a0:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   154a2:	b120      	cbz	r0, 154ae <get_last_token+0x1a>
    (*cur)++;
   154a4:	3001      	adds	r0, #1
   154a6:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   154a8:	f7fb f92e 	bl	10708 <strlen>
}
   154ac:	bd10      	pop	{r4, pc}
        return 0;
   154ae:	2000      	movs	r0, #0
   154b0:	e7fc      	b.n	154ac <get_last_token+0x18>
	...

000154b4 <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   154b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   154b8:	b085      	sub	sp, #20
   154ba:	4605      	mov	r5, r0
   154bc:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   154be:	2100      	movs	r1, #0
   154c0:	9102      	str	r1, [sp, #8]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   154c2:	47a0      	blx	r4
   154c4:	b910      	cbnz	r0, 154cc <completion+0x18>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   154c6:	b005      	add	sp, #20
   154c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   154cc:	9503      	str	r5, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   154ce:	a902      	add	r1, sp, #8
   154d0:	a803      	add	r0, sp, #12
   154d2:	f7ff ff51 	bl	15378 <get_token>
    if (tok_len == 0) {
   154d6:	4606      	mov	r6, r0
   154d8:	b168      	cbz	r0, 154f6 <completion+0x42>
    if (null_terminated) {
   154da:	9b02      	ldr	r3, [sp, #8]
   154dc:	b363      	cbz	r3, 15538 <completion+0x84>
        if (default_module == -1) {
   154de:	4b4d      	ldr	r3, [pc, #308]	; (15614 <completion+0x160>)
   154e0:	681b      	ldr	r3, [r3, #0]
   154e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   154e6:	d020      	beq.n	1552a <completion+0x76>
        complete_command(line, cur, tok_len,
   154e8:	9400      	str	r4, [sp, #0]
   154ea:	4602      	mov	r2, r0
   154ec:	9903      	ldr	r1, [sp, #12]
   154ee:	4628      	mov	r0, r5
   154f0:	f7ff fe22 	bl	15138 <complete_command>
        return;
   154f4:	e7e7      	b.n	154c6 <completion+0x12>
        console_printf("\n");
   154f6:	4848      	ldr	r0, [pc, #288]	; (15618 <completion+0x164>)
   154f8:	f7fe fc8c 	bl	13e14 <console_printf>
        if (default_module == -1) {
   154fc:	4b45      	ldr	r3, [pc, #276]	; (15614 <completion+0x160>)
   154fe:	681c      	ldr	r4, [r3, #0]
   15500:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   15504:	d00c      	beq.n	15520 <completion+0x6c>
            print_module_commands(default_module, streamer_console_get());
   15506:	f001 fe87 	bl	17218 <streamer_console_get>
   1550a:	4601      	mov	r1, r0
   1550c:	4620      	mov	r0, r4
   1550e:	f7ff fb6d 	bl	14bec <print_module_commands>
        print_prompt();
   15512:	f7ff fd71 	bl	14ff8 <print_prompt>
        console_printf("%s", line);
   15516:	4629      	mov	r1, r5
   15518:	4840      	ldr	r0, [pc, #256]	; (1561c <completion+0x168>)
   1551a:	f7fe fc7b 	bl	13e14 <console_printf>
        return;
   1551e:	e7d2      	b.n	154c6 <completion+0x12>
            print_modules(streamer_console_get());
   15520:	f001 fe7a 	bl	17218 <streamer_console_get>
   15524:	f7ff fb98 	bl	14c58 <print_modules>
   15528:	e7f3      	b.n	15512 <completion+0x5e>
            complete_module(line, cur, tok_len, append_char);
   1552a:	4623      	mov	r3, r4
   1552c:	4602      	mov	r2, r0
   1552e:	9903      	ldr	r1, [sp, #12]
   15530:	4628      	mov	r0, r5
   15532:	f7ff fd79 	bl	15028 <complete_module>
            return;
   15536:	e7c6      	b.n	154c6 <completion+0x12>
    if (strncmp("select", cur, tok_len) == 0) {
   15538:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1553c:	4602      	mov	r2, r0
   1553e:	4641      	mov	r1, r8
   15540:	4837      	ldr	r0, [pc, #220]	; (15620 <completion+0x16c>)
   15542:	f00b ffc2 	bl	214ca <strncmp>
   15546:	b300      	cbz	r0, 1558a <completion+0xd6>
    if (default_module != -1) {
   15548:	4b32      	ldr	r3, [pc, #200]	; (15614 <completion+0x160>)
   1554a:	681f      	ldr	r7, [r3, #0]
   1554c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   15550:	d022      	beq.n	15598 <completion+0xe4>
    command = get_command_from_module(cur, tok_len, module);
   15552:	f8dd 900c 	ldr.w	r9, [sp, #12]
   15556:	463a      	mov	r2, r7
   15558:	4631      	mov	r1, r6
   1555a:	4648      	mov	r0, r9
   1555c:	f7ff fe70 	bl	15240 <get_command_from_module>
   15560:	4680      	mov	r8, r0
    if (command == -1) {
   15562:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15566:	d0ae      	beq.n	154c6 <completion+0x12>
    cur += tok_len;
   15568:	444e      	add	r6, r9
   1556a:	9603      	str	r6, [sp, #12]
    tok_len = get_last_token(&cur);
   1556c:	a803      	add	r0, sp, #12
   1556e:	f7ff ff91 	bl	15494 <get_last_token>
    if (tok_len == 0) {
   15572:	4602      	mov	r2, r0
   15574:	2800      	cmp	r0, #0
   15576:	d03b      	beq.n	155f0 <completion+0x13c>
    complete_param(line, cur, tok_len,
   15578:	9401      	str	r4, [sp, #4]
   1557a:	f8cd 8000 	str.w	r8, [sp]
   1557e:	463b      	mov	r3, r7
   15580:	9903      	ldr	r1, [sp, #12]
   15582:	4628      	mov	r0, r5
   15584:	f7ff fe80 	bl	15288 <complete_param>
    return;
   15588:	e79d      	b.n	154c6 <completion+0x12>
        complete_select(line, cur, tok_len, append_char);
   1558a:	4623      	mov	r3, r4
   1558c:	4632      	mov	r2, r6
   1558e:	4641      	mov	r1, r8
   15590:	4628      	mov	r0, r5
   15592:	f7ff ff0f 	bl	153b4 <complete_select>
        return;
   15596:	e796      	b.n	154c6 <completion+0x12>
        module = get_destination_module(cur, tok_len);
   15598:	4631      	mov	r1, r6
   1559a:	4640      	mov	r0, r8
   1559c:	f7ff fb96 	bl	14ccc <get_destination_module>
   155a0:	4607      	mov	r7, r0
        if (module == -1) {
   155a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   155a6:	d08e      	beq.n	154c6 <completion+0x12>
        cur += tok_len + 1;
   155a8:	1c73      	adds	r3, r6, #1
   155aa:	4443      	add	r3, r8
   155ac:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   155ae:	a902      	add	r1, sp, #8
   155b0:	a803      	add	r0, sp, #12
   155b2:	f7ff fee1 	bl	15378 <get_token>
        if (tok_len == 0) {
   155b6:	4606      	mov	r6, r0
   155b8:	b150      	cbz	r0, 155d0 <completion+0x11c>
        if (null_terminated) {
   155ba:	9b02      	ldr	r3, [sp, #8]
   155bc:	2b00      	cmp	r3, #0
   155be:	d0c8      	beq.n	15552 <completion+0x9e>
            complete_command(line, cur, tok_len,
   155c0:	9400      	str	r4, [sp, #0]
   155c2:	463b      	mov	r3, r7
   155c4:	4602      	mov	r2, r0
   155c6:	9903      	ldr	r1, [sp, #12]
   155c8:	4628      	mov	r0, r5
   155ca:	f7ff fdb5 	bl	15138 <complete_command>
            return;
   155ce:	e77a      	b.n	154c6 <completion+0x12>
            console_printf("\n");
   155d0:	4811      	ldr	r0, [pc, #68]	; (15618 <completion+0x164>)
   155d2:	f7fe fc1f 	bl	13e14 <console_printf>
            print_module_commands(module, streamer_console_get());
   155d6:	f001 fe1f 	bl	17218 <streamer_console_get>
   155da:	4601      	mov	r1, r0
   155dc:	4638      	mov	r0, r7
   155de:	f7ff fb05 	bl	14bec <print_module_commands>
            print_prompt();
   155e2:	f7ff fd09 	bl	14ff8 <print_prompt>
            console_printf("%s", line);
   155e6:	4629      	mov	r1, r5
   155e8:	480c      	ldr	r0, [pc, #48]	; (1561c <completion+0x168>)
   155ea:	f7fe fc13 	bl	13e14 <console_printf>
            return;
   155ee:	e76a      	b.n	154c6 <completion+0x12>
        console_printf("\n");
   155f0:	4809      	ldr	r0, [pc, #36]	; (15618 <completion+0x164>)
   155f2:	f7fe fc0f 	bl	13e14 <console_printf>
        print_command_params(module, command, streamer_console_get());
   155f6:	f001 fe0f 	bl	17218 <streamer_console_get>
   155fa:	4602      	mov	r2, r0
   155fc:	4641      	mov	r1, r8
   155fe:	4638      	mov	r0, r7
   15600:	f7ff fb42 	bl	14c88 <print_command_params>
        print_prompt();
   15604:	f7ff fcf8 	bl	14ff8 <print_prompt>
        console_printf("%s", line);
   15608:	4629      	mov	r1, r5
   1560a:	4804      	ldr	r0, [pc, #16]	; (1561c <completion+0x168>)
   1560c:	f7fe fc02 	bl	13e14 <console_printf>
        return;
   15610:	e759      	b.n	154c6 <completion+0x12>
   15612:	bf00      	nop
   15614:	2000074c 	.word	0x2000074c
   15618:	00026304 	.word	0x00026304
   1561c:	00025750 	.word	0x00025750
   15620:	000262c8 	.word	0x000262c8

00015624 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   15624:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   15626:	2400      	movs	r4, #0
   15628:	e00b      	b.n	15642 <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   1562a:	4807      	ldr	r0, [pc, #28]	; (15648 <shell_avail_queue_init+0x24>)
   1562c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   15630:	4b06      	ldr	r3, [pc, #24]	; (1564c <shell_avail_queue_init+0x28>)
   15632:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   15634:	4b06      	ldr	r3, [pc, #24]	; (15650 <shell_avail_queue_init+0x2c>)
   15636:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1563a:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   1563c:	f7fe fb8a 	bl	13d54 <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   15640:	3401      	adds	r4, #1
   15642:	2c01      	cmp	r4, #1
   15644:	ddf1      	ble.n	1562a <shell_avail_queue_init+0x6>
    }
}
   15646:	bd10      	pop	{r4, pc}
   15648:	20004b0c 	.word	0x20004b0c
   1564c:	00015795 	.word	0x00015795
   15650:	200047ac 	.word	0x200047ac

00015654 <shell_evq_set>:
{
   15654:	b508      	push	{r3, lr}
    shell_evq = evq;
   15656:	4b02      	ldr	r3, [pc, #8]	; (15660 <shell_evq_set+0xc>)
   15658:	6018      	str	r0, [r3, #0]
    console_line_queue_set(shell_evq);
   1565a:	f7fe fb75 	bl	13d48 <console_line_queue_set>
}
   1565e:	bd08      	pop	{r3, pc}
   15660:	20004b2c 	.word	0x20004b2c

00015664 <shell_exec>:
{
   15664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15668:	4607      	mov	r7, r0
   1566a:	460e      	mov	r6, r1
   1566c:	4615      	mov	r5, r2
    cmd = shell_find_cmd(argc, argv, streamer);
   1566e:	f7ff fbad 	bl	14dcc <shell_find_cmd>
    if (!cmd) {
   15672:	4604      	mov	r4, r0
   15674:	b1b8      	cbz	r0, 156a6 <shell_exec+0x42>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   15676:	4b23      	ldr	r3, [pc, #140]	; (15704 <shell_exec+0xa0>)
   15678:	681b      	ldr	r3, [r3, #0]
   1567a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1567e:	d026      	beq.n	156ce <shell_exec+0x6a>
    size_t argc_offset = 0;
   15680:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   15682:	7823      	ldrb	r3, [r4, #0]
   15684:	f013 0f01 	tst.w	r3, #1
   15688:	d12d      	bne.n	156e6 <shell_exec+0x82>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   1568a:	6863      	ldr	r3, [r4, #4]
   1568c:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   15690:	1a38      	subs	r0, r7, r0
   15692:	4798      	blx	r3
   15694:	4604      	mov	r4, r0
    if (rc < 0) {
   15696:	2c00      	cmp	r4, #0
   15698:	db2f      	blt.n	156fa <shell_exec+0x96>
    print_prompt_if_console(streamer);
   1569a:	4628      	mov	r0, r5
   1569c:	f7ff fcba 	bl	15014 <print_prompt_if_console>
}
   156a0:	4620      	mov	r0, r4
   156a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   156a6:	4b18      	ldr	r3, [pc, #96]	; (15708 <shell_exec+0xa4>)
   156a8:	685b      	ldr	r3, [r3, #4]
   156aa:	b10b      	cbz	r3, 156b0 <shell_exec+0x4c>
            cmd = &app_cmd;
   156ac:	4c16      	ldr	r4, [pc, #88]	; (15708 <shell_exec+0xa4>)
   156ae:	e7e2      	b.n	15676 <shell_exec+0x12>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   156b0:	6832      	ldr	r2, [r6, #0]
   156b2:	4916      	ldr	r1, [pc, #88]	; (1570c <shell_exec+0xa8>)
   156b4:	4628      	mov	r0, r5
   156b6:	f7fd fa13 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer,
   156ba:	4915      	ldr	r1, [pc, #84]	; (15710 <shell_exec+0xac>)
   156bc:	4628      	mov	r0, r5
   156be:	f7fd fa0f 	bl	12ae0 <streamer_printf>
            print_prompt_if_console(streamer);
   156c2:	4628      	mov	r0, r5
   156c4:	f7ff fca6 	bl	15014 <print_prompt_if_console>
            return SYS_ENOENT;
   156c8:	f06f 0403 	mvn.w	r4, #3
   156cc:	e7e8      	b.n	156a0 <shell_exec+0x3c>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   156ce:	4b11      	ldr	r3, [pc, #68]	; (15714 <shell_exec+0xb0>)
   156d0:	429c      	cmp	r4, r3
   156d2:	d006      	beq.n	156e2 <shell_exec+0x7e>
   156d4:	4b10      	ldr	r3, [pc, #64]	; (15718 <shell_exec+0xb4>)
   156d6:	429c      	cmp	r4, r3
   156d8:	d001      	beq.n	156de <shell_exec+0x7a>
        argc_offset = 1;
   156da:	2001      	movs	r0, #1
   156dc:	e7d1      	b.n	15682 <shell_exec+0x1e>
    size_t argc_offset = 0;
   156de:	2000      	movs	r0, #0
   156e0:	e7cf      	b.n	15682 <shell_exec+0x1e>
   156e2:	2000      	movs	r0, #0
   156e4:	e7cd      	b.n	15682 <shell_exec+0x1e>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   156e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
   156ea:	462b      	mov	r3, r5
   156ec:	eb06 0280 	add.w	r2, r6, r0, lsl #2
   156f0:	1a39      	subs	r1, r7, r0
   156f2:	4620      	mov	r0, r4
   156f4:	47c0      	blx	r8
   156f6:	4604      	mov	r4, r0
   156f8:	e7cd      	b.n	15696 <shell_exec+0x32>
        show_cmd_help(argv, streamer);
   156fa:	4629      	mov	r1, r5
   156fc:	4630      	mov	r0, r6
   156fe:	f7ff fbc7 	bl	14e90 <show_cmd_help>
   15702:	e7ca      	b.n	1569a <shell_exec+0x36>
   15704:	2000074c 	.word	0x2000074c
   15708:	20004798 	.word	0x20004798
   1570c:	0002627c 	.word	0x0002627c
   15710:	00026394 	.word	0x00026394
   15714:	00026454 	.word	0x00026454
   15718:	00026444 	.word	0x00026444

0001571c <shell_process_command>:
{
   1571c:	b510      	push	{r4, lr}
   1571e:	b08e      	sub	sp, #56	; 0x38
   15720:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   15722:	460b      	mov	r3, r1
   15724:	220d      	movs	r2, #13
   15726:	a901      	add	r1, sp, #4
   15728:	f7ff fe7e 	bl	15428 <line2argv>
    if (!argc) {
   1572c:	b128      	cbz	r0, 1573a <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   1572e:	4622      	mov	r2, r4
   15730:	a901      	add	r1, sp, #4
   15732:	f7ff ff97 	bl	15664 <shell_exec>
}
   15736:	b00e      	add	sp, #56	; 0x38
   15738:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   1573a:	4620      	mov	r0, r4
   1573c:	f7ff fc6a 	bl	15014 <print_prompt_if_console>
        return;
   15740:	e7f9      	b.n	15736 <shell_process_command+0x1a>

00015742 <shell_process_nlip_line>:
{
   15742:	b570      	push	{r4, r5, r6, lr}
   15744:	4604      	mov	r4, r0
   15746:	460e      	mov	r6, r1
    shell_line_len = strlen(shell_line);
   15748:	f7fa ffde 	bl	10708 <strlen>
    if (shell_line_len > 2) {
   1574c:	2802      	cmp	r0, #2
   1574e:	d91c      	bls.n	1578a <shell_process_nlip_line+0x48>
   15750:	4605      	mov	r5, r0
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   15752:	7823      	ldrb	r3, [r4, #0]
   15754:	2b06      	cmp	r3, #6
   15756:	d009      	beq.n	1576c <shell_process_nlip_line+0x2a>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   15758:	2b04      	cmp	r3, #4
   1575a:	d102      	bne.n	15762 <shell_process_nlip_line+0x20>
                shell_line[1] == SHELL_NLIP_DATA_START2) {
   1575c:	7863      	ldrb	r3, [r4, #1]
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   1575e:	2b14      	cmp	r3, #20
   15760:	d00e      	beq.n	15780 <shell_process_nlip_line+0x3e>
            shell_process_command(shell_line, streamer);
   15762:	4631      	mov	r1, r6
   15764:	4620      	mov	r0, r4
   15766:	f7ff ffd9 	bl	1571c <shell_process_command>
}
   1576a:	bd70      	pop	{r4, r5, r6, pc}
                shell_line[1] == SHELL_NLIP_PKT_START2) {
   1576c:	7862      	ldrb	r2, [r4, #1]
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   1576e:	2a09      	cmp	r2, #9
   15770:	d1f2      	bne.n	15758 <shell_process_nlip_line+0x16>
            shell_nlip_clear_pkt();
   15772:	f000 f95b 	bl	15a2c <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   15776:	1ea9      	subs	r1, r5, #2
   15778:	1ca0      	adds	r0, r4, #2
   1577a:	f000 f969 	bl	15a50 <shell_nlip_process>
   1577e:	e7f4      	b.n	1576a <shell_process_nlip_line+0x28>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   15780:	1ea9      	subs	r1, r5, #2
   15782:	1ca0      	adds	r0, r4, #2
   15784:	f000 f964 	bl	15a50 <shell_nlip_process>
   15788:	e7ef      	b.n	1576a <shell_process_nlip_line+0x28>
        shell_process_command(shell_line, streamer);
   1578a:	4631      	mov	r1, r6
   1578c:	4620      	mov	r0, r4
   1578e:	f7ff ffc5 	bl	1571c <shell_process_command>
}
   15792:	e7ea      	b.n	1576a <shell_process_nlip_line+0x28>

00015794 <shell>:
{
   15794:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   15796:	b160      	cbz	r0, 157b2 <shell+0x1e>
   15798:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   1579a:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   1579c:	b165      	cbz	r5, 157b8 <shell+0x24>
    streamer = streamer_console_get();
   1579e:	f001 fd3b 	bl	17218 <streamer_console_get>
   157a2:	4601      	mov	r1, r0
    shell_process_nlip_line(cmd->line, streamer);
   157a4:	4628      	mov	r0, r5
   157a6:	f7ff ffcc 	bl	15742 <shell_process_nlip_line>
    console_line_event_put(ev);
   157aa:	4620      	mov	r0, r4
   157ac:	f7fe fad2 	bl	13d54 <console_line_event_put>
}
   157b0:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt();
   157b2:	f7ff fc21 	bl	14ff8 <print_prompt>
        return;
   157b6:	e7fb      	b.n	157b0 <shell+0x1c>
        print_prompt();
   157b8:	f7ff fc1e 	bl	14ff8 <print_prompt>
        return;
   157bc:	e7f8      	b.n	157b0 <shell+0x1c>
	...

000157c0 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   157c0:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   157c2:	4b0d      	ldr	r3, [pc, #52]	; (157f8 <shell_register+0x38>)
   157c4:	681b      	ldr	r3, [r3, #0]
   157c6:	2b02      	cmp	r3, #2
   157c8:	d80a      	bhi.n	157e0 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   157ca:	4a0c      	ldr	r2, [pc, #48]	; (157fc <shell_register+0x3c>)
   157cc:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   157d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   157d4:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   157d6:	3301      	adds	r3, #1
   157d8:	4a07      	ldr	r2, [pc, #28]	; (157f8 <shell_register+0x38>)
   157da:	6013      	str	r3, [r2, #0]

    return 0;
}
   157dc:	2000      	movs	r0, #0
   157de:	bd08      	pop	{r3, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   157e0:	4a07      	ldr	r2, [pc, #28]	; (15800 <shell_register+0x40>)
   157e2:	2103      	movs	r1, #3
   157e4:	2000      	movs	r0, #0
   157e6:	f00d f82b 	bl	22840 <modlog_printf>
        assert(0);
   157ea:	2300      	movs	r3, #0
   157ec:	461a      	mov	r2, r3
   157ee:	4619      	mov	r1, r3
   157f0:	4618      	mov	r0, r3
   157f2:	f7f3 fce7 	bl	91c4 <__assert_func>
   157f6:	bf00      	nop
   157f8:	20004b04 	.word	0x20004b04
   157fc:	20004b30 	.word	0x20004b30
   15800:	000263c0 	.word	0x000263c0

00015804 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   15804:	b570      	push	{r4, r5, r6, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   15806:	4b1a      	ldr	r3, [pc, #104]	; (15870 <shell_cmd_register+0x6c>)
   15808:	681b      	ldr	r3, [r3, #0]
   1580a:	2b13      	cmp	r3, #19
   1580c:	dc10      	bgt.n	15830 <shell_cmd_register+0x2c>
   1580e:	4604      	mov	r4, r0
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   15810:	4b18      	ldr	r3, [pc, #96]	; (15874 <shell_cmd_register+0x70>)
   15812:	681b      	ldr	r3, [r3, #0]
   15814:	b1bb      	cbz	r3, 15846 <shell_cmd_register+0x42>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   15816:	4e16      	ldr	r6, [pc, #88]	; (15870 <shell_cmd_register+0x6c>)
   15818:	6835      	ldr	r5, [r6, #0]
   1581a:	4b17      	ldr	r3, [pc, #92]	; (15878 <shell_cmd_register+0x74>)
   1581c:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
   15820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   15824:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ++num_compat_commands;
   15828:	3501      	adds	r5, #1
   1582a:	6035      	str	r5, [r6, #0]
    return 0;
}
   1582c:	2000      	movs	r0, #0
   1582e:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   15830:	4a12      	ldr	r2, [pc, #72]	; (1587c <shell_cmd_register+0x78>)
   15832:	2103      	movs	r1, #3
   15834:	2000      	movs	r0, #0
   15836:	f00d f803 	bl	22840 <modlog_printf>
        assert(0);
   1583a:	2300      	movs	r3, #0
   1583c:	461a      	mov	r2, r3
   1583e:	4619      	mov	r1, r3
   15840:	4618      	mov	r0, r3
   15842:	f7f3 fcbf 	bl	91c4 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   15846:	4d0e      	ldr	r5, [pc, #56]	; (15880 <shell_cmd_register+0x7c>)
   15848:	490b      	ldr	r1, [pc, #44]	; (15878 <shell_cmd_register+0x74>)
   1584a:	4628      	mov	r0, r5
   1584c:	f7ff ffb8 	bl	157c0 <shell_register>
        module_registered = 1;
   15850:	4b08      	ldr	r3, [pc, #32]	; (15874 <shell_cmd_register+0x70>)
   15852:	2201      	movs	r2, #1
   15854:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   15856:	4628      	mov	r0, r5
   15858:	f7ff fa5e 	bl	14d18 <set_default_module>
        if (rc != 0) {
   1585c:	2800      	cmp	r0, #0
   1585e:	d0da      	beq.n	15816 <shell_cmd_register+0x12>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   15860:	462b      	mov	r3, r5
   15862:	4a08      	ldr	r2, [pc, #32]	; (15884 <shell_cmd_register+0x80>)
   15864:	2103      	movs	r1, #3
   15866:	2000      	movs	r0, #0
   15868:	f00c ffea 	bl	22840 <modlog_printf>
   1586c:	e7d3      	b.n	15816 <shell_cmd_register+0x12>
   1586e:	bf00      	nop
   15870:	20004b00 	.word	0x20004b00
   15874:	20004afc 	.word	0x20004afc
   15878:	200049ac 	.word	0x200049ac
   1587c:	000263e0 	.word	0x000263e0
   15880:	00026408 	.word	0x00026408
   15884:	00026410 	.word	0x00026410

00015888 <shell_init>:
#endif

void
shell_init(void)
{
   15888:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1588a:	4b0d      	ldr	r3, [pc, #52]	; (158c0 <shell_init+0x38>)
   1588c:	781b      	ldrb	r3, [r3, #0]
   1588e:	b193      	cbz	r3, 158b6 <shell_init+0x2e>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   15890:	f7ff fec8 	bl	15624 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   15894:	f7f4 f886 	bl	99a4 <os_eventq_dflt_get>
   15898:	f7ff fedc 	bl	15654 <shell_evq_set>

    prompt = SHELL_PROMPT;
   1589c:	4b09      	ldr	r3, [pc, #36]	; (158c4 <shell_init+0x3c>)
   1589e:	4a0a      	ldr	r2, [pc, #40]	; (158c8 <shell_init+0x40>)
   158a0:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   158a2:	f000 f945 	bl	15b30 <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   158a6:	4809      	ldr	r0, [pc, #36]	; (158cc <shell_init+0x44>)
   158a8:	f7fe fa68 	bl	13d7c <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   158ac:	f000 fa96 	bl	15ddc <shell_os_register>
#endif
#if MYNEWT_VAL(SHELL_PROMPT_MODULE)
    shell_prompt_register();
   158b0:	f000 fada 	bl	15e68 <shell_prompt_register>
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   158b4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   158b6:	461a      	mov	r2, r3
   158b8:	4619      	mov	r1, r3
   158ba:	4618      	mov	r0, r3
   158bc:	f7f3 fc82 	bl	91c4 <__assert_func>
   158c0:	20004bb0 	.word	0x20004bb0
   158c4:	20004b08 	.word	0x20004b08
   158c8:	0002643c 	.word	0x0002643c
   158cc:	000154b5 	.word	0x000154b5

000158d0 <shell_nlip_mtx>:
    return (rc);
}

static int
shell_nlip_mtx(struct os_mbuf *m)
{
   158d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158d4:	b08b      	sub	sp, #44	; 0x2c
   158d6:	4680      	mov	r8, r0
#define SHELL_NLIP_MTX_BUF_SIZE (12)
    uint8_t readbuf[SHELL_NLIP_MTX_BUF_SIZE];
    char encodebuf[BASE64_ENCODE_SIZE(SHELL_NLIP_MTX_BUF_SIZE)];
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   158d8:	4b49      	ldr	r3, [pc, #292]	; (15a00 <shell_nlip_mtx+0x130>)
   158da:	681b      	ldr	r3, [r3, #0]
   158dc:	f8ad 3008 	strh.w	r3, [sp, #8]
   158e0:	0c1b      	lsrs	r3, r3, #16
   158e2:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   158e6:	f241 4304 	movw	r3, #5124	; 0x1404
   158ea:	f8ad 3004 	strh.w	r3, [sp, #4]
     *
     * continuation packets are preceded by 04 20 until the entire
     * buffer has been sent.
     */
    crc = CRC16_INITIAL_CRC;
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   158ee:	4604      	mov	r4, r0
    crc = CRC16_INITIAL_CRC;
   158f0:	2000      	movs	r0, #0
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   158f2:	e004      	b.n	158fe <shell_nlip_mtx+0x2e>
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   158f4:	88e2      	ldrh	r2, [r4, #6]
   158f6:	6821      	ldr	r1, [r4, #0]
   158f8:	f001 fc28 	bl	1714c <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   158fc:	68e4      	ldr	r4, [r4, #12]
   158fe:	2c00      	cmp	r4, #0
   15900:	d1f8      	bne.n	158f4 <shell_nlip_mtx+0x24>
    }
    crc = htons(crc);
   15902:	f3c0 230f 	ubfx	r3, r0, #8, #16
   15906:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1590a:	b284      	uxth	r4, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   1590c:	2102      	movs	r1, #2
   1590e:	4640      	mov	r0, r8
   15910:	f7f5 f978 	bl	ac04 <os_mbuf_extend>
    if (!ptr) {
   15914:	2800      	cmp	r0, #0
   15916:	d070      	beq.n	159fa <shell_nlip_mtx+0x12a>
        rc = -1;
        goto err;
    }
    memcpy(ptr, &crc, sizeof(crc));
   15918:	8004      	strh	r4, [r0, #0]

    totlen = OS_MBUF_PKTHDR(m)->omp_len;
   1591a:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    off = 0;
    bodylen = 0;
    rb_off = 0;

    rc = console_lock(OS_TICKS_PER_SEC);
   1591e:	2080      	movs	r0, #128	; 0x80
   15920:	f7fd fe5a 	bl	135d8 <console_lock>
    if (rc != OS_OK) {
   15924:	4682      	mov	sl, r0
   15926:	b118      	cbz	r0, 15930 <shell_nlip_mtx+0x60>
end:
    (void)console_unlock();

err:
    return (rc);
}
   15928:	4650      	mov	r0, sl
   1592a:	b00b      	add	sp, #44	; 0x2c
   1592c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    console_write(pkt_seq, sizeof(pkt_seq));
   15930:	2103      	movs	r1, #3
   15932:	a802      	add	r0, sp, #8
   15934:	f7fe f846 	bl	139c4 <console_write>
    dlen = htons(totlen);
   15938:	022b      	lsls	r3, r5, #8
   1593a:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    memcpy(readbuf, &dlen, sizeof(dlen));
   1593e:	f8ad 301c 	strh.w	r3, [sp, #28]
    rc = console_lock(OS_TICKS_PER_SEC);
   15942:	46d3      	mov	fp, sl
    bodylen = 0;
   15944:	2600      	movs	r6, #0
    rb_off += 2;
   15946:	2302      	movs	r3, #2
    off = 0;
   15948:	46b1      	mov	r9, r6
    while (totlen > 0) {
   1594a:	e01c      	b.n	15986 <shell_nlip_mtx+0xb6>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   1594c:	aa07      	add	r2, sp, #28
   1594e:	4413      	add	r3, r2
   15950:	4622      	mov	r2, r4
   15952:	4649      	mov	r1, r9
   15954:	4640      	mov	r0, r8
   15956:	f7f5 f850 	bl	a9fa <os_mbuf_copydata>
            if (rc != 0) {
   1595a:	4683      	mov	fp, r0
   1595c:	2800      	cmp	r0, #0
   1595e:	d14a      	bne.n	159f6 <shell_nlip_mtx+0x126>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   15960:	2300      	movs	r3, #0
   15962:	aa03      	add	r2, sp, #12
   15964:	4639      	mov	r1, r7
   15966:	a807      	add	r0, sp, #28
   15968:	f001 ff3c 	bl	177e4 <base64_encode>
   1596c:	4607      	mov	r7, r0
            console_write(encodebuf, elen);
   1596e:	4601      	mov	r1, r0
   15970:	a803      	add	r0, sp, #12
   15972:	f7fe f827 	bl	139c4 <console_write>
            bodylen += elen;
   15976:	443e      	add	r6, r7
   15978:	b2b6      	uxth	r6, r6
            totlen -= dlen;
   1597a:	1b2d      	subs	r5, r5, r4
   1597c:	b2ad      	uxth	r5, r5
            off += dlen;
   1597e:	44a1      	add	r9, r4
   15980:	fa1f f989 	uxth.w	r9, r9
            bodylen = 0;
   15984:	4653      	mov	r3, sl
    while (totlen > 0) {
   15986:	b335      	cbz	r5, 159d6 <shell_nlip_mtx+0x106>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   15988:	f1c3 040c 	rsb	r4, r3, #12
   1598c:	42ac      	cmp	r4, r5
   1598e:	bfa8      	it	ge
   15990:	462c      	movge	r4, r5
   15992:	b2a4      	uxth	r4, r4
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   15994:	191f      	adds	r7, r3, r4
   15996:	1e79      	subs	r1, r7, #1
   15998:	4a1a      	ldr	r2, [pc, #104]	; (15a04 <shell_nlip_mtx+0x134>)
   1599a:	fb82 0201 	smull	r0, r2, r2, r1
   1599e:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   159a2:	3201      	adds	r2, #1
   159a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   159a8:	b292      	uxth	r2, r2
   159aa:	3203      	adds	r2, #3
   159ac:	b292      	uxth	r2, r2
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   159ae:	2a7f      	cmp	r2, #127	; 0x7f
   159b0:	d9cc      	bls.n	1594c <shell_nlip_mtx+0x7c>
            elen = base64_pad(encodebuf, bodylen);
   159b2:	4631      	mov	r1, r6
   159b4:	a803      	add	r0, sp, #12
   159b6:	f001 ff5f 	bl	17878 <base64_pad>
   159ba:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   159bc:	a803      	add	r0, sp, #12
   159be:	f7fe f801 	bl	139c4 <console_write>
            console_write("\n", 1);
   159c2:	2101      	movs	r1, #1
   159c4:	4810      	ldr	r0, [pc, #64]	; (15a08 <shell_nlip_mtx+0x138>)
   159c6:	f7fd fffd 	bl	139c4 <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   159ca:	2102      	movs	r1, #2
   159cc:	a801      	add	r0, sp, #4
   159ce:	f7fd fff9 	bl	139c4 <console_write>
            bodylen = 0;
   159d2:	2600      	movs	r6, #0
   159d4:	e7d6      	b.n	15984 <shell_nlip_mtx+0xb4>
    elen = base64_pad(encodebuf, bodylen);
   159d6:	4631      	mov	r1, r6
   159d8:	a803      	add	r0, sp, #12
   159da:	f001 ff4d 	bl	17878 <base64_pad>
   159de:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   159e0:	a803      	add	r0, sp, #12
   159e2:	f7fd ffef 	bl	139c4 <console_write>
    console_write("\n", 1);
   159e6:	2101      	movs	r1, #1
   159e8:	4807      	ldr	r0, [pc, #28]	; (15a08 <shell_nlip_mtx+0x138>)
   159ea:	f7fd ffeb 	bl	139c4 <console_write>
   159ee:	46da      	mov	sl, fp
    (void)console_unlock();
   159f0:	f7fd fe0c 	bl	1360c <console_unlock>
   159f4:	e798      	b.n	15928 <shell_nlip_mtx+0x58>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   159f6:	4682      	mov	sl, r0
   159f8:	e7fa      	b.n	159f0 <shell_nlip_mtx+0x120>
        rc = -1;
   159fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    return (rc);
   159fe:	e793      	b.n	15928 <shell_nlip_mtx+0x58>
   15a00:	00026464 	.word	0x00026464
   15a04:	55555556 	.word	0x55555556
   15a08:	00026304 	.word	0x00026304

00015a0c <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   15a0c:	b510      	push	{r4, lr}
   15a0e:	e005      	b.n	15a1c <shell_event_data_in+0x10>
   15a10:	4604      	mov	r4, r0
        m = os_mqueue_get(&g_shell_nlip_mq);
        if (!m) {
            break;
        }

        (void) shell_nlip_mtx(m);
   15a12:	f7ff ff5d 	bl	158d0 <shell_nlip_mtx>

        os_mbuf_free_chain(m);
   15a16:	4620      	mov	r0, r4
   15a18:	f7f4 ff79 	bl	a90e <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   15a1c:	4802      	ldr	r0, [pc, #8]	; (15a28 <shell_event_data_in+0x1c>)
   15a1e:	f7f4 ff0c 	bl	a83a <os_mqueue_get>
        if (!m) {
   15a22:	2800      	cmp	r0, #0
   15a24:	d1f4      	bne.n	15a10 <shell_event_data_in+0x4>
    }
}
   15a26:	bd10      	pop	{r4, pc}
   15a28:	20004b58 	.word	0x20004b58

00015a2c <shell_nlip_clear_pkt>:
{
   15a2c:	b508      	push	{r3, lr}
    if (g_nlip_mbuf) {
   15a2e:	4b06      	ldr	r3, [pc, #24]	; (15a48 <shell_nlip_clear_pkt+0x1c>)
   15a30:	6818      	ldr	r0, [r3, #0]
   15a32:	b120      	cbz	r0, 15a3e <shell_nlip_clear_pkt+0x12>
        os_mbuf_free_chain(g_nlip_mbuf);
   15a34:	f7f4 ff6b 	bl	a90e <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   15a38:	4b03      	ldr	r3, [pc, #12]	; (15a48 <shell_nlip_clear_pkt+0x1c>)
   15a3a:	2200      	movs	r2, #0
   15a3c:	601a      	str	r2, [r3, #0]
    g_nlip_expected_len = 0;
   15a3e:	4b03      	ldr	r3, [pc, #12]	; (15a4c <shell_nlip_clear_pkt+0x20>)
   15a40:	2200      	movs	r2, #0
   15a42:	801a      	strh	r2, [r3, #0]
}
   15a44:	bd08      	pop	{r3, pc}
   15a46:	bf00      	nop
   15a48:	20004b4c 	.word	0x20004b4c
   15a4c:	20004b48 	.word	0x20004b48

00015a50 <shell_nlip_process>:
{
   15a50:	b538      	push	{r3, r4, r5, lr}
   15a52:	4605      	mov	r5, r0
    rc = base64_decode(data, data);
   15a54:	4601      	mov	r1, r0
   15a56:	f001 ff25 	bl	178a4 <base64_decode>
    if (rc < 0) {
   15a5a:	1e04      	subs	r4, r0, #0
   15a5c:	db18      	blt.n	15a90 <shell_nlip_process+0x40>
    if (g_nlip_mbuf == NULL) {
   15a5e:	4b30      	ldr	r3, [pc, #192]	; (15b20 <shell_nlip_process+0xd0>)
   15a60:	681b      	ldr	r3, [r3, #0]
   15a62:	b1bb      	cbz	r3, 15a94 <shell_nlip_process+0x44>
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   15a64:	4b2e      	ldr	r3, [pc, #184]	; (15b20 <shell_nlip_process+0xd0>)
   15a66:	6818      	ldr	r0, [r3, #0]
   15a68:	8a01      	ldrh	r1, [r0, #16]
   15a6a:	4b2e      	ldr	r3, [pc, #184]	; (15b24 <shell_nlip_process+0xd4>)
   15a6c:	881b      	ldrh	r3, [r3, #0]
   15a6e:	1a5b      	subs	r3, r3, r1
   15a70:	42a3      	cmp	r3, r4
   15a72:	bfa8      	it	ge
   15a74:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   15a76:	b29b      	uxth	r3, r3
   15a78:	462a      	mov	r2, r5
   15a7a:	f7f5 f87f 	bl	ab7c <os_mbuf_copyinto>
    if (rc != 0) {
   15a7e:	4604      	mov	r4, r0
   15a80:	b930      	cbnz	r0, 15a90 <shell_nlip_process+0x40>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   15a82:	4b27      	ldr	r3, [pc, #156]	; (15b20 <shell_nlip_process+0xd0>)
   15a84:	681d      	ldr	r5, [r3, #0]
   15a86:	8a2a      	ldrh	r2, [r5, #16]
   15a88:	4b26      	ldr	r3, [pc, #152]	; (15b24 <shell_nlip_process+0xd4>)
   15a8a:	881b      	ldrh	r3, [r3, #0]
   15a8c:	429a      	cmp	r2, r3
   15a8e:	d014      	beq.n	15aba <shell_nlip_process+0x6a>
}
   15a90:	4620      	mov	r0, r4
   15a92:	bd38      	pop	{r3, r4, r5, pc}
        if (len < 2) {
   15a94:	2c01      	cmp	r4, #1
   15a96:	dd3c      	ble.n	15b12 <shell_nlip_process+0xc2>
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   15a98:	882b      	ldrh	r3, [r5, #0]
   15a9a:	0218      	lsls	r0, r3, #8
   15a9c:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   15aa0:	b280      	uxth	r0, r0
   15aa2:	4b20      	ldr	r3, [pc, #128]	; (15b24 <shell_nlip_process+0xd4>)
   15aa4:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   15aa6:	2100      	movs	r1, #0
   15aa8:	f7f4 f894 	bl	9bd4 <os_msys_get_pkthdr>
   15aac:	4b1c      	ldr	r3, [pc, #112]	; (15b20 <shell_nlip_process+0xd0>)
   15aae:	6018      	str	r0, [r3, #0]
        if (!g_nlip_mbuf) {
   15ab0:	2800      	cmp	r0, #0
   15ab2:	d031      	beq.n	15b18 <shell_nlip_process+0xc8>
        data += sizeof(uint16_t);
   15ab4:	3502      	adds	r5, #2
        len -= sizeof(uint16_t);
   15ab6:	3c02      	subs	r4, #2
   15ab8:	e7d4      	b.n	15a64 <shell_nlip_process+0x14>
        if (g_shell_nlip_in_func) {
   15aba:	4b1b      	ldr	r3, [pc, #108]	; (15b28 <shell_nlip_process+0xd8>)
   15abc:	681b      	ldr	r3, [r3, #0]
   15abe:	b323      	cbz	r3, 15b0a <shell_nlip_process+0xba>
            crc = CRC16_INITIAL_CRC;
   15ac0:	2000      	movs	r0, #0
   15ac2:	e004      	b.n	15ace <shell_nlip_process+0x7e>
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   15ac4:	88ea      	ldrh	r2, [r5, #6]
   15ac6:	6829      	ldr	r1, [r5, #0]
   15ac8:	f001 fb40 	bl	1714c <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   15acc:	68ed      	ldr	r5, [r5, #12]
   15ace:	2d00      	cmp	r5, #0
   15ad0:	d1f8      	bne.n	15ac4 <shell_nlip_process+0x74>
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   15ad2:	b918      	cbnz	r0, 15adc <shell_nlip_process+0x8c>
   15ad4:	4b13      	ldr	r3, [pc, #76]	; (15b24 <shell_nlip_process+0xd4>)
   15ad6:	881b      	ldrh	r3, [r3, #0]
   15ad8:	2b01      	cmp	r3, #1
   15ada:	d809      	bhi.n	15af0 <shell_nlip_process+0xa0>
                os_mbuf_free_chain(g_nlip_mbuf);
   15adc:	4b10      	ldr	r3, [pc, #64]	; (15b20 <shell_nlip_process+0xd0>)
   15ade:	6818      	ldr	r0, [r3, #0]
   15ae0:	f7f4 ff15 	bl	a90e <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   15ae4:	2300      	movs	r3, #0
   15ae6:	4a0e      	ldr	r2, [pc, #56]	; (15b20 <shell_nlip_process+0xd0>)
   15ae8:	6013      	str	r3, [r2, #0]
        g_nlip_expected_len = 0;
   15aea:	4a0e      	ldr	r2, [pc, #56]	; (15b24 <shell_nlip_process+0xd4>)
   15aec:	8013      	strh	r3, [r2, #0]
   15aee:	e7cf      	b.n	15a90 <shell_nlip_process+0x40>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   15af0:	4d0b      	ldr	r5, [pc, #44]	; (15b20 <shell_nlip_process+0xd0>)
   15af2:	f06f 0101 	mvn.w	r1, #1
   15af6:	6828      	ldr	r0, [r5, #0]
   15af8:	f7f4 ffac 	bl	aa54 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   15afc:	4b0a      	ldr	r3, [pc, #40]	; (15b28 <shell_nlip_process+0xd8>)
   15afe:	681b      	ldr	r3, [r3, #0]
   15b00:	4a0a      	ldr	r2, [pc, #40]	; (15b2c <shell_nlip_process+0xdc>)
   15b02:	6811      	ldr	r1, [r2, #0]
   15b04:	6828      	ldr	r0, [r5, #0]
   15b06:	4798      	blx	r3
   15b08:	e7ec      	b.n	15ae4 <shell_nlip_process+0x94>
            os_mbuf_free_chain(g_nlip_mbuf);
   15b0a:	4628      	mov	r0, r5
   15b0c:	f7f4 feff 	bl	a90e <os_mbuf_free_chain>
   15b10:	e7e8      	b.n	15ae4 <shell_nlip_process+0x94>
            rc = -1;
   15b12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15b16:	e7bb      	b.n	15a90 <shell_nlip_process+0x40>
            rc = -1;
   15b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15b1c:	e7b8      	b.n	15a90 <shell_nlip_process+0x40>
   15b1e:	bf00      	nop
   15b20:	20004b4c 	.word	0x20004b4c
   15b24:	20004b48 	.word	0x20004b48
   15b28:	20004b54 	.word	0x20004b54
   15b2c:	20004b50 	.word	0x20004b50

00015b30 <shell_nlip_init>:

void
shell_nlip_init(void)
{
   15b30:	b508      	push	{r3, lr}
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   15b32:	2200      	movs	r2, #0
   15b34:	4902      	ldr	r1, [pc, #8]	; (15b40 <shell_nlip_init+0x10>)
   15b36:	4803      	ldr	r0, [pc, #12]	; (15b44 <shell_nlip_init+0x14>)
   15b38:	f7f4 fe74 	bl	a824 <os_mqueue_init>
}
   15b3c:	bd08      	pop	{r3, pc}
   15b3e:	bf00      	nop
   15b40:	00015a0d 	.word	0x00015a0d
   15b44:	20004b58 	.word	0x20004b58

00015b48 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   15b48:	b500      	push	{lr}
   15b4a:	b083      	sub	sp, #12
   15b4c:	4602      	mov	r2, r0
   15b4e:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   15b50:	69d3      	ldr	r3, [r2, #28]
   15b52:	9300      	str	r3, [sp, #0]
   15b54:	7ed3      	ldrb	r3, [r2, #27]
   15b56:	7e92      	ldrb	r2, [r2, #26]
   15b58:	4903      	ldr	r1, [pc, #12]	; (15b68 <shell_os_ls_dev+0x20>)
   15b5a:	f7fc ffc1 	bl	12ae0 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   15b5e:	2000      	movs	r0, #0
   15b60:	b003      	add	sp, #12
   15b62:	f85d fb04 	ldr.w	pc, [sp], #4
   15b66:	bf00      	nop
   15b68:	00026468 	.word	0x00026468

00015b6c <shell_os_mpool_display_cmd>:
{
   15b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b6e:	b091      	sub	sp, #68	; 0x44
   15b70:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   15b72:	2901      	cmp	r1, #1
   15b74:	dd04      	ble.n	15b80 <shell_os_mpool_display_cmd+0x14>
   15b76:	6855      	ldr	r5, [r2, #4]
   15b78:	782b      	ldrb	r3, [r5, #0]
   15b7a:	b913      	cbnz	r3, 15b82 <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   15b7c:	2500      	movs	r5, #0
   15b7e:	e000      	b.n	15b82 <shell_os_mpool_display_cmd+0x16>
   15b80:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   15b82:	491d      	ldr	r1, [pc, #116]	; (15bf8 <shell_os_mpool_display_cmd+0x8c>)
   15b84:	4630      	mov	r0, r6
   15b86:	f7fc ffab 	bl	12ae0 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   15b8a:	4b1c      	ldr	r3, [pc, #112]	; (15bfc <shell_os_mpool_display_cmd+0x90>)
   15b8c:	9302      	str	r3, [sp, #8]
   15b8e:	4b1c      	ldr	r3, [pc, #112]	; (15c00 <shell_os_mpool_display_cmd+0x94>)
   15b90:	9301      	str	r3, [sp, #4]
   15b92:	4b1c      	ldr	r3, [pc, #112]	; (15c04 <shell_os_mpool_display_cmd+0x98>)
   15b94:	9300      	str	r3, [sp, #0]
   15b96:	4b1c      	ldr	r3, [pc, #112]	; (15c08 <shell_os_mpool_display_cmd+0x9c>)
   15b98:	4a1c      	ldr	r2, [pc, #112]	; (15c0c <shell_os_mpool_display_cmd+0xa0>)
   15b9a:	491d      	ldr	r1, [pc, #116]	; (15c10 <shell_os_mpool_display_cmd+0xa4>)
   15b9c:	4630      	mov	r0, r6
   15b9e:	f7fc ff9f 	bl	12ae0 <streamer_printf>
    found = 0;
   15ba2:	2700      	movs	r7, #0
    mp = NULL;
   15ba4:	463c      	mov	r4, r7
   15ba6:	e00b      	b.n	15bc0 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   15ba8:	9b07      	ldr	r3, [sp, #28]
   15baa:	9302      	str	r3, [sp, #8]
   15bac:	9a06      	ldr	r2, [sp, #24]
   15bae:	9201      	str	r2, [sp, #4]
   15bb0:	9a05      	ldr	r2, [sp, #20]
   15bb2:	9200      	str	r2, [sp, #0]
   15bb4:	9b04      	ldr	r3, [sp, #16]
   15bb6:	aa08      	add	r2, sp, #32
   15bb8:	4916      	ldr	r1, [pc, #88]	; (15c14 <shell_os_mpool_display_cmd+0xa8>)
   15bba:	4630      	mov	r0, r6
   15bbc:	f7fc ff90 	bl	12ae0 <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   15bc0:	a904      	add	r1, sp, #16
   15bc2:	4620      	mov	r0, r4
   15bc4:	f7f3 ff76 	bl	9ab4 <os_mempool_info_get_next>
        if (mp == NULL) {
   15bc8:	4604      	mov	r4, r0
   15bca:	b148      	cbz	r0, 15be0 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   15bcc:	2d00      	cmp	r5, #0
   15bce:	d0eb      	beq.n	15ba8 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   15bd0:	a908      	add	r1, sp, #32
   15bd2:	4628      	mov	r0, r5
   15bd4:	f7fa fd8c 	bl	106f0 <strcmp>
   15bd8:	2800      	cmp	r0, #0
   15bda:	d1f1      	bne.n	15bc0 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   15bdc:	2701      	movs	r7, #1
   15bde:	e7e3      	b.n	15ba8 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   15be0:	b105      	cbz	r5, 15be4 <shell_os_mpool_display_cmd+0x78>
   15be2:	b117      	cbz	r7, 15bea <shell_os_mpool_display_cmd+0x7e>
}
   15be4:	2000      	movs	r0, #0
   15be6:	b011      	add	sp, #68	; 0x44
   15be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   15bea:	462a      	mov	r2, r5
   15bec:	490a      	ldr	r1, [pc, #40]	; (15c18 <shell_os_mpool_display_cmd+0xac>)
   15bee:	4630      	mov	r0, r6
   15bf0:	f7fc ff76 	bl	12ae0 <streamer_printf>
   15bf4:	e7f6      	b.n	15be4 <shell_os_mpool_display_cmd+0x78>
   15bf6:	bf00      	nop
   15bf8:	00026474 	.word	0x00026474
   15bfc:	00025fbc 	.word	0x00025fbc
   15c00:	000264a8 	.word	0x000264a8
   15c04:	00026f70 	.word	0x00026f70
   15c08:	00026480 	.word	0x00026480
   15c0c:	00026488 	.word	0x00026488
   15c10:	00026490 	.word	0x00026490
   15c14:	000264b0 	.word	0x000264b0
   15c18:	000264c8 	.word	0x000264c8

00015c1c <shell_os_date_cmd>:
{
   15c1c:	b530      	push	{r4, r5, lr}
   15c1e:	b08f      	sub	sp, #60	; 0x3c
   15c20:	461c      	mov	r4, r3
    if (argc == 0) {
   15c22:	3901      	subs	r1, #1
   15c24:	d00f      	beq.n	15c46 <shell_os_date_cmd+0x2a>
   15c26:	4610      	mov	r0, r2
    } else if (argc == 1) {
   15c28:	2901      	cmp	r1, #1
   15c2a:	d132      	bne.n	15c92 <shell_os_date_cmd+0x76>
        rc = datetime_parse(*argv, &tv, &tz);
   15c2c:	aa09      	add	r2, sp, #36	; 0x24
   15c2e:	a90a      	add	r1, sp, #40	; 0x28
   15c30:	6840      	ldr	r0, [r0, #4]
   15c32:	f001 f923 	bl	16e7c <datetime_parse>
        if (rc == 0) {
   15c36:	4605      	mov	r5, r0
   15c38:	bb30      	cbnz	r0, 15c88 <shell_os_date_cmd+0x6c>
            rc = os_settimeofday(&tv, &tz);
   15c3a:	a909      	add	r1, sp, #36	; 0x24
   15c3c:	a80a      	add	r0, sp, #40	; 0x28
   15c3e:	f7f4 fc7d 	bl	a53c <os_settimeofday>
   15c42:	4605      	mov	r5, r0
   15c44:	e011      	b.n	15c6a <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   15c46:	a909      	add	r1, sp, #36	; 0x24
   15c48:	a80a      	add	r0, sp, #40	; 0x28
   15c4a:	f7f4 fc2b 	bl	a4a4 <os_gettimeofday>
        assert(rc == 0);
   15c4e:	b978      	cbnz	r0, 15c70 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   15c50:	2321      	movs	r3, #33	; 0x21
   15c52:	466a      	mov	r2, sp
   15c54:	a909      	add	r1, sp, #36	; 0x24
   15c56:	a80a      	add	r0, sp, #40	; 0x28
   15c58:	f001 fa10 	bl	1707c <datetime_format>
        assert(rc == 0);
   15c5c:	4605      	mov	r5, r0
   15c5e:	b968      	cbnz	r0, 15c7c <shell_os_date_cmd+0x60>
        streamer_printf(streamer, "%s\n", buf);
   15c60:	466a      	mov	r2, sp
   15c62:	490d      	ldr	r1, [pc, #52]	; (15c98 <shell_os_date_cmd+0x7c>)
   15c64:	4620      	mov	r0, r4
   15c66:	f7fc ff3b 	bl	12ae0 <streamer_printf>
}
   15c6a:	4628      	mov	r0, r5
   15c6c:	b00f      	add	sp, #60	; 0x3c
   15c6e:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   15c70:	2300      	movs	r3, #0
   15c72:	461a      	mov	r2, r3
   15c74:	4619      	mov	r1, r3
   15c76:	4618      	mov	r0, r3
   15c78:	f7f3 faa4 	bl	91c4 <__assert_func>
        assert(rc == 0);
   15c7c:	2300      	movs	r3, #0
   15c7e:	461a      	mov	r2, r3
   15c80:	4619      	mov	r1, r3
   15c82:	4618      	mov	r0, r3
   15c84:	f7f3 fa9e 	bl	91c4 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   15c88:	4904      	ldr	r1, [pc, #16]	; (15c9c <shell_os_date_cmd+0x80>)
   15c8a:	4620      	mov	r0, r4
   15c8c:	f7fc ff28 	bl	12ae0 <streamer_printf>
   15c90:	e7eb      	b.n	15c6a <shell_os_date_cmd+0x4e>
        rc = -1;
   15c92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   15c96:	e7e8      	b.n	15c6a <shell_os_date_cmd+0x4e>
   15c98:	00025db0 	.word	0x00025db0
   15c9c:	000264f4 	.word	0x000264f4

00015ca0 <shell_os_reset_cmd>:
{
   15ca0:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   15ca2:	200c      	movs	r0, #12
   15ca4:	f7f4 fbea 	bl	a47c <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   15ca8:	2006      	movs	r0, #6
   15caa:	f7f3 fbf4 	bl	9496 <os_reboot>
}
   15cae:	2000      	movs	r0, #0
   15cb0:	bd08      	pop	{r3, pc}
	...

00015cb4 <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   15cb4:	b510      	push	{r4, lr}
   15cb6:	b082      	sub	sp, #8
   15cb8:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   15cba:	4b07      	ldr	r3, [pc, #28]	; (15cd8 <shell_os_ls_dev_cmd+0x24>)
   15cbc:	9300      	str	r3, [sp, #0]
   15cbe:	4b07      	ldr	r3, [pc, #28]	; (15cdc <shell_os_ls_dev_cmd+0x28>)
   15cc0:	4a07      	ldr	r2, [pc, #28]	; (15ce0 <shell_os_ls_dev_cmd+0x2c>)
   15cc2:	4908      	ldr	r1, [pc, #32]	; (15ce4 <shell_os_ls_dev_cmd+0x30>)
   15cc4:	4620      	mov	r0, r4
   15cc6:	f7fc ff0b 	bl	12ae0 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   15cca:	4621      	mov	r1, r4
   15ccc:	4806      	ldr	r0, [pc, #24]	; (15ce8 <shell_os_ls_dev_cmd+0x34>)
   15cce:	f7f3 fd9d 	bl	980c <os_dev_walk>
    return 0;
}
   15cd2:	2000      	movs	r0, #0
   15cd4:	b002      	add	sp, #8
   15cd6:	bd10      	pop	{r4, pc}
   15cd8:	00026488 	.word	0x00026488
   15cdc:	00026508 	.word	0x00026508
   15ce0:	0002650c 	.word	0x0002650c
   15ce4:	00026510 	.word	0x00026510
   15ce8:	00015b49 	.word	0x00015b49

00015cec <shell_os_tasks_display_cmd>:
{
   15cec:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cee:	b097      	sub	sp, #92	; 0x5c
   15cf0:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   15cf2:	2901      	cmp	r1, #1
   15cf4:	dd04      	ble.n	15d00 <shell_os_tasks_display_cmd+0x14>
   15cf6:	6855      	ldr	r5, [r2, #4]
   15cf8:	782b      	ldrb	r3, [r5, #0]
   15cfa:	b913      	cbnz	r3, 15d02 <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   15cfc:	2500      	movs	r5, #0
   15cfe:	e000      	b.n	15d02 <shell_os_tasks_display_cmd+0x16>
   15d00:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   15d02:	4928      	ldr	r1, [pc, #160]	; (15da4 <shell_os_tasks_display_cmd+0xb8>)
   15d04:	4630      	mov	r0, r6
   15d06:	f7fc feeb 	bl	12ae0 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   15d0a:	4b27      	ldr	r3, [pc, #156]	; (15da8 <shell_os_tasks_display_cmd+0xbc>)
   15d0c:	9307      	str	r3, [sp, #28]
   15d0e:	4b27      	ldr	r3, [pc, #156]	; (15dac <shell_os_tasks_display_cmd+0xc0>)
   15d10:	9306      	str	r3, [sp, #24]
   15d12:	4b27      	ldr	r3, [pc, #156]	; (15db0 <shell_os_tasks_display_cmd+0xc4>)
   15d14:	9305      	str	r3, [sp, #20]
   15d16:	4b27      	ldr	r3, [pc, #156]	; (15db4 <shell_os_tasks_display_cmd+0xc8>)
   15d18:	9304      	str	r3, [sp, #16]
   15d1a:	4b27      	ldr	r3, [pc, #156]	; (15db8 <shell_os_tasks_display_cmd+0xcc>)
   15d1c:	9303      	str	r3, [sp, #12]
   15d1e:	4b27      	ldr	r3, [pc, #156]	; (15dbc <shell_os_tasks_display_cmd+0xd0>)
   15d20:	9302      	str	r3, [sp, #8]
   15d22:	4b27      	ldr	r3, [pc, #156]	; (15dc0 <shell_os_tasks_display_cmd+0xd4>)
   15d24:	9301      	str	r3, [sp, #4]
   15d26:	4b27      	ldr	r3, [pc, #156]	; (15dc4 <shell_os_tasks_display_cmd+0xd8>)
   15d28:	9300      	str	r3, [sp, #0]
   15d2a:	4b27      	ldr	r3, [pc, #156]	; (15dc8 <shell_os_tasks_display_cmd+0xdc>)
   15d2c:	4a27      	ldr	r2, [pc, #156]	; (15dcc <shell_os_tasks_display_cmd+0xe0>)
   15d2e:	4928      	ldr	r1, [pc, #160]	; (15dd0 <shell_os_tasks_display_cmd+0xe4>)
   15d30:	4630      	mov	r0, r6
   15d32:	f7fc fed5 	bl	12ae0 <streamer_printf>
    found = 0;
   15d36:	2700      	movs	r7, #0
    prev_task = NULL;
   15d38:	463c      	mov	r4, r7
   15d3a:	e017      	b.n	15d6c <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   15d3c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   15d40:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   15d44:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   15d48:	980d      	ldr	r0, [sp, #52]	; 0x34
   15d4a:	9006      	str	r0, [sp, #24]
   15d4c:	980c      	ldr	r0, [sp, #48]	; 0x30
   15d4e:	9005      	str	r0, [sp, #20]
   15d50:	9104      	str	r1, [sp, #16]
   15d52:	9303      	str	r3, [sp, #12]
   15d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15d56:	9302      	str	r3, [sp, #8]
   15d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15d5a:	9101      	str	r1, [sp, #4]
   15d5c:	9200      	str	r2, [sp, #0]
   15d5e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   15d62:	aa0e      	add	r2, sp, #56	; 0x38
   15d64:	491b      	ldr	r1, [pc, #108]	; (15dd4 <shell_os_tasks_display_cmd+0xe8>)
   15d66:	4630      	mov	r0, r6
   15d68:	f7fc feba 	bl	12ae0 <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   15d6c:	a908      	add	r1, sp, #32
   15d6e:	4620      	mov	r0, r4
   15d70:	f7f4 fab4 	bl	a2dc <os_task_info_get_next>
        if (prev_task == NULL) {
   15d74:	4604      	mov	r4, r0
   15d76:	b148      	cbz	r0, 15d8c <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   15d78:	2d00      	cmp	r5, #0
   15d7a:	d0df      	beq.n	15d3c <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   15d7c:	a90e      	add	r1, sp, #56	; 0x38
   15d7e:	4628      	mov	r0, r5
   15d80:	f7fa fcb6 	bl	106f0 <strcmp>
   15d84:	2800      	cmp	r0, #0
   15d86:	d1f1      	bne.n	15d6c <shell_os_tasks_display_cmd+0x80>
                found = 1;
   15d88:	2701      	movs	r7, #1
   15d8a:	e7d7      	b.n	15d3c <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   15d8c:	b105      	cbz	r5, 15d90 <shell_os_tasks_display_cmd+0xa4>
   15d8e:	b117      	cbz	r7, 15d96 <shell_os_tasks_display_cmd+0xaa>
}
   15d90:	2000      	movs	r0, #0
   15d92:	b017      	add	sp, #92	; 0x5c
   15d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   15d96:	462a      	mov	r2, r5
   15d98:	490f      	ldr	r1, [pc, #60]	; (15dd8 <shell_os_tasks_display_cmd+0xec>)
   15d9a:	4630      	mov	r0, r6
   15d9c:	f7fc fea0 	bl	12ae0 <streamer_printf>
   15da0:	e7f6      	b.n	15d90 <shell_os_tasks_display_cmd+0xa4>
   15da2:	bf00      	nop
   15da4:	0002651c 	.word	0x0002651c
   15da8:	00026508 	.word	0x00026508
   15dac:	00026560 	.word	0x00026560
   15db0:	00026568 	.word	0x00026568
   15db4:	00025fd4 	.word	0x00025fd4
   15db8:	00026570 	.word	0x00026570
   15dbc:	00026578 	.word	0x00026578
   15dc0:	00025fec 	.word	0x00025fec
   15dc4:	00025fc8 	.word	0x00025fc8
   15dc8:	00026528 	.word	0x00026528
   15dcc:	0002652c 	.word	0x0002652c
   15dd0:	00026534 	.word	0x00026534
   15dd4:	0002657c 	.word	0x0002657c
   15dd8:	000265a8 	.word	0x000265a8

00015ddc <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   15ddc:	b530      	push	{r4, r5, lr}
   15dde:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   15de0:	4c0a      	ldr	r4, [pc, #40]	; (15e0c <shell_os_register+0x30>)
   15de2:	e000      	b.n	15de6 <shell_os_register+0xa>
   15de4:	3410      	adds	r4, #16
   15de6:	68a3      	ldr	r3, [r4, #8]
   15de8:	b16b      	cbz	r3, 15e06 <shell_os_register+0x2a>
        rc = shell_cmd_register(cmd);
   15dea:	4620      	mov	r0, r4
   15dec:	f7ff fd0a 	bl	15804 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   15df0:	2800      	cmp	r0, #0
   15df2:	d0f7      	beq.n	15de4 <shell_os_register+0x8>
   15df4:	2000      	movs	r0, #0
   15df6:	9000      	str	r0, [sp, #0]
   15df8:	4b05      	ldr	r3, [pc, #20]	; (15e10 <shell_os_register+0x34>)
   15dfa:	681d      	ldr	r5, [r3, #0]
   15dfc:	4603      	mov	r3, r0
   15dfe:	4602      	mov	r2, r0
   15e00:	4601      	mov	r1, r0
   15e02:	47a8      	blx	r5
   15e04:	e7ee      	b.n	15de4 <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   15e06:	b003      	add	sp, #12
   15e08:	bd30      	pop	{r4, r5, pc}
   15e0a:	bf00      	nop
   15e0c:	00026698 	.word	0x00026698
   15e10:	20000768 	.word	0x20000768

00015e14 <shell_ticks_cmd>:
/**
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
   15e14:	b510      	push	{r4, lr}
    if (argc > 1) {
   15e16:	2801      	cmp	r0, #1
   15e18:	dd16      	ble.n	15e48 <shell_ticks_cmd+0x34>
        if (!strcmp(argv[1], "on")) {
   15e1a:	684c      	ldr	r4, [r1, #4]
   15e1c:	490d      	ldr	r1, [pc, #52]	; (15e54 <shell_ticks_cmd+0x40>)
   15e1e:	4620      	mov	r0, r4
   15e20:	f7fa fc66 	bl	106f0 <strcmp>
   15e24:	b150      	cbz	r0, 15e3c <shell_ticks_cmd+0x28>
            console_yes_ticks();
            console_printf(" Console Ticks on\n");
        }
        else if (!strcmp(argv[1],"off")) {
   15e26:	490c      	ldr	r1, [pc, #48]	; (15e58 <shell_ticks_cmd+0x44>)
   15e28:	4620      	mov	r0, r4
   15e2a:	f7fa fc61 	bl	106f0 <strcmp>
   15e2e:	b970      	cbnz	r0, 15e4e <shell_ticks_cmd+0x3a>
            console_printf(" Console Ticks off\n");
   15e30:	480a      	ldr	r0, [pc, #40]	; (15e5c <shell_ticks_cmd+0x48>)
   15e32:	f7fd ffef 	bl	13e14 <console_printf>
            console_no_ticks();
   15e36:	f7fe f8a3 	bl	13f80 <console_no_ticks>
        }
        return 0;
   15e3a:	e008      	b.n	15e4e <shell_ticks_cmd+0x3a>
            console_yes_ticks();
   15e3c:	f7fe f8a6 	bl	13f8c <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   15e40:	4807      	ldr	r0, [pc, #28]	; (15e60 <shell_ticks_cmd+0x4c>)
   15e42:	f7fd ffe7 	bl	13e14 <console_printf>
   15e46:	e002      	b.n	15e4e <shell_ticks_cmd+0x3a>
    }
    console_printf(" Usage: ticks [on|off]\n");
   15e48:	4806      	ldr	r0, [pc, #24]	; (15e64 <shell_ticks_cmd+0x50>)
   15e4a:	f7fd ffe3 	bl	13e14 <console_printf>
    return 0;
}
   15e4e:	2000      	movs	r0, #0
   15e50:	bd10      	pop	{r4, pc}
   15e52:	bf00      	nop
   15e54:	00026728 	.word	0x00026728
   15e58:	00025d10 	.word	0x00025d10
   15e5c:	00026740 	.word	0x00026740
   15e60:	0002672c 	.word	0x0002672c
   15e64:	00026754 	.word	0x00026754

00015e68 <shell_prompt_register>:
};


void
shell_prompt_register(void)
{
   15e68:	b508      	push	{r3, lr}
    shell_register(SHELL_PROMPT, prompt_commands);
   15e6a:	4902      	ldr	r1, [pc, #8]	; (15e74 <shell_prompt_register+0xc>)
   15e6c:	4802      	ldr	r0, [pc, #8]	; (15e78 <shell_prompt_register+0x10>)
   15e6e:	f7ff fca7 	bl	157c0 <shell_register>
}
   15e72:	bd08      	pop	{r3, pc}
   15e74:	000267b0 	.word	0x000267b0
   15e78:	0002676c 	.word	0x0002676c

00015e7c <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   15e7c:	88c3      	ldrh	r3, [r0, #6]
   15e7e:	f013 0f01 	tst.w	r3, #1
   15e82:	d001      	beq.n	15e88 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   15e84:	2038      	movs	r0, #56	; 0x38
   15e86:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   15e88:	2014      	movs	r0, #20
    }
}
   15e8a:	4770      	bx	lr

00015e8c <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   15e8c:	b570      	push	{r4, r5, r6, lr}
   15e8e:	4606      	mov	r6, r0
   15e90:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   15e92:	4b0f      	ldr	r3, [pc, #60]	; (15ed0 <stats_register_internal+0x44>)
   15e94:	681c      	ldr	r4, [r3, #0]
   15e96:	e000      	b.n	15e9a <stats_register_internal+0xe>
   15e98:	6924      	ldr	r4, [r4, #16]
   15e9a:	b14c      	cbz	r4, 15eb0 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   15e9c:	4631      	mov	r1, r6
   15e9e:	6820      	ldr	r0, [r4, #0]
   15ea0:	f7fa fc26 	bl	106f0 <strcmp>
   15ea4:	b188      	cbz	r0, 15eca <stats_register_internal+0x3e>
   15ea6:	42ac      	cmp	r4, r5
   15ea8:	d1f6      	bne.n	15e98 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   15eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15eae:	e00b      	b.n	15ec8 <stats_register_internal+0x3c>
    shdr->s_name = name;
   15eb0:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   15eb2:	2000      	movs	r0, #0
   15eb4:	6128      	str	r0, [r5, #16]
   15eb6:	4b06      	ldr	r3, [pc, #24]	; (15ed0 <stats_register_internal+0x44>)
   15eb8:	685a      	ldr	r2, [r3, #4]
   15eba:	6015      	str	r5, [r2, #0]
   15ebc:	3510      	adds	r5, #16
   15ebe:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   15ec0:	4a04      	ldr	r2, [pc, #16]	; (15ed4 <stats_register_internal+0x48>)
   15ec2:	6953      	ldr	r3, [r2, #20]
   15ec4:	3301      	adds	r3, #1
   15ec6:	6153      	str	r3, [r2, #20]
}
   15ec8:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   15eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15ece:	e7fb      	b.n	15ec8 <stats_register_internal+0x3c>
   15ed0:	20000750 	.word	0x20000750
   15ed4:	20004b70 	.word	0x20004b70

00015ed8 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   15ed8:	7943      	ldrb	r3, [r0, #5]
   15eda:	7900      	ldrb	r0, [r0, #4]
}
   15edc:	fb03 f000 	mul.w	r0, r3, r0
   15ee0:	4770      	bx	lr
	...

00015ee4 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   15ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ee8:	b085      	sub	sp, #20
   15eea:	4604      	mov	r4, r0
   15eec:	4688      	mov	r8, r1
   15eee:	4617      	mov	r7, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   15ef0:	f7ff ffc4 	bl	15e7c <stats_offset>
   15ef4:	4681      	mov	r9, r0
   15ef6:	b285      	uxth	r5, r0
    cur = start;
    end = start + stats_size(hdr);
   15ef8:	4620      	mov	r0, r4
   15efa:	f7ff ffed 	bl	15ed8 <stats_size>
   15efe:	fa15 f680 	uxtah	r6, r5, r0
   15f02:	b2b6      	uxth	r6, r6

    while (cur < end) {
   15f04:	e00d      	b.n	15f22 <stats_walk+0x3e>
         * offset.  This annotation allows for naming only certain statistics,
         * and doesn't enforce ordering restrictions on the stats name map.
         */
        for (i = 0; i < hdr->s_map_cnt; ++i) {
            if (hdr->s_map[i].snm_off == cur) {
                name = hdr->s_map[i].snm_name;
   15f06:	f8d0 2002 	ldr.w	r2, [r0, #2]
                break;
   15f0a:	e000      	b.n	15f0e <stats_walk+0x2a>
        name = NULL;
   15f0c:	2200      	movs	r2, #0
#endif
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
   15f0e:	b1ca      	cbz	r2, 15f44 <stats_walk+0x60>
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
            name_buf[len] = '\0';
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   15f10:	462b      	mov	r3, r5
   15f12:	4639      	mov	r1, r7
   15f14:	4620      	mov	r0, r4
   15f16:	47c0      	blx	r8
        if (rc != 0) {
   15f18:	4603      	mov	r3, r0
   15f1a:	bb40      	cbnz	r0, 15f6e <stats_walk+0x8a>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   15f1c:	7923      	ldrb	r3, [r4, #4]
   15f1e:	441d      	add	r5, r3
   15f20:	b2ad      	uxth	r5, r5
    while (cur < end) {
   15f22:	42b5      	cmp	r5, r6
   15f24:	d222      	bcs.n	15f6c <stats_walk+0x88>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   15f26:	2300      	movs	r3, #0
   15f28:	68e2      	ldr	r2, [r4, #12]
   15f2a:	429a      	cmp	r2, r3
   15f2c:	ddee      	ble.n	15f0c <stats_walk+0x28>
            if (hdr->s_map[i].snm_off == cur) {
   15f2e:	68a2      	ldr	r2, [r4, #8]
   15f30:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15f34:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   15f38:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   15f3c:	42aa      	cmp	r2, r5
   15f3e:	d0e2      	beq.n	15f06 <stats_walk+0x22>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   15f40:	3301      	adds	r3, #1
   15f42:	e7f1      	b.n	15f28 <stats_walk+0x44>
            ent_n = (cur - start) / hdr->s_size;
   15f44:	fa1f f389 	uxth.w	r3, r9
   15f48:	1aeb      	subs	r3, r5, r3
   15f4a:	7922      	ldrb	r2, [r4, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   15f4c:	fb93 f3f2 	sdiv	r3, r3, r2
   15f50:	4a09      	ldr	r2, [pc, #36]	; (15f78 <stats_walk+0x94>)
   15f52:	210c      	movs	r1, #12
   15f54:	a801      	add	r0, sp, #4
   15f56:	f7fa ffe8 	bl	10f2a <snprintf>
            name_buf[len] = '\0';
   15f5a:	f100 0310 	add.w	r3, r0, #16
   15f5e:	eb0d 0003 	add.w	r0, sp, r3
   15f62:	2300      	movs	r3, #0
   15f64:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   15f68:	aa01      	add	r2, sp, #4
   15f6a:	e7d1      	b.n	15f10 <stats_walk+0x2c>
    }

    return (0);
   15f6c:	2300      	movs	r3, #0
err:
    return (rc);
}
   15f6e:	4618      	mov	r0, r3
   15f70:	b005      	add	sp, #20
   15f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15f76:	bf00      	nop
   15f78:	000267f4 	.word	0x000267f4

00015f7c <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   15f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f7e:	4604      	mov	r4, r0
   15f80:	460e      	mov	r6, r1
   15f82:	4615      	mov	r5, r2
   15f84:	461f      	mov	r7, r3
    size_t offset;

    offset = stats_offset(shdr);
   15f86:	f7ff ff79 	bl	15e7c <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   15f8a:	fb05 f206 	mul.w	r2, r5, r6
   15f8e:	2100      	movs	r1, #0
   15f90:	4420      	add	r0, r4
   15f92:	f7fa fb82 	bl	1069a <memset>

    shdr->s_size = size;
   15f96:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   15f98:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   15f9a:	2000      	movs	r0, #0
   15f9c:	80e0      	strh	r0, [r4, #6]
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
   15f9e:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   15fa0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   15fa4:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   15fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015fa8 <stats_module_init_internal>:
{
   15fa8:	b500      	push	{lr}
   15faa:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   15fac:	4b0d      	ldr	r3, [pc, #52]	; (15fe4 <stats_module_init_internal+0x3c>)
   15fae:	2200      	movs	r2, #0
   15fb0:	601a      	str	r2, [r3, #0]
   15fb2:	605b      	str	r3, [r3, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   15fb4:	2201      	movs	r2, #1
   15fb6:	9200      	str	r2, [sp, #0]
   15fb8:	4b0b      	ldr	r3, [pc, #44]	; (15fe8 <stats_module_init_internal+0x40>)
   15fba:	2104      	movs	r1, #4
   15fbc:	480b      	ldr	r0, [pc, #44]	; (15fec <stats_module_init_internal+0x44>)
   15fbe:	f7ff ffdd 	bl	15f7c <stats_init>
    if (rc) {
   15fc2:	4603      	mov	r3, r0
   15fc4:	b118      	cbz	r0, 15fce <stats_module_init_internal+0x26>
}
   15fc6:	4618      	mov	r0, r3
   15fc8:	b003      	add	sp, #12
   15fca:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   15fce:	4907      	ldr	r1, [pc, #28]	; (15fec <stats_module_init_internal+0x44>)
   15fd0:	4807      	ldr	r0, [pc, #28]	; (15ff0 <stats_module_init_internal+0x48>)
   15fd2:	f7ff ff5b 	bl	15e8c <stats_register_internal>
    if (rc) {
   15fd6:	4603      	mov	r3, r0
   15fd8:	2800      	cmp	r0, #0
   15fda:	d1f4      	bne.n	15fc6 <stats_module_init_internal+0x1e>
    rc = stats_shell_register();
   15fdc:	f000 f8d0 	bl	16180 <stats_shell_register>
   15fe0:	4603      	mov	r3, r0
    if (rc) {
   15fe2:	e7f0      	b.n	15fc6 <stats_module_init_internal+0x1e>
   15fe4:	20000750 	.word	0x20000750
   15fe8:	00026810 	.word	0x00026810
   15fec:	20004b70 	.word	0x20004b70
   15ff0:	000267f8 	.word	0x000267f8

00015ff4 <stats_module_init>:
{
   15ff4:	b510      	push	{r4, lr}
   15ff6:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   15ff8:	4b0c      	ldr	r3, [pc, #48]	; (1602c <stats_module_init+0x38>)
   15ffa:	781b      	ldrb	r3, [r3, #0]
   15ffc:	b123      	cbz	r3, 16008 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   15ffe:	4b0c      	ldr	r3, [pc, #48]	; (16030 <stats_module_init+0x3c>)
   16000:	695b      	ldr	r3, [r3, #20]
   16002:	b133      	cbz	r3, 16012 <stats_module_init+0x1e>
}
   16004:	b002      	add	sp, #8
   16006:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16008:	461a      	mov	r2, r3
   1600a:	4619      	mov	r1, r3
   1600c:	4618      	mov	r0, r3
   1600e:	f7f3 f8d9 	bl	91c4 <__assert_func>
    rc = stats_module_init_internal();
   16012:	f7ff ffc9 	bl	15fa8 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16016:	2800      	cmp	r0, #0
   16018:	d0f4      	beq.n	16004 <stats_module_init+0x10>
   1601a:	2000      	movs	r0, #0
   1601c:	9000      	str	r0, [sp, #0]
   1601e:	4b05      	ldr	r3, [pc, #20]	; (16034 <stats_module_init+0x40>)
   16020:	681c      	ldr	r4, [r3, #0]
   16022:	4603      	mov	r3, r0
   16024:	4602      	mov	r2, r0
   16026:	4601      	mov	r1, r0
   16028:	47a0      	blx	r4
   1602a:	e7eb      	b.n	16004 <stats_module_init+0x10>
   1602c:	20004bb0 	.word	0x20004bb0
   16030:	20004b70 	.word	0x20004b70
   16034:	20000768 	.word	0x20000768

00016038 <stats_group_walk>:
 *
 * @return 0 on success, non-zero error code on failure
 */
int
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
   16038:	b570      	push	{r4, r5, r6, lr}
   1603a:	4606      	mov	r6, r0
   1603c:	460d      	mov	r5, r1
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   1603e:	4b07      	ldr	r3, [pc, #28]	; (1605c <stats_group_walk+0x24>)
   16040:	681c      	ldr	r4, [r3, #0]
   16042:	e000      	b.n	16046 <stats_group_walk+0xe>
   16044:	6924      	ldr	r4, [r4, #16]
   16046:	b134      	cbz	r4, 16056 <stats_group_walk+0x1e>
        rc = walk_func(hdr, arg);
   16048:	4629      	mov	r1, r5
   1604a:	4620      	mov	r0, r4
   1604c:	47b0      	blx	r6
        if (rc != 0) {
   1604e:	4603      	mov	r3, r0
   16050:	2800      	cmp	r0, #0
   16052:	d0f7      	beq.n	16044 <stats_group_walk+0xc>
   16054:	e000      	b.n	16058 <stats_group_walk+0x20>
            goto err;
        }
    }
    return (0);
   16056:	2300      	movs	r3, #0
err:
    return (rc);
}
   16058:	4618      	mov	r0, r3
   1605a:	bd70      	pop	{r4, r5, r6, pc}
   1605c:	20000750 	.word	0x20000750

00016060 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   16060:	b538      	push	{r3, r4, r5, lr}
   16062:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   16064:	4b06      	ldr	r3, [pc, #24]	; (16080 <stats_group_find+0x20>)
   16066:	681c      	ldr	r4, [r3, #0]
   16068:	e000      	b.n	1606c <stats_group_find+0xc>
   1606a:	6924      	ldr	r4, [r4, #16]
   1606c:	b12c      	cbz	r4, 1607a <stats_group_find+0x1a>
        if (!strcmp(cur->s_name, name)) {
   1606e:	4629      	mov	r1, r5
   16070:	6820      	ldr	r0, [r4, #0]
   16072:	f7fa fb3d 	bl	106f0 <strcmp>
   16076:	2800      	cmp	r0, #0
   16078:	d1f7      	bne.n	1606a <stats_group_find+0xa>
            break;
        }
    }

    return (cur);
}
   1607a:	4620      	mov	r0, r4
   1607c:	bd38      	pop	{r3, r4, r5, pc}
   1607e:	bf00      	nop
   16080:	20000750 	.word	0x20000750

00016084 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   16084:	b538      	push	{r3, r4, r5, lr}
   16086:	4604      	mov	r4, r0
   16088:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1608a:	4b07      	ldr	r3, [pc, #28]	; (160a8 <stats_register+0x24>)
   1608c:	695b      	ldr	r3, [r3, #20]
   1608e:	b913      	cbnz	r3, 16096 <stats_register+0x12>
        if (stats_module_init_internal()) {
   16090:	f7ff ff8a 	bl	15fa8 <stats_module_init_internal>
   16094:	b920      	cbnz	r0, 160a0 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   16096:	4629      	mov	r1, r5
   16098:	4620      	mov	r0, r4
   1609a:	f7ff fef7 	bl	15e8c <stats_register_internal>
}
   1609e:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   160a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   160a4:	e7fb      	b.n	1609e <stats_register+0x1a>
   160a6:	bf00      	nop
   160a8:	20004b70 	.word	0x20004b70

000160ac <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   160ac:	b500      	push	{lr}
   160ae:	b083      	sub	sp, #12
   160b0:	4684      	mov	ip, r0
   160b2:	4608      	mov	r0, r1
    struct streamer *streamer;
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
   160b4:	eb0c 0103 	add.w	r1, ip, r3
    switch (hdr->s_size) {
   160b8:	f89c e004 	ldrb.w	lr, [ip, #4]
   160bc:	f1be 0f04 	cmp.w	lr, #4
   160c0:	d013      	beq.n	160ea <stats_shell_display_entry+0x3e>
   160c2:	f1be 0f08 	cmp.w	lr, #8
   160c6:	d016      	beq.n	160f6 <stats_shell_display_entry+0x4a>
   160c8:	f1be 0f02 	cmp.w	lr, #2
   160cc:	d004      	beq.n	160d8 <stats_shell_display_entry+0x2c>
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   160ce:	4673      	mov	r3, lr
   160d0:	490d      	ldr	r1, [pc, #52]	; (16108 <stats_shell_display_entry+0x5c>)
   160d2:	f7fc fd05 	bl	12ae0 <streamer_printf>
                    hdr->s_size);
            break;
   160d6:	e004      	b.n	160e2 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %u\n", name,
   160d8:	f83c 3003 	ldrh.w	r3, [ip, r3]
   160dc:	490b      	ldr	r1, [pc, #44]	; (1610c <stats_shell_display_entry+0x60>)
   160de:	f7fc fcff 	bl	12ae0 <streamer_printf>
    }

    return (0);
}
   160e2:	2000      	movs	r0, #0
   160e4:	b003      	add	sp, #12
   160e6:	f85d fb04 	ldr.w	pc, [sp], #4
            streamer_printf(streamer, "%s: %lu\n", name,
   160ea:	f85c 3003 	ldr.w	r3, [ip, r3]
   160ee:	4908      	ldr	r1, [pc, #32]	; (16110 <stats_shell_display_entry+0x64>)
   160f0:	f7fc fcf6 	bl	12ae0 <streamer_printf>
            break;
   160f4:	e7f5      	b.n	160e2 <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %llu\n", name,
   160f6:	ed91 7b00 	vldr	d7, [r1]
   160fa:	ed8d 7b00 	vstr	d7, [sp]
   160fe:	4905      	ldr	r1, [pc, #20]	; (16114 <stats_shell_display_entry+0x68>)
   16100:	f7fc fcee 	bl	12ae0 <streamer_printf>
            break;
   16104:	e7ed      	b.n	160e2 <stats_shell_display_entry+0x36>
   16106:	bf00      	nop
   16108:	00026838 	.word	0x00026838
   1610c:	00026818 	.word	0x00026818
   16110:	00026820 	.word	0x00026820
   16114:	0002682c 	.word	0x0002682c

00016118 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   16118:	b508      	push	{r3, lr}
   1611a:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   1611c:	6802      	ldr	r2, [r0, #0]
   1611e:	4903      	ldr	r1, [pc, #12]	; (1612c <stats_shell_display_group+0x14>)
   16120:	4618      	mov	r0, r3
   16122:	f7fc fcdd 	bl	12ae0 <streamer_printf>
    return (0);
}
   16126:	2000      	movs	r0, #0
   16128:	bd08      	pop	{r3, pc}
   1612a:	bf00      	nop
   1612c:	00026858 	.word	0x00026858

00016130 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   16130:	b538      	push	{r3, r4, r5, lr}
   16132:	461c      	mov	r4, r3
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   16134:	6855      	ldr	r5, [r2, #4]
    if (name == NULL || !strcmp(name, "")) {
   16136:	b155      	cbz	r5, 1614e <shell_stats_display+0x1e>
   16138:	782b      	ldrb	r3, [r5, #0]
   1613a:	b143      	cbz	r3, 1614e <shell_stats_display+0x1e>
        stats_group_walk(stats_shell_display_group, streamer);
        rc = OS_EINVAL;
        goto err;
    }

    hdr = stats_group_find(name);
   1613c:	4628      	mov	r0, r5
   1613e:	f7ff ff8f 	bl	16060 <stats_group_find>
    if (!hdr) {
   16142:	b170      	cbz	r0, 16162 <shell_stats_display+0x32>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
        rc = OS_EINVAL;
        goto err;
    }

    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   16144:	4622      	mov	r2, r4
   16146:	490a      	ldr	r1, [pc, #40]	; (16170 <shell_stats_display+0x40>)
   16148:	f7ff fecc 	bl	15ee4 <stats_walk>
    }

    return (0);
err:
    return (rc);
}
   1614c:	bd38      	pop	{r3, r4, r5, pc}
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   1614e:	4909      	ldr	r1, [pc, #36]	; (16174 <shell_stats_display+0x44>)
   16150:	4620      	mov	r0, r4
   16152:	f7fc fcc5 	bl	12ae0 <streamer_printf>
        stats_group_walk(stats_shell_display_group, streamer);
   16156:	4621      	mov	r1, r4
   16158:	4807      	ldr	r0, [pc, #28]	; (16178 <shell_stats_display+0x48>)
   1615a:	f7ff ff6d 	bl	16038 <stats_group_walk>
        rc = OS_EINVAL;
   1615e:	2002      	movs	r0, #2
        goto err;
   16160:	e7f4      	b.n	1614c <shell_stats_display+0x1c>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   16162:	462a      	mov	r2, r5
   16164:	4905      	ldr	r1, [pc, #20]	; (1617c <shell_stats_display+0x4c>)
   16166:	4620      	mov	r0, r4
   16168:	f7fc fcba 	bl	12ae0 <streamer_printf>
        rc = OS_EINVAL;
   1616c:	2002      	movs	r0, #2
        goto err;
   1616e:	e7ed      	b.n	1614c <shell_stats_display+0x1c>
   16170:	000160ad 	.word	0x000160ad
   16174:	00026860 	.word	0x00026860
   16178:	00016119 	.word	0x00016119
   1617c:	0002689c 	.word	0x0002689c

00016180 <stats_shell_register>:


int 
stats_shell_register(void)
{
   16180:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   16182:	4b06      	ldr	r3, [pc, #24]	; (1619c <stats_shell_register+0x1c>)
   16184:	781b      	ldrb	r3, [r3, #0]
   16186:	b10b      	cbz	r3, 1618c <stats_shell_register+0xc>
        stats_shell_registered = 1;
        shell_cmd_register(&shell_stats_cmd);
    }

    return (0);
}
   16188:	2000      	movs	r0, #0
   1618a:	bd08      	pop	{r3, pc}
        stats_shell_registered = 1;
   1618c:	4b03      	ldr	r3, [pc, #12]	; (1619c <stats_shell_register+0x1c>)
   1618e:	2201      	movs	r2, #1
   16190:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   16192:	4803      	ldr	r0, [pc, #12]	; (161a0 <stats_shell_register+0x20>)
   16194:	f7ff fb36 	bl	15804 <shell_cmd_register>
   16198:	e7f6      	b.n	16188 <stats_shell_register+0x8>
   1619a:	bf00      	nop
   1619c:	20004b88 	.word	0x20004b88
   161a0:	20000758 	.word	0x20000758

000161a4 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   161a4:	b508      	push	{r3, lr}
    assert(0);
   161a6:	2300      	movs	r3, #0
   161a8:	461a      	mov	r2, r3
   161aa:	4619      	mov	r1, r3
   161ac:	4618      	mov	r0, r3
   161ae:	f7f3 f809 	bl	91c4 <__assert_func>
	...

000161b4 <sysdown_complete>:
{
   161b4:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   161b6:	4803      	ldr	r0, [pc, #12]	; (161c4 <sysdown_complete+0x10>)
   161b8:	f7f3 f9a0 	bl	94fc <os_callout_stop>
    os_system_reset();
   161bc:	f7f3 f96f 	bl	949e <os_system_reset>
}
   161c0:	bd08      	pop	{r3, pc}
   161c2:	bf00      	nop
   161c4:	20004b90 	.word	0x20004b90

000161c8 <sysdown>:
}

int
sysdown(int reason)
{
   161c8:	b570      	push	{r4, r5, r6, lr}
   161ca:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   161cc:	f7f4 fa54 	bl	a678 <os_arch_save_sr>
    if (sysdown_active) {
   161d0:	4b20      	ldr	r3, [pc, #128]	; (16254 <sysdown+0x8c>)
   161d2:	781b      	ldrb	r3, [r3, #0]
   161d4:	b943      	cbnz	r3, 161e8 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   161d6:	4b1f      	ldr	r3, [pc, #124]	; (16254 <sysdown+0x8c>)
   161d8:	2201      	movs	r2, #1
   161da:	701a      	strb	r2, [r3, #0]
        rc = 0;
   161dc:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   161de:	f7f4 fa51 	bl	a684 <os_arch_restore_sr>

    if (rc != 0) {
   161e2:	b126      	cbz	r6, 161ee <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   161e4:	4630      	mov	r0, r6
   161e6:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   161e8:	f06f 060a 	mvn.w	r6, #10
   161ec:	e7f7      	b.n	161de <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   161ee:	f7f3 fbd9 	bl	99a4 <os_eventq_dflt_get>
   161f2:	4601      	mov	r1, r0
   161f4:	4c18      	ldr	r4, [pc, #96]	; (16258 <sysdown+0x90>)
   161f6:	2300      	movs	r3, #0
   161f8:	4a18      	ldr	r2, [pc, #96]	; (1625c <sysdown+0x94>)
   161fa:	4620      	mov	r0, r4
   161fc:	f7f3 f970 	bl	94e0 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   16200:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   16204:	4620      	mov	r0, r4
   16206:	f7f3 f997 	bl	9538 <os_callout_reset>
    assert(rc == 0);
   1620a:	4606      	mov	r6, r0
   1620c:	b908      	cbnz	r0, 16212 <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1620e:	4604      	mov	r4, r0
   16210:	e006      	b.n	16220 <sysdown+0x58>
    assert(rc == 0);
   16212:	2300      	movs	r3, #0
   16214:	461a      	mov	r2, r3
   16216:	4619      	mov	r1, r3
   16218:	4618      	mov	r0, r3
   1621a:	f7f2 ffd3 	bl	91c4 <__assert_func>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   1621e:	3401      	adds	r4, #1
   16220:	4b0f      	ldr	r3, [pc, #60]	; (16260 <sysdown+0x98>)
   16222:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16226:	b163      	cbz	r3, 16242 <sysdown+0x7a>
        rc = sysdown_cbs[i](reason);
   16228:	4628      	mov	r0, r5
   1622a:	4798      	blx	r3
        switch (rc) {
   1622c:	2801      	cmp	r0, #1
   1622e:	d1f6      	bne.n	1621e <sysdown+0x56>
            OS_ENTER_CRITICAL(sr);
   16230:	f7f4 fa22 	bl	a678 <os_arch_save_sr>
            sysdown_num_in_progress++;
   16234:	4a0b      	ldr	r2, [pc, #44]	; (16264 <sysdown+0x9c>)
   16236:	6813      	ldr	r3, [r2, #0]
   16238:	3301      	adds	r3, #1
   1623a:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   1623c:	f7f4 fa22 	bl	a684 <os_arch_restore_sr>
            break;
   16240:	e7ed      	b.n	1621e <sysdown+0x56>
    if (sysdown_num_in_progress == 0) {
   16242:	4b08      	ldr	r3, [pc, #32]	; (16264 <sysdown+0x9c>)
   16244:	681c      	ldr	r4, [r3, #0]
   16246:	2c00      	cmp	r4, #0
   16248:	d1cc      	bne.n	161e4 <sysdown+0x1c>
        sysdown_complete();
   1624a:	f7ff ffb3 	bl	161b4 <sysdown_complete>
    return 0;
   1624e:	4626      	mov	r6, r4
   16250:	e7c8      	b.n	161e4 <sysdown+0x1c>
   16252:	bf00      	nop
   16254:	20004b89 	.word	0x20004b89
   16258:	20004b90 	.word	0x20004b90
   1625c:	000161a5 	.word	0x000161a5
   16260:	00026cc4 	.word	0x00026cc4
   16264:	20004b8c 	.word	0x20004b8c

00016268 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   16268:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1626a:	f7f2 ffab 	bl	91c4 <__assert_func>
	...

00016270 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16270:	4b01      	ldr	r3, [pc, #4]	; (16278 <sysinit_start+0x8>)
   16272:	2201      	movs	r2, #1
   16274:	701a      	strb	r2, [r3, #0]
}
   16276:	4770      	bx	lr
   16278:	20004bb0 	.word	0x20004bb0

0001627c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1627c:	4b01      	ldr	r3, [pc, #4]	; (16284 <sysinit_end+0x8>)
   1627e:	2200      	movs	r2, #0
   16280:	701a      	strb	r2, [r3, #0]
}
   16282:	4770      	bx	lr
   16284:	20004bb0 	.word	0x20004bb0

00016288 <uwbcfg_set>:

static int
uwbcfg_set(int argc, char **argv, char *val)
{
    int i;
    if (argc == 1) {
   16288:	2801      	cmp	r0, #1
   1628a:	d00a      	beq.n	162a2 <uwbcfg_set+0x1a>
        for (i=0;i<CFGSTR_MAX;i++) {
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
        }
    }
    return DPL_ENOENT;
   1628c:	200a      	movs	r0, #10
}
   1628e:	4770      	bx	lr
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   16290:	2308      	movs	r3, #8
   16292:	4a0d      	ldr	r2, [pc, #52]	; (162c8 <uwbcfg_set+0x40>)
   16294:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   16298:	2106      	movs	r1, #6
   1629a:	4630      	mov	r0, r6
   1629c:	f7fc fdf7 	bl	12e8e <conf_value_from_str>
}
   162a0:	bd70      	pop	{r4, r5, r6, pc}
{
   162a2:	b570      	push	{r4, r5, r6, lr}
   162a4:	460d      	mov	r5, r1
   162a6:	4616      	mov	r6, r2
        for (i=0;i<CFGSTR_MAX;i++) {
   162a8:	2400      	movs	r4, #0
   162aa:	2c13      	cmp	r4, #19
   162ac:	dc09      	bgt.n	162c2 <uwbcfg_set+0x3a>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   162ae:	4b07      	ldr	r3, [pc, #28]	; (162cc <uwbcfg_set+0x44>)
   162b0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   162b4:	6828      	ldr	r0, [r5, #0]
   162b6:	f7fa fa1b 	bl	106f0 <strcmp>
   162ba:	2800      	cmp	r0, #0
   162bc:	d0e8      	beq.n	16290 <uwbcfg_set+0x8>
        for (i=0;i<CFGSTR_MAX;i++) {
   162be:	3401      	adds	r4, #1
   162c0:	e7f3      	b.n	162aa <uwbcfg_set+0x22>
    return DPL_ENOENT;
   162c2:	200a      	movs	r0, #10
   162c4:	e7ec      	b.n	162a0 <uwbcfg_set+0x18>
   162c6:	bf00      	nop
   162c8:	2000076c 	.word	0x2000076c
   162cc:	2000080c 	.word	0x2000080c

000162d0 <uwbcfg_get>:
    if (argc == 1) {
   162d0:	2801      	cmp	r0, #1
   162d2:	d10d      	bne.n	162f0 <uwbcfg_get+0x20>
{
   162d4:	b538      	push	{r3, r4, r5, lr}
   162d6:	460d      	mov	r5, r1
        for (i=0;i<CFGSTR_MAX;i++) {
   162d8:	2400      	movs	r4, #0
   162da:	2c13      	cmp	r4, #19
   162dc:	dc0e      	bgt.n	162fc <uwbcfg_get+0x2c>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   162de:	4b08      	ldr	r3, [pc, #32]	; (16300 <uwbcfg_get+0x30>)
   162e0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   162e4:	6828      	ldr	r0, [r5, #0]
   162e6:	f7fa fa03 	bl	106f0 <strcmp>
   162ea:	b118      	cbz	r0, 162f4 <uwbcfg_get+0x24>
        for (i=0;i<CFGSTR_MAX;i++) {
   162ec:	3401      	adds	r4, #1
   162ee:	e7f4      	b.n	162da <uwbcfg_get+0xa>
    return NULL;
   162f0:	2000      	movs	r0, #0
}
   162f2:	4770      	bx	lr
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   162f4:	4803      	ldr	r0, [pc, #12]	; (16304 <uwbcfg_get+0x34>)
   162f6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   162fa:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
   162fc:	2000      	movs	r0, #0
   162fe:	e7fc      	b.n	162fa <uwbcfg_get+0x2a>
   16300:	2000080c 	.word	0x2000080c
   16304:	2000076c 	.word	0x2000076c

00016308 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   16308:	b530      	push	{r4, r5, lr}
   1630a:	b08b      	sub	sp, #44	; 0x2c
   1630c:	4605      	mov	r5, r0
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
   1630e:	2400      	movs	r4, #0
   16310:	e010      	b.n	16334 <uwbcfg_export+0x2c>
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   16312:	4b0b      	ldr	r3, [pc, #44]	; (16340 <uwbcfg_export+0x38>)
   16314:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16318:	9300      	str	r3, [sp, #0]
   1631a:	4b0a      	ldr	r3, [pc, #40]	; (16344 <uwbcfg_export+0x3c>)
   1631c:	685b      	ldr	r3, [r3, #4]
   1631e:	4a0a      	ldr	r2, [pc, #40]	; (16348 <uwbcfg_export+0x40>)
   16320:	2120      	movs	r1, #32
   16322:	a802      	add	r0, sp, #8
   16324:	f7fa fe01 	bl	10f2a <snprintf>
        export_func(b, g_uwb_config[i]);
   16328:	4908      	ldr	r1, [pc, #32]	; (1634c <uwbcfg_export+0x44>)
   1632a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   1632e:	a802      	add	r0, sp, #8
   16330:	47a8      	blx	r5
    for (i=0;i<CFGSTR_MAX;i++) {
   16332:	3401      	adds	r4, #1
   16334:	2c13      	cmp	r4, #19
   16336:	ddec      	ble.n	16312 <uwbcfg_export+0xa>
    }
    return 0;
}
   16338:	2000      	movs	r0, #0
   1633a:	b00b      	add	sp, #44	; 0x2c
   1633c:	bd30      	pop	{r4, r5, pc}
   1633e:	bf00      	nop
   16340:	2000080c 	.word	0x2000080c
   16344:	2000085c 	.word	0x2000085c
   16348:	000268c0 	.word	0x000268c0
   1634c:	2000076c 	.word	0x2000076c

00016350 <uwbcfg_commit_to_inst>:
{
   16350:	b5f0      	push	{r4, r5, r6, r7, lr}
   16352:	b083      	sub	sp, #12
   16354:	4604      	mov	r4, r0
   16356:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   16358:	2300      	movs	r3, #0
   1635a:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   1635e:	2102      	movs	r1, #2
   16360:	4628      	mov	r0, r5
   16362:	f7fc fd94 	bl	12e8e <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   16366:	f105 0610 	add.w	r6, r5, #16
   1636a:	4984      	ldr	r1, [pc, #528]	; (1657c <uwbcfg_commit_to_inst+0x22c>)
   1636c:	4630      	mov	r0, r6
   1636e:	f7fa f9bf 	bl	106f0 <strcmp>
   16372:	2800      	cmp	r0, #0
   16374:	f040 80c0 	bne.w	164f8 <uwbcfg_commit_to_inst+0x1a8>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   16378:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1637c:	4a80      	ldr	r2, [pc, #512]	; (16580 <uwbcfg_commit_to_inst+0x230>)
   1637e:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   16380:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   16382:	2300      	movs	r3, #0
   16384:	f10d 0207 	add.w	r2, sp, #7
   16388:	2102      	movs	r1, #2
   1638a:	f105 0018 	add.w	r0, r5, #24
   1638e:	f7fc fd7e 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   16392:	2300      	movs	r3, #0
   16394:	f204 5212 	addw	r2, r4, #1298	; 0x512
   16398:	2102      	movs	r1, #2
   1639a:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1639e:	f7fc fd76 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   163a2:	2300      	movs	r3, #0
   163a4:	f10d 0202 	add.w	r2, sp, #2
   163a8:	2103      	movs	r1, #3
   163aa:	f105 0030 	add.w	r0, r5, #48	; 0x30
   163ae:	f7fc fd6e 	bl	12e8e <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   163b2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   163b6:	2b73      	cmp	r3, #115	; 0x73
   163b8:	f000 80b6 	beq.w	16528 <uwbcfg_commit_to_inst+0x1d8>
   163bc:	2303      	movs	r3, #3
   163be:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   163c2:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
   163c6:	b192      	cbz	r2, 163ee <uwbcfg_commit_to_inst+0x9e>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   163c8:	2300      	movs	r3, #0
   163ca:	3202      	adds	r2, #2
   163cc:	2103      	movs	r1, #3
   163ce:	f105 0040 	add.w	r0, r5, #64	; 0x40
   163d2:	f7fc fd5c 	bl	12e8e <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   163d6:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   163da:	885b      	ldrh	r3, [r3, #2]
   163dc:	3b00      	subs	r3, #0
   163de:	bf18      	it	ne
   163e0:	2301      	movne	r3, #1
   163e2:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   163e6:	f363 1286 	bfi	r2, r3, #6, #1
   163ea:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   163ee:	2300      	movs	r3, #0
   163f0:	f204 5211 	addw	r2, r4, #1297	; 0x511
   163f4:	2102      	movs	r1, #2
   163f6:	f105 0020 	add.w	r0, r5, #32
   163fa:	f7fc fd48 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   163fe:	2300      	movs	r3, #0
   16400:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   16404:	2102      	movs	r1, #2
   16406:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1640a:	f7fc fd40 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   1640e:	2300      	movs	r3, #0
   16410:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   16414:	2103      	movs	r1, #3
   16416:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1641a:	f7fc fd38 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   1641e:	2300      	movs	r3, #0
   16420:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   16424:	2103      	movs	r1, #3
   16426:	f105 0070 	add.w	r0, r5, #112	; 0x70
   1642a:	f7fc fd30 	bl	12e8e <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   1642e:	2100      	movs	r1, #0
   16430:	f105 0078 	add.w	r0, r5, #120	; 0x78
   16434:	f000 fa92 	bl	1695c <strtod_soft>
   16438:	ec51 0b10 	vmov	r0, r1, d0
   1643c:	f00d fbe8 	bl	23c10 <__aeabi_d2f>
   16440:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
   16444:	6018      	str	r0, [r3, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   16446:	2300      	movs	r3, #0
   16448:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   1644c:	2104      	movs	r1, #4
   1644e:	f105 0080 	add.w	r0, r5, #128	; 0x80
   16452:	f7fc fd1c 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   16456:	2300      	movs	r3, #0
   16458:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   1645c:	2103      	movs	r1, #3
   1645e:	f105 0088 	add.w	r0, r5, #136	; 0x88
   16462:	f7fc fd14 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   16466:	2300      	movs	r3, #0
   16468:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   1646c:	2103      	movs	r1, #3
   1646e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   16472:	f7fc fd0c 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   16476:	2300      	movs	r3, #0
   16478:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   1647c:	2102      	movs	r1, #2
   1647e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   16482:	f7fc fd04 	bl	12e8e <conf_value_from_str>
    txP = inst->config.tx.preambleLength;
   16486:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    sfd_timeout = inst->config.rx.sfdTimeout;
   1648a:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   1648e:	f8ad 3002 	strh.w	r3, [sp, #2]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   16492:	2300      	movs	r3, #0
   16494:	aa01      	add	r2, sp, #4
   16496:	2103      	movs	r1, #3
   16498:	f105 0050 	add.w	r0, r5, #80	; 0x50
   1649c:	f7fc fcf7 	bl	12e8e <conf_value_from_str>
    switch (preamble_len)
   164a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   164a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   164a8:	d058      	beq.n	1655c <uwbcfg_commit_to_inst+0x20c>
   164aa:	d843      	bhi.n	16534 <uwbcfg_commit_to_inst+0x1e4>
   164ac:	2b80      	cmp	r3, #128	; 0x80
   164ae:	d057      	beq.n	16560 <uwbcfg_commit_to_inst+0x210>
   164b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   164b4:	d13a      	bne.n	1652c <uwbcfg_commit_to_inst+0x1dc>
    case (256):  txP = DWT_PLEN_256 ;break;
   164b6:	2624      	movs	r6, #36	; 0x24
    if (sfd_timeout < 1) {
   164b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   164bc:	b94b      	cbnz	r3, 164d2 <uwbcfg_commit_to_inst+0x182>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   164be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   164c2:	443b      	add	r3, r7
   164c4:	b29b      	uxth	r3, r3
   164c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   164ca:	1a9b      	subs	r3, r3, r2
   164cc:	3301      	adds	r3, #1
   164ce:	f8ad 3002 	strh.w	r3, [sp, #2]
    inst->config.tx.preambleLength = txP;
   164d2:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->config.rx.sfdTimeout = sfd_timeout;
   164d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   164da:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->attrib.nsfd = sfd_len;
   164de:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   164e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   164e6:	f8a4 3542 	strh.w	r3, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   164ea:	4629      	mov	r1, r5
   164ec:	4620      	mov	r0, r4
   164ee:	f000 f913 	bl	16718 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   164f2:	4b24      	ldr	r3, [pc, #144]	; (16584 <uwbcfg_commit_to_inst+0x234>)
   164f4:	681c      	ldr	r4, [r3, #0]
   164f6:	e039      	b.n	1656c <uwbcfg_commit_to_inst+0x21c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   164f8:	4923      	ldr	r1, [pc, #140]	; (16588 <uwbcfg_commit_to_inst+0x238>)
   164fa:	4630      	mov	r0, r6
   164fc:	f7fa f8f8 	bl	106f0 <strcmp>
   16500:	b928      	cbnz	r0, 1650e <uwbcfg_commit_to_inst+0x1be>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   16502:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   16506:	4a21      	ldr	r2, [pc, #132]	; (1658c <uwbcfg_commit_to_inst+0x23c>)
   16508:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   1650a:	2708      	movs	r7, #8
   1650c:	e739      	b.n	16382 <uwbcfg_commit_to_inst+0x32>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   1650e:	4920      	ldr	r1, [pc, #128]	; (16590 <uwbcfg_commit_to_inst+0x240>)
   16510:	4630      	mov	r0, r6
   16512:	f7fa f8ed 	bl	106f0 <strcmp>
   16516:	b928      	cbnz	r0, 16524 <uwbcfg_commit_to_inst+0x1d4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   16518:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1651c:	4a1d      	ldr	r2, [pc, #116]	; (16594 <uwbcfg_commit_to_inst+0x244>)
   1651e:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   16520:	2740      	movs	r7, #64	; 0x40
   16522:	e72e      	b.n	16382 <uwbcfg_commit_to_inst+0x32>
    int sfd_len=0;
   16524:	2700      	movs	r7, #0
   16526:	e72c      	b.n	16382 <uwbcfg_commit_to_inst+0x32>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   16528:	2300      	movs	r3, #0
   1652a:	e748      	b.n	163be <uwbcfg_commit_to_inst+0x6e>
    switch (preamble_len)
   1652c:	2b40      	cmp	r3, #64	; 0x40
   1652e:	d10e      	bne.n	1654e <uwbcfg_commit_to_inst+0x1fe>
   16530:	2604      	movs	r6, #4
   16532:	e7c1      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
   16534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   16538:	d014      	beq.n	16564 <uwbcfg_commit_to_inst+0x214>
   1653a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1653e:	d101      	bne.n	16544 <uwbcfg_commit_to_inst+0x1f4>
    case (4096): txP = DWT_PLEN_4096;break;
   16540:	260c      	movs	r6, #12
   16542:	e7b9      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
    switch (preamble_len)
   16544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16548:	d101      	bne.n	1654e <uwbcfg_commit_to_inst+0x1fe>
    case (1024): txP = DWT_PLEN_1024;break;
   1654a:	2608      	movs	r6, #8
   1654c:	e7b4      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
        UC_WARN("inv preamb_len\n");
   1654e:	4b12      	ldr	r3, [pc, #72]	; (16598 <uwbcfg_commit_to_inst+0x248>)
   16550:	2202      	movs	r2, #2
   16552:	215c      	movs	r1, #92	; 0x5c
   16554:	4811      	ldr	r0, [pc, #68]	; (1659c <uwbcfg_commit_to_inst+0x24c>)
   16556:	f7fd ff5d 	bl	14414 <log_printf>
        break;
   1655a:	e7ad      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
    case (512):  txP = DWT_PLEN_512 ;break;
   1655c:	2634      	movs	r6, #52	; 0x34
   1655e:	e7ab      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
    case (128):  txP = DWT_PLEN_128 ;break;
   16560:	2614      	movs	r6, #20
   16562:	e7a9      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
    case (2048): txP = DWT_PLEN_2048;break;
   16564:	2628      	movs	r6, #40	; 0x28
   16566:	e7a7      	b.n	164b8 <uwbcfg_commit_to_inst+0x168>
            cb->uc_update();
   16568:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   1656a:	6824      	ldr	r4, [r4, #0]
   1656c:	b11c      	cbz	r4, 16576 <uwbcfg_commit_to_inst+0x226>
        if (cb->uc_update) {
   1656e:	6863      	ldr	r3, [r4, #4]
   16570:	2b00      	cmp	r3, #0
   16572:	d1f9      	bne.n	16568 <uwbcfg_commit_to_inst+0x218>
   16574:	e7f9      	b.n	1656a <uwbcfg_commit_to_inst+0x21a>
}
   16576:	2000      	movs	r0, #0
   16578:	b003      	add	sp, #12
   1657a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1657c:	000268c8 	.word	0x000268c8
   16580:	3e03497b 	.word	0x3e03497b
   16584:	20004bcc 	.word	0x20004bcc
   16588:	000268cc 	.word	0x000268cc
   1658c:	3f83482c 	.word	0x3f83482c
   16590:	000268d4 	.word	0x000268d4
   16594:	41034836 	.word	0x41034836
   16598:	000268dc 	.word	0x000268dc
   1659c:	20004bb4 	.word	0x20004bb4

000165a0 <uwbcfg_commit>:
{
   165a0:	b510      	push	{r4, lr}
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   165a2:	2400      	movs	r4, #0
   165a4:	e000      	b.n	165a8 <uwbcfg_commit+0x8>
   165a6:	3401      	adds	r4, #1
   165a8:	2c02      	cmp	r4, #2
   165aa:	dc08      	bgt.n	165be <uwbcfg_commit+0x1e>
        udev = uwb_dev_idx_lookup(i);
   165ac:	4620      	mov	r0, r4
   165ae:	f7f2 fb61 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   165b2:	2800      	cmp	r0, #0
   165b4:	d0f7      	beq.n	165a6 <uwbcfg_commit+0x6>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   165b6:	4903      	ldr	r1, [pc, #12]	; (165c4 <uwbcfg_commit+0x24>)
   165b8:	f7ff feca 	bl	16350 <uwbcfg_commit_to_inst>
   165bc:	e7f3      	b.n	165a6 <uwbcfg_commit+0x6>
}
   165be:	2000      	movs	r0, #0
   165c0:	bd10      	pop	{r4, pc}
   165c2:	bf00      	nop
   165c4:	2000076c 	.word	0x2000076c

000165c8 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   165c8:	4b02      	ldr	r3, [pc, #8]	; (165d4 <uwbcfg_register+0xc>)
   165ca:	681a      	ldr	r2, [r3, #0]
   165cc:	6002      	str	r2, [r0, #0]
   165ce:	6018      	str	r0, [r3, #0]
    return 0;
}
   165d0:	2000      	movs	r0, #0
   165d2:	4770      	bx	lr
   165d4:	20004bcc 	.word	0x20004bcc

000165d8 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   165d8:	b510      	push	{r4, lr}
   165da:	b082      	sub	sp, #8
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   165dc:	480d      	ldr	r0, [pc, #52]	; (16614 <uwbcfg_pkg_init+0x3c>)
   165de:	f7fc fc11 	bl	12e04 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   165e2:	b138      	cbz	r0, 165f4 <uwbcfg_pkg_init+0x1c>
   165e4:	2000      	movs	r0, #0
   165e6:	9000      	str	r0, [sp, #0]
   165e8:	4b0b      	ldr	r3, [pc, #44]	; (16618 <uwbcfg_pkg_init+0x40>)
   165ea:	681c      	ldr	r4, [r3, #0]
   165ec:	4603      	mov	r3, r0
   165ee:	4602      	mov	r2, r0
   165f0:	4601      	mov	r1, r0
   165f2:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   165f4:	2400      	movs	r4, #0
   165f6:	9400      	str	r4, [sp, #0]
   165f8:	4623      	mov	r3, r4
   165fa:	4a08      	ldr	r2, [pc, #32]	; (1661c <uwbcfg_pkg_init+0x44>)
   165fc:	4908      	ldr	r1, [pc, #32]	; (16620 <uwbcfg_pkg_init+0x48>)
   165fe:	4809      	ldr	r0, [pc, #36]	; (16624 <uwbcfg_pkg_init+0x4c>)
   16600:	f7fd ff50 	bl	144a4 <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   16604:	4b08      	ldr	r3, [pc, #32]	; (16628 <uwbcfg_pkg_init+0x50>)
   16606:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   16608:	f7ff ffca 	bl	165a0 <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   1660c:	4620      	mov	r0, r4
   1660e:	b002      	add	sp, #8
   16610:	bd10      	pop	{r4, pc}
   16612:	bf00      	nop
   16614:	2000085c 	.word	0x2000085c
   16618:	20000768 	.word	0x20000768
   1661c:	00026124 	.word	0x00026124
   16620:	20004bb4 	.word	0x20004bb4
   16624:	000268ec 	.word	0x000268ec
   16628:	20004bcc 	.word	0x20004bcc

0001662c <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   1662c:	2000      	movs	r0, #0
   1662e:	4770      	bx	lr

00016630 <check_preamble_code>:
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
{
   16630:	b530      	push	{r4, r5, lr}
   16632:	b083      	sub	sp, #12
   16634:	460c      	mov	r4, r1
    int new_code = 0;
    int ch = inst->config.channel;
   16636:	f890 250c 	ldrb.w	r2, [r0, #1292]	; 0x50c
    int prf = inst->config.prf;
   1663a:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    uint8_t code = *arg_code;
   1663e:	7823      	ldrb	r3, [r4, #0]
    if (prf == DWT_PRF_16M) {
   16640:	2901      	cmp	r1, #1
   16642:	d00a      	beq.n	1665a <check_preamble_code+0x2a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
    } else {
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   16644:	1e51      	subs	r1, r2, #1
   16646:	2902      	cmp	r1, #2
   16648:	d932      	bls.n	166b0 <check_preamble_code+0x80>
   1664a:	2a05      	cmp	r2, #5
   1664c:	d030      	beq.n	166b0 <check_preamble_code+0x80>
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
   1664e:	3b11      	subs	r3, #17
   16650:	b2db      	uxtb	r3, r3
   16652:	2b03      	cmp	r3, #3
   16654:	d939      	bls.n	166ca <check_preamble_code+0x9a>
   16656:	2511      	movs	r5, #17
   16658:	e02f      	b.n	166ba <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   1665a:	2a01      	cmp	r2, #1
   1665c:	d00c      	beq.n	16678 <check_preamble_code+0x48>
    int new_code = 0;
   1665e:	2500      	movs	r5, #0
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   16660:	2a02      	cmp	r2, #2
   16662:	d013      	beq.n	1668c <check_preamble_code+0x5c>
   16664:	2a05      	cmp	r2, #5
   16666:	d011      	beq.n	1668c <check_preamble_code+0x5c>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   16668:	2a03      	cmp	r2, #3
   1666a:	d015      	beq.n	16698 <check_preamble_code+0x68>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   1666c:	2a04      	cmp	r2, #4
   1666e:	d019      	beq.n	166a4 <check_preamble_code+0x74>
   16670:	2a07      	cmp	r2, #7
   16672:	d017      	beq.n	166a4 <check_preamble_code+0x74>
        }
    }
    if (new_code) {
   16674:	b34d      	cbz	r5, 166ca <check_preamble_code+0x9a>
   16676:	e020      	b.n	166ba <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   16678:	2b01      	cmp	r3, #1
   1667a:	d005      	beq.n	16688 <check_preamble_code+0x58>
   1667c:	2b02      	cmp	r3, #2
   1667e:	d001      	beq.n	16684 <check_preamble_code+0x54>
   16680:	4615      	mov	r5, r2
   16682:	e7ed      	b.n	16660 <check_preamble_code+0x30>
    int new_code = 0;
   16684:	2500      	movs	r5, #0
   16686:	e7eb      	b.n	16660 <check_preamble_code+0x30>
   16688:	2500      	movs	r5, #0
   1668a:	e7e9      	b.n	16660 <check_preamble_code+0x30>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   1668c:	2b03      	cmp	r3, #3
   1668e:	d0eb      	beq.n	16668 <check_preamble_code+0x38>
   16690:	2b04      	cmp	r3, #4
   16692:	d0e9      	beq.n	16668 <check_preamble_code+0x38>
   16694:	2503      	movs	r5, #3
   16696:	e7e7      	b.n	16668 <check_preamble_code+0x38>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   16698:	2b05      	cmp	r3, #5
   1669a:	d0e7      	beq.n	1666c <check_preamble_code+0x3c>
   1669c:	2b06      	cmp	r3, #6
   1669e:	d0e5      	beq.n	1666c <check_preamble_code+0x3c>
   166a0:	2505      	movs	r5, #5
   166a2:	e7e3      	b.n	1666c <check_preamble_code+0x3c>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   166a4:	2b07      	cmp	r3, #7
   166a6:	d0e5      	beq.n	16674 <check_preamble_code+0x44>
   166a8:	2b08      	cmp	r3, #8
   166aa:	d0e3      	beq.n	16674 <check_preamble_code+0x44>
   166ac:	2507      	movs	r5, #7
   166ae:	e004      	b.n	166ba <check_preamble_code+0x8a>
            if (code < 9 || code > 12)  new_code = 9;
   166b0:	3b09      	subs	r3, #9
   166b2:	b2db      	uxtb	r3, r3
   166b4:	2b03      	cmp	r3, #3
   166b6:	d908      	bls.n	166ca <check_preamble_code+0x9a>
   166b8:	2509      	movs	r5, #9
        UC_WARN("inv pream code (using %d)\n", new_code);
   166ba:	9500      	str	r5, [sp, #0]
   166bc:	4b04      	ldr	r3, [pc, #16]	; (166d0 <check_preamble_code+0xa0>)
   166be:	2202      	movs	r2, #2
   166c0:	215c      	movs	r1, #92	; 0x5c
   166c2:	4804      	ldr	r0, [pc, #16]	; (166d4 <check_preamble_code+0xa4>)
   166c4:	f7fd fea6 	bl	14414 <log_printf>
        *arg_code = new_code;
   166c8:	7025      	strb	r5, [r4, #0]
    }
}
   166ca:	b003      	add	sp, #12
   166cc:	bd30      	pop	{r4, r5, pc}
   166ce:	bf00      	nop
   166d0:	000269ec 	.word	0x000269ec
   166d4:	20004bb4 	.word	0x20004bb4

000166d8 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   166d8:	4603      	mov	r3, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   166da:	f010 0001 	ands.w	r0, r0, #1
   166de:	d000      	beq.n	166e2 <remap_framefilter+0xa>
   166e0:	2004      	movs	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   166e2:	f013 0f02 	tst.w	r3, #2
   166e6:	d001      	beq.n	166ec <remap_framefilter+0x14>
   166e8:	f040 0008 	orr.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   166ec:	f013 0f04 	tst.w	r3, #4
   166f0:	d001      	beq.n	166f6 <remap_framefilter+0x1e>
   166f2:	f040 0010 	orr.w	r0, r0, #16
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   166f6:	f013 0f08 	tst.w	r3, #8
   166fa:	d001      	beq.n	16700 <remap_framefilter+0x28>
   166fc:	f040 0020 	orr.w	r0, r0, #32
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   16700:	f013 0f10 	tst.w	r3, #16
   16704:	d001      	beq.n	1670a <remap_framefilter+0x32>
   16706:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   1670a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1670e:	d001      	beq.n	16714 <remap_framefilter+0x3c>
   16710:	f040 0002 	orr.w	r0, r0, #2
    return r;
}
   16714:	4770      	bx	lr
	...

00016718 <uwbcfg_commit_to_inst_dw1000>:
{
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   16718:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   1671c:	4b84      	ldr	r3, [pc, #528]	; (16930 <uwbcfg_commit_to_inst_dw1000+0x218>)
   1671e:	429a      	cmp	r2, r3
   16720:	d001      	beq.n	16726 <uwbcfg_commit_to_inst_dw1000+0xe>
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   16722:	2000      	movs	r0, #0
   16724:	4770      	bx	lr
{
   16726:	b570      	push	{r4, r5, r6, lr}
   16728:	b084      	sub	sp, #16
   1672a:	4604      	mov	r4, r0
   1672c:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   1672e:	2300      	movs	r3, #0
   16730:	f10d 020f 	add.w	r2, sp, #15
   16734:	2102      	movs	r1, #2
   16736:	f105 0008 	add.w	r0, r5, #8
   1673a:	f7fc fba8 	bl	12e8e <conf_value_from_str>
    if (prf == 16) {
   1673e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16742:	2b10      	cmp	r3, #16
   16744:	d005      	beq.n	16752 <uwbcfg_commit_to_inst_dw1000+0x3a>
    } else if (prf == 64) {
   16746:	2b40      	cmp	r3, #64	; 0x40
   16748:	d11b      	bne.n	16782 <uwbcfg_commit_to_inst_dw1000+0x6a>
        inst->config.prf = DWT_PRF_64M;
   1674a:	2302      	movs	r3, #2
   1674c:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
   16750:	e002      	b.n	16758 <uwbcfg_commit_to_inst_dw1000+0x40>
        inst->config.prf = DWT_PRF_16M;
   16752:	2301      	movs	r3, #1
   16754:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   16758:	f204 5111 	addw	r1, r4, #1297	; 0x511
   1675c:	4620      	mov	r0, r4
   1675e:	f7ff ff67 	bl	16630 <check_preamble_code>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   16762:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
   16766:	4620      	mov	r0, r4
   16768:	f7ff ff62 	bl	16630 <check_preamble_code>
    switch (inst->config.channel) {
   1676c:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   16770:	3b01      	subs	r3, #1
   16772:	2b06      	cmp	r3, #6
   16774:	d842      	bhi.n	167fc <uwbcfg_commit_to_inst_dw1000+0xe4>
   16776:	e8df f003 	tbb	[pc, r3]
   1677a:	2d0c      	.short	0x2d0c
   1677c:	413d3531 	.word	0x413d3531
   16780:	39          	.byte	0x39
   16781:	00          	.byte	0x00
        UC_WARN("inv prf %d\n", prf);
   16782:	9300      	str	r3, [sp, #0]
   16784:	4b6b      	ldr	r3, [pc, #428]	; (16934 <uwbcfg_commit_to_inst_dw1000+0x21c>)
   16786:	2202      	movs	r2, #2
   16788:	215c      	movs	r1, #92	; 0x5c
   1678a:	486b      	ldr	r0, [pc, #428]	; (16938 <uwbcfg_commit_to_inst_dw1000+0x220>)
   1678c:	f7fd fe42 	bl	14414 <log_printf>
   16790:	e7e2      	b.n	16758 <uwbcfg_commit_to_inst_dw1000+0x40>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   16792:	23c9      	movs	r3, #201	; 0xc9
   16794:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   16798:	f105 0610 	add.w	r6, r5, #16
   1679c:	4967      	ldr	r1, [pc, #412]	; (1693c <uwbcfg_commit_to_inst_dw1000+0x224>)
   1679e:	4630      	mov	r0, r6
   167a0:	f7f9 ffa6 	bl	106f0 <strcmp>
   167a4:	bb88      	cbnz	r0, 1680a <uwbcfg_commit_to_inst_dw1000+0xf2>
        inst->config.dataRate = DWT_BR_6M8;
   167a6:	2302      	movs	r3, #2
   167a8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   167ac:	2300      	movs	r3, #0
   167ae:	aa03      	add	r2, sp, #12
   167b0:	2102      	movs	r1, #2
   167b2:	f105 0018 	add.w	r0, r5, #24
   167b6:	f7fc fb6a 	bl	12e8e <conf_value_from_str>
    switch (paclen) {
   167ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
   167be:	2b20      	cmp	r3, #32
   167c0:	d06b      	beq.n	1689a <uwbcfg_commit_to_inst_dw1000+0x182>
   167c2:	d83b      	bhi.n	1683c <uwbcfg_commit_to_inst_dw1000+0x124>
   167c4:	2b08      	cmp	r3, #8
   167c6:	d03f      	beq.n	16848 <uwbcfg_commit_to_inst_dw1000+0x130>
   167c8:	2b10      	cmp	r3, #16
   167ca:	d16a      	bne.n	168a2 <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   167cc:	2301      	movs	r3, #1
   167ce:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   167d2:	e03c      	b.n	1684e <uwbcfg_commit_to_inst_dw1000+0x136>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   167d4:	23c2      	movs	r3, #194	; 0xc2
   167d6:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   167da:	e7dd      	b.n	16798 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   167dc:	23c5      	movs	r3, #197	; 0xc5
   167de:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   167e2:	e7d9      	b.n	16798 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   167e4:	2395      	movs	r3, #149	; 0x95
   167e6:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   167ea:	e7d5      	b.n	16798 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   167ec:	2393      	movs	r3, #147	; 0x93
   167ee:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   167f2:	e7d1      	b.n	16798 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   167f4:	23c0      	movs	r3, #192	; 0xc0
   167f6:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   167fa:	e7cd      	b.n	16798 <uwbcfg_commit_to_inst_dw1000+0x80>
        UC_WARN("inv ch\n");
   167fc:	4b50      	ldr	r3, [pc, #320]	; (16940 <uwbcfg_commit_to_inst_dw1000+0x228>)
   167fe:	2202      	movs	r2, #2
   16800:	215c      	movs	r1, #92	; 0x5c
   16802:	484d      	ldr	r0, [pc, #308]	; (16938 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16804:	f7fd fe06 	bl	14414 <log_printf>
        break;
   16808:	e7c6      	b.n	16798 <uwbcfg_commit_to_inst_dw1000+0x80>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   1680a:	494e      	ldr	r1, [pc, #312]	; (16944 <uwbcfg_commit_to_inst_dw1000+0x22c>)
   1680c:	4630      	mov	r0, r6
   1680e:	f7f9 ff6f 	bl	106f0 <strcmp>
   16812:	b918      	cbnz	r0, 1681c <uwbcfg_commit_to_inst_dw1000+0x104>
        inst->config.dataRate = DWT_BR_850K;
   16814:	2301      	movs	r3, #1
   16816:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   1681a:	e7c7      	b.n	167ac <uwbcfg_commit_to_inst_dw1000+0x94>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   1681c:	494a      	ldr	r1, [pc, #296]	; (16948 <uwbcfg_commit_to_inst_dw1000+0x230>)
   1681e:	4630      	mov	r0, r6
   16820:	f7f9 ff66 	bl	106f0 <strcmp>
   16824:	b918      	cbnz	r0, 1682e <uwbcfg_commit_to_inst_dw1000+0x116>
        inst->config.dataRate = DWT_BR_110K;
   16826:	2300      	movs	r3, #0
   16828:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   1682c:	e7be      	b.n	167ac <uwbcfg_commit_to_inst_dw1000+0x94>
        UC_WARN("inv datarate\n");
   1682e:	4b47      	ldr	r3, [pc, #284]	; (1694c <uwbcfg_commit_to_inst_dw1000+0x234>)
   16830:	2202      	movs	r2, #2
   16832:	215c      	movs	r1, #92	; 0x5c
   16834:	4840      	ldr	r0, [pc, #256]	; (16938 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16836:	f7fd fded 	bl	14414 <log_printf>
   1683a:	e7b7      	b.n	167ac <uwbcfg_commit_to_inst_dw1000+0x94>
    switch (paclen) {
   1683c:	2b40      	cmp	r3, #64	; 0x40
   1683e:	d130      	bne.n	168a2 <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   16840:	2303      	movs	r3, #3
   16842:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   16846:	e002      	b.n	1684e <uwbcfg_commit_to_inst_dw1000+0x136>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   16848:	2300      	movs	r3, #0
   1684a:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    if (inst->config.rx.sfdType>1) {
   1684e:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   16852:	2b01      	cmp	r3, #1
   16854:	d82c      	bhi.n	168b0 <uwbcfg_commit_to_inst_dw1000+0x198>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   16856:	2300      	movs	r3, #0
   16858:	f10d 020e 	add.w	r2, sp, #14
   1685c:	2102      	movs	r1, #2
   1685e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   16862:	f7fc fb14 	bl	12e8e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   16866:	2300      	movs	r3, #0
   16868:	f10d 020d 	add.w	r2, sp, #13
   1686c:	2102      	movs	r1, #2
   1686e:	f105 0060 	add.w	r0, r5, #96	; 0x60
   16872:	f7fc fb0c 	bl	12e8e <conf_value_from_str>
    txpwr = inst->config.txrf.BOOSTNORM;
   16876:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
    switch (coarse) {
   1687a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1687e:	2b12      	cmp	r3, #18
   16880:	d84e      	bhi.n	16920 <uwbcfg_commit_to_inst_dw1000+0x208>
   16882:	e8df f003 	tbb	[pc, r3]
   16886:	4d48      	.short	0x4d48
   16888:	4d4d434d 	.word	0x4d4d434d
   1688c:	394d4d3e 	.word	0x394d4d3e
   16890:	4d344d4d 	.word	0x4d344d4d
   16894:	4d4d2f4d 	.word	0x4d4d2f4d
   16898:	1c          	.byte	0x1c
   16899:	00          	.byte	0x00
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   1689a:	2302      	movs	r3, #2
   1689c:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   168a0:	e7d5      	b.n	1684e <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv paclen\n");
   168a2:	4b2b      	ldr	r3, [pc, #172]	; (16950 <uwbcfg_commit_to_inst_dw1000+0x238>)
   168a4:	2202      	movs	r2, #2
   168a6:	215c      	movs	r1, #92	; 0x5c
   168a8:	4823      	ldr	r0, [pc, #140]	; (16938 <uwbcfg_commit_to_inst_dw1000+0x220>)
   168aa:	f7fd fdb3 	bl	14414 <log_printf>
   168ae:	e7ce      	b.n	1684e <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   168b0:	4b28      	ldr	r3, [pc, #160]	; (16954 <uwbcfg_commit_to_inst_dw1000+0x23c>)
   168b2:	2202      	movs	r2, #2
   168b4:	215c      	movs	r1, #92	; 0x5c
   168b6:	4820      	ldr	r0, [pc, #128]	; (16938 <uwbcfg_commit_to_inst_dw1000+0x220>)
   168b8:	f7fd fdac 	bl	14414 <log_printf>
   168bc:	e7cb      	b.n	16856 <uwbcfg_commit_to_inst_dw1000+0x13e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   168be:	f89d 500d 	ldrb.w	r5, [sp, #13]
    inst->config.txrf.BOOSTNORM = txpwr;
   168c2:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   168c6:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   168ca:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   168ce:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   168d2:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
   168d6:	f7ff feff 	bl	166d8 <remap_framefilter>
   168da:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
}
   168de:	2000      	movs	r0, #0
   168e0:	b004      	add	sp, #16
   168e2:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   168e4:	f89d 500d 	ldrb.w	r5, [sp, #13]
   168e8:	3520      	adds	r5, #32
   168ea:	b2ed      	uxtb	r5, r5
   168ec:	e7e9      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   168ee:	f89d 500d 	ldrb.w	r5, [sp, #13]
   168f2:	3540      	adds	r5, #64	; 0x40
   168f4:	b2ed      	uxtb	r5, r5
   168f6:	e7e4      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   168f8:	f89d 500d 	ldrb.w	r5, [sp, #13]
   168fc:	3560      	adds	r5, #96	; 0x60
   168fe:	b2ed      	uxtb	r5, r5
   16900:	e7df      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   16902:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16906:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   1690a:	e7da      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   1690c:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16910:	3d60      	subs	r5, #96	; 0x60
   16912:	b2ed      	uxtb	r5, r5
        break;
   16914:	e7d5      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   16916:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1691a:	3d40      	subs	r5, #64	; 0x40
   1691c:	b2ed      	uxtb	r5, r5
        break;
   1691e:	e7d0      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   16920:	4b0d      	ldr	r3, [pc, #52]	; (16958 <uwbcfg_commit_to_inst_dw1000+0x240>)
   16922:	2202      	movs	r2, #2
   16924:	215c      	movs	r1, #92	; 0x5c
   16926:	4804      	ldr	r0, [pc, #16]	; (16938 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16928:	f7fd fd74 	bl	14414 <log_printf>
   1692c:	e7c9      	b.n	168c2 <uwbcfg_commit_to_inst_dw1000+0x1aa>
   1692e:	bf00      	nop
   16930:	deca0130 	.word	0xdeca0130
   16934:	00026a08 	.word	0x00026a08
   16938:	20004bb4 	.word	0x20004bb4
   1693c:	000268c8 	.word	0x000268c8
   16940:	00026a14 	.word	0x00026a14
   16944:	000268cc 	.word	0x000268cc
   16948:	000268d4 	.word	0x000268d4
   1694c:	00026a1c 	.word	0x00026a1c
   16950:	00026a2c 	.word	0x00026a2c
   16954:	00026a38 	.word	0x00026a38
   16958:	00026a48 	.word	0x00026a48

0001695c <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   1695c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16960:	ed2d 8b02 	vpush	{d8}
   16964:	b085      	sub	sp, #20
   16966:	4604      	mov	r4, r0
   16968:	460f      	mov	r7, r1
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   1696a:	2300      	movs	r3, #0
   1696c:	9303      	str	r3, [sp, #12]
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   1696e:	212e      	movs	r1, #46	; 0x2e
   16970:	f00a fd95 	bl	2149e <strchr>
   16974:	4606      	mov	r6, r0
    dash_at = strchr(nptr, '-');
   16976:	212d      	movs	r1, #45	; 0x2d
   16978:	4620      	mov	r0, r4
   1697a:	f00a fd90 	bl	2149e <strchr>
   1697e:	9001      	str	r0, [sp, #4]
    exponent_at = strchr(nptr, 'e');
   16980:	2165      	movs	r1, #101	; 0x65
   16982:	4620      	mov	r0, r4
   16984:	f00a fd8b 	bl	2149e <strchr>
   16988:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   1698a:	220a      	movs	r2, #10
   1698c:	a903      	add	r1, sp, #12
   1698e:	4620      	mov	r0, r4
   16990:	f7f9 fed1 	bl	10736 <strtoll>
   16994:	468b      	mov	fp, r1
    f = (double)(ival);
   16996:	f00c fe15 	bl	235c4 <__aeabi_l2d>
   1699a:	ec41 0b18 	vmov	d8, r0, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   1699e:	b10e      	cbz	r6, 169a4 <strtod_soft+0x48>
   169a0:	7873      	ldrb	r3, [r6, #1]
   169a2:	b95b      	cbnz	r3, 169bc <strtod_soft+0x60>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   169a4:	b10f      	cbz	r7, 169aa <strtod_soft+0x4e>
   169a6:	9b03      	ldr	r3, [sp, #12]
   169a8:	603b      	str	r3, [r7, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   169aa:	eeb0 0a48 	vmov.f32	s0, s16
   169ae:	eef0 0a68 	vmov.f32	s1, s17
   169b2:	b005      	add	sp, #20
   169b4:	ecbd 8b02 	vpop	{d8}
   169b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   169bc:	1c74      	adds	r4, r6, #1
   169be:	220a      	movs	r2, #10
   169c0:	a903      	add	r1, sp, #12
   169c2:	4620      	mov	r0, r4
   169c4:	f7f9 feb7 	bl	10736 <strtoll>
   169c8:	4680      	mov	r8, r0
   169ca:	4689      	mov	r9, r1
    if (endptr == 0) n = strlen(period_at + 1);
   169cc:	b137      	cbz	r7, 169dc <strtod_soft+0x80>
    else n = *endptr - period_at + 1;
   169ce:	6838      	ldr	r0, [r7, #0]
   169d0:	1b80      	subs	r0, r0, r6
   169d2:	3001      	adds	r0, #1
    div = 1;
   169d4:	2401      	movs	r4, #1
   169d6:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) div *= 10;
   169d8:	4629      	mov	r1, r5
   169da:	e00d      	b.n	169f8 <strtod_soft+0x9c>
    if (endptr == 0) n = strlen(period_at + 1);
   169dc:	4620      	mov	r0, r4
   169de:	f7f9 fe93 	bl	10708 <strlen>
   169e2:	e7f7      	b.n	169d4 <strtod_soft+0x78>
    for (i = 0; i < n; i++) div *= 10;
   169e4:	00aa      	lsls	r2, r5, #2
   169e6:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
   169ea:	00a3      	lsls	r3, r4, #2
   169ec:	191c      	adds	r4, r3, r4
   169ee:	eb45 0502 	adc.w	r5, r5, r2
   169f2:	1924      	adds	r4, r4, r4
   169f4:	416d      	adcs	r5, r5
   169f6:	3101      	adds	r1, #1
   169f8:	4281      	cmp	r1, r0
   169fa:	dbf3      	blt.n	169e4 <strtod_soft+0x88>
    f_frac = (double)frac / (double)div;
   169fc:	4640      	mov	r0, r8
   169fe:	4649      	mov	r1, r9
   16a00:	f00c fde0 	bl	235c4 <__aeabi_l2d>
   16a04:	4680      	mov	r8, r0
   16a06:	4689      	mov	r9, r1
   16a08:	4620      	mov	r0, r4
   16a0a:	4629      	mov	r1, r5
   16a0c:	f00c fdda 	bl	235c4 <__aeabi_l2d>
   16a10:	4602      	mov	r2, r0
   16a12:	460b      	mov	r3, r1
   16a14:	4640      	mov	r0, r8
   16a16:	4649      	mov	r1, r9
   16a18:	f00c ff2c 	bl	23874 <__aeabi_ddiv>
   16a1c:	4602      	mov	r2, r0
   16a1e:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   16a20:	f1bb 0f00 	cmp.w	fp, #0
   16a24:	db03      	blt.n	16a2e <strtod_soft+0xd2>
   16a26:	9901      	ldr	r1, [sp, #4]
   16a28:	b311      	cbz	r1, 16a70 <strtod_soft+0x114>
   16a2a:	428e      	cmp	r6, r1
   16a2c:	d920      	bls.n	16a70 <strtod_soft+0x114>
        f -= f_frac;
   16a2e:	ec51 0b18 	vmov	r0, r1, d8
   16a32:	f00c fc3d 	bl	232b0 <__aeabi_dsub>
   16a36:	ec41 0b18 	vmov	d8, r0, r1
    if (endptr) *endptr = ep;
   16a3a:	b10f      	cbz	r7, 16a40 <strtod_soft+0xe4>
   16a3c:	9b03      	ldr	r3, [sp, #12]
   16a3e:	603b      	str	r3, [r7, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   16a40:	f1ba 0f00 	cmp.w	sl, #0
   16a44:	d0b1      	beq.n	169aa <strtod_soft+0x4e>
   16a46:	f89a 3001 	ldrb.w	r3, [sl, #1]
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d0ad      	beq.n	169aa <strtod_soft+0x4e>
   16a4e:	9b03      	ldr	r3, [sp, #12]
   16a50:	2b00      	cmp	r3, #0
   16a52:	d0aa      	beq.n	169aa <strtod_soft+0x4e>
   16a54:	4553      	cmp	r3, sl
   16a56:	d1a8      	bne.n	169aa <strtod_soft+0x4e>
    n = strtoll(exponent_at+1, &ep, 10);
   16a58:	220a      	movs	r2, #10
   16a5a:	a903      	add	r1, sp, #12
   16a5c:	f10a 0001 	add.w	r0, sl, #1
   16a60:	f7f9 fe69 	bl	10736 <strtoll>
    if (n < 0) {
   16a64:	1e05      	subs	r5, r0, #0
   16a66:	db12      	blt.n	16a8e <strtod_soft+0x132>
        exp = 1;
   16a68:	2001      	movs	r0, #1
   16a6a:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) exp *= 10;
   16a6c:	460c      	mov	r4, r1
   16a6e:	e028      	b.n	16ac2 <strtod_soft+0x166>
        f += f_frac;
   16a70:	ec51 0b18 	vmov	r0, r1, d8
   16a74:	f00c fc1e 	bl	232b4 <__adddf3>
   16a78:	ec41 0b18 	vmov	d8, r0, r1
   16a7c:	e7dd      	b.n	16a3a <strtod_soft+0xde>
        for (i = 0; i < n; i++) div *= 10;
   16a7e:	220a      	movs	r2, #10
   16a80:	fb02 f401 	mul.w	r4, r2, r1
   16a84:	fba0 0102 	umull	r0, r1, r0, r2
   16a88:	4421      	add	r1, r4
   16a8a:	3301      	adds	r3, #1
   16a8c:	e002      	b.n	16a94 <strtod_soft+0x138>
        div = 1;
   16a8e:	2001      	movs	r0, #1
   16a90:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) div *= 10;
   16a92:	460b      	mov	r3, r1
   16a94:	42ab      	cmp	r3, r5
   16a96:	dbf2      	blt.n	16a7e <strtod_soft+0x122>
        f /= (double)div;
   16a98:	f00c fd94 	bl	235c4 <__aeabi_l2d>
   16a9c:	4602      	mov	r2, r0
   16a9e:	460b      	mov	r3, r1
   16aa0:	ec51 0b18 	vmov	r0, r1, d8
   16aa4:	f00c fee6 	bl	23874 <__aeabi_ddiv>
   16aa8:	ec41 0b18 	vmov	d8, r0, r1
   16aac:	e77d      	b.n	169aa <strtod_soft+0x4e>
        for (i = 0; i < n; i++) exp *= 10;
   16aae:	008b      	lsls	r3, r1, #2
   16ab0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   16ab4:	0082      	lsls	r2, r0, #2
   16ab6:	1810      	adds	r0, r2, r0
   16ab8:	eb41 0103 	adc.w	r1, r1, r3
   16abc:	1800      	adds	r0, r0, r0
   16abe:	4149      	adcs	r1, r1
   16ac0:	3401      	adds	r4, #1
   16ac2:	42ac      	cmp	r4, r5
   16ac4:	dbf3      	blt.n	16aae <strtod_soft+0x152>
        f *= (double)exp;
   16ac6:	f00c fd7d 	bl	235c4 <__aeabi_l2d>
   16aca:	4602      	mov	r2, r0
   16acc:	460b      	mov	r3, r1
   16ace:	ec51 0b18 	vmov	r0, r1, d8
   16ad2:	f00c fda5 	bl	23620 <__aeabi_dmul>
   16ad6:	ec41 0b18 	vmov	d8, r0, r1
   16ada:	e766      	b.n	169aa <strtod_soft+0x4e>

00016adc <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   16adc:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   16ade:	f010 0f03 	tst.w	r0, #3
   16ae2:	d115      	bne.n	16b10 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   16ae4:	4a0d      	ldr	r2, [pc, #52]	; (16b1c <leapyear+0x40>)
   16ae6:	fb82 1200 	smull	r1, r2, r2, r0
   16aea:	17c0      	asrs	r0, r0, #31
   16aec:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   16af0:	2264      	movs	r2, #100	; 0x64
   16af2:	fb02 3010 	mls	r0, r2, r0, r3
   16af6:	b968      	cbnz	r0, 16b14 <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   16af8:	4908      	ldr	r1, [pc, #32]	; (16b1c <leapyear+0x40>)
   16afa:	fb81 2103 	smull	r2, r1, r1, r3
   16afe:	17da      	asrs	r2, r3, #31
   16b00:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   16b04:	f44f 71c8 	mov.w	r1, #400	; 0x190
   16b08:	fb01 3212 	mls	r2, r1, r2, r3
   16b0c:	b122      	cbz	r2, 16b18 <leapyear+0x3c>
   16b0e:	4770      	bx	lr
    int rv = 0;
   16b10:	2000      	movs	r0, #0
   16b12:	4770      	bx	lr
        rv = 1;
   16b14:	2001      	movs	r0, #1
   16b16:	4770      	bx	lr
                rv = 1;
   16b18:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   16b1a:	4770      	bx	lr
   16b1c:	51eb851f 	.word	0x51eb851f

00016b20 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   16b20:	4684      	mov	ip, r0
    const char *cp;
    const char *end;

    *val = 0;
   16b22:	2300      	movs	r3, #0
   16b24:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   16b26:	4408      	add	r0, r1
    while (cp < end) {
   16b28:	4584      	cmp	ip, r0
   16b2a:	d21a      	bcs.n	16b62 <parse_number+0x42>
        if (!isdigit((int) *cp)) {
   16b2c:	f89c 3000 	ldrb.w	r3, [ip]
   16b30:	3b30      	subs	r3, #48	; 0x30
   16b32:	2b09      	cmp	r3, #9
   16b34:	d816      	bhi.n	16b64 <parse_number+0x44>
{
   16b36:	b500      	push	{lr}
            return (NULL);
        }
        *val *= 10;
   16b38:	6813      	ldr	r3, [r2, #0]
   16b3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16b3e:	005b      	lsls	r3, r3, #1
   16b40:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   16b42:	f81c eb01 	ldrb.w	lr, [ip], #1
   16b46:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   16b4a:	4473      	add	r3, lr
   16b4c:	6013      	str	r3, [r2, #0]
    while (cp < end) {
   16b4e:	4584      	cmp	ip, r0
   16b50:	d205      	bcs.n	16b5e <parse_number+0x3e>
        if (!isdigit((int) *cp)) {
   16b52:	f89c 3000 	ldrb.w	r3, [ip]
   16b56:	3b30      	subs	r3, #48	; 0x30
   16b58:	2b09      	cmp	r3, #9
   16b5a:	d9ed      	bls.n	16b38 <parse_number+0x18>
            return (NULL);
   16b5c:	2000      	movs	r0, #0
        cp++;
    }
    return (end);
}
   16b5e:	f85d fb04 	ldr.w	pc, [sp], #4
   16b62:	4770      	bx	lr
            return (NULL);
   16b64:	2000      	movs	r0, #0
}
   16b66:	4770      	bx	lr

00016b68 <clocktime_to_timeval>:
{
   16b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b6c:	b085      	sub	sp, #20
   16b6e:	9101      	str	r1, [sp, #4]
   16b70:	9200      	str	r2, [sp, #0]
    year = ct->year;
   16b72:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   16b74:	f240 73b1 	movw	r3, #1969	; 0x7b1
   16b78:	429e      	cmp	r6, r3
   16b7a:	f340 80bc 	ble.w	16cf6 <clocktime_to_timeval+0x18e>
   16b7e:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   16b80:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   16b82:	2d00      	cmp	r5, #0
   16b84:	f340 80bb 	ble.w	16cfe <clocktime_to_timeval+0x196>
        ct->mon < 1 || ct->mon > 12 ||
   16b88:	2d0c      	cmp	r5, #12
   16b8a:	f300 80ba 	bgt.w	16d02 <clocktime_to_timeval+0x19a>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16b8e:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   16b92:	f1b8 0f00 	cmp.w	r8, #0
   16b96:	f340 80b6 	ble.w	16d06 <clocktime_to_timeval+0x19e>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16b9a:	1e6b      	subs	r3, r5, #1
   16b9c:	4a65      	ldr	r2, [pc, #404]	; (16d34 <clocktime_to_timeval+0x1cc>)
   16b9e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   16ba2:	2d02      	cmp	r5, #2
   16ba4:	d02b      	beq.n	16bfe <clocktime_to_timeval+0x96>
   16ba6:	2000      	movs	r0, #0
   16ba8:	4407      	add	r7, r0
   16baa:	45b8      	cmp	r8, r7
   16bac:	f300 80ad 	bgt.w	16d0a <clocktime_to_timeval+0x1a2>
        ct->hour < 0 || ct->hour > 23 ||
   16bb0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16bb4:	f1bb 0f00 	cmp.w	fp, #0
   16bb8:	f2c0 80a9 	blt.w	16d0e <clocktime_to_timeval+0x1a6>
        ct->hour < 0 || ct->hour > 23 ||
   16bbc:	f1bb 0f17 	cmp.w	fp, #23
   16bc0:	f300 80a7 	bgt.w	16d12 <clocktime_to_timeval+0x1aa>
        ct->min < 0 || ct->min > 59 ||
   16bc4:	6923      	ldr	r3, [r4, #16]
   16bc6:	9302      	str	r3, [sp, #8]
        ct->hour < 0 || ct->hour > 23 ||
   16bc8:	2b00      	cmp	r3, #0
   16bca:	f2c0 80a4 	blt.w	16d16 <clocktime_to_timeval+0x1ae>
        ct->min < 0 || ct->min > 59 ||
   16bce:	2b3b      	cmp	r3, #59	; 0x3b
   16bd0:	f300 80a3 	bgt.w	16d1a <clocktime_to_timeval+0x1b2>
        ct->sec < 0 || ct->sec > 59 ||
   16bd4:	6963      	ldr	r3, [r4, #20]
   16bd6:	9303      	str	r3, [sp, #12]
        ct->min < 0 || ct->min > 59 ||
   16bd8:	2b00      	cmp	r3, #0
   16bda:	f2c0 80a0 	blt.w	16d1e <clocktime_to_timeval+0x1b6>
        ct->sec < 0 || ct->sec > 59 ||
   16bde:	2b3b      	cmp	r3, #59	; 0x3b
   16be0:	f300 809f 	bgt.w	16d22 <clocktime_to_timeval+0x1ba>
        ct->usec < 0 || ct->usec > 999999) {
   16be4:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   16be6:	2b00      	cmp	r3, #0
   16be8:	f2c0 809d 	blt.w	16d26 <clocktime_to_timeval+0x1be>
        ct->usec < 0 || ct->usec > 999999) {
   16bec:	4a52      	ldr	r2, [pc, #328]	; (16d38 <clocktime_to_timeval+0x1d0>)
   16bee:	4293      	cmp	r3, r2
   16bf0:	f300 809b 	bgt.w	16d2a <clocktime_to_timeval+0x1c2>
    days = 0;
   16bf4:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   16bf8:	f240 77b2 	movw	r7, #1970	; 0x7b2
   16bfc:	e007      	b.n	16c0e <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16bfe:	4630      	mov	r0, r6
   16c00:	f7ff ff6c 	bl	16adc <leapyear>
   16c04:	e7d0      	b.n	16ba8 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   16c06:	f240 136d 	movw	r3, #365	; 0x16d
   16c0a:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   16c0c:	3701      	adds	r7, #1
   16c0e:	42b7      	cmp	r7, r6
   16c10:	da07      	bge.n	16c22 <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   16c12:	4638      	mov	r0, r7
   16c14:	f7ff ff62 	bl	16adc <leapyear>
   16c18:	2800      	cmp	r0, #0
   16c1a:	d0f4      	beq.n	16c06 <clocktime_to_timeval+0x9e>
   16c1c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   16c20:	e7f3      	b.n	16c0a <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   16c22:	2701      	movs	r7, #1
   16c24:	46aa      	mov	sl, r5
   16c26:	e005      	b.n	16c34 <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   16c28:	4630      	mov	r0, r6
   16c2a:	f7ff ff57 	bl	16adc <leapyear>
   16c2e:	4405      	add	r5, r0
   16c30:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   16c32:	3701      	adds	r7, #1
   16c34:	45ba      	cmp	sl, r7
   16c36:	dd07      	ble.n	16c48 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   16c38:	1e7b      	subs	r3, r7, #1
   16c3a:	4a3e      	ldr	r2, [pc, #248]	; (16d34 <clocktime_to_timeval+0x1cc>)
   16c3c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   16c40:	2f02      	cmp	r7, #2
   16c42:	d0f1      	beq.n	16c28 <clocktime_to_timeval+0xc0>
   16c44:	2000      	movs	r0, #0
   16c46:	e7f2      	b.n	16c2e <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   16c48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   16c4c:	44c1      	add	r9, r8
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   16c4e:	ea4f 72e9 	mov.w	r2, r9, asr #31
   16c52:	eb19 0309 	adds.w	r3, r9, r9
   16c56:	eb42 0102 	adc.w	r1, r2, r2
   16c5a:	eb13 0309 	adds.w	r3, r3, r9
   16c5e:	eb42 0201 	adc.w	r2, r2, r1
   16c62:	00d2      	lsls	r2, r2, #3
   16c64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   16c68:	00db      	lsls	r3, r3, #3
   16c6a:	eb13 030b 	adds.w	r3, r3, fp
   16c6e:	eb42 7beb 	adc.w	fp, r2, fp, asr #31
   16c72:	ea4f 120b 	mov.w	r2, fp, lsl #4
   16c76:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   16c7a:	0119      	lsls	r1, r3, #4
   16c7c:	1acb      	subs	r3, r1, r3
   16c7e:	eb62 020b 	sbc.w	r2, r2, fp
   16c82:	0092      	lsls	r2, r2, #2
   16c84:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   16c88:	009b      	lsls	r3, r3, #2
   16c8a:	9802      	ldr	r0, [sp, #8]
   16c8c:	1819      	adds	r1, r3, r0
   16c8e:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
   16c92:	0102      	lsls	r2, r0, #4
   16c94:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
   16c98:	010b      	lsls	r3, r1, #4
   16c9a:	1a5b      	subs	r3, r3, r1
   16c9c:	eb62 0200 	sbc.w	r2, r2, r0
   16ca0:	0092      	lsls	r2, r2, #2
   16ca2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   16ca6:	009b      	lsls	r3, r3, #2
   16ca8:	9903      	ldr	r1, [sp, #12]
   16caa:	185b      	adds	r3, r3, r1
   16cac:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   16cb0:	9800      	ldr	r0, [sp, #0]
   16cb2:	6003      	str	r3, [r0, #0]
   16cb4:	6042      	str	r2, [r0, #4]
    tv->tv_usec = ct->usec;
   16cb6:	69e1      	ldr	r1, [r4, #28]
   16cb8:	4604      	mov	r4, r0
   16cba:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   16cbc:	9d01      	ldr	r5, [sp, #4]
   16cbe:	b3b5      	cbz	r5, 16d2e <clocktime_to_timeval+0x1c6>
	tv->tv_sec += tz->tz_minuteswest * 60;
   16cc0:	f9b5 1000 	ldrsh.w	r1, [r5]
   16cc4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   16cc8:	0088      	lsls	r0, r1, #2
   16cca:	181b      	adds	r3, r3, r0
   16ccc:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   16cd0:	6023      	str	r3, [r4, #0]
   16cd2:	6062      	str	r2, [r4, #4]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   16cd4:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   16cd8:	b151      	cbz	r1, 16cf0 <clocktime_to_timeval+0x188>
   16cda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   16cde:	2000      	movs	r0, #0
   16ce0:	1a5b      	subs	r3, r3, r1
   16ce2:	eb62 0200 	sbc.w	r2, r2, r0
   16ce6:	9900      	ldr	r1, [sp, #0]
   16ce8:	600b      	str	r3, [r1, #0]
   16cea:	604a      	str	r2, [r1, #4]
    return (0);
   16cec:	2000      	movs	r0, #0
   16cee:	e003      	b.n	16cf8 <clocktime_to_timeval+0x190>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   16cf0:	2100      	movs	r1, #0
   16cf2:	4608      	mov	r0, r1
   16cf4:	e7f4      	b.n	16ce0 <clocktime_to_timeval+0x178>
        return (OS_EINVAL);
   16cf6:	2002      	movs	r0, #2
}
   16cf8:	b005      	add	sp, #20
   16cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   16cfe:	2002      	movs	r0, #2
   16d00:	e7fa      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d02:	2002      	movs	r0, #2
   16d04:	e7f8      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d06:	2002      	movs	r0, #2
   16d08:	e7f6      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d0a:	2002      	movs	r0, #2
   16d0c:	e7f4      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d0e:	2002      	movs	r0, #2
   16d10:	e7f2      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d12:	2002      	movs	r0, #2
   16d14:	e7f0      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d16:	2002      	movs	r0, #2
   16d18:	e7ee      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d1a:	2002      	movs	r0, #2
   16d1c:	e7ec      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d1e:	2002      	movs	r0, #2
   16d20:	e7ea      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d22:	2002      	movs	r0, #2
   16d24:	e7e8      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d26:	2002      	movs	r0, #2
   16d28:	e7e6      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d2a:	2002      	movs	r0, #2
   16d2c:	e7e4      	b.n	16cf8 <clocktime_to_timeval+0x190>
    return (0);
   16d2e:	2000      	movs	r0, #0
   16d30:	e7e2      	b.n	16cf8 <clocktime_to_timeval+0x190>
   16d32:	bf00      	nop
   16d34:	00026a8c 	.word	0x00026a8c
   16d38:	000f423f 	.word	0x000f423f

00016d3c <timeval_to_clocktime>:
{
   16d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16d40:	4606      	mov	r6, r0
   16d42:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   16d44:	6807      	ldr	r7, [r0, #0]
   16d46:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (tz != NULL) {
   16d4a:	b189      	cbz	r1, 16d70 <timeval_to_clocktime+0x34>
        secs -= tz->tz_minuteswest * 60;
   16d4c:	f9b1 3000 	ldrsh.w	r3, [r1]
   16d50:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   16d54:	009a      	lsls	r2, r3, #2
   16d56:	1abf      	subs	r7, r7, r2
   16d58:	eb68 73e3 	sbc.w	r3, r8, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   16d5c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   16d60:	b37a      	cbz	r2, 16dc2 <timeval_to_clocktime+0x86>
   16d62:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16d66:	f04f 0800 	mov.w	r8, #0
   16d6a:	19d7      	adds	r7, r2, r7
   16d6c:	eb48 0803 	adc.w	r8, r8, r3
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   16d70:	f1b8 0f00 	cmp.w	r8, #0
   16d74:	db73      	blt.n	16e5e <timeval_to_clocktime+0x122>
   16d76:	68b3      	ldr	r3, [r6, #8]
   16d78:	2b00      	cmp	r3, #0
   16d7a:	db72      	blt.n	16e62 <timeval_to_clocktime+0x126>
   16d7c:	4a3b      	ldr	r2, [pc, #236]	; (16e6c <timeval_to_clocktime+0x130>)
   16d7e:	4293      	cmp	r3, r2
   16d80:	dc71      	bgt.n	16e66 <timeval_to_clocktime+0x12a>
    days = secs / SECDAY;
   16d82:	4a3b      	ldr	r2, [pc, #236]	; (16e70 <timeval_to_clocktime+0x134>)
   16d84:	2300      	movs	r3, #0
   16d86:	4638      	mov	r0, r7
   16d88:	4641      	mov	r1, r8
   16d8a:	f00d f89f 	bl	23ecc <__aeabi_ldivmod>
   16d8e:	4681      	mov	r9, r0
   16d90:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   16d92:	4a37      	ldr	r2, [pc, #220]	; (16e70 <timeval_to_clocktime+0x134>)
   16d94:	2300      	movs	r3, #0
   16d96:	4638      	mov	r0, r7
   16d98:	4641      	mov	r1, r8
   16d9a:	f00d f897 	bl	23ecc <__aeabi_ldivmod>
   16d9e:	4690      	mov	r8, r2
   16da0:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   16da2:	f109 0004 	add.w	r0, r9, #4
   16da6:	4b33      	ldr	r3, [pc, #204]	; (16e74 <timeval_to_clocktime+0x138>)
   16da8:	fb83 2300 	smull	r2, r3, r3, r0
   16dac:	181a      	adds	r2, r3, r0
   16dae:	17c3      	asrs	r3, r0, #31
   16db0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   16db4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   16db8:	1ac3      	subs	r3, r0, r3
   16dba:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   16dbc:	f240 79b2 	movw	r9, #1970	; 0x7b2
   16dc0:	e009      	b.n	16dd6 <timeval_to_clocktime+0x9a>
        secs += tz->tz_dsttime ? 3600 : 0;
   16dc2:	2200      	movs	r2, #0
   16dc4:	4690      	mov	r8, r2
   16dc6:	e7d0      	b.n	16d6a <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   16dc8:	f240 136d 	movw	r3, #365	; 0x16d
   16dcc:	429c      	cmp	r4, r3
   16dce:	db0b      	blt.n	16de8 <timeval_to_clocktime+0xac>
        days -= days_in_year(year);
   16dd0:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   16dd2:	f109 0901 	add.w	r9, r9, #1
   16dd6:	4648      	mov	r0, r9
   16dd8:	f7ff fe80 	bl	16adc <leapyear>
   16ddc:	4686      	mov	lr, r0
   16dde:	2800      	cmp	r0, #0
   16de0:	d0f2      	beq.n	16dc8 <timeval_to_clocktime+0x8c>
   16de2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   16de6:	e7f1      	b.n	16dcc <timeval_to_clocktime+0x90>
    ct->year = year;
   16de8:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   16dec:	2301      	movs	r3, #1
   16dee:	e006      	b.n	16dfe <timeval_to_clocktime+0xc2>
   16df0:	46f4      	mov	ip, lr
   16df2:	448c      	add	ip, r1
   16df4:	45a4      	cmp	ip, r4
   16df6:	dc0b      	bgt.n	16e10 <timeval_to_clocktime+0xd4>
        days -= days_in_month(year, i);
   16df8:	eba4 040c 	sub.w	r4, r4, ip
    for (i = 1; days >= days_in_month(year, i); i++)
   16dfc:	3301      	adds	r3, #1
   16dfe:	1e5a      	subs	r2, r3, #1
   16e00:	491d      	ldr	r1, [pc, #116]	; (16e78 <timeval_to_clocktime+0x13c>)
   16e02:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   16e06:	2b02      	cmp	r3, #2
   16e08:	d0f2      	beq.n	16df0 <timeval_to_clocktime+0xb4>
   16e0a:	f04f 0c00 	mov.w	ip, #0
   16e0e:	e7f0      	b.n	16df2 <timeval_to_clocktime+0xb6>
    ct->mon = i;
   16e10:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   16e12:	3401      	adds	r4, #1
   16e14:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   16e16:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16e1a:	2300      	movs	r3, #0
   16e1c:	4640      	mov	r0, r8
   16e1e:	4639      	mov	r1, r7
   16e20:	f00d f854 	bl	23ecc <__aeabi_ldivmod>
   16e24:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   16e26:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16e2a:	2300      	movs	r3, #0
   16e2c:	4640      	mov	r0, r8
   16e2e:	4639      	mov	r1, r7
   16e30:	f00d f84c 	bl	23ecc <__aeabi_ldivmod>
   16e34:	4617      	mov	r7, r2
   16e36:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   16e38:	223c      	movs	r2, #60	; 0x3c
   16e3a:	2300      	movs	r3, #0
   16e3c:	4638      	mov	r0, r7
   16e3e:	4621      	mov	r1, r4
   16e40:	f00d f844 	bl	23ecc <__aeabi_ldivmod>
   16e44:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   16e46:	223c      	movs	r2, #60	; 0x3c
   16e48:	2300      	movs	r3, #0
   16e4a:	4638      	mov	r0, r7
   16e4c:	4621      	mov	r1, r4
   16e4e:	f00d f83d 	bl	23ecc <__aeabi_ldivmod>
    ct->sec  = rsec;
   16e52:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   16e54:	68b3      	ldr	r3, [r6, #8]
   16e56:	61eb      	str	r3, [r5, #28]
    return (0);
   16e58:	2000      	movs	r0, #0
}
   16e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (OS_EINVAL);
   16e5e:	2002      	movs	r0, #2
   16e60:	e7fb      	b.n	16e5a <timeval_to_clocktime+0x11e>
   16e62:	2002      	movs	r0, #2
   16e64:	e7f9      	b.n	16e5a <timeval_to_clocktime+0x11e>
   16e66:	2002      	movs	r0, #2
   16e68:	e7f7      	b.n	16e5a <timeval_to_clocktime+0x11e>
   16e6a:	bf00      	nop
   16e6c:	000f423f 	.word	0x000f423f
   16e70:	00015180 	.word	0x00015180
   16e74:	92492493 	.word	0x92492493
   16e78:	00026a8c 	.word	0x00026a8c

00016e7c <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   16e7c:	b570      	push	{r4, r5, r6, lr}
   16e7e:	b08a      	sub	sp, #40	; 0x28
   16e80:	4604      	mov	r4, r0
   16e82:	460d      	mov	r5, r1
   16e84:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   16e86:	2220      	movs	r2, #32
   16e88:	2100      	movs	r1, #0
   16e8a:	4668      	mov	r0, sp
   16e8c:	f7f9 fc05 	bl	1069a <memset>
    bzero(tv, sizeof(struct os_timeval));
   16e90:	2300      	movs	r3, #0
   16e92:	602b      	str	r3, [r5, #0]
   16e94:	606b      	str	r3, [r5, #4]
   16e96:	60ab      	str	r3, [r5, #8]
   16e98:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   16e9a:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   16e9c:	466a      	mov	r2, sp
   16e9e:	2104      	movs	r1, #4
   16ea0:	4620      	mov	r0, r4
   16ea2:	f7ff fe3d 	bl	16b20 <parse_number>
    if (cp == NULL || *cp != '-') {
   16ea6:	2800      	cmp	r0, #0
   16ea8:	f000 80a6 	beq.w	16ff8 <datetime_parse+0x17c>
   16eac:	7802      	ldrb	r2, [r0, #0]
   16eae:	2a2d      	cmp	r2, #45	; 0x2d
   16eb0:	f040 80a5 	bne.w	16ffe <datetime_parse+0x182>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   16eb4:	aa01      	add	r2, sp, #4
   16eb6:	2102      	movs	r1, #2
   16eb8:	3001      	adds	r0, #1
   16eba:	f7ff fe31 	bl	16b20 <parse_number>
    if (cp == NULL || *cp != '-') {
   16ebe:	2800      	cmp	r0, #0
   16ec0:	f000 80a0 	beq.w	17004 <datetime_parse+0x188>
   16ec4:	7802      	ldrb	r2, [r0, #0]
   16ec6:	2a2d      	cmp	r2, #45	; 0x2d
   16ec8:	f040 809f 	bne.w	1700a <datetime_parse+0x18e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   16ecc:	aa02      	add	r2, sp, #8
   16ece:	2102      	movs	r1, #2
   16ed0:	3001      	adds	r0, #1
   16ed2:	f7ff fe25 	bl	16b20 <parse_number>
    if (cp == NULL || *cp != 'T') {
   16ed6:	2800      	cmp	r0, #0
   16ed8:	f000 809a 	beq.w	17010 <datetime_parse+0x194>
   16edc:	7802      	ldrb	r2, [r0, #0]
   16ede:	2a54      	cmp	r2, #84	; 0x54
   16ee0:	f040 8099 	bne.w	17016 <datetime_parse+0x19a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   16ee4:	aa03      	add	r2, sp, #12
   16ee6:	2102      	movs	r1, #2
   16ee8:	3001      	adds	r0, #1
   16eea:	f7ff fe19 	bl	16b20 <parse_number>
    if (cp == NULL || *cp != ':') {
   16eee:	2800      	cmp	r0, #0
   16ef0:	f000 8094 	beq.w	1701c <datetime_parse+0x1a0>
   16ef4:	7802      	ldrb	r2, [r0, #0]
   16ef6:	2a3a      	cmp	r2, #58	; 0x3a
   16ef8:	f040 8093 	bne.w	17022 <datetime_parse+0x1a6>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   16efc:	aa04      	add	r2, sp, #16
   16efe:	2102      	movs	r1, #2
   16f00:	3001      	adds	r0, #1
   16f02:	f7ff fe0d 	bl	16b20 <parse_number>
    if (cp == NULL || *cp != ':') {
   16f06:	2800      	cmp	r0, #0
   16f08:	f000 808e 	beq.w	17028 <datetime_parse+0x1ac>
   16f0c:	7802      	ldrb	r2, [r0, #0]
   16f0e:	2a3a      	cmp	r2, #58	; 0x3a
   16f10:	f040 808d 	bne.w	1702e <datetime_parse+0x1b2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   16f14:	aa05      	add	r2, sp, #20
   16f16:	2102      	movs	r1, #2
   16f18:	3001      	adds	r0, #1
   16f1a:	f7ff fe01 	bl	16b20 <parse_number>
    if (cp == NULL) {
   16f1e:	4684      	mov	ip, r0
   16f20:	2800      	cmp	r0, #0
   16f22:	f000 8087 	beq.w	17034 <datetime_parse+0x1b8>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   16f26:	7803      	ldrb	r3, [r0, #0]
   16f28:	2b2e      	cmp	r3, #46	; 0x2e
   16f2a:	d037      	beq.n	16f9c <datetime_parse+0x120>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   16f2c:	f89c 3000 	ldrb.w	r3, [ip]
   16f30:	2b5a      	cmp	r3, #90	; 0x5a
   16f32:	d050      	beq.n	16fd6 <datetime_parse+0x15a>
   16f34:	2b7a      	cmp	r3, #122	; 0x7a
   16f36:	d04e      	beq.n	16fd6 <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   16f38:	2b2b      	cmp	r3, #43	; 0x2b
   16f3a:	d001      	beq.n	16f40 <datetime_parse+0xc4>
   16f3c:	2b2d      	cmp	r3, #45	; 0x2d
   16f3e:	d14c      	bne.n	16fda <datetime_parse+0x15e>
        sign = (*cp == '+') ? +1 : -1;
   16f40:	2b2b      	cmp	r3, #43	; 0x2b
   16f42:	d057      	beq.n	16ff4 <datetime_parse+0x178>
   16f44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   16f48:	aa09      	add	r2, sp, #36	; 0x24
   16f4a:	2102      	movs	r1, #2
   16f4c:	f10c 0001 	add.w	r0, ip, #1
   16f50:	f7ff fde6 	bl	16b20 <parse_number>
        if (cp == NULL || *cp != ':') {
   16f54:	2800      	cmp	r0, #0
   16f56:	d076      	beq.n	17046 <datetime_parse+0x1ca>
   16f58:	7802      	ldrb	r2, [r0, #0]
   16f5a:	2a3a      	cmp	r2, #58	; 0x3a
   16f5c:	d176      	bne.n	1704c <datetime_parse+0x1d0>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   16f5e:	aa08      	add	r2, sp, #32
   16f60:	2102      	movs	r1, #2
   16f62:	3001      	adds	r0, #1
   16f64:	f7ff fddc 	bl	16b20 <parse_number>
        if (cp == NULL) {
   16f68:	4684      	mov	ip, r0
   16f6a:	2800      	cmp	r0, #0
   16f6c:	d071      	beq.n	17052 <datetime_parse+0x1d6>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   16f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16f70:	2a17      	cmp	r2, #23
   16f72:	d871      	bhi.n	17058 <datetime_parse+0x1dc>
   16f74:	9b08      	ldr	r3, [sp, #32]
   16f76:	2b00      	cmp	r3, #0
   16f78:	db71      	blt.n	1705e <datetime_parse+0x1e2>
   16f7a:	2b3b      	cmp	r3, #59	; 0x3b
   16f7c:	dc72      	bgt.n	17064 <datetime_parse+0x1e8>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   16f7e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   16f82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   16f86:	b29a      	uxth	r2, r3
   16f88:	b21b      	sxth	r3, r3
   16f8a:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   16f8c:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   16f90:	dc6b      	bgt.n	1706a <datetime_parse+0x1ee>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   16f92:	2c00      	cmp	r4, #0
   16f94:	dd21      	ble.n	16fda <datetime_parse+0x15e>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   16f96:	4252      	negs	r2, r2
   16f98:	8032      	strh	r2, [r6, #0]
   16f9a:	e01e      	b.n	16fda <datetime_parse+0x15e>
        ep = ++cp;
   16f9c:	3001      	adds	r0, #1
   16f9e:	4604      	mov	r4, r0
        while (isdigit((int) *ep)) {
   16fa0:	e000      	b.n	16fa4 <datetime_parse+0x128>
            ep++;
   16fa2:	3401      	adds	r4, #1
        while (isdigit((int) *ep)) {
   16fa4:	7823      	ldrb	r3, [r4, #0]
   16fa6:	3b30      	subs	r3, #48	; 0x30
   16fa8:	2b09      	cmp	r3, #9
   16faa:	d9fa      	bls.n	16fa2 <datetime_parse+0x126>
        digits = ep - cp;
   16fac:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   16fae:	1e63      	subs	r3, r4, #1
   16fb0:	2b05      	cmp	r3, #5
   16fb2:	d842      	bhi.n	1703a <datetime_parse+0x1be>
        cp = parse_number(cp, digits, &ct.usec);
   16fb4:	aa07      	add	r2, sp, #28
   16fb6:	4621      	mov	r1, r4
   16fb8:	f7ff fdb2 	bl	16b20 <parse_number>
        if (cp == NULL) {
   16fbc:	4684      	mov	ip, r0
   16fbe:	2800      	cmp	r0, #0
   16fc0:	d03e      	beq.n	17040 <datetime_parse+0x1c4>
        while (digits++ < 6) {
   16fc2:	1c62      	adds	r2, r4, #1
   16fc4:	2c05      	cmp	r4, #5
   16fc6:	dcb1      	bgt.n	16f2c <datetime_parse+0xb0>
            ct.usec *= 10;
   16fc8:	9b07      	ldr	r3, [sp, #28]
   16fca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16fce:	005b      	lsls	r3, r3, #1
   16fd0:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   16fd2:	4614      	mov	r4, r2
   16fd4:	e7f5      	b.n	16fc2 <datetime_parse+0x146>
        cp++;
   16fd6:	f10c 0c01 	add.w	ip, ip, #1
        /*
         * 'time offset' is not specified so date/time defaults to UTC.
         */
    }

    if (*cp != '\0') {
   16fda:	f89c 3000 	ldrb.w	r3, [ip]
   16fde:	2b00      	cmp	r3, #0
   16fe0:	d146      	bne.n	17070 <datetime_parse+0x1f4>
        goto err;
    }

    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   16fe2:	462a      	mov	r2, r5
   16fe4:	4631      	mov	r1, r6
   16fe6:	4668      	mov	r0, sp
   16fe8:	f7ff fdbe 	bl	16b68 <clocktime_to_timeval>
   16fec:	2800      	cmp	r0, #0
   16fee:	d142      	bne.n	17076 <datetime_parse+0x1fa>
    }

    return (0);
err:
    return (-1);
}
   16ff0:	b00a      	add	sp, #40	; 0x28
   16ff2:	bd70      	pop	{r4, r5, r6, pc}
        sign = (*cp == '+') ? +1 : -1;
   16ff4:	2401      	movs	r4, #1
   16ff6:	e7a7      	b.n	16f48 <datetime_parse+0xcc>
    return (-1);
   16ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ffc:	e7f8      	b.n	16ff0 <datetime_parse+0x174>
   16ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17002:	e7f5      	b.n	16ff0 <datetime_parse+0x174>
   17004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17008:	e7f2      	b.n	16ff0 <datetime_parse+0x174>
   1700a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1700e:	e7ef      	b.n	16ff0 <datetime_parse+0x174>
   17010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17014:	e7ec      	b.n	16ff0 <datetime_parse+0x174>
   17016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1701a:	e7e9      	b.n	16ff0 <datetime_parse+0x174>
   1701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17020:	e7e6      	b.n	16ff0 <datetime_parse+0x174>
   17022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17026:	e7e3      	b.n	16ff0 <datetime_parse+0x174>
   17028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1702c:	e7e0      	b.n	16ff0 <datetime_parse+0x174>
   1702e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17032:	e7dd      	b.n	16ff0 <datetime_parse+0x174>
   17034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17038:	e7da      	b.n	16ff0 <datetime_parse+0x174>
   1703a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1703e:	e7d7      	b.n	16ff0 <datetime_parse+0x174>
   17040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17044:	e7d4      	b.n	16ff0 <datetime_parse+0x174>
   17046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1704a:	e7d1      	b.n	16ff0 <datetime_parse+0x174>
   1704c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17050:	e7ce      	b.n	16ff0 <datetime_parse+0x174>
   17052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17056:	e7cb      	b.n	16ff0 <datetime_parse+0x174>
   17058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1705c:	e7c8      	b.n	16ff0 <datetime_parse+0x174>
   1705e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17062:	e7c5      	b.n	16ff0 <datetime_parse+0x174>
   17064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17068:	e7c2      	b.n	16ff0 <datetime_parse+0x174>
   1706a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1706e:	e7bf      	b.n	16ff0 <datetime_parse+0x174>
   17070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17074:	e7bc      	b.n	16ff0 <datetime_parse+0x174>
   17076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1707a:	e7b9      	b.n	16ff0 <datetime_parse+0x174>

0001707c <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   1707c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1707e:	b08f      	sub	sp, #60	; 0x3c
   17080:	460e      	mov	r6, r1
   17082:	4617      	mov	r7, r2
   17084:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   17086:	aa06      	add	r2, sp, #24
   17088:	f7ff fe58 	bl	16d3c <timeval_to_clocktime>
    if (rc != 0) {
   1708c:	2800      	cmp	r0, #0
   1708e:	d147      	bne.n	17120 <datetime_format+0xa4>
   17090:	4605      	mov	r5, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   17092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17094:	9305      	str	r3, [sp, #20]
   17096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17098:	9304      	str	r3, [sp, #16]
   1709a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1709c:	9303      	str	r3, [sp, #12]
   1709e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   170a0:	9302      	str	r3, [sp, #8]
   170a2:	9b08      	ldr	r3, [sp, #32]
   170a4:	9301      	str	r3, [sp, #4]
   170a6:	9b07      	ldr	r3, [sp, #28]
   170a8:	9300      	str	r3, [sp, #0]
   170aa:	9b06      	ldr	r3, [sp, #24]
   170ac:	4a24      	ldr	r2, [pc, #144]	; (17140 <datetime_format+0xc4>)
   170ae:	4621      	mov	r1, r4
   170b0:	4638      	mov	r0, r7
   170b2:	f7f9 ff3a 	bl	10f2a <snprintf>
   170b6:	4684      	mov	ip, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   170b8:	1838      	adds	r0, r7, r0
    rlen -= rc;
   170ba:	eba4 040c 	sub.w	r4, r4, ip
    if (rc < 0 || rlen <= 0) {
   170be:	f1bc 0f00 	cmp.w	ip, #0
   170c2:	db30      	blt.n	17126 <datetime_format+0xaa>
   170c4:	2c00      	cmp	r4, #0
   170c6:	dd31      	ble.n	1712c <datetime_format+0xb0>
        goto err;
    }

    if (tz != NULL) {
   170c8:	b15e      	cbz	r6, 170e2 <datetime_format+0x66>
        minswest = tz->tz_minuteswest;
   170ca:	f9b6 c000 	ldrsh.w	ip, [r6]
        if (tz->tz_dsttime) {
   170ce:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   170d2:	b10b      	cbz	r3, 170d8 <datetime_format+0x5c>
            minswest -= 60;
   170d4:	f1ac 0c3c 	sub.w	ip, ip, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   170d8:	f1bc 0f00 	cmp.w	ip, #0
   170dc:	dd02      	ble.n	170e4 <datetime_format+0x68>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   170de:	232d      	movs	r3, #45	; 0x2d
   170e0:	e003      	b.n	170ea <datetime_format+0x6e>
        minswest = 0;
   170e2:	46ac      	mov	ip, r5
        minswest = -minswest;
   170e4:	f1cc 0c00 	rsb	ip, ip, #0
        sign = '+';
   170e8:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   170ea:	4a16      	ldr	r2, [pc, #88]	; (17144 <datetime_format+0xc8>)
   170ec:	fb82 120c 	smull	r1, r2, r2, ip
   170f0:	eb02 010c 	add.w	r1, r2, ip
   170f4:	ea4f 72ec 	mov.w	r2, ip, asr #31
   170f8:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   170fc:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   17100:	ebac 0181 	sub.w	r1, ip, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   17104:	9101      	str	r1, [sp, #4]
   17106:	9200      	str	r2, [sp, #0]
   17108:	4a0f      	ldr	r2, [pc, #60]	; (17148 <datetime_format+0xcc>)
   1710a:	4621      	mov	r1, r4
   1710c:	f7f9 ff0d 	bl	10f2a <snprintf>
    cp += rc;
    rlen -= rc;
   17110:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   17112:	2800      	cmp	r0, #0
   17114:	db0d      	blt.n	17132 <datetime_format+0xb6>
   17116:	2c00      	cmp	r4, #0
   17118:	dd0e      	ble.n	17138 <datetime_format+0xbc>

    return (0);

err:
    return (-1);
}
   1711a:	4628      	mov	r0, r5
   1711c:	b00f      	add	sp, #60	; 0x3c
   1711e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (-1);
   17120:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17124:	e7f9      	b.n	1711a <datetime_format+0x9e>
   17126:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1712a:	e7f6      	b.n	1711a <datetime_format+0x9e>
   1712c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17130:	e7f3      	b.n	1711a <datetime_format+0x9e>
   17132:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17136:	e7f0      	b.n	1711a <datetime_format+0x9e>
   17138:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1713c:	e7ed      	b.n	1711a <datetime_format+0x9e>
   1713e:	bf00      	nop
   17140:	00026a5c 	.word	0x00026a5c
   17144:	88888889 	.word	0x88888889
   17148:	00026a80 	.word	0x00026a80

0001714c <crc16_ccitt>:
    int counter;

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
   1714c:	f04f 0c00 	mov.w	ip, #0
   17150:	4594      	cmp	ip, r2
   17152:	da11      	bge.n	17178 <crc16_ccitt+0x2c>
{
   17154:	b410      	push	{r4}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   17156:	f811 3b01 	ldrb.w	r3, [r1], #1
   1715a:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
   1715e:	4c07      	ldr	r4, [pc, #28]	; (1717c <crc16_ccitt+0x30>)
   17160:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
   17164:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
   17168:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   1716a:	f10c 0c01 	add.w	ip, ip, #1
   1716e:	4594      	cmp	ip, r2
   17170:	dbf1      	blt.n	17156 <crc16_ccitt+0xa>
    }

    return crc;
}
   17172:	f85d 4b04 	ldr.w	r4, [sp], #4
   17176:	4770      	bx	lr
   17178:	4770      	bx	lr
   1717a:	bf00      	nop
   1717c:	00026abc 	.word	0x00026abc

00017180 <parse_num_base>:
 */
static int
parse_num_base(const char *sval)
{
    /* Skip optional sign. */
    if (sval[0] == '+' || sval[0] == '-') {
   17180:	7803      	ldrb	r3, [r0, #0]
   17182:	2b2b      	cmp	r3, #43	; 0x2b
   17184:	d001      	beq.n	1718a <parse_num_base+0xa>
   17186:	2b2d      	cmp	r3, #45	; 0x2d
   17188:	d100      	bne.n	1718c <parse_num_base+0xc>
        sval++;
   1718a:	3001      	adds	r0, #1
    }

    if (sval[0] == '0' && sval[1] == 'x') {
   1718c:	7803      	ldrb	r3, [r0, #0]
   1718e:	2b30      	cmp	r3, #48	; 0x30
   17190:	d104      	bne.n	1719c <parse_num_base+0x1c>
   17192:	7843      	ldrb	r3, [r0, #1]
   17194:	2b78      	cmp	r3, #120	; 0x78
   17196:	d003      	beq.n	171a0 <parse_num_base+0x20>
        return 0;
    } else {
        return 10;
   17198:	200a      	movs	r0, #10
   1719a:	4770      	bx	lr
   1719c:	200a      	movs	r0, #10
   1719e:	4770      	bx	lr
        return 0;
   171a0:	2000      	movs	r0, #0
    }
}
   171a2:	4770      	bx	lr

000171a4 <parse_ll_bounds>:

long long
parse_ll_bounds(const char *sval, long long min, long long max,
                int *out_status)
{
   171a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   171a8:	b083      	sub	sp, #12
   171aa:	4604      	mov	r4, r0
   171ac:	4616      	mov	r6, r2
   171ae:	461d      	mov	r5, r3
   171b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   171b4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   171b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    char *endptr;
    long long llval;

    *out_status = SYS_EOK;
   171ba:	2300      	movs	r3, #0
   171bc:	603b      	str	r3, [r7, #0]

    llval = strtoll(sval, &endptr, parse_num_base(sval));
   171be:	f7ff ffdf 	bl	17180 <parse_num_base>
   171c2:	4602      	mov	r2, r0
   171c4:	a901      	add	r1, sp, #4
   171c6:	4620      	mov	r0, r4
   171c8:	f7f9 fab5 	bl	10736 <strtoll>
    if (sval[0] != '\0' && *endptr == '\0') {
   171cc:	7823      	ldrb	r3, [r4, #0]
   171ce:	b113      	cbz	r3, 171d6 <parse_ll_bounds+0x32>
   171d0:	9b01      	ldr	r3, [sp, #4]
   171d2:	781b      	ldrb	r3, [r3, #0]
   171d4:	b13b      	cbz	r3, 171e6 <parse_ll_bounds+0x42>
            *out_status = SYS_ERANGE;
        }
        return llval;
    }

    *out_status = SYS_EINVAL;
   171d6:	f06f 0301 	mvn.w	r3, #1
   171da:	603b      	str	r3, [r7, #0]
    return 0;
   171dc:	2000      	movs	r0, #0
   171de:	4601      	mov	r1, r0
}
   171e0:	b003      	add	sp, #12
   171e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (llval < min || llval > max) {
   171e6:	42b0      	cmp	r0, r6
   171e8:	eb71 0305 	sbcs.w	r3, r1, r5
   171ec:	db03      	blt.n	171f6 <parse_ll_bounds+0x52>
   171ee:	4581      	cmp	r9, r0
   171f0:	eb78 0301 	sbcs.w	r3, r8, r1
   171f4:	daf4      	bge.n	171e0 <parse_ll_bounds+0x3c>
            *out_status = SYS_ERANGE;
   171f6:	f06f 0309 	mvn.w	r3, #9
   171fa:	603b      	str	r3, [r7, #0]
        return llval;
   171fc:	e7f0      	b.n	171e0 <parse_ll_bounds+0x3c>

000171fe <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   171fe:	b508      	push	{r3, lr}
   17200:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   17202:	4611      	mov	r1, r2
   17204:	f7fc fde8 	bl	13dd8 <console_vprintf>
}
   17208:	bd08      	pop	{r3, pc}

0001720a <streamer_console_write>:
{
   1720a:	b508      	push	{r3, lr}
   1720c:	4608      	mov	r0, r1
    console_write(src, len);
   1720e:	4611      	mov	r1, r2
   17210:	f7fc fbd8 	bl	139c4 <console_write>
}
   17214:	2000      	movs	r0, #0
   17216:	bd08      	pop	{r3, pc}

00017218 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   17218:	4800      	ldr	r0, [pc, #0]	; (1721c <streamer_console_get+0x4>)
   1721a:	4770      	bx	lr
   1721c:	20000874 	.word	0x20000874

00017220 <sysinit_app>:
void panmaster_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   17220:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   17222:	f7f2 f941 	bl	94a8 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   17226:	f7fc ffc3 	bl	141b0 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   1722a:	f7fe fee3 	bl	15ff4 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   1722e:	f7fc fdab 	bl	13d88 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   17232:	f00b f809 	bl	22248 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   17236:	f7fd f89f 	bl	14378 <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   1723a:	f7fd fb19 	bl	14870 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   1723e:	f00b fb1d 	bl	2287c <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   17242:	f7fd fc8d 	bl	14b60 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   17246:	f00b f80f 	bl	22268 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   1724a:	f005 feff 	bl	1d04c <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   1724e:	f7f8 fa4b 	bl	f6e8 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   17252:	f7f9 f8a5 	bl	103a0 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   17256:	f7f7 f8cb 	bl	e3f0 <tdma_pkg_init>
    /* 404.1: uwb_pan_pkg_init (lib/uwb_pan) */
    uwb_pan_pkg_init();
   1725a:	f7f8 fced 	bl	fc38 <uwb_pan_pkg_init>
    /* 404.2: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   1725e:	f009 febd 	bl	20fdc <uwb_rng_pkg_init>
    /* 404.3: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   17262:	f00a f8ab 	bl	213bc <wcs_timescale_pkg_init>

    /*** Stage 410 */
    /* 410.0: nmgr_uwb_pkg_init (lib/nmgr_uwb) */
    nmgr_uwb_pkg_init();
   17266:	f7f3 ff51 	bl	b10c <nmgr_uwb_pkg_init>

    /*** Stage 411 */
    /* 411.0: nrng_pkg_init (lib/nrng) */
    nrng_pkg_init();
   1726a:	f7f4 f9c3 	bl	b5f4 <nrng_pkg_init>

    /*** Stage 414 */
    /* 414.0: twr_ss_nrng_pkg_init (lib/twr_ss_nrng) */
    twr_ss_nrng_pkg_init();
   1726e:	f009 fb97 	bl	209a0 <twr_ss_nrng_pkg_init>

    /*** Stage 420 */
    /* 420.0: survey_pkg_init (lib/survey) */
    survey_pkg_init();
   17272:	f7f6 fd61 	bl	dd38 <survey_pkg_init>

    /*** Stage 500 */
    /* 500.0: bcast_ota_pkg_init (mgmt/bcast_ota) */
    bcast_ota_pkg_init();
   17276:	f00a fb27 	bl	218c8 <bcast_ota_pkg_init>
    /* 500.1: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   1727a:	f7fa fab7 	bl	117ec <imgmgr_module_init>
    /* 500.2: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   1727e:	f7fb f88d 	bl	1239c <nmgr_pkg_init>
    /* 500.3: shell_init (sys/shell) */
    shell_init();
   17282:	f7fe fb01 	bl	15888 <shell_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   17286:	f000 f9ad 	bl	175e4 <split_app_init>
    /* 500.5: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   1728a:	f7ff f9a5 	bl	165d8 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: panmaster_pkg_init (lib/panmaster) */
    panmaster_pkg_init();
   1728e:	f7f5 fb67 	bl	c960 <panmaster_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
   17292:	f009 feed 	bl	21070 <uwb_rng_pkg_init2>
}
   17296:	bd08      	pop	{r3, pc}

00017298 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   17298:	2801      	cmp	r0, #1
   1729a:	d100      	bne.n	1729e <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   1729c:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   1729e:	2002      	movs	r0, #2
   172a0:	e7fc      	b.n	1729c <boot_flag_decode+0x4>

000172a2 <boot_magic_off>:
}

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   172a2:	6880      	ldr	r0, [r0, #8]
}
   172a4:	3810      	subs	r0, #16
   172a6:	4770      	bx	lr

000172a8 <boot_copy_done_off>:
}

static uint32_t
boot_copy_done_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   172a8:	6880      	ldr	r0, [r0, #8]
}
   172aa:	3820      	subs	r0, #32
   172ac:	4770      	bx	lr

000172ae <boot_image_ok_off>:

static uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   172ae:	6880      	ldr	r0, [r0, #8]
}
   172b0:	3818      	subs	r0, #24
   172b2:	4770      	bx	lr

000172b4 <boot_magic_decode>:
{
   172b4:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   172b6:	2210      	movs	r2, #16
   172b8:	4903      	ldr	r1, [pc, #12]	; (172c8 <boot_magic_decode+0x14>)
   172ba:	f7f9 f9bd 	bl	10638 <memcmp>
   172be:	b108      	cbz	r0, 172c4 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   172c0:	2002      	movs	r0, #2
}
   172c2:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   172c4:	2001      	movs	r0, #1
   172c6:	e7fc      	b.n	172c2 <boot_magic_decode+0xe>
   172c8:	00026d2c 	.word	0x00026d2c

000172cc <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   172cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   172ce:	b083      	sub	sp, #12
   172d0:	4605      	mov	r5, r0
   172d2:	460e      	mov	r6, r1
   172d4:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   172d6:	f7fc ff39 	bl	1414c <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   172da:	2808      	cmp	r0, #8
   172dc:	d813      	bhi.n	17306 <boot_write_trailer_byte+0x3a>
   172de:	4604      	mov	r4, r0
    erased_val = flash_area_erased_val(fap);
   172e0:	4628      	mov	r0, r5
   172e2:	f7fc ff38 	bl	14156 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   172e6:	2208      	movs	r2, #8
   172e8:	b2c1      	uxtb	r1, r0
   172ea:	4668      	mov	r0, sp
   172ec:	f7f9 f9d5 	bl	1069a <memset>
    buf[0] = val;
   172f0:	f88d 7000 	strb.w	r7, [sp]

    rc = flash_area_write(fap, off, buf, align);
   172f4:	4623      	mov	r3, r4
   172f6:	466a      	mov	r2, sp
   172f8:	4631      	mov	r1, r6
   172fa:	4628      	mov	r0, r5
   172fc:	f7fc fefe 	bl	140fc <flash_area_write>
    if (rc != 0) {
   17300:	b938      	cbnz	r0, 17312 <boot_write_trailer_byte+0x46>
        return BOOT_EFLASH;
    }

    return 0;
}
   17302:	b003      	add	sp, #12
   17304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(align <= BOOT_MAX_ALIGN);
   17306:	2300      	movs	r3, #0
   17308:	461a      	mov	r2, r3
   1730a:	4619      	mov	r1, r3
   1730c:	4618      	mov	r0, r3
   1730e:	f7f1 ff59 	bl	91c4 <__assert_func>
        return BOOT_EFLASH;
   17312:	2001      	movs	r0, #1
   17314:	e7f5      	b.n	17302 <boot_write_trailer_byte+0x36>

00017316 <boot_magic_compatible_check>:
    switch (tbl_val) {
   17316:	2804      	cmp	r0, #4
   17318:	d00a      	beq.n	17330 <boot_magic_compatible_check+0x1a>
   1731a:	2805      	cmp	r0, #5
   1731c:	d103      	bne.n	17326 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   1731e:	1e48      	subs	r0, r1, #1
   17320:	bf18      	it	ne
   17322:	2001      	movne	r0, #1
   17324:	4770      	bx	lr
        return tbl_val == val;
   17326:	4288      	cmp	r0, r1
   17328:	bf14      	ite	ne
   1732a:	2000      	movne	r0, #0
   1732c:	2001      	moveq	r0, #1
   1732e:	4770      	bx	lr
    switch (tbl_val) {
   17330:	2001      	movs	r0, #1
}
   17332:	4770      	bx	lr

00017334 <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   17334:	6880      	ldr	r0, [r0, #8]
}
   17336:	3828      	subs	r0, #40	; 0x28
   17338:	4770      	bx	lr

0001733a <boot_read_swap_state>:
{
   1733a:	b530      	push	{r4, r5, lr}
   1733c:	b085      	sub	sp, #20
   1733e:	4604      	mov	r4, r0
   17340:	460d      	mov	r5, r1
    off = boot_magic_off(fap);
   17342:	f7ff ffae 	bl	172a2 <boot_magic_off>
   17346:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   17348:	2310      	movs	r3, #16
   1734a:	466a      	mov	r2, sp
   1734c:	4620      	mov	r0, r4
   1734e:	f7fc ff1a 	bl	14186 <flash_area_read_is_empty>
    if (rc < 0) {
   17352:	2800      	cmp	r0, #0
   17354:	db45      	blt.n	173e2 <boot_read_swap_state+0xa8>
    if (rc == 1) {
   17356:	2801      	cmp	r0, #1
   17358:	d039      	beq.n	173ce <boot_read_swap_state+0x94>
        state->magic = boot_magic_decode(magic);
   1735a:	4668      	mov	r0, sp
   1735c:	f7ff ffaa 	bl	172b4 <boot_magic_decode>
   17360:	7028      	strb	r0, [r5, #0]
    off = boot_swap_type_off(fap);
   17362:	4620      	mov	r0, r4
   17364:	f7ff ffe6 	bl	17334 <boot_swap_type_off>
   17368:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   1736a:	2301      	movs	r3, #1
   1736c:	18ea      	adds	r2, r5, r3
   1736e:	4620      	mov	r0, r4
   17370:	f7fc ff09 	bl	14186 <flash_area_read_is_empty>
    if (rc < 0) {
   17374:	2800      	cmp	r0, #0
   17376:	db37      	blt.n	173e8 <boot_read_swap_state+0xae>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   17378:	2801      	cmp	r0, #1
   1737a:	d002      	beq.n	17382 <boot_read_swap_state+0x48>
   1737c:	786b      	ldrb	r3, [r5, #1]
   1737e:	2b04      	cmp	r3, #4
   17380:	d901      	bls.n	17386 <boot_read_swap_state+0x4c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   17382:	2301      	movs	r3, #1
   17384:	706b      	strb	r3, [r5, #1]
    off = boot_copy_done_off(fap);
   17386:	4620      	mov	r0, r4
   17388:	f7ff ff8e 	bl	172a8 <boot_copy_done_off>
   1738c:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   1738e:	2301      	movs	r3, #1
   17390:	1caa      	adds	r2, r5, #2
   17392:	4620      	mov	r0, r4
   17394:	f7fc fef7 	bl	14186 <flash_area_read_is_empty>
    if (rc < 0) {
   17398:	2800      	cmp	r0, #0
   1739a:	db27      	blt.n	173ec <boot_read_swap_state+0xb2>
    if (rc == 1) {
   1739c:	2801      	cmp	r0, #1
   1739e:	d019      	beq.n	173d4 <boot_read_swap_state+0x9a>
        state->copy_done = boot_flag_decode(state->copy_done);
   173a0:	78a8      	ldrb	r0, [r5, #2]
   173a2:	f7ff ff79 	bl	17298 <boot_flag_decode>
   173a6:	70a8      	strb	r0, [r5, #2]
    off = boot_image_ok_off(fap);
   173a8:	4620      	mov	r0, r4
   173aa:	f7ff ff80 	bl	172ae <boot_image_ok_off>
   173ae:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   173b0:	2301      	movs	r3, #1
   173b2:	1cea      	adds	r2, r5, #3
   173b4:	4620      	mov	r0, r4
   173b6:	f7fc fee6 	bl	14186 <flash_area_read_is_empty>
    if (rc < 0) {
   173ba:	2800      	cmp	r0, #0
   173bc:	db18      	blt.n	173f0 <boot_read_swap_state+0xb6>
    if (rc == 1) {
   173be:	2801      	cmp	r0, #1
   173c0:	d00b      	beq.n	173da <boot_read_swap_state+0xa0>
        state->image_ok = boot_flag_decode(state->image_ok);
   173c2:	78e8      	ldrb	r0, [r5, #3]
   173c4:	f7ff ff68 	bl	17298 <boot_flag_decode>
   173c8:	70e8      	strb	r0, [r5, #3]
    return 0;
   173ca:	2000      	movs	r0, #0
   173cc:	e00a      	b.n	173e4 <boot_read_swap_state+0xaa>
        state->magic = BOOT_MAGIC_UNSET;
   173ce:	2303      	movs	r3, #3
   173d0:	702b      	strb	r3, [r5, #0]
   173d2:	e7c6      	b.n	17362 <boot_read_swap_state+0x28>
        state->copy_done = BOOT_FLAG_UNSET;
   173d4:	2303      	movs	r3, #3
   173d6:	70ab      	strb	r3, [r5, #2]
   173d8:	e7e6      	b.n	173a8 <boot_read_swap_state+0x6e>
        state->image_ok = BOOT_FLAG_UNSET;
   173da:	2303      	movs	r3, #3
   173dc:	70eb      	strb	r3, [r5, #3]
    return 0;
   173de:	2000      	movs	r0, #0
   173e0:	e000      	b.n	173e4 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   173e2:	2001      	movs	r0, #1
}
   173e4:	b005      	add	sp, #20
   173e6:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   173e8:	2001      	movs	r0, #1
   173ea:	e7fb      	b.n	173e4 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   173ec:	2001      	movs	r0, #1
   173ee:	e7f9      	b.n	173e4 <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   173f0:	2001      	movs	r0, #1
   173f2:	e7f7      	b.n	173e4 <boot_read_swap_state+0xaa>

000173f4 <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
   173f4:	1e43      	subs	r3, r0, #1
   173f6:	2b02      	cmp	r3, #2
   173f8:	d901      	bls.n	173fe <boot_read_swap_state_by_id+0xa>
        return BOOT_EBADARGS;
   173fa:	2007      	movs	r0, #7
}
   173fc:	4770      	bx	lr
{
   173fe:	b510      	push	{r4, lr}
   17400:	b082      	sub	sp, #8
   17402:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   17404:	a901      	add	r1, sp, #4
   17406:	b2c0      	uxtb	r0, r0
   17408:	f7fc fe04 	bl	14014 <flash_area_open>
        if (rc != 0) {
   1740c:	b110      	cbz	r0, 17414 <boot_read_swap_state_by_id+0x20>
            return BOOT_EFLASH;
   1740e:	2001      	movs	r0, #1
}
   17410:	b002      	add	sp, #8
   17412:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   17414:	4621      	mov	r1, r4
   17416:	9801      	ldr	r0, [sp, #4]
   17418:	f7ff ff8f 	bl	1733a <boot_read_swap_state>
    return rc;
   1741c:	e7f8      	b.n	17410 <boot_read_swap_state_by_id+0x1c>
	...

00017420 <boot_write_magic>:
{
   17420:	b510      	push	{r4, lr}
   17422:	4604      	mov	r4, r0
    off = boot_magic_off(fap);
   17424:	f7ff ff3d 	bl	172a2 <boot_magic_off>
   17428:	4601      	mov	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1742a:	2310      	movs	r3, #16
   1742c:	4a03      	ldr	r2, [pc, #12]	; (1743c <boot_write_magic+0x1c>)
   1742e:	4620      	mov	r0, r4
   17430:	f7fc fe64 	bl	140fc <flash_area_write>
    if (rc != 0) {
   17434:	b900      	cbnz	r0, 17438 <boot_write_magic+0x18>
}
   17436:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   17438:	2001      	movs	r0, #1
   1743a:	e7fc      	b.n	17436 <boot_write_magic+0x16>
   1743c:	00026d2c 	.word	0x00026d2c

00017440 <boot_write_image_ok>:
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   17440:	b510      	push	{r4, lr}
   17442:	4604      	mov	r4, r0
    uint32_t off;

    off = boot_image_ok_off(fap);
   17444:	f7ff ff33 	bl	172ae <boot_image_ok_off>
   17448:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   1744a:	2201      	movs	r2, #1
   1744c:	4620      	mov	r0, r4
   1744e:	f7ff ff3d 	bl	172cc <boot_write_trailer_byte>
}
   17452:	bd10      	pop	{r4, pc}

00017454 <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   17454:	b538      	push	{r3, r4, r5, lr}
   17456:	4604      	mov	r4, r0
   17458:	460d      	mov	r5, r1
    uint32_t off;

    off = boot_swap_type_off(fap);
   1745a:	f7ff ff6b 	bl	17334 <boot_swap_type_off>
   1745e:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   17460:	462a      	mov	r2, r5
   17462:	4620      	mov	r0, r4
   17464:	f7ff ff32 	bl	172cc <boot_write_trailer_byte>
}
   17468:	bd38      	pop	{r3, r4, r5, pc}
	...

0001746c <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   1746c:	b530      	push	{r4, r5, lr}
   1746e:	b083      	sub	sp, #12
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
   17470:	a901      	add	r1, sp, #4
   17472:	2001      	movs	r0, #1
   17474:	f7ff ffbe 	bl	173f4 <boot_read_swap_state_by_id>
    if (rc) {
   17478:	2800      	cmp	r0, #0
   1747a:	d142      	bne.n	17502 <boot_swap_type+0x96>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   1747c:	4669      	mov	r1, sp
   1747e:	2002      	movs	r0, #2
   17480:	f7ff ffb8 	bl	173f4 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   17484:	2800      	cmp	r0, #0
   17486:	d13e      	bne.n	17506 <boot_swap_type+0x9a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   17488:	2400      	movs	r4, #0
   1748a:	e007      	b.n	1749c <boot_swap_type+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1748c:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1748e:	2b04      	cmp	r3, #4
   17490:	d029      	beq.n	174e6 <boot_swap_type+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   17492:	f89d 2006 	ldrb.w	r2, [sp, #6]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   17496:	4293      	cmp	r3, r2
   17498:	d025      	beq.n	174e6 <boot_swap_type+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1749a:	3401      	adds	r4, #1
   1749c:	2c02      	cmp	r4, #2
   1749e:	d82d      	bhi.n	174fc <boot_swap_type+0x90>
        table = boot_swap_tables + i;
   174a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   174a4:	4a19      	ldr	r2, [pc, #100]	; (1750c <boot_swap_type+0xa0>)
   174a6:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   174aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   174ae:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   174b2:	f7ff ff30 	bl	17316 <boot_magic_compatible_check>
   174b6:	2800      	cmp	r0, #0
   174b8:	d0ef      	beq.n	1749a <boot_swap_type+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   174ba:	f89d 1000 	ldrb.w	r1, [sp]
   174be:	7868      	ldrb	r0, [r5, #1]
   174c0:	f7ff ff29 	bl	17316 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   174c4:	2800      	cmp	r0, #0
   174c6:	d0e8      	beq.n	1749a <boot_swap_type+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   174c8:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   174ca:	2b04      	cmp	r3, #4
   174cc:	d003      	beq.n	174d6 <boot_swap_type+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   174ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   174d2:	4293      	cmp	r3, r2
   174d4:	d1e1      	bne.n	1749a <boot_swap_type+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   174d6:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   174d8:	2b04      	cmp	r3, #4
   174da:	d0d7      	beq.n	1748c <boot_swap_type+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   174dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   174e0:	4293      	cmp	r3, r2
   174e2:	d1da      	bne.n	1749a <boot_swap_type+0x2e>
   174e4:	e7d2      	b.n	1748c <boot_swap_type+0x20>
            BOOT_LOG_INF("Swap type: %s",
   174e6:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   174e8:	1e83      	subs	r3, r0, #2
   174ea:	b2db      	uxtb	r3, r3
   174ec:	2b02      	cmp	r3, #2
   174ee:	d906      	bls.n	174fe <boot_swap_type+0x92>
   174f0:	2300      	movs	r3, #0
   174f2:	461a      	mov	r2, r3
   174f4:	4619      	mov	r1, r3
   174f6:	4618      	mov	r0, r3
   174f8:	f7f1 fe64 	bl	91c4 <__assert_func>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   174fc:	2001      	movs	r0, #1
}
   174fe:	b003      	add	sp, #12
   17500:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   17502:	20ff      	movs	r0, #255	; 0xff
   17504:	e7fb      	b.n	174fe <boot_swap_type+0x92>
        return BOOT_SWAP_TYPE_PANIC;
   17506:	20ff      	movs	r0, #255	; 0xff
   17508:	e7f9      	b.n	174fe <boot_swap_type+0x92>
   1750a:	bf00      	nop
   1750c:	00026d3c 	.word	0x00026d3c

00017510 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   17510:	b530      	push	{r4, r5, lr}
   17512:	b083      	sub	sp, #12
   17514:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   17516:	4669      	mov	r1, sp
   17518:	2002      	movs	r0, #2
   1751a:	f7ff ff6b 	bl	173f4 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   1751e:	4603      	mov	r3, r0
   17520:	bb78      	cbnz	r0, 17582 <boot_set_pending+0x72>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   17522:	f89d 5000 	ldrb.w	r5, [sp]
   17526:	2d02      	cmp	r5, #2
   17528:	d025      	beq.n	17576 <boot_set_pending+0x66>
   1752a:	2d03      	cmp	r5, #3
   1752c:	d007      	beq.n	1753e <boot_set_pending+0x2e>
   1752e:	2d01      	cmp	r5, #1
   17530:	d027      	beq.n	17582 <boot_set_pending+0x72>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   17532:	2300      	movs	r3, #0
   17534:	461a      	mov	r2, r3
   17536:	4619      	mov	r1, r3
   17538:	4618      	mov	r0, r3
   1753a:	f7f1 fe43 	bl	91c4 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1753e:	a901      	add	r1, sp, #4
   17540:	2002      	movs	r0, #2
   17542:	f7fc fd67 	bl	14014 <flash_area_open>
        if (rc != 0) {
   17546:	b148      	cbz	r0, 1755c <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
   17548:	2301      	movs	r3, #1
        if (rc == 0) {
   1754a:	b9d3      	cbnz	r3, 17582 <boot_set_pending+0x72>
            if (permanent) {
   1754c:	b904      	cbnz	r4, 17550 <boot_set_pending+0x40>
                swap_type = BOOT_SWAP_TYPE_TEST;
   1754e:	2502      	movs	r5, #2
            rc = boot_write_swap_type(fap, swap_type);
   17550:	4629      	mov	r1, r5
   17552:	9801      	ldr	r0, [sp, #4]
   17554:	f7ff ff7e 	bl	17454 <boot_write_swap_type>
   17558:	4603      	mov	r3, r0
   1755a:	e012      	b.n	17582 <boot_set_pending+0x72>
            rc = boot_write_magic(fap);
   1755c:	9801      	ldr	r0, [sp, #4]
   1755e:	f7ff ff5f 	bl	17420 <boot_write_magic>
        if (rc == 0 && permanent) {
   17562:	4603      	mov	r3, r0
   17564:	2800      	cmp	r0, #0
   17566:	d1f0      	bne.n	1754a <boot_set_pending+0x3a>
   17568:	2c00      	cmp	r4, #0
   1756a:	d0ee      	beq.n	1754a <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
   1756c:	9801      	ldr	r0, [sp, #4]
   1756e:	f7ff ff67 	bl	17440 <boot_write_image_ok>
   17572:	4603      	mov	r3, r0
   17574:	e7e9      	b.n	1754a <boot_set_pending+0x3a>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   17576:	a901      	add	r1, sp, #4
   17578:	2002      	movs	r0, #2
   1757a:	f7fc fd4b 	bl	14014 <flash_area_open>
        if (rc != 0) {
   1757e:	b118      	cbz	r0, 17588 <boot_set_pending+0x78>
            return BOOT_EFLASH;
   17580:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   17582:	4618      	mov	r0, r3
   17584:	b003      	add	sp, #12
   17586:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   17588:	9801      	ldr	r0, [sp, #4]
   1758a:	6882      	ldr	r2, [r0, #8]
   1758c:	2100      	movs	r1, #0
   1758e:	f7fc fdc9 	bl	14124 <flash_area_erase>
        return BOOT_EBADIMAGE;
   17592:	2303      	movs	r3, #3
   17594:	e7f5      	b.n	17582 <boot_set_pending+0x72>

00017596 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   17596:	b500      	push	{lr}
   17598:	b083      	sub	sp, #12
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
   1759a:	4669      	mov	r1, sp
   1759c:	2001      	movs	r0, #1
   1759e:	f7ff ff29 	bl	173f4 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   175a2:	b9b8      	cbnz	r0, 175d4 <boot_set_confirmed+0x3e>
        return rc;
    }

    switch (state_primary_slot.magic) {
   175a4:	f89d 3000 	ldrb.w	r3, [sp]
   175a8:	2b02      	cmp	r3, #2
   175aa:	d012      	beq.n	175d2 <boot_set_confirmed+0x3c>
   175ac:	2b03      	cmp	r3, #3
   175ae:	d011      	beq.n	175d4 <boot_set_confirmed+0x3e>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   175b0:	a901      	add	r1, sp, #4
   175b2:	2001      	movs	r0, #1
   175b4:	f7fc fd2e 	bl	14014 <flash_area_open>
    if (rc) {
   175b8:	b978      	cbnz	r0, 175da <boot_set_confirmed+0x44>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   175ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
   175be:	2b03      	cmp	r3, #3
   175c0:	d00d      	beq.n	175de <boot_set_confirmed+0x48>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   175c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   175c6:	2b03      	cmp	r3, #3
   175c8:	d104      	bne.n	175d4 <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   175ca:	9801      	ldr	r0, [sp, #4]
   175cc:	f7ff ff38 	bl	17440 <boot_write_image_ok>
   175d0:	e000      	b.n	175d4 <boot_set_confirmed+0x3e>
        return BOOT_EBADVECT;
   175d2:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   175d4:	b003      	add	sp, #12
   175d6:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   175da:	2001      	movs	r0, #1
   175dc:	e7fa      	b.n	175d4 <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   175de:	2004      	movs	r0, #4
   175e0:	e7f8      	b.n	175d4 <boot_set_confirmed+0x3e>
	...

000175e4 <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   175e4:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   175e6:	4b09      	ldr	r3, [pc, #36]	; (1760c <split_app_init+0x28>)
   175e8:	781b      	ldrb	r3, [r3, #0]
   175ea:	b11b      	cbz	r3, 175f4 <split_app_init+0x10>

    rc = split_conf_init();
   175ec:	f000 f89e 	bl	1772c <split_conf_init>
    assert(rc == 0);
   175f0:	b928      	cbnz	r0, 175fe <split_app_init+0x1a>
}
   175f2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   175f4:	461a      	mov	r2, r3
   175f6:	4619      	mov	r1, r3
   175f8:	4618      	mov	r0, r3
   175fa:	f7f1 fde3 	bl	91c4 <__assert_func>
    assert(rc == 0);
   175fe:	2300      	movs	r3, #0
   17600:	461a      	mov	r2, r3
   17602:	4619      	mov	r1, r3
   17604:	4618      	mov	r0, r3
   17606:	f7f1 fddd 	bl	91c4 <__assert_func>
   1760a:	bf00      	nop
   1760c:	20004bb0 	.word	0x20004bb0

00017610 <split_check_status>:

split_status_t
split_check_status(void)
{
   17610:	b500      	push	{lr}
   17612:	b083      	sub	sp, #12
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   17614:	aa01      	add	r2, sp, #4
   17616:	2101      	movs	r1, #1
   17618:	2000      	movs	r0, #0
   1761a:	f00b fbc5 	bl	22da8 <split_go>
    switch (rc) {
   1761e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17622:	d009      	beq.n	17638 <split_check_status+0x28>
   17624:	b150      	cbz	r0, 1763c <split_check_status+0x2c>
   17626:	f110 0f02 	cmn.w	r0, #2
   1762a:	d00b      	beq.n	17644 <split_check_status+0x34>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   1762c:	2300      	movs	r3, #0
   1762e:	461a      	mov	r2, r3
   17630:	4619      	mov	r1, r3
   17632:	4618      	mov	r0, r3
   17634:	f7f1 fdc6 	bl	91c4 <__assert_func>
        return SPLIT_STATUS_NOT_MATCHING;
   17638:	2001      	movs	r0, #1
   1763a:	e000      	b.n	1763e <split_check_status+0x2e>
        return SPLIT_STATUS_MATCHING;
   1763c:	2002      	movs	r0, #2
        return SPLIT_STATUS_INVALID;
    }
}
   1763e:	b003      	add	sp, #12
   17640:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (rc) {
   17644:	2000      	movs	r0, #0
   17646:	e7fa      	b.n	1763e <split_check_status+0x2e>

00017648 <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   17648:	4b01      	ldr	r3, [pc, #4]	; (17650 <split_mode_get+0x8>)
   1764a:	7818      	ldrb	r0, [r3, #0]
   1764c:	4770      	bx	lr
   1764e:	bf00      	nop
   17650:	20004bd5 	.word	0x20004bd5

00017654 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   17654:	4b01      	ldr	r3, [pc, #4]	; (1765c <split_app_active_get+0x8>)
   17656:	f993 0000 	ldrsb.w	r0, [r3]
   1765a:	4770      	bx	lr
   1765c:	20004bd4 	.word	0x20004bd4

00017660 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   17660:	2803      	cmp	r0, #3
   17662:	d803      	bhi.n	1766c <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   17664:	4b03      	ldr	r3, [pc, #12]	; (17674 <split_mode_set+0x14>)
   17666:	7018      	strb	r0, [r3, #0]
    return 0;
   17668:	2000      	movs	r0, #0
   1766a:	4770      	bx	lr
        return SYS_EINVAL;
   1766c:	f06f 0001 	mvn.w	r0, #1
}
   17670:	4770      	bx	lr
   17672:	bf00      	nop
   17674:	20004bd5 	.word	0x20004bd5

00017678 <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   17678:	2000      	movs	r0, #0
   1767a:	4770      	bx	lr

0001767c <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   1767c:	b510      	push	{r4, lr}
   1767e:	b082      	sub	sp, #8
   17680:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   17682:	f7ff ffe1 	bl	17648 <split_mode_get>
   17686:	f88d 0007 	strb.w	r0, [sp, #7]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   1768a:	2304      	movs	r3, #4
   1768c:	466a      	mov	r2, sp
   1768e:	f10d 0107 	add.w	r1, sp, #7
   17692:	2002      	movs	r0, #2
   17694:	f7fb fc60 	bl	12f58 <conf_str_from_value>
    func("split/status", buf);
   17698:	4669      	mov	r1, sp
   1769a:	4802      	ldr	r0, [pc, #8]	; (176a4 <split_conf_export+0x28>)
   1769c:	47a0      	blx	r4
    return 0;
}
   1769e:	2000      	movs	r0, #0
   176a0:	b002      	add	sp, #8
   176a2:	bd10      	pop	{r4, pc}
   176a4:	00026d50 	.word	0x00026d50

000176a8 <split_conf_get>:
    if (argc == 1) {
   176a8:	2801      	cmp	r0, #1
   176aa:	d119      	bne.n	176e0 <split_conf_get+0x38>
{
   176ac:	b530      	push	{r4, r5, lr}
   176ae:	b083      	sub	sp, #12
   176b0:	468c      	mov	ip, r1
   176b2:	4614      	mov	r4, r2
   176b4:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "status")) {
   176b6:	490b      	ldr	r1, [pc, #44]	; (176e4 <split_conf_get+0x3c>)
   176b8:	f8dc 0000 	ldr.w	r0, [ip]
   176bc:	f7f9 f818 	bl	106f0 <strcmp>
   176c0:	b110      	cbz	r0, 176c8 <split_conf_get+0x20>
    return NULL;
   176c2:	2000      	movs	r0, #0
}
   176c4:	b003      	add	sp, #12
   176c6:	bd30      	pop	{r4, r5, pc}
            split_mode = split_mode_get();
   176c8:	f7ff ffbe 	bl	17648 <split_mode_get>
   176cc:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   176d0:	462b      	mov	r3, r5
   176d2:	4622      	mov	r2, r4
   176d4:	f10d 0107 	add.w	r1, sp, #7
   176d8:	2002      	movs	r0, #2
   176da:	f7fb fc3d 	bl	12f58 <conf_str_from_value>
   176de:	e7f1      	b.n	176c4 <split_conf_get+0x1c>
    return NULL;
   176e0:	2000      	movs	r0, #0
}
   176e2:	4770      	bx	lr
   176e4:	00026d60 	.word	0x00026d60

000176e8 <split_conf_set>:
    if (argc == 1) {
   176e8:	2801      	cmp	r0, #1
   176ea:	d117      	bne.n	1771c <split_conf_set+0x34>
{
   176ec:	b510      	push	{r4, lr}
   176ee:	b082      	sub	sp, #8
   176f0:	460b      	mov	r3, r1
   176f2:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "status")) {
   176f4:	490c      	ldr	r1, [pc, #48]	; (17728 <split_conf_set+0x40>)
   176f6:	6818      	ldr	r0, [r3, #0]
   176f8:	f7f8 fffa 	bl	106f0 <strcmp>
   176fc:	b988      	cbnz	r0, 17722 <split_conf_set+0x3a>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   176fe:	2301      	movs	r3, #1
   17700:	f10d 0207 	add.w	r2, sp, #7
   17704:	2102      	movs	r1, #2
   17706:	4620      	mov	r0, r4
   17708:	f7fb fbc1 	bl	12e8e <conf_value_from_str>
            if (rc != 0) {
   1770c:	b108      	cbz	r0, 17712 <split_conf_set+0x2a>
}
   1770e:	b002      	add	sp, #8
   17710:	bd10      	pop	{r4, pc}
            rc = split_mode_set(split_mode);
   17712:	f89d 0007 	ldrb.w	r0, [sp, #7]
   17716:	f7ff ffa3 	bl	17660 <split_mode_set>
            if (rc != 0) {
   1771a:	e7f8      	b.n	1770e <split_conf_set+0x26>
    return -1;
   1771c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17720:	4770      	bx	lr
    return -1;
   17722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17726:	e7f2      	b.n	1770e <split_conf_set+0x26>
   17728:	00026d60 	.word	0x00026d60

0001772c <split_conf_init>:
{
   1772c:	b508      	push	{r3, lr}
    rc = conf_register(&split_conf_handler);
   1772e:	4802      	ldr	r0, [pc, #8]	; (17738 <split_conf_init+0xc>)
   17730:	f7fb fb68 	bl	12e04 <conf_register>
}
   17734:	bd08      	pop	{r3, pc}
   17736:	bf00      	nop
   17738:	20000878 	.word	0x20000878

0001773c <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   1773c:	b500      	push	{lr}
   1773e:	b085      	sub	sp, #20
   17740:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   17744:	b2c0      	uxtb	r0, r0
   17746:	f7ff ff8b 	bl	17660 <split_mode_set>
    if (rc != 0) {
   1774a:	b110      	cbz	r0, 17752 <split_write_split+0x16>

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
        return -1;
    }
    return conf_save_one("split/status", str);
}
   1774c:	b005      	add	sp, #20
   1774e:	f85d fb04 	ldr.w	pc, [sp], #4
    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   17752:	2305      	movs	r3, #5
   17754:	aa02      	add	r2, sp, #8
   17756:	f10d 0107 	add.w	r1, sp, #7
   1775a:	2002      	movs	r0, #2
   1775c:	f7fb fbfc 	bl	12f58 <conf_str_from_value>
   17760:	b120      	cbz	r0, 1776c <split_write_split+0x30>
    return conf_save_one("split/status", str);
   17762:	a902      	add	r1, sp, #8
   17764:	4803      	ldr	r0, [pc, #12]	; (17774 <split_write_split+0x38>)
   17766:	f7fb fda7 	bl	132b8 <conf_save_one>
   1776a:	e7ef      	b.n	1774c <split_write_split+0x10>
        return -1;
   1776c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17770:	e7ec      	b.n	1774c <split_write_split+0x10>
   17772:	bf00      	nop
   17774:	00026d50 	.word	0x00026d50

00017778 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   17778:	4b06      	ldr	r3, [pc, #24]	; (17794 <pos+0x1c>)
   1777a:	e000      	b.n	1777e <pos+0x6>
   1777c:	3301      	adds	r3, #1
   1777e:	781a      	ldrb	r2, [r3, #0]
   17780:	b122      	cbz	r2, 1778c <pos+0x14>
        if (*p == c)
   17782:	4282      	cmp	r2, r0
   17784:	d1fa      	bne.n	1777c <pos+0x4>
            return p - base64_chars;
   17786:	4803      	ldr	r0, [pc, #12]	; (17794 <pos+0x1c>)
   17788:	1a18      	subs	r0, r3, r0
   1778a:	4770      	bx	lr
    return -1;
   1778c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17790:	4770      	bx	lr
   17792:	bf00      	nop
   17794:	00026d70 	.word	0x00026d70

00017798 <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   17798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1779a:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   1779c:	f7f8 ffb4 	bl	10708 <strlen>
   177a0:	2803      	cmp	r0, #3
   177a2:	d916      	bls.n	177d2 <token_decode+0x3a>
    int marker = 0;
   177a4:	2600      	movs	r6, #0
    unsigned int val = 0;
   177a6:	4635      	mov	r5, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   177a8:	4634      	mov	r4, r6
   177aa:	e001      	b.n	177b0 <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   177ac:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   177ae:	3401      	adds	r4, #1
   177b0:	2c03      	cmp	r4, #3
   177b2:	dc09      	bgt.n	177c8 <token_decode+0x30>
        val *= 64;
   177b4:	01ad      	lsls	r5, r5, #6
        if (token[i] == '=')
   177b6:	5d38      	ldrb	r0, [r7, r4]
   177b8:	283d      	cmp	r0, #61	; 0x3d
   177ba:	d0f7      	beq.n	177ac <token_decode+0x14>
        else if (marker > 0)
   177bc:	2e00      	cmp	r6, #0
   177be:	dc0b      	bgt.n	177d8 <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   177c0:	f7ff ffda 	bl	17778 <pos>
   177c4:	4405      	add	r5, r0
   177c6:	e7f2      	b.n	177ae <token_decode+0x16>
    }
    if (marker > 2)
   177c8:	2e02      	cmp	r6, #2
   177ca:	dc08      	bgt.n	177de <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   177cc:	ea45 6006 	orr.w	r0, r5, r6, lsl #24
}
   177d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   177d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177d6:	e7fb      	b.n	177d0 <token_decode+0x38>
            return DECODE_ERROR;
   177d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177dc:	e7f8      	b.n	177d0 <token_decode+0x38>
        return DECODE_ERROR;
   177de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177e2:	e7f5      	b.n	177d0 <token_decode+0x38>

000177e4 <base64_encode>:
{
   177e4:	b570      	push	{r4, r5, r6, lr}
   177e6:	4615      	mov	r5, r2
    p = s;
   177e8:	4614      	mov	r4, r2
    last = NULL;
   177ea:	2600      	movs	r6, #0
    i = 0;
   177ec:	4632      	mov	r2, r6
    while (i < size) {
   177ee:	e021      	b.n	17834 <base64_encode+0x50>
        i++;
   177f0:	1c96      	adds	r6, r2, #2
        c *= 256;
   177f2:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   177f6:	42b1      	cmp	r1, r6
   177f8:	dd01      	ble.n	177fe <base64_encode+0x1a>
            c += q[i];
   177fa:	5d86      	ldrb	r6, [r0, r6]
   177fc:	44b4      	add	ip, r6
        i++;
   177fe:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   17800:	f3cc 4e85 	ubfx	lr, ip, #18, #6
   17804:	4e1b      	ldr	r6, [pc, #108]	; (17874 <base64_encode+0x90>)
   17806:	f816 e00e 	ldrb.w	lr, [r6, lr]
   1780a:	f884 e000 	strb.w	lr, [r4]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   1780e:	f3cc 3e05 	ubfx	lr, ip, #12, #6
   17812:	f816 e00e 	ldrb.w	lr, [r6, lr]
   17816:	f884 e001 	strb.w	lr, [r4, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   1781a:	f3cc 1e85 	ubfx	lr, ip, #6, #6
   1781e:	f816 e00e 	ldrb.w	lr, [r6, lr]
   17822:	f884 e002 	strb.w	lr, [r4, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   17826:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   1782a:	f816 600c 	ldrb.w	r6, [r6, ip]
   1782e:	70e6      	strb	r6, [r4, #3]
        last = p;
   17830:	4626      	mov	r6, r4
        p += 4;
   17832:	3404      	adds	r4, #4
    while (i < size) {
   17834:	428a      	cmp	r2, r1
   17836:	da09      	bge.n	1784c <base64_encode+0x68>
        c = q[i++];
   17838:	1c56      	adds	r6, r2, #1
   1783a:	f810 c002 	ldrb.w	ip, [r0, r2]
        c *= 256;
   1783e:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   17842:	42b1      	cmp	r1, r6
   17844:	ddd4      	ble.n	177f0 <base64_encode+0xc>
            c += q[i];
   17846:	5d86      	ldrb	r6, [r0, r6]
   17848:	44b4      	add	ip, r6
   1784a:	e7d1      	b.n	177f0 <base64_encode+0xc>
    if (last) {
   1784c:	b136      	cbz	r6, 1785c <base64_encode+0x78>
        diff = i - size;
   1784e:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   17850:	2a00      	cmp	r2, #0
   17852:	dd03      	ble.n	1785c <base64_encode+0x78>
            if (should_pad) {
   17854:	b933      	cbnz	r3, 17864 <base64_encode+0x80>
                p = last + (4 - diff);
   17856:	f1c2 0304 	rsb	r3, r2, #4
   1785a:	18f4      	adds	r4, r6, r3
    *p = 0;
   1785c:	2300      	movs	r3, #0
   1785e:	7023      	strb	r3, [r4, #0]
}
   17860:	1b60      	subs	r0, r4, r5
   17862:	bd70      	pop	{r4, r5, r6, pc}
                memset(last + (4 - diff), '=', diff);
   17864:	f1c2 0004 	rsb	r0, r2, #4
   17868:	213d      	movs	r1, #61	; 0x3d
   1786a:	4430      	add	r0, r6
   1786c:	f7f8 ff15 	bl	1069a <memset>
   17870:	e7f4      	b.n	1785c <base64_encode+0x78>
   17872:	bf00      	nop
   17874:	00026d70 	.word	0x00026d70

00017878 <base64_pad>:
{
   17878:	b510      	push	{r4, lr}
    remainder = len % 4;
   1787a:	424b      	negs	r3, r1
   1787c:	f001 0203 	and.w	r2, r1, #3
   17880:	f003 0303 	and.w	r3, r3, #3
   17884:	bf58      	it	pl
   17886:	425a      	negpl	r2, r3
    if (remainder == 0) {
   17888:	f011 0f03 	tst.w	r1, #3
   1788c:	d102      	bne.n	17894 <base64_pad+0x1c>
        return (0);
   1788e:	2400      	movs	r4, #0
}
   17890:	4620      	mov	r0, r4
   17892:	bd10      	pop	{r4, pc}
    memset(buf, '=', 4 - remainder);
   17894:	f1c2 0404 	rsb	r4, r2, #4
   17898:	4622      	mov	r2, r4
   1789a:	213d      	movs	r1, #61	; 0x3d
   1789c:	f7f8 fefd 	bl	1069a <memset>
    return (4 - remainder);
   178a0:	e7f6      	b.n	17890 <base64_pad+0x18>
	...

000178a4 <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   178a4:	b570      	push	{r4, r5, r6, lr}
   178a6:	4604      	mov	r4, r0
   178a8:	460d      	mov	r5, r1
    const char *p;
    unsigned char *q;

    q = data;
   178aa:	460e      	mov	r6, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   178ac:	e005      	b.n	178ba <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   178ae:	0a02      	lsrs	r2, r0, #8
   178b0:	1cb3      	adds	r3, r6, #2
   178b2:	7072      	strb	r2, [r6, #1]
   178b4:	e016      	b.n	178e4 <base64_decode+0x40>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   178b6:	3404      	adds	r4, #4
   178b8:	461e      	mov	r6, r3
   178ba:	7821      	ldrb	r1, [r4, #0]
   178bc:	b1b9      	cbz	r1, 178ee <base64_decode+0x4a>
   178be:	293d      	cmp	r1, #61	; 0x3d
   178c0:	d003      	beq.n	178ca <base64_decode+0x26>
   178c2:	480d      	ldr	r0, [pc, #52]	; (178f8 <base64_decode+0x54>)
   178c4:	f009 fdeb 	bl	2149e <strchr>
   178c8:	b188      	cbz	r0, 178ee <base64_decode+0x4a>
        unsigned int val = token_decode(p);
   178ca:	4620      	mov	r0, r4
   178cc:	f7ff ff64 	bl	17798 <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   178d0:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   178d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   178d6:	d00c      	beq.n	178f2 <base64_decode+0x4e>
        *q++ = (val >> 16) & 0xff;
   178d8:	0c02      	lsrs	r2, r0, #16
   178da:	4633      	mov	r3, r6
   178dc:	f803 2b01 	strb.w	r2, [r3], #1
        if (marker < 2)
   178e0:	2901      	cmp	r1, #1
   178e2:	d9e4      	bls.n	178ae <base64_decode+0xa>
        if (marker < 1)
   178e4:	2900      	cmp	r1, #0
   178e6:	d1e6      	bne.n	178b6 <base64_decode+0x12>
            *q++ = val & 0xff;
   178e8:	f803 0b01 	strb.w	r0, [r3], #1
   178ec:	e7e3      	b.n	178b6 <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   178ee:	1b70      	subs	r0, r6, r5
}
   178f0:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   178f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178f6:	e7fb      	b.n	178f0 <base64_decode+0x4c>
   178f8:	00026d70 	.word	0x00026d70

000178fc <hex_format>:
{
    int i;
    uint8_t *src = (uint8_t *)src_v;
    char *tgt = dst;

    if (dst_len <= src_len * 2) {
   178fc:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
   17900:	dd1f      	ble.n	17942 <hex_format+0x46>
    char *tgt = dst;
   17902:	4694      	mov	ip, r2
        return NULL;
    }
    for (i = 0; i < src_len; i++) {
   17904:	2300      	movs	r3, #0
   17906:	428b      	cmp	r3, r1
   17908:	da1d      	bge.n	17946 <hex_format+0x4a>
{
   1790a:	b510      	push	{r4, lr}
        tgt[0] = hex_bytes[(src[i] >> 4) & 0xf];
   1790c:	f810 e003 	ldrb.w	lr, [r0, r3]
   17910:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
   17914:	4c0e      	ldr	r4, [pc, #56]	; (17950 <hex_format+0x54>)
   17916:	f814 e00e 	ldrb.w	lr, [r4, lr]
   1791a:	f88c e000 	strb.w	lr, [ip]
        tgt[1] = hex_bytes[src[i] & 0xf];
   1791e:	f810 e003 	ldrb.w	lr, [r0, r3]
   17922:	f00e 0e0f 	and.w	lr, lr, #15
   17926:	f814 400e 	ldrb.w	r4, [r4, lr]
   1792a:	f88c 4001 	strb.w	r4, [ip, #1]
        tgt += 2;
   1792e:	f10c 0c02 	add.w	ip, ip, #2
    for (i = 0; i < src_len; i++) {
   17932:	3301      	adds	r3, #1
   17934:	428b      	cmp	r3, r1
   17936:	dbe9      	blt.n	1790c <hex_format+0x10>
        dst_len -= 2;
    }
    *tgt = '\0';
   17938:	2300      	movs	r3, #0
   1793a:	f88c 3000 	strb.w	r3, [ip]
    return dst;
   1793e:	4610      	mov	r0, r2
}
   17940:	bd10      	pop	{r4, pc}
        return NULL;
   17942:	2000      	movs	r0, #0
   17944:	4770      	bx	lr
    *tgt = '\0';
   17946:	2300      	movs	r3, #0
   17948:	7013      	strb	r3, [r2, #0]
    return dst;
   1794a:	4610      	mov	r0, r2
}
   1794c:	4770      	bx	lr
   1794e:	bf00      	nop
   17950:	00026db4 	.word	0x00026db4

00017954 <hex_parse>:
{
    int i;
    uint8_t *dst = (uint8_t *)dst_v;
    char c;

    if (src_len & 0x1) {
   17954:	f011 0c01 	ands.w	ip, r1, #1
   17958:	d136      	bne.n	179c8 <hex_parse+0x74>
        return -1;
    }
    if (dst_len * 2 < src_len) {
   1795a:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   1795e:	dc36      	bgt.n	179ce <hex_parse+0x7a>
        return -1;
    }
    for (i = 0; i < src_len; i++, src++) {
   17960:	458c      	cmp	ip, r1
   17962:	da3a      	bge.n	179da <hex_parse+0x86>
{
   17964:	b500      	push	{lr}
   17966:	e01a      	b.n	1799e <hex_parse+0x4a>
        c = *src;
        if (isdigit((int) c)) {
            c -= '0';
        } else if (c >= 'a' && c <= 'f') {
   17968:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   1796c:	fa5f fe8e 	uxtb.w	lr, lr
   17970:	f1be 0f05 	cmp.w	lr, #5
   17974:	d802      	bhi.n	1797c <hex_parse+0x28>
            c -= ('a' - 10);
   17976:	3b57      	subs	r3, #87	; 0x57
   17978:	b2db      	uxtb	r3, r3
   1797a:	e018      	b.n	179ae <hex_parse+0x5a>
        } else if (c >= 'A' && c <= 'F') {
   1797c:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
   17980:	fa5f fe8e 	uxtb.w	lr, lr
   17984:	f1be 0f05 	cmp.w	lr, #5
   17988:	d824      	bhi.n	179d4 <hex_parse+0x80>
            c -= ('A' - 10);
   1798a:	3b37      	subs	r3, #55	; 0x37
   1798c:	b2db      	uxtb	r3, r3
   1798e:	e00e      	b.n	179ae <hex_parse+0x5a>
        if (i & 1) {
            *dst |= c;
            dst++;
            dst_len--;
        } else {
            *dst = c << 4;
   17990:	011b      	lsls	r3, r3, #4
   17992:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < src_len; i++, src++) {
   17994:	f10c 0c01 	add.w	ip, ip, #1
   17998:	3001      	adds	r0, #1
   1799a:	458c      	cmp	ip, r1
   1799c:	da11      	bge.n	179c2 <hex_parse+0x6e>
        c = *src;
   1799e:	7803      	ldrb	r3, [r0, #0]
        if (isdigit((int) c)) {
   179a0:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   179a4:	f1be 0f09 	cmp.w	lr, #9
   179a8:	d8de      	bhi.n	17968 <hex_parse+0x14>
            c -= '0';
   179aa:	fa5f f38e 	uxtb.w	r3, lr
        if (i & 1) {
   179ae:	f01c 0f01 	tst.w	ip, #1
   179b2:	d0ed      	beq.n	17990 <hex_parse+0x3c>
            *dst |= c;
   179b4:	f892 e000 	ldrb.w	lr, [r2]
   179b8:	ea43 030e 	orr.w	r3, r3, lr
   179bc:	f802 3b01 	strb.w	r3, [r2], #1
            dst_len--;
   179c0:	e7e8      	b.n	17994 <hex_parse+0x40>
        }
    }
    return src_len >> 1;
   179c2:	1048      	asrs	r0, r1, #1
}
   179c4:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   179c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179cc:	4770      	bx	lr
        return -1;
   179ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179d2:	4770      	bx	lr
            return -1;
   179d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179d8:	e7f4      	b.n	179c4 <hex_parse+0x70>
    return src_len >> 1;
   179da:	1048      	asrs	r0, r1, #1
}
   179dc:	4770      	bx	lr

000179de <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   179de:	3901      	subs	r1, #1
   179e0:	290a      	cmp	r1, #10
   179e2:	d828      	bhi.n	17a36 <valid_attr_type+0x58>
   179e4:	e8df f001 	tbb	[pc, r1]
   179e8:	0d090606 	.word	0x0d090606
   179ec:	1b171311 	.word	0x1b171311
   179f0:	271f      	.short	0x271f
   179f2:	23          	.byte	0x23
   179f3:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   179f4:	b308      	cbz	r0, 17a3a <valid_attr_type+0x5c>
        }
        break;
    default:
        break;
    }
    return 0;
   179f6:	2000      	movs	r0, #0
   179f8:	4770      	bx	lr
        if (ct == CborByteStringType) {
   179fa:	2840      	cmp	r0, #64	; 0x40
   179fc:	d01f      	beq.n	17a3e <valid_attr_type+0x60>
    return 0;
   179fe:	2000      	movs	r0, #0
   17a00:	4770      	bx	lr
        if (ct == CborTextStringType) {
   17a02:	2860      	cmp	r0, #96	; 0x60
   17a04:	d01d      	beq.n	17a42 <valid_attr_type+0x64>
    return 0;
   17a06:	2000      	movs	r0, #0
   17a08:	4770      	bx	lr
        if (ct == CborBooleanType) {
   17a0a:	28f5      	cmp	r0, #245	; 0xf5
   17a0c:	d01b      	beq.n	17a46 <valid_attr_type+0x68>
        if (ct == CborFloatType) {
   17a0e:	28fa      	cmp	r0, #250	; 0xfa
   17a10:	d01b      	beq.n	17a4a <valid_attr_type+0x6c>
    return 0;
   17a12:	2000      	movs	r0, #0
   17a14:	4770      	bx	lr
        if (ct == CborDoubleType) {
   17a16:	28fb      	cmp	r0, #251	; 0xfb
   17a18:	d019      	beq.n	17a4e <valid_attr_type+0x70>
    return 0;
   17a1a:	2000      	movs	r0, #0
   17a1c:	4770      	bx	lr
        if (ct == CborArrayType) {
   17a1e:	2880      	cmp	r0, #128	; 0x80
   17a20:	d017      	beq.n	17a52 <valid_attr_type+0x74>
    return 0;
   17a22:	2000      	movs	r0, #0
   17a24:	4770      	bx	lr
        if (ct == CborMapType) {
   17a26:	28a0      	cmp	r0, #160	; 0xa0
   17a28:	d015      	beq.n	17a56 <valid_attr_type+0x78>
    return 0;
   17a2a:	2000      	movs	r0, #0
   17a2c:	4770      	bx	lr
        if (ct == CborNullType) {
   17a2e:	28f6      	cmp	r0, #246	; 0xf6
   17a30:	d013      	beq.n	17a5a <valid_attr_type+0x7c>
    return 0;
   17a32:	2000      	movs	r0, #0
   17a34:	4770      	bx	lr
    switch (at) {
   17a36:	2000      	movs	r0, #0
   17a38:	4770      	bx	lr
            return 1;
   17a3a:	2001      	movs	r0, #1
   17a3c:	4770      	bx	lr
            return 1;
   17a3e:	2001      	movs	r0, #1
   17a40:	4770      	bx	lr
            return 1;
   17a42:	2001      	movs	r0, #1
   17a44:	4770      	bx	lr
            return 1;
   17a46:	2001      	movs	r0, #1
   17a48:	4770      	bx	lr
            return 1;
   17a4a:	2001      	movs	r0, #1
   17a4c:	4770      	bx	lr
            return 1;
   17a4e:	2001      	movs	r0, #1
   17a50:	4770      	bx	lr
            return 1;
   17a52:	2001      	movs	r0, #1
   17a54:	4770      	bx	lr
            return 1;
   17a56:	2001      	movs	r0, #1
   17a58:	4770      	bx	lr
            return 1;
   17a5a:	2001      	movs	r0, #1
}
   17a5c:	4770      	bx	lr

00017a5e <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   17a5e:	460b      	mov	r3, r1
   17a60:	b111      	cbz	r1, 17a68 <cbor_target_address+0xa>
   17a62:	7809      	ldrb	r1, [r1, #0]
   17a64:	290a      	cmp	r1, #10
   17a66:	d020      	beq.n	17aaa <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   17a68:	7903      	ldrb	r3, [r0, #4]
   17a6a:	3b01      	subs	r3, #1
   17a6c:	2b06      	cmp	r3, #6
   17a6e:	d823      	bhi.n	17ab8 <cbor_target_address+0x5a>
   17a70:	e8df f003 	tbb	[pc, r3]
   17a74:	16140804 	.word	0x16140804
   17a78:	0c18      	.short	0x0c18
   17a7a:	10          	.byte	0x10
   17a7b:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   17a7c:	6880      	ldr	r0, [r0, #8]
   17a7e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   17a82:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   17a84:	6880      	ldr	r0, [r0, #8]
   17a86:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   17a8a:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   17a8c:	6880      	ldr	r0, [r0, #8]
   17a8e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   17a92:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   17a94:	6880      	ldr	r0, [r0, #8]
   17a96:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   17a9a:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   17a9c:	6880      	ldr	r0, [r0, #8]
            break;
   17a9e:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   17aa0:	6880      	ldr	r0, [r0, #8]
            break;
   17aa2:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   17aa4:	6880      	ldr	r0, [r0, #8]
   17aa6:	4410      	add	r0, r2
            break;
   17aa8:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   17aaa:	6899      	ldr	r1, [r3, #8]
   17aac:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   17aae:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   17ab0:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   17ab4:	4408      	add	r0, r1
   17ab6:	4770      	bx	lr
        switch (cursor->type) {
   17ab8:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   17aba:	4770      	bx	lr

00017abc <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   17abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ac0:	b08b      	sub	sp, #44	; 0x2c
   17ac2:	9001      	str	r0, [sp, #4]
   17ac4:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   17ac6:	a906      	add	r1, sp, #24
   17ac8:	f000 ff59 	bl	1897e <cbor_value_enter_container>
    if (err) {
   17acc:	4605      	mov	r5, r0
   17ace:	2800      	cmp	r0, #0
   17ad0:	f040 80fd 	bne.w	17cce <cbor_read_array+0x212>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   17ad4:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   17ad8:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   17ada:	463e      	mov	r6, r7
   17adc:	e0be      	b.n	17c5c <cbor_read_array+0x1a0>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   17ade:	6862      	ldr	r2, [r4, #4]
CBOR_INLINE_API bool cbor_value_is_undefined(const CborValue *value)
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
   17ae0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
{
    assert(cbor_value_is_boolean(value));
   17ae4:	2bf5      	cmp	r3, #245	; 0xf5
   17ae6:	d106      	bne.n	17af6 <cbor_read_array+0x3a>
    *result = !!value->extra;
   17ae8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   17aec:	3b00      	subs	r3, #0
   17aee:	bf18      	it	ne
   17af0:	2301      	movne	r3, #1
   17af2:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   17af4:	e0a7      	b.n	17c46 <cbor_read_array+0x18a>
    assert(cbor_value_is_boolean(value));
   17af6:	2300      	movs	r3, #0
   17af8:	461a      	mov	r2, r3
   17afa:	4619      	mov	r1, r3
   17afc:	4618      	mov	r0, r3
   17afe:	f7f1 fb61 	bl	91c4 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   17b02:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17b06:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   17b0a:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
   17b0e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
   17b12:	b9c3      	cbnz	r3, 17b46 <cbor_read_array+0x8a>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17b14:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   17b18:	f013 0f01 	tst.w	r3, #1
   17b1c:	d119      	bne.n	17b52 <cbor_read_array+0x96>
   17b1e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   17b22:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   17b24:	f849 000b 	str.w	r0, [r9, fp]
   17b28:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   17b2c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17b30:	f013 0f02 	tst.w	r3, #2
   17b34:	f000 8087 	beq.w	17c46 <cbor_read_array+0x18a>
        *result = -*result - 1;
   17b38:	43c0      	mvns	r0, r0
   17b3a:	43c9      	mvns	r1, r1
   17b3c:	f849 000b 	str.w	r0, [r9, fp]
   17b40:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   17b44:	e07f      	b.n	17c46 <cbor_read_array+0x18a>
    assert(cbor_value_is_integer(value));
   17b46:	2300      	movs	r3, #0
   17b48:	461a      	mov	r2, r3
   17b4a:	4619      	mov	r1, r3
   17b4c:	4618      	mov	r0, r3
   17b4e:	f7f1 fb39 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17b52:	a806      	add	r0, sp, #24
   17b54:	f000 fec5 	bl	188e2 <_cbor_value_decode_int64_internal>
   17b58:	e7e4      	b.n	17b24 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   17b5a:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17b5e:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   17b62:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   17b66:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17b6a:	b933      	cbnz	r3, 17b7a <cbor_read_array+0xbe>
   17b6c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17b70:	f013 0f02 	tst.w	r3, #2
   17b74:	d010      	beq.n	17b98 <cbor_read_array+0xdc>
   17b76:	2300      	movs	r3, #0
   17b78:	e000      	b.n	17b7c <cbor_read_array+0xc0>
   17b7a:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   17b7c:	b173      	cbz	r3, 17b9c <cbor_read_array+0xe0>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17b7e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   17b82:	f013 0f01 	tst.w	r3, #1
   17b86:	d10e      	bne.n	17ba6 <cbor_read_array+0xea>
   17b88:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   17b8c:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   17b8e:	f849 000b 	str.w	r0, [r9, fp]
   17b92:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   17b96:	e056      	b.n	17c46 <cbor_read_array+0x18a>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17b98:	2301      	movs	r3, #1
   17b9a:	e7ef      	b.n	17b7c <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   17b9c:	461a      	mov	r2, r3
   17b9e:	4619      	mov	r1, r3
   17ba0:	4618      	mov	r0, r3
   17ba2:	f7f1 fb0f 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17ba6:	a806      	add	r0, sp, #24
   17ba8:	f000 fe9b 	bl	188e2 <_cbor_value_decode_int64_internal>
   17bac:	e7ef      	b.n	17b8e <cbor_read_array+0xd2>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   17bae:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17bb2:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   17bb6:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   17bba:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   17bbe:	2bfb      	cmp	r3, #251	; 0xfb
   17bc0:	d110      	bne.n	17be4 <cbor_read_array+0x128>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17bc2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17bc6:	f013 0f01 	tst.w	r3, #1
   17bca:	d011      	beq.n	17bf0 <cbor_read_array+0x134>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   17bcc:	a806      	add	r0, sp, #24
   17bce:	f000 fe88 	bl	188e2 <_cbor_value_decode_int64_internal>
   17bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   17bd6:	ab02      	add	r3, sp, #8
   17bd8:	cb03      	ldmia	r3!, {r0, r1}
   17bda:	f849 000b 	str.w	r0, [r9, fp]
   17bde:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   17be2:	e030      	b.n	17c46 <cbor_read_array+0x18a>
    assert(cbor_value_is_double(value));
   17be4:	2300      	movs	r3, #0
   17be6:	461a      	mov	r2, r3
   17be8:	4619      	mov	r1, r3
   17bea:	4618      	mov	r0, r3
   17bec:	f7f1 faea 	bl	91c4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17bf0:	2300      	movs	r3, #0
   17bf2:	461a      	mov	r2, r3
   17bf4:	4619      	mov	r1, r3
   17bf6:	4618      	mov	r0, r3
   17bf8:	f7f1 fae4 	bl	91c4 <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   17bfc:	68e3      	ldr	r3, [r4, #12]
   17bfe:	68a2      	ldr	r2, [r4, #8]
   17c00:	eba8 0202 	sub.w	r2, r8, r2
   17c04:	1a9b      	subs	r3, r3, r2
   17c06:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   17c08:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   17c0c:	2b60      	cmp	r3, #96	; 0x60
   17c0e:	d10d      	bne.n	17c2c <cbor_read_array+0x170>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   17c10:	2300      	movs	r3, #0
   17c12:	aa05      	add	r2, sp, #20
   17c14:	4641      	mov	r1, r8
   17c16:	a806      	add	r0, sp, #24
   17c18:	f000 ff66 	bl	18ae8 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   17c1c:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   17c1e:	6863      	ldr	r3, [r4, #4]
   17c20:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   17c24:	9b05      	ldr	r3, [sp, #20]
   17c26:	3301      	adds	r3, #1
   17c28:	4498      	add	r8, r3
            break;
   17c2a:	e00c      	b.n	17c46 <cbor_read_array+0x18a>
    assert(cbor_value_is_text_string(value));
   17c2c:	2300      	movs	r3, #0
   17c2e:	461a      	mov	r2, r3
   17c30:	4619      	mov	r1, r3
   17c32:	4618      	mov	r0, r3
   17c34:	f7f1 fac6 	bl	91c4 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   17c38:	4633      	mov	r3, r6
   17c3a:	4622      	mov	r2, r4
   17c3c:	6861      	ldr	r1, [r4, #4]
   17c3e:	a806      	add	r0, sp, #24
   17c40:	f000 f848 	bl	17cd4 <cbor_internal_read_object>
   17c44:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   17c46:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   17c48:	7823      	ldrb	r3, [r4, #0]
   17c4a:	2b0a      	cmp	r3, #10
   17c4c:	d127      	bne.n	17c9e <cbor_read_array+0x1e2>
{ return value && value->type != CborInvalidType; }
   17c4e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   17c52:	2bff      	cmp	r3, #255	; 0xff
   17c54:	d028      	beq.n	17ca8 <cbor_read_array+0x1ec>
   17c56:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   17c58:	b343      	cbz	r3, 17cac <cbor_read_array+0x1f0>
    for (off = 0; off < arr->maxlen; off++) {
   17c5a:	3601      	adds	r6, #1
   17c5c:	6963      	ldr	r3, [r4, #20]
   17c5e:	42b3      	cmp	r3, r6
   17c60:	dd24      	ble.n	17cac <cbor_read_array+0x1f0>
        switch (arr->element_type) {
   17c62:	7823      	ldrb	r3, [r4, #0]
   17c64:	3b01      	subs	r3, #1
   17c66:	2b09      	cmp	r3, #9
   17c68:	d816      	bhi.n	17c98 <cbor_read_array+0x1dc>
   17c6a:	a201      	add	r2, pc, #4	; (adr r2, 17c70 <cbor_read_array+0x1b4>)
   17c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17c70:	00017b03 	.word	0x00017b03
   17c74:	00017b5b 	.word	0x00017b5b
   17c78:	00017c99 	.word	0x00017c99
   17c7c:	00017bfd 	.word	0x00017bfd
   17c80:	00017adf 	.word	0x00017adf
   17c84:	00017baf 	.word	0x00017baf
   17c88:	00017baf 	.word	0x00017baf
   17c8c:	00017c99 	.word	0x00017c99
   17c90:	00017c99 	.word	0x00017c99
   17c94:	00017c39 	.word	0x00017c39
            err |= CborErrorIllegalType;
   17c98:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   17c9c:	e7d3      	b.n	17c46 <cbor_read_array+0x18a>
            err |= cbor_value_advance(&elem);
   17c9e:	a806      	add	r0, sp, #24
   17ca0:	f000 ff7f 	bl	18ba2 <cbor_value_advance>
   17ca4:	4305      	orrs	r5, r0
   17ca6:	e7d2      	b.n	17c4e <cbor_read_array+0x192>
   17ca8:	2300      	movs	r3, #0
   17caa:	e7d5      	b.n	17c58 <cbor_read_array+0x19c>
            break;
        }
    }
    if (arr->count) {
   17cac:	6923      	ldr	r3, [r4, #16]
   17cae:	b133      	cbz	r3, 17cbe <cbor_read_array+0x202>
        *arr->count = arrcount;
   17cb0:	601f      	str	r7, [r3, #0]
   17cb2:	e004      	b.n	17cbe <cbor_read_array+0x202>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   17cb4:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   17cb8:	a806      	add	r0, sp, #24
   17cba:	f000 ff72 	bl	18ba2 <cbor_value_advance>
{ return it->remaining == 0; }
   17cbe:	9b08      	ldr	r3, [sp, #32]
    while (!cbor_value_at_end(&elem)) {
   17cc0:	2b00      	cmp	r3, #0
   17cc2:	d1f7      	bne.n	17cb4 <cbor_read_array+0x1f8>
    }
    err |= cbor_value_leave_container(value, &elem);
   17cc4:	a906      	add	r1, sp, #24
   17cc6:	9801      	ldr	r0, [sp, #4]
   17cc8:	f000 feee 	bl	18aa8 <cbor_value_leave_container>
   17ccc:	4328      	orrs	r0, r5
    return err;
}
   17cce:	b00b      	add	sp, #44	; 0x2c
   17cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017cd4 <cbor_internal_read_object>:
{
   17cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   17cdc:	9001      	str	r0, [sp, #4]
   17cde:	9100      	str	r1, [sp, #0]
   17ce0:	4691      	mov	r9, r2
   17ce2:	469a      	mov	sl, r3
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   17ce4:	460c      	mov	r4, r1
   17ce6:	e004      	b.n	17cf2 <cbor_internal_read_object+0x1e>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   17ce8:	6a21      	ldr	r1, [r4, #32]
   17cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17cec:	6001      	str	r1, [r0, #0]
   17cee:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   17cf0:	3430      	adds	r4, #48	; 0x30
   17cf2:	6827      	ldr	r7, [r4, #0]
   17cf4:	b38f      	cbz	r7, 17d5a <cbor_internal_read_object+0x86>
        if (!cursor->nodefault) {
   17cf6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   17cfa:	2b00      	cmp	r3, #0
   17cfc:	d1f8      	bne.n	17cf0 <cbor_internal_read_object+0x1c>
            lptr = cbor_target_address(cursor, parent, offset);
   17cfe:	4652      	mov	r2, sl
   17d00:	4649      	mov	r1, r9
   17d02:	4620      	mov	r0, r4
   17d04:	f7ff feab 	bl	17a5e <cbor_target_address>
            if (lptr != NULL) {
   17d08:	2800      	cmp	r0, #0
   17d0a:	d0f1      	beq.n	17cf0 <cbor_internal_read_object+0x1c>
                switch (cursor->type) {
   17d0c:	7923      	ldrb	r3, [r4, #4]
   17d0e:	3b01      	subs	r3, #1
   17d10:	2b06      	cmp	r3, #6
   17d12:	d8ed      	bhi.n	17cf0 <cbor_internal_read_object+0x1c>
   17d14:	a101      	add	r1, pc, #4	; (adr r1, 17d1c <cbor_internal_read_object+0x48>)
   17d16:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17d1a:	bf00      	nop
   17d1c:	00017ce9 	.word	0x00017ce9
   17d20:	00017d39 	.word	0x00017d39
   17d24:	00017cf1 	.word	0x00017cf1
   17d28:	00017cf1 	.word	0x00017cf1
   17d2c:	00017d43 	.word	0x00017d43
   17d30:	00017d4b 	.word	0x00017d4b
   17d34:	00017d51 	.word	0x00017d51
                    memcpy(lptr, &cursor->dflt.integer,
   17d38:	6a21      	ldr	r1, [r4, #32]
   17d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17d3c:	6001      	str	r1, [r0, #0]
   17d3e:	6043      	str	r3, [r0, #4]
                    break;
   17d40:	e7d6      	b.n	17cf0 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   17d42:	f894 3020 	ldrb.w	r3, [r4, #32]
   17d46:	7003      	strb	r3, [r0, #0]
                    break;
   17d48:	e7d2      	b.n	17cf0 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   17d4a:	6a23      	ldr	r3, [r4, #32]
   17d4c:	6003      	str	r3, [r0, #0]
                    break;
   17d4e:	e7cf      	b.n	17cf0 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   17d50:	6a21      	ldr	r1, [r4, #32]
   17d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17d54:	6001      	str	r1, [r0, #0]
   17d56:	6043      	str	r3, [r0, #4]
                    break;
   17d58:	e7ca      	b.n	17cf0 <cbor_internal_read_object+0x1c>
{ return value->type == CborMapType; }
   17d5a:	9801      	ldr	r0, [sp, #4]
   17d5c:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   17d5e:	2ba0      	cmp	r3, #160	; 0xa0
   17d60:	d005      	beq.n	17d6e <cbor_internal_read_object+0x9a>
        return err;
   17d62:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   17d66:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   17d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   17d6e:	a905      	add	r1, sp, #20
   17d70:	f000 fe05 	bl	1897e <cbor_value_enter_container>
   17d74:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   17d76:	e140      	b.n	17ffa <cbor_internal_read_object+0x326>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   17d78:	a904      	add	r1, sp, #16
   17d7a:	a805      	add	r0, sp, #20
   17d7c:	f000 ff23 	bl	18bc6 <cbor_value_calculate_string_length>
   17d80:	b978      	cbnz	r0, 17da2 <cbor_internal_read_object+0xce>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   17d82:	9b04      	ldr	r3, [sp, #16]
   17d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17d88:	d820      	bhi.n	17dcc <cbor_internal_read_object+0xf8>
{ return value->type == CborTextStringType; }
   17d8a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   17d8e:	2b60      	cmp	r3, #96	; 0x60
   17d90:	d11f      	bne.n	17dd2 <cbor_internal_read_object+0xfe>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   17d92:	2300      	movs	r3, #0
   17d94:	aa04      	add	r2, sp, #16
   17d96:	a909      	add	r1, sp, #36	; 0x24
   17d98:	a805      	add	r0, sp, #20
   17d9a:	f000 fea5 	bl	18ae8 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   17d9e:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   17da2:	a805      	add	r0, sp, #20
   17da4:	f000 fefd 	bl	18ba2 <cbor_value_advance>
   17da8:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   17dac:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   17db0:	2eff      	cmp	r6, #255	; 0xff
   17db2:	d014      	beq.n	17dde <cbor_internal_read_object+0x10a>
   17db4:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   17db6:	2b00      	cmp	r3, #0
   17db8:	f040 8131 	bne.w	1801e <cbor_internal_read_object+0x34a>
                err |= CborErrorIllegalType;
   17dbc:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   17dc0:	f1b8 0f00 	cmp.w	r8, #0
   17dc4:	f000 8130 	beq.w	18028 <cbor_internal_read_object+0x354>
    return err;
   17dc8:	4640      	mov	r0, r8
   17dca:	e7cc      	b.n	17d66 <cbor_internal_read_object+0x92>
                    err |= CborErrorDataTooLarge;
   17dcc:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   17dd0:	e7f6      	b.n	17dc0 <cbor_internal_read_object+0xec>
    assert(cbor_value_is_text_string(value));
   17dd2:	2300      	movs	r3, #0
   17dd4:	461a      	mov	r2, r3
   17dd6:	4619      	mov	r1, r3
   17dd8:	4618      	mov	r0, r3
   17dda:	f7f1 f9f3 	bl	91c4 <__assert_func>
{ return value && value->type != CborInvalidType; }
   17dde:	2300      	movs	r3, #0
   17de0:	e7e9      	b.n	17db6 <cbor_internal_read_object+0xe2>
                    attrbuf[0] == '\0') {
   17de2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   17de6:	b963      	cbnz	r3, 17e02 <cbor_internal_read_object+0x12e>
                    best_match = cursor;
   17de8:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   17dea:	3430      	adds	r4, #48	; 0x30
   17dec:	6825      	ldr	r5, [r4, #0]
   17dee:	b1a5      	cbz	r5, 17e1a <cbor_internal_read_object+0x146>
            if (valid_attr_type(type, cursor->type)) {
   17df0:	7921      	ldrb	r1, [r4, #4]
   17df2:	4630      	mov	r0, r6
   17df4:	f7ff fdf3 	bl	179de <valid_attr_type>
   17df8:	2800      	cmp	r0, #0
   17dfa:	d0f6      	beq.n	17dea <cbor_internal_read_object+0x116>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   17dfc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17e00:	d0ef      	beq.n	17de2 <cbor_internal_read_object+0x10e>
                } else if (strlen(cursor->attribute) == len &&
   17e02:	4628      	mov	r0, r5
   17e04:	f7f8 fc80 	bl	10708 <strlen>
   17e08:	9a04      	ldr	r2, [sp, #16]
   17e0a:	4290      	cmp	r0, r2
   17e0c:	d1ed      	bne.n	17dea <cbor_internal_read_object+0x116>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   17e0e:	a909      	add	r1, sp, #36	; 0x24
   17e10:	4628      	mov	r0, r5
   17e12:	f7f8 fc11 	bl	10638 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   17e16:	2800      	cmp	r0, #0
   17e18:	d1e7      	bne.n	17dea <cbor_internal_read_object+0x116>
        if (!cursor->attribute && best_match) {
   17e1a:	b1b5      	cbz	r5, 17e4a <cbor_internal_read_object+0x176>
        if (cursor->attribute != NULL) {
   17e1c:	6823      	ldr	r3, [r4, #0]
   17e1e:	2b00      	cmp	r3, #0
   17e20:	f000 80e8 	beq.w	17ff4 <cbor_internal_read_object+0x320>
            lptr = cbor_target_address(cursor, parent, offset);
   17e24:	4652      	mov	r2, sl
   17e26:	4649      	mov	r1, r9
   17e28:	4620      	mov	r0, r4
   17e2a:	f7ff fe18 	bl	17a5e <cbor_target_address>
   17e2e:	4605      	mov	r5, r0
            switch (cursor->type) {
   17e30:	7923      	ldrb	r3, [r4, #4]
   17e32:	3b01      	subs	r3, #1
   17e34:	2b0a      	cmp	r3, #10
   17e36:	f200 80db 	bhi.w	17ff0 <cbor_internal_read_object+0x31c>
   17e3a:	e8df f003 	tbb	[pc, r3]
   17e3e:	401c      	.short	0x401c
   17e40:	620bb39b 	.word	0x620bb39b
   17e44:	d9d0c87c 	.word	0xd9d0c87c
   17e48:	db          	.byte	0xdb
   17e49:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   17e4a:	f1bb 0f00 	cmp.w	fp, #0
   17e4e:	d0e5      	beq.n	17e1c <cbor_internal_read_object+0x148>
            cursor = best_match;
   17e50:	465c      	mov	r4, fp
   17e52:	e7e3      	b.n	17e1c <cbor_internal_read_object+0x148>
{ return value->type == CborBooleanType; }
   17e54:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   17e58:	2bf5      	cmp	r3, #245	; 0xf5
   17e5a:	d106      	bne.n	17e6a <cbor_internal_read_object+0x196>
    *result = !!value->extra;
   17e5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17e60:	3b00      	subs	r3, #0
   17e62:	bf18      	it	ne
   17e64:	2301      	movne	r3, #1
   17e66:	7003      	strb	r3, [r0, #0]
                break;
   17e68:	e0c4      	b.n	17ff4 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_boolean(value));
   17e6a:	2300      	movs	r3, #0
   17e6c:	461a      	mov	r2, r3
   17e6e:	4619      	mov	r1, r3
   17e70:	4618      	mov	r0, r3
   17e72:	f7f1 f9a7 	bl	91c4 <__assert_func>
{ return value->type == CborIntegerType; }
   17e76:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   17e7a:	b9a3      	cbnz	r3, 17ea6 <cbor_internal_read_object+0x1d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17e7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   17e80:	f013 0f01 	tst.w	r3, #1
   17e84:	d115      	bne.n	17eb2 <cbor_internal_read_object+0x1de>
   17e86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   17e8a:	2300      	movs	r3, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   17e8c:	602a      	str	r2, [r5, #0]
   17e8e:	606b      	str	r3, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   17e90:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   17e94:	f011 0f02 	tst.w	r1, #2
   17e98:	f000 80ac 	beq.w	17ff4 <cbor_internal_read_object+0x320>
        *result = -*result - 1;
   17e9c:	43d2      	mvns	r2, r2
   17e9e:	43db      	mvns	r3, r3
   17ea0:	602a      	str	r2, [r5, #0]
   17ea2:	606b      	str	r3, [r5, #4]
                break;
   17ea4:	e0a6      	b.n	17ff4 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_integer(value));
   17ea6:	2300      	movs	r3, #0
   17ea8:	461a      	mov	r2, r3
   17eaa:	4619      	mov	r1, r3
   17eac:	4618      	mov	r0, r3
   17eae:	f7f1 f989 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17eb2:	a805      	add	r0, sp, #20
   17eb4:	f000 fd15 	bl	188e2 <_cbor_value_decode_int64_internal>
   17eb8:	4602      	mov	r2, r0
   17eba:	460b      	mov	r3, r1
   17ebc:	e7e6      	b.n	17e8c <cbor_internal_read_object+0x1b8>
{ return value->type == CborIntegerType; }
   17ebe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17ec2:	b933      	cbnz	r3, 17ed2 <cbor_internal_read_object+0x1fe>
   17ec4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17ec8:	f013 0f02 	tst.w	r3, #2
   17ecc:	d00e      	beq.n	17eec <cbor_internal_read_object+0x218>
   17ece:	2300      	movs	r3, #0
   17ed0:	e000      	b.n	17ed4 <cbor_internal_read_object+0x200>
   17ed2:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   17ed4:	b163      	cbz	r3, 17ef0 <cbor_internal_read_object+0x21c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17ed6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   17eda:	f013 0f01 	tst.w	r3, #1
   17ede:	d10c      	bne.n	17efa <cbor_internal_read_object+0x226>
   17ee0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   17ee4:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   17ee6:	6028      	str	r0, [r5, #0]
   17ee8:	6069      	str	r1, [r5, #4]
                break;
   17eea:	e083      	b.n	17ff4 <cbor_internal_read_object+0x320>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17eec:	2301      	movs	r3, #1
   17eee:	e7f1      	b.n	17ed4 <cbor_internal_read_object+0x200>
    assert(cbor_value_is_unsigned_integer(value));
   17ef0:	461a      	mov	r2, r3
   17ef2:	4619      	mov	r1, r3
   17ef4:	4618      	mov	r0, r3
   17ef6:	f7f1 f965 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17efa:	a805      	add	r0, sp, #20
   17efc:	f000 fcf1 	bl	188e2 <_cbor_value_decode_int64_internal>
   17f00:	e7f1      	b.n	17ee6 <cbor_internal_read_object+0x212>
{ return value->type == CborFloatType; }
   17f02:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   17f06:	2bfa      	cmp	r3, #250	; 0xfa
   17f08:	d109      	bne.n	17f1e <cbor_internal_read_object+0x24a>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17f0a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17f0e:	f013 0f01 	tst.w	r3, #1
   17f12:	d00a      	beq.n	17f2a <cbor_internal_read_object+0x256>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   17f14:	a805      	add	r0, sp, #20
   17f16:	f000 fce4 	bl	188e2 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   17f1a:	6028      	str	r0, [r5, #0]
                break;
   17f1c:	e06a      	b.n	17ff4 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_float(value));
   17f1e:	2300      	movs	r3, #0
   17f20:	461a      	mov	r2, r3
   17f22:	4619      	mov	r1, r3
   17f24:	4618      	mov	r0, r3
   17f26:	f7f1 f94d 	bl	91c4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17f2a:	2300      	movs	r3, #0
   17f2c:	461a      	mov	r2, r3
   17f2e:	4619      	mov	r1, r3
   17f30:	4618      	mov	r0, r3
   17f32:	f7f1 f947 	bl	91c4 <__assert_func>
{ return value->type == CborDoubleType; }
   17f36:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   17f3a:	2bfb      	cmp	r3, #251	; 0xfb
   17f3c:	d10e      	bne.n	17f5c <cbor_internal_read_object+0x288>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17f3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17f42:	f013 0f01 	tst.w	r3, #1
   17f46:	d00f      	beq.n	17f68 <cbor_internal_read_object+0x294>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   17f48:	a805      	add	r0, sp, #20
   17f4a:	f000 fcca 	bl	188e2 <_cbor_value_decode_int64_internal>
   17f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   17f52:	ab02      	add	r3, sp, #8
   17f54:	cb03      	ldmia	r3!, {r0, r1}
   17f56:	6028      	str	r0, [r5, #0]
   17f58:	6069      	str	r1, [r5, #4]
                break;
   17f5a:	e04b      	b.n	17ff4 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_double(value));
   17f5c:	2300      	movs	r3, #0
   17f5e:	461a      	mov	r2, r3
   17f60:	4619      	mov	r1, r3
   17f62:	4618      	mov	r0, r3
   17f64:	f7f1 f92e 	bl	91c4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17f68:	2300      	movs	r3, #0
   17f6a:	461a      	mov	r2, r3
   17f6c:	4619      	mov	r1, r3
   17f6e:	4618      	mov	r0, r3
   17f70:	f7f1 f928 	bl	91c4 <__assert_func>
                size_t len = cursor->len;
   17f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17f76:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   17f78:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   17f7c:	2b40      	cmp	r3, #64	; 0x40
   17f7e:	d10b      	bne.n	17f98 <cbor_internal_read_object+0x2c4>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   17f80:	2300      	movs	r3, #0
   17f82:	aa02      	add	r2, sp, #8
   17f84:	4601      	mov	r1, r0
   17f86:	a805      	add	r0, sp, #20
   17f88:	f000 fdae 	bl	18ae8 <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   17f8c:	ea48 0800 	orr.w	r8, r8, r0
                *cursor->addr.bytestring.len = len;
   17f90:	68e3      	ldr	r3, [r4, #12]
   17f92:	9a02      	ldr	r2, [sp, #8]
   17f94:	601a      	str	r2, [r3, #0]
                break;
   17f96:	e02d      	b.n	17ff4 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_byte_string(value));
   17f98:	2300      	movs	r3, #0
   17f9a:	461a      	mov	r2, r3
   17f9c:	4619      	mov	r1, r3
   17f9e:	4618      	mov	r0, r3
   17fa0:	f7f1 f910 	bl	91c4 <__assert_func>
                size_t len = cursor->len;
   17fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   17fa6:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   17fa8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   17fac:	2b60      	cmp	r3, #96	; 0x60
   17fae:	d108      	bne.n	17fc2 <cbor_internal_read_object+0x2ee>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   17fb0:	2300      	movs	r3, #0
   17fb2:	aa02      	add	r2, sp, #8
   17fb4:	4601      	mov	r1, r0
   17fb6:	a805      	add	r0, sp, #20
   17fb8:	f000 fd96 	bl	18ae8 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   17fbc:	ea48 0800 	orr.w	r8, r8, r0
                break;
   17fc0:	e018      	b.n	17ff4 <cbor_internal_read_object+0x320>
    assert(cbor_value_is_text_string(value));
   17fc2:	2300      	movs	r3, #0
   17fc4:	461a      	mov	r2, r3
   17fc6:	4619      	mov	r1, r3
   17fc8:	4618      	mov	r0, r3
   17fca:	f7f1 f8fb 	bl	91c4 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   17fce:	f104 0108 	add.w	r1, r4, #8
   17fd2:	a805      	add	r0, sp, #20
   17fd4:	f7ff fd72 	bl	17abc <cbor_read_array>
   17fd8:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   17fdc:	e00d      	b.n	17ffa <cbor_internal_read_object+0x326>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   17fde:	2300      	movs	r3, #0
   17fe0:	461a      	mov	r2, r3
   17fe2:	68a1      	ldr	r1, [r4, #8]
   17fe4:	a805      	add	r0, sp, #20
   17fe6:	f7ff fe75 	bl	17cd4 <cbor_internal_read_object>
   17fea:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   17fee:	e004      	b.n	17ffa <cbor_internal_read_object+0x326>
                err |= CborErrorIllegalType;
   17ff0:	f448 7882 	orr.w	r8, r8, #260	; 0x104
        cbor_value_advance(&cur_value);
   17ff4:	a805      	add	r0, sp, #20
   17ff6:	f000 fdd4 	bl	18ba2 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   17ffa:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   17ffe:	2eff      	cmp	r6, #255	; 0xff
   18000:	d010      	beq.n	18024 <cbor_internal_read_object+0x350>
   18002:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   18004:	2b00      	cmp	r3, #0
   18006:	f43f aedb 	beq.w	17dc0 <cbor_internal_read_object+0xec>
   1800a:	f1b8 0f00 	cmp.w	r8, #0
   1800e:	f47f aed7 	bne.w	17dc0 <cbor_internal_read_object+0xec>
        if (cbor_value_is_text_string(&cur_value)) {
   18012:	2e60      	cmp	r6, #96	; 0x60
   18014:	f43f aeb0 	beq.w	17d78 <cbor_internal_read_object+0xa4>
            attrbuf[0] = '\0';
   18018:	2300      	movs	r3, #0
   1801a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   1801e:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   18020:	9c00      	ldr	r4, [sp, #0]
   18022:	e6e3      	b.n	17dec <cbor_internal_read_object+0x118>
   18024:	2300      	movs	r3, #0
   18026:	e7ed      	b.n	18004 <cbor_internal_read_object+0x330>
        err |= cbor_value_leave_container(root_value, &cur_value);
   18028:	a905      	add	r1, sp, #20
   1802a:	9801      	ldr	r0, [sp, #4]
   1802c:	f000 fd3c 	bl	18aa8 <cbor_value_leave_container>
   18030:	ea48 0800 	orr.w	r8, r8, r0
   18034:	e6c8      	b.n	17dc8 <cbor_internal_read_object+0xf4>
   18036:	bf00      	nop

00018038 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   18038:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   1803a:	2300      	movs	r3, #0
   1803c:	461a      	mov	r2, r3
   1803e:	f7ff fe49 	bl	17cd4 <cbor_internal_read_object>
    return st;
}
   18042:	bd08      	pop	{r3, pc}

00018044 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   18044:	b508      	push	{r3, lr}
   18046:	4694      	mov	ip, r2
   18048:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   1804a:	460b      	mov	r3, r1
   1804c:	69c1      	ldr	r1, [r0, #28]
   1804e:	4461      	add	r1, ip
   18050:	6a00      	ldr	r0, [r0, #32]
   18052:	f7f2 fcd2 	bl	a9fa <os_mbuf_copydata>
    if (rc == 0) {
   18056:	b108      	cbz	r0, 1805c <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   18058:	2000      	movs	r0, #0
}
   1805a:	bd08      	pop	{r3, pc}
        return true;
   1805c:	2001      	movs	r0, #1
   1805e:	e7fc      	b.n	1805a <cbor_mbuf_reader_cpy+0x16>

00018060 <cbor_mbuf_reader_get8>:
{
   18060:	b510      	push	{r4, lr}
   18062:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   18064:	f10d 0307 	add.w	r3, sp, #7
   18068:	2201      	movs	r2, #1
   1806a:	69c4      	ldr	r4, [r0, #28]
   1806c:	4421      	add	r1, r4
   1806e:	6a00      	ldr	r0, [r0, #32]
   18070:	f7f2 fcc3 	bl	a9fa <os_mbuf_copydata>
}
   18074:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18078:	b002      	add	sp, #8
   1807a:	bd10      	pop	{r4, pc}

0001807c <cbor_mbuf_reader_cmp>:
{
   1807c:	b508      	push	{r3, lr}
   1807e:	4694      	mov	ip, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   18080:	460a      	mov	r2, r1
   18082:	69c1      	ldr	r1, [r0, #28]
   18084:	4461      	add	r1, ip
   18086:	6a00      	ldr	r0, [r0, #32]
   18088:	f7f2 fd3b 	bl	ab02 <os_mbuf_cmpf>
}
   1808c:	fab0 f080 	clz	r0, r0
   18090:	0940      	lsrs	r0, r0, #5
   18092:	bd08      	pop	{r3, pc}

00018094 <cbor_mbuf_reader_get64>:
{
   18094:	b510      	push	{r4, lr}
   18096:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   18098:	466b      	mov	r3, sp
   1809a:	2208      	movs	r2, #8
   1809c:	69c4      	ldr	r4, [r0, #28]
   1809e:	4421      	add	r1, r4
   180a0:	6a00      	ldr	r0, [r0, #32]
   180a2:	f7f2 fcaa 	bl	a9fa <os_mbuf_copydata>
}
   180a6:	9801      	ldr	r0, [sp, #4]
   180a8:	ba00      	rev	r0, r0
   180aa:	9900      	ldr	r1, [sp, #0]
   180ac:	ba09      	rev	r1, r1
   180ae:	b002      	add	sp, #8
   180b0:	bd10      	pop	{r4, pc}

000180b2 <cbor_mbuf_reader_get32>:
{
   180b2:	b510      	push	{r4, lr}
   180b4:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   180b6:	ab01      	add	r3, sp, #4
   180b8:	2204      	movs	r2, #4
   180ba:	69c4      	ldr	r4, [r0, #28]
   180bc:	4421      	add	r1, r4
   180be:	6a00      	ldr	r0, [r0, #32]
   180c0:	f7f2 fc9b 	bl	a9fa <os_mbuf_copydata>
}
   180c4:	9801      	ldr	r0, [sp, #4]
   180c6:	ba00      	rev	r0, r0
   180c8:	b002      	add	sp, #8
   180ca:	bd10      	pop	{r4, pc}

000180cc <cbor_mbuf_reader_get16>:
{
   180cc:	b510      	push	{r4, lr}
   180ce:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   180d0:	f10d 0306 	add.w	r3, sp, #6
   180d4:	2202      	movs	r2, #2
   180d6:	69c4      	ldr	r4, [r0, #28]
   180d8:	4421      	add	r1, r4
   180da:	6a00      	ldr	r0, [r0, #32]
   180dc:	f7f2 fc8d 	bl	a9fa <os_mbuf_copydata>
    return cbor_ntohs(val);
   180e0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   180e4:	ba40      	rev16	r0, r0
}
   180e6:	b280      	uxth	r0, r0
   180e8:	b002      	add	sp, #8
   180ea:	bd10      	pop	{r4, pc}

000180ec <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   180ec:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   180ee:	4b0d      	ldr	r3, [pc, #52]	; (18124 <cbor_mbuf_reader_init+0x38>)
   180f0:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   180f2:	4b0d      	ldr	r3, [pc, #52]	; (18128 <cbor_mbuf_reader_init+0x3c>)
   180f4:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   180f6:	4b0d      	ldr	r3, [pc, #52]	; (1812c <cbor_mbuf_reader_init+0x40>)
   180f8:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   180fa:	4b0d      	ldr	r3, [pc, #52]	; (18130 <cbor_mbuf_reader_init+0x44>)
   180fc:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   180fe:	4b0d      	ldr	r3, [pc, #52]	; (18134 <cbor_mbuf_reader_init+0x48>)
   18100:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   18102:	4b0d      	ldr	r3, [pc, #52]	; (18138 <cbor_mbuf_reader_init+0x4c>)
   18104:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   18106:	794b      	ldrb	r3, [r1, #5]
   18108:	2b07      	cmp	r3, #7
   1810a:	d905      	bls.n	18118 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   1810c:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   1810e:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   18110:	8a0b      	ldrh	r3, [r1, #16]
   18112:	1a9a      	subs	r2, r3, r2
   18114:	6182      	str	r2, [r0, #24]
}
   18116:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   18118:	2300      	movs	r3, #0
   1811a:	461a      	mov	r2, r3
   1811c:	4619      	mov	r1, r3
   1811e:	4618      	mov	r0, r3
   18120:	f7f1 f850 	bl	91c4 <__assert_func>
   18124:	00018061 	.word	0x00018061
   18128:	000180cd 	.word	0x000180cd
   1812c:	000180b3 	.word	0x000180b3
   18130:	00018095 	.word	0x00018095
   18134:	0001807d 	.word	0x0001807d
   18138:	00018045 	.word	0x00018045

0001813c <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   1813c:	b538      	push	{r3, r4, r5, lr}
   1813e:	4604      	mov	r4, r0
   18140:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   18142:	b292      	uxth	r2, r2
   18144:	6880      	ldr	r0, [r0, #8]
   18146:	f7f2 fbf2 	bl	a92e <os_mbuf_append>
    if (rc) {
   1814a:	b918      	cbnz	r0, 18154 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   1814c:	6862      	ldr	r2, [r4, #4]
   1814e:	442a      	add	r2, r5
   18150:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   18152:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   18154:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18158:	e7fb      	b.n	18152 <cbor_mbuf_writer+0x16>
	...

0001815c <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   1815c:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   1815e:	2300      	movs	r3, #0
   18160:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   18162:	4b01      	ldr	r3, [pc, #4]	; (18168 <cbor_mbuf_writer_init+0xc>)
   18164:	6003      	str	r3, [r0, #0]
}
   18166:	4770      	bx	lr
   18168:	0001813d 	.word	0x0001813d

0001816c <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   1816c:	b510      	push	{r4, lr}
   1816e:	b084      	sub	sp, #16
   18170:	468c      	mov	ip, r1
    CborError err;
    container->writer = encoder->writer;
   18172:	6801      	ldr	r1, [r0, #0]
   18174:	f8cc 1000 	str.w	r1, [ip]
    ++encoder->added;
   18178:	6881      	ldr	r1, [r0, #8]
   1817a:	3101      	adds	r1, #1
   1817c:	6081      	str	r1, [r0, #8]
    container->added = 0;
   1817e:	2100      	movs	r1, #0
   18180:	f8cc 1008 	str.w	r1, [ip, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   18184:	f003 0120 	and.w	r1, r3, #32
   18188:	f8cc 100c 	str.w	r1, [ip, #12]

    if (length == CborIndefiniteLength) {
   1818c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   18190:	d10f      	bne.n	181b2 <create_container+0x46>
        container->flags |= CborIteratorFlag_UnknownLength;
   18192:	f041 0104 	orr.w	r1, r1, #4
   18196:	f8cc 100c 	str.w	r1, [ip, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   1819a:	331f      	adds	r3, #31
   1819c:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   181a0:	f8dc 0000 	ldr.w	r0, [ip]
   181a4:	6803      	ldr	r3, [r0, #0]
   181a6:	2201      	movs	r2, #1
   181a8:	4669      	mov	r1, sp
   181aa:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   181ac:	2000      	movs	r0, #0
   181ae:	b004      	add	sp, #16
   181b0:	bd10      	pop	{r4, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   181b2:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   181b4:	ba10      	rev	r0, r2
    memcpy(where, &v, sizeof(v));
   181b6:	9102      	str	r1, [sp, #8]
   181b8:	9003      	str	r0, [sp, #12]
    if (ui < Value8Bit) {
   181ba:	2a18      	cmp	r2, #24
   181bc:	f171 0400 	sbcs.w	r4, r1, #0
   181c0:	d20c      	bcs.n	181dc <create_container+0x70>
        *bufstart += shiftedMajorType;
   181c2:	eb03 6310 	add.w	r3, r3, r0, lsr #24
   181c6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   181ca:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   181ce:	f8dc 0000 	ldr.w	r0, [ip]
   181d2:	6803      	ldr	r3, [r0, #0]
   181d4:	aa04      	add	r2, sp, #16
   181d6:	1a52      	subs	r2, r2, r1
   181d8:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   181da:	e7e7      	b.n	181ac <create_container+0x40>
        if (ui > 0xffU)
   181dc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   181e0:	f171 0000 	sbcs.w	r0, r1, #0
   181e4:	d210      	bcs.n	18208 <create_container+0x9c>
        unsigned more = 0;
   181e6:	2000      	movs	r0, #0
        if (ui > 0xffffU)
   181e8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   181ec:	f171 0200 	sbcs.w	r2, r1, #0
   181f0:	d300      	bcc.n	181f4 <create_container+0x88>
            ++more;
   181f2:	3001      	adds	r0, #1
        bufstart -= (size_t)1 << more;
   181f4:	2101      	movs	r1, #1
   181f6:	fa01 f200 	lsl.w	r2, r1, r0
   181fa:	f10d 010f 	add.w	r1, sp, #15
   181fe:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   18200:	4403      	add	r3, r0
   18202:	3318      	adds	r3, #24
   18204:	700b      	strb	r3, [r1, #0]
   18206:	e7e2      	b.n	181ce <create_container+0x62>
            ++more;
   18208:	2001      	movs	r0, #1
   1820a:	e7ed      	b.n	181e8 <create_container+0x7c>

0001820c <encode_string>:
{
   1820c:	b570      	push	{r4, r5, r6, lr}
   1820e:	b084      	sub	sp, #16
   18210:	4605      	mov	r5, r0
   18212:	460c      	mov	r4, r1
   18214:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   18216:	2300      	movs	r3, #0
    ++encoder->added;
   18218:	6881      	ldr	r1, [r0, #8]
   1821a:	3101      	adds	r1, #1
   1821c:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   1821e:	ba21      	rev	r1, r4
    memcpy(where, &v, sizeof(v));
   18220:	9302      	str	r3, [sp, #8]
   18222:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   18224:	2c18      	cmp	r4, #24
   18226:	f173 0000 	sbcs.w	r0, r3, #0
   1822a:	d211      	bcs.n	18250 <encode_string+0x44>
        *bufstart += shiftedMajorType;
   1822c:	eb02 6211 	add.w	r2, r2, r1, lsr #24
   18230:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   18234:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   18238:	6828      	ldr	r0, [r5, #0]
   1823a:	6803      	ldr	r3, [r0, #0]
   1823c:	aa04      	add	r2, sp, #16
   1823e:	1a52      	subs	r2, r2, r1
   18240:	4798      	blx	r3
   18242:	6828      	ldr	r0, [r5, #0]
   18244:	6803      	ldr	r3, [r0, #0]
   18246:	4622      	mov	r2, r4
   18248:	4631      	mov	r1, r6
   1824a:	4798      	blx	r3
}
   1824c:	b004      	add	sp, #16
   1824e:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   18250:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   18254:	f173 0100 	sbcs.w	r1, r3, #0
   18258:	d212      	bcs.n	18280 <encode_string+0x74>
        unsigned more = 0;
   1825a:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   1825e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   18262:	f173 0300 	sbcs.w	r3, r3, #0
   18266:	d301      	bcc.n	1826c <encode_string+0x60>
            ++more;
   18268:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   1826c:	2101      	movs	r1, #1
   1826e:	fa01 f10c 	lsl.w	r1, r1, ip
   18272:	f10d 000f 	add.w	r0, sp, #15
   18276:	1a41      	subs	r1, r0, r1
        *bufstart = shiftedMajorType + Value8Bit + more;
   18278:	4462      	add	r2, ip
   1827a:	3218      	adds	r2, #24
   1827c:	700a      	strb	r2, [r1, #0]
   1827e:	e7db      	b.n	18238 <encode_string+0x2c>
            ++more;
   18280:	f04f 0c01 	mov.w	ip, #1
   18284:	e7eb      	b.n	1825e <encode_string+0x52>

00018286 <cbor_encoder_init>:
    encoder->writer = writer;
   18286:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   18288:	2300      	movs	r3, #0
   1828a:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   1828c:	60c2      	str	r2, [r0, #12]
}
   1828e:	4770      	bx	lr

00018290 <cbor_encode_uint>:
{
   18290:	b510      	push	{r4, lr}
   18292:	b084      	sub	sp, #16
    ++encoder->added;
   18294:	6881      	ldr	r1, [r0, #8]
   18296:	3101      	adds	r1, #1
   18298:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   1829a:	ba11      	rev	r1, r2
   1829c:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   1829e:	9402      	str	r4, [sp, #8]
   182a0:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   182a2:	2a18      	cmp	r2, #24
   182a4:	f173 0400 	sbcs.w	r4, r3, #0
   182a8:	d20c      	bcs.n	182c4 <cbor_encode_uint+0x34>
        *bufstart += shiftedMajorType;
   182aa:	f3c1 6107 	ubfx	r1, r1, #24, #8
   182ae:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   182b2:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   182b6:	6800      	ldr	r0, [r0, #0]
   182b8:	6803      	ldr	r3, [r0, #0]
   182ba:	aa04      	add	r2, sp, #16
   182bc:	1a52      	subs	r2, r2, r1
   182be:	4798      	blx	r3
}
   182c0:	b004      	add	sp, #16
   182c2:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   182c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   182c8:	f173 0100 	sbcs.w	r1, r3, #0
   182cc:	d21d      	bcs.n	1830a <cbor_encode_uint+0x7a>
        unsigned more = 0;
   182ce:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   182d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   182d6:	f173 0100 	sbcs.w	r1, r3, #0
   182da:	d301      	bcc.n	182e0 <cbor_encode_uint+0x50>
            ++more;
   182dc:	f10c 0c01 	add.w	ip, ip, #1
        if (ui > 0xffffffffU)
   182e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   182e4:	4291      	cmp	r1, r2
   182e6:	f04f 0200 	mov.w	r2, #0
   182ea:	eb72 0303 	sbcs.w	r3, r2, r3
   182ee:	d201      	bcs.n	182f4 <cbor_encode_uint+0x64>
            ++more;
   182f0:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   182f4:	2101      	movs	r1, #1
   182f6:	fa01 f30c 	lsl.w	r3, r1, ip
   182fa:	f10d 010f 	add.w	r1, sp, #15
   182fe:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   18300:	f10c 0c18 	add.w	ip, ip, #24
   18304:	f881 c000 	strb.w	ip, [r1]
   18308:	e7d5      	b.n	182b6 <cbor_encode_uint+0x26>
            ++more;
   1830a:	f04f 0c01 	mov.w	ip, #1
   1830e:	e7e0      	b.n	182d2 <cbor_encode_uint+0x42>

00018310 <cbor_encode_int>:
{
   18310:	b510      	push	{r4, lr}
   18312:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   18314:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   18316:	f001 0c20 	and.w	ip, r1, #32
    ui ^= value;                            /* complement negatives */
   1831a:	404a      	eors	r2, r1
   1831c:	404b      	eors	r3, r1
    ++encoder->added;
   1831e:	6881      	ldr	r1, [r0, #8]
   18320:	3101      	adds	r1, #1
   18322:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   18324:	ba11      	rev	r1, r2
   18326:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   18328:	9402      	str	r4, [sp, #8]
   1832a:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   1832c:	2a18      	cmp	r2, #24
   1832e:	f173 0400 	sbcs.w	r4, r3, #0
   18332:	d20c      	bcs.n	1834e <cbor_encode_int+0x3e>
        *bufstart += shiftedMajorType;
   18334:	eb0c 6111 	add.w	r1, ip, r1, lsr #24
   18338:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   1833c:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   18340:	6800      	ldr	r0, [r0, #0]
   18342:	6803      	ldr	r3, [r0, #0]
   18344:	aa04      	add	r2, sp, #16
   18346:	1a52      	subs	r2, r2, r1
   18348:	4798      	blx	r3
}
   1834a:	b004      	add	sp, #16
   1834c:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   1834e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   18352:	f173 0100 	sbcs.w	r1, r3, #0
   18356:	d21e      	bcs.n	18396 <cbor_encode_int+0x86>
        unsigned more = 0;
   18358:	f04f 0e00 	mov.w	lr, #0
        if (ui > 0xffffU)
   1835c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   18360:	f173 0100 	sbcs.w	r1, r3, #0
   18364:	d301      	bcc.n	1836a <cbor_encode_int+0x5a>
            ++more;
   18366:	f10e 0e01 	add.w	lr, lr, #1
        if (ui > 0xffffffffU)
   1836a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1836e:	4291      	cmp	r1, r2
   18370:	f04f 0200 	mov.w	r2, #0
   18374:	eb72 0303 	sbcs.w	r3, r2, r3
   18378:	d201      	bcs.n	1837e <cbor_encode_int+0x6e>
            ++more;
   1837a:	f10e 0e01 	add.w	lr, lr, #1
        bufstart -= (size_t)1 << more;
   1837e:	2101      	movs	r1, #1
   18380:	fa01 f30e 	lsl.w	r3, r1, lr
   18384:	f10d 010f 	add.w	r1, sp, #15
   18388:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   1838a:	44f4      	add	ip, lr
   1838c:	f10c 0c18 	add.w	ip, ip, #24
   18390:	f881 c000 	strb.w	ip, [r1]
   18394:	e7d4      	b.n	18340 <cbor_encode_int+0x30>
            ++more;
   18396:	f04f 0e01 	mov.w	lr, #1
   1839a:	e7df      	b.n	1835c <cbor_encode_int+0x4c>

0001839c <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   1839c:	f1a1 0319 	sub.w	r3, r1, #25
   183a0:	b2db      	uxtb	r3, r3
   183a2:	2b06      	cmp	r3, #6
   183a4:	d925      	bls.n	183f2 <cbor_encode_simple_value+0x56>
{
   183a6:	b500      	push	{lr}
   183a8:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   183aa:	2200      	movs	r2, #0
    ++encoder->added;
   183ac:	6883      	ldr	r3, [r0, #8]
   183ae:	3301      	adds	r3, #1
   183b0:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   183b2:	ba0b      	rev	r3, r1
    memcpy(where, &v, sizeof(v));
   183b4:	9202      	str	r2, [sp, #8]
   183b6:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   183b8:	2918      	cmp	r1, #24
   183ba:	f172 0200 	sbcs.w	r2, r2, #0
   183be:	d20e      	bcs.n	183de <cbor_encode_simple_value+0x42>
        *bufstart += shiftedMajorType;
   183c0:	f3c3 6307 	ubfx	r3, r3, #24, #8
   183c4:	3b20      	subs	r3, #32
   183c6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   183ca:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   183ce:	6800      	ldr	r0, [r0, #0]
   183d0:	6803      	ldr	r3, [r0, #0]
   183d2:	aa04      	add	r2, sp, #16
   183d4:	1a52      	subs	r2, r2, r1
   183d6:	4798      	blx	r3
}
   183d8:	b005      	add	sp, #20
   183da:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned more = 0;
   183de:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   183e0:	2101      	movs	r1, #1
   183e2:	fa01 f203 	lsl.w	r2, r1, r3
   183e6:	f10d 010f 	add.w	r1, sp, #15
   183ea:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   183ec:	3b08      	subs	r3, #8
   183ee:	700b      	strb	r3, [r1, #0]
   183f0:	e7ed      	b.n	183ce <cbor_encode_simple_value+0x32>
        return CborErrorIllegalSimpleType;
   183f2:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   183f6:	4770      	bx	lr

000183f8 <cbor_encode_byte_string>:
{
   183f8:	b508      	push	{r3, lr}
   183fa:	460b      	mov	r3, r1
   183fc:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   183fe:	2240      	movs	r2, #64	; 0x40
   18400:	f7ff ff04 	bl	1820c <encode_string>
}
   18404:	bd08      	pop	{r3, pc}

00018406 <cbor_encode_text_string>:
{
   18406:	b508      	push	{r3, lr}
   18408:	460b      	mov	r3, r1
   1840a:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   1840c:	2260      	movs	r2, #96	; 0x60
   1840e:	f7ff fefd 	bl	1820c <encode_string>
}
   18412:	bd08      	pop	{r3, pc}

00018414 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   18414:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   18416:	2380      	movs	r3, #128	; 0x80
   18418:	f7ff fea8 	bl	1816c <create_container>
}
   1841c:	bd08      	pop	{r3, pc}

0001841e <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   1841e:	b508      	push	{r3, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   18420:	f102 4c00 	add.w	ip, r2, #2147483648	; 0x80000000
   18424:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   18428:	459c      	cmp	ip, r3
   1842a:	d303      	bcc.n	18434 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   1842c:	23a0      	movs	r3, #160	; 0xa0
   1842e:	f7ff fe9d 	bl	1816c <create_container>
}
   18432:	bd08      	pop	{r3, pc}
        return CborErrorDataTooLarge;
   18434:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18438:	e7fb      	b.n	18432 <cbor_encoder_create_map+0x14>

0001843a <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   1843a:	680b      	ldr	r3, [r1, #0]
   1843c:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   1843e:	68cb      	ldr	r3, [r1, #12]
   18440:	f013 0f04 	tst.w	r3, #4
   18444:	d101      	bne.n	1844a <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   18446:	2000      	movs	r0, #0
}
   18448:	4770      	bx	lr
{
   1844a:	b500      	push	{lr}
   1844c:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   1844e:	23ff      	movs	r3, #255	; 0xff
   18450:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   18454:	6800      	ldr	r0, [r0, #0]
   18456:	6803      	ldr	r3, [r0, #0]
   18458:	2201      	movs	r2, #1
   1845a:	f10d 0107 	add.w	r1, sp, #7
   1845e:	4798      	blx	r3
}
   18460:	b003      	add	sp, #12
   18462:	f85d fb04 	ldr.w	pc, [sp], #4

00018466 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   18466:	2860      	cmp	r0, #96	; 0x60
   18468:	d009      	beq.n	1847e <is_fixed_type+0x18>
   1846a:	2840      	cmp	r0, #64	; 0x40
   1846c:	d009      	beq.n	18482 <is_fixed_type+0x1c>
   1846e:	2880      	cmp	r0, #128	; 0x80
   18470:	d009      	beq.n	18486 <is_fixed_type+0x20>
   18472:	28a0      	cmp	r0, #160	; 0xa0
   18474:	d001      	beq.n	1847a <is_fixed_type+0x14>
   18476:	2001      	movs	r0, #1
           type != CborMapType;
}
   18478:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1847a:	2000      	movs	r0, #0
   1847c:	4770      	bx	lr
   1847e:	2000      	movs	r0, #0
   18480:	4770      	bx	lr
   18482:	2000      	movs	r0, #0
   18484:	4770      	bx	lr
   18486:	2000      	movs	r0, #0
   18488:	4770      	bx	lr

0001848a <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   1848a:	2001      	movs	r0, #1
   1848c:	4770      	bx	lr

0001848e <preparse_value>:
{
   1848e:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   18490:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   18492:	23ff      	movs	r3, #255	; 0xff
   18494:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   18496:	6841      	ldr	r1, [r0, #4]
   18498:	686b      	ldr	r3, [r5, #4]
   1849a:	4299      	cmp	r1, r3
   1849c:	f000 8089 	beq.w	185b2 <preparse_value+0x124>
   184a0:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   184a2:	6828      	ldr	r0, [r5, #0]
   184a4:	6803      	ldr	r3, [r0, #0]
   184a6:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   184a8:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   184ac:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   184ae:	2300      	movs	r3, #0
   184b0:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   184b2:	f000 031f 	and.w	r3, r0, #31
   184b6:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   184b8:	2b1b      	cmp	r3, #27
   184ba:	d91d      	bls.n	184f8 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   184bc:	2b1f      	cmp	r3, #31
   184be:	d10b      	bne.n	184d8 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   184c0:	4630      	mov	r0, r6
   184c2:	f7ff ffd0 	bl	18466 <is_fixed_type>
   184c6:	f080 0001 	eor.w	r0, r0, #1
   184ca:	f010 0fff 	tst.w	r0, #255	; 0xff
   184ce:	d00b      	beq.n	184e8 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   184d0:	2304      	movs	r3, #4
   184d2:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   184d4:	2000      	movs	r0, #0
}
   184d6:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   184d8:	2ee0      	cmp	r6, #224	; 0xe0
   184da:	d002      	beq.n	184e2 <preparse_value+0x54>
   184dc:	f240 1005 	movw	r0, #261	; 0x105
   184e0:	e7f9      	b.n	184d6 <preparse_value+0x48>
   184e2:	f240 1003 	movw	r0, #259	; 0x103
   184e6:	e7f6      	b.n	184d6 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   184e8:	2ee0      	cmp	r6, #224	; 0xe0
   184ea:	d002      	beq.n	184f2 <preparse_value+0x64>
   184ec:	f240 1005 	movw	r0, #261	; 0x105
   184f0:	e7f1      	b.n	184d6 <preparse_value+0x48>
   184f2:	f44f 7081 	mov.w	r0, #258	; 0x102
   184f6:	e7ee      	b.n	184d6 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   184f8:	2b17      	cmp	r3, #23
   184fa:	d91a      	bls.n	18532 <preparse_value+0xa4>
   184fc:	f1a3 0118 	sub.w	r1, r3, #24
   18500:	2201      	movs	r2, #1
   18502:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   18504:	3201      	adds	r2, #1
   18506:	6868      	ldr	r0, [r5, #4]
   18508:	6861      	ldr	r1, [r4, #4]
   1850a:	1a40      	subs	r0, r0, r1
   1850c:	4282      	cmp	r2, r0
   1850e:	d853      	bhi.n	185b8 <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
   18510:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   18512:	2e20      	cmp	r6, #32
   18514:	d00f      	beq.n	18536 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   18516:	2a07      	cmp	r2, #7
   18518:	d012      	beq.n	18540 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   1851a:	2b17      	cmp	r3, #23
   1851c:	d94f      	bls.n	185be <preparse_value+0x130>
    if (descriptor == Value8Bit)
   1851e:	2b18      	cmp	r3, #24
   18520:	d039      	beq.n	18596 <preparse_value+0x108>
    else if (descriptor == Value16Bit)
   18522:	2b19      	cmp	r3, #25
   18524:	d03e      	beq.n	185a4 <preparse_value+0x116>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   18526:	7be3      	ldrb	r3, [r4, #15]
   18528:	f043 0301 	orr.w	r3, r3, #1
   1852c:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   1852e:	2000      	movs	r0, #0
   18530:	e7d1      	b.n	184d6 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   18532:	2200      	movs	r2, #0
   18534:	e7e6      	b.n	18504 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   18536:	2202      	movs	r2, #2
   18538:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   1853a:	2200      	movs	r2, #0
   1853c:	73a2      	strb	r2, [r4, #14]
   1853e:	e7ec      	b.n	1851a <preparse_value+0x8c>
        switch (descriptor) {
   18540:	3b14      	subs	r3, #20
   18542:	2b0b      	cmp	r3, #11
   18544:	d812      	bhi.n	1856c <preparse_value+0xde>
   18546:	e8df f003 	tbb	[pc, r3]
   1854a:	0d06      	.short	0x0d06
   1854c:	0d130d0d 	.word	0x0d130d0d
   18550:	20200b0b 	.word	0x20200b0b
   18554:	2020      	.short	0x2020
            it->extra = false;
   18556:	2300      	movs	r3, #0
   18558:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   1855a:	23f5      	movs	r3, #245	; 0xf5
   1855c:	73a3      	strb	r3, [r4, #14]
            break;
   1855e:	e005      	b.n	1856c <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   18560:	2301      	movs	r3, #1
   18562:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   18564:	6828      	ldr	r0, [r5, #0]
   18566:	6803      	ldr	r3, [r0, #0]
   18568:	4798      	blx	r3
   1856a:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   1856c:	2000      	movs	r0, #0
   1856e:	e7b2      	b.n	184d6 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   18570:	6828      	ldr	r0, [r5, #0]
   18572:	6803      	ldr	r3, [r0, #0]
   18574:	3101      	adds	r1, #1
   18576:	4798      	blx	r3
   18578:	b283      	uxth	r3, r0
   1857a:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   1857c:	2b1f      	cmp	r3, #31
   1857e:	d8f5      	bhi.n	1856c <preparse_value+0xde>
                it->type = CborInvalidType;
   18580:	23ff      	movs	r3, #255	; 0xff
   18582:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   18584:	f44f 7083 	mov.w	r0, #262	; 0x106
   18588:	e7a5      	b.n	184d6 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   1858a:	2300      	movs	r3, #0
   1858c:	461a      	mov	r2, r3
   1858e:	4619      	mov	r1, r3
   18590:	4618      	mov	r0, r3
   18592:	f7f0 fe17 	bl	91c4 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   18596:	6828      	ldr	r0, [r5, #0]
   18598:	6803      	ldr	r3, [r0, #0]
   1859a:	3101      	adds	r1, #1
   1859c:	4798      	blx	r3
   1859e:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   185a0:	2000      	movs	r0, #0
   185a2:	e798      	b.n	184d6 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   185a4:	6828      	ldr	r0, [r5, #0]
   185a6:	6843      	ldr	r3, [r0, #4]
   185a8:	3101      	adds	r1, #1
   185aa:	4798      	blx	r3
   185ac:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   185ae:	2000      	movs	r0, #0
   185b0:	e791      	b.n	184d6 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   185b2:	f240 1001 	movw	r0, #257	; 0x101
   185b6:	e78e      	b.n	184d6 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   185b8:	f240 1001 	movw	r0, #257	; 0x101
   185bc:	e78b      	b.n	184d6 <preparse_value+0x48>
        return CborNoError;
   185be:	2000      	movs	r0, #0
   185c0:	e789      	b.n	184d6 <preparse_value+0x48>

000185c2 <preparse_next_value>:
{
   185c2:	b510      	push	{r4, lr}
   185c4:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   185c6:	6880      	ldr	r0, [r0, #8]
   185c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   185cc:	d00c      	beq.n	185e8 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   185ce:	7ba2      	ldrb	r2, [r4, #14]
   185d0:	2ac0      	cmp	r2, #192	; 0xc0
   185d2:	d002      	beq.n	185da <preparse_next_value+0x18>
   185d4:	3801      	subs	r0, #1
   185d6:	60a0      	str	r0, [r4, #8]
   185d8:	b118      	cbz	r0, 185e2 <preparse_next_value+0x20>
    return preparse_value(it);
   185da:	4620      	mov	r0, r4
   185dc:	f7ff ff57 	bl	1848e <preparse_value>
}
   185e0:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   185e2:	23ff      	movs	r3, #255	; 0xff
   185e4:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   185e6:	e7fb      	b.n	185e0 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   185e8:	6861      	ldr	r1, [r4, #4]
   185ea:	6823      	ldr	r3, [r4, #0]
   185ec:	685a      	ldr	r2, [r3, #4]
   185ee:	4291      	cmp	r1, r2
   185f0:	d0f3      	beq.n	185da <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   185f2:	6818      	ldr	r0, [r3, #0]
   185f4:	6803      	ldr	r3, [r0, #0]
   185f6:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   185f8:	28ff      	cmp	r0, #255	; 0xff
   185fa:	d1ee      	bne.n	185da <preparse_next_value+0x18>
        ++it->offset;
   185fc:	6863      	ldr	r3, [r4, #4]
   185fe:	3301      	adds	r3, #1
   18600:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   18602:	23ff      	movs	r3, #255	; 0xff
   18604:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   18606:	2000      	movs	r0, #0
   18608:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   1860a:	e7e9      	b.n	185e0 <preparse_next_value+0x1e>

0001860c <extract_length>:
{
   1860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1860e:	4607      	mov	r7, r0
   18610:	460c      	mov	r4, r1
   18612:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   18614:	6800      	ldr	r0, [r0, #0]
   18616:	6803      	ldr	r3, [r0, #0]
   18618:	6809      	ldr	r1, [r1, #0]
   1861a:	4798      	blx	r3
   1861c:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   18620:	6822      	ldr	r2, [r4, #0]
   18622:	3201      	adds	r2, #1
   18624:	6022      	str	r2, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   18626:	2b17      	cmp	r3, #23
   18628:	d914      	bls.n	18654 <extract_length+0x48>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   1862a:	2b1b      	cmp	r3, #27
   1862c:	d82e      	bhi.n	1868c <extract_length+0x80>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1862e:	3b18      	subs	r3, #24
   18630:	2601      	movs	r6, #1
   18632:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   18634:	687b      	ldr	r3, [r7, #4]
   18636:	6821      	ldr	r1, [r4, #0]
   18638:	1a5b      	subs	r3, r3, r1
   1863a:	429e      	cmp	r6, r3
   1863c:	d82b      	bhi.n	18696 <extract_length+0x8a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   1863e:	2e01      	cmp	r6, #1
   18640:	d00b      	beq.n	1865a <extract_length+0x4e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   18642:	2e02      	cmp	r6, #2
   18644:	d016      	beq.n	18674 <extract_length+0x68>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   18646:	2e04      	cmp	r6, #4
   18648:	d01a      	beq.n	18680 <extract_length+0x74>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   1864a:	6838      	ldr	r0, [r7, #0]
   1864c:	68c3      	ldr	r3, [r0, #12]
   1864e:	4798      	blx	r3
   18650:	4603      	mov	r3, r0
   18652:	e007      	b.n	18664 <extract_length+0x58>
        *len = additional_information;
   18654:	2000      	movs	r0, #0
   18656:	4601      	mov	r1, r0
        return CborNoError;
   18658:	e008      	b.n	1866c <extract_length+0x60>
        *len = p->d->get8(p->d, *offset);
   1865a:	6838      	ldr	r0, [r7, #0]
   1865c:	6803      	ldr	r3, [r0, #0]
   1865e:	4798      	blx	r3
   18660:	4603      	mov	r3, r0
   18662:	2100      	movs	r1, #0
    }
    *offset += bytesNeeded;
   18664:	6822      	ldr	r2, [r4, #0]
   18666:	4432      	add	r2, r6
   18668:	6022      	str	r2, [r4, #0]
    return CborNoError;
   1866a:	2000      	movs	r0, #0
    if (err) {
   1866c:	b9c0      	cbnz	r0, 186a0 <extract_length+0x94>
    *len = v;
   1866e:	602b      	str	r3, [r5, #0]
    if (v != *len)
   18670:	b9c9      	cbnz	r1, 186a6 <extract_length+0x9a>
}
   18672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *len =  p->d->get16(p->d, *offset);
   18674:	6838      	ldr	r0, [r7, #0]
   18676:	6843      	ldr	r3, [r0, #4]
   18678:	4798      	blx	r3
   1867a:	4603      	mov	r3, r0
   1867c:	2100      	movs	r1, #0
   1867e:	e7f1      	b.n	18664 <extract_length+0x58>
        *len =  p->d->get32(p->d, *offset);
   18680:	6838      	ldr	r0, [r7, #0]
   18682:	6883      	ldr	r3, [r0, #8]
   18684:	4798      	blx	r3
   18686:	4603      	mov	r3, r0
   18688:	2100      	movs	r1, #0
   1868a:	e7eb      	b.n	18664 <extract_length+0x58>
    *len = 1;
   1868c:	2301      	movs	r3, #1
   1868e:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   18690:	f240 1005 	movw	r0, #261	; 0x105
   18694:	e7ea      	b.n	1866c <extract_length+0x60>
    *len = 1;
   18696:	2301      	movs	r3, #1
   18698:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   1869a:	f240 1001 	movw	r0, #257	; 0x101
   1869e:	e7e5      	b.n	1866c <extract_length+0x60>
        *len = 0;
   186a0:	2300      	movs	r3, #0
   186a2:	602b      	str	r3, [r5, #0]
        return err;
   186a4:	e7e5      	b.n	18672 <extract_length+0x66>
        return CborErrorDataTooLarge;
   186a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   186aa:	e7e2      	b.n	18672 <extract_length+0x66>

000186ac <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   186ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   186b0:	b085      	sub	sp, #20
   186b2:	4604      	mov	r4, r0
   186b4:	4689      	mov	r9, r1
   186b6:	4616      	mov	r6, r2
   186b8:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   186ba:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   186bc:	2b40      	cmp	r3, #64	; 0x40
   186be:	d001      	beq.n	186c4 <iterate_string_chunks+0x18>
   186c0:	2b60      	cmp	r3, #96	; 0x60
   186c2:	d10c      	bne.n	186de <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   186c4:	6863      	ldr	r3, [r4, #4]
   186c6:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   186c8:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   186ca:	f012 0f04 	tst.w	r2, #4
   186ce:	d00c      	beq.n	186ea <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   186d0:	3301      	adds	r3, #1
   186d2:	9302      	str	r3, [sp, #8]
        total = 0;
   186d4:	2300      	movs	r3, #0
   186d6:	9303      	str	r3, [sp, #12]
        *result = true;
   186d8:	2301      	movs	r3, #1
   186da:	702b      	strb	r3, [r5, #0]
   186dc:	e048      	b.n	18770 <iterate_string_chunks+0xc4>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   186de:	2300      	movs	r3, #0
   186e0:	461a      	mov	r2, r3
   186e2:	4619      	mov	r1, r3
   186e4:	4618      	mov	r0, r3
   186e6:	f7f0 fd6d 	bl	91c4 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   186ea:	aa03      	add	r2, sp, #12
   186ec:	a902      	add	r1, sp, #8
   186ee:	6820      	ldr	r0, [r4, #0]
   186f0:	f7ff ff8c 	bl	1860c <extract_length>
        if (err)
   186f4:	4603      	mov	r3, r0
   186f6:	2800      	cmp	r0, #0
   186f8:	d178      	bne.n	187ec <iterate_string_chunks+0x140>
        if (total > (size_t)(value->parser->end - offset))
   186fa:	6820      	ldr	r0, [r4, #0]
   186fc:	6843      	ldr	r3, [r0, #4]
   186fe:	9a02      	ldr	r2, [sp, #8]
   18700:	1a99      	subs	r1, r3, r2
   18702:	9b03      	ldr	r3, [sp, #12]
   18704:	4299      	cmp	r1, r3
   18706:	f0c0 8084 	bcc.w	18812 <iterate_string_chunks+0x166>
        if (total <= *buflen)
   1870a:	6831      	ldr	r1, [r6, #0]
   1870c:	428b      	cmp	r3, r1
   1870e:	d81e      	bhi.n	1874e <iterate_string_chunks+0xa2>
            *result = !!func(value->parser->d, buffer, offset, total);
   18710:	4649      	mov	r1, r9
   18712:	6800      	ldr	r0, [r0, #0]
   18714:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   18716:	47b8      	blx	r7
   18718:	3800      	subs	r0, #0
   1871a:	bf18      	it	ne
   1871c:	2001      	movne	r0, #1
   1871e:	7028      	strb	r0, [r5, #0]
        offset += total;
   18720:	9b02      	ldr	r3, [sp, #8]
   18722:	9a03      	ldr	r2, [sp, #12]
   18724:	4413      	add	r3, r2
   18726:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   18728:	782b      	ldrb	r3, [r5, #0]
   1872a:	b14b      	cbz	r3, 18740 <iterate_string_chunks+0x94>
   1872c:	6832      	ldr	r2, [r6, #0]
   1872e:	9b03      	ldr	r3, [sp, #12]
   18730:	429a      	cmp	r2, r3
   18732:	d905      	bls.n	18740 <iterate_string_chunks+0x94>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   18734:	f1b9 0f00 	cmp.w	r9, #0
   18738:	d002      	beq.n	18740 <iterate_string_chunks+0x94>
            *(buffer + total) = '\0';
   1873a:	2200      	movs	r2, #0
   1873c:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   18740:	9b03      	ldr	r3, [sp, #12]
   18742:	6033      	str	r3, [r6, #0]

    if (next) {
   18744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18746:	2b00      	cmp	r3, #0
   18748:	d157      	bne.n	187fa <iterate_string_chunks+0x14e>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   1874a:	2300      	movs	r3, #0
   1874c:	e04e      	b.n	187ec <iterate_string_chunks+0x140>
            *result = false;
   1874e:	2300      	movs	r3, #0
   18750:	702b      	strb	r3, [r5, #0]
   18752:	e7e5      	b.n	18720 <iterate_string_chunks+0x74>
                ++offset;
   18754:	9b02      	ldr	r3, [sp, #8]
   18756:	3301      	adds	r3, #1
   18758:	9302      	str	r3, [sp, #8]
                break;
   1875a:	e7e5      	b.n	18728 <iterate_string_chunks+0x7c>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   1875c:	2201      	movs	r2, #1
   1875e:	e023      	b.n	187a8 <iterate_string_chunks+0xfc>
                *result = false;
   18760:	2300      	movs	r3, #0
   18762:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   18764:	9b02      	ldr	r3, [sp, #8]
   18766:	9a01      	ldr	r2, [sp, #4]
   18768:	4413      	add	r3, r2
   1876a:	9302      	str	r3, [sp, #8]
            total = newTotal;
   1876c:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   18770:	6823      	ldr	r3, [r4, #0]
   18772:	685a      	ldr	r2, [r3, #4]
   18774:	9902      	ldr	r1, [sp, #8]
   18776:	428a      	cmp	r2, r1
   18778:	d030      	beq.n	187dc <iterate_string_chunks+0x130>
            val = value->parser->d->get8(value->parser->d, offset);
   1877a:	6818      	ldr	r0, [r3, #0]
   1877c:	6803      	ldr	r3, [r0, #0]
   1877e:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   18780:	28ff      	cmp	r0, #255	; 0xff
   18782:	d0e7      	beq.n	18754 <iterate_string_chunks+0xa8>
            if ((val & MajorTypeMask) != value->type)
   18784:	f020 001f 	bic.w	r0, r0, #31
   18788:	7ba3      	ldrb	r3, [r4, #14]
   1878a:	4298      	cmp	r0, r3
   1878c:	d129      	bne.n	187e2 <iterate_string_chunks+0x136>
            err = extract_length(value->parser, &offset, &chunkLen);
   1878e:	aa01      	add	r2, sp, #4
   18790:	a902      	add	r1, sp, #8
   18792:	6820      	ldr	r0, [r4, #0]
   18794:	f7ff ff3a 	bl	1860c <extract_length>
            if (err)
   18798:	4603      	mov	r3, r0
   1879a:	bb38      	cbnz	r0, 187ec <iterate_string_chunks+0x140>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   1879c:	9803      	ldr	r0, [sp, #12]
   1879e:	9b01      	ldr	r3, [sp, #4]
   187a0:	2200      	movs	r2, #0
   187a2:	eb10 0803 	adds.w	r8, r0, r3
   187a6:	d2d9      	bcs.n	1875c <iterate_string_chunks+0xb0>
   187a8:	b9f2      	cbnz	r2, 187e8 <iterate_string_chunks+0x13c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   187aa:	f8d4 c000 	ldr.w	ip, [r4]
   187ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
   187b2:	9a02      	ldr	r2, [sp, #8]
   187b4:	1a89      	subs	r1, r1, r2
   187b6:	428b      	cmp	r3, r1
   187b8:	d81c      	bhi.n	187f4 <iterate_string_chunks+0x148>
            if (*result && *buflen >= newTotal)
   187ba:	7829      	ldrb	r1, [r5, #0]
   187bc:	2900      	cmp	r1, #0
   187be:	d0cf      	beq.n	18760 <iterate_string_chunks+0xb4>
   187c0:	6831      	ldr	r1, [r6, #0]
   187c2:	4541      	cmp	r1, r8
   187c4:	d3cc      	bcc.n	18760 <iterate_string_chunks+0xb4>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   187c6:	eb09 0100 	add.w	r1, r9, r0
   187ca:	f8dc 0000 	ldr.w	r0, [ip]
   187ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   187d0:	47b8      	blx	r7
   187d2:	3800      	subs	r0, #0
   187d4:	bf18      	it	ne
   187d6:	2001      	movne	r0, #1
   187d8:	7028      	strb	r0, [r5, #0]
   187da:	e7c3      	b.n	18764 <iterate_string_chunks+0xb8>
                return CborErrorUnexpectedEOF;
   187dc:	f240 1301 	movw	r3, #257	; 0x101
   187e0:	e004      	b.n	187ec <iterate_string_chunks+0x140>
                return CborErrorIllegalType;
   187e2:	f44f 7382 	mov.w	r3, #260	; 0x104
   187e6:	e001      	b.n	187ec <iterate_string_chunks+0x140>
                return CborErrorDataTooLarge;
   187e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   187ec:	4618      	mov	r0, r3
   187ee:	b005      	add	sp, #20
   187f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   187f4:	f240 1301 	movw	r3, #257	; 0x101
   187f8:	e7f8      	b.n	187ec <iterate_string_chunks+0x140>
        *next = *value;
   187fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   187fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   18804:	9b02      	ldr	r3, [sp, #8]
   18806:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   18808:	4620      	mov	r0, r4
   1880a:	f7ff feda 	bl	185c2 <preparse_next_value>
   1880e:	4603      	mov	r3, r0
   18810:	e7ec      	b.n	187ec <iterate_string_chunks+0x140>
            return CborErrorUnexpectedEOF;
   18812:	f240 1301 	movw	r3, #257	; 0x101
   18816:	e7e9      	b.n	187ec <iterate_string_chunks+0x140>

00018818 <advance_internal>:
{
   18818:	b570      	push	{r4, r5, r6, lr}
   1881a:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   1881c:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1881e:	6830      	ldr	r0, [r6, #0]
   18820:	6803      	ldr	r3, [r0, #0]
   18822:	6861      	ldr	r1, [r4, #4]
   18824:	4798      	blx	r3
   18826:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   1882a:	6863      	ldr	r3, [r4, #4]
   1882c:	3301      	adds	r3, #1
   1882e:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   18830:	2817      	cmp	r0, #23
   18832:	d913      	bls.n	1885c <advance_internal+0x44>
    if (unlikely(additional_information > Value64Bit))
   18834:	281b      	cmp	r0, #27
   18836:	d838      	bhi.n	188aa <advance_internal+0x92>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   18838:	3818      	subs	r0, #24
   1883a:	2501      	movs	r5, #1
   1883c:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1883e:	6873      	ldr	r3, [r6, #4]
   18840:	6861      	ldr	r1, [r4, #4]
   18842:	1a5b      	subs	r3, r3, r1
   18844:	429d      	cmp	r5, r3
   18846:	d835      	bhi.n	188b4 <advance_internal+0x9c>
    } else if (bytesNeeded == 1) {
   18848:	2d01      	cmp	r5, #1
   1884a:	d00a      	beq.n	18862 <advance_internal+0x4a>
    } else if (bytesNeeded == 2) {
   1884c:	2d02      	cmp	r5, #2
   1884e:	d022      	beq.n	18896 <advance_internal+0x7e>
    } else if (bytesNeeded == 4) {
   18850:	2d04      	cmp	r5, #4
   18852:	d025      	beq.n	188a0 <advance_internal+0x88>
        *len =  p->d->get64(p->d, *offset);
   18854:	6830      	ldr	r0, [r6, #0]
   18856:	68c3      	ldr	r3, [r0, #12]
   18858:	4798      	blx	r3
   1885a:	e006      	b.n	1886a <advance_internal+0x52>
        *len = additional_information;
   1885c:	2300      	movs	r3, #0
   1885e:	4619      	mov	r1, r3
        return CborNoError;
   18860:	e007      	b.n	18872 <advance_internal+0x5a>
        *len = p->d->get8(p->d, *offset);
   18862:	6830      	ldr	r0, [r6, #0]
   18864:	6803      	ldr	r3, [r0, #0]
   18866:	4798      	blx	r3
   18868:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   1886a:	6863      	ldr	r3, [r4, #4]
   1886c:	442b      	add	r3, r5
   1886e:	6063      	str	r3, [r4, #4]
    return CborNoError;
   18870:	2300      	movs	r3, #0
    assert(err == CborNoError);
   18872:	bb23      	cbnz	r3, 188be <advance_internal+0xa6>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   18874:	7ba3      	ldrb	r3, [r4, #14]
   18876:	2b40      	cmp	r3, #64	; 0x40
   18878:	d001      	beq.n	1887e <advance_internal+0x66>
   1887a:	2b60      	cmp	r3, #96	; 0x60
   1887c:	d107      	bne.n	1888e <advance_internal+0x76>
        assert(length == (size_t)length);
   1887e:	bb21      	cbnz	r1, 188ca <advance_internal+0xb2>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   18880:	7be3      	ldrb	r3, [r4, #15]
   18882:	f013 0f04 	tst.w	r3, #4
   18886:	d126      	bne.n	188d6 <advance_internal+0xbe>
        it->offset += length;
   18888:	6863      	ldr	r3, [r4, #4]
   1888a:	4418      	add	r0, r3
   1888c:	6060      	str	r0, [r4, #4]
    return preparse_next_value(it);
   1888e:	4620      	mov	r0, r4
   18890:	f7ff fe97 	bl	185c2 <preparse_next_value>
}
   18894:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   18896:	6830      	ldr	r0, [r6, #0]
   18898:	6843      	ldr	r3, [r0, #4]
   1889a:	4798      	blx	r3
   1889c:	2100      	movs	r1, #0
   1889e:	e7e4      	b.n	1886a <advance_internal+0x52>
        *len =  p->d->get32(p->d, *offset);
   188a0:	6830      	ldr	r0, [r6, #0]
   188a2:	6883      	ldr	r3, [r0, #8]
   188a4:	4798      	blx	r3
   188a6:	2100      	movs	r1, #0
   188a8:	e7df      	b.n	1886a <advance_internal+0x52>
    *len = 1;
   188aa:	2001      	movs	r0, #1
   188ac:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   188ae:	f240 1305 	movw	r3, #261	; 0x105
   188b2:	e7de      	b.n	18872 <advance_internal+0x5a>
    *len = 1;
   188b4:	2001      	movs	r0, #1
   188b6:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   188b8:	f240 1301 	movw	r3, #257	; 0x101
   188bc:	e7d9      	b.n	18872 <advance_internal+0x5a>
    assert(err == CborNoError);
   188be:	2300      	movs	r3, #0
   188c0:	461a      	mov	r2, r3
   188c2:	4619      	mov	r1, r3
   188c4:	4618      	mov	r0, r3
   188c6:	f7f0 fc7d 	bl	91c4 <__assert_func>
        assert(length == (size_t)length);
   188ca:	2300      	movs	r3, #0
   188cc:	461a      	mov	r2, r3
   188ce:	4619      	mov	r1, r3
   188d0:	4618      	mov	r0, r3
   188d2:	f7f0 fc77 	bl	91c4 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   188d6:	2300      	movs	r3, #0
   188d8:	461a      	mov	r2, r3
   188da:	4619      	mov	r1, r3
   188dc:	4618      	mov	r0, r3
   188de:	f7f0 fc71 	bl	91c4 <__assert_func>

000188e2 <_cbor_value_decode_int64_internal>:
{
   188e2:	b510      	push	{r4, lr}
   188e4:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   188e6:	6803      	ldr	r3, [r0, #0]
   188e8:	6818      	ldr	r0, [r3, #0]
   188ea:	6803      	ldr	r3, [r0, #0]
   188ec:	6861      	ldr	r1, [r4, #4]
   188ee:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   188f0:	7be3      	ldrb	r3, [r4, #15]
   188f2:	f013 0f01 	tst.w	r3, #1
   188f6:	d104      	bne.n	18902 <_cbor_value_decode_int64_internal+0x20>
   188f8:	7ba3      	ldrb	r3, [r4, #14]
   188fa:	2bfa      	cmp	r3, #250	; 0xfa
   188fc:	d001      	beq.n	18902 <_cbor_value_decode_int64_internal+0x20>
   188fe:	2bfb      	cmp	r3, #251	; 0xfb
   18900:	d111      	bne.n	18926 <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   18902:	f000 031e 	and.w	r3, r0, #30
   18906:	2b1a      	cmp	r3, #26
   18908:	d113      	bne.n	18932 <_cbor_value_decode_int64_internal+0x50>
    if ((val & 1) == (Value32Bit & 1))
   1890a:	f010 0f01 	tst.w	r0, #1
   1890e:	d016      	beq.n	1893e <_cbor_value_decode_int64_internal+0x5c>
    assert((val & SmallValueMask) == Value64Bit);
   18910:	f000 001f 	and.w	r0, r0, #31
   18914:	281b      	cmp	r0, #27
   18916:	d11a      	bne.n	1894e <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   18918:	6823      	ldr	r3, [r4, #0]
   1891a:	6818      	ldr	r0, [r3, #0]
   1891c:	68c3      	ldr	r3, [r0, #12]
   1891e:	6861      	ldr	r1, [r4, #4]
   18920:	3101      	adds	r1, #1
   18922:	4798      	blx	r3
}
   18924:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   18926:	2300      	movs	r3, #0
   18928:	461a      	mov	r2, r3
   1892a:	4619      	mov	r1, r3
   1892c:	4618      	mov	r0, r3
   1892e:	f7f0 fc49 	bl	91c4 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   18932:	2300      	movs	r3, #0
   18934:	461a      	mov	r2, r3
   18936:	4619      	mov	r1, r3
   18938:	4618      	mov	r0, r3
   1893a:	f7f0 fc43 	bl	91c4 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1893e:	6823      	ldr	r3, [r4, #0]
   18940:	6818      	ldr	r0, [r3, #0]
   18942:	6883      	ldr	r3, [r0, #8]
   18944:	6861      	ldr	r1, [r4, #4]
   18946:	3101      	adds	r1, #1
   18948:	4798      	blx	r3
   1894a:	2100      	movs	r1, #0
   1894c:	e7ea      	b.n	18924 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   1894e:	2300      	movs	r3, #0
   18950:	461a      	mov	r2, r3
   18952:	4619      	mov	r1, r3
   18954:	4618      	mov	r0, r3
   18956:	f7f0 fc35 	bl	91c4 <__assert_func>

0001895a <cbor_parser_init>:
{
   1895a:	b510      	push	{r4, lr}
   1895c:	4604      	mov	r4, r0
   1895e:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   18960:	2300      	movs	r3, #0
   18962:	6013      	str	r3, [r2, #0]
   18964:	6053      	str	r3, [r2, #4]
   18966:	6093      	str	r3, [r2, #8]
    parser->d = d;
   18968:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   1896a:	69a4      	ldr	r4, [r4, #24]
   1896c:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   1896e:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   18970:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   18972:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   18974:	2301      	movs	r3, #1
   18976:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   18978:	f7ff fd89 	bl	1848e <preparse_value>
}
   1897c:	bd10      	pop	{r4, pc}

0001897e <cbor_value_enter_container>:
{
   1897e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18980:	4605      	mov	r5, r0
   18982:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   18984:	7b83      	ldrb	r3, [r0, #14]
   18986:	2b80      	cmp	r3, #128	; 0x80
   18988:	d021      	beq.n	189ce <cbor_value_enter_container+0x50>
   1898a:	2ba0      	cmp	r3, #160	; 0xa0
   1898c:	d01d      	beq.n	189ca <cbor_value_enter_container+0x4c>
   1898e:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   18990:	b1fb      	cbz	r3, 189d2 <cbor_value_enter_container+0x54>
    *recursed = *it;
   18992:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   18996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   1899a:	7beb      	ldrb	r3, [r5, #15]
   1899c:	f013 0f04 	tst.w	r3, #4
   189a0:	d01c      	beq.n	189dc <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
   189a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   189a6:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   189a8:	460b      	mov	r3, r1
   189aa:	3301      	adds	r3, #1
   189ac:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   189ae:	4620      	mov	r0, r4
   189b0:	f7ff fd6d 	bl	1848e <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   189b4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   189b8:	d106      	bne.n	189c8 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   189ba:	6863      	ldr	r3, [r4, #4]
   189bc:	3301      	adds	r3, #1
   189be:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   189c0:	23ff      	movs	r3, #255	; 0xff
   189c2:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   189c4:	2000      	movs	r0, #0
   189c6:	60a0      	str	r0, [r4, #8]
}
   189c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   189ca:	2301      	movs	r3, #1
   189cc:	e7e0      	b.n	18990 <cbor_value_enter_container+0x12>
   189ce:	2301      	movs	r3, #1
   189d0:	e7de      	b.n	18990 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   189d2:	461a      	mov	r2, r3
   189d4:	4619      	mov	r1, r3
   189d6:	4618      	mov	r0, r3
   189d8:	f7f0 fbf4 	bl	91c4 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   189dc:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   189de:	6838      	ldr	r0, [r7, #0]
   189e0:	6803      	ldr	r3, [r0, #0]
   189e2:	6861      	ldr	r1, [r4, #4]
   189e4:	4798      	blx	r3
   189e6:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   189ea:	6863      	ldr	r3, [r4, #4]
   189ec:	3301      	adds	r3, #1
   189ee:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   189f0:	2817      	cmp	r0, #23
   189f2:	d913      	bls.n	18a1c <cbor_value_enter_container+0x9e>
    if (unlikely(additional_information > Value64Bit))
   189f4:	281b      	cmp	r0, #27
   189f6:	d838      	bhi.n	18a6a <cbor_value_enter_container+0xec>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   189f8:	3818      	subs	r0, #24
   189fa:	2601      	movs	r6, #1
   189fc:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   189fe:	687b      	ldr	r3, [r7, #4]
   18a00:	6861      	ldr	r1, [r4, #4]
   18a02:	1a5b      	subs	r3, r3, r1
   18a04:	429e      	cmp	r6, r3
   18a06:	d835      	bhi.n	18a74 <cbor_value_enter_container+0xf6>
    } else if (bytesNeeded == 1) {
   18a08:	2e01      	cmp	r6, #1
   18a0a:	d00a      	beq.n	18a22 <cbor_value_enter_container+0xa4>
    } else if (bytesNeeded == 2) {
   18a0c:	2e02      	cmp	r6, #2
   18a0e:	d022      	beq.n	18a56 <cbor_value_enter_container+0xd8>
    } else if (bytesNeeded == 4) {
   18a10:	2e04      	cmp	r6, #4
   18a12:	d025      	beq.n	18a60 <cbor_value_enter_container+0xe2>
        *len =  p->d->get64(p->d, *offset);
   18a14:	6838      	ldr	r0, [r7, #0]
   18a16:	68c3      	ldr	r3, [r0, #12]
   18a18:	4798      	blx	r3
   18a1a:	e006      	b.n	18a2a <cbor_value_enter_container+0xac>
        *len = additional_information;
   18a1c:	2300      	movs	r3, #0
   18a1e:	4619      	mov	r1, r3
        return CborNoError;
   18a20:	e007      	b.n	18a32 <cbor_value_enter_container+0xb4>
        *len = p->d->get8(p->d, *offset);
   18a22:	6838      	ldr	r0, [r7, #0]
   18a24:	6803      	ldr	r3, [r0, #0]
   18a26:	4798      	blx	r3
   18a28:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   18a2a:	6863      	ldr	r3, [r4, #4]
   18a2c:	4433      	add	r3, r6
   18a2e:	6063      	str	r3, [r4, #4]
    return CborNoError;
   18a30:	2300      	movs	r3, #0
        assert(err == CborNoError);
   18a32:	bb23      	cbnz	r3, 18a7e <cbor_value_enter_container+0x100>
        recursed->remaining = (uint32_t)len;
   18a34:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   18a36:	bb41      	cbnz	r1, 18a8a <cbor_value_enter_container+0x10c>
   18a38:	2900      	cmp	r1, #0
   18a3a:	bf08      	it	eq
   18a3c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   18a40:	d023      	beq.n	18a8a <cbor_value_enter_container+0x10c>
        if (recursed->type == CborMapType) {
   18a42:	7ba2      	ldrb	r2, [r4, #14]
   18a44:	2aa0      	cmp	r2, #160	; 0xa0
   18a46:	d025      	beq.n	18a94 <cbor_value_enter_container+0x116>
        if (len != 0)
   18a48:	ea50 0301 	orrs.w	r3, r0, r1
   18a4c:	d0b8      	beq.n	189c0 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   18a4e:	4620      	mov	r0, r4
   18a50:	f7ff fd1d 	bl	1848e <preparse_value>
   18a54:	e7b8      	b.n	189c8 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   18a56:	6838      	ldr	r0, [r7, #0]
   18a58:	6843      	ldr	r3, [r0, #4]
   18a5a:	4798      	blx	r3
   18a5c:	2100      	movs	r1, #0
   18a5e:	e7e4      	b.n	18a2a <cbor_value_enter_container+0xac>
        *len =  p->d->get32(p->d, *offset);
   18a60:	6838      	ldr	r0, [r7, #0]
   18a62:	6883      	ldr	r3, [r0, #8]
   18a64:	4798      	blx	r3
   18a66:	2100      	movs	r1, #0
   18a68:	e7df      	b.n	18a2a <cbor_value_enter_container+0xac>
    *len = 1;
   18a6a:	2001      	movs	r0, #1
   18a6c:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   18a6e:	f240 1305 	movw	r3, #261	; 0x105
   18a72:	e7de      	b.n	18a32 <cbor_value_enter_container+0xb4>
    *len = 1;
   18a74:	2001      	movs	r0, #1
   18a76:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   18a78:	f240 1301 	movw	r3, #257	; 0x101
   18a7c:	e7d9      	b.n	18a32 <cbor_value_enter_container+0xb4>
        assert(err == CborNoError);
   18a7e:	2300      	movs	r3, #0
   18a80:	461a      	mov	r2, r3
   18a82:	4619      	mov	r1, r3
   18a84:	4618      	mov	r0, r3
   18a86:	f7f0 fb9d 	bl	91c4 <__assert_func>
            recursed->offset = it->offset;
   18a8a:	686b      	ldr	r3, [r5, #4]
   18a8c:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   18a8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18a92:	e799      	b.n	189c8 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   18a94:	2800      	cmp	r0, #0
   18a96:	db02      	blt.n	18a9e <cbor_value_enter_container+0x120>
            recursed->remaining *= 2;
   18a98:	0043      	lsls	r3, r0, #1
   18a9a:	60a3      	str	r3, [r4, #8]
   18a9c:	e7d4      	b.n	18a48 <cbor_value_enter_container+0xca>
                recursed->offset = it->offset;
   18a9e:	686b      	ldr	r3, [r5, #4]
   18aa0:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   18aa2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18aa6:	e78f      	b.n	189c8 <cbor_value_enter_container+0x4a>

00018aa8 <cbor_value_leave_container>:
{
   18aa8:	b508      	push	{r3, lr}
   18aaa:	7b83      	ldrb	r3, [r0, #14]
   18aac:	2b80      	cmp	r3, #128	; 0x80
   18aae:	d00d      	beq.n	18acc <cbor_value_leave_container+0x24>
   18ab0:	2ba0      	cmp	r3, #160	; 0xa0
   18ab2:	d009      	beq.n	18ac8 <cbor_value_leave_container+0x20>
   18ab4:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   18ab6:	b15b      	cbz	r3, 18ad0 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   18ab8:	7b8b      	ldrb	r3, [r1, #14]
   18aba:	2bff      	cmp	r3, #255	; 0xff
   18abc:	d10d      	bne.n	18ada <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
   18abe:	684b      	ldr	r3, [r1, #4]
   18ac0:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   18ac2:	f7ff fd7e 	bl	185c2 <preparse_next_value>
}
   18ac6:	bd08      	pop	{r3, pc}
   18ac8:	2301      	movs	r3, #1
   18aca:	e7f4      	b.n	18ab6 <cbor_value_leave_container+0xe>
   18acc:	2301      	movs	r3, #1
   18ace:	e7f2      	b.n	18ab6 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   18ad0:	461a      	mov	r2, r3
   18ad2:	4619      	mov	r1, r3
   18ad4:	4618      	mov	r0, r3
   18ad6:	f7f0 fb75 	bl	91c4 <__assert_func>
    assert(recursed->type == CborInvalidType);
   18ada:	2300      	movs	r3, #0
   18adc:	461a      	mov	r2, r3
   18ade:	4619      	mov	r1, r3
   18ae0:	4618      	mov	r0, r3
   18ae2:	f7f0 fb6f 	bl	91c4 <__assert_func>
	...

00018ae8 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   18ae8:	b500      	push	{lr}
   18aea:	b085      	sub	sp, #20
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   18aec:	468c      	mov	ip, r1
   18aee:	b181      	cbz	r1, 18b12 <_cbor_value_copy_string+0x2a>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   18af0:	6801      	ldr	r1, [r0, #0]
   18af2:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   18af4:	6949      	ldr	r1, [r1, #20]
   18af6:	9101      	str	r1, [sp, #4]
   18af8:	9300      	str	r3, [sp, #0]
   18afa:	f10d 030f 	add.w	r3, sp, #15
   18afe:	4661      	mov	r1, ip
   18b00:	f7ff fdd4 	bl	186ac <iterate_string_chunks>
    return err ? err :
   18b04:	b910      	cbnz	r0, 18b0c <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   18b06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   18b0a:	b123      	cbz	r3, 18b16 <_cbor_value_copy_string+0x2e>
}
   18b0c:	b005      	add	sp, #20
   18b0e:	f85d fb04 	ldr.w	pc, [sp], #4
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   18b12:	4902      	ldr	r1, [pc, #8]	; (18b1c <_cbor_value_copy_string+0x34>)
   18b14:	e7ef      	b.n	18af6 <_cbor_value_copy_string+0xe>
    return err ? err :
   18b16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18b1a:	e7f7      	b.n	18b0c <_cbor_value_copy_string+0x24>
   18b1c:	0001848b 	.word	0x0001848b

00018b20 <advance_recursive>:
{
   18b20:	b570      	push	{r4, r5, r6, lr}
   18b22:	b086      	sub	sp, #24
   18b24:	4604      	mov	r4, r0
   18b26:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   18b28:	7b86      	ldrb	r6, [r0, #14]
   18b2a:	4630      	mov	r0, r6
   18b2c:	f7ff fc9b 	bl	18466 <is_fixed_type>
   18b30:	b9c0      	cbnz	r0, 18b64 <advance_recursive+0x44>
   18b32:	2e80      	cmp	r6, #128	; 0x80
   18b34:	d01f      	beq.n	18b76 <advance_recursive+0x56>
   18b36:	2ea0      	cmp	r6, #160	; 0xa0
   18b38:	d01b      	beq.n	18b72 <advance_recursive+0x52>
   18b3a:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   18b3c:	b1eb      	cbz	r3, 18b7a <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   18b3e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   18b42:	d02b      	beq.n	18b9c <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   18b44:	a902      	add	r1, sp, #8
   18b46:	4620      	mov	r0, r4
   18b48:	f7ff ff19 	bl	1897e <cbor_value_enter_container>
    if (err)
   18b4c:	4603      	mov	r3, r0
   18b4e:	b968      	cbnz	r0, 18b6c <advance_recursive+0x4c>
{ return it->remaining == 0; }
   18b50:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   18b52:	b1eb      	cbz	r3, 18b90 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   18b54:	1c69      	adds	r1, r5, #1
   18b56:	a802      	add	r0, sp, #8
   18b58:	f7ff ffe2 	bl	18b20 <advance_recursive>
        if (err)
   18b5c:	4603      	mov	r3, r0
   18b5e:	2800      	cmp	r0, #0
   18b60:	d0f6      	beq.n	18b50 <advance_recursive+0x30>
   18b62:	e003      	b.n	18b6c <advance_recursive+0x4c>
        return advance_internal(it);
   18b64:	4620      	mov	r0, r4
   18b66:	f7ff fe57 	bl	18818 <advance_internal>
   18b6a:	4603      	mov	r3, r0
}
   18b6c:	4618      	mov	r0, r3
   18b6e:	b006      	add	sp, #24
   18b70:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   18b72:	2301      	movs	r3, #1
   18b74:	e7e2      	b.n	18b3c <advance_recursive+0x1c>
   18b76:	2301      	movs	r3, #1
   18b78:	e7e0      	b.n	18b3c <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   18b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b7e:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   18b80:	4623      	mov	r3, r4
   18b82:	aa01      	add	r2, sp, #4
   18b84:	2100      	movs	r1, #0
   18b86:	4620      	mov	r0, r4
   18b88:	f7ff ffae 	bl	18ae8 <_cbor_value_copy_string>
   18b8c:	4603      	mov	r3, r0
   18b8e:	e7ed      	b.n	18b6c <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   18b90:	a902      	add	r1, sp, #8
   18b92:	4620      	mov	r0, r4
   18b94:	f7ff ff88 	bl	18aa8 <cbor_value_leave_container>
   18b98:	4603      	mov	r3, r0
   18b9a:	e7e7      	b.n	18b6c <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   18b9c:	f240 4301 	movw	r3, #1025	; 0x401
   18ba0:	e7e4      	b.n	18b6c <advance_recursive+0x4c>

00018ba2 <cbor_value_advance>:
{
   18ba2:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   18ba4:	7b83      	ldrb	r3, [r0, #14]
   18ba6:	2bff      	cmp	r3, #255	; 0xff
   18ba8:	d005      	beq.n	18bb6 <cbor_value_advance+0x14>
    if (!it->remaining)
   18baa:	6883      	ldr	r3, [r0, #8]
   18bac:	b14b      	cbz	r3, 18bc2 <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
   18bae:	2100      	movs	r1, #0
   18bb0:	f7ff ffb6 	bl	18b20 <advance_recursive>
}
   18bb4:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   18bb6:	2300      	movs	r3, #0
   18bb8:	461a      	mov	r2, r3
   18bba:	4619      	mov	r1, r3
   18bbc:	4618      	mov	r0, r3
   18bbe:	f7f0 fb01 	bl	91c4 <__assert_func>
        return CborErrorAdvancePastEOF;
   18bc2:	2003      	movs	r0, #3
   18bc4:	e7f6      	b.n	18bb4 <cbor_value_advance+0x12>

00018bc6 <cbor_value_calculate_string_length>:
{
   18bc6:	b508      	push	{r3, lr}
   18bc8:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   18bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18bce:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   18bd0:	2300      	movs	r3, #0
   18bd2:	4619      	mov	r1, r3
   18bd4:	f7ff ff88 	bl	18ae8 <_cbor_value_copy_string>
}
   18bd8:	bd08      	pop	{r3, pc}

00018bda <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   18bda:	b538      	push	{r3, r4, r5, lr}
   18bdc:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   18bde:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   18be0:	2500      	movs	r5, #0
   18be2:	e000      	b.n	18be6 <fcb_free_sector_cnt+0xc>
   18be4:	3501      	adds	r5, #1
   18be6:	7963      	ldrb	r3, [r4, #5]
   18be8:	42ab      	cmp	r3, r5
   18bea:	dd06      	ble.n	18bfa <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   18bec:	4620      	mov	r0, r4
   18bee:	f000 fa97 	bl	19120 <fcb_getnext_area>
   18bf2:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   18bf4:	69a3      	ldr	r3, [r4, #24]
   18bf6:	4283      	cmp	r3, r0
   18bf8:	d1f4      	bne.n	18be4 <fcb_free_sector_cnt+0xa>
            break;
        }
    }
    return i;
}
   18bfa:	4628      	mov	r0, r5
   18bfc:	bd38      	pop	{r3, r4, r5, pc}

00018bfe <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   18bfe:	69c2      	ldr	r2, [r0, #28]
   18c00:	6983      	ldr	r3, [r0, #24]
   18c02:	429a      	cmp	r2, r3
   18c04:	d001      	beq.n	18c0a <fcb_is_empty+0xc>
   18c06:	2000      	movs	r0, #0
   18c08:	4770      	bx	lr
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
   18c0a:	6a03      	ldr	r3, [r0, #32]
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   18c0c:	2b08      	cmp	r3, #8
   18c0e:	d001      	beq.n	18c14 <fcb_is_empty+0x16>
   18c10:	2000      	movs	r0, #0
   18c12:	4770      	bx	lr
   18c14:	2001      	movs	r0, #1
}
   18c16:	4770      	bx	lr

00018c18 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   18c18:	297f      	cmp	r1, #127	; 0x7f
   18c1a:	d90a      	bls.n	18c32 <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   18c1c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   18c20:	4299      	cmp	r1, r3
   18c22:	d809      	bhi.n	18c38 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   18c24:	f061 037f 	orn	r3, r1, #127	; 0x7f
   18c28:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   18c2a:	09c9      	lsrs	r1, r1, #7
   18c2c:	7041      	strb	r1, [r0, #1]
        return 2;
   18c2e:	2002      	movs	r0, #2
   18c30:	4770      	bx	lr
        buf[0] = len;
   18c32:	7001      	strb	r1, [r0, #0]
        return 1;
   18c34:	2001      	movs	r0, #1
   18c36:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   18c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   18c3c:	4770      	bx	lr

00018c3e <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   18c3e:	7803      	ldrb	r3, [r0, #0]
   18c40:	f990 2000 	ldrsb.w	r2, [r0]
   18c44:	2a00      	cmp	r2, #0
   18c46:	db02      	blt.n	18c4e <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   18c48:	800b      	strh	r3, [r1, #0]
        rc = 1;
   18c4a:	2001      	movs	r0, #1
    }
    return rc;
}
   18c4c:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   18c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18c52:	7842      	ldrb	r2, [r0, #1]
   18c54:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   18c58:	800b      	strh	r3, [r1, #0]
        rc = 2;
   18c5a:	2002      	movs	r0, #2
   18c5c:	4770      	bx	lr

00018c5e <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   18c5e:	b500      	push	{lr}
   18c60:	b083      	sub	sp, #12
   18c62:	4603      	mov	r3, r0
   18c64:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   18c66:	6819      	ldr	r1, [r3, #0]
   18c68:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   18c6a:	791b      	ldrb	r3, [r3, #4]
   18c6c:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   18c70:	23ff      	movs	r3, #255	; 0xff
   18c72:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   18c76:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   18c7a:	2308      	movs	r3, #8
   18c7c:	466a      	mov	r2, sp
   18c7e:	2100      	movs	r1, #0
   18c80:	f7fb fa3c 	bl	140fc <flash_area_write>
    if (rc) {
   18c84:	b910      	cbnz	r0, 18c8c <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   18c86:	b003      	add	sp, #12
   18c88:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   18c8c:	f06f 0001 	mvn.w	r0, #1
   18c90:	e7f9      	b.n	18c86 <fcb_sector_hdr_init+0x28>

00018c92 <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   18c92:	b530      	push	{r4, r5, lr}
   18c94:	b083      	sub	sp, #12
   18c96:	4604      	mov	r4, r0
   18c98:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   18c9a:	4615      	mov	r5, r2
   18c9c:	b19a      	cbz	r2, 18cc6 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   18c9e:	2308      	movs	r3, #8
   18ca0:	462a      	mov	r2, r5
   18ca2:	2100      	movs	r1, #0
   18ca4:	f7fb fa6f 	bl	14186 <flash_area_read_is_empty>
    if (rc < 0) {
   18ca8:	1e03      	subs	r3, r0, #0
   18caa:	db0e      	blt.n	18cca <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   18cac:	2b01      	cmp	r3, #1
   18cae:	d00f      	beq.n	18cd0 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   18cb0:	682a      	ldr	r2, [r5, #0]
   18cb2:	6823      	ldr	r3, [r4, #0]
   18cb4:	429a      	cmp	r2, r3
   18cb6:	d10d      	bne.n	18cd4 <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   18cb8:	792a      	ldrb	r2, [r5, #4]
   18cba:	7923      	ldrb	r3, [r4, #4]
   18cbc:	429a      	cmp	r2, r3
   18cbe:	d10c      	bne.n	18cda <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   18cc0:	2001      	movs	r0, #1
}
   18cc2:	b003      	add	sp, #12
   18cc4:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   18cc6:	466d      	mov	r5, sp
   18cc8:	e7e9      	b.n	18c9e <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   18cca:	f06f 0001 	mvn.w	r0, #1
   18cce:	e7f8      	b.n	18cc2 <fcb_sector_hdr_read+0x30>
        return 0;
   18cd0:	2000      	movs	r0, #0
   18cd2:	e7f6      	b.n	18cc2 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   18cd4:	f06f 0006 	mvn.w	r0, #6
   18cd8:	e7f3      	b.n	18cc2 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   18cda:	f06f 0007 	mvn.w	r0, #7
   18cde:	e7f0      	b.n	18cc2 <fcb_sector_hdr_read+0x30>

00018ce0 <fcb_init>:
{
   18ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce4:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   18ce6:	6883      	ldr	r3, [r0, #8]
   18ce8:	2b00      	cmp	r3, #0
   18cea:	f000 8082 	beq.w	18df2 <fcb_init+0x112>
   18cee:	4606      	mov	r6, r0
   18cf0:	7943      	ldrb	r3, [r0, #5]
   18cf2:	7982      	ldrb	r2, [r0, #6]
   18cf4:	1a9b      	subs	r3, r3, r2
   18cf6:	2b00      	cmp	r3, #0
   18cf8:	dd7e      	ble.n	18df8 <fcb_init+0x118>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   18cfa:	f04f 0b00 	mov.w	fp, #0
   18cfe:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   18d02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   18d06:	46d1      	mov	r9, sl
    int max_align = 1;
   18d08:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   18d0c:	465f      	mov	r7, fp
   18d0e:	e00a      	b.n	18d26 <fcb_init+0x46>
            max_align = flash_area_align(fap);
   18d10:	4620      	mov	r0, r4
   18d12:	f7fb fa1b 	bl	1414c <flash_area_align>
   18d16:	4680      	mov	r8, r0
   18d18:	e012      	b.n	18d40 <fcb_init+0x60>
            oldest = newest = fda.fd_id;
   18d1a:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   18d1e:	46a3      	mov	fp, r4
   18d20:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   18d22:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   18d24:	3701      	adds	r7, #1
   18d26:	7973      	ldrb	r3, [r6, #5]
   18d28:	42bb      	cmp	r3, r7
   18d2a:	dd29      	ble.n	18d80 <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   18d2c:	68b4      	ldr	r4, [r6, #8]
   18d2e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   18d32:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   18d36:	4620      	mov	r0, r4
   18d38:	f7fb fa08 	bl	1414c <flash_area_align>
        if (align > max_align) {
   18d3c:	4580      	cmp	r8, r0
   18d3e:	dbe7      	blt.n	18d10 <fcb_init+0x30>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   18d40:	aa02      	add	r2, sp, #8
   18d42:	4621      	mov	r1, r4
   18d44:	4630      	mov	r0, r6
   18d46:	f7ff ffa4 	bl	18c92 <fcb_sector_hdr_read>
        if (rc < 0) {
   18d4a:	1e05      	subs	r5, r0, #0
   18d4c:	db3b      	blt.n	18dc6 <fcb_init+0xe6>
        if (rc == 0) {
   18d4e:	2d00      	cmp	r5, #0
   18d50:	d0e8      	beq.n	18d24 <fcb_init+0x44>
        if (oldest < 0) {
   18d52:	f1b9 0f00 	cmp.w	r9, #0
   18d56:	dbe0      	blt.n	18d1a <fcb_init+0x3a>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   18d58:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   18d5c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   18d60:	fa0f f38a 	sxth.w	r3, sl
   18d64:	1ad3      	subs	r3, r2, r3
   18d66:	2b00      	cmp	r3, #0
   18d68:	dd02      	ble.n	18d70 <fcb_init+0x90>
            newest = fda.fd_id;
   18d6a:	468a      	mov	sl, r1
            newest_fap = fap;
   18d6c:	46a3      	mov	fp, r4
   18d6e:	e7d9      	b.n	18d24 <fcb_init+0x44>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   18d70:	fa0f f389 	sxth.w	r3, r9
   18d74:	1a9a      	subs	r2, r3, r2
   18d76:	2a00      	cmp	r2, #0
   18d78:	ddd4      	ble.n	18d24 <fcb_init+0x44>
            oldest = fda.fd_id;
   18d7a:	4689      	mov	r9, r1
            oldest_fap = fap;
   18d7c:	9401      	str	r4, [sp, #4]
   18d7e:	e7d1      	b.n	18d24 <fcb_init+0x44>
    if (oldest < 0) {
   18d80:	f1b9 0f00 	cmp.w	r9, #0
   18d84:	db23      	blt.n	18dce <fcb_init+0xee>
    fcb->f_align = max_align;
   18d86:	fa5f f888 	uxtb.w	r8, r8
   18d8a:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   18d8e:	9b01      	ldr	r3, [sp, #4]
   18d90:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   18d92:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   18d96:	2308      	movs	r3, #8
   18d98:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   18d9a:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   18d9e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   18da2:	ea18 0505 	ands.w	r5, r8, r5
   18da6:	d11e      	bne.n	18de6 <fcb_init+0x106>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   18da8:	f106 011c 	add.w	r1, r6, #28
   18dac:	4630      	mov	r0, r6
   18dae:	f000 f993 	bl	190d8 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   18db2:	f110 0f03 	cmn.w	r0, #3
   18db6:	d002      	beq.n	18dbe <fcb_init+0xde>
        if (rc != 0) {
   18db8:	2800      	cmp	r0, #0
   18dba:	d0f5      	beq.n	18da8 <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   18dbc:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   18dbe:	f106 000c 	add.w	r0, r6, #12
   18dc2:	f7f1 ff4d 	bl	ac60 <os_mutex_init>
}
   18dc6:	4628      	mov	r0, r5
   18dc8:	b005      	add	sp, #20
   18dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   18dce:	68b3      	ldr	r3, [r6, #8]
   18dd0:	461c      	mov	r4, r3
   18dd2:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   18dd4:	2200      	movs	r2, #0
   18dd6:	4619      	mov	r1, r3
   18dd8:	4630      	mov	r0, r6
   18dda:	f7ff ff40 	bl	18c5e <fcb_sector_hdr_init>
        if (rc) {
   18dde:	4682      	mov	sl, r0
   18de0:	b968      	cbnz	r0, 18dfe <fcb_init+0x11e>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   18de2:	46a3      	mov	fp, r4
   18de4:	e7cf      	b.n	18d86 <fcb_init+0xa6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   18de6:	2300      	movs	r3, #0
   18de8:	461a      	mov	r2, r3
   18dea:	4619      	mov	r1, r3
   18dec:	4618      	mov	r0, r3
   18dee:	f7f0 f9e9 	bl	91c4 <__assert_func>
        return FCB_ERR_ARGS;
   18df2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18df6:	e7e6      	b.n	18dc6 <fcb_init+0xe6>
   18df8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18dfc:	e7e3      	b.n	18dc6 <fcb_init+0xe6>
            return rc;
   18dfe:	4605      	mov	r5, r0
   18e00:	e7e1      	b.n	18dc6 <fcb_init+0xe6>

00018e02 <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   18e02:	b538      	push	{r3, r4, r5, lr}
   18e04:	4604      	mov	r4, r0
    int rc;

    rc = 0;
   18e06:	2500      	movs	r5, #0
    while (!fcb_is_empty(fcb)) {
   18e08:	4620      	mov	r0, r4
   18e0a:	f7ff fef8 	bl	18bfe <fcb_is_empty>
   18e0e:	b928      	cbnz	r0, 18e1c <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   18e10:	4620      	mov	r0, r4
   18e12:	f000 f9ef 	bl	191f4 <fcb_rotate>
        if (rc) {
   18e16:	4605      	mov	r5, r0
   18e18:	2800      	cmp	r0, #0
   18e1a:	d0f5      	beq.n	18e08 <fcb_clear+0x6>
            break;
        }
    }
    return rc;
}
   18e1c:	4628      	mov	r0, r5
   18e1e:	bd38      	pop	{r3, r4, r5, pc}

00018e20 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   18e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e22:	4605      	mov	r5, r0
   18e24:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   18e26:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   18e28:	2400      	movs	r4, #0
    rfa = NULL;
   18e2a:	4626      	mov	r6, r4
   18e2c:	e006      	b.n	18e3c <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   18e2e:	69ab      	ldr	r3, [r5, #24]
   18e30:	428b      	cmp	r3, r1
   18e32:	d00b      	beq.n	18e4c <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   18e34:	1c63      	adds	r3, r4, #1
   18e36:	42bc      	cmp	r4, r7
   18e38:	da09      	bge.n	18e4e <fcb_new_area+0x2e>
   18e3a:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   18e3c:	4628      	mov	r0, r5
   18e3e:	f000 f96f 	bl	19120 <fcb_getnext_area>
   18e42:	4601      	mov	r1, r0
        if (!rfa) {
   18e44:	2e00      	cmp	r6, #0
   18e46:	d1f2      	bne.n	18e2e <fcb_new_area+0xe>
            rfa = fa;
   18e48:	4606      	mov	r6, r0
   18e4a:	e7f0      	b.n	18e2e <fcb_new_area+0xe>
            return NULL;
   18e4c:	2600      	movs	r6, #0
    return rfa;
}
   18e4e:	4630      	mov	r0, r6
   18e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018e52 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   18e52:	b538      	push	{r3, r4, r5, lr}
   18e54:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   18e56:	2100      	movs	r1, #0
   18e58:	f7ff ffe2 	bl	18e20 <fcb_new_area>
    if (!fa) {
   18e5c:	b178      	cbz	r0, 18e7e <fcb_append_to_scratch+0x2c>
   18e5e:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   18e60:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   18e62:	3201      	adds	r2, #1
   18e64:	b292      	uxth	r2, r2
   18e66:	4601      	mov	r1, r0
   18e68:	4620      	mov	r0, r4
   18e6a:	f7ff fef8 	bl	18c5e <fcb_sector_hdr_init>
    if (rc) {
   18e6e:	b928      	cbnz	r0, 18e7c <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   18e70:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   18e72:	2308      	movs	r3, #8
   18e74:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   18e76:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   18e78:	3301      	adds	r3, #1
   18e7a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   18e7c:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   18e7e:	f06f 0003 	mvn.w	r0, #3
   18e82:	e7fb      	b.n	18e7c <fcb_append_to_scratch+0x2a>

00018e84 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   18e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e88:	b082      	sub	sp, #8
   18e8a:	4605      	mov	r5, r0
   18e8c:	460c      	mov	r4, r1
   18e8e:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   18e90:	a801      	add	r0, sp, #4
   18e92:	f7ff fec1 	bl	18c18 <fcb_put_len>
    if (cnt < 0) {
   18e96:	1e06      	subs	r6, r0, #0
   18e98:	db58      	blt.n	18f4c <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   18e9a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   18e9e:	2b01      	cmp	r3, #1
   18ea0:	d933      	bls.n	18f0a <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   18ea2:	1e58      	subs	r0, r3, #1
   18ea4:	fa10 f686 	uxtah	r6, r0, r6
   18ea8:	4258      	negs	r0, r3
   18eaa:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   18eac:	2b01      	cmp	r3, #1
   18eae:	d903      	bls.n	18eb8 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   18eb0:	1e59      	subs	r1, r3, #1
   18eb2:	440c      	add	r4, r1
   18eb4:	4259      	negs	r1, r3
   18eb6:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   18eb8:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   18eba:	2b01      	cmp	r3, #1
   18ebc:	d927      	bls.n	18f0e <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   18ebe:	425c      	negs	r4, r3
   18ec0:	401c      	ands	r4, r3
   18ec2:	440c      	add	r4, r1
   18ec4:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   18ec6:	f105 080c 	add.w	r8, r5, #12
   18eca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18ece:	4640      	mov	r0, r8
   18ed0:	f7f1 ff2c 	bl	ad2c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   18ed4:	b108      	cbz	r0, 18eda <fcb_append+0x56>
   18ed6:	2809      	cmp	r0, #9
   18ed8:	d14e      	bne.n	18f78 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   18eda:	6a2b      	ldr	r3, [r5, #32]
   18edc:	4423      	add	r3, r4
   18ede:	46b1      	mov	r9, r6
   18ee0:	441e      	add	r6, r3
   18ee2:	69eb      	ldr	r3, [r5, #28]
   18ee4:	689b      	ldr	r3, [r3, #8]
   18ee6:	429e      	cmp	r6, r3
   18ee8:	d923      	bls.n	18f32 <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   18eea:	79a9      	ldrb	r1, [r5, #6]
   18eec:	4628      	mov	r0, r5
   18eee:	f7ff ff97 	bl	18e20 <fcb_new_area>
        if (!fa || (fa->fa_size <
   18ef2:	4682      	mov	sl, r0
   18ef4:	2800      	cmp	r0, #0
   18ef6:	d03c      	beq.n	18f72 <fcb_append+0xee>
   18ef8:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   18efa:	eb04 0309 	add.w	r3, r4, r9
   18efe:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   18f00:	429a      	cmp	r2, r3
   18f02:	d206      	bcs.n	18f12 <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   18f04:	f06f 0603 	mvn.w	r6, #3
   18f08:	e01d      	b.n	18f46 <fcb_append+0xc2>
        return len;
   18f0a:	b2b6      	uxth	r6, r6
   18f0c:	e7ce      	b.n	18eac <fcb_append+0x28>
   18f0e:	2401      	movs	r4, #1
   18f10:	e7d7      	b.n	18ec2 <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   18f12:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   18f14:	3201      	adds	r2, #1
   18f16:	b292      	uxth	r2, r2
   18f18:	4601      	mov	r1, r0
   18f1a:	4628      	mov	r0, r5
   18f1c:	f7ff fe9f 	bl	18c5e <fcb_sector_hdr_init>
        if (rc) {
   18f20:	4606      	mov	r6, r0
   18f22:	b980      	cbnz	r0, 18f46 <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   18f24:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   18f28:	2308      	movs	r3, #8
   18f2a:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   18f2c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   18f2e:	3301      	adds	r3, #1
   18f30:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   18f32:	464b      	mov	r3, r9
   18f34:	aa01      	add	r2, sp, #4
   18f36:	6a29      	ldr	r1, [r5, #32]
   18f38:	69e8      	ldr	r0, [r5, #28]
   18f3a:	f7fb f8df 	bl	140fc <flash_area_write>
    if (rc) {
   18f3e:	4606      	mov	r6, r0
   18f40:	b140      	cbz	r0, 18f54 <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   18f42:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   18f46:	4640      	mov	r0, r8
   18f48:	f7f1 fe94 	bl	ac74 <os_mutex_release>
    return rc;
}
   18f4c:	4630      	mov	r0, r6
   18f4e:	b002      	add	sp, #8
   18f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   18f54:	69eb      	ldr	r3, [r5, #28]
   18f56:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   18f58:	6a2b      	ldr	r3, [r5, #32]
   18f5a:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   18f5c:	444b      	add	r3, r9
   18f5e:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   18f60:	4423      	add	r3, r4
   18f62:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   18f64:	68bb      	ldr	r3, [r7, #8]
   18f66:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   18f68:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   18f6a:	4640      	mov	r0, r8
   18f6c:	f7f1 fe82 	bl	ac74 <os_mutex_release>
    return FCB_OK;
   18f70:	e7ec      	b.n	18f4c <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   18f72:	f06f 0603 	mvn.w	r6, #3
   18f76:	e7e6      	b.n	18f46 <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   18f78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18f7c:	e7e6      	b.n	18f4c <fcb_append+0xc8>

00018f7e <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   18f7e:	b530      	push	{r4, r5, lr}
   18f80:	b083      	sub	sp, #12
   18f82:	4605      	mov	r5, r0
   18f84:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   18f86:	f10d 0207 	add.w	r2, sp, #7
   18f8a:	f000 f818 	bl	18fbe <fcb_elem_crc8>
    if (rc) {
   18f8e:	b988      	cbnz	r0, 18fb4 <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   18f90:	68a0      	ldr	r0, [r4, #8]
   18f92:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   18f94:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   18f98:	2b01      	cmp	r3, #1
   18f9a:	d903      	bls.n	18fa4 <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   18f9c:	1e5a      	subs	r2, r3, #1
   18f9e:	4411      	add	r1, r2
   18fa0:	425b      	negs	r3, r3
   18fa2:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   18fa4:	2301      	movs	r3, #1
   18fa6:	f10d 0207 	add.w	r2, sp, #7
   18faa:	4401      	add	r1, r0
   18fac:	6820      	ldr	r0, [r4, #0]
   18fae:	f7fb f8a5 	bl	140fc <flash_area_write>
    if (rc) {
   18fb2:	b908      	cbnz	r0, 18fb8 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   18fb4:	b003      	add	sp, #12
   18fb6:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   18fb8:	f06f 0001 	mvn.w	r0, #1
   18fbc:	e7fa      	b.n	18fb4 <fcb_append_finish+0x36>

00018fbe <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   18fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18fc2:	b08b      	sub	sp, #44	; 0x2c
   18fc4:	4605      	mov	r5, r0
   18fc6:	4688      	mov	r8, r1
   18fc8:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   18fca:	6849      	ldr	r1, [r1, #4]
   18fcc:	1c8a      	adds	r2, r1, #2
   18fce:	f8d8 0000 	ldr.w	r0, [r8]
   18fd2:	6883      	ldr	r3, [r0, #8]
   18fd4:	429a      	cmp	r2, r3
   18fd6:	d84a      	bhi.n	1906e <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   18fd8:	2302      	movs	r3, #2
   18fda:	aa02      	add	r2, sp, #8
   18fdc:	f7fb f8d3 	bl	14186 <flash_area_read_is_empty>
    if (rc < 0) {
   18fe0:	1e03      	subs	r3, r0, #0
   18fe2:	db47      	blt.n	19074 <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   18fe4:	2b01      	cmp	r3, #1
   18fe6:	d048      	beq.n	1907a <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   18fe8:	f10d 0106 	add.w	r1, sp, #6
   18fec:	a802      	add	r0, sp, #8
   18fee:	f7ff fe26 	bl	18c3e <fcb_get_len>
   18ff2:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   18ff4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   18ff8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   18ffc:	2b01      	cmp	r3, #1
   18ffe:	d918      	bls.n	19032 <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19000:	1e5a      	subs	r2, r3, #1
   19002:	fa12 f280 	uxtah	r2, r2, r0
   19006:	425b      	negs	r3, r3
   19008:	4013      	ands	r3, r2
   1900a:	440b      	add	r3, r1
   1900c:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   19010:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19014:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   19018:	f009 fc80 	bl	2291c <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   1901c:	4622      	mov	r2, r4
   1901e:	a902      	add	r1, sp, #8
   19020:	f009 fc7e 	bl	22920 <crc8_calc>
   19024:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   19026:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   1902a:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   1902e:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   19030:	e010      	b.n	19054 <fcb_elem_crc8+0x96>
        return len;
   19032:	b283      	uxth	r3, r0
   19034:	e7e9      	b.n	1900a <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   19036:	4623      	mov	r3, r4
   19038:	aa02      	add	r2, sp, #8
   1903a:	4629      	mov	r1, r5
   1903c:	f8d8 0000 	ldr.w	r0, [r8]
   19040:	f7fb f848 	bl	140d4 <flash_area_read>
        if (rc) {
   19044:	b9e0      	cbnz	r0, 19080 <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   19046:	4622      	mov	r2, r4
   19048:	a902      	add	r1, sp, #8
   1904a:	4630      	mov	r0, r6
   1904c:	f009 fc68 	bl	22920 <crc8_calc>
   19050:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   19052:	4425      	add	r5, r4
   19054:	42bd      	cmp	r5, r7
   19056:	d204      	bcs.n	19062 <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   19058:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   1905a:	2c20      	cmp	r4, #32
   1905c:	d9eb      	bls.n	19036 <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   1905e:	2420      	movs	r4, #32
   19060:	e7e9      	b.n	19036 <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   19062:	f889 6000 	strb.w	r6, [r9]

    return 0;
   19066:	2000      	movs	r0, #0
}
   19068:	b00b      	add	sp, #44	; 0x2c
   1906a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   1906e:	f06f 0002 	mvn.w	r0, #2
   19072:	e7f9      	b.n	19068 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   19074:	f06f 0001 	mvn.w	r0, #1
   19078:	e7f6      	b.n	19068 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   1907a:	f06f 0002 	mvn.w	r0, #2
   1907e:	e7f3      	b.n	19068 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   19080:	f06f 0001 	mvn.w	r0, #1
   19084:	e7f0      	b.n	19068 <fcb_elem_crc8+0xaa>

00019086 <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   19086:	b530      	push	{r4, r5, lr}
   19088:	b083      	sub	sp, #12
   1908a:	4605      	mov	r5, r0
   1908c:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1908e:	f10d 0207 	add.w	r2, sp, #7
   19092:	f7ff ff94 	bl	18fbe <fcb_elem_crc8>
    if (rc) {
   19096:	b9b8      	cbnz	r0, 190c8 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   19098:	68a0      	ldr	r0, [r4, #8]
   1909a:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   1909c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   190a0:	2b01      	cmp	r3, #1
   190a2:	d903      	bls.n	190ac <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   190a4:	1e5a      	subs	r2, r3, #1
   190a6:	4411      	add	r1, r2
   190a8:	425b      	negs	r3, r3
   190aa:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   190ac:	2301      	movs	r3, #1
   190ae:	f10d 0206 	add.w	r2, sp, #6
   190b2:	4401      	add	r1, r0
   190b4:	6820      	ldr	r0, [r4, #0]
   190b6:	f7fb f80d 	bl	140d4 <flash_area_read>
    if (rc) {
   190ba:	b938      	cbnz	r0, 190cc <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   190bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   190c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   190c4:	429a      	cmp	r2, r3
   190c6:	d104      	bne.n	190d2 <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   190c8:	b003      	add	sp, #12
   190ca:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   190cc:	f06f 0001 	mvn.w	r0, #1
   190d0:	e7fa      	b.n	190c8 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   190d2:	f06f 0005 	mvn.w	r0, #5
   190d6:	e7f7      	b.n	190c8 <fcb_elem_info+0x42>

000190d8 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   190d8:	b570      	push	{r4, r5, r6, lr}
   190da:	4606      	mov	r6, r0
   190dc:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   190de:	f7ff ffd2 	bl	19086 <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   190e2:	b170      	cbz	r0, 19102 <fcb_getnext_in_area+0x2a>
   190e4:	f110 0f06 	cmn.w	r0, #6
   190e8:	d00b      	beq.n	19102 <fcb_getnext_in_area+0x2a>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   190ea:	bd70      	pop	{r4, r5, r6, pc}
   190ec:	4259      	negs	r1, r3
   190ee:	400b      	ands	r3, r1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   190f0:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   190f2:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   190f4:	4629      	mov	r1, r5
   190f6:	4630      	mov	r0, r6
   190f8:	f7ff ffc5 	bl	19086 <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   190fc:	f110 0f06 	cmn.w	r0, #6
   19100:	d1f3      	bne.n	190ea <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   19102:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   19104:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   19106:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   1910a:	2b01      	cmp	r3, #1
   1910c:	d903      	bls.n	19116 <fcb_getnext_in_area+0x3e>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1910e:	1e59      	subs	r1, r3, #1
   19110:	440a      	add	r2, r1
   19112:	4259      	negs	r1, r3
   19114:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   19116:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   19118:	2b01      	cmp	r3, #1
   1911a:	d8e7      	bhi.n	190ec <fcb_getnext_in_area+0x14>
        return len;
   1911c:	2301      	movs	r3, #1
   1911e:	e7e7      	b.n	190f0 <fcb_getnext_in_area+0x18>

00019120 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   19120:	4603      	mov	r3, r0
    fap++;
   19122:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   19124:	6880      	ldr	r0, [r0, #8]
   19126:	795b      	ldrb	r3, [r3, #5]
   19128:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1912c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   19130:	428b      	cmp	r3, r1
   19132:	d900      	bls.n	19136 <fcb_getnext_area+0x16>
    fap++;
   19134:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   19136:	4770      	bx	lr

00019138 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   19138:	b538      	push	{r3, r4, r5, lr}
   1913a:	4605      	mov	r5, r0
   1913c:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   1913e:	680b      	ldr	r3, [r1, #0]
   19140:	b313      	cbz	r3, 19188 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   19142:	6863      	ldr	r3, [r4, #4]
   19144:	bb1b      	cbnz	r3, 1918e <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   19146:	2308      	movs	r3, #8
   19148:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   1914a:	4621      	mov	r1, r4
   1914c:	4628      	mov	r0, r5
   1914e:	f7ff ff9a 	bl	19086 <fcb_elem_info>
   19152:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   19154:	f113 0f06 	cmn.w	r3, #6
   19158:	d01f      	beq.n	1919a <fcb_getnext_nolock+0x62>
   1915a:	b19b      	cbz	r3, 19184 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   1915c:	6821      	ldr	r1, [r4, #0]
   1915e:	69eb      	ldr	r3, [r5, #28]
   19160:	4299      	cmp	r1, r3
   19162:	d02a      	beq.n	191ba <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   19164:	4628      	mov	r0, r5
   19166:	f7ff ffdb 	bl	19120 <fcb_getnext_area>
   1916a:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1916c:	2308      	movs	r3, #8
   1916e:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   19170:	4621      	mov	r1, r4
   19172:	4628      	mov	r0, r5
   19174:	f7ff ff87 	bl	19086 <fcb_elem_info>
   19178:	4603      	mov	r3, r0
            switch (rc) {
   1917a:	f110 0f06 	cmn.w	r0, #6
   1917e:	d00c      	beq.n	1919a <fcb_getnext_nolock+0x62>
   19180:	2800      	cmp	r0, #0
   19182:	d1eb      	bne.n	1915c <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   19184:	4618      	mov	r0, r3
   19186:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   19188:	6983      	ldr	r3, [r0, #24]
   1918a:	600b      	str	r3, [r1, #0]
   1918c:	e7d9      	b.n	19142 <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   1918e:	4621      	mov	r1, r4
   19190:	4628      	mov	r0, r5
   19192:	f7ff ffa1 	bl	190d8 <fcb_getnext_in_area>
   19196:	4603      	mov	r3, r0
   19198:	e7dc      	b.n	19154 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   1919a:	f113 0f06 	cmn.w	r3, #6
   1919e:	d10a      	bne.n	191b6 <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   191a0:	4621      	mov	r1, r4
   191a2:	4628      	mov	r0, r5
   191a4:	f7ff ff98 	bl	190d8 <fcb_getnext_in_area>
        if (rc == 0) {
   191a8:	4603      	mov	r3, r0
   191aa:	2800      	cmp	r0, #0
   191ac:	d0ea      	beq.n	19184 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   191ae:	f110 0f06 	cmn.w	r0, #6
   191b2:	d0f2      	beq.n	1919a <fcb_getnext_nolock+0x62>
next_sector:
   191b4:	e7d2      	b.n	1915c <fcb_getnext_nolock+0x24>
    return 0;
   191b6:	2300      	movs	r3, #0
   191b8:	e7e4      	b.n	19184 <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   191ba:	f06f 0302 	mvn.w	r3, #2
   191be:	e7e1      	b.n	19184 <fcb_getnext_nolock+0x4c>

000191c0 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   191c0:	b570      	push	{r4, r5, r6, lr}
   191c2:	4604      	mov	r4, r0
   191c4:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   191c6:	f100 060c 	add.w	r6, r0, #12
   191ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   191ce:	4630      	mov	r0, r6
   191d0:	f7f1 fdac 	bl	ad2c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   191d4:	b108      	cbz	r0, 191da <fcb_getnext+0x1a>
   191d6:	2809      	cmp	r0, #9
   191d8:	d109      	bne.n	191ee <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   191da:	4629      	mov	r1, r5
   191dc:	4620      	mov	r0, r4
   191de:	f7ff ffab 	bl	19138 <fcb_getnext_nolock>
   191e2:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   191e4:	4630      	mov	r0, r6
   191e6:	f7f1 fd45 	bl	ac74 <os_mutex_release>

    return rc;
}
   191ea:	4620      	mov	r0, r4
   191ec:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   191ee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   191f2:	e7fa      	b.n	191ea <fcb_getnext+0x2a>

000191f4 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   191f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191f6:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   191f8:	f100 050c 	add.w	r5, r0, #12
   191fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19200:	4628      	mov	r0, r5
   19202:	f7f1 fd93 	bl	ad2c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   19206:	b108      	cbz	r0, 1920c <fcb_rotate+0x18>
   19208:	2809      	cmp	r0, #9
   1920a:	d12c      	bne.n	19266 <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   1920c:	69a0      	ldr	r0, [r4, #24]
   1920e:	6882      	ldr	r2, [r0, #8]
   19210:	2100      	movs	r1, #0
   19212:	f7fa ff87 	bl	14124 <flash_area_erase>
    if (rc) {
   19216:	4606      	mov	r6, r0
   19218:	bb10      	cbnz	r0, 19260 <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   1921a:	69a1      	ldr	r1, [r4, #24]
   1921c:	69e3      	ldr	r3, [r4, #28]
   1921e:	4299      	cmp	r1, r3
   19220:	d009      	beq.n	19236 <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   19222:	69a1      	ldr	r1, [r4, #24]
   19224:	4620      	mov	r0, r4
   19226:	f7ff ff7b 	bl	19120 <fcb_getnext_area>
   1922a:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   1922c:	4628      	mov	r0, r5
   1922e:	f7f1 fd21 	bl	ac74 <os_mutex_release>
    return rc;
}
   19232:	4630      	mov	r0, r6
   19234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   19236:	4620      	mov	r0, r4
   19238:	f7ff ff72 	bl	19120 <fcb_getnext_area>
   1923c:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   1923e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   19240:	3201      	adds	r2, #1
   19242:	b292      	uxth	r2, r2
   19244:	4601      	mov	r1, r0
   19246:	4620      	mov	r0, r4
   19248:	f7ff fd09 	bl	18c5e <fcb_sector_hdr_init>
        if (rc) {
   1924c:	4606      	mov	r6, r0
   1924e:	2800      	cmp	r0, #0
   19250:	d1ec      	bne.n	1922c <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   19252:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   19254:	2308      	movs	r3, #8
   19256:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   19258:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1925a:	3301      	adds	r3, #1
   1925c:	85a3      	strh	r3, [r4, #44]	; 0x2c
   1925e:	e7e0      	b.n	19222 <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   19260:	f06f 0601 	mvn.w	r6, #1
   19264:	e7e2      	b.n	1922c <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   19266:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1926a:	e7e2      	b.n	19232 <fcb_rotate+0x3e>

0001926c <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   1926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19270:	b084      	sub	sp, #16
   19272:	4606      	mov	r6, r0
   19274:	460d      	mov	r5, r1
   19276:	4617      	mov	r7, r2
   19278:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   1927a:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   1927c:	2300      	movs	r3, #0
   1927e:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   19280:	f100 040c 	add.w	r4, r0, #12
   19284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19288:	4620      	mov	r0, r4
   1928a:	f7f1 fd4f 	bl	ad2c <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1928e:	b170      	cbz	r0, 192ae <fcb_walk+0x42>
   19290:	2809      	cmp	r0, #9
   19292:	d00c      	beq.n	192ae <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   19294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19298:	e01e      	b.n	192d8 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   1929a:	4641      	mov	r1, r8
   1929c:	4668      	mov	r0, sp
   1929e:	47b8      	blx	r7
        if (rc) {
   192a0:	4603      	mov	r3, r0
   192a2:	b9c8      	cbnz	r0, 192d8 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   192a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   192a8:	4620      	mov	r0, r4
   192aa:	f7f1 fd3f 	bl	ad2c <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   192ae:	4669      	mov	r1, sp
   192b0:	4630      	mov	r0, r6
   192b2:	f7ff ff41 	bl	19138 <fcb_getnext_nolock>
   192b6:	f110 0f03 	cmn.w	r0, #3
   192ba:	d009      	beq.n	192d0 <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   192bc:	4620      	mov	r0, r4
   192be:	f7f1 fcd9 	bl	ac74 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   192c2:	2d00      	cmp	r5, #0
   192c4:	d0e9      	beq.n	1929a <fcb_walk+0x2e>
   192c6:	9800      	ldr	r0, [sp, #0]
   192c8:	42a8      	cmp	r0, r5
   192ca:	d0e6      	beq.n	1929a <fcb_walk+0x2e>
            return 0;
   192cc:	2300      	movs	r3, #0
   192ce:	e003      	b.n	192d8 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   192d0:	4620      	mov	r0, r4
   192d2:	f7f1 fccf 	bl	ac74 <os_mutex_release>
    return 0;
   192d6:	2300      	movs	r3, #0
}
   192d8:	4618      	mov	r0, r3
   192da:	b004      	add	sp, #16
   192dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000192e0 <hal_bsp_flash_dev>:


const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    switch (id) {
   192e0:	b908      	cbnz	r0, 192e6 <hal_bsp_flash_dev+0x6>
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
   192e2:	4802      	ldr	r0, [pc, #8]	; (192ec <hal_bsp_flash_dev+0xc>)
   192e4:	4770      	bx	lr
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   192e6:	2000      	movs	r0, #0
    }
}
   192e8:	4770      	bx	lr
   192ea:	bf00      	nop
   192ec:	000273d8 	.word	0x000273d8

000192f0 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   192f0:	b500      	push	{lr}
   192f2:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   192f4:	f7ee ff82 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   192f8:	f005 fa80 	bl	1e7fc <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   192fc:	2101      	movs	r1, #1
   192fe:	4811      	ldr	r0, [pc, #68]	; (19344 <hal_bsp_init+0x54>)
   19300:	f7f0 feba 	bl	a078 <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   19304:	b988      	cbnz	r0, 1932a <hal_bsp_init+0x3a>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   19306:	2000      	movs	r0, #0
   19308:	f001 f80c 	bl	1a324 <hal_dw1000_inst>
   1930c:	4b0e      	ldr	r3, [pc, #56]	; (19348 <hal_bsp_init+0x58>)
   1930e:	6018      	str	r0, [r3, #0]
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   19310:	4b0e      	ldr	r3, [pc, #56]	; (1934c <hal_bsp_init+0x5c>)
   19312:	9301      	str	r3, [sp, #4]
   19314:	4b0e      	ldr	r3, [pc, #56]	; (19350 <hal_bsp_init+0x60>)
   19316:	9300      	str	r3, [sp, #0]
   19318:	2300      	movs	r3, #0
   1931a:	2201      	movs	r2, #1
   1931c:	490d      	ldr	r1, [pc, #52]	; (19354 <hal_bsp_init+0x64>)
   1931e:	f7f0 fa29 	bl	9774 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   19322:	b940      	cbnz	r0, 19336 <hal_bsp_init+0x46>
#endif
}
   19324:	b003      	add	sp, #12
   19326:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1932a:	2300      	movs	r3, #0
   1932c:	461a      	mov	r2, r3
   1932e:	4619      	mov	r1, r3
   19330:	4618      	mov	r0, r3
   19332:	f7ef ff47 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19336:	2300      	movs	r3, #0
   19338:	461a      	mov	r2, r3
   1933a:	4619      	mov	r1, r3
   1933c:	4618      	mov	r0, r3
   1933e:	f7ef ff41 	bl	91c4 <__assert_func>
   19342:	bf00      	nop
   19344:	20004bdc 	.word	0x20004bdc
   19348:	20004bd8 	.word	0x20004bd8
   1934c:	00026dd4 	.word	0x00026dd4
   19350:	0001a15d 	.word	0x0001a15d
   19354:	00026dc8 	.word	0x00026dc8

00019358 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1935c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 19500 <SEGGER_RTT_WriteNoLock+0x1a8>
   19360:	eb00 0640 	add.w	r6, r0, r0, lsl #1
   19364:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19368:	b083      	sub	sp, #12
  switch (pRing->Flags) {
   1936a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
   1936c:	2f01      	cmp	r7, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1936e:	4680      	mov	r8, r0
   19370:	468b      	mov	fp, r1
   19372:	4692      	mov	sl, r2
  switch (pRing->Flags) {
   19374:	ea4f 0440 	mov.w	r4, r0, lsl #1
   19378:	d007      	beq.n	1938a <SEGGER_RTT_WriteNoLock+0x32>
   1937a:	2f02      	cmp	r7, #2
   1937c:	d049      	beq.n	19412 <SEGGER_RTT_WriteNoLock+0xba>
   1937e:	b33f      	cbz	r7, 193d0 <SEGGER_RTT_WriteNoLock+0x78>
   19380:	2700      	movs	r7, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   19382:	4638      	mov	r0, r7
   19384:	b003      	add	sp, #12
   19386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   1938a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   1938c:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   1938e:	42af      	cmp	r7, r5
   19390:	d97a      	bls.n	19488 <SEGGER_RTT_WriteNoLock+0x130>
    r = RdOff - WrOff - 1u;
   19392:	3f01      	subs	r7, #1
   19394:	1b7f      	subs	r7, r7, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   19396:	6a36      	ldr	r6, [r6, #32]
    Status = Avail < NumBytes ? Avail : NumBytes;
   19398:	4557      	cmp	r7, sl
   1939a:	bf28      	it	cs
   1939c:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   1939e:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   193a0:	4297      	cmp	r7, r2
   193a2:	d27b      	bcs.n	1949c <SEGGER_RTT_WriteNoLock+0x144>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   193a4:	f108 0301 	add.w	r3, r8, #1
   193a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   193ac:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
   193b0:	4659      	mov	r1, fp
   193b2:	6858      	ldr	r0, [r3, #4]
   193b4:	463a      	mov	r2, r7
   193b6:	4428      	add	r0, r5
   193b8:	f7f7 f962 	bl	10680 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   193bc:	4444      	add	r4, r8
   193be:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
   193c2:	443d      	add	r5, r7
}
   193c4:	4638      	mov	r0, r7
    pRing->WrOff = WrOff + NumBytes;
   193c6:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   193ca:	b003      	add	sp, #12
   193cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  RdOff = pRing->RdOff;
   193d0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  WrOff = pRing->WrOff;
   193d2:	6a75      	ldr	r5, [r6, #36]	; 0x24
  if (RdOff <= WrOff) {
   193d4:	42ab      	cmp	r3, r5
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   193d6:	bf9c      	itt	ls
   193d8:	6a32      	ldrls	r2, [r6, #32]
   193da:	189b      	addls	r3, r3, r2
    r = RdOff - WrOff - 1u;
   193dc:	3b01      	subs	r3, #1
   193de:	1b5b      	subs	r3, r3, r5
    if (Avail < NumBytes) {
   193e0:	459a      	cmp	sl, r3
   193e2:	d8ce      	bhi.n	19382 <SEGGER_RTT_WriteNoLock+0x2a>
  Rem = pRing->SizeOfBuffer - WrOff;
   193e4:	4404      	add	r4, r0
   193e6:	eb09 04c4 	add.w	r4, r9, r4, lsl #3
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   193ea:	f100 0801 	add.w	r8, r0, #1
  Rem = pRing->SizeOfBuffer - WrOff;
   193ee:	6a26      	ldr	r6, [r4, #32]
   193f0:	1b77      	subs	r7, r6, r5
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   193f2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  if (Rem > NumBytes) {
   193f6:	45ba      	cmp	sl, r7
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   193f8:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
  if (Rem > NumBytes) {
   193fc:	d26e      	bcs.n	194dc <SEGGER_RTT_WriteNoLock+0x184>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   193fe:	f8d9 0004 	ldr.w	r0, [r9, #4]
   19402:	4652      	mov	r2, sl
   19404:	4428      	add	r0, r5
    pRing->WrOff = WrOff + NumBytes;
   19406:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   19408:	f7f7 f93a 	bl	10680 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   1940c:	4657      	mov	r7, sl
   1940e:	6265      	str	r5, [r4, #36]	; 0x24
   19410:	e7b7      	b.n	19382 <SEGGER_RTT_WriteNoLock+0x2a>
  WrOff = pRing->WrOff;
   19412:	f100 0801 	add.w	r8, r0, #1
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   19416:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  WrOff = pRing->WrOff;
   1941a:	6a75      	ldr	r5, [r6, #36]	; 0x24
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1941c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  NumBytesWritten = 0u;
   19420:	2700      	movs	r7, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   19422:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   19424:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   19426:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   1942a:	d922      	bls.n	19472 <SEGGER_RTT_WriteNoLock+0x11a>
      NumBytesToWrite = RdOff - WrOff - 1u;
   1942c:	1b62      	subs	r2, r4, r5
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1942e:	6a34      	ldr	r4, [r6, #32]
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   19430:	4552      	cmp	r2, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   19432:	eb09 0108 	add.w	r1, r9, r8
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   19436:	eba4 0405 	sub.w	r4, r4, r5
   1943a:	bf28      	it	cs
   1943c:	4652      	movcs	r2, sl
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1943e:	4294      	cmp	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   19440:	6848      	ldr	r0, [r1, #4]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   19442:	bf28      	it	cs
   19444:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   19446:	4428      	add	r0, r5
   19448:	4659      	mov	r1, fp
   1944a:	4622      	mov	r2, r4
   1944c:	f7f7 f918 	bl	10680 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   19450:	6a33      	ldr	r3, [r6, #32]
    WrOff           += NumBytesToWrite;
   19452:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   19454:	429d      	cmp	r5, r3
    NumBytes        -= NumBytesToWrite;
   19456:	ebaa 0a04 	sub.w	sl, sl, r4
    NumBytesWritten += NumBytesToWrite;
   1945a:	4427      	add	r7, r4
    pBuffer         += NumBytesToWrite;
   1945c:	44a3      	add	fp, r4
    if (WrOff == pRing->SizeOfBuffer) {
   1945e:	d00d      	beq.n	1947c <SEGGER_RTT_WriteNoLock+0x124>
    pRing->WrOff = WrOff;
   19460:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   19462:	f1ba 0f00 	cmp.w	sl, #0
   19466:	d08c      	beq.n	19382 <SEGGER_RTT_WriteNoLock+0x2a>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   19468:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    if (RdOff > WrOff) {
   1946a:	42aa      	cmp	r2, r5
      NumBytesToWrite = RdOff - WrOff - 1u;
   1946c:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (RdOff > WrOff) {
   19470:	d8dc      	bhi.n	1942c <SEGGER_RTT_WriteNoLock+0xd4>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   19472:	6a34      	ldr	r4, [r6, #32]
   19474:	4422      	add	r2, r4
   19476:	3a01      	subs	r2, #1
   19478:	1b52      	subs	r2, r2, r5
   1947a:	e7d9      	b.n	19430 <SEGGER_RTT_WriteNoLock+0xd8>
    pRing->WrOff = WrOff;
   1947c:	2500      	movs	r5, #0
   1947e:	6275      	str	r5, [r6, #36]	; 0x24
  } while (NumBytes);
   19480:	f1ba 0f00 	cmp.w	sl, #0
   19484:	d1cd      	bne.n	19422 <SEGGER_RTT_WriteNoLock+0xca>
   19486:	e77c      	b.n	19382 <SEGGER_RTT_WriteNoLock+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   19488:	6a36      	ldr	r6, [r6, #32]
   1948a:	4437      	add	r7, r6
   1948c:	3f01      	subs	r7, #1
   1948e:	1b7f      	subs	r7, r7, r5
    Status = Avail < NumBytes ? Avail : NumBytes;
   19490:	4557      	cmp	r7, sl
   19492:	bf28      	it	cs
   19494:	4657      	movcs	r7, sl
  Rem = pRing->SizeOfBuffer - WrOff;
   19496:	1b72      	subs	r2, r6, r5
  if (Rem > NumBytes) {
   19498:	4297      	cmp	r7, r2
   1949a:	d383      	bcc.n	193a4 <SEGGER_RTT_WriteNoLock+0x4c>
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1949c:	f108 0a01 	add.w	sl, r8, #1
   194a0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
   194a4:	eb09 0aca 	add.w	sl, r9, sl, lsl #3
   194a8:	4659      	mov	r1, fp
   194aa:	f8da 0004 	ldr.w	r0, [sl, #4]
   194ae:	9201      	str	r2, [sp, #4]
   194b0:	4428      	add	r0, r5
   194b2:	f7f7 f8e5 	bl	10680 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   194b6:	1bbe      	subs	r6, r7, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   194b8:	9a01      	ldr	r2, [sp, #4]
   194ba:	f8da 0004 	ldr.w	r0, [sl, #4]
    NumBytesAtOnce = NumBytes - Rem;
   194be:	4435      	add	r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   194c0:	eb0b 0102 	add.w	r1, fp, r2
   194c4:	462a      	mov	r2, r5
   194c6:	f7f7 f8db 	bl	10680 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   194ca:	4444      	add	r4, r8
   194cc:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
}
   194d0:	4638      	mov	r0, r7
    pRing->WrOff = NumBytesAtOnce;
   194d2:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
}
   194d6:	b003      	add	sp, #12
   194d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   194dc:	f8d9 0004 	ldr.w	r0, [r9, #4]
   194e0:	4428      	add	r0, r5
    NumBytesAtOnce = NumBytes - Rem;
   194e2:	4455      	add	r5, sl
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   194e4:	463a      	mov	r2, r7
    NumBytesAtOnce = NumBytes - Rem;
   194e6:	1bad      	subs	r5, r5, r6
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   194e8:	f7f7 f8ca 	bl	10680 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   194ec:	eb0b 0107 	add.w	r1, fp, r7
   194f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
   194f4:	462a      	mov	r2, r5
   194f6:	f7f7 f8c3 	bl	10680 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   194fa:	4657      	mov	r7, sl
   194fc:	6265      	str	r5, [r4, #36]	; 0x24
   194fe:	e740      	b.n	19382 <SEGGER_RTT_WriteNoLock+0x2a>
   19500:	200000d8 	.word	0x200000d8

00019504 <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
   19504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INIT();
   19508:	4c3e      	ldr	r4, [pc, #248]	; (19604 <SEGGER_RTT_GetKey+0x100>)
int SEGGER_RTT_GetKey(void) {
   1950a:	b082      	sub	sp, #8
  SEGGER_RTT_LOCK();
   1950c:	f7f1 f8b4 	bl	a678 <os_arch_save_sr>
  INIT();
   19510:	7825      	ldrb	r5, [r4, #0]
  SEGGER_RTT_LOCK();
   19512:	4606      	mov	r6, r0
  INIT();
   19514:	2d00      	cmp	r5, #0
   19516:	d04d      	beq.n	195b4 <SEGGER_RTT_GetKey+0xb0>
  WrOff = pRing->WrOff;
   19518:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  RdOff = pRing->RdOff;
   1951c:	6c25      	ldr	r5, [r4, #64]	; 0x40
  if (RdOff > WrOff) {
   1951e:	4555      	cmp	r5, sl
   19520:	d809      	bhi.n	19536 <SEGGER_RTT_GetKey+0x32>
  if (NumBytesRem > 0u) {
   19522:	4555      	cmp	r5, sl
   19524:	d128      	bne.n	19578 <SEGGER_RTT_GetKey+0x74>
  SEGGER_RTT_UNLOCK();
   19526:	4630      	mov	r0, r6
   19528:	f7f1 f8ac 	bl	a684 <os_arch_restore_sr>

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
  if (r == 1) {
    r = (int)(unsigned char)c;
  } else {
    r = -1;
   1952c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
   19530:	b002      	add	sp, #8
   19532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   19536:	e9d4 980d 	ldrd	r9, r8, [r4, #52]	; 0x34
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
   1953a:	eba8 0705 	sub.w	r7, r8, r5
    NumBytesRem = MIN(NumBytesRem, BufferSize);
   1953e:	2f01      	cmp	r7, #1
   19540:	bf28      	it	cs
   19542:	2701      	movcs	r7, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   19544:	463a      	mov	r2, r7
   19546:	eb09 0105 	add.w	r1, r9, r5
   1954a:	f10d 0007 	add.w	r0, sp, #7
   1954e:	f7f7 f897 	bl	10680 <memcpy>
    RdOff        += NumBytesRem;
   19552:	19eb      	adds	r3, r5, r7
    if (RdOff == pRing->SizeOfBuffer) {
   19554:	4598      	cmp	r8, r3
    BufferSize   -= NumBytesRem;
   19556:	f1c7 0201 	rsb	r2, r7, #1
  NumBytesRem = WrOff - RdOff;
   1955a:	bf14      	ite	ne
   1955c:	ebaa 0a03 	subne.w	sl, sl, r3
      RdOff = 0u;
   19560:	2300      	moveq	r3, #0
  NumBytesRem = MIN(NumBytesRem, BufferSize);
   19562:	4552      	cmp	r2, sl
   19564:	bf28      	it	cs
   19566:	4652      	movcs	r2, sl
  if (NumBytesRem > 0u) {
   19568:	b9a2      	cbnz	r2, 19594 <SEGGER_RTT_GetKey+0x90>
  if (NumBytesRead) {
   1956a:	4545      	cmp	r5, r8
   1956c:	d0db      	beq.n	19526 <SEGGER_RTT_GetKey+0x22>
  SEGGER_RTT_UNLOCK();
   1956e:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   19570:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   19572:	f7f1 f887 	bl	a684 <os_arch_restore_sr>
  if (r == 1) {
   19576:	e008      	b.n	1958a <SEGGER_RTT_GetKey+0x86>
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   19578:	6b62      	ldr	r2, [r4, #52]	; 0x34
    RdOff        += NumBytesRem;
   1957a:	1c6b      	adds	r3, r5, #1
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   1957c:	5d52      	ldrb	r2, [r2, r5]
   1957e:	f88d 2007 	strb.w	r2, [sp, #7]
  SEGGER_RTT_UNLOCK();
   19582:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   19584:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   19586:	f7f1 f87d 	bl	a684 <os_arch_restore_sr>
    r = (int)(unsigned char)c;
   1958a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   1958e:	b002      	add	sp, #8
   19590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
   19594:	f107 0208 	add.w	r2, r7, #8
   19598:	eb0d 0702 	add.w	r7, sp, r2
   1959c:	f819 2003 	ldrb.w	r2, [r9, r3]
   195a0:	f807 2c01 	strb.w	r2, [r7, #-1]
    RdOff        += NumBytesRem;
   195a4:	3301      	adds	r3, #1
  SEGGER_RTT_UNLOCK();
   195a6:	4630      	mov	r0, r6
    pRing->RdOff = RdOff;
   195a8:	6423      	str	r3, [r4, #64]	; 0x40
  SEGGER_RTT_UNLOCK();
   195aa:	f7f1 f86b 	bl	a684 <os_arch_restore_sr>
  if (r == 1) {
   195ae:	4545      	cmp	r5, r8
   195b0:	d0eb      	beq.n	1958a <SEGGER_RTT_GetKey+0x86>
   195b2:	e7bb      	b.n	1952c <SEGGER_RTT_GetKey+0x28>
  p->aUp[0].sName         = "Terminal";
   195b4:	4a14      	ldr	r2, [pc, #80]	; (19608 <SEGGER_RTT_GetKey+0x104>)
  p->aUp[0].RdOff         = 0u;
   195b6:	62a5      	str	r5, [r4, #40]	; 0x28
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   195b8:	2301      	movs	r3, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   195ba:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   195be:	f104 0348 	add.w	r3, r4, #72	; 0x48
   195c2:	e9c4 2306 	strd	r2, r3, [r4, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   195c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   195ca:	6223      	str	r3, [r4, #32]
  strcpy(&p->acID[7], "RTT");
   195cc:	4b0f      	ldr	r3, [pc, #60]	; (1960c <SEGGER_RTT_GetKey+0x108>)
  p->aDown[0].WrOff         = 0u;
   195ce:	63e5      	str	r5, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   195d0:	6818      	ldr	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
   195d2:	4b0f      	ldr	r3, [pc, #60]	; (19610 <SEGGER_RTT_GetKey+0x10c>)
  WrOff = pRing->WrOff;
   195d4:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
  strcpy(&p->acID[7], "RTT");
   195d8:	f8c4 0007 	str.w	r0, [r4, #7]
  p->aDown[0].pBuffer       = _acDownBuffer;
   195dc:	f504 6189 	add.w	r1, r4, #1096	; 0x448
   195e0:	6361      	str	r1, [r4, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   195e2:	e893 0003 	ldmia.w	r3, {r0, r1}
  p->acID[6] = ' ';
   195e6:	2320      	movs	r3, #32
   195e8:	71a3      	strb	r3, [r4, #6]
  if (NumBytesRem > 0u) {
   195ea:	4555      	cmp	r5, sl
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   195ec:	f04f 0310 	mov.w	r3, #16
  p->aDown[0].sName         = "Terminal";
   195f0:	e9c4 520b 	strd	r5, r2, [r4, #44]	; 0x2c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   195f4:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  p->aUp[0].WrOff         = 0u;
   195f8:	6265      	str	r5, [r4, #36]	; 0x24
  strcpy(&p->acID[0], "SEGGER");
   195fa:	6020      	str	r0, [r4, #0]
   195fc:	80a1      	strh	r1, [r4, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   195fe:	63a3      	str	r3, [r4, #56]	; 0x38
  if (NumBytesRem > 0u) {
   19600:	d091      	beq.n	19526 <SEGGER_RTT_GetKey+0x22>
   19602:	e7b9      	b.n	19578 <SEGGER_RTT_GetKey+0x74>
   19604:	200000d8 	.word	0x200000d8
   19608:	00026dec 	.word	0x00026dec
   1960c:	00026df8 	.word	0x00026df8
   19610:	00026dfc 	.word	0x00026dfc

00019614 <SEGGER_RTT_Init>:
  strcpy(&p->acID[7], "RTT");
   19614:	4814      	ldr	r0, [pc, #80]	; (19668 <SEGGER_RTT_Init+0x54>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19616:	4b15      	ldr	r3, [pc, #84]	; (1966c <SEGGER_RTT_Init+0x58>)
  strcpy(&p->acID[0], "SEGGER");
   19618:	4915      	ldr	r1, [pc, #84]	; (19670 <SEGGER_RTT_Init+0x5c>)
  strcpy(&p->acID[7], "RTT");
   1961a:	6800      	ldr	r0, [r0, #0]
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1961c:	b410      	push	{r4}
  strcpy(&p->acID[7], "RTT");
   1961e:	f8c3 0007 	str.w	r0, [r3, #7]
  strcpy(&p->acID[0], "SEGGER");
   19622:	c903      	ldmia	r1, {r0, r1}
  p->aUp[0].sName         = "Terminal";
   19624:	4c13      	ldr	r4, [pc, #76]	; (19674 <SEGGER_RTT_Init+0x60>)
  strcpy(&p->acID[0], "SEGGER");
   19626:	6018      	str	r0, [r3, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19628:	2001      	movs	r0, #1
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1962a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1962e:	f103 0048 	add.w	r0, r3, #72	; 0x48
   19632:	e9c3 4006 	strd	r4, r0, [r3, #24]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   19636:	f44f 6080 	mov.w	r0, #1024	; 0x400
  p->acID[6] = ' ';
   1963a:	f04f 0c20 	mov.w	ip, #32
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   1963e:	6218      	str	r0, [r3, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   19640:	f503 6089 	add.w	r0, r3, #1096	; 0x448
  p->aUp[0].RdOff         = 0u;
   19644:	2200      	movs	r2, #0
  p->acID[6] = ' ';
   19646:	f883 c006 	strb.w	ip, [r3, #6]
  p->aDown[0].pBuffer       = _acDownBuffer;
   1964a:	6358      	str	r0, [r3, #52]	; 0x34
  strcpy(&p->acID[0], "SEGGER");
   1964c:	8099      	strh	r1, [r3, #4]
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1964e:	2010      	movs	r0, #16
  p->aDown[0].sName         = "Terminal";
   19650:	e9c3 240b 	strd	r2, r4, [r3, #44]	; 0x2c
  p->aUp[0].RdOff         = 0u;
   19654:	629a      	str	r2, [r3, #40]	; 0x28
  _DoInit();
}
   19656:	f85d 4b04 	ldr.w	r4, [sp], #4
  p->aUp[0].WrOff         = 0u;
   1965a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   1965c:	6398      	str	r0, [r3, #56]	; 0x38
  p->aDown[0].RdOff         = 0u;
   1965e:	641a      	str	r2, [r3, #64]	; 0x40
  p->aDown[0].WrOff         = 0u;
   19660:	63da      	str	r2, [r3, #60]	; 0x3c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   19662:	645a      	str	r2, [r3, #68]	; 0x44
}
   19664:	4770      	bx	lr
   19666:	bf00      	nop
   19668:	00026df8 	.word	0x00026df8
   1966c:	200000d8 	.word	0x200000d8
   19670:	00026dfc 	.word	0x00026dfc
   19674:	00026dec 	.word	0x00026dec

00019678 <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
   19678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1967c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19680:	4770      	bx	lr

00019682 <uwb_dw1000_hal_noblock_wait>:
{
   19682:	b508      	push	{r3, lr}
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
   19684:	f001 f956 	bl	1a934 <hal_dw1000_rw_noblock_wait>
}
   19688:	bd08      	pop	{r3, pc}

0001968a <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
   1968a:	b508      	push	{r3, lr}
   1968c:	460b      	mov	r3, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
   1968e:	f011 0101 	ands.w	r1, r1, #1
   19692:	d000      	beq.n	19696 <uwb_dw1000_mac_framefilter+0xc>
   19694:	2104      	movs	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
   19696:	f013 0f02 	tst.w	r3, #2
   1969a:	d001      	beq.n	196a0 <uwb_dw1000_mac_framefilter+0x16>
   1969c:	f041 0108 	orr.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
   196a0:	f013 0f04 	tst.w	r3, #4
   196a4:	d001      	beq.n	196aa <uwb_dw1000_mac_framefilter+0x20>
   196a6:	f041 0110 	orr.w	r1, r1, #16
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
   196aa:	f013 0f08 	tst.w	r3, #8
   196ae:	d001      	beq.n	196b4 <uwb_dw1000_mac_framefilter+0x2a>
   196b0:	f041 0120 	orr.w	r1, r1, #32
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
   196b4:	f013 0f10 	tst.w	r3, #16
   196b8:	d001      	beq.n	196be <uwb_dw1000_mac_framefilter+0x34>
   196ba:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
   196be:	f413 7f80 	tst.w	r3, #256	; 0x100
   196c2:	d001      	beq.n	196c8 <uwb_dw1000_mac_framefilter+0x3e>
   196c4:	f041 0102 	orr.w	r1, r1, #2

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
   196c8:	f001 fd78 	bl	1b1bc <dw1000_mac_framefilter>
}
   196cc:	bd08      	pop	{r3, pc}

000196ce <uwb_dw1000_set_autoack>:

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
   196ce:	b508      	push	{r3, lr}
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
   196d0:	f001 fdb4 	bl	1b23c <dw1000_set_autoack>
}
   196d4:	bd08      	pop	{r3, pc}

000196d6 <uwb_dw1000_set_autoack_delay>:

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
   196d6:	b508      	push	{r3, lr}
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
   196d8:	f001 fdfc 	bl	1b2d4 <dw1000_set_autoack_delay>
}
   196dc:	bd08      	pop	{r3, pc}

000196de <uwb_dw1000_event_cnt_ctrl>:

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
   196de:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
   196e0:	f003 fc65 	bl	1cfae <dw1000_phy_event_cnt_ctrl>
}
   196e4:	bd08      	pop	{r3, pc}

000196e6 <uwb_dw1000_event_cnt_read>:

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
   196e6:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
   196e8:	f003 fc84 	bl	1cff4 <dw1000_phy_event_cnt_read>
}
   196ec:	bd08      	pop	{r3, pc}
	...

000196f0 <uwb_dw1000_calc_pdoa>:
{
   196f0:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
   196f2:	4905      	ldr	r1, [pc, #20]	; (19708 <uwb_dw1000_calc_pdoa+0x18>)
   196f4:	4805      	ldr	r0, [pc, #20]	; (1970c <uwb_dw1000_calc_pdoa+0x1c>)
   196f6:	f7f7 fbe9 	bl	10ecc <printf>
    assert(0);
   196fa:	2300      	movs	r3, #0
   196fc:	461a      	mov	r2, r3
   196fe:	4619      	mov	r1, r3
   19700:	4618      	mov	r0, r3
   19702:	f7ef fd5f 	bl	91c4 <__assert_func>
   19706:	bf00      	nop
   19708:	00026e44 	.word	0x00026e44
   1970c:	00026e04 	.word	0x00026e04

00019710 <uwb_dw1000_estimate_los>:
{
   19710:	b508      	push	{r3, lr}
    return dw1000_estimate_los(rssi, fppl);
   19712:	f002 ff49 	bl	1c5a8 <dw1000_estimate_los>
}
   19716:	bd08      	pop	{r3, pc}

00019718 <uwb_dw1000_calc_fppl>:
{
   19718:	b508      	push	{r3, lr}
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   1971a:	f002 fea9 	bl	1c470 <dw1000_calc_fppl>
}
   1971e:	bd08      	pop	{r3, pc}

00019720 <uwb_dw1000_calc_seq_rssi>:
{
   19720:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   19722:	f002 ff01 	bl	1c528 <dw1000_calc_rssi>
}
   19726:	bd08      	pop	{r3, pc}

00019728 <uwb_dw1000_calc_rssi>:
{
   19728:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   1972a:	f002 fefd 	bl	1c528 <dw1000_calc_rssi>
}
   1972e:	bd08      	pop	{r3, pc}

00019730 <uwb_dw1000_get_fppl>:
{
   19730:	b508      	push	{r3, lr}
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
   19732:	f002 fee9 	bl	1c508 <dw1000_get_fppl>
}
   19736:	bd08      	pop	{r3, pc}

00019738 <uwb_dw1000_get_rssi>:
{
   19738:	b508      	push	{r3, lr}
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
   1973a:	f002 ff25 	bl	1c588 <dw1000_get_rssi>
}
   1973e:	bd08      	pop	{r3, pc}

00019740 <uwb_dw1000_calc_clock_offset_ratio>:
{
   19740:	b508      	push	{r3, lr}
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
   19742:	b122      	cbz	r2, 1974e <uwb_dw1000_calc_clock_offset_ratio+0xe>
    } else if (type == UWB_CR_RXTTCKO) {
   19744:	2a01      	cmp	r2, #1
   19746:	d005      	beq.n	19754 <uwb_dw1000_calc_clock_offset_ratio+0x14>
    return DPL_FLOAT64_INIT(0.0f);
   19748:	ed9f 0b05 	vldr	d0, [pc, #20]	; 19760 <uwb_dw1000_calc_clock_offset_ratio+0x20>
}
   1974c:	bd08      	pop	{r3, pc}
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
   1974e:	f002 f883 	bl	1b858 <dw1000_calc_clock_offset_ratio>
   19752:	e7fb      	b.n	1974c <uwb_dw1000_calc_clock_offset_ratio+0xc>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
   19754:	f002 f901 	bl	1b95a <dw1000_calc_clock_offset_ratio_ttco>
   19758:	e7f8      	b.n	1974c <uwb_dw1000_calc_clock_offset_ratio+0xc>
   1975a:	bf00      	nop
   1975c:	f3af 8000 	nop.w
	...

00019768 <uwb_dw1000_set_on_error_continue>:
{
   19768:	b508      	push	{r3, lr}
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
   1976a:	f001 fc48 	bl	1affe <dw1000_set_on_error_continue>
}
   1976e:	bd08      	pop	{r3, pc}

00019770 <uwb_dw1000_phy_repeated_frames>:
{
   19770:	b508      	push	{r3, lr}
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
   19772:	f003 fabd 	bl	1ccf0 <dw1000_phy_repeated_frames>
}
   19776:	bd08      	pop	{r3, pc}

00019778 <uwb_dw1000_phy_rx_reset>:
{
   19778:	b508      	push	{r3, lr}
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
   1977a:	f003 f9c0 	bl	1cafe <dw1000_phy_rx_reset>
}
   1977e:	bd08      	pop	{r3, pc}

00019780 <uwb_dw1000_phy_forcetrxoff>:
{
   19780:	b508      	push	{r3, lr}
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
   19782:	f003 f9f1 	bl	1cb68 <dw1000_phy_forcetrxoff>
}
   19786:	bd08      	pop	{r3, pc}

00019788 <uwb_dw1000_phy_data_duration>:
{
   19788:	b508      	push	{r3, lr}
    return dw1000_phy_data_duration(&dev->attrib, nlen);
   1978a:	f200 5034 	addw	r0, r0, #1332	; 0x534
   1978e:	f003 fb71 	bl	1ce74 <dw1000_phy_data_duration>
}
   19792:	bd08      	pop	{r3, pc}

00019794 <uwb_dw1000_phy_SHR_duration>:
{
   19794:	b508      	push	{r3, lr}
    return dw1000_phy_SHR_duration(&dev->attrib);
   19796:	f200 5034 	addw	r0, r0, #1332	; 0x534
   1979a:	f003 fb57 	bl	1ce4c <dw1000_phy_SHR_duration>
}
   1979e:	bd08      	pop	{r3, pc}

000197a0 <uwb_dw1000_phy_frame_duration>:
{
   197a0:	b508      	push	{r3, lr}
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
   197a2:	f200 5034 	addw	r0, r0, #1332	; 0x534
   197a6:	f003 fb8f 	bl	1cec8 <dw1000_phy_frame_duration>
}
   197aa:	bd08      	pop	{r3, pc}

000197ac <uwb_dw1000_read_txtime_lo32>:
{
   197ac:	b508      	push	{r3, lr}
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
   197ae:	f002 ff49 	bl	1c644 <dw1000_read_txtime_lo>
}
   197b2:	bd08      	pop	{r3, pc}

000197b4 <uwb_dw1000_read_txtime>:
{
   197b4:	b508      	push	{r3, lr}
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
   197b6:	f002 ff3d 	bl	1c634 <dw1000_read_txtime>
}
   197ba:	bd08      	pop	{r3, pc}

000197bc <uwb_dw1000_read_rxtime_lo32>:
{
   197bc:	b508      	push	{r3, lr}
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
   197be:	f002 ff32 	bl	1c626 <dw1000_read_rxtime_lo>
}
   197c2:	bd08      	pop	{r3, pc}

000197c4 <uwb_dw1000_read_rxtime>:
{
   197c4:	b508      	push	{r3, lr}
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
   197c6:	f002 ff26 	bl	1c616 <dw1000_read_rxtime>
}
   197ca:	bd08      	pop	{r3, pc}

000197cc <uwb_dw1000_read_systime_lo32>:
{
   197cc:	b508      	push	{r3, lr}
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
   197ce:	f002 ff1b 	bl	1c608 <dw1000_read_systime_lo>
}
   197d2:	bd08      	pop	{r3, pc}

000197d4 <uwb_dw1000_read_systime>:
{
   197d4:	b508      	push	{r3, lr}
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
   197d6:	f002 ff0f 	bl	1c5f8 <dw1000_read_systime>
}
   197da:	bd08      	pop	{r3, pc}

000197dc <uwb_dw1000_set_rxauto_disable>:
{
   197dc:	b508      	push	{r3, lr}
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
   197de:	f001 fc17 	bl	1b010 <dw1000_set_rxauto_disable>
}
   197e2:	bd08      	pop	{r3, pc}

000197e4 <uwb_dw1000_set_wait4resp_delay>:
{
   197e4:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
   197e6:	f001 fd89 	bl	1b2fc <dw1000_set_wait4resp_delay>
}
   197ea:	bd08      	pop	{r3, pc}

000197ec <uwb_dw1000_set_wait4resp>:
{
   197ec:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
   197ee:	f001 fbf7 	bl	1afe0 <dw1000_set_wait4resp>
}
   197f2:	bd08      	pop	{r3, pc}

000197f4 <uwb_dw1000_tx_wait>:
{
   197f4:	b508      	push	{r3, lr}
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
   197f6:	f001 fa87 	bl	1ad08 <dw1000_tx_wait>
}
   197fa:	bd08      	pop	{r3, pc}

000197fc <uwb_dw1000_write_tx_fctrl>:
{
   197fc:	b508      	push	{r3, lr}
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
   197fe:	f001 f9a7 	bl	1ab50 <dw1000_write_tx_fctrl>
}
   19802:	bd08      	pop	{r3, pc}

00019804 <uwb_dw1000_write_tx>:
{
   19804:	b508      	push	{r3, lr}
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
   19806:	f001 f956 	bl	1aab6 <dw1000_write_tx>
}
   1980a:	bd08      	pop	{r3, pc}

0001980c <uwb_dw1000_stop_rx>:
{
   1980c:	b508      	push	{r3, lr}
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
   1980e:	f001 fb93 	bl	1af38 <dw1000_stop_rx>
}
   19812:	bd08      	pop	{r3, pc}

00019814 <uwb_dw1000_start_rx>:
{
   19814:	b508      	push	{r3, lr}
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
   19816:	f001 fab8 	bl	1ad8a <dw1000_start_rx>
}
   1981a:	bd08      	pop	{r3, pc}

0001981c <uwb_dw1000_start_tx>:
{
   1981c:	b508      	push	{r3, lr}
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
   1981e:	f001 f9d8 	bl	1abd2 <dw1000_start_tx>
}
   19822:	bd08      	pop	{r3, pc}

00019824 <uwb_dw1000_set_delay_start>:
{
   19824:	b508      	push	{r3, lr}
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
   19826:	f001 fa7b 	bl	1ad20 <dw1000_set_delay_start>
}
   1982a:	bd08      	pop	{r3, pc}

0001982c <uwb_dw1000_set_abs_timeout>:
{
   1982c:	b508      	push	{r3, lr}
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
   1982e:	f001 fc8f 	bl	1b150 <dw1000_set_abs_timeout>
}
   19832:	bd08      	pop	{r3, pc}

00019834 <uwb_dw1000_set_rx_window>:
{
   19834:	b500      	push	{lr}
   19836:	b083      	sub	sp, #12
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
   19838:	ed9d 7b04 	vldr	d7, [sp, #16]
   1983c:	ed8d 7b00 	vstr	d7, [sp]
   19840:	f001 fc65 	bl	1b10e <dw1000_set_rx_window>
}
   19844:	b003      	add	sp, #12
   19846:	f85d fb04 	ldr.w	pc, [sp], #4

0001984a <uwb_dw1000_adj_rx_timeout>:
{
   1984a:	b508      	push	{r3, lr}
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   1984c:	b289      	uxth	r1, r1
   1984e:	f001 fbe8 	bl	1b022 <dw1000_adj_rx_timeout>
}
   19852:	bd08      	pop	{r3, pc}

00019854 <uwb_dw1000_set_rx_timeout>:
{
   19854:	b508      	push	{r3, lr}
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   19856:	b289      	uxth	r1, r1
   19858:	f001 fc03 	bl	1b062 <dw1000_set_rx_timeout>
}
   1985c:	bd08      	pop	{r3, pc}

0001985e <uwb_dw1000_set_dblrxbuf>:
{
   1985e:	b508      	push	{r3, lr}
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
   19860:	f001 fd91 	bl	1b386 <dw1000_set_dblrxbuff>
}
   19864:	bd08      	pop	{r3, pc}

00019866 <uwb_dw1000_txrf_power_value>:
{
   19866:	b508      	push	{r3, lr}
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
   19868:	f003 fb3b 	bl	1cee2 <dw1000_phy_txrf_power_value>
}
   1986c:	bd08      	pop	{r3, pc}

0001986e <uwb_dw1000_txrf_config>:
{
   1986e:	b508      	push	{r3, lr}
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
   19870:	f003 f842 	bl	1c8f8 <dw1000_phy_config_txrf>
}
   19874:	bd08      	pop	{r3, pc}

00019876 <uwb_dw1000_mac_config>:
{
   19876:	b508      	push	{r3, lr}
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
   19878:	f001 fdea 	bl	1b450 <dw1000_mac_config>
}
   1987c:	bd08      	pop	{r3, pc}
	...

00019880 <dw1000_read>:
{
   19880:	b570      	push	{r4, r5, r6, lr}
   19882:	b084      	sub	sp, #16
   19884:	4604      	mov	r4, r0
   19886:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   1988a:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   1988e:	f04f 0e00 	mov.w	lr, #0
   19892:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   19896:	4694      	mov	ip, r2
   19898:	3a00      	subs	r2, #0
   1989a:	bf18      	it	ne
   1989c:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   1989e:	f362 1e86 	bfi	lr, r2, #6, #1
   198a2:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   198a6:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   198aa:	bf94      	ite	ls
   198ac:	2600      	movls	r6, #0
   198ae:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   198b0:	f366 2e08 	bfi	lr, r6, #8, #1
   198b4:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   198b8:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    uint8_t header[] = {
   198bc:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   198c0:	fa4f f28c 	sxtb.w	r2, ip
   198c4:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   198c8:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   198cc:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   198d0:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   198d4:	4a1b      	ldr	r2, [pc, #108]	; (19944 <dw1000_read+0xc4>)
   198d6:	ea0e 0202 	and.w	r2, lr, r2
   198da:	b122      	cbz	r2, 198e6 <dw1000_read+0x66>
   198dc:	f41e 7f80 	tst.w	lr, #256	; 0x100
   198e0:	d01b      	beq.n	1991a <dw1000_read+0x9a>
   198e2:	2203      	movs	r2, #3
   198e4:	e000      	b.n	198e8 <dw1000_read+0x68>
   198e6:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   198e8:	293f      	cmp	r1, #63	; 0x3f
   198ea:	d818      	bhi.n	1991e <dw1000_read+0x9e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   198ec:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   198f0:	d11b      	bne.n	1992a <dw1000_read+0xaa>
   198f2:	44ac      	add	ip, r5
   198f4:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   198f8:	da17      	bge.n	1992a <dw1000_read+0xaa>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   198fa:	2d08      	cmp	r5, #8
   198fc:	d904      	bls.n	19908 <dw1000_read+0x88>
   198fe:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   19902:	f011 0f01 	tst.w	r1, #1
   19906:	d016      	beq.n	19936 <dw1000_read+0xb6>
        hal_dw1000_read(inst, header, len, buffer, length);
   19908:	9500      	str	r5, [sp, #0]
   1990a:	a903      	add	r1, sp, #12
   1990c:	4620      	mov	r0, r4
   1990e:	f000 fd3f 	bl	1a390 <hal_dw1000_read>
}
   19912:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19916:	b004      	add	sp, #16
   19918:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1991a:	2202      	movs	r2, #2
   1991c:	e7e4      	b.n	198e8 <dw1000_read+0x68>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   1991e:	2300      	movs	r3, #0
   19920:	461a      	mov	r2, r3
   19922:	4619      	mov	r1, r3
   19924:	4618      	mov	r0, r3
   19926:	f7ef fc4d 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1992a:	2300      	movs	r3, #0
   1992c:	461a      	mov	r2, r3
   1992e:	4619      	mov	r1, r3
   19930:	4618      	mov	r0, r3
   19932:	f7ef fc47 	bl	91c4 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
   19936:	9500      	str	r5, [sp, #0]
   19938:	a903      	add	r1, sp, #12
   1993a:	4620      	mov	r0, r4
   1993c:	f000 fd84 	bl	1a448 <hal_dw1000_read_noblock>
   19940:	e7e7      	b.n	19912 <dw1000_read+0x92>
   19942:	bf00      	nop
   19944:	00fffe00 	.word	0x00fffe00

00019948 <dw1000_write>:
{
   19948:	b570      	push	{r4, r5, r6, lr}
   1994a:	b084      	sub	sp, #16
   1994c:	4604      	mov	r4, r0
   1994e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   19952:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   19956:	f04f 0e00 	mov.w	lr, #0
   1995a:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   1995e:	4694      	mov	ip, r2
   19960:	3a00      	subs	r2, #0
   19962:	bf18      	it	ne
   19964:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   19966:	f362 1e86 	bfi	lr, r2, #6, #1
   1996a:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
        .extended = subaddress > 0x7F,
   1996e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   19972:	bf94      	ite	ls
   19974:	2600      	movls	r6, #0
   19976:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   19978:	f366 2e08 	bfi	lr, r6, #8, #1
   1997c:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   19980:	0192      	lsls	r2, r2, #6
   19982:	f062 027f 	orn	r2, r2, #127	; 0x7f
   19986:	4302      	orrs	r2, r0
    uint8_t header[] = {
   19988:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   1998c:	fa4f f28c 	sxtb.w	r2, ip
   19990:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   19994:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   19998:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   1999c:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   199a0:	4a1b      	ldr	r2, [pc, #108]	; (19a10 <dw1000_write+0xc8>)
   199a2:	ea0e 0202 	and.w	r2, lr, r2
   199a6:	b122      	cbz	r2, 199b2 <dw1000_write+0x6a>
   199a8:	f41e 7f80 	tst.w	lr, #256	; 0x100
   199ac:	d01c      	beq.n	199e8 <dw1000_write+0xa0>
   199ae:	2203      	movs	r2, #3
   199b0:	e000      	b.n	199b4 <dw1000_write+0x6c>
   199b2:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   199b4:	293f      	cmp	r1, #63	; 0x3f
   199b6:	d819      	bhi.n	199ec <dw1000_write+0xa4>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   199b8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   199bc:	d11c      	bne.n	199f8 <dw1000_write+0xb0>
   199be:	44ac      	add	ip, r5
   199c0:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   199c4:	da18      	bge.n	199f8 <dw1000_write+0xb0>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   199c6:	1951      	adds	r1, r2, r5
   199c8:	2908      	cmp	r1, #8
   199ca:	dd04      	ble.n	199d6 <dw1000_write+0x8e>
   199cc:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   199d0:	f011 0f01 	tst.w	r1, #1
   199d4:	d016      	beq.n	19a04 <dw1000_write+0xbc>
        hal_dw1000_write(inst, header, len, buffer, length);
   199d6:	9500      	str	r5, [sp, #0]
   199d8:	a903      	add	r1, sp, #12
   199da:	4620      	mov	r0, r4
   199dc:	f000 fe6a 	bl	1a6b4 <hal_dw1000_write>
}
   199e0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   199e4:	b004      	add	sp, #16
   199e6:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   199e8:	2202      	movs	r2, #2
   199ea:	e7e3      	b.n	199b4 <dw1000_write+0x6c>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   199ec:	2300      	movs	r3, #0
   199ee:	461a      	mov	r2, r3
   199f0:	4619      	mov	r1, r3
   199f2:	4618      	mov	r0, r3
   199f4:	f7ef fbe6 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   199f8:	2300      	movs	r3, #0
   199fa:	461a      	mov	r2, r3
   199fc:	4619      	mov	r1, r3
   199fe:	4618      	mov	r0, r3
   19a00:	f7ef fbe0 	bl	91c4 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
   19a04:	9500      	str	r5, [sp, #0]
   19a06:	a903      	add	r1, sp, #12
   19a08:	4620      	mov	r0, r4
   19a0a:	f000 fea1 	bl	1a750 <hal_dw1000_write_noblock>
   19a0e:	e7e7      	b.n	199e0 <dw1000_write+0x98>
   19a10:	00fffe00 	.word	0x00fffe00

00019a14 <dw1000_read_reg>:
{
   19a14:	b530      	push	{r4, r5, lr}
   19a16:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   19a18:	2400      	movs	r4, #0
   19a1a:	2500      	movs	r5, #0
   19a1c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    dw1000_cmd_t cmd = {
   19a20:	f001 043f 	and.w	r4, r1, #63	; 0x3f
   19a24:	f04f 0e00 	mov.w	lr, #0
   19a28:	f364 0e05 	bfi	lr, r4, #0, #6
        .subindex = subaddress != 0,
   19a2c:	4694      	mov	ip, r2
   19a2e:	3a00      	subs	r2, #0
   19a30:	bf18      	it	ne
   19a32:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   19a34:	f362 1e86 	bfi	lr, r2, #6, #1
   19a38:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   19a3c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   19a40:	bf94      	ite	ls
   19a42:	2500      	movls	r5, #0
   19a44:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   19a46:	f365 2e08 	bfi	lr, r5, #8, #1
   19a4a:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   19a4e:	ea44 1282 	orr.w	r2, r4, r2, lsl #6
    uint8_t header[] = {
   19a52:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   19a56:	fa4f f28c 	sxtb.w	r2, ip
   19a5a:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   19a5e:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   19a62:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   19a66:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19a6a:	4a21      	ldr	r2, [pc, #132]	; (19af0 <dw1000_read_reg+0xdc>)
   19a6c:	ea0e 0202 	and.w	r2, lr, r2
   19a70:	b122      	cbz	r2, 19a7c <dw1000_read_reg+0x68>
   19a72:	f41e 7f80 	tst.w	lr, #256	; 0x100
   19a76:	d01f      	beq.n	19ab8 <dw1000_read_reg+0xa4>
   19a78:	2203      	movs	r2, #3
   19a7a:	e000      	b.n	19a7e <dw1000_read_reg+0x6a>
   19a7c:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19a7e:	293f      	cmp	r1, #63	; 0x3f
   19a80:	d81c      	bhi.n	19abc <dw1000_read_reg+0xa8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19a82:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   19a86:	d11f      	bne.n	19ac8 <dw1000_read_reg+0xb4>
   19a88:	449c      	add	ip, r3
   19a8a:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   19a8e:	d21b      	bcs.n	19ac8 <dw1000_read_reg+0xb4>
    assert(nbytes <= sizeof(uint64_t));
   19a90:	2b08      	cmp	r3, #8
   19a92:	d81f      	bhi.n	19ad4 <dw1000_read_reg+0xc0>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   19a94:	18d1      	adds	r1, r2, r3
   19a96:	2908      	cmp	r1, #8
   19a98:	d904      	bls.n	19aa4 <dw1000_read_reg+0x90>
   19a9a:	f890 152e 	ldrb.w	r1, [r0, #1326]	; 0x52e
   19a9e:	f011 0f01 	tst.w	r1, #1
   19aa2:	d01d      	beq.n	19ae0 <dw1000_read_reg+0xcc>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
   19aa4:	b29b      	uxth	r3, r3
   19aa6:	9300      	str	r3, [sp, #0]
   19aa8:	ab04      	add	r3, sp, #16
   19aaa:	a903      	add	r1, sp, #12
   19aac:	f000 fc70 	bl	1a390 <hal_dw1000_read>
}
   19ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   19ab4:	b007      	add	sp, #28
   19ab6:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19ab8:	2202      	movs	r2, #2
   19aba:	e7e0      	b.n	19a7e <dw1000_read_reg+0x6a>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19abc:	2300      	movs	r3, #0
   19abe:	461a      	mov	r2, r3
   19ac0:	4619      	mov	r1, r3
   19ac2:	4618      	mov	r0, r3
   19ac4:	f7ef fb7e 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19ac8:	2300      	movs	r3, #0
   19aca:	461a      	mov	r2, r3
   19acc:	4619      	mov	r1, r3
   19ace:	4618      	mov	r0, r3
   19ad0:	f7ef fb78 	bl	91c4 <__assert_func>
    assert(nbytes <= sizeof(uint64_t));
   19ad4:	2300      	movs	r3, #0
   19ad6:	461a      	mov	r2, r3
   19ad8:	4619      	mov	r1, r3
   19ada:	4618      	mov	r0, r3
   19adc:	f7ef fb72 	bl	91c4 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   19ae0:	b29b      	uxth	r3, r3
   19ae2:	9300      	str	r3, [sp, #0]
   19ae4:	ab04      	add	r3, sp, #16
   19ae6:	a903      	add	r1, sp, #12
   19ae8:	f000 fcae 	bl	1a448 <hal_dw1000_read_noblock>
   19aec:	e7e0      	b.n	19ab0 <dw1000_read_reg+0x9c>
   19aee:	bf00      	nop
   19af0:	00fffe00 	.word	0x00fffe00

00019af4 <dw1000_write_reg>:
{
   19af4:	b530      	push	{r4, r5, lr}
   19af6:	b087      	sub	sp, #28
   19af8:	4604      	mov	r4, r0
   19afa:	980c      	ldr	r0, [sp, #48]	; 0x30
    dw1000_cmd_t cmd = {
   19afc:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
   19b00:	f04f 0c00 	mov.w	ip, #0
   19b04:	f36e 0c05 	bfi	ip, lr, #0, #6
        .subindex = subaddress != 0,
   19b08:	4613      	mov	r3, r2
   19b0a:	3a00      	subs	r2, #0
   19b0c:	bf18      	it	ne
   19b0e:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   19b10:	f362 1c86 	bfi	ip, r2, #6, #1
   19b14:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        .extended = subaddress > 0x7F,
   19b18:	2b7f      	cmp	r3, #127	; 0x7f
   19b1a:	bf94      	ite	ls
   19b1c:	2500      	movls	r5, #0
   19b1e:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   19b20:	f365 2c08 	bfi	ip, r5, #8, #1
   19b24:	f363 2c57 	bfi	ip, r3, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   19b28:	0192      	lsls	r2, r2, #6
   19b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   19b2e:	ea4e 0202 	orr.w	r2, lr, r2
    uint8_t header[] = {
   19b32:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   19b36:	b25a      	sxtb	r2, r3
   19b38:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   19b3c:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   19b40:	f3c3 12c7 	ubfx	r2, r3, #7, #8
    uint8_t header[] = {
   19b44:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19b48:	4a25      	ldr	r2, [pc, #148]	; (19be0 <dw1000_write_reg+0xec>)
   19b4a:	ea0c 0202 	and.w	r2, ip, r2
   19b4e:	b122      	cbz	r2, 19b5a <dw1000_write_reg+0x66>
   19b50:	f41c 7f80 	tst.w	ip, #256	; 0x100
   19b54:	d022      	beq.n	19b9c <dw1000_write_reg+0xa8>
   19b56:	2203      	movs	r2, #3
   19b58:	e000      	b.n	19b5c <dw1000_write_reg+0x68>
   19b5a:	2201      	movs	r2, #1
    buffer.value = val;
   19b5c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   19b60:	ed8d 7b04 	vstr	d7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
   19b64:	2808      	cmp	r0, #8
   19b66:	d81b      	bhi.n	19ba0 <dw1000_write_reg+0xac>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19b68:	293f      	cmp	r1, #63	; 0x3f
   19b6a:	d81f      	bhi.n	19bac <dw1000_write_reg+0xb8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19b6c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   19b70:	d122      	bne.n	19bb8 <dw1000_write_reg+0xc4>
   19b72:	4403      	add	r3, r0
   19b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19b78:	d21e      	bcs.n	19bb8 <dw1000_write_reg+0xc4>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   19b7a:	1813      	adds	r3, r2, r0
   19b7c:	2b08      	cmp	r3, #8
   19b7e:	d904      	bls.n	19b8a <dw1000_write_reg+0x96>
   19b80:	f894 352e 	ldrb.w	r3, [r4, #1326]	; 0x52e
   19b84:	f013 0f01 	tst.w	r3, #1
   19b88:	d01c      	beq.n	19bc4 <dw1000_write_reg+0xd0>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
   19b8a:	b280      	uxth	r0, r0
   19b8c:	9000      	str	r0, [sp, #0]
   19b8e:	ab04      	add	r3, sp, #16
   19b90:	a903      	add	r1, sp, #12
   19b92:	4620      	mov	r0, r4
   19b94:	f000 fd8e 	bl	1a6b4 <hal_dw1000_write>
}
   19b98:	b007      	add	sp, #28
   19b9a:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19b9c:	2202      	movs	r2, #2
   19b9e:	e7dd      	b.n	19b5c <dw1000_write_reg+0x68>
    assert(nbytes <= sizeof(uint64_t));
   19ba0:	2300      	movs	r3, #0
   19ba2:	461a      	mov	r2, r3
   19ba4:	4619      	mov	r1, r3
   19ba6:	4618      	mov	r0, r3
   19ba8:	f7ef fb0c 	bl	91c4 <__assert_func>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19bac:	2300      	movs	r3, #0
   19bae:	461a      	mov	r2, r3
   19bb0:	4619      	mov	r1, r3
   19bb2:	4618      	mov	r0, r3
   19bb4:	f7ef fb06 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19bb8:	2300      	movs	r3, #0
   19bba:	461a      	mov	r2, r3
   19bbc:	4619      	mov	r1, r3
   19bbe:	4618      	mov	r0, r3
   19bc0:	f7ef fb00 	bl	91c4 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   19bc4:	b280      	uxth	r0, r0
   19bc6:	9000      	str	r0, [sp, #0]
   19bc8:	ab04      	add	r3, sp, #16
   19bca:	a903      	add	r1, sp, #12
   19bcc:	4620      	mov	r0, r4
   19bce:	f000 fdbf 	bl	1a750 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
   19bd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19bd6:	4620      	mov	r0, r4
   19bd8:	f000 feac 	bl	1a934 <hal_dw1000_rw_noblock_wait>
}
   19bdc:	e7dc      	b.n	19b98 <dw1000_write_reg+0xa4>
   19bde:	bf00      	nop
   19be0:	00fffe00 	.word	0x00fffe00

00019be4 <uwb_dw1000_set_euid>:
{
   19be4:	b500      	push	{lr}
   19be6:	b085      	sub	sp, #20
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
   19be8:	2108      	movs	r1, #8
   19bea:	9102      	str	r1, [sp, #8]
   19bec:	e9cd 2300 	strd	r2, r3, [sp]
   19bf0:	2200      	movs	r2, #0
   19bf2:	2101      	movs	r1, #1
   19bf4:	f7ff ff7e 	bl	19af4 <dw1000_write_reg>
}
   19bf8:	b005      	add	sp, #20
   19bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00019bfe <uwb_dw1000_set_uid>:
{
   19bfe:	b500      	push	{lr}
   19c00:	b085      	sub	sp, #20
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
   19c02:	2302      	movs	r3, #2
   19c04:	9302      	str	r3, [sp, #8]
   19c06:	2200      	movs	r2, #0
   19c08:	9100      	str	r1, [sp, #0]
   19c0a:	9201      	str	r2, [sp, #4]
   19c0c:	2103      	movs	r1, #3
   19c0e:	f7ff ff71 	bl	19af4 <dw1000_write_reg>
}
   19c12:	b005      	add	sp, #20
   19c14:	f85d fb04 	ldr.w	pc, [sp], #4

00019c18 <uwb_dw1000_set_panid>:
{
   19c18:	b500      	push	{lr}
   19c1a:	b085      	sub	sp, #20
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
   19c1c:	2202      	movs	r2, #2
   19c1e:	9202      	str	r2, [sp, #8]
   19c20:	9100      	str	r1, [sp, #0]
   19c22:	2300      	movs	r3, #0
   19c24:	9301      	str	r3, [sp, #4]
   19c26:	2103      	movs	r1, #3
   19c28:	f7ff ff64 	bl	19af4 <dw1000_write_reg>
}
   19c2c:	b005      	add	sp, #20
   19c2e:	f85d fb04 	ldr.w	pc, [sp], #4

00019c32 <dw1000_softreset>:
{
   19c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c36:	b084      	sub	sp, #16
   19c38:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   19c3a:	f002 fdab 	bl	1c794 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   19c3e:	f04f 0802 	mov.w	r8, #2
   19c42:	f8cd 8008 	str.w	r8, [sp, #8]
   19c46:	2600      	movs	r6, #0
   19c48:	2700      	movs	r7, #0
   19c4a:	e9cd 6700 	strd	r6, r7, [sp]
   19c4e:	2204      	movs	r2, #4
   19c50:	2136      	movs	r1, #54	; 0x36
   19c52:	4620      	mov	r0, r4
   19c54:	f7ff ff4e 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
   19c58:	f8cd 8008 	str.w	r8, [sp, #8]
   19c5c:	e9cd 6700 	strd	r6, r7, [sp]
   19c60:	2200      	movs	r2, #0
   19c62:	212c      	movs	r1, #44	; 0x2c
   19c64:	4620      	mov	r0, r4
   19c66:	f7ff ff45 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   19c6a:	2501      	movs	r5, #1
   19c6c:	9502      	str	r5, [sp, #8]
   19c6e:	e9cd 6700 	strd	r6, r7, [sp]
   19c72:	2206      	movs	r2, #6
   19c74:	212c      	movs	r1, #44	; 0x2c
   19c76:	4620      	mov	r0, r4
   19c78:	f7ff ff3c 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
   19c7c:	9502      	str	r5, [sp, #8]
   19c7e:	e9cd 6700 	strd	r6, r7, [sp]
   19c82:	4642      	mov	r2, r8
   19c84:	212c      	movs	r1, #44	; 0x2c
   19c86:	4620      	mov	r0, r4
   19c88:	f7ff ff34 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
   19c8c:	9502      	str	r5, [sp, #8]
   19c8e:	2202      	movs	r2, #2
   19c90:	2300      	movs	r3, #0
   19c92:	e9cd 2300 	strd	r2, r3, [sp]
   19c96:	4642      	mov	r2, r8
   19c98:	212c      	movs	r1, #44	; 0x2c
   19c9a:	4620      	mov	r0, r4
   19c9c:	f7ff ff2a 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
   19ca0:	9502      	str	r5, [sp, #8]
   19ca2:	e9cd 6700 	strd	r6, r7, [sp]
   19ca6:	2203      	movs	r2, #3
   19ca8:	2136      	movs	r1, #54	; 0x36
   19caa:	4620      	mov	r0, r4
   19cac:	f7ff ff22 	bl	19af4 <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
   19cb0:	200a      	movs	r0, #10
   19cb2:	f7f8 fe2a 	bl	1290a <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
   19cb6:	9502      	str	r5, [sp, #8]
   19cb8:	22f0      	movs	r2, #240	; 0xf0
   19cba:	2300      	movs	r3, #0
   19cbc:	e9cd 2300 	strd	r2, r3, [sp]
   19cc0:	2203      	movs	r2, #3
   19cc2:	2136      	movs	r1, #54	; 0x36
   19cc4:	4620      	mov	r0, r4
   19cc6:	f7ff ff15 	bl	19af4 <dw1000_write_reg>
}
   19cca:	b004      	add	sp, #16
   19ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019cd0 <dw1000_dev_configure_sleep>:
{
   19cd0:	b530      	push	{r4, r5, lr}
   19cd2:	b085      	sub	sp, #20
   19cd4:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   19cd6:	2302      	movs	r3, #2
   19cd8:	2200      	movs	r2, #0
   19cda:	212c      	movs	r1, #44	; 0x2c
   19cdc:	f7ff fe9a 	bl	19a14 <dw1000_read_reg>
   19ce0:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
   19ce2:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   19ce6:	f012 0f10 	tst.w	r2, #16
   19cea:	d03a      	beq.n	19d62 <dw1000_dev_configure_sleep+0x92>
        reg |= AON_WCFG_ONW_LLDE;
   19cec:	f443 630c 	orr.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
   19cf0:	f012 0f20 	tst.w	r2, #32
   19cf4:	d03a      	beq.n	19d6c <dw1000_dev_configure_sleep+0x9c>
        reg |= AON_WCFG_ONW_LLDO;
   19cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
   19cfa:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
   19cfe:	f012 0f10 	tst.w	r2, #16
   19d02:	d037      	beq.n	19d74 <dw1000_dev_configure_sleep+0xa4>
        reg |= AON_WCFG_ONW_RX;
   19d04:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
   19d08:	2502      	movs	r5, #2
   19d0a:	9502      	str	r5, [sp, #8]
   19d0c:	2200      	movs	r2, #0
   19d0e:	9300      	str	r3, [sp, #0]
   19d10:	9201      	str	r2, [sp, #4]
   19d12:	212c      	movs	r1, #44	; 0x2c
   19d14:	4620      	mov	r0, r4
   19d16:	f7ff feed 	bl	19af4 <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   19d1a:	462b      	mov	r3, r5
   19d1c:	2206      	movs	r2, #6
   19d1e:	212c      	movs	r1, #44	; 0x2c
   19d20:	4620      	mov	r0, r4
   19d22:	f7ff fe77 	bl	19a14 <dw1000_read_reg>
   19d26:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   19d28:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   19d2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19d30:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   19d34:	f363 12c7 	bfi	r2, r3, #7, #1
   19d38:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
   19d3c:	b253      	sxtb	r3, r2
   19d3e:	2b00      	cmp	r3, #0
   19d40:	db1c      	blt.n	19d7c <dw1000_dev_configure_sleep+0xac>
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
   19d42:	f020 0009 	bic.w	r0, r0, #9
   19d46:	f040 0006 	orr.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   19d4a:	2302      	movs	r3, #2
   19d4c:	9302      	str	r3, [sp, #8]
   19d4e:	9000      	str	r0, [sp, #0]
   19d50:	2300      	movs	r3, #0
   19d52:	9301      	str	r3, [sp, #4]
   19d54:	2206      	movs	r2, #6
   19d56:	212c      	movs	r1, #44	; 0x2c
   19d58:	4620      	mov	r0, r4
   19d5a:	f7ff fecb 	bl	19af4 <dw1000_write_reg>
}
   19d5e:	b005      	add	sp, #20
   19d60:	bd30      	pop	{r4, r5, pc}
        reg &= ~AON_WCFG_ONW_LLDE;
   19d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   19d66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   19d6a:	e7c1      	b.n	19cf0 <dw1000_dev_configure_sleep+0x20>
        reg &= ~AON_WCFG_ONW_LLDO;
   19d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19d70:	b29b      	uxth	r3, r3
   19d72:	e7c2      	b.n	19cfa <dw1000_dev_configure_sleep+0x2a>
        reg &= ~AON_WCFG_ONW_RX;
   19d74:	f023 0302 	bic.w	r3, r3, #2
   19d78:	b29b      	uxth	r3, r3
   19d7a:	e7c5      	b.n	19d08 <dw1000_dev_configure_sleep+0x38>
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   19d7c:	f040 000f 	orr.w	r0, r0, #15
   19d80:	e7e3      	b.n	19d4a <dw1000_dev_configure_sleep+0x7a>

00019d82 <uwb_dw1000_sleep_config>:
{
   19d82:	b508      	push	{r3, lr}
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
   19d84:	f7ff ffa4 	bl	19cd0 <dw1000_dev_configure_sleep>
}
   19d88:	bd08      	pop	{r3, pc}

00019d8a <dw1000_dev_enter_sleep>:
{
   19d8a:	b570      	push	{r4, r5, r6, lr}
   19d8c:	b084      	sub	sp, #16
   19d8e:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19d90:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   19d94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19d98:	4628      	mov	r0, r5
   19d9a:	f7f0 ffc7 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   19d9e:	b148      	cbz	r0, 19db4 <dw1000_dev_enter_sleep+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   19da0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19da4:	f043 0308 	orr.w	r3, r3, #8
   19da8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   19dac:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19db0:	b004      	add	sp, #16
   19db2:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
   19db4:	2602      	movs	r6, #2
   19db6:	9602      	str	r6, [sp, #8]
   19db8:	2200      	movs	r2, #0
   19dba:	2300      	movs	r3, #0
   19dbc:	e9cd 2300 	strd	r2, r3, [sp]
   19dc0:	4632      	mov	r2, r6
   19dc2:	212c      	movs	r1, #44	; 0x2c
   19dc4:	4620      	mov	r0, r4
   19dc6:	f7ff fe95 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
   19dca:	9602      	str	r6, [sp, #8]
   19dcc:	2202      	movs	r2, #2
   19dce:	2300      	movs	r3, #0
   19dd0:	e9cd 2300 	strd	r2, r3, [sp]
   19dd4:	4632      	mov	r2, r6
   19dd6:	212c      	movs	r1, #44	; 0x2c
   19dd8:	4620      	mov	r0, r4
   19dda:	f7ff fe8b 	bl	19af4 <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
   19dde:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19de2:	f043 0301 	orr.w	r3, r3, #1
   19de6:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19dea:	4628      	mov	r0, r5
   19dec:	f7f0 ff42 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   19df0:	2800      	cmp	r0, #0
   19df2:	d0db      	beq.n	19dac <dw1000_dev_enter_sleep+0x22>
   19df4:	2300      	movs	r3, #0
   19df6:	461a      	mov	r2, r3
   19df8:	4619      	mov	r1, r3
   19dfa:	4618      	mov	r0, r3
   19dfc:	f7ef f9e2 	bl	91c4 <__assert_func>

00019e00 <uwb_dw1000_enter_sleep>:
{
   19e00:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
   19e02:	f7ff ffc2 	bl	19d8a <dw1000_dev_enter_sleep>
}
   19e06:	bd08      	pop	{r3, pc}

00019e08 <dw1000_dev_wakeup>:
{
   19e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e0a:	b085      	sub	sp, #20
   19e0c:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19e0e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   19e12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19e16:	4630      	mov	r0, r6
   19e18:	f7f0 ff88 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   19e1c:	b148      	cbz	r0, 19e32 <dw1000_dev_wakeup+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   19e1e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19e22:	f043 0308 	orr.w	r3, r3, #8
   19e26:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   19e2a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19e2e:	b005      	add	sp, #20
   19e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
   19e32:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19e36:	f36f 0300 	bfc	r3, #0, #1
   19e3a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   19e3e:	2304      	movs	r3, #4
   19e40:	2200      	movs	r2, #0
   19e42:	4611      	mov	r1, r2
   19e44:	4620      	mov	r0, r4
   19e46:	f7ff fde5 	bl	19a14 <dw1000_read_reg>
    int timeout=5;
   19e4a:	2505      	movs	r5, #5
    while (devid != 0xDECA0130 && --timeout)
   19e4c:	e008      	b.n	19e60 <dw1000_dev_wakeup+0x58>
        hal_dw1000_wakeup(inst);
   19e4e:	4620      	mov	r0, r4
   19e50:	f000 fd8e 	bl	1a970 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   19e54:	2304      	movs	r3, #4
   19e56:	2200      	movs	r2, #0
   19e58:	4611      	mov	r1, r2
   19e5a:	4620      	mov	r0, r4
   19e5c:	f7ff fdda 	bl	19a14 <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
   19e60:	4b29      	ldr	r3, [pc, #164]	; (19f08 <dw1000_dev_wakeup+0x100>)
   19e62:	4298      	cmp	r0, r3
   19e64:	d001      	beq.n	19e6a <dw1000_dev_wakeup+0x62>
   19e66:	3d01      	subs	r5, #1
   19e68:	d1f1      	bne.n	19e4e <dw1000_dev_wakeup+0x46>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   19e6a:	4b27      	ldr	r3, [pc, #156]	; (19f08 <dw1000_dev_wakeup+0x100>)
   19e6c:	1ac0      	subs	r0, r0, r3
   19e6e:	bf18      	it	ne
   19e70:	2001      	movne	r0, #1
   19e72:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19e76:	f360 0300 	bfi	r3, r0, #0, #1
   19e7a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   19e7e:	2504      	movs	r5, #4
   19e80:	9502      	str	r5, [sp, #8]
   19e82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19e86:	2300      	movs	r3, #0
   19e88:	e9cd 2300 	strd	r2, r3, [sp]
   19e8c:	2200      	movs	r2, #0
   19e8e:	210f      	movs	r1, #15
   19e90:	4620      	mov	r0, r4
   19e92:	f7ff fe2f 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
   19e96:	9502      	str	r5, [sp, #8]
   19e98:	a319      	add	r3, pc, #100	; (adr r3, 19f00 <dw1000_dev_wakeup+0xf8>)
   19e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e9e:	e9cd 2300 	strd	r2, r3, [sp]
   19ea2:	2200      	movs	r2, #0
   19ea4:	210f      	movs	r1, #15
   19ea6:	4620      	mov	r0, r4
   19ea8:	f7ff fe24 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   19eac:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   19eb0:	2702      	movs	r7, #2
   19eb2:	9702      	str	r7, [sp, #8]
   19eb4:	2500      	movs	r5, #0
   19eb6:	9300      	str	r3, [sp, #0]
   19eb8:	9501      	str	r5, [sp, #4]
   19eba:	f641 0204 	movw	r2, #6148	; 0x1804
   19ebe:	212e      	movs	r1, #46	; 0x2e
   19ec0:	4620      	mov	r0, r4
   19ec2:	f7ff fe17 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   19ec6:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   19eca:	9702      	str	r7, [sp, #8]
   19ecc:	9300      	str	r3, [sp, #0]
   19ece:	9501      	str	r5, [sp, #4]
   19ed0:	462a      	mov	r2, r5
   19ed2:	2118      	movs	r1, #24
   19ed4:	4620      	mov	r0, r4
   19ed6:	f7ff fe0d 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19eda:	4630      	mov	r0, r6
   19edc:	f7f0 feca 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   19ee0:	b940      	cbnz	r0, 19ef4 <dw1000_dev_wakeup+0xec>
   19ee2:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
   19ee6:	2b00      	cmp	r3, #0
   19ee8:	d19f      	bne.n	19e2a <dw1000_dev_wakeup+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
   19eea:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   19eee:	f7f0 f8cb 	bl	a088 <os_sem_release>
   19ef2:	e79a      	b.n	19e2a <dw1000_dev_wakeup+0x22>
    assert(err == DPL_OK);
   19ef4:	462b      	mov	r3, r5
   19ef6:	462a      	mov	r2, r5
   19ef8:	4629      	mov	r1, r5
   19efa:	4628      	mov	r0, r5
   19efc:	f7ef f962 	bl	91c4 <__assert_func>
   19f00:	24119000 	.word	0x24119000
   19f04:	00000000 	.word	0x00000000
   19f08:	deca0130 	.word	0xdeca0130

00019f0c <dw1000_dev_config>:
{
   19f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f0e:	b085      	sub	sp, #20
   19f10:	4604      	mov	r4, r0
    int timeout = 3;
   19f12:	2503      	movs	r5, #3
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   19f14:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
   19f18:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
   19f1c:	4620      	mov	r0, r4
   19f1e:	f000 fa0d 	bl	1a33c <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
   19f22:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19f26:	f004 f849 	bl	1dfbc <hal_spi_disable>
    assert(rc == 0);
   19f2a:	bb48      	cbnz	r0, 19f80 <dw1000_dev_config+0x74>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   19f2c:	f204 5694 	addw	r6, r4, #1428	; 0x594
   19f30:	4631      	mov	r1, r6
   19f32:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19f36:	f003 ffff 	bl	1df38 <hal_spi_config>
    assert(rc == 0);
   19f3a:	bb38      	cbnz	r0, 19f8c <dw1000_dev_config+0x80>
    rc = hal_spi_enable(inst->spi_num);
   19f3c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19f40:	f004 f816 	bl	1df70 <hal_spi_enable>
    assert(rc == 0);
   19f44:	bb40      	cbnz	r0, 19f98 <dw1000_dev_config+0x8c>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   19f46:	2304      	movs	r3, #4
   19f48:	2200      	movs	r2, #0
   19f4a:	4611      	mov	r1, r2
   19f4c:	4620      	mov	r0, r4
   19f4e:	f7ff fd61 	bl	19a14 <dw1000_read_reg>
   19f52:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   19f56:	4b55      	ldr	r3, [pc, #340]	; (1a0ac <dw1000_dev_config+0x1a0>)
   19f58:	4298      	cmp	r0, r3
   19f5a:	bf14      	ite	ne
   19f5c:	2000      	movne	r0, #0
   19f5e:	2001      	moveq	r0, #1
   19f60:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   19f64:	f360 0341 	bfi	r3, r0, #1, #1
   19f68:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
   19f6c:	b2db      	uxtb	r3, r3
   19f6e:	f013 0302 	ands.w	r3, r3, #2
   19f72:	d117      	bne.n	19fa4 <dw1000_dev_config+0x98>
   19f74:	3d01      	subs	r5, #1
   19f76:	d015      	beq.n	19fa4 <dw1000_dev_config+0x98>
        dw1000_dev_wakeup(inst);
   19f78:	4620      	mov	r0, r4
   19f7a:	f7ff ff45 	bl	19e08 <dw1000_dev_wakeup>
        goto retry;
   19f7e:	e7c9      	b.n	19f14 <dw1000_dev_config+0x8>
    assert(rc == 0);
   19f80:	2300      	movs	r3, #0
   19f82:	461a      	mov	r2, r3
   19f84:	4619      	mov	r1, r3
   19f86:	4618      	mov	r0, r3
   19f88:	f7ef f91c 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19f8c:	2300      	movs	r3, #0
   19f8e:	461a      	mov	r2, r3
   19f90:	4619      	mov	r1, r3
   19f92:	4618      	mov	r0, r3
   19f94:	f7ef f916 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19f98:	2300      	movs	r3, #0
   19f9a:	461a      	mov	r2, r3
   19f9c:	4619      	mov	r1, r3
   19f9e:	4618      	mov	r0, r3
   19fa0:	f7ef f910 	bl	91c4 <__assert_func>
    if(!inst->uwb_dev.status.initialized)
   19fa4:	2b00      	cmp	r3, #0
   19fa6:	d07f      	beq.n	1a0a8 <dw1000_dev_config+0x19c>
    dw1000_phy_init(inst, NULL);
   19fa8:	2100      	movs	r1, #0
   19faa:	4620      	mov	r0, r4
   19fac:	f002 fcbe 	bl	1c92c <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
   19fb0:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
   19fb4:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   19fb8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19fbc:	f003 fffe 	bl	1dfbc <hal_spi_disable>
    assert(rc == 0);
   19fc0:	2800      	cmp	r0, #0
   19fc2:	d15f      	bne.n	1a084 <dw1000_dev_config+0x178>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   19fc4:	4631      	mov	r1, r6
   19fc6:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19fca:	f003 ffb5 	bl	1df38 <hal_spi_config>
    assert(rc == 0);
   19fce:	2800      	cmp	r0, #0
   19fd0:	d15e      	bne.n	1a090 <dw1000_dev_config+0x184>
    rc = hal_spi_enable(inst->spi_num);
   19fd2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19fd6:	f003 ffcb 	bl	1df70 <hal_spi_enable>
    assert(rc == 0);
   19fda:	4607      	mov	r7, r0
   19fdc:	2800      	cmp	r0, #0
   19fde:	d15d      	bne.n	1a09c <dw1000_dev_config+0x190>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
   19fe0:	f64d 63ca 	movw	r3, #57034	; 0xdeca
   19fe4:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
   19fe8:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
   19fec:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
   19ff0:	2000      	movs	r0, #0
   19ff2:	f000 f997 	bl	1a324 <hal_dw1000_inst>
   19ff6:	4284      	cmp	r4, r0
   19ff8:	d007      	beq.n	1a00a <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(1)){
   19ffa:	2001      	movs	r0, #1
   19ffc:	f000 f992 	bl	1a324 <hal_dw1000_inst>
   1a000:	4284      	cmp	r4, r0
   1a002:	d002      	beq.n	1a00a <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(2)){
   1a004:	2002      	movs	r0, #2
   1a006:	f000 f98d 	bl	1a324 <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
   1a00a:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
   1a00e:	f8d4 1574 	ldr.w	r1, [r4, #1396]	; 0x574
   1a012:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
   1a016:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
    dw1000_mac_init(inst, NULL);
   1a01a:	2100      	movs	r1, #0
   1a01c:	4620      	mov	r0, r4
   1a01e:	f001 fd15 	bl	1ba4c <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
   1a022:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1a026:	3b01      	subs	r3, #1
   1a028:	b29b      	uxth	r3, r3
   1a02a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1a02e:	4293      	cmp	r3, r2
   1a030:	d902      	bls.n	1a038 <dw1000_dev_config+0x12c>
        inst->uwb_dev.uid = 0x1;
   1a032:	2301      	movs	r3, #1
   1a034:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
   1a038:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
   1a03c:	2602      	movs	r6, #2
   1a03e:	9602      	str	r6, [sp, #8]
   1a040:	2500      	movs	r5, #0
   1a042:	9300      	str	r3, [sp, #0]
   1a044:	9501      	str	r5, [sp, #4]
   1a046:	4632      	mov	r2, r6
   1a048:	2103      	movs	r1, #3
   1a04a:	4620      	mov	r0, r4
   1a04c:	f7ff fd52 	bl	19af4 <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
   1a050:	2308      	movs	r3, #8
   1a052:	9302      	str	r3, [sp, #8]
   1a054:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
   1a058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1a05c:	e9cd 2300 	strd	r2, r3, [sp]
   1a060:	462a      	mov	r2, r5
   1a062:	2101      	movs	r1, #1
   1a064:	4620      	mov	r0, r4
   1a066:	f7ff fd45 	bl	19af4 <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
   1a06a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   1a06e:	9602      	str	r6, [sp, #8]
   1a070:	9300      	str	r3, [sp, #0]
   1a072:	9501      	str	r5, [sp, #4]
   1a074:	462a      	mov	r2, r5
   1a076:	2103      	movs	r1, #3
   1a078:	4620      	mov	r0, r4
   1a07a:	f7ff fd3b 	bl	19af4 <dw1000_write_reg>
}
   1a07e:	4638      	mov	r0, r7
   1a080:	b005      	add	sp, #20
   1a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
   1a084:	2300      	movs	r3, #0
   1a086:	461a      	mov	r2, r3
   1a088:	4619      	mov	r1, r3
   1a08a:	4618      	mov	r0, r3
   1a08c:	f7ef f89a 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1a090:	2300      	movs	r3, #0
   1a092:	461a      	mov	r2, r3
   1a094:	4619      	mov	r1, r3
   1a096:	4618      	mov	r0, r3
   1a098:	f7ef f894 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1a09c:	2300      	movs	r3, #0
   1a09e:	461a      	mov	r2, r3
   1a0a0:	4619      	mov	r1, r3
   1a0a2:	4618      	mov	r0, r3
   1a0a4:	f7ef f88e 	bl	91c4 <__assert_func>
        return DPL_TIMEOUT;
   1a0a8:	2706      	movs	r7, #6
   1a0aa:	e7e8      	b.n	1a07e <dw1000_dev_config+0x172>
   1a0ac:	deca0130 	.word	0xdeca0130

0001a0b0 <uwb_dw1000_wakeup>:
{
   1a0b0:	b508      	push	{r3, lr}
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
   1a0b2:	f7ff fea9 	bl	19e08 <dw1000_dev_wakeup>
}
   1a0b6:	bd08      	pop	{r3, pc}

0001a0b8 <dw1000_dev_enter_sleep_after_tx>:
{
   1a0b8:	b530      	push	{r4, r5, lr}
   1a0ba:	b085      	sub	sp, #20
   1a0bc:	4604      	mov	r4, r0
   1a0be:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   1a0c0:	2304      	movs	r3, #4
   1a0c2:	461a      	mov	r2, r3
   1a0c4:	2136      	movs	r1, #54	; 0x36
   1a0c6:	f7ff fca5 	bl	19a14 <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
   1a0ca:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1a0ce:	f365 13c7 	bfi	r3, r5, #7, #1
   1a0d2:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
   1a0d6:	b25b      	sxtb	r3, r3
   1a0d8:	2b00      	cmp	r3, #0
   1a0da:	db0e      	blt.n	1a0fa <dw1000_dev_enter_sleep_after_tx+0x42>
        reg &= ~(PMSC_CTRL1_ATXSLP);
   1a0dc:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   1a0e0:	2204      	movs	r2, #4
   1a0e2:	9202      	str	r2, [sp, #8]
   1a0e4:	9000      	str	r0, [sp, #0]
   1a0e6:	2300      	movs	r3, #0
   1a0e8:	9301      	str	r3, [sp, #4]
   1a0ea:	2136      	movs	r1, #54	; 0x36
   1a0ec:	4620      	mov	r0, r4
   1a0ee:	f7ff fd01 	bl	19af4 <dw1000_write_reg>
}
   1a0f2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a0f6:	b005      	add	sp, #20
   1a0f8:	bd30      	pop	{r4, r5, pc}
        reg |= PMSC_CTRL1_ATXSLP;
   1a0fa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   1a0fe:	e7ef      	b.n	1a0e0 <dw1000_dev_enter_sleep_after_tx+0x28>

0001a100 <uwb_dw1000_enter_sleep_after_tx>:
{
   1a100:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
   1a102:	f7ff ffd9 	bl	1a0b8 <dw1000_dev_enter_sleep_after_tx>
}
   1a106:	bd08      	pop	{r3, pc}

0001a108 <dw1000_dev_enter_sleep_after_rx>:
{
   1a108:	b530      	push	{r4, r5, lr}
   1a10a:	b085      	sub	sp, #20
   1a10c:	4604      	mov	r4, r0
   1a10e:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   1a110:	2304      	movs	r3, #4
   1a112:	461a      	mov	r2, r3
   1a114:	2136      	movs	r1, #54	; 0x36
   1a116:	f7ff fc7d 	bl	19a14 <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
   1a11a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1a11e:	f365 0300 	bfi	r3, r5, #0, #1
   1a122:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
   1a126:	b2db      	uxtb	r3, r3
   1a128:	f013 0f01 	tst.w	r3, #1
   1a12c:	d00e      	beq.n	1a14c <dw1000_dev_enter_sleep_after_rx+0x44>
        reg |= PMSC_CTRL1_ARXSLP;
   1a12e:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   1a132:	2204      	movs	r2, #4
   1a134:	9202      	str	r2, [sp, #8]
   1a136:	9000      	str	r0, [sp, #0]
   1a138:	2300      	movs	r3, #0
   1a13a:	9301      	str	r3, [sp, #4]
   1a13c:	2136      	movs	r1, #54	; 0x36
   1a13e:	4620      	mov	r0, r4
   1a140:	f7ff fcd8 	bl	19af4 <dw1000_write_reg>
}
   1a144:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a148:	b005      	add	sp, #20
   1a14a:	bd30      	pop	{r4, r5, pc}
        reg &= ~(PMSC_CTRL1_ARXSLP);
   1a14c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
   1a150:	e7ef      	b.n	1a132 <dw1000_dev_enter_sleep_after_rx+0x2a>

0001a152 <uwb_dw1000_enter_sleep_after_rx>:
{
   1a152:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
   1a154:	f7ff ffd8 	bl	1a108 <dw1000_dev_enter_sleep_after_rx>
}
   1a158:	bd08      	pop	{r3, pc}
	...

0001a15c <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
   1a15c:	b538      	push	{r3, r4, r5, lr}
   1a15e:	4604      	mov	r4, r0
   1a160:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1a162:	f7f8 fbc2 	bl	128ea <dpl_cputime_get32>
   1a166:	4601      	mov	r1, r0
   1a168:	4840      	ldr	r0, [pc, #256]	; (1a26c <dw1000_dev_init+0x110>)
   1a16a:	f7f6 feaf 	bl	10ecc <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
   1a16e:	2300      	movs	r3, #0
   1a170:	6023      	str	r3, [r4, #0]
   1a172:	60e3      	str	r3, [r4, #12]

    if (inst == NULL) {
   1a174:	2c00      	cmp	r4, #0
   1a176:	d052      	beq.n	1a21e <dw1000_dev_init+0xc2>
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
   1a178:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a17c:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
   1a180:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a184:	f8a4 3506 	strh.w	r3, [r4, #1286]	; 0x506
    uwb_dev_init(udev);
   1a188:	4620      	mov	r0, r4
   1a18a:	f7ee fe47 	bl	8e1c <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
   1a18e:	4b38      	ldr	r3, [pc, #224]	; (1a270 <dw1000_dev_init+0x114>)
   1a190:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
   1a192:	f204 539c 	addw	r3, r4, #1436	; 0x59c
   1a196:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
   1a19a:	2314      	movs	r3, #20
   1a19c:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
   1a1a0:	682b      	ldr	r3, [r5, #0]
   1a1a2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
   1a1a6:	7b2b      	ldrb	r3, [r5, #12]
   1a1a8:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
   1a1ac:	686b      	ldr	r3, [r5, #4]
   1a1ae:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
   1a1b2:	68ab      	ldr	r3, [r5, #8]
   1a1b4:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
   1a1b8:	7bab      	ldrb	r3, [r5, #14]
   1a1ba:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
   1a1be:	7b6b      	ldrb	r3, [r5, #13]
   1a1c0:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
   1a1c4:	7beb      	ldrb	r3, [r5, #15]
   1a1c6:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
   1a1ca:	8a2b      	ldrh	r3, [r5, #16]
   1a1cc:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
   1a1d0:	8a6b      	ldrh	r3, [r5, #18]
   1a1d2:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
   1a1d6:	696b      	ldr	r3, [r5, #20]
   1a1d8:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
   1a1dc:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   1a1e0:	f7f0 fd3e 	bl	ac60 <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
   1a1e4:	bb78      	cbnz	r0, 1a246 <dw1000_dev_init+0xea>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   1a1e6:	2101      	movs	r1, #1
   1a1e8:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1a1ec:	f7ef ff44 	bl	a078 <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
   1a1f0:	bb78      	cbnz	r0, 1a252 <dw1000_dev_init+0xf6>
   1a1f2:	2101      	movs	r1, #1
   1a1f4:	f204 504c 	addw	r0, r4, #1356	; 0x54c
   1a1f8:	f7ef ff3e 	bl	a078 <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
   1a1fc:	bb78      	cbnz	r0, 1a25e <dw1000_dev_init+0x102>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
   1a1fe:	f204 5334 	addw	r3, r4, #1332	; 0x534
   1a202:	4a1c      	ldr	r2, [pc, #112]	; (1a274 <dw1000_dev_init+0x118>)
   1a204:	601a      	str	r2, [r3, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
   1a206:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
   1a20a:	4a1b      	ldr	r2, [pc, #108]	; (1a278 <dw1000_dev_init+0x11c>)
   1a20c:	601a      	str	r2, [r3, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
   1a20e:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1a212:	4a1a      	ldr	r2, [pc, #104]	; (1a27c <dw1000_dev_init+0x120>)
   1a214:	601a      	str	r2, [r3, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
   1a216:	2000      	movs	r0, #0
   1a218:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
#endif
    return DPL_OK;
}
   1a21c:	bd38      	pop	{r3, r4, r5, pc}
        inst = (dw1000_dev_instance_t *) calloc(1, sizeof(dw1000_dev_instance_t));
   1a21e:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
   1a222:	2001      	movs	r0, #1
   1a224:	f7f6 f8f7 	bl	10416 <calloc>
        assert(inst);
   1a228:	4604      	mov	r4, r0
   1a22a:	b130      	cbz	r0, 1a23a <dw1000_dev_init+0xde>
        inst->uwb_dev.status.selfmalloc = 1;
   1a22c:	f890 3508 	ldrb.w	r3, [r0, #1288]	; 0x508
   1a230:	f043 0301 	orr.w	r3, r3, #1
   1a234:	f880 3508 	strb.w	r3, [r0, #1288]	; 0x508
        udev = (struct uwb_dev*)inst;
   1a238:	e79e      	b.n	1a178 <dw1000_dev_init+0x1c>
        assert(inst);
   1a23a:	2300      	movs	r3, #0
   1a23c:	461a      	mov	r2, r3
   1a23e:	4619      	mov	r1, r3
   1a240:	4618      	mov	r0, r3
   1a242:	f7ee ffbf 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   1a246:	2300      	movs	r3, #0
   1a248:	461a      	mov	r2, r3
   1a24a:	4619      	mov	r1, r3
   1a24c:	4618      	mov	r0, r3
   1a24e:	f7ee ffb9 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   1a252:	2300      	movs	r3, #0
   1a254:	461a      	mov	r2, r3
   1a256:	4619      	mov	r1, r3
   1a258:	4618      	mov	r0, r3
   1a25a:	f7ee ffb3 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   1a25e:	2300      	movs	r3, #0
   1a260:	461a      	mov	r2, r3
   1a262:	4619      	mov	r1, r3
   1a264:	4618      	mov	r0, r3
   1a266:	f7ee ffad 	bl	91c4 <__assert_func>
   1a26a:	bf00      	nop
   1a26c:	00026e18 	.word	0x00026e18
   1a270:	00026e5c 	.word	0x00026e5c
   1a274:	3f8241a4 	.word	0x3f8241a4
   1a278:	3f834834 	.word	0x3f834834
   1a27c:	3e034833 	.word	0x3e034833

0001a280 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
   1a280:	b510      	push	{r4, lr}
    assert(inst);
   1a282:	b1d8      	cbz	r0, 1a2bc <dw1000_dev_deinit+0x3c>
   1a284:	4604      	mov	r4, r0
    hal_spi_disable(inst->spi_num);
   1a286:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1a28a:	f003 fe97 	bl	1dfbc <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
   1a28e:	4620      	mov	r0, r4
   1a290:	f7ee fdb8 	bl	8e04 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
   1a294:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1a298:	f7ee ff68 	bl	916c <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
   1a29c:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1a2a0:	f7ee ff72 	bl	9188 <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
   1a2a4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1a2a8:	f013 0f01 	tst.w	r3, #1
   1a2ac:	d10c      	bne.n	1a2c8 <dw1000_dev_deinit+0x48>
        free(inst);
    } else {
        inst->uwb_dev.status.initialized = 0;
   1a2ae:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1a2b2:	f36f 0341 	bfc	r3, #1, #1
   1a2b6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    }
}
   1a2ba:	bd10      	pop	{r4, pc}
    assert(inst);
   1a2bc:	2300      	movs	r3, #0
   1a2be:	461a      	mov	r2, r3
   1a2c0:	4619      	mov	r1, r3
   1a2c2:	4618      	mov	r0, r3
   1a2c4:	f7ee ff7e 	bl	91c4 <__assert_func>
        free(inst);
   1a2c8:	4620      	mov	r0, r4
   1a2ca:	f7f6 f99f 	bl	1060c <free>
   1a2ce:	e7f4      	b.n	1a2ba <dw1000_dev_deinit+0x3a>

0001a2d0 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
   1a2d0:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
   1a2d2:	b148      	cbz	r0, 1a2e8 <hal_dw1000_spi_txrx_cb+0x18>
   1a2d4:	4604      	mov	r4, r0
   1a2d6:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
   1a2da:	b98b      	cbnz	r3, 1a300 <hal_dw1000_spi_txrx_cb+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a2dc:	f200 504c 	addw	r0, r0, #1356	; 0x54c
   1a2e0:	f7ef fed2 	bl	a088 <os_sem_release>
        err = dpl_sem_release(&inst->spi_nb_sem);
        assert(err == DPL_OK);
   1a2e4:	b930      	cbnz	r0, 1a2f4 <hal_dw1000_spi_txrx_cb+0x24>
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
    }
}
   1a2e6:	bd10      	pop	{r4, pc}
    assert(inst!=0);
   1a2e8:	2300      	movs	r3, #0
   1a2ea:	461a      	mov	r2, r3
   1a2ec:	4619      	mov	r1, r3
   1a2ee:	4618      	mov	r0, r3
   1a2f0:	f7ee ff68 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
   1a2f4:	2300      	movs	r3, #0
   1a2f6:	461a      	mov	r2, r3
   1a2f8:	4619      	mov	r1, r3
   1a2fa:	4618      	mov	r0, r3
   1a2fc:	f7ee ff62 	bl	91c4 <__assert_func>
        hal_gpio_write(inst->ss_pin, 1);
   1a300:	2101      	movs	r1, #1
   1a302:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   1a306:	f7ee fea9 	bl	905c <hal_gpio_write>
   1a30a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a30e:	f7ef febb 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   1a312:	2800      	cmp	r0, #0
   1a314:	d0e7      	beq.n	1a2e6 <hal_dw1000_spi_txrx_cb+0x16>
   1a316:	2300      	movs	r3, #0
   1a318:	461a      	mov	r2, r3
   1a31a:	4619      	mov	r1, r3
   1a31c:	4618      	mov	r0, r3
   1a31e:	f7ee ff51 	bl	91c4 <__assert_func>
	...

0001a324 <hal_dw1000_inst>:
    if (idx < ARRAY_SIZE(hal_dw1000_instances)) {
   1a324:	4603      	mov	r3, r0
   1a326:	b928      	cbnz	r0, 1a334 <hal_dw1000_inst+0x10>
        return &hal_dw1000_instances[idx];
   1a328:	4803      	ldr	r0, [pc, #12]	; (1a338 <hal_dw1000_inst+0x14>)
   1a32a:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
   1a32e:	fb02 0003 	mla	r0, r2, r3, r0
   1a332:	4770      	bx	lr
    return 0;
   1a334:	2000      	movs	r0, #0
}
   1a336:	4770      	bx	lr
   1a338:	20000890 	.word	0x20000890

0001a33c <hal_dw1000_reset>:
{
   1a33c:	b510      	push	{r4, lr}
    assert(inst);
   1a33e:	b308      	cbz	r0, 1a384 <hal_dw1000_reset+0x48>
   1a340:	4604      	mov	r4, r0
    hal_gpio_init_out(inst->ss_pin, 1);
   1a342:	2101      	movs	r1, #1
   1a344:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   1a348:	f7ee fe6c 	bl	9024 <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
   1a34c:	2100      	movs	r1, #0
   1a34e:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a352:	f7ee fe67 	bl	9024 <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
   1a356:	2100      	movs	r1, #0
   1a358:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a35c:	f7ee fe7e 	bl	905c <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
   1a360:	2001      	movs	r0, #1
   1a362:	f7f8 fad2 	bl	1290a <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
   1a366:	2101      	movs	r1, #1
   1a368:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a36c:	f7ee fe76 	bl	905c <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
   1a370:	2100      	movs	r1, #0
   1a372:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a376:	f7ee fe3f 	bl	8ff8 <hal_gpio_init_in>
    dpl_cputime_delay_usecs(5000);
   1a37a:	f241 3088 	movw	r0, #5000	; 0x1388
   1a37e:	f7f8 fac4 	bl	1290a <dpl_cputime_delay_usecs>
}
   1a382:	bd10      	pop	{r4, pc}
    assert(inst);
   1a384:	2300      	movs	r3, #0
   1a386:	461a      	mov	r2, r3
   1a388:	4619      	mov	r1, r3
   1a38a:	4618      	mov	r0, r3
   1a38c:	f7ee ff1a 	bl	91c4 <__assert_func>

0001a390 <hal_dw1000_read>:
{
   1a390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a394:	4605      	mov	r5, r0
   1a396:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    assert(inst->spi_sem);
   1a39a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a39e:	b178      	cbz	r0, 1a3c0 <hal_dw1000_read+0x30>
   1a3a0:	460e      	mov	r6, r1
   1a3a2:	4617      	mov	r7, r2
   1a3a4:	4698      	mov	r8, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a3a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3aa:	f7ef fe9f 	bl	a0ec <os_sem_pend>
    if (rc != DPL_OK) {
   1a3ae:	b168      	cbz	r0, 1a3cc <hal_dw1000_read+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   1a3b0:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1a3b4:	f043 0304 	orr.w	r3, r3, #4
   1a3b8:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   1a3bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   1a3c0:	2300      	movs	r3, #0
   1a3c2:	461a      	mov	r2, r3
   1a3c4:	4619      	mov	r1, r3
   1a3c6:	4618      	mov	r0, r3
   1a3c8:	f7ee fefc 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a3cc:	2100      	movs	r1, #0
   1a3ce:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   1a3d2:	f7ee fe43 	bl	905c <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   1a3d6:	463b      	mov	r3, r7
   1a3d8:	2200      	movs	r2, #0
   1a3da:	4631      	mov	r1, r6
   1a3dc:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   1a3e0:	f003 fe66 	bl	1e0b0 <hal_spi_txrx>
    assert(rc == DPL_OK);
   1a3e4:	b9c0      	cbnz	r0, 1a418 <hal_dw1000_read+0x88>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   1a3e6:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   1a3ea:	2fff      	cmp	r7, #255	; 0xff
   1a3ec:	bf28      	it	cs
   1a3ee:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1a3f0:	4604      	mov	r4, r0
    int bytes_left = length;
   1a3f2:	464e      	mov	r6, r9
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1a3f4:	454c      	cmp	r4, r9
   1a3f6:	da15      	bge.n	1a424 <hal_dw1000_read+0x94>
   1a3f8:	b9a0      	cbnz	r0, 1a424 <hal_dw1000_read+0x94>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   1a3fa:	4633      	mov	r3, r6
   1a3fc:	42be      	cmp	r6, r7
   1a3fe:	bfa8      	it	ge
   1a400:	463b      	movge	r3, r7
        bytes_left-=bytes_to_read;
   1a402:	1af6      	subs	r6, r6, r3
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   1a404:	eb08 0204 	add.w	r2, r8, r4
   1a408:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
   1a40c:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   1a410:	f003 fe4e 	bl	1e0b0 <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1a414:	443c      	add	r4, r7
   1a416:	e7ed      	b.n	1a3f4 <hal_dw1000_read+0x64>
    assert(rc == DPL_OK);
   1a418:	2300      	movs	r3, #0
   1a41a:	461a      	mov	r2, r3
   1a41c:	4619      	mov	r1, r3
   1a41e:	4618      	mov	r0, r3
   1a420:	f7ee fed0 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 1);
   1a424:	2101      	movs	r1, #1
   1a426:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   1a42a:	f7ee fe17 	bl	905c <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a42e:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
   1a432:	f7ef fe29 	bl	a088 <os_sem_release>
    assert(rc == DPL_OK);
   1a436:	2800      	cmp	r0, #0
   1a438:	d0c0      	beq.n	1a3bc <hal_dw1000_read+0x2c>
   1a43a:	2300      	movs	r3, #0
   1a43c:	461a      	mov	r2, r3
   1a43e:	4619      	mov	r1, r3
   1a440:	4618      	mov	r0, r3
   1a442:	f7ee febf 	bl	91c4 <__assert_func>
	...

0001a448 <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1a448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a44c:	4604      	mov	r4, r0
   1a44e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(inst->spi_sem);
   1a452:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a456:	b178      	cbz	r0, 1a478 <hal_dw1000_read_noblock+0x30>
   1a458:	4688      	mov	r8, r1
   1a45a:	4617      	mov	r7, r2
   1a45c:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a45e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a462:	f7ef fe43 	bl	a0ec <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1a466:	b168      	cbz	r0, 1a484 <hal_dw1000_read_noblock+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   1a468:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a46c:	f043 0304 	orr.w	r3, r3, #4
   1a470:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
   1a474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst->spi_sem);
   1a478:	2300      	movs	r3, #0
   1a47a:	461a      	mov	r2, r3
   1a47c:	4619      	mov	r1, r3
   1a47e:	4618      	mov	r0, r3
   1a480:	f7ee fea0 	bl	91c4 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   1a484:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a488:	f003 fd98 	bl	1dfbc <hal_spi_disable>
   1a48c:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   1a48e:	4622      	mov	r2, r4
   1a490:	4987      	ldr	r1, [pc, #540]	; (1a6b0 <hal_dw1000_read_noblock+0x268>)
   1a492:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a496:	f003 fdf5 	bl	1e084 <hal_spi_set_txrx_cb>
   1a49a:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   1a49c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a4a0:	f003 fd66 	bl	1df70 <hal_spi_enable>
    if (rc != DPL_OK) {
   1a4a4:	ea55 0300 	orrs.w	r3, r5, r0
   1a4a8:	d00b      	beq.n	1a4c2 <hal_dw1000_read_noblock+0x7a>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a4aa:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a4ae:	f7ef fdeb 	bl	a088 <os_sem_release>
    assert(rc == DPL_OK);
   1a4b2:	2800      	cmp	r0, #0
   1a4b4:	d0de      	beq.n	1a474 <hal_dw1000_read_noblock+0x2c>
   1a4b6:	2300      	movs	r3, #0
   1a4b8:	461a      	mov	r2, r3
   1a4ba:	4619      	mov	r1, r3
   1a4bc:	4618      	mov	r0, r3
   1a4be:	f7ee fe81 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a4c2:	2100      	movs	r1, #0
   1a4c4:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a4c8:	f7ee fdc8 	bl	905c <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   1a4cc:	eb07 0509 	add.w	r5, r7, r9
   1a4d0:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   1a4d4:	429d      	cmp	r5, r3
   1a4d6:	da01      	bge.n	1a4dc <hal_dw1000_read_noblock+0x94>
   1a4d8:	2dfe      	cmp	r5, #254	; 0xfe
   1a4da:	dd0f      	ble.n	1a4fc <hal_dw1000_read_noblock+0xb4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a4dc:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   1a4e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a4e4:	4650      	mov	r0, sl
   1a4e6:	f7ef fe01 	bl	a0ec <os_sem_pend>
    if (rc != DPL_OK) {
   1a4ea:	2800      	cmp	r0, #0
   1a4ec:	d059      	beq.n	1a5a2 <hal_dw1000_read_noblock+0x15a>
        inst->uwb_dev.status.sem_error = 1;
   1a4ee:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a4f2:	f043 0304 	orr.w	r3, r3, #4
   1a4f6:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a4fa:	e7d6      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
   1a4fc:	462a      	mov	r2, r5
   1a4fe:	2100      	movs	r1, #0
   1a500:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a504:	f7f6 f8c9 	bl	1069a <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   1a508:	463a      	mov	r2, r7
   1a50a:	4641      	mov	r1, r8
   1a50c:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a510:	f7f6 f8b6 	bl	10680 <memcpy>
   1a514:	f204 584c 	addw	r8, r4, #1356	; 0x54c
   1a518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a51c:	4640      	mov	r0, r8
   1a51e:	f7ef fde5 	bl	a0ec <os_sem_pend>
        if (rc != DPL_OK) {
   1a522:	b130      	cbz	r0, 1a532 <hal_dw1000_read_noblock+0xea>
            inst->uwb_dev.status.sem_error = 1;
   1a524:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a528:	f043 0304 	orr.w	r3, r3, #4
   1a52c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   1a530:	e7bb      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
   1a532:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a536:	462b      	mov	r3, r5
   1a538:	460a      	mov	r2, r1
   1a53a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a53e:	f003 fe0d 	bl	1e15c <hal_spi_txrx_noblock>
   1a542:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a546:	4640      	mov	r0, r8
   1a548:	f7ef fdd0 	bl	a0ec <os_sem_pend>
        if (rc != DPL_OK) {
   1a54c:	b130      	cbz	r0, 1a55c <hal_dw1000_read_noblock+0x114>
            inst->uwb_dev.status.sem_error = 1;
   1a54e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a552:	f043 0304 	orr.w	r3, r3, #4
   1a556:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   1a55a:	e7a6      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a55c:	4640      	mov	r0, r8
   1a55e:	f7ef fd93 	bl	a088 <os_sem_release>
        assert(rc == DPL_OK);
   1a562:	b9c0      	cbnz	r0, 1a596 <hal_dw1000_read_noblock+0x14e>
        hal_gpio_write(inst->ss_pin, 1);
   1a564:	2101      	movs	r1, #1
   1a566:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a56a:	f7ee fd77 	bl	905c <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
   1a56e:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a572:	464a      	mov	r2, r9
   1a574:	4439      	add	r1, r7
   1a576:	4630      	mov	r0, r6
   1a578:	f7f6 f882 	bl	10680 <memcpy>
   1a57c:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a580:	f7ef fd82 	bl	a088 <os_sem_release>
        assert(rc == DPL_OK);
   1a584:	2800      	cmp	r0, #0
   1a586:	f43f af75 	beq.w	1a474 <hal_dw1000_read_noblock+0x2c>
   1a58a:	2300      	movs	r3, #0
   1a58c:	461a      	mov	r2, r3
   1a58e:	4619      	mov	r1, r3
   1a590:	4618      	mov	r0, r3
   1a592:	f7ee fe17 	bl	91c4 <__assert_func>
        assert(rc == DPL_OK);
   1a596:	2300      	movs	r3, #0
   1a598:	461a      	mov	r2, r3
   1a59a:	4619      	mov	r1, r3
   1a59c:	4618      	mov	r0, r3
   1a59e:	f7ee fe11 	bl	91c4 <__assert_func>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   1a5a2:	463b      	mov	r3, r7
   1a5a4:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   1a5a8:	4641      	mov	r1, r8
   1a5aa:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a5ae:	f003 fdd5 	bl	1e15c <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
   1a5b2:	4680      	mov	r8, r0
   1a5b4:	2800      	cmp	r0, #0
   1a5b6:	f47f af78 	bne.w	1a4aa <hal_dw1000_read_noblock+0x62>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
   1a5ba:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
   1a5be:	454a      	cmp	r2, r9
   1a5c0:	bf28      	it	cs
   1a5c2:	464a      	movcs	r2, r9
   1a5c4:	2100      	movs	r1, #0
   1a5c6:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a5ca:	f7f6 f866 	bl	1069a <memset>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a5ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a5d2:	4650      	mov	r0, sl
   1a5d4:	f7ef fd8a 	bl	a0ec <os_sem_pend>
    if (rc != DPL_OK) {
   1a5d8:	b130      	cbz	r0, 1a5e8 <hal_dw1000_read_noblock+0x1a0>
        inst->uwb_dev.status.sem_error = 1;
   1a5da:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a5de:	f043 0304 	orr.w	r3, r3, #4
   1a5e2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a5e6:	e760      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a5e8:	4650      	mov	r0, sl
   1a5ea:	f7ef fd4d 	bl	a088 <os_sem_release>
    assert(rc == DPL_OK);
   1a5ee:	b940      	cbnz	r0, 1a602 <hal_dw1000_read_noblock+0x1ba>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
   1a5f0:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   1a5f4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1a5f8:	bf28      	it	cs
   1a5fa:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   1a5fe:	464d      	mov	r5, r9
    while (offset<length) {
   1a600:	e011      	b.n	1a626 <hal_dw1000_read_noblock+0x1de>
    assert(rc == DPL_OK);
   1a602:	2300      	movs	r3, #0
   1a604:	461a      	mov	r2, r3
   1a606:	4619      	mov	r1, r3
   1a608:	4618      	mov	r0, r3
   1a60a:	f7ee fddb 	bl	91c4 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   1a60e:	463b      	mov	r3, r7
   1a610:	eb06 0208 	add.w	r2, r6, r8
   1a614:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a618:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a61c:	f003 fd9e 	bl	1e15c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   1a620:	b9b8      	cbnz	r0, 1a652 <hal_dw1000_read_noblock+0x20a>
        if (bytes_left) {
   1a622:	b9e5      	cbnz	r5, 1a65e <hal_dw1000_read_noblock+0x216>
        offset+=bytes_to_read;
   1a624:	44b8      	add	r8, r7
    while (offset<length) {
   1a626:	45c1      	cmp	r9, r8
   1a628:	dd31      	ble.n	1a68e <hal_dw1000_read_noblock+0x246>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   1a62a:	462f      	mov	r7, r5
   1a62c:	455d      	cmp	r5, fp
   1a62e:	bfa8      	it	ge
   1a630:	465f      	movge	r7, fp
        if (bytes_left) {
   1a632:	1bed      	subs	r5, r5, r7
   1a634:	d0eb      	beq.n	1a60e <hal_dw1000_read_noblock+0x1c6>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a636:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a63a:	4650      	mov	r0, sl
   1a63c:	f7ef fd56 	bl	a0ec <os_sem_pend>
            if (rc != DPL_OK) {
   1a640:	2800      	cmp	r0, #0
   1a642:	d0e4      	beq.n	1a60e <hal_dw1000_read_noblock+0x1c6>
                inst->uwb_dev.status.sem_error = 1;
   1a644:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a648:	f043 0304 	orr.w	r3, r3, #4
   1a64c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a650:	e72b      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
        assert(rc==DPL_OK);
   1a652:	2300      	movs	r3, #0
   1a654:	461a      	mov	r2, r3
   1a656:	4619      	mov	r1, r3
   1a658:	4618      	mov	r0, r3
   1a65a:	f7ee fdb3 	bl	91c4 <__assert_func>
   1a65e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a662:	4650      	mov	r0, sl
   1a664:	f7ef fd42 	bl	a0ec <os_sem_pend>
            if (rc != DPL_OK) {
   1a668:	b950      	cbnz	r0, 1a680 <hal_dw1000_read_noblock+0x238>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a66a:	4650      	mov	r0, sl
   1a66c:	f7ef fd0c 	bl	a088 <os_sem_release>
            assert(rc == DPL_OK);
   1a670:	2800      	cmp	r0, #0
   1a672:	d0d7      	beq.n	1a624 <hal_dw1000_read_noblock+0x1dc>
   1a674:	2300      	movs	r3, #0
   1a676:	461a      	mov	r2, r3
   1a678:	4619      	mov	r1, r3
   1a67a:	4618      	mov	r0, r3
   1a67c:	f7ee fda2 	bl	91c4 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   1a680:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a684:	f043 0304 	orr.w	r3, r3, #4
   1a688:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a68c:	e70d      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a68e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a692:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a696:	f7ef fd29 	bl	a0ec <os_sem_pend>
    if (rc != DPL_OK) {
   1a69a:	2800      	cmp	r0, #0
   1a69c:	f43f af05 	beq.w	1a4aa <hal_dw1000_read_noblock+0x62>
        inst->uwb_dev.status.sem_error = 1;
   1a6a0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a6a4:	f043 0304 	orr.w	r3, r3, #4
   1a6a8:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a6ac:	e6fd      	b.n	1a4aa <hal_dw1000_read_noblock+0x62>
   1a6ae:	bf00      	nop
   1a6b0:	0001a2d1 	.word	0x0001a2d1

0001a6b4 <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1a6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a6b8:	4604      	mov	r4, r0
   1a6ba:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    int rc = DPL_OK;
    assert(inst->spi_sem);
   1a6be:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a6c2:	b178      	cbz	r0, 1a6e4 <hal_dw1000_write+0x30>
   1a6c4:	460e      	mov	r6, r1
   1a6c6:	4617      	mov	r7, r2
   1a6c8:	4698      	mov	r8, r3
   1a6ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a6ce:	f7ef fd0d 	bl	a0ec <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1a6d2:	b168      	cbz	r0, 1a6f0 <hal_dw1000_write+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   1a6d4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a6d8:	f043 0304 	orr.w	r3, r3, #4
   1a6dc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   1a6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   1a6e4:	2300      	movs	r3, #0
   1a6e6:	461a      	mov	r2, r3
   1a6e8:	4619      	mov	r1, r3
   1a6ea:	4618      	mov	r0, r3
   1a6ec:	f7ee fd6a 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a6f0:	2100      	movs	r1, #0
   1a6f2:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a6f6:	f7ee fcb1 	bl	905c <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   1a6fa:	463b      	mov	r3, r7
   1a6fc:	2200      	movs	r2, #0
   1a6fe:	4631      	mov	r1, r6
   1a700:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a704:	f003 fcd4 	bl	1e0b0 <hal_spi_txrx>
    assert(rc == DPL_OK);
   1a708:	b998      	cbnz	r0, 1a732 <hal_dw1000_write+0x7e>
    if (length) {
   1a70a:	f1b9 0f00 	cmp.w	r9, #0
   1a70e:	d116      	bne.n	1a73e <hal_dw1000_write+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
   1a710:	2101      	movs	r1, #1
   1a712:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a716:	f7ee fca1 	bl	905c <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a71a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a71e:	f7ef fcb3 	bl	a088 <os_sem_release>
    assert(rc == DPL_OK);
   1a722:	2800      	cmp	r0, #0
   1a724:	d0dc      	beq.n	1a6e0 <hal_dw1000_write+0x2c>
   1a726:	2300      	movs	r3, #0
   1a728:	461a      	mov	r2, r3
   1a72a:	4619      	mov	r1, r3
   1a72c:	4618      	mov	r0, r3
   1a72e:	f7ee fd49 	bl	91c4 <__assert_func>
    assert(rc == DPL_OK);
   1a732:	2300      	movs	r3, #0
   1a734:	461a      	mov	r2, r3
   1a736:	4619      	mov	r1, r3
   1a738:	4618      	mov	r0, r3
   1a73a:	f7ee fd43 	bl	91c4 <__assert_func>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
   1a73e:	464b      	mov	r3, r9
   1a740:	2200      	movs	r2, #0
   1a742:	4641      	mov	r1, r8
   1a744:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a748:	f003 fcb2 	bl	1e0b0 <hal_spi_txrx>
   1a74c:	e7e0      	b.n	1a710 <hal_dw1000_write+0x5c>
	...

0001a750 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1a750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a754:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(length);
   1a758:	f1b9 0f00 	cmp.w	r9, #0
   1a75c:	d015      	beq.n	1a78a <hal_dw1000_write_noblock+0x3a>
   1a75e:	4604      	mov	r4, r0
   1a760:	460f      	mov	r7, r1
   1a762:	4616      	mov	r6, r2
   1a764:	4698      	mov	r8, r3
    assert(inst->spi_sem);
   1a766:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a76a:	b1a0      	cbz	r0, 1a796 <hal_dw1000_write_noblock+0x46>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a76c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a770:	f7ef fcbc 	bl	a0ec <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
   1a774:	4603      	mov	r3, r0
    if (rc != DPL_OK) {
   1a776:	b1a0      	cbz	r0, 1a7a2 <hal_dw1000_write_noblock+0x52>
        inst->uwb_dev.status.sem_error = 1;
   1a778:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
   1a77c:	f042 0204 	orr.w	r2, r2, #4
   1a780:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
   1a784:	4618      	mov	r0, r3
   1a786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(length);
   1a78a:	2300      	movs	r3, #0
   1a78c:	461a      	mov	r2, r3
   1a78e:	4619      	mov	r1, r3
   1a790:	4618      	mov	r0, r3
   1a792:	f7ee fd17 	bl	91c4 <__assert_func>
    assert(inst->spi_sem);
   1a796:	2300      	movs	r3, #0
   1a798:	461a      	mov	r2, r3
   1a79a:	4619      	mov	r1, r3
   1a79c:	4618      	mov	r0, r3
   1a79e:	f7ee fd11 	bl	91c4 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   1a7a2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a7a6:	f003 fc09 	bl	1dfbc <hal_spi_disable>
   1a7aa:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   1a7ac:	4622      	mov	r2, r4
   1a7ae:	4960      	ldr	r1, [pc, #384]	; (1a930 <hal_dw1000_write_noblock+0x1e0>)
   1a7b0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a7b4:	f003 fc66 	bl	1e084 <hal_spi_set_txrx_cb>
   1a7b8:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   1a7ba:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a7be:	f003 fbd7 	bl	1df70 <hal_spi_enable>
    if (rc != DPL_OK) {
   1a7c2:	ea55 0300 	orrs.w	r3, r5, r0
   1a7c6:	d00c      	beq.n	1a7e2 <hal_dw1000_write_noblock+0x92>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a7c8:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a7cc:	f7ef fc5c 	bl	a088 <os_sem_release>
    rc = dpl_sem_release(inst->spi_sem);
   1a7d0:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   1a7d2:	2800      	cmp	r0, #0
   1a7d4:	d0d6      	beq.n	1a784 <hal_dw1000_write_noblock+0x34>
   1a7d6:	2300      	movs	r3, #0
   1a7d8:	461a      	mov	r2, r3
   1a7da:	4619      	mov	r1, r3
   1a7dc:	4618      	mov	r0, r3
   1a7de:	f7ee fcf1 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a7e2:	2100      	movs	r1, #0
   1a7e4:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a7e8:	f7ee fc38 	bl	905c <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   1a7ec:	eb06 0509 	add.w	r5, r6, r9
   1a7f0:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   1a7f4:	429d      	cmp	r5, r3
   1a7f6:	da01      	bge.n	1a7fc <hal_dw1000_write_noblock+0xac>
   1a7f8:	2dfe      	cmp	r5, #254	; 0xfe
   1a7fa:	dd0e      	ble.n	1a81a <hal_dw1000_write_noblock+0xca>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a7fc:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   1a800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a804:	4650      	mov	r0, sl
   1a806:	f7ef fc71 	bl	a0ec <os_sem_pend>
    if (rc != DPL_OK) {
   1a80a:	b1e8      	cbz	r0, 1a848 <hal_dw1000_write_noblock+0xf8>
        inst->uwb_dev.status.sem_error = 1;
   1a80c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a810:	f043 0304 	orr.w	r3, r3, #4
   1a814:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a818:	e7d6      	b.n	1a7c8 <hal_dw1000_write_noblock+0x78>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   1a81a:	4632      	mov	r2, r6
   1a81c:	4639      	mov	r1, r7
   1a81e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a822:	f7f5 ff2d 	bl	10680 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
   1a826:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a82a:	464a      	mov	r2, r9
   1a82c:	4641      	mov	r1, r8
   1a82e:	4430      	add	r0, r6
   1a830:	f7f5 ff26 	bl	10680 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   1a834:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a838:	462b      	mov	r3, r5
   1a83a:	460a      	mov	r2, r1
   1a83c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a840:	f003 fc8c 	bl	1e15c <hal_spi_txrx_noblock>
   1a844:	4603      	mov	r3, r0
        return rc;
   1a846:	e79d      	b.n	1a784 <hal_dw1000_write_noblock+0x34>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   1a848:	4633      	mov	r3, r6
   1a84a:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   1a84e:	4639      	mov	r1, r7
   1a850:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a854:	f003 fc82 	bl	1e15c <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
   1a858:	b960      	cbnz	r0, 1a874 <hal_dw1000_write_noblock+0x124>
   1a85a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a85e:	4650      	mov	r0, sl
   1a860:	f7ef fc44 	bl	a0ec <os_sem_pend>
    if (rc != DPL_OK) {
   1a864:	b160      	cbz	r0, 1a880 <hal_dw1000_write_noblock+0x130>
        inst->uwb_dev.status.sem_error = 1;
   1a866:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a86a:	f043 0304 	orr.w	r3, r3, #4
   1a86e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a872:	e7a9      	b.n	1a7c8 <hal_dw1000_write_noblock+0x78>
    assert(rc==DPL_OK);
   1a874:	2300      	movs	r3, #0
   1a876:	461a      	mov	r2, r3
   1a878:	4619      	mov	r1, r3
   1a87a:	4618      	mov	r0, r3
   1a87c:	f7ee fca2 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a880:	4650      	mov	r0, sl
   1a882:	f7ef fc01 	bl	a088 <os_sem_release>
   1a886:	4607      	mov	r7, r0
    rc = dpl_sem_release(&inst->spi_nb_sem);
   1a888:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   1a88a:	b940      	cbnz	r0, 1a89e <hal_dw1000_write_noblock+0x14e>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   1a88c:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   1a890:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1a894:	bf28      	it	cs
   1a896:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   1a89a:	464d      	mov	r5, r9
    while (offset<length) {
   1a89c:	e012      	b.n	1a8c4 <hal_dw1000_write_noblock+0x174>
    assert(rc == DPL_OK);
   1a89e:	2300      	movs	r3, #0
   1a8a0:	461a      	mov	r2, r3
   1a8a2:	4619      	mov	r1, r3
   1a8a4:	4618      	mov	r0, r3
   1a8a6:	f7ee fc8d 	bl	91c4 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
   1a8aa:	4633      	mov	r3, r6
   1a8ac:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   1a8b0:	eb08 0107 	add.w	r1, r8, r7
   1a8b4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a8b8:	f003 fc50 	bl	1e15c <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   1a8bc:	4603      	mov	r3, r0
   1a8be:	b9c0      	cbnz	r0, 1a8f2 <hal_dw1000_write_noblock+0x1a2>
        if (bytes_left) {
   1a8c0:	b9ed      	cbnz	r5, 1a8fe <hal_dw1000_write_noblock+0x1ae>
        offset+=bytes_to_write;
   1a8c2:	4437      	add	r7, r6
    while (offset<length) {
   1a8c4:	45b9      	cmp	r9, r7
   1a8c6:	f77f af5d 	ble.w	1a784 <hal_dw1000_write_noblock+0x34>
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
   1a8ca:	462e      	mov	r6, r5
   1a8cc:	455d      	cmp	r5, fp
   1a8ce:	bfa8      	it	ge
   1a8d0:	465e      	movge	r6, fp
        if (bytes_left) {
   1a8d2:	1bad      	subs	r5, r5, r6
   1a8d4:	d0e9      	beq.n	1a8aa <hal_dw1000_write_noblock+0x15a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a8d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a8da:	4650      	mov	r0, sl
   1a8dc:	f7ef fc06 	bl	a0ec <os_sem_pend>
            if (rc != DPL_OK) {
   1a8e0:	2800      	cmp	r0, #0
   1a8e2:	d0e2      	beq.n	1a8aa <hal_dw1000_write_noblock+0x15a>
                inst->uwb_dev.status.sem_error = 1;
   1a8e4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a8e8:	f043 0304 	orr.w	r3, r3, #4
   1a8ec:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a8f0:	e76a      	b.n	1a7c8 <hal_dw1000_write_noblock+0x78>
        assert(rc==DPL_OK);
   1a8f2:	2300      	movs	r3, #0
   1a8f4:	461a      	mov	r2, r3
   1a8f6:	4619      	mov	r1, r3
   1a8f8:	4618      	mov	r0, r3
   1a8fa:	f7ee fc63 	bl	91c4 <__assert_func>
   1a8fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a902:	4650      	mov	r0, sl
   1a904:	f7ef fbf2 	bl	a0ec <os_sem_pend>
            if (rc != DPL_OK) {
   1a908:	b958      	cbnz	r0, 1a922 <hal_dw1000_write_noblock+0x1d2>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a90a:	4650      	mov	r0, sl
   1a90c:	f7ef fbbc 	bl	a088 <os_sem_release>
            rc = dpl_sem_release(&inst->spi_nb_sem);
   1a910:	4603      	mov	r3, r0
            assert(rc == DPL_OK);
   1a912:	2800      	cmp	r0, #0
   1a914:	d0d5      	beq.n	1a8c2 <hal_dw1000_write_noblock+0x172>
   1a916:	2300      	movs	r3, #0
   1a918:	461a      	mov	r2, r3
   1a91a:	4619      	mov	r1, r3
   1a91c:	4618      	mov	r0, r3
   1a91e:	f7ee fc51 	bl	91c4 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   1a922:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a926:	f043 0304 	orr.w	r3, r3, #4
   1a92a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a92e:	e74b      	b.n	1a7c8 <hal_dw1000_write_noblock+0x78>
   1a930:	0001a2d1 	.word	0x0001a2d1

0001a934 <hal_dw1000_rw_noblock_wait>:
 * @param timeout  Time in ms to wait, use DPL_TIMEOUT_NEVER (UINT32_MAX) to wait indefinitely
 * @return int  Returns 0 on success, error code otherwise
 */
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
   1a934:	b530      	push	{r4, r5, lr}
   1a936:	b083      	sub	sp, #12
   1a938:	4604      	mov	r4, r0
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   1a93a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a93e:	d10f      	bne.n	1a960 <hal_dw1000_rw_noblock_wait+0x2c>
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
   1a940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a944:	9301      	str	r3, [sp, #4]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a946:	9901      	ldr	r1, [sp, #4]
   1a948:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a94c:	f7ef fbce 	bl	a0ec <os_sem_pend>
   1a950:	4605      	mov	r5, r0
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
   1a952:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a956:	88c3      	ldrh	r3, [r0, #6]
   1a958:	b13b      	cbz	r3, 1a96a <hal_dw1000_rw_noblock_wait+0x36>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
   1a95a:	4628      	mov	r0, r5
   1a95c:	b003      	add	sp, #12
   1a95e:	bd30      	pop	{r4, r5, pc}
   1a960:	4608      	mov	r0, r1
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1a962:	a901      	add	r1, sp, #4
   1a964:	f7ef fe6b 	bl	a63e <os_time_ms_to_ticks>
   1a968:	e7ed      	b.n	1a946 <hal_dw1000_rw_noblock_wait+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a96a:	f7ef fb8d 	bl	a088 <os_sem_release>
    return err;
   1a96e:	e7f4      	b.n	1a95a <hal_dw1000_rw_noblock_wait+0x26>

0001a970 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
   1a970:	b538      	push	{r3, r4, r5, lr}
   1a972:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
   1a974:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a978:	b158      	cbz	r0, 1a992 <hal_dw1000_wakeup+0x22>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a97a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a97e:	f7ef fbb5 	bl	a0ec <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1a982:	b160      	cbz	r0, 1a99e <hal_dw1000_wakeup+0x2e>
        inst->uwb_dev.status.sem_error = 1;
   1a984:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a988:	f043 0304 	orr.w	r3, r3, #4
   1a98c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   1a990:	bd38      	pop	{r3, r4, r5, pc}
    assert(inst->spi_sem);
   1a992:	2300      	movs	r3, #0
   1a994:	461a      	mov	r2, r3
   1a996:	4619      	mov	r1, r3
   1a998:	4618      	mov	r0, r3
   1a99a:	f7ee fc13 	bl	91c4 <__assert_func>
    return os_arch_save_sr();
   1a99e:	f7ef fe6b 	bl	a678 <os_arch_save_sr>
   1a9a2:	4605      	mov	r5, r0
    hal_spi_disable(inst->spi_num);
   1a9a4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a9a8:	f003 fb08 	bl	1dfbc <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
   1a9ac:	2100      	movs	r1, #0
   1a9ae:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a9b2:	f7ee fb53 	bl	905c <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
   1a9b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1a9ba:	f7f7 ffa6 	bl	1290a <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
   1a9be:	2101      	movs	r1, #1
   1a9c0:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a9c4:	f7ee fb4a 	bl	905c <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
   1a9c8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a9cc:	f003 fad0 	bl	1df70 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
   1a9d0:	f241 3088 	movw	r0, #5000	; 0x1388
   1a9d4:	f7f7 ff99 	bl	1290a <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
   1a9d8:	4628      	mov	r0, r5
   1a9da:	f7ef fe53 	bl	a684 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a9de:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a9e2:	f7ef fb51 	bl	a088 <os_sem_release>
    assert(rc == DPL_OK);
   1a9e6:	2800      	cmp	r0, #0
   1a9e8:	d0d2      	beq.n	1a990 <hal_dw1000_wakeup+0x20>
   1a9ea:	2300      	movs	r3, #0
   1a9ec:	461a      	mov	r2, r3
   1a9ee:	4619      	mov	r1, r3
   1a9f0:	4618      	mov	r0, r3
   1a9f2:	f7ee fbe7 	bl	91c4 <__assert_func>

0001a9f6 <calc_rx_window_timeout>:
}

static uint16_t
calc_rx_window_timeout(uint64_t rx_start, uint64_t rx_end)
{
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   1a9f6:	1a12      	subs	r2, r2, r0
   1a9f8:	eb63 0301 	sbc.w	r3, r3, r1
   1a9fc:	0c12      	lsrs	r2, r2, #16
   1a9fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1aa02:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    /* If more than 8.4s away (more than 1/2 period)- the end has likely
     * already passed so set a short timeout as to trigger a timeout */
    if (timeout > 0x7fffff) {
   1aa06:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1aa0a:	d105      	bne.n	1aa18 <calc_rx_window_timeout+0x22>
        timeout = 1;
    }
    /* DW1000 can't have a rx-timeout greater than 0xffff */
    if (timeout > 0xffff) {
   1aa0c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1aa10:	d303      	bcc.n	1aa1a <calc_rx_window_timeout+0x24>
        timeout = 0xffff;
   1aa12:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1aa16:	e000      	b.n	1aa1a <calc_rx_window_timeout+0x24>
        timeout = 1;
   1aa18:	2001      	movs	r0, #1
    }
    return timeout;
}
   1aa1a:	b280      	uxth	r0, r0
   1aa1c:	4770      	bx	lr

0001aa1e <dw1000_checkoverrun>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = overrun error has occured, 0 otherwise
 */
static uint8_t
dw1000_checkoverrun(dw1000_dev_instance_t * inst)
{
   1aa1e:	b508      	push	{r3, lr}
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
   1aa20:	2301      	movs	r3, #1
   1aa22:	2202      	movs	r2, #2
   1aa24:	210f      	movs	r1, #15
   1aa26:	f7fe fff5 	bl	19a14 <dw1000_read_reg>
    return (ov!=0);
}
   1aa2a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1aa2e:	bd08      	pop	{r3, pc}

0001aa30 <dw1000_irq>:
{
   1aa30:	b510      	push	{r4, lr}
   1aa32:	4604      	mov	r4, r0
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   1aa34:	f7f7 ff59 	bl	128ea <dpl_cputime_get32>
   1aa38:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
   1aa3a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1aa3e:	f013 0f01 	tst.w	r3, #1
   1aa42:	d000      	beq.n	1aa46 <dw1000_irq+0x16>
}
   1aa44:	bd10      	pop	{r4, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1aa46:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1aa4a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1aa4e:	f7ee fefb 	bl	9848 <os_eventq_put>
   1aa52:	e7f7      	b.n	1aa44 <dw1000_irq+0x14>

0001aa54 <dw1000_read_rx>:
{
   1aa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa58:	b082      	sub	sp, #8
   1aa5a:	4604      	mov	r4, r0
   1aa5c:	460f      	mov	r7, r1
   1aa5e:	4616      	mov	r6, r2
   1aa60:	461d      	mov	r5, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   1aa62:	f8d0 05cc 	ldr.w	r0, [r0, #1484]	; 0x5cc
   1aa66:	4418      	add	r0, r3
   1aa68:	f8c4 05cc 	str.w	r0, [r4, #1484]	; 0x5cc
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1aa6c:	f504 68ad 	add.w	r8, r4, #1384	; 0x568
   1aa70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aa74:	4640      	mov	r0, r8
   1aa76:	f7f0 f959 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1aa7a:	b150      	cbz	r0, 1aa92 <dw1000_read_rx+0x3e>
        inst->uwb_dev.status.mtx_error = 1;
   1aa7c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1aa80:	f043 0308 	orr.w	r3, r3, #8
   1aa84:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1aa88:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1aa8c:	b002      	add	sp, #8
   1aa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
   1aa92:	9500      	str	r5, [sp, #0]
   1aa94:	463b      	mov	r3, r7
   1aa96:	4632      	mov	r2, r6
   1aa98:	2111      	movs	r1, #17
   1aa9a:	4620      	mov	r0, r4
   1aa9c:	f7fe fef0 	bl	19880 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1aaa0:	4640      	mov	r0, r8
   1aaa2:	f7f0 f8e7 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1aaa6:	2800      	cmp	r0, #0
   1aaa8:	d0ee      	beq.n	1aa88 <dw1000_read_rx+0x34>
   1aaaa:	2300      	movs	r3, #0
   1aaac:	461a      	mov	r2, r3
   1aaae:	4619      	mov	r1, r3
   1aab0:	4618      	mov	r0, r3
   1aab2:	f7ee fb87 	bl	91c4 <__assert_func>

0001aab6 <dw1000_write_tx>:
{
   1aab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aaba:	b082      	sub	sp, #8
   1aabc:	4604      	mov	r4, r0
   1aabe:	460f      	mov	r7, r1
   1aac0:	4616      	mov	r6, r2
   1aac2:	461d      	mov	r5, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   1aac4:	f8d0 25c8 	ldr.w	r2, [r0, #1480]	; 0x5c8
   1aac8:	441a      	add	r2, r3
   1aaca:	f8c0 25c8 	str.w	r2, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1aace:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   1aad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aad6:	4640      	mov	r0, r8
   1aad8:	f7f0 f928 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1aadc:	b990      	cbnz	r0, 1ab04 <dw1000_write_tx+0x4e>
    if ((txBufferOffset + txFrameLength) <= 1024){
   1aade:	1973      	adds	r3, r6, r5
   1aae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1aae4:	dd15      	ble.n	1ab12 <dw1000_write_tx+0x5c>
        inst->uwb_dev.status.tx_frame_error = 1;
   1aae6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1aaea:	f043 0310 	orr.w	r3, r3, #16
   1aaee:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1aaf2:	4640      	mov	r0, r8
   1aaf4:	f7f0 f8be 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1aaf8:	bb20      	cbnz	r0, 1ab44 <dw1000_write_tx+0x8e>
}
   1aafa:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1aafe:	b002      	add	sp, #8
   1ab00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1ab04:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ab08:	f043 0308 	orr.w	r3, r3, #8
   1ab0c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   1ab10:	e7f3      	b.n	1aafa <dw1000_write_tx+0x44>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
   1ab12:	9500      	str	r5, [sp, #0]
   1ab14:	463b      	mov	r3, r7
   1ab16:	4632      	mov	r2, r6
   1ab18:	2109      	movs	r1, #9
   1ab1a:	4620      	mov	r0, r4
   1ab1c:	f7fe ff14 	bl	19948 <dw1000_write>
        if (txBufferOffset == 0) {
   1ab20:	b176      	cbz	r6, 1ab40 <dw1000_write_tx+0x8a>
        inst->uwb_dev.status.tx_frame_error = 0;
   1ab22:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1ab26:	f36f 1304 	bfc	r3, #4, #1
   1ab2a:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
   1ab2e:	e7e0      	b.n	1aaf2 <dw1000_write_tx+0x3c>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
   1ab30:	5cf9      	ldrb	r1, [r7, r3]
   1ab32:	18e2      	adds	r2, r4, r3
   1ab34:	f882 14e0 	strb.w	r1, [r2, #1248]	; 0x4e0
            for (i = 0; i< sizeof(inst->uwb_dev.fctrl); i++)
   1ab38:	3301      	adds	r3, #1
   1ab3a:	2b01      	cmp	r3, #1
   1ab3c:	d9f8      	bls.n	1ab30 <dw1000_write_tx+0x7a>
   1ab3e:	e7f0      	b.n	1ab22 <dw1000_write_tx+0x6c>
   1ab40:	2300      	movs	r3, #0
   1ab42:	e7fa      	b.n	1ab3a <dw1000_write_tx+0x84>
    assert(err == DPL_OK);
   1ab44:	2300      	movs	r3, #0
   1ab46:	461a      	mov	r2, r3
   1ab48:	4619      	mov	r1, r3
   1ab4a:	4618      	mov	r0, r3
   1ab4c:	f7ee fb3a 	bl	91c4 <__assert_func>

0001ab50 <dw1000_write_tx_fctrl>:
{
   1ab50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab54:	b084      	sub	sp, #16
   1ab56:	4605      	mov	r5, r0
   1ab58:	460c      	mov	r4, r1
   1ab5a:	4690      	mov	r8, r2
   1ab5c:	461e      	mov	r6, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1ab5e:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1ab62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab66:	4638      	mov	r0, r7
   1ab68:	f7f0 f8e0 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1ab6c:	bb08      	cbnz	r0, 1abb2 <dw1000_write_tx_fctrl+0x62>
    if (ext) {
   1ab6e:	b33e      	cbz	r6, 1abc0 <dw1000_write_tx_fctrl+0x70>
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1ab70:	7873      	ldrb	r3, [r6, #1]
   1ab72:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
   1ab76:	431a      	orrs	r2, r3
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
   1ab78:	7833      	ldrb	r3, [r6, #0]
   1ab7a:	035b      	lsls	r3, r3, #13
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1ab7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   1ab80:	78b2      	ldrb	r2, [r6, #2]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1ab82:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   1ab86:	3402      	adds	r4, #2
   1ab88:	f3c4 0409 	ubfx	r4, r4, #0, #10
   1ab8c:	ea44 5488 	orr.w	r4, r4, r8, lsl #22
   1ab90:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   1ab92:	2304      	movs	r3, #4
   1ab94:	9302      	str	r3, [sp, #8]
   1ab96:	2200      	movs	r2, #0
   1ab98:	9400      	str	r4, [sp, #0]
   1ab9a:	9201      	str	r2, [sp, #4]
   1ab9c:	2108      	movs	r1, #8
   1ab9e:	4628      	mov	r0, r5
   1aba0:	f7fe ffa8 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1aba4:	4638      	mov	r0, r7
   1aba6:	f7f0 f865 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1abaa:	b960      	cbnz	r0, 1abc6 <dw1000_write_tx_fctrl+0x76>
}
   1abac:	b004      	add	sp, #16
   1abae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1abb2:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1abb6:	f043 0308 	orr.w	r3, r3, #8
   1abba:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto mtx_error;
   1abbe:	e7f5      	b.n	1abac <dw1000_write_tx_fctrl+0x5c>
        tx_fctrl_reg = inst->tx_fctrl;
   1abc0:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
   1abc4:	e7df      	b.n	1ab86 <dw1000_write_tx_fctrl+0x36>
    assert(err == DPL_OK);
   1abc6:	2300      	movs	r3, #0
   1abc8:	461a      	mov	r2, r3
   1abca:	4619      	mov	r1, r3
   1abcc:	4618      	mov	r0, r3
   1abce:	f7ee faf9 	bl	91c4 <__assert_func>

0001abd2 <dw1000_start_tx>:
{
   1abd2:	b570      	push	{r4, r5, r6, lr}
   1abd4:	b084      	sub	sp, #16
   1abd6:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1abd8:	f500 66ac 	add.w	r6, r0, #1376	; 0x560
   1abdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1abe0:	4630      	mov	r0, r6
   1abe2:	f7ef fa83 	bl	a0ec <os_sem_pend>
    if (err != DPL_OK) {
   1abe6:	2800      	cmp	r0, #0
   1abe8:	d144      	bne.n	1ac74 <dw1000_start_tx+0xa2>
    control = inst->control;
   1abea:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
   1abee:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1abf2:	f013 0f20 	tst.w	r3, #32
   1abf6:	d144      	bne.n	1ac82 <dw1000_start_tx+0xb0>
    if (control.wait4resp_enabled){
   1abf8:	b2eb      	uxtb	r3, r5
   1abfa:	f015 0f01 	tst.w	r5, #1
   1abfe:	d14c      	bne.n	1ac9a <dw1000_start_tx+0xc8>
    sys_ctrl_reg = SYS_CTRL_TXSTRT;
   1ac00:	2202      	movs	r2, #2
    if (control.delay_start_enabled)
   1ac02:	f013 0504 	ands.w	r5, r3, #4
   1ac06:	d001      	beq.n	1ac0c <dw1000_start_tx+0x3a>
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
   1ac08:	f042 0204 	orr.w	r2, r2, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
   1ac0c:	b2d3      	uxtb	r3, r2
   1ac0e:	2201      	movs	r2, #1
   1ac10:	9202      	str	r2, [sp, #8]
   1ac12:	2200      	movs	r2, #0
   1ac14:	9300      	str	r3, [sp, #0]
   1ac16:	9201      	str	r2, [sp, #4]
   1ac18:	210d      	movs	r1, #13
   1ac1a:	4620      	mov	r0, r4
   1ac1c:	f7fe ff6a 	bl	19af4 <dw1000_write_reg>
    if (control.delay_start_enabled){
   1ac20:	2d00      	cmp	r5, #0
   1ac22:	d13c      	bne.n	1ac9e <dw1000_start_tx+0xcc>
        inst->uwb_dev.status.start_tx_error = 0;
   1ac24:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1ac28:	f36f 0382 	bfc	r3, #2, #1
   1ac2c:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
   1ac30:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
   1ac34:	2b00      	cmp	r3, #0
   1ac36:	db5d      	blt.n	1acf4 <dw1000_start_tx+0x122>
    inst->control.wait4resp_enabled = false;
   1ac38:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1ac3c:	f36f 0300 	bfc	r3, #0, #1
   1ac40:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   1ac44:	b2db      	uxtb	r3, r3
   1ac46:	f36f 0341 	bfc	r3, #1, #1
   1ac4a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   1ac4e:	b2db      	uxtb	r3, r3
   1ac50:	f36f 0382 	bfc	r3, #2, #1
   1ac54:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   1ac58:	b2db      	uxtb	r3, r3
   1ac5a:	f36f 03c3 	bfc	r3, #3, #1
   1ac5e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   1ac62:	b2db      	uxtb	r3, r3
   1ac64:	f36f 1386 	bfc	r3, #6, #1
   1ac68:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
}
   1ac6c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ac70:	b004      	add	sp, #16
   1ac72:	bd70      	pop	{r4, r5, r6, pc}
        inst->uwb_dev.status.sem_error = 1;
   1ac74:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ac78:	f043 0304 	orr.w	r3, r3, #4
   1ac7c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto sem_error;
   1ac80:	e7f4      	b.n	1ac6c <dw1000_start_tx+0x9a>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1ac82:	2301      	movs	r3, #1
   1ac84:	9302      	str	r3, [sp, #8]
   1ac86:	2240      	movs	r2, #64	; 0x40
   1ac88:	2300      	movs	r3, #0
   1ac8a:	e9cd 2300 	strd	r2, r3, [sp]
   1ac8e:	2200      	movs	r2, #0
   1ac90:	210d      	movs	r1, #13
   1ac92:	4620      	mov	r0, r4
   1ac94:	f7fe ff2e 	bl	19af4 <dw1000_write_reg>
   1ac98:	e7ae      	b.n	1abf8 <dw1000_start_tx+0x26>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
   1ac9a:	2282      	movs	r2, #130	; 0x82
   1ac9c:	e7b1      	b.n	1ac02 <dw1000_start_tx+0x30>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
   1ac9e:	2302      	movs	r3, #2
   1aca0:	2203      	movs	r2, #3
   1aca2:	210f      	movs	r1, #15
   1aca4:	4620      	mov	r0, r4
   1aca6:	f7fe feb5 	bl	19a14 <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
   1acaa:	f410 6f81 	tst.w	r0, #1032	; 0x408
   1acae:	bf14      	ite	ne
   1acb0:	2201      	movne	r2, #1
   1acb2:	2200      	moveq	r2, #0
   1acb4:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1acb8:	f362 0382 	bfi	r3, r2, #2, #1
   1acbc:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
   1acc0:	b2db      	uxtb	r3, r3
   1acc2:	f013 0f04 	tst.w	r3, #4
   1acc6:	d0b3      	beq.n	1ac30 <dw1000_start_tx+0x5e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1acc8:	2301      	movs	r3, #1
   1acca:	9302      	str	r3, [sp, #8]
   1accc:	2240      	movs	r2, #64	; 0x40
   1acce:	2300      	movs	r3, #0
   1acd0:	e9cd 2300 	strd	r2, r3, [sp]
   1acd4:	2200      	movs	r2, #0
   1acd6:	210d      	movs	r1, #13
   1acd8:	4620      	mov	r0, r4
   1acda:	f7fe ff0b 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1acde:	4630      	mov	r0, r6
   1ace0:	f7ef f9d2 	bl	a088 <os_sem_release>
            assert(err == DPL_OK);
   1ace4:	2800      	cmp	r0, #0
   1ace6:	d0a3      	beq.n	1ac30 <dw1000_start_tx+0x5e>
   1ace8:	2300      	movs	r3, #0
   1acea:	461a      	mov	r2, r3
   1acec:	4619      	mov	r1, r3
   1acee:	4618      	mov	r0, r3
   1acf0:	f7ee fa68 	bl	91c4 <__assert_func>
        inst->uwb_dev.status.sleeping = 1;
   1acf4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1acf8:	f043 0301 	orr.w	r3, r3, #1
   1acfc:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1ad00:	4630      	mov	r0, r6
   1ad02:	f7ef f9c1 	bl	a088 <os_sem_release>
   1ad06:	e797      	b.n	1ac38 <dw1000_start_tx+0x66>

0001ad08 <dw1000_tx_wait>:
{
   1ad08:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1ad0a:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
   1ad0e:	4620      	mov	r0, r4
   1ad10:	f7ef f9ec 	bl	a0ec <os_sem_pend>
    if (rc == DPL_OK) {
   1ad14:	b100      	cbz	r0, 1ad18 <dw1000_tx_wait+0x10>
}
   1ad16:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   1ad18:	4620      	mov	r0, r4
   1ad1a:	f7ef f9b5 	bl	a088 <os_sem_release>
    return rc;
   1ad1e:	e7fa      	b.n	1ad16 <dw1000_tx_wait+0xe>

0001ad20 <dw1000_set_delay_start>:
{
   1ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad22:	b085      	sub	sp, #20
   1ad24:	4604      	mov	r4, r0
   1ad26:	4616      	mov	r6, r2
   1ad28:	461d      	mov	r5, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1ad2a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1ad2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad32:	4638      	mov	r0, r7
   1ad34:	f7ef fffa 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1ad38:	b148      	cbz	r0, 1ad4e <dw1000_set_delay_start+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   1ad3a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ad3e:	f043 0308 	orr.w	r3, r3, #8
   1ad42:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1ad46:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ad4a:	b005      	add	sp, #20
   1ad4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->control.delay_start_enabled = true;
   1ad4e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1ad52:	f043 0304 	orr.w	r3, r3, #4
   1ad56:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   1ad5a:	2304      	movs	r3, #4
   1ad5c:	9302      	str	r3, [sp, #8]
   1ad5e:	0a36      	lsrs	r6, r6, #8
   1ad60:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   1ad64:	0a2d      	lsrs	r5, r5, #8
   1ad66:	9600      	str	r6, [sp, #0]
   1ad68:	9501      	str	r5, [sp, #4]
   1ad6a:	2201      	movs	r2, #1
   1ad6c:	210a      	movs	r1, #10
   1ad6e:	4620      	mov	r0, r4
   1ad70:	f7fe fec0 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1ad74:	4638      	mov	r0, r7
   1ad76:	f7ef ff7d 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1ad7a:	2800      	cmp	r0, #0
   1ad7c:	d0e3      	beq.n	1ad46 <dw1000_set_delay_start+0x26>
   1ad7e:	2300      	movs	r3, #0
   1ad80:	461a      	mov	r2, r3
   1ad82:	4619      	mov	r1, r3
   1ad84:	4618      	mov	r0, r3
   1ad86:	f7ee fa1d 	bl	91c4 <__assert_func>

0001ad8a <dw1000_start_rx>:
{
   1ad8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad8e:	b084      	sub	sp, #16
   1ad90:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1ad92:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1ad96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad9a:	4638      	mov	r0, r7
   1ad9c:	f7ef ffc6 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1ada0:	2800      	cmp	r0, #0
   1ada2:	d157      	bne.n	1ae54 <dw1000_start_rx+0xca>
    control = inst->control;
   1ada4:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
   1ada8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1adac:	f36f 03c3 	bfc	r3, #3, #1
   1adb0:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
   1adb4:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1adb8:	f013 0f20 	tst.w	r3, #32
   1adbc:	d151      	bne.n	1ae62 <dw1000_start_rx+0xd8>
    if (config->dblbuffon_enabled) {
   1adbe:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1adc2:	f013 0f10 	tst.w	r3, #16
   1adc6:	d161      	bne.n	1ae8c <dw1000_start_rx+0x102>
    if (control.delay_start_enabled)
   1adc8:	fa5f f885 	uxtb.w	r8, r5
   1adcc:	f015 0504 	ands.w	r5, r5, #4
   1add0:	d17a      	bne.n	1aec8 <dw1000_start_rx+0x13e>
    sys_ctrl = SYS_CTRL_RXENAB;
   1add2:	f44f 7680 	mov.w	r6, #256	; 0x100
    if (control.wait4resp_enabled) {
   1add6:	f018 0f01 	tst.w	r8, #1
   1adda:	d001      	beq.n	1ade0 <dw1000_start_rx+0x56>
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
   1addc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
   1ade0:	2302      	movs	r3, #2
   1ade2:	9302      	str	r3, [sp, #8]
   1ade4:	2200      	movs	r2, #0
   1ade6:	9600      	str	r6, [sp, #0]
   1ade8:	9201      	str	r2, [sp, #4]
   1adea:	210d      	movs	r1, #13
   1adec:	4620      	mov	r0, r4
   1adee:	f7fe fe81 	bl	19af4 <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
   1adf2:	2d00      	cmp	r5, #0
   1adf4:	d16b      	bne.n	1aece <dw1000_start_rx+0x144>
        inst->uwb_dev.status.start_rx_error = 0;
   1adf6:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1adfa:	f36f 03c3 	bfc	r3, #3, #1
   1adfe:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    inst->control.wait4resp_enabled = false;
   1ae02:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1ae06:	f36f 0300 	bfc	r3, #0, #1
   1ae0a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   1ae0e:	b2db      	uxtb	r3, r3
   1ae10:	f36f 0341 	bfc	r3, #1, #1
   1ae14:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   1ae18:	b2db      	uxtb	r3, r3
   1ae1a:	f36f 0382 	bfc	r3, #2, #1
   1ae1e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   1ae22:	b2db      	uxtb	r3, r3
   1ae24:	f36f 03c3 	bfc	r3, #3, #1
   1ae28:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.start_rx_syncbuf_enabled = false;
   1ae2c:	b2db      	uxtb	r3, r3
   1ae2e:	f36f 1304 	bfc	r3, #4, #1
   1ae32:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   1ae36:	b2db      	uxtb	r3, r3
   1ae38:	f36f 1386 	bfc	r3, #6, #1
   1ae3c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1ae40:	4638      	mov	r0, r7
   1ae42:	f7ef ff17 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1ae46:	2800      	cmp	r0, #0
   1ae48:	d16f      	bne.n	1af2a <dw1000_start_rx+0x1a0>
}
   1ae4a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ae4e:	b004      	add	sp, #16
   1ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1ae54:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ae58:	f043 0308 	orr.w	r3, r3, #8
   1ae5c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   1ae60:	e7f3      	b.n	1ae4a <dw1000_start_rx+0xc0>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
   1ae62:	2301      	movs	r3, #1
   1ae64:	2202      	movs	r2, #2
   1ae66:	2119      	movs	r1, #25
   1ae68:	4620      	mov	r0, r4
   1ae6a:	f7fe fdd3 	bl	19a14 <dw1000_read_reg>
   1ae6e:	b2c0      	uxtb	r0, r0
        if(state != PMSC_STATE_IDLE){
   1ae70:	2801      	cmp	r0, #1
   1ae72:	d0a4      	beq.n	1adbe <dw1000_start_rx+0x34>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1ae74:	2301      	movs	r3, #1
   1ae76:	9302      	str	r3, [sp, #8]
   1ae78:	2240      	movs	r2, #64	; 0x40
   1ae7a:	2300      	movs	r3, #0
   1ae7c:	e9cd 2300 	strd	r2, r3, [sp]
   1ae80:	2200      	movs	r2, #0
   1ae82:	210d      	movs	r1, #13
   1ae84:	4620      	mov	r0, r4
   1ae86:	f7fe fe35 	bl	19af4 <dw1000_write_reg>
   1ae8a:	e798      	b.n	1adbe <dw1000_start_rx+0x34>
    inst->control.start_rx_syncbuf_enabled = 1;
   1ae8c:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1ae90:	f043 0310 	orr.w	r3, r3, #16
   1ae94:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1ae98:	2301      	movs	r3, #1
   1ae9a:	2203      	movs	r2, #3
   1ae9c:	210f      	movs	r1, #15
   1ae9e:	4620      	mov	r0, r4
   1aea0:	f7fe fdb8 	bl	19a14 <dw1000_read_reg>
   1aea4:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1aea6:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1aeaa:	f010 0f80 	tst.w	r0, #128	; 0x80
   1aeae:	d08b      	beq.n	1adc8 <dw1000_start_rx+0x3e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1aeb0:	2301      	movs	r3, #1
   1aeb2:	9302      	str	r3, [sp, #8]
   1aeb4:	2201      	movs	r2, #1
   1aeb6:	2300      	movs	r3, #0
   1aeb8:	e9cd 2300 	strd	r2, r3, [sp]
   1aebc:	2203      	movs	r2, #3
   1aebe:	210d      	movs	r1, #13
   1aec0:	4620      	mov	r0, r4
   1aec2:	f7fe fe17 	bl	19af4 <dw1000_write_reg>
    return inst->uwb_dev.status;
   1aec6:	e77f      	b.n	1adc8 <dw1000_start_rx+0x3e>
        sys_ctrl |= SYS_CTRL_RXDLYE;
   1aec8:	f44f 7640 	mov.w	r6, #768	; 0x300
   1aecc:	e783      	b.n	1add6 <dw1000_start_rx+0x4c>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
   1aece:	2301      	movs	r3, #1
   1aed0:	2203      	movs	r2, #3
   1aed2:	210f      	movs	r1, #15
   1aed4:	4620      	mov	r0, r4
   1aed6:	f7fe fd9d 	bl	19a14 <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
   1aeda:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1aede:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1aee2:	f360 03c3 	bfi	r3, r0, #3, #1
   1aee6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
   1aeea:	b2db      	uxtb	r3, r3
   1aeec:	f013 0f08 	tst.w	r3, #8
   1aef0:	d087      	beq.n	1ae02 <dw1000_start_rx+0x78>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   1aef2:	2301      	movs	r3, #1
   1aef4:	9302      	str	r3, [sp, #8]
   1aef6:	2240      	movs	r2, #64	; 0x40
   1aef8:	2300      	movs	r3, #0
   1aefa:	e9cd 2300 	strd	r2, r3, [sp]
   1aefe:	2200      	movs	r2, #0
   1af00:	210d      	movs	r1, #13
   1af02:	4620      	mov	r0, r4
   1af04:	f7fe fdf6 	bl	19af4 <dw1000_write_reg>
            if (control.on_error_continue_enabled){
   1af08:	f018 0f40 	tst.w	r8, #64	; 0x40
   1af0c:	f43f af79 	beq.w	1ae02 <dw1000_start_rx+0x78>
                sys_ctrl &= ~SYS_CTRL_RXDLYE;
   1af10:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   1af14:	b2b6      	uxth	r6, r6
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
   1af16:	2302      	movs	r3, #2
   1af18:	9302      	str	r3, [sp, #8]
   1af1a:	2200      	movs	r2, #0
   1af1c:	9600      	str	r6, [sp, #0]
   1af1e:	9201      	str	r2, [sp, #4]
   1af20:	210d      	movs	r1, #13
   1af22:	4620      	mov	r0, r4
   1af24:	f7fe fde6 	bl	19af4 <dw1000_write_reg>
   1af28:	e76b      	b.n	1ae02 <dw1000_start_rx+0x78>
    assert(err == DPL_OK);
   1af2a:	2300      	movs	r3, #0
   1af2c:	461a      	mov	r2, r3
   1af2e:	4619      	mov	r1, r3
   1af30:	4618      	mov	r0, r3
   1af32:	f7ee f947 	bl	91c4 <__assert_func>
	...

0001af38 <dw1000_stop_rx>:
{
   1af38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af3a:	b085      	sub	sp, #20
   1af3c:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1af3e:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1af42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af46:	4628      	mov	r0, r5
   1af48:	f7ef fef0 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1af4c:	b148      	cbz	r0, 1af62 <dw1000_stop_rx+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   1af4e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1af52:	f043 0308 	orr.w	r3, r3, #8
   1af56:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1af5a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1af5e:	b005      	add	sp, #20
   1af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   1af62:	2304      	movs	r3, #4
   1af64:	2200      	movs	r2, #0
   1af66:	210e      	movs	r1, #14
   1af68:	4620      	mov	r0, r4
   1af6a:	f7fe fd53 	bl	19a14 <dw1000_read_reg>
   1af6e:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   1af70:	2704      	movs	r7, #4
   1af72:	9702      	str	r7, [sp, #8]
   1af74:	2200      	movs	r2, #0
   1af76:	2300      	movs	r3, #0
   1af78:	e9cd 2300 	strd	r2, r3, [sp]
   1af7c:	210e      	movs	r1, #14
   1af7e:	4620      	mov	r0, r4
   1af80:	f7fe fdb8 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   1af84:	2301      	movs	r3, #1
   1af86:	9302      	str	r3, [sp, #8]
   1af88:	2240      	movs	r2, #64	; 0x40
   1af8a:	2300      	movs	r3, #0
   1af8c:	e9cd 2300 	strd	r2, r3, [sp]
   1af90:	2200      	movs	r2, #0
   1af92:	210d      	movs	r1, #13
   1af94:	4620      	mov	r0, r4
   1af96:	f7fe fdad 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
   1af9a:	9702      	str	r7, [sp, #8]
   1af9c:	a30e      	add	r3, pc, #56	; (adr r3, 1afd8 <dw1000_stop_rx+0xa0>)
   1af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1afa2:	e9cd 2300 	strd	r2, r3, [sp]
   1afa6:	2200      	movs	r2, #0
   1afa8:	210f      	movs	r1, #15
   1afaa:	4620      	mov	r0, r4
   1afac:	f7fe fda2 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   1afb0:	9702      	str	r7, [sp, #8]
   1afb2:	2200      	movs	r2, #0
   1afb4:	9600      	str	r6, [sp, #0]
   1afb6:	9201      	str	r2, [sp, #4]
   1afb8:	210e      	movs	r1, #14
   1afba:	4620      	mov	r0, r4
   1afbc:	f7fe fd9a 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1afc0:	4628      	mov	r0, r5
   1afc2:	f7ef fe57 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1afc6:	2800      	cmp	r0, #0
   1afc8:	d0c7      	beq.n	1af5a <dw1000_stop_rx+0x22>
   1afca:	2300      	movs	r3, #0
   1afcc:	461a      	mov	r2, r3
   1afce:	4619      	mov	r1, r3
   1afd0:	4618      	mov	r0, r3
   1afd2:	f7ee f8f7 	bl	91c4 <__assert_func>
   1afd6:	bf00      	nop
   1afd8:	2433fbf8 	.word	0x2433fbf8
   1afdc:	00000000 	.word	0x00000000

0001afe0 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
   1afe0:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
   1afe4:	f36f 03c3 	bfc	r3, #3, #1
   1afe8:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
   1afec:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1aff0:	f361 0300 	bfi	r3, r1, #0, #1
   1aff4:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   1aff8:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1affc:	4770      	bx	lr

0001affe <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
   1affe:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1b002:	f361 1386 	bfi	r3, r1, #6, #1
   1b006:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   1b00a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1b00e:	4770      	bx	lr

0001b010 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
   1b010:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   1b014:	f361 0382 	bfi	r3, r1, #2, #1
   1b018:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
   1b01c:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1b020:	4770      	bx	lr

0001b022 <dw1000_adj_rx_timeout>:
{
   1b022:	b510      	push	{r4, lr}
   1b024:	b084      	sub	sp, #16
   1b026:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   1b028:	2302      	movs	r3, #2
   1b02a:	9302      	str	r3, [sp, #8]
   1b02c:	2200      	movs	r2, #0
   1b02e:	9100      	str	r1, [sp, #0]
   1b030:	9201      	str	r2, [sp, #4]
   1b032:	210c      	movs	r1, #12
   1b034:	f7fe fd5e 	bl	19af4 <dw1000_write_reg>
}
   1b038:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b03c:	b004      	add	sp, #16
   1b03e:	bd10      	pop	{r4, pc}

0001b040 <update_rx_window_timeout>:
{
   1b040:	b538      	push	{r3, r4, r5, lr}
   1b042:	4605      	mov	r5, r0
   1b044:	4610      	mov	r0, r2
   1b046:	4619      	mov	r1, r3
    uint32_t timeout = calc_rx_window_timeout(rel_start, inst->uwb_dev.abs_timeout);
   1b048:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
   1b04c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1b050:	f7ff fcd1 	bl	1a9f6 <calc_rx_window_timeout>
   1b054:	4604      	mov	r4, r0
    dw1000_adj_rx_timeout(inst, timeout);
   1b056:	4601      	mov	r1, r0
   1b058:	4628      	mov	r0, r5
   1b05a:	f7ff ffe2 	bl	1b022 <dw1000_adj_rx_timeout>
}
   1b05e:	4620      	mov	r0, r4
   1b060:	bd38      	pop	{r3, r4, r5, pc}

0001b062 <dw1000_set_rx_timeout>:
{
   1b062:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b064:	b085      	sub	sp, #20
   1b066:	4604      	mov	r4, r0
   1b068:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b06a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1b06e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b072:	4638      	mov	r0, r7
   1b074:	f7ef fe5a 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1b078:	b148      	cbz	r0, 1b08e <dw1000_set_rx_timeout+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b07a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b07e:	f043 0308 	orr.w	r3, r3, #8
   1b082:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b086:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b08a:	b005      	add	sp, #20
   1b08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
   1b08e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1b092:	f36f 13c7 	bfc	r3, #7, #1
   1b096:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   1b09a:	2301      	movs	r3, #1
   1b09c:	2203      	movs	r2, #3
   1b09e:	2104      	movs	r1, #4
   1b0a0:	4620      	mov	r0, r4
   1b0a2:	f7fe fcb7 	bl	19a14 <dw1000_read_reg>
   1b0a6:	b2c5      	uxtb	r5, r0
    inst->control.rx_timeout_enabled = timeout > 0;
   1b0a8:	1e32      	subs	r2, r6, #0
   1b0aa:	bf18      	it	ne
   1b0ac:	2201      	movne	r2, #1
   1b0ae:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1b0b2:	f362 1345 	bfi	r3, r2, #5, #1
   1b0b6:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
   1b0ba:	b2db      	uxtb	r3, r3
   1b0bc:	f013 0f20 	tst.w	r3, #32
   1b0c0:	d10e      	bne.n	1b0e0 <dw1000_set_rx_timeout+0x7e>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
   1b0c2:	f005 03ef 	and.w	r3, r5, #239	; 0xef
    if (sys_cfg_reg != new_reg_val) {
   1b0c6:	42ab      	cmp	r3, r5
   1b0c8:	d116      	bne.n	1b0f8 <dw1000_set_rx_timeout+0x96>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b0ca:	4638      	mov	r0, r7
   1b0cc:	f7ef fdd2 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1b0d0:	2800      	cmp	r0, #0
   1b0d2:	d0d8      	beq.n	1b086 <dw1000_set_rx_timeout+0x24>
   1b0d4:	2300      	movs	r3, #0
   1b0d6:	461a      	mov	r2, r3
   1b0d8:	4619      	mov	r1, r3
   1b0da:	4618      	mov	r0, r3
   1b0dc:	f7ee f872 	bl	91c4 <__assert_func>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   1b0e0:	2302      	movs	r3, #2
   1b0e2:	9302      	str	r3, [sp, #8]
   1b0e4:	2200      	movs	r2, #0
   1b0e6:	9600      	str	r6, [sp, #0]
   1b0e8:	9201      	str	r2, [sp, #4]
   1b0ea:	210c      	movs	r1, #12
   1b0ec:	4620      	mov	r0, r4
   1b0ee:	f7fe fd01 	bl	19af4 <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
   1b0f2:	f045 0310 	orr.w	r3, r5, #16
   1b0f6:	e7e6      	b.n	1b0c6 <dw1000_set_rx_timeout+0x64>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
   1b0f8:	2201      	movs	r2, #1
   1b0fa:	9202      	str	r2, [sp, #8]
   1b0fc:	9300      	str	r3, [sp, #0]
   1b0fe:	2300      	movs	r3, #0
   1b100:	9301      	str	r3, [sp, #4]
   1b102:	2203      	movs	r2, #3
   1b104:	2104      	movs	r1, #4
   1b106:	4620      	mov	r0, r4
   1b108:	f7fe fcf4 	bl	19af4 <dw1000_write_reg>
   1b10c:	e7dd      	b.n	1b0ca <dw1000_set_rx_timeout+0x68>

0001b10e <dw1000_set_rx_window>:
{
   1b10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b112:	4604      	mov	r4, r0
   1b114:	4690      	mov	r8, r2
   1b116:	461d      	mov	r5, r3
   1b118:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    dw1000_set_delay_start(inst, rx_start);
   1b11c:	f7ff fe00 	bl	1ad20 <dw1000_set_delay_start>
    timeout = calc_rx_window_timeout(rx_start, rx_end);
   1b120:	4632      	mov	r2, r6
   1b122:	463b      	mov	r3, r7
   1b124:	4640      	mov	r0, r8
   1b126:	4629      	mov	r1, r5
   1b128:	f7ff fc65 	bl	1a9f6 <calc_rx_window_timeout>
   1b12c:	4601      	mov	r1, r0
    inst->control.abs_timeout = 1;
   1b12e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1b132:	f043 0308 	orr.w	r3, r3, #8
   1b136:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   1b13a:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   1b13e:	e943 6702 	strd	r6, r7, [r3, #-8]
    dw1000_set_rx_timeout(inst, timeout);
   1b142:	4620      	mov	r0, r4
   1b144:	f7ff ff8d 	bl	1b062 <dw1000_set_rx_timeout>
}
   1b148:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b150 <dw1000_set_abs_timeout>:
{
   1b150:	b430      	push	{r4, r5}
   1b152:	4614      	mov	r4, r2
   1b154:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
   1b156:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   1b15a:	f043 0308 	orr.w	r3, r3, #8
   1b15e:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   1b162:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
   1b166:	e943 4502 	strd	r4, r5, [r3, #-8]
}
   1b16a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1b16e:	bc30      	pop	{r4, r5}
   1b170:	4770      	bx	lr

0001b172 <dw1000_sync_rxbufptrs>:
{
   1b172:	b510      	push	{r4, lr}
   1b174:	b084      	sub	sp, #16
   1b176:	4604      	mov	r4, r0
    inst->control.start_rx_syncbuf_enabled = 1;
   1b178:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1b17c:	f043 0310 	orr.w	r3, r3, #16
   1b180:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1b184:	2301      	movs	r3, #1
   1b186:	2203      	movs	r2, #3
   1b188:	210f      	movs	r1, #15
   1b18a:	f7fe fc43 	bl	19a14 <dw1000_read_reg>
   1b18e:	b2c3      	uxtb	r3, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1b190:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   1b194:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b198:	d103      	bne.n	1b1a2 <dw1000_sync_rxbufptrs+0x30>
}
   1b19a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b19e:	b004      	add	sp, #16
   1b1a0:	bd10      	pop	{r4, pc}
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1b1a2:	2301      	movs	r3, #1
   1b1a4:	9302      	str	r3, [sp, #8]
   1b1a6:	2201      	movs	r2, #1
   1b1a8:	2300      	movs	r3, #0
   1b1aa:	e9cd 2300 	strd	r2, r3, [sp]
   1b1ae:	2203      	movs	r2, #3
   1b1b0:	210d      	movs	r1, #13
   1b1b2:	4620      	mov	r0, r4
   1b1b4:	f7fe fc9e 	bl	19af4 <dw1000_write_reg>
   1b1b8:	e7ef      	b.n	1b19a <dw1000_sync_rxbufptrs+0x28>
	...

0001b1bc <dw1000_mac_framefilter>:
{
   1b1bc:	b570      	push	{r4, r5, r6, lr}
   1b1be:	b084      	sub	sp, #16
   1b1c0:	4604      	mov	r4, r0
   1b1c2:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b1c4:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1b1c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b1cc:	4630      	mov	r0, r6
   1b1ce:	f7ef fdad 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1b1d2:	b148      	cbz	r0, 1b1e8 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b1d4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b1d8:	f043 0308 	orr.w	r3, r3, #8
   1b1dc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b1e0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b1e4:	b004      	add	sp, #16
   1b1e6:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   1b1e8:	2304      	movs	r3, #4
   1b1ea:	2200      	movs	r2, #0
   1b1ec:	4619      	mov	r1, r3
   1b1ee:	4620      	mov	r0, r4
   1b1f0:	f7fe fc10 	bl	19a14 <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
   1b1f4:	f8a4 551c 	strh.w	r5, [r4, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
   1b1f8:	b1cd      	cbz	r5, 1b22e <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   1b1fa:	4b0e      	ldr	r3, [pc, #56]	; (1b234 <dw1000_mac_framefilter+0x78>)
   1b1fc:	4003      	ands	r3, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   1b1fe:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   1b202:	431d      	orrs	r5, r3
   1b204:	f045 0501 	orr.w	r5, r5, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1b208:	2104      	movs	r1, #4
   1b20a:	9102      	str	r1, [sp, #8]
   1b20c:	2200      	movs	r2, #0
   1b20e:	9500      	str	r5, [sp, #0]
   1b210:	9201      	str	r2, [sp, #4]
   1b212:	4620      	mov	r0, r4
   1b214:	f7fe fc6e 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b218:	4630      	mov	r0, r6
   1b21a:	f7ef fd2b 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1b21e:	2800      	cmp	r0, #0
   1b220:	d0de      	beq.n	1b1e0 <dw1000_mac_framefilter+0x24>
   1b222:	2300      	movs	r3, #0
   1b224:	461a      	mov	r2, r3
   1b226:	4619      	mov	r1, r3
   1b228:	4618      	mov	r0, r3
   1b22a:	f7ed ffcb 	bl	91c4 <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
   1b22e:	4d02      	ldr	r5, [pc, #8]	; (1b238 <dw1000_mac_framefilter+0x7c>)
   1b230:	4005      	ands	r5, r0
   1b232:	e7e9      	b.n	1b208 <dw1000_mac_framefilter+0x4c>
   1b234:	f047fe01 	.word	0xf047fe01
   1b238:	f047fffe 	.word	0xf047fffe

0001b23c <dw1000_set_autoack>:
{
   1b23c:	b570      	push	{r4, r5, r6, lr}
   1b23e:	b084      	sub	sp, #16
   1b240:	4604      	mov	r4, r0
   1b242:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b244:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1b248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b24c:	4630      	mov	r0, r6
   1b24e:	f7ef fd6d 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1b252:	b148      	cbz	r0, 1b268 <dw1000_set_autoack+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b254:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b258:	f043 0308 	orr.w	r3, r3, #8
   1b25c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b260:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b264:	b004      	add	sp, #16
   1b266:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   1b268:	2304      	movs	r3, #4
   1b26a:	2200      	movs	r2, #0
   1b26c:	4619      	mov	r1, r3
   1b26e:	4620      	mov	r0, r4
   1b270:	f7fe fbd0 	bl	19a14 <dw1000_read_reg>
   1b274:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1b278:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.autoack_enabled = enable;
   1b27c:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1b280:	f365 0282 	bfi	r2, r5, #2, #1
   1b284:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
   1b288:	b2d2      	uxtb	r2, r2
   1b28a:	f012 0f04 	tst.w	r2, #4
   1b28e:	d014      	beq.n	1b2ba <dw1000_set_autoack+0x7e>
        sys_cfg_reg |= SYS_CFG_AUTOACK;
   1b290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1b294:	2104      	movs	r1, #4
   1b296:	9102      	str	r1, [sp, #8]
   1b298:	2200      	movs	r2, #0
   1b29a:	9300      	str	r3, [sp, #0]
   1b29c:	9201      	str	r2, [sp, #4]
   1b29e:	4620      	mov	r0, r4
   1b2a0:	f7fe fc28 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b2a4:	4630      	mov	r0, r6
   1b2a6:	f7ef fce5 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1b2aa:	2800      	cmp	r0, #0
   1b2ac:	d0d8      	beq.n	1b260 <dw1000_set_autoack+0x24>
   1b2ae:	2300      	movs	r3, #0
   1b2b0:	461a      	mov	r2, r3
   1b2b2:	4619      	mov	r1, r3
   1b2b4:	4618      	mov	r0, r3
   1b2b6:	f7ed ff85 	bl	91c4 <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
   1b2ba:	f020 409f 	bic.w	r0, r0, #1333788672	; 0x4f800000
   1b2be:	f420 1060 	bic.w	r0, r0, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1b2c2:	2104      	movs	r1, #4
   1b2c4:	9102      	str	r1, [sp, #8]
   1b2c6:	2200      	movs	r2, #0
   1b2c8:	9000      	str	r0, [sp, #0]
   1b2ca:	9201      	str	r2, [sp, #4]
   1b2cc:	4620      	mov	r0, r4
   1b2ce:	f7fe fc11 	bl	19af4 <dw1000_write_reg>
   1b2d2:	e7e7      	b.n	1b2a4 <dw1000_set_autoack+0x68>

0001b2d4 <dw1000_set_autoack_delay>:
{
   1b2d4:	b530      	push	{r4, r5, lr}
   1b2d6:	b085      	sub	sp, #20
   1b2d8:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   1b2da:	2501      	movs	r5, #1
   1b2dc:	9502      	str	r5, [sp, #8]
   1b2de:	9100      	str	r1, [sp, #0]
   1b2e0:	2300      	movs	r3, #0
   1b2e2:	9301      	str	r3, [sp, #4]
   1b2e4:	2203      	movs	r2, #3
   1b2e6:	211a      	movs	r1, #26
   1b2e8:	f7fe fc04 	bl	19af4 <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
   1b2ec:	4629      	mov	r1, r5
   1b2ee:	4620      	mov	r0, r4
   1b2f0:	f7ff ffa4 	bl	1b23c <dw1000_set_autoack>
}
   1b2f4:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b2f8:	b005      	add	sp, #20
   1b2fa:	bd30      	pop	{r4, r5, pc}

0001b2fc <dw1000_set_wait4resp_delay>:
{
   1b2fc:	b570      	push	{r4, r5, r6, lr}
   1b2fe:	b084      	sub	sp, #16
   1b300:	4604      	mov	r4, r0
   1b302:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b304:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1b308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b30c:	4628      	mov	r0, r5
   1b30e:	f7ef fd0d 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1b312:	b148      	cbz	r0, 1b328 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b314:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b318:	f043 0308 	orr.w	r3, r3, #8
   1b31c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b320:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b324:	b004      	add	sp, #16
   1b326:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
   1b328:	2304      	movs	r3, #4
   1b32a:	2200      	movs	r2, #0
   1b32c:	211a      	movs	r1, #26
   1b32e:	4620      	mov	r0, r4
   1b330:	f7fe fb70 	bl	19a14 <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
   1b334:	1e32      	subs	r2, r6, #0
   1b336:	bf18      	it	ne
   1b338:	2201      	movne	r2, #1
   1b33a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1b33e:	f362 0341 	bfi	r3, r2, #1, #1
   1b342:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
   1b346:	b2db      	uxtb	r3, r3
   1b348:	f013 0f02 	tst.w	r3, #2
   1b34c:	d102      	bne.n	1b354 <dw1000_set_wait4resp_delay+0x58>
   1b34e:	f3c0 0313 	ubfx	r3, r0, #0, #20
   1b352:	b16b      	cbz	r3, 1b370 <dw1000_set_wait4resp_delay+0x74>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
   1b354:	0d00      	lsrs	r0, r0, #20
   1b356:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   1b358:	f3c6 0113 	ubfx	r1, r6, #0, #20
   1b35c:	4308      	orrs	r0, r1
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
   1b35e:	2304      	movs	r3, #4
   1b360:	9302      	str	r3, [sp, #8]
   1b362:	2200      	movs	r2, #0
   1b364:	9000      	str	r0, [sp, #0]
   1b366:	9201      	str	r2, [sp, #4]
   1b368:	211a      	movs	r1, #26
   1b36a:	4620      	mov	r0, r4
   1b36c:	f7fe fbc2 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b370:	4628      	mov	r0, r5
   1b372:	f7ef fc7f 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1b376:	2800      	cmp	r0, #0
   1b378:	d0d2      	beq.n	1b320 <dw1000_set_wait4resp_delay+0x24>
   1b37a:	2300      	movs	r3, #0
   1b37c:	461a      	mov	r2, r3
   1b37e:	4619      	mov	r1, r3
   1b380:	4618      	mov	r0, r3
   1b382:	f7ed ff1f 	bl	91c4 <__assert_func>

0001b386 <dw1000_set_dblrxbuff>:
{
   1b386:	b570      	push	{r4, r5, r6, lr}
   1b388:	b084      	sub	sp, #16
   1b38a:	4604      	mov	r4, r0
   1b38c:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b38e:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1b392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b396:	4630      	mov	r0, r6
   1b398:	f7ef fcc8 	bl	ad2c <os_mutex_pend>
    if (err != DPL_OK) {
   1b39c:	b148      	cbz	r0, 1b3b2 <dw1000_set_dblrxbuff+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b39e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b3a2:	f043 0308 	orr.w	r3, r3, #8
   1b3a6:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b3aa:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b3ae:	b004      	add	sp, #16
   1b3b0:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   1b3b2:	2304      	movs	r3, #4
   1b3b4:	2200      	movs	r2, #0
   1b3b6:	4619      	mov	r1, r3
   1b3b8:	4620      	mov	r0, r4
   1b3ba:	f7fe fb2b 	bl	19a14 <dw1000_read_reg>
   1b3be:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1b3c2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   1b3c6:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1b3ca:	f365 1204 	bfi	r2, r5, #4, #1
   1b3ce:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
   1b3d2:	b2d2      	uxtb	r2, r2
   1b3d4:	f012 0f10 	tst.w	r2, #16
   1b3d8:	d028      	beq.n	1b42c <dw1000_set_dblrxbuff+0xa6>
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   1b3da:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1b3de:	f423 2301 	bic.w	r3, r3, #528384	; 0x81000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   1b3e2:	2104      	movs	r1, #4
   1b3e4:	9102      	str	r1, [sp, #8]
   1b3e6:	2200      	movs	r2, #0
   1b3e8:	9300      	str	r3, [sp, #0]
   1b3ea:	9201      	str	r2, [sp, #4]
   1b3ec:	4620      	mov	r0, r4
   1b3ee:	f7fe fb81 	bl	19af4 <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   1b3f2:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1b3f6:	f043 0310 	orr.w	r3, r3, #16
   1b3fa:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1b3fe:	2301      	movs	r3, #1
   1b400:	2203      	movs	r2, #3
   1b402:	210f      	movs	r1, #15
   1b404:	4620      	mov	r0, r4
   1b406:	f7fe fb05 	bl	19a14 <dw1000_read_reg>
   1b40a:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1b40c:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1b410:	f010 0f80 	tst.w	r0, #128	; 0x80
   1b414:	d10d      	bne.n	1b432 <dw1000_set_dblrxbuff+0xac>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b416:	4630      	mov	r0, r6
   1b418:	f7ef fc2c 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1b41c:	2800      	cmp	r0, #0
   1b41e:	d0c4      	beq.n	1b3aa <dw1000_set_dblrxbuff+0x24>
   1b420:	2300      	movs	r3, #0
   1b422:	461a      	mov	r2, r3
   1b424:	4619      	mov	r1, r3
   1b426:	4618      	mov	r0, r3
   1b428:	f7ed fecc 	bl	91c4 <__assert_func>
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   1b42c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b430:	e7d7      	b.n	1b3e2 <dw1000_set_dblrxbuff+0x5c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1b432:	2301      	movs	r3, #1
   1b434:	9302      	str	r3, [sp, #8]
   1b436:	2201      	movs	r2, #1
   1b438:	2300      	movs	r3, #0
   1b43a:	e9cd 2300 	strd	r2, r3, [sp]
   1b43e:	2203      	movs	r2, #3
   1b440:	210d      	movs	r1, #13
   1b442:	4620      	mov	r0, r4
   1b444:	f7fe fb56 	bl	19af4 <dw1000_write_reg>
   1b448:	e7e5      	b.n	1b416 <dw1000_set_dblrxbuff+0x90>
   1b44a:	0000      	movs	r0, r0
   1b44c:	0000      	movs	r0, r0
	...

0001b450 <dw1000_mac_config>:
{
   1b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b454:	b087      	sub	sp, #28
   1b456:	4604      	mov	r4, r0
    if (config == NULL) {
   1b458:	2900      	cmp	r1, #0
   1b45a:	f000 817f 	beq.w	1b75c <dw1000_mac_config+0x30c>
   1b45e:	460d      	mov	r5, r1
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
   1b460:	460b      	mov	r3, r1
   1b462:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   1b466:	f101 0c20 	add.w	ip, r1, #32
   1b46a:	681f      	ldr	r7, [r3, #0]
   1b46c:	685e      	ldr	r6, [r3, #4]
   1b46e:	6898      	ldr	r0, [r3, #8]
   1b470:	68d9      	ldr	r1, [r3, #12]
   1b472:	6017      	str	r7, [r2, #0]
   1b474:	6056      	str	r6, [r2, #4]
   1b476:	6090      	str	r0, [r2, #8]
   1b478:	60d1      	str	r1, [r2, #12]
   1b47a:	3310      	adds	r3, #16
   1b47c:	3210      	adds	r2, #16
   1b47e:	4563      	cmp	r3, ip
   1b480:	d1f3      	bne.n	1b46a <dw1000_mac_config+0x1a>
   1b482:	681b      	ldr	r3, [r3, #0]
   1b484:	6013      	str	r3, [r2, #0]
    chan = config->channel;
   1b486:	782f      	ldrb	r7, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
   1b488:	f895 8002 	ldrb.w	r8, [r5, #2]
   1b48c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b490:	fa5f f888 	uxtb.w	r8, r8
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   1b494:	2f04      	cmp	r7, #4
   1b496:	f000 8167 	beq.w	1b768 <dw1000_mac_config+0x318>
   1b49a:	2f07      	cmp	r7, #7
   1b49c:	f000 8161 	beq.w	1b762 <dw1000_mac_config+0x312>
   1b4a0:	2300      	movs	r3, #0
   1b4a2:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   1b4a4:	796a      	ldrb	r2, [r5, #5]
   1b4a6:	4bca      	ldr	r3, [pc, #808]	; (1b7d0 <dw1000_mac_config+0x380>)
   1b4a8:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   1b4ac:	2304      	movs	r3, #4
   1b4ae:	2200      	movs	r2, #0
   1b4b0:	4619      	mov	r1, r3
   1b4b2:	4620      	mov	r0, r4
   1b4b4:	f7fe faae 	bl	19a14 <dw1000_read_reg>
   1b4b8:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
   1b4bc:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   1b4c0:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    if(config->dataRate == DWT_BR_110K){
   1b4c4:	786b      	ldrb	r3, [r5, #1]
   1b4c6:	2b00      	cmp	r3, #0
   1b4c8:	f040 8151 	bne.w	1b76e <dw1000_mac_config+0x31e>
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
   1b4cc:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   1b4d0:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
   1b4d4:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
   1b4d8:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   1b4dc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1b4e0:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   1b4e4:	79ea      	ldrb	r2, [r5, #7]
   1b4e6:	0412      	lsls	r2, r2, #16
   1b4e8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
   1b4ec:	4313      	orrs	r3, r2
   1b4ee:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    if (config->rxauto_enable)
   1b4f2:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1b4f6:	f012 0f01 	tst.w	r2, #1
   1b4fa:	f000 813d 	beq.w	1b778 <dw1000_mac_config+0x328>
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
   1b4fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1b502:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   1b506:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   1b50a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b50e:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   1b512:	f04f 0904 	mov.w	r9, #4
   1b516:	f8cd 9008 	str.w	r9, [sp, #8]
   1b51a:	2600      	movs	r6, #0
   1b51c:	9300      	str	r3, [sp, #0]
   1b51e:	9601      	str	r6, [sp, #4]
   1b520:	4632      	mov	r2, r6
   1b522:	4649      	mov	r1, r9
   1b524:	4620      	mov	r0, r4
   1b526:	f7fe fae5 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   1b52a:	f04f 0a02 	mov.w	sl, #2
   1b52e:	f8cd a008 	str.w	sl, [sp, #8]
   1b532:	f8cd b000 	str.w	fp, [sp]
   1b536:	9601      	str	r6, [sp, #4]
   1b538:	f642 0204 	movw	r2, #10244	; 0x2804
   1b53c:	212e      	movs	r1, #46	; 0x2e
   1b53e:	4620      	mov	r0, r4
   1b540:	f7fe fad8 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
   1b544:	4641      	mov	r1, r8
   1b546:	4620      	mov	r0, r4
   1b548:	f001 f9a9 	bl	1c89e <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   1b54c:	4ba1      	ldr	r3, [pc, #644]	; (1b7d4 <dw1000_mac_config+0x384>)
   1b54e:	f813 b007 	ldrb.w	fp, [r3, r7]
   1b552:	4ba1      	ldr	r3, [pc, #644]	; (1b7d8 <dw1000_mac_config+0x388>)
   1b554:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   1b558:	f8cd 9008 	str.w	r9, [sp, #8]
   1b55c:	9300      	str	r3, [sp, #0]
   1b55e:	9601      	str	r6, [sp, #4]
   1b560:	2207      	movs	r2, #7
   1b562:	212b      	movs	r1, #43	; 0x2b
   1b564:	4620      	mov	r0, r4
   1b566:	f7fe fac5 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
   1b56a:	4b9c      	ldr	r3, [pc, #624]	; (1b7dc <dw1000_mac_config+0x38c>)
   1b56c:	f813 300b 	ldrb.w	r3, [r3, fp]
   1b570:	2201      	movs	r2, #1
   1b572:	9202      	str	r2, [sp, #8]
   1b574:	9300      	str	r3, [sp, #0]
   1b576:	9601      	str	r6, [sp, #4]
   1b578:	220b      	movs	r2, #11
   1b57a:	212b      	movs	r1, #43	; 0x2b
   1b57c:	4620      	mov	r0, r4
   1b57e:	f7fe fab9 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
   1b582:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b586:	4a96      	ldr	r2, [pc, #600]	; (1b7e0 <dw1000_mac_config+0x390>)
   1b588:	5cd3      	ldrb	r3, [r2, r3]
   1b58a:	2201      	movs	r2, #1
   1b58c:	9202      	str	r2, [sp, #8]
   1b58e:	9300      	str	r3, [sp, #0]
   1b590:	9601      	str	r6, [sp, #4]
   1b592:	220b      	movs	r2, #11
   1b594:	2128      	movs	r1, #40	; 0x28
   1b596:	4620      	mov	r0, r4
   1b598:	f7fe faac 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
   1b59c:	4b91      	ldr	r3, [pc, #580]	; (1b7e4 <dw1000_mac_config+0x394>)
   1b59e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   1b5a2:	f8cd 9008 	str.w	r9, [sp, #8]
   1b5a6:	9300      	str	r3, [sp, #0]
   1b5a8:	9601      	str	r6, [sp, #4]
   1b5aa:	220c      	movs	r2, #12
   1b5ac:	2128      	movs	r1, #40	; 0x28
   1b5ae:	4620      	mov	r0, r4
   1b5b0:	f7fe faa0 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
   1b5b4:	786a      	ldrb	r2, [r5, #1]
   1b5b6:	79ab      	ldrb	r3, [r5, #6]
   1b5b8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1b5bc:	4a8a      	ldr	r2, [pc, #552]	; (1b7e8 <dw1000_mac_config+0x398>)
   1b5be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1b5c2:	f8cd a008 	str.w	sl, [sp, #8]
   1b5c6:	9300      	str	r3, [sp, #0]
   1b5c8:	9601      	str	r6, [sp, #4]
   1b5ca:	4652      	mov	r2, sl
   1b5cc:	2127      	movs	r1, #39	; 0x27
   1b5ce:	4620      	mov	r0, r4
   1b5d0:	f7fe fa90 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
   1b5d4:	4b85      	ldr	r3, [pc, #532]	; (1b7ec <dw1000_mac_config+0x39c>)
   1b5d6:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
   1b5da:	f8cd a008 	str.w	sl, [sp, #8]
   1b5de:	9300      	str	r3, [sp, #0]
   1b5e0:	9601      	str	r6, [sp, #4]
   1b5e2:	464a      	mov	r2, r9
   1b5e4:	2127      	movs	r1, #39	; 0x27
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	f7fe fa84 	bl	19af4 <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
   1b5ec:	786b      	ldrb	r3, [r5, #1]
   1b5ee:	2b00      	cmp	r3, #0
   1b5f0:	f000 80c7 	beq.w	1b782 <dw1000_mac_config+0x332>
        if(config->tx.preambleLength == DWT_PLEN_64){
   1b5f4:	7d6b      	ldrb	r3, [r5, #21]
   1b5f6:	2b04      	cmp	r3, #4
   1b5f8:	f000 80cf 	beq.w	1b79a <dw1000_mac_config+0x34a>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
   1b5fc:	2602      	movs	r6, #2
   1b5fe:	9602      	str	r6, [sp, #8]
   1b600:	2220      	movs	r2, #32
   1b602:	2300      	movs	r3, #0
   1b604:	e9cd 2300 	strd	r2, r3, [sp]
   1b608:	2206      	movs	r2, #6
   1b60a:	2127      	movs	r1, #39	; 0x27
   1b60c:	4620      	mov	r0, r4
   1b60e:	f7fe fa71 	bl	19af4 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   1b612:	9602      	str	r6, [sp, #8]
   1b614:	2228      	movs	r2, #40	; 0x28
   1b616:	2300      	movs	r3, #0
   1b618:	e9cd 2300 	strd	r2, r3, [sp]
   1b61c:	2226      	movs	r2, #38	; 0x26
   1b61e:	2127      	movs	r1, #39	; 0x27
   1b620:	4620      	mov	r0, r4
   1b622:	f7fe fa67 	bl	19af4 <dw1000_write_reg>
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   1b626:	792b      	ldrb	r3, [r5, #4]
   1b628:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   1b62c:	4a70      	ldr	r2, [pc, #448]	; (1b7f0 <dw1000_mac_config+0x3a0>)
   1b62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   1b632:	2204      	movs	r2, #4
   1b634:	9202      	str	r2, [sp, #8]
   1b636:	9300      	str	r3, [sp, #0]
   1b638:	2300      	movs	r3, #0
   1b63a:	9301      	str	r3, [sp, #4]
   1b63c:	2208      	movs	r2, #8
   1b63e:	2127      	movs	r1, #39	; 0x27
   1b640:	4620      	mov	r0, r4
   1b642:	f7fe fa57 	bl	19af4 <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
   1b646:	896b      	ldrh	r3, [r5, #10]
   1b648:	b90b      	cbnz	r3, 1b64e <dw1000_mac_config+0x1fe>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
   1b64a:	2381      	movs	r3, #129	; 0x81
   1b64c:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
   1b64e:	896b      	ldrh	r3, [r5, #10]
   1b650:	f04f 0a02 	mov.w	sl, #2
   1b654:	f8cd a008 	str.w	sl, [sp, #8]
   1b658:	f04f 0900 	mov.w	r9, #0
   1b65c:	9300      	str	r3, [sp, #0]
   1b65e:	f8cd 9004 	str.w	r9, [sp, #4]
   1b662:	2220      	movs	r2, #32
   1b664:	2127      	movs	r1, #39	; 0x27
   1b666:	4620      	mov	r0, r4
   1b668:	f7fe fa44 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
   1b66c:	2604      	movs	r6, #4
   1b66e:	9602      	str	r6, [sp, #8]
   1b670:	a355      	add	r3, pc, #340	; (adr r3, 1b7c8 <dw1000_mac_config+0x378>)
   1b672:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b676:	e9cd 2300 	strd	r2, r3, [sp]
   1b67a:	220c      	movs	r2, #12
   1b67c:	2123      	movs	r1, #35	; 0x23
   1b67e:	4620      	mov	r0, r4
   1b680:	f7fe fa38 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
   1b684:	4b5b      	ldr	r3, [pc, #364]	; (1b7f4 <dw1000_mac_config+0x3a4>)
   1b686:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   1b68a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1b68e:	f8cd a008 	str.w	sl, [sp, #8]
   1b692:	9300      	str	r3, [sp, #0]
   1b694:	f8cd 9004 	str.w	r9, [sp, #4]
   1b698:	4632      	mov	r2, r6
   1b69a:	2123      	movs	r1, #35	; 0x23
   1b69c:	4620      	mov	r0, r4
   1b69e:	f7fe fa29 	bl	19af4 <dw1000_write_reg>
    if(config->rx.sfdType){
   1b6a2:	79aa      	ldrb	r2, [r5, #6]
   1b6a4:	2a00      	cmp	r2, #0
   1b6a6:	f040 80a7 	bne.w	1b7f8 <dw1000_mac_config+0x3a8>
    uint8_t useDWnsSFD = 0;
   1b6aa:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   1b6ac:	f007 030f 	and.w	r3, r7, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   1b6b0:	013f      	lsls	r7, r7, #4
   1b6b2:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   1b6b4:	433b      	orrs	r3, r7
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   1b6b6:	78af      	ldrb	r7, [r5, #2]
   1b6b8:	04bf      	lsls	r7, r7, #18
   1b6ba:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   1b6be:	433b      	orrs	r3, r7
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   1b6c0:	0512      	lsls	r2, r2, #20
   1b6c2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   1b6c6:	4313      	orrs	r3, r2
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   1b6c8:	044a      	lsls	r2, r1, #17
   1b6ca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   1b6ce:	4313      	orrs	r3, r2
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   1b6d0:	7d2a      	ldrb	r2, [r5, #20]
   1b6d2:	0592      	lsls	r2, r2, #22
   1b6d4:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   1b6d8:	4313      	orrs	r3, r2
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
   1b6da:	796a      	ldrb	r2, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   1b6dc:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   1b6e0:	2704      	movs	r7, #4
   1b6e2:	9702      	str	r7, [sp, #8]
   1b6e4:	2600      	movs	r6, #0
   1b6e6:	9300      	str	r3, [sp, #0]
   1b6e8:	9601      	str	r6, [sp, #4]
   1b6ea:	4632      	mov	r2, r6
   1b6ec:	211f      	movs	r1, #31
   1b6ee:	4620      	mov	r0, r4
   1b6f0:	f7fe fa00 	bl	19af4 <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1b6f4:	7d6b      	ldrb	r3, [r5, #21]
   1b6f6:	78aa      	ldrb	r2, [r5, #2]
   1b6f8:	431a      	orrs	r2, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   1b6fa:	786b      	ldrb	r3, [r5, #1]
   1b6fc:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1b6fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1b702:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   1b706:	9702      	str	r7, [sp, #8]
   1b708:	9300      	str	r3, [sp, #0]
   1b70a:	9601      	str	r6, [sp, #4]
   1b70c:	4632      	mov	r2, r6
   1b70e:	2108      	movs	r1, #8
   1b710:	4620      	mov	r0, r4
   1b712:	f7fe f9ef 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1b716:	2301      	movs	r3, #1
   1b718:	9302      	str	r3, [sp, #8]
   1b71a:	2242      	movs	r2, #66	; 0x42
   1b71c:	2300      	movs	r3, #0
   1b71e:	e9cd 2300 	strd	r2, r3, [sp]
   1b722:	4632      	mov	r2, r6
   1b724:	210d      	movs	r1, #13
   1b726:	4620      	mov	r0, r4
   1b728:	f7fe f9e4 	bl	19af4 <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
   1b72c:	8a29      	ldrh	r1, [r5, #16]
   1b72e:	4620      	mov	r0, r4
   1b730:	f7ff fd44 	bl	1b1bc <dw1000_mac_framefilter>
    if (config->rxauto_enable)
   1b734:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b738:	f013 0f01 	tst.w	r3, #1
   1b73c:	d004      	beq.n	1b748 <dw1000_mac_config+0x2f8>
        assert(config->trxoff_enable);
   1b73e:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b742:	f013 0f20 	tst.w	r3, #32
   1b746:	d067      	beq.n	1b818 <dw1000_mac_config+0x3c8>
    if(config->dblbuffon_enabled)
   1b748:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b74c:	f013 0f10 	tst.w	r3, #16
   1b750:	d168      	bne.n	1b824 <dw1000_mac_config+0x3d4>
}
   1b752:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b756:	b007      	add	sp, #28
   1b758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config = &inst->uwb_dev.config;
   1b75c:	f200 550c 	addw	r5, r0, #1292	; 0x50c
   1b760:	e691      	b.n	1b486 <dw1000_mac_config+0x36>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   1b762:	2301      	movs	r3, #1
   1b764:	9305      	str	r3, [sp, #20]
   1b766:	e69d      	b.n	1b4a4 <dw1000_mac_config+0x54>
   1b768:	2301      	movs	r3, #1
   1b76a:	9305      	str	r3, [sp, #20]
   1b76c:	e69a      	b.n	1b4a4 <dw1000_mac_config+0x54>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
   1b76e:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
   1b772:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
   1b776:	e6af      	b.n	1b4d8 <dw1000_mac_config+0x88>
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
   1b778:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b77c:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
   1b780:	e6c1      	b.n	1b506 <dw1000_mac_config+0xb6>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
   1b782:	f8cd a008 	str.w	sl, [sp, #8]
   1b786:	2264      	movs	r2, #100	; 0x64
   1b788:	2300      	movs	r3, #0
   1b78a:	e9cd 2300 	strd	r2, r3, [sp]
   1b78e:	2206      	movs	r2, #6
   1b790:	2127      	movs	r1, #39	; 0x27
   1b792:	4620      	mov	r0, r4
   1b794:	f7fe f9ae 	bl	19af4 <dw1000_write_reg>
   1b798:	e745      	b.n	1b626 <dw1000_mac_config+0x1d6>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   1b79a:	2602      	movs	r6, #2
   1b79c:	9602      	str	r6, [sp, #8]
   1b79e:	f04f 0a10 	mov.w	sl, #16
   1b7a2:	f04f 0b00 	mov.w	fp, #0
   1b7a6:	e9cd ab00 	strd	sl, fp, [sp]
   1b7aa:	2206      	movs	r2, #6
   1b7ac:	2127      	movs	r1, #39	; 0x27
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f7fe f9a0 	bl	19af4 <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
   1b7b4:	9602      	str	r6, [sp, #8]
   1b7b6:	e9cd ab00 	strd	sl, fp, [sp]
   1b7ba:	2226      	movs	r2, #38	; 0x26
   1b7bc:	2127      	movs	r1, #39	; 0x27
   1b7be:	4620      	mov	r0, r4
   1b7c0:	f7fe f998 	bl	19af4 <dw1000_write_reg>
   1b7c4:	e72f      	b.n	1b626 <dw1000_mac_config+0x1d6>
   1b7c6:	bf00      	nop
   1b7c8:	2502a907 	.word	0x2502a907
   1b7cc:	00000000 	.word	0x00000000
   1b7d0:	00027030 	.word	0x00027030
   1b7d4:	00026fa4 	.word	0x00026fa4
   1b7d8:	00026fd4 	.word	0x00026fd4
   1b7dc:	00026fec 	.word	0x00026fec
   1b7e0:	00027064 	.word	0x00027064
   1b7e4:	00027074 	.word	0x00027074
   1b7e8:	00027068 	.word	0x00027068
   1b7ec:	00026fcc 	.word	0x00026fcc
   1b7f0:	00026fac 	.word	0x00026fac
   1b7f4:	00026f9c 	.word	0x00026f9c
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
   1b7f8:	786b      	ldrb	r3, [r5, #1]
   1b7fa:	4a0d      	ldr	r2, [pc, #52]	; (1b830 <dw1000_mac_config+0x3e0>)
   1b7fc:	5cd3      	ldrb	r3, [r2, r3]
   1b7fe:	2601      	movs	r6, #1
   1b800:	9602      	str	r6, [sp, #8]
   1b802:	464a      	mov	r2, r9
   1b804:	9300      	str	r3, [sp, #0]
   1b806:	f8cd 9004 	str.w	r9, [sp, #4]
   1b80a:	2121      	movs	r1, #33	; 0x21
   1b80c:	4620      	mov	r0, r4
   1b80e:	f7fe f971 	bl	19af4 <dw1000_write_reg>
        useDWnsSFD = 1 ;
   1b812:	4631      	mov	r1, r6
        nsSfd_result = 3 ;
   1b814:	2203      	movs	r2, #3
   1b816:	e749      	b.n	1b6ac <dw1000_mac_config+0x25c>
        assert(config->trxoff_enable);
   1b818:	4633      	mov	r3, r6
   1b81a:	4632      	mov	r2, r6
   1b81c:	4631      	mov	r1, r6
   1b81e:	4630      	mov	r0, r6
   1b820:	f7ed fcd0 	bl	91c4 <__assert_func>
        dw1000_set_dblrxbuff(inst, true);
   1b824:	2101      	movs	r1, #1
   1b826:	4620      	mov	r0, r4
   1b828:	f7ff fdad 	bl	1b386 <dw1000_set_dblrxbuff>
   1b82c:	e791      	b.n	1b752 <dw1000_mac_config+0x302>
   1b82e:	bf00      	nop
   1b830:	00026fd0 	.word	0x00026fd0

0001b834 <dw1000_read_carrier_integrator>:
{
   1b834:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
   1b836:	2303      	movs	r3, #3
   1b838:	2228      	movs	r2, #40	; 0x28
   1b83a:	2127      	movs	r1, #39	; 0x27
   1b83c:	f7fe f8ea 	bl	19a14 <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
   1b840:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1b844:	d005      	beq.n	1b852 <dw1000_read_carrier_integrator+0x1e>
        regval |= B20_SIGN_EXTEND_MASK;
   1b846:	ea6f 3000 	mvn.w	r0, r0, lsl #12
   1b84a:	ea6f 3010 	mvn.w	r0, r0, lsr #12
}
   1b84e:	4240      	negs	r0, r0
   1b850:	bd08      	pop	{r3, pc}
        regval &= DRX_CARRIER_INT_MASK;
   1b852:	f3c0 0014 	ubfx	r0, r0, #0, #21
   1b856:	e7fa      	b.n	1b84e <dw1000_read_carrier_integrator+0x1a>

0001b858 <dw1000_calc_clock_offset_ratio>:
{
   1b858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b85c:	4603      	mov	r3, r0
   1b85e:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
   1b860:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
   1b864:	b172      	cbz	r2, 1b884 <dw1000_calc_clock_offset_ratio+0x2c>
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
   1b866:	f20f 0998 	addw	r9, pc, #152	; 0x98
   1b86a:	e9d9 8900 	ldrd	r8, r9, [r9]
    switch ( inst->uwb_dev.config.channel ) {
   1b86e:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
   1b872:	3b01      	subs	r3, #1
   1b874:	2b06      	cmp	r3, #6
   1b876:	d832      	bhi.n	1b8de <dw1000_calc_clock_offset_ratio+0x86>
   1b878:	e8df f003 	tbb	[pc, r3]
   1b87c:	25093b37 	.word	0x25093b37
   1b880:	3129      	.short	0x3129
   1b882:	2d          	.byte	0x2d
   1b883:	00          	.byte	0x00
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
   1b884:	f20f 0980 	addw	r9, pc, #128	; 0x80
   1b888:	e9d9 8900 	ldrd	r8, r9, [r9]
   1b88c:	e7ef      	b.n	1b86e <dw1000_calc_clock_offset_ratio+0x16>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
   1b88e:	a720      	add	r7, pc, #128	; (adr r7, 1b910 <dw1000_calc_clock_offset_ratio+0xb8>)
   1b890:	e9d7 6700 	ldrd	r6, r7, [r7]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
   1b894:	f007 fe5a 	bl	2354c <__aeabi_i2d>
   1b898:	4604      	mov	r4, r0
   1b89a:	460d      	mov	r5, r1
   1b89c:	4632      	mov	r2, r6
   1b89e:	463b      	mov	r3, r7
   1b8a0:	4640      	mov	r0, r8
   1b8a2:	4649      	mov	r1, r9
   1b8a4:	f007 febc 	bl	23620 <__aeabi_dmul>
   1b8a8:	4602      	mov	r2, r0
   1b8aa:	460b      	mov	r3, r1
   1b8ac:	4620      	mov	r0, r4
   1b8ae:	4629      	mov	r1, r5
   1b8b0:	f007 feb6 	bl	23620 <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
   1b8b4:	a318      	add	r3, pc, #96	; (adr r3, 1b918 <dw1000_calc_clock_offset_ratio+0xc0>)
   1b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b8ba:	f007 ffdb 	bl	23874 <__aeabi_ddiv>
}
   1b8be:	ec41 0b10 	vmov	d0, r0, r1
   1b8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 4: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_4);break;
   1b8c6:	a712      	add	r7, pc, #72	; (adr r7, 1b910 <dw1000_calc_clock_offset_ratio+0xb8>)
   1b8c8:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b8cc:	e7e2      	b.n	1b894 <dw1000_calc_clock_offset_ratio+0x3c>
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
   1b8ce:	a714      	add	r7, pc, #80	; (adr r7, 1b920 <dw1000_calc_clock_offset_ratio+0xc8>)
   1b8d0:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b8d4:	e7de      	b.n	1b894 <dw1000_calc_clock_offset_ratio+0x3c>
    case 7: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_7);break;
   1b8d6:	a712      	add	r7, pc, #72	; (adr r7, 1b920 <dw1000_calc_clock_offset_ratio+0xc8>)
   1b8d8:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b8dc:	e7da      	b.n	1b894 <dw1000_calc_clock_offset_ratio+0x3c>
    default: assert(0);
   1b8de:	2300      	movs	r3, #0
   1b8e0:	461a      	mov	r2, r3
   1b8e2:	4619      	mov	r1, r3
   1b8e4:	4618      	mov	r0, r3
   1b8e6:	f7ed fc6d 	bl	91c4 <__assert_func>
    switch ( inst->uwb_dev.config.channel ) {
   1b8ea:	a70f      	add	r7, pc, #60	; (adr r7, 1b928 <dw1000_calc_clock_offset_ratio+0xd0>)
   1b8ec:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b8f0:	e7d0      	b.n	1b894 <dw1000_calc_clock_offset_ratio+0x3c>
    case 2: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_2);break;
   1b8f2:	a70f      	add	r7, pc, #60	; (adr r7, 1b930 <dw1000_calc_clock_offset_ratio+0xd8>)
   1b8f4:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b8f8:	e7cc      	b.n	1b894 <dw1000_calc_clock_offset_ratio+0x3c>
   1b8fa:	bf00      	nop
   1b8fc:	f3af 8000 	nop.w
   1b900:	00000000 	.word	0x00000000
   1b904:	400dc130 	.word	0x400dc130
   1b908:	00000000 	.word	0x00000000
   1b90c:	3fddc130 	.word	0x3fddc130
   1b910:	7281d2c8 	.word	0x7281d2c8
   1b914:	3f2d2c7d 	.word	0x3f2d2c7d
   1b918:	00000000 	.word	0x00000000
   1b91c:	412e8480 	.word	0x412e8480
   1b920:	3b94f463 	.word	0x3b94f463
   1b924:	3f24327e 	.word	0x3f24327e
   1b928:	12c12c13 	.word	0x12c12c13
   1b92c:	3f32c12c 	.word	0x3f32c12c
   1b930:	90690690 	.word	0x90690690
   1b934:	3f306906 	.word	0x3f306906

0001b938 <dw1000_read_time_tracking_offset>:
{
   1b938:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
   1b93a:	2303      	movs	r3, #3
   1b93c:	2200      	movs	r2, #0
   1b93e:	2114      	movs	r1, #20
   1b940:	f7fe f868 	bl	19a14 <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
   1b944:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   1b948:	d004      	beq.n	1b954 <dw1000_read_time_tracking_offset+0x1c>
        regval |= B18_SIGN_EXTEND_MASK;
   1b94a:	ea6f 3080 	mvn.w	r0, r0, lsl #14
   1b94e:	ea6f 3090 	mvn.w	r0, r0, lsr #14
}
   1b952:	bd08      	pop	{r3, pc}
        regval &= RX_TTCKO_RXTOFS_MASK;
   1b954:	f3c0 0012 	ubfx	r0, r0, #0, #19
   1b958:	e7fb      	b.n	1b952 <dw1000_read_time_tracking_offset+0x1a>

0001b95a <dw1000_calc_clock_offset_ratio_ttco>:
{
   1b95a:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
   1b95c:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
   1b960:	2b01      	cmp	r3, #1
   1b962:	d012      	beq.n	1b98a <dw1000_calc_clock_offset_ratio_ttco+0x30>
        denom = 0x01FC0000;
   1b964:	f04f 76fe 	mov.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   1b968:	4248      	negs	r0, r1
   1b96a:	f007 fdef 	bl	2354c <__aeabi_i2d>
   1b96e:	4604      	mov	r4, r0
   1b970:	460d      	mov	r5, r1
   1b972:	4630      	mov	r0, r6
   1b974:	f007 fdea 	bl	2354c <__aeabi_i2d>
   1b978:	4602      	mov	r2, r0
   1b97a:	460b      	mov	r3, r1
   1b97c:	4620      	mov	r0, r4
   1b97e:	4629      	mov	r1, r5
   1b980:	f007 ff78 	bl	23874 <__aeabi_ddiv>
}
   1b984:	ec41 0b10 	vmov	d0, r0, r1
   1b988:	bd70      	pop	{r4, r5, r6, pc}
    int32_t denom = 0x01F00000;
   1b98a:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
   1b98e:	e7eb      	b.n	1b968 <dw1000_calc_clock_offset_ratio_ttco+0xe>

0001b990 <dw1000_read_rxdiag>:
{
   1b990:	b570      	push	{r4, r5, r6, lr}
   1b992:	b082      	sub	sp, #8
   1b994:	4605      	mov	r5, r0
   1b996:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   1b998:	2604      	movs	r6, #4
   1b99a:	9600      	str	r6, [sp, #0]
   1b99c:	1d8b      	adds	r3, r1, #6
   1b99e:	2205      	movs	r2, #5
   1b9a0:	2115      	movs	r1, #21
   1b9a2:	f7fd ff6d 	bl	19880 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
   1b9a6:	2308      	movs	r3, #8
   1b9a8:	9300      	str	r3, [sp, #0]
   1b9aa:	f104 030a 	add.w	r3, r4, #10
   1b9ae:	2200      	movs	r2, #0
   1b9b0:	2112      	movs	r1, #18
   1b9b2:	4628      	mov	r0, r5
   1b9b4:	f7fd ff64 	bl	19880 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   1b9b8:	4633      	mov	r3, r6
   1b9ba:	2200      	movs	r2, #0
   1b9bc:	2110      	movs	r1, #16
   1b9be:	4628      	mov	r0, r5
   1b9c0:	f7fe f828 	bl	19a14 <dw1000_read_reg>
   1b9c4:	0d00      	lsrs	r0, r0, #20
   1b9c6:	8260      	strh	r0, [r4, #18]
}
   1b9c8:	b002      	add	sp, #8
   1b9ca:	bd70      	pop	{r4, r5, r6, pc}
   1b9cc:	0000      	movs	r0, r0
	...

0001b9d0 <dw1000_tasks_init>:
{
   1b9d0:	b530      	push	{r4, r5, lr}
   1b9d2:	b085      	sub	sp, #20
   1b9d4:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
   1b9d6:	303c      	adds	r0, #60	; 0x3c
   1b9d8:	f7ed ff31 	bl	983e <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
   1b9dc:	b1c0      	cbz	r0, 1ba10 <dw1000_tasks_init+0x40>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
   1b9de:	4d18      	ldr	r5, [pc, #96]	; (1ba40 <dw1000_tasks_init+0x70>)
   1b9e0:	2200      	movs	r2, #0
   1b9e2:	4629      	mov	r1, r5
   1b9e4:	4620      	mov	r0, r4
   1b9e6:	f001 f94f 	bl	1cc88 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
   1b9ea:	2304      	movs	r3, #4
   1b9ec:	9302      	str	r3, [sp, #8]
   1b9ee:	a312      	add	r3, pc, #72	; (adr r3, 1ba38 <dw1000_tasks_init+0x68>)
   1b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b9f4:	e9cd 2300 	strd	r2, r3, [sp]
   1b9f8:	2200      	movs	r2, #0
   1b9fa:	210f      	movs	r1, #15
   1b9fc:	4620      	mov	r0, r4
   1b9fe:	f7fe f879 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   1ba02:	2201      	movs	r2, #1
   1ba04:	4629      	mov	r1, r5
   1ba06:	4620      	mov	r0, r4
   1ba08:	f001 f93e 	bl	1cc88 <dw1000_phy_interrupt_mask>
}
   1ba0c:	b005      	add	sp, #20
   1ba0e:	bd30      	pop	{r4, r5, pc}
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
   1ba10:	490c      	ldr	r1, [pc, #48]	; (1ba44 <dw1000_tasks_init+0x74>)
   1ba12:	4620      	mov	r0, r4
   1ba14:	f7ed f9bc 	bl	8d90 <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
   1ba18:	2302      	movs	r3, #2
   1ba1a:	9300      	str	r3, [sp, #0]
   1ba1c:	2301      	movs	r3, #1
   1ba1e:	4622      	mov	r2, r4
   1ba20:	4909      	ldr	r1, [pc, #36]	; (1ba48 <dw1000_tasks_init+0x78>)
   1ba22:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1ba26:	f7ed fb51 	bl	90cc <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
   1ba2a:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1ba2e:	f7ed fb89 	bl	9144 <hal_gpio_irq_enable>
   1ba32:	e7d4      	b.n	1b9de <dw1000_tasks_init+0xe>
   1ba34:	f3af 8000 	nop.w
   1ba38:	34b7b092 	.word	0x34b7b092
   1ba3c:	00000000 	.word	0x00000000
   1ba40:	3437b092 	.word	0x3437b092
   1ba44:	0001bac9 	.word	0x0001bac9
   1ba48:	0001aa31 	.word	0x0001aa31

0001ba4c <dw1000_mac_init>:
{
   1ba4c:	b530      	push	{r4, r5, lr}
   1ba4e:	b083      	sub	sp, #12
   1ba50:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
   1ba52:	f7ff fcfd 	bl	1b450 <dw1000_mac_config>
    dw1000_tasks_init(inst);
   1ba56:	4620      	mov	r0, r4
   1ba58:	f7ff ffba 	bl	1b9d0 <dw1000_tasks_init>
        int rc = stats_init(
   1ba5c:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
   1ba60:	220a      	movs	r2, #10
   1ba62:	9200      	str	r2, [sp, #0]
   1ba64:	4b0d      	ldr	r3, [pc, #52]	; (1ba9c <dw1000_mac_init+0x50>)
   1ba66:	2104      	movs	r1, #4
   1ba68:	4628      	mov	r0, r5
   1ba6a:	f7fa fa87 	bl	15f7c <stats_init>
        assert(rc == 0);
   1ba6e:	b940      	cbnz	r0, 1ba82 <dw1000_mac_init+0x36>
        rc = stats_register("mac", STATS_HDR(inst->stat));
   1ba70:	4629      	mov	r1, r5
   1ba72:	480b      	ldr	r0, [pc, #44]	; (1baa0 <dw1000_mac_init+0x54>)
   1ba74:	f7fa fb06 	bl	16084 <stats_register>
        assert(rc == 0);
   1ba78:	b948      	cbnz	r0, 1ba8e <dw1000_mac_init+0x42>
}
   1ba7a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ba7e:	b003      	add	sp, #12
   1ba80:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   1ba82:	2300      	movs	r3, #0
   1ba84:	461a      	mov	r2, r3
   1ba86:	4619      	mov	r1, r3
   1ba88:	4618      	mov	r0, r3
   1ba8a:	f7ed fb9b 	bl	91c4 <__assert_func>
        assert(rc == 0);
   1ba8e:	2300      	movs	r3, #0
   1ba90:	461a      	mov	r2, r3
   1ba92:	4619      	mov	r1, r3
   1ba94:	4618      	mov	r0, r3
   1ba96:	f7ed fb95 	bl	91c4 <__assert_func>
   1ba9a:	bf00      	nop
   1ba9c:	00026ff4 	.word	0x00026ff4
   1baa0:	00026f38 	.word	0x00026f38

0001baa4 <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
   1baa4:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
   1baa6:	2301      	movs	r3, #1
   1baa8:	2203      	movs	r2, #3
   1baaa:	210f      	movs	r1, #15
   1baac:	f7fd ffb2 	bl	19a14 <dw1000_read_reg>
   1bab0:	b2c0      	uxtb	r0, r0
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
   1bab2:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1bab6:	09c0      	lsrs	r0, r0, #7
   1bab8:	f080 0001 	eor.w	r0, r0, #1
}
   1babc:	f000 0001 	and.w	r0, r0, #1
   1bac0:	bd08      	pop	{r3, pc}
   1bac2:	0000      	movs	r0, r0
   1bac4:	0000      	movs	r0, r0
	...

0001bac8 <dw1000_interrupt_ev_cb>:
 * @return void
 *
 */
static void
dw1000_interrupt_ev_cb(struct dpl_event *ev)
{
   1bac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bacc:	b085      	sub	sp, #20
   1bace:	4606      	mov	r6, r0
    return ev->ev.ev_arg;
   1bad0:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1bad2:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1bad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bada:	4638      	mov	r0, r7
   1badc:	f7ee fb06 	bl	a0ec <os_sem_pend>
    uint16_t finfo;
    struct uwb_mac_interface * cbs = NULL;
    dw1000_dev_instance_t * inst = dpl_event_get_arg(ev);
    dpl_error_t err = dpl_sem_pend(&inst->uwb_dev.irq_sem,  DPL_TIMEOUT_NEVER);
    if (err != DPL_OK) {
   1bae0:	b188      	cbz	r0, 1bb06 <dw1000_interrupt_ev_cb+0x3e>
        inst->uwb_dev.status.sem_error = 1;
   1bae2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1bae6:	f043 0304 	orr.w	r3, r3, #4
   1baea:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    /* Check for possibly missed interrupts occuring whilst we were looking at this one
     * NOTE: Because the interrupt is edge based we will only register an event if the irq pin
     * goes low and then comes back up. If the pin is high now and no event is queued just after
     * swapping rx-buffers this means we didn't have time to finish reading the data
     * from the previous irq until a new one arrived -> queue another irq event for the task */
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
   1baee:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1baf2:	f7ed fac4 	bl	907e <hal_gpio_read>
   1baf6:	b118      	cbz	r0, 1bb00 <dw1000_interrupt_ev_cb+0x38>
    return ev->ev.ev_queued;
   1baf8:	7833      	ldrb	r3, [r6, #0]
   1bafa:	2b00      	cmp	r3, #0
   1bafc:	f000 84a9 	beq.w	1c452 <dw1000_interrupt_ev_cb+0x98a>
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    if(!inst->sys_status_bt_lock) {
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    }
#endif
}
   1bb00:	b005      	add	sp, #20
   1bb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   1bb06:	2304      	movs	r3, #4
   1bb08:	2200      	movs	r2, #0
   1bb0a:	210f      	movs	r1, #15
   1bb0c:	4620      	mov	r0, r4
   1bb0e:	f7fd ff81 	bl	19a14 <dw1000_read_reg>
   1bb12:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   1bb16:	4bd9      	ldr	r3, [pc, #868]	; (1be7c <dw1000_interrupt_ev_cb+0x3b4>)
   1bb18:	4003      	ands	r3, r0
   1bb1a:	2b00      	cmp	r3, #0
   1bb1c:	f000 8148 	beq.w	1bdb0 <dw1000_interrupt_ev_cb+0x2e8>
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   1bb20:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bb24:	4ad6      	ldr	r2, [pc, #856]	; (1be80 <dw1000_interrupt_ev_cb+0x3b8>)
   1bb26:	401a      	ands	r2, r3
   1bb28:	3a00      	subs	r2, #0
   1bb2a:	bf18      	it	ne
   1bb2c:	2201      	movne	r2, #1
   1bb2e:	f894 1508 	ldrb.w	r1, [r4, #1288]	; 0x508
   1bb32:	f362 1186 	bfi	r1, r2, #6, #1
   1bb36:	f884 1508 	strb.w	r1, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   1bb3a:	f894 1590 	ldrb.w	r1, [r4, #1424]	; 0x590
   1bb3e:	f001 0001 	and.w	r0, r1, #1
   1bb42:	4302      	orrs	r2, r0
   1bb44:	f894 0508 	ldrb.w	r0, [r4, #1288]	; 0x508
   1bb48:	f362 1086 	bfi	r0, r2, #6, #1
   1bb4c:	f884 0508 	strb.w	r0, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
   1bb50:	f3c3 7040 	ubfx	r0, r3, #29, #1
   1bb54:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1bb58:	f360 0200 	bfi	r2, r0, #0, #1
   1bb5c:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   1bb60:	f413 1f08 	tst.w	r3, #2228224	; 0x220000
   1bb64:	bf14      	ite	ne
   1bb66:	2001      	movne	r0, #1
   1bb68:	2000      	moveq	r0, #0
   1bb6a:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   1bb6e:	f360 12c7 	bfi	r2, r0, #7, #1
   1bb72:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
   1bb76:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1bb7a:	bf0c      	ite	eq
   1bb7c:	2001      	moveq	r0, #1
   1bb7e:	2000      	movne	r0, #0
   1bb80:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1bb84:	f360 0282 	bfi	r2, r0, #2, #1
   1bb88:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
   1bb8c:	f3c3 5000 	ubfx	r0, r3, #20, #1
   1bb90:	f894 250a 	ldrb.w	r2, [r4, #1290]	; 0x50a
   1bb94:	f360 0282 	bfi	r2, r0, #2, #1
   1bb98:	f884 250a 	strb.w	r2, [r4, #1290]	; 0x50a
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   1bb9c:	f3c3 7000 	ubfx	r0, r3, #28, #1
   1bba0:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   1bba4:	f360 1245 	bfi	r2, r0, #5, #1
   1bba8:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
   1bbac:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1bbb0:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1bbb4:	f360 1286 	bfi	r2, r0, #6, #1
   1bbb8:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
   1bbbc:	f3c1 0140 	ubfx	r1, r1, #1, #1
   1bbc0:	b2d2      	uxtb	r2, r2
   1bbc2:	f361 0241 	bfi	r2, r1, #1, #1
   1bbc6:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
   1bbca:	f8b4 2566 	ldrh.w	r2, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
   1bbce:	b922      	cbnz	r2, 1bbda <dw1000_interrupt_ev_cb+0x112>
   1bbd0:	f003 0390 	and.w	r3, r3, #144	; 0x90
   1bbd4:	2b10      	cmp	r3, #16
   1bbd6:	f040 80f4 	bne.w	1bdc2 <dw1000_interrupt_ev_cb+0x2fa>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
   1bbda:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bbde:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1bbe2:	f000 80ac 	beq.w	1bd3e <dw1000_interrupt_ev_cb+0x276>
        MAC_STATS_INC(DFR_cnt);
   1bbe6:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
   1bbea:	3301      	adds	r3, #1
   1bbec:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
   1bbf0:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1bbf4:	f013 0f04 	tst.w	r3, #4
   1bbf8:	f040 80f0 	bne.w	1bddc <dw1000_interrupt_ev_cb+0x314>
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
   1bbfc:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
   1bc00:	f403 7388 	and.w	r3, r3, #272	; 0x110
   1bc04:	2b10      	cmp	r3, #16
   1bc06:	f000 8128 	beq.w	1be5a <dw1000_interrupt_ev_cb+0x392>
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
   1bc0a:	2302      	movs	r3, #2
   1bc0c:	2200      	movs	r2, #0
   1bc0e:	2110      	movs	r1, #16
   1bc10:	4620      	mov	r0, r4
   1bc12:	f7fd feff 	bl	19a14 <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
   1bc16:	f3c0 0009 	ubfx	r0, r0, #0, #10
   1bc1a:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   1bc1e:	b110      	cbz	r0, 1bc26 <dw1000_interrupt_ev_cb+0x15e>
   1bc20:	3802      	subs	r0, #2
   1bc22:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
                       (inst->uwb_dev.frame_len < inst->uwb_dev.rxbuf_size) ?
   1bc26:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
   1bc2a:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
   1bc2e:	4293      	cmp	r3, r2
   1bc30:	bf28      	it	cs
   1bc32:	4613      	movcs	r3, r2
   1bc34:	2200      	movs	r2, #0
   1bc36:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   1bc3a:	4620      	mov	r0, r4
   1bc3c:	f7fe ff0a 	bl	1aa54 <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
   1bc40:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
   1bc44:	7851      	ldrb	r1, [r2, #1]
   1bc46:	7813      	ldrb	r3, [r2, #0]
   1bc48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1bc4c:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
   1bc50:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bc54:	f013 0f04 	tst.w	r3, #4
   1bc58:	f040 8127 	bne.w	1beaa <dw1000_interrupt_ev_cb+0x3e2>
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
   1bc5c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bc60:	f013 0f04 	tst.w	r3, #4
   1bc64:	d004      	beq.n	1bc70 <dw1000_interrupt_ev_cb+0x1a8>
            MAC_STATS_INC(LDE_err);
   1bc66:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   1bc6a:	3301      	adds	r3, #1
   1bc6c:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1bc70:	2305      	movs	r3, #5
   1bc72:	2200      	movs	r2, #0
   1bc74:	2115      	movs	r1, #21
   1bc76:	4620      	mov	r0, r4
   1bc78:	f7fd fecc 	bl	19a14 <dw1000_read_reg>
   1bc7c:	b2cb      	uxtb	r3, r1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   1bc7e:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
   1bc82:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
   1bc86:	f894 15b1 	ldrb.w	r1, [r4, #1457]	; 0x5b1
   1bc8a:	f011 0f08 	tst.w	r1, #8
   1bc8e:	f040 811e 	bne.w	1bece <dw1000_interrupt_ev_cb+0x406>
        if (inst->uwb_dev.status.autoack_triggered) {
   1bc92:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bc96:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bc9a:	d01c      	beq.n	1bcd6 <dw1000_interrupt_ev_cb+0x20e>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   1bc9c:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
   1bca0:	f013 0f20 	tst.w	r3, #32
   1bca4:	f040 8118 	bne.w	1bed8 <dw1000_interrupt_ev_cb+0x410>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   1bca8:	2301      	movs	r3, #1
   1bcaa:	9302      	str	r3, [sp, #8]
   1bcac:	2208      	movs	r2, #8
   1bcae:	2300      	movs	r3, #0
   1bcb0:	e9cd 2300 	strd	r2, r3, [sp]
   1bcb4:	2200      	movs	r2, #0
   1bcb6:	210f      	movs	r1, #15
   1bcb8:	4620      	mov	r0, r4
   1bcba:	f7fd ff1b 	bl	19af4 <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
   1bcbe:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bcc2:	f023 0308 	bic.w	r3, r3, #8
   1bcc6:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
   1bcca:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bcce:	f36f 1386 	bfc	r3, #6, #1
   1bcd2:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
   1bcd6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1bcda:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bcde:	f040 810a 	bne.w	1bef6 <dw1000_interrupt_ev_cb+0x42e>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
   1bce2:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1bce6:	f013 0f10 	tst.w	r3, #16
   1bcea:	f000 8191 	beq.w	1c010 <dw1000_interrupt_ev_cb+0x548>
            if (inst->uwb_dev.config.rxttcko_enable) {
   1bcee:	f013 0f80 	tst.w	r3, #128	; 0x80
   1bcf2:	f040 8106 	bne.w	1bf02 <dw1000_interrupt_ev_cb+0x43a>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   1bcf6:	4620      	mov	r0, r4
   1bcf8:	f7fe fe91 	bl	1aa1e <dw1000_checkoverrun>
   1bcfc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1bd00:	f360 0382 	bfi	r3, r0, #2, #1
   1bd04:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
   1bd08:	b2db      	uxtb	r3, r3
   1bd0a:	f013 0f04 	tst.w	r3, #4
   1bd0e:	f040 813f 	bne.w	1bf90 <dw1000_interrupt_ev_cb+0x4c8>
                if (inst->uwb_dev.config.rxauto_enable) {
   1bd12:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1bd16:	f013 0f01 	tst.w	r3, #1
   1bd1a:	f040 80f8 	bne.w	1bf0e <dw1000_interrupt_ev_cb+0x446>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
   1bd1e:	2301      	movs	r3, #1
   1bd20:	9302      	str	r3, [sp, #8]
   1bd22:	2201      	movs	r2, #1
   1bd24:	2300      	movs	r3, #0
   1bd26:	e9cd 2300 	strd	r2, r3, [sp]
   1bd2a:	2203      	movs	r2, #3
   1bd2c:	210d      	movs	r1, #13
   1bd2e:	4620      	mov	r0, r4
   1bd30:	f7fd fee0 	bl	19af4 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1bd34:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1bd38:	2d00      	cmp	r5, #0
   1bd3a:	f040 819c 	bne.w	1c076 <dw1000_interrupt_ev_cb+0x5ae>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
   1bd3e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bd42:	f013 0f10 	tst.w	r3, #16
   1bd46:	f040 819d 	bne.w	1c084 <dw1000_interrupt_ev_cb+0x5bc>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
   1bd4a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bd4e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1bd52:	f040 81b3 	bne.w	1c0bc <dw1000_interrupt_ev_cb+0x5f4>
    if(inst->uwb_dev.status.txbuf_error){
   1bd56:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1bd5a:	f013 0f20 	tst.w	r3, #32
   1bd5e:	f040 81f8 	bne.w	1c152 <dw1000_interrupt_ev_cb+0x68a>
    if(inst->sys_status & SYS_STATUS_LDEERR){
   1bd62:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bd66:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1bd6a:	f040 8215 	bne.w	1c198 <dw1000_interrupt_ev_cb+0x6d0>
    if(inst->uwb_dev.status.rx_timeout_error){
   1bd6e:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
   1bd72:	2b00      	cmp	r3, #0
   1bd74:	f2c0 8222 	blt.w	1c1bc <dw1000_interrupt_ev_cb+0x6f4>
    if(inst->uwb_dev.status.rx_error) {
   1bd78:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1bd7c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd80:	f040 828b 	bne.w	1c29a <dw1000_interrupt_ev_cb+0x7d2>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
   1bd84:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bd88:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1bd8c:	f040 8309 	bne.w	1c3a2 <dw1000_interrupt_ev_cb+0x8da>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
   1bd90:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bd94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   1bd98:	f040 830f 	bne.w	1c3ba <dw1000_interrupt_ev_cb+0x8f2>
    if(inst->sys_status & SYS_MASK_MCPLOCK){
   1bd9c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bda0:	f013 0f02 	tst.w	r3, #2
   1bda4:	f040 831b 	bne.w	1c3de <dw1000_interrupt_ev_cb+0x916>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1bda8:	4638      	mov	r0, r7
   1bdaa:	f7ee f96d 	bl	a088 <os_sem_release>
   1bdae:	e69e      	b.n	1baee <dw1000_interrupt_ev_cb+0x26>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
   1bdb0:	2301      	movs	r3, #1
   1bdb2:	2204      	movs	r2, #4
   1bdb4:	210f      	movs	r1, #15
   1bdb6:	4620      	mov	r0, r4
   1bdb8:	f7fd fe2c 	bl	19a14 <dw1000_read_reg>
   1bdbc:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
   1bdc0:	e6ae      	b.n	1bb20 <dw1000_interrupt_ev_cb+0x58>
   1bdc2:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1bdc6:	f7ee f95f 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   1bdca:	2800      	cmp	r0, #0
   1bdcc:	f43f af05 	beq.w	1bbda <dw1000_interrupt_ev_cb+0x112>
   1bdd0:	2300      	movs	r3, #0
   1bdd2:	461a      	mov	r2, r3
   1bdd4:	4619      	mov	r1, r3
   1bdd6:	4618      	mov	r0, r3
   1bdd8:	f7ed f9f4 	bl	91c4 <__assert_func>
            MAC_STATS_INC(ROV_err);
   1bddc:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1bde0:	3301      	adds	r3, #1
   1bde2:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   1bde6:	2304      	movs	r3, #4
   1bde8:	9302      	str	r3, [sp, #8]
   1bdea:	4a26      	ldr	r2, [pc, #152]	; (1be84 <dw1000_interrupt_ev_cb+0x3bc>)
   1bdec:	2300      	movs	r3, #0
   1bdee:	e9cd 2300 	strd	r2, r3, [sp]
   1bdf2:	2200      	movs	r2, #0
   1bdf4:	210f      	movs	r1, #15
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	f7fd fe7c 	bl	19af4 <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
   1bdfc:	4620      	mov	r0, r4
   1bdfe:	f000 feb3 	bl	1cb68 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
   1be02:	4620      	mov	r0, r4
   1be04:	f000 fe7b 	bl	1cafe <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   1be08:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1be0c:	f043 0310 	orr.w	r3, r3, #16
   1be10:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1be14:	2301      	movs	r3, #1
   1be16:	2203      	movs	r2, #3
   1be18:	210f      	movs	r1, #15
   1be1a:	4620      	mov	r0, r4
   1be1c:	f7fd fdfa 	bl	19a14 <dw1000_read_reg>
   1be20:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1be22:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1be26:	f010 0f80 	tst.w	r0, #128	; 0x80
   1be2a:	d10a      	bne.n	1be42 <dw1000_interrupt_ev_cb+0x37a>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1be2c:	2201      	movs	r2, #1
   1be2e:	9202      	str	r2, [sp, #8]
   1be30:	2001      	movs	r0, #1
   1be32:	2100      	movs	r1, #0
   1be34:	e9cd 0100 	strd	r0, r1, [sp]
   1be38:	210d      	movs	r1, #13
   1be3a:	4620      	mov	r0, r4
   1be3c:	f7fd fe5a 	bl	19af4 <dw1000_write_reg>
            goto early_exit;
   1be40:	e7b2      	b.n	1bda8 <dw1000_interrupt_ev_cb+0x2e0>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1be42:	2301      	movs	r3, #1
   1be44:	9302      	str	r3, [sp, #8]
   1be46:	2201      	movs	r2, #1
   1be48:	2300      	movs	r3, #0
   1be4a:	e9cd 2300 	strd	r2, r3, [sp]
   1be4e:	2203      	movs	r2, #3
   1be50:	210d      	movs	r1, #13
   1be52:	4620      	mov	r0, r4
   1be54:	f7fd fe4e 	bl	19af4 <dw1000_write_reg>
   1be58:	e7e8      	b.n	1be2c <dw1000_interrupt_ev_cb+0x364>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
   1be5a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1be5e:	f013 0f04 	tst.w	r3, #4
   1be62:	d104      	bne.n	1be6e <dw1000_interrupt_ev_cb+0x3a6>
   1be64:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1be68:	f013 0f40 	tst.w	r3, #64	; 0x40
   1be6c:	d00c      	beq.n	1be88 <dw1000_interrupt_ev_cb+0x3c0>
            inst->control.rxauto_disable = false;
   1be6e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1be72:	f36f 0382 	bfc	r3, #2, #1
   1be76:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1be7a:	e6c6      	b.n	1bc0a <dw1000_interrupt_ev_cb+0x142>
   1be7c:	3437b092 	.word	0x3437b092
   1be80:	24119000 	.word	0x24119000
   1be84:	0010e400 	.word	0x0010e400
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1be88:	2201      	movs	r2, #1
   1be8a:	9202      	str	r2, [sp, #8]
   1be8c:	2001      	movs	r0, #1
   1be8e:	2100      	movs	r1, #0
   1be90:	e9cd 0100 	strd	r0, r1, [sp]
   1be94:	210d      	movs	r1, #13
   1be96:	4620      	mov	r0, r4
   1be98:	f7fd fe2c 	bl	19af4 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   1be9c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1bea0:	f043 0308 	orr.w	r3, r3, #8
   1bea4:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1bea8:	e7e1      	b.n	1be6e <dw1000_interrupt_ev_cb+0x3a6>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
   1beaa:	2301      	movs	r3, #1
   1beac:	461a      	mov	r2, r3
   1beae:	210f      	movs	r1, #15
   1beb0:	4620      	mov	r0, r4
   1beb2:	f7fd fdaf 	bl	19a14 <dw1000_read_reg>
   1beb6:	f010 0f04 	tst.w	r0, #4
   1beba:	bf0c      	ite	eq
   1bebc:	2201      	moveq	r2, #1
   1bebe:	2200      	movne	r2, #0
   1bec0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bec4:	f362 0382 	bfi	r3, r2, #2, #1
   1bec8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   1becc:	e6c6      	b.n	1bc5c <dw1000_interrupt_ev_cb+0x194>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
   1bece:	4602      	mov	r2, r0
   1bed0:	4620      	mov	r0, r4
   1bed2:	f7ff f8b5 	bl	1b040 <update_rx_window_timeout>
   1bed6:	e6dc      	b.n	1bc92 <dw1000_interrupt_ev_cb+0x1ca>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1bed8:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bedc:	0a1b      	lsrs	r3, r3, #8
   1bede:	2201      	movs	r2, #1
   1bee0:	9202      	str	r2, [sp, #8]
   1bee2:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1bee6:	9300      	str	r3, [sp, #0]
   1bee8:	2300      	movs	r3, #0
   1beea:	9301      	str	r3, [sp, #4]
   1beec:	210f      	movs	r1, #15
   1beee:	4620      	mov	r0, r4
   1bef0:	f7fd fe00 	bl	19af4 <dw1000_write_reg>
   1bef4:	e6ef      	b.n	1bcd6 <dw1000_interrupt_ev_cb+0x20e>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
   1bef6:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   1befa:	4620      	mov	r0, r4
   1befc:	f7ff fd48 	bl	1b990 <dw1000_read_rxdiag>
   1bf00:	e6ef      	b.n	1bce2 <dw1000_interrupt_ev_cb+0x21a>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
   1bf02:	4620      	mov	r0, r4
   1bf04:	f7ff fd18 	bl	1b938 <dw1000_read_time_tracking_offset>
   1bf08:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
   1bf0c:	e6f3      	b.n	1bcf6 <dw1000_interrupt_ev_cb+0x22e>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
   1bf0e:	4620      	mov	r0, r4
   1bf10:	f7ff fdc8 	bl	1baa4 <dw1000_ic_and_host_ptrs_equal>
   1bf14:	b368      	cbz	r0, 1bf72 <dw1000_interrupt_ev_cb+0x4aa>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   1bf16:	2301      	movs	r3, #1
   1bf18:	461a      	mov	r2, r3
   1bf1a:	210e      	movs	r1, #14
   1bf1c:	4620      	mov	r0, r4
   1bf1e:	f7fd fd79 	bl	19a14 <dw1000_read_reg>
   1bf22:	4680      	mov	r8, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   1bf24:	2501      	movs	r5, #1
   1bf26:	9502      	str	r5, [sp, #8]
   1bf28:	2200      	movs	r2, #0
   1bf2a:	2300      	movs	r3, #0
   1bf2c:	e9cd 2300 	strd	r2, r3, [sp]
   1bf30:	462a      	mov	r2, r5
   1bf32:	210e      	movs	r1, #14
   1bf34:	4620      	mov	r0, r4
   1bf36:	f7fd fddd 	bl	19af4 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1bf3a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bf3e:	0a1b      	lsrs	r3, r3, #8
   1bf40:	9502      	str	r5, [sp, #8]
   1bf42:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1bf46:	f04f 0900 	mov.w	r9, #0
   1bf4a:	9300      	str	r3, [sp, #0]
   1bf4c:	f8cd 9004 	str.w	r9, [sp, #4]
   1bf50:	462a      	mov	r2, r5
   1bf52:	210f      	movs	r1, #15
   1bf54:	4620      	mov	r0, r4
   1bf56:	f7fd fdcd 	bl	19af4 <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
   1bf5a:	9502      	str	r5, [sp, #8]
   1bf5c:	f008 03ff 	and.w	r3, r8, #255	; 0xff
   1bf60:	9300      	str	r3, [sp, #0]
   1bf62:	f8cd 9004 	str.w	r9, [sp, #4]
   1bf66:	462a      	mov	r2, r5
   1bf68:	210e      	movs	r1, #14
   1bf6a:	4620      	mov	r0, r4
   1bf6c:	f7fd fdc2 	bl	19af4 <dw1000_write_reg>
   1bf70:	e6d5      	b.n	1bd1e <dw1000_interrupt_ev_cb+0x256>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1bf72:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bf76:	0a1b      	lsrs	r3, r3, #8
   1bf78:	2201      	movs	r2, #1
   1bf7a:	9202      	str	r2, [sp, #8]
   1bf7c:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1bf80:	9300      	str	r3, [sp, #0]
   1bf82:	2300      	movs	r3, #0
   1bf84:	9301      	str	r3, [sp, #4]
   1bf86:	210f      	movs	r1, #15
   1bf88:	4620      	mov	r0, r4
   1bf8a:	f7fd fdb3 	bl	19af4 <dw1000_write_reg>
   1bf8e:	e6c6      	b.n	1bd1e <dw1000_interrupt_ev_cb+0x256>
                MAC_STATS_INC(ROV_err);
   1bf90:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1bf94:	3301      	adds	r3, #1
   1bf96:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
   1bf9a:	2304      	movs	r3, #4
   1bf9c:	9302      	str	r3, [sp, #8]
   1bf9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1bfa2:	2300      	movs	r3, #0
   1bfa4:	e9cd 2300 	strd	r2, r3, [sp]
   1bfa8:	2200      	movs	r2, #0
   1bfaa:	210f      	movs	r1, #15
   1bfac:	4620      	mov	r0, r4
   1bfae:	f7fd fda1 	bl	19af4 <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
   1bfb2:	4620      	mov	r0, r4
   1bfb4:	f000 fdd8 	bl	1cb68 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
   1bfb8:	4620      	mov	r0, r4
   1bfba:	f000 fda0 	bl	1cafe <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   1bfbe:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1bfc2:	f043 0310 	orr.w	r3, r3, #16
   1bfc6:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1bfca:	2301      	movs	r3, #1
   1bfcc:	2203      	movs	r2, #3
   1bfce:	210f      	movs	r1, #15
   1bfd0:	4620      	mov	r0, r4
   1bfd2:	f7fd fd1f 	bl	19a14 <dw1000_read_reg>
   1bfd6:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1bfd8:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1bfdc:	f010 0f80 	tst.w	r0, #128	; 0x80
   1bfe0:	d10a      	bne.n	1bff8 <dw1000_interrupt_ev_cb+0x530>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1bfe2:	2201      	movs	r2, #1
   1bfe4:	9202      	str	r2, [sp, #8]
   1bfe6:	2001      	movs	r0, #1
   1bfe8:	2100      	movs	r1, #0
   1bfea:	e9cd 0100 	strd	r0, r1, [sp]
   1bfee:	210d      	movs	r1, #13
   1bff0:	4620      	mov	r0, r4
   1bff2:	f7fd fd7f 	bl	19af4 <dw1000_write_reg>
   1bff6:	e69d      	b.n	1bd34 <dw1000_interrupt_ev_cb+0x26c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1bff8:	2301      	movs	r3, #1
   1bffa:	9302      	str	r3, [sp, #8]
   1bffc:	2201      	movs	r2, #1
   1bffe:	2300      	movs	r3, #0
   1c000:	e9cd 2300 	strd	r2, r3, [sp]
   1c004:	2203      	movs	r2, #3
   1c006:	210d      	movs	r1, #13
   1c008:	4620      	mov	r0, r4
   1c00a:	f7fd fd73 	bl	19af4 <dw1000_write_reg>
   1c00e:	e7e8      	b.n	1bfe2 <dw1000_interrupt_ev_cb+0x51a>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   1c010:	4620      	mov	r0, r4
   1c012:	f7ff fc0f 	bl	1b834 <dw1000_read_carrier_integrator>
   1c016:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
                             inst->sys_status & (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXDFR |
   1c01a:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   1c01e:	2202      	movs	r2, #2
   1c020:	9202      	str	r2, [sp, #8]
   1c022:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
   1c026:	2200      	movs	r2, #0
   1c028:	9300      	str	r3, [sp, #0]
   1c02a:	9201      	str	r2, [sp, #4]
   1c02c:	210f      	movs	r1, #15
   1c02e:	4620      	mov	r0, r4
   1c030:	f7fd fd60 	bl	19af4 <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
   1c034:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c038:	f013 0f04 	tst.w	r3, #4
   1c03c:	d006      	beq.n	1c04c <dw1000_interrupt_ev_cb+0x584>
            inst->control.rxauto_disable = false;
   1c03e:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c042:	f36f 0382 	bfc	r3, #2, #1
   1c046:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1c04a:	e673      	b.n	1bd34 <dw1000_interrupt_ev_cb+0x26c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c04c:	2201      	movs	r2, #1
   1c04e:	9202      	str	r2, [sp, #8]
   1c050:	2001      	movs	r0, #1
   1c052:	2100      	movs	r1, #0
   1c054:	e9cd 0100 	strd	r0, r1, [sp]
   1c058:	210d      	movs	r1, #13
   1c05a:	4620      	mov	r0, r4
   1c05c:	f7fd fd4a 	bl	19af4 <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   1c060:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1c064:	f043 0308 	orr.w	r3, r3, #8
   1c068:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1c06c:	e7e7      	b.n	1c03e <dw1000_interrupt_ev_cb+0x576>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   1c06e:	4629      	mov	r1, r5
   1c070:	4620      	mov	r0, r4
   1c072:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c074:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c076:	2d00      	cmp	r5, #0
   1c078:	f43f ae61 	beq.w	1bd3e <dw1000_interrupt_ev_cb+0x276>
            if (cbs != NULL && cbs->rx_complete_cb)
   1c07c:	692b      	ldr	r3, [r5, #16]
   1c07e:	2b00      	cmp	r3, #0
   1c080:	d1f5      	bne.n	1c06e <dw1000_interrupt_ev_cb+0x5a6>
   1c082:	e7f7      	b.n	1c074 <dw1000_interrupt_ev_cb+0x5ac>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
   1c084:	2301      	movs	r3, #1
   1c086:	9302      	str	r3, [sp, #8]
   1c088:	2210      	movs	r2, #16
   1c08a:	2300      	movs	r3, #0
   1c08c:	e9cd 2300 	strd	r2, r3, [sp]
   1c090:	2200      	movs	r2, #0
   1c092:	210f      	movs	r1, #15
   1c094:	4620      	mov	r0, r4
   1c096:	f7fd fd2d 	bl	19af4 <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c09a:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c09e:	b90d      	cbnz	r5, 1c0a4 <dw1000_interrupt_ev_cb+0x5dc>
   1c0a0:	e653      	b.n	1bd4a <dw1000_interrupt_ev_cb+0x282>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c0a2:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c0a4:	2d00      	cmp	r5, #0
   1c0a6:	f43f ae50 	beq.w	1bd4a <dw1000_interrupt_ev_cb+0x282>
            if (cbs!=NULL && cbs->tx_begins_cb)
   1c0aa:	68ab      	ldr	r3, [r5, #8]
   1c0ac:	2b00      	cmp	r3, #0
   1c0ae:	d0f8      	beq.n	1c0a2 <dw1000_interrupt_ev_cb+0x5da>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
   1c0b0:	4629      	mov	r1, r5
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	4798      	blx	r3
   1c0b6:	2800      	cmp	r0, #0
   1c0b8:	d0f3      	beq.n	1c0a2 <dw1000_interrupt_ev_cb+0x5da>
   1c0ba:	e646      	b.n	1bd4a <dw1000_interrupt_ev_cb+0x282>
        MAC_STATS_INC(TFG_cnt);
   1c0bc:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
   1c0c0:	3301      	adds	r3, #1
   1c0c2:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
   1c0c6:	2301      	movs	r3, #1
   1c0c8:	9302      	str	r3, [sp, #8]
   1c0ca:	22f8      	movs	r2, #248	; 0xf8
   1c0cc:	2300      	movs	r3, #0
   1c0ce:	e9cd 2300 	strd	r2, r3, [sp]
   1c0d2:	2200      	movs	r2, #0
   1c0d4:	210f      	movs	r1, #15
   1c0d6:	4620      	mov	r0, r4
   1c0d8:	f7fd fd0c 	bl	19af4 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   1c0dc:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c0e0:	f013 0f08 	tst.w	r3, #8
   1c0e4:	d106      	bne.n	1c0f4 <dw1000_interrupt_ev_cb+0x62c>
   1c0e6:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   1c0ea:	b1cb      	cbz	r3, 1c120 <dw1000_interrupt_ev_cb+0x658>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c0ec:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c0f0:	bb1d      	cbnz	r5, 1c13a <dw1000_interrupt_ev_cb+0x672>
   1c0f2:	e630      	b.n	1bd56 <dw1000_interrupt_ev_cb+0x28e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c0f4:	2201      	movs	r2, #1
   1c0f6:	9202      	str	r2, [sp, #8]
   1c0f8:	2001      	movs	r0, #1
   1c0fa:	2100      	movs	r1, #0
   1c0fc:	e9cd 0100 	strd	r0, r1, [sp]
   1c100:	210d      	movs	r1, #13
   1c102:	4620      	mov	r0, r4
   1c104:	f7fd fcf6 	bl	19af4 <dw1000_write_reg>
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1c108:	2305      	movs	r3, #5
   1c10a:	2200      	movs	r2, #0
   1c10c:	2117      	movs	r1, #23
   1c10e:	4620      	mov	r0, r4
   1c110:	f7fd fc80 	bl	19a14 <dw1000_read_reg>
   1c114:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
   1c116:	b2cb      	uxtb	r3, r1
   1c118:	4620      	mov	r0, r4
   1c11a:	f7fe ff91 	bl	1b040 <update_rx_window_timeout>
   1c11e:	e7e2      	b.n	1c0e6 <dw1000_interrupt_ev_cb+0x61e>
   1c120:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1c124:	f7ed ffb0 	bl	a088 <os_sem_release>
            assert(err == DPL_OK);
   1c128:	2800      	cmp	r0, #0
   1c12a:	d0df      	beq.n	1c0ec <dw1000_interrupt_ev_cb+0x624>
   1c12c:	2300      	movs	r3, #0
   1c12e:	461a      	mov	r2, r3
   1c130:	4619      	mov	r1, r3
   1c132:	4618      	mov	r0, r3
   1c134:	f7ed f846 	bl	91c4 <__assert_func>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c138:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c13a:	2d00      	cmp	r5, #0
   1c13c:	f43f ae0b 	beq.w	1bd56 <dw1000_interrupt_ev_cb+0x28e>
            if (cbs!=NULL && cbs->tx_complete_cb)
   1c140:	68eb      	ldr	r3, [r5, #12]
   1c142:	2b00      	cmp	r3, #0
   1c144:	d0f8      	beq.n	1c138 <dw1000_interrupt_ev_cb+0x670>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
   1c146:	4629      	mov	r1, r5
   1c148:	4620      	mov	r0, r4
   1c14a:	4798      	blx	r3
   1c14c:	2800      	cmp	r0, #0
   1c14e:	d0f3      	beq.n	1c138 <dw1000_interrupt_ev_cb+0x670>
   1c150:	e601      	b.n	1bd56 <dw1000_interrupt_ev_cb+0x28e>
        MAC_STATS_INC(TXBUF_err);
   1c152:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
   1c156:	3301      	adds	r3, #1
   1c158:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
   1c15c:	2304      	movs	r3, #4
   1c15e:	9302      	str	r3, [sp, #8]
   1c160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c164:	2300      	movs	r3, #0
   1c166:	e9cd 2300 	strd	r2, r3, [sp]
   1c16a:	2200      	movs	r2, #0
   1c16c:	210f      	movs	r1, #15
   1c16e:	4620      	mov	r0, r4
   1c170:	f7fd fcc0 	bl	19af4 <dw1000_write_reg>
   1c174:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   1c178:	2b00      	cmp	r3, #0
   1c17a:	f47f adf2 	bne.w	1bd62 <dw1000_interrupt_ev_cb+0x29a>
   1c17e:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1c182:	f7ed ff81 	bl	a088 <os_sem_release>
            assert(err == DPL_OK);
   1c186:	2800      	cmp	r0, #0
   1c188:	f43f adeb 	beq.w	1bd62 <dw1000_interrupt_ev_cb+0x29a>
   1c18c:	2300      	movs	r3, #0
   1c18e:	461a      	mov	r2, r3
   1c190:	4619      	mov	r1, r3
   1c192:	4618      	mov	r0, r3
   1c194:	f7ed f816 	bl	91c4 <__assert_func>
        MAC_STATS_INC(LDE_err);
   1c198:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   1c19c:	3301      	adds	r3, #1
   1c19e:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
   1c1a2:	2304      	movs	r3, #4
   1c1a4:	9302      	str	r3, [sp, #8]
   1c1a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1c1aa:	2300      	movs	r3, #0
   1c1ac:	e9cd 2300 	strd	r2, r3, [sp]
   1c1b0:	2200      	movs	r2, #0
   1c1b2:	210f      	movs	r1, #15
   1c1b4:	4620      	mov	r0, r4
   1c1b6:	f7fd fc9d 	bl	19af4 <dw1000_write_reg>
   1c1ba:	e5d8      	b.n	1bd6e <dw1000_interrupt_ev_cb+0x2a6>
        MAC_STATS_INC(RTO_cnt);
   1c1bc:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
   1c1c0:	3301      	adds	r3, #1
   1c1c2:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
   1c1c6:	2304      	movs	r3, #4
   1c1c8:	9302      	str	r3, [sp, #8]
   1c1ca:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   1c1ce:	2300      	movs	r3, #0
   1c1d0:	e9cd 2300 	strd	r2, r3, [sp]
   1c1d4:	2200      	movs	r2, #0
   1c1d6:	210f      	movs	r1, #15
   1c1d8:	4620      	mov	r0, r4
   1c1da:	f7fd fc8b 	bl	19af4 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   1c1de:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c1e2:	f013 0f08 	tst.w	r3, #8
   1c1e6:	d127      	bne.n	1c238 <dw1000_interrupt_ev_cb+0x770>
        if (!inst->control.abs_timeout) {
   1c1e8:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c1ec:	f013 0f08 	tst.w	r3, #8
   1c1f0:	f47f adc2 	bne.w	1bd78 <dw1000_interrupt_ev_cb+0x2b0>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
   1c1f4:	2302      	movs	r3, #2
   1c1f6:	9302      	str	r3, [sp, #8]
   1c1f8:	2240      	movs	r2, #64	; 0x40
   1c1fa:	2300      	movs	r3, #0
   1c1fc:	e9cd 2300 	strd	r2, r3, [sp]
   1c200:	2200      	movs	r2, #0
   1c202:	210d      	movs	r1, #13
   1c204:	4620      	mov	r0, r4
   1c206:	f7fd fc75 	bl	19af4 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   1c20a:	4620      	mov	r0, r4
   1c20c:	f000 fc77 	bl	1cafe <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
   1c210:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c214:	f36f 0341 	bfc	r3, #1, #1
   1c218:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.rxauto_disable = false;
   1c21c:	b2db      	uxtb	r3, r3
   1c21e:	f36f 0382 	bfc	r3, #2, #1
   1c222:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.abs_timeout = false;
   1c226:	b2db      	uxtb	r3, r3
   1c228:	f36f 03c3 	bfc	r3, #3, #1
   1c22c:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c230:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c234:	bb3d      	cbnz	r5, 1c286 <dw1000_interrupt_ev_cb+0x7be>
   1c236:	e59f      	b.n	1bd78 <dw1000_interrupt_ev_cb+0x2b0>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1c238:	2305      	movs	r3, #5
   1c23a:	2200      	movs	r2, #0
   1c23c:	2106      	movs	r1, #6
   1c23e:	4620      	mov	r0, r4
   1c240:	f7fd fbe8 	bl	19a14 <dw1000_read_reg>
            uint32_t new_timeout = calc_rx_window_timeout(systime, inst->uwb_dev.abs_timeout);
   1c244:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   1c248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1c24c:	b2c9      	uxtb	r1, r1
   1c24e:	f7fe fbd2 	bl	1a9f6 <calc_rx_window_timeout>
   1c252:	4605      	mov	r5, r0
            if (new_timeout > 1) {
   1c254:	2801      	cmp	r0, #1
   1c256:	d806      	bhi.n	1c266 <dw1000_interrupt_ev_cb+0x79e>
                inst->control.abs_timeout = false;
   1c258:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c25c:	f36f 03c3 	bfc	r3, #3, #1
   1c260:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1c264:	e7c0      	b.n	1c1e8 <dw1000_interrupt_ev_cb+0x720>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c266:	2201      	movs	r2, #1
   1c268:	9202      	str	r2, [sp, #8]
   1c26a:	2001      	movs	r0, #1
   1c26c:	2100      	movs	r1, #0
   1c26e:	e9cd 0100 	strd	r0, r1, [sp]
   1c272:	210d      	movs	r1, #13
   1c274:	4620      	mov	r0, r4
   1c276:	f7fd fc3d 	bl	19af4 <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
   1c27a:	4629      	mov	r1, r5
   1c27c:	4620      	mov	r0, r4
   1c27e:	f7fe fed0 	bl	1b022 <dw1000_adj_rx_timeout>
   1c282:	e7b1      	b.n	1c1e8 <dw1000_interrupt_ev_cb+0x720>
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c284:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c286:	2d00      	cmp	r5, #0
   1c288:	f43f ad76 	beq.w	1bd78 <dw1000_interrupt_ev_cb+0x2b0>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
   1c28c:	69ab      	ldr	r3, [r5, #24]
   1c28e:	2b00      	cmp	r3, #0
   1c290:	d0f8      	beq.n	1c284 <dw1000_interrupt_ev_cb+0x7bc>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
   1c292:	4629      	mov	r1, r5
   1c294:	4620      	mov	r0, r4
   1c296:	4798      	blx	r3
   1c298:	e7f4      	b.n	1c284 <dw1000_interrupt_ev_cb+0x7bc>
        MAC_STATS_INC(RX_err);
   1c29a:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   1c29e:	3301      	adds	r3, #1
   1c2a0:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
   1c2a4:	2304      	movs	r3, #4
   1c2a6:	9302      	str	r3, [sp, #8]
   1c2a8:	a36f      	add	r3, pc, #444	; (adr r3, 1c468 <dw1000_interrupt_ev_cb+0x9a0>)
   1c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2ae:	e9cd 2300 	strd	r2, r3, [sp]
   1c2b2:	2200      	movs	r2, #0
   1c2b4:	210f      	movs	r1, #15
   1c2b6:	4620      	mov	r0, r4
   1c2b8:	f7fd fc1c 	bl	19af4 <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
   1c2bc:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1c2c0:	f013 0f10 	tst.w	r3, #16
   1c2c4:	d004      	beq.n	1c2d0 <dw1000_interrupt_ev_cb+0x808>
   1c2c6:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1c2ca:	f013 0f04 	tst.w	r3, #4
   1c2ce:	d121      	bne.n	1c314 <dw1000_interrupt_ev_cb+0x84c>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1c2d0:	2301      	movs	r3, #1
   1c2d2:	9302      	str	r3, [sp, #8]
   1c2d4:	2240      	movs	r2, #64	; 0x40
   1c2d6:	2300      	movs	r3, #0
   1c2d8:	e9cd 2300 	strd	r2, r3, [sp]
   1c2dc:	2200      	movs	r2, #0
   1c2de:	210d      	movs	r1, #13
   1c2e0:	4620      	mov	r0, r4
   1c2e2:	f7fd fc07 	bl	19af4 <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   1c2e6:	4620      	mov	r0, r4
   1c2e8:	f000 fc09 	bl	1cafe <dw1000_phy_rx_reset>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c2ec:	2201      	movs	r2, #1
   1c2ee:	9202      	str	r2, [sp, #8]
   1c2f0:	2001      	movs	r0, #1
   1c2f2:	2100      	movs	r1, #0
   1c2f4:	e9cd 0100 	strd	r0, r1, [sp]
   1c2f8:	210d      	movs	r1, #13
   1c2fa:	4620      	mov	r0, r4
   1c2fc:	f7fd fbfa 	bl	19af4 <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   1c300:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c304:	f013 0f08 	tst.w	r3, #8
   1c308:	d134      	bne.n	1c374 <dw1000_interrupt_ev_cb+0x8ac>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c30a:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c30e:	2d00      	cmp	r5, #0
   1c310:	d13d      	bne.n	1c38e <dw1000_interrupt_ev_cb+0x8c6>
   1c312:	e537      	b.n	1bd84 <dw1000_interrupt_ev_cb+0x2bc>
            MAC_STATS_INC(ROV_err);
   1c314:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1c318:	3301      	adds	r3, #1
   1c31a:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
   1c31e:	4620      	mov	r0, r4
   1c320:	f000 fbed 	bl	1cafe <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
   1c324:	2501      	movs	r5, #1
   1c326:	9502      	str	r5, [sp, #8]
   1c328:	2201      	movs	r2, #1
   1c32a:	2300      	movs	r3, #0
   1c32c:	e9cd 2300 	strd	r2, r3, [sp]
   1c330:	2203      	movs	r2, #3
   1c332:	210d      	movs	r1, #13
   1c334:	4620      	mov	r0, r4
   1c336:	f7fd fbdd 	bl	19af4 <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   1c33a:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1c33e:	f043 0310 	orr.w	r3, r3, #16
   1c342:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1c346:	462b      	mov	r3, r5
   1c348:	2203      	movs	r2, #3
   1c34a:	210f      	movs	r1, #15
   1c34c:	4620      	mov	r0, r4
   1c34e:	f7fd fb61 	bl	19a14 <dw1000_read_reg>
   1c352:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1c354:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1c358:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c35c:	d0c6      	beq.n	1c2ec <dw1000_interrupt_ev_cb+0x824>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1c35e:	9502      	str	r5, [sp, #8]
   1c360:	2201      	movs	r2, #1
   1c362:	2300      	movs	r3, #0
   1c364:	e9cd 2300 	strd	r2, r3, [sp]
   1c368:	2203      	movs	r2, #3
   1c36a:	210d      	movs	r1, #13
   1c36c:	4620      	mov	r0, r4
   1c36e:	f7fd fbc1 	bl	19af4 <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
   1c372:	e7bb      	b.n	1c2ec <dw1000_interrupt_ev_cb+0x824>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1c374:	2305      	movs	r3, #5
   1c376:	2200      	movs	r2, #0
   1c378:	2106      	movs	r1, #6
   1c37a:	4620      	mov	r0, r4
   1c37c:	f7fd fb4a 	bl	19a14 <dw1000_read_reg>
   1c380:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
   1c382:	b2cb      	uxtb	r3, r1
   1c384:	4620      	mov	r0, r4
   1c386:	f7fe fe5b 	bl	1b040 <update_rx_window_timeout>
   1c38a:	e7be      	b.n	1c30a <dw1000_interrupt_ev_cb+0x842>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c38c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c38e:	2d00      	cmp	r5, #0
   1c390:	f43f acf8 	beq.w	1bd84 <dw1000_interrupt_ev_cb+0x2bc>
            if (cbs!=NULL && cbs->rx_error_cb)
   1c394:	69eb      	ldr	r3, [r5, #28]
   1c396:	2b00      	cmp	r3, #0
   1c398:	d0f8      	beq.n	1c38c <dw1000_interrupt_ev_cb+0x8c4>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
   1c39a:	4629      	mov	r1, r5
   1c39c:	4620      	mov	r0, r4
   1c39e:	4798      	blx	r3
   1c3a0:	e7f4      	b.n	1c38c <dw1000_interrupt_ev_cb+0x8c4>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
   1c3a2:	2301      	movs	r3, #1
   1c3a4:	9302      	str	r3, [sp, #8]
   1c3a6:	2280      	movs	r2, #128	; 0x80
   1c3a8:	2300      	movs	r3, #0
   1c3aa:	e9cd 2300 	strd	r2, r3, [sp]
   1c3ae:	2202      	movs	r2, #2
   1c3b0:	210f      	movs	r1, #15
   1c3b2:	4620      	mov	r0, r4
   1c3b4:	f7fd fb9e 	bl	19af4 <dw1000_write_reg>
   1c3b8:	e4ea      	b.n	1bd90 <dw1000_interrupt_ev_cb+0x2c8>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
   1c3ba:	2304      	movs	r3, #4
   1c3bc:	9302      	str	r3, [sp, #8]
   1c3be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c3c2:	2300      	movs	r3, #0
   1c3c4:	e9cd 2300 	strd	r2, r3, [sp]
   1c3c8:	2200      	movs	r2, #0
   1c3ca:	210f      	movs	r1, #15
   1c3cc:	4620      	mov	r0, r4
   1c3ce:	f7fd fb91 	bl	19af4 <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
   1c3d2:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   1c3d6:	3301      	adds	r3, #1
   1c3d8:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
   1c3dc:	e4de      	b.n	1bd9c <dw1000_interrupt_ev_cb+0x2d4>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   1c3de:	2304      	movs	r3, #4
   1c3e0:	9302      	str	r3, [sp, #8]
   1c3e2:	2202      	movs	r2, #2
   1c3e4:	2300      	movs	r3, #0
   1c3e6:	e9cd 2300 	strd	r2, r3, [sp]
   1c3ea:	2200      	movs	r2, #0
   1c3ec:	210f      	movs	r1, #15
   1c3ee:	4620      	mov	r0, r4
   1c3f0:	f7fd fb80 	bl	19af4 <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1c3f4:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   1c3f8:	f04f 0802 	mov.w	r8, #2
   1c3fc:	f8cd 8008 	str.w	r8, [sp, #8]
   1c400:	2500      	movs	r5, #0
   1c402:	9300      	str	r3, [sp, #0]
   1c404:	9501      	str	r5, [sp, #4]
   1c406:	f641 0204 	movw	r2, #6148	; 0x1804
   1c40a:	212e      	movs	r1, #46	; 0x2e
   1c40c:	4620      	mov	r0, r4
   1c40e:	f7fd fb71 	bl	19af4 <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   1c412:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1c416:	f8cd 8008 	str.w	r8, [sp, #8]
   1c41a:	9300      	str	r3, [sp, #0]
   1c41c:	9501      	str	r5, [sp, #4]
   1c41e:	462a      	mov	r2, r5
   1c420:	2118      	movs	r1, #24
   1c422:	4620      	mov	r0, r4
   1c424:	f7fd fb66 	bl	19af4 <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
   1c428:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1c42c:	f365 0300 	bfi	r3, r5, #0, #1
   1c430:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c434:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c438:	b90d      	cbnz	r5, 1c43e <dw1000_interrupt_ev_cb+0x976>
   1c43a:	e4b5      	b.n	1bda8 <dw1000_interrupt_ev_cb+0x2e0>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c43c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c43e:	2d00      	cmp	r5, #0
   1c440:	f43f acb2 	beq.w	1bda8 <dw1000_interrupt_ev_cb+0x2e0>
            if (cbs!=NULL && cbs->sleep_cb)
   1c444:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1c446:	2b00      	cmp	r3, #0
   1c448:	d0f8      	beq.n	1c43c <dw1000_interrupt_ev_cb+0x974>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
   1c44a:	4629      	mov	r1, r5
   1c44c:	4620      	mov	r0, r4
   1c44e:	4798      	blx	r3
   1c450:	e7f4      	b.n	1c43c <dw1000_interrupt_ev_cb+0x974>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1c452:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c456:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1c45a:	f7ed f9f5 	bl	9848 <os_eventq_put>
}
   1c45e:	f7ff bb4f 	b.w	1bb00 <dw1000_interrupt_ev_cb+0x38>
   1c462:	bf00      	nop
   1c464:	f3af 8000 	nop.w
   1c468:	24119000 	.word	0x24119000
   1c46c:	00000000 	.word	0x00000000

0001c470 <dw1000_calc_fppl>:
    if (diag->pacc_cnt == 0 ||
   1c470:	8a4a      	ldrh	r2, [r1, #18]
   1c472:	b3e2      	cbz	r2, 1c4ee <dw1000_calc_fppl+0x7e>
{
   1c474:	b510      	push	{r4, lr}
   1c476:	ed2d 8b02 	vpush	{d8}
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   1c47a:	890b      	ldrh	r3, [r1, #8]
    if (diag->pacc_cnt == 0 ||
   1c47c:	b91b      	cbnz	r3, 1c486 <dw1000_calc_fppl+0x16>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   1c47e:	898c      	ldrh	r4, [r1, #12]
   1c480:	b90c      	cbnz	r4, 1c486 <dw1000_calc_fppl+0x16>
   1c482:	89cc      	ldrh	r4, [r1, #14]
   1c484:	b3b4      	cbz	r4, 1c4f4 <dw1000_calc_fppl+0x84>
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c486:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
   1c48a:	2801      	cmp	r0, #1
   1c48c:	d02c      	beq.n	1c4e8 <dw1000_calc_fppl+0x78>
   1c48e:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 1c4fc <dw1000_calc_fppl+0x8c>
    N = (float)(diag->pacc_cnt);
   1c492:	ee07 2a90 	vmov	s15, r2
   1c496:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1c49a:	fb03 f303 	mul.w	r3, r3, r3
   1c49e:	ee07 3a90 	vmov	s15, r3
   1c4a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
   1c4a6:	898b      	ldrh	r3, [r1, #12]
   1c4a8:	fb03 f303 	mul.w	r3, r3, r3
   1c4ac:	ee07 3a90 	vmov	s15, r3
   1c4b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1c4b4:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   1c4b8:	89cb      	ldrh	r3, [r1, #14]
   1c4ba:	fb03 f303 	mul.w	r3, r3, r3
   1c4be:	ee07 3a90 	vmov	s15, r3
   1c4c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1c4c6:	ee77 7a27 	vadd.f32	s15, s14, s15
    v /= N * N;
   1c4ca:	ee20 0a00 	vmul.f32	s0, s0, s0
    fppl = 10.0f * log10f(v) - A;
   1c4ce:	ee87 0a80 	vdiv.f32	s0, s15, s0
   1c4d2:	f007 ffeb 	bl	244ac <log10f>
   1c4d6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1c4da:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c4de:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   1c4e2:	ecbd 8b02 	vpop	{d8}
   1c4e6:	bd10      	pop	{r4, pc}
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c4e8:	ed9f 8a05 	vldr	s16, [pc, #20]	; 1c500 <dw1000_calc_fppl+0x90>
   1c4ec:	e7d1      	b.n	1c492 <dw1000_calc_fppl+0x22>
        return DPL_FLOAT32_NAN();
   1c4ee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1c504 <dw1000_calc_fppl+0x94>
}
   1c4f2:	4770      	bx	lr
        return DPL_FLOAT32_NAN();
   1c4f4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c504 <dw1000_calc_fppl+0x94>
   1c4f8:	e7f3      	b.n	1c4e2 <dw1000_calc_fppl+0x72>
   1c4fa:	bf00      	nop
   1c4fc:	42f37ae1 	.word	0x42f37ae1
   1c500:	42e38a3d 	.word	0x42e38a3d
   1c504:	7fc00000 	.word	0x7fc00000

0001c508 <dw1000_get_fppl>:
{
   1c508:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   1c50a:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   1c50e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c512:	d102      	bne.n	1c51a <dw1000_get_fppl+0x12>
        return DPL_FLOAT32_NAN();
   1c514:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c524 <dw1000_get_fppl+0x1c>
}
   1c518:	bd08      	pop	{r3, pc}
    return dw1000_calc_fppl(inst, &inst->rxdiag);
   1c51a:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   1c51e:	f7ff ffa7 	bl	1c470 <dw1000_calc_fppl>
   1c522:	e7f9      	b.n	1c518 <dw1000_get_fppl+0x10>
   1c524:	7fc00000 	.word	0x7fc00000

0001c528 <dw1000_calc_rssi>:
{
   1c528:	b508      	push	{r3, lr}
   1c52a:	ed2d 8b02 	vpush	{d8}
    uint32_t pacc_cnt = diag->pacc_cnt;
   1c52e:	8a4a      	ldrh	r2, [r1, #18]
    uint32_t cir_pwr = diag->cir_pwr;
   1c530:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   1c532:	b1eb      	cbz	r3, 1c570 <dw1000_calc_rssi+0x48>
   1c534:	b1fa      	cbz	r2, 1c576 <dw1000_calc_rssi+0x4e>
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c536:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
   1c53a:	2901      	cmp	r1, #1
   1c53c:	d015      	beq.n	1c56a <dw1000_calc_rssi+0x42>
   1c53e:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 1c57c <dw1000_calc_rssi+0x54>
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
   1c542:	045b      	lsls	r3, r3, #17
   1c544:	fb02 f202 	mul.w	r2, r2, r2
   1c548:	fbb3 f3f2 	udiv	r3, r3, r2
   1c54c:	ee00 3a10 	vmov	s0, r3
    rssi = 10.0f * log10f(A) - B;
   1c550:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   1c554:	f007 ffaa 	bl	244ac <log10f>
   1c558:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1c55c:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c560:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   1c564:	ecbd 8b02 	vpop	{d8}
   1c568:	bd08      	pop	{r3, pc}
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c56a:	ed9f 8a05 	vldr	s16, [pc, #20]	; 1c580 <dw1000_calc_rssi+0x58>
   1c56e:	e7e8      	b.n	1c542 <dw1000_calc_rssi+0x1a>
        return DPL_FLOAT32_NAN();
   1c570:	ed9f 0a04 	vldr	s0, [pc, #16]	; 1c584 <dw1000_calc_rssi+0x5c>
   1c574:	e7f6      	b.n	1c564 <dw1000_calc_rssi+0x3c>
   1c576:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c584 <dw1000_calc_rssi+0x5c>
   1c57a:	e7f3      	b.n	1c564 <dw1000_calc_rssi+0x3c>
   1c57c:	42f37ae1 	.word	0x42f37ae1
   1c580:	42e38a3d 	.word	0x42e38a3d
   1c584:	7fc00000 	.word	0x7fc00000

0001c588 <dw1000_get_rssi>:
{
   1c588:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   1c58a:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   1c58e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c592:	d102      	bne.n	1c59a <dw1000_get_rssi+0x12>
        return DPL_FLOAT32_NAN();
   1c594:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c5a4 <dw1000_get_rssi+0x1c>
}
   1c598:	bd08      	pop	{r3, pc}
    return dw1000_calc_rssi(inst, &inst->rxdiag);
   1c59a:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   1c59e:	f7ff ffc3 	bl	1c528 <dw1000_calc_rssi>
   1c5a2:	e7f9      	b.n	1c598 <dw1000_get_rssi+0x10>
   1c5a4:	7fc00000 	.word	0x7fc00000

0001c5a8 <dw1000_estimate_los>:
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   1c5a8:	ee30 0a60 	vsub.f32	s0, s0, s1
   1c5ac:	eeb0 0ac0 	vabs.f32	s0, s0
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   1c5b0:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1c5b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1c5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c5bc:	d413      	bmi.n	1c5e6 <dw1000_estimate_los+0x3e>
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   1c5be:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1c5c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1c5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c5ca:	dc0f      	bgt.n	1c5ec <dw1000_estimate_los+0x44>
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
   1c5cc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
   1c5d0:	ee30 0a60 	vsub.f32	s0, s0, s1
   1c5d4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   1c5d8:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c5dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1c5e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
    return los;
   1c5e4:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   1c5e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1c5ea:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   1c5ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1c5f4 <dw1000_estimate_los+0x4c>
}
   1c5f0:	4770      	bx	lr
   1c5f2:	bf00      	nop
   1c5f4:	00000000 	.word	0x00000000

0001c5f8 <dw1000_read_systime>:
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
   1c5f8:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1c5fa:	2305      	movs	r3, #5
   1c5fc:	2200      	movs	r2, #0
   1c5fe:	2106      	movs	r1, #6
   1c600:	f7fd fa08 	bl	19a14 <dw1000_read_reg>
}
   1c604:	b2c9      	uxtb	r1, r1
   1c606:	bd08      	pop	{r3, pc}

0001c608 <dw1000_read_systime_lo>:
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
   1c608:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
   1c60a:	2304      	movs	r3, #4
   1c60c:	2200      	movs	r2, #0
   1c60e:	2106      	movs	r1, #6
   1c610:	f7fd fa00 	bl	19a14 <dw1000_read_reg>
}
   1c614:	bd08      	pop	{r3, pc}

0001c616 <dw1000_read_rxtime>:
inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
   1c616:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1c618:	2305      	movs	r3, #5
   1c61a:	2200      	movs	r2, #0
   1c61c:	2115      	movs	r1, #21
   1c61e:	f7fd f9f9 	bl	19a14 <dw1000_read_reg>
}
   1c622:	b2c9      	uxtb	r1, r1
   1c624:	bd08      	pop	{r3, pc}

0001c626 <dw1000_read_rxtime_lo>:
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
   1c626:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
   1c628:	2304      	movs	r3, #4
   1c62a:	2200      	movs	r2, #0
   1c62c:	2115      	movs	r1, #21
   1c62e:	f7fd f9f1 	bl	19a14 <dw1000_read_reg>
}
   1c632:	bd08      	pop	{r3, pc}

0001c634 <dw1000_read_txtime>:
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
   1c634:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1c636:	2305      	movs	r3, #5
   1c638:	2200      	movs	r2, #0
   1c63a:	2117      	movs	r1, #23
   1c63c:	f7fd f9ea 	bl	19a14 <dw1000_read_reg>
    return time;
}
   1c640:	b2c9      	uxtb	r1, r1
   1c642:	bd08      	pop	{r3, pc}

0001c644 <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
   1c644:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
   1c646:	2304      	movs	r3, #4
   1c648:	2200      	movs	r2, #0
   1c64a:	2117      	movs	r1, #23
   1c64c:	f7fd f9e2 	bl	19a14 <dw1000_read_reg>
    return time;
}
   1c650:	bd08      	pop	{r3, pc}
	...

0001c654 <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
   1c654:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c656:	b085      	sub	sp, #20
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   1c658:	1e4b      	subs	r3, r1, #1
   1c65a:	b2db      	uxtb	r3, r3
   1c65c:	2b06      	cmp	r3, #6
   1c65e:	d879      	bhi.n	1c754 <dw1000_configcwmode+0x100>
   1c660:	4604      	mov	r4, r0
   1c662:	460d      	mov	r5, r1
   1c664:	2906      	cmp	r1, #6
   1c666:	d075      	beq.n	1c754 <dw1000_configcwmode+0x100>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1c668:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   1c66c:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   1c670:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1c674:	f001 fca2 	bl	1dfbc <hal_spi_disable>
    assert(rc == 0);
   1c678:	2800      	cmp	r0, #0
   1c67a:	d171      	bne.n	1c760 <dw1000_configcwmode+0x10c>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1c67c:	f204 5194 	addw	r1, r4, #1428	; 0x594
   1c680:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1c684:	f001 fc58 	bl	1df38 <hal_spi_config>
    assert(rc == 0);
   1c688:	2800      	cmp	r0, #0
   1c68a:	d16f      	bne.n	1c76c <dw1000_configcwmode+0x118>
    rc = hal_spi_enable(inst->spi_num);
   1c68c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1c690:	f001 fc6e 	bl	1df70 <hal_spi_enable>
    assert(rc == 0);
   1c694:	2800      	cmp	r0, #0
   1c696:	d16f      	bne.n	1c778 <dw1000_configcwmode+0x124>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
   1c698:	4620      	mov	r0, r4
   1c69a:	f000 f8ee 	bl	1c87a <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   1c69e:	4b39      	ldr	r3, [pc, #228]	; (1c784 <dw1000_configcwmode+0x130>)
   1c6a0:	5d5d      	ldrb	r5, [r3, r5]
   1c6a2:	4b39      	ldr	r3, [pc, #228]	; (1c788 <dw1000_configcwmode+0x134>)
   1c6a4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
   1c6a8:	2704      	movs	r7, #4
   1c6aa:	9702      	str	r7, [sp, #8]
   1c6ac:	2600      	movs	r6, #0
   1c6ae:	9300      	str	r3, [sp, #0]
   1c6b0:	9601      	str	r6, [sp, #4]
   1c6b2:	2207      	movs	r2, #7
   1c6b4:	212b      	movs	r1, #43	; 0x2b
   1c6b6:	4620      	mov	r0, r4
   1c6b8:	f7fd fa1c 	bl	19af4 <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
   1c6bc:	4b33      	ldr	r3, [pc, #204]	; (1c78c <dw1000_configcwmode+0x138>)
   1c6be:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
   1c6c2:	9702      	str	r7, [sp, #8]
   1c6c4:	9300      	str	r3, [sp, #0]
   1c6c6:	9601      	str	r6, [sp, #4]
   1c6c8:	220c      	movs	r2, #12
   1c6ca:	2128      	movs	r1, #40	; 0x28
   1c6cc:	4620      	mov	r0, r4
   1c6ce:	f7fd fa11 	bl	19af4 <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   1c6d2:	9702      	str	r7, [sp, #8]
   1c6d4:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   1c6d8:	2300      	movs	r3, #0
   1c6da:	e9cd 2300 	strd	r2, r3, [sp]
   1c6de:	4632      	mov	r2, r6
   1c6e0:	2128      	movs	r1, #40	; 0x28
   1c6e2:	4620      	mov	r0, r4
   1c6e4:	f7fd fa06 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   1c6e8:	9702      	str	r7, [sp, #8]
   1c6ea:	4a29      	ldr	r2, [pc, #164]	; (1c790 <dw1000_configcwmode+0x13c>)
   1c6ec:	2300      	movs	r3, #0
   1c6ee:	e9cd 2300 	strd	r2, r3, [sp]
   1c6f2:	4632      	mov	r2, r6
   1c6f4:	2128      	movs	r1, #40	; 0x28
   1c6f6:	4620      	mov	r0, r4
   1c6f8:	f7fd f9fc 	bl	19af4 <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
   1c6fc:	2501      	movs	r5, #1
   1c6fe:	9502      	str	r5, [sp, #8]
   1c700:	2222      	movs	r2, #34	; 0x22
   1c702:	2300      	movs	r3, #0
   1c704:	e9cd 2300 	strd	r2, r3, [sp]
   1c708:	4632      	mov	r2, r6
   1c70a:	2136      	movs	r1, #54	; 0x36
   1c70c:	4620      	mov	r0, r4
   1c70e:	f7fd f9f1 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
   1c712:	9502      	str	r5, [sp, #8]
   1c714:	2207      	movs	r2, #7
   1c716:	2300      	movs	r3, #0
   1c718:	e9cd 2300 	strd	r2, r3, [sp]
   1c71c:	462a      	mov	r2, r5
   1c71e:	2136      	movs	r1, #54	; 0x36
   1c720:	4620      	mov	r0, r4
   1c722:	f7fd f9e7 	bl	19af4 <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
   1c726:	2302      	movs	r3, #2
   1c728:	9302      	str	r3, [sp, #8]
   1c72a:	2200      	movs	r2, #0
   1c72c:	2300      	movs	r3, #0
   1c72e:	e9cd 2300 	strd	r2, r3, [sp]
   1c732:	2226      	movs	r2, #38	; 0x26
   1c734:	2136      	movs	r1, #54	; 0x36
   1c736:	4620      	mov	r0, r4
   1c738:	f7fd f9dc 	bl	19af4 <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
   1c73c:	9502      	str	r5, [sp, #8]
   1c73e:	2213      	movs	r2, #19
   1c740:	2300      	movs	r3, #0
   1c742:	e9cd 2300 	strd	r2, r3, [sp]
   1c746:	220c      	movs	r2, #12
   1c748:	212a      	movs	r1, #42	; 0x2a
   1c74a:	4620      	mov	r0, r4
   1c74c:	f7fd f9d2 	bl	19af4 <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
   1c750:	b005      	add	sp, #20
   1c752:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(0);
   1c754:	2300      	movs	r3, #0
   1c756:	461a      	mov	r2, r3
   1c758:	4619      	mov	r1, r3
   1c75a:	4618      	mov	r0, r3
   1c75c:	f7ec fd32 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1c760:	2300      	movs	r3, #0
   1c762:	461a      	mov	r2, r3
   1c764:	4619      	mov	r1, r3
   1c766:	4618      	mov	r0, r3
   1c768:	f7ec fd2c 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1c76c:	2300      	movs	r3, #0
   1c76e:	461a      	mov	r2, r3
   1c770:	4619      	mov	r1, r3
   1c772:	4618      	mov	r0, r3
   1c774:	f7ec fd26 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1c778:	2300      	movs	r3, #0
   1c77a:	461a      	mov	r2, r3
   1c77c:	4619      	mov	r1, r3
   1c77e:	4618      	mov	r0, r3
   1c780:	f7ec fd20 	bl	91c4 <__assert_func>
   1c784:	00026fa4 	.word	0x00026fa4
   1c788:	00026fd4 	.word	0x00026fd4
   1c78c:	00027074 	.word	0x00027074
   1c790:	005fff00 	.word	0x005fff00

0001c794 <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
   1c794:	b510      	push	{r4, lr}
   1c796:	b084      	sub	sp, #16
   1c798:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c79a:	2301      	movs	r3, #1
   1c79c:	2200      	movs	r2, #0
   1c79e:	2136      	movs	r1, #54	; 0x36
   1c7a0:	f7fd f938 	bl	19a14 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   1c7a4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
   1c7a8:	f043 0301 	orr.w	r3, r3, #1
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c7ac:	2201      	movs	r2, #1
   1c7ae:	9202      	str	r2, [sp, #8]
   1c7b0:	2200      	movs	r2, #0
   1c7b2:	9300      	str	r3, [sp, #0]
   1c7b4:	9201      	str	r2, [sp, #4]
   1c7b6:	2136      	movs	r1, #54	; 0x36
   1c7b8:	4620      	mov	r0, r4
   1c7ba:	f7fd f99b 	bl	19af4 <dw1000_write_reg>
}
   1c7be:	b004      	add	sp, #16
   1c7c0:	bd10      	pop	{r4, pc}

0001c7c2 <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   1c7c2:	b510      	push	{r4, lr}
   1c7c4:	b084      	sub	sp, #16
   1c7c6:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c7c8:	2301      	movs	r3, #1
   1c7ca:	2200      	movs	r2, #0
   1c7cc:	2136      	movs	r1, #54	; 0x36
   1c7ce:	f7fd f921 	bl	19a14 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   1c7d2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
   1c7d6:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c7da:	2201      	movs	r2, #1
   1c7dc:	9202      	str	r2, [sp, #8]
   1c7de:	2200      	movs	r2, #0
   1c7e0:	9300      	str	r3, [sp, #0]
   1c7e2:	9201      	str	r2, [sp, #4]
   1c7e4:	2136      	movs	r1, #54	; 0x36
   1c7e6:	4620      	mov	r0, r4
   1c7e8:	f7fd f984 	bl	19af4 <dw1000_write_reg>
}
   1c7ec:	b004      	add	sp, #16
   1c7ee:	bd10      	pop	{r4, pc}

0001c7f0 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   1c7f0:	b510      	push	{r4, lr}
   1c7f2:	b084      	sub	sp, #16
   1c7f4:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c7f6:	2301      	movs	r3, #1
   1c7f8:	2200      	movs	r2, #0
   1c7fa:	2136      	movs	r1, #54	; 0x36
   1c7fc:	f7fd f90a 	bl	19a14 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
   1c800:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
   1c804:	f043 0320 	orr.w	r3, r3, #32
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c808:	2201      	movs	r2, #1
   1c80a:	9202      	str	r2, [sp, #8]
   1c80c:	2200      	movs	r2, #0
   1c80e:	9300      	str	r3, [sp, #0]
   1c810:	9201      	str	r2, [sp, #4]
   1c812:	2136      	movs	r1, #54	; 0x36
   1c814:	4620      	mov	r0, r4
   1c816:	f7fd f96d 	bl	19af4 <dw1000_write_reg>
}
   1c81a:	b004      	add	sp, #16
   1c81c:	bd10      	pop	{r4, pc}

0001c81e <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   1c81e:	b530      	push	{r4, r5, lr}
   1c820:	b085      	sub	sp, #20
   1c822:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   1c824:	2501      	movs	r5, #1
   1c826:	9502      	str	r5, [sp, #8]
   1c828:	2201      	movs	r2, #1
   1c82a:	2300      	movs	r3, #0
   1c82c:	e9cd 2300 	strd	r2, r3, [sp]
   1c830:	2200      	movs	r2, #0
   1c832:	2136      	movs	r1, #54	; 0x36
   1c834:	f7fd f95e 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
   1c838:	9502      	str	r5, [sp, #8]
   1c83a:	2203      	movs	r2, #3
   1c83c:	2300      	movs	r3, #0
   1c83e:	e9cd 2300 	strd	r2, r3, [sp]
   1c842:	462a      	mov	r2, r5
   1c844:	2136      	movs	r1, #54	; 0x36
   1c846:	4620      	mov	r0, r4
   1c848:	f7fd f954 	bl	19af4 <dw1000_write_reg>
}
   1c84c:	b005      	add	sp, #20
   1c84e:	bd30      	pop	{r4, r5, pc}

0001c850 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
   1c850:	b510      	push	{r4, lr}
   1c852:	b084      	sub	sp, #16
   1c854:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c856:	2301      	movs	r3, #1
   1c858:	2200      	movs	r2, #0
   1c85a:	2136      	movs	r1, #54	; 0x36
   1c85c:	f7fd f8da 	bl	19a14 <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   1c860:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c864:	2301      	movs	r3, #1
   1c866:	9302      	str	r3, [sp, #8]
   1c868:	2200      	movs	r2, #0
   1c86a:	9000      	str	r0, [sp, #0]
   1c86c:	9201      	str	r2, [sp, #4]
   1c86e:	2136      	movs	r1, #54	; 0x36
   1c870:	4620      	mov	r0, r4
   1c872:	f7fd f93f 	bl	19af4 <dw1000_write_reg>
}
   1c876:	b004      	add	sp, #16
   1c878:	bd10      	pop	{r4, pc}

0001c87a <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
   1c87a:	b510      	push	{r4, lr}
   1c87c:	b084      	sub	sp, #16
   1c87e:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   1c880:	f7ff ff88 	bl	1c794 <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   1c884:	2302      	movs	r3, #2
   1c886:	9302      	str	r3, [sp, #8]
   1c888:	2200      	movs	r2, #0
   1c88a:	2300      	movs	r3, #0
   1c88c:	e9cd 2300 	strd	r2, r3, [sp]
   1c890:	2204      	movs	r2, #4
   1c892:	2136      	movs	r1, #54	; 0x36
   1c894:	4620      	mov	r0, r4
   1c896:	f7fd f92d 	bl	19af4 <dw1000_write_reg>
}
   1c89a:	b004      	add	sp, #16
   1c89c:	bd10      	pop	{r4, pc}

0001c89e <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
   1c89e:	b530      	push	{r4, r5, lr}
   1c8a0:	b085      	sub	sp, #20
   1c8a2:	4604      	mov	r4, r0
   1c8a4:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   1c8a6:	2301      	movs	r3, #1
   1c8a8:	9302      	str	r3, [sp, #8]
   1c8aa:	226d      	movs	r2, #109	; 0x6d
   1c8ac:	2300      	movs	r3, #0
   1c8ae:	e9cd 2300 	strd	r2, r3, [sp]
   1c8b2:	f640 0206 	movw	r2, #2054	; 0x806
   1c8b6:	212e      	movs	r1, #46	; 0x2e
   1c8b8:	f7fd f91c 	bl	19af4 <dw1000_write_reg>

    if(prfIndex)
   1c8bc:	b175      	cbz	r5, 1c8dc <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   1c8be:	2302      	movs	r3, #2
   1c8c0:	9302      	str	r3, [sp, #8]
   1c8c2:	f240 6207 	movw	r2, #1543	; 0x607
   1c8c6:	2300      	movs	r3, #0
   1c8c8:	e9cd 2300 	strd	r2, r3, [sp]
   1c8cc:	f641 0206 	movw	r2, #6150	; 0x1806
   1c8d0:	212e      	movs	r1, #46	; 0x2e
   1c8d2:	4620      	mov	r0, r4
   1c8d4:	f7fd f90e 	bl	19af4 <dw1000_write_reg>
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
}
   1c8d8:	b005      	add	sp, #20
   1c8da:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   1c8dc:	2302      	movs	r3, #2
   1c8de:	9302      	str	r3, [sp, #8]
   1c8e0:	f241 6207 	movw	r2, #5639	; 0x1607
   1c8e4:	2300      	movs	r3, #0
   1c8e6:	e9cd 2300 	strd	r2, r3, [sp]
   1c8ea:	f641 0206 	movw	r2, #6150	; 0x1806
   1c8ee:	212e      	movs	r1, #46	; 0x2e
   1c8f0:	4620      	mov	r0, r4
   1c8f2:	f7fd f8ff 	bl	19af4 <dw1000_write_reg>
}
   1c8f6:	e7ef      	b.n	1c8d8 <dw1000_phy_config_lde+0x3a>

0001c8f8 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
   1c8f8:	b570      	push	{r4, r5, r6, lr}
   1c8fa:	b084      	sub	sp, #16
   1c8fc:	4605      	mov	r5, r0
   1c8fe:	460c      	mov	r4, r1
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   1c900:	780b      	ldrb	r3, [r1, #0]
   1c902:	2201      	movs	r2, #1
   1c904:	9202      	str	r2, [sp, #8]
   1c906:	2600      	movs	r6, #0
   1c908:	9300      	str	r3, [sp, #0]
   1c90a:	9601      	str	r6, [sp, #4]
   1c90c:	220b      	movs	r2, #11
   1c90e:	212a      	movs	r1, #42	; 0x2a
   1c910:	f7fd f8f0 	bl	19af4 <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
   1c914:	6863      	ldr	r3, [r4, #4]
   1c916:	2204      	movs	r2, #4
   1c918:	9202      	str	r2, [sp, #8]
   1c91a:	9300      	str	r3, [sp, #0]
   1c91c:	9601      	str	r6, [sp, #4]
   1c91e:	4632      	mov	r2, r6
   1c920:	211e      	movs	r1, #30
   1c922:	4628      	mov	r0, r5
   1c924:	f7fd f8e6 	bl	19af4 <dw1000_write_reg>
}
   1c928:	b004      	add	sp, #16
   1c92a:	bd70      	pop	{r4, r5, r6, pc}

0001c92c <dw1000_phy_init>:
{
   1c92c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c92e:	b085      	sub	sp, #20
   1c930:	4604      	mov	r4, r0
    if (txrf_config == NULL)
   1c932:	2900      	cmp	r1, #0
   1c934:	f000 80af 	beq.w	1ca96 <dw1000_phy_init+0x16a>
   1c938:	460e      	mov	r6, r1
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
   1c93a:	680a      	ldr	r2, [r1, #0]
   1c93c:	684b      	ldr	r3, [r1, #4]
   1c93e:	f8c0 2524 	str.w	r2, [r0, #1316]	; 0x524
   1c942:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    dw1000_softreset(inst);
   1c946:	4620      	mov	r0, r4
   1c948:	f7fd f973 	bl	19c32 <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
   1c94c:	4620      	mov	r0, r4
   1c94e:	f7ff ff21 	bl	1c794 <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
   1c952:	2106      	movs	r1, #6
   1c954:	4620      	mov	r0, r4
   1c956:	f000 fdf3 	bl	1d540 <dw1000_gpio_config_leds>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
   1c95a:	2301      	movs	r3, #1
   1c95c:	2200      	movs	r2, #0
   1c95e:	2124      	movs	r1, #36	; 0x24
   1c960:	4620      	mov	r0, r4
   1c962:	f7fd f857 	bl	19a14 <dw1000_read_reg>
   1c966:	b2c0      	uxtb	r0, r0
    reg |= EC_CTRL_PLLLCK;
   1c968:	f040 0004 	orr.w	r0, r0, #4
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
   1c96c:	2301      	movs	r3, #1
   1c96e:	9302      	str	r3, [sp, #8]
   1c970:	2200      	movs	r2, #0
   1c972:	9000      	str	r0, [sp, #0]
   1c974:	9201      	str	r2, [sp, #4]
   1c976:	2124      	movs	r1, #36	; 0x24
   1c978:	4620      	mov	r0, r4
   1c97a:	f7fd f8bb 	bl	19af4 <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
   1c97e:	211e      	movs	r1, #30
   1c980:	4620      	mov	r0, r4
   1c982:	f000 fe46 	bl	1d612 <_dw1000_otp_read>
   1c986:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
   1c988:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1c98c:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
   1c990:	2104      	movs	r1, #4
   1c992:	4620      	mov	r0, r4
   1c994:	f000 fe3d 	bl	1d612 <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
   1c998:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c99c:	d17e      	bne.n	1ca9c <dw1000_phy_init+0x170>
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   1c99e:	2106      	movs	r1, #6
   1c9a0:	4620      	mov	r0, r4
   1c9a2:	f000 fe36 	bl	1d612 <_dw1000_otp_read>
   1c9a6:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   1c9aa:	2107      	movs	r1, #7
   1c9ac:	4620      	mov	r0, r4
   1c9ae:	f000 fe30 	bl	1d612 <_dw1000_otp_read>
   1c9b2:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   1c9b6:	2108      	movs	r1, #8
   1c9b8:	4620      	mov	r0, r4
   1c9ba:	f000 fe2a 	bl	1d612 <_dw1000_otp_read>
   1c9be:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   1c9c2:	2109      	movs	r1, #9
   1c9c4:	4620      	mov	r0, r4
   1c9c6:	f000 fe24 	bl	1d612 <_dw1000_otp_read>
   1c9ca:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
   1c9ce:	f005 051f 	and.w	r5, r5, #31
   1c9d2:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
   1c9d6:	b11d      	cbz	r5, 1c9e0 <dw1000_phy_init+0xb4>
   1c9d8:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
   1c9dc:	2aff      	cmp	r2, #255	; 0xff
   1c9de:	d06f      	beq.n	1cac0 <dw1000_phy_init+0x194>
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
   1c9e0:	f994 351e 	ldrsb.w	r3, [r4, #1310]	; 0x51e
   1c9e4:	f003 031f 	and.w	r3, r3, #31
   1c9e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   1c9ec:	2201      	movs	r2, #1
   1c9ee:	9202      	str	r2, [sp, #8]
   1c9f0:	9300      	str	r3, [sp, #0]
   1c9f2:	2300      	movs	r3, #0
   1c9f4:	9301      	str	r3, [sp, #4]
   1c9f6:	220e      	movs	r2, #14
   1c9f8:	212b      	movs	r1, #43	; 0x2b
   1c9fa:	4620      	mov	r0, r4
   1c9fc:	f7fd f87a 	bl	19af4 <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
   1ca00:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1ca04:	f013 0f04 	tst.w	r3, #4
   1ca08:	d15d      	bne.n	1cac6 <dw1000_phy_init+0x19a>
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
   1ca0a:	4620      	mov	r0, r4
   1ca0c:	f7ff ff20 	bl	1c850 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
   1ca10:	2301      	movs	r3, #1
   1ca12:	220a      	movs	r2, #10
   1ca14:	212c      	movs	r1, #44	; 0x2c
   1ca16:	4620      	mov	r0, r4
   1ca18:	f7fc fffc 	bl	19a14 <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
   1ca1c:	f060 0002 	orn	r0, r0, #2
   1ca20:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
   1ca22:	2301      	movs	r3, #1
   1ca24:	9302      	str	r3, [sp, #8]
   1ca26:	2500      	movs	r5, #0
   1ca28:	9000      	str	r0, [sp, #0]
   1ca2a:	9501      	str	r5, [sp, #4]
   1ca2c:	220a      	movs	r2, #10
   1ca2e:	212c      	movs	r1, #44	; 0x2c
   1ca30:	4620      	mov	r0, r4
   1ca32:	f7fd f85f 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
   1ca36:	2702      	movs	r7, #2
   1ca38:	9702      	str	r7, [sp, #8]
   1ca3a:	2201      	movs	r2, #1
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	e9cd 2300 	strd	r2, r3, [sp]
   1ca42:	462a      	mov	r2, r5
   1ca44:	212c      	movs	r1, #44	; 0x2c
   1ca46:	4620      	mov	r0, r4
   1ca48:	f7fd f854 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1ca4c:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   1ca50:	9702      	str	r7, [sp, #8]
   1ca52:	9300      	str	r3, [sp, #0]
   1ca54:	9501      	str	r5, [sp, #4]
   1ca56:	f641 0204 	movw	r2, #6148	; 0x1804
   1ca5a:	212e      	movs	r1, #46	; 0x2e
   1ca5c:	4620      	mov	r0, r4
   1ca5e:	f7fd f849 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   1ca62:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1ca66:	9702      	str	r7, [sp, #8]
   1ca68:	9300      	str	r3, [sp, #0]
   1ca6a:	9501      	str	r5, [sp, #4]
   1ca6c:	462a      	mov	r2, r5
   1ca6e:	2118      	movs	r1, #24
   1ca70:	4620      	mov	r0, r4
   1ca72:	f7fd f83f 	bl	19af4 <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
   1ca76:	4631      	mov	r1, r6
   1ca78:	4620      	mov	r0, r4
   1ca7a:	f7ff ff3d 	bl	1c8f8 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   1ca7e:	2304      	movs	r3, #4
   1ca80:	462a      	mov	r2, r5
   1ca82:	4619      	mov	r1, r3
   1ca84:	4620      	mov	r0, r4
   1ca86:	f7fc ffc5 	bl	19a14 <dw1000_read_reg>
   1ca8a:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
   1ca8e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ca92:	b005      	add	sp, #20
   1ca94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txrf_config = &inst->uwb_dev.config.txrf;
   1ca96:	f200 5624 	addw	r6, r0, #1316	; 0x524
   1ca9a:	e754      	b.n	1c946 <dw1000_phy_init+0x1a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
   1ca9c:	2301      	movs	r3, #1
   1ca9e:	9302      	str	r3, [sp, #8]
   1caa0:	2202      	movs	r2, #2
   1caa2:	2300      	movs	r3, #0
   1caa4:	e9cd 2300 	strd	r2, r3, [sp]
   1caa8:	2212      	movs	r2, #18
   1caaa:	212d      	movs	r1, #45	; 0x2d
   1caac:	4620      	mov	r0, r4
   1caae:	f7fd f821 	bl	19af4 <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
   1cab2:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1cab6:	f043 0320 	orr.w	r3, r3, #32
   1caba:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   1cabe:	e76e      	b.n	1c99e <dw1000_phy_init+0x72>
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
   1cac0:	f884 551e 	strb.w	r5, [r4, #1310]	; 0x51e
   1cac4:	e78c      	b.n	1c9e0 <dw1000_phy_init+0xb4>
    dw1000_phy_sysclk_LDE(inst);
   1cac6:	4620      	mov	r0, r4
   1cac8:	f7ff fea9 	bl	1c81e <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
   1cacc:	2302      	movs	r3, #2
   1cace:	9302      	str	r3, [sp, #8]
   1cad0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1cad4:	2300      	movs	r3, #0
   1cad6:	e9cd 2300 	strd	r2, r3, [sp]
   1cada:	2206      	movs	r2, #6
   1cadc:	212d      	movs	r1, #45	; 0x2d
   1cade:	4620      	mov	r0, r4
   1cae0:	f7fd f808 	bl	19af4 <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
   1cae4:	2078      	movs	r0, #120	; 0x78
   1cae6:	f7f5 ff10 	bl	1290a <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
   1caea:	4620      	mov	r0, r4
   1caec:	f7ff feb0 	bl	1c850 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
   1caf0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1caf4:	f043 0310 	orr.w	r3, r3, #16
   1caf8:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
}
   1cafc:	e785      	b.n	1ca0a <dw1000_phy_init+0xde>

0001cafe <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
   1cafe:	b570      	push	{r4, r5, r6, lr}
   1cb00:	b084      	sub	sp, #16
   1cb02:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1cb04:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1cb08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cb0c:	4628      	mov	r0, r5
   1cb0e:	f7ee f90d 	bl	ad2c <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1cb12:	b138      	cbz	r0, 1cb24 <dw1000_phy_rx_reset+0x26>
        inst->uwb_dev.status.mtx_error = 1;
   1cb14:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1cb18:	f043 0308 	orr.w	r3, r3, #8
   1cb1c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
   1cb20:	b004      	add	sp, #16
   1cb22:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
   1cb24:	2601      	movs	r6, #1
   1cb26:	9602      	str	r6, [sp, #8]
   1cb28:	22e0      	movs	r2, #224	; 0xe0
   1cb2a:	2300      	movs	r3, #0
   1cb2c:	e9cd 2300 	strd	r2, r3, [sp]
   1cb30:	2203      	movs	r2, #3
   1cb32:	2136      	movs	r1, #54	; 0x36
   1cb34:	4620      	mov	r0, r4
   1cb36:	f7fc ffdd 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
   1cb3a:	9602      	str	r6, [sp, #8]
   1cb3c:	22f0      	movs	r2, #240	; 0xf0
   1cb3e:	2300      	movs	r3, #0
   1cb40:	e9cd 2300 	strd	r2, r3, [sp]
   1cb44:	2203      	movs	r2, #3
   1cb46:	2136      	movs	r1, #54	; 0x36
   1cb48:	4620      	mov	r0, r4
   1cb4a:	f7fc ffd3 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1cb4e:	4628      	mov	r0, r5
   1cb50:	f7ee f890 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1cb54:	2800      	cmp	r0, #0
   1cb56:	d0e3      	beq.n	1cb20 <dw1000_phy_rx_reset+0x22>
   1cb58:	2300      	movs	r3, #0
   1cb5a:	461a      	mov	r2, r3
   1cb5c:	4619      	mov	r1, r3
   1cb5e:	4618      	mov	r0, r3
   1cb60:	f7ec fb30 	bl	91c4 <__assert_func>
   1cb64:	0000      	movs	r0, r0
	...

0001cb68 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
   1cb68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb6a:	b085      	sub	sp, #20
   1cb6c:	4605      	mov	r5, r0
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   1cb6e:	2304      	movs	r3, #4
   1cb70:	2200      	movs	r2, #0
   1cb72:	210e      	movs	r1, #14
   1cb74:	f7fc ff4e 	bl	19a14 <dw1000_read_reg>
   1cb78:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1cb7a:	f505 66ad 	add.w	r6, r5, #1384	; 0x568
   1cb7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cb82:	4630      	mov	r0, r6
   1cb84:	f7ee f8d2 	bl	ad2c <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1cb88:	b138      	cbz	r0, 1cb9a <dw1000_phy_forcetrxoff+0x32>
        inst->uwb_dev.status.mtx_error = 1;
   1cb8a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1cb8e:	f043 0308 	orr.w	r3, r3, #8
   1cb92:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
   1cb96:	b005      	add	sp, #20
   1cb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   1cb9a:	2704      	movs	r7, #4
   1cb9c:	9702      	str	r7, [sp, #8]
   1cb9e:	2200      	movs	r2, #0
   1cba0:	2300      	movs	r3, #0
   1cba2:	e9cd 2300 	strd	r2, r3, [sp]
   1cba6:	210e      	movs	r1, #14
   1cba8:	4628      	mov	r0, r5
   1cbaa:	f7fc ffa3 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
   1cbae:	2301      	movs	r3, #1
   1cbb0:	9302      	str	r3, [sp, #8]
   1cbb2:	2240      	movs	r2, #64	; 0x40
   1cbb4:	2300      	movs	r3, #0
   1cbb6:	e9cd 2300 	strd	r2, r3, [sp]
   1cbba:	2200      	movs	r2, #0
   1cbbc:	210d      	movs	r1, #13
   1cbbe:	4628      	mov	r0, r5
   1cbc0:	f7fc ff98 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
   1cbc4:	9702      	str	r7, [sp, #8]
   1cbc6:	a32e      	add	r3, pc, #184	; (adr r3, 1cc80 <dw1000_phy_forcetrxoff+0x118>)
   1cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cbcc:	e9cd 2300 	strd	r2, r3, [sp]
   1cbd0:	2200      	movs	r2, #0
   1cbd2:	210f      	movs	r1, #15
   1cbd4:	4628      	mov	r0, r5
   1cbd6:	f7fc ff8d 	bl	19af4 <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
   1cbda:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
   1cbde:	f013 0f10 	tst.w	r3, #16
   1cbe2:	d130      	bne.n	1cc46 <dw1000_phy_forcetrxoff+0xde>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   1cbe4:	2304      	movs	r3, #4
   1cbe6:	9302      	str	r3, [sp, #8]
   1cbe8:	2200      	movs	r2, #0
   1cbea:	9400      	str	r4, [sp, #0]
   1cbec:	9201      	str	r2, [sp, #4]
   1cbee:	210e      	movs	r1, #14
   1cbf0:	4628      	mov	r0, r5
   1cbf2:	f7fc ff7f 	bl	19af4 <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1cbf6:	f8d5 4530 	ldr.w	r4, [r5, #1328]	; 0x530
   1cbfa:	bb64      	cbnz	r4, 1cc56 <dw1000_phy_forcetrxoff+0xee>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1cbfc:	4630      	mov	r0, r6
   1cbfe:	f7ee f839 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1cc02:	bb70      	cbnz	r0, 1cc62 <dw1000_phy_forcetrxoff+0xfa>
    inst->control.wait4resp_enabled = 0;
   1cc04:	f895 35b0 	ldrb.w	r3, [r5, #1456]	; 0x5b0
   1cc08:	f36f 0300 	bfc	r3, #0, #1
   1cc0c:	f885 35b0 	strb.w	r3, [r5, #1456]	; 0x5b0
    inst->control.rxauto_disable = false;
   1cc10:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
   1cc14:	f36f 0382 	bfc	r3, #2, #1
   1cc18:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->control.abs_timeout = false;
   1cc1c:	b2db      	uxtb	r3, r3
   1cc1e:	f36f 03c3 	bfc	r3, #3, #1
   1cc22:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
   1cc26:	f8b5 3566 	ldrh.w	r3, [r5, #1382]	; 0x566
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
   1cc2a:	2b00      	cmp	r3, #0
   1cc2c:	d1b3      	bne.n	1cb96 <dw1000_phy_forcetrxoff+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1cc2e:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
   1cc32:	f7ed fa29 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   1cc36:	b9d0      	cbnz	r0, 1cc6e <dw1000_phy_forcetrxoff+0x106>
        inst->uwb_dev.status.sem_force_released = 1;
   1cc38:	f895 350a 	ldrb.w	r3, [r5, #1290]	; 0x50a
   1cc3c:	f043 0302 	orr.w	r3, r3, #2
   1cc40:	f885 350a 	strb.w	r3, [r5, #1290]	; 0x50a
   1cc44:	e7a7      	b.n	1cb96 <dw1000_phy_forcetrxoff+0x2e>
        dw1000_sync_rxbufptrs(inst);
   1cc46:	4628      	mov	r0, r5
   1cc48:	f7fe fa93 	bl	1b172 <dw1000_sync_rxbufptrs>
   1cc4c:	e7ca      	b.n	1cbe4 <dw1000_phy_forcetrxoff+0x7c>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
   1cc4e:	4621      	mov	r1, r4
   1cc50:	4628      	mov	r0, r5
   1cc52:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1cc54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1cc56:	2c00      	cmp	r4, #0
   1cc58:	d0d0      	beq.n	1cbfc <dw1000_phy_forcetrxoff+0x94>
            if (cbs!=NULL && cbs->reset_cb)
   1cc5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cc5c:	2b00      	cmp	r3, #0
   1cc5e:	d1f6      	bne.n	1cc4e <dw1000_phy_forcetrxoff+0xe6>
   1cc60:	e7f8      	b.n	1cc54 <dw1000_phy_forcetrxoff+0xec>
    assert(err == DPL_OK);
   1cc62:	2300      	movs	r3, #0
   1cc64:	461a      	mov	r2, r3
   1cc66:	4619      	mov	r1, r3
   1cc68:	4618      	mov	r0, r3
   1cc6a:	f7ec faab 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
   1cc6e:	2300      	movs	r3, #0
   1cc70:	461a      	mov	r2, r3
   1cc72:	4619      	mov	r1, r3
   1cc74:	4618      	mov	r0, r3
   1cc76:	f7ec faa5 	bl	91c4 <__assert_func>
   1cc7a:	bf00      	nop
   1cc7c:	f3af 8000 	nop.w
   1cc80:	3433fbf8 	.word	0x3433fbf8
   1cc84:	00000000 	.word	0x00000000

0001cc88 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
   1cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc8a:	b085      	sub	sp, #20
   1cc8c:	4604      	mov	r4, r0
   1cc8e:	460d      	mov	r5, r1
   1cc90:	4616      	mov	r6, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1cc92:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1cc96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cc9a:	4638      	mov	r0, r7
   1cc9c:	f7ee f846 	bl	ad2c <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1cca0:	b138      	cbz	r0, 1ccb2 <dw1000_phy_interrupt_mask+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   1cca2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1cca6:	f043 0308 	orr.w	r3, r3, #8
   1ccaa:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
   1ccae:	b005      	add	sp, #20
   1ccb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
   1ccb2:	2304      	movs	r3, #4
   1ccb4:	2200      	movs	r2, #0
   1ccb6:	210e      	movs	r1, #14
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f7fc feab 	bl	19a14 <dw1000_read_reg>
    if(enable)
   1ccbe:	b1a6      	cbz	r6, 1ccea <dw1000_phy_interrupt_mask+0x62>
        mask |= bitmask ;
   1ccc0:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
   1ccc2:	2304      	movs	r3, #4
   1ccc4:	9302      	str	r3, [sp, #8]
   1ccc6:	2200      	movs	r2, #0
   1ccc8:	9000      	str	r0, [sp, #0]
   1ccca:	9201      	str	r2, [sp, #4]
   1cccc:	210e      	movs	r1, #14
   1ccce:	4620      	mov	r0, r4
   1ccd0:	f7fc ff10 	bl	19af4 <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1ccd4:	4638      	mov	r0, r7
   1ccd6:	f7ed ffcd 	bl	ac74 <os_mutex_release>
    assert(err == DPL_OK);
   1ccda:	2800      	cmp	r0, #0
   1ccdc:	d0e7      	beq.n	1ccae <dw1000_phy_interrupt_mask+0x26>
   1ccde:	2300      	movs	r3, #0
   1cce0:	461a      	mov	r2, r3
   1cce2:	4619      	mov	r1, r3
   1cce4:	4618      	mov	r0, r3
   1cce6:	f7ec fa6d 	bl	91c4 <__assert_func>
        mask &= ~bitmask ; // Clear the bit
   1ccea:	ea20 0005 	bic.w	r0, r0, r5
   1ccee:	e7e8      	b.n	1ccc2 <dw1000_phy_interrupt_mask+0x3a>

0001ccf0 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
   1ccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccf2:	b085      	sub	sp, #20
   1ccf4:	4604      	mov	r4, r0
   1ccf6:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
   1ccf8:	ea52 0305 	orrs.w	r3, r2, r5
   1ccfc:	d114      	bne.n	1cd28 <dw1000_phy_repeated_frames+0x38>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
   1ccfe:	2304      	movs	r3, #4
   1cd00:	9302      	str	r3, [sp, #8]
   1cd02:	2600      	movs	r6, #0
   1cd04:	2700      	movs	r7, #0
   1cd06:	e9cd 6700 	strd	r6, r7, [sp]
   1cd0a:	2200      	movs	r2, #0
   1cd0c:	2128      	movs	r1, #40	; 0x28
   1cd0e:	f7fc fef1 	bl	19af4 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
   1cd12:	2301      	movs	r3, #1
   1cd14:	9302      	str	r3, [sp, #8]
   1cd16:	e9cd 6700 	strd	r6, r7, [sp]
   1cd1a:	2224      	movs	r2, #36	; 0x24
   1cd1c:	212f      	movs	r1, #47	; 0x2f
   1cd1e:	4620      	mov	r0, r4
   1cd20:	f7fc fee8 	bl	19af4 <dw1000_write_reg>
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    }
}
   1cd24:	b005      	add	sp, #20
   1cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cd28:	4616      	mov	r6, r2
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1cd2a:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   1cd2e:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
   1cd32:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1cd36:	f001 f941 	bl	1dfbc <hal_spi_disable>
        assert(rc == 0);
   1cd3a:	2800      	cmp	r0, #0
   1cd3c:	d16e      	bne.n	1ce1c <dw1000_phy_repeated_frames+0x12c>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1cd3e:	f204 5194 	addw	r1, r4, #1428	; 0x594
   1cd42:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1cd46:	f001 f8f7 	bl	1df38 <hal_spi_config>
        assert(rc == 0);
   1cd4a:	2800      	cmp	r0, #0
   1cd4c:	d16c      	bne.n	1ce28 <dw1000_phy_repeated_frames+0x138>
        rc = hal_spi_enable(inst->spi_num);
   1cd4e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1cd52:	f001 f90d 	bl	1df70 <hal_spi_enable>
        assert(rc == 0);
   1cd56:	2800      	cmp	r0, #0
   1cd58:	d16c      	bne.n	1ce34 <dw1000_phy_repeated_frames+0x144>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
   1cd5a:	2304      	movs	r3, #4
   1cd5c:	2200      	movs	r2, #0
   1cd5e:	2136      	movs	r1, #54	; 0x36
   1cd60:	4620      	mov	r0, r4
   1cd62:	f7fc fe57 	bl	19a14 <dw1000_read_reg>
   1cd66:	4601      	mov	r1, r0
   1cd68:	4835      	ldr	r0, [pc, #212]	; (1ce40 <dw1000_phy_repeated_frames+0x150>)
   1cd6a:	f7f4 f8af 	bl	10ecc <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
   1cd6e:	2304      	movs	r3, #4
   1cd70:	461a      	mov	r2, r3
   1cd72:	2136      	movs	r1, #54	; 0x36
   1cd74:	4620      	mov	r0, r4
   1cd76:	f7fc fe4d 	bl	19a14 <dw1000_read_reg>
   1cd7a:	4601      	mov	r1, r0
   1cd7c:	4831      	ldr	r0, [pc, #196]	; (1ce44 <dw1000_phy_repeated_frames+0x154>)
   1cd7e:	f7f4 f8a5 	bl	10ecc <printf>
        dw1000_phy_disable_sequencing(inst);
   1cd82:	4620      	mov	r0, r4
   1cd84:	f7ff fd79 	bl	1c87a <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   1cd88:	2704      	movs	r7, #4
   1cd8a:	9702      	str	r7, [sp, #8]
   1cd8c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   1cd90:	2300      	movs	r3, #0
   1cd92:	e9cd 2300 	strd	r2, r3, [sp]
   1cd96:	2200      	movs	r2, #0
   1cd98:	2128      	movs	r1, #40	; 0x28
   1cd9a:	4620      	mov	r0, r4
   1cd9c:	f7fc feaa 	bl	19af4 <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   1cda0:	9702      	str	r7, [sp, #8]
   1cda2:	4a29      	ldr	r2, [pc, #164]	; (1ce48 <dw1000_phy_repeated_frames+0x158>)
   1cda4:	2300      	movs	r3, #0
   1cda6:	e9cd 2300 	strd	r2, r3, [sp]
   1cdaa:	2200      	movs	r2, #0
   1cdac:	2128      	movs	r1, #40	; 0x28
   1cdae:	4620      	mov	r0, r4
   1cdb0:	f7fc fea0 	bl	19af4 <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
   1cdb4:	4620      	mov	r0, r4
   1cdb6:	f7ff fd04 	bl	1c7c2 <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
   1cdba:	4620      	mov	r0, r4
   1cdbc:	f7ff fd18 	bl	1c7f0 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
   1cdc0:	0a32      	lsrs	r2, r6, #8
   1cdc2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1cdc6:	0a2b      	lsrs	r3, r5, #8
   1cdc8:	42ba      	cmp	r2, r7
   1cdca:	f173 0300 	sbcs.w	r3, r3, #0
   1cdce:	d202      	bcs.n	1cdd6 <dw1000_phy_repeated_frames+0xe6>
            rate = ((uint64_t)4<<8);
   1cdd0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1cdd4:	2500      	movs	r5, #0
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
   1cdd6:	2304      	movs	r3, #4
   1cdd8:	9302      	str	r3, [sp, #8]
   1cdda:	0a36      	lsrs	r6, r6, #8
   1cddc:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   1cde0:	0a2d      	lsrs	r5, r5, #8
   1cde2:	9600      	str	r6, [sp, #0]
   1cde4:	9501      	str	r5, [sp, #4]
   1cde6:	2200      	movs	r2, #0
   1cde8:	210a      	movs	r1, #10
   1cdea:	4620      	mov	r0, r4
   1cdec:	f7fc fe82 	bl	19af4 <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
   1cdf0:	2501      	movs	r5, #1
   1cdf2:	9502      	str	r5, [sp, #8]
   1cdf4:	2210      	movs	r2, #16
   1cdf6:	2300      	movs	r3, #0
   1cdf8:	e9cd 2300 	strd	r2, r3, [sp]
   1cdfc:	2224      	movs	r2, #36	; 0x24
   1cdfe:	212f      	movs	r1, #47	; 0x2f
   1ce00:	4620      	mov	r0, r4
   1ce02:	f7fc fe77 	bl	19af4 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   1ce06:	9502      	str	r5, [sp, #8]
   1ce08:	2202      	movs	r2, #2
   1ce0a:	2300      	movs	r3, #0
   1ce0c:	e9cd 2300 	strd	r2, r3, [sp]
   1ce10:	2200      	movs	r2, #0
   1ce12:	210d      	movs	r1, #13
   1ce14:	4620      	mov	r0, r4
   1ce16:	f7fc fe6d 	bl	19af4 <dw1000_write_reg>
}
   1ce1a:	e783      	b.n	1cd24 <dw1000_phy_repeated_frames+0x34>
        assert(rc == 0);
   1ce1c:	2300      	movs	r3, #0
   1ce1e:	461a      	mov	r2, r3
   1ce20:	4619      	mov	r1, r3
   1ce22:	4618      	mov	r0, r3
   1ce24:	f7ec f9ce 	bl	91c4 <__assert_func>
        assert(rc == 0);
   1ce28:	2300      	movs	r3, #0
   1ce2a:	461a      	mov	r2, r3
   1ce2c:	4619      	mov	r1, r3
   1ce2e:	4618      	mov	r0, r3
   1ce30:	f7ec f9c8 	bl	91c4 <__assert_func>
        assert(rc == 0);
   1ce34:	2300      	movs	r3, #0
   1ce36:	461a      	mov	r2, r3
   1ce38:	4619      	mov	r1, r3
   1ce3a:	4618      	mov	r0, r3
   1ce3c:	f7ec f9c2 	bl	91c4 <__assert_func>
   1ce40:	0002708c 	.word	0x0002708c
   1ce44:	000270a0 	.word	0x000270a0
   1ce48:	005fff00 	.word	0x005fff00

0001ce4c <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
   1ce4c:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
   1ce4e:	ed90 0a00 	vldr	s0, [r0]
   1ce52:	89c3      	ldrh	r3, [r0, #14]
   1ce54:	7b02      	ldrb	r2, [r0, #12]
   1ce56:	4413      	add	r3, r2
   1ce58:	ee07 3a90 	vmov	s15, r3
   1ce5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1ce60:	ee27 0a80 	vmul.f32	s0, s15, s0
   1ce64:	f007 fa64 	bl	24330 <ceilf>
   1ce68:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
   1ce6c:	ee10 3a10 	vmov	r3, s0
   1ce70:	b298      	uxth	r0, r3
   1ce72:	bd08      	pop	{r3, pc}

0001ce74 <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1ce74:	b508      	push	{r3, lr}
    int32_t total_payload_bits;
    uint16_t duration;
    /* We need to add 48 parity bits for every 330 bits in the data payload (including crc)
     * I.e. for < 330 bits we need 48 parity bits, for > 330 bits we need 48+48 parity bits,
     * for > 660 bits we need 3*48 parity bits, etc. */
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   1ce76:	3102      	adds	r1, #2
   1ce78:	00c9      	lsls	r1, r1, #3
   1ce7a:	4b12      	ldr	r3, [pc, #72]	; (1cec4 <dw1000_phy_data_duration+0x50>)
   1ce7c:	fb83 2301 	smull	r2, r3, r3, r1
   1ce80:	11db      	asrs	r3, r3, #7
   1ce82:	3301      	adds	r3, #1
   1ce84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
   1ce88:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   1ce8c:	ee07 3a90 	vmov	s15, r3
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1ce90:	ed90 7a01 	vldr	s14, [r0, #4]
   1ce94:	7c83      	ldrb	r3, [r0, #18]
   1ce96:	ee00 3a10 	vmov	s0, r3
   1ce9a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   1ce9e:	ee20 0a07 	vmul.f32	s0, s0, s14
                          attrib->Tdsym * total_payload_bits);
   1cea2:	ed90 7a02 	vldr	s14, [r0, #8]
   1cea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1ceaa:	ee67 7a87 	vmul.f32	s15, s15, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1ceae:	ee30 0a27 	vadd.f32	s0, s0, s15
   1ceb2:	f007 fa3d 	bl	24330 <ceilf>
   1ceb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
   1ceba:	ee10 3a10 	vmov	r3, s0
   1cebe:	b298      	uxth	r0, r3
   1cec0:	bd08      	pop	{r3, pc}
   1cec2:	bf00      	nop
   1cec4:	634c0635 	.word	0x634c0635

0001cec8 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1cec8:	b570      	push	{r4, r5, r6, lr}
   1ceca:	4605      	mov	r5, r0
   1cecc:	460e      	mov	r6, r1
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
   1cece:	f7ff ffbd 	bl	1ce4c <dw1000_phy_SHR_duration>
   1ced2:	4604      	mov	r4, r0
   1ced4:	4631      	mov	r1, r6
   1ced6:	4628      	mov	r0, r5
   1ced8:	f7ff ffcc 	bl	1ce74 <dw1000_phy_data_duration>
   1cedc:	4420      	add	r0, r4
}
   1cede:	b280      	uxth	r0, r0
   1cee0:	bd70      	pop	{r4, r5, r6, pc}

0001cee2 <dw1000_phy_txrf_power_value>:
 */
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
   1cee2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if (!reg) {
   1cee6:	460a      	mov	r2, r1
   1cee8:	2900      	cmp	r1, #0
   1ceea:	d05a      	beq.n	1cfa2 <dw1000_phy_txrf_power_value+0xc0>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
   1ceec:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   1cef0:	ee17 3a90 	vmov	r3, s15
   1cef4:	2b20      	cmp	r3, #32
   1cef6:	d856      	bhi.n	1cfa6 <dw1000_phy_txrf_power_value+0xc4>
        return false;
    }

    switch (c) {
   1cef8:	ee10 3a10 	vmov	r3, s0
   1cefc:	2b12      	cmp	r3, #18
   1cefe:	d854      	bhi.n	1cfaa <dw1000_phy_txrf_power_value+0xc8>
   1cf00:	e8df f003 	tbb	[pc, r3]
   1cf04:	3b535345 	.word	0x3b535345
   1cf08:	53315353 	.word	0x53315353
   1cf0c:	53532753 	.word	0x53532753
   1cf10:	1353531d 	.word	0x1353531d
   1cf14:	5353      	.short	0x5353
   1cf16:	0a          	.byte	0x0a
   1cf17:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   1cf18:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf1c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   1cf20:	ee17 3a90 	vmov	r3, s15
   1cf24:	7013      	strb	r3, [r2, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
   1cf26:	2001      	movs	r0, #1
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   1cf28:	4770      	bx	lr
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1cf2a:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf2e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cf32:	ee10 3a90 	vmov	r3, s1
   1cf36:	3320      	adds	r3, #32
   1cf38:	7013      	strb	r3, [r2, #0]
    return true;
   1cf3a:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1cf3c:	4770      	bx	lr
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   1cf3e:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf42:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cf46:	ee10 3a90 	vmov	r3, s1
   1cf4a:	3340      	adds	r3, #64	; 0x40
   1cf4c:	7013      	strb	r3, [r2, #0]
    return true;
   1cf4e:	2001      	movs	r0, #1
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   1cf50:	4770      	bx	lr
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1cf52:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf56:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cf5a:	ee10 3a90 	vmov	r3, s1
   1cf5e:	3360      	adds	r3, #96	; 0x60
   1cf60:	7013      	strb	r3, [r2, #0]
    return true;
   1cf62:	2001      	movs	r0, #1
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1cf64:	4770      	bx	lr
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   1cf66:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf6a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cf6e:	ee10 3a90 	vmov	r3, s1
   1cf72:	3b80      	subs	r3, #128	; 0x80
   1cf74:	7013      	strb	r3, [r2, #0]
    return true;
   1cf76:	2001      	movs	r0, #1
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   1cf78:	4770      	bx	lr
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1cf7a:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf7e:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cf82:	ee10 3a90 	vmov	r3, s1
   1cf86:	3b60      	subs	r3, #96	; 0x60
   1cf88:	7013      	strb	r3, [r2, #0]
    return true;
   1cf8a:	2001      	movs	r0, #1
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1cf8c:	4770      	bx	lr
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   1cf8e:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cf92:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cf96:	ee10 3a90 	vmov	r3, s1
   1cf9a:	3b40      	subs	r3, #64	; 0x40
   1cf9c:	7013      	strb	r3, [r2, #0]
    return true;
   1cf9e:	2001      	movs	r0, #1
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   1cfa0:	4770      	bx	lr
        return false;
   1cfa2:	2000      	movs	r0, #0
   1cfa4:	4770      	bx	lr
        return false;
   1cfa6:	2000      	movs	r0, #0
   1cfa8:	4770      	bx	lr
    switch (c) {
   1cfaa:	2000      	movs	r0, #0
}
   1cfac:	4770      	bx	lr

0001cfae <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
   1cfae:	b530      	push	{r4, r5, lr}
   1cfb0:	b085      	sub	sp, #20
   1cfb2:	4604      	mov	r4, r0
   1cfb4:	460d      	mov	r5, r1
    if (reset) {
   1cfb6:	b97a      	cbnz	r2, 1cfd8 <dw1000_phy_event_cnt_ctrl+0x2a>
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   1cfb8:	b1cd      	cbz	r5, 1cfee <dw1000_phy_event_cnt_ctrl+0x40>
   1cfba:	2201      	movs	r2, #1
   1cfbc:	2300      	movs	r3, #0
   1cfbe:	2104      	movs	r1, #4
   1cfc0:	9102      	str	r1, [sp, #8]
   1cfc2:	e9cd 2300 	strd	r2, r3, [sp]
   1cfc6:	2200      	movs	r2, #0
   1cfc8:	212f      	movs	r1, #47	; 0x2f
   1cfca:	4620      	mov	r0, r4
   1cfcc:	f7fc fd92 	bl	19af4 <dw1000_write_reg>
    return inst->uwb_dev.status;
}
   1cfd0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1cfd4:	b005      	add	sp, #20
   1cfd6:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
   1cfd8:	2304      	movs	r3, #4
   1cfda:	9302      	str	r3, [sp, #8]
   1cfdc:	2202      	movs	r2, #2
   1cfde:	2300      	movs	r3, #0
   1cfe0:	e9cd 2300 	strd	r2, r3, [sp]
   1cfe4:	2200      	movs	r2, #0
   1cfe6:	212f      	movs	r1, #47	; 0x2f
   1cfe8:	f7fc fd84 	bl	19af4 <dw1000_write_reg>
   1cfec:	e7e4      	b.n	1cfb8 <dw1000_phy_event_cnt_ctrl+0xa>
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   1cfee:	2200      	movs	r2, #0
   1cff0:	2300      	movs	r3, #0
   1cff2:	e7e4      	b.n	1cfbe <dw1000_phy_event_cnt_ctrl+0x10>

0001cff4 <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
   1cff4:	b530      	push	{r4, r5, lr}
   1cff6:	b083      	sub	sp, #12
   1cff8:	4605      	mov	r5, r0
    if (!res) {
   1cffa:	b319      	cbz	r1, 1d044 <dw1000_phy_event_cnt_read+0x50>
   1cffc:	460c      	mov	r4, r1
        return inst->uwb_dev.status;
    }
    /* Read first 6 counter registers in one go */
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
   1cffe:	2318      	movs	r3, #24
   1d000:	9300      	str	r3, [sp, #0]
   1d002:	460b      	mov	r3, r1
   1d004:	2204      	movs	r2, #4
   1d006:	212f      	movs	r1, #47	; 0x2f
   1d008:	f7fc fc3a 	bl	19880 <dw1000_read>
                offsetof(struct uwb_dev_evcnt, event_count6));
    /* Apply masks */
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
   1d00c:	6823      	ldr	r3, [r4, #0]
   1d00e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1d012:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
   1d014:	6863      	ldr	r3, [r4, #4]
   1d016:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1d01a:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
   1d01c:	68a3      	ldr	r3, [r4, #8]
   1d01e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1d022:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
   1d024:	68e3      	ldr	r3, [r4, #12]
   1d026:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1d02a:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
   1d02c:	6923      	ldr	r3, [r4, #16]
   1d02e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1d032:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
   1d034:	6963      	ldr	r3, [r4, #20]
   1d036:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1d03a:	6163      	str	r3, [r4, #20]
    return inst->uwb_dev.status;
   1d03c:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
   1d040:	b003      	add	sp, #12
   1d042:	bd30      	pop	{r4, r5, pc}
        return inst->uwb_dev.status;
   1d044:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1d048:	e7fa      	b.n	1d040 <dw1000_phy_event_cnt_read+0x4c>
	...

0001d04c <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   1d04c:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1d04e:	f7f5 fc4c 	bl	128ea <dpl_cputime_get32>
   1d052:	4601      	mov	r1, r0
   1d054:	4805      	ldr	r0, [pc, #20]	; (1d06c <dw1000_pkg_init+0x20>)
   1d056:	f7f3 ff39 	bl	10ecc <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   1d05a:	2000      	movs	r0, #0
   1d05c:	f7fd f962 	bl	1a324 <hal_dw1000_inst>
   1d060:	f7fc ff54 	bl	19f0c <dw1000_dev_config>
        dw1000_dev_config((struct _dw1000_dev_instance_t*)dev);
    }
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
   1d064:	f000 fa62 	bl	1d52c <dw1000_cli_register>
#endif
}
   1d068:	bd08      	pop	{r3, pc}
   1d06a:	bf00      	nop
   1d06c:	000270b4 	.word	0x000270b4

0001d070 <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   1d070:	b510      	push	{r4, lr}
   1d072:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1d074:	f7f5 fc39 	bl	128ea <dpl_cputime_get32>
   1d078:	4601      	mov	r1, r0
   1d07a:	480d      	ldr	r0, [pc, #52]	; (1d0b0 <dw1000_pkg_down+0x40>)
   1d07c:	f7f3 ff26 	bl	10ecc <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   1d080:	480c      	ldr	r0, [pc, #48]	; (1d0b4 <dw1000_pkg_down+0x44>)
   1d082:	f7ec fba9 	bl	97d8 <os_dev_lookup>
    if (dev) {
   1d086:	b108      	cbz	r0, 1d08c <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1d088:	f7fd f8fa 	bl	1a280 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   1d08c:	480a      	ldr	r0, [pc, #40]	; (1d0b8 <dw1000_pkg_down+0x48>)
   1d08e:	f7ec fba3 	bl	97d8 <os_dev_lookup>
    if (dev) {
   1d092:	b108      	cbz	r0, 1d098 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1d094:	f7fd f8f4 	bl	1a280 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   1d098:	4808      	ldr	r0, [pc, #32]	; (1d0bc <dw1000_pkg_down+0x4c>)
   1d09a:	f7ec fb9d 	bl	97d8 <os_dev_lookup>
    if (dev) {
   1d09e:	b108      	cbz	r0, 1d0a4 <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1d0a0:	f7fd f8ee 	bl	1a280 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   1d0a4:	4620      	mov	r0, r4
   1d0a6:	f000 fa49 	bl	1d53c <dw1000_cli_down>
#endif
    return 0;
}
   1d0aa:	2000      	movs	r0, #0
   1d0ac:	bd10      	pop	{r4, pc}
   1d0ae:	bf00      	nop
   1d0b0:	000270e0 	.word	0x000270e0
   1d0b4:	00026dc8 	.word	0x00026dc8
   1d0b8:	0002710c 	.word	0x0002710c
   1d0bc:	00027118 	.word	0x00027118

0001d0c0 <dw1000_cli_too_few_args>:
#endif

#ifndef __KERNEL__
static void
dw1000_cli_too_few_args(struct streamer *streamer)
{
   1d0c0:	b508      	push	{r3, lr}
    streamer_printf(streamer, "Too few args\n");
   1d0c2:	4902      	ldr	r1, [pc, #8]	; (1d0cc <dw1000_cli_too_few_args+0xc>)
   1d0c4:	f7f5 fd0c 	bl	12ae0 <streamer_printf>
}
   1d0c8:	bd08      	pop	{r3, pc}
   1d0ca:	bf00      	nop
   1d0cc:	00025754 	.word	0x00025754

0001d0d0 <dw1000_cli_dump_registers>:
{
   1d0d0:	b570      	push	{r4, r5, r6, lr}
   1d0d2:	b082      	sub	sp, #8
   1d0d4:	4605      	mov	r5, r0
   1d0d6:	460e      	mov	r6, r1
    for(i=0; i<0x37; i++)
   1d0d8:	2400      	movs	r4, #0
   1d0da:	e00e      	b.n	1d0fa <dw1000_cli_dump_registers+0x2a>
            reg = dw1000_read_reg(inst, i, 0, 4);
   1d0dc:	2304      	movs	r3, #4
   1d0de:	2200      	movs	r2, #0
   1d0e0:	b2a1      	uxth	r1, r4
   1d0e2:	4628      	mov	r0, r5
   1d0e4:	f7fc fc96 	bl	19a14 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   1d0e8:	9000      	str	r0, [sp, #0]
   1d0ea:	2300      	movs	r3, #0
   1d0ec:	9301      	str	r3, [sp, #4]
   1d0ee:	4622      	mov	r2, r4
   1d0f0:	4950      	ldr	r1, [pc, #320]	; (1d234 <dw1000_cli_dump_registers+0x164>)
   1d0f2:	4630      	mov	r0, r6
   1d0f4:	f7f5 fcf4 	bl	12ae0 <streamer_printf>
    for(i=0; i<0x37; i++)
   1d0f8:	3401      	adds	r4, #1
   1d0fa:	2c36      	cmp	r4, #54	; 0x36
   1d0fc:	dc77      	bgt.n	1d1ee <dw1000_cli_dump_registers+0x11e>
        if (i==0x05 || i==0x07 || i==0x0B ||
   1d0fe:	2c05      	cmp	r4, #5
   1d100:	d0fa      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
   1d102:	2c07      	cmp	r4, #7
   1d104:	d0f8      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
   1d106:	2c0b      	cmp	r4, #11
   1d108:	d0f6      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
   1d10a:	2c16      	cmp	r4, #22
   1d10c:	d0f4      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
            i==0x16 || i==0x1B || i==0x1C ||
   1d10e:	2c1b      	cmp	r4, #27
   1d110:	d0f2      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
   1d112:	2c1c      	cmp	r4, #28
   1d114:	d0f0      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
   1d116:	2c20      	cmp	r4, #32
   1d118:	d0ee      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
            i==0x20 || i==0x22 || i==0x29 ||
   1d11a:	2c22      	cmp	r4, #34	; 0x22
   1d11c:	d0ec      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
   1d11e:	2c29      	cmp	r4, #41	; 0x29
   1d120:	d0ea      	beq.n	1d0f8 <dw1000_cli_dump_registers+0x28>
            (i>0x29 && i<0x36)) {
   1d122:	f1a4 032a 	sub.w	r3, r4, #42	; 0x2a
            i==0x20 || i==0x22 || i==0x29 ||
   1d126:	2b0b      	cmp	r3, #11
   1d128:	d9e6      	bls.n	1d0f8 <dw1000_cli_dump_registers+0x28>
        switch (i) {
   1d12a:	2c1f      	cmp	r4, #31
   1d12c:	d851      	bhi.n	1d1d2 <dw1000_cli_dump_registers+0x102>
   1d12e:	a301      	add	r3, pc, #4	; (adr r3, 1d134 <dw1000_cli_dump_registers+0x64>)
   1d130:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1d134:	0001d0dd 	.word	0x0001d0dd
   1d138:	0001d1d3 	.word	0x0001d1d3
   1d13c:	0001d1d3 	.word	0x0001d1d3
   1d140:	0001d0dd 	.word	0x0001d0dd
   1d144:	0001d0dd 	.word	0x0001d0dd
   1d148:	0001d1d3 	.word	0x0001d1d3
   1d14c:	0001d1b5 	.word	0x0001d1b5
   1d150:	0001d1d3 	.word	0x0001d1d3
   1d154:	0001d1b5 	.word	0x0001d1b5
   1d158:	0001d1d3 	.word	0x0001d1d3
   1d15c:	0001d1b5 	.word	0x0001d1b5
   1d160:	0001d1d3 	.word	0x0001d1d3
   1d164:	0001d0dd 	.word	0x0001d0dd
   1d168:	0001d0dd 	.word	0x0001d0dd
   1d16c:	0001d1b5 	.word	0x0001d1b5
   1d170:	0001d1b5 	.word	0x0001d1b5
   1d174:	0001d0dd 	.word	0x0001d0dd
   1d178:	0001d1d3 	.word	0x0001d1d3
   1d17c:	0001d1d3 	.word	0x0001d1d3
   1d180:	0001d0dd 	.word	0x0001d0dd
   1d184:	0001d1b5 	.word	0x0001d1b5
   1d188:	0001d1b5 	.word	0x0001d1b5
   1d18c:	0001d1d3 	.word	0x0001d1d3
   1d190:	0001d1b5 	.word	0x0001d1b5
   1d194:	0001d0dd 	.word	0x0001d0dd
   1d198:	0001d1b5 	.word	0x0001d1b5
   1d19c:	0001d0dd 	.word	0x0001d0dd
   1d1a0:	0001d1d3 	.word	0x0001d1d3
   1d1a4:	0001d1d3 	.word	0x0001d1d3
   1d1a8:	0001d0dd 	.word	0x0001d0dd
   1d1ac:	0001d0dd 	.word	0x0001d0dd
   1d1b0:	0001d0dd 	.word	0x0001d0dd
            reg = dw1000_read_reg(inst, i, 0, 5);
   1d1b4:	2305      	movs	r3, #5
   1d1b6:	2200      	movs	r2, #0
   1d1b8:	b2a1      	uxth	r1, r4
   1d1ba:	4628      	mov	r0, r5
   1d1bc:	f7fc fc2a 	bl	19a14 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   1d1c0:	b2c9      	uxtb	r1, r1
   1d1c2:	9000      	str	r0, [sp, #0]
   1d1c4:	9101      	str	r1, [sp, #4]
   1d1c6:	4622      	mov	r2, r4
   1d1c8:	491b      	ldr	r1, [pc, #108]	; (1d238 <dw1000_cli_dump_registers+0x168>)
   1d1ca:	4630      	mov	r0, r6
   1d1cc:	f7f5 fc88 	bl	12ae0 <streamer_printf>
            break;
   1d1d0:	e792      	b.n	1d0f8 <dw1000_cli_dump_registers+0x28>
            reg = dw1000_read_reg(inst, i, 0, l);
   1d1d2:	2308      	movs	r3, #8
   1d1d4:	2200      	movs	r2, #0
   1d1d6:	b2a1      	uxth	r1, r4
   1d1d8:	4628      	mov	r0, r5
   1d1da:	f7fc fc1b 	bl	19a14 <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   1d1de:	e9cd 0100 	strd	r0, r1, [sp]
   1d1e2:	4622      	mov	r2, r4
   1d1e4:	4915      	ldr	r1, [pc, #84]	; (1d23c <dw1000_cli_dump_registers+0x16c>)
   1d1e6:	4630      	mov	r0, r6
   1d1e8:	f7f5 fc7a 	bl	12ae0 <streamer_printf>
   1d1ec:	e784      	b.n	1d0f8 <dw1000_cli_dump_registers+0x28>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   1d1ee:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   1d1f0:	4913      	ldr	r1, [pc, #76]	; (1d240 <dw1000_cli_dump_registers+0x170>)
   1d1f2:	4630      	mov	r0, r6
   1d1f4:	f7f5 fc74 	bl	12ae0 <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   1d1f8:	f8b5 2566 	ldrh.w	r2, [r5, #1382]	; 0x566
   1d1fc:	4911      	ldr	r1, [pc, #68]	; (1d244 <dw1000_cli_dump_registers+0x174>)
   1d1fe:	4630      	mov	r0, r6
   1d200:	f7f5 fc6e 	bl	12ae0 <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   1d204:	2104      	movs	r1, #4
   1d206:	4628      	mov	r0, r5
   1d208:	f7eb fdb9 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (rng)
   1d20c:	b128      	cbz	r0, 1d21a <dw1000_cli_dump_registers+0x14a>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   1d20e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   1d212:	490d      	ldr	r1, [pc, #52]	; (1d248 <dw1000_cli_dump_registers+0x178>)
   1d214:	4630      	mov	r0, r6
   1d216:	f7f5 fc63 	bl	12ae0 <streamer_printf>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   1d21a:	2101      	movs	r1, #1
   1d21c:	4628      	mov	r0, r5
   1d21e:	f7eb fdae 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   1d222:	b128      	cbz	r0, 1d230 <dw1000_cli_dump_registers+0x160>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   1d224:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   1d228:	4908      	ldr	r1, [pc, #32]	; (1d24c <dw1000_cli_dump_registers+0x17c>)
   1d22a:	4630      	mov	r0, r6
   1d22c:	f7f5 fc58 	bl	12ae0 <streamer_printf>
}
   1d230:	b002      	add	sp, #8
   1d232:	bd70      	pop	{r4, r5, r6, pc}
   1d234:	00027124 	.word	0x00027124
   1d238:	00027140 	.word	0x00027140
   1d23c:	0002715c 	.word	0x0002715c
   1d240:	00027178 	.word	0x00027178
   1d244:	00027190 	.word	0x00027190
   1d248:	000271a8 	.word	0x000271a8
   1d24c:	000271bc 	.word	0x000271bc

0001d250 <dw1000_cli_dump_address>:
{
   1d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d254:	b09b      	sub	sp, #108	; 0x6c
   1d256:	9013      	str	r0, [sp, #76]	; 0x4c
   1d258:	9114      	str	r1, [sp, #80]	; 0x50
   1d25a:	9212      	str	r2, [sp, #72]	; 0x48
   1d25c:	9315      	str	r3, [sp, #84]	; 0x54
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   1d25e:	460a      	mov	r2, r1
   1d260:	492d      	ldr	r1, [pc, #180]	; (1d318 <dw1000_cli_dump_address+0xc8>)
   1d262:	4618      	mov	r0, r3
   1d264:	f7f5 fc3c 	bl	12ae0 <streamer_printf>
    for (i=0;i<length;i+=step) {
   1d268:	f04f 0800 	mov.w	r8, #0
   1d26c:	e04d      	b.n	1d30a <dw1000_cli_dump_address+0xba>
        memset(b,0,sizeof(b));
   1d26e:	2300      	movs	r3, #0
   1d270:	9316      	str	r3, [sp, #88]	; 0x58
   1d272:	9317      	str	r3, [sp, #92]	; 0x5c
   1d274:	9318      	str	r3, [sp, #96]	; 0x60
   1d276:	9319      	str	r3, [sp, #100]	; 0x64
        dw1000_read(inst, addr, i, b, step);
   1d278:	2310      	movs	r3, #16
   1d27a:	9300      	str	r3, [sp, #0]
   1d27c:	ab16      	add	r3, sp, #88	; 0x58
   1d27e:	fa1f f288 	uxth.w	r2, r8
   1d282:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   1d286:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1d288:	f7fc fafa 	bl	19880 <dw1000_read>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
   1d28c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   1d290:	9310      	str	r3, [sp, #64]	; 0x40
   1d292:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   1d296:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   1d29a:	9211      	str	r2, [sp, #68]	; 0x44
   1d29c:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   1d2a0:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   1d2a4:	f89d 405e 	ldrb.w	r4, [sp, #94]	; 0x5e
   1d2a8:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
   1d2ac:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   1d2b0:	f89d 7061 	ldrb.w	r7, [sp, #97]	; 0x61
   1d2b4:	f89d c062 	ldrb.w	ip, [sp, #98]	; 0x62
   1d2b8:	f89d e063 	ldrb.w	lr, [sp, #99]	; 0x63
   1d2bc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   1d2c0:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
   1d2c4:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
   1d2c8:	f89d b067 	ldrb.w	fp, [sp, #103]	; 0x67
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   1d2cc:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   1d2d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   1d2d4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   1d2d8:	920b      	str	r2, [sp, #44]	; 0x2c
   1d2da:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   1d2de:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   1d2e2:	9708      	str	r7, [sp, #32]
   1d2e4:	9607      	str	r6, [sp, #28]
   1d2e6:	9506      	str	r5, [sp, #24]
   1d2e8:	9405      	str	r4, [sp, #20]
   1d2ea:	9004      	str	r0, [sp, #16]
   1d2ec:	9103      	str	r1, [sp, #12]
   1d2ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1d2f0:	9202      	str	r2, [sp, #8]
   1d2f2:	9301      	str	r3, [sp, #4]
   1d2f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d2f6:	9300      	str	r3, [sp, #0]
   1d2f8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1d2fc:	4642      	mov	r2, r8
   1d2fe:	4907      	ldr	r1, [pc, #28]	; (1d31c <dw1000_cli_dump_address+0xcc>)
   1d300:	9815      	ldr	r0, [sp, #84]	; 0x54
   1d302:	f7f5 fbed 	bl	12ae0 <streamer_printf>
    for (i=0;i<length;i+=step) {
   1d306:	f108 0810 	add.w	r8, r8, #16
   1d30a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d30c:	4543      	cmp	r3, r8
   1d30e:	dcae      	bgt.n	1d26e <dw1000_cli_dump_address+0x1e>
}
   1d310:	b01b      	add	sp, #108	; 0x6c
   1d312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d316:	bf00      	nop
   1d318:	000271d0 	.word	0x000271d0
   1d31c:	000271ec 	.word	0x000271ec

0001d320 <dw1000_cli_cmd>:
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   1d320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d324:	b085      	sub	sp, #20
   1d326:	461f      	mov	r7, r3
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   1d328:	2901      	cmp	r1, #1
   1d32a:	dd1a      	ble.n	1d362 <dw1000_cli_cmd+0x42>
   1d32c:	460c      	mov	r4, r1
   1d32e:	4615      	mov	r5, r2
        dw1000_cli_too_few_args(streamer);
        return 0;
    }

    if (!strcmp(argv[1], "dump")) {
   1d330:	6856      	ldr	r6, [r2, #4]
   1d332:	4976      	ldr	r1, [pc, #472]	; (1d50c <dw1000_cli_cmd+0x1ec>)
   1d334:	4630      	mov	r0, r6
   1d336:	f7f3 f9db 	bl	106f0 <strcmp>
   1d33a:	b9e8      	cbnz	r0, 1d378 <dw1000_cli_cmd+0x58>
        if (argc < 3) {
   1d33c:	2c02      	cmp	r4, #2
   1d33e:	dc14      	bgt.n	1d36a <dw1000_cli_cmd+0x4a>
            inst_n=0;
   1d340:	2000      	movs	r0, #0
        } else {
            inst_n = strtol(argv[2], NULL, 0);
        }
        inst = hal_dw1000_inst(inst_n);
   1d342:	b2c0      	uxtb	r0, r0
   1d344:	f7fc ffee 	bl	1a324 <hal_dw1000_inst>
   1d348:	4604      	mov	r4, r0
        console_no_ticks();
   1d34a:	f7f6 fe19 	bl	13f80 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   1d34e:	4639      	mov	r1, r7
   1d350:	4620      	mov	r0, r4
   1d352:	f7ff febd 	bl	1d0d0 <dw1000_cli_dump_registers>
        console_yes_ticks();
   1d356:	f7f6 fe19 	bl	13f8c <console_yes_ticks>
        streamer_printf(streamer, "Unknown cmd\n");
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   1d35a:	2000      	movs	r0, #0
   1d35c:	b005      	add	sp, #20
   1d35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dw1000_cli_too_few_args(streamer);
   1d362:	4618      	mov	r0, r3
   1d364:	f7ff feac 	bl	1d0c0 <dw1000_cli_too_few_args>
        return 0;
   1d368:	e7f7      	b.n	1d35a <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   1d36a:	2200      	movs	r2, #0
   1d36c:	4611      	mov	r1, r2
   1d36e:	68a8      	ldr	r0, [r5, #8]
   1d370:	f004 f8e8 	bl	21544 <strtol>
   1d374:	b280      	uxth	r0, r0
   1d376:	e7e4      	b.n	1d342 <dw1000_cli_cmd+0x22>
    } else if (!strcmp(argv[1], "da")) {
   1d378:	4965      	ldr	r1, [pc, #404]	; (1d510 <dw1000_cli_cmd+0x1f0>)
   1d37a:	4630      	mov	r0, r6
   1d37c:	f7f3 f9b8 	bl	106f0 <strcmp>
   1d380:	bb08      	cbnz	r0, 1d3c6 <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   1d382:	2c02      	cmp	r4, #2
   1d384:	dde9      	ble.n	1d35a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1d386:	2200      	movs	r2, #0
   1d388:	4611      	mov	r1, r2
   1d38a:	68a8      	ldr	r0, [r5, #8]
   1d38c:	f004 f8da 	bl	21544 <strtol>
   1d390:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1d392:	2200      	movs	r2, #0
   1d394:	4611      	mov	r1, r2
   1d396:	68e8      	ldr	r0, [r5, #12]
   1d398:	f004 f8d4 	bl	21544 <strtol>
   1d39c:	4606      	mov	r6, r0
        if (argc>4) {
   1d39e:	2c04      	cmp	r4, #4
   1d3a0:	dc0a      	bgt.n	1d3b8 <dw1000_cli_cmd+0x98>
        int length = 128;
   1d3a2:	2480      	movs	r4, #128	; 0x80
        inst = hal_dw1000_inst(inst_n);
   1d3a4:	fa5f f088 	uxtb.w	r0, r8
   1d3a8:	f7fc ffbc 	bl	1a324 <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   1d3ac:	463b      	mov	r3, r7
   1d3ae:	b2a2      	uxth	r2, r4
   1d3b0:	4631      	mov	r1, r6
   1d3b2:	f7ff ff4d 	bl	1d250 <dw1000_cli_dump_address>
   1d3b6:	e7d0      	b.n	1d35a <dw1000_cli_cmd+0x3a>
            length = strtol(argv[4], NULL, 0);
   1d3b8:	2200      	movs	r2, #0
   1d3ba:	4611      	mov	r1, r2
   1d3bc:	6928      	ldr	r0, [r5, #16]
   1d3be:	f004 f8c1 	bl	21544 <strtol>
   1d3c2:	4604      	mov	r4, r0
   1d3c4:	e7ee      	b.n	1d3a4 <dw1000_cli_cmd+0x84>
    } else if (!strcmp(argv[1], "cw")) {
   1d3c6:	4953      	ldr	r1, [pc, #332]	; (1d514 <dw1000_cli_cmd+0x1f4>)
   1d3c8:	4630      	mov	r0, r6
   1d3ca:	f7f3 f991 	bl	106f0 <strcmp>
   1d3ce:	2800      	cmp	r0, #0
   1d3d0:	d034      	beq.n	1d43c <dw1000_cli_cmd+0x11c>
    } else if (!strcmp(argv[1], "wr")) {
   1d3d2:	4951      	ldr	r1, [pc, #324]	; (1d518 <dw1000_cli_cmd+0x1f8>)
   1d3d4:	4630      	mov	r0, r6
   1d3d6:	f7f3 f98b 	bl	106f0 <strcmp>
   1d3da:	2800      	cmp	r0, #0
   1d3dc:	d15e      	bne.n	1d49c <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   1d3de:	2c06      	cmp	r4, #6
   1d3e0:	ddbb      	ble.n	1d35a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1d3e2:	2200      	movs	r2, #0
   1d3e4:	4611      	mov	r1, r2
   1d3e6:	68a8      	ldr	r0, [r5, #8]
   1d3e8:	f004 f8ac 	bl	21544 <strtol>
   1d3ec:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1d3ee:	2200      	movs	r2, #0
   1d3f0:	4611      	mov	r1, r2
   1d3f2:	68e8      	ldr	r0, [r5, #12]
   1d3f4:	f004 f8a6 	bl	21544 <strtol>
   1d3f8:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1d3fa:	2200      	movs	r2, #0
   1d3fc:	4611      	mov	r1, r2
   1d3fe:	6928      	ldr	r0, [r5, #16]
   1d400:	f004 f8a0 	bl	21544 <strtol>
   1d404:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   1d406:	2200      	movs	r2, #0
   1d408:	4611      	mov	r1, r2
   1d40a:	6968      	ldr	r0, [r5, #20]
   1d40c:	f004 f89a 	bl	21544 <strtol>
   1d410:	4604      	mov	r4, r0
   1d412:	ea4f 79e0 	mov.w	r9, r0, asr #31
        int length = strtol(argv[6], NULL, 0);
   1d416:	2200      	movs	r2, #0
   1d418:	4611      	mov	r1, r2
   1d41a:	69a8      	ldr	r0, [r5, #24]
   1d41c:	f004 f892 	bl	21544 <strtol>
   1d420:	4605      	mov	r5, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   1d422:	fa5f f088 	uxtb.w	r0, r8
   1d426:	f7fc ff7d 	bl	1a324 <hal_dw1000_inst>
   1d42a:	9502      	str	r5, [sp, #8]
   1d42c:	9400      	str	r4, [sp, #0]
   1d42e:	f8cd 9004 	str.w	r9, [sp, #4]
   1d432:	b2ba      	uxth	r2, r7
   1d434:	b2b1      	uxth	r1, r6
   1d436:	f7fc fb5d 	bl	19af4 <dw1000_write_reg>
   1d43a:	e78e      	b.n	1d35a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1d43c:	2200      	movs	r2, #0
   1d43e:	4611      	mov	r1, r2
   1d440:	68a8      	ldr	r0, [r5, #8]
   1d442:	f004 f87f 	bl	21544 <strtol>
   1d446:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   1d448:	b2c0      	uxtb	r0, r0
   1d44a:	f7fc ff6b 	bl	1a324 <hal_dw1000_inst>
   1d44e:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   1d450:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   1d454:	f7eb fe8a 	bl	916c <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   1d458:	2304      	movs	r3, #4
   1d45a:	9302      	str	r3, [sp, #8]
   1d45c:	2200      	movs	r2, #0
   1d45e:	2300      	movs	r3, #0
   1d460:	e9cd 2300 	strd	r2, r3, [sp]
   1d464:	210e      	movs	r1, #14
   1d466:	4620      	mov	r0, r4
   1d468:	f7fc fb44 	bl	19af4 <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1d46c:	2301      	movs	r3, #1
   1d46e:	9302      	str	r3, [sp, #8]
   1d470:	2240      	movs	r2, #64	; 0x40
   1d472:	2300      	movs	r3, #0
   1d474:	e9cd 2300 	strd	r2, r3, [sp]
   1d478:	2200      	movs	r2, #0
   1d47a:	210d      	movs	r1, #13
   1d47c:	4620      	mov	r0, r4
   1d47e:	f7fc fb39 	bl	19af4 <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   1d482:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   1d486:	4620      	mov	r0, r4
   1d488:	f7ff f8e4 	bl	1c654 <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   1d48c:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   1d490:	b2aa      	uxth	r2, r5
   1d492:	4922      	ldr	r1, [pc, #136]	; (1d51c <dw1000_cli_cmd+0x1fc>)
   1d494:	4638      	mov	r0, r7
   1d496:	f7f5 fb23 	bl	12ae0 <streamer_printf>
   1d49a:	e75e      	b.n	1d35a <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "rd")) {
   1d49c:	4920      	ldr	r1, [pc, #128]	; (1d520 <dw1000_cli_cmd+0x200>)
   1d49e:	4630      	mov	r0, r6
   1d4a0:	f7f3 f926 	bl	106f0 <strcmp>
   1d4a4:	bb60      	cbnz	r0, 1d500 <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   1d4a6:	2c05      	cmp	r4, #5
   1d4a8:	f77f af57 	ble.w	1d35a <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1d4ac:	2200      	movs	r2, #0
   1d4ae:	4611      	mov	r1, r2
   1d4b0:	68a8      	ldr	r0, [r5, #8]
   1d4b2:	f004 f847 	bl	21544 <strtol>
   1d4b6:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1d4b8:	2200      	movs	r2, #0
   1d4ba:	4611      	mov	r1, r2
   1d4bc:	68e8      	ldr	r0, [r5, #12]
   1d4be:	f004 f841 	bl	21544 <strtol>
   1d4c2:	4604      	mov	r4, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   1d4c4:	2200      	movs	r2, #0
   1d4c6:	4611      	mov	r1, r2
   1d4c8:	6928      	ldr	r0, [r5, #16]
   1d4ca:	f004 f83b 	bl	21544 <strtol>
   1d4ce:	b286      	uxth	r6, r0
        int length = strtol(argv[5], NULL, 0);
   1d4d0:	2200      	movs	r2, #0
   1d4d2:	4611      	mov	r1, r2
   1d4d4:	6968      	ldr	r0, [r5, #20]
   1d4d6:	f004 f835 	bl	21544 <strtol>
   1d4da:	4605      	mov	r5, r0
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   1d4dc:	fa5f f088 	uxtb.w	r0, r8
   1d4e0:	f7fc ff20 	bl	1a324 <hal_dw1000_inst>
   1d4e4:	462b      	mov	r3, r5
   1d4e6:	4632      	mov	r2, r6
   1d4e8:	b2a1      	uxth	r1, r4
   1d4ea:	f7fc fa93 	bl	19a14 <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   1d4ee:	e9cd 0100 	strd	r0, r1, [sp]
   1d4f2:	4633      	mov	r3, r6
   1d4f4:	4622      	mov	r2, r4
   1d4f6:	490b      	ldr	r1, [pc, #44]	; (1d524 <dw1000_cli_cmd+0x204>)
   1d4f8:	4638      	mov	r0, r7
   1d4fa:	f7f5 faf1 	bl	12ae0 <streamer_printf>
   1d4fe:	e72c      	b.n	1d35a <dw1000_cli_cmd+0x3a>
        streamer_printf(streamer, "Unknown cmd\n");
   1d500:	4909      	ldr	r1, [pc, #36]	; (1d528 <dw1000_cli_cmd+0x208>)
   1d502:	4638      	mov	r0, r7
   1d504:	f7f5 faec 	bl	12ae0 <streamer_printf>
   1d508:	e727      	b.n	1d35a <dw1000_cli_cmd+0x3a>
   1d50a:	bf00      	nop
   1d50c:	0002584c 	.word	0x0002584c
   1d510:	00027244 	.word	0x00027244
   1d514:	00027248 	.word	0x00027248
   1d518:	00027284 	.word	0x00027284
   1d51c:	0002724c 	.word	0x0002724c
   1d520:	00027288 	.word	0x00027288
   1d524:	0002728c 	.word	0x0002728c
   1d528:	00025854 	.word	0x00025854

0001d52c <dw1000_cli_register>:
#endif


int
dw1000_cli_register(void)
{
   1d52c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   1d52e:	4802      	ldr	r0, [pc, #8]	; (1d538 <dw1000_cli_register+0xc>)
   1d530:	f7f8 f968 	bl	15804 <shell_cmd_register>
#endif
    return rc;
#else
    return 0;
#endif
}
   1d534:	bd08      	pop	{r3, pc}
   1d536:	bf00      	nop
   1d538:	20000e80 	.word	0x20000e80

0001d53c <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   1d53c:	2000      	movs	r0, #0
   1d53e:	4770      	bx	lr

0001d540 <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
   1d540:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d542:	b085      	sub	sp, #20
   1d544:	4604      	mov	r4, r0
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
   1d546:	f011 0f02 	tst.w	r1, #2
   1d54a:	d050      	beq.n	1d5ee <dw1000_gpio_config_leds+0xae>
   1d54c:	460d      	mov	r5, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   1d54e:	2304      	movs	r3, #4
   1d550:	2200      	movs	r2, #0
   1d552:	2126      	movs	r1, #38	; 0x26
   1d554:	f7fc fa5e 	bl	19a14 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   1d558:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
   1d55c:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1d560:	2704      	movs	r7, #4
   1d562:	9702      	str	r7, [sp, #8]
   1d564:	2600      	movs	r6, #0
   1d566:	9000      	str	r0, [sp, #0]
   1d568:	9601      	str	r6, [sp, #4]
   1d56a:	4632      	mov	r2, r6
   1d56c:	2126      	movs	r1, #38	; 0x26
   1d56e:	4620      	mov	r0, r4
   1d570:	f7fc fac0 	bl	19af4 <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
   1d574:	463b      	mov	r3, r7
   1d576:	4632      	mov	r2, r6
   1d578:	2136      	movs	r1, #54	; 0x36
   1d57a:	4620      	mov	r0, r4
   1d57c:	f7fc fa4a 	bl	19a14 <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
   1d580:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
   1d584:	9702      	str	r7, [sp, #8]
   1d586:	9000      	str	r0, [sp, #0]
   1d588:	9601      	str	r6, [sp, #4]
   1d58a:	4632      	mov	r2, r6
   1d58c:	2136      	movs	r1, #54	; 0x36
   1d58e:	4620      	mov	r0, r4
   1d590:	f7fc fab0 	bl	19af4 <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
   1d594:	9702      	str	r7, [sp, #8]
   1d596:	f44f 7288 	mov.w	r2, #272	; 0x110
   1d59a:	2300      	movs	r3, #0
   1d59c:	e9cd 2300 	strd	r2, r3, [sp]
   1d5a0:	2228      	movs	r2, #40	; 0x28
   1d5a2:	2136      	movs	r1, #54	; 0x36
   1d5a4:	4620      	mov	r0, r4
   1d5a6:	f7fc faa5 	bl	19af4 <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
   1d5aa:	f015 0f04 	tst.w	r5, #4
   1d5ae:	d02e      	beq.n	1d60e <dw1000_gpio_config_leds+0xce>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   1d5b0:	463b      	mov	r3, r7
   1d5b2:	2228      	movs	r2, #40	; 0x28
   1d5b4:	2136      	movs	r1, #54	; 0x36
   1d5b6:	4620      	mov	r0, r4
   1d5b8:	f7fc fa2c 	bl	19a14 <dw1000_read_reg>
   1d5bc:	4605      	mov	r5, r0
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
   1d5be:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1d5c2:	9702      	str	r7, [sp, #8]
   1d5c4:	9300      	str	r3, [sp, #0]
   1d5c6:	9601      	str	r6, [sp, #4]
   1d5c8:	2228      	movs	r2, #40	; 0x28
   1d5ca:	2136      	movs	r1, #54	; 0x36
   1d5cc:	4620      	mov	r0, r4
   1d5ce:	f7fc fa91 	bl	19af4 <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
   1d5d2:	200a      	movs	r0, #10
   1d5d4:	f7f5 f999 	bl	1290a <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1d5d8:	9702      	str	r7, [sp, #8]
   1d5da:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
   1d5de:	9500      	str	r5, [sp, #0]
   1d5e0:	9601      	str	r6, [sp, #4]
   1d5e2:	2228      	movs	r2, #40	; 0x28
   1d5e4:	2136      	movs	r1, #54	; 0x36
   1d5e6:	4620      	mov	r0, r4
   1d5e8:	f7fc fa84 	bl	19af4 <dw1000_write_reg>
   1d5ec:	e00f      	b.n	1d60e <dw1000_gpio_config_leds+0xce>
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
   1d5ee:	2304      	movs	r3, #4
   1d5f0:	2200      	movs	r2, #0
   1d5f2:	2126      	movs	r1, #38	; 0x26
   1d5f4:	f7fc fa0e 	bl	19a14 <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   1d5f8:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1d5fc:	2304      	movs	r3, #4
   1d5fe:	9302      	str	r3, [sp, #8]
   1d600:	2200      	movs	r2, #0
   1d602:	9000      	str	r0, [sp, #0]
   1d604:	9201      	str	r2, [sp, #4]
   1d606:	2126      	movs	r1, #38	; 0x26
   1d608:	4620      	mov	r0, r4
   1d60a:	f7fc fa73 	bl	19af4 <dw1000_write_reg>
    }
}
   1d60e:	b005      	add	sp, #20
   1d610:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d612 <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
   1d612:	b530      	push	{r4, r5, lr}
   1d614:	b085      	sub	sp, #20
   1d616:	4604      	mov	r4, r0
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   1d618:	2302      	movs	r3, #2
   1d61a:	9302      	str	r3, [sp, #8]
   1d61c:	9100      	str	r1, [sp, #0]
   1d61e:	2300      	movs	r3, #0
   1d620:	9301      	str	r3, [sp, #4]
   1d622:	2204      	movs	r2, #4
   1d624:	212d      	movs	r1, #45	; 0x2d
   1d626:	f7fc fa65 	bl	19af4 <dw1000_write_reg>

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   1d62a:	2501      	movs	r5, #1
   1d62c:	9502      	str	r5, [sp, #8]
   1d62e:	2203      	movs	r2, #3
   1d630:	2300      	movs	r3, #0
   1d632:	e9cd 2300 	strd	r2, r3, [sp]
   1d636:	2206      	movs	r2, #6
   1d638:	212d      	movs	r1, #45	; 0x2d
   1d63a:	4620      	mov	r0, r4
   1d63c:	f7fc fa5a 	bl	19af4 <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
   1d640:	9502      	str	r5, [sp, #8]
   1d642:	2200      	movs	r2, #0
   1d644:	2300      	movs	r3, #0
   1d646:	e9cd 2300 	strd	r2, r3, [sp]
   1d64a:	2206      	movs	r2, #6
   1d64c:	212d      	movs	r1, #45	; 0x2d
   1d64e:	4620      	mov	r0, r4
   1d650:	f7fc fa50 	bl	19af4 <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
   1d654:	4628      	mov	r0, r5
   1d656:	f7f5 f958 	bl	1290a <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
   1d65a:	2304      	movs	r3, #4
   1d65c:	220a      	movs	r2, #10
   1d65e:	212d      	movs	r1, #45	; 0x2d
   1d660:	4620      	mov	r0, r4
   1d662:	f7fc f9d7 	bl	19a14 <dw1000_read_reg>
}
   1d666:	b005      	add	sp, #20
   1d668:	bd30      	pop	{r4, r5, pc}

0001d66a <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1d66a:	6843      	ldr	r3, [r0, #4]
   1d66c:	428b      	cmp	r3, r1
   1d66e:	d805      	bhi.n	1d67c <hal_flash_check_addr+0x12>
   1d670:	6882      	ldr	r2, [r0, #8]
   1d672:	4413      	add	r3, r2
   1d674:	428b      	cmp	r3, r1
   1d676:	d304      	bcc.n	1d682 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   1d678:	2000      	movs	r0, #0
   1d67a:	4770      	bx	lr
        return SYS_EINVAL;
   1d67c:	f06f 0001 	mvn.w	r0, #1
   1d680:	4770      	bx	lr
   1d682:	f06f 0001 	mvn.w	r0, #1
}
   1d686:	4770      	bx	lr

0001d688 <hal_flash_init>:
{
   1d688:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1d68a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1d68c:	462c      	mov	r4, r5
   1d68e:	e001      	b.n	1d694 <hal_flash_init+0xc>
   1d690:	3401      	adds	r4, #1
   1d692:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1d694:	4620      	mov	r0, r4
   1d696:	f7fb fe23 	bl	192e0 <hal_bsp_flash_dev>
        if (!hf) {
   1d69a:	b138      	cbz	r0, 1d6ac <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1d69c:	6802      	ldr	r2, [r0, #0]
   1d69e:	6952      	ldr	r2, [r2, #20]
   1d6a0:	4790      	blx	r2
   1d6a2:	2800      	cmp	r0, #0
   1d6a4:	d0f4      	beq.n	1d690 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1d6a6:	f06f 0504 	mvn.w	r5, #4
   1d6aa:	e7f1      	b.n	1d690 <hal_flash_init+0x8>
}
   1d6ac:	4628      	mov	r0, r5
   1d6ae:	bd38      	pop	{r3, r4, r5, pc}

0001d6b0 <hal_flash_align>:
{
   1d6b0:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1d6b2:	f7fb fe15 	bl	192e0 <hal_bsp_flash_dev>
    if (!hf) {
   1d6b6:	b108      	cbz	r0, 1d6bc <hal_flash_align+0xc>
    return hf->hf_align;
   1d6b8:	7c00      	ldrb	r0, [r0, #16]
}
   1d6ba:	bd08      	pop	{r3, pc}
        return 1;
   1d6bc:	2001      	movs	r0, #1
   1d6be:	e7fc      	b.n	1d6ba <hal_flash_align+0xa>

0001d6c0 <hal_flash_erased_val>:
{
   1d6c0:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1d6c2:	f7fb fe0d 	bl	192e0 <hal_bsp_flash_dev>
    if (!hf) {
   1d6c6:	b108      	cbz	r0, 1d6cc <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1d6c8:	7d00      	ldrb	r0, [r0, #20]
}
   1d6ca:	bd08      	pop	{r3, pc}
        return 1;
   1d6cc:	2001      	movs	r0, #1
   1d6ce:	e7fc      	b.n	1d6ca <hal_flash_erased_val+0xa>

0001d6d0 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6d4:	460c      	mov	r4, r1
   1d6d6:	4617      	mov	r7, r2
   1d6d8:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1d6da:	f7fb fe01 	bl	192e0 <hal_bsp_flash_dev>
    if (!hf) {
   1d6de:	b1a0      	cbz	r0, 1d70a <hal_flash_read+0x3a>
   1d6e0:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1d6e2:	4621      	mov	r1, r4
   1d6e4:	f7ff ffc1 	bl	1d66a <hal_flash_check_addr>
   1d6e8:	b990      	cbnz	r0, 1d710 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1d6ea:	1961      	adds	r1, r4, r5
   1d6ec:	4630      	mov	r0, r6
   1d6ee:	f7ff ffbc 	bl	1d66a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1d6f2:	b980      	cbnz	r0, 1d716 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1d6f4:	6833      	ldr	r3, [r6, #0]
   1d6f6:	f8d3 8000 	ldr.w	r8, [r3]
   1d6fa:	462b      	mov	r3, r5
   1d6fc:	463a      	mov	r2, r7
   1d6fe:	4621      	mov	r1, r4
   1d700:	4630      	mov	r0, r6
   1d702:	47c0      	blx	r8
    if (rc != 0) {
   1d704:	b950      	cbnz	r0, 1d71c <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   1d706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1d70a:	f06f 0001 	mvn.w	r0, #1
   1d70e:	e7fa      	b.n	1d706 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1d710:	f06f 0001 	mvn.w	r0, #1
   1d714:	e7f7      	b.n	1d706 <hal_flash_read+0x36>
   1d716:	f06f 0001 	mvn.w	r0, #1
   1d71a:	e7f4      	b.n	1d706 <hal_flash_read+0x36>
        return SYS_EIO;
   1d71c:	f06f 0004 	mvn.w	r0, #4
   1d720:	e7f1      	b.n	1d706 <hal_flash_read+0x36>
	...

0001d724 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1d724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d728:	4604      	mov	r4, r0
   1d72a:	460d      	mov	r5, r1
   1d72c:	4690      	mov	r8, r2
   1d72e:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1d730:	f7fb fdd6 	bl	192e0 <hal_bsp_flash_dev>
    if (!hf) {
   1d734:	b1e8      	cbz	r0, 1d772 <hal_flash_write+0x4e>
   1d736:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1d738:	4629      	mov	r1, r5
   1d73a:	f7ff ff96 	bl	1d66a <hal_flash_check_addr>
   1d73e:	b9d8      	cbnz	r0, 1d778 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1d740:	19a9      	adds	r1, r5, r6
   1d742:	4638      	mov	r0, r7
   1d744:	f7ff ff91 	bl	1d66a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1d748:	b9c8      	cbnz	r0, 1d77e <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1d74a:	08e3      	lsrs	r3, r4, #3
   1d74c:	4a10      	ldr	r2, [pc, #64]	; (1d790 <hal_flash_write+0x6c>)
   1d74e:	5cd0      	ldrb	r0, [r2, r3]
   1d750:	f004 0407 	and.w	r4, r4, #7
   1d754:	fa40 f404 	asr.w	r4, r0, r4
   1d758:	f014 0f01 	tst.w	r4, #1
   1d75c:	d112      	bne.n	1d784 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1d75e:	683b      	ldr	r3, [r7, #0]
   1d760:	685c      	ldr	r4, [r3, #4]
   1d762:	4633      	mov	r3, r6
   1d764:	4642      	mov	r2, r8
   1d766:	4629      	mov	r1, r5
   1d768:	4638      	mov	r0, r7
   1d76a:	47a0      	blx	r4
    if (rc != 0) {
   1d76c:	b968      	cbnz	r0, 1d78a <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1d76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1d772:	f06f 0001 	mvn.w	r0, #1
   1d776:	e7fa      	b.n	1d76e <hal_flash_write+0x4a>
        return SYS_EINVAL;
   1d778:	f06f 0001 	mvn.w	r0, #1
   1d77c:	e7f7      	b.n	1d76e <hal_flash_write+0x4a>
   1d77e:	f06f 0001 	mvn.w	r0, #1
   1d782:	e7f4      	b.n	1d76e <hal_flash_write+0x4a>
        return SYS_EACCES;
   1d784:	f06f 0006 	mvn.w	r0, #6
   1d788:	e7f1      	b.n	1d76e <hal_flash_write+0x4a>
        return SYS_EIO;
   1d78a:	f06f 0004 	mvn.w	r0, #4
   1d78e:	e7ee      	b.n	1d76e <hal_flash_write+0x4a>
   1d790:	20004be4 	.word	0x20004be4

0001d794 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1d794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d798:	b082      	sub	sp, #8
   1d79a:	4605      	mov	r5, r0
   1d79c:	460e      	mov	r6, r1
   1d79e:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1d7a0:	f7fb fd9e 	bl	192e0 <hal_bsp_flash_dev>
    if (!hf) {
   1d7a4:	2800      	cmp	r0, #0
   1d7a6:	d049      	beq.n	1d83c <hal_flash_erase+0xa8>
   1d7a8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1d7aa:	4631      	mov	r1, r6
   1d7ac:	f7ff ff5d 	bl	1d66a <hal_flash_check_addr>
   1d7b0:	2800      	cmp	r0, #0
   1d7b2:	d146      	bne.n	1d842 <hal_flash_erase+0xae>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1d7b4:	eb06 0809 	add.w	r8, r6, r9
   1d7b8:	4641      	mov	r1, r8
   1d7ba:	4620      	mov	r0, r4
   1d7bc:	f7ff ff55 	bl	1d66a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1d7c0:	2800      	cmp	r0, #0
   1d7c2:	d141      	bne.n	1d848 <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1d7c4:	08eb      	lsrs	r3, r5, #3
   1d7c6:	4a25      	ldr	r2, [pc, #148]	; (1d85c <hal_flash_erase+0xc8>)
   1d7c8:	5cd7      	ldrb	r7, [r2, r3]
   1d7ca:	f005 0507 	and.w	r5, r5, #7
   1d7ce:	fa47 f505 	asr.w	r5, r7, r5
   1d7d2:	f015 0a01 	ands.w	sl, r5, #1
   1d7d6:	d13a      	bne.n	1d84e <hal_flash_erase+0xba>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1d7d8:	45b0      	cmp	r8, r6
   1d7da:	d93b      	bls.n	1d854 <hal_flash_erase+0xc0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1d7dc:	6823      	ldr	r3, [r4, #0]
   1d7de:	699b      	ldr	r3, [r3, #24]
   1d7e0:	b353      	cbz	r3, 1d838 <hal_flash_erase+0xa4>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1d7e2:	464a      	mov	r2, r9
   1d7e4:	4631      	mov	r1, r6
   1d7e6:	4620      	mov	r0, r4
   1d7e8:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1d7ea:	4650      	mov	r0, sl
   1d7ec:	b002      	add	sp, #8
   1d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   1d7f2:	2300      	movs	r3, #0
   1d7f4:	461a      	mov	r2, r3
   1d7f6:	4619      	mov	r1, r3
   1d7f8:	4618      	mov	r0, r3
   1d7fa:	f7eb fce3 	bl	91c4 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1d7fe:	3501      	adds	r5, #1
   1d800:	68e3      	ldr	r3, [r4, #12]
   1d802:	42ab      	cmp	r3, r5
   1d804:	ddf1      	ble.n	1d7ea <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1d806:	6823      	ldr	r3, [r4, #0]
   1d808:	68df      	ldr	r7, [r3, #12]
   1d80a:	466b      	mov	r3, sp
   1d80c:	aa01      	add	r2, sp, #4
   1d80e:	4629      	mov	r1, r5
   1d810:	4620      	mov	r0, r4
   1d812:	47b8      	blx	r7
            assert(rc == 0);
   1d814:	2800      	cmp	r0, #0
   1d816:	d1ec      	bne.n	1d7f2 <hal_flash_erase+0x5e>
            end_area = start + size;
   1d818:	9901      	ldr	r1, [sp, #4]
   1d81a:	9b00      	ldr	r3, [sp, #0]
   1d81c:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1d81e:	429e      	cmp	r6, r3
   1d820:	d2ed      	bcs.n	1d7fe <hal_flash_erase+0x6a>
   1d822:	4588      	cmp	r8, r1
   1d824:	d9eb      	bls.n	1d7fe <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1d826:	6823      	ldr	r3, [r4, #0]
   1d828:	689b      	ldr	r3, [r3, #8]
   1d82a:	4620      	mov	r0, r4
   1d82c:	4798      	blx	r3
   1d82e:	2800      	cmp	r0, #0
   1d830:	d0e5      	beq.n	1d7fe <hal_flash_erase+0x6a>
                    return SYS_EIO;
   1d832:	f06f 0a04 	mvn.w	sl, #4
   1d836:	e7d8      	b.n	1d7ea <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1d838:	4655      	mov	r5, sl
   1d83a:	e7e1      	b.n	1d800 <hal_flash_erase+0x6c>
        return SYS_EINVAL;
   1d83c:	f06f 0a01 	mvn.w	sl, #1
   1d840:	e7d3      	b.n	1d7ea <hal_flash_erase+0x56>
        return SYS_EINVAL;
   1d842:	f06f 0a01 	mvn.w	sl, #1
   1d846:	e7d0      	b.n	1d7ea <hal_flash_erase+0x56>
   1d848:	f06f 0a01 	mvn.w	sl, #1
   1d84c:	e7cd      	b.n	1d7ea <hal_flash_erase+0x56>
        return SYS_EACCES;
   1d84e:	f06f 0a06 	mvn.w	sl, #6
   1d852:	e7ca      	b.n	1d7ea <hal_flash_erase+0x56>
        return SYS_EINVAL;
   1d854:	f06f 0a01 	mvn.w	sl, #1
   1d858:	e7c7      	b.n	1d7ea <hal_flash_erase+0x56>
   1d85a:	bf00      	nop
   1d85c:	20004be4 	.word	0x20004be4

0001d860 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d862:	4604      	mov	r4, r0
   1d864:	4616      	mov	r6, r2
   1d866:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1d868:	6807      	ldr	r7, [r0, #0]
   1d86a:	683f      	ldr	r7, [r7, #0]
   1d86c:	47b8      	blx	r7
    if (rc != 0) {
   1d86e:	b968      	cbnz	r0, 1d88c <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1d870:	2100      	movs	r1, #0
   1d872:	e000      	b.n	1d876 <hal_flash_is_erased+0x16>
   1d874:	3101      	adds	r1, #1
   1d876:	42a9      	cmp	r1, r5
   1d878:	d206      	bcs.n	1d888 <hal_flash_is_erased+0x28>
        if (buf[i] != hf->hf_erased_val) {
   1d87a:	f816 e001 	ldrb.w	lr, [r6, r1]
   1d87e:	f894 c014 	ldrb.w	ip, [r4, #20]
   1d882:	45e6      	cmp	lr, ip
   1d884:	d0f6      	beq.n	1d874 <hal_flash_is_erased+0x14>
   1d886:	e000      	b.n	1d88a <hal_flash_is_erased+0x2a>
            return 0;
        }
    }
    return 1;
   1d888:	2001      	movs	r0, #1
}
   1d88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1d88c:	f06f 0004 	mvn.w	r0, #4
   1d890:	e7fb      	b.n	1d88a <hal_flash_is_erased+0x2a>

0001d892 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1d892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d896:	460c      	mov	r4, r1
   1d898:	4690      	mov	r8, r2
   1d89a:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1d89c:	f7fb fd20 	bl	192e0 <hal_bsp_flash_dev>
    if (!hf) {
   1d8a0:	b1f8      	cbz	r0, 1d8e2 <hal_flash_isempty+0x50>
   1d8a2:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1d8a4:	4621      	mov	r1, r4
   1d8a6:	f7ff fee0 	bl	1d66a <hal_flash_check_addr>
   1d8aa:	b9e8      	cbnz	r0, 1d8e8 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1d8ac:	1961      	adds	r1, r4, r5
   1d8ae:	4630      	mov	r0, r6
   1d8b0:	f7ff fedb 	bl	1d66a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1d8b4:	b9d8      	cbnz	r0, 1d8ee <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1d8b6:	6833      	ldr	r3, [r6, #0]
   1d8b8:	691f      	ldr	r7, [r3, #16]
   1d8ba:	b15f      	cbz	r7, 1d8d4 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1d8bc:	462b      	mov	r3, r5
   1d8be:	4642      	mov	r2, r8
   1d8c0:	4621      	mov	r1, r4
   1d8c2:	4630      	mov	r0, r6
   1d8c4:	47b8      	blx	r7
        if (rc < 0) {
   1d8c6:	2800      	cmp	r0, #0
   1d8c8:	db01      	blt.n	1d8ce <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1d8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   1d8ce:	f06f 0004 	mvn.w	r0, #4
   1d8d2:	e7fa      	b.n	1d8ca <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1d8d4:	462b      	mov	r3, r5
   1d8d6:	4642      	mov	r2, r8
   1d8d8:	4621      	mov	r1, r4
   1d8da:	4630      	mov	r0, r6
   1d8dc:	f7ff ffc0 	bl	1d860 <hal_flash_is_erased>
   1d8e0:	e7f3      	b.n	1d8ca <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1d8e2:	f06f 0001 	mvn.w	r0, #1
   1d8e6:	e7f0      	b.n	1d8ca <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1d8e8:	f06f 0001 	mvn.w	r0, #1
   1d8ec:	e7ed      	b.n	1d8ca <hal_flash_isempty+0x38>
   1d8ee:	f06f 0001 	mvn.w	r0, #1
   1d8f2:	e7ea      	b.n	1d8ca <hal_flash_isempty+0x38>

0001d8f4 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1d8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8f6:	b085      	sub	sp, #20
   1d8f8:	4607      	mov	r7, r0
   1d8fa:	460e      	mov	r6, r1
   1d8fc:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1d8fe:	2400      	movs	r4, #0
   1d900:	e007      	b.n	1d912 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1d902:	466a      	mov	r2, sp
   1d904:	19a1      	adds	r1, r4, r6
   1d906:	4638      	mov	r0, r7
   1d908:	f7ff ffc3 	bl	1d892 <hal_flash_isempty>
        if (empty != 1) {
   1d90c:	2801      	cmp	r0, #1
   1d90e:	d108      	bne.n	1d922 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1d910:	3410      	adds	r4, #16
   1d912:	42ac      	cmp	r4, r5
   1d914:	d204      	bcs.n	1d920 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   1d916:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   1d918:	2b0f      	cmp	r3, #15
   1d91a:	d9f2      	bls.n	1d902 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   1d91c:	2310      	movs	r3, #16
   1d91e:	e7f0      	b.n	1d902 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   1d920:	2001      	movs	r0, #1
}
   1d922:	b005      	add	sp, #20
   1d924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001d928 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1d928:	2300      	movs	r3, #0
   1d92a:	4a07      	ldr	r2, [pc, #28]	; (1d948 <nrf52k_flash_wait_ready+0x20>)
   1d92c:	4293      	cmp	r3, r2
   1d92e:	dc06      	bgt.n	1d93e <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1d930:	4a06      	ldr	r2, [pc, #24]	; (1d94c <nrf52k_flash_wait_ready+0x24>)
   1d932:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1d936:	2a01      	cmp	r2, #1
   1d938:	d004      	beq.n	1d944 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1d93a:	3301      	adds	r3, #1
   1d93c:	e7f5      	b.n	1d92a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1d93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d942:	4770      	bx	lr
            return 0;
   1d944:	2000      	movs	r0, #0
}
   1d946:	4770      	bx	lr
   1d948:	0001869f 	.word	0x0001869f
   1d94c:	4001e000 	.word	0x4001e000

0001d950 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1d950:	b538      	push	{r3, r4, r5, lr}
   1d952:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1d954:	f7ff ffe8 	bl	1d928 <nrf52k_flash_wait_ready>
   1d958:	b9e0      	cbnz	r0, 1d994 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d95a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d95e:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1d960:	4b0e      	ldr	r3, [pc, #56]	; (1d99c <nrf52k_flash_erase_sector+0x4c>)
   1d962:	2202      	movs	r2, #2
   1d964:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1d968:	f7ff ffde 	bl	1d928 <nrf52k_flash_wait_ready>
   1d96c:	b140      	cbz	r0, 1d980 <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   1d96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1d972:	4b0a      	ldr	r3, [pc, #40]	; (1d99c <nrf52k_flash_erase_sector+0x4c>)
   1d974:	2200      	movs	r2, #0
   1d976:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1d97a:	b905      	cbnz	r5, 1d97e <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1d97c:	b662      	cpsie	i
    return rc;
}
   1d97e:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1d980:	4b06      	ldr	r3, [pc, #24]	; (1d99c <nrf52k_flash_erase_sector+0x4c>)
   1d982:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1d986:	f7ff ffcf 	bl	1d928 <nrf52k_flash_wait_ready>
   1d98a:	2800      	cmp	r0, #0
   1d98c:	d0f1      	beq.n	1d972 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1d98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d992:	e7ee      	b.n	1d972 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1d994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d998:	e7f1      	b.n	1d97e <nrf52k_flash_erase_sector+0x2e>
   1d99a:	bf00      	nop
   1d99c:	4001e000 	.word	0x4001e000

0001d9a0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1d9a0:	2000      	movs	r0, #0
   1d9a2:	4770      	bx	lr

0001d9a4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1d9a4:	297f      	cmp	r1, #127	; 0x7f
   1d9a6:	dc06      	bgt.n	1d9b6 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1d9a8:	0309      	lsls	r1, r1, #12
   1d9aa:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1d9ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1d9b0:	601a      	str	r2, [r3, #0]
}
   1d9b2:	2000      	movs	r0, #0
   1d9b4:	4770      	bx	lr
{
   1d9b6:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1d9b8:	2300      	movs	r3, #0
   1d9ba:	461a      	mov	r2, r3
   1d9bc:	4619      	mov	r1, r3
   1d9be:	4618      	mov	r0, r3
   1d9c0:	f7eb fc00 	bl	91c4 <__assert_func>

0001d9c4 <nrf52k_flash_write>:
{
   1d9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d9c8:	b082      	sub	sp, #8
   1d9ca:	460d      	mov	r5, r1
   1d9cc:	4616      	mov	r6, r2
   1d9ce:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1d9d0:	f7ff ffaa 	bl	1d928 <nrf52k_flash_wait_ready>
   1d9d4:	2800      	cmp	r0, #0
   1d9d6:	d154      	bne.n	1da82 <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d9d8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d9dc:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1d9de:	4b2a      	ldr	r3, [pc, #168]	; (1da88 <nrf52k_flash_write+0xc4>)
   1d9e0:	2201      	movs	r2, #1
   1d9e2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1d9e6:	f015 0803 	ands.w	r8, r5, #3
   1d9ea:	d10a      	bne.n	1da02 <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   1d9ec:	2c03      	cmp	r4, #3
   1d9ee:	d924      	bls.n	1da3a <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   1d9f0:	f7ff ff9a 	bl	1d928 <nrf52k_flash_wait_ready>
   1d9f4:	bbb8      	cbnz	r0, 1da66 <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   1d9f6:	f856 3b04 	ldr.w	r3, [r6], #4
   1d9fa:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1d9fe:	3c04      	subs	r4, #4
   1da00:	e7f4      	b.n	1d9ec <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1da02:	f7ff ff91 	bl	1d928 <nrf52k_flash_wait_ready>
   1da06:	bb58      	cbnz	r0, 1da60 <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   1da08:	f025 0a03 	bic.w	sl, r5, #3
   1da0c:	f8da 3000 	ldr.w	r3, [sl]
   1da10:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1da12:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1da16:	45a1      	cmp	r9, r4
   1da18:	d900      	bls.n	1da1c <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   1da1a:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1da1c:	464a      	mov	r2, r9
   1da1e:	4631      	mov	r1, r6
   1da20:	ab01      	add	r3, sp, #4
   1da22:	eb03 0008 	add.w	r0, r3, r8
   1da26:	f7f2 fe2b 	bl	10680 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1da2a:	9b01      	ldr	r3, [sp, #4]
   1da2c:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1da30:	444d      	add	r5, r9
        num_bytes -= cnt;
   1da32:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1da36:	444e      	add	r6, r9
   1da38:	e7d8      	b.n	1d9ec <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1da3a:	b15c      	cbz	r4, 1da54 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   1da3c:	682b      	ldr	r3, [r5, #0]
   1da3e:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   1da40:	4622      	mov	r2, r4
   1da42:	4631      	mov	r1, r6
   1da44:	a801      	add	r0, sp, #4
   1da46:	f7f2 fe1b 	bl	10680 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1da4a:	f7ff ff6d 	bl	1d928 <nrf52k_flash_wait_ready>
   1da4e:	b9a8      	cbnz	r0, 1da7c <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   1da50:	9b01      	ldr	r3, [sp, #4]
   1da52:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1da54:	f7ff ff68 	bl	1d928 <nrf52k_flash_wait_ready>
   1da58:	b138      	cbz	r0, 1da6a <nrf52k_flash_write+0xa6>
        rc = -1;
   1da5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da5e:	e004      	b.n	1da6a <nrf52k_flash_write+0xa6>
    int rc = -1;
   1da60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da64:	e001      	b.n	1da6a <nrf52k_flash_write+0xa6>
   1da66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1da6a:	4b07      	ldr	r3, [pc, #28]	; (1da88 <nrf52k_flash_write+0xc4>)
   1da6c:	2200      	movs	r2, #0
   1da6e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1da72:	b907      	cbnz	r7, 1da76 <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   1da74:	b662      	cpsie	i
}
   1da76:	b002      	add	sp, #8
   1da78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1da7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da80:	e7f3      	b.n	1da6a <nrf52k_flash_write+0xa6>
        return -1;
   1da82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da86:	e7f6      	b.n	1da76 <nrf52k_flash_write+0xb2>
   1da88:	4001e000 	.word	0x4001e000

0001da8c <nrf52k_flash_read>:
{
   1da8c:	b508      	push	{r3, lr}
   1da8e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1da90:	461a      	mov	r2, r3
   1da92:	f7f2 fdf5 	bl	10680 <memcpy>
}
   1da96:	2000      	movs	r0, #0
   1da98:	bd08      	pop	{r3, pc}
	...

0001da9c <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1da9c:	b570      	push	{r4, r5, r6, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1da9e:	f7ec fdeb 	bl	a678 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1daa2:	4b31      	ldr	r3, [pc, #196]	; (1db68 <nrf52_timer_handler+0xcc>)
   1daa4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1daa8:	4b30      	ldr	r3, [pc, #192]	; (1db6c <nrf52_timer_handler+0xd0>)
   1daaa:	689c      	ldr	r4, [r3, #8]
    assert(x <= 0xffffff);
   1daac:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1dab0:	d227      	bcs.n	1db02 <nrf52_timer_handler+0x66>
   1dab2:	4605      	mov	r5, r0
    assert(y <= 0xffffff);
   1dab4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   1dab8:	d229      	bcs.n	1db0e <nrf52_timer_handler+0x72>
    result = x - y;
   1daba:	1b12      	subs	r2, r2, r4
    if (result & 0x800000) {
   1dabc:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1dac0:	d02b      	beq.n	1db1a <nrf52_timer_handler+0x7e>
        return (result | 0xff800000);
   1dac2:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1dac6:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1daca:	4e28      	ldr	r6, [pc, #160]	; (1db6c <nrf52_timer_handler+0xd0>)
   1dacc:	6834      	ldr	r4, [r6, #0]
   1dace:	fb92 f4f4 	sdiv	r4, r2, r4
    os_time_advance(ticks);
   1dad2:	4620      	mov	r0, r4
   1dad4:	f7ec fcb0 	bl	a438 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1dad8:	4b23      	ldr	r3, [pc, #140]	; (1db68 <nrf52_timer_handler+0xcc>)
   1dada:	2200      	movs	r2, #0
   1dadc:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1dae0:	68b3      	ldr	r3, [r6, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1dae2:	6831      	ldr	r1, [r6, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1dae4:	fb04 3201 	mla	r2, r4, r1, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1dae8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1daec:	60b2      	str	r2, [r6, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1daee:	1854      	adds	r4, r2, r1
    OS_ASSERT_CRITICAL();
   1daf0:	f7ec fdcb 	bl	a68a <os_arch_in_critical>
   1daf4:	bb08      	cbnz	r0, 1db3a <nrf52_timer_handler+0x9e>
   1daf6:	2300      	movs	r3, #0
   1daf8:	461a      	mov	r2, r3
   1dafa:	4619      	mov	r1, r3
   1dafc:	4618      	mov	r0, r3
   1dafe:	f7eb fb61 	bl	91c4 <__assert_func>
    assert(x <= 0xffffff);
   1db02:	2300      	movs	r3, #0
   1db04:	461a      	mov	r2, r3
   1db06:	4619      	mov	r1, r3
   1db08:	4618      	mov	r0, r3
   1db0a:	f7eb fb5b 	bl	91c4 <__assert_func>
    assert(y <= 0xffffff);
   1db0e:	2300      	movs	r3, #0
   1db10:	461a      	mov	r2, r3
   1db12:	4619      	mov	r1, r3
   1db14:	4618      	mov	r0, r3
   1db16:	f7eb fb55 	bl	91c4 <__assert_func>
        return (result & 0x007fffff);
   1db1a:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1db1e:	e7d4      	b.n	1daca <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   1db20:	2300      	movs	r3, #0
   1db22:	461a      	mov	r2, r3
   1db24:	4619      	mov	r1, r3
   1db26:	4618      	mov	r0, r3
   1db28:	f7eb fb4c 	bl	91c4 <__assert_func>
        return (result & 0x007fffff);
   1db2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   1db30:	2b02      	cmp	r3, #2
   1db32:	dc15      	bgt.n	1db60 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1db34:	4b0d      	ldr	r3, [pc, #52]	; (1db6c <nrf52_timer_handler+0xd0>)
   1db36:	681c      	ldr	r4, [r3, #0]
   1db38:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1db3a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1db3e:	4b0a      	ldr	r3, [pc, #40]	; (1db68 <nrf52_timer_handler+0xcc>)
   1db40:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1db44:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1db48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1db4c:	d2e8      	bcs.n	1db20 <nrf52_timer_handler+0x84>
    result = x - y;
   1db4e:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1db50:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1db54:	d0ea      	beq.n	1db2c <nrf52_timer_handler+0x90>
        return (result | 0xff800000);
   1db56:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1db5a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1db5e:	e7e7      	b.n	1db30 <nrf52_timer_handler+0x94>

    OS_EXIT_CRITICAL(sr);
   1db60:	4628      	mov	r0, r5
   1db62:	f7ec fd8f 	bl	a684 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1db66:	bd70      	pop	{r4, r5, r6, pc}
   1db68:	40011000 	.word	0x40011000
   1db6c:	20004be8 	.word	0x20004be8

0001db70 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1db70:	b538      	push	{r3, r4, r5, lr}
   1db72:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1db74:	f7ec fd89 	bl	a68a <os_arch_in_critical>
   1db78:	b1a0      	cbz	r0, 1dba4 <os_tick_idle+0x34>

    if (ticks > 0) {
   1db7a:	2d00      	cmp	r5, #0
   1db7c:	d038      	beq.n	1dbf0 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1db7e:	4b20      	ldr	r3, [pc, #128]	; (1dc00 <os_tick_idle+0x90>)
   1db80:	685b      	ldr	r3, [r3, #4]
   1db82:	42ab      	cmp	r3, r5
   1db84:	d200      	bcs.n	1db88 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1db86:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1db88:	4b1d      	ldr	r3, [pc, #116]	; (1dc00 <os_tick_idle+0x90>)
   1db8a:	689a      	ldr	r2, [r3, #8]
   1db8c:	681c      	ldr	r4, [r3, #0]
   1db8e:	fb05 2404 	mla	r4, r5, r4, r2
    OS_ASSERT_CRITICAL();
   1db92:	f7ec fd7a 	bl	a68a <os_arch_in_critical>
   1db96:	b9c0      	cbnz	r0, 1dbca <os_tick_idle+0x5a>
   1db98:	2300      	movs	r3, #0
   1db9a:	461a      	mov	r2, r3
   1db9c:	4619      	mov	r1, r3
   1db9e:	4618      	mov	r0, r3
   1dba0:	f7eb fb10 	bl	91c4 <__assert_func>
    OS_ASSERT_CRITICAL();
   1dba4:	2300      	movs	r3, #0
   1dba6:	461a      	mov	r2, r3
   1dba8:	4619      	mov	r1, r3
   1dbaa:	4618      	mov	r0, r3
   1dbac:	f7eb fb0a 	bl	91c4 <__assert_func>
    assert(y <= 0xffffff);
   1dbb0:	2300      	movs	r3, #0
   1dbb2:	461a      	mov	r2, r3
   1dbb4:	4619      	mov	r1, r3
   1dbb6:	4618      	mov	r0, r3
   1dbb8:	f7eb fb04 	bl	91c4 <__assert_func>
        return (result & 0x007fffff);
   1dbbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   1dbc0:	2b02      	cmp	r3, #2
   1dbc2:	dc15      	bgt.n	1dbf0 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1dbc4:	4b0e      	ldr	r3, [pc, #56]	; (1dc00 <os_tick_idle+0x90>)
   1dbc6:	681c      	ldr	r4, [r3, #0]
   1dbc8:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1dbca:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1dbce:	4b0d      	ldr	r3, [pc, #52]	; (1dc04 <os_tick_idle+0x94>)
   1dbd0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1dbd4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1dbd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1dbdc:	d2e8      	bcs.n	1dbb0 <os_tick_idle+0x40>
    result = x - y;
   1dbde:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1dbe0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1dbe4:	d0ea      	beq.n	1dbbc <os_tick_idle+0x4c>
        return (result | 0xff800000);
   1dbe6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1dbea:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1dbee:	e7e7      	b.n	1dbc0 <os_tick_idle+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
   1dbf0:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1dbf4:	bf30      	wfi

    if (ticks > 0) {
   1dbf6:	b905      	cbnz	r5, 1dbfa <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1dbf8:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1dbfa:	f7ff ff4f 	bl	1da9c <nrf52_timer_handler>
}
   1dbfe:	e7fb      	b.n	1dbf8 <os_tick_idle+0x88>
   1dc00:	20004be8 	.word	0x20004be8
   1dc04:	40011000 	.word	0x40011000

0001dc08 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1dc08:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1dc0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1dc0e:	fbb3 f3f0 	udiv	r3, r3, r0
   1dc12:	fb00 f303 	mul.w	r3, r0, r3
   1dc16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1dc1a:	d136      	bne.n	1dc8a <os_tick_init+0x82>
   1dc1c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1dc1e:	4d1e      	ldr	r5, [pc, #120]	; (1dc98 <os_tick_init+0x90>)
   1dc20:	2600      	movs	r6, #0
   1dc22:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1dc24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1dc28:	fbb3 f0f0 	udiv	r0, r3, r0
   1dc2c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1dc2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1dc32:	fbb3 f0f0 	udiv	r0, r3, r0
   1dc36:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1dc38:	f7ec fd1e 	bl	a678 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1dc3c:	0164      	lsls	r4, r4, #5
   1dc3e:	b2e4      	uxtb	r4, r4
   1dc40:	4b16      	ldr	r3, [pc, #88]	; (1dc9c <os_tick_init+0x94>)
   1dc42:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1dc46:	4a16      	ldr	r2, [pc, #88]	; (1dca0 <os_tick_init+0x98>)
   1dc48:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1dc4a:	4916      	ldr	r1, [pc, #88]	; (1dca4 <os_tick_init+0x9c>)
   1dc4c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dc50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1dc54:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1dc56:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1dc5a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1dc5e:	2201      	movs	r2, #1
   1dc60:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1dc62:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1dc64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc68:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1dc6c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1dc70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1dc74:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1dc78:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1dc7c:	6829      	ldr	r1, [r5, #0]
   1dc7e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1dc82:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1dc84:	f7ec fcfe 	bl	a684 <os_arch_restore_sr>
}
   1dc88:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1dc8a:	2300      	movs	r3, #0
   1dc8c:	461a      	mov	r2, r3
   1dc8e:	4619      	mov	r1, r3
   1dc90:	4618      	mov	r0, r3
   1dc92:	f7eb fa97 	bl	91c4 <__assert_func>
   1dc96:	bf00      	nop
   1dc98:	20004be8 	.word	0x20004be8
   1dc9c:	e000e100 	.word	0xe000e100
   1dca0:	e000ed00 	.word	0xe000ed00
   1dca4:	0001da9d 	.word	0x0001da9d

0001dca8 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1dca8:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1dcaa:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1dcac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1dcb0:	b333      	cbz	r3, 1dd00 <nrf52_irqm_handler+0x58>
   1dcb2:	4604      	mov	r4, r0
        spim->EVENTS_END = 0;
   1dcb4:	2300      	movs	r3, #0
   1dcb6:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1dcba:	7843      	ldrb	r3, [r0, #1]
   1dcbc:	b303      	cbz	r3, 1dd00 <nrf52_irqm_handler+0x58>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1dcbe:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1dcc2:	88c3      	ldrh	r3, [r0, #6]
   1dcc4:	fa13 f382 	uxtah	r3, r3, r2
   1dcc8:	b29b      	uxth	r3, r3
   1dcca:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1dccc:	8881      	ldrh	r1, [r0, #4]
   1dcce:	428b      	cmp	r3, r1
   1dcd0:	d217      	bcs.n	1dd02 <nrf52_irqm_handler+0x5a>
            spi->nhs_txbuf += xfr_bytes;
   1dcd2:	b292      	uxth	r2, r2
   1dcd4:	6980      	ldr	r0, [r0, #24]
   1dcd6:	4410      	add	r0, r2
   1dcd8:	61a0      	str	r0, [r4, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1dcda:	1ac9      	subs	r1, r1, r3
   1dcdc:	b289      	uxth	r1, r1
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1dcde:	29ff      	cmp	r1, #255	; 0xff
   1dce0:	bf28      	it	cs
   1dce2:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1dce4:	f8c5 0544 	str.w	r0, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1dce8:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1dcec:	69e3      	ldr	r3, [r4, #28]
   1dcee:	b12b      	cbz	r3, 1dcfc <nrf52_irqm_handler+0x54>
                spi->nhs_rxbuf += xfr_bytes;
   1dcf0:	441a      	add	r2, r3
   1dcf2:	61e2      	str	r2, [r4, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1dcf4:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1dcf8:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1dcfc:	2301      	movs	r3, #1
   1dcfe:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1dd00:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
   1dd02:	6a03      	ldr	r3, [r0, #32]
   1dd04:	b10b      	cbz	r3, 1dd0a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1dd06:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1dd08:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1dd0a:	2300      	movs	r3, #0
   1dd0c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1dd0e:	2340      	movs	r3, #64	; 0x40
   1dd10:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1dd14:	e7f4      	b.n	1dd00 <nrf52_irqm_handler+0x58>
	...

0001dd18 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1dd18:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1dd1a:	4b04      	ldr	r3, [pc, #16]	; (1dd2c <nrf52_spi0_irq_handler+0x14>)
   1dd1c:	781b      	ldrb	r3, [r3, #0]
   1dd1e:	b103      	cbz	r3, 1dd22 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1dd20:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1dd22:	4802      	ldr	r0, [pc, #8]	; (1dd2c <nrf52_spi0_irq_handler+0x14>)
   1dd24:	f7ff ffc0 	bl	1dca8 <nrf52_irqm_handler>
}
   1dd28:	e7fa      	b.n	1dd20 <nrf52_spi0_irq_handler+0x8>
   1dd2a:	bf00      	nop
   1dd2c:	20004bf4 	.word	0x20004bf4

0001dd30 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1dd30:	2301      	movs	r3, #1
   1dd32:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1dd34:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1dd38:	2b00      	cmp	r3, #0
   1dd3a:	d0fb      	beq.n	1dd34 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1dd3c:	2300      	movs	r3, #0
   1dd3e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1dd42:	4770      	bx	lr

0001dd44 <hal_spi_config_slave>:
{
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1dd44:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1dd46:	780b      	ldrb	r3, [r1, #0]
   1dd48:	2b03      	cmp	r3, #3
   1dd4a:	d815      	bhi.n	1dd78 <hal_spi_config_slave+0x34>
   1dd4c:	e8df f003 	tbb	[pc, r3]
   1dd50:	110e1702 	.word	0x110e1702
   1dd54:	2300      	movs	r3, #0
   1dd56:	4618      	mov	r0, r3
            nrf_config = 0;
            rc = EINVAL;
            break;
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1dd58:	f891 c001 	ldrb.w	ip, [r1, #1]
   1dd5c:	f1bc 0f01 	cmp.w	ip, #1
   1dd60:	d010      	beq.n	1dd84 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1dd62:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1dd66:	788b      	ldrb	r3, [r1, #2]
   1dd68:	b97b      	cbnz	r3, 1dd8a <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1dd6a:	4770      	bx	lr
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1dd6c:	2304      	movs	r3, #4
    rc = 0;
   1dd6e:	2000      	movs	r0, #0
            break;
   1dd70:	e7f2      	b.n	1dd58 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1dd72:	2306      	movs	r3, #6
    rc = 0;
   1dd74:	2000      	movs	r0, #0
            break;
   1dd76:	e7ef      	b.n	1dd58 <hal_spi_config_slave+0x14>
            nrf_config = 0;
   1dd78:	2300      	movs	r3, #0
            rc = EINVAL;
   1dd7a:	2016      	movs	r0, #22
            break;
   1dd7c:	e7ec      	b.n	1dd58 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1dd7e:	2302      	movs	r3, #2
    rc = 0;
   1dd80:	2000      	movs	r0, #0
   1dd82:	e7e9      	b.n	1dd58 <hal_spi_config_slave+0x14>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1dd84:	f043 0301 	orr.w	r3, r3, #1
   1dd88:	e7eb      	b.n	1dd62 <hal_spi_config_slave+0x1e>
            rc = EINVAL;
   1dd8a:	2016      	movs	r0, #22
    return rc;
   1dd8c:	e7ed      	b.n	1dd6a <hal_spi_config_slave+0x26>
	...

0001dd90 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1dd90:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1dd92:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1dd94:	2401      	movs	r4, #1
   1dd96:	409c      	lsls	r4, r3
   1dd98:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   1dd9c:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1dda0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1dda4:	2403      	movs	r4, #3
   1dda6:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1ddaa:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1ddac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ddb0:	2400      	movs	r4, #0
   1ddb2:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1ddb6:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1ddb8:	780c      	ldrb	r4, [r1, #0]
   1ddba:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1ddbe:	784c      	ldrb	r4, [r1, #1]
   1ddc0:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1ddc4:	7889      	ldrb	r1, [r1, #2]
   1ddc6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ddca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ddce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1ddd2:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ddd6:	491a      	ldr	r1, [pc, #104]	; (1de40 <hal_spi_init_master+0xb0>)
   1ddd8:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ddda:	3310      	adds	r3, #16
   1dddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1dde0:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1dde4:	2b00      	cmp	r3, #0
   1dde6:	db23      	blt.n	1de30 <hal_spi_init_master+0xa0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1dde8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1ddec:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1ddf0:	22e0      	movs	r2, #224	; 0xe0
   1ddf2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1ddf6:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1ddfa:	2b00      	cmp	r3, #0
   1ddfc:	db08      	blt.n	1de10 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ddfe:	f003 011f 	and.w	r1, r3, #31
   1de02:	095b      	lsrs	r3, r3, #5
   1de04:	2201      	movs	r2, #1
   1de06:	408a      	lsls	r2, r1
   1de08:	3360      	adds	r3, #96	; 0x60
   1de0a:	490e      	ldr	r1, [pc, #56]	; (1de44 <hal_spi_init_master+0xb4>)
   1de0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1de10:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1de14:	2b00      	cmp	r3, #0
   1de16:	db07      	blt.n	1de28 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1de18:	f003 011f 	and.w	r1, r3, #31
   1de1c:	095b      	lsrs	r3, r3, #5
   1de1e:	2201      	movs	r2, #1
   1de20:	408a      	lsls	r2, r1
   1de22:	4908      	ldr	r1, [pc, #32]	; (1de44 <hal_spi_init_master+0xb4>)
   1de24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1de28:	2000      	movs	r0, #0
   1de2a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1de2e:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1de30:	f003 030f 	and.w	r3, r3, #15
   1de34:	4a04      	ldr	r2, [pc, #16]	; (1de48 <hal_spi_init_master+0xb8>)
   1de36:	441a      	add	r2, r3
   1de38:	23e0      	movs	r3, #224	; 0xe0
   1de3a:	7613      	strb	r3, [r2, #24]
   1de3c:	e7db      	b.n	1ddf6 <hal_spi_init_master+0x66>
   1de3e:	bf00      	nop
   1de40:	e000ed00 	.word	0xe000ed00
   1de44:	e000e100 	.word	0xe000e100
   1de48:	e000ecfc 	.word	0xe000ecfc

0001de4c <hal_spi_config_master>:
{
   1de4c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1de4e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1de50:	680c      	ldr	r4, [r1, #0]
   1de52:	684b      	ldr	r3, [r1, #4]
   1de54:	6084      	str	r4, [r0, #8]
   1de56:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1de58:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1de5c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1de60:	7808      	ldrb	r0, [r1, #0]
   1de62:	2801      	cmp	r0, #1
   1de64:	d916      	bls.n	1de94 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1de66:	2001      	movs	r0, #1
   1de68:	4098      	lsls	r0, r3
   1de6a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1de6e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1de72:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1de76:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1de7a:	2403      	movs	r4, #3
   1de7c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1de80:	788b      	ldrb	r3, [r1, #2]
   1de82:	b973      	cbnz	r3, 1dea2 <hal_spi_config_master+0x56>
    rc = 0;
   1de84:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1de86:	780b      	ldrb	r3, [r1, #0]
   1de88:	2b03      	cmp	r3, #3
   1de8a:	d825      	bhi.n	1ded8 <hal_spi_config_master+0x8c>
   1de8c:	e8df f003 	tbb	[pc, r3]
   1de90:	2220270b 	.word	0x2220270b
        port->OUTCLR = (1UL << pin);
   1de94:	2001      	movs	r0, #1
   1de96:	4098      	lsls	r0, r3
   1de98:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1de9c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1dea0:	e7e7      	b.n	1de72 <hal_spi_config_master+0x26>
            rc = EINVAL;
   1dea2:	2016      	movs	r0, #22
   1dea4:	e7ef      	b.n	1de86 <hal_spi_config_master+0x3a>
    switch (settings->data_mode) {
   1dea6:	2300      	movs	r3, #0
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1dea8:	f891 c001 	ldrb.w	ip, [r1, #1]
   1deac:	f1bc 0f01 	cmp.w	ip, #1
   1deb0:	d017      	beq.n	1dee2 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1deb2:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1deb6:	684b      	ldr	r3, [r1, #4]
   1deb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1debc:	d02c      	beq.n	1df18 <hal_spi_config_master+0xcc>
   1debe:	d81c      	bhi.n	1defa <hal_spi_config_master+0xae>
   1dec0:	2bfa      	cmp	r3, #250	; 0xfa
   1dec2:	d02c      	beq.n	1df1e <hal_spi_config_master+0xd2>
   1dec4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1dec8:	d10e      	bne.n	1dee8 <hal_spi_config_master+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1deca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1dece:	e00f      	b.n	1def0 <hal_spi_config_master+0xa4>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ded0:	2304      	movs	r3, #4
            break;
   1ded2:	e7e9      	b.n	1dea8 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ded4:	2306      	movs	r3, #6
            break;
   1ded6:	e7e7      	b.n	1dea8 <hal_spi_config_master+0x5c>
            nrf_config = 0;
   1ded8:	2300      	movs	r3, #0
            rc = EINVAL;
   1deda:	2016      	movs	r0, #22
            break;
   1dedc:	e7e4      	b.n	1dea8 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1dede:	2302      	movs	r3, #2
   1dee0:	e7e2      	b.n	1dea8 <hal_spi_config_master+0x5c>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1dee2:	f043 0301 	orr.w	r3, r3, #1
   1dee6:	e7e4      	b.n	1deb2 <hal_spi_config_master+0x66>
    switch (settings->baudrate) {
   1dee8:	2b7d      	cmp	r3, #125	; 0x7d
   1deea:	d11b      	bne.n	1df24 <hal_spi_config_master+0xd8>
   1deec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1def0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1def4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1def8:	4770      	bx	lr
    switch (settings->baudrate) {
   1defa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1defe:	d014      	beq.n	1df2a <hal_spi_config_master+0xde>
   1df00:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1df04:	d102      	bne.n	1df0c <hal_spi_config_master+0xc0>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1df06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1df0a:	e7f1      	b.n	1def0 <hal_spi_config_master+0xa4>
    switch (settings->baudrate) {
   1df0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1df10:	d10e      	bne.n	1df30 <hal_spi_config_master+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1df12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1df16:	e7eb      	b.n	1def0 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1df18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1df1c:	e7e8      	b.n	1def0 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1df1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1df22:	e7e5      	b.n	1def0 <hal_spi_config_master+0xa4>
            frequency = 0;
   1df24:	2300      	movs	r3, #0
            rc = EINVAL;
   1df26:	2016      	movs	r0, #22
   1df28:	e7e2      	b.n	1def0 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1df2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1df2e:	e7df      	b.n	1def0 <hal_spi_config_master+0xa4>
            frequency = 0;
   1df30:	2300      	movs	r3, #0
            rc = EINVAL;
   1df32:	2016      	movs	r0, #22
   1df34:	e7dc      	b.n	1def0 <hal_spi_config_master+0xa4>
	...

0001df38 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1df38:	2803      	cmp	r0, #3
   1df3a:	dc10      	bgt.n	1df5e <hal_spi_config+0x26>
{
   1df3c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1df3e:	4b0b      	ldr	r3, [pc, #44]	; (1df6c <hal_spi_config+0x34>)
   1df40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1df44:	b168      	cbz	r0, 1df62 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1df46:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1df48:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1df4c:	b95b      	cbnz	r3, 1df66 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1df4e:	7803      	ldrb	r3, [r0, #0]
   1df50:	b913      	cbnz	r3, 1df58 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
   1df52:	f7ff ff7b 	bl	1de4c <hal_spi_config_master>
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
   1df56:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_slave(spi, settings);
   1df58:	f7ff fef4 	bl	1dd44 <hal_spi_config_slave>
   1df5c:	e7fb      	b.n	1df56 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1df5e:	2016      	movs	r0, #22
}
   1df60:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1df62:	2016      	movs	r0, #22
   1df64:	e7f7      	b.n	1df56 <hal_spi_config+0x1e>
        return -1;
   1df66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df6a:	e7f4      	b.n	1df56 <hal_spi_config+0x1e>
   1df6c:	0002740c 	.word	0x0002740c

0001df70 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1df70:	2803      	cmp	r0, #3
   1df72:	dc1b      	bgt.n	1dfac <hal_spi_enable+0x3c>
   1df74:	4b10      	ldr	r3, [pc, #64]	; (1dfb8 <hal_spi_enable+0x48>)
   1df76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1df7a:	b1cb      	cbz	r3, 1dfb0 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1df7c:	781a      	ldrb	r2, [r3, #0]
   1df7e:	b92a      	cbnz	r2, 1df8c <hal_spi_enable+0x1c>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1df80:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1df82:	2201      	movs	r2, #1
   1df84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    }
    rc = 0;
   1df88:	2000      	movs	r0, #0
   1df8a:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
   1df8c:	6a1a      	ldr	r2, [r3, #32]
   1df8e:	b18a      	cbz	r2, 1dfb4 <hal_spi_enable+0x44>
        spis = spi->nhs_spi.spis;
   1df90:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1df92:	2000      	movs	r0, #0
   1df94:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1df98:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1df9c:	f240 4202 	movw	r2, #1026	; 0x402
   1dfa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1dfa4:	2202      	movs	r2, #2
   1dfa6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1dfaa:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1dfac:	2016      	movs	r0, #22
   1dfae:	4770      	bx	lr
   1dfb0:	2016      	movs	r0, #22
   1dfb2:	4770      	bx	lr
            rc = EINVAL;
   1dfb4:	2016      	movs	r0, #22

err:
    return rc;
}
   1dfb6:	4770      	bx	lr
   1dfb8:	0002740c 	.word	0x0002740c

0001dfbc <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1dfbc:	2803      	cmp	r0, #3
   1dfbe:	dc2a      	bgt.n	1e016 <hal_spi_disable+0x5a>
{
   1dfc0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1dfc2:	4b17      	ldr	r3, [pc, #92]	; (1e020 <hal_spi_disable+0x64>)
   1dfc4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1dfc8:	b33c      	cbz	r4, 1e01a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1dfca:	7823      	ldrb	r3, [r4, #0]
   1dfcc:	b9ab      	cbnz	r3, 1dffa <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1dfce:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1dfd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dfd4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1dfd8:	7863      	ldrb	r3, [r4, #1]
   1dfda:	b943      	cbnz	r3, 1dfee <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1dfdc:	2300      	movs	r3, #0
   1dfde:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1dfe2:	2000      	movs	r0, #0
   1dfe4:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1dfe6:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1dfe8:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1dfea:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1dfec:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1dfee:	4628      	mov	r0, r5
   1dff0:	f7ff fe9e 	bl	1dd30 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1dff4:	2300      	movs	r3, #0
   1dff6:	7063      	strb	r3, [r4, #1]
   1dff8:	e7f0      	b.n	1dfdc <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1dffa:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1dffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e000:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1e004:	2300      	movs	r3, #0
   1e006:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1e00a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1e00e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1e012:	70e3      	strb	r3, [r4, #3]
   1e014:	e7e5      	b.n	1dfe2 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e016:	2016      	movs	r0, #22
}
   1e018:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e01a:	2016      	movs	r0, #22
    return rc;
   1e01c:	e7e6      	b.n	1dfec <hal_spi_disable+0x30>
   1e01e:	bf00      	nop
   1e020:	0002740c 	.word	0x0002740c

0001e024 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e024:	2803      	cmp	r0, #3
   1e026:	dc1d      	bgt.n	1e064 <hal_spi_init+0x40>
{
   1e028:	b538      	push	{r3, r4, r5, lr}
   1e02a:	460c      	mov	r4, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e02c:	4b12      	ldr	r3, [pc, #72]	; (1e078 <hal_spi_init+0x54>)
   1e02e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1e032:	b1cd      	cbz	r5, 1e068 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1e034:	b1d1      	cbz	r1, 1e06c <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1e036:	2a01      	cmp	r2, #1
   1e038:	d81a      	bhi.n	1e070 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1e03a:	702a      	strb	r2, [r5, #0]
    if (spi_num == 0) {
   1e03c:	b9d0      	cbnz	r0, 1e074 <hal_spi_init+0x50>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1e03e:	2303      	movs	r3, #3
   1e040:	752b      	strb	r3, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1e042:	b94a      	cbnz	r2, 1e058 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1e044:	4b0d      	ldr	r3, [pc, #52]	; (1e07c <hal_spi_init+0x58>)
   1e046:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
   1e048:	f7ff ffb8 	bl	1dfbc <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1e04c:	4a0c      	ldr	r2, [pc, #48]	; (1e080 <hal_spi_init+0x5c>)
   1e04e:	4621      	mov	r1, r4
   1e050:	4628      	mov	r0, r5
   1e052:	f7ff fe9d 	bl	1dd90 <hal_spi_init_master>
   1e056:	e00e      	b.n	1e076 <hal_spi_init+0x52>
            assert(0);
   1e058:	2300      	movs	r3, #0
   1e05a:	461a      	mov	r2, r3
   1e05c:	4619      	mov	r1, r3
   1e05e:	4618      	mov	r0, r3
   1e060:	f7eb f8b0 	bl	91c4 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e064:	2016      	movs	r0, #22
}
   1e066:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e068:	2016      	movs	r0, #22
   1e06a:	e004      	b.n	1e076 <hal_spi_init+0x52>
    rc = EINVAL;
   1e06c:	2016      	movs	r0, #22
   1e06e:	e002      	b.n	1e076 <hal_spi_init+0x52>
   1e070:	2016      	movs	r0, #22
   1e072:	e000      	b.n	1e076 <hal_spi_init+0x52>
   1e074:	2016      	movs	r0, #22
}
   1e076:	bd38      	pop	{r3, r4, r5, pc}
   1e078:	0002740c 	.word	0x0002740c
   1e07c:	40003000 	.word	0x40003000
   1e080:	0001dd19 	.word	0x0001dd19

0001e084 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e084:	2803      	cmp	r0, #3
   1e086:	dc0a      	bgt.n	1e09e <hal_spi_set_txrx_cb+0x1a>
   1e088:	4b08      	ldr	r3, [pc, #32]	; (1e0ac <hal_spi_set_txrx_cb+0x28>)
   1e08a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e08e:	b143      	cbz	r3, 1e0a2 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1e090:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1e092:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1e096:	b930      	cbnz	r0, 1e0a6 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1e098:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1e09a:	625a      	str	r2, [r3, #36]	; 0x24
        rc = 0;
   1e09c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e09e:	2016      	movs	r0, #22
   1e0a0:	4770      	bx	lr
   1e0a2:	2016      	movs	r0, #22
   1e0a4:	4770      	bx	lr
        rc = -1;
   1e0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
   1e0aa:	4770      	bx	lr
   1e0ac:	0002740c 	.word	0x0002740c

0001e0b0 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1e0b0:	2b00      	cmp	r3, #0
   1e0b2:	d046      	beq.n	1e142 <hal_spi_txrx+0x92>
{
   1e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0b6:	460d      	mov	r5, r1
   1e0b8:	4616      	mov	r6, r2
   1e0ba:	461f      	mov	r7, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1e0bc:	2803      	cmp	r0, #3
   1e0be:	dc42      	bgt.n	1e146 <hal_spi_txrx+0x96>
   1e0c0:	4b25      	ldr	r3, [pc, #148]	; (1e158 <hal_spi_txrx+0xa8>)
   1e0c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e0c6:	2b00      	cmp	r3, #0
   1e0c8:	d03f      	beq.n	1e14a <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1e0ca:	781a      	ldrb	r2, [r3, #0]
   1e0cc:	2a00      	cmp	r2, #0
   1e0ce:	d13e      	bne.n	1e14e <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1e0d0:	2900      	cmp	r1, #0
   1e0d2:	d03e      	beq.n	1e152 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1e0d4:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1e0d6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1e0da:	2b07      	cmp	r3, #7
   1e0dc:	d004      	beq.n	1e0e8 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1e0de:	b95b      	cbnz	r3, 1e0f8 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1e0e0:	2301      	movs	r3, #1
   1e0e2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1e0e6:	e007      	b.n	1e0f8 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1e0e8:	f7ff ff68 	bl	1dfbc <hal_spi_disable>
        if (enabled == 0) {
   1e0ec:	e7f8      	b.n	1e0e0 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1e0ee:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1e0f2:	2300      	movs	r3, #0
   1e0f4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1e0f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	d1f6      	bne.n	1e0ee <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1e100:	782b      	ldrb	r3, [r5, #0]
   1e102:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1e106:	1e7a      	subs	r2, r7, #1
        rxd = (uint8_t *)rxbuf;
   1e108:	4631      	mov	r1, r6
        for (i = 0; i < len; ++i) {
   1e10a:	2000      	movs	r0, #0
   1e10c:	e00d      	b.n	1e12a <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1e10e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e112:	2b00      	cmp	r3, #0
   1e114:	d0fb      	beq.n	1e10e <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1e116:	2300      	movs	r3, #0
   1e118:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1e11c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1e120:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1e122:	b10e      	cbz	r6, 1e128 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1e124:	f801 3b01 	strb.w	r3, [r1], #1
        for (i = 0; i < len; ++i) {
   1e128:	3001      	adds	r0, #1
   1e12a:	42b8      	cmp	r0, r7
   1e12c:	da07      	bge.n	1e13e <hal_spi_txrx+0x8e>
            if (txcnt) {
   1e12e:	2a00      	cmp	r2, #0
   1e130:	d0ed      	beq.n	1e10e <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1e132:	786b      	ldrb	r3, [r5, #1]
   1e134:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1e138:	3a01      	subs	r2, #1
                ++txd;
   1e13a:	3501      	adds	r5, #1
   1e13c:	e7e7      	b.n	1e10e <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1e13e:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1e140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1e142:	2016      	movs	r0, #22
}
   1e144:	4770      	bx	lr
    return rc;
   1e146:	2016      	movs	r0, #22
   1e148:	e7fa      	b.n	1e140 <hal_spi_txrx+0x90>
   1e14a:	2016      	movs	r0, #22
   1e14c:	e7f8      	b.n	1e140 <hal_spi_txrx+0x90>
   1e14e:	2016      	movs	r0, #22
   1e150:	e7f6      	b.n	1e140 <hal_spi_txrx+0x90>
   1e152:	2016      	movs	r0, #22
   1e154:	e7f4      	b.n	1e140 <hal_spi_txrx+0x90>
   1e156:	bf00      	nop
   1e158:	0002740c 	.word	0x0002740c

0001e15c <hal_spi_txrx_noblock>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx_noblock(int spi_num, void *txbuf, void *rxbuf, int len)
{
   1e15c:	b570      	push	{r4, r5, r6, lr}
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e15e:	2803      	cmp	r0, #3
   1e160:	dc63      	bgt.n	1e22a <hal_spi_txrx_noblock+0xce>
   1e162:	461c      	mov	r4, r3
   1e164:	4b3a      	ldr	r3, [pc, #232]	; (1e250 <hal_spi_txrx_noblock+0xf4>)
   1e166:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1e16a:	2d00      	cmp	r5, #0
   1e16c:	d060      	beq.n	1e230 <hal_spi_txrx_noblock+0xd4>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1e16e:	6a2b      	ldr	r3, [r5, #32]
   1e170:	2b00      	cmp	r3, #0
   1e172:	d05f      	beq.n	1e234 <hal_spi_txrx_noblock+0xd8>
   1e174:	2c00      	cmp	r4, #0
   1e176:	d05f      	beq.n	1e238 <hal_spi_txrx_noblock+0xdc>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
   1e178:	2c01      	cmp	r4, #1
   1e17a:	d033      	beq.n	1e1e4 <hal_spi_txrx_noblock+0x88>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1e17c:	782b      	ldrb	r3, [r5, #0]
   1e17e:	2b00      	cmp	r3, #0
   1e180:	d141      	bne.n	1e206 <hal_spi_txrx_noblock+0xaa>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1e182:	2900      	cmp	r1, #0
   1e184:	d05a      	beq.n	1e23c <hal_spi_txrx_noblock+0xe0>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1e186:	786b      	ldrb	r3, [r5, #1]
   1e188:	2b00      	cmp	r3, #0
   1e18a:	d159      	bne.n	1e240 <hal_spi_txrx_noblock+0xe4>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1e18c:	6928      	ldr	r0, [r5, #16]
#if MYNEWT_VAL(SPI_3_MASTER)
        if (spim == NRF_SPIM3) {
            anomaly_198_enable(txbuf, len);
        }
#endif
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1e18e:	2340      	movs	r3, #64	; 0x40
   1e190:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1e194:	2301      	movs	r3, #1
   1e196:	706b      	strb	r3, [r5, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1e198:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
   1e19c:	2b07      	cmp	r3, #7
   1e19e:	d005      	beq.n	1e1ac <hal_spi_txrx_noblock+0x50>
            spim->ENABLE = 0;
   1e1a0:	2300      	movs	r3, #0
   1e1a2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1e1a6:	2307      	movs	r3, #7
   1e1a8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1e1ac:	2300      	movs	r3, #0
   1e1ae:	80eb      	strh	r3, [r5, #6]
        spi->nhs_buflen = len;
   1e1b0:	80ac      	strh	r4, [r5, #4]
        spi->nhs_txbuf = txbuf;
   1e1b2:	61a9      	str	r1, [r5, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1e1b4:	2cff      	cmp	r4, #255	; 0xff
   1e1b6:	bfa8      	it	ge
   1e1b8:	24ff      	movge	r4, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1e1ba:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1e1be:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1e1c2:	61ea      	str	r2, [r5, #28]
        if (rxbuf == NULL) {
   1e1c4:	b1c2      	cbz	r2, 1e1f8 <hal_spi_txrx_noblock+0x9c>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1e1c6:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1e1ca:	f8c0 4538 	str.w	r4, [r0, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1e1ce:	2600      	movs	r6, #0
   1e1d0:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1e1d4:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
   1e1d8:	2301      	movs	r3, #1
   1e1da:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1e1dc:	2340      	movs	r3, #64	; 0x40
   1e1de:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
   1e1e2:	e023      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
   1e1e4:	4623      	mov	r3, r4
   1e1e6:	f7ff ff63 	bl	1e0b0 <hal_spi_txrx>
        if (rc == 0) {
   1e1ea:	4606      	mov	r6, r0
   1e1ec:	b9f0      	cbnz	r0, 1e22c <hal_spi_txrx_noblock+0xd0>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
   1e1ee:	6a2b      	ldr	r3, [r5, #32]
   1e1f0:	4621      	mov	r1, r4
   1e1f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1e1f4:	4798      	blx	r3
        return rc;
   1e1f6:	e019      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1e1f8:	3502      	adds	r5, #2
   1e1fa:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1e1fe:	2301      	movs	r3, #1
   1e200:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
   1e204:	e7e3      	b.n	1e1ce <hal_spi_txrx_noblock+0x72>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1e206:	b161      	cbz	r1, 1e222 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1e208:	2cff      	cmp	r4, #255	; 0xff
   1e20a:	dc1c      	bgt.n	1e246 <hal_spi_txrx_noblock+0xea>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1e20c:	78eb      	ldrb	r3, [r5, #3]
   1e20e:	b9e3      	cbnz	r3, 1e24a <hal_spi_txrx_noblock+0xee>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1e210:	61ea      	str	r2, [r5, #28]
        spi->nhs_txbuf = txbuf;
   1e212:	61a9      	str	r1, [r5, #24]
        spi->nhs_buflen = len;
   1e214:	80ac      	strh	r4, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1e216:	2301      	movs	r3, #1
   1e218:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1e21a:	692a      	ldr	r2, [r5, #16]
   1e21c:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1e21e:	2600      	movs	r6, #0
   1e220:	e004      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1e222:	2a00      	cmp	r2, #0
   1e224:	d1f0      	bne.n	1e208 <hal_spi_txrx_noblock+0xac>
    rc = EINVAL;
   1e226:	2616      	movs	r6, #22
   1e228:	e000      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e22a:	2616      	movs	r6, #22

err:
    return rc;
}
   1e22c:	4630      	mov	r0, r6
   1e22e:	bd70      	pop	{r4, r5, r6, pc}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e230:	2616      	movs	r6, #22
   1e232:	e7fb      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   1e234:	2616      	movs	r6, #22
   1e236:	e7f9      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
   1e238:	2616      	movs	r6, #22
   1e23a:	e7f7      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
   1e23c:	2616      	movs	r6, #22
   1e23e:	e7f5      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1e240:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e244:	e7f2      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   1e246:	2616      	movs	r6, #22
   1e248:	e7f0      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1e24a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1e24e:	e7ed      	b.n	1e22c <hal_spi_txrx_noblock+0xd0>
   1e250:	0002740c 	.word	0x0002740c

0001e254 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1e254:	2301      	movs	r3, #1
   1e256:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1e258:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1e25c:	4770      	bx	lr
	...

0001e260 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1e260:	b538      	push	{r3, r4, r5, lr}
   1e262:	4604      	mov	r4, r0
   1e264:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1e266:	7883      	ldrb	r3, [r0, #2]
   1e268:	b39b      	cbz	r3, 1e2d2 <nrf_timer_set_ocmp+0x72>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1e26a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1e26c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1e270:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1e274:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1e276:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1e27a:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   1e27e:	b118      	cbz	r0, 1e288 <nrf_timer_set_ocmp+0x28>
            temp += (1UL << 24);
   1e280:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1e284:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1e288:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   1e28a:	1aeb      	subs	r3, r5, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1e28c:	2b02      	cmp	r3, #2
   1e28e:	dc0f      	bgt.n	1e2b0 <nrf_timer_set_ocmp+0x50>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1e290:	7862      	ldrb	r2, [r4, #1]
   1e292:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1e296:	2b00      	cmp	r3, #0
   1e298:	db15      	blt.n	1e2c6 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e29a:	f002 021f 	and.w	r2, r2, #31
   1e29e:	095b      	lsrs	r3, r3, #5
   1e2a0:	2101      	movs	r1, #1
   1e2a2:	fa01 f202 	lsl.w	r2, r1, r2
   1e2a6:	3340      	adds	r3, #64	; 0x40
   1e2a8:	491a      	ldr	r1, [pc, #104]	; (1e314 <nrf_timer_set_ocmp+0xb4>)
   1e2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1e2ae:	e00a      	b.n	1e2c6 <nrf_timer_set_ocmp+0x66>
        } else  {
            if (delta_t < (1UL << 24)) {
   1e2b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1e2b4:	d208      	bcs.n	1e2c8 <nrf_timer_set_ocmp+0x68>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1e2b6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   1e2ba:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1e2be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1e2c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1e2c6:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1e2c8:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   1e2cc:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   1e2d0:	e7f5      	b.n	1e2be <nrf_timer_set_ocmp+0x5e>
        hwtimer = bsptimer->tmr_reg;
   1e2d2:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1e2d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1e2d8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1e2dc:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1e2e0:	2200      	movs	r2, #0
   1e2e2:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1e2e6:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1e2ea:	f7ff ffb3 	bl	1e254 <nrf_read_timer_cntr>
   1e2ee:	1b45      	subs	r5, r0, r5
   1e2f0:	2d00      	cmp	r5, #0
   1e2f2:	dbe8      	blt.n	1e2c6 <nrf_timer_set_ocmp+0x66>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1e2f4:	7862      	ldrb	r2, [r4, #1]
   1e2f6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1e2fa:	2b00      	cmp	r3, #0
   1e2fc:	dbe3      	blt.n	1e2c6 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e2fe:	f002 021f 	and.w	r2, r2, #31
   1e302:	095b      	lsrs	r3, r3, #5
   1e304:	2101      	movs	r1, #1
   1e306:	fa01 f202 	lsl.w	r2, r1, r2
   1e30a:	3340      	adds	r3, #64	; 0x40
   1e30c:	4901      	ldr	r1, [pc, #4]	; (1e314 <nrf_timer_set_ocmp+0xb4>)
   1e30e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1e312:	e7d8      	b.n	1e2c6 <nrf_timer_set_ocmp+0x66>
   1e314:	e000e100 	.word	0xe000e100

0001e318 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1e318:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1e31c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1e320:	4770      	bx	lr

0001e322 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1e322:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1e326:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1e32a:	4770      	bx	lr

0001e32c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1e32c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1e32e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e330:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e334:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1e336:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1e338:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1e33c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1e340:	b1b5      	cbz	r5, 1e370 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   1e342:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1e346:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1e348:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1e34c:	2500      	movs	r5, #0
   1e34e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1e352:	7845      	ldrb	r5, [r0, #1]
   1e354:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   1e358:	2a00      	cmp	r2, #0
   1e35a:	db09      	blt.n	1e370 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e35c:	f005 051f 	and.w	r5, r5, #31
   1e360:	0952      	lsrs	r2, r2, #5
   1e362:	2001      	movs	r0, #1
   1e364:	fa00 f505 	lsl.w	r5, r0, r5
   1e368:	3240      	adds	r2, #64	; 0x40
   1e36a:	4804      	ldr	r0, [pc, #16]	; (1e37c <hal_timer_read_bsptimer+0x50>)
   1e36c:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   1e370:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1e374:	b904      	cbnz	r4, 1e378 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   1e376:	b662      	cpsie	i

    return tcntr;
}
   1e378:	bc30      	pop	{r4, r5}
   1e37a:	4770      	bx	lr
   1e37c:	e000e100 	.word	0xe000e100

0001e380 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1e380:	b570      	push	{r4, r5, r6, lr}
   1e382:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e384:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e388:	b672      	cpsid	i
}
   1e38a:	e013      	b.n	1e3b4 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1e38c:	6928      	ldr	r0, [r5, #16]
   1e38e:	f7ff ff61 	bl	1e254 <nrf_read_timer_cntr>
            delta = 0;
   1e392:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1e394:	68e3      	ldr	r3, [r4, #12]
   1e396:	1ac3      	subs	r3, r0, r3
   1e398:	4293      	cmp	r3, r2
   1e39a:	db19      	blt.n	1e3d0 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e39c:	6923      	ldr	r3, [r4, #16]
   1e39e:	b1a3      	cbz	r3, 1e3ca <hal_timer_chk_queue+0x4a>
   1e3a0:	6962      	ldr	r2, [r4, #20]
   1e3a2:	615a      	str	r2, [r3, #20]
   1e3a4:	6963      	ldr	r3, [r4, #20]
   1e3a6:	6922      	ldr	r2, [r4, #16]
   1e3a8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1e3aa:	2300      	movs	r3, #0
   1e3ac:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1e3ae:	6863      	ldr	r3, [r4, #4]
   1e3b0:	68a0      	ldr	r0, [r4, #8]
   1e3b2:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1e3b4:	696c      	ldr	r4, [r5, #20]
   1e3b6:	b15c      	cbz	r4, 1e3d0 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1e3b8:	78ab      	ldrb	r3, [r5, #2]
   1e3ba:	2b00      	cmp	r3, #0
   1e3bc:	d0e6      	beq.n	1e38c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1e3be:	4628      	mov	r0, r5
   1e3c0:	f7ff ffb4 	bl	1e32c <hal_timer_read_bsptimer>
            delta = -3;
   1e3c4:	f06f 0202 	mvn.w	r2, #2
   1e3c8:	e7e4      	b.n	1e394 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e3ca:	6963      	ldr	r3, [r4, #20]
   1e3cc:	61ab      	str	r3, [r5, #24]
   1e3ce:	e7e9      	b.n	1e3a4 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1e3d0:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1e3d2:	b133      	cbz	r3, 1e3e2 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1e3d4:	68d9      	ldr	r1, [r3, #12]
   1e3d6:	4628      	mov	r0, r5
   1e3d8:	f7ff ff42 	bl	1e260 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1e3dc:	b906      	cbnz	r6, 1e3e0 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1e3de:	b662      	cpsie	i
}
   1e3e0:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1e3e2:	78ab      	ldrb	r3, [r5, #2]
   1e3e4:	b11b      	cbz	r3, 1e3ee <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1e3e6:	6928      	ldr	r0, [r5, #16]
   1e3e8:	f7ff ff9b 	bl	1e322 <nrf_rtc_disable_ocmp>
   1e3ec:	e7f6      	b.n	1e3dc <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1e3ee:	6928      	ldr	r0, [r5, #16]
   1e3f0:	f7ff ff92 	bl	1e318 <nrf_timer_disable_ocmp>
   1e3f4:	e7f2      	b.n	1e3dc <hal_timer_chk_queue+0x5c>

0001e3f6 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1e3f6:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1e3f8:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1e3fa:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1e3fe:	b113      	cbz	r3, 1e406 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1e400:	2300      	movs	r3, #0
   1e402:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1e406:	6883      	ldr	r3, [r0, #8]
   1e408:	3301      	adds	r3, #1
   1e40a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1e40c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1e410:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1e414:	d100      	bne.n	1e418 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1e416:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1e418:	f7ff ffb2 	bl	1e380 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1e41c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1e420:	e7f9      	b.n	1e416 <hal_timer_irq_handler+0x20>
	...

0001e424 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1e424:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1e426:	4802      	ldr	r0, [pc, #8]	; (1e430 <nrf52_timer0_irq_handler+0xc>)
   1e428:	f7ff ffe5 	bl	1e3f6 <hal_timer_irq_handler>
}
   1e42c:	bd08      	pop	{r3, pc}
   1e42e:	bf00      	nop
   1e430:	20004c1c 	.word	0x20004c1c

0001e434 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e434:	2805      	cmp	r0, #5
   1e436:	dc1c      	bgt.n	1e472 <hal_timer_init+0x3e>
   1e438:	4b12      	ldr	r3, [pc, #72]	; (1e484 <hal_timer_init+0x50>)
   1e43a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e43e:	b1d3      	cbz	r3, 1e476 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1e440:	781a      	ldrb	r2, [r3, #0]
   1e442:	b9d2      	cbnz	r2, 1e47a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1e444:	b9d8      	cbnz	r0, 1e47e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1e446:	4a10      	ldr	r2, [pc, #64]	; (1e488 <hal_timer_init+0x54>)
   1e448:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1e44a:	2208      	movs	r2, #8
   1e44c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e44e:	4b0f      	ldr	r3, [pc, #60]	; (1e48c <hal_timer_init+0x58>)
   1e450:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1e458:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e45c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e460:	22e0      	movs	r2, #224	; 0xe0
   1e462:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1e466:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1e46a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1e46c:	4a08      	ldr	r2, [pc, #32]	; (1e490 <hal_timer_init+0x5c>)
   1e46e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1e470:	4770      	bx	lr

err:
    return rc;
   1e472:	2016      	movs	r0, #22
   1e474:	4770      	bx	lr
   1e476:	2016      	movs	r0, #22
   1e478:	4770      	bx	lr
   1e47a:	2016      	movs	r0, #22
   1e47c:	4770      	bx	lr
   1e47e:	2016      	movs	r0, #22
}
   1e480:	4770      	bx	lr
   1e482:	bf00      	nop
   1e484:	0002741c 	.word	0x0002741c
   1e488:	40008000 	.word	0x40008000
   1e48c:	e000e100 	.word	0xe000e100
   1e490:	0001e425 	.word	0x0001e425

0001e494 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e494:	2805      	cmp	r0, #5
   1e496:	dc65      	bgt.n	1e564 <hal_timer_config+0xd0>
{
   1e498:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e49a:	4b3a      	ldr	r3, [pc, #232]	; (1e584 <hal_timer_config+0xf0>)
   1e49c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1e4a0:	2c00      	cmp	r4, #0
   1e4a2:	d061      	beq.n	1e568 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1e4a4:	4838      	ldr	r0, [pc, #224]	; (1e588 <hal_timer_config+0xf4>)
   1e4a6:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1e4aa:	7823      	ldrb	r3, [r4, #0]
   1e4ac:	2b00      	cmp	r3, #0
   1e4ae:	d15d      	bne.n	1e56c <hal_timer_config+0xd8>
   1e4b0:	4a35      	ldr	r2, [pc, #212]	; (1e588 <hal_timer_config+0xf4>)
   1e4b2:	4291      	cmp	r1, r2
   1e4b4:	d85d      	bhi.n	1e572 <hal_timer_config+0xde>
   1e4b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1e4ba:	d85c      	bhi.n	1e576 <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
   1e4bc:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1e4be:	2a00      	cmp	r2, #0
   1e4c0:	d05b      	beq.n	1e57a <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1e4c2:	2801      	cmp	r0, #1
   1e4c4:	d013      	beq.n	1e4ee <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1e4c6:	2301      	movs	r3, #1
   1e4c8:	2b09      	cmp	r3, #9
   1e4ca:	d810      	bhi.n	1e4ee <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
   1e4cc:	2201      	movs	r2, #1
   1e4ce:	409a      	lsls	r2, r3
   1e4d0:	4282      	cmp	r2, r0
   1e4d2:	d202      	bcs.n	1e4da <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1e4d4:	3301      	adds	r3, #1
   1e4d6:	b2db      	uxtb	r3, r3
   1e4d8:	e7f6      	b.n	1e4c8 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
   1e4da:	1e59      	subs	r1, r3, #1
   1e4dc:	2501      	movs	r5, #1
   1e4de:	fa05 f101 	lsl.w	r1, r5, r1
   1e4e2:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
   1e4e4:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
   1e4e6:	4291      	cmp	r1, r2
   1e4e8:	d201      	bcs.n	1e4ee <hal_timer_config+0x5a>
                    prescaler -= 1;
   1e4ea:	3b01      	subs	r3, #1
   1e4ec:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1e4ee:	4a26      	ldr	r2, [pc, #152]	; (1e588 <hal_timer_config+0xf4>)
   1e4f0:	411a      	asrs	r2, r3
   1e4f2:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   1e4f4:	2201      	movs	r2, #1
   1e4f6:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e4f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e4fc:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1e4fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e502:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1e506:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1e50a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1e50e:	d00c      	beq.n	1e52a <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1e510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e514:	2100      	movs	r1, #0
   1e516:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1e51a:	2101      	movs	r1, #1
   1e51c:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1e51e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e522:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1e526:	2a00      	cmp	r2, #0
   1e528:	d0f9      	beq.n	1e51e <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1e52a:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1e52c:	2101      	movs	r1, #1
   1e52e:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1e530:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1e532:	2500      	movs	r5, #0
   1e534:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1e538:	2503      	movs	r5, #3
   1e53a:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1e53e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1e542:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1e544:	7862      	ldrb	r2, [r4, #1]
   1e546:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1e54a:	2b00      	cmp	r3, #0
   1e54c:	db07      	blt.n	1e55e <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e54e:	f002 021f 	and.w	r2, r2, #31
   1e552:	095b      	lsrs	r3, r3, #5
   1e554:	fa01 f202 	lsl.w	r2, r1, r2
   1e558:	490c      	ldr	r1, [pc, #48]	; (1e58c <hal_timer_config+0xf8>)
   1e55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1e55e:	b970      	cbnz	r0, 1e57e <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
   1e560:	b662      	cpsie	i
}
   1e562:	e004      	b.n	1e56e <hal_timer_config+0xda>

    return 0;

err:
    return rc;
   1e564:	2016      	movs	r0, #22
}
   1e566:	4770      	bx	lr
    return rc;
   1e568:	2016      	movs	r0, #22
   1e56a:	e000      	b.n	1e56e <hal_timer_config+0xda>
   1e56c:	2016      	movs	r0, #22
}
   1e56e:	bc30      	pop	{r4, r5}
   1e570:	4770      	bx	lr
    return rc;
   1e572:	2016      	movs	r0, #22
   1e574:	e7fb      	b.n	1e56e <hal_timer_config+0xda>
   1e576:	2016      	movs	r0, #22
   1e578:	e7f9      	b.n	1e56e <hal_timer_config+0xda>
   1e57a:	2016      	movs	r0, #22
   1e57c:	e7f7      	b.n	1e56e <hal_timer_config+0xda>
    return 0;
   1e57e:	2000      	movs	r0, #0
   1e580:	e7f5      	b.n	1e56e <hal_timer_config+0xda>
   1e582:	bf00      	nop
   1e584:	0002741c 	.word	0x0002741c
   1e588:	00f42400 	.word	0x00f42400
   1e58c:	e000e100 	.word	0xe000e100

0001e590 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1e590:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e592:	2805      	cmp	r0, #5
   1e594:	dc0c      	bgt.n	1e5b0 <hal_timer_read+0x20>
   1e596:	4b09      	ldr	r3, [pc, #36]	; (1e5bc <hal_timer_read+0x2c>)
   1e598:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e59c:	b140      	cbz	r0, 1e5b0 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1e59e:	7883      	ldrb	r3, [r0, #2]
   1e5a0:	b113      	cbz	r3, 1e5a8 <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1e5a2:	f7ff fec3 	bl	1e32c <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1e5a6:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1e5a8:	6900      	ldr	r0, [r0, #16]
   1e5aa:	f7ff fe53 	bl	1e254 <nrf_read_timer_cntr>
    return tcntr;
   1e5ae:	e7fa      	b.n	1e5a6 <hal_timer_read+0x16>
    assert(0);
   1e5b0:	2300      	movs	r3, #0
   1e5b2:	461a      	mov	r2, r3
   1e5b4:	4619      	mov	r1, r3
   1e5b6:	4618      	mov	r0, r3
   1e5b8:	f7ea fe04 	bl	91c4 <__assert_func>
   1e5bc:	0002741c 	.word	0x0002741c

0001e5c0 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e5c0:	2805      	cmp	r0, #5
   1e5c2:	dc0c      	bgt.n	1e5de <hal_timer_set_cb+0x1e>
{
   1e5c4:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e5c6:	4c08      	ldr	r4, [pc, #32]	; (1e5e8 <hal_timer_set_cb+0x28>)
   1e5c8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   1e5cc:	b14c      	cbz	r4, 1e5e2 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   1e5ce:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   1e5d0:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   1e5d2:	2000      	movs	r0, #0
   1e5d4:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   1e5d6:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   1e5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e5dc:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e5de:	2016      	movs	r0, #22
}
   1e5e0:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e5e2:	2016      	movs	r0, #22
    return rc;
   1e5e4:	e7f8      	b.n	1e5d8 <hal_timer_set_cb+0x18>
   1e5e6:	bf00      	nop
   1e5e8:	0002741c 	.word	0x0002741c

0001e5ec <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1e5ec:	2800      	cmp	r0, #0
   1e5ee:	d03b      	beq.n	1e668 <hal_timer_start_at+0x7c>
{
   1e5f0:	b538      	push	{r3, r4, r5, lr}
   1e5f2:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1e5f4:	6943      	ldr	r3, [r0, #20]
   1e5f6:	2b00      	cmp	r3, #0
   1e5f8:	d138      	bne.n	1e66c <hal_timer_start_at+0x80>
        (timer->cb_func == NULL)) {
   1e5fa:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1e5fc:	2b00      	cmp	r3, #0
   1e5fe:	d037      	beq.n	1e670 <hal_timer_start_at+0x84>
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1e600:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   1e602:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e604:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e608:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1e60a:	6943      	ldr	r3, [r0, #20]
   1e60c:	b13b      	cbz	r3, 1e61e <hal_timer_start_at+0x32>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
    } else {
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1e60e:	b1bb      	cbz	r3, 1e640 <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1e610:	68e2      	ldr	r2, [r4, #12]
   1e612:	68d9      	ldr	r1, [r3, #12]
   1e614:	1a52      	subs	r2, r2, r1
   1e616:	2a00      	cmp	r2, #0
   1e618:	db0a      	blt.n	1e630 <hal_timer_start_at+0x44>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1e61a:	691b      	ldr	r3, [r3, #16]
   1e61c:	e7f7      	b.n	1e60e <hal_timer_start_at+0x22>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1e61e:	4622      	mov	r2, r4
   1e620:	f842 3f10 	str.w	r3, [r2, #16]!
   1e624:	6182      	str	r2, [r0, #24]
   1e626:	4603      	mov	r3, r0
   1e628:	f843 4f14 	str.w	r4, [r3, #20]!
   1e62c:	6163      	str	r3, [r4, #20]
   1e62e:	e008      	b.n	1e642 <hal_timer_start_at+0x56>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1e630:	695a      	ldr	r2, [r3, #20]
   1e632:	6162      	str	r2, [r4, #20]
   1e634:	6123      	str	r3, [r4, #16]
   1e636:	695a      	ldr	r2, [r3, #20]
   1e638:	6014      	str	r4, [r2, #0]
   1e63a:	f104 0210 	add.w	r2, r4, #16
   1e63e:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (!entry) {
   1e640:	b133      	cbz	r3, 1e650 <hal_timer_start_at+0x64>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1e642:	6943      	ldr	r3, [r0, #20]
   1e644:	42a3      	cmp	r3, r4
   1e646:	d00b      	beq.n	1e660 <hal_timer_start_at+0x74>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1e648:	b9a5      	cbnz	r5, 1e674 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   1e64a:	b662      	cpsie	i

    return 0;
   1e64c:	2000      	movs	r0, #0
}
   1e64e:	e00e      	b.n	1e66e <hal_timer_start_at+0x82>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1e650:	6123      	str	r3, [r4, #16]
   1e652:	6983      	ldr	r3, [r0, #24]
   1e654:	6163      	str	r3, [r4, #20]
   1e656:	601c      	str	r4, [r3, #0]
   1e658:	f104 0310 	add.w	r3, r4, #16
   1e65c:	6183      	str	r3, [r0, #24]
   1e65e:	e7f0      	b.n	1e642 <hal_timer_start_at+0x56>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1e660:	68e1      	ldr	r1, [r4, #12]
   1e662:	f7ff fdfd 	bl	1e260 <nrf_timer_set_ocmp>
   1e666:	e7ef      	b.n	1e648 <hal_timer_start_at+0x5c>
        return EINVAL;
   1e668:	2016      	movs	r0, #22
}
   1e66a:	4770      	bx	lr
        return EINVAL;
   1e66c:	2016      	movs	r0, #22
}
   1e66e:	bd38      	pop	{r3, r4, r5, pc}
        return EINVAL;
   1e670:	2016      	movs	r0, #22
   1e672:	e7fc      	b.n	1e66e <hal_timer_start_at+0x82>
    return 0;
   1e674:	2000      	movs	r0, #0
   1e676:	e7fa      	b.n	1e66e <hal_timer_start_at+0x82>

0001e678 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   1e678:	b360      	cbz	r0, 1e6d4 <hal_timer_stop+0x5c>
{
   1e67a:	b570      	push	{r4, r5, r6, lr}
   1e67c:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1e67e:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e680:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e684:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   1e686:	6942      	ldr	r2, [r0, #20]
   1e688:	b18a      	cbz	r2, 1e6ae <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1e68a:	6948      	ldr	r0, [r1, #20]
   1e68c:	4298      	cmp	r0, r3
   1e68e:	d012      	beq.n	1e6b6 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   1e690:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e692:	6918      	ldr	r0, [r3, #16]
   1e694:	b190      	cbz	r0, 1e6bc <hal_timer_stop+0x44>
   1e696:	6142      	str	r2, [r0, #20]
   1e698:	695a      	ldr	r2, [r3, #20]
   1e69a:	6918      	ldr	r0, [r3, #16]
   1e69c:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   1e69e:	2200      	movs	r2, #0
   1e6a0:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   1e6a2:	b125      	cbz	r5, 1e6ae <hal_timer_stop+0x36>
            if (entry) {
   1e6a4:	b166      	cbz	r6, 1e6c0 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   1e6a6:	68f1      	ldr	r1, [r6, #12]
   1e6a8:	6830      	ldr	r0, [r6, #0]
   1e6aa:	f7ff fdd9 	bl	1e260 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1e6ae:	b99c      	cbnz	r4, 1e6d8 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1e6b0:	b662      	cpsie	i

    return 0;
   1e6b2:	2000      	movs	r0, #0
}
   1e6b4:	e011      	b.n	1e6da <hal_timer_stop+0x62>
            entry = TAILQ_NEXT(timer, link);
   1e6b6:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   1e6b8:	2501      	movs	r5, #1
   1e6ba:	e7ea      	b.n	1e692 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e6bc:	618a      	str	r2, [r1, #24]
   1e6be:	e7eb      	b.n	1e698 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   1e6c0:	788b      	ldrb	r3, [r1, #2]
   1e6c2:	b11b      	cbz	r3, 1e6cc <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1e6c4:	6908      	ldr	r0, [r1, #16]
   1e6c6:	f7ff fe2c 	bl	1e322 <nrf_rtc_disable_ocmp>
   1e6ca:	e7f0      	b.n	1e6ae <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1e6cc:	6908      	ldr	r0, [r1, #16]
   1e6ce:	f7ff fe23 	bl	1e318 <nrf_timer_disable_ocmp>
   1e6d2:	e7ec      	b.n	1e6ae <hal_timer_stop+0x36>
        return EINVAL;
   1e6d4:	2016      	movs	r0, #22
}
   1e6d6:	4770      	bx	lr
    return 0;
   1e6d8:	2000      	movs	r0, #0
}
   1e6da:	bd70      	pop	{r4, r5, r6, pc}

0001e6dc <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1e6dc:	b508      	push	{r3, lr}
    assert(0);
   1e6de:	2300      	movs	r3, #0
   1e6e0:	461a      	mov	r2, r3
   1e6e2:	4619      	mov	r1, r3
   1e6e4:	4618      	mov	r0, r3
   1e6e6:	f7ea fd6d 	bl	91c4 <__assert_func>
	...

0001e6ec <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1e6ec:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1e6ee:	4b06      	ldr	r3, [pc, #24]	; (1e708 <nrf52_wdt_irq_handler+0x1c>)
   1e6f0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1e6f4:	f013 0f01 	tst.w	r3, #1
   1e6f8:	d100      	bne.n	1e6fc <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1e6fa:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1e6fc:	4b02      	ldr	r3, [pc, #8]	; (1e708 <nrf52_wdt_irq_handler+0x1c>)
   1e6fe:	2200      	movs	r2, #0
   1e700:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1e704:	f7ff ffea 	bl	1e6dc <nrf52_hal_wdt_default_handler>
   1e708:	40010000 	.word	0x40010000

0001e70c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1e70c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1e70e:	4b17      	ldr	r3, [pc, #92]	; (1e76c <hal_watchdog_init+0x60>)
   1e710:	2201      	movs	r2, #1
   1e712:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1e716:	4b16      	ldr	r3, [pc, #88]	; (1e770 <hal_watchdog_init+0x64>)
   1e718:	4298      	cmp	r0, r3
   1e71a:	d821      	bhi.n	1e760 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1e71c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1e720:	015b      	lsls	r3, r3, #5
   1e722:	4a14      	ldr	r2, [pc, #80]	; (1e774 <hal_watchdog_init+0x68>)
   1e724:	fba2 2303 	umull	r2, r3, r2, r3
   1e728:	08db      	lsrs	r3, r3, #3
   1e72a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1e72e:	4b0f      	ldr	r3, [pc, #60]	; (1e76c <hal_watchdog_init+0x60>)
   1e730:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1e734:	4a10      	ldr	r2, [pc, #64]	; (1e778 <hal_watchdog_init+0x6c>)
   1e736:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1e738:	4910      	ldr	r1, [pc, #64]	; (1e77c <hal_watchdog_init+0x70>)
   1e73a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e73e:	4a10      	ldr	r2, [pc, #64]	; (1e780 <hal_watchdog_init+0x74>)
   1e740:	21e0      	movs	r1, #224	; 0xe0
   1e742:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e746:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1e74a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e74e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1e750:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1e754:	f042 0201 	orr.w	r2, r2, #1
   1e758:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1e75c:	2000      	movs	r0, #0
   1e75e:	bd08      	pop	{r3, pc}
        assert(0);
   1e760:	2300      	movs	r3, #0
   1e762:	461a      	mov	r2, r3
   1e764:	4619      	mov	r1, r3
   1e766:	4618      	mov	r0, r3
   1e768:	f7ea fd2c 	bl	91c4 <__assert_func>
   1e76c:	40010000 	.word	0x40010000
   1e770:	02aaaaaa 	.word	0x02aaaaaa
   1e774:	10624dd3 	.word	0x10624dd3
   1e778:	e000ed00 	.word	0xe000ed00
   1e77c:	0001e6ed 	.word	0x0001e6ed
   1e780:	e000e100 	.word	0xe000e100

0001e784 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1e784:	4b02      	ldr	r3, [pc, #8]	; (1e790 <hal_watchdog_enable+0xc>)
   1e786:	2201      	movs	r2, #1
   1e788:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1e78c:	601a      	str	r2, [r3, #0]
}
   1e78e:	4770      	bx	lr
   1e790:	40010000 	.word	0x40010000

0001e794 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1e794:	4b02      	ldr	r3, [pc, #8]	; (1e7a0 <hal_watchdog_tickle+0xc>)
   1e796:	4a03      	ldr	r2, [pc, #12]	; (1e7a4 <hal_watchdog_tickle+0x10>)
   1e798:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1e79c:	4770      	bx	lr
   1e79e:	bf00      	nop
   1e7a0:	40010000 	.word	0x40010000
   1e7a4:	6e524635 	.word	0x6e524635

0001e7a8 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   1e7a8:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1e7aa:	2100      	movs	r1, #0
   1e7ac:	4608      	mov	r0, r1
   1e7ae:	f7ff fe41 	bl	1e434 <hal_timer_init>
    assert(rc == 0);
   1e7b2:	b920      	cbnz	r0, 1e7be <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1e7b4:	4808      	ldr	r0, [pc, #32]	; (1e7d8 <nrf52_periph_create_timers+0x30>)
   1e7b6:	f7ea ff51 	bl	965c <os_cputime_init>
    assert(rc == 0);
   1e7ba:	b930      	cbnz	r0, 1e7ca <nrf52_periph_create_timers+0x22>
#endif
}
   1e7bc:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1e7be:	2300      	movs	r3, #0
   1e7c0:	461a      	mov	r2, r3
   1e7c2:	4619      	mov	r1, r3
   1e7c4:	4618      	mov	r0, r3
   1e7c6:	f7ea fcfd 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1e7ca:	2300      	movs	r3, #0
   1e7cc:	461a      	mov	r2, r3
   1e7ce:	4619      	mov	r1, r3
   1e7d0:	4618      	mov	r0, r3
   1e7d2:	f7ea fcf7 	bl	91c4 <__assert_func>
   1e7d6:	bf00      	nop
   1e7d8:	000f4240 	.word	0x000f4240

0001e7dc <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
   1e7dc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1e7de:	2200      	movs	r2, #0
   1e7e0:	4905      	ldr	r1, [pc, #20]	; (1e7f8 <nrf52_periph_create_spi+0x1c>)
   1e7e2:	4610      	mov	r0, r2
   1e7e4:	f7ff fc1e 	bl	1e024 <hal_spi_init>
    assert(rc == 0);
   1e7e8:	b900      	cbnz	r0, 1e7ec <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   1e7ea:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1e7ec:	2300      	movs	r3, #0
   1e7ee:	461a      	mov	r2, r3
   1e7f0:	4619      	mov	r1, r3
   1e7f2:	4618      	mov	r0, r3
   1e7f4:	f7ea fce6 	bl	91c4 <__assert_func>
   1e7f8:	00027434 	.word	0x00027434

0001e7fc <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1e7fc:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1e7fe:	f7ff ffd3 	bl	1e7a8 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
   1e802:	f7ff ffeb 	bl	1e7dc <nrf52_periph_create_spi>
}
   1e806:	bd08      	pop	{r3, pc}

0001e808 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
   1e808:	b510      	push	{r4, lr}
   1e80a:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   1e80c:	7a03      	ldrb	r3, [r0, #8]
   1e80e:	f013 0f01 	tst.w	r3, #1
   1e812:	d008      	beq.n	1e826 <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e814:	6803      	ldr	r3, [r0, #0]
   1e816:	2201      	movs	r2, #1
   1e818:	4908      	ldr	r1, [pc, #32]	; (1e83c <json_encode_object_start+0x34>)
   1e81a:	6840      	ldr	r0, [r0, #4]
   1e81c:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e81e:	7a23      	ldrb	r3, [r4, #8]
   1e820:	f36f 0300 	bfc	r3, #0, #1
   1e824:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   1e826:	6823      	ldr	r3, [r4, #0]
   1e828:	2201      	movs	r2, #1
   1e82a:	4905      	ldr	r1, [pc, #20]	; (1e840 <json_encode_object_start+0x38>)
   1e82c:	6860      	ldr	r0, [r4, #4]
   1e82e:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1e830:	7a23      	ldrb	r3, [r4, #8]
   1e832:	f36f 0300 	bfc	r3, #0, #1
   1e836:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1e838:	2000      	movs	r0, #0
   1e83a:	bd10      	pop	{r4, pc}
   1e83c:	00027438 	.word	0x00027438
   1e840:	0002743c 	.word	0x0002743c

0001e844 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   1e844:	b570      	push	{r4, r5, r6, lr}
   1e846:	4604      	mov	r4, r0
   1e848:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   1e84a:	7a03      	ldrb	r3, [r0, #8]
   1e84c:	f013 0f01 	tst.w	r3, #1
   1e850:	d008      	beq.n	1e864 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e852:	6803      	ldr	r3, [r0, #0]
   1e854:	2201      	movs	r2, #1
   1e856:	490d      	ldr	r1, [pc, #52]	; (1e88c <json_encode_object_key+0x48>)
   1e858:	6840      	ldr	r0, [r0, #4]
   1e85a:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e85c:	7a23      	ldrb	r3, [r4, #8]
   1e85e:	f36f 0300 	bfc	r3, #0, #1
   1e862:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e864:	6823      	ldr	r3, [r4, #0]
   1e866:	2201      	movs	r2, #1
   1e868:	4909      	ldr	r1, [pc, #36]	; (1e890 <json_encode_object_key+0x4c>)
   1e86a:	6860      	ldr	r0, [r4, #4]
   1e86c:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1e86e:	6826      	ldr	r6, [r4, #0]
   1e870:	4628      	mov	r0, r5
   1e872:	f7f1 ff49 	bl	10708 <strlen>
   1e876:	4602      	mov	r2, r0
   1e878:	4629      	mov	r1, r5
   1e87a:	6860      	ldr	r0, [r4, #4]
   1e87c:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1e87e:	6823      	ldr	r3, [r4, #0]
   1e880:	2203      	movs	r2, #3
   1e882:	4904      	ldr	r1, [pc, #16]	; (1e894 <json_encode_object_key+0x50>)
   1e884:	6860      	ldr	r0, [r4, #4]
   1e886:	4798      	blx	r3

    return (0);
}
   1e888:	2000      	movs	r0, #0
   1e88a:	bd70      	pop	{r4, r5, r6, pc}
   1e88c:	00027438 	.word	0x00027438
   1e890:	000251a8 	.word	0x000251a8
   1e894:	00027440 	.word	0x00027440

0001e898 <json_encode_object_entry>:
EXPORT_SYMBOL(json_encode_object_key);

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
   1e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e89a:	4604      	mov	r4, r0
   1e89c:	460d      	mov	r5, r1
   1e89e:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
   1e8a0:	7a03      	ldrb	r3, [r0, #8]
   1e8a2:	f013 0f01 	tst.w	r3, #1
   1e8a6:	d008      	beq.n	1e8ba <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1e8a8:	6803      	ldr	r3, [r0, #0]
   1e8aa:	2201      	movs	r2, #1
   1e8ac:	4911      	ldr	r1, [pc, #68]	; (1e8f4 <json_encode_object_entry+0x5c>)
   1e8ae:	6840      	ldr	r0, [r0, #4]
   1e8b0:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1e8b2:	7a23      	ldrb	r3, [r4, #8]
   1e8b4:	f36f 0300 	bfc	r3, #0, #1
   1e8b8:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e8ba:	6823      	ldr	r3, [r4, #0]
   1e8bc:	2201      	movs	r2, #1
   1e8be:	490e      	ldr	r1, [pc, #56]	; (1e8f8 <json_encode_object_entry+0x60>)
   1e8c0:	6860      	ldr	r0, [r4, #4]
   1e8c2:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1e8c4:	6827      	ldr	r7, [r4, #0]
   1e8c6:	4628      	mov	r0, r5
   1e8c8:	f7f1 ff1e 	bl	10708 <strlen>
   1e8cc:	4602      	mov	r2, r0
   1e8ce:	4629      	mov	r1, r5
   1e8d0:	6860      	ldr	r0, [r4, #4]
   1e8d2:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1e8d4:	6823      	ldr	r3, [r4, #0]
   1e8d6:	2203      	movs	r2, #3
   1e8d8:	4908      	ldr	r1, [pc, #32]	; (1e8fc <json_encode_object_entry+0x64>)
   1e8da:	6860      	ldr	r0, [r4, #4]
   1e8dc:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   1e8de:	4631      	mov	r1, r6
   1e8e0:	4620      	mov	r0, r4
   1e8e2:	f000 f80d 	bl	1e900 <json_encode_value>
    if (rc != 0) {
   1e8e6:	b918      	cbnz	r0, 1e8f0 <json_encode_object_entry+0x58>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1e8e8:	7a23      	ldrb	r3, [r4, #8]
   1e8ea:	f043 0301 	orr.w	r3, r3, #1
   1e8ee:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1e8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8f2:	bf00      	nop
   1e8f4:	00027438 	.word	0x00027438
   1e8f8:	000251a8 	.word	0x000251a8
   1e8fc:	00027440 	.word	0x00027440

0001e900 <json_encode_value>:
{
   1e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e902:	4605      	mov	r5, r0
   1e904:	460c      	mov	r4, r1
    switch (jv->jv_type) {
   1e906:	784b      	ldrb	r3, [r1, #1]
   1e908:	2b06      	cmp	r3, #6
   1e90a:	f200 8141 	bhi.w	1eb90 <json_encode_value+0x290>
   1e90e:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e912:	0007      	.short	0x0007
   1e914:	002b001c 	.word	0x002b001c
   1e918:	00fa005a 	.word	0x00fa005a
   1e91c:	003a0120 	.word	0x003a0120
            len = sprintf(encoder->je_encode_buf, "%s",
   1e920:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
   1e924:	688a      	ldr	r2, [r1, #8]
   1e926:	68cb      	ldr	r3, [r1, #12]
            len = sprintf(encoder->je_encode_buf, "%s",
   1e928:	4313      	orrs	r3, r2
   1e92a:	d00c      	beq.n	1e946 <json_encode_value+0x46>
   1e92c:	4a9a      	ldr	r2, [pc, #616]	; (1eb98 <json_encode_value+0x298>)
   1e92e:	499b      	ldr	r1, [pc, #620]	; (1eb9c <json_encode_value+0x29c>)
   1e930:	4630      	mov	r0, r6
   1e932:	f002 fda4 	bl	2147e <sprintf>
   1e936:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e938:	682b      	ldr	r3, [r5, #0]
   1e93a:	4631      	mov	r1, r6
   1e93c:	6868      	ldr	r0, [r5, #4]
   1e93e:	4798      	blx	r3
    return (0);
   1e940:	2300      	movs	r3, #0
}
   1e942:	4618      	mov	r0, r3
   1e944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            len = sprintf(encoder->je_encode_buf, "%s",
   1e946:	4a96      	ldr	r2, [pc, #600]	; (1eba0 <json_encode_value+0x2a0>)
   1e948:	e7f1      	b.n	1e92e <json_encode_value+0x2e>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   1e94a:	f100 0609 	add.w	r6, r0, #9
   1e94e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1e952:	4994      	ldr	r1, [pc, #592]	; (1eba4 <json_encode_value+0x2a4>)
   1e954:	4630      	mov	r0, r6
   1e956:	f002 fd92 	bl	2147e <sprintf>
   1e95a:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e95c:	682b      	ldr	r3, [r5, #0]
   1e95e:	4631      	mov	r1, r6
   1e960:	6868      	ldr	r0, [r5, #4]
   1e962:	4798      	blx	r3
    return (0);
   1e964:	2300      	movs	r3, #0
            break;
   1e966:	e7ec      	b.n	1e942 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   1e968:	f100 0609 	add.w	r6, r0, #9
   1e96c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1e970:	498d      	ldr	r1, [pc, #564]	; (1eba8 <json_encode_value+0x2a8>)
   1e972:	4630      	mov	r0, r6
   1e974:	f002 fd83 	bl	2147e <sprintf>
   1e978:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e97a:	682b      	ldr	r3, [r5, #0]
   1e97c:	4631      	mov	r1, r6
   1e97e:	6868      	ldr	r0, [r5, #4]
   1e980:	4798      	blx	r3
    return (0);
   1e982:	2300      	movs	r3, #0
            break;
   1e984:	e7dd      	b.n	1e942 <json_encode_value+0x42>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   1e986:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
   1e98a:	4632      	mov	r2, r6
   1e98c:	463b      	mov	r3, r7
   1e98e:	4630      	mov	r0, r6
   1e990:	4639      	mov	r1, r7
   1e992:	f005 f8df 	bl	23b54 <__aeabi_dcmpun>
   1e996:	b970      	cbnz	r0, 1e9b6 <json_encode_value+0xb6>
            len = sprintf(encoder->je_encode_buf,
   1e998:	4632      	mov	r2, r6
   1e99a:	463b      	mov	r3, r7
   1e99c:	4983      	ldr	r1, [pc, #524]	; (1ebac <json_encode_value+0x2ac>)
   1e99e:	f105 0009 	add.w	r0, r5, #9
   1e9a2:	f002 fd6c 	bl	2147e <sprintf>
   1e9a6:	4602      	mov	r2, r0
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1e9a8:	4629      	mov	r1, r5
   1e9aa:	f851 3b09 	ldr.w	r3, [r1], #9
   1e9ae:	6868      	ldr	r0, [r5, #4]
   1e9b0:	4798      	blx	r3
    return (0);
   1e9b2:	2300      	movs	r3, #0
        break;
   1e9b4:	e7c5      	b.n	1e942 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "null");
   1e9b6:	4b7e      	ldr	r3, [pc, #504]	; (1ebb0 <json_encode_value+0x2b0>)
   1e9b8:	6818      	ldr	r0, [r3, #0]
   1e9ba:	f8c5 0009 	str.w	r0, [r5, #9]
   1e9be:	791b      	ldrb	r3, [r3, #4]
   1e9c0:	736b      	strb	r3, [r5, #13]
   1e9c2:	2204      	movs	r2, #4
   1e9c4:	e7f0      	b.n	1e9a8 <json_encode_value+0xa8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1e9c6:	6803      	ldr	r3, [r0, #0]
   1e9c8:	2201      	movs	r2, #1
   1e9ca:	497a      	ldr	r1, [pc, #488]	; (1ebb4 <json_encode_value+0x2b4>)
   1e9cc:	6840      	ldr	r0, [r0, #4]
   1e9ce:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e9d0:	2600      	movs	r6, #0
   1e9d2:	e012      	b.n	1e9fa <json_encode_value+0xfa>
   1e9d4:	2b5c      	cmp	r3, #92	; 0x5c
   1e9d6:	d004      	beq.n	1e9e2 <json_encode_value+0xe2>
                        encoder->je_write(encoder->je_arg,
   1e9d8:	682b      	ldr	r3, [r5, #0]
   1e9da:	2201      	movs	r2, #1
   1e9dc:	6868      	ldr	r0, [r5, #4]
   1e9de:	4798      	blx	r3
                        break;
   1e9e0:	e00a      	b.n	1e9f8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\",
   1e9e2:	682b      	ldr	r3, [r5, #0]
   1e9e4:	2201      	movs	r2, #1
   1e9e6:	4974      	ldr	r1, [pc, #464]	; (1ebb8 <json_encode_value+0x2b8>)
   1e9e8:	6868      	ldr	r0, [r5, #4]
   1e9ea:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
   1e9ec:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
   1e9ee:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
   1e9f0:	2201      	movs	r2, #1
   1e9f2:	4439      	add	r1, r7
   1e9f4:	6868      	ldr	r0, [r5, #4]
   1e9f6:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1e9f8:	3601      	adds	r6, #1
   1e9fa:	8863      	ldrh	r3, [r4, #2]
   1e9fc:	42b3      	cmp	r3, r6
   1e9fe:	dd7b      	ble.n	1eaf8 <json_encode_value+0x1f8>
                switch (jv->jv_val.str[i]) {
   1ea00:	68a3      	ldr	r3, [r4, #8]
   1ea02:	4637      	mov	r7, r6
   1ea04:	1999      	adds	r1, r3, r6
   1ea06:	5d9b      	ldrb	r3, [r3, r6]
   1ea08:	2b2f      	cmp	r3, #47	; 0x2f
   1ea0a:	d8e3      	bhi.n	1e9d4 <json_encode_value+0xd4>
   1ea0c:	2b08      	cmp	r3, #8
   1ea0e:	d3e3      	bcc.n	1e9d8 <json_encode_value+0xd8>
   1ea10:	3b08      	subs	r3, #8
   1ea12:	2b27      	cmp	r3, #39	; 0x27
   1ea14:	d8e0      	bhi.n	1e9d8 <json_encode_value+0xd8>
   1ea16:	a201      	add	r2, pc, #4	; (adr r2, 1ea1c <json_encode_value+0x11c>)
   1ea18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ea1c:	0001eaed 	.word	0x0001eaed
   1ea20:	0001eabd 	.word	0x0001eabd
   1ea24:	0001ead5 	.word	0x0001ead5
   1ea28:	0001e9d9 	.word	0x0001e9d9
   1ea2c:	0001eae1 	.word	0x0001eae1
   1ea30:	0001eac9 	.word	0x0001eac9
   1ea34:	0001e9d9 	.word	0x0001e9d9
   1ea38:	0001e9d9 	.word	0x0001e9d9
   1ea3c:	0001e9d9 	.word	0x0001e9d9
   1ea40:	0001e9d9 	.word	0x0001e9d9
   1ea44:	0001e9d9 	.word	0x0001e9d9
   1ea48:	0001e9d9 	.word	0x0001e9d9
   1ea4c:	0001e9d9 	.word	0x0001e9d9
   1ea50:	0001e9d9 	.word	0x0001e9d9
   1ea54:	0001e9d9 	.word	0x0001e9d9
   1ea58:	0001e9d9 	.word	0x0001e9d9
   1ea5c:	0001e9d9 	.word	0x0001e9d9
   1ea60:	0001e9d9 	.word	0x0001e9d9
   1ea64:	0001e9d9 	.word	0x0001e9d9
   1ea68:	0001e9d9 	.word	0x0001e9d9
   1ea6c:	0001e9d9 	.word	0x0001e9d9
   1ea70:	0001e9d9 	.word	0x0001e9d9
   1ea74:	0001e9d9 	.word	0x0001e9d9
   1ea78:	0001e9d9 	.word	0x0001e9d9
   1ea7c:	0001e9d9 	.word	0x0001e9d9
   1ea80:	0001e9d9 	.word	0x0001e9d9
   1ea84:	0001e9e3 	.word	0x0001e9e3
   1ea88:	0001e9d9 	.word	0x0001e9d9
   1ea8c:	0001e9d9 	.word	0x0001e9d9
   1ea90:	0001e9d9 	.word	0x0001e9d9
   1ea94:	0001e9d9 	.word	0x0001e9d9
   1ea98:	0001e9d9 	.word	0x0001e9d9
   1ea9c:	0001e9d9 	.word	0x0001e9d9
   1eaa0:	0001e9d9 	.word	0x0001e9d9
   1eaa4:	0001e9d9 	.word	0x0001e9d9
   1eaa8:	0001e9d9 	.word	0x0001e9d9
   1eaac:	0001e9d9 	.word	0x0001e9d9
   1eab0:	0001e9d9 	.word	0x0001e9d9
   1eab4:	0001e9d9 	.word	0x0001e9d9
   1eab8:	0001e9e3 	.word	0x0001e9e3
                        encoder->je_write(encoder->je_arg, "\\t",
   1eabc:	682b      	ldr	r3, [r5, #0]
   1eabe:	2202      	movs	r2, #2
   1eac0:	493e      	ldr	r1, [pc, #248]	; (1ebbc <json_encode_value+0x2bc>)
   1eac2:	6868      	ldr	r0, [r5, #4]
   1eac4:	4798      	blx	r3
                        break;
   1eac6:	e797      	b.n	1e9f8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\r",
   1eac8:	682b      	ldr	r3, [r5, #0]
   1eaca:	2202      	movs	r2, #2
   1eacc:	493c      	ldr	r1, [pc, #240]	; (1ebc0 <json_encode_value+0x2c0>)
   1eace:	6868      	ldr	r0, [r5, #4]
   1ead0:	4798      	blx	r3
                        break;
   1ead2:	e791      	b.n	1e9f8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\n",
   1ead4:	682b      	ldr	r3, [r5, #0]
   1ead6:	2202      	movs	r2, #2
   1ead8:	493a      	ldr	r1, [pc, #232]	; (1ebc4 <json_encode_value+0x2c4>)
   1eada:	6868      	ldr	r0, [r5, #4]
   1eadc:	4798      	blx	r3
                        break;
   1eade:	e78b      	b.n	1e9f8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\f",
   1eae0:	682b      	ldr	r3, [r5, #0]
   1eae2:	2202      	movs	r2, #2
   1eae4:	4938      	ldr	r1, [pc, #224]	; (1ebc8 <json_encode_value+0x2c8>)
   1eae6:	6868      	ldr	r0, [r5, #4]
   1eae8:	4798      	blx	r3
                        break;
   1eaea:	e785      	b.n	1e9f8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\b",
   1eaec:	682b      	ldr	r3, [r5, #0]
   1eaee:	2202      	movs	r2, #2
   1eaf0:	4936      	ldr	r1, [pc, #216]	; (1ebcc <json_encode_value+0x2cc>)
   1eaf2:	6868      	ldr	r0, [r5, #4]
   1eaf4:	4798      	blx	r3
                        break;
   1eaf6:	e77f      	b.n	1e9f8 <json_encode_value+0xf8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1eaf8:	682b      	ldr	r3, [r5, #0]
   1eafa:	2201      	movs	r2, #1
   1eafc:	492d      	ldr	r1, [pc, #180]	; (1ebb4 <json_encode_value+0x2b4>)
   1eafe:	6868      	ldr	r0, [r5, #4]
   1eb00:	4798      	blx	r3
    return (0);
   1eb02:	2300      	movs	r3, #0
            break;
   1eb04:	e71d      	b.n	1e942 <json_encode_value+0x42>
            JSON_ENCODE_ARRAY_START(encoder);
   1eb06:	6803      	ldr	r3, [r0, #0]
   1eb08:	2201      	movs	r2, #1
   1eb0a:	4931      	ldr	r1, [pc, #196]	; (1ebd0 <json_encode_value+0x2d0>)
   1eb0c:	6840      	ldr	r0, [r0, #4]
   1eb0e:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1eb10:	2600      	movs	r6, #0
   1eb12:	e000      	b.n	1eb16 <json_encode_value+0x216>
   1eb14:	3601      	adds	r6, #1
   1eb16:	8863      	ldrh	r3, [r4, #2]
   1eb18:	42b3      	cmp	r3, r6
   1eb1a:	dd13      	ble.n	1eb44 <json_encode_value+0x244>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   1eb1c:	68e3      	ldr	r3, [r4, #12]
   1eb1e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1eb22:	4628      	mov	r0, r5
   1eb24:	f7ff feec 	bl	1e900 <json_encode_value>
                if (rc != 0) {
   1eb28:	4603      	mov	r3, r0
   1eb2a:	2800      	cmp	r0, #0
   1eb2c:	f47f af09 	bne.w	1e942 <json_encode_value+0x42>
                if (i != jv->jv_len - 1) {
   1eb30:	8863      	ldrh	r3, [r4, #2]
   1eb32:	3b01      	subs	r3, #1
   1eb34:	42b3      	cmp	r3, r6
   1eb36:	d0ed      	beq.n	1eb14 <json_encode_value+0x214>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1eb38:	682b      	ldr	r3, [r5, #0]
   1eb3a:	2201      	movs	r2, #1
   1eb3c:	4925      	ldr	r1, [pc, #148]	; (1ebd4 <json_encode_value+0x2d4>)
   1eb3e:	6868      	ldr	r0, [r5, #4]
   1eb40:	4798      	blx	r3
   1eb42:	e7e7      	b.n	1eb14 <json_encode_value+0x214>
            JSON_ENCODE_ARRAY_END(encoder);
   1eb44:	682b      	ldr	r3, [r5, #0]
   1eb46:	2201      	movs	r2, #1
   1eb48:	4923      	ldr	r1, [pc, #140]	; (1ebd8 <json_encode_value+0x2d8>)
   1eb4a:	6868      	ldr	r0, [r5, #4]
   1eb4c:	4798      	blx	r3
    return (0);
   1eb4e:	2300      	movs	r3, #0
            break;
   1eb50:	e6f7      	b.n	1e942 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_START(encoder);
   1eb52:	6803      	ldr	r3, [r0, #0]
   1eb54:	2201      	movs	r2, #1
   1eb56:	4921      	ldr	r1, [pc, #132]	; (1ebdc <json_encode_value+0x2dc>)
   1eb58:	6840      	ldr	r0, [r0, #4]
   1eb5a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1eb5c:	2600      	movs	r6, #0
   1eb5e:	e000      	b.n	1eb62 <json_encode_value+0x262>
   1eb60:	3601      	adds	r6, #1
   1eb62:	8863      	ldrh	r3, [r4, #2]
   1eb64:	42b3      	cmp	r3, r6
   1eb66:	dd0c      	ble.n	1eb82 <json_encode_value+0x282>
                        jv->jv_val.composite.keys[i],
   1eb68:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
   1eb6a:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
   1eb6c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   1eb70:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1eb74:	4628      	mov	r0, r5
   1eb76:	f7ff fe8f 	bl	1e898 <json_encode_object_entry>
                if (rc != 0) {
   1eb7a:	4603      	mov	r3, r0
   1eb7c:	2800      	cmp	r0, #0
   1eb7e:	d0ef      	beq.n	1eb60 <json_encode_value+0x260>
   1eb80:	e6df      	b.n	1e942 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_END(encoder);
   1eb82:	682b      	ldr	r3, [r5, #0]
   1eb84:	2201      	movs	r2, #1
   1eb86:	4916      	ldr	r1, [pc, #88]	; (1ebe0 <json_encode_value+0x2e0>)
   1eb88:	6868      	ldr	r0, [r5, #4]
   1eb8a:	4798      	blx	r3
    return (0);
   1eb8c:	2300      	movs	r3, #0
            break;
   1eb8e:	e6d8      	b.n	1e942 <json_encode_value+0x42>
    switch (jv->jv_type) {
   1eb90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb94:	e6d5      	b.n	1e942 <json_encode_value+0x42>
   1eb96:	bf00      	nop
   1eb98:	0002744c 	.word	0x0002744c
   1eb9c:	00025750 	.word	0x00025750
   1eba0:	00027444 	.word	0x00027444
   1eba4:	00027454 	.word	0x00027454
   1eba8:	0002745c 	.word	0x0002745c
   1ebac:	0002746c 	.word	0x0002746c
   1ebb0:	00027464 	.word	0x00027464
   1ebb4:	000251a8 	.word	0x000251a8
   1ebb8:	00027470 	.word	0x00027470
   1ebbc:	00027474 	.word	0x00027474
   1ebc0:	00027478 	.word	0x00027478
   1ebc4:	0002747c 	.word	0x0002747c
   1ebc8:	00027480 	.word	0x00027480
   1ebcc:	00027484 	.word	0x00027484
   1ebd0:	00027488 	.word	0x00027488
   1ebd4:	00027438 	.word	0x00027438
   1ebd8:	000267a4 	.word	0x000267a4
   1ebdc:	0002743c 	.word	0x0002743c
   1ebe0:	0002748c 	.word	0x0002748c

0001ebe4 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   1ebe4:	b510      	push	{r4, lr}
   1ebe6:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   1ebe8:	6803      	ldr	r3, [r0, #0]
   1ebea:	2201      	movs	r2, #1
   1ebec:	4904      	ldr	r1, [pc, #16]	; (1ec00 <json_encode_object_finish+0x1c>)
   1ebee:	6840      	ldr	r0, [r0, #4]
   1ebf0:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   1ebf2:	7a23      	ldrb	r3, [r4, #8]
   1ebf4:	f043 0301 	orr.w	r3, r3, #1
   1ebf8:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1ebfa:	2000      	movs	r0, #0
   1ebfc:	bd10      	pop	{r4, pc}
   1ebfe:	bf00      	nop
   1ec00:	0002748c 	.word	0x0002748c

0001ec04 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
   1ec04:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
   1ec06:	f7ff fe1d 	bl	1e844 <json_encode_object_key>
}
   1ec0a:	bd08      	pop	{r3, pc}

0001ec0c <json_encode_array_start>:
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   1ec0c:	b510      	push	{r4, lr}
   1ec0e:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   1ec10:	6803      	ldr	r3, [r0, #0]
   1ec12:	2201      	movs	r2, #1
   1ec14:	4904      	ldr	r1, [pc, #16]	; (1ec28 <json_encode_array_start+0x1c>)
   1ec16:	6840      	ldr	r0, [r0, #4]
   1ec18:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1ec1a:	7a23      	ldrb	r3, [r4, #8]
   1ec1c:	f36f 0300 	bfc	r3, #0, #1
   1ec20:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1ec22:	2000      	movs	r0, #0
   1ec24:	bd10      	pop	{r4, pc}
   1ec26:	bf00      	nop
   1ec28:	00027488 	.word	0x00027488

0001ec2c <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   1ec2c:	b538      	push	{r3, r4, r5, lr}
   1ec2e:	4604      	mov	r4, r0
   1ec30:	460d      	mov	r5, r1
    int rc;

    if (encoder->je_wr_commas) {
   1ec32:	7a03      	ldrb	r3, [r0, #8]
   1ec34:	f013 0f01 	tst.w	r3, #1
   1ec38:	d008      	beq.n	1ec4c <json_encode_array_value+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1ec3a:	6803      	ldr	r3, [r0, #0]
   1ec3c:	2201      	movs	r2, #1
   1ec3e:	4908      	ldr	r1, [pc, #32]	; (1ec60 <json_encode_array_value+0x34>)
   1ec40:	6840      	ldr	r0, [r0, #4]
   1ec42:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1ec44:	7a23      	ldrb	r3, [r4, #8]
   1ec46:	f36f 0300 	bfc	r3, #0, #1
   1ec4a:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   1ec4c:	4629      	mov	r1, r5
   1ec4e:	4620      	mov	r0, r4
   1ec50:	f7ff fe56 	bl	1e900 <json_encode_value>
    if (rc != 0) {
   1ec54:	b918      	cbnz	r0, 1ec5e <json_encode_array_value+0x32>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1ec56:	7a23      	ldrb	r3, [r4, #8]
   1ec58:	f043 0301 	orr.w	r3, r3, #1
   1ec5c:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1ec5e:	bd38      	pop	{r3, r4, r5, pc}
   1ec60:	00027438 	.word	0x00027438

0001ec64 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   1ec64:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   1ec66:	7a03      	ldrb	r3, [r0, #8]
   1ec68:	f043 0301 	orr.w	r3, r3, #1
   1ec6c:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1ec6e:	6803      	ldr	r3, [r0, #0]
   1ec70:	2201      	movs	r2, #1
   1ec72:	4902      	ldr	r1, [pc, #8]	; (1ec7c <json_encode_array_finish+0x18>)
   1ec74:	6840      	ldr	r0, [r0, #4]
   1ec76:	4798      	blx	r3

    return (0);
}
   1ec78:	2000      	movs	r0, #0
   1ec7a:	bd08      	pop	{r3, pc}
   1ec7c:	000267a4 	.word	0x000267a4

0001ec80 <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   1ec80:	4603      	mov	r3, r0
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   1ec82:	68c1      	ldr	r1, [r0, #12]
   1ec84:	6942      	ldr	r2, [r0, #20]
   1ec86:	eb01 0c02 	add.w	ip, r1, r2
   1ec8a:	6900      	ldr	r0, [r0, #16]
   1ec8c:	4584      	cmp	ip, r0
   1ec8e:	d901      	bls.n	1ec94 <json_read_next+0x14>
        c = *(decoder->start_buf + decoder->current_position);
        decoder->current_position++;
        return c;
    }
   return '\0';
   1ec90:	2000      	movs	r0, #0
}
   1ec92:	4770      	bx	lr
        c = *(decoder->start_buf + decoder->current_position);
   1ec94:	5c88      	ldrb	r0, [r1, r2]
        decoder->current_position++;
   1ec96:	3201      	adds	r2, #1
   1ec98:	615a      	str	r2, [r3, #20]
        return c;
   1ec9a:	4770      	bx	lr

0001ec9c <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   1ec9c:	6943      	ldr	r3, [r0, #20]
   1ec9e:	b90b      	cbnz	r3, 1eca4 <json_read_prev+0x8>
       decoder->current_position--;
       c = *(decoder->start_buf + decoder->current_position);
       return c;
    }
    /* can't rewind */
    return '\0';
   1eca0:	2000      	movs	r0, #0
}
   1eca2:	4770      	bx	lr
       decoder->current_position--;
   1eca4:	3b01      	subs	r3, #1
   1eca6:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   1eca8:	68c2      	ldr	r2, [r0, #12]
   1ecaa:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   1ecac:	4770      	bx	lr

0001ecae <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   1ecae:	b538      	push	{r3, r4, r5, lr}
   1ecb0:	4604      	mov	r4, r0
   1ecb2:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   1ecb4:	6925      	ldr	r5, [r4, #16]
   1ecb6:	68e3      	ldr	r3, [r4, #12]
   1ecb8:	6961      	ldr	r1, [r4, #20]
   1ecba:	4419      	add	r1, r3
   1ecbc:	1a6d      	subs	r5, r5, r1
    if (size > remlen) {
   1ecbe:	4295      	cmp	r5, r2
   1ecc0:	db00      	blt.n	1ecc4 <json_readn+0x16>
   1ecc2:	4615      	mov	r5, r2
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   1ecc4:	462a      	mov	r2, r5
   1ecc6:	f7f1 fcdb 	bl	10680 <memcpy>
    decoder->current_position += size;
   1ecca:	6963      	ldr	r3, [r4, #20]
   1eccc:	442b      	add	r3, r5
   1ecce:	6163      	str	r3, [r4, #20]
    return size;
}
   1ecd0:	4628      	mov	r0, r5
   1ecd2:	bd38      	pop	{r3, r4, r5, pc}

0001ecd4 <timescale_QUpdate>:
   1ecd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecd8:	4614      	mov	r4, r2
   1ecda:	461d      	mov	r5, r3
   1ecdc:	460f      	mov	r7, r1
   1ecde:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1ece0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1ece4:	4682      	mov	sl, r0
   1ece6:	4629      	mov	r1, r5
   1ece8:	4620      	mov	r0, r4
   1ecea:	f004 fc99 	bl	23620 <__aeabi_dmul>
   1ecee:	4622      	mov	r2, r4
   1ecf0:	462b      	mov	r3, r5
   1ecf2:	f004 fc95 	bl	23620 <__aeabi_dmul>
   1ecf6:	2200      	movs	r2, #0
   1ecf8:	4b4f      	ldr	r3, [pc, #316]	; (1ee38 <timescale_QUpdate+0x164>)
   1ecfa:	f004 fdbb 	bl	23874 <__aeabi_ddiv>
   1ecfe:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ed02:	f004 fad7 	bl	232b4 <__adddf3>
   1ed06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1ed0a:	4680      	mov	r8, r0
   1ed0c:	4689      	mov	r9, r1
   1ed0e:	4620      	mov	r0, r4
   1ed10:	4629      	mov	r1, r5
   1ed12:	f004 fc85 	bl	23620 <__aeabi_dmul>
   1ed16:	4622      	mov	r2, r4
   1ed18:	462b      	mov	r3, r5
   1ed1a:	f004 fc81 	bl	23620 <__aeabi_dmul>
   1ed1e:	4622      	mov	r2, r4
   1ed20:	462b      	mov	r3, r5
   1ed22:	f004 fc7d 	bl	23620 <__aeabi_dmul>
   1ed26:	4622      	mov	r2, r4
   1ed28:	462b      	mov	r3, r5
   1ed2a:	f004 fc79 	bl	23620 <__aeabi_dmul>
   1ed2e:	2200      	movs	r2, #0
   1ed30:	4b42      	ldr	r3, [pc, #264]	; (1ee3c <timescale_QUpdate+0x168>)
   1ed32:	f004 fd9f 	bl	23874 <__aeabi_ddiv>
   1ed36:	4602      	mov	r2, r0
   1ed38:	460b      	mov	r3, r1
   1ed3a:	4640      	mov	r0, r8
   1ed3c:	4649      	mov	r1, r9
   1ed3e:	f004 fab9 	bl	232b4 <__adddf3>
   1ed42:	e9c6 0100 	strd	r0, r1, [r6]
   1ed46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1ed4a:	4620      	mov	r0, r4
   1ed4c:	4629      	mov	r1, r5
   1ed4e:	f004 fc67 	bl	23620 <__aeabi_dmul>
   1ed52:	4622      	mov	r2, r4
   1ed54:	462b      	mov	r3, r5
   1ed56:	f004 fc63 	bl	23620 <__aeabi_dmul>
   1ed5a:	4622      	mov	r2, r4
   1ed5c:	462b      	mov	r3, r5
   1ed5e:	f004 fc5f 	bl	23620 <__aeabi_dmul>
   1ed62:	2200      	movs	r2, #0
   1ed64:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1ed68:	f004 fc5a 	bl	23620 <__aeabi_dmul>
   1ed6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1ed70:	4680      	mov	r8, r0
   1ed72:	4689      	mov	r9, r1
   1ed74:	4620      	mov	r0, r4
   1ed76:	4629      	mov	r1, r5
   1ed78:	f004 fc52 	bl	23620 <__aeabi_dmul>
   1ed7c:	2200      	movs	r2, #0
   1ed7e:	4b30      	ldr	r3, [pc, #192]	; (1ee40 <timescale_QUpdate+0x16c>)
   1ed80:	f004 fc4e 	bl	23620 <__aeabi_dmul>
   1ed84:	4602      	mov	r2, r0
   1ed86:	460b      	mov	r3, r1
   1ed88:	4640      	mov	r0, r8
   1ed8a:	4649      	mov	r1, r9
   1ed8c:	f004 fa92 	bl	232b4 <__adddf3>
   1ed90:	4680      	mov	r8, r0
   1ed92:	4689      	mov	r9, r1
   1ed94:	e9c6 8902 	strd	r8, r9, [r6, #8]
   1ed98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1ed9c:	4620      	mov	r0, r4
   1ed9e:	4629      	mov	r1, r5
   1eda0:	f004 fc3e 	bl	23620 <__aeabi_dmul>
   1eda4:	4622      	mov	r2, r4
   1eda6:	462b      	mov	r3, r5
   1eda8:	f004 fc3a 	bl	23620 <__aeabi_dmul>
   1edac:	2200      	movs	r2, #0
   1edae:	4b25      	ldr	r3, [pc, #148]	; (1ee44 <timescale_QUpdate+0x170>)
   1edb0:	f004 fd60 	bl	23874 <__aeabi_ddiv>
   1edb4:	f8ba 3000 	ldrh.w	r3, [sl]
   1edb8:	9301      	str	r3, [sp, #4]
   1edba:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1edbe:	eb06 0a0b 	add.w	sl, r6, fp
   1edc2:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1edc6:	e9ca 8900 	strd	r8, r9, [sl]
   1edca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1edce:	4620      	mov	r0, r4
   1edd0:	4629      	mov	r1, r5
   1edd2:	f004 fc25 	bl	23620 <__aeabi_dmul>
   1edd6:	4622      	mov	r2, r4
   1edd8:	462b      	mov	r3, r5
   1edda:	f004 fc21 	bl	23620 <__aeabi_dmul>
   1edde:	2200      	movs	r2, #0
   1ede0:	4b15      	ldr	r3, [pc, #84]	; (1ee38 <timescale_QUpdate+0x164>)
   1ede2:	f004 fd47 	bl	23874 <__aeabi_ddiv>
   1ede6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1edea:	f004 fa63 	bl	232b4 <__adddf3>
   1edee:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1edf2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1edf6:	4620      	mov	r0, r4
   1edf8:	4629      	mov	r1, r5
   1edfa:	f004 fc11 	bl	23620 <__aeabi_dmul>
   1edfe:	2200      	movs	r2, #0
   1ee00:	4b0f      	ldr	r3, [pc, #60]	; (1ee40 <timescale_QUpdate+0x16c>)
   1ee02:	f004 fc0d 	bl	23620 <__aeabi_dmul>
   1ee06:	f10b 0810 	add.w	r8, fp, #16
   1ee0a:	44b0      	add	r8, r6
   1ee0c:	e9c8 0100 	strd	r0, r1, [r8]
   1ee10:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1ee14:	44da      	add	sl, fp
   1ee16:	e9ca 2300 	strd	r2, r3, [sl]
   1ee1a:	9901      	ldr	r1, [sp, #4]
   1ee1c:	e9d8 2300 	ldrd	r2, r3, [r8]
   1ee20:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   1ee24:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1ee28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1ee2c:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1ee30:	b003      	add	sp, #12
   1ee32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee36:	bf00      	nop
   1ee38:	40080000 	.word	0x40080000
   1ee3c:	40340000 	.word	0x40340000
   1ee40:	3fe00000 	.word	0x3fe00000
   1ee44:	40180000 	.word	0x40180000

0001ee48 <timescale_JofAx>:
   1ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee4c:	ec55 4b10 	vmov	r4, r5, d0
   1ee50:	4f1c      	ldr	r7, [pc, #112]	; (1eec4 <timescale_JofAx+0x7c>)
   1ee52:	b092      	sub	sp, #72	; 0x48
   1ee54:	2600      	movs	r6, #0
   1ee56:	ee10 2a10 	vmov	r2, s0
   1ee5a:	462b      	mov	r3, r5
   1ee5c:	4680      	mov	r8, r0
   1ee5e:	4629      	mov	r1, r5
   1ee60:	ee10 0a10 	vmov	r0, s0
   1ee64:	ed8d 0b02 	vstr	d0, [sp, #8]
   1ee68:	e9cd 6700 	strd	r6, r7, [sp]
   1ee6c:	f004 fbd8 	bl	23620 <__aeabi_dmul>
   1ee70:	2200      	movs	r2, #0
   1ee72:	4b15      	ldr	r3, [pc, #84]	; (1eec8 <timescale_JofAx+0x80>)
   1ee74:	f004 fbd4 	bl	23620 <__aeabi_dmul>
   1ee78:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1ee7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ee80:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1ee84:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   1ee88:	2300      	movs	r3, #0
   1ee8a:	2200      	movs	r2, #0
   1ee8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ee90:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   1ee94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1ee98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1ee9c:	f101 0518 	add.w	r5, r1, #24
   1eea0:	2300      	movs	r3, #0
   1eea2:	eb0d 0003 	add.w	r0, sp, r3
   1eea6:	185a      	adds	r2, r3, r1
   1eea8:	18ec      	adds	r4, r5, r3
   1eeaa:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   1eeae:	e8e2 6702 	strd	r6, r7, [r2], #8
   1eeb2:	42a2      	cmp	r2, r4
   1eeb4:	d1f9      	bne.n	1eeaa <timescale_JofAx+0x62>
   1eeb6:	3318      	adds	r3, #24
   1eeb8:	2b48      	cmp	r3, #72	; 0x48
   1eeba:	d1f2      	bne.n	1eea2 <timescale_JofAx+0x5a>
   1eebc:	b012      	add	sp, #72	; 0x48
   1eebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eec2:	bf00      	nop
   1eec4:	3ff00000 	.word	0x3ff00000
   1eec8:	3fe00000 	.word	0x3fe00000

0001eecc <timescale_Aofx>:
   1eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eed0:	4606      	mov	r6, r0
   1eed2:	b089      	sub	sp, #36	; 0x24
   1eed4:	2218      	movs	r2, #24
   1eed6:	2100      	movs	r1, #0
   1eed8:	a802      	add	r0, sp, #8
   1eeda:	f7f1 fbde 	bl	1069a <memset>
   1eede:	68b5      	ldr	r5, [r6, #8]
   1eee0:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   1eee2:	f106 0348 	add.w	r3, r6, #72	; 0x48
   1eee6:	ac02      	add	r4, sp, #8
   1eee8:	9301      	str	r3, [sp, #4]
   1eeea:	f105 0918 	add.w	r9, r5, #24
   1eeee:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   1eef2:	462f      	mov	r7, r5
   1eef4:	46b0      	mov	r8, r6
   1eef6:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   1eefa:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1eefe:	f004 fb8f 	bl	23620 <__aeabi_dmul>
   1ef02:	4602      	mov	r2, r0
   1ef04:	460b      	mov	r3, r1
   1ef06:	4650      	mov	r0, sl
   1ef08:	4659      	mov	r1, fp
   1ef0a:	f004 f9d3 	bl	232b4 <__adddf3>
   1ef0e:	454f      	cmp	r7, r9
   1ef10:	4682      	mov	sl, r0
   1ef12:	468b      	mov	fp, r1
   1ef14:	d1ef      	bne.n	1eef6 <timescale_Aofx+0x2a>
   1ef16:	9b01      	ldr	r3, [sp, #4]
   1ef18:	3618      	adds	r6, #24
   1ef1a:	429e      	cmp	r6, r3
   1ef1c:	e944 ab02 	strd	sl, fp, [r4, #-8]
   1ef20:	d1e5      	bne.n	1eeee <timescale_Aofx+0x22>
   1ef22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ef26:	e9c5 2300 	strd	r2, r3, [r5]
   1ef2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ef2e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1ef32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1ef36:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1ef3a:	b009      	add	sp, #36	; 0x24
   1ef3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ef40 <timescale_innovation>:
   1ef40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ef44:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   1ef46:	88aa      	ldrh	r2, [r5, #4]
   1ef48:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1ef4c:	4604      	mov	r4, r0
   1ef4e:	b37a      	cbz	r2, 1efb0 <timescale_innovation+0x70>
   1ef50:	6946      	ldr	r6, [r0, #20]
   1ef52:	4b37      	ldr	r3, [pc, #220]	; (1f030 <timescale_innovation+0xf0>)
   1ef54:	ed96 0b00 	vldr	d0, [r6]
   1ef58:	2200      	movs	r2, #0
   1ef5a:	ec51 0b10 	vmov	r0, r1, d0
   1ef5e:	ed8d 0b00 	vstr	d0, [sp]
   1ef62:	f004 fdcf 	bl	23b04 <__aeabi_dcmplt>
   1ef66:	f04f 0701 	mov.w	r7, #1
   1ef6a:	ed9d 0b00 	vldr	d0, [sp]
   1ef6e:	b900      	cbnz	r0, 1ef72 <timescale_innovation+0x32>
   1ef70:	4607      	mov	r7, r0
   1ef72:	792b      	ldrb	r3, [r5, #4]
   1ef74:	f367 1345 	bfi	r3, r7, #5, #1
   1ef78:	712b      	strb	r3, [r5, #4]
   1ef7a:	88ab      	ldrh	r3, [r5, #4]
   1ef7c:	069b      	lsls	r3, r3, #26
   1ef7e:	d509      	bpl.n	1ef94 <timescale_innovation+0x54>
   1ef80:	ed9f 1b29 	vldr	d1, [pc, #164]	; 1f028 <timescale_innovation+0xe8>
   1ef84:	f005 fa56 	bl	24434 <fmod>
   1ef88:	792b      	ldrb	r3, [r5, #4]
   1ef8a:	ed86 0b00 	vstr	d0, [r6]
   1ef8e:	f36f 1386 	bfc	r3, #6, #1
   1ef92:	712b      	strb	r3, [r5, #4]
   1ef94:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1f034 <timescale_innovation+0xf4>
   1ef98:	f04f 0a00 	mov.w	sl, #0
   1ef9c:	f04f 0800 	mov.w	r8, #0
   1efa0:	8862      	ldrh	r2, [r4, #2]
   1efa2:	fa1f f38a 	uxth.w	r3, sl
   1efa6:	429a      	cmp	r2, r3
   1efa8:	d806      	bhi.n	1efb8 <timescale_innovation+0x78>
   1efaa:	b002      	add	sp, #8
   1efac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efb0:	792b      	ldrb	r3, [r5, #4]
   1efb2:	f362 1345 	bfi	r3, r2, #5, #1
   1efb6:	e7ec      	b.n	1ef92 <timescale_innovation+0x52>
   1efb8:	6963      	ldr	r3, [r4, #20]
   1efba:	fa1f f58a 	uxth.w	r5, sl
   1efbe:	00ed      	lsls	r5, r5, #3
   1efc0:	1959      	adds	r1, r3, r5
   1efc2:	6923      	ldr	r3, [r4, #16]
   1efc4:	442b      	add	r3, r5
   1efc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1efca:	e9d1 0100 	ldrd	r0, r1, [r1]
   1efce:	f004 f96f 	bl	232b0 <__aeabi_dsub>
   1efd2:	69a3      	ldr	r3, [r4, #24]
   1efd4:	442b      	add	r3, r5
   1efd6:	e9c3 0100 	strd	r0, r1, [r3]
   1efda:	ec41 0b10 	vmov	d0, r0, r1
   1efde:	f005 f99d 	bl	2431c <fabs>
   1efe2:	2200      	movs	r2, #0
   1efe4:	4b12      	ldr	r3, [pc, #72]	; (1f030 <timescale_innovation+0xf0>)
   1efe6:	ec51 0b10 	vmov	r0, r1, d0
   1efea:	f004 fda9 	bl	23b40 <__aeabi_dcmpgt>
   1efee:	b190      	cbz	r0, 1f016 <timescale_innovation+0xd6>
   1eff0:	69a3      	ldr	r3, [r4, #24]
   1eff2:	441d      	add	r5, r3
   1eff4:	e9d5 6700 	ldrd	r6, r7, [r5]
   1eff8:	2200      	movs	r2, #0
   1effa:	2300      	movs	r3, #0
   1effc:	4630      	mov	r0, r6
   1effe:	4639      	mov	r1, r7
   1f000:	f004 fd80 	bl	23b04 <__aeabi_dcmplt>
   1f004:	4642      	mov	r2, r8
   1f006:	464b      	mov	r3, r9
   1f008:	b140      	cbz	r0, 1f01c <timescale_innovation+0xdc>
   1f00a:	4630      	mov	r0, r6
   1f00c:	4639      	mov	r1, r7
   1f00e:	f004 f951 	bl	232b4 <__adddf3>
   1f012:	e9c5 0100 	strd	r0, r1, [r5]
   1f016:	f10a 0a01 	add.w	sl, sl, #1
   1f01a:	e7c1      	b.n	1efa0 <timescale_innovation+0x60>
   1f01c:	4630      	mov	r0, r6
   1f01e:	4639      	mov	r1, r7
   1f020:	f004 f946 	bl	232b0 <__aeabi_dsub>
   1f024:	e7f5      	b.n	1f012 <timescale_innovation+0xd2>
   1f026:	bf00      	nop
   1f028:	00000000 	.word	0x00000000
   1f02c:	42700000 	.word	0x42700000
   1f030:	42600000 	.word	0x42600000
   1f034:	42700000 	.word	0x42700000

0001f038 <timescale_constraints>:
   1f038:	b513      	push	{r0, r1, r4, lr}
   1f03a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1f03c:	889b      	ldrh	r3, [r3, #4]
   1f03e:	065b      	lsls	r3, r3, #25
   1f040:	d513      	bpl.n	1f06a <timescale_constraints+0x32>
   1f042:	6884      	ldr	r4, [r0, #8]
   1f044:	4b0c      	ldr	r3, [pc, #48]	; (1f078 <timescale_constraints+0x40>)
   1f046:	ed94 0b00 	vldr	d0, [r4]
   1f04a:	2200      	movs	r2, #0
   1f04c:	ec51 0b10 	vmov	r0, r1, d0
   1f050:	ed8d 0b00 	vstr	d0, [sp]
   1f054:	f004 fd74 	bl	23b40 <__aeabi_dcmpgt>
   1f058:	ed9d 0b00 	vldr	d0, [sp]
   1f05c:	b128      	cbz	r0, 1f06a <timescale_constraints+0x32>
   1f05e:	ed9f 1b04 	vldr	d1, [pc, #16]	; 1f070 <timescale_constraints+0x38>
   1f062:	f005 f9e7 	bl	24434 <fmod>
   1f066:	ed84 0b00 	vstr	d0, [r4]
   1f06a:	b002      	add	sp, #8
   1f06c:	bd10      	pop	{r4, pc}
   1f06e:	bf00      	nop
   1f070:	00000000 	.word	0x00000000
   1f074:	42700000 	.word	0x42700000
   1f078:	42700000 	.word	0x42700000
   1f07c:	00000000 	.word	0x00000000

0001f080 <timescale_Hofx>:
   1f080:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f084:	6904      	ldr	r4, [r0, #16]
   1f086:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   1f088:	69c5      	ldr	r5, [r0, #28]
   1f08a:	6886      	ldr	r6, [r0, #8]
   1f08c:	2200      	movs	r2, #0
   1f08e:	2300      	movs	r3, #0
   1f090:	e9c4 2300 	strd	r2, r3, [r4]
   1f094:	f105 0818 	add.w	r8, r5, #24
   1f098:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   1f09c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1f0a0:	f004 fabe 	bl	23620 <__aeabi_dmul>
   1f0a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f0a8:	f004 f904 	bl	232b4 <__adddf3>
   1f0ac:	4545      	cmp	r5, r8
   1f0ae:	e9c4 0100 	strd	r0, r1, [r4]
   1f0b2:	d1f1      	bne.n	1f098 <timescale_Hofx+0x18>
   1f0b4:	e9cd 0100 	strd	r0, r1, [sp]
   1f0b8:	88bb      	ldrh	r3, [r7, #4]
   1f0ba:	065b      	lsls	r3, r3, #25
   1f0bc:	d50c      	bpl.n	1f0d8 <timescale_Hofx+0x58>
   1f0be:	2200      	movs	r2, #0
   1f0c0:	4b09      	ldr	r3, [pc, #36]	; (1f0e8 <timescale_Hofx+0x68>)
   1f0c2:	f004 fd3d 	bl	23b40 <__aeabi_dcmpgt>
   1f0c6:	ed9d 0b00 	vldr	d0, [sp]
   1f0ca:	b128      	cbz	r0, 1f0d8 <timescale_Hofx+0x58>
   1f0cc:	ed9f 1b04 	vldr	d1, [pc, #16]	; 1f0e0 <timescale_Hofx+0x60>
   1f0d0:	f005 f9b0 	bl	24434 <fmod>
   1f0d4:	ed84 0b00 	vstr	d0, [r4]
   1f0d8:	b002      	add	sp, #8
   1f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f0de:	bf00      	nop
   1f0e0:	00000000 	.word	0x00000000
   1f0e4:	42700000 	.word	0x42700000
   1f0e8:	42700000 	.word	0x42700000

0001f0ec <timescale_init>:
   1f0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0f0:	4688      	mov	r8, r1
   1f0f2:	4614      	mov	r4, r2
   1f0f4:	ec57 6b10 	vmov	r6, r7, d0
   1f0f8:	4605      	mov	r5, r0
   1f0fa:	b990      	cbnz	r0, 1f122 <timescale_init+0x36>
   1f0fc:	2008      	movs	r0, #8
   1f0fe:	f7f1 fa4f 	bl	105a0 <malloc>
   1f102:	4605      	mov	r5, r0
   1f104:	b928      	cbnz	r0, 1f112 <timescale_init+0x26>
   1f106:	4b2c      	ldr	r3, [pc, #176]	; (1f1b8 <timescale_init+0xcc>)
   1f108:	4a2c      	ldr	r2, [pc, #176]	; (1f1bc <timescale_init+0xd0>)
   1f10a:	482d      	ldr	r0, [pc, #180]	; (1f1c0 <timescale_init+0xd4>)
   1f10c:	21e0      	movs	r1, #224	; 0xe0
   1f10e:	f7ea f859 	bl	91c4 <__assert_func>
   1f112:	2208      	movs	r2, #8
   1f114:	2100      	movs	r1, #0
   1f116:	f7f1 fac0 	bl	1069a <memset>
   1f11a:	792b      	ldrb	r3, [r5, #4]
   1f11c:	f043 0301 	orr.w	r3, r3, #1
   1f120:	712b      	strb	r3, [r5, #4]
   1f122:	4641      	mov	r1, r8
   1f124:	2301      	movs	r3, #1
   1f126:	2203      	movs	r2, #3
   1f128:	6828      	ldr	r0, [r5, #0]
   1f12a:	f000 fad3 	bl	1f6d4 <srkf_dbl_init>
   1f12e:	463b      	mov	r3, r7
   1f130:	4621      	mov	r1, r4
   1f132:	6028      	str	r0, [r5, #0]
   1f134:	4632      	mov	r2, r6
   1f136:	f7ff fdcd 	bl	1ecd4 <timescale_QUpdate>
   1f13a:	682c      	ldr	r4, [r5, #0]
   1f13c:	2700      	movs	r7, #0
   1f13e:	f8b4 a000 	ldrh.w	sl, [r4]
   1f142:	46b8      	mov	r8, r7
   1f144:	fa1f f388 	uxth.w	r3, r8
   1f148:	459a      	cmp	sl, r3
   1f14a:	d91a      	bls.n	1f182 <timescale_init+0x96>
   1f14c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   1f150:	2600      	movs	r6, #0
   1f152:	e00f      	b.n	1f174 <timescale_init+0x88>
   1f154:	6a22      	ldr	r2, [r4, #32]
   1f156:	19f3      	adds	r3, r6, r7
   1f158:	00db      	lsls	r3, r3, #3
   1f15a:	eb02 0903 	add.w	r9, r2, r3
   1f15e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1f160:	18d1      	adds	r1, r2, r3
   1f162:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f166:	2200      	movs	r2, #0
   1f168:	4b16      	ldr	r3, [pc, #88]	; (1f1c4 <timescale_init+0xd8>)
   1f16a:	f004 fa59 	bl	23620 <__aeabi_dmul>
   1f16e:	e9c9 0100 	strd	r0, r1, [r9]
   1f172:	3601      	adds	r6, #1
   1f174:	b2b3      	uxth	r3, r6
   1f176:	459b      	cmp	fp, r3
   1f178:	d8ec      	bhi.n	1f154 <timescale_init+0x68>
   1f17a:	f108 0801 	add.w	r8, r8, #1
   1f17e:	4457      	add	r7, sl
   1f180:	e7e0      	b.n	1f144 <timescale_init+0x58>
   1f182:	69e3      	ldr	r3, [r4, #28]
   1f184:	4910      	ldr	r1, [pc, #64]	; (1f1c8 <timescale_init+0xdc>)
   1f186:	792a      	ldrb	r2, [r5, #4]
   1f188:	2000      	movs	r0, #0
   1f18a:	e9c3 0100 	strd	r0, r1, [r3]
   1f18e:	4b0f      	ldr	r3, [pc, #60]	; (1f1cc <timescale_init+0xe0>)
   1f190:	65a3      	str	r3, [r4, #88]	; 0x58
   1f192:	4b0f      	ldr	r3, [pc, #60]	; (1f1d0 <timescale_init+0xe4>)
   1f194:	6563      	str	r3, [r4, #84]	; 0x54
   1f196:	4b0f      	ldr	r3, [pc, #60]	; (1f1d4 <timescale_init+0xe8>)
   1f198:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f19a:	4b0f      	ldr	r3, [pc, #60]	; (1f1d8 <timescale_init+0xec>)
   1f19c:	6663      	str	r3, [r4, #100]	; 0x64
   1f19e:	4b0f      	ldr	r3, [pc, #60]	; (1f1dc <timescale_init+0xf0>)
   1f1a0:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   1f1a4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1f1a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1f1ac:	f363 0241 	bfi	r2, r3, #1, #1
   1f1b0:	712a      	strb	r2, [r5, #4]
   1f1b2:	4628      	mov	r0, r5
   1f1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b8:	000274b6 	.word	0x000274b6
   1f1bc:	0002748e 	.word	0x0002748e
   1f1c0:	000274bb 	.word	0x000274bb
   1f1c4:	40590000 	.word	0x40590000
   1f1c8:	3ff00000 	.word	0x3ff00000
   1f1cc:	0001ee49 	.word	0x0001ee49
   1f1d0:	0001eecd 	.word	0x0001eecd
   1f1d4:	0001f081 	.word	0x0001f081
   1f1d8:	0001f039 	.word	0x0001f039
   1f1dc:	0001ef41 	.word	0x0001ef41

0001f1e0 <timescale_free>:
   1f1e0:	b510      	push	{r4, lr}
   1f1e2:	4604      	mov	r4, r0
   1f1e4:	6800      	ldr	r0, [r0, #0]
   1f1e6:	b930      	cbnz	r0, 1f1f6 <timescale_free+0x16>
   1f1e8:	4b08      	ldr	r3, [pc, #32]	; (1f20c <timescale_free+0x2c>)
   1f1ea:	4a09      	ldr	r2, [pc, #36]	; (1f210 <timescale_free+0x30>)
   1f1ec:	4809      	ldr	r0, [pc, #36]	; (1f214 <timescale_free+0x34>)
   1f1ee:	f44f 7181 	mov.w	r1, #258	; 0x102
   1f1f2:	f7e9 ffe7 	bl	91c4 <__assert_func>
   1f1f6:	f000 fced 	bl	1fbd4 <srkf_dbl_free>
   1f1fa:	7923      	ldrb	r3, [r4, #4]
   1f1fc:	07db      	lsls	r3, r3, #31
   1f1fe:	d504      	bpl.n	1f20a <timescale_free+0x2a>
   1f200:	4620      	mov	r0, r4
   1f202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f206:	f7f1 ba01 	b.w	1060c <free>
   1f20a:	bd10      	pop	{r4, pc}
   1f20c:	000274ac 	.word	0x000274ac
   1f210:	0002749d 	.word	0x0002749d
   1f214:	000274bb 	.word	0x000274bb

0001f218 <timescale_main>:
   1f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f21c:	ed2d 8b02 	vpush	{d8}
   1f220:	eeb0 8a40 	vmov.f32	s16, s0
   1f224:	eef0 8a60 	vmov.f32	s17, s1
   1f228:	b083      	sub	sp, #12
   1f22a:	4604      	mov	r4, r0
   1f22c:	468a      	mov	sl, r1
   1f22e:	4617      	mov	r7, r2
   1f230:	461d      	mov	r5, r3
   1f232:	2200      	movs	r2, #0
   1f234:	4b29      	ldr	r3, [pc, #164]	; (1f2dc <timescale_main+0xc4>)
   1f236:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f23a:	f04f 0601 	mov.w	r6, #1
   1f23e:	f004 fc7f 	bl	23b40 <__aeabi_dcmpgt>
   1f242:	b900      	cbnz	r0, 1f246 <timescale_main+0x2e>
   1f244:	4606      	mov	r6, r0
   1f246:	7923      	ldrb	r3, [r4, #4]
   1f248:	6820      	ldr	r0, [r4, #0]
   1f24a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1f24e:	4316      	orrs	r6, r2
   1f250:	f366 1386 	bfi	r3, r6, #6, #1
   1f254:	7123      	strb	r3, [r4, #4]
   1f256:	4639      	mov	r1, r7
   1f258:	ec53 2b18 	vmov	r2, r3, d8
   1f25c:	f7ff fd3a 	bl	1ecd4 <timescale_QUpdate>
   1f260:	6827      	ldr	r7, [r4, #0]
   1f262:	887a      	ldrh	r2, [r7, #2]
   1f264:	f06f 0907 	mvn.w	r9, #7
   1f268:	1c53      	adds	r3, r2, #1
   1f26a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1f26e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1f272:	9201      	str	r2, [sp, #4]
   1f274:	fb09 f903 	mul.w	r9, r9, r3
   1f278:	f04f 0800 	mov.w	r8, #0
   1f27c:	9b01      	ldr	r3, [sp, #4]
   1f27e:	429d      	cmp	r5, r3
   1f280:	44d8      	add	r8, fp
   1f282:	d11e      	bne.n	1f2c2 <timescale_main+0xaa>
   1f284:	eeb0 0a48 	vmov.f32	s0, s16
   1f288:	eef0 0a68 	vmov.f32	s1, s17
   1f28c:	2300      	movs	r3, #0
   1f28e:	461a      	mov	r2, r3
   1f290:	4651      	mov	r1, sl
   1f292:	4638      	mov	r0, r7
   1f294:	f000 f8b4 	bl	1f400 <srkf_dbl_main>
   1f298:	7923      	ldrb	r3, [r4, #4]
   1f29a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1f29e:	f3c3 0280 	ubfx	r2, r3, #2, #1
   1f2a2:	4302      	orrs	r2, r0
   1f2a4:	f362 0382 	bfi	r3, r2, #2, #1
   1f2a8:	7123      	strb	r3, [r4, #4]
   1f2aa:	b2db      	uxtb	r3, r3
   1f2ac:	075a      	lsls	r2, r3, #29
   1f2ae:	bf5c      	itt	pl
   1f2b0:	f043 0308 	orrpl.w	r3, r3, #8
   1f2b4:	7123      	strbpl	r3, [r4, #4]
   1f2b6:	88a0      	ldrh	r0, [r4, #4]
   1f2b8:	b003      	add	sp, #12
   1f2ba:	ecbd 8b02 	vpop	{d8}
   1f2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1f2c6:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   1f2c8:	4610      	mov	r0, r2
   1f2ca:	4619      	mov	r1, r3
   1f2cc:	f004 f9a8 	bl	23620 <__aeabi_dmul>
   1f2d0:	4446      	add	r6, r8
   1f2d2:	444e      	add	r6, r9
   1f2d4:	e9c6 0100 	strd	r0, r1, [r6]
   1f2d8:	e7d0      	b.n	1f27c <timescale_main+0x64>
   1f2da:	bf00      	nop
   1f2dc:	42600000 	.word	0x42600000

0001f2e0 <Hofx>:
   1f2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f2e4:	ed2d 8b02 	vpush	{d8}
   1f2e8:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 1f358 <Hofx+0x78>
   1f2ec:	f04f 0800 	mov.w	r8, #0
   1f2f0:	f8b0 9000 	ldrh.w	r9, [r0]
   1f2f4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   1f2f8:	4604      	mov	r4, r0
   1f2fa:	4647      	mov	r7, r8
   1f2fc:	b2bb      	uxth	r3, r7
   1f2fe:	459a      	cmp	sl, r3
   1f300:	d803      	bhi.n	1f30a <Hofx+0x2a>
   1f302:	ecbd 8b02 	vpop	{d8}
   1f306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f30a:	6926      	ldr	r6, [r4, #16]
   1f30c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   1f310:	ed86 8b00 	vstr	d8, [r6]
   1f314:	2500      	movs	r5, #0
   1f316:	b2ab      	uxth	r3, r5
   1f318:	4599      	cmp	r9, r3
   1f31a:	d802      	bhi.n	1f322 <Hofx+0x42>
   1f31c:	3701      	adds	r7, #1
   1f31e:	44c8      	add	r8, r9
   1f320:	e7ec      	b.n	1f2fc <Hofx+0x1c>
   1f322:	69e3      	ldr	r3, [r4, #28]
   1f324:	eb05 0108 	add.w	r1, r5, r8
   1f328:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1f32c:	68a3      	ldr	r3, [r4, #8]
   1f32e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1f332:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f336:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f33a:	f004 f971 	bl	23620 <__aeabi_dmul>
   1f33e:	4602      	mov	r2, r0
   1f340:	460b      	mov	r3, r1
   1f342:	e9d6 0100 	ldrd	r0, r1, [r6]
   1f346:	f003 ffb5 	bl	232b4 <__adddf3>
   1f34a:	3501      	adds	r5, #1
   1f34c:	e9c6 0100 	strd	r0, r1, [r6]
   1f350:	e7e1      	b.n	1f316 <Hofx+0x36>
   1f352:	bf00      	nop
   1f354:	f3af 8000 	nop.w
	...

0001f360 <Aofx>:
   1f360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f364:	f8b0 a000 	ldrh.w	sl, [r0]
   1f368:	ed2d 8b02 	vpush	{d8}
   1f36c:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   1f370:	f109 030e 	add.w	r3, r9, #14
   1f374:	466a      	mov	r2, sp
   1f376:	08db      	lsrs	r3, r3, #3
   1f378:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   1f37c:	af00      	add	r7, sp, #0
   1f37e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 1f3f8 <Aofx+0x98>
   1f382:	469d      	mov	sp, r3
   1f384:	46e8      	mov	r8, sp
   1f386:	4606      	mov	r6, r0
   1f388:	44c1      	add	r9, r8
   1f38a:	4644      	mov	r4, r8
   1f38c:	f04f 0b00 	mov.w	fp, #0
   1f390:	454c      	cmp	r4, r9
   1f392:	d107      	bne.n	1f3a4 <Aofx+0x44>
   1f394:	4643      	mov	r3, r8
   1f396:	42a3      	cmp	r3, r4
   1f398:	d124      	bne.n	1f3e4 <Aofx+0x84>
   1f39a:	46bd      	mov	sp, r7
   1f39c:	ecbd 8b02 	vpop	{d8}
   1f3a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3a4:	eca4 8b02 	vstmia	r4!, {d8}
   1f3a8:	2500      	movs	r5, #0
   1f3aa:	b2ab      	uxth	r3, r5
   1f3ac:	459a      	cmp	sl, r3
   1f3ae:	d801      	bhi.n	1f3b4 <Aofx+0x54>
   1f3b0:	44d3      	add	fp, sl
   1f3b2:	e7ed      	b.n	1f390 <Aofx+0x30>
   1f3b4:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   1f3b6:	eb05 030b 	add.w	r3, r5, fp
   1f3ba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f3be:	68b3      	ldr	r3, [r6, #8]
   1f3c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1f3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f3cc:	f004 f928 	bl	23620 <__aeabi_dmul>
   1f3d0:	4602      	mov	r2, r0
   1f3d2:	460b      	mov	r3, r1
   1f3d4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   1f3d8:	f003 ff6c 	bl	232b4 <__adddf3>
   1f3dc:	3501      	adds	r5, #1
   1f3de:	e944 0102 	strd	r0, r1, [r4, #-8]
   1f3e2:	e7e2      	b.n	1f3aa <Aofx+0x4a>
   1f3e4:	68b2      	ldr	r2, [r6, #8]
   1f3e6:	eba3 0108 	sub.w	r1, r3, r8
   1f3ea:	440a      	add	r2, r1
   1f3ec:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1f3f0:	e9c2 0100 	strd	r0, r1, [r2]
   1f3f4:	e7cf      	b.n	1f396 <Aofx+0x36>
   1f3f6:	bf00      	nop
	...

0001f400 <srkf_dbl_main>:
   1f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f404:	ed2d 8b02 	vpush	{d8}
   1f408:	eeb0 8a40 	vmov.f32	s16, s0
   1f40c:	eef0 8a60 	vmov.f32	s17, s1
   1f410:	b089      	sub	sp, #36	; 0x24
   1f412:	460d      	mov	r5, r1
   1f414:	af04      	add	r7, sp, #16
   1f416:	4690      	mov	r8, r2
   1f418:	461e      	mov	r6, r3
   1f41a:	4604      	mov	r4, r0
   1f41c:	b928      	cbnz	r0, 1f42a <srkf_dbl_main+0x2a>
   1f41e:	4ba8      	ldr	r3, [pc, #672]	; (1f6c0 <srkf_dbl_main+0x2c0>)
   1f420:	4aa8      	ldr	r2, [pc, #672]	; (1f6c4 <srkf_dbl_main+0x2c4>)
   1f422:	2185      	movs	r1, #133	; 0x85
   1f424:	48a8      	ldr	r0, [pc, #672]	; (1f6c8 <srkf_dbl_main+0x2c8>)
   1f426:	f7e9 fecd 	bl	91c4 <__assert_func>
   1f42a:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1f42c:	b91b      	cbnz	r3, 1f436 <srkf_dbl_main+0x36>
   1f42e:	4ba7      	ldr	r3, [pc, #668]	; (1f6cc <srkf_dbl_main+0x2cc>)
   1f430:	4aa4      	ldr	r2, [pc, #656]	; (1f6c4 <srkf_dbl_main+0x2c4>)
   1f432:	2186      	movs	r1, #134	; 0x86
   1f434:	e7f6      	b.n	1f424 <srkf_dbl_main+0x24>
   1f436:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f438:	b91b      	cbnz	r3, 1f442 <srkf_dbl_main+0x42>
   1f43a:	4ba5      	ldr	r3, [pc, #660]	; (1f6d0 <srkf_dbl_main+0x2d0>)
   1f43c:	4aa1      	ldr	r2, [pc, #644]	; (1f6c4 <srkf_dbl_main+0x2c4>)
   1f43e:	2187      	movs	r1, #135	; 0x87
   1f440:	e7f0      	b.n	1f424 <srkf_dbl_main+0x24>
   1f442:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1f444:	b10b      	cbz	r3, 1f44a <srkf_dbl_main+0x4a>
   1f446:	4611      	mov	r1, r2
   1f448:	4798      	blx	r3
   1f44a:	eeb0 0a48 	vmov.f32	s0, s16
   1f44e:	eef0 0a68 	vmov.f32	s1, s17
   1f452:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1f454:	4641      	mov	r1, r8
   1f456:	4620      	mov	r0, r4
   1f458:	4798      	blx	r3
   1f45a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f45c:	b12b      	cbz	r3, 1f46a <srkf_dbl_main+0x6a>
   1f45e:	eeb0 0a48 	vmov.f32	s0, s16
   1f462:	eef0 0a68 	vmov.f32	s1, s17
   1f466:	4620      	mov	r0, r4
   1f468:	4798      	blx	r3
   1f46a:	8863      	ldrh	r3, [r4, #2]
   1f46c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1f46e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   1f472:	f000 fc65 	bl	1fd40 <ud_dbl>
   1f476:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   1f47a:	8823      	ldrh	r3, [r4, #0]
   1f47c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1f47e:	f000 fc5f 	bl	1fd40 <ud_dbl>
   1f482:	8823      	ldrh	r3, [r4, #0]
   1f484:	9302      	str	r3, [sp, #8]
   1f486:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f488:	9301      	str	r3, [sp, #4]
   1f48a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f48c:	9300      	str	r3, [sp, #0]
   1f48e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1f492:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   1f496:	f000 fd27 	bl	1fee8 <thornton_dbl>
   1f49a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1f49e:	f000 0001 	and.w	r0, r0, #1
   1f4a2:	f3c3 1240 	ubfx	r2, r3, #5, #1
   1f4a6:	4302      	orrs	r2, r0
   1f4a8:	f362 1345 	bfi	r3, r2, #5, #1
   1f4ac:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1f4b0:	2e00      	cmp	r6, #0
   1f4b2:	d156      	bne.n	1f562 <srkf_dbl_main+0x162>
   1f4b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f4b6:	466e      	mov	r6, sp
   1f4b8:	b12b      	cbz	r3, 1f4c6 <srkf_dbl_main+0xc6>
   1f4ba:	eeb0 0a48 	vmov.f32	s0, s16
   1f4be:	eef0 0a68 	vmov.f32	s1, s17
   1f4c2:	4620      	mov	r0, r4
   1f4c4:	4798      	blx	r3
   1f4c6:	eeb0 0a48 	vmov.f32	s0, s16
   1f4ca:	eef0 0a68 	vmov.f32	s1, s17
   1f4ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f4d0:	4620      	mov	r0, r4
   1f4d2:	4798      	blx	r3
   1f4d4:	8863      	ldrh	r3, [r4, #2]
   1f4d6:	8822      	ldrh	r2, [r4, #0]
   1f4d8:	435a      	muls	r2, r3
   1f4da:	00d2      	lsls	r2, r2, #3
   1f4dc:	3208      	adds	r2, #8
   1f4de:	ebad 0d02 	sub.w	sp, sp, r2
   1f4e2:	2201      	movs	r2, #1
   1f4e4:	9200      	str	r2, [sp, #0]
   1f4e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1f4e8:	6960      	ldr	r0, [r4, #20]
   1f4ea:	462a      	mov	r2, r5
   1f4ec:	f000 fbc2 	bl	1fc74 <trisolve_dbl>
   1f4f0:	8822      	ldrh	r2, [r4, #0]
   1f4f2:	8863      	ldrh	r3, [r4, #2]
   1f4f4:	9200      	str	r2, [sp, #0]
   1f4f6:	f10d 0810 	add.w	r8, sp, #16
   1f4fa:	69e2      	ldr	r2, [r4, #28]
   1f4fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1f4fe:	4640      	mov	r0, r8
   1f500:	f000 fbb8 	bl	1fc74 <trisolve_dbl>
   1f504:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   1f506:	b9b5      	cbnz	r5, 1f536 <srkf_dbl_main+0x136>
   1f508:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   1f50c:	b2ab      	uxth	r3, r5
   1f50e:	459a      	cmp	sl, r3
   1f510:	d917      	bls.n	1f542 <srkf_dbl_main+0x142>
   1f512:	69a3      	ldr	r3, [r4, #24]
   1f514:	00ea      	lsls	r2, r5, #3
   1f516:	eb03 0902 	add.w	r9, r3, r2
   1f51a:	6963      	ldr	r3, [r4, #20]
   1f51c:	1899      	adds	r1, r3, r2
   1f51e:	6923      	ldr	r3, [r4, #16]
   1f520:	4413      	add	r3, r2
   1f522:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f526:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f52a:	f003 fec1 	bl	232b0 <__aeabi_dsub>
   1f52e:	3501      	adds	r5, #1
   1f530:	e9c9 0100 	strd	r0, r1, [r9]
   1f534:	e7ea      	b.n	1f50c <srkf_dbl_main+0x10c>
   1f536:	eeb0 0a48 	vmov.f32	s0, s16
   1f53a:	eef0 0a68 	vmov.f32	s1, s17
   1f53e:	4620      	mov	r0, r4
   1f540:	47a8      	blx	r5
   1f542:	2300      	movs	r3, #0
   1f544:	8862      	ldrh	r2, [r4, #2]
   1f546:	b299      	uxth	r1, r3
   1f548:	4291      	cmp	r1, r2
   1f54a:	f103 0501 	add.w	r5, r3, #1
   1f54e:	d326      	bcc.n	1f59e <srkf_dbl_main+0x19e>
   1f550:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1f552:	b12b      	cbz	r3, 1f560 <srkf_dbl_main+0x160>
   1f554:	eeb0 0a48 	vmov.f32	s0, s16
   1f558:	eef0 0a68 	vmov.f32	s1, s17
   1f55c:	4620      	mov	r0, r4
   1f55e:	4798      	blx	r3
   1f560:	46b5      	mov	sp, r6
   1f562:	f8b4 a000 	ldrh.w	sl, [r4]
   1f566:	ed9f 8b54 	vldr	d8, [pc, #336]	; 1f6b8 <srkf_dbl_main+0x2b8>
   1f56a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   1f56e:	2500      	movs	r5, #0
   1f570:	60fb      	str	r3, [r7, #12]
   1f572:	60bd      	str	r5, [r7, #8]
   1f574:	893b      	ldrh	r3, [r7, #8]
   1f576:	459a      	cmp	sl, r3
   1f578:	d85d      	bhi.n	1f636 <srkf_dbl_main+0x236>
   1f57a:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 1f6b8 <srkf_dbl_main+0x2b8>
   1f57e:	2500      	movs	r5, #0
   1f580:	68fb      	ldr	r3, [r7, #12]
   1f582:	603b      	str	r3, [r7, #0]
   1f584:	46ab      	mov	fp, r5
   1f586:	607d      	str	r5, [r7, #4]
   1f588:	88bb      	ldrh	r3, [r7, #4]
   1f58a:	459a      	cmp	sl, r3
   1f58c:	f240 808b 	bls.w	1f6a6 <srkf_dbl_main+0x2a6>
   1f590:	f06f 0307 	mvn.w	r3, #7
   1f594:	436b      	muls	r3, r5
   1f596:	60bb      	str	r3, [r7, #8]
   1f598:	f04f 0900 	mov.w	r9, #0
   1f59c:	e05e      	b.n	1f65c <srkf_dbl_main+0x25c>
   1f59e:	b29b      	uxth	r3, r3
   1f5a0:	fb02 3c03 	mla	ip, r2, r3, r3
   1f5a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1f5a6:	8821      	ldrh	r1, [r4, #0]
   1f5a8:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   1f5ac:	69a2      	ldr	r2, [r4, #24]
   1f5ae:	9100      	str	r1, [sp, #0]
   1f5b0:	fb03 f001 	mul.w	r0, r3, r1
   1f5b4:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   1f5b8:	68a1      	ldr	r1, [r4, #8]
   1f5ba:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   1f5be:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1f5c2:	ed9c 1b00 	vldr	d1, [ip]
   1f5c6:	ed9e 0b00 	vldr	d0, [lr]
   1f5ca:	f000 feb1 	bl	20330 <bierman_dbl>
   1f5ce:	462b      	mov	r3, r5
   1f5d0:	e7b8      	b.n	1f544 <srkf_dbl_main+0x144>
   1f5d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f5d4:	eb06 0805 	add.w	r8, r6, r5
   1f5d8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   1f5dc:	ed88 8b00 	vstr	d8, [r8]
   1f5e0:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1f5e4:	f04f 0900 	mov.w	r9, #0
   1f5e8:	fa1f f389 	uxth.w	r3, r9
   1f5ec:	459a      	cmp	sl, r3
   1f5ee:	d808      	bhi.n	1f602 <srkf_dbl_main+0x202>
   1f5f0:	3601      	adds	r6, #1
   1f5f2:	b2b3      	uxth	r3, r6
   1f5f4:	459a      	cmp	sl, r3
   1f5f6:	d8ec      	bhi.n	1f5d2 <srkf_dbl_main+0x1d2>
   1f5f8:	68bb      	ldr	r3, [r7, #8]
   1f5fa:	3301      	adds	r3, #1
   1f5fc:	60bb      	str	r3, [r7, #8]
   1f5fe:	4455      	add	r5, sl
   1f600:	e7b8      	b.n	1f574 <srkf_dbl_main+0x174>
   1f602:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f604:	eb09 0305 	add.w	r3, r9, r5
   1f608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f60c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f60e:	445b      	add	r3, fp
   1f610:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f614:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f618:	f004 f802 	bl	23620 <__aeabi_dmul>
   1f61c:	460b      	mov	r3, r1
   1f61e:	4602      	mov	r2, r0
   1f620:	e9d8 0100 	ldrd	r0, r1, [r8]
   1f624:	f003 fe46 	bl	232b4 <__adddf3>
   1f628:	68fb      	ldr	r3, [r7, #12]
   1f62a:	e9c8 0100 	strd	r0, r1, [r8]
   1f62e:	f109 0901 	add.w	r9, r9, #1
   1f632:	449b      	add	fp, r3
   1f634:	e7d8      	b.n	1f5e8 <srkf_dbl_main+0x1e8>
   1f636:	2600      	movs	r6, #0
   1f638:	e7db      	b.n	1f5f2 <srkf_dbl_main+0x1f2>
   1f63a:	6a23      	ldr	r3, [r4, #32]
   1f63c:	eb09 0805 	add.w	r8, r9, r5
   1f640:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   1f644:	ed88 8b00 	vstr	d8, [r8]
   1f648:	465e      	mov	r6, fp
   1f64a:	683b      	ldr	r3, [r7, #0]
   1f64c:	429e      	cmp	r6, r3
   1f64e:	d114      	bne.n	1f67a <srkf_dbl_main+0x27a>
   1f650:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   1f654:	4413      	add	r3, r2
   1f656:	f109 0901 	add.w	r9, r9, #1
   1f65a:	60bb      	str	r3, [r7, #8]
   1f65c:	fa1f f389 	uxth.w	r3, r9
   1f660:	459a      	cmp	sl, r3
   1f662:	d8ea      	bhi.n	1f63a <srkf_dbl_main+0x23a>
   1f664:	687b      	ldr	r3, [r7, #4]
   1f666:	68fa      	ldr	r2, [r7, #12]
   1f668:	3301      	adds	r3, #1
   1f66a:	607b      	str	r3, [r7, #4]
   1f66c:	68fb      	ldr	r3, [r7, #12]
   1f66e:	449b      	add	fp, r3
   1f670:	683b      	ldr	r3, [r7, #0]
   1f672:	4413      	add	r3, r2
   1f674:	603b      	str	r3, [r7, #0]
   1f676:	4455      	add	r5, sl
   1f678:	e786      	b.n	1f588 <srkf_dbl_main+0x188>
   1f67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f67c:	68ba      	ldr	r2, [r7, #8]
   1f67e:	4413      	add	r3, r2
   1f680:	1999      	adds	r1, r3, r6
   1f682:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1f684:	4433      	add	r3, r6
   1f686:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f68a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f68e:	f003 ffc7 	bl	23620 <__aeabi_dmul>
   1f692:	4602      	mov	r2, r0
   1f694:	460b      	mov	r3, r1
   1f696:	e9d8 0100 	ldrd	r0, r1, [r8]
   1f69a:	f003 fe0b 	bl	232b4 <__adddf3>
   1f69e:	3608      	adds	r6, #8
   1f6a0:	e9c8 0100 	strd	r0, r1, [r8]
   1f6a4:	e7d1      	b.n	1f64a <srkf_dbl_main+0x24a>
   1f6a6:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   1f6aa:	3714      	adds	r7, #20
   1f6ac:	46bd      	mov	sp, r7
   1f6ae:	ecbd 8b02 	vpop	{d8}
   1f6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6b6:	bf00      	nop
	...
   1f6c0:	000275c5 	.word	0x000275c5
   1f6c4:	000274eb 	.word	0x000274eb
   1f6c8:	000275d2 	.word	0x000275d2
   1f6cc:	00027601 	.word	0x00027601
   1f6d0:	00027614 	.word	0x00027614

0001f6d4 <srkf_dbl_init>:
   1f6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f6d8:	4688      	mov	r8, r1
   1f6da:	4615      	mov	r5, r2
   1f6dc:	461e      	mov	r6, r3
   1f6de:	4604      	mov	r4, r0
   1f6e0:	b9d8      	cbnz	r0, 1f71a <srkf_dbl_init+0x46>
   1f6e2:	2074      	movs	r0, #116	; 0x74
   1f6e4:	f7f0 ff5c 	bl	105a0 <malloc>
   1f6e8:	4604      	mov	r4, r0
   1f6ea:	b928      	cbnz	r0, 1f6f8 <srkf_dbl_init+0x24>
   1f6ec:	4baa      	ldr	r3, [pc, #680]	; (1f998 <srkf_dbl_init+0x2c4>)
   1f6ee:	4aab      	ldr	r2, [pc, #684]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f6f0:	21c5      	movs	r1, #197	; 0xc5
   1f6f2:	48ab      	ldr	r0, [pc, #684]	; (1f9a0 <srkf_dbl_init+0x2cc>)
   1f6f4:	f7e9 fd66 	bl	91c4 <__assert_func>
   1f6f8:	2274      	movs	r2, #116	; 0x74
   1f6fa:	2100      	movs	r1, #0
   1f6fc:	f7f0 ffcd 	bl	1069a <memset>
   1f700:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1f704:	8025      	strh	r5, [r4, #0]
   1f706:	f043 0301 	orr.w	r3, r3, #1
   1f70a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1f70e:	4ba5      	ldr	r3, [pc, #660]	; (1f9a4 <srkf_dbl_init+0x2d0>)
   1f710:	6563      	str	r3, [r4, #84]	; 0x54
   1f712:	4ba5      	ldr	r3, [pc, #660]	; (1f9a8 <srkf_dbl_init+0x2d4>)
   1f714:	80a6      	strh	r6, [r4, #4]
   1f716:	8066      	strh	r6, [r4, #2]
   1f718:	65e3      	str	r3, [r4, #92]	; 0x5c
   1f71a:	8823      	ldrh	r3, [r4, #0]
   1f71c:	42ab      	cmp	r3, r5
   1f71e:	d003      	beq.n	1f728 <srkf_dbl_init+0x54>
   1f720:	4ba2      	ldr	r3, [pc, #648]	; (1f9ac <srkf_dbl_init+0x2d8>)
   1f722:	4a9e      	ldr	r2, [pc, #632]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f724:	21ce      	movs	r1, #206	; 0xce
   1f726:	e7e4      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f728:	88a3      	ldrh	r3, [r4, #4]
   1f72a:	42b3      	cmp	r3, r6
   1f72c:	d920      	bls.n	1f770 <srkf_dbl_init+0x9c>
   1f72e:	00f7      	lsls	r7, r6, #3
   1f730:	8066      	strh	r6, [r4, #2]
   1f732:	463a      	mov	r2, r7
   1f734:	2100      	movs	r1, #0
   1f736:	4375      	muls	r5, r6
   1f738:	6920      	ldr	r0, [r4, #16]
   1f73a:	f7f0 ffae 	bl	1069a <memset>
   1f73e:	00ed      	lsls	r5, r5, #3
   1f740:	463a      	mov	r2, r7
   1f742:	2100      	movs	r1, #0
   1f744:	69a0      	ldr	r0, [r4, #24]
   1f746:	f7f0 ffa8 	bl	1069a <memset>
   1f74a:	4376      	muls	r6, r6
   1f74c:	462a      	mov	r2, r5
   1f74e:	2100      	movs	r1, #0
   1f750:	69e0      	ldr	r0, [r4, #28]
   1f752:	f7f0 ffa2 	bl	1069a <memset>
   1f756:	00f2      	lsls	r2, r6, #3
   1f758:	2100      	movs	r1, #0
   1f75a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1f75c:	f7f0 ff9d 	bl	1069a <memset>
   1f760:	462a      	mov	r2, r5
   1f762:	2100      	movs	r1, #0
   1f764:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1f766:	f7f0 ff98 	bl	1069a <memset>
   1f76a:	4620      	mov	r0, r4
   1f76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f770:	68a7      	ldr	r7, [r4, #8]
   1f772:	b177      	cbz	r7, 1f792 <srkf_dbl_init+0xbe>
   1f774:	f8d4 8010 	ldr.w	r8, [r4, #16]
   1f778:	00f7      	lsls	r7, r6, #3
   1f77a:	f1b8 0f00 	cmp.w	r8, #0
   1f77e:	d126      	bne.n	1f7ce <srkf_dbl_init+0xfa>
   1f780:	4638      	mov	r0, r7
   1f782:	f7f0 ff0d 	bl	105a0 <malloc>
   1f786:	6120      	str	r0, [r4, #16]
   1f788:	bb58      	cbnz	r0, 1f7e2 <srkf_dbl_init+0x10e>
   1f78a:	4b89      	ldr	r3, [pc, #548]	; (1f9b0 <srkf_dbl_init+0x2dc>)
   1f78c:	4a83      	ldr	r2, [pc, #524]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f78e:	21e6      	movs	r1, #230	; 0xe6
   1f790:	e7af      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f792:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1f796:	4648      	mov	r0, r9
   1f798:	f7f0 ff02 	bl	105a0 <malloc>
   1f79c:	60a0      	str	r0, [r4, #8]
   1f79e:	b918      	cbnz	r0, 1f7a8 <srkf_dbl_init+0xd4>
   1f7a0:	4b84      	ldr	r3, [pc, #528]	; (1f9b4 <srkf_dbl_init+0x2e0>)
   1f7a2:	4a7e      	ldr	r2, [pc, #504]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f7a4:	21dc      	movs	r1, #220	; 0xdc
   1f7a6:	e7a4      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f7a8:	464a      	mov	r2, r9
   1f7aa:	4639      	mov	r1, r7
   1f7ac:	f7f0 ff75 	bl	1069a <memset>
   1f7b0:	f1b8 0f00 	cmp.w	r8, #0
   1f7b4:	d0de      	beq.n	1f774 <srkf_dbl_init+0xa0>
   1f7b6:	463b      	mov	r3, r7
   1f7b8:	429d      	cmp	r5, r3
   1f7ba:	dddb      	ble.n	1f774 <srkf_dbl_init+0xa0>
   1f7bc:	68a2      	ldr	r2, [r4, #8]
   1f7be:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1f7c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1f7c6:	e9c2 0100 	strd	r0, r1, [r2]
   1f7ca:	3301      	adds	r3, #1
   1f7cc:	e7f4      	b.n	1f7b8 <srkf_dbl_init+0xe4>
   1f7ce:	4639      	mov	r1, r7
   1f7d0:	4640      	mov	r0, r8
   1f7d2:	f001 fe24 	bl	2141e <realloc>
   1f7d6:	6120      	str	r0, [r4, #16]
   1f7d8:	b918      	cbnz	r0, 1f7e2 <srkf_dbl_init+0x10e>
   1f7da:	4b75      	ldr	r3, [pc, #468]	; (1f9b0 <srkf_dbl_init+0x2dc>)
   1f7dc:	4a6f      	ldr	r2, [pc, #444]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f7de:	21ea      	movs	r1, #234	; 0xea
   1f7e0:	e787      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f7e2:	463a      	mov	r2, r7
   1f7e4:	2100      	movs	r1, #0
   1f7e6:	f7f0 ff58 	bl	1069a <memset>
   1f7ea:	f8d4 8014 	ldr.w	r8, [r4, #20]
   1f7ee:	f1b8 0f00 	cmp.w	r8, #0
   1f7f2:	d108      	bne.n	1f806 <srkf_dbl_init+0x132>
   1f7f4:	4638      	mov	r0, r7
   1f7f6:	f7f0 fed3 	bl	105a0 <malloc>
   1f7fa:	6160      	str	r0, [r4, #20]
   1f7fc:	b968      	cbnz	r0, 1f81a <srkf_dbl_init+0x146>
   1f7fe:	4b6e      	ldr	r3, [pc, #440]	; (1f9b8 <srkf_dbl_init+0x2e4>)
   1f800:	4a66      	ldr	r2, [pc, #408]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f802:	21ef      	movs	r1, #239	; 0xef
   1f804:	e775      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f806:	4639      	mov	r1, r7
   1f808:	4640      	mov	r0, r8
   1f80a:	f001 fe08 	bl	2141e <realloc>
   1f80e:	6160      	str	r0, [r4, #20]
   1f810:	b918      	cbnz	r0, 1f81a <srkf_dbl_init+0x146>
   1f812:	4b69      	ldr	r3, [pc, #420]	; (1f9b8 <srkf_dbl_init+0x2e4>)
   1f814:	4a61      	ldr	r2, [pc, #388]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f816:	21f3      	movs	r1, #243	; 0xf3
   1f818:	e76b      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f81a:	463a      	mov	r2, r7
   1f81c:	2100      	movs	r1, #0
   1f81e:	f7f0 ff3c 	bl	1069a <memset>
   1f822:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1f826:	f1b8 0f00 	cmp.w	r8, #0
   1f82a:	d108      	bne.n	1f83e <srkf_dbl_init+0x16a>
   1f82c:	4638      	mov	r0, r7
   1f82e:	f7f0 feb7 	bl	105a0 <malloc>
   1f832:	61a0      	str	r0, [r4, #24]
   1f834:	b968      	cbnz	r0, 1f852 <srkf_dbl_init+0x17e>
   1f836:	4b61      	ldr	r3, [pc, #388]	; (1f9bc <srkf_dbl_init+0x2e8>)
   1f838:	4a58      	ldr	r2, [pc, #352]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f83a:	21f8      	movs	r1, #248	; 0xf8
   1f83c:	e759      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f83e:	4639      	mov	r1, r7
   1f840:	4640      	mov	r0, r8
   1f842:	f001 fdec 	bl	2141e <realloc>
   1f846:	61a0      	str	r0, [r4, #24]
   1f848:	b918      	cbnz	r0, 1f852 <srkf_dbl_init+0x17e>
   1f84a:	4b5c      	ldr	r3, [pc, #368]	; (1f9bc <srkf_dbl_init+0x2e8>)
   1f84c:	4a53      	ldr	r2, [pc, #332]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f84e:	21fc      	movs	r1, #252	; 0xfc
   1f850:	e74f      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f852:	463a      	mov	r2, r7
   1f854:	2100      	movs	r1, #0
   1f856:	f7f0 ff20 	bl	1069a <memset>
   1f85a:	69e7      	ldr	r7, [r4, #28]
   1f85c:	fb05 f806 	mul.w	r8, r5, r6
   1f860:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   1f864:	b94f      	cbnz	r7, 1f87a <srkf_dbl_init+0x1a6>
   1f866:	4640      	mov	r0, r8
   1f868:	f7f0 fe9a 	bl	105a0 <malloc>
   1f86c:	61e0      	str	r0, [r4, #28]
   1f86e:	b978      	cbnz	r0, 1f890 <srkf_dbl_init+0x1bc>
   1f870:	4b53      	ldr	r3, [pc, #332]	; (1f9c0 <srkf_dbl_init+0x2ec>)
   1f872:	4a4a      	ldr	r2, [pc, #296]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f874:	f240 1101 	movw	r1, #257	; 0x101
   1f878:	e73b      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f87a:	4641      	mov	r1, r8
   1f87c:	4638      	mov	r0, r7
   1f87e:	f001 fdce 	bl	2141e <realloc>
   1f882:	61e0      	str	r0, [r4, #28]
   1f884:	b920      	cbnz	r0, 1f890 <srkf_dbl_init+0x1bc>
   1f886:	4b4e      	ldr	r3, [pc, #312]	; (1f9c0 <srkf_dbl_init+0x2ec>)
   1f888:	4a44      	ldr	r2, [pc, #272]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f88a:	f240 1105 	movw	r1, #261	; 0x105
   1f88e:	e730      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f890:	4642      	mov	r2, r8
   1f892:	2100      	movs	r1, #0
   1f894:	f7f0 ff01 	bl	1069a <memset>
   1f898:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1f89c:	f1b9 0f00 	cmp.w	r9, #0
   1f8a0:	d110      	bne.n	1f8c4 <srkf_dbl_init+0x1f0>
   1f8a2:	fb05 f705 	mul.w	r7, r5, r5
   1f8a6:	00ff      	lsls	r7, r7, #3
   1f8a8:	4638      	mov	r0, r7
   1f8aa:	f7f0 fe79 	bl	105a0 <malloc>
   1f8ae:	6220      	str	r0, [r4, #32]
   1f8b0:	b920      	cbnz	r0, 1f8bc <srkf_dbl_init+0x1e8>
   1f8b2:	4b44      	ldr	r3, [pc, #272]	; (1f9c4 <srkf_dbl_init+0x2f0>)
   1f8b4:	4a39      	ldr	r2, [pc, #228]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f8b6:	f44f 7185 	mov.w	r1, #266	; 0x10a
   1f8ba:	e71a      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f8bc:	463a      	mov	r2, r7
   1f8be:	4649      	mov	r1, r9
   1f8c0:	f7f0 feeb 	bl	1069a <memset>
   1f8c4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   1f8c8:	f1b9 0f00 	cmp.w	r9, #0
   1f8cc:	d110      	bne.n	1f8f0 <srkf_dbl_init+0x21c>
   1f8ce:	fb05 f705 	mul.w	r7, r5, r5
   1f8d2:	00ff      	lsls	r7, r7, #3
   1f8d4:	4638      	mov	r0, r7
   1f8d6:	f7f0 fe63 	bl	105a0 <malloc>
   1f8da:	6260      	str	r0, [r4, #36]	; 0x24
   1f8dc:	b920      	cbnz	r0, 1f8e8 <srkf_dbl_init+0x214>
   1f8de:	4b3a      	ldr	r3, [pc, #232]	; (1f9c8 <srkf_dbl_init+0x2f4>)
   1f8e0:	4a2e      	ldr	r2, [pc, #184]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f8e2:	f240 110f 	movw	r1, #271	; 0x10f
   1f8e6:	e704      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f8e8:	463a      	mov	r2, r7
   1f8ea:	4649      	mov	r1, r9
   1f8ec:	f7f0 fed5 	bl	1069a <memset>
   1f8f0:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   1f8f4:	f1b9 0f00 	cmp.w	r9, #0
   1f8f8:	d110      	bne.n	1f91c <srkf_dbl_init+0x248>
   1f8fa:	fb05 f705 	mul.w	r7, r5, r5
   1f8fe:	00ff      	lsls	r7, r7, #3
   1f900:	4638      	mov	r0, r7
   1f902:	f7f0 fe4d 	bl	105a0 <malloc>
   1f906:	62a0      	str	r0, [r4, #40]	; 0x28
   1f908:	b920      	cbnz	r0, 1f914 <srkf_dbl_init+0x240>
   1f90a:	4b30      	ldr	r3, [pc, #192]	; (1f9cc <srkf_dbl_init+0x2f8>)
   1f90c:	4a23      	ldr	r2, [pc, #140]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f90e:	f44f 718a 	mov.w	r1, #276	; 0x114
   1f912:	e6ee      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f914:	463a      	mov	r2, r7
   1f916:	4649      	mov	r1, r9
   1f918:	f7f0 febf 	bl	1069a <memset>
   1f91c:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   1f920:	f1b9 0f00 	cmp.w	r9, #0
   1f924:	d110      	bne.n	1f948 <srkf_dbl_init+0x274>
   1f926:	fb05 f705 	mul.w	r7, r5, r5
   1f92a:	00ff      	lsls	r7, r7, #3
   1f92c:	4638      	mov	r0, r7
   1f92e:	f7f0 fe37 	bl	105a0 <malloc>
   1f932:	62e0      	str	r0, [r4, #44]	; 0x2c
   1f934:	b920      	cbnz	r0, 1f940 <srkf_dbl_init+0x26c>
   1f936:	4b26      	ldr	r3, [pc, #152]	; (1f9d0 <srkf_dbl_init+0x2fc>)
   1f938:	4a18      	ldr	r2, [pc, #96]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f93a:	f240 1119 	movw	r1, #281	; 0x119
   1f93e:	e6d8      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f940:	463a      	mov	r2, r7
   1f942:	4649      	mov	r1, r9
   1f944:	f7f0 fea9 	bl	1069a <memset>
   1f948:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   1f94c:	f1b9 0f00 	cmp.w	r9, #0
   1f950:	d110      	bne.n	1f974 <srkf_dbl_init+0x2a0>
   1f952:	fb05 f705 	mul.w	r7, r5, r5
   1f956:	00ff      	lsls	r7, r7, #3
   1f958:	4638      	mov	r0, r7
   1f95a:	f7f0 fe21 	bl	105a0 <malloc>
   1f95e:	6320      	str	r0, [r4, #48]	; 0x30
   1f960:	b920      	cbnz	r0, 1f96c <srkf_dbl_init+0x298>
   1f962:	4b1c      	ldr	r3, [pc, #112]	; (1f9d4 <srkf_dbl_init+0x300>)
   1f964:	4a0d      	ldr	r2, [pc, #52]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f966:	f44f 718f 	mov.w	r1, #286	; 0x11e
   1f96a:	e6c2      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f96c:	463a      	mov	r2, r7
   1f96e:	4649      	mov	r1, r9
   1f970:	f7f0 fe93 	bl	1069a <memset>
   1f974:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   1f978:	f1b9 0f00 	cmp.w	r9, #0
   1f97c:	d132      	bne.n	1f9e4 <srkf_dbl_init+0x310>
   1f97e:	fb05 f705 	mul.w	r7, r5, r5
   1f982:	00ff      	lsls	r7, r7, #3
   1f984:	4638      	mov	r0, r7
   1f986:	f7f0 fe0b 	bl	105a0 <malloc>
   1f98a:	6360      	str	r0, [r4, #52]	; 0x34
   1f98c:	bb30      	cbnz	r0, 1f9dc <srkf_dbl_init+0x308>
   1f98e:	4b12      	ldr	r3, [pc, #72]	; (1f9d8 <srkf_dbl_init+0x304>)
   1f990:	4a02      	ldr	r2, [pc, #8]	; (1f99c <srkf_dbl_init+0x2c8>)
   1f992:	f240 1123 	movw	r1, #291	; 0x123
   1f996:	e6ac      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1f998:	000274b6 	.word	0x000274b6
   1f99c:	000274f9 	.word	0x000274f9
   1f9a0:	000275d2 	.word	0x000275d2
   1f9a4:	0001f361 	.word	0x0001f361
   1f9a8:	0001f2e1 	.word	0x0001f2e1
   1f9ac:	00027521 	.word	0x00027521
   1f9b0:	00027536 	.word	0x00027536
   1f9b4:	0002752e 	.word	0x0002752e
   1f9b8:	0002753e 	.word	0x0002753e
   1f9bc:	00027546 	.word	0x00027546
   1f9c0:	0002754e 	.word	0x0002754e
   1f9c4:	00027556 	.word	0x00027556
   1f9c8:	0002755e 	.word	0x0002755e
   1f9cc:	00027567 	.word	0x00027567
   1f9d0:	00027570 	.word	0x00027570
   1f9d4:	00027578 	.word	0x00027578
   1f9d8:	00027581 	.word	0x00027581
   1f9dc:	463a      	mov	r2, r7
   1f9de:	4649      	mov	r1, r9
   1f9e0:	f7f0 fe5b 	bl	1069a <memset>
   1f9e4:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   1f9e8:	fb06 f706 	mul.w	r7, r6, r6
   1f9ec:	00ff      	lsls	r7, r7, #3
   1f9ee:	f1b9 0f00 	cmp.w	r9, #0
   1f9f2:	d109      	bne.n	1fa08 <srkf_dbl_init+0x334>
   1f9f4:	4638      	mov	r0, r7
   1f9f6:	f7f0 fdd3 	bl	105a0 <malloc>
   1f9fa:	63a0      	str	r0, [r4, #56]	; 0x38
   1f9fc:	b978      	cbnz	r0, 1fa1e <srkf_dbl_init+0x34a>
   1f9fe:	4b6d      	ldr	r3, [pc, #436]	; (1fbb4 <srkf_dbl_init+0x4e0>)
   1fa00:	4a6d      	ldr	r2, [pc, #436]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fa02:	f44f 7194 	mov.w	r1, #296	; 0x128
   1fa06:	e674      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fa08:	4639      	mov	r1, r7
   1fa0a:	4648      	mov	r0, r9
   1fa0c:	f001 fd07 	bl	2141e <realloc>
   1fa10:	63a0      	str	r0, [r4, #56]	; 0x38
   1fa12:	b920      	cbnz	r0, 1fa1e <srkf_dbl_init+0x34a>
   1fa14:	4b67      	ldr	r3, [pc, #412]	; (1fbb4 <srkf_dbl_init+0x4e0>)
   1fa16:	4a68      	ldr	r2, [pc, #416]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fa18:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1fa1c:	e669      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fa1e:	463a      	mov	r2, r7
   1fa20:	2100      	movs	r1, #0
   1fa22:	f7f0 fe3a 	bl	1069a <memset>
   1fa26:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   1fa2a:	f1b9 0f00 	cmp.w	r9, #0
   1fa2e:	d109      	bne.n	1fa44 <srkf_dbl_init+0x370>
   1fa30:	4638      	mov	r0, r7
   1fa32:	f7f0 fdb5 	bl	105a0 <malloc>
   1fa36:	63e0      	str	r0, [r4, #60]	; 0x3c
   1fa38:	b978      	cbnz	r0, 1fa5a <srkf_dbl_init+0x386>
   1fa3a:	4b60      	ldr	r3, [pc, #384]	; (1fbbc <srkf_dbl_init+0x4e8>)
   1fa3c:	4a5e      	ldr	r2, [pc, #376]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fa3e:	f240 1131 	movw	r1, #305	; 0x131
   1fa42:	e656      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fa44:	4639      	mov	r1, r7
   1fa46:	4648      	mov	r0, r9
   1fa48:	f001 fce9 	bl	2141e <realloc>
   1fa4c:	63e0      	str	r0, [r4, #60]	; 0x3c
   1fa4e:	b920      	cbnz	r0, 1fa5a <srkf_dbl_init+0x386>
   1fa50:	4b5a      	ldr	r3, [pc, #360]	; (1fbbc <srkf_dbl_init+0x4e8>)
   1fa52:	4a59      	ldr	r2, [pc, #356]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fa54:	f240 1135 	movw	r1, #309	; 0x135
   1fa58:	e64b      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fa5a:	463a      	mov	r2, r7
   1fa5c:	2100      	movs	r1, #0
   1fa5e:	f7f0 fe1c 	bl	1069a <memset>
   1fa62:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   1fa66:	f1b9 0f00 	cmp.w	r9, #0
   1fa6a:	d109      	bne.n	1fa80 <srkf_dbl_init+0x3ac>
   1fa6c:	4638      	mov	r0, r7
   1fa6e:	f7f0 fd97 	bl	105a0 <malloc>
   1fa72:	6420      	str	r0, [r4, #64]	; 0x40
   1fa74:	b978      	cbnz	r0, 1fa96 <srkf_dbl_init+0x3c2>
   1fa76:	4b52      	ldr	r3, [pc, #328]	; (1fbc0 <srkf_dbl_init+0x4ec>)
   1fa78:	4a4f      	ldr	r2, [pc, #316]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fa7a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1fa7e:	e638      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fa80:	4639      	mov	r1, r7
   1fa82:	4648      	mov	r0, r9
   1fa84:	f001 fccb 	bl	2141e <realloc>
   1fa88:	6420      	str	r0, [r4, #64]	; 0x40
   1fa8a:	b920      	cbnz	r0, 1fa96 <srkf_dbl_init+0x3c2>
   1fa8c:	4b4c      	ldr	r3, [pc, #304]	; (1fbc0 <srkf_dbl_init+0x4ec>)
   1fa8e:	4a4a      	ldr	r2, [pc, #296]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fa90:	f44f 719f 	mov.w	r1, #318	; 0x13e
   1fa94:	e62d      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fa96:	463a      	mov	r2, r7
   1fa98:	2100      	movs	r1, #0
   1fa9a:	f7f0 fdfe 	bl	1069a <memset>
   1fa9e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1faa0:	b988      	cbnz	r0, 1fac6 <srkf_dbl_init+0x3f2>
   1faa2:	42b5      	cmp	r5, r6
   1faa4:	bf8c      	ite	hi
   1faa6:	fb15 f705 	smulbbhi	r7, r5, r5
   1faaa:	fb16 f706 	smulbbls	r7, r6, r6
   1faae:	b2bf      	uxth	r7, r7
   1fab0:	00ff      	lsls	r7, r7, #3
   1fab2:	4638      	mov	r0, r7
   1fab4:	f7f0 fd74 	bl	105a0 <malloc>
   1fab8:	6460      	str	r0, [r4, #68]	; 0x44
   1faba:	b9b0      	cbnz	r0, 1faea <srkf_dbl_init+0x416>
   1fabc:	4b41      	ldr	r3, [pc, #260]	; (1fbc4 <srkf_dbl_init+0x4f0>)
   1fabe:	4a3e      	ldr	r2, [pc, #248]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fac0:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1fac4:	e615      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fac6:	42b5      	cmp	r5, r6
   1fac8:	bf8c      	ite	hi
   1faca:	fb15 f705 	smulbbhi	r7, r5, r5
   1face:	fb16 f706 	smulbbls	r7, r6, r6
   1fad2:	b2bf      	uxth	r7, r7
   1fad4:	00ff      	lsls	r7, r7, #3
   1fad6:	4639      	mov	r1, r7
   1fad8:	f001 fca1 	bl	2141e <realloc>
   1fadc:	6460      	str	r0, [r4, #68]	; 0x44
   1fade:	b920      	cbnz	r0, 1faea <srkf_dbl_init+0x416>
   1fae0:	4b38      	ldr	r3, [pc, #224]	; (1fbc4 <srkf_dbl_init+0x4f0>)
   1fae2:	4a35      	ldr	r2, [pc, #212]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fae4:	f240 1149 	movw	r1, #329	; 0x149
   1fae8:	e603      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1faea:	463a      	mov	r2, r7
   1faec:	2100      	movs	r1, #0
   1faee:	f7f0 fdd4 	bl	1069a <memset>
   1faf2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1faf4:	b988      	cbnz	r0, 1fb1a <srkf_dbl_init+0x446>
   1faf6:	42b5      	cmp	r5, r6
   1faf8:	bf8c      	ite	hi
   1fafa:	fb15 f705 	smulbbhi	r7, r5, r5
   1fafe:	fb16 f706 	smulbbls	r7, r6, r6
   1fb02:	b2bf      	uxth	r7, r7
   1fb04:	00ff      	lsls	r7, r7, #3
   1fb06:	4638      	mov	r0, r7
   1fb08:	f7f0 fd4a 	bl	105a0 <malloc>
   1fb0c:	64a0      	str	r0, [r4, #72]	; 0x48
   1fb0e:	b9b0      	cbnz	r0, 1fb3e <srkf_dbl_init+0x46a>
   1fb10:	4b2d      	ldr	r3, [pc, #180]	; (1fbc8 <srkf_dbl_init+0x4f4>)
   1fb12:	4a29      	ldr	r2, [pc, #164]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fb14:	f240 114f 	movw	r1, #335	; 0x14f
   1fb18:	e5eb      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fb1a:	42b5      	cmp	r5, r6
   1fb1c:	bf8c      	ite	hi
   1fb1e:	fb15 f705 	smulbbhi	r7, r5, r5
   1fb22:	fb16 f706 	smulbbls	r7, r6, r6
   1fb26:	b2bf      	uxth	r7, r7
   1fb28:	00ff      	lsls	r7, r7, #3
   1fb2a:	4639      	mov	r1, r7
   1fb2c:	f001 fc77 	bl	2141e <realloc>
   1fb30:	64a0      	str	r0, [r4, #72]	; 0x48
   1fb32:	b920      	cbnz	r0, 1fb3e <srkf_dbl_init+0x46a>
   1fb34:	4b24      	ldr	r3, [pc, #144]	; (1fbc8 <srkf_dbl_init+0x4f4>)
   1fb36:	4a20      	ldr	r2, [pc, #128]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fb38:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1fb3c:	e5d9      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fb3e:	463a      	mov	r2, r7
   1fb40:	2100      	movs	r1, #0
   1fb42:	f7f0 fdaa 	bl	1069a <memset>
   1fb46:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   1fb48:	b97f      	cbnz	r7, 1fb6a <srkf_dbl_init+0x496>
   1fb4a:	436d      	muls	r5, r5
   1fb4c:	00ed      	lsls	r5, r5, #3
   1fb4e:	4628      	mov	r0, r5
   1fb50:	f7f0 fd26 	bl	105a0 <malloc>
   1fb54:	64e0      	str	r0, [r4, #76]	; 0x4c
   1fb56:	b920      	cbnz	r0, 1fb62 <srkf_dbl_init+0x48e>
   1fb58:	4b1c      	ldr	r3, [pc, #112]	; (1fbcc <srkf_dbl_init+0x4f8>)
   1fb5a:	4a17      	ldr	r2, [pc, #92]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fb5c:	f240 1159 	movw	r1, #345	; 0x159
   1fb60:	e5c7      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fb62:	462a      	mov	r2, r5
   1fb64:	4639      	mov	r1, r7
   1fb66:	f7f0 fd98 	bl	1069a <memset>
   1fb6a:	6d25      	ldr	r5, [r4, #80]	; 0x50
   1fb6c:	b94d      	cbnz	r5, 1fb82 <srkf_dbl_init+0x4ae>
   1fb6e:	4640      	mov	r0, r8
   1fb70:	f7f0 fd16 	bl	105a0 <malloc>
   1fb74:	6520      	str	r0, [r4, #80]	; 0x50
   1fb76:	b978      	cbnz	r0, 1fb98 <srkf_dbl_init+0x4c4>
   1fb78:	4b15      	ldr	r3, [pc, #84]	; (1fbd0 <srkf_dbl_init+0x4fc>)
   1fb7a:	4a0f      	ldr	r2, [pc, #60]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fb7c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1fb80:	e5b7      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fb82:	4641      	mov	r1, r8
   1fb84:	4628      	mov	r0, r5
   1fb86:	f001 fc4a 	bl	2141e <realloc>
   1fb8a:	6520      	str	r0, [r4, #80]	; 0x50
   1fb8c:	b920      	cbnz	r0, 1fb98 <srkf_dbl_init+0x4c4>
   1fb8e:	4b10      	ldr	r3, [pc, #64]	; (1fbd0 <srkf_dbl_init+0x4fc>)
   1fb90:	4a09      	ldr	r2, [pc, #36]	; (1fbb8 <srkf_dbl_init+0x4e4>)
   1fb92:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1fb96:	e5ac      	b.n	1f6f2 <srkf_dbl_init+0x1e>
   1fb98:	4642      	mov	r2, r8
   1fb9a:	2100      	movs	r1, #0
   1fb9c:	f7f0 fd7d 	bl	1069a <memset>
   1fba0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1fba4:	80a6      	strh	r6, [r4, #4]
   1fba6:	f043 0302 	orr.w	r3, r3, #2
   1fbaa:	8066      	strh	r6, [r4, #2]
   1fbac:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1fbb0:	e5db      	b.n	1f76a <srkf_dbl_init+0x96>
   1fbb2:	bf00      	nop
   1fbb4:	0002758a 	.word	0x0002758a
   1fbb8:	000274f9 	.word	0x000274f9
   1fbbc:	00027592 	.word	0x00027592
   1fbc0:	0002759b 	.word	0x0002759b
   1fbc4:	000275a4 	.word	0x000275a4
   1fbc8:	000275ac 	.word	0x000275ac
   1fbcc:	000275b5 	.word	0x000275b5
   1fbd0:	000275bd 	.word	0x000275bd

0001fbd4 <srkf_dbl_free>:
   1fbd4:	b510      	push	{r4, lr}
   1fbd6:	4604      	mov	r4, r0
   1fbd8:	b930      	cbnz	r0, 1fbe8 <srkf_dbl_free+0x14>
   1fbda:	4b23      	ldr	r3, [pc, #140]	; (1fc68 <srkf_dbl_free+0x94>)
   1fbdc:	4a23      	ldr	r2, [pc, #140]	; (1fc6c <srkf_dbl_free+0x98>)
   1fbde:	4824      	ldr	r0, [pc, #144]	; (1fc70 <srkf_dbl_free+0x9c>)
   1fbe0:	f240 1173 	movw	r1, #371	; 0x173
   1fbe4:	f7e9 faee 	bl	91c4 <__assert_func>
   1fbe8:	6880      	ldr	r0, [r0, #8]
   1fbea:	f7f0 fd0f 	bl	1060c <free>
   1fbee:	6920      	ldr	r0, [r4, #16]
   1fbf0:	f7f0 fd0c 	bl	1060c <free>
   1fbf4:	69a0      	ldr	r0, [r4, #24]
   1fbf6:	f7f0 fd09 	bl	1060c <free>
   1fbfa:	69e0      	ldr	r0, [r4, #28]
   1fbfc:	f7f0 fd06 	bl	1060c <free>
   1fc00:	6a20      	ldr	r0, [r4, #32]
   1fc02:	f7f0 fd03 	bl	1060c <free>
   1fc06:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1fc08:	f7f0 fd00 	bl	1060c <free>
   1fc0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1fc0e:	f7f0 fcfd 	bl	1060c <free>
   1fc12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1fc14:	f7f0 fcfa 	bl	1060c <free>
   1fc18:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1fc1a:	f7f0 fcf7 	bl	1060c <free>
   1fc1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1fc20:	f7f0 fcf4 	bl	1060c <free>
   1fc24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1fc26:	f7f0 fcf1 	bl	1060c <free>
   1fc2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1fc2c:	f7f0 fcee 	bl	1060c <free>
   1fc30:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1fc32:	f7f0 fceb 	bl	1060c <free>
   1fc36:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1fc38:	f7f0 fce8 	bl	1060c <free>
   1fc3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1fc3e:	f7f0 fce5 	bl	1060c <free>
   1fc42:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1fc44:	f7f0 fce2 	bl	1060c <free>
   1fc48:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1fc4a:	f7f0 fcdf 	bl	1060c <free>
   1fc4e:	2300      	movs	r3, #0
   1fc50:	6023      	str	r3, [r4, #0]
   1fc52:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1fc56:	07db      	lsls	r3, r3, #31
   1fc58:	d504      	bpl.n	1fc64 <srkf_dbl_free+0x90>
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fc60:	f7f0 bcd4 	b.w	1060c <free>
   1fc64:	bd10      	pop	{r4, pc}
   1fc66:	bf00      	nop
   1fc68:	00027515 	.word	0x00027515
   1fc6c:	00027507 	.word	0x00027507
   1fc70:	000275d2 	.word	0x000275d2

0001fc74 <trisolve_dbl>:
   1fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc78:	b08b      	sub	sp, #44	; 0x2c
   1fc7a:	4699      	mov	r9, r3
   1fc7c:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   1fc80:	9004      	str	r0, [sp, #16]
   1fc82:	f06f 0307 	mvn.w	r3, #7
   1fc86:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   1fc8a:	fb03 f308 	mul.w	r3, r3, r8
   1fc8e:	b236      	sxth	r6, r6
   1fc90:	9303      	str	r3, [sp, #12]
   1fc92:	e9cd 1208 	strd	r1, r2, [sp, #32]
   1fc96:	fb06 f308 	mul.w	r3, r6, r8
   1fc9a:	9306      	str	r3, [sp, #24]
   1fc9c:	fb09 f306 	mul.w	r3, r9, r6
   1fca0:	9307      	str	r3, [sp, #28]
   1fca2:	f04f 0b00 	mov.w	fp, #0
   1fca6:	fa0f fa8b 	sxth.w	sl, fp
   1fcaa:	45c2      	cmp	sl, r8
   1fcac:	db02      	blt.n	1fcb4 <trisolve_dbl+0x40>
   1fcae:	b00b      	add	sp, #44	; 0x2c
   1fcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcb4:	9b06      	ldr	r3, [sp, #24]
   1fcb6:	4453      	add	r3, sl
   1fcb8:	00db      	lsls	r3, r3, #3
   1fcba:	9305      	str	r3, [sp, #20]
   1fcbc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1fcc0:	189f      	adds	r7, r3, r2
   1fcc2:	9b07      	ldr	r3, [sp, #28]
   1fcc4:	9301      	str	r3, [sp, #4]
   1fcc6:	2300      	movs	r3, #0
   1fcc8:	4635      	mov	r5, r6
   1fcca:	9302      	str	r3, [sp, #8]
   1fccc:	2d00      	cmp	r5, #0
   1fcce:	da02      	bge.n	1fcd6 <trisolve_dbl+0x62>
   1fcd0:	f10b 0b01 	add.w	fp, fp, #1
   1fcd4:	e7e7      	b.n	1fca6 <trisolve_dbl+0x32>
   1fcd6:	9a05      	ldr	r2, [sp, #20]
   1fcd8:	9b02      	ldr	r3, [sp, #8]
   1fcda:	4413      	add	r3, r2
   1fcdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fcde:	4413      	add	r3, r2
   1fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fce4:	e9c7 2300 	strd	r2, r3, [r7]
   1fce8:	b2ad      	uxth	r5, r5
   1fcea:	1c6c      	adds	r4, r5, #1
   1fcec:	b224      	sxth	r4, r4
   1fcee:	454c      	cmp	r4, r9
   1fcf0:	db0c      	blt.n	1fd0c <trisolve_dbl+0x98>
   1fcf2:	9b03      	ldr	r3, [sp, #12]
   1fcf4:	441f      	add	r7, r3
   1fcf6:	9b01      	ldr	r3, [sp, #4]
   1fcf8:	eba3 0309 	sub.w	r3, r3, r9
   1fcfc:	9301      	str	r3, [sp, #4]
   1fcfe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1fd02:	3d01      	subs	r5, #1
   1fd04:	4413      	add	r3, r2
   1fd06:	9302      	str	r3, [sp, #8]
   1fd08:	b22d      	sxth	r5, r5
   1fd0a:	e7df      	b.n	1fccc <trisolve_dbl+0x58>
   1fd0c:	9b04      	ldr	r3, [sp, #16]
   1fd0e:	9a08      	ldr	r2, [sp, #32]
   1fd10:	fb08 a104 	mla	r1, r8, r4, sl
   1fd14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1fd18:	9b01      	ldr	r3, [sp, #4]
   1fd1a:	4423      	add	r3, r4
   1fd1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1fd20:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fd24:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fd28:	f003 fc7a 	bl	23620 <__aeabi_dmul>
   1fd2c:	4602      	mov	r2, r0
   1fd2e:	460b      	mov	r3, r1
   1fd30:	e9d7 0100 	ldrd	r0, r1, [r7]
   1fd34:	f003 fabc 	bl	232b0 <__aeabi_dsub>
   1fd38:	3401      	adds	r4, #1
   1fd3a:	e9c7 0100 	strd	r0, r1, [r7]
   1fd3e:	e7d5      	b.n	1fcec <trisolve_dbl+0x78>

0001fd40 <ud_dbl>:
   1fd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd44:	ed2d 8b02 	vpush	{d8}
   1fd48:	fb03 f503 	mul.w	r5, r3, r3
   1fd4c:	b091      	sub	sp, #68	; 0x44
   1fd4e:	460f      	mov	r7, r1
   1fd50:	00ed      	lsls	r5, r5, #3
   1fd52:	4606      	mov	r6, r0
   1fd54:	9209      	str	r2, [sp, #36]	; 0x24
   1fd56:	2100      	movs	r1, #0
   1fd58:	462a      	mov	r2, r5
   1fd5a:	4638      	mov	r0, r7
   1fd5c:	461c      	mov	r4, r3
   1fd5e:	f7f0 fc9c 	bl	1069a <memset>
   1fd62:	462a      	mov	r2, r5
   1fd64:	2100      	movs	r1, #0
   1fd66:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fd68:	f7f0 fc97 	bl	1069a <memset>
   1fd6c:	43e3      	mvns	r3, r4
   1fd6e:	00db      	lsls	r3, r3, #3
   1fd70:	1e65      	subs	r5, r4, #1
   1fd72:	b22d      	sxth	r5, r5
   1fd74:	9306      	str	r3, [sp, #24]
   1fd76:	1c63      	adds	r3, r4, #1
   1fd78:	930d      	str	r3, [sp, #52]	; 0x34
   1fd7a:	436b      	muls	r3, r5
   1fd7c:	00da      	lsls	r2, r3, #3
   1fd7e:	00d9      	lsls	r1, r3, #3
   1fd80:	3301      	adds	r3, #1
   1fd82:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1fd86:	9308      	str	r3, [sp, #32]
   1fd88:	f06f 0307 	mvn.w	r3, #7
   1fd8c:	4363      	muls	r3, r4
   1fd8e:	920b      	str	r2, [sp, #44]	; 0x2c
   1fd90:	ed9f 8b51 	vldr	d8, [pc, #324]	; 1fed8 <ud_dbl+0x198>
   1fd94:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fd96:	930c      	str	r3, [sp, #48]	; 0x30
   1fd98:	fb05 fa04 	mul.w	sl, r5, r4
   1fd9c:	187b      	adds	r3, r7, r1
   1fd9e:	f04f 0900 	mov.w	r9, #0
   1fda2:	eb02 0b01 	add.w	fp, r2, r1
   1fda6:	f8cd a01c 	str.w	sl, [sp, #28]
   1fdaa:	930f      	str	r3, [sp, #60]	; 0x3c
   1fdac:	f8cd 9010 	str.w	r9, [sp, #16]
   1fdb0:	2d00      	cmp	r5, #0
   1fdb2:	da0d      	bge.n	1fdd0 <ud_dbl+0x90>
   1fdb4:	2000      	movs	r0, #0
   1fdb6:	f04f 0800 	mov.w	r8, #0
   1fdba:	f04f 0900 	mov.w	r9, #0
   1fdbe:	b201      	sxth	r1, r0
   1fdc0:	428c      	cmp	r4, r1
   1fdc2:	dd7f      	ble.n	1fec4 <ud_dbl+0x184>
   1fdc4:	fb04 f301 	mul.w	r3, r4, r1
   1fdc8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1fdcc:	2200      	movs	r2, #0
   1fdce:	e074      	b.n	1feba <ud_dbl+0x17a>
   1fdd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1fdd2:	f8cd a014 	str.w	sl, [sp, #20]
   1fdd6:	444b      	add	r3, r9
   1fdd8:	9303      	str	r3, [sp, #12]
   1fdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fddc:	444b      	add	r3, r9
   1fdde:	18fb      	adds	r3, r7, r3
   1fde0:	930e      	str	r3, [sp, #56]	; 0x38
   1fde2:	9b08      	ldr	r3, [sp, #32]
   1fde4:	930a      	str	r3, [sp, #40]	; 0x28
   1fde6:	46a8      	mov	r8, r5
   1fde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fdea:	ed33 7b02 	vldmdb	r3!, {d7}
   1fdee:	ed8d 7b00 	vstr	d7, [sp]
   1fdf2:	930a      	str	r3, [sp, #40]	; 0x28
   1fdf4:	462e      	mov	r6, r5
   1fdf6:	42b4      	cmp	r4, r6
   1fdf8:	dc30      	bgt.n	1fe5c <ud_dbl+0x11c>
   1fdfa:	4545      	cmp	r5, r8
   1fdfc:	d150      	bne.n	1fea0 <ud_dbl+0x160>
   1fdfe:	4b38      	ldr	r3, [pc, #224]	; (1fee0 <ud_dbl+0x1a0>)
   1fe00:	2200      	movs	r2, #0
   1fe02:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe06:	f003 fe87 	bl	23b18 <__aeabi_dcmple>
   1fe0a:	2800      	cmp	r0, #0
   1fe0c:	9b04      	ldr	r3, [sp, #16]
   1fe0e:	ed9d 7b00 	vldr	d7, [sp]
   1fe12:	bf18      	it	ne
   1fe14:	2301      	movne	r3, #1
   1fe16:	9304      	str	r3, [sp, #16]
   1fe18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fe1a:	ed8b 7b00 	vstr	d7, [fp]
   1fe1e:	ed83 8b00 	vstr	d8, [r3]
   1fe22:	9b03      	ldr	r3, [sp, #12]
   1fe24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1fe26:	4413      	add	r3, r2
   1fe28:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1fe2c:	9303      	str	r3, [sp, #12]
   1fe2e:	9b05      	ldr	r3, [sp, #20]
   1fe30:	fa0f f888 	sxth.w	r8, r8
   1fe34:	1b1b      	subs	r3, r3, r4
   1fe36:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1fe3a:	9305      	str	r3, [sp, #20]
   1fe3c:	d1d4      	bne.n	1fde8 <ud_dbl+0xa8>
   1fe3e:	9b06      	ldr	r3, [sp, #24]
   1fe40:	9a06      	ldr	r2, [sp, #24]
   1fe42:	449b      	add	fp, r3
   1fe44:	9b08      	ldr	r3, [sp, #32]
   1fe46:	4413      	add	r3, r2
   1fe48:	9308      	str	r3, [sp, #32]
   1fe4a:	9b07      	ldr	r3, [sp, #28]
   1fe4c:	3d01      	subs	r5, #1
   1fe4e:	1b1b      	subs	r3, r3, r4
   1fe50:	b22d      	sxth	r5, r5
   1fe52:	ebaa 0a04 	sub.w	sl, sl, r4
   1fe56:	9307      	str	r3, [sp, #28]
   1fe58:	4491      	add	r9, r2
   1fe5a:	e7a9      	b.n	1fdb0 <ud_dbl+0x70>
   1fe5c:	9b05      	ldr	r3, [sp, #20]
   1fe5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fe60:	1999      	adds	r1, r3, r6
   1fe62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe64:	4373      	muls	r3, r6
   1fe66:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   1fe6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fe72:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fe76:	f003 fbd3 	bl	23620 <__aeabi_dmul>
   1fe7a:	9b07      	ldr	r3, [sp, #28]
   1fe7c:	4433      	add	r3, r6
   1fe7e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fe86:	f003 fbcb 	bl	23620 <__aeabi_dmul>
   1fe8a:	4602      	mov	r2, r0
   1fe8c:	460b      	mov	r3, r1
   1fe8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe92:	f003 fa0d 	bl	232b0 <__aeabi_dsub>
   1fe96:	3601      	adds	r6, #1
   1fe98:	e9cd 0100 	strd	r0, r1, [sp]
   1fe9c:	b236      	sxth	r6, r6
   1fe9e:	e7aa      	b.n	1fdf6 <ud_dbl+0xb6>
   1fea0:	e9db 2300 	ldrd	r2, r3, [fp]
   1fea4:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fea8:	f003 fce4 	bl	23874 <__aeabi_ddiv>
   1feac:	9b03      	ldr	r3, [sp, #12]
   1feae:	e9c3 0100 	strd	r0, r1, [r3]
   1feb2:	e7b6      	b.n	1fe22 <ud_dbl+0xe2>
   1feb4:	e8e3 8902 	strd	r8, r9, [r3], #8
   1feb8:	3201      	adds	r2, #1
   1feba:	b215      	sxth	r5, r2
   1febc:	42a9      	cmp	r1, r5
   1febe:	dcf9      	bgt.n	1feb4 <ud_dbl+0x174>
   1fec0:	3001      	adds	r0, #1
   1fec2:	e77c      	b.n	1fdbe <ud_dbl+0x7e>
   1fec4:	9b04      	ldr	r3, [sp, #16]
   1fec6:	f04f 0000 	mov.w	r0, #0
   1feca:	f363 0000 	bfi	r0, r3, #0, #1
   1fece:	b011      	add	sp, #68	; 0x44
   1fed0:	ecbd 8b02 	vpop	{d8}
   1fed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fed8:	00000000 	.word	0x00000000
   1fedc:	3ff00000 	.word	0x3ff00000
   1fee0:	3cb00000 	.word	0x3cb00000
   1fee4:	00000000 	.word	0x00000000

0001fee8 <thornton_dbl>:
   1fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feec:	ed2d 8b02 	vpush	{d8}
   1fef0:	b09d      	sub	sp, #116	; 0x74
   1fef2:	af00      	add	r7, sp, #0
   1fef4:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   1fef8:	603b      	str	r3, [r7, #0]
   1fefa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1fefe:	6578      	str	r0, [r7, #84]	; 0x54
   1ff00:	667b      	str	r3, [r7, #100]	; 0x64
   1ff02:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1ff06:	6279      	str	r1, [r7, #36]	; 0x24
   1ff08:	2300      	movs	r3, #0
   1ff0a:	637a      	str	r2, [r7, #52]	; 0x34
   1ff0c:	4619      	mov	r1, r3
   1ff0e:	b28a      	uxth	r2, r1
   1ff10:	4593      	cmp	fp, r2
   1ff12:	d856      	bhi.n	1ffc2 <thornton_dbl+0xda>
   1ff14:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   1ff18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ff1a:	b224      	sxth	r4, r4
   1ff1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ff20:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ff22:	65fc      	str	r4, [r7, #92]	; 0x5c
   1ff24:	2300      	movs	r3, #0
   1ff26:	65bb      	str	r3, [r7, #88]	; 0x58
   1ff28:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   1ff2c:	455b      	cmp	r3, fp
   1ff2e:	db4e      	blt.n	1ffce <thornton_dbl+0xe6>
   1ff30:	fb0b f304 	mul.w	r3, fp, r4
   1ff34:	643b      	str	r3, [r7, #64]	; 0x40
   1ff36:	ea6f 030b 	mvn.w	r3, fp
   1ff3a:	00db      	lsls	r3, r3, #3
   1ff3c:	60bb      	str	r3, [r7, #8]
   1ff3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ff42:	f10b 0301 	add.w	r3, fp, #1
   1ff46:	63bb      	str	r3, [r7, #56]	; 0x38
   1ff48:	4363      	muls	r3, r4
   1ff4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ff4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ff50:	f06f 0307 	mvn.w	r3, #7
   1ff54:	fb03 f30b 	mul.w	r3, r3, fp
   1ff58:	607b      	str	r3, [r7, #4]
   1ff5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ff5c:	4363      	muls	r3, r4
   1ff5e:	65bb      	str	r3, [r7, #88]	; 0x58
   1ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ff62:	00db      	lsls	r3, r3, #3
   1ff64:	62bb      	str	r3, [r7, #40]	; 0x28
   1ff66:	2300      	movs	r3, #0
   1ff68:	64fb      	str	r3, [r7, #76]	; 0x4c
   1ff6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1ff6c:	330e      	adds	r3, #14
   1ff6e:	08db      	lsrs	r3, r3, #3
   1ff70:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 20238 <thornton_dbl+0x350>
   1ff74:	00db      	lsls	r3, r3, #3
   1ff76:	653b      	str	r3, [r7, #80]	; 0x50
   1ff78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1ff7a:	041b      	lsls	r3, r3, #16
   1ff7c:	d56b      	bpl.n	20056 <thornton_dbl+0x16e>
   1ff7e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 20238 <thornton_dbl+0x350>
   1ff82:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 20244 <thornton_dbl+0x35c>
   1ff86:	2100      	movs	r1, #0
   1ff88:	f04f 0800 	mov.w	r8, #0
   1ff8c:	b20a      	sxth	r2, r1
   1ff8e:	455a      	cmp	r2, fp
   1ff90:	f2c0 81a3 	blt.w	202da <thornton_dbl+0x3f2>
   1ff94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ff96:	f04f 0000 	mov.w	r0, #0
   1ff9a:	f363 0000 	bfi	r0, r3, #0, #1
   1ff9e:	3774      	adds	r7, #116	; 0x74
   1ffa0:	46bd      	mov	sp, r7
   1ffa2:	ecbd 8b02 	vpop	{d8}
   1ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffaa:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   1ffae:	e8e4 8902 	strd	r8, r9, [r4], #8
   1ffb2:	3201      	adds	r2, #1
   1ffb4:	b296      	uxth	r6, r2
   1ffb6:	45b3      	cmp	fp, r6
   1ffb8:	d8f7      	bhi.n	1ffaa <thornton_dbl+0xc2>
   1ffba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   1ffbc:	3101      	adds	r1, #1
   1ffbe:	4413      	add	r3, r2
   1ffc0:	e7a5      	b.n	1ff0e <thornton_dbl+0x26>
   1ffc2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ffc6:	18c5      	adds	r5, r0, r3
   1ffc8:	18d4      	adds	r4, r2, r3
   1ffca:	2200      	movs	r2, #0
   1ffcc:	e7f2      	b.n	1ffb4 <thornton_dbl+0xcc>
   1ffce:	fb0b f303 	mul.w	r3, fp, r3
   1ffd2:	191d      	adds	r5, r3, r4
   1ffd4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ffd8:	3501      	adds	r5, #1
   1ffda:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   1ffde:	663a      	str	r2, [r7, #96]	; 0x60
   1ffe0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ffe4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ffe8:	653b      	str	r3, [r7, #80]	; 0x50
   1ffea:	4626      	mov	r6, r4
   1ffec:	f04f 0800 	mov.w	r8, #0
   1fff0:	2e00      	cmp	r6, #0
   1fff2:	da02      	bge.n	1fffa <thornton_dbl+0x112>
   1fff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1fff6:	3301      	adds	r3, #1
   1fff8:	e795      	b.n	1ff26 <thornton_dbl+0x3e>
   1fffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1fffc:	ed13 7b02 	vldr	d7, [r3, #-8]
   20000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20002:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   20006:	eb08 0a03 	add.w	sl, r8, r3
   2000a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2000c:	f04f 0900 	mov.w	r9, #0
   20010:	461d      	mov	r5, r3
   20012:	fa0f f389 	sxth.w	r3, r9
   20016:	429e      	cmp	r6, r3
   20018:	dc0a      	bgt.n	20030 <thornton_dbl+0x148>
   2001a:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   2001e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20020:	ed23 7b02 	vstmdb	r3!, {d7}
   20024:	3e01      	subs	r6, #1
   20026:	663b      	str	r3, [r7, #96]	; 0x60
   20028:	b236      	sxth	r6, r6
   2002a:	f1a8 0808 	sub.w	r8, r8, #8
   2002e:	e7df      	b.n	1fff0 <thornton_dbl+0x108>
   20030:	e9da 2300 	ldrd	r2, r3, [sl]
   20034:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   20038:	f003 faf2 	bl	23620 <__aeabi_dmul>
   2003c:	460b      	mov	r3, r1
   2003e:	4602      	mov	r2, r0
   20040:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   20044:	f003 f936 	bl	232b4 <__adddf3>
   20048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2004a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   2004e:	f109 0901 	add.w	r9, r9, #1
   20052:	449a      	add	sl, r3
   20054:	e7dd      	b.n	20012 <thornton_dbl+0x12a>
   20056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20058:	f8c7 d020 	str.w	sp, [r7, #32]
   2005c:	ebad 0d03 	sub.w	sp, sp, r3
   20060:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   20064:	ebad 0d03 	sub.w	sp, sp, r3
   20068:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   2006c:	ebad 0d03 	sub.w	sp, sp, r3
   20070:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   20074:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20078:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   2007a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   2007c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   20080:	ebad 0d03 	sub.w	sp, sp, r3
   20084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20086:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   2008a:	4413      	add	r3, r2
   2008c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2008e:	663b      	str	r3, [r7, #96]	; 0x60
   20090:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   20094:	4623      	mov	r3, r4
   20096:	4413      	add	r3, r2
   20098:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   2009a:	60fb      	str	r3, [r7, #12]
   2009c:	68fb      	ldr	r3, [r7, #12]
   2009e:	429c      	cmp	r4, r3
   200a0:	d137      	bne.n	20112 <thornton_dbl+0x22a>
   200a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   200a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   200a6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   200a8:	683d      	ldr	r5, [r7, #0]
   200aa:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   200ae:	189e      	adds	r6, r3, r2
   200b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   200b2:	4623      	mov	r3, r4
   200b4:	4413      	add	r3, r2
   200b6:	60fb      	str	r3, [r7, #12]
   200b8:	68fb      	ldr	r3, [r7, #12]
   200ba:	429c      	cmp	r4, r3
   200bc:	d146      	bne.n	2014c <thornton_dbl+0x264>
   200be:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   200c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   200c4:	ec51 0b17 	vmov	r0, r1, d7
   200c8:	ed83 7b00 	vstr	d7, [r3]
   200cc:	2200      	movs	r2, #0
   200ce:	4b5c      	ldr	r3, [pc, #368]	; (20240 <thornton_dbl+0x358>)
   200d0:	f003 fd22 	bl	23b18 <__aeabi_dcmple>
   200d4:	2800      	cmp	r0, #0
   200d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   200d8:	495a      	ldr	r1, [pc, #360]	; (20244 <thornton_dbl+0x35c>)
   200da:	bf18      	it	ne
   200dc:	2301      	movne	r3, #1
   200de:	64fb      	str	r3, [r7, #76]	; 0x4c
   200e0:	2000      	movs	r0, #0
   200e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   200e6:	f003 fbc5 	bl	23874 <__aeabi_ddiv>
   200ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   200ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   200ee:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   200f2:	fa12 fa83 	uxtah	sl, r2, r3
   200f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   200fa:	2600      	movs	r6, #0
   200fc:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   20100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20102:	4553      	cmp	r3, sl
   20104:	f000 80d7 	beq.w	202b6 <thornton_dbl+0x3ce>
   20108:	f04f 0800 	mov.w	r8, #0
   2010c:	ec55 4b18 	vmov	r4, r5, d8
   20110:	e04f      	b.n	201b2 <thornton_dbl+0x2ca>
   20112:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   20116:	e9d5 2300 	ldrd	r2, r3, [r5]
   2011a:	e8e4 8902 	strd	r8, r9, [r4], #8
   2011e:	4640      	mov	r0, r8
   20120:	4649      	mov	r1, r9
   20122:	f003 fa7d 	bl	23620 <__aeabi_dmul>
   20126:	4602      	mov	r2, r0
   20128:	460b      	mov	r3, r1
   2012a:	e8ea 2302 	strd	r2, r3, [sl], #8
   2012e:	4640      	mov	r0, r8
   20130:	4649      	mov	r1, r9
   20132:	f003 fa75 	bl	23620 <__aeabi_dmul>
   20136:	460b      	mov	r3, r1
   20138:	4602      	mov	r2, r0
   2013a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   2013e:	f003 f8b9 	bl	232b4 <__adddf3>
   20142:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20144:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   20148:	441d      	add	r5, r3
   2014a:	e7a7      	b.n	2009c <thornton_dbl+0x1b4>
   2014c:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   20150:	e9d5 2300 	ldrd	r2, r3, [r5]
   20154:	e8e4 8902 	strd	r8, r9, [r4], #8
   20158:	4640      	mov	r0, r8
   2015a:	4649      	mov	r1, r9
   2015c:	f003 fa60 	bl	23620 <__aeabi_dmul>
   20160:	4602      	mov	r2, r0
   20162:	460b      	mov	r3, r1
   20164:	e8ea 2302 	strd	r2, r3, [sl], #8
   20168:	4640      	mov	r0, r8
   2016a:	4649      	mov	r1, r9
   2016c:	f003 fa58 	bl	23620 <__aeabi_dmul>
   20170:	460b      	mov	r3, r1
   20172:	4602      	mov	r2, r0
   20174:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   20178:	f003 f89c 	bl	232b4 <__adddf3>
   2017c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2017e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   20182:	441d      	add	r5, r3
   20184:	e798      	b.n	200b8 <thornton_dbl+0x1d0>
   20186:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   2018a:	18f1      	adds	r1, r6, r3
   2018c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   20190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20192:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20196:	e9d3 2300 	ldrd	r2, r3, [r3]
   2019a:	e9d1 0100 	ldrd	r0, r1, [r1]
   2019e:	f003 fa3f 	bl	23620 <__aeabi_dmul>
   201a2:	4602      	mov	r2, r0
   201a4:	460b      	mov	r3, r1
   201a6:	4620      	mov	r0, r4
   201a8:	4629      	mov	r1, r5
   201aa:	f003 f883 	bl	232b4 <__adddf3>
   201ae:	4604      	mov	r4, r0
   201b0:	460d      	mov	r5, r1
   201b2:	fa0f f388 	sxth.w	r3, r8
   201b6:	455b      	cmp	r3, fp
   201b8:	f108 0801 	add.w	r8, r8, #1
   201bc:	dbe3      	blt.n	20186 <thornton_dbl+0x29e>
   201be:	f04f 0800 	mov.w	r8, #0
   201c2:	fa0f f388 	sxth.w	r3, r8
   201c6:	455b      	cmp	r3, fp
   201c8:	f108 0801 	add.w	r8, r8, #1
   201cc:	db1d      	blt.n	2020a <thornton_dbl+0x322>
   201ce:	4620      	mov	r0, r4
   201d0:	4629      	mov	r1, r5
   201d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   201d6:	f003 fa23 	bl	23620 <__aeabi_dmul>
   201da:	f04f 0900 	mov.w	r9, #0
   201de:	4604      	mov	r4, r0
   201e0:	460d      	mov	r5, r1
   201e2:	fa0f f389 	sxth.w	r3, r9
   201e6:	455b      	cmp	r3, fp
   201e8:	f109 0901 	add.w	r9, r9, #1
   201ec:	db2c      	blt.n	20248 <thornton_dbl+0x360>
   201ee:	f04f 0900 	mov.w	r9, #0
   201f2:	fa0f f389 	sxth.w	r3, r9
   201f6:	455b      	cmp	r3, fp
   201f8:	f109 0901 	add.w	r9, r9, #1
   201fc:	db40      	blt.n	20280 <thornton_dbl+0x398>
   201fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20200:	e8e3 4502 	strd	r4, r5, [r3], #8
   20204:	445e      	add	r6, fp
   20206:	663b      	str	r3, [r7, #96]	; 0x60
   20208:	e77a      	b.n	20100 <thornton_dbl+0x218>
   2020a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2020c:	18f1      	adds	r1, r6, r3
   2020e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   20212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20218:	e9d3 2300 	ldrd	r2, r3, [r3]
   2021c:	e9d1 0100 	ldrd	r0, r1, [r1]
   20220:	f003 f9fe 	bl	23620 <__aeabi_dmul>
   20224:	4602      	mov	r2, r0
   20226:	460b      	mov	r3, r1
   20228:	4620      	mov	r0, r4
   2022a:	4629      	mov	r1, r5
   2022c:	f003 f842 	bl	232b4 <__adddf3>
   20230:	4604      	mov	r4, r0
   20232:	460d      	mov	r5, r1
   20234:	e7c5      	b.n	201c2 <thornton_dbl+0x2da>
   20236:	bf00      	nop
	...
   20240:	3cb00000 	.word	0x3cb00000
   20244:	3ff00000 	.word	0x3ff00000
   20248:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   2024c:	61bc      	str	r4, [r7, #24]
   2024e:	eb06 0803 	add.w	r8, r6, r3
   20252:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   20256:	6cba      	ldr	r2, [r7, #72]	; 0x48
   20258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2025c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   20260:	61fa      	str	r2, [r7, #28]
   20262:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   20266:	e9d3 2300 	ldrd	r2, r3, [r3]
   2026a:	f003 f9d9 	bl	23620 <__aeabi_dmul>
   2026e:	4602      	mov	r2, r0
   20270:	460b      	mov	r3, r1
   20272:	e9d8 0100 	ldrd	r0, r1, [r8]
   20276:	f003 f81d 	bl	232b4 <__adddf3>
   2027a:	e9c8 0100 	strd	r0, r1, [r8]
   2027e:	e7b0      	b.n	201e2 <thornton_dbl+0x2fa>
   20280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20282:	613c      	str	r4, [r7, #16]
   20284:	eb06 0803 	add.w	r8, r6, r3
   20288:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   2028c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   2028e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20292:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   20296:	617a      	str	r2, [r7, #20]
   20298:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2029c:	e9d3 2300 	ldrd	r2, r3, [r3]
   202a0:	f003 f9be 	bl	23620 <__aeabi_dmul>
   202a4:	4602      	mov	r2, r0
   202a6:	460b      	mov	r3, r1
   202a8:	e9d8 0100 	ldrd	r0, r1, [r8]
   202ac:	f003 f802 	bl	232b4 <__adddf3>
   202b0:	e9c8 0100 	strd	r0, r1, [r8]
   202b4:	e79d      	b.n	201f2 <thornton_dbl+0x30a>
   202b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   202b8:	68ba      	ldr	r2, [r7, #8]
   202ba:	f8d7 d020 	ldr.w	sp, [r7, #32]
   202be:	3b01      	subs	r3, #1
   202c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   202c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   202c4:	eba3 030b 	sub.w	r3, r3, fp
   202c8:	643b      	str	r3, [r7, #64]	; 0x40
   202ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   202cc:	4413      	add	r3, r2
   202ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   202d0:	687a      	ldr	r2, [r7, #4]
   202d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   202d4:	4413      	add	r3, r2
   202d6:	65bb      	str	r3, [r7, #88]	; 0x58
   202d8:	e64e      	b.n	1ff78 <thornton_dbl+0x90>
   202da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   202dc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   202e0:	4353      	muls	r3, r2
   202e2:	00db      	lsls	r3, r3, #3
   202e4:	4418      	add	r0, r3
   202e6:	e9d0 4500 	ldrd	r4, r5, [r0]
   202ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
   202ec:	4418      	add	r0, r3
   202ee:	e9c0 4500 	strd	r4, r5, [r0]
   202f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
   202f4:	4403      	add	r3, r0
   202f6:	e9c3 8900 	strd	r8, r9, [r3]
   202fa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   202fe:	fb0b f302 	mul.w	r3, fp, r2
   20302:	00db      	lsls	r3, r3, #3
   20304:	18c5      	adds	r5, r0, r3
   20306:	6d78      	ldr	r0, [r7, #84]	; 0x54
   20308:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   2030c:	4403      	add	r3, r0
   2030e:	2000      	movs	r0, #0
   20310:	b206      	sxth	r6, r0
   20312:	42b2      	cmp	r2, r6
   20314:	dc01      	bgt.n	2031a <thornton_dbl+0x432>
   20316:	3101      	adds	r1, #1
   20318:	e638      	b.n	1ff8c <thornton_dbl+0xa4>
   2031a:	ecb5 7b02 	vldmia	r5!, {d7}
   2031e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   20320:	ed84 7b00 	vstr	d7, [r4]
   20324:	3001      	adds	r0, #1
   20326:	eca3 6b02 	vstmia	r3!, {d6}
   2032a:	4434      	add	r4, r6
   2032c:	e7f0      	b.n	20310 <thornton_dbl+0x428>
   2032e:	bf00      	nop

00020330 <bierman_dbl>:
   20330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20334:	ed2d 8b04 	vpush	{d8-d9}
   20338:	eeb0 8a40 	vmov.f32	s16, s0
   2033c:	eef0 8a60 	vmov.f32	s17, s1
   20340:	b095      	sub	sp, #84	; 0x54
   20342:	af00      	add	r7, sp, #0
   20344:	4682      	mov	sl, r0
   20346:	62bb      	str	r3, [r7, #40]	; 0x28
   20348:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   2034c:	637b      	str	r3, [r7, #52]	; 0x34
   2034e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   20352:	f10b 030e 	add.w	r3, fp, #14
   20356:	08db      	lsrs	r3, r3, #3
   20358:	00db      	lsls	r3, r3, #3
   2035a:	ebad 0d03 	sub.w	sp, sp, r3
   2035e:	466c      	mov	r4, sp
   20360:	6079      	str	r1, [r7, #4]
   20362:	ebad 0d03 	sub.w	sp, sp, r3
   20366:	61ba      	str	r2, [r7, #24]
   20368:	2000      	movs	r0, #0
   2036a:	ec53 2b11 	vmov	r2, r3, d1
   2036e:	4970      	ldr	r1, [pc, #448]	; (20530 <bierman_dbl+0x200>)
   20370:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   20374:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   20378:	f003 fa7c 	bl	23874 <__aeabi_ddiv>
   2037c:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 20528 <bierman_dbl+0x1f8>
   20380:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   20384:	eb0a 030b 	add.w	r3, sl, fp
   20388:	627c      	str	r4, [r7, #36]	; 0x24
   2038a:	643b      	str	r3, [r7, #64]	; 0x40
   2038c:	4626      	mov	r6, r4
   2038e:	2500      	movs	r5, #0
   20390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20392:	b2ab      	uxth	r3, r5
   20394:	429a      	cmp	r2, r3
   20396:	d820      	bhi.n	203da <bierman_dbl+0xaa>
   20398:	f10b 0308 	add.w	r3, fp, #8
   2039c:	61fb      	str	r3, [r7, #28]
   2039e:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   203a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   203a4:	633b      	str	r3, [r7, #48]	; 0x30
   203a6:	eb04 060b 	add.w	r6, r4, fp
   203aa:	461d      	mov	r5, r3
   203ac:	46d0      	mov	r8, sl
   203ae:	42b4      	cmp	r4, r6
   203b0:	d12e      	bne.n	20410 <bierman_dbl+0xe0>
   203b2:	2300      	movs	r3, #0
   203b4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   203b6:	643b      	str	r3, [r7, #64]	; 0x40
   203b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   203bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   203be:	429a      	cmp	r2, r3
   203c0:	d831      	bhi.n	20426 <bierman_dbl+0xf6>
   203c2:	687e      	ldr	r6, [r7, #4]
   203c4:	eb06 0a0b 	add.w	sl, r6, fp
   203c8:	4556      	cmp	r6, sl
   203ca:	f040 8095 	bne.w	204f8 <bierman_dbl+0x1c8>
   203ce:	3754      	adds	r7, #84	; 0x54
   203d0:	46bd      	mov	sp, r7
   203d2:	ecbd 8b04 	vpop	{d8-d9}
   203d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203da:	69bb      	ldr	r3, [r7, #24]
   203dc:	eca6 9b02 	vstmia	r6!, {d9}
   203e0:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   203e4:	46d0      	mov	r8, sl
   203e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   203e8:	4598      	cmp	r8, r3
   203ea:	d101      	bne.n	203f0 <bierman_dbl+0xc0>
   203ec:	3501      	adds	r5, #1
   203ee:	e7cf      	b.n	20390 <bierman_dbl+0x60>
   203f0:	e9d9 2300 	ldrd	r2, r3, [r9]
   203f4:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   203f8:	f003 f912 	bl	23620 <__aeabi_dmul>
   203fc:	4602      	mov	r2, r0
   203fe:	460b      	mov	r3, r1
   20400:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   20404:	f002 ff56 	bl	232b4 <__adddf3>
   20408:	44d9      	add	r9, fp
   2040a:	e946 0102 	strd	r0, r1, [r6, #-8]
   2040e:	e7ea      	b.n	203e6 <bierman_dbl+0xb6>
   20410:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   20414:	e9d8 0100 	ldrd	r0, r1, [r8]
   20418:	f003 f902 	bl	23620 <__aeabi_dmul>
   2041c:	69fb      	ldr	r3, [r7, #28]
   2041e:	e8e5 0102 	strd	r0, r1, [r5], #8
   20422:	4498      	add	r8, r3
   20424:	e7c3      	b.n	203ae <bierman_dbl+0x7e>
   20426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20428:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   2042c:	627b      	str	r3, [r7, #36]	; 0x24
   2042e:	f104 0308 	add.w	r3, r4, #8
   20432:	623b      	str	r3, [r7, #32]
   20434:	4640      	mov	r0, r8
   20436:	e9d4 2300 	ldrd	r2, r3, [r4]
   2043a:	4649      	mov	r1, r9
   2043c:	f003 f8f0 	bl	23620 <__aeabi_dmul>
   20440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20444:	f002 ff36 	bl	232b4 <__adddf3>
   20448:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   2044c:	617b      	str	r3, [r7, #20]
   2044e:	f8c7 8010 	str.w	r8, [r7, #16]
   20452:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   20456:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   2045a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2045e:	f003 f8df 	bl	23620 <__aeabi_dmul>
   20462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   20466:	e9c7 0102 	strd	r0, r1, [r7, #8]
   2046a:	2000      	movs	r0, #0
   2046c:	4930      	ldr	r1, [pc, #192]	; (20530 <bierman_dbl+0x200>)
   2046e:	f003 fa01 	bl	23874 <__aeabi_ddiv>
   20472:	4602      	mov	r2, r0
   20474:	460b      	mov	r3, r1
   20476:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   2047a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   2047e:	f003 f8cf 	bl	23620 <__aeabi_dmul>
   20482:	4602      	mov	r2, r0
   20484:	460b      	mov	r3, r1
   20486:	e9da 0100 	ldrd	r0, r1, [sl]
   2048a:	f003 f8c9 	bl	23620 <__aeabi_dmul>
   2048e:	69bb      	ldr	r3, [r7, #24]
   20490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20492:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   20494:	e9ca 0100 	strd	r0, r1, [sl]
   20498:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   2049c:	42a5      	cmp	r5, r4
   2049e:	d10a      	bne.n	204b6 <bierman_dbl+0x186>
   204a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   204a2:	6a3c      	ldr	r4, [r7, #32]
   204a4:	3301      	adds	r3, #1
   204a6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   204aa:	643b      	str	r3, [r7, #64]	; 0x40
   204ac:	69fb      	ldr	r3, [r7, #28]
   204ae:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   204b2:	449a      	add	sl, r3
   204b4:	e780      	b.n	203b8 <bierman_dbl+0x88>
   204b6:	e9d5 8900 	ldrd	r8, r9, [r5]
   204ba:	ed96 7b00 	vldr	d7, [r6]
   204be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   204c2:	4640      	mov	r0, r8
   204c4:	4649      	mov	r1, r9
   204c6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   204ca:	f003 f8a9 	bl	23620 <__aeabi_dmul>
   204ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   204d2:	f002 feef 	bl	232b4 <__adddf3>
   204d6:	6a3b      	ldr	r3, [r7, #32]
   204d8:	e9c6 0100 	strd	r0, r1, [r6]
   204dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   204e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   204e4:	f003 f89c 	bl	23620 <__aeabi_dmul>
   204e8:	4642      	mov	r2, r8
   204ea:	464b      	mov	r3, r9
   204ec:	f002 fee2 	bl	232b4 <__adddf3>
   204f0:	445e      	add	r6, fp
   204f2:	e8e5 0102 	strd	r0, r1, [r5], #8
   204f6:	e7d1      	b.n	2049c <bierman_dbl+0x16c>
   204f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   204fa:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   204fe:	e9d6 4500 	ldrd	r4, r5, [r6]
   20502:	633b      	str	r3, [r7, #48]	; 0x30
   20504:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   20508:	ec53 2b18 	vmov	r2, r3, d8
   2050c:	f003 f888 	bl	23620 <__aeabi_dmul>
   20510:	4642      	mov	r2, r8
   20512:	464b      	mov	r3, r9
   20514:	f003 f884 	bl	23620 <__aeabi_dmul>
   20518:	4622      	mov	r2, r4
   2051a:	462b      	mov	r3, r5
   2051c:	f002 feca 	bl	232b4 <__adddf3>
   20520:	e8e6 0102 	strd	r0, r1, [r6], #8
   20524:	e750      	b.n	203c8 <bierman_dbl+0x98>
   20526:	bf00      	nop
	...
   20530:	3ff00000 	.word	0x3ff00000

00020534 <reset_cb>:
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20534:	b508      	push	{r3, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   20536:	6848      	ldr	r0, [r1, #4]
   20538:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
   2053c:	b10b      	cbz	r3, 20542 <reset_cb+0xe>
        assert(err == DPL_OK);
        SS_STATS_INC(reset);
        return true;
    }
    else
        return false;
   2053e:	2000      	movs	r0, #0
}
   20540:	bd08      	pop	{r3, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   20542:	3064      	adds	r0, #100	; 0x64
   20544:	f7e9 fda0 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   20548:	b928      	cbnz	r0, 20556 <reset_cb+0x22>
        SS_STATS_INC(reset);
   2054a:	4a06      	ldr	r2, [pc, #24]	; (20564 <reset_cb+0x30>)
   2054c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2054e:	3301      	adds	r3, #1
   20550:	6253      	str	r3, [r2, #36]	; 0x24
        return true;
   20552:	2001      	movs	r0, #1
   20554:	e7f4      	b.n	20540 <reset_cb+0xc>
        assert(err == DPL_OK);
   20556:	2300      	movs	r3, #0
   20558:	461a      	mov	r2, r3
   2055a:	4619      	mov	r1, r3
   2055c:	4618      	mov	r0, r3
   2055e:	f7e8 fe31 	bl	91c4 <__assert_func>
   20562:	bf00      	nop
   20564:	20004c38 	.word	0x20004c38

00020568 <rx_error_cb>:
{
   20568:	b508      	push	{r3, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   2056a:	6849      	ldr	r1, [r1, #4]
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   2056c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   20570:	f648 0341 	movw	r3, #34881	; 0x8841
   20574:	429a      	cmp	r2, r3
   20576:	d115      	bne.n	205a4 <rx_error_cb+0x3c>
   20578:	f8b1 306a 	ldrh.w	r3, [r1, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
   2057c:	b10b      	cbz	r3, 20582 <rx_error_cb+0x1a>
    return false;
   2057e:	2000      	movs	r0, #0
   20580:	e011      	b.n	205a6 <rx_error_cb+0x3e>
        SS_STATS_INC(rx_error);
   20582:	4a09      	ldr	r2, [pc, #36]	; (205a8 <rx_error_cb+0x40>)
   20584:	6953      	ldr	r3, [r2, #20]
   20586:	3301      	adds	r3, #1
   20588:	6153      	str	r3, [r2, #20]
   2058a:	f101 0064 	add.w	r0, r1, #100	; 0x64
   2058e:	f7e9 fd7b 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   20592:	b908      	cbnz	r0, 20598 <rx_error_cb+0x30>
        return true;
   20594:	2001      	movs	r0, #1
   20596:	e006      	b.n	205a6 <rx_error_cb+0x3e>
        assert(err == DPL_OK);
   20598:	2300      	movs	r3, #0
   2059a:	461a      	mov	r2, r3
   2059c:	4619      	mov	r1, r3
   2059e:	4618      	mov	r0, r3
   205a0:	f7e8 fe10 	bl	91c4 <__assert_func>
        return false;
   205a4:	2000      	movs	r0, #0
}
   205a6:	bd08      	pop	{r3, pc}
   205a8:	20004c38 	.word	0x20004c38

000205ac <rx_timeout_cb>:
{
   205ac:	b570      	push	{r4, r5, r6, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   205ae:	684e      	ldr	r6, [r1, #4]
   205b0:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 1)
   205b4:	2b01      	cmp	r3, #1
   205b6:	d01f      	beq.n	205f8 <rx_timeout_cb+0x4c>
   205b8:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&nrng->sem) == 0){
   205ba:	b9fb      	cbnz	r3, 205fc <rx_timeout_cb+0x50>
        SS_STATS_INC(rx_timeout);
   205bc:	4a10      	ldr	r2, [pc, #64]	; (20600 <rx_timeout_cb+0x54>)
   205be:	6993      	ldr	r3, [r2, #24]
   205c0:	3301      	adds	r3, #1
   205c2:	6193      	str	r3, [r2, #24]
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   205c4:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
   205c8:	b93c      	cbnz	r4, 205da <rx_timeout_cb+0x2e>
   205ca:	f106 0064 	add.w	r0, r6, #100	; 0x64
   205ce:	f7e9 fd5b 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   205d2:	b958      	cbnz	r0, 205ec <rx_timeout_cb+0x40>
    return true;
   205d4:	2001      	movs	r0, #1
   205d6:	e012      	b.n	205fe <rx_timeout_cb+0x52>
            SLIST_FOREACH(cbs, &inst->interface_cbs, next){
   205d8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   205da:	2c00      	cmp	r4, #0
   205dc:	d0f5      	beq.n	205ca <rx_timeout_cb+0x1e>
            if (cbs!=NULL && cbs->complete_cb)
   205de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   205e0:	2b00      	cmp	r3, #0
   205e2:	d0f9      	beq.n	205d8 <rx_timeout_cb+0x2c>
                if(cbs->complete_cb(inst, cbs)) continue;
   205e4:	4621      	mov	r1, r4
   205e6:	4628      	mov	r0, r5
   205e8:	4798      	blx	r3
   205ea:	e7f5      	b.n	205d8 <rx_timeout_cb+0x2c>
        assert(err == DPL_OK);
   205ec:	2300      	movs	r3, #0
   205ee:	461a      	mov	r2, r3
   205f0:	4619      	mov	r1, r3
   205f2:	4618      	mov	r0, r3
   205f4:	f7e8 fde6 	bl	91c4 <__assert_func>
        return false;
   205f8:	2000      	movs	r0, #0
   205fa:	e000      	b.n	205fe <rx_timeout_cb+0x52>
    return true;
   205fc:	2001      	movs	r0, #1
}
   205fe:	bd70      	pop	{r4, r5, r6, pc}
   20600:	20004c38 	.word	0x20004c38
   20604:	00000000 	.word	0x00000000

00020608 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2060c:	ed2d 8b02 	vpush	{d8}
   20610:	b087      	sub	sp, #28
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   20612:	684d      	ldr	r5, [r1, #4]

    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   20614:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   20618:	f648 0341 	movw	r3, #34881	; 0x8841
   2061c:	429a      	cmp	r2, r3
   2061e:	f040 81b1 	bne.w	20984 <rx_complete_cb+0x37c>
   20622:	4604      	mov	r4, r0
   20624:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 1){
   20628:	2b01      	cmp	r3, #1
   2062a:	d022      	beq.n	20672 <rx_complete_cb+0x6a>
        // unsolicited inbound
        SS_STATS_INC(rx_unsolicited);
        return false;
    }

    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   2062c:	f44f 7198 	mov.w	r1, #304	; 0x130
   20630:	4628      	mov	r0, r5
   20632:	f7ea ff13 	bl	b45c <nrng_get_config>
   20636:	4680      	mov	r8, r0
    nrng_request_frame_t * _frame = (nrng_request_frame_t * )inst->rxbuf;
   20638:	f8d4 64fc 	ldr.w	r6, [r4, #1276]	; 0x4fc

    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   2063c:	f8b6 3005 	ldrh.w	r3, [r6, #5]
   20640:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   20644:	4293      	cmp	r3, r2
   20646:	d004      	beq.n	20652 <rx_complete_cb+0x4a>
   20648:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2064c:	4293      	cmp	r3, r2
   2064e:	f040 819f 	bne.w	20990 <rx_complete_cb+0x388>
        return true;

    SS_STATS_INC(rx_complete);
   20652:	4acb      	ldr	r2, [pc, #812]	; (20980 <rx_complete_cb+0x378>)
   20654:	69d3      	ldr	r3, [r2, #28]
   20656:	3301      	adds	r3, #1
   20658:	61d3      	str	r3, [r2, #28]

    switch(_frame->code){
   2065a:	f8b6 3009 	ldrh.w	r3, [r6, #9]
   2065e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   20662:	d00c      	beq.n	2067e <rx_complete_cb+0x76>
   20664:	f240 1231 	movw	r2, #305	; 0x131
   20668:	4293      	cmp	r3, r2
   2066a:	f000 80f4 	beq.w	20856 <rx_complete_cb+0x24e>
   2066e:	2000      	movs	r0, #0
   20670:	e189      	b.n	20986 <rx_complete_cb+0x37e>
        SS_STATS_INC(rx_unsolicited);
   20672:	4ac3      	ldr	r2, [pc, #780]	; (20980 <rx_complete_cb+0x378>)
   20674:	6a13      	ldr	r3, [r2, #32]
   20676:	3301      	adds	r3, #1
   20678:	6213      	str	r3, [r2, #32]
        return false;
   2067a:	2000      	movs	r0, #0
   2067c:	e183      	b.n	20986 <rx_complete_cb+0x37e>
        case UWB_DATA_CODE_SS_TWR_NRNG:
            {
                // This code executes on the device that is responding to a request
                DIAGMSG("{\"utime\": %lu,\"msg\": \"UWB_DATA_CODE_SS_TWR_NRNG\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
                if (inst->frame_len < sizeof(nrng_request_frame_t))
   2067e:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   20682:	2b12      	cmp	r3, #18
   20684:	f240 8186 	bls.w	20994 <rx_complete_cb+0x38c>
                    break;
                uint16_t slot_idx;
#if MYNEWT_VAL(CELL_ENABLED)
                if (_frame->ptype != PTYPE_CELL)
   20688:	7af3      	ldrb	r3, [r6, #11]
   2068a:	f013 0f03 	tst.w	r3, #3
   2068e:	f040 8183 	bne.w	20998 <rx_complete_cb+0x390>
                    break;
                if (_frame->cell_id != inst->cell_id)
   20692:	7bf3      	ldrb	r3, [r6, #15]
   20694:	7c32      	ldrb	r2, [r6, #16]
   20696:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2069a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2069e:	f8b4 24c4 	ldrh.w	r2, [r4, #1220]	; 0x4c4
   206a2:	4293      	cmp	r3, r2
   206a4:	d001      	beq.n	206aa <rx_complete_cb+0xa2>
            }
        default:
                return false;
            break;
        }
    return true;
   206a6:	2001      	movs	r0, #1
   206a8:	e16d      	b.n	20986 <rx_complete_cb+0x37e>
                if (_frame->slot_mask & (1UL << inst->slot_id))
   206aa:	7c33      	ldrb	r3, [r6, #16]
   206ac:	7c70      	ldrb	r0, [r6, #17]
   206ae:	0080      	lsls	r0, r0, #2
   206b0:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
   206b4:	7cb3      	ldrb	r3, [r6, #18]
   206b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   206ba:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   206be:	f8b4 14c2 	ldrh.w	r1, [r4, #1218]	; 0x4c2
   206c2:	fa20 f301 	lsr.w	r3, r0, r1
   206c6:	f013 0f01 	tst.w	r3, #1
   206ca:	d101      	bne.n	206d0 <rx_complete_cb+0xc8>
    return true;
   206cc:	2001      	movs	r0, #1
   206ce:	e15a      	b.n	20986 <rx_complete_cb+0x37e>
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   206d0:	f04f 0b01 	mov.w	fp, #1
   206d4:	465a      	mov	r2, fp
   206d6:	fa0b f101 	lsl.w	r1, fp, r1
   206da:	f7ef fd53 	bl	10184 <BitIndex>
   206de:	9001      	str	r0, [sp, #4]
   206e0:	f8bd 9004 	ldrh.w	r9, [sp, #4]
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   206e4:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
   206e8:	445b      	add	r3, fp
   206ea:	b29b      	uxth	r3, r3
   206ec:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
   206f0:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
   206f4:	fbb3 f1f2 	udiv	r1, r3, r2
   206f8:	fb02 3311 	mls	r3, r2, r1, r3
   206fc:	b29b      	uxth	r3, r3
   206fe:	3332      	adds	r3, #50	; 0x32
   20700:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
                memcpy(frame->array, inst->rxbuf, sizeof(nrng_request_frame_t));
   20704:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   20708:	f8d3 c000 	ldr.w	ip, [r3]
   2070c:	6858      	ldr	r0, [r3, #4]
   2070e:	6899      	ldr	r1, [r3, #8]
   20710:	68da      	ldr	r2, [r3, #12]
   20712:	f8c7 c000 	str.w	ip, [r7]
   20716:	6078      	str	r0, [r7, #4]
   20718:	60b9      	str	r1, [r7, #8]
   2071a:	60fa      	str	r2, [r7, #12]
   2071c:	8a1a      	ldrh	r2, [r3, #16]
   2071e:	7c9b      	ldrb	r3, [r3, #18]
   20720:	823a      	strh	r2, [r7, #16]
   20722:	74bb      	strb	r3, [r7, #18]
                uint64_t request_timestamp = inst->rxtimestamp;
   20724:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
   20728:	9202      	str	r2, [sp, #8]
   2072a:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
   2072e:	9303      	str	r3, [sp, #12]
                            + (((uint64_t)config->tx_holdoff_delay
   20730:	f8d8 1004 	ldr.w	r1, [r8, #4]
   20734:	9104      	str	r1, [sp, #16]
   20736:	f04f 0a00 	mov.w	sl, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   2073a:	f8d8 8008 	ldr.w	r8, [r8, #8]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   2073e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   20742:	2114      	movs	r1, #20
   20744:	4620      	mov	r0, r4
   20746:	4798      	blx	r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   20748:	f002 ff00 	bl	2354c <__aeabi_i2d>
   2074c:	a388      	add	r3, pc, #544	; (adr r3, 20970 <rx_complete_cb+0x368>)
   2074e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20752:	f003 f88f 	bl	23874 <__aeabi_ddiv>
   20756:	f003 fc59 	bl	2400c <__aeabi_d2ulz>
   2075a:	eb18 0300 	adds.w	r3, r8, r0
   2075e:	f141 0100 	adc.w	r1, r1, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   20762:	fba9 8303 	umull	r8, r3, r9, r3
   20766:	fb09 3901 	mla	r9, r9, r1, r3
   2076a:	9904      	ldr	r1, [sp, #16]
   2076c:	eb11 0808 	adds.w	r8, r1, r8
   20770:	f149 0900 	adc.w	r9, r9, #0
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   20774:	ea4f 4909 	mov.w	r9, r9, lsl #16
   20778:	ea49 4918 	orr.w	r9, r9, r8, lsr #16
   2077c:	ea4f 4808 	mov.w	r8, r8, lsl #16
                uint64_t response_tx_delay = request_timestamp
   20780:	9a02      	ldr	r2, [sp, #8]
   20782:	eb18 0802 	adds.w	r8, r8, r2
   20786:	9b03      	ldr	r3, [sp, #12]
   20788:	eb49 0903 	adc.w	r9, r9, r3
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   2078c:	f428 73ff 	bic.w	r3, r8, #510	; 0x1fe
   20790:	f023 0301 	bic.w	r3, r3, #1
   20794:	f009 01ff 	and.w	r1, r9, #255	; 0xff
   20798:	f8b4 24ce 	ldrh.w	r2, [r4, #1230]	; 0x4ce
   2079c:	1898      	adds	r0, r3, r2
   2079e:	9004      	str	r0, [sp, #16]
   207a0:	f141 0100 	adc.w	r1, r1, #0
   207a4:	9105      	str	r1, [sp, #20]
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   207a6:	4659      	mov	r1, fp
   207a8:	4620      	mov	r0, r4
   207aa:	f7e8 fae8 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   207ae:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   207b2:	9a02      	ldr	r2, [sp, #8]
   207b4:	9b03      	ldr	r3, [sp, #12]
   207b6:	4658      	mov	r0, fp
   207b8:	f7ef fde6 	bl	10388 <uwb_wcs_local_to_master>
   207bc:	f8c7 000b 	str.w	r0, [r7, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   207c0:	9a04      	ldr	r2, [sp, #16]
   207c2:	9b05      	ldr	r3, [sp, #20]
   207c4:	4658      	mov	r0, fp
   207c6:	f7ef fddf 	bl	10388 <uwb_wcs_local_to_master>
   207ca:	f8c7 000f 	str.w	r0, [r7, #15]
                frame->dst_address = _frame->src_address;
   207ce:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   207d2:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   207d6:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   207da:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   207de:	2331      	movs	r3, #49	; 0x31
   207e0:	727b      	strb	r3, [r7, #9]
   207e2:	2301      	movs	r3, #1
   207e4:	72bb      	strb	r3, [r7, #10]
                frame->slot_id = slot_idx;
   207e6:	9b01      	ldr	r3, [sp, #4]
   207e8:	74fb      	strb	r3, [r7, #19]
                frame->seq_num = _frame->seq_num;
   207ea:	78b3      	ldrb	r3, [r6, #2]
   207ec:	70bb      	strb	r3, [r7, #2]
                frame->carrier_integrator  = 0.0l;
   207ee:	f887 a01c 	strb.w	sl, [r7, #28]
   207f2:	f887 a01d 	strb.w	sl, [r7, #29]
   207f6:	f887 a01e 	strb.w	sl, [r7, #30]
   207fa:	f887 a01f 	strb.w	sl, [r7, #31]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   207fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20800:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   20802:	2314      	movs	r3, #20
   20804:	4652      	mov	r2, sl
   20806:	4639      	mov	r1, r7
   20808:	4620      	mov	r0, r4
   2080a:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   2080c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2080e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   20810:	4653      	mov	r3, sl
   20812:	4652      	mov	r2, sl
   20814:	2114      	movs	r1, #20
   20816:	4620      	mov	r0, r4
   20818:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   2081a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2081c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2081e:	4651      	mov	r1, sl
   20820:	4620      	mov	r0, r4
   20822:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   20824:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20826:	6b59      	ldr	r1, [r3, #52]	; 0x34
   20828:	4642      	mov	r2, r8
   2082a:	464b      	mov	r3, r9
   2082c:	4620      	mov	r0, r4
   2082e:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   20830:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   20834:	4620      	mov	r0, r4
   20836:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   20838:	f010 0f04 	tst.w	r0, #4
   2083c:	d005      	beq.n	2084a <rx_complete_cb+0x242>
   2083e:	f105 0064 	add.w	r0, r5, #100	; 0x64
   20842:	f7e9 fc21 	bl	a088 <os_sem_release>
    return true;
   20846:	2001      	movs	r0, #1
   20848:	e09d      	b.n	20986 <rx_complete_cb+0x37e>
   2084a:	f105 0064 	add.w	r0, r5, #100	; 0x64
   2084e:	f7e9 fc1b 	bl	a088 <os_sem_release>
   20852:	2001      	movs	r0, #1
   20854:	e097      	b.n	20986 <rx_complete_cb+0x37e>
                if (inst->frame_len < sizeof(nrng_response_frame_t))
   20856:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   2085a:	2b13      	cmp	r3, #19
   2085c:	f240 809e 	bls.w	2099c <rx_complete_cb+0x394>
                uint16_t idx = _frame->slot_id;
   20860:	f896 9013 	ldrb.w	r9, [r6, #19]
   20864:	fa1f fa89 	uxth.w	sl, r9
                if (nrng->seq_num != _frame->seq_num)
   20868:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
   2086c:	78b3      	ldrb	r3, [r6, #2]
   2086e:	429a      	cmp	r2, r3
   20870:	d001      	beq.n	20876 <rx_complete_cb+0x26e>
    return true;
   20872:	2001      	movs	r0, #1
   20874:	e087      	b.n	20986 <rx_complete_cb+0x37e>
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   20876:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
   2087a:	444b      	add	r3, r9
   2087c:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
   20880:	fb93 f1f2 	sdiv	r1, r3, r2
   20884:	fb02 3311 	mls	r3, r2, r1, r3
   20888:	3332      	adds	r3, #50	; 0x32
   2088a:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   2088e:	6833      	ldr	r3, [r6, #0]
   20890:	6870      	ldr	r0, [r6, #4]
   20892:	68b1      	ldr	r1, [r6, #8]
   20894:	68f2      	ldr	r2, [r6, #12]
   20896:	603b      	str	r3, [r7, #0]
   20898:	6078      	str	r0, [r7, #4]
   2089a:	60b9      	str	r1, [r7, #8]
   2089c:	60fa      	str	r2, [r7, #12]
   2089e:	6933      	ldr	r3, [r6, #16]
   208a0:	613b      	str	r3, [r7, #16]
                if (inst->status.lde_error == 0)
   208a2:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   208a6:	f013 0f04 	tst.w	r3, #4
   208aa:	d14c      	bne.n	20946 <rx_complete_cb+0x33e>
                   response_timestamp = inst->rxtimestamp;
   208ac:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
   208b0:	ed13 8b02 	vldr	d8, [r3, #-8]
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   208b4:	2101      	movs	r1, #1
   208b6:	4620      	mov	r0, r4
   208b8:	f7e8 fa61 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   208bc:	6e86      	ldr	r6, [r0, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   208be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   208c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   208c2:	4620      	mov	r0, r4
   208c4:	4798      	blx	r3
   208c6:	4602      	mov	r2, r0
   208c8:	460b      	mov	r3, r1
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   208ca:	4630      	mov	r0, r6
   208cc:	f7ef fd5c 	bl	10388 <uwb_wcs_local_to_master>
   208d0:	6178      	str	r0, [r7, #20]
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   208d2:	ec53 2b18 	vmov	r2, r3, d8
   208d6:	4630      	mov	r0, r6
   208d8:	f7ef fd56 	bl	10388 <uwb_wcs_local_to_master>
   208dc:	61b8      	str	r0, [r7, #24]
                frame->dst_address = frame->src_address;
   208de:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   208e2:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   208e6:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   208ea:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   208ee:	2300      	movs	r3, #0
   208f0:	2232      	movs	r2, #50	; 0x32
   208f2:	727a      	strb	r2, [r7, #9]
   208f4:	2201      	movs	r2, #1
   208f6:	72ba      	strb	r2, [r7, #10]
                frame->carrier_integrator  = 0.0l;
   208f8:	773b      	strb	r3, [r7, #28]
   208fa:	777b      	strb	r3, [r7, #29]
   208fc:	77bb      	strb	r3, [r7, #30]
   208fe:	77fb      	strb	r3, [r7, #31]
                if(inst->config.rxdiag_enable) {
   20900:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   20904:	f013 0f40 	tst.w	r3, #64	; 0x40
   20908:	d120      	bne.n	2094c <rx_complete_cb+0x344>
                if(idx == nrng->nnodes-1){
   2090a:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
   2090e:	1e5a      	subs	r2, r3, #1
   20910:	4591      	cmp	r9, r2
   20912:	d023      	beq.n	2095c <rx_complete_cb+0x354>
                    uint16_t timeout = usecs_to_response(inst,
   20914:	eba3 030a 	sub.w	r3, r3, sl
   20918:	b29d      	uxth	r5, r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   2091a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2091c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   2091e:	2114      	movs	r1, #20
   20920:	4620      	mov	r0, r4
   20922:	4798      	blx	r3
   20924:	4603      	mov	r3, r0
   20926:	4642      	mov	r2, r8
   20928:	4629      	mov	r1, r5
   2092a:	4620      	mov	r0, r4
   2092c:	f7ea fecc 	bl	b6c8 <usecs_to_response>
                            ) + config->rx_timeout_delay;          // TOF allowance.
   20930:	f8b8 100c 	ldrh.w	r1, [r8, #12]
                    uint16_t timeout = usecs_to_response(inst,
   20934:	fa11 f180 	uxtah	r1, r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   20938:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2093c:	b289      	uxth	r1, r1
   2093e:	4620      	mov	r0, r4
   20940:	4798      	blx	r3
    return true;
   20942:	2001      	movs	r0, #1
   20944:	e01f      	b.n	20986 <rx_complete_cb+0x37e>
                uint64_t response_timestamp = 0x0;
   20946:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 20978 <rx_complete_cb+0x370>
   2094a:	e7b3      	b.n	208b4 <rx_complete_cb+0x2ac>
                    memcpy(&frame->diag, inst->rxdiag, inst->rxdiag->rxd_len);
   2094c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   20950:	880a      	ldrh	r2, [r1, #0]
   20952:	f107 0020 	add.w	r0, r7, #32
   20956:	f7ef fe93 	bl	10680 <memcpy>
   2095a:	e7d6      	b.n	2090a <rx_complete_cb+0x302>
   2095c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20960:	2101      	movs	r1, #1
   20962:	4620      	mov	r0, r4
   20964:	4798      	blx	r3
    return true;
   20966:	2001      	movs	r0, #1
   20968:	e00d      	b.n	20986 <rx_complete_cb+0x37e>
   2096a:	bf00      	nop
   2096c:	f3af 8000 	nop.w
   20970:	90690691 	.word	0x90690691
   20974:	3ff06906 	.word	0x3ff06906
	...
   20980:	20004c38 	.word	0x20004c38
        return false;
   20984:	2000      	movs	r0, #0
}
   20986:	b007      	add	sp, #28
   20988:	ecbd 8b02 	vpop	{d8}
   2098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
   20990:	2001      	movs	r0, #1
   20992:	e7f8      	b.n	20986 <rx_complete_cb+0x37e>
    return true;
   20994:	2001      	movs	r0, #1
   20996:	e7f6      	b.n	20986 <rx_complete_cb+0x37e>
   20998:	2001      	movs	r0, #1
   2099a:	e7f4      	b.n	20986 <rx_complete_cb+0x37e>
   2099c:	2001      	movs	r0, #1
   2099e:	e7f2      	b.n	20986 <rx_complete_cb+0x37e>

000209a0 <twr_ss_nrng_pkg_init>:
{
   209a0:	b530      	push	{r4, r5, lr}
   209a2:	b083      	sub	sp, #12
    printf("{\"utime\": %lu,\"msg\": \"ss_nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   209a4:	f7e8 fe77 	bl	9696 <os_cputime_get32>
   209a8:	4601      	mov	r1, r0
   209aa:	4817      	ldr	r0, [pc, #92]	; (20a08 <twr_ss_nrng_pkg_init+0x68>)
   209ac:	f7f0 fa8e 	bl	10ecc <printf>
    udev = uwb_dev_idx_lookup(0);
   209b0:	2000      	movs	r0, #0
   209b2:	f7e8 f95f 	bl	8c74 <uwb_dev_idx_lookup>
   209b6:	4605      	mov	r5, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   209b8:	210b      	movs	r1, #11
   209ba:	f7e8 f9e0 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
   209be:	4604      	mov	r4, r0
    g_cbs.inst_ptr = nrng;
   209c0:	4912      	ldr	r1, [pc, #72]	; (20a0c <twr_ss_nrng_pkg_init+0x6c>)
   209c2:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs);
   209c4:	4628      	mov	r0, r5
   209c6:	f7e8 f985 	bl	8cd4 <uwb_mac_append_interface>
    nrng_append_config(nrng, &g_rng_cfgs);
   209ca:	4911      	ldr	r1, [pc, #68]	; (20a10 <twr_ss_nrng_pkg_init+0x70>)
   209cc:	4620      	mov	r0, r4
   209ce:	f7ea fd57 	bl	b480 <nrng_append_config>
    int rc = stats_init(
   209d2:	2205      	movs	r2, #5
   209d4:	9200      	str	r2, [sp, #0]
   209d6:	4b0f      	ldr	r3, [pc, #60]	; (20a14 <twr_ss_nrng_pkg_init+0x74>)
   209d8:	2104      	movs	r1, #4
   209da:	480f      	ldr	r0, [pc, #60]	; (20a18 <twr_ss_nrng_pkg_init+0x78>)
   209dc:	f7f5 face 	bl	15f7c <stats_init>
    assert(rc == 0);
   209e0:	b930      	cbnz	r0, 209f0 <twr_ss_nrng_pkg_init+0x50>
    rc = stats_register("twr_ss_nrng", STATS_HDR(g_twr_ss_nrng_stat));
   209e2:	490d      	ldr	r1, [pc, #52]	; (20a18 <twr_ss_nrng_pkg_init+0x78>)
   209e4:	480d      	ldr	r0, [pc, #52]	; (20a1c <twr_ss_nrng_pkg_init+0x7c>)
   209e6:	f7f5 fb4d 	bl	16084 <stats_register>
    assert(rc == 0);
   209ea:	b938      	cbnz	r0, 209fc <twr_ss_nrng_pkg_init+0x5c>
}
   209ec:	b003      	add	sp, #12
   209ee:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   209f0:	2300      	movs	r3, #0
   209f2:	461a      	mov	r2, r3
   209f4:	4619      	mov	r1, r3
   209f6:	4618      	mov	r0, r3
   209f8:	f7e8 fbe4 	bl	91c4 <__assert_func>
    assert(rc == 0);
   209fc:	2300      	movs	r3, #0
   209fe:	461a      	mov	r2, r3
   20a00:	4619      	mov	r1, r3
   20a02:	4618      	mov	r0, r3
   20a04:	f7e8 fbde 	bl	91c4 <__assert_func>
   20a08:	00027628 	.word	0x00027628
   20a0c:	20000e90 	.word	0x20000e90
   20a10:	20000edc 	.word	0x20000edc
   20a14:	00027660 	.word	0x00027660
   20a18:	20004c38 	.word	0x20004c38
   20a1c:	00027654 	.word	0x00027654

00020a20 <reset_cb>:
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20a20:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   20a22:	684c      	ldr	r4, [r1, #4]
   20a24:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
   20a28:	b10b      	cbz	r3, 20a2e <reset_cb+0xe>
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
        return true;
    }
    else
        return false;
   20a2a:	2000      	movs	r0, #0
}
   20a2c:	bd10      	pop	{r4, pc}
   20a2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   20a32:	f7e9 fb29 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   20a36:	b978      	cbnz	r0, 20a58 <reset_cb+0x38>
        RNG_STATS_INC(reset);
   20a38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20a3a:	3301      	adds	r3, #1
   20a3c:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
   20a3e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   20a42:	f36f 1345 	bfc	r3, #5, #1
   20a46:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
   20a4a:	b2db      	uxtb	r3, r3
   20a4c:	f36f 1304 	bfc	r3, #4, #1
   20a50:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
   20a54:	2001      	movs	r0, #1
   20a56:	e7e9      	b.n	20a2c <reset_cb+0xc>
        assert(err == DPL_OK);
   20a58:	2300      	movs	r3, #0
   20a5a:	461a      	mov	r2, r3
   20a5c:	4619      	mov	r1, r3
   20a5e:	4618      	mov	r0, r3
   20a60:	f7e8 fbb0 	bl	91c4 <__assert_func>

00020a64 <rx_timeout_cb>:
{
   20a64:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   20a66:	684c      	ldr	r4, [r1, #4]
   20a68:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1)
   20a6c:	2b01      	cmp	r3, #1
   20a6e:	d01a      	beq.n	20aa6 <rx_timeout_cb+0x42>
    if(dpl_sem_get_count(&rng->sem) == 0){
   20a70:	b10b      	cbz	r3, 20a76 <rx_timeout_cb+0x12>
    return false;
   20a72:	2000      	movs	r0, #0
}
   20a74:	bd10      	pop	{r4, pc}
   20a76:	f104 0050 	add.w	r0, r4, #80	; 0x50
   20a7a:	f7e9 fb05 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   20a7e:	b960      	cbnz	r0, 20a9a <rx_timeout_cb+0x36>
        RNG_STATS_INC(rx_timeout);
   20a80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20a82:	3301      	adds	r3, #1
   20a84:	63e3      	str	r3, [r4, #60]	; 0x3c
        switch(rng->code){
   20a86:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   20a8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
   20a8e:	2a18      	cmp	r2, #24
   20a90:	d80b      	bhi.n	20aaa <rx_timeout_cb+0x46>
                    RNG_STATS_INC(rx_timeout);
   20a92:	3301      	adds	r3, #1
   20a94:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
   20a96:	2001      	movs	r0, #1
   20a98:	e7ec      	b.n	20a74 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
   20a9a:	2300      	movs	r3, #0
   20a9c:	461a      	mov	r2, r3
   20a9e:	4619      	mov	r1, r3
   20aa0:	4618      	mov	r0, r3
   20aa2:	f7e8 fb8f 	bl	91c4 <__assert_func>
        return false;
   20aa6:	2000      	movs	r0, #0
   20aa8:	e7e4      	b.n	20a74 <rx_timeout_cb+0x10>
                return false;
   20aaa:	2000      	movs	r0, #0
   20aac:	e7e2      	b.n	20a74 <rx_timeout_cb+0x10>
	...

00020ab0 <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20ab0:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   20ab2:	684c      	ldr	r4, [r1, #4]
   20ab4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
   20ab8:	b10b      	cbz	r3, 20abe <superframe_reset_cb+0xe>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
    }
    return false;
}
   20aba:	2000      	movs	r0, #0
   20abc:	bd10      	pop	{r4, pc}
   20abe:	f104 0050 	add.w	r0, r4, #80	; 0x50
   20ac2:	f7e9 fae1 	bl	a088 <os_sem_release>
        assert(err == DPL_OK);
   20ac6:	b9a0      	cbnz	r0, 20af2 <superframe_reset_cb+0x42>
        RNG_STATS_INC(superframe_reset);
   20ac8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   20aca:	3301      	adds	r3, #1
   20acc:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
   20ace:	f7f1 ff0c 	bl	128ea <dpl_cputime_get32>
   20ad2:	4601      	mov	r1, r0
   20ad4:	480a      	ldr	r0, [pc, #40]	; (20b00 <superframe_reset_cb+0x50>)
   20ad6:	f7f0 f9f9 	bl	10ecc <printf>
        rng->status.rx_ack_expected = 0;
   20ada:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   20ade:	f36f 1345 	bfc	r3, #5, #1
   20ae2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
   20ae6:	b2db      	uxtb	r3, r3
   20ae8:	f36f 1304 	bfc	r3, #4, #1
   20aec:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
   20af0:	e7e3      	b.n	20aba <superframe_reset_cb+0xa>
        assert(err == DPL_OK);
   20af2:	2300      	movs	r3, #0
   20af4:	461a      	mov	r2, r3
   20af6:	4619      	mov	r1, r3
   20af8:	4618      	mov	r0, r3
   20afa:	f7e8 fb63 	bl	91c4 <__assert_func>
   20afe:	bf00      	nop
   20b00:	00027680 	.word	0x00027680

00020b04 <uwb_rng_free>:
{
   20b04:	b508      	push	{r3, lr}
    assert(rng);
   20b06:	b158      	cbz	r0, 20b20 <uwb_rng_free+0x1c>
    if (rng->status.selfmalloc)
   20b08:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   20b0c:	f012 0f01 	tst.w	r2, #1
   20b10:	d10c      	bne.n	20b2c <uwb_rng_free+0x28>
        rng->status.initialized = 0;
   20b12:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   20b16:	f36f 0241 	bfc	r2, #1, #1
   20b1a:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
}
   20b1e:	bd08      	pop	{r3, pc}
    assert(rng);
   20b20:	2300      	movs	r3, #0
   20b22:	461a      	mov	r2, r3
   20b24:	4619      	mov	r1, r3
   20b26:	4618      	mov	r0, r3
   20b28:	f7e8 fb4c 	bl	91c4 <__assert_func>
        free(rng);
   20b2c:	f7ef fd6e 	bl	1060c <free>
   20b30:	e7f5      	b.n	20b1e <uwb_rng_free+0x1a>

00020b32 <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
   20b32:	b508      	push	{r3, lr}
    assert(config);
   20b34:	b171      	cbz	r1, 20b54 <uwb_rng_config+0x22>
   20b36:	460b      	mov	r3, r1
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
   20b38:	f8d1 c000 	ldr.w	ip, [r1]
   20b3c:	6849      	ldr	r1, [r1, #4]
   20b3e:	689a      	ldr	r2, [r3, #8]
   20b40:	68db      	ldr	r3, [r3, #12]
   20b42:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
   20b46:	6641      	str	r1, [r0, #100]	; 0x64
   20b48:	6682      	str	r2, [r0, #104]	; 0x68
   20b4a:	66c3      	str	r3, [r0, #108]	; 0x6c
    return rng->dev_inst->status;
   20b4c:	6803      	ldr	r3, [r0, #0]
}
   20b4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   20b52:	bd08      	pop	{r3, pc}
    assert(config);
   20b54:	2300      	movs	r3, #0
   20b56:	461a      	mov	r2, r3
   20b58:	4619      	mov	r1, r3
   20b5a:	4618      	mov	r0, r3
   20b5c:	f7e8 fb32 	bl	91c4 <__assert_func>

00020b60 <uwb_rng_init>:
{
   20b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b62:	b083      	sub	sp, #12
    assert(dev);
   20b64:	2800      	cmp	r0, #0
   20b66:	d03d      	beq.n	20be4 <uwb_rng_init+0x84>
   20b68:	460d      	mov	r5, r1
   20b6a:	4617      	mov	r7, r2
   20b6c:	4606      	mov	r6, r0
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
   20b6e:	2104      	movs	r1, #4
   20b70:	f7e8 f905 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
   20b74:	4604      	mov	r4, r0
   20b76:	2800      	cmp	r0, #0
   20b78:	d03a      	beq.n	20bf0 <uwb_rng_init+0x90>
    rng->dev_inst = dev;
   20b7a:	6026      	str	r6, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
   20b7c:	2101      	movs	r1, #1
   20b7e:	4630      	mov	r0, r6
   20b80:	f7e8 f8fd 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
   20b84:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
   20b86:	2800      	cmp	r0, #0
   20b88:	d049      	beq.n	20c1e <uwb_rng_init+0xbe>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   20b8a:	2101      	movs	r1, #1
   20b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   20b90:	f7e9 fa72 	bl	a078 <os_sem_init>
    assert(err == DPL_OK);
   20b94:	2800      	cmp	r0, #0
   20b96:	d148      	bne.n	20c2a <uwb_rng_init+0xca>
    if (config != NULL ) {
   20b98:	b11d      	cbz	r5, 20ba2 <uwb_rng_init+0x42>
        uwb_rng_config(rng, config);
   20b9a:	4629      	mov	r1, r5
   20b9c:	4620      	mov	r0, r4
   20b9e:	f7ff ffc8 	bl	20b32 <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
   20ba2:	2300      	movs	r3, #0
   20ba4:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
   20ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20bac:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
   20bb0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   20bb4:	f043 0302 	orr.w	r3, r3, #2
   20bb8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   20bbc:	f104 0508 	add.w	r5, r4, #8
   20bc0:	220c      	movs	r2, #12
   20bc2:	9200      	str	r2, [sp, #0]
   20bc4:	4b1f      	ldr	r3, [pc, #124]	; (20c44 <uwb_rng_init+0xe4>)
   20bc6:	2104      	movs	r1, #4
   20bc8:	4628      	mov	r0, r5
   20bca:	f7f5 f9d7 	bl	15f7c <stats_init>
   20bce:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   20bd0:	4629      	mov	r1, r5
   20bd2:	481d      	ldr	r0, [pc, #116]	; (20c48 <uwb_rng_init+0xe8>)
   20bd4:	f7f5 fa56 	bl	16084 <stats_register>
        assert(rc == 0);
   20bd8:	ea56 0300 	orrs.w	r3, r6, r0
   20bdc:	d12b      	bne.n	20c36 <uwb_rng_init+0xd6>
}
   20bde:	4620      	mov	r0, r4
   20be0:	b003      	add	sp, #12
   20be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev);
   20be4:	2300      	movs	r3, #0
   20be6:	461a      	mov	r2, r3
   20be8:	4619      	mov	r1, r3
   20bea:	4618      	mov	r0, r3
   20bec:	f7e8 faea 	bl	91c4 <__assert_func>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
   20bf0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   20bf4:	0089      	lsls	r1, r1, #2
   20bf6:	2001      	movs	r0, #1
   20bf8:	f7ef fc0d 	bl	10416 <calloc>
        assert(rng);
   20bfc:	4604      	mov	r4, r0
   20bfe:	b140      	cbz	r0, 20c12 <uwb_rng_init+0xb2>
        rng->status.selfmalloc = 1;
   20c00:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   20c04:	f043 0301 	orr.w	r3, r3, #1
   20c08:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
   20c0c:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
   20c10:	e7b3      	b.n	20b7a <uwb_rng_init+0x1a>
        assert(rng);
   20c12:	2300      	movs	r3, #0
   20c14:	461a      	mov	r2, r3
   20c16:	4619      	mov	r1, r3
   20c18:	4618      	mov	r0, r3
   20c1a:	f7e8 fad3 	bl	91c4 <__assert_func>
    assert(rng->ccp_inst);
   20c1e:	2300      	movs	r3, #0
   20c20:	461a      	mov	r2, r3
   20c22:	4619      	mov	r1, r3
   20c24:	4618      	mov	r0, r3
   20c26:	f7e8 facd 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   20c2a:	2300      	movs	r3, #0
   20c2c:	461a      	mov	r2, r3
   20c2e:	4619      	mov	r1, r3
   20c30:	4618      	mov	r0, r3
   20c32:	f7e8 fac7 	bl	91c4 <__assert_func>
        assert(rc == 0);
   20c36:	2300      	movs	r3, #0
   20c38:	461a      	mov	r2, r3
   20c3a:	4619      	mov	r1, r3
   20c3c:	4618      	mov	r0, r3
   20c3e:	f7e8 fac1 	bl	91c4 <__assert_func>
   20c42:	bf00      	nop
   20c44:	0002770c 	.word	0x0002770c
   20c48:	0002765c 	.word	0x0002765c

00020c4c <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
   20c4c:	2200      	movs	r2, #0
   20c4e:	4b07      	ldr	r3, [pc, #28]	; (20c6c <uwb_rng_clear_twr_data+0x20>)
   20c50:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
   20c54:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
   20c58:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
   20c5c:	4b04      	ldr	r3, [pc, #16]	; (20c70 <uwb_rng_clear_twr_data+0x24>)
   20c5e:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
   20c60:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
   20c62:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
   20c64:	2300      	movs	r3, #0
   20c66:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
   20c6a:	4770      	bx	lr
   20c6c:	7ff80000 	.word	0x7ff80000
   20c70:	7fc00000 	.word	0x7fc00000

00020c74 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20c74:	b570      	push	{r4, r5, r6, lr}
   20c76:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   20c78:	684d      	ldr	r5, [r1, #4]
    ieee_rng_request_frame_t * req_frame;

    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   20c7a:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   20c7e:	f648 0241 	movw	r2, #34881	; 0x8841
   20c82:	4293      	cmp	r3, r2
   20c84:	d012      	beq.n	20cac <rx_complete_cb+0x38>
   20c86:	f648 0261 	movw	r2, #34913	; 0x8861
   20c8a:	4293      	cmp	r3, r2
   20c8c:	d00e      	beq.n	20cac <rx_complete_cb+0x38>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   20c8e:	2b02      	cmp	r3, #2
   20c90:	d00c      	beq.n	20cac <rx_complete_cb+0x38>
   20c92:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
        inst->fctrl != UWB_FCTRL_FRAME_TYPE_ACK) {
        if(dpl_sem_get_count(&rng->sem) == 0) {
   20c96:	b10b      	cbz	r3, 20c9c <rx_complete_cb+0x28>
            /* We were expecting a packet but something else came in.
             * --> Release sem */
            RNG_STATS_INC(rx_other_frame);
            dpl_sem_release(&rng->sem);
        }
        return false;
   20c98:	2000      	movs	r0, #0
   20c9a:	e01b      	b.n	20cd4 <rx_complete_cb+0x60>
            RNG_STATS_INC(rx_other_frame);
   20c9c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   20c9e:	3301      	adds	r3, #1
   20ca0:	632b      	str	r3, [r5, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
   20ca2:	f105 0050 	add.w	r0, r5, #80	; 0x50
   20ca6:	f7e9 f9ef 	bl	a088 <os_sem_release>
   20caa:	e7f5      	b.n	20c98 <rx_complete_cb+0x24>
   20cac:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    }

    if(dpl_sem_get_count(&rng->sem) == 1){
   20cb0:	2b01      	cmp	r3, #1
   20cb2:	d010      	beq.n	20cd6 <rx_complete_cb+0x62>
        // unsolicited inbound
        RNG_STATS_INC(rx_unsolicited);
        return false;
    }

    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
   20cb4:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   20cb8:	2b0a      	cmp	r3, #10
   20cba:	d94e      	bls.n	20d5a <rx_complete_cb+0xe6>
       return false;

    req_frame = (ieee_rng_request_frame_t * ) inst->rxbuf;
   20cbc:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    rng->code = req_frame->code;
   20cc0:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   20cc4:	b293      	uxth	r3, r2
   20cc6:	f8a5 204c 	strh.w	r2, [r5, #76]	; 0x4c
    switch(rng->code) {
   20cca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   20cce:	2b19      	cmp	r3, #25
   20cd0:	d906      	bls.n	20ce0 <rx_complete_cb+0x6c>
                    return false;   // Allow sub extensions to handle event
                }
            }
            break;
        default:
            return false;
   20cd2:	2000      	movs	r0, #0
    }
    return false;
}
   20cd4:	bd70      	pop	{r4, r5, r6, pc}
        RNG_STATS_INC(rx_unsolicited);
   20cd6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   20cd8:	3301      	adds	r3, #1
   20cda:	62eb      	str	r3, [r5, #44]	; 0x2c
        return false;
   20cdc:	2000      	movs	r0, #0
   20cde:	e7f9      	b.n	20cd4 <rx_complete_cb+0x60>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
   20ce0:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   20ce4:	3301      	adds	r3, #1
   20ce6:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   20cea:	fb93 f1f2 	sdiv	r1, r3, r2
   20cee:	fb02 3311 	mls	r3, r2, r1, r3
   20cf2:	3326      	adds	r3, #38	; 0x26
   20cf4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   20cf8:	685e      	ldr	r6, [r3, #4]
                uwb_rng_clear_twr_data(&frame->remote);
   20cfa:	f106 0020 	add.w	r0, r6, #32
   20cfe:	f7ff ffa5 	bl	20c4c <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
   20d02:	f106 0088 	add.w	r0, r6, #136	; 0x88
   20d06:	f7ff ffa1 	bl	20c4c <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
   20d0a:	f8b4 24e2 	ldrh.w	r2, [r4, #1250]	; 0x4e2
   20d0e:	2a88      	cmp	r2, #136	; 0x88
   20d10:	d901      	bls.n	20d16 <rx_complete_cb+0xa2>
    return false;
   20d12:	2000      	movs	r0, #0
   20d14:	e7de      	b.n	20cd4 <rx_complete_cb+0x60>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
   20d16:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   20d1a:	4630      	mov	r0, r6
   20d1c:	f7ef fcb0 	bl	10680 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
   20d20:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
   20d24:	b97b      	cbnz	r3, 20d46 <rx_complete_cb+0xd2>
   20d26:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   20d2a:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   20d2e:	429a      	cmp	r2, r3
   20d30:	d009      	beq.n	20d46 <rx_complete_cb+0xd2>
   20d32:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
                    if(dpl_sem_get_count(&rng->sem) == 0){
   20d36:	b10b      	cbz	r3, 20d3c <rx_complete_cb+0xc8>
                    return true;
   20d38:	2001      	movs	r0, #1
   20d3a:	e7cb      	b.n	20cd4 <rx_complete_cb+0x60>
   20d3c:	f105 0050 	add.w	r0, r5, #80	; 0x50
   20d40:	f7e9 f9a2 	bl	a088 <os_sem_release>
   20d44:	e7f8      	b.n	20d38 <rx_complete_cb+0xc4>
                    RNG_STATS_INC(rx_complete);
   20d46:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20d48:	3301      	adds	r3, #1
   20d4a:	62ab      	str	r3, [r5, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
   20d4c:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   20d50:	3301      	adds	r3, #1
   20d52:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
                    return false;   // Allow sub extensions to handle event
   20d56:	2000      	movs	r0, #0
   20d58:	e7bc      	b.n	20cd4 <rx_complete_cb+0x60>
       return false;
   20d5a:	2000      	movs	r0, #0
   20d5c:	e7ba      	b.n	20cd4 <rx_complete_cb+0x60>
	...

00020d60 <uwb_rng_twr_to_tof>:
{
   20d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d62:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   20d64:	1e4b      	subs	r3, r1, #1
   20d66:	b29b      	uxth	r3, r3
   20d68:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
   20d6c:	fbb3 f4f2 	udiv	r4, r3, r2
   20d70:	fb02 3314 	mls	r3, r2, r4, r3
   20d74:	b29b      	uxth	r3, r3
   20d76:	3326      	adds	r3, #38	; 0x26
   20d78:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   20d7c:	685d      	ldr	r5, [r3, #4]
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   20d7e:	fbb1 f3f2 	udiv	r3, r1, r2
   20d82:	fb02 1113 	mls	r1, r2, r3, r1
   20d86:	b289      	uxth	r1, r1
   20d88:	3126      	adds	r1, #38	; 0x26
   20d8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20d8e:	6844      	ldr	r4, [r0, #4]
    switch(frame->code) {
   20d90:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   20d94:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   20d98:	d321      	bcc.n	20dde <uwb_rng_twr_to_tof+0x7e>
   20d9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   20d9e:	b29b      	uxth	r3, r3
   20da0:	2b09      	cmp	r3, #9
   20da2:	d833      	bhi.n	20e0c <uwb_rng_twr_to_tof+0xac>
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   20da4:	f8d5 200f 	ldr.w	r2, [r5, #15]
   20da8:	f8d5 600b 	ldr.w	r6, [r5, #11]
                              frame->transmission_timestamp, frame->reception_timestamp);
   20dac:	f8d4 700f 	ldr.w	r7, [r4, #15]
   20db0:	f8d4 c00b 	ldr.w	ip, [r4, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   20db4:	2300      	movs	r3, #0
   20db6:	f8d5 1013 	ldr.w	r1, [r5, #19]
   20dba:	f8d5 0017 	ldr.w	r0, [r5, #23]
   20dbe:	f8cd c018 	str.w	ip, [sp, #24]
   20dc2:	9307      	str	r3, [sp, #28]
   20dc4:	9704      	str	r7, [sp, #16]
   20dc6:	9305      	str	r3, [sp, #20]
   20dc8:	f8d4 5013 	ldr.w	r5, [r4, #19]
   20dcc:	9503      	str	r5, [sp, #12]
   20dce:	f8d4 4017 	ldr.w	r4, [r4, #23]
   20dd2:	9402      	str	r4, [sp, #8]
   20dd4:	9600      	str	r6, [sp, #0]
   20dd6:	9301      	str	r3, [sp, #4]
   20dd8:	f7ec fb5a 	bl	d490 <calc_tof_ds>
            break;
   20ddc:	e004      	b.n	20de8 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
   20dde:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   20de2:	d203      	bcs.n	20dec <uwb_rng_twr_to_tof+0x8c>
   20de4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 20e18 <uwb_rng_twr_to_tof+0xb8>
}
   20de8:	b009      	add	sp, #36	; 0x24
   20dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   20dec:	f8d4 200f 	ldr.w	r2, [r4, #15]
   20df0:	f8d4 500b 	ldr.w	r5, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   20df4:	2300      	movs	r3, #0
   20df6:	f8d4 1013 	ldr.w	r1, [r4, #19]
   20dfa:	f8d4 0017 	ldr.w	r0, [r4, #23]
   20dfe:	9500      	str	r5, [sp, #0]
   20e00:	9301      	str	r3, [sp, #4]
   20e02:	ed9f 0b05 	vldr	d0, [pc, #20]	; 20e18 <uwb_rng_twr_to_tof+0xb8>
   20e06:	f7ec fb13 	bl	d430 <calc_tof_ss>
            break;
   20e0a:	e7ed      	b.n	20de8 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
   20e0c:	ed9f 0b02 	vldr	d0, [pc, #8]	; 20e18 <uwb_rng_twr_to_tof+0xb8>
    return ToF;
   20e10:	e7ea      	b.n	20de8 <uwb_rng_twr_to_tof+0x88>
   20e12:	bf00      	nop
   20e14:	f3af 8000 	nop.w
	...

00020e20 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20e20:	b570      	push	{r4, r5, r6, lr}
   20e22:	4605      	mov	r5, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   20e24:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   20e26:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   20e2a:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   20e2e:	fbb3 f1f2 	udiv	r1, r3, r2
   20e32:	fb02 3311 	mls	r3, r2, r1, r3
   20e36:	b29b      	uxth	r3, r3
   20e38:	3326      	adds	r3, #38	; 0x26
   20e3a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   20e3e:	685c      	ldr	r4, [r3, #4]

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   20e40:	2200      	movs	r2, #0
   20e42:	2300      	movs	r3, #0
   20e44:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
   20e48:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
   20e4c:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
   20e50:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
   20e54:	f013 0f02 	tst.w	r3, #2
   20e58:	d007      	beq.n	20e6a <tx_final_cb+0x4a>
 * @return pdoa (radians) on success
 */
UWB_API_IMPL_PREFIX dpl_float32_t
uwb_calc_pdoa(struct uwb_dev * dev, struct uwb_dev_rxdiag * diag)
{
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   20e5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20e5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   20e60:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
   20e64:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
   20e66:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
   20e6a:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
   20e6e:	f013 0f01 	tst.w	r3, #1
   20e72:	d017      	beq.n	20ea4 <tx_final_cb+0x84>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   20e74:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
   20e78:	3b00      	subs	r3, #0
   20e7a:	bf18      	it	ne
   20e7c:	2301      	movne	r3, #1
   20e7e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   20e82:	f363 0200 	bfi	r2, r3, #0, #1
   20e86:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   20e8a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   20e8e:	f013 0f30 	tst.w	r3, #48	; 0x30
   20e92:	bf0c      	ite	eq
   20e94:	2201      	moveq	r2, #1
   20e96:	2200      	movne	r2, #0
   20e98:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   20e9c:	f362 0341 	bfi	r3, r2, #1, #1
   20ea0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   20ea4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   20eaa:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   20eae:	4628      	mov	r0, r5
   20eb0:	4798      	blx	r3
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   20eb2:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   20eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20eb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   20ebc:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   20ec0:	4628      	mov	r0, r5
   20ec2:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   20ec4:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   20ec8:	f8b4 2009 	ldrh.w	r2, [r4, #9]
   20ecc:	f240 1315 	movw	r3, #277	; 0x115
   20ed0:	429a      	cmp	r2, r3
   20ed2:	d125      	bne.n	20f20 <tx_final_cb+0x100>
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
   20ed4:	2200      	movs	r2, #0
   20ed6:	4b1e      	ldr	r3, [pc, #120]	; (20f50 <tx_final_cb+0x130>)
   20ed8:	e9c4 2308 	strd	r2, r3, [r4, #32]
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   20edc:	2200      	movs	r2, #0
   20ede:	4b1d      	ldr	r3, [pc, #116]	; (20f54 <tx_final_cb+0x134>)
   20ee0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
   20ee4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   20ee8:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
   20eec:	eeb4 0a40 	vcmp.f32	s0, s0
   20ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20ef4:	d612      	bvs.n	20f1c <tx_final_cb+0xfc>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   20ef6:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
   20efa:	edd3 0a00 	vldr	s1, [r3]
   20efe:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
   20f02:	f7e7 ffb1 	bl	8e68 <uwb_calc_aoa>
   20f06:	ee10 0a10 	vmov	r0, s0
   20f0a:	f002 fb31 	bl	23570 <__aeabi_f2d>
   20f0e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   20f12:	a30b      	add	r3, pc, #44	; (adr r3, 20f40 <tx_final_cb+0x120>)
   20f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   20f18:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
   20f1c:	2001      	movs	r0, #1
   20f1e:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   20f20:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
   20f24:	4630      	mov	r0, r6
   20f26:	f7ff ff1b 	bl	20d60 <uwb_rng_twr_to_tof>
   20f2a:	f7ec fa5d 	bl	d3e8 <uwb_rng_tof_to_meters>
   20f2e:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   20f32:	a305      	add	r3, pc, #20	; (adr r3, 20f48 <tx_final_cb+0x128>)
   20f34:	e9d3 2300 	ldrd	r2, r3, [r3]
   20f38:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   20f3c:	e7ce      	b.n	20edc <tx_final_cb+0xbc>
   20f3e:	bf00      	nop
   20f40:	00000000 	.word	0x00000000
   20f44:	3f9dcc64 	.word	0x3f9dcc64
   20f48:	00000000 	.word	0x00000000
   20f4c:	3f41d718 	.word	0x3f41d718
   20f50:	7ff80000 	.word	0x7ff80000
   20f54:	bff00000 	.word	0xbff00000

00020f58 <rng_issue_complete>:
{
   20f58:	b538      	push	{r3, r4, r5, lr}
   20f5a:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   20f5c:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
   20f60:	b90c      	cbnz	r4, 20f66 <rng_issue_complete+0xe>
}
   20f62:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   20f64:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   20f66:	2c00      	cmp	r4, #0
   20f68:	d0fb      	beq.n	20f62 <rng_issue_complete+0xa>
            if (cbs_i != NULL && cbs_i->complete_cb)
   20f6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20f6c:	2b00      	cmp	r3, #0
   20f6e:	d0f9      	beq.n	20f64 <rng_issue_complete+0xc>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
   20f70:	4621      	mov	r1, r4
   20f72:	4628      	mov	r0, r5
   20f74:	4798      	blx	r3
   20f76:	e7f5      	b.n	20f64 <rng_issue_complete+0xc>

00020f78 <tx_complete_cb>:
{
   20f78:	b538      	push	{r3, r4, r5, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   20f7a:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   20f7c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   20f80:	f648 0341 	movw	r3, #34881	; 0x8841
   20f84:	429a      	cmp	r2, r3
   20f86:	d122      	bne.n	20fce <tx_complete_cb+0x56>
   20f88:	4604      	mov	r4, r0
   20f8a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
   20f8e:	2b01      	cmp	r3, #1
   20f90:	d01f      	beq.n	20fd2 <tx_complete_cb+0x5a>
    switch(rng->code) {
   20f92:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   20f96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   20f9a:	2b19      	cmp	r3, #25
   20f9c:	d81b      	bhi.n	20fd6 <tx_complete_cb+0x5e>
            RNG_STATS_INC(tx_complete);
   20f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   20fa0:	3301      	adds	r3, #1
   20fa2:	626b      	str	r3, [r5, #36]	; 0x24
            if (rng->control.complete_after_tx) {
   20fa4:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   20fa8:	f013 0f02 	tst.w	r3, #2
   20fac:	d107      	bne.n	20fbe <tx_complete_cb+0x46>
            rng->control.complete_after_tx = 0;
   20fae:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   20fb2:	f36f 0341 	bfc	r3, #1, #1
   20fb6:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
            return true;
   20fba:	2001      	movs	r0, #1
   20fbc:	e008      	b.n	20fd0 <tx_complete_cb+0x58>
   20fbe:	f105 0050 	add.w	r0, r5, #80	; 0x50
   20fc2:	f7e9 f861 	bl	a088 <os_sem_release>
                rng_issue_complete(inst);
   20fc6:	4620      	mov	r0, r4
   20fc8:	f7ff ffc6 	bl	20f58 <rng_issue_complete>
   20fcc:	e7ef      	b.n	20fae <tx_complete_cb+0x36>
        return false;
   20fce:	2000      	movs	r0, #0
}
   20fd0:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   20fd2:	2000      	movs	r0, #0
   20fd4:	e7fc      	b.n	20fd0 <tx_complete_cb+0x58>
            return false;
   20fd6:	2000      	movs	r0, #0
   20fd8:	e7fa      	b.n	20fd0 <tx_complete_cb+0x58>
	...

00020fdc <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
   20fdc:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
   20fde:	f7f1 fc84 	bl	128ea <dpl_cputime_get32>
   20fe2:	4601      	mov	r1, r0
   20fe4:	481e      	ldr	r0, [pc, #120]	; (21060 <uwb_rng_pkg_init+0x84>)
   20fe6:	f7ef ff71 	bl	10ecc <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   20fea:	2400      	movs	r4, #0
   20fec:	b104      	cbz	r4, 20ff0 <uwb_rng_pkg_init+0x14>
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
   20fee:	bd38      	pop	{r3, r4, r5, pc}
        udev = uwb_dev_idx_lookup(i);
   20ff0:	4620      	mov	r0, r4
   20ff2:	f7e7 fe3f 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) continue;
   20ff6:	4605      	mov	r5, r0
   20ff8:	b378      	cbz	r0, 2105a <uwb_rng_pkg_init+0x7e>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   20ffa:	2204      	movs	r2, #4
   20ffc:	4919      	ldr	r1, [pc, #100]	; (21064 <uwb_rng_pkg_init+0x88>)
   20ffe:	f7ff fdaf 	bl	20b60 <uwb_rng_init>
   21002:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   21006:	4a18      	ldr	r2, [pc, #96]	; (21068 <uwb_rng_pkg_init+0x8c>)
   21008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2100c:	6058      	str	r0, [r3, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   2100e:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
   21012:	4b16      	ldr	r3, [pc, #88]	; (2106c <uwb_rng_pkg_init+0x90>)
   21014:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
    assert(nframes <= rng->nframes);
   21018:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
   2101c:	2b03      	cmp	r3, #3
   2101e:	d901      	bls.n	21024 <uwb_rng_pkg_init+0x48>
    for (i = 0; i < nframes; i++)
   21020:	2300      	movs	r3, #0
   21022:	e010      	b.n	21046 <uwb_rng_pkg_init+0x6a>
    assert(nframes <= rng->nframes);
   21024:	2300      	movs	r3, #0
   21026:	461a      	mov	r2, r3
   21028:	4619      	mov	r1, r3
   2102a:	4618      	mov	r0, r3
   2102c:	f7e8 f8ca 	bl	91c4 <__assert_func>
        rng->frames[i] = &twr[i];
   21030:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   21034:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
   21038:	f103 0226 	add.w	r2, r3, #38	; 0x26
   2103c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   21040:	6051      	str	r1, [r2, #4]
    for (i = 0; i < nframes; i++)
   21042:	3301      	adds	r3, #1
   21044:	b29b      	uxth	r3, r3
   21046:	2b03      	cmp	r3, #3
   21048:	d9f2      	bls.n	21030 <uwb_rng_pkg_init+0x54>
        uwb_mac_append_interface(udev, &g_cbs[i]);
   2104a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2104e:	4906      	ldr	r1, [pc, #24]	; (21068 <uwb_rng_pkg_init+0x8c>)
   21050:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   21054:	4628      	mov	r0, r5
   21056:	f7e7 fe3d 	bl	8cd4 <uwb_mac_append_interface>
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   2105a:	3401      	adds	r4, #1
   2105c:	e7c6      	b.n	20fec <uwb_rng_pkg_init+0x10>
   2105e:	bf00      	nop
   21060:	000276ac 	.word	0x000276ac
   21064:	20000f28 	.word	0x20000f28
   21068:	20000eec 	.word	0x20000eec
   2106c:	20004c60 	.word	0x20004c60

00021070 <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
   21070:	4770      	bx	lr
	...

00021074 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
   21074:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   21076:	2400      	movs	r4, #0
   21078:	b10c      	cbz	r4, 2107e <uwb_rng_pkg_down+0xa>
        uwb_rng_free(g_cbs[i].inst_ptr);
        g_cbs[i].inst_ptr = 0;
    }

    return 0;
}
   2107a:	2000      	movs	r0, #0
   2107c:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   2107e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   21082:	009a      	lsls	r2, r3, #2
   21084:	4b08      	ldr	r3, [pc, #32]	; (210a8 <uwb_rng_pkg_down+0x34>)
   21086:	4413      	add	r3, r2
   21088:	685b      	ldr	r3, [r3, #4]
        if (!rng) continue;
   2108a:	b153      	cbz	r3, 210a2 <uwb_rng_pkg_down+0x2e>
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
   2108c:	4d06      	ldr	r5, [pc, #24]	; (210a8 <uwb_rng_pkg_down+0x34>)
   2108e:	4415      	add	r5, r2
   21090:	8869      	ldrh	r1, [r5, #2]
   21092:	6818      	ldr	r0, [r3, #0]
   21094:	f7e7 fe43 	bl	8d1e <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
   21098:	6868      	ldr	r0, [r5, #4]
   2109a:	f7ff fd33 	bl	20b04 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
   2109e:	2300      	movs	r3, #0
   210a0:	606b      	str	r3, [r5, #4]
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   210a2:	3401      	adds	r4, #1
   210a4:	e7e8      	b.n	21078 <uwb_rng_pkg_down+0x4>
   210a6:	bf00      	nop
   210a8:	20000eec 	.word	0x20000eec

000210ac <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   210ac:	b510      	push	{r4, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   210ae:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   210b0:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   210b2:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   210b6:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   210ba:	fbb3 f0f1 	udiv	r0, r3, r1
   210be:	fb01 3310 	mls	r3, r1, r0, r3
   210c2:	b29b      	uxth	r3, r3
   210c4:	33e0      	adds	r3, #224	; 0xe0
   210c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    wcs->carrier_integrator = frame->carrier_integrator;
   210ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   210cc:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   210ce:	f8d2 00d8 	ldr.w	r0, [r2, #216]	; 0xd8
   210d2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   210d6:	69a1      	ldr	r1, [r4, #24]
   210d8:	f894 c01c 	ldrb.w	ip, [r4, #28]
   210dc:	1a40      	subs	r0, r0, r1
   210de:	eb63 030c 	sbc.w	r3, r3, ip
   210e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   210e6:	60a0      	str	r0, [r4, #8]
   210e8:	60e3      	str	r3, [r4, #12]
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   210ea:	ed92 7b34 	vldr	d7, [r2, #208]	; 0xd0
   210ee:	ed84 7b04 	vstr	d7, [r4, #16]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   210f2:	1809      	adds	r1, r1, r0
   210f4:	69e0      	ldr	r0, [r4, #28]
   210f6:	eb43 0300 	adc.w	r3, r3, r0
   210fa:	61a1      	str	r1, [r4, #24]
   210fc:	61e3      	str	r3, [r4, #28]

    if(ccp->status.valid){
   210fe:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   21102:	f013 0f04 	tst.w	r3, #4
   21106:	d00a      	beq.n	2111e <wcs_timescale_cb+0x72>
        if (wcs->config.postprocess == true)
   21108:	7923      	ldrb	r3, [r4, #4]
   2110a:	f013 0f01 	tst.w	r3, #1
   2110e:	d012      	beq.n	21136 <wcs_timescale_cb+0x8a>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   21110:	f7e8 fc48 	bl	99a4 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   21114:	f104 0150 	add.w	r1, r4, #80	; 0x50
   21118:	f7e8 fb96 	bl	9848 <os_eventq_put>
}
   2111c:	e00b      	b.n	21136 <wcs_timescale_cb+0x8a>
            dpl_eventq_put(dpl_eventq_dflt_get(), &wcs->postprocess_ev);
    }else{
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   2111e:	2200      	movs	r2, #0
   21120:	4b06      	ldr	r3, [pc, #24]	; (2113c <wcs_timescale_cb+0x90>)
   21122:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   21126:	2200      	movs	r2, #0
   21128:	2300      	movs	r3, #0
   2112a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   2112e:	7823      	ldrb	r3, [r4, #0]
   21130:	f36f 0341 	bfc	r3, #1, #1
   21134:	7023      	strb	r3, [r4, #0]
    }
    return true;

}
   21136:	2001      	movs	r0, #1
   21138:	bd10      	pop	{r4, pc}
   2113a:	bf00      	nop
   2113c:	3ff00000 	.word	0x3ff00000

00021140 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   21140:	b5f0      	push	{r4, r5, r6, r7, lr}
   21142:	b091      	sub	sp, #68	; 0x44
    assert(ev != NULL);
   21144:	2800      	cmp	r0, #0
   21146:	f000 8089 	beq.w	2125c <wcs_timescale_ev+0x11c>
    return ev->ev.ev_arg;
   2114a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   2114c:	2c00      	cmp	r4, #0
   2114e:	f000 808b 	beq.w	21268 <wcs_timescale_ev+0x128>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   21152:	6e27      	ldr	r7, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;
   21154:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0

    if(ccp->status.valid){
   21158:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
   2115c:	f013 0f04 	tst.w	r3, #4
   21160:	d07a      	beq.n	21258 <wcs_timescale_ev+0x118>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   21162:	f10d 0c10 	add.w	ip, sp, #16
   21166:	4d68      	ldr	r5, [pc, #416]	; (21308 <wcs_timescale_ev+0x1c8>)
   21168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2116a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2116e:	e895 0003 	ldmia.w	r5, {r0, r1}
   21172:	e88c 0003 	stmia.w	ip, {r0, r1}

        if (wcs->status.initialized == 0){
   21176:	7823      	ldrb	r3, [r4, #0]
   21178:	f013 0f02 	tst.w	r3, #2
   2117c:	d17a      	bne.n	21274 <wcs_timescale_ev+0x134>
            states->time = (double) wcs->master_epoch.lo;
   2117e:	6920      	ldr	r0, [r4, #16]
   21180:	7d21      	ldrb	r1, [r4, #20]
   21182:	f002 fa17 	bl	235b4 <__aeabi_ul2d>
   21186:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   2118a:	6838      	ldr	r0, [r7, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   2118c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2118e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   21192:	2200      	movs	r2, #0
   21194:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   21196:	4798      	blx	r3
   21198:	ec51 0b10 	vmov	r0, r1, d0
   2119c:	2200      	movs	r2, #0
   2119e:	4b5b      	ldr	r3, [pc, #364]	; (2130c <wcs_timescale_ev+0x1cc>)
   211a0:	f002 f888 	bl	232b4 <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   211a4:	a354      	add	r3, pc, #336	; (adr r3, 212f8 <wcs_timescale_ev+0x1b8>)
   211a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   211aa:	f002 fa39 	bl	23620 <__aeabi_dmul>
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   211ae:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   211b2:	2200      	movs	r2, #0
   211b4:	2300      	movs	r3, #0
   211b6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double x0[] = {states->time, states->skew, states->drift};
   211ba:	ed94 7b08 	vldr	d7, [r4, #32]
   211be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   211c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   211c6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   211ca:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 21300 <wcs_timescale_ev+0x1c0>
   211ce:	aa04      	add	r2, sp, #16
   211d0:	a90a      	add	r1, sp, #40	; 0x28
   211d2:	4630      	mov	r0, r6
   211d4:	f7fd ff8a 	bl	1f0ec <timescale_init>
   211d8:	4606      	mov	r6, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   211da:	6803      	ldr	r3, [r0, #0]
   211dc:	689b      	ldr	r3, [r3, #8]
   211de:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   211e2:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   211e6:	6833      	ldr	r3, [r6, #0]
   211e8:	689b      	ldr	r3, [r3, #8]
   211ea:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   211ee:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   211f2:	6833      	ldr	r3, [r6, #0]
   211f4:	689b      	ldr	r3, [r3, #8]
   211f6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   211fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   211fe:	7823      	ldrb	r3, [r4, #0]
   21200:	f043 0302 	orr.w	r3, r3, #2
   21204:	7023      	strb	r3, [r4, #0]
   21206:	b2db      	uxtb	r3, r3
   21208:	f043 0304 	orr.w	r3, r3, #4
   2120c:	7023      	strb	r3, [r4, #0]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
        }

        if (wcs->status.valid){
   2120e:	7823      	ldrb	r3, [r4, #0]
   21210:	f013 0f04 	tst.w	r3, #4
   21214:	d065      	beq.n	212e2 <wcs_timescale_ev+0x1a2>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   21216:	6833      	ldr	r3, [r6, #0]
   21218:	689b      	ldr	r3, [r3, #8]
   2121a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2121e:	e9c4 2308 	strd	r2, r3, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   21222:	6833      	ldr	r3, [r6, #0]
   21224:	689b      	ldr	r3, [r3, #8]
   21226:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2122a:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   2122e:	6833      	ldr	r3, [r6, #0]
   21230:	689b      	ldr	r3, [r3, #8]
   21232:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   21236:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   2123a:	a32f      	add	r3, pc, #188	; (adr r3, 212f8 <wcs_timescale_ev+0x1b8>)
   2123c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21240:	f002 fb18 	bl	23874 <__aeabi_ddiv>
   21244:	4602      	mov	r2, r0
   21246:	460b      	mov	r3, r1
   21248:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   2124c:	2000      	movs	r0, #0
   2124e:	492f      	ldr	r1, [pc, #188]	; (2130c <wcs_timescale_ev+0x1cc>)
   21250:	f002 f82e 	bl	232b0 <__aeabi_dsub>
   21254:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   21258:	b011      	add	sp, #68	; 0x44
   2125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(ev != NULL);
   2125c:	2300      	movs	r3, #0
   2125e:	461a      	mov	r2, r3
   21260:	4619      	mov	r1, r3
   21262:	4618      	mov	r0, r3
   21264:	f7e7 ffae 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
   21268:	2300      	movs	r3, #0
   2126a:	461a      	mov	r2, r3
   2126c:	4619      	mov	r1, r3
   2126e:	4618      	mov	r0, r3
   21270:	f7e7 ffa8 	bl	91c4 <__assert_func>
            double z[] ={(double) wcs->master_epoch.lo,
   21274:	6920      	ldr	r0, [r4, #16]
   21276:	7d21      	ldrb	r1, [r4, #20]
   21278:	f002 f99c 	bl	235b4 <__aeabi_ul2d>
   2127c:	e9cd 0100 	strd	r0, r1, [sp]
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   21280:	6838      	ldr	r0, [r7, #0]
   21282:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   21288:	2200      	movs	r2, #0
   2128a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2128c:	4798      	blx	r3
   2128e:	ec51 0b10 	vmov	r0, r1, d0
   21292:	2200      	movs	r2, #0
   21294:	4b1d      	ldr	r3, [pc, #116]	; (2130c <wcs_timescale_ev+0x1cc>)
   21296:	f002 f80d 	bl	232b4 <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   2129a:	a317      	add	r3, pc, #92	; (adr r3, 212f8 <wcs_timescale_ev+0x1b8>)
   2129c:	e9d3 2300 	ldrd	r2, r3, [r3]
   212a0:	f002 f9be 	bl	23620 <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   212a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   212a8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   212ac:	f002 f982 	bl	235b4 <__aeabi_ul2d>
   212b0:	a311      	add	r3, pc, #68	; (adr r3, 212f8 <wcs_timescale_ev+0x1b8>)
   212b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   212b6:	f002 fadd 	bl	23874 <__aeabi_ddiv>
   212ba:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   212be:	ad0a      	add	r5, sp, #40	; 0x28
   212c0:	4b13      	ldr	r3, [pc, #76]	; (21310 <wcs_timescale_ev+0x1d0>)
   212c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   212c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   212c8:	462b      	mov	r3, r5
   212ca:	aa04      	add	r2, sp, #16
   212cc:	4669      	mov	r1, sp
   212ce:	4630      	mov	r0, r6
   212d0:	f7fd ffa2 	bl	1f218 <timescale_main>
   212d4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   212d8:	7823      	ldrb	r3, [r4, #0]
   212da:	f360 0382 	bfi	r3, r0, #2, #1
   212de:	7023      	strb	r3, [r4, #0]
   212e0:	e795      	b.n	2120e <wcs_timescale_ev+0xce>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   212e2:	2200      	movs	r2, #0
   212e4:	4b09      	ldr	r3, [pc, #36]	; (2130c <wcs_timescale_ev+0x1cc>)
   212e6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   212ea:	2200      	movs	r2, #0
   212ec:	2300      	movs	r3, #0
   212ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   212f2:	e7b1      	b.n	21258 <wcs_timescale_ev+0x118>
   212f4:	f3af 8000 	nop.w
   212f8:	00000000 	.word	0x00000000
   212fc:	422e8480 	.word	0x422e8480
   21300:	a0b5ed8d 	.word	0xa0b5ed8d
   21304:	3ff0c6f7 	.word	0x3ff0c6f7
   21308:	00027788 	.word	0x00027788
   2130c:	3ff00000 	.word	0x3ff00000
   21310:	000277a0 	.word	0x000277a0
   21314:	00000000 	.word	0x00000000

00021318 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   21318:	b570      	push	{r4, r5, r6, lr}
   2131a:	b086      	sub	sp, #24
   2131c:	4604      	mov	r4, r0
    struct uwb_ccp_instance * ccp = wcs->ccp;
   2131e:	6e06      	ldr	r6, [r0, #96]	; 0x60
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   21320:	46ec      	mov	ip, sp
   21322:	4d1b      	ldr	r5, [pc, #108]	; (21390 <wcs_timescale_init+0x78>)
   21324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2132a:	e895 0003 	ldmia.w	r5, {r0, r1}
   2132e:	e88c 0003 	stmia.w	ip, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   21332:	ed9f 0b15 	vldr	d0, [pc, #84]	; 21388 <wcs_timescale_init+0x70>
   21336:	466a      	mov	r2, sp
   21338:	2100      	movs	r1, #0
   2133a:	4608      	mov	r0, r1
   2133c:	f7fd fed6 	bl	1f0ec <timescale_init>
   21340:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   21344:	f104 0564 	add.w	r5, r4, #100	; 0x64
   21348:	223c      	movs	r2, #60	; 0x3c
   2134a:	2100      	movs	r1, #0
   2134c:	4628      	mov	r0, r5
   2134e:	f7ef f9a4 	bl	1069a <memset>
   21352:	2302      	movs	r3, #2
   21354:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   21358:	66a4      	str	r4, [r4, #104]	; 0x68
   2135a:	4b0e      	ldr	r3, [pc, #56]	; (21394 <wcs_timescale_init+0x7c>)
   2135c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   21360:	2200      	movs	r2, #0
   21362:	4b0d      	ldr	r3, [pc, #52]	; (21398 <wcs_timescale_init+0x80>)
   21364:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   21368:	2200      	movs	r2, #0
   2136a:	2300      	movs	r3, #0
   2136c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   21370:	4629      	mov	r1, r5
   21372:	6830      	ldr	r0, [r6, #0]
   21374:	f7e7 fcae 	bl	8cd4 <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   21378:	4908      	ldr	r1, [pc, #32]	; (2139c <wcs_timescale_init+0x84>)
   2137a:	4620      	mov	r0, r4
   2137c:	f7ee ff6c 	bl	10258 <uwb_wcs_set_postprocess>
}
   21380:	4620      	mov	r0, r4
   21382:	b006      	add	sp, #24
   21384:	bd70      	pop	{r4, r5, r6, pc}
   21386:	bf00      	nop
   21388:	a0b5ed8d 	.word	0xa0b5ed8d
   2138c:	3ff0c6f7 	.word	0x3ff0c6f7
   21390:	00027788 	.word	0x00027788
   21394:	000210ad 	.word	0x000210ad
   21398:	3ff00000 	.word	0x3ff00000
   2139c:	00021141 	.word	0x00021141

000213a0 <wcs_timescale_free>:
{
   213a0:	b510      	push	{r4, lr}
   213a2:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   213a4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   213a6:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
   213aa:	6818      	ldr	r0, [r3, #0]
   213ac:	f7e7 fcb7 	bl	8d1e <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   213b0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   213b4:	f7fd ff14 	bl	1f1e0 <timescale_free>
}
   213b8:	bd10      	pop	{r4, pc}
	...

000213bc <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   213bc:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   213be:	f7f1 fa94 	bl	128ea <dpl_cputime_get32>
   213c2:	4601      	mov	r1, r0
   213c4:	480a      	ldr	r0, [pc, #40]	; (213f0 <wcs_timescale_pkg_init+0x34>)
   213c6:	f7ef fd81 	bl	10ecc <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   213ca:	2400      	movs	r4, #0
   213cc:	e000      	b.n	213d0 <wcs_timescale_pkg_init+0x14>
   213ce:	3401      	adds	r4, #1
   213d0:	2c02      	cmp	r4, #2
   213d2:	dc0b      	bgt.n	213ec <wcs_timescale_pkg_init+0x30>
        udev = uwb_dev_idx_lookup(i);
   213d4:	4620      	mov	r0, r4
   213d6:	f7e7 fc4d 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   213da:	2800      	cmp	r0, #0
   213dc:	d0f7      	beq.n	213ce <wcs_timescale_pkg_init+0x12>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   213de:	2101      	movs	r1, #1
   213e0:	f7e7 fccd 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   213e4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   213e6:	f7ff ff97 	bl	21318 <wcs_timescale_init>
   213ea:	e7f0      	b.n	213ce <wcs_timescale_pkg_init+0x12>
    }
}
   213ec:	bd10      	pop	{r4, pc}
   213ee:	bf00      	nop
   213f0:	00027754 	.word	0x00027754

000213f4 <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   213f4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   213f6:	2400      	movs	r4, #0
   213f8:	e000      	b.n	213fc <wcs_timescale_pkg_down+0x8>
   213fa:	3401      	adds	r4, #1
   213fc:	2c02      	cmp	r4, #2
   213fe:	dc0c      	bgt.n	2141a <wcs_timescale_pkg_down+0x26>
        udev = uwb_dev_idx_lookup(i);
   21400:	4620      	mov	r0, r4
   21402:	f7e7 fc37 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   21406:	2800      	cmp	r0, #0
   21408:	d0f7      	beq.n	213fa <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   2140a:	2102      	movs	r1, #2
   2140c:	f7e7 fcb7 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   21410:	2800      	cmp	r0, #0
   21412:	d0f2      	beq.n	213fa <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs_timescale_free(wcs);
   21414:	f7ff ffc4 	bl	213a0 <wcs_timescale_free>
   21418:	e7ef      	b.n	213fa <wcs_timescale_pkg_down+0x6>
    }

    return 0;
}
   2141a:	2000      	movs	r0, #0
   2141c:	bd10      	pop	{r4, pc}

0002141e <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   2141e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   21420:	b300      	cbz	r0, 21464 <realloc+0x46>
   21422:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   21424:	1e4b      	subs	r3, r1, #1
   21426:	f113 0f12 	cmn.w	r3, #18
   2142a:	d820      	bhi.n	2146e <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2142c:	311f      	adds	r1, #31
   2142e:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   21432:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   21436:	42a5      	cmp	r5, r4
   21438:	d302      	bcc.n	21440 <realloc+0x22>
   2143a:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   2143e:	d21c      	bcs.n	2147a <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   21440:	3d10      	subs	r5, #16

		newptr = malloc(size);
   21442:	4620      	mov	r0, r4
   21444:	f7ef f8ac 	bl	105a0 <malloc>
                if (newptr) {
   21448:	4607      	mov	r7, r0
   2144a:	b1a0      	cbz	r0, 21476 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   2144c:	4622      	mov	r2, r4
   2144e:	42ac      	cmp	r4, r5
   21450:	bf28      	it	cs
   21452:	462a      	movcs	r2, r5
   21454:	4631      	mov	r1, r6
   21456:	f7ef f913 	bl	10680 <memcpy>
                    free(ptr);
   2145a:	4630      	mov	r0, r6
   2145c:	f7ef f8d6 	bl	1060c <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   21460:	4638      	mov	r0, r7
   21462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   21464:	4608      	mov	r0, r1
   21466:	f7ef f89b 	bl	105a0 <malloc>
   2146a:	4607      	mov	r7, r0
   2146c:	e7f8      	b.n	21460 <realloc+0x42>
		free(ptr);
   2146e:	f7ef f8cd 	bl	1060c <free>
		return NULL;
   21472:	2700      	movs	r7, #0
   21474:	e7f4      	b.n	21460 <realloc+0x42>
                    newptr = ptr;
   21476:	4637      	mov	r7, r6
		return newptr;
   21478:	e7f2      	b.n	21460 <realloc+0x42>
		return ptr;
   2147a:	4607      	mov	r7, r0
   2147c:	e7f0      	b.n	21460 <realloc+0x42>

0002147e <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   2147e:	b40e      	push	{r1, r2, r3}
   21480:	b500      	push	{lr}
   21482:	b082      	sub	sp, #8
   21484:	ab03      	add	r3, sp, #12
   21486:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   2148a:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   2148c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21490:	f7ef fd2e 	bl	10ef0 <vsnprintf>
	va_end(ap);

	return rv;
}
   21494:	b002      	add	sp, #8
   21496:	f85d eb04 	ldr.w	lr, [sp], #4
   2149a:	b003      	add	sp, #12
   2149c:	4770      	bx	lr

0002149e <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   2149e:	e000      	b.n	214a2 <strchr+0x4>
		if (!*s)
			return NULL;
		s++;
   214a0:	3001      	adds	r0, #1
	while (*s != (char)c) {
   214a2:	7803      	ldrb	r3, [r0, #0]
   214a4:	b2ca      	uxtb	r2, r1
   214a6:	4293      	cmp	r3, r2
   214a8:	d003      	beq.n	214b2 <strchr+0x14>
		if (!*s)
   214aa:	2b00      	cmp	r3, #0
   214ac:	d1f8      	bne.n	214a0 <strchr+0x2>
			return NULL;
   214ae:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   214b0:	4770      	bx	lr
   214b2:	4770      	bx	lr

000214b4 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   214b4:	b410      	push	{r4}
	char *q = dst;
   214b6:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   214b8:	780c      	ldrb	r4, [r1, #0]
   214ba:	3101      	adds	r1, #1
   214bc:	7014      	strb	r4, [r2, #0]
   214be:	3201      	adds	r2, #1
	} while (ch);
   214c0:	2c00      	cmp	r4, #0
   214c2:	d1f9      	bne.n	214b8 <strcpy+0x4>

	return dst;
}
   214c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   214c8:	4770      	bx	lr

000214ca <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   214ca:	b410      	push	{r4}
   214cc:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   214ce:	2000      	movs	r0, #0

	while (n--) {
   214d0:	4614      	mov	r4, r2
   214d2:	3a01      	subs	r2, #1
   214d4:	b13c      	cbz	r4, 214e6 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   214d6:	f813 4b01 	ldrb.w	r4, [r3], #1
   214da:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   214de:	1a20      	subs	r0, r4, r0
   214e0:	d101      	bne.n	214e6 <strncmp+0x1c>
   214e2:	2c00      	cmp	r4, #0
   214e4:	d1f4      	bne.n	214d0 <strncmp+0x6>
			break;
	}

	return d;
}
   214e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   214ea:	4770      	bx	lr

000214ec <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   214ec:	4603      	mov	r3, r0
	const char *found = NULL;
   214ee:	2000      	movs	r0, #0

	while (*s) {
   214f0:	e000      	b.n	214f4 <strrchr+0x8>
		if (*s == (char)c)
			found = s;
		s++;
   214f2:	3301      	adds	r3, #1
	while (*s) {
   214f4:	781a      	ldrb	r2, [r3, #0]
   214f6:	b12a      	cbz	r2, 21504 <strrchr+0x18>
		if (*s == (char)c)
   214f8:	fa5f fc81 	uxtb.w	ip, r1
   214fc:	4594      	cmp	ip, r2
   214fe:	d1f8      	bne.n	214f2 <strrchr+0x6>
			found = s;
   21500:	4618      	mov	r0, r3
   21502:	e7f6      	b.n	214f2 <strrchr+0x6>
	}

	return (char *)found;
}
   21504:	4770      	bx	lr

00021506 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   21506:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   21508:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   2150a:	b14d      	cbz	r5, 21520 <strsep+0x1a>
   2150c:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   2150e:	4628      	mov	r0, r5
   21510:	f000 f828 	bl	21564 <strpbrk>
	if (e)
   21514:	4603      	mov	r3, r0
   21516:	b110      	cbz	r0, 2151e <strsep+0x18>
		*e++ = '\0';
   21518:	2200      	movs	r2, #0
   2151a:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   2151e:	6023      	str	r3, [r4, #0]
	return s;
}
   21520:	4628      	mov	r0, r5
   21522:	bd38      	pop	{r3, r4, r5, pc}

00021524 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   21524:	b538      	push	{r3, r4, r5, lr}
   21526:	460d      	mov	r5, r1
   21528:	4614      	mov	r4, r2
	if (s)
   2152a:	b100      	cbz	r0, 2152e <strtok_r+0xa>
		*holder = s;
   2152c:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   2152e:	4629      	mov	r1, r5
   21530:	4620      	mov	r0, r4
   21532:	f7ff ffe8 	bl	21506 <strsep>
	} while (s && !*s);
   21536:	4603      	mov	r3, r0
   21538:	b110      	cbz	r0, 21540 <strtok_r+0x1c>
   2153a:	7800      	ldrb	r0, [r0, #0]
   2153c:	2800      	cmp	r0, #0
   2153e:	d0f6      	beq.n	2152e <strtok_r+0xa>

	return s;
}
   21540:	4618      	mov	r0, r3
   21542:	bd38      	pop	{r3, r4, r5, pc}

00021544 <strtol>:
{
   21544:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   21546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2154a:	f7ef fd25 	bl	10f98 <strntoumax>
}
   2154e:	bd08      	pop	{r3, pc}

00021550 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   21550:	b508      	push	{r3, lr}
   21552:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   21554:	4601      	mov	r1, r0
   21556:	4b02      	ldr	r3, [pc, #8]	; (21560 <vprintf+0x10>)
   21558:	6818      	ldr	r0, [r3, #0]
   2155a:	f7ef fcb3 	bl	10ec4 <vfprintf>
}
   2155e:	bd08      	pop	{r3, pc}
   21560:	00025d00 	.word	0x00025d00

00021564 <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   21564:	468c      	mov	ip, r1
  const char *c = s2;
  if (!*s1)
   21566:	7803      	ldrb	r3, [r0, #0]
   21568:	b183      	cbz	r3, 2158c <strpbrk+0x28>
  const char *c = s2;
   2156a:	460a      	mov	r2, r1
   2156c:	e001      	b.n	21572 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   2156e:	b953      	cbnz	r3, 21586 <strpbrk+0x22>
	break;
      s1++;
   21570:	3001      	adds	r0, #1
  while (*s1)
   21572:	7801      	ldrb	r1, [r0, #0]
   21574:	b139      	cbz	r1, 21586 <strpbrk+0x22>
      for (c = s2; *c; c++)
   21576:	4662      	mov	r2, ip
   21578:	7813      	ldrb	r3, [r2, #0]
   2157a:	2b00      	cmp	r3, #0
   2157c:	d0f7      	beq.n	2156e <strpbrk+0xa>
	  if (*s1 == *c)
   2157e:	428b      	cmp	r3, r1
   21580:	d0f5      	beq.n	2156e <strpbrk+0xa>
      for (c = s2; *c; c++)
   21582:	3201      	adds	r2, #1
   21584:	e7f8      	b.n	21578 <strpbrk+0x14>
    }

  if (*c == '\0')
   21586:	7813      	ldrb	r3, [r2, #0]
   21588:	b113      	cbz	r3, 21590 <strpbrk+0x2c>
   2158a:	4770      	bx	lr
    return (char *) NULL;
   2158c:	2000      	movs	r0, #0
   2158e:	4770      	bx	lr
    s1 = NULL;
   21590:	2000      	movs	r0, #0

  return (char *) s1;
}
   21592:	4770      	bx	lr

00021594 <buf_to_bota_nmgr_mbuf>:
#define CBOR_OVERHEAD    (36)

static struct os_mbuf*
buf_to_bota_nmgr_mbuf(uint8_t *buf, uint64_t len, uint64_t off, uint32_t size,
                      uint64_t src_slot, uint64_t dst_slot, uint64_t flags)
{
   21594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21598:	b094      	sub	sp, #80	; 0x50
   2159a:	4607      	mov	r7, r0
   2159c:	4690      	mov	r8, r2
   2159e:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   215a2:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
    struct mgmt_cbuf n_b;
    struct cbor_mbuf_writer writer;
    struct nmgr_hdr *hdr;
    struct os_mbuf *rsp;

    if (g_mbuf_pool) {
   215a6:	4b51      	ldr	r3, [pc, #324]	; (216ec <buf_to_bota_nmgr_mbuf+0x158>)
   215a8:	6818      	ldr	r0, [r3, #0]
   215aa:	2800      	cmp	r0, #0
   215ac:	d056      	beq.n	2165c <buf_to_bota_nmgr_mbuf+0xc8>
        rsp = os_mbuf_get_pkthdr(g_mbuf_pool, 0);
   215ae:	2100      	movs	r1, #0
   215b0:	f7e9 f98a 	bl	a8c8 <os_mbuf_get_pkthdr>
   215b4:	4605      	mov	r5, r0
    } else {
        rsp = os_msys_get_pkthdr(0, 0);
    }

    if (!rsp) {
   215b6:	2d00      	cmp	r5, #0
   215b8:	d056      	beq.n	21668 <buf_to_bota_nmgr_mbuf+0xd4>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
        return 0;
    }

    hdr = (struct nmgr_hdr *) os_mbuf_extend(rsp, sizeof(struct nmgr_hdr));
   215ba:	2108      	movs	r1, #8
   215bc:	4628      	mov	r0, r5
   215be:	f7e9 fb21 	bl	ac04 <os_mbuf_extend>
    if (!hdr) {
   215c2:	4604      	mov	r4, r0
   215c4:	2800      	cmp	r0, #0
   215c6:	d058      	beq.n	2167a <buf_to_bota_nmgr_mbuf+0xe6>
        BOTA_ERR("could not get hdr\n");
        goto exit_err;
    }
    hdr->nh_len = 0;
   215c8:	2600      	movs	r6, #0
   215ca:	8046      	strh	r6, [r0, #2]
    hdr->nh_flags = 0;
   215cc:	7046      	strb	r6, [r0, #1]
    hdr->nh_op = NMGR_OP_WRITE;
   215ce:	7803      	ldrb	r3, [r0, #0]
   215d0:	2202      	movs	r2, #2
   215d2:	f362 0302 	bfi	r3, r2, #0, #3
   215d6:	7003      	strb	r3, [r0, #0]
    hdr->nh_group = htons(MGMT_GROUP_ID_BOTA);
   215d8:	f44f 4382 	mov.w	r3, #16640	; 0x4100
   215dc:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = 0;
   215de:	7186      	strb	r6, [r0, #6]
    hdr->nh_id = IMGMGR_NMGR_ID_UPLOAD;
   215e0:	2301      	movs	r3, #1
   215e2:	71c3      	strb	r3, [r0, #7]

    cbor_mbuf_writer_init(&writer, rsp);
   215e4:	4629      	mov	r1, r5
   215e6:	a802      	add	r0, sp, #8
   215e8:	f7f6 fdb8 	bl	1815c <cbor_mbuf_writer_init>
    cbor_encoder_init(&n_b.encoder, &writer.enc, 0);
   215ec:	4632      	mov	r2, r6
   215ee:	a902      	add	r1, sp, #8
   215f0:	a808      	add	r0, sp, #32
   215f2:	f7f6 fe48 	bl	18286 <cbor_encoder_init>
    rc = cbor_encoder_create_map(&n_b.encoder, &payload_enc, CborIndefiniteLength);
   215f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   215fa:	a910      	add	r1, sp, #64	; 0x40
   215fc:	a808      	add	r0, sp, #32
   215fe:	f7f6 ff0e 	bl	1841e <cbor_encoder_create_map>
    if (rc != 0) {
   21602:	2800      	cmp	r0, #0
   21604:	d140      	bne.n	21688 <buf_to_bota_nmgr_mbuf+0xf4>

    struct mgmt_cbuf *cb = &n_b;

    CborError g_err = CborNoError;
    /* Only pack in the flags, slotid etc on the first offset sent */
    if (off == 0) {
   21606:	ea5a 0309 	orrs.w	r3, sl, r9
   2160a:	d048      	beq.n	2169e <buf_to_bota_nmgr_mbuf+0x10a>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2160c:	2201      	movs	r2, #1
   2160e:	4938      	ldr	r1, [pc, #224]	; (216f0 <buf_to_bota_nmgr_mbuf+0x15c>)
   21610:	a808      	add	r0, sp, #32
   21612:	f7f6 fef8 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, size);
        g_err |= cbor_encode_text_stringz(&cb->encoder, "f");
        g_err |= cbor_encode_uint(&cb->encoder, flags);
    }
    g_err |= cbor_encode_text_stringz(&cb->encoder, "o");
    g_err |= cbor_encode_uint(&cb->encoder, off);
   21616:	4652      	mov	r2, sl
   21618:	464b      	mov	r3, r9
   2161a:	a808      	add	r0, sp, #32
   2161c:	f7f6 fe38 	bl	18290 <cbor_encode_uint>
   21620:	2201      	movs	r2, #1
   21622:	4934      	ldr	r1, [pc, #208]	; (216f4 <buf_to_bota_nmgr_mbuf+0x160>)
   21624:	a808      	add	r0, sp, #32
   21626:	f7f6 feee 	bl	18406 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "d");
    g_err |= cbor_encode_byte_string(&cb->encoder, buf, len);
   2162a:	4642      	mov	r2, r8
   2162c:	4639      	mov	r1, r7
   2162e:	a808      	add	r0, sp, #32
   21630:	f7f6 fee2 	bl	183f8 <cbor_encode_byte_string>

    rc = cbor_encoder_close_container(&n_b.encoder, &payload_enc);
   21634:	a910      	add	r1, sp, #64	; 0x40
   21636:	a808      	add	r0, sp, #32
   21638:	f7f6 feff 	bl	1843a <cbor_encoder_close_container>
    if (rc != 0) {
   2163c:	2800      	cmp	r0, #0
   2163e:	d14d      	bne.n	216dc <buf_to_bota_nmgr_mbuf+0x148>
{   return encoder->writer->bytes_written; }
   21640:	9b08      	ldr	r3, [sp, #32]
   21642:	685b      	ldr	r3, [r3, #4]
        BOTA_ERR("could not close container\n");
        goto exit_err;
    }
    hdr->nh_len += cbor_encode_bytes_written(&n_b.encoder);
   21644:	8862      	ldrh	r2, [r4, #2]
   21646:	4413      	add	r3, r2
   21648:	b29b      	uxth	r3, r3
   2164a:	8063      	strh	r3, [r4, #2]
    hdr->nh_len = htons(hdr->nh_len);
   2164c:	021a      	lsls	r2, r3, #8
   2164e:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   21652:	8063      	strh	r3, [r4, #2]
    return rsp;

exit_err:
    os_mbuf_free_chain(rsp);
    return 0;
}
   21654:	4628      	mov	r0, r5
   21656:	b014      	add	sp, #80	; 0x50
   21658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rsp = os_msys_get_pkthdr(0, 0);
   2165c:	2100      	movs	r1, #0
   2165e:	4608      	mov	r0, r1
   21660:	f7e8 fab8 	bl	9bd4 <os_msys_get_pkthdr>
   21664:	4605      	mov	r5, r0
   21666:	e7a6      	b.n	215b6 <buf_to_bota_nmgr_mbuf+0x22>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
   21668:	2324      	movs	r3, #36	; 0x24
   2166a:	9300      	str	r3, [sp, #0]
   2166c:	4b22      	ldr	r3, [pc, #136]	; (216f8 <buf_to_bota_nmgr_mbuf+0x164>)
   2166e:	2203      	movs	r2, #3
   21670:	2146      	movs	r1, #70	; 0x46
   21672:	4822      	ldr	r0, [pc, #136]	; (216fc <buf_to_bota_nmgr_mbuf+0x168>)
   21674:	f7f2 fece 	bl	14414 <log_printf>
        return 0;
   21678:	e7ec      	b.n	21654 <buf_to_bota_nmgr_mbuf+0xc0>
        BOTA_ERR("could not get hdr\n");
   2167a:	4b21      	ldr	r3, [pc, #132]	; (21700 <buf_to_bota_nmgr_mbuf+0x16c>)
   2167c:	2203      	movs	r2, #3
   2167e:	2146      	movs	r1, #70	; 0x46
   21680:	481e      	ldr	r0, [pc, #120]	; (216fc <buf_to_bota_nmgr_mbuf+0x168>)
   21682:	f7f2 fec7 	bl	14414 <log_printf>
        goto exit_err;
   21686:	e005      	b.n	21694 <buf_to_bota_nmgr_mbuf+0x100>
        BOTA_ERR("could not create map\n");
   21688:	4b1e      	ldr	r3, [pc, #120]	; (21704 <buf_to_bota_nmgr_mbuf+0x170>)
   2168a:	2203      	movs	r2, #3
   2168c:	2146      	movs	r1, #70	; 0x46
   2168e:	481b      	ldr	r0, [pc, #108]	; (216fc <buf_to_bota_nmgr_mbuf+0x168>)
   21690:	f7f2 fec0 	bl	14414 <log_printf>
    os_mbuf_free_chain(rsp);
   21694:	4628      	mov	r0, r5
   21696:	f7e9 f93a 	bl	a90e <os_mbuf_free_chain>
    return 0;
   2169a:	2500      	movs	r5, #0
   2169c:	e7da      	b.n	21654 <buf_to_bota_nmgr_mbuf+0xc0>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2169e:	2201      	movs	r2, #1
   216a0:	4919      	ldr	r1, [pc, #100]	; (21708 <buf_to_bota_nmgr_mbuf+0x174>)
   216a2:	a808      	add	r0, sp, #32
   216a4:	f7f6 feaf 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, dst_slot);
   216a8:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
   216ac:	a808      	add	r0, sp, #32
   216ae:	f7f6 fdef 	bl	18290 <cbor_encode_uint>
   216b2:	2201      	movs	r2, #1
   216b4:	4915      	ldr	r1, [pc, #84]	; (2170c <buf_to_bota_nmgr_mbuf+0x178>)
   216b6:	a808      	add	r0, sp, #32
   216b8:	f7f6 fea5 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, size);
   216bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   216be:	2300      	movs	r3, #0
   216c0:	a808      	add	r0, sp, #32
   216c2:	f7f6 fde5 	bl	18290 <cbor_encode_uint>
   216c6:	2201      	movs	r2, #1
   216c8:	4911      	ldr	r1, [pc, #68]	; (21710 <buf_to_bota_nmgr_mbuf+0x17c>)
   216ca:	a808      	add	r0, sp, #32
   216cc:	f7f6 fe9b 	bl	18406 <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, flags);
   216d0:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
   216d4:	a808      	add	r0, sp, #32
   216d6:	f7f6 fddb 	bl	18290 <cbor_encode_uint>
   216da:	e797      	b.n	2160c <buf_to_bota_nmgr_mbuf+0x78>
        BOTA_ERR("could not close container\n");
   216dc:	4b0d      	ldr	r3, [pc, #52]	; (21714 <buf_to_bota_nmgr_mbuf+0x180>)
   216de:	2203      	movs	r2, #3
   216e0:	2146      	movs	r1, #70	; 0x46
   216e2:	4806      	ldr	r0, [pc, #24]	; (216fc <buf_to_bota_nmgr_mbuf+0x168>)
   216e4:	f7f2 fe96 	bl	14414 <log_printf>
        goto exit_err;
   216e8:	e7d4      	b.n	21694 <buf_to_bota_nmgr_mbuf+0x100>
   216ea:	bf00      	nop
   216ec:	20005038 	.word	0x20005038
   216f0:	00026938 	.word	0x00026938
   216f4:	0002527c 	.word	0x0002527c
   216f8:	000277b0 	.word	0x000277b0
   216fc:	20005020 	.word	0x20005020
   21700:	000277c8 	.word	0x000277c8
   21704:	000277dc 	.word	0x000277dc
   21708:	000268c4 	.word	0x000268c4
   2170c:	00026440 	.word	0x00026440
   21710:	000277f4 	.word	0x000277f4
   21714:	000277f8 	.word	0x000277f8

00021718 <bcast_ota_get_packet>:

/* TODO: Cull leading/trailing 0xffff to speed up transfer  */
int
bcast_ota_get_packet(int src_slot, bcast_ota_mode_t mode, int max_transfer_unit,
                     struct os_mbuf **rsp, uint64_t flags)
{
   21718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2171c:	b08e      	sub	sp, #56	; 0x38
   2171e:	4607      	mov	r7, r0
   21720:	460e      	mov	r6, r1
   21722:	4614      	mov	r4, r2
   21724:	4698      	mov	r8, r3
    uint32_t img_flags;
    int bufsz;
    uint8_t *buf;
    const struct flash_area *s_fa;
    struct image_version ver;
    int fa_id = flash_area_id_from_image_slot(src_slot);
   21726:	f7f2 fd35 	bl	14194 <flash_area_id_from_image_slot>
   2172a:	4605      	mov	r5, r0

    /* Check source image */
    bufsz = max_transfer_unit-CBOR_OVERHEAD;
   2172c:	3c24      	subs	r4, #36	; 0x24
    if (mode == BCAST_MODE_RESET_OFFSET) {
   2172e:	2e01      	cmp	r6, #1
   21730:	d01c      	beq.n	2176c <bcast_ota_get_packet+0x54>
        }
        BOTA_INFO("ver: %d.%d.%d.%d\n", ver.iv_major, ver.iv_minor,
                   ver.iv_revision, ver.iv_build_num);
    }

    buf = (uint8_t*)malloc(bufsz);
   21732:	4620      	mov	r0, r4
   21734:	f7ee ff34 	bl	105a0 <malloc>
    if (!buf) {
   21738:	4681      	mov	r9, r0
   2173a:	2800      	cmp	r0, #0
   2173c:	d075      	beq.n	2182a <bcast_ota_get_packet+0x112>
        return OS_ENOMEM;
    }

    rc = flash_area_open(fa_id, &s_fa);
   2173e:	a90c      	add	r1, sp, #48	; 0x30
   21740:	b2e8      	uxtb	r0, r5
   21742:	f7f2 fc67 	bl	14014 <flash_area_open>
   21746:	4605      	mov	r5, r0
    if (mode == BCAST_MODE_RESEND_END) {
   21748:	2e02      	cmp	r6, #2
   2174a:	d02d      	beq.n	217a8 <bcast_ota_get_packet+0x90>
        /* Resend the end */
        off = s_fa->fa_size - bufsz;
    }

    if (off < s_fa->fa_size) {
   2174c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2174e:	6883      	ldr	r3, [r0, #8]
   21750:	4a37      	ldr	r2, [pc, #220]	; (21830 <bcast_ota_get_packet+0x118>)
   21752:	6811      	ldr	r1, [r2, #0]
   21754:	428b      	cmp	r3, r1
   21756:	d82d      	bhi.n	217b4 <bcast_ota_get_packet+0x9c>
            goto exit_err;
        }

        off += len;
    } else {
        *rsp = 0;
   21758:	2300      	movs	r3, #0
   2175a:	f8c8 3000 	str.w	r3, [r8]
    }
exit_err:
    flash_area_close(s_fa);
    free(buf);
   2175e:	4648      	mov	r0, r9
   21760:	f7ee ff54 	bl	1060c <free>
    return rc;
}
   21764:	4628      	mov	r0, r5
   21766:	b00e      	add	sp, #56	; 0x38
   21768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        off = 0;
   2176c:	2200      	movs	r2, #0
   2176e:	4b30      	ldr	r3, [pc, #192]	; (21830 <bcast_ota_get_packet+0x118>)
   21770:	601a      	str	r2, [r3, #0]
        rc = imgr_read_info(src_slot, &ver, 0, &img_flags);
   21772:	ab0d      	add	r3, sp, #52	; 0x34
   21774:	a90a      	add	r1, sp, #40	; 0x28
   21776:	4638      	mov	r0, r7
   21778:	f7ef fcf6 	bl	11168 <imgr_read_info>
        if (rc != 0) {
   2177c:	b108      	cbz	r0, 21782 <bcast_ota_get_packet+0x6a>
            return 1;
   2177e:	2501      	movs	r5, #1
   21780:	e7f0      	b.n	21764 <bcast_ota_get_packet+0x4c>
        BOTA_INFO("ver: %d.%d.%d.%d\n", ver.iv_major, ver.iv_minor,
   21782:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   21786:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   2178a:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   2178e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21790:	9003      	str	r0, [sp, #12]
   21792:	9102      	str	r1, [sp, #8]
   21794:	9201      	str	r2, [sp, #4]
   21796:	9300      	str	r3, [sp, #0]
   21798:	4b26      	ldr	r3, [pc, #152]	; (21834 <bcast_ota_get_packet+0x11c>)
   2179a:	2201      	movs	r2, #1
   2179c:	2146      	movs	r1, #70	; 0x46
   2179e:	4826      	ldr	r0, [pc, #152]	; (21838 <bcast_ota_get_packet+0x120>)
   217a0:	f7f2 fe38 	bl	14414 <log_printf>
        bufsz = sizeof(struct image_header)+8;
   217a4:	2428      	movs	r4, #40	; 0x28
   217a6:	e7c4      	b.n	21732 <bcast_ota_get_packet+0x1a>
        off = s_fa->fa_size - bufsz;
   217a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   217aa:	689b      	ldr	r3, [r3, #8]
   217ac:	1b1b      	subs	r3, r3, r4
   217ae:	4a20      	ldr	r2, [pc, #128]	; (21830 <bcast_ota_get_packet+0x118>)
   217b0:	6013      	str	r3, [r2, #0]
   217b2:	e7cb      	b.n	2174c <bcast_ota_get_packet+0x34>
        len = (int)s_fa->fa_size - (int)off;
   217b4:	1a5b      	subs	r3, r3, r1
        len = (len>bufsz) ? bufsz : len;
   217b6:	429c      	cmp	r4, r3
   217b8:	bfa8      	it	ge
   217ba:	461c      	movge	r4, r3
        rc = flash_area_read(s_fa, off, buf, len);
   217bc:	4623      	mov	r3, r4
   217be:	464a      	mov	r2, r9
   217c0:	f7f2 fc88 	bl	140d4 <flash_area_read>
   217c4:	4605      	mov	r5, r0
        BOTA_DEBUG("Reading flash at %lX, %d bytes rc=%d\n", off, len, rc);
   217c6:	9002      	str	r0, [sp, #8]
   217c8:	9401      	str	r4, [sp, #4]
   217ca:	4e19      	ldr	r6, [pc, #100]	; (21830 <bcast_ota_get_packet+0x118>)
   217cc:	6833      	ldr	r3, [r6, #0]
   217ce:	9300      	str	r3, [sp, #0]
   217d0:	4b1a      	ldr	r3, [pc, #104]	; (2183c <bcast_ota_get_packet+0x124>)
   217d2:	2200      	movs	r2, #0
   217d4:	2146      	movs	r1, #70	; 0x46
   217d6:	4818      	ldr	r0, [pc, #96]	; (21838 <bcast_ota_get_packet+0x120>)
   217d8:	f7f2 fe1c 	bl	14414 <log_printf>
        *rsp = buf_to_bota_nmgr_mbuf(buf, len, off, s_fa->fa_size, src_slot, 1, flags);
   217dc:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   217e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   217e4:	2201      	movs	r2, #1
   217e6:	2300      	movs	r3, #0
   217e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   217ec:	17fb      	asrs	r3, r7, #31
   217ee:	9704      	str	r7, [sp, #16]
   217f0:	9305      	str	r3, [sp, #20]
   217f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   217f4:	689b      	ldr	r3, [r3, #8]
   217f6:	9302      	str	r3, [sp, #8]
   217f8:	6833      	ldr	r3, [r6, #0]
   217fa:	9300      	str	r3, [sp, #0]
   217fc:	2300      	movs	r3, #0
   217fe:	9301      	str	r3, [sp, #4]
   21800:	4622      	mov	r2, r4
   21802:	17e3      	asrs	r3, r4, #31
   21804:	4648      	mov	r0, r9
   21806:	f7ff fec5 	bl	21594 <buf_to_bota_nmgr_mbuf>
   2180a:	f8c8 0000 	str.w	r0, [r8]
        if (*rsp == 0) {
   2180e:	b120      	cbz	r0, 2181a <bcast_ota_get_packet+0x102>
        off += len;
   21810:	4a07      	ldr	r2, [pc, #28]	; (21830 <bcast_ota_get_packet+0x118>)
   21812:	6813      	ldr	r3, [r2, #0]
   21814:	441c      	add	r4, r3
   21816:	6014      	str	r4, [r2, #0]
   21818:	e7a1      	b.n	2175e <bcast_ota_get_packet+0x46>
            BOTA_ERR("Could not convert flash data to mbuf\n");
   2181a:	4b09      	ldr	r3, [pc, #36]	; (21840 <bcast_ota_get_packet+0x128>)
   2181c:	2203      	movs	r2, #3
   2181e:	2146      	movs	r1, #70	; 0x46
   21820:	4805      	ldr	r0, [pc, #20]	; (21838 <bcast_ota_get_packet+0x120>)
   21822:	f7f2 fdf7 	bl	14414 <log_printf>
            rc = OS_ENOMEM;
   21826:	2501      	movs	r5, #1
            goto exit_err;
   21828:	e799      	b.n	2175e <bcast_ota_get_packet+0x46>
        return OS_ENOMEM;
   2182a:	2501      	movs	r5, #1
   2182c:	e79a      	b.n	21764 <bcast_ota_get_packet+0x4c>
   2182e:	bf00      	nop
   21830:	2000503c 	.word	0x2000503c
   21834:	00027814 	.word	0x00027814
   21838:	20005020 	.word	0x20005020
   2183c:	00027828 	.word	0x00027828
   21840:	00027850 	.word	0x00027850

00021844 <bcast_ota_get_reset_mbuf>:


struct os_mbuf*
bcast_ota_get_reset_mbuf(void)
{
   21844:	b530      	push	{r4, r5, lr}
   21846:	b083      	sub	sp, #12
    struct nmgr_hdr *hdr;
    struct os_mbuf *rsp;

    if (g_mbuf_pool) {
   21848:	4b1b      	ldr	r3, [pc, #108]	; (218b8 <bcast_ota_get_reset_mbuf+0x74>)
   2184a:	6818      	ldr	r0, [r3, #0]
   2184c:	b1c8      	cbz	r0, 21882 <bcast_ota_get_reset_mbuf+0x3e>
        rsp = os_mbuf_get_pkthdr(g_mbuf_pool, 0);
   2184e:	2100      	movs	r1, #0
   21850:	f7e9 f83a 	bl	a8c8 <os_mbuf_get_pkthdr>
   21854:	4605      	mov	r5, r0
    } else {
        rsp = os_msys_get_pkthdr(0, 0);
    }

    if (!rsp) {
   21856:	b1d5      	cbz	r5, 2188e <bcast_ota_get_reset_mbuf+0x4a>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
        return 0;
    }

    hdr = (struct nmgr_hdr *) os_mbuf_extend(rsp, sizeof(struct nmgr_hdr));
   21858:	2108      	movs	r1, #8
   2185a:	4628      	mov	r0, r5
   2185c:	f7e9 f9d2 	bl	ac04 <os_mbuf_extend>
    if (!hdr) {
   21860:	4604      	mov	r4, r0
   21862:	b1e8      	cbz	r0, 218a0 <bcast_ota_get_reset_mbuf+0x5c>
        BOTA_ERR("could not get hdr\n");
        goto exit_err;
    }
    hdr->nh_len = 0;
   21864:	2300      	movs	r3, #0
   21866:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   21868:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = NMGR_OP_WRITE;
   2186a:	7802      	ldrb	r2, [r0, #0]
   2186c:	2102      	movs	r1, #2
   2186e:	f361 0202 	bfi	r2, r1, #0, #3
   21872:	7002      	strb	r2, [r0, #0]
    hdr->nh_group = htons(MGMT_GROUP_ID_DEFAULT);
   21874:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = 0;
   21876:	7183      	strb	r3, [r0, #6]
    hdr->nh_id = NMGR_ID_RESET;
   21878:	2305      	movs	r3, #5
   2187a:	71c3      	strb	r3, [r0, #7]
    return rsp;

exit_err:
    os_mbuf_free_chain(rsp);
    return 0;
}
   2187c:	4628      	mov	r0, r5
   2187e:	b003      	add	sp, #12
   21880:	bd30      	pop	{r4, r5, pc}
        rsp = os_msys_get_pkthdr(0, 0);
   21882:	2100      	movs	r1, #0
   21884:	4608      	mov	r0, r1
   21886:	f7e8 f9a5 	bl	9bd4 <os_msys_get_pkthdr>
   2188a:	4605      	mov	r5, r0
   2188c:	e7e3      	b.n	21856 <bcast_ota_get_reset_mbuf+0x12>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
   2188e:	2324      	movs	r3, #36	; 0x24
   21890:	9300      	str	r3, [sp, #0]
   21892:	4b0a      	ldr	r3, [pc, #40]	; (218bc <bcast_ota_get_reset_mbuf+0x78>)
   21894:	2203      	movs	r2, #3
   21896:	2146      	movs	r1, #70	; 0x46
   21898:	4809      	ldr	r0, [pc, #36]	; (218c0 <bcast_ota_get_reset_mbuf+0x7c>)
   2189a:	f7f2 fdbb 	bl	14414 <log_printf>
        return 0;
   2189e:	e7ed      	b.n	2187c <bcast_ota_get_reset_mbuf+0x38>
        BOTA_ERR("could not get hdr\n");
   218a0:	4b08      	ldr	r3, [pc, #32]	; (218c4 <bcast_ota_get_reset_mbuf+0x80>)
   218a2:	2203      	movs	r2, #3
   218a4:	2146      	movs	r1, #70	; 0x46
   218a6:	4806      	ldr	r0, [pc, #24]	; (218c0 <bcast_ota_get_reset_mbuf+0x7c>)
   218a8:	f7f2 fdb4 	bl	14414 <log_printf>
    os_mbuf_free_chain(rsp);
   218ac:	4628      	mov	r0, r5
   218ae:	f7e9 f82e 	bl	a90e <os_mbuf_free_chain>
    return 0;
   218b2:	4625      	mov	r5, r4
   218b4:	e7e2      	b.n	2187c <bcast_ota_get_reset_mbuf+0x38>
   218b6:	bf00      	nop
   218b8:	20005038 	.word	0x20005038
   218bc:	000277b0 	.word	0x000277b0
   218c0:	20005020 	.word	0x20005020
   218c4:	000277c8 	.word	0x000277c8

000218c8 <bcast_ota_pkg_init>:
    g_mbuf_pool = mbuf_pool;
}

void
bcast_ota_pkg_init(void)
{
   218c8:	b510      	push	{r4, lr}
   218ca:	b082      	sub	sp, #8
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   218cc:	4b0e      	ldr	r3, [pc, #56]	; (21908 <bcast_ota_pkg_init+0x40>)
   218ce:	781b      	ldrb	r3, [r3, #0]
   218d0:	b1ab      	cbz	r3, 218fe <bcast_ota_pkg_init+0x36>

    /* Init log */
    log_register("bota", &g_bcast_ota_log, &log_console_handler,
   218d2:	2300      	movs	r3, #0
   218d4:	9300      	str	r3, [sp, #0]
   218d6:	4a0d      	ldr	r2, [pc, #52]	; (2190c <bcast_ota_pkg_init+0x44>)
   218d8:	490d      	ldr	r1, [pc, #52]	; (21910 <bcast_ota_pkg_init+0x48>)
   218da:	480e      	ldr	r0, [pc, #56]	; (21914 <bcast_ota_pkg_init+0x4c>)
   218dc:	f7f2 fde2 	bl	144a4 <log_register>
                 NULL, LOG_SYSLEVEL);


    bcast_ota_nmgr_module_init();
   218e0:	f000 fc30 	bl	22144 <bcast_ota_nmgr_module_init>

#if MYNEWT_VAL(BCAST_OTA_CLI)
    int rc;
    rc = bota_cli_register();
   218e4:	f000 f9be 	bl	21c64 <bota_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   218e8:	b138      	cbz	r0, 218fa <bcast_ota_pkg_init+0x32>
   218ea:	2000      	movs	r0, #0
   218ec:	9000      	str	r0, [sp, #0]
   218ee:	4b0a      	ldr	r3, [pc, #40]	; (21918 <bcast_ota_pkg_init+0x50>)
   218f0:	681c      	ldr	r4, [r3, #0]
   218f2:	4603      	mov	r3, r0
   218f4:	4602      	mov	r2, r0
   218f6:	4601      	mov	r1, r0
   218f8:	47a0      	blx	r4
#endif
}
   218fa:	b002      	add	sp, #8
   218fc:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   218fe:	461a      	mov	r2, r3
   21900:	4619      	mov	r1, r3
   21902:	4618      	mov	r0, r3
   21904:	f7e7 fc5e 	bl	91c4 <__assert_func>
   21908:	20004bb0 	.word	0x20004bb0
   2190c:	00026124 	.word	0x00026124
   21910:	20005020 	.word	0x20005020
   21914:	00027878 	.word	0x00027878
   21918:	20000768 	.word	0x20000768

0002191c <nmgr_mstr_get_mtu>:

static uint16_t
nmgr_mstr_get_mtu(struct os_mbuf *m)
{
    return 196;
}
   2191c:	20c4      	movs	r0, #196	; 0xc4
   2191e:	4770      	bx	lr

00021920 <check_image>:
static struct shell_cmd shell_bota_cmd = SHELL_CMD_EXT("bota", bota_cli_cmd, &cmd_bota_help);

#define TMPBUF_SZ  256
static int
check_image(const struct flash_area *fap, struct streamer *streamer)
{
   21920:	b5f0      	push	{r4, r5, r6, r7, lr}
   21922:	b0a7      	sub	sp, #156	; 0x9c
   21924:	4604      	mov	r4, r0
   21926:	460d      	mov	r5, r1
    int rc;
    struct image_header hdr;
    uint8_t hash[IMGMGR_HASH_LEN];
    char hash_str[IMGMGR_HASH_LEN * 2 + 1];

    rc = flash_area_read(fap, 0, &hdr, sizeof(struct image_header));
   21928:	2320      	movs	r3, #32
   2192a:	aa1e      	add	r2, sp, #120	; 0x78
   2192c:	2100      	movs	r1, #0
   2192e:	f7f2 fbd1 	bl	140d4 <flash_area_read>
    if (rc!=0) {
   21932:	b118      	cbz	r0, 2193c <check_image+0x1c>
        return OS_ENOMEM;
   21934:	2401      	movs	r4, #1
    free(tmpbuf);

    streamer_printf(streamer, "computed hash: %s\n",
                   hex_format(hash, IMGMGR_HASH_LEN, hash_str, sizeof(hash_str)));
    return rc;
}
   21936:	4620      	mov	r0, r4
   21938:	b027      	add	sp, #156	; 0x9c
   2193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    void *tmpbuf = malloc(TMPBUF_SZ);
   2193c:	f44f 7080 	mov.w	r0, #256	; 0x100
   21940:	f7ee fe2e 	bl	105a0 <malloc>
    if (!tmpbuf) {
   21944:	4607      	mov	r7, r0
   21946:	b1d8      	cbz	r0, 21980 <check_image+0x60>
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
   21948:	ae16      	add	r6, sp, #88	; 0x58
   2194a:	9602      	str	r6, [sp, #8]
   2194c:	2300      	movs	r3, #0
   2194e:	9301      	str	r3, [sp, #4]
   21950:	9300      	str	r3, [sp, #0]
   21952:	f44f 7380 	mov.w	r3, #256	; 0x100
   21956:	4602      	mov	r2, r0
   21958:	4621      	mov	r1, r4
   2195a:	a81e      	add	r0, sp, #120	; 0x78
   2195c:	f001 f906 	bl	22b6c <bootutil_img_validate>
   21960:	4604      	mov	r4, r0
    free(tmpbuf);
   21962:	4638      	mov	r0, r7
   21964:	f7ee fe52 	bl	1060c <free>
    streamer_printf(streamer, "computed hash: %s\n",
   21968:	2341      	movs	r3, #65	; 0x41
   2196a:	aa05      	add	r2, sp, #20
   2196c:	2120      	movs	r1, #32
   2196e:	4630      	mov	r0, r6
   21970:	f7f5 ffc4 	bl	178fc <hex_format>
   21974:	4602      	mov	r2, r0
   21976:	4903      	ldr	r1, [pc, #12]	; (21984 <check_image+0x64>)
   21978:	4628      	mov	r0, r5
   2197a:	f7f1 f8b1 	bl	12ae0 <streamer_printf>
    return rc;
   2197e:	e7da      	b.n	21936 <check_image+0x16>
        return OS_ENOMEM;
   21980:	2401      	movs	r4, #1
   21982:	e7d8      	b.n	21936 <check_image+0x16>
   21984:	00027880 	.word	0x00027880

00021988 <txim_ev_cb>:
    return rc;
}

static void
txim_ev_cb(struct os_event *ev)
{
   21988:	b530      	push	{r4, r5, lr}
   2198a:	b085      	sub	sp, #20
    struct os_mbuf *om = 0;
   2198c:	2300      	movs	r3, #0
   2198e:	9303      	str	r3, [sp, #12]
    /* Don't proceed unless there's plenty of room in the queue */
    if (os_msys_num_free() < os_msys_count()/4) {
   21990:	f7e8 f940 	bl	9c14 <os_msys_num_free>
   21994:	4604      	mov	r4, r0
   21996:	f7e8 f92f 	bl	9bf8 <os_msys_count>
   2199a:	1e03      	subs	r3, r0, #0
   2199c:	db33      	blt.n	21a06 <txim_ev_cb+0x7e>
   2199e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   219a2:	db32      	blt.n	21a0a <txim_ev_cb+0x82>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/10);
        return;
    }
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   219a4:	2000      	movs	r0, #0
   219a6:	f7e7 f965 	bl	8c74 <uwb_dev_idx_lookup>
   219aa:	2113      	movs	r1, #19
   219ac:	f7e7 f9e7 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
   219b0:	4605      	mov	r5, r0
    bcast_ota_get_packet(tx_im_inst.slot_id, (tx_im_inst.reset>0)?
   219b2:	4c30      	ldr	r4, [pc, #192]	; (21a74 <txim_ev_cb+0xec>)
   219b4:	f994 1000 	ldrsb.w	r1, [r4]
   219b8:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   219bc:	e9cd 2300 	strd	r2, r3, [sp]
   219c0:	ab03      	add	r3, sp, #12
   219c2:	68a2      	ldr	r2, [r4, #8]
   219c4:	2900      	cmp	r1, #0
   219c6:	bfd4      	ite	le
   219c8:	2100      	movle	r1, #0
   219ca:	2101      	movgt	r1, #1
   219cc:	6860      	ldr	r0, [r4, #4]
   219ce:	f7ff fea3 	bl	21718 <bcast_ota_get_packet>
                         BCAST_MODE_RESET_OFFSET : BCAST_MODE_NONE,
                         tx_im_inst.blocksize, &om, tx_im_inst.flags);
    if (om) {
   219d2:	9b03      	ldr	r3, [sp, #12]
   219d4:	b31b      	cbz	r3, 21a1e <txim_ev_cb+0x96>
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   219d6:	f240 4221 	movw	r2, #1057	; 0x421
   219da:	8861      	ldrh	r1, [r4, #2]
   219dc:	4628      	mov	r0, r5
   219de:	f7e9 fc8f 	bl	b300 <uwb_nmgr_queue_tx>
        if (tx_im_inst.reset>0) {
   219e2:	f994 3000 	ldrsb.w	r3, [r4]
   219e6:	2b00      	cmp	r3, #0
   219e8:	dd14      	ble.n	21a14 <txim_ev_cb+0x8c>
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/5);
   219ea:	2119      	movs	r1, #25
   219ec:	f104 000c 	add.w	r0, r4, #12
   219f0:	f7e7 fda2 	bl	9538 <os_callout_reset>
            tx_im_inst.reset--;
   219f4:	f994 3000 	ldrsb.w	r3, [r4]
   219f8:	3b01      	subs	r3, #1
   219fa:	7023      	strb	r3, [r4, #0]
        } else {
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/50);
        }
        tx_im_inst.resend_end = 5;
   219fc:	4b1d      	ldr	r3, [pc, #116]	; (21a74 <txim_ev_cb+0xec>)
   219fe:	2205      	movs	r2, #5
   21a00:	705a      	strb	r2, [r3, #1]
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/4);
    } else {
        streamer_printf(tx_im_inst.streamer, "bota: txim finished\n");
    }
}
   21a02:	b005      	add	sp, #20
   21a04:	bd30      	pop	{r4, r5, pc}
    if (os_msys_num_free() < os_msys_count()/4) {
   21a06:	3303      	adds	r3, #3
   21a08:	e7c9      	b.n	2199e <txim_ev_cb+0x16>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/10);
   21a0a:	210c      	movs	r1, #12
   21a0c:	481a      	ldr	r0, [pc, #104]	; (21a78 <txim_ev_cb+0xf0>)
   21a0e:	f7e7 fd93 	bl	9538 <os_callout_reset>
        return;
   21a12:	e7f6      	b.n	21a02 <txim_ev_cb+0x7a>
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/50);
   21a14:	2102      	movs	r1, #2
   21a16:	4818      	ldr	r0, [pc, #96]	; (21a78 <txim_ev_cb+0xf0>)
   21a18:	f7e7 fd8e 	bl	9538 <os_callout_reset>
   21a1c:	e7ee      	b.n	219fc <txim_ev_cb+0x74>
    } else if (--tx_im_inst.resend_end > 0){
   21a1e:	4a15      	ldr	r2, [pc, #84]	; (21a74 <txim_ev_cb+0xec>)
   21a20:	f992 3001 	ldrsb.w	r3, [r2, #1]
   21a24:	3b01      	subs	r3, #1
   21a26:	b25b      	sxtb	r3, r3
   21a28:	7053      	strb	r3, [r2, #1]
   21a2a:	2b00      	cmp	r3, #0
   21a2c:	dd1b      	ble.n	21a66 <txim_ev_cb+0xde>
        streamer_printf(tx_im_inst.streamer, "bota: resending end\n");
   21a2e:	4614      	mov	r4, r2
   21a30:	4912      	ldr	r1, [pc, #72]	; (21a7c <txim_ev_cb+0xf4>)
   21a32:	6b90      	ldr	r0, [r2, #56]	; 0x38
   21a34:	f7f1 f854 	bl	12ae0 <streamer_printf>
        bcast_ota_get_packet(tx_im_inst.slot_id, BCAST_MODE_RESEND_END,
   21a38:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   21a3c:	e9cd 2300 	strd	r2, r3, [sp]
   21a40:	ab03      	add	r3, sp, #12
   21a42:	2278      	movs	r2, #120	; 0x78
   21a44:	2102      	movs	r1, #2
   21a46:	6860      	ldr	r0, [r4, #4]
   21a48:	f7ff fe66 	bl	21718 <bcast_ota_get_packet>
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   21a4c:	9b03      	ldr	r3, [sp, #12]
   21a4e:	f240 4221 	movw	r2, #1057	; 0x421
   21a52:	8861      	ldrh	r1, [r4, #2]
   21a54:	4628      	mov	r0, r5
   21a56:	f7e9 fc53 	bl	b300 <uwb_nmgr_queue_tx>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/4);
   21a5a:	2120      	movs	r1, #32
   21a5c:	f104 000c 	add.w	r0, r4, #12
   21a60:	f7e7 fd6a 	bl	9538 <os_callout_reset>
   21a64:	e7cd      	b.n	21a02 <txim_ev_cb+0x7a>
        streamer_printf(tx_im_inst.streamer, "bota: txim finished\n");
   21a66:	4906      	ldr	r1, [pc, #24]	; (21a80 <txim_ev_cb+0xf8>)
   21a68:	4b02      	ldr	r3, [pc, #8]	; (21a74 <txim_ev_cb+0xec>)
   21a6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
   21a6c:	f7f1 f838 	bl	12ae0 <streamer_printf>
   21a70:	e7c7      	b.n	21a02 <txim_ev_cb+0x7a>
   21a72:	bf00      	nop
   21a74:	20005060 	.word	0x20005060
   21a78:	2000506c 	.word	0x2000506c
   21a7c:	00027894 	.word	0x00027894
   21a80:	000278ac 	.word	0x000278ac

00021a84 <nmgr_mstr_out>:
{
   21a84:	b510      	push	{r4, lr}
   21a86:	b0ae      	sub	sp, #184	; 0xb8
   21a88:	460c      	mov	r4, r1
    struct cbor_attr_t attrs[] = {
   21a8a:	2260      	movs	r2, #96	; 0x60
   21a8c:	2100      	movs	r1, #0
   21a8e:	4668      	mov	r0, sp
   21a90:	f7ee fe03 	bl	1069a <memset>
   21a94:	4b15      	ldr	r3, [pc, #84]	; (21aec <nmgr_mstr_out+0x68>)
   21a96:	9300      	str	r3, [sp, #0]
   21a98:	2301      	movs	r3, #1
   21a9a:	f88d 3004 	strb.w	r3, [sp, #4]
   21a9e:	aa2c      	add	r2, sp, #176	; 0xb0
   21aa0:	9202      	str	r2, [sp, #8]
   21aa2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    cbor_mbuf_reader_init(&reader, req, sizeof(struct nmgr_hdr));
   21aa6:	2208      	movs	r2, #8
   21aa8:	4621      	mov	r1, r4
   21aaa:	a818      	add	r0, sp, #96	; 0x60
   21aac:	f7f6 fb1e 	bl	180ec <cbor_mbuf_reader_init>
    cbor_parser_init(&reader.r, 0, &n_b.parser, &n_b.it);
   21ab0:	ab28      	add	r3, sp, #160	; 0xa0
   21ab2:	aa21      	add	r2, sp, #132	; 0x84
   21ab4:	2100      	movs	r1, #0
   21ab6:	a818      	add	r0, sp, #96	; 0x60
   21ab8:	f7f6 ff4f 	bl	1895a <cbor_parser_init>
    g_err |= cbor_read_object(&cb->it, attrs);
   21abc:	4669      	mov	r1, sp
   21abe:	a828      	add	r0, sp, #160	; 0xa0
   21ac0:	f7f6 faba 	bl	18038 <cbor_read_object>
    if (g_err) {
   21ac4:	b958      	cbnz	r0, 21ade <nmgr_mstr_out+0x5a>
    streamer_printf(tx_im_inst.streamer, "#nmgr_out: rc=%d\n", (int)(rc_attr&0xffffffff));
   21ac6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   21ac8:	4909      	ldr	r1, [pc, #36]	; (21af0 <nmgr_mstr_out+0x6c>)
   21aca:	4b0a      	ldr	r3, [pc, #40]	; (21af4 <nmgr_mstr_out+0x70>)
   21acc:	6b98      	ldr	r0, [r3, #56]	; 0x38
   21ace:	f7f1 f807 	bl	12ae0 <streamer_printf>
    os_mbuf_free_chain(req);
   21ad2:	4620      	mov	r0, r4
   21ad4:	f7e8 ff1b 	bl	a90e <os_mbuf_free_chain>
}
   21ad8:	2000      	movs	r0, #0
   21ada:	b02e      	add	sp, #184	; 0xb8
   21adc:	bd10      	pop	{r4, pc}
   21ade:	4602      	mov	r2, r0
        streamer_printf(tx_im_inst.streamer, "gerr: '%d\n", g_err);
   21ae0:	4905      	ldr	r1, [pc, #20]	; (21af8 <nmgr_mstr_out+0x74>)
   21ae2:	4b04      	ldr	r3, [pc, #16]	; (21af4 <nmgr_mstr_out+0x70>)
   21ae4:	6b98      	ldr	r0, [r3, #56]	; 0x38
   21ae6:	f7f0 fffb 	bl	12ae0 <streamer_printf>
   21aea:	e7ec      	b.n	21ac6 <nmgr_mstr_out+0x42>
   21aec:	00025d0c 	.word	0x00025d0c
   21af0:	000278d0 	.word	0x000278d0
   21af4:	20005060 	.word	0x20005060
   21af8:	000278c4 	.word	0x000278c4

00021afc <check_image_fid>:
{
   21afc:	b510      	push	{r4, lr}
   21afe:	b082      	sub	sp, #8
   21b00:	460c      	mov	r4, r1
    rc = flash_area_open(fid, &fa);
   21b02:	a901      	add	r1, sp, #4
   21b04:	b2c0      	uxtb	r0, r0
   21b06:	f7f2 fa85 	bl	14014 <flash_area_open>
    if (rc!=0) {
   21b0a:	b108      	cbz	r0, 21b10 <check_image_fid+0x14>
}
   21b0c:	b002      	add	sp, #8
   21b0e:	bd10      	pop	{r4, pc}
    rc = check_image(fa, streamer);
   21b10:	4621      	mov	r1, r4
   21b12:	9801      	ldr	r0, [sp, #4]
   21b14:	f7ff ff04 	bl	21920 <check_image>
    return rc;
   21b18:	e7f8      	b.n	21b0c <check_image_fid+0x10>
	...

00021b1c <bota_cli_cmd>:

static int
bota_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   21b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b1e:	461e      	mov	r6, r3
    int rc;
    int fa_id;
    const char* too_few_args = "Too few args\n";

    if (argc < 2) {
   21b20:	2901      	cmp	r1, #1
   21b22:	dd18      	ble.n	21b56 <bota_cli_cmd+0x3a>
   21b24:	460c      	mov	r4, r1
   21b26:	4615      	mov	r5, r2
        streamer_printf(streamer, too_few_args);
        return 0;
    }
    if (!strcmp(argv[1], "check")) {
   21b28:	6857      	ldr	r7, [r2, #4]
   21b2a:	4944      	ldr	r1, [pc, #272]	; (21c3c <bota_cli_cmd+0x120>)
   21b2c:	4638      	mov	r0, r7
   21b2e:	f7ee fddf 	bl	106f0 <strcmp>
   21b32:	bb50      	cbnz	r0, 21b8a <bota_cli_cmd+0x6e>
        if (argc < 3) {
   21b34:	2c02      	cmp	r4, #2
   21b36:	dd13      	ble.n	21b60 <bota_cli_cmd+0x44>
#if MYNEWT_VAL(BCAST_OTA_SCRATCH_ENABLED)
            streamer_printf(streamer, "  bota scratch: %d\n", MYNEWT_VAL(BCAST_OTA_FLASH_SCRATCH));
#endif
            return 0;
        }
        fa_id = strtol(argv[2], NULL, 0);
   21b38:	2200      	movs	r2, #0
   21b3a:	4611      	mov	r1, r2
   21b3c:	68a8      	ldr	r0, [r5, #8]
   21b3e:	f7ff fd01 	bl	21544 <strtol>
        rc = check_image_fid(fa_id, streamer);
   21b42:	4631      	mov	r1, r6
   21b44:	f7ff ffda 	bl	21afc <check_image_fid>
   21b48:	4602      	mov	r2, r0
        streamer_printf(streamer, "rc=%d\n", rc);
   21b4a:	493d      	ldr	r1, [pc, #244]	; (21c40 <bota_cli_cmd+0x124>)
   21b4c:	4630      	mov	r0, r6
   21b4e:	f7f0 ffc7 	bl	12ae0 <streamer_printf>
        uwb_nmgr_queue_tx(nmgruwb, addr, UWB_DATA_CODE_NMGR_REQUEST, om);
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
    }
    return 0;
}
   21b52:	2000      	movs	r0, #0
   21b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, too_few_args);
   21b56:	493b      	ldr	r1, [pc, #236]	; (21c44 <bota_cli_cmd+0x128>)
   21b58:	4618      	mov	r0, r3
   21b5a:	f7f0 ffc1 	bl	12ae0 <streamer_printf>
        return 0;
   21b5e:	e7f8      	b.n	21b52 <bota_cli_cmd+0x36>
            streamer_printf(streamer, too_few_args);
   21b60:	4938      	ldr	r1, [pc, #224]	; (21c44 <bota_cli_cmd+0x128>)
   21b62:	4630      	mov	r0, r6
   21b64:	f7f0 ffbc 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "  im0: %d\n", flash_area_id_from_image_slot(0));
   21b68:	2000      	movs	r0, #0
   21b6a:	f7f2 fb13 	bl	14194 <flash_area_id_from_image_slot>
   21b6e:	4602      	mov	r2, r0
   21b70:	4935      	ldr	r1, [pc, #212]	; (21c48 <bota_cli_cmd+0x12c>)
   21b72:	4630      	mov	r0, r6
   21b74:	f7f0 ffb4 	bl	12ae0 <streamer_printf>
            streamer_printf(streamer, "  im1: %d\n", flash_area_id_from_image_slot(1));
   21b78:	2001      	movs	r0, #1
   21b7a:	f7f2 fb0b 	bl	14194 <flash_area_id_from_image_slot>
   21b7e:	4602      	mov	r2, r0
   21b80:	4932      	ldr	r1, [pc, #200]	; (21c4c <bota_cli_cmd+0x130>)
   21b82:	4630      	mov	r0, r6
   21b84:	f7f0 ffac 	bl	12ae0 <streamer_printf>
            return 0;
   21b88:	e7e3      	b.n	21b52 <bota_cli_cmd+0x36>
    } else if (!strcmp(argv[1], "txim")) {
   21b8a:	4931      	ldr	r1, [pc, #196]	; (21c50 <bota_cli_cmd+0x134>)
   21b8c:	4638      	mov	r0, r7
   21b8e:	f7ee fdaf 	bl	106f0 <strcmp>
   21b92:	bb58      	cbnz	r0, 21bec <bota_cli_cmd+0xd0>
        if (argc < 4) {
   21b94:	2c03      	cmp	r4, #3
   21b96:	dd24      	ble.n	21be2 <bota_cli_cmd+0xc6>
        tx_im_inst.addr = strtol(argv[2], NULL, 0);
   21b98:	2200      	movs	r2, #0
   21b9a:	4611      	mov	r1, r2
   21b9c:	68a8      	ldr	r0, [r5, #8]
   21b9e:	f7ff fcd1 	bl	21544 <strtol>
   21ba2:	4c2c      	ldr	r4, [pc, #176]	; (21c54 <bota_cli_cmd+0x138>)
   21ba4:	8060      	strh	r0, [r4, #2]
        tx_im_inst.reset = 5;
   21ba6:	2305      	movs	r3, #5
   21ba8:	7023      	strb	r3, [r4, #0]
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   21baa:	2200      	movs	r2, #0
   21bac:	4611      	mov	r1, r2
   21bae:	68e8      	ldr	r0, [r5, #12]
   21bb0:	f7ff fcc8 	bl	21544 <strtol>
   21bb4:	6060      	str	r0, [r4, #4]
        tx_im_inst.blocksize = 256;
   21bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
   21bba:	60a3      	str	r3, [r4, #8]
        tx_im_inst.flags = BOTA_FLAGS_SET_PERMANENT;
   21bbc:	2201      	movs	r2, #1
   21bbe:	2300      	movs	r3, #0
   21bc0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        tx_im_inst.streamer = streamer_console_get();
   21bc4:	f7f5 fb28 	bl	17218 <streamer_console_get>
   21bc8:	63a0      	str	r0, [r4, #56]	; 0x38
        os_callout_reset(&tx_im_inst.callout, 0);
   21bca:	2100      	movs	r1, #0
   21bcc:	f104 000c 	add.w	r0, r4, #12
   21bd0:	f7e7 fcb2 	bl	9538 <os_callout_reset>
        streamer_printf(streamer, "txim slot %d to 0x%x\n", tx_im_inst.slot_id, tx_im_inst.addr);
   21bd4:	8863      	ldrh	r3, [r4, #2]
   21bd6:	6862      	ldr	r2, [r4, #4]
   21bd8:	491f      	ldr	r1, [pc, #124]	; (21c58 <bota_cli_cmd+0x13c>)
   21bda:	4630      	mov	r0, r6
   21bdc:	f7f0 ff80 	bl	12ae0 <streamer_printf>
   21be0:	e7b7      	b.n	21b52 <bota_cli_cmd+0x36>
            streamer_printf(streamer, too_few_args);
   21be2:	4918      	ldr	r1, [pc, #96]	; (21c44 <bota_cli_cmd+0x128>)
   21be4:	4630      	mov	r0, r6
   21be6:	f7f0 ff7b 	bl	12ae0 <streamer_printf>
            return 0;
   21bea:	e7b2      	b.n	21b52 <bota_cli_cmd+0x36>
    } else if (!strcmp(argv[1], "txrst")) {
   21bec:	491b      	ldr	r1, [pc, #108]	; (21c5c <bota_cli_cmd+0x140>)
   21bee:	4638      	mov	r0, r7
   21bf0:	f7ee fd7e 	bl	106f0 <strcmp>
   21bf4:	b9e0      	cbnz	r0, 21c30 <bota_cli_cmd+0x114>
        if (argc < 3) {
   21bf6:	2c02      	cmp	r4, #2
   21bf8:	dd15      	ble.n	21c26 <bota_cli_cmd+0x10a>
        uint16_t addr = strtol(argv[2], NULL, 0);
   21bfa:	2200      	movs	r2, #0
   21bfc:	4611      	mov	r1, r2
   21bfe:	68a8      	ldr	r0, [r5, #8]
   21c00:	f7ff fca0 	bl	21544 <strtol>
   21c04:	b284      	uxth	r4, r0
        struct os_mbuf *om = bcast_ota_get_reset_mbuf();
   21c06:	f7ff fe1d 	bl	21844 <bcast_ota_get_reset_mbuf>
   21c0a:	4605      	mov	r5, r0
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   21c0c:	2000      	movs	r0, #0
   21c0e:	f7e7 f831 	bl	8c74 <uwb_dev_idx_lookup>
   21c12:	2113      	movs	r1, #19
   21c14:	f7e7 f8b3 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        uwb_nmgr_queue_tx(nmgruwb, addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   21c18:	462b      	mov	r3, r5
   21c1a:	f240 4221 	movw	r2, #1057	; 0x421
   21c1e:	4621      	mov	r1, r4
   21c20:	f7e9 fb6e 	bl	b300 <uwb_nmgr_queue_tx>
   21c24:	e795      	b.n	21b52 <bota_cli_cmd+0x36>
            streamer_printf(streamer, too_few_args);
   21c26:	4907      	ldr	r1, [pc, #28]	; (21c44 <bota_cli_cmd+0x128>)
   21c28:	4630      	mov	r0, r6
   21c2a:	f7f0 ff59 	bl	12ae0 <streamer_printf>
            return 0;
   21c2e:	e790      	b.n	21b52 <bota_cli_cmd+0x36>
        streamer_printf(streamer, "Unknown cmd\n");
   21c30:	490b      	ldr	r1, [pc, #44]	; (21c60 <bota_cli_cmd+0x144>)
   21c32:	4630      	mov	r0, r6
   21c34:	f7f0 ff54 	bl	12ae0 <streamer_printf>
   21c38:	e78b      	b.n	21b52 <bota_cli_cmd+0x36>
   21c3a:	bf00      	nop
   21c3c:	000278e4 	.word	0x000278e4
   21c40:	00027904 	.word	0x00027904
   21c44:	00025754 	.word	0x00025754
   21c48:	000278ec 	.word	0x000278ec
   21c4c:	000278f8 	.word	0x000278f8
   21c50:	0002790c 	.word	0x0002790c
   21c54:	20005060 	.word	0x20005060
   21c58:	00027914 	.word	0x00027914
   21c5c:	0002792c 	.word	0x0002792c
   21c60:	00025854 	.word	0x00025854

00021c64 <bota_cli_register>:

int
bota_cli_register(void)
{
   21c64:	b508      	push	{r3, lr}
    int rc;
    rc = nmgr_transport_init(&nmgr_mstr_transport, nmgr_mstr_out,
   21c66:	4a0c      	ldr	r2, [pc, #48]	; (21c98 <bota_cli_register+0x34>)
   21c68:	490c      	ldr	r1, [pc, #48]	; (21c9c <bota_cli_register+0x38>)
   21c6a:	480d      	ldr	r0, [pc, #52]	; (21ca0 <bota_cli_register+0x3c>)
   21c6c:	f7f0 fb7a 	bl	12364 <nmgr_transport_init>
                             nmgr_mstr_get_mtu);
    assert(rc == 0);
   21c70:	b958      	cbnz	r0, 21c8a <bota_cli_register+0x26>
    os_callout_init(&tx_im_inst.callout, os_eventq_dflt_get(), txim_ev_cb, NULL);
   21c72:	f7e7 fe97 	bl	99a4 <os_eventq_dflt_get>
   21c76:	4601      	mov	r1, r0
   21c78:	2300      	movs	r3, #0
   21c7a:	4a0a      	ldr	r2, [pc, #40]	; (21ca4 <bota_cli_register+0x40>)
   21c7c:	480a      	ldr	r0, [pc, #40]	; (21ca8 <bota_cli_register+0x44>)
   21c7e:	f7e7 fc2f 	bl	94e0 <os_callout_init>

    return shell_cmd_register(&shell_bota_cmd);
   21c82:	480a      	ldr	r0, [pc, #40]	; (21cac <bota_cli_register+0x48>)
   21c84:	f7f3 fdbe 	bl	15804 <shell_cmd_register>
}
   21c88:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   21c8a:	2300      	movs	r3, #0
   21c8c:	461a      	mov	r2, r3
   21c8e:	4619      	mov	r1, r3
   21c90:	4618      	mov	r0, r3
   21c92:	f7e7 fa97 	bl	91c4 <__assert_func>
   21c96:	bf00      	nop
   21c98:	0002191d 	.word	0x0002191d
   21c9c:	00021a85 	.word	0x00021a85
   21ca0:	20005040 	.word	0x20005040
   21ca4:	00021989 	.word	0x00021989
   21ca8:	2000506c 	.word	0x2000506c
   21cac:	20000f38 	.word	0x20000f38

00021cb0 <bota_check_image>:
struct bota_state bota_state = {0};

#define TMPBUF_SZ  256
static int
bota_check_image(const struct flash_area *fap)
{
   21cb0:	b530      	push	{r4, r5, lr}
   21cb2:	b095      	sub	sp, #84	; 0x54
   21cb4:	4604      	mov	r4, r0
    int rc;
    struct image_header hdr;
    uint8_t hash[IMGMGR_HASH_LEN];

    rc = flash_area_read(fap, 0, &hdr, sizeof(struct image_header));
   21cb6:	2320      	movs	r3, #32
   21cb8:	aa0c      	add	r2, sp, #48	; 0x30
   21cba:	2100      	movs	r1, #0
   21cbc:	f7f2 fa0a 	bl	140d4 <flash_area_read>
    if (rc!=0) {
   21cc0:	b118      	cbz	r0, 21cca <bota_check_image+0x1a>
        return OS_ENOMEM;
   21cc2:	2401      	movs	r4, #1
    }
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
                               NULL, 0, hash);
    free(tmpbuf);
    return rc;
}
   21cc4:	4620      	mov	r0, r4
   21cc6:	b015      	add	sp, #84	; 0x54
   21cc8:	bd30      	pop	{r4, r5, pc}
    void *tmpbuf = malloc(TMPBUF_SZ);
   21cca:	f44f 7080 	mov.w	r0, #256	; 0x100
   21cce:	f7ee fc67 	bl	105a0 <malloc>
    if (!tmpbuf) {
   21cd2:	4605      	mov	r5, r0
   21cd4:	b180      	cbz	r0, 21cf8 <bota_check_image+0x48>
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
   21cd6:	ab04      	add	r3, sp, #16
   21cd8:	9302      	str	r3, [sp, #8]
   21cda:	2300      	movs	r3, #0
   21cdc:	9301      	str	r3, [sp, #4]
   21cde:	9300      	str	r3, [sp, #0]
   21ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
   21ce4:	4602      	mov	r2, r0
   21ce6:	4621      	mov	r1, r4
   21ce8:	a80c      	add	r0, sp, #48	; 0x30
   21cea:	f000 ff3f 	bl	22b6c <bootutil_img_validate>
   21cee:	4604      	mov	r4, r0
    free(tmpbuf);
   21cf0:	4628      	mov	r0, r5
   21cf2:	f7ee fc8b 	bl	1060c <free>
    return rc;
   21cf6:	e7e5      	b.n	21cc4 <bota_check_image+0x14>
        return OS_ENOMEM;
   21cf8:	2401      	movs	r4, #1
   21cfa:	e7e3      	b.n	21cc4 <bota_check_image+0x14>

00021cfc <bota_confirm>:
    return rc;
}

static int
bota_confirm(struct mgmt_cbuf *cb)
{
   21cfc:	b530      	push	{r4, r5, lr}
   21cfe:	b083      	sub	sp, #12
    CborError g_err = CborNoError;
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   21d00:	f100 050c 	add.w	r5, r0, #12
   21d04:	2202      	movs	r2, #2
   21d06:	4913      	ldr	r1, [pc, #76]	; (21d54 <bota_confirm+0x58>)
   21d08:	4628      	mov	r0, r5
   21d0a:	f7f6 fb7c 	bl	18406 <cbor_encode_text_string>
   21d0e:	4604      	mov	r4, r0
    uint64_t rc = boot_set_confirmed();
   21d10:	f7f5 fc41 	bl	17596 <boot_set_confirmed>
    if (rc == OS_OK) {
   21d14:	ea50 72e0 	orrs.w	r2, r0, r0, asr #31
   21d18:	d112      	bne.n	21d40 <bota_confirm+0x44>
   21d1a:	17c3      	asrs	r3, r0, #31
        BOTA_INFO("#### Image confirmed, rc=%d\n", rc);
   21d1c:	9000      	str	r0, [sp, #0]
   21d1e:	9301      	str	r3, [sp, #4]
   21d20:	4b0d      	ldr	r3, [pc, #52]	; (21d58 <bota_confirm+0x5c>)
   21d22:	2201      	movs	r2, #1
   21d24:	2146      	movs	r1, #70	; 0x46
   21d26:	480d      	ldr	r0, [pc, #52]	; (21d5c <bota_confirm+0x60>)
   21d28:	f7f2 fb74 	bl	14414 <log_printf>
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   21d2c:	2200      	movs	r2, #0
   21d2e:	2300      	movs	r3, #0
   21d30:	4628      	mov	r0, r5
   21d32:	f7f6 faed 	bl	18310 <cbor_encode_int>
   21d36:	4304      	orrs	r4, r0
    } else {
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EUNKNOWN);
    }

    if (g_err) {
   21d38:	b94c      	cbnz	r4, 21d4e <bota_confirm+0x52>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   21d3a:	2000      	movs	r0, #0
}
   21d3c:	b003      	add	sp, #12
   21d3e:	bd30      	pop	{r4, r5, pc}
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EUNKNOWN);
   21d40:	2201      	movs	r2, #1
   21d42:	2300      	movs	r3, #0
   21d44:	4628      	mov	r0, r5
   21d46:	f7f6 fae3 	bl	18310 <cbor_encode_int>
   21d4a:	4304      	orrs	r4, r0
   21d4c:	e7f4      	b.n	21d38 <bota_confirm+0x3c>
        return MGMT_ERR_ENOMEM;
   21d4e:	2002      	movs	r0, #2
   21d50:	e7f4      	b.n	21d3c <bota_confirm+0x40>
   21d52:	bf00      	nop
   21d54:	00025d0c 	.word	0x00025d0c
   21d58:	000279bc 	.word	0x000279bc
   21d5c:	20005020 	.word	0x20005020

00021d60 <bota_upload>:
{
   21d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d64:	b0e8      	sub	sp, #416	; 0x1a0
   21d66:	4604      	mov	r4, r0
    uint8_t *img_data = (uint8_t*)malloc(MYNEWT_VAL(IMGMGR_MAX_CHUNK_SIZE));
   21d68:	f44f 7000 	mov.w	r0, #512	; 0x200
   21d6c:	f7ee fc18 	bl	105a0 <malloc>
    uint64_t off = UINT_MAX;
   21d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21d74:	2300      	movs	r3, #0
   21d76:	e9cd 2366 	strd	r2, r3, [sp, #408]	; 0x198
    uint64_t size = UINT_MAX;
   21d7a:	e9cd 2364 	strd	r2, r3, [sp, #400]	; 0x190
    uint64_t slot = UINT_MAX;
   21d7e:	e9cd 2362 	strd	r2, r3, [sp, #392]	; 0x188
    uint64_t flags = UINT_MAX;
   21d82:	e9cd 2360 	strd	r2, r3, [sp, #384]	; 0x180
    size_t data_len = 0;
   21d86:	2300      	movs	r3, #0
   21d88:	935f      	str	r3, [sp, #380]	; 0x17c
    if (!img_data) {
   21d8a:	2800      	cmp	r0, #0
   21d8c:	f000 809d 	beq.w	21eca <bota_upload+0x16a>
   21d90:	4605      	mov	r5, r0
    const struct cbor_attr_t off_attr[] = {
   21d92:	f44f 7290 	mov.w	r2, #288	; 0x120
   21d96:	2100      	movs	r1, #0
   21d98:	a816      	add	r0, sp, #88	; 0x58
   21d9a:	f7ee fc7e 	bl	1069a <memset>
   21d9e:	4ba5      	ldr	r3, [pc, #660]	; (22034 <bota_upload+0x2d4>)
   21da0:	9316      	str	r3, [sp, #88]	; 0x58
   21da2:	2303      	movs	r3, #3
   21da4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
   21da8:	9518      	str	r5, [sp, #96]	; 0x60
   21daa:	ab5f      	add	r3, sp, #380	; 0x17c
   21dac:	9319      	str	r3, [sp, #100]	; 0x64
   21dae:	f44f 7300 	mov.w	r3, #512	; 0x200
   21db2:	9320      	str	r3, [sp, #128]	; 0x80
   21db4:	4ba0      	ldr	r3, [pc, #640]	; (22038 <bota_upload+0x2d8>)
   21db6:	9322      	str	r3, [sp, #136]	; 0x88
   21db8:	2202      	movs	r2, #2
   21dba:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
   21dbe:	ab64      	add	r3, sp, #400	; 0x190
   21dc0:	9324      	str	r3, [sp, #144]	; 0x90
   21dc2:	2301      	movs	r3, #1
   21dc4:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
   21dc8:	499c      	ldr	r1, [pc, #624]	; (2203c <bota_upload+0x2dc>)
   21dca:	912e      	str	r1, [sp, #184]	; 0xb8
   21dcc:	f88d 20bc 	strb.w	r2, [sp, #188]	; 0xbc
   21dd0:	a966      	add	r1, sp, #408	; 0x198
   21dd2:	9130      	str	r1, [sp, #192]	; 0xc0
   21dd4:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
   21dd8:	4999      	ldr	r1, [pc, #612]	; (22040 <bota_upload+0x2e0>)
   21dda:	913a      	str	r1, [sp, #232]	; 0xe8
   21ddc:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
   21de0:	a962      	add	r1, sp, #392	; 0x188
   21de2:	913c      	str	r1, [sp, #240]	; 0xf0
   21de4:	f88d 3114 	strb.w	r3, [sp, #276]	; 0x114
   21de8:	4996      	ldr	r1, [pc, #600]	; (22044 <bota_upload+0x2e4>)
   21dea:	9146      	str	r1, [sp, #280]	; 0x118
   21dec:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
   21df0:	aa60      	add	r2, sp, #384	; 0x180
   21df2:	9248      	str	r2, [sp, #288]	; 0x120
   21df4:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
    rc = cbor_read_object(&cb->it, off_attr);
   21df8:	a916      	add	r1, sp, #88	; 0x58
   21dfa:	f104 001c 	add.w	r0, r4, #28
   21dfe:	f7f6 f91b 	bl	18038 <cbor_read_object>
    if (rc || off == UINT_MAX) {
   21e02:	4601      	mov	r1, r0
   21e04:	2800      	cmp	r0, #0
   21e06:	d16c      	bne.n	21ee2 <bota_upload+0x182>
   21e08:	9a66      	ldr	r2, [sp, #408]	; 0x198
   21e0a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   21e0c:	2b00      	cmp	r3, #0
   21e0e:	bf08      	it	eq
   21e10:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   21e14:	d065      	beq.n	21ee2 <bota_upload+0x182>
    BOTA_DEBUG("bota: l%ld(%lu),o%ld,s%ld(%d),e%d,f%llx(%llx) ec:%ld\n",
   21e16:	4b8c      	ldr	r3, [pc, #560]	; (22048 <bota_upload+0x2e8>)
   21e18:	7b19      	ldrb	r1, [r3, #12]
   21e1a:	6898      	ldr	r0, [r3, #8]
   21e1c:	900a      	str	r0, [sp, #40]	; 0x28
   21e1e:	ed93 7b04 	vldr	d7, [r3, #16]
   21e22:	ed8d 7b08 	vstr	d7, [sp, #32]
   21e26:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
   21e2a:	ed8d 7b06 	vstr	d7, [sp, #24]
   21e2e:	2600      	movs	r6, #0
   21e30:	9605      	str	r6, [sp, #20]
   21e32:	9104      	str	r1, [sp, #16]
   21e34:	9962      	ldr	r1, [sp, #392]	; 0x188
   21e36:	9103      	str	r1, [sp, #12]
   21e38:	9202      	str	r2, [sp, #8]
   21e3a:	685b      	ldr	r3, [r3, #4]
   21e3c:	9301      	str	r3, [sp, #4]
   21e3e:	9b64      	ldr	r3, [sp, #400]	; 0x190
   21e40:	9300      	str	r3, [sp, #0]
   21e42:	4b82      	ldr	r3, [pc, #520]	; (2204c <bota_upload+0x2ec>)
   21e44:	4632      	mov	r2, r6
   21e46:	2146      	movs	r1, #70	; 0x46
   21e48:	4881      	ldr	r0, [pc, #516]	; (22050 <bota_upload+0x2f0>)
   21e4a:	f7f2 fae3 	bl	14414 <log_printf>
    if (slot != UINT_MAX) {
   21e4e:	9862      	ldr	r0, [sp, #392]	; 0x188
   21e50:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   21e52:	42b3      	cmp	r3, r6
   21e54:	bf08      	it	eq
   21e56:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   21e5a:	d155      	bne.n	21f08 <bota_upload+0x1a8>
    if (size != UINT_MAX) {
   21e5c:	9b64      	ldr	r3, [sp, #400]	; 0x190
   21e5e:	9a65      	ldr	r2, [sp, #404]	; 0x194
   21e60:	2a00      	cmp	r2, #0
   21e62:	bf08      	it	eq
   21e64:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   21e68:	d001      	beq.n	21e6e <bota_upload+0x10e>
        bota_state.upload.size = size;
   21e6a:	4a77      	ldr	r2, [pc, #476]	; (22048 <bota_upload+0x2e8>)
   21e6c:	6053      	str	r3, [r2, #4]
    if (flags != UINT_MAX) {
   21e6e:	9a60      	ldr	r2, [sp, #384]	; 0x180
   21e70:	9b61      	ldr	r3, [sp, #388]	; 0x184
   21e72:	2b00      	cmp	r3, #0
   21e74:	bf08      	it	eq
   21e76:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   21e7a:	d002      	beq.n	21e82 <bota_upload+0x122>
        bota_state.upload.flags = flags;
   21e7c:	4972      	ldr	r1, [pc, #456]	; (22048 <bota_upload+0x2e8>)
   21e7e:	610a      	str	r2, [r1, #16]
   21e80:	614b      	str	r3, [r1, #20]
    if (bota_state.upload.fa_id < flash_area_id_from_image_slot(1)) {
   21e82:	4b71      	ldr	r3, [pc, #452]	; (22048 <bota_upload+0x2e8>)
   21e84:	7b5e      	ldrb	r6, [r3, #13]
   21e86:	2001      	movs	r0, #1
   21e88:	f7f2 f984 	bl	14194 <flash_area_id_from_image_slot>
   21e8c:	4286      	cmp	r6, r0
   21e8e:	db41      	blt.n	21f14 <bota_upload+0x1b4>
    rc = flash_area_open(bota_state.upload.fa_id, &tmp_fa);
   21e90:	a90d      	add	r1, sp, #52	; 0x34
   21e92:	4b6d      	ldr	r3, [pc, #436]	; (22048 <bota_upload+0x2e8>)
   21e94:	7b58      	ldrb	r0, [r3, #13]
   21e96:	f7f2 f8bd 	bl	14014 <flash_area_open>
    if(rc){
   21e9a:	4606      	mov	r6, r0
   21e9c:	2800      	cmp	r0, #0
   21e9e:	d147      	bne.n	21f30 <bota_upload+0x1d0>
    if (!tmp_fa) {
   21ea0:	980d      	ldr	r0, [sp, #52]	; 0x34
   21ea2:	2800      	cmp	r0, #0
   21ea4:	d049      	beq.n	21f3a <bota_upload+0x1da>
    if (off == 0) {
   21ea6:	9a66      	ldr	r2, [sp, #408]	; 0x198
   21ea8:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   21eaa:	4313      	orrs	r3, r2
   21eac:	f040 8097 	bne.w	21fde <bota_upload+0x27e>
        if (data_len < sizeof(struct image_header)) {
   21eb0:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   21eb2:	2b1f      	cmp	r3, #31
   21eb4:	f240 812e 	bls.w	22114 <bota_upload+0x3b4>
        if (new_hdr->ih_magic != IMAGE_MAGIC) {
   21eb8:	682a      	ldr	r2, [r5, #0]
   21eba:	4b66      	ldr	r3, [pc, #408]	; (22054 <bota_upload+0x2f4>)
   21ebc:	429a      	cmp	r2, r3
   21ebe:	d041      	beq.n	21f44 <bota_upload+0x1e4>
            rc = MGMT_ERR_EINVAL;
   21ec0:	2603      	movs	r6, #3
    free(img_data);
   21ec2:	4628      	mov	r0, r5
   21ec4:	f7ee fba2 	bl	1060c <free>
    return rc;
   21ec8:	e01a      	b.n	21f00 <bota_upload+0x1a0>
        BOTA_ERR("ERR no mem\n");
   21eca:	4b63      	ldr	r3, [pc, #396]	; (22058 <bota_upload+0x2f8>)
   21ecc:	2203      	movs	r2, #3
   21ece:	2146      	movs	r1, #70	; 0x46
   21ed0:	485f      	ldr	r0, [pc, #380]	; (22050 <bota_upload+0x2f0>)
   21ed2:	f7f2 fa9f 	bl	14414 <log_printf>
        assert(0);
   21ed6:	2300      	movs	r3, #0
   21ed8:	461a      	mov	r2, r3
   21eda:	4619      	mov	r1, r3
   21edc:	4618      	mov	r0, r3
   21ede:	f7e7 f971 	bl	91c4 <__assert_func>
        BOTA_ERR("ERR read_failed rc %d off %llx\n", rc, off);
   21ee2:	e9dd 2366 	ldrd	r2, r3, [sp, #408]	; 0x198
   21ee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   21eea:	9100      	str	r1, [sp, #0]
   21eec:	4b5b      	ldr	r3, [pc, #364]	; (2205c <bota_upload+0x2fc>)
   21eee:	2203      	movs	r2, #3
   21ef0:	2146      	movs	r1, #70	; 0x46
   21ef2:	4857      	ldr	r0, [pc, #348]	; (22050 <bota_upload+0x2f0>)
   21ef4:	f7f2 fa8e 	bl	14414 <log_printf>
        free(img_data);
   21ef8:	4628      	mov	r0, r5
   21efa:	f7ee fb87 	bl	1060c <free>
        return MGMT_ERR_EINVAL;
   21efe:	2603      	movs	r6, #3
}
   21f00:	4630      	mov	r0, r6
   21f02:	b068      	add	sp, #416	; 0x1a0
   21f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bota_state.upload.slot_id = slot;
   21f08:	4e4f      	ldr	r6, [pc, #316]	; (22048 <bota_upload+0x2e8>)
   21f0a:	7330      	strb	r0, [r6, #12]
        bota_state.upload.fa_id = flash_area_id_from_image_slot(slot);
   21f0c:	f7f2 f942 	bl	14194 <flash_area_id_from_image_slot>
   21f10:	7370      	strb	r0, [r6, #13]
   21f12:	e7a3      	b.n	21e5c <bota_upload+0xfc>
        BOTA_ERR("ERR Unknown fa_id(%d)\n", bota_state.upload.fa_id);
   21f14:	4b4c      	ldr	r3, [pc, #304]	; (22048 <bota_upload+0x2e8>)
   21f16:	7b5b      	ldrb	r3, [r3, #13]
   21f18:	9300      	str	r3, [sp, #0]
   21f1a:	4b51      	ldr	r3, [pc, #324]	; (22060 <bota_upload+0x300>)
   21f1c:	2203      	movs	r2, #3
   21f1e:	2146      	movs	r1, #70	; 0x46
   21f20:	484b      	ldr	r0, [pc, #300]	; (22050 <bota_upload+0x2f0>)
   21f22:	f7f2 fa77 	bl	14414 <log_printf>
        free(img_data);
   21f26:	4628      	mov	r0, r5
   21f28:	f7ee fb70 	bl	1060c <free>
        return MGMT_ERR_EINVAL;
   21f2c:	2603      	movs	r6, #3
   21f2e:	e7e7      	b.n	21f00 <bota_upload+0x1a0>
        free(img_data);
   21f30:	4628      	mov	r0, r5
   21f32:	f7ee fb6b 	bl	1060c <free>
        return MGMT_ERR_EINVAL;
   21f36:	2603      	movs	r6, #3
   21f38:	e7e2      	b.n	21f00 <bota_upload+0x1a0>
        free(img_data);
   21f3a:	4628      	mov	r0, r5
   21f3c:	f7ee fb66 	bl	1060c <free>
        return MGMT_ERR_EINVAL;
   21f40:	2603      	movs	r6, #3
   21f42:	e7dd      	b.n	21f00 <bota_upload+0x1a0>
        rc = flash_area_read(tmp_fa, 0, &tmp_hdr, sizeof(struct image_header));
   21f44:	2320      	movs	r3, #32
   21f46:	aa0e      	add	r2, sp, #56	; 0x38
   21f48:	2100      	movs	r1, #0
   21f4a:	f7f2 f8c3 	bl	140d4 <flash_area_read>
        if (tmp_hdr.ih_magic != IMAGE_MAGIC ||
   21f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   21f50:	4b40      	ldr	r3, [pc, #256]	; (22054 <bota_upload+0x2f4>)
   21f52:	429a      	cmp	r2, r3
   21f54:	d024      	beq.n	21fa0 <bota_upload+0x240>
            erase = 1;
   21f56:	2001      	movs	r0, #1
        bota_state.upload.off = 0;
   21f58:	4b3b      	ldr	r3, [pc, #236]	; (22048 <bota_upload+0x2e8>)
   21f5a:	2200      	movs	r2, #0
   21f5c:	601a      	str	r2, [r3, #0]
        bota_state.upload.size = size;
   21f5e:	9964      	ldr	r1, [sp, #400]	; 0x190
   21f60:	6059      	str	r1, [r3, #4]
        bota_state.upload.upl_errs = 0;
   21f62:	609a      	str	r2, [r3, #8]
        if (erase==1) {
   21f64:	b350      	cbz	r0, 21fbc <bota_upload+0x25c>
            BOTA_DEBUG("### New upload: %d.%d.%d.%d\n", new_hdr->ih_ver.iv_major,
   21f66:	7d2b      	ldrb	r3, [r5, #20]
   21f68:	7d6a      	ldrb	r2, [r5, #21]
   21f6a:	8ae9      	ldrh	r1, [r5, #22]
   21f6c:	4f38      	ldr	r7, [pc, #224]	; (22050 <bota_upload+0x2f0>)
   21f6e:	69a8      	ldr	r0, [r5, #24]
   21f70:	9003      	str	r0, [sp, #12]
   21f72:	9102      	str	r1, [sp, #8]
   21f74:	9201      	str	r2, [sp, #4]
   21f76:	9300      	str	r3, [sp, #0]
   21f78:	4b3a      	ldr	r3, [pc, #232]	; (22064 <bota_upload+0x304>)
   21f7a:	2200      	movs	r2, #0
   21f7c:	2146      	movs	r1, #70	; 0x46
   21f7e:	4638      	mov	r0, r7
   21f80:	f7f2 fa48 	bl	14414 <log_printf>
            BOTA_DEBUG("### Erasing flash ###\n");
   21f84:	4b38      	ldr	r3, [pc, #224]	; (22068 <bota_upload+0x308>)
   21f86:	2200      	movs	r2, #0
   21f88:	2146      	movs	r1, #70	; 0x46
   21f8a:	4638      	mov	r0, r7
   21f8c:	f7f2 fa42 	bl	14414 <log_printf>
            rc = flash_area_erase(tmp_fa, 0, tmp_fa->fa_size);
   21f90:	980d      	ldr	r0, [sp, #52]	; 0x34
   21f92:	6882      	ldr	r2, [r0, #8]
   21f94:	2100      	movs	r1, #0
   21f96:	f7f2 f8c5 	bl	14124 <flash_area_erase>
            if (rc) {
   21f9a:	b300      	cbz	r0, 21fde <bota_upload+0x27e>
            rc = flash_area_erase(tmp_fa, 0, tmp_fa->fa_size);
   21f9c:	4606      	mov	r6, r0
   21f9e:	e790      	b.n	21ec2 <bota_upload+0x162>
            new_hdr->ih_ver.iv_minor     != tmp_hdr.ih_ver.iv_minor ||
   21fa0:	696a      	ldr	r2, [r5, #20]
   21fa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21fa4:	429a      	cmp	r2, r3
   21fa6:	d001      	beq.n	21fac <bota_upload+0x24c>
            erase = 1;
   21fa8:	2001      	movs	r0, #1
   21faa:	e7d5      	b.n	21f58 <bota_upload+0x1f8>
            new_hdr->ih_ver.iv_build_num != tmp_hdr.ih_ver.iv_build_num) {
   21fac:	69aa      	ldr	r2, [r5, #24]
   21fae:	9b14      	ldr	r3, [sp, #80]	; 0x50
            new_hdr->ih_ver.iv_revision  != tmp_hdr.ih_ver.iv_revision ||
   21fb0:	429a      	cmp	r2, r3
   21fb2:	d001      	beq.n	21fb8 <bota_upload+0x258>
            erase = 1;
   21fb4:	2001      	movs	r0, #1
   21fb6:	e7cf      	b.n	21f58 <bota_upload+0x1f8>
        erase = 0;
   21fb8:	2000      	movs	r0, #0
   21fba:	e7cd      	b.n	21f58 <bota_upload+0x1f8>
            BOTA_DEBUG("### Continuing upload of: %d.%d.%d.%d\n", tmp_hdr.ih_ver.iv_major,
   21fbc:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   21fc0:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
   21fc4:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
   21fc8:	9814      	ldr	r0, [sp, #80]	; 0x50
   21fca:	9003      	str	r0, [sp, #12]
   21fcc:	9102      	str	r1, [sp, #8]
   21fce:	9201      	str	r2, [sp, #4]
   21fd0:	9300      	str	r3, [sp, #0]
   21fd2:	4b26      	ldr	r3, [pc, #152]	; (2206c <bota_upload+0x30c>)
   21fd4:	2200      	movs	r2, #0
   21fd6:	2146      	movs	r1, #70	; 0x46
   21fd8:	481d      	ldr	r0, [pc, #116]	; (22050 <bota_upload+0x2f0>)
   21fda:	f7f2 fa1b 	bl	14414 <log_printf>
    if (data_len) {
   21fde:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   21fe0:	2b00      	cmp	r3, #0
   21fe2:	d149      	bne.n	22078 <bota_upload+0x318>
    if (bota_state.upload.size == bota_state.upload.off) {
   21fe4:	4b18      	ldr	r3, [pc, #96]	; (22048 <bota_upload+0x2e8>)
   21fe6:	685a      	ldr	r2, [r3, #4]
   21fe8:	681b      	ldr	r3, [r3, #0]
   21fea:	429a      	cmp	r2, r3
   21fec:	d05c      	beq.n	220a8 <bota_upload+0x348>
    free(img_data);
   21fee:	4628      	mov	r0, r5
   21ff0:	f7ee fb0c 	bl	1060c <free>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   21ff4:	340c      	adds	r4, #12
   21ff6:	2202      	movs	r2, #2
   21ff8:	491d      	ldr	r1, [pc, #116]	; (22070 <bota_upload+0x310>)
   21ffa:	4620      	mov	r0, r4
   21ffc:	f7f6 fa03 	bl	18406 <cbor_encode_text_string>
   22000:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   22002:	2200      	movs	r2, #0
   22004:	2300      	movs	r3, #0
   22006:	4620      	mov	r0, r4
   22008:	f7f6 f982 	bl	18310 <cbor_encode_int>
   2200c:	4305      	orrs	r5, r0
   2200e:	2203      	movs	r2, #3
   22010:	4918      	ldr	r1, [pc, #96]	; (22074 <bota_upload+0x314>)
   22012:	4620      	mov	r0, r4
   22014:	f7f6 f9f7 	bl	18406 <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "off");
   22018:	4305      	orrs	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, bota_state.upload.off);
   2201a:	4b0b      	ldr	r3, [pc, #44]	; (22048 <bota_upload+0x2e8>)
   2201c:	681a      	ldr	r2, [r3, #0]
   2201e:	2300      	movs	r3, #0
   22020:	4620      	mov	r0, r4
   22022:	f7f6 f975 	bl	18310 <cbor_encode_int>
    if (g_err) {
   22026:	ea55 0300 	orrs.w	r3, r5, r0
   2202a:	f43f af69 	beq.w	21f00 <bota_upload+0x1a0>
        return MGMT_ERR_ENOMEM;
   2202e:	2602      	movs	r6, #2
   22030:	e766      	b.n	21f00 <bota_upload+0x1a0>
   22032:	bf00      	nop
   22034:	0002527c 	.word	0x0002527c
   22038:	00026440 	.word	0x00026440
   2203c:	00026938 	.word	0x00026938
   22040:	000268c4 	.word	0x000268c4
   22044:	000277f4 	.word	0x000277f4
   22048:	200050a8 	.word	0x200050a8
   2204c:	00027a08 	.word	0x00027a08
   22050:	20005020 	.word	0x20005020
   22054:	96f3b83d 	.word	0x96f3b83d
   22058:	000279dc 	.word	0x000279dc
   2205c:	000279e8 	.word	0x000279e8
   22060:	00027a40 	.word	0x00027a40
   22064:	00027a58 	.word	0x00027a58
   22068:	00027a78 	.word	0x00027a78
   2206c:	00027a90 	.word	0x00027a90
   22070:	00025d0c 	.word	0x00025d0c
   22074:	00025d10 	.word	0x00025d10
        rc = flash_area_write(tmp_fa, off, img_data, data_len);
   22078:	462a      	mov	r2, r5
   2207a:	9966      	ldr	r1, [sp, #408]	; 0x198
   2207c:	980d      	ldr	r0, [sp, #52]	; 0x34
   2207e:	f7f2 f83d 	bl	140fc <flash_area_write>
        if (rc) {
   22082:	2800      	cmp	r0, #0
   22084:	d148      	bne.n	22118 <bota_upload+0x3b8>
        if (bota_state.upload.off != off) {
   22086:	4b25      	ldr	r3, [pc, #148]	; (2211c <bota_upload+0x3bc>)
   22088:	6819      	ldr	r1, [r3, #0]
   2208a:	9a66      	ldr	r2, [sp, #408]	; 0x198
   2208c:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   2208e:	2b00      	cmp	r3, #0
   22090:	bf08      	it	eq
   22092:	4291      	cmpeq	r1, r2
   22094:	d003      	beq.n	2209e <bota_upload+0x33e>
            bota_state.upload.upl_errs++;
   22096:	4921      	ldr	r1, [pc, #132]	; (2211c <bota_upload+0x3bc>)
   22098:	688b      	ldr	r3, [r1, #8]
   2209a:	3301      	adds	r3, #1
   2209c:	608b      	str	r3, [r1, #8]
        bota_state.upload.off = off+data_len;
   2209e:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   220a0:	4413      	add	r3, r2
   220a2:	4a1e      	ldr	r2, [pc, #120]	; (2211c <bota_upload+0x3bc>)
   220a4:	6013      	str	r3, [r2, #0]
   220a6:	e79d      	b.n	21fe4 <bota_upload+0x284>
        BOTA_DEBUG("#### All done, checking image\n");
   220a8:	4b1d      	ldr	r3, [pc, #116]	; (22120 <bota_upload+0x3c0>)
   220aa:	2200      	movs	r2, #0
   220ac:	2146      	movs	r1, #70	; 0x46
   220ae:	481d      	ldr	r0, [pc, #116]	; (22124 <bota_upload+0x3c4>)
   220b0:	f7f2 f9b0 	bl	14414 <log_printf>
        rc = bota_check_image(tmp_fa);
   220b4:	980d      	ldr	r0, [sp, #52]	; 0x34
   220b6:	f7ff fdfb 	bl	21cb0 <bota_check_image>
        if (rc != 0) {
   220ba:	bb20      	cbnz	r0, 22106 <bota_upload+0x3a6>
        BOTA_DEBUG("#### Hash ok, set perm? %d \n",
   220bc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2211c <bota_upload+0x3bc>
   220c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   220c4:	4f17      	ldr	r7, [pc, #92]	; (22124 <bota_upload+0x3c4>)
   220c6:	f003 0301 	and.w	r3, r3, #1
   220ca:	9300      	str	r3, [sp, #0]
   220cc:	4b16      	ldr	r3, [pc, #88]	; (22128 <bota_upload+0x3c8>)
   220ce:	2200      	movs	r2, #0
   220d0:	2146      	movs	r1, #70	; 0x46
   220d2:	4638      	mov	r0, r7
   220d4:	f7f2 f99e 	bl	14414 <log_printf>
        rc = boot_set_pending((bota_state.upload.flags&BOTA_FLAGS_SET_PERMANENT)?1:0);
   220d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
   220dc:	f000 0001 	and.w	r0, r0, #1
   220e0:	f7f5 fa16 	bl	17510 <boot_set_pending>
        BOTA_INFO("#### Will boot into new image at next boot\n", rc);
   220e4:	9000      	str	r0, [sp, #0]
   220e6:	4b11      	ldr	r3, [pc, #68]	; (2212c <bota_upload+0x3cc>)
   220e8:	2201      	movs	r2, #1
   220ea:	2146      	movs	r1, #70	; 0x46
   220ec:	4638      	mov	r0, r7
   220ee:	f7f2 f991 	bl	14414 <log_printf>
        os_time_delay(OS_TICKS_PER_SEC);
   220f2:	2080      	movs	r0, #128	; 0x80
   220f4:	f7e8 f9c2 	bl	a47c <os_time_delay>
        if (_new_image_cb) {
   220f8:	4b0d      	ldr	r3, [pc, #52]	; (22130 <bota_upload+0x3d0>)
   220fa:	681b      	ldr	r3, [r3, #0]
   220fc:	2b00      	cmp	r3, #0
   220fe:	f43f af76 	beq.w	21fee <bota_upload+0x28e>
            _new_image_cb();
   22102:	4798      	blx	r3
   22104:	e773      	b.n	21fee <bota_upload+0x28e>
            BOTA_DEBUG("#### Hash / image failed\n");
   22106:	4b0b      	ldr	r3, [pc, #44]	; (22134 <bota_upload+0x3d4>)
   22108:	2200      	movs	r2, #0
   2210a:	2146      	movs	r1, #70	; 0x46
   2210c:	4805      	ldr	r0, [pc, #20]	; (22124 <bota_upload+0x3c4>)
   2210e:	f7f2 f981 	bl	14414 <log_printf>
            goto out;
   22112:	e76c      	b.n	21fee <bota_upload+0x28e>
            rc = MGMT_ERR_EINVAL;
   22114:	2603      	movs	r6, #3
   22116:	e6d4      	b.n	21ec2 <bota_upload+0x162>
            rc = MGMT_ERR_EINVAL;
   22118:	2603      	movs	r6, #3
   2211a:	e6d2      	b.n	21ec2 <bota_upload+0x162>
   2211c:	200050a8 	.word	0x200050a8
   22120:	00027ab8 	.word	0x00027ab8
   22124:	20005020 	.word	0x20005020
   22128:	00027af4 	.word	0x00027af4
   2212c:	00027b14 	.word	0x00027b14
   22130:	200050a0 	.word	0x200050a0
   22134:	00027ad8 	.word	0x00027ad8

00022138 <bcast_ota_set_new_fw_cb>:


void
bcast_ota_set_new_fw_cb(new_fw_cb *cb)
{
    _new_image_cb = cb;
   22138:	4b01      	ldr	r3, [pc, #4]	; (22140 <bcast_ota_set_new_fw_cb+0x8>)
   2213a:	6018      	str	r0, [r3, #0]
}
   2213c:	4770      	bx	lr
   2213e:	bf00      	nop
   22140:	200050a0 	.word	0x200050a0

00022144 <bcast_ota_nmgr_module_init>:

void
bcast_ota_nmgr_module_init(void)
{
   22144:	b510      	push	{r4, lr}
   22146:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   22148:	4b0c      	ldr	r3, [pc, #48]	; (2217c <bcast_ota_nmgr_module_init+0x38>)
   2214a:	781b      	ldrb	r3, [r3, #0]
   2214c:	b183      	cbz	r3, 22170 <bcast_ota_nmgr_module_init+0x2c>

    rc = mgmt_group_register(&bota_nmgr_group);
   2214e:	480c      	ldr	r0, [pc, #48]	; (22180 <bcast_ota_nmgr_module_init+0x3c>)
   22150:	f7ef ff54 	bl	11ffc <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   22154:	b138      	cbz	r0, 22166 <bcast_ota_nmgr_module_init+0x22>
   22156:	2000      	movs	r0, #0
   22158:	9000      	str	r0, [sp, #0]
   2215a:	4b0a      	ldr	r3, [pc, #40]	; (22184 <bcast_ota_nmgr_module_init+0x40>)
   2215c:	681c      	ldr	r4, [r3, #0]
   2215e:	4603      	mov	r3, r0
   22160:	4602      	mov	r2, r0
   22162:	4601      	mov	r1, r0
   22164:	47a0      	blx	r4

#if MYNEWT_VAL(BCAST_OTA_REBOOT_ON_NEW_IMAGE)
    bcast_ota_set_new_fw_cb(hal_system_reset);
   22166:	4808      	ldr	r0, [pc, #32]	; (22188 <bcast_ota_nmgr_module_init+0x44>)
   22168:	f7ff ffe6 	bl	22138 <bcast_ota_set_new_fw_cb>
#endif
}
   2216c:	b002      	add	sp, #8
   2216e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   22170:	461a      	mov	r2, r3
   22172:	4619      	mov	r1, r3
   22174:	4618      	mov	r0, r3
   22176:	f7e7 f825 	bl	91c4 <__assert_func>
   2217a:	bf00      	nop
   2217c:	20004bb0 	.word	0x20004bb0
   22180:	20000f48 	.word	0x20000f48
   22184:	20000768 	.word	0x20000768
   22188:	000081d1 	.word	0x000081d1

0002218c <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   2218c:	b510      	push	{r4, lr}
   2218e:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   22190:	2200      	movs	r2, #0
   22192:	a903      	add	r1, sp, #12
   22194:	2011      	movs	r0, #17
   22196:	f7f1 ff5f 	bl	14058 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2219a:	b138      	cbz	r0, 221ac <config_init_fcb+0x20>
   2219c:	2000      	movs	r0, #0
   2219e:	9000      	str	r0, [sp, #0]
   221a0:	4b26      	ldr	r3, [pc, #152]	; (2223c <config_init_fcb+0xb0>)
   221a2:	681c      	ldr	r4, [r3, #0]
   221a4:	4603      	mov	r3, r0
   221a6:	4602      	mov	r2, r0
   221a8:	4601      	mov	r1, r0
   221aa:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   221ac:	9b03      	ldr	r3, [sp, #12]
   221ae:	2b09      	cmp	r3, #9
   221b0:	d907      	bls.n	221c2 <config_init_fcb+0x36>
   221b2:	2000      	movs	r0, #0
   221b4:	9000      	str	r0, [sp, #0]
   221b6:	4b21      	ldr	r3, [pc, #132]	; (2223c <config_init_fcb+0xb0>)
   221b8:	681c      	ldr	r4, [r3, #0]
   221ba:	4603      	mov	r3, r0
   221bc:	4602      	mov	r2, r0
   221be:	4601      	mov	r1, r0
   221c0:	47a0      	blx	r4
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   221c2:	4a1f      	ldr	r2, [pc, #124]	; (22240 <config_init_fcb+0xb4>)
   221c4:	a903      	add	r1, sp, #12
   221c6:	2011      	movs	r0, #17
   221c8:	f7f1 ff46 	bl	14058 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   221cc:	481d      	ldr	r0, [pc, #116]	; (22244 <config_init_fcb+0xb8>)
   221ce:	9b03      	ldr	r3, [sp, #12]
   221d0:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   221d2:	f000 f933 	bl	2243c <conf_fcb_src>
    if (rc) {
   221d6:	4603      	mov	r3, r0
   221d8:	b1c0      	cbz	r0, 2220c <config_init_fcb+0x80>
        for (cnt = 0;
   221da:	2300      	movs	r3, #0
   221dc:	9303      	str	r3, [sp, #12]
   221de:	e00c      	b.n	221fa <config_init_fcb+0x6e>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   221e0:	4817      	ldr	r0, [pc, #92]	; (22240 <config_init_fcb+0xb4>)
   221e2:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   221e6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   221ea:	689a      	ldr	r2, [r3, #8]
   221ec:	2100      	movs	r1, #0
   221ee:	4618      	mov	r0, r3
   221f0:	f7f1 ff98 	bl	14124 <flash_area_erase>
             cnt++) {
   221f4:	9b03      	ldr	r3, [sp, #12]
   221f6:	3301      	adds	r3, #1
   221f8:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   221fa:	4b12      	ldr	r3, [pc, #72]	; (22244 <config_init_fcb+0xb8>)
   221fc:	7b5a      	ldrb	r2, [r3, #13]
   221fe:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   22200:	429a      	cmp	r2, r3
   22202:	dced      	bgt.n	221e0 <config_init_fcb+0x54>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   22204:	480f      	ldr	r0, [pc, #60]	; (22244 <config_init_fcb+0xb8>)
   22206:	f000 f919 	bl	2243c <conf_fcb_src>
   2220a:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   2220c:	b13b      	cbz	r3, 2221e <config_init_fcb+0x92>
   2220e:	2000      	movs	r0, #0
   22210:	9000      	str	r0, [sp, #0]
   22212:	4b0a      	ldr	r3, [pc, #40]	; (2223c <config_init_fcb+0xb0>)
   22214:	681c      	ldr	r4, [r3, #0]
   22216:	4603      	mov	r3, r0
   22218:	4602      	mov	r2, r0
   2221a:	4601      	mov	r1, r0
   2221c:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   2221e:	4809      	ldr	r0, [pc, #36]	; (22244 <config_init_fcb+0xb8>)
   22220:	f000 f938 	bl	22494 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   22224:	b138      	cbz	r0, 22236 <config_init_fcb+0xaa>
   22226:	2000      	movs	r0, #0
   22228:	9000      	str	r0, [sp, #0]
   2222a:	4b04      	ldr	r3, [pc, #16]	; (2223c <config_init_fcb+0xb0>)
   2222c:	681c      	ldr	r4, [r3, #0]
   2222e:	4603      	mov	r3, r0
   22230:	4602      	mov	r2, r0
   22232:	4601      	mov	r1, r0
   22234:	47a0      	blx	r4
}
   22236:	b004      	add	sp, #16
   22238:	bd10      	pop	{r4, pc}
   2223a:	bf00      	nop
   2223c:	20000768 	.word	0x20000768
   22240:	200050c0 	.word	0x200050c0
   22244:	20000f54 	.word	0x20000f54

00022248 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   22248:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2224a:	4b06      	ldr	r3, [pc, #24]	; (22264 <config_pkg_init+0x1c>)
   2224c:	781b      	ldrb	r3, [r3, #0]
   2224e:	b123      	cbz	r3, 2225a <config_pkg_init+0x12>

    conf_init();
   22250:	f7f0 fda2 	bl	12d98 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   22254:	f7ff ff9a 	bl	2218c <config_init_fcb>
#endif
#endif
}
   22258:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2225a:	461a      	mov	r2, r3
   2225c:	4619      	mov	r1, r3
   2225e:	4618      	mov	r0, r3
   22260:	f7e6 ffb0 	bl	91c4 <__assert_func>
   22264:	20004bb0 	.word	0x20004bb0

00022268 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   22268:	4770      	bx	lr
	...

0002226c <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   2226c:	b500      	push	{lr}
   2226e:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   22270:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   22272:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   22274:	466b      	mov	r3, sp
   22276:	4a05      	ldr	r2, [pc, #20]	; (2228c <conf_fcb_load+0x20>)
   22278:	2100      	movs	r1, #0
   2227a:	3008      	adds	r0, #8
   2227c:	f7f6 fff6 	bl	1926c <fcb_walk>
    if (rc) {
   22280:	b910      	cbnz	r0, 22288 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   22282:	b003      	add	sp, #12
   22284:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   22288:	2002      	movs	r0, #2
   2228a:	e7fa      	b.n	22282 <conf_fcb_load+0x16>
   2228c:	00022291 	.word	0x00022291

00022290 <conf_fcb_load_cb>:
{
   22290:	b530      	push	{r4, r5, lr}
   22292:	b0db      	sub	sp, #364	; 0x16c
   22294:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   22296:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   22298:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   2229c:	d301      	bcc.n	222a2 <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   2229e:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   222a2:	4623      	mov	r3, r4
   222a4:	aa02      	add	r2, sp, #8
   222a6:	6881      	ldr	r1, [r0, #8]
   222a8:	6800      	ldr	r0, [r0, #0]
   222aa:	f7f1 ff13 	bl	140d4 <flash_area_read>
    if (rc) {
   222ae:	b110      	cbz	r0, 222b6 <conf_fcb_load_cb+0x26>
}
   222b0:	2000      	movs	r0, #0
   222b2:	b05b      	add	sp, #364	; 0x16c
   222b4:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   222b6:	a802      	add	r0, sp, #8
   222b8:	2300      	movs	r3, #0
   222ba:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   222bc:	466a      	mov	r2, sp
   222be:	a901      	add	r1, sp, #4
   222c0:	f000 f910 	bl	224e4 <conf_line_parse>
    if (rc) {
   222c4:	2800      	cmp	r0, #0
   222c6:	d1f3      	bne.n	222b0 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   222c8:	682b      	ldr	r3, [r5, #0]
   222ca:	686a      	ldr	r2, [r5, #4]
   222cc:	9900      	ldr	r1, [sp, #0]
   222ce:	9801      	ldr	r0, [sp, #4]
   222d0:	4798      	blx	r3
    return 0;
   222d2:	e7ed      	b.n	222b0 <conf_fcb_load_cb+0x20>

000222d4 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   222d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222d6:	4604      	mov	r4, r0
   222d8:	460d      	mov	r5, r1
   222da:	4617      	mov	r7, r2
   222dc:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   222de:	8983      	ldrh	r3, [r0, #12]
   222e0:	460a      	mov	r2, r1
   222e2:	6881      	ldr	r1, [r0, #8]
   222e4:	6800      	ldr	r0, [r0, #0]
   222e6:	f7f1 fef5 	bl	140d4 <flash_area_read>
    if (rc) {
   222ea:	b100      	cbz	r0, 222ee <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   222ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   222ee:	89a3      	ldrh	r3, [r4, #12]
   222f0:	2200      	movs	r2, #0
   222f2:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   222f4:	4632      	mov	r2, r6
   222f6:	4639      	mov	r1, r7
   222f8:	4628      	mov	r0, r5
   222fa:	f000 f8f3 	bl	224e4 <conf_line_parse>
    return rc;
   222fe:	e7f5      	b.n	222ec <conf_fcb_var_read+0x18>

00022300 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   22300:	b570      	push	{r4, r5, r6, lr}
   22302:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
   22306:	4604      	mov	r4, r0
   22308:	460d      	mov	r5, r1
   2230a:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   2230c:	f7f6 fda1 	bl	18e52 <fcb_append_to_scratch>
    if (rc) {
   22310:	2800      	cmp	r0, #0
   22312:	d15e      	bne.n	223d2 <conf_fcb_compress_internal+0xd2>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   22314:	2300      	movs	r3, #0
   22316:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   22318:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   2231a:	a908      	add	r1, sp, #32
   2231c:	4620      	mov	r0, r4
   2231e:	f7f6 ff4f 	bl	191c0 <fcb_getnext>
   22322:	2800      	cmp	r0, #0
   22324:	d152      	bne.n	223cc <conf_fcb_compress_internal+0xcc>
        if (loc1.fe_area != fcb->f_oldest) {
   22326:	9a08      	ldr	r2, [sp, #32]
   22328:	69a3      	ldr	r3, [r4, #24]
   2232a:	429a      	cmp	r2, r3
   2232c:	d14e      	bne.n	223cc <conf_fcb_compress_internal+0xcc>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   2232e:	ab02      	add	r3, sp, #8
   22330:	aa03      	add	r2, sp, #12
   22332:	a964      	add	r1, sp, #400	; 0x190
   22334:	a808      	add	r0, sp, #32
   22336:	f7ff ffcd 	bl	222d4 <conf_fcb_var_read>
        if (rc) {
   2233a:	2800      	cmp	r0, #0
   2233c:	d1ed      	bne.n	2231a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   2233e:	9b02      	ldr	r3, [sp, #8]
   22340:	2b00      	cmp	r3, #0
   22342:	d0ea      	beq.n	2231a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   22344:	f10d 0c10 	add.w	ip, sp, #16
   22348:	ab08      	add	r3, sp, #32
   2234a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2234c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   22350:	a904      	add	r1, sp, #16
   22352:	4620      	mov	r0, r4
   22354:	f7f6 ff34 	bl	191c0 <fcb_getnext>
   22358:	b978      	cbnz	r0, 2237a <conf_fcb_compress_internal+0x7a>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   2235a:	466b      	mov	r3, sp
   2235c:	aa01      	add	r2, sp, #4
   2235e:	a90c      	add	r1, sp, #48	; 0x30
   22360:	a804      	add	r0, sp, #16
   22362:	f7ff ffb7 	bl	222d4 <conf_fcb_var_read>
            if (rc) {
   22366:	2800      	cmp	r0, #0
   22368:	d1f2      	bne.n	22350 <conf_fcb_compress_internal+0x50>
                continue;
            }
            if (!strcmp(name1, name2)) {
   2236a:	9901      	ldr	r1, [sp, #4]
   2236c:	9803      	ldr	r0, [sp, #12]
   2236e:	f7ee f9bf 	bl	106f0 <strcmp>
   22372:	4603      	mov	r3, r0
   22374:	2800      	cmp	r0, #0
   22376:	d1eb      	bne.n	22350 <conf_fcb_compress_internal+0x50>
   22378:	e000      	b.n	2237c <conf_fcb_compress_internal+0x7c>
        copy = 1;
   2237a:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   2237c:	2b00      	cmp	r3, #0
   2237e:	d0cc      	beq.n	2231a <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   22380:	b12d      	cbz	r5, 2238e <conf_fcb_compress_internal+0x8e>
            if (copy_or_not(name1, val1, cn_arg)) {
   22382:	4632      	mov	r2, r6
   22384:	9902      	ldr	r1, [sp, #8]
   22386:	9803      	ldr	r0, [sp, #12]
   22388:	47a8      	blx	r5
   2238a:	2800      	cmp	r0, #0
   2238c:	d1c5      	bne.n	2231a <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   2238e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   22392:	aa64      	add	r2, sp, #400	; 0x190
   22394:	990a      	ldr	r1, [sp, #40]	; 0x28
   22396:	9808      	ldr	r0, [sp, #32]
   22398:	f7f1 fe9c 	bl	140d4 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   2239c:	2800      	cmp	r0, #0
   2239e:	d1bc      	bne.n	2231a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   223a0:	aa04      	add	r2, sp, #16
   223a2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   223a6:	4620      	mov	r0, r4
   223a8:	f7f6 fd6c 	bl	18e84 <fcb_append>
        if (rc) {
   223ac:	2800      	cmp	r0, #0
   223ae:	d1b4      	bne.n	2231a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   223b0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   223b4:	aa64      	add	r2, sp, #400	; 0x190
   223b6:	9906      	ldr	r1, [sp, #24]
   223b8:	9804      	ldr	r0, [sp, #16]
   223ba:	f7f1 fe9f 	bl	140fc <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   223be:	2800      	cmp	r0, #0
   223c0:	d1ab      	bne.n	2231a <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   223c2:	a904      	add	r1, sp, #16
   223c4:	4620      	mov	r0, r4
   223c6:	f7f6 fdda 	bl	18f7e <fcb_append_finish>
   223ca:	e7a6      	b.n	2231a <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   223cc:	4620      	mov	r0, r4
   223ce:	f7f6 ff11 	bl	191f4 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   223d2:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   223d6:	bd70      	pop	{r4, r5, r6, pc}

000223d8 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   223d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223dc:	b084      	sub	sp, #16
   223de:	4606      	mov	r6, r0
   223e0:	4688      	mov	r8, r1
   223e2:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   223e4:	2500      	movs	r5, #0
   223e6:	2d09      	cmp	r5, #9
   223e8:	dc11      	bgt.n	2240e <conf_fcb_append+0x36>
        rc = fcb_append(fcb, len, &loc);
   223ea:	466a      	mov	r2, sp
   223ec:	b2b9      	uxth	r1, r7
   223ee:	4630      	mov	r0, r6
   223f0:	f7f6 fd48 	bl	18e84 <fcb_append>
   223f4:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   223f6:	f110 0f04 	cmn.w	r0, #4
   223fa:	d108      	bne.n	2240e <conf_fcb_append+0x36>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
   223fc:	79b0      	ldrb	r0, [r6, #6]
   223fe:	b1b8      	cbz	r0, 22430 <conf_fcb_append+0x58>
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   22400:	2200      	movs	r2, #0
   22402:	4611      	mov	r1, r2
   22404:	4630      	mov	r0, r6
   22406:	f7ff ff7b 	bl	22300 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   2240a:	3501      	adds	r5, #1
   2240c:	e7eb      	b.n	223e6 <conf_fcb_append+0xe>
    }
    if (rc) {
   2240e:	b98c      	cbnz	r4, 22434 <conf_fcb_append+0x5c>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   22410:	463b      	mov	r3, r7
   22412:	4642      	mov	r2, r8
   22414:	9902      	ldr	r1, [sp, #8]
   22416:	9800      	ldr	r0, [sp, #0]
   22418:	f7f1 fe70 	bl	140fc <flash_area_write>
    if (rc) {
   2241c:	4604      	mov	r4, r0
   2241e:	b958      	cbnz	r0, 22438 <conf_fcb_append+0x60>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   22420:	4669      	mov	r1, sp
   22422:	4630      	mov	r0, r6
   22424:	f7f6 fdab 	bl	18f7e <fcb_append_finish>
    return OS_OK;
}
   22428:	4620      	mov	r0, r4
   2242a:	b004      	add	sp, #16
   2242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return OS_ENOMEM;
   22430:	2401      	movs	r4, #1
   22432:	e7f9      	b.n	22428 <conf_fcb_append+0x50>
        return OS_EINVAL;
   22434:	2402      	movs	r4, #2
   22436:	e7f7      	b.n	22428 <conf_fcb_append+0x50>
        return OS_EINVAL;
   22438:	2402      	movs	r4, #2
   2243a:	e7f5      	b.n	22428 <conf_fcb_append+0x50>

0002243c <conf_fcb_src>:
{
   2243c:	b570      	push	{r4, r5, r6, lr}
   2243e:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   22440:	2301      	movs	r3, #1
   22442:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   22444:	7b43      	ldrb	r3, [r0, #13]
   22446:	2b01      	cmp	r3, #1
   22448:	d902      	bls.n	22450 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   2244a:	2301      	movs	r3, #1
   2244c:	7383      	strb	r3, [r0, #14]
   2244e:	e007      	b.n	22460 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   22450:	2300      	movs	r3, #0
   22452:	7383      	strb	r3, [r0, #14]
   22454:	e004      	b.n	22460 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   22456:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22458:	6882      	ldr	r2, [r0, #8]
   2245a:	2100      	movs	r1, #0
   2245c:	f7f1 fe62 	bl	14124 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   22460:	f104 0508 	add.w	r5, r4, #8
   22464:	4628      	mov	r0, r5
   22466:	f7f6 fc3b 	bl	18ce0 <fcb_init>
        if (rc) {
   2246a:	4606      	mov	r6, r0
   2246c:	b968      	cbnz	r0, 2248a <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   2246e:	7ba3      	ldrb	r3, [r4, #14]
   22470:	b123      	cbz	r3, 2247c <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   22472:	4628      	mov	r0, r5
   22474:	f7f6 fbb1 	bl	18bda <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   22478:	2800      	cmp	r0, #0
   2247a:	ddec      	ble.n	22456 <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   2247c:	4b04      	ldr	r3, [pc, #16]	; (22490 <conf_fcb_src+0x54>)
   2247e:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   22480:	4620      	mov	r0, r4
   22482:	f7f0 fec9 	bl	13218 <conf_src_register>
}
   22486:	4630      	mov	r0, r6
   22488:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   2248a:	2603      	movs	r6, #3
   2248c:	e7fb      	b.n	22486 <conf_fcb_src+0x4a>
   2248e:	bf00      	nop
   22490:	20000f8c 	.word	0x20000f8c

00022494 <conf_fcb_dst>:
{
   22494:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   22496:	4b03      	ldr	r3, [pc, #12]	; (224a4 <conf_fcb_dst+0x10>)
   22498:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   2249a:	f7f0 fed1 	bl	13240 <conf_dst_register>
}
   2249e:	2000      	movs	r0, #0
   224a0:	bd08      	pop	{r3, pc}
   224a2:	bf00      	nop
   224a4:	20000f8c 	.word	0x20000f8c

000224a8 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   224a8:	b199      	cbz	r1, 224d2 <conf_fcb_kv_save+0x2a>
{
   224aa:	b510      	push	{r4, lr}
   224ac:	b0d8      	sub	sp, #352	; 0x160
   224ae:	4604      	mov	r4, r0
   224b0:	4613      	mov	r3, r2
   224b2:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   224b4:	f44f 71b0 	mov.w	r1, #352	; 0x160
   224b8:	4668      	mov	r0, sp
   224ba:	f000 f875 	bl	225a8 <conf_line_make>
   224be:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   224c0:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   224c4:	d807      	bhi.n	224d6 <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   224c6:	4669      	mov	r1, sp
   224c8:	4620      	mov	r0, r4
   224ca:	f7ff ff85 	bl	223d8 <conf_fcb_append>
}
   224ce:	b058      	add	sp, #352	; 0x160
   224d0:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   224d2:	2003      	movs	r0, #3
}
   224d4:	4770      	bx	lr
        return OS_INVALID_PARM;
   224d6:	2003      	movs	r0, #3
   224d8:	e7f9      	b.n	224ce <conf_fcb_kv_save+0x26>

000224da <conf_fcb_save>:
{
   224da:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   224dc:	3008      	adds	r0, #8
   224de:	f7ff ffe3 	bl	224a8 <conf_fcb_kv_save>
}
   224e2:	bd08      	pop	{r3, pc}

000224e4 <conf_line_parse>:
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   224e4:	2300      	movs	r3, #0
   224e6:	6013      	str	r3, [r2, #0]
    } state = FIND_NAME;
   224e8:	469c      	mov	ip, r3
    for (cp = buf; *cp != '\0'; cp++) {
   224ea:	7803      	ldrb	r3, [r0, #0]
   224ec:	2b00      	cmp	r3, #0
   224ee:	d04f      	beq.n	22590 <conf_line_parse+0xac>
{
   224f0:	b500      	push	{lr}
   224f2:	e01a      	b.n	2252a <conf_line_parse+0x46>
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   224f4:	2b20      	cmp	r3, #32
   224f6:	d015      	beq.n	22524 <conf_line_parse+0x40>
   224f8:	2b0a      	cmp	r3, #10
   224fa:	d013      	beq.n	22524 <conf_line_parse+0x40>
   224fc:	2b09      	cmp	r3, #9
   224fe:	d011      	beq.n	22524 <conf_line_parse+0x40>
   22500:	2b0d      	cmp	r3, #13
   22502:	d00f      	beq.n	22524 <conf_line_parse+0x40>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   22504:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   22506:	f04f 0c01 	mov.w	ip, #1
   2250a:	e00b      	b.n	22524 <conf_line_parse+0x40>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   2250c:	2b3d      	cmp	r3, #61	; 0x3d
   2250e:	d01b      	beq.n	22548 <conf_line_parse+0x64>
   22510:	2b20      	cmp	r3, #32
   22512:	d005      	beq.n	22520 <conf_line_parse+0x3c>
   22514:	2b0a      	cmp	r3, #10
   22516:	d003      	beq.n	22520 <conf_line_parse+0x3c>
   22518:	2b09      	cmp	r3, #9
   2251a:	d001      	beq.n	22520 <conf_line_parse+0x3c>
   2251c:	2b0d      	cmp	r3, #13
   2251e:	d101      	bne.n	22524 <conf_line_parse+0x40>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   22520:	2300      	movs	r3, #0
   22522:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   22524:	3001      	adds	r0, #1
   22526:	7803      	ldrb	r3, [r0, #0]
   22528:	b32b      	cbz	r3, 22576 <conf_line_parse+0x92>
        switch (state) {
   2252a:	f1bc 0f03 	cmp.w	ip, #3
   2252e:	d8f9      	bhi.n	22524 <conf_line_parse+0x40>
   22530:	f20f 0e04 	addw	lr, pc, #4
   22534:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   22538:	000224f5 	.word	0x000224f5
   2253c:	0002250d 	.word	0x0002250d
   22540:	00022553 	.word	0x00022553
   22544:	0002256b 	.word	0x0002256b
                *cp = '\0';
   22548:	2300      	movs	r3, #0
   2254a:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   2254c:	f04f 0c02 	mov.w	ip, #2
   22550:	e7e8      	b.n	22524 <conf_line_parse+0x40>
   22552:	2b20      	cmp	r3, #32
   22554:	d0e6      	beq.n	22524 <conf_line_parse+0x40>
   22556:	2b0a      	cmp	r3, #10
   22558:	d0e4      	beq.n	22524 <conf_line_parse+0x40>
   2255a:	2b09      	cmp	r3, #9
   2255c:	d0e2      	beq.n	22524 <conf_line_parse+0x40>
   2255e:	2b0d      	cmp	r3, #13
   22560:	d0e0      	beq.n	22524 <conf_line_parse+0x40>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   22562:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   22564:	f04f 0c03 	mov.w	ip, #3
   22568:	e7dc      	b.n	22524 <conf_line_parse+0x40>
	return (__c >= 0x20 && __c <= 0x7e);
   2256a:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   2256c:	2b5e      	cmp	r3, #94	; 0x5e
   2256e:	d9d9      	bls.n	22524 <conf_line_parse+0x40>
                *cp = '\0';
   22570:	2300      	movs	r3, #0
   22572:	7003      	strb	r3, [r0, #0]
   22574:	e7d6      	b.n	22524 <conf_line_parse+0x40>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   22576:	f1ac 0c02 	sub.w	ip, ip, #2
   2257a:	fa5f fc8c 	uxtb.w	ip, ip
   2257e:	f1bc 0f01 	cmp.w	ip, #1
   22582:	d802      	bhi.n	2258a <conf_line_parse+0xa6>
        return 0;
   22584:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   22586:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   2258a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2258e:	e7fa      	b.n	22586 <conf_line_parse+0xa2>
    if (state == FIND_VAL_END || state == FIND_VAL) {
   22590:	f1ac 0c02 	sub.w	ip, ip, #2
   22594:	fa5f fc8c 	uxtb.w	ip, ip
   22598:	f1bc 0f01 	cmp.w	ip, #1
   2259c:	d801      	bhi.n	225a2 <conf_line_parse+0xbe>
        return 0;
   2259e:	2000      	movs	r0, #0
   225a0:	4770      	bx	lr
        return -1;
   225a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   225a6:	4770      	bx	lr

000225a8 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   225a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   225ac:	4606      	mov	r6, r0
   225ae:	4689      	mov	r9, r1
   225b0:	4690      	mov	r8, r2
   225b2:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   225b4:	4610      	mov	r0, r2
   225b6:	f7ee f8a7 	bl	10708 <strlen>
   225ba:	4605      	mov	r5, r0
    if (value) {
   225bc:	b1e7      	cbz	r7, 225f8 <conf_line_make+0x50>
        vlen = strlen(value);
   225be:	4638      	mov	r0, r7
   225c0:	f7ee f8a2 	bl	10708 <strlen>
   225c4:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   225c6:	1963      	adds	r3, r4, r5
   225c8:	3301      	adds	r3, #1
   225ca:	454b      	cmp	r3, r9
   225cc:	da16      	bge.n	225fc <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   225ce:	462a      	mov	r2, r5
   225d0:	4641      	mov	r1, r8
   225d2:	4630      	mov	r0, r6
   225d4:	f7ee f854 	bl	10680 <memcpy>
    off = nlen;
    dst[off++] = '=';
   225d8:	f105 0801 	add.w	r8, r5, #1
   225dc:	233d      	movs	r3, #61	; 0x3d
   225de:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   225e0:	4622      	mov	r2, r4
   225e2:	4639      	mov	r1, r7
   225e4:	eb06 0008 	add.w	r0, r6, r8
   225e8:	f7ee f84a 	bl	10680 <memcpy>
    off += vlen;
   225ec:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   225f0:	2300      	movs	r3, #0
   225f2:	5433      	strb	r3, [r6, r0]

    return off;
}
   225f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   225f8:	2400      	movs	r4, #0
   225fa:	e7e4      	b.n	225c6 <conf_line_make+0x1e>
        return -1;
   225fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22600:	e7f8      	b.n	225f4 <conf_line_make+0x4c>
	...

00022604 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   22604:	b410      	push	{r4}
   22606:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   22608:	4b08      	ldr	r3, [pc, #32]	; (2262c <modlog_find_by_module+0x28>)
   2260a:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   2260c:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   2260e:	e001      	b.n	22614 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   22610:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   22612:	6800      	ldr	r0, [r0, #0]
   22614:	b120      	cbz	r0, 22620 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   22616:	7a43      	ldrb	r3, [r0, #9]
   22618:	4293      	cmp	r3, r2
   2261a:	d001      	beq.n	22620 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   2261c:	d9f8      	bls.n	22610 <modlog_find_by_module+0xc>
            cur = NULL;
   2261e:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   22620:	b101      	cbz	r1, 22624 <modlog_find_by_module+0x20>
        *out_prev = prev;
   22622:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   22624:	f85d 4b04 	ldr.w	r4, [sp], #4
   22628:	4770      	bx	lr
   2262a:	bf00      	nop
   2262c:	2000520c 	.word	0x2000520c

00022630 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   22630:	b510      	push	{r4, lr}
   22632:	b082      	sub	sp, #8
   22634:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   22636:	a901      	add	r1, sp, #4
   22638:	7a40      	ldrb	r0, [r0, #9]
   2263a:	f7ff ffe3 	bl	22604 <modlog_find_by_module>
    if (prev == NULL) {
   2263e:	9b01      	ldr	r3, [sp, #4]
   22640:	b143      	cbz	r3, 22654 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   22642:	681b      	ldr	r3, [r3, #0]
   22644:	6023      	str	r3, [r4, #0]
   22646:	9b01      	ldr	r3, [sp, #4]
   22648:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   2264a:	7a63      	ldrb	r3, [r4, #9]
   2264c:	2bff      	cmp	r3, #255	; 0xff
   2264e:	d006      	beq.n	2265e <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   22650:	b002      	add	sp, #8
   22652:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   22654:	4b03      	ldr	r3, [pc, #12]	; (22664 <modlog_insert+0x34>)
   22656:	681a      	ldr	r2, [r3, #0]
   22658:	6022      	str	r2, [r4, #0]
   2265a:	601c      	str	r4, [r3, #0]
   2265c:	e7f5      	b.n	2264a <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   2265e:	4b02      	ldr	r3, [pc, #8]	; (22668 <modlog_insert+0x38>)
   22660:	601c      	str	r4, [r3, #0]
}
   22662:	e7f5      	b.n	22650 <modlog_insert+0x20>
   22664:	2000520c 	.word	0x2000520c
   22668:	2000512c 	.word	0x2000512c

0002266c <modlog_alloc>:
{
   2266c:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   2266e:	4805      	ldr	r0, [pc, #20]	; (22684 <modlog_alloc+0x18>)
   22670:	f7e7 f9e2 	bl	9a38 <os_memblock_get>
    if (mm != NULL) {
   22674:	4603      	mov	r3, r0
   22676:	b118      	cbz	r0, 22680 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   22678:	2200      	movs	r2, #0
   2267a:	6002      	str	r2, [r0, #0]
   2267c:	6042      	str	r2, [r0, #4]
   2267e:	6082      	str	r2, [r0, #8]
}
   22680:	4618      	mov	r0, r3
   22682:	bd08      	pop	{r3, pc}
   22684:	200051f0 	.word	0x200051f0

00022688 <modlog_infer_handle>:
{
   22688:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   2268a:	4a0f      	ldr	r2, [pc, #60]	; (226c8 <modlog_infer_handle+0x40>)
   2268c:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   2268e:	480f      	ldr	r0, [pc, #60]	; (226cc <modlog_infer_handle+0x44>)
   22690:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   22694:	2abf      	cmp	r2, #191	; 0xbf
   22696:	d80b      	bhi.n	226b0 <modlog_infer_handle+0x28>
   22698:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   2269a:	4b0c      	ldr	r3, [pc, #48]	; (226cc <modlog_infer_handle+0x44>)
   2269c:	fba3 1302 	umull	r1, r3, r3, r2
   226a0:	08db      	lsrs	r3, r3, #3
   226a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   226a6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   226aa:	d107      	bne.n	226bc <modlog_infer_handle+0x34>
}
   226ac:	b2c0      	uxtb	r0, r0
   226ae:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   226b0:	2300      	movs	r3, #0
   226b2:	461a      	mov	r2, r3
   226b4:	4619      	mov	r1, r3
   226b6:	4618      	mov	r0, r3
   226b8:	f7e6 fd84 	bl	91c4 <__assert_func>
    assert(off % elem_sz == 0);
   226bc:	2300      	movs	r3, #0
   226be:	461a      	mov	r2, r3
   226c0:	4619      	mov	r1, r3
   226c2:	4618      	mov	r0, r3
   226c4:	f7e6 fd7e 	bl	91c4 <__assert_func>
   226c8:	20005130 	.word	0x20005130
   226cc:	aaaaaaab 	.word	0xaaaaaaab

000226d0 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   226d0:	b1c9      	cbz	r1, 22706 <modlog_register_no_lock+0x36>
{
   226d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226d6:	4607      	mov	r7, r0
   226d8:	4616      	mov	r6, r2
   226da:	461d      	mov	r5, r3
   226dc:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   226de:	f7ff ffc5 	bl	2266c <modlog_alloc>
    if (mm == NULL) {
   226e2:	4604      	mov	r4, r0
   226e4:	b190      	cbz	r0, 2270c <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   226e6:	f7ff ffcf 	bl	22688 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   226ea:	f8c4 8004 	str.w	r8, [r4, #4]
   226ee:	7220      	strb	r0, [r4, #8]
   226f0:	7267      	strb	r7, [r4, #9]
   226f2:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   226f4:	4620      	mov	r0, r4
   226f6:	f7ff ff9b 	bl	22630 <modlog_insert>

    if (out_handle != NULL) {
   226fa:	b155      	cbz	r5, 22712 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   226fc:	7a23      	ldrb	r3, [r4, #8]
   226fe:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   22700:	2000      	movs	r0, #0
}
   22702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   22706:	f06f 0001 	mvn.w	r0, #1
}
   2270a:	4770      	bx	lr
        return SYS_ENOMEM;
   2270c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22710:	e7f7      	b.n	22702 <modlog_register_no_lock+0x32>
    return 0;
   22712:	2000      	movs	r0, #0
   22714:	e7f5      	b.n	22702 <modlog_register_no_lock+0x32>

00022716 <modlog_append_one>:
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    int rc;

    if (level >= mm->desc.min_level) {
   22716:	f890 c00a 	ldrb.w	ip, [r0, #10]
   2271a:	4594      	cmp	ip, r2
   2271c:	d901      	bls.n	22722 <modlog_append_one+0xc>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   2271e:	2000      	movs	r0, #0
}
   22720:	4770      	bx	lr
{
   22722:	b510      	push	{r4, lr}
   22724:	b082      	sub	sp, #8
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   22726:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   2272a:	9401      	str	r4, [sp, #4]
   2272c:	9c04      	ldr	r4, [sp, #16]
   2272e:	9400      	str	r4, [sp, #0]
   22730:	6840      	ldr	r0, [r0, #4]
   22732:	f7f1 fe43 	bl	143bc <log_append_body>
        if (rc != 0) {
   22736:	b908      	cbnz	r0, 2273c <modlog_append_one+0x26>
}
   22738:	b002      	add	sp, #8
   2273a:	bd10      	pop	{r4, pc}
            return SYS_EIO;
   2273c:	f06f 0004 	mvn.w	r0, #4
   22740:	e7fa      	b.n	22738 <modlog_append_one+0x22>
	...

00022744 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   22744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22748:	b083      	sub	sp, #12
   2274a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   2274e:	28ff      	cmp	r0, #255	; 0xff
   22750:	d031      	beq.n	227b6 <modlog_append_no_lock+0x72>
   22752:	4605      	mov	r5, r0
   22754:	460e      	mov	r6, r1
   22756:	4617      	mov	r7, r2
   22758:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   2275a:	2100      	movs	r1, #0
   2275c:	f7ff ff52 	bl	22604 <modlog_find_by_module>
    if (mm != NULL) {
   22760:	4604      	mov	r4, r0
   22762:	b198      	cbz	r0, 2278c <modlog_append_no_lock+0x48>
        while (mm != NULL && mm->desc.module == module) {
   22764:	b354      	cbz	r4, 227bc <modlog_append_no_lock+0x78>
   22766:	7a60      	ldrb	r0, [r4, #9]
   22768:	42a8      	cmp	r0, r5
   2276a:	d10d      	bne.n	22788 <modlog_append_no_lock+0x44>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   2276c:	f8cd 9004 	str.w	r9, [sp, #4]
   22770:	f8cd 8000 	str.w	r8, [sp]
   22774:	463b      	mov	r3, r7
   22776:	4632      	mov	r2, r6
   22778:	4629      	mov	r1, r5
   2277a:	4620      	mov	r0, r4
   2277c:	f7ff ffcb 	bl	22716 <modlog_append_one>
            if (rc != 0) {
   22780:	4603      	mov	r3, r0
   22782:	b9e0      	cbnz	r0, 227be <modlog_append_no_lock+0x7a>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   22784:	6824      	ldr	r4, [r4, #0]
   22786:	e7ed      	b.n	22764 <modlog_append_no_lock+0x20>
        }
        return 0;
   22788:	2300      	movs	r3, #0
   2278a:	e018      	b.n	227be <modlog_append_no_lock+0x7a>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   2278c:	4b0e      	ldr	r3, [pc, #56]	; (227c8 <modlog_append_no_lock+0x84>)
   2278e:	681c      	ldr	r4, [r3, #0]
   22790:	e000      	b.n	22794 <modlog_append_no_lock+0x50>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   22792:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   22794:	b16c      	cbz	r4, 227b2 <modlog_append_no_lock+0x6e>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   22796:	f8cd 9004 	str.w	r9, [sp, #4]
   2279a:	f8cd 8000 	str.w	r8, [sp]
   2279e:	463b      	mov	r3, r7
   227a0:	4632      	mov	r2, r6
   227a2:	4629      	mov	r1, r5
   227a4:	4620      	mov	r0, r4
   227a6:	f7ff ffb6 	bl	22716 <modlog_append_one>
        if (rc != 0) {
   227aa:	4603      	mov	r3, r0
   227ac:	2800      	cmp	r0, #0
   227ae:	d0f0      	beq.n	22792 <modlog_append_no_lock+0x4e>
   227b0:	e005      	b.n	227be <modlog_append_no_lock+0x7a>
            return rc;
        }
    }

    return 0;
   227b2:	2300      	movs	r3, #0
   227b4:	e003      	b.n	227be <modlog_append_no_lock+0x7a>
        return SYS_EINVAL;
   227b6:	f06f 0301 	mvn.w	r3, #1
   227ba:	e000      	b.n	227be <modlog_append_no_lock+0x7a>
        return 0;
   227bc:	2300      	movs	r3, #0
}
   227be:	4618      	mov	r0, r3
   227c0:	b003      	add	sp, #12
   227c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   227c6:	bf00      	nop
   227c8:	2000512c 	.word	0x2000512c

000227cc <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   227cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227d0:	4604      	mov	r4, r0
   227d2:	460d      	mov	r5, r1
   227d4:	4616      	mov	r6, r2
   227d6:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   227d8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 227fc <modlog_register+0x30>
   227dc:	4640      	mov	r0, r8
   227de:	f000 f938 	bl	22a52 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   227e2:	463b      	mov	r3, r7
   227e4:	4632      	mov	r2, r6
   227e6:	4629      	mov	r1, r5
   227e8:	4620      	mov	r0, r4
   227ea:	f7ff ff71 	bl	226d0 <modlog_register_no_lock>
   227ee:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   227f0:	4640      	mov	r0, r8
   227f2:	f000 f958 	bl	22aa6 <rwlock_release_write>

    return rc;
}
   227f6:	4620      	mov	r0, r4
   227f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   227fc:	20005210 	.word	0x20005210

00022800 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   22800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22804:	b082      	sub	sp, #8
   22806:	4604      	mov	r4, r0
   22808:	460d      	mov	r5, r1
   2280a:	4616      	mov	r6, r2
   2280c:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   2280e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 2283c <modlog_append+0x3c>
   22812:	4640      	mov	r0, r8
   22814:	f000 f8dd 	bl	229d2 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   22818:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2281c:	9300      	str	r3, [sp, #0]
   2281e:	463b      	mov	r3, r7
   22820:	4632      	mov	r2, r6
   22822:	4629      	mov	r1, r5
   22824:	4620      	mov	r0, r4
   22826:	f7ff ff8d 	bl	22744 <modlog_append_no_lock>
   2282a:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   2282c:	4640      	mov	r0, r8
   2282e:	f000 f8fd 	bl	22a2c <rwlock_release_read>

    return rc;
}
   22832:	4620      	mov	r0, r4
   22834:	b002      	add	sp, #8
   22836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2283a:	bf00      	nop
   2283c:	20005210 	.word	0x20005210

00022840 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   22840:	b40c      	push	{r2, r3}
   22842:	b530      	push	{r4, r5, lr}
   22844:	b0a5      	sub	sp, #148	; 0x94
   22846:	4604      	mov	r4, r0
   22848:	460d      	mov	r5, r1
   2284a:	ab28      	add	r3, sp, #160	; 0xa0
   2284c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   22850:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   22852:	2180      	movs	r1, #128	; 0x80
   22854:	a803      	add	r0, sp, #12
   22856:	f7ee fb4b 	bl	10ef0 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   2285a:	287f      	cmp	r0, #127	; 0x7f
   2285c:	dd00      	ble.n	22860 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   2285e:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   22860:	b280      	uxth	r0, r0
   22862:	9000      	str	r0, [sp, #0]
   22864:	ab03      	add	r3, sp, #12
   22866:	2200      	movs	r2, #0
   22868:	4629      	mov	r1, r5
   2286a:	4620      	mov	r0, r4
   2286c:	f7ff ffc8 	bl	22800 <modlog_append>
}
   22870:	b025      	add	sp, #148	; 0x94
   22872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   22876:	b002      	add	sp, #8
   22878:	4770      	bx	lr
	...

0002287c <modlog_init>:

void
modlog_init(void)
{
   2287c:	b510      	push	{r4, lr}
   2287e:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   22880:	4b1e      	ldr	r3, [pc, #120]	; (228fc <modlog_init+0x80>)
   22882:	781b      	ldrb	r3, [r3, #0]
   22884:	2b00      	cmp	r3, #0
   22886:	d034      	beq.n	228f2 <modlog_init+0x76>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   22888:	4b1d      	ldr	r3, [pc, #116]	; (22900 <modlog_init+0x84>)
   2288a:	9300      	str	r3, [sp, #0]
   2288c:	4b1d      	ldr	r3, [pc, #116]	; (22904 <modlog_init+0x88>)
   2288e:	220c      	movs	r2, #12
   22890:	2110      	movs	r1, #16
   22892:	481d      	ldr	r0, [pc, #116]	; (22908 <modlog_init+0x8c>)
   22894:	f7e7 f8c6 	bl	9a24 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   22898:	b138      	cbz	r0, 228aa <modlog_init+0x2e>
   2289a:	2000      	movs	r0, #0
   2289c:	9000      	str	r0, [sp, #0]
   2289e:	4b1b      	ldr	r3, [pc, #108]	; (2290c <modlog_init+0x90>)
   228a0:	681c      	ldr	r4, [r3, #0]
   228a2:	4603      	mov	r3, r0
   228a4:	4602      	mov	r2, r0
   228a6:	4601      	mov	r1, r0
   228a8:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   228aa:	2300      	movs	r3, #0
   228ac:	4a18      	ldr	r2, [pc, #96]	; (22910 <modlog_init+0x94>)
   228ae:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   228b0:	4a18      	ldr	r2, [pc, #96]	; (22914 <modlog_init+0x98>)
   228b2:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   228b4:	4818      	ldr	r0, [pc, #96]	; (22918 <modlog_init+0x9c>)
   228b6:	f000 f905 	bl	22ac4 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   228ba:	b138      	cbz	r0, 228cc <modlog_init+0x50>
   228bc:	2000      	movs	r0, #0
   228be:	9000      	str	r0, [sp, #0]
   228c0:	4b12      	ldr	r3, [pc, #72]	; (2290c <modlog_init+0x90>)
   228c2:	681c      	ldr	r4, [r3, #0]
   228c4:	4603      	mov	r3, r0
   228c6:	4602      	mov	r2, r0
   228c8:	4601      	mov	r1, r0
   228ca:	47a0      	blx	r4

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   228cc:	f7f1 fe94 	bl	145f8 <log_console_get>
   228d0:	4601      	mov	r1, r0
   228d2:	2300      	movs	r3, #0
   228d4:	461a      	mov	r2, r3
   228d6:	20ff      	movs	r0, #255	; 0xff
   228d8:	f7ff ff78 	bl	227cc <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   228dc:	b138      	cbz	r0, 228ee <modlog_init+0x72>
   228de:	2000      	movs	r0, #0
   228e0:	9000      	str	r0, [sp, #0]
   228e2:	4b0a      	ldr	r3, [pc, #40]	; (2290c <modlog_init+0x90>)
   228e4:	681c      	ldr	r4, [r3, #0]
   228e6:	4603      	mov	r3, r0
   228e8:	4602      	mov	r2, r0
   228ea:	4601      	mov	r1, r0
   228ec:	47a0      	blx	r4
#endif
}
   228ee:	b002      	add	sp, #8
   228f0:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   228f2:	461a      	mov	r2, r3
   228f4:	4619      	mov	r1, r3
   228f6:	4618      	mov	r0, r3
   228f8:	f7e6 fc64 	bl	91c4 <__assert_func>
   228fc:	20004bb0 	.word	0x20004bb0
   22900:	00027b50 	.word	0x00027b50
   22904:	20005130 	.word	0x20005130
   22908:	200051f0 	.word	0x200051f0
   2290c:	20000768 	.word	0x20000768
   22910:	2000520c 	.word	0x2000520c
   22914:	2000512c 	.word	0x2000512c
   22918:	20005210 	.word	0x20005210

0002291c <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   2291c:	20ff      	movs	r0, #255	; 0xff
   2291e:	4770      	bx	lr

00022920 <crc8_calc>:
crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   22920:	f04f 0c00 	mov.w	ip, #0
   22924:	4594      	cmp	ip, r2
   22926:	da16      	bge.n	22956 <crc8_calc+0x36>
{
   22928:	b410      	push	{r4}
		val ^= p[i];
   2292a:	f811 300c 	ldrb.w	r3, [r1, ip]
   2292e:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   22930:	0918      	lsrs	r0, r3, #4
   22932:	4c09      	ldr	r4, [pc, #36]	; (22958 <crc8_calc+0x38>)
   22934:	5620      	ldrsb	r0, [r4, r0]
   22936:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2293a:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   2293c:	f3c0 1003 	ubfx	r0, r0, #4, #4
   22940:	5620      	ldrsb	r0, [r4, r0]
   22942:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   22946:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   22948:	f10c 0c01 	add.w	ip, ip, #1
   2294c:	4594      	cmp	ip, r2
   2294e:	dbec      	blt.n	2292a <crc8_calc+0xa>
	}
	return val;
}
   22950:	f85d 4b04 	ldr.w	r4, [sp], #4
   22954:	4770      	bx	lr
   22956:	4770      	bx	lr
   22958:	00027b64 	.word	0x00027b64

0002295c <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   2295c:	f890 3020 	ldrb.w	r3, [r0, #32]
   22960:	3b01      	subs	r3, #1
   22962:	f880 3020 	strb.w	r3, [r0, #32]
}
   22966:	4770      	bx	lr

00022968 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   22968:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   2296a:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   2296e:	d104      	bne.n	2297a <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   22970:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   22974:	b11b      	cbz	r3, 2297e <rwlock_read_must_block+0x16>
   22976:	2001      	movs	r0, #1
   22978:	4770      	bx	lr
   2297a:	2001      	movs	r0, #1
   2297c:	4770      	bx	lr
   2297e:	2000      	movs	r0, #0
}
   22980:	4770      	bx	lr

00022982 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   22982:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   22984:	b923      	cbnz	r3, 22990 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   22986:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   2298a:	b11b      	cbz	r3, 22994 <rwlock_write_must_block+0x12>
   2298c:	2001      	movs	r0, #1
   2298e:	4770      	bx	lr
   22990:	2001      	movs	r0, #1
   22992:	4770      	bx	lr
   22994:	2000      	movs	r0, #0
}
   22996:	4770      	bx	lr

00022998 <rwlock_unblock>:
{
   22998:	b510      	push	{r4, lr}
   2299a:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   2299c:	7fc3      	ldrb	r3, [r0, #31]
   2299e:	b91b      	cbnz	r3, 229a8 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   229a0:	7f83      	ldrb	r3, [r0, #30]
   229a2:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   229a6:	e010      	b.n	229ca <rwlock_unblock+0x32>
        lock->handoffs = 1;
   229a8:	2301      	movs	r3, #1
   229aa:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   229ae:	3014      	adds	r0, #20
   229b0:	f7e7 fb6a 	bl	a088 <os_sem_release>
        lock->pending_writers--;
   229b4:	7fe3      	ldrb	r3, [r4, #31]
   229b6:	3b01      	subs	r3, #1
   229b8:	77e3      	strb	r3, [r4, #31]
   229ba:	e009      	b.n	229d0 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   229bc:	f104 000c 	add.w	r0, r4, #12
   229c0:	f7e7 fb62 	bl	a088 <os_sem_release>
            lock->pending_readers--;
   229c4:	7fa3      	ldrb	r3, [r4, #30]
   229c6:	3b01      	subs	r3, #1
   229c8:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   229ca:	7fa3      	ldrb	r3, [r4, #30]
   229cc:	2b00      	cmp	r3, #0
   229ce:	d1f5      	bne.n	229bc <rwlock_unblock+0x24>
}
   229d0:	bd10      	pop	{r4, pc}

000229d2 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   229d2:	b538      	push	{r3, r4, r5, lr}
   229d4:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   229d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   229da:	f7e8 f9a7 	bl	ad2c <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   229de:	4620      	mov	r0, r4
   229e0:	f7ff ffc2 	bl	22968 <rwlock_read_must_block>
   229e4:	b140      	cbz	r0, 229f8 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   229e6:	7fa3      	ldrb	r3, [r4, #30]
   229e8:	3301      	adds	r3, #1
   229ea:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   229ec:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   229ee:	4620      	mov	r0, r4
   229f0:	f7e8 f940 	bl	ac74 <os_mutex_release>

    if (acquired) {
   229f4:	b12d      	cbz	r5, 22a02 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   229f6:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   229f8:	7f23      	ldrb	r3, [r4, #28]
   229fa:	3301      	adds	r3, #1
   229fc:	7723      	strb	r3, [r4, #28]
        acquired = true;
   229fe:	2501      	movs	r5, #1
   22a00:	e7f5      	b.n	229ee <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   22a02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a06:	f104 000c 	add.w	r0, r4, #12
   22a0a:	f7e7 fb6f 	bl	a0ec <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   22a0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a12:	4620      	mov	r0, r4
   22a14:	f7e8 f98a 	bl	ad2c <os_mutex_pend>
    lock->num_readers++;
   22a18:	7f23      	ldrb	r3, [r4, #28]
   22a1a:	3301      	adds	r3, #1
   22a1c:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   22a1e:	4620      	mov	r0, r4
   22a20:	f7ff ff9c 	bl	2295c <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   22a24:	4620      	mov	r0, r4
   22a26:	f7e8 f925 	bl	ac74 <os_mutex_release>
   22a2a:	e7e4      	b.n	229f6 <rwlock_acquire_read+0x24>

00022a2c <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   22a2c:	b510      	push	{r4, lr}
   22a2e:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   22a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a34:	f7e8 f97a 	bl	ad2c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   22a38:	7f23      	ldrb	r3, [r4, #28]
   22a3a:	3b01      	subs	r3, #1
   22a3c:	b2db      	uxtb	r3, r3
   22a3e:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   22a40:	b11b      	cbz	r3, 22a4a <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   22a42:	4620      	mov	r0, r4
   22a44:	f7e8 f916 	bl	ac74 <os_mutex_release>
}
   22a48:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   22a4a:	4620      	mov	r0, r4
   22a4c:	f7ff ffa4 	bl	22998 <rwlock_unblock>
   22a50:	e7f7      	b.n	22a42 <rwlock_release_read+0x16>

00022a52 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   22a52:	b538      	push	{r3, r4, r5, lr}
   22a54:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   22a56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a5a:	f7e8 f967 	bl	ad2c <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   22a5e:	4620      	mov	r0, r4
   22a60:	f7ff ff8f 	bl	22982 <rwlock_write_must_block>
   22a64:	b140      	cbz	r0, 22a78 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   22a66:	7fe3      	ldrb	r3, [r4, #31]
   22a68:	3301      	adds	r3, #1
   22a6a:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   22a6c:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   22a6e:	4620      	mov	r0, r4
   22a70:	f7e8 f900 	bl	ac74 <os_mutex_release>

    if (acquired) {
   22a74:	b11d      	cbz	r5, 22a7e <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   22a76:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   22a78:	2501      	movs	r5, #1
   22a7a:	7765      	strb	r5, [r4, #29]
        acquired = true;
   22a7c:	e7f7      	b.n	22a6e <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   22a7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a82:	f104 0014 	add.w	r0, r4, #20
   22a86:	f7e7 fb31 	bl	a0ec <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   22a8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22a8e:	4620      	mov	r0, r4
   22a90:	f7e8 f94c 	bl	ad2c <os_mutex_pend>
    lock->active_writer = true;
   22a94:	2301      	movs	r3, #1
   22a96:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   22a98:	4620      	mov	r0, r4
   22a9a:	f7ff ff5f 	bl	2295c <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   22a9e:	4620      	mov	r0, r4
   22aa0:	f7e8 f8e8 	bl	ac74 <os_mutex_release>
   22aa4:	e7e7      	b.n	22a76 <rwlock_acquire_write+0x24>

00022aa6 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   22aa6:	b510      	push	{r4, lr}
   22aa8:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   22aaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22aae:	f7e8 f93d 	bl	ad2c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   22ab2:	2300      	movs	r3, #0
   22ab4:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   22ab6:	4620      	mov	r0, r4
   22ab8:	f7ff ff6e 	bl	22998 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   22abc:	4620      	mov	r0, r4
   22abe:	f7e8 f8d9 	bl	ac74 <os_mutex_release>
}
   22ac2:	bd10      	pop	{r4, pc}

00022ac4 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   22ac4:	b510      	push	{r4, lr}
   22ac6:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   22ac8:	2224      	movs	r2, #36	; 0x24
   22aca:	2100      	movs	r1, #0
   22acc:	f7ed fde5 	bl	1069a <memset>

    rc = os_mutex_init(&lock->mtx);
   22ad0:	4620      	mov	r0, r4
   22ad2:	f7e8 f8c5 	bl	ac60 <os_mutex_init>
    if (rc != 0) {
   22ad6:	b100      	cbz	r0, 22ada <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   22ad8:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   22ada:	2100      	movs	r1, #0
   22adc:	f104 000c 	add.w	r0, r4, #12
   22ae0:	f7e7 faca 	bl	a078 <os_sem_init>
    if (rc != 0) {
   22ae4:	2800      	cmp	r0, #0
   22ae6:	d1f7      	bne.n	22ad8 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   22ae8:	2100      	movs	r1, #0
   22aea:	f104 0014 	add.w	r0, r4, #20
   22aee:	f7e7 fac3 	bl	a078 <os_sem_init>
    if (rc != 0) {
   22af2:	e7f1      	b.n	22ad8 <rwlock_init+0x14>

00022af4 <bootutil_img_hash>:
 */
static int
bootutil_img_hash(struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                  uint8_t *hash_result, uint8_t *seed, int seed_len)
{
   22af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22af8:	b09d      	sub	sp, #116	; 0x74
   22afa:	4605      	mov	r5, r0
   22afc:	4689      	mov	r9, r1
   22afe:	4617      	mov	r7, r2
   22b00:	4698      	mov	r8, r3
   22b02:	9c25      	ldr	r4, [sp, #148]	; 0x94
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   22b04:	a801      	add	r0, sp, #4
   22b06:	f000 f9bb 	bl	22e80 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   22b0a:	2100      	movs	r1, #0
   22b0c:	a801      	add	r0, sp, #4
   22b0e:	f000 f9bd 	bl	22e8c <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
   22b12:	b114      	cbz	r4, 22b1a <bootutil_img_hash+0x26>
   22b14:	9b26      	ldr	r3, [sp, #152]	; 0x98
   22b16:	2b00      	cmp	r3, #0
   22b18:	dc04      	bgt.n	22b24 <bootutil_img_hash+0x30>

    /*
     * Hash is computed over image header and image itself. No TLV is
     * included ATM.
     */
    hdr_size = hdr->ih_hdr_size;
   22b1a:	892b      	ldrh	r3, [r5, #8]
    size = hdr->ih_img_size + hdr_size;
   22b1c:	68ee      	ldr	r6, [r5, #12]
   22b1e:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
   22b20:	2500      	movs	r5, #0
   22b22:	e013      	b.n	22b4c <bootutil_img_hash+0x58>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   22b24:	461a      	mov	r2, r3
   22b26:	4621      	mov	r1, r4
   22b28:	a801      	add	r0, sp, #4
   22b2a:	f000 fa99 	bl	23060 <mbedtls_sha256_update_ret>
}
   22b2e:	e7f4      	b.n	22b1a <bootutil_img_hash+0x26>
         */
        if ((off < hdr_size) && ((off + blk_sz) > hdr_size)) {
            blk_sz = hdr_size - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   22b30:	4623      	mov	r3, r4
   22b32:	463a      	mov	r2, r7
   22b34:	4629      	mov	r1, r5
   22b36:	4648      	mov	r0, r9
   22b38:	f7f1 facc 	bl	140d4 <flash_area_read>
        if (rc) {
   22b3c:	4603      	mov	r3, r0
   22b3e:	b988      	cbnz	r0, 22b64 <bootutil_img_hash+0x70>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   22b40:	4622      	mov	r2, r4
   22b42:	4639      	mov	r1, r7
   22b44:	a801      	add	r0, sp, #4
   22b46:	f000 fa8b 	bl	23060 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   22b4a:	4425      	add	r5, r4
   22b4c:	42b5      	cmp	r5, r6
   22b4e:	d204      	bcs.n	22b5a <bootutil_img_hash+0x66>
        blk_sz = size - off;
   22b50:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
   22b52:	4544      	cmp	r4, r8
   22b54:	d9ec      	bls.n	22b30 <bootutil_img_hash+0x3c>
            blk_sz = tmp_buf_sz;
   22b56:	4644      	mov	r4, r8
   22b58:	e7ea      	b.n	22b30 <bootutil_img_hash+0x3c>

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   22b5a:	9924      	ldr	r1, [sp, #144]	; 0x90
   22b5c:	a801      	add	r0, sp, #4
   22b5e:	f000 fac2 	bl	230e6 <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
   22b62:	2300      	movs	r3, #0
}
   22b64:	4618      	mov	r0, r3
   22b66:	b01d      	add	sp, #116	; 0x74
   22b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00022b6c <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   22b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b70:	b096      	sub	sp, #88	; 0x58
   22b72:	4680      	mov	r8, r0
   22b74:	460d      	mov	r5, r1
   22b76:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    struct image_tlv tlv;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
   22b78:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   22b7a:	9402      	str	r4, [sp, #8]
   22b7c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   22b7e:	9401      	str	r4, [sp, #4]
   22b80:	ac04      	add	r4, sp, #16
   22b82:	9400      	str	r4, [sp, #0]
   22b84:	f7ff ffb6 	bl	22af4 <bootutil_img_hash>
    if (rc) {
   22b88:	4607      	mov	r7, r0
   22b8a:	2800      	cmp	r0, #0
   22b8c:	d14a      	bne.n	22c24 <bootutil_img_validate+0xb8>
        return rc;
    }

    if (out_hash) {
   22b8e:	b14e      	cbz	r6, 22ba4 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
   22b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   22b92:	6030      	str	r0, [r6, #0]
   22b94:	6071      	str	r1, [r6, #4]
   22b96:	60b2      	str	r2, [r6, #8]
   22b98:	60f3      	str	r3, [r6, #12]
   22b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   22b9c:	6130      	str	r0, [r6, #16]
   22b9e:	6171      	str	r1, [r6, #20]
   22ba0:	61b2      	str	r2, [r6, #24]
   22ba2:	61f3      	str	r3, [r6, #28]
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   22ba4:	f8d8 400c 	ldr.w	r4, [r8, #12]
   22ba8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   22bac:	441c      	add	r4, r3

    rc = flash_area_read(fap, off, &info, sizeof(info));
   22bae:	2304      	movs	r3, #4
   22bb0:	aa15      	add	r2, sp, #84	; 0x54
   22bb2:	4621      	mov	r1, r4
   22bb4:	4628      	mov	r0, r5
   22bb6:	f7f1 fa8d 	bl	140d4 <flash_area_read>
    if (rc) {
   22bba:	4607      	mov	r7, r0
   22bbc:	bb90      	cbnz	r0, 22c24 <bootutil_img_validate+0xb8>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   22bbe:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   22bc2:	f646 1307 	movw	r3, #26887	; 0x6907
   22bc6:	429a      	cmp	r2, r3
   22bc8:	d130      	bne.n	22c2c <bootutil_img_validate+0xc0>
        return -1;
    }
    end = off + info.it_tlv_tot;
   22bca:	f8bd 6056 	ldrh.w	r6, [sp, #86]	; 0x56
   22bce:	4426      	add	r6, r4
    off += sizeof(info);
   22bd0:	3404      	adds	r4, #4
    int sha256_valid = 0;
   22bd2:	4680      	mov	r8, r0

    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   22bd4:	e003      	b.n	22bde <bootutil_img_validate+0x72>
   22bd6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   22bda:	441c      	add	r4, r3
   22bdc:	3404      	adds	r4, #4
   22bde:	42b4      	cmp	r4, r6
   22be0:	d21d      	bcs.n	22c1e <bootutil_img_validate+0xb2>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   22be2:	2304      	movs	r3, #4
   22be4:	aa14      	add	r2, sp, #80	; 0x50
   22be6:	4621      	mov	r1, r4
   22be8:	4628      	mov	r0, r5
   22bea:	f7f1 fa73 	bl	140d4 <flash_area_read>
        if (rc) {
   22bee:	bb00      	cbnz	r0, 22c32 <bootutil_img_validate+0xc6>
            return rc;
        }

        if (tlv.it_type == IMAGE_TLV_SHA256) {
   22bf0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   22bf4:	2b10      	cmp	r3, #16
   22bf6:	d1ee      	bne.n	22bd6 <bootutil_img_validate+0x6a>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (tlv.it_len != sizeof(hash)) {
   22bf8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   22bfc:	2b20      	cmp	r3, #32
   22bfe:	d11a      	bne.n	22c36 <bootutil_img_validate+0xca>
                return -1;
            }
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   22c00:	aa0c      	add	r2, sp, #48	; 0x30
   22c02:	1d21      	adds	r1, r4, #4
   22c04:	4628      	mov	r0, r5
   22c06:	f7f1 fa65 	bl	140d4 <flash_area_read>
            if (rc) {
   22c0a:	b9b8      	cbnz	r0, 22c3c <bootutil_img_validate+0xd0>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
   22c0c:	2220      	movs	r2, #32
   22c0e:	a90c      	add	r1, sp, #48	; 0x30
   22c10:	a804      	add	r0, sp, #16
   22c12:	f7ed fd11 	bl	10638 <memcmp>
   22c16:	b998      	cbnz	r0, 22c40 <bootutil_img_validate+0xd4>
                return -1;
            }

            sha256_valid = 1;
   22c18:	f04f 0801 	mov.w	r8, #1
   22c1c:	e7db      	b.n	22bd6 <bootutil_img_validate+0x6a>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
   22c1e:	f1b8 0f00 	cmp.w	r8, #0
   22c22:	d010      	beq.n	22c46 <bootutil_img_validate+0xda>
        return -1;
    }
#endif

    return 0;
}
   22c24:	4638      	mov	r0, r7
   22c26:	b016      	add	sp, #88	; 0x58
   22c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   22c2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22c30:	e7f8      	b.n	22c24 <bootutil_img_validate+0xb8>
            return rc;
   22c32:	4607      	mov	r7, r0
   22c34:	e7f6      	b.n	22c24 <bootutil_img_validate+0xb8>
                return -1;
   22c36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22c3a:	e7f3      	b.n	22c24 <bootutil_img_validate+0xb8>
                return rc;
   22c3c:	4607      	mov	r7, r0
   22c3e:	e7f1      	b.n	22c24 <bootutil_img_validate+0xb8>
                return -1;
   22c40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22c44:	e7ee      	b.n	22c24 <bootutil_img_validate+0xb8>
        return -1;
   22c46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22c4a:	e7eb      	b.n	22c24 <bootutil_img_validate+0xb8>

00022c4c <boot_write_sz>:
    return 0;
}

static uint8_t
boot_write_sz(void)
{
   22c4c:	b538      	push	{r3, r4, r5, lr}

    /* Figure out what size to write update status update as.  The size depends
     * on what the minimum write size is for scratch area, active image slot.
     * We need to use the bigger of those 2 values.
     */
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   22c4e:	4d06      	ldr	r5, [pc, #24]	; (22c68 <boot_write_sz+0x1c>)
   22c50:	6a28      	ldr	r0, [r5, #32]
   22c52:	f7f1 fa7b 	bl	1414c <flash_area_align>
   22c56:	4604      	mov	r4, r0
    align = flash_area_align(boot_data.scratch.area);
   22c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
   22c5a:	f7f1 fa77 	bl	1414c <flash_area_align>
    if (align > elem_sz) {
   22c5e:	4284      	cmp	r4, r0
   22c60:	d300      	bcc.n	22c64 <boot_write_sz+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   22c62:	4620      	mov	r0, r4
        elem_sz = align;
    }

    return elem_sz;
}
   22c64:	bd38      	pop	{r3, r4, r5, pc}
   22c66:	bf00      	nop
   22c68:	20005234 	.word	0x20005234

00022c6c <boot_read_image_header>:
{
   22c6c:	b510      	push	{r4, lr}
   22c6e:	b082      	sub	sp, #8
   22c70:	460c      	mov	r4, r1
    area_id = flash_area_id_from_image_slot(slot);
   22c72:	f7f1 fa8f 	bl	14194 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   22c76:	a901      	add	r1, sp, #4
   22c78:	b2c0      	uxtb	r0, r0
   22c7a:	f7f1 f9cb 	bl	14014 <flash_area_open>
    if (rc != 0) {
   22c7e:	b110      	cbz	r0, 22c86 <boot_read_image_header+0x1a>
        rc = BOOT_EFLASH;
   22c80:	2001      	movs	r0, #1
}
   22c82:	b002      	add	sp, #8
   22c84:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   22c86:	2320      	movs	r3, #32
   22c88:	4622      	mov	r2, r4
   22c8a:	2100      	movs	r1, #0
   22c8c:	9801      	ldr	r0, [sp, #4]
   22c8e:	f7f1 fa21 	bl	140d4 <flash_area_read>
    if (rc != 0) {
   22c92:	2800      	cmp	r0, #0
   22c94:	d0f5      	beq.n	22c82 <boot_read_image_header+0x16>
        rc = BOOT_EFLASH;
   22c96:	2001      	movs	r0, #1
    return rc;
   22c98:	e7f3      	b.n	22c82 <boot_read_image_header+0x16>
	...

00022c9c <boot_read_image_headers>:
{
   22c9c:	b538      	push	{r3, r4, r5, lr}
   22c9e:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   22ca0:	2400      	movs	r4, #0
   22ca2:	2c01      	cmp	r4, #1
   22ca4:	dc0f      	bgt.n	22cc6 <boot_read_image_headers+0x2a>
        rc = boot_read_image_header(i, boot_img_hdr(&boot_data, i));
   22ca6:	4b09      	ldr	r3, [pc, #36]	; (22ccc <boot_read_image_headers+0x30>)
   22ca8:	212c      	movs	r1, #44	; 0x2c
   22caa:	fb01 3104 	mla	r1, r1, r4, r3
   22cae:	4620      	mov	r0, r4
   22cb0:	f7ff ffdc 	bl	22c6c <boot_read_image_header>
        if (rc != 0) {
   22cb4:	4603      	mov	r3, r0
   22cb6:	b908      	cbnz	r0, 22cbc <boot_read_image_headers+0x20>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   22cb8:	3401      	adds	r4, #1
   22cba:	e7f2      	b.n	22ca2 <boot_read_image_headers+0x6>
            if (i > 0 && !require_all) {
   22cbc:	2c00      	cmp	r4, #0
   22cbe:	dd03      	ble.n	22cc8 <boot_read_image_headers+0x2c>
   22cc0:	b915      	cbnz	r5, 22cc8 <boot_read_image_headers+0x2c>
                return 0;
   22cc2:	2300      	movs	r3, #0
   22cc4:	e000      	b.n	22cc8 <boot_read_image_headers+0x2c>
    return 0;
   22cc6:	2300      	movs	r3, #0
}
   22cc8:	4618      	mov	r0, r3
   22cca:	bd38      	pop	{r3, r4, r5, pc}
   22ccc:	20005234 	.word	0x20005234

00022cd0 <split_image_check>:
static int
split_image_check(struct image_header *app_hdr,
                  const struct flash_area *app_fap,
                  struct image_header *loader_hdr,
                  const struct flash_area *loader_fap)
{
   22cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cd4:	b08c      	sub	sp, #48	; 0x30
   22cd6:	4606      	mov	r6, r0
   22cd8:	460f      	mov	r7, r1
   22cda:	4690      	mov	r8, r2
   22cdc:	461d      	mov	r5, r3
    static void *tmpbuf;
    uint8_t loader_hash[32];

    if (!tmpbuf) {
   22cde:	4c18      	ldr	r4, [pc, #96]	; (22d40 <split_image_check+0x70>)
   22ce0:	6824      	ldr	r4, [r4, #0]
   22ce2:	b1f4      	cbz	r4, 22d22 <split_image_check+0x52>
        if (!tmpbuf) {
            return BOOT_ENOMEM;
        }
    }

    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   22ce4:	ab04      	add	r3, sp, #16
   22ce6:	9302      	str	r3, [sp, #8]
   22ce8:	2400      	movs	r4, #0
   22cea:	9401      	str	r4, [sp, #4]
   22cec:	9400      	str	r4, [sp, #0]
   22cee:	f44f 7380 	mov.w	r3, #256	; 0x100
   22cf2:	4a13      	ldr	r2, [pc, #76]	; (22d40 <split_image_check+0x70>)
   22cf4:	6812      	ldr	r2, [r2, #0]
   22cf6:	4629      	mov	r1, r5
   22cf8:	4640      	mov	r0, r8
   22cfa:	f7ff ff37 	bl	22b6c <bootutil_img_validate>
   22cfe:	b9d0      	cbnz	r0, 22d36 <split_image_check+0x66>
                              NULL, 0, loader_hash)) {
        return BOOT_EBADIMAGE;
    }

    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   22d00:	9402      	str	r4, [sp, #8]
   22d02:	2320      	movs	r3, #32
   22d04:	9301      	str	r3, [sp, #4]
   22d06:	ab04      	add	r3, sp, #16
   22d08:	9300      	str	r3, [sp, #0]
   22d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
   22d0e:	4a0c      	ldr	r2, [pc, #48]	; (22d40 <split_image_check+0x70>)
   22d10:	6812      	ldr	r2, [r2, #0]
   22d12:	4639      	mov	r1, r7
   22d14:	4630      	mov	r0, r6
   22d16:	f7ff ff29 	bl	22b6c <bootutil_img_validate>
   22d1a:	b970      	cbnz	r0, 22d3a <split_image_check+0x6a>
                              loader_hash, 32, NULL)) {
        return BOOT_EBADIMAGE;
    }

    return 0;
}
   22d1c:	b00c      	add	sp, #48	; 0x30
   22d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   22d22:	f44f 7080 	mov.w	r0, #256	; 0x100
   22d26:	f000 faa9 	bl	2327c <os_malloc>
   22d2a:	4b05      	ldr	r3, [pc, #20]	; (22d40 <split_image_check+0x70>)
   22d2c:	6018      	str	r0, [r3, #0]
        if (!tmpbuf) {
   22d2e:	2800      	cmp	r0, #0
   22d30:	d1d8      	bne.n	22ce4 <split_image_check+0x14>
            return BOOT_ENOMEM;
   22d32:	2006      	movs	r0, #6
   22d34:	e7f2      	b.n	22d1c <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   22d36:	2003      	movs	r0, #3
   22d38:	e7f0      	b.n	22d1c <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   22d3a:	2003      	movs	r0, #3
   22d3c:	e7ee      	b.n	22d1c <split_image_check+0x4c>
   22d3e:	bf00      	nop
   22d40:	2000529c 	.word	0x2000529c

00022d44 <boot_read_sectors>:
{
   22d44:	b510      	push	{r4, lr}
   22d46:	b082      	sub	sp, #8
}

static inline int
boot_initialize_area(struct boot_loader_state *state, int flash_area)
{
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   22d48:	2380      	movs	r3, #128	; 0x80
   22d4a:	9301      	str	r3, [sp, #4]
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   22d4c:	4c15      	ldr	r4, [pc, #84]	; (22da4 <boot_read_sectors+0x60>)
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   22d4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   22d50:	a901      	add	r1, sp, #4
   22d52:	2001      	movs	r0, #1
   22d54:	f7f1 f980 	bl	14058 <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   22d58:	9b01      	ldr	r3, [sp, #4]
   22d5a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
   22d5c:	b118      	cbz	r0, 22d66 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
   22d5e:	2401      	movs	r4, #1
}
   22d60:	4620      	mov	r0, r4
   22d62:	b002      	add	sp, #8
   22d64:	bd10      	pop	{r4, pc}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   22d66:	2380      	movs	r3, #128	; 0x80
   22d68:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   22d6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   22d6c:	a901      	add	r1, sp, #4
   22d6e:	2002      	movs	r0, #2
   22d70:	f7f1 f972 	bl	14058 <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   22d74:	9b01      	ldr	r3, [sp, #4]
   22d76:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   22d78:	b108      	cbz	r0, 22d7e <boot_read_sectors+0x3a>
        return BOOT_EFLASH;
   22d7a:	2401      	movs	r4, #1
   22d7c:	e7f0      	b.n	22d60 <boot_read_sectors+0x1c>
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   22d7e:	2380      	movs	r3, #128	; 0x80
   22d80:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   22d82:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   22d84:	a901      	add	r1, sp, #4
   22d86:	2003      	movs	r0, #3
   22d88:	f7f1 f966 	bl	14058 <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   22d8c:	9b01      	ldr	r3, [sp, #4]
   22d8e:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   22d90:	4604      	mov	r4, r0
   22d92:	b108      	cbz	r0, 22d98 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
   22d94:	2401      	movs	r4, #1
   22d96:	e7e3      	b.n	22d60 <boot_read_sectors+0x1c>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   22d98:	f7ff ff58 	bl	22c4c <boot_write_sz>
   22d9c:	4b01      	ldr	r3, [pc, #4]	; (22da4 <boot_read_sectors+0x60>)
   22d9e:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    return 0;
   22da2:	e7dd      	b.n	22d60 <boot_read_sectors+0x1c>
   22da4:	20005234 	.word	0x20005234

00022da8 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   22da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22dac:	4605      	mov	r5, r0
   22dae:	460c      	mov	r4, r1
   22db0:	4690      	mov	r8, r2
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   22db2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   22db6:	f000 fa61 	bl	2327c <os_malloc>
    if (sectors == NULL) {
   22dba:	2800      	cmp	r0, #0
   22dbc:	d05b      	beq.n	22e76 <split_go+0xce>
   22dbe:	4607      	mov	r7, r0
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   22dc0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 22e7c <split_go+0xd4>
   22dc4:	232c      	movs	r3, #44	; 0x2c
   22dc6:	fb03 f605 	mul.w	r6, r3, r5
   22dca:	eb09 0206 	add.w	r2, r9, r6
   22dce:	6250      	str	r0, [r2, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   22dd0:	f500 62c0 	add.w	r2, r0, #1536	; 0x600
   22dd4:	fb03 9304 	mla	r3, r3, r4, r9
   22dd8:	625a      	str	r2, [r3, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   22dda:	4628      	mov	r0, r5
   22ddc:	f7f1 f9da 	bl	14194 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   22de0:	f106 0120 	add.w	r1, r6, #32
   22de4:	4449      	add	r1, r9
   22de6:	b2c0      	uxtb	r0, r0
   22de8:	f7f1 f914 	bl	14014 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   22dec:	b9b8      	cbnz	r0, 22e1e <split_go+0x76>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   22dee:	4620      	mov	r0, r4
   22df0:	f7f1 f9d0 	bl	14194 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   22df4:	232c      	movs	r3, #44	; 0x2c
   22df6:	fb04 f303 	mul.w	r3, r4, r3
   22dfa:	3320      	adds	r3, #32
   22dfc:	491f      	ldr	r1, [pc, #124]	; (22e7c <split_go+0xd4>)
   22dfe:	4419      	add	r1, r3
   22e00:	b2c0      	uxtb	r0, r0
   22e02:	f7f1 f907 	bl	14014 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   22e06:	b980      	cbnz	r0, 22e2a <split_go+0x82>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   22e08:	f7ff ff9c 	bl	22d44 <boot_read_sectors>
    if (rc != 0) {
   22e0c:	b198      	cbz	r0, 22e36 <split_go+0x8e>
        rc = SPLIT_GO_ERR;
   22e0e:	f06f 0601 	mvn.w	r6, #1
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   22e12:	4638      	mov	r0, r7
   22e14:	f000 fa3e 	bl	23294 <os_free>
    return rc;
}
   22e18:	4630      	mov	r0, r6
   22e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   22e1e:	2300      	movs	r3, #0
   22e20:	461a      	mov	r2, r3
   22e22:	4619      	mov	r1, r3
   22e24:	4618      	mov	r0, r3
   22e26:	f7e6 f9cd 	bl	91c4 <__assert_func>
    assert(rc == 0);
   22e2a:	2300      	movs	r3, #0
   22e2c:	461a      	mov	r2, r3
   22e2e:	4619      	mov	r1, r3
   22e30:	4618      	mov	r0, r3
   22e32:	f7e6 f9c7 	bl	91c4 <__assert_func>
    rc = boot_read_image_headers(true);
   22e36:	2001      	movs	r0, #1
   22e38:	f7ff ff30 	bl	22c9c <boot_read_image_headers>
    if (rc != 0) {
   22e3c:	4606      	mov	r6, r0
   22e3e:	2800      	cmp	r0, #0
   22e40:	d1e7      	bne.n	22e12 <split_go+0x6a>
    return &state->imgs[slot].hdr;
   22e42:	4a0e      	ldr	r2, [pc, #56]	; (22e7c <split_go+0xd4>)
   22e44:	232c      	movs	r3, #44	; 0x2c
   22e46:	fb03 2004 	mla	r0, r3, r4, r2
   22e4a:	fb03 2205 	mla	r2, r3, r5, r2
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   22e4e:	6a13      	ldr	r3, [r2, #32]
   22e50:	6a01      	ldr	r1, [r0, #32]
   22e52:	f7ff ff3d 	bl	22cd0 <split_image_check>
    if (rc != 0) {
   22e56:	4606      	mov	r6, r0
   22e58:	b950      	cbnz	r0, 22e70 <split_go+0xc8>
    return state->imgs[slot].area->fa_off;
   22e5a:	4908      	ldr	r1, [pc, #32]	; (22e7c <split_go+0xd4>)
   22e5c:	232c      	movs	r3, #44	; 0x2c
   22e5e:	fb03 1404 	mla	r4, r3, r4, r1
   22e62:	6a23      	ldr	r3, [r4, #32]
   22e64:	685a      	ldr	r2, [r3, #4]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   22e66:	8923      	ldrh	r3, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   22e68:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   22e6a:	f8c8 3000 	str.w	r3, [r8]
    rc = SPLIT_GO_OK;
   22e6e:	e7d0      	b.n	22e12 <split_go+0x6a>
        rc = SPLIT_GO_NON_MATCHING;
   22e70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22e74:	e7cd      	b.n	22e12 <split_go+0x6a>
        return SPLIT_GO_ERR;
   22e76:	f06f 0601 	mvn.w	r6, #1
   22e7a:	e7cd      	b.n	22e18 <split_go+0x70>
   22e7c:	20005234 	.word	0x20005234

00022e80 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
   22e80:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   22e82:	226c      	movs	r2, #108	; 0x6c
   22e84:	2100      	movs	r1, #0
   22e86:	f7ed fc08 	bl	1069a <memset>
}
   22e8a:	bd08      	pop	{r3, pc}

00022e8c <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   22e8c:	2300      	movs	r3, #0
   22e8e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   22e90:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   22e92:	460b      	mov	r3, r1
   22e94:	b9b9      	cbnz	r1, 22ec6 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   22e96:	4a19      	ldr	r2, [pc, #100]	; (22efc <mbedtls_sha256_starts_ret+0x70>)
   22e98:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   22e9a:	4a19      	ldr	r2, [pc, #100]	; (22f00 <mbedtls_sha256_starts_ret+0x74>)
   22e9c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   22e9e:	4a19      	ldr	r2, [pc, #100]	; (22f04 <mbedtls_sha256_starts_ret+0x78>)
   22ea0:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   22ea2:	4a19      	ldr	r2, [pc, #100]	; (22f08 <mbedtls_sha256_starts_ret+0x7c>)
   22ea4:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
   22ea6:	4a19      	ldr	r2, [pc, #100]	; (22f0c <mbedtls_sha256_starts_ret+0x80>)
   22ea8:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   22eaa:	4a19      	ldr	r2, [pc, #100]	; (22f10 <mbedtls_sha256_starts_ret+0x84>)
   22eac:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   22eae:	4a19      	ldr	r2, [pc, #100]	; (22f14 <mbedtls_sha256_starts_ret+0x88>)
   22eb0:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   22eb2:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
   22eb6:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
   22eba:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
   22ebe:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
   22ec0:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
   22ec2:	2000      	movs	r0, #0
   22ec4:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
   22ec6:	4a14      	ldr	r2, [pc, #80]	; (22f18 <mbedtls_sha256_starts_ret+0x8c>)
   22ec8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
   22eca:	4a14      	ldr	r2, [pc, #80]	; (22f1c <mbedtls_sha256_starts_ret+0x90>)
   22ecc:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   22ece:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
   22ed2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   22ed6:	f502 6201 	add.w	r2, r2, #2064	; 0x810
   22eda:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   22edc:	4a10      	ldr	r2, [pc, #64]	; (22f20 <mbedtls_sha256_starts_ret+0x94>)
   22ede:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   22ee0:	4a10      	ldr	r2, [pc, #64]	; (22f24 <mbedtls_sha256_starts_ret+0x98>)
   22ee2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
   22ee4:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
   22ee8:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   22eec:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
   22ef0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   22ef2:	4a0d      	ldr	r2, [pc, #52]	; (22f28 <mbedtls_sha256_starts_ret+0x9c>)
   22ef4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   22ef6:	4a0d      	ldr	r2, [pc, #52]	; (22f2c <mbedtls_sha256_starts_ret+0xa0>)
   22ef8:	6242      	str	r2, [r0, #36]	; 0x24
   22efa:	e7e1      	b.n	22ec0 <mbedtls_sha256_starts_ret+0x34>
   22efc:	6a09e667 	.word	0x6a09e667
   22f00:	bb67ae85 	.word	0xbb67ae85
   22f04:	3c6ef372 	.word	0x3c6ef372
   22f08:	a54ff53a 	.word	0xa54ff53a
   22f0c:	510e527f 	.word	0x510e527f
   22f10:	9b05688c 	.word	0x9b05688c
   22f14:	1f83d9ab 	.word	0x1f83d9ab
   22f18:	c1059ed8 	.word	0xc1059ed8
   22f1c:	367cd507 	.word	0x367cd507
   22f20:	f70e5939 	.word	0xf70e5939
   22f24:	ffc00b31 	.word	0xffc00b31
   22f28:	64f98fa7 	.word	0x64f98fa7
   22f2c:	befa4fa4 	.word	0xbefa4fa4

00022f30 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   22f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f34:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   22f36:	2300      	movs	r3, #0
   22f38:	e005      	b.n	22f46 <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
   22f3a:	1c9a      	adds	r2, r3, #2
   22f3c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   22f40:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
   22f44:	3301      	adds	r3, #1
   22f46:	2b07      	cmp	r3, #7
   22f48:	d9f7      	bls.n	22f3a <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   22f4a:	2200      	movs	r2, #0
   22f4c:	e04f      	b.n	22fee <mbedtls_internal_sha256_process+0xbe>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
   22f4e:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   22f52:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   22f56:	7863      	ldrb	r3, [r4, #1]
   22f58:	041b      	lsls	r3, r3, #16
   22f5a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   22f5e:	78a5      	ldrb	r5, [r4, #2]
   22f60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   22f64:	78e4      	ldrb	r4, [r4, #3]
   22f66:	4323      	orrs	r3, r4
   22f68:	ac08      	add	r4, sp, #32
   22f6a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   22f6e:	9b07      	ldr	r3, [sp, #28]
   22f70:	9c04      	ldr	r4, [sp, #16]
   22f72:	ea4f 2cf4 	mov.w	ip, r4, ror #11
   22f76:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
   22f7a:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
   22f7e:	4463      	add	r3, ip
   22f80:	9d06      	ldr	r5, [sp, #24]
   22f82:	9e05      	ldr	r6, [sp, #20]
   22f84:	ea85 0c06 	eor.w	ip, r5, r6
   22f88:	ea04 0c0c 	and.w	ip, r4, ip
   22f8c:	ea85 0c0c 	eor.w	ip, r5, ip
   22f90:	4463      	add	r3, ip
   22f92:	4f32      	ldr	r7, [pc, #200]	; (2305c <mbedtls_internal_sha256_process+0x12c>)
   22f94:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   22f98:	443b      	add	r3, r7
   22f9a:	af08      	add	r7, sp, #32
   22f9c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   22fa0:	443b      	add	r3, r7
   22fa2:	f8dd e000 	ldr.w	lr, [sp]
   22fa6:	ea4f 3c7e 	mov.w	ip, lr, ror #13
   22faa:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
   22fae:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
   22fb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   22fb6:	ea0e 0708 	and.w	r7, lr, r8
   22fba:	f8dd 9008 	ldr.w	r9, [sp, #8]
   22fbe:	ea4e 0a08 	orr.w	sl, lr, r8
   22fc2:	ea09 0a0a 	and.w	sl, r9, sl
   22fc6:	ea47 070a 	orr.w	r7, r7, sl
   22fca:	44bc      	add	ip, r7
   22fcc:	9f03      	ldr	r7, [sp, #12]
   22fce:	441f      	add	r7, r3
   22fd0:	9703      	str	r7, [sp, #12]
   22fd2:	4463      	add	r3, ip
   22fd4:	9307      	str	r3, [sp, #28]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
   22fd6:	9507      	str	r5, [sp, #28]
   22fd8:	9606      	str	r6, [sp, #24]
   22fda:	9405      	str	r4, [sp, #20]
   22fdc:	9704      	str	r7, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
   22fde:	f8cd 900c 	str.w	r9, [sp, #12]
   22fe2:	f8cd 8008 	str.w	r8, [sp, #8]
   22fe6:	f8cd e004 	str.w	lr, [sp, #4]
   22fea:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
   22fec:	3201      	adds	r2, #1
   22fee:	2a3f      	cmp	r2, #63	; 0x3f
   22ff0:	d822      	bhi.n	23038 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
   22ff2:	2a0f      	cmp	r2, #15
   22ff4:	d9ab      	bls.n	22f4e <mbedtls_internal_sha256_process+0x1e>
            R( i );
   22ff6:	1e93      	subs	r3, r2, #2
   22ff8:	ac08      	add	r4, sp, #32
   22ffa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   22ffe:	ea4f 43f5 	mov.w	r3, r5, ror #19
   23002:	ea83 4375 	eor.w	r3, r3, r5, ror #17
   23006:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
   2300a:	1fd5      	subs	r5, r2, #7
   2300c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   23010:	442b      	add	r3, r5
   23012:	f1a2 050f 	sub.w	r5, r2, #15
   23016:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   2301a:	ea4f 45b6 	mov.w	r5, r6, ror #18
   2301e:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
   23022:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
   23026:	442b      	add	r3, r5
   23028:	f1a2 0510 	sub.w	r5, r2, #16
   2302c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   23030:	442b      	add	r3, r5
   23032:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   23036:	e79a      	b.n	22f6e <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   23038:	2300      	movs	r3, #0
   2303a:	e008      	b.n	2304e <mbedtls_internal_sha256_process+0x11e>
        ctx->state[i] += A[i];
   2303c:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
   23040:	1c99      	adds	r1, r3, #2
   23042:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   23046:	4422      	add	r2, r4
   23048:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
   2304c:	3301      	adds	r3, #1
   2304e:	2b07      	cmp	r3, #7
   23050:	d9f4      	bls.n	2303c <mbedtls_internal_sha256_process+0x10c>

    return( 0 );
}
   23052:	2000      	movs	r0, #0
   23054:	b048      	add	sp, #288	; 0x120
   23056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2305a:	bf00      	nop
   2305c:	00027b74 	.word	0x00027b74

00023060 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   23060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   23064:	b3da      	cbz	r2, 230de <mbedtls_sha256_update_ret+0x7e>
   23066:	4606      	mov	r6, r0
   23068:	460d      	mov	r5, r1
   2306a:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   2306c:	6803      	ldr	r3, [r0, #0]
   2306e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   23072:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   23076:	4413      	add	r3, r2
   23078:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   2307a:	4293      	cmp	r3, r2
   2307c:	d202      	bcs.n	23084 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
   2307e:	6843      	ldr	r3, [r0, #4]
   23080:	3301      	adds	r3, #1
   23082:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   23084:	b10f      	cbz	r7, 2308a <mbedtls_sha256_update_ret+0x2a>
   23086:	4544      	cmp	r4, r8
   23088:	d20a      	bcs.n	230a0 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   2308a:	2c3f      	cmp	r4, #63	; 0x3f
   2308c:	d91b      	bls.n	230c6 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   2308e:	4629      	mov	r1, r5
   23090:	4630      	mov	r0, r6
   23092:	f7ff ff4d 	bl	22f30 <mbedtls_internal_sha256_process>
   23096:	4603      	mov	r3, r0
   23098:	bb10      	cbnz	r0, 230e0 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
   2309a:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   2309c:	3c40      	subs	r4, #64	; 0x40
   2309e:	e7f4      	b.n	2308a <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   230a0:	f106 0928 	add.w	r9, r6, #40	; 0x28
   230a4:	4642      	mov	r2, r8
   230a6:	4629      	mov	r1, r5
   230a8:	eb09 0007 	add.w	r0, r9, r7
   230ac:	f7ed fae8 	bl	10680 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   230b0:	4649      	mov	r1, r9
   230b2:	4630      	mov	r0, r6
   230b4:	f7ff ff3c 	bl	22f30 <mbedtls_internal_sha256_process>
   230b8:	4603      	mov	r3, r0
   230ba:	b988      	cbnz	r0, 230e0 <mbedtls_sha256_update_ret+0x80>
        input += fill;
   230bc:	4445      	add	r5, r8
        ilen  -= fill;
   230be:	3f40      	subs	r7, #64	; 0x40
   230c0:	443c      	add	r4, r7
        left = 0;
   230c2:	2700      	movs	r7, #0
   230c4:	e7e1      	b.n	2308a <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
   230c6:	b90c      	cbnz	r4, 230cc <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   230c8:	2300      	movs	r3, #0
   230ca:	e009      	b.n	230e0 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   230cc:	f106 0028 	add.w	r0, r6, #40	; 0x28
   230d0:	4622      	mov	r2, r4
   230d2:	4629      	mov	r1, r5
   230d4:	4438      	add	r0, r7
   230d6:	f7ed fad3 	bl	10680 <memcpy>
    return( 0 );
   230da:	2300      	movs	r3, #0
   230dc:	e000      	b.n	230e0 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
   230de:	2300      	movs	r3, #0
}
   230e0:	4618      	mov	r0, r3
   230e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000230e6 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   230e6:	b570      	push	{r4, r5, r6, lr}
   230e8:	4604      	mov	r4, r0
   230ea:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   230ec:	6803      	ldr	r3, [r0, #0]
   230ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   230f2:	1c58      	adds	r0, r3, #1
   230f4:	4423      	add	r3, r4
   230f6:	2280      	movs	r2, #128	; 0x80
   230f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
   230fc:	2838      	cmp	r0, #56	; 0x38
   230fe:	d87c      	bhi.n	231fa <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   23100:	f104 0328 	add.w	r3, r4, #40	; 0x28
   23104:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   23108:	2100      	movs	r1, #0
   2310a:	4418      	add	r0, r3
   2310c:	f7ed fac5 	bl	1069a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   23110:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   23112:	6863      	ldr	r3, [r4, #4]
   23114:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   23116:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   2311a:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   2311c:	0e1e      	lsrs	r6, r3, #24
   2311e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
   23122:	f3c3 4607 	ubfx	r6, r3, #16, #8
   23126:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   2312a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2312e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   23132:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   23136:	f3c2 5347 	ubfx	r3, r2, #21, #8
   2313a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   2313e:	f3c2 3347 	ubfx	r3, r2, #13, #8
   23142:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   23146:	f3c2 1247 	ubfx	r2, r2, #5, #8
   2314a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   2314e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   23152:	f104 0128 	add.w	r1, r4, #40	; 0x28
   23156:	4620      	mov	r0, r4
   23158:	f7ff feea 	bl	22f30 <mbedtls_internal_sha256_process>
   2315c:	4603      	mov	r3, r0
   2315e:	2800      	cmp	r0, #0
   23160:	d159      	bne.n	23216 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   23162:	7ae2      	ldrb	r2, [r4, #11]
   23164:	702a      	strb	r2, [r5, #0]
   23166:	7aa2      	ldrb	r2, [r4, #10]
   23168:	706a      	strb	r2, [r5, #1]
   2316a:	7a62      	ldrb	r2, [r4, #9]
   2316c:	70aa      	strb	r2, [r5, #2]
   2316e:	7a22      	ldrb	r2, [r4, #8]
   23170:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   23172:	7be2      	ldrb	r2, [r4, #15]
   23174:	712a      	strb	r2, [r5, #4]
   23176:	7ba2      	ldrb	r2, [r4, #14]
   23178:	716a      	strb	r2, [r5, #5]
   2317a:	7b62      	ldrb	r2, [r4, #13]
   2317c:	71aa      	strb	r2, [r5, #6]
   2317e:	7b22      	ldrb	r2, [r4, #12]
   23180:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   23182:	7ce2      	ldrb	r2, [r4, #19]
   23184:	722a      	strb	r2, [r5, #8]
   23186:	7ca2      	ldrb	r2, [r4, #18]
   23188:	726a      	strb	r2, [r5, #9]
   2318a:	7c62      	ldrb	r2, [r4, #17]
   2318c:	72aa      	strb	r2, [r5, #10]
   2318e:	7c22      	ldrb	r2, [r4, #16]
   23190:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   23192:	7de2      	ldrb	r2, [r4, #23]
   23194:	732a      	strb	r2, [r5, #12]
   23196:	7da2      	ldrb	r2, [r4, #22]
   23198:	736a      	strb	r2, [r5, #13]
   2319a:	7d62      	ldrb	r2, [r4, #21]
   2319c:	73aa      	strb	r2, [r5, #14]
   2319e:	7d22      	ldrb	r2, [r4, #20]
   231a0:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   231a2:	7ee2      	ldrb	r2, [r4, #27]
   231a4:	742a      	strb	r2, [r5, #16]
   231a6:	7ea2      	ldrb	r2, [r4, #26]
   231a8:	746a      	strb	r2, [r5, #17]
   231aa:	7e62      	ldrb	r2, [r4, #25]
   231ac:	74aa      	strb	r2, [r5, #18]
   231ae:	7e22      	ldrb	r2, [r4, #24]
   231b0:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   231b2:	7fe2      	ldrb	r2, [r4, #31]
   231b4:	752a      	strb	r2, [r5, #20]
   231b6:	7fa2      	ldrb	r2, [r4, #30]
   231b8:	756a      	strb	r2, [r5, #21]
   231ba:	7f62      	ldrb	r2, [r4, #29]
   231bc:	75aa      	strb	r2, [r5, #22]
   231be:	7f22      	ldrb	r2, [r4, #28]
   231c0:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   231c2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   231c6:	762a      	strb	r2, [r5, #24]
   231c8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   231cc:	766a      	strb	r2, [r5, #25]
   231ce:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   231d2:	76aa      	strb	r2, [r5, #26]
   231d4:	f894 2020 	ldrb.w	r2, [r4, #32]
   231d8:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
   231da:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   231dc:	b9da      	cbnz	r2, 23216 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   231de:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   231e2:	772b      	strb	r3, [r5, #28]
   231e4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   231e8:	776b      	strb	r3, [r5, #29]
   231ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   231ee:	77ab      	strb	r3, [r5, #30]
   231f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   231f4:	77eb      	strb	r3, [r5, #31]

    return( 0 );
   231f6:	4613      	mov	r3, r2
   231f8:	e00d      	b.n	23216 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
   231fa:	f104 0628 	add.w	r6, r4, #40	; 0x28
   231fe:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   23202:	2100      	movs	r1, #0
   23204:	4430      	add	r0, r6
   23206:	f7ed fa48 	bl	1069a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   2320a:	4631      	mov	r1, r6
   2320c:	4620      	mov	r0, r4
   2320e:	f7ff fe8f 	bl	22f30 <mbedtls_internal_sha256_process>
   23212:	4603      	mov	r3, r0
   23214:	b108      	cbz	r0, 2321a <mbedtls_sha256_finish_ret+0x134>
}
   23216:	4618      	mov	r0, r3
   23218:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
   2321a:	2238      	movs	r2, #56	; 0x38
   2321c:	2100      	movs	r1, #0
   2321e:	4630      	mov	r0, r6
   23220:	f7ed fa3b 	bl	1069a <memset>
   23224:	e774      	b.n	23110 <mbedtls_sha256_finish_ret+0x2a>
	...

00023228 <os_malloc_lock>:
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
{
   23228:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   2322a:	4b08      	ldr	r3, [pc, #32]	; (2324c <os_malloc_lock+0x24>)
   2322c:	681b      	ldr	r3, [r3, #0]
   2322e:	b903      	cbnz	r3, 23232 <os_malloc_lock+0xa>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
    }
#endif
}
   23230:	bd08      	pop	{r3, pc}
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   23232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23236:	4806      	ldr	r0, [pc, #24]	; (23250 <os_malloc_lock+0x28>)
   23238:	f7e7 fd78 	bl	ad2c <os_mutex_pend>
        assert(rc == 0);
   2323c:	2800      	cmp	r0, #0
   2323e:	d0f7      	beq.n	23230 <os_malloc_lock+0x8>
   23240:	2300      	movs	r3, #0
   23242:	461a      	mov	r2, r3
   23244:	4619      	mov	r1, r3
   23246:	4618      	mov	r0, r3
   23248:	f7e5 ffbc 	bl	91c4 <__assert_func>
   2324c:	200025d0 	.word	0x200025d0
   23250:	200052a0 	.word	0x200052a0

00023254 <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   23254:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   23256:	4b07      	ldr	r3, [pc, #28]	; (23274 <os_malloc_unlock+0x20>)
   23258:	681b      	ldr	r3, [r3, #0]
   2325a:	b903      	cbnz	r3, 2325e <os_malloc_unlock+0xa>
        rc = os_mutex_release(&os_malloc_mutex);
        assert(rc == 0);
    }
#endif
}
   2325c:	bd08      	pop	{r3, pc}
        rc = os_mutex_release(&os_malloc_mutex);
   2325e:	4806      	ldr	r0, [pc, #24]	; (23278 <os_malloc_unlock+0x24>)
   23260:	f7e7 fd08 	bl	ac74 <os_mutex_release>
        assert(rc == 0);
   23264:	2800      	cmp	r0, #0
   23266:	d0f9      	beq.n	2325c <os_malloc_unlock+0x8>
   23268:	2300      	movs	r3, #0
   2326a:	461a      	mov	r2, r3
   2326c:	4619      	mov	r1, r3
   2326e:	4618      	mov	r0, r3
   23270:	f7e5 ffa8 	bl	91c4 <__assert_func>
   23274:	200025d0 	.word	0x200025d0
   23278:	200052a0 	.word	0x200052a0

0002327c <os_malloc>:

void *
os_malloc(size_t size)
{
   2327c:	b510      	push	{r4, lr}
   2327e:	4604      	mov	r4, r0
    void *ptr;

    os_malloc_lock();
   23280:	f7ff ffd2 	bl	23228 <os_malloc_lock>
    ptr = malloc(size);
   23284:	4620      	mov	r0, r4
   23286:	f7ed f98b 	bl	105a0 <malloc>
   2328a:	4604      	mov	r4, r0
    os_malloc_unlock();
   2328c:	f7ff ffe2 	bl	23254 <os_malloc_unlock>

    return ptr;
}
   23290:	4620      	mov	r0, r4
   23292:	bd10      	pop	{r4, pc}

00023294 <os_free>:

void
os_free(void *mem)
{
   23294:	b510      	push	{r4, lr}
   23296:	4604      	mov	r4, r0
    os_malloc_lock();
   23298:	f7ff ffc6 	bl	23228 <os_malloc_lock>
    free(mem);
   2329c:	4620      	mov	r0, r4
   2329e:	f7ed f9b5 	bl	1060c <free>
    os_malloc_unlock();
   232a2:	f7ff ffd7 	bl	23254 <os_malloc_unlock>
}
   232a6:	bd10      	pop	{r4, pc}

000232a8 <__aeabi_drsub>:
   232a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   232ac:	e002      	b.n	232b4 <__adddf3>
   232ae:	bf00      	nop

000232b0 <__aeabi_dsub>:
   232b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000232b4 <__adddf3>:
   232b4:	b530      	push	{r4, r5, lr}
   232b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   232ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   232be:	ea94 0f05 	teq	r4, r5
   232c2:	bf08      	it	eq
   232c4:	ea90 0f02 	teqeq	r0, r2
   232c8:	bf1f      	itttt	ne
   232ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   232ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   232d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   232d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   232da:	f000 80e2 	beq.w	234a2 <__adddf3+0x1ee>
   232de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   232e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   232e6:	bfb8      	it	lt
   232e8:	426d      	neglt	r5, r5
   232ea:	dd0c      	ble.n	23306 <__adddf3+0x52>
   232ec:	442c      	add	r4, r5
   232ee:	ea80 0202 	eor.w	r2, r0, r2
   232f2:	ea81 0303 	eor.w	r3, r1, r3
   232f6:	ea82 0000 	eor.w	r0, r2, r0
   232fa:	ea83 0101 	eor.w	r1, r3, r1
   232fe:	ea80 0202 	eor.w	r2, r0, r2
   23302:	ea81 0303 	eor.w	r3, r1, r3
   23306:	2d36      	cmp	r5, #54	; 0x36
   23308:	bf88      	it	hi
   2330a:	bd30      	pophi	{r4, r5, pc}
   2330c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   23310:	ea4f 3101 	mov.w	r1, r1, lsl #12
   23314:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   23318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   2331c:	d002      	beq.n	23324 <__adddf3+0x70>
   2331e:	4240      	negs	r0, r0
   23320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23324:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   23328:	ea4f 3303 	mov.w	r3, r3, lsl #12
   2332c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   23330:	d002      	beq.n	23338 <__adddf3+0x84>
   23332:	4252      	negs	r2, r2
   23334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   23338:	ea94 0f05 	teq	r4, r5
   2333c:	f000 80a7 	beq.w	2348e <__adddf3+0x1da>
   23340:	f1a4 0401 	sub.w	r4, r4, #1
   23344:	f1d5 0e20 	rsbs	lr, r5, #32
   23348:	db0d      	blt.n	23366 <__adddf3+0xb2>
   2334a:	fa02 fc0e 	lsl.w	ip, r2, lr
   2334e:	fa22 f205 	lsr.w	r2, r2, r5
   23352:	1880      	adds	r0, r0, r2
   23354:	f141 0100 	adc.w	r1, r1, #0
   23358:	fa03 f20e 	lsl.w	r2, r3, lr
   2335c:	1880      	adds	r0, r0, r2
   2335e:	fa43 f305 	asr.w	r3, r3, r5
   23362:	4159      	adcs	r1, r3
   23364:	e00e      	b.n	23384 <__adddf3+0xd0>
   23366:	f1a5 0520 	sub.w	r5, r5, #32
   2336a:	f10e 0e20 	add.w	lr, lr, #32
   2336e:	2a01      	cmp	r2, #1
   23370:	fa03 fc0e 	lsl.w	ip, r3, lr
   23374:	bf28      	it	cs
   23376:	f04c 0c02 	orrcs.w	ip, ip, #2
   2337a:	fa43 f305 	asr.w	r3, r3, r5
   2337e:	18c0      	adds	r0, r0, r3
   23380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   23384:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   23388:	d507      	bpl.n	2339a <__adddf3+0xe6>
   2338a:	f04f 0e00 	mov.w	lr, #0
   2338e:	f1dc 0c00 	rsbs	ip, ip, #0
   23392:	eb7e 0000 	sbcs.w	r0, lr, r0
   23396:	eb6e 0101 	sbc.w	r1, lr, r1
   2339a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   2339e:	d31b      	bcc.n	233d8 <__adddf3+0x124>
   233a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   233a4:	d30c      	bcc.n	233c0 <__adddf3+0x10c>
   233a6:	0849      	lsrs	r1, r1, #1
   233a8:	ea5f 0030 	movs.w	r0, r0, rrx
   233ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   233b0:	f104 0401 	add.w	r4, r4, #1
   233b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   233b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   233bc:	f080 809a 	bcs.w	234f4 <__adddf3+0x240>
   233c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   233c4:	bf08      	it	eq
   233c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   233ca:	f150 0000 	adcs.w	r0, r0, #0
   233ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   233d2:	ea41 0105 	orr.w	r1, r1, r5
   233d6:	bd30      	pop	{r4, r5, pc}
   233d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   233dc:	4140      	adcs	r0, r0
   233de:	eb41 0101 	adc.w	r1, r1, r1
   233e2:	3c01      	subs	r4, #1
   233e4:	bf28      	it	cs
   233e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   233ea:	d2e9      	bcs.n	233c0 <__adddf3+0x10c>
   233ec:	f091 0f00 	teq	r1, #0
   233f0:	bf04      	itt	eq
   233f2:	4601      	moveq	r1, r0
   233f4:	2000      	moveq	r0, #0
   233f6:	fab1 f381 	clz	r3, r1
   233fa:	bf08      	it	eq
   233fc:	3320      	addeq	r3, #32
   233fe:	f1a3 030b 	sub.w	r3, r3, #11
   23402:	f1b3 0220 	subs.w	r2, r3, #32
   23406:	da0c      	bge.n	23422 <__adddf3+0x16e>
   23408:	320c      	adds	r2, #12
   2340a:	dd08      	ble.n	2341e <__adddf3+0x16a>
   2340c:	f102 0c14 	add.w	ip, r2, #20
   23410:	f1c2 020c 	rsb	r2, r2, #12
   23414:	fa01 f00c 	lsl.w	r0, r1, ip
   23418:	fa21 f102 	lsr.w	r1, r1, r2
   2341c:	e00c      	b.n	23438 <__adddf3+0x184>
   2341e:	f102 0214 	add.w	r2, r2, #20
   23422:	bfd8      	it	le
   23424:	f1c2 0c20 	rsble	ip, r2, #32
   23428:	fa01 f102 	lsl.w	r1, r1, r2
   2342c:	fa20 fc0c 	lsr.w	ip, r0, ip
   23430:	bfdc      	itt	le
   23432:	ea41 010c 	orrle.w	r1, r1, ip
   23436:	4090      	lslle	r0, r2
   23438:	1ae4      	subs	r4, r4, r3
   2343a:	bfa2      	ittt	ge
   2343c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   23440:	4329      	orrge	r1, r5
   23442:	bd30      	popge	{r4, r5, pc}
   23444:	ea6f 0404 	mvn.w	r4, r4
   23448:	3c1f      	subs	r4, #31
   2344a:	da1c      	bge.n	23486 <__adddf3+0x1d2>
   2344c:	340c      	adds	r4, #12
   2344e:	dc0e      	bgt.n	2346e <__adddf3+0x1ba>
   23450:	f104 0414 	add.w	r4, r4, #20
   23454:	f1c4 0220 	rsb	r2, r4, #32
   23458:	fa20 f004 	lsr.w	r0, r0, r4
   2345c:	fa01 f302 	lsl.w	r3, r1, r2
   23460:	ea40 0003 	orr.w	r0, r0, r3
   23464:	fa21 f304 	lsr.w	r3, r1, r4
   23468:	ea45 0103 	orr.w	r1, r5, r3
   2346c:	bd30      	pop	{r4, r5, pc}
   2346e:	f1c4 040c 	rsb	r4, r4, #12
   23472:	f1c4 0220 	rsb	r2, r4, #32
   23476:	fa20 f002 	lsr.w	r0, r0, r2
   2347a:	fa01 f304 	lsl.w	r3, r1, r4
   2347e:	ea40 0003 	orr.w	r0, r0, r3
   23482:	4629      	mov	r1, r5
   23484:	bd30      	pop	{r4, r5, pc}
   23486:	fa21 f004 	lsr.w	r0, r1, r4
   2348a:	4629      	mov	r1, r5
   2348c:	bd30      	pop	{r4, r5, pc}
   2348e:	f094 0f00 	teq	r4, #0
   23492:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   23496:	bf06      	itte	eq
   23498:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   2349c:	3401      	addeq	r4, #1
   2349e:	3d01      	subne	r5, #1
   234a0:	e74e      	b.n	23340 <__adddf3+0x8c>
   234a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   234a6:	bf18      	it	ne
   234a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   234ac:	d029      	beq.n	23502 <__adddf3+0x24e>
   234ae:	ea94 0f05 	teq	r4, r5
   234b2:	bf08      	it	eq
   234b4:	ea90 0f02 	teqeq	r0, r2
   234b8:	d005      	beq.n	234c6 <__adddf3+0x212>
   234ba:	ea54 0c00 	orrs.w	ip, r4, r0
   234be:	bf04      	itt	eq
   234c0:	4619      	moveq	r1, r3
   234c2:	4610      	moveq	r0, r2
   234c4:	bd30      	pop	{r4, r5, pc}
   234c6:	ea91 0f03 	teq	r1, r3
   234ca:	bf1e      	ittt	ne
   234cc:	2100      	movne	r1, #0
   234ce:	2000      	movne	r0, #0
   234d0:	bd30      	popne	{r4, r5, pc}
   234d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   234d6:	d105      	bne.n	234e4 <__adddf3+0x230>
   234d8:	0040      	lsls	r0, r0, #1
   234da:	4149      	adcs	r1, r1
   234dc:	bf28      	it	cs
   234de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   234e2:	bd30      	pop	{r4, r5, pc}
   234e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   234e8:	bf3c      	itt	cc
   234ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   234ee:	bd30      	popcc	{r4, r5, pc}
   234f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   234f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   234f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   234fc:	f04f 0000 	mov.w	r0, #0
   23500:	bd30      	pop	{r4, r5, pc}
   23502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   23506:	bf1a      	itte	ne
   23508:	4619      	movne	r1, r3
   2350a:	4610      	movne	r0, r2
   2350c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   23510:	bf1c      	itt	ne
   23512:	460b      	movne	r3, r1
   23514:	4602      	movne	r2, r0
   23516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   2351a:	bf06      	itte	eq
   2351c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   23520:	ea91 0f03 	teqeq	r1, r3
   23524:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   23528:	bd30      	pop	{r4, r5, pc}
   2352a:	bf00      	nop

0002352c <__aeabi_ui2d>:
   2352c:	f090 0f00 	teq	r0, #0
   23530:	bf04      	itt	eq
   23532:	2100      	moveq	r1, #0
   23534:	4770      	bxeq	lr
   23536:	b530      	push	{r4, r5, lr}
   23538:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2353c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   23540:	f04f 0500 	mov.w	r5, #0
   23544:	f04f 0100 	mov.w	r1, #0
   23548:	e750      	b.n	233ec <__adddf3+0x138>
   2354a:	bf00      	nop

0002354c <__aeabi_i2d>:
   2354c:	f090 0f00 	teq	r0, #0
   23550:	bf04      	itt	eq
   23552:	2100      	moveq	r1, #0
   23554:	4770      	bxeq	lr
   23556:	b530      	push	{r4, r5, lr}
   23558:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2355c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   23560:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   23564:	bf48      	it	mi
   23566:	4240      	negmi	r0, r0
   23568:	f04f 0100 	mov.w	r1, #0
   2356c:	e73e      	b.n	233ec <__adddf3+0x138>
   2356e:	bf00      	nop

00023570 <__aeabi_f2d>:
   23570:	0042      	lsls	r2, r0, #1
   23572:	ea4f 01e2 	mov.w	r1, r2, asr #3
   23576:	ea4f 0131 	mov.w	r1, r1, rrx
   2357a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   2357e:	bf1f      	itttt	ne
   23580:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   23584:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   23588:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   2358c:	4770      	bxne	lr
   2358e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   23592:	bf08      	it	eq
   23594:	4770      	bxeq	lr
   23596:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   2359a:	bf04      	itt	eq
   2359c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   235a0:	4770      	bxeq	lr
   235a2:	b530      	push	{r4, r5, lr}
   235a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   235a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   235ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   235b0:	e71c      	b.n	233ec <__adddf3+0x138>
   235b2:	bf00      	nop

000235b4 <__aeabi_ul2d>:
   235b4:	ea50 0201 	orrs.w	r2, r0, r1
   235b8:	bf08      	it	eq
   235ba:	4770      	bxeq	lr
   235bc:	b530      	push	{r4, r5, lr}
   235be:	f04f 0500 	mov.w	r5, #0
   235c2:	e00a      	b.n	235da <__aeabi_l2d+0x16>

000235c4 <__aeabi_l2d>:
   235c4:	ea50 0201 	orrs.w	r2, r0, r1
   235c8:	bf08      	it	eq
   235ca:	4770      	bxeq	lr
   235cc:	b530      	push	{r4, r5, lr}
   235ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   235d2:	d502      	bpl.n	235da <__aeabi_l2d+0x16>
   235d4:	4240      	negs	r0, r0
   235d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   235da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   235de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   235e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   235e6:	f43f aed8 	beq.w	2339a <__adddf3+0xe6>
   235ea:	f04f 0203 	mov.w	r2, #3
   235ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   235f2:	bf18      	it	ne
   235f4:	3203      	addne	r2, #3
   235f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   235fa:	bf18      	it	ne
   235fc:	3203      	addne	r2, #3
   235fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   23602:	f1c2 0320 	rsb	r3, r2, #32
   23606:	fa00 fc03 	lsl.w	ip, r0, r3
   2360a:	fa20 f002 	lsr.w	r0, r0, r2
   2360e:	fa01 fe03 	lsl.w	lr, r1, r3
   23612:	ea40 000e 	orr.w	r0, r0, lr
   23616:	fa21 f102 	lsr.w	r1, r1, r2
   2361a:	4414      	add	r4, r2
   2361c:	e6bd      	b.n	2339a <__adddf3+0xe6>
   2361e:	bf00      	nop

00023620 <__aeabi_dmul>:
   23620:	b570      	push	{r4, r5, r6, lr}
   23622:	f04f 0cff 	mov.w	ip, #255	; 0xff
   23626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2362a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   2362e:	bf1d      	ittte	ne
   23630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   23634:	ea94 0f0c 	teqne	r4, ip
   23638:	ea95 0f0c 	teqne	r5, ip
   2363c:	f000 f8de 	bleq	237fc <__aeabi_dmul+0x1dc>
   23640:	442c      	add	r4, r5
   23642:	ea81 0603 	eor.w	r6, r1, r3
   23646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   2364a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   2364e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   23652:	bf18      	it	ne
   23654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   23658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2365c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23660:	d038      	beq.n	236d4 <__aeabi_dmul+0xb4>
   23662:	fba0 ce02 	umull	ip, lr, r0, r2
   23666:	f04f 0500 	mov.w	r5, #0
   2366a:	fbe1 e502 	umlal	lr, r5, r1, r2
   2366e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   23672:	fbe0 e503 	umlal	lr, r5, r0, r3
   23676:	f04f 0600 	mov.w	r6, #0
   2367a:	fbe1 5603 	umlal	r5, r6, r1, r3
   2367e:	f09c 0f00 	teq	ip, #0
   23682:	bf18      	it	ne
   23684:	f04e 0e01 	orrne.w	lr, lr, #1
   23688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   2368c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   23690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   23694:	d204      	bcs.n	236a0 <__aeabi_dmul+0x80>
   23696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   2369a:	416d      	adcs	r5, r5
   2369c:	eb46 0606 	adc.w	r6, r6, r6
   236a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   236a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   236a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   236ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   236b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   236b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   236b8:	bf88      	it	hi
   236ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   236be:	d81e      	bhi.n	236fe <__aeabi_dmul+0xde>
   236c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   236c4:	bf08      	it	eq
   236c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   236ca:	f150 0000 	adcs.w	r0, r0, #0
   236ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   236d2:	bd70      	pop	{r4, r5, r6, pc}
   236d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   236d8:	ea46 0101 	orr.w	r1, r6, r1
   236dc:	ea40 0002 	orr.w	r0, r0, r2
   236e0:	ea81 0103 	eor.w	r1, r1, r3
   236e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   236e8:	bfc2      	ittt	gt
   236ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   236ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   236f2:	bd70      	popgt	{r4, r5, r6, pc}
   236f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   236f8:	f04f 0e00 	mov.w	lr, #0
   236fc:	3c01      	subs	r4, #1
   236fe:	f300 80ab 	bgt.w	23858 <__aeabi_dmul+0x238>
   23702:	f114 0f36 	cmn.w	r4, #54	; 0x36
   23706:	bfde      	ittt	le
   23708:	2000      	movle	r0, #0
   2370a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   2370e:	bd70      	pople	{r4, r5, r6, pc}
   23710:	f1c4 0400 	rsb	r4, r4, #0
   23714:	3c20      	subs	r4, #32
   23716:	da35      	bge.n	23784 <__aeabi_dmul+0x164>
   23718:	340c      	adds	r4, #12
   2371a:	dc1b      	bgt.n	23754 <__aeabi_dmul+0x134>
   2371c:	f104 0414 	add.w	r4, r4, #20
   23720:	f1c4 0520 	rsb	r5, r4, #32
   23724:	fa00 f305 	lsl.w	r3, r0, r5
   23728:	fa20 f004 	lsr.w	r0, r0, r4
   2372c:	fa01 f205 	lsl.w	r2, r1, r5
   23730:	ea40 0002 	orr.w	r0, r0, r2
   23734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   23738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2373c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   23740:	fa21 f604 	lsr.w	r6, r1, r4
   23744:	eb42 0106 	adc.w	r1, r2, r6
   23748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   2374c:	bf08      	it	eq
   2374e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   23752:	bd70      	pop	{r4, r5, r6, pc}
   23754:	f1c4 040c 	rsb	r4, r4, #12
   23758:	f1c4 0520 	rsb	r5, r4, #32
   2375c:	fa00 f304 	lsl.w	r3, r0, r4
   23760:	fa20 f005 	lsr.w	r0, r0, r5
   23764:	fa01 f204 	lsl.w	r2, r1, r4
   23768:	ea40 0002 	orr.w	r0, r0, r2
   2376c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   23770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   23774:	f141 0100 	adc.w	r1, r1, #0
   23778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   2377c:	bf08      	it	eq
   2377e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   23782:	bd70      	pop	{r4, r5, r6, pc}
   23784:	f1c4 0520 	rsb	r5, r4, #32
   23788:	fa00 f205 	lsl.w	r2, r0, r5
   2378c:	ea4e 0e02 	orr.w	lr, lr, r2
   23790:	fa20 f304 	lsr.w	r3, r0, r4
   23794:	fa01 f205 	lsl.w	r2, r1, r5
   23798:	ea43 0302 	orr.w	r3, r3, r2
   2379c:	fa21 f004 	lsr.w	r0, r1, r4
   237a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   237a4:	fa21 f204 	lsr.w	r2, r1, r4
   237a8:	ea20 0002 	bic.w	r0, r0, r2
   237ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   237b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   237b4:	bf08      	it	eq
   237b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   237ba:	bd70      	pop	{r4, r5, r6, pc}
   237bc:	f094 0f00 	teq	r4, #0
   237c0:	d10f      	bne.n	237e2 <__aeabi_dmul+0x1c2>
   237c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   237c6:	0040      	lsls	r0, r0, #1
   237c8:	eb41 0101 	adc.w	r1, r1, r1
   237cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   237d0:	bf08      	it	eq
   237d2:	3c01      	subeq	r4, #1
   237d4:	d0f7      	beq.n	237c6 <__aeabi_dmul+0x1a6>
   237d6:	ea41 0106 	orr.w	r1, r1, r6
   237da:	f095 0f00 	teq	r5, #0
   237de:	bf18      	it	ne
   237e0:	4770      	bxne	lr
   237e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   237e6:	0052      	lsls	r2, r2, #1
   237e8:	eb43 0303 	adc.w	r3, r3, r3
   237ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   237f0:	bf08      	it	eq
   237f2:	3d01      	subeq	r5, #1
   237f4:	d0f7      	beq.n	237e6 <__aeabi_dmul+0x1c6>
   237f6:	ea43 0306 	orr.w	r3, r3, r6
   237fa:	4770      	bx	lr
   237fc:	ea94 0f0c 	teq	r4, ip
   23800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   23804:	bf18      	it	ne
   23806:	ea95 0f0c 	teqne	r5, ip
   2380a:	d00c      	beq.n	23826 <__aeabi_dmul+0x206>
   2380c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   23810:	bf18      	it	ne
   23812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   23816:	d1d1      	bne.n	237bc <__aeabi_dmul+0x19c>
   23818:	ea81 0103 	eor.w	r1, r1, r3
   2381c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   23820:	f04f 0000 	mov.w	r0, #0
   23824:	bd70      	pop	{r4, r5, r6, pc}
   23826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   2382a:	bf06      	itte	eq
   2382c:	4610      	moveq	r0, r2
   2382e:	4619      	moveq	r1, r3
   23830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   23834:	d019      	beq.n	2386a <__aeabi_dmul+0x24a>
   23836:	ea94 0f0c 	teq	r4, ip
   2383a:	d102      	bne.n	23842 <__aeabi_dmul+0x222>
   2383c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   23840:	d113      	bne.n	2386a <__aeabi_dmul+0x24a>
   23842:	ea95 0f0c 	teq	r5, ip
   23846:	d105      	bne.n	23854 <__aeabi_dmul+0x234>
   23848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   2384c:	bf1c      	itt	ne
   2384e:	4610      	movne	r0, r2
   23850:	4619      	movne	r1, r3
   23852:	d10a      	bne.n	2386a <__aeabi_dmul+0x24a>
   23854:	ea81 0103 	eor.w	r1, r1, r3
   23858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   2385c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   23860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   23864:	f04f 0000 	mov.w	r0, #0
   23868:	bd70      	pop	{r4, r5, r6, pc}
   2386a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   2386e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   23872:	bd70      	pop	{r4, r5, r6, pc}

00023874 <__aeabi_ddiv>:
   23874:	b570      	push	{r4, r5, r6, lr}
   23876:	f04f 0cff 	mov.w	ip, #255	; 0xff
   2387a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2387e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   23882:	bf1d      	ittte	ne
   23884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   23888:	ea94 0f0c 	teqne	r4, ip
   2388c:	ea95 0f0c 	teqne	r5, ip
   23890:	f000 f8a7 	bleq	239e2 <__aeabi_ddiv+0x16e>
   23894:	eba4 0405 	sub.w	r4, r4, r5
   23898:	ea81 0e03 	eor.w	lr, r1, r3
   2389c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   238a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   238a4:	f000 8088 	beq.w	239b8 <__aeabi_ddiv+0x144>
   238a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   238ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   238b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   238b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   238b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   238bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   238c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   238c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   238c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   238cc:	429d      	cmp	r5, r3
   238ce:	bf08      	it	eq
   238d0:	4296      	cmpeq	r6, r2
   238d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   238d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   238da:	d202      	bcs.n	238e2 <__aeabi_ddiv+0x6e>
   238dc:	085b      	lsrs	r3, r3, #1
   238de:	ea4f 0232 	mov.w	r2, r2, rrx
   238e2:	1ab6      	subs	r6, r6, r2
   238e4:	eb65 0503 	sbc.w	r5, r5, r3
   238e8:	085b      	lsrs	r3, r3, #1
   238ea:	ea4f 0232 	mov.w	r2, r2, rrx
   238ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   238f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   238f6:	ebb6 0e02 	subs.w	lr, r6, r2
   238fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   238fe:	bf22      	ittt	cs
   23900:	1ab6      	subcs	r6, r6, r2
   23902:	4675      	movcs	r5, lr
   23904:	ea40 000c 	orrcs.w	r0, r0, ip
   23908:	085b      	lsrs	r3, r3, #1
   2390a:	ea4f 0232 	mov.w	r2, r2, rrx
   2390e:	ebb6 0e02 	subs.w	lr, r6, r2
   23912:	eb75 0e03 	sbcs.w	lr, r5, r3
   23916:	bf22      	ittt	cs
   23918:	1ab6      	subcs	r6, r6, r2
   2391a:	4675      	movcs	r5, lr
   2391c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   23920:	085b      	lsrs	r3, r3, #1
   23922:	ea4f 0232 	mov.w	r2, r2, rrx
   23926:	ebb6 0e02 	subs.w	lr, r6, r2
   2392a:	eb75 0e03 	sbcs.w	lr, r5, r3
   2392e:	bf22      	ittt	cs
   23930:	1ab6      	subcs	r6, r6, r2
   23932:	4675      	movcs	r5, lr
   23934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   23938:	085b      	lsrs	r3, r3, #1
   2393a:	ea4f 0232 	mov.w	r2, r2, rrx
   2393e:	ebb6 0e02 	subs.w	lr, r6, r2
   23942:	eb75 0e03 	sbcs.w	lr, r5, r3
   23946:	bf22      	ittt	cs
   23948:	1ab6      	subcs	r6, r6, r2
   2394a:	4675      	movcs	r5, lr
   2394c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   23950:	ea55 0e06 	orrs.w	lr, r5, r6
   23954:	d018      	beq.n	23988 <__aeabi_ddiv+0x114>
   23956:	ea4f 1505 	mov.w	r5, r5, lsl #4
   2395a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   2395e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   23962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   23966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   2396a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   2396e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   23972:	d1c0      	bne.n	238f6 <__aeabi_ddiv+0x82>
   23974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   23978:	d10b      	bne.n	23992 <__aeabi_ddiv+0x11e>
   2397a:	ea41 0100 	orr.w	r1, r1, r0
   2397e:	f04f 0000 	mov.w	r0, #0
   23982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   23986:	e7b6      	b.n	238f6 <__aeabi_ddiv+0x82>
   23988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   2398c:	bf04      	itt	eq
   2398e:	4301      	orreq	r1, r0
   23990:	2000      	moveq	r0, #0
   23992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   23996:	bf88      	it	hi
   23998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   2399c:	f63f aeaf 	bhi.w	236fe <__aeabi_dmul+0xde>
   239a0:	ebb5 0c03 	subs.w	ip, r5, r3
   239a4:	bf04      	itt	eq
   239a6:	ebb6 0c02 	subseq.w	ip, r6, r2
   239aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   239ae:	f150 0000 	adcs.w	r0, r0, #0
   239b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   239b6:	bd70      	pop	{r4, r5, r6, pc}
   239b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   239bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   239c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   239c4:	bfc2      	ittt	gt
   239c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   239ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   239ce:	bd70      	popgt	{r4, r5, r6, pc}
   239d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   239d4:	f04f 0e00 	mov.w	lr, #0
   239d8:	3c01      	subs	r4, #1
   239da:	e690      	b.n	236fe <__aeabi_dmul+0xde>
   239dc:	ea45 0e06 	orr.w	lr, r5, r6
   239e0:	e68d      	b.n	236fe <__aeabi_dmul+0xde>
   239e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   239e6:	ea94 0f0c 	teq	r4, ip
   239ea:	bf08      	it	eq
   239ec:	ea95 0f0c 	teqeq	r5, ip
   239f0:	f43f af3b 	beq.w	2386a <__aeabi_dmul+0x24a>
   239f4:	ea94 0f0c 	teq	r4, ip
   239f8:	d10a      	bne.n	23a10 <__aeabi_ddiv+0x19c>
   239fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   239fe:	f47f af34 	bne.w	2386a <__aeabi_dmul+0x24a>
   23a02:	ea95 0f0c 	teq	r5, ip
   23a06:	f47f af25 	bne.w	23854 <__aeabi_dmul+0x234>
   23a0a:	4610      	mov	r0, r2
   23a0c:	4619      	mov	r1, r3
   23a0e:	e72c      	b.n	2386a <__aeabi_dmul+0x24a>
   23a10:	ea95 0f0c 	teq	r5, ip
   23a14:	d106      	bne.n	23a24 <__aeabi_ddiv+0x1b0>
   23a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   23a1a:	f43f aefd 	beq.w	23818 <__aeabi_dmul+0x1f8>
   23a1e:	4610      	mov	r0, r2
   23a20:	4619      	mov	r1, r3
   23a22:	e722      	b.n	2386a <__aeabi_dmul+0x24a>
   23a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   23a28:	bf18      	it	ne
   23a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   23a2e:	f47f aec5 	bne.w	237bc <__aeabi_dmul+0x19c>
   23a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   23a36:	f47f af0d 	bne.w	23854 <__aeabi_dmul+0x234>
   23a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   23a3e:	f47f aeeb 	bne.w	23818 <__aeabi_dmul+0x1f8>
   23a42:	e712      	b.n	2386a <__aeabi_dmul+0x24a>

00023a44 <__gedf2>:
   23a44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   23a48:	e006      	b.n	23a58 <__cmpdf2+0x4>
   23a4a:	bf00      	nop

00023a4c <__ledf2>:
   23a4c:	f04f 0c01 	mov.w	ip, #1
   23a50:	e002      	b.n	23a58 <__cmpdf2+0x4>
   23a52:	bf00      	nop

00023a54 <__cmpdf2>:
   23a54:	f04f 0c01 	mov.w	ip, #1
   23a58:	f84d cd04 	str.w	ip, [sp, #-4]!
   23a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   23a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   23a68:	bf18      	it	ne
   23a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   23a6e:	d01b      	beq.n	23aa8 <__cmpdf2+0x54>
   23a70:	b001      	add	sp, #4
   23a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   23a76:	bf0c      	ite	eq
   23a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   23a7c:	ea91 0f03 	teqne	r1, r3
   23a80:	bf02      	ittt	eq
   23a82:	ea90 0f02 	teqeq	r0, r2
   23a86:	2000      	moveq	r0, #0
   23a88:	4770      	bxeq	lr
   23a8a:	f110 0f00 	cmn.w	r0, #0
   23a8e:	ea91 0f03 	teq	r1, r3
   23a92:	bf58      	it	pl
   23a94:	4299      	cmppl	r1, r3
   23a96:	bf08      	it	eq
   23a98:	4290      	cmpeq	r0, r2
   23a9a:	bf2c      	ite	cs
   23a9c:	17d8      	asrcs	r0, r3, #31
   23a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   23aa2:	f040 0001 	orr.w	r0, r0, #1
   23aa6:	4770      	bx	lr
   23aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   23aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23ab0:	d102      	bne.n	23ab8 <__cmpdf2+0x64>
   23ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   23ab6:	d107      	bne.n	23ac8 <__cmpdf2+0x74>
   23ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   23abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23ac0:	d1d6      	bne.n	23a70 <__cmpdf2+0x1c>
   23ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   23ac6:	d0d3      	beq.n	23a70 <__cmpdf2+0x1c>
   23ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
   23acc:	4770      	bx	lr
   23ace:	bf00      	nop

00023ad0 <__aeabi_cdrcmple>:
   23ad0:	4684      	mov	ip, r0
   23ad2:	4610      	mov	r0, r2
   23ad4:	4662      	mov	r2, ip
   23ad6:	468c      	mov	ip, r1
   23ad8:	4619      	mov	r1, r3
   23ada:	4663      	mov	r3, ip
   23adc:	e000      	b.n	23ae0 <__aeabi_cdcmpeq>
   23ade:	bf00      	nop

00023ae0 <__aeabi_cdcmpeq>:
   23ae0:	b501      	push	{r0, lr}
   23ae2:	f7ff ffb7 	bl	23a54 <__cmpdf2>
   23ae6:	2800      	cmp	r0, #0
   23ae8:	bf48      	it	mi
   23aea:	f110 0f00 	cmnmi.w	r0, #0
   23aee:	bd01      	pop	{r0, pc}

00023af0 <__aeabi_dcmpeq>:
   23af0:	f84d ed08 	str.w	lr, [sp, #-8]!
   23af4:	f7ff fff4 	bl	23ae0 <__aeabi_cdcmpeq>
   23af8:	bf0c      	ite	eq
   23afa:	2001      	moveq	r0, #1
   23afc:	2000      	movne	r0, #0
   23afe:	f85d fb08 	ldr.w	pc, [sp], #8
   23b02:	bf00      	nop

00023b04 <__aeabi_dcmplt>:
   23b04:	f84d ed08 	str.w	lr, [sp, #-8]!
   23b08:	f7ff ffea 	bl	23ae0 <__aeabi_cdcmpeq>
   23b0c:	bf34      	ite	cc
   23b0e:	2001      	movcc	r0, #1
   23b10:	2000      	movcs	r0, #0
   23b12:	f85d fb08 	ldr.w	pc, [sp], #8
   23b16:	bf00      	nop

00023b18 <__aeabi_dcmple>:
   23b18:	f84d ed08 	str.w	lr, [sp, #-8]!
   23b1c:	f7ff ffe0 	bl	23ae0 <__aeabi_cdcmpeq>
   23b20:	bf94      	ite	ls
   23b22:	2001      	movls	r0, #1
   23b24:	2000      	movhi	r0, #0
   23b26:	f85d fb08 	ldr.w	pc, [sp], #8
   23b2a:	bf00      	nop

00023b2c <__aeabi_dcmpge>:
   23b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   23b30:	f7ff ffce 	bl	23ad0 <__aeabi_cdrcmple>
   23b34:	bf94      	ite	ls
   23b36:	2001      	movls	r0, #1
   23b38:	2000      	movhi	r0, #0
   23b3a:	f85d fb08 	ldr.w	pc, [sp], #8
   23b3e:	bf00      	nop

00023b40 <__aeabi_dcmpgt>:
   23b40:	f84d ed08 	str.w	lr, [sp, #-8]!
   23b44:	f7ff ffc4 	bl	23ad0 <__aeabi_cdrcmple>
   23b48:	bf34      	ite	cc
   23b4a:	2001      	movcc	r0, #1
   23b4c:	2000      	movcs	r0, #0
   23b4e:	f85d fb08 	ldr.w	pc, [sp], #8
   23b52:	bf00      	nop

00023b54 <__aeabi_dcmpun>:
   23b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   23b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23b5c:	d102      	bne.n	23b64 <__aeabi_dcmpun+0x10>
   23b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   23b62:	d10a      	bne.n	23b7a <__aeabi_dcmpun+0x26>
   23b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   23b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   23b6c:	d102      	bne.n	23b74 <__aeabi_dcmpun+0x20>
   23b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   23b72:	d102      	bne.n	23b7a <__aeabi_dcmpun+0x26>
   23b74:	f04f 0000 	mov.w	r0, #0
   23b78:	4770      	bx	lr
   23b7a:	f04f 0001 	mov.w	r0, #1
   23b7e:	4770      	bx	lr

00023b80 <__aeabi_d2iz>:
   23b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
   23b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   23b88:	d215      	bcs.n	23bb6 <__aeabi_d2iz+0x36>
   23b8a:	d511      	bpl.n	23bb0 <__aeabi_d2iz+0x30>
   23b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   23b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   23b94:	d912      	bls.n	23bbc <__aeabi_d2iz+0x3c>
   23b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   23b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   23ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   23ba6:	fa23 f002 	lsr.w	r0, r3, r2
   23baa:	bf18      	it	ne
   23bac:	4240      	negne	r0, r0
   23bae:	4770      	bx	lr
   23bb0:	f04f 0000 	mov.w	r0, #0
   23bb4:	4770      	bx	lr
   23bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   23bba:	d105      	bne.n	23bc8 <__aeabi_d2iz+0x48>
   23bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   23bc0:	bf08      	it	eq
   23bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   23bc6:	4770      	bx	lr
   23bc8:	f04f 0000 	mov.w	r0, #0
   23bcc:	4770      	bx	lr
   23bce:	bf00      	nop

00023bd0 <__aeabi_d2uiz>:
   23bd0:	004a      	lsls	r2, r1, #1
   23bd2:	d211      	bcs.n	23bf8 <__aeabi_d2uiz+0x28>
   23bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   23bd8:	d211      	bcs.n	23bfe <__aeabi_d2uiz+0x2e>
   23bda:	d50d      	bpl.n	23bf8 <__aeabi_d2uiz+0x28>
   23bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   23be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   23be4:	d40e      	bmi.n	23c04 <__aeabi_d2uiz+0x34>
   23be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   23bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   23bf2:	fa23 f002 	lsr.w	r0, r3, r2
   23bf6:	4770      	bx	lr
   23bf8:	f04f 0000 	mov.w	r0, #0
   23bfc:	4770      	bx	lr
   23bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   23c02:	d102      	bne.n	23c0a <__aeabi_d2uiz+0x3a>
   23c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c08:	4770      	bx	lr
   23c0a:	f04f 0000 	mov.w	r0, #0
   23c0e:	4770      	bx	lr

00023c10 <__aeabi_d2f>:
   23c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
   23c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   23c18:	bf24      	itt	cs
   23c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   23c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   23c22:	d90d      	bls.n	23c40 <__aeabi_d2f+0x30>
   23c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   23c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   23c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   23c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   23c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   23c38:	bf08      	it	eq
   23c3a:	f020 0001 	biceq.w	r0, r0, #1
   23c3e:	4770      	bx	lr
   23c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   23c44:	d121      	bne.n	23c8a <__aeabi_d2f+0x7a>
   23c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   23c4a:	bfbc      	itt	lt
   23c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   23c50:	4770      	bxlt	lr
   23c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   23c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
   23c5a:	f1c2 0218 	rsb	r2, r2, #24
   23c5e:	f1c2 0c20 	rsb	ip, r2, #32
   23c62:	fa10 f30c 	lsls.w	r3, r0, ip
   23c66:	fa20 f002 	lsr.w	r0, r0, r2
   23c6a:	bf18      	it	ne
   23c6c:	f040 0001 	orrne.w	r0, r0, #1
   23c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   23c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   23c78:	fa03 fc0c 	lsl.w	ip, r3, ip
   23c7c:	ea40 000c 	orr.w	r0, r0, ip
   23c80:	fa23 f302 	lsr.w	r3, r3, r2
   23c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
   23c88:	e7cc      	b.n	23c24 <__aeabi_d2f+0x14>
   23c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   23c8e:	d107      	bne.n	23ca0 <__aeabi_d2f+0x90>
   23c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   23c94:	bf1e      	ittt	ne
   23c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   23c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   23c9e:	4770      	bxne	lr
   23ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   23ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   23ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   23cac:	4770      	bx	lr
   23cae:	bf00      	nop

00023cb0 <__aeabi_frsub>:
   23cb0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   23cb4:	e002      	b.n	23cbc <__addsf3>
   23cb6:	bf00      	nop

00023cb8 <__aeabi_fsub>:
   23cb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00023cbc <__addsf3>:
   23cbc:	0042      	lsls	r2, r0, #1
   23cbe:	bf1f      	itttt	ne
   23cc0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   23cc4:	ea92 0f03 	teqne	r2, r3
   23cc8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   23ccc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   23cd0:	d06a      	beq.n	23da8 <__addsf3+0xec>
   23cd2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   23cd6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   23cda:	bfc1      	itttt	gt
   23cdc:	18d2      	addgt	r2, r2, r3
   23cde:	4041      	eorgt	r1, r0
   23ce0:	4048      	eorgt	r0, r1
   23ce2:	4041      	eorgt	r1, r0
   23ce4:	bfb8      	it	lt
   23ce6:	425b      	neglt	r3, r3
   23ce8:	2b19      	cmp	r3, #25
   23cea:	bf88      	it	hi
   23cec:	4770      	bxhi	lr
   23cee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   23cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   23cf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   23cfa:	bf18      	it	ne
   23cfc:	4240      	negne	r0, r0
   23cfe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   23d02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   23d06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   23d0a:	bf18      	it	ne
   23d0c:	4249      	negne	r1, r1
   23d0e:	ea92 0f03 	teq	r2, r3
   23d12:	d03f      	beq.n	23d94 <__addsf3+0xd8>
   23d14:	f1a2 0201 	sub.w	r2, r2, #1
   23d18:	fa41 fc03 	asr.w	ip, r1, r3
   23d1c:	eb10 000c 	adds.w	r0, r0, ip
   23d20:	f1c3 0320 	rsb	r3, r3, #32
   23d24:	fa01 f103 	lsl.w	r1, r1, r3
   23d28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   23d2c:	d502      	bpl.n	23d34 <__addsf3+0x78>
   23d2e:	4249      	negs	r1, r1
   23d30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   23d34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   23d38:	d313      	bcc.n	23d62 <__addsf3+0xa6>
   23d3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   23d3e:	d306      	bcc.n	23d4e <__addsf3+0x92>
   23d40:	0840      	lsrs	r0, r0, #1
   23d42:	ea4f 0131 	mov.w	r1, r1, rrx
   23d46:	f102 0201 	add.w	r2, r2, #1
   23d4a:	2afe      	cmp	r2, #254	; 0xfe
   23d4c:	d251      	bcs.n	23df2 <__addsf3+0x136>
   23d4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   23d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   23d56:	bf08      	it	eq
   23d58:	f020 0001 	biceq.w	r0, r0, #1
   23d5c:	ea40 0003 	orr.w	r0, r0, r3
   23d60:	4770      	bx	lr
   23d62:	0049      	lsls	r1, r1, #1
   23d64:	eb40 0000 	adc.w	r0, r0, r0
   23d68:	3a01      	subs	r2, #1
   23d6a:	bf28      	it	cs
   23d6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   23d70:	d2ed      	bcs.n	23d4e <__addsf3+0x92>
   23d72:	fab0 fc80 	clz	ip, r0
   23d76:	f1ac 0c08 	sub.w	ip, ip, #8
   23d7a:	ebb2 020c 	subs.w	r2, r2, ip
   23d7e:	fa00 f00c 	lsl.w	r0, r0, ip
   23d82:	bfaa      	itet	ge
   23d84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   23d88:	4252      	neglt	r2, r2
   23d8a:	4318      	orrge	r0, r3
   23d8c:	bfbc      	itt	lt
   23d8e:	40d0      	lsrlt	r0, r2
   23d90:	4318      	orrlt	r0, r3
   23d92:	4770      	bx	lr
   23d94:	f092 0f00 	teq	r2, #0
   23d98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   23d9c:	bf06      	itte	eq
   23d9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   23da2:	3201      	addeq	r2, #1
   23da4:	3b01      	subne	r3, #1
   23da6:	e7b5      	b.n	23d14 <__addsf3+0x58>
   23da8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   23dac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   23db0:	bf18      	it	ne
   23db2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   23db6:	d021      	beq.n	23dfc <__addsf3+0x140>
   23db8:	ea92 0f03 	teq	r2, r3
   23dbc:	d004      	beq.n	23dc8 <__addsf3+0x10c>
   23dbe:	f092 0f00 	teq	r2, #0
   23dc2:	bf08      	it	eq
   23dc4:	4608      	moveq	r0, r1
   23dc6:	4770      	bx	lr
   23dc8:	ea90 0f01 	teq	r0, r1
   23dcc:	bf1c      	itt	ne
   23dce:	2000      	movne	r0, #0
   23dd0:	4770      	bxne	lr
   23dd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   23dd6:	d104      	bne.n	23de2 <__addsf3+0x126>
   23dd8:	0040      	lsls	r0, r0, #1
   23dda:	bf28      	it	cs
   23ddc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   23de0:	4770      	bx	lr
   23de2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   23de6:	bf3c      	itt	cc
   23de8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   23dec:	4770      	bxcc	lr
   23dee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   23df2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   23df6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   23dfa:	4770      	bx	lr
   23dfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   23e00:	bf16      	itet	ne
   23e02:	4608      	movne	r0, r1
   23e04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   23e08:	4601      	movne	r1, r0
   23e0a:	0242      	lsls	r2, r0, #9
   23e0c:	bf06      	itte	eq
   23e0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   23e12:	ea90 0f01 	teqeq	r0, r1
   23e16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   23e1a:	4770      	bx	lr

00023e1c <__aeabi_ui2f>:
   23e1c:	f04f 0300 	mov.w	r3, #0
   23e20:	e004      	b.n	23e2c <__aeabi_i2f+0x8>
   23e22:	bf00      	nop

00023e24 <__aeabi_i2f>:
   23e24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   23e28:	bf48      	it	mi
   23e2a:	4240      	negmi	r0, r0
   23e2c:	ea5f 0c00 	movs.w	ip, r0
   23e30:	bf08      	it	eq
   23e32:	4770      	bxeq	lr
   23e34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   23e38:	4601      	mov	r1, r0
   23e3a:	f04f 0000 	mov.w	r0, #0
   23e3e:	e01c      	b.n	23e7a <__aeabi_l2f+0x2a>

00023e40 <__aeabi_ul2f>:
   23e40:	ea50 0201 	orrs.w	r2, r0, r1
   23e44:	bf08      	it	eq
   23e46:	4770      	bxeq	lr
   23e48:	f04f 0300 	mov.w	r3, #0
   23e4c:	e00a      	b.n	23e64 <__aeabi_l2f+0x14>
   23e4e:	bf00      	nop

00023e50 <__aeabi_l2f>:
   23e50:	ea50 0201 	orrs.w	r2, r0, r1
   23e54:	bf08      	it	eq
   23e56:	4770      	bxeq	lr
   23e58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   23e5c:	d502      	bpl.n	23e64 <__aeabi_l2f+0x14>
   23e5e:	4240      	negs	r0, r0
   23e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23e64:	ea5f 0c01 	movs.w	ip, r1
   23e68:	bf02      	ittt	eq
   23e6a:	4684      	moveq	ip, r0
   23e6c:	4601      	moveq	r1, r0
   23e6e:	2000      	moveq	r0, #0
   23e70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   23e74:	bf08      	it	eq
   23e76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   23e7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   23e7e:	fabc f28c 	clz	r2, ip
   23e82:	3a08      	subs	r2, #8
   23e84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   23e88:	db10      	blt.n	23eac <__aeabi_l2f+0x5c>
   23e8a:	fa01 fc02 	lsl.w	ip, r1, r2
   23e8e:	4463      	add	r3, ip
   23e90:	fa00 fc02 	lsl.w	ip, r0, r2
   23e94:	f1c2 0220 	rsb	r2, r2, #32
   23e98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   23e9c:	fa20 f202 	lsr.w	r2, r0, r2
   23ea0:	eb43 0002 	adc.w	r0, r3, r2
   23ea4:	bf08      	it	eq
   23ea6:	f020 0001 	biceq.w	r0, r0, #1
   23eaa:	4770      	bx	lr
   23eac:	f102 0220 	add.w	r2, r2, #32
   23eb0:	fa01 fc02 	lsl.w	ip, r1, r2
   23eb4:	f1c2 0220 	rsb	r2, r2, #32
   23eb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   23ebc:	fa21 f202 	lsr.w	r2, r1, r2
   23ec0:	eb43 0002 	adc.w	r0, r3, r2
   23ec4:	bf08      	it	eq
   23ec6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   23eca:	4770      	bx	lr

00023ecc <__aeabi_ldivmod>:
   23ecc:	b97b      	cbnz	r3, 23eee <__aeabi_ldivmod+0x22>
   23ece:	b972      	cbnz	r2, 23eee <__aeabi_ldivmod+0x22>
   23ed0:	2900      	cmp	r1, #0
   23ed2:	bfbe      	ittt	lt
   23ed4:	2000      	movlt	r0, #0
   23ed6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   23eda:	e006      	blt.n	23eea <__aeabi_ldivmod+0x1e>
   23edc:	bf08      	it	eq
   23ede:	2800      	cmpeq	r0, #0
   23ee0:	bf1c      	itt	ne
   23ee2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   23ee6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   23eea:	f000 ba15 	b.w	24318 <__aeabi_idiv0>
   23eee:	f1ad 0c08 	sub.w	ip, sp, #8
   23ef2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   23ef6:	2900      	cmp	r1, #0
   23ef8:	db09      	blt.n	23f0e <__aeabi_ldivmod+0x42>
   23efa:	2b00      	cmp	r3, #0
   23efc:	db1a      	blt.n	23f34 <__aeabi_ldivmod+0x68>
   23efe:	f000 f8a3 	bl	24048 <__udivmoddi4>
   23f02:	f8dd e004 	ldr.w	lr, [sp, #4]
   23f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23f0a:	b004      	add	sp, #16
   23f0c:	4770      	bx	lr
   23f0e:	4240      	negs	r0, r0
   23f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23f14:	2b00      	cmp	r3, #0
   23f16:	db1b      	blt.n	23f50 <__aeabi_ldivmod+0x84>
   23f18:	f000 f896 	bl	24048 <__udivmoddi4>
   23f1c:	f8dd e004 	ldr.w	lr, [sp, #4]
   23f20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23f24:	b004      	add	sp, #16
   23f26:	4240      	negs	r0, r0
   23f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23f2c:	4252      	negs	r2, r2
   23f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   23f32:	4770      	bx	lr
   23f34:	4252      	negs	r2, r2
   23f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   23f3a:	f000 f885 	bl	24048 <__udivmoddi4>
   23f3e:	f8dd e004 	ldr.w	lr, [sp, #4]
   23f42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23f46:	b004      	add	sp, #16
   23f48:	4240      	negs	r0, r0
   23f4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23f4e:	4770      	bx	lr
   23f50:	4252      	negs	r2, r2
   23f52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   23f56:	f000 f877 	bl	24048 <__udivmoddi4>
   23f5a:	f8dd e004 	ldr.w	lr, [sp, #4]
   23f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23f62:	b004      	add	sp, #16
   23f64:	4252      	negs	r2, r2
   23f66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   23f6a:	4770      	bx	lr

00023f6c <__aeabi_uldivmod>:
   23f6c:	b953      	cbnz	r3, 23f84 <__aeabi_uldivmod+0x18>
   23f6e:	b94a      	cbnz	r2, 23f84 <__aeabi_uldivmod+0x18>
   23f70:	2900      	cmp	r1, #0
   23f72:	bf08      	it	eq
   23f74:	2800      	cmpeq	r0, #0
   23f76:	bf1c      	itt	ne
   23f78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   23f7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   23f80:	f000 b9ca 	b.w	24318 <__aeabi_idiv0>
   23f84:	f1ad 0c08 	sub.w	ip, sp, #8
   23f88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   23f8c:	f000 f85c 	bl	24048 <__udivmoddi4>
   23f90:	f8dd e004 	ldr.w	lr, [sp, #4]
   23f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23f98:	b004      	add	sp, #16
   23f9a:	4770      	bx	lr

00023f9c <__aeabi_d2lz>:
   23f9c:	b538      	push	{r3, r4, r5, lr}
   23f9e:	2200      	movs	r2, #0
   23fa0:	2300      	movs	r3, #0
   23fa2:	4604      	mov	r4, r0
   23fa4:	460d      	mov	r5, r1
   23fa6:	f7ff fdad 	bl	23b04 <__aeabi_dcmplt>
   23faa:	b928      	cbnz	r0, 23fb8 <__aeabi_d2lz+0x1c>
   23fac:	4620      	mov	r0, r4
   23fae:	4629      	mov	r1, r5
   23fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   23fb4:	f000 b82a 	b.w	2400c <__aeabi_d2ulz>
   23fb8:	4620      	mov	r0, r4
   23fba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   23fbe:	f000 f825 	bl	2400c <__aeabi_d2ulz>
   23fc2:	4240      	negs	r0, r0
   23fc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23fc8:	bd38      	pop	{r3, r4, r5, pc}
   23fca:	bf00      	nop

00023fcc <__aeabi_f2ulz>:
   23fcc:	b5d0      	push	{r4, r6, r7, lr}
   23fce:	f7ff facf 	bl	23570 <__aeabi_f2d>
   23fd2:	4b0c      	ldr	r3, [pc, #48]	; (24004 <__aeabi_f2ulz+0x38>)
   23fd4:	2200      	movs	r2, #0
   23fd6:	4606      	mov	r6, r0
   23fd8:	460f      	mov	r7, r1
   23fda:	f7ff fb21 	bl	23620 <__aeabi_dmul>
   23fde:	f7ff fdf7 	bl	23bd0 <__aeabi_d2uiz>
   23fe2:	4604      	mov	r4, r0
   23fe4:	f7ff faa2 	bl	2352c <__aeabi_ui2d>
   23fe8:	4b07      	ldr	r3, [pc, #28]	; (24008 <__aeabi_f2ulz+0x3c>)
   23fea:	2200      	movs	r2, #0
   23fec:	f7ff fb18 	bl	23620 <__aeabi_dmul>
   23ff0:	4602      	mov	r2, r0
   23ff2:	460b      	mov	r3, r1
   23ff4:	4630      	mov	r0, r6
   23ff6:	4639      	mov	r1, r7
   23ff8:	f7ff f95a 	bl	232b0 <__aeabi_dsub>
   23ffc:	f7ff fde8 	bl	23bd0 <__aeabi_d2uiz>
   24000:	4621      	mov	r1, r4
   24002:	bdd0      	pop	{r4, r6, r7, pc}
   24004:	3df00000 	.word	0x3df00000
   24008:	41f00000 	.word	0x41f00000

0002400c <__aeabi_d2ulz>:
   2400c:	b5d0      	push	{r4, r6, r7, lr}
   2400e:	4b0c      	ldr	r3, [pc, #48]	; (24040 <__aeabi_d2ulz+0x34>)
   24010:	2200      	movs	r2, #0
   24012:	4606      	mov	r6, r0
   24014:	460f      	mov	r7, r1
   24016:	f7ff fb03 	bl	23620 <__aeabi_dmul>
   2401a:	f7ff fdd9 	bl	23bd0 <__aeabi_d2uiz>
   2401e:	4604      	mov	r4, r0
   24020:	f7ff fa84 	bl	2352c <__aeabi_ui2d>
   24024:	4b07      	ldr	r3, [pc, #28]	; (24044 <__aeabi_d2ulz+0x38>)
   24026:	2200      	movs	r2, #0
   24028:	f7ff fafa 	bl	23620 <__aeabi_dmul>
   2402c:	4602      	mov	r2, r0
   2402e:	460b      	mov	r3, r1
   24030:	4630      	mov	r0, r6
   24032:	4639      	mov	r1, r7
   24034:	f7ff f93c 	bl	232b0 <__aeabi_dsub>
   24038:	f7ff fdca 	bl	23bd0 <__aeabi_d2uiz>
   2403c:	4621      	mov	r1, r4
   2403e:	bdd0      	pop	{r4, r6, r7, pc}
   24040:	3df00000 	.word	0x3df00000
   24044:	41f00000 	.word	0x41f00000

00024048 <__udivmoddi4>:
   24048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2404c:	9d08      	ldr	r5, [sp, #32]
   2404e:	4604      	mov	r4, r0
   24050:	468e      	mov	lr, r1
   24052:	2b00      	cmp	r3, #0
   24054:	d14d      	bne.n	240f2 <__udivmoddi4+0xaa>
   24056:	428a      	cmp	r2, r1
   24058:	4694      	mov	ip, r2
   2405a:	d969      	bls.n	24130 <__udivmoddi4+0xe8>
   2405c:	fab2 f282 	clz	r2, r2
   24060:	b152      	cbz	r2, 24078 <__udivmoddi4+0x30>
   24062:	fa01 f302 	lsl.w	r3, r1, r2
   24066:	f1c2 0120 	rsb	r1, r2, #32
   2406a:	fa20 f101 	lsr.w	r1, r0, r1
   2406e:	fa0c fc02 	lsl.w	ip, ip, r2
   24072:	ea41 0e03 	orr.w	lr, r1, r3
   24076:	4094      	lsls	r4, r2
   24078:	ea4f 481c 	mov.w	r8, ip, lsr #16
   2407c:	0c21      	lsrs	r1, r4, #16
   2407e:	fbbe f6f8 	udiv	r6, lr, r8
   24082:	fa1f f78c 	uxth.w	r7, ip
   24086:	fb08 e316 	mls	r3, r8, r6, lr
   2408a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2408e:	fb06 f107 	mul.w	r1, r6, r7
   24092:	4299      	cmp	r1, r3
   24094:	d90a      	bls.n	240ac <__udivmoddi4+0x64>
   24096:	eb1c 0303 	adds.w	r3, ip, r3
   2409a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   2409e:	f080 811f 	bcs.w	242e0 <__udivmoddi4+0x298>
   240a2:	4299      	cmp	r1, r3
   240a4:	f240 811c 	bls.w	242e0 <__udivmoddi4+0x298>
   240a8:	3e02      	subs	r6, #2
   240aa:	4463      	add	r3, ip
   240ac:	1a5b      	subs	r3, r3, r1
   240ae:	b2a4      	uxth	r4, r4
   240b0:	fbb3 f0f8 	udiv	r0, r3, r8
   240b4:	fb08 3310 	mls	r3, r8, r0, r3
   240b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   240bc:	fb00 f707 	mul.w	r7, r0, r7
   240c0:	42a7      	cmp	r7, r4
   240c2:	d90a      	bls.n	240da <__udivmoddi4+0x92>
   240c4:	eb1c 0404 	adds.w	r4, ip, r4
   240c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   240cc:	f080 810a 	bcs.w	242e4 <__udivmoddi4+0x29c>
   240d0:	42a7      	cmp	r7, r4
   240d2:	f240 8107 	bls.w	242e4 <__udivmoddi4+0x29c>
   240d6:	4464      	add	r4, ip
   240d8:	3802      	subs	r0, #2
   240da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   240de:	1be4      	subs	r4, r4, r7
   240e0:	2600      	movs	r6, #0
   240e2:	b11d      	cbz	r5, 240ec <__udivmoddi4+0xa4>
   240e4:	40d4      	lsrs	r4, r2
   240e6:	2300      	movs	r3, #0
   240e8:	e9c5 4300 	strd	r4, r3, [r5]
   240ec:	4631      	mov	r1, r6
   240ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   240f2:	428b      	cmp	r3, r1
   240f4:	d909      	bls.n	2410a <__udivmoddi4+0xc2>
   240f6:	2d00      	cmp	r5, #0
   240f8:	f000 80ef 	beq.w	242da <__udivmoddi4+0x292>
   240fc:	2600      	movs	r6, #0
   240fe:	e9c5 0100 	strd	r0, r1, [r5]
   24102:	4630      	mov	r0, r6
   24104:	4631      	mov	r1, r6
   24106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2410a:	fab3 f683 	clz	r6, r3
   2410e:	2e00      	cmp	r6, #0
   24110:	d14a      	bne.n	241a8 <__udivmoddi4+0x160>
   24112:	428b      	cmp	r3, r1
   24114:	d302      	bcc.n	2411c <__udivmoddi4+0xd4>
   24116:	4282      	cmp	r2, r0
   24118:	f200 80f9 	bhi.w	2430e <__udivmoddi4+0x2c6>
   2411c:	1a84      	subs	r4, r0, r2
   2411e:	eb61 0303 	sbc.w	r3, r1, r3
   24122:	2001      	movs	r0, #1
   24124:	469e      	mov	lr, r3
   24126:	2d00      	cmp	r5, #0
   24128:	d0e0      	beq.n	240ec <__udivmoddi4+0xa4>
   2412a:	e9c5 4e00 	strd	r4, lr, [r5]
   2412e:	e7dd      	b.n	240ec <__udivmoddi4+0xa4>
   24130:	b902      	cbnz	r2, 24134 <__udivmoddi4+0xec>
   24132:	deff      	udf	#255	; 0xff
   24134:	fab2 f282 	clz	r2, r2
   24138:	2a00      	cmp	r2, #0
   2413a:	f040 8092 	bne.w	24262 <__udivmoddi4+0x21a>
   2413e:	eba1 010c 	sub.w	r1, r1, ip
   24142:	ea4f 471c 	mov.w	r7, ip, lsr #16
   24146:	fa1f fe8c 	uxth.w	lr, ip
   2414a:	2601      	movs	r6, #1
   2414c:	0c20      	lsrs	r0, r4, #16
   2414e:	fbb1 f3f7 	udiv	r3, r1, r7
   24152:	fb07 1113 	mls	r1, r7, r3, r1
   24156:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   2415a:	fb0e f003 	mul.w	r0, lr, r3
   2415e:	4288      	cmp	r0, r1
   24160:	d908      	bls.n	24174 <__udivmoddi4+0x12c>
   24162:	eb1c 0101 	adds.w	r1, ip, r1
   24166:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2416a:	d202      	bcs.n	24172 <__udivmoddi4+0x12a>
   2416c:	4288      	cmp	r0, r1
   2416e:	f200 80cb 	bhi.w	24308 <__udivmoddi4+0x2c0>
   24172:	4643      	mov	r3, r8
   24174:	1a09      	subs	r1, r1, r0
   24176:	b2a4      	uxth	r4, r4
   24178:	fbb1 f0f7 	udiv	r0, r1, r7
   2417c:	fb07 1110 	mls	r1, r7, r0, r1
   24180:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   24184:	fb0e fe00 	mul.w	lr, lr, r0
   24188:	45a6      	cmp	lr, r4
   2418a:	d908      	bls.n	2419e <__udivmoddi4+0x156>
   2418c:	eb1c 0404 	adds.w	r4, ip, r4
   24190:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   24194:	d202      	bcs.n	2419c <__udivmoddi4+0x154>
   24196:	45a6      	cmp	lr, r4
   24198:	f200 80bb 	bhi.w	24312 <__udivmoddi4+0x2ca>
   2419c:	4608      	mov	r0, r1
   2419e:	eba4 040e 	sub.w	r4, r4, lr
   241a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   241a6:	e79c      	b.n	240e2 <__udivmoddi4+0x9a>
   241a8:	f1c6 0720 	rsb	r7, r6, #32
   241ac:	40b3      	lsls	r3, r6
   241ae:	fa22 fc07 	lsr.w	ip, r2, r7
   241b2:	ea4c 0c03 	orr.w	ip, ip, r3
   241b6:	fa20 f407 	lsr.w	r4, r0, r7
   241ba:	fa01 f306 	lsl.w	r3, r1, r6
   241be:	431c      	orrs	r4, r3
   241c0:	40f9      	lsrs	r1, r7
   241c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   241c6:	fa00 f306 	lsl.w	r3, r0, r6
   241ca:	fbb1 f8f9 	udiv	r8, r1, r9
   241ce:	0c20      	lsrs	r0, r4, #16
   241d0:	fa1f fe8c 	uxth.w	lr, ip
   241d4:	fb09 1118 	mls	r1, r9, r8, r1
   241d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   241dc:	fb08 f00e 	mul.w	r0, r8, lr
   241e0:	4288      	cmp	r0, r1
   241e2:	fa02 f206 	lsl.w	r2, r2, r6
   241e6:	d90b      	bls.n	24200 <__udivmoddi4+0x1b8>
   241e8:	eb1c 0101 	adds.w	r1, ip, r1
   241ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   241f0:	f080 8088 	bcs.w	24304 <__udivmoddi4+0x2bc>
   241f4:	4288      	cmp	r0, r1
   241f6:	f240 8085 	bls.w	24304 <__udivmoddi4+0x2bc>
   241fa:	f1a8 0802 	sub.w	r8, r8, #2
   241fe:	4461      	add	r1, ip
   24200:	1a09      	subs	r1, r1, r0
   24202:	b2a4      	uxth	r4, r4
   24204:	fbb1 f0f9 	udiv	r0, r1, r9
   24208:	fb09 1110 	mls	r1, r9, r0, r1
   2420c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   24210:	fb00 fe0e 	mul.w	lr, r0, lr
   24214:	458e      	cmp	lr, r1
   24216:	d908      	bls.n	2422a <__udivmoddi4+0x1e2>
   24218:	eb1c 0101 	adds.w	r1, ip, r1
   2421c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   24220:	d26c      	bcs.n	242fc <__udivmoddi4+0x2b4>
   24222:	458e      	cmp	lr, r1
   24224:	d96a      	bls.n	242fc <__udivmoddi4+0x2b4>
   24226:	3802      	subs	r0, #2
   24228:	4461      	add	r1, ip
   2422a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   2422e:	fba0 9402 	umull	r9, r4, r0, r2
   24232:	eba1 010e 	sub.w	r1, r1, lr
   24236:	42a1      	cmp	r1, r4
   24238:	46c8      	mov	r8, r9
   2423a:	46a6      	mov	lr, r4
   2423c:	d356      	bcc.n	242ec <__udivmoddi4+0x2a4>
   2423e:	d053      	beq.n	242e8 <__udivmoddi4+0x2a0>
   24240:	b15d      	cbz	r5, 2425a <__udivmoddi4+0x212>
   24242:	ebb3 0208 	subs.w	r2, r3, r8
   24246:	eb61 010e 	sbc.w	r1, r1, lr
   2424a:	fa01 f707 	lsl.w	r7, r1, r7
   2424e:	fa22 f306 	lsr.w	r3, r2, r6
   24252:	40f1      	lsrs	r1, r6
   24254:	431f      	orrs	r7, r3
   24256:	e9c5 7100 	strd	r7, r1, [r5]
   2425a:	2600      	movs	r6, #0
   2425c:	4631      	mov	r1, r6
   2425e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24262:	f1c2 0320 	rsb	r3, r2, #32
   24266:	40d8      	lsrs	r0, r3
   24268:	fa0c fc02 	lsl.w	ip, ip, r2
   2426c:	fa21 f303 	lsr.w	r3, r1, r3
   24270:	4091      	lsls	r1, r2
   24272:	4301      	orrs	r1, r0
   24274:	ea4f 471c 	mov.w	r7, ip, lsr #16
   24278:	fa1f fe8c 	uxth.w	lr, ip
   2427c:	fbb3 f0f7 	udiv	r0, r3, r7
   24280:	fb07 3610 	mls	r6, r7, r0, r3
   24284:	0c0b      	lsrs	r3, r1, #16
   24286:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2428a:	fb00 f60e 	mul.w	r6, r0, lr
   2428e:	429e      	cmp	r6, r3
   24290:	fa04 f402 	lsl.w	r4, r4, r2
   24294:	d908      	bls.n	242a8 <__udivmoddi4+0x260>
   24296:	eb1c 0303 	adds.w	r3, ip, r3
   2429a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   2429e:	d22f      	bcs.n	24300 <__udivmoddi4+0x2b8>
   242a0:	429e      	cmp	r6, r3
   242a2:	d92d      	bls.n	24300 <__udivmoddi4+0x2b8>
   242a4:	3802      	subs	r0, #2
   242a6:	4463      	add	r3, ip
   242a8:	1b9b      	subs	r3, r3, r6
   242aa:	b289      	uxth	r1, r1
   242ac:	fbb3 f6f7 	udiv	r6, r3, r7
   242b0:	fb07 3316 	mls	r3, r7, r6, r3
   242b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   242b8:	fb06 f30e 	mul.w	r3, r6, lr
   242bc:	428b      	cmp	r3, r1
   242be:	d908      	bls.n	242d2 <__udivmoddi4+0x28a>
   242c0:	eb1c 0101 	adds.w	r1, ip, r1
   242c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   242c8:	d216      	bcs.n	242f8 <__udivmoddi4+0x2b0>
   242ca:	428b      	cmp	r3, r1
   242cc:	d914      	bls.n	242f8 <__udivmoddi4+0x2b0>
   242ce:	3e02      	subs	r6, #2
   242d0:	4461      	add	r1, ip
   242d2:	1ac9      	subs	r1, r1, r3
   242d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   242d8:	e738      	b.n	2414c <__udivmoddi4+0x104>
   242da:	462e      	mov	r6, r5
   242dc:	4628      	mov	r0, r5
   242de:	e705      	b.n	240ec <__udivmoddi4+0xa4>
   242e0:	4606      	mov	r6, r0
   242e2:	e6e3      	b.n	240ac <__udivmoddi4+0x64>
   242e4:	4618      	mov	r0, r3
   242e6:	e6f8      	b.n	240da <__udivmoddi4+0x92>
   242e8:	454b      	cmp	r3, r9
   242ea:	d2a9      	bcs.n	24240 <__udivmoddi4+0x1f8>
   242ec:	ebb9 0802 	subs.w	r8, r9, r2
   242f0:	eb64 0e0c 	sbc.w	lr, r4, ip
   242f4:	3801      	subs	r0, #1
   242f6:	e7a3      	b.n	24240 <__udivmoddi4+0x1f8>
   242f8:	4646      	mov	r6, r8
   242fa:	e7ea      	b.n	242d2 <__udivmoddi4+0x28a>
   242fc:	4620      	mov	r0, r4
   242fe:	e794      	b.n	2422a <__udivmoddi4+0x1e2>
   24300:	4640      	mov	r0, r8
   24302:	e7d1      	b.n	242a8 <__udivmoddi4+0x260>
   24304:	46d0      	mov	r8, sl
   24306:	e77b      	b.n	24200 <__udivmoddi4+0x1b8>
   24308:	3b02      	subs	r3, #2
   2430a:	4461      	add	r1, ip
   2430c:	e732      	b.n	24174 <__udivmoddi4+0x12c>
   2430e:	4630      	mov	r0, r6
   24310:	e709      	b.n	24126 <__udivmoddi4+0xde>
   24312:	4464      	add	r4, ip
   24314:	3802      	subs	r0, #2
   24316:	e742      	b.n	2419e <__udivmoddi4+0x156>

00024318 <__aeabi_idiv0>:
   24318:	4770      	bx	lr
   2431a:	bf00      	nop

0002431c <fabs>:
   2431c:	ec51 0b10 	vmov	r0, r1, d0
   24320:	ee10 2a10 	vmov	r2, s0
   24324:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   24328:	ec43 2b10 	vmov	d0, r2, r3
   2432c:	4770      	bx	lr
   2432e:	bf00      	nop

00024330 <ceilf>:
   24330:	ee10 2a10 	vmov	r2, s0
   24334:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   24338:	3b7f      	subs	r3, #127	; 0x7f
   2433a:	2b16      	cmp	r3, #22
   2433c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   24340:	dc2f      	bgt.n	243a2 <ceilf+0x72>
   24342:	2b00      	cmp	r3, #0
   24344:	db18      	blt.n	24378 <ceilf+0x48>
   24346:	491a      	ldr	r1, [pc, #104]	; (243b0 <ceilf+0x80>)
   24348:	4119      	asrs	r1, r3
   2434a:	420a      	tst	r2, r1
   2434c:	d028      	beq.n	243a0 <ceilf+0x70>
   2434e:	eddf 7a19 	vldr	s15, [pc, #100]	; 243b4 <ceilf+0x84>
   24352:	ee70 7a27 	vadd.f32	s15, s0, s15
   24356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2435e:	dd1f      	ble.n	243a0 <ceilf+0x70>
   24360:	2a00      	cmp	r2, #0
   24362:	dd04      	ble.n	2436e <ceilf+0x3e>
   24364:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   24368:	fa40 f303 	asr.w	r3, r0, r3
   2436c:	441a      	add	r2, r3
   2436e:	ea22 0301 	bic.w	r3, r2, r1
   24372:	ee00 3a10 	vmov	s0, r3
   24376:	4770      	bx	lr
   24378:	eddf 7a0e 	vldr	s15, [pc, #56]	; 243b4 <ceilf+0x84>
   2437c:	ee70 7a27 	vadd.f32	s15, s0, s15
   24380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   24384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24388:	dd0a      	ble.n	243a0 <ceilf+0x70>
   2438a:	2a00      	cmp	r2, #0
   2438c:	db06      	blt.n	2439c <ceilf+0x6c>
   2438e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   24392:	2900      	cmp	r1, #0
   24394:	bf18      	it	ne
   24396:	eeb0 0a67 	vmovne.f32	s0, s15
   2439a:	4770      	bx	lr
   2439c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 243b8 <ceilf+0x88>
   243a0:	4770      	bx	lr
   243a2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   243a6:	d3fb      	bcc.n	243a0 <ceilf+0x70>
   243a8:	ee30 0a00 	vadd.f32	s0, s0, s0
   243ac:	4770      	bx	lr
   243ae:	bf00      	nop
   243b0:	007fffff 	.word	0x007fffff
   243b4:	7149f2ca 	.word	0x7149f2ca
   243b8:	80000000 	.word	0x80000000

000243bc <asin>:
   243bc:	b538      	push	{r3, r4, r5, lr}
   243be:	ed2d 8b02 	vpush	{d8}
   243c2:	ec55 4b10 	vmov	r4, r5, d0
   243c6:	f000 f8a7 	bl	24518 <__ieee754_asin>
   243ca:	4b17      	ldr	r3, [pc, #92]	; (24428 <asin+0x6c>)
   243cc:	eeb0 8a40 	vmov.f32	s16, s0
   243d0:	eef0 8a60 	vmov.f32	s17, s1
   243d4:	f993 3000 	ldrsb.w	r3, [r3]
   243d8:	3301      	adds	r3, #1
   243da:	d011      	beq.n	24400 <asin+0x44>
   243dc:	4622      	mov	r2, r4
   243de:	462b      	mov	r3, r5
   243e0:	4620      	mov	r0, r4
   243e2:	4629      	mov	r1, r5
   243e4:	f7ff fbb6 	bl	23b54 <__aeabi_dcmpun>
   243e8:	b950      	cbnz	r0, 24400 <asin+0x44>
   243ea:	ec45 4b10 	vmov	d0, r4, r5
   243ee:	f7ff ff95 	bl	2431c <fabs>
   243f2:	4b0e      	ldr	r3, [pc, #56]	; (2442c <asin+0x70>)
   243f4:	ec51 0b10 	vmov	r0, r1, d0
   243f8:	2200      	movs	r2, #0
   243fa:	f7ff fba1 	bl	23b40 <__aeabi_dcmpgt>
   243fe:	b930      	cbnz	r0, 2440e <asin+0x52>
   24400:	eeb0 0a48 	vmov.f32	s0, s16
   24404:	eef0 0a68 	vmov.f32	s1, s17
   24408:	ecbd 8b02 	vpop	{d8}
   2440c:	bd38      	pop	{r3, r4, r5, pc}
   2440e:	f000 fe4d 	bl	250ac <__errno>
   24412:	ecbd 8b02 	vpop	{d8}
   24416:	4603      	mov	r3, r0
   24418:	2221      	movs	r2, #33	; 0x21
   2441a:	601a      	str	r2, [r3, #0]
   2441c:	4804      	ldr	r0, [pc, #16]	; (24430 <asin+0x74>)
   2441e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24422:	f000 bd35 	b.w	24e90 <nan>
   24426:	bf00      	nop
   24428:	20000f9c 	.word	0x20000f9c
   2442c:	3ff00000 	.word	0x3ff00000
   24430:	00026524 	.word	0x00026524

00024434 <fmod>:
   24434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24436:	ed2d 8b02 	vpush	{d8}
   2443a:	ec57 6b10 	vmov	r6, r7, d0
   2443e:	ec55 4b11 	vmov	r4, r5, d1
   24442:	f000 fabb 	bl	249bc <__ieee754_fmod>
   24446:	4b18      	ldr	r3, [pc, #96]	; (244a8 <fmod+0x74>)
   24448:	eeb0 8a40 	vmov.f32	s16, s0
   2444c:	eef0 8a60 	vmov.f32	s17, s1
   24450:	f993 3000 	ldrsb.w	r3, [r3]
   24454:	3301      	adds	r3, #1
   24456:	d00d      	beq.n	24474 <fmod+0x40>
   24458:	4630      	mov	r0, r6
   2445a:	4639      	mov	r1, r7
   2445c:	4622      	mov	r2, r4
   2445e:	462b      	mov	r3, r5
   24460:	f7ff fb78 	bl	23b54 <__aeabi_dcmpun>
   24464:	b930      	cbnz	r0, 24474 <fmod+0x40>
   24466:	2200      	movs	r2, #0
   24468:	2300      	movs	r3, #0
   2446a:	4620      	mov	r0, r4
   2446c:	4629      	mov	r1, r5
   2446e:	f7ff fb3f 	bl	23af0 <__aeabi_dcmpeq>
   24472:	b930      	cbnz	r0, 24482 <fmod+0x4e>
   24474:	eeb0 0a48 	vmov.f32	s0, s16
   24478:	eef0 0a68 	vmov.f32	s1, s17
   2447c:	ecbd 8b02 	vpop	{d8}
   24480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24482:	f000 fe13 	bl	250ac <__errno>
   24486:	2200      	movs	r2, #0
   24488:	2300      	movs	r3, #0
   2448a:	2121      	movs	r1, #33	; 0x21
   2448c:	6001      	str	r1, [r0, #0]
   2448e:	4610      	mov	r0, r2
   24490:	4619      	mov	r1, r3
   24492:	f7ff f9ef 	bl	23874 <__aeabi_ddiv>
   24496:	ec41 0b18 	vmov	d8, r0, r1
   2449a:	eeb0 0a48 	vmov.f32	s0, s16
   2449e:	eef0 0a68 	vmov.f32	s1, s17
   244a2:	ecbd 8b02 	vpop	{d8}
   244a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   244a8:	20000f9c 	.word	0x20000f9c

000244ac <log10f>:
   244ac:	b508      	push	{r3, lr}
   244ae:	ed2d 8b02 	vpush	{d8}
   244b2:	eeb0 8a40 	vmov.f32	s16, s0
   244b6:	f000 fc8b 	bl	24dd0 <__ieee754_log10f>
   244ba:	4b14      	ldr	r3, [pc, #80]	; (2450c <log10f+0x60>)
   244bc:	f993 3000 	ldrsb.w	r3, [r3]
   244c0:	3301      	adds	r3, #1
   244c2:	d014      	beq.n	244ee <log10f+0x42>
   244c4:	eeb4 8a48 	vcmp.f32	s16, s16
   244c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   244cc:	d60f      	bvs.n	244ee <log10f+0x42>
   244ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   244d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   244d6:	d80a      	bhi.n	244ee <log10f+0x42>
   244d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
   244dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   244e0:	d108      	bne.n	244f4 <log10f+0x48>
   244e2:	f000 fde3 	bl	250ac <__errno>
   244e6:	2322      	movs	r3, #34	; 0x22
   244e8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24510 <log10f+0x64>
   244ec:	6003      	str	r3, [r0, #0]
   244ee:	ecbd 8b02 	vpop	{d8}
   244f2:	bd08      	pop	{r3, pc}
   244f4:	f000 fdda 	bl	250ac <__errno>
   244f8:	ecbd 8b02 	vpop	{d8}
   244fc:	4603      	mov	r3, r0
   244fe:	2221      	movs	r2, #33	; 0x21
   24500:	601a      	str	r2, [r3, #0]
   24502:	4804      	ldr	r0, [pc, #16]	; (24514 <log10f+0x68>)
   24504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24508:	f000 bcca 	b.w	24ea0 <nanf>
   2450c:	20000f9c 	.word	0x20000f9c
   24510:	ff800000 	.word	0xff800000
   24514:	00026524 	.word	0x00026524

00024518 <__ieee754_asin>:
   24518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2451c:	ec55 4b10 	vmov	r4, r5, d0
   24520:	4bcf      	ldr	r3, [pc, #828]	; (24860 <__ieee754_asin+0x348>)
   24522:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   24526:	429f      	cmp	r7, r3
   24528:	ed2d 8b04 	vpush	{d8-d9}
   2452c:	dd37      	ble.n	2459e <__ieee754_asin+0x86>
   2452e:	ee10 3a10 	vmov	r3, s0
   24532:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   24536:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   2453a:	433b      	orrs	r3, r7
   2453c:	d010      	beq.n	24560 <__ieee754_asin+0x48>
   2453e:	ee10 2a10 	vmov	r2, s0
   24542:	462b      	mov	r3, r5
   24544:	4620      	mov	r0, r4
   24546:	4629      	mov	r1, r5
   24548:	f7fe feb2 	bl	232b0 <__aeabi_dsub>
   2454c:	4602      	mov	r2, r0
   2454e:	460b      	mov	r3, r1
   24550:	f7ff f990 	bl	23874 <__aeabi_ddiv>
   24554:	ec41 0b10 	vmov	d0, r0, r1
   24558:	ecbd 8b04 	vpop	{d8-d9}
   2455c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24560:	ee10 0a10 	vmov	r0, s0
   24564:	a3a2      	add	r3, pc, #648	; (adr r3, 247f0 <__ieee754_asin+0x2d8>)
   24566:	e9d3 2300 	ldrd	r2, r3, [r3]
   2456a:	4629      	mov	r1, r5
   2456c:	f7ff f858 	bl	23620 <__aeabi_dmul>
   24570:	4602      	mov	r2, r0
   24572:	460b      	mov	r3, r1
   24574:	4620      	mov	r0, r4
   24576:	4629      	mov	r1, r5
   24578:	4614      	mov	r4, r2
   2457a:	461d      	mov	r5, r3
   2457c:	a39e      	add	r3, pc, #632	; (adr r3, 247f8 <__ieee754_asin+0x2e0>)
   2457e:	e9d3 2300 	ldrd	r2, r3, [r3]
   24582:	f7ff f84d 	bl	23620 <__aeabi_dmul>
   24586:	4602      	mov	r2, r0
   24588:	460b      	mov	r3, r1
   2458a:	4620      	mov	r0, r4
   2458c:	4629      	mov	r1, r5
   2458e:	f7fe fe91 	bl	232b4 <__adddf3>
   24592:	ecbd 8b04 	vpop	{d8-d9}
   24596:	ec41 0b10 	vmov	d0, r0, r1
   2459a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2459e:	4bb1      	ldr	r3, [pc, #708]	; (24864 <__ieee754_asin+0x34c>)
   245a0:	429f      	cmp	r7, r3
   245a2:	462e      	mov	r6, r5
   245a4:	dc12      	bgt.n	245cc <__ieee754_asin+0xb4>
   245a6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   245aa:	f280 8163 	bge.w	24874 <__ieee754_asin+0x35c>
   245ae:	a394      	add	r3, pc, #592	; (adr r3, 24800 <__ieee754_asin+0x2e8>)
   245b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   245b4:	ee10 0a10 	vmov	r0, s0
   245b8:	4629      	mov	r1, r5
   245ba:	f7fe fe7b 	bl	232b4 <__adddf3>
   245be:	4baa      	ldr	r3, [pc, #680]	; (24868 <__ieee754_asin+0x350>)
   245c0:	2200      	movs	r2, #0
   245c2:	f7ff fabd 	bl	23b40 <__aeabi_dcmpgt>
   245c6:	2800      	cmp	r0, #0
   245c8:	f040 810c 	bne.w	247e4 <__ieee754_asin+0x2cc>
   245cc:	ec45 4b10 	vmov	d0, r4, r5
   245d0:	f7ff fea4 	bl	2431c <fabs>
   245d4:	49a4      	ldr	r1, [pc, #656]	; (24868 <__ieee754_asin+0x350>)
   245d6:	ec53 2b10 	vmov	r2, r3, d0
   245da:	2000      	movs	r0, #0
   245dc:	f7fe fe68 	bl	232b0 <__aeabi_dsub>
   245e0:	4ba2      	ldr	r3, [pc, #648]	; (2486c <__ieee754_asin+0x354>)
   245e2:	2200      	movs	r2, #0
   245e4:	f7ff f81c 	bl	23620 <__aeabi_dmul>
   245e8:	a387      	add	r3, pc, #540	; (adr r3, 24808 <__ieee754_asin+0x2f0>)
   245ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   245ee:	4604      	mov	r4, r0
   245f0:	460d      	mov	r5, r1
   245f2:	f7ff f815 	bl	23620 <__aeabi_dmul>
   245f6:	a386      	add	r3, pc, #536	; (adr r3, 24810 <__ieee754_asin+0x2f8>)
   245f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   245fc:	f7fe fe5a 	bl	232b4 <__adddf3>
   24600:	4622      	mov	r2, r4
   24602:	462b      	mov	r3, r5
   24604:	f7ff f80c 	bl	23620 <__aeabi_dmul>
   24608:	a383      	add	r3, pc, #524	; (adr r3, 24818 <__ieee754_asin+0x300>)
   2460a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2460e:	f7fe fe4f 	bl	232b0 <__aeabi_dsub>
   24612:	4622      	mov	r2, r4
   24614:	462b      	mov	r3, r5
   24616:	f7ff f803 	bl	23620 <__aeabi_dmul>
   2461a:	a381      	add	r3, pc, #516	; (adr r3, 24820 <__ieee754_asin+0x308>)
   2461c:	e9d3 2300 	ldrd	r2, r3, [r3]
   24620:	f7fe fe48 	bl	232b4 <__adddf3>
   24624:	4622      	mov	r2, r4
   24626:	462b      	mov	r3, r5
   24628:	f7fe fffa 	bl	23620 <__aeabi_dmul>
   2462c:	a37e      	add	r3, pc, #504	; (adr r3, 24828 <__ieee754_asin+0x310>)
   2462e:	e9d3 2300 	ldrd	r2, r3, [r3]
   24632:	f7fe fe3d 	bl	232b0 <__aeabi_dsub>
   24636:	4622      	mov	r2, r4
   24638:	462b      	mov	r3, r5
   2463a:	f7fe fff1 	bl	23620 <__aeabi_dmul>
   2463e:	a37c      	add	r3, pc, #496	; (adr r3, 24830 <__ieee754_asin+0x318>)
   24640:	e9d3 2300 	ldrd	r2, r3, [r3]
   24644:	f7fe fe36 	bl	232b4 <__adddf3>
   24648:	4622      	mov	r2, r4
   2464a:	462b      	mov	r3, r5
   2464c:	f7fe ffe8 	bl	23620 <__aeabi_dmul>
   24650:	a379      	add	r3, pc, #484	; (adr r3, 24838 <__ieee754_asin+0x320>)
   24652:	e9d3 2300 	ldrd	r2, r3, [r3]
   24656:	ec41 0b18 	vmov	d8, r0, r1
   2465a:	ec41 0b19 	vmov	d9, r0, r1
   2465e:	4620      	mov	r0, r4
   24660:	4629      	mov	r1, r5
   24662:	f7fe ffdd 	bl	23620 <__aeabi_dmul>
   24666:	a376      	add	r3, pc, #472	; (adr r3, 24840 <__ieee754_asin+0x328>)
   24668:	e9d3 2300 	ldrd	r2, r3, [r3]
   2466c:	f7fe fe20 	bl	232b0 <__aeabi_dsub>
   24670:	4622      	mov	r2, r4
   24672:	462b      	mov	r3, r5
   24674:	f7fe ffd4 	bl	23620 <__aeabi_dmul>
   24678:	a373      	add	r3, pc, #460	; (adr r3, 24848 <__ieee754_asin+0x330>)
   2467a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2467e:	f7fe fe19 	bl	232b4 <__adddf3>
   24682:	4622      	mov	r2, r4
   24684:	462b      	mov	r3, r5
   24686:	f7fe ffcb 	bl	23620 <__aeabi_dmul>
   2468a:	a371      	add	r3, pc, #452	; (adr r3, 24850 <__ieee754_asin+0x338>)
   2468c:	e9d3 2300 	ldrd	r2, r3, [r3]
   24690:	f7fe fe0e 	bl	232b0 <__aeabi_dsub>
   24694:	4622      	mov	r2, r4
   24696:	462b      	mov	r3, r5
   24698:	f7fe ffc2 	bl	23620 <__aeabi_dmul>
   2469c:	4b72      	ldr	r3, [pc, #456]	; (24868 <__ieee754_asin+0x350>)
   2469e:	2200      	movs	r2, #0
   246a0:	f7fe fe08 	bl	232b4 <__adddf3>
   246a4:	ec45 4b10 	vmov	d0, r4, r5
   246a8:	4680      	mov	r8, r0
   246aa:	4689      	mov	r9, r1
   246ac:	f000 fac4 	bl	24c38 <__ieee754_sqrt>
   246b0:	4b6f      	ldr	r3, [pc, #444]	; (24870 <__ieee754_asin+0x358>)
   246b2:	429f      	cmp	r7, r3
   246b4:	ec5b ab10 	vmov	sl, fp, d0
   246b8:	dc73      	bgt.n	247a2 <__ieee754_asin+0x28a>
   246ba:	465b      	mov	r3, fp
   246bc:	2200      	movs	r2, #0
   246be:	ee10 0a10 	vmov	r0, s0
   246c2:	ec43 2b18 	vmov	d8, r2, r3
   246c6:	4659      	mov	r1, fp
   246c8:	ee10 2a10 	vmov	r2, s0
   246cc:	f7fe fdf2 	bl	232b4 <__adddf3>
   246d0:	4642      	mov	r2, r8
   246d2:	464b      	mov	r3, r9
   246d4:	4680      	mov	r8, r0
   246d6:	4689      	mov	r9, r1
   246d8:	ec51 0b19 	vmov	r0, r1, d9
   246dc:	f7ff f8ca 	bl	23874 <__aeabi_ddiv>
   246e0:	4602      	mov	r2, r0
   246e2:	460b      	mov	r3, r1
   246e4:	4640      	mov	r0, r8
   246e6:	4649      	mov	r1, r9
   246e8:	f7fe ff9a 	bl	23620 <__aeabi_dmul>
   246ec:	ec53 2b18 	vmov	r2, r3, d8
   246f0:	4680      	mov	r8, r0
   246f2:	4689      	mov	r9, r1
   246f4:	ec51 0b18 	vmov	r0, r1, d8
   246f8:	f7fe ff92 	bl	23620 <__aeabi_dmul>
   246fc:	4602      	mov	r2, r0
   246fe:	460b      	mov	r3, r1
   24700:	4620      	mov	r0, r4
   24702:	4629      	mov	r1, r5
   24704:	f7fe fdd4 	bl	232b0 <__aeabi_dsub>
   24708:	ec53 2b18 	vmov	r2, r3, d8
   2470c:	4604      	mov	r4, r0
   2470e:	460d      	mov	r5, r1
   24710:	4650      	mov	r0, sl
   24712:	4659      	mov	r1, fp
   24714:	f7fe fdce 	bl	232b4 <__adddf3>
   24718:	4602      	mov	r2, r0
   2471a:	460b      	mov	r3, r1
   2471c:	4620      	mov	r0, r4
   2471e:	4629      	mov	r1, r5
   24720:	f7ff f8a8 	bl	23874 <__aeabi_ddiv>
   24724:	4602      	mov	r2, r0
   24726:	460b      	mov	r3, r1
   24728:	f7fe fdc4 	bl	232b4 <__adddf3>
   2472c:	4602      	mov	r2, r0
   2472e:	460b      	mov	r3, r1
   24730:	a131      	add	r1, pc, #196	; (adr r1, 247f8 <__ieee754_asin+0x2e0>)
   24732:	e9d1 0100 	ldrd	r0, r1, [r1]
   24736:	f7fe fdbb 	bl	232b0 <__aeabi_dsub>
   2473a:	4602      	mov	r2, r0
   2473c:	460b      	mov	r3, r1
   2473e:	4640      	mov	r0, r8
   24740:	4649      	mov	r1, r9
   24742:	f7fe fdb5 	bl	232b0 <__aeabi_dsub>
   24746:	ec53 2b18 	vmov	r2, r3, d8
   2474a:	4604      	mov	r4, r0
   2474c:	460d      	mov	r5, r1
   2474e:	ee18 0a10 	vmov	r0, s16
   24752:	4619      	mov	r1, r3
   24754:	f7fe fdae 	bl	232b4 <__adddf3>
   24758:	4602      	mov	r2, r0
   2475a:	460b      	mov	r3, r1
   2475c:	a13e      	add	r1, pc, #248	; (adr r1, 24858 <__ieee754_asin+0x340>)
   2475e:	e9d1 0100 	ldrd	r0, r1, [r1]
   24762:	f7fe fda5 	bl	232b0 <__aeabi_dsub>
   24766:	4602      	mov	r2, r0
   24768:	460b      	mov	r3, r1
   2476a:	4620      	mov	r0, r4
   2476c:	4629      	mov	r1, r5
   2476e:	f7fe fd9f 	bl	232b0 <__aeabi_dsub>
   24772:	4602      	mov	r2, r0
   24774:	460b      	mov	r3, r1
   24776:	a138      	add	r1, pc, #224	; (adr r1, 24858 <__ieee754_asin+0x340>)
   24778:	e9d1 0100 	ldrd	r0, r1, [r1]
   2477c:	f7fe fd98 	bl	232b0 <__aeabi_dsub>
   24780:	ec41 0b10 	vmov	d0, r0, r1
   24784:	2e00      	cmp	r6, #0
   24786:	f73f aee7 	bgt.w	24558 <__ieee754_asin+0x40>
   2478a:	ecbd 8b04 	vpop	{d8-d9}
   2478e:	ee10 1a90 	vmov	r1, s1
   24792:	ee10 2a10 	vmov	r2, s0
   24796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   2479a:	ec43 2b10 	vmov	d0, r2, r3
   2479e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247a2:	4642      	mov	r2, r8
   247a4:	464b      	mov	r3, r9
   247a6:	ec51 0b18 	vmov	r0, r1, d8
   247aa:	f7ff f863 	bl	23874 <__aeabi_ddiv>
   247ae:	4652      	mov	r2, sl
   247b0:	465b      	mov	r3, fp
   247b2:	f7fe ff35 	bl	23620 <__aeabi_dmul>
   247b6:	4652      	mov	r2, sl
   247b8:	465b      	mov	r3, fp
   247ba:	f7fe fd7b 	bl	232b4 <__adddf3>
   247be:	4602      	mov	r2, r0
   247c0:	460b      	mov	r3, r1
   247c2:	f7fe fd77 	bl	232b4 <__adddf3>
   247c6:	a30c      	add	r3, pc, #48	; (adr r3, 247f8 <__ieee754_asin+0x2e0>)
   247c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   247cc:	f7fe fd70 	bl	232b0 <__aeabi_dsub>
   247d0:	4602      	mov	r2, r0
   247d2:	460b      	mov	r3, r1
   247d4:	a106      	add	r1, pc, #24	; (adr r1, 247f0 <__ieee754_asin+0x2d8>)
   247d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   247da:	f7fe fd69 	bl	232b0 <__aeabi_dsub>
   247de:	ec41 0b10 	vmov	d0, r0, r1
   247e2:	e7cf      	b.n	24784 <__ieee754_asin+0x26c>
   247e4:	ec45 4b10 	vmov	d0, r4, r5
   247e8:	e6b6      	b.n	24558 <__ieee754_asin+0x40>
   247ea:	bf00      	nop
   247ec:	f3af 8000 	nop.w
   247f0:	54442d18 	.word	0x54442d18
   247f4:	3ff921fb 	.word	0x3ff921fb
   247f8:	33145c07 	.word	0x33145c07
   247fc:	3c91a626 	.word	0x3c91a626
   24800:	8800759c 	.word	0x8800759c
   24804:	7e37e43c 	.word	0x7e37e43c
   24808:	0dfdf709 	.word	0x0dfdf709
   2480c:	3f023de1 	.word	0x3f023de1
   24810:	7501b288 	.word	0x7501b288
   24814:	3f49efe0 	.word	0x3f49efe0
   24818:	b5688f3b 	.word	0xb5688f3b
   2481c:	3fa48228 	.word	0x3fa48228
   24820:	0e884455 	.word	0x0e884455
   24824:	3fc9c155 	.word	0x3fc9c155
   24828:	03eb6f7d 	.word	0x03eb6f7d
   2482c:	3fd4d612 	.word	0x3fd4d612
   24830:	55555555 	.word	0x55555555
   24834:	3fc55555 	.word	0x3fc55555
   24838:	b12e9282 	.word	0xb12e9282
   2483c:	3fb3b8c5 	.word	0x3fb3b8c5
   24840:	1b8d0159 	.word	0x1b8d0159
   24844:	3fe6066c 	.word	0x3fe6066c
   24848:	9c598ac8 	.word	0x9c598ac8
   2484c:	40002ae5 	.word	0x40002ae5
   24850:	1c8a2d4b 	.word	0x1c8a2d4b
   24854:	40033a27 	.word	0x40033a27
   24858:	54442d18 	.word	0x54442d18
   2485c:	3fe921fb 	.word	0x3fe921fb
   24860:	3fefffff 	.word	0x3fefffff
   24864:	3fdfffff 	.word	0x3fdfffff
   24868:	3ff00000 	.word	0x3ff00000
   2486c:	3fe00000 	.word	0x3fe00000
   24870:	3fef3332 	.word	0x3fef3332
   24874:	ee10 2a10 	vmov	r2, s0
   24878:	ee10 0a10 	vmov	r0, s0
   2487c:	462b      	mov	r3, r5
   2487e:	4629      	mov	r1, r5
   24880:	f7fe fece 	bl	23620 <__aeabi_dmul>
   24884:	a339      	add	r3, pc, #228	; (adr r3, 2496c <__ieee754_asin+0x454>)
   24886:	e9d3 2300 	ldrd	r2, r3, [r3]
   2488a:	4606      	mov	r6, r0
   2488c:	460f      	mov	r7, r1
   2488e:	f7fe fec7 	bl	23620 <__aeabi_dmul>
   24892:	a338      	add	r3, pc, #224	; (adr r3, 24974 <__ieee754_asin+0x45c>)
   24894:	e9d3 2300 	ldrd	r2, r3, [r3]
   24898:	f7fe fd0c 	bl	232b4 <__adddf3>
   2489c:	4632      	mov	r2, r6
   2489e:	463b      	mov	r3, r7
   248a0:	f7fe febe 	bl	23620 <__aeabi_dmul>
   248a4:	a335      	add	r3, pc, #212	; (adr r3, 2497c <__ieee754_asin+0x464>)
   248a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   248aa:	f7fe fd01 	bl	232b0 <__aeabi_dsub>
   248ae:	4632      	mov	r2, r6
   248b0:	463b      	mov	r3, r7
   248b2:	f7fe feb5 	bl	23620 <__aeabi_dmul>
   248b6:	a333      	add	r3, pc, #204	; (adr r3, 24984 <__ieee754_asin+0x46c>)
   248b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   248bc:	f7fe fcfa 	bl	232b4 <__adddf3>
   248c0:	4632      	mov	r2, r6
   248c2:	463b      	mov	r3, r7
   248c4:	f7fe feac 	bl	23620 <__aeabi_dmul>
   248c8:	a330      	add	r3, pc, #192	; (adr r3, 2498c <__ieee754_asin+0x474>)
   248ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   248ce:	f7fe fcef 	bl	232b0 <__aeabi_dsub>
   248d2:	4632      	mov	r2, r6
   248d4:	463b      	mov	r3, r7
   248d6:	f7fe fea3 	bl	23620 <__aeabi_dmul>
   248da:	a32e      	add	r3, pc, #184	; (adr r3, 24994 <__ieee754_asin+0x47c>)
   248dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   248e0:	f7fe fce8 	bl	232b4 <__adddf3>
   248e4:	4632      	mov	r2, r6
   248e6:	463b      	mov	r3, r7
   248e8:	f7fe fe9a 	bl	23620 <__aeabi_dmul>
   248ec:	a32b      	add	r3, pc, #172	; (adr r3, 2499c <__ieee754_asin+0x484>)
   248ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   248f2:	4680      	mov	r8, r0
   248f4:	4689      	mov	r9, r1
   248f6:	4630      	mov	r0, r6
   248f8:	4639      	mov	r1, r7
   248fa:	f7fe fe91 	bl	23620 <__aeabi_dmul>
   248fe:	a329      	add	r3, pc, #164	; (adr r3, 249a4 <__ieee754_asin+0x48c>)
   24900:	e9d3 2300 	ldrd	r2, r3, [r3]
   24904:	f7fe fcd4 	bl	232b0 <__aeabi_dsub>
   24908:	4632      	mov	r2, r6
   2490a:	463b      	mov	r3, r7
   2490c:	f7fe fe88 	bl	23620 <__aeabi_dmul>
   24910:	a326      	add	r3, pc, #152	; (adr r3, 249ac <__ieee754_asin+0x494>)
   24912:	e9d3 2300 	ldrd	r2, r3, [r3]
   24916:	f7fe fccd 	bl	232b4 <__adddf3>
   2491a:	4632      	mov	r2, r6
   2491c:	463b      	mov	r3, r7
   2491e:	f7fe fe7f 	bl	23620 <__aeabi_dmul>
   24922:	a324      	add	r3, pc, #144	; (adr r3, 249b4 <__ieee754_asin+0x49c>)
   24924:	e9d3 2300 	ldrd	r2, r3, [r3]
   24928:	f7fe fcc2 	bl	232b0 <__aeabi_dsub>
   2492c:	4632      	mov	r2, r6
   2492e:	463b      	mov	r3, r7
   24930:	f7fe fe76 	bl	23620 <__aeabi_dmul>
   24934:	4b0c      	ldr	r3, [pc, #48]	; (24968 <__ieee754_asin+0x450>)
   24936:	2200      	movs	r2, #0
   24938:	f7fe fcbc 	bl	232b4 <__adddf3>
   2493c:	4602      	mov	r2, r0
   2493e:	460b      	mov	r3, r1
   24940:	4640      	mov	r0, r8
   24942:	4649      	mov	r1, r9
   24944:	f7fe ff96 	bl	23874 <__aeabi_ddiv>
   24948:	4622      	mov	r2, r4
   2494a:	462b      	mov	r3, r5
   2494c:	f7fe fe68 	bl	23620 <__aeabi_dmul>
   24950:	4622      	mov	r2, r4
   24952:	462b      	mov	r3, r5
   24954:	f7fe fcae 	bl	232b4 <__adddf3>
   24958:	ecbd 8b04 	vpop	{d8-d9}
   2495c:	ec41 0b10 	vmov	d0, r0, r1
   24960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24964:	f3af 8000 	nop.w
   24968:	3ff00000 	.word	0x3ff00000
   2496c:	0dfdf709 	.word	0x0dfdf709
   24970:	3f023de1 	.word	0x3f023de1
   24974:	7501b288 	.word	0x7501b288
   24978:	3f49efe0 	.word	0x3f49efe0
   2497c:	b5688f3b 	.word	0xb5688f3b
   24980:	3fa48228 	.word	0x3fa48228
   24984:	0e884455 	.word	0x0e884455
   24988:	3fc9c155 	.word	0x3fc9c155
   2498c:	03eb6f7d 	.word	0x03eb6f7d
   24990:	3fd4d612 	.word	0x3fd4d612
   24994:	55555555 	.word	0x55555555
   24998:	3fc55555 	.word	0x3fc55555
   2499c:	b12e9282 	.word	0xb12e9282
   249a0:	3fb3b8c5 	.word	0x3fb3b8c5
   249a4:	1b8d0159 	.word	0x1b8d0159
   249a8:	3fe6066c 	.word	0x3fe6066c
   249ac:	9c598ac8 	.word	0x9c598ac8
   249b0:	40002ae5 	.word	0x40002ae5
   249b4:	1c8a2d4b 	.word	0x1c8a2d4b
   249b8:	40033a27 	.word	0x40033a27

000249bc <__ieee754_fmod>:
   249bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   249c0:	ec53 2b11 	vmov	r2, r3, d1
   249c4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   249c8:	ea5e 0402 	orrs.w	r4, lr, r2
   249cc:	ec51 0b10 	vmov	r0, r1, d0
   249d0:	d033      	beq.n	24a3a <__ieee754_fmod+0x7e>
   249d2:	4c93      	ldr	r4, [pc, #588]	; (24c20 <__ieee754_fmod+0x264>)
   249d4:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   249d8:	45a1      	cmp	r9, r4
   249da:	4688      	mov	r8, r1
   249dc:	dc2d      	bgt.n	24a3a <__ieee754_fmod+0x7e>
   249de:	4254      	negs	r4, r2
   249e0:	4e90      	ldr	r6, [pc, #576]	; (24c24 <__ieee754_fmod+0x268>)
   249e2:	4314      	orrs	r4, r2
   249e4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   249e8:	42b4      	cmp	r4, r6
   249ea:	ee11 7a10 	vmov	r7, s2
   249ee:	d824      	bhi.n	24a3a <__ieee754_fmod+0x7e>
   249f0:	45f1      	cmp	r9, lr
   249f2:	469c      	mov	ip, r3
   249f4:	ee11 5a10 	vmov	r5, s2
   249f8:	ee10 3a10 	vmov	r3, s0
   249fc:	4602      	mov	r2, r0
   249fe:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   24a02:	dc06      	bgt.n	24a12 <__ieee754_fmod+0x56>
   24a04:	f2c0 80bd 	blt.w	24b82 <__ieee754_fmod+0x1c6>
   24a08:	42b8      	cmp	r0, r7
   24a0a:	f0c0 80ba 	bcc.w	24b82 <__ieee754_fmod+0x1c6>
   24a0e:	f000 80ef 	beq.w	24bf0 <__ieee754_fmod+0x234>
   24a12:	4984      	ldr	r1, [pc, #528]	; (24c24 <__ieee754_fmod+0x268>)
   24a14:	ea08 0101 	and.w	r1, r8, r1
   24a18:	b9c9      	cbnz	r1, 24a4e <__ieee754_fmod+0x92>
   24a1a:	f1b9 0f00 	cmp.w	r9, #0
   24a1e:	f040 80d0 	bne.w	24bc2 <__ieee754_fmod+0x206>
   24a22:	2b00      	cmp	r3, #0
   24a24:	4618      	mov	r0, r3
   24a26:	f340 80f8 	ble.w	24c1a <__ieee754_fmod+0x25e>
   24a2a:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   24a2e:	0040      	lsls	r0, r0, #1
   24a30:	2800      	cmp	r0, #0
   24a32:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   24a36:	dcfa      	bgt.n	24a2e <__ieee754_fmod+0x72>
   24a38:	e00d      	b.n	24a56 <__ieee754_fmod+0x9a>
   24a3a:	f7fe fdf1 	bl	23620 <__aeabi_dmul>
   24a3e:	4602      	mov	r2, r0
   24a40:	460b      	mov	r3, r1
   24a42:	f7fe ff17 	bl	23874 <__aeabi_ddiv>
   24a46:	ec41 0b10 	vmov	d0, r0, r1
   24a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24a4e:	ea4f 5129 	mov.w	r1, r9, asr #20
   24a52:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   24a56:	4873      	ldr	r0, [pc, #460]	; (24c24 <__ieee754_fmod+0x268>)
   24a58:	ea0c 0000 	and.w	r0, ip, r0
   24a5c:	b968      	cbnz	r0, 24a7a <__ieee754_fmod+0xbe>
   24a5e:	f1be 0f00 	cmp.w	lr, #0
   24a62:	f040 80a2 	bne.w	24baa <__ieee754_fmod+0x1ee>
   24a66:	2f00      	cmp	r7, #0
   24a68:	4e6f      	ldr	r6, [pc, #444]	; (24c28 <__ieee754_fmod+0x26c>)
   24a6a:	4638      	mov	r0, r7
   24a6c:	dd09      	ble.n	24a82 <__ieee754_fmod+0xc6>
   24a6e:	0040      	lsls	r0, r0, #1
   24a70:	2800      	cmp	r0, #0
   24a72:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   24a76:	dcfa      	bgt.n	24a6e <__ieee754_fmod+0xb2>
   24a78:	e003      	b.n	24a82 <__ieee754_fmod+0xc6>
   24a7a:	ea4f 562e 	mov.w	r6, lr, asr #20
   24a7e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   24a82:	486a      	ldr	r0, [pc, #424]	; (24c2c <__ieee754_fmod+0x270>)
   24a84:	4281      	cmp	r1, r0
   24a86:	db6f      	blt.n	24b68 <__ieee754_fmod+0x1ac>
   24a88:	f3c8 0313 	ubfx	r3, r8, #0, #20
   24a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24a90:	4866      	ldr	r0, [pc, #408]	; (24c2c <__ieee754_fmod+0x270>)
   24a92:	4286      	cmp	r6, r0
   24a94:	db58      	blt.n	24b48 <__ieee754_fmod+0x18c>
   24a96:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   24a9a:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   24a9e:	1bd0      	subs	r0, r2, r7
   24aa0:	1b89      	subs	r1, r1, r6
   24aa2:	d10b      	bne.n	24abc <__ieee754_fmod+0x100>
   24aa4:	e01d      	b.n	24ae2 <__ieee754_fmod+0x126>
   24aa6:	ea50 030e 	orrs.w	r3, r0, lr
   24aaa:	d045      	beq.n	24b38 <__ieee754_fmod+0x17c>
   24aac:	ea4f 73de 	mov.w	r3, lr, lsr #31
   24ab0:	3901      	subs	r1, #1
   24ab2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   24ab6:	ea4f 024e 	mov.w	r2, lr, lsl #1
   24aba:	d011      	beq.n	24ae0 <__ieee754_fmod+0x124>
   24abc:	eba3 000c 	sub.w	r0, r3, ip
   24ac0:	4295      	cmp	r5, r2
   24ac2:	bf88      	it	hi
   24ac4:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   24ac8:	2800      	cmp	r0, #0
   24aca:	eba2 0e05 	sub.w	lr, r2, r5
   24ace:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   24ad2:	dae8      	bge.n	24aa6 <__ieee754_fmod+0xea>
   24ad4:	3901      	subs	r1, #1
   24ad6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   24ada:	ea4f 0242 	mov.w	r2, r2, lsl #1
   24ade:	d1ed      	bne.n	24abc <__ieee754_fmod+0x100>
   24ae0:	1b50      	subs	r0, r2, r5
   24ae2:	eba3 0c0c 	sub.w	ip, r3, ip
   24ae6:	4295      	cmp	r5, r2
   24ae8:	bf88      	it	hi
   24aea:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   24aee:	f1bc 0f00 	cmp.w	ip, #0
   24af2:	bfa4      	itt	ge
   24af4:	4602      	movge	r2, r0
   24af6:	4663      	movge	r3, ip
   24af8:	ea53 0102 	orrs.w	r1, r3, r2
   24afc:	d105      	bne.n	24b0a <__ieee754_fmod+0x14e>
   24afe:	e01b      	b.n	24b38 <__ieee754_fmod+0x17c>
   24b00:	0fd1      	lsrs	r1, r2, #31
   24b02:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   24b06:	0052      	lsls	r2, r2, #1
   24b08:	3e01      	subs	r6, #1
   24b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   24b0e:	dbf7      	blt.n	24b00 <__ieee754_fmod+0x144>
   24b10:	4946      	ldr	r1, [pc, #280]	; (24c2c <__ieee754_fmod+0x270>)
   24b12:	428e      	cmp	r6, r1
   24b14:	da61      	bge.n	24bda <__ieee754_fmod+0x21e>
   24b16:	1b89      	subs	r1, r1, r6
   24b18:	2914      	cmp	r1, #20
   24b1a:	dc6f      	bgt.n	24bfc <__ieee754_fmod+0x240>
   24b1c:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   24b20:	40ca      	lsrs	r2, r1
   24b22:	fa03 f000 	lsl.w	r0, r3, r0
   24b26:	fa43 f101 	asr.w	r1, r3, r1
   24b2a:	4310      	orrs	r0, r2
   24b2c:	430c      	orrs	r4, r1
   24b2e:	4623      	mov	r3, r4
   24b30:	4602      	mov	r2, r0
   24b32:	ec43 2b10 	vmov	d0, r2, r3
   24b36:	e788      	b.n	24a4a <__ieee754_fmod+0x8e>
   24b38:	4b3d      	ldr	r3, [pc, #244]	; (24c30 <__ieee754_fmod+0x274>)
   24b3a:	0fe4      	lsrs	r4, r4, #31
   24b3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   24b40:	ed94 0b00 	vldr	d0, [r4]
   24b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24b48:	1b80      	subs	r0, r0, r6
   24b4a:	281f      	cmp	r0, #31
   24b4c:	dd21      	ble.n	24b92 <__ieee754_fmod+0x1d6>
   24b4e:	4839      	ldr	r0, [pc, #228]	; (24c34 <__ieee754_fmod+0x278>)
   24b50:	1b89      	subs	r1, r1, r6
   24b52:	eba0 0c06 	sub.w	ip, r0, r6
   24b56:	fa07 fc0c 	lsl.w	ip, r7, ip
   24b5a:	bf18      	it	ne
   24b5c:	2500      	movne	r5, #0
   24b5e:	d1ad      	bne.n	24abc <__ieee754_fmod+0x100>
   24b60:	eba3 0c0c 	sub.w	ip, r3, ip
   24b64:	4610      	mov	r0, r2
   24b66:	e7c2      	b.n	24aee <__ieee754_fmod+0x132>
   24b68:	1a40      	subs	r0, r0, r1
   24b6a:	281f      	cmp	r0, #31
   24b6c:	dc0c      	bgt.n	24b88 <__ieee754_fmod+0x1cc>
   24b6e:	fa09 f900 	lsl.w	r9, r9, r0
   24b72:	fa03 f200 	lsl.w	r2, r3, r0
   24b76:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   24b7a:	40c3      	lsrs	r3, r0
   24b7c:	ea43 0309 	orr.w	r3, r3, r9
   24b80:	e786      	b.n	24a90 <__ieee754_fmod+0xd4>
   24b82:	ec41 0b10 	vmov	d0, r0, r1
   24b86:	e760      	b.n	24a4a <__ieee754_fmod+0x8e>
   24b88:	4a2a      	ldr	r2, [pc, #168]	; (24c34 <__ieee754_fmod+0x278>)
   24b8a:	1a52      	subs	r2, r2, r1
   24b8c:	4093      	lsls	r3, r2
   24b8e:	2200      	movs	r2, #0
   24b90:	e77e      	b.n	24a90 <__ieee754_fmod+0xd4>
   24b92:	fa0e fe00 	lsl.w	lr, lr, r0
   24b96:	fa07 f500 	lsl.w	r5, r7, r0
   24b9a:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   24b9e:	fa27 f000 	lsr.w	r0, r7, r0
   24ba2:	ea40 0c0e 	orr.w	ip, r0, lr
   24ba6:	1b50      	subs	r0, r2, r5
   24ba8:	e77a      	b.n	24aa0 <__ieee754_fmod+0xe4>
   24baa:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   24bae:	2800      	cmp	r0, #0
   24bb0:	4e1e      	ldr	r6, [pc, #120]	; (24c2c <__ieee754_fmod+0x270>)
   24bb2:	f77f af66 	ble.w	24a82 <__ieee754_fmod+0xc6>
   24bb6:	0040      	lsls	r0, r0, #1
   24bb8:	2800      	cmp	r0, #0
   24bba:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   24bbe:	dcfa      	bgt.n	24bb6 <__ieee754_fmod+0x1fa>
   24bc0:	e75f      	b.n	24a82 <__ieee754_fmod+0xc6>
   24bc2:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   24bc6:	2800      	cmp	r0, #0
   24bc8:	4918      	ldr	r1, [pc, #96]	; (24c2c <__ieee754_fmod+0x270>)
   24bca:	f77f af44 	ble.w	24a56 <__ieee754_fmod+0x9a>
   24bce:	0040      	lsls	r0, r0, #1
   24bd0:	2800      	cmp	r0, #0
   24bd2:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   24bd6:	dcfa      	bgt.n	24bce <__ieee754_fmod+0x212>
   24bd8:	e73d      	b.n	24a56 <__ieee754_fmod+0x9a>
   24bda:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   24bde:	431c      	orrs	r4, r3
   24be0:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   24be4:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   24be8:	4610      	mov	r0, r2
   24bea:	ec41 0b10 	vmov	d0, r0, r1
   24bee:	e72c      	b.n	24a4a <__ieee754_fmod+0x8e>
   24bf0:	4b0f      	ldr	r3, [pc, #60]	; (24c30 <__ieee754_fmod+0x274>)
   24bf2:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   24bf6:	ed94 0b00 	vldr	d0, [r4]
   24bfa:	e726      	b.n	24a4a <__ieee754_fmod+0x8e>
   24bfc:	291f      	cmp	r1, #31
   24bfe:	dc07      	bgt.n	24c10 <__ieee754_fmod+0x254>
   24c00:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   24c04:	fa22 f101 	lsr.w	r1, r2, r1
   24c08:	4083      	lsls	r3, r0
   24c0a:	ea43 0001 	orr.w	r0, r3, r1
   24c0e:	e78e      	b.n	24b2e <__ieee754_fmod+0x172>
   24c10:	4908      	ldr	r1, [pc, #32]	; (24c34 <__ieee754_fmod+0x278>)
   24c12:	1b89      	subs	r1, r1, r6
   24c14:	fa43 f001 	asr.w	r0, r3, r1
   24c18:	e789      	b.n	24b2e <__ieee754_fmod+0x172>
   24c1a:	4903      	ldr	r1, [pc, #12]	; (24c28 <__ieee754_fmod+0x26c>)
   24c1c:	e71b      	b.n	24a56 <__ieee754_fmod+0x9a>
   24c1e:	bf00      	nop
   24c20:	7fefffff 	.word	0x7fefffff
   24c24:	7ff00000 	.word	0x7ff00000
   24c28:	fffffbed 	.word	0xfffffbed
   24c2c:	fffffc02 	.word	0xfffffc02
   24c30:	00027c78 	.word	0x00027c78
   24c34:	fffffbe2 	.word	0xfffffbe2

00024c38 <__ieee754_sqrt>:
   24c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c3c:	4a63      	ldr	r2, [pc, #396]	; (24dcc <__ieee754_sqrt+0x194>)
   24c3e:	ec55 4b10 	vmov	r4, r5, d0
   24c42:	43aa      	bics	r2, r5
   24c44:	f000 809f 	beq.w	24d86 <__ieee754_sqrt+0x14e>
   24c48:	2d00      	cmp	r5, #0
   24c4a:	ee10 ca10 	vmov	ip, s0
   24c4e:	462b      	mov	r3, r5
   24c50:	dd54      	ble.n	24cfc <__ieee754_sqrt+0xc4>
   24c52:	1529      	asrs	r1, r5, #20
   24c54:	d063      	beq.n	24d1e <__ieee754_sqrt+0xe6>
   24c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
   24c5a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   24c5e:	07c9      	lsls	r1, r1, #31
   24c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24c64:	d404      	bmi.n	24c70 <__ieee754_sqrt+0x38>
   24c66:	005b      	lsls	r3, r3, #1
   24c68:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   24c6c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   24c70:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   24c74:	2600      	movs	r6, #0
   24c76:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   24c7a:	107f      	asrs	r7, r7, #1
   24c7c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   24c80:	f04f 0e16 	mov.w	lr, #22
   24c84:	4634      	mov	r4, r6
   24c86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   24c8a:	18a1      	adds	r1, r4, r2
   24c8c:	4299      	cmp	r1, r3
   24c8e:	dc02      	bgt.n	24c96 <__ieee754_sqrt+0x5e>
   24c90:	1a5b      	subs	r3, r3, r1
   24c92:	188c      	adds	r4, r1, r2
   24c94:	4416      	add	r6, r2
   24c96:	005b      	lsls	r3, r3, #1
   24c98:	f1be 0e01 	subs.w	lr, lr, #1
   24c9c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   24ca0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   24ca4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   24ca8:	d1ef      	bne.n	24c8a <__ieee754_sqrt+0x52>
   24caa:	4675      	mov	r5, lr
   24cac:	2020      	movs	r0, #32
   24cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   24cb2:	e00a      	b.n	24cca <__ieee754_sqrt+0x92>
   24cb4:	d044      	beq.n	24d40 <__ieee754_sqrt+0x108>
   24cb6:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   24cba:	3801      	subs	r0, #1
   24cbc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   24cc0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   24cc4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   24cc8:	d043      	beq.n	24d52 <__ieee754_sqrt+0x11a>
   24cca:	42a3      	cmp	r3, r4
   24ccc:	eb02 010e 	add.w	r1, r2, lr
   24cd0:	ddf0      	ble.n	24cb4 <__ieee754_sqrt+0x7c>
   24cd2:	2900      	cmp	r1, #0
   24cd4:	eb01 0e02 	add.w	lr, r1, r2
   24cd8:	db0a      	blt.n	24cf0 <__ieee754_sqrt+0xb8>
   24cda:	46a0      	mov	r8, r4
   24cdc:	1b1b      	subs	r3, r3, r4
   24cde:	4561      	cmp	r1, ip
   24ce0:	bf88      	it	hi
   24ce2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   24ce6:	ebac 0c01 	sub.w	ip, ip, r1
   24cea:	4415      	add	r5, r2
   24cec:	4644      	mov	r4, r8
   24cee:	e7e2      	b.n	24cb6 <__ieee754_sqrt+0x7e>
   24cf0:	f1be 0f00 	cmp.w	lr, #0
   24cf4:	dbf1      	blt.n	24cda <__ieee754_sqrt+0xa2>
   24cf6:	f104 0801 	add.w	r8, r4, #1
   24cfa:	e7ef      	b.n	24cdc <__ieee754_sqrt+0xa4>
   24cfc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   24d00:	4322      	orrs	r2, r4
   24d02:	d038      	beq.n	24d76 <__ieee754_sqrt+0x13e>
   24d04:	2d00      	cmp	r5, #0
   24d06:	d14e      	bne.n	24da6 <__ieee754_sqrt+0x16e>
   24d08:	4629      	mov	r1, r5
   24d0a:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   24d0e:	3915      	subs	r1, #21
   24d10:	4613      	mov	r3, r2
   24d12:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   24d16:	2a00      	cmp	r2, #0
   24d18:	d0f7      	beq.n	24d0a <__ieee754_sqrt+0xd2>
   24d1a:	02d6      	lsls	r6, r2, #11
   24d1c:	d450      	bmi.n	24dc0 <__ieee754_sqrt+0x188>
   24d1e:	2000      	movs	r0, #0
   24d20:	005b      	lsls	r3, r3, #1
   24d22:	02dd      	lsls	r5, r3, #11
   24d24:	4604      	mov	r4, r0
   24d26:	f100 0001 	add.w	r0, r0, #1
   24d2a:	d5f9      	bpl.n	24d20 <__ieee754_sqrt+0xe8>
   24d2c:	461a      	mov	r2, r3
   24d2e:	4663      	mov	r3, ip
   24d30:	fa0c fc00 	lsl.w	ip, ip, r0
   24d34:	f1c0 0020 	rsb	r0, r0, #32
   24d38:	40c3      	lsrs	r3, r0
   24d3a:	1b09      	subs	r1, r1, r4
   24d3c:	4313      	orrs	r3, r2
   24d3e:	e78a      	b.n	24c56 <__ieee754_sqrt+0x1e>
   24d40:	4561      	cmp	r1, ip
   24d42:	d8b8      	bhi.n	24cb6 <__ieee754_sqrt+0x7e>
   24d44:	2900      	cmp	r1, #0
   24d46:	eb01 0e02 	add.w	lr, r1, r2
   24d4a:	dbd1      	blt.n	24cf0 <__ieee754_sqrt+0xb8>
   24d4c:	4698      	mov	r8, r3
   24d4e:	2300      	movs	r3, #0
   24d50:	e7c9      	b.n	24ce6 <__ieee754_sqrt+0xae>
   24d52:	ea53 030c 	orrs.w	r3, r3, ip
   24d56:	d110      	bne.n	24d7a <__ieee754_sqrt+0x142>
   24d58:	0868      	lsrs	r0, r5, #1
   24d5a:	1071      	asrs	r1, r6, #1
   24d5c:	07f3      	lsls	r3, r6, #31
   24d5e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   24d62:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   24d66:	bf48      	it	mi
   24d68:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   24d6c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   24d70:	4602      	mov	r2, r0
   24d72:	ec43 2b10 	vmov	d0, r2, r3
   24d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24d7a:	1c6a      	adds	r2, r5, #1
   24d7c:	bf16      	itet	ne
   24d7e:	1c68      	addne	r0, r5, #1
   24d80:	3601      	addeq	r6, #1
   24d82:	0840      	lsrne	r0, r0, #1
   24d84:	e7e9      	b.n	24d5a <__ieee754_sqrt+0x122>
   24d86:	ee10 2a10 	vmov	r2, s0
   24d8a:	ee10 0a10 	vmov	r0, s0
   24d8e:	462b      	mov	r3, r5
   24d90:	4629      	mov	r1, r5
   24d92:	f7fe fc45 	bl	23620 <__aeabi_dmul>
   24d96:	4622      	mov	r2, r4
   24d98:	462b      	mov	r3, r5
   24d9a:	f7fe fa8b 	bl	232b4 <__adddf3>
   24d9e:	ec41 0b10 	vmov	d0, r0, r1
   24da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24da6:	ee10 2a10 	vmov	r2, s0
   24daa:	4620      	mov	r0, r4
   24dac:	4629      	mov	r1, r5
   24dae:	f7fe fa7f 	bl	232b0 <__aeabi_dsub>
   24db2:	4602      	mov	r2, r0
   24db4:	460b      	mov	r3, r1
   24db6:	f7fe fd5d 	bl	23874 <__aeabi_ddiv>
   24dba:	ec41 0b10 	vmov	d0, r0, r1
   24dbe:	e7da      	b.n	24d76 <__ieee754_sqrt+0x13e>
   24dc0:	4663      	mov	r3, ip
   24dc2:	2020      	movs	r0, #32
   24dc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24dc8:	e7b6      	b.n	24d38 <__ieee754_sqrt+0x100>
   24dca:	bf00      	nop
   24dcc:	7ff00000 	.word	0x7ff00000

00024dd0 <__ieee754_log10f>:
   24dd0:	b508      	push	{r3, lr}
   24dd2:	ee10 3a10 	vmov	r3, s0
   24dd6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   24dda:	ed2d 8b02 	vpush	{d8}
   24dde:	d02b      	beq.n	24e38 <__ieee754_log10f+0x68>
   24de0:	2b00      	cmp	r3, #0
   24de2:	db32      	blt.n	24e4a <__ieee754_log10f+0x7a>
   24de4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24de8:	da41      	bge.n	24e6e <__ieee754_log10f+0x9e>
   24dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   24dee:	db35      	blt.n	24e5c <__ieee754_log10f+0x8c>
   24df0:	2100      	movs	r1, #0
   24df2:	15da      	asrs	r2, r3, #23
   24df4:	3a7f      	subs	r2, #127	; 0x7f
   24df6:	440a      	add	r2, r1
   24df8:	0fd1      	lsrs	r1, r2, #31
   24dfa:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   24dfe:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   24e02:	f3c3 0316 	ubfx	r3, r3, #0, #23
   24e06:	ee07 2a90 	vmov	s15, r2
   24e0a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   24e0e:	ee00 3a10 	vmov	s0, r3
   24e12:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   24e16:	f000 f849 	bl	24eac <__ieee754_logf>
   24e1a:	eddf 7a17 	vldr	s15, [pc, #92]	; 24e78 <__ieee754_log10f+0xa8>
   24e1e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24e7c <__ieee754_log10f+0xac>
   24e22:	ee20 0a27 	vmul.f32	s0, s0, s15
   24e26:	eddf 7a16 	vldr	s15, [pc, #88]	; 24e80 <__ieee754_log10f+0xb0>
   24e2a:	eea8 0a07 	vfma.f32	s0, s16, s14
   24e2e:	eea8 0a27 	vfma.f32	s0, s16, s15
   24e32:	ecbd 8b02 	vpop	{d8}
   24e36:	bd08      	pop	{r3, pc}
   24e38:	ecbd 8b02 	vpop	{d8}
   24e3c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 24e84 <__ieee754_log10f+0xb4>
   24e40:	eddf 7a11 	vldr	s15, [pc, #68]	; 24e88 <__ieee754_log10f+0xb8>
   24e44:	ee87 0a27 	vdiv.f32	s0, s14, s15
   24e48:	bd08      	pop	{r3, pc}
   24e4a:	ecbd 8b02 	vpop	{d8}
   24e4e:	ee70 7a40 	vsub.f32	s15, s0, s0
   24e52:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24e88 <__ieee754_log10f+0xb8>
   24e56:	ee87 0a87 	vdiv.f32	s0, s15, s14
   24e5a:	bd08      	pop	{r3, pc}
   24e5c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24e8c <__ieee754_log10f+0xbc>
   24e60:	ee60 7a27 	vmul.f32	s15, s0, s15
   24e64:	f06f 0118 	mvn.w	r1, #24
   24e68:	ee17 3a90 	vmov	r3, s15
   24e6c:	e7c1      	b.n	24df2 <__ieee754_log10f+0x22>
   24e6e:	ecbd 8b02 	vpop	{d8}
   24e72:	ee30 0a00 	vadd.f32	s0, s0, s0
   24e76:	bd08      	pop	{r3, pc}
   24e78:	3ede5bd9 	.word	0x3ede5bd9
   24e7c:	355427db 	.word	0x355427db
   24e80:	3e9a2080 	.word	0x3e9a2080
   24e84:	cc000000 	.word	0xcc000000
   24e88:	00000000 	.word	0x00000000
   24e8c:	4c000000 	.word	0x4c000000

00024e90 <nan>:
   24e90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24e98 <nan+0x8>
   24e94:	4770      	bx	lr
   24e96:	bf00      	nop
   24e98:	00000000 	.word	0x00000000
   24e9c:	7ff80000 	.word	0x7ff80000

00024ea0 <nanf>:
   24ea0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24ea8 <nanf+0x8>
   24ea4:	4770      	bx	lr
   24ea6:	bf00      	nop
   24ea8:	7fc00000 	.word	0x7fc00000

00024eac <__ieee754_logf>:
   24eac:	ee10 3a10 	vmov	r3, s0
   24eb0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   24eb4:	d02e      	beq.n	24f14 <__ieee754_logf+0x68>
   24eb6:	2b00      	cmp	r3, #0
   24eb8:	db33      	blt.n	24f22 <__ieee754_logf+0x76>
   24eba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24ebe:	da40      	bge.n	24f42 <__ieee754_logf+0x96>
   24ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   24ec4:	db34      	blt.n	24f30 <__ieee754_logf+0x84>
   24ec6:	f04f 0c00 	mov.w	ip, #0
   24eca:	4868      	ldr	r0, [pc, #416]	; (2506c <__ieee754_logf+0x1c0>)
   24ecc:	f3c3 0116 	ubfx	r1, r3, #0, #23
   24ed0:	4408      	add	r0, r1
   24ed2:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   24ed6:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   24eda:	430a      	orrs	r2, r1
   24edc:	15db      	asrs	r3, r3, #23
   24ede:	ee00 2a10 	vmov	s0, r2
   24ee2:	3b7f      	subs	r3, #127	; 0x7f
   24ee4:	4a62      	ldr	r2, [pc, #392]	; (25070 <__ieee754_logf+0x1c4>)
   24ee6:	4463      	add	r3, ip
   24ee8:	f101 0c0f 	add.w	ip, r1, #15
   24eec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   24ef0:	ea0c 0202 	and.w	r2, ip, r2
   24ef4:	ee30 0a67 	vsub.f32	s0, s0, s15
   24ef8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   24efc:	bb22      	cbnz	r2, 24f48 <__ieee754_logf+0x9c>
   24efe:	eeb5 0a40 	vcmp.f32	s0, #0.0
   24f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24f06:	d160      	bne.n	24fca <__ieee754_logf+0x11e>
   24f08:	2b00      	cmp	r3, #0
   24f0a:	f040 8092 	bne.w	25032 <__ieee754_logf+0x186>
   24f0e:	ed9f 0a59 	vldr	s0, [pc, #356]	; 25074 <__ieee754_logf+0x1c8>
   24f12:	4770      	bx	lr
   24f14:	ed9f 7a58 	vldr	s14, [pc, #352]	; 25078 <__ieee754_logf+0x1cc>
   24f18:	eddf 7a56 	vldr	s15, [pc, #344]	; 25074 <__ieee754_logf+0x1c8>
   24f1c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   24f20:	4770      	bx	lr
   24f22:	ee70 7a40 	vsub.f32	s15, s0, s0
   24f26:	ed9f 7a53 	vldr	s14, [pc, #332]	; 25074 <__ieee754_logf+0x1c8>
   24f2a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   24f2e:	4770      	bx	lr
   24f30:	eddf 7a52 	vldr	s15, [pc, #328]	; 2507c <__ieee754_logf+0x1d0>
   24f34:	ee60 7a27 	vmul.f32	s15, s0, s15
   24f38:	f06f 0c18 	mvn.w	ip, #24
   24f3c:	ee17 3a90 	vmov	r3, s15
   24f40:	e7c3      	b.n	24eca <__ieee754_logf+0x1e>
   24f42:	ee30 0a00 	vadd.f32	s0, s0, s0
   24f46:	4770      	bx	lr
   24f48:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   24f4c:	ee70 7a27 	vadd.f32	s15, s0, s15
   24f50:	ee07 3a10 	vmov	s14, r3
   24f54:	ee80 4a27 	vdiv.f32	s8, s0, s15
   24f58:	4849      	ldr	r0, [pc, #292]	; (25080 <__ieee754_logf+0x1d4>)
   24f5a:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   24f5e:	4408      	add	r0, r1
   24f60:	f502 7222 	add.w	r2, r2, #648	; 0x288
   24f64:	4302      	orrs	r2, r0
   24f66:	2a00      	cmp	r2, #0
   24f68:	ed9f 3a46 	vldr	s6, [pc, #280]	; 25084 <__ieee754_logf+0x1d8>
   24f6c:	eddf 4a46 	vldr	s9, [pc, #280]	; 25088 <__ieee754_logf+0x1dc>
   24f70:	eddf 5a46 	vldr	s11, [pc, #280]	; 2508c <__ieee754_logf+0x1e0>
   24f74:	eddf 3a46 	vldr	s7, [pc, #280]	; 25090 <__ieee754_logf+0x1e4>
   24f78:	ed9f 5a46 	vldr	s10, [pc, #280]	; 25094 <__ieee754_logf+0x1e8>
   24f7c:	eddf 7a46 	vldr	s15, [pc, #280]	; 25098 <__ieee754_logf+0x1ec>
   24f80:	eddf 6a46 	vldr	s13, [pc, #280]	; 2509c <__ieee754_logf+0x1f0>
   24f84:	ee24 6a04 	vmul.f32	s12, s8, s8
   24f88:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   24f8c:	ee26 7a06 	vmul.f32	s14, s12, s12
   24f90:	eee7 4a03 	vfma.f32	s9, s14, s6
   24f94:	eea7 5a23 	vfma.f32	s10, s14, s7
   24f98:	eee4 5a87 	vfma.f32	s11, s9, s14
   24f9c:	eee5 6a07 	vfma.f32	s13, s10, s14
   24fa0:	eee5 7a87 	vfma.f32	s15, s11, s14
   24fa4:	ee67 7a86 	vmul.f32	s15, s15, s12
   24fa8:	eee6 7a87 	vfma.f32	s15, s13, s14
   24fac:	dd2a      	ble.n	25004 <__ieee754_logf+0x158>
   24fae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24fb2:	ee20 7a07 	vmul.f32	s14, s0, s14
   24fb6:	ee27 7a00 	vmul.f32	s14, s14, s0
   24fba:	bb4b      	cbnz	r3, 25010 <__ieee754_logf+0x164>
   24fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
   24fc0:	eea7 7ac4 	vfms.f32	s14, s15, s8
   24fc4:	ee30 0a47 	vsub.f32	s0, s0, s14
   24fc8:	4770      	bx	lr
   24fca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24fce:	eddf 6a34 	vldr	s13, [pc, #208]	; 250a0 <__ieee754_logf+0x1f4>
   24fd2:	eef0 7a47 	vmov.f32	s15, s14
   24fd6:	eee0 7a66 	vfms.f32	s15, s0, s13
   24fda:	ee20 7a00 	vmul.f32	s14, s0, s0
   24fde:	ee27 7a27 	vmul.f32	s14, s14, s15
   24fe2:	2b00      	cmp	r3, #0
   24fe4:	d0ee      	beq.n	24fc4 <__ieee754_logf+0x118>
   24fe6:	ee07 3a90 	vmov	s15, r3
   24fea:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 250a4 <__ieee754_logf+0x1f8>
   24fee:	eddf 6a2e 	vldr	s13, [pc, #184]	; 250a8 <__ieee754_logf+0x1fc>
   24ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24ff6:	eea7 7ac6 	vfms.f32	s14, s15, s12
   24ffa:	ee37 0a40 	vsub.f32	s0, s14, s0
   24ffe:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   25002:	4770      	bx	lr
   25004:	bb13      	cbnz	r3, 2504c <__ieee754_logf+0x1a0>
   25006:	ee70 7a67 	vsub.f32	s15, s0, s15
   2500a:	eea7 0ac4 	vfms.f32	s0, s15, s8
   2500e:	4770      	bx	lr
   25010:	eddf 6a24 	vldr	s13, [pc, #144]	; 250a4 <__ieee754_logf+0x1f8>
   25014:	ed9f 6a24 	vldr	s12, [pc, #144]	; 250a8 <__ieee754_logf+0x1fc>
   25018:	ee77 7a87 	vadd.f32	s15, s15, s14
   2501c:	ee62 6aa6 	vmul.f32	s13, s5, s13
   25020:	eee7 6a84 	vfma.f32	s13, s15, s8
   25024:	ee37 7a66 	vsub.f32	s14, s14, s13
   25028:	ee37 0a40 	vsub.f32	s0, s14, s0
   2502c:	ee92 0a86 	vfnms.f32	s0, s5, s12
   25030:	4770      	bx	lr
   25032:	ee07 3a90 	vmov	s15, r3
   25036:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 250a4 <__ieee754_logf+0x1f8>
   2503a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 250a8 <__ieee754_logf+0x1fc>
   2503e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   25042:	ee27 0a80 	vmul.f32	s0, s15, s0
   25046:	eea7 0a87 	vfma.f32	s0, s15, s14
   2504a:	4770      	bx	lr
   2504c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 250a4 <__ieee754_logf+0x1f8>
   25050:	eddf 6a15 	vldr	s13, [pc, #84]	; 250a8 <__ieee754_logf+0x1fc>
   25054:	ee70 7a67 	vsub.f32	s15, s0, s15
   25058:	ee27 7a62 	vnmul.f32	s14, s14, s5
   2505c:	eea7 7a84 	vfma.f32	s14, s15, s8
   25060:	ee37 0a40 	vsub.f32	s0, s14, s0
   25064:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   25068:	4770      	bx	lr
   2506a:	bf00      	nop
   2506c:	004afb20 	.word	0x004afb20
   25070:	007ffff0 	.word	0x007ffff0
   25074:	00000000 	.word	0x00000000
   25078:	cc000000 	.word	0xcc000000
   2507c:	4c000000 	.word	0x4c000000
   25080:	ffcf5c30 	.word	0xffcf5c30
   25084:	3e178897 	.word	0x3e178897
   25088:	3e3a3325 	.word	0x3e3a3325
   2508c:	3e924925 	.word	0x3e924925
   25090:	3e1cd04f 	.word	0x3e1cd04f
   25094:	3e638e29 	.word	0x3e638e29
   25098:	3f2aaaab 	.word	0x3f2aaaab
   2509c:	3ecccccd 	.word	0x3ecccccd
   250a0:	3eaaaaab 	.word	0x3eaaaaab
   250a4:	3717f7d1 	.word	0x3717f7d1
   250a8:	3f317180 	.word	0x3f317180

000250ac <__errno>:
   250ac:	4b01      	ldr	r3, [pc, #4]	; (250b4 <__errno+0x8>)
   250ae:	6818      	ldr	r0, [r3, #0]
   250b0:	4770      	bx	lr
   250b2:	bf00      	nop
   250b4:	20000fa0 	.word	0x20000fa0
   250b8:	7475227b 	.word	0x7475227b
   250bc:	22656d69 	.word	0x22656d69
   250c0:	6c25203a 	.word	0x6c25203a
   250c4:	6d222c75 	.word	0x6d222c75
   250c8:	3a226773 	.word	0x3a226773
   250cc:	6c732220 	.word	0x6c732220
   250d0:	695f746f 	.word	0x695f746f
   250d4:	203d2064 	.word	0x203d2064
   250d8:	7d226425 	.word	0x7d226425
   250dc:	0000000a 	.word	0x0000000a
   250e0:	7475227b 	.word	0x7475227b
   250e4:	22656d69 	.word	0x22656d69
   250e8:	6c25203a 	.word	0x6c25203a
   250ec:	6d222c75 	.word	0x6d222c75
   250f0:	3a226773 	.word	0x3a226773
   250f4:	75652220 	.word	0x75652220
   250f8:	36316469 	.word	0x36316469
   250fc:	30203d20 	.word	0x30203d20
   25100:	22582578 	.word	0x22582578
   25104:	00000a7d 	.word	0x00000a7d
   25108:	7475227b 	.word	0x7475227b
   2510c:	22656d69 	.word	0x22656d69
   25110:	6c25203a 	.word	0x6c25203a
   25114:	6d222c75 	.word	0x6d222c75
   25118:	3a226773 	.word	0x3a226773
   2511c:	6c732220 	.word	0x6c732220
   25120:	745f746f 	.word	0x745f746f
   25124:	72656d69 	.word	0x72656d69
   25128:	5f62635f 	.word	0x5f62635f
   2512c:	733a6425 	.word	0x733a6425
   25130:	74726174 	.word	0x74726174
   25134:	5f78745f 	.word	0x5f78745f
   25138:	6f727265 	.word	0x6f727265
   2513c:	0a7d2272 	.word	0x0a7d2272
   25140:	00000000 	.word	0x00000000
   25144:	73707061 	.word	0x73707061
   25148:	7277742f 	.word	0x7277742f
   2514c:	61726e5f 	.word	0x61726e5f
   25150:	7365676e 	.word	0x7365676e
   25154:	6d64745f 	.word	0x6d64745f
   25158:	72732f61 	.word	0x72732f61
   2515c:	616d2f63 	.word	0x616d2f63
   25160:	632e6e69 	.word	0x632e6e69
   25164:	00000000 	.word	0x00000000
   25168:	7475227b 	.word	0x7475227b
   2516c:	22656d69 	.word	0x22656d69
   25170:	6c25203a 	.word	0x6c25203a
   25174:	65222c75 	.word	0x65222c75
   25178:	22636578 	.word	0x22636578
   2517c:	2522203a 	.word	0x2522203a
   25180:	0a7d2273 	.word	0x0a7d2273
   25184:	00000000 	.word	0x00000000
   25188:	6564227b 	.word	0x6564227b
   2518c:	65636976 	.word	0x65636976
   25190:	2264695f 	.word	0x2264695f
   25194:	6c25223a 	.word	0x6c25223a
   25198:	00002258 	.word	0x00002258
   2519c:	6170222c 	.word	0x6170222c
   251a0:	2264696e 	.word	0x2264696e
   251a4:	5825223a 	.word	0x5825223a
   251a8:	00000022 	.word	0x00000022
   251ac:	6461222c 	.word	0x6461222c
   251b0:	3a227264 	.word	0x3a227264
   251b4:	22582522 	.word	0x22582522
   251b8:	00000000 	.word	0x00000000
   251bc:	6170222c 	.word	0x6170222c
   251c0:	695f7472 	.word	0x695f7472
   251c4:	223a2264 	.word	0x223a2264
   251c8:	22586c25 	.word	0x22586c25
   251cc:	00000000 	.word	0x00000000
   251d0:	6f6c222c 	.word	0x6f6c222c
   251d4:	64695f74 	.word	0x64695f74
   251d8:	25223a22 	.word	0x25223a22
   251dc:	7d22586c 	.word	0x7d22586c
   251e0:	0000000a 	.word	0x0000000a
   251e4:	7475227b 	.word	0x7475227b
   251e8:	22656d69 	.word	0x22656d69
   251ec:	6c25203a 	.word	0x6c25203a
   251f0:	6d222c75 	.word	0x6d222c75
   251f4:	3a226773 	.word	0x3a226773
   251f8:	72662220 	.word	0x72662220
   251fc:	5f656d61 	.word	0x5f656d61
   25200:	61727564 	.word	0x61727564
   25204:	6e6f6974 	.word	0x6e6f6974
   25208:	25203d20 	.word	0x25203d20
   2520c:	73752064 	.word	0x73752064
   25210:	7d226365 	.word	0x7d226365
   25214:	0000000a 	.word	0x0000000a
   25218:	7475227b 	.word	0x7475227b
   2521c:	22656d69 	.word	0x22656d69
   25220:	6c25203a 	.word	0x6c25203a
   25224:	6d222c75 	.word	0x6d222c75
   25228:	3a226773 	.word	0x3a226773
   2522c:	48532220 	.word	0x48532220
   25230:	75645f52 	.word	0x75645f52
   25234:	69746172 	.word	0x69746172
   25238:	3d206e6f 	.word	0x3d206e6f
   2523c:	20642520 	.word	0x20642520
   25240:	63657375 	.word	0x63657375
   25244:	000a7d22 	.word	0x000a7d22
   25248:	7475227b 	.word	0x7475227b
   2524c:	22656d69 	.word	0x22656d69
   25250:	6c25203a 	.word	0x6c25203a
   25254:	6d222c75 	.word	0x6d222c75
   25258:	3a226773 	.word	0x3a226773
   2525c:	6f682220 	.word	0x6f682220
   25260:	666f646c 	.word	0x666f646c
   25264:	203d2066 	.word	0x203d2066
   25268:	75206425 	.word	0x75206425
   2526c:	22636573 	.word	0x22636573
   25270:	00000a7d 	.word	0x00000a7d
   25274:	30317764 	.word	0x30317764
   25278:	255f3030 	.word	0x255f3030
   2527c:	00000064 	.word	0x00000064
   25280:	30337764 	.word	0x30337764
   25284:	255f3030 	.word	0x255f3030
   25288:	00000064 	.word	0x00000064
   2528c:	5f627775 	.word	0x5f627775
   25290:	00717269 	.word	0x00717269
   25294:	65737341 	.word	0x65737341
   25298:	40207472 	.word	0x40207472
   2529c:	25783020 	.word	0x25783020
   252a0:	00000a78 	.word	0x00000a78
   252a4:	65737341 	.word	0x65737341
   252a8:	40207472 	.word	0x40207472
   252ac:	25783020 	.word	0x25783020
   252b0:	202d2078 	.word	0x202d2078
   252b4:	253a7325 	.word	0x253a7325
   252b8:	00000a64 	.word	0x00000a64
   252bc:	61686e55 	.word	0x61686e55
   252c0:	656c646e 	.word	0x656c646e
   252c4:	6e692064 	.word	0x6e692064
   252c8:	72726574 	.word	0x72726574
   252cc:	20747075 	.word	0x20747075
   252d0:	646c2528 	.word	0x646c2528
   252d4:	65202c29 	.word	0x65202c29
   252d8:	70656378 	.word	0x70656378
   252dc:	6e6f6974 	.word	0x6e6f6974
   252e0:	20707320 	.word	0x20707320
   252e4:	30257830 	.word	0x30257830
   252e8:	0a786c38 	.word	0x0a786c38
   252ec:	00000000 	.word	0x00000000
   252f0:	3a307220 	.word	0x3a307220
   252f4:	30257830 	.word	0x30257830
   252f8:	20786c38 	.word	0x20786c38
   252fc:	3a317220 	.word	0x3a317220
   25300:	30257830 	.word	0x30257830
   25304:	20786c38 	.word	0x20786c38
   25308:	3a327220 	.word	0x3a327220
   2530c:	30257830 	.word	0x30257830
   25310:	20786c38 	.word	0x20786c38
   25314:	3a337220 	.word	0x3a337220
   25318:	30257830 	.word	0x30257830
   2531c:	0a786c38 	.word	0x0a786c38
   25320:	00000000 	.word	0x00000000
   25324:	3a347220 	.word	0x3a347220
   25328:	30257830 	.word	0x30257830
   2532c:	20786c38 	.word	0x20786c38
   25330:	3a357220 	.word	0x3a357220
   25334:	30257830 	.word	0x30257830
   25338:	20786c38 	.word	0x20786c38
   2533c:	3a367220 	.word	0x3a367220
   25340:	30257830 	.word	0x30257830
   25344:	20786c38 	.word	0x20786c38
   25348:	3a377220 	.word	0x3a377220
   2534c:	30257830 	.word	0x30257830
   25350:	0a786c38 	.word	0x0a786c38
   25354:	00000000 	.word	0x00000000
   25358:	3a387220 	.word	0x3a387220
   2535c:	30257830 	.word	0x30257830
   25360:	20786c38 	.word	0x20786c38
   25364:	3a397220 	.word	0x3a397220
   25368:	30257830 	.word	0x30257830
   2536c:	20786c38 	.word	0x20786c38
   25370:	3a303172 	.word	0x3a303172
   25374:	30257830 	.word	0x30257830
   25378:	20786c38 	.word	0x20786c38
   2537c:	3a313172 	.word	0x3a313172
   25380:	30257830 	.word	0x30257830
   25384:	0a786c38 	.word	0x0a786c38
   25388:	00000000 	.word	0x00000000
   2538c:	3a323172 	.word	0x3a323172
   25390:	30257830 	.word	0x30257830
   25394:	20786c38 	.word	0x20786c38
   25398:	3a726c20 	.word	0x3a726c20
   2539c:	30257830 	.word	0x30257830
   253a0:	20786c38 	.word	0x20786c38
   253a4:	3a637020 	.word	0x3a637020
   253a8:	30257830 	.word	0x30257830
   253ac:	20786c38 	.word	0x20786c38
   253b0:	3a727370 	.word	0x3a727370
   253b4:	30257830 	.word	0x30257830
   253b8:	0a786c38 	.word	0x0a786c38
   253bc:	00000000 	.word	0x00000000
   253c0:	52534349 	.word	0x52534349
   253c4:	2578303a 	.word	0x2578303a
   253c8:	786c3830 	.word	0x786c3830
   253cc:	53464820 	.word	0x53464820
   253d0:	78303a52 	.word	0x78303a52
   253d4:	6c383025 	.word	0x6c383025
   253d8:	46432078 	.word	0x46432078
   253dc:	303a5253 	.word	0x303a5253
   253e0:	38302578 	.word	0x38302578
   253e4:	000a786c 	.word	0x000a786c
   253e8:	52414642 	.word	0x52414642
   253ec:	2578303a 	.word	0x2578303a
   253f0:	786c3830 	.word	0x786c3830
   253f4:	464d4d20 	.word	0x464d4d20
   253f8:	303a5241 	.word	0x303a5241
   253fc:	38302578 	.word	0x38302578
   25400:	000a786c 	.word	0x000a786c
   25404:	656c6469 	.word	0x656c6469
   25408:	00000000 	.word	0x00000000
   2540c:	6e69616d 	.word	0x6e69616d
   25410:	00000000 	.word	0x00000000
   25414:	7379736d 	.word	0x7379736d
   25418:	0000315f 	.word	0x0000315f
   2541c:	4d525245 	.word	0x4d525245
   25420:	25204d45 	.word	0x25204d45
   25424:	00000a64 	.word	0x00000a64
   25428:	7475227b 	.word	0x7475227b
   2542c:	22656d69 	.word	0x22656d69
   25430:	6c25203a 	.word	0x6c25203a
   25434:	6d222c75 	.word	0x6d222c75
   25438:	3a226773 	.word	0x3a226773
   2543c:	6d6e2220 	.word	0x6d6e2220
   25440:	755f7267 	.word	0x755f7267
   25444:	695f6277 	.word	0x695f6277
   25448:	2274696e 	.word	0x2274696e
   2544c:	00000a7d 	.word	0x00000a7d
   25450:	20425755 	.word	0x20425755
   25454:	52474d4e 	.word	0x52474d4e
   25458:	3a78745f 	.word	0x3a78745f
   2545c:	20785420 	.word	0x20785420
   25460:	6f727245 	.word	0x6f727245
   25464:	00002072 	.word	0x00002072
   25468:	23232323 	.word	0x23232323
   2546c:	52452023 	.word	0x52452023
   25470:	20524f52 	.word	0x20524f52
   25474:	5f627775 	.word	0x5f627775
   25478:	72676d6e 	.word	0x72676d6e
   2547c:	6520715f 	.word	0x6520715f
   25480:	665f7478 	.word	0x665f7478
   25484:	656c6961 	.word	0x656c6961
   25488:	00000064 	.word	0x00000064
   2548c:	23232323 	.word	0x23232323
   25490:	52452023 	.word	0x52452023
   25494:	20524f52 	.word	0x20524f52
   25498:	5f627775 	.word	0x5f627775
   2549c:	72676d6e 	.word	0x72676d6e
   254a0:	7220715f 	.word	0x7220715f
   254a4:	64253a63 	.word	0x64253a63
   254a8:	0000000a 	.word	0x0000000a
   254ac:	676e726e 	.word	0x676e726e
   254b0:	00000000 	.word	0x00000000
   254b4:	7475227b 	.word	0x7475227b
   254b8:	22656d69 	.word	0x22656d69
   254bc:	6c25203a 	.word	0x6c25203a
   254c0:	6d222c75 	.word	0x6d222c75
   254c4:	3a226773 	.word	0x3a226773
   254c8:	726e2220 	.word	0x726e2220
   254cc:	705f676e 	.word	0x705f676e
   254d0:	695f676b 	.word	0x695f676b
   254d4:	2274696e 	.word	0x2274696e
   254d8:	00000a7d 	.word	0x00000a7d
   254dc:	676e726e 	.word	0x676e726e
   254e0:	7165725f 	.word	0x7165725f
   254e4:	74736575 	.word	0x74736575
   254e8:	00000000 	.word	0x00000000
   254ec:	676e726e 	.word	0x676e726e
   254f0:	73696c5f 	.word	0x73696c5f
   254f4:	006e6574 	.word	0x006e6574
   254f8:	635f7872 	.word	0x635f7872
   254fc:	6c706d6f 	.word	0x6c706d6f
   25500:	00657465 	.word	0x00657465
   25504:	655f7872 	.word	0x655f7872
   25508:	726f7272 	.word	0x726f7272
   2550c:	00000000 	.word	0x00000000
   25510:	745f7872 	.word	0x745f7872
   25514:	6f656d69 	.word	0x6f656d69
   25518:	00007475 	.word	0x00007475
   2551c:	706d6f63 	.word	0x706d6f63
   25520:	6574656c 	.word	0x6574656c
   25524:	00000000 	.word	0x00000000
   25528:	72617473 	.word	0x72617473
   2552c:	78725f74 	.word	0x78725f74
   25530:	7272655f 	.word	0x7272655f
   25534:	0000726f 	.word	0x0000726f
   25538:	755f7872 	.word	0x755f7872
   2553c:	6c6f736e 	.word	0x6c6f736e
   25540:	74696369 	.word	0x74696369
   25544:	00006465 	.word	0x00006465
   25548:	655f7874 	.word	0x655f7874
   2554c:	726f7272 	.word	0x726f7272
   25550:	00000000 	.word	0x00000000
   25554:	72617473 	.word	0x72617473
   25558:	78745f74 	.word	0x78745f74
   2555c:	7272655f 	.word	0x7272655f
   25560:	0000726f 	.word	0x0000726f

00025564 <g_stats_map_nrng_stat_section>:
   25564:	54dc0014 00180002 000254ec 54f8001c     ...T.....T.....T
   25574:	00280002 00025504 55100020 00240002     ..(..U.. ..U..$.
   25584:	0002551c 5528002c 00300002 00025538     .U..,.(U..0.8U..
   25594:	55480034 00380002 00025554 5c60003c     4.HU..8.TU..<.`\
   255a4:	00000002 6d697475 00000065 00716573     ....utime...seq.
   255b4:	00646975 6469756f 00000000 00000000     uid.ouid........
   255c4:	6d6e6170 2f727473 5f6e6170 00006469     panmstr/pan_id..
   255d4:	6d6e6170 6f6e203a 75206564 000a6470     panm: node upd..
   255e4:	6c707544 6f687320 61207472 20726464     Dupl short addr 
   255f4:	000a7825 6d6e6170 6f6e203a 61206564     %x..panm: node a
   25604:	64656464 0000000a 6d6e6170 65747361     dded....panmaste
   25614:	65645f72 6574656c 646f6e5f 6e203a65     r_delete_node: n
   25624:	2065646f 656c6564 0a646574 00000000     ode deleted.....
   25634:	6d6e6170 00727473 6e692023 20786564     panmstr.# index 
   25644:	72646461 69756520 6c662064 20736761     addr euid flags 
   25654:	656c6f72 6c737020 7320746f 5f746f6c     role pslot slot_
   25664:	66206469 65762d77 00000a72 20643325     id fw-ver...%3d 
   25674:	78343025 31302520 786c6c36 20782520     %04x %016llx %x 
   25684:	25207825 64252064 00000020 00000070     %x %d %d ...p...
   25694:	3a727265 0a6d656d 00000000 78646923     err:mem.....#idx
   256a4:	6461202c 202c7264 656c6f72 6c73202c     , addr, role, sl
   256b4:	202c746f 20202c70 7361656c 65202c65     ot, p,  lease, e
   256c4:	2c646975 20202020 20202020 20202020     uid,            
   256d4:	616c6620 202c7367 20202020 20202020      flags,         
   256e4:	74616420 64612d65 2c646564 2d776620      date-added, fw-
   256f4:	0a726576 00000000 2c643425 00000020     ver.....%4d, ...
   25704:	2c783425 00000020 2c583425 00000020     %4x, ...%4X, ...
   25714:	20202020 0000202c 202c7325 00000000         , ..%s, ....
   25724:	646c3425 646c252e 0000202c 20202020     %4ld.%ld, ..    
   25734:	202c2020 00000000 36313025 2c586c6c       , ....%016llX,
   25744:	00000020 2c583525 00000020 00007325      ...%5X, ...%s..
   25754:	206f6f54 20776566 73677261 0000000a     Too few args....
   25764:	7473696c 00000000 00646461 64697565     list....add.euid
   25774:	65656e20 0a646564 00000000 65646441      needed.....Adde
   25784:	6f6e2064 65206564 3a646975 25783020     d node euid: 0x%
   25794:	2c586c6c 64646120 78302072 000a5825     llX, addr 0x%X..
   257a4:	20646441 65646f6e 72726520 0000000a     Add node err....
   257b4:	006c6564 6f6c7370 00000074 64697565     del.pslot...euid
   257c4:	6f6c732b 64695f74 65656e20 0a646564     +slot_id needed.
   257d4:	00000000 6c257830 203a586c 6f6c7370     ....0x%llX: pslo
   257e4:	3e2d2074 00000020 6d65723c 6465766f     t -> ...<removed
   257f4:	00000a3e 0a727265 00000000 656c6f72     >...err.....role
   25804:	00000000 64697565 6c6f722b 656e2065     ....euid+role ne
   25814:	64656465 0000000a 6c257830 203a586c     eded....0x%llX: 
   25824:	656c6f72 203e2d20 200a6425 00000000     role -> %d. ....
   25834:	61656c63 00000072 706d6f63 00000072     clear...compr...
   25844:	74726f73 00000000 706d7564 00000000     sort....dump....
   25854:	6e6b6e55 206e776f 0a646d63 00000000     Unknown cmd.....
   25864:	6d6e6170 00000000 6d6e6170 65747361     panm....panmaste
   25874:	6f632072 6e616d6d 00007364 646d633c     r commands..<cmd
   25884:	0000003e 6975653c 5b203e64 72646461     >...<euid> [addr
   25894:	6461205d 6f6e2064 00006564 6975653c     ] add node..<eui
   258a4:	64203e64 74656c65 6f6e2065 00006564     d> delete node..
   258b4:	6975653c 3c203e64 746f6c73 3e64695f     <euid> <slot_id>
   258c4:	74657320 72657020 656e616d 7320746e      set permanent s
   258d4:	20746f6c 65737528 6f6c7320 64695f74     lot (use slot_id
   258e4:	20312d3d 72206f74 766f6d65 00002965     =-1 to remove)..
   258f4:	6975653c 3c203e64 656c6f72 6573203e     <euid> <role> se
   25904:	6f722074 0029656c 73617265 696c2065     t role).erase li
   25914:	00007473                                st..

00025918 <cmd_pm_help>:
   25918:	0002586c 00025880 00025924              lX...X..$Y..

00025924 <cmd_pm_param>:
   25924:	00025764 00026524 0002576c 00025888     dW..$e..lW...X..
   25934:	000257b4 000258a0 000257b8 000258b4     .W...X...W...X..
   25944:	00025800 000258f4 0002584c 00026524     .X...X..LX..$e..
   25954:	00025834 0002590c 0002583c 00026524     4X...Y..<X..$e..
   25964:	00025844 00026524 00000000 00000000     DX..$e..........
   25974:	76727573 00007965 7475227b 22656d69     survey..{"utime"
   25984:	6c25203a 6d222c75 3a226773 75732220     : %lu,"msg": "su
   25994:	79657672 676b705f 696e695f 0a7d2274     rvey_pkg_init"}.
   259a4:	00000000 616f7262 73616364 00726574     ....broadcaster.
   259b4:	65636572 72657669 00000000              receiver....

000259c0 <g_stats_map_survey_stat_section>:
   259c0:	76d80014 00180002 000276e4 5538001c     ...v.....v....8U
   259d0:	00200002 00025554 55280024 00280002     .. .TU..$.(U..(.
   259e0:	000259a8 59b4002c 00300002 00025510     .Y..,..Y..0..U..
   259f0:	5c600034 00000002 616d6474 00000000     4.`\....tdma....
   25a00:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   25a10:	3a226773 64742220 705f616d 695f676b     sg": "tdma_pkg_i
   25a20:	2274696e 00000a7d 7475227b 22656d69     nit"}...{"utime"
   25a30:	6c25203a 6d222c75 3a226773 64742220     : %lu,"msg": "td
   25a40:	705f616d 645f676b 226e776f 00000a7d     ma_pkg_down"}...
   25a50:	746f6c73 6d69745f 635f7265 0000746e     slot_timer_cnt..
   25a60:	65707573 61726672 635f656d 0000746e     superframe_cnt..
   25a70:	65707573 61726672 6d5f656d 00737369     superframe_miss.
   25a80:	706f7264 5f646570 746f6c73 00000073     dropped_slots...

00025a90 <g_stats_map_tdma_stat_section>:
   25a90:	5a500014 00180002 00025a60 5a70001c     ..PZ....`Z....pZ
   25aa0:	00200002 00025a80 00706363 7475227b     .. ..Z..ccp.{"ut
   25ab0:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   25ac0:	77752220 63635f62 6b705f70 6e695f67      "uwb_ccp_pkg_in
   25ad0:	7d227469 0000000a 7473616d 635f7265     it"}....master_c
   25ae0:	0000746e 76616c73 6e635f65 00000074     nt..slave_cnt...
   25af0:	646e6573 00000000 635f7874 6c706d6f     send....tx_compl
   25b00:	00657465 725f7872 79616c65 00006465     ete.rx_relayed..
   25b10:	735f7872 74726174 7272655f 0000726f     rx_start_error..
   25b20:	6f5f7872 72656874 6172665f 0000656d     rx_other_frame..
   25b30:	78727874 7272655f 0000726f 735f7874     txrx_error..tx_s
   25b40:	74726174 7272655f 0000726f 725f7874     tart_error..tx_r
   25b50:	79616c65 7272655f 0000726f 725f7874     elay_error..tx_r
   25b60:	79616c65 006b6f5f 5f717269 6574616c     elay_ok.irq_late
   25b70:	0079636e 6c5f736f 625f7461 6e696865     ncy.os_lat_behin
   25b80:	00000064 6c5f736f 6d5f7461 69677261     d...os_lat_margi
   25b90:	0000006e 5f6d6573 656d6974 0074756f     n...sem_timeout.

00025ba0 <g_stats_map_uwb_ccp_stat_section>:
   25ba0:	5ad80014 00180002 00025ae4 5af0001c     ...Z.....Z.....Z
   25bb0:	00200002 000276e4 5af80024 00280002     .. ..v..$..Z..(.
   25bc0:	000254f8 5b04002c 00300002 00025b10     .T..,..[..0..[..
   25bd0:	55380034 00380002 00025b20 5b30003c     4.8U..8. [..<.0[
   25be0:	00400002 00025b3c 5b4c0044 00480002     ..@.<[..D.L[..H.
   25bf0:	00025b5c 5b68004c 00500002 00025b74     \[..L.h[..P.t[..
   25c00:	5b840054 00580002 00025510 5b94005c     T..[..X..U..\..[
   25c10:	00600002 00025c60 7475227b 22656d69     ..`.`\..{"utime"
   25c20:	6c25203a 6d222c75 3a226773 61702220     : %lu,"msg": "pa
   25c30:	6b705f6e 6e695f67 7d227469 0000000a     n_pkg_init"}....
   25c40:	006e6170 5f6e6170 75716572 00747365     pan.pan_request.
   25c50:	5f6e6170 7473696c 00006e65 5f6e6170     pan_listen..pan_
   25c60:	65736572 00000074 616c6572 78745f79     reset...relay_tx
   25c70:	00000000 7361656c 78655f65 79726970     ....lease_expiry
   25c80:	00000000                                ....

00025c84 <g_stats_map_pan_stat_section>:
   25c84:	5c440014 00180002 00025c50 5c5c001c     ..D\....P\....\\
   25c94:	00200002 00025c68 5c740024 00280002     .. .h\..$.t\..(.
   25ca4:	00025af8 54f8002c 00300002 00025538     .Z..,..T..0.8U..
   25cb4:	5b200034 00380002 00025504 5548003c     4. [..8..U..<.HU
   25cc4:	00400002 00025510 5c600044 00000002     ..@..U..D.`\....
   25cd4:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   25ce4:	3a226773 77752220 63775f62 6b705f73     sg": "uwb_wcs_pk
   25cf4:	6e695f67 7d227469 0000000a              g_init"}....

00025d00 <stdout>:
   25d00:	200006b4                                ... 

00025d04 <MemFile_methods>:
   25d04:	00010f47 00000000 00006372 0066666f     G.......rc..off.
   25d14:	61746164 00000000 006e656c 00616873     data....len.sha.
   25d24:	72677075 00656461                       upgrade.

00025d2c <imgr_nmgr_handlers>:
   25d2c:	00011d05 00011ec1 00000000 000115dd     ................
	...
   25d58:	000113a5 00000000 00011339 25206425     ........9...%d %
   25d68:	203a7338 25207325 00000a73 6f727245     8s: %s %s...Erro
   25d78:	6f632072 7269666e 676e696d 616d6920     r confirming ima
   25d88:	73206567 65746174 6372203b 0a64253d     ge state; rc=%d.
   25d98:	00000000 69206f4e 6567616d 74697720     ....No image wit
   25da8:	61682068 203a6873 000a7325 61766e49     h hash: %s..Inva
   25db8:	2064696c 746f6c73 6d756e20 20726562     lid slot number 
   25dc8:	6920726f 6567616d 73616820 25203a68     or image hash: %
   25dd8:	00000a73 6f727245 65732072 6e697474     s...Error settin
   25de8:	6c732067 2520746f 6f742064 6e657020     g slot %d to pen
   25df8:	676e6964 6372203b 0a64253d 00000000     ding; rc=%d.....
   25e08:	6f727245 706f2072 6e696e65 72612067     Error opening ar
   25e18:	25206165 00000a64 6f727245 72652072     ea %d...Error er
   25e28:	6e697361 72612067 72206165 64253d63     asing area rc=%d
   25e38:	0000000a 73206f4e 61746975 20656c62     ....No suitable 
   25e48:	61657261 206f7420 73617265 00000a65     area to erase...
   25e58:	74736574 00000000 666e6f63 006d7269     test....confirm.
   25e68:	73617265 00000065 72676d69 00000000     erase...imgr....
   25e78:	67616d69 616d2065 6567616e 746e656d     image management
   25e88:	6d6f6320 646e616d 00000000 2020200a      command.....   
   25e98:	676d6920 696c2072 200a7473 69202020      imgr list.    i
   25ea8:	2072676d 74736574 6c733c20 7c20746f     mgr test <slot |
   25eb8:	73616820 200a3e68 69202020 2072676d      hash>.    imgr 
   25ec8:	666e6f63 206d7269 6f6c735b 207c2074     confirm [slot | 
   25ed8:	68736168 0000005d                       hash]...

00025ee0 <imgr_cli_help>:
   25ee0:	00025e78 00025e94 00000000 74737075     x^...^......upst
   25ef0:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   25f00:	00000000 666e6f63 00000000 67616d69     ....conf....imag
   25f10:	00007365 746f6c73 00000000 73726576     es..slot....vers
   25f20:	006e6f69 68736168 00000000 746f6f62     ion.hash....boot
   25f30:	656c6261 00000000 646e6570 00676e69     able....pending.
   25f40:	666e6f63 656d7269 00000064 69746361     confirmed...acti
   25f50:	00006576 6d726570 6e656e61 00000074     ve..permanent...
   25f60:	696c7073 61745374 00737574 252e7525     splitStatus.%u.%
   25f70:	75252e75 756c252e 00000000 252e7525     u.%u.%lu....%u.%
   25f80:	75252e75 00000000 65746164 656d6974     u.%u....datetime
   25f90:	00000000 6f686365 00000000 6f6f706d     ....echo....mpoo
   25fa0:	0000736c 736b6c62 00007a69 6b6c626e     ls..blksiz..nblk
   25fb0:	00000073 6572666e 00000065 006e696d     s...nfree...min.
   25fc0:	6f697270 00000000 00646974 74617473     prio....tid.stat
   25fd0:	00000065 756b7473 00006573 736b7473     e...stkuse..stks
   25fe0:	00007a69 63777363 0000746e 746e7572     iz..cswcnt..runt
   25ff0:	00656d69 7473616c 6568635f 6e696b63     ime.last_checkin
   26000:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   26010:	00000000                                ....

00026014 <nmgr_def_group_handlers>:
   26014:	000124fd 000124fd 000124a1 000124a1     .$...$...$...$..
   26024:	000126fd 00000000 000125f5 00000000     .&.......%......
   26034:	00012575 00012441 00000000 000123e5     u%..A$.......#..
   26044:	0000002f 00646c25 646c6c25 00000000     /...%ld.%lld....
   26054:	6c65643c 0000003e 3d207325 0a732520     <del>...%s = %s.
   26064:	00000000 656e6f44 0000000a 6c696146     ....Done....Fail
   26074:	74206465 6f63206f 74696d6d 0000000a     ed to commit....
   26084:	6d6d6f63 00007469 6e6e7572 00676e69     commit..running.
   26094:	65766173 00000000 6e6e6143 6420746f     save....Cannot d
   260a4:	6c707369 76207961 65756c61 0000000a     isplay value....
   260b4:	6c696146 74206465 6573206f 65202c74     Failed to set, e
   260c4:	203a7272 000a6425 61766e49 2064696c     rr: %d..Invalid 
   260d4:	73677261 0000000a 666e6f63 00006769     args....config..
   260e4:	75255b1b 00000044 75255b1b 00000043     .[%uD....[%uC...
   260f4:	6c363025 00002075 3d73745b 756c6c25     %06lu ..[ts=%llu
   26104:	202c7375 3d646f6d 6c207525 6c657665     us, mod=%u level
   26114:	5d75253d 00000020 736e6f63 00656c6f     =%u] ...console.

00026124 <log_console_handler>:
   26124:	00000000 00014571 00000000 000145c9     ....qE.......E..
   26134:	0001459d 00000000 00000000 00014575     .E..........uE..
   26144:	00014579 00000000 6c696166 74206465     yE......failed t
   26154:	6572206f 4d206461 3a73524d 3d637220     o read MMRs: rc=
   26164:	00006425 6f626572 722f746f 6f6f6265     %d..reboot/reboo
   26174:	6e635f74 00000074 6f626572 772f746f     t_cnt...reboot/w
   26184:	74746972 00006e65 6f626572 635f746f     ritten..reboot_c
   26194:	0000746e 74697277 006e6574 44524148     nt..written.HARD
   261a4:	00000000 55514552 45545345 00000044     ....REQUESTED...
   261b4:	45534552 49505f54 0000004e 474f4457     RESET_PIN...WDOG
   261c4:	00000000 54464f53 00000000 574f5242     ....SOFT....BROW
   261d4:	54554f4e 00000000 4e4b4e55 004e574f     NOUT....UNKNOWN.
   261e4:	54535953 4f5f4d45 495f4646 0000544e     SYSTEM_OFF_INT..
   261f4:	3a6e7372 202c7325 3a746e63 202c7525     rsn:%s, cnt:%u, 
   26204:	3a676d69 252e7525 75252e75 2c75252e     img:%u.%u.%u.%u,
   26214:	73616820 00003a68 78323025 00000000      hash:..%02x....
   26224:	6964202c 73253a65 0064253a 6370202c     , die:%s:%d., pc
   26234:	2578303a 0000786c 00000031 6f626572     :0x%lx..1...rebo
   26244:	0000746f 706c6568 0000000a 30332d25     ot..help....%-30
   26254:	00000073 30332d25 0a732573 00000000     s...%-30s%s.....
   26264:	65726e55 6e676f63 64657a69 6d6f6320     Unrecognized com
   26274:	646e616d 0000000a 65726e55 6e676f63     mand....Unrecogn
   26284:	64657a69 6d6f6320 646e616d 7325203a     ized command: %s
   26294:	0000000a 656c6c49 206c6167 75646f6d     ....Illegal modu
   262a4:	2520656c 00000a73 656c6c49 206c6167     le %s...Illegal 
   262b4:	61726170 6574656d 00000a72 706c6568     parameter...help
   262c4:	00000000 656c6573 00007463 7373694d     ....select..Miss
   262d4:	20676e69 61726170 6574656d 00000a72     ing parameter...
   262e4:	206f6e28 706c6568 61766120 62616c69     (no help availab
   262f4:	0a29656c 00000000 6d6d7553 3a797261     le).....Summary:
   26304:	0000000a 67617355 000a3a65 61726150     ....Usage:..Para
   26314:	6574656d 0a3a7372 00000000 69617641     meters:.....Avai
   26324:	6c62616c 6f6d2065 656c7564 000a3a73     lable modules:..
   26334:	73206f54 63656c65 20612074 75646f6d     To select a modu
   26344:	202c656c 65746e65 73272072 63656c65     le, enter 'selec
   26354:	6d3c2074 6c75646f 616e2065 273e656d     t <module name>'
   26364:	00000a2e 0000203e 73257325 00000000     ....> ..%s%s....
   26374:	206f6f54 796e616d 72617020 74656d61     Too many paramet
   26384:	20737265 78616d28 757a2520 00000a29     ers (max %zu)...
   26394:	65707954 65682720 2027706c 20726f66     Type 'help' for 
   263a4:	7473696c 20666f20 69617661 6c62616c     list of availabl
   263b4:	6f632065 6e616d6d 000a7364 2078614d     e commands..Max 
   263c4:	626d756e 6f207265 6f6d2066 656c7564     number of module
   263d4:	65722073 65686361 00000a64 2078614d     s reached...Max 
   263e4:	626d756e 6f207265 6f632066 7461706d     number of compat
   263f4:	6d6f6320 646e616d 65722073 65686361      commands reache
   26404:	00000a64 706d6f63 00007461 656c6c49     d...compat..Ille
   26414:	206c6167 75646f6d 2520656c 64202c73     gal module %s, d
   26424:	75616665 6920746c 6f6e2073 68632074     efault is not ch
   26434:	65676e61 00000a64 6c656873 0000006c     anged...shell...

00026444 <shell_cmd_help>:
   26444:	00000001 00014f71 000262c0 00000000     ....qO...b......

00026454 <shell_cmd_select_module>:
   26454:	00000001 00014d35 000262c8 00000000     ....5M...b......
   26464:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   26474:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   26484:	0000007a 656d616e 00000000 73323325     z...name....%32s
   26494:	73352520 73342520 73342520 73342520      %5s %4s %4s %4s
   264a4:	0000000a 65657266 00000000 73323325     ....free....%32s
   264b4:	64352520 64342520 64342520 64342520      %5d %4d %4d %4d
   264c4:	0000000a 6c756f43 74276e64 6e696620     ....Couldn't fin
   264d4:	20612064 6f6d656d 70207972 206c6f6f     d a memory pool 
   264e4:	68746977 6d616e20 73252065 0000000a     with name %s....
   264f4:	61766e49 2064696c 65746164 656d6974     Invalid datetime
   26504:	0000000a 00676c66 00666572 20733425     ....flg.ref.%4s 
   26514:	20733325 000a7325 6b736154 0a203a73     %3s %s..Tasks: .
   26524:	00000000 00697270 6b736174 00000000     ....pri.task....
   26534:	20733825 20733325 20733325 20733825     %8s %3s %3s %8s 
   26544:	20733825 20733825 20733825 20733825     %8s %8s %8s %8s 
   26554:	20733825 0a733325 00000000 6568636e     %8s %3s.....nche
   26564:	00006b63 6568636c 00006b63 736b7473     ck..lcheck..stks
   26574:	0000007a 00777363 20733825 20753325     z...csw.%8s %3u 
   26584:	20753325 756c3825 6c382520 38252075     %3u %8lu %8lu %8
   26594:	38252075 38252075 2520756c 0a756c38     u %8u %8lu %8lu.
   265a4:	00000000 6c756f43 74276e64 6e696620     ....Couldn't fin
   265b4:	61742064 77206b73 20687469 656d616e     d task with name
   265c4:	0a732520 00000000 6564736c 00000076      %s.....lsdev...
   265d4:	7473696c 20534f20 69766564 00736563     list OS devices.
   265e4:	65736572 79732074 6d657473 00000000     reset system....
   265f4:	776f6873 73797320 206d6574 65746164     show system date
   26604:	00000000 65746164 656d6974 206f7420     ....datetime to 
   26614:	00746573 776f6873 73797320 206d6574     set.show system 
   26624:	6f6f706d 0000006c 6f6f706d 616e206c     mpool...mpool na
   26634:	0000656d 776f6873 20736f20 6b736174     me..show os task
   26644:	00000073 6b736174 6d616e20 00000065     s...task name...

00026654 <date_help>:
   26654:	000265f4 00000000 00026660              .e......`f..

00026660 <date_params>:
   26660:	00026524 00026608 00000000 00000000     $e...f..........

00026670 <ls_dev_help>:
   26670:	000265d4 00000000 00000000              .e..........

0002667c <mpool_help>:
   2667c:	00026618 00000000 00026688              .f.......f..

00026688 <mpool_params>:
   26688:	00026524 0002662c 00000000 00000000     $e..,f..........

00026698 <os_commands>:
   26698:	00000001 00015ced 00026640 0002670c     .....\..@f...g..
   266a8:	00000001 00015b6d 00026624 0002667c     ....m[..$f..|f..
   266b8:	00000001 00015c1d 00026600 00026654     .....\...f..Tf..
   266c8:	00000001 00015ca1 00025c60 000266f8     .....\..`\...f..
   266d8:	00000001 00015cb5 000265cc 00026670     .....\...e..pf..
	...

000266f8 <reset_help>:
   266f8:	000265e4 00000000 00026704              .e.......g..

00026704 <reset_params>:
	...

0002670c <tasks_help>:
   2670c:	00026638 00000000 00026718              8f.......g..

00026718 <tasks_params>:
   26718:	00026524 00026648 00000000 00000000     $e..Hf..........
   26728:	00006e6f 6e6f4320 656c6f73 63695420     on.. Console Tic
   26738:	6f20736b 00000a6e 6e6f4320 656c6f73     ks on... Console
   26748:	63695420 6f20736b 000a6666 61735520      Ticks off.. Usa
   26758:	203a6567 6b636974 6f5b2073 666f7c6e     ge: ticks [on|of
   26768:	000a5d66 6d6f7270 00007470 6b636974     f]..prompt..tick
   26778:	00000073 6c656873 6974206c 20736b63     s...shell ticks 
   26788:	6d6d6f63 00646e61 67617375 74203a65     command.usage: t
   26798:	736b6369 6e6f5b20 66666f7c 0000005d     icks [on|off]...
   267a8:	6e727574 006e6f20                       turn on.

000267b0 <prompt_commands>:
   267b0:	00000000 00015e15 00026774 000267d0     .....^..tg...g..
	...

000267d0 <ticks_help>:
   267d0:	0002677c 00026790 000267dc              |g...g...g..

000267dc <ticks_params>:
   267dc:	00026728 000267a8 00025d10 000267a8     (g...g...]...g..
	...
   267f4:	00642573 74617473 00000000 5f6d756e     s%d.stat....num_
   26804:	69676572 72657473 00006465              registered..

00026810 <g_stats_map_stats>:
   26810:	68000014 00000002 203a7325 000a7525     ...h....%s: %u..
   26820:	203a7325 0a756c25 00000000 203a7325     %s: %lu.....%s: 
   26830:	756c6c25 0000000a 6e6b6e55 206e776f     %llu....Unknown 
   26840:	74617473 7a697320 6f662065 73252072     stat size for %s
   26850:	0a752520 00000000 0a732509 00000000      %u......%s.....
   26860:	7473754d 65707320 79666963 73206120     Must specify a s
   26870:	69746174 63697473 6d616e20 6f742065     tatistic name to
   26880:	6d756420 70202c70 6973736f 20656c62      dump, possible 
   26890:	656d616e 72612073 000a3a65 6c756f43     names are:..Coul
   268a0:	6f6e2064 69662074 7320646e 69746174     d not find stati
   268b0:	63697473 6f726720 25207075 00000a73     stic group %s...
   268c0:	252f7325 00000073 00386d36 6b303538     %s/%s...6m8.850k
   268d0:	00000000 6b303131 00000000 20766e69     ....110k....inv 
   268e0:	61657270 6c5f626d 000a6e65 63627775     preamb_len..uwbc
   268f0:	00006766 00627775 00667270 61746164     fg..uwb.prf.data
   26900:	65746172 00000000 705f7872 656c6361     rate....rx_pacle
   26910:	0000006e 705f7872 6d616572 6469635f     n...rx_pream_cid
   26920:	00000078 735f7872 79746466 00006570     x...rx_sfdtype..
   26930:	735f7872 745f6466 0000006f 705f7872     rx_sfd_to...rx_p
   26940:	6f6d7268 00006564 645f7872 5f676169     hrmode..rx_diag_
   26950:	00006e65 705f7874 6d616572 6469635f     en..tx_pream_cid
   26960:	00000078 705f7874 6d616572 6e656c5f     x...tx_pream_len
   26970:	00000000 66727874 776f705f 635f7265     ....txrf_power_c
   26980:	7372616f 00000065 66727874 776f705f     oarse...txrf_pow
   26990:	665f7265 00656e69 615f7872 6c64746e     er_fine.rx_antdl
   269a0:	00000079 615f7874 6c64746e 00000079     y...tx_antdly...
   269b0:	615f7872 735f746e 72617065 6f697461     rx_ant_separatio
   269c0:	0000006e 5f747865 646b6c63 0000796c     n...ext_clkdly..
   269d0:	6d617266 69665f65 7265746c 00000000     frame_filter....
   269e0:	6c617478 6972745f 0000006d 20766e69     xtal_trim...inv 
   269f0:	61657270 6f63206d 28206564 6e697375     pream code (usin
   26a00:	64252067 00000a29 20766e69 20667270     g %d)...inv prf 
   26a10:	000a6425 20766e69 000a6863 20766e69     %d..inv ch..inv 
   26a20:	61746164 65746172 0000000a 20766e69     datarate....inv 
   26a30:	6c636170 000a6e65 20766e69 54646673     paclen..inv sfdT
   26a40:	0a657079 00000000 20766e69 72616f63     ype.....inv coar
   26a50:	74206573 72777078 0000000a 64343025     se txpwr....%04d
   26a60:	3230252d 30252d64 25546432 3a643230     -%02d-%02dT%02d:
   26a70:	64323025 3230253a 30252e64 00006436     %02d:%02d.%06d..
   26a80:	30256325 253a6432 00643230              %c%02d:%02d.

00026a8c <month_days>:
   26a8c:	0000001f 0000001c 0000001f 0000001e     ................
   26a9c:	0000001f 0000001e 0000001f 0000001f     ................
   26aac:	0000001e 0000001f 0000001e 0000001f     ................

00026abc <crc16tab>:
   26abc:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   26acc:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   26adc:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   26aec:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   26afc:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   26b0c:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   26b1c:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   26b2c:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   26b3c:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   26b4c:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   26b5c:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   26b6c:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   26b7c:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   26b8c:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   26b9c:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   26bac:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   26bbc:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   26bcc:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   26bdc:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   26bec:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   26bfc:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   26c0c:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   26c1c:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   26c2c:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   26c3c:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   26c4c:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   26c5c:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   26c6c:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   26c7c:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   26c8c:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   26c9c:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   26cac:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00026cbc <streamer_cfg_console>:
   26cbc:	0001720b 000171ff                       .r...q..

00026cc4 <sysdown_cbs>:
   26cc4:	0001d071 0000f719 000103e1 0000e421     q...........!...
   26cd4:	00021075 000213f5 0001662d 00000000     u.......-f......

00026ce4 <sysflash_map_dflt>:
	...
   26cec:	00004000 00000001 00008000 0003a000     .@..............
   26cfc:	00000002 00042000 0003a000 00000003     ..... ..........
   26d0c:	0007c000 00001000 00000010 00004000     .............@..
   26d1c:	00004000 00000011 0007d000 00003000     .@...........0..

00026d2c <boot_img_magic>:
   26d2c:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00026d3c <boot_swap_tables>:
   26d3c:	03040104 01040204 03040104 04030301     ................
   26d4c:	00000401 696c7073 74732f74 73757461     ....split/status
   26d5c:	00000000 74617473 00007375 696c7073     ....status..spli
   26d6c:	00000074                                t...

00026d70 <base64_chars>:
   26d70:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   26d80:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   26d90:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   26da0:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   26db0:	00000000                                ....

00026db4 <hex_bytes>:
   26db4:	33323130 37363534 62613938 66656463     0123456789abcdef
   26dc4:	00000000 30317764 305f3030 00000000     ....dw1000_0....

00026dd4 <dw1000_0_cfg>:
   26dd4:	20004bdc 00001f40 000007d0 11131800     .K. @...........
   26de4:	40424042 00000000 6d726554 6c616e69     B@B@....Terminal
   26df4:	00000000 00545452 47474553 00005245     ....RTT.SEGGER..
   26e04:	6e207325 6920746f 656c706d 746e656d     %s not implement
   26e14:	000a6465 7475227b 22656d69 6c25203a     ed..{"utime": %l
   26e24:	6d222c75 3a226773 77642220 30303031     u,"msg": "dw1000
   26e34:	7665645f 696e695f 0a7d2274 00000000     _dev_init"}.....

00026e44 <__func__.0>:
   26e44:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   26e54:	616f6470 00000000                       pdoa....

00026e5c <dw1000_uwb_funcs>:
   26e5c:	00019877 0001986f 00019867 00019d83     w...o...g.......
   26e6c:	00019e01 0001a101 0001a153 0001a0b1     ........S.......
   26e7c:	0001985f 00019855 0001984b 00019835     _...U...K...5...
   26e8c:	0001982d 00019825 0001981d 00019815     -...%...........
   26e9c:	0001980d 00019805 000197fd 00019683     ................
   26eac:	000197f5 000197ed 000197e5 000197dd     ................
   26ebc:	000197d5 000197cd 000197c5 000197bd     ................
   26ecc:	00019679 000197b5 000197ad 000197a1     y...............
   26edc:	00019795 00019789 00019781 00019779     ............y...
   26eec:	00019771 00019769 00019c19 00019bff     q...i...........
   26efc:	00019be5 00019741 00019739 00019731     ....A...9...1...
   26f0c:	00019729 00019721 00019719 00019711     )...!...........
   26f1c:	000196f1 00000000 0001968b 000196cf     ................
   26f2c:	000196d7 000196df 000196e7 0063616d     ............mac.
   26f3c:	625f7874 73657479 00000000 625f7872     tx_bytes....rx_b
   26f4c:	73657479 00000000 5f524644 00746e63     ytes....DFR_cnt.
   26f5c:	5f4f5452 00746e63 5f564f52 00727265     RTO_cnt.ROV_err.
   26f6c:	5f474654 00746e63 5f45444c 00727265     TFG_cnt.LDE_err.
   26f7c:	655f5852 00007272 55425854 72655f46     RX_err..TXBUF_er
   26f8c:	00000072 5f4c4c50 655f4c4c 00007272     r...PLL_LL_err..

00026f9c <agc_config>:
   26f9c:	2502a907 889b8870                       ...%p...

00026fa4 <chan_idx>:
   26fa4:	02010000 05000403                       ........

00026fac <digital_bb_config>:
   26fac:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   26fbc:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

00026fcc <dtune1>:
   26fcc:	008d0087                                ....

00026fd0 <dwnsSFDlen>:
   26fd0:	00081040                                @...

00026fd4 <fs_pll_cfg>:
   26fd4:	09000407 08400508 08401009 08400508     ......@...@...@.
   26fe4:	0800041d 0800041d                       ........

00026fec <fs_pll_tune>:
   26fec:	2656261e 0000bebe                       .&V&....

00026ff4 <g_stats_map_mac_stat_section>:
   26ff4:	6f3c0014 00180002 00026f48 6f54001c     ..<o....Ho....To
   27004:	00200002 00026f5c 6f640024 00280002     .. .\o..$.do..(.
   27014:	00026f6c 6f74002c 00300002 00026f7c     lo..,.to..0.|o..
   27024:	6f840034 00380002 00026f90              4..o..8..o..

00027030 <lde_replicaCoeff>:
   27030:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   27040:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   27050:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   27060:	00003850                                P8..

00027064 <rx_config>:
   27064:	0000bcd8                                ....

00027068 <sftsh>:
   27068:	0016000a 00060001 00020001              ............

00027074 <tx_config>:
   27074:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   27084:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   27094:	203a5d30 0a786c25 00000000 43534d50     0]: %lx.....PMSC
   270a4:	5b44495f 203a5d31 0a786c25 00000000     _ID[1]: %lx.....
   270b4:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   270c4:	3a226773 77642220 30303031 676b705f     sg": "dw1000_pkg
   270d4:	696e695f 0a7d2274 00000000 7475227b     _init"}.....{"ut
   270e4:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   270f4:	77642220 30303031 676b705f 776f645f      "dw1000_pkg_dow
   27104:	0a7d226e 00000000 30317764 315f3030     n"}.....dw1000_1
   27114:	00000000 30317764 325f3030 00000000     ....dw1000_2....
   27124:	6572227b 30255b67 225d5832 7830223d     {"reg[%02X]"="0x
   27134:	6c383025 7d22586c 0000000a 6572227b     %08llX"}....{"re
   27144:	30255b67 225d5832 7830223d 30313025     g[%02X]"="0x%010
   27154:	22586c6c 00000a7d 6572227b 30255b67     llX"}...{"reg[%0
   27164:	225d5832 7830223d 36313025 22586c6c     2X]"="0x%016llX"
   27174:	00000a7d 6e69227b 3e2d7473 5f717269     }...{"inst->irq_
   27184:	226d6573 7d64253d 0000000a 6e69227b     sem"=%d}....{"in
   27194:	3e2d7473 735f7874 3d226d65 0a7d6425     st->tx_sem"=%d}.
   271a4:	00000000 6e72227b 733e2d67 3d226d65     ....{"rng->sem"=
   271b4:	0a7d6425 00000000 6363227b 733e2d70     %d}.....{"ccp->s
   271c4:	3d226d65 0a7d6425 00000000 706d7544     em"=%d}.....Dump
   271d4:	61747320 6e697472 74612067 36302520      starting at %06
   271e4:	0a3a586c 00000000 58343025 3025203a     lX:.....%04X: %0
   271f4:	25205832 20583230 58323025 32302520     2X %02X %02X %02
   27204:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   27214:	32302520 30252058 25205832 20583230      %02X %02X %02X 
   27224:	58323025 32302520 30252058 25205832     %02X %02X %02X %
   27234:	20583230 58323025 32302520 00000a58     02X %02X %02X...
   27244:	00006164 00007763 69766544 255b6563     da..cw..Device[%
   27254:	6e205d64 6920776f 5743206e 646f6d20     d] now in CW mod
   27264:	6e6f2065 20686320 202e6425 65736552     e on ch %d. Rese
   27274:	6f742074 6e6f6320 756e6974 00000a65     t to continue...
   27284:	00007277 00006472 30257830 2c586c36     wr..rd..0x%06lX,
   27294:	30257830 203a5834 6c257830 000a586c     0x%04X: 0x%llX..
   272a4:	30317764 00003030 30317764 64203030     dw1000..dw1000 d
   272b4:	00006762 30317764 64203030 67756265     bg..dw1000 debug
   272c4:	00000000 736e695b 64205d74 20706d75     ....[inst] dump 
   272d4:	206c6c61 69676572 72657473 00000073     all registers...
   272e4:	736e693c 74203e74 57432078 206e6f20     <inst> tx CW on 
   272f4:	72727563 20746e65 6e616863 006c656e     current channel.
   27304:	736e693c 3c203e74 72646461 6c5b203e     <inst> <addr> [l
   27314:	74676e65 202c5d68 706d7564 65726120     ength], dump are
   27324:	00000061 736e693c 3c203e74 72646461     a...<inst> <addr
   27334:	733c203e 64616275 203e7264 6e656c3c     > <subaddr> <len
   27344:	3e687467 6572202c 72206461 73696765     gth>, read regis
   27354:	00726574 736e693c 3c203e74 72646461     ter.<inst> <addr
   27364:	733c203e 64616275 203e7264 6c61763c     > <subaddr> <val
   27374:	203e6575 6e656c3c 3e687467 7277202c     ue> <length>, wr
   27384:	20657469 756c6176 6f742065 67657220     ite value to reg
   27394:	65747369 00000072                       ister...

0002739c <cmd_dw1000_help>:
   2739c:	000272ac 000272b8 000273a8              .r...r...s..

000273a8 <cmd_dw1000_param>:
   273a8:	0002584c 000272c8 00027248 000272e4     LX...r..Hr...r..
   273b8:	00027244 00027304 00027288 00027328     Dr...s...r..(s..
   273c8:	00027284 00027358 00000000 00000000     .r..Xs..........

000273d8 <nrf52k_flash_dev>:
   273d8:	000273f0 00000000 00080000 00000080     .s..............
   273e8:	00000001 000000ff                       ........

000273f0 <nrf52k_flash_funcs>:
   273f0:	0001da8d 0001d9c5 0001d951 0001d9a5     ........Q.......
   27400:	00000000 0001d9a1 00000000              ............

0002740c <nrf52_hal_spis>:
   2740c:	20004bf4 00000000 00000000 00000000     .K. ............

0002741c <nrf52_hal_timers>:
   2741c:	20004c1c 00000000 00000000 00000000     .L. ............
	...

00027434 <os_bsp_spi0m_cfg>:
   27434:	00121410 0000002c 0000007b 00203a22     ....,...{...": .
   27444:	736c6166 00000065 65757274 00000000     false...true....
   27454:	756c6c25 00000000 696c6c25 00000000     %llu....%lli....
   27464:	6c6c756e 00000000 00006625 0000005c     null....%f..\...
   27474:	0000745c 0000725c 00006e5c 0000665c     \t..\r..\n..\f..
   27484:	0000625c 0000005b                        \b..[...}.

0002748e <__func__.7324>:
   2748e:	656d6974 6c616373 6e695f65               timescale_init.

0002749d <__func__.7336>:
   2749d:	656d6974 6c616373 72665f65 69006565     timescale_free.i
   274ad:	2d74736e 656b653e 736e6900 682f0074     nst->eke.inst./h
   274bd:	2f656d6f 6c6b696e 642f7361 742f7665     ome/niklas/dev/t
   274cd:	73656d69 656c6163 726f632d 696c2f65     imescale-core/li
   274dd:	69742f62 6373656d 2e656c61               b/timescale.c.

000274eb <__func__.7283>:
   274eb:	666b7273 6c62645f 69616d5f               srkf_dbl_main.

000274f9 <__func__.7299>:
   274f9:	666b7273 6c62645f 696e695f               srkf_dbl_init.

00027507 <__func__.7311>:
   27507:	666b7273 6c62645f 6572665f 6e690065     srkf_dbl_free.in
   27517:	21207473 4c554e3d 6e69004c 3e2d7473     st !=NULL.inst->
   27527:	3d3d206e 69006e20 2d74736e 6900783e     n == n.inst->x.i
   27537:	2d74736e 6900793e 2d74736e 69007a3e     nst->y.inst->z.i
   27547:	2d74736e 6900653e 2d74736e 6900483e     nst->e.inst->H.i
   27557:	2d74736e 6900503e 2d74736e 0050553e     nst->P.inst->UP.
   27567:	74736e69 50443e2d 736e6900 513e2d74     inst->DP.inst->Q
   27577:	736e6900 553e2d74 6e690051 3e2d7473     .inst->UQ.inst->
   27587:	69005144 2d74736e 6900523e 2d74736e     DQ.inst->R.inst-
   27597:	0052553e 74736e69 52443e2d 736e6900     >UR.inst->DR.ins
   275a7:	533e2d74 736e6900 5f3e2d74 6e690053     t->S.inst->_S.in
   275b7:	3e2d7473 6e690041 3e2d7473 6e69004b     st->A.inst->K.in
   275c7:	21207473 554e203d 2f004c4c 656d6f68     st != NULL./home
   275d7:	6b696e2f 2f73616c 2f766564 656d6974     /niklas/dev/time
   275e7:	6c616373 6f632d65 6c2f6572 732f6269     scale-core/lib/s
   275f7:	5f666b72 2e6c6264 6e690063 3e2d7473     rkf_dbl.c.inst->
   27607:	78666f41 203d2120 4c4c554e 736e6900     Aofx != NULL.ins
   27617:	483e2d74 2078666f 4e203d21 004c4c55     t->Hofx != NULL.
   27627:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   27637:	2267736d 7322203a 726e5f73 705f676e     msg": "ss_nrng_p
   27647:	695f676b 2274696e 00000a7d 72777400     kg_init"}....twr
   27657:	5f73735f 676e726e                        _ss_nrng.

00027660 <g_stats_map_twr_ss_nrng_stat_section>:
   27660:	55040014 00180002 00025510 54f8001c     ...U.....U.....T
   27670:	00200002 00025538 5c600024 00000002     .. .8U..$.`\....
   27680:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   27690:	3a226773 75732220 66726570 656d6172     sg": "superframe
   276a0:	7365725f 7d227465 0000000a 7475227b     _reset"}....{"ut
   276b0:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   276c0:	6e722220 6b705f67 6e695f67 7d227469      "rng_pkg_init"}
   276d0:	0000000a 5f676e72 75716572 00747365     ....rng_request.
   276e0:	5f676e72 7473696c 00006e65 706d6f63     rng_listen..comp
   276f0:	6574656c 0062635f 65707573 61726672     lete_cb.superfra
   27700:	725f656d 74657365 00000000              me_reset....

0002770c <g_stats_map_rng_stat_section>:
   2770c:	76d40014 00180002 000276e0 5af8001c     ...v.....v.....Z
   2771c:	00200002 000254f8 55380024 00280002     .. ..T..$.8U..(.
   2772c:	00025b20 5504002c 00300002 00025548      [..,..U..0.HU..
   2773c:	55100034 00380002 000276ec 5c60003c     4..U..8..v..<.`\
   2774c:	00400002 000276f8 7475227b 22656d69     ..@..v..{"utime"
   2775c:	6c25203a 6d222c75 3a226773 63772220     : %lu,"msg": "wc
   2776c:	69745f73 6373656d 5f656c61 5f676b70     s_timescale_pkg_
   2777c:	74696e69 000a7d22 00000000 a4f8e0b5     init"}..........
   2778c:	3e20e374 6e5b0122 3deb0587 f1e2674e     t. >".[n...=Ng..
   2779c:	3db59e05 a4f8e0b5 3e30e374 b7320335     ...=....t.0>5.2.
   277ac:	4654adf4 6c756f63 6f6e2064 65672074     ..TFcould not ge
   277bc:	626d2074 25206675 00000a64 6c756f63     t mbuf %d...coul
   277cc:	6f6e2064 65672074 64682074 00000a72     d not get hdr...
   277dc:	6c756f63 6f6e2064 72632074 65746165     could not create
   277ec:	70616d20 0000000a 00000066 6c756f63      map....f...coul
   277fc:	6f6e2064 6c632074 2065736f 746e6f63     d not close cont
   2780c:	656e6961 00000a72 3a726576 2e642520     ainer...ver: %d.
   2781c:	252e6425 64252e64 0000000a 64616552     %d.%d.%d....Read
   2782c:	20676e69 73616c66 74612068 586c2520     ing flash at %lX
   2783c:	6425202c 74796220 72207365 64253d63     , %d bytes rc=%d
   2784c:	0000000a 6c756f43 6f6e2064 6f632074     ....Could not co
   2785c:	7265766e 6c662074 20687361 61746164     nvert flash data
   2786c:	206f7420 6675626d 0000000a 61746f62      to mbuf....bota
   2787c:	00000000 706d6f63 64657475 73616820     ....computed has
   2788c:	25203a68 00000a73 61746f62 6572203a     h: %s...bota: re
   2789c:	646e6573 20676e69 0a646e65 00000000     sending end.....
   278ac:	61746f62 7874203a 66206d69 73696e69     bota: txim finis
   278bc:	0a646568 00000000 72726567 2527203a     hed.....gerr: '%
   278cc:	00000a64 676d6e23 756f5f72 72203a74     d...#nmgr_out: r
   278dc:	64253d63 0000000a 63656863 0000006b     c=%d....check...
   278ec:	6d692020 25203a30 00000a64 6d692020       im0: %d...  im
   278fc:	25203a31 00000a64 253d6372 00000a64     1: %d...rc=%d...
   2790c:	6d697874 00000000 6d697874 6f6c7320     txim....txim slo
   2791c:	64252074 206f7420 78257830 0000000a     t %d to 0x%x....
   2792c:	73727874 00000074 73616362 746f5f74     txrst...bcast_ot
   2793c:	6f632061 6e616d6d 00007364 6568633c     a commands..<che
   2794c:	7c3e6b63 6978743c 00003e6d 5f61663c     ck>|<txim>..<fa_
   2795c:	003e6469 6464613c 3c203e72 746f6c73     id>.<addr> <slot
   2796c:	2c64695f 6f203020 3e312072 00000000     _id, 0 or 1>....
   2797c:	6464613c 74203e72 65722078 20746573     <addr> tx reset 
   2798c:	00646d63                                cmd.

00027990 <cmd_bota_help>:
   27990:	00027934 00027948 0002799c              4y..Hy...y..

0002799c <cmd_bota_param>:
   2799c:	000278e4 00027958 0002790c 00027960     .x..Xy...y..`y..
   279ac:	0002792c 0002797c 00000000 00000000     ,y..|y..........
   279bc:	23232323 616d4920 63206567 69666e6f     #### Image confi
   279cc:	64656d72 6372202c 0a64253d 00000000     rmed, rc=%d.....
   279dc:	20525245 6d206f6e 000a6d65 20525245     ERR no mem..ERR 
   279ec:	64616572 6961665f 2064656c 25206372     read_failed rc %
   279fc:	666f2064 6c252066 000a786c 61746f62     d off %llx..bota
   27a0c:	256c203a 2528646c 2c29756c 646c256f     : l%ld(%lu),o%ld
   27a1c:	6c25732c 64252864 25652c29 25662c64     ,s%ld(%d),e%d,f%
   27a2c:	28786c6c 786c6c25 63652029 646c253a     llx(%llx) ec:%ld
   27a3c:	0000000a 20525245 6e6b6e55 206e776f     ....ERR Unknown 
   27a4c:	695f6166 64252864 00000a29 20232323     fa_id(%d)...### 
   27a5c:	2077654e 6f6c7075 203a6461 252e6425     New upload: %d.%
   27a6c:	64252e64 0a64252e 00000000 20232323     d.%d.%d.....### 
   27a7c:	73617245 20676e69 73616c66 23232068     Erasing flash ##
   27a8c:	00000a23 20232323 746e6f43 69756e69     #...### Continui
   27a9c:	7520676e 616f6c70 666f2064 6425203a     ng upload of: %d
   27aac:	2e64252e 252e6425 00000a64 23232323     .%d.%d.%d...####
   27abc:	6c6c4120 6e6f6420 63202c65 6b636568      All done, check
   27acc:	20676e69 67616d69 00000a65 23232323     ing image...####
   27adc:	73614820 202f2068 67616d69 61662065      Hash / image fa
   27aec:	64656c69 0000000a 23232323 73614820     iled....#### Has
   27afc:	6b6f2068 6573202c 65702074 203f6d72     h ok, set perm? 
   27b0c:	0a206425 00000000 23232323 6c695720     %d .....#### Wil
   27b1c:	6f62206c 6920746f 206f746e 2077656e     l boot into new 
   27b2c:	67616d69 74612065 78656e20 6f622074     image at next bo
   27b3c:	000a746f                                ot..

00027b40 <bota_nmgr_handlers>:
   27b40:	00000000 00021cfd 00000000 00021d61     ............a...
   27b50:	6c646f6d 6d5f676f 69707061 705f676e     modlog_mapping_p
   27b60:	006c6f6f                                ool.

00027b64 <crc8_small_table>:
   27b64:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

00027b74 <K>:
   27b74:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   27b84:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   27b94:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   27ba4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   27bb4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   27bc4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   27bd4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   27be4:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   27bf4:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   27c04:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   27c14:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   27c24:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   27c34:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   27c44:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   27c54:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   27c64:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   27c74:	00000000                                ....

00027c78 <Zero>:
	...
   27c84:	80000000                                ....

/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 130176	   3744	  17452	 151372	  24f4c	/home/joel/Capstone/uwb-apps/bin/targets/nrng_slave_node/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf
