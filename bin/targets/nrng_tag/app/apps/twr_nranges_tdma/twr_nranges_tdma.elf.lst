
/home/joel/Capstone/uwb-apps/bin/targets/nrng_tag/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf:     file format elf32-littlearm
/home/joel/Capstone/uwb-apps/bin/targets/nrng_tag/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000292d0 vaddr 0x000292d0 paddr 0x000292d0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000292e8 memsz 0x000292e8 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x000292e8 align 2**16
         filesz 0x000016a0 memsz 0x00005ab0 flags rw-
    LOAD off    0x00000000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              000212b0  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000292d0  000292d0  00031778  2**0  CONTENTS
  3 .ARM.exidx         00000018  000292d0  000292d0  000292d0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00031778  2**0  CONTENTS
  6 .data              000016a0  200000d8  000292e8  000300d8  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20001778  20001778  00031778  2**0  CONTENTS
  8 .bss               00004410  20001778  0002a988  00031778  2**3  ALLOC
  9 .stack_dummy       000001b0  20005b88  20005b88  00031778  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000030  00000000  00000000  00031928  2**0  CONTENTS, READONLY
 11 .comment           000000b2  00000000  00000000  00031958  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00031a0a  2**0  CONTENTS, READONLY
 13 .debug_line        00044c2d  00000000  00000000  00031a0e  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info        000c52e0  00000000  00000000  0007663b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev      0001c655  00000000  00000000  0013b91b  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges     00004178  00000000  00000000  00157f70  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str         0001b14c  00000000  00000000  0015c0e8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc         00049fd2  00000000  00000000  00177234  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges      00004c08  00000000  00000000  001c1206  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame       0000b2b8  00000000  00000000  001c5e10  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro       0000279b  00000000  00000000  001d10c8  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000292d0 l    d  .ARM.extab	00000000 .ARM.extab
000292d0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20001778 l    d  .bssnz	00000000 .bssnz
20001778 l    d  .bss	00000000 .bss
20005b88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003a errata_16
00008282 l     F .text	0000004a errata_31
000082cc l     F .text	0000003a errata_32
00008306 l     F .text	0000004a errata_36
00008350 l     F .text	0000003a errata_37
0000838a l     F .text	0000003a errata_57
000083c4 l     F .text	0000003a errata_66
000083fe l     F .text	0000004a errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00008698 l     F .text	0000005c pan_complete_cb
000086f4 l     F .text	00000178 slot_cb
00008870 l     F .text	00000028 tof_comp_cb
00008898 l     F .text	00000024 complete_cb
000088bc l     F .text	0000005c nrng_complete_cb
20001778 l     O .bss	00000010 nrng_complete_event
20001788 l     O .bss	00000001 uwb_config_updated
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 uwb.c
00008c64 l     F .text	0000000e uwb_interrupt_task
00000000 l    df *ABS*	00000000 hal_gpio.c
00008f28 l     F .text	00000050 hal_gpio_irq_handler
00008f78 l     F .text	0000002c hal_gpio_irq_setup
00008fa4 l     F .text	0000001c hal_gpio_find_empty_slot
00008fc0 l     F .text	00000038 hal_gpio_find_pin
2000178c l     O .bss	00000040 hal_gpio_irqs
200017cc l     O .bss	00000001 irq_setup.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00009320 l     F .text	00000016 os_main
20001928 l     O .bss	00001000 g_os_main_stack
20001820 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00009664 l     F .text	0000005c os_dev_add
000096c0 l     F .text	00000022 os_dev_initialize
000096e2 l     F .text	00000030 os_dev_init
20002984 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
2000298c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00009990 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00009adc l     F .text	00000010 os_msys_find_biggest_pool
00009aec l     F .text	0000002c os_msys_find_pool
00009b64 l     F .text	00000044 os_msys_init_once
200029a4 l     O .bss	00000db0 os_msys_1_data
20003754 l     O .bss	0000000c os_msys_1_mbuf_pool
20003760 l     O .bss	0000001c os_msys_1_mempool
200000f0 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00009c48 l     F .text	00000020 os_sanity_check_list_lock
00009c68 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0000a184 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000a340 l     F .text	00000054 os_deltatime
0000a394 l     F .text	00000020 os_time_change_notify
0000a3b4 l     F .text	0000005c os_time_tick
0000a4d8 l     F .text	00000048 os_time_populate_info
200037a0 l     O .bss	00000030 basetod
20000108 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000ae2c l       .text	00000000 SVC_User
0000ae4a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 nmgr_uwb.c
0000aed4 l     F .text	00000010 uwb_transport
0000aee4 l     F .text	00000016 rx_timeout_cb
0000aefa l     F .text	00000016 tx_complete_cb
0000af10 l     F .text	00000164 rx_complete_cb
0000b08c l     F .text	0000000a nmgr_uwb_mtu_0
0000b33c l     F .text	0000008e nmgr_resp_cb
200037d8 l     O .bss	00000001 last_rpt_seq_num.0
200037da l     O .bss	00000002 last_rpt_src.1
200037dc l     O .bss	00000020 uwb_transport_0
20000110 l     O .data	0000003c g_cbs
00000000 l    df *ABS*	00000000 nrng.c
0000b3ca l     F .text	00000036 complete_ev_cb
0000b400 l     F .text	00000040 complete_cb
2000014c l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 nrng_encode.c
00000000 l    df *ABS*	00000000 nrng_json.c
0000bd68 l     F .text	0000004c nrng_write_line
00000000 l    df *ABS*	00000000 pan_utils.c
00000000 l    df *ABS*	00000000 panmaster.c
0000bfec l     F .text	00000018 pm_conf_export
0000c004 l     F .text	00000050 first_free_short_addr
0000c054 l     F .text	00000024 short_addr_is_free
0000c078 l     F .text	0000004c slot_lease_expired
0000c0c4 l     F .text	00000074 first_free_slot_id
0000c138 l     F .text	00000058 find_first_empty_nodes_to_save
0000c190 l     F .text	0000001c pm_conf_commit
0000c1ac l     F .text	00000034 pm_conf_set
0000c1e0 l     F .text	00000028 pm_conf_get
0000c208 l     F .text	000000a4 panm_init_fcb
2000380c l     O .bss	00000018 _log
20003828 l     O .bss	00000600 node_idx
20003e28 l     O .bss	000000f8 nodes_to_save
20003f20 l     O .bss	00000002 pan_id
20003f24 l     O .bss	000000cc pm_fcb_area
20003ff0 l     O .bss	0000000c save_mutex
2000015c l     O .data	00000018 pm_conf_cbs
20000174 l     O .data	00000008 pm_config
2000017c l     O .data	00000030 pm_init_conf_fcb
00000000 l    df *ABS*	00000000 panmaster_cli.c
0000ca40 l     F .text	0000001c dump
0000ca5c l     F .text	0000006c dump_cb
0000cac8 l     F .text	00000258 list_nodes_blk
0000cfa4 l     F .text	00000052 list_nodes_load_cb
0000cd20 l     F .text	00000284 panmaster_cli_cmd
200001ac l     O .data	00000010 shell_panmaster_cmd
00000000 l    df *ABS*	00000000 panmaster_fcb.c
0000d008 l     F .text	00000080 node_idx_load_cb
0000d088 l     F .text	00000040 fcb_load_cb
0000d0c8 l     F .text	00000074 find_node_load_cb
0000d13c l     F .text	00000046 sort_nodes_load_cb
0000d2c2 l     F .text	00000058 panm_fcb_append
00000000 l    df *ABS*	00000000 rng_math.c
00000000 l    df *ABS*	00000000 survey.c
0000d4e0 l     F .text	0000002e survey_complete_cb
0000d50e l     F .text	00000030 reset_cb
0000d53e l     F .text	00000030 rx_timeout_cb
0000d56e l     F .text	00000024 tx_complete_cb
0000d592 l     F .text	00000104 rx_complete_cb
20003ffc l     O .bss	00000010 survey_complete_event
00000000 l    df *ABS*	00000000 survey_encode.c
00000000 l    df *ABS*	00000000 tdma.c
0000de68 l     F .text	000000e8 tdma_superframe_slot_cb
0000df50 l     F .text	00000034 slot_timer_cb
0000df84 l     F .text	0000002c superframe_cb
0000dfb0 l     F .text	00000040 tdma_task
0000dff0 l     F .text	0000006c tdma_tasks_init
0000e05c l     F .text	00000032 sanity_feeding_cb
00000000 l    df *ABS*	00000000 uwb_ccp.c
0000e440 l     F .text	00000068 adjust_for_epoch_to_rm
0000e4a8 l     F .text	0000002e reset_cb
0000e4d6 l     F .text	00000054 error_cb
0000e52a l     F .text	0000004a rx_timeout_cb
0000e574 l     F .text	0000001e ccp_timer_irq
0000e598 l     F .text	000001b4 tx_complete_cb
0000e74c l     F .text	0000000e ccp_task
0000e75c l     F .text	0000004c ccp_tasks_init
0000e7a8 l     F .text	0000007c ccp_timer_init
0000ed98 l     F .text	000000b8 ccp_master_timer_ev_cb
0000e960 l     F .text	000001b8 ccp_slave_timer_ev_cb
0000e828 l     F .text	00000138 ccp_listen
0000eb18 l     F .text	00000280 ccp_send
0000f230 l     F .text	00000498 rx_complete_cb
00000000 l    df *ABS*	00000000 uwb_pan.c
0000f734 l     F .text	00000082 handle_pan_request
0000f7b8 l     F .text	00000028 tx_complete_cb
0000f7e0 l     F .text	00000020 pan_postprocess
0000f800 l     F .text	00000064 lease_expiry_cb
0000f864 l     F .text	00000034 reset_cb
0000f898 l     F .text	00000034 rx_timeout_cb
0000f8cc l     F .text	00000270 rx_complete_cb
2000400c l     O .bss	00000001 _pan_cycles.0
200001bc l     O .data	0000003c g_cbs
200001f8 l     O .data	00000010 g_config
20000208 l     O .data	00000032 g_pan_0
00000000 l    df *ABS*	00000000 slots.c
00000000 l    df *ABS*	00000000 uwb_wcs.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 malloc.c
0001047c l     F .text	00000004 malloc_lock_nop
00010480 l     F .text	00000002 malloc_unlock_nop
00010482 l     F .text	00000048 __malloc_from_block
000104cc l     F .text	00000064 __free_block
2000023c l     O .data	00000018 __malloc_head
20000254 l     O .data	00000004 malloc_lock
20000258 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00010630 l       .text	00000000 test1
00010624 l       .text	00000000 loop1
00010636 l       .text	00000000 res1
00010652 l       .text	00000000 test2
0001065a l       .text	00000000 done
00010646 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00010666 l       .text	00000000 test1
00010662 l       .text	00000000 loop1
00010674 l       .text	00000000 test2
00010670 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mynewt.c
000106bc l     F .text	00000004 stdin_read
000106c0 l     F .text	00000010 stdout_write
2000025c l     O .data	00000004 _stdin
20000260 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00010722 l     F .text	000000ce ui2a
000107f0 l     F .text	0000001c i2a
0001080c l     F .text	00000030 a2d
0001083c l     F .text	0000003c a2i
00010878 l     F .text	00000024 putf
0001089c l     F .text	00000124 putchw
000109c0 l     F .text	00000068 intarg
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 imgmgr.c
00011078 l     F .text	00000040 imgr_vercmp
000110b8 l     F .text	0000003e imgr_img_tlvs
000110f8 l     F .text	00000050 imgr_upload_good_rsp
00011244 l     F .text	00000036 imgr_upload_log
00011318 l     F .text	0000006c imgr_erase_state
00011384 l     F .text	0000006c imgr_erase
000113f0 l     F .text	00000190 imgr_upload_inspect
000115bc l     F .text	000001fc imgr_upload
2000405c l     O .bss	00000030 imgr_state
2000408c l     O .bss	00000004 imgr_upload_arg
20004090 l     O .bss	00000004 imgr_upload_cb
20000268 l     O .data	0000000c imgr_nmgr_group
00026dc4 l     O .text	00000038 imgr_nmgr_handlers
00000000 l    df *ABS*	00000000 imgmgr_cli.c
00011820 l     F .text	00000010 imgr_cli_too_few_args
00011830 l     F .text	00000044 imgr_cli_flags_str
00011874 l     F .text	00000050 imgr_cli_show_slot
000118c4 l     F .text	00000018 imgr_cli_confirm
000118dc l     F .text	0000003e imgr_cli_hash_parse
0001191c l     F .text	0000005c imgr_cli_slot_or_hash_parse
00011978 l     F .text	00000030 imgr_cli_set_pending
000119a8 l     F .text	0000004c imgr_cli_erase
000119f4 l     F .text	00000098 imgr_cli_cmd
20004094 l     O .bss	00000008 buf.0
20000274 l     O .data	00000010 shell_imgr_cmd
00026f78 l     O .text	0000000c imgr_cli_help
00000000 l    df *ABS*	00000000 imgmgr_log.c
00011a9c l     F .text	00000004 imgmgr_log_gen
00000000 l    df *ABS*	00000000 imgmgr_state.c
00011ba6 l     F .text	00000026 imgmgr_state_any_pending
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
00011f78 l     F .text	0000001c mgmt_group_list_lock
00011fac l     F .text	00000030 mgmt_find_group
2000409c l     O .bss	0000000c mgmt_group_lock
20000284 l     O .data	00000008 mgmt_group_list
00000000 l    df *ABS*	00000000 newtmgr.c
00012048 l     F .text	00000024 nmgr_rsp_frag_alloc
0001206c l     F .text	00000064 nmgr_init_rsp
000120d0 l     F .text	00000034 nmgr_rsp_tx
00012104 l     F .text	0000006c nmgr_send_err_rsp
00012170 l     F .text	00000188 nmgr_handle_req
000122f8 l     F .text	0000001a nmgr_process
00012312 l     F .text	0000000a nmgr_event_data_in
0001231c l     F .text	0000000e nmgr_cbuf_init
200040ac l     O .bss	00000060 nmgr_task_cbuf
00000000 l    df *ABS*	00000000 newtmgr_os.c
000123c4 l     F .text	00000050 nmgr_reset
00012414 l     F .text	0000000a nmgr_reset_tmo
00012420 l     F .text	00000060 nmgr_datetime_set
00012480 l     F .text	0000005c nmgr_def_console_echo
000124dc l     F .text	00000078 nmgr_def_echo
00012554 l     F .text	00000080 nmgr_datetime_get
000125d4 l     F .text	00000108 nmgr_def_mpstat_read
000126dc l     F .text	000001a0 nmgr_def_taskstat_read
2000410c l     O .bss	00000020 nmgr_reset_callout
2000028c l     O .data	0000000c nmgr_def_group
000270ac l     O .text	00000030 nmgr_def_group_handlers
00000000 l    df *ABS*	00000000 dpl_cputime.c
00000000 l    df *ABS*	00000000 dpl_mem.c
00000000 l    df *ABS*	00000000 dpl_mempool.c
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 dpl_mbuf.c
00000000 l    df *ABS*	00000000 config.c
00012d6e l     F .text	00000008 conf_ev_fn_load
20004130 l     O .bss	0000000c conf_mtx
200002a0 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_cli.c
00013074 l     F .text	0000001c conf_running_one
00013090 l     F .text	0000002c conf_dump_running
000130bc l     F .text	000000d4 shell_conf_command
200002b0 l     O .data	00000010 shell_conf_cmd
00000000 l    df *ABS*	00000000 config_store.c
000131a0 l     F .text	0000003c conf_dup_check_cb
000131dc l     F .text	0000001c conf_load_cb
00013300 l     F .text	00000008 conf_store_one
20004140 l     O .bss	00000001 conf_loaded
20004141 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 console.c
00013374 l     F .text	0000000e ring_buf_next
00013382 l     F .text	0000000e ring_buf_prev
00013390 l     F .text	0000001c console_hist_is_full
000133ac l     F .text	00000054 handle_nlip
00013400 l     F .text	0000006a trim_whitespace
0001346c l     F .text	00000080 console_hist_move_to_head
000134ec l     F .text	00000080 console_hist_add
0001356c l     F .text	00000040 console_hist_init
00013640 l     F .text	00000044 console_append_char
00013684 l     F .text	0000003c console_clear_line
000136c0 l     F .text	00000080 insert_char
00013740 l     F .text	0000006c console_hist_move
000137ac l     F .text	0000005e del_char
000138a0 l     F .text	000001a4 handle_ansi
20004148 l     O .bss	00000004 ansi_val
2000414c l     O .bss	00000004 ansi_val_2
20004150 l     O .bss	00000010 avail_queue
20004160 l     O .bss	00000004 completion
20004164 l     O .bss	00000004 console_compat_rx_cb
20004168 l     O .bss	00000028 console_hist
20004190 l     O .bss	00000800 console_hist_lines
20004994 l     O .bss	0000000c console_write_lock
200049a0 l     O .bss	00000002 cur
200049a2 l     O .bss	00000002 end
200049a4 l     O .bss	00000004 esc_state
200049a8 l     O .bss	00000004 ev.2
200049b0 l     O .bss	00000004 input.1
200049b4 l     O .bss	00000004 lines_queue
200049b8 l     O .bss	00000004 nlip_state
200049bc l     O .bss	00000001 prev_endl.0
200049bd l     O .bss	00000001 rx_stalled
200002c0 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200002c4 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
00013e4c l     F .text	00000008 uart_blocking_tx
00013e54 l     F .text	00000014 uart_console_ring_add_char
00013e68 l     F .text	00000014 uart_console_ring_pull_char
00013e7c l     F .text	00000016 uart_console_ring_is_full
00013e92 l     F .text	0000000e uart_console_ring_is_empty
00013ea0 l     F .text	00000034 uart_console_tx_flush
00013ed4 l     F .text	0000001c uart_console_tx_char
00013ef0 l     F .text	00000058 uart_console_queue_char
00013f48 l     F .text	00000044 uart_console_rx_char
00013f8c l     F .text	00000074 uart_console_rx_char_event
200049c0 l     O .bss	00000008 cr_rx
200049c8 l     O .bss	00000020 cr_rx_buf
200049e8 l     O .bss	00000008 cr_tx
200049f0 l     O .bss	00000400 cr_tx_buf
20004e00 l     O .bss	00000001 uart_console_rx_stalled
20004e04 l     O .bss	00000004 uart_dev
20004e08 l     O .bss	00000004 write_char_cb
200002c8 l     O .data	00000004 b.0
00000000 l    df *ABS*	00000000 flash_map.c
00014168 l     F .text	00000070 flash_map_read_mfg
20004e14 l     O .bss	00000078 mfg_areas.0
00000000 l    df *ABS*	00000000 log.c
000143e4 l     F .text	0000001c log_registered
00014400 l     F .text	00000004 log_chk_type
00014404 l     F .text	00000014 log_chk_max_entry_len
00014418 l     F .text	00000016 log_call_append_cb
00014430 l     F .text	0000010c log_append_prepare
00014628 l     F .text	00000044 log_read_last_hdr
00014714 l     F .text	00000024 log_read_hdr_walk
20004e94 l     O .bss	00000004 g_log_module_list
20004e98 l     O .bss	00000001 log_written
200002cc l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00014738 l     F .text	00000004 log_console_read
0001473c l     F .text	00000004 log_console_walk
00014740 l     F .text	00000004 log_console_flush
00014744 l     F .text	00000020 log_console_print_hdr
00014764 l     F .text	0000002c log_console_append_body
00014790 l     F .text	00000030 log_console_append
20004e9c l     O .bss	00000018 log_console
00000000 l    df *ABS*	00000000 log_level.c
20004eb4 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 mfg.c
00014830 l     F .text	00000090 mfg_seek_next_aux
000148c0 l     F .text	0000006c mfg_read_mmr
0001492c l     F .text	00000054 mfg_read_next_mmr
00014980 l     F .text	00000038 mfg_open_flash_area
000149b8 l     F .text	0000003e mfg_read_tlv_body
00014a94 l     F .text	00000042 mfg_read_mmr_refs
20004f34 l     O .bss	00000001 mfg_initialized
20004f38 l     O .bss	00000018 mfg_mmrs
20004f50 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
00014ad8 l     F .text	0000002c reboot_conf_export
00014b04 l     F .text	00000054 reboot_conf_set
00014b58 l     F .text	00000058 reboot_conf_get
00014bb0 l     F .text	0000012c log_reboot_write
00014cdc l     F .text	00000014 log_reboot_init_console
20004f54 l     O .bss	00000001 log_reboot_written
20004f58 l     O .bss	0000000c log_reboot_written_str
20004f68 l     O .bss	0000000c reboot_cnt_str
00000000 l    df *ABS*	00000000 shell.c
00014d7c l     F .text	00000038 get_prompt
00014db4 l     F .text	0000006c print_module_commands
00014e20 l     F .text	00000030 print_modules
00014e50 l     F .text	00000044 print_command_params
00014e94 l     F .text	0000004c get_destination_module
00014ee0 l     F .text	0000001c set_default_module
00014efc l     F .text	00000020 select_module
00014f1c l     F .text	00000078 get_command_and_module
00014f94 l     F .text	000000c4 shell_find_cmd
00015058 l     F .text	000000e0 show_cmd_help
00015138 l     F .text	00000088 show_help
000151c0 l     F .text	0000001c print_prompt
000151dc l     F .text	00000014 print_prompt_if_console
000151f0 l     F .text	00000110 complete_module
00015300 l     F .text	00000108 complete_command
00015408 l     F .text	00000048 get_command_from_module
00015450 l     F .text	000000f0 complete_param
00015540 l     F .text	0000003c get_token
0001557c l     F .text	00000074 complete_select
000155f0 l     F .text	0000006c line2argv
0001565c l     F .text	0000001e get_last_token
0001567c l     F .text	00000170 completion
000157ec l     F .text	00000030 shell_avail_queue_init
0001595c l     F .text	0000002a shell
000158e4 l     F .text	00000026 shell_process_command
0001590a l     F .text	00000052 shell_process_nlip_line
20004f74 l     O .bss	00000010 app_cmd
20004f84 l     O .bss	00000004 app_prompt_handler
20004f88 l     O .bss	00000200 buf
20005188 l     O .bss	00000150 compat_commands
200052d8 l     O .bss	00000004 module_registered
200052dc l     O .bss	00000004 num_compat_commands
200052e0 l     O .bss	00000004 num_of_shell_entities
200052e4 l     O .bss	00000004 prompt
200052e8 l     O .bss	00000020 shell_console_ev
20005308 l     O .bss	00000004 shell_evq
2000530c l     O .bss	00000018 shell_modules
200002ec l     O .data	00000004 default_module
000274e4 l     O .text	00000010 shell_cmd_help
000274f4 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_nlip.c
00015a98 l     F .text	0000013c shell_nlip_mtx
00015bd4 l     F .text	00000020 shell_event_data_in
20005324 l     O .bss	00000002 g_nlip_expected_len
20005328 l     O .bss	00000004 g_nlip_mbuf
2000532c l     O .bss	00000004 g_shell_nlip_in_arg
20005330 l     O .bss	00000004 g_shell_nlip_in_func
20005334 l     O .bss	00000018 g_shell_nlip_mq
00000000 l    df *ABS*	00000000 shell_os.c
00015d10 l     F .text	00000024 shell_os_ls_dev
00015eb4 l     F .text	000000f0 shell_os_tasks_display_cmd
000276f4 l     O .text	0000000c date_help
00027700 l     O .text	00000010 date_params
00027710 l     O .text	0000000c ls_dev_help
0002771c l     O .text	0000000c mpool_help
00027728 l     O .text	00000010 mpool_params
00027738 l     O .text	00000060 os_commands
000277ac l     O .text	0000000c tasks_help
00027798 l     O .text	0000000c reset_help
000277a4 l     O .text	00000008 reset_params
000277b8 l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 shell_prompt.c
00027850 l     O .text	00000020 prompt_commands
00027870 l     O .text	0000000c ticks_help
0002787c l     O .text	00000018 ticks_params
00000000 l    df *ABS*	00000000 stats.c
00016044 l     F .text	00000010 stats_offset
00016054 l     F .text	0000004c stats_register_internal
00016170 l     F .text	0000004c stats_module_init_internal
00000000 l    df *ABS*	00000000 stats_shell.c
00016274 l     F .text	0000006c stats_shell_display_entry
000162e0 l     F .text	00000018 stats_shell_display_group
000162f8 l     F .text	00000050 shell_stats_display
200002f8 l     O .data	00000010 shell_stats_cmd
00000000 l    df *ABS*	00000000 sysdown.c
0001636c l     F .text	0000000e sysdown_timer_exp
0001637c l     F .text	00000014 sysdown_complete
20005368 l     O .bss	00000004 sysdown_num_in_progress
2000536c l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
00016430 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 uwbcfg.c
00016450 l     F .text	00000048 uwbcfg_set
00016498 l     F .text	00000038 uwbcfg_get
000164d0 l     F .text	00000048 uwbcfg_export
200053a8 l     O .bss	00000004 uwbcfg_callbacks
200003fc l     O .data	00000018 uwbcfg_handler
00000000 l    df *ABS*	00000000 uwbcfg_dw1000.c
000167f8 l     F .text	000000a8 check_preamble_code
00000000 l    df *ABS*	00000000 uwbcfg_strtod.c
00000000 l    df *ABS*	00000000 datetime.c
00016ca4 l     F .text	00000044 leapyear
00016ce8 l     F .text	00000048 parse_number
00027b2c l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 crc16.c
00027b5c l     O .text	00000200 crc16tab
00000000 l    df *ABS*	00000000 parse.c
00017348 l     F .text	00000024 parse_num_base
00000000 l    df *ABS*	00000000 streamer_console.c
000173c6 l     F .text	0000000c streamer_console_vprintf
000173d2 l     F .text	0000000e streamer_console_write
20000414 l     O .data	00000004 streamer_console
00027d5c l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 nrng_tag-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00017460 l     F .text	0000000a boot_flag_decode
0001746a l     F .text	00000006 boot_magic_off
00017470 l     F .text	00000006 boot_copy_done_off
00017476 l     F .text	00000006 boot_image_ok_off
0001747c l     F .text	00000018 boot_magic_decode
00017494 l     F .text	0000004a boot_write_trailer_byte
00027ddc l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 split.c
200053b0 l     O .bss	00000001 split_app_active
200053b1 l     O .bss	00000001 split_mode_cur
00000000 l    df *ABS*	00000000 split_config.c
00017840 l     F .text	00000004 split_conf_commit
00017844 l     F .text	0000002c split_conf_export
00017870 l     F .text	00000040 split_conf_get
000178b0 l     F .text	00000044 split_conf_set
20000418 l     O .data	00000018 split_conf_handler
00000000 l    df *ABS*	00000000 base64.c
00017940 l     F .text	00000020 pos
00017960 l     F .text	0000004c token_decode
00027e10 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 hex.c
00027e54 l     O .text	00000011 hex_bytes
00000000 l    df *ABS*	00000000 cborattr.c
00017ba6 l     F .text	00000080 valid_attr_type
00017c26 l     F .text	0000005e cbor_target_address
00017e9c l     F .text	00000362 cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
0001820c l     F .text	0000001c cbor_mbuf_reader_cpy
00018228 l     F .text	0000001c cbor_mbuf_reader_get8
00018244 l     F .text	00000018 cbor_mbuf_reader_cmp
0001825c l     F .text	0000001e cbor_mbuf_reader_get64
0001827a l     F .text	0000001a cbor_mbuf_reader_get32
00018294 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00018334 l     F .text	000000a0 create_container
000183d4 l     F .text	0000007a encode_string
00000000 l    df *ABS*	00000000 cborparser.c
0001862e l     F .text	00000024 is_fixed_type
00018652 l     F .text	00000004 iterate_noop
00018656 l     F .text	00000134 preparse_value
0001878a l     F .text	0000004a preparse_next_value
000187d4 l     F .text	000000a0 extract_length
00018874 l     F .text	0000016c iterate_string_chunks
000189e0 l     F .text	000000ca advance_internal
00018ce8 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
00018fe8 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
200053b4 l     O .bss	00000004 dw1000_0
00027e74 l     O .text	00000018 dw1000_0_cfg
00000000 l    df *ABS*	00000000 dw1000_dev.c
00019520 l     F .text	0000000a uwb_dw1000_read_sts_rxtime
0001952a l     F .text	00000008 uwb_dw1000_hal_noblock_wait
00019598 l     F .text	00000020 uwb_dw1000_calc_pdoa
000195b8 l     F .text	00000008 uwb_dw1000_estimate_los
000195c0 l     F .text	00000008 uwb_dw1000_calc_fppl
000195c8 l     F .text	00000008 uwb_dw1000_calc_seq_rssi
000195d0 l     F .text	00000008 uwb_dw1000_calc_rssi
000195d8 l     F .text	00000008 uwb_dw1000_get_fppl
000195e0 l     F .text	00000008 uwb_dw1000_get_rssi
000195e8 l     F .text	00000028 uwb_dw1000_calc_clock_offset_ratio
00019610 l     F .text	00000008 uwb_dw1000_set_on_error_continue
00019618 l     F .text	00000008 uwb_dw1000_phy_repeated_frames
00019620 l     F .text	00000008 uwb_dw1000_phy_rx_reset
00019628 l     F .text	00000008 uwb_dw1000_phy_forcetrxoff
00019630 l     F .text	0000000c uwb_dw1000_phy_data_duration
0001963c l     F .text	0000000c uwb_dw1000_phy_SHR_duration
00019648 l     F .text	0000000c uwb_dw1000_phy_frame_duration
00019654 l     F .text	00000008 uwb_dw1000_read_txtime_lo32
0001965c l     F .text	00000008 uwb_dw1000_read_txtime
00019664 l     F .text	00000008 uwb_dw1000_read_rxtime_lo32
0001966c l     F .text	00000008 uwb_dw1000_read_rxtime
00019674 l     F .text	00000008 uwb_dw1000_read_systime_lo32
0001967c l     F .text	00000008 uwb_dw1000_read_systime
00019684 l     F .text	00000008 uwb_dw1000_set_rxauto_disable
0001968c l     F .text	00000008 uwb_dw1000_set_wait4resp_delay
00019694 l     F .text	00000008 uwb_dw1000_set_wait4resp
0001969c l     F .text	00000008 uwb_dw1000_tx_wait
000196a4 l     F .text	00000008 uwb_dw1000_write_tx_fctrl
000196ac l     F .text	00000008 uwb_dw1000_write_tx
000196b4 l     F .text	00000008 uwb_dw1000_stop_rx
000196bc l     F .text	00000008 uwb_dw1000_start_rx
000196c4 l     F .text	00000008 uwb_dw1000_start_tx
000196cc l     F .text	00000008 uwb_dw1000_set_delay_start
000196d4 l     F .text	00000008 uwb_dw1000_set_abs_timeout
000196dc l     F .text	00000016 uwb_dw1000_set_rx_window
000196f2 l     F .text	0000000a uwb_dw1000_adj_rx_timeout
000196fc l     F .text	0000000a uwb_dw1000_set_rx_timeout
00019706 l     F .text	00000008 uwb_dw1000_set_dblrxbuf
0001970e l     F .text	00000008 uwb_dw1000_txrf_power_value
00019716 l     F .text	00000008 uwb_dw1000_txrf_config
0001971e l     F .text	00000008 uwb_dw1000_mac_config
00019a8c l     F .text	0000001a uwb_dw1000_set_euid
00019aa6 l     F .text	0000001a uwb_dw1000_set_uid
00019ac0 l     F .text	0000001a uwb_dw1000_set_panid
00019c2a l     F .text	00000008 uwb_dw1000_sleep_config
00019ca8 l     F .text	00000008 uwb_dw1000_enter_sleep
00019f58 l     F .text	00000008 uwb_dw1000_wakeup
00019fa8 l     F .text	00000008 uwb_dw1000_enter_sleep_after_tx
00019ffa l     F .text	00000008 uwb_dw1000_enter_sleep_after_rx
00027ecc l     O .text	00000015 __func__.0
00027ee4 l     O .text	000000dc dw1000_uwb_funcs
00000000 l    df *ABS*	00000000 dw1000_hal.c
20000430 l     O .data	00000df8 hal_dw1000_instances
00000000 l    df *ABS*	00000000 dw1000_mac.c
0001a8ae l     F .text	00000028 calc_rx_window_timeout
0001a8d6 l     F .text	00000012 dw1000_checkoverrun
0001a8e8 l     F .text	00000024 dw1000_irq
0001aef8 l     F .text	00000022 update_rx_window_timeout
0001b980 l     F .text	00000a58 dw1000_interrupt_ev_cb
00028024 l     O .text	00000008 agc_config
0002802c l     O .text	00000008 chan_idx
00028034 l     O .text	00000020 digital_bb_config
00028054 l     O .text	00000004 dtune1
00028058 l     O .text	00000003 dwnsSFDlen
0002805c l     O .text	00000018 fs_pll_cfg
00028074 l     O .text	00000006 fs_pll_tune
000280b8 l     O .text	00000032 lde_replicaCoeff
000280ec l     O .text	00000002 rx_config
000280f0 l     O .text	0000000c sftsh
000280fc l     O .text	00000018 tx_config
00000000 l    df *ABS*	00000000 dw1000_phy.c
00000000 l    df *ABS*	00000000 dw1000_pkg.c
00000000 l    df *ABS*	00000000 dw1000_cli.c
0001d028 l     F .text	00000040 fctrl_ledgend
0001d068 l     F .text	00000010 dw1000_cli_too_few_args
0001d078 l     F .text	000002cc fctrl_to_string
0001d344 l     F .text	0000047c sys_status_to_string
0001d7c0 l     F .text	0000013c print_interrupt_bt_line
0001dcb8 l     F .text	000002f4 dw1000_cli_cmd
200053c0 l     O .bss	00000080 b.0
20005440 l     O .bss	00000028 b.1
20001228 l     O .data	00000010 shell_dw1000_cmd
00000000 l    df *ABS*	00000000 dw1000_gpio.c
00000000 l    df *ABS*	00000000 dw1000_otp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001e0ea l     F .text	0000001e hal_flash_check_addr
20005468 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0001e3a8 l     F .text	00000028 nrf52k_flash_wait_ready
0001e3d0 l     F .text	00000050 nrf52k_flash_erase_sector
0001e420 l     F .text	00000004 nrf52k_flash_init
0001e424 l     F .text	00000020 nrf52k_flash_sector_info
0001e444 l     F .text	000000c8 nrf52k_flash_write
0001e50c l     F .text	0000000e nrf52k_flash_read
00028a34 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001e51c l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
0001e728 l     F .text	0000006e nrf52_irqm_handler
0001e7b0 l     F .text	00000014 hal_spi_stop_transfer
0001e7c4 l     F .text	0000004a hal_spi_config_slave
0001e810 l     F .text	000000bc hal_spi_init_master
0001e8cc l     F .text	000000ea hal_spi_config_master
00028a50 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_timer.c
0001ecd4 l     F .text	0000000a nrf_read_timer_cntr
0001ece0 l     F .text	000000b8 nrf_timer_set_ocmp
0001ed98 l     F .text	0000000a nrf_timer_disable_ocmp
0001eda2 l     F .text	0000000a nrf_rtc_disable_ocmp
0001edac l     F .text	00000054 hal_timer_read_bsptimer
0001ee00 l     F .text	00000076 hal_timer_chk_queue
0001ee76 l     F .text	0000002c hal_timer_irq_handler
00028a60 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001f15c l     F .text	0000000e nrf52_hal_wdt_default_handler
0001f16c l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001f228 l     F .text	00000034 nrf52_periph_create_timers
0001f25c l     F .text	0000003c nrf52_periph_create_uart
0001f298 l     F .text	00000020 nrf52_periph_create_spi
200054bc l     O .bss	0000003c os_bsp_uart0
00028a78 l     O .text	00000004 os_bsp_spi0m_cfg
00028a7c l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 json_encode.c
0001f3c0 l     F .text	000002e4 json_encode_value
00000000 l    df *ABS*	00000000 json_util.c
00000000 l    df *ABS*	00000000 timescale.c
0001f794 l     F .text	00000174 timescale_QUpdate
0001f908 l     F .text	00000084 timescale_JofAx
0001f98c l     F .text	00000074 timescale_Aofx
0001fa00 l     F .text	000000f8 timescale_innovation
0001faf8 l     F .text	00000044 timescale_constraints
0001fb40 l     F .text	0000006c timescale_Hofx
00028ad6 l     O .text	0000000f __func__.7324
00028ae5 l     O .text	0000000f __func__.7336
00000000 l    df *ABS*	00000000 srkf_dbl.c
0001fda0 l     F .text	00000080 Hofx
0001fe20 l     F .text	000000a0 Aofx
00028b33 l     O .text	0000000e __func__.7283
00028b41 l     O .text	0000000e __func__.7299
00028b4f l     O .text	0000000e __func__.7311
00000000 l    df *ABS*	00000000 trisolve_dbl.c
00000000 l    df *ABS*	00000000 ud_dbl.c
00000000 l    df *ABS*	00000000 thornton_dbl.c
00000000 l    df *ABS*	00000000 bierman_dbl.c
00000000 l    df *ABS*	00000000 twr_ss_nrng.c
00020ff4 l     F .text	00000034 reset_cb
00021028 l     F .text	00000044 rx_error_cb
0002106c l     F .text	00000058 rx_timeout_cb
000210c8 l     F .text	00000398 rx_complete_cb
20001238 l     O .data	0000003c g_cbs
20001274 l     O .data	00000010 g_config
20001284 l     O .data	00000010 g_rng_cfgs
00000000 l    df *ABS*	00000000 uwb_rng.c
000214e0 l     F .text	00000044 reset_cb
00021524 l     F .text	0000004a rx_timeout_cb
00021570 l     F .text	00000054 superframe_reset_cb
00021734 l     F .text	000000ea rx_complete_cb
000218e0 l     F .text	00000138 tx_final_cb
00021a38 l     F .text	00000062 tx_complete_cb
20005520 l     O .bss	000003c0 g_twr_frames
20001294 l     O .data	0000003c g_cbs
200012d0 l     O .data	00000010 g_config
00000000 l    df *ABS*	00000000 wcs_timescale.c
00021b6c l     F .text	00000094 wcs_timescale_cb
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 bcast_ota.c
00022054 l     F .text	00000184 buf_to_bota_nmgr_mbuf
200058f8 l     O .bss	00000004 g_mbuf_pool
200058fc l     O .bss	00000004 off.0
00000000 l    df *ABS*	00000000 bcast_ota_cli.c
000223dc l     F .text	00000004 nmgr_mstr_get_mtu
000223e0 l     F .text	00000068 check_image
00022448 l     F .text	000000fc txim_ev_cb
00022544 l     F .text	00000078 nmgr_mstr_out
000225dc l     F .text	00000148 bota_cli_cmd
20005900 l     O .bss	00000020 nmgr_mstr_transport
20005920 l     O .bss	00000040 tx_im_inst
200012e0 l     O .data	00000010 shell_bota_cmd
00000000 l    df *ABS*	00000000 bcast_ota_nmgr.c
00022770 l     F .text	0000004c bota_check_image
000227bc l     F .text	00000064 bota_confirm
00022820 l     F .text	000003d8 bota_upload
20005960 l     O .bss	00000004 _new_image_cb
200012f0 l     O .data	0000000c bota_nmgr_group
00029188 l     O .text	00000010 bota_nmgr_handlers
00000000 l    df *ABS*	00000000 config_init.c
00022c4c l     F .text	000000bc config_init_fcb
20005980 l     O .bss	0000006c conf_fcb_area
200012fc l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_fcb.c
00022d2c l     F .text	00000024 conf_fcb_load
00022d50 l     F .text	00000044 conf_fcb_load_cb
00022d94 l     F .text	0000002c conf_fcb_var_read
00022dc0 l     F .text	000000d8 conf_fcb_compress_internal
00022e98 l     F .text	00000064 conf_fcb_append
00022f9a l     F .text	0000000a conf_fcb_save
20001334 l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 modlog.c
000230c4 l     F .text	0000002c modlog_find_by_module
000230f0 l     F .text	0000003c modlog_insert
0002312c l     F .text	0000001c modlog_alloc
00023148 l     F .text	00000048 modlog_infer_handle
00023190 l     F .text	00000046 modlog_register_no_lock
000231d6 l     F .text	0000002c modlog_append_one
00023204 l     F .text	00000088 modlog_append_no_lock
200059ec l     O .bss	00000004 modlog_first_dflt
200059f0 l     O .bss	000000c0 modlog_mapping_buf
20005acc l     O .bss	00000004 modlog_mappings
20005ad0 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 crc8.c
000291ac l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 rwlock.c
0002341c l     F .text	0000000c rwlock_complete_handoff
00023428 l     F .text	0000001a rwlock_read_must_block
00023442 l     F .text	00000016 rwlock_write_must_block
00023458 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 image_validate.c
000235b4 l     F .text	00000078 bootutil_img_hash
00000000 l    df *ABS*	00000000 loader.c
0002370c l     F .text	00000020 boot_write_sz
0002372c l     F .text	0000002e boot_read_image_header
0002375c l     F .text	00000034 boot_read_image_headers
00023790 l     F .text	00000074 split_image_check
00023804 l     F .text	00000064 boot_read_sectors
20005af4 l     O .bss	00000068 boot_data
20005b5c l     O .bss	00000004 tmpbuf.0
00000000 l    df *ABS*	00000000 sha256.c
000291bc l     O .text	00000100 K
00000000 l    df *ABS*	00000000 uart_hal.c
00023ce6 l     F .text	0000001a uart_hal_blocking_tx
00023d00 l     F .text	0000001a uart_hal_start_rx
00023d1a l     F .text	0000001a uart_hal_start_tx
00023d34 l     F .text	0000002c uart_hal_resume
00023d60 l     F .text	0000002c uart_hal_suspend
00023d8c l     F .text	00000012 uart_hal_close
00023d9e l     F .text	0000007e uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
00023e84 l     F .text	00000020 hal_uart_tx_fill_buf
00023ea4 l     F .text	00000072 uart_irq_handler
00023f18 l     F .text	00000014 uart0_irq_handler
00023f2c l     F .text	00000104 hal_uart_baudrate
20005b60 l     O .bss	0000001c uart0
00000000 l    df *ABS*	00000000 os_heap.c
000242c0 l     F .text	0000002c os_malloc_lock
000242ec l     F .text	00000028 os_malloc_unlock
20005b7c l     O .bss	0000000c os_malloc_mutex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 sf_ceil.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 wf_log10.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_fmod.c
000292c0 l     O .text	00000010 Zero
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_log10.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 ef_log.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 nrng_tag-sysdown-app.c
00000000 l    df *ABS*	00000000 nrng_tag-sysflash.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 impure.c
20001350 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00018aaa g     F .text	00000078 _cbor_value_decode_int64_internal
0000c940 g     F .text	00000100 panmaster_pkg_init
000140c0 g     F .text	000000a8 uart_console_init
00018324 g     F .text	00000010 cbor_mbuf_writer_init
00024bec g     F .text	0000002c .hidden __aeabi_dcmpun
00009630 g     F .text	0000001c os_callout_remaining_ticks
0000a770 g     F .text	00000030 os_arch_start
00014358 g     F .text	0000001c flash_area_id_from_image_slot
000128ea g     F .text	00000008 dpl_cputime_delay_usecs
00022f54 g     F .text	00000014 conf_fcb_dst
20005b88 g       .bss	00000000 __HeapBase
20003794 g     O .bss	00000008 g_os_task_list
000092a8 g     F .text	00000078 os_idle_task
00024bb0 g     F .text	00000012 .hidden __aeabi_dcmple
0001adf0 g     F .text	000000a8 dw1000_stop_rx
00021f74 g     F .text	00000016 strcpy
0001c806 g     F .text	0000005a dw1000_phy_config_lde
0001cf16 g     F .text	00000046 dw1000_phy_event_cnt_ctrl
00021e60 g     F .text	0000001a wcs_timescale_free
0001c72a g     F .text	0000002e dw1000_phy_sysclk_PLL
00000000 g       .svc_table	00000000 SVC_Count
0001aeda g     F .text	0000001e dw1000_adj_rx_timeout
00008164  w    F .text	00000002 TIMER2_IRQHandler
00010f60 g     F .text	00000018 fmemopen_w
0000bfb4 g     F .text	00000038 uwb_pan_set_postprocess
00024aec g     F .text	0000007a .hidden __cmpdf2
00021eb4 g     F .text	0000002a wcs_timescale_pkg_down
00012944 g     F .text	00000048 mem_split_frag
000253b4 g     F .text	00000012 fabs
0000a9de g     F .text	0000005a os_mbuf_copydata
2000299c g     O .bss	00000008 g_os_mempool_list
000094d0 g     F .text	0000001a os_callout_init
000094ec g     F .text	0000003c os_callout_stop
00008164  w    F .text	00000002 RTC0_IRQHandler
00019576 g     F .text	00000008 uwb_dw1000_set_autoack
00017502 g     F .text	000000ba boot_read_swap_state
000209a8 g     F .text	00000446 thornton_dbl
00010530 g     F .text	00000050 add_malloc_block
00024aec g     F .text	0000007a .hidden __eqdf2
0001afc6 g     F .text	00000042 dw1000_set_rx_window
0000982c g     F .text	00000068 os_eventq_put
0001581c g     F .text	00000010 shell_evq_set
0000cff8 g     F .text	00000010 panmaster_cli_register
0001a1f4 g     F .text	00000054 hal_dw1000_reset
00020734 g     F .text	000000cc trisolve_dbl
200000d8 g       .data	00000000 __data_start__
0000abe8 g     F .text	0000005c os_mbuf_extend
0000f0ae g     F .text	000000f4 uwb_ccp_start
00021fe4 g     F .text	00000020 strtok_r
00028a1c g     O .text	00000018 nrf52k_flash_dev
0002465c g     F .text	0000005a .hidden __floatdidf
0000ffb0 g     F .text	00000180 uwb_pan_slot_timer_cb
00019146 g     F .text	00000040 fcb_append_finish
00010eac g     F .text	00000024 printf
00011c9a g     F .text	0000004a imgmgr_state_confirm
0001a608 g     F .text	000001e4 hal_dw1000_write_noblock
00026d98 g     O .text	00000004 stdout
00015fdc g     F .text	00000054 shell_ticks_cmd
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000905c g     F .text	00000022 hal_gpio_write
000239f0 g     F .text	00000130 mbedtls_internal_sha256_process
00018da2 g     F .text	00000024 fcb_free_sector_cnt
0000a6d0 g     F .text	0000009c os_arch_os_init
00014cf0 g     F .text	00000038 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
00017244 g     F .text	000000d0 datetime_format
0000bc14 g     F .text	00000154 nrng_encode
0001eeb4 g     F .text	00000060 hal_timer_init
00014a08 g     F .text	0000001a mfg_seek_next_with_type
000184d8 g     F .text	0000008c cbor_encode_int
0000a7a0 g     F .text	00000064 os_arch_os_start
200049ac g     O .bss	00000001 g_console_ignore_non_nlip
200049ae g     O .bss	00000001 g_console_silence_non_nlip
0001e130 g     F .text	00000010 hal_flash_align
00014700 g     F .text	00000014 log_read
00016200 g     F .text	00000028 stats_group_walk
00021a9c g     F .text	00000094 uwb_rng_pkg_init
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
000174de g     F .text	0000001e boot_magic_compatible_check
00013e28 g     F .text	0000000c console_no_ticks
00008e68 g     F .text	000000c0 uwb_calc_aoa
0000e380 g     F .text	00000050 tdma_tx_slot_start
0000ae96 g     F .text	0000000c SysTick_Handler
00010142 g     F .text	00000022 BitPosition
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000a274 g     F .text	0000004a os_task_remove
0001eea4 g     F .text	00000010 nrf52_timer0_irq_handler
00018200 g     F .text	0000000c cbor_read_object
0001dfac g     F .text	00000010 dw1000_cli_register
00018304 g     F .text	0000001e cbor_mbuf_writer
00009a6c g     F .text	0000002a os_memblock_put
00020800 g     F .text	000001a4 ud_dbl
00008164  w    F .text	00000002 PWM1_IRQHandler
00013220 g     F .text	0000000c conf_dst_register
00009bb8 g     F .text	00000024 os_msys_get_pkthdr
20004e0c g     O .bss	00000004 flash_map
0000c570 g     F .text	00000014 panmaster_load
000168e0 g     F .text	00000244 uwbcfg_commit_to_inst_dw1000
0001402c g     F .text	00000020 uart_console_non_blocking_mode
0001e2e0 g     F .text	00000032 hal_flash_is_erased
0000ae50 g     F .text	00000046 PendSV_Handler
00010f0a g     F .text	0000001c snprintf
00008154  w    F .text	00000002 NMI_Handler
000292e8 g       .ARM.exidx	00000000 __exidx_end
00023940 g     F .text	0000000c mbedtls_sha256_init
00008020 g       .text	00000000 __isr_vector_start
0001b18c g     F .text	00000028 dw1000_set_autoack_delay
0001453c g     F .text	00000044 log_init
00010f26 g     F .text	0000003a memfile_write
0000a648 g     F .text	00000014 os_arch_ctx_sw
00018564 g     F .text	0000005c cbor_encode_simple_value
0000948e g     F .text	0000000a os_system_reset
0001a1dc g     F .text	00000018 hal_dw1000_inst
00023e1c g     F .text	00000068 uart_hal_init
000081d0 g     F .text	0000002c hal_system_reset
00019c32 g     F .text	00000076 dw1000_dev_enter_sleep
00009344 g     F .text	00000070 os_init_idle_task
20000110 g       .data	00000000 __aeabi_unwind_cpp_pr0
00024adc g     F .text	0000008a .hidden __gtdf2
00009df0 g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
00026144 g     F .text	0000000c __errno
000292e8 g       .ARM.exidx	00000000 __etext
0000a5d0 g     F .text	00000052 os_get_uptime_usec
0001028c g     F .text	00000074 uwb_wcs_prediction
00013dd0 g     F .text	0000003c console_vprintf
0000d32a g     F .text	00000008 panm_fcb_clear
00008164  w    F .text	00000002 RADIO_IRQHandler
000142c0 g     F .text	00000028 flash_area_write
20004df0 g     O .bss	00000010 rx_ev
0000b6a8 g     F .text	00000030 usecs_to_response
0000b264 g     F .text	0000007e uwb_nmgr_process_tx_queue
00025034 g     F .text	0000002e .hidden __aeabi_d2lz
0000ac58 g     F .text	000000b8 os_mutex_release
000160a0 g     F .text	0000000a stats_size
0001624c g     F .text	00000028 stats_register
00025a54 g     F .text	0000027c __ieee754_fmod
200040a8 g     O .bss	00000004 nmgr_evq
00009c94 g     F .text	00000020 os_sanity_check_register
20001778 g       .bssnz	00000000 __bssnz_start__
2000413c g     O .bss	00000004 conf_load_srcs
0001c894 g     F .text	000001d2 dw1000_phy_init
00018e06 g     F .text	00000020 fcb_get_len
0000a460 g     F .text	00000026 os_time_delay
00017634 g     F .text	000000a4 boot_swap_type
2000030c g     O .data	000000a0 g_uwb_config
0000ab60 g     F .text	00000088 os_mbuf_copyinto
00008164  w    F .text	00000002 PDM_IRQHandler
00024b78 g     F .text	00000010 .hidden __aeabi_cdcmple
0001ca66 g     F .text	00000066 dw1000_phy_rx_reset
00014a22 g     F .text	0000000a mfg_read_tlv_flash_area
00013e40 g     F .text	0000000c console_get_ticks
0001aec8 g     F .text	00000012 dw1000_set_rxauto_disable
00011bcc g     F .text	0000001e imgmgr_state_slot_in_use
00024d54 g     F .text	00000160 .hidden __aeabi_fadd
00017314 g     F .text	00000034 crc16_ccitt
00021c00 g     F .text	000001d4 wcs_timescale_ev
00018b22 g     F .text	00000024 cbor_parser_init
00024d50 g     F .text	00000164 .hidden __subsf3
0001c490 g     F .text	00000060 dw1000_calc_rssi
0000d1dc g     F .text	00000010 panm_fcb_load_idx
0001409c g     F .text	00000014 console_rx_restart
00009acc g     F .text	00000010 os_mempool_module_init
00012338 g     F .text	0000000c mgmt_evq_set
00008164  w    F .text	00000002 TEMP_IRQHandler
0000a66e g     F .text	0000000a os_arch_in_critical
0002807c g     O .text	0000003c g_stats_map_mac_stat_section
00008164  w    F .text	00000002 QDEC_IRQHandler
0001cddc g     F .text	00000054 dw1000_phy_data_duration
200003ac g     O .data	00000050 g_uwbcfg_str
0000fd44 g     F .text	00000154 uwb_pan_blink
00008164  w    F .text	00000002 TIMER3_IRQHandler
0002170c g     F .text	00000028 uwb_rng_clear_twr_data
0000bb3e g     F .text	000000d6 nrng_get_uids
0000a63c g     F .text	0000000a timer_handler
0000b6d8 g     F .text	000001d6 nrng_request
00009778 g     F .text	00000024 os_dev_lookup
00009dfc g     F .text	00000090 os_sched_sleep
000198bc g     F .text	000000e0 dw1000_read_reg
00019728 g     F .text	000000c8 dw1000_read
00013d74 g     F .text	0000000c console_set_completion_cb
00010660 g     F .text	0000001a memcpy
00024b68 g     F .text	00000020 .hidden __aeabi_cdrcmple
00028ca8 g     O .text	0000001e g_stats_map_twr_ss_nrng_stat_section
00015c18 g     F .text	000000e0 shell_nlip_process
000178f4 g     F .text	00000010 split_conf_init
00012e24 g     F .text	00000034 conf_parse_name
00008d90 g     F .text	00000074 uwb_task_init
0000d1ec g     F .text	00000014 panm_fcb_find_node
0001f18c g     F .text	00000078 hal_watchdog_init
000245e4 g     F .text	00000022 .hidden __floatsidf
0000d200 g     F .text	000000c2 panm_fcb_compress
0001322c g     F .text	00000054 conf_load
0001f6ec g     F .text	00000038 json_encode_array_value
00010300 g     F .text	00000068 uwb_wcs_local_to_master64
00024ae4 g     F .text	00000082 .hidden __ltdf2
00022bf8 g     F .text	0000000c bcast_ota_set_new_fw_cb
0001f76e g     F .text	00000026 json_readn
0000964c g     F .text	0000000c os_cputime_init
2000412c g     O .bss	00000004 conf_handlers
0001f724 g     F .text	0000001c json_encode_array_finish
0001f040 g     F .text	0000002c hal_timer_set_cb
0000c2cc g     F .text	00000034 panmaster_clear_list
00025004 g     F .text	00000000 .hidden __aeabi_uldivmod
000177ac g     F .text	0000002c split_app_init
0001e312 g     F .text	00000062 hal_flash_isempty
00021a18 g     F .text	00000020 rng_issue_complete
00010448 g     F .text	00000034 puts
00000020 g       *ABS*	00000000 _imghdr_size
00009db4 g     F .text	00000030 os_sched_ctx_sw_hook
00025f44 g     F .text	00000200 __ieee754_logf
0001924e g     F .text	00000052 fcb_elem_info
20004990 g     O .bss	00000004 console_is_midline
0001582c g     F .text	000000b8 shell_exec
0000a8de g     F .text	00000014 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
000128f2 g     F .text	00000022 dpl_cputime_timer_relative
0001ae98 g     F .text	0000001e dw1000_set_wait4resp
000081b4 g     F .text	0000000c hal_system_init
000185c0 g     F .text	0000000e cbor_encode_byte_string
0001cad0 g     F .text	00000120 dw1000_phy_forcetrxoff
0000d698 g     F .text	000001b0 survey_init
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000a678 g     F .text	00000040 os_arch_task_stack_init
0001b812 g     F .text	00000036 dw1000_calc_clock_offset_ratio_ttco
0001999c g     F .text	000000f0 dw1000_write_reg
00010580 g     F .text	0000006c malloc
00014298 g     F .text	00000028 flash_area_read
00024ebc g     F .text	0000001c .hidden __aeabi_i2f
0001c7e2 g     F .text	00000024 dw1000_phy_disable_sequencing
000091c4 g     F .text	0000004c __assert_func
0001e798 g     F .text	00000018 nrf52_spi0_irq_handler
0001127c g     F .text	00000018 imgr_my_version
0000fbe0 g     F .text	00000038 uwb_pan_set_frames
00011af0 g     F .text	000000b6 imgmgr_state_flags
00009fc0 g     F .text	00000040 os_sched_wakeup_ticks
00016348 g     F .text	00000024 stats_shell_register
00013d80 g     F .text	00000050 console_pkg_init
000117cc g     F .text	00000054 imgmgr_module_init
0000815c  w    F .text	00000002 UsageFault_Handler
0001abd8 g     F .text	0000006a dw1000_set_delay_start
00010ed0 g     F .text	0000003a vsnprintf
00010716 g     F .text	0000000c strtoll
20005390 g     O .bss	00000018 _uwbcfg_log
00024c68 g     F .text	00000040 .hidden __fixunsdfsi
2000297c g     O .bss	00000008 g_callout_list
00024314 g     F .text	00000018 os_malloc
0000f03c g     F .text	00000072 uwb_ccp_free
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00010a28 g     F .text	0000047c tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20001778 g       .bss	00000000 __bss_start__
0000e274 g     F .text	0000003e tdma_release_slot
000081c0 g     F .text	00000010 hal_debugger_connected
000245c4 g     F .text	0000001e .hidden __aeabi_ui2d
0001e1a4 g     F .text	00000070 hal_flash_write
00012c14 g     F .text	00000058 dpl_mbuf_appendfrom
00011a8c g     F .text	00000010 imgr_cli_register
00011aa0 g     F .text	00000014 imgmgr_log_upload_start
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001a188 g     F .text	00000052 hal_dw1000_spi_txrx_cb
000250e0 g     F .text	000002d0 .hidden __udivmoddi4
00009ccc g     F .text	00000018 os_sanity_task_checkin
00024340 g     F .text	00000000 .hidden __aeabi_drsub
000128c2 g     F .text	00000008 dpl_cputime_timer_stop
0000e2e4 g     F .text	0000003e tdma_free
0001237c g     F .text	00000048 nmgr_pkg_init
0000d31a g     F .text	00000010 panm_fcb_save
00018cb0 g     F .text	00000038 _cbor_value_copy_string
0001dfc0 g     F .text	000000d2 dw1000_gpio_config_leds
0000fb3c g     F .text	000000a4 uwb_pan_init
00008e04 g     F .text	00000018 uwb_task_deinit
2000378c g     O .bss	00000004 g_current_task
00009ce4 g     F .text	0000006c os_sanity_run
0001736c g     F .text	0000005a parse_ll_bounds
00018602 g     F .text	0000002c cbor_encoder_close_container
0000a65c g     F .text	0000000c os_arch_save_sr
20005365 g     O .bss	00000001 sysdown_active
00024b9c g     F .text	00000012 .hidden __aeabi_dcmplt
00024284 g     F .text	0000003c hal_uart_close
000175e8 g     F .text	00000020 boot_write_magic
00009a08 g     F .text	00000014 os_mempool_init
00022d08 g     F .text	00000020 config_pkg_init
0000a488 g     F .text	00000038 os_gettimeofday
2000379c g     O .bss	00000001 g_task_id
200058e0 g     O .bss	00000018 g_bcast_ota_log
00012e58 g     F .text	00000016 conf_parse_and_lookup
00016f04 g     F .text	00000140 timeval_to_clocktime
00016790 g     F .text	00000010 uwbcfg_register
200002f0 g     O .data	00000008 g_stats_registry
00024608 g     F .text	00000042 .hidden __extendsfdf2
00012e00 g     F .text	00000024 conf_handler_lookup
0001c4f0 g     F .text	00000020 dw1000_get_rssi
0002490c g     F .text	000001d0 .hidden __aeabi_ddiv
0002434c g     F .text	00000276 .hidden __adddf3
00008c74 g     F .text	00000060 uwb_dev_idx_lookup
000240f8 g     F .text	00000058 hal_uart_blocking_tx
0000c584 g     F .text	00000040 panmaster_save_node
000292d0 g       .text	00000000 __exidx_start
00010f78 g     F .text	00000100 strntoumax
000246b8 g     F .text	00000254 .hidden __aeabi_dmul
00026c38 g     O .text	00000078 g_stats_map_uwb_ccp_stat_section
00009d50 g     F .text	00000010 os_sanity_init
20001344 g     O .data	00000001 __fdlib_version
20004058 g     O .bss	00000004 imgmgr_dfu_callbacks_fn
0000d3c8 g     F .text	00000048 uwb_rng_tof_to_meters
00011ce4 g     F .text	000001bc imgmgr_state_read
0000a912 g     F .text	000000a8 os_mbuf_append
00014a2c g     F .text	0000000a mfg_read_tlv_mmr_ref
0000adf0 g     F .text	00000014 os_set_env
00012a56 g     F .text	00000036 dpl_memblock_put_from_cb
00019f60 g     F .text	00000048 dw1000_dev_enter_sleep_after_tx
0001c570 g     F .text	0000000e dw1000_read_systime_lo
0001c510 g     F .text	00000050 dw1000_estimate_los
000194a8 g     F .text	00000010 hal_bsp_flash_dev
0001b23e g     F .text	000000c4 dw1000_set_dblrxbuff
00021460 g     F .text	00000080 twr_ss_nrng_pkg_init
0000fc18 g     F .text	00000098 uwb_pan_pkg_init
0001f2b8 g     F .text	00000010 nrf52_periph_create
0001fbac g     F .text	000000f4 timescale_init
0001c758 g     F .text	0000002e dw1000_phy_txclk_PLL
0001b95c g     F .text	0000001e dw1000_ic_and_host_ptrs_equal
00026d9c g     O .text	00000008 MemFile_methods
0001cbf0 g     F .text	00000068 dw1000_phy_interrupt_mask
20003780 g     O .bss	0000000c g_os_sanity_check_mu
00014310 g     F .text	0000000a flash_area_align
0000c6dc g     F .text	00000034 postprocess_cb
000245c4 g     F .text	0000001e .hidden __floatunsidf
00011adc g     F .text	00000014 imgmgr_log_confirm
00013d40 g     F .text	0000000c console_line_queue_set
0002432c g     F .text	00000014 os_free
00008178 g     F .text	0000003c _sbrk
00017a40 g     F .text	0000002a base64_pad
0000ff38 g     F .text	0000003e uwb_pan_start
0000b8f0 g     F .text	0000008a nrng_listen
00018d8e g     F .text	00000014 cbor_value_calculate_string_length
0001b6ec g     F .text	00000024 dw1000_read_carrier_integrator
0001e5f0 g     F .text	00000098 os_tick_idle
00013e0c g     F .text	0000001c console_printf
00012344 g     F .text	00000014 nmgr_transport_init
000117b8 g     F .text	00000014 imgmgr_dfu_confirmed
00015e68 g     F .text	00000012 shell_os_reset_cmd
000197f0 g     F .text	000000cc dw1000_write
0001c3d8 g     F .text	00000098 dw1000_calc_fppl
0000dd3c g     F .text	0000012a survey_encode
0000b074 g     F .text	00000018 nmgr_uwb_mtu
00013890 g     F .text	00000008 console_blocking_mode
00013280 g     F .text	00000018 conf_ensure_loaded
0001b1b4 g     F .text	0000008a dw1000_set_wait4resp_delay
00018b46 g     F .text	0000012a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
0000d334 g     F .text	00000090 panm_fcb_sort
00008644 g     F .text	00000002 _init
000174fc g     F .text	00000006 boot_swap_type_off
0001e214 g     F .text	000000cc hal_flash_erase
00017810 g     F .text	0000000c split_mode_get
00022004 g     F .text	0000000c strtol
00015de4 g     F .text	00000084 shell_os_date_cmd
0000e3d0 g     F .text	00000030 tdma_pkg_init
0000bdb4 g     F .text	0000018c nrng_json_write
00025e68 g     F .text	000000c0 __ieee754_log10f
000192a0 g     F .text	00000048 fcb_getnext_in_area
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00024ca8 g     F .text	0000009e .hidden __aeabi_d2f
000269bc g     O .text	00000050 cmd_pm_param
0001e688 g     F .text	000000a0 os_tick_init
000250a4 g     F .text	0000003c .hidden __aeabi_d2ulz
0001cc58 g     F .text	0000015c dw1000_phy_repeated_frames
00024d50 g     F .text	00000164 .hidden __aeabi_fsub
00018fca g     F .text	0000001e fcb_clear
0001b008 g     F .text	00000022 dw1000_set_abs_timeout
20000298 g     O .data	00000008 g_dpl_mempool_list
00019186 g     F .text	000000c8 fcb_elem_crc8
000147c0 g     F .text	00000008 log_console_get
00008164  w    F .text	00000002 TIMER0_IRQHandler
00022304 g     F .text	00000084 bcast_ota_get_reset_mbuf
000093b4 g     F .text	000000b8 os_init
00011ab4 g     F .text	00000014 imgmgr_log_upload_done
000080f8 g     F .text	0000005c Reset_Handler
00020694 g     F .text	000000a0 srkf_dbl_free
00021fac g     F .text	0000001a strrchr
00018de0 g     F .text	00000026 fcb_put_len
000177d8 g     F .text	00000038 split_check_status
0001d8fc g     F .text	00000180 dw1000_cli_dump_registers
000232c0 g     F .text	00000040 modlog_append
000135ac g     F .text	0000000c console_echo
00024c18 g     F .text	0000004e .hidden __fixdfsi
000103f6 g     F .text	00000030 calloc
000225bc g     F .text	0000001e check_image_fid
00009a98 g     F .text	00000034 os_mempool_info_get_next
2000538c g     O .bss	00000001 sysinit_active
200049ad g     O .bss	00000001 g_console_silence
0001781c g     F .text	0000000c split_app_active_get
00024ee8 g     F .text	0000007c .hidden __floatdisf
000185dc g     F .text	0000000a cbor_encoder_create_array
000090b2 g     F .text	0000001a hal_gpio_toggle
0000aea2 g     F .text	0000001e os_default_irq_asm
20005968 g     O .bss	00000018 bota_state
200054f8 g     O .bss	00000028 g_twr_ss_nrng_stat
000289c8 g     O .text	0000000c cmd_dw1000_help
0000a000 g     F .text	0000000c os_sched_next_task
00009d60 g     F .text	00000054 os_sched_insert
00009528 g     F .text	00000078 os_callout_reset
00014a38 g     F .text	0000004c mfg_init
0000c870 g     F .text	000000a4 panmaster_delete_node
000097e0 g     F .text	00000010 os_dev_reset
00015a50 g     F .text	00000048 shell_init
0002434c g     F .text	00000276 .hidden __aeabi_dadd
00024ae4 g     F .text	00000082 .hidden __ledf2
00011f94 g     F .text	00000018 mgmt_group_list_unlock
00017ac4 g     F .text	00000058 hex_format
0000ac44 g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
00025064 g     F .text	00000040 .hidden __aeabi_f2ulz
00009894 g     F .text	0000001a os_eventq_get_no_wait
0002464c g     F .text	0000006a .hidden __aeabi_ul2d
000103c0 g     F .text	00000036 uwb_wcs_pkg_down
20001778 g       .bssnz	00000000 __bssnz_end__
00014374 g     F .text	00000070 flash_map_init
00028fe4 g     O .text	00000020 cmd_bota_param
00022010 g     F .text	00000014 vprintf
000269b0 g     O .text	0000000c cmd_pm_help
00009338 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
200002d4 g     O .data	00000018 reboot_conf_handler
00012dd4 g     F .text	00000010 conf_unlock
00009f84 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000da14 g     F .text	0000017c survey_broadcaster
0001ce30 g     F .text	0000001a dw1000_phy_frame_duration
00016228 g     F .text	00000024 stats_group_find
000271c4 g     O .text	00000028 log_console_handler
00023566 g     F .text	0000001e rwlock_release_write
00012358 g     F .text	00000024 nmgr_rx_req
200037fc g     O .bss	00000010 nrng_event
00008ff8 g     F .text	0000002c hal_gpio_init_in
00010254 g     F .text	00000038 uwb_wcs_dtu_time_adjust
0001dfbc g     F .text	00000004 dw1000_cli_down
00015cf8 g     F .text	00000018 shell_nlip_init
00018d6a g     F .text	00000024 cbor_value_advance
00026b28 g     O .text	00000018 g_stats_map_tdma_stat_section
00008164  w    F .text	00000002 PWM2_IRQHandler
0001f740 g     F .text	0000001c json_read_next
00025544 g     F .text	0000006c log10f
00011f3c g     F .text	0000003c imgr_ver_str
20001778 g       .data	00000000 __data_end__
0001466c g     F .text	00000094 log_register
00023ba6 g     F .text	00000140 mbedtls_sha256_finish_ret
00008d7e g     F .text	00000010 uwb_mac_find_cb_inst_ptr
000167f4 g     F .text	00000004 uwbcfg_pkg_down
000192e8 g     F .text	00000018 fcb_getnext_area
00011ac8 g     F .text	00000014 imgmgr_log_pending
000234ec g     F .text	00000026 rwlock_release_read
0001c470 g     F .text	00000020 dw1000_get_fppl
00008164  w    F .text	00000002 ECB_IRQHandler
00016030 g     F .text	00000014 shell_prompt_register
0000fcb0 g     F .text	00000094 uwb_pan_listen
000255b0 g     F .text	000004a4 __ieee754_asin
00012b14 g     F .text	00000014 dpl_mbuf_free
00013e34 g     F .text	0000000c console_yes_ticks
00024bd8 g     F .text	00000012 .hidden __aeabi_dcmpgt
000254cc g     F .text	00000078 fmod
00012d1a g     F .text	00000054 dpl_mbuf_trim_front
200037d0 g     O .bss	00000004 g_os_time
0001eaa4 g     F .text	00000060 hal_spi_init
0001232c g     F .text	0000000c mgmt_evq_get
00024030 g     F .text	00000034 hal_uart_init_cbs
0001f214 g     F .text	00000014 hal_watchdog_tickle
20005b88 g       .bss	00000000 __bss_end__
000097f0 g     F .text	00000020 os_dev_walk
00019fb0 g     F .text	0000004a dw1000_dev_enter_sleep_after_rx
0000a87e g     F .text	0000002e os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00028fd8 g     O .text	0000000c cmd_bota_help
0000b4cc g     F .text	0000010c nrng_init
00024bc4 g     F .text	00000012 .hidden __aeabi_dcmpge
00021620 g     F .text	000000ec uwb_rng_init
0001cfb4 g     F .text	00000024 dw1000_pkg_init
00018e26 g     F .text	00000034 fcb_sector_hdr_init
00011148 g     F .text	000000fc imgr_read_info
000168a0 g     F .text	0000003e remap_framefilter
0000ee58 g     F .text	000001e4 uwb_ccp_init
00018dc6 g     F .text	0000001a fcb_is_empty
0000b5d8 g     F .text	000000d0 nrng_pkg_init
00024348 g     F .text	0000027a .hidden __aeabi_dsub
00009ba8 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
00008630 g     F .text	00000014 _start
0001a7ec g     F .text	0000003c hal_dw1000_rw_noblock_wait
0000d410 g     F .text	0000005c calc_tof_ss
00015e7c g     F .text	00000038 shell_os_ls_dev_cmd
0002464c g     F .text	0000006a .hidden __floatundidf
00008e1c g     F .text	0000004a uwb_dev_init
00010238 g     F .text	0000001c uwb_wcs_set_postprocess
20005364 g     O .bss	00000001 stats_shell_registered
2000534c g     O .bss	00000018 g_stats_stats
000179ac g     F .text	00000094 base64_encode
0000a4c0 g     F .text	00000018 os_time_is_set
0000ae04 g     F .text	00000006 os_arch_init_task_stack
0000992c g     F .text	00000018 os_eventq_run
00024ebc g     F .text	0000001c .hidden __floatsisf
00012dc0 g     F .text	00000014 conf_lock
0000a2c0 g     F .text	00000080 os_task_info_get_next
0000fe98 g     F .text	000000a0 uwb_pan_reset
00027dcc g     O .text	00000010 boot_img_magic
00009cb4 g     F .text	00000018 os_sanity_check_reset
00017904 g     F .text	0000003c split_write_split
000135b8 g     F .text	00000034 console_lock
00021f8a g     F .text	00000022 strncmp
000160ac g     F .text	00000098 stats_walk
20004144 g     O .bss	00000004 conf_save_dst
0001cdb4 g     F .text	00000028 dw1000_phy_SHR_duration
00009188 g     F .text	0000003c hal_gpio_irq_release
200017d0 g     O .bss	00000050 g_idle_task
00009024 g     F .text	00000038 hal_gpio_init_out
0000ba64 g     F .text	000000da nrng_get_ranges
0000907e g     F .text	00000034 hal_gpio_read
20000308 g     O .data	00000004 sysinit_panic_cb
0001f06c g     F .text	0000008c hal_timer_start_at
00019db4 g     F .text	000001a4 dw1000_dev_config
00011580 g     F .text	00000014 imgmgr_dfu_stopped
0000d470 g     F .text	00000070 calc_tof_ds
2000377c g     O .bss	00000004 g_os_sanity_check_list
0001b0f4 g     F .text	00000098 dw1000_set_autoack
0000d93c g     F .text	0000004e survey_listen
0001f75c g     F .text	00000012 json_read_prev
000106f8 g     F .text	0000001e strncpy
0001b848 g     F .text	0000003c dw1000_read_rxdiag
0001c58e g     F .text	0000000e dw1000_read_rxtime_lo
0000c924 g     F .text	0000001c panmaster_sort
00024064 g     F .text	00000054 hal_uart_start_tx
00009a1c g     F .text	00000032 os_memblock_get
00009f10 g     F .text	00000074 os_sched_wakeup
0000a81e g     F .text	00000022 os_mqueue_get
0000a05c g     F .text	00000010 os_sem_init
00015d34 g     F .text	000000b0 shell_os_mpool_display_cmd
0001ce4a g     F .text	000000cc dw1000_phy_txrf_power_value
0001a828 g     F .text	00000086 hal_dw1000_wakeup
00021ede g     F .text	00000060 realloc
00015fa4 g     F .text	00000038 shell_os_register
00012914 g     F .text	00000030 mem_init_mbuf_pool
0001fca0 g     F .text	00000038 timescale_free
00009210 g     F .text	00000098 os_default_irq
00019cb0 g     F .text	00000104 dw1000_dev_wakeup
0001431a g     F .text	0000000a flash_area_erased_val
000245e4 g     F .text	00000022 .hidden __aeabi_i2d
00012b28 g     F .text	00000020 dpl_mbuf_free_chain
20003790 g     O .bss	00000004 g_os_last_ctx_sw_time
0000a06c g     F .text	00000064 os_sem_release
20004010 g     O .bss	00000048 g_stat
00010618 g     F .text	00000048 memcmp
0000a6b8 g     F .text	00000018 os_arch_init
0000b0f0 g     F .text	0000005c nmgr_uwb_pkg_init
0001db4c g     F .text	0000016c dw1000_cli_interrupt_backtrace
0001a004 g     F .text	00000134 dw1000_dev_init
00024ed8 g     F .text	0000008c .hidden __floatundisf
0000ff76 g     F .text	0000003a uwb_pan_lease_remaining
00018e5a g     F .text	0000004e fcb_sector_hdr_read
00022fa4 g     F .text	000000c4 conf_line_parse
000253b0  w    F .text	00000002 .hidden __aeabi_ldiv0
00012adc g     F .text	0000000a dpl_mbuf_pool_init
00021b34 g     F .text	00000038 uwb_rng_pkg_down
000233e0 g     F .text	0000003c crc8_calc
00013020 g     F .text	00000054 conf_commit
0000f1a2 g     F .text	00000054 uwb_ccp_stop
00016438 g     F .text	0000000c sysinit_start
0002490c g     F .text	000001d0 .hidden __divdf3
0001ef14 g     F .text	000000fc hal_timer_config
0000979c g     F .text	00000044 os_dev_open
0001abc0 g     F .text	00000018 dw1000_tx_wait
000101c0 g     F .text	00000044 uwb_wcs_init
0000dc50 g     F .text	000000c8 survey_slot_broadcast_cb
0000e400 g     F .text	0000003c tdma_pkg_down
00017828 g     F .text	00000018 split_mode_set
00018ea8 g     F .text	00000122 fcb_init
00024eb4 g     F .text	00000024 .hidden __aeabi_ui2f
0000e1dc g     F .text	00000098 tdma_assign_slot
000246b8 g     F .text	00000254 .hidden __muldf3
00013d38 g     F .text	00000008 console_is_init
00013308 g     F .text	00000058 conf_save
00021820 g     F .text	000000c0 uwb_rng_twr_to_tof
0000e090 g     F .text	0000014c tdma_init
0000a0d0 g     F .text	000000b4 os_sem_pend
0001287c g     F .text	00000010 nmgr_os_groups_register
0001f204 g     F .text	00000010 hal_watchdog_enable
0000c4d8 g     F .text	00000098 panrequest_cb
00023584 g     F .text	00000030 rwlock_init
000265fc g     O .text	00000042 g_stats_map_nrng_stat_section
00010380 g     F .text	00000040 uwb_wcs_pkg_init
00023492 g     F .text	0000005a rwlock_acquire_read
0001aa08 g     F .text	00000082 dw1000_write_tx_fctrl
0000c5c4 g     F .text	00000084 panmaster_update_node
0000a840 g     F .text	0000003e os_mqueue_put
00009b18 g     F .text	0000004c os_msys_register
20001920 g     O .bss	00000004 g_os_idle_ctr
0001af1a g     F .text	000000ac dw1000_set_rx_timeout
000141d8 g     F .text	00000044 flash_area_open
0000aae6 g     F .text	0000007a os_mbuf_cmpf
200000e8 g     O .data	00000008 uwb_cb
00008164  w    F .text	00000002 SAADC_IRQHandler
000175bc g     F .text	0000002a boot_read_swap_state_by_id
00010130 g     F .text	00000012 NumberOfBits
00017b1c g     F .text	0000008a hex_parse
00020194 g     F .text	00000500 srkf_dbl_init
00008d5c g     F .text	00000022 uwb_mac_get_interface
0001067a g     F .text	00000042 memset
0000d848 g     F .text	000000f4 survey_request
00008020 g       .text	000000d8 __isr_vector
00008918 g     F .text	00000318 main
0001eb04 g     F .text	0000002c hal_spi_set_txrx_cb
00019388 g     F .text	00000034 fcb_getnext
200053b8 g     O .bss	00000008 g_spi0_sem
0001404c g     F .text	00000050 console_out_nolock
00018458 g     F .text	00000080 cbor_encode_uint
00024ee8 g     F .text	0000007c .hidden __aeabi_l2f
00008648 g     F .text	00000050 uwb_config_updated_cb
00012a0c g     F .text	0000004a dpl_memblock_get
0001f6cc g     F .text	00000020 json_encode_array_start
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0002328c g     F .text	00000034 modlog_register
000193bc g     F .text	00000078 fcb_rotate
00016444 g     F .text	0000000c sysinit_end
0002333c g     F .text	000000a0 modlog_init
0000ae0a g     F .text	00000046 SVC_Handler
0000b096 g     F .text	00000058 nmgr_uwb_init
00009822 g     F .text	0000000a os_eventq_inited
00024ca8 g     F .text	0000009e .hidden __truncdfsf2
00027d64 g     O .text	00000020 sysdown_cbs
00016d30 g     F .text	000001d4 clocktime_to_timeval
00011fdc g     F .text	00000024 mgmt_group_register
00012ac0 g     F .text	0000001c streamer_printf
0001298c g     F .text	00000080 dpl_mempool_init
0002465c g     F .text	0000005a .hidden __aeabi_l2d
0001e150 g     F .text	00000052 hal_flash_read
000135ec g     F .text	00000034 console_unlock
00009988 g     F .text	00000008 os_eventq_dflt_get
0001f010 g     F .text	00000030 hal_timer_read
0000b2e4 g     F .text	00000058 uwb_nmgr_queue_tx
000215f2 g     F .text	0000002e uwb_rng_config
000098ae g     F .text	0000007e os_eventq_get
000142e8 g     F .text	00000028 flash_area_erase
20005478 g     O .bss	00000028 nrf52_hal_spi0
0000bf40 g     F .text	00000064 lease_expiry_cb
0001c5bc g     F .text	00000140 dw1000_configcwmode
00019586 g     F .text	00000008 uwb_dw1000_event_cnt_ctrl
0000a622 g     F .text	0000001a os_time_ms_to_ticks
00014618 g     F .text	0000000a log_walk
000095fc g     F .text	00000034 os_callout_wakeup_ticks
00024ed8 g     F .text	0000008c .hidden __aeabi_ul2f
00025064 g     F .text	00000040 .hidden __fixunssfdi
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0001b7f0 g     F .text	00000022 dw1000_read_time_tracking_offset
0001aa8a g     F .text	00000136 dw1000_start_tx
00012ab6 g     F .text	0000000a streamer_vprintf
20004e10 g     O .bss	00000004 flash_map_entries
0000aa38 g     F .text	000000ae os_mbuf_adj
20004f64 g     O .bss	00000002 reboot_cnt
00012de4 g     F .text	0000001c conf_register
00009486 g     F .text	00000008 os_reboot
00008020 g       .imghdr	00000000 __text
000233dc g     F .text	00000004 crc8_init
00022f68 g     F .text	00000032 conf_fcb_kv_save
0000f6c8 g     F .text	00000030 uwb_ccp_pkg_init
000149f6 g     F .text	00000012 mfg_seek_next
0000b496 g     F .text	00000034 nrng_config
000106d0 g     F .text	00000018 strcmp
0001434a g     F .text	0000000e flash_area_read_is_empty
00014000 g     F .text	0000002c uart_console_blocking_mode
00009de4 g     F .text	0000000c os_sched_get_current_task
000185e6 g     F .text	0000001c cbor_encoder_create_map
0001380c g     F .text	00000084 console_write
0000e322 g     F .text	0000005c tdma_rx_slot_start
00008458 g     F .text	000001d8 SystemInit
00009658 g     F .text	0000000a os_cputime_get32
00022efc g     F .text	00000058 conf_fcb_src
00008164  w    F .text	00000002 RNG_IRQHandler
0001b074 g     F .text	00000080 dw1000_mac_framefilter
000250a4 g     F .text	0000003c .hidden __fixunsdfdi
00024aec g     F .text	0000007a .hidden __nedf2
0001f6c4 g     F .text	00000008 json_encode_array_name
00009944 g     F .text	00000042 os_eventq_remove
0001a56c g     F .text	0000009a hal_dw1000_write
0001a96e g     F .text	0000009a dw1000_write_tx
00013298 g     F .text	00000068 conf_save_one
00009bf8 g     F .text	0000001c os_msys_num_free
00012e6e g     F .text	000000ca conf_value_from_str
0001957e g     F .text	00000008 uwb_dw1000_set_autoack_delay
0000c648 g     F .text	00000094 panmaster_postprocess
00021f3e g     F .text	00000020 sprintf
00025034 g     F .text	0000002e .hidden __fixdfdi
0000a00c g     F .text	00000022 os_sched
000240b8 g     F .text	00000040 hal_uart_start_rx
0001e140 g     F .text	00000010 hal_flash_erased_val
0000bfa4 g     F .text	00000010 uwb_pan_set_request_cb
0002362c g     F .text	000000e0 bootutil_img_validate
0001e092 g     F .text	00000058 _dw1000_otp_read
00013898 g     F .text	00000008 console_non_blocking_mode
0000ad10 g     F .text	000000e0 os_mutex_pend
00019532 g     F .text	00000044 uwb_dw1000_mac_framefilter
00000000 g       .svc_table	00000000 SVC_Table
00025454 g     F .text	00000078 asin
00011bea g     F .text	000000b0 imgmgr_state_set_pending
00008164  w    F .text	00000002 RTC2_IRQHandler
00028d54 g     O .text	00000048 g_stats_map_rng_stat_section
00024d48 g     F .text	0000016c .hidden __aeabi_frsub
0001c59c g     F .text	00000010 dw1000_read_txtime
00026a58 g     O .text	00000036 g_stats_map_survey_stat_section
0001f2c8 g     F .text	0000003c json_encode_object_start
20010000 g       .bss	00000000 __StackTop
000185ce g     F .text	0000000e cbor_encode_text_string
00025f38 g     F .text	0000000c nanf
00017c84 g     F .text	00000218 cbor_read_array
20001348 g     O .data	00000004 _impure_ptr
00022d28 g     F .text	00000002 config_pkg_init_stage2
0000a808 g     F .text	00000016 os_mqueue_init
0000a520 g     F .text	00000074 os_settimeofday
0001da7c g     F .text	000000d0 dw1000_cli_dump_address
00008164  w    F .text	00000002 PWM0_IRQHandler
0000b97c g     F .text	000000e8 nrng_twr_to_tof_frames
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001e9b8 g     F .text	00000038 hal_spi_config
00021fc6 g     F .text	0000001e strsep
00023068 g     F .text	0000005a conf_line_make
0001421c g     F .text	0000007c flash_area_to_sectors
00017a6c g     F .text	00000058 base64_decode
0001c5ac g     F .text	0000000e dw1000_read_txtime_lo
00020df0 g     F .text	00000204 bierman_dbl
00008d1e g     F .text	0000003e uwb_mac_remove_interface
0001fec0 g     F .text	000002d4 srkf_dbl_main
000095a0 g     F .text	0000005c os_callout_tick
00027d84 g     O .text	00000048 sysflash_map_dflt
000140b0 g     F .text	00000010 uart_console_is_init
200054a0 g     O .bss	0000001c nrf52_hal_timer0
00010164 g     F .text	0000005a BitIndex
000080f8 g       .text	00000000 __isr_vector_end
0001ebdc g     F .text	000000f8 hal_spi_txrx_noblock
0000946c g     F .text	0000001a os_start
0001c860 g     F .text	00000034 dw1000_phy_config_txrf
00008164  w    F .text	00000002 RTC1_IRQHandler
000176d8 g     F .text	00000086 boot_set_pending
0001a138 g     F .text	00000050 dw1000_dev_deinit
0001e9f0 g     F .text	0000004c hal_spi_enable
00011ea0 g     F .text	0000009c imgmgr_state_write
00024c68 g     F .text	00000040 .hidden __aeabi_d2uiz
0001288c g     F .text	0000002e dpl_cputime_timer_init
00025f28 g     F .text	00000010 nan
00024194 g     F .text	000000f0 hal_uart_config
00008cd4 g     F .text	0000004a uwb_mac_append_interface
0000c710 g     F .text	00000160 panmaster_add_node
00025cd0 g     F .text	00000198 __ieee754_sqrt
00013360 g     F .text	00000014 conf_store_init
0000c300 g     F .text	000001d8 panmaster_idx_find_node
0001cf5c g     F .text	00000056 dw1000_phy_event_cnt_read
000128ba g     F .text	00000008 dpl_cputime_timer_start
0000ee50 g     F .text	00000006 uwb_ccp_set_tof_comp_cb
0000b440 g     F .text	00000024 nrng_get_config
000253c8 g     F .text	0000008c ceilf
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00013a44 g     F .text	000002f4 console_handle_char
00026d1c g     O .text	0000004e g_stats_map_pan_stat_section
0001c786 g     F .text	00000032 dw1000_phy_sysclk_LDE
00024b88 g     F .text	00000012 .hidden __aeabi_dcmpeq
00015988 g     F .text	00000044 shell_register
00010426 g     F .text	00000020 fwrite
00014a84 g     F .text	00000010 mfg_open
200000f8 g     O .data	00000008 g_os_run_list
0001b904 g     F .text	00000058 dw1000_mac_init
0001c57e g     F .text	00000010 dw1000_read_rxtime
00021b30 g     F .text	00000002 uwb_rng_pkg_init2
0001b308 g     F .text	000003e4 dw1000_mac_config
00008c30 g     F .text	00000034 NVIC_Relocate
000131f8 g     F .text	00000028 conf_src_register
0001844e g     F .text	0000000a cbor_encoder_init
000173e8 g     F .text	00000078 sysinit_app
200037d4 g     O .bss	00000004 os_flags
0001f304 g     F .text	00000054 json_encode_object_key
0000e2b2 g     F .text	00000032 tdma_stop
0001761c g     F .text	00000016 boot_write_swap_type
0000a668 g     F .text	00000006 os_arch_restore_sr
2000546c g     O .bss	0000000c g_hal_os_tick
00012ae6 g     F .text	0000002e dpl_mbuf_get
0001ac42 g     F .text	000001ac dw1000_start_rx
0000f1f8 g     F .text	00000038 uwb_ccp_skew_compensation_ui64
0001f358 g     F .text	00000068 json_encode_object_entry
00014d28 g     F .text	00000054 log_reboot_pkg_init
2000fe50 g       *ABS*	000001b0 __StackLimit
00011594 g     F .text	00000014 imgmgr_dfu_started
00014324 g     F .text	00000026 flash_area_is_empty
20002978 g     O .bss	00000004 g_os_started
00023b20 g     F .text	00000086 mbedtls_sha256_update_ret
00021e7c g     F .text	00000038 wcs_timescale_pkg_init
00023868 g     F .text	000000d8 split_go
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00008164  w    F .text	00000002 NFCT_IRQHandler
00016518 g     F .text	00000250 uwbcfg_commit_to_inst
00011294 g     F .text	0000003c imgr_find_by_hash
000128d4 g     F .text	00000016 dpl_cputime_delay_ticks
00018c70 g     F .text	0000003e cbor_value_leave_container
0001901a g     F .text	00000032 fcb_append_to_scratch
00012020 g     F .text	00000028 mgmt_cbuf_setoerr
00008448 g     F .text	00000010 SystemCoreClockUpdate
0001f6a4 g     F .text	00000020 json_encode_object_finish
00024eb4 g     F .text	00000024 .hidden __floatunsisf
0000a8f2 g     F .text	00000020 os_mbuf_free_chain
00024c18 g     F .text	0000004e .hidden __aeabi_d2iz
0000a594 g     F .text	0000003c os_get_uptime
0000b464 g     F .text	00000032 nrng_append_config
00009c14 g     F .text	00000034 os_msys_init
0000c914 g     F .text	00000010 panmaster_compress
00019300 g     F .text	00000088 fcb_getnext_nolock
0000c2ac g     F .text	00000010 panmaster_node_idx
0000a9ba g     F .text	00000024 os_mbuf_off
200049af g     O .bss	00000001 g_is_output_nlip
000159cc g     F .text	00000084 shell_cmd_register
00009144 g     F .text	00000028 hal_gpio_irq_enable
0000a410 g     F .text	0000000c os_time_get
20005ab0 g     O .bss	0000001c modlog_mapping_pool
00022c04 g     F .text	00000048 bcast_ota_nmgr_module_init
0000c2bc g     F .text	00000010 panmaster_find_node_general
0001eb30 g     F .text	000000ac hal_spi_txrx
0001fcd8 g     F .text	000000c8 timescale_main
0001f0f8 g     F .text	00000064 hal_timer_stop
0001a90c g     F .text	00000062 dw1000_read_rx
0001b02a g     F .text	00000048 dw1000_sync_rxbufptrs
00012fe4 g     F .text	0000003c conf_get_value
00014580 g     F .text	00000058 log_append_body
000215c4 g     F .text	0000002e uwb_rng_free
0000a8ac g     F .text	00000032 os_mbuf_get_pkthdr
20004e8c g     O .bss	00000008 g_log_info
00012f38 g     F .text	00000078 conf_str_from_value
000253b0  w    F .text	00000002 .hidden __aeabi_idiv0
000182b4 g     F .text	00000050 cbor_mbuf_reader_init
00024bec g     F .text	0000002c .hidden __unorddf2
00017044 g     F .text	00000200 datetime_parse
0000b14c g     F .text	00000118 nmgr_uwb_tx
0001904c g     F .text	000000fa fcb_append
00012fb0 g     F .text	00000034 conf_set_value
0000db90 g     F .text	000000c0 survey_receiver
000289d4 g     O .text	00000048 cmd_dw1000_param
000128ca g     F .text	0000000a dpl_cputime_get32
000145d8 g     F .text	00000040 log_printf
000278b0 g     O .text	00000006 g_stats_map_stats
0000a19c g     F .text	000000d8 os_task_init
00012c6c g     F .text	000000ae dpl_mbuf_adj
000081fc g     F .text	0000004c hal_system_clock_start
0000815a  w    F .text	00000002 BusFault_Handler
000147c8 g     F .text	0000004c log_console_init
00016390 g     F .text	000000a0 sysdown
0001958e g     F .text	00000008 uwb_dw1000_event_cnt_read
00010368 g     F .text	00000018 uwb_wcs_local_to_master
00013d4c g     F .text	00000028 console_line_event_put
000106e8 g     F .text	00000010 strlen
00009714 g     F .text	00000038 os_dev_create
00009bdc g     F .text	0000001c os_msys_count
00009a4e g     F .text	0000001e os_memblock_put_from_cb
00023512 g     F .text	00000054 rwlock_acquire_write
00019b78 g     F .text	000000b2 dw1000_dev_configure_sleep
00009810 g     F .text	00000012 os_eventq_init
0000d1b8 g     F .text	00000024 panm_fcb_load
0000a41c g     F .text	00000044 os_time_advance
0000b8ae g     F .text	00000042 nrng_request_delay_start
0001a300 g     F .text	0000026c hal_dw1000_read_noblock
00024b78 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00013190 g     F .text	00000010 conf_cli_register
00024adc g     F .text	0000008a .hidden __gedf2
000221d8 g     F .text	0000012c bcast_ota_get_packet
0000a030 g     F .text	0000002c os_sched_resort
200053ac g     O .bss	00000004 boot_current_slot
00021dd8 g     F .text	00000088 wcs_timescale_init
0001cfd8 g     F .text	00000050 dw1000_pkg_down
00012a8c g     F .text	0000002a dpl_memblock_put
0001e108 g     F .text	00000028 hal_flash_init
00010204 g     F .text	00000034 uwb_wcs_free
00021f5e g     F .text	00000016 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
000161bc g     F .text	00000044 stats_module_init
00012000 g     F .text	00000020 mgmt_find_handler
00024608 g     F .text	00000042 .hidden __aeabi_f2d
00008158  w    F .text	00000002 MemoryManagement_Handler
00019ada g     F .text	0000009e dw1000_softreset
0001a248 g     F .text	000000b6 hal_dw1000_read
000115a8 g     F .text	00000014 imgmgr_dfu_pending
00012b48 g     F .text	000000a8 dpl_mbuf_append
00014814 g     F .text	0000001c log_level_get
0001775e g     F .text	0000004c boot_set_confirmed
0000d98a g     F .text	0000008a survey_slot_range_cb
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001e374 g     F .text	00000032 hal_flash_isempty_no_buf
00016768 g     F .text	00000028 uwbcfg_commit
0000974c g     F .text	0000002c os_dev_initialize_all
00024348 g     F .text	0000027a .hidden __subdf3
00015bf4 g     F .text	00000024 shell_nlip_clear_pkt
00023300 g     F .text	0000003a modlog_printf
0001aeb6 g     F .text	00000012 dw1000_set_on_error_continue
00009e8c g     F .text	00000084 os_sched_remove
000112d0 g     F .text	00000048 imgmgr_find_best_area_id
20000100 g     O .data	00000008 g_os_sleep_list
00024f64 g     F .text	00000000 .hidden __aeabi_ldivmod
000173e0 g     F .text	00000008 streamer_console_get
000194b8 g     F .text	00000068 hal_bsp_init
00009498 g     F .text	00000038 os_pkg_init
0001b888 g     F .text	0000007c dw1000_tasks_init
0001ea3c g     F .text	00000068 hal_spi_disable
00016b24 g     F .text	00000180 strtod_soft
00024d54 g     F .text	00000160 .hidden __addsf3
00012d78 g     F .text	00000048 conf_init
00009c84 g     F .text	00000010 os_sanity_check_init
00019434 g     F .text	00000074 fcb_walk
00022388 g     F .text	00000054 bcast_ota_pkg_init
00024150 g     F .text	00000044 hal_uart_init
00012bf0 g     F .text	00000024 dpl_mbuf_off
0001c560 g     F .text	00000010 dw1000_read_systime
00016144 g     F .text	0000002c stats_init
0000dd18 g     F .text	00000024 survey_pkg_init
00022724 g     F .text	0000004c bota_cli_register
00010ea4 g     F .text	00000008 vfprintf
00022024 g     F .text	00000030 strpbrk
0001b710 g     F .text	000000e0 dw1000_calc_clock_offset_ratio
000090cc g     F .text	00000078 hal_gpio_irq_init
0001c6fc g     F .text	0000002e dw1000_phy_sysclk_XTAL
20002928 g     O .bss	00000050 g_os_main_task
0000916c g     F .text	0000001c hal_gpio_irq_disable
000105ec g     F .text	0000002c free
0000d182 g     F .text	00000034 panm_fcb_src
0000f6f8 g     F .text	0000003c uwb_ccp_pkg_down
00017608 g     F .text	00000014 boot_write_image_ok
0002394c g     F .text	000000a4 mbedtls_sha256_starts_ret
000167a0 g     F .text	00000054 uwbcfg_pkg_init
0001c7b8 g     F .text	0000002a dw1000_phy_sysclk_SEQ
00013620 g     F .text	0000001e console_out



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000ae0b 	.word	0x0000ae0b
	...
    8058:	0000ae51 	.word	0x0000ae51
    805c:	0000ae97 	.word	0x0000ae97
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20001778 	.word	0x20001778
    ldr     r3, =__bss_end__
    8134:	20005b88 	.word	0x20005b88
    ldr    r1, =__etext
    8138:	000292e8 	.word	0x000292e8
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20001778 	.word	0x20001778
    LDR     R0, =__HeapBase
    8144:	20005b88 	.word	0x20005b88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008459 	.word	0x00008459
    LDR     R0, =_start
    8150:	00008631 	.word	0x00008631

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	200000d8 	.word	0x200000d8

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
    81c6:	f000 0001 	and.w	r0, r0, #1
    81ca:	4770      	bx	lr
    81cc:	e000ed00 	.word	0xe000ed00

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    824c:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8250:	2b06      	cmp	r3, #6
    8252:	d001      	beq.n	8258 <errata_16+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8254:	2000      	movs	r0, #0
    8256:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8258:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    825c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8260:	f013 0f0f 	tst.w	r3, #15
    8264:	d109      	bne.n	827a <errata_16+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8266:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    826a:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    826e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8272:	2b30      	cmp	r3, #48	; 0x30
    8274:	d003      	beq.n	827e <errata_16+0x36>
    return false;
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
    827a:	2000      	movs	r0, #0
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
}
    8280:	4770      	bx	lr

00008282 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8282:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8286:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    828a:	2b06      	cmp	r3, #6
    828c:	d001      	beq.n	8292 <errata_31+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828e:	2000      	movs	r0, #0
    8290:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8292:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8296:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    829a:	f013 0f0f 	tst.w	r3, #15
    829e:	d10d      	bne.n	82bc <errata_31+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82a0:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82a4:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ac:	2b30      	cmp	r3, #48	; 0x30
    82ae:	d007      	beq.n	82c0 <errata_31+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82b0:	2b40      	cmp	r3, #64	; 0x40
    82b2:	d007      	beq.n	82c4 <errata_31+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82b4:	2b50      	cmp	r3, #80	; 0x50
    82b6:	d007      	beq.n	82c8 <errata_31+0x46>
    return false;
    82b8:	2000      	movs	r0, #0
    82ba:	4770      	bx	lr
    82bc:	2000      	movs	r0, #0
    82be:	4770      	bx	lr
            return true;
    82c0:	2001      	movs	r0, #1
    82c2:	4770      	bx	lr
            return true;
    82c4:	2001      	movs	r0, #1
    82c6:	4770      	bx	lr
            return true;
    82c8:	2001      	movs	r0, #1
}
    82ca:	4770      	bx	lr

000082cc <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82cc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82d0:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82e0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    82e4:	f013 0f0f 	tst.w	r3, #15
    82e8:	d109      	bne.n	82fe <errata_32+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82ea:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    82ee:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    82f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82f6:	2b30      	cmp	r3, #48	; 0x30
    82f8:	d003      	beq.n	8302 <errata_32+0x36>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
}
    8304:	4770      	bx	lr

00008306 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8306:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    830a:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    830e:	2b06      	cmp	r3, #6
    8310:	d001      	beq.n	8316 <errata_36+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8312:	2000      	movs	r0, #0
    8314:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8316:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    831a:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    831e:	f013 0f0f 	tst.w	r3, #15
    8322:	d10d      	bne.n	8340 <errata_36+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8324:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8328:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    832c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8330:	2b30      	cmp	r3, #48	; 0x30
    8332:	d007      	beq.n	8344 <errata_36+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    8334:	2b40      	cmp	r3, #64	; 0x40
    8336:	d007      	beq.n	8348 <errata_36+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8338:	2b50      	cmp	r3, #80	; 0x50
    833a:	d007      	beq.n	834c <errata_36+0x46>
    return false;
    833c:	2000      	movs	r0, #0
    833e:	4770      	bx	lr
    8340:	2000      	movs	r0, #0
    8342:	4770      	bx	lr
            return true;
    8344:	2001      	movs	r0, #1
    8346:	4770      	bx	lr
            return true;
    8348:	2001      	movs	r0, #1
    834a:	4770      	bx	lr
            return true;
    834c:	2001      	movs	r0, #1
}
    834e:	4770      	bx	lr

00008350 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8350:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8354:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8358:	2b06      	cmp	r3, #6
    835a:	d001      	beq.n	8360 <errata_37+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8360:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8364:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d109      	bne.n	8382 <errata_37+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8372:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    837a:	2b30      	cmp	r3, #48	; 0x30
    837c:	d003      	beq.n	8386 <errata_37+0x36>
    return false;
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
    8382:	2000      	movs	r0, #0
    8384:	4770      	bx	lr
            return true;
    8386:	2001      	movs	r0, #1
}
    8388:	4770      	bx	lr

0000838a <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    838a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    838e:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8392:	2b06      	cmp	r3, #6
    8394:	d001      	beq.n	839a <errata_57+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    839a:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    839e:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83a2:	f013 0f0f 	tst.w	r3, #15
    83a6:	d109      	bne.n	83bc <errata_57+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83a8:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83ac:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b4:	2b30      	cmp	r3, #48	; 0x30
    83b6:	d003      	beq.n	83c0 <errata_57+0x36>
    return false;
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr
    83bc:	2000      	movs	r0, #0
    83be:	4770      	bx	lr
            return true;
    83c0:	2001      	movs	r0, #1
}
    83c2:	4770      	bx	lr

000083c4 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83c8:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    83cc:	2b06      	cmp	r3, #6
    83ce:	d001      	beq.n	83d4 <errata_66+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d0:	2000      	movs	r0, #0
    83d2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83d8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    83dc:	f013 0f0f 	tst.w	r3, #15
    83e0:	d109      	bne.n	83f6 <errata_66+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e2:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    83e6:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x36>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr

000083fe <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83fe:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8402:	f893 3fe0 	ldrb.w	r3, [r3, #4064]	; 0xfe0
    8406:	2b06      	cmp	r3, #6
    8408:	d001      	beq.n	840e <errata_108+0x10>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    840a:	2000      	movs	r0, #0
    840c:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840e:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8412:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
    8416:	f013 0f0f 	tst.w	r3, #15
    841a:	d10d      	bne.n	8438 <errata_108+0x3a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    841c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    8420:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    8424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8428:	2b30      	cmp	r3, #48	; 0x30
    842a:	d007      	beq.n	843c <errata_108+0x3e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842c:	2b40      	cmp	r3, #64	; 0x40
    842e:	d007      	beq.n	8440 <errata_108+0x42>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8430:	2b50      	cmp	r3, #80	; 0x50
    8432:	d007      	beq.n	8444 <errata_108+0x46>
    return false;
    8434:	2000      	movs	r0, #0
    8436:	4770      	bx	lr
    8438:	2000      	movs	r0, #0
    843a:	4770      	bx	lr
            return true;
    843c:	2001      	movs	r0, #1
    843e:	4770      	bx	lr
            return true;
    8440:	2001      	movs	r0, #1
    8442:	4770      	bx	lr
            return true;
    8444:	2001      	movs	r0, #1
}
    8446:	4770      	bx	lr

00008448 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8448:	4b01      	ldr	r3, [pc, #4]	; (8450 <SystemCoreClockUpdate+0x8>)
    844a:	4a02      	ldr	r2, [pc, #8]	; (8454 <SystemCoreClockUpdate+0xc>)
    844c:	601a      	str	r2, [r3, #0]
}
    844e:	4770      	bx	lr
    8450:	200000e4 	.word	0x200000e4
    8454:	03d09000 	.word	0x03d09000

00008458 <SystemInit>:
{
    8458:	b508      	push	{r3, lr}
    if (errata_16()){
    845a:	f7ff fef5 	bl	8248 <errata_16>
    845e:	b110      	cbz	r0, 8466 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8460:	4b6c      	ldr	r3, [pc, #432]	; (8614 <SystemInit+0x1bc>)
    8462:	4a6d      	ldr	r2, [pc, #436]	; (8618 <SystemInit+0x1c0>)
    8464:	675a      	str	r2, [r3, #116]	; 0x74
    if (errata_31()){
    8466:	f7ff ff0c 	bl	8282 <errata_31>
    846a:	b148      	cbz	r0, 8480 <SystemInit+0x28>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8470:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    8474:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    847c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    if (errata_32()){
    8480:	f7ff ff24 	bl	82cc <errata_32>
    8484:	b130      	cbz	r0, 8494 <SystemInit+0x3c>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8486:	4a65      	ldr	r2, [pc, #404]	; (861c <SystemInit+0x1c4>)
    8488:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    848c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8490:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    if (errata_36()){
    8494:	f7ff ff37 	bl	8306 <errata_36>
    8498:	b140      	cbz	r0, 84ac <SystemInit+0x54>
        NRF_CLOCK->EVENTS_DONE = 0;
    849a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    849e:	2200      	movs	r2, #0
    84a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84a8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84ac:	f7ff ff50 	bl	8350 <errata_37>
    84b0:	b120      	cbz	r0, 84bc <SystemInit+0x64>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84b6:	2203      	movs	r2, #3
    84b8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    if (errata_57()){
    84bc:	f7ff ff65 	bl	838a <errata_57>
    84c0:	b160      	cbz	r0, 84dc <SystemInit+0x84>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1c8>)
    84c4:	2205      	movs	r2, #5
    84c6:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84ca:	2201      	movs	r2, #1
    84cc:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84d0:	2200      	movs	r2, #0
    84d2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    if (errata_66()){
    84dc:	f7ff ff72 	bl	83c4 <errata_66>
    84e0:	2800      	cmp	r0, #0
    84e2:	d046      	beq.n	8572 <SystemInit+0x11a>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ec:	4b4d      	ldr	r3, [pc, #308]	; (8624 <SystemInit+0x1cc>)
    84ee:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84fa:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fe:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8502:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8506:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    850a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8512:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8516:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    851a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8522:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8526:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    852a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8532:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8536:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    853a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8542:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8546:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    854a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8552:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8556:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    855a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8562:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8566:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    856a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8572:	f7ff ff44 	bl	83fe <errata_108>
    8576:	b148      	cbz	r0, 858c <SystemInit+0x134>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    857c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    8580:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8588:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    858c:	4a23      	ldr	r2, [pc, #140]	; (861c <SystemInit+0x1c4>)
    858e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    859a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    859e:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    85a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    85a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85aa:	f013 0f01 	tst.w	r3, #1
    85ae:	d104      	bne.n	85ba <SystemInit+0x162>
    SystemCoreClockUpdate();
    85b0:	f7ff ff4a 	bl	8448 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85b4:	f000 fb3c 	bl	8c30 <NVIC_Relocate>
}
    85b8:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85ba:	4b1b      	ldr	r3, [pc, #108]	; (8628 <SystemInit+0x1d0>)
    85bc:	2201      	movs	r2, #1
    85be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85c2:	4b19      	ldr	r3, [pc, #100]	; (8628 <SystemInit+0x1d0>)
    85c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85c8:	2b00      	cmp	r3, #0
    85ca:	d0fa      	beq.n	85c2 <SystemInit+0x16a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85cc:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85d0:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85d4:	f023 0301 	bic.w	r3, r3, #1
    85d8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85dc:	4b12      	ldr	r3, [pc, #72]	; (8628 <SystemInit+0x1d0>)
    85de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85e2:	2b00      	cmp	r3, #0
    85e4:	d0fa      	beq.n	85dc <SystemInit+0x184>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85e6:	4b10      	ldr	r3, [pc, #64]	; (8628 <SystemInit+0x1d0>)
    85e8:	2200      	movs	r2, #0
    85ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85ee:	4b0e      	ldr	r3, [pc, #56]	; (8628 <SystemInit+0x1d0>)
    85f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85f4:	2b00      	cmp	r3, #0
    85f6:	d0fa      	beq.n	85ee <SystemInit+0x196>
  __ASM volatile ("dsb 0xF":::"memory");
    85f8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85fc:	4907      	ldr	r1, [pc, #28]	; (861c <SystemInit+0x1c4>)
    85fe:	68ca      	ldr	r2, [r1, #12]
    8600:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8604:	4b09      	ldr	r3, [pc, #36]	; (862c <SystemInit+0x1d4>)
    8606:	4313      	orrs	r3, r2
    8608:	60cb      	str	r3, [r1, #12]
    860a:	f3bf 8f4f 	dsb	sy
    __NOP();
    860e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8610:	e7fd      	b.n	860e <SystemInit+0x1b6>
    8612:	bf00      	nop
    8614:	4007c000 	.word	0x4007c000
    8618:	baadf00d 	.word	0xbaadf00d
    861c:	e000ed00 	.word	0xe000ed00
    8620:	40005000 	.word	0x40005000
    8624:	4000c000 	.word	0x4000c000
    8628:	4001e000 	.word	0x4001e000
    862c:	05fa0004 	.word	0x05fa0004

00008630 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8630:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8632:	4803      	ldr	r0, [pc, #12]	; (8640 <_start+0x10>)
    8634:	f000 febe 	bl	93b4 <os_init>
    os_start();
    8638:	f000 ff18 	bl	946c <os_start>
#endif
}
    863c:	bd08      	pop	{r3, pc}
    863e:	bf00      	nop
    8640:	00008919 	.word	0x00008919

00008644 <_init>:

void
_init(void)
{
}
    8644:	4770      	bx	lr
	...

00008648 <uwb_config_updated_cb>:
#endif

static bool uwb_config_updated = false;
int
uwb_config_updated_cb()
{
    8648:	b510      	push	{r4, lr}
    /* Workaround in case we're stuck waiting for ccp with the
     * wrong radio settings */
    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    864a:	2000      	movs	r0, #0
    864c:	f000 fb12 	bl	8c74 <uwb_dev_idx_lookup>
    8650:	4604      	mov	r4, r0
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    8652:	2101      	movs	r1, #1
    8654:	f000 fb93 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
    8658:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    865c:	b123      	cbz	r3, 8668 <uwb_config_updated_cb+0x20>
        uwb_txrf_config(udev, &udev->config.txrf);
        uwb_start_rx(udev);
        return 0;
    }

    uwb_config_updated = true;
    865e:	4b0d      	ldr	r3, [pc, #52]	; (8694 <uwb_config_updated_cb+0x4c>)
    8660:	2201      	movs	r2, #1
    8662:	701a      	strb	r2, [r3, #0]
    return 0;
}
    8664:	2000      	movs	r0, #0
    8666:	bd10      	pop	{r4, pc}
 * @return void
 */
UWB_API_IMPL_PREFIX void
uwb_phy_forcetrxoff(struct uwb_dev* dev)
{
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    8668:	6a63      	ldr	r3, [r4, #36]	; 0x24
    866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    866e:	4620      	mov	r0, r4
    8670:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8672:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	2100      	movs	r1, #0
    8678:	4620      	mov	r0, r4
    867a:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    867c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    867e:	685b      	ldr	r3, [r3, #4]
    8680:	f204 5124 	addw	r1, r4, #1316	; 0x524
    8684:	4620      	mov	r0, r4
    8686:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    8688:	6a63      	ldr	r3, [r4, #36]	; 0x24
    868a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    868c:	4620      	mov	r0, r4
    868e:	4798      	blx	r3
        return 0;
    8690:	e7e8      	b.n	8664 <uwb_config_updated_cb+0x1c>
    8692:	bf00      	nop
    8694:	20001788 	.word	0x20001788

00008698 <pan_complete_cb>:
    }
}

static void
pan_complete_cb(struct dpl_event * ev)
{
    8698:	b538      	push	{r3, r4, r5, lr}
    assert(ev != NULL);
    869a:	b148      	cbz	r0, 86b0 <pan_complete_cb+0x18>
}

static inline void *
dpl_event_get_arg(struct dpl_event *ev)
{
    return ev->ev.ev_arg;
    869c:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    869e:	b16c      	cbz	r4, 86bc <pan_complete_cb+0x24>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*) dpl_event_get_arg(ev);

    if (pan->dev_inst->slot_id != 0xffff) {
    86a0:	6823      	ldr	r3, [r4, #0]
    86a2:	f8b3 24c2 	ldrh.w	r2, [r3, #1218]	; 0x4c2
    86a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86aa:	429a      	cmp	r2, r3
    86ac:	d10c      	bne.n	86c8 <pan_complete_cb+0x30>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
        printf("{\"utime\": %lu,\"msg\": \"slot_id = %d\"}\n", utime, pan->dev_inst->slot_id);
        printf("{\"utime\": %lu,\"msg\": \"euid16 = 0x%X\"}\n", utime, pan->dev_inst->my_short_address);
    }
}
    86ae:	bd38      	pop	{r3, r4, r5, pc}
    assert(ev != NULL);
    86b0:	2300      	movs	r3, #0
    86b2:	461a      	mov	r2, r3
    86b4:	4619      	mov	r1, r3
    86b6:	4618      	mov	r0, r3
    86b8:	f000 fd84 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    86bc:	2300      	movs	r3, #0
    86be:	461a      	mov	r2, r3
    86c0:	4619      	mov	r1, r3
    86c2:	4618      	mov	r0, r3
    86c4:	f000 fd7e 	bl	91c4 <__assert_func>
        uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    86c8:	f000 ffc6 	bl	9658 <os_cputime_get32>
    86cc:	4605      	mov	r5, r0
        printf("{\"utime\": %lu,\"msg\": \"slot_id = %d\"}\n", utime, pan->dev_inst->slot_id);
    86ce:	6823      	ldr	r3, [r4, #0]
    86d0:	f8b3 24c2 	ldrh.w	r2, [r3, #1218]	; 0x4c2
    86d4:	4601      	mov	r1, r0
    86d6:	4805      	ldr	r0, [pc, #20]	; (86ec <pan_complete_cb+0x54>)
    86d8:	f008 fbe8 	bl	10eac <printf>
        printf("{\"utime\": %lu,\"msg\": \"euid16 = 0x%X\"}\n", utime, pan->dev_inst->my_short_address);
    86dc:	6823      	ldr	r3, [r4, #0]
    86de:	f8b3 24b6 	ldrh.w	r2, [r3, #1206]	; 0x4b6
    86e2:	4629      	mov	r1, r5
    86e4:	4802      	ldr	r0, [pc, #8]	; (86f0 <pan_complete_cb+0x58>)
    86e6:	f008 fbe1 	bl	10eac <printf>
}
    86ea:	e7e0      	b.n	86ae <pan_complete_cb+0x16>
    86ec:	00026150 	.word	0x00026150
    86f0:	00026178 	.word	0x00026178

000086f4 <slot_cb>:
slot_cb(struct dpl_event * ev){
    86f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86f8:	b084      	sub	sp, #16
    assert(ev);
    86fa:	2800      	cmp	r0, #0
    86fc:	d03c      	beq.n	8778 <slot_cb+0x84>
    86fe:	6883      	ldr	r3, [r0, #8]
    tdma_instance_t * tdma = slot->parent;
    8700:	689e      	ldr	r6, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    8702:	6872      	ldr	r2, [r6, #4]
    struct uwb_dev * udev = tdma->dev_inst;
    8704:	6834      	ldr	r4, [r6, #0]
    uint16_t idx = slot->idx;
    8706:	881f      	ldrh	r7, [r3, #0]
    struct nrng_instance *nrng = (struct nrng_instance *)slot->arg;
    8708:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
    870c:	f8b2 30b6 	ldrh.w	r3, [r2, #182]	; 0xb6
    if (dpl_sem_get_count(&ccp->sem) == 0) {
    8710:	2b00      	cmp	r3, #0
    8712:	d04a      	beq.n	87aa <slot_cb+0xb6>
    if (uwb_config_updated) {
    8714:	4b53      	ldr	r3, [pc, #332]	; (8864 <slot_cb+0x170>)
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	bba3      	cbnz	r3, 8784 <slot_cb+0x90>
    if (ccp->local_epoch==0 || udev->slot_id == 0xffff) return;
    871a:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
    871e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    8722:	430b      	orrs	r3, r1
    8724:	d041      	beq.n	87aa <slot_cb+0xb6>
    8726:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
    872a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    872e:	429a      	cmp	r2, r3
    8730:	d03b      	beq.n	87aa <slot_cb+0xb6>
    if (idx > 6 && idx < (tdma->nslots-6) && (idx%4)==0) {
    8732:	2f06      	cmp	r7, #6
    8734:	d907      	bls.n	8746 <slot_cb+0x52>
    8736:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
    873a:	3b06      	subs	r3, #6
    873c:	429f      	cmp	r7, r3
    873e:	da02      	bge.n	8746 <slot_cb+0x52>
    8740:	f017 0f03 	tst.w	r7, #3
    8744:	d034      	beq.n	87b0 <slot_cb+0xbc>
    if (udev->role&UWB_ROLE_ANCHOR) {
    8746:	f8b4 54b4 	ldrh.w	r5, [r4, #1204]	; 0x4b4
    874a:	f015 0504 	ands.w	r5, r5, #4
    874e:	d14a      	bne.n	87e6 <slot_cb+0xf2>
        if (idx%MYNEWT_VAL(NRNG_NTAGS) != udev->slot_id) {      // NRNG_NTAGS   = Max number of tags to allow in slots
    8750:	f007 0303 	and.w	r3, r7, #3
    8754:	f8b4 24c2 	ldrh.w	r2, [r4, #1218]	; 0x4c2
    8758:	4293      	cmp	r3, r2
    875a:	d126      	bne.n	87aa <slot_cb+0xb6>
        uint64_t dx_time = tdma_tx_slot_start(tdma, idx) & 0xFFFFFFFFFE00UL;
    875c:	ee07 7a90 	vmov	s15, r7
    8760:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    8764:	4630      	mov	r0, r6
    8766:	f005 fe0b 	bl	e380 <tdma_tx_slot_start>
    876a:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    876e:	f022 0201 	bic.w	r2, r2, #1
    8772:	b28b      	uxth	r3, r1
        uint32_t slot_mask = 0;
    8774:	2600      	movs	r6, #0
        for (uint16_t i = MYNEWT_VAL(NODE_START_SLOT_ID);
    8776:	e05c      	b.n	8832 <slot_cb+0x13e>
    assert(ev);
    8778:	2300      	movs	r3, #0
    877a:	461a      	mov	r2, r3
    877c:	4619      	mov	r1, r3
    877e:	4618      	mov	r0, r3
    8780:	f000 fd20 	bl	91c4 <__assert_func>
        uwb_config_updated = false;
    8784:	2500      	movs	r5, #0
    8786:	4b37      	ldr	r3, [pc, #220]	; (8864 <slot_cb+0x170>)
    8788:	701d      	strb	r5, [r3, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    878a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    8790:	4620      	mov	r0, r4
    8792:	4798      	blx	r3
    return (dev->uw_funcs->uf_mac_config(dev, config));
    8794:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	4629      	mov	r1, r5
    879a:	4620      	mov	r0, r4
    879c:	4798      	blx	r3
    return (dev->uw_funcs->uf_txrf_config(dev, config));
    879e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    87a0:	685b      	ldr	r3, [r3, #4]
    87a2:	f204 5124 	addw	r1, r4, #1316	; 0x524
    87a6:	4620      	mov	r0, r4
    87a8:	4798      	blx	r3
}
    87aa:	b004      	add	sp, #16
    87ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NMGR_UWB);
    87b0:	2113      	movs	r1, #19
    87b2:	4620      	mov	r0, r4
    87b4:	f000 fae3 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        assert(nmgruwb);
    87b8:	4605      	mov	r5, r0
    87ba:	b170      	cbz	r0, 87da <slot_cb+0xe6>
        if (uwb_nmgr_process_tx_queue(nmgruwb, tdma_tx_slot_start(tdma, idx))) {
    87bc:	ee07 7a90 	vmov	s15, r7
    87c0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    87c4:	4630      	mov	r0, r6
    87c6:	f005 fddb 	bl	e380 <tdma_tx_slot_start>
    87ca:	4602      	mov	r2, r0
    87cc:	460b      	mov	r3, r1
    87ce:	4628      	mov	r0, r5
    87d0:	f002 fd48 	bl	b264 <uwb_nmgr_process_tx_queue>
    87d4:	2800      	cmp	r0, #0
    87d6:	d0b6      	beq.n	8746 <slot_cb+0x52>
    87d8:	e7e7      	b.n	87aa <slot_cb+0xb6>
        assert(nmgruwb);
    87da:	2300      	movs	r3, #0
    87dc:	461a      	mov	r2, r3
    87de:	4619      	mov	r1, r3
    87e0:	4618      	mov	r0, r3
    87e2:	f000 fcef 	bl	91c4 <__assert_func>
        uwb_set_delay_start(udev, tdma_rx_slot_start(tdma, idx));
    87e6:	ee07 7a90 	vmov	s15, r7
    87ea:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    87ee:	4630      	mov	r0, r6
    87f0:	f005 fd97 	bl	e322 <tdma_rx_slot_start>
    87f4:	4602      	mov	r2, r0
    87f6:	460b      	mov	r3, r1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    87f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    87fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
    87fc:	4620      	mov	r0, r4
    87fe:	4788      	blx	r1
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8800:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8804:	2113      	movs	r1, #19
    8806:	4620      	mov	r0, r4
    8808:	4798      	blx	r3
            + nrng->config.rx_timeout_delay;
    880a:	f8b8 10bc 	ldrh.w	r1, [r8, #188]	; 0xbc
        uint16_t timeout = uwb_phy_frame_duration(udev, sizeof(nrng_request_frame_t))
    880e:	4401      	add	r1, r0
    8810:	b289      	uxth	r1, r1
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    8812:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8816:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    881a:	4620      	mov	r0, r4
    881c:	4798      	blx	r3
        nrng_listen(nrng, UWB_BLOCKING);
    881e:	2100      	movs	r1, #0
    8820:	4640      	mov	r0, r8
    8822:	f003 f865 	bl	b8f0 <nrng_listen>
    8826:	e7c0      	b.n	87aa <slot_cb+0xb6>
            slot_mask |= 1UL << i;
    8828:	2401      	movs	r4, #1
    882a:	40ac      	lsls	r4, r5
    882c:	4326      	orrs	r6, r4
             i <= MYNEWT_VAL(NODE_END_SLOT_ID); i++) {
    882e:	3501      	adds	r5, #1
    8830:	b2ad      	uxth	r5, r5
        for (uint16_t i = MYNEWT_VAL(NODE_START_SLOT_ID);
    8832:	2d07      	cmp	r5, #7
    8834:	d9f8      	bls.n	8828 <slot_cb+0x134>
        if(nrng_request_delay_start(
    8836:	2100      	movs	r1, #0
    8838:	9102      	str	r1, [sp, #8]
    883a:	b2b6      	uxth	r6, r6
    883c:	9601      	str	r6, [sp, #4]
    883e:	f44f 7198 	mov.w	r1, #304	; 0x130
    8842:	9100      	str	r1, [sp, #0]
    8844:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8848:	4640      	mov	r0, r8
    884a:	f003 f830 	bl	b8ae <nrng_request_delay_start>
    884e:	f010 0f04 	tst.w	r0, #4
    8852:	d0aa      	beq.n	87aa <slot_cb+0xb6>
            uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8854:	f000 ff00 	bl	9658 <os_cputime_get32>
    8858:	4601      	mov	r1, r0
            printf("{\"utime\": %lu,\"msg\": \"slot_timer_cb_%d:start_tx_error\"}\n",
    885a:	463a      	mov	r2, r7
    885c:	4802      	ldr	r0, [pc, #8]	; (8868 <slot_cb+0x174>)
    885e:	f008 fb25 	bl	10eac <printf>
    8862:	e7a2      	b.n	87aa <slot_cb+0xb6>
    8864:	20001788 	.word	0x20001788
    8868:	000261a0 	.word	0x000261a0
    886c:	00000000 	.word	0x00000000

00008870 <tof_comp_cb>:
 * Ideally this should use a map generated and make use of the euid in case
 * the ccp packet is relayed through another node.
 */
static uint32_t
tof_comp_cb(uint16_t short_addr)
{
    8870:	b508      	push	{r3, lr}
    float dist_in_meters = sqrtf(x*x+y*y+z*z);
#ifdef VERBOSE
    printf("d=%dm, %ld dwunits\n", (int)dist_in_meters,
           (uint32_t)(dist_in_meters/uwb_rng_tof_to_meters(1.0)));
#endif
    return dist_in_meters/uwb_rng_tof_to_meters(1.0);
    8872:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8890 <tof_comp_cb+0x20>
    8876:	f004 fda7 	bl	d3c8 <uwb_rng_tof_to_meters>
    887a:	ec53 2b10 	vmov	r2, r3, d0
    887e:	2000      	movs	r0, #0
    8880:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8884:	f01c f842 	bl	2490c <__aeabi_ddiv>
    8888:	f01c f9ee 	bl	24c68 <__aeabi_d2uiz>
}
    888c:	bd08      	pop	{r3, pc}
    888e:	bf00      	nop
    8890:	00000000 	.word	0x00000000
    8894:	3ff00000 	.word	0x3ff00000

00008898 <complete_cb>:
{
    8898:	b508      	push	{r3, lr}
    if(inst->fctrl != FCNTL_IEEE_RANGE_16){
    889a:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    889e:	f648 0341 	movw	r3, #34881	; 0x8841
    88a2:	429a      	cmp	r2, r3
    88a4:	d001      	beq.n	88aa <complete_cb+0x12>
        return false;
    88a6:	2000      	movs	r0, #0
}
    88a8:	bd08      	pop	{r3, pc}
    return (struct dpl_eventq *) os_eventq_dflt_get();
    88aa:	f001 f86d 	bl	9988 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    88ae:	4902      	ldr	r1, [pc, #8]	; (88b8 <complete_cb+0x20>)
    88b0:	f000 ffbc 	bl	982c <os_eventq_put>
    return true;
    88b4:	2001      	movs	r0, #1
    88b6:	e7f7      	b.n	88a8 <complete_cb+0x10>
    88b8:	20001778 	.word	0x20001778

000088bc <nrng_complete_cb>:
static void nrng_complete_cb(struct dpl_event *ev) {
    88bc:	b510      	push	{r4, lr}
    assert(ev != NULL);
    88be:	b300      	cbz	r0, 8902 <nrng_complete_cb+0x46>
    88c0:	4604      	mov	r4, r0
    return ev->ev.ev_arg;
    88c2:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    88c4:	b31b      	cbz	r3, 890e <nrng_complete_cb+0x52>
    hal_gpio_toggle(LED_BLINK_PIN);     // Blue LED
    88c6:	201f      	movs	r0, #31
    88c8:	f000 fbf3 	bl	90b2 <hal_gpio_toggle>
    88cc:	68a2      	ldr	r2, [r4, #8]
    nrng_frame_t * frame = nrng->frames[(nrng->idx)%nrng->nframes];     // Frame array
    88ce:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
    88d2:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
    88d6:	fbb3 f0f1 	udiv	r0, r3, r1
    88da:	fb01 3310 	mls	r3, r1, r0, r3
    88de:	b29b      	uxth	r3, r3
    88e0:	3332      	adds	r3, #50	; 0x32
    88e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (frame->code == UWB_DATA_CODE_DS_TWR_NRNG_FINAL || frame->code == UWB_DATA_CODE_DS_TWR_NRNG_EXT_FINAL){
    88e6:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    88ea:	f240 1143 	movw	r1, #323	; 0x143
    88ee:	428a      	cmp	r2, r1
    88f0:	d002      	beq.n	88f8 <nrng_complete_cb+0x3c>
    88f2:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    88f6:	d103      	bne.n	8900 <nrng_complete_cb+0x44>
        frame->code = UWB_DATA_CODE_DS_TWR_NRNG_END;
    88f8:	2244      	movs	r2, #68	; 0x44
    88fa:	725a      	strb	r2, [r3, #9]
    88fc:	2201      	movs	r2, #1
    88fe:	729a      	strb	r2, [r3, #10]
}
    8900:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    8902:	2300      	movs	r3, #0
    8904:	461a      	mov	r2, r3
    8906:	4619      	mov	r1, r3
    8908:	4618      	mov	r0, r3
    890a:	f000 fc5b 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    890e:	461a      	mov	r2, r3
    8910:	4619      	mov	r1, r3
    8912:	4618      	mov	r0, r3
    8914:	f000 fc56 	bl	91c4 <__assert_func>

00008918 <main>:


int main(int argc, char **argv){
    8918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    891c:	b093      	sub	sp, #76	; 0x4c
    int rc;

    sysinit();
    891e:	f00d fd8b 	bl	16438 <sysinit_start>
    8922:	f00e fd61 	bl	173e8 <sysinit_app>
    8926:	f00d fd8d 	bl	16444 <sysinit_end>
    uwbcfg_register(&uwb_cb);
    892a:	48ad      	ldr	r0, [pc, #692]	; (8be0 <main+0x2c8>)
    892c:	f00d ff30 	bl	16790 <uwbcfg_register>
    conf_load();
    8930:	f00a fc7c 	bl	1322c <conf_load>

    hal_gpio_init_out(LED_BLINK_PIN, 1);
    8934:	2101      	movs	r1, #1
    8936:	201f      	movs	r0, #31
    8938:	f000 fb74 	bl	9024 <hal_gpio_init_out>
    hal_gpio_init_out(LED_1, 1);
    893c:	2101      	movs	r1, #1
    893e:	201e      	movs	r0, #30
    8940:	f000 fb70 	bl	9024 <hal_gpio_init_out>
    hal_gpio_init_out(LED_3, 1);
    8944:	2101      	movs	r1, #1
    8946:	2016      	movs	r0, #22
    8948:	f000 fb6c 	bl	9024 <hal_gpio_init_out>

    struct uwb_dev * udev = uwb_dev_idx_lookup(0);
    894c:	2000      	movs	r0, #0
    894e:	f000 f991 	bl	8c74 <uwb_dev_idx_lookup>
    8952:	4604      	mov	r4, r0
    udev->config.rxauto_enable = false;
    8954:	f890 352d 	ldrb.w	r3, [r0, #1325]	; 0x52d
    8958:	f36f 0300 	bfc	r3, #0, #1
    895c:	f880 352d 	strb.w	r3, [r0, #1325]	; 0x52d
    udev->config.dblbuffon_enabled = false;
    8960:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
    8964:	f36f 1304 	bfc	r3, #4, #1
    8968:	f880 352c 	strb.w	r3, [r0, #1324]	; 0x52c
    return (dev->uw_funcs->uf_set_dblrxbuf(dev, enable));
    896c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    896e:	6a1b      	ldr	r3, [r3, #32]
    8970:	2100      	movs	r1, #0
    8972:	4798      	blx	r3
    uwb_set_dblrxbuff(udev, udev->config.dblbuffon_enabled);

    struct nrng_instance* nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
    8974:	210b      	movs	r1, #11
    8976:	4620      	mov	r0, r4
    8978:	f000 fa01 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(nrng);
    897c:	2800      	cmp	r0, #0
    897e:	d06a      	beq.n	8a56 <main+0x13e>
    8980:	4605      	mov	r5, r0
    memset(ev, 0, sizeof(*ev));
    8982:	4b98      	ldr	r3, [pc, #608]	; (8be4 <main+0x2cc>)
    8984:	2100      	movs	r1, #0
    8986:	6019      	str	r1, [r3, #0]
    8988:	6059      	str	r1, [r3, #4]
    898a:	6099      	str	r1, [r3, #8]
    898c:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    898e:	4a96      	ldr	r2, [pc, #600]	; (8be8 <main+0x2d0>)
    8990:	605a      	str	r2, [r3, #4]
    ev->ev.ev_arg = arg;
    8992:	6098      	str	r0, [r3, #8]

    dpl_event_init(&nrng_complete_event, nrng_complete_cb, nrng);
    
    struct uwb_mac_interface cbs = (struct uwb_mac_interface){
    8994:	223c      	movs	r2, #60	; 0x3c
    8996:	a803      	add	r0, sp, #12
    8998:	f007 fe6f 	bl	1067a <memset>
    899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    89a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    89a4:	9504      	str	r5, [sp, #16]
    89a6:	4b91      	ldr	r3, [pc, #580]	; (8bec <main+0x2d4>)
    89a8:	930e      	str	r3, [sp, #56]	; 0x38
        .id = UWBEXT_APP0,
        .inst_ptr = nrng,
        .complete_cb = complete_cb
    };

    uwb_mac_append_interface(udev, &cbs);
    89aa:	a903      	add	r1, sp, #12
    89ac:	4620      	mov	r0, r4
    89ae:	f000 f991 	bl	8cd4 <uwb_mac_append_interface>
    udev->slot_id = 0xffff;
    89b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    89b6:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
#if MYNEWT_VAL(BLEPRPH_ENABLED)
    ble_init(udev->euid);
#endif
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    89ba:	2101      	movs	r1, #1
    89bc:	4620      	mov	r0, r4
    89be:	f000 f9de 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(ccp);
    89c2:	4606      	mov	r6, r0
    89c4:	2800      	cmp	r0, #0
    89c6:	d04c      	beq.n	8a62 <main+0x14a>
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_PAN);
    89c8:	2111      	movs	r1, #17
    89ca:	4620      	mov	r0, r4
    89cc:	f000 f9d7 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(pan);
    89d0:	4607      	mov	r7, r0
    89d2:	2800      	cmp	r0, #0
    89d4:	d04b      	beq.n	8a6e <main+0x156>
    struct uwb_rng_instance* rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_RNG);
    89d6:	2104      	movs	r1, #4
    89d8:	4620      	mov	r0, r4
    89da:	f000 f9d0 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(rng);
    89de:	4681      	mov	r9, r0
    89e0:	2800      	cmp	r0, #0
    89e2:	d04a      	beq.n	8a7a <main+0x162>

    if (udev->role&UWB_ROLE_CCP_MASTER) {
    89e4:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    89e8:	f013 0f01 	tst.w	r3, #1
    89ec:	d04b      	beq.n	8a86 <main+0x16e>
        /* Start as clock-master */
        uwb_ccp_start(ccp, CCP_ROLE_MASTER);
    89ee:	2100      	movs	r1, #0
    89f0:	4630      	mov	r0, r6
    89f2:	f006 fb5c 	bl	f0ae <uwb_ccp_start>
    } else {
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
        uwb_ccp_set_tof_comp_cb(ccp, tof_comp_cb);
    }

    if (udev->role&UWB_ROLE_PAN_MASTER) {
    89f6:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
    89fa:	f013 0f02 	tst.w	r3, #2
    89fe:	d050      	beq.n	8aa2 <main+0x18a>
        /* As pan-master, first lookup our address and slot_id */
        struct image_version fw_ver;
        struct panmaster_node *node;
        panmaster_idx_find_node(udev->euid, NETWORK_ROLE_ANCHOR, &node);
    8a00:	f504 6198 	add.w	r1, r4, #1216	; 0x4c0
    8a04:	466b      	mov	r3, sp
    8a06:	2201      	movs	r2, #1
    8a08:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    8a0c:	f003 fc78 	bl	c300 <panmaster_idx_find_node>
        assert(node);
    8a10:	9b00      	ldr	r3, [sp, #0]
    8a12:	2b00      	cmp	r3, #0
    8a14:	d040      	beq.n	8a98 <main+0x180>
        imgr_my_version(&fw_ver);
    8a16:	a801      	add	r0, sp, #4
    8a18:	f008 fc30 	bl	1127c <imgr_my_version>
        node->fw_ver.iv_major = fw_ver.iv_major;
    8a1c:	9b00      	ldr	r3, [sp, #0]
    8a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8a22:	75da      	strb	r2, [r3, #23]
        node->fw_ver.iv_minor = fw_ver.iv_minor;
    8a24:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8a28:	761a      	strb	r2, [r3, #24]
        node->fw_ver.iv_revision = fw_ver.iv_revision;
    8a2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a2e:	f8a3 2019 	strh.w	r2, [r3, #25]
        node->fw_ver.iv_build_num = fw_ver.iv_build_num;
    8a32:	9a02      	ldr	r2, [sp, #8]
    8a34:	f8c3 201b 	str.w	r2, [r3, #27]
        udev->my_short_address = node->addr;
    8a38:	8a1a      	ldrh	r2, [r3, #16]
    8a3a:	f8a4 24b6 	strh.w	r2, [r4, #1206]	; 0x4b6
        udev->slot_id = node->slot_id;
    8a3e:	f8b3 3015 	ldrh.w	r3, [r3, #21]
    8a42:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
        panmaster_postprocess();
    8a46:	f003 fdff 	bl	c648 <panmaster_postprocess>
        uwb_pan_start(pan, UWB_PAN_ROLE_MASTER, NETWORK_ROLE_ANCHOR);
    8a4a:	2201      	movs	r2, #1
    8a4c:	4611      	mov	r1, r2
    8a4e:	4638      	mov	r0, r7
    8a50:	f007 fa72 	bl	ff38 <uwb_pan_start>
    8a54:	e034      	b.n	8ac0 <main+0x1a8>
    assert(nrng);
    8a56:	2300      	movs	r3, #0
    8a58:	461a      	mov	r2, r3
    8a5a:	4619      	mov	r1, r3
    8a5c:	4618      	mov	r0, r3
    8a5e:	f000 fbb1 	bl	91c4 <__assert_func>
    assert(ccp);
    8a62:	2300      	movs	r3, #0
    8a64:	461a      	mov	r2, r3
    8a66:	4619      	mov	r1, r3
    8a68:	4618      	mov	r0, r3
    8a6a:	f000 fbab 	bl	91c4 <__assert_func>
    assert(pan);
    8a6e:	2300      	movs	r3, #0
    8a70:	461a      	mov	r2, r3
    8a72:	4619      	mov	r1, r3
    8a74:	4618      	mov	r0, r3
    8a76:	f000 fba5 	bl	91c4 <__assert_func>
    assert(rng);
    8a7a:	2300      	movs	r3, #0
    8a7c:	461a      	mov	r2, r3
    8a7e:	4619      	mov	r1, r3
    8a80:	4618      	mov	r0, r3
    8a82:	f000 fb9f 	bl	91c4 <__assert_func>
        uwb_ccp_start(ccp, CCP_ROLE_SLAVE);
    8a86:	2101      	movs	r1, #1
    8a88:	4630      	mov	r0, r6
    8a8a:	f006 fb10 	bl	f0ae <uwb_ccp_start>
        uwb_ccp_set_tof_comp_cb(ccp, tof_comp_cb);
    8a8e:	4958      	ldr	r1, [pc, #352]	; (8bf0 <main+0x2d8>)
    8a90:	4630      	mov	r0, r6
    8a92:	f006 f9dd 	bl	ee50 <uwb_ccp_set_tof_comp_cb>
    8a96:	e7ae      	b.n	89f6 <main+0xde>
        assert(node);
    8a98:	461a      	mov	r2, r3
    8a9a:	4619      	mov	r1, r3
    8a9c:	4618      	mov	r0, r3
    8a9e:	f000 fb91 	bl	91c4 <__assert_func>
    } else {
        uwb_pan_set_postprocess(pan, pan_complete_cb);
    8aa2:	4954      	ldr	r1, [pc, #336]	; (8bf4 <main+0x2dc>)
    8aa4:	4638      	mov	r0, r7
    8aa6:	f003 fa85 	bl	bfb4 <uwb_pan_set_postprocess>
        network_role_t role = (udev->role&UWB_ROLE_ANCHOR)?
    8aaa:	f8b4 34b4 	ldrh.w	r3, [r4, #1204]	; 0x4b4
            NETWORK_ROLE_ANCHOR : NETWORK_ROLE_TAG;
    8aae:	f013 0f04 	tst.w	r3, #4
    8ab2:	f000 8082 	beq.w	8bba <main+0x2a2>
    8ab6:	2201      	movs	r2, #1
        uwb_pan_start(pan, UWB_PAN_ROLE_RELAY, role);
    8ab8:	2103      	movs	r1, #3
    8aba:	4638      	mov	r0, r7
    8abc:	f007 fa3c 	bl	ff38 <uwb_pan_start>
    }

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    8ac0:	f000 fdca 	bl	9658 <os_cputime_get32>
    8ac4:	4606      	mov	r6, r0
    printf("{\"utime\": %lu,\"exec\": \"%s\"}\n",utime,__FILE__);
    8ac6:	4a4c      	ldr	r2, [pc, #304]	; (8bf8 <main+0x2e0>)
    8ac8:	4601      	mov	r1, r0
    8aca:	484c      	ldr	r0, [pc, #304]	; (8bfc <main+0x2e4>)
    8acc:	f008 f9ee 	bl	10eac <printf>
    printf("{\"device_id\":\"%lX\"",udev->device_id);
    8ad0:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
    8ad4:	484a      	ldr	r0, [pc, #296]	; (8c00 <main+0x2e8>)
    8ad6:	f008 f9e9 	bl	10eac <printf>
    printf(",\"panid\":\"%X\"",udev->pan_id);
    8ada:	f8b4 14c0 	ldrh.w	r1, [r4, #1216]	; 0x4c0
    8ade:	4849      	ldr	r0, [pc, #292]	; (8c04 <main+0x2ec>)
    8ae0:	f008 f9e4 	bl	10eac <printf>
    printf(",\"addr\":\"%X\"",udev->uid);
    8ae4:	f8b4 14b6 	ldrh.w	r1, [r4, #1206]	; 0x4b6
    8ae8:	4847      	ldr	r0, [pc, #284]	; (8c08 <main+0x2f0>)
    8aea:	f008 f9df 	bl	10eac <printf>
    printf(",\"part_id\":\"%lX\"",(uint32_t)(udev->euid&0xffffffff));
    8aee:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    8af2:	4846      	ldr	r0, [pc, #280]	; (8c0c <main+0x2f4>)
    8af4:	f008 f9da 	bl	10eac <printf>
    printf(",\"lot_id\":\"%lX\"}\n",(uint32_t)(udev->euid>>32));
    8af8:	f8d4 14bc 	ldr.w	r1, [r4, #1212]	; 0x4bc
    8afc:	4844      	ldr	r0, [pc, #272]	; (8c10 <main+0x2f8>)
    8afe:	f008 f9d5 	bl	10eac <printf>
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    8b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    8b06:	211f      	movs	r1, #31
    8b08:	4620      	mov	r0, r4
    8b0a:	4798      	blx	r3
    8b0c:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"frame_duration = %d usec\"}\n",utime, uwb_phy_frame_duration(udev, sizeof(twr_frame_final_t)));
    8b0e:	4631      	mov	r1, r6
    8b10:	4840      	ldr	r0, [pc, #256]	; (8c14 <main+0x2fc>)
    8b12:	f008 f9cb 	bl	10eac <printf>
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    8b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8b1c:	4620      	mov	r0, r4
    8b1e:	4798      	blx	r3
    8b20:	4602      	mov	r2, r0
    printf("{\"utime\": %lu,\"msg\": \"SHR_duration = %d usec\"}\n",utime, uwb_phy_SHR_duration(udev));
    8b22:	4631      	mov	r1, r6
    8b24:	483c      	ldr	r0, [pc, #240]	; (8c18 <main+0x300>)
    8b26:	f008 f9c1 	bl	10eac <printf>
    printf("{\"utime\": %lu,\"msg\": \"holdoff = %d usec\"}\n",utime,(uint16_t)ceilf(uwb_dwt_usecs_to_usecs(rng->config.tx_holdoff_delay)));
    8b2a:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
    8b2e:	f01b fd49 	bl	245c4 <__aeabi_ui2d>
    8b32:	a329      	add	r3, pc, #164	; (adr r3, 8bd8 <main+0x2c0>)
    8b34:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b38:	f01b fdbe 	bl	246b8 <__aeabi_dmul>
    8b3c:	f01c f8b4 	bl	24ca8 <__aeabi_d2f>
    8b40:	ee00 0a10 	vmov	s0, r0
    8b44:	f01c fc40 	bl	253c8 <ceilf>
    8b48:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    8b4c:	ee17 3a90 	vmov	r3, s15
    8b50:	b29a      	uxth	r2, r3
    8b52:	4631      	mov	r1, r6
    8b54:	4831      	ldr	r0, [pc, #196]	; (8c1c <main+0x304>)
    8b56:	f008 f9a9 	bl	10eac <printf>

    /* Pan is slots 1&2 */
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    8b5a:	2103      	movs	r1, #3
    8b5c:	4620      	mov	r0, r4
    8b5e:	f000 f90e 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(tdma);
    8b62:	4606      	mov	r6, r0
    8b64:	b358      	cbz	r0, 8bbe <main+0x2a6>
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 1, (void*)pan);
    8b66:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8c2c <main+0x314>
    8b6a:	463b      	mov	r3, r7
    8b6c:	2201      	movs	r2, #1
    8b6e:	4641      	mov	r1, r8
    8b70:	f005 fb34 	bl	e1dc <tdma_assign_slot>
    tdma_assign_slot(tdma, uwb_pan_slot_timer_cb, 2, (void*)pan);
    8b74:	463b      	mov	r3, r7
    8b76:	2202      	movs	r2, #2
    8b78:	4641      	mov	r1, r8
    8b7a:	4630      	mov	r0, r6
    8b7c:	f005 fb2e 	bl	e1dc <tdma_assign_slot>

#if MYNEWT_VAL(SURVEY_ENABLED)
    survey_instance_t *survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_SURVEY);
    8b80:	2150      	movs	r1, #80	; 0x50
    8b82:	4620      	mov	r0, r4
    8b84:	f000 f8fb 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    8b88:	4604      	mov	r4, r0

    tdma_assign_slot(tdma, survey_slot_range_cb, MYNEWT_VAL(SURVEY_RANGE_SLOT), (void*)survey);
    8b8a:	4603      	mov	r3, r0
    8b8c:	2203      	movs	r2, #3
    8b8e:	4924      	ldr	r1, [pc, #144]	; (8c20 <main+0x308>)
    8b90:	4630      	mov	r0, r6
    8b92:	f005 fb23 	bl	e1dc <tdma_assign_slot>
    tdma_assign_slot(tdma, survey_slot_broadcast_cb, MYNEWT_VAL(SURVEY_BROADCAST_SLOT), (void*)survey);
    8b96:	4623      	mov	r3, r4
    8b98:	2204      	movs	r2, #4
    8b9a:	4922      	ldr	r1, [pc, #136]	; (8c24 <main+0x30c>)
    8b9c:	4630      	mov	r0, r6
    8b9e:	f005 fb1d 	bl	e1dc <tdma_assign_slot>
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8ba2:	2406      	movs	r4, #6
    8ba4:	2c9f      	cmp	r4, #159	; 0x9f
    8ba6:	d810      	bhi.n	8bca <main+0x2b2>
#else
    for (uint16_t i = 3; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
#endif
        tdma_assign_slot(tdma, slot_cb, i, (void*)nrng);
    8ba8:	462b      	mov	r3, r5
    8baa:	4622      	mov	r2, r4
    8bac:	491e      	ldr	r1, [pc, #120]	; (8c28 <main+0x310>)
    8bae:	4630      	mov	r0, r6
    8bb0:	f005 fb14 	bl	e1dc <tdma_assign_slot>
    for (uint16_t i = 6; i < MYNEWT_VAL(TDMA_NSLOTS); i++)
    8bb4:	3401      	adds	r4, #1
    8bb6:	b2a4      	uxth	r4, r4
    8bb8:	e7f4      	b.n	8ba4 <main+0x28c>
            NETWORK_ROLE_ANCHOR : NETWORK_ROLE_TAG;
    8bba:	2202      	movs	r2, #2
    8bbc:	e77c      	b.n	8ab8 <main+0x1a0>
    assert(tdma);
    8bbe:	2300      	movs	r3, #0
    8bc0:	461a      	mov	r2, r3
    8bc2:	4619      	mov	r1, r3
    8bc4:	4618      	mov	r0, r3
    8bc6:	f000 fafd 	bl	91c4 <__assert_func>

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    8bca:	f000 fedd 	bl	9988 <os_eventq_dflt_get>
    8bce:	f000 fead 	bl	992c <os_eventq_run>
    while (1) {
    8bd2:	e7fa      	b.n	8bca <main+0x2b2>
    8bd4:	f3af 8000 	nop.w
    8bd8:	90690691 	.word	0x90690691
    8bdc:	3ff06906 	.word	0x3ff06906
    8be0:	200000e8 	.word	0x200000e8
    8be4:	20001778 	.word	0x20001778
    8be8:	000088bd 	.word	0x000088bd
    8bec:	00008899 	.word	0x00008899
    8bf0:	00008871 	.word	0x00008871
    8bf4:	00008699 	.word	0x00008699
    8bf8:	000261dc 	.word	0x000261dc
    8bfc:	00026200 	.word	0x00026200
    8c00:	00026220 	.word	0x00026220
    8c04:	00026234 	.word	0x00026234
    8c08:	00026244 	.word	0x00026244
    8c0c:	00026254 	.word	0x00026254
    8c10:	00026268 	.word	0x00026268
    8c14:	0002627c 	.word	0x0002627c
    8c18:	000262b0 	.word	0x000262b0
    8c1c:	000262e0 	.word	0x000262e0
    8c20:	0000d98b 	.word	0x0000d98b
    8c24:	0000dc51 	.word	0x0000dc51
    8c28:	000086f5 	.word	0x000086f5
    8c2c:	0000ffb1 	.word	0x0000ffb1

00008c30 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    8c30:	4a09      	ldr	r2, [pc, #36]	; (8c58 <NVIC_Relocate+0x28>)
    8c32:	4b0a      	ldr	r3, [pc, #40]	; (8c5c <NVIC_Relocate+0x2c>)
    8c34:	429a      	cmp	r2, r3
    8c36:	d00a      	beq.n	8c4e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8c38:	2300      	movs	r3, #0
    8c3a:	e006      	b.n	8c4a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    8c3c:	4a07      	ldr	r2, [pc, #28]	; (8c5c <NVIC_Relocate+0x2c>)
    8c3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    8c42:	4a05      	ldr	r2, [pc, #20]	; (8c58 <NVIC_Relocate+0x28>)
    8c44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    8c48:	3301      	adds	r3, #1
    8c4a:	2b35      	cmp	r3, #53	; 0x35
    8c4c:	ddf6      	ble.n	8c3c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    8c4e:	4a02      	ldr	r2, [pc, #8]	; (8c58 <NVIC_Relocate+0x28>)
    8c50:	4b03      	ldr	r3, [pc, #12]	; (8c60 <NVIC_Relocate+0x30>)
    8c52:	609a      	str	r2, [r3, #8]
#endif
}
    8c54:	4770      	bx	lr
    8c56:	bf00      	nop
    8c58:	20000000 	.word	0x20000000
    8c5c:	00008020 	.word	0x00008020
    8c60:	e000ed00 	.word	0xe000ed00

00008c64 <uwb_interrupt_task>:
 * @param arg  Pointer to the queue of interrupts.
 * @return void
 */
static void *
uwb_interrupt_task(void *arg)
{
    8c64:	b510      	push	{r4, lr}
    8c66:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    8c68:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    8c6c:	f000 fe5e 	bl	992c <os_eventq_run>
    8c70:	e7fa      	b.n	8c68 <uwb_interrupt_task+0x4>
	...

00008c74 <uwb_dev_idx_lookup>:
{
    8c74:	b510      	push	{r4, lr}
    8c76:	b08a      	sub	sp, #40	; 0x28
    8c78:	4604      	mov	r4, r0
    const char base1k[] = "dw1000_%d";
    8c7a:	4b14      	ldr	r3, [pc, #80]	; (8ccc <uwb_dev_idx_lookup+0x58>)
    8c7c:	f10d 0c1c 	add.w	ip, sp, #28
    8c80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8c84:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8c88:	f8ac 2000 	strh.w	r2, [ip]
    const char base3k[] = "dw3000_%d";
    8c8c:	4b10      	ldr	r3, [pc, #64]	; (8cd0 <uwb_dev_idx_lookup+0x5c>)
    8c8e:	f10d 0c10 	add.w	ip, sp, #16
    8c92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    8c96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    8c9a:	f8ac 2000 	strh.w	r2, [ip]
    snprintf(buf, sizeof buf, base1k, idx);
    8c9e:	4623      	mov	r3, r4
    8ca0:	aa07      	add	r2, sp, #28
    8ca2:	210c      	movs	r1, #12
    8ca4:	a801      	add	r0, sp, #4
    8ca6:	f008 f930 	bl	10f0a <snprintf>
    odev = os_dev_lookup(buf);
    8caa:	a801      	add	r0, sp, #4
    8cac:	f000 fd64 	bl	9778 <os_dev_lookup>
    if (!odev) {
    8cb0:	b108      	cbz	r0, 8cb6 <uwb_dev_idx_lookup+0x42>
}
    8cb2:	b00a      	add	sp, #40	; 0x28
    8cb4:	bd10      	pop	{r4, pc}
        snprintf(buf, sizeof buf, base3k, idx);
    8cb6:	4623      	mov	r3, r4
    8cb8:	aa04      	add	r2, sp, #16
    8cba:	210c      	movs	r1, #12
    8cbc:	a801      	add	r0, sp, #4
    8cbe:	f008 f924 	bl	10f0a <snprintf>
        odev = os_dev_lookup(buf);
    8cc2:	a801      	add	r0, sp, #4
    8cc4:	f000 fd58 	bl	9778 <os_dev_lookup>
    return (struct uwb_dev*)odev;
    8cc8:	e7f3      	b.n	8cb2 <uwb_dev_idx_lookup+0x3e>
    8cca:	bf00      	nop
    8ccc:	0002630c 	.word	0x0002630c
    8cd0:	00026318 	.word	0x00026318

00008cd4 <uwb_mac_append_interface>:
{
    8cd4:	b508      	push	{r3, lr}
    assert(dev);
    8cd6:	b148      	cbz	r0, 8cec <uwb_mac_append_interface+0x18>
    assert(cbs);
    8cd8:	b171      	cbz	r1, 8cf8 <uwb_mac_append_interface+0x24>
    cbs->status.initialized = true;
    8cda:	780b      	ldrb	r3, [r1, #0]
    8cdc:	f043 0301 	orr.w	r3, r3, #1
    8ce0:	700b      	strb	r3, [r1, #0]
    if(!(SLIST_EMPTY(&dev->interface_cbs))) {
    8ce2:	f8d0 3530 	ldr.w	r3, [r0, #1328]	; 0x530
    8ce6:	b1b3      	cbz	r3, 8d16 <uwb_mac_append_interface+0x42>
        struct uwb_mac_interface * prev_cbs = NULL;
    8ce8:	2200      	movs	r2, #0
    8cea:	e00d      	b.n	8d08 <uwb_mac_append_interface+0x34>
    assert(dev);
    8cec:	2300      	movs	r3, #0
    8cee:	461a      	mov	r2, r3
    8cf0:	4619      	mov	r1, r3
    8cf2:	4618      	mov	r0, r3
    8cf4:	f000 fa66 	bl	91c4 <__assert_func>
    assert(cbs);
    8cf8:	2300      	movs	r3, #0
    8cfa:	461a      	mov	r2, r3
    8cfc:	4619      	mov	r1, r3
    8cfe:	4618      	mov	r0, r3
    8d00:	f000 fa60 	bl	91c4 <__assert_func>
            prev_cbs = cur_cbs;
    8d04:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cbs, &dev->interface_cbs, next){
    8d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d1fb      	bne.n	8d04 <uwb_mac_append_interface+0x30>
        SLIST_INSERT_AFTER(prev_cbs, cbs, next);
    8d0c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8d0e:	638b      	str	r3, [r1, #56]	; 0x38
    8d10:	6391      	str	r1, [r2, #56]	; 0x38
}
    8d12:	4608      	mov	r0, r1
    8d14:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&dev->interface_cbs, cbs, next);
    8d16:	638b      	str	r3, [r1, #56]	; 0x38
    8d18:	f8c0 1530 	str.w	r1, [r0, #1328]	; 0x530
    8d1c:	e7f9      	b.n	8d12 <uwb_mac_append_interface+0x3e>

00008d1e <uwb_mac_remove_interface>:
{
    8d1e:	b508      	push	{r3, lr}
    assert(dev);
    8d20:	b148      	cbz	r0, 8d36 <uwb_mac_remove_interface+0x18>
    8d22:	4684      	mov	ip, r0
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d24:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8d28:	4603      	mov	r3, r0
    8d2a:	b193      	cbz	r3, 8d52 <uwb_mac_remove_interface+0x34>
        if(cbs->id == id){
    8d2c:	885a      	ldrh	r2, [r3, #2]
    8d2e:	428a      	cmp	r2, r1
    8d30:	d007      	beq.n	8d42 <uwb_mac_remove_interface+0x24>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8d34:	e7f9      	b.n	8d2a <uwb_mac_remove_interface+0xc>
    assert(dev);
    8d36:	2300      	movs	r3, #0
    8d38:	461a      	mov	r2, r3
    8d3a:	4619      	mov	r1, r3
    8d3c:	4618      	mov	r0, r3
    8d3e:	f000 fa41 	bl	91c4 <__assert_func>
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8d42:	4283      	cmp	r3, r0
    8d44:	d006      	beq.n	8d54 <uwb_mac_remove_interface+0x36>
    8d46:	4602      	mov	r2, r0
    8d48:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8d4a:	4298      	cmp	r0, r3
    8d4c:	d1fb      	bne.n	8d46 <uwb_mac_remove_interface+0x28>
    8d4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8d50:	6393      	str	r3, [r2, #56]	; 0x38
}
    8d52:	bd08      	pop	{r3, pc}
            SLIST_REMOVE(&dev->interface_cbs, cbs, uwb_mac_interface, next);
    8d54:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8d56:	f8cc 3530 	str.w	r3, [ip, #1328]	; 0x530
    8d5a:	e7fa      	b.n	8d52 <uwb_mac_remove_interface+0x34>

00008d5c <uwb_mac_get_interface>:
{
    8d5c:	b508      	push	{r3, lr}
    assert(dev);
    8d5e:	b138      	cbz	r0, 8d70 <uwb_mac_get_interface+0x14>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d60:	f8d0 0530 	ldr.w	r0, [r0, #1328]	; 0x530
    8d64:	b150      	cbz	r0, 8d7c <uwb_mac_get_interface+0x20>
        if(cbs->id == id){
    8d66:	8843      	ldrh	r3, [r0, #2]
    8d68:	428b      	cmp	r3, r1
    8d6a:	d007      	beq.n	8d7c <uwb_mac_get_interface+0x20>
    SLIST_FOREACH(cbs, &dev->interface_cbs, next){
    8d6c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    8d6e:	e7f9      	b.n	8d64 <uwb_mac_get_interface+0x8>
    assert(dev);
    8d70:	2300      	movs	r3, #0
    8d72:	461a      	mov	r2, r3
    8d74:	4619      	mov	r1, r3
    8d76:	4618      	mov	r0, r3
    8d78:	f000 fa24 	bl	91c4 <__assert_func>
}
    8d7c:	bd08      	pop	{r3, pc}

00008d7e <uwb_mac_find_cb_inst_ptr>:
{
    8d7e:	b508      	push	{r3, lr}
    struct uwb_mac_interface * cbs = uwb_mac_get_interface(dev, id);
    8d80:	f7ff ffec 	bl	8d5c <uwb_mac_get_interface>
    if (cbs) {
    8d84:	4603      	mov	r3, r0
    8d86:	b100      	cbz	r0, 8d8a <uwb_mac_find_cb_inst_ptr+0xc>
        return cbs->inst_ptr;
    8d88:	6843      	ldr	r3, [r0, #4]
}
    8d8a:	4618      	mov	r0, r3
    8d8c:	bd08      	pop	{r3, pc}
	...

00008d90 <uwb_task_init>:
 *
 * @return void
 */
void
uwb_task_init(struct uwb_dev * inst, void (*irq_ev_cb)(struct dpl_event*))
{
    8d90:	b570      	push	{r4, r5, r6, lr}
    8d92:	b084      	sub	sp, #16
    8d94:	4604      	mov	r4, r0
    8d96:	460d      	mov	r5, r1
    int rc;
    /* Check if the task is already initiated */
    if (!dpl_eventq_inited(&inst->eventq))
    8d98:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    return os_eventq_inited((struct os_eventq *) evq);
    8d9c:	4630      	mov	r0, r6
    8d9e:	f000 fd40 	bl	9822 <os_eventq_inited>
    8da2:	b108      	cbz	r0, 8da8 <uwb_task_init+0x18>
                      inst->task_prio, DPL_WAIT_FOREVER,
                      inst->task_stack,
                      MYNEWT_VAL(UWB_DEV_TASK_STACK_SZ));
#endif
    }
}
    8da4:	b004      	add	sp, #16
    8da6:	bd70      	pop	{r4, r5, r6, pc}
    os_eventq_init((struct os_eventq *) evq);
    8da8:	4630      	mov	r0, r6
    8daa:	f000 fd31 	bl	9810 <os_eventq_init>
    memset(ev, 0, sizeof(*ev));
    8dae:	2300      	movs	r3, #0
    8db0:	64e3      	str	r3, [r4, #76]	; 0x4c
    8db2:	6523      	str	r3, [r4, #80]	; 0x50
    8db4:	6563      	str	r3, [r4, #84]	; 0x54
    8db6:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_cb = (os_event_fn *)fn;
    8db8:	6525      	str	r5, [r4, #80]	; 0x50
    ev->ev.ev_arg = arg;
    8dba:	6564      	str	r4, [r4, #84]	; 0x54
}

static inline dpl_error_t
dpl_sem_init(struct dpl_sem *sem, uint16_t tokens)
{
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    8dbc:	2101      	movs	r1, #1
    8dbe:	f104 0034 	add.w	r0, r4, #52	; 0x34
    8dc2:	f001 f94b 	bl	a05c <os_sem_init>
        assert(rc == DPL_OK);
    8dc6:	b998      	cbnz	r0, 8df0 <uwb_task_init+0x60>
        dpl_task_init(&inst->task_str, "uwb_irq",
    8dc8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
                      inst->task_stack,
    8dcc:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
static inline int dpl_task_init(struct dpl_task *t, const char *name, dpl_task_func_t func,
		 void *arg, uint8_t prio, dpl_time_t sanity_itvl,
		 os_stack_t * stack_bottom, uint16_t stack_size)
{

    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    8dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
    8dd4:	9103      	str	r1, [sp, #12]
    8dd6:	9202      	str	r2, [sp, #8]
    8dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8ddc:	9201      	str	r2, [sp, #4]
    8dde:	9300      	str	r3, [sp, #0]
    8de0:	4623      	mov	r3, r4
    8de2:	4a06      	ldr	r2, [pc, #24]	; (8dfc <uwb_task_init+0x6c>)
    8de4:	4906      	ldr	r1, [pc, #24]	; (8e00 <uwb_task_init+0x70>)
    8de6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8dea:	f001 f9d7 	bl	a19c <os_task_init>
}
    8dee:	e7d9      	b.n	8da4 <uwb_task_init+0x14>
        assert(rc == DPL_OK);
    8df0:	2300      	movs	r3, #0
    8df2:	461a      	mov	r2, r3
    8df4:	4619      	mov	r1, r3
    8df6:	4618      	mov	r0, r3
    8df8:	f000 f9e4 	bl	91c4 <__assert_func>
    8dfc:	00008c65 	.word	0x00008c65
    8e00:	00026324 	.word	0x00026324

00008e04 <uwb_task_deinit>:

void
uwb_task_deinit(struct uwb_dev * inst)
{
    8e04:	b510      	push	{r4, lr}
    8e06:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
    8e08:	303c      	adds	r0, #60	; 0x3c
    8e0a:	f000 fd0a 	bl	9822 <os_eventq_inited>
    if (dpl_eventq_inited(&inst->eventq))
    8e0e:	b900      	cbnz	r0, 8e12 <uwb_task_deinit+0xe>
    {
        dpl_task_remove(&inst->task_str);
        dpl_eventq_deinit(&inst->eventq);
    }
}
    8e10:	bd10      	pop	{r4, pc}
        (os_stack_t *) stack_bottom, stack_size) ;
}

static inline int dpl_task_remove(struct dpl_task * t)
{
    return os_task_remove((struct os_task * ) t);
    8e12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    8e16:	f001 fa2d 	bl	a274 <os_task_remove>
    8e1a:	e7f9      	b.n	8e10 <uwb_task_deinit+0xc>

00008e1c <uwb_dev_init>:

void
uwb_dev_init(struct uwb_dev * inst)
{
    8e1c:	b510      	push	{r4, lr}
    8e1e:	4604      	mov	r4, r0
    if (!inst->txbuf) {
    8e20:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    8e24:	b11b      	cbz	r3, 8e2e <uwb_dev_init+0x12>
#else
        inst->txbuf = malloc(inst->txbuf_size);
        assert(inst->txbuf);
#endif
    }
    if (!inst->rxbuf) {
    8e26:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    8e2a:	b173      	cbz	r3, 8e4a <uwb_dev_init+0x2e>
#else
        inst->rxbuf = malloc(inst->rxbuf_size);
        assert(inst->rxbuf);
#endif
    }
}
    8e2c:	bd10      	pop	{r4, pc}
        inst->txbuf = malloc(inst->txbuf_size);
    8e2e:	f8b0 0506 	ldrh.w	r0, [r0, #1286]	; 0x506
    8e32:	f007 fba5 	bl	10580 <malloc>
    8e36:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        assert(inst->txbuf);
    8e3a:	2800      	cmp	r0, #0
    8e3c:	d1f3      	bne.n	8e26 <uwb_dev_init+0xa>
    8e3e:	2300      	movs	r3, #0
    8e40:	461a      	mov	r2, r3
    8e42:	4619      	mov	r1, r3
    8e44:	4618      	mov	r0, r3
    8e46:	f000 f9bd 	bl	91c4 <__assert_func>
        inst->rxbuf = malloc(inst->rxbuf_size);
    8e4a:	f8b4 0504 	ldrh.w	r0, [r4, #1284]	; 0x504
    8e4e:	f007 fb97 	bl	10580 <malloc>
    8e52:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
        assert(inst->rxbuf);
    8e56:	2800      	cmp	r0, #0
    8e58:	d1e8      	bne.n	8e2c <uwb_dev_init+0x10>
    8e5a:	2300      	movs	r3, #0
    8e5c:	461a      	mov	r2, r3
    8e5e:	4619      	mov	r1, r3
    8e60:	4618      	mov	r0, r3
    8e62:	f000 f9af 	bl	91c4 <__assert_func>
	...

00008e68 <uwb_calc_aoa>:
 *
 * returns angle of arrival - float, in radians
 */
dpl_float32_t
uwb_calc_aoa(dpl_float32_t pdoa, int channel, dpl_float32_t antenna_separation)
{
    8e68:	b508      	push	{r3, lr}
    8e6a:	ed2d 8b02 	vpush	{d8}
    8e6e:	ee10 3a10 	vmov	r3, s0
    8e72:	eeb0 8a60 	vmov.f32	s16, s1
    dpl_float32_t pd_dist, wavelength;
    dpl_float32_t frequency = DPL_FLOAT32_INIT(0);
    switch(channel) {
    8e76:	3801      	subs	r0, #1
    8e78:	2808      	cmp	r0, #8
    8e7a:	d839      	bhi.n	8ef0 <uwb_calc_aoa+0x88>
    8e7c:	e8df f000 	tbb	[pc, r0]
    8e80:	2c05413e 	.word	0x2c05413e
    8e84:	3832382f 	.word	0x3832382f
    8e88:	35          	.byte	0x35
    8e89:	00          	.byte	0x00
    case (1): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_1);break;
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    case (3): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_3);break;
    8e8a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8f10 <uwb_calc_aoa+0xa8>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    default: assert(0); break;
    }
    wavelength = DPL_FLOAT32_DIV(DPL_FLOAT32_INIT(SPEED_OF_LIGHT), frequency);
    8e8e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8f14 <uwb_calc_aoa+0xac>
    8e92:	eec7 8a87 	vdiv.f32	s17, s15, s14
    pd_dist = DPL_FLOAT32_DIV(pdoa, DPL_FLOAT32_INIT(2.0f*M_PI));
    8e96:	4618      	mov	r0, r3
    8e98:	f01b fbb6 	bl	24608 <__aeabi_f2d>
    8e9c:	a31a      	add	r3, pc, #104	; (adr r3, 8f08 <uwb_calc_aoa+0xa0>)
    8e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ea2:	f01b fd33 	bl	2490c <__aeabi_ddiv>
    8ea6:	f01b feff 	bl	24ca8 <__aeabi_d2f>
    8eaa:	ee07 0a90 	vmov	s15, r0
    pd_dist = DPL_FLOAT32_MUL(pd_dist, wavelength);
    8eae:	ee68 8aa7 	vmul.f32	s17, s17, s15
    return DPL_FLOAT32_FROM_F64(
    8eb2:	eec8 7a88 	vdiv.f32	s15, s17, s16
    8eb6:	ee17 0a90 	vmov	r0, s15
    8eba:	f01b fba5 	bl	24608 <__aeabi_f2d>
    8ebe:	ec41 0b10 	vmov	d0, r0, r1
    8ec2:	f01c fac7 	bl	25454 <asin>
    8ec6:	ec51 0b10 	vmov	r0, r1, d0
    8eca:	f01b feed 	bl	24ca8 <__aeabi_d2f>
        DPL_FLOAT64_ASIN(DPL_FLOAT64_FROM_F32(
                         DPL_FLOAT32_DIV(pd_dist, antenna_separation)
                         )
            )
        );
}
    8ece:	ee00 0a10 	vmov	s0, r0
    8ed2:	ecbd 8b02 	vpop	{d8}
    8ed6:	bd08      	pop	{r3, pc}
    case (4): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_4);break;
    8ed8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8f10 <uwb_calc_aoa+0xa8>
    8edc:	e7d7      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (5): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_5);break;
    8ede:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8f18 <uwb_calc_aoa+0xb0>
    8ee2:	e7d4      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (7): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_7);break;
    8ee4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8f18 <uwb_calc_aoa+0xb0>
    8ee8:	e7d1      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (9): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_9);break;
    8eea:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8f1c <uwb_calc_aoa+0xb4>
    8eee:	e7ce      	b.n	8e8e <uwb_calc_aoa+0x26>
    default: assert(0); break;
    8ef0:	2300      	movs	r3, #0
    8ef2:	461a      	mov	r2, r3
    8ef4:	4619      	mov	r1, r3
    8ef6:	4618      	mov	r0, r3
    8ef8:	f000 f964 	bl	91c4 <__assert_func>
    switch(channel) {
    8efc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8f20 <uwb_calc_aoa+0xb8>
    8f00:	e7c5      	b.n	8e8e <uwb_calc_aoa+0x26>
    case (2): frequency = DPL_FLOAT32_INIT(UWB_CH_FREQ_CHAN_2);break;
    8f02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8f24 <uwb_calc_aoa+0xbc>
    8f06:	e7c2      	b.n	8e8e <uwb_calc_aoa+0x26>
    8f08:	54442d18 	.word	0x54442d18
    8f0c:	401921fb 	.word	0x401921fb
    8f10:	4f85e558 	.word	0x4f85e558
    8f14:	4d8ef3c2 	.word	0x4d8ef3c2
    8f18:	4fc167b8 	.word	0x4fc167b8
    8f1c:	4fee0980 	.word	0x4fee0980
    8f20:	4f504850 	.word	0x4f504850
    8f24:	4f6e0980 	.word	0x4f6e0980

00008f28 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
    8f28:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8f2a:	2400      	movs	r4, #0
    8f2c:	e000      	b.n	8f30 <hal_gpio_irq_handler+0x8>
    8f2e:	3401      	adds	r4, #1
    8f30:	2c07      	cmp	r4, #7
    8f32:	dc1c      	bgt.n	8f6e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
    8f34:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8f38:	4a0d      	ldr	r2, [pc, #52]	; (8f70 <hal_gpio_irq_handler+0x48>)
    8f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f3e:	2b00      	cmp	r3, #0
    8f40:	d0f5      	beq.n	8f2e <hal_gpio_irq_handler+0x6>
    8f42:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    8f46:	2301      	movs	r3, #1
    8f48:	40a3      	lsls	r3, r4
    8f4a:	421a      	tst	r2, r3
    8f4c:	d0ef      	beq.n	8f2e <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
    8f4e:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8f52:	4a07      	ldr	r2, [pc, #28]	; (8f70 <hal_gpio_irq_handler+0x48>)
    8f54:	2100      	movs	r1, #0
    8f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
    8f5a:	4b06      	ldr	r3, [pc, #24]	; (8f74 <hal_gpio_irq_handler+0x4c>)
    8f5c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
    8f60:	2a00      	cmp	r2, #0
    8f62:	d0e4      	beq.n	8f2e <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
    8f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    8f68:	6858      	ldr	r0, [r3, #4]
    8f6a:	4790      	blx	r2
    8f6c:	e7df      	b.n	8f2e <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
    8f6e:	bd10      	pop	{r4, pc}
    8f70:	40006000 	.word	0x40006000
    8f74:	2000178c 	.word	0x2000178c

00008f78 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
    8f78:	4b06      	ldr	r3, [pc, #24]	; (8f94 <hal_gpio_irq_setup+0x1c>)
    8f7a:	781b      	ldrb	r3, [r3, #0]
    8f7c:	b94b      	cbnz	r3, 8f92 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    8f7e:	4b06      	ldr	r3, [pc, #24]	; (8f98 <hal_gpio_irq_setup+0x20>)
    8f80:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    8f82:	4a06      	ldr	r2, [pc, #24]	; (8f9c <hal_gpio_irq_setup+0x24>)
    8f84:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8f86:	4b06      	ldr	r3, [pc, #24]	; (8fa0 <hal_gpio_irq_setup+0x28>)
    8f88:	2240      	movs	r2, #64	; 0x40
    8f8a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
    8f8c:	4b01      	ldr	r3, [pc, #4]	; (8f94 <hal_gpio_irq_setup+0x1c>)
    8f8e:	2201      	movs	r2, #1
    8f90:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
    8f92:	4770      	bx	lr
    8f94:	200017cc 	.word	0x200017cc
    8f98:	e000ed00 	.word	0xe000ed00
    8f9c:	00008f29 	.word	0x00008f29
    8fa0:	e000e100 	.word	0xe000e100

00008fa4 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8fa4:	2000      	movs	r0, #0
    8fa6:	2807      	cmp	r0, #7
    8fa8:	dc05      	bgt.n	8fb6 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
    8faa:	4b04      	ldr	r3, [pc, #16]	; (8fbc <hal_gpio_find_empty_slot+0x18>)
    8fac:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8fb0:	b11b      	cbz	r3, 8fba <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8fb2:	3001      	adds	r0, #1
    8fb4:	e7f7      	b.n	8fa6 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
    8fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8fba:	4770      	bx	lr
    8fbc:	2000178c 	.word	0x2000178c

00008fc0 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
    8fc0:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
    8fc2:	2000      	movs	r0, #0
    8fc4:	e000      	b.n	8fc8 <hal_gpio_find_pin+0x8>
    8fc6:	3001      	adds	r0, #1
    8fc8:	2807      	cmp	r0, #7
    8fca:	dc0e      	bgt.n	8fea <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
    8fcc:	4b08      	ldr	r3, [pc, #32]	; (8ff0 <hal_gpio_find_pin+0x30>)
    8fce:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d0f7      	beq.n	8fc6 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
    8fd6:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    8fda:	4a06      	ldr	r2, [pc, #24]	; (8ff4 <hal_gpio_find_pin+0x34>)
    8fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fe0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
    8fe4:	428b      	cmp	r3, r1
    8fe6:	d1ee      	bne.n	8fc6 <hal_gpio_find_pin+0x6>
    8fe8:	e001      	b.n	8fee <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
    8fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8fee:	4770      	bx	lr
    8ff0:	2000178c 	.word	0x2000178c
    8ff4:	40006000 	.word	0x40006000

00008ff8 <hal_gpio_init_in>:
    switch (pull) {
    8ff8:	2901      	cmp	r1, #1
    8ffa:	d00f      	beq.n	901c <hal_gpio_init_in+0x24>
    8ffc:	2902      	cmp	r1, #2
    8ffe:	d10f      	bne.n	9020 <hal_gpio_init_in+0x28>
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
    9000:	2304      	movs	r3, #4
    port->PIN_CNF[pin_index] = conf;
    9002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9006:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    900a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
    900e:	2301      	movs	r3, #1
    9010:	fa03 f000 	lsl.w	r0, r3, r0
    9014:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
    9018:	2000      	movs	r0, #0
    901a:	4770      	bx	lr
    switch (pull) {
    901c:	230c      	movs	r3, #12
    901e:	e7f0      	b.n	9002 <hal_gpio_init_in+0xa>
        conf = 0;
    9020:	2300      	movs	r3, #0
    9022:	e7ee      	b.n	9002 <hal_gpio_init_in+0xa>

00009024 <hal_gpio_init_out>:
    if (val) {
    9024:	b199      	cbz	r1, 904e <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    9026:	2301      	movs	r3, #1
    9028:	4083      	lsls	r3, r0
    902a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    902e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    9032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9036:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
    903a:	2103      	movs	r1, #3
    903c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
    9040:	2301      	movs	r3, #1
    9042:	fa03 f000 	lsl.w	r0, r3, r0
    9046:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
    904a:	2000      	movs	r0, #0
    904c:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    904e:	2301      	movs	r3, #1
    9050:	4083      	lsls	r3, r0
    9052:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9056:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    905a:	e7ea      	b.n	9032 <hal_gpio_init_out+0xe>

0000905c <hal_gpio_write>:
    if (val) {
    905c:	b139      	cbz	r1, 906e <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    905e:	2301      	movs	r3, #1
    9060:	fa03 f000 	lsl.w	r0, r3, r0
    9064:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9068:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    906c:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
    906e:	2301      	movs	r3, #1
    9070:	fa03 f000 	lsl.w	r0, r3, r0
    9074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9078:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    907c:	4770      	bx	lr

0000907e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    907e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9082:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
    9086:	2301      	movs	r3, #1
    9088:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    908a:	421a      	tst	r2, r3
    908c:	d008      	beq.n	90a0 <hal_gpio_read+0x22>
    908e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9092:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    9096:	fa23 f000 	lsr.w	r0, r3, r0
    909a:	f000 0001 	and.w	r0, r0, #1
    909e:	4770      	bx	lr
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    90a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    90a4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    90a8:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    90ac:	f000 0001 	and.w	r0, r0, #1
}
    90b0:	4770      	bx	lr

000090b2 <hal_gpio_toggle>:
{
    90b2:	b538      	push	{r3, r4, r5, lr}
    90b4:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    90b6:	f7ff ffe2 	bl	907e <hal_gpio_read>
    90ba:	fab0 f480 	clz	r4, r0
    90be:	0964      	lsrs	r4, r4, #5
    hal_gpio_write(pin, pin_state);
    90c0:	4621      	mov	r1, r4
    90c2:	4628      	mov	r0, r5
    90c4:	f7ff ffca 	bl	905c <hal_gpio_write>
}
    90c8:	4620      	mov	r0, r4
    90ca:	bd38      	pop	{r3, r4, r5, pc}

000090cc <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
    90cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90d0:	4606      	mov	r6, r0
    90d2:	4688      	mov	r8, r1
    90d4:	4617      	mov	r7, r2
    90d6:	461d      	mov	r5, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
    90d8:	f7ff ff4e 	bl	8f78 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
    90dc:	f7ff ff62 	bl	8fa4 <hal_gpio_find_empty_slot>
    if (i < 0) {
    90e0:	1e04      	subs	r4, r0, #0
    90e2:	db27      	blt.n	9134 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
    90e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
    90e8:	4630      	mov	r0, r6
    90ea:	f7ff ff85 	bl	8ff8 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
    90ee:	2d02      	cmp	r5, #2
    90f0:	d01a      	beq.n	9128 <hal_gpio_irq_init+0x5c>
    90f2:	2d03      	cmp	r5, #3
    90f4:	d01b      	beq.n	912e <hal_gpio_irq_init+0x62>
    90f6:	2d01      	cmp	r5, #1
    90f8:	d002      	beq.n	9100 <hal_gpio_irq_init+0x34>
    90fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    90fe:	e011      	b.n	9124 <hal_gpio_irq_init+0x58>
    9100:	f44f 3080 	mov.w	r0, #65536	; 0x10000
        break;
    default:
        return -1;
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
    9104:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
    9108:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
    910c:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    9110:	4b0a      	ldr	r3, [pc, #40]	; (913c <hal_gpio_irq_init+0x70>)
    9112:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
    9116:	480a      	ldr	r0, [pc, #40]	; (9140 <hal_gpio_irq_init+0x74>)
    9118:	f840 8034 	str.w	r8, [r0, r4, lsl #3]
    hal_gpio_irqs[i].arg = arg;
    911c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    9120:	6047      	str	r7, [r0, #4]

    return 0;
    9122:	2000      	movs	r0, #0
}
    9124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
    9128:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    912c:	e7ea      	b.n	9104 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
    912e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
    9132:	e7e7      	b.n	9104 <hal_gpio_irq_init+0x38>
        return -1;
    9134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9138:	e7f4      	b.n	9124 <hal_gpio_irq_init+0x58>
    913a:	bf00      	nop
    913c:	40006000 	.word	0x40006000
    9140:	2000178c 	.word	0x2000178c

00009144 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
    9144:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    9146:	f7ff ff3b 	bl	8fc0 <hal_gpio_find_pin>
    if (i < 0) {
    914a:	2800      	cmp	r0, #0
    914c:	db0a      	blt.n	9164 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    914e:	4a06      	ldr	r2, [pc, #24]	; (9168 <hal_gpio_irq_enable+0x24>)
    9150:	f100 0340 	add.w	r3, r0, #64	; 0x40
    9154:	2100      	movs	r1, #0
    9156:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
    915a:	2301      	movs	r3, #1
    915c:	fa03 f000 	lsl.w	r0, r3, r0
    9160:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
    9164:	bd08      	pop	{r3, pc}
    9166:	bf00      	nop
    9168:	40006000 	.word	0x40006000

0000916c <hal_gpio_irq_disable>:
 *
 * @param pin
 */
void
hal_gpio_irq_disable(int pin)
{
    916c:	b508      	push	{r3, lr}
    int pin_index;
    bool sense_enabled = false;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
    916e:	f7ff ff27 	bl	8fc0 <hal_gpio_find_pin>
    if (i < 0) {
    9172:	2800      	cmp	r0, #0
    9174:	db05      	blt.n	9182 <hal_gpio_irq_disable+0x16>

    if (!sense_enabled) {
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
    }
#else
    NRF_GPIOTE->INTENCLR = 1 << i;
    9176:	2301      	movs	r3, #1
    9178:	fa03 f000 	lsl.w	r0, r3, r0
    917c:	4b01      	ldr	r3, [pc, #4]	; (9184 <hal_gpio_irq_disable+0x18>)
    917e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
#endif
}
    9182:	bd08      	pop	{r3, pc}
    9184:	40006000 	.word	0x40006000

00009188 <hal_gpio_irq_release>:
{
    9188:	b538      	push	{r3, r4, r5, lr}
    918a:	4605      	mov	r5, r0
    i = hal_gpio_find_pin(pin);
    918c:	f7ff ff18 	bl	8fc0 <hal_gpio_find_pin>
    if (i < 0) {
    9190:	1e04      	subs	r4, r0, #0
    9192:	db12      	blt.n	91ba <hal_gpio_irq_release+0x32>
    hal_gpio_irq_disable(pin);
    9194:	4628      	mov	r0, r5
    9196:	f7ff ffe9 	bl	916c <hal_gpio_irq_disable>
    NRF_GPIOTE->CONFIG[i] = 0;
    919a:	4a08      	ldr	r2, [pc, #32]	; (91bc <hal_gpio_irq_release+0x34>)
    919c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    91a0:	2300      	movs	r3, #0
    91a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    NRF_GPIOTE->EVENTS_IN[i] = 0;
    91a6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    91aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    hal_gpio_irqs[i].arg = NULL;
    91ae:	4a04      	ldr	r2, [pc, #16]	; (91c0 <hal_gpio_irq_release+0x38>)
    91b0:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    91b4:	604b      	str	r3, [r1, #4]
    hal_gpio_irqs[i].func = NULL;
    91b6:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
}
    91ba:	bd38      	pop	{r3, r4, r5, pc}
    91bc:	40006000 	.word	0x40006000
    91c0:	2000178c 	.word	0x2000178c

000091c4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    91c4:	b508      	push	{r3, lr}
    91c6:	4675      	mov	r5, lr
    91c8:	4604      	mov	r4, r0
    91ca:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    91cc:	f001 fa46 	bl	a65c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    91d0:	f00a fb5e 	bl	13890 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    91d4:	b18c      	cbz	r4, 91fa <__assert_func+0x36>
    91d6:	4633      	mov	r3, r6
    91d8:	4622      	mov	r2, r4
    91da:	4629      	mov	r1, r5
    91dc:	4809      	ldr	r0, [pc, #36]	; (9204 <__assert_func+0x40>)
    91de:	f00a fe15 	bl	13e0c <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
    91e2:	f7fe ffed 	bl	81c0 <hal_debugger_connected>
    91e6:	b100      	cbz	r0, 91ea <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
    91e8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    91ea:	4b07      	ldr	r3, [pc, #28]	; (9208 <__assert_func+0x44>)
    91ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    91f0:	605a      	str	r2, [r3, #4]
    asm("isb");
    91f2:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    91f6:	f7fe ffeb 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    91fa:	4629      	mov	r1, r5
    91fc:	4803      	ldr	r0, [pc, #12]	; (920c <__assert_func+0x48>)
    91fe:	f00a fe05 	bl	13e0c <console_printf>
    9202:	e7ee      	b.n	91e2 <__assert_func+0x1e>
    9204:	0002633c 	.word	0x0002633c
    9208:	e000ed00 	.word	0xe000ed00
    920c:	0002632c 	.word	0x0002632c

00009210 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    9210:	b500      	push	{lr}
    9212:	b083      	sub	sp, #12
    9214:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    9216:	f00a fb3b 	bl	13890 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    921a:	4d1b      	ldr	r5, [pc, #108]	; (9288 <os_default_irq+0x78>)
    921c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    921e:	6822      	ldr	r2, [r4, #0]
    9220:	f3c1 0108 	ubfx	r1, r1, #0, #9
    9224:	4819      	ldr	r0, [pc, #100]	; (928c <os_default_irq+0x7c>)
    9226:	f00a fdf1 	bl	13e0c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    922a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    922c:	6883      	ldr	r3, [r0, #8]
    922e:	6842      	ldr	r2, [r0, #4]
    9230:	6801      	ldr	r1, [r0, #0]
    9232:	68c0      	ldr	r0, [r0, #12]
    9234:	9000      	str	r0, [sp, #0]
    9236:	4816      	ldr	r0, [pc, #88]	; (9290 <os_default_irq+0x80>)
    9238:	f00a fde8 	bl	13e0c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    923c:	6923      	ldr	r3, [r4, #16]
    923e:	9300      	str	r3, [sp, #0]
    9240:	68e3      	ldr	r3, [r4, #12]
    9242:	68a2      	ldr	r2, [r4, #8]
    9244:	6861      	ldr	r1, [r4, #4]
    9246:	4813      	ldr	r0, [pc, #76]	; (9294 <os_default_irq+0x84>)
    9248:	f00a fde0 	bl	13e0c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    924c:	6a23      	ldr	r3, [r4, #32]
    924e:	9300      	str	r3, [sp, #0]
    9250:	69e3      	ldr	r3, [r4, #28]
    9252:	69a2      	ldr	r2, [r4, #24]
    9254:	6961      	ldr	r1, [r4, #20]
    9256:	4810      	ldr	r0, [pc, #64]	; (9298 <os_default_irq+0x88>)
    9258:	f00a fdd8 	bl	13e0c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    925c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    925e:	6983      	ldr	r3, [r0, #24]
    9260:	6942      	ldr	r2, [r0, #20]
    9262:	6901      	ldr	r1, [r0, #16]
    9264:	69c0      	ldr	r0, [r0, #28]
    9266:	9000      	str	r0, [sp, #0]
    9268:	480c      	ldr	r0, [pc, #48]	; (929c <os_default_irq+0x8c>)
    926a:	f00a fdcf 	bl	13e0c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    926e:	6869      	ldr	r1, [r5, #4]
    9270:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    9272:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9274:	480a      	ldr	r0, [pc, #40]	; (92a0 <os_default_irq+0x90>)
    9276:	f00a fdc9 	bl	13e0c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    927a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    927c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    927e:	4809      	ldr	r0, [pc, #36]	; (92a4 <os_default_irq+0x94>)
    9280:	f00a fdc4 	bl	13e0c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    9284:	f7fe ffa4 	bl	81d0 <hal_system_reset>
    9288:	e000ed00 	.word	0xe000ed00
    928c:	00026354 	.word	0x00026354
    9290:	00026388 	.word	0x00026388
    9294:	000263bc 	.word	0x000263bc
    9298:	000263f0 	.word	0x000263f0
    929c:	00026424 	.word	0x00026424
    92a0:	00026458 	.word	0x00026458
    92a4:	00026480 	.word	0x00026480

000092a8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
    92aa:	f015 ffb3 	bl	1f214 <hal_watchdog_tickle>
    sanity_last = 0;
    92ae:	2600      	movs	r6, #0
    92b0:	e00b      	b.n	92ca <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    92b2:	f000 fd17 	bl	9ce4 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    92b6:	f015 ffad 	bl	1f214 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
    92ba:	4626      	mov	r6, r4
    92bc:	e011      	b.n	92e2 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    92be:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    92c0:	f015 f996 	bl	1e5f0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    92c4:	4628      	mov	r0, r5
    92c6:	f001 f9cf 	bl	a668 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    92ca:	4a14      	ldr	r2, [pc, #80]	; (931c <os_idle_task+0x74>)
    92cc:	6813      	ldr	r3, [r2, #0]
    92ce:	3301      	adds	r3, #1
    92d0:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    92d2:	f001 f89d 	bl	a410 <os_time_get>
    92d6:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
    92d8:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    92dc:	1ac3      	subs	r3, r0, r3
    92de:	2b00      	cmp	r3, #0
    92e0:	dce7      	bgt.n	92b2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    92e2:	f001 f9bb 	bl	a65c <os_arch_save_sr>
    92e6:	4605      	mov	r5, r0
        now = os_time_get();
    92e8:	f001 f892 	bl	a410 <os_time_get>
    92ec:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    92ee:	f000 fe67 	bl	9fc0 <os_sched_wakeup_ticks>
    92f2:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    92f4:	4638      	mov	r0, r7
    92f6:	f000 f981 	bl	95fc <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    92fa:	4284      	cmp	r4, r0
    92fc:	bf28      	it	cs
    92fe:	4604      	movcs	r4, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
    9300:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    9304:	1bd8      	subs	r0, r3, r7
    9306:	42a0      	cmp	r0, r4
    9308:	bf28      	it	cs
    930a:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    930c:	280b      	cmp	r0, #11
    930e:	d9d6      	bls.n	92be <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
    9310:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    9314:	d9d4      	bls.n	92c0 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
    9316:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    931a:	e7d1      	b.n	92c0 <os_idle_task+0x18>
    931c:	20001920 	.word	0x20001920

00009320 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    9320:	b508      	push	{r3, lr}
    9322:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    9324:	2100      	movs	r1, #0
    9326:	4608      	mov	r0, r1
    9328:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    932a:	2300      	movs	r3, #0
    932c:	461a      	mov	r2, r3
    932e:	4619      	mov	r1, r3
    9330:	4618      	mov	r0, r3
    9332:	f7ff ff47 	bl	91c4 <__assert_func>
	...

00009338 <os_started>:
}
    9338:	4b01      	ldr	r3, [pc, #4]	; (9340 <os_started+0x8>)
    933a:	6818      	ldr	r0, [r3, #0]
    933c:	4770      	bx	lr
    933e:	bf00      	nop
    9340:	20002978 	.word	0x20002978

00009344 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    9344:	b500      	push	{lr}
    9346:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    9348:	2340      	movs	r3, #64	; 0x40
    934a:	9303      	str	r3, [sp, #12]
    934c:	4b15      	ldr	r3, [pc, #84]	; (93a4 <os_init_idle_task+0x60>)
    934e:	9302      	str	r3, [sp, #8]
    9350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9354:	9301      	str	r3, [sp, #4]
    9356:	23ff      	movs	r3, #255	; 0xff
    9358:	9300      	str	r3, [sp, #0]
    935a:	2300      	movs	r3, #0
    935c:	4a12      	ldr	r2, [pc, #72]	; (93a8 <os_init_idle_task+0x64>)
    935e:	4913      	ldr	r1, [pc, #76]	; (93ac <os_init_idle_task+0x68>)
    9360:	4813      	ldr	r0, [pc, #76]	; (93b0 <os_init_idle_task+0x6c>)
    9362:	f000 ff1b 	bl	a19c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    9366:	b950      	cbnz	r0, 937e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    9368:	f000 fcf2 	bl	9d50 <os_sanity_init>
    assert(rc == 0);
    936c:	b968      	cbnz	r0, 938a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    936e:	f247 5030 	movw	r0, #30000	; 0x7530
    9372:	f015 ff0b 	bl	1f18c <hal_watchdog_init>
    assert(rc == 0);
    9376:	b970      	cbnz	r0, 9396 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
    9378:	b005      	add	sp, #20
    937a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    937e:	2300      	movs	r3, #0
    9380:	461a      	mov	r2, r3
    9382:	4619      	mov	r1, r3
    9384:	4618      	mov	r0, r3
    9386:	f7ff ff1d 	bl	91c4 <__assert_func>
    assert(rc == 0);
    938a:	2300      	movs	r3, #0
    938c:	461a      	mov	r2, r3
    938e:	4619      	mov	r1, r3
    9390:	4618      	mov	r0, r3
    9392:	f7ff ff17 	bl	91c4 <__assert_func>
    assert(rc == 0);
    9396:	2300      	movs	r3, #0
    9398:	461a      	mov	r2, r3
    939a:	4619      	mov	r1, r3
    939c:	4618      	mov	r0, r3
    939e:	f7ff ff11 	bl	91c4 <__assert_func>
    93a2:	bf00      	nop
    93a4:	20001820 	.word	0x20001820
    93a8:	000092a9 	.word	0x000092a9
    93ac:	0002649c 	.word	0x0002649c
    93b0:	200017d0 	.word	0x200017d0

000093b4 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    93b4:	b510      	push	{r4, lr}
    93b6:	b084      	sub	sp, #16
    93b8:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    93ba:	4b26      	ldr	r3, [pc, #152]	; (9454 <os_init+0xa0>)
    93bc:	2200      	movs	r2, #0
    93be:	601a      	str	r2, [r3, #0]
    93c0:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    93c2:	4b25      	ldr	r3, [pc, #148]	; (9458 <os_init+0xa4>)
    93c4:	601a      	str	r2, [r3, #0]
    93c6:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    93c8:	f000 fade 	bl	9988 <os_eventq_dflt_get>
    93cc:	f000 fa20 	bl	9810 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    93d0:	f000 fa06 	bl	97e0 <os_dev_reset>

    err = os_arch_os_init();
    93d4:	f001 f97c 	bl	a6d0 <os_arch_os_init>
    assert(err == OS_OK);
    93d8:	bb18      	cbnz	r0, 9422 <os_init+0x6e>

    if (main_fn) {
    93da:	b194      	cbz	r4, 9402 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    93dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    93e0:	9303      	str	r3, [sp, #12]
    93e2:	4b1e      	ldr	r3, [pc, #120]	; (945c <os_init+0xa8>)
    93e4:	9302      	str	r3, [sp, #8]
    93e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    93ea:	9301      	str	r3, [sp, #4]
    93ec:	237f      	movs	r3, #127	; 0x7f
    93ee:	9300      	str	r3, [sp, #0]
    93f0:	4623      	mov	r3, r4
    93f2:	4a1b      	ldr	r2, [pc, #108]	; (9460 <os_init+0xac>)
    93f4:	491b      	ldr	r1, [pc, #108]	; (9464 <os_init+0xb0>)
    93f6:	481c      	ldr	r0, [pc, #112]	; (9468 <os_init+0xb4>)
    93f8:	f000 fed0 	bl	a19c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    93fc:	f010 0fff 	tst.w	r0, #255	; 0xff
    9400:	d115      	bne.n	942e <os_init+0x7a>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9402:	f010 f859 	bl	194b8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    9406:	2001      	movs	r0, #1
    9408:	f000 f9a0 	bl	974c <os_dev_initialize_all>
    assert(err == OS_OK);
    940c:	f010 0fff 	tst.w	r0, #255	; 0xff
    9410:	d113      	bne.n	943a <os_init+0x86>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    9412:	2002      	movs	r0, #2
    9414:	f000 f99a 	bl	974c <os_dev_initialize_all>
    assert(err == OS_OK);
    9418:	f010 0fff 	tst.w	r0, #255	; 0xff
    941c:	d113      	bne.n	9446 <os_init+0x92>
}
    941e:	b004      	add	sp, #16
    9420:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    9422:	2300      	movs	r3, #0
    9424:	461a      	mov	r2, r3
    9426:	4619      	mov	r1, r3
    9428:	4618      	mov	r0, r3
    942a:	f7ff fecb 	bl	91c4 <__assert_func>
        assert(err == 0);
    942e:	2300      	movs	r3, #0
    9430:	461a      	mov	r2, r3
    9432:	4619      	mov	r1, r3
    9434:	4618      	mov	r0, r3
    9436:	f7ff fec5 	bl	91c4 <__assert_func>
    assert(err == OS_OK);
    943a:	2300      	movs	r3, #0
    943c:	461a      	mov	r2, r3
    943e:	4619      	mov	r1, r3
    9440:	4618      	mov	r0, r3
    9442:	f7ff febf 	bl	91c4 <__assert_func>
    assert(err == OS_OK);
    9446:	2300      	movs	r3, #0
    9448:	461a      	mov	r2, r3
    944a:	4619      	mov	r1, r3
    944c:	4618      	mov	r0, r3
    944e:	f7ff feb9 	bl	91c4 <__assert_func>
    9452:	bf00      	nop
    9454:	2000297c 	.word	0x2000297c
    9458:	20003794 	.word	0x20003794
    945c:	20001928 	.word	0x20001928
    9460:	00009321 	.word	0x00009321
    9464:	000264a4 	.word	0x000264a4
    9468:	20002928 	.word	0x20002928

0000946c <os_start>:

void
os_start(void)
{
    946c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    946e:	f015 fec9 	bl	1f204 <hal_watchdog_enable>

    err = os_arch_os_start();
    9472:	f001 f995 	bl	a7a0 <os_arch_os_start>
    assert(err == OS_OK);
    9476:	b900      	cbnz	r0, 947a <os_start+0xe>
#else
    assert(0);
#endif
}
    9478:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    947a:	2300      	movs	r3, #0
    947c:	461a      	mov	r2, r3
    947e:	4619      	mov	r1, r3
    9480:	4618      	mov	r0, r3
    9482:	f7ff fe9f 	bl	91c4 <__assert_func>

00009486 <os_reboot>:

void
os_reboot(int reason)
{
    9486:	b508      	push	{r3, lr}
    sysdown(reason);
    9488:	f00c ff82 	bl	16390 <sysdown>
}
    948c:	bd08      	pop	{r3, pc}

0000948e <os_system_reset>:

void
os_system_reset(void)
{
    948e:	b508      	push	{r3, lr}
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
    9490:	f015 fec0 	bl	1f214 <hal_watchdog_tickle>
    hal_system_reset();
    9494:	f7fe fe9c 	bl	81d0 <hal_system_reset>

00009498 <os_pkg_init>:
}

void
os_pkg_init(void)
{
    9498:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    949a:	4b0c      	ldr	r3, [pc, #48]	; (94cc <os_pkg_init+0x34>)
    949c:	781b      	ldrb	r3, [r3, #0]
    949e:	b153      	cbz	r3, 94b6 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    94a0:	2003      	movs	r0, #3
    94a2:	f000 f953 	bl	974c <os_dev_initialize_all>
    assert(err == OS_OK);
    94a6:	f010 0fff 	tst.w	r0, #255	; 0xff
    94aa:	d109      	bne.n	94c0 <os_pkg_init+0x28>

    os_mempool_module_init();
    94ac:	f000 fb0e 	bl	9acc <os_mempool_module_init>
    os_msys_init();
    94b0:	f000 fbb0 	bl	9c14 <os_msys_init>
}
    94b4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    94b6:	461a      	mov	r2, r3
    94b8:	4619      	mov	r1, r3
    94ba:	4618      	mov	r0, r3
    94bc:	f7ff fe82 	bl	91c4 <__assert_func>
    assert(err == OS_OK);
    94c0:	2300      	movs	r3, #0
    94c2:	461a      	mov	r2, r3
    94c4:	4619      	mov	r1, r3
    94c6:	4618      	mov	r0, r3
    94c8:	f7ff fe7c 	bl	91c4 <__assert_func>
    94cc:	2000538c 	.word	0x2000538c

000094d0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    94d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94d2:	4604      	mov	r4, r0
    94d4:	460d      	mov	r5, r1
    94d6:	4617      	mov	r7, r2
    94d8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    94da:	2220      	movs	r2, #32
    94dc:	2100      	movs	r1, #0
    94de:	f007 f8cc 	bl	1067a <memset>
    c->c_ev.ev_cb = ev_cb;
    94e2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    94e4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    94e6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    94e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000094ec <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    94ec:	b538      	push	{r3, r4, r5, lr}
    94ee:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    94f0:	f001 f8b4 	bl	a65c <os_arch_save_sr>
    94f4:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    94f6:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    94f8:	b13b      	cbz	r3, 950a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    94fa:	69a2      	ldr	r2, [r4, #24]
    94fc:	b172      	cbz	r2, 951c <os_callout_stop+0x30>
    94fe:	61d3      	str	r3, [r2, #28]
    9500:	69e3      	ldr	r3, [r4, #28]
    9502:	69a2      	ldr	r2, [r4, #24]
    9504:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    9506:	2300      	movs	r3, #0
    9508:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    950a:	6920      	ldr	r0, [r4, #16]
    950c:	b110      	cbz	r0, 9514 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    950e:	4621      	mov	r1, r4
    9510:	f000 fa18 	bl	9944 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    9514:	4628      	mov	r0, r5
    9516:	f001 f8a7 	bl	a668 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    951a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    951c:	4a01      	ldr	r2, [pc, #4]	; (9524 <os_callout_stop+0x38>)
    951e:	6053      	str	r3, [r2, #4]
    9520:	e7ee      	b.n	9500 <os_callout_stop+0x14>
    9522:	bf00      	nop
    9524:	2000297c 	.word	0x2000297c

00009528 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    9528:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    952a:	6903      	ldr	r3, [r0, #16]
    952c:	b193      	cbz	r3, 9554 <os_callout_reset+0x2c>
    952e:	4604      	mov	r4, r0
    9530:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    9532:	2900      	cmp	r1, #0
    9534:	db2f      	blt.n	9596 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    9536:	f001 f891 	bl	a65c <os_arch_save_sr>
    953a:	4605      	mov	r5, r0

    os_callout_stop(c);
    953c:	4620      	mov	r0, r4
    953e:	f7ff ffd5 	bl	94ec <os_callout_stop>

    if (ticks == 0) {
    9542:	b906      	cbnz	r6, 9546 <os_callout_reset+0x1e>
        ticks = 1;
    9544:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    9546:	f000 ff63 	bl	a410 <os_time_get>
    954a:	4430      	add	r0, r6
    954c:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    954e:	4b13      	ldr	r3, [pc, #76]	; (959c <os_callout_reset+0x74>)
    9550:	681b      	ldr	r3, [r3, #0]
    9552:	e005      	b.n	9560 <os_callout_reset+0x38>
    assert(c->c_evq != NULL);
    9554:	461a      	mov	r2, r3
    9556:	4619      	mov	r1, r3
    9558:	4618      	mov	r0, r3
    955a:	f7ff fe33 	bl	91c4 <__assert_func>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    955e:	699b      	ldr	r3, [r3, #24]
    9560:	b11b      	cbz	r3, 956a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    9562:	695a      	ldr	r2, [r3, #20]
    9564:	1a82      	subs	r2, r0, r2
    9566:	2a00      	cmp	r2, #0
    9568:	daf9      	bge.n	955e <os_callout_reset+0x36>
            break;
        }
    }

    if (entry) {
    956a:	b15b      	cbz	r3, 9584 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    956c:	69da      	ldr	r2, [r3, #28]
    956e:	61e2      	str	r2, [r4, #28]
    9570:	61a3      	str	r3, [r4, #24]
    9572:	69da      	ldr	r2, [r3, #28]
    9574:	6014      	str	r4, [r2, #0]
    9576:	3418      	adds	r4, #24
    9578:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    957a:	4628      	mov	r0, r5
    957c:	f001 f874 	bl	a668 <os_arch_restore_sr>

    ret = OS_OK;
    9580:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    9582:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    9584:	2300      	movs	r3, #0
    9586:	61a3      	str	r3, [r4, #24]
    9588:	4b04      	ldr	r3, [pc, #16]	; (959c <os_callout_reset+0x74>)
    958a:	685a      	ldr	r2, [r3, #4]
    958c:	61e2      	str	r2, [r4, #28]
    958e:	6014      	str	r4, [r2, #0]
    9590:	3418      	adds	r4, #24
    9592:	605c      	str	r4, [r3, #4]
    9594:	e7f1      	b.n	957a <os_callout_reset+0x52>
        ret = OS_EINVAL;
    9596:	2002      	movs	r0, #2
    return ret;
    9598:	e7f3      	b.n	9582 <os_callout_reset+0x5a>
    959a:	bf00      	nop
    959c:	2000297c 	.word	0x2000297c

000095a0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    95a0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    95a2:	f000 ff35 	bl	a410 <os_time_get>
    95a6:	4605      	mov	r5, r0
    95a8:	e00f      	b.n	95ca <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    95aa:	69e2      	ldr	r2, [r4, #28]
    95ac:	4b12      	ldr	r3, [pc, #72]	; (95f8 <os_callout_tick+0x58>)
    95ae:	605a      	str	r2, [r3, #4]
    95b0:	69e3      	ldr	r3, [r4, #28]
    95b2:	69a2      	ldr	r2, [r4, #24]
    95b4:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    95b6:	2300      	movs	r3, #0
    95b8:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    95ba:	f001 f855 	bl	a668 <os_arch_restore_sr>

        if (c) {
    95be:	b1d4      	cbz	r4, 95f6 <os_callout_tick+0x56>
            if (c->c_evq) {
    95c0:	6920      	ldr	r0, [r4, #16]
    95c2:	b1a0      	cbz	r0, 95ee <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    95c4:	4621      	mov	r1, r4
    95c6:	f000 f931 	bl	982c <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    95ca:	f001 f847 	bl	a65c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    95ce:	4b0a      	ldr	r3, [pc, #40]	; (95f8 <os_callout_tick+0x58>)
    95d0:	681c      	ldr	r4, [r3, #0]
        if (c) {
    95d2:	2c00      	cmp	r4, #0
    95d4:	d0f1      	beq.n	95ba <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    95d6:	6963      	ldr	r3, [r4, #20]
    95d8:	1aeb      	subs	r3, r5, r3
    95da:	2b00      	cmp	r3, #0
    95dc:	db05      	blt.n	95ea <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    95de:	69a3      	ldr	r3, [r4, #24]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d0e2      	beq.n	95aa <os_callout_tick+0xa>
    95e4:	69e2      	ldr	r2, [r4, #28]
    95e6:	61da      	str	r2, [r3, #28]
    95e8:	e7e2      	b.n	95b0 <os_callout_tick+0x10>
                c = NULL;
    95ea:	2400      	movs	r4, #0
    95ec:	e7e5      	b.n	95ba <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    95ee:	6863      	ldr	r3, [r4, #4]
    95f0:	4620      	mov	r0, r4
    95f2:	4798      	blx	r3
    95f4:	e7e9      	b.n	95ca <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    95f6:	bd38      	pop	{r3, r4, r5, pc}
    95f8:	2000297c 	.word	0x2000297c

000095fc <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    95fc:	b510      	push	{r4, lr}
    95fe:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    9600:	f001 f835 	bl	a66e <os_arch_in_critical>
    9604:	b130      	cbz	r0, 9614 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    9606:	4b09      	ldr	r3, [pc, #36]	; (962c <os_callout_wakeup_ticks+0x30>)
    9608:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    960a:	b15b      	cbz	r3, 9624 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    960c:	6958      	ldr	r0, [r3, #20]
    960e:	1b00      	subs	r0, r0, r4
    9610:	d406      	bmi.n	9620 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    9612:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9614:	2300      	movs	r3, #0
    9616:	461a      	mov	r2, r3
    9618:	4619      	mov	r1, r3
    961a:	4618      	mov	r0, r3
    961c:	f7ff fdd2 	bl	91c4 <__assert_func>
            rt = 0;     /* callout time is in the past */
    9620:	2000      	movs	r0, #0
    9622:	e7f6      	b.n	9612 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    9624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9628:	e7f3      	b.n	9612 <os_callout_wakeup_ticks+0x16>
    962a:	bf00      	nop
    962c:	2000297c 	.word	0x2000297c

00009630 <os_callout_remaining_ticks>:


os_time_t
os_callout_remaining_ticks(struct os_callout *c, os_time_t now)
{
    9630:	b538      	push	{r3, r4, r5, lr}
    9632:	4605      	mov	r5, r0
    9634:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t rt;

    OS_ENTER_CRITICAL(sr);
    9636:	f001 f811 	bl	a65c <os_arch_save_sr>

    if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    963a:	696b      	ldr	r3, [r5, #20]
    963c:	1b1c      	subs	r4, r3, r4
    963e:	d403      	bmi.n	9648 <os_callout_remaining_ticks+0x18>
        rt = c->c_ticks - now;
    } else {
        rt = 0;     /* callout time is in the past */
    }

    OS_EXIT_CRITICAL(sr);
    9640:	f001 f812 	bl	a668 <os_arch_restore_sr>

    return rt;
}
    9644:	4620      	mov	r0, r4
    9646:	bd38      	pop	{r3, r4, r5, pc}
        rt = 0;     /* callout time is in the past */
    9648:	2400      	movs	r4, #0
    964a:	e7f9      	b.n	9640 <os_callout_remaining_ticks+0x10>

0000964c <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    964c:	b508      	push	{r3, lr}
    964e:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    9650:	2000      	movs	r0, #0
    9652:	f015 fc5f 	bl	1ef14 <hal_timer_config>
    return rc;
}
    9656:	bd08      	pop	{r3, pc}

00009658 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    9658:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    965a:	2000      	movs	r0, #0
    965c:	f015 fcd8 	bl	1f010 <hal_timer_read>
    return cpu_time;
}
    9660:	bd08      	pop	{r3, pc}
	...

00009664 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    9664:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    9666:	4b15      	ldr	r3, [pc, #84]	; (96bc <os_dev_add+0x58>)
    9668:	681d      	ldr	r5, [r3, #0]
    966a:	b115      	cbz	r5, 9672 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    966c:	462b      	mov	r3, r5
    prev_dev = NULL;
    966e:	2400      	movs	r4, #0
    9670:	e008      	b.n	9684 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9672:	4603      	mov	r3, r0
    9674:	f843 5f20 	str.w	r5, [r3, #32]!
    9678:	4a10      	ldr	r2, [pc, #64]	; (96bc <os_dev_add+0x58>)
    967a:	6053      	str	r3, [r2, #4]
    967c:	6010      	str	r0, [r2, #0]
        return (0);
    967e:	e010      	b.n	96a2 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    9680:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9682:	6a1b      	ldr	r3, [r3, #32]
    9684:	b143      	cbz	r3, 9698 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    9686:	7e01      	ldrb	r1, [r0, #24]
    9688:	7e1a      	ldrb	r2, [r3, #24]
    968a:	4291      	cmp	r1, r2
    968c:	d304      	bcc.n	9698 <os_dev_add+0x34>
    968e:	d1f7      	bne.n	9680 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    9690:	7e41      	ldrb	r1, [r0, #25]
    9692:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    9694:	4291      	cmp	r1, r2
    9696:	d2f3      	bcs.n	9680 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    9698:	b15c      	cbz	r4, 96b2 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    969a:	6a23      	ldr	r3, [r4, #32]
    969c:	6203      	str	r3, [r0, #32]
    969e:	b11b      	cbz	r3, 96a8 <os_dev_add+0x44>
    96a0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    96a2:	2000      	movs	r0, #0
    96a4:	bc30      	pop	{r4, r5}
    96a6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    96a8:	f100 0320 	add.w	r3, r0, #32
    96ac:	4a03      	ldr	r2, [pc, #12]	; (96bc <os_dev_add+0x58>)
    96ae:	6053      	str	r3, [r2, #4]
    96b0:	e7f6      	b.n	96a0 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    96b2:	6205      	str	r5, [r0, #32]
    96b4:	4b01      	ldr	r3, [pc, #4]	; (96bc <os_dev_add+0x58>)
    96b6:	6018      	str	r0, [r3, #0]
    96b8:	e7f3      	b.n	96a2 <os_dev_add+0x3e>
    96ba:	bf00      	nop
    96bc:	20002984 	.word	0x20002984

000096c0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    96c0:	b510      	push	{r4, lr}
    96c2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    96c4:	6903      	ldr	r3, [r0, #16]
    96c6:	6941      	ldr	r1, [r0, #20]
    96c8:	4798      	blx	r3
    if (rc != 0) {
    96ca:	b128      	cbz	r0, 96d8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    96cc:	7ee3      	ldrb	r3, [r4, #27]
    96ce:	f013 0f08 	tst.w	r3, #8
    96d2:	d105      	bne.n	96e0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    96d4:	2000      	movs	r0, #0
    96d6:	e003      	b.n	96e0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    96d8:	7ee3      	ldrb	r3, [r4, #27]
    96da:	f043 0301 	orr.w	r3, r3, #1
    96de:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    96e0:	bd10      	pop	{r4, pc}

000096e2 <os_dev_init>:
{
    96e2:	4684      	mov	ip, r0
    dev->od_name = name;
    96e4:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    96e6:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    96e8:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    96ea:	2000      	movs	r0, #0
    96ec:	f88c 001b 	strb.w	r0, [ip, #27]
    dev->od_open_ref = 0;
    96f0:	f88c 001a 	strb.w	r0, [ip, #26]
    dev->od_init = od_init;
    96f4:	9b00      	ldr	r3, [sp, #0]
    96f6:	f8cc 3010 	str.w	r3, [ip, #16]
    dev->od_init_arg = arg;
    96fa:	9b01      	ldr	r3, [sp, #4]
    96fc:	f8cc 3014 	str.w	r3, [ip, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    9700:	f8cc 0000 	str.w	r0, [ip]
    9704:	f8cc 0004 	str.w	r0, [ip, #4]
    9708:	f8cc 0008 	str.w	r0, [ip, #8]
    970c:	f8cc 000c 	str.w	r0, [ip, #12]
}
    9710:	4770      	bx	lr
	...

00009714 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    9714:	b530      	push	{r4, r5, lr}
    9716:	b083      	sub	sp, #12
    9718:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    971a:	9d07      	ldr	r5, [sp, #28]
    971c:	9501      	str	r5, [sp, #4]
    971e:	9d06      	ldr	r5, [sp, #24]
    9720:	9500      	str	r5, [sp, #0]
    9722:	f7ff ffde 	bl	96e2 <os_dev_init>
    if (rc != 0) {
    9726:	b108      	cbz	r0, 972c <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    9728:	b003      	add	sp, #12
    972a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    972c:	4620      	mov	r0, r4
    972e:	f7ff ff99 	bl	9664 <os_dev_add>
    if (rc != 0) {
    9732:	2800      	cmp	r0, #0
    9734:	d1f8      	bne.n	9728 <os_dev_create+0x14>
    if (g_os_started) {
    9736:	4b04      	ldr	r3, [pc, #16]	; (9748 <os_dev_create+0x34>)
    9738:	681b      	ldr	r3, [r3, #0]
    973a:	2b00      	cmp	r3, #0
    973c:	d0f4      	beq.n	9728 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    973e:	4620      	mov	r0, r4
    9740:	f7ff ffbe 	bl	96c0 <os_dev_initialize>
    return (rc);
    9744:	e7f0      	b.n	9728 <os_dev_create+0x14>
    9746:	bf00      	nop
    9748:	20002978 	.word	0x20002978

0000974c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    974c:	b538      	push	{r3, r4, r5, lr}
    974e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9750:	4b08      	ldr	r3, [pc, #32]	; (9774 <os_dev_initialize_all+0x28>)
    9752:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    9754:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9756:	e000      	b.n	975a <os_dev_initialize_all+0xe>
    9758:	6a24      	ldr	r4, [r4, #32]
    975a:	b144      	cbz	r4, 976e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    975c:	7e23      	ldrb	r3, [r4, #24]
    975e:	42ab      	cmp	r3, r5
    9760:	d1fa      	bne.n	9758 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    9762:	4620      	mov	r0, r4
    9764:	f7ff ffac 	bl	96c0 <os_dev_initialize>
            if (rc) {
    9768:	4602      	mov	r2, r0
    976a:	2800      	cmp	r0, #0
    976c:	d0f4      	beq.n	9758 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    976e:	4610      	mov	r0, r2
    9770:	bd38      	pop	{r3, r4, r5, pc}
    9772:	bf00      	nop
    9774:	20002984 	.word	0x20002984

00009778 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    9778:	b538      	push	{r3, r4, r5, lr}
    977a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    977c:	4b06      	ldr	r3, [pc, #24]	; (9798 <os_dev_lookup+0x20>)
    977e:	681c      	ldr	r4, [r3, #0]
    9780:	e000      	b.n	9784 <os_dev_lookup+0xc>
    9782:	6a24      	ldr	r4, [r4, #32]
    9784:	b12c      	cbz	r4, 9792 <os_dev_lookup+0x1a>
        if (!strcmp(dev->od_name, name)) {
    9786:	4629      	mov	r1, r5
    9788:	69e0      	ldr	r0, [r4, #28]
    978a:	f006 ffa1 	bl	106d0 <strcmp>
    978e:	2800      	cmp	r0, #0
    9790:	d1f7      	bne.n	9782 <os_dev_lookup+0xa>
            break;
        }
    }
    return (dev);
}
    9792:	4620      	mov	r0, r4
    9794:	bd38      	pop	{r3, r4, r5, pc}
    9796:	bf00      	nop
    9798:	20002984 	.word	0x20002984

0000979c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    979c:	b570      	push	{r4, r5, r6, lr}
    979e:	460d      	mov	r5, r1
    97a0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    97a2:	f7ff ffe9 	bl	9778 <os_dev_lookup>
    if (dev == NULL) {
    97a6:	4604      	mov	r4, r0
    97a8:	b1a0      	cbz	r0, 97d4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    97aa:	7ec3      	ldrb	r3, [r0, #27]
    97ac:	f013 0f01 	tst.w	r3, #1
    97b0:	d012      	beq.n	97d8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    97b2:	6803      	ldr	r3, [r0, #0]
    97b4:	b11b      	cbz	r3, 97be <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    97b6:	4632      	mov	r2, r6
    97b8:	4629      	mov	r1, r5
    97ba:	4798      	blx	r3
        if (rc != 0) {
    97bc:	b970      	cbnz	r0, 97dc <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    97be:	f000 ff4d 	bl	a65c <os_arch_save_sr>
    ++dev->od_open_ref;
    97c2:	7ea3      	ldrb	r3, [r4, #26]
    97c4:	3301      	adds	r3, #1
    97c6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    97c8:	7ee3      	ldrb	r3, [r4, #27]
    97ca:	f043 0302 	orr.w	r3, r3, #2
    97ce:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    97d0:	f000 ff4a 	bl	a668 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    97d4:	4620      	mov	r0, r4
    97d6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    97d8:	2400      	movs	r4, #0
    97da:	e7fb      	b.n	97d4 <os_dev_open+0x38>
    return (NULL);
    97dc:	2400      	movs	r4, #0
    97de:	e7f9      	b.n	97d4 <os_dev_open+0x38>

000097e0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    97e0:	4b02      	ldr	r3, [pc, #8]	; (97ec <os_dev_reset+0xc>)
    97e2:	2200      	movs	r2, #0
    97e4:	601a      	str	r2, [r3, #0]
    97e6:	605b      	str	r3, [r3, #4]
}
    97e8:	4770      	bx	lr
    97ea:	bf00      	nop
    97ec:	20002984 	.word	0x20002984

000097f0 <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
    97f0:	b570      	push	{r4, r5, r6, lr}
    97f2:	4606      	mov	r6, r0
    97f4:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    97f6:	4b05      	ldr	r3, [pc, #20]	; (980c <os_dev_walk+0x1c>)
    97f8:	681c      	ldr	r4, [r3, #0]
    97fa:	e000      	b.n	97fe <os_dev_walk+0xe>
    97fc:	6a24      	ldr	r4, [r4, #32]
    97fe:	b124      	cbz	r4, 980a <os_dev_walk+0x1a>
        if (walk_func(dev, arg)) {
    9800:	4629      	mov	r1, r5
    9802:	4620      	mov	r0, r4
    9804:	47b0      	blx	r6
    9806:	2800      	cmp	r0, #0
    9808:	d0f8      	beq.n	97fc <os_dev_walk+0xc>
            break;
        }
    }
}
    980a:	bd70      	pop	{r4, r5, r6, pc}
    980c:	20002984 	.word	0x20002984

00009810 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    9810:	2300      	movs	r3, #0
    9812:	6003      	str	r3, [r0, #0]
    9814:	6043      	str	r3, [r0, #4]
    9816:	6083      	str	r3, [r0, #8]
    9818:	60c3      	str	r3, [r0, #12]
    STAILQ_INIT(&evq->evq_list);
    981a:	f100 0308 	add.w	r3, r0, #8
    981e:	60c3      	str	r3, [r0, #12]
}
    9820:	4770      	bx	lr

00009822 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    9822:	68c0      	ldr	r0, [r0, #12]
}
    9824:	3800      	subs	r0, #0
    9826:	bf18      	it	ne
    9828:	2001      	movne	r0, #1
    982a:	4770      	bx	lr

0000982c <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    982c:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    982e:	b1f0      	cbz	r0, 986e <os_eventq_put+0x42>
    9830:	460c      	mov	r4, r1
    9832:	4606      	mov	r6, r0
    9834:	f7ff fff5 	bl	9822 <os_eventq_inited>
    9838:	b1c8      	cbz	r0, 986e <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    983a:	f000 ff0f 	bl	a65c <os_arch_save_sr>
    983e:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    9840:	7823      	ldrb	r3, [r4, #0]
    9842:	b9d3      	cbnz	r3, 987a <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    9844:	2301      	movs	r3, #1
    9846:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    9848:	2300      	movs	r3, #0
    984a:	60e3      	str	r3, [r4, #12]
    984c:	68f3      	ldr	r3, [r6, #12]
    984e:	601c      	str	r4, [r3, #0]
    9850:	340c      	adds	r4, #12
    9852:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    9854:	6870      	ldr	r0, [r6, #4]
    9856:	b1b8      	cbz	r0, 9888 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    9858:	7b03      	ldrb	r3, [r0, #12]
    985a:	2b02      	cmp	r3, #2
    985c:	d010      	beq.n	9880 <os_eventq_put+0x54>
    resched = 0;
    985e:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    9860:	2300      	movs	r3, #0
    9862:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    9864:	4628      	mov	r0, r5
    9866:	f000 feff 	bl	a668 <os_arch_restore_sr>

    if (resched) {
    986a:	b97c      	cbnz	r4, 988c <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    986c:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    986e:	2300      	movs	r3, #0
    9870:	461a      	mov	r2, r3
    9872:	4619      	mov	r1, r3
    9874:	4618      	mov	r0, r3
    9876:	f7ff fca5 	bl	91c4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    987a:	f000 fef5 	bl	a668 <os_arch_restore_sr>
        return;
    987e:	e7f5      	b.n	986c <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    9880:	f000 fb46 	bl	9f10 <os_sched_wakeup>
            resched = 1;
    9884:	2401      	movs	r4, #1
    9886:	e7eb      	b.n	9860 <os_eventq_put+0x34>
    resched = 0;
    9888:	2400      	movs	r4, #0
    988a:	e7eb      	b.n	9864 <os_eventq_put+0x38>
        os_sched(NULL);
    988c:	2000      	movs	r0, #0
    988e:	f000 fbbd 	bl	a00c <os_sched>
    9892:	e7eb      	b.n	986c <os_eventq_put+0x40>

00009894 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    9894:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    9896:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    9898:	b120      	cbz	r0, 98a4 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    989a:	68c2      	ldr	r2, [r0, #12]
    989c:	609a      	str	r2, [r3, #8]
    989e:	b112      	cbz	r2, 98a6 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    98a0:	2300      	movs	r3, #0
    98a2:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    98a4:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    98a6:	f103 0208 	add.w	r2, r3, #8
    98aa:	60da      	str	r2, [r3, #12]
    98ac:	e7f8      	b.n	98a0 <os_eventq_get_no_wait+0xc>

000098ae <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    98ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98b0:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    98b2:	f000 fa97 	bl	9de4 <os_sched_get_current_task>
    98b6:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    98b8:	6833      	ldr	r3, [r6, #0]
    98ba:	4283      	cmp	r3, r0
    98bc:	d001      	beq.n	98c2 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    98be:	b923      	cbnz	r3, 98ca <os_eventq_get+0x1c>
            evq->evq_owner = t;
    98c0:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    98c2:	f000 fecb 	bl	a65c <os_arch_save_sr>
    98c6:	4605      	mov	r5, r0
    98c8:	e01e      	b.n	9908 <os_eventq_get+0x5a>
            assert(0);
    98ca:	2300      	movs	r3, #0
    98cc:	461a      	mov	r2, r3
    98ce:	4619      	mov	r1, r3
    98d0:	4618      	mov	r0, r3
    98d2:	f7ff fc77 	bl	91c4 <__assert_func>
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    if (ev) {
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    98d6:	f106 0308 	add.w	r3, r6, #8
    98da:	60f3      	str	r3, [r6, #12]
    98dc:	e01b      	b.n	9916 <os_eventq_get+0x68>
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    98de:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    98e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    98e4:	4620      	mov	r0, r4
    98e6:	f000 fa89 	bl	9dfc <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    98ea:	7b63      	ldrb	r3, [r4, #13]
    98ec:	f043 0308 	orr.w	r3, r3, #8
    98f0:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    98f2:	4628      	mov	r0, r5
    98f4:	f000 feb8 	bl	a668 <os_arch_restore_sr>

        os_sched(NULL);
    98f8:	2000      	movs	r0, #0
    98fa:	f000 fb87 	bl	a00c <os_sched>

        OS_ENTER_CRITICAL(sr);
    98fe:	f000 fead 	bl	a65c <os_arch_save_sr>
    9902:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    9904:	2300      	movs	r3, #0
    9906:	6073      	str	r3, [r6, #4]
    ev = STAILQ_FIRST(&evq->evq_list);
    9908:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    990a:	2f00      	cmp	r7, #0
    990c:	d0e7      	beq.n	98de <os_eventq_get+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    990e:	68fb      	ldr	r3, [r7, #12]
    9910:	60b3      	str	r3, [r6, #8]
    9912:	2b00      	cmp	r3, #0
    9914:	d0df      	beq.n	98d6 <os_eventq_get+0x28>
        ev->ev_queued = 0;
    9916:	2300      	movs	r3, #0
    9918:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    991a:	7b63      	ldrb	r3, [r4, #13]
    991c:	f023 0308 	bic.w	r3, r3, #8
    9920:	7363      	strb	r3, [r4, #13]
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
    9922:	4628      	mov	r0, r5
    9924:	f000 fea0 	bl	a668 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    9928:	4638      	mov	r0, r7
    992a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000992c <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    992c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    992e:	f7ff ffbe 	bl	98ae <os_eventq_get>
    assert(ev->ev_cb != NULL);
    9932:	6843      	ldr	r3, [r0, #4]
    9934:	b10b      	cbz	r3, 993a <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    9936:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    9938:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    993a:	461a      	mov	r2, r3
    993c:	4619      	mov	r1, r3
    993e:	4618      	mov	r0, r3
    9940:	f7ff fc40 	bl	91c4 <__assert_func>

00009944 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    9944:	b538      	push	{r3, r4, r5, lr}
    9946:	4605      	mov	r5, r0
    9948:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    994a:	f000 fe87 	bl	a65c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    994e:	7823      	ldrb	r3, [r4, #0]
    9950:	b14b      	cbz	r3, 9966 <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9952:	68ab      	ldr	r3, [r5, #8]
    9954:	42a3      	cmp	r3, r4
    9956:	d00b      	beq.n	9970 <os_eventq_remove+0x2c>
    9958:	461a      	mov	r2, r3
    995a:	68db      	ldr	r3, [r3, #12]
    995c:	42a3      	cmp	r3, r4
    995e:	d1fb      	bne.n	9958 <os_eventq_remove+0x14>
    9960:	68db      	ldr	r3, [r3, #12]
    9962:	60d3      	str	r3, [r2, #12]
    9964:	b163      	cbz	r3, 9980 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    9966:	2300      	movs	r3, #0
    9968:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    996a:	f000 fe7d 	bl	a668 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    996e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    9970:	68db      	ldr	r3, [r3, #12]
    9972:	60ab      	str	r3, [r5, #8]
    9974:	2b00      	cmp	r3, #0
    9976:	d1f6      	bne.n	9966 <os_eventq_remove+0x22>
    9978:	f105 0308 	add.w	r3, r5, #8
    997c:	60eb      	str	r3, [r5, #12]
    997e:	e7f2      	b.n	9966 <os_eventq_remove+0x22>
    9980:	320c      	adds	r2, #12
    9982:	60ea      	str	r2, [r5, #12]
    9984:	e7ef      	b.n	9966 <os_eventq_remove+0x22>
	...

00009988 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    9988:	4800      	ldr	r0, [pc, #0]	; (998c <os_eventq_dflt_get+0x4>)
    998a:	4770      	bx	lr
    998c:	2000298c 	.word	0x2000298c

00009990 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    9990:	2800      	cmp	r0, #0
    9992:	d031      	beq.n	99f8 <os_mempool_init_internal+0x68>
{
    9994:	b430      	push	{r4, r5}
    9996:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    9998:	2a00      	cmp	r2, #0
    999a:	d02f      	beq.n	99fc <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    999c:	b1bb      	cbz	r3, 99ce <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    999e:	b113      	cbz	r3, 99a6 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    99a0:	f013 0f03 	tst.w	r3, #3
    99a4:	d12c      	bne.n	9a00 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    99a6:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    99a8:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    99aa:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    99ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
    99b0:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    99b2:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    99b4:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    99b6:	9802      	ldr	r0, [sp, #8]
    99b8:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    99ba:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    99bc:	b199      	cbz	r1, 99e6 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    99be:	f012 0f03 	tst.w	r2, #3
    99c2:	d002      	beq.n	99ca <os_mempool_init_internal+0x3a>
    99c4:	f022 0203 	bic.w	r2, r2, #3
    99c8:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    99ca:	2001      	movs	r0, #1
    99cc:	e007      	b.n	99de <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    99ce:	2900      	cmp	r1, #0
    99d0:	d0e5      	beq.n	999e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    99d2:	2003      	movs	r0, #3
    99d4:	e00e      	b.n	99f4 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    99d6:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    99d8:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    99da:	3001      	adds	r0, #1
            block_addr += true_block_size;
    99dc:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    99de:	4281      	cmp	r1, r0
    99e0:	dcf9      	bgt.n	99d6 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    99e2:	2200      	movs	r2, #0
    99e4:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    99e6:	2000      	movs	r0, #0
    99e8:	6120      	str	r0, [r4, #16]
    99ea:	4b06      	ldr	r3, [pc, #24]	; (9a04 <os_mempool_init_internal+0x74>)
    99ec:	685a      	ldr	r2, [r3, #4]
    99ee:	6014      	str	r4, [r2, #0]
    99f0:	3410      	adds	r4, #16
    99f2:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    99f4:	bc30      	pop	{r4, r5}
    99f6:	4770      	bx	lr
        return OS_INVALID_PARM;
    99f8:	2003      	movs	r0, #3
}
    99fa:	4770      	bx	lr
        return OS_INVALID_PARM;
    99fc:	2003      	movs	r0, #3
    99fe:	e7f9      	b.n	99f4 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    9a00:	2004      	movs	r0, #4
    9a02:	e7f7      	b.n	99f4 <os_mempool_init_internal+0x64>
    9a04:	2000299c 	.word	0x2000299c

00009a08 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    9a08:	b510      	push	{r4, lr}
    9a0a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    9a0c:	2400      	movs	r4, #0
    9a0e:	9401      	str	r4, [sp, #4]
    9a10:	9c04      	ldr	r4, [sp, #16]
    9a12:	9400      	str	r4, [sp, #0]
    9a14:	f7ff ffbc 	bl	9990 <os_mempool_init_internal>
}
    9a18:	b002      	add	sp, #8
    9a1a:	bd10      	pop	{r4, pc}

00009a1c <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    9a1c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    9a1e:	4604      	mov	r4, r0
    9a20:	b198      	cbz	r0, 9a4a <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    9a22:	f000 fe1b 	bl	a65c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    9a26:	88e3      	ldrh	r3, [r4, #6]
    9a28:	b153      	cbz	r3, 9a40 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    9a2a:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    9a2c:	682a      	ldr	r2, [r5, #0]
    9a2e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    9a30:	3b01      	subs	r3, #1
    9a32:	b29b      	uxth	r3, r3
    9a34:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    9a36:	8922      	ldrh	r2, [r4, #8]
    9a38:	4293      	cmp	r3, r2
    9a3a:	d202      	bcs.n	9a42 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    9a3c:	8123      	strh	r3, [r4, #8]
    9a3e:	e000      	b.n	9a42 <os_memblock_get+0x26>
    block = NULL;
    9a40:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    9a42:	f000 fe11 	bl	a668 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    9a46:	4628      	mov	r0, r5
    9a48:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    9a4a:	4605      	mov	r5, r0
    return (void *)block;
    9a4c:	e7fb      	b.n	9a46 <os_memblock_get+0x2a>

00009a4e <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    9a4e:	b538      	push	{r3, r4, r5, lr}
    9a50:	4604      	mov	r4, r0
    9a52:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    9a54:	f000 fe02 	bl	a65c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    9a58:	6963      	ldr	r3, [r4, #20]
    9a5a:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    9a5c:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    9a5e:	88e3      	ldrh	r3, [r4, #6]
    9a60:	3301      	adds	r3, #1
    9a62:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    9a64:	f000 fe00 	bl	a668 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    9a68:	2000      	movs	r0, #0
    9a6a:	bd38      	pop	{r3, r4, r5, pc}

00009a6c <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    9a6c:	b178      	cbz	r0, 9a8e <os_memblock_put+0x22>
    9a6e:	4603      	mov	r3, r0
    9a70:	b179      	cbz	r1, 9a92 <os_memblock_put+0x26>
{
    9a72:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    9a74:	7a82      	ldrb	r2, [r0, #10]
    9a76:	f012 0f01 	tst.w	r2, #1
    9a7a:	d004      	beq.n	9a86 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    9a7c:	69c4      	ldr	r4, [r0, #28]
    9a7e:	b114      	cbz	r4, 9a86 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    9a80:	6a02      	ldr	r2, [r0, #32]
    9a82:	47a0      	blx	r4
            goto done;
    9a84:	e002      	b.n	9a8c <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    9a86:	4618      	mov	r0, r3
    9a88:	f7ff ffe1 	bl	9a4e <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    9a8c:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    9a8e:	2003      	movs	r0, #3
    9a90:	4770      	bx	lr
    9a92:	2003      	movs	r0, #3
}
    9a94:	4770      	bx	lr
	...

00009a98 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
    9a98:	b510      	push	{r4, lr}
    9a9a:	460b      	mov	r3, r1
    struct os_mempool *cur;

    if (mp == NULL) {
    9a9c:	b188      	cbz	r0, 9ac2 <os_mempool_info_get_next+0x2a>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
    9a9e:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
    9aa0:	b16c      	cbz	r4, 9abe <os_mempool_info_get_next+0x26>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
    9aa2:	6822      	ldr	r2, [r4, #0]
    9aa4:	601a      	str	r2, [r3, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
    9aa6:	88a2      	ldrh	r2, [r4, #4]
    9aa8:	605a      	str	r2, [r3, #4]
    omi->omi_num_free = cur->mp_num_free;
    9aaa:	88e2      	ldrh	r2, [r4, #6]
    9aac:	609a      	str	r2, [r3, #8]
    omi->omi_min_free = cur->mp_min_free;
    9aae:	8922      	ldrh	r2, [r4, #8]
    9ab0:	60da      	str	r2, [r3, #12]
    strncpy(omi->omi_name, cur->name, sizeof(omi->omi_name));
    9ab2:	2220      	movs	r2, #32
    9ab4:	69a1      	ldr	r1, [r4, #24]
    9ab6:	f103 0010 	add.w	r0, r3, #16
    9aba:	f006 fe1d 	bl	106f8 <strncpy>

    return (cur);
}
    9abe:	4620      	mov	r0, r4
    9ac0:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
    9ac2:	4a01      	ldr	r2, [pc, #4]	; (9ac8 <os_mempool_info_get_next+0x30>)
    9ac4:	6814      	ldr	r4, [r2, #0]
    9ac6:	e7eb      	b.n	9aa0 <os_mempool_info_get_next+0x8>
    9ac8:	2000299c 	.word	0x2000299c

00009acc <os_mempool_module_init>:

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    9acc:	4b02      	ldr	r3, [pc, #8]	; (9ad8 <os_mempool_module_init+0xc>)
    9ace:	2200      	movs	r2, #0
    9ad0:	601a      	str	r2, [r3, #0]
    9ad2:	605b      	str	r3, [r3, #4]
}
    9ad4:	4770      	bx	lr
    9ad6:	bf00      	nop
    9ad8:	2000299c 	.word	0x2000299c

00009adc <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9adc:	4b02      	ldr	r3, [pc, #8]	; (9ae8 <os_msys_find_biggest_pool+0xc>)
    9ade:	6818      	ldr	r0, [r3, #0]
    9ae0:	b108      	cbz	r0, 9ae6 <os_msys_find_biggest_pool+0xa>
    9ae2:	6858      	ldr	r0, [r3, #4]
    9ae4:	3808      	subs	r0, #8
}
    9ae6:	4770      	bx	lr
    9ae8:	200000f0 	.word	0x200000f0

00009aec <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    9aec:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9aee:	4b09      	ldr	r3, [pc, #36]	; (9b14 <os_msys_find_pool+0x28>)
    9af0:	6819      	ldr	r1, [r3, #0]
    9af2:	4608      	mov	r0, r1
    9af4:	e000      	b.n	9af8 <os_msys_find_pool+0xc>
    9af6:	6880      	ldr	r0, [r0, #8]
    9af8:	b110      	cbz	r0, 9b00 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    9afa:	8803      	ldrh	r3, [r0, #0]
    9afc:	4293      	cmp	r3, r2
    9afe:	d3fa      	bcc.n	9af6 <os_msys_find_pool+0xa>
            break;
        }
    }

    if (!pool) {
    9b00:	b100      	cbz	r0, 9b04 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    9b02:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    9b04:	b119      	cbz	r1, 9b0e <os_msys_find_pool+0x22>
    9b06:	4b03      	ldr	r3, [pc, #12]	; (9b14 <os_msys_find_pool+0x28>)
    9b08:	6858      	ldr	r0, [r3, #4]
    9b0a:	3808      	subs	r0, #8
    9b0c:	4770      	bx	lr
    9b0e:	4608      	mov	r0, r1
    return (pool);
    9b10:	e7f7      	b.n	9b02 <os_msys_find_pool+0x16>
    9b12:	bf00      	nop
    9b14:	200000f0 	.word	0x200000f0

00009b18 <os_msys_register>:
{
    9b18:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b1a:	4b11      	ldr	r3, [pc, #68]	; (9b60 <os_msys_register+0x48>)
    9b1c:	681d      	ldr	r5, [r3, #0]
    9b1e:	462b      	mov	r3, r5
    prev = NULL;
    9b20:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b22:	e001      	b.n	9b28 <os_msys_register+0x10>
        prev = pool;
    9b24:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    9b26:	689b      	ldr	r3, [r3, #8]
    9b28:	b11b      	cbz	r3, 9b32 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    9b2a:	8801      	ldrh	r1, [r0, #0]
    9b2c:	881a      	ldrh	r2, [r3, #0]
    9b2e:	4291      	cmp	r1, r2
    9b30:	d2f8      	bcs.n	9b24 <os_msys_register+0xc>
    if (prev) {
    9b32:	b15c      	cbz	r4, 9b4c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    9b34:	68a3      	ldr	r3, [r4, #8]
    9b36:	6083      	str	r3, [r0, #8]
    9b38:	b11b      	cbz	r3, 9b42 <os_msys_register+0x2a>
    9b3a:	60a0      	str	r0, [r4, #8]
}
    9b3c:	2000      	movs	r0, #0
    9b3e:	bc30      	pop	{r4, r5}
    9b40:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    9b42:	f100 0308 	add.w	r3, r0, #8
    9b46:	4a06      	ldr	r2, [pc, #24]	; (9b60 <os_msys_register+0x48>)
    9b48:	6053      	str	r3, [r2, #4]
    9b4a:	e7f6      	b.n	9b3a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    9b4c:	6085      	str	r5, [r0, #8]
    9b4e:	b115      	cbz	r5, 9b56 <os_msys_register+0x3e>
    9b50:	4b03      	ldr	r3, [pc, #12]	; (9b60 <os_msys_register+0x48>)
    9b52:	6018      	str	r0, [r3, #0]
    9b54:	e7f2      	b.n	9b3c <os_msys_register+0x24>
    9b56:	f100 0308 	add.w	r3, r0, #8
    9b5a:	4a01      	ldr	r2, [pc, #4]	; (9b60 <os_msys_register+0x48>)
    9b5c:	6053      	str	r3, [r2, #4]
    9b5e:	e7f7      	b.n	9b50 <os_msys_register+0x38>
    9b60:	200000f0 	.word	0x200000f0

00009b64 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    9b64:	b530      	push	{r4, r5, lr}
    9b66:	b083      	sub	sp, #12
    9b68:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    9b6a:	9d07      	ldr	r5, [sp, #28]
    9b6c:	9501      	str	r5, [sp, #4]
    9b6e:	9d06      	ldr	r5, [sp, #24]
    9b70:	9500      	str	r5, [sp, #0]
    9b72:	f008 fecf 	bl	12914 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    9b76:	b138      	cbz	r0, 9b88 <os_msys_init_once+0x24>
    9b78:	2000      	movs	r0, #0
    9b7a:	9000      	str	r0, [sp, #0]
    9b7c:	4b09      	ldr	r3, [pc, #36]	; (9ba4 <os_msys_init_once+0x40>)
    9b7e:	681d      	ldr	r5, [r3, #0]
    9b80:	4603      	mov	r3, r0
    9b82:	4602      	mov	r2, r0
    9b84:	4601      	mov	r1, r0
    9b86:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    9b88:	4620      	mov	r0, r4
    9b8a:	f7ff ffc5 	bl	9b18 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    9b8e:	b138      	cbz	r0, 9ba0 <os_msys_init_once+0x3c>
    9b90:	2000      	movs	r0, #0
    9b92:	9000      	str	r0, [sp, #0]
    9b94:	4b03      	ldr	r3, [pc, #12]	; (9ba4 <os_msys_init_once+0x40>)
    9b96:	681c      	ldr	r4, [r3, #0]
    9b98:	4603      	mov	r3, r0
    9b9a:	4602      	mov	r2, r0
    9b9c:	4601      	mov	r1, r0
    9b9e:	47a0      	blx	r4
}
    9ba0:	b003      	add	sp, #12
    9ba2:	bd30      	pop	{r4, r5, pc}
    9ba4:	20000308 	.word	0x20000308

00009ba8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    9ba8:	4b02      	ldr	r3, [pc, #8]	; (9bb4 <os_msys_reset+0xc>)
    9baa:	2200      	movs	r2, #0
    9bac:	601a      	str	r2, [r3, #0]
    9bae:	605b      	str	r3, [r3, #4]
}
    9bb0:	4770      	bx	lr
    9bb2:	bf00      	nop
    9bb4:	200000f0 	.word	0x200000f0

00009bb8 <os_msys_get_pkthdr>:
{
    9bb8:	b510      	push	{r4, lr}
    9bba:	460c      	mov	r4, r1
    if (dsize == 0) {
    9bbc:	b930      	cbnz	r0, 9bcc <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    9bbe:	f7ff ff8d 	bl	9adc <os_msys_find_biggest_pool>
    if (!pool) {
    9bc2:	b110      	cbz	r0, 9bca <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    9bc4:	b2e1      	uxtb	r1, r4
    9bc6:	f000 fe71 	bl	a8ac <os_mbuf_get_pkthdr>
}
    9bca:	bd10      	pop	{r4, pc}
    9bcc:	f101 0308 	add.w	r3, r1, #8
    9bd0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    9bd2:	4403      	add	r3, r0
    9bd4:	b298      	uxth	r0, r3
    9bd6:	f7ff ff89 	bl	9aec <os_msys_find_pool>
    9bda:	e7f2      	b.n	9bc2 <os_msys_get_pkthdr+0xa>

00009bdc <os_msys_count>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9bdc:	4b05      	ldr	r3, [pc, #20]	; (9bf4 <os_msys_count+0x18>)
    9bde:	681b      	ldr	r3, [r3, #0]
    total = 0;
    9be0:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9be2:	e003      	b.n	9bec <os_msys_count+0x10>
        total += omp->omp_pool->mp_num_blocks;
    9be4:	685a      	ldr	r2, [r3, #4]
    9be6:	8892      	ldrh	r2, [r2, #4]
    9be8:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9bea:	689b      	ldr	r3, [r3, #8]
    9bec:	2b00      	cmp	r3, #0
    9bee:	d1f9      	bne.n	9be4 <os_msys_count+0x8>
}
    9bf0:	4770      	bx	lr
    9bf2:	bf00      	nop
    9bf4:	200000f0 	.word	0x200000f0

00009bf8 <os_msys_num_free>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9bf8:	4b05      	ldr	r3, [pc, #20]	; (9c10 <os_msys_num_free+0x18>)
    9bfa:	681b      	ldr	r3, [r3, #0]
    total = 0;
    9bfc:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9bfe:	e003      	b.n	9c08 <os_msys_num_free+0x10>
        total += omp->omp_pool->mp_num_free;
    9c00:	685a      	ldr	r2, [r3, #4]
    9c02:	88d2      	ldrh	r2, [r2, #6]
    9c04:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
    9c06:	689b      	ldr	r3, [r3, #8]
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d1f9      	bne.n	9c00 <os_msys_num_free+0x8>
}
    9c0c:	4770      	bx	lr
    9c0e:	bf00      	nop
    9c10:	200000f0 	.word	0x200000f0

00009c14 <os_msys_init>:

void
os_msys_init(void)
{
    9c14:	b500      	push	{lr}
    9c16:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    9c18:	f7ff ffc6 	bl	9ba8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    9c1c:	4b06      	ldr	r3, [pc, #24]	; (9c38 <os_msys_init+0x24>)
    9c1e:	9301      	str	r3, [sp, #4]
    9c20:	f44f 7392 	mov.w	r3, #292	; 0x124
    9c24:	9300      	str	r3, [sp, #0]
    9c26:	230c      	movs	r3, #12
    9c28:	4a04      	ldr	r2, [pc, #16]	; (9c3c <os_msys_init+0x28>)
    9c2a:	4905      	ldr	r1, [pc, #20]	; (9c40 <os_msys_init+0x2c>)
    9c2c:	4805      	ldr	r0, [pc, #20]	; (9c44 <os_msys_init+0x30>)
    9c2e:	f7ff ff99 	bl	9b64 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    9c32:	b003      	add	sp, #12
    9c34:	f85d fb04 	ldr.w	pc, [sp], #4
    9c38:	000264ac 	.word	0x000264ac
    9c3c:	20003754 	.word	0x20003754
    9c40:	20003760 	.word	0x20003760
    9c44:	200029a4 	.word	0x200029a4

00009c48 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    9c48:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9c4a:	4b05      	ldr	r3, [pc, #20]	; (9c60 <os_sanity_check_list_lock+0x18>)
    9c4c:	6818      	ldr	r0, [r3, #0]
    9c4e:	b900      	cbnz	r0, 9c52 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    9c50:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    9c52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9c56:	4803      	ldr	r0, [pc, #12]	; (9c64 <os_sanity_check_list_lock+0x1c>)
    9c58:	f001 f85a 	bl	ad10 <os_mutex_pend>
    if (rc != OS_OK) {
    9c5c:	e7f8      	b.n	9c50 <os_sanity_check_list_lock+0x8>
    9c5e:	bf00      	nop
    9c60:	20002978 	.word	0x20002978
    9c64:	20003780 	.word	0x20003780

00009c68 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    9c68:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    9c6a:	4b04      	ldr	r3, [pc, #16]	; (9c7c <os_sanity_check_list_unlock+0x14>)
    9c6c:	6818      	ldr	r0, [r3, #0]
    9c6e:	b900      	cbnz	r0, 9c72 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    9c70:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    9c72:	4803      	ldr	r0, [pc, #12]	; (9c80 <os_sanity_check_list_unlock+0x18>)
    9c74:	f000 fff0 	bl	ac58 <os_mutex_release>
    if (rc != 0) {
    9c78:	e7fa      	b.n	9c70 <os_sanity_check_list_unlock+0x8>
    9c7a:	bf00      	nop
    9c7c:	20002978 	.word	0x20002978
    9c80:	20003780 	.word	0x20003780

00009c84 <os_sanity_check_init>:
{
    9c84:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    9c86:	2000      	movs	r0, #0
    9c88:	6018      	str	r0, [r3, #0]
    9c8a:	6058      	str	r0, [r3, #4]
    9c8c:	6098      	str	r0, [r3, #8]
    9c8e:	60d8      	str	r0, [r3, #12]
    9c90:	6118      	str	r0, [r3, #16]
}
    9c92:	4770      	bx	lr

00009c94 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    9c94:	b510      	push	{r4, lr}
    9c96:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9c98:	f7ff ffd6 	bl	9c48 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9c9c:	b100      	cbz	r0, 9ca0 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    9c9e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    9ca0:	4b03      	ldr	r3, [pc, #12]	; (9cb0 <os_sanity_check_register+0x1c>)
    9ca2:	681a      	ldr	r2, [r3, #0]
    9ca4:	6122      	str	r2, [r4, #16]
    9ca6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    9ca8:	f7ff ffde 	bl	9c68 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    9cac:	e7f7      	b.n	9c9e <os_sanity_check_register+0xa>
    9cae:	bf00      	nop
    9cb0:	2000377c 	.word	0x2000377c

00009cb4 <os_sanity_check_reset>:


int
os_sanity_check_reset(struct os_sanity_check *sc)
{
    9cb4:	b510      	push	{r4, lr}
    9cb6:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    9cb8:	f7ff ffc6 	bl	9c48 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    9cbc:	b100      	cbz	r0, 9cc0 <os_sanity_check_reset+0xc>
    }

    return (0);
err:
    return (rc);
}
    9cbe:	bd10      	pop	{r4, pc}
    sc->sc_checkin_last = os_time_get();
    9cc0:	f000 fba6 	bl	a410 <os_time_get>
    9cc4:	6020      	str	r0, [r4, #0]
    rc = os_sanity_check_list_unlock();
    9cc6:	f7ff ffcf 	bl	9c68 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    9cca:	e7f8      	b.n	9cbe <os_sanity_check_reset+0xa>

00009ccc <os_sanity_task_checkin>:
{
    9ccc:	b508      	push	{r3, lr}
    if (t == NULL) {
    9cce:	4603      	mov	r3, r0
    9cd0:	b120      	cbz	r0, 9cdc <os_sanity_task_checkin+0x10>
    rc = os_sanity_check_reset(&t->t_sanity_check);
    9cd2:	f103 0020 	add.w	r0, r3, #32
    9cd6:	f7ff ffed 	bl	9cb4 <os_sanity_check_reset>
}
    9cda:	bd08      	pop	{r3, pc}
        t = os_sched_get_current_task();
    9cdc:	f000 f882 	bl	9de4 <os_sched_get_current_task>
    9ce0:	4603      	mov	r3, r0
    9ce2:	e7f6      	b.n	9cd2 <os_sanity_task_checkin+0x6>

00009ce4 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    9ce4:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    9ce6:	f7ff ffaf 	bl	9c48 <os_sanity_check_list_lock>
    if (rc != 0) {
    9cea:	b910      	cbnz	r0, 9cf2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9cec:	4b17      	ldr	r3, [pc, #92]	; (9d4c <os_sanity_run+0x68>)
    9cee:	681c      	ldr	r4, [r3, #0]
    9cf0:	e00e      	b.n	9d10 <os_sanity_run+0x2c>
        assert(0);
    9cf2:	2300      	movs	r3, #0
    9cf4:	461a      	mov	r2, r3
    9cf6:	4619      	mov	r1, r3
    9cf8:	4618      	mov	r0, r3
    9cfa:	f7ff fa63 	bl	91c4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    9cfe:	f000 fb87 	bl	a410 <os_time_get>
    9d02:	6823      	ldr	r3, [r4, #0]
    9d04:	6862      	ldr	r2, [r4, #4]
    9d06:	4413      	add	r3, r2
    9d08:	1ac0      	subs	r0, r0, r3
    9d0a:	2800      	cmp	r0, #0
    9d0c:	dc0d      	bgt.n	9d2a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    9d0e:	6924      	ldr	r4, [r4, #16]
    9d10:	b18c      	cbz	r4, 9d36 <os_sanity_run+0x52>
        if (sc->sc_func) {
    9d12:	68a3      	ldr	r3, [r4, #8]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d0f2      	beq.n	9cfe <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
    9d18:	68e1      	ldr	r1, [r4, #12]
    9d1a:	4620      	mov	r0, r4
    9d1c:	4798      	blx	r3
            if (rc == OS_OK) {
    9d1e:	2800      	cmp	r0, #0
    9d20:	d1ed      	bne.n	9cfe <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
    9d22:	f000 fb75 	bl	a410 <os_time_get>
    9d26:	6020      	str	r0, [r4, #0]
                continue;
    9d28:	e7f1      	b.n	9d0e <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    9d2a:	2300      	movs	r3, #0
    9d2c:	461a      	mov	r2, r3
    9d2e:	4619      	mov	r1, r3
    9d30:	4618      	mov	r0, r3
    9d32:	f7ff fa47 	bl	91c4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    9d36:	f7ff ff97 	bl	9c68 <os_sanity_check_list_unlock>
    if (rc != 0) {
    9d3a:	b900      	cbnz	r0, 9d3e <os_sanity_run+0x5a>
        assert(0);
    }
}
    9d3c:	bd10      	pop	{r4, pc}
        assert(0);
    9d3e:	2300      	movs	r3, #0
    9d40:	461a      	mov	r2, r3
    9d42:	4619      	mov	r1, r3
    9d44:	4618      	mov	r0, r3
    9d46:	f7ff fa3d 	bl	91c4 <__assert_func>
    9d4a:	bf00      	nop
    9d4c:	2000377c 	.word	0x2000377c

00009d50 <os_sanity_init>:

int
os_sanity_init(void)
{
    9d50:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    9d52:	4802      	ldr	r0, [pc, #8]	; (9d5c <os_sanity_init+0xc>)
    9d54:	f000 ff76 	bl	ac44 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    9d58:	bd08      	pop	{r3, pc}
    9d5a:	bf00      	nop
    9d5c:	20003780 	.word	0x20003780

00009d60 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    9d60:	7b03      	ldrb	r3, [r0, #12]
    9d62:	2b01      	cmp	r3, #1
    9d64:	d001      	beq.n	9d6a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    9d66:	2002      	movs	r0, #2
}
    9d68:	4770      	bx	lr
{
    9d6a:	b510      	push	{r4, lr}
    9d6c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    9d6e:	f000 fc75 	bl	a65c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9d72:	4b0f      	ldr	r3, [pc, #60]	; (9db0 <os_sched_insert+0x50>)
    9d74:	681b      	ldr	r3, [r3, #0]
    9d76:	b12b      	cbz	r3, 9d84 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    9d78:	7ae1      	ldrb	r1, [r4, #11]
    9d7a:	7ada      	ldrb	r2, [r3, #11]
    9d7c:	4291      	cmp	r1, r2
    9d7e:	d301      	bcc.n	9d84 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    9d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9d82:	e7f8      	b.n	9d76 <os_sched_insert+0x16>
    if (entry) {
    9d84:	b153      	cbz	r3, 9d9c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    9d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9d88:	64a2      	str	r2, [r4, #72]	; 0x48
    9d8a:	6463      	str	r3, [r4, #68]	; 0x44
    9d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9d8e:	6014      	str	r4, [r2, #0]
    9d90:	3444      	adds	r4, #68	; 0x44
    9d92:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    9d94:	f000 fc68 	bl	a668 <os_arch_restore_sr>
    return (0);
    9d98:	2000      	movs	r0, #0
}
    9d9a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    9d9c:	2300      	movs	r3, #0
    9d9e:	6463      	str	r3, [r4, #68]	; 0x44
    9da0:	4b03      	ldr	r3, [pc, #12]	; (9db0 <os_sched_insert+0x50>)
    9da2:	685a      	ldr	r2, [r3, #4]
    9da4:	64a2      	str	r2, [r4, #72]	; 0x48
    9da6:	6014      	str	r4, [r2, #0]
    9da8:	3444      	adds	r4, #68	; 0x44
    9daa:	605c      	str	r4, [r3, #4]
    9dac:	e7f2      	b.n	9d94 <os_sched_insert+0x34>
    9dae:	bf00      	nop
    9db0:	200000f8 	.word	0x200000f8

00009db4 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    9db4:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    9db6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9db8:	3301      	adds	r3, #1
    9dba:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
    9dbc:	4b06      	ldr	r3, [pc, #24]	; (9dd8 <os_sched_ctx_sw_hook+0x24>)
    9dbe:	681c      	ldr	r4, [r3, #0]
    9dc0:	4b06      	ldr	r3, [pc, #24]	; (9ddc <os_sched_ctx_sw_hook+0x28>)
    9dc2:	6818      	ldr	r0, [r3, #0]
    9dc4:	4906      	ldr	r1, [pc, #24]	; (9de0 <os_sched_ctx_sw_hook+0x2c>)
    9dc6:	680b      	ldr	r3, [r1, #0]
    9dc8:	1ac2      	subs	r2, r0, r3
    9dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9dcc:	4413      	add	r3, r2
    9dce:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
    9dd0:	6008      	str	r0, [r1, #0]
}
    9dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9dd6:	4770      	bx	lr
    9dd8:	2000378c 	.word	0x2000378c
    9ddc:	200037d0 	.word	0x200037d0
    9de0:	20003790 	.word	0x20003790

00009de4 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    9de4:	4b01      	ldr	r3, [pc, #4]	; (9dec <os_sched_get_current_task+0x8>)
    9de6:	6818      	ldr	r0, [r3, #0]
    9de8:	4770      	bx	lr
    9dea:	bf00      	nop
    9dec:	2000378c 	.word	0x2000378c

00009df0 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    9df0:	4b01      	ldr	r3, [pc, #4]	; (9df8 <os_sched_set_current_task+0x8>)
    9df2:	6018      	str	r0, [r3, #0]
}
    9df4:	4770      	bx	lr
    9df6:	bf00      	nop
    9df8:	2000378c 	.word	0x2000378c

00009dfc <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    9dfc:	b538      	push	{r3, r4, r5, lr}
    9dfe:	4604      	mov	r4, r0
    9e00:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9e02:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9e04:	b183      	cbz	r3, 9e28 <os_sched_sleep+0x2c>
    9e06:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9e08:	649a      	str	r2, [r3, #72]	; 0x48
    9e0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9e0c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9e0e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    9e10:	2302      	movs	r3, #2
    9e12:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    9e14:	f000 fafc 	bl	a410 <os_time_get>
    9e18:	4428      	add	r0, r5
    9e1a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    9e1c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9e20:	d006      	beq.n	9e30 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9e22:	4b18      	ldr	r3, [pc, #96]	; (9e84 <os_sched_sleep+0x88>)
    9e24:	681b      	ldr	r3, [r3, #0]
    9e26:	e011      	b.n	9e4c <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9e28:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9e2a:	4b17      	ldr	r3, [pc, #92]	; (9e88 <os_sched_sleep+0x8c>)
    9e2c:	605a      	str	r2, [r3, #4]
    9e2e:	e7ec      	b.n	9e0a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9e30:	7b63      	ldrb	r3, [r4, #13]
    9e32:	f043 0301 	orr.w	r3, r3, #1
    9e36:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9e38:	2300      	movs	r3, #0
    9e3a:	6463      	str	r3, [r4, #68]	; 0x44
    9e3c:	4b11      	ldr	r3, [pc, #68]	; (9e84 <os_sched_sleep+0x88>)
    9e3e:	685a      	ldr	r2, [r3, #4]
    9e40:	64a2      	str	r2, [r4, #72]	; 0x48
    9e42:	6014      	str	r4, [r2, #0]
    9e44:	3444      	adds	r4, #68	; 0x44
    9e46:	605c      	str	r4, [r3, #4]
    9e48:	e011      	b.n	9e6e <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    9e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9e4c:	b13b      	cbz	r3, 9e5e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9e4e:	7b5a      	ldrb	r2, [r3, #13]
    9e50:	f012 0f01 	tst.w	r2, #1
    9e54:	d103      	bne.n	9e5e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    9e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9e58:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    9e5a:	2a00      	cmp	r2, #0
    9e5c:	ddf5      	ble.n	9e4a <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    9e5e:	b143      	cbz	r3, 9e72 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    9e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9e62:	64a2      	str	r2, [r4, #72]	; 0x48
    9e64:	6463      	str	r3, [r4, #68]	; 0x44
    9e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    9e68:	6014      	str	r4, [r2, #0]
    9e6a:	3444      	adds	r4, #68	; 0x44
    9e6c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    9e6e:	2000      	movs	r0, #0
    9e70:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    9e72:	2300      	movs	r3, #0
    9e74:	6463      	str	r3, [r4, #68]	; 0x44
    9e76:	4b03      	ldr	r3, [pc, #12]	; (9e84 <os_sched_sleep+0x88>)
    9e78:	685a      	ldr	r2, [r3, #4]
    9e7a:	64a2      	str	r2, [r4, #72]	; 0x48
    9e7c:	6014      	str	r4, [r2, #0]
    9e7e:	3444      	adds	r4, #68	; 0x44
    9e80:	605c      	str	r4, [r3, #4]
    9e82:	e7f4      	b.n	9e6e <os_sched_sleep+0x72>
    9e84:	20000100 	.word	0x20000100
    9e88:	200000f8 	.word	0x200000f8

00009e8c <os_sched_remove>:
 */
int
os_sched_remove(struct os_task *t)
{

    if (t->t_state == OS_TASK_SLEEP) {
    9e8c:	7b03      	ldrb	r3, [r0, #12]
    9e8e:	2b02      	cmp	r3, #2
    9e90:	d014      	beq.n	9ebc <os_sched_remove+0x30>
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    } else if (t->t_state == OS_TASK_READY) {
    9e92:	2b01      	cmp	r3, #1
    9e94:	d01e      	beq.n	9ed4 <os_sched_remove+0x48>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    }
    t->t_next_wakeup = 0;
    9e96:	2300      	movs	r3, #0
    9e98:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    9e9a:	7b43      	ldrb	r3, [r0, #13]
    9e9c:	f043 0301 	orr.w	r3, r3, #1
    9ea0:	7343      	strb	r3, [r0, #13]

    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9ea2:	4b18      	ldr	r3, [pc, #96]	; (9f04 <os_sched_remove+0x78>)
    9ea4:	681b      	ldr	r3, [r3, #0]
    9ea6:	4283      	cmp	r3, r0
    9ea8:	d020      	beq.n	9eec <os_sched_remove+0x60>
    9eaa:	461a      	mov	r2, r3
    9eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9eae:	4283      	cmp	r3, r0
    9eb0:	d1fb      	bne.n	9eaa <os_sched_remove+0x1e>
    9eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9eb4:	6413      	str	r3, [r2, #64]	; 0x40
    9eb6:	b303      	cbz	r3, 9efa <os_sched_remove+0x6e>

    os_trace_task_stop_exec();
    return OS_OK;
}
    9eb8:	2000      	movs	r0, #0
    9eba:	4770      	bx	lr
        TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9ebc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9ebe:	b12b      	cbz	r3, 9ecc <os_sched_remove+0x40>
    9ec0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ec2:	649a      	str	r2, [r3, #72]	; 0x48
    9ec4:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9ec6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9ec8:	601a      	str	r2, [r3, #0]
    9eca:	e7e4      	b.n	9e96 <os_sched_remove+0xa>
    9ecc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ece:	4b0e      	ldr	r3, [pc, #56]	; (9f08 <os_sched_remove+0x7c>)
    9ed0:	605a      	str	r2, [r3, #4]
    9ed2:	e7f7      	b.n	9ec4 <os_sched_remove+0x38>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9ed4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9ed6:	b12b      	cbz	r3, 9ee4 <os_sched_remove+0x58>
    9ed8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9eda:	649a      	str	r2, [r3, #72]	; 0x48
    9edc:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9ede:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9ee0:	601a      	str	r2, [r3, #0]
    9ee2:	e7d8      	b.n	9e96 <os_sched_remove+0xa>
    9ee4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9ee6:	4b09      	ldr	r3, [pc, #36]	; (9f0c <os_sched_remove+0x80>)
    9ee8:	605a      	str	r2, [r3, #4]
    9eea:	e7f7      	b.n	9edc <os_sched_remove+0x50>
    STAILQ_REMOVE(&g_os_task_list, t, os_task, t_os_task_list);
    9eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9eee:	4a05      	ldr	r2, [pc, #20]	; (9f04 <os_sched_remove+0x78>)
    9ef0:	6013      	str	r3, [r2, #0]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d1e0      	bne.n	9eb8 <os_sched_remove+0x2c>
    9ef6:	6052      	str	r2, [r2, #4]
    9ef8:	e7de      	b.n	9eb8 <os_sched_remove+0x2c>
    9efa:	3240      	adds	r2, #64	; 0x40
    9efc:	4b01      	ldr	r3, [pc, #4]	; (9f04 <os_sched_remove+0x78>)
    9efe:	605a      	str	r2, [r3, #4]
    9f00:	e7da      	b.n	9eb8 <os_sched_remove+0x2c>
    9f02:	bf00      	nop
    9f04:	20003794 	.word	0x20003794
    9f08:	20000100 	.word	0x20000100
    9f0c:	200000f8 	.word	0x200000f8

00009f10 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    9f10:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    9f12:	7b03      	ldrb	r3, [r0, #12]
    9f14:	2b02      	cmp	r3, #2
    9f16:	d121      	bne.n	9f5c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    9f18:	69c2      	ldr	r2, [r0, #28]
    9f1a:	b162      	cbz	r2, 9f36 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9f1c:	6813      	ldr	r3, [r2, #0]
    9f1e:	b31b      	cbz	r3, 9f68 <os_sched_wakeup+0x58>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9f20:	4283      	cmp	r3, r0
    9f22:	d026      	beq.n	9f72 <os_sched_wakeup+0x62>
    9f24:	461a      	mov	r2, r3
    9f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f28:	4283      	cmp	r3, r0
    9f2a:	d1fb      	bne.n	9f24 <os_sched_wakeup+0x14>
    9f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    9f30:	2300      	movs	r3, #0
    9f32:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    9f34:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    9f36:	2301      	movs	r3, #1
    9f38:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    9f3a:	2300      	movs	r3, #0
    9f3c:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    9f3e:	7b43      	ldrb	r3, [r0, #13]
    9f40:	f023 0301 	bic.w	r3, r3, #1
    9f44:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9f46:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9f48:	b1b3      	cbz	r3, 9f78 <os_sched_wakeup+0x68>
    9f4a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9f4c:	649a      	str	r2, [r3, #72]	; 0x48
    9f4e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9f52:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    9f54:	f7ff ff04 	bl	9d60 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    9f58:	2000      	movs	r0, #0
    9f5a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    9f5c:	2300      	movs	r3, #0
    9f5e:	461a      	mov	r2, r3
    9f60:	4619      	mov	r1, r3
    9f62:	4618      	mov	r0, r3
    9f64:	f7ff f92e 	bl	91c4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9f68:	461a      	mov	r2, r3
    9f6a:	4619      	mov	r1, r3
    9f6c:	4618      	mov	r0, r3
    9f6e:	f7ff f929 	bl	91c4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9f74:	6013      	str	r3, [r2, #0]
    9f76:	e7db      	b.n	9f30 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    9f78:	6c82      	ldr	r2, [r0, #72]	; 0x48
    9f7a:	4b01      	ldr	r3, [pc, #4]	; (9f80 <os_sched_wakeup+0x70>)
    9f7c:	605a      	str	r2, [r3, #4]
    9f7e:	e7e6      	b.n	9f4e <os_sched_wakeup+0x3e>
    9f80:	20000100 	.word	0x20000100

00009f84 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    9f84:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    9f86:	f000 fa43 	bl	a410 <os_time_get>
    9f8a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9f8c:	f000 fb66 	bl	a65c <os_arch_save_sr>
    9f90:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    9f92:	4b0a      	ldr	r3, [pc, #40]	; (9fbc <os_sched_os_timer_exp+0x38>)
    9f94:	6818      	ldr	r0, [r3, #0]
    while (t) {
    9f96:	e002      	b.n	9f9e <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    9f98:	f7ff ffba 	bl	9f10 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    9f9c:	4620      	mov	r0, r4
    while (t) {
    9f9e:	b140      	cbz	r0, 9fb2 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9fa0:	7b43      	ldrb	r3, [r0, #13]
    9fa2:	f013 0f01 	tst.w	r3, #1
    9fa6:	d104      	bne.n	9fb2 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    9fa8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    9faa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9fac:	1aeb      	subs	r3, r5, r3
    9fae:	2b00      	cmp	r3, #0
    9fb0:	daf2      	bge.n	9f98 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    9fb2:	4630      	mov	r0, r6
    9fb4:	f000 fb58 	bl	a668 <os_arch_restore_sr>
}
    9fb8:	bd70      	pop	{r4, r5, r6, pc}
    9fba:	bf00      	nop
    9fbc:	20000100 	.word	0x20000100

00009fc0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    9fc0:	b510      	push	{r4, lr}
    9fc2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    9fc4:	f000 fb53 	bl	a66e <os_arch_in_critical>
    9fc8:	b150      	cbz	r0, 9fe0 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    9fca:	4b0c      	ldr	r3, [pc, #48]	; (9ffc <os_sched_wakeup_ticks+0x3c>)
    9fcc:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9fce:	b17b      	cbz	r3, 9ff0 <os_sched_wakeup_ticks+0x30>
    9fd0:	7b5a      	ldrb	r2, [r3, #13]
    9fd2:	f012 0f01 	tst.w	r2, #1
    9fd6:	d10e      	bne.n	9ff6 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    9fd8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    9fda:	1b00      	subs	r0, r0, r4
    9fdc:	d406      	bmi.n	9fec <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    9fde:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9fe0:	2300      	movs	r3, #0
    9fe2:	461a      	mov	r2, r3
    9fe4:	4619      	mov	r1, r3
    9fe6:	4618      	mov	r0, r3
    9fe8:	f7ff f8ec 	bl	91c4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    9fec:	2000      	movs	r0, #0
    9fee:	e7f6      	b.n	9fde <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    9ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9ff4:	e7f3      	b.n	9fde <os_sched_wakeup_ticks+0x1e>
    9ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9ffa:	e7f0      	b.n	9fde <os_sched_wakeup_ticks+0x1e>
    9ffc:	20000100 	.word	0x20000100

0000a000 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    a000:	4b01      	ldr	r3, [pc, #4]	; (a008 <os_sched_next_task+0x8>)
    a002:	6818      	ldr	r0, [r3, #0]
    a004:	4770      	bx	lr
    a006:	bf00      	nop
    a008:	200000f8 	.word	0x200000f8

0000a00c <os_sched>:
{
    a00c:	b538      	push	{r3, r4, r5, lr}
    a00e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    a010:	f000 fb24 	bl	a65c <os_arch_save_sr>
    a014:	4605      	mov	r5, r0
    if (!next_t) {
    a016:	b134      	cbz	r4, a026 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    a018:	4620      	mov	r0, r4
    a01a:	f000 fb15 	bl	a648 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    a01e:	4628      	mov	r0, r5
    a020:	f000 fb22 	bl	a668 <os_arch_restore_sr>
}
    a024:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    a026:	f7ff ffeb 	bl	a000 <os_sched_next_task>
    a02a:	4604      	mov	r4, r0
    a02c:	e7f4      	b.n	a018 <os_sched+0xc>
	...

0000a030 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    a030:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    a032:	7b03      	ldrb	r3, [r0, #12]
    a034:	2b01      	cmp	r3, #1
    a036:	d000      	beq.n	a03a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    a038:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    a03a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a03c:	b13b      	cbz	r3, a04e <os_sched_resort+0x1e>
    a03e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    a040:	649a      	str	r2, [r3, #72]	; 0x48
    a042:	6c83      	ldr	r3, [r0, #72]	; 0x48
    a044:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a046:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    a048:	f7ff fe8a 	bl	9d60 <os_sched_insert>
}
    a04c:	e7f4      	b.n	a038 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    a04e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    a050:	4b01      	ldr	r3, [pc, #4]	; (a058 <os_sched_resort+0x28>)
    a052:	605a      	str	r2, [r3, #4]
    a054:	e7f5      	b.n	a042 <os_sched_resort+0x12>
    a056:	bf00      	nop
    a058:	200000f8 	.word	0x200000f8

0000a05c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
    a05c:	4603      	mov	r3, r0
    a05e:	b118      	cbz	r0, a068 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    a060:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
    a062:	2000      	movs	r0, #0
    a064:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    a066:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    a068:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
    a06a:	4770      	bx	lr

0000a06c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
    a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
    a06e:	4b17      	ldr	r3, [pc, #92]	; (a0cc <os_sem_release+0x60>)
    a070:	681b      	ldr	r3, [r3, #0]
    a072:	b33b      	cbz	r3, a0c4 <os_sem_release+0x58>
    a074:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    a076:	b338      	cbz	r0, a0c8 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
    a078:	f7ff feb4 	bl	9de4 <os_sched_get_current_task>
    a07c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
    a07e:	f000 faed 	bl	a65c <os_arch_save_sr>
    a082:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
    a084:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
    a086:	b165      	cbz	r5, a0a2 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    a088:	7b6b      	ldrb	r3, [r5, #13]
    a08a:	f023 0302 	bic.w	r3, r3, #2
    a08e:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
    a090:	4628      	mov	r0, r5
    a092:	f7ff ff3d 	bl	9f10 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
    a096:	7afa      	ldrb	r2, [r7, #11]
    a098:	7aeb      	ldrb	r3, [r5, #11]
    a09a:	429a      	cmp	r2, r3
    a09c:	d80b      	bhi.n	a0b6 <os_sem_release+0x4a>
    resched = 0;
    a09e:	2400      	movs	r4, #0
    a0a0:	e003      	b.n	a0aa <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    a0a2:	88e3      	ldrh	r3, [r4, #6]
    a0a4:	3301      	adds	r3, #1
    a0a6:	80e3      	strh	r3, [r4, #6]
    resched = 0;
    a0a8:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
    a0aa:	4630      	mov	r0, r6
    a0ac:	f000 fadc 	bl	a668 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    a0b0:	b91c      	cbnz	r4, a0ba <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
    a0b2:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
    a0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
    a0b6:	2401      	movs	r4, #1
    a0b8:	e7f7      	b.n	a0aa <os_sem_release+0x3e>
        os_sched(rdy);
    a0ba:	4628      	mov	r0, r5
    a0bc:	f7ff ffa6 	bl	a00c <os_sched>
    ret = OS_OK;
    a0c0:	2000      	movs	r0, #0
    a0c2:	e7f7      	b.n	a0b4 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
    a0c4:	2009      	movs	r0, #9
    a0c6:	e7f5      	b.n	a0b4 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
    a0c8:	2003      	movs	r0, #3
    a0ca:	e7f3      	b.n	a0b4 <os_sem_release+0x48>
    a0cc:	20002978 	.word	0x20002978

0000a0d0 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
    a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
    a0d2:	4b2b      	ldr	r3, [pc, #172]	; (a180 <os_sem_pend+0xb0>)
    a0d4:	681b      	ldr	r3, [r3, #0]
    a0d6:	2b00      	cmp	r3, #0
    a0d8:	d04d      	beq.n	a176 <os_sem_pend+0xa6>
    a0da:	4604      	mov	r4, r0
    a0dc:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
    a0de:	2800      	cmp	r0, #0
    a0e0:	d04b      	beq.n	a17a <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
    a0e2:	f7ff fe7f 	bl	9de4 <os_sched_get_current_task>
    a0e6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    a0e8:	f000 fab8 	bl	a65c <os_arch_save_sr>
    a0ec:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
    a0ee:	88e3      	ldrh	r3, [r4, #6]
    a0f0:	b14b      	cbz	r3, a106 <os_sem_pend+0x36>
        sem->sem_tokens--;
    a0f2:	3b01      	subs	r3, #1
    a0f4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    a0f6:	2400      	movs	r4, #0
    sched = 0;
    a0f8:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
    a0fa:	4630      	mov	r0, r6
    a0fc:	f000 fab4 	bl	a668 <os_arch_restore_sr>

    if (sched) {
    a100:	bb47      	cbnz	r7, a154 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
    a102:	4620      	mov	r0, r4
    a104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
    a106:	b317      	cbz	r7, a14e <os_sem_pend+0x7e>
        current->t_obj = sem;
    a108:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
    a10a:	7b6b      	ldrb	r3, [r5, #13]
    a10c:	f043 0302 	orr.w	r3, r3, #2
    a110:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
    a112:	f8d4 c000 	ldr.w	ip, [r4]
    a116:	f1bc 0f00 	cmp.w	ip, #0
    a11a:	d00e      	beq.n	a13a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    a11c:	4663      	mov	r3, ip
        last = NULL;
    a11e:	2000      	movs	r0, #0
    a120:	e001      	b.n	a126 <os_sem_pend+0x56>
                last = entry;
    a122:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
    a124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a126:	b11b      	cbz	r3, a130 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
    a128:	7ae9      	ldrb	r1, [r5, #11]
    a12a:	7ada      	ldrb	r2, [r3, #11]
    a12c:	4291      	cmp	r1, r2
    a12e:	d2f8      	bcs.n	a122 <os_sem_pend+0x52>
        if (last) {
    a130:	b118      	cbz	r0, a13a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
    a132:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a134:	64eb      	str	r3, [r5, #76]	; 0x4c
    a136:	64c5      	str	r5, [r0, #76]	; 0x4c
    a138:	e002      	b.n	a140 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
    a13a:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
    a13e:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
    a140:	4639      	mov	r1, r7
    a142:	4628      	mov	r0, r5
    a144:	f7ff fe5a 	bl	9dfc <os_sched_sleep>
        ret = OS_OK;
    a148:	2400      	movs	r4, #0
        sched = 1;
    a14a:	2701      	movs	r7, #1
    a14c:	e7d5      	b.n	a0fa <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
    a14e:	2406      	movs	r4, #6
    sched = 0;
    a150:	2700      	movs	r7, #0
    a152:	e7d2      	b.n	a0fa <os_sem_pend+0x2a>
        os_sched(NULL);
    a154:	2000      	movs	r0, #0
    a156:	f7ff ff59 	bl	a00c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
    a15a:	7b6c      	ldrb	r4, [r5, #13]
    a15c:	f014 0402 	ands.w	r4, r4, #2
    a160:	d0cf      	beq.n	a102 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
    a162:	f000 fa7b 	bl	a65c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
    a166:	7b6b      	ldrb	r3, [r5, #13]
    a168:	f023 0302 	bic.w	r3, r3, #2
    a16c:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
    a16e:	f000 fa7b 	bl	a668 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
    a172:	2406      	movs	r4, #6
    a174:	e7c5      	b.n	a102 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
    a176:	2409      	movs	r4, #9
    a178:	e7c3      	b.n	a102 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
    a17a:	2403      	movs	r4, #3
    a17c:	e7c1      	b.n	a102 <os_sem_pend+0x32>
    a17e:	bf00      	nop
    a180:	20002978 	.word	0x20002978

0000a184 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    a184:	2300      	movs	r3, #0
    a186:	e003      	b.n	a190 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    a188:	4a03      	ldr	r2, [pc, #12]	; (a198 <_clear_stack+0x14>)
    a18a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    a18e:	3301      	adds	r3, #1
    a190:	428b      	cmp	r3, r1
    a192:	dbf9      	blt.n	a188 <_clear_stack+0x4>
    }
}
    a194:	4770      	bx	lr
    a196:	bf00      	nop
    a198:	deadbeef 	.word	0xdeadbeef

0000a19c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
    a19c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    a1a0:	4604      	mov	r4, r0
    a1a2:	460d      	mov	r5, r1
    a1a4:	4617      	mov	r7, r2
    a1a6:	461e      	mov	r6, r3
    a1a8:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
    a1ac:	2250      	movs	r2, #80	; 0x50
    a1ae:	2100      	movs	r1, #0
    a1b0:	f006 fa63 	bl	1067a <memset>

    t->t_func = func;
    a1b4:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    a1b6:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    a1b8:	f000 fa50 	bl	a65c <os_arch_save_sr>
    rc = g_task_id;
    a1bc:	4b2b      	ldr	r3, [pc, #172]	; (a26c <os_task_init+0xd0>)
    a1be:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    a1c0:	1c72      	adds	r2, r6, #1
    a1c2:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    a1c4:	f000 fa50 	bl	a668 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    a1c8:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    a1ca:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a1ce:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
    a1d0:	2301      	movs	r3, #1
    a1d2:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    a1d4:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    a1d6:	2300      	movs	r3, #0
    a1d8:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
    a1da:	f104 0620 	add.w	r6, r4, #32
    a1de:	4630      	mov	r0, r6
    a1e0:	f7ff fd50 	bl	9c84 <os_sanity_check_init>
    if (rc != OS_OK) {
    a1e4:	4605      	mov	r5, r0
    a1e6:	2800      	cmp	r0, #0
    a1e8:	d133      	bne.n	a252 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
    a1ea:	9b07      	ldr	r3, [sp, #28]
    a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a1f0:	d005      	beq.n	a1fe <os_task_init+0x62>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
    a1f2:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
    a1f4:	4630      	mov	r0, r6
    a1f6:	f7ff fd4d 	bl	9c94 <os_sanity_check_register>
        if (rc != OS_OK) {
    a1fa:	4605      	mov	r5, r0
    a1fc:	bb48      	cbnz	r0, a252 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    a1fe:	4649      	mov	r1, r9
    a200:	9808      	ldr	r0, [sp, #32]
    a202:	f7ff ffbf 	bl	a184 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
    a206:	9b08      	ldr	r3, [sp, #32]
    a208:	eb03 0189 	add.w	r1, r3, r9, lsl #2
    a20c:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
    a20e:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
    a212:	464a      	mov	r2, r9
    a214:	4620      	mov	r0, r4
    a216:	f000 fa2f 	bl	a678 <os_arch_task_stack_init>
    a21a:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    a21c:	4b14      	ldr	r3, [pc, #80]	; (a270 <os_task_init+0xd4>)
    a21e:	681b      	ldr	r3, [r3, #0]
    a220:	b15b      	cbz	r3, a23a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
    a222:	7ae1      	ldrb	r1, [r4, #11]
    a224:	7ada      	ldrb	r2, [r3, #11]
    a226:	4291      	cmp	r1, r2
    a228:	d001      	beq.n	a22e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a22c:	e7f8      	b.n	a220 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
    a22e:	2300      	movs	r3, #0
    a230:	461a      	mov	r2, r3
    a232:	4619      	mov	r1, r3
    a234:	4618      	mov	r0, r3
    a236:	f7fe ffc5 	bl	91c4 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    a23a:	6423      	str	r3, [r4, #64]	; 0x40
    a23c:	4b0c      	ldr	r3, [pc, #48]	; (a270 <os_task_init+0xd4>)
    a23e:	685a      	ldr	r2, [r3, #4]
    a240:	6014      	str	r4, [r2, #0]
    a242:	f104 0240 	add.w	r2, r4, #64	; 0x40
    a246:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
    a248:	4620      	mov	r0, r4
    a24a:	f7ff fd89 	bl	9d60 <os_sched_insert>
    a24e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    a250:	b110      	cbz	r0, a258 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
    a252:	4628      	mov	r0, r5
    a254:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    a258:	f7ff f86e 	bl	9338 <os_started>
    a25c:	b908      	cbnz	r0, a262 <os_task_init+0xc6>
    return (0);
    a25e:	4605      	mov	r5, r0
    a260:	e7f7      	b.n	a252 <os_task_init+0xb6>
        os_sched(NULL);
    a262:	2000      	movs	r0, #0
    a264:	f7ff fed2 	bl	a00c <os_sched>
    a268:	e7f3      	b.n	a252 <os_task_init+0xb6>
    a26a:	bf00      	nop
    a26c:	2000379c 	.word	0x2000379c
    a270:	20003794 	.word	0x20003794

0000a274 <os_task_remove>:

int
os_task_remove(struct os_task *t)
{
    a274:	b538      	push	{r3, r4, r5, lr}
    a276:	4604      	mov	r4, r0
    os_sr_t sr;

    /*
     * Can't suspend yourself
     */
    if (t == os_sched_get_current_task()) {
    a278:	f7ff fdb4 	bl	9de4 <os_sched_get_current_task>
    a27c:	4284      	cmp	r4, r0
    a27e:	d016      	beq.n	a2ae <os_task_remove+0x3a>
    }

    /*
     * If state is not READY or SLEEP, assume task has not been initialized
     */
    if (t->t_state != OS_TASK_READY && t->t_state != OS_TASK_SLEEP)
    a280:	7b23      	ldrb	r3, [r4, #12]
    a282:	3b01      	subs	r3, #1
    a284:	b2db      	uxtb	r3, r3
    a286:	2b01      	cmp	r3, #1
    a288:	d813      	bhi.n	a2b2 <os_task_remove+0x3e>
    }

    /*
     * Disallow suspending tasks which are waiting on a lock
     */
    if (t->t_flags & (OS_TASK_FLAG_SEM_WAIT | OS_TASK_FLAG_MUTEX_WAIT |
    a28a:	7b63      	ldrb	r3, [r4, #13]
    a28c:	f013 0f0e 	tst.w	r3, #14
    a290:	d111      	bne.n	a2b6 <os_task_remove+0x42>
    }

    /*
     * Disallowing suspending tasks which are holding a mutex
     */
    if (t->t_lockcnt) {
    a292:	7ba3      	ldrb	r3, [r4, #14]
    a294:	b98b      	cbnz	r3, a2ba <os_task_remove+0x46>
        return OS_EBUSY;
    }

    OS_ENTER_CRITICAL(sr);
    a296:	f000 f9e1 	bl	a65c <os_arch_save_sr>
    a29a:	4605      	mov	r5, r0
    rc = os_sched_remove(t);
    a29c:	4620      	mov	r0, r4
    a29e:	f7ff fdf5 	bl	9e8c <os_sched_remove>
    a2a2:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
    a2a4:	4628      	mov	r0, r5
    a2a6:	f000 f9df 	bl	a668 <os_arch_restore_sr>
    return rc;
}
    a2aa:	4620      	mov	r0, r4
    a2ac:	bd38      	pop	{r3, r4, r5, pc}
        return OS_INVALID_PARM;
    a2ae:	2403      	movs	r4, #3
    a2b0:	e7fb      	b.n	a2aa <os_task_remove+0x36>
        return OS_NOT_STARTED;
    a2b2:	2409      	movs	r4, #9
    a2b4:	e7f9      	b.n	a2aa <os_task_remove+0x36>
        return OS_EBUSY;
    a2b6:	240b      	movs	r4, #11
    a2b8:	e7f7      	b.n	a2aa <os_task_remove+0x36>
        return OS_EBUSY;
    a2ba:	240b      	movs	r4, #11
    a2bc:	e7f5      	b.n	a2aa <os_task_remove+0x36>
	...

0000a2c0 <os_task_info_get_next>:


struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
    a2c0:	b538      	push	{r3, r4, r5, lr}
    a2c2:	468c      	mov	ip, r1
    struct os_task *next;
    os_stack_t *top;
    os_stack_t *bottom;

    if (prev != NULL) {
    a2c4:	b1b8      	cbz	r0, a2f6 <os_task_info_get_next+0x36>
        next = STAILQ_NEXT(prev, t_os_task_list);
    a2c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next == NULL) {
    a2c8:	2d00      	cmp	r5, #0
    a2ca:	d032      	beq.n	a332 <os_task_info_get_next+0x72>
    }

    /* Otherwise, copy OS task information into the OTI structure, and
     * return 1, which means continue
     */
    oti->oti_prio = next->t_prio;
    a2cc:	7aeb      	ldrb	r3, [r5, #11]
    a2ce:	f88c 3000 	strb.w	r3, [ip]
    oti->oti_taskid = next->t_taskid;
    a2d2:	7aab      	ldrb	r3, [r5, #10]
    a2d4:	f88c 3001 	strb.w	r3, [ip, #1]
    oti->oti_state = next->t_state;
    a2d8:	7b2b      	ldrb	r3, [r5, #12]
    a2da:	f88c 3002 	strb.w	r3, [ip, #2]

    top = next->t_stacktop;
    a2de:	686c      	ldr	r4, [r5, #4]
    bottom = next->t_stacktop - next->t_stacksize;
    a2e0:	892b      	ldrh	r3, [r5, #8]
    a2e2:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
    while (bottom < top) {
    a2e6:	42a3      	cmp	r3, r4
    a2e8:	d208      	bcs.n	a2fc <os_task_info_get_next+0x3c>
        if (*bottom != OS_STACK_PATTERN) {
    a2ea:	4a13      	ldr	r2, [pc, #76]	; (a338 <os_task_info_get_next+0x78>)
    a2ec:	6819      	ldr	r1, [r3, #0]
    a2ee:	4291      	cmp	r1, r2
    a2f0:	d104      	bne.n	a2fc <os_task_info_get_next+0x3c>
            break;
        }
        ++bottom;
    a2f2:	3304      	adds	r3, #4
    a2f4:	e7f7      	b.n	a2e6 <os_task_info_get_next+0x26>
        next = STAILQ_FIRST(&g_os_task_list);
    a2f6:	4b11      	ldr	r3, [pc, #68]	; (a33c <os_task_info_get_next+0x7c>)
    a2f8:	681d      	ldr	r5, [r3, #0]
    a2fa:	e7e5      	b.n	a2c8 <os_task_info_get_next+0x8>
    }

    oti->oti_stkusage = (uint16_t) (next->t_stacktop - bottom);
    a2fc:	1ae3      	subs	r3, r4, r3
    a2fe:	f3c3 038f 	ubfx	r3, r3, #2, #16
    a302:	f8ac 3004 	strh.w	r3, [ip, #4]
    oti->oti_stksize = next->t_stacksize;
    a306:	892b      	ldrh	r3, [r5, #8]
    a308:	f8ac 3006 	strh.w	r3, [ip, #6]
    oti->oti_cswcnt = next->t_ctx_sw_cnt;
    a30c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a30e:	f8cc 3008 	str.w	r3, [ip, #8]
    oti->oti_runtime = next->t_run_time;
    a312:	6bab      	ldr	r3, [r5, #56]	; 0x38
    a314:	f8cc 300c 	str.w	r3, [ip, #12]
    oti->oti_last_checkin = next->t_sanity_check.sc_checkin_last;
    a318:	6a2b      	ldr	r3, [r5, #32]
    a31a:	f8cc 3010 	str.w	r3, [ip, #16]
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
        next->t_sanity_check.sc_checkin_itvl;
    a31e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    oti->oti_next_checkin = next->t_sanity_check.sc_checkin_last +
    a320:	4413      	add	r3, r2
    a322:	f8cc 3014 	str.w	r3, [ip, #20]
    strncpy(oti->oti_name, next->t_name, sizeof(oti->oti_name));
    a326:	2220      	movs	r2, #32
    a328:	6929      	ldr	r1, [r5, #16]
    a32a:	f10c 0018 	add.w	r0, ip, #24
    a32e:	f006 f9e3 	bl	106f8 <strncpy>

    return (next);
}
    a332:	4628      	mov	r0, r5
    a334:	bd38      	pop	{r3, r4, r5, pc}
    a336:	bf00      	nop
    a338:	deadbeef 	.word	0xdeadbeef
    a33c:	20003794 	.word	0x20003794

0000a340 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    a340:	b430      	push	{r4, r5}
    a342:	b084      	sub	sp, #16
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    a344:	09c4      	lsrs	r4, r0, #7
    a346:	9400      	str	r4, [sp, #0]
    a348:	2300      	movs	r3, #0
    a34a:	9301      	str	r3, [sp, #4]
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    a34c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a350:	f641 6084 	movw	r0, #7812	; 0x1e84
    a354:	fb00 f303 	mul.w	r3, r0, r3
    a358:	9302      	str	r3, [sp, #8]
    os_timeradd(base, &tvdelta, result);
    a35a:	6848      	ldr	r0, [r1, #4]
    a35c:	680d      	ldr	r5, [r1, #0]
    a35e:	1964      	adds	r4, r4, r5
    a360:	f140 0000 	adc.w	r0, r0, #0
    a364:	6014      	str	r4, [r2, #0]
    a366:	6050      	str	r0, [r2, #4]
    a368:	6889      	ldr	r1, [r1, #8]
    a36a:	440b      	add	r3, r1
    a36c:	6093      	str	r3, [r2, #8]
    a36e:	4908      	ldr	r1, [pc, #32]	; (a390 <os_deltatime+0x50>)
    a370:	428b      	cmp	r3, r1
    a372:	dd09      	ble.n	a388 <os_deltatime+0x48>
    a374:	3401      	adds	r4, #1
    a376:	f140 0000 	adc.w	r0, r0, #0
    a37a:	6014      	str	r4, [r2, #0]
    a37c:	6050      	str	r0, [r2, #4]
    a37e:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
    a382:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a386:	6093      	str	r3, [r2, #8]
}
    a388:	b004      	add	sp, #16
    a38a:	bc30      	pop	{r4, r5}
    a38c:	4770      	bx	lr
    a38e:	bf00      	nop
    a390:	000f423f 	.word	0x000f423f

0000a394 <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
    a394:	b538      	push	{r3, r4, r5, lr}
    a396:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a398:	4b05      	ldr	r3, [pc, #20]	; (a3b0 <os_time_change_notify+0x1c>)
    a39a:	681c      	ldr	r4, [r3, #0]
    a39c:	e004      	b.n	a3a8 <os_time_change_notify+0x14>
        listener->tcl_fn(info, listener->tcl_arg);
    a39e:	6823      	ldr	r3, [r4, #0]
    a3a0:	6861      	ldr	r1, [r4, #4]
    a3a2:	4628      	mov	r0, r5
    a3a4:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
    a3a6:	68a4      	ldr	r4, [r4, #8]
    a3a8:	2c00      	cmp	r4, #0
    a3aa:	d1f8      	bne.n	a39e <os_time_change_notify+0xa>
    }
}
    a3ac:	bd38      	pop	{r3, r4, r5, pc}
    a3ae:	bf00      	nop
    a3b0:	20000108 	.word	0x20000108

0000a3b4 <os_time_tick>:
{
    a3b4:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
    a3b6:	1e04      	subs	r4, r0, #0
    a3b8:	db0d      	blt.n	a3d6 <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
    a3ba:	f000 f94f 	bl	a65c <os_arch_save_sr>
    a3be:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    a3c0:	4911      	ldr	r1, [pc, #68]	; (a408 <os_time_tick+0x54>)
    a3c2:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    a3c4:	18a3      	adds	r3, r4, r2
    a3c6:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
    a3c8:	ea93 0f02 	teq	r3, r2
    a3cc:	d409      	bmi.n	a3e2 <os_time_tick+0x2e>
    OS_EXIT_CRITICAL(sr);
    a3ce:	4628      	mov	r0, r5
    a3d0:	f000 f94a 	bl	a668 <os_arch_restore_sr>
}
    a3d4:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    a3d6:	2300      	movs	r3, #0
    a3d8:	461a      	mov	r2, r3
    a3da:	4619      	mov	r1, r3
    a3dc:	4618      	mov	r0, r3
    a3de:	f7fe fef1 	bl	91c4 <__assert_func>
        delta = g_os_time - basetod.ostime;
    a3e2:	4e0a      	ldr	r6, [pc, #40]	; (a40c <os_time_tick+0x58>)
    a3e4:	4631      	mov	r1, r6
    a3e6:	f851 4b08 	ldr.w	r4, [r1], #8
    a3ea:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a3ec:	460a      	mov	r2, r1
    a3ee:	4620      	mov	r0, r4
    a3f0:	f7ff ffa6 	bl	a340 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    a3f4:	f106 0118 	add.w	r1, r6, #24
    a3f8:	460a      	mov	r2, r1
    a3fa:	4620      	mov	r0, r4
    a3fc:	f7ff ffa0 	bl	a340 <os_deltatime>
        basetod.ostime = g_os_time;
    a400:	4b01      	ldr	r3, [pc, #4]	; (a408 <os_time_tick+0x54>)
    a402:	681b      	ldr	r3, [r3, #0]
    a404:	6033      	str	r3, [r6, #0]
    a406:	e7e2      	b.n	a3ce <os_time_tick+0x1a>
    a408:	200037d0 	.word	0x200037d0
    a40c:	200037a0 	.word	0x200037a0

0000a410 <os_time_get>:
}
    a410:	4b01      	ldr	r3, [pc, #4]	; (a418 <os_time_get+0x8>)
    a412:	6818      	ldr	r0, [r3, #0]
    a414:	4770      	bx	lr
    a416:	bf00      	nop
    a418:	200037d0 	.word	0x200037d0

0000a41c <os_time_advance>:
{
    a41c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    a41e:	1e04      	subs	r4, r0, #0
    a420:	db02      	blt.n	a428 <os_time_advance+0xc>
    if (ticks > 0) {
    a422:	2c00      	cmp	r4, #0
    a424:	dc06      	bgt.n	a434 <os_time_advance+0x18>
}
    a426:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    a428:	2300      	movs	r3, #0
    a42a:	461a      	mov	r2, r3
    a42c:	4619      	mov	r1, r3
    a42e:	4618      	mov	r0, r3
    a430:	f7fe fec8 	bl	91c4 <__assert_func>
        if (!os_started()) {
    a434:	f7fe ff80 	bl	9338 <os_started>
    a438:	b920      	cbnz	r0, a444 <os_time_advance+0x28>
            g_os_time += ticks;
    a43a:	4b08      	ldr	r3, [pc, #32]	; (a45c <os_time_advance+0x40>)
    a43c:	6818      	ldr	r0, [r3, #0]
    a43e:	4420      	add	r0, r4
    a440:	6018      	str	r0, [r3, #0]
    a442:	e7f0      	b.n	a426 <os_time_advance+0xa>
            os_time_tick(ticks);
    a444:	4620      	mov	r0, r4
    a446:	f7ff ffb5 	bl	a3b4 <os_time_tick>
            os_callout_tick();
    a44a:	f7ff f8a9 	bl	95a0 <os_callout_tick>
            os_sched_os_timer_exp();
    a44e:	f7ff fd99 	bl	9f84 <os_sched_os_timer_exp>
            os_sched(NULL);
    a452:	2000      	movs	r0, #0
    a454:	f7ff fdda 	bl	a00c <os_sched>
}
    a458:	e7e5      	b.n	a426 <os_time_advance+0xa>
    a45a:	bf00      	nop
    a45c:	200037d0 	.word	0x200037d0

0000a460 <os_time_delay>:
    if (osticks > 0) {
    a460:	b900      	cbnz	r0, a464 <os_time_delay+0x4>
    a462:	4770      	bx	lr
{
    a464:	b538      	push	{r3, r4, r5, lr}
    a466:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    a468:	f000 f8f8 	bl	a65c <os_arch_save_sr>
    a46c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    a46e:	f7ff fcb9 	bl	9de4 <os_sched_get_current_task>
    a472:	4621      	mov	r1, r4
    a474:	f7ff fcc2 	bl	9dfc <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    a478:	4628      	mov	r0, r5
    a47a:	f000 f8f5 	bl	a668 <os_arch_restore_sr>
        os_sched(NULL);
    a47e:	2000      	movs	r0, #0
    a480:	f7ff fdc4 	bl	a00c <os_sched>
}
    a484:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a488 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    a488:	b570      	push	{r4, r5, r6, lr}
    a48a:	4605      	mov	r5, r0
    a48c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    a48e:	f000 f8e5 	bl	a65c <os_arch_save_sr>
    a492:	4606      	mov	r6, r0
    if (tv != NULL) {
    a494:	b145      	cbz	r5, a4a8 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    a496:	f7ff ffbb 	bl	a410 <os_time_get>
    a49a:	4908      	ldr	r1, [pc, #32]	; (a4bc <os_gettimeofday+0x34>)
    a49c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    a4a0:	462a      	mov	r2, r5
    a4a2:	1ac0      	subs	r0, r0, r3
    a4a4:	f7ff ff4c 	bl	a340 <os_deltatime>
    }

    if (tz != NULL) {
    a4a8:	b114      	cbz	r4, a4b0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    a4aa:	4b04      	ldr	r3, [pc, #16]	; (a4bc <os_gettimeofday+0x34>)
    a4ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
    a4ae:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    a4b0:	4630      	mov	r0, r6
    a4b2:	f000 f8d9 	bl	a668 <os_arch_restore_sr>

    return (0);
}
    a4b6:	2000      	movs	r0, #0
    a4b8:	bd70      	pop	{r4, r5, r6, pc}
    a4ba:	bf00      	nop
    a4bc:	200037a0 	.word	0x200037a0

0000a4c0 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
    a4c0:	4b04      	ldr	r3, [pc, #16]	; (a4d4 <os_time_is_set+0x14>)
    a4c2:	699a      	ldr	r2, [r3, #24]
    a4c4:	69db      	ldr	r3, [r3, #28]
    a4c6:	2a01      	cmp	r2, #1
    a4c8:	f173 0300 	sbcs.w	r3, r3, #0
}
    a4cc:	bfac      	ite	ge
    a4ce:	2001      	movge	r0, #1
    a4d0:	2000      	movlt	r0, #0
    a4d2:	4770      	bx	lr
    a4d4:	200037a0 	.word	0x200037a0

0000a4d8 <os_time_populate_info>:
{
    a4d8:	b510      	push	{r4, lr}
    a4da:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
    a4dc:	4608      	mov	r0, r1
    a4de:	b181      	cbz	r1, a502 <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
    a4e0:	b1a0      	cbz	r0, a50c <os_time_populate_info+0x34>
    if (new_tz == NULL) {
    a4e2:	b1aa      	cbz	r2, a510 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
    a4e4:	4b0b      	ldr	r3, [pc, #44]	; (a514 <os_time_populate_info+0x3c>)
    a4e6:	f103 0118 	add.w	r1, r3, #24
    a4ea:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
    a4ec:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
    a4ee:	3328      	adds	r3, #40	; 0x28
    a4f0:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
    a4f2:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
    a4f4:	f7ff ffe4 	bl	a4c0 <os_time_is_set>
    a4f8:	f080 0001 	eor.w	r0, r0, #1
    a4fc:	7420      	strb	r0, [r4, #16]
    return 0;
    a4fe:	2000      	movs	r0, #0
}
    a500:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
    a502:	2a00      	cmp	r2, #0
    a504:	d1ec      	bne.n	a4e0 <os_time_populate_info+0x8>
        return SYS_EINVAL;
    a506:	f06f 0001 	mvn.w	r0, #1
    a50a:	e7f9      	b.n	a500 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
    a50c:	4802      	ldr	r0, [pc, #8]	; (a518 <os_time_populate_info+0x40>)
    a50e:	e7e8      	b.n	a4e2 <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
    a510:	4a02      	ldr	r2, [pc, #8]	; (a51c <os_time_populate_info+0x44>)
    a512:	e7e7      	b.n	a4e4 <os_time_populate_info+0xc>
    a514:	200037a0 	.word	0x200037a0
    a518:	200037b8 	.word	0x200037b8
    a51c:	200037c8 	.word	0x200037c8

0000a520 <os_settimeofday>:
{
    a520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a524:	b087      	sub	sp, #28
    a526:	4604      	mov	r4, r0
    a528:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
    a52a:	f000 f897 	bl	a65c <os_arch_save_sr>
    a52e:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
    a530:	462a      	mov	r2, r5
    a532:	4621      	mov	r1, r4
    a534:	a801      	add	r0, sp, #4
    a536:	f7ff ffcf 	bl	a4d8 <os_time_populate_info>
    a53a:	4606      	mov	r6, r0
    if (utctime != NULL) {
    a53c:	b1bc      	cbz	r4, a56e <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
    a53e:	f7ff ff67 	bl	a410 <os_time_get>
    a542:	f8df 804c 	ldr.w	r8, [pc, #76]	; a590 <os_settimeofday+0x70>
    a546:	4641      	mov	r1, r8
    a548:	f851 3b08 	ldr.w	r3, [r1], #8
    a54c:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    a550:	460a      	mov	r2, r1
    a552:	4648      	mov	r0, r9
    a554:	f7ff fef4 	bl	a340 <os_deltatime>
        basetod.utctime = *utctime;
    a558:	f108 0c18 	add.w	ip, r8, #24
    a55c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    a560:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
    a564:	f8d8 0000 	ldr.w	r0, [r8]
    a568:	4448      	add	r0, r9
    a56a:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
    a56e:	b115      	cbz	r5, a576 <os_settimeofday+0x56>
        basetod.timezone = *tz;
    a570:	6828      	ldr	r0, [r5, #0]
    a572:	4b07      	ldr	r3, [pc, #28]	; (a590 <os_settimeofday+0x70>)
    a574:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
    a576:	4638      	mov	r0, r7
    a578:	f000 f876 	bl	a668 <os_arch_restore_sr>
    if (notify) {
    a57c:	b11e      	cbz	r6, a586 <os_settimeofday+0x66>
}
    a57e:	2000      	movs	r0, #0
    a580:	b007      	add	sp, #28
    a582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
    a586:	a801      	add	r0, sp, #4
    a588:	f7ff ff04 	bl	a394 <os_time_change_notify>
    a58c:	e7f7      	b.n	a57e <os_settimeofday+0x5e>
    a58e:	bf00      	nop
    a590:	200037a0 	.word	0x200037a0

0000a594 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
    a594:	b5f0      	push	{r4, r5, r6, r7, lr}
    a596:	b085      	sub	sp, #20
    a598:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    a59a:	f000 f85f 	bl	a65c <os_arch_save_sr>
    a59e:	4607      	mov	r7, r0
  tv = basetod.uptime;
    a5a0:	4d0a      	ldr	r5, [pc, #40]	; (a5cc <os_get_uptime+0x38>)
    a5a2:	466c      	mov	r4, sp
    a5a4:	f105 0308 	add.w	r3, r5, #8
    a5a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a5aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    a5ae:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    a5b0:	f7ff ff2e 	bl	a410 <os_time_get>
    a5b4:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    a5b6:	4638      	mov	r0, r7
    a5b8:	f000 f856 	bl	a668 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    a5bc:	4632      	mov	r2, r6
    a5be:	4621      	mov	r1, r4
    a5c0:	4628      	mov	r0, r5
    a5c2:	f7ff febd 	bl	a340 <os_deltatime>
}
    a5c6:	b005      	add	sp, #20
    a5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a5ca:	bf00      	nop
    a5cc:	200037a0 	.word	0x200037a0

0000a5d0 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    a5d0:	b510      	push	{r4, lr}
    a5d2:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    a5d4:	4668      	mov	r0, sp
    a5d6:	f7ff ffdd 	bl	a594 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    a5da:	9a00      	ldr	r2, [sp, #0]
    a5dc:	9c01      	ldr	r4, [sp, #4]
    a5de:	0163      	lsls	r3, r4, #5
    a5e0:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
    a5e4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    a5e8:	ebbc 0c02 	subs.w	ip, ip, r2
    a5ec:	eb63 0304 	sbc.w	r3, r3, r4
    a5f0:	0259      	lsls	r1, r3, #9
    a5f2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
    a5f6:	ea4f 204c 	mov.w	r0, ip, lsl #9
    a5fa:	1883      	adds	r3, r0, r2
    a5fc:	eb44 0101 	adc.w	r1, r4, r1
    a600:	ea4f 1c81 	mov.w	ip, r1, lsl #6
    a604:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
    a608:	0198      	lsls	r0, r3, #6
    a60a:	1ac0      	subs	r0, r0, r3
    a60c:	eb6c 0101 	sbc.w	r1, ip, r1
    a610:	1880      	adds	r0, r0, r2
    a612:	eb44 0401 	adc.w	r4, r4, r1
    a616:	9902      	ldr	r1, [sp, #8]
    a618:	1840      	adds	r0, r0, r1
}
    a61a:	eb44 71e1 	adc.w	r1, r4, r1, asr #31
    a61e:	b004      	add	sp, #16
    a620:	bd10      	pop	{r4, pc}

0000a622 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    a622:	b538      	push	{r3, r4, r5, lr}
    a624:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    a626:	0e41      	lsrs	r1, r0, #25
    a628:	01c4      	lsls	r4, r0, #7
    a62a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a62e:	2300      	movs	r3, #0
    a630:	4620      	mov	r0, r4
    a632:	f01a fce7 	bl	25004 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    a636:	6028      	str	r0, [r5, #0]
    return 0;
}
    a638:	2000      	movs	r0, #0
    a63a:	bd38      	pop	{r3, r4, r5, pc}

0000a63c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    a63c:	b508      	push	{r3, lr}
    os_time_advance(1);
    a63e:	2001      	movs	r0, #1
    a640:	f7ff feec 	bl	a41c <os_time_advance>
}
    a644:	bd08      	pop	{r3, pc}
	...

0000a648 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
    a648:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    a64a:	f7ff fbb3 	bl	9db4 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    a64e:	4b02      	ldr	r3, [pc, #8]	; (a658 <os_arch_ctx_sw+0x10>)
    a650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a654:	605a      	str	r2, [r3, #4]
}
    a656:	bd08      	pop	{r3, pc}
    a658:	e000ed00 	.word	0xe000ed00

0000a65c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a65c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    a660:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
    a662:	f000 0001 	and.w	r0, r0, #1
    a666:	4770      	bx	lr

0000a668 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
    a668:	b900      	cbnz	r0, a66c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    a66a:	b662      	cpsie	i
        __enable_irq();
    }
}
    a66c:	4770      	bx	lr

0000a66e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a66e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
    a672:	f000 0001 	and.w	r0, r0, #1
    a676:	4770      	bx	lr

0000a678 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    a678:	b570      	push	{r4, r5, r6, lr}
    a67a:	4606      	mov	r6, r0
    a67c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    a67e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
    a682:	2309      	movs	r3, #9
    a684:	e003      	b.n	a68e <os_arch_task_stack_init+0x16>
        s[i] = 0;
    a686:	2200      	movs	r2, #0
    a688:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
    a68c:	3301      	adds	r3, #1
    a68e:	2b0d      	cmp	r3, #13
    a690:	ddf9      	ble.n	a686 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    a692:	4620      	mov	r0, r4
    a694:	f000 fbb6 	bl	ae04 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    a698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a69c:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    a6a0:	6973      	ldr	r3, [r6, #20]
    a6a2:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    a6a6:	69b3      	ldr	r3, [r6, #24]
    a6a8:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    a6ac:	f06f 0302 	mvn.w	r3, #2
    a6b0:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    a6b4:	4620      	mov	r0, r4
    a6b6:	bd70      	pop	{r4, r5, r6, pc}

0000a6b8 <os_arch_init>:

void
os_arch_init(void)
{
    a6b8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    a6ba:	4a04      	ldr	r2, [pc, #16]	; (a6cc <os_arch_init+0x14>)
    a6bc:	6953      	ldr	r3, [r2, #20]
    a6be:	f043 0310 	orr.w	r3, r3, #16
    a6c2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    a6c4:	f7fe fe3e 	bl	9344 <os_init_idle_task>
}
    a6c8:	bd08      	pop	{r3, pc}
    a6ca:	bf00      	nop
    a6cc:	e000ed00 	.word	0xe000ed00

0000a6d0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    a6d0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a6d2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a6d6:	b914      	cbnz	r4, a6de <os_arch_os_init+0xe>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a6d8:	f04f 0c00 	mov.w	ip, #0
    a6dc:	e00a      	b.n	a6f4 <os_arch_os_init+0x24>
    err = OS_ERR_IN_ISR;
    a6de:	2007      	movs	r0, #7
    a6e0:	e034      	b.n	a74c <os_arch_os_init+0x7c>
            NVIC->IP[i] = -1;
    a6e2:	f10c 4e60 	add.w	lr, ip, #3758096384	; 0xe0000000
    a6e6:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
    a6ea:	24ff      	movs	r4, #255	; 0xff
    a6ec:	f88e 4300 	strb.w	r4, [lr, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    a6f0:	f10c 0c01 	add.w	ip, ip, #1
    a6f4:	f1bc 0fef 	cmp.w	ip, #239	; 0xef
    a6f8:	d9f3      	bls.n	a6e2 <os_arch_os_init+0x12>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a6fa:	f06f 0c0d 	mvn.w	ip, #13
    a6fe:	e00a      	b.n	a716 <os_arch_os_init+0x46>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    a700:	fa4f fe8c 	sxtb.w	lr, ip
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a704:	4c14      	ldr	r4, [pc, #80]	; (a758 <os_arch_os_init+0x88>)
    a706:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a708:	f10e 0e10 	add.w	lr, lr, #16
    a70c:	4d13      	ldr	r5, [pc, #76]	; (a75c <os_arch_os_init+0x8c>)
    a70e:	f844 502e 	str.w	r5, [r4, lr, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    a712:	f10c 0c01 	add.w	ip, ip, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    a716:	f1bc 0f25 	cmp.w	ip, #37	; 0x25
    a71a:	ddf1      	ble.n	a700 <os_arch_os_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a71c:	4c0e      	ldr	r4, [pc, #56]	; (a758 <os_arch_os_init+0x88>)
    a71e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a720:	4e0f      	ldr	r6, [pc, #60]	; (a760 <os_arch_os_init+0x90>)
    a722:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a724:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a726:	4e0f      	ldr	r6, [pc, #60]	; (a764 <os_arch_os_init+0x94>)
    a728:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a72a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a72c:	4e0e      	ldr	r6, [pc, #56]	; (a768 <os_arch_os_init+0x98>)
    a72e:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a730:	25e0      	movs	r5, #224	; 0xe0
    a732:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    a736:	2520      	movs	r5, #32
    a738:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a73a:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    a73e:	f014 0f01 	tst.w	r4, #1
    a742:	d004      	beq.n	a74e <os_arch_os_init+0x7e>
    SVC_Call(os_arch_init);
    a744:	f8df c024 	ldr.w	ip, [pc, #36]	; a76c <os_arch_os_init+0x9c>
    a748:	df00      	svc	0
        err = OS_OK;
    a74a:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    a74c:	bd70      	pop	{r4, r5, r6, pc}
            os_arch_init();
    a74e:	f7ff ffb3 	bl	a6b8 <os_arch_init>
        err = OS_OK;
    a752:	2000      	movs	r0, #0
    a754:	e7fa      	b.n	a74c <os_arch_os_init+0x7c>
    a756:	bf00      	nop
    a758:	e000ed00 	.word	0xe000ed00
    a75c:	0000aea3 	.word	0x0000aea3
    a760:	0000ae0b 	.word	0x0000ae0b
    a764:	0000ae51 	.word	0x0000ae51
    a768:	0000ae97 	.word	0x0000ae97
    a76c:	0000a6b9 	.word	0x0000a6b9

0000a770 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    a770:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    a772:	f7ff fc45 	bl	a000 <os_sched_next_task>
    a776:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    a778:	f7ff fb3a 	bl	9df0 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    a77c:	6823      	ldr	r3, [r4, #0]
    a77e:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    a780:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    a784:	2106      	movs	r1, #6
    a786:	2080      	movs	r0, #128	; 0x80
    a788:	f013 ff7e 	bl	1e688 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    a78c:	4b03      	ldr	r3, [pc, #12]	; (a79c <os_arch_start+0x2c>)
    a78e:	2201      	movs	r2, #1
    a790:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    a792:	4620      	mov	r0, r4
    a794:	f7ff ff58 	bl	a648 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    a798:	69a0      	ldr	r0, [r4, #24]
    a79a:	bd10      	pop	{r4, pc}
    a79c:	20002978 	.word	0x20002978

0000a7a0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    a7a0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    a7a2:	4816      	ldr	r0, [pc, #88]	; (a7fc <os_arch_os_start+0x5c>)
    a7a4:	6800      	ldr	r0, [r0, #0]
    a7a6:	3804      	subs	r0, #4
    a7a8:	f000 fb22 	bl	adf0 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a7ac:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    a7b0:	bb04      	cbnz	r4, a7f4 <os_arch_os_start+0x54>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    a7b2:	f3ef 8c14 	mrs	ip, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    a7b6:	f00c 0c03 	and.w	ip, ip, #3
    a7ba:	f1bc 0f02 	cmp.w	ip, #2
    a7be:	d00f      	beq.n	a7e0 <os_arch_os_start+0x40>
    a7c0:	d804      	bhi.n	a7cc <os_arch_os_start+0x2c>
    a7c2:	f1bc 0f01 	cmp.w	ip, #1
    a7c6:	d810      	bhi.n	a7ea <os_arch_os_start+0x4a>
    a7c8:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    a7ca:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    a7cc:	f1bc 0f03 	cmp.w	ip, #3
    a7d0:	d10b      	bne.n	a7ea <os_arch_os_start+0x4a>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    a7d2:	4c0b      	ldr	r4, [pc, #44]	; (a800 <os_arch_os_start+0x60>)
    a7d4:	6824      	ldr	r4, [r4, #0]
    a7d6:	f014 0f01 	tst.w	r4, #1
    a7da:	d106      	bne.n	a7ea <os_arch_os_start+0x4a>
                err = OS_ERR_PRIV;
    a7dc:	2008      	movs	r0, #8
    a7de:	e7f4      	b.n	a7ca <os_arch_os_start+0x2a>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    a7e0:	4c07      	ldr	r4, [pc, #28]	; (a800 <os_arch_os_start+0x60>)
    a7e2:	6824      	ldr	r4, [r4, #0]
    a7e4:	f014 0f01 	tst.w	r4, #1
    a7e8:	d106      	bne.n	a7f8 <os_arch_os_start+0x58>
    SVC_Call(os_arch_start);
    a7ea:	f8df c018 	ldr.w	ip, [pc, #24]	; a804 <os_arch_os_start+0x64>
    a7ee:	df00      	svc	0
}
    a7f0:	2000      	movs	r0, #0
    a7f2:	e7ea      	b.n	a7ca <os_arch_os_start+0x2a>
    err = OS_ERR_IN_ISR;
    a7f4:	2007      	movs	r0, #7
    a7f6:	e7e8      	b.n	a7ca <os_arch_os_start+0x2a>
                err = OS_ERR_PRIV;
    a7f8:	2008      	movs	r0, #8
    a7fa:	e7e6      	b.n	a7ca <os_arch_os_start+0x2a>
    a7fc:	200017d0 	.word	0x200017d0
    a800:	200037d4 	.word	0x200037d4
    a804:	0000a771 	.word	0x0000a771

0000a808 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a808:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a80a:	2000      	movs	r0, #0
    a80c:	6018      	str	r0, [r3, #0]
    a80e:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a810:	6098      	str	r0, [r3, #8]
    a812:	60d8      	str	r0, [r3, #12]
    a814:	6118      	str	r0, [r3, #16]
    a816:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a818:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a81a:	611a      	str	r2, [r3, #16]

    return (0);
}
    a81c:	4770      	bx	lr

0000a81e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a81e:	b538      	push	{r3, r4, r5, lr}
    a820:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a822:	f7ff ff1b 	bl	a65c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a826:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a828:	b114      	cbz	r4, a830 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a82a:	6863      	ldr	r3, [r4, #4]
    a82c:	602b      	str	r3, [r5, #0]
    a82e:	b12b      	cbz	r3, a83c <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a830:	f7ff ff1a 	bl	a668 <os_arch_restore_sr>

    if (mp) {
    a834:	b104      	cbz	r4, a838 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a836:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a838:	4620      	mov	r0, r4
    a83a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a83c:	606d      	str	r5, [r5, #4]
    a83e:	e7f7      	b.n	a830 <os_mqueue_get+0x12>

0000a840 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a842:	7953      	ldrb	r3, [r2, #5]
    a844:	2b07      	cmp	r3, #7
    a846:	d916      	bls.n	a876 <os_mqueue_put+0x36>
    a848:	4605      	mov	r5, r0
    a84a:	460e      	mov	r6, r1
    a84c:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a84e:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a852:	f7ff ff03 	bl	a65c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a856:	2300      	movs	r3, #0
    a858:	f844 3f14 	str.w	r3, [r4, #20]!
    a85c:	686b      	ldr	r3, [r5, #4]
    a85e:	601f      	str	r7, [r3, #0]
    a860:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a862:	f7ff ff01 	bl	a668 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a866:	b146      	cbz	r6, a87a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a868:	f105 0108 	add.w	r1, r5, #8
    a86c:	4630      	mov	r0, r6
    a86e:	f7fe ffdd 	bl	982c <os_eventq_put>
    }

    return (0);
    a872:	2000      	movs	r0, #0
    a874:	e000      	b.n	a878 <os_mqueue_put+0x38>
err:
    return (rc);
    a876:	2002      	movs	r0, #2
}
    a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a87a:	2000      	movs	r0, #0
    a87c:	e7fc      	b.n	a878 <os_mqueue_put+0x38>

0000a87e <os_mbuf_get>:
    return (0);
}

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a87e:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a880:	8803      	ldrh	r3, [r0, #0]
    a882:	428b      	cmp	r3, r1
    a884:	d310      	bcc.n	a8a8 <os_mbuf_get+0x2a>
    a886:	4604      	mov	r4, r0
    a888:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a88a:	6840      	ldr	r0, [r0, #4]
    a88c:	f7ff f8c6 	bl	9a1c <os_memblock_get>
    if (!om) {
    a890:	b148      	cbz	r0, a8a6 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a892:	2300      	movs	r3, #0
    a894:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    a896:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    a898:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    a89a:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a89c:	f100 0110 	add.w	r1, r0, #16
    a8a0:	440d      	add	r5, r1
    a8a2:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    a8a4:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a8a6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a8a8:	2000      	movs	r0, #0
    return om;
    a8aa:	e7fc      	b.n	a8a6 <os_mbuf_get+0x28>

0000a8ac <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a8ac:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a8ae:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a8b2:	8803      	ldrh	r3, [r0, #0]
    a8b4:	42ab      	cmp	r3, r5
    a8b6:	d30e      	bcc.n	a8d6 <os_mbuf_get_pkthdr+0x2a>
    a8b8:	2dff      	cmp	r5, #255	; 0xff
    a8ba:	d80e      	bhi.n	a8da <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a8bc:	2100      	movs	r1, #0
    a8be:	f7ff ffde 	bl	a87e <os_mbuf_get>
    if (om) {
    a8c2:	b138      	cbz	r0, a8d4 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    a8c4:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    a8c6:	6803      	ldr	r3, [r0, #0]
    a8c8:	442b      	add	r3, r5
    a8ca:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a8cc:	2300      	movs	r3, #0
    a8ce:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    a8d0:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a8d2:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a8d4:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a8d6:	2000      	movs	r0, #0
    a8d8:	e7fc      	b.n	a8d4 <os_mbuf_get_pkthdr+0x28>
    a8da:	2000      	movs	r0, #0
    return om;
    a8dc:	e7fa      	b.n	a8d4 <os_mbuf_get_pkthdr+0x28>

0000a8de <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a8de:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a8e0:	6883      	ldr	r3, [r0, #8]
    a8e2:	b123      	cbz	r3, a8ee <os_mbuf_free+0x10>
    a8e4:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a8e6:	6858      	ldr	r0, [r3, #4]
    a8e8:	f7ff f8c0 	bl	9a6c <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a8ec:	bd08      	pop	{r3, pc}
    rc = 0;
    a8ee:	2000      	movs	r0, #0
    return (rc);
    a8f0:	e7fc      	b.n	a8ec <os_mbuf_free+0xe>

0000a8f2 <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a8f2:	b158      	cbz	r0, a90c <os_mbuf_free_chain+0x1a>
{
    a8f4:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a8f6:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    a8f8:	f7ff fff1 	bl	a8de <os_mbuf_free>
        if (rc != 0) {
    a8fc:	4603      	mov	r3, r0
    a8fe:	b918      	cbnz	r0, a908 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    a900:	4620      	mov	r0, r4
    while (om != NULL) {
    a902:	2c00      	cmp	r4, #0
    a904:	d1f7      	bne.n	a8f6 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    a906:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a908:	4618      	mov	r0, r3
    a90a:	bd10      	pop	{r4, pc}
    rc = 0;
    a90c:	2300      	movs	r3, #0
}
    a90e:	4618      	mov	r0, r3
    a910:	4770      	bx	lr

0000a912 <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a916:	2800      	cmp	r0, #0
    a918:	d04b      	beq.n	a9b2 <os_mbuf_append+0xa0>
    a91a:	460f      	mov	r7, r1
    a91c:	4691      	mov	r9, r2
    a91e:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a920:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a924:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a926:	461e      	mov	r6, r3
    a928:	68db      	ldr	r3, [r3, #12]
    a92a:	2b00      	cmp	r3, #0
    a92c:	d1fb      	bne.n	a926 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    a92e:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a930:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a932:	f106 0410 	add.w	r4, r6, #16
    a936:	881b      	ldrh	r3, [r3, #0]
    a938:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a93a:	6830      	ldr	r0, [r6, #0]
    a93c:	88f3      	ldrh	r3, [r6, #6]
    a93e:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a940:	1a24      	subs	r4, r4, r0
    a942:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a944:	b164      	cbz	r4, a960 <os_mbuf_append+0x4e>
        if (space > remainder) {
    a946:	454c      	cmp	r4, r9
    a948:	dd00      	ble.n	a94c <os_mbuf_append+0x3a>
            space = remainder;
    a94a:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a94c:	4622      	mov	r2, r4
    a94e:	4639      	mov	r1, r7
    a950:	f005 fe86 	bl	10660 <memcpy>

        last->om_len += space;
    a954:	88f3      	ldrh	r3, [r6, #6]
    a956:	4423      	add	r3, r4
    a958:	80f3      	strh	r3, [r6, #6]
        data += space;
    a95a:	4427      	add	r7, r4
        remainder -= space;
    a95c:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a960:	2d00      	cmp	r5, #0
    a962:	dd16      	ble.n	a992 <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    a964:	2100      	movs	r1, #0
    a966:	4640      	mov	r0, r8
    a968:	f7ff ff89 	bl	a87e <os_mbuf_get>
        if (!new) {
    a96c:	4604      	mov	r4, r0
    a96e:	b180      	cbz	r0, a992 <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a970:	f8b8 2000 	ldrh.w	r2, [r8]
    a974:	42aa      	cmp	r2, r5
    a976:	bfa8      	it	ge
    a978:	462a      	movge	r2, r5
    a97a:	b292      	uxth	r2, r2
    a97c:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a97e:	4639      	mov	r1, r7
    a980:	6800      	ldr	r0, [r0, #0]
    a982:	f005 fe6d 	bl	10660 <memcpy>
        data += new->om_len;
    a986:	88e3      	ldrh	r3, [r4, #6]
    a988:	441f      	add	r7, r3
        remainder -= new->om_len;
    a98a:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    a98c:	60f4      	str	r4, [r6, #12]
        last = new;
    a98e:	4626      	mov	r6, r4
    a990:	e7e6      	b.n	a960 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a992:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a996:	2b07      	cmp	r3, #7
    a998:	d907      	bls.n	a9aa <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a99a:	eba9 0905 	sub.w	r9, r9, r5
    a99e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a9a2:	fa13 f989 	uxtah	r9, r3, r9
    a9a6:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a9aa:	b925      	cbnz	r5, a9b6 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    a9ac:	4628      	mov	r0, r5
    a9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a9b2:	2502      	movs	r5, #2
    a9b4:	e7fa      	b.n	a9ac <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    a9b6:	2501      	movs	r5, #1
    a9b8:	e7f8      	b.n	a9ac <os_mbuf_append+0x9a>

0000a9ba <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a9ba:	b178      	cbz	r0, a9dc <os_mbuf_off+0x22>
{
    a9bc:	b410      	push	{r4}
    a9be:	e002      	b.n	a9c6 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a9c0:	1ac9      	subs	r1, r1, r3
        cur = next;
    a9c2:	4620      	mov	r0, r4
        if (cur == NULL) {
    a9c4:	b13c      	cbz	r4, a9d6 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a9c6:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a9c8:	88c3      	ldrh	r3, [r0, #6]
    a9ca:	428b      	cmp	r3, r1
    a9cc:	dc02      	bgt.n	a9d4 <os_mbuf_off+0x1a>
    a9ce:	d1f7      	bne.n	a9c0 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a9d0:	2c00      	cmp	r4, #0
    a9d2:	d1f5      	bne.n	a9c0 <os_mbuf_off+0x6>
            *out_off = off;
    a9d4:	8011      	strh	r1, [r2, #0]
    }
}
    a9d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    a9da:	4770      	bx	lr
    a9dc:	4770      	bx	lr

0000a9de <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9e0:	4604      	mov	r4, r0
    a9e2:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a9e4:	4616      	mov	r6, r2
    a9e6:	b91a      	cbnz	r2, a9f0 <os_mbuf_copydata+0x12>
        return 0;
    a9e8:	4610      	mov	r0, r2
    a9ea:	e01e      	b.n	aa2a <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    a9ec:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    a9ee:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    a9f0:	2900      	cmp	r1, #0
    a9f2:	dd13      	ble.n	aa1c <os_mbuf_copydata+0x3e>
        if (!m) {
    a9f4:	b1ec      	cbz	r4, aa32 <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    a9f6:	88e2      	ldrh	r2, [r4, #6]
    a9f8:	428a      	cmp	r2, r1
    a9fa:	ddf7      	ble.n	a9ec <os_mbuf_copydata+0xe>
    a9fc:	e00e      	b.n	aa1c <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    a9fe:	88e5      	ldrh	r5, [r4, #6]
    aa00:	1a6d      	subs	r5, r5, r1
    aa02:	42b5      	cmp	r5, r6
    aa04:	bfa8      	it	ge
    aa06:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    aa08:	6823      	ldr	r3, [r4, #0]
    aa0a:	462a      	mov	r2, r5
    aa0c:	4419      	add	r1, r3
    aa0e:	4638      	mov	r0, r7
    aa10:	f005 fe26 	bl	10660 <memcpy>
        len -= count;
    aa14:	1b76      	subs	r6, r6, r5
        udst += count;
    aa16:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    aa18:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    aa1a:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    aa1c:	2e00      	cmp	r6, #0
    aa1e:	dd01      	ble.n	aa24 <os_mbuf_copydata+0x46>
    aa20:	2c00      	cmp	r4, #0
    aa22:	d1ec      	bne.n	a9fe <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    aa24:	2e00      	cmp	r6, #0
    aa26:	dc01      	bgt.n	aa2c <os_mbuf_copydata+0x4e>
    aa28:	2000      	movs	r0, #0
}
    aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    aa2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa30:	e7fb      	b.n	aa2a <os_mbuf_copydata+0x4c>
            return (-1);
    aa32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aa36:	e7f8      	b.n	aa2a <os_mbuf_copydata+0x4c>

0000aa38 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    aa38:	2800      	cmp	r0, #0
    aa3a:	d053      	beq.n	aae4 <os_mbuf_adj+0xac>
{
    aa3c:	b510      	push	{r4, lr}
    aa3e:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    aa40:	2900      	cmp	r1, #0
    aa42:	db1b      	blt.n	aa7c <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    aa44:	4603      	mov	r3, r0
    int len = req_len;
    aa46:	460a      	mov	r2, r1
    aa48:	e005      	b.n	aa56 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    aa4a:	1a80      	subs	r0, r0, r2
    aa4c:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    aa4e:	6818      	ldr	r0, [r3, #0]
    aa50:	4402      	add	r2, r0
    aa52:	601a      	str	r2, [r3, #0]
                len = 0;
    aa54:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    aa56:	b14b      	cbz	r3, aa6c <os_mbuf_adj+0x34>
    aa58:	2a00      	cmp	r2, #0
    aa5a:	dd07      	ble.n	aa6c <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    aa5c:	88d8      	ldrh	r0, [r3, #6]
    aa5e:	4290      	cmp	r0, r2
    aa60:	dcf3      	bgt.n	aa4a <os_mbuf_adj+0x12>
                len -= m->om_len;
    aa62:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    aa64:	2000      	movs	r0, #0
    aa66:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    aa68:	68db      	ldr	r3, [r3, #12]
    aa6a:	e7f4      	b.n	aa56 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    aa6c:	7963      	ldrb	r3, [r4, #5]
    aa6e:	2b07      	cmp	r3, #7
    aa70:	d903      	bls.n	aa7a <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    aa72:	1a52      	subs	r2, r2, r1
    aa74:	8a23      	ldrh	r3, [r4, #16]
    aa76:	441a      	add	r2, r3
    aa78:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    aa7a:	bd10      	pop	{r4, pc}
        len = -len;
    aa7c:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
    aa80:	4603      	mov	r3, r0
        count = 0;
    aa82:	2200      	movs	r2, #0
            count += m->om_len;
    aa84:	88d8      	ldrh	r0, [r3, #6]
    aa86:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    aa88:	469c      	mov	ip, r3
    aa8a:	68db      	ldr	r3, [r3, #12]
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	d1f9      	bne.n	aa84 <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    aa90:	4570      	cmp	r0, lr
    aa92:	da0d      	bge.n	aab0 <os_mbuf_adj+0x78>
        if (count < 0)
    aa94:	188a      	adds	r2, r1, r2
    aa96:	d41a      	bmi.n	aace <os_mbuf_adj+0x96>
        if (OS_MBUF_IS_PKTHDR(m))
    aa98:	7963      	ldrb	r3, [r4, #5]
    aa9a:	2b07      	cmp	r3, #7
    aa9c:	d900      	bls.n	aaa0 <os_mbuf_adj+0x68>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    aa9e:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    aaa0:	2c00      	cmp	r4, #0
    aaa2:	d0ea      	beq.n	aa7a <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    aaa4:	88e3      	ldrh	r3, [r4, #6]
    aaa6:	4293      	cmp	r3, r2
    aaa8:	da13      	bge.n	aad2 <os_mbuf_adj+0x9a>
            count -= m->om_len;
    aaaa:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    aaac:	68e4      	ldr	r4, [r4, #12]
    aaae:	e7f7      	b.n	aaa0 <os_mbuf_adj+0x68>
            m->om_len -= len;
    aab0:	fa1f fe8e 	uxth.w	lr, lr
    aab4:	eba0 000e 	sub.w	r0, r0, lr
    aab8:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    aabc:	7963      	ldrb	r3, [r4, #5]
    aabe:	2b07      	cmp	r3, #7
    aac0:	d9db      	bls.n	aa7a <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    aac2:	8a23      	ldrh	r3, [r4, #16]
    aac4:	eba3 0e0e 	sub.w	lr, r3, lr
    aac8:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
    aacc:	e7d5      	b.n	aa7a <os_mbuf_adj+0x42>
            count = 0;
    aace:	2200      	movs	r2, #0
    aad0:	e7e2      	b.n	aa98 <os_mbuf_adj+0x60>
                m->om_len = count;
    aad2:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    aad4:	68e0      	ldr	r0, [r4, #12]
    aad6:	2800      	cmp	r0, #0
    aad8:	d0cf      	beq.n	aa7a <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    aada:	f7ff ff0a 	bl	a8f2 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    aade:	2300      	movs	r3, #0
    aae0:	60e3      	str	r3, [r4, #12]
    aae2:	e7ca      	b.n	aa7a <os_mbuf_adj+0x42>
    aae4:	4770      	bx	lr

0000aae6 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    aae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aaea:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    aaec:	1e1e      	subs	r6, r3, #0
    aaee:	dd2d      	ble.n	ab4c <os_mbuf_cmpf+0x66>
    aaf0:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    aaf2:	f10d 0206 	add.w	r2, sp, #6
    aaf6:	f7ff ff60 	bl	a9ba <os_mbuf_off>
    aafa:	4604      	mov	r4, r0
    data_off = 0;
    aafc:	f04f 0800 	mov.w	r8, #0
    ab00:	e009      	b.n	ab16 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    ab02:	4445      	add	r5, r8
    ab04:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    ab08:	45b0      	cmp	r8, r6
    ab0a:	d027      	beq.n	ab5c <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    ab0c:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    ab0e:	2300      	movs	r3, #0
    ab10:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    ab14:	b1bc      	cbz	r4, ab46 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    ab16:	b1f4      	cbz	r4, ab56 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    ab18:	eba6 0208 	sub.w	r2, r6, r8
    ab1c:	88e3      	ldrh	r3, [r4, #6]
    ab1e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ab22:	1a1b      	subs	r3, r3, r0
    ab24:	429a      	cmp	r2, r3
    ab26:	bfa8      	it	ge
    ab28:	461a      	movge	r2, r3
    ab2a:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    ab2c:	2d00      	cmp	r5, #0
    ab2e:	d0e8      	beq.n	ab02 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    ab30:	6823      	ldr	r3, [r4, #0]
    ab32:	462a      	mov	r2, r5
    ab34:	eb07 0108 	add.w	r1, r7, r8
    ab38:	4418      	add	r0, r3
    ab3a:	f005 fd6d 	bl	10618 <memcmp>
            if (rc != 0) {
    ab3e:	4603      	mov	r3, r0
    ab40:	2800      	cmp	r0, #0
    ab42:	d0de      	beq.n	ab02 <os_mbuf_cmpf+0x1c>
    ab44:	e003      	b.n	ab4e <os_mbuf_cmpf+0x68>
            return INT_MAX;
    ab46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ab4a:	e000      	b.n	ab4e <os_mbuf_cmpf+0x68>
        return 0;
    ab4c:	2300      	movs	r3, #0
        }
    }
}
    ab4e:	4618      	mov	r0, r3
    ab50:	b002      	add	sp, #8
    ab52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    ab56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ab5a:	e7f8      	b.n	ab4e <os_mbuf_cmpf+0x68>
            return 0;
    ab5c:	2300      	movs	r3, #0
    ab5e:	e7f6      	b.n	ab4e <os_mbuf_cmpf+0x68>

0000ab60 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    ab60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab64:	b083      	sub	sp, #12
    ab66:	4681      	mov	r9, r0
    ab68:	4688      	mov	r8, r1
    ab6a:	4617      	mov	r7, r2
    ab6c:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    ab6e:	f10d 0206 	add.w	r2, sp, #6
    ab72:	f7ff ff22 	bl	a9ba <os_mbuf_off>
    if (cur == NULL) {
    ab76:	4605      	mov	r5, r0
    ab78:	b948      	cbnz	r0, ab8e <os_mbuf_copyinto+0x2e>
        return -1;
    ab7a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    ab7e:	e02d      	b.n	abdc <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    ab80:	b366      	cbz	r6, abdc <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    ab82:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    ab84:	b1ab      	cbz	r3, abb2 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    ab86:	2200      	movs	r2, #0
    ab88:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    ab8c:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    ab8e:	88ec      	ldrh	r4, [r5, #6]
    ab90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ab94:	1ae4      	subs	r4, r4, r3
    ab96:	42b4      	cmp	r4, r6
    ab98:	bfa8      	it	ge
    ab9a:	4634      	movge	r4, r6
        if (copylen > 0) {
    ab9c:	2c00      	cmp	r4, #0
    ab9e:	ddef      	ble.n	ab80 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    aba0:	6828      	ldr	r0, [r5, #0]
    aba2:	4622      	mov	r2, r4
    aba4:	4639      	mov	r1, r7
    aba6:	4418      	add	r0, r3
    aba8:	f005 fd5a 	bl	10660 <memcpy>
            sptr += copylen;
    abac:	4427      	add	r7, r4
            len -= copylen;
    abae:	1b36      	subs	r6, r6, r4
            copylen = 0;
    abb0:	e7e6      	b.n	ab80 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    abb2:	b2b2      	uxth	r2, r6
    abb4:	4639      	mov	r1, r7
    abb6:	4628      	mov	r0, r5
    abb8:	f7ff feab 	bl	a912 <os_mbuf_append>
    if (rc != 0) {
    abbc:	b968      	cbnz	r0, abda <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    abbe:	f899 2005 	ldrb.w	r2, [r9, #5]
    abc2:	2a07      	cmp	r2, #7
    abc4:	d90e      	bls.n	abe4 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    abc6:	4446      	add	r6, r8
    abc8:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    abcc:	4546      	cmp	r6, r8
    abce:	bfb8      	it	lt
    abd0:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    abd2:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    abd6:	4606      	mov	r6, r0
    abd8:	e000      	b.n	abdc <os_mbuf_copyinto+0x7c>
        return rc;
    abda:	4606      	mov	r6, r0
}
    abdc:	4630      	mov	r0, r6
    abde:	b003      	add	sp, #12
    abe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    abe4:	4606      	mov	r6, r0
    abe6:	e7f9      	b.n	abdc <os_mbuf_copyinto+0x7c>

0000abe8 <os_mbuf_extend>:
    second->om_pkthdr_len = 0;
}

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    abe8:	b570      	push	{r4, r5, r6, lr}
    abea:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    abec:	6880      	ldr	r0, [r0, #8]
    abee:	8803      	ldrh	r3, [r0, #0]
    abf0:	428b      	cmp	r3, r1
    abf2:	d325      	bcc.n	ac40 <os_mbuf_extend+0x58>
    abf4:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    abf6:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    abf8:	461c      	mov	r4, r3
    abfa:	68db      	ldr	r3, [r3, #12]
    abfc:	2b00      	cmp	r3, #0
    abfe:	d1fb      	bne.n	abf8 <os_mbuf_extend+0x10>
    omp = om->om_omp;
    ac00:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ac02:	f104 0310 	add.w	r3, r4, #16
    ac06:	8812      	ldrh	r2, [r2, #0]
    ac08:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    ac0a:	6822      	ldr	r2, [r4, #0]
    ac0c:	88e1      	ldrh	r1, [r4, #6]
    ac0e:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ac10:	1a9b      	subs	r3, r3, r2
    ac12:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    ac14:	429d      	cmp	r5, r3
    ac16:	d80b      	bhi.n	ac30 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    ac18:	6820      	ldr	r0, [r4, #0]
    ac1a:	88e3      	ldrh	r3, [r4, #6]
    ac1c:	4418      	add	r0, r3
    last->om_len += len;
    ac1e:	442b      	add	r3, r5
    ac20:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    ac22:	7973      	ldrb	r3, [r6, #5]
    ac24:	2b07      	cmp	r3, #7
    ac26:	d902      	bls.n	ac2e <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    ac28:	8a33      	ldrh	r3, [r6, #16]
    ac2a:	441d      	add	r5, r3
    ac2c:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    ac2e:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    ac30:	2100      	movs	r1, #0
    ac32:	f7ff fe24 	bl	a87e <os_mbuf_get>
        if (newm == NULL) {
    ac36:	2800      	cmp	r0, #0
    ac38:	d0f9      	beq.n	ac2e <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    ac3a:	60e0      	str	r0, [r4, #12]
        last = newm;
    ac3c:	4604      	mov	r4, r0
    ac3e:	e7eb      	b.n	ac18 <os_mbuf_extend+0x30>
        return NULL;
    ac40:	2000      	movs	r0, #0
    ac42:	e7f4      	b.n	ac2e <os_mbuf_extend+0x46>

0000ac44 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    ac44:	4603      	mov	r3, r0
    ac46:	b128      	cbz	r0, ac54 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    ac48:	2000      	movs	r0, #0
    ac4a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    ac4c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    ac4e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    ac50:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    ac52:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    ac54:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    ac56:	4770      	bx	lr

0000ac58 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    ac5a:	4b2c      	ldr	r3, [pc, #176]	; (ad0c <os_mutex_release+0xb4>)
    ac5c:	681b      	ldr	r3, [r3, #0]
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d04b      	beq.n	acfa <os_mutex_release+0xa2>
    ac62:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ac64:	2800      	cmp	r0, #0
    ac66:	d04a      	beq.n	acfe <os_mutex_release+0xa6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    ac68:	f7ff f8bc 	bl	9de4 <os_sched_get_current_task>
    ac6c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    ac6e:	88e3      	ldrh	r3, [r4, #6]
    ac70:	2b00      	cmp	r3, #0
    ac72:	d046      	beq.n	ad02 <os_mutex_release+0xaa>
    ac74:	68a2      	ldr	r2, [r4, #8]
    ac76:	4282      	cmp	r2, r0
    ac78:	d145      	bne.n	ad06 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    ac7a:	2b01      	cmp	r3, #1
    ac7c:	d003      	beq.n	ac86 <os_mutex_release+0x2e>
        --mu->mu_level;
    ac7e:	3b01      	subs	r3, #1
    ac80:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    ac82:	2000      	movs	r0, #0
        goto done;
    ac84:	e03a      	b.n	acfc <os_mutex_release+0xa4>
    }

    OS_ENTER_CRITICAL(sr);
    ac86:	f7ff fce9 	bl	a65c <os_arch_save_sr>
    ac8a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    ac8c:	88e3      	ldrh	r3, [r4, #6]
    ac8e:	3b01      	subs	r3, #1
    ac90:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    ac92:	7aea      	ldrb	r2, [r5, #11]
    ac94:	7963      	ldrb	r3, [r4, #5]
    ac96:	429a      	cmp	r2, r3
    ac98:	d11e      	bne.n	acd8 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    ac9a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    ac9c:	b146      	cbz	r6, acb0 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    ac9e:	69f3      	ldr	r3, [r6, #28]
    aca0:	b1fb      	cbz	r3, ace2 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    aca2:	4630      	mov	r0, r6
    aca4:	f7ff f934 	bl	9f10 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    aca8:	2301      	movs	r3, #1
    acaa:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    acac:	7af3      	ldrb	r3, [r6, #11]
    acae:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    acb0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    acb2:	b116      	cbz	r6, acba <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    acb4:	7bb3      	ldrb	r3, [r6, #14]
    acb6:	3301      	adds	r3, #1
    acb8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    acba:	7bab      	ldrb	r3, [r5, #14]
    acbc:	3b01      	subs	r3, #1
    acbe:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    acc0:	f7ff f99e 	bl	a000 <os_sched_next_task>
    acc4:	4604      	mov	r4, r0
    if (rdy != current) {
    acc6:	4285      	cmp	r5, r0
    acc8:	d010      	beq.n	acec <os_mutex_release+0x94>
        resched = 1;
    acca:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    accc:	4638      	mov	r0, r7
    acce:	f7ff fccb 	bl	a668 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    acd2:	b96d      	cbnz	r5, acf0 <os_mutex_release+0x98>
        os_sched(rdy);
    }

    ret = OS_OK;
    acd4:	2000      	movs	r0, #0
    acd6:	e011      	b.n	acfc <os_mutex_release+0xa4>
        current->t_prio = mu->mu_prio;
    acd8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    acda:	4628      	mov	r0, r5
    acdc:	f7ff f9a8 	bl	a030 <os_sched_resort>
    ace0:	e7db      	b.n	ac9a <os_mutex_release+0x42>
        assert(rdy->t_obj);
    ace2:	461a      	mov	r2, r3
    ace4:	4619      	mov	r1, r3
    ace6:	4618      	mov	r0, r3
    ace8:	f7fe fa6c 	bl	91c4 <__assert_func>
    resched = 0;
    acec:	2500      	movs	r5, #0
    acee:	e7ed      	b.n	accc <os_mutex_release+0x74>
        os_sched(rdy);
    acf0:	4620      	mov	r0, r4
    acf2:	f7ff f98b 	bl	a00c <os_sched>
    ret = OS_OK;
    acf6:	2000      	movs	r0, #0
    acf8:	e000      	b.n	acfc <os_mutex_release+0xa4>
        ret = OS_NOT_STARTED;
    acfa:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    acfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    acfe:	2003      	movs	r0, #3
    ad00:	e7fc      	b.n	acfc <os_mutex_release+0xa4>
        ret = OS_BAD_MUTEX;
    ad02:	2005      	movs	r0, #5
    ad04:	e7fa      	b.n	acfc <os_mutex_release+0xa4>
    ad06:	2005      	movs	r0, #5
    ad08:	e7f8      	b.n	acfc <os_mutex_release+0xa4>
    ad0a:	bf00      	nop
    ad0c:	20002978 	.word	0x20002978

0000ad10 <os_mutex_pend>:

os_error_t
os_mutex_pend(struct os_mutex *mu, os_time_t timeout)
{
    ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    ad12:	4b36      	ldr	r3, [pc, #216]	; (adec <os_mutex_pend+0xdc>)
    ad14:	681b      	ldr	r3, [r3, #0]
    ad16:	2b00      	cmp	r3, #0
    ad18:	d063      	beq.n	ade2 <os_mutex_pend+0xd2>
    ad1a:	4605      	mov	r5, r0
    ad1c:	460e      	mov	r6, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ad1e:	2800      	cmp	r0, #0
    ad20:	d061      	beq.n	ade6 <os_mutex_pend+0xd6>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    ad22:	f7ff fc9b 	bl	a65c <os_arch_save_sr>
    ad26:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    ad28:	f7ff f85c 	bl	9de4 <os_sched_get_current_task>
    ad2c:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    ad2e:	88ea      	ldrh	r2, [r5, #6]
    ad30:	b1a2      	cbz	r2, ad5c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    ad32:	68ab      	ldr	r3, [r5, #8]
    ad34:	4283      	cmp	r3, r0
    ad36:	d01e      	beq.n	ad76 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    ad38:	b326      	cbz	r6, ad84 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    ad3a:	7ad9      	ldrb	r1, [r3, #11]
    ad3c:	7ac2      	ldrb	r2, [r0, #11]
    ad3e:	4291      	cmp	r1, r2
    ad40:	d825      	bhi.n	ad8e <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    ad42:	6828      	ldr	r0, [r5, #0]
    ad44:	b368      	cbz	r0, ada2 <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad46:	4603      	mov	r3, r0
    last = NULL;
    ad48:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad4a:	b32b      	cbz	r3, ad98 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    ad4c:	f894 c00b 	ldrb.w	ip, [r4, #11]
    ad50:	7ada      	ldrb	r2, [r3, #11]
    ad52:	4594      	cmp	ip, r2
    ad54:	d320      	bcc.n	ad98 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    ad56:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ad5a:	e7f6      	b.n	ad4a <os_mutex_pend+0x3a>
        mu->mu_owner = current;
    ad5c:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    ad5e:	7ac3      	ldrb	r3, [r0, #11]
    ad60:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    ad62:	7b83      	ldrb	r3, [r0, #14]
    ad64:	3301      	adds	r3, #1
    ad66:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    ad68:	2301      	movs	r3, #1
    ad6a:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ad6c:	4638      	mov	r0, r7
    ad6e:	f7ff fc7b 	bl	a668 <os_arch_restore_sr>
        ret = OS_OK;
    ad72:	2000      	movs	r0, #0
        goto done;
    ad74:	e032      	b.n	addc <os_mutex_pend+0xcc>
        ++mu->mu_level;
    ad76:	3201      	adds	r2, #1
    ad78:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    ad7a:	4638      	mov	r0, r7
    ad7c:	f7ff fc74 	bl	a668 <os_arch_restore_sr>
        ret = OS_OK;
    ad80:	2000      	movs	r0, #0
        goto done;
    ad82:	e02b      	b.n	addc <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    ad84:	4638      	mov	r0, r7
    ad86:	f7ff fc6f 	bl	a668 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    ad8a:	2006      	movs	r0, #6
        goto done;
    ad8c:	e026      	b.n	addc <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    ad8e:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    ad90:	68a8      	ldr	r0, [r5, #8]
    ad92:	f7ff f94d 	bl	a030 <os_sched_resort>
    ad96:	e7d4      	b.n	ad42 <os_mutex_pend+0x32>
        }
    }

    if (last) {
    ad98:	b119      	cbz	r1, ada2 <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    ad9a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    ad9c:	64e3      	str	r3, [r4, #76]	; 0x4c
    ad9e:	64cc      	str	r4, [r1, #76]	; 0x4c
    ada0:	e001      	b.n	ada6 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    ada2:	64e0      	str	r0, [r4, #76]	; 0x4c
    ada4:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    ada6:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    ada8:	7b63      	ldrb	r3, [r4, #13]
    adaa:	f043 0304 	orr.w	r3, r3, #4
    adae:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    adb0:	4631      	mov	r1, r6
    adb2:	4620      	mov	r0, r4
    adb4:	f7ff f822 	bl	9dfc <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    adb8:	4638      	mov	r0, r7
    adba:	f7ff fc55 	bl	a668 <os_arch_restore_sr>

    os_sched(NULL);
    adbe:	2000      	movs	r0, #0
    adc0:	f7ff f924 	bl	a00c <os_sched>

    OS_ENTER_CRITICAL(sr);
    adc4:	f7ff fc4a 	bl	a65c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    adc8:	7b63      	ldrb	r3, [r4, #13]
    adca:	f023 0304 	bic.w	r3, r3, #4
    adce:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    add0:	f7ff fc4a 	bl	a668 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    add4:	68ab      	ldr	r3, [r5, #8]
    add6:	42a3      	cmp	r3, r4
    add8:	d001      	beq.n	adde <os_mutex_pend+0xce>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    adda:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    addc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_OK;
    adde:	2000      	movs	r0, #0
    ade0:	e7fc      	b.n	addc <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    ade2:	2009      	movs	r0, #9
    ade4:	e7fa      	b.n	addc <os_mutex_pend+0xcc>
        ret = OS_INVALID_PARM;
    ade6:	2003      	movs	r0, #3
    ade8:	e7f8      	b.n	addc <os_mutex_pend+0xcc>
    adea:	bf00      	nop
    adec:	20002978 	.word	0x20002978

0000adf0 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    adf0:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    adf4:	4832      	ldr	r0, [pc, #200]	; (aec0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    adf6:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    adf8:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    adfa:	f380 8814 	msr	CONTROL, r0
        ISB
    adfe:	f3bf 8f6f 	isb	sy
        BX      LR
    ae02:	4770      	bx	lr

0000ae04 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    ae04:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    ae08:	4770      	bx	lr

0000ae0a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    ae0a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    ae0e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    ae10:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    ae14:	b951      	cbnz	r1, ae2c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ae16:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ae1a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    ae1c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ae1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    ae22:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    ae26:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    ae2a:	4770      	bx	lr

0000ae2c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ae2c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    ae2e:	4a25      	ldr	r2, [pc, #148]	; (aec4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    ae30:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    ae32:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    ae34:	d809      	bhi.n	ae4a <SVC_Done>

        LDR     R4,=SVC_Table-4
    ae36:	4c24      	ldr	r4, [pc, #144]	; (aec8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    ae38:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    ae3c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    ae40:	47a0      	blx	r4

        MRS     R12,PSP
    ae42:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    ae46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000ae4a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ae4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    ae4e:	4770      	bx	lr

0000ae50 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    ae50:	4b1e      	ldr	r3, [pc, #120]	; (aecc <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    ae52:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    ae54:	4b1e      	ldr	r3, [pc, #120]	; (aed0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    ae56:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    ae58:	4291      	cmp	r1, r2
        IT      EQ
    ae5a:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    ae5c:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    ae5e:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    ae62:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    ae66:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    ae68:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    ae6c:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    ae70:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    ae74:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    ae76:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    ae7a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    ae7e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    ae82:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    ae84:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    ae88:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    ae8c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    ae90:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    ae94:	4770      	bx	lr

0000ae96 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    ae96:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    ae98:	f7ff fbd0 	bl	a63c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    ae9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    aea0:	4770      	bx	lr

0000aea2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    aea2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    aea6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    aea8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    aeac:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    aeb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    aeb4:	4668      	mov	r0, sp
        BL      os_default_irq
    aeb6:	f7fe f9ab 	bl	9210 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    aeba:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    aebe:	4770      	bx	lr
        LDR     R0,=os_flags
    aec0:	200037d4 	.word	0x200037d4
        LDR     R2,=SVC_Count
    aec4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    aec8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    aecc:	200000f8 	.word	0x200000f8
        LDR     R3,=g_current_task      /* Get current task */
    aed0:	2000378c 	.word	0x2000378c

0000aed4 <uwb_transport>:
static struct nmgr_transport uwb_transport_2;
#endif

static struct nmgr_transport*
uwb_transport(int idx) {
    if (idx == 0) return &uwb_transport_0;
    aed4:	b908      	cbnz	r0, aeda <uwb_transport+0x6>
    aed6:	4802      	ldr	r0, [pc, #8]	; (aee0 <uwb_transport+0xc>)
#endif
#if MYNEWT_VAL(UWB_DEVICE_2)
    if (idx == 2) return &uwb_transport_2;
#endif
    return 0;
}
    aed8:	4770      	bx	lr
    return 0;
    aeda:	2000      	movs	r0, #0
    aedc:	4770      	bx	lr
    aede:	bf00      	nop
    aee0:	200037dc 	.word	0x200037dc

0000aee4 <rx_timeout_cb>:
 *
 * @return true on sucess
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    aee4:	b508      	push	{r3, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    aee6:	6848      	ldr	r0, [r1, #4]
    aee8:	89c3      	ldrh	r3, [r0, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0){
    aeea:	b10b      	cbz	r3, aef0 <rx_timeout_cb+0xc>
        dpl_sem_release(&nmgruwb->sem);
        return true;
    }
    return false;
    aeec:	2000      	movs	r0, #0
}
    aeee:	bd08      	pop	{r3, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    aef0:	3008      	adds	r0, #8
    aef2:	f7ff f8bb 	bl	a06c <os_sem_release>
        return true;
    aef6:	2001      	movs	r0, #1
    aef8:	e7f9      	b.n	aeee <rx_timeout_cb+0xa>

0000aefa <tx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    aefa:	b508      	push	{r3, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    aefc:	6848      	ldr	r0, [r1, #4]
    aefe:	89c3      	ldrh	r3, [r0, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    af00:	b10b      	cbz	r3, af06 <tx_complete_cb+0xc>
        dpl_sem_release(&nmgruwb->sem);
        return true;
    }
    return false;
    af02:	2000      	movs	r0, #0
}
    af04:	bd08      	pop	{r3, pc}
    af06:	3008      	adds	r0, #8
    af08:	f7ff f8b0 	bl	a06c <os_sem_release>
        return true;
    af0c:	2001      	movs	r0, #1
    af0e:	e7f9      	b.n	af04 <tx_complete_cb+0xa>

0000af10 <rx_complete_cb>:
{
    af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nmgr_uwb_instance_t * nmgruwb = (nmgr_uwb_instance_t *)cbs->inst_ptr;
    af12:	684e      	ldr	r6, [r1, #4]
    if(inst->fctrl != NMGR_UWB_FCTRL) {
    af14:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    af18:	f648 0341 	movw	r3, #34881	; 0x8841
    af1c:	429a      	cmp	r2, r3
    af1e:	f040 8093 	bne.w	b048 <rx_complete_cb+0x138>
    af22:	4604      	mov	r4, r0
    nmgr_uwb_frame_header_t *frame = (nmgr_uwb_frame_header_t*)inst->rxbuf;
    af24:	f8d0 54fc 	ldr.w	r5, [r0, #1276]	; 0x4fc
    if(frame->code < UWB_DATA_CODE_NMGR_INVALID ||
    af28:	f8b5 3009 	ldrh.w	r3, [r5, #9]
    af2c:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
    af30:	b29b      	uxth	r3, r3
    af32:	2b0f      	cmp	r3, #15
    af34:	f200 808d 	bhi.w	b052 <rx_complete_cb+0x142>
    if (frame->rpt_count < frame->rpt_max &&
    af38:	7aeb      	ldrb	r3, [r5, #11]
    af3a:	7b2a      	ldrb	r2, [r5, #12]
    af3c:	4293      	cmp	r3, r2
    af3e:	d23e      	bcs.n	afbe <rx_complete_cb+0xae>
        frame->dst_address != inst->my_short_address &&
    af40:	f8b5 1005 	ldrh.w	r1, [r5, #5]
    af44:	f8b0 24b6 	ldrh.w	r2, [r0, #1206]	; 0x4b6
    if (frame->rpt_count < frame->rpt_max &&
    af48:	4291      	cmp	r1, r2
    af4a:	d038      	beq.n	afbe <rx_complete_cb+0xae>
        frame->src_address != inst->my_short_address &&
    af4c:	f8b5 1007 	ldrh.w	r1, [r5, #7]
        frame->dst_address != inst->my_short_address &&
    af50:	428a      	cmp	r2, r1
    af52:	d034      	beq.n	afbe <rx_complete_cb+0xae>
        !(frame->src_address = last_rpt_src && frame->seq_num != last_rpt_seq_num)
    af54:	4a43      	ldr	r2, [pc, #268]	; (b064 <rx_complete_cb+0x154>)
    af56:	8812      	ldrh	r2, [r2, #0]
    af58:	b142      	cbz	r2, af6c <rx_complete_cb+0x5c>
    af5a:	78a9      	ldrb	r1, [r5, #2]
    af5c:	4a42      	ldr	r2, [pc, #264]	; (b068 <rx_complete_cb+0x158>)
    af5e:	7812      	ldrb	r2, [r2, #0]
    af60:	4291      	cmp	r1, r2
    af62:	d001      	beq.n	af68 <rx_complete_cb+0x58>
    af64:	2201      	movs	r2, #1
    af66:	e002      	b.n	af6e <rx_complete_cb+0x5e>
    af68:	2200      	movs	r2, #0
    af6a:	e000      	b.n	af6e <rx_complete_cb+0x5e>
    af6c:	2200      	movs	r2, #0
    af6e:	b291      	uxth	r1, r2
    af70:	f8a5 2007 	strh.w	r2, [r5, #7]
        frame->src_address != inst->my_short_address &&
    af74:	bb19      	cbnz	r1, afbe <rx_complete_cb+0xae>
        last_rpt_src = frame->src_address;
    af76:	4a3b      	ldr	r2, [pc, #236]	; (b064 <rx_complete_cb+0x154>)
    af78:	8011      	strh	r1, [r2, #0]
        last_rpt_seq_num = frame->seq_num;
    af7a:	78a9      	ldrb	r1, [r5, #2]
    af7c:	4a3a      	ldr	r2, [pc, #232]	; (b068 <rx_complete_cb+0x158>)
    af7e:	7011      	strb	r1, [r2, #0]
        frame->rpt_count++;
    af80:	3301      	adds	r3, #1
    af82:	72eb      	strb	r3, [r5, #11]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    af84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    af86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    af88:	2101      	movs	r1, #1
    af8a:	4620      	mov	r0, r4
    af8c:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    af90:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    af92:	2300      	movs	r3, #0
    af94:	461a      	mov	r2, r3
    af96:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    af9a:	4620      	mov	r0, r4
    af9c:	47b8      	blx	r7
    return (dev->uw_funcs->uf_start_tx(dev));
    af9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    afa2:	4620      	mov	r0, r4
    afa4:	4798      	blx	r3
        if (uwb_start_tx(inst).start_tx_error) {
    afa6:	f010 0f04 	tst.w	r0, #4
    afaa:	d108      	bne.n	afbe <rx_complete_cb+0xae>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    afac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afae:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    afb0:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    afb4:	2200      	movs	r2, #0
    afb6:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
    afba:	4620      	mov	r0, r4
    afbc:	47b8      	blx	r7
    if(frame->dst_address != inst->my_short_address && frame->dst_address != 0xffff) {
    afbe:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    afc2:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
    afc6:	4293      	cmp	r3, r2
    afc8:	d003      	beq.n	afd2 <rx_complete_cb+0xc2>
    afca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    afce:	4293      	cmp	r3, r2
    afd0:	d141      	bne.n	b056 <rx_complete_cb+0x146>
    switch(frame->code) {
    afd2:	f8b5 2009 	ldrh.w	r2, [r5, #9]
    afd6:	f240 4321 	movw	r3, #1057	; 0x421
    afda:	429a      	cmp	r2, r3
    afdc:	d001      	beq.n	afe2 <rx_complete_cb+0xd2>
    bool ret = false;
    afde:	2400      	movs	r4, #0
    afe0:	e033      	b.n	b04a <rx_complete_cb+0x13a>
            mbuf = os_msys_get_pkthdr(inst->frame_len - sizeof(nmgr_uwb_frame_header_t),
    afe2:	f8b4 04e2 	ldrh.w	r0, [r4, #1250]	; 0x4e2
    afe6:	380d      	subs	r0, #13
    afe8:	2111      	movs	r1, #17
    afea:	b280      	uxth	r0, r0
    afec:	f7fe fde4 	bl	9bb8 <os_msys_get_pkthdr>
            if (!mbuf) {
    aff0:	4605      	mov	r5, r0
    aff2:	b1e0      	cbz	r0, b02e <rx_complete_cb+0x11e>
            hdr->nmgruwb_inst = nmgruwb;
    aff4:	6186      	str	r6, [r0, #24]
            memcpy(&hdr->uwb_hdr, inst->rxbuf, sizeof(nmgr_uwb_frame_header_t));
    aff6:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    affa:	6818      	ldr	r0, [r3, #0]
    affc:	6859      	ldr	r1, [r3, #4]
    affe:	689a      	ldr	r2, [r3, #8]
    b000:	61e8      	str	r0, [r5, #28]
    b002:	6229      	str	r1, [r5, #32]
    b004:	626a      	str	r2, [r5, #36]	; 0x24
    b006:	7b1b      	ldrb	r3, [r3, #12]
    b008:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
            int rc = os_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(nmgr_uwb_frame_header_t),
    b00c:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
                                      (inst->frame_len - sizeof(nmgr_uwb_frame_header_t)));
    b010:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
            int rc = os_mbuf_copyinto(mbuf, 0, inst->rxbuf + sizeof(nmgr_uwb_frame_header_t),
    b014:	3b0d      	subs	r3, #13
    b016:	320d      	adds	r2, #13
    b018:	2100      	movs	r1, #0
    b01a:	4628      	mov	r0, r5
    b01c:	f7ff fda0 	bl	ab60 <os_mbuf_copyinto>
            if (rc == 0) {
    b020:	b968      	cbnz	r0, b03e <rx_complete_cb+0x12e>
                nmgr_rx_req(&uwb_transport_0, mbuf);
    b022:	4629      	mov	r1, r5
    b024:	4811      	ldr	r0, [pc, #68]	; (b06c <rx_complete_cb+0x15c>)
    b026:	f007 f997 	bl	12358 <nmgr_rx_req>
            ret = true;
    b02a:	2401      	movs	r4, #1
    b02c:	e00d      	b.n	b04a <rx_complete_cb+0x13a>
                printf("ERRMEM %d\n", inst->frame_len - sizeof(nmgr_uwb_frame_header_t) +
    b02e:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    b032:	3104      	adds	r1, #4
    b034:	480e      	ldr	r0, [pc, #56]	; (b070 <rx_complete_cb+0x160>)
    b036:	f005 ff39 	bl	10eac <printf>
            ret = true;
    b03a:	2401      	movs	r4, #1
                break;
    b03c:	e005      	b.n	b04a <rx_complete_cb+0x13a>
                os_mbuf_free_chain(mbuf);
    b03e:	4628      	mov	r0, r5
    b040:	f7ff fc57 	bl	a8f2 <os_mbuf_free_chain>
            ret = true;
    b044:	2401      	movs	r4, #1
    b046:	e000      	b.n	b04a <rx_complete_cb+0x13a>
    bool ret = false;
    b048:	2400      	movs	r4, #0
    b04a:	89f3      	ldrh	r3, [r6, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    b04c:	b12b      	cbz	r3, b05a <rx_complete_cb+0x14a>
}
    b04e:	4620      	mov	r0, r4
    b050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool ret = false;
    b052:	2400      	movs	r4, #0
    b054:	e7f9      	b.n	b04a <rx_complete_cb+0x13a>
    b056:	2400      	movs	r4, #0
    b058:	e7f7      	b.n	b04a <rx_complete_cb+0x13a>
    b05a:	f106 0008 	add.w	r0, r6, #8
    b05e:	f7ff f805 	bl	a06c <os_sem_release>
    b062:	e7f4      	b.n	b04e <rx_complete_cb+0x13e>
    b064:	200037da 	.word	0x200037da
    b068:	200037d8 	.word	0x200037d8
    b06c:	200037dc 	.word	0x200037dc
    b070:	000264b4 	.word	0x000264b4

0000b074 <nmgr_uwb_mtu>:
{
    b074:	b508      	push	{r3, lr}
    struct uwb_dev* inst = uwb_dev_idx_lookup(idx);
    b076:	4608      	mov	r0, r1
    b078:	f7fd fdfc 	bl	8c74 <uwb_dev_idx_lookup>
    return (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? NMGR_UWB_MTU_STD : NMGR_UWB_MTU_EXT;
    b07c:	f890 3513 	ldrb.w	r3, [r0, #1299]	; 0x513
    b080:	b90b      	cbnz	r3, b086 <nmgr_uwb_mtu+0x12>
    b082:	2071      	movs	r0, #113	; 0x71
}
    b084:	bd08      	pop	{r3, pc}
    return (inst->config.rx.phrMode==DWT_PHRMODE_STD) ? NMGR_UWB_MTU_STD : NMGR_UWB_MTU_EXT;
    b086:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    b08a:	e7fb      	b.n	b084 <nmgr_uwb_mtu+0x10>

0000b08c <nmgr_uwb_mtu_0>:
{
    b08c:	b508      	push	{r3, lr}
    return nmgr_uwb_mtu(m, 0);
    b08e:	2100      	movs	r1, #0
    b090:	f7ff fff0 	bl	b074 <nmgr_uwb_mtu>
}
    b094:	bd08      	pop	{r3, pc}

0000b096 <nmgr_uwb_init>:
{
    b096:	b538      	push	{r3, r4, r5, lr}
    assert(dev != NULL);
    b098:	b190      	cbz	r0, b0c0 <nmgr_uwb_init+0x2a>
    b09a:	4605      	mov	r5, r0
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_NMGR_UWB);
    b09c:	2113      	movs	r1, #19
    b09e:	f7fd fe6e 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if(nmgruwb == NULL){
    b0a2:	4604      	mov	r4, r0
    b0a4:	b190      	cbz	r0, b0cc <nmgr_uwb_init+0x36>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    b0a6:	2101      	movs	r1, #1
    b0a8:	f104 0008 	add.w	r0, r4, #8
    b0ac:	f7fe ffd6 	bl	a05c <os_sem_init>
    os_mqueue_init(&nmgruwb->tx_q, NULL, NULL);
    b0b0:	2200      	movs	r2, #0
    b0b2:	4611      	mov	r1, r2
    b0b4:	f104 0010 	add.w	r0, r4, #16
    b0b8:	f7ff fba6 	bl	a808 <os_mqueue_init>
}
    b0bc:	4620      	mov	r0, r4
    b0be:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev != NULL);
    b0c0:	2300      	movs	r3, #0
    b0c2:	461a      	mov	r2, r3
    b0c4:	4619      	mov	r1, r3
    b0c6:	4618      	mov	r0, r3
    b0c8:	f7fe f87c 	bl	91c4 <__assert_func>
        nmgruwb = (nmgr_uwb_instance_t*)malloc(sizeof(nmgr_uwb_instance_t));
    b0cc:	2028      	movs	r0, #40	; 0x28
    b0ce:	f005 fa57 	bl	10580 <malloc>
    b0d2:	4604      	mov	r4, r0
        memset(nmgruwb,0,sizeof(nmgr_uwb_instance_t));
    b0d4:	2228      	movs	r2, #40	; 0x28
    b0d6:	2100      	movs	r1, #0
    b0d8:	f005 facf 	bl	1067a <memset>
        assert(nmgruwb);
    b0dc:	b10c      	cbz	r4, b0e2 <nmgr_uwb_init+0x4c>
        nmgruwb->dev_inst = dev;
    b0de:	6025      	str	r5, [r4, #0]
    b0e0:	e7e1      	b.n	b0a6 <nmgr_uwb_init+0x10>
        assert(nmgruwb);
    b0e2:	2300      	movs	r3, #0
    b0e4:	461a      	mov	r2, r3
    b0e6:	4619      	mov	r1, r3
    b0e8:	4618      	mov	r0, r3
    b0ea:	f7fe f86b 	bl	91c4 <__assert_func>
	...

0000b0f0 <nmgr_uwb_pkg_init>:
{
    b0f0:	b510      	push	{r4, lr}
    SYSINIT_ASSERT_ACTIVE();
    b0f2:	4b11      	ldr	r3, [pc, #68]	; (b138 <nmgr_uwb_pkg_init+0x48>)
    b0f4:	781b      	ldrb	r3, [r3, #0]
    b0f6:	b1cb      	cbz	r3, b12c <nmgr_uwb_pkg_init+0x3c>
    printf("{\"utime\": %lu,\"msg\": \"nmgr_uwb_init\"}\n", os_cputime_ticks_to_usecs(os_cputime_get32()));
    b0f8:	f7fe faae 	bl	9658 <os_cputime_get32>
    b0fc:	4601      	mov	r1, r0
    b0fe:	480f      	ldr	r0, [pc, #60]	; (b13c <nmgr_uwb_pkg_init+0x4c>)
    b100:	f005 fed4 	bl	10eac <printf>
    udev = uwb_dev_idx_lookup(0);
    b104:	2000      	movs	r0, #0
    b106:	f7fd fdb5 	bl	8c74 <uwb_dev_idx_lookup>
    b10a:	4604      	mov	r4, r0
    nmgr_transport_init(uwb_transport(0), nmgr_resp_cb, nmgr_uwb_mtu_0);
    b10c:	2000      	movs	r0, #0
    b10e:	f7ff fee1 	bl	aed4 <uwb_transport>
    b112:	4a0b      	ldr	r2, [pc, #44]	; (b140 <nmgr_uwb_pkg_init+0x50>)
    b114:	490b      	ldr	r1, [pc, #44]	; (b144 <nmgr_uwb_pkg_init+0x54>)
    b116:	f007 f915 	bl	12344 <nmgr_transport_init>
    g_cbs[0].inst_ptr = nmgr_uwb_init(udev);
    b11a:	4620      	mov	r0, r4
    b11c:	f7ff ffbb 	bl	b096 <nmgr_uwb_init>
    b120:	4909      	ldr	r1, [pc, #36]	; (b148 <nmgr_uwb_pkg_init+0x58>)
    b122:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs[0]);
    b124:	4620      	mov	r0, r4
    b126:	f7fd fdd5 	bl	8cd4 <uwb_mac_append_interface>
}
    b12a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    b12c:	461a      	mov	r2, r3
    b12e:	4619      	mov	r1, r3
    b130:	4618      	mov	r0, r3
    b132:	f7fe f847 	bl	91c4 <__assert_func>
    b136:	bf00      	nop
    b138:	2000538c 	.word	0x2000538c
    b13c:	000264c0 	.word	0x000264c0
    b140:	0000b08d 	.word	0x0000b08d
    b144:	0000b33d 	.word	0x0000b33d
    b148:	20000110 	.word	0x20000110

0000b14c <nmgr_uwb_tx>:


int
nmgr_uwb_tx(struct _nmgr_uwb_instance_t *nmgruwb, uint16_t dst_addr, uint16_t code,
            struct os_mbuf *m, uint64_t dx_time)
{
    b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b150:	b08d      	sub	sp, #52	; 0x34
    b152:	4681      	mov	r9, r0
    b154:	460c      	mov	r4, r1
    b156:	4615      	mov	r5, r2
    b158:	4698      	mov	r8, r3
    b15a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    b15e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    struct uwb_dev* inst = nmgruwb->dev_inst;
    b160:	4682      	mov	sl, r0
    b162:	f85a 6b08 	ldr.w	r6, [sl], #8
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b16a:	4650      	mov	r0, sl
    b16c:	f7fe ffb0 	bl	a0d0 <os_sem_pend>
    int mbuf_offset = 0;
    int device_offset;
    dpl_sem_pend(&nmgruwb->sem, DPL_TIMEOUT_NEVER);

    /* Prepare header and write to device */
    uwb_hdr.fctrl = NMGR_UWB_FCTRL;
    b170:	f648 0341 	movw	r3, #34881	; 0x8841
    b174:	f8ad 3020 	strh.w	r3, [sp, #32]
    uwb_hdr.src_address = inst->uid;
    b178:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
    b17c:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
    uwb_hdr.code = code;
    b180:	f8ad 5029 	strh.w	r5, [sp, #41]	; 0x29
    uwb_hdr.dst_address = dst_addr;
    b184:	f8ad 4025 	strh.w	r4, [sp, #37]	; 0x25
    uwb_hdr.seq_num = nmgruwb->frame_seq_num++;
    b188:	f899 3004 	ldrb.w	r3, [r9, #4]
    b18c:	1c5a      	adds	r2, r3, #1
    b18e:	f889 2004 	strb.w	r2, [r9, #4]
    b192:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uwb_hdr.PANID = inst->pan_id;
    b196:	f8b6 34c0 	ldrh.w	r3, [r6, #1216]	; 0x4c0
    b19a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
    uwb_hdr.rpt_count = 0;
    b19e:	2300      	movs	r3, #0
    b1a0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if MYNEWT_VAL(UWB_CCP_ENABLED)
    uwb_hdr.rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    b1a4:	2304      	movs	r3, #4
    b1a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
#else
    uwb_hdr.rpt_max = 0;
#endif

    /* If fx_time provided, delay until then with tx */
    if (dx_time) {
    b1aa:	ea5b 0307 	orrs.w	r3, fp, r7
    b1ae:	d005      	beq.n	b1bc <nmgr_uwb_tx+0x70>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b1b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b1b4:	465a      	mov	r2, fp
    b1b6:	463b      	mov	r3, r7
    b1b8:	4630      	mov	r0, r6
    b1ba:	4788      	blx	r1
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b1bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1be:	6c5c      	ldr	r4, [r3, #68]	; 0x44
    b1c0:	230d      	movs	r3, #13
    b1c2:	2200      	movs	r2, #0
    b1c4:	a908      	add	r1, sp, #32
    b1c6:	4630      	mov	r0, r6
    b1c8:	47a0      	blx	r4
        uwb_set_delay_start(inst, dx_time);
    }

    uwb_write_tx(inst, (uint8_t*)&uwb_hdr, 0, sizeof(nmgr_uwb_frame_header_t));
    device_offset = sizeof(nmgr_uwb_frame_header_t);
    b1ca:	270d      	movs	r7, #13
    int mbuf_offset = 0;
    b1cc:	2500      	movs	r5, #0

    /* Copy the mbuf payload data to the device to be sent */
    while (mbuf_offset < OS_MBUF_PKTLEN(m)) {
    b1ce:	e019      	b.n	b204 <nmgr_uwb_tx+0xb8>
        int cpy_len = OS_MBUF_PKTLEN(m) - mbuf_offset;
    b1d0:	1b64      	subs	r4, r4, r5
        cpy_len = (cpy_len > sizeof(buf)) ? sizeof(buf) : cpy_len;
    b1d2:	2c20      	cmp	r4, #32
    b1d4:	bf28      	it	cs
    b1d6:	2420      	movcs	r4, #32
    return (dev->uw_funcs->uf_hal_noblock_wait(dev, timeout));
    b1d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b1dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b1e0:	4630      	mov	r0, r6
    b1e2:	4798      	blx	r3

        /* The uwb_write_tx can do a dma transfer, make sure we wait
         * until that's finished before updating the buffer */
        uwb_hal_noblock_wait(inst, OS_TIMEOUT_NEVER);
        os_mbuf_copydata(m, mbuf_offset, cpy_len, buf);
    b1e4:	466b      	mov	r3, sp
    b1e6:	4622      	mov	r2, r4
    b1e8:	4629      	mov	r1, r5
    b1ea:	4640      	mov	r0, r8
    b1ec:	f7ff fbf7 	bl	a9de <os_mbuf_copydata>
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b1f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b1f2:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    b1f6:	b2a3      	uxth	r3, r4
    b1f8:	b2ba      	uxth	r2, r7
    b1fa:	4669      	mov	r1, sp
    b1fc:	4630      	mov	r0, r6
    b1fe:	47d8      	blx	fp
        uwb_write_tx(inst, buf, device_offset, cpy_len);
        mbuf_offset += cpy_len;
    b200:	4425      	add	r5, r4
        device_offset += cpy_len;
    b202:	4427      	add	r7, r4
    while (mbuf_offset < OS_MBUF_PKTLEN(m)) {
    b204:	f8b8 4010 	ldrh.w	r4, [r8, #16]
    b208:	42ac      	cmp	r4, r5
    b20a:	dce1      	bgt.n	b1d0 <nmgr_uwb_tx+0x84>
    }

    uwb_write_tx_fctrl(inst, sizeof(nmgr_uwb_frame_header_t) + OS_MBUF_PKTLEN(m), 0);
    b20c:	340d      	adds	r4, #13
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b20e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b210:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    b212:	2300      	movs	r3, #0
    b214:	461a      	mov	r2, r3
    b216:	b2a1      	uxth	r1, r4
    b218:	4630      	mov	r0, r6
    b21a:	47a8      	blx	r5
    return (dev->uw_funcs->uf_start_tx(dev));
    b21c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    b21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b220:	4630      	mov	r0, r6
    b222:	4798      	blx	r3

    if(uwb_start_tx(inst).start_tx_error){
    b224:	f010 0f04 	tst.w	r0, #4
    b228:	d10e      	bne.n	b248 <nmgr_uwb_tx+0xfc>
    b22a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b22e:	4650      	mov	r0, sl
    b230:	f7fe ff4e 	bl	a0d0 <os_sem_pend>
    b234:	f8b9 300e 	ldrh.w	r3, [r9, #14]
        dpl_sem_release(&nmgruwb->sem);
        printf("UWB NMGR_tx: Tx Error \n");
    }

    dpl_sem_pend(&nmgruwb->sem, DPL_TIMEOUT_NEVER);
    if(dpl_sem_get_count(&nmgruwb->sem) == 0) {
    b238:	b16b      	cbz	r3, b256 <nmgr_uwb_tx+0x10a>
        dpl_sem_release(&nmgruwb->sem);
    }

    os_mbuf_free_chain(m);
    b23a:	4640      	mov	r0, r8
    b23c:	f7ff fb59 	bl	a8f2 <os_mbuf_free_chain>
    return 0;
}
    b240:	2000      	movs	r0, #0
    b242:	b00d      	add	sp, #52	; 0x34
    b244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    b248:	4650      	mov	r0, sl
    b24a:	f7fe ff0f 	bl	a06c <os_sem_release>
        printf("UWB NMGR_tx: Tx Error \n");
    b24e:	4804      	ldr	r0, [pc, #16]	; (b260 <nmgr_uwb_tx+0x114>)
    b250:	f005 f8fa 	bl	10448 <puts>
    b254:	e7e9      	b.n	b22a <nmgr_uwb_tx+0xde>
    b256:	4650      	mov	r0, sl
    b258:	f7fe ff08 	bl	a06c <os_sem_release>
    b25c:	e7ed      	b.n	b23a <nmgr_uwb_tx+0xee>
    b25e:	bf00      	nop
    b260:	000264e8 	.word	0x000264e8

0000b264 <uwb_nmgr_process_tx_queue>:

int
uwb_nmgr_process_tx_queue(struct _nmgr_uwb_instance_t *nmgruwb, uint64_t dx_time)
{
    b264:	b5f0      	push	{r4, r5, r6, r7, lr}
    b266:	b085      	sub	sp, #20
    b268:	4604      	mov	r4, r0
    b26a:	4617      	mov	r7, r2
    b26c:	461e      	mov	r6, r3
    int rc;
    uint16_t dst_addr = 0;
    b26e:	2100      	movs	r1, #0
    b270:	f8ad 100e 	strh.w	r1, [sp, #14]
    uint16_t code = 0;
    b274:	f8ad 100c 	strh.w	r1, [sp, #12]
    struct os_mbuf *om;

    if ((om = os_mqueue_get(&nmgruwb->tx_q)) != NULL) {
    b278:	3010      	adds	r0, #16
    b27a:	f7ff fad0 	bl	a81e <os_mqueue_get>
    b27e:	b370      	cbz	r0, b2de <uwb_nmgr_process_tx_queue+0x7a>
    b280:	4605      	mov	r5, r0
        /* Extract dest address and code */
        rc = os_mbuf_copydata(om, OS_MBUF_PKTLEN(om)-4, sizeof(dst_addr), &dst_addr);
    b282:	8a01      	ldrh	r1, [r0, #16]
    b284:	f10d 030e 	add.w	r3, sp, #14
    b288:	2202      	movs	r2, #2
    b28a:	3904      	subs	r1, #4
    b28c:	f7ff fba7 	bl	a9de <os_mbuf_copydata>
        assert(rc==0);
    b290:	b9c8      	cbnz	r0, b2c6 <uwb_nmgr_process_tx_queue+0x62>
        rc = os_mbuf_copydata(om, OS_MBUF_PKTLEN(om)-2, sizeof(code), &code);
    b292:	8a29      	ldrh	r1, [r5, #16]
    b294:	ab03      	add	r3, sp, #12
    b296:	2202      	movs	r2, #2
    b298:	3902      	subs	r1, #2
    b29a:	4628      	mov	r0, r5
    b29c:	f7ff fb9f 	bl	a9de <os_mbuf_copydata>
        assert(rc==0);
    b2a0:	b9b8      	cbnz	r0, b2d2 <uwb_nmgr_process_tx_queue+0x6e>
        os_mbuf_adj(om, -4);
    b2a2:	f06f 0103 	mvn.w	r1, #3
    b2a6:	4628      	mov	r0, r5
    b2a8:	f7ff fbc6 	bl	aa38 <os_mbuf_adj>
        /* nmgr_uwb_tx consumes the mbuf */
        nmgr_uwb_tx(nmgruwb, dst_addr, code, om, dx_time);
    b2ac:	9700      	str	r7, [sp, #0]
    b2ae:	9601      	str	r6, [sp, #4]
    b2b0:	462b      	mov	r3, r5
    b2b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b2b6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b2ba:	4620      	mov	r0, r4
    b2bc:	f7ff ff46 	bl	b14c <nmgr_uwb_tx>
        return true;
    b2c0:	2001      	movs	r0, #1
    }
    return false;
}
    b2c2:	b005      	add	sp, #20
    b2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(rc==0);
    b2c6:	2300      	movs	r3, #0
    b2c8:	461a      	mov	r2, r3
    b2ca:	4619      	mov	r1, r3
    b2cc:	4618      	mov	r0, r3
    b2ce:	f7fd ff79 	bl	91c4 <__assert_func>
        assert(rc==0);
    b2d2:	2300      	movs	r3, #0
    b2d4:	461a      	mov	r2, r3
    b2d6:	4619      	mov	r1, r3
    b2d8:	4618      	mov	r0, r3
    b2da:	f7fd ff73 	bl	91c4 <__assert_func>
    return false;
    b2de:	2000      	movs	r0, #0
    b2e0:	e7ef      	b.n	b2c2 <uwb_nmgr_process_tx_queue+0x5e>
	...

0000b2e4 <uwb_nmgr_queue_tx>:

int
uwb_nmgr_queue_tx(struct _nmgr_uwb_instance_t *nmgruwb, uint16_t dst_addr, uint16_t code, struct os_mbuf *om)
{
    b2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2e6:	4605      	mov	r5, r0
    b2e8:	460e      	mov	r6, r1
    b2ea:	461c      	mov	r4, r3
#if MYNEWT_VAL(NMGR_UWB_LOOPBACK)
    nmgr_rx_req(&uwb_transport_0, om);
#else
    int rc;
    if (code==0) {
    b2ec:	4617      	mov	r7, r2
    b2ee:	b90a      	cbnz	r2, b2f4 <uwb_nmgr_queue_tx+0x10>
         code = UWB_DATA_CODE_NMGR_REQUEST;
    b2f0:	f240 4721 	movw	r7, #1057	; 0x421
    }

    /* Append the code and address to the end of the mbuf */
    uint16_t *p = os_mbuf_extend(om, sizeof(uint16_t)*2);
    b2f4:	2104      	movs	r1, #4
    b2f6:	4620      	mov	r0, r4
    b2f8:	f7ff fc76 	bl	abe8 <os_mbuf_extend>
    if (!p) {
    b2fc:	b148      	cbz	r0, b312 <uwb_nmgr_queue_tx+0x2e>
        printf("##### ERROR uwb_nmgr_q ext_failed\n");
        rc = os_mbuf_free_chain(om);
        return OS_EINVAL;
    }
    p[0] = dst_addr;
    b2fe:	8006      	strh	r6, [r0, #0]
    p[1] = code;
    b300:	8047      	strh	r7, [r0, #2]

    /* Enqueue the packet for sending at the next slot */
    rc = os_mqueue_put(&nmgruwb->tx_q, NULL, om);
    b302:	4622      	mov	r2, r4
    b304:	2100      	movs	r1, #0
    b306:	f105 0010 	add.w	r0, r5, #16
    b30a:	f7ff fa99 	bl	a840 <os_mqueue_put>
    if (rc != 0) {
    b30e:	b940      	cbnz	r0, b322 <uwb_nmgr_queue_tx+0x3e>
        rc = os_mbuf_free_chain(om);
        return OS_EINVAL;
    }
#endif
    return 0;
}
    b310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printf("##### ERROR uwb_nmgr_q ext_failed\n");
    b312:	4808      	ldr	r0, [pc, #32]	; (b334 <uwb_nmgr_queue_tx+0x50>)
    b314:	f005 f898 	bl	10448 <puts>
        rc = os_mbuf_free_chain(om);
    b318:	4620      	mov	r0, r4
    b31a:	f7ff faea 	bl	a8f2 <os_mbuf_free_chain>
        return OS_EINVAL;
    b31e:	2002      	movs	r0, #2
    b320:	e7f6      	b.n	b310 <uwb_nmgr_queue_tx+0x2c>
        printf("##### ERROR uwb_nmgr_q rc:%d\n", rc);
    b322:	4601      	mov	r1, r0
    b324:	4804      	ldr	r0, [pc, #16]	; (b338 <uwb_nmgr_queue_tx+0x54>)
    b326:	f005 fdc1 	bl	10eac <printf>
        rc = os_mbuf_free_chain(om);
    b32a:	4620      	mov	r0, r4
    b32c:	f7ff fae1 	bl	a8f2 <os_mbuf_free_chain>
        return OS_EINVAL;
    b330:	2002      	movs	r0, #2
    b332:	e7ed      	b.n	b310 <uwb_nmgr_queue_tx+0x2c>
    b334:	00026500 	.word	0x00026500
    b338:	00026524 	.word	0x00026524

0000b33c <nmgr_resp_cb>:
{
    b33c:	b538      	push	{r3, r4, r5, lr}
    b33e:	460c      	mov	r4, r1
    if (OS_MBUF_USRHDR_LEN(m) != sizeof(struct nmgr_uwb_usr_hdr)) {
    b340:	794b      	ldrb	r3, [r1, #5]
    b342:	2b19      	cmp	r3, #25
    b344:	d114      	bne.n	b370 <nmgr_resp_cb+0x34>
    struct _nmgr_uwb_instance_t *nmgruwb = hdr->nmgruwb_inst;
    b346:	698d      	ldr	r5, [r1, #24]
    assert(nmgruwb);
    b348:	b1b5      	cbz	r5, b378 <nmgr_resp_cb+0x3c>
    if (hdr->uwb_hdr.dst_address == UWB_BROADCAST_ADDRESS) {
    b34a:	f8b1 2021 	ldrh.w	r2, [r1, #33]	; 0x21
    b34e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b352:	429a      	cmp	r2, r3
    b354:	d016      	beq.n	b384 <nmgr_resp_cb+0x48>
    if (uwb_nmgr_queue_tx(nmgruwb, frame->src_address,
    b356:	460b      	mov	r3, r1
    b358:	f240 4222 	movw	r2, #1058	; 0x422
    b35c:	f8b1 1023 	ldrh.w	r1, [r1, #35]	; 0x23
    b360:	4628      	mov	r0, r5
    b362:	f7ff ffbf 	bl	b2e4 <uwb_nmgr_queue_tx>
    b366:	b9c0      	cbnz	r0, b39a <nmgr_resp_cb+0x5e>
    b368:	89eb      	ldrh	r3, [r5, #14]
    if(dpl_sem_get_count(&nmgruwb->sem) == 0){
    b36a:	b30b      	cbz	r3, b3b0 <nmgr_resp_cb+0x74>
    return 0;
    b36c:	2000      	movs	r0, #0
}
    b36e:	bd38      	pop	{r3, r4, r5, pc}
        rc = os_mbuf_free_chain(m);
    b370:	4608      	mov	r0, r1
    b372:	f7ff fabe 	bl	a8f2 <os_mbuf_free_chain>
        return rc;
    b376:	e7fa      	b.n	b36e <nmgr_resp_cb+0x32>
    assert(nmgruwb);
    b378:	2300      	movs	r3, #0
    b37a:	461a      	mov	r2, r3
    b37c:	4619      	mov	r1, r3
    b37e:	4618      	mov	r0, r3
    b380:	f7fd ff20 	bl	91c4 <__assert_func>
        rc = os_mbuf_free_chain(m);
    b384:	4608      	mov	r0, r1
    b386:	f7ff fab4 	bl	a8f2 <os_mbuf_free_chain>
        assert(rc==0);
    b38a:	2800      	cmp	r0, #0
    b38c:	d0ec      	beq.n	b368 <nmgr_resp_cb+0x2c>
    b38e:	2300      	movs	r3, #0
    b390:	461a      	mov	r2, r3
    b392:	4619      	mov	r1, r3
    b394:	4618      	mov	r0, r3
    b396:	f7fd ff15 	bl	91c4 <__assert_func>
        rc = os_mbuf_free_chain(m);
    b39a:	4620      	mov	r0, r4
    b39c:	f7ff faa9 	bl	a8f2 <os_mbuf_free_chain>
        assert(rc==0);
    b3a0:	2800      	cmp	r0, #0
    b3a2:	d0e1      	beq.n	b368 <nmgr_resp_cb+0x2c>
    b3a4:	2300      	movs	r3, #0
    b3a6:	461a      	mov	r2, r3
    b3a8:	4619      	mov	r1, r3
    b3aa:	4618      	mov	r0, r3
    b3ac:	f7fd ff0a 	bl	91c4 <__assert_func>
    b3b0:	f105 0008 	add.w	r0, r5, #8
    b3b4:	f7fe fe5a 	bl	a06c <os_sem_release>
        assert(rc==0);
    b3b8:	b908      	cbnz	r0, b3be <nmgr_resp_cb+0x82>
    return 0;
    b3ba:	2000      	movs	r0, #0
    b3bc:	e7d7      	b.n	b36e <nmgr_resp_cb+0x32>
        assert(rc==0);
    b3be:	2300      	movs	r3, #0
    b3c0:	461a      	mov	r2, r3
    b3c2:	4619      	mov	r1, r3
    b3c4:	4618      	mov	r0, r3
    b3c6:	f7fd fefd 	bl	91c4 <__assert_func>

0000b3ca <complete_ev_cb>:
 * @param ev    Pointer to os_event.
 *
 * @return true on sucess
 */
static void
complete_ev_cb(struct dpl_event *ev) {
    b3ca:	b510      	push	{r4, lr}
    assert(ev != NULL);
    b3cc:	b160      	cbz	r0, b3e8 <complete_ev_cb+0x1e>
    return ev->ev.ev_arg;
    b3ce:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    b3d0:	b184      	cbz	r4, b3f4 <complete_ev_cb+0x2a>

    struct nrng_instance * nrng = (struct nrng_instance *) dpl_event_get_arg(ev);
    nrng_encode(nrng, nrng->seq_num, nrng->idx);
    b3d2:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
    b3d6:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    b3da:	4620      	mov	r0, r4
    b3dc:	f000 fc1a 	bl	bc14 <nrng_encode>
    nrng->slot_mask = 0;
    b3e0:	2300      	movs	r3, #0
    b3e2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
}
    b3e6:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    b3e8:	2300      	movs	r3, #0
    b3ea:	461a      	mov	r2, r3
    b3ec:	4619      	mov	r1, r3
    b3ee:	4618      	mov	r0, r3
    b3f0:	f7fd fee8 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    b3f4:	2300      	movs	r3, #0
    b3f6:	461a      	mov	r2, r3
    b3f8:	4619      	mov	r1, r3
    b3fa:	4618      	mov	r0, r3
    b3fc:	f7fd fee2 	bl	91c4 <__assert_func>

0000b400 <complete_cb>:
 * @return true on sucess
 */
static bool
complete_cb(struct uwb_dev * udev, struct uwb_mac_interface * cbs)
{
    if (udev->fctrl != FCNTL_IEEE_RANGE_16)
    b400:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    b404:	f648 0341 	movw	r3, #34881	; 0x8841
    b408:	429a      	cmp	r2, r3
    b40a:	d103      	bne.n	b414 <complete_cb+0x14>
        return false;
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
    b40c:	684b      	ldr	r3, [r1, #4]
    b40e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
    b412:	b10a      	cbz	r2, b418 <complete_cb+0x18>
        dpl_event_init(&nrng_event, complete_ev_cb, (void*) nrng);
        dpl_eventq_put(dpl_eventq_dflt_get(), &nrng_event);
    }
    return false;
}
    b414:	2000      	movs	r0, #0
    b416:	4770      	bx	lr
{
    b418:	b510      	push	{r4, lr}
    memset(ev, 0, sizeof(*ev));
    b41a:	4c07      	ldr	r4, [pc, #28]	; (b438 <complete_cb+0x38>)
    b41c:	6022      	str	r2, [r4, #0]
    b41e:	6062      	str	r2, [r4, #4]
    b420:	60a2      	str	r2, [r4, #8]
    b422:	60e2      	str	r2, [r4, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    b424:	4a05      	ldr	r2, [pc, #20]	; (b43c <complete_cb+0x3c>)
    b426:	6062      	str	r2, [r4, #4]
    ev->ev.ev_arg = arg;
    b428:	60a3      	str	r3, [r4, #8]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    b42a:	f7fe faad 	bl	9988 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    b42e:	4621      	mov	r1, r4
    b430:	f7fe f9fc 	bl	982c <os_eventq_put>
}
    b434:	2000      	movs	r0, #0
    b436:	bd10      	pop	{r4, pc}
    b438:	200037fc 	.word	0x200037fc
    b43c:	0000b3cb 	.word	0x0000b3cb

0000b440 <nrng_get_config>:
    if(!(SLIST_EMPTY(&nrng->rng_configs))){
    b440:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b444:	b12b      	cbz	r3, b452 <nrng_get_config+0x12>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
    b446:	b143      	cbz	r3, b45a <nrng_get_config+0x1a>
            if (cfgs != NULL && cfgs->rng_code == code) {
    b448:	881a      	ldrh	r2, [r3, #0]
    b44a:	428a      	cmp	r2, r1
    b44c:	d003      	beq.n	b456 <nrng_get_config+0x16>
        SLIST_FOREACH(cfgs, &nrng->rng_configs, next){
    b44e:	68db      	ldr	r3, [r3, #12]
    b450:	e7f9      	b.n	b446 <nrng_get_config+0x6>
    return &g_config;
    b452:	4803      	ldr	r0, [pc, #12]	; (b460 <nrng_get_config+0x20>)
    b454:	4770      	bx	lr
                return cfgs->config;
    b456:	6898      	ldr	r0, [r3, #8]
    b458:	4770      	bx	lr
    return &g_config;
    b45a:	4801      	ldr	r0, [pc, #4]	; (b460 <nrng_get_config+0x20>)
}
    b45c:	4770      	bx	lr
    b45e:	bf00      	nop
    b460:	2000014c 	.word	0x2000014c

0000b464 <nrng_append_config>:
{
    b464:	b508      	push	{r3, lr}
    assert(nrng);
    b466:	b120      	cbz	r0, b472 <nrng_append_config+0xe>
    if(!(SLIST_EMPTY(&nrng->rng_configs))) {
    b468:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b46c:	b17b      	cbz	r3, b48e <nrng_append_config+0x2a>
        struct rng_config_list * prev_cfgs = NULL;
    b46e:	2200      	movs	r2, #0
    b470:	e007      	b.n	b482 <nrng_append_config+0x1e>
    assert(nrng);
    b472:	2300      	movs	r3, #0
    b474:	461a      	mov	r2, r3
    b476:	4619      	mov	r1, r3
    b478:	4618      	mov	r0, r3
    b47a:	f7fd fea3 	bl	91c4 <__assert_func>
            prev_cfgs = cur_cfgs;
    b47e:	461a      	mov	r2, r3
        SLIST_FOREACH(cur_cfgs, &nrng->rng_configs, next){
    b480:	68db      	ldr	r3, [r3, #12]
    b482:	2b00      	cmp	r3, #0
    b484:	d1fb      	bne.n	b47e <nrng_append_config+0x1a>
        SLIST_INSERT_AFTER(prev_cfgs, cfgs, next);
    b486:	68d3      	ldr	r3, [r2, #12]
    b488:	60cb      	str	r3, [r1, #12]
    b48a:	60d1      	str	r1, [r2, #12]
}
    b48c:	bd08      	pop	{r3, pc}
        SLIST_INSERT_HEAD(&nrng->rng_configs, cfgs, next);
    b48e:	60cb      	str	r3, [r1, #12]
    b490:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
}
    b494:	e7fa      	b.n	b48c <nrng_append_config+0x28>

0000b496 <nrng_config>:
{
    b496:	b508      	push	{r3, lr}
    assert(config);
    b498:	b189      	cbz	r1, b4be <nrng_config+0x28>
    b49a:	460b      	mov	r3, r1
    memcpy(&nrng->config, config, sizeof(struct uwb_rng_config));
    b49c:	f8d1 c000 	ldr.w	ip, [r1]
    b4a0:	6849      	ldr	r1, [r1, #4]
    b4a2:	689a      	ldr	r2, [r3, #8]
    b4a4:	68db      	ldr	r3, [r3, #12]
    b4a6:	f8c0 c0b0 	str.w	ip, [r0, #176]	; 0xb0
    b4aa:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
    b4ae:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
    b4b2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    return nrng->dev_inst->status;
    b4b6:	6803      	ldr	r3, [r0, #0]
}
    b4b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b4bc:	bd08      	pop	{r3, pc}
    assert(config);
    b4be:	2300      	movs	r3, #0
    b4c0:	461a      	mov	r2, r3
    b4c2:	4619      	mov	r1, r3
    b4c4:	4618      	mov	r0, r3
    b4c6:	f7fd fe7d 	bl	91c4 <__assert_func>
	...

0000b4cc <nrng_init>:
{
    b4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4d0:	b082      	sub	sp, #8
    assert(inst);
    b4d2:	2800      	cmp	r0, #0
    b4d4:	d04f      	beq.n	b576 <nrng_init+0xaa>
    b4d6:	460d      	mov	r5, r1
    b4d8:	4690      	mov	r8, r2
    b4da:	461e      	mov	r6, r3
    b4dc:	4607      	mov	r7, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    b4de:	210b      	movs	r1, #11
    b4e0:	f7fd fc4d 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (nrng == NULL) {
    b4e4:	4604      	mov	r4, r0
    b4e6:	2800      	cmp	r0, #0
    b4e8:	d04b      	beq.n	b582 <nrng_init+0xb6>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    b4ea:	2101      	movs	r1, #1
    b4ec:	f104 0064 	add.w	r0, r4, #100	; 0x64
    b4f0:	f7fe fdb4 	bl	a05c <os_sem_init>
    assert(err == DPL_OK);
    b4f4:	2800      	cmp	r0, #0
    b4f6:	d15c      	bne.n	b5b2 <nrng_init+0xe6>
    nrng->dev_inst = inst;
    b4f8:	6027      	str	r7, [r4, #0]
    nrng->nframes = nframes;
    b4fa:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
    nrng->nnodes = nnodes;
    b4fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b502:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    nrng->device_type = type;
    b506:	f884 80a8 	strb.w	r8, [r4, #168]	; 0xa8
    nrng->idx = 0xFFFF;
    b50a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b50e:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
    nrng->resp_count = nrng->t1_final_flag = 0;
    b512:	2300      	movs	r3, #0
    b514:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    b518:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    nrng->seq_num = 0;
    b51c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    if (config != NULL ){
    b520:	b11d      	cbz	r5, b52a <nrng_init+0x5e>
        nrng_config(nrng, config);
    b522:	4629      	mov	r1, r5
    b524:	4620      	mov	r0, r4
    b526:	f7ff ffb6 	bl	b496 <nrng_config>
    nrng->cbs = (struct uwb_mac_interface){
    b52a:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    b52e:	223c      	movs	r2, #60	; 0x3c
    b530:	2100      	movs	r1, #0
    b532:	4628      	mov	r0, r5
    b534:	f005 f8a1 	bl	1067a <memset>
    b538:	260b      	movs	r6, #11
    b53a:	f8a4 606e 	strh.w	r6, [r4, #110]	; 0x6e
    b53e:	6724      	str	r4, [r4, #112]	; 0x70
    b540:	4b22      	ldr	r3, [pc, #136]	; (b5cc <nrng_init+0x100>)
    b542:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    uwb_mac_append_interface(inst, &nrng->cbs);
    b546:	4629      	mov	r1, r5
    b548:	4638      	mov	r0, r7
    b54a:	f7fd fbc3 	bl	8cd4 <uwb_mac_append_interface>
    int rc = stats_init(
    b54e:	1d25      	adds	r5, r4, #4
    b550:	9600      	str	r6, [sp, #0]
    b552:	4b1f      	ldr	r3, [pc, #124]	; (b5d0 <nrng_init+0x104>)
    b554:	4632      	mov	r2, r6
    b556:	2104      	movs	r1, #4
    b558:	4628      	mov	r0, r5
    b55a:	f00a fdf3 	bl	16144 <stats_init>
    b55e:	4606      	mov	r6, r0
        rc |= stats_register("nrng", STATS_HDR(nrng->stat));
    b560:	4629      	mov	r1, r5
    b562:	481c      	ldr	r0, [pc, #112]	; (b5d4 <nrng_init+0x108>)
    b564:	f00a fe72 	bl	1624c <stats_register>
    assert(rc == 0);
    b568:	ea56 0300 	orrs.w	r3, r6, r0
    b56c:	d127      	bne.n	b5be <nrng_init+0xf2>
}
    b56e:	4620      	mov	r0, r4
    b570:	b002      	add	sp, #8
    b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(inst);
    b576:	2300      	movs	r3, #0
    b578:	461a      	mov	r2, r3
    b57a:	4619      	mov	r1, r3
    b57c:	4618      	mov	r0, r3
    b57e:	f7fd fe21 	bl	91c4 <__assert_func>
        nrng = (struct nrng_instance*) malloc(sizeof(struct nrng_instance) + nframes * sizeof(nrng_frame_t * ));
    b582:	f106 0032 	add.w	r0, r6, #50	; 0x32
    b586:	0080      	lsls	r0, r0, #2
    b588:	f004 fffa 	bl	10580 <malloc>
        assert(nrng);
    b58c:	4604      	mov	r4, r0
    b58e:	b150      	cbz	r0, b5a6 <nrng_init+0xda>
        memset(nrng, 0, sizeof(struct nrng_instance));
    b590:	22c8      	movs	r2, #200	; 0xc8
    b592:	2100      	movs	r1, #0
    b594:	f005 f871 	bl	1067a <memset>
        nrng->status.selfmalloc = 1;
    b598:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
    b59c:	f043 0301 	orr.w	r3, r3, #1
    b5a0:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
    b5a4:	e7a1      	b.n	b4ea <nrng_init+0x1e>
        assert(nrng);
    b5a6:	2300      	movs	r3, #0
    b5a8:	461a      	mov	r2, r3
    b5aa:	4619      	mov	r1, r3
    b5ac:	4618      	mov	r0, r3
    b5ae:	f7fd fe09 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    b5b2:	2300      	movs	r3, #0
    b5b4:	461a      	mov	r2, r3
    b5b6:	4619      	mov	r1, r3
    b5b8:	4618      	mov	r0, r3
    b5ba:	f7fd fe03 	bl	91c4 <__assert_func>
    assert(rc == 0);
    b5be:	2300      	movs	r3, #0
    b5c0:	461a      	mov	r2, r3
    b5c2:	4619      	mov	r1, r3
    b5c4:	4618      	mov	r0, r3
    b5c6:	f7fd fdfd 	bl	91c4 <__assert_func>
    b5ca:	bf00      	nop
    b5cc:	0000b401 	.word	0x0000b401
    b5d0:	000265fc 	.word	0x000265fc
    b5d4:	00026544 	.word	0x00026544

0000b5d8 <nrng_pkg_init>:
{
    b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5da:	b091      	sub	sp, #68	; 0x44
    printf("{\"utime\": %lu,\"msg\": \"nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
    b5dc:	f7fe f83c 	bl	9658 <os_cputime_get32>
    b5e0:	4601      	mov	r1, r0
    b5e2:	482f      	ldr	r0, [pc, #188]	; (b6a0 <nrng_pkg_init+0xc8>)
    b5e4:	f005 fc62 	bl	10eac <printf>
    udev = uwb_dev_idx_lookup(0);
    b5e8:	2000      	movs	r0, #0
    b5ea:	f7fd fb43 	bl	8c74 <uwb_dev_idx_lookup>
    nrng = nrng_init(udev, &g_config, (nrng_device_type_t) MYNEWT_VAL(NRNG_DEVICE_TYPE), MYNEWT_VAL(NRNG_NFRAMES), MYNEWT_VAL(NRNG_NNODES));
    b5ee:	2308      	movs	r3, #8
    b5f0:	9300      	str	r3, [sp, #0]
    b5f2:	2310      	movs	r3, #16
    b5f4:	2200      	movs	r2, #0
    b5f6:	492b      	ldr	r1, [pc, #172]	; (b6a4 <nrng_pkg_init+0xcc>)
    b5f8:	f7ff ff68 	bl	b4cc <nrng_init>
    assert(nframes <= nrng->nframes);
    b5fc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    b600:	2b0f      	cmp	r3, #15
    b602:	d919      	bls.n	b638 <nrng_pkg_init+0x60>
    b604:	4607      	mov	r7, r0
    nrng_frame_t default_frame = {
    b606:	2234      	movs	r2, #52	; 0x34
    b608:	2100      	movs	r1, #0
    b60a:	a803      	add	r0, sp, #12
    b60c:	f005 f835 	bl	1067a <memset>
    b610:	f648 0341 	movw	r3, #34881	; 0x8841
    b614:	f8ad 300c 	strh.w	r3, [sp, #12]
    b618:	f06f 0335 	mvn.w	r3, #53	; 0x35
    b61c:	f88d 300f 	strb.w	r3, [sp, #15]
    b620:	f06f 0321 	mvn.w	r3, #33	; 0x21
    b624:	f88d 3010 	strb.w	r3, [sp, #16]
    b628:	234a      	movs	r3, #74	; 0x4a
    b62a:	f88d 3015 	strb.w	r3, [sp, #21]
    b62e:	2301      	movs	r3, #1
    b630:	f88d 3016 	strb.w	r3, [sp, #22]
    for (uint16_t i = 0; i < nframes; i++){
    b634:	2500      	movs	r5, #0
    b636:	e021      	b.n	b67c <nrng_pkg_init+0xa4>
    assert(nframes <= nrng->nframes);
    b638:	2300      	movs	r3, #0
    b63a:	461a      	mov	r2, r3
    b63c:	4619      	mov	r1, r3
    b63e:	4618      	mov	r0, r3
    b640:	f7fd fdc0 	bl	91c4 <__assert_func>
        assert(nrng->frames[i]);
    b644:	2300      	movs	r3, #0
    b646:	461a      	mov	r2, r3
    b648:	4619      	mov	r1, r3
    b64a:	4618      	mov	r0, r3
    b64c:	f7fd fdba 	bl	91c4 <__assert_func>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
    b650:	46a6      	mov	lr, r4
    b652:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    b656:	f8cc 0000 	str.w	r0, [ip]
    b65a:	f8cc 1004 	str.w	r1, [ip, #4]
    b65e:	f8cc 2008 	str.w	r2, [ip, #8]
    b662:	f8cc 300c 	str.w	r3, [ip, #12]
    b666:	4674      	mov	r4, lr
    b668:	f10c 0c10 	add.w	ip, ip, #16
    b66c:	45b6      	cmp	lr, r6
    b66e:	d1ef      	bne.n	b650 <nrng_pkg_init+0x78>
    b670:	f8de 0000 	ldr.w	r0, [lr]
    b674:	f8cc 0000 	str.w	r0, [ip]
    for (uint16_t i = 0; i < nframes; i++){
    b678:	3501      	adds	r5, #1
    b67a:	b2ad      	uxth	r5, r5
    b67c:	2d0f      	cmp	r5, #15
    b67e:	d80c      	bhi.n	b69a <nrng_pkg_init+0xc2>
        nrng->frames[i] = (nrng_frame_t * ) malloc(sizeof(nrng_frame_t));
    b680:	2034      	movs	r0, #52	; 0x34
    b682:	f004 ff7d 	bl	10580 <malloc>
    b686:	f105 0332 	add.w	r3, r5, #50	; 0x32
    b68a:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
        assert(nrng->frames[i]);
    b68e:	2800      	cmp	r0, #0
    b690:	d0d8      	beq.n	b644 <nrng_pkg_init+0x6c>
        memcpy(nrng->frames[i], &default_frame, sizeof(nrng_frame_t));
    b692:	ac03      	add	r4, sp, #12
    b694:	4684      	mov	ip, r0
    b696:	ae0f      	add	r6, sp, #60	; 0x3c
    b698:	e7da      	b.n	b650 <nrng_pkg_init+0x78>
}
    b69a:	b011      	add	sp, #68	; 0x44
    b69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b69e:	bf00      	nop
    b6a0:	0002654c 	.word	0x0002654c
    b6a4:	2000014c 	.word	0x2000014c

0000b6a8 <usecs_to_response>:
usecs_to_response(struct uwb_dev * inst, uint16_t nslots, struct uwb_rng_config * config, uint32_t duration){
    b6a8:	b538      	push	{r3, r4, r5, lr}
    b6aa:	460c      	mov	r4, r1
    b6ac:	461d      	mov	r5, r3
    uint32_t ret = nslots * ( duration + (uint32_t) uwb_dwt_usecs_to_usecs(config->tx_guard_delay));
    b6ae:	6890      	ldr	r0, [r2, #8]
    b6b0:	f018 ff88 	bl	245c4 <__aeabi_ui2d>
    b6b4:	a306      	add	r3, pc, #24	; (adr r3, b6d0 <usecs_to_response+0x28>)
    b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6ba:	f018 fffd 	bl	246b8 <__aeabi_dmul>
    b6be:	f019 fad3 	bl	24c68 <__aeabi_d2uiz>
    b6c2:	4428      	add	r0, r5
}
    b6c4:	fb04 f000 	mul.w	r0, r4, r0
    b6c8:	bd38      	pop	{r3, r4, r5, pc}
    b6ca:	bf00      	nop
    b6cc:	f3af 8000 	nop.w
    b6d0:	90690691 	.word	0x90690691
    b6d4:	3ff06906 	.word	0x3ff06906

0000b6d8 <nrng_request>:
{
    b6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6dc:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    struct uwb_dev * inst = nrng->dev_inst;
    b6e0:	6805      	ldr	r5, [r0, #0]
    assert(inst);
    b6e2:	2d00      	cmp	r5, #0
    b6e4:	f000 80af 	beq.w	b846 <nrng_request+0x16e>
    b6e8:	4604      	mov	r4, r0
    b6ea:	468a      	mov	sl, r1
    b6ec:	4691      	mov	r9, r2
    b6ee:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b6f0:	f100 0b64 	add.w	fp, r0, #100	; 0x64
    b6f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b6f8:	4658      	mov	r0, fp
    b6fa:	f7fe fce9 	bl	a0d0 <os_sem_pend>
    assert(err == DPL_OK);
    b6fe:	2800      	cmp	r0, #0
    b700:	f040 80a7 	bne.w	b852 <nrng_request+0x17a>
    NRNG_STATS_INC(nrng_request);
    b704:	69a3      	ldr	r3, [r4, #24]
    b706:	3301      	adds	r3, #1
    b708:	61a3      	str	r3, [r4, #24]
    struct uwb_rng_config * config = nrng_get_config(nrng, code);
    b70a:	4649      	mov	r1, r9
    b70c:	4620      	mov	r0, r4
    b70e:	f7ff fe97 	bl	b440 <nrng_get_config>
    b712:	4680      	mov	r8, r0
    nrng->nnodes = NumberOfBits(slot_mask); // Number of nodes involved in request
    b714:	4630      	mov	r0, r6
    b716:	f004 fd0b 	bl	10130 <NumberOfBits>
    b71a:	b280      	uxth	r0, r0
    b71c:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
    nrng->idx += nrng->nnodes;
    b720:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
    b724:	4418      	add	r0, r3
    b726:	b280      	uxth	r0, r0
    b728:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    nrng_request_frame_t * frame = (nrng_request_frame_t *) nrng->frames[nrng->idx%nrng->nframes];
    b72c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    b730:	fbb0 f2f3 	udiv	r2, r0, r3
    b734:	fb03 0012 	mls	r0, r3, r2, r0
    b738:	b280      	uxth	r0, r0
    b73a:	3032      	adds	r0, #50	; 0x32
    b73c:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
    frame->seq_num = ++nrng->seq_num;
    b740:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    b744:	3301      	adds	r3, #1
    b746:	b2db      	uxtb	r3, r3
    b748:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    b74c:	708b      	strb	r3, [r1, #2]
    frame->code = code;
    b74e:	f8a1 9009 	strh.w	r9, [r1, #9]
    frame->src_address = inst->uid;
    b752:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    b756:	f8a1 3007 	strh.w	r3, [r1, #7]
    frame->dst_address = dst_address;
    b75a:	f8a1 a005 	strh.w	sl, [r1, #5]
    frame->ptype = PTYPE_CELL;
    b75e:	7acb      	ldrb	r3, [r1, #11]
    b760:	f36f 0301 	bfc	r3, #0, #2
    b764:	72cb      	strb	r3, [r1, #11]
    frame->cell_id = nrng->cell_id = cell_id;
    b766:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    b76a:	f04f 0900 	mov.w	r9, #0
    b76e:	73cf      	strb	r7, [r1, #15]
    b770:	f3c7 2705 	ubfx	r7, r7, #8, #6
    b774:	7c0b      	ldrb	r3, [r1, #16]
    b776:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b77a:	431f      	orrs	r7, r3
    b77c:	740f      	strb	r7, [r1, #16]
    frame->slot_mask = nrng->slot_mask = slot_mask;
    b77e:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
    b782:	f006 0203 	and.w	r2, r6, #3
    b786:	7c0b      	ldrb	r3, [r1, #16]
    b788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b78c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    b790:	740b      	strb	r3, [r1, #16]
    b792:	f3c6 0387 	ubfx	r3, r6, #2, #8
    b796:	744b      	strb	r3, [r1, #17]
    b798:	7c8b      	ldrb	r3, [r1, #18]
    b79a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b79e:	ea43 2696 	orr.w	r6, r3, r6, lsr #10
    b7a2:	748e      	strb	r6, [r1, #18]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    b7a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7a6:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    b7a8:	2313      	movs	r3, #19
    b7aa:	464a      	mov	r2, r9
    b7ac:	4628      	mov	r0, r5
    b7ae:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    b7b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7b2:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    b7b4:	464b      	mov	r3, r9
    b7b6:	464a      	mov	r2, r9
    b7b8:	2113      	movs	r1, #19
    b7ba:	4628      	mov	r0, r5
    b7bc:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    b7be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    b7c2:	2101      	movs	r1, #1
    b7c4:	4628      	mov	r0, r5
    b7c6:	4798      	blx	r3
    uint16_t timeout = config->tx_holdoff_delay         // Remote side turn arround time.
    b7c8:	f8d8 6004 	ldr.w	r6, [r8, #4]
                        + usecs_to_response(inst,       // Remaining timeout
    b7cc:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    b7d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    b7d4:	2114      	movs	r1, #20
    b7d6:	4628      	mov	r0, r5
    b7d8:	4798      	blx	r3
    b7da:	4603      	mov	r3, r0
    b7dc:	4642      	mov	r2, r8
    b7de:	4639      	mov	r1, r7
    b7e0:	4628      	mov	r0, r5
    b7e2:	f7ff ff61 	bl	b6a8 <usecs_to_response>
    b7e6:	4406      	add	r6, r0
                        ) + config->rx_timeout_delay;     // TOF allowance.
    b7e8:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    uint16_t timeout = config->tx_holdoff_delay         // Remote side turn arround time.
    b7ec:	fa11 f186 	uxtah	r1, r1, r6
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    b7f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b7f4:	b289      	uxth	r1, r1
    b7f6:	4628      	mov	r0, r5
    b7f8:	4798      	blx	r3
    if (nrng->control.delay_start_enabled)
    b7fa:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b7fe:	f013 0f01 	tst.w	r3, #1
    b802:	d005      	beq.n	b810 <nrng_request+0x138>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    b804:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b806:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b808:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    b80c:	4628      	mov	r0, r5
    b80e:	4788      	blx	r1
    if(inst->config.dblbuffon_enabled)
    b810:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
    b814:	f013 0f10 	tst.w	r3, #16
    b818:	d004      	beq.n	b824 <nrng_request+0x14c>
        assert(inst->config.rxauto_enable == 0);
    b81a:	f895 352d 	ldrb.w	r3, [r5, #1325]	; 0x52d
    b81e:	f013 0f01 	tst.w	r3, #1
    b822:	d11c      	bne.n	b85e <nrng_request+0x186>
    return (dev->uw_funcs->uf_start_tx(dev));
    b824:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b828:	4628      	mov	r0, r5
    b82a:	4798      	blx	r3
    if (uwb_start_tx(inst).start_tx_error){
    b82c:	f010 0f04 	tst.w	r0, #4
    b830:	d026      	beq.n	b880 <nrng_request+0x1a8>
        NRNG_STATS_INC(start_tx_error);
    b832:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b834:	3301      	adds	r3, #1
    b836:	63e3      	str	r3, [r4, #60]	; 0x3c
    b838:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        if (dpl_sem_get_count(&nrng->sem) == 0) {
    b83c:	b1ab      	cbz	r3, b86a <nrng_request+0x192>
}
    b83e:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    b842:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst);
    b846:	2300      	movs	r3, #0
    b848:	461a      	mov	r2, r3
    b84a:	4619      	mov	r1, r3
    b84c:	4618      	mov	r0, r3
    b84e:	f7fd fcb9 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    b852:	2300      	movs	r3, #0
    b854:	461a      	mov	r2, r3
    b856:	4619      	mov	r1, r3
    b858:	4618      	mov	r0, r3
    b85a:	f7fd fcb3 	bl	91c4 <__assert_func>
        assert(inst->config.rxauto_enable == 0);
    b85e:	2300      	movs	r3, #0
    b860:	461a      	mov	r2, r3
    b862:	4619      	mov	r1, r3
    b864:	4618      	mov	r0, r3
    b866:	f7fd fcad 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b86a:	4658      	mov	r0, fp
    b86c:	f7fe fbfe 	bl	a06c <os_sem_release>
            assert(err == DPL_OK);
    b870:	2800      	cmp	r0, #0
    b872:	d0e4      	beq.n	b83e <nrng_request+0x166>
    b874:	2300      	movs	r3, #0
    b876:	461a      	mov	r2, r3
    b878:	4619      	mov	r1, r3
    b87a:	4618      	mov	r0, r3
    b87c:	f7fd fca2 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b884:	4658      	mov	r0, fp
    b886:	f7fe fc23 	bl	a0d0 <os_sem_pend>
        assert(err == DPL_OK);
    b88a:	b950      	cbnz	r0, b8a2 <nrng_request+0x1ca>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b88c:	4658      	mov	r0, fp
    b88e:	f7fe fbed 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    b892:	2800      	cmp	r0, #0
    b894:	d0d3      	beq.n	b83e <nrng_request+0x166>
    b896:	2300      	movs	r3, #0
    b898:	461a      	mov	r2, r3
    b89a:	4619      	mov	r1, r3
    b89c:	4618      	mov	r0, r3
    b89e:	f7fd fc91 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    b8a2:	2300      	movs	r3, #0
    b8a4:	461a      	mov	r2, r3
    b8a6:	4619      	mov	r1, r3
    b8a8:	4618      	mov	r0, r3
    b8aa:	f7fd fc8b 	bl	91c4 <__assert_func>

0000b8ae <nrng_request_delay_start>:
{
    b8ae:	b5d0      	push	{r4, r6, r7, lr}
    b8b0:	b082      	sub	sp, #8
    b8b2:	4604      	mov	r4, r0
    b8b4:	4616      	mov	r6, r2
    b8b6:	461f      	mov	r7, r3
    nrng->control.delay_start_enabled = 1;
    b8b8:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    b8bc:	f043 0301 	orr.w	r3, r3, #1
    b8c0:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
    nrng->delay = delay;
    b8c4:	e9c0 6716 	strd	r6, r7, [r0, #88]	; 0x58
    nrng_request(nrng, dst_address, code, slot_mask, cell_id);
    b8c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b8cc:	9300      	str	r3, [sp, #0]
    b8ce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    b8d2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    b8d6:	f7ff feff 	bl	b6d8 <nrng_request>
    nrng->control.delay_start_enabled = 0;
    b8da:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b8de:	f36f 0300 	bfc	r3, #0, #1
    b8e2:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
    return nrng->dev_inst->status;
    b8e6:	6823      	ldr	r3, [r4, #0]
}
    b8e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b8ec:	b002      	add	sp, #8
    b8ee:	bdd0      	pop	{r4, r6, r7, pc}

0000b8f0 <nrng_listen>:
{
    b8f0:	b570      	push	{r4, r5, r6, lr}
    b8f2:	4604      	mov	r4, r0
    b8f4:	460e      	mov	r6, r1
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b8f6:	f100 0564 	add.w	r5, r0, #100	; 0x64
    b8fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b8fe:	4628      	mov	r0, r5
    b900:	f7fe fbe6 	bl	a0d0 <os_sem_pend>
    assert(err == DPL_OK);
    b904:	b970      	cbnz	r0, b924 <nrng_listen+0x34>
    NRNG_STATS_INC(nrng_listen);
    b906:	69e3      	ldr	r3, [r4, #28]
    b908:	3301      	adds	r3, #1
    b90a:	61e3      	str	r3, [r4, #28]
    if(uwb_start_rx(nrng->dev_inst).start_rx_error){
    b90c:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_rx(dev));
    b90e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b912:	4798      	blx	r3
    b914:	f010 0f08 	tst.w	r0, #8
    b918:	d10a      	bne.n	b930 <nrng_listen+0x40>
    if (mode == UWB_BLOCKING){
    b91a:	b1be      	cbz	r6, b94c <nrng_listen+0x5c>
   return nrng->dev_inst->status;
    b91c:	6823      	ldr	r3, [r4, #0]
}
    b91e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    b922:	bd70      	pop	{r4, r5, r6, pc}
    assert(err == DPL_OK);
    b924:	2300      	movs	r3, #0
    b926:	461a      	mov	r2, r3
    b928:	4619      	mov	r1, r3
    b92a:	4618      	mov	r0, r3
    b92c:	f7fd fc4a 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b930:	4628      	mov	r0, r5
    b932:	f7fe fb9b 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    b936:	b918      	cbnz	r0, b940 <nrng_listen+0x50>
        NRNG_STATS_INC(start_rx_error);
    b938:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b93a:	3301      	adds	r3, #1
    b93c:	6323      	str	r3, [r4, #48]	; 0x30
    b93e:	e7ec      	b.n	b91a <nrng_listen+0x2a>
        assert(err == DPL_OK);
    b940:	2300      	movs	r3, #0
    b942:	461a      	mov	r2, r3
    b944:	4619      	mov	r1, r3
    b946:	4618      	mov	r0, r3
    b948:	f7fd fc3c 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    b94c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b950:	4628      	mov	r0, r5
    b952:	f7fe fbbd 	bl	a0d0 <os_sem_pend>
        assert(err == DPL_OK);
    b956:	b950      	cbnz	r0, b96e <nrng_listen+0x7e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    b958:	4628      	mov	r0, r5
    b95a:	f7fe fb87 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    b95e:	2800      	cmp	r0, #0
    b960:	d0dc      	beq.n	b91c <nrng_listen+0x2c>
    b962:	2300      	movs	r3, #0
    b964:	461a      	mov	r2, r3
    b966:	4619      	mov	r1, r3
    b968:	4618      	mov	r0, r3
    b96a:	f7fd fc2b 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    b96e:	2300      	movs	r3, #0
    b970:	461a      	mov	r2, r3
    b972:	4619      	mov	r1, r3
    b974:	4618      	mov	r0, r3
    b976:	f7fd fc25 	bl	91c4 <__assert_func>
	...

0000b97c <nrng_twr_to_tof_frames>:
{
    b97c:	b570      	push	{r4, r5, r6, lr}
    b97e:	ed2d 8b02 	vpush	{d8}
    switch(final_frame->code){
    b982:	f8b2 3009 	ldrh.w	r3, [r2, #9]
    b986:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    b98a:	d939      	bls.n	ba00 <nrng_twr_to_tof_frames+0x84>
    b98c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
    b990:	b29b      	uxth	r3, r3
    b992:	2b09      	cmp	r3, #9
    b994:	d861      	bhi.n	ba5a <nrng_twr_to_tof_frames+0xde>
            assert(first_frame != NULL);
    b996:	b3d9      	cbz	r1, ba10 <nrng_twr_to_tof_frames+0x94>
            assert(final_frame != NULL);
    b998:	2a00      	cmp	r2, #0
    b99a:	d03f      	beq.n	ba1c <nrng_twr_to_tof_frames+0xa0>
            T1R = (first_frame->response_timestamp - first_frame->request_timestamp);
    b99c:	6988      	ldr	r0, [r1, #24]
    b99e:	694b      	ldr	r3, [r1, #20]
    b9a0:	1ac3      	subs	r3, r0, r3
    b9a2:	2500      	movs	r5, #0
            T1r = (first_frame->transmission_timestamp  - first_frame->reception_timestamp);
    b9a4:	f8d1 e00f 	ldr.w	lr, [r1, #15]
    b9a8:	f8d1 100b 	ldr.w	r1, [r1, #11]
    b9ac:	ebae 0e01 	sub.w	lr, lr, r1
            T2R = (final_frame->response_timestamp - final_frame->request_timestamp);
    b9b0:	f8d2 c018 	ldr.w	ip, [r2, #24]
    b9b4:	6951      	ldr	r1, [r2, #20]
    b9b6:	ebac 0c01 	sub.w	ip, ip, r1
            T2r = (final_frame->transmission_timestamp - final_frame->reception_timestamp);
    b9ba:	f8d2 400f 	ldr.w	r4, [r2, #15]
    b9be:	f8d2 200b 	ldr.w	r2, [r2, #11]
    b9c2:	1aa4      	subs	r4, r4, r2
            nom = T1R * T2R  - T1r * T2r;
    b9c4:	fba3 210c 	umull	r2, r1, r3, ip
    b9c8:	fbae 0604 	umull	r0, r6, lr, r4
    b9cc:	1a10      	subs	r0, r2, r0
    b9ce:	eb61 0106 	sbc.w	r1, r1, r6
            denom = T1R + T2R  + T1r + T2r;
    b9d2:	eb13 030c 	adds.w	r3, r3, ip
    b9d6:	416d      	adcs	r5, r5
    b9d8:	eb13 030e 	adds.w	r3, r3, lr
    b9dc:	f145 0500 	adc.w	r5, r5, #0
    b9e0:	191c      	adds	r4, r3, r4
    b9e2:	f145 0500 	adc.w	r5, r5, #0
            ToF = (float) (nom) / denom;
    b9e6:	f019 fa7f 	bl	24ee8 <__aeabi_l2f>
    b9ea:	ee08 0a10 	vmov	s16, r0
    b9ee:	4620      	mov	r0, r4
    b9f0:	4629      	mov	r1, r5
    b9f2:	f019 fa79 	bl	24ee8 <__aeabi_l2f>
    b9f6:	ee07 0a90 	vmov	s15, r0
    b9fa:	ee88 0a27 	vdiv.f32	s0, s16, s15
            break;
    b9fe:	e004      	b.n	ba0a <nrng_twr_to_tof_frames+0x8e>
    switch(final_frame->code){
    ba00:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
    ba04:	d210      	bcs.n	ba28 <nrng_twr_to_tof_frames+0xac>
    ba06:	ed9f 0a16 	vldr	s0, [pc, #88]	; ba60 <nrng_twr_to_tof_frames+0xe4>
}
    ba0a:	ecbd 8b02 	vpop	{d8}
    ba0e:	bd70      	pop	{r4, r5, r6, pc}
            assert(first_frame != NULL);
    ba10:	2300      	movs	r3, #0
    ba12:	461a      	mov	r2, r3
    ba14:	4619      	mov	r1, r3
    ba16:	4618      	mov	r0, r3
    ba18:	f7fd fbd4 	bl	91c4 <__assert_func>
            assert(final_frame != NULL);
    ba1c:	2300      	movs	r3, #0
    ba1e:	461a      	mov	r2, r3
    ba20:	4619      	mov	r1, r3
    ba22:	4618      	mov	r0, r3
    ba24:	f7fd fbce 	bl	91c4 <__assert_func>
            assert(first_frame != NULL);
    ba28:	b189      	cbz	r1, ba4e <nrng_twr_to_tof_frames+0xd2>
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    ba2a:	698a      	ldr	r2, [r1, #24]
    ba2c:	694b      	ldr	r3, [r1, #20]
    ba2e:	1ad2      	subs	r2, r2, r3
                    -  (first_frame->transmission_timestamp - first_frame->reception_timestamp))/2.0f;
    ba30:	f8d1 300b 	ldr.w	r3, [r1, #11]
    ba34:	f8d1 100f 	ldr.w	r1, [r1, #15]
    ba38:	1a5b      	subs	r3, r3, r1
    ba3a:	4413      	add	r3, r2
    ba3c:	ee00 3a10 	vmov	s0, r3
    ba40:	eeb8 0a40 	vcvt.f32.u32	s0, s0
            ToF = ((first_frame->response_timestamp - first_frame->request_timestamp)
    ba44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    ba48:	ee20 0a27 	vmul.f32	s0, s0, s15
            break;
    ba4c:	e7dd      	b.n	ba0a <nrng_twr_to_tof_frames+0x8e>
            assert(first_frame != NULL);
    ba4e:	2300      	movs	r3, #0
    ba50:	461a      	mov	r2, r3
    ba52:	4619      	mov	r1, r3
    ba54:	4618      	mov	r0, r3
    ba56:	f7fd fbb5 	bl	91c4 <__assert_func>
    switch(final_frame->code){
    ba5a:	ed9f 0a01 	vldr	s0, [pc, #4]	; ba60 <nrng_twr_to_tof_frames+0xe4>
    return ToF;
    ba5e:	e7d4      	b.n	ba0a <nrng_twr_to_tof_frames+0x8e>
    ba60:	00000000 	.word	0x00000000

0000ba64 <nrng_get_ranges>:
{
    ba64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba68:	4605      	mov	r5, r0
    ba6a:	4689      	mov	r9, r1
    ba6c:	4616      	mov	r6, r2
    ba6e:	4698      	mov	r8, r3
    for (uint16_t i=0; i < nranges; i++){
    ba70:	2400      	movs	r4, #0
    uint32_t mask = 0;
    ba72:	4627      	mov	r7, r4
    for (uint16_t i=0; i < nranges; i++){
    ba74:	e001      	b.n	ba7a <nrng_get_ranges+0x16>
    ba76:	3401      	adds	r4, #1
    ba78:	b2a4      	uxth	r4, r4
    ba7a:	42b4      	cmp	r4, r6
    ba7c:	d224      	bcs.n	bac8 <nrng_get_ranges+0x64>
        if (nrng->slot_mask & 1UL << i){
    ba7e:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    ba82:	fa20 f304 	lsr.w	r3, r0, r4
    ba86:	f013 0f01 	tst.w	r3, #1
    ba8a:	d0f4      	beq.n	ba76 <nrng_get_ranges+0x12>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    ba8c:	2201      	movs	r2, #1
    ba8e:	fa02 fa04 	lsl.w	sl, r2, r4
    ba92:	4651      	mov	r1, sl
    ba94:	f004 fb66 	bl	10164 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    ba98:	fa18 f080 	uxtah	r0, r8, r0
    ba9c:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    baa0:	fb90 f2f3 	sdiv	r2, r0, r3
    baa4:	fb03 0012 	mls	r0, r3, r2, r0
    baa8:	3032      	adds	r0, #50	; 0x32
    baaa:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == nrng->seq_num){
    baae:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    bab2:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bab6:	d1de      	bne.n	ba76 <nrng_get_ranges+0x12>
    bab8:	789a      	ldrb	r2, [r3, #2]
    baba:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    babe:	429a      	cmp	r2, r3
    bac0:	d1d9      	bne.n	ba76 <nrng_get_ranges+0x12>
                mask |= 1UL << i;
    bac2:	ea47 070a 	orr.w	r7, r7, sl
    bac6:	e7d6      	b.n	ba76 <nrng_get_ranges+0x12>
    for (uint16_t i=0; i < nranges; i++){
    bac8:	2400      	movs	r4, #0
    uint16_t j = 0;
    baca:	46a2      	mov	sl, r4
    bacc:	e001      	b.n	bad2 <nrng_get_ranges+0x6e>
    for (uint16_t i=0; i < nranges; i++){
    bace:	3401      	adds	r4, #1
    bad0:	b2a4      	uxth	r4, r4
    bad2:	42b4      	cmp	r4, r6
    bad4:	d230      	bcs.n	bb38 <nrng_get_ranges+0xd4>
        if (mask & 1UL << i){
    bad6:	fa27 f304 	lsr.w	r3, r7, r4
    bada:	f013 0f01 	tst.w	r3, #1
    bade:	d0f6      	beq.n	bace <nrng_get_ranges+0x6a>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bae0:	2201      	movs	r2, #1
    bae2:	fa02 f104 	lsl.w	r1, r2, r4
    bae6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    baea:	f004 fb3b 	bl	10164 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    baee:	fa18 f080 	uxtah	r0, r8, r0
    baf2:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    baf6:	fb90 f2f3 	sdiv	r2, r0, r3
    bafa:	fb03 0012 	mls	r0, r3, r2, r0
    bafe:	3032      	adds	r0, #50	; 0x32
    bb00:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
            ranges[j++] = uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    bb04:	460a      	mov	r2, r1
    bb06:	6828      	ldr	r0, [r5, #0]
    bb08:	f7ff ff38 	bl	b97c <nrng_twr_to_tof_frames>
    bb0c:	ee10 0a10 	vmov	r0, s0
    bb10:	f018 fd7a 	bl	24608 <__aeabi_f2d>
    bb14:	ec41 0b10 	vmov	d0, r0, r1
    bb18:	f001 fc56 	bl	d3c8 <uwb_rng_tof_to_meters>
    bb1c:	ec51 0b10 	vmov	r0, r1, d0
    bb20:	f10a 0b01 	add.w	fp, sl, #1
    bb24:	fa1f fb8b 	uxth.w	fp, fp
    bb28:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
    bb2c:	f019 f8bc 	bl	24ca8 <__aeabi_d2f>
    bb30:	f8ca 0000 	str.w	r0, [sl]
    bb34:	46da      	mov	sl, fp
    bb36:	e7ca      	b.n	bace <nrng_get_ranges+0x6a>
}
    bb38:	4638      	mov	r0, r7
    bb3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bb3e <nrng_get_uids>:
{
    bb3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb42:	4605      	mov	r5, r0
    bb44:	4689      	mov	r9, r1
    bb46:	4616      	mov	r6, r2
    bb48:	4698      	mov	r8, r3
    for (uint16_t i=0; i < nranges; i++){
    bb4a:	2400      	movs	r4, #0
    uint32_t mask = 0;
    bb4c:	4627      	mov	r7, r4
    for (uint16_t i=0; i < nranges; i++){
    bb4e:	e001      	b.n	bb54 <nrng_get_uids+0x16>
    bb50:	3401      	adds	r4, #1
    bb52:	b2a4      	uxth	r4, r4
    bb54:	42b4      	cmp	r4, r6
    bb56:	d224      	bcs.n	bba2 <nrng_get_uids+0x64>
        if (nrng->slot_mask & 1UL << i){
    bb58:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bb5c:	fa20 f304 	lsr.w	r3, r0, r4
    bb60:	f013 0f01 	tst.w	r3, #1
    bb64:	d0f4      	beq.n	bb50 <nrng_get_uids+0x12>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bb66:	2201      	movs	r2, #1
    bb68:	fa02 fa04 	lsl.w	sl, r2, r4
    bb6c:	4651      	mov	r1, sl
    bb6e:	f004 faf9 	bl	10164 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bb72:	fa18 f080 	uxtah	r0, r8, r0
    bb76:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bb7a:	fb90 f2f3 	sdiv	r2, r0, r3
    bb7e:	fb03 0012 	mls	r0, r3, r2, r0
    bb82:	3032      	adds	r0, #50	; 0x32
    bb84:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == nrng->seq_num){
    bb88:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    bb8c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bb90:	d1de      	bne.n	bb50 <nrng_get_uids+0x12>
    bb92:	789a      	ldrb	r2, [r3, #2]
    bb94:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    bb98:	429a      	cmp	r2, r3
    bb9a:	d1d9      	bne.n	bb50 <nrng_get_uids+0x12>
                mask |= 1UL << i;
    bb9c:	ea47 070a 	orr.w	r7, r7, sl
    bba0:	e7d6      	b.n	bb50 <nrng_get_uids+0x12>
    for (uint16_t i=0; i < nranges; i++){
    bba2:	2400      	movs	r4, #0
    uint16_t j = 0;
    bba4:	46a2      	mov	sl, r4
    bba6:	e001      	b.n	bbac <nrng_get_uids+0x6e>
    for (uint16_t i=0; i < nranges; i++){
    bba8:	3401      	adds	r4, #1
    bbaa:	b2a4      	uxth	r4, r4
    bbac:	42b4      	cmp	r4, r6
    bbae:	d22e      	bcs.n	bc0e <nrng_get_uids+0xd0>
        if (mask & 1UL << i){
    bbb0:	fa27 f304 	lsr.w	r3, r7, r4
    bbb4:	f013 0f01 	tst.w	r3, #1
    bbb8:	d0f6      	beq.n	bba8 <nrng_get_uids+0x6a>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bbba:	2201      	movs	r2, #1
    bbbc:	fa02 f104 	lsl.w	r1, r2, r4
    bbc0:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bbc4:	f004 face 	bl	10164 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bbc8:	fa18 f080 	uxtah	r0, r8, r0
    bbcc:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bbd0:	fb90 f2f3 	sdiv	r2, r0, r3
    bbd4:	fb03 0012 	mls	r0, r3, r2, r0
    bbd8:	3032      	adds	r0, #50	; 0x32
    bbda:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
            uids[j++] = uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    bbde:	460a      	mov	r2, r1
    bbe0:	6828      	ldr	r0, [r5, #0]
    bbe2:	f7ff fecb 	bl	b97c <nrng_twr_to_tof_frames>
    bbe6:	ee10 0a10 	vmov	r0, s0
    bbea:	f018 fd0d 	bl	24608 <__aeabi_f2d>
    bbee:	ec41 0b10 	vmov	d0, r0, r1
    bbf2:	f001 fbe9 	bl	d3c8 <uwb_rng_tof_to_meters>
    bbf6:	ec51 0b10 	vmov	r0, r1, d0
    bbfa:	f10a 0b01 	add.w	fp, sl, #1
    bbfe:	fa1f fb8b 	uxth.w	fp, fp
    bc02:	f019 f831 	bl	24c68 <__aeabi_d2uiz>
    bc06:	f829 001a 	strh.w	r0, [r9, sl, lsl #1]
    bc0a:	46da      	mov	sl, fp
    bc0c:	e7cc      	b.n	bba8 <nrng_get_uids+0x6a>
}
    bc0e:	4638      	mov	r0, r7
    bc10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc14 <nrng_encode>:
#include <nrng/nrng_json.h>

#if MYNEWT_VAL(NRNG_VERBOSE)

void
nrng_encode(struct nrng_instance * nrng, uint8_t seq_num, uint16_t base){
    bc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc18:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    bc1c:	4605      	mov	r5, r0
    bc1e:	4689      	mov	r9, r1
    bc20:	4617      	mov	r7, r2

    uint32_t valid_mask = 0;
    nrng_frame_t * frame = nrng->frames[(base)%nrng->nframes];
    bc22:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    bc26:	fbb7 f3f2 	udiv	r3, r7, r2
    bc2a:	fb02 7313 	mls	r3, r2, r3, r7
    bc2e:	b29b      	uxth	r3, r3
    bc30:	3332      	adds	r3, #50	; 0x32
    bc32:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

    nrng_json_t json = {
    bc36:	f44f 7244 	mov.w	r2, #784	; 0x310
    bc3a:	2100      	movs	r1, #0
    bc3c:	4668      	mov	r0, sp
    bc3e:	f004 fd1c 	bl	1067a <memset>
        .utime =  os_cputime_ticks_to_usecs(os_cputime_get32()),
    bc42:	f7fd fd09 	bl	9658 <os_cputime_get32>
    bc46:	2600      	movs	r6, #0
    nrng_json_t json = {
    bc48:	901a      	str	r0, [sp, #104]	; 0x68
    bc4a:	961b      	str	r6, [sp, #108]	; 0x6c
    bc4c:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
    bc50:	961d      	str	r6, [sp, #116]	; 0x74
        .seq = seq_num,
        .uid = frame->src_address
    bc52:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    nrng_json_t json = {
    bc56:	931e      	str	r3, [sp, #120]	; 0x78
    bc58:	961f      	str	r6, [sp, #124]	; 0x7c
    };
    // Workout which slots responded with a valid frames
    for (uint16_t i=0; i < 16; i++){
    bc5a:	4634      	mov	r4, r6
    bc5c:	e001      	b.n	bc62 <nrng_encode+0x4e>
    bc5e:	3401      	adds	r4, #1
    bc60:	b2a4      	uxth	r4, r4
    bc62:	2c0f      	cmp	r4, #15
    bc64:	d823      	bhi.n	bcae <nrng_encode+0x9a>
        if (nrng->slot_mask & 1UL << i){
    bc66:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bc6a:	fa20 f304 	lsr.w	r3, r0, r4
    bc6e:	f013 0f01 	tst.w	r3, #1
    bc72:	d0f4      	beq.n	bc5e <nrng_encode+0x4a>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bc74:	2201      	movs	r2, #1
    bc76:	fa02 f804 	lsl.w	r8, r2, r4
    bc7a:	4641      	mov	r1, r8
    bc7c:	f004 fa72 	bl	10164 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bc80:	fa17 f080 	uxtah	r0, r7, r0
    bc84:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bc88:	fb90 f2f3 	sdiv	r2, r0, r3
    bc8c:	fb03 0012 	mls	r0, r3, r2, r0
    bc90:	f100 0332 	add.w	r3, r0, #50	; 0x32
    bc94:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == seq_num){
    bc98:	f8b3 2009 	ldrh.w	r2, [r3, #9]
    bc9c:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bca0:	d1dd      	bne.n	bc5e <nrng_encode+0x4a>
    bca2:	789b      	ldrb	r3, [r3, #2]
    bca4:	454b      	cmp	r3, r9
    bca6:	d1da      	bne.n	bc5e <nrng_encode+0x4a>
                valid_mask |= 1UL << i;
    bca8:	ea46 0608 	orr.w	r6, r6, r8
    bcac:	e7d7      	b.n	bc5e <nrng_encode+0x4a>
            }
        }
    }
    // tdoa results are reference to slot 0, so reject it slot 0 did not respond. An alternative approach is needed @Niklas
    if (valid_mask == 0 || (valid_mask & 1) == 0)
    bcae:	2e00      	cmp	r6, #0
    bcb0:	d056      	beq.n	bd60 <nrng_encode+0x14c>
    bcb2:	f016 0f01 	tst.w	r6, #1
    bcb6:	d053      	beq.n	bd60 <nrng_encode+0x14c>
       return;

    uint16_t j=0;
    for (uint16_t i=0; i < 16; i++){
    bcb8:	2400      	movs	r4, #0
    uint16_t j=0;
    bcba:	46a0      	mov	r8, r4
    bcbc:	e001      	b.n	bcc2 <nrng_encode+0xae>
    for (uint16_t i=0; i < 16; i++){
    bcbe:	3401      	adds	r4, #1
    bcc0:	b2a4      	uxth	r4, r4
    bcc2:	2c0f      	cmp	r4, #15
    bcc4:	d842      	bhi.n	bd4c <nrng_encode+0x138>
        if (valid_mask & 1UL << i){
    bcc6:	fa26 f304 	lsr.w	r3, r6, r4
    bcca:	f013 0f01 	tst.w	r3, #1
    bcce:	d0f6      	beq.n	bcbe <nrng_encode+0xaa>
            uint16_t idx = BitIndex(nrng->slot_mask, 1UL << i, SLOT_POSITION);
    bcd0:	2201      	movs	r2, #1
    bcd2:	fa02 f104 	lsl.w	r1, r2, r4
    bcd6:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
    bcda:	f004 fa43 	bl	10164 <BitIndex>
            nrng_frame_t * frame = nrng->frames[(base + idx)%nrng->nframes];
    bcde:	fa17 f080 	uxtah	r0, r7, r0
    bce2:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
    bce6:	fb90 f2f3 	sdiv	r2, r0, r3
    bcea:	fb03 0012 	mls	r0, r3, r2, r0
    bcee:	3032      	adds	r0, #50	; 0x32
    bcf0:	f855 a020 	ldr.w	sl, [r5, r0, lsl #2]
            if (frame->code == UWB_DATA_CODE_SS_TWR_NRNG_FINAL && frame->seq_num == seq_num){
    bcf4:	f8ba 3009 	ldrh.w	r3, [sl, #9]
    bcf8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    bcfc:	d1df      	bne.n	bcbe <nrng_encode+0xaa>
    bcfe:	f89a 3002 	ldrb.w	r3, [sl, #2]
    bd02:	454b      	cmp	r3, r9
    bd04:	d1db      	bne.n	bcbe <nrng_encode+0xaa>
                json.rng[j] = (dpl_float64_t) uwb_rng_tof_to_meters(nrng_twr_to_tof_frames(nrng->dev_inst, frame, frame));
    bd06:	4652      	mov	r2, sl
    bd08:	4651      	mov	r1, sl
    bd0a:	6828      	ldr	r0, [r5, #0]
    bd0c:	f7ff fe36 	bl	b97c <nrng_twr_to_tof_frames>
    bd10:	ee10 0a10 	vmov	r0, s0
    bd14:	46c3      	mov	fp, r8
    bd16:	f018 fc77 	bl	24608 <__aeabi_f2d>
    bd1a:	ec41 0b10 	vmov	d0, r0, r1
    bd1e:	f001 fb53 	bl	d3c8 <uwb_rng_tof_to_meters>
    bd22:	f108 0318 	add.w	r3, r8, #24
    bd26:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
    bd2a:	ed83 0b00 	vstr	d0, [r3]
                json.ouid[j++] = frame->dst_address;
    bd2e:	f108 0801 	add.w	r8, r8, #1
    bd32:	fa1f f888 	uxth.w	r8, r8
    bd36:	f8ba 1005 	ldrh.w	r1, [sl, #5]
    bd3a:	f10b 0310 	add.w	r3, fp, #16
    bd3e:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
    bd42:	f84d 1033 	str.w	r1, [sp, r3, lsl #3]
    bd46:	2300      	movs	r3, #0
    bd48:	6053      	str	r3, [r2, #4]
    bd4a:	e7b8      	b.n	bcbe <nrng_encode+0xaa>
            }
        }
    }
    json.nsize = j;
    bd4c:	f8cd 8100 	str.w	r8, [sp, #256]	; 0x100
    bd50:	2300      	movs	r3, #0
    bd52:	9341      	str	r3, [sp, #260]	; 0x104

    nrng_json_write(&json);
    bd54:	4668      	mov	r0, sp
    bd56:	f000 f82d 	bl	bdb4 <nrng_json_write>
    printf("%s\n",json.iobuf);
    bd5a:	a842      	add	r0, sp, #264	; 0x108
    bd5c:	f004 fb74 	bl	10448 <puts>
}
    bd60:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bd68 <nrng_write_line>:

static int nrng_write_line(void *buf, char* data, int len);

static int
nrng_write_line(void *buf, char* data, int len)
{
    bd68:	b510      	push	{r4, lr}
    bd6a:	4686      	mov	lr, r0
    nrng_json_t * json = buf;
    // Fix for serial output overflowing and printing dogshit nonsense
    len =   min(len, sizeof(json->iobuf) - json->idx);
    bd6c:	f8b0 3308 	ldrh.w	r3, [r0, #776]	; 0x308
    bd70:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
    bd74:	4290      	cmp	r0, r2
    bd76:	bf28      	it	cs
    bd78:	4610      	movcs	r0, r2

    for (uint16_t i=0; i < len; i++){
    bd7a:	2300      	movs	r3, #0
    bd7c:	e001      	b.n	bd82 <nrng_write_line+0x1a>
    bd7e:	3301      	adds	r3, #1
    bd80:	b29b      	uxth	r3, r3
    bd82:	4283      	cmp	r3, r0
    bd84:	da0c      	bge.n	bda0 <nrng_write_line+0x38>
        json->iobuf[json->idx++] = data[i];
    bd86:	f8be c308 	ldrh.w	ip, [lr, #776]	; 0x308
    bd8a:	f10c 0401 	add.w	r4, ip, #1
    bd8e:	f8ae 4308 	strh.w	r4, [lr, #776]	; 0x308
    bd92:	5ccc      	ldrb	r4, [r1, r3]
    bd94:	44f4      	add	ip, lr
    bd96:	f88c 4108 	strb.w	r4, [ip, #264]	; 0x108
        if (data[i]=='\0'){
    bd9a:	5ccc      	ldrb	r4, [r1, r3]
    bd9c:	2c00      	cmp	r4, #0
    bd9e:	d1ee      	bne.n	bd7e <nrng_write_line+0x16>
            break;
        }
    }
    if (json->iobuf[json->idx-1]=='\0')
    bda0:	f8be 3308 	ldrh.w	r3, [lr, #776]	; 0x308
    bda4:	3b01      	subs	r3, #1
    bda6:	4473      	add	r3, lr
    bda8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
    bdac:	b90b      	cbnz	r3, bdb2 <nrng_write_line+0x4a>
        json->idx = 0;
    bdae:	f8ae 3308 	strh.w	r3, [lr, #776]	; 0x308
    return len;
}
    bdb2:	bd10      	pop	{r4, pc}

0000bdb4 <nrng_json_write>:

int
nrng_json_write(nrng_json_t * json){
    bdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdb6:	b085      	sub	sp, #20
    bdb8:	4604      	mov	r4, r0

    struct json_value value;
    int rc;

    json->encoder.je_write = nrng_write_line;
    bdba:	4b57      	ldr	r3, [pc, #348]	; (bf18 <nrng_json_write+0x164>)
    bdbc:	6183      	str	r3, [r0, #24]
    json->encoder.je_arg = (void *)json;
    bdbe:	61c0      	str	r0, [r0, #28]
    json->decoder.json_buf.jb_read_next = json_read_next;
    bdc0:	4b56      	ldr	r3, [pc, #344]	; (bf1c <nrng_json_write+0x168>)
    bdc2:	6043      	str	r3, [r0, #4]
    json->decoder.json_buf.jb_read_prev = json_read_prev;
    bdc4:	4b56      	ldr	r3, [pc, #344]	; (bf20 <nrng_json_write+0x16c>)
    bdc6:	6083      	str	r3, [r0, #8]
    json->decoder.json_buf.jb_readn = json_readn;
    bdc8:	4b56      	ldr	r3, [pc, #344]	; (bf24 <nrng_json_write+0x170>)
    bdca:	6003      	str	r3, [r0, #0]
    json->encoder.je_wr_commas = 0;
    bdcc:	f890 3020 	ldrb.w	r3, [r0, #32]
    bdd0:	f36f 0300 	bfc	r3, #0, #1
    bdd4:	f880 3020 	strb.w	r3, [r0, #32]

    rc = json_encode_object_start(&json->encoder);
    bdd8:	f100 0718 	add.w	r7, r0, #24
    bddc:	4638      	mov	r0, r7
    bdde:	f013 fa73 	bl	1f2c8 <json_encode_object_start>
    bde2:	4606      	mov	r6, r0
    JSON_VALUE_UINT(&value, json->utime);
    bde4:	2501      	movs	r5, #1
    bde6:	f88d 5001 	strb.w	r5, [sp, #1]
    bdea:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
    bdee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "utime", &value);
    bdf2:	466a      	mov	r2, sp
    bdf4:	494c      	ldr	r1, [pc, #304]	; (bf28 <nrng_json_write+0x174>)
    bdf6:	4638      	mov	r0, r7
    bdf8:	f013 faae 	bl	1f358 <json_encode_object_entry>
    bdfc:	4306      	orrs	r6, r0
    JSON_VALUE_UINT(&value, json->seq);
    bdfe:	f88d 5001 	strb.w	r5, [sp, #1]
    be02:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
    be06:	e9cd 2302 	strd	r2, r3, [sp, #8]
    rc |= json_encode_object_entry(&json->encoder, "seq", &value);
    be0a:	466a      	mov	r2, sp
    be0c:	4947      	ldr	r1, [pc, #284]	; (bf2c <nrng_json_write+0x178>)
    be0e:	4638      	mov	r0, r7
    be10:	f013 faa2 	bl	1f358 <json_encode_object_entry>
    be14:	4306      	orrs	r6, r0
    if (json->uid){
    be16:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    be18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    be1a:	ea52 0103 	orrs.w	r1, r2, r3
    be1e:	d10a      	bne.n	be36 <nrng_json_write+0x82>
        JSON_VALUE_UINT(&value, json->uid);
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    }
    rc |= json_encode_array_name(&json->encoder, "ouid");
    be20:	4943      	ldr	r1, [pc, #268]	; (bf30 <nrng_json_write+0x17c>)
    be22:	4638      	mov	r0, r7
    be24:	f013 fc4e 	bl	1f6c4 <json_encode_array_name>
    be28:	4306      	orrs	r6, r0
    rc |= json_encode_array_start(&json->encoder);
    be2a:	4638      	mov	r0, r7
    be2c:	f013 fc4e 	bl	1f6cc <json_encode_array_start>
    be30:	4306      	orrs	r6, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    be32:	2500      	movs	r5, #0
    be34:	e01c      	b.n	be70 <nrng_json_write+0xbc>
        JSON_VALUE_UINT(&value, json->uid);
    be36:	f88d 5001 	strb.w	r5, [sp, #1]
    be3a:	9202      	str	r2, [sp, #8]
    be3c:	9303      	str	r3, [sp, #12]
        rc |= json_encode_object_entry(&json->encoder, "uid", &value);
    be3e:	466a      	mov	r2, sp
    be40:	493c      	ldr	r1, [pc, #240]	; (bf34 <nrng_json_write+0x180>)
    be42:	4638      	mov	r0, r7
    be44:	f013 fa88 	bl	1f358 <json_encode_object_entry>
    be48:	4306      	orrs	r6, r0
    be4a:	e7e9      	b.n	be20 <nrng_json_write+0x6c>
        JSON_VALUE_UINT(&value, json->ouid[i]);
    be4c:	2301      	movs	r3, #1
    be4e:	f88d 3001 	strb.w	r3, [sp, #1]
    be52:	f105 0310 	add.w	r3, r5, #16
    be56:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    be5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    be62:	4669      	mov	r1, sp
    be64:	4638      	mov	r0, r7
    be66:	f013 fc41 	bl	1f6ec <json_encode_array_value>
    be6a:	4306      	orrs	r6, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    be6c:	3501      	adds	r5, #1
    be6e:	b2ed      	uxtb	r5, r5
    be70:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    be74:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    be78:	4295      	cmp	r5, r2
    be7a:	f04f 0200 	mov.w	r2, #0
    be7e:	eb72 0303 	sbcs.w	r3, r2, r3
    be82:	d3e3      	bcc.n	be4c <nrng_json_write+0x98>
    }
    rc |= json_encode_array_finish(&json->encoder);
    be84:	4638      	mov	r0, r7
    be86:	f013 fc4d 	bl	1f724 <json_encode_array_finish>
    be8a:	ea46 0500 	orr.w	r5, r6, r0

    rc |= json_encode_array_name(&json->encoder, "rng");
    be8e:	492a      	ldr	r1, [pc, #168]	; (bf38 <nrng_json_write+0x184>)
    be90:	4638      	mov	r0, r7
    be92:	f013 fc17 	bl	1f6c4 <json_encode_array_name>
    be96:	4305      	orrs	r5, r0
    rc |= json_encode_array_start(&json->encoder);
    be98:	4638      	mov	r0, r7
    be9a:	f013 fc17 	bl	1f6cc <json_encode_array_start>
    be9e:	4305      	orrs	r5, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    bea0:	2600      	movs	r6, #0
    bea2:	e011      	b.n	bec8 <nrng_json_write+0x114>
        JSON_VALUE_FLOAT64(&value, json->rng[i]);
    bea4:	2306      	movs	r3, #6
    bea6:	f88d 3001 	strb.w	r3, [sp, #1]
    beaa:	f106 0318 	add.w	r3, r6, #24
    beae:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    beb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc |= json_encode_array_value(&json->encoder, &value);
    beba:	4669      	mov	r1, sp
    bebc:	4638      	mov	r0, r7
    bebe:	f013 fc15 	bl	1f6ec <json_encode_array_value>
    bec2:	4305      	orrs	r5, r0
    for (uint8_t i = 0; i< json->nsize; i++){
    bec4:	3601      	adds	r6, #1
    bec6:	b2f6      	uxtb	r6, r6
    bec8:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    becc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    bed0:	4296      	cmp	r6, r2
    bed2:	f04f 0200 	mov.w	r2, #0
    bed6:	eb72 0303 	sbcs.w	r3, r2, r3
    beda:	d3e3      	bcc.n	bea4 <nrng_json_write+0xf0>
    }
    rc |= json_encode_array_finish(&json->encoder);
    bedc:	4638      	mov	r0, r7
    bede:	f013 fc21 	bl	1f724 <json_encode_array_finish>
    bee2:	4305      	orrs	r5, r0
    rc |= json_encode_object_finish(&json->encoder);
    bee4:	4638      	mov	r0, r7
    bee6:	f013 fbdd 	bl	1f6a4 <json_encode_object_finish>
    json->encoder.je_wr_commas = 0;
    beea:	f894 3020 	ldrb.w	r3, [r4, #32]
    beee:	f36f 0300 	bfc	r3, #0, #1
    bef2:	f884 3020 	strb.w	r3, [r4, #32]
    assert(rc == 0);
    bef6:	4305      	orrs	r5, r0
    bef8:	d107      	bne.n	bf0a <nrng_json_write+0x156>

    nrng_write_line(json->encoder.je_arg, "\0", 1);
    befa:	2201      	movs	r2, #1
    befc:	490f      	ldr	r1, [pc, #60]	; (bf3c <nrng_json_write+0x188>)
    befe:	69e0      	ldr	r0, [r4, #28]
    bf00:	f7ff ff32 	bl	bd68 <nrng_write_line>

    return rc;
}
    bf04:	4628      	mov	r0, r5
    bf06:	b005      	add	sp, #20
    bf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
    bf0a:	2300      	movs	r3, #0
    bf0c:	461a      	mov	r2, r3
    bf0e:	4619      	mov	r1, r3
    bf10:	4618      	mov	r0, r3
    bf12:	f7fd f957 	bl	91c4 <__assert_func>
    bf16:	bf00      	nop
    bf18:	0000bd69 	.word	0x0000bd69
    bf1c:	0001f741 	.word	0x0001f741
    bf20:	0001f75d 	.word	0x0001f75d
    bf24:	0001f76f 	.word	0x0001f76f
    bf28:	00026640 	.word	0x00026640
    bf2c:	00026648 	.word	0x00026648
    bf30:	00026650 	.word	0x00026650
    bf34:	0002664c 	.word	0x0002664c
    bf38:	00028ca4 	.word	0x00028ca4
    bf3c:	00026658 	.word	0x00026658

0000bf40 <lease_expiry_cb>:

#include "pan_utils/pan_utils.h"

void
lease_expiry_cb(struct dpl_event * ev)
{
    bf40:	b508      	push	{r3, lr}
    assert(ev != NULL);
    bf42:	b1d8      	cbz	r0, bf7c <lease_expiry_cb+0x3c>
    return ev->ev.ev_arg;
    bf44:	6881      	ldr	r1, [r0, #8]
    assert(dpl_event_get_arg(ev));
    bf46:	b1f9      	cbz	r1, bf88 <lease_expiry_cb+0x48>

    struct uwb_pan_instance * pan = (struct uwb_pan_instance *) dpl_event_get_arg(ev);
#if !MYNEWT_VAL(SELFTEST)
    STATS_INC(g_stat, lease_expiry);
    bf48:	4a15      	ldr	r2, [pc, #84]	; (bfa0 <lease_expiry_cb+0x60>)
    bf4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    bf4c:	3301      	adds	r3, #1
    bf4e:	6253      	str	r3, [r2, #36]	; 0x24
#endif
    pan->status.valid = false;
    bf50:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    bf54:	f36f 0382 	bfc	r3, #2, #1
    bf58:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->status.lease_expired = true;
    bf5c:	b2db      	uxtb	r3, r3
    bf5e:	f043 0310 	orr.w	r3, r3, #16
    bf62:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->dev_inst->slot_id = 0xffff;
    bf66:	680b      	ldr	r3, [r1, #0]
    bf68:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bf6c:	f8a3 24c2 	strh.w	r2, [r3, #1218]	; 0x4c2

    /*DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_lease_expired\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));*/
    if (pan->control.postprocess) {
    bf70:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
    bf74:	f013 0f01 	tst.w	r3, #1
    bf78:	d10c      	bne.n	bf94 <lease_expiry_cb+0x54>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    }
}
    bf7a:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    bf7c:	2300      	movs	r3, #0
    bf7e:	461a      	mov	r2, r3
    bf80:	4619      	mov	r1, r3
    bf82:	4618      	mov	r0, r3
    bf84:	f7fd f91e 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    bf88:	2300      	movs	r3, #0
    bf8a:	461a      	mov	r2, r3
    bf8c:	4619      	mov	r1, r3
    bf8e:	4618      	mov	r0, r3
    bf90:	f7fd f918 	bl	91c4 <__assert_func>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    bf94:	f851 0b50 	ldr.w	r0, [r1], #80
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    bf98:	303c      	adds	r0, #60	; 0x3c
    bf9a:	f7fd fc47 	bl	982c <os_eventq_put>
}
    bf9e:	e7ec      	b.n	bf7a <lease_expiry_cb+0x3a>
    bfa0:	20004010 	.word	0x20004010

0000bfa4 <uwb_pan_set_request_cb>:
 * @return void
 */
void
uwb_pan_set_request_cb(struct uwb_pan_instance *pan, uwb_pan_request_cb_func_t callback)
{
    pan->request_cb = callback;
    bfa4:	64c1      	str	r1, [r0, #76]	; 0x4c
    pan->control.request_cb = true;
    bfa6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
    bfaa:	f043 0302 	orr.w	r3, r3, #2
    bfae:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
    bfb2:	4770      	bx	lr

0000bfb4 <uwb_pan_set_postprocess>:
 *
 * @return void
 */
void
uwb_pan_set_postprocess(struct uwb_pan_instance *pan, dpl_event_fn * cb)
{
    bfb4:	b510      	push	{r4, lr}
    bfb6:	4604      	mov	r4, r0
    memset(ev, 0, sizeof(*ev));
    bfb8:	2300      	movs	r3, #0
    bfba:	6503      	str	r3, [r0, #80]	; 0x50
    bfbc:	6543      	str	r3, [r0, #84]	; 0x54
    bfbe:	6583      	str	r3, [r0, #88]	; 0x58
    bfc0:	65c3      	str	r3, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
    bfc2:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
    bfc4:	6580      	str	r0, [r0, #88]	; 0x58
    return (struct dpl_eventq *) os_eventq_dflt_get();
    bfc6:	f7fd fcdf 	bl	9988 <os_eventq_dflt_get>
    bfca:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    bfcc:	4623      	mov	r3, r4
    bfce:	4a06      	ldr	r2, [pc, #24]	; (bfe8 <uwb_pan_set_postprocess+0x34>)
    bfd0:	f104 0060 	add.w	r0, r4, #96	; 0x60
    bfd4:	f7fd fa7c 	bl	94d0 <os_callout_init>
    dpl_event_init(&pan->postprocess_event, cb, (void *) pan);
    dpl_callout_init(&pan->pan_lease_callout_expiry, dpl_eventq_dflt_get(),
                    lease_expiry_cb, (void *) pan);

    pan->control.postprocess = true;
    bfd8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
    bfdc:	f043 0301 	orr.w	r3, r3, #1
    bfe0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
    bfe4:	bd10      	pop	{r4, pc}
    bfe6:	bf00      	nop
    bfe8:	0000bf41 	.word	0x0000bf41

0000bfec <pm_conf_export>:
}

static int
pm_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
    bfec:	b508      	push	{r3, lr}
    bfee:	4603      	mov	r3, r0
    export_func("panmstr/pan_id", pm_config.pan_id);
    bff0:	4902      	ldr	r1, [pc, #8]	; (bffc <pm_conf_export+0x10>)
    bff2:	4803      	ldr	r0, [pc, #12]	; (c000 <pm_conf_export+0x14>)
    bff4:	4798      	blx	r3
    return 0;
}
    bff6:	2000      	movs	r0, #0
    bff8:	bd08      	pop	{r3, pc}
    bffa:	bf00      	nop
    bffc:	20000174 	.word	0x20000174
    c000:	0002665c 	.word	0x0002665c

0000c004 <first_free_short_addr>:
    return 0;
}

static uint16_t
first_free_short_addr(uint64_t euid)
{
    c004:	b500      	push	{lr}
    int i, j;
    uint16_t addr = euid&0xffff;
    c006:	fa1f fe80 	uxth.w	lr, r0
    c00a:	4670      	mov	r0, lr
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c00c:	f04f 0c00 	mov.w	ip, #0
    c010:	e003      	b.n	c01a <first_free_short_addr+0x16>

        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
        {
            if (addr == node_idx[j].addr)
            {
                addr = 0;
    c012:	2000      	movs	r0, #0
                break;
            }
        }

        if (addr) {
    c014:	b9c8      	cbnz	r0, c04a <first_free_short_addr+0x46>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c016:	f10c 0c01 	add.w	ip, ip, #1
    c01a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    c01e:	dc14      	bgt.n	c04a <first_free_short_addr+0x46>
        if (i>0) {
    c020:	f1bc 0f00 	cmp.w	ip, #0
    c024:	dd05      	ble.n	c032 <first_free_short_addr+0x2e>
            addr = (i<<12) | (euid&0x0fff);
    c026:	ea4f 300c 	mov.w	r0, ip, lsl #12
    c02a:	b280      	uxth	r0, r0
    c02c:	f3ce 030b 	ubfx	r3, lr, #0, #12
    c030:	4318      	orrs	r0, r3
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c032:	2300      	movs	r3, #0
    c034:	2b3f      	cmp	r3, #63	; 0x3f
    c036:	dced      	bgt.n	c014 <first_free_short_addr+0x10>
            if (addr == node_idx[j].addr)
    c038:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c03c:	4904      	ldr	r1, [pc, #16]	; (c050 <first_free_short_addr+0x4c>)
    c03e:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
    c042:	4282      	cmp	r2, r0
    c044:	d0e5      	beq.n	c012 <first_free_short_addr+0xe>
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c046:	3301      	adds	r3, #1
    c048:	e7f4      	b.n	c034 <first_free_short_addr+0x30>
            return addr;
        }
    }

    return addr;
}
    c04a:	f85d fb04 	ldr.w	pc, [sp], #4
    c04e:	bf00      	nop
    c050:	20003828 	.word	0x20003828

0000c054 <short_addr_is_free>:

static bool
short_addr_is_free(uint16_t addr)
{
    int j;
    for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c054:	2300      	movs	r3, #0
    c056:	e000      	b.n	c05a <short_addr_is_free+0x6>
    c058:	3301      	adds	r3, #1
    c05a:	2b3f      	cmp	r3, #63	; 0x3f
    c05c:	dc08      	bgt.n	c070 <short_addr_is_free+0x1c>
    {
        if (addr == node_idx[j].addr)
    c05e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c062:	4904      	ldr	r1, [pc, #16]	; (c074 <short_addr_is_free+0x20>)
    c064:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
    c068:	4282      	cmp	r2, r0
    c06a:	d1f5      	bne.n	c058 <short_addr_is_free+0x4>
        {
            return false;
    c06c:	2000      	movs	r0, #0
        }
    }
    return true;
}
    c06e:	4770      	bx	lr
    return true;
    c070:	2001      	movs	r0, #1
    c072:	4770      	bx	lr
    c074:	20003828 	.word	0x20003828

0000c078 <slot_lease_expired>:

static bool
slot_lease_expired(int idx)
{
    c078:	b510      	push	{r4, lr}
    c07a:	b084      	sub	sp, #16
    c07c:	4604      	mov	r4, r0
    os_get_uptime((struct os_timeval*)tvp);
    c07e:	4668      	mov	r0, sp
    c080:	f7fe fa88 	bl	a594 <os_get_uptime>
    struct dpl_timeval tv;
    dpl_get_uptime(&tv);
    int32_t le_ms = node_idx[idx].lease_ends;
    c084:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c088:	480c      	ldr	r0, [pc, #48]	; (c0bc <slot_lease_expired+0x44>)
    c08a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    c08e:	6962      	ldr	r2, [r4, #20]
    if (le_ms==0) return false;
    c090:	b18a      	cbz	r2, c0b6 <slot_lease_expired+0x3e>
    int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    c092:	9b02      	ldr	r3, [sp, #8]
    c094:	490a      	ldr	r1, [pc, #40]	; (c0c0 <slot_lease_expired+0x48>)
    c096:	fb81 0103 	smull	r0, r1, r1, r3
    c09a:	17d8      	asrs	r0, r3, #31
    c09c:	ebc0 10a1 	rsb	r0, r0, r1, asr #6
    c0a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c0a4:	9b00      	ldr	r3, [sp, #0]
    c0a6:	fb01 0003 	mla	r0, r1, r3, r0
    return now_ms > le_ms;
    c0aa:	4282      	cmp	r2, r0
    c0ac:	bfac      	ite	ge
    c0ae:	2000      	movge	r0, #0
    c0b0:	2001      	movlt	r0, #1
}
    c0b2:	b004      	add	sp, #16
    c0b4:	bd10      	pop	{r4, pc}
    if (le_ms==0) return false;
    c0b6:	2000      	movs	r0, #0
    c0b8:	e7fb      	b.n	c0b2 <slot_lease_expired+0x3a>
    c0ba:	bf00      	nop
    c0bc:	20003828 	.word	0x20003828
    c0c0:	10624dd3 	.word	0x10624dd3

0000c0c4 <first_free_slot_id>:

static uint16_t
first_free_slot_id(uint16_t node_addr, uint16_t role)
{
    c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0c6:	4607      	mov	r7, r0
    c0c8:	460d      	mov	r5, r1
    int j;
    uint16_t slot_id=0;
    c0ca:	2600      	movs	r6, #0
    while (slot_id < 0xffff)
    c0cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0d0:	429e      	cmp	r6, r3
    c0d2:	d02d      	beq.n	c130 <first_free_slot_id+0x6c>
    {
        for (j=0;j<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);j++)
    c0d4:	2400      	movs	r4, #0
    c0d6:	e000      	b.n	c0da <first_free_slot_id+0x16>
    c0d8:	3401      	adds	r4, #1
    c0da:	2c3f      	cmp	r4, #63	; 0x3f
    c0dc:	dc28      	bgt.n	c130 <first_free_slot_id+0x6c>
        {
            if (node_idx[j].addr == 0xffff || role != node_idx[j].role) {
    c0de:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c0e2:	4a14      	ldr	r2, [pc, #80]	; (c134 <first_free_slot_id+0x70>)
    c0e4:	f832 1033 	ldrh.w	r1, [r2, r3, lsl #3]
    c0e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0ec:	4299      	cmp	r1, r3
    c0ee:	d0f3      	beq.n	c0d8 <first_free_slot_id+0x14>
    c0f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c0f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c0f8:	7c1b      	ldrb	r3, [r3, #16]
    c0fa:	42ab      	cmp	r3, r5
    c0fc:	d1ec      	bne.n	c0d8 <first_free_slot_id+0x14>
                continue;
            }

            if (slot_id == node_idx[j].slot_id &&
    c0fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c106:	885b      	ldrh	r3, [r3, #2]
    c108:	42b3      	cmp	r3, r6
    c10a:	d1e5      	bne.n	c0d8 <first_free_slot_id+0x14>
    c10c:	42b9      	cmp	r1, r7
    c10e:	d0e3      	beq.n	c0d8 <first_free_slot_id+0x14>
                node_addr != node_idx[j].addr &&
                (slot_lease_expired(j) == false || node_idx[j].has_perm_slot)
    c110:	4620      	mov	r0, r4
    c112:	f7ff ffb1 	bl	c078 <slot_lease_expired>
                node_addr != node_idx[j].addr &&
    c116:	b140      	cbz	r0, c12a <first_free_slot_id+0x66>
                (slot_lease_expired(j) == false || node_idx[j].has_perm_slot)
    c118:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c11c:	4a05      	ldr	r2, [pc, #20]	; (c134 <first_free_slot_id+0x70>)
    c11e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c122:	7c5b      	ldrb	r3, [r3, #17]
    c124:	f013 0f01 	tst.w	r3, #1
    c128:	d0d6      	beq.n	c0d8 <first_free_slot_id+0x14>
            }
        }

        return slot_id;
    next_slot:
        slot_id++;
    c12a:	3601      	adds	r6, #1
    c12c:	b2b6      	uxth	r6, r6
    c12e:	e7cd      	b.n	c0cc <first_free_slot_id+0x8>
    }

    return 0xffff;
}
    c130:	4630      	mov	r0, r6
    c132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c134:	20003828 	.word	0x20003828

0000c138 <find_first_empty_nodes_to_save>:

static bool
find_first_empty_nodes_to_save(uint64_t euid, struct panmaster_node **results)
{
    c138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c13a:	4607      	mov	r7, r0
    c13c:	460e      	mov	r6, r1
    c13e:	4615      	mov	r5, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c140:	2100      	movs	r1, #0
    c142:	4811      	ldr	r0, [pc, #68]	; (c188 <find_first_empty_nodes_to_save+0x50>)
    c144:	f7fe fde4 	bl	ad10 <os_mutex_pend>
    int i, slots;
    if (dpl_mutex_pend(&save_mutex, 0) != DPL_OK) {
    c148:	b9d8      	cbnz	r0, c182 <find_first_empty_nodes_to_save+0x4a>
        return false;
    }
    slots = sizeof(nodes_to_save)/sizeof(nodes_to_save[0]);
    for (i=0;i < slots;i++) {
    c14a:	2400      	movs	r4, #0
    c14c:	2c07      	cmp	r4, #7
    c14e:	dc10      	bgt.n	c172 <find_first_empty_nodes_to_save+0x3a>
        if (!nodes_to_save[i].euid) {
    c150:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
    c154:	4b0d      	ldr	r3, [pc, #52]	; (c18c <find_first_empty_nodes_to_save+0x54>)
    c156:	4413      	add	r3, r2
    c158:	f8d3 c008 	ldr.w	ip, [r3, #8]
    c15c:	68db      	ldr	r3, [r3, #12]
    c15e:	ea5c 0303 	orrs.w	r3, ip, r3
    c162:	d001      	beq.n	c168 <find_first_empty_nodes_to_save+0x30>
    for (i=0;i < slots;i++) {
    c164:	3401      	adds	r4, #1
    c166:	e7f1      	b.n	c14c <find_first_empty_nodes_to_save+0x14>
            nodes_to_save[i].euid = euid;
    c168:	4b08      	ldr	r3, [pc, #32]	; (c18c <find_first_empty_nodes_to_save+0x54>)
    c16a:	4413      	add	r3, r2
    c16c:	609f      	str	r7, [r3, #8]
    c16e:	60de      	str	r6, [r3, #12]
            *results = &nodes_to_save[i];
    c170:	602b      	str	r3, [r5, #0]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c172:	4805      	ldr	r0, [pc, #20]	; (c188 <find_first_empty_nodes_to_save+0x50>)
    c174:	f7fe fd70 	bl	ac58 <os_mutex_release>
        }
    }

    dpl_mutex_release(&save_mutex);
    /* If i == slots then we failed to find a free slot */
    return (i!=slots) ? true : false;
    c178:	f1b4 0008 	subs.w	r0, r4, #8
    c17c:	bf18      	it	ne
    c17e:	2001      	movne	r0, #1
}
    c180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return false;
    c182:	2000      	movs	r0, #0
    c184:	e7fc      	b.n	c180 <find_first_empty_nodes_to_save+0x48>
    c186:	bf00      	nop
    c188:	20003ff0 	.word	0x20003ff0
    c18c:	20003e28 	.word	0x20003e28

0000c190 <pm_conf_commit>:
{
    c190:	b508      	push	{r3, lr}
    conf_value_from_str(pm_config.pan_id, CONF_INT16,
    c192:	2300      	movs	r3, #0
    c194:	4a03      	ldr	r2, [pc, #12]	; (c1a4 <pm_conf_commit+0x14>)
    c196:	2103      	movs	r1, #3
    c198:	4803      	ldr	r0, [pc, #12]	; (c1a8 <pm_conf_commit+0x18>)
    c19a:	f006 fe68 	bl	12e6e <conf_value_from_str>
}
    c19e:	2000      	movs	r0, #0
    c1a0:	bd08      	pop	{r3, pc}
    c1a2:	bf00      	nop
    c1a4:	20003f20 	.word	0x20003f20
    c1a8:	20000174 	.word	0x20000174

0000c1ac <pm_conf_set>:
    if (argc == 1) {
    c1ac:	2801      	cmp	r0, #1
    c1ae:	d001      	beq.n	c1b4 <pm_conf_set+0x8>
    return DPL_ENOENT;
    c1b0:	200a      	movs	r0, #10
}
    c1b2:	4770      	bx	lr
{
    c1b4:	b510      	push	{r4, lr}
    c1b6:	460b      	mov	r3, r1
    c1b8:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "pan_id")) {
    c1ba:	4907      	ldr	r1, [pc, #28]	; (c1d8 <pm_conf_set+0x2c>)
    c1bc:	6818      	ldr	r0, [r3, #0]
    c1be:	f004 fa87 	bl	106d0 <strcmp>
    c1c2:	b108      	cbz	r0, c1c8 <pm_conf_set+0x1c>
    return DPL_ENOENT;
    c1c4:	200a      	movs	r0, #10
}
    c1c6:	bd10      	pop	{r4, pc}
            return CONF_VALUE_SET(val, CONF_STRING, pm_config.pan_id);
    c1c8:	2308      	movs	r3, #8
    c1ca:	4a04      	ldr	r2, [pc, #16]	; (c1dc <pm_conf_set+0x30>)
    c1cc:	2106      	movs	r1, #6
    c1ce:	4620      	mov	r0, r4
    c1d0:	f006 fe4d 	bl	12e6e <conf_value_from_str>
    c1d4:	e7f7      	b.n	c1c6 <pm_conf_set+0x1a>
    c1d6:	bf00      	nop
    c1d8:	00026664 	.word	0x00026664
    c1dc:	20000174 	.word	0x20000174

0000c1e0 <pm_conf_get>:
    if (argc == 1) {
    c1e0:	2801      	cmp	r0, #1
    c1e2:	d10a      	bne.n	c1fa <pm_conf_get+0x1a>
{
    c1e4:	b508      	push	{r3, lr}
    c1e6:	460b      	mov	r3, r1
        if (!strcmp(argv[0], "pan_id")) {
    c1e8:	4905      	ldr	r1, [pc, #20]	; (c200 <pm_conf_get+0x20>)
    c1ea:	6818      	ldr	r0, [r3, #0]
    c1ec:	f004 fa70 	bl	106d0 <strcmp>
    c1f0:	b908      	cbnz	r0, c1f6 <pm_conf_get+0x16>
            return pm_config.pan_id;
    c1f2:	4804      	ldr	r0, [pc, #16]	; (c204 <pm_conf_get+0x24>)
}
    c1f4:	bd08      	pop	{r3, pc}
    return NULL;
    c1f6:	2000      	movs	r0, #0
    c1f8:	e7fc      	b.n	c1f4 <pm_conf_get+0x14>
    c1fa:	2000      	movs	r0, #0
}
    c1fc:	4770      	bx	lr
    c1fe:	bf00      	nop
    c200:	00026664 	.word	0x00026664
    c204:	20000174 	.word	0x20000174

0000c208 <panm_init_fcb>:
{
    c208:	b510      	push	{r4, lr}
    c20a:	b084      	sub	sp, #16
    rc = flash_area_to_sectors(MYNEWT_VAL(PANMASTER_FCB_FLASH_AREA), &cnt, NULL);
    c20c:	2200      	movs	r2, #0
    c20e:	a903      	add	r1, sp, #12
    c210:	2010      	movs	r0, #16
    c212:	f008 f803 	bl	1421c <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c216:	b138      	cbz	r0, c228 <panm_init_fcb+0x20>
    c218:	2000      	movs	r0, #0
    c21a:	9000      	str	r0, [sp, #0]
    c21c:	4b20      	ldr	r3, [pc, #128]	; (c2a0 <panm_init_fcb+0x98>)
    c21e:	681c      	ldr	r4, [r3, #0]
    c220:	4603      	mov	r3, r0
    c222:	4602      	mov	r2, r0
    c224:	4601      	mov	r1, r0
    c226:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
    c228:	9b03      	ldr	r3, [sp, #12]
    c22a:	2b11      	cmp	r3, #17
    c22c:	d907      	bls.n	c23e <panm_init_fcb+0x36>
    c22e:	2000      	movs	r0, #0
    c230:	9000      	str	r0, [sp, #0]
    c232:	4b1b      	ldr	r3, [pc, #108]	; (c2a0 <panm_init_fcb+0x98>)
    c234:	681c      	ldr	r4, [r3, #0]
    c236:	4603      	mov	r3, r0
    c238:	4602      	mov	r2, r0
    c23a:	4601      	mov	r1, r0
    c23c:	47a0      	blx	r4
    flash_area_to_sectors(
    c23e:	4a19      	ldr	r2, [pc, #100]	; (c2a4 <panm_init_fcb+0x9c>)
    c240:	a903      	add	r1, sp, #12
    c242:	2010      	movs	r0, #16
    c244:	f007 ffea 	bl	1421c <flash_area_to_sectors>
    pm_init_conf_fcb.pm_fcb.f_sector_cnt = cnt;
    c248:	4817      	ldr	r0, [pc, #92]	; (c2a8 <panm_init_fcb+0xa0>)
    c24a:	9b03      	ldr	r3, [sp, #12]
    c24c:	7143      	strb	r3, [r0, #5]
    rc = panm_fcb_src(&pm_init_conf_fcb);
    c24e:	f000 ff98 	bl	d182 <panm_fcb_src>
    if (rc) {
    c252:	4603      	mov	r3, r0
    c254:	b1c0      	cbz	r0, c288 <panm_init_fcb+0x80>
        for (cnt = 0;
    c256:	2300      	movs	r3, #0
    c258:	9303      	str	r3, [sp, #12]
    c25a:	e00c      	b.n	c276 <panm_init_fcb+0x6e>
            flash_area_erase(&pm_fcb_area[cnt], 0,
    c25c:	4811      	ldr	r0, [pc, #68]	; (c2a4 <panm_init_fcb+0x9c>)
    c25e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c262:	eb00 038c 	add.w	r3, r0, ip, lsl #2
    c266:	689a      	ldr	r2, [r3, #8]
    c268:	2100      	movs	r1, #0
    c26a:	4618      	mov	r0, r3
    c26c:	f008 f83c 	bl	142e8 <flash_area_erase>
             cnt++) {
    c270:	9b03      	ldr	r3, [sp, #12]
    c272:	3301      	adds	r3, #1
    c274:	9303      	str	r3, [sp, #12]
             cnt < pm_init_conf_fcb.pm_fcb.f_sector_cnt;
    c276:	4b0c      	ldr	r3, [pc, #48]	; (c2a8 <panm_init_fcb+0xa0>)
    c278:	795a      	ldrb	r2, [r3, #5]
    c27a:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
    c27c:	429a      	cmp	r2, r3
    c27e:	dced      	bgt.n	c25c <panm_init_fcb+0x54>
        rc = panm_fcb_src(&pm_init_conf_fcb);
    c280:	4809      	ldr	r0, [pc, #36]	; (c2a8 <panm_init_fcb+0xa0>)
    c282:	f000 ff7e 	bl	d182 <panm_fcb_src>
    c286:	4603      	mov	r3, r0
    SYSINIT_PANIC_ASSERT(rc == 0);
    c288:	b13b      	cbz	r3, c29a <panm_init_fcb+0x92>
    c28a:	2000      	movs	r0, #0
    c28c:	9000      	str	r0, [sp, #0]
    c28e:	4b04      	ldr	r3, [pc, #16]	; (c2a0 <panm_init_fcb+0x98>)
    c290:	681c      	ldr	r4, [r3, #0]
    c292:	4603      	mov	r3, r0
    c294:	4602      	mov	r2, r0
    c296:	4601      	mov	r1, r0
    c298:	47a0      	blx	r4
}
    c29a:	b004      	add	sp, #16
    c29c:	bd10      	pop	{r4, pc}
    c29e:	bf00      	nop
    c2a0:	20000308 	.word	0x20000308
    c2a4:	20003f24 	.word	0x20003f24
    c2a8:	2000017c 	.word	0x2000017c

0000c2ac <panmaster_node_idx>:
    *node_idx_arg = node_idx;
    c2ac:	4b02      	ldr	r3, [pc, #8]	; (c2b8 <panmaster_node_idx+0xc>)
    c2ae:	6003      	str	r3, [r0, #0]
    *num_nodes = MYNEWT_VAL(PANMASTER_MAXNUM_NODES);
    c2b0:	2340      	movs	r3, #64	; 0x40
    c2b2:	600b      	str	r3, [r1, #0]
}
    c2b4:	4770      	bx	lr
    c2b6:	bf00      	nop
    c2b8:	20003828 	.word	0x20003828

0000c2bc <panmaster_find_node_general>:
{
    c2bc:	b508      	push	{r3, lr}
    c2be:	4601      	mov	r1, r0
    return panm_fcb_find_node(&pm_init_conf_fcb, fns);
    c2c0:	4801      	ldr	r0, [pc, #4]	; (c2c8 <panmaster_find_node_general+0xc>)
    c2c2:	f000 ff93 	bl	d1ec <panm_fcb_find_node>
}
    c2c6:	bd08      	pop	{r3, pc}
    c2c8:	2000017c 	.word	0x2000017c

0000c2cc <panmaster_clear_list>:
{
    c2cc:	b510      	push	{r4, lr}
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c2ce:	2300      	movs	r3, #0
    c2d0:	e00b      	b.n	c2ea <panmaster_clear_list+0x1e>
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    c2d2:	4c09      	ldr	r4, [pc, #36]	; (c2f8 <panmaster_clear_list+0x2c>)
    c2d4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    c2d8:	00ca      	lsls	r2, r1, #3
    c2da:	18a1      	adds	r1, r4, r2
    c2dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c2e0:	52a0      	strh	r0, [r4, r2]
    c2e2:	8048      	strh	r0, [r1, #2]
    c2e4:	2200      	movs	r2, #0
    c2e6:	740a      	strb	r2, [r1, #16]
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c2e8:	3301      	adds	r3, #1
    c2ea:	2b3f      	cmp	r3, #63	; 0x3f
    c2ec:	ddf1      	ble.n	c2d2 <panmaster_clear_list+0x6>
    panm_fcb_clear(&pm_init_conf_fcb);
    c2ee:	4803      	ldr	r0, [pc, #12]	; (c2fc <panmaster_clear_list+0x30>)
    c2f0:	f001 f81b 	bl	d32a <panm_fcb_clear>
}
    c2f4:	2000      	movs	r0, #0
    c2f6:	bd10      	pop	{r4, pc}
    c2f8:	20003828 	.word	0x20003828
    c2fc:	2000017c 	.word	0x2000017c

0000c300 <panmaster_idx_find_node>:

int
panmaster_idx_find_node(uint64_t euid, uint16_t role, struct panmaster_node **results)
{
    c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c304:	b087      	sub	sp, #28
    c306:	4606      	mov	r6, r0
    c308:	460d      	mov	r5, r1
    c30a:	4617      	mov	r7, r2
    c30c:	4698      	mov	r8, r3
    int i;
    struct dpl_timeval utctime;
    struct panmaster_node *node;
    bool node_is_found = false;

    if (!find_first_empty_nodes_to_save(euid, &node)) {
    c30e:	aa01      	add	r2, sp, #4
    c310:	f7ff ff12 	bl	c138 <find_first_empty_nodes_to_save>
    c314:	b108      	cbz	r0, c31a <panmaster_idx_find_node+0x1a>
        return 1;
    }

    /* Look for an existing node */
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c316:	2400      	movs	r4, #0
    c318:	e002      	b.n	c320 <panmaster_idx_find_node+0x20>
        return 1;
    c31a:	2001      	movs	r0, #1
    c31c:	e052      	b.n	c3c4 <panmaster_idx_find_node+0xc4>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c31e:	3401      	adds	r4, #1
    c320:	2c3f      	cmp	r4, #63	; 0x3f
    c322:	dc52      	bgt.n	c3ca <panmaster_idx_find_node+0xca>
        if (node_idx[i].addr == 0xffff) {
    c324:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    c328:	4b6a      	ldr	r3, [pc, #424]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c32a:	f833 203c 	ldrh.w	r2, [r3, ip, lsl #3]
    c32e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c332:	429a      	cmp	r2, r3
    c334:	d0f3      	beq.n	c31e <panmaster_idx_find_node+0x1e>
            continue;
        }
        if (euid == node_idx[i].euid) {
    c336:	4b67      	ldr	r3, [pc, #412]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c338:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    c33c:	f8dc 2008 	ldr.w	r2, [ip, #8]
    c340:	f8dc 300c 	ldr.w	r3, [ip, #12]
    c344:	42ab      	cmp	r3, r5
    c346:	bf08      	it	eq
    c348:	42b2      	cmpeq	r2, r6
    c34a:	d1e8      	bne.n	c31e <panmaster_idx_find_node+0x1e>
            node_is_found = true;
            node->index = i;
    c34c:	9d01      	ldr	r5, [sp, #4]
    c34e:	752c      	strb	r4, [r5, #20]
            break;
        }
    }

    if (node_is_found) {
        *results = node;
    c350:	f8c8 5000 	str.w	r5, [r8]

        node->addr = node_idx[i].addr;
    c354:	4b5f      	ldr	r3, [pc, #380]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c356:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    c35a:	f833 0031 	ldrh.w	r0, [r3, r1, lsl #3]
    c35e:	8228      	strh	r0, [r5, #16]
        node->euid = node_idx[i].euid;
    c360:	f8dc 6008 	ldr.w	r6, [ip, #8]
    c364:	f8dc 100c 	ldr.w	r1, [ip, #12]
    c368:	60ae      	str	r6, [r5, #8]
    c36a:	60e9      	str	r1, [r5, #12]
        node->role = node_idx[i].role;
    c36c:	f89c 6010 	ldrb.w	r6, [ip, #16]
    c370:	7ce9      	ldrb	r1, [r5, #19]
    c372:	f366 1107 	bfi	r1, r6, #4, #4
    c376:	74e9      	strb	r1, [r5, #19]
        node->has_perm_slot = node_idx[i].has_perm_slot;
    c378:	f89c 1011 	ldrb.w	r1, [ip, #17]
    c37c:	7cea      	ldrb	r2, [r5, #19]
    c37e:	f361 02c3 	bfi	r2, r1, #3, #1
    c382:	74ea      	strb	r2, [r5, #19]
        node->slot_id = node_idx[node->index].slot_id;
    c384:	7d2a      	ldrb	r2, [r5, #20]
    c386:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c38e:	885b      	ldrh	r3, [r3, #2]
    c390:	f8a5 3015 	strh.w	r3, [r5, #21]
        if (!node->has_perm_slot) {
    c394:	7ceb      	ldrb	r3, [r5, #19]
    c396:	f013 0f08 	tst.w	r3, #8
    c39a:	d027      	beq.n	c3ec <panmaster_idx_find_node+0xec>
            node->slot_id = first_free_slot_id(node->addr, role);
            node_idx[node->index].slot_id = node->slot_id;
        }

        /* Only check role if given */
        if (node->role != role && role > 0) {
    c39c:	9b01      	ldr	r3, [sp, #4]
    c39e:	7cda      	ldrb	r2, [r3, #19]
    c3a0:	ebb7 1f12 	cmp.w	r7, r2, lsr #4
    c3a4:	d00d      	beq.n	c3c2 <panmaster_idx_find_node+0xc2>
    c3a6:	b167      	cbz	r7, c3c2 <panmaster_idx_find_node+0xc2>
            node->role = role;
    c3a8:	7cda      	ldrb	r2, [r3, #19]
    c3aa:	f367 1207 	bfi	r2, r7, #4, #4
    c3ae:	74da      	strb	r2, [r3, #19]
            node_idx[i].save_needed = 1;
    c3b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c3b4:	4b47      	ldr	r3, [pc, #284]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c3b6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    c3ba:	7c63      	ldrb	r3, [r4, #17]
    c3bc:	f043 0302 	orr.w	r3, r3, #2
    c3c0:	7463      	strb	r3, [r4, #17]
        }
        return 0;
    c3c2:	2000      	movs	r0, #0
        node_idx[i].save_needed = 1;
        break;
    }

    return 0;
}
    c3c4:	b007      	add	sp, #28
    c3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c3ca:	f04f 0900 	mov.w	r9, #0
    c3ce:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
    c3d2:	dc7d      	bgt.n	c4d0 <panmaster_idx_find_node+0x1d0>
        if (node_idx[i].addr != 0xffff) {
    c3d4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    c3d8:	4a3e      	ldr	r2, [pc, #248]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c3da:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    c3de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c3e2:	429a      	cmp	r2, r3
    c3e4:	d012      	beq.n	c40c <panmaster_idx_find_node+0x10c>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c3e6:	f109 0901 	add.w	r9, r9, #1
    c3ea:	e7f0      	b.n	c3ce <panmaster_idx_find_node+0xce>
            node->slot_id = first_free_slot_id(node->addr, role);
    c3ec:	4639      	mov	r1, r7
    c3ee:	f7ff fe69 	bl	c0c4 <first_free_slot_id>
    c3f2:	f8a5 0015 	strh.w	r0, [r5, #21]
            node_idx[node->index].slot_id = node->slot_id;
    c3f6:	9a01      	ldr	r2, [sp, #4]
    c3f8:	7d13      	ldrb	r3, [r2, #20]
    c3fa:	f8b2 1015 	ldrh.w	r1, [r2, #21]
    c3fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c402:	4a34      	ldr	r2, [pc, #208]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c404:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c408:	8059      	strh	r1, [r3, #2]
    c40a:	e7c7      	b.n	c39c <panmaster_idx_find_node+0x9c>
        PANMASTER_NODE_DEFAULT(*node);
    c40c:	9b01      	ldr	r3, [sp, #4]
    c40e:	2400      	movs	r4, #0
    c410:	701c      	strb	r4, [r3, #0]
    c412:	705c      	strb	r4, [r3, #1]
    c414:	709c      	strb	r4, [r3, #2]
    c416:	70dc      	strb	r4, [r3, #3]
    c418:	711c      	strb	r4, [r3, #4]
    c41a:	715c      	strb	r4, [r3, #5]
    c41c:	719c      	strb	r4, [r3, #6]
    c41e:	71dc      	strb	r4, [r3, #7]
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	721c      	strb	r4, [r3, #8]
    c424:	725c      	strb	r4, [r3, #9]
    c426:	729c      	strb	r4, [r3, #10]
    c428:	72dc      	strb	r4, [r3, #11]
    c42a:	731c      	strb	r4, [r3, #12]
    c42c:	735c      	strb	r4, [r3, #13]
    c42e:	739c      	strb	r4, [r3, #14]
    c430:	73dc      	strb	r4, [r3, #15]
    c432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c436:	741a      	strb	r2, [r3, #16]
    c438:	745a      	strb	r2, [r3, #17]
    c43a:	749c      	strb	r4, [r3, #18]
    c43c:	74dc      	strb	r4, [r3, #19]
    c43e:	751c      	strb	r4, [r3, #20]
    c440:	755a      	strb	r2, [r3, #21]
    c442:	759a      	strb	r2, [r3, #22]
    c444:	75dc      	strb	r4, [r3, #23]
    c446:	761c      	strb	r4, [r3, #24]
    c448:	765c      	strb	r4, [r3, #25]
    c44a:	769c      	strb	r4, [r3, #26]
    c44c:	76dc      	strb	r4, [r3, #27]
    c44e:	771c      	strb	r4, [r3, #28]
    c450:	775c      	strb	r4, [r3, #29]
    c452:	779c      	strb	r4, [r3, #30]
    return os_gettimeofday((struct os_timeval*)tv, (struct os_timezone*)tz);
    c454:	4621      	mov	r1, r4
    c456:	a802      	add	r0, sp, #8
    c458:	f7fe f816 	bl	a488 <os_gettimeofday>
        node->euid = euid;
    c45c:	f8dd a004 	ldr.w	sl, [sp, #4]
    c460:	f8ca 6008 	str.w	r6, [sl, #8]
    c464:	f8ca 500c 	str.w	r5, [sl, #12]
        node->addr = first_free_short_addr(euid);
    c468:	4630      	mov	r0, r6
    c46a:	4629      	mov	r1, r5
    c46c:	f7ff fdca 	bl	c004 <first_free_short_addr>
    c470:	f8aa 0010 	strh.w	r0, [sl, #16]
        node_idx[i].addr = node->addr;
    c474:	4d17      	ldr	r5, [pc, #92]	; (c4d4 <panmaster_idx_find_node+0x1d4>)
    c476:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    c47a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
    c47e:	f825 0033 	strh.w	r0, [r5, r3, lsl #3]
        node_idx[i].euid = node->euid;
    c482:	f8da 2008 	ldr.w	r2, [sl, #8]
    c486:	f8da 300c 	ldr.w	r3, [sl, #12]
    c48a:	60b2      	str	r2, [r6, #8]
    c48c:	60f3      	str	r3, [r6, #12]
        node_idx[i].role = role;
    c48e:	7437      	strb	r7, [r6, #16]
        node->role = role;
    c490:	f89a 3013 	ldrb.w	r3, [sl, #19]
    c494:	f367 1307 	bfi	r3, r7, #4, #4
    c498:	f88a 3013 	strb.w	r3, [sl, #19]
        node->slot_id = first_free_slot_id(node->addr, role);
    c49c:	4639      	mov	r1, r7
    c49e:	f8ba 0010 	ldrh.w	r0, [sl, #16]
    c4a2:	f7ff fe0f 	bl	c0c4 <first_free_slot_id>
    c4a6:	f8aa 0015 	strh.w	r0, [sl, #21]
        node_idx[i].slot_id = node->slot_id;
    c4aa:	9b01      	ldr	r3, [sp, #4]
    c4ac:	f8b3 2015 	ldrh.w	r2, [r3, #21]
    c4b0:	8072      	strh	r2, [r6, #2]
        node->first_seen_utc = utctime.tv_sec;
    c4b2:	9a03      	ldr	r2, [sp, #12]
    c4b4:	9902      	ldr	r1, [sp, #8]
    c4b6:	6019      	str	r1, [r3, #0]
    c4b8:	605a      	str	r2, [r3, #4]
        node->index = i;
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	f883 9014 	strb.w	r9, [r3, #20]
        *results = node;
    c4c0:	f8c8 3000 	str.w	r3, [r8]
        node_idx[i].save_needed = 1;
    c4c4:	7c73      	ldrb	r3, [r6, #17]
    c4c6:	f043 0302 	orr.w	r3, r3, #2
    c4ca:	7473      	strb	r3, [r6, #17]
    return 0;
    c4cc:	4620      	mov	r0, r4
        break;
    c4ce:	e779      	b.n	c3c4 <panmaster_idx_find_node+0xc4>
    return 0;
    c4d0:	2000      	movs	r0, #0
    c4d2:	e777      	b.n	c3c4 <panmaster_idx_find_node+0xc4>
    c4d4:	20003828 	.word	0x20003828

0000c4d8 <panrequest_cb>:
{
    c4d8:	b530      	push	{r4, r5, lr}
    c4da:	b087      	sub	sp, #28
    c4dc:	4615      	mov	r5, r2
    c4de:	461c      	mov	r4, r3
    struct panmaster_node *node = 0;
    c4e0:	2300      	movs	r3, #0
    c4e2:	9301      	str	r3, [sp, #4]
    panmaster_idx_find_node(euid, request->role, &node);
    c4e4:	ab01      	add	r3, sp, #4
    c4e6:	8812      	ldrh	r2, [r2, #0]
    c4e8:	f7ff ff0a 	bl	c300 <panmaster_idx_find_node>
    if (!node) {
    c4ec:	9b01      	ldr	r3, [sp, #4]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	d035      	beq.n	c55e <panrequest_cb+0x86>
    memcpy(&node->fw_ver, &request->fw_ver, sizeof(struct pan_image_version));
    c4f2:	6869      	ldr	r1, [r5, #4]
    c4f4:	68aa      	ldr	r2, [r5, #8]
    c4f6:	f8c3 1017 	str.w	r1, [r3, #23]
    c4fa:	f8c3 201b 	str.w	r2, [r3, #27]
    response->short_address = node->addr;
    c4fe:	8a1a      	ldrh	r2, [r3, #16]
    c500:	80e2      	strh	r2, [r4, #6]
    response->slot_id = node_idx[node->index].slot_id;
    c502:	7d1b      	ldrb	r3, [r3, #20]
    c504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c508:	4a16      	ldr	r2, [pc, #88]	; (c564 <panrequest_cb+0x8c>)
    c50a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c50e:	885b      	ldrh	r3, [r3, #2]
    c510:	8123      	strh	r3, [r4, #8]
    os_get_uptime((struct os_timeval*)tvp);
    c512:	a802      	add	r0, sp, #8
    c514:	f7fe f83e 	bl	a594 <os_get_uptime>
    if (response->lease_time == 0) {
    c518:	8863      	ldrh	r3, [r4, #2]
    c51a:	b90b      	cbnz	r3, c520 <panrequest_cb+0x48>
        response->lease_time = MYNEWT_VAL(PANMASTER_DEFAULT_LEASE_TIME);
    c51c:	231e      	movs	r3, #30
    c51e:	8063      	strh	r3, [r4, #2]
    node_idx[node->index].lease_ends = tv.tv_sec*1000 + tv.tv_usec/1000 + (uint32_t)request->lease_time*1000;
    c520:	8869      	ldrh	r1, [r5, #2]
    c522:	9b04      	ldr	r3, [sp, #16]
    c524:	4a10      	ldr	r2, [pc, #64]	; (c568 <panrequest_cb+0x90>)
    c526:	fb82 0203 	smull	r0, r2, r2, r3
    c52a:	17db      	asrs	r3, r3, #31
    c52c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    c530:	9801      	ldr	r0, [sp, #4]
    c532:	7d02      	ldrb	r2, [r0, #20]
    c534:	9d02      	ldr	r5, [sp, #8]
    c536:	4429      	add	r1, r5
    c538:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    c53c:	fb05 3301 	mla	r3, r5, r1, r3
    c540:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c544:	4907      	ldr	r1, [pc, #28]	; (c564 <panrequest_cb+0x8c>)
    c546:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    c54a:	6153      	str	r3, [r2, #20]
    response->pan_id = pan_id;
    c54c:	4b07      	ldr	r3, [pc, #28]	; (c56c <panrequest_cb+0x94>)
    c54e:	881b      	ldrh	r3, [r3, #0]
    c550:	80a3      	strh	r3, [r4, #4]
    response->role = node->role;
    c552:	7cc3      	ldrb	r3, [r0, #19]
    c554:	091b      	lsrs	r3, r3, #4
    c556:	8023      	strh	r3, [r4, #0]
    return true;
    c558:	2001      	movs	r0, #1
}
    c55a:	b007      	add	sp, #28
    c55c:	bd30      	pop	{r4, r5, pc}
        return false;
    c55e:	2000      	movs	r0, #0
    c560:	e7fb      	b.n	c55a <panrequest_cb+0x82>
    c562:	bf00      	nop
    c564:	20003828 	.word	0x20003828
    c568:	10624dd3 	.word	0x10624dd3
    c56c:	20003f20 	.word	0x20003f20

0000c570 <panmaster_load>:

int
panmaster_load(panm_load_cb cb, void *cb_arg)
{
    c570:	b508      	push	{r3, lr}
    c572:	460a      	mov	r2, r1
#if MYNEWT_VAL(PANMASTER_NFFS)
    return panm_file_load(&panmaster_storage_file, cb, cb_arg);
#elif MYNEWT_VAL(PANMASTER_FCB)
    return panm_fcb_load(&pm_init_conf_fcb, cb, cb_arg);
    c574:	4601      	mov	r1, r0
    c576:	4802      	ldr	r0, [pc, #8]	; (c580 <panmaster_load+0x10>)
    c578:	f000 fe1e 	bl	d1b8 <panm_fcb_load>
#endif
}
    c57c:	bd08      	pop	{r3, pc}
    c57e:	bf00      	nop
    c580:	2000017c 	.word	0x2000017c

0000c584 <panmaster_save_node>:
    return;
}

int
panmaster_save_node(struct panmaster_node *node)
{
    c584:	b508      	push	{r3, lr}
    c586:	4601      	mov	r1, r0
    /* Make sure index is up to date */
    node_idx[node->index].role = node->role;
    c588:	7d03      	ldrb	r3, [r0, #20]
    c58a:	7cc0      	ldrb	r0, [r0, #19]
    c58c:	f3c0 1003 	ubfx	r0, r0, #4, #4
    c590:	4a0a      	ldr	r2, [pc, #40]	; (c5bc <panmaster_save_node+0x38>)
    c592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c596:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c59a:	7418      	strb	r0, [r3, #16]
    node_idx[node->index].has_perm_slot = node->has_perm_slot;
    c59c:	7d0b      	ldrb	r3, [r1, #20]
    c59e:	7cc8      	ldrb	r0, [r1, #19]
    c5a0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    c5a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c5ac:	7c5a      	ldrb	r2, [r3, #17]
    c5ae:	f360 0200 	bfi	r2, r0, #0, #1
    c5b2:	745a      	strb	r2, [r3, #17]

#if MYNEWT_VAL(PANMASTER_NFFS)
    return panm_file_save(&panmaster_storage_file, node);
#elif MYNEWT_VAL(PANMASTER_FCB)
    return panm_fcb_save(&pm_init_conf_fcb, node);
    c5b4:	4802      	ldr	r0, [pc, #8]	; (c5c0 <panmaster_save_node+0x3c>)
    c5b6:	f000 feb0 	bl	d31a <panm_fcb_save>
#endif
}
    c5ba:	bd08      	pop	{r3, pc}
    c5bc:	20003828 	.word	0x20003828
    c5c0:	2000017c 	.word	0x2000017c

0000c5c4 <panmaster_update_node>:
{
    c5c4:	b570      	push	{r4, r5, r6, lr}
    c5c6:	b092      	sub	sp, #72	; 0x48
    c5c8:	4606      	mov	r6, r0
    c5ca:	460d      	mov	r5, r1
    c5cc:	4614      	mov	r4, r2
    struct find_node_s fns = { .results = &stored_node };
    c5ce:	2228      	movs	r2, #40	; 0x28
    c5d0:	2100      	movs	r1, #0
    c5d2:	4668      	mov	r0, sp
    c5d4:	f004 f851 	bl	1067a <memset>
    c5d8:	ab0a      	add	r3, sp, #40	; 0x28
    c5da:	9308      	str	r3, [sp, #32]
    PANMASTER_NODE_DEFAULT(fns.find);
    c5dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5e0:	f8ad 3010 	strh.w	r3, [sp, #16]
    c5e4:	f88d 3015 	strb.w	r3, [sp, #21]
    c5e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c5ec:	f88d 3016 	strb.w	r3, [sp, #22]
    fns.find.euid = euid;
    c5f0:	9602      	str	r6, [sp, #8]
    c5f2:	9503      	str	r5, [sp, #12]
    panmaster_find_node_general(&fns);
    c5f4:	4668      	mov	r0, sp
    c5f6:	f7ff fe61 	bl	c2bc <panmaster_find_node_general>
    if (fns.is_found) {
    c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c5fc:	b17b      	cbz	r3, c61e <panmaster_update_node+0x5a>
        if (memcmp(&upd_node->fw_ver, &stored_node.fw_ver, sizeof(upd_node->fw_ver)) != 0 ||
    c5fe:	2208      	movs	r2, #8
    c600:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    c604:	f104 0017 	add.w	r0, r4, #23
    c608:	f004 f806 	bl	10618 <memcmp>
    c60c:	b938      	cbnz	r0, c61e <panmaster_update_node+0x5a>
            upd_node->first_seen_utc != stored_node.first_seen_utc ||
    c60e:	6820      	ldr	r0, [r4, #0]
    c610:	6862      	ldr	r2, [r4, #4]
        if (memcmp(&upd_node->fw_ver, &stored_node.fw_ver, sizeof(upd_node->fw_ver)) != 0 ||
    c612:	990a      	ldr	r1, [sp, #40]	; 0x28
    c614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c616:	429a      	cmp	r2, r3
    c618:	bf08      	it	eq
    c61a:	4288      	cmpeq	r0, r1
    c61c:	d004      	beq.n	c628 <panmaster_update_node+0x64>
        panmaster_save_node(upd_node);
    c61e:	4620      	mov	r0, r4
    c620:	f7ff ffb0 	bl	c584 <panmaster_save_node>
}
    c624:	b012      	add	sp, #72	; 0x48
    c626:	bd70      	pop	{r4, r5, r6, pc}
            upd_node->addr != stored_node.addr ||
    c628:	8a22      	ldrh	r2, [r4, #16]
    c62a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
            upd_node->first_seen_utc != stored_node.first_seen_utc ||
    c62e:	429a      	cmp	r2, r3
    c630:	d1f5      	bne.n	c61e <panmaster_update_node+0x5a>
            upd_node->flags != stored_node.flags ||
    c632:	8a62      	ldrh	r2, [r4, #18]
    c634:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
            upd_node->addr != stored_node.addr ||
    c638:	429a      	cmp	r2, r3
    c63a:	d1f0      	bne.n	c61e <panmaster_update_node+0x5a>
            upd_node->index != stored_node.index
    c63c:	7d22      	ldrb	r2, [r4, #20]
    c63e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
            upd_node->flags != stored_node.flags ||
    c642:	429a      	cmp	r2, r3
    c644:	d1eb      	bne.n	c61e <panmaster_update_node+0x5a>
    c646:	e7ed      	b.n	c624 <panmaster_update_node+0x60>

0000c648 <panmaster_postprocess>:
{
    c648:	b570      	push	{r4, r5, r6, lr}
    c64a:	b088      	sub	sp, #32
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c64c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c650:	4820      	ldr	r0, [pc, #128]	; (c6d4 <panmaster_postprocess+0x8c>)
    c652:	f7fe fb5d 	bl	ad10 <os_mutex_pend>
    if (dpl_mutex_pend(&save_mutex, DPL_WAIT_FOREVER) != DPL_OK) {
    c656:	2800      	cmp	r0, #0
    c658:	d13a      	bne.n	c6d0 <panmaster_postprocess+0x88>
    for (i=0;i < slots;i++) {
    c65a:	2400      	movs	r4, #0
    c65c:	e000      	b.n	c660 <panmaster_postprocess+0x18>
    c65e:	3401      	adds	r4, #1
    c660:	2c07      	cmp	r4, #7
    c662:	dc32      	bgt.n	c6ca <panmaster_postprocess+0x82>
        if (nodes_to_save[i].euid) {
    c664:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
    c668:	4b1b      	ldr	r3, [pc, #108]	; (c6d8 <panmaster_postprocess+0x90>)
    c66a:	4413      	add	r3, r2
    c66c:	689a      	ldr	r2, [r3, #8]
    c66e:	68db      	ldr	r3, [r3, #12]
    c670:	4313      	orrs	r3, r2
    c672:	d0f4      	beq.n	c65e <panmaster_postprocess+0x16>
            memcpy(&node, &nodes_to_save[i], sizeof(node));
    c674:	4a18      	ldr	r2, [pc, #96]	; (c6d8 <panmaster_postprocess+0x90>)
    c676:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
    c67a:	18d5      	adds	r5, r2, r3
    c67c:	46ec      	mov	ip, sp
    c67e:	58d0      	ldr	r0, [r2, r3]
    c680:	6869      	ldr	r1, [r5, #4]
    c682:	68aa      	ldr	r2, [r5, #8]
    c684:	68eb      	ldr	r3, [r5, #12]
    c686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    c68a:	6928      	ldr	r0, [r5, #16]
    c68c:	6969      	ldr	r1, [r5, #20]
    c68e:	69aa      	ldr	r2, [r5, #24]
    c690:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    c694:	8baa      	ldrh	r2, [r5, #28]
    c696:	7fab      	ldrb	r3, [r5, #30]
    c698:	f8ac 2000 	strh.w	r2, [ip]
    c69c:	f88c 3002 	strb.w	r3, [ip, #2]
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c6a0:	4e0c      	ldr	r6, [pc, #48]	; (c6d4 <panmaster_postprocess+0x8c>)
    c6a2:	4630      	mov	r0, r6
    c6a4:	f7fe fad8 	bl	ac58 <os_mutex_release>
            panmaster_update_node(node.euid, &node);
    c6a8:	466a      	mov	r2, sp
    c6aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c6ae:	f7ff ff89 	bl	c5c4 <panmaster_update_node>
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
    c6b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c6b6:	4630      	mov	r0, r6
    c6b8:	f7fe fb2a 	bl	ad10 <os_mutex_pend>
            if (dpl_mutex_pend(&save_mutex, DPL_WAIT_FOREVER) != DPL_OK) {
    c6bc:	b940      	cbnz	r0, c6d0 <panmaster_postprocess+0x88>
            memset(&nodes_to_save[i], 0, sizeof(node));
    c6be:	221f      	movs	r2, #31
    c6c0:	2100      	movs	r1, #0
    c6c2:	4628      	mov	r0, r5
    c6c4:	f003 ffd9 	bl	1067a <memset>
    c6c8:	e7c9      	b.n	c65e <panmaster_postprocess+0x16>
    return (dpl_error_t)os_mutex_release(&mu->mu);
    c6ca:	4802      	ldr	r0, [pc, #8]	; (c6d4 <panmaster_postprocess+0x8c>)
    c6cc:	f7fe fac4 	bl	ac58 <os_mutex_release>
}
    c6d0:	b008      	add	sp, #32
    c6d2:	bd70      	pop	{r4, r5, r6, pc}
    c6d4:	20003ff0 	.word	0x20003ff0
    c6d8:	20003e28 	.word	0x20003e28

0000c6dc <postprocess_cb>:
{
    c6dc:	b508      	push	{r3, lr}
    assert(ev != NULL);
    c6de:	b148      	cbz	r0, c6f4 <postprocess_cb+0x18>
    return ev->ev.ev_arg;
    c6e0:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev));
    c6e2:	b16b      	cbz	r3, c700 <postprocess_cb+0x24>
    if (pan->config->role != UWB_PAN_ROLE_MASTER) {
    c6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    c6e8:	7adb      	ldrb	r3, [r3, #11]
    c6ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c6ee:	2b10      	cmp	r3, #16
    c6f0:	d00b      	beq.n	c70a <postprocess_cb+0x2e>
}
    c6f2:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    c6f4:	2300      	movs	r3, #0
    c6f6:	461a      	mov	r2, r3
    c6f8:	4619      	mov	r1, r3
    c6fa:	4618      	mov	r0, r3
    c6fc:	f7fc fd62 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    c700:	461a      	mov	r2, r3
    c702:	4619      	mov	r1, r3
    c704:	4618      	mov	r0, r3
    c706:	f7fc fd5d 	bl	91c4 <__assert_func>
    panmaster_postprocess();
    c70a:	f7ff ff9d 	bl	c648 <panmaster_postprocess>
    c70e:	e7f0      	b.n	c6f2 <postprocess_cb+0x16>

0000c710 <panmaster_add_node>:
{
    c710:	b530      	push	{r4, r5, lr}
    c712:	b09b      	sub	sp, #108	; 0x6c
    c714:	4605      	mov	r5, r0
    c716:	4614      	mov	r4, r2
    struct find_node_s fns = { .results = &node };
    c718:	2228      	movs	r2, #40	; 0x28
    c71a:	2100      	movs	r1, #0
    c71c:	a804      	add	r0, sp, #16
    c71e:	f003 ffac 	bl	1067a <memset>
    c722:	ab0e      	add	r3, sp, #56	; 0x38
    c724:	930c      	str	r3, [sp, #48]	; 0x30
    if (short_addr==0) {
    c726:	2d00      	cmp	r5, #0
    c728:	f000 808b 	beq.w	c842 <panmaster_add_node+0x132>
    rc = 1;
    c72c:	2201      	movs	r2, #1
    for (i=0;i<sizeof(uint64_t)&&rc;i++) {
    c72e:	2300      	movs	r3, #0
    c730:	e000      	b.n	c734 <panmaster_add_node+0x24>
    c732:	3301      	adds	r3, #1
    c734:	4619      	mov	r1, r3
    c736:	2b07      	cmp	r3, #7
    c738:	d805      	bhi.n	c746 <panmaster_add_node+0x36>
    c73a:	b122      	cbz	r2, c746 <panmaster_add_node+0x36>
        if (euid_u8[i]!=0xff) {
    c73c:	5c61      	ldrb	r1, [r4, r1]
    c73e:	29ff      	cmp	r1, #255	; 0xff
    c740:	d0f7      	beq.n	c732 <panmaster_add_node+0x22>
            rc = 0;
    c742:	2200      	movs	r2, #0
    c744:	e7f5      	b.n	c732 <panmaster_add_node+0x22>
    if (rc==1) {
    c746:	2a00      	cmp	r2, #0
    c748:	d17b      	bne.n	c842 <panmaster_add_node+0x132>
    memcpy(&euid, euid_u8, sizeof(uint64_t));
    c74a:	ab02      	add	r3, sp, #8
    c74c:	6820      	ldr	r0, [r4, #0]
    c74e:	6861      	ldr	r1, [r4, #4]
    c750:	c303      	stmia	r3!, {r0, r1}
    PANMASTER_NODE_DEFAULT(fns.find);
    c752:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c756:	f8ad 3020 	strh.w	r3, [sp, #32]
    c75a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    c75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c762:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    fns.find.euid = euid;
    c766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c76a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    panmaster_find_node_general(&fns);
    c76e:	a804      	add	r0, sp, #16
    c770:	f7ff fda4 	bl	c2bc <panmaster_find_node_general>
    if (fns.is_found)
    c774:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c776:	b184      	cbz	r4, c79a <panmaster_add_node+0x8a>
        if (node.addr == short_addr) {
    c778:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    c77c:	42ab      	cmp	r3, r5
    c77e:	d060      	beq.n	c842 <panmaster_add_node+0x132>
        node.addr = short_addr;
    c780:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
        panm_fcb_save(&pm_init_conf_fcb, &node);
    c784:	a90e      	add	r1, sp, #56	; 0x38
    c786:	4834      	ldr	r0, [pc, #208]	; (c858 <panmaster_add_node+0x148>)
    c788:	f000 fdc7 	bl	d31a <panm_fcb_save>
        PM_DEBUG("panm: node upd\n");
    c78c:	4b33      	ldr	r3, [pc, #204]	; (c85c <panmaster_add_node+0x14c>)
    c78e:	2200      	movs	r2, #0
    c790:	215b      	movs	r1, #91	; 0x5b
    c792:	4833      	ldr	r0, [pc, #204]	; (c860 <panmaster_add_node+0x150>)
    c794:	f007 ff20 	bl	145d8 <log_printf>
        return;
    c798:	e053      	b.n	c842 <panmaster_add_node+0x132>
    PANMASTER_NODE_DEFAULT(node);
    c79a:	2200      	movs	r2, #0
    c79c:	2300      	movs	r3, #0
    c79e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    c7a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    c7a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c7aa:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    c7ae:	2300      	movs	r3, #0
    c7b0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    c7b4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    c7b8:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    c7bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c7c0:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    c7c4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    c7c8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    c7cc:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    c7d0:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    c7d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c7d8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    c7dc:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    c7e0:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c7e4:	2c3f      	cmp	r4, #63	; 0x3f
    c7e6:	dc2c      	bgt.n	c842 <panmaster_add_node+0x132>
        if (node_idx[i].addr != 0xffff) {
    c7e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    c7ec:	4a1d      	ldr	r2, [pc, #116]	; (c864 <panmaster_add_node+0x154>)
    c7ee:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    c7f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c7f6:	429a      	cmp	r2, r3
    c7f8:	d001      	beq.n	c7fe <panmaster_add_node+0xee>
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++)
    c7fa:	3401      	adds	r4, #1
    c7fc:	e7f2      	b.n	c7e4 <panmaster_add_node+0xd4>
    return os_gettimeofday((struct os_timeval*)tv, (struct os_timezone*)tz);
    c7fe:	2100      	movs	r1, #0
    c800:	a816      	add	r0, sp, #88	; 0x58
    c802:	f7fd fe41 	bl	a488 <os_gettimeofday>
        node.euid = euid;
    c806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c80a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
        if (!short_addr_is_free(short_addr)) {
    c80e:	4628      	mov	r0, r5
    c810:	f7ff fc20 	bl	c054 <short_addr_is_free>
    c814:	b1b8      	cbz	r0, c846 <panmaster_add_node+0x136>
        node.addr = short_addr;
    c816:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
        node_idx[i].addr = node.addr;
    c81a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    c81e:	4b11      	ldr	r3, [pc, #68]	; (c864 <panmaster_add_node+0x154>)
    c820:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
        node.first_seen_utc = utctime.tv_sec;
    c824:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    c828:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
        node.index = i;
    c82c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
        panmaster_save_node(&node);
    c830:	a80e      	add	r0, sp, #56	; 0x38
    c832:	f7ff fea7 	bl	c584 <panmaster_save_node>
        PM_DEBUG("panm: node added\n");
    c836:	4b0c      	ldr	r3, [pc, #48]	; (c868 <panmaster_add_node+0x158>)
    c838:	2200      	movs	r2, #0
    c83a:	215b      	movs	r1, #91	; 0x5b
    c83c:	4808      	ldr	r0, [pc, #32]	; (c860 <panmaster_add_node+0x150>)
    c83e:	f007 fecb 	bl	145d8 <log_printf>
}
    c842:	b01b      	add	sp, #108	; 0x6c
    c844:	bd30      	pop	{r4, r5, pc}
            PM_ERR("Dupl short addr %x\n", short_addr);
    c846:	9500      	str	r5, [sp, #0]
    c848:	4b08      	ldr	r3, [pc, #32]	; (c86c <panmaster_add_node+0x15c>)
    c84a:	2203      	movs	r2, #3
    c84c:	215b      	movs	r1, #91	; 0x5b
    c84e:	4804      	ldr	r0, [pc, #16]	; (c860 <panmaster_add_node+0x150>)
    c850:	f007 fec2 	bl	145d8 <log_printf>
    c854:	e7df      	b.n	c816 <panmaster_add_node+0x106>
    c856:	bf00      	nop
    c858:	2000017c 	.word	0x2000017c
    c85c:	0002666c 	.word	0x0002666c
    c860:	2000380c 	.word	0x2000380c
    c864:	20003828 	.word	0x20003828
    c868:	00026690 	.word	0x00026690
    c86c:	0002667c 	.word	0x0002667c

0000c870 <panmaster_delete_node>:
{
    c870:	b530      	push	{r4, r5, lr}
    c872:	b093      	sub	sp, #76	; 0x4c
    c874:	4605      	mov	r5, r0
    c876:	460c      	mov	r4, r1
    struct find_node_s fns = { .results = &node };
    c878:	2228      	movs	r2, #40	; 0x28
    c87a:	2100      	movs	r1, #0
    c87c:	4668      	mov	r0, sp
    c87e:	f003 fefc 	bl	1067a <memset>
    c882:	ab0a      	add	r3, sp, #40	; 0x28
    c884:	9308      	str	r3, [sp, #32]
    PANMASTER_NODE_DEFAULT(fns.find);
    c886:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c88a:	f8ad 3010 	strh.w	r3, [sp, #16]
    c88e:	f88d 3015 	strb.w	r3, [sp, #21]
    c892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c896:	f88d 3016 	strb.w	r3, [sp, #22]
    fns.find.euid = euid;
    c89a:	9502      	str	r5, [sp, #8]
    c89c:	9403      	str	r4, [sp, #12]
    panmaster_find_node_general(&fns);
    c89e:	4668      	mov	r0, sp
    c8a0:	f7ff fd0c 	bl	c2bc <panmaster_find_node_general>
    if (!fns.is_found) {
    c8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8a6:	b163      	cbz	r3, c8c2 <panmaster_delete_node+0x52>
    if (node.index >= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    c8a8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    c8ac:	2b3f      	cmp	r3, #63	; 0x3f
    c8ae:	d808      	bhi.n	c8c2 <panmaster_delete_node+0x52>
    if (node_idx[node.index].addr != node.addr)
    c8b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c8b4:	4914      	ldr	r1, [pc, #80]	; (c908 <panmaster_delete_node+0x98>)
    c8b6:	f831 1032 	ldrh.w	r1, [r1, r2, lsl #3]
    c8ba:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    c8be:	4291      	cmp	r1, r2
    c8c0:	d001      	beq.n	c8c6 <panmaster_delete_node+0x56>
}
    c8c2:	b013      	add	sp, #76	; 0x4c
    c8c4:	bd30      	pop	{r4, r5, pc}
    node.addr = 0xFFFF;
    c8c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c8ca:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    node_idx[node.index].addr = 0xFFFF;
    c8ce:	4a0e      	ldr	r2, [pc, #56]	; (c908 <panmaster_delete_node+0x98>)
    c8d0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    c8d4:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
    c8d8:	f822 1034 	strh.w	r1, [r2, r4, lsl #3]
    node_idx[node.index].euid = 0xFFFFFFFFFFFFFFFFULL;
    c8dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c8e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    c8e4:	e9c0 4502 	strd	r4, r5, [r0, #8]
    node_idx[node.index].slot_id = 0xFFFF;
    c8e8:	8041      	strh	r1, [r0, #2]
    node_idx[node.index].has_perm_slot = 0;
    c8ea:	7c42      	ldrb	r2, [r0, #17]
    c8ec:	f36f 0200 	bfc	r2, #0, #1
    c8f0:	7442      	strb	r2, [r0, #17]
    panmaster_save_node(&node);
    c8f2:	a80a      	add	r0, sp, #40	; 0x28
    c8f4:	f7ff fe46 	bl	c584 <panmaster_save_node>
    PM_DEBUG("panmaster_delete_node: node deleted\n");
    c8f8:	4b04      	ldr	r3, [pc, #16]	; (c90c <panmaster_delete_node+0x9c>)
    c8fa:	2200      	movs	r2, #0
    c8fc:	215b      	movs	r1, #91	; 0x5b
    c8fe:	4804      	ldr	r0, [pc, #16]	; (c910 <panmaster_delete_node+0xa0>)
    c900:	f007 fe6a 	bl	145d8 <log_printf>
    return;
    c904:	e7dd      	b.n	c8c2 <panmaster_delete_node+0x52>
    c906:	bf00      	nop
    c908:	20003828 	.word	0x20003828
    c90c:	000266a4 	.word	0x000266a4
    c910:	2000380c 	.word	0x2000380c

0000c914 <panmaster_compress>:
    return addr;
}

void
panmaster_compress()
{
    c914:	b508      	push	{r3, lr}
#if MYNEWT_VAL(PANMASTER_NFFS)
    panm_file_compress(&panmaster_storage_file, node_idx);
#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_fcb_compress(&pm_init_conf_fcb);
    c916:	4802      	ldr	r0, [pc, #8]	; (c920 <panmaster_compress+0xc>)
    c918:	f000 fc72 	bl	d200 <panm_fcb_compress>
#endif
}
    c91c:	bd08      	pop	{r3, pc}
    c91e:	bf00      	nop
    c920:	2000017c 	.word	0x2000017c

0000c924 <panmaster_sort>:

void
panmaster_sort()
{
    c924:	b510      	push	{r4, lr}
#if MYNEWT_VAL(PANMASTER_NFFS)
    // Do nothing
#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_fcb_sort(&pm_init_conf_fcb);
    c926:	4c04      	ldr	r4, [pc, #16]	; (c938 <panmaster_sort+0x14>)
    c928:	4620      	mov	r0, r4
    c92a:	f000 fd03 	bl	d334 <panm_fcb_sort>
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    c92e:	4903      	ldr	r1, [pc, #12]	; (c93c <panmaster_sort+0x18>)
    c930:	4620      	mov	r0, r4
    c932:	f000 fc53 	bl	d1dc <panm_fcb_load_idx>
#endif
}
    c936:	bd10      	pop	{r4, pc}
    c938:	2000017c 	.word	0x2000017c
    c93c:	20003828 	.word	0x20003828

0000c940 <panmaster_pkg_init>:

void
panmaster_pkg_init(void)
{
    c940:	b510      	push	{r4, lr}
    c942:	b082      	sub	sp, #8
    int i;
    int rc;

    /* Init log and Config */
    log_register("panmstr", &_log, &log_console_handler,
    c944:	2300      	movs	r3, #0
    c946:	9300      	str	r3, [sp, #0]
    c948:	4a31      	ldr	r2, [pc, #196]	; (ca10 <panmaster_pkg_init+0xd0>)
    c94a:	4932      	ldr	r1, [pc, #200]	; (ca14 <panmaster_pkg_init+0xd4>)
    c94c:	4832      	ldr	r0, [pc, #200]	; (ca18 <panmaster_pkg_init+0xd8>)
    c94e:	f007 fe8d 	bl	1466c <log_register>
                 NULL, LOG_SYSLEVEL);

    rc = conf_register(&pm_conf_cbs);
    c952:	4832      	ldr	r0, [pc, #200]	; (ca1c <panmaster_pkg_init+0xdc>)
    c954:	f006 fa46 	bl	12de4 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c958:	b138      	cbz	r0, c96a <panmaster_pkg_init+0x2a>
    c95a:	2000      	movs	r0, #0
    c95c:	9000      	str	r0, [sp, #0]
    c95e:	4b30      	ldr	r3, [pc, #192]	; (ca20 <panmaster_pkg_init+0xe0>)
    c960:	681c      	ldr	r4, [r3, #0]
    c962:	4603      	mov	r3, r0
    c964:	4602      	mov	r2, r0
    c966:	4601      	mov	r1, r0
    c968:	47a0      	blx	r4

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c96a:	4b2e      	ldr	r3, [pc, #184]	; (ca24 <panmaster_pkg_init+0xe4>)
    c96c:	781b      	ldrb	r3, [r3, #0]
    c96e:	b10b      	cbz	r3, c974 <panmaster_pkg_init+0x34>

    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c970:	2300      	movs	r3, #0
    c972:	e011      	b.n	c998 <panmaster_pkg_init+0x58>
    SYSINIT_ASSERT_ACTIVE();
    c974:	461a      	mov	r2, r3
    c976:	4619      	mov	r1, r3
    c978:	4618      	mov	r0, r3
    c97a:	f7fc fc23 	bl	91c4 <__assert_func>
        PANMASTER_NODE_IDX_DEFAULT(node_idx[i]);
    c97e:	482a      	ldr	r0, [pc, #168]	; (ca28 <panmaster_pkg_init+0xe8>)
    c980:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c984:	eb00 02cc 	add.w	r2, r0, ip, lsl #3
    c988:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c98c:	f820 103c 	strh.w	r1, [r0, ip, lsl #3]
    c990:	8051      	strh	r1, [r2, #2]
    c992:	2100      	movs	r1, #0
    c994:	7411      	strb	r1, [r2, #16]
    for (i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    c996:	3301      	adds	r3, #1
    c998:	2b3f      	cmp	r3, #63	; 0x3f
    c99a:	ddf0      	ble.n	c97e <panmaster_pkg_init+0x3e>
    return (dpl_error_t)os_mutex_init(&mu->mu);
    c99c:	4823      	ldr	r0, [pc, #140]	; (ca2c <panmaster_pkg_init+0xec>)
    c99e:	f7fe f951 	bl	ac44 <os_mutex_init>
    }
    rc = dpl_mutex_init(&save_mutex);
    assert(rc == DPL_OK);
    c9a2:	bb40      	cbnz	r0, c9f6 <panmaster_pkg_init+0xb6>
    memset(&nodes_to_save, 0, sizeof(nodes_to_save));
    c9a4:	22f8      	movs	r2, #248	; 0xf8
    c9a6:	2100      	movs	r1, #0
    c9a8:	4821      	ldr	r0, [pc, #132]	; (ca30 <panmaster_pkg_init+0xf0>)
    c9aa:	f003 fe66 	bl	1067a <memset>

#if MYNEWT_VAL(UWB_PAN_ENABLED)

#if MYNEWT_VAL(UWB_DEVICE_0)
    struct uwb_pan_instance * pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_PAN);
    c9ae:	2000      	movs	r0, #0
    c9b0:	f7fc f960 	bl	8c74 <uwb_dev_idx_lookup>
    c9b4:	2111      	movs	r1, #17
    c9b6:	f7fc f9e2 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    assert(pan);
    c9ba:	4604      	mov	r4, r0
    c9bc:	b308      	cbz	r0, ca02 <panmaster_pkg_init+0xc2>
    uwb_pan_set_postprocess(pan, postprocess_cb);
    c9be:	491d      	ldr	r1, [pc, #116]	; (ca34 <panmaster_pkg_init+0xf4>)
    c9c0:	f7ff faf8 	bl	bfb4 <uwb_pan_set_postprocess>
    uwb_pan_set_request_cb(pan, panrequest_cb);
    c9c4:	491c      	ldr	r1, [pc, #112]	; (ca38 <panmaster_pkg_init+0xf8>)
    c9c6:	4620      	mov	r0, r4
    c9c8:	f7ff faec 	bl	bfa4 <uwb_pan_set_request_cb>
#endif

#endif

#if MYNEWT_VAL(PANMASTER_CLI)
    rc = panmaster_cli_register();
    c9cc:	f000 fb14 	bl	cff8 <panmaster_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    c9d0:	b138      	cbz	r0, c9e2 <panmaster_pkg_init+0xa2>
    c9d2:	2000      	movs	r0, #0
    c9d4:	9000      	str	r0, [sp, #0]
    c9d6:	4b12      	ldr	r3, [pc, #72]	; (ca20 <panmaster_pkg_init+0xe0>)
    c9d8:	681c      	ldr	r4, [r3, #0]
    c9da:	4603      	mov	r3, r0
    c9dc:	4602      	mov	r2, r0
    c9de:	4601      	mov	r1, r0
    c9e0:	47a0      	blx	r4
#if MYNEWT_VAL(PANMASTER_SORT_AT_INIT)
    panm_file_compress(&panmaster_storage_file, node_idx);
#endif

#elif MYNEWT_VAL(PANMASTER_FCB)
    panm_init_fcb();
    c9e2:	f7ff fc11 	bl	c208 <panm_init_fcb>

#if MYNEWT_VAL(PANMASTER_SORT_AT_INIT)
    panmaster_sort();
    c9e6:	f7ff ff9d 	bl	c924 <panmaster_sort>
#endif
    panm_fcb_load_idx(&pm_init_conf_fcb, node_idx);
    c9ea:	490f      	ldr	r1, [pc, #60]	; (ca28 <panmaster_pkg_init+0xe8>)
    c9ec:	4813      	ldr	r0, [pc, #76]	; (ca3c <panmaster_pkg_init+0xfc>)
    c9ee:	f000 fbf5 	bl	d1dc <panm_fcb_load_idx>
#endif
}
    c9f2:	b002      	add	sp, #8
    c9f4:	bd10      	pop	{r4, pc}
    assert(rc == DPL_OK);
    c9f6:	2300      	movs	r3, #0
    c9f8:	461a      	mov	r2, r3
    c9fa:	4619      	mov	r1, r3
    c9fc:	4618      	mov	r0, r3
    c9fe:	f7fc fbe1 	bl	91c4 <__assert_func>
    assert(pan);
    ca02:	2300      	movs	r3, #0
    ca04:	461a      	mov	r2, r3
    ca06:	4619      	mov	r1, r3
    ca08:	4618      	mov	r0, r3
    ca0a:	f7fc fbdb 	bl	91c4 <__assert_func>
    ca0e:	bf00      	nop
    ca10:	000271c4 	.word	0x000271c4
    ca14:	2000380c 	.word	0x2000380c
    ca18:	000266cc 	.word	0x000266cc
    ca1c:	2000015c 	.word	0x2000015c
    ca20:	20000308 	.word	0x20000308
    ca24:	2000538c 	.word	0x2000538c
    ca28:	20003828 	.word	0x20003828
    ca2c:	20003ff0 	.word	0x20003ff0
    ca30:	20003e28 	.word	0x20003e28
    ca34:	0000c6dd 	.word	0x0000c6dd
    ca38:	0000c4d9 	.word	0x0000c4d9
    ca3c:	2000017c 	.word	0x2000017c

0000ca40 <dump>:

}

static void
dump(struct streamer *streamer)
{
    ca40:	b510      	push	{r4, lr}
    ca42:	4604      	mov	r4, r0
    streamer_printf(streamer, "# index addr euid flags role pslot slot_id fw-ver\n");
    ca44:	4903      	ldr	r1, [pc, #12]	; (ca54 <dump+0x14>)
    ca46:	f006 f83b 	bl	12ac0 <streamer_printf>
    panmaster_load(dump_cb, streamer);
    ca4a:	4621      	mov	r1, r4
    ca4c:	4802      	ldr	r0, [pc, #8]	; (ca58 <dump+0x18>)
    ca4e:	f7ff fd8f 	bl	c570 <panmaster_load>
}
    ca52:	bd10      	pop	{r4, pc}
    ca54:	000266d4 	.word	0x000266d4
    ca58:	0000ca5d 	.word	0x0000ca5d

0000ca5c <dump_cb>:
{
    ca5c:	b530      	push	{r4, r5, lr}
    ca5e:	b091      	sub	sp, #68	; 0x44
    ca60:	4604      	mov	r4, r0
    ca62:	460d      	mov	r5, r1
                   n->flags, n->role, n->has_perm_slot, n->slot_id);
    ca64:	8a42      	ldrh	r2, [r0, #18]
    ca66:	7cc3      	ldrb	r3, [r0, #19]
    ca68:	0919      	lsrs	r1, r3, #4
    ca6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ca6e:	f8b0 0015 	ldrh.w	r0, [r0, #21]
    streamer_printf(streamer, "%3d %04x %016llx %x %x %d %d ", n->index, n->addr, n->euid,
    ca72:	9005      	str	r0, [sp, #20]
    ca74:	9304      	str	r3, [sp, #16]
    ca76:	9103      	str	r1, [sp, #12]
    ca78:	9202      	str	r2, [sp, #8]
    ca7a:	68a2      	ldr	r2, [r4, #8]
    ca7c:	68e3      	ldr	r3, [r4, #12]
    ca7e:	9200      	str	r2, [sp, #0]
    ca80:	9301      	str	r3, [sp, #4]
    ca82:	8a23      	ldrh	r3, [r4, #16]
    ca84:	7d22      	ldrb	r2, [r4, #20]
    ca86:	490e      	ldr	r1, [pc, #56]	; (cac0 <dump_cb+0x64>)
    ca88:	4628      	mov	r0, r5
    ca8a:	f006 f819 	bl	12ac0 <streamer_printf>
        .iv_major = n->fw_ver.iv_major,
    ca8e:	7de3      	ldrb	r3, [r4, #23]
    struct image_version fw_ver = {
    ca90:	f88d 3018 	strb.w	r3, [sp, #24]
        .iv_minor = n->fw_ver.iv_minor,
    ca94:	7e23      	ldrb	r3, [r4, #24]
    struct image_version fw_ver = {
    ca96:	f88d 3019 	strb.w	r3, [sp, #25]
        .iv_revision = n->fw_ver.iv_revision,
    ca9a:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    struct image_version fw_ver = {
    ca9e:	f8ad 301a 	strh.w	r3, [sp, #26]
        .iv_build_num = n->fw_ver.iv_build_num,
    caa2:	f8d4 301b 	ldr.w	r3, [r4, #27]
    struct image_version fw_ver = {
    caa6:	9307      	str	r3, [sp, #28]
    imgr_ver_str(&fw_ver, ver_str);
    caa8:	a908      	add	r1, sp, #32
    caaa:	a806      	add	r0, sp, #24
    caac:	f005 fa46 	bl	11f3c <imgr_ver_str>
    streamer_printf(streamer, "%s\n", ver_str);
    cab0:	aa08      	add	r2, sp, #32
    cab2:	4904      	ldr	r1, [pc, #16]	; (cac4 <dump_cb+0x68>)
    cab4:	4628      	mov	r0, r5
    cab6:	f006 f803 	bl	12ac0 <streamer_printf>
}
    caba:	b011      	add	sp, #68	; 0x44
    cabc:	bd30      	pop	{r4, r5, pc}
    cabe:	bf00      	nop
    cac0:	00026708 	.word	0x00026708
    cac4:	00026e48 	.word	0x00026e48

0000cac8 <list_nodes_blk>:
{
    cac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cacc:	b0a3      	sub	sp, #140	; 0x8c
    cace:	4605      	mov	r5, r0
    lne.nodes = (struct panmaster_node*)malloc(lne_nodes_sz);
    cad0:	f44f 7078 	mov.w	r0, #992	; 0x3e0
    cad4:	f003 fd54 	bl	10580 <malloc>
    cad8:	9014      	str	r0, [sp, #80]	; 0x50
    if (!lne.nodes) {
    cada:	b168      	cbz	r0, caf8 <list_nodes_blk+0x30>
    panmaster_node_idx(&node_idx, &num_nodes);
    cadc:	a90b      	add	r1, sp, #44	; 0x2c
    cade:	a821      	add	r0, sp, #132	; 0x84
    cae0:	f7ff fbe4 	bl	c2ac <panmaster_node_idx>
    os_gettimeofday(&utctime, &timezone);
    cae4:	a917      	add	r1, sp, #92	; 0x5c
    cae6:	a818      	add	r0, sp, #96	; 0x60
    cae8:	f7fd fcce 	bl	a488 <os_gettimeofday>
    streamer_printf(streamer, "#idx, addr, role, slot, p,  lease, euid,             flags,          date-added, fw-ver\n");
    caec:	497a      	ldr	r1, [pc, #488]	; (ccd8 <list_nodes_blk+0x210>)
    caee:	4628      	mov	r0, r5
    caf0:	f005 ffe6 	bl	12ac0 <streamer_printf>
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    caf4:	2700      	movs	r7, #0
    caf6:	e0d4      	b.n	cca2 <list_nodes_blk+0x1da>
        streamer_printf(streamer, "err:mem\n");
    caf8:	4978      	ldr	r1, [pc, #480]	; (ccdc <list_nodes_blk+0x214>)
    cafa:	4628      	mov	r0, r5
    cafc:	f005 ffe0 	bl	12ac0 <streamer_printf>
        return;
    cb00:	e0e7      	b.n	ccd2 <list_nodes_blk+0x20a>
                streamer_printf(streamer, "    , ");
    cb02:	4977      	ldr	r1, [pc, #476]	; (cce0 <list_nodes_blk+0x218>)
    cb04:	4628      	mov	r0, r5
    cb06:	f005 ffdb 	bl	12ac0 <streamer_printf>
    cb0a:	e091      	b.n	cc30 <list_nodes_blk+0x168>
            streamer_printf(streamer, "%s, ", (lne.nodes[j].has_perm_slot)?"p":" ");
    cb0c:	4a75      	ldr	r2, [pc, #468]	; (cce4 <list_nodes_blk+0x21c>)
    cb0e:	e097      	b.n	cc40 <list_nodes_blk+0x178>
                streamer_printf(streamer, "%4ld.%ld, ", le_ms/1000, (le_ms-1000*(le_ms/1000))/100);
    cb10:	4a75      	ldr	r2, [pc, #468]	; (cce8 <list_nodes_blk+0x220>)
    cb12:	fb82 1203 	smull	r1, r2, r2, r3
    cb16:	17d8      	asrs	r0, r3, #31
    cb18:	ebc0 11a2 	rsb	r1, r0, r2, asr #6
    cb1c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    cb20:	fb0c 3111 	mls	r1, ip, r1, r3
    cb24:	4b71      	ldr	r3, [pc, #452]	; (ccec <list_nodes_blk+0x224>)
    cb26:	fb83 c301 	smull	ip, r3, r3, r1
    cb2a:	17c9      	asrs	r1, r1, #31
    cb2c:	ebc1 1363 	rsb	r3, r1, r3, asr #5
    cb30:	ebc0 12a2 	rsb	r2, r0, r2, asr #6
    cb34:	496e      	ldr	r1, [pc, #440]	; (ccf0 <list_nodes_blk+0x228>)
    cb36:	4628      	mov	r0, r5
    cb38:	f005 ffc2 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "%016llX, ", lne.nodes[j].euid);
    cb3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb3e:	4423      	add	r3, r4
    cb40:	689a      	ldr	r2, [r3, #8]
    cb42:	68db      	ldr	r3, [r3, #12]
    cb44:	496b      	ldr	r1, [pc, #428]	; (ccf4 <list_nodes_blk+0x22c>)
    cb46:	4628      	mov	r0, r5
    cb48:	f005 ffba 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "%5X, ", lne.nodes[j].flags);
    cb4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb4e:	4423      	add	r3, r4
    cb50:	8a5a      	ldrh	r2, [r3, #18]
    cb52:	4969      	ldr	r1, [pc, #420]	; (ccf8 <list_nodes_blk+0x230>)
    cb54:	4628      	mov	r0, r5
    cb56:	f005 ffb3 	bl	12ac0 <streamer_printf>
            utctime.tv_sec = lne.nodes[j].first_seen_utc;
    cb5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb5c:	1919      	adds	r1, r3, r4
    cb5e:	591a      	ldr	r2, [r3, r4]
    cb60:	684b      	ldr	r3, [r1, #4]
    cb62:	9218      	str	r2, [sp, #96]	; 0x60
    cb64:	9319      	str	r3, [sp, #100]	; 0x64
            utctime.tv_usec = 0;
    cb66:	f04f 0900 	mov.w	r9, #0
    cb6a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
            datetime_format(&utctime, &timezone, buf, sizeof(buf));
    cb6e:	2320      	movs	r3, #32
    cb70:	aa03      	add	r2, sp, #12
    cb72:	a917      	add	r1, sp, #92	; 0x5c
    cb74:	a818      	add	r0, sp, #96	; 0x60
    cb76:	f00a fb65 	bl	17244 <datetime_format>
            buf[19]='\0';
    cb7a:	f88d 901f 	strb.w	r9, [sp, #31]
            streamer_printf(streamer, "%s, ", buf);
    cb7e:	aa03      	add	r2, sp, #12
    cb80:	495e      	ldr	r1, [pc, #376]	; (ccfc <list_nodes_blk+0x234>)
    cb82:	4628      	mov	r0, r5
    cb84:	f005 ff9c 	bl	12ac0 <streamer_printf>
                .iv_major = lne.nodes[j].fw_ver.iv_major,
    cb88:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb8a:	441c      	add	r4, r3
    cb8c:	7de3      	ldrb	r3, [r4, #23]
            struct image_version fw_ver = {
    cb8e:	f88d 3004 	strb.w	r3, [sp, #4]
                .iv_minor = lne.nodes[j].fw_ver.iv_minor,
    cb92:	7e23      	ldrb	r3, [r4, #24]
            struct image_version fw_ver = {
    cb94:	f88d 3005 	strb.w	r3, [sp, #5]
                .iv_revision = lne.nodes[j].fw_ver.iv_revision,
    cb98:	f8b4 3019 	ldrh.w	r3, [r4, #25]
            struct image_version fw_ver = {
    cb9c:	f8ad 3006 	strh.w	r3, [sp, #6]
                .iv_build_num = lne.nodes[j].fw_ver.iv_build_num,
    cba0:	f8d4 301b 	ldr.w	r3, [r4, #27]
            struct image_version fw_ver = {
    cba4:	9302      	str	r3, [sp, #8]
            imgr_ver_str(&fw_ver, ver_str);
    cba6:	a90c      	add	r1, sp, #48	; 0x30
    cba8:	a801      	add	r0, sp, #4
    cbaa:	f005 f9c7 	bl	11f3c <imgr_ver_str>
            streamer_printf(streamer, "%s", ver_str);
    cbae:	aa0c      	add	r2, sp, #48	; 0x30
    cbb0:	4953      	ldr	r1, [pc, #332]	; (cd00 <list_nodes_blk+0x238>)
    cbb2:	4628      	mov	r0, r5
    cbb4:	f005 ff84 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "\n");
    cbb8:	4952      	ldr	r1, [pc, #328]	; (cd04 <list_nodes_blk+0x23c>)
    cbba:	4628      	mov	r0, r5
    cbbc:	f005 ff80 	bl	12ac0 <streamer_printf>
        for (j=0;j<LIST_NODES_BLK_NNODES;j++) {
    cbc0:	3601      	adds	r6, #1
    cbc2:	2e1f      	cmp	r6, #31
    cbc4:	dc6c      	bgt.n	cca0 <list_nodes_blk+0x1d8>
            if (lne.nodes[j].addr == 0xffff) {
    cbc6:	ebc6 1446 	rsb	r4, r6, r6, lsl #5
    cbca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbcc:	4423      	add	r3, r4
    cbce:	8a1a      	ldrh	r2, [r3, #16]
    cbd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cbd4:	429a      	cmp	r2, r3
    cbd6:	d0f3      	beq.n	cbc0 <list_nodes_blk+0xf8>
            streamer_printf(streamer, "%4d, ", i+j);
    cbd8:	19ba      	adds	r2, r7, r6
    cbda:	494b      	ldr	r1, [pc, #300]	; (cd08 <list_nodes_blk+0x240>)
    cbdc:	4628      	mov	r0, r5
    cbde:	f005 ff6f 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "%4x, ", lne.nodes[j].addr);
    cbe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbe4:	4423      	add	r3, r4
    cbe6:	8a1a      	ldrh	r2, [r3, #16]
    cbe8:	4948      	ldr	r1, [pc, #288]	; (cd0c <list_nodes_blk+0x244>)
    cbea:	4628      	mov	r0, r5
    cbec:	f005 ff68 	bl	12ac0 <streamer_printf>
            int slot_id = node_idx[lne.nodes[j].index].slot_id;
    cbf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cbf2:	4423      	add	r3, r4
    cbf4:	7d1a      	ldrb	r2, [r3, #20]
    cbf6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    cbfa:	9921      	ldr	r1, [sp, #132]	; 0x84
    cbfc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    cc00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
            if (lne.nodes[j].has_perm_slot) {
    cc04:	7cda      	ldrb	r2, [r3, #19]
    cc06:	f012 0f08 	tst.w	r2, #8
    cc0a:	d001      	beq.n	cc10 <list_nodes_blk+0x148>
                slot_id = lne.nodes[j].slot_id;
    cc0c:	f8b3 9015 	ldrh.w	r9, [r3, #21]
            streamer_printf(streamer, "%4X, ", lne.nodes[j].role);
    cc10:	7cda      	ldrb	r2, [r3, #19]
    cc12:	0912      	lsrs	r2, r2, #4
    cc14:	493e      	ldr	r1, [pc, #248]	; (cd10 <list_nodes_blk+0x248>)
    cc16:	4628      	mov	r0, r5
    cc18:	f005 ff52 	bl	12ac0 <streamer_printf>
            if (slot_id != 0xffff) {
    cc1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cc20:	4599      	cmp	r9, r3
    cc22:	f43f af6e 	beq.w	cb02 <list_nodes_blk+0x3a>
                streamer_printf(streamer, "%4d, ", slot_id);
    cc26:	464a      	mov	r2, r9
    cc28:	4937      	ldr	r1, [pc, #220]	; (cd08 <list_nodes_blk+0x240>)
    cc2a:	4628      	mov	r0, r5
    cc2c:	f005 ff48 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "%s, ", (lne.nodes[j].has_perm_slot)?"p":" ");
    cc30:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc32:	4423      	add	r3, r4
    cc34:	7cdb      	ldrb	r3, [r3, #19]
    cc36:	f013 0f08 	tst.w	r3, #8
    cc3a:	f43f af67 	beq.w	cb0c <list_nodes_blk+0x44>
    cc3e:	4a35      	ldr	r2, [pc, #212]	; (cd14 <list_nodes_blk+0x24c>)
    cc40:	492e      	ldr	r1, [pc, #184]	; (ccfc <list_nodes_blk+0x234>)
    cc42:	4628      	mov	r0, r5
    cc44:	f005 ff3c 	bl	12ac0 <streamer_printf>
            if (node_idx[lne.nodes[j].index].lease_ends) {
    cc48:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc4a:	4423      	add	r3, r4
    cc4c:	7d1b      	ldrb	r3, [r3, #20]
    cc4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cc52:	9a21      	ldr	r2, [sp, #132]	; 0x84
    cc54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cc58:	695b      	ldr	r3, [r3, #20]
    cc5a:	b1e3      	cbz	r3, cc96 <list_nodes_blk+0x1ce>
                os_get_uptime(&tv);
    cc5c:	a81c      	add	r0, sp, #112	; 0x70
    cc5e:	f7fd fc99 	bl	a594 <os_get_uptime>
                int32_t le_ms = node_idx[lne.nodes[j].index].lease_ends;
    cc62:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc64:	4423      	add	r3, r4
    cc66:	7d1b      	ldrb	r3, [r3, #20]
    cc68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cc6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
    cc6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cc72:	6959      	ldr	r1, [r3, #20]
                int32_t now_ms = tv.tv_sec*1000 + tv.tv_usec/1000;
    cc74:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    cc76:	481c      	ldr	r0, [pc, #112]	; (cce8 <list_nodes_blk+0x220>)
    cc78:	fb80 3002 	smull	r3, r0, r0, r2
    cc7c:	17d3      	asrs	r3, r2, #31
    cc7e:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
    cc82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    cc86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cc88:	fb00 3302 	mla	r3, r0, r2, r3
                if (le_ms < 0) le_ms = 0;
    cc8c:	1acb      	subs	r3, r1, r3
    cc8e:	f57f af3f 	bpl.w	cb10 <list_nodes_blk+0x48>
    cc92:	2300      	movs	r3, #0
    cc94:	e73c      	b.n	cb10 <list_nodes_blk+0x48>
                streamer_printf(streamer, "      , ");
    cc96:	4920      	ldr	r1, [pc, #128]	; (cd18 <list_nodes_blk+0x250>)
    cc98:	4628      	mov	r0, r5
    cc9a:	f005 ff11 	bl	12ac0 <streamer_printf>
    cc9e:	e74d      	b.n	cb3c <list_nodes_blk+0x74>
    for (i=0;i<num_nodes;i+=LIST_NODES_BLK_NNODES) {
    cca0:	4647      	mov	r7, r8
    cca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cca4:	42bb      	cmp	r3, r7
    cca6:	dd11      	ble.n	cccc <list_nodes_blk+0x204>
        lne.index_off = i;
    cca8:	9715      	str	r7, [sp, #84]	; 0x54
        lne.index_max = i+LIST_NODES_BLK_NNODES;
    ccaa:	f107 0820 	add.w	r8, r7, #32
    ccae:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        memset(lne.nodes, 0xffff, lne_nodes_sz);
    ccb2:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    ccb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ccba:	9814      	ldr	r0, [sp, #80]	; 0x50
    ccbc:	f003 fcdd 	bl	1067a <memset>
        panmaster_load(list_nodes_load_cb, &lne);
    ccc0:	a914      	add	r1, sp, #80	; 0x50
    ccc2:	4816      	ldr	r0, [pc, #88]	; (cd1c <list_nodes_blk+0x254>)
    ccc4:	f7ff fc54 	bl	c570 <panmaster_load>
        for (j=0;j<LIST_NODES_BLK_NNODES;j++) {
    ccc8:	2600      	movs	r6, #0
    ccca:	e77a      	b.n	cbc2 <list_nodes_blk+0xfa>
    free(lne.nodes);
    cccc:	9814      	ldr	r0, [sp, #80]	; 0x50
    ccce:	f003 fc8d 	bl	105ec <free>
}
    ccd2:	b023      	add	sp, #140	; 0x8c
    ccd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ccd8:	00026738 	.word	0x00026738
    ccdc:	0002672c 	.word	0x0002672c
    cce0:	000267ac 	.word	0x000267ac
    cce4:	000267a8 	.word	0x000267a8
    cce8:	10624dd3 	.word	0x10624dd3
    ccec:	51eb851f 	.word	0x51eb851f
    ccf0:	000267bc 	.word	0x000267bc
    ccf4:	000267d4 	.word	0x000267d4
    ccf8:	000267e0 	.word	0x000267e0
    ccfc:	000267b4 	.word	0x000267b4
    cd00:	000267e8 	.word	0x000267e8
    cd04:	000273a4 	.word	0x000273a4
    cd08:	00026794 	.word	0x00026794
    cd0c:	0002679c 	.word	0x0002679c
    cd10:	000267a4 	.word	0x000267a4
    cd14:	00026728 	.word	0x00026728
    cd18:	000267c8 	.word	0x000267c8
    cd1c:	0000cfa5 	.word	0x0000cfa5

0000cd20 <panmaster_cli_cmd>:

static int
panmaster_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
    cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd22:	b087      	sub	sp, #28
    cd24:	461f      	mov	r7, r3
    int slot_id, role;
    uint16_t addr;
    uint64_t euid;
    struct panmaster_node *node;

    if (argc < 2) {
    cd26:	2901      	cmp	r1, #1
    cd28:	dd2d      	ble.n	cd86 <panmaster_cli_cmd+0x66>
    cd2a:	460c      	mov	r4, r1
    cd2c:	4615      	mov	r5, r2
        streamer_printf(streamer, "Too few args\n");
        return 0;
    }
    if (!strcmp(argv[1], "list")) {
    cd2e:	6856      	ldr	r6, [r2, #4]
    cd30:	4987      	ldr	r1, [pc, #540]	; (cf50 <panmaster_cli_cmd+0x230>)
    cd32:	4630      	mov	r0, r6
    cd34:	f003 fccc 	bl	106d0 <strcmp>
    cd38:	b350      	cbz	r0, cd90 <panmaster_cli_cmd+0x70>
        list_nodes_blk(streamer);
    } else if (!strcmp(argv[1], "add")) {
    cd3a:	4986      	ldr	r1, [pc, #536]	; (cf54 <panmaster_cli_cmd+0x234>)
    cd3c:	4630      	mov	r0, r6
    cd3e:	f003 fcc7 	bl	106d0 <strcmp>
    cd42:	2800      	cmp	r0, #0
    cd44:	d13f      	bne.n	cdc6 <panmaster_cli_cmd+0xa6>
        if (argc < 3) {
    cd46:	2c02      	cmp	r4, #2
    cd48:	dd28      	ble.n	cd9c <panmaster_cli_cmd+0x7c>
            streamer_printf(streamer, "euid needed\n");
            return 0;
        }
        euid = strtoll(argv[2], NULL, 16);
    cd4a:	2210      	movs	r2, #16
    cd4c:	2100      	movs	r1, #0
    cd4e:	68a8      	ldr	r0, [r5, #8]
    cd50:	f003 fce1 	bl	10716 <strtoll>
    cd54:	9004      	str	r0, [sp, #16]
    cd56:	9105      	str	r1, [sp, #20]
        if (!euid) {
    cd58:	ea51 0300 	orrs.w	r3, r1, r0
    cd5c:	d01b      	beq.n	cd96 <panmaster_cli_cmd+0x76>
            return 0;
        }
        if (argc > 3) {
    cd5e:	2c03      	cmp	r4, #3
    cd60:	dc21      	bgt.n	cda6 <panmaster_cli_cmd+0x86>
            addr = strtoll(argv[3], NULL, 16);
            panmaster_add_node(addr, 0, (uint8_t*)&euid);
            return 0;
        }

        rc = panmaster_idx_find_node(euid, 0, &node);
    cd62:	ab03      	add	r3, sp, #12
    cd64:	2200      	movs	r2, #0
    cd66:	f7ff facb 	bl	c300 <panmaster_idx_find_node>
    cd6a:	4604      	mov	r4, r0
        panmaster_postprocess();
    cd6c:	f7ff fc6c 	bl	c648 <panmaster_postprocess>
        if (!rc) {
    cd70:	bb24      	cbnz	r4, cdbc <panmaster_cli_cmd+0x9c>
            streamer_printf(streamer, "Added node euid: 0x%llX, addr 0x%X\n",
                           euid, node->addr);
    cd72:	9b03      	ldr	r3, [sp, #12]
    cd74:	8a1b      	ldrh	r3, [r3, #16]
            streamer_printf(streamer, "Added node euid: 0x%llX, addr 0x%X\n",
    cd76:	9300      	str	r3, [sp, #0]
    cd78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    cd7c:	4976      	ldr	r1, [pc, #472]	; (cf58 <panmaster_cli_cmd+0x238>)
    cd7e:	4638      	mov	r0, r7
    cd80:	f005 fe9e 	bl	12ac0 <streamer_printf>
    cd84:	e007      	b.n	cd96 <panmaster_cli_cmd+0x76>
        streamer_printf(streamer, "Too few args\n");
    cd86:	4975      	ldr	r1, [pc, #468]	; (cf5c <panmaster_cli_cmd+0x23c>)
    cd88:	4618      	mov	r0, r3
    cd8a:	f005 fe99 	bl	12ac0 <streamer_printf>
        return 0;
    cd8e:	e002      	b.n	cd96 <panmaster_cli_cmd+0x76>
        list_nodes_blk(streamer);
    cd90:	4638      	mov	r0, r7
    cd92:	f7ff fe99 	bl	cac8 <list_nodes_blk>
        dump(streamer);
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
    }
    return 0;
}
    cd96:	2000      	movs	r0, #0
    cd98:	b007      	add	sp, #28
    cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            streamer_printf(streamer, "euid needed\n");
    cd9c:	4970      	ldr	r1, [pc, #448]	; (cf60 <panmaster_cli_cmd+0x240>)
    cd9e:	4638      	mov	r0, r7
    cda0:	f005 fe8e 	bl	12ac0 <streamer_printf>
            return 0;
    cda4:	e7f7      	b.n	cd96 <panmaster_cli_cmd+0x76>
            addr = strtoll(argv[3], NULL, 16);
    cda6:	2210      	movs	r2, #16
    cda8:	2100      	movs	r1, #0
    cdaa:	68e8      	ldr	r0, [r5, #12]
    cdac:	f003 fcb3 	bl	10716 <strtoll>
            panmaster_add_node(addr, 0, (uint8_t*)&euid);
    cdb0:	aa04      	add	r2, sp, #16
    cdb2:	2100      	movs	r1, #0
    cdb4:	b280      	uxth	r0, r0
    cdb6:	f7ff fcab 	bl	c710 <panmaster_add_node>
            return 0;
    cdba:	e7ec      	b.n	cd96 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "Add node err\n");
    cdbc:	4969      	ldr	r1, [pc, #420]	; (cf64 <panmaster_cli_cmd+0x244>)
    cdbe:	4638      	mov	r0, r7
    cdc0:	f005 fe7e 	bl	12ac0 <streamer_printf>
    cdc4:	e7e7      	b.n	cd96 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "del")) {
    cdc6:	4968      	ldr	r1, [pc, #416]	; (cf68 <panmaster_cli_cmd+0x248>)
    cdc8:	4630      	mov	r0, r6
    cdca:	f003 fc81 	bl	106d0 <strcmp>
    cdce:	b990      	cbnz	r0, cdf6 <panmaster_cli_cmd+0xd6>
        if (argc < 3) {
    cdd0:	2c02      	cmp	r4, #2
    cdd2:	dd0b      	ble.n	cdec <panmaster_cli_cmd+0xcc>
        euid = strtoll(argv[2], NULL, 16);
    cdd4:	2210      	movs	r2, #16
    cdd6:	2100      	movs	r1, #0
    cdd8:	68a8      	ldr	r0, [r5, #8]
    cdda:	f003 fc9c 	bl	10716 <strtoll>
    cdde:	4602      	mov	r2, r0
    cde0:	460b      	mov	r3, r1
    cde2:	e9cd 2304 	strd	r2, r3, [sp, #16]
        panmaster_delete_node(euid);
    cde6:	f7ff fd43 	bl	c870 <panmaster_delete_node>
    cdea:	e7d4      	b.n	cd96 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "euid needed\n");
    cdec:	495c      	ldr	r1, [pc, #368]	; (cf60 <panmaster_cli_cmd+0x240>)
    cdee:	4638      	mov	r0, r7
    cdf0:	f005 fe66 	bl	12ac0 <streamer_printf>
            return 0;
    cdf4:	e7cf      	b.n	cd96 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "pslot")) {
    cdf6:	495d      	ldr	r1, [pc, #372]	; (cf6c <panmaster_cli_cmd+0x24c>)
    cdf8:	4630      	mov	r0, r6
    cdfa:	f003 fc69 	bl	106d0 <strcmp>
    cdfe:	2800      	cmp	r0, #0
    ce00:	d147      	bne.n	ce92 <panmaster_cli_cmd+0x172>
        if (argc < 4) {
    ce02:	2c03      	cmp	r4, #3
    ce04:	dd2e      	ble.n	ce64 <panmaster_cli_cmd+0x144>
        euid = strtoll(argv[2], NULL, 16);
    ce06:	2210      	movs	r2, #16
    ce08:	2100      	movs	r1, #0
    ce0a:	68a8      	ldr	r0, [r5, #8]
    ce0c:	f003 fc83 	bl	10716 <strtoll>
    ce10:	9004      	str	r0, [sp, #16]
    ce12:	9105      	str	r1, [sp, #20]
        if (!euid) {
    ce14:	ea51 0300 	orrs.w	r3, r1, r0
    ce18:	d0bd      	beq.n	cd96 <panmaster_cli_cmd+0x76>
        slot_id = strtoll(argv[3], NULL, 0);
    ce1a:	2200      	movs	r2, #0
    ce1c:	4611      	mov	r1, r2
    ce1e:	68e8      	ldr	r0, [r5, #12]
    ce20:	f003 fc79 	bl	10716 <strtoll>
    ce24:	4604      	mov	r4, r0
        rc = panmaster_idx_find_node(euid, 0, &node);
    ce26:	ab03      	add	r3, sp, #12
    ce28:	2200      	movs	r2, #0
    ce2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ce2e:	f7ff fa67 	bl	c300 <panmaster_idx_find_node>
        if (!rc) {
    ce32:	bb48      	cbnz	r0, ce88 <panmaster_cli_cmd+0x168>
            streamer_printf(streamer, "0x%llX: pslot -> ", euid);
    ce34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ce38:	494d      	ldr	r1, [pc, #308]	; (cf70 <panmaster_cli_cmd+0x250>)
    ce3a:	4638      	mov	r0, r7
    ce3c:	f005 fe40 	bl	12ac0 <streamer_printf>
            if (slot_id > -1) {
    ce40:	2c00      	cmp	r4, #0
    ce42:	db14      	blt.n	ce6e <panmaster_cli_cmd+0x14e>
                node->slot_id = slot_id;
    ce44:	9b03      	ldr	r3, [sp, #12]
    ce46:	f8a3 4015 	strh.w	r4, [r3, #21]
                node->has_perm_slot = 1;
    ce4a:	7cda      	ldrb	r2, [r3, #19]
    ce4c:	f042 0208 	orr.w	r2, r2, #8
    ce50:	74da      	strb	r2, [r3, #19]
                streamer_printf(streamer, "%d\n ", slot_id);
    ce52:	4622      	mov	r2, r4
    ce54:	4947      	ldr	r1, [pc, #284]	; (cf74 <panmaster_cli_cmd+0x254>)
    ce56:	4638      	mov	r0, r7
    ce58:	f005 fe32 	bl	12ac0 <streamer_printf>
            panmaster_save_node(node);
    ce5c:	9803      	ldr	r0, [sp, #12]
    ce5e:	f7ff fb91 	bl	c584 <panmaster_save_node>
    ce62:	e798      	b.n	cd96 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "euid+slot_id needed\n");
    ce64:	4944      	ldr	r1, [pc, #272]	; (cf78 <panmaster_cli_cmd+0x258>)
    ce66:	4638      	mov	r0, r7
    ce68:	f005 fe2a 	bl	12ac0 <streamer_printf>
            return 0;
    ce6c:	e793      	b.n	cd96 <panmaster_cli_cmd+0x76>
                node->slot_id = 0;
    ce6e:	9b03      	ldr	r3, [sp, #12]
    ce70:	2200      	movs	r2, #0
    ce72:	755a      	strb	r2, [r3, #21]
    ce74:	759a      	strb	r2, [r3, #22]
                node->has_perm_slot = 0;
    ce76:	7cd9      	ldrb	r1, [r3, #19]
    ce78:	f362 01c3 	bfi	r1, r2, #3, #1
    ce7c:	74d9      	strb	r1, [r3, #19]
                streamer_printf(streamer, "<removed>\n");
    ce7e:	493f      	ldr	r1, [pc, #252]	; (cf7c <panmaster_cli_cmd+0x25c>)
    ce80:	4638      	mov	r0, r7
    ce82:	f005 fe1d 	bl	12ac0 <streamer_printf>
    ce86:	e7e9      	b.n	ce5c <panmaster_cli_cmd+0x13c>
            streamer_printf(streamer, "err\n");
    ce88:	493d      	ldr	r1, [pc, #244]	; (cf80 <panmaster_cli_cmd+0x260>)
    ce8a:	4638      	mov	r0, r7
    ce8c:	f005 fe18 	bl	12ac0 <streamer_printf>
    ce90:	e781      	b.n	cd96 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "role")) {
    ce92:	493c      	ldr	r1, [pc, #240]	; (cf84 <panmaster_cli_cmd+0x264>)
    ce94:	4630      	mov	r0, r6
    ce96:	f003 fc1b 	bl	106d0 <strcmp>
    ce9a:	bb90      	cbnz	r0, cf02 <panmaster_cli_cmd+0x1e2>
        if (argc < 4) {
    ce9c:	2c03      	cmp	r4, #3
    ce9e:	dd26      	ble.n	ceee <panmaster_cli_cmd+0x1ce>
        euid = strtoll(argv[2], NULL, 16);
    cea0:	2210      	movs	r2, #16
    cea2:	2100      	movs	r1, #0
    cea4:	68a8      	ldr	r0, [r5, #8]
    cea6:	f003 fc36 	bl	10716 <strtoll>
    ceaa:	9004      	str	r0, [sp, #16]
    ceac:	9105      	str	r1, [sp, #20]
        if (!euid) {
    ceae:	ea51 0300 	orrs.w	r3, r1, r0
    ceb2:	f43f af70 	beq.w	cd96 <panmaster_cli_cmd+0x76>
        role = strtoll(argv[3], NULL, 0);
    ceb6:	2200      	movs	r2, #0
    ceb8:	4611      	mov	r1, r2
    ceba:	68e8      	ldr	r0, [r5, #12]
    cebc:	f003 fc2b 	bl	10716 <strtoll>
    cec0:	4604      	mov	r4, r0
        rc = panmaster_idx_find_node(euid, 0, &node);
    cec2:	ab03      	add	r3, sp, #12
    cec4:	2200      	movs	r2, #0
    cec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    ceca:	f7ff fa19 	bl	c300 <panmaster_idx_find_node>
        if (!rc) {
    cece:	b998      	cbnz	r0, cef8 <panmaster_cli_cmd+0x1d8>
            streamer_printf(streamer, "0x%llX: role -> %d\n ", euid, role);
    ced0:	9400      	str	r4, [sp, #0]
    ced2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    ced6:	492c      	ldr	r1, [pc, #176]	; (cf88 <panmaster_cli_cmd+0x268>)
    ced8:	4638      	mov	r0, r7
    ceda:	f005 fdf1 	bl	12ac0 <streamer_printf>
            node->role = role;
    cede:	9803      	ldr	r0, [sp, #12]
    cee0:	7cc3      	ldrb	r3, [r0, #19]
    cee2:	f364 1307 	bfi	r3, r4, #4, #4
    cee6:	74c3      	strb	r3, [r0, #19]
            panmaster_save_node(node);
    cee8:	f7ff fb4c 	bl	c584 <panmaster_save_node>
    ceec:	e753      	b.n	cd96 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "euid+role needed\n");
    ceee:	4927      	ldr	r1, [pc, #156]	; (cf8c <panmaster_cli_cmd+0x26c>)
    cef0:	4638      	mov	r0, r7
    cef2:	f005 fde5 	bl	12ac0 <streamer_printf>
            return 0;
    cef6:	e74e      	b.n	cd96 <panmaster_cli_cmd+0x76>
            streamer_printf(streamer, "err\n");
    cef8:	4921      	ldr	r1, [pc, #132]	; (cf80 <panmaster_cli_cmd+0x260>)
    cefa:	4638      	mov	r0, r7
    cefc:	f005 fde0 	bl	12ac0 <streamer_printf>
    cf00:	e749      	b.n	cd96 <panmaster_cli_cmd+0x76>
    } else if (!strcmp(argv[1], "clear")) {
    cf02:	4923      	ldr	r1, [pc, #140]	; (cf90 <panmaster_cli_cmd+0x270>)
    cf04:	4630      	mov	r0, r6
    cf06:	f003 fbe3 	bl	106d0 <strcmp>
    cf0a:	b190      	cbz	r0, cf32 <panmaster_cli_cmd+0x212>
    } else if (!strcmp(argv[1], "compr")) {
    cf0c:	4921      	ldr	r1, [pc, #132]	; (cf94 <panmaster_cli_cmd+0x274>)
    cf0e:	4630      	mov	r0, r6
    cf10:	f003 fbde 	bl	106d0 <strcmp>
    cf14:	b180      	cbz	r0, cf38 <panmaster_cli_cmd+0x218>
    } else if (!strcmp(argv[1], "sort")) {
    cf16:	4920      	ldr	r1, [pc, #128]	; (cf98 <panmaster_cli_cmd+0x278>)
    cf18:	4630      	mov	r0, r6
    cf1a:	f003 fbd9 	bl	106d0 <strcmp>
    cf1e:	b170      	cbz	r0, cf3e <panmaster_cli_cmd+0x21e>
    } else if (!strcmp(argv[1], "dump")) {
    cf20:	491e      	ldr	r1, [pc, #120]	; (cf9c <panmaster_cli_cmd+0x27c>)
    cf22:	4630      	mov	r0, r6
    cf24:	f003 fbd4 	bl	106d0 <strcmp>
    cf28:	b960      	cbnz	r0, cf44 <panmaster_cli_cmd+0x224>
        dump(streamer);
    cf2a:	4638      	mov	r0, r7
    cf2c:	f7ff fd88 	bl	ca40 <dump>
    cf30:	e731      	b.n	cd96 <panmaster_cli_cmd+0x76>
        panmaster_clear_list();
    cf32:	f7ff f9cb 	bl	c2cc <panmaster_clear_list>
    cf36:	e72e      	b.n	cd96 <panmaster_cli_cmd+0x76>
        panmaster_compress();
    cf38:	f7ff fcec 	bl	c914 <panmaster_compress>
    cf3c:	e72b      	b.n	cd96 <panmaster_cli_cmd+0x76>
        panmaster_sort();
    cf3e:	f7ff fcf1 	bl	c924 <panmaster_sort>
    cf42:	e728      	b.n	cd96 <panmaster_cli_cmd+0x76>
        streamer_printf(streamer, "Unknown cmd\n");
    cf44:	4916      	ldr	r1, [pc, #88]	; (cfa0 <panmaster_cli_cmd+0x280>)
    cf46:	4638      	mov	r0, r7
    cf48:	f005 fdba 	bl	12ac0 <streamer_printf>
    cf4c:	e723      	b.n	cd96 <panmaster_cli_cmd+0x76>
    cf4e:	bf00      	nop
    cf50:	000267fc 	.word	0x000267fc
    cf54:	00026804 	.word	0x00026804
    cf58:	00026818 	.word	0x00026818
    cf5c:	000267ec 	.word	0x000267ec
    cf60:	00026808 	.word	0x00026808
    cf64:	0002683c 	.word	0x0002683c
    cf68:	0002684c 	.word	0x0002684c
    cf6c:	00026850 	.word	0x00026850
    cf70:	00026870 	.word	0x00026870
    cf74:	000268c4 	.word	0x000268c4
    cf78:	00026858 	.word	0x00026858
    cf7c:	00026884 	.word	0x00026884
    cf80:	00026890 	.word	0x00026890
    cf84:	00026898 	.word	0x00026898
    cf88:	000268b4 	.word	0x000268b4
    cf8c:	000268a0 	.word	0x000268a0
    cf90:	000268cc 	.word	0x000268cc
    cf94:	000268d4 	.word	0x000268d4
    cf98:	000268dc 	.word	0x000268dc
    cf9c:	000268e4 	.word	0x000268e4
    cfa0:	000268ec 	.word	0x000268ec

0000cfa4 <list_nodes_load_cb>:
    if (node->index < lne->index_max  &&
    cfa4:	7d03      	ldrb	r3, [r0, #20]
    cfa6:	688a      	ldr	r2, [r1, #8]
    cfa8:	4293      	cmp	r3, r2
    cfaa:	da02      	bge.n	cfb2 <list_nodes_load_cb+0xe>
        node->index >= lne->index_off) {
    cfac:	684a      	ldr	r2, [r1, #4]
    if (node->index < lne->index_max  &&
    cfae:	4293      	cmp	r3, r2
    cfb0:	da00      	bge.n	cfb4 <list_nodes_load_cb+0x10>
    cfb2:	4770      	bx	lr
{
    cfb4:	b530      	push	{r4, r5, lr}
        memcpy(&lne->nodes[node->index - lne->index_off], node,
    cfb6:	680c      	ldr	r4, [r1, #0]
    cfb8:	1a9b      	subs	r3, r3, r2
    cfba:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    cfbe:	18e2      	adds	r2, r4, r3
    cfc0:	f8d0 e000 	ldr.w	lr, [r0]
    cfc4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    cfc8:	6881      	ldr	r1, [r0, #8]
    cfca:	68c5      	ldr	r5, [r0, #12]
    cfcc:	f844 e003 	str.w	lr, [r4, r3]
    cfd0:	f8c2 c004 	str.w	ip, [r2, #4]
    cfd4:	6091      	str	r1, [r2, #8]
    cfd6:	60d5      	str	r5, [r2, #12]
    cfd8:	f8d0 e010 	ldr.w	lr, [r0, #16]
    cfdc:	f8d0 c014 	ldr.w	ip, [r0, #20]
    cfe0:	6981      	ldr	r1, [r0, #24]
    cfe2:	f8c2 e010 	str.w	lr, [r2, #16]
    cfe6:	f8c2 c014 	str.w	ip, [r2, #20]
    cfea:	6191      	str	r1, [r2, #24]
    cfec:	8b81      	ldrh	r1, [r0, #28]
    cfee:	7f83      	ldrb	r3, [r0, #30]
    cff0:	8391      	strh	r1, [r2, #28]
    cff2:	7793      	strb	r3, [r2, #30]
}
    cff4:	bd30      	pop	{r4, r5, pc}
	...

0000cff8 <panmaster_cli_register>:

int
panmaster_cli_register(void)
{
    cff8:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_panmaster_cmd);
    cffa:	4802      	ldr	r0, [pc, #8]	; (d004 <panmaster_cli_register+0xc>)
    cffc:	f008 fce6 	bl	159cc <shell_cmd_register>
}
    d000:	bd08      	pop	{r3, pc}
    d002:	bf00      	nop
    d004:	200001ac 	.word	0x200001ac

0000d008 <node_idx_load_cb>:
static void
node_idx_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct panmaster_node_idx *nodes = (struct panmaster_node_idx*)cb_arg;

    if (node->index <= MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    d008:	7d03      	ldrb	r3, [r0, #20]
    d00a:	2b40      	cmp	r3, #64	; 0x40
    d00c:	d83b      	bhi.n	d086 <node_idx_load_cb+0x7e>
{
    d00e:	b410      	push	{r4}
        nodes[node->index].addr = node->addr;
    d010:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d014:	8a02      	ldrh	r2, [r0, #16]
    d016:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
        nodes[node->index].euid = node->euid;
    d01a:	7d03      	ldrb	r3, [r0, #20]
    d01c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d020:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d024:	6884      	ldr	r4, [r0, #8]
    d026:	68c2      	ldr	r2, [r0, #12]
    d028:	609c      	str	r4, [r3, #8]
    d02a:	60da      	str	r2, [r3, #12]
        nodes[node->index].role = node->role;
    d02c:	7d03      	ldrb	r3, [r0, #20]
    d02e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d032:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d036:	7cc2      	ldrb	r2, [r0, #19]
    d038:	f3c2 1203 	ubfx	r2, r2, #4, #4
    d03c:	741a      	strb	r2, [r3, #16]
        nodes[node->index].has_perm_slot = node->has_perm_slot;
    d03e:	7d03      	ldrb	r3, [r0, #20]
    d040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d044:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d048:	7cc2      	ldrb	r2, [r0, #19]
    d04a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    d04e:	f893 c011 	ldrb.w	ip, [r3, #17]
    d052:	f362 0c00 	bfi	ip, r2, #0, #1
    d056:	f883 c011 	strb.w	ip, [r3, #17]
        if (node->has_perm_slot) {
    d05a:	7cc3      	ldrb	r3, [r0, #19]
    d05c:	f013 0f08 	tst.w	r3, #8
    d060:	d00e      	beq.n	d080 <node_idx_load_cb+0x78>
            nodes[node->index].slot_id = node->slot_id;
    d062:	7d03      	ldrb	r3, [r0, #20]
    d064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d068:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    d06c:	f8b0 2015 	ldrh.w	r2, [r0, #21]
    d070:	805a      	strh	r2, [r3, #2]
            nodes[node->index].lease_ends = 0;
    d072:	7d03      	ldrb	r3, [r0, #20]
    d074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    d07c:	2300      	movs	r3, #0
    d07e:	614b      	str	r3, [r1, #20]
        }
    }
}
    d080:	f85d 4b04 	ldr.w	r4, [sp], #4
    d084:	4770      	bx	lr
    d086:	4770      	bx	lr

0000d088 <fcb_load_cb>:
{
    d088:	b530      	push	{r4, r5, lr}
    d08a:	b089      	sub	sp, #36	; 0x24
    d08c:	4604      	mov	r4, r0
    d08e:	460d      	mov	r5, r1
    memset(&tmpnode,0,sizeof(struct panmaster_node));
    d090:	221f      	movs	r2, #31
    d092:	2100      	movs	r1, #0
    d094:	4668      	mov	r0, sp
    d096:	f003 faf0 	bl	1067a <memset>
    if (loc->fe_data_len != sizeof(struct panmaster_node) &&
    d09a:	89a3      	ldrh	r3, [r4, #12]
    d09c:	2b1f      	cmp	r3, #31
    d09e:	d001      	beq.n	d0a4 <fcb_load_cb+0x1c>
    d0a0:	2b17      	cmp	r3, #23
    d0a2:	d10b      	bne.n	d0bc <fcb_load_cb+0x34>
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, &tmpnode, loc->fe_data_len);
    d0a4:	466a      	mov	r2, sp
    d0a6:	68a1      	ldr	r1, [r4, #8]
    d0a8:	6820      	ldr	r0, [r4, #0]
    d0aa:	f007 f8f5 	bl	14298 <flash_area_read>
    if (rc) {
    d0ae:	4604      	mov	r4, r0
    d0b0:	b940      	cbnz	r0, d0c4 <fcb_load_cb+0x3c>
    argp->cb(&tmpnode, argp->cb_arg);
    d0b2:	682b      	ldr	r3, [r5, #0]
    d0b4:	6869      	ldr	r1, [r5, #4]
    d0b6:	4668      	mov	r0, sp
    d0b8:	4798      	blx	r3
    return 0;
    d0ba:	e000      	b.n	d0be <fcb_load_cb+0x36>
        return 1;
    d0bc:	2401      	movs	r4, #1
}
    d0be:	4620      	mov	r0, r4
    d0c0:	b009      	add	sp, #36	; 0x24
    d0c2:	bd30      	pop	{r4, r5, pc}
        return 0;
    d0c4:	2400      	movs	r4, #0
    d0c6:	e7fa      	b.n	d0be <fcb_load_cb+0x36>

0000d0c8 <find_node_load_cb>:
    return panm_fcb_load(pm, node_idx_load_cb, (void*)nodes);
}

static void
find_node_load_cb(struct panmaster_node *node, void *cb_arg)
{
    d0c8:	b510      	push	{r4, lr}
    struct find_node_s *fn = (struct find_node_s*)cb_arg;

    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    d0ca:	7d0b      	ldrb	r3, [r1, #20]
    d0cc:	b113      	cbz	r3, d0d4 <find_node_load_cb+0xc>
    d0ce:	7d02      	ldrb	r2, [r0, #20]
    d0d0:	4293      	cmp	r3, r2
    d0d2:	d013      	beq.n	d0fc <find_node_load_cb+0x34>
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    d0d4:	8a0b      	ldrh	r3, [r1, #16]
    if ((fn->find.index != 0     && fn->find.index == node->index) ||
    d0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d0da:	4293      	cmp	r3, r2
    d0dc:	d002      	beq.n	d0e4 <find_node_load_cb+0x1c>
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    d0de:	8a02      	ldrh	r2, [r0, #16]
    d0e0:	4293      	cmp	r3, r2
    d0e2:	d00b      	beq.n	d0fc <find_node_load_cb+0x34>
        (fn->find.euid != 0 && fn->find.euid == node->euid)) {
    d0e4:	688a      	ldr	r2, [r1, #8]
    d0e6:	68cb      	ldr	r3, [r1, #12]
        (fn->find.addr != 0xffff && fn->find.addr == node->addr) ||
    d0e8:	ea52 0403 	orrs.w	r4, r2, r3
    d0ec:	d025      	beq.n	d13a <find_node_load_cb+0x72>
        (fn->find.euid != 0 && fn->find.euid == node->euid)) {
    d0ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
    d0f2:	68c4      	ldr	r4, [r0, #12]
    d0f4:	42a3      	cmp	r3, r4
    d0f6:	bf08      	it	eq
    d0f8:	4562      	cmpeq	r2, ip
    d0fa:	d11e      	bne.n	d13a <find_node_load_cb+0x72>
        memcpy(fn->results, node, sizeof(struct panmaster_node));
    d0fc:	6a0b      	ldr	r3, [r1, #32]
    d0fe:	f8d0 e000 	ldr.w	lr, [r0]
    d102:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d106:	6882      	ldr	r2, [r0, #8]
    d108:	68c4      	ldr	r4, [r0, #12]
    d10a:	f8c3 e000 	str.w	lr, [r3]
    d10e:	f8c3 c004 	str.w	ip, [r3, #4]
    d112:	609a      	str	r2, [r3, #8]
    d114:	60dc      	str	r4, [r3, #12]
    d116:	f8d0 e010 	ldr.w	lr, [r0, #16]
    d11a:	f8d0 c014 	ldr.w	ip, [r0, #20]
    d11e:	6982      	ldr	r2, [r0, #24]
    d120:	f8c3 e010 	str.w	lr, [r3, #16]
    d124:	f8c3 c014 	str.w	ip, [r3, #20]
    d128:	619a      	str	r2, [r3, #24]
    d12a:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
    d12e:	7f82      	ldrb	r2, [r0, #30]
    d130:	f8a3 c01c 	strh.w	ip, [r3, #28]
    d134:	779a      	strb	r2, [r3, #30]
        fn->is_found = 1;
    d136:	2301      	movs	r3, #1
    d138:	624b      	str	r3, [r1, #36]	; 0x24
    }
}
    d13a:	bd10      	pop	{r4, pc}

0000d13c <sort_nodes_load_cb>:
static void
sort_nodes_load_cb(struct panmaster_node *node, void *cb_arg)
{
    struct panmaster_node *nodes = (struct panmaster_node*)cb_arg;

    if (node->index < MYNEWT_VAL(PANMASTER_MAXNUM_NODES)) {
    d13c:	7d03      	ldrb	r3, [r0, #20]
    d13e:	2b3f      	cmp	r3, #63	; 0x3f
    d140:	d900      	bls.n	d144 <sort_nodes_load_cb+0x8>
    d142:	4770      	bx	lr
{
    d144:	b530      	push	{r4, r5, lr}
        memcpy(&nodes[node->index], node, sizeof(struct panmaster_node));
    d146:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    d14a:	18ca      	adds	r2, r1, r3
    d14c:	6804      	ldr	r4, [r0, #0]
    d14e:	f8d0 e004 	ldr.w	lr, [r0, #4]
    d152:	f8d0 c008 	ldr.w	ip, [r0, #8]
    d156:	68c5      	ldr	r5, [r0, #12]
    d158:	50cc      	str	r4, [r1, r3]
    d15a:	f8c2 e004 	str.w	lr, [r2, #4]
    d15e:	f8c2 c008 	str.w	ip, [r2, #8]
    d162:	60d5      	str	r5, [r2, #12]
    d164:	6904      	ldr	r4, [r0, #16]
    d166:	f8d0 e014 	ldr.w	lr, [r0, #20]
    d16a:	f8d0 c018 	ldr.w	ip, [r0, #24]
    d16e:	6114      	str	r4, [r2, #16]
    d170:	f8c2 e014 	str.w	lr, [r2, #20]
    d174:	f8c2 c018 	str.w	ip, [r2, #24]
    d178:	8b81      	ldrh	r1, [r0, #28]
    d17a:	7f83      	ldrb	r3, [r0, #30]
    d17c:	8391      	strh	r1, [r2, #28]
    d17e:	7793      	strb	r3, [r2, #30]
    }
}
    d180:	bd30      	pop	{r4, r5, pc}

0000d182 <panm_fcb_src>:
{
    d182:	b538      	push	{r3, r4, r5, lr}
    d184:	4604      	mov	r4, r0
    pm->pm_fcb.f_version = PANM_FCB_VERS;
    d186:	2302      	movs	r3, #2
    d188:	7103      	strb	r3, [r0, #4]
    pm->pm_fcb.f_scratch_cnt = 1;
    d18a:	2301      	movs	r3, #1
    d18c:	7183      	strb	r3, [r0, #6]
    d18e:	e004      	b.n	d19a <panm_fcb_src+0x18>
            flash_area_erase(pm->pm_fcb.f_active.fe_area, 0,
    d190:	69e0      	ldr	r0, [r4, #28]
    d192:	6882      	ldr	r2, [r0, #8]
    d194:	2100      	movs	r1, #0
    d196:	f007 f8a7 	bl	142e8 <flash_area_erase>
        rc = fcb_init(&pm->pm_fcb);
    d19a:	4620      	mov	r0, r4
    d19c:	f00b fe84 	bl	18ea8 <fcb_init>
        if (rc) {
    d1a0:	4605      	mov	r5, r0
    d1a2:	b928      	cbnz	r0, d1b0 <panm_fcb_src+0x2e>
        if (fcb_free_sector_cnt(&pm->pm_fcb) < 1) {
    d1a4:	4620      	mov	r0, r4
    d1a6:	f00b fdfc 	bl	18da2 <fcb_free_sector_cnt>
    d1aa:	2800      	cmp	r0, #0
    d1ac:	ddf0      	ble.n	d190 <panm_fcb_src+0xe>
    d1ae:	e000      	b.n	d1b2 <panm_fcb_src+0x30>
            return OS_INVALID_PARM;
    d1b0:	2503      	movs	r5, #3
}
    d1b2:	4628      	mov	r0, r5
    d1b4:	bd38      	pop	{r3, r4, r5, pc}
	...

0000d1b8 <panm_fcb_load>:
{
    d1b8:	b500      	push	{lr}
    d1ba:	b083      	sub	sp, #12
    arg.cb = cb;
    d1bc:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
    d1be:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&pm->pm_fcb, 0, fcb_load_cb, &arg);
    d1c0:	466b      	mov	r3, sp
    d1c2:	4a05      	ldr	r2, [pc, #20]	; (d1d8 <panm_fcb_load+0x20>)
    d1c4:	2100      	movs	r1, #0
    d1c6:	f00c f935 	bl	19434 <fcb_walk>
    if (rc) {
    d1ca:	b910      	cbnz	r0, d1d2 <panm_fcb_load+0x1a>
}
    d1cc:	b003      	add	sp, #12
    d1ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
    d1d2:	2002      	movs	r0, #2
    d1d4:	e7fa      	b.n	d1cc <panm_fcb_load+0x14>
    d1d6:	bf00      	nop
    d1d8:	0000d089 	.word	0x0000d089

0000d1dc <panm_fcb_load_idx>:
{
    d1dc:	b508      	push	{r3, lr}
    d1de:	460a      	mov	r2, r1
    return panm_fcb_load(pm, node_idx_load_cb, (void*)nodes);
    d1e0:	4901      	ldr	r1, [pc, #4]	; (d1e8 <panm_fcb_load_idx+0xc>)
    d1e2:	f7ff ffe9 	bl	d1b8 <panm_fcb_load>
}
    d1e6:	bd08      	pop	{r3, pc}
    d1e8:	0000d009 	.word	0x0000d009

0000d1ec <panm_fcb_find_node>:
{
    d1ec:	b508      	push	{r3, lr}
    d1ee:	460a      	mov	r2, r1
    fns->is_found = 0;
    d1f0:	2300      	movs	r3, #0
    d1f2:	624b      	str	r3, [r1, #36]	; 0x24
    return panm_fcb_load(pf, find_node_load_cb, (void*)fns);
    d1f4:	4901      	ldr	r1, [pc, #4]	; (d1fc <panm_fcb_find_node+0x10>)
    d1f6:	f7ff ffdf 	bl	d1b8 <panm_fcb_load>
}
    d1fa:	bd08      	pop	{r3, pc}
    d1fc:	0000d0c9 	.word	0x0000d0c9

0000d200 <panm_fcb_compress>:
{
    d200:	b530      	push	{r4, r5, lr}
    d202:	b099      	sub	sp, #100	; 0x64
    d204:	4604      	mov	r4, r0
    rc = fcb_append_to_scratch(&pm->pm_fcb);
    d206:	f00b ff08 	bl	1901a <fcb_append_to_scratch>
    if (rc) {
    d20a:	2800      	cmp	r0, #0
    d20c:	d157      	bne.n	d2be <panm_fcb_compress+0xbe>
    loc1.fe_area = NULL;
    d20e:	2300      	movs	r3, #0
    d210:	9304      	str	r3, [sp, #16]
    loc1.fe_elem_off = 0;
    d212:	9305      	str	r3, [sp, #20]
    while (fcb_getnext(&pm->pm_fcb, &loc1) == 0) {
    d214:	a904      	add	r1, sp, #16
    d216:	4620      	mov	r0, r4
    d218:	f00c f8b6 	bl	19388 <fcb_getnext>
    d21c:	2800      	cmp	r0, #0
    d21e:	d14b      	bne.n	d2b8 <panm_fcb_compress+0xb8>
        if (loc1.fe_area != pm->pm_fcb.f_oldest) {
    d220:	9804      	ldr	r0, [sp, #16]
    d222:	69a3      	ldr	r3, [r4, #24]
    d224:	4298      	cmp	r0, r3
    d226:	d147      	bne.n	d2b8 <panm_fcb_compress+0xb8>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, &buf1,
    d228:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    d22c:	aa10      	add	r2, sp, #64	; 0x40
    d22e:	9906      	ldr	r1, [sp, #24]
    d230:	f007 f832 	bl	14298 <flash_area_read>
        if (rc) {
    d234:	2800      	cmp	r0, #0
    d236:	d1ed      	bne.n	d214 <panm_fcb_compress+0x14>
        loc2 = loc1;
    d238:	466d      	mov	r5, sp
    d23a:	ab04      	add	r3, sp, #16
    d23c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d23e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        while (fcb_getnext(&pm->pm_fcb, &loc2) == 0) {
    d242:	4669      	mov	r1, sp
    d244:	4620      	mov	r0, r4
    d246:	f00c f89f 	bl	19388 <fcb_getnext>
    d24a:	b9a8      	cbnz	r0, d278 <panm_fcb_compress+0x78>
            if (loc2.fe_area == pm->pm_fcb.f_oldest) {
    d24c:	9800      	ldr	r0, [sp, #0]
    d24e:	69a3      	ldr	r3, [r4, #24]
    d250:	4298      	cmp	r0, r3
    d252:	d0f6      	beq.n	d242 <panm_fcb_compress+0x42>
            rc = flash_area_read(loc2.fe_area, loc2.fe_data_off, &buf2,
    d254:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    d258:	aa08      	add	r2, sp, #32
    d25a:	9902      	ldr	r1, [sp, #8]
    d25c:	f007 f81c 	bl	14298 <flash_area_read>
            if (rc) {
    d260:	4605      	mov	r5, r0
    d262:	2800      	cmp	r0, #0
    d264:	d1ed      	bne.n	d242 <panm_fcb_compress+0x42>
            if (buf1.euid == buf2.euid) {
    d266:	9812      	ldr	r0, [sp, #72]	; 0x48
    d268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d26a:	990a      	ldr	r1, [sp, #40]	; 0x28
    d26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d26e:	429a      	cmp	r2, r3
    d270:	bf08      	it	eq
    d272:	4288      	cmpeq	r0, r1
    d274:	d1e5      	bne.n	d242 <panm_fcb_compress+0x42>
    d276:	e000      	b.n	d27a <panm_fcb_compress+0x7a>
        copy = 1;
    d278:	2501      	movs	r5, #1
        if (!copy) {
    d27a:	2d00      	cmp	r5, #0
    d27c:	d0ca      	beq.n	d214 <panm_fcb_compress+0x14>
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, &buf1,
    d27e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    d282:	aa10      	add	r2, sp, #64	; 0x40
    d284:	9906      	ldr	r1, [sp, #24]
    d286:	9804      	ldr	r0, [sp, #16]
    d288:	f007 f806 	bl	14298 <flash_area_read>
        if (rc) {
    d28c:	2800      	cmp	r0, #0
    d28e:	d1c1      	bne.n	d214 <panm_fcb_compress+0x14>
        rc = fcb_append(&pm->pm_fcb, sizeof(struct panmaster_node), &loc2);
    d290:	466a      	mov	r2, sp
    d292:	211f      	movs	r1, #31
    d294:	4620      	mov	r0, r4
    d296:	f00b fed9 	bl	1904c <fcb_append>
        if (rc) {
    d29a:	2800      	cmp	r0, #0
    d29c:	d1ba      	bne.n	d214 <panm_fcb_compress+0x14>
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, &buf1,
    d29e:	231f      	movs	r3, #31
    d2a0:	aa10      	add	r2, sp, #64	; 0x40
    d2a2:	9902      	ldr	r1, [sp, #8]
    d2a4:	9800      	ldr	r0, [sp, #0]
    d2a6:	f007 f80b 	bl	142c0 <flash_area_write>
        if (rc) {
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d1b2      	bne.n	d214 <panm_fcb_compress+0x14>
        fcb_append_finish(&pm->pm_fcb, &loc2);
    d2ae:	4669      	mov	r1, sp
    d2b0:	4620      	mov	r0, r4
    d2b2:	f00b ff48 	bl	19146 <fcb_append_finish>
    d2b6:	e7ad      	b.n	d214 <panm_fcb_compress+0x14>
    rc = fcb_rotate(&pm->pm_fcb);
    d2b8:	4620      	mov	r0, r4
    d2ba:	f00c f87f 	bl	193bc <fcb_rotate>
}
    d2be:	b019      	add	sp, #100	; 0x64
    d2c0:	bd30      	pop	{r4, r5, pc}

0000d2c2 <panm_fcb_append>:
{
    d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c6:	b084      	sub	sp, #16
    d2c8:	4606      	mov	r6, r0
    d2ca:	4688      	mov	r8, r1
    d2cc:	4617      	mov	r7, r2
    for (i = 0; i < 10; i++) {
    d2ce:	2500      	movs	r5, #0
    d2d0:	2d09      	cmp	r5, #9
    d2d2:	dc0d      	bgt.n	d2f0 <panm_fcb_append+0x2e>
        rc = fcb_append(&pm->pm_fcb, len, &loc);
    d2d4:	466a      	mov	r2, sp
    d2d6:	b2b9      	uxth	r1, r7
    d2d8:	4630      	mov	r0, r6
    d2da:	f00b feb7 	bl	1904c <fcb_append>
    d2de:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
    d2e0:	f110 0f04 	cmn.w	r0, #4
    d2e4:	d104      	bne.n	d2f0 <panm_fcb_append+0x2e>
        panm_fcb_compress(pm);
    d2e6:	4630      	mov	r0, r6
    d2e8:	f7ff ff8a 	bl	d200 <panm_fcb_compress>
    for (i = 0; i < 10; i++) {
    d2ec:	3501      	adds	r5, #1
    d2ee:	e7ef      	b.n	d2d0 <panm_fcb_append+0xe>
    if (rc) {
    d2f0:	b97c      	cbnz	r4, d312 <panm_fcb_append+0x50>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
    d2f2:	463b      	mov	r3, r7
    d2f4:	4642      	mov	r2, r8
    d2f6:	9902      	ldr	r1, [sp, #8]
    d2f8:	9800      	ldr	r0, [sp, #0]
    d2fa:	f006 ffe1 	bl	142c0 <flash_area_write>
    if (rc) {
    d2fe:	4604      	mov	r4, r0
    d300:	b948      	cbnz	r0, d316 <panm_fcb_append+0x54>
    fcb_append_finish(&pm->pm_fcb, &loc);
    d302:	4669      	mov	r1, sp
    d304:	4630      	mov	r0, r6
    d306:	f00b ff1e 	bl	19146 <fcb_append_finish>
}
    d30a:	4620      	mov	r0, r4
    d30c:	b004      	add	sp, #16
    d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return OS_EINVAL;
    d312:	2402      	movs	r4, #2
    d314:	e7f9      	b.n	d30a <panm_fcb_append+0x48>
        return OS_EINVAL;
    d316:	2402      	movs	r4, #2
    d318:	e7f7      	b.n	d30a <panm_fcb_append+0x48>

0000d31a <panm_fcb_save>:
    if (!node) {
    d31a:	b121      	cbz	r1, d326 <panm_fcb_save+0xc>
{
    d31c:	b508      	push	{r3, lr}
    return panm_fcb_append(pm, (uint8_t*)node, sizeof(struct panmaster_node));
    d31e:	221f      	movs	r2, #31
    d320:	f7ff ffcf 	bl	d2c2 <panm_fcb_append>
}
    d324:	bd08      	pop	{r3, pc}
        return OS_INVALID_PARM;
    d326:	2003      	movs	r0, #3
}
    d328:	4770      	bx	lr

0000d32a <panm_fcb_clear>:
{
    d32a:	b508      	push	{r3, lr}
    return fcb_clear(&pm->pm_fcb);
    d32c:	f00b fe4d 	bl	18fca <fcb_clear>
}
    d330:	bd08      	pop	{r3, pc}
	...

0000d334 <panm_fcb_sort>:

void
panm_fcb_sort(struct panm_fcb *pm)
{
    d334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d338:	4607      	mov	r7, r0
    int laddr_i;
    struct panmaster_node *nodes;
    int lne_nodes_sz = sizeof(struct panmaster_node)*
        MYNEWT_VAL(PANMASTER_MAXNUM_NODES);

    nodes = (struct panmaster_node*)malloc(lne_nodes_sz);
    d33a:	f44f 60f8 	mov.w	r0, #1984	; 0x7c0
    d33e:	f003 f91f 	bl	10580 <malloc>
    if (!nodes) {
    d342:	b3d8      	cbz	r0, d3bc <panm_fcb_sort+0x88>
    d344:	4604      	mov	r4, r0
        return;
    }

    memset(nodes, 0xff, lne_nodes_sz);
    d346:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
    d34a:	21ff      	movs	r1, #255	; 0xff
    d34c:	f003 f995 	bl	1067a <memset>
    panmaster_load(sort_nodes_load_cb, nodes);
    d350:	4621      	mov	r1, r4
    d352:	481b      	ldr	r0, [pc, #108]	; (d3c0 <panm_fcb_sort+0x8c>)
    d354:	f7ff f90c 	bl	c570 <panmaster_load>

    /* Clear nodes storage area */
    panm_fcb_clear(pm);
    d358:	4638      	mov	r0, r7
    d35a:	f7ff ffe6 	bl	d32a <panm_fcb_clear>

    /* Save nodes from memory in sorted order */
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    d35e:	2600      	movs	r6, #0
    d360:	e023      	b.n	d3aa <panm_fcb_sort+0x76>
        laddr = 0xffff;

        /* find lowest addr of all nodes */
        for(i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    d362:	3301      	adds	r3, #1
    d364:	2b3f      	cmp	r3, #63	; 0x3f
    d366:	dc0c      	bgt.n	d382 <panm_fcb_sort+0x4e>
            if (nodes[i].addr == 0xffff) {
    d368:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    d36c:	4422      	add	r2, r4
    d36e:	8a12      	ldrh	r2, [r2, #16]
    d370:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d374:	428a      	cmp	r2, r1
    d376:	d0f4      	beq.n	d362 <panm_fcb_sort+0x2e>
                continue;
            }
            if (nodes[i].addr < laddr) {
    d378:	4282      	cmp	r2, r0
    d37a:	daf2      	bge.n	d362 <panm_fcb_sort+0x2e>
                laddr = nodes[i].addr;
                laddr_i = i;
    d37c:	461d      	mov	r5, r3
                laddr = nodes[i].addr;
    d37e:	4610      	mov	r0, r2
    d380:	e7ef      	b.n	d362 <panm_fcb_sort+0x2e>
            }
        }
        if (laddr == 0xffff) {
    d382:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d386:	4298      	cmp	r0, r3
    d388:	d015      	beq.n	d3b6 <panm_fcb_sort+0x82>
            break;
        }

        nodes[laddr_i].index = index;
    d38a:	ebc5 1845 	rsb	r8, r5, r5, lsl #5
    d38e:	44a0      	add	r8, r4
    d390:	f888 6014 	strb.w	r6, [r8, #20]
        panm_fcb_save(pm, &nodes[laddr_i]);
    d394:	4641      	mov	r1, r8
    d396:	4638      	mov	r0, r7
    d398:	f7ff ffbf 	bl	d31a <panm_fcb_save>
        nodes[laddr_i].addr = 0xffff;
    d39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3a0:	f888 3010 	strb.w	r3, [r8, #16]
    d3a4:	f888 3011 	strb.w	r3, [r8, #17]
    for(index=0;index<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);index++) {
    d3a8:	3601      	adds	r6, #1
    d3aa:	2e3f      	cmp	r6, #63	; 0x3f
    d3ac:	dc03      	bgt.n	d3b6 <panm_fcb_sort+0x82>
        laddr = 0xffff;
    d3ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
        for(i=0;i<MYNEWT_VAL(PANMASTER_MAXNUM_NODES);i++) {
    d3b2:	2300      	movs	r3, #0
    d3b4:	e7d6      	b.n	d364 <panm_fcb_sort+0x30>
    }

    free(nodes);
    d3b6:	4620      	mov	r0, r4
    d3b8:	f003 f918 	bl	105ec <free>
}
    d3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3c0:	0000d13d 	.word	0x0000d13d
    d3c4:	00000000 	.word	0x00000000

0000d3c8 <uwb_rng_tof_to_meters>:
 *
 * @return range in meters
 */
dpl_float64_t
uwb_rng_tof_to_meters(dpl_float64_t ToF)
{
    d3c8:	b538      	push	{r3, r4, r5, lr}
    d3ca:	ec55 4b10 	vmov	r4, r5, d0
    if (DPL_FLOAT64_ISNAN(ToF)) {
    d3ce:	ee10 2a10 	vmov	r2, s0
    d3d2:	462b      	mov	r3, r5
    d3d4:	ee10 0a10 	vmov	r0, s0
    d3d8:	4629      	mov	r1, r5
    d3da:	f017 fc07 	bl	24bec <__aeabi_dcmpun>
    d3de:	b948      	cbnz	r0, d3f4 <uwb_rng_tof_to_meters+0x2c>
        return DPL_FLOAT64_NAN();
    }
    /* ToF * (299792458.0l/1.000293l) * (1.0/499.2e6/128.0) */
    dpl_float64_t tmp = DPL_FLOAT64_INIT((299792458.0l/1.000293l) * (1.0/499.2e6/128.0));
    return DPL_FLOAT64_MUL(ToF, tmp);
    d3e0:	a309      	add	r3, pc, #36	; (adr r3, d408 <uwb_rng_tof_to_meters+0x40>)
    d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3e6:	4620      	mov	r0, r4
    d3e8:	4629      	mov	r1, r5
    d3ea:	f017 f965 	bl	246b8 <__aeabi_dmul>
    d3ee:	ec41 0b10 	vmov	d0, r0, r1
}
    d3f2:	bd38      	pop	{r3, r4, r5, pc}
        return DPL_FLOAT64_NAN();
    d3f4:	ed9f 0b02 	vldr	d0, [pc, #8]	; d400 <uwb_rng_tof_to_meters+0x38>
    d3f8:	e7fb      	b.n	d3f2 <uwb_rng_tof_to_meters+0x2a>
    d3fa:	bf00      	nop
    d3fc:	f3af 8000 	nop.w
    d400:	00000000 	.word	0x00000000
    d404:	7ff80000 	.word	0x7ff80000
    d408:	e57d514d 	.word	0xe57d514d
    d40c:	3f73363a 	.word	0x3f73363a

0000d410 <calc_tof_ss>:

dpl_float64_t
calc_tof_ss(uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp,
            uint64_t reception_timestamp,  dpl_float64_t skew)
{
    d410:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    d414:	ec59 8b10 	vmov	r8, r9, d0
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0), tmpf;
    uint64_t T1R, T1r;

    T1R = (response_timestamp - request_timestamp);
    d418:	1a46      	subs	r6, r0, r1
    T1r = (transmission_timestamp - reception_timestamp) & MASK32;
    tmpf = DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64(T1r),
    d41a:	9806      	ldr	r0, [sp, #24]
    d41c:	1a10      	subs	r0, r2, r0
    d41e:	2100      	movs	r1, #0
    d420:	f017 f914 	bl	2464c <__aeabi_ul2d>
    d424:	4604      	mov	r4, r0
    d426:	460d      	mov	r5, r1
    d428:	4642      	mov	r2, r8
    d42a:	464b      	mov	r3, r9
    d42c:	2000      	movs	r0, #0
    d42e:	490d      	ldr	r1, [pc, #52]	; (d464 <calc_tof_ss+0x54>)
    d430:	f016 ff8a 	bl	24348 <__aeabi_dsub>
    d434:	4602      	mov	r2, r0
    d436:	460b      	mov	r3, r1
    d438:	4620      	mov	r0, r4
    d43a:	4629      	mov	r1, r5
    d43c:	f017 f93c 	bl	246b8 <__aeabi_dmul>
    d440:	4604      	mov	r4, r0
    d442:	460d      	mov	r5, r1
                                DPL_FLOAT64_SUB(DPL_FLOAT64_INIT(1.0), skew));
    ToF = DPL_FLOAT64_SUB(DPL_FLOAT64_U64_TO_F64(T1R), tmpf);
    d444:	4630      	mov	r0, r6
    d446:	f017 f8bd 	bl	245c4 <__aeabi_ui2d>
    d44a:	4622      	mov	r2, r4
    d44c:	462b      	mov	r3, r5
    d44e:	f016 ff7b 	bl	24348 <__aeabi_dsub>
    ToF = DPL_FLOAT64_DIV(ToF, DPL_FLOAT64_INIT(2.0));
    d452:	2200      	movs	r2, #0
    d454:	4b04      	ldr	r3, [pc, #16]	; (d468 <calc_tof_ss+0x58>)
    d456:	f017 f92f 	bl	246b8 <__aeabi_dmul>

    return ToF;
}
    d45a:	ec41 0b10 	vmov	d0, r0, r1
    d45e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    d462:	bf00      	nop
    d464:	3ff00000 	.word	0x3ff00000
    d468:	3fe00000 	.word	0x3fe00000
    d46c:	00000000 	.word	0x00000000

0000d470 <calc_tof_ds>:
dpl_float64_t
calc_tof_ds(uint32_t first_response_timestamp, uint32_t first_request_timestamp,
            uint64_t first_transmission_timestamp, uint64_t first_reception_timestamp,
            uint32_t response_timestamp, uint32_t request_timestamp,
            uint64_t transmission_timestamp, uint64_t reception_timestamp)
{
    d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d472:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dpl_float64_t ToF = DPL_FLOAT64_I32_TO_F64(0);
    uint64_t T1R, T1r, T2R, T2r;
    int64_t nom, denom;

    T1R = (first_response_timestamp - first_request_timestamp);
    d474:	1a43      	subs	r3, r0, r1
    d476:	f04f 0c00 	mov.w	ip, #0
    T1r = (first_transmission_timestamp  - first_reception_timestamp) & MASK32;
    d47a:	9906      	ldr	r1, [sp, #24]
    d47c:	1a52      	subs	r2, r2, r1
    T2R = (response_timestamp - request_timestamp);
    d47e:	9d08      	ldr	r5, [sp, #32]
    d480:	9909      	ldr	r1, [sp, #36]	; 0x24
    d482:	1a6d      	subs	r5, r5, r1
    T2r = (transmission_timestamp - reception_timestamp) & MASK32;
    d484:	990a      	ldr	r1, [sp, #40]	; 0x28
    d486:	1b0c      	subs	r4, r1, r4
    nom = T1R * T2R  - T1r * T2r;
    d488:	fba3 e105 	umull	lr, r1, r3, r5
    d48c:	fba2 0604 	umull	r0, r6, r2, r4
    d490:	ebbe 0000 	subs.w	r0, lr, r0
    d494:	eb61 0106 	sbc.w	r1, r1, r6
    denom = T1R + T2R  + T1r + T2r;
    d498:	195b      	adds	r3, r3, r5
    d49a:	eb4c 0c0c 	adc.w	ip, ip, ip
    d49e:	189b      	adds	r3, r3, r2
    d4a0:	f14c 0500 	adc.w	r5, ip, #0
    d4a4:	191c      	adds	r4, r3, r4
    d4a6:	f145 0500 	adc.w	r5, r5, #0

    if (denom == 0) {
    d4aa:	ea54 0305 	orrs.w	r3, r4, r5
    d4ae:	d010      	beq.n	d4d2 <calc_tof_ds+0x62>
        return DPL_FLOAT64_NAN();
    }

    ToF = DPL_FLOAT64_DIV(DPL_FLOAT64_I64_TO_F64(nom),
    d4b0:	f017 f8d4 	bl	2465c <__aeabi_l2d>
    d4b4:	4606      	mov	r6, r0
    d4b6:	460f      	mov	r7, r1
    d4b8:	4620      	mov	r0, r4
    d4ba:	4629      	mov	r1, r5
    d4bc:	f017 f8ce 	bl	2465c <__aeabi_l2d>
    d4c0:	4602      	mov	r2, r0
    d4c2:	460b      	mov	r3, r1
    d4c4:	4630      	mov	r0, r6
    d4c6:	4639      	mov	r1, r7
    d4c8:	f017 fa20 	bl	2490c <__aeabi_ddiv>
    d4cc:	ec41 0b10 	vmov	d0, r0, r1
                                                DPL_FLOAT64_I64_TO_F64(denom));
    return ToF;
}
    d4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_FLOAT64_NAN();
    d4d2:	ed9f 0b01 	vldr	d0, [pc, #4]	; d4d8 <calc_tof_ds+0x68>
    d4d6:	e7fb      	b.n	d4d0 <calc_tof_ds+0x60>
    d4d8:	00000000 	.word	0x00000000
    d4dc:	7ff80000 	.word	0x7ff80000

0000d4e0 <survey_complete_cb>:
 * API for verbose logging of survey results.
 *
 * @param struct os_event
 * @return none
 */
static void survey_complete_cb(struct dpl_event *ev) {
    d4e0:	b508      	push	{r3, lr}
    assert(ev != NULL);
    d4e2:	b140      	cbz	r0, d4f6 <survey_complete_cb+0x16>
    return ev->ev.ev_arg;
    d4e4:	6880      	ldr	r0, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    d4e6:	b160      	cbz	r0, d502 <survey_complete_cb+0x22>

    survey_instance_t * survey = (survey_instance_t *) dpl_event_get_arg(ev);
    survey_encode(survey, survey->seq_num, survey->idx);
    d4e8:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    d4ec:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    d4f0:	f000 fc24 	bl	dd3c <survey_encode>
}
    d4f4:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    d4f6:	2300      	movs	r3, #0
    d4f8:	461a      	mov	r2, r3
    d4fa:	4619      	mov	r1, r3
    d4fc:	4618      	mov	r0, r3
    d4fe:	f7fb fe61 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    d502:	2300      	movs	r3, #0
    d504:	461a      	mov	r2, r3
    d506:	4619      	mov	r1, r3
    d508:	4618      	mov	r0, r3
    d50a:	f7fb fe5b 	bl	91c4 <__assert_func>

0000d50e <reset_cb>:
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    d50e:	b510      	push	{r4, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d510:	684c      	ldr	r4, [r1, #4]
    d512:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a

    if(dpl_sem_get_count(&survey->sem) == 1)
    d516:	2b01      	cmp	r3, #1
    d518:	d00f      	beq.n	d53a <reset_cb+0x2c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    d51a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d51e:	f7fc fda5 	bl	a06c <os_sem_release>
        return false;

    dpl_error_t err = dpl_sem_release(&survey->sem);
    assert(err == DPL_OK);
    d522:	b920      	cbnz	r0, d52e <reset_cb+0x20>
    STATS_INC(survey->stat, reset);
    d524:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d526:	3301      	adds	r3, #1
    d528:	6423      	str	r3, [r4, #64]	; 0x40

    return true;
    d52a:	2001      	movs	r0, #1
}
    d52c:	bd10      	pop	{r4, pc}
    assert(err == DPL_OK);
    d52e:	2300      	movs	r3, #0
    d530:	461a      	mov	r2, r3
    d532:	4619      	mov	r1, r3
    d534:	4618      	mov	r0, r3
    d536:	f7fb fe45 	bl	91c4 <__assert_func>
        return false;
    d53a:	2000      	movs	r0, #0
    d53c:	e7f6      	b.n	d52c <reset_cb+0x1e>

0000d53e <rx_timeout_cb>:
{
    d53e:	b510      	push	{r4, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d540:	684c      	ldr	r4, [r1, #4]
    d542:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    if(dpl_sem_get_count(&survey->sem) == 1)
    d546:	2b01      	cmp	r3, #1
    d548:	d00f      	beq.n	d56a <rx_timeout_cb+0x2c>
    d54a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d54e:	f7fc fd8d 	bl	a06c <os_sem_release>
    assert(err == DPL_OK);
    d552:	b920      	cbnz	r0, d55e <rx_timeout_cb+0x20>
    STATS_INC(survey->stat, rx_timeout);
    d554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d556:	3301      	adds	r3, #1
    d558:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    d55a:	2001      	movs	r0, #1
}
    d55c:	bd10      	pop	{r4, pc}
    assert(err == DPL_OK);
    d55e:	2300      	movs	r3, #0
    d560:	461a      	mov	r2, r3
    d562:	4619      	mov	r1, r3
    d564:	4618      	mov	r0, r3
    d566:	f7fb fe2d 	bl	91c4 <__assert_func>
        return false;
    d56a:	2000      	movs	r0, #0
    d56c:	e7f6      	b.n	d55c <rx_timeout_cb+0x1e>

0000d56e <tx_complete_cb>:
{
    d56e:	b508      	push	{r3, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d570:	6848      	ldr	r0, [r1, #4]
    d572:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
    if(dpl_sem_get_count(&survey->sem) == 1)
    d576:	2b01      	cmp	r3, #1
    d578:	d003      	beq.n	d582 <tx_complete_cb+0x14>
    d57a:	3084      	adds	r0, #132	; 0x84
    d57c:	f7fc fd76 	bl	a06c <os_sem_release>
    assert(err == DPL_OK);
    d580:	b908      	cbnz	r0, d586 <tx_complete_cb+0x18>
}
    d582:	2000      	movs	r0, #0
    d584:	bd08      	pop	{r3, pc}
    assert(err == DPL_OK);
    d586:	2300      	movs	r3, #0
    d588:	461a      	mov	r2, r3
    d58a:	4619      	mov	r1, r3
    d58c:	4618      	mov	r0, r3
    d58e:	f7fb fe19 	bl	91c4 <__assert_func>

0000d592 <rx_complete_cb>:
{
    d592:	b570      	push	{r4, r5, r6, lr}
    survey_instance_t * survey = (survey_instance_t *)cbs->inst_ptr;
    d594:	684c      	ldr	r4, [r1, #4]
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
    d596:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
    d59a:	f648 0341 	movw	r3, #34881	; 0x8841
    d59e:	429a      	cmp	r2, r3
    d5a0:	d171      	bne.n	d686 <rx_complete_cb+0xf4>
    d5a2:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
    if(dpl_sem_get_count(&survey->sem) == 1){ // unsolicited inbound
    d5a6:	2b01      	cmp	r3, #1
    d5a8:	d022      	beq.n	d5f0 <rx_complete_cb+0x5e>
    if(inst->frame_len < sizeof(survey_broadcast_frame_t))
    d5aa:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    d5ae:	2b42      	cmp	r3, #66	; 0x42
    d5b0:	d96b      	bls.n	d68a <rx_complete_cb+0xf8>
    survey_broadcast_frame_t * frame = ((survey_broadcast_frame_t * ) inst->rxbuf);
    d5b2:	f8d0 54fc 	ldr.w	r5, [r0, #1276]	; 0x4fc
    if(frame->dst_address != 0xffff)
    d5b6:	f8b5 2005 	ldrh.w	r2, [r5, #5]
    d5ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d5be:	429a      	cmp	r2, r3
    d5c0:	d165      	bne.n	d68e <rx_complete_cb+0xfc>
    if(survey->ccp->seq_num % survey->nnodes == 0)
    d5c2:	6863      	ldr	r3, [r4, #4]
    d5c4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
    d5c8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    d5cc:	fb93 f1f2 	sdiv	r1, r3, r2
    d5d0:	fb02 3311 	mls	r3, r2, r1, r3
    d5d4:	b923      	cbnz	r3, d5e0 <rx_complete_cb+0x4e>
        survey->idx++;  // advance the nrngs idx at begining of sequence.
    d5d6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    d5da:	3301      	adds	r3, #1
    d5dc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
    switch(frame->code) {
    d5e0:	f8b5 2009 	ldrh.w	r2, [r5, #9]
    d5e4:	f240 4331 	movw	r3, #1073	; 0x431
    d5e8:	429a      	cmp	r2, r3
    d5ea:	d006      	beq.n	d5fa <rx_complete_cb+0x68>
            return false;
    d5ec:	2000      	movs	r0, #0
    d5ee:	e04b      	b.n	d688 <rx_complete_cb+0xf6>
        STATS_INC(survey->stat, rx_unsolicited);
    d5f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d5f2:	3301      	adds	r3, #1
    d5f4:	62a3      	str	r3, [r4, #40]	; 0x28
        return false;
    d5f6:	2000      	movs	r0, #0
    d5f8:	e046      	b.n	d688 <rx_complete_cb+0xf6>
                if (frame->cell_id != inst->cell_id)
    d5fa:	f8b5 200d 	ldrh.w	r2, [r5, #13]
    d5fe:	f8b0 34c4 	ldrh.w	r3, [r0, #1220]	; 0x4c4
    d602:	429a      	cmp	r2, r3
    d604:	d145      	bne.n	d692 <rx_complete_cb+0x100>
                if (frame->seq_num != survey->seq_num)
    d606:	78aa      	ldrb	r2, [r5, #2]
    d608:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    d60c:	429a      	cmp	r2, r3
    d60e:	d006      	beq.n	d61e <rx_complete_cb+0x8c>
    d610:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d614:	f7fc fd2a 	bl	a06c <os_sem_release>
    assert(err == DPL_OK);
    d618:	bb78      	cbnz	r0, d67a <rx_complete_cb+0xe8>
    return true;
    d61a:	2001      	movs	r0, #1
    d61c:	e034      	b.n	d688 <rx_complete_cb+0xf6>
                survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    d61e:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    d622:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    d626:	fbb3 f1f2 	udiv	r1, r3, r2
    d62a:	fb02 3311 	mls	r3, r2, r1, r3
    d62e:	b29b      	uxth	r3, r3
    d630:	3328      	adds	r3, #40	; 0x28
    d632:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
                uint16_t nnodes = NumberOfBits(frame->mask);
    d636:	f8b5 000f 	ldrh.w	r0, [r5, #15]
    d63a:	f002 fd79 	bl	10130 <NumberOfBits>
    d63e:	b283      	uxth	r3, r0
                survey->status.empty = nnodes == 0;
    d640:	fab3 f383 	clz	r3, r3
    d644:	095b      	lsrs	r3, r3, #5
    d646:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    d64a:	f363 1245 	bfi	r2, r3, #5, #1
    d64e:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
                if(survey->status.empty == 0){
    d652:	b2d3      	uxtb	r3, r2
    d654:	f013 0f20 	tst.w	r3, #32
    d658:	d107      	bne.n	d66a <rx_complete_cb+0xd8>
                    nrngs->mask |= 1U << frame->slot_id;
    d65a:	f8b5 200b 	ldrh.w	r2, [r5, #11]
    d65e:	2301      	movs	r3, #1
    d660:	4093      	lsls	r3, r2
    d662:	8832      	ldrh	r2, [r6, #0]
    d664:	4313      	orrs	r3, r2
    d666:	8033      	strh	r3, [r6, #0]
                    break;
    d668:	e7d2      	b.n	d610 <rx_complete_cb+0x7e>
                    nrngs->nrng[frame->slot_id].mask = 0;
    d66a:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    d66e:	2234      	movs	r2, #52	; 0x34
    d670:	fb02 6603 	mla	r6, r2, r3, r6
    d674:	2300      	movs	r3, #0
    d676:	80b3      	strh	r3, [r6, #4]
                    break;
    d678:	e7ca      	b.n	d610 <rx_complete_cb+0x7e>
    assert(err == DPL_OK);
    d67a:	2300      	movs	r3, #0
    d67c:	461a      	mov	r2, r3
    d67e:	4619      	mov	r1, r3
    d680:	4618      	mov	r0, r3
    d682:	f7fb fd9f 	bl	91c4 <__assert_func>
        return false;
    d686:	2000      	movs	r0, #0
}
    d688:	bd70      	pop	{r4, r5, r6, pc}
       return false;
    d68a:	2000      	movs	r0, #0
    d68c:	e7fc      	b.n	d688 <rx_complete_cb+0xf6>
        return false;
    d68e:	2000      	movs	r0, #0
    d690:	e7fa      	b.n	d688 <rx_complete_cb+0xf6>
                    return false;
    d692:	2000      	movs	r0, #0
    d694:	e7f8      	b.n	d688 <rx_complete_cb+0xf6>
	...

0000d698 <survey_init>:
survey_init(struct uwb_dev * inst, uint16_t nnodes, uint16_t nframes){
    d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d69c:	b094      	sub	sp, #80	; 0x50
    assert(inst);
    d69e:	2800      	cmp	r0, #0
    d6a0:	d046      	beq.n	d730 <survey_init+0x98>
    d6a2:	460f      	mov	r7, r1
    d6a4:	4615      	mov	r5, r2
    d6a6:	4606      	mov	r6, r0
    survey_instance_t * survey = (survey_instance_t*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_SURVEY);
    d6a8:	2150      	movs	r1, #80	; 0x50
    d6aa:	f7fb fb68 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (survey == NULL) {
    d6ae:	4604      	mov	r4, r0
    d6b0:	2800      	cmp	r0, #0
    d6b2:	d043      	beq.n	d73c <survey_init+0xa4>
        assert(survey->nnodes == nnodes);
    d6b4:	f8b0 3096 	ldrh.w	r3, [r0, #150]	; 0x96
    d6b8:	42bb      	cmp	r3, r7
    d6ba:	f040 80a5 	bne.w	d808 <survey_init+0x170>
    survey->status.initialized = 1;
    d6be:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    d6c2:	f043 0302 	orr.w	r3, r3, #2
    d6c6:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    survey->config = (survey_config_t){
    d6ca:	f44f 7340 	mov.w	r3, #768	; 0x300
    d6ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    survey->cbs = (struct uwb_mac_interface){
    d6d2:	f104 0544 	add.w	r5, r4, #68	; 0x44
    d6d6:	223c      	movs	r2, #60	; 0x3c
    d6d8:	2100      	movs	r1, #0
    d6da:	4628      	mov	r0, r5
    d6dc:	f002 ffcd 	bl	1067a <memset>
    d6e0:	2350      	movs	r3, #80	; 0x50
    d6e2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    d6e6:	64a4      	str	r4, [r4, #72]	; 0x48
    d6e8:	4b50      	ldr	r3, [pc, #320]	; (d82c <survey_init+0x194>)
    d6ea:	6523      	str	r3, [r4, #80]	; 0x50
    d6ec:	4b50      	ldr	r3, [pc, #320]	; (d830 <survey_init+0x198>)
    d6ee:	6563      	str	r3, [r4, #84]	; 0x54
    d6f0:	4b50      	ldr	r3, [pc, #320]	; (d834 <survey_init+0x19c>)
    d6f2:	65e3      	str	r3, [r4, #92]	; 0x5c
    d6f4:	4b50      	ldr	r3, [pc, #320]	; (d838 <survey_init+0x1a0>)
    d6f6:	66a3      	str	r3, [r4, #104]	; 0x68
    survey->survey_complete_cb = survey_complete_cb;
    d6f8:	4b50      	ldr	r3, [pc, #320]	; (d83c <survey_init+0x1a4>)
    d6fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    uwb_mac_append_interface(inst, &survey->cbs);
    d6fe:	4629      	mov	r1, r5
    d700:	4630      	mov	r0, r6
    d702:	f7fb fae7 	bl	8cd4 <uwb_mac_append_interface>
    int rc = stats_init(
    d706:	f104 050c 	add.w	r5, r4, #12
    d70a:	2209      	movs	r2, #9
    d70c:	9200      	str	r2, [sp, #0]
    d70e:	4b4c      	ldr	r3, [pc, #304]	; (d840 <survey_init+0x1a8>)
    d710:	2104      	movs	r1, #4
    d712:	4628      	mov	r0, r5
    d714:	f008 fd16 	bl	16144 <stats_init>
    assert(rc == 0);
    d718:	2800      	cmp	r0, #0
    d71a:	d17b      	bne.n	d814 <survey_init+0x17c>
    rc = stats_register("survey", STATS_HDR(survey->stat));
    d71c:	4629      	mov	r1, r5
    d71e:	4849      	ldr	r0, [pc, #292]	; (d844 <survey_init+0x1ac>)
    d720:	f008 fd94 	bl	1624c <stats_register>
    assert(rc == 0);
    d724:	2800      	cmp	r0, #0
    d726:	d17b      	bne.n	d820 <survey_init+0x188>
}
    d728:	4620      	mov	r0, r4
    d72a:	b014      	add	sp, #80	; 0x50
    d72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(inst);
    d730:	2300      	movs	r3, #0
    d732:	461a      	mov	r2, r3
    d734:	4619      	mov	r1, r3
    d736:	4618      	mov	r0, r3
    d738:	f7fb fd44 	bl	91c4 <__assert_func>
        survey = (survey_instance_t *) malloc(sizeof(survey_instance_t) + nframes * sizeof(survey_nrngs_t * ));
    d73c:	f105 0828 	add.w	r8, r5, #40	; 0x28
    d740:	ea4f 0888 	mov.w	r8, r8, lsl #2
    d744:	4640      	mov	r0, r8
    d746:	f002 ff1b 	bl	10580 <malloc>
        assert(survey);
    d74a:	4604      	mov	r4, r0
    d74c:	2800      	cmp	r0, #0
    d74e:	d055      	beq.n	d7fc <survey_init+0x164>
        memset(survey, 0, sizeof(survey_instance_t) + nframes * sizeof(survey_nrngs_t * ));
    d750:	4642      	mov	r2, r8
    d752:	2100      	movs	r1, #0
    d754:	f002 ff91 	bl	1067a <memset>
        memset(survey->frame, 0, sizeof(survey_broadcast_frame_t));
    d758:	f04f 0843 	mov.w	r8, #67	; 0x43
    d75c:	4642      	mov	r2, r8
    d75e:	2100      	movs	r1, #0
    d760:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d764:	f002 ff89 	bl	1067a <memset>
        survey_broadcast_frame_t frame = {
    d768:	4642      	mov	r2, r8
    d76a:	2100      	movs	r1, #0
    d76c:	a803      	add	r0, sp, #12
    d76e:	f002 ff84 	bl	1067a <memset>
    d772:	f648 0341 	movw	r3, #34881	; 0x8841
    d776:	f8ad 300c 	strh.w	r3, [sp, #12]
    d77a:	f06f 0335 	mvn.w	r3, #53	; 0x35
    d77e:	f88d 300f 	strb.w	r3, [sp, #15]
    d782:	f06f 0321 	mvn.w	r3, #33	; 0x21
    d786:	f88d 3010 	strb.w	r3, [sp, #16]
    d78a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d78e:	f88d 3011 	strb.w	r3, [sp, #17]
    d792:	f88d 3012 	strb.w	r3, [sp, #18]
            .src_address = inst->my_short_address,
    d796:	f8b6 34b6 	ldrh.w	r3, [r6, #1206]	; 0x4b6
        survey_broadcast_frame_t frame = {
    d79a:	f8ad 3013 	strh.w	r3, [sp, #19]
    d79e:	2331      	movs	r3, #49	; 0x31
    d7a0:	f88d 3015 	strb.w	r3, [sp, #21]
    d7a4:	2304      	movs	r3, #4
    d7a6:	f88d 3016 	strb.w	r3, [sp, #22]
        memcpy(survey->frame, &frame, sizeof(survey_broadcast_frame_t));
    d7aa:	4642      	mov	r2, r8
    d7ac:	a903      	add	r1, sp, #12
    d7ae:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d7b2:	f002 ff55 	bl	10660 <memcpy>
        survey->status.selfmalloc = 1;
    d7b6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    d7ba:	f043 0301 	orr.w	r3, r3, #1
    d7be:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
        survey->nnodes = nnodes;
    d7c2:	f8a4 7096 	strh.w	r7, [r4, #150]	; 0x96
        survey->nframes = nframes;
    d7c6:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
        survey->dev_inst = inst;
    d7ca:	6026      	str	r6, [r4, #0]
        survey->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    d7cc:	2101      	movs	r1, #1
    d7ce:	4630      	mov	r0, r6
    d7d0:	f7fb fad5 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    d7d4:	6060      	str	r0, [r4, #4]
        survey->nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_NRNG);
    d7d6:	210b      	movs	r1, #11
    d7d8:	4630      	mov	r0, r6
    d7da:	f7fb fad0 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    d7de:	60a0      	str	r0, [r4, #8]
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    d7e0:	2101      	movs	r1, #1
    d7e2:	f104 0084 	add.w	r0, r4, #132	; 0x84
    d7e6:	f7fc fc39 	bl	a05c <os_sem_init>
        assert(err == DPL_OK);
    d7ea:	2800      	cmp	r0, #0
    d7ec:	f43f af67 	beq.w	d6be <survey_init+0x26>
    d7f0:	2300      	movs	r3, #0
    d7f2:	461a      	mov	r2, r3
    d7f4:	4619      	mov	r1, r3
    d7f6:	4618      	mov	r0, r3
    d7f8:	f7fb fce4 	bl	91c4 <__assert_func>
        assert(survey);
    d7fc:	2300      	movs	r3, #0
    d7fe:	461a      	mov	r2, r3
    d800:	4619      	mov	r1, r3
    d802:	4618      	mov	r0, r3
    d804:	f7fb fcde 	bl	91c4 <__assert_func>
        assert(survey->nnodes == nnodes);
    d808:	2300      	movs	r3, #0
    d80a:	461a      	mov	r2, r3
    d80c:	4619      	mov	r1, r3
    d80e:	4618      	mov	r0, r3
    d810:	f7fb fcd8 	bl	91c4 <__assert_func>
    assert(rc == 0);
    d814:	2300      	movs	r3, #0
    d816:	461a      	mov	r2, r3
    d818:	4619      	mov	r1, r3
    d81a:	4618      	mov	r0, r3
    d81c:	f7fb fcd2 	bl	91c4 <__assert_func>
    assert(rc == 0);
    d820:	2300      	movs	r3, #0
    d822:	461a      	mov	r2, r3
    d824:	4619      	mov	r1, r3
    d826:	4618      	mov	r0, r3
    d828:	f7fb fccc 	bl	91c4 <__assert_func>
    d82c:	0000d56f 	.word	0x0000d56f
    d830:	0000d593 	.word	0x0000d593
    d834:	0000d53f 	.word	0x0000d53f
    d838:	0000d50f 	.word	0x0000d50f
    d83c:	0000d4e1 	.word	0x0000d4e1
    d840:	00026a58 	.word	0x00026a58
    d844:	00026a0c 	.word	0x00026a0c

0000d848 <survey_request>:
{
    d848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d84c:	b084      	sub	sp, #16
    d84e:	af04      	add	r7, sp, #16
    assert(survey);
    d850:	2800      	cmp	r0, #0
    d852:	d04e      	beq.n	d8f2 <survey_request+0xaa>
    d854:	4605      	mov	r5, r0
    uint16_t slot_id = survey->dev_inst->slot_id;
    d856:	6801      	ldr	r1, [r0, #0]
    d858:	f8b1 44c2 	ldrh.w	r4, [r1, #1218]	; 0x4c2
    STATS_INC(survey->stat, request);
    d85c:	6a01      	ldr	r1, [r0, #32]
    d85e:	3101      	adds	r1, #1
    d860:	6201      	str	r1, [r0, #32]
    uint32_t slot_mask = ~(~0UL << (survey->nnodes));
    d862:	f8b0 0096 	ldrh.w	r0, [r0, #150]	; 0x96
    d866:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d86a:	4081      	lsls	r1, r0
    d86c:	43c9      	mvns	r1, r1
    nrng_request_delay_start(survey->nrng, 0xffff, dx_time, UWB_DATA_CODE_SS_TWR_NRNG, slot_mask, 0);
    d86e:	f04f 0a00 	mov.w	sl, #0
    d872:	f8cd a008 	str.w	sl, [sp, #8]
    d876:	b289      	uxth	r1, r1
    d878:	9101      	str	r1, [sp, #4]
    d87a:	f44f 7198 	mov.w	r1, #304	; 0x130
    d87e:	9100      	str	r1, [sp, #0]
    d880:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d884:	68a8      	ldr	r0, [r5, #8]
    d886:	f7fe f812 	bl	b8ae <nrng_request_delay_start>
    survey_nrngs_t * nrngs = survey->nrngs[(survey->idx)%survey->nframes];
    d88a:	f8b5 309e 	ldrh.w	r3, [r5, #158]	; 0x9e
    d88e:	f8b5 209c 	ldrh.w	r2, [r5, #156]	; 0x9c
    d892:	fbb3 f1f2 	udiv	r1, r3, r2
    d896:	fb02 3311 	mls	r3, r2, r1, r3
    d89a:	b29b      	uxth	r3, r3
    d89c:	3328      	adds	r3, #40	; 0x28
    d89e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    dpl_float32_t range[survey->nnodes];
    d8a2:	f8b5 2096 	ldrh.w	r2, [r5, #150]	; 0x96
    d8a6:	0093      	lsls	r3, r2, #2
    d8a8:	3307      	adds	r3, #7
    d8aa:	08db      	lsrs	r3, r3, #3
    d8ac:	4669      	mov	r1, sp
    d8ae:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    d8b2:	469d      	mov	sp, r3
    d8b4:	f10d 0910 	add.w	r9, sp, #16
    uint16_t uid[survey->nnodes];
    d8b8:	0053      	lsls	r3, r2, #1
    d8ba:	3307      	adds	r3, #7
    d8bc:	08db      	lsrs	r3, r3, #3
    d8be:	4669      	mov	r1, sp
    d8c0:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
    d8c4:	469d      	mov	sp, r3
    d8c6:	f10d 0810 	add.w	r8, sp, #16
    nrngs->nrng[slot_id].mask = nrng_get_ranges(survey->nrng,
    d8ca:	68a8      	ldr	r0, [r5, #8]
    d8cc:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    d8d0:	4649      	mov	r1, r9
    d8d2:	f7fe f8c7 	bl	ba64 <nrng_get_ranges>
    d8d6:	2334      	movs	r3, #52	; 0x34
    d8d8:	fb03 6304 	mla	r3, r3, r4, r6
    d8dc:	8098      	strh	r0, [r3, #4]
    nrng_get_uids(survey->nrng,
    d8de:	68a8      	ldr	r0, [r5, #8]
    d8e0:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
    d8e4:	f8b5 2096 	ldrh.w	r2, [r5, #150]	; 0x96
    d8e8:	4641      	mov	r1, r8
    d8ea:	f7fe f928 	bl	bb3e <nrng_get_uids>
    for (uint16_t i = 0;i < survey->nnodes; i++){
    d8ee:	4653      	mov	r3, sl
    d8f0:	e01b      	b.n	d92a <survey_request+0xe2>
    assert(survey);
    d8f2:	2300      	movs	r3, #0
    d8f4:	461a      	mov	r2, r3
    d8f6:	4619      	mov	r1, r3
    d8f8:	4618      	mov	r0, r3
    d8fa:	f7fb fc63 	bl	91c4 <__assert_func>
        nrngs->nrng[slot_id].rng[i] = range[i];
    d8fe:	eb09 0283 	add.w	r2, r9, r3, lsl #2
    d902:	6811      	ldr	r1, [r2, #0]
    d904:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d908:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    d90c:	441a      	add	r2, r3
    d90e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    d912:	6091      	str	r1, [r2, #8]
        nrngs->nrng[slot_id].uid[i] = uid[i];
    d914:	f838 1013 	ldrh.w	r1, [r8, r3, lsl #1]
    d918:	221a      	movs	r2, #26
    d91a:	fb02 3204 	mla	r2, r2, r4, r3
    d91e:	3210      	adds	r2, #16
    d920:	eb06 0242 	add.w	r2, r6, r2, lsl #1
    d924:	8111      	strh	r1, [r2, #8]
    for (uint16_t i = 0;i < survey->nnodes; i++){
    d926:	3301      	adds	r3, #1
    d928:	b29b      	uxth	r3, r3
    d92a:	f8b5 2096 	ldrh.w	r2, [r5, #150]	; 0x96
    d92e:	4293      	cmp	r3, r2
    d930:	d3e5      	bcc.n	d8fe <survey_request+0xb6>
}
    d932:	f8b5 008c 	ldrh.w	r0, [r5, #140]	; 0x8c
    d936:	46bd      	mov	sp, r7
    d938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d93c <survey_listen>:
survey_listen(survey_instance_t * survey, uint64_t dx_time){
    d93c:	b510      	push	{r4, lr}
    assert(survey);
    d93e:	b1f0      	cbz	r0, d97e <survey_listen+0x42>
    d940:	4604      	mov	r4, r0
    STATS_INC(survey->stat, listen);
    d942:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d944:	3101      	adds	r1, #1
    d946:	6241      	str	r1, [r0, #36]	; 0x24
    uwb_set_delay_start(survey->dev_inst, dx_time);
    d948:	6800      	ldr	r0, [r0, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    d94a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d94c:	6b49      	ldr	r1, [r1, #52]	; 0x34
    d94e:	4788      	blx	r1
    uint16_t timeout = uwb_phy_frame_duration(survey->dev_inst, sizeof(nrng_request_frame_t))
    d950:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    d952:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    d956:	2113      	movs	r1, #19
    d958:	4798      	blx	r3
                        + survey->nrng->config.rx_timeout_delay;
    d95a:	68a3      	ldr	r3, [r4, #8]
    d95c:	f8b3 10bc 	ldrh.w	r1, [r3, #188]	; 0xbc
    uint16_t timeout = uwb_phy_frame_duration(survey->dev_inst, sizeof(nrng_request_frame_t))
    d960:	4401      	add	r1, r0
    d962:	b289      	uxth	r1, r1
    uwb_set_rx_timeout(survey->dev_inst, timeout + 0x1000);
    d964:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    d966:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d96a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    d96e:	4798      	blx	r3
    nrng_listen(survey->nrng, UWB_BLOCKING);
    d970:	2100      	movs	r1, #0
    d972:	68a0      	ldr	r0, [r4, #8]
    d974:	f7fd ffbc 	bl	b8f0 <nrng_listen>
}
    d978:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    d97c:	bd10      	pop	{r4, pc}
    assert(survey);
    d97e:	2300      	movs	r3, #0
    d980:	461a      	mov	r2, r3
    d982:	4619      	mov	r1, r3
    d984:	4618      	mov	r0, r3
    d986:	f7fb fc1d 	bl	91c4 <__assert_func>

0000d98a <survey_slot_range_cb>:
{
    d98a:	b510      	push	{r4, lr}
    assert(ev);
    d98c:	b330      	cbz	r0, d9dc <survey_slot_range_cb+0x52>
    return ev->ev.ev_arg;
    d98e:	6882      	ldr	r2, [r0, #8]
    assert(dpl_event_get_arg(ev));
    d990:	b352      	cbz	r2, d9e8 <survey_slot_range_cb+0x5e>
    tdma_instance_t * tdma = slot->parent;
    d992:	6890      	ldr	r0, [r2, #8]
    struct uwb_ccp_instance * ccp = tdma->ccp;
    d994:	6841      	ldr	r1, [r0, #4]
    survey_instance_t * survey = (survey_instance_t *)slot->arg;
    d996:	6b54      	ldr	r4, [r2, #52]	; 0x34
    survey->seq_num = (ccp->seq_num & ((uint32_t)~0UL << MYNEWT_VAL(SURVEY_MASK))) >> MYNEWT_VAL(SURVEY_MASK);
    d998:	f891 30f0 	ldrb.w	r3, [r1, #240]	; 0xf0
    d99c:	08db      	lsrs	r3, r3, #3
    d99e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    d9a2:	f891 30f0 	ldrb.w	r3, [r1, #240]	; 0xf0
    d9a6:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    d9aa:	fb93 fcf1 	sdiv	ip, r3, r1
    d9ae:	fb01 331c 	mls	r3, r1, ip, r3
    d9b2:	6801      	ldr	r1, [r0, #0]
    d9b4:	f8b1 14c2 	ldrh.w	r1, [r1, #1218]	; 0x4c2
    d9b8:	428b      	cmp	r3, r1
    d9ba:	d01b      	beq.n	d9f4 <survey_slot_range_cb+0x6a>
        uint64_t dx_time = tdma_rx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d9bc:	8813      	ldrh	r3, [r2, #0]
    d9be:	ee00 3a10 	vmov	s0, r3
    d9c2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    d9c6:	f000 fcac 	bl	e322 <tdma_rx_slot_start>
        survey_listen(survey, dx_time);
    d9ca:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    d9ce:	f022 0201 	bic.w	r2, r2, #1
    d9d2:	b2cb      	uxtb	r3, r1
    d9d4:	4620      	mov	r0, r4
    d9d6:	f7ff ffb1 	bl	d93c <survey_listen>
}
    d9da:	bd10      	pop	{r4, pc}
    assert(ev);
    d9dc:	2300      	movs	r3, #0
    d9de:	461a      	mov	r2, r3
    d9e0:	4619      	mov	r1, r3
    d9e2:	4618      	mov	r0, r3
    d9e4:	f7fb fbee 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    d9e8:	2300      	movs	r3, #0
    d9ea:	461a      	mov	r2, r3
    d9ec:	4619      	mov	r1, r3
    d9ee:	4618      	mov	r0, r3
    d9f0:	f7fb fbe8 	bl	91c4 <__assert_func>
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    d9f4:	8813      	ldrh	r3, [r2, #0]
    d9f6:	ee00 3a10 	vmov	s0, r3
    d9fa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    d9fe:	f000 fcbf 	bl	e380 <tdma_tx_slot_start>
        survey_request(survey, dx_time);
    da02:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    da06:	f022 0201 	bic.w	r2, r2, #1
    da0a:	b2cb      	uxtb	r3, r1
    da0c:	4620      	mov	r0, r4
    da0e:	f7ff ff1b 	bl	d848 <survey_request>
    da12:	e7e2      	b.n	d9da <survey_slot_range_cb+0x50>

0000da14 <survey_broadcaster>:
survey_broadcaster(survey_instance_t * survey, uint64_t dx_time){
    da14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert(survey);
    da18:	2800      	cmp	r0, #0
    da1a:	d07f      	beq.n	db1c <survey_broadcaster+0x108>
    da1c:	4690      	mov	r8, r2
    da1e:	461f      	mov	r7, r3
    da20:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    da22:	f100 0984 	add.w	r9, r0, #132	; 0x84
    da26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    da2a:	4648      	mov	r0, r9
    da2c:	f7fc fb50 	bl	a0d0 <os_sem_pend>
    assert(err == DPL_OK);
    da30:	2800      	cmp	r0, #0
    da32:	d179      	bne.n	db28 <survey_broadcaster+0x114>
    STATS_INC(survey->stat, broadcaster);
    da34:	6b63      	ldr	r3, [r4, #52]	; 0x34
    da36:	3301      	adds	r3, #1
    da38:	6363      	str	r3, [r4, #52]	; 0x34
    struct uwb_dev * inst = survey->dev_inst;
    da3a:	6826      	ldr	r6, [r4, #0]
    survey_nrngs_t * nrngs = survey->nrngs[survey->idx%survey->nframes];
    da3c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    da40:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    da44:	fbb3 f1f2 	udiv	r1, r3, r2
    da48:	fb02 3311 	mls	r3, r2, r1, r3
    da4c:	b29b      	uxth	r3, r3
    da4e:	3328      	adds	r3, #40	; 0x28
    da50:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    survey->frame->mask = nrngs->nrng[inst->slot_id].mask;
    da54:	f8b6 14c2 	ldrh.w	r1, [r6, #1218]	; 0x4c2
    da58:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    da5c:	2034      	movs	r0, #52	; 0x34
    da5e:	fb00 3301 	mla	r3, r0, r1, r3
    da62:	889b      	ldrh	r3, [r3, #4]
    da64:	f8a2 300f 	strh.w	r3, [r2, #15]
    survey->frame->seq_num = survey->seq_num;
    da68:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    da6c:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
    da70:	709a      	strb	r2, [r3, #2]
    survey->frame->slot_id = inst->slot_id;
    da72:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    da76:	f8b6 24c2 	ldrh.w	r2, [r6, #1218]	; 0x4c2
    da7a:	f8a3 200b 	strh.w	r2, [r3, #11]
    uint16_t nnodes = NumberOfBits(survey->frame->mask);
    da7e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    da82:	f8b3 000f 	ldrh.w	r0, [r3, #15]
    da86:	f002 fb53 	bl	10130 <NumberOfBits>
    da8a:	b280      	uxth	r0, r0
    survey->status.empty = nnodes == 0;
    da8c:	fab0 f380 	clz	r3, r0
    da90:	095b      	lsrs	r3, r3, #5
    da92:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    da96:	f363 1245 	bfi	r2, r3, #5, #1
    da9a:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
    if (survey->status.empty){
    da9e:	b2d3      	uxtb	r3, r2
    daa0:	f013 0f20 	tst.w	r3, #32
    daa4:	d146      	bne.n	db34 <survey_broadcaster+0x120>
    assert(nnodes < survey->nnodes);
    daa6:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    daaa:	4283      	cmp	r3, r0
    daac:	d94f      	bls.n	db4e <survey_broadcaster+0x13a>
        + nnodes * sizeof(uint16_t);
    daae:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    dab2:	006d      	lsls	r5, r5, #1
    dab4:	b2ad      	uxth	r5, r5
    uint16_t n = sizeof(struct _survey_broadcast_frame_t)
    dab6:	3545      	adds	r5, #69	; 0x45
    dab8:	b2ad      	uxth	r5, r5
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    daba:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dabc:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
    dac0:	462b      	mov	r3, r5
    dac2:	2200      	movs	r2, #0
    dac4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
    dac8:	4630      	mov	r0, r6
    daca:	47d0      	blx	sl
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    dacc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dace:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
    dad2:	2300      	movs	r3, #0
    dad4:	461a      	mov	r2, r3
    dad6:	4629      	mov	r1, r5
    dad8:	4630      	mov	r0, r6
    dada:	47d0      	blx	sl
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    dadc:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dade:	6b59      	ldr	r1, [r3, #52]	; 0x34
    dae0:	4642      	mov	r2, r8
    dae2:	463b      	mov	r3, r7
    dae4:	4630      	mov	r0, r6
    dae6:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
    dae8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    daea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    daec:	4630      	mov	r0, r6
    daee:	4798      	blx	r3
    survey->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    daf0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    daf4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    daf8:	f360 1304 	bfi	r3, r0, #4, #1
    dafc:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if (survey->status.start_tx_error){
    db00:	b2db      	uxtb	r3, r3
    db02:	f013 0f10 	tst.w	r3, #16
    db06:	d02c      	beq.n	db62 <survey_broadcaster+0x14e>
        STATS_INC(survey->stat, start_tx_error);
    db08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    db0a:	3301      	adds	r3, #1
    db0c:	62e3      	str	r3, [r4, #44]	; 0x2c
    db0e:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
        if (dpl_sem_get_count(&survey->sem) == 0)
    db12:	b313      	cbz	r3, db5a <survey_broadcaster+0x146>
    return survey->status;
    db14:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
}
    db18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(survey);
    db1c:	2300      	movs	r3, #0
    db1e:	461a      	mov	r2, r3
    db20:	4619      	mov	r1, r3
    db22:	4618      	mov	r0, r3
    db24:	f7fb fb4e 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    db28:	2300      	movs	r3, #0
    db2a:	461a      	mov	r2, r3
    db2c:	4619      	mov	r1, r3
    db2e:	4618      	mov	r0, r3
    db30:	f7fb fb48 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
    db34:	4648      	mov	r0, r9
    db36:	f7fc fa99 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    db3a:	b910      	cbnz	r0, db42 <survey_broadcaster+0x12e>
        return survey->status;
    db3c:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    db40:	e7ea      	b.n	db18 <survey_broadcaster+0x104>
        assert(err == DPL_OK);
    db42:	2300      	movs	r3, #0
    db44:	461a      	mov	r2, r3
    db46:	4619      	mov	r1, r3
    db48:	4618      	mov	r0, r3
    db4a:	f7fb fb3b 	bl	91c4 <__assert_func>
    assert(nnodes < survey->nnodes);
    db4e:	2300      	movs	r3, #0
    db50:	461a      	mov	r2, r3
    db52:	4619      	mov	r1, r3
    db54:	4618      	mov	r0, r3
    db56:	f7fb fb35 	bl	91c4 <__assert_func>
    db5a:	4648      	mov	r0, r9
    db5c:	f7fc fa86 	bl	a06c <os_sem_release>
    db60:	e7d8      	b.n	db14 <survey_broadcaster+0x100>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    db62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    db66:	4648      	mov	r0, r9
    db68:	f7fc fab2 	bl	a0d0 <os_sem_pend>
        assert(err == DPL_OK);
    db6c:	b950      	cbnz	r0, db84 <survey_broadcaster+0x170>
    return (dpl_error_t)os_sem_release(&sem->sem);
    db6e:	4648      	mov	r0, r9
    db70:	f7fc fa7c 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    db74:	2800      	cmp	r0, #0
    db76:	d0cd      	beq.n	db14 <survey_broadcaster+0x100>
    db78:	2300      	movs	r3, #0
    db7a:	461a      	mov	r2, r3
    db7c:	4619      	mov	r1, r3
    db7e:	4618      	mov	r0, r3
    db80:	f7fb fb20 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    db84:	2300      	movs	r3, #0
    db86:	461a      	mov	r2, r3
    db88:	4619      	mov	r1, r3
    db8a:	4618      	mov	r0, r3
    db8c:	f7fb fb1a 	bl	91c4 <__assert_func>

0000db90 <survey_receiver>:
survey_receiver(survey_instance_t * survey, uint64_t dx_time){
    db90:	b570      	push	{r4, r5, r6, lr}
    assert(survey);
    db92:	2800      	cmp	r0, #0
    db94:	d033      	beq.n	dbfe <survey_receiver+0x6e>
    db96:	4604      	mov	r4, r0
    struct uwb_dev * inst = survey->dev_inst;
    db98:	4606      	mov	r6, r0
    db9a:	f856 5b84 	ldr.w	r5, [r6], #132
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    db9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dba2:	4630      	mov	r0, r6
    dba4:	f7fc fa94 	bl	a0d0 <os_sem_pend>
    assert(err == DPL_OK);
    dba8:	bb78      	cbnz	r0, dc0a <survey_receiver+0x7a>
    STATS_INC(survey->stat, receiver);
    dbaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dbac:	3301      	adds	r3, #1
    dbae:	63a3      	str	r3, [r4, #56]	; 0x38
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    dbb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    dbb4:	2177      	movs	r1, #119	; 0x77
    dbb6:	4628      	mov	r0, r5
    dbb8:	4798      	blx	r3
                        + survey->config.rx_timeout_delay;
    dbba:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    uint16_t timeout = uwb_phy_frame_duration(inst, n)
    dbbe:	4401      	add	r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    dbc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dbc4:	b289      	uxth	r1, r1
    dbc6:	4628      	mov	r0, r5
    dbc8:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_rx(dev));
    dbca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    dbce:	4628      	mov	r0, r5
    dbd0:	4798      	blx	r3
    survey->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    dbd2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dbd6:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    dbda:	f360 03c3 	bfi	r3, r0, #3, #1
    dbde:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    if(survey->status.start_rx_error){
    dbe2:	b2db      	uxtb	r3, r3
    dbe4:	f013 0f08 	tst.w	r3, #8
    dbe8:	d01b      	beq.n	dc22 <survey_receiver+0x92>
        STATS_INC(survey->stat, start_rx_error);
    dbea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dbec:	3301      	adds	r3, #1
    dbee:	6323      	str	r3, [r4, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
    dbf0:	4630      	mov	r0, r6
    dbf2:	f7fc fa3b 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    dbf6:	b970      	cbnz	r0, dc16 <survey_receiver+0x86>
}
    dbf8:	f8b4 008c 	ldrh.w	r0, [r4, #140]	; 0x8c
    dbfc:	bd70      	pop	{r4, r5, r6, pc}
    assert(survey);
    dbfe:	2300      	movs	r3, #0
    dc00:	461a      	mov	r2, r3
    dc02:	4619      	mov	r1, r3
    dc04:	4618      	mov	r0, r3
    dc06:	f7fb fadd 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    dc0a:	2300      	movs	r3, #0
    dc0c:	461a      	mov	r2, r3
    dc0e:	4619      	mov	r1, r3
    dc10:	4618      	mov	r0, r3
    dc12:	f7fb fad7 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    dc16:	2300      	movs	r3, #0
    dc18:	461a      	mov	r2, r3
    dc1a:	4619      	mov	r1, r3
    dc1c:	4618      	mov	r0, r3
    dc1e:	f7fb fad1 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    dc22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dc26:	4630      	mov	r0, r6
    dc28:	f7fc fa52 	bl	a0d0 <os_sem_pend>
        assert(err == DPL_OK);
    dc2c:	b950      	cbnz	r0, dc44 <survey_receiver+0xb4>
    return (dpl_error_t)os_sem_release(&sem->sem);
    dc2e:	4630      	mov	r0, r6
    dc30:	f7fc fa1c 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    dc34:	2800      	cmp	r0, #0
    dc36:	d0df      	beq.n	dbf8 <survey_receiver+0x68>
    dc38:	2300      	movs	r3, #0
    dc3a:	461a      	mov	r2, r3
    dc3c:	4619      	mov	r1, r3
    dc3e:	4618      	mov	r0, r3
    dc40:	f7fb fac0 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    dc44:	2300      	movs	r3, #0
    dc46:	461a      	mov	r2, r3
    dc48:	4619      	mov	r1, r3
    dc4a:	4618      	mov	r0, r3
    dc4c:	f7fb faba 	bl	91c4 <__assert_func>

0000dc50 <survey_slot_broadcast_cb>:
{
    dc50:	b538      	push	{r3, r4, r5, lr}
    assert(ev);
    dc52:	b388      	cbz	r0, dcb8 <survey_slot_broadcast_cb+0x68>
    return ev->ev.ev_arg;
    dc54:	6882      	ldr	r2, [r0, #8]
    assert(dpl_event_get_arg(ev));
    dc56:	b3aa      	cbz	r2, dcc4 <survey_slot_broadcast_cb+0x74>
    tdma_instance_t * tdma = slot->parent;
    dc58:	6890      	ldr	r0, [r2, #8]
    struct uwb_ccp_instance * ccp = tdma->ccp;
    dc5a:	6845      	ldr	r5, [r0, #4]
    survey_instance_t * survey = (survey_instance_t *)slot->arg;
    dc5c:	6b54      	ldr	r4, [r2, #52]	; 0x34
    survey->seq_num = (ccp->seq_num & ((uint32_t)~0UL << MYNEWT_VAL(SURVEY_MASK))) >> MYNEWT_VAL(SURVEY_MASK);
    dc5e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
    dc62:	08db      	lsrs	r3, r3, #3
    dc64:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
    if(ccp->seq_num % survey->nnodes == tdma->dev_inst->slot_id){
    dc68:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
    dc6c:	f8b4 1096 	ldrh.w	r1, [r4, #150]	; 0x96
    dc70:	fb93 fcf1 	sdiv	ip, r3, r1
    dc74:	fb01 331c 	mls	r3, r1, ip, r3
    dc78:	6801      	ldr	r1, [r0, #0]
    dc7a:	f8b1 14c2 	ldrh.w	r1, [r1, #1218]	; 0x4c2
    dc7e:	428b      	cmp	r3, r1
    dc80:	d026      	beq.n	dcd0 <survey_slot_broadcast_cb+0x80>
        uint64_t dx_time = tdma_rx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    dc82:	8813      	ldrh	r3, [r2, #0]
    dc84:	ee00 3a10 	vmov	s0, r3
    dc88:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    dc8c:	f000 fb49 	bl	e322 <tdma_rx_slot_start>
        survey_receiver(survey, dx_time);
    dc90:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    dc94:	f022 0201 	bic.w	r2, r2, #1
    dc98:	b2cb      	uxtb	r3, r1
    dc9a:	4620      	mov	r0, r4
    dc9c:	f7ff ff78 	bl	db90 <survey_receiver>
    if((ccp->seq_num % survey->nnodes == survey->nnodes - 1) && survey->survey_complete_cb){
    dca0:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
    dca4:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    dca8:	fb92 f1f3 	sdiv	r1, r2, r3
    dcac:	fb03 2211 	mls	r2, r3, r1, r2
    dcb0:	3b01      	subs	r3, #1
    dcb2:	429a      	cmp	r2, r3
    dcb4:	d01c      	beq.n	dcf0 <survey_slot_broadcast_cb+0xa0>
}
    dcb6:	bd38      	pop	{r3, r4, r5, pc}
    assert(ev);
    dcb8:	2300      	movs	r3, #0
    dcba:	461a      	mov	r2, r3
    dcbc:	4619      	mov	r1, r3
    dcbe:	4618      	mov	r0, r3
    dcc0:	f7fb fa80 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    dcc4:	2300      	movs	r3, #0
    dcc6:	461a      	mov	r2, r3
    dcc8:	4619      	mov	r1, r3
    dcca:	4618      	mov	r0, r3
    dccc:	f7fb fa7a 	bl	91c4 <__assert_func>
        uint64_t dx_time = tdma_tx_slot_start(tdma, slot->idx) & 0xFFFFFFFE00UL;
    dcd0:	8813      	ldrh	r3, [r2, #0]
    dcd2:	ee00 3a10 	vmov	s0, r3
    dcd6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    dcda:	f000 fb51 	bl	e380 <tdma_tx_slot_start>
        survey_broadcaster(survey, dx_time);
    dcde:	f420 72ff 	bic.w	r2, r0, #510	; 0x1fe
    dce2:	f022 0201 	bic.w	r2, r2, #1
    dce6:	b2cb      	uxtb	r3, r1
    dce8:	4620      	mov	r0, r4
    dcea:	f7ff fe93 	bl	da14 <survey_broadcaster>
    dcee:	e7d7      	b.n	dca0 <survey_slot_broadcast_cb+0x50>
    if((ccp->seq_num % survey->nnodes == survey->nnodes - 1) && survey->survey_complete_cb){
    dcf0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    dcf4:	2a00      	cmp	r2, #0
    dcf6:	d0de      	beq.n	dcb6 <survey_slot_broadcast_cb+0x66>
    memset(ev, 0, sizeof(*ev));
    dcf8:	4d06      	ldr	r5, [pc, #24]	; (dd14 <survey_slot_broadcast_cb+0xc4>)
    dcfa:	2300      	movs	r3, #0
    dcfc:	602b      	str	r3, [r5, #0]
    dcfe:	606b      	str	r3, [r5, #4]
    dd00:	60ab      	str	r3, [r5, #8]
    dd02:	60eb      	str	r3, [r5, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    dd04:	606a      	str	r2, [r5, #4]
    ev->ev.ev_arg = arg;
    dd06:	60ac      	str	r4, [r5, #8]
    return (struct dpl_eventq *) os_eventq_dflt_get();
    dd08:	f7fb fe3e 	bl	9988 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    dd0c:	4629      	mov	r1, r5
    dd0e:	f7fb fd8d 	bl	982c <os_eventq_put>
}
    dd12:	e7d0      	b.n	dcb6 <survey_slot_broadcast_cb+0x66>
    dd14:	20003ffc 	.word	0x20003ffc

0000dd18 <survey_pkg_init>:
 *
 * @return void
 */
void
survey_pkg_init(void)
{
    dd18:	b508      	push	{r3, lr}
#if MYNEWT_VAL(SURVEY_ENABLED)
    printf("{\"utime\": %lu,\"msg\": \"survey_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
    dd1a:	f7fb fc9d 	bl	9658 <os_cputime_get32>
    dd1e:	4601      	mov	r1, r0
    dd20:	4805      	ldr	r0, [pc, #20]	; (dd38 <survey_pkg_init+0x20>)
    dd22:	f003 f8c3 	bl	10eac <printf>

#if MYNEWT_VAL(UWB_DEVICE_0)
    survey_init(uwb_dev_idx_lookup(0), MYNEWT_VAL(SURVEY_NNODES), MYNEWT_VAL(SURVEY_NFRAMES));
    dd26:	2000      	movs	r0, #0
    dd28:	f7fa ffa4 	bl	8c74 <uwb_dev_idx_lookup>
    dd2c:	2202      	movs	r2, #2
    dd2e:	2108      	movs	r1, #8
    dd30:	f7ff fcb2 	bl	d698 <survey_init>
#endif
#endif // MYNEWT_VAL(SURVEY_ENABLED)
}
    dd34:	bd08      	pop	{r3, pc}
    dd36:	bf00      	nop
    dd38:	00026a14 	.word	0x00026a14

0000dd3c <survey_encode>:
 * @param survey survey_instance_t point
 * @param seq_num survey
 * @return none.
 */
void
survey_encode(survey_instance_t * survey, uint16_t seq, uint16_t idx){
    dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd40:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
    dd44:	4680      	mov	r8, r0
    dd46:	468b      	mov	fp, r1
    dd48:	4614      	mov	r4, r2

    uint32_t utime = os_cputime_ticks_to_usecs(os_cputime_get32());
    dd4a:	f7fb fc85 	bl	9658 <os_cputime_get32>
    dd4e:	9001      	str	r0, [sp, #4]
    survey_nrngs_t * nrngs = survey->nrngs[idx%survey->nframes];
    dd50:	f8b8 209c 	ldrh.w	r2, [r8, #156]	; 0x9c
    dd54:	fbb4 f3f2 	udiv	r3, r4, r2
    dd58:	fb02 4413 	mls	r4, r2, r3, r4
    dd5c:	b2a4      	uxth	r4, r4
    dd5e:	3428      	adds	r4, #40	; 0x28
    dd60:	f858 7024 	ldr.w	r7, [r8, r4, lsl #2]

    uint16_t mask = 0;
    // Workout which node responded to the request
    for (uint16_t i=0; i < survey->nnodes; i++){
    dd64:	2300      	movs	r3, #0
    uint16_t mask = 0;
    dd66:	4618      	mov	r0, r3
    for (uint16_t i=0; i < survey->nnodes; i++){
    dd68:	e001      	b.n	dd6e <survey_encode+0x32>
    dd6a:	3301      	adds	r3, #1
    dd6c:	b29b      	uxth	r3, r3
    dd6e:	f8b8 2096 	ldrh.w	r2, [r8, #150]	; 0x96
    dd72:	429a      	cmp	r2, r3
    dd74:	d90a      	bls.n	dd8c <survey_encode+0x50>
        if (nrngs->nrng[i].mask){
    dd76:	2234      	movs	r2, #52	; 0x34
    dd78:	fb02 7203 	mla	r2, r2, r3, r7
    dd7c:	8892      	ldrh	r2, [r2, #4]
    dd7e:	2a00      	cmp	r2, #0
    dd80:	d0f3      	beq.n	dd6a <survey_encode+0x2e>
                mask |= 1UL << i;
    dd82:	2201      	movs	r2, #1
    dd84:	409a      	lsls	r2, r3
    dd86:	4310      	orrs	r0, r2
    dd88:	b280      	uxth	r0, r0
    dd8a:	e7ee      	b.n	dd6a <survey_encode+0x2e>
        }
    }

    survey->status.empty = NumberOfBits(mask) == 0;
    dd8c:	f002 f9d0 	bl	10130 <NumberOfBits>
    dd90:	fab0 f080 	clz	r0, r0
    dd94:	0940      	lsrs	r0, r0, #5
    dd96:	f898 308c 	ldrb.w	r3, [r8, #140]	; 0x8c
    dd9a:	f360 1345 	bfi	r3, r0, #5, #1
    dd9e:	f888 308c 	strb.w	r3, [r8, #140]	; 0x8c
    if (survey->status.empty)
    dda2:	b2db      	uxtb	r3, r3
    dda4:	f013 0f20 	tst.w	r3, #32
    dda8:	d159      	bne.n	de5e <survey_encode+0x122>
       return;

    for (uint16_t i=0; i < survey->nnodes; i++){
    ddaa:	2500      	movs	r5, #0
    ddac:	e030      	b.n	de10 <survey_encode+0xd4>
                .utime = utime,
                .seq = seq,
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
                };
            for (uint16_t j=0; j < json.nsize; j++){
                json.rng[j] = nrngs->nrng[i].rng[j];
    ddae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    ddb2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    ddb6:	4423      	add	r3, r4
    ddb8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    ddbc:	6898      	ldr	r0, [r3, #8]
    ddbe:	f016 fc23 	bl	24608 <__aeabi_f2d>
    ddc2:	f104 0318 	add.w	r3, r4, #24
    ddc6:	aa02      	add	r2, sp, #8
    ddc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ddcc:	e9c3 0100 	strd	r0, r1, [r3]
                json.ouid[j] = nrngs->nrng[i].uid[j];
    ddd0:	231a      	movs	r3, #26
    ddd2:	fb03 4306 	mla	r3, r3, r6, r4
    ddd6:	3310      	adds	r3, #16
    ddd8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    dddc:	8919      	ldrh	r1, [r3, #8]
    ddde:	f104 0310 	add.w	r3, r4, #16
    dde2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    dde6:	a802      	add	r0, sp, #8
    dde8:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
    ddec:	2300      	movs	r3, #0
    ddee:	6053      	str	r3, [r2, #4]
            for (uint16_t j=0; j < json.nsize; j++){
    ddf0:	3401      	adds	r4, #1
    ddf2:	b2a4      	uxth	r4, r4
    ddf4:	4554      	cmp	r4, sl
    ddf6:	f04f 0300 	mov.w	r3, #0
    ddfa:	eb73 0309 	sbcs.w	r3, r3, r9
    ddfe:	d3d6      	bcc.n	ddae <survey_encode+0x72>
            }
            nrng_json_write(&json);
    de00:	a802      	add	r0, sp, #8
    de02:	f7fd ffd7 	bl	bdb4 <nrng_json_write>
            printf("%s\n", json.iobuf);
    de06:	a844      	add	r0, sp, #272	; 0x110
    de08:	f002 fb1e 	bl	10448 <puts>
    for (uint16_t i=0; i < survey->nnodes; i++){
    de0c:	3501      	adds	r5, #1
    de0e:	b2ad      	uxth	r5, r5
    de10:	f8b8 3096 	ldrh.w	r3, [r8, #150]	; 0x96
    de14:	42ab      	cmp	r3, r5
    de16:	d922      	bls.n	de5e <survey_encode+0x122>
        if (nrngs->nrng[i].mask){
    de18:	462e      	mov	r6, r5
    de1a:	2334      	movs	r3, #52	; 0x34
    de1c:	fb03 7305 	mla	r3, r3, r5, r7
    de20:	889b      	ldrh	r3, [r3, #4]
    de22:	2b00      	cmp	r3, #0
    de24:	d0f2      	beq.n	de0c <survey_encode+0xd0>
            nrng_json_t json={
    de26:	f44f 7244 	mov.w	r2, #784	; 0x310
    de2a:	2100      	movs	r1, #0
    de2c:	a802      	add	r0, sp, #8
    de2e:	f002 fc24 	bl	1067a <memset>
    de32:	f04f 0900 	mov.w	r9, #0
    de36:	9b01      	ldr	r3, [sp, #4]
    de38:	931c      	str	r3, [sp, #112]	; 0x70
    de3a:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
    de3e:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
    de42:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
                .nsize = NumberOfBits(nrngs->nrng[i].mask)
    de46:	2334      	movs	r3, #52	; 0x34
    de48:	fb03 7305 	mla	r3, r3, r5, r7
    de4c:	8898      	ldrh	r0, [r3, #4]
    de4e:	f002 f96f 	bl	10130 <NumberOfBits>
    de52:	4682      	mov	sl, r0
            nrng_json_t json={
    de54:	9042      	str	r0, [sp, #264]	; 0x108
    de56:	f8cd 910c 	str.w	r9, [sp, #268]	; 0x10c
            for (uint16_t j=0; j < json.nsize; j++){
    de5a:	464c      	mov	r4, r9
    de5c:	e7ca      	b.n	ddf4 <survey_encode+0xb8>
        }
    }
}
    de5e:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
    de62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000de68 <tdma_superframe_slot_cb>:
 *
 * @return void
 */
static void
tdma_superframe_slot_cb(struct dpl_event * ev)
{
    de68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t slot_period_us;
    struct _tdma_slot_t *slot;
    tdma_instance_t * tdma;
    struct uwb_ccp_instance * ccp;
    assert(ev != NULL);
    de6c:	b170      	cbz	r0, de8c <tdma_superframe_slot_cb+0x24>
    return ev->ev.ev_arg;
    de6e:	6886      	ldr	r6, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
    de70:	b196      	cbz	r6, de98 <tdma_superframe_slot_cb+0x30>

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"tdma_superframe_slot_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    slot = (struct _tdma_slot_t *) dpl_event_get_arg(ev);
    tdma = slot->parent;
    de72:	68b5      	ldr	r5, [r6, #8]
    ccp = tdma->ccp;
    de74:	f8d5 8004 	ldr.w	r8, [r5, #4]

    TDMA_STATS_INC(superframe_cnt);
    de78:	6a2b      	ldr	r3, [r5, #32]
    de7a:	3301      	adds	r3, #1
    de7c:	622b      	str	r3, [r5, #32]

    /* Make sure all timers are stopped */
    dpl_cputime_timer_stop(&slot->timer);
    de7e:	f106 070c 	add.w	r7, r6, #12
    de82:	4638      	mov	r0, r7
    de84:	f004 fd1d 	bl	128c2 <dpl_cputime_timer_stop>
    for (i = 0; i < tdma->nslots; i++) {
    de88:	2400      	movs	r4, #0
    de8a:	e00d      	b.n	dea8 <tdma_superframe_slot_cb+0x40>
    assert(ev != NULL);
    de8c:	2300      	movs	r3, #0
    de8e:	461a      	mov	r2, r3
    de90:	4619      	mov	r1, r3
    de92:	4618      	mov	r0, r3
    de94:	f7fb f996 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
    de98:	2300      	movs	r3, #0
    de9a:	461a      	mov	r2, r3
    de9c:	4619      	mov	r1, r3
    de9e:	4618      	mov	r0, r3
    dea0:	f7fb f990 	bl	91c4 <__assert_func>
    for (i = 0; i < tdma->nslots; i++) {
    dea4:	3401      	adds	r4, #1
    dea6:	b2a4      	uxth	r4, r4
    dea8:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    deac:	42a3      	cmp	r3, r4
    deae:	d909      	bls.n	dec4 <tdma_superframe_slot_cb+0x5c>
        if (tdma->slot[i]){
    deb0:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    deb4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    deb8:	2800      	cmp	r0, #0
    deba:	d0f3      	beq.n	dea4 <tdma_superframe_slot_cb+0x3c>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    debc:	300c      	adds	r0, #12
    debe:	f004 fd00 	bl	128c2 <dpl_cputime_timer_stop>
    dec2:	e7ef      	b.n	dea4 <tdma_superframe_slot_cb+0x3c>
        }
    }
#if __KERNEL__
    slot_period_us = uwb_dwt_usecs_to_usecs(div64_s64(ccp->period, tdma->nslots));
#else
    slot_period_us = uwb_dwt_usecs_to_usecs(ccp->period / tdma->nslots);
    dec4:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    dec8:	fbb0 f0f3 	udiv	r0, r0, r3
    decc:	f016 fb7a 	bl	245c4 <__aeabi_ui2d>
    ded0:	a31d      	add	r3, pc, #116	; (adr r3, df48 <tdma_superframe_slot_cb+0xe0>)
    ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ded6:	f016 fbef 	bl	246b8 <__aeabi_dmul>
    deda:	f016 fec5 	bl	24c68 <__aeabi_d2uiz>
    dede:	4681      	mov	r9, r0
#endif
    for (i = 0; i < tdma->nslots; i++) {
    dee0:	2400      	movs	r4, #0
    dee2:	e001      	b.n	dee8 <tdma_superframe_slot_cb+0x80>
    dee4:	3401      	adds	r4, #1
    dee6:	b2a4      	uxth	r4, r4
    dee8:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    deec:	42a3      	cmp	r3, r4
    deee:	d914      	bls.n	df1a <tdma_superframe_slot_cb+0xb2>
        if (tdma->slot[i]){
    def0:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    def4:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    def8:	2a00      	cmp	r2, #0
    defa:	d0f3      	beq.n	dee4 <tdma_superframe_slot_cb+0x7c>
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    defc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
                + dpl_cputime_usecs_to_ticks((uint32_t) (i * slot_period_us) - MYNEWT_VAL(OS_LATENCY));
    defe:	fb09 3304 	mla	r3, r9, r4, r3
    df02:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
            tdma->slot[i]->cputime_slot_start = tdma->os_epoch
    df06:	6053      	str	r3, [r2, #4]
            hal_timer_start_at(&tdma->slot[i]->timer, tdma->slot[i]->cputime_slot_start);
    df08:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    df0c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    df10:	6841      	ldr	r1, [r0, #4]
    df12:	300c      	adds	r0, #12
    df14:	f011 f8aa 	bl	1f06c <hal_timer_start_at>
    df18:	e7e4      	b.n	dee4 <tdma_superframe_slot_cb+0x7c>
        }
    }

    /* Next superframe slot estimate */
    slot->cputime_slot_start = tdma->os_epoch
    df1a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
        + dpl_cputime_usecs_to_ticks(
    df1c:	f8d8 00e8 	ldr.w	r0, [r8, #232]	; 0xe8
    df20:	f016 fb50 	bl	245c4 <__aeabi_ui2d>
    df24:	a308      	add	r3, pc, #32	; (adr r3, df48 <tdma_superframe_slot_cb+0xe0>)
    df26:	e9d3 2300 	ldrd	r2, r3, [r3]
    df2a:	f016 fbc5 	bl	246b8 <__aeabi_dmul>
    df2e:	f016 fe9b 	bl	24c68 <__aeabi_d2uiz>
    df32:	eb00 0109 	add.w	r1, r0, r9
    df36:	4421      	add	r1, r4
    slot->cputime_slot_start = tdma->os_epoch
    df38:	6071      	str	r1, [r6, #4]
            (uint32_t)uwb_dwt_usecs_to_usecs(ccp->period) + slot_period_us);
    hal_timer_start_at(&slot->timer, slot->cputime_slot_start);
    df3a:	4638      	mov	r0, r7
    df3c:	f011 f896 	bl	1f06c <hal_timer_start_at>
}
    df40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df44:	f3af 8000 	nop.w
    df48:	90690691 	.word	0x90690691
    df4c:	3ff06906 	.word	0x3ff06906

0000df50 <slot_timer_cb>:
 *
 * @return void
 */
static void
slot_timer_cb(void * arg)
{
    df50:	b508      	push	{r3, lr}
    assert(arg);
    df52:	b168      	cbz	r0, df70 <slot_timer_cb+0x20>
    df54:	4601      	mov	r1, r0
    tdma_slot_t * slot = (tdma_slot_t *) arg;
    /* No point in continuing if this slot is NULL */
    if (slot == NULL) {
        return;
    }
    tdma_instance_t * tdma = slot->parent;
    df56:	6880      	ldr	r0, [r0, #8]

    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"slot_timer_cb\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));

    TDMA_STATS_INC(slot_timer_cnt);
    df58:	69c3      	ldr	r3, [r0, #28]
    df5a:	3301      	adds	r3, #1
    df5c:	61c3      	str	r3, [r0, #28]

    if (slot == &tdma->superframe_slot) {
    df5e:	f100 0380 	add.w	r3, r0, #128	; 0x80
    df62:	428b      	cmp	r3, r1
    df64:	d00a      	beq.n	df7c <slot_timer_cb+0x2c>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    df66:	3124      	adds	r1, #36	; 0x24
    df68:	30b8      	adds	r0, #184	; 0xb8
    df6a:	f7fb fc5f 	bl	982c <os_eventq_put>
#ifdef TDMA_TASKS_ENABLE
    dpl_eventq_put(&tdma->eventq, &slot->event);
#else
    dpl_eventq_put(&tdma->dev_inst->eventq, &slot->event);
#endif
}
    df6e:	bd08      	pop	{r3, pc}
    assert(arg);
    df70:	2300      	movs	r3, #0
    df72:	461a      	mov	r2, r3
    df74:	4619      	mov	r1, r3
    df76:	4618      	mov	r0, r3
    df78:	f7fb f924 	bl	91c4 <__assert_func>
        TDMA_STATS_INC(superframe_miss);
    df7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    df7e:	3301      	adds	r3, #1
    df80:	6243      	str	r3, [r0, #36]	; 0x24
        return;
    df82:	e7f4      	b.n	df6e <slot_timer_cb+0x1e>

0000df84 <superframe_cb>:
    tdma_instance_t * tdma = (tdma_instance_t*)cbs->inst_ptr;
    df84:	6848      	ldr	r0, [r1, #4]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    df86:	6842      	ldr	r2, [r0, #4]
    if (!tdma) {
    df88:	b180      	cbz	r0, dfac <superframe_cb+0x28>
{
    df8a:	b508      	push	{r3, lr}
    if (tdma->status.initialized) {
    df8c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    df90:	f013 0f02 	tst.w	r3, #2
    df94:	d101      	bne.n	df9a <superframe_cb+0x16>
}
    df96:	2000      	movs	r0, #0
    df98:	bd08      	pop	{r3, pc}
        tdma->os_epoch = ccp->os_epoch;
    df9a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
    df9e:	67c3      	str	r3, [r0, #124]	; 0x7c
    dfa0:	f100 01a4 	add.w	r1, r0, #164	; 0xa4
    dfa4:	30b8      	adds	r0, #184	; 0xb8
    dfa6:	f7fb fc41 	bl	982c <os_eventq_put>
}
    dfaa:	e7f4      	b.n	df96 <superframe_cb+0x12>
}
    dfac:	2000      	movs	r0, #0
    dfae:	4770      	bx	lr

0000dfb0 <tdma_task>:
{
    dfb0:	b570      	push	{r4, r5, r6, lr}
    dfb2:	4605      	mov	r5, r0
    tdma_instance_t * tdma = arg;
    dfb4:	e001      	b.n	dfba <tdma_task+0xa>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    dfb6:	6843      	ldr	r3, [r0, #4]
    dfb8:	4798      	blx	r3
    return (struct dpl_event *) os_eventq_get((struct os_eventq *) evq);
    dfba:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
    dfbe:	f7fb fc76 	bl	98ae <os_eventq_get>
    dfc2:	4604      	mov	r4, r0
    return (struct dpl_event*)&co->co.c_ev;
    dfc4:	f505 63a4 	add.w	r3, r5, #1312	; 0x520
        if (ev == dpl_callout_get_event(&tdma->sanity_cb)) {
    dfc8:	4298      	cmp	r0, r3
    dfca:	d0f4      	beq.n	dfb6 <tdma_task+0x6>
    return ev->ev.ev_arg;
    dfcc:	6886      	ldr	r6, [r0, #8]
        ticks = dpl_cputime_get32();
    dfce:	f004 fc7c 	bl	128ca <dpl_cputime_get32>
        delay = dpl_cputime_ticks_to_usecs(ticks - slot->cputime_slot_start);
    dfd2:	6873      	ldr	r3, [r6, #4]
    dfd4:	1ac0      	subs	r0, r0, r3
        if (slot->idx!=0 && delay > MYNEWT_VAL(TDMA_MAX_SLOT_DELAY_US)) {
    dfd6:	8833      	ldrh	r3, [r6, #0]
    dfd8:	b133      	cbz	r3, dfe8 <tdma_task+0x38>
    dfda:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    dfde:	d903      	bls.n	dfe8 <tdma_task+0x38>
            TDMA_STATS_INC(dropped_slots);
    dfe0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dfe2:	3301      	adds	r3, #1
    dfe4:	62ab      	str	r3, [r5, #40]	; 0x28
    dfe6:	e7e8      	b.n	dfba <tdma_task+0xa>
    return ((struct os_event*)ev)->ev_cb((struct os_event*)ev);
    dfe8:	6863      	ldr	r3, [r4, #4]
    dfea:	4620      	mov	r0, r4
    dfec:	4798      	blx	r3
    dfee:	e7e4      	b.n	dfba <tdma_task+0xa>

0000dff0 <tdma_tasks_init>:
{
    dff0:	b530      	push	{r4, r5, lr}
    dff2:	b085      	sub	sp, #20
    dff4:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    dff6:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
    return os_eventq_inited((struct os_eventq *) evq);
    dffa:	4628      	mov	r0, r5
    dffc:	f7fb fc11 	bl	9822 <os_eventq_inited>
    e000:	b170      	cbz	r0, e020 <tdma_tasks_init+0x30>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    e002:	f504 65a4 	add.w	r5, r4, #1312	; 0x520
    e006:	4623      	mov	r3, r4
    e008:	4a11      	ldr	r2, [pc, #68]	; (e050 <tdma_tasks_init+0x60>)
    e00a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e00e:	4628      	mov	r0, r5
    e010:	f7fb fa5e 	bl	94d0 <os_callout_init>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    e014:	2180      	movs	r1, #128	; 0x80
    e016:	4628      	mov	r0, r5
    e018:	f7fb fa86 	bl	9528 <os_callout_reset>
}
    e01c:	b005      	add	sp, #20
    e01e:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    e020:	4628      	mov	r0, r5
    e022:	f7fb fbf5 	bl	9810 <os_eventq_init>
        dpl_task_init(&inst->task_str, "tdma",
    e026:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
                      inst->task_stack,
    e02a:	f504 7290 	add.w	r2, r4, #288	; 0x120
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    e02e:	f44f 7180 	mov.w	r1, #256	; 0x100
    e032:	9103      	str	r1, [sp, #12]
    e034:	9202      	str	r2, [sp, #8]
    e036:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    e03a:	9201      	str	r2, [sp, #4]
    e03c:	9300      	str	r3, [sp, #0]
    e03e:	4623      	mov	r3, r4
    e040:	4a04      	ldr	r2, [pc, #16]	; (e054 <tdma_tasks_init+0x64>)
    e042:	4905      	ldr	r1, [pc, #20]	; (e058 <tdma_tasks_init+0x68>)
    e044:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    e048:	f7fc f8a8 	bl	a19c <os_task_init>
    e04c:	e7d9      	b.n	e002 <tdma_tasks_init+0x12>
    e04e:	bf00      	nop
    e050:	0000e05d 	.word	0x0000e05d
    e054:	0000dfb1 	.word	0x0000dfb1
    e058:	00026a90 	.word	0x00026a90

0000e05c <sanity_feeding_cb>:
{
    e05c:	b510      	push	{r4, lr}
    assert(ev != NULL);
    e05e:	b150      	cbz	r0, e076 <sanity_feeding_cb+0x1a>
    return ev->ev.ev_arg;
    e060:	6884      	ldr	r4, [r0, #8]
    assert(tdma);
    e062:	b174      	cbz	r4, e082 <sanity_feeding_cb+0x26>
    os_sanity_task_checkin(0);
    e064:	2000      	movs	r0, #0
    e066:	f7fb fe31 	bl	9ccc <os_sanity_task_checkin>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    e06a:	2180      	movs	r1, #128	; 0x80
    e06c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
    e070:	f7fb fa5a 	bl	9528 <os_callout_reset>
}
    e074:	bd10      	pop	{r4, pc}
    assert(ev != NULL);
    e076:	2300      	movs	r3, #0
    e078:	461a      	mov	r2, r3
    e07a:	4619      	mov	r1, r3
    e07c:	4618      	mov	r0, r3
    e07e:	f7fb f8a1 	bl	91c4 <__assert_func>
    assert(tdma);
    e082:	2300      	movs	r3, #0
    e084:	461a      	mov	r2, r3
    e086:	4619      	mov	r1, r3
    e088:	4618      	mov	r0, r3
    e08a:	f7fb f89b 	bl	91c4 <__assert_func>
	...

0000e090 <tdma_init>:
{
    e090:	b570      	push	{r4, r5, r6, lr}
    e092:	b082      	sub	sp, #8
    assert(dev);
    e094:	2800      	cmp	r0, #0
    e096:	d057      	beq.n	e148 <tdma_init+0xb8>
    e098:	460d      	mov	r5, r1
    e09a:	4606      	mov	r6, r0
    tdma_instance_t * tdma = (tdma_instance_t*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_TDMA);
    e09c:	2103      	movs	r1, #3
    e09e:	f7fa fe6e 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (tdma == NULL) {
    e0a2:	4604      	mov	r4, r0
    e0a4:	2800      	cmp	r0, #0
    e0a6:	d055      	beq.n	e154 <tdma_init+0xc4>
    tdma->cbs = (struct uwb_mac_interface){
    e0a8:	f104 0530 	add.w	r5, r4, #48	; 0x30
    e0ac:	223c      	movs	r2, #60	; 0x3c
    e0ae:	2100      	movs	r1, #0
    e0b0:	4628      	mov	r0, r5
    e0b2:	f002 fae2 	bl	1067a <memset>
    e0b6:	2303      	movs	r3, #3
    e0b8:	8663      	strh	r3, [r4, #50]	; 0x32
    e0ba:	6364      	str	r4, [r4, #52]	; 0x34
    e0bc:	4b42      	ldr	r3, [pc, #264]	; (e1c8 <tdma_init+0x138>)
    e0be:	6663      	str	r3, [r4, #100]	; 0x64
    uwb_mac_append_interface(dev, &tdma->cbs);
    e0c0:	4629      	mov	r1, r5
    e0c2:	4630      	mov	r0, r6
    e0c4:	f7fa fe06 	bl	8cd4 <uwb_mac_append_interface>
    tdma->ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    e0c8:	2101      	movs	r1, #1
    e0ca:	4630      	mov	r0, r6
    e0cc:	f7fa fe57 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    e0d0:	6060      	str	r0, [r4, #4]
    assert(tdma->ccp);
    e0d2:	2800      	cmp	r0, #0
    e0d4:	d065      	beq.n	e1a2 <tdma_init+0x112>
    int rc = stats_init(
    e0d6:	f104 0508 	add.w	r5, r4, #8
    e0da:	2104      	movs	r1, #4
    e0dc:	9100      	str	r1, [sp, #0]
    e0de:	4b3b      	ldr	r3, [pc, #236]	; (e1cc <tdma_init+0x13c>)
    e0e0:	460a      	mov	r2, r1
    e0e2:	4628      	mov	r0, r5
    e0e4:	f008 f82e 	bl	16144 <stats_init>
    assert(rc == 0);
    e0e8:	2800      	cmp	r0, #0
    e0ea:	d160      	bne.n	e1ae <tdma_init+0x11e>
    rc = stats_register("tdma", STATS_HDR(tdma->stat));
    e0ec:	4629      	mov	r1, r5
    e0ee:	4838      	ldr	r0, [pc, #224]	; (e1d0 <tdma_init+0x140>)
    e0f0:	f008 f8ac 	bl	1624c <stats_register>
    assert(rc == 0);
    e0f4:	2800      	cmp	r0, #0
    e0f6:	d160      	bne.n	e1ba <tdma_init+0x12a>
    tdma->superframe_slot.parent = tdma;
    e0f8:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
    tdma->superframe_slot.idx = 0;
    e0fc:	2500      	movs	r5, #0
    e0fe:	4626      	mov	r6, r4
    e100:	f826 5f80 	strh.w	r5, [r6, #128]!
    dpl_cputime_timer_init(&tdma->superframe_slot.timer, slot_timer_cb, (void *) &tdma->superframe_slot);
    e104:	4632      	mov	r2, r6
    e106:	4933      	ldr	r1, [pc, #204]	; (e1d4 <tdma_init+0x144>)
    e108:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    e10c:	f004 fbbe 	bl	1288c <dpl_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
    e110:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    e114:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    e118:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    e11c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    ev->ev.ev_cb = (os_event_fn *)fn;
    e120:	4b2d      	ldr	r3, [pc, #180]	; (e1d8 <tdma_init+0x148>)
    e122:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ev->ev.ev_arg = arg;
    e126:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
    tdma->status.initialized = true;
    e12a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e12e:	f043 0302 	orr.w	r3, r3, #2
    e132:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    tdma->os_epoch = dpl_cputime_get32();
    e136:	f004 fbc8 	bl	128ca <dpl_cputime_get32>
    e13a:	67e0      	str	r0, [r4, #124]	; 0x7c
    tdma_tasks_init(tdma);
    e13c:	4620      	mov	r0, r4
    e13e:	f7ff ff57 	bl	dff0 <tdma_tasks_init>
}
    e142:	4620      	mov	r0, r4
    e144:	b002      	add	sp, #8
    e146:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);
    e148:	2300      	movs	r3, #0
    e14a:	461a      	mov	r2, r3
    e14c:	4619      	mov	r1, r3
    e14e:	4618      	mov	r0, r3
    e150:	f7fb f838 	bl	91c4 <__assert_func>
        tdma = (tdma_instance_t *) calloc(1, sizeof(struct _tdma_instance_t) + nslots * sizeof(struct _tdma_slot_t *));
    e154:	f505 71a8 	add.w	r1, r5, #336	; 0x150
    e158:	0089      	lsls	r1, r1, #2
    e15a:	2001      	movs	r0, #1
    e15c:	f002 f94b 	bl	103f6 <calloc>
        assert(tdma);
    e160:	4604      	mov	r4, r0
    e162:	b190      	cbz	r0, e18a <tdma_init+0xfa>
        tdma->status.selfmalloc = 1;
    e164:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e168:	f043 0301 	orr.w	r3, r3, #1
    e16c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    return (dpl_error_t)os_mutex_init(&mu->mu);
    e170:	306c      	adds	r0, #108	; 0x6c
    e172:	f7fc fd67 	bl	ac44 <os_mutex_init>
        assert(err == DPL_OK);
    e176:	b970      	cbnz	r0, e196 <tdma_init+0x106>
        tdma->nslots = nslots;
    e178:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
        tdma->dev_inst = dev;
    e17c:	6026      	str	r6, [r4, #0]
        tdma->task_prio = dev->task_prio + 0x6;
    e17e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
    e182:	3306      	adds	r3, #6
    e184:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    e188:	e78e      	b.n	e0a8 <tdma_init+0x18>
        assert(tdma);
    e18a:	2300      	movs	r3, #0
    e18c:	461a      	mov	r2, r3
    e18e:	4619      	mov	r1, r3
    e190:	4618      	mov	r0, r3
    e192:	f7fb f817 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    e196:	2300      	movs	r3, #0
    e198:	461a      	mov	r2, r3
    e19a:	4619      	mov	r1, r3
    e19c:	4618      	mov	r0, r3
    e19e:	f7fb f811 	bl	91c4 <__assert_func>
    assert(tdma->ccp);
    e1a2:	2300      	movs	r3, #0
    e1a4:	461a      	mov	r2, r3
    e1a6:	4619      	mov	r1, r3
    e1a8:	4618      	mov	r0, r3
    e1aa:	f7fb f80b 	bl	91c4 <__assert_func>
    assert(rc == 0);
    e1ae:	2300      	movs	r3, #0
    e1b0:	461a      	mov	r2, r3
    e1b2:	4619      	mov	r1, r3
    e1b4:	4618      	mov	r0, r3
    e1b6:	f7fb f805 	bl	91c4 <__assert_func>
    assert(rc == 0);
    e1ba:	2300      	movs	r3, #0
    e1bc:	461a      	mov	r2, r3
    e1be:	4619      	mov	r1, r3
    e1c0:	4618      	mov	r0, r3
    e1c2:	f7fa ffff 	bl	91c4 <__assert_func>
    e1c6:	bf00      	nop
    e1c8:	0000df85 	.word	0x0000df85
    e1cc:	00026b28 	.word	0x00026b28
    e1d0:	00026a90 	.word	0x00026a90
    e1d4:	0000df51 	.word	0x0000df51
    e1d8:	0000de69 	.word	0x0000de69

0000e1dc <tdma_assign_slot>:
{
    e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1de:	4615      	mov	r5, r2
    assert(idx < inst->nslots);
    e1e0:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    e1e4:	42aa      	cmp	r2, r5
    e1e6:	d92c      	bls.n	e242 <tdma_assign_slot+0x66>
    e1e8:	4604      	mov	r4, r0
    e1ea:	460e      	mov	r6, r1
    e1ec:	461f      	mov	r7, r3
    if (inst->status.initialized == false)
    e1ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e1f2:	f013 0f02 	tst.w	r3, #2
    e1f6:	d023      	beq.n	e240 <tdma_assign_slot+0x64>
    if (inst->slot[idx] == NULL){
    e1f8:	f505 73a8 	add.w	r3, r5, #336	; 0x150
    e1fc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e200:	b328      	cbz	r0, e24e <tdma_assign_slot+0x72>
        memset(inst->slot[idx], 0, sizeof(struct _tdma_slot_t));
    e202:	2238      	movs	r2, #56	; 0x38
    e204:	2100      	movs	r1, #0
    e206:	f002 fa38 	bl	1067a <memset>
    inst->slot[idx]->idx = idx;
    e20a:	f505 72a8 	add.w	r2, r5, #336	; 0x150
    e20e:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    e212:	801d      	strh	r5, [r3, #0]
    inst->slot[idx]->parent = inst;
    e214:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    e218:	609c      	str	r4, [r3, #8]
    inst->slot[idx]->arg = arg;
    e21a:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    e21e:	635f      	str	r7, [r3, #52]	; 0x34
    dpl_event_init(&inst->slot[idx]->event, call_back, (void *) inst->slot[idx]);
    e220:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    memset(ev, 0, sizeof(*ev));
    e224:	2100      	movs	r1, #0
    e226:	6259      	str	r1, [r3, #36]	; 0x24
    e228:	6299      	str	r1, [r3, #40]	; 0x28
    e22a:	62d9      	str	r1, [r3, #44]	; 0x2c
    e22c:	6319      	str	r1, [r3, #48]	; 0x30
    ev->ev.ev_cb = (os_event_fn *)fn;
    e22e:	629e      	str	r6, [r3, #40]	; 0x28
    ev->ev.ev_arg = arg;
    e230:	62db      	str	r3, [r3, #44]	; 0x2c
    dpl_cputime_timer_init(&inst->slot[idx]->timer, slot_timer_cb, (void *) inst->slot[idx]);
    e232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    e236:	490e      	ldr	r1, [pc, #56]	; (e270 <tdma_assign_slot+0x94>)
    e238:	f102 000c 	add.w	r0, r2, #12
    e23c:	f004 fb26 	bl	1288c <dpl_cputime_timer_init>
}
    e240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(idx < inst->nslots);
    e242:	2300      	movs	r3, #0
    e244:	461a      	mov	r2, r3
    e246:	4619      	mov	r1, r3
    e248:	4618      	mov	r0, r3
    e24a:	f7fa ffbb 	bl	91c4 <__assert_func>
        inst->slot[idx] = (tdma_slot_t  *) calloc(1, sizeof(struct _tdma_slot_t));
    e24e:	2138      	movs	r1, #56	; 0x38
    e250:	2001      	movs	r0, #1
    e252:	f002 f8d0 	bl	103f6 <calloc>
    e256:	f505 73a8 	add.w	r3, r5, #336	; 0x150
    e25a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
        assert(inst->slot[idx]);
    e25e:	2800      	cmp	r0, #0
    e260:	d1d3      	bne.n	e20a <tdma_assign_slot+0x2e>
    e262:	2300      	movs	r3, #0
    e264:	461a      	mov	r2, r3
    e266:	4619      	mov	r1, r3
    e268:	4618      	mov	r0, r3
    e26a:	f7fa ffab 	bl	91c4 <__assert_func>
    e26e:	bf00      	nop
    e270:	0000df51 	.word	0x0000df51

0000e274 <tdma_release_slot>:
{
    e274:	b538      	push	{r3, r4, r5, lr}
    assert(idx < inst->nslots);
    e276:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
    e27a:	428b      	cmp	r3, r1
    e27c:	d913      	bls.n	e2a6 <tdma_release_slot+0x32>
    e27e:	4605      	mov	r5, r0
    e280:	460c      	mov	r4, r1
    if (inst->slot[idx]) {
    e282:	f501 73a8 	add.w	r3, r1, #336	; 0x150
    e286:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    e28a:	b158      	cbz	r0, e2a4 <tdma_release_slot+0x30>
        dpl_cputime_timer_stop(&inst->slot[idx]->timer);
    e28c:	300c      	adds	r0, #12
    e28e:	f004 fb18 	bl	128c2 <dpl_cputime_timer_stop>
        free(inst->slot[idx]);
    e292:	f504 74a8 	add.w	r4, r4, #336	; 0x150
    e296:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    e29a:	f002 f9a7 	bl	105ec <free>
        inst->slot[idx] =  NULL;
    e29e:	2300      	movs	r3, #0
    e2a0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
    e2a4:	bd38      	pop	{r3, r4, r5, pc}
    assert(idx < inst->nslots);
    e2a6:	2300      	movs	r3, #0
    e2a8:	461a      	mov	r2, r3
    e2aa:	4619      	mov	r1, r3
    e2ac:	4618      	mov	r0, r3
    e2ae:	f7fa ff89 	bl	91c4 <__assert_func>

0000e2b2 <tdma_stop>:
 *
 * @return void
 */
void
tdma_stop(struct _tdma_instance_t * tdma)
{
    e2b2:	b538      	push	{r3, r4, r5, lr}
    e2b4:	4605      	mov	r5, r0
    uint16_t i;
    for (i = 0; i < tdma->nslots; i++) {
    e2b6:	2400      	movs	r4, #0
    e2b8:	e001      	b.n	e2be <tdma_stop+0xc>
    e2ba:	3401      	adds	r4, #1
    e2bc:	b2a4      	uxth	r4, r4
    e2be:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
    e2c2:	42a3      	cmp	r3, r4
    e2c4:	d90d      	bls.n	e2e2 <tdma_stop+0x30>
        if (tdma->slot[i]){
    e2c6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    e2ca:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    e2ce:	2800      	cmp	r0, #0
    e2d0:	d0f3      	beq.n	e2ba <tdma_stop+0x8>
            dpl_cputime_timer_stop(&tdma->slot[i]->timer);
    e2d2:	300c      	adds	r0, #12
    e2d4:	f004 faf5 	bl	128c2 <dpl_cputime_timer_stop>
            tdma_release_slot(tdma, i);
    e2d8:	4621      	mov	r1, r4
    e2da:	4628      	mov	r0, r5
    e2dc:	f7ff ffca 	bl	e274 <tdma_release_slot>
    e2e0:	e7eb      	b.n	e2ba <tdma_stop+0x8>
        }
    }
}
    e2e2:	bd38      	pop	{r3, r4, r5, pc}

0000e2e4 <tdma_free>:
{
    e2e4:	b510      	push	{r4, lr}
    assert(inst);
    e2e6:	b190      	cbz	r0, e30e <tdma_free+0x2a>
    e2e8:	4604      	mov	r4, r0
    tdma_stop(inst);
    e2ea:	f7ff ffe2 	bl	e2b2 <tdma_stop>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    e2ee:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    e2f0:	6820      	ldr	r0, [r4, #0]
    e2f2:	f7fa fd14 	bl	8d1e <uwb_mac_remove_interface>
    if (inst->status.selfmalloc)
    e2f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e2fa:	f013 0f01 	tst.w	r3, #1
    e2fe:	d10c      	bne.n	e31a <tdma_free+0x36>
        inst->status.initialized = 0;
    e300:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e304:	f36f 0341 	bfc	r3, #1, #1
    e308:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
    e30c:	bd10      	pop	{r4, pc}
    assert(inst);
    e30e:	2300      	movs	r3, #0
    e310:	461a      	mov	r2, r3
    e312:	4619      	mov	r1, r3
    e314:	4618      	mov	r0, r3
    e316:	f7fa ff55 	bl	91c4 <__assert_func>
        free(inst);
    e31a:	4620      	mov	r0, r4
    e31c:	f002 f966 	bl	105ec <free>
    e320:	e7f4      	b.n	e30c <tdma_free+0x28>

0000e322 <tdma_rx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start
 */
uint64_t
tdma_rx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    e322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e326:	ee10 8a10 	vmov	r8, s0
    uint64_t dx_time, slot_offset;
    dpl_float64_t slot_period;
    struct uwb_ccp_instance * ccp = tdma->ccp;
    e32a:	6845      	ldr	r5, [r0, #4]
    uint64_t rx_stable = tdma->dev_inst->config.rx.timeToRxStable;
    e32c:	6803      	ldr	r3, [r0, #0]
    e32e:	f893 451b 	ldrb.w	r4, [r3, #1307]	; 0x51b
#if __KERNEL__
    slot_period = DPL_FLOAT64_U64_TO_F64(div64_s64(((uint64_t)ccp->period << 16), tdma->nslots));
#else
    slot_period = DPL_FLOAT64_U64_TO_F64((((uint64_t)ccp->period << 16) / tdma->nslots));
    e332:	f8d5 10e8 	ldr.w	r1, [r5, #232]	; 0xe8
    e336:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    e33a:	2300      	movs	r3, #0
    e33c:	0408      	lsls	r0, r1, #16
    e33e:	0c09      	lsrs	r1, r1, #16
    e340:	f016 fe60 	bl	25004 <__aeabi_uldivmod>
    e344:	f016 f982 	bl	2464c <__aeabi_ul2d>
    e348:	4606      	mov	r6, r0
    e34a:	460f      	mov	r7, r1
#endif
    slot_offset = DPL_FLOAT64_INT(DPL_FLOAT64_MUL(DPL_FLOAT64_FROM_F32(idx), slot_period));
    e34c:	4640      	mov	r0, r8
    e34e:	f016 f95b 	bl	24608 <__aeabi_f2d>
    e352:	4632      	mov	r2, r6
    e354:	463b      	mov	r3, r7
    e356:	f016 f9af 	bl	246b8 <__aeabi_dmul>
    e35a:	f016 fe6b 	bl	25034 <__aeabi_d2lz>
    /* Compensate for the time it takes to turn on the receiver */
    slot_offset -= (rx_stable << 16);
    e35e:	0422      	lsls	r2, r4, #16
    e360:	1a82      	subs	r2, r0, r2

#if MYNEWT_VAL(UWB_WCS_ENABLED)
    {
        struct uwb_wcs_instance * wcs = ccp->wcs;
        dx_time = ccp->local_epoch + (uint64_t) uwb_wcs_dtu_time_adjust(wcs, slot_offset);
    e362:	f8d5 40d8 	ldr.w	r4, [r5, #216]	; 0xd8
    e366:	f8d5 60dc 	ldr.w	r6, [r5, #220]	; 0xdc
    e36a:	f161 0300 	sbc.w	r3, r1, #0
    e36e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    e370:	f001 ff70 	bl	10254 <uwb_wcs_dtu_time_adjust>
    e374:	1820      	adds	r0, r4, r0
    }
#else
    dx_time = ccp->local_epoch + slot_offset;
#endif
    return dx_time;
}
    e376:	eb46 0101 	adc.w	r1, r6, r1
    e37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000e380 <tdma_tx_slot_start>:
 *
 * @return dx_time   The time for a rx operation to start (dtu)
 */
uint64_t
tdma_tx_slot_start(struct _tdma_instance_t * tdma, dpl_float32_t idx)
{
    e380:	b570      	push	{r4, r5, r6, lr}
    e382:	4606      	mov	r6, r0
    uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
    e384:	f7ff ffcd 	bl	e322 <tdma_rx_slot_start>
    e388:	4604      	mov	r4, r0
    e38a:	460d      	mov	r5, r1
#ifndef __KERNEL__
    dx_time = (dx_time + ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
    e38c:	6830      	ldr	r0, [r6, #0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    e38e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e394:	4798      	blx	r3
    e396:	f016 f925 	bl	245e4 <__aeabi_i2d>
    e39a:	a30b      	add	r3, pc, #44	; (adr r3, e3c8 <tdma_tx_slot_start+0x48>)
    e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3a0:	f016 fab4 	bl	2490c <__aeabi_ddiv>
    e3a4:	f016 fc80 	bl	24ca8 <__aeabi_d2f>
    e3a8:	ee00 0a10 	vmov	s0, r0
    e3ac:	f017 f80c 	bl	253c8 <ceilf>
    e3b0:	ee10 0a10 	vmov	r0, s0
    e3b4:	f016 fe56 	bl	25064 <__aeabi_f2ulz>
    e3b8:	0409      	lsls	r1, r1, #16
    e3ba:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    e3be:	0403      	lsls	r3, r0, #16
    e3c0:	1918      	adds	r0, r3, r4
#else
    dx_time = (dx_time + ((uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(tdma->dev_inst))) << 16));
#endif
    return dx_time;
}
    e3c2:	eb41 0105 	adc.w	r1, r1, r5
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
    e3c8:	90690691 	.word	0x90690691
    e3cc:	3ff06906 	.word	0x3ff06906

0000e3d0 <tdma_pkg_init>:
 *
 * @return void
 */
void
tdma_pkg_init(void)
{
    e3d0:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_init\"}\n",
    e3d2:	f004 fa7a 	bl	128ca <dpl_cputime_get32>
    e3d6:	4601      	mov	r1, r0
    e3d8:	4808      	ldr	r0, [pc, #32]	; (e3fc <tdma_pkg_init+0x2c>)
    e3da:	f002 fd67 	bl	10eac <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e3de:	2400      	movs	r4, #0
    e3e0:	e000      	b.n	e3e4 <tdma_pkg_init+0x14>
    e3e2:	3401      	adds	r4, #1
    e3e4:	2c02      	cmp	r4, #2
    e3e6:	dc08      	bgt.n	e3fa <tdma_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    e3e8:	4620      	mov	r0, r4
    e3ea:	f7fa fc43 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    e3ee:	2800      	cmp	r0, #0
    e3f0:	d0f7      	beq.n	e3e2 <tdma_pkg_init+0x12>
            continue;
        }
        tdma_init(udev, MYNEWT_VAL(TDMA_NSLOTS));
    e3f2:	21a0      	movs	r1, #160	; 0xa0
    e3f4:	f7ff fe4c 	bl	e090 <tdma_init>
    e3f8:	e7f3      	b.n	e3e2 <tdma_pkg_init+0x12>
    }
}
    e3fa:	bd10      	pop	{r4, pc}
    e3fc:	00026a98 	.word	0x00026a98

0000e400 <tdma_pkg_down>:
 *
 * @return void
 */
int
tdma_pkg_down(int reason)
{
    e400:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct _tdma_instance_t * tdma;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"tdma_pkg_down\"}\n",
    e402:	f004 fa62 	bl	128ca <dpl_cputime_get32>
    e406:	4601      	mov	r1, r0
    e408:	480b      	ldr	r0, [pc, #44]	; (e438 <tdma_pkg_down+0x38>)
    e40a:	f002 fd4f 	bl	10eac <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    e40e:	2400      	movs	r4, #0
    e410:	e000      	b.n	e414 <tdma_pkg_down+0x14>
    e412:	3401      	adds	r4, #1
    e414:	2c02      	cmp	r4, #2
    e416:	dc0c      	bgt.n	e432 <tdma_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
    e418:	4620      	mov	r0, r4
    e41a:	f7fa fc2b 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    e41e:	2800      	cmp	r0, #0
    e420:	d0f7      	beq.n	e412 <tdma_pkg_down+0x12>
            continue;
        }
        tdma = (struct _tdma_instance_t*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_TDMA);
    e422:	2103      	movs	r1, #3
    e424:	f7fa fcab 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!tdma) {
    e428:	2800      	cmp	r0, #0
    e42a:	d0f2      	beq.n	e412 <tdma_pkg_down+0x12>
            continue;
        }
        tdma_free(tdma);
    e42c:	f7ff ff5a 	bl	e2e4 <tdma_free>
    e430:	e7ef      	b.n	e412 <tdma_pkg_down+0x12>
    }
    return 0;
}
    e432:	2000      	movs	r0, #0
    e434:	bd10      	pop	{r4, pc}
    e436:	bf00      	nop
    e438:	00026ac0 	.word	0x00026ac0
    e43c:	00000000 	.word	0x00000000

0000e440 <adjust_for_epoch_to_rm>:
}
#endif

static void
adjust_for_epoch_to_rm(struct uwb_ccp_instance * ccp, uint16_t epoch_to_rm_us)
{
    e440:	b5d0      	push	{r4, r6, r7, lr}
    e442:	4604      	mov	r4, r0
    e444:	4608      	mov	r0, r1
    ccp->master_epoch.timestamp -= ((uint64_t)epoch_to_rm_us << 16);
    e446:	040a      	lsls	r2, r1, #16
    e448:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    e44c:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
    e450:	1a9b      	subs	r3, r3, r2
    e452:	f161 0100 	sbc.w	r1, r1, #0
    e456:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    e45a:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
    ccp->local_epoch -= ((uint64_t)epoch_to_rm_us << 16);
    e45e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    e462:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    e466:	1a9b      	subs	r3, r3, r2
    e468:	f161 0100 	sbc.w	r1, r1, #0
    e46c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    e470:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(epoch_to_rm_us));
    e474:	f016 f8b6 	bl	245e4 <__aeabi_i2d>
    e478:	a309      	add	r3, pc, #36	; (adr r3, e4a0 <adjust_for_epoch_to_rm+0x60>)
    e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e47e:	f016 f91b 	bl	246b8 <__aeabi_dmul>
    e482:	4606      	mov	r6, r0
    e484:	460f      	mov	r7, r1
    e486:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e48a:	f016 f89b 	bl	245c4 <__aeabi_ui2d>
    e48e:	4632      	mov	r2, r6
    e490:	463b      	mov	r3, r7
    e492:	f015 ff59 	bl	24348 <__aeabi_dsub>
    e496:	f016 fbe7 	bl	24c68 <__aeabi_d2uiz>
    e49a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
}
    e49e:	bdd0      	pop	{r4, r6, r7, pc}
    e4a0:	90690691 	.word	0x90690691
    e4a4:	3ff06906 	.word	0x3ff06906

0000e4a8 <reset_cb>:
 *
 * @return void
 */
static bool
reset_cb(struct uwb_dev *inst, struct uwb_mac_interface * cbs)
{
    e4a8:	b510      	push	{r4, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e4aa:	684c      	ldr	r4, [r1, #4]
    e4ac:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e4b0:	b10b      	cbz	r3, e4b6 <reset_cb+0xe>
        dpl_error_t err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
        CCP_STATS_INC(reset);
        return true;
    }
    return false;   // CCP is an observer and should not return true
    e4b2:	2000      	movs	r0, #0
}
    e4b4:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
    e4b6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e4ba:	f7fb fdd7 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    e4be:	b920      	cbnz	r0, e4ca <reset_cb+0x22>
        CCP_STATS_INC(reset);
    e4c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e4c2:	3301      	adds	r3, #1
    e4c4:	6663      	str	r3, [r4, #100]	; 0x64
        return true;
    e4c6:	2001      	movs	r0, #1
    e4c8:	e7f4      	b.n	e4b4 <reset_cb+0xc>
        assert(err == DPL_OK);
    e4ca:	2300      	movs	r3, #0
    e4cc:	461a      	mov	r2, r3
    e4ce:	4619      	mov	r1, r3
    e4d0:	4618      	mov	r0, r3
    e4d2:	f7fa fe77 	bl	91c4 <__assert_func>

0000e4d6 <error_cb>:
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e4d6:	6848      	ldr	r0, [r1, #4]
    e4d8:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e4dc:	2a01      	cmp	r2, #1
    e4de:	d020      	beq.n	e522 <error_cb+0x4c>
{
    e4e0:	b508      	push	{r3, lr}
    CCP_STATS_INC(txrx_error);
    e4e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    e4e4:	3301      	adds	r3, #1
    e4e6:	6403      	str	r3, [r0, #64]	; 0x40
    if(dpl_sem_get_count(&ccp->sem) == 0) {
    e4e8:	b9ea      	cbnz	r2, e526 <error_cb+0x50>
        if (ccp->config.role != CCP_ROLE_MASTER) {
    e4ea:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
    e4ee:	f013 0f1e 	tst.w	r3, #30
    e4f2:	d00a      	beq.n	e50a <error_cb+0x34>
            ccp->status.rx_error = 1;
    e4f4:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e4f8:	f043 0301 	orr.w	r3, r3, #1
    e4fc:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
            ccp->missed_frames++;
    e500:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    e504:	3301      	adds	r3, #1
    e506:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
    e50a:	30b0      	adds	r0, #176	; 0xb0
    e50c:	f7fb fdae 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    e510:	b908      	cbnz	r0, e516 <error_cb+0x40>
    return true;
    e512:	2001      	movs	r0, #1
    e514:	e008      	b.n	e528 <error_cb+0x52>
        assert(err == DPL_OK);
    e516:	2300      	movs	r3, #0
    e518:	461a      	mov	r2, r3
    e51a:	4619      	mov	r1, r3
    e51c:	4618      	mov	r0, r3
    e51e:	f7fa fe51 	bl	91c4 <__assert_func>
        return false;
    e522:	2000      	movs	r0, #0
}
    e524:	4770      	bx	lr
    return true;
    e526:	2001      	movs	r0, #1
}
    e528:	bd08      	pop	{r3, pc}

0000e52a <rx_timeout_cb>:
{
    e52a:	b508      	push	{r3, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e52c:	6848      	ldr	r0, [r1, #4]
    e52e:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e532:	2b01      	cmp	r3, #1
    e534:	d01c      	beq.n	e570 <rx_timeout_cb+0x46>
    if (dpl_sem_get_count(&ccp->sem) == 0){
    e536:	b10b      	cbz	r3, e53c <rx_timeout_cb+0x12>
    return true;
    e538:	2001      	movs	r0, #1
}
    e53a:	bd08      	pop	{r3, pc}
        ccp->status.rx_timeout_error = 1;
    e53c:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e540:	f043 0302 	orr.w	r3, r3, #2
    e544:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
        ccp->missed_frames++;
    e548:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
    e54c:	3301      	adds	r3, #1
    e54e:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
        CCP_STATS_INC(rx_timeout);
    e552:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    e554:	3301      	adds	r3, #1
    e556:	65c3      	str	r3, [r0, #92]	; 0x5c
    e558:	30b0      	adds	r0, #176	; 0xb0
    e55a:	f7fb fd87 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    e55e:	b908      	cbnz	r0, e564 <rx_timeout_cb+0x3a>
    return true;
    e560:	2001      	movs	r0, #1
    e562:	e7ea      	b.n	e53a <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
    e564:	2300      	movs	r3, #0
    e566:	461a      	mov	r2, r3
    e568:	4619      	mov	r1, r3
    e56a:	4618      	mov	r0, r3
    e56c:	f7fa fe2a 	bl	91c4 <__assert_func>
        return false;
    e570:	2000      	movs	r0, #0
    e572:	e7e2      	b.n	e53a <rx_timeout_cb+0x10>

0000e574 <ccp_timer_irq>:
ccp_timer_irq(void * arg){
    e574:	b508      	push	{r3, lr}
    assert(arg);
    e576:	b130      	cbz	r0, e586 <ccp_timer_irq+0x12>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e578:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    e57c:	f500 7086 	add.w	r0, r0, #268	; 0x10c
    e580:	f7fb f954 	bl	982c <os_eventq_put>
}
    e584:	bd08      	pop	{r3, pc}
    assert(arg);
    e586:	2300      	movs	r3, #0
    e588:	461a      	mov	r2, r3
    e58a:	4619      	mov	r1, r3
    e58c:	4618      	mov	r0, r3
    e58e:	f7fa fe19 	bl	91c4 <__assert_func>
    e592:	0000      	movs	r0, r0
    e594:	0000      	movs	r0, r0
	...

0000e598 <tx_complete_cb>:
{
    e598:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    e59c:	684c      	ldr	r4, [r1, #4]
    e59e:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 1)
    e5a2:	2b01      	cmp	r3, #1
    e5a4:	f000 8083 	beq.w	e6ae <tx_complete_cb+0x116>
    e5a8:	4606      	mov	r6, r0
    CCP_STATS_INC(tx_complete);
    e5aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e5ac:	3301      	adds	r3, #1
    e5ae:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ccp->config.role != CCP_ROLE_MASTER)
    e5b0:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    e5b4:	f013 0f1e 	tst.w	r3, #30
    e5b8:	d179      	bne.n	e6ae <tx_complete_cb+0x116>
    uwb_ccp_frame_t * frame = ccp->frames[(++ccp->idx)%ccp->nframes];
    e5ba:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e5be:	3301      	adds	r3, #1
    e5c0:	b29b      	uxth	r3, r3
    e5c2:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    e5c6:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    e5ca:	fbb3 f1f2 	udiv	r1, r3, r2
    e5ce:	fb02 3311 	mls	r3, r2, r1, r3
    e5d2:	b29b      	uxth	r3, r3
    e5d4:	33e0      	adds	r3, #224	; 0xe0
    e5d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    e5da:	6a43      	ldr	r3, [r0, #36]	; 0x24
    e5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e5de:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e5e0:	696b      	ldr	r3, [r5, #20]
    e5e2:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    e5e6:	f004 f970 	bl	128ca <dpl_cputime_get32>
    e5ea:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    e5ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
    e5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e5f2:	4630      	mov	r0, r6
    e5f4:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - frame->transmission_timestamp.lo);
    e5f6:	696b      	ldr	r3, [r5, #20]
    e5f8:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    e5fa:	0840      	lsrs	r0, r0, #1
    e5fc:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    e600:	0c00      	lsrs	r0, r0, #16
    e602:	f015 ffdf 	bl	245c4 <__aeabi_ui2d>
    e606:	a34e      	add	r3, pc, #312	; (adr r3, e740 <tx_complete_cb+0x1a8>)
    e608:	e9d3 2300 	ldrd	r2, r3, [r3]
    e60c:	f016 f854 	bl	246b8 <__aeabi_dmul>
    e610:	4680      	mov	r8, r0
    e612:	4689      	mov	r9, r1
    e614:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    e618:	f015 ffd4 	bl	245c4 <__aeabi_ui2d>
    e61c:	4642      	mov	r2, r8
    e61e:	464b      	mov	r3, r9
    e620:	f015 fe92 	bl	24348 <__aeabi_dsub>
    e624:	f016 fb20 	bl	24c68 <__aeabi_d2uiz>
    e628:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    e62c:	2300      	movs	r3, #0
    e62e:	6523      	str	r3, [r4, #80]	; 0x50
    e630:	2200      	movs	r2, #0
    e632:	2300      	movs	r3, #0
    e634:	4640      	mov	r0, r8
    e636:	4649      	mov	r1, r9
    e638:	f015 fe88 	bl	2434c <__adddf3>
    e63c:	f016 fb14 	bl	24c68 <__aeabi_d2uiz>
    e640:	6520      	str	r0, [r4, #80]	; 0x50
    ccp->local_epoch = frame->transmission_timestamp.lo;
    e642:	696a      	ldr	r2, [r5, #20]
    e644:	7e2b      	ldrb	r3, [r5, #24]
    e646:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    e64a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->master_epoch = frame->transmission_timestamp;
    e64e:	696a      	ldr	r2, [r5, #20]
    e650:	69ab      	ldr	r3, [r5, #24]
    e652:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    e656:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->period = (frame->transmission_interval >> 16);
    e65a:	68eb      	ldr	r3, [r5, #12]
    e65c:	7c2a      	ldrb	r2, [r5, #16]
    e65e:	0c1b      	lsrs	r3, r3, #16
    e660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e664:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    e668:	8be9      	ldrh	r1, [r5, #30]
    e66a:	4620      	mov	r0, r4
    e66c:	f7ff fee8 	bl	e440 <adjust_for_epoch_to_rm>
    if (ccp->status.timer_enabled){
    e670:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e674:	f013 0f04 	tst.w	r3, #4
    e678:	d11c      	bne.n	e6b4 <tx_complete_cb+0x11c>
    ccp->status.valid |= ccp->idx > 1;
    e67a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e67e:	f3c3 0280 	ubfx	r2, r3, #2, #1
    e682:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    e686:	2901      	cmp	r1, #1
    e688:	bf88      	it	hi
    e68a:	f042 0201 	orrhi.w	r2, r2, #1
    e68e:	f362 0382 	bfi	r3, r2, #2, #1
    e692:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    e696:	f8d6 5530 	ldr.w	r5, [r6, #1328]	; 0x530
    e69a:	bb95      	cbnz	r5, e702 <tx_complete_cb+0x16a>
    if (ccp->config.postprocess && ccp->status.valid)
    e69c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    e6a0:	4b29      	ldr	r3, [pc, #164]	; (e748 <tx_complete_cb+0x1b0>)
    e6a2:	4393      	bics	r3, r2
    e6a4:	d036      	beq.n	e714 <tx_complete_cb+0x17c>
    e6a6:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    e6aa:	2b00      	cmp	r3, #0
    e6ac:	d039      	beq.n	e722 <tx_complete_cb+0x18a>
}
    e6ae:	2000      	movs	r0, #0
    e6b0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    e6b4:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    e6b8:	f5a5 757a 	sub.w	r5, r5, #1000	; 0x3e8
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    e6bc:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    e6c0:	f015 ff80 	bl	245c4 <__aeabi_ui2d>
    e6c4:	a31e      	add	r3, pc, #120	; (adr r3, e740 <tx_complete_cb+0x1a8>)
    e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e6ca:	f015 fff5 	bl	246b8 <__aeabi_dmul>
    e6ce:	4680      	mov	r8, r0
    e6d0:	4689      	mov	r9, r1
    e6d2:	4628      	mov	r0, r5
    e6d4:	f015 ff76 	bl	245c4 <__aeabi_ui2d>
    e6d8:	4642      	mov	r2, r8
    e6da:	464b      	mov	r3, r9
    e6dc:	f015 fe36 	bl	2434c <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    e6e0:	f016 fac2 	bl	24c68 <__aeabi_d2uiz>
    e6e4:	4601      	mov	r1, r0
    e6e6:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    e6ea:	f004 f8e6 	bl	128ba <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    e6ee:	2800      	cmp	r0, #0
    e6f0:	d1c3      	bne.n	e67a <tx_complete_cb+0xe2>
    e6f2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e6f6:	f043 0308 	orr.w	r3, r3, #8
    e6fa:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    e6fe:	e7bc      	b.n	e67a <tx_complete_cb+0xe2>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    e700:	6bad      	ldr	r5, [r5, #56]	; 0x38
    e702:	2d00      	cmp	r5, #0
    e704:	d0ca      	beq.n	e69c <tx_complete_cb+0x104>
            if (lcbs != NULL && lcbs->superframe_cb) {
    e706:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    e708:	2b00      	cmp	r3, #0
    e70a:	d0f9      	beq.n	e700 <tx_complete_cb+0x168>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    e70c:	4629      	mov	r1, r5
    e70e:	4630      	mov	r0, r6
    e710:	4798      	blx	r3
    e712:	e7f5      	b.n	e700 <tx_complete_cb+0x168>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    e714:	f7fb f938 	bl	9988 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    e718:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e71c:	f7fb f886 	bl	982c <os_eventq_put>
}
    e720:	e7c1      	b.n	e6a6 <tx_complete_cb+0x10e>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e722:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    e726:	f7fb fca1 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    e72a:	2800      	cmp	r0, #0
    e72c:	d0bf      	beq.n	e6ae <tx_complete_cb+0x116>
    e72e:	2300      	movs	r3, #0
    e730:	461a      	mov	r2, r3
    e732:	4619      	mov	r1, r3
    e734:	4618      	mov	r0, r3
    e736:	f7fa fd45 	bl	91c4 <__assert_func>
    e73a:	bf00      	nop
    e73c:	f3af 8000 	nop.w
    e740:	90690691 	.word	0x90690691
    e744:	3ff06906 	.word	0x3ff06906
    e748:	00010004 	.word	0x00010004

0000e74c <ccp_task>:
{
    e74c:	b510      	push	{r4, lr}
    e74e:	4604      	mov	r4, r0
    os_eventq_run((struct os_eventq * )evq);
    e750:	f504 7086 	add.w	r0, r4, #268	; 0x10c
    e754:	f7fb f8ea 	bl	992c <os_eventq_run>
    e758:	e7fa      	b.n	e750 <ccp_task+0x4>
	...

0000e75c <ccp_tasks_init>:
{
    e75c:	b530      	push	{r4, r5, lr}
    e75e:	b085      	sub	sp, #20
    e760:	4604      	mov	r4, r0
    if (!dpl_eventq_inited(&inst->eventq))
    e762:	f500 7586 	add.w	r5, r0, #268	; 0x10c
    return os_eventq_inited((struct os_eventq *) evq);
    e766:	4628      	mov	r0, r5
    e768:	f7fb f85b 	bl	9822 <os_eventq_inited>
    e76c:	b108      	cbz	r0, e772 <ccp_tasks_init+0x16>
}
    e76e:	b005      	add	sp, #20
    e770:	bd30      	pop	{r4, r5, pc}
    os_eventq_init((struct os_eventq *) evq);
    e772:	4628      	mov	r0, r5
    e774:	f7fb f84c 	bl	9810 <os_eventq_init>
        dpl_task_init(&inst->task_str, "ccp",
    e778:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
                      inst->task_stack,
    e77c:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    return os_task_init((struct os_task *) t, name, (os_task_func_t) func,
    e780:	2180      	movs	r1, #128	; 0x80
    e782:	9103      	str	r1, [sp, #12]
    e784:	9202      	str	r2, [sp, #8]
    e786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e78a:	9201      	str	r2, [sp, #4]
    e78c:	9300      	str	r3, [sp, #0]
    e78e:	4623      	mov	r3, r4
    e790:	4a03      	ldr	r2, [pc, #12]	; (e7a0 <ccp_tasks_init+0x44>)
    e792:	4904      	ldr	r1, [pc, #16]	; (e7a4 <ccp_tasks_init+0x48>)
    e794:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    e798:	f7fb fd00 	bl	a19c <os_task_init>
}
    e79c:	e7e7      	b.n	e76e <ccp_tasks_init+0x12>
    e79e:	bf00      	nop
    e7a0:	0000e74d 	.word	0x0000e74d
    e7a4:	00026b40 	.word	0x00026b40

0000e7a8 <ccp_timer_init>:
{
    e7a8:	b570      	push	{r4, r5, r6, lr}
    e7aa:	4604      	mov	r4, r0
    e7ac:	460d      	mov	r5, r1
    ccp->status.timer_enabled = true;
    e7ae:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    e7b2:	f043 0304 	orr.w	r3, r3, #4
    e7b6:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_init(&ccp->timer, ccp_timer_irq, (void *) ccp);
    e7ba:	f100 06f4 	add.w	r6, r0, #244	; 0xf4
    e7be:	4602      	mov	r2, r0
    e7c0:	4915      	ldr	r1, [pc, #84]	; (e818 <ccp_timer_init+0x70>)
    e7c2:	4630      	mov	r0, r6
    e7c4:	f004 f862 	bl	1288c <dpl_cputime_timer_init>
    return ev->ev.ev_arg;
    e7c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    if (dpl_event_get_arg(&ccp->timer_event) != (void *) ccp) {
    e7cc:	429c      	cmp	r4, r3
    e7ce:	d00e      	beq.n	e7ee <ccp_timer_init+0x46>
        if (role == CCP_ROLE_MASTER){
    e7d0:	b995      	cbnz	r5, e7f8 <ccp_timer_init+0x50>
    memset(ev, 0, sizeof(*ev));
    e7d2:	2300      	movs	r3, #0
    e7d4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    e7d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    e7dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e7e0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    e7e4:	4b0d      	ldr	r3, [pc, #52]	; (e81c <ccp_timer_init+0x74>)
    e7e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    e7ea:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
    dpl_cputime_timer_relative(&ccp->timer, 0);
    e7ee:	2100      	movs	r1, #0
    e7f0:	4630      	mov	r0, r6
    e7f2:	f004 f87e 	bl	128f2 <dpl_cputime_timer_relative>
}
    e7f6:	bd70      	pop	{r4, r5, r6, pc}
    memset(ev, 0, sizeof(*ev));
    e7f8:	2300      	movs	r3, #0
    e7fa:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    e7fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    e802:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e806:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ev->ev.ev_cb = (os_event_fn *)fn;
    e80a:	4b05      	ldr	r3, [pc, #20]	; (e820 <ccp_timer_init+0x78>)
    e80c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    ev->ev.ev_arg = arg;
    e810:	f8c4 4124 	str.w	r4, [r4, #292]	; 0x124
}
    e814:	e7eb      	b.n	e7ee <ccp_timer_init+0x46>
    e816:	bf00      	nop
    e818:	0000e575 	.word	0x0000e575
    e81c:	0000ed99 	.word	0x0000ed99
    e820:	0000e961 	.word	0x0000e961
    e824:	00000000 	.word	0x00000000

0000e828 <ccp_listen>:
 *
 * returns struct uwb_ccp_status_t
 */
static struct uwb_ccp_status
ccp_listen(struct uwb_ccp_instance *ccp, uint64_t dx_time, uwb_dev_modes_t mode)
{
    e828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e82c:	4604      	mov	r4, r0
    e82e:	4616      	mov	r6, r2
    e830:	4698      	mov	r8, r3
    e832:	f89d 9020 	ldrb.w	r9, [sp, #32]
    struct uwb_dev * inst = ccp->dev_inst;
    e836:	4607      	mov	r7, r0
    e838:	f857 5bb0 	ldr.w	r5, [r7], #176
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    e83c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    e842:	4628      	mov	r0, r5
    e844:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    e846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e84a:	4638      	mov	r0, r7
    e84c:	f7fb fc40 	bl	a0d0 <os_sem_pend>
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_listen\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    uwb_phy_forcetrxoff(inst);
    dpl_error_t err = dpl_sem_pend(&ccp->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    e850:	2800      	cmp	r0, #0
    e852:	d14f      	bne.n	e8f4 <ccp_listen+0xcc>

    CCP_STATS_INC(listen);
    e854:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e856:	3301      	adds	r3, #1
    e858:	6263      	str	r3, [r4, #36]	; 0x24

    if (dx_time) {
    e85a:	ea56 0308 	orrs.w	r3, r6, r8
    e85e:	d005      	beq.n	e86c <ccp_listen+0x44>
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    e860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e862:	6b59      	ldr	r1, [r3, #52]	; 0x34
    e864:	4632      	mov	r2, r6
    e866:	4643      	mov	r3, r8
    e868:	4628      	mov	r0, r5
    e86a:	4788      	blx	r1
        uwb_set_delay_start(inst, dx_time);
    }

    ccp->status.rx_timeout_error = 0;
    e86c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e870:	f36f 0341 	bfc	r3, #1, #1
    e874:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    return (dev->uw_funcs->uf_start_rx(dev));
    e878:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e87c:	4628      	mov	r0, r5
    e87e:	4798      	blx	r3
    ccp->status.start_rx_error = uwb_start_rx(inst).start_rx_error;
    e880:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e884:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e888:	f360 13c7 	bfi	r3, r0, #7, #1
    e88c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_rx_error) {
    e890:	b25b      	sxtb	r3, r3
    e892:	2b00      	cmp	r3, #0
    e894:	db34      	blt.n	e900 <ccp_listen+0xd8>
#endif
        /*  */
        CCP_STATS_INC(rx_start_error);
        err = dpl_sem_release(&ccp->sem);
        assert(err == DPL_OK);
    }else if(mode == UWB_BLOCKING){
    e896:	f1b9 0f00 	cmp.w	r9, #0
    e89a:	d14e      	bne.n	e93a <ccp_listen+0x112>
#if MYNEWT_VAL(UWB_CCP_STATS)
        if (dx_time) {
    e89c:	ea56 0308 	orrs.w	r3, r6, r8
    e8a0:	d015      	beq.n	e8ce <ccp_listen+0xa6>
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    e8a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e8a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e8a6:	4628      	mov	r0, r5
    e8a8:	4798      	blx	r3
            uint32_t margin = 0xffffffffU&(dx_time - uwb_read_systime_lo32(inst));
    e8aa:	1a30      	subs	r0, r6, r0
            CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    e8ac:	2300      	movs	r3, #0
    e8ae:	65a3      	str	r3, [r4, #88]	; 0x58
    e8b0:	0c00      	lsrs	r0, r0, #16
    e8b2:	f015 fe87 	bl	245c4 <__aeabi_ui2d>
    e8b6:	a328      	add	r3, pc, #160	; (adr r3, e958 <ccp_listen+0x130>)
    e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e8bc:	f015 fefc 	bl	246b8 <__aeabi_dmul>
    e8c0:	2200      	movs	r2, #0
    e8c2:	2300      	movs	r3, #0
    e8c4:	f015 fd42 	bl	2434c <__adddf3>
    e8c8:	f016 f9ce 	bl	24c68 <__aeabi_d2uiz>
    e8cc:	65a0      	str	r0, [r4, #88]	; 0x58
    e8ce:	2121      	movs	r1, #33	; 0x21
    e8d0:	4638      	mov	r0, r7
    e8d2:	f7fb fbfd 	bl	a0d0 <os_sem_pend>
        }
#endif
        /* Wait for completion of transactions */
        err = dpl_sem_pend(&ccp->sem, dpl_time_ms_to_ticks32(4*MYNEWT_VAL(UWB_CCP_LONG_RX_TO)/1000));
        if (err==DPL_TIMEOUT) {
    e8d6:	2806      	cmp	r0, #6
    e8d8:	d039      	beq.n	e94e <ccp_listen+0x126>
    e8da:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
            CCP_STATS_INC(sem_timeout);
        }
        if(dpl_sem_get_count(&ccp->sem) == 0){
    e8de:	bb63      	cbnz	r3, e93a <ccp_listen+0x112>
    return (dpl_error_t)os_sem_release(&sem->sem);
    e8e0:	4638      	mov	r0, r7
    e8e2:	f7fb fbc3 	bl	a06c <os_sem_release>
            err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
    e8e6:	b340      	cbz	r0, e93a <ccp_listen+0x112>
    e8e8:	2300      	movs	r3, #0
    e8ea:	461a      	mov	r2, r3
    e8ec:	4619      	mov	r1, r3
    e8ee:	4618      	mov	r0, r3
    e8f0:	f7fa fc68 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    e8f4:	2300      	movs	r3, #0
    e8f6:	461a      	mov	r2, r3
    e8f8:	4619      	mov	r1, r3
    e8fa:	4618      	mov	r0, r3
    e8fc:	f7fa fc62 	bl	91c4 <__assert_func>
    e900:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e904:	4628      	mov	r0, r5
    e906:	4798      	blx	r3
        uint32_t behind = 0xffffffffU&(uwb_read_systime_lo32(inst) - dx_time);
    e908:	1b80      	subs	r0, r0, r6
        CCP_STATS_SET(os_lat_behind, uwb_dwt_usecs_to_usecs(behind>>16));
    e90a:	2300      	movs	r3, #0
    e90c:	6563      	str	r3, [r4, #84]	; 0x54
    e90e:	0c00      	lsrs	r0, r0, #16
    e910:	f015 fe58 	bl	245c4 <__aeabi_ui2d>
    e914:	a310      	add	r3, pc, #64	; (adr r3, e958 <ccp_listen+0x130>)
    e916:	e9d3 2300 	ldrd	r2, r3, [r3]
    e91a:	f015 fecd 	bl	246b8 <__aeabi_dmul>
    e91e:	2200      	movs	r2, #0
    e920:	2300      	movs	r3, #0
    e922:	f015 fd13 	bl	2434c <__adddf3>
    e926:	f016 f99f 	bl	24c68 <__aeabi_d2uiz>
    e92a:	6560      	str	r0, [r4, #84]	; 0x54
        CCP_STATS_INC(rx_start_error);
    e92c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e92e:	3301      	adds	r3, #1
    e930:	6363      	str	r3, [r4, #52]	; 0x34
    e932:	4638      	mov	r0, r7
    e934:	f7fb fb9a 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    e938:	b918      	cbnz	r0, e942 <ccp_listen+0x11a>
        }
    }
    return ccp->status;
}
    e93a:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        assert(err == DPL_OK);
    e942:	2300      	movs	r3, #0
    e944:	461a      	mov	r2, r3
    e946:	4619      	mov	r1, r3
    e948:	4618      	mov	r0, r3
    e94a:	f7fa fc3b 	bl	91c4 <__assert_func>
            CCP_STATS_INC(sem_timeout);
    e94e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    e950:	3301      	adds	r3, #1
    e952:	6623      	str	r3, [r4, #96]	; 0x60
    e954:	e7c1      	b.n	e8da <ccp_listen+0xb2>
    e956:	bf00      	nop
    e958:	90690691 	.word	0x90690691
    e95c:	3ff06906 	.word	0x3ff06906

0000e960 <ccp_slave_timer_ev_cb>:
{
    e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e964:	b082      	sub	sp, #8
    assert(ev != NULL);
    e966:	2800      	cmp	r0, #0
    e968:	d06f      	beq.n	ea4a <ccp_slave_timer_ev_cb+0xea>
    return ev->ev.ev_arg;
    e96a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    e96c:	2c00      	cmp	r4, #0
    e96e:	d072      	beq.n	ea56 <ccp_slave_timer_ev_cb+0xf6>
    struct uwb_dev * inst = ccp->dev_inst;
    e970:	6825      	ldr	r5, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
    e972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e976:	2120      	movs	r1, #32
    e978:	4628      	mov	r0, r5
    e97a:	4798      	blx	r3
    ccp->blink_frame_duration = uwb_phy_frame_duration(inst, sizeof(uwb_ccp_blink_frame_t));
    e97c:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    if (!ccp->status.enabled) {
    e980:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e984:	f013 0f10 	tst.w	r3, #16
    e988:	d05c      	beq.n	ea44 <ccp_slave_timer_ev_cb+0xe4>
    if (ccp->status.rx_timeout_error) {
    e98a:	f013 0f02 	tst.w	r3, #2
    e98e:	d168      	bne.n	ea62 <ccp_slave_timer_ev_cb+0x102>
    CCP_STATS_INC(slave_cnt);
    e990:	69e3      	ldr	r3, [r4, #28]
    e992:	3301      	adds	r3, #1
    e994:	61e3      	str	r3, [r4, #28]
    dx_time = ccp->local_epoch;
    e996:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
    e99a:	f8d4 60dc 	ldr.w	r6, [r4, #220]	; 0xdc
    if (ccp->wcs) {
    e99e:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
    e9a2:	f1b8 0f00 	cmp.w	r8, #0
    e9a6:	d00e      	beq.n	e9c6 <ccp_slave_timer_ev_cb+0x66>
        dx_time += DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL(DPL_FLOAT64_U64_TO_F64((uint64_t)ccp->period << 16),
    e9a8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    e9ac:	0408      	lsls	r0, r1, #16
    e9ae:	0c09      	lsrs	r1, r1, #16
    e9b0:	f015 fe4c 	bl	2464c <__aeabi_ul2d>
    e9b4:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
    e9b8:	f015 fe7e 	bl	246b8 <__aeabi_dmul>
    e9bc:	f016 fb72 	bl	250a4 <__aeabi_d2ulz>
    e9c0:	19c7      	adds	r7, r0, r7
    e9c2:	eb46 0601 	adc.w	r6, r6, r1
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    e9c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    e9cc:	4628      	mov	r0, r5
    e9ce:	4798      	blx	r3
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    e9d0:	f895 351b 	ldrb.w	r3, [r5, #1307]	; 0x51b
    e9d4:	4418      	add	r0, r3
    e9d6:	f015 fe05 	bl	245e4 <__aeabi_i2d>
    e9da:	a34d      	add	r3, pc, #308	; (adr r3, eb10 <ccp_slave_timer_ev_cb+0x1b0>)
    e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9e0:	f015 ff94 	bl	2490c <__aeabi_ddiv>
    e9e4:	f016 f960 	bl	24ca8 <__aeabi_d2f>
    e9e8:	ee00 0a10 	vmov	s0, r0
    e9ec:	f016 fcec 	bl	253c8 <ceilf>
    e9f0:	ee10 0a10 	vmov	r0, s0
    e9f4:	f016 fb36 	bl	25064 <__aeabi_f2ulz>
                                                       inst->config.rx.timeToRxStable)) << 16);
    e9f8:	0409      	lsls	r1, r1, #16
    e9fa:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
    e9fe:	0400      	lsls	r0, r0, #16
    dx_time -= ((uint64_t)ceilf(uwb_usecs_to_dwt_usecs(uwb_phy_SHR_duration(inst) +
    ea00:	1a3f      	subs	r7, r7, r0
    ea02:	eb66 0601 	sbc.w	r6, r6, r1
    timeout = ccp->blink_frame_duration + MYNEWT_VAL(XTALT_GUARD);
    ea06:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    ea0a:	f501 7380 	add.w	r3, r1, #256	; 0x100
    timeout += (ccp->config.tx_holdoff_dly + ccp->blink_frame_duration) * MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    ea0e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    ea12:	4411      	add	r1, r2
    ea14:	0089      	lsls	r1, r1, #2
    ea16:	fa11 f183 	uxtah	r1, r1, r3
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    ea1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea1e:	b289      	uxth	r1, r1
    ea20:	4628      	mov	r0, r5
    ea22:	4798      	blx	r3
    ccp_listen(ccp, dx_time, UWB_BLOCKING);
    ea24:	2300      	movs	r3, #0
    ea26:	9300      	str	r3, [sp, #0]
    ea28:	463a      	mov	r2, r7
    ea2a:	4633      	mov	r3, r6
    ea2c:	4620      	mov	r0, r4
    ea2e:	f7ff fefb 	bl	e828 <ccp_listen>
    if(ccp->status.start_rx_error){
    ea32:	f994 30c8 	ldrsb.w	r3, [r4, #200]	; 0xc8
    ea36:	2b00      	cmp	r3, #0
    ea38:	db21      	blt.n	ea7e <ccp_slave_timer_ev_cb+0x11e>
    if (!ccp->status.enabled) {
    ea3a:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ea3e:	f013 0f10 	tst.w	r3, #16
    ea42:	d12a      	bne.n	ea9a <ccp_slave_timer_ev_cb+0x13a>
}
    ea44:	b002      	add	sp, #8
    ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ev != NULL);
    ea4a:	2300      	movs	r3, #0
    ea4c:	461a      	mov	r2, r3
    ea4e:	4619      	mov	r1, r3
    ea50:	4618      	mov	r0, r3
    ea52:	f7fa fbb7 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    ea56:	2300      	movs	r3, #0
    ea58:	461a      	mov	r2, r3
    ea5a:	4619      	mov	r1, r3
    ea5c:	4618      	mov	r0, r3
    ea5e:	f7fa fbb1 	bl	91c4 <__assert_func>
    ea62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea66:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea6a:	4628      	mov	r0, r5
    ea6c:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    ea6e:	2300      	movs	r3, #0
    ea70:	9300      	str	r3, [sp, #0]
    ea72:	2200      	movs	r2, #0
    ea74:	2300      	movs	r3, #0
    ea76:	4620      	mov	r0, r4
    ea78:	f7ff fed6 	bl	e828 <ccp_listen>
        goto reset_timer;
    ea7c:	e7dd      	b.n	ea3a <ccp_slave_timer_ev_cb+0xda>
    ea7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea82:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ea86:	4628      	mov	r0, r5
    ea88:	4798      	blx	r3
        ccp_listen(ccp, 0, UWB_BLOCKING);
    ea8a:	2300      	movs	r3, #0
    ea8c:	9300      	str	r3, [sp, #0]
    ea8e:	2200      	movs	r2, #0
    ea90:	2300      	movs	r3, #0
    ea92:	4620      	mov	r0, r4
    ea94:	f7ff fec8 	bl	e828 <ccp_listen>
    ea98:	e7cf      	b.n	ea3a <ccp_slave_timer_ev_cb+0xda>
    dpl_cputime_timer_stop(&ccp->timer);
    ea9a:	f104 07f4 	add.w	r7, r4, #244	; 0xf4
    ea9e:	4638      	mov	r0, r7
    eaa0:	f003 ff0f 	bl	128c2 <dpl_cputime_timer_stop>
    if (ccp->status.rx_timeout_error &&
    eaa4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    eaa8:	f013 0f02 	tst.w	r3, #2
    eaac:	d002      	beq.n	eab4 <ccp_slave_timer_ev_cb+0x154>
        ccp->missed_frames > MYNEWT_VAL(UWB_CCP_TOLERATE_MISSED_FRAMES)) {
    eaae:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
    if (ccp->status.rx_timeout_error &&
    eab2:	bb3b      	cbnz	r3, eb04 <ccp_slave_timer_ev_cb+0x1a4>
        ccp->status.rx_timeout_error = 0;
    eab4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    eab8:	f36f 0341 	bfc	r3, #1, #1
    eabc:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
        timer_expiry = ccp->os_epoch + dpl_cputime_usecs_to_ticks(
    eac0:	f8d4 60e0 	ldr.w	r6, [r4, #224]	; 0xe0
    eac4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    eac8:	f015 fd7c 	bl	245c4 <__aeabi_ui2d>
    eacc:	a310      	add	r3, pc, #64	; (adr r3, eb10 <ccp_slave_timer_ev_cb+0x1b0>)
    eace:	e9d3 2300 	ldrd	r2, r3, [r3]
    ead2:	f015 fdf1 	bl	246b8 <__aeabi_dmul>
    ead6:	f016 f8c7 	bl	24c68 <__aeabi_d2uiz>
    eada:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    eade:	1a41      	subs	r1, r0, r1
    eae0:	f895 051b 	ldrb.w	r0, [r5, #1307]	; 0x51b
    eae4:	1a09      	subs	r1, r1, r0
    eae6:	4431      	add	r1, r6
        rc = dpl_cputime_timer_start(&ccp->timer, timer_expiry);
    eae8:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
    eaec:	4638      	mov	r0, r7
    eaee:	f003 fee4 	bl	128ba <dpl_cputime_timer_start>
    if (rc == 0) ccp->status.timer_restarted = 1;
    eaf2:	2800      	cmp	r0, #0
    eaf4:	d1a6      	bne.n	ea44 <ccp_slave_timer_ev_cb+0xe4>
    eaf6:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    eafa:	f043 0308 	orr.w	r3, r3, #8
    eafe:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    eb02:	e79f      	b.n	ea44 <ccp_slave_timer_ev_cb+0xe4>
        rc = dpl_cputime_timer_relative(&ccp->timer, 0);
    eb04:	2100      	movs	r1, #0
    eb06:	4638      	mov	r0, r7
    eb08:	f003 fef3 	bl	128f2 <dpl_cputime_timer_relative>
    eb0c:	e7f1      	b.n	eaf2 <ccp_slave_timer_ev_cb+0x192>
    eb0e:	bf00      	nop
    eb10:	90690691 	.word	0x90690691
    eb14:	3ff06906 	.word	0x3ff06906

0000eb18 <ccp_send>:
{
    eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb1c:	b083      	sub	sp, #12
    eb1e:	9101      	str	r1, [sp, #4]
    assert(ccp);
    eb20:	2800      	cmp	r0, #0
    eb22:	f000 80f2 	beq.w	ed0a <ccp_send+0x1f2>
    eb26:	4604      	mov	r4, r0
    struct uwb_dev * inst = ccp->dev_inst;
    eb28:	6805      	ldr	r5, [r0, #0]
    CCP_STATS_INC(send);
    eb2a:	6a03      	ldr	r3, [r0, #32]
    eb2c:	3301      	adds	r3, #1
    eb2e:	6203      	str	r3, [r0, #32]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    eb30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    eb36:	4628      	mov	r0, r5
    eb38:	4798      	blx	r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    eb3a:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
    eb3e:	9300      	str	r3, [sp, #0]
    eb40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    eb44:	4618      	mov	r0, r3
    eb46:	f7fb fac3 	bl	a0d0 <os_sem_pend>
    assert(err == DPL_OK);
    eb4a:	2800      	cmp	r0, #0
    eb4c:	f040 80e3 	bne.w	ed16 <ccp_send+0x1fe>
    uwb_ccp_frame_t * previous_frame = ccp->frames[(uint16_t)(ccp->idx)%ccp->nframes];
    eb50:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    eb54:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
    eb58:	fbb3 f2f1 	udiv	r2, r3, r1
    eb5c:	fb01 3212 	mls	r2, r1, r2, r3
    eb60:	b292      	uxth	r2, r2
    eb62:	32e0      	adds	r2, #224	; 0xe0
    eb64:	f854 a022 	ldr.w	sl, [r4, r2, lsl #2]
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];
    eb68:	3301      	adds	r3, #1
    eb6a:	fb93 f2f1 	sdiv	r2, r3, r1
    eb6e:	fb01 3312 	mls	r3, r1, r2, r3
    eb72:	33e0      	adds	r3, #224	; 0xe0
    eb74:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    frame->rpt_count = 0;
    eb78:	f04f 0900 	mov.w	r9, #0
    eb7c:	f886 901c 	strb.w	r9, [r6, #28]
    frame->rpt_max = MYNEWT_VAL(UWB_CCP_MAX_CASCADE_RPTS);
    eb80:	2304      	movs	r3, #4
    eb82:	7773      	strb	r3, [r6, #29]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    eb84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    eb8a:	4628      	mov	r0, r5
    eb8c:	4798      	blx	r3
    frame->epoch_to_rm_us = uwb_phy_SHR_duration(inst);
    eb8e:	83f0      	strh	r0, [r6, #30]
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    eb90:	f8da 8014 	ldr.w	r8, [sl, #20]
    eb94:	f8da 7018 	ldr.w	r7, [sl, #24]
                        + ((uint64_t)ccp->period << 16);
    eb98:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    eb9c:	041a      	lsls	r2, r3, #16
    uint64_t timestamp = previous_frame->transmission_timestamp.timestamp
    eb9e:	eb18 0802 	adds.w	r8, r8, r2
    eba2:	eb47 4713 	adc.w	r7, r7, r3, lsr #16
    timestamp = timestamp & 0xFFFFFFFFFFFFFE00ULL; /* Mask off the last 9 bits */
    eba6:	f428 78ff 	bic.w	r8, r8, #510	; 0x1fe
    ebaa:	f028 0801 	bic.w	r8, r8, #1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    ebae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ebb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    ebb2:	4642      	mov	r2, r8
    ebb4:	463b      	mov	r3, r7
    ebb6:	4628      	mov	r0, r5
    ebb8:	4788      	blx	r1
    timestamp += inst->tx_antenna_delay;
    ebba:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    ebbe:	eb13 0808 	adds.w	r8, r3, r8
    ebc2:	f147 0700 	adc.w	r7, r7, #0
    frame->transmission_timestamp.timestamp = timestamp;
    ebc6:	f8c6 8014 	str.w	r8, [r6, #20]
    ebca:	61b7      	str	r7, [r6, #24]
    frame->seq_num = ++ccp->seq_num;
    ebcc:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
    ebd0:	3301      	adds	r3, #1
    ebd2:	b2db      	uxtb	r3, r3
    ebd4:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ebd8:	7073      	strb	r3, [r6, #1]
    frame->euid = inst->euid;
    ebda:	f8d5 24b8 	ldr.w	r2, [r5, #1208]	; 0x4b8
    ebde:	f8d5 34bc 	ldr.w	r3, [r5, #1212]	; 0x4bc
    ebe2:	f8c6 2002 	str.w	r2, [r6, #2]
    ebe6:	f8c6 3006 	str.w	r3, [r6, #6]
    frame->short_address = inst->my_short_address;
    ebea:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    ebee:	8173      	strh	r3, [r6, #10]
    frame->transmission_interval = ((uint64_t)ccp->period << 16);
    ebf0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    ebf4:	041a      	lsls	r2, r3, #16
    ebf6:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ebfa:	60f2      	str	r2, [r6, #12]
    ebfc:	7433      	strb	r3, [r6, #16]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    ebfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec00:	f8d3 b044 	ldr.w	fp, [r3, #68]	; 0x44
    ec04:	2320      	movs	r3, #32
    ec06:	464a      	mov	r2, r9
    ec08:	4631      	mov	r1, r6
    ec0a:	4628      	mov	r0, r5
    ec0c:	47d8      	blx	fp
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    ec0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec10:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
    ec14:	464b      	mov	r3, r9
    ec16:	464a      	mov	r2, r9
    ec18:	2120      	movs	r1, #32
    ec1a:	4628      	mov	r0, r5
    ec1c:	47d8      	blx	fp
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    ec1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ec22:	4649      	mov	r1, r9
    ec24:	4628      	mov	r0, r5
    ec26:	4798      	blx	r3
    return (dev->uw_funcs->uf_start_tx(dev));
    ec28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ec2c:	4628      	mov	r0, r5
    ec2e:	4798      	blx	r3
    ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    ec30:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ec34:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    ec38:	f360 1386 	bfi	r3, r0, #6, #1
    ec3c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    if (ccp->status.start_tx_error) {
    ec40:	b2db      	uxtb	r3, r3
    ec42:	f013 0f40 	tst.w	r3, #64	; 0x40
    ec46:	d072      	beq.n	ed2e <ccp_send+0x216>
    return (dev->uw_funcs->uf_read_systime(dev));
    ec48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ec4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ec4c:	4628      	mov	r0, r5
    ec4e:	4798      	blx	r3
        uint64_t late_us = ((systime - timestamp)&UWB_DTU_40BMASK) >> 16;
    ec50:	ebb0 0808 	subs.w	r8, r0, r8
    ec54:	eb61 0107 	sbc.w	r1, r1, r7
    ec58:	ea4f 4818 	mov.w	r8, r8, lsr #16
    ec5c:	ea48 4801 	orr.w	r8, r8, r1, lsl #16
    ec60:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
        CCP_STATS_INC(tx_start_error);
    ec64:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ec66:	3301      	adds	r3, #1
    ec68:	6463      	str	r3, [r4, #68]	; 0x44
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    ec6a:	6973      	ldr	r3, [r6, #20]
    ec6c:	69b2      	ldr	r2, [r6, #24]
                        + ((uint64_t)ccp->period << 16));
    ec6e:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
    ec72:	0408      	lsls	r0, r1, #16
    ec74:	181b      	adds	r3, r3, r0
    ec76:	eb42 4211 	adc.w	r2, r2, r1, lsr #16
        previous_frame->transmission_timestamp.timestamp = (frame->transmission_timestamp.timestamp
    ec7a:	f8ca 3014 	str.w	r3, [sl, #20]
    ec7e:	f8ca 2018 	str.w	r2, [sl, #24]
        ccp->idx++;
    ec82:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    ec86:	3301      	adds	r3, #1
    ec88:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
        ccp->os_epoch += dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period - late_us));
    ec8c:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
    ec90:	ebb5 0008 	subs.w	r0, r5, r8
    ec94:	eb61 0101 	sbc.w	r1, r1, r1
    ec98:	f015 fcd8 	bl	2464c <__aeabi_ul2d>
    ec9c:	a33c      	add	r3, pc, #240	; (adr r3, ed90 <ccp_send+0x278>)
    ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    eca2:	f015 fd09 	bl	246b8 <__aeabi_dmul>
    eca6:	4606      	mov	r6, r0
    eca8:	460f      	mov	r7, r1
    ecaa:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    ecae:	f015 fc89 	bl	245c4 <__aeabi_ui2d>
    ecb2:	4632      	mov	r2, r6
    ecb4:	463b      	mov	r3, r7
    ecb6:	f015 fb49 	bl	2434c <__adddf3>
    ecba:	f015 ffd5 	bl	24c68 <__aeabi_d2uiz>
    ecbe:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY));
    ecc2:	f5a0 707a 	sub.w	r0, r0, #1000	; 0x3e8
    ecc6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        ccp->master_epoch.timestamp += ((uint64_t)ccp->period)<<16;
    ecca:	0429      	lsls	r1, r5, #16
    eccc:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
    ecd0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    ecd4:	1852      	adds	r2, r2, r1
    ecd6:	eb43 4315 	adc.w	r3, r3, r5, lsr #16
    ecda:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    ecde:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
        ccp->local_epoch += ((uint64_t)ccp->period)<<16;
    ece2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ece6:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    ecea:	185b      	adds	r3, r3, r1
    ecec:	eb42 4215 	adc.w	r2, r2, r5, lsr #16
    ecf0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    ecf4:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
    return (dpl_error_t)os_sem_release(&sem->sem);
    ecf8:	9800      	ldr	r0, [sp, #0]
    ecfa:	f7fb f9b7 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    ecfe:	b980      	cbnz	r0, ed22 <ccp_send+0x20a>
}
    ed00:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ed04:	b003      	add	sp, #12
    ed06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(ccp);
    ed0a:	2300      	movs	r3, #0
    ed0c:	461a      	mov	r2, r3
    ed0e:	4619      	mov	r1, r3
    ed10:	4618      	mov	r0, r3
    ed12:	f7fa fa57 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    ed16:	2300      	movs	r3, #0
    ed18:	461a      	mov	r2, r3
    ed1a:	4619      	mov	r1, r3
    ed1c:	4618      	mov	r0, r3
    ed1e:	f7fa fa51 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    ed22:	464b      	mov	r3, r9
    ed24:	464a      	mov	r2, r9
    ed26:	4649      	mov	r1, r9
    ed28:	4648      	mov	r0, r9
    ed2a:	f7fa fa4b 	bl	91c4 <__assert_func>
    }else if(mode == UWB_BLOCKING){
    ed2e:	9b01      	ldr	r3, [sp, #4]
    ed30:	2b00      	cmp	r3, #0
    ed32:	d1e5      	bne.n	ed00 <ccp_send+0x1e8>
        uint32_t margin = 0xffffffffU&(frame->transmission_timestamp.lo - uwb_read_systime_lo32(inst));
    ed34:	6976      	ldr	r6, [r6, #20]
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    ed36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ed38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ed3a:	4628      	mov	r0, r5
    ed3c:	4798      	blx	r3
    ed3e:	1a30      	subs	r0, r6, r0
        CCP_STATS_SET(os_lat_margin, uwb_dwt_usecs_to_usecs(margin>>16));
    ed40:	2300      	movs	r3, #0
    ed42:	65a3      	str	r3, [r4, #88]	; 0x58
    ed44:	0c00      	lsrs	r0, r0, #16
    ed46:	f015 fc3d 	bl	245c4 <__aeabi_ui2d>
    ed4a:	a311      	add	r3, pc, #68	; (adr r3, ed90 <ccp_send+0x278>)
    ed4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed50:	f015 fcb2 	bl	246b8 <__aeabi_dmul>
    ed54:	2200      	movs	r2, #0
    ed56:	2300      	movs	r3, #0
    ed58:	f015 faf8 	bl	2434c <__adddf3>
    ed5c:	f015 ff84 	bl	24c68 <__aeabi_d2uiz>
    ed60:	65a0      	str	r0, [r4, #88]	; 0x58
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    ed62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed66:	9800      	ldr	r0, [sp, #0]
    ed68:	f7fb f9b2 	bl	a0d0 <os_sem_pend>
        assert(err == DPL_OK);
    ed6c:	b950      	cbnz	r0, ed84 <ccp_send+0x26c>
    return (dpl_error_t)os_sem_release(&sem->sem);
    ed6e:	9800      	ldr	r0, [sp, #0]
    ed70:	f7fb f97c 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    ed74:	2800      	cmp	r0, #0
    ed76:	d0c3      	beq.n	ed00 <ccp_send+0x1e8>
    ed78:	2300      	movs	r3, #0
    ed7a:	461a      	mov	r2, r3
    ed7c:	4619      	mov	r1, r3
    ed7e:	4618      	mov	r0, r3
    ed80:	f7fa fa20 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    ed84:	2300      	movs	r3, #0
    ed86:	461a      	mov	r2, r3
    ed88:	4619      	mov	r1, r3
    ed8a:	4618      	mov	r0, r3
    ed8c:	f7fa fa1a 	bl	91c4 <__assert_func>
    ed90:	90690691 	.word	0x90690691
    ed94:	3ff06906 	.word	0x3ff06906

0000ed98 <ccp_master_timer_ev_cb>:
{
    ed98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ev != NULL);
    ed9a:	b138      	cbz	r0, edac <ccp_master_timer_ev_cb+0x14>
    return ev->ev.ev_arg;
    ed9c:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev));
    ed9e:	b15c      	cbz	r4, edb8 <ccp_master_timer_ev_cb+0x20>
    if (!ccp->status.enabled) {
    eda0:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    eda4:	f013 0f10 	tst.w	r3, #16
    eda8:	d10c      	bne.n	edc4 <ccp_master_timer_ev_cb+0x2c>
}
    edaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(ev != NULL);
    edac:	2300      	movs	r3, #0
    edae:	461a      	mov	r2, r3
    edb0:	4619      	mov	r1, r3
    edb2:	4618      	mov	r0, r3
    edb4:	f7fa fa06 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    edb8:	2300      	movs	r3, #0
    edba:	461a      	mov	r2, r3
    edbc:	4619      	mov	r1, r3
    edbe:	4618      	mov	r0, r3
    edc0:	f7fa fa00 	bl	91c4 <__assert_func>
    CCP_STATS_INC(master_cnt);
    edc4:	69a3      	ldr	r3, [r4, #24]
    edc6:	3301      	adds	r3, #1
    edc8:	61a3      	str	r3, [r4, #24]
    ccp->status.timer_restarted = 0;
    edca:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    edce:	f36f 03c3 	bfc	r3, #3, #1
    edd2:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (ccp_send(ccp, UWB_BLOCKING).start_tx_error) {
    edd6:	2100      	movs	r1, #0
    edd8:	4620      	mov	r0, r4
    edda:	f7ff fe9d 	bl	eb18 <ccp_send>
    edde:	f010 0f40 	tst.w	r0, #64	; 0x40
    ede2:	d004      	beq.n	edee <ccp_master_timer_ev_cb+0x56>
        if (!ccp->status.enabled) {
    ede4:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ede8:	f013 0f10 	tst.w	r3, #16
    edec:	d0dd      	beq.n	edaa <ccp_master_timer_ev_cb+0x12>
    if (!ccp->status.timer_restarted && ccp->status.enabled) {
    edee:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    edf2:	f003 0318 	and.w	r3, r3, #24
    edf6:	2b10      	cmp	r3, #16
    edf8:	d1d7      	bne.n	edaa <ccp_master_timer_ev_cb+0x12>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    edfa:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
            - dpl_cputime_usecs_to_ticks(MYNEWT_VAL(OS_LATENCY))
    edfe:	f5a5 757a 	sub.w	r5, r5, #1000	; 0x3e8
            + dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(ccp->period))
    ee02:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    ee06:	f015 fbdd 	bl	245c4 <__aeabi_ui2d>
    ee0a:	a30f      	add	r3, pc, #60	; (adr r3, ee48 <ccp_master_timer_ev_cb+0xb0>)
    ee0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee10:	f015 fc52 	bl	246b8 <__aeabi_dmul>
    ee14:	4606      	mov	r6, r0
    ee16:	460f      	mov	r7, r1
    ee18:	4628      	mov	r0, r5
    ee1a:	f015 fbd3 	bl	245c4 <__aeabi_ui2d>
    ee1e:	4632      	mov	r2, r6
    ee20:	463b      	mov	r3, r7
    ee22:	f015 fa93 	bl	2434c <__adddf3>
        rc = dpl_cputime_timer_start(&ccp->timer, ccp->os_epoch
    ee26:	f015 ff1f 	bl	24c68 <__aeabi_d2uiz>
    ee2a:	4601      	mov	r1, r0
    ee2c:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    ee30:	f003 fd43 	bl	128ba <dpl_cputime_timer_start>
        if (rc == 0) ccp->status.timer_restarted = 1;
    ee34:	2800      	cmp	r0, #0
    ee36:	d1b8      	bne.n	edaa <ccp_master_timer_ev_cb+0x12>
    ee38:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    ee3c:	f043 0308 	orr.w	r3, r3, #8
    ee40:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    ee44:	e7b1      	b.n	edaa <ccp_master_timer_ev_cb+0x12>
    ee46:	bf00      	nop
    ee48:	90690691 	.word	0x90690691
    ee4c:	3ff06906 	.word	0x3ff06906

0000ee50 <uwb_ccp_set_tof_comp_cb>:
    inst->tof_comp_cb = tof_comp_cb;
    ee50:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
}
    ee54:	4770      	bx	lr
	...

0000ee58 <uwb_ccp_init>:
{
    ee58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee5c:	b08e      	sub	sp, #56	; 0x38
    assert(dev);
    ee5e:	2800      	cmp	r0, #0
    ee60:	d05c      	beq.n	ef1c <uwb_ccp_init+0xc4>
    ee62:	460d      	mov	r5, r1
    ee64:	4607      	mov	r7, r0
    assert(nframes > 1);
    ee66:	2901      	cmp	r1, #1
    ee68:	d95e      	bls.n	ef28 <uwb_ccp_init+0xd0>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
    ee6a:	2101      	movs	r1, #1
    ee6c:	f7f9 ff87 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (ccp == NULL) {
    ee70:	4604      	mov	r4, r0
    ee72:	2800      	cmp	r0, #0
    ee74:	d05e      	beq.n	ef34 <uwb_ccp_init+0xdc>
        assert(ccp->nframes == nframes);
    ee76:	f8b0 30ec 	ldrh.w	r3, [r0, #236]	; 0xec
    ee7a:	42ab      	cmp	r3, r5
    ee7c:	f040 80b7 	bne.w	efee <uwb_ccp_init+0x196>
    ccp->period = MYNEWT_VAL(UWB_CCP_PERIOD);
    ee80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    ee84:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ccp->config = (struct uwb_ccp_config){
    ee88:	2300      	movs	r3, #0
    ee8a:	f8c4 30ca 	str.w	r3, [r4, #202]	; 0xca
    ee8e:	f44f 7360 	mov.w	r3, #896	; 0x380
    ee92:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    ee96:	2101      	movs	r1, #1
    ee98:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ee9c:	f7fb f8de 	bl	a05c <os_sem_init>
    assert(err == DPL_OK);
    eea0:	2800      	cmp	r0, #0
    eea2:	f040 80aa 	bne.w	effa <uwb_ccp_init+0x1a2>
    ccp->cbs = (struct uwb_mac_interface){
    eea6:	f104 056c 	add.w	r5, r4, #108	; 0x6c
    eeaa:	223c      	movs	r2, #60	; 0x3c
    eeac:	2100      	movs	r1, #0
    eeae:	4628      	mov	r0, r5
    eeb0:	f001 fbe3 	bl	1067a <memset>
    eeb4:	2301      	movs	r3, #1
    eeb6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    eeba:	6724      	str	r4, [r4, #112]	; 0x70
    eebc:	4b58      	ldr	r3, [pc, #352]	; (f020 <uwb_ccp_init+0x1c8>)
    eebe:	67a3      	str	r3, [r4, #120]	; 0x78
    eec0:	4b58      	ldr	r3, [pc, #352]	; (f024 <uwb_ccp_init+0x1cc>)
    eec2:	67e3      	str	r3, [r4, #124]	; 0x7c
    eec4:	4b58      	ldr	r3, [pc, #352]	; (f028 <uwb_ccp_init+0x1d0>)
    eec6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    eeca:	4b58      	ldr	r3, [pc, #352]	; (f02c <uwb_ccp_init+0x1d4>)
    eecc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    eed0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    eed4:	4b56      	ldr	r3, [pc, #344]	; (f030 <uwb_ccp_init+0x1d8>)
    eed6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    uwb_mac_append_interface(dev, &ccp->cbs);
    eeda:	4629      	mov	r1, r5
    eedc:	4638      	mov	r0, r7
    eede:	f7f9 fef9 	bl	8cd4 <uwb_mac_append_interface>
    ccp_tasks_init(ccp);
    eee2:	4620      	mov	r0, r4
    eee4:	f7ff fc3a 	bl	e75c <ccp_tasks_init>
    ccp->status.initialized = 1;
    eee8:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    eeec:	f043 0302 	orr.w	r3, r3, #2
    eef0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    int rc = stats_init(
    eef4:	1d25      	adds	r5, r4, #4
    eef6:	2214      	movs	r2, #20
    eef8:	9200      	str	r2, [sp, #0]
    eefa:	4b4e      	ldr	r3, [pc, #312]	; (f034 <uwb_ccp_init+0x1dc>)
    eefc:	2104      	movs	r1, #4
    eefe:	4628      	mov	r0, r5
    ef00:	f007 f920 	bl	16144 <stats_init>
    assert(rc == 0);
    ef04:	2800      	cmp	r0, #0
    ef06:	d17e      	bne.n	f006 <uwb_ccp_init+0x1ae>
    rc = stats_register("ccp", STATS_HDR(ccp->stat));
    ef08:	4629      	mov	r1, r5
    ef0a:	484b      	ldr	r0, [pc, #300]	; (f038 <uwb_ccp_init+0x1e0>)
    ef0c:	f007 f99e 	bl	1624c <stats_register>
    assert(rc == 0);
    ef10:	2800      	cmp	r0, #0
    ef12:	d17e      	bne.n	f012 <uwb_ccp_init+0x1ba>
}
    ef14:	4620      	mov	r0, r4
    ef16:	b00e      	add	sp, #56	; 0x38
    ef18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(dev);
    ef1c:	2300      	movs	r3, #0
    ef1e:	461a      	mov	r2, r3
    ef20:	4619      	mov	r1, r3
    ef22:	4618      	mov	r0, r3
    ef24:	f7fa f94e 	bl	91c4 <__assert_func>
    assert(nframes > 1);
    ef28:	2300      	movs	r3, #0
    ef2a:	461a      	mov	r2, r3
    ef2c:	4619      	mov	r1, r3
    ef2e:	4618      	mov	r0, r3
    ef30:	f7fa f948 	bl	91c4 <__assert_func>
        ccp = (struct uwb_ccp_instance *) calloc(1, sizeof(struct uwb_ccp_instance) + nframes * sizeof(uwb_ccp_frame_t *));
    ef34:	f105 01e0 	add.w	r1, r5, #224	; 0xe0
    ef38:	0089      	lsls	r1, r1, #2
    ef3a:	2001      	movs	r0, #1
    ef3c:	f001 fa5b 	bl	103f6 <calloc>
        assert(ccp);
    ef40:	4604      	mov	r4, r0
    ef42:	b1b8      	cbz	r0, ef74 <uwb_ccp_init+0x11c>
        ccp->status.selfmalloc = 1;
    ef44:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
    ef48:	f043 0301 	orr.w	r3, r3, #1
    ef4c:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
        ccp->nframes = nframes;
    ef50:	f8a0 50ec 	strh.w	r5, [r0, #236]	; 0xec
        uwb_ccp_frame_t ccp_default = {
    ef54:	2230      	movs	r2, #48	; 0x30
    ef56:	2100      	movs	r1, #0
    ef58:	a802      	add	r0, sp, #8
    ef5a:	f001 fb8e 	bl	1067a <memset>
    ef5e:	23c5      	movs	r3, #197	; 0xc5
    ef60:	f88d 3008 	strb.w	r3, [sp, #8]
    ef64:	23ff      	movs	r3, #255	; 0xff
    ef66:	f88d 3009 	strb.w	r3, [sp, #9]
    ef6a:	2304      	movs	r3, #4
    ef6c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        for (i = 0; i < ccp->nframes; i++){
    ef70:	2600      	movs	r6, #0
    ef72:	e022      	b.n	efba <uwb_ccp_init+0x162>
        assert(ccp);
    ef74:	2300      	movs	r3, #0
    ef76:	461a      	mov	r2, r3
    ef78:	4619      	mov	r1, r3
    ef7a:	4618      	mov	r0, r3
    ef7c:	f7fa f922 	bl	91c4 <__assert_func>
            assert(ccp->frames[i]);
    ef80:	2300      	movs	r3, #0
    ef82:	461a      	mov	r2, r3
    ef84:	4619      	mov	r1, r3
    ef86:	4618      	mov	r0, r3
    ef88:	f7fa f91c 	bl	91c4 <__assert_func>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    ef8c:	46ae      	mov	lr, r5
    ef8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    ef92:	f8cc 0000 	str.w	r0, [ip]
    ef96:	f8cc 1004 	str.w	r1, [ip, #4]
    ef9a:	f8cc 2008 	str.w	r2, [ip, #8]
    ef9e:	f8cc 300c 	str.w	r3, [ip, #12]
    efa2:	4675      	mov	r5, lr
    efa4:	f10c 0c10 	add.w	ip, ip, #16
    efa8:	45c6      	cmp	lr, r8
    efaa:	d1ef      	bne.n	ef8c <uwb_ccp_init+0x134>
            ccp->frames[i]->seq_num = 0;
    efac:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    efb0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    efb4:	2200      	movs	r2, #0
    efb6:	705a      	strb	r2, [r3, #1]
        for (i = 0; i < ccp->nframes; i++){
    efb8:	3601      	adds	r6, #1
    efba:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    efbe:	42b3      	cmp	r3, r6
    efc0:	dd0e      	ble.n	efe0 <uwb_ccp_init+0x188>
            ccp->frames[i] = (uwb_ccp_frame_t *) calloc(1, sizeof(uwb_ccp_frame_t));
    efc2:	2130      	movs	r1, #48	; 0x30
    efc4:	2001      	movs	r0, #1
    efc6:	f001 fa16 	bl	103f6 <calloc>
    efca:	f106 03e0 	add.w	r3, r6, #224	; 0xe0
    efce:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
            assert(ccp->frames[i]);
    efd2:	2800      	cmp	r0, #0
    efd4:	d0d4      	beq.n	ef80 <uwb_ccp_init+0x128>
            memcpy(ccp->frames[i], &ccp_default, sizeof(uwb_ccp_frame_t));
    efd6:	ad02      	add	r5, sp, #8
    efd8:	4684      	mov	ip, r0
    efda:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    efde:	e7d5      	b.n	ef8c <uwb_ccp_init+0x134>
        ccp->dev_inst = dev;
    efe0:	6027      	str	r7, [r4, #0]
        ccp->task_prio = dev->task_prio - 0x4;
    efe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    efe6:	3b04      	subs	r3, #4
    efe8:	f884 317c 	strb.w	r3, [r4, #380]	; 0x17c
    efec:	e748      	b.n	ee80 <uwb_ccp_init+0x28>
        assert(ccp->nframes == nframes);
    efee:	2300      	movs	r3, #0
    eff0:	461a      	mov	r2, r3
    eff2:	4619      	mov	r1, r3
    eff4:	4618      	mov	r0, r3
    eff6:	f7fa f8e5 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    effa:	2300      	movs	r3, #0
    effc:	461a      	mov	r2, r3
    effe:	4619      	mov	r1, r3
    f000:	4618      	mov	r0, r3
    f002:	f7fa f8df 	bl	91c4 <__assert_func>
    assert(rc == 0);
    f006:	2300      	movs	r3, #0
    f008:	461a      	mov	r2, r3
    f00a:	4619      	mov	r1, r3
    f00c:	4618      	mov	r0, r3
    f00e:	f7fa f8d9 	bl	91c4 <__assert_func>
    assert(rc == 0);
    f012:	2300      	movs	r3, #0
    f014:	461a      	mov	r2, r3
    f016:	4619      	mov	r1, r3
    f018:	4618      	mov	r0, r3
    f01a:	f7fa f8d3 	bl	91c4 <__assert_func>
    f01e:	bf00      	nop
    f020:	0000e599 	.word	0x0000e599
    f024:	0000f231 	.word	0x0000f231
    f028:	0000e52b 	.word	0x0000e52b
    f02c:	0000e4d7 	.word	0x0000e4d7
    f030:	0000e4a9 	.word	0x0000e4a9
    f034:	00026c38 	.word	0x00026c38
    f038:	00026b40 	.word	0x00026b40

0000f03c <uwb_ccp_free>:
{
    f03c:	b538      	push	{r3, r4, r5, lr}
    assert(inst);
    f03e:	b1f8      	cbz	r0, f080 <uwb_ccp_free+0x44>
    f040:	4605      	mov	r5, r0
    inst->status.enabled = 0;
    f042:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f046:	f36f 1304 	bfc	r3, #4, #1
    f04a:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    return (dpl_error_t)os_sem_release(&sem->sem);
    f04e:	30b0      	adds	r0, #176	; 0xb0
    f050:	f7fb f80c 	bl	a06c <os_sem_release>
    uwb_mac_remove_interface(inst->dev_inst, inst->cbs.id);
    f054:	462c      	mov	r4, r5
    f056:	f8b5 106e 	ldrh.w	r1, [r5, #110]	; 0x6e
    f05a:	f854 0bf4 	ldr.w	r0, [r4], #244
    f05e:	f7f9 fe5e 	bl	8d1e <uwb_mac_remove_interface>
    dpl_cputime_timer_stop(&inst->timer);
    f062:	4620      	mov	r0, r4
    f064:	f003 fc2d 	bl	128c2 <dpl_cputime_timer_stop>
    if (inst->status.selfmalloc) {
    f068:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    f06c:	f013 0f01 	tst.w	r3, #1
    f070:	d11b      	bne.n	f0aa <uwb_ccp_free+0x6e>
        inst->status.initialized = 0;
    f072:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    f076:	f36f 0341 	bfc	r3, #1, #1
    f07a:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
}
    f07e:	e013      	b.n	f0a8 <uwb_ccp_free+0x6c>
    assert(inst);
    f080:	2300      	movs	r3, #0
    f082:	461a      	mov	r2, r3
    f084:	4619      	mov	r1, r3
    f086:	4618      	mov	r0, r3
    f088:	f7fa f89c 	bl	91c4 <__assert_func>
            free(inst->frames[i]);
    f08c:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
    f090:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    f094:	f001 faaa 	bl	105ec <free>
        for (i = 0; i < inst->nframes; i++) {
    f098:	3401      	adds	r4, #1
    f09a:	f8b5 30ec 	ldrh.w	r3, [r5, #236]	; 0xec
    f09e:	42a3      	cmp	r3, r4
    f0a0:	dcf4      	bgt.n	f08c <uwb_ccp_free+0x50>
        free(inst);
    f0a2:	4628      	mov	r0, r5
    f0a4:	f001 faa2 	bl	105ec <free>
}
    f0a8:	bd38      	pop	{r3, r4, r5, pc}
        for (i = 0; i < inst->nframes; i++) {
    f0aa:	2400      	movs	r4, #0
    f0ac:	e7f5      	b.n	f09a <uwb_ccp_free+0x5e>

0000f0ae <uwb_ccp_start>:
 *
 * @return void
 */
void
uwb_ccp_start(struct uwb_ccp_instance *ccp, uwb_ccp_role_t role)
{
    f0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0b2:	4604      	mov	r4, r0
    f0b4:	460e      	mov	r6, r1
    struct uwb_dev * inst = ccp->dev_inst;
    f0b6:	f8d0 8000 	ldr.w	r8, [r0]
    return (dev->uw_funcs->uf_phy_SHR_duration(dev));
    f0ba:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    f0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    f0c2:	4640      	mov	r0, r8
    f0c4:	4798      	blx	r3
    uint16_t epoch_to_rm = uwb_phy_SHR_duration(inst);

    // Initialise frame timestamp to current time
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_start\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    assert(ccp);
    f0c6:	2c00      	cmp	r4, #0
    f0c8:	d05e      	beq.n	f188 <uwb_ccp_start+0xda>
    f0ca:	4605      	mov	r5, r0
    ccp->idx = 0x0;
    f0cc:	2200      	movs	r2, #0
    f0ce:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
    ccp->status.valid = false;
    f0d2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f0d6:	f362 0382 	bfi	r3, r2, #2, #1
    f0da:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_euid = 0x0;
    f0de:	2200      	movs	r2, #0
    f0e0:	2300      	movs	r3, #0
    f0e2:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
    f0e6:	f8d4 7380 	ldr.w	r7, [r4, #896]	; 0x380
    ccp->config.role = role;
    f0ea:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    f0ee:	f366 0344 	bfi	r3, r6, #1, #4
    f0f2:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    ccp->status.enabled = 1;
    f0f6:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f0fa:	f043 0310 	orr.w	r3, r3, #16
    f0fe:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9

    /* Setup CCP to send/listen for the first packet ASAP */
    ccp->os_epoch = dpl_cputime_get32() - epoch_to_rm;
    f102:	f003 fbe2 	bl	128ca <dpl_cputime_get32>
    f106:	1b40      	subs	r0, r0, r5
    f108:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return (dev->uw_funcs->uf_read_systime(dev));
    f10c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    f110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    f112:	4640      	mov	r0, r8
    f114:	4798      	blx	r3
    uint64_t ts = (uwb_read_systime(inst) - (((uint64_t)ccp->period)<<16))&UWB_DTU_40BMASK;
    f116:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    f11a:	041a      	lsls	r2, r3, #16
    f11c:	1a80      	subs	r0, r0, r2
    f11e:	eb61 4313 	sbc.w	r3, r1, r3, lsr #16
    f122:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ts += ((uint64_t)ccp->config.tx_holdoff_dly + 2 * MYNEWT_VAL(OS_LATENCY))<<16;
    f126:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f12a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    f12e:	040a      	lsls	r2, r1, #16
    f130:	1812      	adds	r2, r2, r0
    f132:	eb43 4311 	adc.w	r3, r3, r1, lsr #16

    if (ccp->config.role == CCP_ROLE_MASTER){
    f136:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    f13a:	f011 0f1e 	tst.w	r1, #30
    f13e:	d129      	bne.n	f194 <uwb_ccp_start+0xe6>
        ccp->local_epoch = frame->transmission_timestamp.lo = ts;
    f140:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f144:	617a      	str	r2, [r7, #20]
    f146:	763b      	strb	r3, [r7, #24]
    f148:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f14c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->transmission_timestamp.hi = 0;
    f150:	2300      	movs	r3, #0
    f152:	767b      	strb	r3, [r7, #25]
    f154:	76bb      	strb	r3, [r7, #26]
    f156:	7efb      	ldrb	r3, [r7, #27]
    f158:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    f15c:	76fb      	strb	r3, [r7, #27]
    } else {
        ccp->local_epoch = frame->reception_timestamp = ts;
    }
    ccp->local_epoch -= epoch_to_rm;
    f15e:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    f162:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    f166:	1b40      	subs	r0, r0, r5
    f168:	f163 0300 	sbc.w	r3, r3, #0
    f16c:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    f170:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->local_epoch &= UWB_DTU_40BMASK;
    f174:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f178:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc

    ccp_timer_init(ccp, role);
    f17c:	4631      	mov	r1, r6
    f17e:	4620      	mov	r0, r4
    f180:	f7ff fb12 	bl	e7a8 <ccp_timer_init>
}
    f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(ccp);
    f188:	2300      	movs	r3, #0
    f18a:	461a      	mov	r2, r3
    f18c:	4619      	mov	r1, r3
    f18e:	4618      	mov	r0, r3
    f190:	f7fa f818 	bl	91c4 <__assert_func>
        ccp->local_epoch = frame->reception_timestamp = ts;
    f194:	623a      	str	r2, [r7, #32]
    f196:	627b      	str	r3, [r7, #36]	; 0x24
    f198:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f19c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    f1a0:	e7dd      	b.n	f15e <uwb_ccp_start+0xb0>

0000f1a2 <uwb_ccp_stop>:
 * @param inst   Pointer to struct uwb_ccp_instance.
 * @return void
 */
void
uwb_ccp_stop(struct uwb_ccp_instance *ccp)
{
    f1a2:	b510      	push	{r4, lr}
    assert(ccp);
    f1a4:	b1a8      	cbz	r0, f1d2 <uwb_ccp_stop+0x30>
    f1a6:	4604      	mov	r4, r0
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_stop\"}\n",
            dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    ccp->status.enabled = 0;
    f1a8:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f1ac:	f36f 1304 	bfc	r3, #4, #1
    f1b0:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
    dpl_cputime_timer_stop(&ccp->timer);
    f1b4:	30f4      	adds	r0, #244	; 0xf4
    f1b6:	f003 fb84 	bl	128c2 <dpl_cputime_timer_stop>
    f1ba:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) == 0){
    f1be:	b93b      	cbnz	r3, f1d0 <uwb_ccp_stop+0x2e>
        uwb_phy_forcetrxoff(ccp->dev_inst);
    f1c0:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_forcetrxoff(dev));
    f1c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    f1c8:	4798      	blx	r3
    f1ca:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f1ce:	b133      	cbz	r3, f1de <uwb_ccp_stop+0x3c>
            dpl_error_t err = dpl_sem_release(&ccp->sem);
            assert(err == DPL_OK);
        }
    }
}
    f1d0:	bd10      	pop	{r4, pc}
    assert(ccp);
    f1d2:	2300      	movs	r3, #0
    f1d4:	461a      	mov	r2, r3
    f1d6:	4619      	mov	r1, r3
    f1d8:	4618      	mov	r0, r3
    f1da:	f7f9 fff3 	bl	91c4 <__assert_func>
    f1de:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f1e2:	f7fa ff43 	bl	a06c <os_sem_release>
            assert(err == DPL_OK);
    f1e6:	2800      	cmp	r0, #0
    f1e8:	d0f2      	beq.n	f1d0 <uwb_ccp_stop+0x2e>
    f1ea:	2300      	movs	r3, #0
    f1ec:	461a      	mov	r2, r3
    f1ee:	4619      	mov	r1, r3
    f1f0:	4618      	mov	r0, r3
    f1f2:	f7f9 ffe7 	bl	91c4 <__assert_func>
	...

0000f1f8 <uwb_ccp_skew_compensation_ui64>:
EXPORT_SYMBOL(uwb_ccp_stop);

uint64_t uwb_ccp_skew_compensation_ui64(struct uwb_ccp_instance *ccp, uint64_t value)
{
    f1f8:	b570      	push	{r4, r5, r6, lr}
    f1fa:	4619      	mov	r1, r3
#if MYNEWT_VAL(UWB_WCS_ENABLED)
    struct uwb_wcs_instance * wcs = ccp->wcs;
    f1fc:	6e86      	ldr	r6, [r0, #104]	; 0x68
    if (!wcs) return value;
    f1fe:	b19e      	cbz	r6, f228 <uwb_ccp_skew_compensation_ui64+0x30>
    // value *= (1.0l - fractional_skew);
    value = DPL_FLOAT64_F64_TO_U64(DPL_FLOAT64_MUL( DPL_FLOAT64_U64_TO_F64(value), DPL_FLOAT64_SUB( DPL_FLOAT64_INIT(1.0l),wcs->fractional_skew)));
    f200:	4610      	mov	r0, r2
    f202:	f015 fa23 	bl	2464c <__aeabi_ul2d>
    f206:	4604      	mov	r4, r0
    f208:	460d      	mov	r5, r1
    f20a:	e9d6 2312 	ldrd	r2, r3, [r6, #72]	; 0x48
    f20e:	2000      	movs	r0, #0
    f210:	4906      	ldr	r1, [pc, #24]	; (f22c <uwb_ccp_skew_compensation_ui64+0x34>)
    f212:	f015 f899 	bl	24348 <__aeabi_dsub>
    f216:	4602      	mov	r2, r0
    f218:	460b      	mov	r3, r1
    f21a:	4620      	mov	r0, r4
    f21c:	4629      	mov	r1, r5
    f21e:	f015 fa4b 	bl	246b8 <__aeabi_dmul>
    f222:	f015 ff3f 	bl	250a4 <__aeabi_d2ulz>
#endif
    return value;
}
    f226:	bd70      	pop	{r4, r5, r6, pc}
    if (!wcs) return value;
    f228:	4610      	mov	r0, r2
    f22a:	e7fc      	b.n	f226 <uwb_ccp_skew_compensation_ui64+0x2e>
    f22c:	3ff00000 	.word	0x3ff00000

0000f230 <rx_complete_cb>:
{
    f230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f234:	b08f      	sub	sp, #60	; 0x3c
    struct uwb_ccp_instance * ccp = (struct uwb_ccp_instance *)cbs->inst_ptr;
    f236:	684c      	ldr	r4, [r1, #4]
    if (ccp->config.role == CCP_ROLE_MASTER) {
    f238:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    f23c:	f013 0f1e 	tst.w	r3, #30
    f240:	f000 8230 	beq.w	f6a4 <rx_complete_cb+0x474>
    f244:	4605      	mov	r5, r0
    if (inst->fctrl_array[0] != FCNTL_IEEE_BLINK_CCP_64){
    f246:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    f24a:	2bc5      	cmp	r3, #197	; 0xc5
    f24c:	d00e      	beq.n	f26c <rx_complete_cb+0x3c>
    f24e:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
        if(dpl_sem_get_count(&ccp->sem) == 0){
    f252:	2b00      	cmp	r3, #0
    f254:	f040 822a 	bne.w	f6ac <rx_complete_cb+0x47c>
    return (dev->uw_funcs->uf_adj_rx_timeout(dev, to));
    f258:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f25c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f260:	4798      	blx	r3
            CCP_STATS_INC(rx_other_frame);
    f262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f264:	3301      	adds	r3, #1
    f266:	63e3      	str	r3, [r4, #60]	; 0x3c
            return true;
    f268:	2001      	movs	r0, #1
    f26a:	e21c      	b.n	f6a6 <rx_complete_cb+0x476>
    f26c:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    if(dpl_sem_get_count(&ccp->sem) != 0){
    f270:	b99b      	cbnz	r3, f29a <rx_complete_cb+0x6a>
    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx+1)%ccp->nframes];  // speculative frame advance
    f272:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f276:	3301      	adds	r3, #1
    f278:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
    f27c:	fb93 f1f2 	sdiv	r1, r3, r2
    f280:	fb02 3311 	mls	r3, r2, r1, r3
    f284:	33e0      	adds	r3, #224	; 0xe0
    f286:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
    if (inst->frame_len >= sizeof(uwb_ccp_blink_frame_t) && inst->frame_len <= sizeof(frame->array))
    f28a:	f8b0 34e2 	ldrh.w	r3, [r0, #1250]	; 0x4e2
    f28e:	3b20      	subs	r3, #32
    f290:	b29b      	uxth	r3, r3
    f292:	2b10      	cmp	r3, #16
    f294:	d906      	bls.n	f2a4 <rx_complete_cb+0x74>
        return true;
    f296:	2001      	movs	r0, #1
    f298:	e205      	b.n	f6a6 <rx_complete_cb+0x476>
        CCP_STATS_INC(rx_unsolicited);
    f29a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f29c:	3301      	adds	r3, #1
    f29e:	63a3      	str	r3, [r4, #56]	; 0x38
        return false;
    f2a0:	2000      	movs	r0, #0
    f2a2:	e200      	b.n	f6a6 <rx_complete_cb+0x476>
        memcpy(frame->array, inst->rxbuf, sizeof(uwb_ccp_blink_frame_t));
    f2a4:	f8d0 34fc 	ldr.w	r3, [r0, #1276]	; 0x4fc
    f2a8:	681f      	ldr	r7, [r3, #0]
    f2aa:	6858      	ldr	r0, [r3, #4]
    f2ac:	6899      	ldr	r1, [r3, #8]
    f2ae:	68da      	ldr	r2, [r3, #12]
    f2b0:	6037      	str	r7, [r6, #0]
    f2b2:	6070      	str	r0, [r6, #4]
    f2b4:	60b1      	str	r1, [r6, #8]
    f2b6:	60f2      	str	r2, [r6, #12]
    f2b8:	691f      	ldr	r7, [r3, #16]
    f2ba:	6958      	ldr	r0, [r3, #20]
    f2bc:	6999      	ldr	r1, [r3, #24]
    f2be:	69da      	ldr	r2, [r3, #28]
    f2c0:	6137      	str	r7, [r6, #16]
    f2c2:	6170      	str	r0, [r6, #20]
    f2c4:	61b1      	str	r1, [r6, #24]
    f2c6:	61f2      	str	r2, [r6, #28]
    if (inst->status.lde_error)
    f2c8:	f895 3509 	ldrb.w	r3, [r5, #1289]	; 0x509
    f2cc:	f013 0f04 	tst.w	r3, #4
    f2d0:	f040 81ee 	bne.w	f6b0 <rx_complete_cb+0x480>
    return (dev->uw_funcs->uf_stop_rx(dev));
    f2d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f2d8:	4628      	mov	r0, r5
    f2da:	4798      	blx	r3
    ccp->idx++; // confirmed frame advance
    f2dc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    f2e0:	3301      	adds	r3, #1
    f2e2:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    ccp->seq_num = frame->seq_num;
    f2e6:	7873      	ldrb	r3, [r6, #1]
    f2e8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    ccp->missed_frames = 0;
    f2ec:	2700      	movs	r7, #0
    f2ee:	f884 70f1 	strb.w	r7, [r4, #241]	; 0xf1
    return (dev->uw_funcs->uf_read_systime_lo32(dev));
    f2f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f2f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f2f6:	4628      	mov	r0, r5
    f2f8:	4798      	blx	r3
    uint32_t delta_0 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f2fa:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    f2fe:	eba0 0803 	sub.w	r8, r0, r3
    ccp->os_epoch = dpl_cputime_get32();
    f302:	f003 fae2 	bl	128ca <dpl_cputime_get32>
    f306:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    f30a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f30e:	4628      	mov	r0, r5
    f310:	4798      	blx	r3
    uint32_t delta_1 = 0xffffffffU&(uwb_read_systime_lo32(inst) - (uint32_t)(inst->rxtimestamp&0xFFFFFFFFUL));
    f312:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
    f316:	1ac0      	subs	r0, r0, r3
    uint32_t delta = (delta_0>>1) + (delta_1>>1);
    f318:	0840      	lsrs	r0, r0, #1
    f31a:	eb00 0058 	add.w	r0, r0, r8, lsr #1
    ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs(delta>>16));
    f31e:	0c00      	lsrs	r0, r0, #16
    f320:	f015 f950 	bl	245c4 <__aeabi_ui2d>
    f324:	a3e6      	add	r3, pc, #920	; (adr r3, f6c0 <rx_complete_cb+0x490>)
    f326:	e9d3 2300 	ldrd	r2, r3, [r3]
    f32a:	f015 f9c5 	bl	246b8 <__aeabi_dmul>
    f32e:	4680      	mov	r8, r0
    f330:	4689      	mov	r9, r1
    f332:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f336:	f015 f945 	bl	245c4 <__aeabi_ui2d>
    f33a:	4642      	mov	r2, r8
    f33c:	464b      	mov	r3, r9
    f33e:	f015 f803 	bl	24348 <__aeabi_dsub>
    f342:	f015 fc91 	bl	24c68 <__aeabi_d2uiz>
    f346:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    CCP_STATS_SET(irq_latency, uwb_dwt_usecs_to_usecs(delta>>16));
    f34a:	6527      	str	r7, [r4, #80]	; 0x50
    f34c:	2200      	movs	r2, #0
    f34e:	2300      	movs	r3, #0
    f350:	4640      	mov	r0, r8
    f352:	4649      	mov	r1, r9
    f354:	f014 fffa 	bl	2434c <__adddf3>
    f358:	f015 fc86 	bl	24c68 <__aeabi_d2uiz>
    f35c:	6520      	str	r0, [r4, #80]	; 0x50
    CCP_STATS_INC(rx_complete);
    f35e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f360:	3301      	adds	r3, #1
    f362:	62e3      	str	r3, [r4, #44]	; 0x2c
    ccp->status.rx_timeout_error = 0;
    f364:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    f368:	f367 0341 	bfi	r3, r7, #1, #1
    f36c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    f370:	6970      	ldr	r0, [r6, #20]
    f372:	69b2      	ldr	r2, [r6, #24]
    f374:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    f378:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    f37c:	4288      	cmp	r0, r1
    f37e:	eb72 0303 	sbcs.w	r3, r2, r3
    f382:	d30c      	bcc.n	f39e <rx_complete_cb+0x16e>
        frame->euid != ccp->master_euid) {
    f384:	f8d6 0002 	ldr.w	r0, [r6, #2]
    f388:	f8d6 2006 	ldr.w	r2, [r6, #6]
    f38c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    f390:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    if (frame->transmission_timestamp.timestamp < ccp->master_epoch.timestamp ||
    f394:	429a      	cmp	r2, r3
    f396:	bf08      	it	eq
    f398:	4288      	cmpeq	r0, r1
    f39a:	f000 80ce 	beq.w	f53a <rx_complete_cb+0x30a>
        ccp->master_euid = frame->euid;
    f39e:	f8d6 2002 	ldr.w	r2, [r6, #2]
    f3a2:	f8d6 3006 	ldr.w	r3, [r6, #6]
    f3a6:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    f3aa:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        ccp->status.valid = (MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)==0);
    f3ae:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f3b2:	f36f 0382 	bfc	r3, #2, #1
    f3b6:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid_count = 0;
    f3ba:	b2db      	uxtb	r3, r3
    f3bc:	f36f 03c5 	bfc	r3, #3, #3
    f3c0:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    ccp->master_epoch.timestamp = frame->transmission_timestamp.timestamp;
    f3c4:	6972      	ldr	r2, [r6, #20]
    f3c6:	69b3      	ldr	r3, [r6, #24]
    f3c8:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
    f3cc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
    ccp->local_epoch = frame->reception_timestamp = inst->rxtimestamp;
    f3d0:	f8d5 24e8 	ldr.w	r2, [r5, #1256]	; 0x4e8
    f3d4:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
    f3d8:	6232      	str	r2, [r6, #32]
    f3da:	6273      	str	r3, [r6, #36]	; 0x24
    f3dc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f3e0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ccp->period = (frame->transmission_interval >> 16);
    f3e4:	68f3      	ldr	r3, [r6, #12]
    f3e6:	7c32      	ldrb	r2, [r6, #16]
    f3e8:	0c1b      	lsrs	r3, r3, #16
    f3ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f3ee:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    adjust_for_epoch_to_rm(ccp, frame->epoch_to_rm_us);
    f3f2:	8bf1      	ldrh	r1, [r6, #30]
    f3f4:	4620      	mov	r0, r4
    f3f6:	f7ff f823 	bl	e440 <adjust_for_epoch_to_rm>
    frame->carrier_integrator = inst->carrier_integrator;
    f3fa:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
    f3fe:	62b3      	str	r3, [r6, #40]	; 0x28
    if (inst->config.rxttcko_enable) {
    f400:	f995 352c 	ldrsb.w	r3, [r5, #1324]	; 0x52c
    f404:	2b00      	cmp	r3, #0
    f406:	f2c0 80b3 	blt.w	f570 <rx_complete_cb+0x340>
        frame->rxttcko = 0;
    f40a:	2300      	movs	r3, #0
    f40c:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
    f410:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
    f414:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
    f418:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    if (ccp->tof_comp_cb) {
    f41c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    f420:	b19b      	cbz	r3, f44a <rx_complete_cb+0x21a>
        uint32_t tof_comp = ccp->tof_comp_cb(frame->short_address);
    f422:	8970      	ldrh	r0, [r6, #10]
    f424:	4798      	blx	r3
    f426:	4602      	mov	r2, r0
        tof_comp = uwb_ccp_skew_compensation_ui64(ccp, (uint64_t)tof_comp);
    f428:	2300      	movs	r3, #0
    f42a:	4620      	mov	r0, r4
    f42c:	f7ff fee4 	bl	f1f8 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch -= tof_comp;
    f430:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    f434:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
    f438:	1a1b      	subs	r3, r3, r0
    f43a:	f162 0200 	sbc.w	r2, r2, #0
    f43e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    f442:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    f446:	6233      	str	r3, [r6, #32]
    f448:	6272      	str	r2, [r6, #36]	; 0x24
    if (frame->rpt_count != 0) {
    f44a:	7f33      	ldrb	r3, [r6, #28]
    f44c:	2b00      	cmp	r3, #0
    f44e:	d05c      	beq.n	f50a <rx_complete_cb+0x2da>
        CCP_STATS_INC(rx_relayed);
    f450:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f452:	3301      	adds	r3, #1
    f454:	6323      	str	r3, [r4, #48]	; 0x30
        uint64_t master_interval = ((frame->transmission_interval/0x100000000UL+1)*0x100000000UL);
    f456:	f896 c010 	ldrb.w	ip, [r6, #16]
    f45a:	f11c 0c01 	adds.w	ip, ip, #1
    f45e:	2700      	movs	r7, #0
        ccp->period = master_interval>>16;
    f460:	ea4f 430c 	mov.w	r3, ip, lsl #16
    f464:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
        uint64_t repeat_dly = master_interval - frame->transmission_interval;
    f468:	68f1      	ldr	r1, [r6, #12]
    f46a:	f896 e010 	ldrb.w	lr, [r6, #16]
    f46e:	1a7a      	subs	r2, r7, r1
    f470:	eb6c 030e 	sbc.w	r3, ip, lr
        ccp->master_epoch.timestamp = (ccp->master_epoch.timestamp - repeat_dly);
    f474:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
    f478:	9001      	str	r0, [sp, #4]
    f47a:	1bc9      	subs	r1, r1, r7
    f47c:	ebae 0c0c 	sub.w	ip, lr, ip
    f480:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    f484:	1809      	adds	r1, r1, r0
    f486:	9801      	ldr	r0, [sp, #4]
    f488:	eb40 000c 	adc.w	r0, r0, ip
    f48c:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
    f490:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
        repeat_dly = uwb_ccp_skew_compensation_ui64(ccp, repeat_dly);
    f494:	4620      	mov	r0, r4
    f496:	f7ff feaf 	bl	f1f8 <uwb_ccp_skew_compensation_ui64>
        ccp->local_epoch = (ccp->local_epoch - repeat_dly) & 0x0FFFFFFFFFFUL;
    f49a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    f49e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    f4a2:	1a12      	subs	r2, r2, r0
    f4a4:	eb63 0301 	sbc.w	r3, r3, r1
    f4a8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    f4ac:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
    f4b0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
        frame->reception_timestamp = ccp->local_epoch;
    f4b4:	6232      	str	r2, [r6, #32]
    f4b6:	6273      	str	r3, [r6, #36]	; 0x24
        ccp->os_epoch -= dpl_cputime_usecs_to_ticks(uwb_dwt_usecs_to_usecs((repeat_dly >> 16)));
    f4b8:	0c00      	lsrs	r0, r0, #16
    f4ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    f4be:	0c09      	lsrs	r1, r1, #16
    f4c0:	f015 f8c4 	bl	2464c <__aeabi_ul2d>
    f4c4:	a37e      	add	r3, pc, #504	; (adr r3, f6c0 <rx_complete_cb+0x490>)
    f4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4ca:	f015 f8f5 	bl	246b8 <__aeabi_dmul>
    f4ce:	4680      	mov	r8, r0
    f4d0:	4689      	mov	r9, r1
    f4d2:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    f4d6:	f015 f875 	bl	245c4 <__aeabi_ui2d>
    f4da:	4642      	mov	r2, r8
    f4dc:	464b      	mov	r3, r9
    f4de:	f014 ff33 	bl	24348 <__aeabi_dsub>
    f4e2:	f015 fbc1 	bl	24c68 <__aeabi_d2uiz>
    f4e6:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
        frame->carrier_integrator = 0;
    f4ea:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
    f4ee:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
    f4f2:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
    f4f6:	f886 702b 	strb.w	r7, [r6, #43]	; 0x2b
        frame->rxttcko = 0;
    f4fa:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
    f4fe:	f886 702d 	strb.w	r7, [r6, #45]	; 0x2d
    f502:	f886 702e 	strb.w	r7, [r6, #46]	; 0x2e
    f506:	f886 702f 	strb.w	r7, [r6, #47]	; 0x2f
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    f50a:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f50e:	4b6a      	ldr	r3, [pc, #424]	; (f6b8 <rx_complete_cb+0x488>)
    f510:	4013      	ands	r3, r2
    f512:	f1b3 1f04 	cmp.w	r3, #262148	; 0x40004
    f516:	d02f      	beq.n	f578 <rx_complete_cb+0x348>
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
    f518:	f8d5 6530 	ldr.w	r6, [r5, #1328]	; 0x530
    f51c:	2e00      	cmp	r6, #0
    f51e:	f040 80b0 	bne.w	f682 <rx_complete_cb+0x452>
    if (ccp->config.postprocess && ccp->status.valid) {
    f522:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    f526:	4b65      	ldr	r3, [pc, #404]	; (f6bc <rx_complete_cb+0x48c>)
    f528:	4393      	bics	r3, r2
    f52a:	f000 80b4 	beq.w	f696 <rx_complete_cb+0x466>
    f52e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    f532:	f7fa fd9b 	bl	a06c <os_sem_release>
    return false;
    f536:	2000      	movs	r0, #0
    f538:	e0b5      	b.n	f6a6 <rx_complete_cb+0x476>
        if(ccp->status.valid_count < MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1){
    f53a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f53e:	f013 0f38 	tst.w	r3, #56	; 0x38
    f542:	d106      	bne.n	f552 <rx_complete_cb+0x322>
            ccp->status.valid_count++;
    f544:	f3c3 02c2 	ubfx	r2, r3, #3, #3
    f548:	3201      	adds	r2, #1
    f54a:	f362 03c5 	bfi	r3, r2, #3, #3
    f54e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
        ccp->status.valid |= (ccp->status.valid_count == MYNEWT_VAL(UWB_CCP_VALID_THRESHOLD)-1);
    f552:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    f556:	f3c3 0280 	ubfx	r2, r3, #2, #1
    f55a:	f003 0138 	and.w	r1, r3, #56	; 0x38
    f55e:	2908      	cmp	r1, #8
    f560:	bf08      	it	eq
    f562:	f042 0201 	orreq.w	r2, r2, #1
    f566:	f362 0382 	bfi	r3, r2, #2, #1
    f56a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
    f56e:	e729      	b.n	f3c4 <rx_complete_cb+0x194>
        frame->rxttcko = inst->rxttcko;
    f570:	f8d5 34f4 	ldr.w	r3, [r5, #1268]	; 0x4f4
    f574:	62f3      	str	r3, [r6, #44]	; 0x2c
    f576:	e751      	b.n	f41c <rx_complete_cb+0x1ec>
    if (ccp->config.role == CCP_ROLE_RELAY && ccp->status.valid && frame->rpt_count < frame->rpt_max) {
    f578:	f896 e01c 	ldrb.w	lr, [r6, #28]
    f57c:	7f73      	ldrb	r3, [r6, #29]
    f57e:	459e      	cmp	lr, r3
    f580:	d2ca      	bcs.n	f518 <rx_complete_cb+0x2e8>
        memcpy(tx_frame.array, frame->array, sizeof(uwb_ccp_frame_t));
    f582:	4637      	mov	r7, r6
    f584:	f10d 0808 	add.w	r8, sp, #8
    f588:	f106 0930 	add.w	r9, r6, #48	; 0x30
    f58c:	46c4      	mov	ip, r8
    f58e:	6838      	ldr	r0, [r7, #0]
    f590:	6879      	ldr	r1, [r7, #4]
    f592:	68ba      	ldr	r2, [r7, #8]
    f594:	68fb      	ldr	r3, [r7, #12]
    f596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f59a:	3710      	adds	r7, #16
    f59c:	46e0      	mov	r8, ip
    f59e:	454f      	cmp	r7, r9
    f5a0:	d1f4      	bne.n	f58c <rx_complete_cb+0x35c>
        tx_frame.short_address = inst->my_short_address;
    f5a2:	f8b5 34b6 	ldrh.w	r3, [r5, #1206]	; 0x4b6
    f5a6:	f8ad 3012 	strh.w	r3, [sp, #18]
        tx_frame.rpt_count++;
    f5aa:	f10e 0301 	add.w	r3, lr, #1
    f5ae:	b2db      	uxtb	r3, r3
    f5b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        uint64_t tx_timestamp = frame->reception_timestamp;
    f5b4:	6a31      	ldr	r1, [r6, #32]
    f5b6:	6a70      	ldr	r0, [r6, #36]	; 0x24
        tx_timestamp += tx_frame.rpt_count*((uint64_t)ccp->config.tx_holdoff_dly<<16);
    f5b8:	f04f 0800 	mov.w	r8, #0
    f5bc:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
    f5c0:	0412      	lsls	r2, r2, #16
    f5c2:	fba3 3202 	umull	r3, r2, r3, r2
    f5c6:	185b      	adds	r3, r3, r1
    f5c8:	eb42 0000 	adc.w	r0, r2, r0
        tx_timestamp += (inst->slot_id%4)*(((uint64_t)ccp->blink_frame_duration)<<16);
    f5cc:	f8b5 24c2 	ldrh.w	r2, [r5, #1218]	; 0x4c2
    f5d0:	f002 0203 	and.w	r2, r2, #3
    f5d4:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
    f5d8:	0409      	lsls	r1, r1, #16
    f5da:	fba2 2901 	umull	r2, r9, r2, r1
    f5de:	18d3      	adds	r3, r2, r3
    f5e0:	eb49 0900 	adc.w	r9, r9, r0
        tx_timestamp &= 0x0FFFFFFFE00UL;
    f5e4:	f423 77ff 	bic.w	r7, r3, #510	; 0x1fe
    f5e8:	f027 0701 	bic.w	r7, r7, #1
    f5ec:	f009 09ff 	and.w	r9, r9, #255	; 0xff
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    f5f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f5f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    f5f4:	463a      	mov	r2, r7
    f5f6:	464b      	mov	r3, r9
    f5f8:	4628      	mov	r0, r5
    f5fa:	4788      	blx	r1
        tx_timestamp += inst->tx_antenna_delay;
    f5fc:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
    f600:	19df      	adds	r7, r3, r7
    f602:	f149 0900 	adc.w	r9, r9, #0
        uint64_t tx_delay = (tx_timestamp - frame->reception_timestamp);
    f606:	6a32      	ldr	r2, [r6, #32]
    f608:	6a73      	ldr	r3, [r6, #36]	; 0x24
    f60a:	1aba      	subs	r2, r7, r2
        tx_delay = uwb_ccp_skew_compensation_ui64(ccp, tx_delay);
    f60c:	eb69 0303 	sbc.w	r3, r9, r3
    f610:	4620      	mov	r0, r4
    f612:	f7ff fdf1 	bl	f1f8 <uwb_ccp_skew_compensation_ui64>
        tx_frame.transmission_timestamp.timestamp += tx_delay;
    f616:	9b07      	ldr	r3, [sp, #28]
    f618:	181b      	adds	r3, r3, r0
    f61a:	9a08      	ldr	r2, [sp, #32]
    f61c:	eb41 0202 	adc.w	r2, r1, r2
    f620:	9307      	str	r3, [sp, #28]
    f622:	9208      	str	r2, [sp, #32]
        tx_frame.transmission_interval = frame->transmission_interval - tx_delay;
    f624:	68f3      	ldr	r3, [r6, #12]
    f626:	7c32      	ldrb	r2, [r6, #16]
    f628:	1a1b      	subs	r3, r3, r0
    f62a:	eb62 0101 	sbc.w	r1, r2, r1
    f62e:	9305      	str	r3, [sp, #20]
    f630:	f88d 1018 	strb.w	r1, [sp, #24]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f634:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f636:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    f638:	2320      	movs	r3, #32
    f63a:	4642      	mov	r2, r8
    f63c:	a902      	add	r1, sp, #8
    f63e:	4628      	mov	r0, r5
    f640:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f644:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    f646:	4643      	mov	r3, r8
    f648:	4642      	mov	r2, r8
    f64a:	2120      	movs	r1, #32
    f64c:	4628      	mov	r0, r5
    f64e:	47b0      	blx	r6
    return (dev->uw_funcs->uf_start_tx(dev));
    f650:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f654:	4628      	mov	r0, r5
    f656:	4798      	blx	r3
        ccp->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    f658:	f3c0 0380 	ubfx	r3, r0, #2, #1
    f65c:	f894 20c8 	ldrb.w	r2, [r4, #200]	; 0xc8
    f660:	f363 1286 	bfi	r2, r3, #6, #1
    f664:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
        if (ccp->status.start_tx_error){
    f668:	b2d3      	uxtb	r3, r2
    f66a:	f013 0f40 	tst.w	r3, #64	; 0x40
    f66e:	d003      	beq.n	f678 <rx_complete_cb+0x448>
            CCP_STATS_INC(tx_relay_error);
    f670:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    f672:	3301      	adds	r3, #1
    f674:	64a3      	str	r3, [r4, #72]	; 0x48
    f676:	e74f      	b.n	f518 <rx_complete_cb+0x2e8>
            CCP_STATS_INC(tx_relay_ok);
    f678:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f67a:	3301      	adds	r3, #1
    f67c:	64e3      	str	r3, [r4, #76]	; 0x4c
    f67e:	e74b      	b.n	f518 <rx_complete_cb+0x2e8>
        SLIST_FOREACH(lcbs, &inst->interface_cbs, next) {
    f680:	6bb6      	ldr	r6, [r6, #56]	; 0x38
    f682:	2e00      	cmp	r6, #0
    f684:	f43f af4d 	beq.w	f522 <rx_complete_cb+0x2f2>
            if (lcbs != NULL && lcbs->superframe_cb) {
    f688:	6b73      	ldr	r3, [r6, #52]	; 0x34
    f68a:	2b00      	cmp	r3, #0
    f68c:	d0f8      	beq.n	f680 <rx_complete_cb+0x450>
                if(lcbs->superframe_cb((struct uwb_dev*)inst, lcbs)) continue;
    f68e:	4631      	mov	r1, r6
    f690:	4628      	mov	r0, r5
    f692:	4798      	blx	r3
    f694:	e7f4      	b.n	f680 <rx_complete_cb+0x450>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    f696:	f7fa f977 	bl	9988 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f69a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f69e:	f7fa f8c5 	bl	982c <os_eventq_put>
}
    f6a2:	e744      	b.n	f52e <rx_complete_cb+0x2fe>
        return true;
    f6a4:	2001      	movs	r0, #1
}
    f6a6:	b00f      	add	sp, #60	; 0x3c
    f6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
    f6ac:	2000      	movs	r0, #0
    f6ae:	e7fa      	b.n	f6a6 <rx_complete_cb+0x476>
        return true;
    f6b0:	2001      	movs	r0, #1
    f6b2:	e7f8      	b.n	f6a6 <rx_complete_cb+0x476>
    f6b4:	f3af 8000 	nop.w
    f6b8:	001e0004 	.word	0x001e0004
    f6bc:	00010004 	.word	0x00010004
    f6c0:	90690691 	.word	0x90690691
    f6c4:	3ff06906 	.word	0x3ff06906

0000f6c8 <uwb_ccp_pkg_init>:
 *
 * @return void
 */
void
uwb_ccp_pkg_init(void)
{
    f6c8:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp __attribute__((unused));
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_ccp_pkg_init\"}\n",
    f6ca:	f003 f8fe 	bl	128ca <dpl_cputime_get32>
    f6ce:	4601      	mov	r1, r0
    f6d0:	4808      	ldr	r0, [pc, #32]	; (f6f4 <uwb_ccp_pkg_init+0x2c>)
    f6d2:	f001 fbeb 	bl	10eac <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f6d6:	2400      	movs	r4, #0
    f6d8:	e000      	b.n	f6dc <uwb_ccp_pkg_init+0x14>
    f6da:	3401      	adds	r4, #1
    f6dc:	2c02      	cmp	r4, #2
    f6de:	dc08      	bgt.n	f6f2 <uwb_ccp_pkg_init+0x2a>
        udev = uwb_dev_idx_lookup(i);
    f6e0:	4620      	mov	r0, r4
    f6e2:	f7f9 fac7 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d0f7      	beq.n	f6da <uwb_ccp_pkg_init+0x12>
            continue;
        }
        ccp = uwb_ccp_init(udev, 2);
    f6ea:	2102      	movs	r1, #2
    f6ec:	f7ff fbb4 	bl	ee58 <uwb_ccp_init>
    f6f0:	e7f3      	b.n	f6da <uwb_ccp_pkg_init+0x12>
        pr_info("uwbccp: To start service: echo 1 > /sys/kernel/uwbcore/uwbccp%d/role; echo 1 > /sys/kernel/uwbcore/uwbccp%d/enable; cat /dev/uwbccp%d\n",
                udev->idx, udev->idx, udev->idx);
#endif  /* __KERNEL__ */
    }

}
    f6f2:	bd10      	pop	{r4, pc}
    f6f4:	00026b44 	.word	0x00026b44

0000f6f8 <uwb_ccp_pkg_down>:
 *
 * @return void
 */
int
uwb_ccp_pkg_down(int reason)
{
    f6f8:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f6fa:	2400      	movs	r4, #0
    f6fc:	e003      	b.n	f706 <uwb_ccp_pkg_down+0xe>
        }
#if __KERNEL__
        ccp_chrdev_destroy(udev->idx);
        ccp_sysfs_deinit(udev->idx);
#endif
        uwb_ccp_free(ccp);
    f6fe:	4628      	mov	r0, r5
    f700:	f7ff fc9c 	bl	f03c <uwb_ccp_free>
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
    f704:	3401      	adds	r4, #1
    f706:	2c02      	cmp	r4, #2
    f708:	dc12      	bgt.n	f730 <uwb_ccp_pkg_down+0x38>
        udev = uwb_dev_idx_lookup(i);
    f70a:	4620      	mov	r0, r4
    f70c:	f7f9 fab2 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
    f710:	2800      	cmp	r0, #0
    f712:	d0f7      	beq.n	f704 <uwb_ccp_pkg_down+0xc>
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
    f714:	2101      	movs	r1, #1
    f716:	f7f9 fb32 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
    f71a:	4605      	mov	r5, r0
    f71c:	2800      	cmp	r0, #0
    f71e:	d0f1      	beq.n	f704 <uwb_ccp_pkg_down+0xc>
        if (ccp->status.enabled) {
    f720:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
    f724:	f013 0f10 	tst.w	r3, #16
    f728:	d0e9      	beq.n	f6fe <uwb_ccp_pkg_down+0x6>
            uwb_ccp_stop(ccp);
    f72a:	f7ff fd3a 	bl	f1a2 <uwb_ccp_stop>
    f72e:	e7e6      	b.n	f6fe <uwb_ccp_pkg_down+0x6>
    }

    return 0;
}
    f730:	2000      	movs	r0, #0
    f732:	bd38      	pop	{r3, r4, r5, pc}

0000f734 <handle_pan_request>:


static void
handle_pan_request(struct uwb_pan_instance * pan, union pan_frame_t * request)
{
    if (!pan->request_cb) {
    f734:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    f736:	2b00      	cmp	r3, #0
    f738:	d03c      	beq.n	f7b4 <handle_pan_request+0x80>
{
    f73a:	b570      	push	{r4, r5, r6, lr}
    f73c:	4604      	mov	r4, r0
        return;
    }

    union pan_frame_t * response = pan->frames[(pan->idx)%pan->nframes];
    f73e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
    f742:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
    f746:	fbb3 f0f2 	udiv	r0, r3, r2
    f74a:	fb02 3310 	mls	r3, r2, r0, r3
    f74e:	b29b      	uxth	r3, r3
    f750:	3322      	adds	r3, #34	; 0x22
    f752:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    response->code = DWT_PAN_RESP;
    f756:	2302      	movs	r3, #2
    f758:	72eb      	strb	r3, [r5, #11]
    f75a:	2300      	movs	r3, #0
    f75c:	732b      	strb	r3, [r5, #12]

    if (pan->request_cb(request->long_address, &request->req, &response->req)) {
    f75e:	f105 030d 	add.w	r3, r5, #13
    f762:	f101 020d 	add.w	r2, r1, #13
    f766:	f8d1 0002 	ldr.w	r0, [r1, #2]
    f76a:	f8d1 1006 	ldr.w	r1, [r1, #6]
    f76e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    f770:	47b0      	blx	r6
    f772:	b1f0      	cbz	r0, f7b2 <handle_pan_request+0x7e>
        uwb_set_wait4resp(pan->dev_inst, false);
    f774:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    f776:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f77a:	2100      	movs	r1, #0
    f77c:	4798      	blx	r3
        uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    f77e:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f780:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f782:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    f784:	2300      	movs	r3, #0
    f786:	461a      	mov	r2, r3
    f788:	2119      	movs	r1, #25
    f78a:	47b0      	blx	r6
        uwb_write_tx(pan->dev_inst, response->array, 0, sizeof(union pan_frame_t));
    f78c:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f78e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f790:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    f792:	2319      	movs	r3, #25
    f794:	2200      	movs	r2, #0
    f796:	4629      	mov	r1, r5
    f798:	47b0      	blx	r6
        pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    f79a:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_tx(dev));
    f79c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f7a0:	4798      	blx	r3
    f7a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    f7a6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    f7aa:	f360 03c3 	bfi	r3, r0, #3, #1
    f7ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
}
    f7b2:	bd70      	pop	{r4, r5, r6, pc}
    f7b4:	4770      	bx	lr
	...

0000f7b8 <tx_complete_cb>:
 * @return bool
 */
static bool
tx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f7b8:	684b      	ldr	r3, [r1, #4]
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64){
    f7ba:	f890 24e0 	ldrb.w	r2, [r0, #1248]	; 0x4e0
    f7be:	2a56      	cmp	r2, #86	; 0x56
    f7c0:	d10a      	bne.n	f7d8 <tx_complete_cb+0x20>
        return false;
    }
    pan->idx++;
    f7c2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
    f7c6:	3201      	adds	r2, #1
    f7c8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    STATS_INC(g_stat, tx_complete);
    f7cc:	4a03      	ldr	r2, [pc, #12]	; (f7dc <tx_complete_cb+0x24>)
    f7ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f7d0:	3301      	adds	r3, #1
    f7d2:	6293      	str	r3, [r2, #40]	; 0x28
    return true;
    f7d4:	2001      	movs	r0, #1
    f7d6:	4770      	bx	lr
        return false;
    f7d8:	2000      	movs	r0, #0
}
    f7da:	4770      	bx	lr
    f7dc:	20004010 	.word	0x20004010

0000f7e0 <pan_postprocess>:
pan_postprocess(struct dpl_event * ev){
    f7e0:	b508      	push	{r3, lr}
    assert(ev != NULL);
    f7e2:	b110      	cbz	r0, f7ea <pan_postprocess+0xa>
    return ev->ev.ev_arg;
    f7e4:	6883      	ldr	r3, [r0, #8]
    assert(dpl_event_get_arg(ev));
    f7e6:	b133      	cbz	r3, f7f6 <pan_postprocess+0x16>
}
    f7e8:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    f7ea:	2300      	movs	r3, #0
    f7ec:	461a      	mov	r2, r3
    f7ee:	4619      	mov	r1, r3
    f7f0:	4618      	mov	r0, r3
    f7f2:	f7f9 fce7 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    f7f6:	461a      	mov	r2, r3
    f7f8:	4619      	mov	r1, r3
    f7fa:	4618      	mov	r0, r3
    f7fc:	f7f9 fce2 	bl	91c4 <__assert_func>

0000f800 <lease_expiry_cb>:
{
    f800:	b508      	push	{r3, lr}
    assert(ev != NULL);
    f802:	b1d8      	cbz	r0, f83c <lease_expiry_cb+0x3c>
    f804:	6881      	ldr	r1, [r0, #8]
    assert(dpl_event_get_arg(ev));
    f806:	b1f9      	cbz	r1, f848 <lease_expiry_cb+0x48>
    STATS_INC(g_stat, lease_expiry);
    f808:	4a15      	ldr	r2, [pc, #84]	; (f860 <lease_expiry_cb+0x60>)
    f80a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    f80c:	3301      	adds	r3, #1
    f80e:	6253      	str	r3, [r2, #36]	; 0x24
    pan->status.valid = false;
    f810:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    f814:	f36f 0382 	bfc	r3, #2, #1
    f818:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->status.lease_expired = true;
    f81c:	b2db      	uxtb	r3, r3
    f81e:	f043 0310 	orr.w	r3, r3, #16
    f822:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    pan->dev_inst->slot_id = 0xffff;
    f826:	680b      	ldr	r3, [r1, #0]
    f828:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f82c:	f8a3 24c2 	strh.w	r2, [r3, #1218]	; 0x4c2
    if (pan->control.postprocess) {
    f830:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
    f834:	f013 0f01 	tst.w	r3, #1
    f838:	d10c      	bne.n	f854 <lease_expiry_cb+0x54>
}
    f83a:	bd08      	pop	{r3, pc}
    assert(ev != NULL);
    f83c:	2300      	movs	r3, #0
    f83e:	461a      	mov	r2, r3
    f840:	4619      	mov	r1, r3
    f842:	4618      	mov	r0, r3
    f844:	f7f9 fcbe 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev));
    f848:	2300      	movs	r3, #0
    f84a:	461a      	mov	r2, r3
    f84c:	4619      	mov	r1, r3
    f84e:	4618      	mov	r0, r3
    f850:	f7f9 fcb8 	bl	91c4 <__assert_func>
        dpl_eventq_put(&pan->dev_inst->eventq, &pan->postprocess_event);
    f854:	f851 0b50 	ldr.w	r0, [r1], #80
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    f858:	303c      	adds	r0, #60	; 0x3c
    f85a:	f7f9 ffe7 	bl	982c <os_eventq_put>
}
    f85e:	e7ec      	b.n	f83a <lease_expiry_cb+0x3a>
    f860:	20004010 	.word	0x20004010

0000f864 <reset_cb>:
 *
 * @return bool
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    f864:	b508      	push	{r3, lr}
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f866:	6848      	ldr	r0, [r1, #4]
    f868:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 0){
    f86c:	b10b      	cbz	r3, f872 <reset_cb+0xe>
        STATS_INC(g_stat, reset);
        dpl_error_t err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
        return true;
    }
    return false;
    f86e:	2000      	movs	r0, #0
}
    f870:	bd08      	pop	{r3, pc}
        STATS_INC(g_stat, reset);
    f872:	4a08      	ldr	r2, [pc, #32]	; (f894 <reset_cb+0x30>)
    f874:	6c53      	ldr	r3, [r2, #68]	; 0x44
    f876:	3301      	adds	r3, #1
    f878:	6453      	str	r3, [r2, #68]	; 0x44
    return (dpl_error_t)os_sem_release(&sem->sem);
    f87a:	3040      	adds	r0, #64	; 0x40
    f87c:	f7fa fbf6 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    f880:	b908      	cbnz	r0, f886 <reset_cb+0x22>
        return true;
    f882:	2001      	movs	r0, #1
    f884:	e7f4      	b.n	f870 <reset_cb+0xc>
        assert(err == DPL_OK);
    f886:	2300      	movs	r3, #0
    f888:	461a      	mov	r2, r3
    f88a:	4619      	mov	r1, r3
    f88c:	4618      	mov	r0, r3
    f88e:	f7f9 fc99 	bl	91c4 <__assert_func>
    f892:	bf00      	nop
    f894:	20004010 	.word	0x20004010

0000f898 <rx_timeout_cb>:
 *
 * @return bool
 */
static bool
rx_timeout_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
    f898:	b508      	push	{r3, lr}
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f89a:	6848      	ldr	r0, [r1, #4]
    f89c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 0){
    f8a0:	b10b      	cbz	r3, f8a6 <rx_timeout_cb+0xe>
        STATS_INC(g_stat, rx_timeout);
        dpl_error_t err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
        return true;
    }
    return false;
    f8a2:	2000      	movs	r0, #0
}
    f8a4:	bd08      	pop	{r3, pc}
        STATS_INC(g_stat, rx_timeout);
    f8a6:	4a08      	ldr	r2, [pc, #32]	; (f8c8 <rx_timeout_cb+0x30>)
    f8a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    f8aa:	3301      	adds	r3, #1
    f8ac:	6413      	str	r3, [r2, #64]	; 0x40
    f8ae:	3040      	adds	r0, #64	; 0x40
    f8b0:	f7fa fbdc 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    f8b4:	b908      	cbnz	r0, f8ba <rx_timeout_cb+0x22>
        return true;
    f8b6:	2001      	movs	r0, #1
    f8b8:	e7f4      	b.n	f8a4 <rx_timeout_cb+0xc>
        assert(err == DPL_OK);
    f8ba:	2300      	movs	r3, #0
    f8bc:	461a      	mov	r2, r3
    f8be:	4619      	mov	r1, r3
    f8c0:	4618      	mov	r0, r3
    f8c2:	f7f9 fc7f 	bl	91c4 <__assert_func>
    f8c6:	bf00      	nop
    f8c8:	20004010 	.word	0x20004010

0000f8cc <rx_complete_cb>:
{
    f8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ce:	b083      	sub	sp, #12
    struct uwb_pan_instance * pan = (struct uwb_pan_instance *)cbs->inst_ptr;
    f8d0:	684d      	ldr	r5, [r1, #4]
    if(inst->fctrl_array[0] != FCNTL_IEEE_BLINK_TAG_64) {
    f8d2:	f890 34e0 	ldrb.w	r3, [r0, #1248]	; 0x4e0
    f8d6:	2b56      	cmp	r3, #86	; 0x56
    f8d8:	d00f      	beq.n	f8fa <rx_complete_cb+0x2e>
    f8da:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
        if (dpl_sem_get_count(&pan->sem) == 0) {
    f8de:	b113      	cbz	r3, f8e6 <rx_complete_cb+0x1a>
        return false;
    f8e0:	2000      	movs	r0, #0
}
    f8e2:	b003      	add	sp, #12
    f8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            STATS_INC(g_stat, rx_other_frame);
    f8e6:	4a92      	ldr	r2, [pc, #584]	; (fb30 <rx_complete_cb+0x264>)
    f8e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
    f8ea:	3301      	adds	r3, #1
    f8ec:	6353      	str	r3, [r2, #52]	; 0x34
    f8ee:	f105 0040 	add.w	r0, r5, #64	; 0x40
    f8f2:	f7fa fbbb 	bl	a06c <os_sem_release>
            return false;
    f8f6:	2000      	movs	r0, #0
    f8f8:	e7f3      	b.n	f8e2 <rx_complete_cb+0x16>
    f8fa:	4604      	mov	r4, r0
    f8fc:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 1){
    f900:	2b01      	cmp	r3, #1
    f902:	d015      	beq.n	f930 <rx_complete_cb+0x64>
    STATS_INC(g_stat, rx_complete);
    f904:	4a8a      	ldr	r2, [pc, #552]	; (fb30 <rx_complete_cb+0x264>)
    f906:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    f908:	3301      	adds	r3, #1
    f90a:	62d3      	str	r3, [r2, #44]	; 0x2c
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    f90c:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    f910:	f8b5 2084 	ldrh.w	r2, [r5, #132]	; 0x84
    f914:	fbb3 f1f2 	udiv	r1, r3, r2
    f918:	fb02 3311 	mls	r3, r2, r1, r3
    f91c:	b29b      	uxth	r3, r3
    f91e:	3322      	adds	r3, #34	; 0x22
    f920:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
    if (inst->frame_len > sizeof(union pan_frame_t)) {
    f924:	f8b0 24e2 	ldrh.w	r2, [r0, #1250]	; 0x4e2
    f928:	2a19      	cmp	r2, #25
    f92a:	d907      	bls.n	f93c <rx_complete_cb+0x70>
        return false;
    f92c:	2000      	movs	r0, #0
    f92e:	e7d8      	b.n	f8e2 <rx_complete_cb+0x16>
        STATS_INC(g_stat, rx_unsolicited);
    f930:	4a7f      	ldr	r2, [pc, #508]	; (fb30 <rx_complete_cb+0x264>)
    f932:	6b13      	ldr	r3, [r2, #48]	; 0x30
    f934:	3301      	adds	r3, #1
    f936:	6313      	str	r3, [r2, #48]	; 0x30
        return false;
    f938:	2000      	movs	r0, #0
    f93a:	e7d2      	b.n	f8e2 <rx_complete_cb+0x16>
    memcpy(frame->array, inst->rxbuf, inst->frame_len);
    f93c:	f8d0 14fc 	ldr.w	r1, [r0, #1276]	; 0x4fc
    f940:	4630      	mov	r0, r6
    f942:	f000 fe8d 	bl	10660 <memcpy>
    if (pan->config->role == UWB_PAN_ROLE_RELAY &&
    f946:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    f94a:	7adb      	ldrb	r3, [r3, #11]
    f94c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    f950:	2b30      	cmp	r3, #48	; 0x30
    f952:	d00a      	beq.n	f96a <rx_complete_cb+0x9e>
    switch(frame->code) {
    f954:	f8b6 300b 	ldrh.w	r3, [r6, #11]
    f958:	2b02      	cmp	r3, #2
    f95a:	d062      	beq.n	fa22 <rx_complete_cb+0x156>
    f95c:	2b03      	cmp	r3, #3
    f95e:	f000 80af 	beq.w	fac0 <rx_complete_cb+0x1f4>
    f962:	2b01      	cmp	r3, #1
    f964:	d03e      	beq.n	f9e4 <rx_complete_cb+0x118>
    f966:	2000      	movs	r0, #0
    f968:	e7bb      	b.n	f8e2 <rx_complete_cb+0x16>
        frame->rpt_count < frame->rpt_max &&
    f96a:	7ab3      	ldrb	r3, [r6, #10]
    f96c:	f003 020f 	and.w	r2, r3, #15
    if (pan->config->role == UWB_PAN_ROLE_RELAY &&
    f970:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
    f974:	d2ee      	bcs.n	f954 <rx_complete_cb+0x88>
        frame->long_address != inst->my_long_address) {
    f976:	f8d6 c002 	ldr.w	ip, [r6, #2]
    f97a:	f8d6 1006 	ldr.w	r1, [r6, #6]
    f97e:	f8d4 04b8 	ldr.w	r0, [r4, #1208]	; 0x4b8
    f982:	f8d4 34bc 	ldr.w	r3, [r4, #1212]	; 0x4bc
        frame->rpt_count < frame->rpt_max &&
    f986:	4299      	cmp	r1, r3
    f988:	bf08      	it	eq
    f98a:	4584      	cmpeq	ip, r0
    f98c:	d0e2      	beq.n	f954 <rx_complete_cb+0x88>
        frame->rpt_count++;
    f98e:	3201      	adds	r2, #1
    f990:	7ab3      	ldrb	r3, [r6, #10]
    f992:	f362 0303 	bfi	r3, r2, #0, #4
    f996:	72b3      	strb	r3, [r6, #10]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    f998:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f99c:	2101      	movs	r1, #1
    f99e:	4620      	mov	r0, r4
    f9a0:	4798      	blx	r3
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    f9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9a4:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    f9a6:	2300      	movs	r3, #0
    f9a8:	461a      	mov	r2, r3
    f9aa:	f8b4 14e2 	ldrh.w	r1, [r4, #1250]	; 0x4e2
    f9ae:	4620      	mov	r0, r4
    f9b0:	47b8      	blx	r7
    return (dev->uw_funcs->uf_start_tx(dev));
    f9b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f9b6:	4620      	mov	r0, r4
    f9b8:	4798      	blx	r3
        pan->status.start_tx_error = uwb_start_tx(inst).start_tx_error;
    f9ba:	f3c0 0380 	ubfx	r3, r0, #2, #1
    f9be:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
    f9c2:	f363 02c3 	bfi	r2, r3, #3, #1
    f9c6:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    f9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9cc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    f9ce:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
    f9d2:	2200      	movs	r2, #0
    f9d4:	4631      	mov	r1, r6
    f9d6:	4620      	mov	r0, r4
    f9d8:	47b8      	blx	r7
        STATS_INC(g_stat, relay_tx);
    f9da:	4a55      	ldr	r2, [pc, #340]	; (fb30 <rx_complete_cb+0x264>)
    f9dc:	6a13      	ldr	r3, [r2, #32]
    f9de:	3301      	adds	r3, #1
    f9e0:	6213      	str	r3, [r2, #32]
    f9e2:	e7b7      	b.n	f954 <rx_complete_cb+0x88>
        STATS_INC(g_stat, pan_request);
    f9e4:	4a52      	ldr	r2, [pc, #328]	; (fb30 <rx_complete_cb+0x264>)
    f9e6:	6953      	ldr	r3, [r2, #20]
    f9e8:	3301      	adds	r3, #1
    f9ea:	6153      	str	r3, [r2, #20]
        if (pan->config->role == UWB_PAN_ROLE_MASTER) {
    f9ec:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    f9f0:	7adb      	ldrb	r3, [r3, #11]
    f9f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    f9f6:	2b10      	cmp	r3, #16
    f9f8:	f040 8096 	bne.w	fb28 <rx_complete_cb+0x25c>
    return (dev->uw_funcs->uf_stop_rx(dev));
    f9fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f9fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    fa00:	4620      	mov	r0, r4
    fa02:	4798      	blx	r3
            handle_pan_request(pan, frame);
    fa04:	4631      	mov	r1, r6
    fa06:	4628      	mov	r0, r5
    fa08:	f7ff fe94 	bl	f734 <handle_pan_request>
    if (pan->control.postprocess) {
    fa0c:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
    fa10:	f013 0f01 	tst.w	r3, #1
    fa14:	d174      	bne.n	fb00 <rx_complete_cb+0x234>
    fa16:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
    if (dpl_sem_get_count(&pan->sem) == 0) {
    fa1a:	2b00      	cmp	r3, #0
    fa1c:	d077      	beq.n	fb0e <rx_complete_cb+0x242>
    return true;
    fa1e:	2001      	movs	r0, #1
    fa20:	e75f      	b.n	f8e2 <rx_complete_cb+0x16>
        if(frame->long_address == inst->my_long_address){
    fa22:	f8d6 0002 	ldr.w	r0, [r6, #2]
    fa26:	f8d6 2006 	ldr.w	r2, [r6, #6]
    fa2a:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
    fa2e:	f8d4 34bc 	ldr.w	r3, [r4, #1212]	; 0x4bc
    fa32:	429a      	cmp	r2, r3
    fa34:	bf08      	it	eq
    fa36:	4288      	cmpeq	r0, r1
    fa38:	d001      	beq.n	fa3e <rx_complete_cb+0x172>
            return true;
    fa3a:	2001      	movs	r0, #1
    fa3c:	e751      	b.n	f8e2 <rx_complete_cb+0x16>
            inst->uid = frame->req.short_address;
    fa3e:	f8b6 3013 	ldrh.w	r3, [r6, #19]
    fa42:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
            inst->pan_id = frame->req.pan_id;
    fa46:	f8b6 3011 	ldrh.w	r3, [r6, #17]
    fa4a:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
            inst->slot_id = frame->req.slot_id;
    fa4e:	f8b6 3015 	ldrh.w	r3, [r6, #21]
    fa52:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
            pan->status.valid = true;
    fa56:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    fa5a:	f043 0304 	orr.w	r3, r3, #4
    fa5e:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            pan->status.lease_expired = false;
    fa62:	b2db      	uxtb	r3, r3
    fa64:	f36f 1304 	bfc	r3, #4, #1
    fa68:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
    os_callout_stop(&co->co);
    fa6c:	f105 0760 	add.w	r7, r5, #96	; 0x60
    fa70:	4638      	mov	r0, r7
    fa72:	f7f9 fd3b 	bl	94ec <os_callout_stop>
            if (frame->req.lease_time > 0) {
    fa76:	f8b6 600f 	ldrh.w	r6, [r6, #15]
    fa7a:	2e00      	cmp	r6, #0
    fa7c:	d0c6      	beq.n	fa0c <rx_complete_cb+0x140>
                lease_us = (uint32_t)(frame->req.lease_time)*1000000;
    fa7e:	482d      	ldr	r0, [pc, #180]	; (fb34 <rx_complete_cb+0x268>)
    fa80:	fb00 f606 	mul.w	r6, r0, r6
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
    fa84:	2101      	movs	r1, #1
    fa86:	4620      	mov	r0, r4
    fa88:	f7f9 f979 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
                lease_us -= (inst->rxtimestamp>>16) - (ccp->local_epoch>>16);
    fa8c:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
    fa90:	f8b0 30da 	ldrh.w	r3, [r0, #218]	; 0xda
    fa94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    fa98:	f8d4 14ec 	ldr.w	r1, [r4, #1260]	; 0x4ec
    fa9c:	f8b4 04ea 	ldrh.w	r0, [r4, #1258]	; 0x4ea
    faa0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    faa4:	1a18      	subs	r0, r3, r0
    faa6:	4430      	add	r0, r6
                dpl_time_ms_to_ticks(lease_us/1000, &exp_tics);
    faa8:	4b23      	ldr	r3, [pc, #140]	; (fb38 <rx_complete_cb+0x26c>)
    faaa:	fba3 3000 	umull	r3, r0, r3, r0
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    faae:	a901      	add	r1, sp, #4
    fab0:	0980      	lsrs	r0, r0, #6
    fab2:	f7fa fdb6 	bl	a622 <os_time_ms_to_ticks>
    return (dpl_error_t)os_callout_reset(&co->co, ticks);
    fab6:	9901      	ldr	r1, [sp, #4]
    fab8:	4638      	mov	r0, r7
    faba:	f7f9 fd35 	bl	9528 <os_callout_reset>
    fabe:	e7a5      	b.n	fa0c <rx_complete_cb+0x140>
        STATS_INC(g_stat, pan_reset);
    fac0:	4a1b      	ldr	r2, [pc, #108]	; (fb30 <rx_complete_cb+0x264>)
    fac2:	69d3      	ldr	r3, [r2, #28]
    fac4:	3301      	adds	r3, #1
    fac6:	61d3      	str	r3, [r2, #28]
        if (pan->config->role != UWB_PAN_ROLE_MASTER) {
    fac8:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    facc:	7adb      	ldrb	r3, [r3, #11]
    face:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    fad2:	2b10      	cmp	r3, #16
    fad4:	d02a      	beq.n	fb2c <rx_complete_cb+0x260>
            pan->status.valid = false;
    fad6:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
    fada:	f36f 0382 	bfc	r3, #2, #1
    fade:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            pan->status.lease_expired = true;
    fae2:	b2db      	uxtb	r3, r3
    fae4:	f043 0310 	orr.w	r3, r3, #16
    fae8:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            inst->slot_id = 0xffff;
    faec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    faf0:	f8a4 34c2 	strh.w	r3, [r4, #1218]	; 0x4c2
    os_callout_stop(&co->co);
    faf4:	f105 0060 	add.w	r0, r5, #96	; 0x60
    faf8:	f7f9 fcf8 	bl	94ec <os_callout_stop>
        return false;
    fafc:	2000      	movs	r0, #0
}
    fafe:	e6f0      	b.n	f8e2 <rx_complete_cb+0x16>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
    fb00:	f105 0150 	add.w	r1, r5, #80	; 0x50
    fb04:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    fb08:	f7f9 fe90 	bl	982c <os_eventq_put>
}
    fb0c:	e783      	b.n	fa16 <rx_complete_cb+0x14a>
    return (dpl_error_t)os_sem_release(&sem->sem);
    fb0e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    fb12:	f7fa faab 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    fb16:	b908      	cbnz	r0, fb1c <rx_complete_cb+0x250>
    return true;
    fb18:	2001      	movs	r0, #1
    fb1a:	e6e2      	b.n	f8e2 <rx_complete_cb+0x16>
        assert(err == DPL_OK);
    fb1c:	2300      	movs	r3, #0
    fb1e:	461a      	mov	r2, r3
    fb20:	4619      	mov	r1, r3
    fb22:	4618      	mov	r0, r3
    fb24:	f7f9 fb4e 	bl	91c4 <__assert_func>
            return true;
    fb28:	2001      	movs	r0, #1
    fb2a:	e6da      	b.n	f8e2 <rx_complete_cb+0x16>
            return false;
    fb2c:	2000      	movs	r0, #0
    fb2e:	e6d8      	b.n	f8e2 <rx_complete_cb+0x16>
    fb30:	20004010 	.word	0x20004010
    fb34:	000f4240 	.word	0x000f4240
    fb38:	10624dd3 	.word	0x10624dd3

0000fb3c <uwb_pan_init>:
{
    fb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(inst);
    fb3e:	b330      	cbz	r0, fb8e <uwb_pan_init+0x52>
    fb40:	460f      	mov	r7, r1
    fb42:	4616      	mov	r6, r2
    fb44:	4605      	mov	r5, r0
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_PAN);
    fb46:	2111      	movs	r1, #17
    fb48:	f7f9 f919 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (pan == NULL ) {
    fb4c:	4604      	mov	r4, r0
    fb4e:	b320      	cbz	r0, fb9a <uwb_pan_init+0x5e>
    pan->dev_inst = inst;
    fb50:	6025      	str	r5, [r4, #0]
    pan->config = config;
    fb52:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    pan->control = (struct uwb_pan_control_t){0};
    fb56:	2300      	movs	r3, #0
    fb58:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
    fb5c:	2101      	movs	r1, #1
    fb5e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fb62:	f7fa fa7b 	bl	a05c <os_sem_init>
    assert(err == DPL_OK);
    fb66:	bb90      	cbnz	r0, fbce <uwb_pan_init+0x92>
    uwb_pan_set_postprocess(pan, pan_postprocess);
    fb68:	491c      	ldr	r1, [pc, #112]	; (fbdc <uwb_pan_init+0xa0>)
    fb6a:	4620      	mov	r0, r4
    fb6c:	f7fc fa22 	bl	bfb4 <uwb_pan_set_postprocess>
    pan->request_cb = 0;
    fb70:	2300      	movs	r3, #0
    fb72:	64e3      	str	r3, [r4, #76]	; 0x4c
    pan->status.valid = true;
    fb74:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    fb78:	f043 0304 	orr.w	r3, r3, #4
    fb7c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    pan->status.initialized = 1;
    fb80:	b2db      	uxtb	r3, r3
    fb82:	f043 0302 	orr.w	r3, r3, #2
    fb86:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    fb8a:	4620      	mov	r0, r4
    fb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(inst);
    fb8e:	2300      	movs	r3, #0
    fb90:	461a      	mov	r2, r3
    fb92:	4619      	mov	r1, r3
    fb94:	4618      	mov	r0, r3
    fb96:	f7f9 fb15 	bl	91c4 <__assert_func>
        pan = (struct uwb_pan_instance *) malloc(sizeof(struct uwb_pan_instance) + nframes * sizeof(union pan_frame_t *));
    fb9a:	f106 0022 	add.w	r0, r6, #34	; 0x22
    fb9e:	0080      	lsls	r0, r0, #2
    fba0:	f000 fcee 	bl	10580 <malloc>
        assert(pan);
    fba4:	4604      	mov	r4, r0
    fba6:	b160      	cbz	r0, fbc2 <uwb_pan_init+0x86>
        memset(pan, 0, sizeof(struct uwb_pan_instance));
    fba8:	2288      	movs	r2, #136	; 0x88
    fbaa:	2100      	movs	r1, #0
    fbac:	f000 fd65 	bl	1067a <memset>
        pan->status.selfmalloc = 1;
    fbb0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    fbb4:	f043 0301 	orr.w	r3, r3, #1
    fbb8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        pan->nframes = nframes;
    fbbc:	f8a4 6084 	strh.w	r6, [r4, #132]	; 0x84
    fbc0:	e7c6      	b.n	fb50 <uwb_pan_init+0x14>
        assert(pan);
    fbc2:	2300      	movs	r3, #0
    fbc4:	461a      	mov	r2, r3
    fbc6:	4619      	mov	r1, r3
    fbc8:	4618      	mov	r0, r3
    fbca:	f7f9 fafb 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
    fbce:	2300      	movs	r3, #0
    fbd0:	461a      	mov	r2, r3
    fbd2:	4619      	mov	r1, r3
    fbd4:	4618      	mov	r0, r3
    fbd6:	f7f9 faf5 	bl	91c4 <__assert_func>
    fbda:	bf00      	nop
    fbdc:	0000f7e1 	.word	0x0000f7e1

0000fbe0 <uwb_pan_set_frames>:
{
    fbe0:	b510      	push	{r4, lr}
    assert(nframes <= pan->nframes);
    fbe2:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
    fbe6:	4293      	cmp	r3, r2
    fbe8:	d301      	bcc.n	fbee <uwb_pan_set_frames+0xe>
    for (uint16_t i = 0; i < nframes; i++)
    fbea:	2300      	movs	r3, #0
    fbec:	e011      	b.n	fc12 <uwb_pan_set_frames+0x32>
    assert(nframes <= pan->nframes);
    fbee:	2300      	movs	r3, #0
    fbf0:	461a      	mov	r2, r3
    fbf2:	4619      	mov	r1, r3
    fbf4:	4618      	mov	r0, r3
    fbf6:	f7f9 fae5 	bl	91c4 <__assert_func>
        pan->frames[i] = &pan_f[i];
    fbfa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    fbfe:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    fc02:	eb01 040c 	add.w	r4, r1, ip
    fc06:	f103 0c22 	add.w	ip, r3, #34	; 0x22
    fc0a:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
    for (uint16_t i = 0; i < nframes; i++)
    fc0e:	3301      	adds	r3, #1
    fc10:	b29b      	uxth	r3, r3
    fc12:	4293      	cmp	r3, r2
    fc14:	d3f1      	bcc.n	fbfa <uwb_pan_set_frames+0x1a>
}
    fc16:	bd10      	pop	{r4, pc}

0000fc18 <uwb_pan_pkg_init>:
{
    fc18:	b570      	push	{r4, r5, r6, lr}
    fc1a:	b082      	sub	sp, #8
    printf("{\"utime\": %"PRIu32",\"msg\": \"pan_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    fc1c:	f002 fe55 	bl	128ca <dpl_cputime_get32>
    fc20:	4601      	mov	r1, r0
    fc22:	481b      	ldr	r0, [pc, #108]	; (fc90 <uwb_pan_pkg_init+0x78>)
    fc24:	f001 f942 	bl	10eac <printf>
    dpl_error_t rc = stats_init(
    fc28:	4d1a      	ldr	r5, [pc, #104]	; (fc94 <uwb_pan_pkg_init+0x7c>)
    fc2a:	220d      	movs	r2, #13
    fc2c:	9200      	str	r2, [sp, #0]
    fc2e:	4b1a      	ldr	r3, [pc, #104]	; (fc98 <uwb_pan_pkg_init+0x80>)
    fc30:	2104      	movs	r1, #4
    fc32:	4628      	mov	r0, r5
    fc34:	f006 fa86 	bl	16144 <stats_init>
    fc38:	4604      	mov	r4, r0
    rc |= stats_register("pan", STATS_HDR(g_stat));
    fc3a:	4629      	mov	r1, r5
    fc3c:	4817      	ldr	r0, [pc, #92]	; (fc9c <uwb_pan_pkg_init+0x84>)
    fc3e:	f006 fb05 	bl	1624c <stats_register>
    fc42:	4320      	orrs	r0, r4
    fc44:	b240      	sxtb	r0, r0
    assert(rc == DPL_OK);
    fc46:	b9e8      	cbnz	r0, fc84 <uwb_pan_pkg_init+0x6c>
    udev = uwb_dev_idx_lookup(0);
    fc48:	2000      	movs	r0, #0
    fc4a:	f7f9 f813 	bl	8c74 <uwb_dev_idx_lookup>
    fc4e:	4605      	mov	r5, r0
    g_cbs[0].inst_ptr = pan = uwb_pan_init(udev, &g_config, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    fc50:	2202      	movs	r2, #2
    fc52:	4913      	ldr	r1, [pc, #76]	; (fca0 <uwb_pan_pkg_init+0x88>)
    fc54:	f7ff ff72 	bl	fb3c <uwb_pan_init>
    fc58:	4604      	mov	r4, r0
    fc5a:	4e12      	ldr	r6, [pc, #72]	; (fca4 <uwb_pan_pkg_init+0x8c>)
    fc5c:	6070      	str	r0, [r6, #4]
    uwb_pan_set_frames(pan, g_pan_0, sizeof(g_pan_0)/sizeof(union pan_frame_t));
    fc5e:	2202      	movs	r2, #2
    fc60:	4911      	ldr	r1, [pc, #68]	; (fca8 <uwb_pan_pkg_init+0x90>)
    fc62:	f7ff ffbd 	bl	fbe0 <uwb_pan_set_frames>
    uwb_mac_append_interface(udev, &g_cbs[0]);
    fc66:	4631      	mov	r1, r6
    fc68:	4628      	mov	r0, r5
    fc6a:	f7f9 f833 	bl	8cd4 <uwb_mac_append_interface>
    return (struct dpl_eventq *) os_eventq_dflt_get();
    fc6e:	f7f9 fe8b 	bl	9988 <os_eventq_dflt_get>
    fc72:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    fc74:	4623      	mov	r3, r4
    fc76:	4a0d      	ldr	r2, [pc, #52]	; (fcac <uwb_pan_pkg_init+0x94>)
    fc78:	f104 0060 	add.w	r0, r4, #96	; 0x60
    fc7c:	f7f9 fc28 	bl	94d0 <os_callout_init>
}
    fc80:	b002      	add	sp, #8
    fc82:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == DPL_OK);
    fc84:	2300      	movs	r3, #0
    fc86:	461a      	mov	r2, r3
    fc88:	4619      	mov	r1, r3
    fc8a:	4618      	mov	r0, r3
    fc8c:	f7f9 fa9a 	bl	91c4 <__assert_func>
    fc90:	00026cb0 	.word	0x00026cb0
    fc94:	20004010 	.word	0x20004010
    fc98:	00026d1c 	.word	0x00026d1c
    fc9c:	00026cd8 	.word	0x00026cd8
    fca0:	200001f8 	.word	0x200001f8
    fca4:	200001bc 	.word	0x200001bc
    fca8:	20000208 	.word	0x20000208
    fcac:	0000f801 	.word	0x0000f801

0000fcb0 <uwb_pan_listen>:
 *
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
uwb_pan_listen(struct uwb_pan_instance * pan, uwb_dev_modes_t mode)
{
    fcb0:	b570      	push	{r4, r5, r6, lr}
    fcb2:	4604      	mov	r4, r0
    fcb4:	460e      	mov	r6, r1
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fcb6:	f100 0540 	add.w	r5, r0, #64	; 0x40
    fcba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fcbe:	4628      	mov	r0, r5
    fcc0:	f7fa fa06 	bl	a0d0 <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&pan->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    fcc4:	b978      	cbnz	r0, fce6 <uwb_pan_listen+0x36>

    STATS_INC(g_stat, pan_listen);
    fcc6:	4a1e      	ldr	r2, [pc, #120]	; (fd40 <uwb_pan_listen+0x90>)
    fcc8:	6993      	ldr	r3, [r2, #24]
    fcca:	3301      	adds	r3, #1
    fccc:	6193      	str	r3, [r2, #24]

    if(uwb_start_rx(pan->dev_inst).start_rx_error){
    fcce:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_rx(dev));
    fcd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fcd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    fcd4:	4798      	blx	r3
    fcd6:	f010 0f08 	tst.w	r0, #8
    fcda:	d10a      	bne.n	fcf2 <uwb_pan_listen+0x42>
        STATS_INC(g_stat, rx_error);
        err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }

    if (mode == UWB_BLOCKING){
    fcdc:	b1c6      	cbz	r6, fd10 <uwb_pan_listen+0x60>
        assert(err == DPL_OK);
        err = dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }

    return pan->dev_inst->status;
    fcde:	6823      	ldr	r3, [r4, #0]
}
    fce0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    fce4:	bd70      	pop	{r4, r5, r6, pc}
    assert(err == DPL_OK);
    fce6:	2300      	movs	r3, #0
    fce8:	461a      	mov	r2, r3
    fcea:	4619      	mov	r1, r3
    fcec:	4618      	mov	r0, r3
    fcee:	f7f9 fa69 	bl	91c4 <__assert_func>
        STATS_INC(g_stat, rx_error);
    fcf2:	4a13      	ldr	r2, [pc, #76]	; (fd40 <uwb_pan_listen+0x90>)
    fcf4:	6b93      	ldr	r3, [r2, #56]	; 0x38
    fcf6:	3301      	adds	r3, #1
    fcf8:	6393      	str	r3, [r2, #56]	; 0x38
    return (dpl_error_t)os_sem_release(&sem->sem);
    fcfa:	4628      	mov	r0, r5
    fcfc:	f7fa f9b6 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    fd00:	2800      	cmp	r0, #0
    fd02:	d0eb      	beq.n	fcdc <uwb_pan_listen+0x2c>
    fd04:	2300      	movs	r3, #0
    fd06:	461a      	mov	r2, r3
    fd08:	4619      	mov	r1, r3
    fd0a:	4618      	mov	r0, r3
    fd0c:	f7f9 fa5a 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fd10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd14:	4628      	mov	r0, r5
    fd16:	f7fa f9db 	bl	a0d0 <os_sem_pend>
        assert(err == DPL_OK);
    fd1a:	b950      	cbnz	r0, fd32 <uwb_pan_listen+0x82>
    return (dpl_error_t)os_sem_release(&sem->sem);
    fd1c:	4628      	mov	r0, r5
    fd1e:	f7fa f9a5 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    fd22:	2800      	cmp	r0, #0
    fd24:	d0db      	beq.n	fcde <uwb_pan_listen+0x2e>
    fd26:	2300      	movs	r3, #0
    fd28:	461a      	mov	r2, r3
    fd2a:	4619      	mov	r1, r3
    fd2c:	4618      	mov	r0, r3
    fd2e:	f7f9 fa49 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
    fd32:	2300      	movs	r3, #0
    fd34:	461a      	mov	r2, r3
    fd36:	4619      	mov	r1, r3
    fd38:	4618      	mov	r0, r3
    fd3a:	f7f9 fa43 	bl	91c4 <__assert_func>
    fd3e:	bf00      	nop
    fd40:	20004010 	.word	0x20004010

0000fd44 <uwb_pan_blink>:
 * @return uwb_pan_status_t
 */
struct uwb_pan_status_t
uwb_pan_blink(struct uwb_pan_instance *pan, uint16_t role,
                 uwb_dev_modes_t mode, uint64_t delay)
{
    fd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fd48:	b083      	sub	sp, #12
    fd4a:	4604      	mov	r4, r0
    fd4c:	460e      	mov	r6, r1
    fd4e:	4617      	mov	r7, r2
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fd50:	f100 0840 	add.w	r8, r0, #64	; 0x40
    fd54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fd58:	4640      	mov	r0, r8
    fd5a:	f7fa f9b9 	bl	a0d0 <os_sem_pend>
    dpl_error_t err = dpl_sem_pend(&pan->sem,  DPL_TIMEOUT_NEVER);
    assert(err == DPL_OK);
    fd5e:	2800      	cmp	r0, #0
    fd60:	d179      	bne.n	fe56 <uwb_pan_blink+0x112>

    STATS_INC(g_stat, pan_request);
    fd62:	4a4c      	ldr	r2, [pc, #304]	; (fe94 <uwb_pan_blink+0x150>)
    fd64:	6953      	ldr	r3, [r2, #20]
    fd66:	3301      	adds	r3, #1
    fd68:	6153      	str	r3, [r2, #20]
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    fd6a:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
    fd6e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    fd72:	fbb3 f1f2 	udiv	r1, r3, r2
    fd76:	fb02 3311 	mls	r3, r2, r1, r3
    fd7a:	b29b      	uxth	r3, r3
    fd7c:	3322      	adds	r3, #34	; 0x22
    fd7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]

    frame->seq_num += pan->nframes;
    fd82:	786b      	ldrb	r3, [r5, #1]
    fd84:	4413      	add	r3, r2
    fd86:	706b      	strb	r3, [r5, #1]
    frame->long_address = pan->dev_inst->euid;
    fd88:	6823      	ldr	r3, [r4, #0]
    fd8a:	f8d3 24b8 	ldr.w	r2, [r3, #1208]	; 0x4b8
    fd8e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
    fd92:	f853 3c04 	ldr.w	r3, [r3, #-4]
    fd96:	f8c5 2002 	str.w	r2, [r5, #2]
    fd9a:	f8c5 3006 	str.w	r3, [r5, #6]
    frame->code = DWT_PAN_REQ;
    fd9e:	f04f 0900 	mov.w	r9, #0
    fda2:	2301      	movs	r3, #1
    fda4:	72eb      	strb	r3, [r5, #11]
    fda6:	f885 900c 	strb.w	r9, [r5, #12]
    frame->rpt_count = 0;
    fdaa:	7aab      	ldrb	r3, [r5, #10]
    fdac:	f369 0303 	bfi	r3, r9, #0, #4
    fdb0:	72ab      	strb	r3, [r5, #10]
    frame->rpt_max = MYNEWT_VAL(UWB_PAN_RPT_MAX);
    fdb2:	b2db      	uxtb	r3, r3
    fdb4:	2202      	movs	r2, #2
    fdb6:	f362 1307 	bfi	r3, r2, #4, #4
    fdba:	72ab      	strb	r3, [r5, #10]
    frame->req.role = role;
    fdbc:	f8a5 600d 	strh.w	r6, [r5, #13]
    frame->req.lease_time = pan->config->lease_time;
    fdc0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    fdc4:	899b      	ldrh	r3, [r3, #12]
    fdc6:	f8a5 300f 	strh.w	r3, [r5, #15]

#if MYNEWT_VAL(UWB_PAN_VERSION_ENABLED)
    struct image_version iv;
    imgr_my_version(&iv);
    fdca:	4668      	mov	r0, sp
    fdcc:	f001 fa56 	bl	1127c <imgr_my_version>
    frame->req.fw_ver.iv_major = iv.iv_major;
    fdd0:	f89d 3000 	ldrb.w	r3, [sp]
    fdd4:	746b      	strb	r3, [r5, #17]
    frame->req.fw_ver.iv_minor = iv.iv_minor;
    fdd6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fdda:	74ab      	strb	r3, [r5, #18]
    frame->req.fw_ver.iv_revision = iv.iv_revision;
    fddc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fde0:	f8a5 3013 	strh.w	r3, [r5, #19]
    frame->req.fw_ver.iv_build_num = iv.iv_build_num;
    fde4:	9b01      	ldr	r3, [sp, #4]
    fde6:	f8c5 3015 	str.w	r3, [r5, #21]
#endif

    uwb_set_delay_start(pan->dev_inst, delay);
    fdea:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    fdec:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fdee:	6b59      	ldr	r1, [r3, #52]	; 0x34
    fdf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    fdf4:	4788      	blx	r1
    uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    fdf6:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    fdf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fdfa:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    fdfc:	464b      	mov	r3, r9
    fdfe:	464a      	mov	r2, r9
    fe00:	2119      	movs	r1, #25
    fe02:	47b0      	blx	r6
    uwb_write_tx(pan->dev_inst, frame->array, 0, sizeof(union pan_frame_t));
    fe04:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    fe06:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe08:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    fe0a:	2319      	movs	r3, #25
    fe0c:	464a      	mov	r2, r9
    fe0e:	4629      	mov	r1, r5
    fe10:	47b0      	blx	r6
    uwb_set_wait4resp(pan->dev_inst, true);
    fe12:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    fe14:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    fe18:	2101      	movs	r1, #1
    fe1a:	4798      	blx	r3
    uwb_set_rx_timeout(pan->dev_inst, pan->config->rx_timeout_period);
    fe1c:	6820      	ldr	r0, [r4, #0]
    fe1e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
    fe22:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe26:	8891      	ldrh	r1, [r2, #4]
    fe28:	4798      	blx	r3
    pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    fe2a:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_tx(dev));
    fe2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fe2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fe30:	4798      	blx	r3
    fe32:	f3c0 0080 	ubfx	r0, r0, #2, #1
    fe36:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    fe3a:	f360 03c3 	bfi	r3, r0, #3, #1
    fe3e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    if (pan->status.start_tx_error){
    fe42:	b2db      	uxtb	r3, r3
    fe44:	f013 0f08 	tst.w	r3, #8
    fe48:	d10b      	bne.n	fe62 <uwb_pan_blink+0x11e>
        DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_blnk_txerr\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        // Half Period Delay Warning occured try for the next epoch
        // Use seq_num to detect this on receiver size
        dpl_sem_release(&pan->sem);
    }
    else if(mode == UWB_BLOCKING){
    fe4a:	b197      	cbz	r7, fe72 <uwb_pan_blink+0x12e>
        err = dpl_sem_pend(&pan->sem, DPL_TIMEOUT_NEVER); // Wait for completion of transactions
        dpl_sem_release(&pan->sem);
        assert(err == DPL_OK);
    }
    return pan->status;
}
    fe4c:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    fe50:	b003      	add	sp, #12
    fe52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(err == DPL_OK);
    fe56:	2300      	movs	r3, #0
    fe58:	461a      	mov	r2, r3
    fe5a:	4619      	mov	r1, r3
    fe5c:	4618      	mov	r0, r3
    fe5e:	f7f9 f9b1 	bl	91c4 <__assert_func>
        STATS_INC(g_stat, tx_error);
    fe62:	4a0c      	ldr	r2, [pc, #48]	; (fe94 <uwb_pan_blink+0x150>)
    fe64:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    fe66:	3301      	adds	r3, #1
    fe68:	63d3      	str	r3, [r2, #60]	; 0x3c
    return (dpl_error_t)os_sem_release(&sem->sem);
    fe6a:	4640      	mov	r0, r8
    fe6c:	f7fa f8fe 	bl	a06c <os_sem_release>
    fe70:	e7ec      	b.n	fe4c <uwb_pan_blink+0x108>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
    fe72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fe76:	4640      	mov	r0, r8
    fe78:	f7fa f92a 	bl	a0d0 <os_sem_pend>
    fe7c:	4605      	mov	r5, r0
    return (dpl_error_t)os_sem_release(&sem->sem);
    fe7e:	4640      	mov	r0, r8
    fe80:	f7fa f8f4 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
    fe84:	2d00      	cmp	r5, #0
    fe86:	d0e1      	beq.n	fe4c <uwb_pan_blink+0x108>
    fe88:	2300      	movs	r3, #0
    fe8a:	461a      	mov	r2, r3
    fe8c:	4619      	mov	r1, r3
    fe8e:	4618      	mov	r0, r3
    fe90:	f7f9 f998 	bl	91c4 <__assert_func>
    fe94:	20004010 	.word	0x20004010

0000fe98 <uwb_pan_reset>:
 *
 * @return uwb_pan_status_t
 */
struct uwb_pan_status_t
uwb_pan_reset(struct uwb_pan_instance * pan, uint64_t delay)
{
    fe98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe9a:	4604      	mov	r4, r0
    union pan_frame_t * frame = pan->frames[(pan->idx)%pan->nframes];
    fe9c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    fea0:	f8b0 0084 	ldrh.w	r0, [r0, #132]	; 0x84
    fea4:	fbb1 f5f0 	udiv	r5, r1, r0
    fea8:	fb00 1115 	mls	r1, r0, r5, r1
    feac:	b289      	uxth	r1, r1
    feae:	3122      	adds	r1, #34	; 0x22
    feb0:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]

    frame->seq_num += pan->nframes;
    feb4:	7869      	ldrb	r1, [r5, #1]
    feb6:	4401      	add	r1, r0
    feb8:	7069      	strb	r1, [r5, #1]
    frame->long_address = pan->dev_inst->euid;
    feba:	6821      	ldr	r1, [r4, #0]
    febc:	f8d1 04b8 	ldr.w	r0, [r1, #1208]	; 0x4b8
    fec0:	f501 6198 	add.w	r1, r1, #1216	; 0x4c0
    fec4:	f851 1c04 	ldr.w	r1, [r1, #-4]
    fec8:	f8c5 0002 	str.w	r0, [r5, #2]
    fecc:	f8c5 1006 	str.w	r1, [r5, #6]
    frame->code = DWT_PAN_RESET;
    fed0:	2600      	movs	r6, #0
    fed2:	2103      	movs	r1, #3
    fed4:	72e9      	strb	r1, [r5, #11]
    fed6:	732e      	strb	r6, [r5, #12]

    uwb_set_delay_start(pan->dev_inst, delay);
    fed8:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
    feda:	6a41      	ldr	r1, [r0, #36]	; 0x24
    fedc:	6b49      	ldr	r1, [r1, #52]	; 0x34
    fede:	4788      	blx	r1
    uwb_write_tx_fctrl(pan->dev_inst, sizeof(union pan_frame_t), 0);
    fee0:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
    fee2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fee4:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    fee6:	4633      	mov	r3, r6
    fee8:	4632      	mov	r2, r6
    feea:	2119      	movs	r1, #25
    feec:	47b8      	blx	r7
    uwb_write_tx(pan->dev_inst, frame->array, 0, sizeof(union pan_frame_t));
    feee:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
    fef0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    fef2:	6c5f      	ldr	r7, [r3, #68]	; 0x44
    fef4:	2319      	movs	r3, #25
    fef6:	4632      	mov	r2, r6
    fef8:	4629      	mov	r1, r5
    fefa:	47b8      	blx	r7
    uwb_set_wait4resp(pan->dev_inst, false);
    fefc:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
    fefe:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    ff02:	4631      	mov	r1, r6
    ff04:	4798      	blx	r3
    pan->status.start_tx_error = uwb_start_tx(pan->dev_inst).start_tx_error;
    ff06:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_start_tx(dev));
    ff08:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ff0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ff0c:	4798      	blx	r3
    ff0e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ff12:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    ff16:	f360 03c3 	bfi	r3, r0, #3, #1
    ff1a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

    if (pan->status.start_tx_error){
    ff1e:	b2db      	uxtb	r3, r3
    ff20:	f013 0f08 	tst.w	r3, #8
    ff24:	d003      	beq.n	ff2e <uwb_pan_reset+0x96>
        STATS_INC(g_stat, tx_error);
    ff26:	4a03      	ldr	r2, [pc, #12]	; (ff34 <uwb_pan_reset+0x9c>)
    ff28:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    ff2a:	3301      	adds	r3, #1
    ff2c:	63d3      	str	r3, [r2, #60]	; 0x3c
        DIAGMSG("{\"utime\": %lu,\"msg\": \"pan_reset_tx_err\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
    }
    return pan->status;
}
    ff2e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
    ff32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff34:	20004010 	.word	0x20004010

0000ff38 <uwb_pan_start>:
 * @return void
 */
void
uwb_pan_start(struct uwb_pan_instance * pan, enum uwb_pan_role_t role, network_role_t network_role)
{
    pan->config->role = role;
    ff38:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    ff3c:	f893 c00b 	ldrb.w	ip, [r3, #11]
    ff40:	f361 1c07 	bfi	ip, r1, #4, #4
    ff44:	f883 c00b 	strb.w	ip, [r3, #11]
    pan->config->network_role = network_role;
    ff48:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    ff4c:	81da      	strh	r2, [r3, #14]

    if (pan->config->role == UWB_PAN_ROLE_MASTER) {
    ff4e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    ff52:	7adb      	ldrb	r3, [r3, #11]
    ff54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ff58:	2b10      	cmp	r3, #16
    ff5a:	d001      	beq.n	ff60 <uwb_pan_start+0x28>
        /* Nothing for now */
    } else if (pan->config->role == UWB_PAN_ROLE_SLAVE) {
    ff5c:	2b20      	cmp	r3, #32
    ff5e:	d000      	beq.n	ff62 <uwb_pan_start+0x2a>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()),
               "Provisioning"
            );
#endif
    }
}
    ff60:	4770      	bx	lr
        pan->idx = 0x1;
    ff62:	2301      	movs	r3, #1
    ff64:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        pan->status.valid = false;
    ff68:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ff6c:	f36f 0382 	bfc	r3, #2, #1
    ff70:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
    ff74:	e7f4      	b.n	ff60 <uwb_pan_start+0x28>

0000ff76 <uwb_pan_lease_remaining>:
 *
 * @return uint32_t ms to expiry, 0 if already expired
 */
uint32_t
uwb_pan_lease_remaining(struct uwb_pan_instance * pan)
{
    ff76:	b510      	push	{r4, lr}
    ff78:	4604      	mov	r4, r0
    return os_time_get();
    ff7a:	f7fa fa49 	bl	a410 <os_time_get>
    ff7e:	4601      	mov	r1, r0
    return os_callout_remaining_ticks(&co->co, time);
    ff80:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ff84:	f7f9 fb54 	bl	9630 <os_callout_remaining_ticks>
os_time_ticks_to_ms32(os_time_t ticks)
{
#if OS_TICKS_PER_SEC == 1000
    return ticks;
#else
    return ((uint64_t)ticks * 1000) / OS_TICKS_PER_SEC;
    ff88:	0ec2      	lsrs	r2, r0, #27
    ff8a:	0143      	lsls	r3, r0, #5
    ff8c:	1a1b      	subs	r3, r3, r0
    ff8e:	f162 0200 	sbc.w	r2, r2, #0
    ff92:	0092      	lsls	r2, r2, #2
    ff94:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    ff98:	009b      	lsls	r3, r3, #2
    ff9a:	181b      	adds	r3, r3, r0
    ff9c:	f142 0000 	adc.w	r0, r2, #0
    ffa0:	00c0      	lsls	r0, r0, #3
    ffa2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    ffa6:	f3c3 1318 	ubfx	r3, r3, #4, #25
    dpl_time_t rt = dpl_callout_remaining_ticks(&pan->pan_lease_callout_expiry, dpl_time_get());
    return dpl_time_ticks_to_ms32(rt);
}
    ffaa:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
    ffae:	bd10      	pop	{r4, pc}

0000ffb0 <uwb_pan_slot_timer_cb>:
 *
 * @return void
 */
void
uwb_pan_slot_timer_cb(struct dpl_event * ev)
{
    ffb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ffb4:	b083      	sub	sp, #12
    assert(ev);
    ffb6:	b1f8      	cbz	r0, fff8 <uwb_pan_slot_timer_cb+0x48>
    return ev->ev.ev_arg;
    ffb8:	6883      	ldr	r3, [r0, #8]
    tdma_slot_t * slot = (tdma_slot_t *) dpl_event_get_arg(ev);

    tdma_instance_t * tdma = slot->parent;
    ffba:	689c      	ldr	r4, [r3, #8]
    struct uwb_ccp_instance *ccp = tdma->ccp;
    ffbc:	6867      	ldr	r7, [r4, #4]
    struct uwb_pan_instance *pan = (struct uwb_pan_instance*)slot->arg;
    ffbe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    assert(pan);
    ffc0:	b305      	cbz	r5, 10004 <uwb_pan_slot_timer_cb+0x54>
    uint16_t idx = slot->idx;
    ffc2:	881e      	ldrh	r6, [r3, #0]

    /* Check if we are to act as a Master Node in the network */
    if (tdma->dev_inst->role&UWB_ROLE_PAN_MASTER) {
    ffc4:	6823      	ldr	r3, [r4, #0]
    ffc6:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
    ffca:	f013 0f02 	tst.w	r3, #2
    ffce:	d046      	beq.n	1005e <uwb_pan_slot_timer_cb+0xae>
        static uint8_t _pan_cycles = 0;

        /* Broadcast an initial reset message to clear all leases */
        if (_pan_cycles < 8) {
    ffd0:	4b54      	ldr	r3, [pc, #336]	; (10124 <uwb_pan_slot_timer_cb+0x174>)
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	2b07      	cmp	r3, #7
    ffd6:	d81b      	bhi.n	10010 <uwb_pan_slot_timer_cb+0x60>
            _pan_cycles++;
    ffd8:	3301      	adds	r3, #1
    ffda:	4a52      	ldr	r2, [pc, #328]	; (10124 <uwb_pan_slot_timer_cb+0x174>)
    ffdc:	7013      	strb	r3, [r2, #0]
            uwb_pan_reset(pan, tdma_tx_slot_start(tdma, idx));
    ffde:	ee07 6a90 	vmov	s15, r6
    ffe2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    ffe6:	4620      	mov	r0, r4
    ffe8:	f7fe f9ca 	bl	e380 <tdma_tx_slot_start>
    ffec:	4602      	mov	r2, r0
    ffee:	460b      	mov	r3, r1
    fff0:	4628      	mov	r0, r5
    fff2:	f7ff ff51 	bl	fe98 <uwb_pan_reset>
    fff6:	e091      	b.n	1011c <uwb_pan_slot_timer_cb+0x16c>
    assert(ev);
    fff8:	2300      	movs	r3, #0
    fffa:	461a      	mov	r2, r3
    fffc:	4619      	mov	r1, r3
    fffe:	4618      	mov	r0, r3
   10000:	f7f9 f8e0 	bl	91c4 <__assert_func>
    assert(pan);
   10004:	2300      	movs	r3, #0
   10006:	461a      	mov	r2, r3
   10008:	4619      	mov	r1, r3
   1000a:	4618      	mov	r0, r3
   1000c:	f7f9 f8da 	bl	91c4 <__assert_func>
        } else {
            uint64_t dx_time = tdma_rx_slot_start(tdma, idx);
   10010:	ee07 6a90 	vmov	s15, r6
   10014:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   10018:	4620      	mov	r0, r4
   1001a:	f7fe f982 	bl	e322 <tdma_rx_slot_start>
   1001e:	4681      	mov	r9, r0
   10020:	4688      	mov	r8, r1
            uwb_set_rx_timeout(tdma->dev_inst, 3*ccp->period/tdma->nslots/4);
   10022:	6820      	ldr	r0, [r4, #0]
   10024:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
   10028:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1002c:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   10030:	fbb6 f1f1 	udiv	r1, r6, r1
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   10034:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10038:	0889      	lsrs	r1, r1, #2
   1003a:	4798      	blx	r3
            uwb_set_delay_start(tdma->dev_inst, dx_time);
   1003c:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   1003e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10040:	6b59      	ldr	r1, [r3, #52]	; 0x34
   10042:	464a      	mov	r2, r9
   10044:	4643      	mov	r3, r8
   10046:	4788      	blx	r1
            uwb_set_on_error_continue(tdma->dev_inst, true);
   10048:	6820      	ldr	r0, [r4, #0]
 *
 */
UWB_API_IMPL_PREFIX struct uwb_dev_status
uwb_set_on_error_continue(struct uwb_dev * dev, bool enable)
{
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
   1004a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1004c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   10050:	2101      	movs	r1, #1
   10052:	4798      	blx	r3
            uwb_pan_listen(pan, UWB_BLOCKING);
   10054:	2100      	movs	r1, #0
   10056:	4628      	mov	r0, r5
   10058:	f7ff fe2a 	bl	fcb0 <uwb_pan_listen>
   1005c:	e05e      	b.n	1011c <uwb_pan_slot_timer_cb+0x16c>
        }
    } else {
        /* Act as a slave Node in the network */
        if (pan->status.valid && uwb_pan_lease_remaining(pan)>MYNEWT_VAL(UWB_PAN_LEASE_EXP_MARGIN)) {
   1005e:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
   10062:	f013 0f04 	tst.w	r3, #4
   10066:	d044      	beq.n	100f2 <uwb_pan_slot_timer_cb+0x142>
   10068:	4628      	mov	r0, r5
   1006a:	f7ff ff84 	bl	ff76 <uwb_pan_lease_remaining>
   1006e:	f64e 2360 	movw	r3, #60000	; 0xea60
   10072:	4298      	cmp	r0, r3
   10074:	d93d      	bls.n	100f2 <uwb_pan_slot_timer_cb+0x142>
            /* Our lease is still valid - just listen */
            uint16_t timeout;
            if (pan->config->role == UWB_PAN_ROLE_RELAY) {
   10076:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   1007a:	7adb      	ldrb	r3, [r3, #11]
   1007c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   10080:	2b30      	cmp	r3, #48	; 0x30
   10082:	d02b      	beq.n	100dc <uwb_pan_slot_timer_cb+0x12c>
                timeout = 3*ccp->period/tdma->nslots/4;
            } else {
                /* Only listen long enough to get any resets from master */
                timeout = uwb_phy_frame_duration(tdma->dev_inst, sizeof(sizeof(union pan_frame_t)))
   10084:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   10086:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1008a:	2104      	movs	r1, #4
   1008c:	4798      	blx	r3
   1008e:	f500 7180 	add.w	r1, r0, #256	; 0x100
   10092:	b289      	uxth	r1, r1
                    + MYNEWT_VAL(XTALT_GUARD);
            }
            uwb_set_rx_timeout(tdma->dev_inst, timeout);
   10094:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   10096:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1009a:	4798      	blx	r3
            uwb_set_delay_start(tdma->dev_inst, tdma_rx_slot_start(tdma, idx));
   1009c:	6827      	ldr	r7, [r4, #0]
   1009e:	ee07 6a90 	vmov	s15, r6
   100a2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   100a6:	4620      	mov	r0, r4
   100a8:	f7fe f93b 	bl	e322 <tdma_rx_slot_start>
   100ac:	4602      	mov	r2, r0
   100ae:	460b      	mov	r3, r1
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   100b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   100b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   100b4:	4638      	mov	r0, r7
   100b6:	4788      	blx	r1
            uwb_set_on_error_continue(tdma->dev_inst, true);
   100b8:	6820      	ldr	r0, [r4, #0]
    return (dev->uw_funcs->uf_set_on_error_continue(dev, enable));
   100ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
   100bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   100c0:	2101      	movs	r1, #1
   100c2:	4798      	blx	r3
            if (uwb_pan_listen(pan, UWB_BLOCKING).start_rx_error) {
   100c4:	2100      	movs	r1, #0
   100c6:	4628      	mov	r0, r5
   100c8:	f7ff fdf2 	bl	fcb0 <uwb_pan_listen>
   100cc:	f010 0f08 	tst.w	r0, #8
   100d0:	d024      	beq.n	1011c <uwb_pan_slot_timer_cb+0x16c>
                STATS_INC(g_stat, rx_error);
   100d2:	4a15      	ldr	r2, [pc, #84]	; (10128 <uwb_pan_slot_timer_cb+0x178>)
   100d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   100d6:	3301      	adds	r3, #1
   100d8:	6393      	str	r3, [r2, #56]	; 0x38
   100da:	e01f      	b.n	1011c <uwb_pan_slot_timer_cb+0x16c>
                timeout = 3*ccp->period/tdma->nslots/4;
   100dc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
   100e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   100e4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   100e8:	fbb1 f1f3 	udiv	r1, r1, r3
   100ec:	f3c1 018f 	ubfx	r1, r1, #2, #16
   100f0:	e7d0      	b.n	10094 <uwb_pan_slot_timer_cb+0xe4>
            }
        } else {
            /* Subslot 0 is for master reset, subslot 1 is for sending requests */
            uint64_t dx_time = tdma_tx_slot_start(tdma, (float)idx+1.0f/16);
   100f2:	ee07 6a90 	vmov	s15, r6
   100f6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   100fa:	eddf 7a0c 	vldr	s15, [pc, #48]	; 1012c <uwb_pan_slot_timer_cb+0x17c>
   100fe:	ee30 0a27 	vadd.f32	s0, s0, s15
   10102:	4620      	mov	r0, r4
   10104:	f7fe f93c 	bl	e380 <tdma_tx_slot_start>
            uwb_pan_blink(pan, pan->config->network_role, UWB_BLOCKING, dx_time);
   10108:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
   1010c:	89db      	ldrh	r3, [r3, #14]
   1010e:	e9cd 0100 	strd	r0, r1, [sp]
   10112:	2200      	movs	r2, #0
   10114:	4619      	mov	r1, r3
   10116:	4628      	mov	r0, r5
   10118:	f7ff fe14 	bl	fd44 <uwb_pan_blink>
        }
    }
}
   1011c:	b003      	add	sp, #12
   1011e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10122:	bf00      	nop
   10124:	2000400c 	.word	0x2000400c
   10128:	20004010 	.word	0x20004010
   1012c:	3d800000 	.word	0x3d800000

00010130 <NumberOfBits>:
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t
NumberOfBits(uint32_t n) {
   10130:	4603      	mov	r3, r0
    uint32_t count = 0;
   10132:	2000      	movs	r0, #0
    while (n) {
   10134:	e002      	b.n	1013c <NumberOfBits+0xc>
        n &= (n-1);
   10136:	1e5a      	subs	r2, r3, #1
   10138:	4013      	ands	r3, r2
        count++;
   1013a:	3001      	adds	r0, #1
    while (n) {
   1013c:	2b00      	cmp	r3, #0
   1013e:	d1fa      	bne.n	10136 <NumberOfBits+0x6>
    }
    return count;
}
   10140:	4770      	bx	lr

00010142 <BitPosition>:
 *
 * @param n bitfield to count bits within
 *
 * @return number of set bits
 */
uint32_t BitPosition(uint32_t n) {
   10142:	b508      	push	{r3, lr}
    uint32_t count = 0;
    assert(n && (! (n & (n-1)) )); // single bit set
   10144:	b118      	cbz	r0, 1014e <BitPosition+0xc>
   10146:	4603      	mov	r3, r0
   10148:	3801      	subs	r0, #1
   1014a:	4018      	ands	r0, r3
   1014c:	d007      	beq.n	1015e <BitPosition+0x1c>
   1014e:	2300      	movs	r3, #0
   10150:	461a      	mov	r2, r3
   10152:	4619      	mov	r1, r3
   10154:	4618      	mov	r0, r3
   10156:	f7f9 f835 	bl	91c4 <__assert_func>

    while (n){
        n = n >> 1;
   1015a:	085b      	lsrs	r3, r3, #1
        ++count; // position of bit within bitfield
   1015c:	3001      	adds	r0, #1
    while (n){
   1015e:	2b00      	cmp	r3, #0
   10160:	d1fb      	bne.n	1015a <BitPosition+0x18>
    }
    return count;
}
   10162:	bd08      	pop	{r3, pc}

00010164 <BitIndex>:
 *
 * @return numerical ordering of a bit witin bitmask.
 */
uint32_t
BitIndex(uint32_t nslots_mask, uint32_t n, slot_mode_t mode)
{
   10164:	b538      	push	{r3, r4, r5, lr}
    uint32_t idx, slot_mask, remaining_mask;
    assert(n && (! (n & (n-1)) ));  // single bit set
   10166:	b1c1      	cbz	r1, 1019a <BitIndex+0x36>
   10168:	4604      	mov	r4, r0
   1016a:	4615      	mov	r5, r2
   1016c:	4608      	mov	r0, r1
   1016e:	1e4b      	subs	r3, r1, #1
   10170:	420b      	tst	r3, r1
   10172:	d112      	bne.n	1019a <BitIndex+0x36>
    assert(n & nslots_mask);        // bit set is within ROI
   10174:	4221      	tst	r1, r4
   10176:	d016      	beq.n	101a6 <BitIndex+0x42>

    idx = BitPosition(n);
   10178:	f7ff ffe3 	bl	10142 <BitPosition>
    slot_mask =  (((uint32_t)~0UL >> (sizeof(uint32_t) * 8 - idx)));
   1017c:	f1c0 0220 	rsb	r2, r0, #32
   10180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10184:	fa23 f202 	lsr.w	r2, r3, r2
    remaining_mask = ((uint32_t)~0UL << idx);
   10188:	fa03 f000 	lsl.w	r0, r3, r0

    if (mode == SLOT_POSITION)
   1018c:	2d01      	cmp	r5, #1
   1018e:	d010      	beq.n	101b2 <BitIndex+0x4e>
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
    else
        return NumberOfBits(nslots_mask & remaining_mask) - 1; // no. of slots remaining
   10190:	4020      	ands	r0, r4
   10192:	f7ff ffcd 	bl	10130 <NumberOfBits>
   10196:	3801      	subs	r0, #1
}
   10198:	bd38      	pop	{r3, r4, r5, pc}
    assert(n && (! (n & (n-1)) ));  // single bit set
   1019a:	2300      	movs	r3, #0
   1019c:	461a      	mov	r2, r3
   1019e:	4619      	mov	r1, r3
   101a0:	4618      	mov	r0, r3
   101a2:	f7f9 f80f 	bl	91c4 <__assert_func>
    assert(n & nslots_mask);        // bit set is within ROI
   101a6:	2300      	movs	r3, #0
   101a8:	461a      	mov	r2, r3
   101aa:	4619      	mov	r1, r3
   101ac:	4618      	mov	r0, r3
   101ae:	f7f9 f809 	bl	91c4 <__assert_func>
        return NumberOfBits(nslots_mask & slot_mask) - 1; // slot position
   101b2:	ea04 0002 	and.w	r0, r4, r2
   101b6:	f7ff ffbb 	bl	10130 <NumberOfBits>
   101ba:	3801      	subs	r0, #1
   101bc:	e7ec      	b.n	10198 <BitIndex+0x34>
	...

000101c0 <uwb_wcs_init>:
 * returns struct uwb_wcs_instance *
 */

struct uwb_wcs_instance *
uwb_wcs_init(struct uwb_wcs_instance * wcs, struct uwb_ccp_instance * ccp)
{
   101c0:	b510      	push	{r4, lr}
   101c2:	460c      	mov	r4, r1
    if (wcs == NULL ) {
   101c4:	4603      	mov	r3, r0
   101c6:	b150      	cbz	r0, 101de <uwb_wcs_init+0x1e>
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
        assert(wcs);
        wcs->status.selfmalloc = 1;
    }
    wcs->ccp = ccp;
   101c8:	661c      	str	r4, [r3, #96]	; 0x60
    wcs->normalized_skew = DPL_FLOAT64_INIT(1.0l);
   101ca:	2000      	movs	r0, #0
   101cc:	490c      	ldr	r1, [pc, #48]	; (10200 <uwb_wcs_init+0x40>)
   101ce:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    wcs->fractional_skew = DPL_FLOAT64_INIT(0.0l);
   101d2:	2000      	movs	r0, #0
   101d4:	2100      	movs	r1, #0
   101d6:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48

    return wcs;
}
   101da:	4618      	mov	r0, r3
   101dc:	bd10      	pop	{r4, pc}
        wcs = (struct uwb_wcs_instance *) calloc(1, sizeof(struct uwb_wcs_instance));
   101de:	21a8      	movs	r1, #168	; 0xa8
   101e0:	2001      	movs	r0, #1
   101e2:	f000 f908 	bl	103f6 <calloc>
        assert(wcs);
   101e6:	4603      	mov	r3, r0
   101e8:	b120      	cbz	r0, 101f4 <uwb_wcs_init+0x34>
        wcs->status.selfmalloc = 1;
   101ea:	7802      	ldrb	r2, [r0, #0]
   101ec:	f042 0201 	orr.w	r2, r2, #1
   101f0:	7002      	strb	r2, [r0, #0]
   101f2:	e7e9      	b.n	101c8 <uwb_wcs_init+0x8>
        assert(wcs);
   101f4:	2300      	movs	r3, #0
   101f6:	461a      	mov	r2, r3
   101f8:	4619      	mov	r1, r3
   101fa:	4618      	mov	r0, r3
   101fc:	f7f8 ffe2 	bl	91c4 <__assert_func>
   10200:	3ff00000 	.word	0x3ff00000

00010204 <uwb_wcs_free>:
 *
 * returns none
 */
void
uwb_wcs_free(struct uwb_wcs_instance * inst)
{
   10204:	b510      	push	{r4, lr}
    assert(inst);
   10206:	b168      	cbz	r0, 10224 <uwb_wcs_free+0x20>
   10208:	4604      	mov	r4, r0
#ifndef __KERNEL__
#if MYNEWT_VAL(TIMESCALE_ENABLED)
    timescale_free(inst->timescale);
   1020a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   1020e:	f00f fd47 	bl	1fca0 <timescale_free>
#endif
#endif
    if (inst->status.selfmalloc)
   10212:	7823      	ldrb	r3, [r4, #0]
   10214:	f013 0f01 	tst.w	r3, #1
   10218:	d10a      	bne.n	10230 <uwb_wcs_free+0x2c>
        free(inst);
    else
        inst->status.initialized = 0;
   1021a:	7823      	ldrb	r3, [r4, #0]
   1021c:	f36f 0341 	bfc	r3, #1, #1
   10220:	7023      	strb	r3, [r4, #0]
}
   10222:	bd10      	pop	{r4, pc}
    assert(inst);
   10224:	2300      	movs	r3, #0
   10226:	461a      	mov	r2, r3
   10228:	4619      	mov	r1, r3
   1022a:	4618      	mov	r0, r3
   1022c:	f7f8 ffca 	bl	91c4 <__assert_func>
        free(inst);
   10230:	4620      	mov	r0, r4
   10232:	f000 f9db 	bl	105ec <free>
   10236:	e7f4      	b.n	10222 <uwb_wcs_free+0x1e>

00010238 <uwb_wcs_set_postprocess>:
 * returns none
 */
void
uwb_wcs_set_postprocess(struct uwb_wcs_instance * wcs, dpl_event_fn * postprocess)
{
    if(!wcs) return;
   10238:	4603      	mov	r3, r0
   1023a:	b150      	cbz	r0, 10252 <uwb_wcs_set_postprocess+0x1a>
    memset(ev, 0, sizeof(*ev));
   1023c:	2200      	movs	r2, #0
   1023e:	6502      	str	r2, [r0, #80]	; 0x50
   10240:	6542      	str	r2, [r0, #84]	; 0x54
   10242:	6582      	str	r2, [r0, #88]	; 0x58
   10244:	65c2      	str	r2, [r0, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   10246:	6541      	str	r1, [r0, #84]	; 0x54
    ev->ev.ev_arg = arg;
   10248:	6598      	str	r0, [r3, #88]	; 0x58
    dpl_event_init(&wcs->postprocess_ev, postprocess, (void *)wcs);
    wcs->config.postprocess = true;
   1024a:	7902      	ldrb	r2, [r0, #4]
   1024c:	f042 0201 	orr.w	r2, r2, #1
   10250:	7102      	strb	r2, [r0, #4]
}
   10252:	4770      	bx	lr

00010254 <uwb_wcs_dtu_time_adjust>:
 * @return dtu_time compensated.
 *
 */
uint64_t
uwb_wcs_dtu_time_adjust(struct uwb_wcs_instance * wcs, uint64_t dtu_time)
{
   10254:	4619      	mov	r1, r3
    if(!wcs) return dtu_time;
   10256:	b1b8      	cbz	r0, 10288 <uwb_wcs_dtu_time_adjust+0x34>
{
   10258:	b538      	push	{r3, r4, r5, lr}
   1025a:	4603      	mov	r3, r0
    if (wcs->status.valid){
   1025c:	7800      	ldrb	r0, [r0, #0]
   1025e:	f010 0f04 	tst.w	r0, #4
   10262:	d00d      	beq.n	10280 <uwb_wcs_dtu_time_adjust+0x2c>
        dtu_time = (uint64_t) DPL_FLOAT64_INT(DPL_FLOAT64_MUL(wcs->normalized_skew,DPL_FLOAT64_I64_TO_F64(dtu_time)));
   10264:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
   10268:	4610      	mov	r0, r2
   1026a:	f014 f9ef 	bl	2464c <__aeabi_ul2d>
   1026e:	4602      	mov	r2, r0
   10270:	460b      	mov	r3, r1
   10272:	4620      	mov	r0, r4
   10274:	4629      	mov	r1, r5
   10276:	f014 fa1f 	bl	246b8 <__aeabi_dmul>
   1027a:	f014 fedb 	bl	25034 <__aeabi_d2lz>
   1027e:	4602      	mov	r2, r0
    }

    return dtu_time & 0x00FFFFFFFFFFUL;
   10280:	4610      	mov	r0, r2
   10282:	f001 01ff 	and.w	r1, r1, #255	; 0xff
}
   10286:	bd38      	pop	{r3, r4, r5, pc}
    if(!wcs) return dtu_time;
   10288:	4610      	mov	r0, r2
}
   1028a:	4770      	bx	lr

0001028c <uwb_wcs_prediction>:
 * @param T interval over which to predict.
 * @return Clock master prediction for local epoch T
 */
dpl_float64_t
uwb_wcs_prediction(dpl_float64_t * x, dpl_float64_t T)
{
   1028c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1028e:	b087      	sub	sp, #28
   10290:	4605      	mov	r5, r0
   10292:	ec51 0b10 	vmov	r0, r1, d0
    // x = A * x;
    dpl_float64_t A[] = { DPL_FLOAT64_INIT(1.0l), T, DPL_FLOAT64_DIV(DPL_FLOAT64_MUL(T,T),DPL_FLOAT64_INIT(2.0l))};
   10296:	2200      	movs	r2, #0
   10298:	4b17      	ldr	r3, [pc, #92]	; (102f8 <uwb_wcs_prediction+0x6c>)
   1029a:	e9cd 2300 	strd	r2, r3, [sp]
   1029e:	ed8d 0b02 	vstr	d0, [sp, #8]
   102a2:	ee10 2a10 	vmov	r2, s0
   102a6:	460b      	mov	r3, r1
   102a8:	f014 fa06 	bl	246b8 <__aeabi_dmul>
   102ac:	2200      	movs	r2, #0
   102ae:	4b13      	ldr	r3, [pc, #76]	; (102fc <uwb_wcs_prediction+0x70>)
   102b0:	f014 fa02 	bl	246b8 <__aeabi_dmul>
   102b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   102b8:	2400      	movs	r4, #0
    dpl_float64_t tmp = DPL_FLOAT64_INIT(0.0l);
   102ba:	2600      	movs	r6, #0
   102bc:	2700      	movs	r7, #0
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   102be:	e014      	b.n	102ea <uwb_wcs_prediction+0x5e>
            tmp = DPL_FLOAT64_ADD(tmp,DPL_FLOAT64_MUL(A[i],x[i]));
   102c0:	ab06      	add	r3, sp, #24
   102c2:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   102c6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   102ce:	e951 0106 	ldrd	r0, r1, [r1, #-24]
   102d2:	f014 f9f1 	bl	246b8 <__aeabi_dmul>
   102d6:	4602      	mov	r2, r0
   102d8:	460b      	mov	r3, r1
   102da:	4630      	mov	r0, r6
   102dc:	4639      	mov	r1, r7
   102de:	f014 f835 	bl	2434c <__adddf3>
   102e2:	4606      	mov	r6, r0
   102e4:	460f      	mov	r7, r1
    for (uint8_t i=0 ; i < sizeof(A)/sizeof(dpl_float64_t); i++ ){
   102e6:	3401      	adds	r4, #1
   102e8:	b2e4      	uxtb	r4, r4
   102ea:	2c02      	cmp	r4, #2
   102ec:	d9e8      	bls.n	102c0 <uwb_wcs_prediction+0x34>
    }
    return tmp;
}
   102ee:	ec47 6b10 	vmov	d0, r6, r7
   102f2:	b007      	add	sp, #28
   102f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102f6:	bf00      	nop
   102f8:	3ff00000 	.word	0x3ff00000
   102fc:	3fe00000 	.word	0x3fe00000

00010300 <uwb_wcs_local_to_master64>:
    if(!wcs) return 0xffffffffffffffffULL;
   10300:	b350      	cbz	r0, 10358 <uwb_wcs_local_to_master64+0x58>
{
   10302:	b510      	push	{r4, lr}
   10304:	4604      	mov	r4, r0
    delta = ((dtu_time & 0x0FFFFFFFFFFUL) - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL;
   10306:	6980      	ldr	r0, [r0, #24]
   10308:	7f21      	ldrb	r1, [r4, #28]
   1030a:	1a10      	subs	r0, r2, r0
   1030c:	eb63 0301 	sbc.w	r3, r3, r1
   10310:	4602      	mov	r2, r0
   10312:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    if (wcs->status.valid) {
   10316:	7823      	ldrb	r3, [r4, #0]
   10318:	f013 0f04 	tst.w	r3, #4
   1031c:	d016      	beq.n	1034c <uwb_wcs_local_to_master64+0x4c>
        interval = DPL_FLOAT64_DIV(DPL_FLOAT64_U64_TO_F64(delta), DPL_FLOAT64_INIT(MYNEWT_VAL(UWB_WCS_DTU)));
   1031e:	f014 f995 	bl	2464c <__aeabi_ul2d>
   10322:	a30f      	add	r3, pc, #60	; (adr r3, 10360 <uwb_wcs_local_to_master64+0x60>)
   10324:	e9d3 2300 	ldrd	r2, r3, [r3]
   10328:	f014 faf0 	bl	2490c <__aeabi_ddiv>
        master_lo40 = (uint64_t) DPL_FLOAT64_INT(uwb_wcs_prediction(wcs->states.array, interval));
   1032c:	ec41 0b10 	vmov	d0, r0, r1
   10330:	f104 0020 	add.w	r0, r4, #32
   10334:	f7ff ffaa 	bl	1028c <uwb_wcs_prediction>
   10338:	ec51 0b10 	vmov	r0, r1, d0
   1033c:	f014 fe7a 	bl	25034 <__aeabi_d2lz>
   10340:	460b      	mov	r3, r1
    return (wcs->master_epoch.timestamp & 0xFFFFFF0000000000UL) + master_lo40;
   10342:	6961      	ldr	r1, [r4, #20]
   10344:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   10348:	4419      	add	r1, r3
}
   1034a:	bd10      	pop	{r4, pc}
        master_lo40 = wcs->master_epoch.lo + delta;
   1034c:	6920      	ldr	r0, [r4, #16]
   1034e:	7d23      	ldrb	r3, [r4, #20]
   10350:	1880      	adds	r0, r0, r2
   10352:	eb43 0301 	adc.w	r3, r3, r1
   10356:	e7f4      	b.n	10342 <uwb_wcs_local_to_master64+0x42>
    if(!wcs) return 0xffffffffffffffffULL;
   10358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1035c:	4601      	mov	r1, r0
}
   1035e:	4770      	bx	lr
   10360:	00000000 	.word	0x00000000
   10364:	422e8480 	.word	0x422e8480

00010368 <uwb_wcs_local_to_master>:
{
   10368:	b508      	push	{r3, lr}
    assert(wcs);
   1036a:	b118      	cbz	r0, 10374 <uwb_wcs_local_to_master+0xc>
    return uwb_wcs_local_to_master64(wcs, dtu_time) & 0x0FFFFFFFFFFUL;
   1036c:	f7ff ffc8 	bl	10300 <uwb_wcs_local_to_master64>
}
   10370:	b2c9      	uxtb	r1, r1
   10372:	bd08      	pop	{r3, pc}
    assert(wcs);
   10374:	2300      	movs	r3, #0
   10376:	461a      	mov	r2, r3
   10378:	4619      	mov	r1, r3
   1037a:	4618      	mov	r0, r3
   1037c:	f7f8 ff22 	bl	91c4 <__assert_func>

00010380 <uwb_wcs_pkg_init>:
 *
 * @return void
 */
void
uwb_wcs_pkg_init(void)
{
   10380:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"uwb_wcs_pkg_init\"}\n",
   10382:	f002 faa2 	bl	128ca <dpl_cputime_get32>
   10386:	4601      	mov	r1, r0
   10388:	480c      	ldr	r0, [pc, #48]	; (103bc <uwb_wcs_pkg_init+0x3c>)
   1038a:	f000 fd8f 	bl	10eac <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1038e:	2400      	movs	r4, #0
   10390:	e000      	b.n	10394 <uwb_wcs_pkg_init+0x14>
   10392:	3401      	adds	r4, #1
   10394:	2c02      	cmp	r4, #2
   10396:	dc10      	bgt.n	103ba <uwb_wcs_pkg_init+0x3a>
        udev = uwb_dev_idx_lookup(i);
   10398:	4620      	mov	r0, r4
   1039a:	f7f8 fc6b 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   1039e:	2800      	cmp	r0, #0
   103a0:	d0f7      	beq.n	10392 <uwb_wcs_pkg_init+0x12>
            continue;
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   103a2:	2101      	movs	r1, #1
   103a4:	f7f8 fceb 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   103a8:	4605      	mov	r5, r0
   103aa:	2800      	cmp	r0, #0
   103ac:	d0f1      	beq.n	10392 <uwb_wcs_pkg_init+0x12>
            continue;
        }
        ccp->wcs = uwb_wcs_init(NULL, ccp);
   103ae:	4601      	mov	r1, r0
   103b0:	2000      	movs	r0, #0
   103b2:	f7ff ff05 	bl	101c0 <uwb_wcs_init>
   103b6:	66a8      	str	r0, [r5, #104]	; 0x68
   103b8:	e7eb      	b.n	10392 <uwb_wcs_pkg_init+0x12>
        wcs_chrdev_create(ccp->wcs);
#endif /* __KERNEL__ */
#endif
    }

}
   103ba:	bd38      	pop	{r3, r4, r5, pc}
   103bc:	00026d6c 	.word	0x00026d6c

000103c0 <uwb_wcs_pkg_down>:
 *
 * @return void
 */
int
uwb_wcs_pkg_down(int reason)
{
   103c0:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   103c2:	2400      	movs	r4, #0
   103c4:	e000      	b.n	103c8 <uwb_wcs_pkg_down+0x8>
   103c6:	3401      	adds	r4, #1
   103c8:	2c02      	cmp	r4, #2
   103ca:	dc12      	bgt.n	103f2 <uwb_wcs_pkg_down+0x32>
        udev = uwb_dev_idx_lookup(i);
   103cc:	4620      	mov	r0, r4
   103ce:	f7f8 fc51 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   103d2:	2800      	cmp	r0, #0
   103d4:	d0f7      	beq.n	103c6 <uwb_wcs_pkg_down+0x6>
        }
#if MYNEWT_VAL(UWB_CCP_ENABLED)
#ifdef __KERNEL__
        wcs_chrdev_destroy(i);
#endif /* __KERNEL__ */
        ccp = (struct uwb_ccp_instance *)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   103d6:	2101      	movs	r1, #1
   103d8:	f7f8 fcd1 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!ccp) {
   103dc:	4605      	mov	r5, r0
   103de:	2800      	cmp	r0, #0
   103e0:	d0f1      	beq.n	103c6 <uwb_wcs_pkg_down+0x6>
            continue;
        }
        if (ccp->wcs) {
   103e2:	6e80      	ldr	r0, [r0, #104]	; 0x68
   103e4:	2800      	cmp	r0, #0
   103e6:	d0ee      	beq.n	103c6 <uwb_wcs_pkg_down+0x6>
            uwb_wcs_free(ccp->wcs);
   103e8:	f7ff ff0c 	bl	10204 <uwb_wcs_free>
            ccp->wcs = 0;
   103ec:	2300      	movs	r3, #0
   103ee:	66ab      	str	r3, [r5, #104]	; 0x68
   103f0:	e7e9      	b.n	103c6 <uwb_wcs_pkg_down+0x6>
        }
#endif
    }

    return 0;
}
   103f2:	2000      	movs	r0, #0
   103f4:	bd38      	pop	{r3, r4, r5, pc}

000103f6 <calloc>:
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

void *calloc(size_t nmemb, size_t size)
{
   103f6:	b538      	push	{r3, r4, r5, lr}
	void *ptr;
        int nb;

        nb = sizeof(size_t) * 4;
        if (size >= SIZE_MAX >> nb || nmemb >= SIZE_MAX >> nb) {
   103f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   103fc:	4299      	cmp	r1, r3
   103fe:	d80e      	bhi.n	1041e <calloc+0x28>
   10400:	4298      	cmp	r0, r3
   10402:	d80e      	bhi.n	10422 <calloc+0x2c>
            return NULL;
        }
	size *= nmemb;
   10404:	fb00 f401 	mul.w	r4, r0, r1
	ptr = malloc(size);
   10408:	4620      	mov	r0, r4
   1040a:	f000 f8b9 	bl	10580 <malloc>
	if (ptr)
   1040e:	4605      	mov	r5, r0
   10410:	b118      	cbz	r0, 1041a <calloc+0x24>
		memset(ptr, 0, size);
   10412:	4622      	mov	r2, r4
   10414:	2100      	movs	r1, #0
   10416:	f000 f930 	bl	1067a <memset>

	return ptr;
}
   1041a:	4628      	mov	r0, r5
   1041c:	bd38      	pop	{r3, r4, r5, pc}
            return NULL;
   1041e:	2500      	movs	r5, #0
   10420:	e7fb      	b.n	1041a <calloc+0x24>
   10422:	2500      	movs	r5, #0
   10424:	e7f9      	b.n	1041a <calloc+0x24>

00010426 <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
   10426:	4684      	mov	ip, r0
   10428:	4618      	mov	r0, r3
    if (stream->vmt->write == NULL) return 0;
   1042a:	681b      	ldr	r3, [r3, #0]
   1042c:	681b      	ldr	r3, [r3, #0]
   1042e:	b143      	cbz	r3, 10442 <fwrite+0x1c>
{
   10430:	b510      	push	{r4, lr}
   10432:	460c      	mov	r4, r1
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   10434:	fb01 f202 	mul.w	r2, r1, r2
   10438:	4661      	mov	r1, ip
   1043a:	4798      	blx	r3
   1043c:	fbb0 f0f4 	udiv	r0, r0, r4
}
   10440:	bd10      	pop	{r4, pc}
    if (stream->vmt->write == NULL) return 0;
   10442:	2000      	movs	r0, #0
}
   10444:	4770      	bx	lr
	...

00010448 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
   10448:	b538      	push	{r3, r4, r5, lr}
   1044a:	4604      	mov	r4, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
   1044c:	f000 f94c 	bl	106e8 <strlen>
   10450:	4602      	mov	r2, r0
   10452:	4b08      	ldr	r3, [pc, #32]	; (10474 <puts+0x2c>)
   10454:	681d      	ldr	r5, [r3, #0]
   10456:	462b      	mov	r3, r5
   10458:	2101      	movs	r1, #1
   1045a:	4620      	mov	r0, r4
   1045c:	f7ff ffe3 	bl	10426 <fwrite>
   10460:	4604      	mov	r4, r0
   10462:	462b      	mov	r3, r5
   10464:	2201      	movs	r2, #1
   10466:	4611      	mov	r1, r2
   10468:	4803      	ldr	r0, [pc, #12]	; (10478 <puts+0x30>)
   1046a:	f7ff ffdc 	bl	10426 <fwrite>
}
   1046e:	4420      	add	r0, r4
   10470:	bd38      	pop	{r3, r4, r5, pc}
   10472:	bf00      	nop
   10474:	00026d98 	.word	0x00026d98
   10478:	000273a4 	.word	0x000273a4

0001047c <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   1047c:	2001      	movs	r0, #1
   1047e:	4770      	bx	lr

00010480 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   10480:	4770      	bx	lr

00010482 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   10482:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   10484:	f101 0320 	add.w	r3, r1, #32
   10488:	4293      	cmp	r3, r2
   1048a:	d816      	bhi.n	104ba <__malloc_from_block+0x38>
{
   1048c:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   1048e:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   10490:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   10492:	2501      	movs	r5, #1
   10494:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   10496:	1a52      	subs	r2, r2, r1
   10498:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   1049a:	2200      	movs	r2, #0
   1049c:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   1049e:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   104a0:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   104a2:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   104a4:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   104a6:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   104a8:	6901      	ldr	r1, [r0, #16]
   104aa:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   104ac:	6942      	ldr	r2, [r0, #20]
   104ae:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   104b0:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   104b2:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   104b4:	3010      	adds	r0, #16
   104b6:	bc30      	pop	{r4, r5}
   104b8:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   104ba:	2300      	movs	r3, #0
   104bc:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   104be:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   104c0:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   104c2:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   104c4:	615a      	str	r2, [r3, #20]
}
   104c6:	3010      	adds	r0, #16
   104c8:	4770      	bx	lr
	...

000104cc <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   104cc:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   104ce:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   104d0:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   104d2:	6802      	ldr	r2, [r0, #0]
   104d4:	2a01      	cmp	r2, #1
   104d6:	d00d      	beq.n	104f4 <__free_block+0x28>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   104d8:	2201      	movs	r2, #1
   104da:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   104dc:	4a13      	ldr	r2, [pc, #76]	; (1052c <__free_block+0x60>)
   104de:	6910      	ldr	r0, [r2, #16]
   104e0:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   104e2:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   104e4:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   104e6:	691a      	ldr	r2, [r3, #16]
   104e8:	6153      	str	r3, [r2, #20]
   104ea:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   104ec:	680b      	ldr	r3, [r1, #0]
   104ee:	2b01      	cmp	r3, #1
   104f0:	d00b      	beq.n	1050a <__free_block+0x3e>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   104f2:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   104f4:	6842      	ldr	r2, [r0, #4]
   104f6:	eb00 0c02 	add.w	ip, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   104fa:	459c      	cmp	ip, r3
   104fc:	d1ec      	bne.n	104d8 <__free_block+0xc>
        pah->a.size += ah->a.size;
   104fe:	685b      	ldr	r3, [r3, #4]
   10500:	441a      	add	r2, r3
   10502:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   10504:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   10506:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   10508:	e7f0      	b.n	104ec <__free_block+0x20>
        (char *)ah + ah->a.size == (char *)nah) {
   1050a:	6843      	ldr	r3, [r0, #4]
   1050c:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   1050e:	428a      	cmp	r2, r1
   10510:	d1ef      	bne.n	104f2 <__free_block+0x26>
        ah->a.size += nah->a.size;
   10512:	684a      	ldr	r2, [r1, #4]
   10514:	4413      	add	r3, r2
   10516:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   10518:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1051a:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   1051c:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1051e:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   10520:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   10522:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   10524:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   10526:	60da      	str	r2, [r3, #12]
    return ah;
   10528:	e7e3      	b.n	104f2 <__free_block+0x26>
   1052a:	bf00      	nop
   1052c:	2000023c 	.word	0x2000023c

00010530 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   10530:	2917      	cmp	r1, #23
   10532:	d91e      	bls.n	10572 <add_malloc_block+0x42>
{
   10534:	b510      	push	{r4, lr}
   10536:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   10538:	2301      	movs	r3, #1
   1053a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   1053c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   1053e:	4b0d      	ldr	r3, [pc, #52]	; (10574 <add_malloc_block+0x44>)
   10540:	681b      	ldr	r3, [r3, #0]
   10542:	4798      	blx	r3
   10544:	b1a0      	cbz	r0, 10570 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   10546:	4b0c      	ldr	r3, [pc, #48]	; (10578 <add_malloc_block+0x48>)
   10548:	68db      	ldr	r3, [r3, #12]
   1054a:	e000      	b.n	1054e <add_malloc_block+0x1e>
         pah = pah->a.prev) {
   1054c:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1054e:	681a      	ldr	r2, [r3, #0]
   10550:	2a02      	cmp	r2, #2
   10552:	d001      	beq.n	10558 <add_malloc_block+0x28>
        if (pah < fp)
   10554:	42a3      	cmp	r3, r4
   10556:	d2f9      	bcs.n	1054c <add_malloc_block+0x1c>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   10558:	689a      	ldr	r2, [r3, #8]
   1055a:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   1055c:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1055e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   10560:	68a3      	ldr	r3, [r4, #8]
   10562:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   10564:	4620      	mov	r0, r4
   10566:	f7ff ffb1 	bl	104cc <__free_block>

    malloc_unlock();
   1056a:	4b04      	ldr	r3, [pc, #16]	; (1057c <add_malloc_block+0x4c>)
   1056c:	681b      	ldr	r3, [r3, #0]
   1056e:	4798      	blx	r3
}
   10570:	bd10      	pop	{r4, pc}
   10572:	4770      	bx	lr
   10574:	20000254 	.word	0x20000254
   10578:	2000023c 	.word	0x2000023c
   1057c:	20000258 	.word	0x20000258

00010580 <malloc>:
{
   10580:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   10582:	1e43      	subs	r3, r0, #1
   10584:	f113 0f12 	cmn.w	r3, #18
   10588:	d825      	bhi.n	105d6 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1058a:	301f      	adds	r0, #31
   1058c:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   10590:	4b13      	ldr	r3, [pc, #76]	; (105e0 <malloc+0x60>)
   10592:	681b      	ldr	r3, [r3, #0]
   10594:	4798      	blx	r3
   10596:	b300      	cbz	r0, 105da <malloc+0x5a>
    void *result = NULL;
   10598:	2500      	movs	r5, #0
   1059a:	e00d      	b.n	105b8 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   1059c:	4621      	mov	r1, r4
   1059e:	f7ff ff70 	bl	10482 <__malloc_from_block>
   105a2:	4605      	mov	r5, r0
    if (result == NULL) {
   105a4:	b995      	cbnz	r5, 105cc <malloc+0x4c>
        more_mem = _sbrk(size);
   105a6:	4620      	mov	r0, r4
   105a8:	f7f7 fde6 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   105ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   105b0:	d00c      	beq.n	105cc <malloc+0x4c>
            add_malloc_block(more_mem, size);
   105b2:	4621      	mov	r1, r4
   105b4:	f7ff ffbc 	bl	10530 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   105b8:	4b0a      	ldr	r3, [pc, #40]	; (105e4 <malloc+0x64>)
   105ba:	6918      	ldr	r0, [r3, #16]
   105bc:	6803      	ldr	r3, [r0, #0]
   105be:	2b02      	cmp	r3, #2
   105c0:	d0f0      	beq.n	105a4 <malloc+0x24>
        if (fp->a.size >= size) {
   105c2:	6843      	ldr	r3, [r0, #4]
   105c4:	42a3      	cmp	r3, r4
   105c6:	d2e9      	bcs.n	1059c <malloc+0x1c>
         fp = fp->next_free) {
   105c8:	6900      	ldr	r0, [r0, #16]
   105ca:	e7f7      	b.n	105bc <malloc+0x3c>
    malloc_unlock();
   105cc:	4b06      	ldr	r3, [pc, #24]	; (105e8 <malloc+0x68>)
   105ce:	681b      	ldr	r3, [r3, #0]
   105d0:	4798      	blx	r3
}
   105d2:	4628      	mov	r0, r5
   105d4:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   105d6:	2500      	movs	r5, #0
   105d8:	e7fb      	b.n	105d2 <malloc+0x52>
        return NULL;
   105da:	2500      	movs	r5, #0
   105dc:	e7f9      	b.n	105d2 <malloc+0x52>
   105de:	bf00      	nop
   105e0:	20000254 	.word	0x20000254
   105e4:	2000023c 	.word	0x2000023c
   105e8:	20000258 	.word	0x20000258

000105ec <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   105ec:	b170      	cbz	r0, 1060c <free+0x20>
{
   105ee:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   105f0:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   105f4:	4b06      	ldr	r3, [pc, #24]	; (10610 <free+0x24>)
   105f6:	681b      	ldr	r3, [r3, #0]
   105f8:	4798      	blx	r3
   105fa:	b900      	cbnz	r0, 105fe <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   105fc:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   105fe:	4620      	mov	r0, r4
   10600:	f7ff ff64 	bl	104cc <__free_block>
    malloc_unlock();
   10604:	4b03      	ldr	r3, [pc, #12]	; (10614 <free+0x28>)
   10606:	681b      	ldr	r3, [r3, #0]
   10608:	4798      	blx	r3
   1060a:	e7f7      	b.n	105fc <free+0x10>
   1060c:	4770      	bx	lr
   1060e:	bf00      	nop
   10610:	20000254 	.word	0x20000254
   10614:	20000258 	.word	0x20000258

00010618 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   10618:	b470      	push	{r4, r5, r6}
   1061a:	f04f 0500 	mov.w	r5, #0
   1061e:	f022 0603 	bic.w	r6, r2, #3
   10622:	e005      	b.n	10630 <test1>

00010624 <loop1>:
   10624:	5943      	ldr	r3, [r0, r5]
   10626:	594c      	ldr	r4, [r1, r5]
   10628:	42a3      	cmp	r3, r4
   1062a:	d104      	bne.n	10636 <res1>
   1062c:	f105 0504 	add.w	r5, r5, #4

00010630 <test1>:
   10630:	42b5      	cmp	r5, r6
   10632:	d1f7      	bne.n	10624 <loop1>
   10634:	e00d      	b.n	10652 <test2>

00010636 <res1>:
   10636:	ba1b      	rev	r3, r3
   10638:	ba24      	rev	r4, r4
   1063a:	1b1b      	subs	r3, r3, r4
   1063c:	bf8c      	ite	hi
   1063e:	2301      	movhi	r3, #1
   10640:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   10644:	e009      	b.n	1065a <done>

00010646 <loop2>:
   10646:	5d43      	ldrb	r3, [r0, r5]
   10648:	5d4c      	ldrb	r4, [r1, r5]
   1064a:	1b1b      	subs	r3, r3, r4
   1064c:	d105      	bne.n	1065a <done>
   1064e:	f105 0501 	add.w	r5, r5, #1

00010652 <test2>:
   10652:	4295      	cmp	r5, r2
   10654:	d1f7      	bne.n	10646 <loop2>
   10656:	f04f 0300 	mov.w	r3, #0

0001065a <done>:
   1065a:	4618      	mov	r0, r3
   1065c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1065e:	4770      	bx	lr

00010660 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   10660:	e001      	b.n	10666 <test1>

00010662 <loop1>:
   10662:	588b      	ldr	r3, [r1, r2]
   10664:	5083      	str	r3, [r0, r2]

00010666 <test1>:
   10666:	3a04      	subs	r2, #4
   10668:	d5fb      	bpl.n	10662 <loop1>
   1066a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1066e:	e001      	b.n	10674 <test2>

00010670 <loop2>:
   10670:	5c8b      	ldrb	r3, [r1, r2]
   10672:	5483      	strb	r3, [r0, r2]

00010674 <test2>:
   10674:	3a01      	subs	r2, #1
   10676:	d5fb      	bpl.n	10670 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   10678:	4770      	bx	lr

0001067a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1067a:	b410      	push	{r4}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1067c:	4684      	mov	ip, r0
   1067e:	b2c9      	uxtb	r1, r1
   10680:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10684:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   10688:	eb1c 0302 	adds.w	r3, ip, r2
   1068c:	2403      	movs	r4, #3
   1068e:	4023      	ands	r3, r4
   10690:	1ad3      	subs	r3, r2, r3
   10692:	d40e      	bmi.n	106b2 <memset+0x38>
   10694:	e002      	b.n	1069c <memset+0x22>
   10696:	3a01      	subs	r2, #1
   10698:	f80c 1002 	strb.w	r1, [ip, r2]
   1069c:	429a      	cmp	r2, r3
   1069e:	d1fa      	bne.n	10696 <memset+0x1c>
   106a0:	e001      	b.n	106a6 <memset+0x2c>
   106a2:	f84c 1002 	str.w	r1, [ip, r2]
   106a6:	3a04      	subs	r2, #4
   106a8:	d5fb      	bpl.n	106a2 <memset+0x28>
   106aa:	3204      	adds	r2, #4
   106ac:	e001      	b.n	106b2 <memset+0x38>
   106ae:	f80c 1002 	strb.w	r1, [ip, r2]
   106b2:	3a01      	subs	r2, #1
   106b4:	d5fb      	bpl.n	106ae <memset+0x34>
		*q++ = c;
	}
#endif

	return dst;
}
   106b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   106ba:	4770      	bx	lr

000106bc <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   106bc:	2000      	movs	r0, #0
   106be:	4770      	bx	lr

000106c0 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   106c0:	b510      	push	{r4, lr}
   106c2:	4608      	mov	r0, r1
   106c4:	4614      	mov	r4, r2
    console_write(bp, n);
   106c6:	4611      	mov	r1, r2
   106c8:	f003 f8a0 	bl	1380c <console_write>
    return n;
}
   106cc:	4620      	mov	r0, r4
   106ce:	bd10      	pop	{r4, pc}

000106d0 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   106d0:	4684      	mov	ip, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   106d2:	f89c 2000 	ldrb.w	r2, [ip]
   106d6:	f10c 0c01 	add.w	ip, ip, #1
   106da:	7808      	ldrb	r0, [r1, #0]
   106dc:	3101      	adds	r1, #1
		if (d || !ch)
   106de:	1a10      	subs	r0, r2, r0
   106e0:	d101      	bne.n	106e6 <strcmp+0x16>
   106e2:	2a00      	cmp	r2, #0
   106e4:	d1f5      	bne.n	106d2 <strcmp+0x2>
			break;
	}

	return d;
}
   106e6:	4770      	bx	lr

000106e8 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   106e8:	4603      	mov	r3, r0
	while (*ss)
   106ea:	e000      	b.n	106ee <strlen+0x6>
		ss++;
   106ec:	3301      	adds	r3, #1
	while (*ss)
   106ee:	781a      	ldrb	r2, [r3, #0]
   106f0:	2a00      	cmp	r2, #0
   106f2:	d1fb      	bne.n	106ec <strlen+0x4>
	return ss - s;
}
   106f4:	1a18      	subs	r0, r3, r0
   106f6:	4770      	bx	lr

000106f8 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   106f8:	b510      	push	{r4, lr}
   106fa:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   106fc:	b132      	cbz	r2, 1070c <strncpy+0x14>
		n--;
   106fe:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   10700:	f811 3b01 	ldrb.w	r3, [r1], #1
   10704:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   10708:	2b00      	cmp	r3, #0
   1070a:	d1f7      	bne.n	106fc <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   1070c:	2100      	movs	r1, #0
   1070e:	f7ff ffb4 	bl	1067a <memset>

	return dst;
}
   10712:	4620      	mov	r0, r4
   10714:	bd10      	pop	{r4, pc}

00010716 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   10716:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   10718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1071c:	f000 fc2c 	bl	10f78 <strntoumax>
}
   10720:	bd08      	pop	{r3, pc}

00010722 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   10722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10726:	b085      	sub	sp, #20
   10728:	4606      	mov	r6, r0
   1072a:	460f      	mov	r7, r1
   1072c:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1072e:	6853      	ldr	r3, [r2, #4]
   10730:	9302      	str	r3, [sp, #8]
    unsigned long long int d = 1;
   10732:	2501      	movs	r5, #1
   10734:	2400      	movs	r4, #0
    while (num / d >= p->base)
   10736:	e004      	b.n	10742 <ui2a+0x20>
        d *= p->base;
   10738:	fb04 f303 	mul.w	r3, r4, r3
   1073c:	fba5 5402 	umull	r5, r4, r5, r2
   10740:	441c      	add	r4, r3
    while (num / d >= p->base)
   10742:	462a      	mov	r2, r5
   10744:	4623      	mov	r3, r4
   10746:	4630      	mov	r0, r6
   10748:	4639      	mov	r1, r7
   1074a:	f014 fc5b 	bl	25004 <__aeabi_uldivmod>
   1074e:	f899 3003 	ldrb.w	r3, [r9, #3]
   10752:	461a      	mov	r2, r3
   10754:	4298      	cmp	r0, r3
   10756:	f171 0100 	sbcs.w	r1, r1, #0
   1075a:	d2ed      	bcs.n	10738 <ui2a+0x16>
    int n = 0;
   1075c:	f04f 0a00 	mov.w	sl, #0
   10760:	e00b      	b.n	1077a <ui2a+0x58>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   10762:	2230      	movs	r2, #48	; 0x30
   10764:	9b02      	ldr	r3, [sp, #8]
   10766:	4490      	add	r8, r2
   10768:	f803 8b01 	strb.w	r8, [r3], #1
            ++n;
   1076c:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   10770:	9302      	str	r3, [sp, #8]
   10772:	4605      	mov	r5, r0
   10774:	460c      	mov	r4, r1
   10776:	9e00      	ldr	r6, [sp, #0]
   10778:	9f01      	ldr	r7, [sp, #4]
    while (d != 0) {
   1077a:	ea55 0304 	orrs.w	r3, r5, r4
   1077e:	d031      	beq.n	107e4 <ui2a+0xc2>
        unsigned long long  dgt = num / d;
   10780:	462a      	mov	r2, r5
   10782:	4623      	mov	r3, r4
   10784:	4630      	mov	r0, r6
   10786:	4639      	mov	r1, r7
   10788:	f014 fc3c 	bl	25004 <__aeabi_uldivmod>
   1078c:	4680      	mov	r8, r0
   1078e:	9103      	str	r1, [sp, #12]
        num %= d;
   10790:	462a      	mov	r2, r5
   10792:	4623      	mov	r3, r4
   10794:	4630      	mov	r0, r6
   10796:	4639      	mov	r1, r7
   10798:	f014 fc34 	bl	25004 <__aeabi_uldivmod>
   1079c:	9200      	str	r2, [sp, #0]
   1079e:	9301      	str	r3, [sp, #4]
        d /= p->base;
   107a0:	f899 b003 	ldrb.w	fp, [r9, #3]
   107a4:	465a      	mov	r2, fp
   107a6:	2300      	movs	r3, #0
   107a8:	4628      	mov	r0, r5
   107aa:	4621      	mov	r1, r4
   107ac:	f014 fc2a 	bl	25004 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   107b0:	f1ba 0f00 	cmp.w	sl, #0
   107b4:	d107      	bne.n	107c6 <ui2a+0xa4>
   107b6:	42ae      	cmp	r6, r5
   107b8:	eb77 0304 	sbcs.w	r3, r7, r4
   107bc:	d203      	bcs.n	107c6 <ui2a+0xa4>
   107be:	455d      	cmp	r5, fp
   107c0:	f174 0300 	sbcs.w	r3, r4, #0
   107c4:	d2d5      	bcs.n	10772 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   107c6:	f1b8 0f0a 	cmp.w	r8, #10
   107ca:	9b03      	ldr	r3, [sp, #12]
   107cc:	f173 0300 	sbcs.w	r3, r3, #0
   107d0:	d3c7      	bcc.n	10762 <ui2a+0x40>
   107d2:	f899 3002 	ldrb.w	r3, [r9, #2]
   107d6:	f013 0f04 	tst.w	r3, #4
   107da:	d001      	beq.n	107e0 <ui2a+0xbe>
   107dc:	2237      	movs	r2, #55	; 0x37
   107de:	e7c1      	b.n	10764 <ui2a+0x42>
   107e0:	2257      	movs	r2, #87	; 0x57
   107e2:	e7bf      	b.n	10764 <ui2a+0x42>
        }
    }
    *bf = 0;
   107e4:	2300      	movs	r3, #0
   107e6:	9a02      	ldr	r2, [sp, #8]
   107e8:	7013      	strb	r3, [r2, #0]
}
   107ea:	b005      	add	sp, #20
   107ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000107f0 <i2a>:

static void i2a(long long int num, struct param *p)
{
   107f0:	b508      	push	{r3, lr}
    if (num < 0) {
   107f2:	2900      	cmp	r1, #0
   107f4:	db02      	blt.n	107fc <i2a+0xc>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   107f6:	f7ff ff94 	bl	10722 <ui2a>
}
   107fa:	bd08      	pop	{r3, pc}
        num = -num;
   107fc:	4240      	negs	r0, r0
   107fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   10802:	7893      	ldrb	r3, [r2, #2]
   10804:	f043 0301 	orr.w	r3, r3, #1
   10808:	7093      	strb	r3, [r2, #2]
   1080a:	e7f4      	b.n	107f6 <i2a+0x6>

0001080c <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1080c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   10810:	b2db      	uxtb	r3, r3
   10812:	2b09      	cmp	r3, #9
   10814:	d90b      	bls.n	1082e <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   10816:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1081a:	b2db      	uxtb	r3, r3
   1081c:	2b05      	cmp	r3, #5
   1081e:	d908      	bls.n	10832 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   10820:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   10824:	b2db      	uxtb	r3, r3
   10826:	2b05      	cmp	r3, #5
   10828:	d805      	bhi.n	10836 <a2d+0x2a>
        return ch - 'A' + 10;
   1082a:	3837      	subs	r0, #55	; 0x37
   1082c:	4770      	bx	lr
        return ch - '0';
   1082e:	3830      	subs	r0, #48	; 0x30
   10830:	4770      	bx	lr
        return ch - 'a' + 10;
   10832:	3857      	subs	r0, #87	; 0x57
   10834:	4770      	bx	lr
    else
        return -1;
   10836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1083a:	4770      	bx	lr

0001083c <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1083c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10840:	4604      	mov	r4, r0
   10842:	460f      	mov	r7, r1
   10844:	4615      	mov	r5, r2
   10846:	4698      	mov	r8, r3
    const char *p = *src;
   10848:	f8d1 9000 	ldr.w	r9, [r1]
    int num = 0;
   1084c:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1084e:	e005      	b.n	1085c <a2i+0x20>
        if (digit > base)
            break;
        num = num * base + digit;
   10850:	fb05 0606 	mla	r6, r5, r6, r0
        ch = *p++;
   10854:	46cc      	mov	ip, r9
   10856:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1085a:	46e1      	mov	r9, ip
    while ((digit = a2d(ch)) >= 0) {
   1085c:	4620      	mov	r0, r4
   1085e:	f7ff ffd5 	bl	1080c <a2d>
   10862:	2800      	cmp	r0, #0
   10864:	db01      	blt.n	1086a <a2i+0x2e>
        if (digit > base)
   10866:	42a8      	cmp	r0, r5
   10868:	ddf2      	ble.n	10850 <a2i+0x14>
    }
    *src = p;
   1086a:	f8c7 9000 	str.w	r9, [r7]
    *nump = num;
   1086e:	f888 6000 	strb.w	r6, [r8]
    return ch;
}
   10872:	4620      	mov	r0, r4
   10874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010878 <putf>:

static int putf(FILE *putp, char c)
{
   10878:	b500      	push	{lr}
   1087a:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1087c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   10880:	6803      	ldr	r3, [r0, #0]
   10882:	681b      	ldr	r3, [r3, #0]
   10884:	b143      	cbz	r3, 10898 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   10886:	2201      	movs	r2, #1
   10888:	f10d 0107 	add.w	r1, sp, #7
   1088c:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1088e:	2801      	cmp	r0, #1
   10890:	d102      	bne.n	10898 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   10892:	b003      	add	sp, #12
   10894:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   10898:	2000      	movs	r0, #0
   1089a:	e7fa      	b.n	10892 <putf+0x1a>

0001089c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1089c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108a0:	4607      	mov	r7, r0
   108a2:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   108a4:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   108a6:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   108a8:	e000      	b.n	108ac <putchw+0x10>
        n--;
   108aa:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   108ac:	f813 2b01 	ldrb.w	r2, [r3], #1
   108b0:	b10a      	cbz	r2, 108b6 <putchw+0x1a>
   108b2:	2c00      	cmp	r4, #0
   108b4:	dcf9      	bgt.n	108aa <putchw+0xe>
    if (p->sign)
   108b6:	f898 3002 	ldrb.w	r3, [r8, #2]
   108ba:	f013 0f01 	tst.w	r3, #1
   108be:	d000      	beq.n	108c2 <putchw+0x26>
        n--;
   108c0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   108c2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   108c6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   108ca:	b29b      	uxth	r3, r3
   108cc:	f241 0202 	movw	r2, #4098	; 0x1002
   108d0:	4293      	cmp	r3, r2
   108d2:	d021      	beq.n	10918 <putchw+0x7c>
        n -= 2;
    else if (p->alt && p->base == 8)
   108d4:	f640 0202 	movw	r2, #2050	; 0x802
   108d8:	4293      	cmp	r3, r2
   108da:	d01f      	beq.n	1091c <putchw+0x80>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   108dc:	f8d8 3000 	ldr.w	r3, [r8]
   108e0:	4e36      	ldr	r6, [pc, #216]	; (109bc <putchw+0x120>)
   108e2:	401e      	ands	r6, r3
   108e4:	b316      	cbz	r6, 1092c <putchw+0x90>
    unsigned written = 0;
   108e6:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   108e8:	f898 3002 	ldrb.w	r3, [r8, #2]
   108ec:	f013 0f01 	tst.w	r3, #1
   108f0:	d121      	bne.n	10936 <putchw+0x9a>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   108f2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   108f6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   108fa:	b29b      	uxth	r3, r3
   108fc:	f241 0202 	movw	r2, #4098	; 0x1002
   10900:	4293      	cmp	r3, r2
   10902:	d01e      	beq.n	10942 <putchw+0xa6>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   10904:	f640 0202 	movw	r2, #2050	; 0x802
   10908:	4293      	cmp	r3, r2
   1090a:	d02c      	beq.n	10966 <putchw+0xca>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1090c:	f898 3001 	ldrb.w	r3, [r8, #1]
   10910:	bbab      	cbnz	r3, 1097e <putchw+0xe2>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   10912:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   10916:	e03b      	b.n	10990 <putchw+0xf4>
        n -= 2;
   10918:	3c02      	subs	r4, #2
   1091a:	e7df      	b.n	108dc <putchw+0x40>
        n--;
   1091c:	3c01      	subs	r4, #1
   1091e:	e7dd      	b.n	108dc <putchw+0x40>
            written += putf(putp, ' ');
   10920:	2120      	movs	r1, #32
   10922:	4638      	mov	r0, r7
   10924:	f7ff ffa8 	bl	10878 <putf>
   10928:	4406      	add	r6, r0
        while (n-- > 0)
   1092a:	462c      	mov	r4, r5
   1092c:	1e65      	subs	r5, r4, #1
   1092e:	2c00      	cmp	r4, #0
   10930:	dcf6      	bgt.n	10920 <putchw+0x84>
   10932:	462c      	mov	r4, r5
   10934:	e7d8      	b.n	108e8 <putchw+0x4c>
        written += putf(putp, '-');
   10936:	212d      	movs	r1, #45	; 0x2d
   10938:	4638      	mov	r0, r7
   1093a:	f7ff ff9d 	bl	10878 <putf>
   1093e:	4406      	add	r6, r0
   10940:	e7d7      	b.n	108f2 <putchw+0x56>
        written += putf(putp, '0');
   10942:	2130      	movs	r1, #48	; 0x30
   10944:	4638      	mov	r0, r7
   10946:	f7ff ff97 	bl	10878 <putf>
   1094a:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1094c:	f898 3002 	ldrb.w	r3, [r8, #2]
   10950:	f013 0f04 	tst.w	r3, #4
   10954:	d005      	beq.n	10962 <putchw+0xc6>
   10956:	2158      	movs	r1, #88	; 0x58
   10958:	4638      	mov	r0, r7
   1095a:	f7ff ff8d 	bl	10878 <putf>
   1095e:	4406      	add	r6, r0
   10960:	e7d4      	b.n	1090c <putchw+0x70>
   10962:	2178      	movs	r1, #120	; 0x78
   10964:	e7f8      	b.n	10958 <putchw+0xbc>
        written += putf(putp, '0');
   10966:	2130      	movs	r1, #48	; 0x30
   10968:	4638      	mov	r0, r7
   1096a:	f7ff ff85 	bl	10878 <putf>
   1096e:	4406      	add	r6, r0
   10970:	e7cc      	b.n	1090c <putchw+0x70>
            written += putf(putp, '0');
   10972:	2130      	movs	r1, #48	; 0x30
   10974:	4638      	mov	r0, r7
   10976:	f7ff ff7f 	bl	10878 <putf>
   1097a:	4406      	add	r6, r0
        while (n-- > 0)
   1097c:	462c      	mov	r4, r5
   1097e:	1e65      	subs	r5, r4, #1
   10980:	2c00      	cmp	r4, #0
   10982:	dcf6      	bgt.n	10972 <putchw+0xd6>
   10984:	462c      	mov	r4, r5
   10986:	e7c4      	b.n	10912 <putchw+0x76>
        written += putf(putp, ch);
   10988:	4638      	mov	r0, r7
   1098a:	f7ff ff75 	bl	10878 <putf>
   1098e:	4406      	add	r6, r0
    while ((ch = *bf++))
   10990:	f815 1b01 	ldrb.w	r1, [r5], #1
   10994:	2900      	cmp	r1, #0
   10996:	d1f7      	bne.n	10988 <putchw+0xec>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   10998:	f898 3002 	ldrb.w	r3, [r8, #2]
   1099c:	f013 0f08 	tst.w	r3, #8
   109a0:	d108      	bne.n	109b4 <putchw+0x118>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   109a2:	4630      	mov	r0, r6
   109a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            written += putf(putp, ' ');
   109a8:	2120      	movs	r1, #32
   109aa:	4638      	mov	r0, r7
   109ac:	f7ff ff64 	bl	10878 <putf>
   109b0:	4406      	add	r6, r0
        while (n-- > 0)
   109b2:	462c      	mov	r4, r5
   109b4:	1e65      	subs	r5, r4, #1
   109b6:	2c00      	cmp	r4, #0
   109b8:	dcf6      	bgt.n	109a8 <putchw+0x10c>
   109ba:	e7f2      	b.n	109a2 <putchw+0x106>
   109bc:	0008ff00 	.word	0x0008ff00

000109c0 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   109c0:	b160      	cbz	r0, 109dc <intarg+0x1c>
   109c2:	2801      	cmp	r0, #1
   109c4:	d018      	beq.n	109f8 <intarg+0x38>
        }
        break;

    case 2:
    default:
        if (sign) {
   109c6:	b329      	cbz	r1, 10a14 <intarg+0x54>
            val = va_arg(*va, long long);
   109c8:	6813      	ldr	r3, [r2, #0]
   109ca:	3307      	adds	r3, #7
   109cc:	f023 0307 	bic.w	r3, r3, #7
   109d0:	f103 0108 	add.w	r1, r3, #8
   109d4:	6011      	str	r1, [r2, #0]
   109d6:	6818      	ldr	r0, [r3, #0]
   109d8:	6859      	ldr	r1, [r3, #4]
   109da:	4770      	bx	lr
        if (sign) {
   109dc:	b131      	cbz	r1, 109ec <intarg+0x2c>
            val = va_arg(*va, int);
   109de:	6813      	ldr	r3, [r2, #0]
   109e0:	1d19      	adds	r1, r3, #4
   109e2:	6011      	str	r1, [r2, #0]
   109e4:	6819      	ldr	r1, [r3, #0]
   109e6:	4608      	mov	r0, r1
   109e8:	17c9      	asrs	r1, r1, #31
   109ea:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   109ec:	6813      	ldr	r3, [r2, #0]
   109ee:	1d19      	adds	r1, r3, #4
   109f0:	6011      	str	r1, [r2, #0]
   109f2:	6818      	ldr	r0, [r3, #0]
   109f4:	2100      	movs	r1, #0
   109f6:	4770      	bx	lr
        if (sign) {
   109f8:	b131      	cbz	r1, 10a08 <intarg+0x48>
            val = va_arg(*va, long);
   109fa:	6813      	ldr	r3, [r2, #0]
   109fc:	1d19      	adds	r1, r3, #4
   109fe:	6011      	str	r1, [r2, #0]
   10a00:	6819      	ldr	r1, [r3, #0]
   10a02:	4608      	mov	r0, r1
   10a04:	17c9      	asrs	r1, r1, #31
   10a06:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   10a08:	6813      	ldr	r3, [r2, #0]
   10a0a:	1d19      	adds	r1, r3, #4
   10a0c:	6011      	str	r1, [r2, #0]
   10a0e:	6818      	ldr	r0, [r3, #0]
   10a10:	2100      	movs	r1, #0
   10a12:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   10a14:	6813      	ldr	r3, [r2, #0]
   10a16:	3307      	adds	r3, #7
   10a18:	f023 0307 	bic.w	r3, r3, #7
   10a1c:	f103 0108 	add.w	r1, r3, #8
   10a20:	6011      	str	r1, [r2, #0]
   10a22:	6818      	ldr	r0, [r3, #0]
   10a24:	6859      	ldr	r1, [r3, #4]
        }
        break;
    }

    return val;
}
   10a26:	4770      	bx	lr

00010a28 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   10a28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   10a2c:	b08a      	sub	sp, #40	; 0x28
   10a2e:	4606      	mov	r6, r0
   10a30:	9101      	str	r1, [sp, #4]
   10a32:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   10a34:	ab02      	add	r3, sp, #8
   10a36:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   10a38:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   10a3a:	9b01      	ldr	r3, [sp, #4]
   10a3c:	1c5a      	adds	r2, r3, #1
   10a3e:	9201      	str	r2, [sp, #4]
   10a40:	7819      	ldrb	r1, [r3, #0]
   10a42:	2900      	cmp	r1, #0
   10a44:	f000 8227 	beq.w	10e96 <tfp_format+0x46e>
        if (ch != '%') {
   10a48:	2925      	cmp	r1, #37	; 0x25
   10a4a:	d004      	beq.n	10a56 <tfp_format+0x2e>
            written += putf(putp, ch);
   10a4c:	4630      	mov	r0, r6
   10a4e:	f7ff ff13 	bl	10878 <putf>
   10a52:	4405      	add	r5, r0
   10a54:	e7f1      	b.n	10a3a <tfp_format+0x12>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   10a56:	2300      	movs	r3, #0
   10a58:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
            p.alt = 0;
   10a5c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10a60:	f363 0241 	bfi	r2, r3, #1, #1
   10a64:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.width = 0;
   10a68:	f88d 3020 	strb.w	r3, [sp, #32]
            p.sign = 0;
   10a6c:	b2d2      	uxtb	r2, r2
   10a6e:	f363 0200 	bfi	r2, r3, #0, #1
   10a72:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.left = 0;
   10a76:	b2d2      	uxtb	r2, r2
   10a78:	f363 02c3 	bfi	r2, r3, #3, #1
   10a7c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            p.uc = 0;
   10a80:	b2d2      	uxtb	r2, r2
   10a82:	f363 0282 	bfi	r2, r3, #2, #1
   10a86:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   10a8a:	9b01      	ldr	r3, [sp, #4]
   10a8c:	1c5a      	adds	r2, r3, #1
   10a8e:	9201      	str	r2, [sp, #4]
   10a90:	781c      	ldrb	r4, [r3, #0]
   10a92:	b144      	cbz	r4, 10aa6 <tfp_format+0x7e>
                switch (ch) {
   10a94:	2c2d      	cmp	r4, #45	; 0x2d
   10a96:	f000 80de 	beq.w	10c56 <tfp_format+0x22e>
   10a9a:	2c30      	cmp	r4, #48	; 0x30
   10a9c:	f000 80ca 	beq.w	10c34 <tfp_format+0x20c>
   10aa0:	2c23      	cmp	r4, #35	; 0x23
   10aa2:	f000 80d1 	beq.w	10c48 <tfp_format+0x220>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   10aa6:	2c2a      	cmp	r4, #42	; 0x2a
   10aa8:	f000 80df 	beq.w	10c6a <tfp_format+0x242>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   10aac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   10ab0:	b2db      	uxtb	r3, r3
   10ab2:	2b09      	cmp	r3, #9
   10ab4:	f240 80ed 	bls.w	10c92 <tfp_format+0x26a>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   10ab8:	2c6c      	cmp	r4, #108	; 0x6c
   10aba:	f000 80f2 	beq.w	10ca2 <tfp_format+0x27a>
            lng = 0;
   10abe:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   10ac0:	2c7a      	cmp	r4, #122	; 0x7a
   10ac2:	f000 80fb 	beq.w	10cbc <tfp_format+0x294>
                ch = *(fmt++);
            }

            switch (ch) {
   10ac6:	2c00      	cmp	r4, #0
   10ac8:	f000 81e5 	beq.w	10e96 <tfp_format+0x46e>
   10acc:	2c78      	cmp	r4, #120	; 0x78
   10ace:	d8b4      	bhi.n	10a3a <tfp_format+0x12>
   10ad0:	2c25      	cmp	r4, #37	; 0x25
   10ad2:	d3b2      	bcc.n	10a3a <tfp_format+0x12>
   10ad4:	f1a4 0325 	sub.w	r3, r4, #37	; 0x25
   10ad8:	2b53      	cmp	r3, #83	; 0x53
   10ada:	d8ae      	bhi.n	10a3a <tfp_format+0x12>
   10adc:	a201      	add	r2, pc, #4	; (adr r2, 10ae4 <tfp_format+0xbc>)
   10ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10ae2:	bf00      	nop
   10ae4:	00010e8b 	.word	0x00010e8b
   10ae8:	00010a3b 	.word	0x00010a3b
   10aec:	00010a3b 	.word	0x00010a3b
   10af0:	00010a3b 	.word	0x00010a3b
   10af4:	00010a3b 	.word	0x00010a3b
   10af8:	00010a3b 	.word	0x00010a3b
   10afc:	00010a3b 	.word	0x00010a3b
   10b00:	00010a3b 	.word	0x00010a3b
   10b04:	00010a3b 	.word	0x00010a3b
   10b08:	00010a3b 	.word	0x00010a3b
   10b0c:	00010a3b 	.word	0x00010a3b
   10b10:	00010a3b 	.word	0x00010a3b
   10b14:	00010a3b 	.word	0x00010a3b
   10b18:	00010a3b 	.word	0x00010a3b
   10b1c:	00010a3b 	.word	0x00010a3b
   10b20:	00010a3b 	.word	0x00010a3b
   10b24:	00010a3b 	.word	0x00010a3b
   10b28:	00010a3b 	.word	0x00010a3b
   10b2c:	00010a3b 	.word	0x00010a3b
   10b30:	00010a3b 	.word	0x00010a3b
   10b34:	00010a3b 	.word	0x00010a3b
   10b38:	00010a3b 	.word	0x00010a3b
   10b3c:	00010a3b 	.word	0x00010a3b
   10b40:	00010a3b 	.word	0x00010a3b
   10b44:	00010a3b 	.word	0x00010a3b
   10b48:	00010a3b 	.word	0x00010a3b
   10b4c:	00010a3b 	.word	0x00010a3b
   10b50:	00010a3b 	.word	0x00010a3b
   10b54:	00010a3b 	.word	0x00010a3b
   10b58:	00010a3b 	.word	0x00010a3b
   10b5c:	00010a3b 	.word	0x00010a3b
   10b60:	00010a3b 	.word	0x00010a3b
   10b64:	00010a3b 	.word	0x00010a3b
   10b68:	00010a3b 	.word	0x00010a3b
   10b6c:	00010a3b 	.word	0x00010a3b
   10b70:	00010a3b 	.word	0x00010a3b
   10b74:	00010a3b 	.word	0x00010a3b
   10b78:	00010a3b 	.word	0x00010a3b
   10b7c:	00010a3b 	.word	0x00010a3b
   10b80:	00010a3b 	.word	0x00010a3b
   10b84:	00010a3b 	.word	0x00010a3b
   10b88:	00010a3b 	.word	0x00010a3b
   10b8c:	00010a3b 	.word	0x00010a3b
   10b90:	00010a3b 	.word	0x00010a3b
   10b94:	00010a3b 	.word	0x00010a3b
   10b98:	00010a3b 	.word	0x00010a3b
   10b9c:	00010a3b 	.word	0x00010a3b
   10ba0:	00010a3b 	.word	0x00010a3b
   10ba4:	00010a3b 	.word	0x00010a3b
   10ba8:	00010a3b 	.word	0x00010a3b
   10bac:	00010a3b 	.word	0x00010a3b
   10bb0:	00010d07 	.word	0x00010d07
   10bb4:	00010a3b 	.word	0x00010a3b
   10bb8:	00010a3b 	.word	0x00010a3b
   10bbc:	00010a3b 	.word	0x00010a3b
   10bc0:	00010a3b 	.word	0x00010a3b
   10bc4:	00010a3b 	.word	0x00010a3b
   10bc8:	00010a3b 	.word	0x00010a3b
   10bcc:	00010a3b 	.word	0x00010a3b
   10bd0:	00010a3b 	.word	0x00010a3b
   10bd4:	00010a3b 	.word	0x00010a3b
   10bd8:	00010a3b 	.word	0x00010a3b
   10bdc:	00010d9d 	.word	0x00010d9d
   10be0:	00010ce7 	.word	0x00010ce7
   10be4:	00010a3b 	.word	0x00010a3b
   10be8:	00010dc9 	.word	0x00010dc9
   10bec:	00010a3b 	.word	0x00010a3b
   10bf0:	00010a3b 	.word	0x00010a3b
   10bf4:	00010ce7 	.word	0x00010ce7
   10bf8:	00010a3b 	.word	0x00010a3b
   10bfc:	00010a3b 	.word	0x00010a3b
   10c00:	00010a3b 	.word	0x00010a3b
   10c04:	00010a3b 	.word	0x00010a3b
   10c08:	00010a3b 	.word	0x00010a3b
   10c0c:	00010d3b 	.word	0x00010d3b
   10c10:	00010d5b 	.word	0x00010d5b
   10c14:	00010a3b 	.word	0x00010a3b
   10c18:	00010a3b 	.word	0x00010a3b
   10c1c:	00010daf 	.word	0x00010daf
   10c20:	00010a3b 	.word	0x00010a3b
   10c24:	00010cc7 	.word	0x00010cc7
   10c28:	00010a3b 	.word	0x00010a3b
   10c2c:	00010a3b 	.word	0x00010a3b
   10c30:	00010d07 	.word	0x00010d07
                    if (!p.left) {
   10c34:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10c38:	f013 0f08 	tst.w	r3, #8
   10c3c:	f47f af25 	bne.w	10a8a <tfp_format+0x62>
                        p.lz = 1;
   10c40:	2301      	movs	r3, #1
   10c42:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   10c46:	e720      	b.n	10a8a <tfp_format+0x62>
                    p.alt = 1;
   10c48:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10c4c:	f043 0302 	orr.w	r3, r3, #2
   10c50:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   10c54:	e719      	b.n	10a8a <tfp_format+0x62>
                    p.left = 1;
   10c56:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10c5a:	f043 0308 	orr.w	r3, r3, #8
   10c5e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   10c62:	2300      	movs	r3, #0
   10c64:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   10c68:	e70f      	b.n	10a8a <tfp_format+0x62>
                i = intarg(0, 1, &va);
   10c6a:	466a      	mov	r2, sp
   10c6c:	2101      	movs	r1, #1
   10c6e:	2000      	movs	r0, #0
   10c70:	f7ff fea6 	bl	109c0 <intarg>
                if (i > UCHAR_MAX) {
   10c74:	28ff      	cmp	r0, #255	; 0xff
   10c76:	dd07      	ble.n	10c88 <tfp_format+0x260>
                    p.width = UCHAR_MAX;
   10c78:	23ff      	movs	r3, #255	; 0xff
   10c7a:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   10c7e:	9b01      	ldr	r3, [sp, #4]
   10c80:	1c5a      	adds	r2, r3, #1
   10c82:	9201      	str	r2, [sp, #4]
   10c84:	781c      	ldrb	r4, [r3, #0]
   10c86:	e717      	b.n	10ab8 <tfp_format+0x90>
                } else if (i > 0) {
   10c88:	2800      	cmp	r0, #0
   10c8a:	ddf8      	ble.n	10c7e <tfp_format+0x256>
                    p.width = i;
   10c8c:	f88d 0020 	strb.w	r0, [sp, #32]
   10c90:	e7f5      	b.n	10c7e <tfp_format+0x256>
                ch = a2i(ch, &fmt, 10, &(p.width));
   10c92:	ab08      	add	r3, sp, #32
   10c94:	220a      	movs	r2, #10
   10c96:	a901      	add	r1, sp, #4
   10c98:	4620      	mov	r0, r4
   10c9a:	f7ff fdcf 	bl	1083c <a2i>
   10c9e:	4604      	mov	r4, r0
   10ca0:	e70a      	b.n	10ab8 <tfp_format+0x90>
                ch = *(fmt++);
   10ca2:	9b01      	ldr	r3, [sp, #4]
   10ca4:	1c5a      	adds	r2, r3, #1
   10ca6:	9201      	str	r2, [sp, #4]
   10ca8:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   10caa:	2c6c      	cmp	r4, #108	; 0x6c
   10cac:	d001      	beq.n	10cb2 <tfp_format+0x28a>
                lng = 1;
   10cae:	2001      	movs	r0, #1
   10cb0:	e706      	b.n	10ac0 <tfp_format+0x98>
                    ch = *(fmt++);
   10cb2:	1c9a      	adds	r2, r3, #2
   10cb4:	9201      	str	r2, [sp, #4]
   10cb6:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   10cb8:	2002      	movs	r0, #2
   10cba:	e701      	b.n	10ac0 <tfp_format+0x98>
                ch = *(fmt++);
   10cbc:	9b01      	ldr	r3, [sp, #4]
   10cbe:	1c5a      	adds	r2, r3, #1
   10cc0:	9201      	str	r2, [sp, #4]
   10cc2:	781c      	ldrb	r4, [r3, #0]
   10cc4:	e6ff      	b.n	10ac6 <tfp_format+0x9e>
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
   10cc6:	230a      	movs	r3, #10
   10cc8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   10ccc:	466a      	mov	r2, sp
   10cce:	2100      	movs	r1, #0
   10cd0:	f7ff fe76 	bl	109c0 <intarg>
   10cd4:	aa08      	add	r2, sp, #32
   10cd6:	f7ff fd24 	bl	10722 <ui2a>
                written += putchw(putp, &p);
   10cda:	a908      	add	r1, sp, #32
   10cdc:	4630      	mov	r0, r6
   10cde:	f7ff fddd 	bl	1089c <putchw>
   10ce2:	4405      	add	r5, r0
                break;
   10ce4:	e6a9      	b.n	10a3a <tfp_format+0x12>
            case 'd':
            case 'i':
                p.base = 10;
   10ce6:	230a      	movs	r3, #10
   10ce8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   10cec:	466a      	mov	r2, sp
   10cee:	2101      	movs	r1, #1
   10cf0:	f7ff fe66 	bl	109c0 <intarg>
   10cf4:	aa08      	add	r2, sp, #32
   10cf6:	f7ff fd7b 	bl	107f0 <i2a>
                written += putchw(putp, &p);
   10cfa:	a908      	add	r1, sp, #32
   10cfc:	4630      	mov	r0, r6
   10cfe:	f7ff fdcd 	bl	1089c <putchw>
   10d02:	4405      	add	r5, r0
                break;
   10d04:	e699      	b.n	10a3a <tfp_format+0x12>
            case 'x':
            case 'X':
                p.base = 16;
   10d06:	2310      	movs	r3, #16
   10d08:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   10d0c:	2c58      	cmp	r4, #88	; 0x58
   10d0e:	bf14      	ite	ne
   10d10:	2400      	movne	r4, #0
   10d12:	2401      	moveq	r4, #1
   10d14:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10d18:	f364 0382 	bfi	r3, r4, #2, #1
   10d1c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   10d20:	466a      	mov	r2, sp
   10d22:	2100      	movs	r1, #0
   10d24:	f7ff fe4c 	bl	109c0 <intarg>
   10d28:	aa08      	add	r2, sp, #32
   10d2a:	f7ff fcfa 	bl	10722 <ui2a>
                written += putchw(putp, &p);
   10d2e:	a908      	add	r1, sp, #32
   10d30:	4630      	mov	r0, r6
   10d32:	f7ff fdb3 	bl	1089c <putchw>
   10d36:	4405      	add	r5, r0
                break;
   10d38:	e67f      	b.n	10a3a <tfp_format+0x12>
            case 'o':
                p.base = 8;
   10d3a:	2308      	movs	r3, #8
   10d3c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   10d40:	466a      	mov	r2, sp
   10d42:	2100      	movs	r1, #0
   10d44:	f7ff fe3c 	bl	109c0 <intarg>
   10d48:	aa08      	add	r2, sp, #32
   10d4a:	f7ff fcea 	bl	10722 <ui2a>
                written += putchw(putp, &p);
   10d4e:	a908      	add	r1, sp, #32
   10d50:	4630      	mov	r0, r6
   10d52:	f7ff fda3 	bl	1089c <putchw>
   10d56:	4405      	add	r5, r0
                break;
   10d58:	e66f      	b.n	10a3a <tfp_format+0x12>
            case 'p':
                v = va_arg(va, void *);
   10d5a:	9b00      	ldr	r3, [sp, #0]
   10d5c:	1d1a      	adds	r2, r3, #4
   10d5e:	9200      	str	r2, [sp, #0]
   10d60:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   10d62:	2310      	movs	r3, #16
   10d64:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   10d68:	aa08      	add	r2, sp, #32
   10d6a:	2100      	movs	r1, #0
   10d6c:	f7ff fcd9 	bl	10722 <ui2a>
                p.width = 2 * sizeof(void*);
   10d70:	2308      	movs	r3, #8
   10d72:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   10d76:	2301      	movs	r3, #1
   10d78:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   10d7c:	2130      	movs	r1, #48	; 0x30
   10d7e:	4630      	mov	r0, r6
   10d80:	f7ff fd7a 	bl	10878 <putf>
   10d84:	4405      	add	r5, r0
                written += putf(putp, 'x');
   10d86:	2178      	movs	r1, #120	; 0x78
   10d88:	4630      	mov	r0, r6
   10d8a:	f7ff fd75 	bl	10878 <putf>
   10d8e:	4405      	add	r5, r0
                written += putchw(putp, &p);
   10d90:	a908      	add	r1, sp, #32
   10d92:	4630      	mov	r0, r6
   10d94:	f7ff fd82 	bl	1089c <putchw>
   10d98:	4405      	add	r5, r0
                break;
   10d9a:	e64e      	b.n	10a3a <tfp_format+0x12>
            case 'c':
                written += putf(putp, (char)(va_arg(va, int)));
   10d9c:	9b00      	ldr	r3, [sp, #0]
   10d9e:	1d1a      	adds	r2, r3, #4
   10da0:	9200      	str	r2, [sp, #0]
   10da2:	7819      	ldrb	r1, [r3, #0]
   10da4:	4630      	mov	r0, r6
   10da6:	f7ff fd67 	bl	10878 <putf>
   10daa:	4405      	add	r5, r0
                break;
   10dac:	e645      	b.n	10a3a <tfp_format+0x12>
            case 's':
                p.bf = va_arg(va, char *);
   10dae:	9b00      	ldr	r3, [sp, #0]
   10db0:	1d1a      	adds	r2, r3, #4
   10db2:	9200      	str	r2, [sp, #0]
   10db4:	681b      	ldr	r3, [r3, #0]
   10db6:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   10db8:	a908      	add	r1, sp, #32
   10dba:	4630      	mov	r0, r6
   10dbc:	f7ff fd6e 	bl	1089c <putchw>
   10dc0:	4405      	add	r5, r0
                p.bf = bf;
   10dc2:	ab02      	add	r3, sp, #8
   10dc4:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   10dc6:	e638      	b.n	10a3a <tfp_format+0x12>
#if MYNEWT_VAL(FLOAT_USER)
            case 'f':
                p.base = 10;
   10dc8:	230a      	movs	r3, #10
   10dca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                d = va_arg(va, double);
   10dce:	9b00      	ldr	r3, [sp, #0]
   10dd0:	3307      	adds	r3, #7
   10dd2:	f023 0307 	bic.w	r3, r3, #7
   10dd6:	f103 0208 	add.w	r2, r3, #8
   10dda:	9200      	str	r2, [sp, #0]
   10ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
                /* Convert to an int to get the integer part of the number. */
                n = d;
   10de0:	4640      	mov	r0, r8
   10de2:	4649      	mov	r1, r9
   10de4:	f013 ff18 	bl	24c18 <__aeabi_d2iz>
   10de8:	4604      	mov	r4, r0
                /* Convert to ascii */
                i2a(n, &p);
   10dea:	aa08      	add	r2, sp, #32
   10dec:	17c1      	asrs	r1, r0, #31
   10dee:	f7ff fcff 	bl	107f0 <i2a>
                /* When the double was converted to an int it was truncated
                 * towards 0.  If the number is in the range (-1, 0), the
                 * negative sign was lost.  Preserve the sign in this case.
                 */
                if (d < 0.0) {
   10df2:	2200      	movs	r2, #0
   10df4:	2300      	movs	r3, #0
   10df6:	4640      	mov	r0, r8
   10df8:	4649      	mov	r1, r9
   10dfa:	f013 fecf 	bl	24b9c <__aeabi_dcmplt>
   10dfe:	bbc8      	cbnz	r0, 10e74 <tfp_format+0x44c>
                    p.sign = 1;
                }
                /* Ignore left align for integer part */
                p.left = 0;
   10e00:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e04:	f36f 03c3 	bfc	r3, #3, #1
   10e08:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Subtract width for decimal part and decimal point */
                if (p.width >= 4) {
   10e0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10e10:	2b03      	cmp	r3, #3
   10e12:	d936      	bls.n	10e82 <tfp_format+0x45a>
                    p.width -= 4;
   10e14:	3b04      	subs	r3, #4
   10e16:	f88d 3020 	strb.w	r3, [sp, #32]
                } else {
                    p.width = 0;
                }
                /* Write integer part to console */
                written += putchw(putp, &p);
   10e1a:	a908      	add	r1, sp, #32
   10e1c:	4630      	mov	r0, r6
   10e1e:	f7ff fd3d 	bl	1089c <putchw>
   10e22:	4405      	add	r5, r0
                /* Take the decimal part and multiply by 1000 */
                n = (d-n)*1000;
   10e24:	4620      	mov	r0, r4
   10e26:	f013 fbdd 	bl	245e4 <__aeabi_i2d>
   10e2a:	4602      	mov	r2, r0
   10e2c:	460b      	mov	r3, r1
   10e2e:	4640      	mov	r0, r8
   10e30:	4649      	mov	r1, r9
   10e32:	f013 fa89 	bl	24348 <__aeabi_dsub>
   10e36:	2200      	movs	r2, #0
   10e38:	4b19      	ldr	r3, [pc, #100]	; (10ea0 <tfp_format+0x478>)
   10e3a:	f013 fc3d 	bl	246b8 <__aeabi_dmul>
   10e3e:	f013 feeb 	bl	24c18 <__aeabi_d2iz>
                /* Convert to ascii */
                i2a(n, &p);
   10e42:	aa08      	add	r2, sp, #32
   10e44:	17c1      	asrs	r1, r0, #31
   10e46:	f7ff fcd3 	bl	107f0 <i2a>
                /* Set the leading zeros for the next integer output to 3 */
                p.lz = 3;
   10e4a:	2303      	movs	r3, #3
   10e4c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                /* Always use the same decimal width */
                p.width = 3;
   10e50:	f88d 3020 	strb.w	r3, [sp, #32]
                /* Ignore sign for decimal part*/
                p.sign = 0;
   10e54:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e58:	f36f 0300 	bfc	r3, #0, #1
   10e5c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                /* Output a decimal point */
                putf(putp, '.');
   10e60:	212e      	movs	r1, #46	; 0x2e
   10e62:	4630      	mov	r0, r6
   10e64:	f7ff fd08 	bl	10878 <putf>
                /* Output the decimal part. */
                written += putchw(putp, &p);
   10e68:	a908      	add	r1, sp, #32
   10e6a:	4630      	mov	r0, r6
   10e6c:	f7ff fd16 	bl	1089c <putchw>
   10e70:	4405      	add	r5, r0
                break;
   10e72:	e5e2      	b.n	10a3a <tfp_format+0x12>
                    p.sign = 1;
   10e74:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10e78:	f043 0301 	orr.w	r3, r3, #1
   10e7c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   10e80:	e7be      	b.n	10e00 <tfp_format+0x3d8>
                    p.width = 0;
   10e82:	2300      	movs	r3, #0
   10e84:	f88d 3020 	strb.w	r3, [sp, #32]
   10e88:	e7c7      	b.n	10e1a <tfp_format+0x3f2>
#endif
            case '%':
                written += putf(putp, ch);
   10e8a:	4621      	mov	r1, r4
   10e8c:	4630      	mov	r0, r6
   10e8e:	f7ff fcf3 	bl	10878 <putf>
   10e92:	4405      	add	r5, r0
                break;
   10e94:	e5d1      	b.n	10a3a <tfp_format+0x12>
        }
    }
 abort:;
 
 return written;
}
   10e96:	4628      	mov	r0, r5
   10e98:	b00a      	add	sp, #40	; 0x28
   10e9a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   10e9e:	bf00      	nop
   10ea0:	408f4000 	.word	0x408f4000

00010ea4 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   10ea4:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   10ea6:	f7ff fdbf 	bl	10a28 <tfp_format>
}
   10eaa:	bd08      	pop	{r3, pc}

00010eac <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   10eac:	b40f      	push	{r0, r1, r2, r3}
   10eae:	b500      	push	{lr}
   10eb0:	b083      	sub	sp, #12
   10eb2:	aa04      	add	r2, sp, #16
   10eb4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   10eb8:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   10eba:	4b04      	ldr	r3, [pc, #16]	; (10ecc <printf+0x20>)
   10ebc:	6818      	ldr	r0, [r3, #0]
   10ebe:	f7ff fff1 	bl	10ea4 <vfprintf>
    va_end(va);
    return rv;
}
   10ec2:	b003      	add	sp, #12
   10ec4:	f85d eb04 	ldr.w	lr, [sp], #4
   10ec8:	b004      	add	sp, #16
   10eca:	4770      	bx	lr
   10ecc:	00026d98 	.word	0x00026d98

00010ed0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   10ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ed2:	b085      	sub	sp, #20
   10ed4:	4605      	mov	r5, r0
   10ed6:	460c      	mov	r4, r1
   10ed8:	4616      	mov	r6, r2
   10eda:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   10edc:	460a      	mov	r2, r1
   10ede:	4601      	mov	r1, r0
   10ee0:	4668      	mov	r0, sp
   10ee2:	f000 f83d 	bl	10f60 <fmemopen_w>
    tfp_format(f, fmt, va);
   10ee6:	463a      	mov	r2, r7
   10ee8:	4631      	mov	r1, r6
   10eea:	f7ff fd9d 	bl	10a28 <tfp_format>
    if (size > 0) {
   10eee:	b12c      	cbz	r4, 10efc <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   10ef0:	9b02      	ldr	r3, [sp, #8]
   10ef2:	42a3      	cmp	r3, r4
   10ef4:	d205      	bcs.n	10f02 <vsnprintf+0x32>
            *(state.buffer) = '\0';
   10ef6:	9b01      	ldr	r3, [sp, #4]
   10ef8:	2200      	movs	r2, #0
   10efa:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   10efc:	9802      	ldr	r0, [sp, #8]
   10efe:	b005      	add	sp, #20
   10f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   10f02:	3c01      	subs	r4, #1
   10f04:	2300      	movs	r3, #0
   10f06:	552b      	strb	r3, [r5, r4]
   10f08:	e7f8      	b.n	10efc <vsnprintf+0x2c>

00010f0a <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   10f0a:	b40c      	push	{r2, r3}
   10f0c:	b500      	push	{lr}
   10f0e:	b083      	sub	sp, #12
   10f10:	ab04      	add	r3, sp, #16
   10f12:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   10f16:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   10f18:	f7ff ffda 	bl	10ed0 <vsnprintf>
    va_end(va);
    return rv;
}
   10f1c:	b003      	add	sp, #12
   10f1e:	f85d eb04 	ldr.w	lr, [sp], #4
   10f22:	b002      	add	sp, #8
   10f24:	4770      	bx	lr

00010f26 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   10f26:	b500      	push	{lr}
   10f28:	4684      	mov	ip, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   10f2a:	2000      	movs	r0, #0
    
    while (n--)
   10f2c:	e000      	b.n	10f30 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   10f2e:	4672      	mov	r2, lr
    while (n--)
   10f30:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   10f34:	b192      	cbz	r2, 10f5c <memfile_write+0x36>
        f->bytes_written++;
   10f36:	f8dc 3008 	ldr.w	r3, [ip, #8]
   10f3a:	3301      	adds	r3, #1
   10f3c:	f8cc 3008 	str.w	r3, [ip, #8]
        if (f->bytes_written <= f->size)
   10f40:	f8dc 200c 	ldr.w	r2, [ip, #12]
   10f44:	4293      	cmp	r3, r2
   10f46:	d8f2      	bhi.n	10f2e <memfile_write+0x8>
            *f->buffer++ = *bp++;
   10f48:	f8dc 3004 	ldr.w	r3, [ip, #4]
   10f4c:	1c5a      	adds	r2, r3, #1
   10f4e:	f8cc 2004 	str.w	r2, [ip, #4]
   10f52:	f811 2b01 	ldrb.w	r2, [r1], #1
   10f56:	701a      	strb	r2, [r3, #0]
            i++;
   10f58:	3001      	adds	r0, #1
   10f5a:	e7e8      	b.n	10f2e <memfile_write+0x8>
        }
    }
    
    return i;
}
   10f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00010f60 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   10f60:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   10f62:	4c04      	ldr	r4, [pc, #16]	; (10f74 <fmemopen_w+0x14>)
   10f64:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   10f66:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   10f68:	2100      	movs	r1, #0
   10f6a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   10f6c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   10f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f72:	4770      	bx	lr
   10f74:	00026d9c 	.word	0x00026d9c

00010f78 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   10f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f7a:	4604      	mov	r4, r0
   10f7c:	460d      	mov	r5, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   10f7e:	e001      	b.n	10f84 <strntoumax+0xc>
		nptr++;
   10f80:	3401      	adds	r4, #1
		n--;
   10f82:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   10f84:	b143      	cbz	r3, 10f98 <strntoumax+0x20>
   10f86:	7821      	ldrb	r1, [r4, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   10f88:	2920      	cmp	r1, #32
   10f8a:	d0f9      	beq.n	10f80 <strntoumax+0x8>
   10f8c:	290a      	cmp	r1, #10
   10f8e:	d0f7      	beq.n	10f80 <strntoumax+0x8>
   10f90:	2909      	cmp	r1, #9
   10f92:	d0f5      	beq.n	10f80 <strntoumax+0x8>
   10f94:	290d      	cmp	r1, #13
   10f96:	d0f3      	beq.n	10f80 <strntoumax+0x8>
	}

	/* Single optional + or - */
	if (n) {
   10f98:	b16b      	cbz	r3, 10fb6 <strntoumax+0x3e>
		char c = *nptr;
   10f9a:	7827      	ldrb	r7, [r4, #0]
		if (c == '-' || c == '+') {
   10f9c:	2f2d      	cmp	r7, #45	; 0x2d
   10f9e:	d003      	beq.n	10fa8 <strntoumax+0x30>
   10fa0:	2f2b      	cmp	r7, #43	; 0x2b
   10fa2:	d001      	beq.n	10fa8 <strntoumax+0x30>
	int minus = 0;
   10fa4:	2700      	movs	r7, #0
   10fa6:	e007      	b.n	10fb8 <strntoumax+0x40>
			minus = (c == '-');
   10fa8:	2f2d      	cmp	r7, #45	; 0x2d
   10faa:	bf14      	ite	ne
   10fac:	2700      	movne	r7, #0
   10fae:	2701      	moveq	r7, #1
			nptr++;
   10fb0:	3401      	adds	r4, #1
			n--;
   10fb2:	3b01      	subs	r3, #1
   10fb4:	e000      	b.n	10fb8 <strntoumax+0x40>
	int minus = 0;
   10fb6:	2700      	movs	r7, #0
		}
	}

	if (base == 0) {
   10fb8:	b9ba      	cbnz	r2, 10fea <strntoumax+0x72>
		if (n >= 2 && nptr[0] == '0' &&
   10fba:	2b01      	cmp	r3, #1
   10fbc:	d902      	bls.n	10fc4 <strntoumax+0x4c>
   10fbe:	7822      	ldrb	r2, [r4, #0]
   10fc0:	2a30      	cmp	r2, #48	; 0x30
   10fc2:	d005      	beq.n	10fd0 <strntoumax+0x58>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   10fc4:	b31b      	cbz	r3, 1100e <strntoumax+0x96>
   10fc6:	7822      	ldrb	r2, [r4, #0]
   10fc8:	2a30      	cmp	r2, #48	; 0x30
   10fca:	d00a      	beq.n	10fe2 <strntoumax+0x6a>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   10fcc:	220a      	movs	r2, #10
   10fce:	e00e      	b.n	10fee <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   10fd0:	7862      	ldrb	r2, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   10fd2:	2a78      	cmp	r2, #120	; 0x78
   10fd4:	d001      	beq.n	10fda <strntoumax+0x62>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   10fd6:	2a58      	cmp	r2, #88	; 0x58
   10fd8:	d1f4      	bne.n	10fc4 <strntoumax+0x4c>
			n -= 2;
   10fda:	3b02      	subs	r3, #2
			nptr += 2;
   10fdc:	3402      	adds	r4, #2
			base = 16;
   10fde:	2210      	movs	r2, #16
   10fe0:	e005      	b.n	10fee <strntoumax+0x76>
			n--;
   10fe2:	3b01      	subs	r3, #1
			nptr++;
   10fe4:	3401      	adds	r4, #1
			base = 8;
   10fe6:	2208      	movs	r2, #8
   10fe8:	e001      	b.n	10fee <strntoumax+0x76>
		}
	} else if (base == 16) {
   10fea:	2a10      	cmp	r2, #16
   10fec:	d002      	beq.n	10ff4 <strntoumax+0x7c>
			base = 16;
   10fee:	2000      	movs	r0, #0
   10ff0:	4601      	mov	r1, r0
   10ff2:	e028      	b.n	11046 <strntoumax+0xce>
		if (n >= 2 && nptr[0] == '0' &&
   10ff4:	2b01      	cmp	r3, #1
   10ff6:	d9fa      	bls.n	10fee <strntoumax+0x76>
   10ff8:	7821      	ldrb	r1, [r4, #0]
   10ffa:	2930      	cmp	r1, #48	; 0x30
   10ffc:	d1f7      	bne.n	10fee <strntoumax+0x76>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   10ffe:	7861      	ldrb	r1, [r4, #1]
		if (n >= 2 && nptr[0] == '0' &&
   11000:	2978      	cmp	r1, #120	; 0x78
   11002:	d001      	beq.n	11008 <strntoumax+0x90>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   11004:	2958      	cmp	r1, #88	; 0x58
   11006:	d1f2      	bne.n	10fee <strntoumax+0x76>
			n -= 2;
   11008:	3b02      	subs	r3, #2
			nptr += 2;
   1100a:	3402      	adds	r4, #2
   1100c:	e7ef      	b.n	10fee <strntoumax+0x76>
			base = 10;
   1100e:	220a      	movs	r2, #10
   11010:	e7ed      	b.n	10fee <strntoumax+0x76>
		return ch - '0';
   11012:	46b4      	mov	ip, r6
   11014:	e004      	b.n	11020 <strntoumax+0xa8>
		return ch - 'A' + 10;
   11016:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
   1101a:	e001      	b.n	11020 <strntoumax+0xa8>
		return ch - 'a' + 10;
   1101c:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   11020:	f1bc 0f00 	cmp.w	ip, #0
   11024:	db21      	blt.n	1106a <strntoumax+0xf2>
   11026:	4562      	cmp	r2, ip
   11028:	dd1f      	ble.n	1106a <strntoumax+0xf2>
		v = v * base + d;
   1102a:	17d6      	asrs	r6, r2, #31
   1102c:	fb02 fe01 	mul.w	lr, r2, r1
   11030:	fb00 e106 	mla	r1, r0, r6, lr
   11034:	fba2 0600 	umull	r0, r6, r2, r0
   11038:	4431      	add	r1, r6
   1103a:	eb10 000c 	adds.w	r0, r0, ip
   1103e:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
		n--;
   11042:	3b01      	subs	r3, #1
		nptr++;
   11044:	3401      	adds	r4, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   11046:	b183      	cbz	r3, 1106a <strntoumax+0xf2>
   11048:	f894 c000 	ldrb.w	ip, [r4]
	if (ch >= '0' && ch <= '9') {
   1104c:	f1ac 0630 	sub.w	r6, ip, #48	; 0x30
   11050:	2e09      	cmp	r6, #9
   11052:	d9de      	bls.n	11012 <strntoumax+0x9a>
	} else if (ch >= 'A' && ch <= 'Z') {
   11054:	f1ac 0641 	sub.w	r6, ip, #65	; 0x41
   11058:	2e19      	cmp	r6, #25
   1105a:	d9dc      	bls.n	11016 <strntoumax+0x9e>
	} else if (ch >= 'a' && ch <= 'z') {
   1105c:	f1ac 0661 	sub.w	r6, ip, #97	; 0x61
   11060:	2e19      	cmp	r6, #25
   11062:	d9db      	bls.n	1101c <strntoumax+0xa4>
		return -1;
   11064:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   11068:	e7da      	b.n	11020 <strntoumax+0xa8>
	}

	if (endptr)
   1106a:	b105      	cbz	r5, 1106e <strntoumax+0xf6>
		*endptr = (char *)nptr;
   1106c:	602c      	str	r4, [r5, #0]

	return minus ? -v : v;
   1106e:	b117      	cbz	r7, 11076 <strntoumax+0xfe>
   11070:	4240      	negs	r0, r0
   11072:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
}
   11076:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011078 <imgr_vercmp>:
 * @return                       1 if a > b
 */
static int
imgr_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   11078:	7802      	ldrb	r2, [r0, #0]
   1107a:	780b      	ldrb	r3, [r1, #0]
   1107c:	429a      	cmp	r2, r3
   1107e:	d30c      	bcc.n	1109a <imgr_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   11080:	d80e      	bhi.n	110a0 <imgr_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   11082:	7842      	ldrb	r2, [r0, #1]
   11084:	784b      	ldrb	r3, [r1, #1]
   11086:	429a      	cmp	r2, r3
   11088:	d30c      	bcc.n	110a4 <imgr_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1108a:	d80e      	bhi.n	110aa <imgr_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1108c:	8842      	ldrh	r2, [r0, #2]
   1108e:	884b      	ldrh	r3, [r1, #2]
   11090:	429a      	cmp	r2, r3
   11092:	d30c      	bcc.n	110ae <imgr_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   11094:	d80e      	bhi.n	110b4 <imgr_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   11096:	2000      	movs	r0, #0
   11098:	4770      	bx	lr
        return -1;
   1109a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1109e:	4770      	bx	lr
        return 1;
   110a0:	2001      	movs	r0, #1
   110a2:	4770      	bx	lr
        return -1;
   110a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110a8:	4770      	bx	lr
        return 1;
   110aa:	2001      	movs	r0, #1
   110ac:	4770      	bx	lr
        return -1;
   110ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110b2:	4770      	bx	lr
        return 1;
   110b4:	2001      	movs	r0, #1
}
   110b6:	4770      	bx	lr

000110b8 <imgr_img_tlvs>:
{
   110b8:	b530      	push	{r4, r5, lr}
   110ba:	b083      	sub	sp, #12
   110bc:	4614      	mov	r4, r2
   110be:	461d      	mov	r5, r3
    rc = flash_area_read(fa, *start_off, &tlv_info, sizeof(tlv_info));
   110c0:	2304      	movs	r3, #4
   110c2:	eb0d 0203 	add.w	r2, sp, r3
   110c6:	6821      	ldr	r1, [r4, #0]
   110c8:	f003 f8e6 	bl	14298 <flash_area_read>
    if (rc) {
   110cc:	b968      	cbnz	r0, 110ea <imgr_img_tlvs+0x32>
    if (tlv_info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   110ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   110d2:	f646 1307 	movw	r3, #26887	; 0x6907
   110d6:	429a      	cmp	r2, r3
   110d8:	d10b      	bne.n	110f2 <imgr_img_tlvs+0x3a>
    *start_off += sizeof(tlv_info);
   110da:	6822      	ldr	r2, [r4, #0]
   110dc:	3204      	adds	r2, #4
   110de:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   110e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   110e4:	441a      	add	r2, r3
   110e6:	602a      	str	r2, [r5, #0]
    rc = 0;
   110e8:	e001      	b.n	110ee <imgr_img_tlvs+0x36>
        rc = -1;
   110ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   110ee:	b003      	add	sp, #12
   110f0:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   110f2:	2001      	movs	r0, #1
    return rc;
   110f4:	e7fb      	b.n	110ee <imgr_img_tlvs+0x36>
	...

000110f8 <imgr_upload_good_rsp>:
    return 0;
}

static int
imgr_upload_good_rsp(struct mgmt_cbuf *cb)
{
   110f8:	b538      	push	{r3, r4, r5, lr}
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   110fa:	f100 040c 	add.w	r4, r0, #12
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   110fe:	2202      	movs	r2, #2
   11100:	490e      	ldr	r1, [pc, #56]	; (1113c <imgr_upload_good_rsp+0x44>)
   11102:	4620      	mov	r0, r4
   11104:	f007 fa63 	bl	185ce <cbor_encode_text_string>
   11108:	4605      	mov	r5, r0
    err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1110a:	2200      	movs	r2, #0
   1110c:	2300      	movs	r3, #0
   1110e:	4620      	mov	r0, r4
   11110:	f007 f9e2 	bl	184d8 <cbor_encode_int>
   11114:	4305      	orrs	r5, r0
   11116:	2203      	movs	r2, #3
   11118:	4909      	ldr	r1, [pc, #36]	; (11140 <imgr_upload_good_rsp+0x48>)
   1111a:	4620      	mov	r0, r4
   1111c:	f007 fa57 	bl	185ce <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&cb->encoder, "off");
   11120:	4305      	orrs	r5, r0
    err |= cbor_encode_int(&cb->encoder, imgr_state.off);
   11122:	4b08      	ldr	r3, [pc, #32]	; (11144 <imgr_upload_good_rsp+0x4c>)
   11124:	685a      	ldr	r2, [r3, #4]
   11126:	2300      	movs	r3, #0
   11128:	4620      	mov	r0, r4
   1112a:	f007 f9d5 	bl	184d8 <cbor_encode_int>

    if (err != 0) {
   1112e:	ea55 0300 	orrs.w	r3, r5, r0
   11132:	d101      	bne.n	11138 <imgr_upload_good_rsp+0x40>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   11134:	2000      	movs	r0, #0
}
   11136:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   11138:	2002      	movs	r0, #2
   1113a:	e7fc      	b.n	11136 <imgr_upload_good_rsp+0x3e>
   1113c:	00026da4 	.word	0x00026da4
   11140:	00026da8 	.word	0x00026da8
   11144:	2000405c 	.word	0x2000405c

00011148 <imgr_read_info>:
{
   11148:	b570      	push	{r4, r5, r6, lr}
   1114a:	b08c      	sub	sp, #48	; 0x30
   1114c:	460c      	mov	r4, r1
   1114e:	4615      	mov	r5, r2
   11150:	461e      	mov	r6, r3
    data_end = 0;
   11152:	2200      	movs	r2, #0
   11154:	9201      	str	r2, [sp, #4]
    area_id = flash_area_id_from_image_slot(image_slot);
   11156:	f003 f8ff 	bl	14358 <flash_area_id_from_image_slot>
    rc2 = flash_area_open(area_id, &fa);
   1115a:	a90b      	add	r1, sp, #44	; 0x2c
   1115c:	b2c0      	uxtb	r0, r0
   1115e:	f003 f83b 	bl	141d8 <flash_area_open>
    if (rc2) {
   11162:	2800      	cmp	r0, #0
   11164:	d163      	bne.n	1122e <imgr_read_info+0xe6>
    rc2 = flash_area_read_is_empty(fa, 0, hdr, sizeof(*hdr));
   11166:	2320      	movs	r3, #32
   11168:	aa03      	add	r2, sp, #12
   1116a:	2100      	movs	r1, #0
   1116c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1116e:	f003 f8ec 	bl	1434a <flash_area_read_is_empty>
    if (rc2 < 0) {
   11172:	2800      	cmp	r0, #0
   11174:	db5e      	blt.n	11234 <imgr_read_info+0xec>
    if (ver) {
   11176:	b11c      	cbz	r4, 11180 <imgr_read_info+0x38>
        memset(ver, 0xff, sizeof(*ver));
   11178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1117c:	6023      	str	r3, [r4, #0]
   1117e:	6063      	str	r3, [r4, #4]
    if (hdr->ih_magic == IMAGE_MAGIC) {
   11180:	9a03      	ldr	r2, [sp, #12]
   11182:	4b2f      	ldr	r3, [pc, #188]	; (11240 <imgr_read_info+0xf8>)
   11184:	429a      	cmp	r2, r3
   11186:	d005      	beq.n	11194 <imgr_read_info+0x4c>
    } else if (rc2 == 1) {
   11188:	2801      	cmp	r0, #1
   1118a:	d020      	beq.n	111ce <imgr_read_info+0x86>
        rc = 1;
   1118c:	2401      	movs	r4, #1
}
   1118e:	4620      	mov	r0, r4
   11190:	b00c      	add	sp, #48	; 0x30
   11192:	bd70      	pop	{r4, r5, r6, pc}
        if (ver) {
   11194:	b11c      	cbz	r4, 1119e <imgr_read_info+0x56>
            memcpy(ver, &hdr->ih_ver, sizeof(*ver));
   11196:	ab08      	add	r3, sp, #32
   11198:	cb03      	ldmia	r3!, {r0, r1}
   1119a:	6020      	str	r0, [r4, #0]
   1119c:	6061      	str	r1, [r4, #4]
    if (flags) {
   1119e:	b10e      	cbz	r6, 111a4 <imgr_read_info+0x5c>
        *flags = hdr->ih_flags;
   111a0:	9b07      	ldr	r3, [sp, #28]
   111a2:	6033      	str	r3, [r6, #0]
    data_off = hdr->ih_hdr_size + hdr->ih_img_size;
   111a4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   111a8:	9a06      	ldr	r2, [sp, #24]
   111aa:	4413      	add	r3, r2
   111ac:	9302      	str	r3, [sp, #8]
    rc = imgr_img_tlvs(fa, hdr, &data_off, &data_end);
   111ae:	ab01      	add	r3, sp, #4
   111b0:	aa02      	add	r2, sp, #8
   111b2:	a903      	add	r1, sp, #12
   111b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   111b6:	f7ff ff7f 	bl	110b8 <imgr_img_tlvs>
    if (rc) {
   111ba:	4604      	mov	r4, r0
   111bc:	2800      	cmp	r0, #0
   111be:	d1e6      	bne.n	1118e <imgr_read_info+0x46>
    if (data_end > fa->fa_size) {
   111c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   111c2:	689a      	ldr	r2, [r3, #8]
   111c4:	9b01      	ldr	r3, [sp, #4]
   111c6:	429a      	cmp	r2, r3
   111c8:	d209      	bcs.n	111de <imgr_read_info+0x96>
        rc = 1;
   111ca:	2401      	movs	r4, #1
   111cc:	e7df      	b.n	1118e <imgr_read_info+0x46>
        rc = 2;
   111ce:	2402      	movs	r4, #2
   111d0:	e7dd      	b.n	1118e <imgr_read_info+0x46>
            data_off += sizeof(*tlv) + tlv->it_len;
   111d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   111d6:	9a02      	ldr	r2, [sp, #8]
   111d8:	4413      	add	r3, r2
   111da:	3304      	adds	r3, #4
   111dc:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof(*tlv) <= data_end) {
   111de:	9902      	ldr	r1, [sp, #8]
   111e0:	1d0a      	adds	r2, r1, #4
   111e2:	9b01      	ldr	r3, [sp, #4]
   111e4:	429a      	cmp	r2, r3
   111e6:	d820      	bhi.n	1122a <imgr_read_info+0xe2>
        rc2 = flash_area_read_is_empty(fa, data_off, tlv, sizeof(*tlv));
   111e8:	2304      	movs	r3, #4
   111ea:	aa03      	add	r2, sp, #12
   111ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   111ee:	f003 f8ac 	bl	1434a <flash_area_read_is_empty>
        if (rc2 < 0) {
   111f2:	2800      	cmp	r0, #0
   111f4:	dbcb      	blt.n	1118e <imgr_read_info+0x46>
        if (rc2 == 1) {
   111f6:	2801      	cmp	r0, #1
   111f8:	d01f      	beq.n	1123a <imgr_read_info+0xf2>
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   111fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   111fe:	2b10      	cmp	r3, #16
   11200:	d1e7      	bne.n	111d2 <imgr_read_info+0x8a>
          tlv->it_len != IMGMGR_HASH_LEN) {
   11202:	f8bd 300e 	ldrh.w	r3, [sp, #14]
        if (tlv->it_type != IMAGE_TLV_SHA256 ||
   11206:	2b20      	cmp	r3, #32
   11208:	d1e3      	bne.n	111d2 <imgr_read_info+0x8a>
        data_off += sizeof(*tlv);
   1120a:	9902      	ldr	r1, [sp, #8]
   1120c:	3104      	adds	r1, #4
   1120e:	9102      	str	r1, [sp, #8]
        if (hash) {
   11210:	2d00      	cmp	r5, #0
   11212:	d0bc      	beq.n	1118e <imgr_read_info+0x46>
            if (data_off + IMGMGR_HASH_LEN > data_end) {
   11214:	f101 0320 	add.w	r3, r1, #32
   11218:	9a01      	ldr	r2, [sp, #4]
   1121a:	4293      	cmp	r3, r2
   1121c:	d8b7      	bhi.n	1118e <imgr_read_info+0x46>
            rc2 = flash_area_read(fa, data_off, hash, IMGMGR_HASH_LEN);
   1121e:	2320      	movs	r3, #32
   11220:	462a      	mov	r2, r5
   11222:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11224:	f003 f838 	bl	14298 <flash_area_read>
            if (rc2) {
   11228:	e7b1      	b.n	1118e <imgr_read_info+0x46>
    rc = 1;
   1122a:	2401      	movs	r4, #1
   1122c:	e7af      	b.n	1118e <imgr_read_info+0x46>
        return -1;
   1122e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11232:	e7ac      	b.n	1118e <imgr_read_info+0x46>
    int rc = -1;
   11234:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11238:	e7a9      	b.n	1118e <imgr_read_info+0x46>
    rc = 1;
   1123a:	4604      	mov	r4, r0
   1123c:	e7a7      	b.n	1118e <imgr_read_info+0x46>
   1123e:	bf00      	nop
   11240:	96f3b83d 	.word	0x96f3b83d

00011244 <imgr_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
imgr_upload_log(bool is_first, bool is_last, int status)
{
   11244:	b510      	push	{r4, lr}
   11246:	b088      	sub	sp, #32
   11248:	4614      	mov	r4, r2
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1124a:	b920      	cbnz	r0, 11256 <imgr_upload_log+0x12>
        return imgmgr_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1124c:	b939      	cbnz	r1, 1125e <imgr_upload_log+0x1a>
   1124e:	b932      	cbnz	r2, 1125e <imgr_upload_log+0x1a>

        return imgmgr_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   11250:	4610      	mov	r0, r2
}
   11252:	b008      	add	sp, #32
   11254:	bd10      	pop	{r4, pc}
        return imgmgr_log_upload_start(status);
   11256:	4610      	mov	r0, r2
   11258:	f000 fc22 	bl	11aa0 <imgmgr_log_upload_start>
   1125c:	e7f9      	b.n	11252 <imgr_upload_log+0xe>
        rc = imgr_read_info(1, NULL, hash, NULL);
   1125e:	2300      	movs	r3, #0
   11260:	466a      	mov	r2, sp
   11262:	4619      	mov	r1, r3
   11264:	2001      	movs	r0, #1
   11266:	f7ff ff6f 	bl	11148 <imgr_read_info>
        if (rc != 0) {
   1126a:	b120      	cbz	r0, 11276 <imgr_upload_log+0x32>
            hashp = NULL;
   1126c:	2100      	movs	r1, #0
        return imgmgr_log_upload_done(status, hashp);
   1126e:	4620      	mov	r0, r4
   11270:	f000 fc20 	bl	11ab4 <imgmgr_log_upload_done>
   11274:	e7ed      	b.n	11252 <imgr_upload_log+0xe>
            hashp = hash;
   11276:	4669      	mov	r1, sp
   11278:	e7f9      	b.n	1126e <imgr_upload_log+0x2a>
	...

0001127c <imgr_my_version>:
{
   1127c:	b508      	push	{r3, lr}
   1127e:	4601      	mov	r1, r0
    return imgr_read_info(boot_current_slot, ver, NULL, NULL);
   11280:	2300      	movs	r3, #0
   11282:	461a      	mov	r2, r3
   11284:	4802      	ldr	r0, [pc, #8]	; (11290 <imgr_my_version+0x14>)
   11286:	6800      	ldr	r0, [r0, #0]
   11288:	f7ff ff5e 	bl	11148 <imgr_read_info>
}
   1128c:	bd08      	pop	{r3, pc}
   1128e:	bf00      	nop
   11290:	200053ac 	.word	0x200053ac

00011294 <imgr_find_by_hash>:
{
   11294:	b570      	push	{r4, r5, r6, lr}
   11296:	b088      	sub	sp, #32
   11298:	4606      	mov	r6, r0
   1129a:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   1129c:	2400      	movs	r4, #0
   1129e:	e000      	b.n	112a2 <imgr_find_by_hash+0xe>
   112a0:	3401      	adds	r4, #1
   112a2:	2c01      	cmp	r4, #1
   112a4:	dc0f      	bgt.n	112c6 <imgr_find_by_hash+0x32>
        if (imgr_read_info(i, ver, hash, NULL) != 0) {
   112a6:	2300      	movs	r3, #0
   112a8:	466a      	mov	r2, sp
   112aa:	4629      	mov	r1, r5
   112ac:	4620      	mov	r0, r4
   112ae:	f7ff ff4b 	bl	11148 <imgr_read_info>
   112b2:	2800      	cmp	r0, #0
   112b4:	d1f4      	bne.n	112a0 <imgr_find_by_hash+0xc>
        if (!memcmp(hash, find, IMGMGR_HASH_LEN)) {
   112b6:	2220      	movs	r2, #32
   112b8:	4631      	mov	r1, r6
   112ba:	4668      	mov	r0, sp
   112bc:	f7ff f9ac 	bl	10618 <memcmp>
   112c0:	2800      	cmp	r0, #0
   112c2:	d1ed      	bne.n	112a0 <imgr_find_by_hash+0xc>
   112c4:	e001      	b.n	112ca <imgr_find_by_hash+0x36>
    return -1;
   112c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   112ca:	4620      	mov	r0, r4
   112cc:	b008      	add	sp, #32
   112ce:	bd70      	pop	{r4, r5, r6, pc}

000112d0 <imgmgr_find_best_area_id>:
{
   112d0:	b530      	push	{r4, r5, lr}
   112d2:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   112d4:	2400      	movs	r4, #0
    int best = -1;
   112d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   112da:	e000      	b.n	112de <imgmgr_find_best_area_id+0xe>
   112dc:	3401      	adds	r4, #1
   112de:	2c01      	cmp	r4, #1
   112e0:	dc10      	bgt.n	11304 <imgmgr_find_best_area_id+0x34>
        rc = imgr_read_info(i, &ver, NULL, NULL);
   112e2:	2300      	movs	r3, #0
   112e4:	461a      	mov	r2, r3
   112e6:	4669      	mov	r1, sp
   112e8:	4620      	mov	r0, r4
   112ea:	f7ff ff2d 	bl	11148 <imgr_read_info>
        if (rc < 0) {
   112ee:	2800      	cmp	r0, #0
   112f0:	dbf4      	blt.n	112dc <imgmgr_find_best_area_id+0xc>
        if (rc == 0) {
   112f2:	b930      	cbnz	r0, 11302 <imgmgr_find_best_area_id+0x32>
            if (imgmgr_state_slot_in_use(i)) {
   112f4:	4620      	mov	r0, r4
   112f6:	f000 fc69 	bl	11bcc <imgmgr_state_slot_in_use>
   112fa:	2800      	cmp	r0, #0
   112fc:	d1ee      	bne.n	112dc <imgmgr_find_best_area_id+0xc>
                best = i;
   112fe:	4625      	mov	r5, r4
   11300:	e7ec      	b.n	112dc <imgmgr_find_best_area_id+0xc>
        best = i;
   11302:	4625      	mov	r5, r4
    if (best >= 0) {
   11304:	2d00      	cmp	r5, #0
   11306:	da02      	bge.n	1130e <imgmgr_find_best_area_id+0x3e>
}
   11308:	4628      	mov	r0, r5
   1130a:	b003      	add	sp, #12
   1130c:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1130e:	4628      	mov	r0, r5
   11310:	f003 f822 	bl	14358 <flash_area_id_from_image_slot>
   11314:	4605      	mov	r5, r0
    return best;
   11316:	e7f7      	b.n	11308 <imgmgr_find_best_area_id+0x38>

00011318 <imgr_erase_state>:
{
   11318:	b570      	push	{r4, r5, r6, lr}
   1131a:	b082      	sub	sp, #8
   1131c:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1131e:	f7ff ffd7 	bl	112d0 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   11322:	2800      	cmp	r0, #0
   11324:	db1f      	blt.n	11366 <imgr_erase_state+0x4e>
        rc = flash_area_open(area_id, &fa);
   11326:	a901      	add	r1, sp, #4
   11328:	b2c0      	uxtb	r0, r0
   1132a:	f002 ff55 	bl	141d8 <flash_area_open>
        if (rc) {
   1132e:	b9f0      	cbnz	r0, 1136e <imgr_erase_state+0x56>
        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   11330:	2220      	movs	r2, #32
   11332:	2100      	movs	r1, #0
   11334:	9801      	ldr	r0, [sp, #4]
   11336:	f002 ffd7 	bl	142e8 <flash_area_erase>
        if (rc) {
   1133a:	4605      	mov	r5, r0
   1133c:	b9c8      	cbnz	r0, 11372 <imgr_erase_state+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   1133e:	340c      	adds	r4, #12
   11340:	2202      	movs	r2, #2
   11342:	490e      	ldr	r1, [pc, #56]	; (1137c <imgr_erase_state+0x64>)
   11344:	4620      	mov	r0, r4
   11346:	f007 f942 	bl	185ce <cbor_encode_text_string>
   1134a:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   1134c:	2200      	movs	r2, #0
   1134e:	2300      	movs	r3, #0
   11350:	4620      	mov	r0, r4
   11352:	f007 f8c1 	bl	184d8 <cbor_encode_int>
    if (g_err) {
   11356:	ea50 0306 	orrs.w	r3, r0, r6
   1135a:	d10c      	bne.n	11376 <imgr_erase_state+0x5e>
    imgr_state.area_id = -1;
   1135c:	4b08      	ldr	r3, [pc, #32]	; (11380 <imgr_erase_state+0x68>)
   1135e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11362:	601a      	str	r2, [r3, #0]
    return 0;
   11364:	e000      	b.n	11368 <imgr_erase_state+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   11366:	2502      	movs	r5, #2
}
   11368:	4628      	mov	r0, r5
   1136a:	b002      	add	sp, #8
   1136c:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   1136e:	2503      	movs	r5, #3
   11370:	e7fa      	b.n	11368 <imgr_erase_state+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   11372:	2503      	movs	r5, #3
   11374:	e7f8      	b.n	11368 <imgr_erase_state+0x50>
        return MGMT_ERR_ENOMEM;
   11376:	2502      	movs	r5, #2
   11378:	e7f6      	b.n	11368 <imgr_erase_state+0x50>
   1137a:	bf00      	nop
   1137c:	00026da4 	.word	0x00026da4
   11380:	2000405c 	.word	0x2000405c

00011384 <imgr_erase>:
{
   11384:	b570      	push	{r4, r5, r6, lr}
   11386:	b082      	sub	sp, #8
   11388:	4604      	mov	r4, r0
    area_id = imgmgr_find_best_area_id();
   1138a:	f7ff ffa1 	bl	112d0 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   1138e:	2800      	cmp	r0, #0
   11390:	db1f      	blt.n	113d2 <imgr_erase+0x4e>
        rc = flash_area_open(area_id, &fa);
   11392:	a901      	add	r1, sp, #4
   11394:	b2c0      	uxtb	r0, r0
   11396:	f002 ff1f 	bl	141d8 <flash_area_open>
        if (rc) {
   1139a:	b9f0      	cbnz	r0, 113da <imgr_erase+0x56>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1139c:	9801      	ldr	r0, [sp, #4]
   1139e:	6882      	ldr	r2, [r0, #8]
   113a0:	2100      	movs	r1, #0
   113a2:	f002 ffa1 	bl	142e8 <flash_area_erase>
        if (rc) {
   113a6:	4605      	mov	r5, r0
   113a8:	b9c8      	cbnz	r0, 113de <imgr_erase+0x5a>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   113aa:	340c      	adds	r4, #12
   113ac:	2202      	movs	r2, #2
   113ae:	490e      	ldr	r1, [pc, #56]	; (113e8 <imgr_erase+0x64>)
   113b0:	4620      	mov	r0, r4
   113b2:	f007 f90c 	bl	185ce <cbor_encode_text_string>
   113b6:	4606      	mov	r6, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   113b8:	2200      	movs	r2, #0
   113ba:	2300      	movs	r3, #0
   113bc:	4620      	mov	r0, r4
   113be:	f007 f88b 	bl	184d8 <cbor_encode_int>
    if (g_err) {
   113c2:	ea50 0306 	orrs.w	r3, r0, r6
   113c6:	d10c      	bne.n	113e2 <imgr_erase+0x5e>
    imgr_state.area_id = -1;
   113c8:	4b08      	ldr	r3, [pc, #32]	; (113ec <imgr_erase+0x68>)
   113ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   113ce:	601a      	str	r2, [r3, #0]
    return 0;
   113d0:	e000      	b.n	113d4 <imgr_erase+0x50>
        return imgr_error_rsp(cb, MGMT_ERR_ENOMEM, imgmgr_err_str_no_slot);
   113d2:	2502      	movs	r5, #2
}
   113d4:	4628      	mov	r0, r5
   113d6:	b002      	add	sp, #8
   113d8:	bd70      	pop	{r4, r5, r6, pc}
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   113da:	2503      	movs	r5, #3
   113dc:	e7fa      	b.n	113d4 <imgr_erase+0x50>
            return imgr_error_rsp(cb, MGMT_ERR_EINVAL,
   113de:	2503      	movs	r5, #3
   113e0:	e7f8      	b.n	113d4 <imgr_erase+0x50>
        return MGMT_ERR_ENOMEM;
   113e2:	2502      	movs	r5, #2
   113e4:	e7f6      	b.n	113d4 <imgr_erase+0x50>
   113e6:	bf00      	nop
   113e8:	00026da4 	.word	0x00026da4
   113ec:	2000405c 	.word	0x2000405c

000113f0 <imgr_upload_inspect>:
{
   113f0:	b570      	push	{r4, r5, r6, lr}
   113f2:	b084      	sub	sp, #16
   113f4:	460c      	mov	r4, r1
   113f6:	4616      	mov	r6, r2
    memset(action, 0, sizeof *action);
   113f8:	2300      	movs	r3, #0
   113fa:	600b      	str	r3, [r1, #0]
   113fc:	604b      	str	r3, [r1, #4]
   113fe:	608b      	str	r3, [r1, #8]
   11400:	60cb      	str	r3, [r1, #12]
   11402:	610b      	str	r3, [r1, #16]
   11404:	614b      	str	r3, [r1, #20]
    if (req->off == -1) {
   11406:	6801      	ldr	r1, [r0, #0]
   11408:	6843      	ldr	r3, [r0, #4]
   1140a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1140e:	bf08      	it	eq
   11410:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
   11414:	d03e      	beq.n	11494 <imgr_upload_inspect+0xa4>
   11416:	4605      	mov	r5, r0
    if (req->off == 0) {
   11418:	430b      	orrs	r3, r1
   1141a:	d168      	bne.n	114ee <imgr_upload_inspect+0xfe>
        if (req->data_len < sizeof(struct image_header)) {
   1141c:	6903      	ldr	r3, [r0, #16]
   1141e:	2b1f      	cmp	r3, #31
   11420:	d93c      	bls.n	1149c <imgr_upload_inspect+0xac>
        if (req->size == -1) {
   11422:	6882      	ldr	r2, [r0, #8]
   11424:	68c3      	ldr	r3, [r0, #12]
   11426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1142a:	bf08      	it	eq
   1142c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   11430:	d038      	beq.n	114a4 <imgr_upload_inspect+0xb4>
        action->size = req->size;
   11432:	6022      	str	r2, [r4, #0]
   11434:	6063      	str	r3, [r4, #4]
        if (hdr->ih_magic != IMAGE_MAGIC) {
   11436:	6982      	ldr	r2, [r0, #24]
   11438:	4b4e      	ldr	r3, [pc, #312]	; (11574 <imgr_upload_inspect+0x184>)
   1143a:	429a      	cmp	r2, r3
   1143c:	d136      	bne.n	114ac <imgr_upload_inspect+0xbc>
        if (req->data_sha_len > IMGMGR_DATA_SHA_LEN) {
   1143e:	6942      	ldr	r2, [r0, #20]
   11440:	2a20      	cmp	r2, #32
   11442:	f200 808d 	bhi.w	11560 <imgr_upload_inspect+0x170>
        if ((req->data_sha_len > 0) && (imgr_state.area_id != -1)) {
   11446:	b142      	cbz	r2, 1145a <imgr_upload_inspect+0x6a>
   11448:	4b4b      	ldr	r3, [pc, #300]	; (11578 <imgr_upload_inspect+0x188>)
   1144a:	681b      	ldr	r3, [r3, #0]
   1144c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11450:	d003      	beq.n	1145a <imgr_upload_inspect+0x6a>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   11452:	4b49      	ldr	r3, [pc, #292]	; (11578 <imgr_upload_inspect+0x188>)
   11454:	7b1b      	ldrb	r3, [r3, #12]
   11456:	429a      	cmp	r2, r3
   11458:	d02c      	beq.n	114b4 <imgr_upload_inspect+0xc4>
        action->area_id = imgmgr_find_best_area_id();
   1145a:	f7ff ff39 	bl	112d0 <imgmgr_find_best_area_id>
   1145e:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   11460:	2800      	cmp	r0, #0
   11462:	db2f      	blt.n	114c4 <imgr_upload_inspect+0xd4>
        if (req->upgrade) {
   11464:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   11468:	b15b      	cbz	r3, 11482 <imgr_upload_inspect+0x92>
            rc = imgr_my_version(&cur_ver);
   1146a:	a801      	add	r0, sp, #4
   1146c:	f7ff ff06 	bl	1127c <imgr_my_version>
            if (rc != 0) {
   11470:	2800      	cmp	r0, #0
   11472:	d177      	bne.n	11564 <imgr_upload_inspect+0x174>
            if (imgr_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   11474:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   11478:	a801      	add	r0, sp, #4
   1147a:	f7ff fdfd 	bl	11078 <imgr_vercmp>
   1147e:	2800      	cmp	r0, #0
   11480:	da24      	bge.n	114cc <imgr_upload_inspect+0xdc>
        rc = flash_area_open(action->area_id, &fa);
   11482:	a903      	add	r1, sp, #12
   11484:	7b20      	ldrb	r0, [r4, #12]
   11486:	f002 fea7 	bl	141d8 <flash_area_open>
        if (rc) {
   1148a:	b318      	cbz	r0, 114d4 <imgr_upload_inspect+0xe4>
            *errstr = imgmgr_err_str_flash_open_failed;
   1148c:	2300      	movs	r3, #0
   1148e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   11490:	2001      	movs	r0, #1
   11492:	e06c      	b.n	1156e <imgr_upload_inspect+0x17e>
        *errstr = imgmgr_err_str_hdr_malformed;
   11494:	2300      	movs	r3, #0
   11496:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   11498:	2003      	movs	r0, #3
   1149a:	e068      	b.n	1156e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   1149c:	2300      	movs	r3, #0
   1149e:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   114a0:	2003      	movs	r0, #3
   114a2:	e064      	b.n	1156e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_hdr_malformed;
   114a4:	2300      	movs	r3, #0
   114a6:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   114a8:	2003      	movs	r0, #3
   114aa:	e060      	b.n	1156e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_magic_mismatch;
   114ac:	2300      	movs	r3, #0
   114ae:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   114b0:	2003      	movs	r0, #3
   114b2:	e05c      	b.n	1156e <imgr_upload_inspect+0x17e>
                            !memcmp(imgr_state.data_sha, req->data_sha,
   114b4:	f500 7106 	add.w	r1, r0, #536	; 0x218
   114b8:	4830      	ldr	r0, [pc, #192]	; (1157c <imgr_upload_inspect+0x18c>)
   114ba:	f7ff f8ad 	bl	10618 <memcmp>
            if ((imgr_state.data_sha_len == req->data_sha_len) &&
   114be:	2800      	cmp	r0, #0
   114c0:	d1cb      	bne.n	1145a <imgr_upload_inspect+0x6a>
   114c2:	e054      	b.n	1156e <imgr_upload_inspect+0x17e>
            *errstr = imgmgr_err_str_no_slot;
   114c4:	2300      	movs	r3, #0
   114c6:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   114c8:	2002      	movs	r0, #2
   114ca:	e050      	b.n	1156e <imgr_upload_inspect+0x17e>
                *errstr = imgmgr_err_str_downgrade;
   114cc:	2300      	movs	r3, #0
   114ce:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   114d0:	2006      	movs	r0, #6
   114d2:	e04c      	b.n	1156e <imgr_upload_inspect+0x17e>
        rc = flash_area_is_empty(fa, &empty);
   114d4:	f10d 0103 	add.w	r1, sp, #3
   114d8:	9803      	ldr	r0, [sp, #12]
   114da:	f002 ff23 	bl	14324 <flash_area_is_empty>
        if (rc) {
   114de:	2800      	cmp	r0, #0
   114e0:	d142      	bne.n	11568 <imgr_upload_inspect+0x178>
        action->erase = !empty;
   114e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   114e6:	f083 0301 	eor.w	r3, r3, #1
   114ea:	7463      	strb	r3, [r4, #17]
   114ec:	e00d      	b.n	1150a <imgr_upload_inspect+0x11a>
        action->area_id = imgr_state.area_id;
   114ee:	4b22      	ldr	r3, [pc, #136]	; (11578 <imgr_upload_inspect+0x188>)
   114f0:	681a      	ldr	r2, [r3, #0]
   114f2:	60e2      	str	r2, [r4, #12]
        action->size = imgr_state.size;
   114f4:	6899      	ldr	r1, [r3, #8]
   114f6:	2200      	movs	r2, #0
   114f8:	6021      	str	r1, [r4, #0]
   114fa:	6062      	str	r2, [r4, #4]
        if (req->off != imgr_state.off) {
   114fc:	6800      	ldr	r0, [r0, #0]
   114fe:	6869      	ldr	r1, [r5, #4]
   11500:	685b      	ldr	r3, [r3, #4]
   11502:	4291      	cmp	r1, r2
   11504:	bf08      	it	eq
   11506:	4298      	cmpeq	r0, r3
   11508:	d130      	bne.n	1156c <imgr_upload_inspect+0x17c>
    action->write_bytes = req->data_len;
   1150a:	692b      	ldr	r3, [r5, #16]
   1150c:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1150e:	682b      	ldr	r3, [r5, #0]
   11510:	686a      	ldr	r2, [r5, #4]
   11512:	6929      	ldr	r1, [r5, #16]
   11514:	185b      	adds	r3, r3, r1
   11516:	f142 0200 	adc.w	r2, r2, #0
   1151a:	6820      	ldr	r0, [r4, #0]
   1151c:	6861      	ldr	r1, [r4, #4]
   1151e:	4283      	cmp	r3, r0
   11520:	eb72 0301 	sbcs.w	r3, r2, r1
   11524:	d303      	bcc.n	1152e <imgr_upload_inspect+0x13e>
    action->proceed = true;
   11526:	2301      	movs	r3, #1
   11528:	7423      	strb	r3, [r4, #16]
    return 0;
   1152a:	2000      	movs	r0, #0
   1152c:	e01f      	b.n	1156e <imgr_upload_inspect+0x17e>
        rc = flash_area_open(action->area_id, &fa);
   1152e:	a903      	add	r1, sp, #12
   11530:	7b20      	ldrb	r0, [r4, #12]
   11532:	f002 fe51 	bl	141d8 <flash_area_open>
        if (rc) {
   11536:	b118      	cbz	r0, 11540 <imgr_upload_inspect+0x150>
            *errstr = imgmgr_err_str_flash_open_failed;
   11538:	2300      	movs	r3, #0
   1153a:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1153c:	2001      	movs	r0, #1
   1153e:	e016      	b.n	1156e <imgr_upload_inspect+0x17e>
        rem_bytes = req->data_len % flash_area_align(fa);
   11540:	692d      	ldr	r5, [r5, #16]
   11542:	9803      	ldr	r0, [sp, #12]
   11544:	f002 fee4 	bl	14310 <flash_area_align>
   11548:	fbb5 f3f0 	udiv	r3, r5, r0
   1154c:	fb00 5513 	mls	r5, r0, r3, r5
        if (rem_bytes) {
   11550:	f015 0fff 	tst.w	r5, #255	; 0xff
   11554:	d0e7      	beq.n	11526 <imgr_upload_inspect+0x136>
            action->write_bytes -= rem_bytes;
   11556:	b2ed      	uxtb	r5, r5
   11558:	68a3      	ldr	r3, [r4, #8]
   1155a:	1b5d      	subs	r5, r3, r5
   1155c:	60a5      	str	r5, [r4, #8]
   1155e:	e7e2      	b.n	11526 <imgr_upload_inspect+0x136>
            return MGMT_ERR_EINVAL;
   11560:	2003      	movs	r0, #3
   11562:	e004      	b.n	1156e <imgr_upload_inspect+0x17e>
                return MGMT_ERR_EUNKNOWN;
   11564:	2001      	movs	r0, #1
   11566:	e002      	b.n	1156e <imgr_upload_inspect+0x17e>
            return MGMT_ERR_EUNKNOWN;
   11568:	2001      	movs	r0, #1
   1156a:	e000      	b.n	1156e <imgr_upload_inspect+0x17e>
            return 0;
   1156c:	2000      	movs	r0, #0
}
   1156e:	b004      	add	sp, #16
   11570:	bd70      	pop	{r4, r5, r6, pc}
   11572:	bf00      	nop
   11574:	96f3b83d 	.word	0x96f3b83d
   11578:	2000405c 	.word	0x2000405c
   1157c:	20004069 	.word	0x20004069

00011580 <imgmgr_dfu_stopped>:
    return imgr_upload_good_rsp(cb);
}

void
imgmgr_dfu_stopped(void)
{
   11580:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_stopped_cb) {
   11582:	4b03      	ldr	r3, [pc, #12]	; (11590 <imgmgr_dfu_stopped+0x10>)
   11584:	681b      	ldr	r3, [r3, #0]
   11586:	b113      	cbz	r3, 1158e <imgmgr_dfu_stopped+0xe>
   11588:	685b      	ldr	r3, [r3, #4]
   1158a:	b103      	cbz	r3, 1158e <imgmgr_dfu_stopped+0xe>
        imgmgr_dfu_callbacks_fn->dfu_stopped_cb();
   1158c:	4798      	blx	r3
    }
}
   1158e:	bd08      	pop	{r3, pc}
   11590:	20004058 	.word	0x20004058

00011594 <imgmgr_dfu_started>:

void
imgmgr_dfu_started(void)
{
   11594:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_started_cb) {
   11596:	4b03      	ldr	r3, [pc, #12]	; (115a4 <imgmgr_dfu_started+0x10>)
   11598:	681b      	ldr	r3, [r3, #0]
   1159a:	b113      	cbz	r3, 115a2 <imgmgr_dfu_started+0xe>
   1159c:	681b      	ldr	r3, [r3, #0]
   1159e:	b103      	cbz	r3, 115a2 <imgmgr_dfu_started+0xe>
        imgmgr_dfu_callbacks_fn->dfu_started_cb();
   115a0:	4798      	blx	r3
    }
}
   115a2:	bd08      	pop	{r3, pc}
   115a4:	20004058 	.word	0x20004058

000115a8 <imgmgr_dfu_pending>:

void
imgmgr_dfu_pending(void)
{
   115a8:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_pending_cb) {
   115aa:	4b03      	ldr	r3, [pc, #12]	; (115b8 <imgmgr_dfu_pending+0x10>)
   115ac:	681b      	ldr	r3, [r3, #0]
   115ae:	b113      	cbz	r3, 115b6 <imgmgr_dfu_pending+0xe>
   115b0:	689b      	ldr	r3, [r3, #8]
   115b2:	b103      	cbz	r3, 115b6 <imgmgr_dfu_pending+0xe>
        imgmgr_dfu_callbacks_fn->dfu_pending_cb();
   115b4:	4798      	blx	r3
    }
}
   115b6:	bd08      	pop	{r3, pc}
   115b8:	20004058 	.word	0x20004058

000115bc <imgr_upload>:
{
   115bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115c0:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
   115c4:	4605      	mov	r5, r0
    struct imgr_upload_req req = {
   115c6:	ac52      	add	r4, sp, #328	; 0x148
   115c8:	f44f 7210 	mov.w	r2, #576	; 0x240
   115cc:	2100      	movs	r1, #0
   115ce:	4620      	mov	r0, r4
   115d0:	f7ff f853 	bl	1067a <memset>
   115d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   115d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115dc:	e9cd 2352 	strd	r2, r3, [sp, #328]	; 0x148
   115e0:	e9cd 2354 	strd	r2, r3, [sp, #336]	; 0x150
    const struct cbor_attr_t off_attr[] = {
   115e4:	f44f 7290 	mov.w	r2, #288	; 0x120
   115e8:	2100      	movs	r1, #0
   115ea:	a80a      	add	r0, sp, #40	; 0x28
   115ec:	f7ff f845 	bl	1067a <memset>
   115f0:	4b69      	ldr	r3, [pc, #420]	; (11798 <imgr_upload+0x1dc>)
   115f2:	930a      	str	r3, [sp, #40]	; 0x28
   115f4:	2303      	movs	r3, #3
   115f6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   115fa:	aa58      	add	r2, sp, #352	; 0x160
   115fc:	920c      	str	r2, [sp, #48]	; 0x30
   115fe:	aa56      	add	r2, sp, #344	; 0x158
   11600:	920d      	str	r2, [sp, #52]	; 0x34
   11602:	f44f 7200 	mov.w	r2, #512	; 0x200
   11606:	9214      	str	r2, [sp, #80]	; 0x50
   11608:	4a64      	ldr	r2, [pc, #400]	; (1179c <imgr_upload+0x1e0>)
   1160a:	9216      	str	r2, [sp, #88]	; 0x58
   1160c:	2102      	movs	r1, #2
   1160e:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
   11612:	aa54      	add	r2, sp, #336	; 0x150
   11614:	9218      	str	r2, [sp, #96]	; 0x60
   11616:	2201      	movs	r2, #1
   11618:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1161c:	4860      	ldr	r0, [pc, #384]	; (117a0 <imgr_upload+0x1e4>)
   1161e:	9022      	str	r0, [sp, #136]	; 0x88
   11620:	f88d 108c 	strb.w	r1, [sp, #140]	; 0x8c
   11624:	9424      	str	r4, [sp, #144]	; 0x90
   11626:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1162a:	4a5e      	ldr	r2, [pc, #376]	; (117a4 <imgr_upload+0x1e8>)
   1162c:	922e      	str	r2, [sp, #184]	; 0xb8
   1162e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
   11632:	abd8      	add	r3, sp, #864	; 0x360
   11634:	9330      	str	r3, [sp, #192]	; 0xc0
   11636:	ab57      	add	r3, sp, #348	; 0x15c
   11638:	9331      	str	r3, [sp, #196]	; 0xc4
   1163a:	2320      	movs	r3, #32
   1163c:	9338      	str	r3, [sp, #224]	; 0xe0
   1163e:	4b5a      	ldr	r3, [pc, #360]	; (117a8 <imgr_upload+0x1ec>)
   11640:	933a      	str	r3, [sp, #232]	; 0xe8
   11642:	2305      	movs	r3, #5
   11644:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
   11648:	abe0      	add	r3, sp, #896	; 0x380
   1164a:	933c      	str	r3, [sp, #240]	; 0xf0
    const char *errstr = NULL;
   1164c:	2300      	movs	r3, #0
   1164e:	9309      	str	r3, [sp, #36]	; 0x24
    const struct flash_area *fa = NULL;
   11650:	9301      	str	r3, [sp, #4]
    rc = cbor_read_object(&cb->it, off_attr);
   11652:	a90a      	add	r1, sp, #40	; 0x28
   11654:	f105 001c 	add.w	r0, r5, #28
   11658:	f006 fdd2 	bl	18200 <cbor_read_object>
    if (rc != 0) {
   1165c:	2800      	cmp	r0, #0
   1165e:	f040 8095 	bne.w	1178c <imgr_upload+0x1d0>
    rc = imgr_upload_inspect(&req, &action, &errstr);
   11662:	aa09      	add	r2, sp, #36	; 0x24
   11664:	a902      	add	r1, sp, #8
   11666:	4620      	mov	r0, r4
   11668:	f7ff fec2 	bl	113f0 <imgr_upload_inspect>
    if (rc != 0) {
   1166c:	4604      	mov	r4, r0
   1166e:	2800      	cmp	r0, #0
   11670:	d137      	bne.n	116e2 <imgr_upload+0x126>
    if (!action.proceed) {
   11672:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11676:	2b00      	cmp	r3, #0
   11678:	d036      	beq.n	116e8 <imgr_upload+0x12c>
    if (imgr_upload_cb != NULL) {
   1167a:	4b4c      	ldr	r3, [pc, #304]	; (117ac <imgr_upload+0x1f0>)
   1167c:	681b      	ldr	r3, [r3, #0]
   1167e:	b13b      	cbz	r3, 11690 <imgr_upload+0xd4>
        rc = imgr_upload_cb(req.off, action.size, imgr_upload_arg);
   11680:	4a4b      	ldr	r2, [pc, #300]	; (117b0 <imgr_upload+0x1f4>)
   11682:	6812      	ldr	r2, [r2, #0]
   11684:	9902      	ldr	r1, [sp, #8]
   11686:	9852      	ldr	r0, [sp, #328]	; 0x148
   11688:	4798      	blx	r3
        if (rc != 0) {
   1168a:	4604      	mov	r4, r0
   1168c:	2800      	cmp	r0, #0
   1168e:	d130      	bne.n	116f2 <imgr_upload+0x136>
    imgr_state.area_id = action.area_id;
   11690:	9805      	ldr	r0, [sp, #20]
   11692:	4b48      	ldr	r3, [pc, #288]	; (117b4 <imgr_upload+0x1f8>)
   11694:	6018      	str	r0, [r3, #0]
    imgr_state.size = action.size;
   11696:	9a02      	ldr	r2, [sp, #8]
   11698:	609a      	str	r2, [r3, #8]
    rc = flash_area_open(imgr_state.area_id, &fa);
   1169a:	a901      	add	r1, sp, #4
   1169c:	b2c0      	uxtb	r0, r0
   1169e:	f002 fd9b 	bl	141d8 <flash_area_open>
    if (rc != 0) {
   116a2:	4604      	mov	r4, r0
   116a4:	bb40      	cbnz	r0, 116f8 <imgr_upload+0x13c>
    if (req.off == 0) {
   116a6:	9a52      	ldr	r2, [sp, #328]	; 0x148
   116a8:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   116aa:	4313      	orrs	r3, r2
   116ac:	d028      	beq.n	11700 <imgr_upload+0x144>
    if (req.data_len != 0) {
   116ae:	9b56      	ldr	r3, [sp, #344]	; 0x158
   116b0:	2b00      	cmp	r3, #0
   116b2:	d14d      	bne.n	11750 <imgr_upload+0x194>
    imgr_upload_log(req.off == 0, imgr_state.off == imgr_state.size, rc);
   116b4:	9852      	ldr	r0, [sp, #328]	; 0x148
   116b6:	9a53      	ldr	r2, [sp, #332]	; 0x14c
   116b8:	4b3e      	ldr	r3, [pc, #248]	; (117b4 <imgr_upload+0x1f8>)
   116ba:	6859      	ldr	r1, [r3, #4]
   116bc:	689b      	ldr	r3, [r3, #8]
   116be:	4302      	orrs	r2, r0
   116c0:	bf0c      	ite	eq
   116c2:	2001      	moveq	r0, #1
   116c4:	2000      	movne	r0, #0
   116c6:	4622      	mov	r2, r4
   116c8:	4299      	cmp	r1, r3
   116ca:	bf14      	ite	ne
   116cc:	2100      	movne	r1, #0
   116ce:	2101      	moveq	r1, #1
   116d0:	f7ff fdb8 	bl	11244 <imgr_upload_log>
    if (rc != 0) {
   116d4:	2c00      	cmp	r4, #0
   116d6:	d156      	bne.n	11786 <imgr_upload+0x1ca>
    return imgr_upload_good_rsp(cb);
   116d8:	4628      	mov	r0, r5
   116da:	f7ff fd0d 	bl	110f8 <imgr_upload_good_rsp>
   116de:	4604      	mov	r4, r0
   116e0:	e055      	b.n	1178e <imgr_upload+0x1d2>
        imgmgr_dfu_stopped();
   116e2:	f7ff ff4d 	bl	11580 <imgmgr_dfu_stopped>
        return rc;
   116e6:	e052      	b.n	1178e <imgr_upload+0x1d2>
        return imgr_upload_good_rsp(cb);
   116e8:	4628      	mov	r0, r5
   116ea:	f7ff fd05 	bl	110f8 <imgr_upload_good_rsp>
   116ee:	4604      	mov	r4, r0
   116f0:	e04d      	b.n	1178e <imgr_upload+0x1d2>
            errstr = imgmgr_err_str_app_reject;
   116f2:	2300      	movs	r3, #0
   116f4:	9309      	str	r3, [sp, #36]	; 0x24
            goto end;
   116f6:	e7dd      	b.n	116b4 <imgr_upload+0xf8>
        errstr = imgmgr_err_str_flash_open_failed;
   116f8:	2300      	movs	r3, #0
   116fa:	9309      	str	r3, [sp, #36]	; 0x24
        rc = MGMT_ERR_EUNKNOWN;
   116fc:	2401      	movs	r4, #1
        goto end;
   116fe:	e7d9      	b.n	116b4 <imgr_upload+0xf8>
        imgr_state.off = 0;
   11700:	4e2c      	ldr	r6, [pc, #176]	; (117b4 <imgr_upload+0x1f8>)
   11702:	f04f 0800 	mov.w	r8, #0
   11706:	f8c6 8004 	str.w	r8, [r6, #4]
        imgmgr_dfu_started();
   1170a:	f7ff ff43 	bl	11594 <imgmgr_dfu_started>
        imgr_state.data_sha_len = req.data_sha_len;
   1170e:	9f57      	ldr	r7, [sp, #348]	; 0x15c
   11710:	7337      	strb	r7, [r6, #12]
        memcpy(imgr_state.data_sha, req.data_sha, req.data_sha_len);
   11712:	463a      	mov	r2, r7
   11714:	a9d8      	add	r1, sp, #864	; 0x360
   11716:	f106 000d 	add.w	r0, r6, #13
   1171a:	f7fe ffa1 	bl	10660 <memcpy>
        memset(&imgr_state.data_sha[req.data_sha_len], 0,
   1171e:	f107 0008 	add.w	r0, r7, #8
   11722:	4430      	add	r0, r6
   11724:	f1c7 0220 	rsb	r2, r7, #32
   11728:	4641      	mov	r1, r8
   1172a:	3005      	adds	r0, #5
   1172c:	f7fe ffa5 	bl	1067a <memset>
        if (action.erase) {
   11730:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11734:	2b00      	cmp	r3, #0
   11736:	d0ba      	beq.n	116ae <imgr_upload+0xf2>
            rc = flash_area_erase(fa, 0, req.size);
   11738:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1173a:	4641      	mov	r1, r8
   1173c:	9801      	ldr	r0, [sp, #4]
   1173e:	f002 fdd3 	bl	142e8 <flash_area_erase>
            if (rc != 0) {
   11742:	4604      	mov	r4, r0
   11744:	2800      	cmp	r0, #0
   11746:	d0b2      	beq.n	116ae <imgr_upload+0xf2>
                errstr = imgmgr_err_str_flash_erase_failed;
   11748:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
                rc = MGMT_ERR_EUNKNOWN;
   1174c:	2401      	movs	r4, #1
                goto end;
   1174e:	e7b1      	b.n	116b4 <imgr_upload+0xf8>
        rc = flash_area_write(fa, req.off, req.img_data, action.write_bytes);
   11750:	9b04      	ldr	r3, [sp, #16]
   11752:	aa58      	add	r2, sp, #352	; 0x160
   11754:	9952      	ldr	r1, [sp, #328]	; 0x148
   11756:	9801      	ldr	r0, [sp, #4]
   11758:	f002 fdb2 	bl	142c0 <flash_area_write>
        if (rc != 0) {
   1175c:	4604      	mov	r4, r0
   1175e:	b970      	cbnz	r0, 1177e <imgr_upload+0x1c2>
            imgr_state.off += action.write_bytes;
   11760:	9b04      	ldr	r3, [sp, #16]
   11762:	4a14      	ldr	r2, [pc, #80]	; (117b4 <imgr_upload+0x1f8>)
   11764:	6851      	ldr	r1, [r2, #4]
   11766:	440b      	add	r3, r1
   11768:	6053      	str	r3, [r2, #4]
            if (imgr_state.off == imgr_state.size) {
   1176a:	6892      	ldr	r2, [r2, #8]
   1176c:	4293      	cmp	r3, r2
   1176e:	d1a1      	bne.n	116b4 <imgr_upload+0xf8>
                imgmgr_dfu_pending();
   11770:	f7ff ff1a 	bl	115a8 <imgmgr_dfu_pending>
                imgr_state.area_id = -1;
   11774:	4b0f      	ldr	r3, [pc, #60]	; (117b4 <imgr_upload+0x1f8>)
   11776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1177a:	601a      	str	r2, [r3, #0]
   1177c:	e79a      	b.n	116b4 <imgr_upload+0xf8>
            errstr = imgmgr_err_str_flash_write_failed;
   1177e:	2300      	movs	r3, #0
   11780:	9309      	str	r3, [sp, #36]	; 0x24
            rc = MGMT_ERR_EUNKNOWN;
   11782:	2401      	movs	r4, #1
            goto end;
   11784:	e796      	b.n	116b4 <imgr_upload+0xf8>
        imgmgr_dfu_stopped();
   11786:	f7ff fefb 	bl	11580 <imgmgr_dfu_stopped>
        return imgr_error_rsp(cb, rc, errstr);
   1178a:	e000      	b.n	1178e <imgr_upload+0x1d2>
        return MGMT_ERR_EINVAL;
   1178c:	2403      	movs	r4, #3
}
   1178e:	4620      	mov	r0, r4
   11790:	f50d 7d62 	add.w	sp, sp, #904	; 0x388
   11794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11798:	00026dac 	.word	0x00026dac
   1179c:	00026db4 	.word	0x00026db4
   117a0:	00026da8 	.word	0x00026da8
   117a4:	00026db8 	.word	0x00026db8
   117a8:	00026dbc 	.word	0x00026dbc
   117ac:	20004090 	.word	0x20004090
   117b0:	2000408c 	.word	0x2000408c
   117b4:	2000405c 	.word	0x2000405c

000117b8 <imgmgr_dfu_confirmed>:

void
imgmgr_dfu_confirmed(void)
{
   117b8:	b508      	push	{r3, lr}
    if (imgmgr_dfu_callbacks_fn && imgmgr_dfu_callbacks_fn->dfu_confirmed_cb) {
   117ba:	4b03      	ldr	r3, [pc, #12]	; (117c8 <imgmgr_dfu_confirmed+0x10>)
   117bc:	681b      	ldr	r3, [r3, #0]
   117be:	b113      	cbz	r3, 117c6 <imgmgr_dfu_confirmed+0xe>
   117c0:	68db      	ldr	r3, [r3, #12]
   117c2:	b103      	cbz	r3, 117c6 <imgmgr_dfu_confirmed+0xe>
        imgmgr_dfu_callbacks_fn->dfu_confirmed_cb();
   117c4:	4798      	blx	r3
    }
}
   117c6:	bd08      	pop	{r3, pc}
   117c8:	20004058 	.word	0x20004058

000117cc <imgmgr_module_init>:
    imgmgr_dfu_callbacks_fn = cb_struct;
}

void
imgmgr_module_init(void)
{
   117cc:	b510      	push	{r4, lr}
   117ce:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   117d0:	4b10      	ldr	r3, [pc, #64]	; (11814 <imgmgr_module_init+0x48>)
   117d2:	781b      	ldrb	r3, [r3, #0]
   117d4:	b1c3      	cbz	r3, 11808 <imgmgr_module_init+0x3c>

    rc = mgmt_group_register(&imgr_nmgr_group);
   117d6:	4810      	ldr	r0, [pc, #64]	; (11818 <imgmgr_module_init+0x4c>)
   117d8:	f000 fc00 	bl	11fdc <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   117dc:	b138      	cbz	r0, 117ee <imgmgr_module_init+0x22>
   117de:	2000      	movs	r0, #0
   117e0:	9000      	str	r0, [sp, #0]
   117e2:	4b0e      	ldr	r3, [pc, #56]	; (1181c <imgmgr_module_init+0x50>)
   117e4:	681c      	ldr	r4, [r3, #0]
   117e6:	4603      	mov	r3, r0
   117e8:	4602      	mov	r2, r0
   117ea:	4601      	mov	r1, r0
   117ec:	47a0      	blx	r4

#if MYNEWT_VAL(IMGMGR_CLI)
    rc = imgr_cli_register();
   117ee:	f000 f94d 	bl	11a8c <imgr_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   117f2:	b138      	cbz	r0, 11804 <imgmgr_module_init+0x38>
   117f4:	2000      	movs	r0, #0
   117f6:	9000      	str	r0, [sp, #0]
   117f8:	4b08      	ldr	r3, [pc, #32]	; (1181c <imgmgr_module_init+0x50>)
   117fa:	681c      	ldr	r4, [r3, #0]
   117fc:	4603      	mov	r3, r0
   117fe:	4602      	mov	r2, r0
   11800:	4601      	mov	r1, r0
   11802:	47a0      	blx	r4
     */
    if (imgmgr_state_slot_in_use(1)) {
        log_fcb_slot1_lock();
    }
#endif
}
   11804:	b002      	add	sp, #8
   11806:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11808:	461a      	mov	r2, r3
   1180a:	4619      	mov	r1, r3
   1180c:	4618      	mov	r0, r3
   1180e:	f7f7 fcd9 	bl	91c4 <__assert_func>
   11812:	bf00      	nop
   11814:	2000538c 	.word	0x2000538c
   11818:	20000268 	.word	0x20000268
   1181c:	20000308 	.word	0x20000308

00011820 <imgr_cli_too_few_args>:
#endif
};

static void
imgr_cli_too_few_args(void)
{
   11820:	b508      	push	{r3, lr}
    console_printf("Too few args\n");
   11822:	4802      	ldr	r0, [pc, #8]	; (1182c <imgr_cli_too_few_args+0xc>)
   11824:	f002 faf2 	bl	13e0c <console_printf>
}
   11828:	bd08      	pop	{r3, pc}
   1182a:	bf00      	nop
   1182c:	000267ec 	.word	0x000267ec

00011830 <imgr_cli_flags_str>:
imgr_cli_flags_str(uint32_t image_flags, uint8_t state_flags)
{
    static char buf[8];
    char *p;

    memset(buf, ' ', sizeof buf);
   11830:	4b0f      	ldr	r3, [pc, #60]	; (11870 <imgr_cli_flags_str+0x40>)
   11832:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
   11836:	601a      	str	r2, [r3, #0]
   11838:	605a      	str	r2, [r3, #4]
    p = buf;

    if (state_flags & IMGMGR_STATE_F_ACTIVE) {
   1183a:	f011 0f04 	tst.w	r1, #4
   1183e:	d001      	beq.n	11844 <imgr_cli_flags_str+0x14>
        *p = 'a';
   11840:	2261      	movs	r2, #97	; 0x61
   11842:	701a      	strb	r2, [r3, #0]
    }
    p++;
    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   11844:	f010 0f10 	tst.w	r0, #16
   11848:	d102      	bne.n	11850 <imgr_cli_flags_str+0x20>
        *p = 'b';
   1184a:	4b09      	ldr	r3, [pc, #36]	; (11870 <imgr_cli_flags_str+0x40>)
   1184c:	2262      	movs	r2, #98	; 0x62
   1184e:	705a      	strb	r2, [r3, #1]
    }
    p++;
    if (state_flags & IMGMGR_STATE_F_CONFIRMED) {
   11850:	f011 0f02 	tst.w	r1, #2
   11854:	d002      	beq.n	1185c <imgr_cli_flags_str+0x2c>
        *p = 'c';
   11856:	4b06      	ldr	r3, [pc, #24]	; (11870 <imgr_cli_flags_str+0x40>)
   11858:	2263      	movs	r2, #99	; 0x63
   1185a:	709a      	strb	r2, [r3, #2]
    }
    p++;
    if (state_flags & IMGMGR_STATE_F_PENDING) {
   1185c:	f011 0f01 	tst.w	r1, #1
   11860:	d002      	beq.n	11868 <imgr_cli_flags_str+0x38>
        *p = 'p';
   11862:	4b03      	ldr	r3, [pc, #12]	; (11870 <imgr_cli_flags_str+0x40>)
   11864:	2270      	movs	r2, #112	; 0x70
   11866:	70da      	strb	r2, [r3, #3]
    }
    p++;

    *p = '\0';
   11868:	4801      	ldr	r0, [pc, #4]	; (11870 <imgr_cli_flags_str+0x40>)
   1186a:	2300      	movs	r3, #0
   1186c:	7103      	strb	r3, [r0, #4]

    return buf;
}
   1186e:	4770      	bx	lr
   11870:	20004094 	.word	0x20004094

00011874 <imgr_cli_show_slot>:

static void
imgr_cli_show_slot(int slot)
{
   11874:	b570      	push	{r4, r5, r6, lr}
   11876:	b0a6      	sub	sp, #152	; 0x98
   11878:	4604      	mov	r4, r0
    struct image_version ver;
    char ver_str[IMGMGR_NMGR_MAX_VER];
    uint32_t flags;
    uint8_t state_flags;

    if (imgr_read_info(slot, &ver, hash, &flags)) {
   1187a:	ab03      	add	r3, sp, #12
   1187c:	aa1e      	add	r2, sp, #120	; 0x78
   1187e:	a90b      	add	r1, sp, #44	; 0x2c
   11880:	f7ff fc62 	bl	11148 <imgr_read_info>
   11884:	b108      	cbz	r0, 1188a <imgr_cli_show_slot+0x16>

    console_printf("%d %8s: %s %s\n",
      slot, ver_str,
      hex_format(hash, IMGMGR_HASH_LEN, hash_str, sizeof(hash_str)),
      imgr_cli_flags_str(flags, state_flags));
}
   11886:	b026      	add	sp, #152	; 0x98
   11888:	bd70      	pop	{r4, r5, r6, pc}
    state_flags = imgmgr_state_flags(slot);
   1188a:	4620      	mov	r0, r4
   1188c:	f000 f930 	bl	11af0 <imgmgr_state_flags>
   11890:	4606      	mov	r6, r0
    (void)imgr_ver_str(&ver, ver_str);
   11892:	a904      	add	r1, sp, #16
   11894:	a80b      	add	r0, sp, #44	; 0x2c
   11896:	f000 fb51 	bl	11f3c <imgr_ver_str>
    console_printf("%d %8s: %s %s\n",
   1189a:	2341      	movs	r3, #65	; 0x41
   1189c:	aa0d      	add	r2, sp, #52	; 0x34
   1189e:	2120      	movs	r1, #32
   118a0:	a81e      	add	r0, sp, #120	; 0x78
   118a2:	f006 f90f 	bl	17ac4 <hex_format>
   118a6:	4605      	mov	r5, r0
   118a8:	4631      	mov	r1, r6
   118aa:	9803      	ldr	r0, [sp, #12]
   118ac:	f7ff ffc0 	bl	11830 <imgr_cli_flags_str>
   118b0:	9000      	str	r0, [sp, #0]
   118b2:	462b      	mov	r3, r5
   118b4:	aa04      	add	r2, sp, #16
   118b6:	4621      	mov	r1, r4
   118b8:	4801      	ldr	r0, [pc, #4]	; (118c0 <imgr_cli_show_slot+0x4c>)
   118ba:	f002 faa7 	bl	13e0c <console_printf>
   118be:	e7e2      	b.n	11886 <imgr_cli_show_slot+0x12>
   118c0:	00026dfc 	.word	0x00026dfc

000118c4 <imgr_cli_confirm>:
    }
}

static void
imgr_cli_confirm(void)
{
   118c4:	b508      	push	{r3, lr}
    int rc;

    rc = imgmgr_state_confirm();
   118c6:	f000 f9e8 	bl	11c9a <imgmgr_state_confirm>
    if (rc != 0) {
   118ca:	b900      	cbnz	r0, 118ce <imgr_cli_confirm+0xa>
        console_printf("Error confirming image state; rc=%d\n", rc);
        return;
    }
}
   118cc:	bd08      	pop	{r3, pc}
   118ce:	4601      	mov	r1, r0
        console_printf("Error confirming image state; rc=%d\n", rc);
   118d0:	4801      	ldr	r0, [pc, #4]	; (118d8 <imgr_cli_confirm+0x14>)
   118d2:	f002 fa9b 	bl	13e0c <console_printf>
        return;
   118d6:	e7f9      	b.n	118cc <imgr_cli_confirm+0x8>
   118d8:	00026e0c 	.word	0x00026e0c

000118dc <imgr_cli_hash_parse>:
{
   118dc:	b530      	push	{r4, r5, lr}
   118de:	b08b      	sub	sp, #44	; 0x2c
   118e0:	4604      	mov	r4, r0
   118e2:	460d      	mov	r5, r1
    rc = hex_parse(arg, strlen(arg), hash, sizeof hash);
   118e4:	f7fe ff00 	bl	106e8 <strlen>
   118e8:	4601      	mov	r1, r0
   118ea:	2320      	movs	r3, #32
   118ec:	aa02      	add	r2, sp, #8
   118ee:	4620      	mov	r0, r4
   118f0:	f006 f914 	bl	17b1c <hex_parse>
    if (rc != sizeof hash) {
   118f4:	2820      	cmp	r0, #32
   118f6:	d10a      	bne.n	1190e <imgr_cli_hash_parse+0x32>
    slot = imgr_find_by_hash(hash, &ver);
   118f8:	4669      	mov	r1, sp
   118fa:	a802      	add	r0, sp, #8
   118fc:	f7ff fcca 	bl	11294 <imgr_find_by_hash>
    if (slot == -1) {
   11900:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11904:	d006      	beq.n	11914 <imgr_cli_hash_parse+0x38>
    *out_slot = slot;
   11906:	6028      	str	r0, [r5, #0]
    return 0;
   11908:	2000      	movs	r0, #0
}
   1190a:	b00b      	add	sp, #44	; 0x2c
   1190c:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1190e:	f06f 0001 	mvn.w	r0, #1
   11912:	e7fa      	b.n	1190a <imgr_cli_hash_parse+0x2e>
        return SYS_ENOENT;
   11914:	f06f 0003 	mvn.w	r0, #3
   11918:	e7f7      	b.n	1190a <imgr_cli_hash_parse+0x2e>
	...

0001191c <imgr_cli_slot_or_hash_parse>:
{
   1191c:	b530      	push	{r4, r5, lr}
   1191e:	b087      	sub	sp, #28
   11920:	4605      	mov	r5, r0
   11922:	460c      	mov	r4, r1
    *out_slot = parse_ll_bounds(arg, 0, 1, &rc);
   11924:	ab05      	add	r3, sp, #20
   11926:	9302      	str	r3, [sp, #8]
   11928:	2201      	movs	r2, #1
   1192a:	2300      	movs	r3, #0
   1192c:	e9cd 2300 	strd	r2, r3, [sp]
   11930:	2200      	movs	r2, #0
   11932:	2300      	movs	r3, #0
   11934:	f005 fd1a 	bl	1736c <parse_ll_bounds>
   11938:	6020      	str	r0, [r4, #0]
    if (rc == 0) {
   1193a:	9805      	ldr	r0, [sp, #20]
   1193c:	b908      	cbnz	r0, 11942 <imgr_cli_slot_or_hash_parse+0x26>
}
   1193e:	b007      	add	sp, #28
   11940:	bd30      	pop	{r4, r5, pc}
    rc = imgr_cli_hash_parse(arg, out_slot);
   11942:	4621      	mov	r1, r4
   11944:	4628      	mov	r0, r5
   11946:	f7ff ffc9 	bl	118dc <imgr_cli_hash_parse>
   1194a:	9005      	str	r0, [sp, #20]
    switch (rc) {
   1194c:	f110 0f04 	cmn.w	r0, #4
   11950:	d007      	beq.n	11962 <imgr_cli_slot_or_hash_parse+0x46>
   11952:	2800      	cmp	r0, #0
   11954:	d0f3      	beq.n	1193e <imgr_cli_slot_or_hash_parse+0x22>
        console_printf("Invalid slot number or image hash: %s\n", arg);
   11956:	4629      	mov	r1, r5
   11958:	4805      	ldr	r0, [pc, #20]	; (11970 <imgr_cli_slot_or_hash_parse+0x54>)
   1195a:	f002 fa57 	bl	13e0c <console_printf>
        return rc;
   1195e:	9805      	ldr	r0, [sp, #20]
   11960:	e7ed      	b.n	1193e <imgr_cli_slot_or_hash_parse+0x22>
        console_printf("No image with hash: %s\n", arg);
   11962:	4629      	mov	r1, r5
   11964:	4803      	ldr	r0, [pc, #12]	; (11974 <imgr_cli_slot_or_hash_parse+0x58>)
   11966:	f002 fa51 	bl	13e0c <console_printf>
        return rc;
   1196a:	9805      	ldr	r0, [sp, #20]
   1196c:	e7e7      	b.n	1193e <imgr_cli_slot_or_hash_parse+0x22>
   1196e:	bf00      	nop
   11970:	00026e4c 	.word	0x00026e4c
   11974:	00026e34 	.word	0x00026e34

00011978 <imgr_cli_set_pending>:
{
   11978:	b510      	push	{r4, lr}
   1197a:	b082      	sub	sp, #8
   1197c:	460c      	mov	r4, r1
    rc = imgr_cli_slot_or_hash_parse(arg, &slot);
   1197e:	a901      	add	r1, sp, #4
   11980:	f7ff ffcc 	bl	1191c <imgr_cli_slot_or_hash_parse>
    if (rc != 0) {
   11984:	b108      	cbz	r0, 1198a <imgr_cli_set_pending+0x12>
}
   11986:	b002      	add	sp, #8
   11988:	bd10      	pop	{r4, pc}
    rc = imgmgr_state_set_pending(slot, permanent);
   1198a:	4621      	mov	r1, r4
   1198c:	9801      	ldr	r0, [sp, #4]
   1198e:	f000 f92c 	bl	11bea <imgmgr_state_set_pending>
    if (rc) {
   11992:	4602      	mov	r2, r0
   11994:	2800      	cmp	r0, #0
   11996:	d0f6      	beq.n	11986 <imgr_cli_set_pending+0xe>
        console_printf("Error setting slot %d to pending; rc=%d\n", slot, rc);
   11998:	9901      	ldr	r1, [sp, #4]
   1199a:	4802      	ldr	r0, [pc, #8]	; (119a4 <imgr_cli_set_pending+0x2c>)
   1199c:	f002 fa36 	bl	13e0c <console_printf>
        return;
   119a0:	e7f1      	b.n	11986 <imgr_cli_set_pending+0xe>
   119a2:	bf00      	nop
   119a4:	00026e74 	.word	0x00026e74

000119a8 <imgr_cli_erase>:

static void
imgr_cli_erase(void)
{
   119a8:	b510      	push	{r4, lr}
   119aa:	b082      	sub	sp, #8
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = imgmgr_find_best_area_id();
   119ac:	f7ff fc90 	bl	112d0 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   119b0:	1e04      	subs	r4, r0, #0
   119b2:	db14      	blt.n	119de <imgr_cli_erase+0x36>
        if (area_id == FLASH_AREA_IMAGE_1) {
            log_fcb_slot1_lock();
        }
#endif

        rc = flash_area_open(area_id, &fa);
   119b4:	a901      	add	r1, sp, #4
   119b6:	b2e0      	uxtb	r0, r4
   119b8:	f002 fc0e 	bl	141d8 <flash_area_open>
        if (rc) {
   119bc:	b950      	cbnz	r0, 119d4 <imgr_cli_erase+0x2c>
            console_printf("Error opening area %d\n", area_id);
            return;
        }
        rc = flash_area_erase(fa, 0, fa->fa_size);
   119be:	9801      	ldr	r0, [sp, #4]
   119c0:	6882      	ldr	r2, [r0, #8]
   119c2:	2100      	movs	r1, #0
   119c4:	f002 fc90 	bl	142e8 <flash_area_erase>
        flash_area_close(fa);
        if (rc) {
   119c8:	4601      	mov	r1, r0
   119ca:	b158      	cbz	r0, 119e4 <imgr_cli_erase+0x3c>
            console_printf("Error erasing area rc=%d\n", rc);
   119cc:	4806      	ldr	r0, [pc, #24]	; (119e8 <imgr_cli_erase+0x40>)
   119ce:	f002 fa1d 	bl	13e0c <console_printf>
   119d2:	e007      	b.n	119e4 <imgr_cli_erase+0x3c>
            console_printf("Error opening area %d\n", area_id);
   119d4:	4621      	mov	r1, r4
   119d6:	4805      	ldr	r0, [pc, #20]	; (119ec <imgr_cli_erase+0x44>)
   119d8:	f002 fa18 	bl	13e0c <console_printf>
            return;
   119dc:	e002      	b.n	119e4 <imgr_cli_erase+0x3c>
        }
    } else {
        /*
         * No slot where to erase!
         */
        console_printf("No suitable area to erase\n");
   119de:	4804      	ldr	r0, [pc, #16]	; (119f0 <imgr_cli_erase+0x48>)
   119e0:	f002 fa14 	bl	13e0c <console_printf>
    }
}
   119e4:	b002      	add	sp, #8
   119e6:	bd10      	pop	{r4, pc}
   119e8:	00026eb8 	.word	0x00026eb8
   119ec:	00026ea0 	.word	0x00026ea0
   119f0:	00026ed4 	.word	0x00026ed4

000119f4 <imgr_cli_cmd>:

static int
imgr_cli_cmd(int argc, char **argv)
{
   119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i;

    if (argc < 2) {
   119f6:	2801      	cmp	r0, #1
   119f8:	dd14      	ble.n	11a24 <imgr_cli_cmd+0x30>
   119fa:	4605      	mov	r5, r0
   119fc:	460e      	mov	r6, r1
        imgr_cli_too_few_args();
        return 0;
    }
    if (!strcmp(argv[1], "list")) {
   119fe:	684f      	ldr	r7, [r1, #4]
   11a00:	491d      	ldr	r1, [pc, #116]	; (11a78 <imgr_cli_cmd+0x84>)
   11a02:	4638      	mov	r0, r7
   11a04:	f7fe fe64 	bl	106d0 <strcmp>
   11a08:	4604      	mov	r4, r0
   11a0a:	b190      	cbz	r0, 11a32 <imgr_cli_cmd+0x3e>
        for (i = 0; i < 2; i++) {
            imgr_cli_show_slot(i);
        }
    } else if (!strcmp(argv[1], "test")) {
   11a0c:	491b      	ldr	r1, [pc, #108]	; (11a7c <imgr_cli_cmd+0x88>)
   11a0e:	4638      	mov	r0, r7
   11a10:	f7fe fe5e 	bl	106d0 <strcmp>
   11a14:	b9a0      	cbnz	r0, 11a40 <imgr_cli_cmd+0x4c>
        if (argc < 3) {
   11a16:	2d02      	cmp	r5, #2
   11a18:	dd0f      	ble.n	11a3a <imgr_cli_cmd+0x46>
            imgr_cli_too_few_args();
            return 0;
        } else {
            imgr_cli_set_pending(argv[2], 0);
   11a1a:	2100      	movs	r1, #0
   11a1c:	68b0      	ldr	r0, [r6, #8]
   11a1e:	f7ff ffab 	bl	11978 <imgr_cli_set_pending>
   11a22:	e008      	b.n	11a36 <imgr_cli_cmd+0x42>
        imgr_cli_too_few_args();
   11a24:	f7ff fefc 	bl	11820 <imgr_cli_too_few_args>
        return 0;
   11a28:	e005      	b.n	11a36 <imgr_cli_cmd+0x42>
            imgr_cli_show_slot(i);
   11a2a:	4620      	mov	r0, r4
   11a2c:	f7ff ff22 	bl	11874 <imgr_cli_show_slot>
        for (i = 0; i < 2; i++) {
   11a30:	3401      	adds	r4, #1
   11a32:	2c01      	cmp	r4, #1
   11a34:	ddf9      	ble.n	11a2a <imgr_cli_cmd+0x36>
        imgr_cli_erase();
    } else {
        console_printf("Unknown cmd\n");
    }
    return 0;
}
   11a36:	2000      	movs	r0, #0
   11a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            imgr_cli_too_few_args();
   11a3a:	f7ff fef1 	bl	11820 <imgr_cli_too_few_args>
            return 0;
   11a3e:	e7fa      	b.n	11a36 <imgr_cli_cmd+0x42>
    } else if (!strcmp(argv[1], "confirm")) {
   11a40:	490f      	ldr	r1, [pc, #60]	; (11a80 <imgr_cli_cmd+0x8c>)
   11a42:	4638      	mov	r0, r7
   11a44:	f7fe fe44 	bl	106d0 <strcmp>
   11a48:	b948      	cbnz	r0, 11a5e <imgr_cli_cmd+0x6a>
        if (argc < 3) {
   11a4a:	2d02      	cmp	r5, #2
   11a4c:	dc02      	bgt.n	11a54 <imgr_cli_cmd+0x60>
            imgr_cli_confirm();
   11a4e:	f7ff ff39 	bl	118c4 <imgr_cli_confirm>
   11a52:	e7f0      	b.n	11a36 <imgr_cli_cmd+0x42>
            imgr_cli_set_pending(argv[2], 1);
   11a54:	2101      	movs	r1, #1
   11a56:	68b0      	ldr	r0, [r6, #8]
   11a58:	f7ff ff8e 	bl	11978 <imgr_cli_set_pending>
   11a5c:	e7eb      	b.n	11a36 <imgr_cli_cmd+0x42>
    } else if (!strcmp(argv[1], "erase")) {
   11a5e:	4909      	ldr	r1, [pc, #36]	; (11a84 <imgr_cli_cmd+0x90>)
   11a60:	4638      	mov	r0, r7
   11a62:	f7fe fe35 	bl	106d0 <strcmp>
   11a66:	b910      	cbnz	r0, 11a6e <imgr_cli_cmd+0x7a>
        imgr_cli_erase();
   11a68:	f7ff ff9e 	bl	119a8 <imgr_cli_erase>
   11a6c:	e7e3      	b.n	11a36 <imgr_cli_cmd+0x42>
        console_printf("Unknown cmd\n");
   11a6e:	4806      	ldr	r0, [pc, #24]	; (11a88 <imgr_cli_cmd+0x94>)
   11a70:	f002 f9cc 	bl	13e0c <console_printf>
   11a74:	e7df      	b.n	11a36 <imgr_cli_cmd+0x42>
   11a76:	bf00      	nop
   11a78:	000267fc 	.word	0x000267fc
   11a7c:	00026ef0 	.word	0x00026ef0
   11a80:	00026ef8 	.word	0x00026ef8
   11a84:	00026f00 	.word	0x00026f00
   11a88:	000268ec 	.word	0x000268ec

00011a8c <imgr_cli_register>:

int
imgr_cli_register(void)
{
   11a8c:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_imgr_cmd);
   11a8e:	4802      	ldr	r0, [pc, #8]	; (11a98 <imgr_cli_register+0xc>)
   11a90:	f003 ff9c 	bl	159cc <shell_cmd_register>
}
   11a94:	bd08      	pop	{r3, pc}
   11a96:	bf00      	nop
   11a98:	20000274 	.word	0x20000274

00011a9c <imgmgr_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMGMGR_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   11a9c:	2000      	movs	r0, #0
   11a9e:	4770      	bx	lr

00011aa0 <imgmgr_log_upload_start>:

int
imgmgr_log_upload_start(int status)
{
   11aa0:	b508      	push	{r3, lr}
   11aa2:	4601      	mov	r1, r0
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPSTART, status, NULL);
   11aa4:	2200      	movs	r2, #0
   11aa6:	4802      	ldr	r0, [pc, #8]	; (11ab0 <imgmgr_log_upload_start+0x10>)
   11aa8:	f7ff fff8 	bl	11a9c <imgmgr_log_gen>
}
   11aac:	bd08      	pop	{r3, pc}
   11aae:	bf00      	nop
   11ab0:	00026f84 	.word	0x00026f84

00011ab4 <imgmgr_log_upload_done>:

int
imgmgr_log_upload_done(int status, const uint8_t *hash)
{
   11ab4:	b508      	push	{r3, lr}
   11ab6:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_UPDONE, 0, hash);
   11ab8:	2100      	movs	r1, #0
   11aba:	4802      	ldr	r0, [pc, #8]	; (11ac4 <imgmgr_log_upload_done+0x10>)
   11abc:	f7ff ffee 	bl	11a9c <imgmgr_log_gen>
}
   11ac0:	bd08      	pop	{r3, pc}
   11ac2:	bf00      	nop
   11ac4:	00026f8c 	.word	0x00026f8c

00011ac8 <imgmgr_log_pending>:

int
imgmgr_log_pending(int status, const uint8_t *hash)
{
   11ac8:	b508      	push	{r3, lr}
   11aca:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_PEND, status, hash);
   11acc:	4601      	mov	r1, r0
   11ace:	4802      	ldr	r0, [pc, #8]	; (11ad8 <imgmgr_log_pending+0x10>)
   11ad0:	f7ff ffe4 	bl	11a9c <imgmgr_log_gen>
}
   11ad4:	bd08      	pop	{r3, pc}
   11ad6:	bf00      	nop
   11ad8:	00026f94 	.word	0x00026f94

00011adc <imgmgr_log_confirm>:

int
imgmgr_log_confirm(int status, const uint8_t *hash)
{
   11adc:	b508      	push	{r3, lr}
   11ade:	460a      	mov	r2, r1
    return imgmgr_log_gen(IMGMGR_LOG_EV_CONF, status, hash);
   11ae0:	4601      	mov	r1, r0
   11ae2:	4802      	ldr	r0, [pc, #8]	; (11aec <imgmgr_log_confirm+0x10>)
   11ae4:	f7ff ffda 	bl	11a9c <imgmgr_log_gen>
}
   11ae8:	bd08      	pop	{r3, pc}
   11aea:	bf00      	nop
   11aec:	00026f9c 	.word	0x00026f9c

00011af0 <imgmgr_state_flags>:
#include "imgmgr_priv.h"
#include "log/log_fcb_slot1.h"

uint8_t
imgmgr_state_flags(int query_slot)
{
   11af0:	b538      	push	{r3, r4, r5, lr}
    split_mode_t split_mode;
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   11af2:	2801      	cmp	r0, #1
   11af4:	d809      	bhi.n	11b0a <imgmgr_state_flags+0x1a>
   11af6:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = boot_swap_type();
   11af8:	f005 fd9c 	bl	17634 <boot_swap_type>
    switch (swap_type) {
   11afc:	3801      	subs	r0, #1
   11afe:	2803      	cmp	r0, #3
   11b00:	d825      	bhi.n	11b4e <imgmgr_state_flags+0x5e>
   11b02:	e8df f000 	tbb	[pc, r0]
   11b06:	1508      	.short	0x1508
   11b08:	1f1a      	.short	0x1f1a
    assert(query_slot == 0 || query_slot == 1);
   11b0a:	2300      	movs	r3, #0
   11b0c:	461a      	mov	r2, r3
   11b0e:	4619      	mov	r1, r3
   11b10:	4618      	mov	r0, r3
   11b12:	f7f7 fb57 	bl	91c4 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   11b16:	b1e4      	cbz	r4, 11b52 <imgmgr_state_flags+0x62>
    flags = 0;
   11b18:	2500      	movs	r5, #0

    /* Slot 0 is always active.  Slot 1 is also active if a split app is
     * currently running.
     */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0 || split_app_active_get()) {
   11b1a:	bb44      	cbnz	r4, 11b6e <imgmgr_state_flags+0x7e>
        flags |= IMGMGR_STATE_F_ACTIVE;
   11b1c:	f045 0504 	orr.w	r5, r5, #4
    }

    /* Read the split/status config state to determine any pending split-image
     * state changes.
     */
    split_mode = split_mode_get();
   11b20:	f005 fe76 	bl	17810 <split_mode_get>
    switch (split_mode) {
   11b24:	2803      	cmp	r0, #3
   11b26:	d838      	bhi.n	11b9a <imgmgr_state_flags+0xaa>
   11b28:	e8df f000 	tbb	[pc, r0]
   11b2c:	2d263228 	.word	0x2d263228
        if (query_slot == 0) {
   11b30:	b18c      	cbz	r4, 11b56 <imgmgr_state_flags+0x66>
        } else if (query_slot == 1) {
   11b32:	2c01      	cmp	r4, #1
   11b34:	d011      	beq.n	11b5a <imgmgr_state_flags+0x6a>
    flags = 0;
   11b36:	2500      	movs	r5, #0
   11b38:	e7ef      	b.n	11b1a <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   11b3a:	b184      	cbz	r4, 11b5e <imgmgr_state_flags+0x6e>
        } else if (query_slot == 1) {
   11b3c:	2c01      	cmp	r4, #1
   11b3e:	d010      	beq.n	11b62 <imgmgr_state_flags+0x72>
    flags = 0;
   11b40:	2500      	movs	r5, #0
   11b42:	e7ea      	b.n	11b1a <imgmgr_state_flags+0x2a>
        if (query_slot == 0) {
   11b44:	b17c      	cbz	r4, 11b66 <imgmgr_state_flags+0x76>
        } else if (query_slot == 1) {
   11b46:	2c01      	cmp	r4, #1
   11b48:	d00f      	beq.n	11b6a <imgmgr_state_flags+0x7a>
    flags = 0;
   11b4a:	2500      	movs	r5, #0
   11b4c:	e7e5      	b.n	11b1a <imgmgr_state_flags+0x2a>
    switch (swap_type) {
   11b4e:	2500      	movs	r5, #0
   11b50:	e7e3      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   11b52:	2506      	movs	r5, #6
   11b54:	e7e1      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b56:	2502      	movs	r5, #2
   11b58:	e7df      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING;
   11b5a:	2501      	movs	r5, #1
   11b5c:	e7dd      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b5e:	2502      	movs	r5, #2
   11b60:	e7db      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_PENDING | IMGMGR_STATE_F_PERMANENT;
   11b62:	2509      	movs	r5, #9
   11b64:	e7d9      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_ACTIVE;
   11b66:	2504      	movs	r5, #4
   11b68:	e7d7      	b.n	11b1a <imgmgr_state_flags+0x2a>
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b6a:	2502      	movs	r5, #2
   11b6c:	e7d5      	b.n	11b1a <imgmgr_state_flags+0x2a>
    if (query_slot == 0 || split_app_active_get()) {
   11b6e:	f005 fe55 	bl	1781c <split_app_active_get>
   11b72:	2800      	cmp	r0, #0
   11b74:	d0d4      	beq.n	11b20 <imgmgr_state_flags+0x30>
   11b76:	e7d1      	b.n	11b1c <imgmgr_state_flags+0x2c>
    case SPLIT_MODE_LOADER:
        break;

    case SPLIT_MODE_APP:
        if (query_slot == 1) {
   11b78:	2c01      	cmp	r4, #1
   11b7a:	d001      	beq.n	11b80 <imgmgr_state_flags+0x90>
        assert(0);
        break;
    }

    return flags;
}
   11b7c:	4628      	mov	r0, r5
   11b7e:	bd38      	pop	{r3, r4, r5, pc}
            flags |= IMGMGR_STATE_F_CONFIRMED;
   11b80:	f045 0502 	orr.w	r5, r5, #2
   11b84:	e7fa      	b.n	11b7c <imgmgr_state_flags+0x8c>
        if (query_slot == 0) {
   11b86:	2c00      	cmp	r4, #0
   11b88:	d1f8      	bne.n	11b7c <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   11b8a:	f045 0501 	orr.w	r5, r5, #1
   11b8e:	e7f5      	b.n	11b7c <imgmgr_state_flags+0x8c>
        if (query_slot == 1) {
   11b90:	2c01      	cmp	r4, #1
   11b92:	d1f3      	bne.n	11b7c <imgmgr_state_flags+0x8c>
            flags |= IMGMGR_STATE_F_PENDING;
   11b94:	f045 0501 	orr.w	r5, r5, #1
   11b98:	e7f0      	b.n	11b7c <imgmgr_state_flags+0x8c>
        assert(0);
   11b9a:	2300      	movs	r3, #0
   11b9c:	461a      	mov	r2, r3
   11b9e:	4619      	mov	r1, r3
   11ba0:	4618      	mov	r0, r3
   11ba2:	f7f7 fb0f 	bl	91c4 <__assert_func>

00011ba6 <imgmgr_state_any_pending>:

static int
imgmgr_state_any_pending(void)
{
   11ba6:	b508      	push	{r3, lr}
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   11ba8:	2000      	movs	r0, #0
   11baa:	f7ff ffa1 	bl	11af0 <imgmgr_state_flags>
   11bae:	f010 0f01 	tst.w	r0, #1
   11bb2:	d001      	beq.n	11bb8 <imgmgr_state_any_pending+0x12>
   11bb4:	2001      	movs	r0, #1
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
}
   11bb6:	bd08      	pop	{r3, pc}
           (imgmgr_state_flags(1) & IMGMGR_STATE_F_PENDING);
   11bb8:	2001      	movs	r0, #1
   11bba:	f7ff ff99 	bl	11af0 <imgmgr_state_flags>
    return (imgmgr_state_flags(0) & IMGMGR_STATE_F_PENDING) ||
   11bbe:	f010 0f01 	tst.w	r0, #1
   11bc2:	d101      	bne.n	11bc8 <imgmgr_state_any_pending+0x22>
   11bc4:	2000      	movs	r0, #0
   11bc6:	e7f6      	b.n	11bb6 <imgmgr_state_any_pending+0x10>
   11bc8:	2001      	movs	r0, #1
   11bca:	e7f4      	b.n	11bb6 <imgmgr_state_any_pending+0x10>

00011bcc <imgmgr_state_slot_in_use>:

int
imgmgr_state_slot_in_use(int slot)
{
   11bcc:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = imgmgr_state_flags(slot);
   11bce:	f7ff ff8f 	bl	11af0 <imgmgr_state_flags>
    return (state_flags & IMGMGR_STATE_F_ACTIVE)       ||
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   11bd2:	f010 0f06 	tst.w	r0, #6
   11bd6:	d104      	bne.n	11be2 <imgmgr_state_slot_in_use+0x16>
   11bd8:	f010 0f01 	tst.w	r0, #1
   11bdc:	d003      	beq.n	11be6 <imgmgr_state_slot_in_use+0x1a>
   11bde:	2001      	movs	r0, #1
   11be0:	e000      	b.n	11be4 <imgmgr_state_slot_in_use+0x18>
   11be2:	2001      	movs	r0, #1
           (state_flags & IMGMGR_STATE_F_PENDING);
}
   11be4:	bd08      	pop	{r3, pc}
           (state_flags & IMGMGR_STATE_F_CONFIRMED)    ||
   11be6:	2000      	movs	r0, #0
   11be8:	e7fc      	b.n	11be4 <imgmgr_state_slot_in_use+0x18>

00011bea <imgmgr_state_set_pending>:

int
imgmgr_state_set_pending(int slot, int permanent)
{
   11bea:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bec:	b08b      	sub	sp, #44	; 0x2c
   11bee:	4605      	mov	r5, r0
   11bf0:	460c      	mov	r4, r1
    uint8_t hash[IMGMGR_HASH_LEN];
    const uint8_t *hashp;
    int split_app_active;
    int rc;

    state_flags = imgmgr_state_flags(slot);
   11bf2:	f7ff ff7d 	bl	11af0 <imgmgr_state_flags>
   11bf6:	4606      	mov	r6, r0
    split_app_active = split_app_active_get();
   11bf8:	f005 fe10 	bl	1781c <split_app_active_get>
   11bfc:	4607      	mov	r7, r0
    hashp = NULL;

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if ((state_flags & IMGMGR_STATE_F_CONFIRMED) &&
   11bfe:	f016 0f02 	tst.w	r6, #2
   11c02:	d001      	beq.n	11c08 <imgmgr_state_set_pending+0x1e>
   11c04:	bb6d      	cbnz	r5, 11c62 <imgmgr_state_set_pending+0x78>
        (slot != 0 || !split_app_active)) {
   11c06:	b378      	cbz	r0, 11c68 <imgmgr_state_set_pending+0x7e>

        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = imgr_read_info(slot, NULL, hash, &image_flags);
   11c08:	ab09      	add	r3, sp, #36	; 0x24
   11c0a:	aa01      	add	r2, sp, #4
   11c0c:	2100      	movs	r1, #0
   11c0e:	4628      	mov	r0, r5
   11c10:	f7ff fa9a 	bl	11148 <imgr_read_info>
    if (rc != 0) {
   11c14:	bb58      	cbnz	r0, 11c6e <imgmgr_state_set_pending+0x84>
        rc = MGMT_ERR_EUNKNOWN;
        goto done;
    }
    hashp = hash;

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   11c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c18:	f013 0f10 	tst.w	r3, #16
   11c1c:	d114      	bne.n	11c48 <imgmgr_state_set_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   11c1e:	b13f      	cbz	r7, 11c30 <imgmgr_state_set_pending+0x46>
                rc = MGMT_ERR_EUNKNOWN;
                goto done;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   11c20:	b16c      	cbz	r4, 11c3e <imgmgr_state_set_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   11c22:	2000      	movs	r0, #0
   11c24:	f005 fe6e 	bl	17904 <split_write_split>
   11c28:	4605      	mov	r5, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   11c2a:	bb65      	cbnz	r5, 11c86 <imgmgr_state_set_pending+0x9c>
    hashp = hash;
   11c2c:	a901      	add	r1, sp, #4
   11c2e:	e020      	b.n	11c72 <imgmgr_state_set_pending+0x88>
            rc = boot_set_pending(permanent);
   11c30:	4620      	mov	r0, r4
   11c32:	f005 fd51 	bl	176d8 <boot_set_pending>
            if (rc != 0) {
   11c36:	4605      	mov	r5, r0
   11c38:	bb10      	cbnz	r0, 11c80 <imgmgr_state_set_pending+0x96>
    hashp = hash;
   11c3a:	a901      	add	r1, sp, #4
   11c3c:	e019      	b.n	11c72 <imgmgr_state_set_pending+0x88>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   11c3e:	2003      	movs	r0, #3
   11c40:	f005 fe60 	bl	17904 <split_write_split>
   11c44:	4605      	mov	r5, r0
   11c46:	e7f0      	b.n	11c2a <imgmgr_state_set_pending+0x40>
                goto done;
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   11c48:	b134      	cbz	r4, 11c58 <imgmgr_state_set_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   11c4a:	2002      	movs	r0, #2
   11c4c:	f005 fe5a 	bl	17904 <split_write_split>
   11c50:	4605      	mov	r5, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   11c52:	b9dd      	cbnz	r5, 11c8c <imgmgr_state_set_pending+0xa2>
    hashp = hash;
   11c54:	a901      	add	r1, sp, #4
   11c56:	e00c      	b.n	11c72 <imgmgr_state_set_pending+0x88>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   11c58:	2001      	movs	r0, #1
   11c5a:	f005 fe53 	bl	17904 <split_write_split>
   11c5e:	4605      	mov	r5, r0
   11c60:	e7f7      	b.n	11c52 <imgmgr_state_set_pending+0x68>
        rc = MGMT_ERR_EBADSTATE;
   11c62:	2506      	movs	r5, #6
    hashp = NULL;
   11c64:	2100      	movs	r1, #0
   11c66:	e004      	b.n	11c72 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EBADSTATE;
   11c68:	2506      	movs	r5, #6
    hashp = NULL;
   11c6a:	2100      	movs	r1, #0
   11c6c:	e001      	b.n	11c72 <imgmgr_state_set_pending+0x88>
        rc = MGMT_ERR_EUNKNOWN;
   11c6e:	2501      	movs	r5, #1
    hashp = NULL;
   11c70:	2100      	movs	r1, #0
            goto done;
        }
    }

done:
    if (permanent) {
   11c72:	b174      	cbz	r4, 11c92 <imgmgr_state_set_pending+0xa8>
        imgmgr_log_confirm(rc, hashp);
   11c74:	4628      	mov	r0, r5
   11c76:	f7ff ff31 	bl	11adc <imgmgr_log_confirm>
    } else {
        imgmgr_log_pending(rc, hashp);
    }
    return rc;
}
   11c7a:	4628      	mov	r0, r5
   11c7c:	b00b      	add	sp, #44	; 0x2c
   11c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rc = MGMT_ERR_EUNKNOWN;
   11c80:	2501      	movs	r5, #1
    hashp = hash;
   11c82:	a901      	add	r1, sp, #4
   11c84:	e7f5      	b.n	11c72 <imgmgr_state_set_pending+0x88>
                rc = MGMT_ERR_EUNKNOWN;
   11c86:	2501      	movs	r5, #1
    hashp = hash;
   11c88:	a901      	add	r1, sp, #4
   11c8a:	e7f2      	b.n	11c72 <imgmgr_state_set_pending+0x88>
            rc = MGMT_ERR_EUNKNOWN;
   11c8c:	2501      	movs	r5, #1
    hashp = hash;
   11c8e:	a901      	add	r1, sp, #4
   11c90:	e7ef      	b.n	11c72 <imgmgr_state_set_pending+0x88>
        imgmgr_log_pending(rc, hashp);
   11c92:	4628      	mov	r0, r5
   11c94:	f7ff ff18 	bl	11ac8 <imgmgr_log_pending>
    return rc;
   11c98:	e7ef      	b.n	11c7a <imgmgr_state_set_pending+0x90>

00011c9a <imgmgr_state_confirm>:

int
imgmgr_state_confirm(void)
{
   11c9a:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (imgmgr_state_any_pending()) {
   11c9c:	f7ff ff83 	bl	11ba6 <imgmgr_state_any_pending>
   11ca0:	b9b8      	cbnz	r0, 11cd2 <imgmgr_state_confirm+0x38>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   11ca2:	f005 fd5c 	bl	1775e <boot_set_confirmed>
    if (rc != 0) {
   11ca6:	b108      	cbz	r0, 11cac <imgmgr_state_confirm+0x12>
        rc = MGMT_ERR_EUNKNOWN;
   11ca8:	2401      	movs	r4, #1
   11caa:	e013      	b.n	11cd4 <imgmgr_state_confirm+0x3a>
        goto done;
    }

    /* If a split app in slot 1 is active, confirm it as well. */
    if (split_app_active_get()) {
   11cac:	f005 fdb6 	bl	1781c <split_app_active_get>
   11cb0:	b138      	cbz	r0, 11cc2 <imgmgr_state_confirm+0x28>
        rc = split_write_split(SPLIT_MODE_APP);
   11cb2:	2002      	movs	r0, #2
   11cb4:	f005 fe26 	bl	17904 <split_write_split>
        if (rc != 0) {
   11cb8:	4604      	mov	r4, r0
   11cba:	b988      	cbnz	r0, 11ce0 <imgmgr_state_confirm+0x46>
        /* If logging to slot1 is enabled, we can unlock slot1 here. */
        log_fcb_slot1_unlock();
#endif
    }

    imgmgr_dfu_confirmed();
   11cbc:	f7ff fd7c 	bl	117b8 <imgmgr_dfu_confirmed>
   11cc0:	e008      	b.n	11cd4 <imgmgr_state_confirm+0x3a>
        rc = split_write_split(SPLIT_MODE_LOADER);
   11cc2:	2000      	movs	r0, #0
   11cc4:	f005 fe1e 	bl	17904 <split_write_split>
        if (rc != 0) {
   11cc8:	4604      	mov	r4, r0
   11cca:	2800      	cmp	r0, #0
   11ccc:	d0f6      	beq.n	11cbc <imgmgr_state_confirm+0x22>
            rc = MGMT_ERR_EUNKNOWN;
   11cce:	2401      	movs	r4, #1
   11cd0:	e000      	b.n	11cd4 <imgmgr_state_confirm+0x3a>
        rc = MGMT_ERR_EBADSTATE;
   11cd2:	2406      	movs	r4, #6

done:
    imgmgr_log_confirm(rc, NULL);
   11cd4:	2100      	movs	r1, #0
   11cd6:	4620      	mov	r0, r4
   11cd8:	f7ff ff00 	bl	11adc <imgmgr_log_confirm>
    return rc;
}
   11cdc:	4620      	mov	r0, r4
   11cde:	bd10      	pop	{r4, pc}
            rc = MGMT_ERR_EUNKNOWN;
   11ce0:	2401      	movs	r4, #1
   11ce2:	e7f7      	b.n	11cd4 <imgmgr_state_confirm+0x3a>

00011ce4 <imgmgr_state_read>:

int
imgmgr_state_read(struct mgmt_cbuf *cb)
{
   11ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ce8:	b09a      	sub	sp, #104	; 0x68
    CborEncoder images;
    CborEncoder image;

    any_non_bootable = 0;

    g_err |= cbor_encode_text_stringz(&cb->encoder, "images");
   11cea:	f100 070c 	add.w	r7, r0, #12
   11cee:	2206      	movs	r2, #6
   11cf0:	4961      	ldr	r1, [pc, #388]	; (11e78 <imgmgr_state_read+0x194>)
   11cf2:	4638      	mov	r0, r7
   11cf4:	f006 fc6b 	bl	185ce <cbor_encode_text_string>
   11cf8:	4604      	mov	r4, r0

    g_err |= cbor_encoder_create_array(&cb->encoder, &images,
   11cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11cfe:	a904      	add	r1, sp, #16
   11d00:	4638      	mov	r0, r7
   11d02:	f006 fc6b 	bl	185dc <cbor_encoder_create_array>
   11d06:	4304      	orrs	r4, r0
    any_non_bootable = 0;
   11d08:	f04f 0800 	mov.w	r8, #0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   11d0c:	4645      	mov	r5, r8
   11d0e:	e080      	b.n	11e12 <imgmgr_state_read+0x12e>

        if (flags & IMAGE_F_NON_BOOTABLE) {
            any_non_bootable = 1;
        }

        state_flags = imgmgr_state_flags(i);
   11d10:	4628      	mov	r0, r5
   11d12:	f7ff feed 	bl	11af0 <imgmgr_state_flags>
   11d16:	4606      	mov	r6, r0

        g_err |= cbor_encoder_create_map(&images, &image,
   11d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d1c:	4669      	mov	r1, sp
   11d1e:	a804      	add	r0, sp, #16
   11d20:	f006 fc61 	bl	185e6 <cbor_encoder_create_map>
   11d24:	4304      	orrs	r4, r0
   11d26:	2204      	movs	r2, #4
   11d28:	4954      	ldr	r1, [pc, #336]	; (11e7c <imgmgr_state_read+0x198>)
   11d2a:	4668      	mov	r0, sp
   11d2c:	f006 fc4f 	bl	185ce <cbor_encode_text_string>
                                         CborIndefiniteLength);
        g_err |= cbor_encode_text_stringz(&image, "slot");
   11d30:	4304      	orrs	r4, r0
        g_err |= cbor_encode_int(&image, i);
   11d32:	462a      	mov	r2, r5
   11d34:	17eb      	asrs	r3, r5, #31
   11d36:	4668      	mov	r0, sp
   11d38:	f006 fbce 	bl	184d8 <cbor_encode_int>
   11d3c:	4304      	orrs	r4, r0
   11d3e:	2207      	movs	r2, #7
   11d40:	494f      	ldr	r1, [pc, #316]	; (11e80 <imgmgr_state_read+0x19c>)
   11d42:	4668      	mov	r0, sp
   11d44:	f006 fc43 	bl	185ce <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "version");
   11d48:	4304      	orrs	r4, r0
        imgr_ver_str(&ver, vers_str);
   11d4a:	a908      	add	r1, sp, #32
   11d4c:	a817      	add	r0, sp, #92	; 0x5c
   11d4e:	f000 f8f5 	bl	11f3c <imgr_ver_str>
   11d52:	a808      	add	r0, sp, #32
   11d54:	f7fe fcc8 	bl	106e8 <strlen>
   11d58:	4602      	mov	r2, r0
   11d5a:	a908      	add	r1, sp, #32
   11d5c:	4668      	mov	r0, sp
   11d5e:	f006 fc36 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&image, vers_str);
   11d62:	4304      	orrs	r4, r0
   11d64:	2204      	movs	r2, #4
   11d66:	4947      	ldr	r1, [pc, #284]	; (11e84 <imgmgr_state_read+0x1a0>)
   11d68:	4668      	mov	r0, sp
   11d6a:	f006 fc30 	bl	185ce <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "hash");
   11d6e:	4304      	orrs	r4, r0
        g_err |= cbor_encode_byte_string(&image, hash, IMGMGR_HASH_LEN);
   11d70:	2220      	movs	r2, #32
   11d72:	a90f      	add	r1, sp, #60	; 0x3c
   11d74:	4668      	mov	r0, sp
   11d76:	f006 fc23 	bl	185c0 <cbor_encode_byte_string>
   11d7a:	4304      	orrs	r4, r0
   11d7c:	2208      	movs	r2, #8
   11d7e:	4942      	ldr	r1, [pc, #264]	; (11e88 <imgmgr_state_read+0x1a4>)
   11d80:	4668      	mov	r0, sp
   11d82:	f006 fc24 	bl	185ce <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "bootable");
   11d86:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   11d88:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11d8a:	f013 0f10 	tst.w	r3, #16
   11d8e:	bf0c      	ite	eq
   11d90:	2101      	moveq	r1, #1
   11d92:	2100      	movne	r1, #0
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API CborError cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11d94:	3114      	adds	r1, #20
   11d96:	4668      	mov	r0, sp
   11d98:	f006 fbe4 	bl	18564 <cbor_encode_simple_value>
   11d9c:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11d9e:	2207      	movs	r2, #7
   11da0:	493a      	ldr	r1, [pc, #232]	; (11e8c <imgmgr_state_read+0x1a8>)
   11da2:	4668      	mov	r0, sp
   11da4:	f006 fc13 	bl	185ce <cbor_encode_text_string>

        g_err |= cbor_encode_text_stringz(&image, "pending");
   11da8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11daa:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11dae:	3114      	adds	r1, #20
   11db0:	4668      	mov	r0, sp
   11db2:	f006 fbd7 	bl	18564 <cbor_encode_simple_value>
   11db6:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11db8:	2209      	movs	r2, #9
   11dba:	4935      	ldr	r1, [pc, #212]	; (11e90 <imgmgr_state_read+0x1ac>)
   11dbc:	4668      	mov	r0, sp
   11dbe:	f006 fc06 	bl	185ce <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_PENDING);

        g_err |= cbor_encode_text_stringz(&image, "confirmed");
   11dc2:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11dc4:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11dc8:	3114      	adds	r1, #20
   11dca:	4668      	mov	r0, sp
   11dcc:	f006 fbca 	bl	18564 <cbor_encode_simple_value>
   11dd0:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11dd2:	2206      	movs	r2, #6
   11dd4:	492f      	ldr	r1, [pc, #188]	; (11e94 <imgmgr_state_read+0x1b0>)
   11dd6:	4668      	mov	r0, sp
   11dd8:	f006 fbf9 	bl	185ce <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_CONFIRMED);

        g_err |= cbor_encode_text_stringz(&image, "active");
   11ddc:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11dde:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11de2:	3114      	adds	r1, #20
   11de4:	4668      	mov	r0, sp
   11de6:	f006 fbbd 	bl	18564 <cbor_encode_simple_value>
   11dea:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11dec:	2209      	movs	r2, #9
   11dee:	492a      	ldr	r1, [pc, #168]	; (11e98 <imgmgr_state_read+0x1b4>)
   11df0:	4668      	mov	r0, sp
   11df2:	f006 fbec 	bl	185ce <cbor_encode_text_string>
                                     state_flags & IMGMGR_STATE_F_ACTIVE);

        g_err |= cbor_encode_text_stringz(&image, "permanent");
   11df6:	4304      	orrs	r4, r0
        g_err |= cbor_encode_boolean(&image,
   11df8:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   11dfc:	3114      	adds	r1, #20
   11dfe:	4668      	mov	r0, sp
   11e00:	f006 fbb0 	bl	18564 <cbor_encode_simple_value>
   11e04:	4304      	orrs	r4, r0
                                     state_flags & IMGMGR_STATE_F_PERMANENT);

        g_err |= cbor_encoder_close_container(&images, &image);
   11e06:	4669      	mov	r1, sp
   11e08:	a804      	add	r0, sp, #16
   11e0a:	f006 fbfa 	bl	18602 <cbor_encoder_close_container>
   11e0e:	4304      	orrs	r4, r0
    for (i = 0; i < 2; i++) {
   11e10:	3501      	adds	r5, #1
   11e12:	2d01      	cmp	r5, #1
   11e14:	dc0f      	bgt.n	11e36 <imgmgr_state_read+0x152>
        rc = imgr_read_info(i, &ver, hash, &flags);
   11e16:	ab19      	add	r3, sp, #100	; 0x64
   11e18:	aa0f      	add	r2, sp, #60	; 0x3c
   11e1a:	a917      	add	r1, sp, #92	; 0x5c
   11e1c:	4628      	mov	r0, r5
   11e1e:	f7ff f993 	bl	11148 <imgr_read_info>
        if (rc != 0) {
   11e22:	2800      	cmp	r0, #0
   11e24:	d1f4      	bne.n	11e10 <imgmgr_state_read+0x12c>
        if (flags & IMAGE_F_NON_BOOTABLE) {
   11e26:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11e28:	f013 0f10 	tst.w	r3, #16
   11e2c:	f43f af70 	beq.w	11d10 <imgmgr_state_read+0x2c>
            any_non_bootable = 1;
   11e30:	f04f 0801 	mov.w	r8, #1
   11e34:	e76c      	b.n	11d10 <imgmgr_state_read+0x2c>
    }

    g_err |= cbor_encoder_close_container(&cb->encoder, &images);
   11e36:	a904      	add	r1, sp, #16
   11e38:	4638      	mov	r0, r7
   11e3a:	f006 fbe2 	bl	18602 <cbor_encoder_close_container>
   11e3e:	4304      	orrs	r4, r0

    if (any_non_bootable) {
   11e40:	f1b8 0f00 	cmp.w	r8, #0
   11e44:	d112      	bne.n	11e6c <imgmgr_state_read+0x188>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11e46:	220b      	movs	r2, #11
   11e48:	4914      	ldr	r1, [pc, #80]	; (11e9c <imgmgr_state_read+0x1b8>)
   11e4a:	4638      	mov	r0, r7
   11e4c:	f006 fbbf 	bl	185ce <cbor_encode_text_string>
        split_status = split_check_status();
    } else {
        split_status = SPLIT_STATUS_INVALID;
    }

    g_err |= cbor_encode_text_stringz(&cb->encoder, "splitStatus");
   11e50:	4304      	orrs	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, split_status);
   11e52:	4642      	mov	r2, r8
   11e54:	ea4f 73e8 	mov.w	r3, r8, asr #31
   11e58:	4638      	mov	r0, r7
   11e5a:	f006 fb3d 	bl	184d8 <cbor_encode_int>

    if (g_err) {
   11e5e:	ea54 0300 	orrs.w	r3, r4, r0
   11e62:	d107      	bne.n	11e74 <imgmgr_state_read+0x190>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   11e64:	2000      	movs	r0, #0
}
   11e66:	b01a      	add	sp, #104	; 0x68
   11e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        split_status = split_check_status();
   11e6c:	f005 fcb4 	bl	177d8 <split_check_status>
   11e70:	4680      	mov	r8, r0
   11e72:	e7e8      	b.n	11e46 <imgmgr_state_read+0x162>
        return MGMT_ERR_ENOMEM;
   11e74:	2002      	movs	r0, #2
   11e76:	e7f6      	b.n	11e66 <imgmgr_state_read+0x182>
   11e78:	00026fa4 	.word	0x00026fa4
   11e7c:	00026fac 	.word	0x00026fac
   11e80:	00026fb4 	.word	0x00026fb4
   11e84:	00026fbc 	.word	0x00026fbc
   11e88:	00026fc4 	.word	0x00026fc4
   11e8c:	00026fd0 	.word	0x00026fd0
   11e90:	00026fd8 	.word	0x00026fd8
   11e94:	00026fe4 	.word	0x00026fe4
   11e98:	00026fec 	.word	0x00026fec
   11e9c:	00026ff8 	.word	0x00026ff8

00011ea0 <imgmgr_state_write>:

int
imgmgr_state_write(struct mgmt_cbuf *cb)
{
   11ea0:	b510      	push	{r4, lr}
   11ea2:	b0ae      	sub	sp, #184	; 0xb8
   11ea4:	4604      	mov	r4, r0
    uint8_t hash[IMGMGR_HASH_LEN];
    size_t hash_len = 0;
   11ea6:	2100      	movs	r1, #0
   11ea8:	9125      	str	r1, [sp, #148]	; 0x94
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   11eaa:	2290      	movs	r2, #144	; 0x90
   11eac:	4668      	mov	r0, sp
   11eae:	f7fe fbe4 	bl	1067a <memset>
   11eb2:	4b20      	ldr	r3, [pc, #128]	; (11f34 <imgmgr_state_write+0x94>)
   11eb4:	9300      	str	r3, [sp, #0]
   11eb6:	2303      	movs	r3, #3
   11eb8:	f88d 3004 	strb.w	r3, [sp, #4]
   11ebc:	ab26      	add	r3, sp, #152	; 0x98
   11ebe:	9302      	str	r3, [sp, #8]
   11ec0:	ab25      	add	r3, sp, #148	; 0x94
   11ec2:	9303      	str	r3, [sp, #12]
   11ec4:	2320      	movs	r3, #32
   11ec6:	930a      	str	r3, [sp, #40]	; 0x28
   11ec8:	4b1b      	ldr	r3, [pc, #108]	; (11f38 <imgmgr_state_write+0x98>)
   11eca:	930c      	str	r3, [sp, #48]	; 0x30
   11ecc:	2305      	movs	r3, #5
   11ece:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   11ed2:	f10d 0393 	add.w	r3, sp, #147	; 0x93
   11ed6:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    rc = cbor_read_object(&cb->it, write_attr);
   11ed8:	4669      	mov	r1, sp
   11eda:	f104 001c 	add.w	r0, r4, #28
   11ede:	f006 f98f 	bl	18200 <cbor_read_object>
    if (rc != 0) {
   11ee2:	bb10      	cbnz	r0, 11f2a <imgmgr_state_write+0x8a>
   11ee4:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   11ee6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   11ee8:	b97a      	cbnz	r2, 11f0a <imgmgr_state_write+0x6a>
        if (confirm) {
   11eea:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   11eee:	b152      	cbz	r2, 11f06 <imgmgr_state_write+0x66>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   11ef0:	f89d 2093 	ldrb.w	r2, [sp, #147]	; 0x93
   11ef4:	b992      	cbnz	r2, 11f1c <imgmgr_state_write+0x7c>
        /* Confirm current setup. */
        rc = imgmgr_state_confirm();
    } else {
        rc = imgmgr_state_set_pending(slot, confirm);
   11ef6:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   11efa:	4618      	mov	r0, r3
   11efc:	f7ff fe75 	bl	11bea <imgmgr_state_set_pending>
    }
    if (rc != 0) {
   11f00:	b178      	cbz	r0, 11f22 <imgmgr_state_write+0x82>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   11f02:	b02e      	add	sp, #184	; 0xb8
   11f04:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   11f06:	2003      	movs	r0, #3
   11f08:	e7fb      	b.n	11f02 <imgmgr_state_write+0x62>
        slot = imgr_find_by_hash(hash, NULL);
   11f0a:	2100      	movs	r1, #0
   11f0c:	a826      	add	r0, sp, #152	; 0x98
   11f0e:	f7ff f9c1 	bl	11294 <imgr_find_by_hash>
        if (slot < 0) {
   11f12:	1e03      	subs	r3, r0, #0
   11f14:	db0b      	blt.n	11f2e <imgmgr_state_write+0x8e>
    if (slot == 0 && confirm) {
   11f16:	2b00      	cmp	r3, #0
   11f18:	d1ed      	bne.n	11ef6 <imgmgr_state_write+0x56>
   11f1a:	e7e9      	b.n	11ef0 <imgmgr_state_write+0x50>
        rc = imgmgr_state_confirm();
   11f1c:	f7ff febd 	bl	11c9a <imgmgr_state_confirm>
   11f20:	e7ee      	b.n	11f00 <imgmgr_state_write+0x60>
    rc = imgmgr_state_read(cb);
   11f22:	4620      	mov	r0, r4
   11f24:	f7ff fede 	bl	11ce4 <imgmgr_state_read>
    if (rc != 0) {
   11f28:	e7eb      	b.n	11f02 <imgmgr_state_write+0x62>
        return MGMT_ERR_EINVAL;
   11f2a:	2003      	movs	r0, #3
   11f2c:	e7e9      	b.n	11f02 <imgmgr_state_write+0x62>
            return MGMT_ERR_EINVAL;
   11f2e:	2003      	movs	r0, #3
   11f30:	e7e7      	b.n	11f02 <imgmgr_state_write+0x62>
   11f32:	bf00      	nop
   11f34:	00026fbc 	.word	0x00026fbc
   11f38:	00026ef8 	.word	0x00026ef8

00011f3c <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   11f3c:	b500      	push	{lr}
   11f3e:	b083      	sub	sp, #12
   11f40:	4602      	mov	r2, r0
   11f42:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   11f44:	6853      	ldr	r3, [r2, #4]
   11f46:	b153      	cbz	r3, 11f5e <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   11f48:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   11f4a:	9301      	str	r3, [sp, #4]
   11f4c:	9100      	str	r1, [sp, #0]
   11f4e:	7853      	ldrb	r3, [r2, #1]
   11f50:	7812      	ldrb	r2, [r2, #0]
   11f52:	4907      	ldr	r1, [pc, #28]	; (11f70 <imgr_ver_str+0x34>)
   11f54:	f00f fff3 	bl	21f3e <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   11f58:	b003      	add	sp, #12
   11f5a:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   11f5e:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   11f60:	9300      	str	r3, [sp, #0]
   11f62:	7853      	ldrb	r3, [r2, #1]
   11f64:	7812      	ldrb	r2, [r2, #0]
   11f66:	4903      	ldr	r1, [pc, #12]	; (11f74 <imgr_ver_str+0x38>)
   11f68:	f00f ffe9 	bl	21f3e <sprintf>
   11f6c:	e7f4      	b.n	11f58 <imgr_ver_str+0x1c>
   11f6e:	bf00      	nop
   11f70:	00027004 	.word	0x00027004
   11f74:	00027014 	.word	0x00027014

00011f78 <mgmt_group_list_lock>:
static STAILQ_HEAD(, mgmt_group) mgmt_group_list =
    STAILQ_HEAD_INITIALIZER(mgmt_group_list);

static int
mgmt_group_list_lock(void)
{
   11f78:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   11f7a:	f7f7 f9dd 	bl	9338 <os_started>
   11f7e:	b900      	cbnz	r0, 11f82 <mgmt_group_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   11f80:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&mgmt_group_lock, OS_WAIT_FOREVER);
   11f82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11f86:	4802      	ldr	r0, [pc, #8]	; (11f90 <mgmt_group_list_lock+0x18>)
   11f88:	f7f8 fec2 	bl	ad10 <os_mutex_pend>
    if (rc != 0) {
   11f8c:	e7f8      	b.n	11f80 <mgmt_group_list_lock+0x8>
   11f8e:	bf00      	nop
   11f90:	2000409c 	.word	0x2000409c

00011f94 <mgmt_group_list_unlock>:

int
mgmt_group_list_unlock(void)
{
   11f94:	b508      	push	{r3, lr}
    int rc;

    if (!os_started()) {
   11f96:	f7f7 f9cf 	bl	9338 <os_started>
   11f9a:	b900      	cbnz	r0, 11f9e <mgmt_group_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   11f9c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&mgmt_group_lock);
   11f9e:	4802      	ldr	r0, [pc, #8]	; (11fa8 <mgmt_group_list_unlock+0x14>)
   11fa0:	f7f8 fe5a 	bl	ac58 <os_mutex_release>
    if (rc != 0) {
   11fa4:	e7fa      	b.n	11f9c <mgmt_group_list_unlock+0x8>
   11fa6:	bf00      	nop
   11fa8:	2000409c 	.word	0x2000409c

00011fac <mgmt_find_group>:
    return (rc);
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id)
{
   11fac:	b538      	push	{r3, r4, r5, lr}
   11fae:	4605      	mov	r5, r0
    struct mgmt_group *group;
    int rc;

    group = NULL;

    rc = mgmt_group_list_lock();
   11fb0:	f7ff ffe2 	bl	11f78 <mgmt_group_list_lock>
    if (rc != 0) {
   11fb4:	b960      	cbnz	r0, 11fd0 <mgmt_find_group+0x24>
        goto err;
    }

    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   11fb6:	4b08      	ldr	r3, [pc, #32]	; (11fd8 <mgmt_find_group+0x2c>)
   11fb8:	681c      	ldr	r4, [r3, #0]
   11fba:	b124      	cbz	r4, 11fc6 <mgmt_find_group+0x1a>
        if (group->mg_group_id == group_id) {
   11fbc:	88e3      	ldrh	r3, [r4, #6]
   11fbe:	42ab      	cmp	r3, r5
   11fc0:	d001      	beq.n	11fc6 <mgmt_find_group+0x1a>
    STAILQ_FOREACH(group, &mgmt_group_list, mg_next) {
   11fc2:	68a4      	ldr	r4, [r4, #8]
   11fc4:	e7f9      	b.n	11fba <mgmt_find_group+0xe>
            break;
        }
    }

    rc = mgmt_group_list_unlock();
   11fc6:	f7ff ffe5 	bl	11f94 <mgmt_group_list_unlock>
    if (rc != 0) {
   11fca:	b918      	cbnz	r0, 11fd4 <mgmt_find_group+0x28>
    }

    return (group);
err:
    return (NULL);
}
   11fcc:	4620      	mov	r0, r4
   11fce:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   11fd0:	2400      	movs	r4, #0
   11fd2:	e7fb      	b.n	11fcc <mgmt_find_group+0x20>
   11fd4:	2400      	movs	r4, #0
   11fd6:	e7f9      	b.n	11fcc <mgmt_find_group+0x20>
   11fd8:	20000284 	.word	0x20000284

00011fdc <mgmt_group_register>:
{
   11fdc:	b510      	push	{r4, lr}
   11fde:	4604      	mov	r4, r0
    rc = mgmt_group_list_lock();
   11fe0:	f7ff ffca 	bl	11f78 <mgmt_group_list_lock>
    if (rc != 0) {
   11fe4:	b100      	cbz	r0, 11fe8 <mgmt_group_register+0xc>
}
   11fe6:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_TAIL(&mgmt_group_list, group, mg_next);
   11fe8:	60a0      	str	r0, [r4, #8]
   11fea:	4b04      	ldr	r3, [pc, #16]	; (11ffc <mgmt_group_register+0x20>)
   11fec:	685a      	ldr	r2, [r3, #4]
   11fee:	6014      	str	r4, [r2, #0]
   11ff0:	3408      	adds	r4, #8
   11ff2:	605c      	str	r4, [r3, #4]
    rc = mgmt_group_list_unlock();
   11ff4:	f7ff ffce 	bl	11f94 <mgmt_group_list_unlock>
    if (rc != 0) {
   11ff8:	e7f5      	b.n	11fe6 <mgmt_group_register+0xa>
   11ffa:	bf00      	nop
   11ffc:	20000284 	.word	0x20000284

00012000 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t handler_id)
{
   12000:	b510      	push	{r4, lr}
   12002:	460c      	mov	r4, r1
    struct mgmt_group *group;
    const struct mgmt_handler *handler;

    group = mgmt_find_group(group_id);
   12004:	f7ff ffd2 	bl	11fac <mgmt_find_group>
    if (!group) {
   12008:	4603      	mov	r3, r0
   1200a:	b128      	cbz	r0, 12018 <mgmt_find_handler+0x18>
        goto err;
    }

    if (handler_id >= group->mg_handlers_count) {
   1200c:	8882      	ldrh	r2, [r0, #4]
   1200e:	42a2      	cmp	r2, r4
   12010:	d904      	bls.n	1201c <mgmt_find_handler+0x1c>
        goto err;
    }

    handler = &group->mg_handlers[handler_id];
   12012:	6803      	ldr	r3, [r0, #0]
   12014:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

    return (handler);
err:
    return (NULL);
}
   12018:	4618      	mov	r0, r3
   1201a:	bd10      	pop	{r4, pc}
    return (NULL);
   1201c:	2300      	movs	r3, #0
   1201e:	e7fb      	b.n	12018 <mgmt_find_handler+0x18>

00012020 <mgmt_cbuf_setoerr>:

int
mgmt_cbuf_setoerr(struct mgmt_cbuf *cb, int errcode)
{
   12020:	b538      	push	{r3, r4, r5, lr}
   12022:	460d      	mov	r5, r1
    int rc;

    rc = cbor_encode_text_stringz(&cb->encoder, "rc");
   12024:	f100 040c 	add.w	r4, r0, #12
   12028:	2202      	movs	r2, #2
   1202a:	4906      	ldr	r1, [pc, #24]	; (12044 <mgmt_cbuf_setoerr+0x24>)
   1202c:	4620      	mov	r0, r4
   1202e:	f006 face 	bl	185ce <cbor_encode_text_string>
    if (rc != 0) {
   12032:	b100      	cbz	r0, 12036 <mgmt_cbuf_setoerr+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12034:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&cb->encoder, errcode);
   12036:	462a      	mov	r2, r5
   12038:	17eb      	asrs	r3, r5, #31
   1203a:	4620      	mov	r0, r4
   1203c:	f006 fa4c 	bl	184d8 <cbor_encode_int>
    if (rc != 0) {
   12040:	e7f8      	b.n	12034 <mgmt_cbuf_setoerr+0x14>
   12042:	bf00      	nop
   12044:	00026da4 	.word	0x00026da4

00012048 <nmgr_rsp_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing response fragment.
 */
static struct os_mbuf *
nmgr_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   12048:	b538      	push	{r3, r4, r5, lr}
   1204a:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1204c:	7949      	ldrb	r1, [r1, #5]
   1204e:	3908      	subs	r1, #8
   12050:	b289      	uxth	r1, r1
   12052:	f7f7 fdb1 	bl	9bb8 <os_msys_get_pkthdr>
    if (frag != NULL) {
   12056:	4605      	mov	r5, r0
   12058:	b130      	cbz	r0, 12068 <nmgr_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragment mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1205a:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1205c:	3a08      	subs	r2, #8
   1205e:	f104 0118 	add.w	r1, r4, #24
   12062:	3018      	adds	r0, #24
   12064:	f7fe fafc 	bl	10660 <memcpy>
    }

    return frag;
}
   12068:	4628      	mov	r0, r5
   1206a:	bd38      	pop	{r3, r4, r5, pc}

0001206c <nmgr_init_rsp>:
{
   1206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1206e:	4606      	mov	r6, r0
   12070:	460d      	mov	r5, r1
    hdr = (struct nmgr_hdr *) os_mbuf_extend(m, sizeof(struct nmgr_hdr));
   12072:	2108      	movs	r1, #8
   12074:	f7f8 fdb8 	bl	abe8 <os_mbuf_extend>
    if (!hdr) {
   12078:	4604      	mov	r4, r0
   1207a:	b318      	cbz	r0, 120c4 <nmgr_init_rsp+0x58>
    memcpy(hdr, src, sizeof(*hdr));
   1207c:	682a      	ldr	r2, [r5, #0]
   1207e:	686b      	ldr	r3, [r5, #4]
   12080:	6002      	str	r2, [r0, #0]
   12082:	6043      	str	r3, [r0, #4]
    hdr->nh_len = 0;
   12084:	2300      	movs	r3, #0
   12086:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   12088:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   1208a:	782b      	ldrb	r3, [r5, #0]
   1208c:	f013 0f07 	tst.w	r3, #7
   12090:	d11a      	bne.n	120c8 <nmgr_init_rsp+0x5c>
   12092:	2201      	movs	r2, #1
   12094:	7823      	ldrb	r3, [r4, #0]
   12096:	f362 0302 	bfi	r3, r2, #0, #3
   1209a:	7023      	strb	r3, [r4, #0]
    hdr->nh_group = src->nh_group;
   1209c:	88ab      	ldrh	r3, [r5, #4]
   1209e:	80a3      	strh	r3, [r4, #4]
    hdr->nh_seq = src->nh_seq;
   120a0:	79ab      	ldrb	r3, [r5, #6]
   120a2:	71a3      	strb	r3, [r4, #6]
    hdr->nh_id = src->nh_id;
   120a4:	79eb      	ldrb	r3, [r5, #7]
   120a6:	71e3      	strb	r3, [r4, #7]
    cbor_mbuf_writer_init(&nmgr_task_cbuf.writer, m);
   120a8:	4d08      	ldr	r5, [pc, #32]	; (120cc <nmgr_init_rsp+0x60>)
   120aa:	f105 072c 	add.w	r7, r5, #44	; 0x2c
   120ae:	4631      	mov	r1, r6
   120b0:	4638      	mov	r0, r7
   120b2:	f006 f937 	bl	18324 <cbor_mbuf_writer_init>
    cbor_encoder_init(&nmgr_task_cbuf.n_b.encoder, &nmgr_task_cbuf.writer.enc, 0);
   120b6:	2200      	movs	r2, #0
   120b8:	4639      	mov	r1, r7
   120ba:	f105 000c 	add.w	r0, r5, #12
   120be:	f006 f9c6 	bl	1844e <cbor_encoder_init>
    nmgr_task_cbuf.n_out_m = m;
   120c2:	65ee      	str	r6, [r5, #92]	; 0x5c
}
   120c4:	4620      	mov	r0, r4
   120c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdr->nh_op = (src->nh_op == NMGR_OP_READ) ? NMGR_OP_READ_RSP :
   120c8:	2203      	movs	r2, #3
   120ca:	e7e3      	b.n	12094 <nmgr_init_rsp+0x28>
   120cc:	200040ac 	.word	0x200040ac

000120d0 <nmgr_rsp_tx>:
 * reason for this is to allow the caller to reuse the mbuf for an error
 * response.
 */
static int
nmgr_rsp_tx(struct nmgr_transport *nt, struct os_mbuf **rsp, uint16_t mtu)
{
   120d0:	b570      	push	{r4, r5, r6, lr}
   120d2:	4605      	mov	r5, r0
   120d4:	460c      	mov	r4, r1
   120d6:	4616      	mov	r6, r2
    struct os_mbuf *frag;
    int rc;

    while (*rsp != NULL) {
   120d8:	6823      	ldr	r3, [r4, #0]
   120da:	b16b      	cbz	r3, 120f8 <nmgr_rsp_tx+0x28>
        frag = mem_split_frag(rsp, mtu, nmgr_rsp_frag_alloc, *rsp);
   120dc:	4a08      	ldr	r2, [pc, #32]	; (12100 <nmgr_rsp_tx+0x30>)
   120de:	4631      	mov	r1, r6
   120e0:	4620      	mov	r0, r4
   120e2:	f000 fc2f 	bl	12944 <mem_split_frag>
        if (frag == NULL) {
   120e6:	4601      	mov	r1, r0
   120e8:	b140      	cbz	r0, 120fc <nmgr_rsp_tx+0x2c>
            return MGMT_ERR_ENOMEM;
        }

        rc = nt->nt_output(nt, frag);
   120ea:	69ab      	ldr	r3, [r5, #24]
   120ec:	4628      	mov	r0, r5
   120ee:	4798      	blx	r3
        if (rc != 0) {
   120f0:	2800      	cmp	r0, #0
   120f2:	d0f1      	beq.n	120d8 <nmgr_rsp_tx+0x8>
            /* Output function already freed mbuf. */
            return MGMT_ERR_EUNKNOWN;
   120f4:	2001      	movs	r0, #1
   120f6:	e000      	b.n	120fa <nmgr_rsp_tx+0x2a>
        }
    }

    return MGMT_ERR_EOK;
   120f8:	2000      	movs	r0, #0
}
   120fa:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   120fc:	2002      	movs	r0, #2
   120fe:	e7fc      	b.n	120fa <nmgr_rsp_tx+0x2a>
   12100:	00012049 	.word	0x00012049

00012104 <nmgr_send_err_rsp>:
{
   12104:	b5f0      	push	{r4, r5, r6, r7, lr}
   12106:	b085      	sub	sp, #20
   12108:	4606      	mov	r6, r0
   1210a:	460c      	mov	r4, r1
   1210c:	461d      	mov	r5, r3
    hdr = nmgr_init_rsp(m, hdr);
   1210e:	4611      	mov	r1, r2
   12110:	4620      	mov	r0, r4
   12112:	f7ff ffab 	bl	1206c <nmgr_init_rsp>
    if (!hdr) {
   12116:	b148      	cbz	r0, 1212c <nmgr_send_err_rsp+0x28>
   12118:	4607      	mov	r7, r0
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &map,
   1211a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1211e:	4669      	mov	r1, sp
   12120:	4811      	ldr	r0, [pc, #68]	; (12168 <nmgr_send_err_rsp+0x64>)
   12122:	f006 fa60 	bl	185e6 <cbor_encoder_create_map>
    if (rc != 0) {
   12126:	b128      	cbz	r0, 12134 <nmgr_send_err_rsp+0x30>
}
   12128:	b005      	add	sp, #20
   1212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(m);
   1212c:	4620      	mov	r0, r4
   1212e:	f7f8 fbe0 	bl	a8f2 <os_mbuf_free_chain>
        return;
   12132:	e7f9      	b.n	12128 <nmgr_send_err_rsp+0x24>
    rc = mgmt_cbuf_setoerr(&nmgr_task_cbuf.n_b, status);
   12134:	4629      	mov	r1, r5
   12136:	480d      	ldr	r0, [pc, #52]	; (1216c <nmgr_send_err_rsp+0x68>)
   12138:	f7ff ff72 	bl	12020 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1213c:	2800      	cmp	r0, #0
   1213e:	d1f3      	bne.n	12128 <nmgr_send_err_rsp+0x24>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder, &map);
   12140:	4669      	mov	r1, sp
   12142:	4809      	ldr	r0, [pc, #36]	; (12168 <nmgr_send_err_rsp+0x64>)
   12144:	f006 fa5d 	bl	18602 <cbor_encoder_close_container>
    if (rc != 0) {
   12148:	2800      	cmp	r0, #0
   1214a:	d1ed      	bne.n	12128 <nmgr_send_err_rsp+0x24>
{   return encoder->writer->bytes_written; }
   1214c:	4907      	ldr	r1, [pc, #28]	; (1216c <nmgr_send_err_rsp+0x68>)
   1214e:	68cb      	ldr	r3, [r1, #12]
   12150:	685a      	ldr	r2, [r3, #4]
        htons(cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder));
   12152:	0213      	lsls	r3, r2, #8
   12154:	b29b      	uxth	r3, r3
   12156:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1215a:	4313      	orrs	r3, r2
    hdr->nh_len =
   1215c:	807b      	strh	r3, [r7, #2]
    nt->nt_output(nt, nmgr_task_cbuf.n_out_m);
   1215e:	69b3      	ldr	r3, [r6, #24]
   12160:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
   12162:	4630      	mov	r0, r6
   12164:	4798      	blx	r3
   12166:	e7df      	b.n	12128 <nmgr_send_err_rsp+0x24>
   12168:	200040b8 	.word	0x200040b8
   1216c:	200040ac 	.word	0x200040ac

00012170 <nmgr_handle_req>:

static void
nmgr_handle_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   12170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12174:	b088      	sub	sp, #32
   12176:	4606      	mov	r6, r0
   12178:	460c      	mov	r4, r1
    uint16_t mtu;
    int rc;

    rsp_hdr = NULL;

    rsp = os_msys_get_pkthdr(512, OS_MBUF_USRHDR_LEN(req));
   1217a:	7949      	ldrb	r1, [r1, #5]
   1217c:	3908      	subs	r1, #8
   1217e:	b289      	uxth	r1, r1
   12180:	f44f 7000 	mov.w	r0, #512	; 0x200
   12184:	f7f7 fd18 	bl	9bb8 <os_msys_get_pkthdr>
   12188:	9007      	str	r0, [sp, #28]
    if (!rsp) {
   1218a:	b168      	cbz	r0, 121a8 <nmgr_handle_req+0x38>
        rsp = req;
        req = NULL;
        goto err;
    }

    mtu = nt->nt_get_mtu(req);
   1218c:	69f3      	ldr	r3, [r6, #28]
   1218e:	4620      	mov	r0, r4
   12190:	4798      	blx	r3
    if (mtu == 0) {
   12192:	4605      	mov	r5, r0
   12194:	bb08      	cbnz	r0, 121da <nmgr_handle_req+0x6a>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
    os_mbuf_free_chain(req);
    return;

err_norsp:
    os_mbuf_free_chain(rsp);
   12196:	9807      	ldr	r0, [sp, #28]
   12198:	f7f8 fbab 	bl	a8f2 <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   1219c:	4620      	mov	r0, r4
   1219e:	f7f8 fba8 	bl	a8f2 <os_mbuf_free_chain>
    return;
}
   121a2:	b008      	add	sp, #32
   121a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   121a8:	4605      	mov	r5, r0
        rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   121aa:	ab01      	add	r3, sp, #4
   121ac:	2208      	movs	r2, #8
   121ae:	2100      	movs	r1, #0
   121b0:	4620      	mov	r0, r4
   121b2:	f7f8 fc14 	bl	a9de <os_mbuf_copydata>
        if (rc < 0) {
   121b6:	1e07      	subs	r7, r0, #0
   121b8:	dbed      	blt.n	12196 <nmgr_handle_req+0x26>
        rsp = req;
   121ba:	9407      	str	r4, [sp, #28]
        req = NULL;
   121bc:	462c      	mov	r4, r5
    os_mbuf_adj(rsp, OS_MBUF_PKTLEN(rsp));
   121be:	9807      	ldr	r0, [sp, #28]
   121c0:	8a01      	ldrh	r1, [r0, #16]
   121c2:	f7f8 fc39 	bl	aa38 <os_mbuf_adj>
    nmgr_send_err_rsp(nt, rsp, &hdr, rc);
   121c6:	463b      	mov	r3, r7
   121c8:	aa01      	add	r2, sp, #4
   121ca:	9907      	ldr	r1, [sp, #28]
   121cc:	4630      	mov	r0, r6
   121ce:	f7ff ff99 	bl	12104 <nmgr_send_err_rsp>
    os_mbuf_free_chain(req);
   121d2:	4620      	mov	r0, r4
   121d4:	f7f8 fb8d 	bl	a8f2 <os_mbuf_free_chain>
    return;
   121d8:	e7e3      	b.n	121a2 <nmgr_handle_req+0x32>
    memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(req), OS_MBUF_USRHDR_LEN(req));
   121da:	7962      	ldrb	r2, [r4, #5]
   121dc:	3a08      	subs	r2, #8
   121de:	f104 0118 	add.w	r1, r4, #24
   121e2:	9807      	ldr	r0, [sp, #28]
   121e4:	3018      	adds	r0, #24
   121e6:	f7fe fa3b 	bl	10660 <memcpy>
    rc = os_mbuf_copydata(req, 0, sizeof(hdr), &hdr);
   121ea:	ab01      	add	r3, sp, #4
   121ec:	2208      	movs	r2, #8
   121ee:	2100      	movs	r1, #0
   121f0:	4620      	mov	r0, r4
   121f2:	f7f8 fbf4 	bl	a9de <os_mbuf_copydata>
    if (rc < 0) {
   121f6:	2800      	cmp	r0, #0
   121f8:	dbcd      	blt.n	12196 <nmgr_handle_req+0x26>
    hdr.nh_len = ntohs(hdr.nh_len);
   121fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   121fe:	0213      	lsls	r3, r2, #8
   12200:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   12204:	f8ad 3006 	strh.w	r3, [sp, #6]
    handler = mgmt_find_handler(ntohs(hdr.nh_group), hdr.nh_id);
   12208:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1220c:	0218      	lsls	r0, r3, #8
   1220e:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   12212:	f89d 100b 	ldrb.w	r1, [sp, #11]
   12216:	b280      	uxth	r0, r0
   12218:	f7ff fef2 	bl	12000 <mgmt_find_handler>
    if (!handler) {
   1221c:	4680      	mov	r8, r0
   1221e:	2800      	cmp	r0, #0
   12220:	d062      	beq.n	122e8 <nmgr_handle_req+0x178>
    rsp_hdr = nmgr_init_rsp(rsp, &hdr);
   12222:	a901      	add	r1, sp, #4
   12224:	9807      	ldr	r0, [sp, #28]
   12226:	f7ff ff21 	bl	1206c <nmgr_init_rsp>
    if (!rsp_hdr) {
   1222a:	4681      	mov	r9, r0
   1222c:	2800      	cmp	r0, #0
   1222e:	d0b2      	beq.n	12196 <nmgr_handle_req+0x26>
    cbor_mbuf_reader_init(&nmgr_task_cbuf.reader, req, sizeof(hdr));
   12230:	4f2f      	ldr	r7, [pc, #188]	; (122f0 <nmgr_handle_req+0x180>)
   12232:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   12236:	2208      	movs	r2, #8
   12238:	4621      	mov	r1, r4
   1223a:	4650      	mov	r0, sl
   1223c:	f006 f83a 	bl	182b4 <cbor_mbuf_reader_init>
    cbor_parser_init(&nmgr_task_cbuf.reader.r, 0,
   12240:	f107 031c 	add.w	r3, r7, #28
   12244:	463a      	mov	r2, r7
   12246:	2100      	movs	r1, #0
   12248:	4650      	mov	r0, sl
   1224a:	f006 fc6a 	bl	18b22 <cbor_parser_init>
    rc = cbor_encoder_create_map(&nmgr_task_cbuf.n_b.encoder, &payload_enc,
   1224e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12252:	a903      	add	r1, sp, #12
   12254:	f107 000c 	add.w	r0, r7, #12
   12258:	f006 f9c5 	bl	185e6 <cbor_encoder_create_map>
    if (rc != 0) {
   1225c:	2800      	cmp	r0, #0
   1225e:	d145      	bne.n	122ec <nmgr_handle_req+0x17c>
    if (hdr.nh_op == NMGR_OP_READ) {
   12260:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12264:	f013 0307 	ands.w	r3, r3, #7
   12268:	d10e      	bne.n	12288 <nmgr_handle_req+0x118>
        if (handler->mh_read) {
   1226a:	f8d8 3000 	ldr.w	r3, [r8]
   1226e:	b1a3      	cbz	r3, 1229a <nmgr_handle_req+0x12a>
            rc = handler->mh_read(&nmgr_task_cbuf.n_b);
   12270:	4638      	mov	r0, r7
   12272:	4798      	blx	r3
   12274:	4607      	mov	r7, r0
    if (rc != 0) {
   12276:	2f00      	cmp	r7, #0
   12278:	d1a1      	bne.n	121be <nmgr_handle_req+0x4e>
    rc = cbor_encoder_close_container(&nmgr_task_cbuf.n_b.encoder,
   1227a:	a903      	add	r1, sp, #12
   1227c:	481d      	ldr	r0, [pc, #116]	; (122f4 <nmgr_handle_req+0x184>)
   1227e:	f006 f9c0 	bl	18602 <cbor_encoder_close_container>
    if (rc != 0) {
   12282:	b180      	cbz	r0, 122a6 <nmgr_handle_req+0x136>
        rc = MGMT_ERR_ENOMEM;
   12284:	2702      	movs	r7, #2
   12286:	e79a      	b.n	121be <nmgr_handle_req+0x4e>
    } else if (hdr.nh_op == NMGR_OP_WRITE) {
   12288:	2b02      	cmp	r3, #2
   1228a:	d108      	bne.n	1229e <nmgr_handle_req+0x12e>
        if (handler->mh_write) {
   1228c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   12290:	b13b      	cbz	r3, 122a2 <nmgr_handle_req+0x132>
            rc = handler->mh_write(&nmgr_task_cbuf.n_b);
   12292:	4817      	ldr	r0, [pc, #92]	; (122f0 <nmgr_handle_req+0x180>)
   12294:	4798      	blx	r3
   12296:	4607      	mov	r7, r0
   12298:	e7ed      	b.n	12276 <nmgr_handle_req+0x106>
            rc = MGMT_ERR_ENOENT;
   1229a:	2705      	movs	r7, #5
   1229c:	e78f      	b.n	121be <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_EINVAL;
   1229e:	2703      	movs	r7, #3
   122a0:	e78d      	b.n	121be <nmgr_handle_req+0x4e>
            rc = MGMT_ERR_ENOENT;
   122a2:	2705      	movs	r7, #5
        goto err;
   122a4:	e78b      	b.n	121be <nmgr_handle_req+0x4e>
   122a6:	4b12      	ldr	r3, [pc, #72]	; (122f0 <nmgr_handle_req+0x180>)
   122a8:	68db      	ldr	r3, [r3, #12]
   122aa:	685b      	ldr	r3, [r3, #4]
    rsp_hdr->nh_len += cbor_encode_bytes_written(&nmgr_task_cbuf.n_b.encoder);
   122ac:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   122b0:	4413      	add	r3, r2
   122b2:	b29b      	uxth	r3, r3
   122b4:	f8a9 3002 	strh.w	r3, [r9, #2]
    rsp_hdr->nh_len = htons(rsp_hdr->nh_len);
   122b8:	021a      	lsls	r2, r3, #8
   122ba:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   122be:	f8a9 3002 	strh.w	r3, [r9, #2]
    rc = nmgr_rsp_tx(nt, &rsp, mtu);
   122c2:	462a      	mov	r2, r5
   122c4:	a907      	add	r1, sp, #28
   122c6:	4630      	mov	r0, r6
   122c8:	f7ff ff02 	bl	120d0 <nmgr_rsp_tx>
    if (rc) {
   122cc:	4607      	mov	r7, r0
   122ce:	b120      	cbz	r0, 122da <nmgr_handle_req+0x16a>
        if (rsp == NULL) {
   122d0:	9b07      	ldr	r3, [sp, #28]
   122d2:	2b00      	cmp	r3, #0
   122d4:	f47f af73 	bne.w	121be <nmgr_handle_req+0x4e>
   122d8:	e75d      	b.n	12196 <nmgr_handle_req+0x26>
    os_mbuf_free_chain(rsp);
   122da:	9807      	ldr	r0, [sp, #28]
   122dc:	f7f8 fb09 	bl	a8f2 <os_mbuf_free_chain>
    os_mbuf_free_chain(req);
   122e0:	4620      	mov	r0, r4
   122e2:	f7f8 fb06 	bl	a8f2 <os_mbuf_free_chain>
    return;
   122e6:	e75c      	b.n	121a2 <nmgr_handle_req+0x32>
        rc = MGMT_ERR_ENOENT;
   122e8:	2705      	movs	r7, #5
   122ea:	e768      	b.n	121be <nmgr_handle_req+0x4e>
        rc = MGMT_ERR_ENOMEM;
   122ec:	2702      	movs	r7, #2
   122ee:	e766      	b.n	121be <nmgr_handle_req+0x4e>
   122f0:	200040ac 	.word	0x200040ac
   122f4:	200040b8 	.word	0x200040b8

000122f8 <nmgr_process>:


static void
nmgr_process(struct nmgr_transport *nt)
{
   122f8:	b510      	push	{r4, lr}
   122fa:	4604      	mov	r4, r0
   122fc:	e002      	b.n	12304 <nmgr_process+0xc>
        m = os_mqueue_get(&nt->nt_imq);
        if (!m) {
            break;
        }

        nmgr_handle_req(nt, m);
   122fe:	4620      	mov	r0, r4
   12300:	f7ff ff36 	bl	12170 <nmgr_handle_req>
        m = os_mqueue_get(&nt->nt_imq);
   12304:	4620      	mov	r0, r4
   12306:	f7f8 fa8a 	bl	a81e <os_mqueue_get>
        if (!m) {
   1230a:	4601      	mov	r1, r0
   1230c:	2800      	cmp	r0, #0
   1230e:	d1f6      	bne.n	122fe <nmgr_process+0x6>
    }
}
   12310:	bd10      	pop	{r4, pc}

00012312 <nmgr_event_data_in>:

static void
nmgr_event_data_in(struct os_event *ev)
{
   12312:	b508      	push	{r3, lr}
    nmgr_process(ev->ev_arg);
   12314:	6880      	ldr	r0, [r0, #8]
   12316:	f7ff ffef 	bl	122f8 <nmgr_process>
}
   1231a:	bd08      	pop	{r3, pc}

0001231c <nmgr_cbuf_init>:
{
   1231c:	b508      	push	{r3, lr}
    memset(njb, 0, sizeof(*njb));
   1231e:	2260      	movs	r2, #96	; 0x60
   12320:	2100      	movs	r1, #0
   12322:	f7fe f9aa 	bl	1067a <memset>
}
   12326:	2000      	movs	r0, #0
   12328:	bd08      	pop	{r3, pc}
	...

0001232c <mgmt_evq_get>:
}
   1232c:	4b01      	ldr	r3, [pc, #4]	; (12334 <mgmt_evq_get+0x8>)
   1232e:	6818      	ldr	r0, [r3, #0]
   12330:	4770      	bx	lr
   12332:	bf00      	nop
   12334:	200040a8 	.word	0x200040a8

00012338 <mgmt_evq_set>:
    nmgr_evq = evq;
   12338:	4b01      	ldr	r3, [pc, #4]	; (12340 <mgmt_evq_set+0x8>)
   1233a:	6018      	str	r0, [r3, #0]
}
   1233c:	4770      	bx	lr
   1233e:	bf00      	nop
   12340:	200040a8 	.word	0x200040a8

00012344 <nmgr_transport_init>:

int
nmgr_transport_init(struct nmgr_transport *nt,
        nmgr_transport_out_func_t output_func,
        nmgr_transport_get_mtu_func_t get_mtu_func)
{
   12344:	b508      	push	{r3, lr}
    int rc;

    nt->nt_output = output_func;
   12346:	6181      	str	r1, [r0, #24]
    nt->nt_get_mtu = get_mtu_func;
   12348:	61c2      	str	r2, [r0, #28]

    rc = os_mqueue_init(&nt->nt_imq, nmgr_event_data_in, nt);
   1234a:	4602      	mov	r2, r0
   1234c:	4901      	ldr	r1, [pc, #4]	; (12354 <nmgr_transport_init+0x10>)
   1234e:	f7f8 fa5b 	bl	a808 <os_mqueue_init>
    }

    return (0);
err:
    return (rc);
}
   12352:	bd08      	pop	{r3, pc}
   12354:	00012313 	.word	0x00012313

00012358 <nmgr_rx_req>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
nmgr_rx_req(struct nmgr_transport *nt, struct os_mbuf *req)
{
   12358:	b538      	push	{r3, r4, r5, lr}
   1235a:	4605      	mov	r5, r0
   1235c:	460c      	mov	r4, r1
    int rc;

    rc = os_mqueue_put(&nt->nt_imq, mgmt_evq_get(), req);
   1235e:	f7ff ffe5 	bl	1232c <mgmt_evq_get>
   12362:	4601      	mov	r1, r0
   12364:	4622      	mov	r2, r4
   12366:	4628      	mov	r0, r5
   12368:	f7f8 fa6a 	bl	a840 <os_mqueue_put>
    if (rc != 0) {
   1236c:	4605      	mov	r5, r0
   1236e:	b908      	cbnz	r0, 12374 <nmgr_rx_req+0x1c>
        os_mbuf_free_chain(req);
    }

    return rc;
}
   12370:	4628      	mov	r0, r5
   12372:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(req);
   12374:	4620      	mov	r0, r4
   12376:	f7f8 fabc 	bl	a8f2 <os_mbuf_free_chain>
    return rc;
   1237a:	e7f9      	b.n	12370 <nmgr_rx_req+0x18>

0001237c <nmgr_pkg_init>:

void
nmgr_pkg_init(void)
{
   1237c:	b510      	push	{r4, lr}
   1237e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   12380:	4b0d      	ldr	r3, [pc, #52]	; (123b8 <nmgr_pkg_init+0x3c>)
   12382:	781b      	ldrb	r3, [r3, #0]
   12384:	b19b      	cbz	r3, 123ae <nmgr_pkg_init+0x32>

    rc = nmgr_os_groups_register();
   12386:	f000 fa79 	bl	1287c <nmgr_os_groups_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1238a:	b138      	cbz	r0, 1239c <nmgr_pkg_init+0x20>
   1238c:	2000      	movs	r0, #0
   1238e:	9000      	str	r0, [sp, #0]
   12390:	4b0a      	ldr	r3, [pc, #40]	; (123bc <nmgr_pkg_init+0x40>)
   12392:	681c      	ldr	r4, [r3, #0]
   12394:	4603      	mov	r3, r0
   12396:	4602      	mov	r2, r0
   12398:	4601      	mov	r1, r0
   1239a:	47a0      	blx	r4

    nmgr_cbuf_init(&nmgr_task_cbuf);
   1239c:	4808      	ldr	r0, [pc, #32]	; (123c0 <nmgr_pkg_init+0x44>)
   1239e:	f7ff ffbd 	bl	1231c <nmgr_cbuf_init>

    mgmt_evq_set(os_eventq_dflt_get());
   123a2:	f7f7 faf1 	bl	9988 <os_eventq_dflt_get>
   123a6:	f7ff ffc7 	bl	12338 <mgmt_evq_set>
}
   123aa:	b002      	add	sp, #8
   123ac:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   123ae:	461a      	mov	r2, r3
   123b0:	4619      	mov	r1, r3
   123b2:	4618      	mov	r0, r3
   123b4:	f7f6 ff06 	bl	91c4 <__assert_func>
   123b8:	2000538c 	.word	0x2000538c
   123bc:	20000308 	.word	0x20000308
   123c0:	200040ac 	.word	0x200040ac

000123c4 <nmgr_reset>:
    os_reboot(HAL_RESET_REQUESTED);
}

static int
nmgr_reset(struct mgmt_cbuf *cb)
{
   123c4:	b570      	push	{r4, r5, r6, lr}
   123c6:	b084      	sub	sp, #16
   123c8:	4605      	mov	r5, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info;
#endif
    int rc;

    os_callout_init(&nmgr_reset_callout, mgmt_evq_get(), nmgr_reset_tmo, NULL);
   123ca:	f7ff ffaf 	bl	1232c <mgmt_evq_get>
   123ce:	4601      	mov	r1, r0
   123d0:	4e0e      	ldr	r6, [pc, #56]	; (1240c <nmgr_reset+0x48>)
   123d2:	2300      	movs	r3, #0
   123d4:	4a0e      	ldr	r2, [pc, #56]	; (12410 <nmgr_reset+0x4c>)
   123d6:	4630      	mov	r0, r6
   123d8:	f7f7 f87a 	bl	94d0 <os_callout_init>

#if MYNEWT_VAL(LOG_SOFT_RESET)
    info = (struct log_reboot_info) {
   123dc:	2306      	movs	r3, #6
   123de:	f88d 3000 	strb.w	r3, [sp]
   123e2:	2400      	movs	r4, #0
   123e4:	9401      	str	r4, [sp, #4]
   123e6:	9402      	str	r4, [sp, #8]
   123e8:	9403      	str	r4, [sp, #12]
        .reason = HAL_RESET_REQUESTED,
        .file = NULL,
        .line = 0,
        .pc = 0,
    };
    log_reboot(&info);
   123ea:	4668      	mov	r0, sp
   123ec:	f002 fc80 	bl	14cf0 <log_reboot>
#endif
    os_callout_reset(&nmgr_reset_callout, OS_TICKS_PER_SEC / 4);
   123f0:	2120      	movs	r1, #32
   123f2:	4630      	mov	r0, r6
   123f4:	f7f7 f898 	bl	9528 <os_callout_reset>

    rc = mgmt_cbuf_setoerr(cb, 0);
   123f8:	4621      	mov	r1, r4
   123fa:	4628      	mov	r0, r5
   123fc:	f7ff fe10 	bl	12020 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   12400:	b908      	cbnz	r0, 12406 <nmgr_reset+0x42>
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   12402:	b004      	add	sp, #16
   12404:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   12406:	2001      	movs	r0, #1
   12408:	e7fb      	b.n	12402 <nmgr_reset+0x3e>
   1240a:	bf00      	nop
   1240c:	2000410c 	.word	0x2000410c
   12410:	00012415 	.word	0x00012415

00012414 <nmgr_reset_tmo>:
{
   12414:	b508      	push	{r3, lr}
    os_reboot(HAL_RESET_REQUESTED);
   12416:	2006      	movs	r0, #6
   12418:	f7f7 f835 	bl	9486 <os_reboot>
}
   1241c:	bd08      	pop	{r3, pc}
	...

00012420 <nmgr_datetime_set>:
{
   12420:	b510      	push	{r4, lr}
   12422:	b0a6      	sub	sp, #152	; 0x98
   12424:	4604      	mov	r4, r0
    const struct cbor_attr_t datetime_write_attr[] = {
   12426:	2260      	movs	r2, #96	; 0x60
   12428:	2100      	movs	r1, #0
   1242a:	4668      	mov	r0, sp
   1242c:	f7fe f925 	bl	1067a <memset>
   12430:	4b12      	ldr	r3, [pc, #72]	; (1247c <nmgr_datetime_set+0x5c>)
   12432:	9300      	str	r3, [sp, #0]
   12434:	2304      	movs	r3, #4
   12436:	f88d 3004 	strb.w	r3, [sp, #4]
   1243a:	ab18      	add	r3, sp, #96	; 0x60
   1243c:	9302      	str	r3, [sp, #8]
   1243e:	2321      	movs	r3, #33	; 0x21
   12440:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, datetime_write_attr);
   12442:	4669      	mov	r1, sp
   12444:	f104 001c 	add.w	r0, r4, #28
   12448:	f005 feda 	bl	18200 <cbor_read_object>
    if (rc) {
   1244c:	b978      	cbnz	r0, 1246e <nmgr_datetime_set+0x4e>
    rc = datetime_parse(buf, &tv, &tz);
   1244e:	aa21      	add	r2, sp, #132	; 0x84
   12450:	a922      	add	r1, sp, #136	; 0x88
   12452:	a818      	add	r0, sp, #96	; 0x60
   12454:	f004 fdf6 	bl	17044 <datetime_parse>
    if (!rc) {
   12458:	b960      	cbnz	r0, 12474 <nmgr_datetime_set+0x54>
        rc = os_settimeofday(&tv, &tz);
   1245a:	a921      	add	r1, sp, #132	; 0x84
   1245c:	a822      	add	r0, sp, #136	; 0x88
   1245e:	f7f8 f85f 	bl	a520 <os_settimeofday>
        if (rc) {
   12462:	b948      	cbnz	r0, 12478 <nmgr_datetime_set+0x58>
    rc = mgmt_cbuf_setoerr(cb, 0);
   12464:	2100      	movs	r1, #0
   12466:	4620      	mov	r0, r4
   12468:	f7ff fdda 	bl	12020 <mgmt_cbuf_setoerr>
    if (rc != 0) {
   1246c:	e000      	b.n	12470 <nmgr_datetime_set+0x50>
        return MGMT_ERR_EINVAL;
   1246e:	2003      	movs	r0, #3
}
   12470:	b026      	add	sp, #152	; 0x98
   12472:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   12474:	2003      	movs	r0, #3
   12476:	e7fb      	b.n	12470 <nmgr_datetime_set+0x50>
          return MGMT_ERR_EINVAL;
   12478:	2003      	movs	r0, #3
   1247a:	e7f9      	b.n	12470 <nmgr_datetime_set+0x50>
   1247c:	00027020 	.word	0x00027020

00012480 <nmgr_def_console_echo>:
{
   12480:	b510      	push	{r4, lr}
   12482:	b09a      	sub	sp, #104	; 0x68
   12484:	4604      	mov	r4, r0
    long long int echo_on = 1;
   12486:	2201      	movs	r2, #1
   12488:	2300      	movs	r3, #0
   1248a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    struct cbor_attr_t attrs[2] = {
   1248e:	2260      	movs	r2, #96	; 0x60
   12490:	2100      	movs	r1, #0
   12492:	4668      	mov	r0, sp
   12494:	f7fe f8f1 	bl	1067a <memset>
   12498:	4b0f      	ldr	r3, [pc, #60]	; (124d8 <nmgr_def_console_echo+0x58>)
   1249a:	9300      	str	r3, [sp, #0]
   1249c:	2301      	movs	r3, #1
   1249e:	f88d 3004 	strb.w	r3, [sp, #4]
   124a2:	aa18      	add	r2, sp, #96	; 0x60
   124a4:	9202      	str	r2, [sp, #8]
   124a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    rc = cbor_read_object(&cb->it, attrs);
   124aa:	4669      	mov	r1, sp
   124ac:	f104 001c 	add.w	r0, r4, #28
   124b0:	f005 fea6 	bl	18200 <cbor_read_object>
    if (rc) {
   124b4:	b970      	cbnz	r0, 124d4 <nmgr_def_console_echo+0x54>
   124b6:	4604      	mov	r4, r0
    if (echo_on) {
   124b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   124ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
   124bc:	4313      	orrs	r3, r2
   124be:	d005      	beq.n	124cc <nmgr_def_console_echo+0x4c>
        console_echo(1);
   124c0:	2001      	movs	r0, #1
   124c2:	f001 f873 	bl	135ac <console_echo>
}
   124c6:	4620      	mov	r0, r4
   124c8:	b01a      	add	sp, #104	; 0x68
   124ca:	bd10      	pop	{r4, pc}
        console_echo(0);
   124cc:	2000      	movs	r0, #0
   124ce:	f001 f86d 	bl	135ac <console_echo>
   124d2:	e7f8      	b.n	124c6 <nmgr_def_console_echo+0x46>
        return MGMT_ERR_EINVAL;
   124d4:	2403      	movs	r4, #3
   124d6:	e7f6      	b.n	124c6 <nmgr_def_console_echo+0x46>
   124d8:	0002702c 	.word	0x0002702c

000124dc <nmgr_def_echo>:
{
   124dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   124de:	b0b9      	sub	sp, #228	; 0xe4
   124e0:	4604      	mov	r4, r0
    char echo_buf[128] = {'\0'};
   124e2:	2500      	movs	r5, #0
   124e4:	9518      	str	r5, [sp, #96]	; 0x60
   124e6:	227c      	movs	r2, #124	; 0x7c
   124e8:	4629      	mov	r1, r5
   124ea:	a819      	add	r0, sp, #100	; 0x64
   124ec:	f7fe f8c5 	bl	1067a <memset>
    struct cbor_attr_t attrs[2] = {
   124f0:	2260      	movs	r2, #96	; 0x60
   124f2:	4629      	mov	r1, r5
   124f4:	4668      	mov	r0, sp
   124f6:	f7fe f8c0 	bl	1067a <memset>
   124fa:	4b14      	ldr	r3, [pc, #80]	; (1254c <nmgr_def_echo+0x70>)
   124fc:	9300      	str	r3, [sp, #0]
   124fe:	2304      	movs	r3, #4
   12500:	f88d 3004 	strb.w	r3, [sp, #4]
   12504:	ad18      	add	r5, sp, #96	; 0x60
   12506:	9502      	str	r5, [sp, #8]
   12508:	2380      	movs	r3, #128	; 0x80
   1250a:	930a      	str	r3, [sp, #40]	; 0x28
   1250c:	2201      	movs	r2, #1
   1250e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "r");
   12512:	f104 070c 	add.w	r7, r4, #12
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   12516:	490e      	ldr	r1, [pc, #56]	; (12550 <nmgr_def_echo+0x74>)
   12518:	4638      	mov	r0, r7
   1251a:	f006 f858 	bl	185ce <cbor_encode_text_string>
   1251e:	4606      	mov	r6, r0
    g_err |= cbor_read_object(&cb->it, attrs);
   12520:	4669      	mov	r1, sp
   12522:	f104 001c 	add.w	r0, r4, #28
   12526:	f005 fe6b 	bl	18200 <cbor_read_object>
   1252a:	4306      	orrs	r6, r0
    g_err |= cbor_encode_text_string(&cb->encoder, echo_buf, strlen(echo_buf));
   1252c:	4628      	mov	r0, r5
   1252e:	f7fe f8db 	bl	106e8 <strlen>
   12532:	4602      	mov	r2, r0
   12534:	4629      	mov	r1, r5
   12536:	4638      	mov	r0, r7
   12538:	f006 f849 	bl	185ce <cbor_encode_text_string>
    if (g_err) {
   1253c:	ea56 0300 	orrs.w	r3, r6, r0
   12540:	d102      	bne.n	12548 <nmgr_def_echo+0x6c>
    return (0);
   12542:	2000      	movs	r0, #0
}
   12544:	b039      	add	sp, #228	; 0xe4
   12546:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   12548:	2002      	movs	r0, #2
   1254a:	e7fb      	b.n	12544 <nmgr_def_echo+0x68>
   1254c:	00026314 	.word	0x00026314
   12550:	000268d0 	.word	0x000268d0

00012554 <nmgr_datetime_get>:
{
   12554:	b570      	push	{r4, r5, r6, lr}
   12556:	b08e      	sub	sp, #56	; 0x38
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   12558:	f100 040c 	add.w	r4, r0, #12
   1255c:	2202      	movs	r2, #2
   1255e:	491b      	ldr	r1, [pc, #108]	; (125cc <nmgr_datetime_get+0x78>)
   12560:	4620      	mov	r0, r4
   12562:	f006 f834 	bl	185ce <cbor_encode_text_string>
   12566:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   12568:	2200      	movs	r2, #0
   1256a:	2300      	movs	r3, #0
   1256c:	4620      	mov	r0, r4
   1256e:	f005 ffb3 	bl	184d8 <cbor_encode_int>
   12572:	4305      	orrs	r5, r0
    rc = os_gettimeofday(&tv, &tz);
   12574:	a909      	add	r1, sp, #36	; 0x24
   12576:	a80a      	add	r0, sp, #40	; 0x28
   12578:	f7f7 ff86 	bl	a488 <os_gettimeofday>
    assert(rc == 0);
   1257c:	b9d8      	cbnz	r0, 125b6 <nmgr_datetime_get+0x62>
    rc = datetime_format(&tv, &tz, buf, DATETIME_BUFSIZE);
   1257e:	2321      	movs	r3, #33	; 0x21
   12580:	466a      	mov	r2, sp
   12582:	a909      	add	r1, sp, #36	; 0x24
   12584:	a80a      	add	r0, sp, #40	; 0x28
   12586:	f004 fe5d 	bl	17244 <datetime_format>
    if (rc) {
   1258a:	4606      	mov	r6, r0
   1258c:	b9c8      	cbnz	r0, 125c2 <nmgr_datetime_get+0x6e>
   1258e:	2208      	movs	r2, #8
   12590:	490f      	ldr	r1, [pc, #60]	; (125d0 <nmgr_datetime_get+0x7c>)
   12592:	4620      	mov	r0, r4
   12594:	f006 f81b 	bl	185ce <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "datetime");
   12598:	4305      	orrs	r5, r0
   1259a:	4668      	mov	r0, sp
   1259c:	f7fe f8a4 	bl	106e8 <strlen>
   125a0:	4602      	mov	r2, r0
   125a2:	4669      	mov	r1, sp
   125a4:	4620      	mov	r0, r4
   125a6:	f006 f812 	bl	185ce <cbor_encode_text_string>
    if (g_err) {
   125aa:	ea55 0300 	orrs.w	r3, r5, r0
   125ae:	d10a      	bne.n	125c6 <nmgr_datetime_get+0x72>
}
   125b0:	4630      	mov	r0, r6
   125b2:	b00e      	add	sp, #56	; 0x38
   125b4:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   125b6:	2300      	movs	r3, #0
   125b8:	461a      	mov	r2, r3
   125ba:	4619      	mov	r1, r3
   125bc:	4618      	mov	r0, r3
   125be:	f7f6 fe01 	bl	91c4 <__assert_func>
    return (rc);
   125c2:	2603      	movs	r6, #3
   125c4:	e7f4      	b.n	125b0 <nmgr_datetime_get+0x5c>
        return MGMT_ERR_ENOMEM;
   125c6:	2602      	movs	r6, #2
   125c8:	e7f2      	b.n	125b0 <nmgr_datetime_get+0x5c>
   125ca:	bf00      	nop
   125cc:	00026da4 	.word	0x00026da4
   125d0:	00027020 	.word	0x00027020

000125d4 <nmgr_def_mpstat_read>:
{
   125d4:	b570      	push	{r4, r5, r6, lr}
   125d6:	b094      	sub	sp, #80	; 0x50
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   125d8:	f100 060c 	add.w	r6, r0, #12
   125dc:	2202      	movs	r2, #2
   125de:	4939      	ldr	r1, [pc, #228]	; (126c4 <nmgr_def_mpstat_read+0xf0>)
   125e0:	4630      	mov	r0, r6
   125e2:	f005 fff4 	bl	185ce <cbor_encode_text_string>
   125e6:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   125e8:	2200      	movs	r2, #0
   125ea:	2300      	movs	r3, #0
   125ec:	4630      	mov	r0, r6
   125ee:	f005 ff73 	bl	184d8 <cbor_encode_int>
   125f2:	4304      	orrs	r4, r0
   125f4:	2206      	movs	r2, #6
   125f6:	4934      	ldr	r1, [pc, #208]	; (126c8 <nmgr_def_mpstat_read+0xf4>)
   125f8:	4630      	mov	r0, r6
   125fa:	f005 ffe8 	bl	185ce <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "mpools");
   125fe:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &pools,
   12600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12604:	a904      	add	r1, sp, #16
   12606:	4630      	mov	r0, r6
   12608:	f005 ffed 	bl	185e6 <cbor_encoder_create_map>
   1260c:	4304      	orrs	r4, r0
    prev_mp = NULL;
   1260e:	2500      	movs	r5, #0
   12610:	e044      	b.n	1269c <nmgr_def_mpstat_read+0xc8>
   12612:	a80c      	add	r0, sp, #48	; 0x30
   12614:	f7fe f868 	bl	106e8 <strlen>
   12618:	4602      	mov	r2, r0
   1261a:	a90c      	add	r1, sp, #48	; 0x30
   1261c:	a804      	add	r0, sp, #16
   1261e:	f005 ffd6 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pools, omi.omi_name);
   12622:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&pools, &pool, CborIndefiniteLength);
   12624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12628:	4669      	mov	r1, sp
   1262a:	a804      	add	r0, sp, #16
   1262c:	f005 ffdb 	bl	185e6 <cbor_encoder_create_map>
   12630:	4304      	orrs	r4, r0
   12632:	2206      	movs	r2, #6
   12634:	4925      	ldr	r1, [pc, #148]	; (126cc <nmgr_def_mpstat_read+0xf8>)
   12636:	4668      	mov	r0, sp
   12638:	f005 ffc9 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "blksiz");
   1263c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_block_size);
   1263e:	9a08      	ldr	r2, [sp, #32]
   12640:	17d3      	asrs	r3, r2, #31
   12642:	4668      	mov	r0, sp
   12644:	f005 ff08 	bl	18458 <cbor_encode_uint>
   12648:	4304      	orrs	r4, r0
   1264a:	2205      	movs	r2, #5
   1264c:	4920      	ldr	r1, [pc, #128]	; (126d0 <nmgr_def_mpstat_read+0xfc>)
   1264e:	4668      	mov	r0, sp
   12650:	f005 ffbd 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nblks");
   12654:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_blocks);
   12656:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12658:	17d3      	asrs	r3, r2, #31
   1265a:	4668      	mov	r0, sp
   1265c:	f005 fefc 	bl	18458 <cbor_encode_uint>
   12660:	4304      	orrs	r4, r0
   12662:	2205      	movs	r2, #5
   12664:	491b      	ldr	r1, [pc, #108]	; (126d4 <nmgr_def_mpstat_read+0x100>)
   12666:	4668      	mov	r0, sp
   12668:	f005 ffb1 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "nfree");
   1266c:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_num_free);
   1266e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12670:	17d3      	asrs	r3, r2, #31
   12672:	4668      	mov	r0, sp
   12674:	f005 fef0 	bl	18458 <cbor_encode_uint>
   12678:	4304      	orrs	r4, r0
   1267a:	2203      	movs	r2, #3
   1267c:	4916      	ldr	r1, [pc, #88]	; (126d8 <nmgr_def_mpstat_read+0x104>)
   1267e:	4668      	mov	r0, sp
   12680:	f005 ffa5 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&pool, "min");
   12684:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&pool, omi.omi_min_free);
   12686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12688:	17d3      	asrs	r3, r2, #31
   1268a:	4668      	mov	r0, sp
   1268c:	f005 fee4 	bl	18458 <cbor_encode_uint>
   12690:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&pools, &pool);
   12692:	4669      	mov	r1, sp
   12694:	a804      	add	r0, sp, #16
   12696:	f005 ffb4 	bl	18602 <cbor_encoder_close_container>
   1269a:	4304      	orrs	r4, r0
        prev_mp = os_mempool_info_get_next(prev_mp, &omi);
   1269c:	a908      	add	r1, sp, #32
   1269e:	4628      	mov	r0, r5
   126a0:	f7f7 f9fa 	bl	9a98 <os_mempool_info_get_next>
        if (prev_mp == NULL) {
   126a4:	4605      	mov	r5, r0
   126a6:	2800      	cmp	r0, #0
   126a8:	d1b3      	bne.n	12612 <nmgr_def_mpstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &pools);
   126aa:	a904      	add	r1, sp, #16
   126ac:	4630      	mov	r0, r6
   126ae:	f005 ffa8 	bl	18602 <cbor_encoder_close_container>
    if (g_err) {
   126b2:	ea54 0300 	orrs.w	r3, r4, r0
   126b6:	d102      	bne.n	126be <nmgr_def_mpstat_read+0xea>
    return (0);
   126b8:	2000      	movs	r0, #0
}
   126ba:	b014      	add	sp, #80	; 0x50
   126bc:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   126be:	2002      	movs	r0, #2
   126c0:	e7fb      	b.n	126ba <nmgr_def_mpstat_read+0xe6>
   126c2:	bf00      	nop
   126c4:	00026da4 	.word	0x00026da4
   126c8:	00027034 	.word	0x00027034
   126cc:	0002703c 	.word	0x0002703c
   126d0:	00027044 	.word	0x00027044
   126d4:	0002704c 	.word	0x0002704c
   126d8:	00027054 	.word	0x00027054

000126dc <nmgr_def_taskstat_read>:
{
   126dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   126de:	b097      	sub	sp, #92	; 0x5c
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   126e0:	f100 060c 	add.w	r6, r0, #12
   126e4:	2202      	movs	r2, #2
   126e6:	495a      	ldr	r1, [pc, #360]	; (12850 <nmgr_def_taskstat_read+0x174>)
   126e8:	4630      	mov	r0, r6
   126ea:	f005 ff70 	bl	185ce <cbor_encode_text_string>
   126ee:	4604      	mov	r4, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   126f0:	2200      	movs	r2, #0
   126f2:	2300      	movs	r3, #0
   126f4:	4630      	mov	r0, r6
   126f6:	f005 feef 	bl	184d8 <cbor_encode_int>
   126fa:	4304      	orrs	r4, r0
   126fc:	2205      	movs	r2, #5
   126fe:	4955      	ldr	r1, [pc, #340]	; (12854 <nmgr_def_taskstat_read+0x178>)
   12700:	4630      	mov	r0, r6
   12702:	f005 ff64 	bl	185ce <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "tasks");
   12706:	4304      	orrs	r4, r0
    g_err |= cbor_encoder_create_map(&cb->encoder, &tasks,
   12708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1270c:	a904      	add	r1, sp, #16
   1270e:	4630      	mov	r0, r6
   12710:	f005 ff69 	bl	185e6 <cbor_encoder_create_map>
   12714:	4304      	orrs	r4, r0
    prev_task = NULL;
   12716:	2500      	movs	r5, #0
   12718:	e086      	b.n	12828 <nmgr_def_taskstat_read+0x14c>
   1271a:	a80e      	add	r0, sp, #56	; 0x38
   1271c:	f7fd ffe4 	bl	106e8 <strlen>
   12720:	4602      	mov	r2, r0
   12722:	a90e      	add	r1, sp, #56	; 0x38
   12724:	a804      	add	r0, sp, #16
   12726:	f005 ff52 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&tasks, oti.oti_name);
   1272a:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_create_map(&tasks, &task, CborIndefiniteLength);
   1272c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12730:	4669      	mov	r1, sp
   12732:	a804      	add	r0, sp, #16
   12734:	f005 ff57 	bl	185e6 <cbor_encoder_create_map>
   12738:	4304      	orrs	r4, r0
   1273a:	2204      	movs	r2, #4
   1273c:	4946      	ldr	r1, [pc, #280]	; (12858 <nmgr_def_taskstat_read+0x17c>)
   1273e:	4668      	mov	r0, sp
   12740:	f005 ff45 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "prio");
   12744:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_prio);
   12746:	2700      	movs	r7, #0
   12748:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1274c:	463b      	mov	r3, r7
   1274e:	4668      	mov	r0, sp
   12750:	f005 fe82 	bl	18458 <cbor_encode_uint>
   12754:	4304      	orrs	r4, r0
   12756:	2203      	movs	r2, #3
   12758:	4940      	ldr	r1, [pc, #256]	; (1285c <nmgr_def_taskstat_read+0x180>)
   1275a:	4668      	mov	r0, sp
   1275c:	f005 ff37 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "tid");
   12760:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_taskid);
   12762:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   12766:	463b      	mov	r3, r7
   12768:	4668      	mov	r0, sp
   1276a:	f005 fe75 	bl	18458 <cbor_encode_uint>
   1276e:	4304      	orrs	r4, r0
   12770:	2205      	movs	r2, #5
   12772:	493b      	ldr	r1, [pc, #236]	; (12860 <nmgr_def_taskstat_read+0x184>)
   12774:	4668      	mov	r0, sp
   12776:	f005 ff2a 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "state");
   1277a:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_state);
   1277c:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   12780:	463b      	mov	r3, r7
   12782:	4668      	mov	r0, sp
   12784:	f005 fe68 	bl	18458 <cbor_encode_uint>
   12788:	4304      	orrs	r4, r0
   1278a:	2206      	movs	r2, #6
   1278c:	4935      	ldr	r1, [pc, #212]	; (12864 <nmgr_def_taskstat_read+0x188>)
   1278e:	4668      	mov	r0, sp
   12790:	f005 ff1d 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stkuse");
   12794:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stkusage);
   12796:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1279a:	463b      	mov	r3, r7
   1279c:	4668      	mov	r0, sp
   1279e:	f005 fe5b 	bl	18458 <cbor_encode_uint>
   127a2:	4304      	orrs	r4, r0
   127a4:	2206      	movs	r2, #6
   127a6:	4930      	ldr	r1, [pc, #192]	; (12868 <nmgr_def_taskstat_read+0x18c>)
   127a8:	4668      	mov	r0, sp
   127aa:	f005 ff10 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "stksiz");
   127ae:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_stksize);
   127b0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   127b4:	463b      	mov	r3, r7
   127b6:	4668      	mov	r0, sp
   127b8:	f005 fe4e 	bl	18458 <cbor_encode_uint>
   127bc:	4304      	orrs	r4, r0
   127be:	2206      	movs	r2, #6
   127c0:	492a      	ldr	r1, [pc, #168]	; (1286c <nmgr_def_taskstat_read+0x190>)
   127c2:	4668      	mov	r0, sp
   127c4:	f005 ff03 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "cswcnt");
   127c8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_cswcnt);
   127ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   127cc:	463b      	mov	r3, r7
   127ce:	4668      	mov	r0, sp
   127d0:	f005 fe42 	bl	18458 <cbor_encode_uint>
   127d4:	4304      	orrs	r4, r0
   127d6:	2207      	movs	r2, #7
   127d8:	4925      	ldr	r1, [pc, #148]	; (12870 <nmgr_def_taskstat_read+0x194>)
   127da:	4668      	mov	r0, sp
   127dc:	f005 fef7 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "runtime");
   127e0:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_runtime);
   127e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   127e4:	463b      	mov	r3, r7
   127e6:	4668      	mov	r0, sp
   127e8:	f005 fe36 	bl	18458 <cbor_encode_uint>
   127ec:	4304      	orrs	r4, r0
   127ee:	220c      	movs	r2, #12
   127f0:	4920      	ldr	r1, [pc, #128]	; (12874 <nmgr_def_taskstat_read+0x198>)
   127f2:	4668      	mov	r0, sp
   127f4:	f005 feeb 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "last_checkin");
   127f8:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_last_checkin);
   127fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   127fc:	463b      	mov	r3, r7
   127fe:	4668      	mov	r0, sp
   12800:	f005 fe2a 	bl	18458 <cbor_encode_uint>
   12804:	4304      	orrs	r4, r0
   12806:	220c      	movs	r2, #12
   12808:	491b      	ldr	r1, [pc, #108]	; (12878 <nmgr_def_taskstat_read+0x19c>)
   1280a:	4668      	mov	r0, sp
   1280c:	f005 fedf 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_text_stringz(&task, "next_checkin");
   12810:	4304      	orrs	r4, r0
        g_err |= cbor_encode_uint(&task, oti.oti_next_checkin);
   12812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12814:	463b      	mov	r3, r7
   12816:	4668      	mov	r0, sp
   12818:	f005 fe1e 	bl	18458 <cbor_encode_uint>
   1281c:	4304      	orrs	r4, r0
        g_err |= cbor_encoder_close_container(&tasks, &task);
   1281e:	4669      	mov	r1, sp
   12820:	a804      	add	r0, sp, #16
   12822:	f005 feee 	bl	18602 <cbor_encoder_close_container>
   12826:	4304      	orrs	r4, r0
        prev_task = os_task_info_get_next(prev_task, &oti);
   12828:	a908      	add	r1, sp, #32
   1282a:	4628      	mov	r0, r5
   1282c:	f7f7 fd48 	bl	a2c0 <os_task_info_get_next>
        if (prev_task == NULL) {
   12830:	4605      	mov	r5, r0
   12832:	2800      	cmp	r0, #0
   12834:	f47f af71 	bne.w	1271a <nmgr_def_taskstat_read+0x3e>
    g_err |= cbor_encoder_close_container(&cb->encoder, &tasks);
   12838:	a904      	add	r1, sp, #16
   1283a:	4630      	mov	r0, r6
   1283c:	f005 fee1 	bl	18602 <cbor_encoder_close_container>
    if (g_err) {
   12840:	ea54 0300 	orrs.w	r3, r4, r0
   12844:	d102      	bne.n	1284c <nmgr_def_taskstat_read+0x170>
    return (0);
   12846:	2000      	movs	r0, #0
}
   12848:	b017      	add	sp, #92	; 0x5c
   1284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1284c:	2002      	movs	r0, #2
   1284e:	e7fb      	b.n	12848 <nmgr_def_taskstat_read+0x16c>
   12850:	00026da4 	.word	0x00026da4
   12854:	000276e0 	.word	0x000276e0
   12858:	00027058 	.word	0x00027058
   1285c:	00027060 	.word	0x00027060
   12860:	00027064 	.word	0x00027064
   12864:	0002706c 	.word	0x0002706c
   12868:	00027074 	.word	0x00027074
   1286c:	0002707c 	.word	0x0002707c
   12870:	00027084 	.word	0x00027084
   12874:	0002708c 	.word	0x0002708c
   12878:	0002709c 	.word	0x0002709c

0001287c <nmgr_os_groups_register>:

int
nmgr_os_groups_register(void)
{
   1287c:	b508      	push	{r3, lr}
    return mgmt_group_register(&nmgr_def_group);
   1287e:	4802      	ldr	r0, [pc, #8]	; (12888 <nmgr_os_groups_register+0xc>)
   12880:	f7ff fbac 	bl	11fdc <mgmt_group_register>
}
   12884:	bd08      	pop	{r3, pc}
   12886:	bf00      	nop
   12888:	2000028c 	.word	0x2000028c

0001288c <dpl_cputime_timer_init>:
    dpl_cputime_delay_ticks(ticks);
}

void
dpl_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   1288c:	b510      	push	{r4, lr}
    assert(timer != NULL);
   1288e:	b140      	cbz	r0, 128a2 <dpl_cputime_timer_init+0x16>
   12890:	460c      	mov	r4, r1
   12892:	4613      	mov	r3, r2
   12894:	4601      	mov	r1, r0
    assert(fp != NULL);
   12896:	b154      	cbz	r4, 128ae <dpl_cputime_timer_init+0x22>
    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   12898:	4622      	mov	r2, r4
   1289a:	2000      	movs	r0, #0
   1289c:	f00c fbd0 	bl	1f040 <hal_timer_set_cb>
}
   128a0:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   128a2:	2300      	movs	r3, #0
   128a4:	461a      	mov	r2, r3
   128a6:	4619      	mov	r1, r3
   128a8:	4618      	mov	r0, r3
   128aa:	f7f6 fc8b 	bl	91c4 <__assert_func>
    assert(fp != NULL);
   128ae:	2300      	movs	r3, #0
   128b0:	461a      	mov	r2, r3
   128b2:	4619      	mov	r1, r3
   128b4:	4618      	mov	r0, r3
   128b6:	f7f6 fc85 	bl	91c4 <__assert_func>

000128ba <dpl_cputime_timer_start>:

int
dpl_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   128ba:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   128bc:	f00c fbd6 	bl	1f06c <hal_timer_start_at>
    return rc;
}
   128c0:	bd08      	pop	{r3, pc}

000128c2 <dpl_cputime_timer_stop>:
    return rc;
}

void
dpl_cputime_timer_stop(struct hal_timer *timer)
{
   128c2:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   128c4:	f00c fc18 	bl	1f0f8 <hal_timer_stop>
}
   128c8:	bd08      	pop	{r3, pc}

000128ca <dpl_cputime_get32>:

uint32_t
dpl_cputime_get32(void)
{
   128ca:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   128cc:	2000      	movs	r0, #0
   128ce:	f00c fb9f 	bl	1f010 <hal_timer_read>
return cpu_time;
}
   128d2:	bd08      	pop	{r3, pc}

000128d4 <dpl_cputime_delay_ticks>:
{
   128d4:	b510      	push	{r4, lr}
   128d6:	4604      	mov	r4, r0
    until = dpl_cputime_get32() + ticks;
   128d8:	f7ff fff7 	bl	128ca <dpl_cputime_get32>
   128dc:	4404      	add	r4, r0
    while ((int32_t)(dpl_cputime_get32() - until) < 0) {
   128de:	f7ff fff4 	bl	128ca <dpl_cputime_get32>
   128e2:	1b00      	subs	r0, r0, r4
   128e4:	2800      	cmp	r0, #0
   128e6:	dbfa      	blt.n	128de <dpl_cputime_delay_ticks+0xa>
}
   128e8:	bd10      	pop	{r4, pc}

000128ea <dpl_cputime_delay_usecs>:
{
   128ea:	b508      	push	{r3, lr}
    dpl_cputime_delay_ticks(ticks);
   128ec:	f7ff fff2 	bl	128d4 <dpl_cputime_delay_ticks>
}
   128f0:	bd08      	pop	{r3, pc}

000128f2 <dpl_cputime_timer_relative>:
{
   128f2:	b538      	push	{r3, r4, r5, lr}
    assert(timer != NULL);
   128f4:	b140      	cbz	r0, 12908 <dpl_cputime_timer_relative+0x16>
   128f6:	460c      	mov	r4, r1
   128f8:	4605      	mov	r5, r0
    cputime = dpl_cputime_get32() + dpl_cputime_usecs_to_ticks(usecs);
   128fa:	f7ff ffe6 	bl	128ca <dpl_cputime_get32>
    rc = hal_timer_start_at(timer, cputime);
   128fe:	1901      	adds	r1, r0, r4
   12900:	4628      	mov	r0, r5
   12902:	f00c fbb3 	bl	1f06c <hal_timer_start_at>
}
   12906:	bd38      	pop	{r3, r4, r5, pc}
    assert(timer != NULL);
   12908:	2300      	movs	r3, #0
   1290a:	461a      	mov	r2, r3
   1290c:	4619      	mov	r1, r3
   1290e:	4618      	mov	r0, r3
   12910:	f7f6 fc58 	bl	91c4 <__assert_func>

00012914 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct dpl_mempool *mempool,
                   struct dpl_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   12914:	b5f0      	push	{r4, r5, r6, r7, lr}
   12916:	b083      	sub	sp, #12
   12918:	460d      	mov	r5, r1
   1291a:	4617      	mov	r7, r2
    int rc;

    rc = dpl_mempool_init(mempool, num_blocks, block_size, mem, name);
   1291c:	b29e      	uxth	r6, r3
   1291e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12920:	9300      	str	r3, [sp, #0]
   12922:	4603      	mov	r3, r0
   12924:	9a08      	ldr	r2, [sp, #32]
   12926:	4631      	mov	r1, r6
   12928:	4628      	mov	r0, r5
   1292a:	f000 f82f 	bl	1298c <dpl_mempool_init>
    if (rc != 0) {
   1292e:	b108      	cbz	r0, 12934 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12930:	b003      	add	sp, #12
   12932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = dpl_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   12934:	4633      	mov	r3, r6
   12936:	9a08      	ldr	r2, [sp, #32]
   12938:	b292      	uxth	r2, r2
   1293a:	4629      	mov	r1, r5
   1293c:	4638      	mov	r0, r7
   1293e:	f000 f8cd 	bl	12adc <dpl_mbuf_pool_init>
    if (rc != 0) {
   12942:	e7f5      	b.n	12930 <mem_init_mbuf_pool+0x1c>

00012944 <mem_split_frag>:
 *                              NULL on failure.
 */
struct dpl_mbuf *
mem_split_frag(struct dpl_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   12944:	b570      	push	{r4, r5, r6, lr}
   12946:	4604      	mov	r4, r0
   12948:	460d      	mov	r5, r1
   1294a:	4619      	mov	r1, r3
    struct dpl_mbuf *frag;
    int rc;

    if (DPL_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1294c:	6806      	ldr	r6, [r0, #0]
   1294e:	8a33      	ldrh	r3, [r6, #16]
   12950:	42ab      	cmp	r3, r5
   12952:	d913      	bls.n	1297c <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   12954:	4628      	mov	r0, r5
   12956:	4790      	blx	r2
    if (frag == NULL) {
   12958:	4606      	mov	r6, r0
   1295a:	b190      	cbz	r0, 12982 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = dpl_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1295c:	462b      	mov	r3, r5
   1295e:	2200      	movs	r2, #0
   12960:	6821      	ldr	r1, [r4, #0]
   12962:	f000 f957 	bl	12c14 <dpl_mbuf_appendfrom>
    if (rc != 0) {
   12966:	b960      	cbnz	r0, 12982 <mem_split_frag+0x3e>
        goto err;
    }
    dpl_mbuf_adj(*om, max_frag_sz);
   12968:	4629      	mov	r1, r5
   1296a:	6820      	ldr	r0, [r4, #0]
   1296c:	f000 f97e 	bl	12c6c <dpl_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = dpl_mbuf_trim_front(*om);
   12970:	6820      	ldr	r0, [r4, #0]
   12972:	f000 f9d2 	bl	12d1a <dpl_mbuf_trim_front>
   12976:	6020      	str	r0, [r4, #0]
    return frag;

err:
    dpl_mbuf_free_chain(frag);
    return NULL;
}
   12978:	4630      	mov	r0, r6
   1297a:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1297c:	2300      	movs	r3, #0
   1297e:	6003      	str	r3, [r0, #0]
        return frag;
   12980:	e7fa      	b.n	12978 <mem_split_frag+0x34>
    dpl_mbuf_free_chain(frag);
   12982:	4630      	mov	r0, r6
   12984:	f000 f8d0 	bl	12b28 <dpl_mbuf_free_chain>
    return NULL;
   12988:	2600      	movs	r6, #0
   1298a:	e7f5      	b.n	12978 <mem_split_frag+0x34>

0001298c <dpl_mempool_init>:
    int true_block_size;
    uint8_t *block_addr;
    struct dpl_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1298c:	2800      	cmp	r0, #0
   1298e:	d035      	beq.n	129fc <dpl_mempool_init+0x70>
{
   12990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12992:	460c      	mov	r4, r1
   12994:	461d      	mov	r5, r3
   12996:	4606      	mov	r6, r0
    if (!mp || (block_size == 0)) {
   12998:	2a00      	cmp	r2, #0
   1299a:	d031      	beq.n	12a00 <dpl_mempool_init+0x74>
        return DPL_INVALID_PARAM;
    }

    if ((!membuf) && (blocks != 0)) {
   1299c:	b1c3      	cbz	r3, 129d0 <dpl_mempool_init+0x44>
        return DPL_INVALID_PARAM;
    }

    if (membuf != NULL) {
   1299e:	b115      	cbz	r5, 129a6 <dpl_mempool_init+0x1a>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uintptr_t)membuf & (DPL_ALIGNMENT - 1)) != 0) {
   129a0:	f015 0f03 	tst.w	r5, #3
   129a4:	d12e      	bne.n	12a04 <dpl_mempool_init+0x78>
            return DPL_MEM_NOT_ALIGNED;
        }
    }
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   129a6:	f012 0f03 	tst.w	r2, #3
   129aa:	d015      	beq.n	129d8 <dpl_mempool_init+0x4c>
   129ac:	f022 0703 	bic.w	r7, r2, #3
   129b0:	3704      	adds	r7, #4

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   129b2:	6032      	str	r2, [r6, #0]
    mp->mp_num_free = blocks;
   129b4:	80f4      	strh	r4, [r6, #6]
    mp->mp_min_free = blocks;
   129b6:	8134      	strh	r4, [r6, #8]
    mp->mp_flags = 0;
   129b8:	2300      	movs	r3, #0
   129ba:	72b3      	strb	r3, [r6, #10]
    mp->mp_num_blocks = blocks;
   129bc:	80b4      	strh	r4, [r6, #4]
    mp->mp_membuf_addr = (uintptr_t)membuf;
   129be:	60f5      	str	r5, [r6, #12]
    mp->name = name;
   129c0:	9b06      	ldr	r3, [sp, #24]
   129c2:	61b3      	str	r3, [r6, #24]
    dpl_mempool_poison(membuf, true_block_size);
    SLIST_FIRST(mp) = membuf;
   129c4:	6175      	str	r5, [r6, #20]
    return (dpl_error_t)os_mutex_init(&mu->mu);
   129c6:	f106 001c 	add.w	r0, r6, #28
   129ca:	f7f8 f93b 	bl	ac44 <os_mutex_init>
    dpl_mutex_init(&mp->mutex);

    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)membuf;
    block_ptr = (struct dpl_memblock *)block_addr;
    while (blocks > 1) {
   129ce:	e00a      	b.n	129e6 <dpl_mempool_init+0x5a>
    if ((!membuf) && (blocks != 0)) {
   129d0:	2900      	cmp	r1, #0
   129d2:	d0e4      	beq.n	1299e <dpl_mempool_init+0x12>
        return DPL_INVALID_PARAM;
   129d4:	2003      	movs	r0, #3
   129d6:	e010      	b.n	129fa <dpl_mempool_init+0x6e>
    true_block_size = DPL_MEM_TRUE_BLOCK_SIZE(block_size);
   129d8:	4617      	mov	r7, r2
   129da:	e7ea      	b.n	129b2 <dpl_mempool_init+0x26>
        block_addr += true_block_size;
   129dc:	19eb      	adds	r3, r5, r7
        dpl_mempool_poison(block_addr, true_block_size);
        SLIST_NEXT(block_ptr, mb_next) = (struct dpl_memblock *)block_addr;
   129de:	602b      	str	r3, [r5, #0]
        block_ptr = (struct dpl_memblock *)block_addr;
        --blocks;
   129e0:	3c01      	subs	r4, #1
   129e2:	b2a4      	uxth	r4, r4
        block_addr += true_block_size;
   129e4:	461d      	mov	r5, r3
    while (blocks > 1) {
   129e6:	2c01      	cmp	r4, #1
   129e8:	d8f8      	bhi.n	129dc <dpl_mempool_init+0x50>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   129ea:	2000      	movs	r0, #0
   129ec:	6028      	str	r0, [r5, #0]

    STAILQ_INSERT_TAIL(&g_dpl_mempool_list, mp, mp_list);
   129ee:	6130      	str	r0, [r6, #16]
   129f0:	4b05      	ldr	r3, [pc, #20]	; (12a08 <dpl_mempool_init+0x7c>)
   129f2:	685a      	ldr	r2, [r3, #4]
   129f4:	6016      	str	r6, [r2, #0]
   129f6:	3610      	adds	r6, #16
   129f8:	605e      	str	r6, [r3, #4]

    return DPL_OK;
}
   129fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DPL_INVALID_PARAM;
   129fc:	2003      	movs	r0, #3
}
   129fe:	4770      	bx	lr
        return DPL_INVALID_PARAM;
   12a00:	2003      	movs	r0, #3
   12a02:	e7fa      	b.n	129fa <dpl_mempool_init+0x6e>
            return DPL_MEM_NOT_ALIGNED;
   12a04:	2004      	movs	r0, #4
   12a06:	e7f8      	b.n	129fa <dpl_mempool_init+0x6e>
   12a08:	20000298 	.word	0x20000298

00012a0c <dpl_memblock_get>:
    return 1;
}

void *
dpl_memblock_get(struct dpl_mempool *mp)
{
   12a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dpl_sr_t sr;
    struct dpl_memblock *block;

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   12a0e:	4604      	mov	r4, r0
   12a10:	b1f8      	cbz	r0, 12a52 <dpl_memblock_get+0x46>
    return os_arch_save_sr();
   12a12:	f7f7 fe23 	bl	a65c <os_arch_save_sr>
   12a16:	4605      	mov	r5, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   12a18:	f104 071c 	add.w	r7, r4, #28
   12a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a20:	4638      	mov	r0, r7
   12a22:	f7f8 f975 	bl	ad10 <os_mutex_pend>
        DPL_ENTER_CRITICAL(sr);
        dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);
        /* Check for any free */
        if (mp->mp_num_free) {
   12a26:	88e3      	ldrh	r3, [r4, #6]
   12a28:	b153      	cbz	r3, 12a40 <dpl_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   12a2a:	6966      	ldr	r6, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   12a2c:	6832      	ldr	r2, [r6, #0]
   12a2e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   12a30:	3b01      	subs	r3, #1
   12a32:	b29b      	uxth	r3, r3
   12a34:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   12a36:	8922      	ldrh	r2, [r4, #8]
   12a38:	4293      	cmp	r3, r2
   12a3a:	d202      	bcs.n	12a42 <dpl_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
   12a3c:	8123      	strh	r3, [r4, #8]
   12a3e:	e000      	b.n	12a42 <dpl_memblock_get+0x36>
    block = NULL;
   12a40:	2600      	movs	r6, #0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12a42:	4638      	mov	r0, r7
   12a44:	f7f8 f908 	bl	ac58 <os_mutex_release>
    os_arch_restore_sr(ctx);
   12a48:	4628      	mov	r0, r5
   12a4a:	f7f7 fe0d 	bl	a668 <os_arch_restore_sr>
            dpl_mempool_poison_check(block, DPL_MEMPOOL_TRUE_BLOCK_SIZE(mp));
        }
    }

    return (void *)block;
}
   12a4e:	4630      	mov	r0, r6
   12a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    block = NULL;
   12a52:	4606      	mov	r6, r0
    return (void *)block;
   12a54:	e7fb      	b.n	12a4e <dpl_memblock_get+0x42>

00012a56 <dpl_memblock_put_from_cb>:

dpl_error_t
dpl_memblock_put_from_cb(struct dpl_mempool *mp, void *block_addr)
{
   12a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a58:	4604      	mov	r4, r0
   12a5a:	460d      	mov	r5, r1
    return os_arch_save_sr();
   12a5c:	f7f7 fdfe 	bl	a65c <os_arch_save_sr>
   12a60:	4606      	mov	r6, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   12a62:	f104 071c 	add.w	r7, r4, #28
   12a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12a6a:	4638      	mov	r0, r7
   12a6c:	f7f8 f950 	bl	ad10 <os_mutex_pend>
    block = (struct dpl_memblock *)block_addr;
    DPL_ENTER_CRITICAL(sr);
    dpl_mutex_pend(&mp->mutex, DPL_WAIT_FOREVER);

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   12a70:	6963      	ldr	r3, [r4, #20]
   12a72:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   12a74:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   12a76:	88e3      	ldrh	r3, [r4, #6]
   12a78:	3301      	adds	r3, #1
   12a7a:	80e3      	strh	r3, [r4, #6]
    return (dpl_error_t)os_mutex_release(&mu->mu);
   12a7c:	4638      	mov	r0, r7
   12a7e:	f7f8 f8eb 	bl	ac58 <os_mutex_release>
    os_arch_restore_sr(ctx);
   12a82:	4630      	mov	r0, r6
   12a84:	f7f7 fdf0 	bl	a668 <os_arch_restore_sr>

    dpl_mutex_release(&mp->mutex);
    DPL_EXIT_CRITICAL(sr);

    return DPL_OK;
}
   12a88:	2000      	movs	r0, #0
   12a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012a8c <dpl_memblock_put>:
#if MYNEWT_VAL(DPL_MEMPOOL_CHECK)
    struct dpl_memblock *block;
#endif

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   12a8c:	b178      	cbz	r0, 12aae <dpl_memblock_put+0x22>
   12a8e:	4603      	mov	r3, r0
   12a90:	b179      	cbz	r1, 12ab2 <dpl_memblock_put+0x26>
{
   12a92:	b510      	push	{r4, lr}
#endif

    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & DPL_MEMPOOL_F_EXT) {
   12a94:	7a82      	ldrb	r2, [r0, #10]
   12a96:	f012 0f01 	tst.w	r2, #1
   12a9a:	d004      	beq.n	12aa6 <dpl_memblock_put+0x1a>
        mpe = (struct dpl_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   12a9c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   12a9e:	b114      	cbz	r4, 12aa6 <dpl_memblock_put+0x1a>
            rc = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   12aa0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   12aa2:	47a0      	blx	r4
            return rc;
   12aa4:	e002      	b.n	12aac <dpl_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    return dpl_memblock_put_from_cb(mp, block_addr);
   12aa6:	4618      	mov	r0, r3
   12aa8:	f7ff ffd5 	bl	12a56 <dpl_memblock_put_from_cb>
}
   12aac:	bd10      	pop	{r4, pc}
        return DPL_INVALID_PARAM;
   12aae:	2003      	movs	r0, #3
   12ab0:	4770      	bx	lr
   12ab2:	2003      	movs	r0, #3
}
   12ab4:	4770      	bx	lr

00012ab6 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   12ab6:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   12ab8:	6803      	ldr	r3, [r0, #0]
   12aba:	685b      	ldr	r3, [r3, #4]
   12abc:	4798      	blx	r3
}
   12abe:	bd08      	pop	{r3, pc}

00012ac0 <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   12ac0:	b40e      	push	{r1, r2, r3}
   12ac2:	b500      	push	{lr}
   12ac4:	b082      	sub	sp, #8
   12ac6:	aa03      	add	r2, sp, #12
   12ac8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   12acc:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   12ace:	f7ff fff2 	bl	12ab6 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   12ad2:	b002      	add	sp, #8
   12ad4:	f85d eb04 	ldr.w	lr, [sp], #4
   12ad8:	b003      	add	sp, #12
   12ada:	4770      	bx	lr

00012adc <dpl_mbuf_pool_init>:

int
dpl_mbuf_pool_init(struct dpl_mbuf_pool *omp, struct dpl_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct dpl_mbuf);
   12adc:	3a10      	subs	r2, #16
   12ade:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   12ae0:	6041      	str	r1, [r0, #4]

    return (0);
}
   12ae2:	2000      	movs	r0, #0
   12ae4:	4770      	bx	lr

00012ae6 <dpl_mbuf_get>:

struct dpl_mbuf *
dpl_mbuf_get(struct dpl_mbuf_pool *omp, uint16_t leadingspace)
{
   12ae6:	b538      	push	{r3, r4, r5, lr}
    struct dpl_mbuf *om;

    if (leadingspace > omp->omp_databuf_len) {
   12ae8:	8803      	ldrh	r3, [r0, #0]
   12aea:	428b      	cmp	r3, r1
   12aec:	d310      	bcc.n	12b10 <dpl_mbuf_get+0x2a>
   12aee:	4604      	mov	r4, r0
   12af0:	460d      	mov	r5, r1
        goto err;
    }

    om = dpl_memblock_get(omp->omp_pool);
   12af2:	6840      	ldr	r0, [r0, #4]
   12af4:	f7ff ff8a 	bl	12a0c <dpl_memblock_get>
    if (!om) {
   12af8:	b148      	cbz	r0, 12b0e <dpl_mbuf_get+0x28>
        goto err;
    }

    SLIST_NEXT(om, om_next) = NULL;
   12afa:	2300      	movs	r3, #0
   12afc:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   12afe:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   12b00:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   12b02:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   12b04:	f100 0110 	add.w	r1, r0, #16
   12b08:	440d      	add	r5, r1
   12b0a:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   12b0c:	6084      	str	r4, [r0, #8]

    return (om);
err:
    return (NULL);
}
   12b0e:	bd38      	pop	{r3, r4, r5, pc}
    return (NULL);
   12b10:	2000      	movs	r0, #0
   12b12:	e7fc      	b.n	12b0e <dpl_mbuf_get+0x28>

00012b14 <dpl_mbuf_free>:
    return om;
}

int
dpl_mbuf_free(struct dpl_mbuf *om)
{
   12b14:	b508      	push	{r3, lr}
    int rc;

    if (om->om_omp != NULL) {
   12b16:	6883      	ldr	r3, [r0, #8]
   12b18:	b123      	cbz	r3, 12b24 <dpl_mbuf_free+0x10>
   12b1a:	4601      	mov	r1, r0
        rc = dpl_memblock_put(om->om_omp->omp_pool, om);
   12b1c:	6858      	ldr	r0, [r3, #4]
   12b1e:	f7ff ffb5 	bl	12a8c <dpl_memblock_put>
    }

    return (0);
err:
    return (rc);
}
   12b22:	bd08      	pop	{r3, pc}
    return (0);
   12b24:	2000      	movs	r0, #0
   12b26:	e7fc      	b.n	12b22 <dpl_mbuf_free+0xe>

00012b28 <dpl_mbuf_free_chain>:
dpl_mbuf_free_chain(struct dpl_mbuf *om)
{
    struct dpl_mbuf *next;
    int rc;

    while (om != NULL) {
   12b28:	b158      	cbz	r0, 12b42 <dpl_mbuf_free_chain+0x1a>
{
   12b2a:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   12b2c:	68c4      	ldr	r4, [r0, #12]

        rc = dpl_mbuf_free(om);
   12b2e:	f7ff fff1 	bl	12b14 <dpl_mbuf_free>
        if (rc != 0) {
   12b32:	4603      	mov	r3, r0
   12b34:	b918      	cbnz	r0, 12b3e <dpl_mbuf_free_chain+0x16>
            goto err;
        }

        om = next;
   12b36:	4620      	mov	r0, r4
    while (om != NULL) {
   12b38:	2c00      	cmp	r4, #0
   12b3a:	d1f7      	bne.n	12b2c <dpl_mbuf_free_chain+0x4>
    }

    return (0);
   12b3c:	2300      	movs	r3, #0
err:
    return (rc);
}
   12b3e:	4618      	mov	r0, r3
   12b40:	bd10      	pop	{r4, pc}
    return (0);
   12b42:	2300      	movs	r3, #0
}
   12b44:	4618      	mov	r0, r3
   12b46:	4770      	bx	lr

00012b48 <dpl_mbuf_append>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

int
dpl_mbuf_append(struct dpl_mbuf *om, const void *data,  uint16_t len)
{
   12b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct dpl_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   12b4c:	2800      	cmp	r0, #0
   12b4e:	d04b      	beq.n	12be8 <dpl_mbuf_append+0xa0>
   12b50:	460f      	mov	r7, r1
   12b52:	4691      	mov	r9, r2
   12b54:	4682      	mov	sl, r0
        rc = DPL_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   12b56:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   12b5a:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   12b5c:	461e      	mov	r6, r3
   12b5e:	68db      	ldr	r3, [r3, #12]
   12b60:	2b00      	cmp	r3, #0
   12b62:	d1fb      	bne.n	12b5c <dpl_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   12b64:	464d      	mov	r5, r9
static inline uint16_t
_dpl_mbuf_trailingspace(struct dpl_mbuf *om)
{
    struct dpl_mbuf_pool *omp;

    omp = om->om_omp;
   12b66:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   12b68:	f106 0410 	add.w	r4, r6, #16
   12b6c:	881b      	ldrh	r3, [r3, #0]
   12b6e:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   12b70:	6830      	ldr	r0, [r6, #0]
   12b72:	88f3      	ldrh	r3, [r6, #6]
   12b74:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   12b76:	1a24      	subs	r4, r4, r0
   12b78:	b2a4      	uxth	r4, r4
    space = DPL_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   12b7a:	b164      	cbz	r4, 12b96 <dpl_mbuf_append+0x4e>
        if (space > remainder) {
   12b7c:	454c      	cmp	r4, r9
   12b7e:	dd00      	ble.n	12b82 <dpl_mbuf_append+0x3a>
            space = remainder;
   12b80:	464c      	mov	r4, r9
        }

        memcpy(DPL_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   12b82:	4622      	mov	r2, r4
   12b84:	4639      	mov	r1, r7
   12b86:	f7fd fd6b 	bl	10660 <memcpy>

        last->om_len += space;
   12b8a:	88f3      	ldrh	r3, [r6, #6]
   12b8c:	4423      	add	r3, r4
   12b8e:	80f3      	strh	r3, [r6, #6]
        data += space;
   12b90:	4427      	add	r7, r4
        remainder -= space;
   12b92:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   12b96:	2d00      	cmp	r5, #0
   12b98:	dd16      	ble.n	12bc8 <dpl_mbuf_append+0x80>
        new = dpl_mbuf_get(omp, 0);
   12b9a:	2100      	movs	r1, #0
   12b9c:	4640      	mov	r0, r8
   12b9e:	f7ff ffa2 	bl	12ae6 <dpl_mbuf_get>
        if (!new) {
   12ba2:	4604      	mov	r4, r0
   12ba4:	b180      	cbz	r0, 12bc8 <dpl_mbuf_append+0x80>
            break;
        }

        new->om_len = mynewt_min(omp->omp_databuf_len, remainder);
   12ba6:	f8b8 2000 	ldrh.w	r2, [r8]
   12baa:	42aa      	cmp	r2, r5
   12bac:	bfa8      	it	ge
   12bae:	462a      	movge	r2, r5
   12bb0:	b292      	uxth	r2, r2
   12bb2:	80c2      	strh	r2, [r0, #6]
        memcpy(DPL_MBUF_DATA(new, void *), data, new->om_len);
   12bb4:	4639      	mov	r1, r7
   12bb6:	6800      	ldr	r0, [r0, #0]
   12bb8:	f7fd fd52 	bl	10660 <memcpy>
        data += new->om_len;
   12bbc:	88e3      	ldrh	r3, [r4, #6]
   12bbe:	441f      	add	r7, r3
        remainder -= new->om_len;
   12bc0:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   12bc2:	60f4      	str	r4, [r6, #12]
        last = new;
   12bc4:	4626      	mov	r6, r4
   12bc6:	e7e6      	b.n	12b96 <dpl_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (DPL_MBUF_IS_PKTHDR(om)) {
   12bc8:	f89a 3005 	ldrb.w	r3, [sl, #5]
   12bcc:	2b07      	cmp	r3, #7
   12bce:	d907      	bls.n	12be0 <dpl_mbuf_append+0x98>
        DPL_MBUF_PKTHDR(om)->omp_len += len - remainder;
   12bd0:	eba9 0905 	sub.w	r9, r9, r5
   12bd4:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   12bd8:	fa13 f989 	uxtah	r9, r3, r9
   12bdc:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   12be0:	b925      	cbnz	r5, 12bec <dpl_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   12be2:	4628      	mov	r0, r5
   12be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = DPL_EINVAL;
   12be8:	2502      	movs	r5, #2
   12bea:	e7fa      	b.n	12be2 <dpl_mbuf_append+0x9a>
        rc = DPL_ENOMEM;
   12bec:	2501      	movs	r5, #1
   12bee:	e7f8      	b.n	12be2 <dpl_mbuf_append+0x9a>

00012bf0 <dpl_mbuf_off>:

    /* Cast away const. */
    cur = (struct dpl_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   12bf0:	b178      	cbz	r0, 12c12 <dpl_mbuf_off+0x22>
{
   12bf2:	b410      	push	{r4}
   12bf4:	e002      	b.n	12bfc <dpl_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   12bf6:	1ac9      	subs	r1, r1, r3
        cur = next;
   12bf8:	4620      	mov	r0, r4
        if (cur == NULL) {
   12bfa:	b13c      	cbz	r4, 12c0c <dpl_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   12bfc:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   12bfe:	88c3      	ldrh	r3, [r0, #6]
   12c00:	428b      	cmp	r3, r1
   12c02:	dc02      	bgt.n	12c0a <dpl_mbuf_off+0x1a>
   12c04:	d1f7      	bne.n	12bf6 <dpl_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   12c06:	2c00      	cmp	r4, #0
   12c08:	d1f5      	bne.n	12bf6 <dpl_mbuf_off+0x6>
            *out_off = off;
   12c0a:	8011      	strh	r1, [r2, #0]
    }
}
   12c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
   12c10:	4770      	bx	lr
   12c12:	4770      	bx	lr

00012c14 <dpl_mbuf_appendfrom>:
{
   12c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c16:	b083      	sub	sp, #12
   12c18:	4607      	mov	r7, r0
   12c1a:	4608      	mov	r0, r1
   12c1c:	4611      	mov	r1, r2
   12c1e:	461e      	mov	r6, r3
    src_cur_om = dpl_mbuf_off(src, src_off, &src_cur_off);
   12c20:	f10d 0206 	add.w	r2, sp, #6
   12c24:	f7ff ffe4 	bl	12bf0 <dpl_mbuf_off>
   12c28:	4605      	mov	r5, r0
    while (len > 0) {
   12c2a:	e005      	b.n	12c38 <dpl_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   12c2c:	1b34      	subs	r4, r6, r4
   12c2e:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   12c30:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   12c32:	2300      	movs	r3, #0
   12c34:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   12c38:	b196      	cbz	r6, 12c60 <dpl_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   12c3a:	b1ad      	cbz	r5, 12c68 <dpl_mbuf_appendfrom+0x54>
        chunk_sz = mynewt_min(len, src_cur_om->om_len - src_cur_off);
   12c3c:	88ec      	ldrh	r4, [r5, #6]
   12c3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   12c42:	1ae4      	subs	r4, r4, r3
   12c44:	42b4      	cmp	r4, r6
   12c46:	bfa8      	it	ge
   12c48:	4634      	movge	r4, r6
   12c4a:	b2a4      	uxth	r4, r4
        rc = dpl_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   12c4c:	6829      	ldr	r1, [r5, #0]
   12c4e:	4622      	mov	r2, r4
   12c50:	4419      	add	r1, r3
   12c52:	4638      	mov	r0, r7
   12c54:	f7ff ff78 	bl	12b48 <dpl_mbuf_append>
        if (rc != 0) {
   12c58:	4603      	mov	r3, r0
   12c5a:	2800      	cmp	r0, #0
   12c5c:	d0e6      	beq.n	12c2c <dpl_mbuf_appendfrom+0x18>
   12c5e:	e000      	b.n	12c62 <dpl_mbuf_appendfrom+0x4e>
    return 0;
   12c60:	2300      	movs	r3, #0
}
   12c62:	4618      	mov	r0, r3
   12c64:	b003      	add	sp, #12
   12c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return DPL_EINVAL;
   12c68:	2302      	movs	r3, #2
   12c6a:	e7fa      	b.n	12c62 <dpl_mbuf_appendfrom+0x4e>

00012c6c <dpl_mbuf_adj>:
{
    int len = req_len;
    struct dpl_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   12c6c:	2800      	cmp	r0, #0
   12c6e:	d053      	beq.n	12d18 <dpl_mbuf_adj+0xac>
{
   12c70:	b510      	push	{r4, lr}
   12c72:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   12c74:	2900      	cmp	r1, #0
   12c76:	db1b      	blt.n	12cb0 <dpl_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   12c78:	4603      	mov	r3, r0
    int len = req_len;
   12c7a:	460a      	mov	r2, r1
   12c7c:	e005      	b.n	12c8a <dpl_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   12c7e:	1a80      	subs	r0, r0, r2
   12c80:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   12c82:	6818      	ldr	r0, [r3, #0]
   12c84:	4402      	add	r2, r0
   12c86:	601a      	str	r2, [r3, #0]
                len = 0;
   12c88:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   12c8a:	b14b      	cbz	r3, 12ca0 <dpl_mbuf_adj+0x34>
   12c8c:	2a00      	cmp	r2, #0
   12c8e:	dd07      	ble.n	12ca0 <dpl_mbuf_adj+0x34>
            if (m->om_len <= len) {
   12c90:	88d8      	ldrh	r0, [r3, #6]
   12c92:	4290      	cmp	r0, r2
   12c94:	dcf3      	bgt.n	12c7e <dpl_mbuf_adj+0x12>
                len -= m->om_len;
   12c96:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   12c98:	2000      	movs	r0, #0
   12c9a:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   12c9c:	68db      	ldr	r3, [r3, #12]
   12c9e:	e7f4      	b.n	12c8a <dpl_mbuf_adj+0x1e>
            }
        }
        if (DPL_MBUF_IS_PKTHDR(mp))
   12ca0:	7963      	ldrb	r3, [r4, #5]
   12ca2:	2b07      	cmp	r3, #7
   12ca4:	d903      	bls.n	12cae <dpl_mbuf_adj+0x42>
            DPL_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   12ca6:	1a52      	subs	r2, r2, r1
   12ca8:	8a23      	ldrh	r3, [r4, #16]
   12caa:	441a      	add	r2, r3
   12cac:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   12cae:	bd10      	pop	{r4, pc}
        len = -len;
   12cb0:	f1c1 0e00 	rsb	lr, r1, #0
    if ((m = mp) == NULL)
   12cb4:	4603      	mov	r3, r0
        count = 0;
   12cb6:	2200      	movs	r2, #0
            count += m->om_len;
   12cb8:	88d8      	ldrh	r0, [r3, #6]
   12cba:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct dpl_mbuf *)0)
   12cbc:	469c      	mov	ip, r3
   12cbe:	68db      	ldr	r3, [r3, #12]
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d1f9      	bne.n	12cb8 <dpl_mbuf_adj+0x4c>
        if (m->om_len >= len) {
   12cc4:	4570      	cmp	r0, lr
   12cc6:	da0d      	bge.n	12ce4 <dpl_mbuf_adj+0x78>
        if (count < 0)
   12cc8:	188a      	adds	r2, r1, r2
   12cca:	d41a      	bmi.n	12d02 <dpl_mbuf_adj+0x96>
        if (DPL_MBUF_IS_PKTHDR(m))
   12ccc:	7963      	ldrb	r3, [r4, #5]
   12cce:	2b07      	cmp	r3, #7
   12cd0:	d900      	bls.n	12cd4 <dpl_mbuf_adj+0x68>
            DPL_MBUF_PKTHDR(m)->omp_len = count;
   12cd2:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   12cd4:	2c00      	cmp	r4, #0
   12cd6:	d0ea      	beq.n	12cae <dpl_mbuf_adj+0x42>
            if (m->om_len >= count) {
   12cd8:	88e3      	ldrh	r3, [r4, #6]
   12cda:	4293      	cmp	r3, r2
   12cdc:	da13      	bge.n	12d06 <dpl_mbuf_adj+0x9a>
            count -= m->om_len;
   12cde:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   12ce0:	68e4      	ldr	r4, [r4, #12]
   12ce2:	e7f7      	b.n	12cd4 <dpl_mbuf_adj+0x68>
            m->om_len -= len;
   12ce4:	fa1f fe8e 	uxth.w	lr, lr
   12ce8:	eba0 000e 	sub.w	r0, r0, lr
   12cec:	f8ac 0006 	strh.w	r0, [ip, #6]
            if (DPL_MBUF_IS_PKTHDR(mp))
   12cf0:	7963      	ldrb	r3, [r4, #5]
   12cf2:	2b07      	cmp	r3, #7
   12cf4:	d9db      	bls.n	12cae <dpl_mbuf_adj+0x42>
                DPL_MBUF_PKTHDR(mp)->omp_len -= len;
   12cf6:	8a23      	ldrh	r3, [r4, #16]
   12cf8:	eba3 0e0e 	sub.w	lr, r3, lr
   12cfc:	f8a4 e010 	strh.w	lr, [r4, #16]
            return;
   12d00:	e7d5      	b.n	12cae <dpl_mbuf_adj+0x42>
            count = 0;
   12d02:	2200      	movs	r2, #0
   12d04:	e7e2      	b.n	12ccc <dpl_mbuf_adj+0x60>
                m->om_len = count;
   12d06:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   12d08:	68e0      	ldr	r0, [r4, #12]
   12d0a:	2800      	cmp	r0, #0
   12d0c:	d0cf      	beq.n	12cae <dpl_mbuf_adj+0x42>
                    dpl_mbuf_free_chain(SLIST_NEXT(m, om_next));
   12d0e:	f7ff ff0b 	bl	12b28 <dpl_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   12d12:	2300      	movs	r3, #0
   12d14:	60e3      	str	r3, [r4, #12]
   12d16:	e7ca      	b.n	12cae <dpl_mbuf_adj+0x42>
   12d18:	4770      	bx	lr

00012d1a <dpl_mbuf_trim_front>:
    return (NULL);
}

struct dpl_mbuf *
dpl_mbuf_trim_front(struct dpl_mbuf *om)
{
   12d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d1c:	4606      	mov	r6, r0
    struct dpl_mbuf *next;
    struct dpl_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   12d1e:	88c7      	ldrh	r7, [r0, #6]
   12d20:	b9cf      	cbnz	r7, 12d56 <dpl_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   12d22:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   12d24:	b144      	cbz	r4, 12d38 <dpl_mbuf_trim_front+0x1e>
   12d26:	88e3      	ldrh	r3, [r4, #6]
   12d28:	b933      	cbnz	r3, 12d38 <dpl_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   12d2a:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   12d2c:	60f5      	str	r5, [r6, #12]
        dpl_mbuf_free(cur);
   12d2e:	4620      	mov	r0, r4
   12d30:	f7ff fef0 	bl	12b14 <dpl_mbuf_free>

        cur = next;
   12d34:	462c      	mov	r4, r5
   12d36:	e7f5      	b.n	12d24 <dpl_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   12d38:	b16c      	cbz	r4, 12d56 <dpl_mbuf_trim_front+0x3c>
    if (DPL_MBUF_IS_PKTHDR(om)) {
   12d3a:	7963      	ldrb	r3, [r4, #5]
   12d3c:	2b07      	cmp	r3, #7
   12d3e:	d900      	bls.n	12d42 <dpl_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   12d40:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   12d42:	4620      	mov	r0, r4
   12d44:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   12d48:	4407      	add	r7, r0
    leadingspace = (uint16_t) (DPL_MBUF_DATA(om, uint8_t *) -
   12d4a:	1bdf      	subs	r7, r3, r7
   12d4c:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (DPL_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   12d4e:	7972      	ldrb	r2, [r6, #5]
   12d50:	b293      	uxth	r3, r2
   12d52:	42bb      	cmp	r3, r7
   12d54:	d901      	bls.n	12d5a <dpl_mbuf_trim_front+0x40>
        dpl_mbuf_free(om);
        om = cur;
    }

    return om;
}
   12d56:	4630      	mov	r0, r6
   12d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   12d5a:	7162      	strb	r2, [r4, #5]
        memcpy(DPL_MBUF_PKTHDR(cur), DPL_MBUF_PKTHDR(om), om->om_pkthdr_len);
   12d5c:	f106 0110 	add.w	r1, r6, #16
   12d60:	f7fd fc7e 	bl	10660 <memcpy>
        dpl_mbuf_free(om);
   12d64:	4630      	mov	r0, r6
   12d66:	f7ff fed5 	bl	12b14 <dpl_mbuf_free>
        om = cur;
   12d6a:	4626      	mov	r6, r4
   12d6c:	e7f3      	b.n	12d56 <dpl_mbuf_trim_front+0x3c>

00012d6e <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
   12d6e:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   12d70:	f000 fa86 	bl	13280 <conf_ensure_loaded>
}
   12d74:	bd08      	pop	{r3, pc}
	...

00012d78 <conf_init>:
{
   12d78:	b510      	push	{r4, lr}
   12d7a:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
   12d7c:	480c      	ldr	r0, [pc, #48]	; (12db0 <conf_init+0x38>)
   12d7e:	f7f7 ff61 	bl	ac44 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   12d82:	4b0c      	ldr	r3, [pc, #48]	; (12db4 <conf_init+0x3c>)
   12d84:	2200      	movs	r2, #0
   12d86:	601a      	str	r2, [r3, #0]
    conf_store_init();
   12d88:	f000 faea 	bl	13360 <conf_store_init>
    rc = conf_cli_register();
   12d8c:	f000 fa00 	bl	13190 <conf_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   12d90:	b138      	cbz	r0, 12da2 <conf_init+0x2a>
   12d92:	2000      	movs	r0, #0
   12d94:	9000      	str	r0, [sp, #0]
   12d96:	4b08      	ldr	r3, [pc, #32]	; (12db8 <conf_init+0x40>)
   12d98:	681c      	ldr	r4, [r3, #0]
   12d9a:	4603      	mov	r3, r0
   12d9c:	4602      	mov	r2, r0
   12d9e:	4601      	mov	r1, r0
   12da0:	47a0      	blx	r4
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   12da2:	f7f6 fdf1 	bl	9988 <os_eventq_dflt_get>
   12da6:	4905      	ldr	r1, [pc, #20]	; (12dbc <conf_init+0x44>)
   12da8:	f7f6 fd40 	bl	982c <os_eventq_put>
}
   12dac:	b002      	add	sp, #8
   12dae:	bd10      	pop	{r4, pc}
   12db0:	20004130 	.word	0x20004130
   12db4:	2000412c 	.word	0x2000412c
   12db8:	20000308 	.word	0x20000308
   12dbc:	200002a0 	.word	0x200002a0

00012dc0 <conf_lock>:
{
   12dc0:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   12dc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12dc6:	4802      	ldr	r0, [pc, #8]	; (12dd0 <conf_lock+0x10>)
   12dc8:	f7f7 ffa2 	bl	ad10 <os_mutex_pend>
}
   12dcc:	bd08      	pop	{r3, pc}
   12dce:	bf00      	nop
   12dd0:	20004130 	.word	0x20004130

00012dd4 <conf_unlock>:
{
   12dd4:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   12dd6:	4802      	ldr	r0, [pc, #8]	; (12de0 <conf_unlock+0xc>)
   12dd8:	f7f7 ff3e 	bl	ac58 <os_mutex_release>
}
   12ddc:	bd08      	pop	{r3, pc}
   12dde:	bf00      	nop
   12de0:	20004130 	.word	0x20004130

00012de4 <conf_register>:
{
   12de4:	b510      	push	{r4, lr}
   12de6:	4604      	mov	r4, r0
    conf_lock();
   12de8:	f7ff ffea 	bl	12dc0 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   12dec:	4b03      	ldr	r3, [pc, #12]	; (12dfc <conf_register+0x18>)
   12dee:	681a      	ldr	r2, [r3, #0]
   12df0:	6022      	str	r2, [r4, #0]
   12df2:	601c      	str	r4, [r3, #0]
    conf_unlock();
   12df4:	f7ff ffee 	bl	12dd4 <conf_unlock>
}
   12df8:	2000      	movs	r0, #0
   12dfa:	bd10      	pop	{r4, pc}
   12dfc:	2000412c 	.word	0x2000412c

00012e00 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
   12e00:	b538      	push	{r3, r4, r5, lr}
   12e02:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   12e04:	4b06      	ldr	r3, [pc, #24]	; (12e20 <conf_handler_lookup+0x20>)
   12e06:	681c      	ldr	r4, [r3, #0]
   12e08:	e000      	b.n	12e0c <conf_handler_lookup+0xc>
   12e0a:	6824      	ldr	r4, [r4, #0]
   12e0c:	b12c      	cbz	r4, 12e1a <conf_handler_lookup+0x1a>
        if (!strcmp(name, ch->ch_name)) {
   12e0e:	6861      	ldr	r1, [r4, #4]
   12e10:	4628      	mov	r0, r5
   12e12:	f7fd fc5d 	bl	106d0 <strcmp>
   12e16:	2800      	cmp	r0, #0
   12e18:	d1f7      	bne.n	12e0a <conf_handler_lookup+0xa>
            return ch;
        }
    }
    return NULL;
}
   12e1a:	4620      	mov	r0, r4
   12e1c:	bd38      	pop	{r3, r4, r5, pc}
   12e1e:	bf00      	nop
   12e20:	2000412c 	.word	0x2000412c

00012e24 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
   12e24:	b570      	push	{r4, r5, r6, lr}
   12e26:	b082      	sub	sp, #8
   12e28:	460e      	mov	r6, r1
   12e2a:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
   12e2c:	aa01      	add	r2, sp, #4
   12e2e:	4909      	ldr	r1, [pc, #36]	; (12e54 <conf_parse_name+0x30>)
   12e30:	f00f f8d8 	bl	21fe4 <strtok_r>

    i = 0;
   12e34:	2300      	movs	r3, #0
    while (tok) {
   12e36:	e008      	b.n	12e4a <conf_parse_name+0x26>
        name_argv[i++] = tok;
   12e38:	1c5c      	adds	r4, r3, #1
   12e3a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   12e3e:	aa01      	add	r2, sp, #4
   12e40:	4904      	ldr	r1, [pc, #16]	; (12e54 <conf_parse_name+0x30>)
   12e42:	2000      	movs	r0, #0
   12e44:	f00f f8ce 	bl	21fe4 <strtok_r>
        name_argv[i++] = tok;
   12e48:	4623      	mov	r3, r4
    while (tok) {
   12e4a:	2800      	cmp	r0, #0
   12e4c:	d1f4      	bne.n	12e38 <conf_parse_name+0x14>
    }
    *name_argc = i;
   12e4e:	6033      	str	r3, [r6, #0]

    return 0;
}
   12e50:	b002      	add	sp, #8
   12e52:	bd70      	pop	{r4, r5, r6, pc}
   12e54:	000270dc 	.word	0x000270dc

00012e58 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
   12e58:	b510      	push	{r4, lr}
   12e5a:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
   12e5c:	f7ff ffe2 	bl	12e24 <conf_parse_name>
    if (rc) {
   12e60:	b918      	cbnz	r0, 12e6a <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
   12e62:	6820      	ldr	r0, [r4, #0]
   12e64:	f7ff ffcc 	bl	12e00 <conf_handler_lookup>
}
   12e68:	bd10      	pop	{r4, pc}
        return NULL;
   12e6a:	2000      	movs	r0, #0
   12e6c:	e7fc      	b.n	12e68 <conf_parse_and_lookup+0x10>

00012e6e <conf_value_from_str>:
{
    int32_t val;
    int64_t val64;
    char *eptr;

    if (!val_str) {
   12e6e:	2800      	cmp	r0, #0
   12e70:	d051      	beq.n	12f16 <conf_value_from_str+0xa8>
{
   12e72:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e74:	b083      	sub	sp, #12
   12e76:	460c      	mov	r4, r1
   12e78:	4616      	mov	r6, r2
   12e7a:	461d      	mov	r5, r3
   12e7c:	4607      	mov	r7, r0
        goto err;
    }
    switch (type) {
   12e7e:	1e8b      	subs	r3, r1, #2
   12e80:	2b08      	cmp	r3, #8
   12e82:	d84a      	bhi.n	12f1a <conf_value_from_str+0xac>
   12e84:	e8df f003 	tbb	[pc, r3]
   12e88:	32050505 	.word	0x32050505
   12e8c:	4949493d 	.word	0x4949493d
   12e90:	05          	.byte	0x05
   12e91:	00          	.byte	0x00
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        val = strtol(val_str, &eptr, 0);
   12e92:	2200      	movs	r2, #0
   12e94:	a901      	add	r1, sp, #4
   12e96:	f00f f8b5 	bl	22004 <strtol>
        if (*eptr != '\0') {
   12e9a:	9b01      	ldr	r3, [sp, #4]
   12e9c:	781b      	ldrb	r3, [r3, #0]
   12e9e:	2b00      	cmp	r3, #0
   12ea0:	d13e      	bne.n	12f20 <conf_value_from_str+0xb2>
            goto err;
        }
        if (type == CONF_BOOL) {
   12ea2:	2c0a      	cmp	r4, #10
   12ea4:	d007      	beq.n	12eb6 <conf_value_from_str+0x48>
            if (val < 0 || val > 1) {
                goto err;
            }
            *(bool *)vp = val;
        } else if (type == CONF_INT8) {
   12ea6:	2c02      	cmp	r4, #2
   12ea8:	d00d      	beq.n	12ec6 <conf_value_from_str+0x58>
            if (val < INT8_MIN || val > UINT8_MAX) {
                goto err;
            }
            *(int8_t *)vp = val;
        } else if (type == CONF_INT16) {
   12eaa:	2c03      	cmp	r4, #3
   12eac:	d013      	beq.n	12ed6 <conf_value_from_str+0x68>
            if (val < INT16_MIN || val > UINT16_MAX) {
                goto err;
            }
            *(int16_t *)vp = val;
        } else if (type == CONF_INT32) {
   12eae:	2c04      	cmp	r4, #4
   12eb0:	d019      	beq.n	12ee6 <conf_value_from_str+0x78>
        strcpy(vp, val_str);
        break;
    default:
        goto err;
    }
    return 0;
   12eb2:	2000      	movs	r0, #0
   12eb4:	e032      	b.n	12f1c <conf_value_from_str+0xae>
            if (val < 0 || val > 1) {
   12eb6:	2801      	cmp	r0, #1
   12eb8:	d834      	bhi.n	12f24 <conf_value_from_str+0xb6>
            *(bool *)vp = val;
   12eba:	3800      	subs	r0, #0
   12ebc:	bf18      	it	ne
   12ebe:	2001      	movne	r0, #1
   12ec0:	7030      	strb	r0, [r6, #0]
    return 0;
   12ec2:	2000      	movs	r0, #0
   12ec4:	e02a      	b.n	12f1c <conf_value_from_str+0xae>
            if (val < INT8_MIN || val > UINT8_MAX) {
   12ec6:	f100 0380 	add.w	r3, r0, #128	; 0x80
   12eca:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
   12ece:	d22b      	bcs.n	12f28 <conf_value_from_str+0xba>
            *(int8_t *)vp = val;
   12ed0:	7030      	strb	r0, [r6, #0]
    return 0;
   12ed2:	2000      	movs	r0, #0
   12ed4:	e022      	b.n	12f1c <conf_value_from_str+0xae>
            if (val < INT16_MIN || val > UINT16_MAX) {
   12ed6:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
   12eda:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
   12ede:	d225      	bcs.n	12f2c <conf_value_from_str+0xbe>
            *(int16_t *)vp = val;
   12ee0:	8030      	strh	r0, [r6, #0]
    return 0;
   12ee2:	2000      	movs	r0, #0
   12ee4:	e01a      	b.n	12f1c <conf_value_from_str+0xae>
            *(int32_t *)vp = val;
   12ee6:	6030      	str	r0, [r6, #0]
    return 0;
   12ee8:	2000      	movs	r0, #0
   12eea:	e017      	b.n	12f1c <conf_value_from_str+0xae>
        val64 = strtoll(val_str, &eptr, 0);
   12eec:	2200      	movs	r2, #0
   12eee:	a901      	add	r1, sp, #4
   12ef0:	f7fd fc11 	bl	10716 <strtoll>
        if (*eptr != '\0') {
   12ef4:	9b01      	ldr	r3, [sp, #4]
   12ef6:	781b      	ldrb	r3, [r3, #0]
   12ef8:	b9d3      	cbnz	r3, 12f30 <conf_value_from_str+0xc2>
        *(int64_t *)vp = val64;
   12efa:	6030      	str	r0, [r6, #0]
   12efc:	6071      	str	r1, [r6, #4]
    return 0;
   12efe:	2000      	movs	r0, #0
        break;
   12f00:	e00c      	b.n	12f1c <conf_value_from_str+0xae>
        val = strlen(val_str);
   12f02:	f7fd fbf1 	bl	106e8 <strlen>
        if (val + 1 > maxlen) {
   12f06:	42a8      	cmp	r0, r5
   12f08:	da14      	bge.n	12f34 <conf_value_from_str+0xc6>
        strcpy(vp, val_str);
   12f0a:	4639      	mov	r1, r7
   12f0c:	4630      	mov	r0, r6
   12f0e:	f00f f831 	bl	21f74 <strcpy>
    return 0;
   12f12:	2000      	movs	r0, #0
        break;
   12f14:	e002      	b.n	12f1c <conf_value_from_str+0xae>
err:
    return OS_INVALID_PARM;
   12f16:	2003      	movs	r0, #3
}
   12f18:	4770      	bx	lr
    switch (type) {
   12f1a:	2003      	movs	r0, #3
}
   12f1c:	b003      	add	sp, #12
   12f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return OS_INVALID_PARM;
   12f20:	2003      	movs	r0, #3
   12f22:	e7fb      	b.n	12f1c <conf_value_from_str+0xae>
   12f24:	2003      	movs	r0, #3
   12f26:	e7f9      	b.n	12f1c <conf_value_from_str+0xae>
   12f28:	2003      	movs	r0, #3
   12f2a:	e7f7      	b.n	12f1c <conf_value_from_str+0xae>
   12f2c:	2003      	movs	r0, #3
   12f2e:	e7f5      	b.n	12f1c <conf_value_from_str+0xae>
   12f30:	2003      	movs	r0, #3
   12f32:	e7f3      	b.n	12f1c <conf_value_from_str+0xae>
   12f34:	2003      	movs	r0, #3
   12f36:	e7f1      	b.n	12f1c <conf_value_from_str+0xae>

00012f38 <conf_str_from_value>:
    return 0;
}

char *
conf_str_from_value(enum conf_type type, void *vp, char *buf, int buf_len)
{
   12f38:	468c      	mov	ip, r1
    int32_t val;

    if (type == CONF_STRING) {
   12f3a:	2806      	cmp	r0, #6
   12f3c:	d02f      	beq.n	12f9e <conf_str_from_value+0x66>
{
   12f3e:	b510      	push	{r4, lr}
   12f40:	b082      	sub	sp, #8
   12f42:	4614      	mov	r4, r2
   12f44:	4619      	mov	r1, r3
        return vp;
    }
    switch (type) {
   12f46:	2805      	cmp	r0, #5
   12f48:	d01f      	beq.n	12f8a <conf_str_from_value+0x52>
   12f4a:	d903      	bls.n	12f54 <conf_str_from_value+0x1c>
   12f4c:	280a      	cmp	r0, #10
   12f4e:	d005      	beq.n	12f5c <conf_str_from_value+0x24>
   12f50:	2000      	movs	r0, #0
   12f52:	e027      	b.n	12fa4 <conf_str_from_value+0x6c>
   12f54:	1e83      	subs	r3, r0, #2
   12f56:	b2db      	uxtb	r3, r3
   12f58:	2b02      	cmp	r3, #2
   12f5a:	d822      	bhi.n	12fa2 <conf_str_from_value+0x6a>
    case CONF_INT8:
    case CONF_INT16:
    case CONF_INT32:
    case CONF_BOOL:
        if (type == CONF_BOOL) {
   12f5c:	280a      	cmp	r0, #10
   12f5e:	d006      	beq.n	12f6e <conf_str_from_value+0x36>
            val = *(bool *)vp;
        } else if (type == CONF_INT8) {
   12f60:	2802      	cmp	r0, #2
   12f62:	d00c      	beq.n	12f7e <conf_str_from_value+0x46>
            val = *(int8_t *)vp;
        } else if (type == CONF_INT16) {
   12f64:	2803      	cmp	r0, #3
   12f66:	d00d      	beq.n	12f84 <conf_str_from_value+0x4c>
            val = *(int16_t *)vp;
        } else {
            val = *(int32_t *)vp;
   12f68:	f8dc 3000 	ldr.w	r3, [ip]
   12f6c:	e001      	b.n	12f72 <conf_str_from_value+0x3a>
            val = *(bool *)vp;
   12f6e:	f89c 3000 	ldrb.w	r3, [ip]
        }
        snprintf(buf, buf_len, "%ld", (long)val);
   12f72:	4a0d      	ldr	r2, [pc, #52]	; (12fa8 <conf_str_from_value+0x70>)
   12f74:	4620      	mov	r0, r4
   12f76:	f7fd ffc8 	bl	10f0a <snprintf>
        return buf;
   12f7a:	4620      	mov	r0, r4
   12f7c:	e012      	b.n	12fa4 <conf_str_from_value+0x6c>
            val = *(int8_t *)vp;
   12f7e:	f99c 3000 	ldrsb.w	r3, [ip]
   12f82:	e7f6      	b.n	12f72 <conf_str_from_value+0x3a>
            val = *(int16_t *)vp;
   12f84:	f9bc 3000 	ldrsh.w	r3, [ip]
   12f88:	e7f3      	b.n	12f72 <conf_str_from_value+0x3a>
    case CONF_INT64:
        snprintf(buf, buf_len, "%lld", *(long long *)vp);
   12f8a:	e9dc 2300 	ldrd	r2, r3, [ip]
   12f8e:	e9cd 2300 	strd	r2, r3, [sp]
   12f92:	4a06      	ldr	r2, [pc, #24]	; (12fac <conf_str_from_value+0x74>)
   12f94:	4620      	mov	r0, r4
   12f96:	f7fd ffb8 	bl	10f0a <snprintf>
        return buf;
   12f9a:	4620      	mov	r0, r4
   12f9c:	e002      	b.n	12fa4 <conf_str_from_value+0x6c>
        return vp;
   12f9e:	4608      	mov	r0, r1
    default:
        return NULL;
    }
}
   12fa0:	4770      	bx	lr
    switch (type) {
   12fa2:	2000      	movs	r0, #0
}
   12fa4:	b002      	add	sp, #8
   12fa6:	bd10      	pop	{r4, pc}
   12fa8:	000270e0 	.word	0x000270e0
   12fac:	000270e4 	.word	0x000270e4

00012fb0 <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
   12fb0:	b530      	push	{r4, r5, lr}
   12fb2:	b08b      	sub	sp, #44	; 0x2c
   12fb4:	4604      	mov	r4, r0
   12fb6:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   12fb8:	f7ff ff02 	bl	12dc0 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   12fbc:	aa01      	add	r2, sp, #4
   12fbe:	a909      	add	r1, sp, #36	; 0x24
   12fc0:	4620      	mov	r0, r4
   12fc2:	f7ff ff49 	bl	12e58 <conf_parse_and_lookup>
    if (!ch) {
   12fc6:	b158      	cbz	r0, 12fe0 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
   12fc8:	68c3      	ldr	r3, [r0, #12]
   12fca:	462a      	mov	r2, r5
   12fcc:	a902      	add	r1, sp, #8
   12fce:	9809      	ldr	r0, [sp, #36]	; 0x24
   12fd0:	3801      	subs	r0, #1
   12fd2:	4798      	blx	r3
   12fd4:	4604      	mov	r4, r0
out:
    conf_unlock();
   12fd6:	f7ff fefd 	bl	12dd4 <conf_unlock>
    return rc;
}
   12fda:	4620      	mov	r0, r4
   12fdc:	b00b      	add	sp, #44	; 0x2c
   12fde:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   12fe0:	2403      	movs	r4, #3
   12fe2:	e7f8      	b.n	12fd6 <conf_set_value+0x26>

00012fe4 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   12fe4:	b570      	push	{r4, r5, r6, lr}
   12fe6:	b08a      	sub	sp, #40	; 0x28
   12fe8:	4604      	mov	r4, r0
   12fea:	460d      	mov	r5, r1
   12fec:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   12fee:	f7ff fee7 	bl	12dc0 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   12ff2:	aa01      	add	r2, sp, #4
   12ff4:	a909      	add	r1, sp, #36	; 0x24
   12ff6:	4620      	mov	r0, r4
   12ff8:	f7ff ff2e 	bl	12e58 <conf_parse_and_lookup>
    if (!ch) {
   12ffc:	4604      	mov	r4, r0
   12ffe:	b140      	cbz	r0, 13012 <conf_get_value+0x2e>
        goto out;
    }

    if (!ch->ch_get) {
   13000:	6884      	ldr	r4, [r0, #8]
   13002:	b15c      	cbz	r4, 1301c <conf_get_value+0x38>
        goto out;
    }
    rval = ch->ch_get(name_argc - 1, &name_argv[1], buf, buf_len);
   13004:	4633      	mov	r3, r6
   13006:	462a      	mov	r2, r5
   13008:	a902      	add	r1, sp, #8
   1300a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1300c:	3801      	subs	r0, #1
   1300e:	47a0      	blx	r4
   13010:	4604      	mov	r4, r0
out:
    conf_unlock();
   13012:	f7ff fedf 	bl	12dd4 <conf_unlock>
    return rval;
}
   13016:	4620      	mov	r0, r4
   13018:	b00a      	add	sp, #40	; 0x28
   1301a:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
   1301c:	2400      	movs	r4, #0
   1301e:	e7f8      	b.n	13012 <conf_get_value+0x2e>

00013020 <conf_commit>:

int
conf_commit(char *name)
{
   13020:	b530      	push	{r4, r5, lr}
   13022:	b08b      	sub	sp, #44	; 0x2c
   13024:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   13026:	f7ff fecb 	bl	12dc0 <conf_lock>
    if (name) {
   1302a:	b174      	cbz	r4, 1304a <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   1302c:	aa01      	add	r2, sp, #4
   1302e:	a909      	add	r1, sp, #36	; 0x24
   13030:	4620      	mov	r0, r4
   13032:	f7ff ff11 	bl	12e58 <conf_parse_and_lookup>
        if (!ch) {
   13036:	b1b8      	cbz	r0, 13068 <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
   13038:	6903      	ldr	r3, [r0, #16]
   1303a:	b1bb      	cbz	r3, 1306c <conf_commit+0x4c>
            rc = ch->ch_commit();
   1303c:	4798      	blx	r3
   1303e:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   13040:	f7ff fec8 	bl	12dd4 <conf_unlock>
    return rc;
}
   13044:	4628      	mov	r0, r5
   13046:	b00b      	add	sp, #44	; 0x2c
   13048:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1304a:	4b09      	ldr	r3, [pc, #36]	; (13070 <conf_commit+0x50>)
   1304c:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   1304e:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   13050:	e000      	b.n	13054 <conf_commit+0x34>
   13052:	6824      	ldr	r4, [r4, #0]
   13054:	2c00      	cmp	r4, #0
   13056:	d0f3      	beq.n	13040 <conf_commit+0x20>
            if (ch->ch_commit) {
   13058:	6923      	ldr	r3, [r4, #16]
   1305a:	2b00      	cmp	r3, #0
   1305c:	d0f9      	beq.n	13052 <conf_commit+0x32>
                rc2 = ch->ch_commit();
   1305e:	4798      	blx	r3
                if (!rc) {
   13060:	2d00      	cmp	r5, #0
   13062:	d1f6      	bne.n	13052 <conf_commit+0x32>
                    rc = rc2;
   13064:	4605      	mov	r5, r0
   13066:	e7f4      	b.n	13052 <conf_commit+0x32>
            rc = OS_INVALID_PARM;
   13068:	2503      	movs	r5, #3
   1306a:	e7e9      	b.n	13040 <conf_commit+0x20>
            rc = 0;
   1306c:	2500      	movs	r5, #0
   1306e:	e7e7      	b.n	13040 <conf_commit+0x20>
   13070:	2000412c 	.word	0x2000412c

00013074 <conf_running_one>:
};

#if (MYNEWT_VAL(CONFIG_CLI_RW) & 1) == 1
static void
conf_running_one(char *name, char *val)
{
   13074:	b508      	push	{r3, lr}
    console_printf("%s = %s\n", name, val ? val : "<del>");
   13076:	460a      	mov	r2, r1
   13078:	b121      	cbz	r1, 13084 <conf_running_one+0x10>
   1307a:	4601      	mov	r1, r0
   1307c:	4802      	ldr	r0, [pc, #8]	; (13088 <conf_running_one+0x14>)
   1307e:	f000 fec5 	bl	13e0c <console_printf>
}
   13082:	bd08      	pop	{r3, pc}
    console_printf("%s = %s\n", name, val ? val : "<del>");
   13084:	4a01      	ldr	r2, [pc, #4]	; (1308c <conf_running_one+0x18>)
   13086:	e7f8      	b.n	1307a <conf_running_one+0x6>
   13088:	000270f4 	.word	0x000270f4
   1308c:	000270ec 	.word	0x000270ec

00013090 <conf_dump_running>:

static void
conf_dump_running(void)
{
   13090:	b510      	push	{r4, lr}
    struct conf_handler *ch;

    conf_lock();
   13092:	f7ff fe95 	bl	12dc0 <conf_lock>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   13096:	4b07      	ldr	r3, [pc, #28]	; (130b4 <conf_dump_running+0x24>)
   13098:	681c      	ldr	r4, [r3, #0]
   1309a:	e003      	b.n	130a4 <conf_dump_running+0x14>
        if (ch->ch_export) {
            ch->ch_export(conf_running_one, CONF_EXPORT_SHOW);
   1309c:	2101      	movs	r1, #1
   1309e:	4806      	ldr	r0, [pc, #24]	; (130b8 <conf_dump_running+0x28>)
   130a0:	4798      	blx	r3
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   130a2:	6824      	ldr	r4, [r4, #0]
   130a4:	b11c      	cbz	r4, 130ae <conf_dump_running+0x1e>
        if (ch->ch_export) {
   130a6:	6963      	ldr	r3, [r4, #20]
   130a8:	2b00      	cmp	r3, #0
   130aa:	d1f7      	bne.n	1309c <conf_dump_running+0xc>
   130ac:	e7f9      	b.n	130a2 <conf_dump_running+0x12>
        }
    }
    conf_unlock();
   130ae:	f7ff fe91 	bl	12dd4 <conf_unlock>
}
   130b2:	bd10      	pop	{r4, pc}
   130b4:	2000412c 	.word	0x2000412c
   130b8:	00013075 	.word	0x00013075

000130bc <shell_conf_command>:
}
#endif

static int
shell_conf_command(int argc, char **argv)
{
   130bc:	b530      	push	{r4, r5, lr}
   130be:	b0c3      	sub	sp, #268	; 0x10c
    char *val = NULL;
    char tmp_buf[CONF_MAX_VAL_LEN + 1];
    int rc;

    (void)rc;
    switch (argc) {
   130c0:	2802      	cmp	r0, #2
   130c2:	d007      	beq.n	130d4 <shell_conf_command+0x18>
   130c4:	2803      	cmp	r0, #3
   130c6:	d022      	beq.n	1310e <shell_conf_command+0x52>
        }
    }
    return 0;
err:
#endif
    console_printf("Invalid args\n");
   130c8:	4826      	ldr	r0, [pc, #152]	; (13164 <shell_conf_command+0xa8>)
   130ca:	f000 fe9f 	bl	13e0c <console_printf>
    return 0;
}
   130ce:	2000      	movs	r0, #0
   130d0:	b043      	add	sp, #268	; 0x10c
   130d2:	bd30      	pop	{r4, r5, pc}
        name = argv[1];
   130d4:	684c      	ldr	r4, [r1, #4]
    char *val = NULL;
   130d6:	2500      	movs	r5, #0
    if (!strcmp(name, "commit")) {
   130d8:	4923      	ldr	r1, [pc, #140]	; (13168 <shell_conf_command+0xac>)
   130da:	4620      	mov	r0, r4
   130dc:	f7fd faf8 	bl	106d0 <strcmp>
   130e0:	b1c0      	cbz	r0, 13114 <shell_conf_command+0x58>
        if (!strcmp(name, "dump")) {
   130e2:	4922      	ldr	r1, [pc, #136]	; (1316c <shell_conf_command+0xb0>)
   130e4:	4620      	mov	r0, r4
   130e6:	f7fd faf3 	bl	106d0 <strcmp>
   130ea:	b1f0      	cbz	r0, 1312a <shell_conf_command+0x6e>
            if (!strcmp(name, "save")) {
   130ec:	4920      	ldr	r1, [pc, #128]	; (13170 <shell_conf_command+0xb4>)
   130ee:	4620      	mov	r0, r4
   130f0:	f7fd faee 	bl	106d0 <strcmp>
   130f4:	b318      	cbz	r0, 1313e <shell_conf_command+0x82>
    if (!val) {
   130f6:	b32d      	cbz	r5, 13144 <shell_conf_command+0x88>
        rc = conf_set_value(name, val);
   130f8:	4629      	mov	r1, r5
   130fa:	4620      	mov	r0, r4
   130fc:	f7ff ff58 	bl	12fb0 <conf_set_value>
        if (rc) {
   13100:	4601      	mov	r1, r0
   13102:	2800      	cmp	r0, #0
   13104:	d0e3      	beq.n	130ce <shell_conf_command+0x12>
            console_printf("Failed to set, err: %d\n", rc);
   13106:	481b      	ldr	r0, [pc, #108]	; (13174 <shell_conf_command+0xb8>)
   13108:	f000 fe80 	bl	13e0c <console_printf>
            goto err;
   1310c:	e7dc      	b.n	130c8 <shell_conf_command+0xc>
        name = argv[1];
   1310e:	684c      	ldr	r4, [r1, #4]
        val = argv[2];
   13110:	688d      	ldr	r5, [r1, #8]
        break;
   13112:	e7e1      	b.n	130d8 <shell_conf_command+0x1c>
        rc = conf_commit(val);
   13114:	4628      	mov	r0, r5
   13116:	f7ff ff83 	bl	13020 <conf_commit>
        if (rc) {
   1311a:	b120      	cbz	r0, 13126 <shell_conf_command+0x6a>
            val = "Failed to commit\n";
   1311c:	4916      	ldr	r1, [pc, #88]	; (13178 <shell_conf_command+0xbc>)
        console_printf("%s", val);
   1311e:	4817      	ldr	r0, [pc, #92]	; (1317c <shell_conf_command+0xc0>)
   13120:	f000 fe74 	bl	13e0c <console_printf>
        return 0;
   13124:	e7d3      	b.n	130ce <shell_conf_command+0x12>
            val = "Done\n";
   13126:	4916      	ldr	r1, [pc, #88]	; (13180 <shell_conf_command+0xc4>)
   13128:	e7f9      	b.n	1311e <shell_conf_command+0x62>
            if (!val || !strcmp(val, "running")) {
   1312a:	b12d      	cbz	r5, 13138 <shell_conf_command+0x7c>
   1312c:	4915      	ldr	r1, [pc, #84]	; (13184 <shell_conf_command+0xc8>)
   1312e:	4628      	mov	r0, r5
   13130:	f7fd face 	bl	106d0 <strcmp>
   13134:	2800      	cmp	r0, #0
   13136:	d1ca      	bne.n	130ce <shell_conf_command+0x12>
                conf_dump_running();
   13138:	f7ff ffaa 	bl	13090 <conf_dump_running>
            return 0;
   1313c:	e7c7      	b.n	130ce <shell_conf_command+0x12>
                conf_save();
   1313e:	f000 f8e3 	bl	13308 <conf_save>
                return 0;
   13142:	e7c4      	b.n	130ce <shell_conf_command+0x12>
        val = conf_get_value(name, tmp_buf, sizeof(tmp_buf));
   13144:	f240 1201 	movw	r2, #257	; 0x101
   13148:	a901      	add	r1, sp, #4
   1314a:	4620      	mov	r0, r4
   1314c:	f7ff ff4a 	bl	12fe4 <conf_get_value>
        if (!val) {
   13150:	4601      	mov	r1, r0
   13152:	b118      	cbz	r0, 1315c <shell_conf_command+0xa0>
        console_printf("%s\n", val);
   13154:	480c      	ldr	r0, [pc, #48]	; (13188 <shell_conf_command+0xcc>)
   13156:	f000 fe59 	bl	13e0c <console_printf>
   1315a:	e7b8      	b.n	130ce <shell_conf_command+0x12>
            console_printf("Cannot display value\n");
   1315c:	480b      	ldr	r0, [pc, #44]	; (1318c <shell_conf_command+0xd0>)
   1315e:	f000 fe55 	bl	13e0c <console_printf>
            goto err;
   13162:	e7b1      	b.n	130c8 <shell_conf_command+0xc>
   13164:	00027164 	.word	0x00027164
   13168:	0002711c 	.word	0x0002711c
   1316c:	000268e4 	.word	0x000268e4
   13170:	0002712c 	.word	0x0002712c
   13174:	0002714c 	.word	0x0002714c
   13178:	00027108 	.word	0x00027108
   1317c:	000267e8 	.word	0x000267e8
   13180:	00027100 	.word	0x00027100
   13184:	00027124 	.word	0x00027124
   13188:	00026e48 	.word	0x00026e48
   1318c:	00027134 	.word	0x00027134

00013190 <conf_cli_register>:

int
conf_cli_register(void)
{
   13190:	b508      	push	{r3, lr}
    return shell_cmd_register(&shell_conf_cmd);
   13192:	4802      	ldr	r0, [pc, #8]	; (1319c <conf_cli_register+0xc>)
   13194:	f002 fc1a 	bl	159cc <shell_cmd_register>
}
   13198:	bd08      	pop	{r3, pc}
   1319a:	bf00      	nop
   1319c:	200002b0 	.word	0x200002b0

000131a0 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   131a0:	b538      	push	{r3, r4, r5, lr}
   131a2:	460d      	mov	r5, r1
   131a4:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   131a6:	6811      	ldr	r1, [r2, #0]
   131a8:	f7fd fa92 	bl	106d0 <strcmp>
   131ac:	b9a8      	cbnz	r0, 131da <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
   131ae:	b145      	cbz	r5, 131c2 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   131b0:	6861      	ldr	r1, [r4, #4]
   131b2:	b181      	cbz	r1, 131d6 <conf_dup_check_cb+0x36>
   131b4:	4628      	mov	r0, r5
   131b6:	f7fd fa8b 	bl	106d0 <strcmp>
   131ba:	b960      	cbnz	r0, 131d6 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
   131bc:	2301      	movs	r3, #1
   131be:	60a3      	str	r3, [r4, #8]
   131c0:	e00b      	b.n	131da <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
   131c2:	6863      	ldr	r3, [r4, #4]
   131c4:	b10b      	cbz	r3, 131ca <conf_dup_check_cb+0x2a>
   131c6:	781b      	ldrb	r3, [r3, #0]
   131c8:	b913      	cbnz	r3, 131d0 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   131ca:	2301      	movs	r3, #1
   131cc:	60a3      	str	r3, [r4, #8]
   131ce:	e004      	b.n	131da <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
   131d0:	2300      	movs	r3, #0
   131d2:	60a3      	str	r3, [r4, #8]
   131d4:	e001      	b.n	131da <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
   131d6:	2300      	movs	r3, #0
   131d8:	60a3      	str	r3, [r4, #8]
        }
    }
}
   131da:	bd38      	pop	{r3, r4, r5, pc}

000131dc <conf_load_cb>:
{
   131dc:	b538      	push	{r3, r4, r5, lr}
   131de:	4604      	mov	r4, r0
   131e0:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   131e2:	b122      	cbz	r2, 131ee <conf_load_cb+0x12>
   131e4:	4610      	mov	r0, r2
   131e6:	4621      	mov	r1, r4
   131e8:	f7fd fa72 	bl	106d0 <strcmp>
   131ec:	b918      	cbnz	r0, 131f6 <conf_load_cb+0x1a>
        conf_set_value(name, val);
   131ee:	4629      	mov	r1, r5
   131f0:	4620      	mov	r0, r4
   131f2:	f7ff fedd 	bl	12fb0 <conf_set_value>
}
   131f6:	bd38      	pop	{r3, r4, r5, pc}

000131f8 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   131f8:	4b08      	ldr	r3, [pc, #32]	; (1321c <conf_src_register+0x24>)
   131fa:	6819      	ldr	r1, [r3, #0]
   131fc:	460b      	mov	r3, r1
    prev = NULL;
   131fe:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   13200:	e001      	b.n	13206 <conf_src_register+0xe>
        prev = cur;
   13202:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   13204:	681b      	ldr	r3, [r3, #0]
   13206:	2b00      	cmp	r3, #0
   13208:	d1fb      	bne.n	13202 <conf_src_register+0xa>
    if (!prev) {
   1320a:	b11a      	cbz	r2, 13214 <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   1320c:	6813      	ldr	r3, [r2, #0]
   1320e:	6003      	str	r3, [r0, #0]
   13210:	6010      	str	r0, [r2, #0]
}
   13212:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   13214:	6001      	str	r1, [r0, #0]
   13216:	4b01      	ldr	r3, [pc, #4]	; (1321c <conf_src_register+0x24>)
   13218:	6018      	str	r0, [r3, #0]
   1321a:	4770      	bx	lr
   1321c:	2000413c 	.word	0x2000413c

00013220 <conf_dst_register>:
    conf_save_dst = cs;
   13220:	4b01      	ldr	r3, [pc, #4]	; (13228 <conf_dst_register+0x8>)
   13222:	6018      	str	r0, [r3, #0]
}
   13224:	4770      	bx	lr
   13226:	bf00      	nop
   13228:	20004144 	.word	0x20004144

0001322c <conf_load>:
{
   1322c:	b510      	push	{r4, lr}
    conf_lock();
   1322e:	f7ff fdc7 	bl	12dc0 <conf_lock>
    conf_loaded = true;
   13232:	2301      	movs	r3, #1
   13234:	4a0e      	ldr	r2, [pc, #56]	; (13270 <conf_load+0x44>)
   13236:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   13238:	4a0e      	ldr	r2, [pc, #56]	; (13274 <conf_load+0x48>)
   1323a:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   1323c:	4b0e      	ldr	r3, [pc, #56]	; (13278 <conf_load+0x4c>)
   1323e:	681c      	ldr	r4, [r3, #0]
   13240:	e000      	b.n	13244 <conf_load+0x18>
   13242:	6824      	ldr	r4, [r4, #0]
   13244:	b164      	cbz	r4, 13260 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   13246:	6863      	ldr	r3, [r4, #4]
   13248:	681b      	ldr	r3, [r3, #0]
   1324a:	2200      	movs	r2, #0
   1324c:	490b      	ldr	r1, [pc, #44]	; (1327c <conf_load+0x50>)
   1324e:	4620      	mov	r0, r4
   13250:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   13252:	6823      	ldr	r3, [r4, #0]
   13254:	2b00      	cmp	r3, #0
   13256:	d0f4      	beq.n	13242 <conf_load+0x16>
            conf_commit(NULL);
   13258:	2000      	movs	r0, #0
   1325a:	f7ff fee1 	bl	13020 <conf_commit>
   1325e:	e7f0      	b.n	13242 <conf_load+0x16>
    conf_loading = false;
   13260:	4b04      	ldr	r3, [pc, #16]	; (13274 <conf_load+0x48>)
   13262:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   13264:	f7ff fdb6 	bl	12dd4 <conf_unlock>
    return conf_commit(NULL);
   13268:	4620      	mov	r0, r4
   1326a:	f7ff fed9 	bl	13020 <conf_commit>
}
   1326e:	bd10      	pop	{r4, pc}
   13270:	20004140 	.word	0x20004140
   13274:	20004141 	.word	0x20004141
   13278:	2000413c 	.word	0x2000413c
   1327c:	000131dd 	.word	0x000131dd

00013280 <conf_ensure_loaded>:
{
   13280:	b508      	push	{r3, lr}
    if (conf_loaded) {
   13282:	4b04      	ldr	r3, [pc, #16]	; (13294 <conf_ensure_loaded+0x14>)
   13284:	781b      	ldrb	r3, [r3, #0]
   13286:	b10b      	cbz	r3, 1328c <conf_ensure_loaded+0xc>
        return 0;
   13288:	2000      	movs	r0, #0
}
   1328a:	bd08      	pop	{r3, pc}
    return conf_load();
   1328c:	f7ff ffce 	bl	1322c <conf_load>
   13290:	e7fb      	b.n	1328a <conf_ensure_loaded+0xa>
   13292:	bf00      	nop
   13294:	20004140 	.word	0x20004140

00013298 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   13298:	b570      	push	{r4, r5, r6, lr}
   1329a:	b084      	sub	sp, #16
   1329c:	4605      	mov	r5, r0
   1329e:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   132a0:	f7ff fd8e 	bl	12dc0 <conf_lock>
    if (!conf_save_dst) {
   132a4:	4b13      	ldr	r3, [pc, #76]	; (132f4 <conf_save_one+0x5c>)
   132a6:	681b      	ldr	r3, [r3, #0]
   132a8:	b1fb      	cbz	r3, 132ea <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   132aa:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   132ac:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   132ae:	2300      	movs	r3, #0
   132b0:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   132b2:	4b11      	ldr	r3, [pc, #68]	; (132f8 <conf_save_one+0x60>)
   132b4:	681c      	ldr	r4, [r3, #0]
   132b6:	e006      	b.n	132c6 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   132b8:	6863      	ldr	r3, [r4, #4]
   132ba:	681b      	ldr	r3, [r3, #0]
   132bc:	aa01      	add	r2, sp, #4
   132be:	490f      	ldr	r1, [pc, #60]	; (132fc <conf_save_one+0x64>)
   132c0:	4620      	mov	r0, r4
   132c2:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   132c4:	6824      	ldr	r4, [r4, #0]
   132c6:	2c00      	cmp	r4, #0
   132c8:	d1f6      	bne.n	132b8 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   132ca:	9b03      	ldr	r3, [sp, #12]
   132cc:	2b01      	cmp	r3, #1
   132ce:	d00e      	beq.n	132ee <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   132d0:	4b08      	ldr	r3, [pc, #32]	; (132f4 <conf_save_one+0x5c>)
   132d2:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   132d4:	6843      	ldr	r3, [r0, #4]
   132d6:	689b      	ldr	r3, [r3, #8]
   132d8:	4632      	mov	r2, r6
   132da:	4629      	mov	r1, r5
   132dc:	4798      	blx	r3
   132de:	4604      	mov	r4, r0
out:
    conf_unlock();
   132e0:	f7ff fd78 	bl	12dd4 <conf_unlock>
    return rc;
}
   132e4:	4620      	mov	r0, r4
   132e6:	b004      	add	sp, #16
   132e8:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   132ea:	240a      	movs	r4, #10
   132ec:	e7f8      	b.n	132e0 <conf_save_one+0x48>
        rc = 0;
   132ee:	2400      	movs	r4, #0
   132f0:	e7f6      	b.n	132e0 <conf_save_one+0x48>
   132f2:	bf00      	nop
   132f4:	20004144 	.word	0x20004144
   132f8:	2000413c 	.word	0x2000413c
   132fc:	000131a1 	.word	0x000131a1

00013300 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
   13300:	b508      	push	{r3, lr}
    conf_save_one(name, value);
   13302:	f7ff ffc9 	bl	13298 <conf_save_one>
}
   13306:	bd08      	pop	{r3, pc}

00013308 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   13308:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   1330a:	f7ff fd59 	bl	12dc0 <conf_lock>
    cs = conf_save_dst;
   1330e:	4b11      	ldr	r3, [pc, #68]	; (13354 <conf_save+0x4c>)
   13310:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
   13312:	b1ee      	cbz	r6, 13350 <conf_save+0x48>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   13314:	6873      	ldr	r3, [r6, #4]
   13316:	685b      	ldr	r3, [r3, #4]
   13318:	b10b      	cbz	r3, 1331e <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   1331a:	4630      	mov	r0, r6
   1331c:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   1331e:	4b0e      	ldr	r3, [pc, #56]	; (13358 <conf_save+0x50>)
   13320:	681c      	ldr	r4, [r3, #0]
    rc = 0;
   13322:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   13324:	e000      	b.n	13328 <conf_save+0x20>
   13326:	6824      	ldr	r4, [r4, #0]
   13328:	b14c      	cbz	r4, 1333e <conf_save+0x36>
        if (ch->ch_export) {
   1332a:	6963      	ldr	r3, [r4, #20]
   1332c:	2b00      	cmp	r3, #0
   1332e:	d0fa      	beq.n	13326 <conf_save+0x1e>
            rc2 = ch->ch_export(conf_store_one, CONF_EXPORT_PERSIST);
   13330:	2100      	movs	r1, #0
   13332:	480a      	ldr	r0, [pc, #40]	; (1335c <conf_save+0x54>)
   13334:	4798      	blx	r3
            if (!rc) {
   13336:	2d00      	cmp	r5, #0
   13338:	d1f5      	bne.n	13326 <conf_save+0x1e>
                rc = rc2;
   1333a:	4605      	mov	r5, r0
   1333c:	e7f3      	b.n	13326 <conf_save+0x1e>
            }
        }
    }
    if (cs->cs_itf->csi_save_end) {
   1333e:	6873      	ldr	r3, [r6, #4]
   13340:	68db      	ldr	r3, [r3, #12]
   13342:	b10b      	cbz	r3, 13348 <conf_save+0x40>
        cs->cs_itf->csi_save_end(cs);
   13344:	4630      	mov	r0, r6
   13346:	4798      	blx	r3
    }
out:
    conf_unlock();
   13348:	f7ff fd44 	bl	12dd4 <conf_unlock>
    return rc;
}
   1334c:	4628      	mov	r0, r5
   1334e:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   13350:	250a      	movs	r5, #10
   13352:	e7f9      	b.n	13348 <conf_save+0x40>
   13354:	20004144 	.word	0x20004144
   13358:	2000412c 	.word	0x2000412c
   1335c:	00013301 	.word	0x00013301

00013360 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   13360:	2300      	movs	r3, #0
   13362:	4a02      	ldr	r2, [pc, #8]	; (1336c <conf_store_init+0xc>)
   13364:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   13366:	4a02      	ldr	r2, [pc, #8]	; (13370 <conf_store_init+0x10>)
   13368:	6013      	str	r3, [r2, #0]
}
   1336a:	4770      	bx	lr
   1336c:	20004140 	.word	0x20004140
   13370:	2000413c 	.word	0x2000413c

00013374 <ring_buf_next>:
}

static uint8_t
ring_buf_next(uint8_t i, uint8_t size)
{
    return (uint8_t) ((i + 1) % size);
   13374:	3001      	adds	r0, #1
   13376:	fb90 f3f1 	sdiv	r3, r0, r1
   1337a:	fb01 0013 	mls	r0, r1, r3, r0
}
   1337e:	b2c0      	uxtb	r0, r0
   13380:	4770      	bx	lr

00013382 <ring_buf_prev>:

static uint8_t
ring_buf_prev(uint8_t i, uint8_t size)
{
    return i == 0 ? i = size - 1 : --i;
   13382:	b910      	cbnz	r0, 1338a <ring_buf_prev+0x8>
   13384:	3901      	subs	r1, #1
   13386:	b2c8      	uxtb	r0, r1
   13388:	4770      	bx	lr
   1338a:	3801      	subs	r0, #1
   1338c:	b2c0      	uxtb	r0, r0
}
   1338e:	4770      	bx	lr

00013390 <console_hist_is_full>:

static bool
console_hist_is_full(void)
{
   13390:	b510      	push	{r4, lr}
    struct console_hist *sh = &console_hist;

    return ring_buf_next(sh->head, sh->size) == sh->tail;
   13392:	4c05      	ldr	r4, [pc, #20]	; (133a8 <console_hist_is_full+0x18>)
   13394:	78a1      	ldrb	r1, [r4, #2]
   13396:	7820      	ldrb	r0, [r4, #0]
   13398:	f7ff ffec 	bl	13374 <ring_buf_next>
   1339c:	7863      	ldrb	r3, [r4, #1]
}
   1339e:	4298      	cmp	r0, r3
   133a0:	bf14      	ite	ne
   133a2:	2000      	movne	r0, #0
   133a4:	2001      	moveq	r0, #1
   133a6:	bd10      	pop	{r4, pc}
   133a8:	20004168 	.word	0x20004168

000133ac <handle_nlip>:
}

static int
handle_nlip(uint8_t byte)
{
    if (((nlip_state & NLIP_PKT_START1) &&
   133ac:	4b13      	ldr	r3, [pc, #76]	; (133fc <handle_nlip+0x50>)
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	f003 0203 	and.w	r2, r3, #3
   133b4:	2a03      	cmp	r2, #3
   133b6:	d01d      	beq.n	133f4 <handle_nlip+0x48>
         (nlip_state & NLIP_PKT_START2)) ||
        ((nlip_state & NLIP_DATA_START1) &&
   133b8:	f003 020c 	and.w	r2, r3, #12
         (nlip_state & NLIP_PKT_START2)) ||
   133bc:	2a0c      	cmp	r2, #12
   133be:	d01b      	beq.n	133f8 <handle_nlip+0x4c>
         (nlip_state & NLIP_DATA_START2)))
    {
        return 1;
    }

    if ((nlip_state & NLIP_PKT_START1) &&
   133c0:	f013 0f01 	tst.w	r3, #1
   133c4:	d001      	beq.n	133ca <handle_nlip+0x1e>
   133c6:	2809      	cmp	r0, #9
   133c8:	d008      	beq.n	133dc <handle_nlip+0x30>
        (byte == CONSOLE_NLIP_PKT_START2)) {
        nlip_state |= NLIP_PKT_START2;
        return 1;
    } else if ((nlip_state & NLIP_DATA_START1) &&
   133ca:	f013 0f04 	tst.w	r3, #4
   133ce:	d001      	beq.n	133d4 <handle_nlip+0x28>
   133d0:	2814      	cmp	r0, #20
   133d2:	d009      	beq.n	133e8 <handle_nlip+0x3c>
               (byte == CONSOLE_NLIP_DATA_START2)) {
        nlip_state |= NLIP_DATA_START2;
        return 1;
    } else {
        nlip_state = 0;
   133d4:	2000      	movs	r0, #0
   133d6:	4b09      	ldr	r3, [pc, #36]	; (133fc <handle_nlip+0x50>)
   133d8:	6018      	str	r0, [r3, #0]
        return 0;
   133da:	4770      	bx	lr
        nlip_state |= NLIP_PKT_START2;
   133dc:	f043 0302 	orr.w	r3, r3, #2
   133e0:	4a06      	ldr	r2, [pc, #24]	; (133fc <handle_nlip+0x50>)
   133e2:	6013      	str	r3, [r2, #0]
        return 1;
   133e4:	2001      	movs	r0, #1
   133e6:	4770      	bx	lr
        nlip_state |= NLIP_DATA_START2;
   133e8:	f043 0308 	orr.w	r3, r3, #8
   133ec:	4a03      	ldr	r2, [pc, #12]	; (133fc <handle_nlip+0x50>)
   133ee:	6013      	str	r3, [r2, #0]
        return 1;
   133f0:	2001      	movs	r0, #1
   133f2:	4770      	bx	lr
        return 1;
   133f4:	2001      	movs	r0, #1
   133f6:	4770      	bx	lr
   133f8:	2001      	movs	r0, #1
    }
}
   133fa:	4770      	bx	lr
   133fc:	200049b8 	.word	0x200049b8

00013400 <trim_whitespace>:
{
   13400:	b570      	push	{r4, r5, r6, lr}
   13402:	4604      	mov	r4, r0
   13404:	4615      	mov	r5, r2
    if (len == 0) {
   13406:	460e      	mov	r6, r1
   13408:	b909      	cbnz	r1, 1340e <trim_whitespace+0xe>
   1340a:	e02c      	b.n	13466 <trim_whitespace+0x66>
        str++;
   1340c:	3401      	adds	r4, #1
    while (isspace((unsigned char)*str)) {
   1340e:	7823      	ldrb	r3, [r4, #0]
   13410:	2b20      	cmp	r3, #32
   13412:	d0fb      	beq.n	1340c <trim_whitespace+0xc>
   13414:	2b0a      	cmp	r3, #10
   13416:	d0f9      	beq.n	1340c <trim_whitespace+0xc>
   13418:	2b09      	cmp	r3, #9
   1341a:	d0f7      	beq.n	1340c <trim_whitespace+0xc>
   1341c:	2b0d      	cmp	r3, #13
   1341e:	d0f5      	beq.n	1340c <trim_whitespace+0xc>
    if (*str == 0) { /* All spaces? */
   13420:	b12b      	cbz	r3, 1342e <trim_whitespace+0x2e>
    end = str + strlen(str) - 1;
   13422:	4620      	mov	r0, r4
   13424:	f7fd f960 	bl	106e8 <strlen>
   13428:	1e43      	subs	r3, r0, #1
   1342a:	4423      	add	r3, r4
    while (end > str && isspace((unsigned char)*end)) {
   1342c:	e003      	b.n	13436 <trim_whitespace+0x36>
        *out = 0;
   1342e:	702b      	strb	r3, [r5, #0]
        return 0;
   13430:	461e      	mov	r6, r3
   13432:	e018      	b.n	13466 <trim_whitespace+0x66>
        end--;
   13434:	3b01      	subs	r3, #1
    while (end > str && isspace((unsigned char)*end)) {
   13436:	429c      	cmp	r4, r3
   13438:	d208      	bcs.n	1344c <trim_whitespace+0x4c>
   1343a:	781a      	ldrb	r2, [r3, #0]
   1343c:	2a20      	cmp	r2, #32
   1343e:	d0f9      	beq.n	13434 <trim_whitespace+0x34>
   13440:	2a0a      	cmp	r2, #10
   13442:	d0f7      	beq.n	13434 <trim_whitespace+0x34>
   13444:	2a09      	cmp	r2, #9
   13446:	d0f5      	beq.n	13434 <trim_whitespace+0x34>
   13448:	2a0d      	cmp	r2, #13
   1344a:	d0f3      	beq.n	13434 <trim_whitespace+0x34>
    end++;
   1344c:	3301      	adds	r3, #1
    out_size = min(end - str, len - 1);
   1344e:	3e01      	subs	r6, #1
   13450:	1b1b      	subs	r3, r3, r4
   13452:	429e      	cmp	r6, r3
   13454:	bf28      	it	cs
   13456:	461e      	movcs	r6, r3
    memcpy(out, str, out_size);
   13458:	4632      	mov	r2, r6
   1345a:	4621      	mov	r1, r4
   1345c:	4628      	mov	r0, r5
   1345e:	f7fd f8ff 	bl	10660 <memcpy>
    out[out_size] = 0;
   13462:	2300      	movs	r3, #0
   13464:	55ab      	strb	r3, [r5, r6]
}
   13466:	4630      	mov	r0, r6
   13468:	bd70      	pop	{r4, r5, r6, pc}
	...

0001346c <console_hist_move_to_head>:
{
   1346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13470:	4605      	mov	r5, r0
    curr = sh->tail;
   13472:	4b1d      	ldr	r3, [pc, #116]	; (134e8 <console_hist_move_to_head+0x7c>)
   13474:	785c      	ldrb	r4, [r3, #1]
    while (curr != sh->head) {
   13476:	e005      	b.n	13484 <console_hist_move_to_head+0x18>
        curr = ring_buf_next(curr, sh->size);
   13478:	4b1b      	ldr	r3, [pc, #108]	; (134e8 <console_hist_move_to_head+0x7c>)
   1347a:	7899      	ldrb	r1, [r3, #2]
   1347c:	4620      	mov	r0, r4
   1347e:	f7ff ff79 	bl	13374 <ring_buf_next>
   13482:	4604      	mov	r4, r0
    while (curr != sh->head) {
   13484:	4b18      	ldr	r3, [pc, #96]	; (134e8 <console_hist_move_to_head+0x7c>)
   13486:	781e      	ldrb	r6, [r3, #0]
   13488:	42a6      	cmp	r6, r4
   1348a:	d00a      	beq.n	134a2 <console_hist_move_to_head+0x36>
        if (strcmp(sh->lines[curr], line) == 0) {
   1348c:	4b16      	ldr	r3, [pc, #88]	; (134e8 <console_hist_move_to_head+0x7c>)
   1348e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   13492:	685f      	ldr	r7, [r3, #4]
   13494:	4629      	mov	r1, r5
   13496:	4638      	mov	r0, r7
   13498:	f7fd f91a 	bl	106d0 <strcmp>
   1349c:	2800      	cmp	r0, #0
   1349e:	d1eb      	bne.n	13478 <console_hist_move_to_head+0xc>
   134a0:	e000      	b.n	134a4 <console_hist_move_to_head+0x38>
    char *match = NULL;
   134a2:	2700      	movs	r7, #0
    if (!match) {
   134a4:	b1f7      	cbz	r7, 134e4 <console_hist_move_to_head+0x78>
    curr = ring_buf_next(curr, sh->size);
   134a6:	4b10      	ldr	r3, [pc, #64]	; (134e8 <console_hist_move_to_head+0x7c>)
   134a8:	f893 8002 	ldrb.w	r8, [r3, #2]
   134ac:	4641      	mov	r1, r8
   134ae:	4620      	mov	r0, r4
   134b0:	f7ff ff60 	bl	13374 <ring_buf_next>
   134b4:	4605      	mov	r5, r0
    while (curr != sh->head) {
   134b6:	e00c      	b.n	134d2 <console_hist_move_to_head+0x66>
        sh->lines[prev] = sh->lines[curr];
   134b8:	480b      	ldr	r0, [pc, #44]	; (134e8 <console_hist_move_to_head+0x7c>)
   134ba:	eb00 0385 	add.w	r3, r0, r5, lsl #2
   134be:	685b      	ldr	r3, [r3, #4]
   134c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   134c4:	6043      	str	r3, [r0, #4]
        curr = ring_buf_next(curr, sh->size);
   134c6:	4641      	mov	r1, r8
   134c8:	4628      	mov	r0, r5
   134ca:	f7ff ff53 	bl	13374 <ring_buf_next>
        prev = curr;
   134ce:	462c      	mov	r4, r5
        curr = ring_buf_next(curr, sh->size);
   134d0:	4605      	mov	r5, r0
    while (curr != sh->head) {
   134d2:	42ae      	cmp	r6, r5
   134d4:	d1f0      	bne.n	134b8 <console_hist_move_to_head+0x4c>
    sh->lines[prev] = match;
   134d6:	4804      	ldr	r0, [pc, #16]	; (134e8 <console_hist_move_to_head+0x7c>)
   134d8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   134dc:	6067      	str	r7, [r4, #4]
    return true;
   134de:	2001      	movs	r0, #1
}
   134e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   134e4:	2000      	movs	r0, #0
   134e6:	e7fb      	b.n	134e0 <console_hist_move_to_head+0x74>
   134e8:	20004168 	.word	0x20004168

000134ec <console_hist_add>:
{
   134ec:	b510      	push	{r4, lr}
   134ee:	b0c0      	sub	sp, #256	; 0x100
    sh->curr = sh->head;
   134f0:	4b1d      	ldr	r3, [pc, #116]	; (13568 <console_hist_add+0x7c>)
   134f2:	781a      	ldrb	r2, [r3, #0]
   134f4:	70da      	strb	r2, [r3, #3]
    len = trim_whitespace(line, sizeof(buf), buf);
   134f6:	466a      	mov	r2, sp
   134f8:	f44f 7180 	mov.w	r1, #256	; 0x100
   134fc:	f7ff ff80 	bl	13400 <trim_whitespace>
    if (!len) {
   13500:	b908      	cbnz	r0, 13506 <console_hist_add+0x1a>
}
   13502:	b040      	add	sp, #256	; 0x100
   13504:	bd10      	pop	{r4, pc}
    if (console_hist_move_to_head(buf)) {
   13506:	4668      	mov	r0, sp
   13508:	f7ff ffb0 	bl	1346c <console_hist_move_to_head>
   1350c:	2800      	cmp	r0, #0
   1350e:	d1f8      	bne.n	13502 <console_hist_add+0x16>
    if (console_hist_is_full()) {
   13510:	f7ff ff3e 	bl	13390 <console_hist_is_full>
   13514:	b198      	cbz	r0, 1353e <console_hist_add+0x52>
        assert(sh->lines[sh->head] == NULL);
   13516:	4a14      	ldr	r2, [pc, #80]	; (13568 <console_hist_add+0x7c>)
   13518:	7813      	ldrb	r3, [r2, #0]
   1351a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1351e:	6852      	ldr	r2, [r2, #4]
   13520:	b9e2      	cbnz	r2, 1355c <console_hist_add+0x70>
        sh->lines[sh->head] = sh->lines[sh->tail];
   13522:	4c11      	ldr	r4, [pc, #68]	; (13568 <console_hist_add+0x7c>)
   13524:	7860      	ldrb	r0, [r4, #1]
   13526:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1352a:	6851      	ldr	r1, [r2, #4]
   1352c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   13530:	6059      	str	r1, [r3, #4]
        sh->lines[sh->tail] = NULL;
   13532:	2300      	movs	r3, #0
   13534:	6053      	str	r3, [r2, #4]
        sh->tail = ring_buf_next(sh->tail, sh->size);
   13536:	78a1      	ldrb	r1, [r4, #2]
   13538:	f7ff ff1c 	bl	13374 <ring_buf_next>
   1353c:	7060      	strb	r0, [r4, #1]
    strcpy(sh->lines[sh->head], buf);
   1353e:	4c0a      	ldr	r4, [pc, #40]	; (13568 <console_hist_add+0x7c>)
   13540:	7823      	ldrb	r3, [r4, #0]
   13542:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   13546:	4669      	mov	r1, sp
   13548:	6858      	ldr	r0, [r3, #4]
   1354a:	f00e fd13 	bl	21f74 <strcpy>
    sh->head = ring_buf_next(sh->head, sh->size);
   1354e:	78a1      	ldrb	r1, [r4, #2]
   13550:	7820      	ldrb	r0, [r4, #0]
   13552:	f7ff ff0f 	bl	13374 <ring_buf_next>
   13556:	7020      	strb	r0, [r4, #0]
    sh->curr = sh->head;
   13558:	70e0      	strb	r0, [r4, #3]
   1355a:	e7d2      	b.n	13502 <console_hist_add+0x16>
        assert(sh->lines[sh->head] == NULL);
   1355c:	2300      	movs	r3, #0
   1355e:	461a      	mov	r2, r3
   13560:	4619      	mov	r1, r3
   13562:	4618      	mov	r0, r3
   13564:	f7f5 fe2e 	bl	91c4 <__assert_func>
   13568:	20004168 	.word	0x20004168

0001356c <console_hist_init>:
{
   1356c:	b510      	push	{r4, lr}
    memset(console_hist_lines, 0, sizeof(console_hist_lines));
   1356e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13572:	2100      	movs	r1, #0
   13574:	480b      	ldr	r0, [pc, #44]	; (135a4 <console_hist_init+0x38>)
   13576:	f7fd f880 	bl	1067a <memset>
    memset(&console_hist, 0, sizeof(console_hist));
   1357a:	4c0b      	ldr	r4, [pc, #44]	; (135a8 <console_hist_init+0x3c>)
   1357c:	2228      	movs	r2, #40	; 0x28
   1357e:	2100      	movs	r1, #0
   13580:	4620      	mov	r0, r4
   13582:	f7fd f87a 	bl	1067a <memset>
    sh->size = MYNEWT_VAL(CONSOLE_HISTORY_SIZE) + 1;
   13586:	2309      	movs	r3, #9
   13588:	70a3      	strb	r3, [r4, #2]
    for (i = 0; i < sh->size - 1; i++) {
   1358a:	2300      	movs	r3, #0
   1358c:	e007      	b.n	1359e <console_hist_init+0x32>
        sh->lines[i] = console_hist_lines[i];
   1358e:	4905      	ldr	r1, [pc, #20]	; (135a4 <console_hist_init+0x38>)
   13590:	eb01 2103 	add.w	r1, r1, r3, lsl #8
   13594:	4a04      	ldr	r2, [pc, #16]	; (135a8 <console_hist_init+0x3c>)
   13596:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1359a:	6051      	str	r1, [r2, #4]
    for (i = 0; i < sh->size - 1; i++) {
   1359c:	3301      	adds	r3, #1
   1359e:	2b07      	cmp	r3, #7
   135a0:	ddf5      	ble.n	1358e <console_hist_init+0x22>
}
   135a2:	bd10      	pop	{r4, pc}
   135a4:	20004190 	.word	0x20004190
   135a8:	20004168 	.word	0x20004168

000135ac <console_echo>:
    echo = on;
   135ac:	4b01      	ldr	r3, [pc, #4]	; (135b4 <console_echo+0x8>)
   135ae:	6018      	str	r0, [r3, #0]
}
   135b0:	4770      	bx	lr
   135b2:	bf00      	nop
   135b4:	200002c0 	.word	0x200002c0

000135b8 <console_lock>:
{
   135b8:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   135ba:	4b0a      	ldr	r3, [pc, #40]	; (135e4 <console_lock+0x2c>)
   135bc:	685b      	ldr	r3, [r3, #4]
   135be:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   135c2:	b133      	cbz	r3, 135d2 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   135c4:	4b08      	ldr	r3, [pc, #32]	; (135e8 <console_lock+0x30>)
   135c6:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   135c8:	b90b      	cbnz	r3, 135ce <console_lock+0x16>
    int rc = OS_OK;
   135ca:	2000      	movs	r0, #0
   135cc:	e007      	b.n	135de <console_lock+0x26>
            rc = OS_EBUSY;
   135ce:	200b      	movs	r0, #11
        goto end;
   135d0:	e005      	b.n	135de <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   135d2:	4601      	mov	r1, r0
   135d4:	4804      	ldr	r0, [pc, #16]	; (135e8 <console_lock+0x30>)
   135d6:	f7f7 fb9b 	bl	ad10 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   135da:	2809      	cmp	r0, #9
   135dc:	d000      	beq.n	135e0 <console_lock+0x28>
}
   135de:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   135e0:	2000      	movs	r0, #0
    return rc;
   135e2:	e7fc      	b.n	135de <console_lock+0x26>
   135e4:	e000ed00 	.word	0xe000ed00
   135e8:	20004994 	.word	0x20004994

000135ec <console_unlock>:
{
   135ec:	b508      	push	{r3, lr}
   135ee:	4b0a      	ldr	r3, [pc, #40]	; (13618 <console_unlock+0x2c>)
   135f0:	685b      	ldr	r3, [r3, #4]
   135f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   135f6:	b10b      	cbz	r3, 135fc <console_unlock+0x10>
    int rc = OS_OK;
   135f8:	2000      	movs	r0, #0
}
   135fa:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   135fc:	4807      	ldr	r0, [pc, #28]	; (1361c <console_unlock+0x30>)
   135fe:	f7f7 fb2b 	bl	ac58 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   13602:	2800      	cmp	r0, #0
   13604:	d0f9      	beq.n	135fa <console_unlock+0xe>
   13606:	2809      	cmp	r0, #9
   13608:	d0f7      	beq.n	135fa <console_unlock+0xe>
   1360a:	2300      	movs	r3, #0
   1360c:	461a      	mov	r2, r3
   1360e:	4619      	mov	r1, r3
   13610:	4618      	mov	r0, r3
   13612:	f7f5 fdd7 	bl	91c4 <__assert_func>
   13616:	bf00      	nop
   13618:	e000ed00 	.word	0xe000ed00
   1361c:	20004994 	.word	0x20004994

00013620 <console_out>:
{
   13620:	b510      	push	{r4, lr}
   13622:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
   13624:	2080      	movs	r0, #128	; 0x80
   13626:	f7ff ffc7 	bl	135b8 <console_lock>
   1362a:	b108      	cbz	r0, 13630 <console_out+0x10>
}
   1362c:	4620      	mov	r0, r4
   1362e:	bd10      	pop	{r4, pc}
    rc = console_out_nolock(c);
   13630:	4620      	mov	r0, r4
   13632:	f000 fd0b 	bl	1404c <console_out_nolock>
   13636:	4604      	mov	r4, r0
    (void)console_unlock();
   13638:	f7ff ffd8 	bl	135ec <console_unlock>
    return rc;
   1363c:	e7f6      	b.n	1362c <console_out+0xc>
	...

00013640 <console_append_char>:

static int
console_append_char(char *line, uint8_t byte)
{
   13640:	b508      	push	{r3, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   13642:	4b0d      	ldr	r3, [pc, #52]	; (13678 <console_append_char+0x38>)
   13644:	881b      	ldrh	r3, [r3, #0]
   13646:	4a0d      	ldr	r2, [pc, #52]	; (1367c <console_append_char+0x3c>)
   13648:	8812      	ldrh	r2, [r2, #0]
   1364a:	4413      	add	r3, r2
   1364c:	2bfe      	cmp	r3, #254	; 0xfe
   1364e:	dc0e      	bgt.n	1366e <console_append_char+0x2e>
        return 0;
    }

    line[cur + end] = byte;
   13650:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   13652:	b171      	cbz	r1, 13672 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   13654:	4b0a      	ldr	r3, [pc, #40]	; (13680 <console_append_char+0x40>)
   13656:	681b      	ldr	r3, [r3, #0]
   13658:	b92b      	cbnz	r3, 13666 <console_append_char+0x26>
        /* Echo back to console */
        console_out(byte);
    }
    ++cur;
   1365a:	4a07      	ldr	r2, [pc, #28]	; (13678 <console_append_char+0x38>)
   1365c:	8813      	ldrh	r3, [r2, #0]
   1365e:	3301      	adds	r3, #1
   13660:	8013      	strh	r3, [r2, #0]
    return 1;
   13662:	2001      	movs	r0, #1
}
   13664:	bd08      	pop	{r3, pc}
        console_out(byte);
   13666:	4608      	mov	r0, r1
   13668:	f7ff ffda 	bl	13620 <console_out>
   1366c:	e7f5      	b.n	1365a <console_append_char+0x1a>
        return 0;
   1366e:	2000      	movs	r0, #0
   13670:	e7f8      	b.n	13664 <console_append_char+0x24>
        return 1;
   13672:	2001      	movs	r0, #1
   13674:	e7f6      	b.n	13664 <console_append_char+0x24>
   13676:	bf00      	nop
   13678:	200049a0 	.word	0x200049a0
   1367c:	200049a2 	.word	0x200049a2
   13680:	200002c0 	.word	0x200002c0

00013684 <console_clear_line>:
{
   13684:	b508      	push	{r3, lr}
    if (cur) {
   13686:	4b0b      	ldr	r3, [pc, #44]	; (136b4 <console_clear_line+0x30>)
   13688:	8819      	ldrh	r1, [r3, #0]
   1368a:	b971      	cbnz	r1, 136aa <console_clear_line+0x26>
    cur = 0;
   1368c:	2300      	movs	r3, #0
   1368e:	4a09      	ldr	r2, [pc, #36]	; (136b4 <console_clear_line+0x30>)
   13690:	8013      	strh	r3, [r2, #0]
    end = 0;
   13692:	4a09      	ldr	r2, [pc, #36]	; (136b8 <console_clear_line+0x34>)
   13694:	8013      	strh	r3, [r2, #0]
    console_out(ESC);
   13696:	201b      	movs	r0, #27
   13698:	f7ff ffc2 	bl	13620 <console_out>
    console_out('[');
   1369c:	205b      	movs	r0, #91	; 0x5b
   1369e:	f7ff ffbf 	bl	13620 <console_out>
    console_out('K');
   136a2:	204b      	movs	r0, #75	; 0x4b
   136a4:	f7ff ffbc 	bl	13620 <console_out>
}
   136a8:	bd08      	pop	{r3, pc}
    console_printf("\x1b[%uD", count);
   136aa:	4804      	ldr	r0, [pc, #16]	; (136bc <console_clear_line+0x38>)
   136ac:	f000 fbae 	bl	13e0c <console_printf>
}
   136b0:	e7ec      	b.n	1368c <console_clear_line+0x8>
   136b2:	bf00      	nop
   136b4:	200049a0 	.word	0x200049a0
   136b8:	200049a2 	.word	0x200049a2
   136bc:	0002717c 	.word	0x0002717c

000136c0 <insert_char>:
{
   136c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cur + end >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   136c2:	4b1d      	ldr	r3, [pc, #116]	; (13738 <insert_char+0x78>)
   136c4:	881b      	ldrh	r3, [r3, #0]
   136c6:	4413      	add	r3, r2
   136c8:	2bfe      	cmp	r3, #254	; 0xfe
   136ca:	dc0b      	bgt.n	136e4 <insert_char+0x24>
   136cc:	4604      	mov	r4, r0
   136ce:	460e      	mov	r6, r1
   136d0:	4615      	mov	r5, r2
    if (echo) {
   136d2:	4b1a      	ldr	r3, [pc, #104]	; (1373c <insert_char+0x7c>)
   136d4:	681b      	ldr	r3, [r3, #0]
   136d6:	b933      	cbnz	r3, 136e6 <insert_char+0x26>
    ++cur;
   136d8:	4a17      	ldr	r2, [pc, #92]	; (13738 <insert_char+0x78>)
   136da:	8813      	ldrh	r3, [r2, #0]
   136dc:	3301      	adds	r3, #1
   136de:	8013      	strh	r3, [r2, #0]
    if (end == 0) {
   136e0:	b92d      	cbnz	r5, 136ee <insert_char+0x2e>
        *pos = c;
   136e2:	7026      	strb	r6, [r4, #0]
}
   136e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        console_out(c);
   136e6:	4608      	mov	r0, r1
   136e8:	f7ff ff9a 	bl	13620 <console_out>
   136ec:	e7f4      	b.n	136d8 <insert_char+0x18>
    tmp = *pos;
   136ee:	7827      	ldrb	r7, [r4, #0]
    *(pos++) = c;
   136f0:	f804 6b01 	strb.w	r6, [r4], #1
    console_out(ESC);
   136f4:	201b      	movs	r0, #27
   136f6:	f7ff ff93 	bl	13620 <console_out>
    console_out('[');
   136fa:	205b      	movs	r0, #91	; 0x5b
   136fc:	f7ff ff90 	bl	13620 <console_out>
    console_out('s');
   13700:	2073      	movs	r0, #115	; 0x73
   13702:	f7ff ff8d 	bl	13620 <console_out>
}
   13706:	e009      	b.n	1371c <insert_char+0x5c>
        console_out(tmp);
   13708:	4638      	mov	r0, r7
   1370a:	f7ff ff89 	bl	13620 <console_out>
        c = *pos;
   1370e:	7823      	ldrb	r3, [r4, #0]
        *(pos++) = tmp;
   13710:	4620      	mov	r0, r4
   13712:	f800 7b01 	strb.w	r7, [r0], #1
        tmp = c;
   13716:	461f      	mov	r7, r3
    while (end-- > 0) {
   13718:	4635      	mov	r5, r6
        *(pos++) = tmp;
   1371a:	4604      	mov	r4, r0
    while (end-- > 0) {
   1371c:	1e6b      	subs	r3, r5, #1
   1371e:	b29e      	uxth	r6, r3
   13720:	2d00      	cmp	r5, #0
   13722:	d1f1      	bne.n	13708 <insert_char+0x48>
    console_out(ESC);
   13724:	201b      	movs	r0, #27
   13726:	f7ff ff7b 	bl	13620 <console_out>
    console_out('[');
   1372a:	205b      	movs	r0, #91	; 0x5b
   1372c:	f7ff ff78 	bl	13620 <console_out>
    console_out('u');
   13730:	2075      	movs	r0, #117	; 0x75
   13732:	f7ff ff75 	bl	13620 <console_out>
}
   13736:	e7d5      	b.n	136e4 <insert_char+0x24>
   13738:	200049a0 	.word	0x200049a0
   1373c:	200002c0 	.word	0x200002c0

00013740 <console_hist_move>:
{
   13740:	b538      	push	{r3, r4, r5, lr}
   13742:	4605      	mov	r5, r0
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   13744:	2941      	cmp	r1, #65	; 0x41
   13746:	d014      	beq.n	13772 <console_hist_move+0x32>
   13748:	4b15      	ldr	r3, [pc, #84]	; (137a0 <console_hist_move+0x60>)
   1374a:	781b      	ldrb	r3, [r3, #0]
    if (sh->curr == limit) {
   1374c:	4a14      	ldr	r2, [pc, #80]	; (137a0 <console_hist_move+0x60>)
   1374e:	78d0      	ldrb	r0, [r2, #3]
   13750:	4298      	cmp	r0, r3
   13752:	d023      	beq.n	1379c <console_hist_move+0x5c>
    if (direction == ANSI_UP) {
   13754:	2941      	cmp	r1, #65	; 0x41
   13756:	d00f      	beq.n	13778 <console_hist_move+0x38>
        sh->curr = ring_buf_next(sh->curr, sh->size);
   13758:	4c11      	ldr	r4, [pc, #68]	; (137a0 <console_hist_move+0x60>)
   1375a:	78a1      	ldrb	r1, [r4, #2]
   1375c:	f7ff fe0a 	bl	13374 <ring_buf_next>
   13760:	70e0      	strb	r0, [r4, #3]
    console_clear_line();
   13762:	f7ff ff8f 	bl	13684 <console_clear_line>
    str = sh->lines[sh->curr];
   13766:	4b0e      	ldr	r3, [pc, #56]	; (137a0 <console_hist_move+0x60>)
   13768:	78da      	ldrb	r2, [r3, #3]
   1376a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1376e:	685c      	ldr	r4, [r3, #4]
    while (str && *str != '\0') {
   13770:	e010      	b.n	13794 <console_hist_move+0x54>
    uint8_t limit = direction ==  ANSI_UP ? sh->tail : sh->head;
   13772:	4b0b      	ldr	r3, [pc, #44]	; (137a0 <console_hist_move+0x60>)
   13774:	785b      	ldrb	r3, [r3, #1]
   13776:	e7e9      	b.n	1374c <console_hist_move+0xc>
        sh->curr = ring_buf_prev(sh->curr, sh->size);
   13778:	4614      	mov	r4, r2
   1377a:	7891      	ldrb	r1, [r2, #2]
   1377c:	f7ff fe01 	bl	13382 <ring_buf_prev>
   13780:	70e0      	strb	r0, [r4, #3]
   13782:	e7ee      	b.n	13762 <console_hist_move+0x22>
        insert_char(&line[cur], *str, end);
   13784:	4b07      	ldr	r3, [pc, #28]	; (137a4 <console_hist_move+0x64>)
   13786:	8818      	ldrh	r0, [r3, #0]
   13788:	4b07      	ldr	r3, [pc, #28]	; (137a8 <console_hist_move+0x68>)
   1378a:	881a      	ldrh	r2, [r3, #0]
   1378c:	4428      	add	r0, r5
   1378e:	f7ff ff97 	bl	136c0 <insert_char>
        ++str;
   13792:	3401      	adds	r4, #1
    while (str && *str != '\0') {
   13794:	b114      	cbz	r4, 1379c <console_hist_move+0x5c>
   13796:	7821      	ldrb	r1, [r4, #0]
   13798:	2900      	cmp	r1, #0
   1379a:	d1f3      	bne.n	13784 <console_hist_move+0x44>
}
   1379c:	bd38      	pop	{r3, r4, r5, pc}
   1379e:	bf00      	nop
   137a0:	20004168 	.word	0x20004168
   137a4:	200049a0 	.word	0x200049a0
   137a8:	200049a2 	.word	0x200049a2

000137ac <del_char>:
{
   137ac:	b570      	push	{r4, r5, r6, lr}
   137ae:	4606      	mov	r6, r0
   137b0:	460d      	mov	r5, r1
    console_out('\b');
   137b2:	2008      	movs	r0, #8
   137b4:	f7ff ff34 	bl	13620 <console_out>
    if (end == 0) {
   137b8:	b14d      	cbz	r5, 137ce <del_char+0x22>
    console_out(ESC);
   137ba:	201b      	movs	r0, #27
   137bc:	f7ff ff30 	bl	13620 <console_out>
    console_out('[');
   137c0:	205b      	movs	r0, #91	; 0x5b
   137c2:	f7ff ff2d 	bl	13620 <console_out>
    console_out('s');
   137c6:	2073      	movs	r0, #115	; 0x73
   137c8:	f7ff ff2a 	bl	13620 <console_out>
}
   137cc:	e00c      	b.n	137e8 <del_char+0x3c>
        console_out(' ');
   137ce:	2020      	movs	r0, #32
   137d0:	f7ff ff26 	bl	13620 <console_out>
        console_out('\b');
   137d4:	2008      	movs	r0, #8
   137d6:	f7ff ff23 	bl	13620 <console_out>
        return;
   137da:	e015      	b.n	13808 <del_char+0x5c>
        *pos = *(pos + 1);
   137dc:	7870      	ldrb	r0, [r6, #1]
   137de:	f806 0b01 	strb.w	r0, [r6], #1
        console_out(*(pos++));
   137e2:	f7ff ff1d 	bl	13620 <console_out>
    while (end-- > 0) {
   137e6:	4625      	mov	r5, r4
   137e8:	1e6b      	subs	r3, r5, #1
   137ea:	b29c      	uxth	r4, r3
   137ec:	2d00      	cmp	r5, #0
   137ee:	d1f5      	bne.n	137dc <del_char+0x30>
    console_out(' ');
   137f0:	2020      	movs	r0, #32
   137f2:	f7ff ff15 	bl	13620 <console_out>
    console_out(ESC);
   137f6:	201b      	movs	r0, #27
   137f8:	f7ff ff12 	bl	13620 <console_out>
    console_out('[');
   137fc:	205b      	movs	r0, #91	; 0x5b
   137fe:	f7ff ff0f 	bl	13620 <console_out>
    console_out('u');
   13802:	2075      	movs	r0, #117	; 0x75
   13804:	f7ff ff0c 	bl	13620 <console_out>
}
   13808:	bd70      	pop	{r4, r5, r6, pc}
	...

0001380c <console_write>:
{
   1380c:	b570      	push	{r4, r5, r6, lr}
   1380e:	4606      	mov	r6, r0
   13810:	460d      	mov	r5, r1
    if (console_lock(timeout) != OS_OK) {
   13812:	2080      	movs	r0, #128	; 0x80
   13814:	f7ff fed0 	bl	135b8 <console_lock>
   13818:	bb88      	cbnz	r0, 1387e <console_write+0x72>
   1381a:	4604      	mov	r4, r0
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   1381c:	2d01      	cmp	r5, #1
   1381e:	dd02      	ble.n	13826 <console_write+0x1a>
   13820:	7833      	ldrb	r3, [r6, #0]
   13822:	2b04      	cmp	r3, #4
   13824:	d014      	beq.n	13850 <console_write+0x44>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   13826:	2d02      	cmp	r5, #2
   13828:	dd02      	ble.n	13830 <console_write+0x24>
   1382a:	7873      	ldrb	r3, [r6, #1]
   1382c:	2b06      	cmp	r3, #6
   1382e:	d016      	beq.n	1385e <console_write+0x52>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   13830:	4b15      	ldr	r3, [pc, #84]	; (13888 <console_write+0x7c>)
   13832:	781b      	ldrb	r3, [r3, #0]
   13834:	b913      	cbnz	r3, 1383c <console_write+0x30>
   13836:	4b15      	ldr	r3, [pc, #84]	; (1388c <console_write+0x80>)
   13838:	781b      	ldrb	r3, [r3, #0]
   1383a:	b9bb      	cbnz	r3, 1386c <console_write+0x60>
    for (i = 0; i < cnt; i++) {
   1383c:	42ac      	cmp	r4, r5
   1383e:	da15      	bge.n	1386c <console_write+0x60>
        if (console_out_nolock((int)str[i]) == EOF) {
   13840:	5d30      	ldrb	r0, [r6, r4]
   13842:	f000 fc03 	bl	1404c <console_out_nolock>
   13846:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1384a:	d00f      	beq.n	1386c <console_write+0x60>
    for (i = 0; i < cnt; i++) {
   1384c:	3401      	adds	r4, #1
   1384e:	e7f5      	b.n	1383c <console_write+0x30>
        str[1] == CONSOLE_NLIP_DATA_START2) {
   13850:	7873      	ldrb	r3, [r6, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   13852:	2b14      	cmp	r3, #20
   13854:	d1e7      	bne.n	13826 <console_write+0x1a>
        g_is_output_nlip = 1;
   13856:	4b0c      	ldr	r3, [pc, #48]	; (13888 <console_write+0x7c>)
   13858:	2201      	movs	r2, #1
   1385a:	701a      	strb	r2, [r3, #0]
   1385c:	e7e3      	b.n	13826 <console_write+0x1a>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   1385e:	78b3      	ldrb	r3, [r6, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   13860:	2b09      	cmp	r3, #9
   13862:	d1e5      	bne.n	13830 <console_write+0x24>
        g_is_output_nlip = 1;
   13864:	4b08      	ldr	r3, [pc, #32]	; (13888 <console_write+0x7c>)
   13866:	2201      	movs	r2, #1
   13868:	701a      	strb	r2, [r3, #0]
   1386a:	e7e1      	b.n	13830 <console_write+0x24>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1386c:	2d00      	cmp	r5, #0
   1386e:	dd04      	ble.n	1387a <console_write+0x6e>
   13870:	4435      	add	r5, r6
   13872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13876:	2b0a      	cmp	r3, #10
   13878:	d002      	beq.n	13880 <console_write+0x74>
    (void)console_unlock();
   1387a:	f7ff feb7 	bl	135ec <console_unlock>
}
   1387e:	bd70      	pop	{r4, r5, r6, pc}
        g_is_output_nlip = 0;
   13880:	4b01      	ldr	r3, [pc, #4]	; (13888 <console_write+0x7c>)
   13882:	2200      	movs	r2, #0
   13884:	701a      	strb	r2, [r3, #0]
   13886:	e7f8      	b.n	1387a <console_write+0x6e>
   13888:	200049af 	.word	0x200049af
   1388c:	200049ae 	.word	0x200049ae

00013890 <console_blocking_mode>:
{
   13890:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   13892:	f000 fbb5 	bl	14000 <uart_console_blocking_mode>
}
   13896:	bd08      	pop	{r3, pc}

00013898 <console_non_blocking_mode>:
{
   13898:	b508      	push	{r3, lr}
    uart_console_non_blocking_mode();
   1389a:	f000 fbc7 	bl	1402c <uart_console_non_blocking_mode>
}
   1389e:	bd08      	pop	{r3, pc}

000138a0 <handle_ansi>:
{
   138a0:	b538      	push	{r3, r4, r5, lr}
   138a2:	4604      	mov	r4, r0
   138a4:	460d      	mov	r5, r1
    if (esc_state & ESC_ANSI_FIRST) {
   138a6:	4b60      	ldr	r3, [pc, #384]	; (13a28 <handle_ansi+0x188>)
   138a8:	681b      	ldr	r3, [r3, #0]
   138aa:	f013 0f04 	tst.w	r3, #4
   138ae:	d024      	beq.n	138fa <handle_ansi+0x5a>
        esc_state &= ~ESC_ANSI_FIRST;
   138b0:	f023 0304 	bic.w	r3, r3, #4
   138b4:	4a5c      	ldr	r2, [pc, #368]	; (13a28 <handle_ansi+0x188>)
   138b6:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
   138b8:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   138bc:	2a09      	cmp	r2, #9
   138be:	d910      	bls.n	138e2 <handle_ansi+0x42>
            ansi_val = 1;
   138c0:	4b5a      	ldr	r3, [pc, #360]	; (13a2c <handle_ansi+0x18c>)
   138c2:	2201      	movs	r2, #1
   138c4:	601a      	str	r2, [r3, #0]
    switch (byte) {
   138c6:	2c48      	cmp	r4, #72	; 0x48
   138c8:	d847      	bhi.n	1395a <handle_ansi+0xba>
   138ca:	2c41      	cmp	r4, #65	; 0x41
   138cc:	d361      	bcc.n	13992 <handle_ansi+0xf2>
   138ce:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   138d2:	2b07      	cmp	r3, #7
   138d4:	d85d      	bhi.n	13992 <handle_ansi+0xf2>
   138d6:	e8df f003 	tbb	[pc, r3]
   138da:	5454      	.short	0x5454
   138dc:	965c6274 	.word	0x965c6274
   138e0:	865c      	.short	0x865c
        esc_state |= ESC_ANSI_VAL;
   138e2:	f043 0308 	orr.w	r3, r3, #8
   138e6:	4a50      	ldr	r2, [pc, #320]	; (13a28 <handle_ansi+0x188>)
   138e8:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
   138ea:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
   138ee:	4b4f      	ldr	r3, [pc, #316]	; (13a2c <handle_ansi+0x18c>)
   138f0:	601c      	str	r4, [r3, #0]
        ansi_val_2 = 0;
   138f2:	4b4f      	ldr	r3, [pc, #316]	; (13a30 <handle_ansi+0x190>)
   138f4:	2200      	movs	r2, #0
   138f6:	601a      	str	r2, [r3, #0]
        return;
   138f8:	e050      	b.n	1399c <handle_ansi+0xfc>
    if (esc_state & ESC_ANSI_VAL) {
   138fa:	f013 0f08 	tst.w	r3, #8
   138fe:	d0e2      	beq.n	138c6 <handle_ansi+0x26>
        if (isdigit(byte)) {
   13900:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   13904:	2a09      	cmp	r2, #9
   13906:	d909      	bls.n	1391c <handle_ansi+0x7c>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   13908:	283b      	cmp	r0, #59	; 0x3b
   1390a:	d01e      	beq.n	1394a <handle_ansi+0xaa>
        esc_state &= ~ESC_ANSI_VAL;
   1390c:	f023 0108 	bic.w	r1, r3, #8
   13910:	4a45      	ldr	r2, [pc, #276]	; (13a28 <handle_ansi+0x188>)
   13912:	6011      	str	r1, [r2, #0]
        esc_state &= ~ESC_ANSI_VAL_2;
   13914:	f023 0318 	bic.w	r3, r3, #24
   13918:	6013      	str	r3, [r2, #0]
   1391a:	e7d4      	b.n	138c6 <handle_ansi+0x26>
            if (esc_state & ESC_ANSI_VAL_2) {
   1391c:	f013 0f10 	tst.w	r3, #16
   13920:	d009      	beq.n	13936 <handle_ansi+0x96>
                ansi_val_2 *= 10;
   13922:	4a43      	ldr	r2, [pc, #268]	; (13a30 <handle_ansi+0x190>)
   13924:	6813      	ldr	r3, [r2, #0]
   13926:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1392a:	005b      	lsls	r3, r3, #1
   1392c:	6013      	str	r3, [r2, #0]
                ansi_val_2 += byte - '0';
   1392e:	4403      	add	r3, r0
   13930:	3b30      	subs	r3, #48	; 0x30
   13932:	6013      	str	r3, [r2, #0]
   13934:	e032      	b.n	1399c <handle_ansi+0xfc>
                ansi_val *= 10;
   13936:	4a3d      	ldr	r2, [pc, #244]	; (13a2c <handle_ansi+0x18c>)
   13938:	6813      	ldr	r3, [r2, #0]
   1393a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1393e:	005b      	lsls	r3, r3, #1
   13940:	6013      	str	r3, [r2, #0]
                ansi_val += byte - '0';
   13942:	4403      	add	r3, r0
   13944:	3b30      	subs	r3, #48	; 0x30
   13946:	6013      	str	r3, [r2, #0]
            return;
   13948:	e028      	b.n	1399c <handle_ansi+0xfc>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   1394a:	f013 0f10 	tst.w	r3, #16
   1394e:	d1dd      	bne.n	1390c <handle_ansi+0x6c>
            esc_state |= ESC_ANSI_VAL_2;
   13950:	f043 0310 	orr.w	r3, r3, #16
   13954:	4a34      	ldr	r2, [pc, #208]	; (13a28 <handle_ansi+0x188>)
   13956:	6013      	str	r3, [r2, #0]
            return;
   13958:	e020      	b.n	1399c <handle_ansi+0xfc>
    switch (byte) {
   1395a:	2c7e      	cmp	r4, #126	; 0x7e
   1395c:	d119      	bne.n	13992 <handle_ansi+0xf2>
        if (!end) {
   1395e:	4b35      	ldr	r3, [pc, #212]	; (13a34 <handle_ansi+0x194>)
   13960:	881b      	ldrh	r3, [r3, #0]
   13962:	b1b3      	cbz	r3, 13992 <handle_ansi+0xf2>
    console_printf("\x1b[%uC", count);
   13964:	2101      	movs	r1, #1
   13966:	4834      	ldr	r0, [pc, #208]	; (13a38 <handle_ansi+0x198>)
   13968:	f000 fa50 	bl	13e0c <console_printf>
        del_char(&line[cur], --end);
   1396c:	4b33      	ldr	r3, [pc, #204]	; (13a3c <handle_ansi+0x19c>)
   1396e:	8818      	ldrh	r0, [r3, #0]
   13970:	4b30      	ldr	r3, [pc, #192]	; (13a34 <handle_ansi+0x194>)
   13972:	8819      	ldrh	r1, [r3, #0]
   13974:	3901      	subs	r1, #1
   13976:	b289      	uxth	r1, r1
   13978:	8019      	strh	r1, [r3, #0]
   1397a:	4428      	add	r0, r5
   1397c:	f7ff ff16 	bl	137ac <del_char>
        break;
   13980:	e007      	b.n	13992 <handle_ansi+0xf2>
        console_blocking_mode();
   13982:	f7ff ff85 	bl	13890 <console_blocking_mode>
        console_hist_move(line, byte);
   13986:	4621      	mov	r1, r4
   13988:	4628      	mov	r0, r5
   1398a:	f7ff fed9 	bl	13740 <console_hist_move>
        console_non_blocking_mode();
   1398e:	f7ff ff83 	bl	13898 <console_non_blocking_mode>
    esc_state &= ~ESC_ANSI;
   13992:	4a25      	ldr	r2, [pc, #148]	; (13a28 <handle_ansi+0x188>)
   13994:	6813      	ldr	r3, [r2, #0]
   13996:	f023 0302 	bic.w	r3, r3, #2
   1399a:	6013      	str	r3, [r2, #0]
}
   1399c:	bd38      	pop	{r3, r4, r5, pc}
        if (ansi_val > cur) {
   1399e:	4b27      	ldr	r3, [pc, #156]	; (13a3c <handle_ansi+0x19c>)
   139a0:	881b      	ldrh	r3, [r3, #0]
   139a2:	4a22      	ldr	r2, [pc, #136]	; (13a2c <handle_ansi+0x18c>)
   139a4:	6811      	ldr	r1, [r2, #0]
   139a6:	428b      	cmp	r3, r1
   139a8:	d3f3      	bcc.n	13992 <handle_ansi+0xf2>
        end += ansi_val;
   139aa:	b288      	uxth	r0, r1
   139ac:	4c21      	ldr	r4, [pc, #132]	; (13a34 <handle_ansi+0x194>)
   139ae:	8822      	ldrh	r2, [r4, #0]
   139b0:	4402      	add	r2, r0
   139b2:	8022      	strh	r2, [r4, #0]
        cur -= ansi_val;
   139b4:	1a1b      	subs	r3, r3, r0
   139b6:	4a21      	ldr	r2, [pc, #132]	; (13a3c <handle_ansi+0x19c>)
   139b8:	8013      	strh	r3, [r2, #0]
    console_printf("\x1b[%uD", count);
   139ba:	4821      	ldr	r0, [pc, #132]	; (13a40 <handle_ansi+0x1a0>)
   139bc:	f000 fa26 	bl	13e0c <console_printf>
}
   139c0:	e7e7      	b.n	13992 <handle_ansi+0xf2>
        if (ansi_val > end) {
   139c2:	4b1c      	ldr	r3, [pc, #112]	; (13a34 <handle_ansi+0x194>)
   139c4:	881b      	ldrh	r3, [r3, #0]
   139c6:	4a19      	ldr	r2, [pc, #100]	; (13a2c <handle_ansi+0x18c>)
   139c8:	6811      	ldr	r1, [r2, #0]
   139ca:	428b      	cmp	r3, r1
   139cc:	d3e1      	bcc.n	13992 <handle_ansi+0xf2>
        end -= ansi_val;
   139ce:	b28a      	uxth	r2, r1
   139d0:	1a9b      	subs	r3, r3, r2
   139d2:	4818      	ldr	r0, [pc, #96]	; (13a34 <handle_ansi+0x194>)
   139d4:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   139d6:	4b19      	ldr	r3, [pc, #100]	; (13a3c <handle_ansi+0x19c>)
   139d8:	8818      	ldrh	r0, [r3, #0]
   139da:	4402      	add	r2, r0
   139dc:	801a      	strh	r2, [r3, #0]
    console_printf("\x1b[%uC", count);
   139de:	4816      	ldr	r0, [pc, #88]	; (13a38 <handle_ansi+0x198>)
   139e0:	f000 fa14 	bl	13e0c <console_printf>
}
   139e4:	e7d5      	b.n	13992 <handle_ansi+0xf2>
        if (!cur) {
   139e6:	4b15      	ldr	r3, [pc, #84]	; (13a3c <handle_ansi+0x19c>)
   139e8:	8819      	ldrh	r1, [r3, #0]
   139ea:	2900      	cmp	r1, #0
   139ec:	d0d1      	beq.n	13992 <handle_ansi+0xf2>
    console_printf("\x1b[%uD", count);
   139ee:	4814      	ldr	r0, [pc, #80]	; (13a40 <handle_ansi+0x1a0>)
   139f0:	f000 fa0c 	bl	13e0c <console_printf>
        end += cur;
   139f4:	490f      	ldr	r1, [pc, #60]	; (13a34 <handle_ansi+0x194>)
   139f6:	4a11      	ldr	r2, [pc, #68]	; (13a3c <handle_ansi+0x19c>)
   139f8:	880b      	ldrh	r3, [r1, #0]
   139fa:	8810      	ldrh	r0, [r2, #0]
   139fc:	4403      	add	r3, r0
   139fe:	800b      	strh	r3, [r1, #0]
        cur = 0;
   13a00:	2300      	movs	r3, #0
   13a02:	8013      	strh	r3, [r2, #0]
        break;
   13a04:	e7c5      	b.n	13992 <handle_ansi+0xf2>
        if (!end) {
   13a06:	4b0b      	ldr	r3, [pc, #44]	; (13a34 <handle_ansi+0x194>)
   13a08:	8819      	ldrh	r1, [r3, #0]
   13a0a:	2900      	cmp	r1, #0
   13a0c:	d0c1      	beq.n	13992 <handle_ansi+0xf2>
    console_printf("\x1b[%uC", count);
   13a0e:	480a      	ldr	r0, [pc, #40]	; (13a38 <handle_ansi+0x198>)
   13a10:	f000 f9fc 	bl	13e0c <console_printf>
        cur += end;
   13a14:	4909      	ldr	r1, [pc, #36]	; (13a3c <handle_ansi+0x19c>)
   13a16:	4a07      	ldr	r2, [pc, #28]	; (13a34 <handle_ansi+0x194>)
   13a18:	880b      	ldrh	r3, [r1, #0]
   13a1a:	8810      	ldrh	r0, [r2, #0]
   13a1c:	4403      	add	r3, r0
   13a1e:	800b      	strh	r3, [r1, #0]
        end = 0;
   13a20:	2300      	movs	r3, #0
   13a22:	8013      	strh	r3, [r2, #0]
        break;
   13a24:	e7b5      	b.n	13992 <handle_ansi+0xf2>
   13a26:	bf00      	nop
   13a28:	200049a4 	.word	0x200049a4
   13a2c:	20004148 	.word	0x20004148
   13a30:	2000414c 	.word	0x2000414c
   13a34:	200049a2 	.word	0x200049a2
   13a38:	00027184 	.word	0x00027184
   13a3c:	200049a0 	.word	0x200049a0
   13a40:	0002717c 	.word	0x0002717c

00013a44 <console_handle_char>:


int
console_handle_char(uint8_t byte)
{
   13a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif
    static struct os_event *ev;
    static struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   13a48:	4b8a      	ldr	r3, [pc, #552]	; (13c74 <console_handle_char+0x230>)
   13a4a:	681b      	ldr	r3, [r3, #0]
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	f000 8161 	beq.w	13d14 <console_handle_char+0x2d0>
   13a52:	4604      	mov	r4, r0
        return 0;
    }

    if (!ev) {
   13a54:	4b88      	ldr	r3, [pc, #544]	; (13c78 <console_handle_char+0x234>)
   13a56:	681b      	ldr	r3, [r3, #0]
   13a58:	b1cb      	cbz	r3, 13a8e <console_handle_char+0x4a>
            return -1;
        }
        input = ev->ev_arg;
    }

    if (handle_nlip(byte))  {
   13a5a:	4620      	mov	r0, r4
   13a5c:	f7ff fca6 	bl	133ac <handle_nlip>
   13a60:	4605      	mov	r5, r0
   13a62:	2800      	cmp	r0, #0
   13a64:	d064      	beq.n	13b30 <console_handle_char+0xec>
        if (byte == '\n') {
   13a66:	2c0a      	cmp	r4, #10
   13a68:	d021      	beq.n	13aae <console_handle_char+0x6a>
            input = NULL;
            ev = NULL;
            console_echo(1);
            return 0;
        /* Ignore characters if there's no more buffer space */
        } else if (byte == CONSOLE_NLIP_PKT_START2) {
   13a6a:	2c09      	cmp	r4, #9
   13a6c:	d044      	beq.n	13af8 <console_handle_char+0xb4>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
        } else if (byte == CONSOLE_NLIP_DATA_START2) {
   13a6e:	2c14      	cmp	r4, #20
   13a70:	d050      	beq.n	13b14 <console_handle_char+0xd0>
            /* Disable echo to not flood the UART */
            console_echo(0);
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
        }

        insert_char(&input->line[cur], byte, end);
   13a72:	4b82      	ldr	r3, [pc, #520]	; (13c7c <console_handle_char+0x238>)
   13a74:	6818      	ldr	r0, [r3, #0]
   13a76:	4b82      	ldr	r3, [pc, #520]	; (13c80 <console_handle_char+0x23c>)
   13a78:	881b      	ldrh	r3, [r3, #0]
   13a7a:	4a82      	ldr	r2, [pc, #520]	; (13c84 <console_handle_char+0x240>)
   13a7c:	8812      	ldrh	r2, [r2, #0]
   13a7e:	4621      	mov	r1, r4
   13a80:	4418      	add	r0, r3
   13a82:	f7ff fe1d 	bl	136c0 <insert_char>

        return 0;
   13a86:	2500      	movs	r5, #0

    if (!g_console_ignore_non_nlip) {
        insert_char(&input->line[cur], byte, end);
    }
    return 0;
}
   13a88:	4628      	mov	r0, r5
   13a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ev = os_eventq_get_no_wait(&avail_queue);
   13a8e:	487e      	ldr	r0, [pc, #504]	; (13c88 <console_handle_char+0x244>)
   13a90:	f7f5 ff00 	bl	9894 <os_eventq_get_no_wait>
   13a94:	4b78      	ldr	r3, [pc, #480]	; (13c78 <console_handle_char+0x234>)
   13a96:	6018      	str	r0, [r3, #0]
        if (!ev) {
   13a98:	b118      	cbz	r0, 13aa2 <console_handle_char+0x5e>
        input = ev->ev_arg;
   13a9a:	6882      	ldr	r2, [r0, #8]
   13a9c:	4b77      	ldr	r3, [pc, #476]	; (13c7c <console_handle_char+0x238>)
   13a9e:	601a      	str	r2, [r3, #0]
   13aa0:	e7db      	b.n	13a5a <console_handle_char+0x16>
            rx_stalled = true;
   13aa2:	4b7a      	ldr	r3, [pc, #488]	; (13c8c <console_handle_char+0x248>)
   13aa4:	2201      	movs	r2, #1
   13aa6:	701a      	strb	r2, [r3, #0]
            return -1;
   13aa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13aac:	e7ec      	b.n	13a88 <console_handle_char+0x44>
            insert_char(&input->line[cur], byte, end);
   13aae:	4f73      	ldr	r7, [pc, #460]	; (13c7c <console_handle_char+0x238>)
   13ab0:	6838      	ldr	r0, [r7, #0]
   13ab2:	4d73      	ldr	r5, [pc, #460]	; (13c80 <console_handle_char+0x23c>)
   13ab4:	882b      	ldrh	r3, [r5, #0]
   13ab6:	4e73      	ldr	r6, [pc, #460]	; (13c84 <console_handle_char+0x240>)
   13ab8:	8832      	ldrh	r2, [r6, #0]
   13aba:	4621      	mov	r1, r4
   13abc:	4418      	add	r0, r3
   13abe:	f7ff fdff 	bl	136c0 <insert_char>
            input->line[cur] = '\0';
   13ac2:	683a      	ldr	r2, [r7, #0]
   13ac4:	882b      	ldrh	r3, [r5, #0]
   13ac6:	2400      	movs	r4, #0
   13ac8:	54d4      	strb	r4, [r2, r3]
            cur = 0;
   13aca:	802c      	strh	r4, [r5, #0]
            end = 0;
   13acc:	8034      	strh	r4, [r6, #0]
            os_eventq_put(lines_queue, ev);
   13ace:	4b6a      	ldr	r3, [pc, #424]	; (13c78 <console_handle_char+0x234>)
   13ad0:	6819      	ldr	r1, [r3, #0]
   13ad2:	4b68      	ldr	r3, [pc, #416]	; (13c74 <console_handle_char+0x230>)
   13ad4:	6818      	ldr	r0, [r3, #0]
   13ad6:	f7f5 fea9 	bl	982c <os_eventq_put>
            nlip_state = 0;
   13ada:	4b6d      	ldr	r3, [pc, #436]	; (13c90 <console_handle_char+0x24c>)
   13adc:	601c      	str	r4, [r3, #0]
            if (console_compat_rx_cb) {
   13ade:	4b6d      	ldr	r3, [pc, #436]	; (13c94 <console_handle_char+0x250>)
   13ae0:	681b      	ldr	r3, [r3, #0]
   13ae2:	b103      	cbz	r3, 13ae6 <console_handle_char+0xa2>
                console_compat_rx_cb();
   13ae4:	4798      	blx	r3
            input = NULL;
   13ae6:	2500      	movs	r5, #0
   13ae8:	4b64      	ldr	r3, [pc, #400]	; (13c7c <console_handle_char+0x238>)
   13aea:	601d      	str	r5, [r3, #0]
            ev = NULL;
   13aec:	4b62      	ldr	r3, [pc, #392]	; (13c78 <console_handle_char+0x234>)
   13aee:	601d      	str	r5, [r3, #0]
            console_echo(1);
   13af0:	2001      	movs	r0, #1
   13af2:	f7ff fd5b 	bl	135ac <console_echo>
            return 0;
   13af6:	e7c7      	b.n	13a88 <console_handle_char+0x44>
            console_echo(0);
   13af8:	2000      	movs	r0, #0
   13afa:	f7ff fd57 	bl	135ac <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1, end);
   13afe:	4b5f      	ldr	r3, [pc, #380]	; (13c7c <console_handle_char+0x238>)
   13b00:	6818      	ldr	r0, [r3, #0]
   13b02:	4b5f      	ldr	r3, [pc, #380]	; (13c80 <console_handle_char+0x23c>)
   13b04:	881b      	ldrh	r3, [r3, #0]
   13b06:	4a5f      	ldr	r2, [pc, #380]	; (13c84 <console_handle_char+0x240>)
   13b08:	8812      	ldrh	r2, [r2, #0]
   13b0a:	2106      	movs	r1, #6
   13b0c:	4418      	add	r0, r3
   13b0e:	f7ff fdd7 	bl	136c0 <insert_char>
   13b12:	e7ae      	b.n	13a72 <console_handle_char+0x2e>
            console_echo(0);
   13b14:	2000      	movs	r0, #0
   13b16:	f7ff fd49 	bl	135ac <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1, end);
   13b1a:	4b58      	ldr	r3, [pc, #352]	; (13c7c <console_handle_char+0x238>)
   13b1c:	6818      	ldr	r0, [r3, #0]
   13b1e:	4b58      	ldr	r3, [pc, #352]	; (13c80 <console_handle_char+0x23c>)
   13b20:	881b      	ldrh	r3, [r3, #0]
   13b22:	4a58      	ldr	r2, [pc, #352]	; (13c84 <console_handle_char+0x240>)
   13b24:	8812      	ldrh	r2, [r2, #0]
   13b26:	2104      	movs	r1, #4
   13b28:	4418      	add	r0, r3
   13b2a:	f7ff fdc9 	bl	136c0 <insert_char>
   13b2e:	e7a0      	b.n	13a72 <console_handle_char+0x2e>
    if (esc_state & ESC_ANSI) {
   13b30:	4b59      	ldr	r3, [pc, #356]	; (13c98 <console_handle_char+0x254>)
   13b32:	681b      	ldr	r3, [r3, #0]
   13b34:	f013 0602 	ands.w	r6, r3, #2
   13b38:	d009      	beq.n	13b4e <console_handle_char+0x10a>
        if (g_console_ignore_non_nlip) {
   13b3a:	4b58      	ldr	r3, [pc, #352]	; (13c9c <console_handle_char+0x258>)
   13b3c:	781b      	ldrb	r3, [r3, #0]
   13b3e:	2b00      	cmp	r3, #0
   13b40:	d1a2      	bne.n	13a88 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
   13b42:	4b4e      	ldr	r3, [pc, #312]	; (13c7c <console_handle_char+0x238>)
   13b44:	6819      	ldr	r1, [r3, #0]
   13b46:	4620      	mov	r0, r4
   13b48:	f7ff feaa 	bl	138a0 <handle_ansi>
        return 0;
   13b4c:	e79c      	b.n	13a88 <console_handle_char+0x44>
    if (esc_state & ESC_ESC) {
   13b4e:	f013 0501 	ands.w	r5, r3, #1
   13b52:	d01a      	beq.n	13b8a <console_handle_char+0x146>
        if (g_console_ignore_non_nlip) {
   13b54:	4a51      	ldr	r2, [pc, #324]	; (13c9c <console_handle_char+0x258>)
   13b56:	7812      	ldrb	r2, [r2, #0]
   13b58:	b10a      	cbz	r2, 13b5e <console_handle_char+0x11a>
            return 0;
   13b5a:	4635      	mov	r5, r6
   13b5c:	e794      	b.n	13a88 <console_handle_char+0x44>
        esc_state &= ~ESC_ESC;
   13b5e:	f023 0301 	bic.w	r3, r3, #1
   13b62:	4a4d      	ldr	r2, [pc, #308]	; (13c98 <console_handle_char+0x254>)
   13b64:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   13b66:	4b45      	ldr	r3, [pc, #276]	; (13c7c <console_handle_char+0x238>)
   13b68:	6819      	ldr	r1, [r3, #0]
   13b6a:	4620      	mov	r0, r4
   13b6c:	f7ff fe98 	bl	138a0 <handle_ansi>
        switch (byte) {
   13b70:	2c5b      	cmp	r4, #91	; 0x5b
   13b72:	d001      	beq.n	13b78 <console_handle_char+0x134>
        return 0;
   13b74:	4635      	mov	r5, r6
   13b76:	e787      	b.n	13a88 <console_handle_char+0x44>
            esc_state |= ESC_ANSI;
   13b78:	4a47      	ldr	r2, [pc, #284]	; (13c98 <console_handle_char+0x254>)
   13b7a:	6813      	ldr	r3, [r2, #0]
   13b7c:	f043 0102 	orr.w	r1, r3, #2
   13b80:	6011      	str	r1, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   13b82:	f043 0306 	orr.w	r3, r3, #6
   13b86:	6013      	str	r3, [r2, #0]
            break;
   13b88:	e7f4      	b.n	13b74 <console_handle_char+0x130>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   13b8a:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   13b8e:	2b5e      	cmp	r3, #94	; 0x5e
   13b90:	d80f      	bhi.n	13bb2 <console_handle_char+0x16e>
    if (!g_console_ignore_non_nlip) {
   13b92:	4b42      	ldr	r3, [pc, #264]	; (13c9c <console_handle_char+0x258>)
   13b94:	781b      	ldrb	r3, [r3, #0]
   13b96:	2b00      	cmp	r3, #0
   13b98:	f47f af76 	bne.w	13a88 <console_handle_char+0x44>
        insert_char(&input->line[cur], byte, end);
   13b9c:	4b37      	ldr	r3, [pc, #220]	; (13c7c <console_handle_char+0x238>)
   13b9e:	6818      	ldr	r0, [r3, #0]
   13ba0:	4b37      	ldr	r3, [pc, #220]	; (13c80 <console_handle_char+0x23c>)
   13ba2:	881b      	ldrh	r3, [r3, #0]
   13ba4:	4a37      	ldr	r2, [pc, #220]	; (13c84 <console_handle_char+0x240>)
   13ba6:	8812      	ldrh	r2, [r2, #0]
   13ba8:	4621      	mov	r1, r4
   13baa:	4418      	add	r0, r3
   13bac:	f7ff fd88 	bl	136c0 <insert_char>
   13bb0:	e76a      	b.n	13a88 <console_handle_char+0x44>
        handle_ansi(byte, input->line);
   13bb2:	4b32      	ldr	r3, [pc, #200]	; (13c7c <console_handle_char+0x238>)
   13bb4:	6819      	ldr	r1, [r3, #0]
   13bb6:	4620      	mov	r0, r4
   13bb8:	f7ff fe72 	bl	138a0 <handle_ansi>
        switch (byte) {
   13bbc:	2c1b      	cmp	r4, #27
   13bbe:	d812      	bhi.n	13be6 <console_handle_char+0x1a2>
   13bc0:	2c04      	cmp	r4, #4
   13bc2:	d312      	bcc.n	13bea <console_handle_char+0x1a6>
   13bc4:	1f23      	subs	r3, r4, #4
   13bc6:	2b17      	cmp	r3, #23
   13bc8:	d80f      	bhi.n	13bea <console_handle_char+0x1a6>
   13bca:	e8df f003 	tbb	[pc, r3]
   13bce:	0e4d      	.short	0x0e4d
   13bd0:	8f6b0e47 	.word	0x8f6b0e47
   13bd4:	180e0e18 	.word	0x180e0e18
   13bd8:	0e0e0e0e 	.word	0x0e0e0e0e
   13bdc:	0e0e0e0e 	.word	0x0e0e0e0e
   13be0:	0e0e0e0e 	.word	0x0e0e0e0e
   13be4:	810e      	.short	0x810e
   13be6:	2c7f      	cmp	r4, #127	; 0x7f
   13be8:	d05c      	beq.n	13ca4 <console_handle_char+0x260>
            insert_char(&input->line[cur], byte, end);
   13bea:	4b24      	ldr	r3, [pc, #144]	; (13c7c <console_handle_char+0x238>)
   13bec:	6818      	ldr	r0, [r3, #0]
   13bee:	4b24      	ldr	r3, [pc, #144]	; (13c80 <console_handle_char+0x23c>)
   13bf0:	881b      	ldrh	r3, [r3, #0]
   13bf2:	4a24      	ldr	r2, [pc, #144]	; (13c84 <console_handle_char+0x240>)
   13bf4:	8812      	ldrh	r2, [r2, #0]
   13bf6:	4621      	mov	r1, r4
   13bf8:	4418      	add	r0, r3
   13bfa:	f7ff fd61 	bl	136c0 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   13bfe:	2c0a      	cmp	r4, #10
   13c00:	d103      	bne.n	13c0a <console_handle_char+0x1c6>
   13c02:	4b27      	ldr	r3, [pc, #156]	; (13ca0 <console_handle_char+0x25c>)
   13c04:	781b      	ldrb	r3, [r3, #0]
   13c06:	2b0d      	cmp	r3, #13
   13c08:	d06d      	beq.n	13ce6 <console_handle_char+0x2a2>
            prev_endl = byte;
   13c0a:	4b25      	ldr	r3, [pc, #148]	; (13ca0 <console_handle_char+0x25c>)
   13c0c:	701c      	strb	r4, [r3, #0]
            input->line[cur + end] = '\0';
   13c0e:	4e1b      	ldr	r6, [pc, #108]	; (13c7c <console_handle_char+0x238>)
   13c10:	6832      	ldr	r2, [r6, #0]
   13c12:	f8df 806c 	ldr.w	r8, [pc, #108]	; 13c80 <console_handle_char+0x23c>
   13c16:	f8b8 3000 	ldrh.w	r3, [r8]
   13c1a:	4f1a      	ldr	r7, [pc, #104]	; (13c84 <console_handle_char+0x240>)
   13c1c:	8839      	ldrh	r1, [r7, #0]
   13c1e:	440b      	add	r3, r1
   13c20:	2400      	movs	r4, #0
   13c22:	54d4      	strb	r4, [r2, r3]
            console_out('\r');
   13c24:	200d      	movs	r0, #13
   13c26:	f7ff fcfb 	bl	13620 <console_out>
            console_out('\n');
   13c2a:	200a      	movs	r0, #10
   13c2c:	f7ff fcf8 	bl	13620 <console_out>
            cur = 0;
   13c30:	f8a8 4000 	strh.w	r4, [r8]
            end = 0;
   13c34:	803c      	strh	r4, [r7, #0]
            os_eventq_put(lines_queue, ev);
   13c36:	4b10      	ldr	r3, [pc, #64]	; (13c78 <console_handle_char+0x234>)
   13c38:	6819      	ldr	r1, [r3, #0]
   13c3a:	4b0e      	ldr	r3, [pc, #56]	; (13c74 <console_handle_char+0x230>)
   13c3c:	6818      	ldr	r0, [r3, #0]
   13c3e:	f7f5 fdf5 	bl	982c <os_eventq_put>
            console_hist_add(input->line);
   13c42:	6830      	ldr	r0, [r6, #0]
   13c44:	f7ff fc52 	bl	134ec <console_hist_add>
            if (console_compat_rx_cb) {
   13c48:	4b12      	ldr	r3, [pc, #72]	; (13c94 <console_handle_char+0x250>)
   13c4a:	681b      	ldr	r3, [r3, #0]
   13c4c:	b103      	cbz	r3, 13c50 <console_handle_char+0x20c>
                console_compat_rx_cb();
   13c4e:	4798      	blx	r3
            input = NULL;
   13c50:	2300      	movs	r3, #0
   13c52:	4a0a      	ldr	r2, [pc, #40]	; (13c7c <console_handle_char+0x238>)
   13c54:	6013      	str	r3, [r2, #0]
            ev = NULL;
   13c56:	4a08      	ldr	r2, [pc, #32]	; (13c78 <console_handle_char+0x234>)
   13c58:	6013      	str	r3, [r2, #0]
            break;
   13c5a:	e715      	b.n	13a88 <console_handle_char+0x44>
            nlip_state |= NLIP_PKT_START1;
   13c5c:	4a0c      	ldr	r2, [pc, #48]	; (13c90 <console_handle_char+0x24c>)
   13c5e:	6813      	ldr	r3, [r2, #0]
   13c60:	f043 0301 	orr.w	r3, r3, #1
   13c64:	6013      	str	r3, [r2, #0]
            break;
   13c66:	e70f      	b.n	13a88 <console_handle_char+0x44>
            nlip_state |= NLIP_DATA_START1;
   13c68:	4a09      	ldr	r2, [pc, #36]	; (13c90 <console_handle_char+0x24c>)
   13c6a:	6813      	ldr	r3, [r2, #0]
   13c6c:	f043 0304 	orr.w	r3, r3, #4
   13c70:	6013      	str	r3, [r2, #0]
            break;
   13c72:	e709      	b.n	13a88 <console_handle_char+0x44>
   13c74:	200049b4 	.word	0x200049b4
   13c78:	200049a8 	.word	0x200049a8
   13c7c:	200049b0 	.word	0x200049b0
   13c80:	200049a0 	.word	0x200049a0
   13c84:	200049a2 	.word	0x200049a2
   13c88:	20004150 	.word	0x20004150
   13c8c:	200049bd 	.word	0x200049bd
   13c90:	200049b8 	.word	0x200049b8
   13c94:	20004164 	.word	0x20004164
   13c98:	200049a4 	.word	0x200049a4
   13c9c:	200049ac 	.word	0x200049ac
   13ca0:	200049bc 	.word	0x200049bc
            if (g_console_ignore_non_nlip) {
   13ca4:	4b1c      	ldr	r3, [pc, #112]	; (13d18 <console_handle_char+0x2d4>)
   13ca6:	781b      	ldrb	r3, [r3, #0]
   13ca8:	2b00      	cmp	r3, #0
   13caa:	f47f aeed 	bne.w	13a88 <console_handle_char+0x44>
            if (cur > 0) {
   13cae:	4b1b      	ldr	r3, [pc, #108]	; (13d1c <console_handle_char+0x2d8>)
   13cb0:	881b      	ldrh	r3, [r3, #0]
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	f43f aee8 	beq.w	13a88 <console_handle_char+0x44>
                del_char(&input->line[--cur], end);
   13cb8:	4a19      	ldr	r2, [pc, #100]	; (13d20 <console_handle_char+0x2dc>)
   13cba:	6810      	ldr	r0, [r2, #0]
   13cbc:	3b01      	subs	r3, #1
   13cbe:	b29b      	uxth	r3, r3
   13cc0:	4a16      	ldr	r2, [pc, #88]	; (13d1c <console_handle_char+0x2d8>)
   13cc2:	8013      	strh	r3, [r2, #0]
   13cc4:	4a17      	ldr	r2, [pc, #92]	; (13d24 <console_handle_char+0x2e0>)
   13cc6:	8811      	ldrh	r1, [r2, #0]
   13cc8:	4418      	add	r0, r3
   13cca:	f7ff fd6f 	bl	137ac <del_char>
   13cce:	e6db      	b.n	13a88 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
   13cd0:	4b11      	ldr	r3, [pc, #68]	; (13d18 <console_handle_char+0x2d4>)
   13cd2:	781b      	ldrb	r3, [r3, #0]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	f47f aed7 	bne.w	13a88 <console_handle_char+0x44>
            esc_state |= ESC_ESC;
   13cda:	4a13      	ldr	r2, [pc, #76]	; (13d28 <console_handle_char+0x2e4>)
   13cdc:	6813      	ldr	r3, [r2, #0]
   13cde:	f043 0301 	orr.w	r3, r3, #1
   13ce2:	6013      	str	r3, [r2, #0]
            break;
   13ce4:	e6d0      	b.n	13a88 <console_handle_char+0x44>
                prev_endl = byte;
   13ce6:	4b11      	ldr	r3, [pc, #68]	; (13d2c <console_handle_char+0x2e8>)
   13ce8:	701c      	strb	r4, [r3, #0]
                break;
   13cea:	e6cd      	b.n	13a88 <console_handle_char+0x44>
            if (g_console_ignore_non_nlip) {
   13cec:	4b0a      	ldr	r3, [pc, #40]	; (13d18 <console_handle_char+0x2d4>)
   13cee:	781b      	ldrb	r3, [r3, #0]
   13cf0:	2b00      	cmp	r3, #0
   13cf2:	f47f aec9 	bne.w	13a88 <console_handle_char+0x44>
            if (completion && !end) {
   13cf6:	4b0e      	ldr	r3, [pc, #56]	; (13d30 <console_handle_char+0x2ec>)
   13cf8:	681b      	ldr	r3, [r3, #0]
   13cfa:	2b00      	cmp	r3, #0
   13cfc:	f43f aec4 	beq.w	13a88 <console_handle_char+0x44>
   13d00:	4a08      	ldr	r2, [pc, #32]	; (13d24 <console_handle_char+0x2e0>)
   13d02:	8812      	ldrh	r2, [r2, #0]
   13d04:	2a00      	cmp	r2, #0
   13d06:	f47f aebf 	bne.w	13a88 <console_handle_char+0x44>
                completion(input->line, console_append_char);
   13d0a:	490a      	ldr	r1, [pc, #40]	; (13d34 <console_handle_char+0x2f0>)
   13d0c:	4a04      	ldr	r2, [pc, #16]	; (13d20 <console_handle_char+0x2dc>)
   13d0e:	6810      	ldr	r0, [r2, #0]
   13d10:	4798      	blx	r3
        return 0;
   13d12:	e6b9      	b.n	13a88 <console_handle_char+0x44>
        return 0;
   13d14:	2500      	movs	r5, #0
   13d16:	e6b7      	b.n	13a88 <console_handle_char+0x44>
   13d18:	200049ac 	.word	0x200049ac
   13d1c:	200049a0 	.word	0x200049a0
   13d20:	200049b0 	.word	0x200049b0
   13d24:	200049a2 	.word	0x200049a2
   13d28:	200049a4 	.word	0x200049a4
   13d2c:	200049bc 	.word	0x200049bc
   13d30:	20004160 	.word	0x20004160
   13d34:	00013641 	.word	0x00013641

00013d38 <console_is_init>:

int
console_is_init(void)
{
   13d38:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   13d3a:	f000 f9b9 	bl	140b0 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
   13d3e:	bd08      	pop	{r3, pc}

00013d40 <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   13d40:	4b01      	ldr	r3, [pc, #4]	; (13d48 <console_line_queue_set+0x8>)
   13d42:	6018      	str	r0, [r3, #0]
}
   13d44:	4770      	bx	lr
   13d46:	bf00      	nop
   13d48:	200049b4 	.word	0x200049b4

00013d4c <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   13d4c:	b508      	push	{r3, lr}
   13d4e:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   13d50:	4806      	ldr	r0, [pc, #24]	; (13d6c <console_line_event_put+0x20>)
   13d52:	f7f5 fd6b 	bl	982c <os_eventq_put>

    if (rx_stalled) {
   13d56:	4b06      	ldr	r3, [pc, #24]	; (13d70 <console_line_event_put+0x24>)
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	b903      	cbnz	r3, 13d5e <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
   13d5c:	bd08      	pop	{r3, pc}
        rx_stalled = false;
   13d5e:	4b04      	ldr	r3, [pc, #16]	; (13d70 <console_line_event_put+0x24>)
   13d60:	2200      	movs	r2, #0
   13d62:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
   13d64:	f000 f99a 	bl	1409c <console_rx_restart>
}
   13d68:	e7f8      	b.n	13d5c <console_line_event_put+0x10>
   13d6a:	bf00      	nop
   13d6c:	20004150 	.word	0x20004150
   13d70:	200049bd 	.word	0x200049bd

00013d74 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   13d74:	4b01      	ldr	r3, [pc, #4]	; (13d7c <console_set_completion_cb+0x8>)
   13d76:	6018      	str	r0, [r3, #0]
}
   13d78:	4770      	bx	lr
   13d7a:	bf00      	nop
   13d7c:	20004160 	.word	0x20004160

00013d80 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   13d80:	b510      	push	{r4, lr}
   13d82:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13d84:	4b0e      	ldr	r3, [pc, #56]	; (13dc0 <console_pkg_init+0x40>)
   13d86:	781b      	ldrb	r3, [r3, #0]
   13d88:	b1a3      	cbz	r3, 13db4 <console_pkg_init+0x34>

    os_eventq_init(&avail_queue);
   13d8a:	480e      	ldr	r0, [pc, #56]	; (13dc4 <console_pkg_init+0x44>)
   13d8c:	f7f5 fd40 	bl	9810 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   13d90:	480d      	ldr	r0, [pc, #52]	; (13dc8 <console_pkg_init+0x48>)
   13d92:	f7f6 ff57 	bl	ac44 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_HISTORY_SIZE) > 0
    console_hist_init();
   13d96:	f7ff fbe9 	bl	1356c <console_hist_init>
#endif

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   13d9a:	f000 f991 	bl	140c0 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   13d9e:	b138      	cbz	r0, 13db0 <console_pkg_init+0x30>
   13da0:	2000      	movs	r0, #0
   13da2:	9000      	str	r0, [sp, #0]
   13da4:	4b09      	ldr	r3, [pc, #36]	; (13dcc <console_pkg_init+0x4c>)
   13da6:	681c      	ldr	r4, [r3, #0]
   13da8:	4603      	mov	r3, r0
   13daa:	4602      	mov	r2, r0
   13dac:	4601      	mov	r1, r0
   13dae:	47a0      	blx	r4
}
   13db0:	b002      	add	sp, #8
   13db2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   13db4:	461a      	mov	r2, r3
   13db6:	4619      	mov	r1, r3
   13db8:	4618      	mov	r0, r3
   13dba:	f7f5 fa03 	bl	91c4 <__assert_func>
   13dbe:	bf00      	nop
   13dc0:	2000538c 	.word	0x2000538c
   13dc4:	20004150 	.word	0x20004150
   13dc8:	20004994 	.word	0x20004994
   13dcc:	20000308 	.word	0x20000308

00013dd0 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   13dd0:	b570      	push	{r4, r5, r6, lr}
   13dd2:	4604      	mov	r4, r0
   13dd4:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   13dd6:	f000 f833 	bl	13e40 <console_get_ticks>
   13dda:	b160      	cbz	r0, 13df6 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   13ddc:	4b09      	ldr	r3, [pc, #36]	; (13e04 <console_vprintf+0x34>)
   13dde:	681b      	ldr	r3, [r3, #0]
   13de0:	b10b      	cbz	r3, 13de6 <console_vprintf+0x16>
    num_chars = 0;
   13de2:	2600      	movs	r6, #0
   13de4:	e008      	b.n	13df8 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   13de6:	f7f6 fb13 	bl	a410 <os_time_get>
   13dea:	4601      	mov	r1, r0
   13dec:	4806      	ldr	r0, [pc, #24]	; (13e08 <console_vprintf+0x38>)
   13dee:	f7fd f85d 	bl	10eac <printf>
   13df2:	4606      	mov	r6, r0
   13df4:	e000      	b.n	13df8 <console_vprintf+0x28>
    num_chars = 0;
   13df6:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   13df8:	4629      	mov	r1, r5
   13dfa:	4620      	mov	r0, r4
   13dfc:	f00e f908 	bl	22010 <vprintf>

    return num_chars;
}
   13e00:	4430      	add	r0, r6
   13e02:	bd70      	pop	{r4, r5, r6, pc}
   13e04:	20004990 	.word	0x20004990
   13e08:	0002718c 	.word	0x0002718c

00013e0c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   13e0c:	b40f      	push	{r0, r1, r2, r3}
   13e0e:	b500      	push	{lr}
   13e10:	b083      	sub	sp, #12
   13e12:	a904      	add	r1, sp, #16
   13e14:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   13e18:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   13e1a:	f7ff ffd9 	bl	13dd0 <console_vprintf>
    va_end(args);

    return num_chars;
}
   13e1e:	b003      	add	sp, #12
   13e20:	f85d eb04 	ldr.w	lr, [sp], #4
   13e24:	b004      	add	sp, #16
   13e26:	4770      	bx	lr

00013e28 <console_no_ticks>:

/* Turn OS Ticks off */
void
console_no_ticks(void)
{
    do_ticks = 0;
   13e28:	4b01      	ldr	r3, [pc, #4]	; (13e30 <console_no_ticks+0x8>)
   13e2a:	2200      	movs	r2, #0
   13e2c:	701a      	strb	r2, [r3, #0]
}
   13e2e:	4770      	bx	lr
   13e30:	200002c4 	.word	0x200002c4

00013e34 <console_yes_ticks>:

/* Turn OS Ticks on */
void
console_yes_ticks(void)
{
    do_ticks = 1;
   13e34:	4b01      	ldr	r3, [pc, #4]	; (13e3c <console_yes_ticks+0x8>)
   13e36:	2201      	movs	r2, #1
   13e38:	701a      	strb	r2, [r3, #0]
}
   13e3a:	4770      	bx	lr
   13e3c:	200002c4 	.word	0x200002c4

00013e40 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   13e40:	4b01      	ldr	r3, [pc, #4]	; (13e48 <console_get_ticks+0x8>)
   13e42:	7818      	ldrb	r0, [r3, #0]
   13e44:	4770      	bx	lr
   13e46:	bf00      	nop
   13e48:	200002c4 	.word	0x200002c4

00013e4c <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   13e4c:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   13e4e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   13e50:	4798      	blx	r3
}
   13e52:	bd08      	pop	{r3, pc}

00013e54 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   13e54:	6842      	ldr	r2, [r0, #4]
   13e56:	7803      	ldrb	r3, [r0, #0]
   13e58:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   13e5a:	7803      	ldrb	r3, [r0, #0]
   13e5c:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   13e5e:	3301      	adds	r3, #1
   13e60:	3a01      	subs	r2, #1
   13e62:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   13e64:	7003      	strb	r3, [r0, #0]
}
   13e66:	4770      	bx	lr

00013e68 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   13e68:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   13e6a:	6841      	ldr	r1, [r0, #4]
   13e6c:	7842      	ldrb	r2, [r0, #1]
   13e6e:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   13e70:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   13e72:	3201      	adds	r2, #1
   13e74:	3901      	subs	r1, #1
   13e76:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   13e78:	705a      	strb	r2, [r3, #1]
    return ch;
}
   13e7a:	4770      	bx	lr

00013e7c <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   13e7c:	7803      	ldrb	r3, [r0, #0]
   13e7e:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   13e80:	3301      	adds	r3, #1
   13e82:	3a01      	subs	r2, #1
   13e84:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   13e86:	7840      	ldrb	r0, [r0, #1]
}
   13e88:	4298      	cmp	r0, r3
   13e8a:	bf14      	ite	ne
   13e8c:	2000      	movne	r0, #0
   13e8e:	2001      	moveq	r0, #1
   13e90:	4770      	bx	lr

00013e92 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   13e92:	7802      	ldrb	r2, [r0, #0]
   13e94:	7840      	ldrb	r0, [r0, #1]
}
   13e96:	4282      	cmp	r2, r0
   13e98:	bf14      	ite	ne
   13e9a:	2000      	movne	r0, #0
   13e9c:	2001      	moveq	r0, #1
   13e9e:	4770      	bx	lr

00013ea0 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   13ea0:	b538      	push	{r3, r4, r5, lr}
   13ea2:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   13ea4:	2400      	movs	r4, #0
   13ea6:	e008      	b.n	13eba <uart_console_tx_flush+0x1a>
        if (uart_console_ring_is_empty(&cr_tx)) {
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   13ea8:	4808      	ldr	r0, [pc, #32]	; (13ecc <uart_console_tx_flush+0x2c>)
   13eaa:	f7ff ffdd 	bl	13e68 <uart_console_ring_pull_char>
   13eae:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   13eb0:	4b07      	ldr	r3, [pc, #28]	; (13ed0 <uart_console_tx_flush+0x30>)
   13eb2:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   13eb4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13eb6:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   13eb8:	3401      	adds	r4, #1
   13eba:	42ac      	cmp	r4, r5
   13ebc:	da04      	bge.n	13ec8 <uart_console_tx_flush+0x28>
        if (uart_console_ring_is_empty(&cr_tx)) {
   13ebe:	4803      	ldr	r0, [pc, #12]	; (13ecc <uart_console_tx_flush+0x2c>)
   13ec0:	f7ff ffe7 	bl	13e92 <uart_console_ring_is_empty>
   13ec4:	2800      	cmp	r0, #0
   13ec6:	d0ef      	beq.n	13ea8 <uart_console_tx_flush+0x8>
    }
}
   13ec8:	bd38      	pop	{r3, r4, r5, pc}
   13eca:	bf00      	nop
   13ecc:	200049e8 	.word	0x200049e8
   13ed0:	20004e04 	.word	0x20004e04

00013ed4 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   13ed4:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   13ed6:	4805      	ldr	r0, [pc, #20]	; (13eec <uart_console_tx_char+0x18>)
   13ed8:	f7ff ffdb 	bl	13e92 <uart_console_ring_is_empty>
   13edc:	b918      	cbnz	r0, 13ee6 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   13ede:	4803      	ldr	r0, [pc, #12]	; (13eec <uart_console_tx_char+0x18>)
   13ee0:	f7ff ffc2 	bl	13e68 <uart_console_ring_pull_char>
}
   13ee4:	bd08      	pop	{r3, pc}
        return -1;
   13ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13eea:	e7fb      	b.n	13ee4 <uart_console_tx_char+0x10>
   13eec:	200049e8 	.word	0x200049e8

00013ef0 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   13ef0:	7ec3      	ldrb	r3, [r0, #27]
   13ef2:	f003 0306 	and.w	r3, r3, #6
   13ef6:	2b02      	cmp	r3, #2
   13ef8:	d000      	beq.n	13efc <uart_console_queue_char+0xc>
   13efa:	4770      	bx	lr
{
   13efc:	b570      	push	{r4, r5, r6, lr}
   13efe:	4605      	mov	r5, r0
   13f00:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   13f02:	f7f6 fbab 	bl	a65c <os_arch_save_sr>
   13f06:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   13f08:	e002      	b.n	13f10 <uart_console_queue_char+0x20>
        OS_ENTER_CRITICAL(sr);
   13f0a:	f7f6 fba7 	bl	a65c <os_arch_save_sr>
   13f0e:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   13f10:	480c      	ldr	r0, [pc, #48]	; (13f44 <uart_console_queue_char+0x54>)
   13f12:	f7ff ffb3 	bl	13e7c <uart_console_ring_is_full>
   13f16:	b168      	cbz	r0, 13f34 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   13f18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13f1a:	4628      	mov	r0, r5
   13f1c:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   13f1e:	4620      	mov	r0, r4
   13f20:	f7f6 fba2 	bl	a668 <os_arch_restore_sr>
        if (os_started()) {
   13f24:	f7f5 fa08 	bl	9338 <os_started>
   13f28:	2800      	cmp	r0, #0
   13f2a:	d0ee      	beq.n	13f0a <uart_console_queue_char+0x1a>
            os_time_delay(1);
   13f2c:	2001      	movs	r0, #1
   13f2e:	f7f6 fa97 	bl	a460 <os_time_delay>
   13f32:	e7ea      	b.n	13f0a <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   13f34:	4631      	mov	r1, r6
   13f36:	4803      	ldr	r0, [pc, #12]	; (13f44 <uart_console_queue_char+0x54>)
   13f38:	f7ff ff8c 	bl	13e54 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   13f3c:	4620      	mov	r0, r4
   13f3e:	f7f6 fb93 	bl	a668 <os_arch_restore_sr>
}
   13f42:	bd70      	pop	{r4, r5, r6, pc}
   13f44:	200049e8 	.word	0x200049e8

00013f48 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   13f48:	b510      	push	{r4, lr}
   13f4a:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   13f4c:	480c      	ldr	r0, [pc, #48]	; (13f80 <uart_console_rx_char+0x38>)
   13f4e:	f7ff ff95 	bl	13e7c <uart_console_ring_is_full>
   13f52:	b940      	cbnz	r0, 13f66 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   13f54:	4621      	mov	r1, r4
   13f56:	480a      	ldr	r0, [pc, #40]	; (13f80 <uart_console_rx_char+0x38>)
   13f58:	f7ff ff7c 	bl	13e54 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   13f5c:	4b09      	ldr	r3, [pc, #36]	; (13f84 <uart_console_rx_char+0x3c>)
   13f5e:	781b      	ldrb	r3, [r3, #0]
   13f60:	b13b      	cbz	r3, 13f72 <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   13f62:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   13f64:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   13f66:	4b08      	ldr	r3, [pc, #32]	; (13f88 <uart_console_rx_char+0x40>)
   13f68:	2201      	movs	r2, #1
   13f6a:	701a      	strb	r2, [r3, #0]
        return -1;
   13f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f70:	e7f8      	b.n	13f64 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   13f72:	f7f5 fd09 	bl	9988 <os_eventq_dflt_get>
   13f76:	4903      	ldr	r1, [pc, #12]	; (13f84 <uart_console_rx_char+0x3c>)
   13f78:	f7f5 fc58 	bl	982c <os_eventq_put>
    return 0;
   13f7c:	2000      	movs	r0, #0
   13f7e:	e7f1      	b.n	13f64 <uart_console_rx_char+0x1c>
   13f80:	200049c0 	.word	0x200049c0
   13f84:	20004df0 	.word	0x20004df0
   13f88:	20004e00 	.word	0x20004e00

00013f8c <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   13f8c:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   13f8e:	4b18      	ldr	r3, [pc, #96]	; (13ff0 <uart_console_rx_char_event+0x64>)
   13f90:	6818      	ldr	r0, [r3, #0]
   13f92:	2800      	cmp	r0, #0
   13f94:	db0b      	blt.n	13fae <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   13f96:	b2c0      	uxtb	r0, r0
   13f98:	f7ff fd54 	bl	13a44 <console_handle_char>
        if (ret < 0) {
   13f9c:	2800      	cmp	r0, #0
   13f9e:	da06      	bge.n	13fae <uart_console_rx_char_event+0x22>
   13fa0:	e024      	b.n	13fec <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   13fa2:	4b13      	ldr	r3, [pc, #76]	; (13ff0 <uart_console_rx_char_event+0x64>)
   13fa4:	7818      	ldrb	r0, [r3, #0]
   13fa6:	f7ff fd4d 	bl	13a44 <console_handle_char>
        if (ret < 0) {
   13faa:	2800      	cmp	r0, #0
   13fac:	db1e      	blt.n	13fec <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   13fae:	4811      	ldr	r0, [pc, #68]	; (13ff4 <uart_console_rx_char_event+0x68>)
   13fb0:	f7ff ff6f 	bl	13e92 <uart_console_ring_is_empty>
   13fb4:	b9b0      	cbnz	r0, 13fe4 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   13fb6:	f7f6 fb51 	bl	a65c <os_arch_save_sr>
   13fba:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   13fbc:	480d      	ldr	r0, [pc, #52]	; (13ff4 <uart_console_rx_char_event+0x68>)
   13fbe:	f7ff ff53 	bl	13e68 <uart_console_ring_pull_char>
   13fc2:	4b0b      	ldr	r3, [pc, #44]	; (13ff0 <uart_console_rx_char_event+0x64>)
   13fc4:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   13fc6:	4620      	mov	r0, r4
   13fc8:	f7f6 fb4e 	bl	a668 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   13fcc:	4b0a      	ldr	r3, [pc, #40]	; (13ff8 <uart_console_rx_char_event+0x6c>)
   13fce:	781b      	ldrb	r3, [r3, #0]
   13fd0:	2b00      	cmp	r3, #0
   13fd2:	d0e6      	beq.n	13fa2 <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   13fd4:	4b08      	ldr	r3, [pc, #32]	; (13ff8 <uart_console_rx_char_event+0x6c>)
   13fd6:	2200      	movs	r2, #0
   13fd8:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   13fda:	4b08      	ldr	r3, [pc, #32]	; (13ffc <uart_console_rx_char_event+0x70>)
   13fdc:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   13fde:	6a83      	ldr	r3, [r0, #40]	; 0x28
   13fe0:	4798      	blx	r3
}
   13fe2:	e7de      	b.n	13fa2 <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   13fe4:	4b02      	ldr	r3, [pc, #8]	; (13ff0 <uart_console_rx_char_event+0x64>)
   13fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13fea:	601a      	str	r2, [r3, #0]
}
   13fec:	bd10      	pop	{r4, pc}
   13fee:	bf00      	nop
   13ff0:	200002c8 	.word	0x200002c8
   13ff4:	200049c0 	.word	0x200049c0
   13ff8:	20004e00 	.word	0x20004e00
   13ffc:	20004e04 	.word	0x20004e04

00014000 <uart_console_blocking_mode>:
{
   14000:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   14002:	f7f6 fb2b 	bl	a65c <os_arch_save_sr>
   14006:	4604      	mov	r4, r0
    if (write_char_cb) {
   14008:	4b06      	ldr	r3, [pc, #24]	; (14024 <uart_console_blocking_mode+0x24>)
   1400a:	681b      	ldr	r3, [r3, #0]
   1400c:	b133      	cbz	r3, 1401c <uart_console_blocking_mode+0x1c>
        write_char_cb = uart_blocking_tx;
   1400e:	4b05      	ldr	r3, [pc, #20]	; (14024 <uart_console_blocking_mode+0x24>)
   14010:	4a05      	ldr	r2, [pc, #20]	; (14028 <uart_console_blocking_mode+0x28>)
   14012:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   14014:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14018:	f7ff ff42 	bl	13ea0 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   1401c:	4620      	mov	r0, r4
   1401e:	f7f6 fb23 	bl	a668 <os_arch_restore_sr>
}
   14022:	bd10      	pop	{r4, pc}
   14024:	20004e08 	.word	0x20004e08
   14028:	00013e4d 	.word	0x00013e4d

0001402c <uart_console_non_blocking_mode>:
{
   1402c:	b508      	push	{r3, lr}
    OS_ENTER_CRITICAL(sr);
   1402e:	f7f6 fb15 	bl	a65c <os_arch_save_sr>
    if (write_char_cb) {
   14032:	4b04      	ldr	r3, [pc, #16]	; (14044 <uart_console_non_blocking_mode+0x18>)
   14034:	681b      	ldr	r3, [r3, #0]
   14036:	b113      	cbz	r3, 1403e <uart_console_non_blocking_mode+0x12>
        write_char_cb = uart_console_queue_char;
   14038:	4b02      	ldr	r3, [pc, #8]	; (14044 <uart_console_non_blocking_mode+0x18>)
   1403a:	4a03      	ldr	r2, [pc, #12]	; (14048 <uart_console_non_blocking_mode+0x1c>)
   1403c:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1403e:	f7f6 fb13 	bl	a668 <os_arch_restore_sr>
}
   14042:	bd08      	pop	{r3, pc}
   14044:	20004e08 	.word	0x20004e08
   14048:	00013ef1 	.word	0x00013ef1

0001404c <console_out_nolock>:
{
   1404c:	b538      	push	{r3, r4, r5, lr}
   1404e:	4604      	mov	r4, r0
    if (g_console_silence) {
   14050:	4b0e      	ldr	r3, [pc, #56]	; (1408c <console_out_nolock+0x40>)
   14052:	781b      	ldrb	r3, [r3, #0]
   14054:	b983      	cbnz	r3, 14078 <console_out_nolock+0x2c>
    if (!write_char_cb) {
   14056:	4b0e      	ldr	r3, [pc, #56]	; (14090 <console_out_nolock+0x44>)
   14058:	681b      	ldr	r3, [r3, #0]
   1405a:	b16b      	cbz	r3, 14078 <console_out_nolock+0x2c>
    if ('\n' == c) {
   1405c:	280a      	cmp	r0, #10
   1405e:	d00d      	beq.n	1407c <console_out_nolock+0x30>
        console_is_midline = 1;
   14060:	4b0c      	ldr	r3, [pc, #48]	; (14094 <console_out_nolock+0x48>)
   14062:	2201      	movs	r2, #1
   14064:	601a      	str	r2, [r3, #0]
    write_char_cb(uart_dev, c);
   14066:	4d0c      	ldr	r5, [pc, #48]	; (14098 <console_out_nolock+0x4c>)
   14068:	4b09      	ldr	r3, [pc, #36]	; (14090 <console_out_nolock+0x44>)
   1406a:	681b      	ldr	r3, [r3, #0]
   1406c:	b2e1      	uxtb	r1, r4
   1406e:	6828      	ldr	r0, [r5, #0]
   14070:	4798      	blx	r3
    uart_start_tx(uart_dev);
   14072:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   14074:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14076:	4798      	blx	r3
}
   14078:	4620      	mov	r0, r4
   1407a:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   1407c:	210d      	movs	r1, #13
   1407e:	4a06      	ldr	r2, [pc, #24]	; (14098 <console_out_nolock+0x4c>)
   14080:	6810      	ldr	r0, [r2, #0]
   14082:	4798      	blx	r3
        console_is_midline = 0;
   14084:	4b03      	ldr	r3, [pc, #12]	; (14094 <console_out_nolock+0x48>)
   14086:	2200      	movs	r2, #0
   14088:	601a      	str	r2, [r3, #0]
   1408a:	e7ec      	b.n	14066 <console_out_nolock+0x1a>
   1408c:	200049ad 	.word	0x200049ad
   14090:	20004e08 	.word	0x20004e08
   14094:	20004990 	.word	0x20004990
   14098:	20004e04 	.word	0x20004e04

0001409c <console_rx_restart>:
{
   1409c:	b508      	push	{r3, lr}
    os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   1409e:	f7f5 fc73 	bl	9988 <os_eventq_dflt_get>
   140a2:	4902      	ldr	r1, [pc, #8]	; (140ac <console_rx_restart+0x10>)
   140a4:	f7f5 fbc2 	bl	982c <os_eventq_put>
}
   140a8:	bd08      	pop	{r3, pc}
   140aa:	bf00      	nop
   140ac:	20004df0 	.word	0x20004df0

000140b0 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   140b0:	4b02      	ldr	r3, [pc, #8]	; (140bc <uart_console_is_init+0xc>)
   140b2:	6818      	ldr	r0, [r3, #0]
}
   140b4:	3800      	subs	r0, #0
   140b6:	bf18      	it	ne
   140b8:	2001      	movne	r0, #1
   140ba:	4770      	bx	lr
   140bc:	20004e04 	.word	0x20004e04

000140c0 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   140c0:	b500      	push	{lr}
   140c2:	b087      	sub	sp, #28
    struct uart_conf uc = {
   140c4:	2300      	movs	r3, #0
   140c6:	9300      	str	r3, [sp, #0]
   140c8:	9301      	str	r3, [sp, #4]
   140ca:	9302      	str	r3, [sp, #8]
   140cc:	9303      	str	r3, [sp, #12]
   140ce:	9304      	str	r3, [sp, #16]
   140d0:	9305      	str	r3, [sp, #20]
   140d2:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
   140d6:	9300      	str	r3, [sp, #0]
   140d8:	2308      	movs	r3, #8
   140da:	f88d 3004 	strb.w	r3, [sp, #4]
   140de:	2301      	movs	r3, #1
   140e0:	f88d 3005 	strb.w	r3, [sp, #5]
   140e4:	4b14      	ldr	r3, [pc, #80]	; (14138 <uart_console_init+0x78>)
   140e6:	9302      	str	r3, [sp, #8]
   140e8:	4b14      	ldr	r3, [pc, #80]	; (1413c <uart_console_init+0x7c>)
   140ea:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   140ec:	4b14      	ldr	r3, [pc, #80]	; (14140 <uart_console_init+0x80>)
   140ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   140f2:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   140f4:	4a13      	ldr	r2, [pc, #76]	; (14144 <uart_console_init+0x84>)
   140f6:	605a      	str	r2, [r3, #4]
    write_char_cb = uart_console_queue_char;
   140f8:	4b13      	ldr	r3, [pc, #76]	; (14148 <uart_console_init+0x88>)
   140fa:	4a14      	ldr	r2, [pc, #80]	; (1414c <uart_console_init+0x8c>)
   140fc:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   140fe:	4b14      	ldr	r3, [pc, #80]	; (14150 <uart_console_init+0x90>)
   14100:	2220      	movs	r2, #32
   14102:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   14104:	4a13      	ldr	r2, [pc, #76]	; (14154 <uart_console_init+0x94>)
   14106:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   14108:	4b13      	ldr	r3, [pc, #76]	; (14158 <uart_console_init+0x98>)
   1410a:	4a14      	ldr	r2, [pc, #80]	; (1415c <uart_console_init+0x9c>)
   1410c:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   1410e:	4b14      	ldr	r3, [pc, #80]	; (14160 <uart_console_init+0xa0>)
   14110:	681b      	ldr	r3, [r3, #0]
   14112:	b11b      	cbz	r3, 1411c <uart_console_init+0x5c>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   14114:	2000      	movs	r0, #0
}
   14116:	b007      	add	sp, #28
   14118:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   1411c:	466a      	mov	r2, sp
   1411e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14122:	4810      	ldr	r0, [pc, #64]	; (14164 <uart_console_init+0xa4>)
   14124:	f7f5 fb3a 	bl	979c <os_dev_open>
   14128:	4b0d      	ldr	r3, [pc, #52]	; (14160 <uart_console_init+0xa0>)
   1412a:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   1412c:	b108      	cbz	r0, 14132 <uart_console_init+0x72>
    return 0;
   1412e:	2000      	movs	r0, #0
   14130:	e7f1      	b.n	14116 <uart_console_init+0x56>
            return -1;
   14132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14136:	e7ee      	b.n	14116 <uart_console_init+0x56>
   14138:	00013ed5 	.word	0x00013ed5
   1413c:	00013f49 	.word	0x00013f49
   14140:	200049e8 	.word	0x200049e8
   14144:	200049f0 	.word	0x200049f0
   14148:	20004e08 	.word	0x20004e08
   1414c:	00013ef1 	.word	0x00013ef1
   14150:	200049c0 	.word	0x200049c0
   14154:	200049c8 	.word	0x200049c8
   14158:	20004df0 	.word	0x20004df0
   1415c:	00013f8d 	.word	0x00013f8d
   14160:	20004e04 	.word	0x20004e04
   14164:	00027194 	.word	0x00027194

00014168 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   14168:	b570      	push	{r4, r5, r6, lr}
   1416a:	b086      	sub	sp, #24
   1416c:	4605      	mov	r5, r0
   1416e:	460e      	mov	r6, r1
   14170:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   14172:	2300      	movs	r3, #0
   14174:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   14176:	f000 fc5f 	bl	14a38 <mfg_init>

    mfg_open(&reader);
   1417a:	a801      	add	r0, sp, #4
   1417c:	f000 fc82 	bl	14a84 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   14180:	6823      	ldr	r3, [r4, #0]
   14182:	42ab      	cmp	r3, r5
   14184:	da22      	bge.n	141cc <flash_map_read_mfg+0x64>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   14186:	2102      	movs	r1, #2
   14188:	a801      	add	r0, sp, #4
   1418a:	f000 fc3d 	bl	14a08 <mfg_seek_next_with_type>
        switch (rc) {
   1418e:	f110 0f0f 	cmn.w	r0, #15
   14192:	d01e      	beq.n	141d2 <flash_map_read_mfg+0x6a>
   14194:	b9f0      	cbnz	r0, 141d4 <flash_map_read_mfg+0x6c>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   14196:	a903      	add	r1, sp, #12
   14198:	a801      	add	r0, sp, #4
   1419a:	f000 fc42 	bl	14a22 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1419e:	b9c8      	cbnz	r0, 141d4 <flash_map_read_mfg+0x6c>
            return rc;
        }

        fap = out_areas + *out_num_areas;
   141a0:	6823      	ldr	r3, [r4, #0]
   141a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   141a6:	eb06 0283 	add.w	r2, r6, r3, lsl #2
        fap->fa_id = meta_flash_area.area_id;
   141aa:	f89d 100c 	ldrb.w	r1, [sp, #12]
   141ae:	f806 1023 	strb.w	r1, [r6, r3, lsl #2]
        fap->fa_device_id = meta_flash_area.device_id;
   141b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   141b6:	7053      	strb	r3, [r2, #1]
        fap->fa_off = meta_flash_area.offset;
   141b8:	f8dd 300e 	ldr.w	r3, [sp, #14]
   141bc:	6053      	str	r3, [r2, #4]
        fap->fa_size = meta_flash_area.size;
   141be:	f8dd 3012 	ldr.w	r3, [sp, #18]
   141c2:	6093      	str	r3, [r2, #8]

        (*out_num_areas)++;
   141c4:	6823      	ldr	r3, [r4, #0]
   141c6:	3301      	adds	r3, #1
   141c8:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   141ca:	e7d9      	b.n	14180 <flash_map_read_mfg+0x18>
            return -1;
   141cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   141d0:	e000      	b.n	141d4 <flash_map_read_mfg+0x6c>
        switch (rc) {
   141d2:	2000      	movs	r0, #0
    }
}
   141d4:	b006      	add	sp, #24
   141d6:	bd70      	pop	{r4, r5, r6, pc}

000141d8 <flash_area_open>:
{
   141d8:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   141da:	4b0e      	ldr	r3, [pc, #56]	; (14214 <flash_area_open+0x3c>)
   141dc:	681c      	ldr	r4, [r3, #0]
   141de:	b1ac      	cbz	r4, 1420c <flash_area_open+0x34>
    for (i = 0; i < flash_map_entries; i++) {
   141e0:	2300      	movs	r3, #0
   141e2:	4a0d      	ldr	r2, [pc, #52]	; (14218 <flash_area_open+0x40>)
   141e4:	6812      	ldr	r2, [r2, #0]
   141e6:	429a      	cmp	r2, r3
   141e8:	dd0c      	ble.n	14204 <flash_area_open+0x2c>
        area = flash_map + i;
   141ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   141ee:	eb04 0582 	add.w	r5, r4, r2, lsl #2
        if (area->fa_id == id) {
   141f2:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   141f6:	4282      	cmp	r2, r0
   141f8:	d001      	beq.n	141fe <flash_area_open+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   141fa:	3301      	adds	r3, #1
   141fc:	e7f1      	b.n	141e2 <flash_area_open+0xa>
            *fap = area;
   141fe:	600d      	str	r5, [r1, #0]
            return 0;
   14200:	2000      	movs	r0, #0
   14202:	e001      	b.n	14208 <flash_area_open+0x30>
    return SYS_ENOENT;
   14204:	f06f 0003 	mvn.w	r0, #3
}
   14208:	bc30      	pop	{r4, r5}
   1420a:	4770      	bx	lr
        return SYS_EACCES;
   1420c:	f06f 0006 	mvn.w	r0, #6
   14210:	e7fa      	b.n	14208 <flash_area_open+0x30>
   14212:	bf00      	nop
   14214:	20004e0c 	.word	0x20004e0c
   14218:	20004e10 	.word	0x20004e10

0001421c <flash_area_to_sectors>:
{
   1421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14220:	b084      	sub	sp, #16
   14222:	460f      	mov	r7, r1
   14224:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   14226:	fa5f f880 	uxtb.w	r8, r0
   1422a:	a903      	add	r1, sp, #12
   1422c:	4640      	mov	r0, r8
   1422e:	f7ff ffd3 	bl	141d8 <flash_area_open>
    if (rc != 0) {
   14232:	4681      	mov	r9, r0
   14234:	b118      	cbz	r0, 1423e <flash_area_to_sectors+0x22>
}
   14236:	4648      	mov	r0, r9
   14238:	b004      	add	sp, #16
   1423a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   1423e:	2300      	movs	r3, #0
   14240:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   14242:	9b03      	ldr	r3, [sp, #12]
   14244:	7858      	ldrb	r0, [r3, #1]
   14246:	f005 f92f 	bl	194a8 <hal_bsp_flash_dev>
   1424a:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   1424c:	464c      	mov	r4, r9
   1424e:	e003      	b.n	14258 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   14250:	683b      	ldr	r3, [r7, #0]
   14252:	3301      	adds	r3, #1
   14254:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   14256:	3401      	adds	r4, #1
   14258:	68eb      	ldr	r3, [r5, #12]
   1425a:	42a3      	cmp	r3, r4
   1425c:	ddeb      	ble.n	14236 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1425e:	682b      	ldr	r3, [r5, #0]
   14260:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   14264:	ab01      	add	r3, sp, #4
   14266:	aa02      	add	r2, sp, #8
   14268:	4621      	mov	r1, r4
   1426a:	4628      	mov	r0, r5
   1426c:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   1426e:	9903      	ldr	r1, [sp, #12]
   14270:	684b      	ldr	r3, [r1, #4]
   14272:	9a02      	ldr	r2, [sp, #8]
   14274:	4293      	cmp	r3, r2
   14276:	d8ee      	bhi.n	14256 <flash_area_to_sectors+0x3a>
   14278:	6889      	ldr	r1, [r1, #8]
   1427a:	440b      	add	r3, r1
   1427c:	429a      	cmp	r2, r3
   1427e:	d2ea      	bcs.n	14256 <flash_area_to_sectors+0x3a>
            if (ret) {
   14280:	2e00      	cmp	r6, #0
   14282:	d0e5      	beq.n	14250 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   14284:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   14288:	9b03      	ldr	r3, [sp, #12]
   1428a:	785b      	ldrb	r3, [r3, #1]
   1428c:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   1428e:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   14290:	9b01      	ldr	r3, [sp, #4]
   14292:	60b3      	str	r3, [r6, #8]
                ret++;
   14294:	360c      	adds	r6, #12
   14296:	e7db      	b.n	14250 <flash_area_to_sectors+0x34>

00014298 <flash_area_read>:
{
   14298:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1429a:	6884      	ldr	r4, [r0, #8]
   1429c:	428c      	cmp	r4, r1
   1429e:	d309      	bcc.n	142b4 <flash_area_read+0x1c>
   142a0:	eb01 0c03 	add.w	ip, r1, r3
   142a4:	4564      	cmp	r4, ip
   142a6:	d308      	bcc.n	142ba <flash_area_read+0x22>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   142a8:	6844      	ldr	r4, [r0, #4]
   142aa:	4421      	add	r1, r4
   142ac:	7840      	ldrb	r0, [r0, #1]
   142ae:	f009 ff4f 	bl	1e150 <hal_flash_read>
}
   142b2:	bd10      	pop	{r4, pc}
        return -1;
   142b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142b8:	e7fb      	b.n	142b2 <flash_area_read+0x1a>
   142ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142be:	e7f8      	b.n	142b2 <flash_area_read+0x1a>

000142c0 <flash_area_write>:
{
   142c0:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   142c2:	6884      	ldr	r4, [r0, #8]
   142c4:	428c      	cmp	r4, r1
   142c6:	d309      	bcc.n	142dc <flash_area_write+0x1c>
   142c8:	eb01 0c03 	add.w	ip, r1, r3
   142cc:	4564      	cmp	r4, ip
   142ce:	d308      	bcc.n	142e2 <flash_area_write+0x22>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   142d0:	6844      	ldr	r4, [r0, #4]
   142d2:	4421      	add	r1, r4
   142d4:	7840      	ldrb	r0, [r0, #1]
   142d6:	f009 ff65 	bl	1e1a4 <hal_flash_write>
}
   142da:	bd10      	pop	{r4, pc}
        return -1;
   142dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142e0:	e7fb      	b.n	142da <flash_area_write+0x1a>
   142e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142e6:	e7f8      	b.n	142da <flash_area_write+0x1a>

000142e8 <flash_area_erase>:
{
   142e8:	b508      	push	{r3, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   142ea:	6883      	ldr	r3, [r0, #8]
   142ec:	428b      	cmp	r3, r1
   142ee:	d309      	bcc.n	14304 <flash_area_erase+0x1c>
   142f0:	eb01 0c02 	add.w	ip, r1, r2
   142f4:	4563      	cmp	r3, ip
   142f6:	d308      	bcc.n	1430a <flash_area_erase+0x22>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   142f8:	6843      	ldr	r3, [r0, #4]
   142fa:	4419      	add	r1, r3
   142fc:	7840      	ldrb	r0, [r0, #1]
   142fe:	f009 ff89 	bl	1e214 <hal_flash_erase>
}
   14302:	bd08      	pop	{r3, pc}
        return -1;
   14304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14308:	e7fb      	b.n	14302 <flash_area_erase+0x1a>
   1430a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1430e:	e7f8      	b.n	14302 <flash_area_erase+0x1a>

00014310 <flash_area_align>:
{
   14310:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   14312:	7840      	ldrb	r0, [r0, #1]
   14314:	f009 ff0c 	bl	1e130 <hal_flash_align>
}
   14318:	bd08      	pop	{r3, pc}

0001431a <flash_area_erased_val>:
{
   1431a:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   1431c:	7840      	ldrb	r0, [r0, #1]
   1431e:	f009 ff0f 	bl	1e140 <hal_flash_erased_val>
}
   14322:	bd08      	pop	{r3, pc}

00014324 <flash_area_is_empty>:
{
   14324:	b510      	push	{r4, lr}
   14326:	460c      	mov	r4, r1
    *empty = false;
   14328:	2300      	movs	r3, #0
   1432a:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   1432c:	6882      	ldr	r2, [r0, #8]
   1432e:	6841      	ldr	r1, [r0, #4]
   14330:	7840      	ldrb	r0, [r0, #1]
   14332:	f00a f81f 	bl	1e374 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   14336:	2800      	cmp	r0, #0
   14338:	db02      	blt.n	14340 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   1433a:	2801      	cmp	r0, #1
   1433c:	d001      	beq.n	14342 <flash_area_is_empty+0x1e>
    return 0;
   1433e:	2000      	movs	r0, #0
}
   14340:	bd10      	pop	{r4, pc}
        *empty = true;
   14342:	2301      	movs	r3, #1
   14344:	7023      	strb	r3, [r4, #0]
    return 0;
   14346:	2000      	movs	r0, #0
   14348:	e7fa      	b.n	14340 <flash_area_is_empty+0x1c>

0001434a <flash_area_read_is_empty>:
{
   1434a:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   1434c:	6844      	ldr	r4, [r0, #4]
   1434e:	4421      	add	r1, r4
   14350:	7840      	ldrb	r0, [r0, #1]
   14352:	f009 ffde 	bl	1e312 <hal_flash_isempty>
}
   14356:	bd10      	pop	{r4, pc}

00014358 <flash_area_id_from_image_slot>:
    switch (slot) {
   14358:	b150      	cbz	r0, 14370 <flash_area_id_from_image_slot+0x18>
{
   1435a:	b508      	push	{r3, lr}
    switch (slot) {
   1435c:	2801      	cmp	r0, #1
   1435e:	d101      	bne.n	14364 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   14360:	2002      	movs	r0, #2
}
   14362:	bd08      	pop	{r3, pc}
        assert(0);
   14364:	2300      	movs	r3, #0
   14366:	461a      	mov	r2, r3
   14368:	4619      	mov	r1, r3
   1436a:	4618      	mov	r0, r3
   1436c:	f7f4 ff2a 	bl	91c4 <__assert_func>
    switch (slot) {
   14370:	2001      	movs	r0, #1
}
   14372:	4770      	bx	lr

00014374 <flash_map_init>:

void
flash_map_init(void)
{
   14374:	b510      	push	{r4, lr}
   14376:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14378:	4b14      	ldr	r3, [pc, #80]	; (143cc <flash_map_init+0x58>)
   1437a:	781b      	ldrb	r3, [r3, #0]
   1437c:	b303      	cbz	r3, 143c0 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1437e:	f009 fec3 	bl	1e108 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14382:	b138      	cbz	r0, 14394 <flash_map_init+0x20>
   14384:	2000      	movs	r0, #0
   14386:	9000      	str	r0, [sp, #0]
   14388:	4b11      	ldr	r3, [pc, #68]	; (143d0 <flash_map_init+0x5c>)
   1438a:	681c      	ldr	r4, [r3, #0]
   1438c:	4603      	mov	r3, r0
   1438e:	4602      	mov	r2, r0
   14390:	4601      	mov	r1, r0
   14392:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   14394:	4b0f      	ldr	r3, [pc, #60]	; (143d4 <flash_map_init+0x60>)
   14396:	4a10      	ldr	r2, [pc, #64]	; (143d8 <flash_map_init+0x64>)
   14398:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1439a:	4b10      	ldr	r3, [pc, #64]	; (143dc <flash_map_init+0x68>)
   1439c:	2206      	movs	r2, #6
   1439e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   143a0:	aa03      	add	r2, sp, #12
   143a2:	490f      	ldr	r1, [pc, #60]	; (143e0 <flash_map_init+0x6c>)
   143a4:	200a      	movs	r0, #10
   143a6:	f7ff fedf 	bl	14168 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   143aa:	b938      	cbnz	r0, 143bc <flash_map_init+0x48>
   143ac:	9b03      	ldr	r3, [sp, #12]
   143ae:	2b00      	cmp	r3, #0
   143b0:	dd04      	ble.n	143bc <flash_map_init+0x48>
        flash_map = mfg_areas;
   143b2:	4a08      	ldr	r2, [pc, #32]	; (143d4 <flash_map_init+0x60>)
   143b4:	490a      	ldr	r1, [pc, #40]	; (143e0 <flash_map_init+0x6c>)
   143b6:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   143b8:	4a08      	ldr	r2, [pc, #32]	; (143dc <flash_map_init+0x68>)
   143ba:	6013      	str	r3, [r2, #0]
    }
}
   143bc:	b004      	add	sp, #16
   143be:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   143c0:	461a      	mov	r2, r3
   143c2:	4619      	mov	r1, r3
   143c4:	4618      	mov	r0, r3
   143c6:	f7f4 fefd 	bl	91c4 <__assert_func>
   143ca:	bf00      	nop
   143cc:	2000538c 	.word	0x2000538c
   143d0:	20000308 	.word	0x20000308
   143d4:	20004e0c 	.word	0x20004e0c
   143d8:	00027d84 	.word	0x00027d84
   143dc:	20004e10 	.word	0x20004e10
   143e0:	20004e14 	.word	0x20004e14

000143e4 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   143e4:	4b05      	ldr	r3, [pc, #20]	; (143fc <log_registered+0x18>)
   143e6:	681b      	ldr	r3, [r3, #0]
   143e8:	e000      	b.n	143ec <log_registered+0x8>
   143ea:	68db      	ldr	r3, [r3, #12]
   143ec:	b11b      	cbz	r3, 143f6 <log_registered+0x12>
        if (cur == log) {
   143ee:	4283      	cmp	r3, r0
   143f0:	d1fb      	bne.n	143ea <log_registered+0x6>
            return 1;
   143f2:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   143f4:	4770      	bx	lr
    return 0;
   143f6:	2000      	movs	r0, #0
   143f8:	4770      	bx	lr
   143fa:	bf00      	nop
   143fc:	200002cc 	.word	0x200002cc

00014400 <log_chk_type>:
            break;
    }
#endif

    return rc;
}
   14400:	2000      	movs	r0, #0
   14402:	4770      	bx	lr

00014404 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   14404:	8ac3      	ldrh	r3, [r0, #22]
   14406:	b11b      	cbz	r3, 14410 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   14408:	428b      	cmp	r3, r1
   1440a:	d303      	bcc.n	14414 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   1440c:	2000      	movs	r0, #0
   1440e:	4770      	bx	lr
   14410:	2000      	movs	r0, #0
   14412:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   14414:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   14416:	4770      	bx	lr

00014418 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   14418:	b500      	push	{lr}
   1441a:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   1441c:	6903      	ldr	r3, [r0, #16]
   1441e:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   14420:	9b01      	ldr	r3, [sp, #4]
   14422:	b10b      	cbz	r3, 14428 <log_call_append_cb+0x10>
        cb(log, idx);
   14424:	9b01      	ldr	r3, [sp, #4]
   14426:	4798      	blx	r3
    }
}
   14428:	b003      	add	sp, #12
   1442a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00014430 <log_append_prepare>:
{
   14430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14434:	b085      	sub	sp, #20
   14436:	4605      	mov	r5, r0
   14438:	4688      	mov	r8, r1
   1443a:	4614      	mov	r4, r2
   1443c:	461f      	mov	r7, r3
   1443e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = log_chk_type(etype);
   14440:	4618      	mov	r0, r3
   14442:	f7ff ffdd 	bl	14400 <log_chk_type>
    assert(rc == OS_OK);
   14446:	2800      	cmp	r0, #0
   14448:	d136      	bne.n	144b8 <log_append_prepare+0x88>
    if (log->l_name == NULL || log->l_log == NULL) {
   1444a:	682b      	ldr	r3, [r5, #0]
   1444c:	2b00      	cmp	r3, #0
   1444e:	d063      	beq.n	14518 <log_append_prepare+0xe8>
   14450:	686b      	ldr	r3, [r5, #4]
   14452:	2b00      	cmp	r3, #0
   14454:	d063      	beq.n	1451e <log_append_prepare+0xee>
    if (level > LOG_LEVEL_MAX) {
   14456:	2c0f      	cmp	r4, #15
   14458:	d900      	bls.n	1445c <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   1445a:	240f      	movs	r4, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1445c:	681b      	ldr	r3, [r3, #0]
   1445e:	2b02      	cmp	r3, #2
   14460:	d030      	beq.n	144c4 <log_append_prepare+0x94>
    if (level < log->l_level) {
   14462:	7d2b      	ldrb	r3, [r5, #20]
   14464:	42a3      	cmp	r3, r4
   14466:	d85d      	bhi.n	14524 <log_append_prepare+0xf4>
    if (level < log_level_get(module)) {
   14468:	4640      	mov	r0, r8
   1446a:	f000 f9d3 	bl	14814 <log_level_get>
   1446e:	42a0      	cmp	r0, r4
   14470:	d85b      	bhi.n	1452a <log_append_prepare+0xfa>
    OS_ENTER_CRITICAL(sr);
   14472:	f7f6 f8f3 	bl	a65c <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   14476:	4b2e      	ldr	r3, [pc, #184]	; (14530 <log_append_prepare+0x100>)
   14478:	681d      	ldr	r5, [r3, #0]
   1447a:	1c6a      	adds	r2, r5, #1
   1447c:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1447e:	f7f6 f8f3 	bl	a668 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   14482:	2100      	movs	r1, #0
   14484:	4668      	mov	r0, sp
   14486:	f7f5 ffff 	bl	a488 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   1448a:	4681      	mov	r9, r0
   1448c:	b938      	cbnz	r0, 1449e <log_append_prepare+0x6e>
   1448e:	9800      	ldr	r0, [sp, #0]
   14490:	9901      	ldr	r1, [sp, #4]
   14492:	4b28      	ldr	r3, [pc, #160]	; (14534 <log_append_prepare+0x104>)
   14494:	4283      	cmp	r3, r0
   14496:	f04f 0300 	mov.w	r3, #0
   1449a:	418b      	sbcs	r3, r1
   1449c:	db16      	blt.n	144cc <log_append_prepare+0x9c>
        ue->ue_ts = os_get_uptime_usec();
   1449e:	f7f6 f897 	bl	a5d0 <os_get_uptime_usec>
   144a2:	6030      	str	r0, [r6, #0]
   144a4:	6071      	str	r1, [r6, #4]
    ue->ue_level = level;
   144a6:	7374      	strb	r4, [r6, #13]
    ue->ue_module = module;
   144a8:	f886 800c 	strb.w	r8, [r6, #12]
    ue->ue_index = idx;
   144ac:	60b5      	str	r5, [r6, #8]
    assert(etype == LOG_ETYPE_STRING);
   144ae:	bb6f      	cbnz	r7, 1450c <log_append_prepare+0xdc>
}
   144b0:	4648      	mov	r0, r9
   144b2:	b005      	add	sp, #20
   144b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(rc == OS_OK);
   144b8:	2300      	movs	r3, #0
   144ba:	461a      	mov	r2, r3
   144bc:	4619      	mov	r1, r3
   144be:	4618      	mov	r0, r3
   144c0:	f7f4 fe80 	bl	91c4 <__assert_func>
        log_written = 1;
   144c4:	4b1c      	ldr	r3, [pc, #112]	; (14538 <log_append_prepare+0x108>)
   144c6:	2201      	movs	r2, #1
   144c8:	701a      	strb	r2, [r3, #0]
   144ca:	e7ca      	b.n	14462 <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   144cc:	014a      	lsls	r2, r1, #5
   144ce:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   144d2:	0143      	lsls	r3, r0, #5
   144d4:	1a1b      	subs	r3, r3, r0
   144d6:	eb62 0201 	sbc.w	r2, r2, r1
   144da:	0252      	lsls	r2, r2, #9
   144dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   144e0:	025b      	lsls	r3, r3, #9
   144e2:	181b      	adds	r3, r3, r0
   144e4:	eb41 0c02 	adc.w	ip, r1, r2
   144e8:	ea4f 1e8c 	mov.w	lr, ip, lsl #6
   144ec:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   144f0:	019a      	lsls	r2, r3, #6
   144f2:	1ad3      	subs	r3, r2, r3
   144f4:	eb6e 020c 	sbc.w	r2, lr, ip
   144f8:	181b      	adds	r3, r3, r0
   144fa:	eb41 0102 	adc.w	r1, r1, r2
   144fe:	9a02      	ldr	r2, [sp, #8]
   14500:	189b      	adds	r3, r3, r2
   14502:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
   14506:	6033      	str	r3, [r6, #0]
   14508:	6071      	str	r1, [r6, #4]
   1450a:	e7cc      	b.n	144a6 <log_append_prepare+0x76>
    assert(etype == LOG_ETYPE_STRING);
   1450c:	2300      	movs	r3, #0
   1450e:	461a      	mov	r2, r3
   14510:	4619      	mov	r1, r3
   14512:	4618      	mov	r0, r3
   14514:	f7f4 fe56 	bl	91c4 <__assert_func>
        rc = -1;
   14518:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1451c:	e7c8      	b.n	144b0 <log_append_prepare+0x80>
   1451e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14522:	e7c5      	b.n	144b0 <log_append_prepare+0x80>
        rc = -1;
   14524:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14528:	e7c2      	b.n	144b0 <log_append_prepare+0x80>
        rc = -1;
   1452a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    return (rc);
   1452e:	e7bf      	b.n	144b0 <log_append_prepare+0x80>
   14530:	20004e8c 	.word	0x20004e8c
   14534:	5685c17f 	.word	0x5685c17f
   14538:	20004e98 	.word	0x20004e98

0001453c <log_init>:
{
   1453c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1453e:	4b0b      	ldr	r3, [pc, #44]	; (1456c <log_init+0x30>)
   14540:	781b      	ldrb	r3, [r3, #0]
   14542:	b173      	cbz	r3, 14562 <log_init+0x26>
    memset(g_log_module_list, 0, sizeof(g_log_module_list));
   14544:	2300      	movs	r3, #0
   14546:	4a0a      	ldr	r2, [pc, #40]	; (14570 <log_init+0x34>)
   14548:	6013      	str	r3, [r2, #0]
    log_written = 0;
   1454a:	4a0a      	ldr	r2, [pc, #40]	; (14574 <log_init+0x38>)
   1454c:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1454e:	4a0a      	ldr	r2, [pc, #40]	; (14578 <log_init+0x3c>)
   14550:	6013      	str	r3, [r2, #0]
   14552:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   14554:	4a09      	ldr	r2, [pc, #36]	; (1457c <log_init+0x40>)
   14556:	2102      	movs	r1, #2
   14558:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1455a:	6013      	str	r3, [r2, #0]
    log_console_init();
   1455c:	f000 f934 	bl	147c8 <log_console_init>
}
   14560:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14562:	461a      	mov	r2, r3
   14564:	4619      	mov	r1, r3
   14566:	4618      	mov	r0, r3
   14568:	f7f4 fe2c 	bl	91c4 <__assert_func>
   1456c:	2000538c 	.word	0x2000538c
   14570:	20004e94 	.word	0x20004e94
   14574:	20004e98 	.word	0x20004e98
   14578:	200002cc 	.word	0x200002cc
   1457c:	20004e8c 	.word	0x20004e8c

00014580 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   14580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14584:	b087      	sub	sp, #28
   14586:	4604      	mov	r4, r0
   14588:	460d      	mov	r5, r1
   1458a:	4691      	mov	r9, r2
   1458c:	461e      	mov	r6, r3
   1458e:	f8bd 803c 	ldrh.w	r8, [sp, #60]	; 0x3c
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   14592:	4641      	mov	r1, r8
   14594:	f7ff ff36 	bl	14404 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   14598:	4607      	mov	r7, r0
   1459a:	b118      	cbz	r0, 145a4 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   1459c:	4638      	mov	r0, r7
   1459e:	b007      	add	sp, #28
   145a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   145a4:	ab02      	add	r3, sp, #8
   145a6:	9300      	str	r3, [sp, #0]
   145a8:	4633      	mov	r3, r6
   145aa:	464a      	mov	r2, r9
   145ac:	4629      	mov	r1, r5
   145ae:	4620      	mov	r0, r4
   145b0:	f7ff ff3e 	bl	14430 <log_append_prepare>
    if (rc != 0) {
   145b4:	4607      	mov	r7, r0
   145b6:	2800      	cmp	r0, #0
   145b8:	d1f0      	bne.n	1459c <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   145ba:	6863      	ldr	r3, [r4, #4]
   145bc:	691d      	ldr	r5, [r3, #16]
   145be:	4643      	mov	r3, r8
   145c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   145c2:	a902      	add	r1, sp, #8
   145c4:	4620      	mov	r0, r4
   145c6:	47a8      	blx	r5
    if (rc != 0) {
   145c8:	4607      	mov	r7, r0
   145ca:	2800      	cmp	r0, #0
   145cc:	d1e6      	bne.n	1459c <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   145ce:	9904      	ldr	r1, [sp, #16]
   145d0:	4620      	mov	r0, r4
   145d2:	f7ff ff21 	bl	14418 <log_call_append_cb>
    return 0;
   145d6:	e7e1      	b.n	1459c <log_append_body+0x1c>

000145d8 <log_printf>:
}

void
log_printf(struct log *log, uint8_t module, uint8_t level,
           const char *msg, ...)
{
   145d8:	b408      	push	{r3}
   145da:	b570      	push	{r4, r5, r6, lr}
   145dc:	b0a5      	sub	sp, #148	; 0x94
   145de:	4604      	mov	r4, r0
   145e0:	460d      	mov	r5, r1
   145e2:	4616      	mov	r6, r2
   145e4:	ab29      	add	r3, sp, #164	; 0xa4
   145e6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[LOG_PRINTF_MAX_ENTRY_LEN];
    int len;

    va_start(args, msg);
   145ea:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, LOG_PRINTF_MAX_ENTRY_LEN, msg, args);
   145ec:	2180      	movs	r1, #128	; 0x80
   145ee:	a803      	add	r0, sp, #12
   145f0:	f7fc fc6e 	bl	10ed0 <vsnprintf>
    va_end(args);
    if (len >= LOG_PRINTF_MAX_ENTRY_LEN) {
   145f4:	287f      	cmp	r0, #127	; 0x7f
   145f6:	dd00      	ble.n	145fa <log_printf+0x22>
        len = LOG_PRINTF_MAX_ENTRY_LEN-1;
   145f8:	207f      	movs	r0, #127	; 0x7f
    }

    log_append_body(log, module, level, LOG_ETYPE_STRING, buf, len);
   145fa:	b280      	uxth	r0, r0
   145fc:	9001      	str	r0, [sp, #4]
   145fe:	ab03      	add	r3, sp, #12
   14600:	9300      	str	r3, [sp, #0]
   14602:	2300      	movs	r3, #0
   14604:	4632      	mov	r2, r6
   14606:	4629      	mov	r1, r5
   14608:	4620      	mov	r0, r4
   1460a:	f7ff ffb9 	bl	14580 <log_append_body>
}
   1460e:	b025      	add	sp, #148	; 0x94
   14610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14614:	b001      	add	sp, #4
   14616:	4770      	bx	lr

00014618 <log_walk>:

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   14618:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1461a:	6843      	ldr	r3, [r0, #4]
   1461c:	69db      	ldr	r3, [r3, #28]
   1461e:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   14620:	bd08      	pop	{r3, pc}
   14622:	0000      	movs	r0, r0
   14624:	0000      	movs	r0, r0
	...

00014628 <log_read_last_hdr>:
{
   14628:	b500      	push	{lr}
   1462a:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   1462c:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1462e:	2300      	movs	r3, #0
   14630:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   14632:	aa06      	add	r2, sp, #24
   14634:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   14636:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 14660 <log_read_last_hdr+0x38>
   1463a:	ed8d 7b00 	vstr	d7, [sp]
    log_offset.lo_index = 0;
   1463e:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   14640:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   14642:	466a      	mov	r2, sp
   14644:	4908      	ldr	r1, [pc, #32]	; (14668 <log_read_last_hdr+0x40>)
   14646:	f7ff ffe7 	bl	14618 <log_walk>
    if (!arg.read_success) {
   1464a:	9b07      	ldr	r3, [sp, #28]
   1464c:	b11b      	cbz	r3, 14656 <log_read_last_hdr+0x2e>
    return 0;
   1464e:	2000      	movs	r0, #0
}
   14650:	b009      	add	sp, #36	; 0x24
   14652:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   14656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1465a:	e7f9      	b.n	14650 <log_read_last_hdr+0x28>
   1465c:	f3af 8000 	nop.w
   14660:	ffffffff 	.word	0xffffffff
   14664:	ffffffff 	.word	0xffffffff
   14668:	00014715 	.word	0x00014715

0001466c <log_register>:
{
   1466c:	b530      	push	{r4, r5, lr}
   1466e:	b085      	sub	sp, #20
   14670:	460c      	mov	r4, r1
   14672:	f89d 1020 	ldrb.w	r1, [sp, #32]
    assert(!log_written);
   14676:	4d1f      	ldr	r5, [pc, #124]	; (146f4 <log_register+0x88>)
   14678:	782d      	ldrb	r5, [r5, #0]
   1467a:	bb0d      	cbnz	r5, 146c0 <log_register+0x54>
    if (level > LOG_LEVEL_MAX) {
   1467c:	290f      	cmp	r1, #15
   1467e:	d900      	bls.n	14682 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   14680:	210f      	movs	r1, #15
    log->l_name = name;
   14682:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   14684:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   14686:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   14688:	7521      	strb	r1, [r4, #20]
    log->l_append_cb = NULL;
   1468a:	2300      	movs	r3, #0
   1468c:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1468e:	82e3      	strh	r3, [r4, #22]
    if (!log_registered(log)) {
   14690:	4620      	mov	r0, r4
   14692:	f7ff fea7 	bl	143e4 <log_registered>
   14696:	b938      	cbnz	r0, 146a8 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   14698:	2300      	movs	r3, #0
   1469a:	60e3      	str	r3, [r4, #12]
   1469c:	4b16      	ldr	r3, [pc, #88]	; (146f8 <log_register+0x8c>)
   1469e:	685a      	ldr	r2, [r3, #4]
   146a0:	6014      	str	r4, [r2, #0]
   146a2:	f104 020c 	add.w	r2, r4, #12
   146a6:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   146a8:	6863      	ldr	r3, [r4, #4]
   146aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   146ac:	b10b      	cbz	r3, 146b2 <log_register+0x46>
        log->l_log->log_registered(log);
   146ae:	4620      	mov	r0, r4
   146b0:	4798      	blx	r3
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   146b2:	6863      	ldr	r3, [r4, #4]
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	2b02      	cmp	r3, #2
   146b8:	d008      	beq.n	146cc <log_register+0x60>
}
   146ba:	2000      	movs	r0, #0
   146bc:	b005      	add	sp, #20
   146be:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   146c0:	2300      	movs	r3, #0
   146c2:	461a      	mov	r2, r3
   146c4:	4619      	mov	r1, r3
   146c6:	4618      	mov	r0, r3
   146c8:	f7f4 fd7c 	bl	91c4 <__assert_func>
        rc = log_read_last_hdr(log, &hdr);
   146cc:	4669      	mov	r1, sp
   146ce:	4620      	mov	r0, r4
   146d0:	f7ff ffaa 	bl	14628 <log_read_last_hdr>
        if (rc == 0) {
   146d4:	2800      	cmp	r0, #0
   146d6:	d1f0      	bne.n	146ba <log_register+0x4e>
            OS_ENTER_CRITICAL(sr);
   146d8:	f7f5 ffc0 	bl	a65c <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   146dc:	9b02      	ldr	r3, [sp, #8]
   146de:	4a07      	ldr	r2, [pc, #28]	; (146fc <log_register+0x90>)
   146e0:	6812      	ldr	r2, [r2, #0]
   146e2:	4293      	cmp	r3, r2
   146e4:	d302      	bcc.n	146ec <log_register+0x80>
                g_log_info.li_next_index = hdr.ue_index + 1;
   146e6:	3301      	adds	r3, #1
   146e8:	4a04      	ldr	r2, [pc, #16]	; (146fc <log_register+0x90>)
   146ea:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   146ec:	f7f5 ffbc 	bl	a668 <os_arch_restore_sr>
   146f0:	e7e3      	b.n	146ba <log_register+0x4e>
   146f2:	bf00      	nop
   146f4:	20004e98 	.word	0x20004e98
   146f8:	200002cc 	.word	0x200002cc
   146fc:	20004e8c 	.word	0x20004e8c

00014700 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   14700:	b530      	push	{r4, r5, lr}
   14702:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   14704:	6844      	ldr	r4, [r0, #4]
   14706:	6864      	ldr	r4, [r4, #4]
   14708:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1470c:	9500      	str	r5, [sp, #0]
   1470e:	47a0      	blx	r4

    return (rc);
}
   14710:	b003      	add	sp, #12
   14712:	bd30      	pop	{r4, r5, pc}

00014714 <log_read_hdr_walk>:
{
   14714:	b510      	push	{r4, lr}
   14716:	b082      	sub	sp, #8
   14718:	460b      	mov	r3, r1
   1471a:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1471c:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, sizeof *arg->hdr);
   1471e:	6822      	ldr	r2, [r4, #0]
   14720:	230e      	movs	r3, #14
   14722:	9300      	str	r3, [sp, #0]
   14724:	2300      	movs	r3, #0
   14726:	f7ff ffeb 	bl	14700 <log_read>
    if (rc >= sizeof *arg->hdr) {
   1472a:	280d      	cmp	r0, #13
   1472c:	d901      	bls.n	14732 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1472e:	2301      	movs	r3, #1
   14730:	6063      	str	r3, [r4, #4]
}
   14732:	2001      	movs	r0, #1
   14734:	b002      	add	sp, #8
   14736:	bd10      	pop	{r4, pc}

00014738 <log_console_read>:
log_console_read(struct log *log, void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   14738:	2002      	movs	r0, #2
   1473a:	4770      	bx	lr

0001473c <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1473c:	2002      	movs	r0, #2
   1473e:	4770      	bx	lr

00014740 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   14740:	2002      	movs	r0, #2
   14742:	4770      	bx	lr

00014744 <log_console_print_hdr>:
{
   14744:	b500      	push	{lr}
   14746:	b083      	sub	sp, #12
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   14748:	7b03      	ldrb	r3, [r0, #12]
   1474a:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u] ",
   1474c:	9201      	str	r2, [sp, #4]
   1474e:	9300      	str	r3, [sp, #0]
   14750:	6802      	ldr	r2, [r0, #0]
   14752:	6843      	ldr	r3, [r0, #4]
   14754:	4802      	ldr	r0, [pc, #8]	; (14760 <log_console_print_hdr+0x1c>)
   14756:	f7ff fb59 	bl	13e0c <console_printf>
}
   1475a:	b003      	add	sp, #12
   1475c:	f85d fb04 	ldr.w	pc, [sp], #4
   14760:	0002719c 	.word	0x0002719c

00014764 <log_console_append_body>:
{
   14764:	b570      	push	{r4, r5, r6, lr}
   14766:	460e      	mov	r6, r1
   14768:	4614      	mov	r4, r2
   1476a:	461d      	mov	r5, r3
    if (!console_is_init()) {
   1476c:	f7ff fae4 	bl	13d38 <console_is_init>
   14770:	b130      	cbz	r0, 14780 <log_console_append_body+0x1c>
    if (!console_is_midline) {
   14772:	4b06      	ldr	r3, [pc, #24]	; (1478c <log_console_append_body+0x28>)
   14774:	681b      	ldr	r3, [r3, #0]
   14776:	b12b      	cbz	r3, 14784 <log_console_append_body+0x20>
    console_write(body, body_len);
   14778:	4629      	mov	r1, r5
   1477a:	4620      	mov	r0, r4
   1477c:	f7ff f846 	bl	1380c <console_write>
}
   14780:	2000      	movs	r0, #0
   14782:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   14784:	4630      	mov	r0, r6
   14786:	f7ff ffdd 	bl	14744 <log_console_print_hdr>
   1478a:	e7f5      	b.n	14778 <log_console_append_body+0x14>
   1478c:	20004990 	.word	0x20004990

00014790 <log_console_append>:
{
   14790:	b538      	push	{r3, r4, r5, lr}
   14792:	460c      	mov	r4, r1
   14794:	4615      	mov	r5, r2
    if (!console_is_init()) {
   14796:	f7ff facf 	bl	13d38 <console_is_init>
   1479a:	b140      	cbz	r0, 147ae <log_console_append+0x1e>
    if (!console_is_midline) {
   1479c:	4b07      	ldr	r3, [pc, #28]	; (147bc <log_console_append+0x2c>)
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	b13b      	cbz	r3, 147b2 <log_console_append+0x22>
    console_write((char *) buf + LOG_ENTRY_HDR_SIZE, len - LOG_ENTRY_HDR_SIZE);
   147a2:	f1a5 010e 	sub.w	r1, r5, #14
   147a6:	f104 000e 	add.w	r0, r4, #14
   147aa:	f7ff f82f 	bl	1380c <console_write>
}
   147ae:	2000      	movs	r0, #0
   147b0:	bd38      	pop	{r3, r4, r5, pc}
        log_console_print_hdr(hdr);
   147b2:	4620      	mov	r0, r4
   147b4:	f7ff ffc6 	bl	14744 <log_console_print_hdr>
   147b8:	e7f3      	b.n	147a2 <log_console_append+0x12>
   147ba:	bf00      	nop
   147bc:	20004990 	.word	0x20004990

000147c0 <log_console_get>:
}
   147c0:	4800      	ldr	r0, [pc, #0]	; (147c4 <log_console_get+0x4>)
   147c2:	4770      	bx	lr
   147c4:	20004e9c 	.word	0x20004e9c

000147c8 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   147c8:	b510      	push	{r4, lr}
   147ca:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   147cc:	4b0c      	ldr	r3, [pc, #48]	; (14800 <log_console_init+0x38>)
   147ce:	781b      	ldrb	r3, [r3, #0]
   147d0:	b18b      	cbz	r3, 147f6 <log_console_init+0x2e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   147d2:	2300      	movs	r3, #0
   147d4:	9300      	str	r3, [sp, #0]
   147d6:	4a0b      	ldr	r2, [pc, #44]	; (14804 <log_console_init+0x3c>)
   147d8:	490b      	ldr	r1, [pc, #44]	; (14808 <log_console_init+0x40>)
   147da:	480c      	ldr	r0, [pc, #48]	; (1480c <log_console_init+0x44>)
   147dc:	f7ff ff46 	bl	1466c <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   147e0:	b138      	cbz	r0, 147f2 <log_console_init+0x2a>
   147e2:	2000      	movs	r0, #0
   147e4:	9000      	str	r0, [sp, #0]
   147e6:	4b0a      	ldr	r3, [pc, #40]	; (14810 <log_console_init+0x48>)
   147e8:	681c      	ldr	r4, [r3, #0]
   147ea:	4603      	mov	r3, r0
   147ec:	4602      	mov	r2, r0
   147ee:	4601      	mov	r1, r0
   147f0:	47a0      	blx	r4
}
   147f2:	b002      	add	sp, #8
   147f4:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   147f6:	461a      	mov	r2, r3
   147f8:	4619      	mov	r1, r3
   147fa:	4618      	mov	r0, r3
   147fc:	f7f4 fce2 	bl	91c4 <__assert_func>
   14800:	2000538c 	.word	0x2000538c
   14804:	000271c4 	.word	0x000271c4
   14808:	20004e9c 	.word	0x20004e9c
   1480c:	000271bc 	.word	0x000271bc
   14810:	20000308 	.word	0x20000308

00014814 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   14814:	0843      	lsrs	r3, r0, #1
   14816:	4a05      	ldr	r2, [pc, #20]	; (1482c <log_level_get+0x18>)
   14818:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1481a:	f010 0f01 	tst.w	r0, #1
   1481e:	d102      	bne.n	14826 <log_level_get+0x12>
        return byte & 0x0f;
   14820:	f003 000f 	and.w	r0, r3, #15
   14824:	4770      	bx	lr
    } else {
        return byte >> 4;
   14826:	0918      	lsrs	r0, r3, #4
    }
}
   14828:	4770      	bx	lr
   1482a:	bf00      	nop
   1482c:	20004eb4 	.word	0x20004eb4

00014830 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   14830:	b530      	push	{r4, r5, lr}
   14832:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   14834:	7885      	ldrb	r5, [r0, #2]
   14836:	4b20      	ldr	r3, [pc, #128]	; (148b8 <mfg_seek_next_aux+0x88>)
   14838:	681b      	ldr	r3, [r3, #0]
   1483a:	429d      	cmp	r5, r3
   1483c:	da33      	bge.n	148a6 <mfg_seek_next_aux+0x76>
   1483e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   14840:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14844:	a901      	add	r1, sp, #4
   14846:	4a1d      	ldr	r2, [pc, #116]	; (148bc <mfg_seek_next_aux+0x8c>)
   14848:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1484c:	f7ff fcc4 	bl	141d8 <flash_area_open>
    if (rc != 0) {
   14850:	bb60      	cbnz	r0, 148ac <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   14852:	6862      	ldr	r2, [r4, #4]
   14854:	b9c2      	cbnz	r2, 14888 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   14856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1485a:	4b18      	ldr	r3, [pc, #96]	; (148bc <mfg_seek_next_aux+0x8c>)
   1485c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   14860:	686b      	ldr	r3, [r5, #4]
   14862:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   14864:	6861      	ldr	r1, [r4, #4]
   14866:	9801      	ldr	r0, [sp, #4]
   14868:	6883      	ldr	r3, [r0, #8]
   1486a:	3b08      	subs	r3, #8
   1486c:	4299      	cmp	r1, r3
   1486e:	d313      	bcc.n	14898 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   14870:	78a3      	ldrb	r3, [r4, #2]
   14872:	1c59      	adds	r1, r3, #1
   14874:	4a10      	ldr	r2, [pc, #64]	; (148b8 <mfg_seek_next_aux+0x88>)
   14876:	6812      	ldr	r2, [r2, #0]
   14878:	4291      	cmp	r1, r2
   1487a:	da0a      	bge.n	14892 <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1487c:	2200      	movs	r2, #0
   1487e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   14880:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   14882:	f06f 0005 	mvn.w	r0, #5
   14886:	e00c      	b.n	148a2 <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   14888:	7863      	ldrb	r3, [r4, #1]
   1488a:	4413      	add	r3, r2
   1488c:	3302      	adds	r3, #2
   1488e:	6063      	str	r3, [r4, #4]
   14890:	e7e8      	b.n	14864 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   14892:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   14896:	e004      	b.n	148a2 <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   14898:	2302      	movs	r3, #2
   1489a:	4622      	mov	r2, r4
   1489c:	f7ff fcfc 	bl	14298 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   148a0:	b938      	cbnz	r0, 148b2 <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   148a2:	b003      	add	sp, #12
   148a4:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   148a6:	f06f 0001 	mvn.w	r0, #1
   148aa:	e7fa      	b.n	148a2 <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   148ac:	f06f 0004 	mvn.w	r0, #4
   148b0:	e7f7      	b.n	148a2 <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   148b2:	f06f 0004 	mvn.w	r0, #4
   148b6:	e7f4      	b.n	148a2 <mfg_seek_next_aux+0x72>
   148b8:	20004f50 	.word	0x20004f50
   148bc:	20004f38 	.word	0x20004f38

000148c0 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   148c0:	b530      	push	{r4, r5, lr}
   148c2:	b085      	sub	sp, #20
   148c4:	4605      	mov	r5, r0
   148c6:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   148c8:	a903      	add	r1, sp, #12
   148ca:	f7ff fc85 	bl	141d8 <flash_area_open>
    if (rc != 0) {
   148ce:	b9d8      	cbnz	r0, 14908 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   148d0:	9803      	ldr	r0, [sp, #12]
   148d2:	6881      	ldr	r1, [r0, #8]
   148d4:	2308      	movs	r3, #8
   148d6:	aa01      	add	r2, sp, #4
   148d8:	3908      	subs	r1, #8
   148da:	f7ff fcdd 	bl	14298 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   148de:	b9b0      	cbnz	r0, 1490e <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   148e0:	9a02      	ldr	r2, [sp, #8]
   148e2:	4b11      	ldr	r3, [pc, #68]	; (14928 <mfg_read_mmr+0x68>)
   148e4:	429a      	cmp	r2, r3
   148e6:	d115      	bne.n	14914 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   148e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   148ec:	2b02      	cmp	r3, #2
   148ee:	d114      	bne.n	1491a <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   148f0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   148f4:	9b03      	ldr	r3, [sp, #12]
   148f6:	689b      	ldr	r3, [r3, #8]
   148f8:	429a      	cmp	r2, r3
   148fa:	d811      	bhi.n	14920 <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   148fc:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   148fe:	7025      	strb	r5, [r4, #0]
   14900:	6063      	str	r3, [r4, #4]
   14902:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   14904:	b005      	add	sp, #20
   14906:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   14908:	f06f 0004 	mvn.w	r0, #4
   1490c:	e7fa      	b.n	14904 <mfg_read_mmr+0x44>
        return SYS_EIO;
   1490e:	f06f 0004 	mvn.w	r0, #4
   14912:	e7f7      	b.n	14904 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   14914:	f06f 0008 	mvn.w	r0, #8
   14918:	e7f4      	b.n	14904 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   1491a:	f06f 000b 	mvn.w	r0, #11
   1491e:	e7f1      	b.n	14904 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   14920:	f06f 0008 	mvn.w	r0, #8
   14924:	e7ee      	b.n	14904 <mfg_read_mmr+0x44>
   14926:	bf00      	nop
   14928:	3bb2a269 	.word	0x3bb2a269

0001492c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1492c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1492e:	2300      	movs	r3, #0
   14930:	e000      	b.n	14934 <mfg_read_next_mmr+0x8>
   14932:	3301      	adds	r3, #1
   14934:	4a10      	ldr	r2, [pc, #64]	; (14978 <mfg_read_next_mmr+0x4c>)
   14936:	6811      	ldr	r1, [r2, #0]
   14938:	4299      	cmp	r1, r3
   1493a:	dd09      	ble.n	14950 <mfg_read_next_mmr+0x24>
        if (mfg_mmrs[i].area_id == area_id) {
   1493c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14940:	490e      	ldr	r1, [pc, #56]	; (1497c <mfg_read_next_mmr+0x50>)
   14942:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   14946:	4282      	cmp	r2, r0
   14948:	d1f3      	bne.n	14932 <mfg_read_next_mmr+0x6>
            return SYS_EALREADY;
   1494a:	f06f 000a 	mvn.w	r0, #10
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
   1494e:	bd08      	pop	{r3, pc}
    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   14950:	2901      	cmp	r1, #1
   14952:	dc0d      	bgt.n	14970 <mfg_read_next_mmr+0x44>
    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   14954:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   14958:	4b08      	ldr	r3, [pc, #32]	; (1497c <mfg_read_next_mmr+0x50>)
   1495a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1495e:	f7ff ffaf 	bl	148c0 <mfg_read_mmr>
    if (rc != 0) {
   14962:	2800      	cmp	r0, #0
   14964:	d1f3      	bne.n	1494e <mfg_read_next_mmr+0x22>
    mfg_num_mmrs++;
   14966:	4a04      	ldr	r2, [pc, #16]	; (14978 <mfg_read_next_mmr+0x4c>)
   14968:	6813      	ldr	r3, [r2, #0]
   1496a:	3301      	adds	r3, #1
   1496c:	6013      	str	r3, [r2, #0]
    return 0;
   1496e:	e7ee      	b.n	1494e <mfg_read_next_mmr+0x22>
        return SYS_ENOMEM;
   14970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14974:	e7eb      	b.n	1494e <mfg_read_next_mmr+0x22>
   14976:	bf00      	nop
   14978:	20004f50 	.word	0x20004f50
   1497c:	20004f38 	.word	0x20004f38

00014980 <mfg_open_flash_area>:
{
   14980:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   14982:	7883      	ldrb	r3, [r0, #2]
   14984:	4a0a      	ldr	r2, [pc, #40]	; (149b0 <mfg_open_flash_area+0x30>)
   14986:	6812      	ldr	r2, [r2, #0]
   14988:	4293      	cmp	r3, r2
   1498a:	da08      	bge.n	1499e <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   1498c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14990:	4a08      	ldr	r2, [pc, #32]	; (149b4 <mfg_open_flash_area+0x34>)
   14992:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   14996:	f7ff fc1f 	bl	141d8 <flash_area_open>
    if (rc != 0) {
   1499a:	b930      	cbnz	r0, 149aa <mfg_open_flash_area+0x2a>
}
   1499c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1499e:	2300      	movs	r3, #0
   149a0:	461a      	mov	r2, r3
   149a2:	4619      	mov	r1, r3
   149a4:	4618      	mov	r0, r3
   149a6:	f7f4 fc0d 	bl	91c4 <__assert_func>
        return SYS_EIO;
   149aa:	f06f 0004 	mvn.w	r0, #4
   149ae:	e7f5      	b.n	1499c <mfg_open_flash_area+0x1c>
   149b0:	20004f50 	.word	0x20004f50
   149b4:	20004f38 	.word	0x20004f38

000149b8 <mfg_read_tlv_body>:
{
   149b8:	b570      	push	{r4, r5, r6, lr}
   149ba:	b082      	sub	sp, #8
   149bc:	4606      	mov	r6, r0
   149be:	460c      	mov	r4, r1
   149c0:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   149c2:	a901      	add	r1, sp, #4
   149c4:	f7ff ffdc 	bl	14980 <mfg_open_flash_area>
    if (rc != 0) {
   149c8:	b108      	cbz	r0, 149ce <mfg_read_tlv_body+0x16>
}
   149ca:	b002      	add	sp, #8
   149cc:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   149ce:	462a      	mov	r2, r5
   149d0:	2100      	movs	r1, #0
   149d2:	4620      	mov	r0, r4
   149d4:	f7fb fe51 	bl	1067a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   149d8:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   149da:	6871      	ldr	r1, [r6, #4]
   149dc:	42ab      	cmp	r3, r5
   149de:	bfa8      	it	ge
   149e0:	462b      	movge	r3, r5
   149e2:	4622      	mov	r2, r4
   149e4:	3102      	adds	r1, #2
   149e6:	9801      	ldr	r0, [sp, #4]
   149e8:	f7ff fc56 	bl	14298 <flash_area_read>
    if (rc != 0) {
   149ec:	2800      	cmp	r0, #0
   149ee:	d0ec      	beq.n	149ca <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   149f0:	f06f 0004 	mvn.w	r0, #4
   149f4:	e7e9      	b.n	149ca <mfg_read_tlv_body+0x12>

000149f6 <mfg_seek_next>:
{
   149f6:	b510      	push	{r4, lr}
   149f8:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   149fa:	4620      	mov	r0, r4
   149fc:	f7ff ff18 	bl	14830 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   14a00:	f110 0f06 	cmn.w	r0, #6
   14a04:	d0f9      	beq.n	149fa <mfg_seek_next+0x4>
}
   14a06:	bd10      	pop	{r4, pc}

00014a08 <mfg_seek_next_with_type>:
{
   14a08:	b538      	push	{r3, r4, r5, lr}
   14a0a:	4604      	mov	r4, r0
   14a0c:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   14a0e:	4620      	mov	r0, r4
   14a10:	f7ff fff1 	bl	149f6 <mfg_seek_next>
        if (rc != 0) {
   14a14:	4602      	mov	r2, r0
   14a16:	b910      	cbnz	r0, 14a1e <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   14a18:	7823      	ldrb	r3, [r4, #0]
   14a1a:	42ab      	cmp	r3, r5
   14a1c:	d1f7      	bne.n	14a0e <mfg_seek_next_with_type+0x6>
}
   14a1e:	4610      	mov	r0, r2
   14a20:	bd38      	pop	{r3, r4, r5, pc}

00014a22 <mfg_read_tlv_flash_area>:
{
   14a22:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   14a24:	220a      	movs	r2, #10
   14a26:	f7ff ffc7 	bl	149b8 <mfg_read_tlv_body>
}
   14a2a:	bd08      	pop	{r3, pc}

00014a2c <mfg_read_tlv_mmr_ref>:
{
   14a2c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   14a2e:	2201      	movs	r2, #1
   14a30:	f7ff ffc2 	bl	149b8 <mfg_read_tlv_body>
}
   14a34:	bd08      	pop	{r3, pc}
	...

00014a38 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   14a38:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   14a3a:	4b0f      	ldr	r3, [pc, #60]	; (14a78 <mfg_init+0x40>)
   14a3c:	781b      	ldrb	r3, [r3, #0]
   14a3e:	b97b      	cbnz	r3, 14a60 <mfg_init+0x28>
        return;
    }
    mfg_initialized = true;
   14a40:	4b0d      	ldr	r3, [pc, #52]	; (14a78 <mfg_init+0x40>)
   14a42:	2201      	movs	r2, #1
   14a44:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14a46:	4b0d      	ldr	r3, [pc, #52]	; (14a7c <mfg_init+0x44>)
   14a48:	781b      	ldrb	r3, [r3, #0]
   14a4a:	b153      	cbz	r3, 14a62 <mfg_init+0x2a>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   14a4c:	2000      	movs	r0, #0
   14a4e:	f7ff ff6d 	bl	1492c <mfg_read_next_mmr>
    if (rc != 0) {
   14a52:	4603      	mov	r3, r0
   14a54:	b150      	cbz	r0, 14a6c <mfg_init+0x34>
    }

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
   14a56:	4a0a      	ldr	r2, [pc, #40]	; (14a80 <mfg_init+0x48>)
   14a58:	2103      	movs	r1, #3
   14a5a:	2080      	movs	r0, #128	; 0x80
   14a5c:	f00e fc50 	bl	23300 <modlog_printf>
}
   14a60:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14a62:	461a      	mov	r2, r3
   14a64:	4619      	mov	r1, r3
   14a66:	4618      	mov	r0, r3
   14a68:	f7f4 fbac 	bl	91c4 <__assert_func>
    rc = mfg_read_mmr_refs();
   14a6c:	f000 f812 	bl	14a94 <mfg_read_mmr_refs>
    if (rc != 0) {
   14a70:	4603      	mov	r3, r0
   14a72:	2800      	cmp	r0, #0
   14a74:	d0f4      	beq.n	14a60 <mfg_init+0x28>
   14a76:	e7ee      	b.n	14a56 <mfg_init+0x1e>
   14a78:	20004f34 	.word	0x20004f34
   14a7c:	2000538c 	.word	0x2000538c
   14a80:	000271ec 	.word	0x000271ec

00014a84 <mfg_open>:
{
   14a84:	b510      	push	{r4, lr}
   14a86:	4604      	mov	r4, r0
    mfg_init();
   14a88:	f7ff ffd6 	bl	14a38 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   14a8c:	2300      	movs	r3, #0
   14a8e:	6023      	str	r3, [r4, #0]
   14a90:	6063      	str	r3, [r4, #4]
}
   14a92:	bd10      	pop	{r4, pc}

00014a94 <mfg_read_mmr_refs>:
{
   14a94:	b500      	push	{lr}
   14a96:	b085      	sub	sp, #20
    mfg_open(&reader);
   14a98:	a801      	add	r0, sp, #4
   14a9a:	f7ff fff3 	bl	14a84 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   14a9e:	2104      	movs	r1, #4
   14aa0:	eb0d 0001 	add.w	r0, sp, r1
   14aa4:	f7ff ffb0 	bl	14a08 <mfg_seek_next_with_type>
        switch (rc) {
   14aa8:	f110 0f0f 	cmn.w	r0, #15
   14aac:	d00f      	beq.n	14ace <mfg_read_mmr_refs+0x3a>
   14aae:	b978      	cbnz	r0, 14ad0 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   14ab0:	a903      	add	r1, sp, #12
   14ab2:	a801      	add	r0, sp, #4
   14ab4:	f7ff ffba 	bl	14a2c <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   14ab8:	b950      	cbnz	r0, 14ad0 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   14aba:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14abe:	f7ff ff35 	bl	1492c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   14ac2:	2800      	cmp	r0, #0
   14ac4:	d0eb      	beq.n	14a9e <mfg_read_mmr_refs+0xa>
   14ac6:	f110 0f0b 	cmn.w	r0, #11
   14aca:	d0e8      	beq.n	14a9e <mfg_read_mmr_refs+0xa>
   14acc:	e000      	b.n	14ad0 <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   14ace:	2000      	movs	r0, #0
}
   14ad0:	b005      	add	sp, #20
   14ad2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00014ad8 <reboot_conf_export>:

static int
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    if (tgt == CONF_EXPORT_SHOW) {
   14ad8:	2901      	cmp	r1, #1
   14ada:	d001      	beq.n	14ae0 <reboot_conf_export+0x8>
        func("reboot/reboot_cnt", reboot_cnt_str);
        func("reboot/written", log_reboot_written_str);
    }
    return 0;
}
   14adc:	2000      	movs	r0, #0
   14ade:	4770      	bx	lr
{
   14ae0:	b510      	push	{r4, lr}
   14ae2:	4604      	mov	r4, r0
        func("reboot/reboot_cnt", reboot_cnt_str);
   14ae4:	4903      	ldr	r1, [pc, #12]	; (14af4 <reboot_conf_export+0x1c>)
   14ae6:	4804      	ldr	r0, [pc, #16]	; (14af8 <reboot_conf_export+0x20>)
   14ae8:	47a0      	blx	r4
        func("reboot/written", log_reboot_written_str);
   14aea:	4904      	ldr	r1, [pc, #16]	; (14afc <reboot_conf_export+0x24>)
   14aec:	4804      	ldr	r0, [pc, #16]	; (14b00 <reboot_conf_export+0x28>)
   14aee:	47a0      	blx	r4
}
   14af0:	2000      	movs	r0, #0
   14af2:	bd10      	pop	{r4, pc}
   14af4:	20004f68 	.word	0x20004f68
   14af8:	00027208 	.word	0x00027208
   14afc:	20004f58 	.word	0x20004f58
   14b00:	0002721c 	.word	0x0002721c

00014b04 <reboot_conf_set>:
    if (argc == 1) {
   14b04:	2801      	cmp	r0, #1
   14b06:	d001      	beq.n	14b0c <reboot_conf_set+0x8>
    return OS_ENOENT;
   14b08:	200a      	movs	r0, #10
}
   14b0a:	4770      	bx	lr
{
   14b0c:	b538      	push	{r3, r4, r5, lr}
   14b0e:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   14b10:	680d      	ldr	r5, [r1, #0]
   14b12:	490d      	ldr	r1, [pc, #52]	; (14b48 <reboot_conf_set+0x44>)
   14b14:	4628      	mov	r0, r5
   14b16:	f7fb fddb 	bl	106d0 <strcmp>
   14b1a:	b130      	cbz	r0, 14b2a <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   14b1c:	490b      	ldr	r1, [pc, #44]	; (14b4c <reboot_conf_set+0x48>)
   14b1e:	4628      	mov	r0, r5
   14b20:	f7fb fdd6 	bl	106d0 <strcmp>
   14b24:	b140      	cbz	r0, 14b38 <reboot_conf_set+0x34>
    return OS_ENOENT;
   14b26:	200a      	movs	r0, #10
}
   14b28:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   14b2a:	2302      	movs	r3, #2
   14b2c:	4a08      	ldr	r2, [pc, #32]	; (14b50 <reboot_conf_set+0x4c>)
   14b2e:	2103      	movs	r1, #3
   14b30:	4620      	mov	r0, r4
   14b32:	f7fe f99c 	bl	12e6e <conf_value_from_str>
   14b36:	e7f7      	b.n	14b28 <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   14b38:	2301      	movs	r3, #1
   14b3a:	4a06      	ldr	r2, [pc, #24]	; (14b54 <reboot_conf_set+0x50>)
   14b3c:	2103      	movs	r1, #3
   14b3e:	4620      	mov	r0, r4
   14b40:	f7fe f995 	bl	12e6e <conf_value_from_str>
   14b44:	e7f0      	b.n	14b28 <reboot_conf_set+0x24>
   14b46:	bf00      	nop
   14b48:	0002722c 	.word	0x0002722c
   14b4c:	00027238 	.word	0x00027238
   14b50:	20004f64 	.word	0x20004f64
   14b54:	20004f54 	.word	0x20004f54

00014b58 <reboot_conf_get>:
    if (argc == 1) {
   14b58:	2801      	cmp	r0, #1
   14b5a:	d11b      	bne.n	14b94 <reboot_conf_get+0x3c>
{
   14b5c:	b510      	push	{r4, lr}
        if (!strcmp(argv[0], "reboot_cnt")) {
   14b5e:	680c      	ldr	r4, [r1, #0]
   14b60:	490d      	ldr	r1, [pc, #52]	; (14b98 <reboot_conf_get+0x40>)
   14b62:	4620      	mov	r0, r4
   14b64:	f7fb fdb4 	bl	106d0 <strcmp>
   14b68:	b130      	cbz	r0, 14b78 <reboot_conf_get+0x20>
        } else if (!strcmp(argv[0], "written")) {
   14b6a:	490c      	ldr	r1, [pc, #48]	; (14b9c <reboot_conf_get+0x44>)
   14b6c:	4620      	mov	r0, r4
   14b6e:	f7fb fdaf 	bl	106d0 <strcmp>
   14b72:	b140      	cbz	r0, 14b86 <reboot_conf_get+0x2e>
    return NULL;
   14b74:	2000      	movs	r0, #0
}
   14b76:	bd10      	pop	{r4, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt,
   14b78:	230c      	movs	r3, #12
   14b7a:	4a09      	ldr	r2, [pc, #36]	; (14ba0 <reboot_conf_get+0x48>)
   14b7c:	4909      	ldr	r1, [pc, #36]	; (14ba4 <reboot_conf_get+0x4c>)
   14b7e:	2003      	movs	r0, #3
   14b80:	f7fe f9da 	bl	12f38 <conf_str_from_value>
   14b84:	e7f7      	b.n	14b76 <reboot_conf_get+0x1e>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   14b86:	230c      	movs	r3, #12
   14b88:	4a07      	ldr	r2, [pc, #28]	; (14ba8 <reboot_conf_get+0x50>)
   14b8a:	4908      	ldr	r1, [pc, #32]	; (14bac <reboot_conf_get+0x54>)
   14b8c:	200a      	movs	r0, #10
   14b8e:	f7fe f9d3 	bl	12f38 <conf_str_from_value>
   14b92:	e7f0      	b.n	14b76 <reboot_conf_get+0x1e>
    return NULL;
   14b94:	2000      	movs	r0, #0
}
   14b96:	4770      	bx	lr
   14b98:	0002722c 	.word	0x0002722c
   14b9c:	00027238 	.word	0x00027238
   14ba0:	20004f68 	.word	0x20004f68
   14ba4:	20004f64 	.word	0x20004f64
   14ba8:	20004f58 	.word	0x20004f58
   14bac:	20004f54 	.word	0x20004f54

00014bb0 <log_reboot_write>:
{
   14bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bb2:	b0d1      	sub	sp, #324	; 0x144
   14bb4:	4606      	mov	r6, r0
    rc = imgr_read_info(boot_current_slot, &ver, hash, NULL);
   14bb6:	2300      	movs	r3, #0
   14bb8:	aa46      	add	r2, sp, #280	; 0x118
   14bba:	a94e      	add	r1, sp, #312	; 0x138
   14bbc:	4839      	ldr	r0, [pc, #228]	; (14ca4 <log_reboot_write+0xf4>)
   14bbe:	6800      	ldr	r0, [r0, #0]
   14bc0:	f7fc fac2 	bl	11148 <imgr_read_info>
    if (rc != 0) {
   14bc4:	4607      	mov	r7, r0
   14bc6:	2800      	cmp	r0, #0
   14bc8:	d15f      	bne.n	14c8a <log_reboot_write+0xda>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14bca:	7833      	ldrb	r3, [r6, #0]
    off += snprintf(buf + off, sizeof buf - off,
   14bcc:	2b01      	cmp	r3, #1
   14bce:	d00f      	beq.n	14bf0 <log_reboot_write+0x40>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14bd0:	2b02      	cmp	r3, #2
   14bd2:	d025      	beq.n	14c20 <log_reboot_write+0x70>
   14bd4:	2b03      	cmp	r3, #3
   14bd6:	d025      	beq.n	14c24 <log_reboot_write+0x74>
   14bd8:	2b04      	cmp	r3, #4
   14bda:	d025      	beq.n	14c28 <log_reboot_write+0x78>
   14bdc:	2b05      	cmp	r3, #5
   14bde:	d025      	beq.n	14c2c <log_reboot_write+0x7c>
   14be0:	2b06      	cmp	r3, #6
   14be2:	d025      	beq.n	14c30 <log_reboot_write+0x80>
   14be4:	2b07      	cmp	r3, #7
   14be6:	d001      	beq.n	14bec <log_reboot_write+0x3c>
   14be8:	4b2f      	ldr	r3, [pc, #188]	; (14ca8 <log_reboot_write+0xf8>)
   14bea:	e002      	b.n	14bf2 <log_reboot_write+0x42>
   14bec:	4b2f      	ldr	r3, [pc, #188]	; (14cac <log_reboot_write+0xfc>)
   14bee:	e000      	b.n	14bf2 <log_reboot_write+0x42>
    off += snprintf(buf + off, sizeof buf - off,
   14bf0:	4b2f      	ldr	r3, [pc, #188]	; (14cb0 <log_reboot_write+0x100>)
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14bf2:	f89d 2138 	ldrb.w	r2, [sp, #312]	; 0x138
                    ver.iv_minor, ver.iv_revision,
   14bf6:	f89d 1139 	ldrb.w	r1, [sp, #313]	; 0x139
   14bfa:	f8bd 013a 	ldrh.w	r0, [sp, #314]	; 0x13a
    off += snprintf(buf + off, sizeof buf - off,
   14bfe:	9c4f      	ldr	r4, [sp, #316]	; 0x13c
   14c00:	9404      	str	r4, [sp, #16]
   14c02:	9003      	str	r0, [sp, #12]
   14c04:	9102      	str	r1, [sp, #8]
   14c06:	9201      	str	r2, [sp, #4]
   14c08:	4a2a      	ldr	r2, [pc, #168]	; (14cb4 <log_reboot_write+0x104>)
   14c0a:	8812      	ldrh	r2, [r2, #0]
   14c0c:	9200      	str	r2, [sp, #0]
   14c0e:	4a2a      	ldr	r2, [pc, #168]	; (14cb8 <log_reboot_write+0x108>)
   14c10:	f44f 7180 	mov.w	r1, #256	; 0x100
   14c14:	a806      	add	r0, sp, #24
   14c16:	f7fc f978 	bl	10f0a <snprintf>
   14c1a:	4604      	mov	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   14c1c:	463d      	mov	r5, r7
   14c1e:	e017      	b.n	14c50 <log_reboot_write+0xa0>
                    REBOOT_REASON_STR(info->reason), reboot_cnt, ver.iv_major,
   14c20:	4b26      	ldr	r3, [pc, #152]	; (14cbc <log_reboot_write+0x10c>)
   14c22:	e7e6      	b.n	14bf2 <log_reboot_write+0x42>
   14c24:	4b26      	ldr	r3, [pc, #152]	; (14cc0 <log_reboot_write+0x110>)
   14c26:	e7e4      	b.n	14bf2 <log_reboot_write+0x42>
   14c28:	4b26      	ldr	r3, [pc, #152]	; (14cc4 <log_reboot_write+0x114>)
   14c2a:	e7e2      	b.n	14bf2 <log_reboot_write+0x42>
   14c2c:	4b26      	ldr	r3, [pc, #152]	; (14cc8 <log_reboot_write+0x118>)
   14c2e:	e7e0      	b.n	14bf2 <log_reboot_write+0x42>
   14c30:	4b26      	ldr	r3, [pc, #152]	; (14ccc <log_reboot_write+0x11c>)
   14c32:	e7de      	b.n	14bf2 <log_reboot_write+0x42>
                        (unsigned int)hash[i]);
   14c34:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   14c38:	446b      	add	r3, sp
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   14c3a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   14c3e:	4a24      	ldr	r2, [pc, #144]	; (14cd0 <log_reboot_write+0x120>)
   14c40:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14c44:	a806      	add	r0, sp, #24
   14c46:	4420      	add	r0, r4
   14c48:	f7fc f95f 	bl	10f0a <snprintf>
   14c4c:	4404      	add	r4, r0
    for (i = 0; i < sizeof hash; i++) {
   14c4e:	3501      	adds	r5, #1
   14c50:	2d1f      	cmp	r5, #31
   14c52:	d9ef      	bls.n	14c34 <log_reboot_write+0x84>
    if (info->file != NULL) {
   14c54:	6873      	ldr	r3, [r6, #4]
   14c56:	b14b      	cbz	r3, 14c6c <log_reboot_write+0xbc>
        off += snprintf(buf + off, sizeof buf - off, ", die:%s:%d",
   14c58:	68b2      	ldr	r2, [r6, #8]
   14c5a:	9200      	str	r2, [sp, #0]
   14c5c:	4a1d      	ldr	r2, [pc, #116]	; (14cd4 <log_reboot_write+0x124>)
   14c5e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14c62:	a806      	add	r0, sp, #24
   14c64:	4420      	add	r0, r4
   14c66:	f7fc f950 	bl	10f0a <snprintf>
   14c6a:	4404      	add	r4, r0
    if (info->pc != 0) {
   14c6c:	68f3      	ldr	r3, [r6, #12]
   14c6e:	b97b      	cbnz	r3, 14c90 <log_reboot_write+0xe0>
    if (off > sizeof buf) {
   14c70:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   14c74:	d901      	bls.n	14c7a <log_reboot_write+0xca>
        off = sizeof buf;
   14c76:	f44f 7480 	mov.w	r4, #256	; 0x100
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_STRING,
   14c7a:	b2a4      	uxth	r4, r4
   14c7c:	9400      	str	r4, [sp, #0]
   14c7e:	ab06      	add	r3, sp, #24
   14c80:	2200      	movs	r2, #0
   14c82:	2104      	movs	r1, #4
   14c84:	2006      	movs	r0, #6
   14c86:	f00e fb1b 	bl	232c0 <modlog_append>
}
   14c8a:	4638      	mov	r0, r7
   14c8c:	b051      	add	sp, #324	; 0x144
   14c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off += snprintf(buf + off, sizeof buf - off, ", pc:0x%lx",
   14c90:	4a11      	ldr	r2, [pc, #68]	; (14cd8 <log_reboot_write+0x128>)
   14c92:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   14c96:	a806      	add	r0, sp, #24
   14c98:	4420      	add	r0, r4
   14c9a:	f7fc f936 	bl	10f0a <snprintf>
   14c9e:	4404      	add	r4, r0
   14ca0:	e7e6      	b.n	14c70 <log_reboot_write+0xc0>
   14ca2:	bf00      	nop
   14ca4:	200053ac 	.word	0x200053ac
   14ca8:	0002727c 	.word	0x0002727c
   14cac:	00027284 	.word	0x00027284
   14cb0:	00027240 	.word	0x00027240
   14cb4:	20004f64 	.word	0x20004f64
   14cb8:	00027294 	.word	0x00027294
   14cbc:	00027254 	.word	0x00027254
   14cc0:	00027260 	.word	0x00027260
   14cc4:	00027268 	.word	0x00027268
   14cc8:	00027270 	.word	0x00027270
   14ccc:	00027248 	.word	0x00027248
   14cd0:	000272bc 	.word	0x000272bc
   14cd4:	000272c4 	.word	0x000272c4
   14cd8:	000272d0 	.word	0x000272d0

00014cdc <log_reboot_init_console>:
{
   14cdc:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   14cde:	f7ff fd6f 	bl	147c0 <log_console_get>
   14ce2:	4601      	mov	r1, r0
   14ce4:	2300      	movs	r3, #0
   14ce6:	461a      	mov	r2, r3
   14ce8:	2006      	movs	r0, #6
   14cea:	f00e facf 	bl	2328c <modlog_register>
}
   14cee:	bd08      	pop	{r3, pc}

00014cf0 <log_reboot>:
{
   14cf0:	b510      	push	{r4, lr}
    if (log_reboot_written) {
   14cf2:	4b0a      	ldr	r3, [pc, #40]	; (14d1c <log_reboot+0x2c>)
   14cf4:	f993 3000 	ldrsb.w	r3, [r3]
   14cf8:	b113      	cbz	r3, 14d00 <log_reboot+0x10>
        return 0;
   14cfa:	2400      	movs	r4, #0
}
   14cfc:	4620      	mov	r0, r4
   14cfe:	bd10      	pop	{r4, pc}
    rc = log_reboot_write(info);
   14d00:	f7ff ff56 	bl	14bb0 <log_reboot_write>
    if (rc != 0) {
   14d04:	4604      	mov	r4, r0
   14d06:	2800      	cmp	r0, #0
   14d08:	d1f8      	bne.n	14cfc <log_reboot+0xc>
    log_reboot_written = 1;
   14d0a:	4b04      	ldr	r3, [pc, #16]	; (14d1c <log_reboot+0x2c>)
   14d0c:	2201      	movs	r2, #1
   14d0e:	701a      	strb	r2, [r3, #0]
    conf_save_one("reboot/written", "1");
   14d10:	4903      	ldr	r1, [pc, #12]	; (14d20 <log_reboot+0x30>)
   14d12:	4804      	ldr	r0, [pc, #16]	; (14d24 <log_reboot+0x34>)
   14d14:	f7fe fac0 	bl	13298 <conf_save_one>
    return 0;
   14d18:	e7f0      	b.n	14cfc <log_reboot+0xc>
   14d1a:	bf00      	nop
   14d1c:	20004f54 	.word	0x20004f54
   14d20:	000272dc 	.word	0x000272dc
   14d24:	0002721c 	.word	0x0002721c

00014d28 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   14d28:	b510      	push	{r4, lr}
   14d2a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14d2c:	4b10      	ldr	r3, [pc, #64]	; (14d70 <log_reboot_pkg_init+0x48>)
   14d2e:	781b      	ldrb	r3, [r3, #0]
   14d30:	b1c3      	cbz	r3, 14d64 <log_reboot_pkg_init+0x3c>

    rc = conf_register(&reboot_conf_handler);
   14d32:	4810      	ldr	r0, [pc, #64]	; (14d74 <log_reboot_pkg_init+0x4c>)
   14d34:	f7fe f856 	bl	12de4 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d38:	b138      	cbz	r0, 14d4a <log_reboot_pkg_init+0x22>
   14d3a:	2000      	movs	r0, #0
   14d3c:	9000      	str	r0, [sp, #0]
   14d3e:	4b0e      	ldr	r3, [pc, #56]	; (14d78 <log_reboot_pkg_init+0x50>)
   14d40:	681c      	ldr	r4, [r3, #0]
   14d42:	4603      	mov	r3, r0
   14d44:	4602      	mov	r2, r0
   14d46:	4601      	mov	r1, r0
   14d48:	47a0      	blx	r4
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   14d4a:	f7ff ffc7 	bl	14cdc <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d4e:	b138      	cbz	r0, 14d60 <log_reboot_pkg_init+0x38>
   14d50:	2000      	movs	r0, #0
   14d52:	9000      	str	r0, [sp, #0]
   14d54:	4b08      	ldr	r3, [pc, #32]	; (14d78 <log_reboot_pkg_init+0x50>)
   14d56:	681c      	ldr	r4, [r3, #0]
   14d58:	4603      	mov	r3, r0
   14d5a:	4602      	mov	r2, r0
   14d5c:	4601      	mov	r1, r0
   14d5e:	47a0      	blx	r4
#endif
}
   14d60:	b002      	add	sp, #8
   14d62:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   14d64:	461a      	mov	r2, r3
   14d66:	4619      	mov	r1, r3
   14d68:	4618      	mov	r0, r3
   14d6a:	f7f4 fa2b 	bl	91c4 <__assert_func>
   14d6e:	bf00      	nop
   14d70:	2000538c 	.word	0x2000538c
   14d74:	200002d4 	.word	0x200002d4
   14d78:	20000308 	.word	0x20000308

00014d7c <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
   14d7c:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
   14d7e:	4b09      	ldr	r3, [pc, #36]	; (14da4 <get_prompt+0x28>)
   14d80:	681b      	ldr	r3, [r3, #0]
   14d82:	b113      	cbz	r3, 14d8a <get_prompt+0xe>

        str = app_prompt_handler();
   14d84:	4798      	blx	r3
        if (str) {
   14d86:	b100      	cbz	r0, 14d8a <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
   14d88:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
   14d8a:	4b07      	ldr	r3, [pc, #28]	; (14da8 <get_prompt+0x2c>)
   14d8c:	681b      	ldr	r3, [r3, #0]
   14d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14d92:	d003      	beq.n	14d9c <get_prompt+0x20>
        return shell_modules[default_module].name;
   14d94:	4a05      	ldr	r2, [pc, #20]	; (14dac <get_prompt+0x30>)
   14d96:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   14d9a:	e7f5      	b.n	14d88 <get_prompt+0xc>
    return prompt;
   14d9c:	4b04      	ldr	r3, [pc, #16]	; (14db0 <get_prompt+0x34>)
   14d9e:	6818      	ldr	r0, [r3, #0]
   14da0:	e7f2      	b.n	14d88 <get_prompt+0xc>
   14da2:	bf00      	nop
   14da4:	20004f84 	.word	0x20004f84
   14da8:	200002ec 	.word	0x200002ec
   14dac:	2000530c 	.word	0x2000530c
   14db0:	200052e4 	.word	0x200052e4

00014db4 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   14db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14db6:	4606      	mov	r6, r0
   14db8:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   14dba:	4914      	ldr	r1, [pc, #80]	; (14e0c <print_module_commands+0x58>)
   14dbc:	4628      	mov	r0, r5
   14dbe:	f7fd fe7f 	bl	12ac0 <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14dc2:	2400      	movs	r4, #0
   14dc4:	e004      	b.n	14dd0 <print_module_commands+0x1c>
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
   14dc6:	4912      	ldr	r1, [pc, #72]	; (14e10 <print_module_commands+0x5c>)
   14dc8:	4628      	mov	r0, r5
   14dca:	f7fd fe79 	bl	12ac0 <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14dce:	3401      	adds	r4, #1
   14dd0:	4b10      	ldr	r3, [pc, #64]	; (14e14 <print_module_commands+0x60>)
   14dd2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   14dd6:	685b      	ldr	r3, [r3, #4]
   14dd8:	0127      	lsls	r7, r4, #4
   14dda:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   14dde:	689a      	ldr	r2, [r3, #8]
   14de0:	b19a      	cbz	r2, 14e0a <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   14de2:	490d      	ldr	r1, [pc, #52]	; (14e18 <print_module_commands+0x64>)
   14de4:	4628      	mov	r0, r5
   14de6:	f7fd fe6b 	bl	12ac0 <streamer_printf>
        if (shell_module->commands[i].help &&
   14dea:	4b0a      	ldr	r3, [pc, #40]	; (14e14 <print_module_commands+0x60>)
   14dec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   14df0:	685b      	ldr	r3, [r3, #4]
   14df2:	443b      	add	r3, r7
   14df4:	68db      	ldr	r3, [r3, #12]
   14df6:	2b00      	cmp	r3, #0
   14df8:	d0e5      	beq.n	14dc6 <print_module_commands+0x12>
            shell_module->commands[i].help->summary) {
   14dfa:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   14dfc:	2a00      	cmp	r2, #0
   14dfe:	d0e2      	beq.n	14dc6 <print_module_commands+0x12>
            streamer_printf(streamer, "%s",
   14e00:	4906      	ldr	r1, [pc, #24]	; (14e1c <print_module_commands+0x68>)
   14e02:	4628      	mov	r0, r5
   14e04:	f7fd fe5c 	bl	12ac0 <streamer_printf>
   14e08:	e7dd      	b.n	14dc6 <print_module_commands+0x12>
    }
}
   14e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e0c:	000272e8 	.word	0x000272e8
   14e10:	000273a4 	.word	0x000273a4
   14e14:	2000530c 	.word	0x2000530c
   14e18:	000272f0 	.word	0x000272f0
   14e1c:	000267e8 	.word	0x000267e8

00014e20 <print_modules>:
{
   14e20:	b538      	push	{r3, r4, r5, lr}
   14e22:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   14e24:	2400      	movs	r4, #0
   14e26:	e007      	b.n	14e38 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   14e28:	4b06      	ldr	r3, [pc, #24]	; (14e44 <print_modules+0x24>)
   14e2a:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   14e2e:	4906      	ldr	r1, [pc, #24]	; (14e48 <print_modules+0x28>)
   14e30:	4628      	mov	r0, r5
   14e32:	f7fd fe45 	bl	12ac0 <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   14e36:	3401      	adds	r4, #1
   14e38:	4b04      	ldr	r3, [pc, #16]	; (14e4c <print_modules+0x2c>)
   14e3a:	681b      	ldr	r3, [r3, #0]
   14e3c:	429c      	cmp	r4, r3
   14e3e:	d3f3      	bcc.n	14e28 <print_modules+0x8>
}
   14e40:	bd38      	pop	{r3, r4, r5, pc}
   14e42:	bf00      	nop
   14e44:	2000530c 	.word	0x2000530c
   14e48:	00026e48 	.word	0x00026e48
   14e4c:	200052e0 	.word	0x200052e0

00014e50 <print_command_params>:
{
   14e50:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   14e52:	4b0e      	ldr	r3, [pc, #56]	; (14e8c <print_command_params+0x3c>)
   14e54:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   14e58:	685d      	ldr	r5, [r3, #4]
   14e5a:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   14e5e:	68eb      	ldr	r3, [r5, #12]
   14e60:	b19b      	cbz	r3, 14e8a <print_command_params+0x3a>
   14e62:	4616      	mov	r6, r2
   14e64:	689b      	ldr	r3, [r3, #8]
   14e66:	b183      	cbz	r3, 14e8a <print_command_params+0x3a>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   14e68:	2400      	movs	r4, #0
   14e6a:	e006      	b.n	14e7a <print_command_params+0x2a>
		streamer_printf(streamer, "%-30s%s\n",
   14e6c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   14e70:	4907      	ldr	r1, [pc, #28]	; (14e90 <print_command_params+0x40>)
   14e72:	4630      	mov	r0, r6
   14e74:	f7fd fe24 	bl	12ac0 <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   14e78:	3401      	adds	r4, #1
   14e7a:	68eb      	ldr	r3, [r5, #12]
   14e7c:	689b      	ldr	r3, [r3, #8]
   14e7e:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
   14e82:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   14e86:	2a00      	cmp	r2, #0
   14e88:	d1f0      	bne.n	14e6c <print_command_params+0x1c>
}
   14e8a:	bd70      	pop	{r4, r5, r6, pc}
   14e8c:	2000530c 	.word	0x2000530c
   14e90:	000272f8 	.word	0x000272f8

00014e94 <get_destination_module>:
{
   14e94:	b570      	push	{r4, r5, r6, lr}
   14e96:	4606      	mov	r6, r0
   14e98:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   14e9a:	2400      	movs	r4, #0
   14e9c:	e007      	b.n	14eae <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
   14e9e:	4b0e      	ldr	r3, [pc, #56]	; (14ed8 <get_destination_module+0x44>)
   14ea0:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   14ea4:	4630      	mov	r0, r6
   14ea6:	f7fb fc13 	bl	106d0 <strcmp>
   14eaa:	b190      	cbz	r0, 14ed2 <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
   14eac:	3401      	adds	r4, #1
   14eae:	4b0b      	ldr	r3, [pc, #44]	; (14edc <get_destination_module+0x48>)
   14eb0:	681b      	ldr	r3, [r3, #0]
   14eb2:	429c      	cmp	r4, r3
   14eb4:	d20b      	bcs.n	14ece <get_destination_module+0x3a>
        if (len < 0) {
   14eb6:	2d00      	cmp	r5, #0
   14eb8:	dbf1      	blt.n	14e9e <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   14eba:	462a      	mov	r2, r5
   14ebc:	4b06      	ldr	r3, [pc, #24]	; (14ed8 <get_destination_module+0x44>)
   14ebe:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   14ec2:	4630      	mov	r0, r6
   14ec4:	f00d f861 	bl	21f8a <strncmp>
   14ec8:	2800      	cmp	r0, #0
   14eca:	d1ef      	bne.n	14eac <get_destination_module+0x18>
   14ecc:	e001      	b.n	14ed2 <get_destination_module+0x3e>
    return -1;
   14ece:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   14ed2:	4620      	mov	r0, r4
   14ed4:	bd70      	pop	{r4, r5, r6, pc}
   14ed6:	bf00      	nop
   14ed8:	2000530c 	.word	0x2000530c
   14edc:	200052e0 	.word	0x200052e0

00014ee0 <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   14ee0:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   14ee2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14ee6:	f7ff ffd5 	bl	14e94 <get_destination_module>

    if (module == -1) {
   14eea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14eee:	d002      	beq.n	14ef6 <set_default_module+0x16>
        return -1;
    }

    default_module = module;
   14ef0:	4b01      	ldr	r3, [pc, #4]	; (14ef8 <set_default_module+0x18>)
   14ef2:	6018      	str	r0, [r3, #0]

    return 0;
   14ef4:	2000      	movs	r0, #0
}
   14ef6:	bd08      	pop	{r3, pc}
   14ef8:	200002ec 	.word	0x200002ec

00014efc <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
   14efc:	b508      	push	{r3, lr}
    if (argc == 1) {
   14efe:	2901      	cmp	r1, #1
   14f00:	d105      	bne.n	14f0e <select_module+0x12>
        default_module = -1;
   14f02:	4b05      	ldr	r3, [pc, #20]	; (14f18 <select_module+0x1c>)
   14f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14f08:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   14f0a:	2000      	movs	r0, #0
   14f0c:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   14f0e:	6850      	ldr	r0, [r2, #4]
   14f10:	f7ff ffe6 	bl	14ee0 <set_default_module>
   14f14:	e7f9      	b.n	14f0a <select_module+0xe>
   14f16:	bf00      	nop
   14f18:	200002ec 	.word	0x200002ec

00014f1c <get_command_and_module>:
{
   14f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f1e:	4617      	mov	r7, r2
    *module = -1;
   14f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f24:	600b      	str	r3, [r1, #0]
    if (!argv[0]) {
   14f26:	6806      	ldr	r6, [r0, #0]
   14f28:	b156      	cbz	r6, 14f40 <get_command_and_module+0x24>
   14f2a:	4604      	mov	r4, r0
   14f2c:	460d      	mov	r5, r1
    if (default_module == -1) {
   14f2e:	4b15      	ldr	r3, [pc, #84]	; (14f84 <get_command_and_module+0x68>)
   14f30:	681b      	ldr	r3, [r3, #0]
   14f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14f36:	d008      	beq.n	14f4a <get_command_and_module+0x2e>
    *module = default_module;
   14f38:	600b      	str	r3, [r1, #0]
    return argv[0];
   14f3a:	6806      	ldr	r6, [r0, #0]
}
   14f3c:	4630      	mov	r0, r6
   14f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
   14f40:	4911      	ldr	r1, [pc, #68]	; (14f88 <get_command_and_module+0x6c>)
   14f42:	4610      	mov	r0, r2
   14f44:	f7fd fdbc 	bl	12ac0 <streamer_printf>
        return NULL;
   14f48:	e7f8      	b.n	14f3c <get_command_and_module+0x20>
        if (!argv[1] || argv[1][0] == '\0') {
   14f4a:	6843      	ldr	r3, [r0, #4]
   14f4c:	b163      	cbz	r3, 14f68 <get_command_and_module+0x4c>
   14f4e:	781b      	ldrb	r3, [r3, #0]
   14f50:	b153      	cbz	r3, 14f68 <get_command_and_module+0x4c>
        *module = get_destination_module(argv[0], -1);
   14f52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14f56:	4630      	mov	r0, r6
   14f58:	f7ff ff9c 	bl	14e94 <get_destination_module>
   14f5c:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   14f5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14f62:	d008      	beq.n	14f76 <get_command_and_module+0x5a>
        return argv[1];
   14f64:	6866      	ldr	r6, [r4, #4]
   14f66:	e7e9      	b.n	14f3c <get_command_and_module+0x20>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   14f68:	4632      	mov	r2, r6
   14f6a:	4908      	ldr	r1, [pc, #32]	; (14f8c <get_command_and_module+0x70>)
   14f6c:	4638      	mov	r0, r7
   14f6e:	f7fd fda7 	bl	12ac0 <streamer_printf>
            return NULL;
   14f72:	2600      	movs	r6, #0
   14f74:	e7e2      	b.n	14f3c <get_command_and_module+0x20>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   14f76:	6822      	ldr	r2, [r4, #0]
   14f78:	4905      	ldr	r1, [pc, #20]	; (14f90 <get_command_and_module+0x74>)
   14f7a:	4638      	mov	r0, r7
   14f7c:	f7fd fda0 	bl	12ac0 <streamer_printf>
            return NULL;
   14f80:	2600      	movs	r6, #0
   14f82:	e7db      	b.n	14f3c <get_command_and_module+0x20>
   14f84:	200002ec 	.word	0x200002ec
   14f88:	00027304 	.word	0x00027304
   14f8c:	0002731c 	.word	0x0002731c
   14f90:	00027338 	.word	0x00027338

00014f94 <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
   14f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f96:	b083      	sub	sp, #12
   14f98:	4616      	mov	r6, r2
    const char *first_string = argv[0];
   14f9a:	680d      	ldr	r5, [r1, #0]
    int module = -1;
   14f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fa0:	9301      	str	r3, [sp, #4]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
   14fa2:	b31d      	cbz	r5, 14fec <shell_find_cmd+0x58>
   14fa4:	4607      	mov	r7, r0
   14fa6:	460c      	mov	r4, r1
   14fa8:	782b      	ldrb	r3, [r5, #0]
   14faa:	b1fb      	cbz	r3, 14fec <shell_find_cmd+0x58>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (!strcmp(first_string, "help")) {
   14fac:	4922      	ldr	r1, [pc, #136]	; (15038 <shell_find_cmd+0xa4>)
   14fae:	4628      	mov	r0, r5
   14fb0:	f7fb fb8e 	bl	106d0 <strcmp>
   14fb4:	2800      	cmp	r0, #0
   14fb6:	d035      	beq.n	15024 <shell_find_cmd+0x90>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
   14fb8:	4920      	ldr	r1, [pc, #128]	; (1503c <shell_find_cmd+0xa8>)
   14fba:	4628      	mov	r0, r5
   14fbc:	f7fb fb88 	bl	106d0 <strcmp>
   14fc0:	2800      	cmp	r0, #0
   14fc2:	d033      	beq.n	1502c <shell_find_cmd+0x98>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (default_module == -1)) {
   14fc4:	2f01      	cmp	r7, #1
   14fc6:	d104      	bne.n	14fd2 <shell_find_cmd+0x3e>
   14fc8:	4b1d      	ldr	r3, [pc, #116]	; (15040 <shell_find_cmd+0xac>)
   14fca:	681b      	ldr	r3, [r3, #0]
   14fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14fd0:	d012      	beq.n	14ff8 <shell_find_cmd+0x64>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
   14fd2:	4632      	mov	r2, r6
   14fd4:	a901      	add	r1, sp, #4
   14fd6:	4620      	mov	r0, r4
   14fd8:	f7ff ffa0 	bl	14f1c <get_command_and_module>
   14fdc:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
   14fde:	9f01      	ldr	r7, [sp, #4]
   14fe0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   14fe4:	d024      	beq.n	15030 <shell_find_cmd+0x9c>
   14fe6:	b328      	cbz	r0, 15034 <shell_find_cmd+0xa0>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   14fe8:	2500      	movs	r5, #0
   14fea:	e00c      	b.n	15006 <shell_find_cmd+0x72>
        streamer_printf(streamer, "Illegal parameter\n");
   14fec:	4915      	ldr	r1, [pc, #84]	; (15044 <shell_find_cmd+0xb0>)
   14fee:	4630      	mov	r0, r6
   14ff0:	f7fd fd66 	bl	12ac0 <streamer_printf>
        return NULL;
   14ff4:	2100      	movs	r1, #0
   14ff6:	e016      	b.n	15026 <shell_find_cmd+0x92>
        streamer_printf(streamer, "Missing parameter\n");
   14ff8:	4913      	ldr	r1, [pc, #76]	; (15048 <shell_find_cmd+0xb4>)
   14ffa:	4630      	mov	r0, r6
   14ffc:	f7fd fd60 	bl	12ac0 <streamer_printf>
        return NULL;
   15000:	2100      	movs	r1, #0
   15002:	e010      	b.n	15026 <shell_find_cmd+0x92>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   15004:	3501      	adds	r5, #1
   15006:	4b11      	ldr	r3, [pc, #68]	; (1504c <shell_find_cmd+0xb8>)
   15008:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1500c:	685c      	ldr	r4, [r3, #4]
   1500e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   15012:	68a1      	ldr	r1, [r4, #8]
   15014:	b139      	cbz	r1, 15026 <shell_find_cmd+0x92>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   15016:	4630      	mov	r0, r6
   15018:	f7fb fb5a 	bl	106d0 <strcmp>
   1501c:	2800      	cmp	r0, #0
   1501e:	d1f1      	bne.n	15004 <shell_find_cmd+0x70>
            return &shell_module->commands[i];
   15020:	4621      	mov	r1, r4
   15022:	e000      	b.n	15026 <shell_find_cmd+0x92>
        return &shell_cmd_help;
   15024:	490a      	ldr	r1, [pc, #40]	; (15050 <shell_find_cmd+0xbc>)
        }
    }

    return NULL;
}
   15026:	4608      	mov	r0, r1
   15028:	b003      	add	sp, #12
   1502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return &shell_cmd_select_module;
   1502c:	4909      	ldr	r1, [pc, #36]	; (15054 <shell_find_cmd+0xc0>)
   1502e:	e7fa      	b.n	15026 <shell_find_cmd+0x92>
        return NULL;
   15030:	2100      	movs	r1, #0
   15032:	e7f8      	b.n	15026 <shell_find_cmd+0x92>
   15034:	4601      	mov	r1, r0
   15036:	e7f6      	b.n	15026 <shell_find_cmd+0x92>
   15038:	00027360 	.word	0x00027360
   1503c:	00027368 	.word	0x00027368
   15040:	200002ec 	.word	0x200002ec
   15044:	0002734c 	.word	0x0002734c
   15048:	00027370 	.word	0x00027370
   1504c:	2000530c 	.word	0x2000530c
   15050:	000274e4 	.word	0x000274e4
   15054:	000274f4 	.word	0x000274f4

00015058 <show_cmd_help>:
{
   15058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1505c:	b083      	sub	sp, #12
   1505e:	4681      	mov	r9, r0
   15060:	4688      	mov	r8, r1
    int module = -1;
   15062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15066:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
   15068:	460a      	mov	r2, r1
   1506a:	a901      	add	r1, sp, #4
   1506c:	f7ff ff56 	bl	14f1c <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
   15070:	9f01      	ldr	r7, [sp, #4]
   15072:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   15076:	d04d      	beq.n	15114 <show_cmd_help+0xbc>
   15078:	4606      	mov	r6, r0
   1507a:	2800      	cmp	r0, #0
   1507c:	d04a      	beq.n	15114 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   1507e:	2500      	movs	r5, #0
   15080:	e009      	b.n	15096 <show_cmd_help+0x3e>
                               !cmd->help->usage &&
   15082:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
   15084:	b9d9      	cbnz	r1, 150be <show_cmd_help+0x66>
                               !cmd->help->params)) {
   15086:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
   15088:	b9cb      	cbnz	r3, 150be <show_cmd_help+0x66>
                streamer_printf(streamer, "(no help available)\n");
   1508a:	4924      	ldr	r1, [pc, #144]	; (1511c <show_cmd_help+0xc4>)
   1508c:	4640      	mov	r0, r8
   1508e:	f7fd fd17 	bl	12ac0 <streamer_printf>
                return 0;
   15092:	e03f      	b.n	15114 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   15094:	3501      	adds	r5, #1
   15096:	4b22      	ldr	r3, [pc, #136]	; (15120 <show_cmd_help+0xc8>)
   15098:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1509c:	685c      	ldr	r4, [r3, #4]
   1509e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   150a2:	68a1      	ldr	r1, [r4, #8]
   150a4:	2900      	cmp	r1, #0
   150a6:	d02f      	beq.n	15108 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
   150a8:	4630      	mov	r0, r6
   150aa:	f7fb fb11 	bl	106d0 <strcmp>
   150ae:	2800      	cmp	r0, #0
   150b0:	d1f0      	bne.n	15094 <show_cmd_help+0x3c>
            if (!cmd->help || (!cmd->help->summary &&
   150b2:	68e3      	ldr	r3, [r4, #12]
   150b4:	2b00      	cmp	r3, #0
   150b6:	d0e8      	beq.n	1508a <show_cmd_help+0x32>
   150b8:	681a      	ldr	r2, [r3, #0]
   150ba:	2a00      	cmp	r2, #0
   150bc:	d0e1      	beq.n	15082 <show_cmd_help+0x2a>
            if (cmd->help->summary) {
   150be:	b14a      	cbz	r2, 150d4 <show_cmd_help+0x7c>
                streamer_printf(streamer, "Summary:\n");
   150c0:	4918      	ldr	r1, [pc, #96]	; (15124 <show_cmd_help+0xcc>)
   150c2:	4640      	mov	r0, r8
   150c4:	f7fd fcfc 	bl	12ac0 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   150c8:	68e3      	ldr	r3, [r4, #12]
   150ca:	681a      	ldr	r2, [r3, #0]
   150cc:	4916      	ldr	r1, [pc, #88]	; (15128 <show_cmd_help+0xd0>)
   150ce:	4640      	mov	r0, r8
   150d0:	f7fd fcf6 	bl	12ac0 <streamer_printf>
            if (cmd->help->usage) {
   150d4:	68e3      	ldr	r3, [r4, #12]
   150d6:	685b      	ldr	r3, [r3, #4]
   150d8:	b14b      	cbz	r3, 150ee <show_cmd_help+0x96>
                streamer_printf(streamer, "Usage:\n");
   150da:	4914      	ldr	r1, [pc, #80]	; (1512c <show_cmd_help+0xd4>)
   150dc:	4640      	mov	r0, r8
   150de:	f7fd fcef 	bl	12ac0 <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   150e2:	68e3      	ldr	r3, [r4, #12]
   150e4:	685a      	ldr	r2, [r3, #4]
   150e6:	4910      	ldr	r1, [pc, #64]	; (15128 <show_cmd_help+0xd0>)
   150e8:	4640      	mov	r0, r8
   150ea:	f7fd fce9 	bl	12ac0 <streamer_printf>
            if (cmd->help->params) {
   150ee:	68e3      	ldr	r3, [r4, #12]
   150f0:	689b      	ldr	r3, [r3, #8]
   150f2:	b17b      	cbz	r3, 15114 <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
   150f4:	490e      	ldr	r1, [pc, #56]	; (15130 <show_cmd_help+0xd8>)
   150f6:	4640      	mov	r0, r8
   150f8:	f7fd fce2 	bl	12ac0 <streamer_printf>
                print_command_params(module, i, streamer);
   150fc:	4642      	mov	r2, r8
   150fe:	4629      	mov	r1, r5
   15100:	9801      	ldr	r0, [sp, #4]
   15102:	f7ff fea5 	bl	14e50 <print_command_params>
            return 0;
   15106:	e005      	b.n	15114 <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   15108:	f8d9 2000 	ldr.w	r2, [r9]
   1510c:	4909      	ldr	r1, [pc, #36]	; (15134 <show_cmd_help+0xdc>)
   1510e:	4640      	mov	r0, r8
   15110:	f7fd fcd6 	bl	12ac0 <streamer_printf>
}
   15114:	2000      	movs	r0, #0
   15116:	b003      	add	sp, #12
   15118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1511c:	00027384 	.word	0x00027384
   15120:	2000530c 	.word	0x2000530c
   15124:	0002739c 	.word	0x0002739c
   15128:	00026e48 	.word	0x00026e48
   1512c:	000273a8 	.word	0x000273a8
   15130:	000273b0 	.word	0x000273b0
   15134:	0002731c 	.word	0x0002731c

00015138 <show_help>:
{
   15138:	b538      	push	{r3, r4, r5, lr}
   1513a:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   1513c:	2902      	cmp	r1, #2
   1513e:	dc1a      	bgt.n	15176 <show_help+0x3e>
   15140:	4b1b      	ldr	r3, [pc, #108]	; (151b0 <show_help+0x78>)
   15142:	6818      	ldr	r0, [r3, #0]
   15144:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15148:	d001      	beq.n	1514e <show_help+0x16>
   1514a:	2902      	cmp	r1, #2
   1514c:	d013      	beq.n	15176 <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   1514e:	2902      	cmp	r1, #2
   15150:	d016      	beq.n	15180 <show_help+0x48>
   15152:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15156:	d001      	beq.n	1515c <show_help+0x24>
   15158:	2901      	cmp	r1, #1
   1515a:	d011      	beq.n	15180 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
   1515c:	4915      	ldr	r1, [pc, #84]	; (151b4 <show_help+0x7c>)
   1515e:	4620      	mov	r0, r4
   15160:	f7fd fcae 	bl	12ac0 <streamer_printf>
        print_modules(streamer);
   15164:	4620      	mov	r0, r4
   15166:	f7ff fe5b 	bl	14e20 <print_modules>
        streamer_printf(streamer,
   1516a:	4913      	ldr	r1, [pc, #76]	; (151b8 <show_help+0x80>)
   1516c:	4620      	mov	r0, r4
   1516e:	f7fd fca7 	bl	12ac0 <streamer_printf>
    return 0;
   15172:	2000      	movs	r0, #0
   15174:	e014      	b.n	151a0 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
   15176:	4621      	mov	r1, r4
   15178:	1d10      	adds	r0, r2, #4
   1517a:	f7ff ff6d 	bl	15058 <show_cmd_help>
   1517e:	e00f      	b.n	151a0 <show_help+0x68>
        if (default_module == -1) {
   15180:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15184:	d108      	bne.n	15198 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   15186:	6855      	ldr	r5, [r2, #4]
   15188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1518c:	4628      	mov	r0, r5
   1518e:	f7ff fe81 	bl	14e94 <get_destination_module>
            if (module == -1) {
   15192:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15196:	d004      	beq.n	151a2 <show_help+0x6a>
        print_module_commands(module, streamer);
   15198:	4621      	mov	r1, r4
   1519a:	f7ff fe0b 	bl	14db4 <print_module_commands>
    return 0;
   1519e:	2000      	movs	r0, #0
}
   151a0:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   151a2:	462a      	mov	r2, r5
   151a4:	4905      	ldr	r1, [pc, #20]	; (151bc <show_help+0x84>)
   151a6:	4620      	mov	r0, r4
   151a8:	f7fd fc8a 	bl	12ac0 <streamer_printf>
                return 0;
   151ac:	2000      	movs	r0, #0
   151ae:	e7f7      	b.n	151a0 <show_help+0x68>
   151b0:	200002ec 	.word	0x200002ec
   151b4:	000273c0 	.word	0x000273c0
   151b8:	000273d4 	.word	0x000273d4
   151bc:	00027338 	.word	0x00027338

000151c0 <print_prompt>:
{
   151c0:	b508      	push	{r3, lr}
    console_printf("%s%s", get_prompt(), MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   151c2:	f7ff fddb 	bl	14d7c <get_prompt>
   151c6:	4601      	mov	r1, r0
   151c8:	4a02      	ldr	r2, [pc, #8]	; (151d4 <print_prompt+0x14>)
   151ca:	4803      	ldr	r0, [pc, #12]	; (151d8 <print_prompt+0x18>)
   151cc:	f7fe fe1e 	bl	13e0c <console_printf>
}
   151d0:	bd08      	pop	{r3, pc}
   151d2:	bf00      	nop
   151d4:	00027408 	.word	0x00027408
   151d8:	0002740c 	.word	0x0002740c

000151dc <print_prompt_if_console>:
{
   151dc:	b510      	push	{r4, lr}
   151de:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   151e0:	f002 f8fe 	bl	173e0 <streamer_console_get>
   151e4:	4284      	cmp	r4, r0
   151e6:	d000      	beq.n	151ea <print_prompt_if_console+0xe>
}
   151e8:	bd10      	pop	{r4, pc}
        print_prompt();
   151ea:	f7ff ffe9 	bl	151c0 <print_prompt>
}
   151ee:	e7fb      	b.n	151e8 <print_prompt_if_console+0xc>

000151f0 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   151f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151f4:	b083      	sub	sp, #12
   151f6:	4681      	mov	r9, r0
   151f8:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   151fa:	4615      	mov	r5, r2
   151fc:	b132      	cbz	r2, 1520c <complete_module+0x1c>
   151fe:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   15200:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   15204:	f04f 0800 	mov.w	r8, #0
        print_prompt();
        console_printf("%s", line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   15208:	4646      	mov	r6, r8
   1520a:	e02b      	b.n	15264 <complete_module+0x74>
        console_printf("\n");
   1520c:	4837      	ldr	r0, [pc, #220]	; (152ec <complete_module+0xfc>)
   1520e:	f7fe fdfd 	bl	13e0c <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   15212:	e006      	b.n	15222 <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   15214:	4b36      	ldr	r3, [pc, #216]	; (152f0 <complete_module+0x100>)
   15216:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   1521a:	4836      	ldr	r0, [pc, #216]	; (152f4 <complete_module+0x104>)
   1521c:	f7fe fdf6 	bl	13e0c <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   15220:	3501      	adds	r5, #1
   15222:	4b35      	ldr	r3, [pc, #212]	; (152f8 <complete_module+0x108>)
   15224:	681b      	ldr	r3, [r3, #0]
   15226:	429d      	cmp	r5, r3
   15228:	d3f4      	bcc.n	15214 <complete_module+0x24>
        print_prompt();
   1522a:	f7ff ffc9 	bl	151c0 <print_prompt>
        console_printf("%s", line);
   1522e:	4649      	mov	r1, r9
   15230:	4832      	ldr	r0, [pc, #200]	; (152fc <complete_module+0x10c>)
   15232:	f7fe fdeb 	bl	13e0c <console_printf>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   15236:	b003      	add	sp, #12
   15238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_printf("\n");
   1523c:	482b      	ldr	r0, [pc, #172]	; (152ec <complete_module+0xfc>)
   1523e:	f7fe fde5 	bl	13e0c <console_printf>
            console_printf("%s\n", first_match);
   15242:	4641      	mov	r1, r8
   15244:	482b      	ldr	r0, [pc, #172]	; (152f4 <complete_module+0x104>)
   15246:	f7fe fde1 	bl	13e0c <console_printf>
            common_chars = strlen(first_match);
   1524a:	4640      	mov	r0, r8
   1524c:	f7fb fa4c 	bl	106e8 <strlen>
   15250:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   15252:	e01b      	b.n	1528c <complete_module+0x9c>
        console_printf("%s\n", shell_modules[i].name);
   15254:	4b26      	ldr	r3, [pc, #152]	; (152f0 <complete_module+0x100>)
   15256:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   1525a:	4826      	ldr	r0, [pc, #152]	; (152f4 <complete_module+0x104>)
   1525c:	f7fe fdd6 	bl	13e0c <console_printf>
        common_chars = j;
   15260:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   15262:	3601      	adds	r6, #1
   15264:	4b24      	ldr	r3, [pc, #144]	; (152f8 <complete_module+0x108>)
   15266:	681b      	ldr	r3, [r3, #0]
   15268:	429e      	cmp	r6, r3
   1526a:	d21d      	bcs.n	152a8 <complete_module+0xb8>
        if (strncmp(module_prefix,
   1526c:	4b20      	ldr	r3, [pc, #128]	; (152f0 <complete_module+0x100>)
   1526e:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   15272:	462a      	mov	r2, r5
   15274:	4659      	mov	r1, fp
   15276:	9801      	ldr	r0, [sp, #4]
   15278:	f00c fe87 	bl	21f8a <strncmp>
   1527c:	4604      	mov	r4, r0
   1527e:	2800      	cmp	r0, #0
   15280:	d1ef      	bne.n	15262 <complete_module+0x72>
        if (!first_match) {
   15282:	f1b8 0f00 	cmp.w	r8, #0
   15286:	d00d      	beq.n	152a4 <complete_module+0xb4>
        if (first_match && (common_chars < 0)) {
   15288:	2f00      	cmp	r7, #0
   1528a:	dbd7      	blt.n	1523c <complete_module+0x4c>
        for (j = 0; j < common_chars; j++) {
   1528c:	42bc      	cmp	r4, r7
   1528e:	dae1      	bge.n	15254 <complete_module+0x64>
            if (first_match[j] != shell_modules[i].name[j]) {
   15290:	f818 2004 	ldrb.w	r2, [r8, r4]
   15294:	4b16      	ldr	r3, [pc, #88]	; (152f0 <complete_module+0x100>)
   15296:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   1529a:	5d1b      	ldrb	r3, [r3, r4]
   1529c:	429a      	cmp	r2, r3
   1529e:	d1d9      	bne.n	15254 <complete_module+0x64>
        for (j = 0; j < common_chars; j++) {
   152a0:	3401      	adds	r4, #1
   152a2:	e7f3      	b.n	1528c <complete_module+0x9c>
            first_match = shell_modules[i].name;
   152a4:	46d8      	mov	r8, fp
   152a6:	e7dc      	b.n	15262 <complete_module+0x72>
    if (!first_match) {
   152a8:	f1b8 0f00 	cmp.w	r8, #0
   152ac:	d0c3      	beq.n	15236 <complete_module+0x46>
    if (common_chars >= 0) {
   152ae:	2f00      	cmp	r7, #0
   152b0:	da0e      	bge.n	152d0 <complete_module+0xe0>
        common_chars = strlen(first_match);
   152b2:	4640      	mov	r0, r8
   152b4:	f7fb fa18 	bl	106e8 <strlen>
   152b8:	4607      	mov	r7, r0
        space = 1;
   152ba:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   152bc:	42bd      	cmp	r5, r7
   152be:	da0f      	bge.n	152e0 <complete_module+0xf0>
        if (!append_char(line, first_match[i])) {
   152c0:	f818 1005 	ldrb.w	r1, [r8, r5]
   152c4:	4648      	mov	r0, r9
   152c6:	47d0      	blx	sl
   152c8:	2800      	cmp	r0, #0
   152ca:	d0b4      	beq.n	15236 <complete_module+0x46>
    for (i = module_len; i < common_chars; i++) {
   152cc:	3501      	adds	r5, #1
   152ce:	e7f5      	b.n	152bc <complete_module+0xcc>
        print_prompt();
   152d0:	f7ff ff76 	bl	151c0 <print_prompt>
        console_printf("%s", line);
   152d4:	4649      	mov	r1, r9
   152d6:	4809      	ldr	r0, [pc, #36]	; (152fc <complete_module+0x10c>)
   152d8:	f7fe fd98 	bl	13e0c <console_printf>
    int common_chars = -1, space = 0;
   152dc:	2400      	movs	r4, #0
   152de:	e7ed      	b.n	152bc <complete_module+0xcc>
    if (space) {
   152e0:	2c00      	cmp	r4, #0
   152e2:	d0a8      	beq.n	15236 <complete_module+0x46>
        append_char(line, ' ');
   152e4:	2120      	movs	r1, #32
   152e6:	4648      	mov	r0, r9
   152e8:	47d0      	blx	sl
   152ea:	e7a4      	b.n	15236 <complete_module+0x46>
   152ec:	000273a4 	.word	0x000273a4
   152f0:	2000530c 	.word	0x2000530c
   152f4:	00026e48 	.word	0x00026e48
   152f8:	200052e0 	.word	0x200052e0
   152fc:	000267e8 	.word	0x000267e8

00015300 <complete_command>:
{
   15300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15304:	b083      	sub	sp, #12
   15306:	9001      	str	r0, [sp, #4]
   15308:	468b      	mov	fp, r1
   1530a:	4615      	mov	r5, r2
    commands = shell_modules[module_idx].commands;
   1530c:	4a3a      	ldr	r2, [pc, #232]	; (153f8 <complete_command+0xf8>)
   1530e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   15312:	6857      	ldr	r7, [r2, #4]
    int i, j, common_chars = -1;
   15314:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   15318:	f04f 0900 	mov.w	r9, #0
    int match_count = 0;
   1531c:	46ca      	mov	sl, r9
    int first_match = -1;
   1531e:	46b0      	mov	r8, r6
    for (i = 0; commands[i].sc_cmd; i++) {
   15320:	e006      	b.n	15330 <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   15322:	4620      	mov	r0, r4
   15324:	f7fb f9e0 	bl	106e8 <strlen>
   15328:	4606      	mov	r6, r0
            first_match = i;
   1532a:	46c8      	mov	r8, r9
    for (i = 0; commands[i].sc_cmd; i++) {
   1532c:	f109 0901 	add.w	r9, r9, #1
   15330:	eb07 1309 	add.w	r3, r7, r9, lsl #4
   15334:	689c      	ldr	r4, [r3, #8]
   15336:	b1ec      	cbz	r4, 15374 <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   15338:	462a      	mov	r2, r5
   1533a:	4621      	mov	r1, r4
   1533c:	4658      	mov	r0, fp
   1533e:	f00c fe24 	bl	21f8a <strncmp>
   15342:	2800      	cmp	r0, #0
   15344:	d1f2      	bne.n	1532c <complete_command+0x2c>
        match_count++;
   15346:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   1534a:	f1ba 0f01 	cmp.w	sl, #1
   1534e:	d0e8      	beq.n	15322 <complete_command+0x22>
        if (common_chars <= command_len) {
   15350:	42ae      	cmp	r6, r5
   15352:	ddeb      	ble.n	1532c <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   15354:	462b      	mov	r3, r5
   15356:	42b3      	cmp	r3, r6
   15358:	da08      	bge.n	1536c <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   1535a:	eb07 1208 	add.w	r2, r7, r8, lsl #4
   1535e:	6892      	ldr	r2, [r2, #8]
   15360:	5cd1      	ldrb	r1, [r2, r3]
   15362:	5ce2      	ldrb	r2, [r4, r3]
   15364:	4291      	cmp	r1, r2
   15366:	d103      	bne.n	15370 <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   15368:	3301      	adds	r3, #1
   1536a:	e7f4      	b.n	15356 <complete_command+0x56>
        common_chars = j;
   1536c:	461e      	mov	r6, r3
   1536e:	e7dd      	b.n	1532c <complete_command+0x2c>
   15370:	461e      	mov	r6, r3
   15372:	e7db      	b.n	1532c <complete_command+0x2c>
    if (match_count == 0) {
   15374:	f1ba 0f00 	cmp.w	sl, #0
   15378:	d03b      	beq.n	153f2 <complete_command+0xf2>
    if (common_chars > command_len) {
   1537a:	42ae      	cmp	r6, r5
   1537c:	dd15      	ble.n	153aa <complete_command+0xaa>
   1537e:	9c01      	ldr	r4, [sp, #4]
   15380:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   15384:	42b5      	cmp	r5, r6
   15386:	da08      	bge.n	1539a <complete_command+0x9a>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   15388:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   1538c:	689b      	ldr	r3, [r3, #8]
   1538e:	5d59      	ldrb	r1, [r3, r5]
   15390:	4620      	mov	r0, r4
   15392:	47c8      	blx	r9
   15394:	b368      	cbz	r0, 153f2 <complete_command+0xf2>
        for (i = command_len; i < common_chars; i++) {
   15396:	3501      	adds	r5, #1
   15398:	e7f4      	b.n	15384 <complete_command+0x84>
        if (match_count == 1) {
   1539a:	f1ba 0f01 	cmp.w	sl, #1
   1539e:	d128      	bne.n	153f2 <complete_command+0xf2>
            append_char(line, ' ');
   153a0:	2120      	movs	r1, #32
   153a2:	9801      	ldr	r0, [sp, #4]
   153a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   153a6:	4798      	blx	r3
        return;
   153a8:	e023      	b.n	153f2 <complete_command+0xf2>
    console_printf("\n");
   153aa:	4814      	ldr	r0, [pc, #80]	; (153fc <complete_command+0xfc>)
   153ac:	f7fe fd2e 	bl	13e0c <console_printf>
    console_printf("%s\n", commands[first_match].sc_cmd);
   153b0:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   153b4:	6899      	ldr	r1, [r3, #8]
   153b6:	4812      	ldr	r0, [pc, #72]	; (15400 <complete_command+0x100>)
   153b8:	f7fe fd28 	bl	13e0c <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   153bc:	f108 0801 	add.w	r8, r8, #1
   153c0:	e001      	b.n	153c6 <complete_command+0xc6>
   153c2:	f108 0801 	add.w	r8, r8, #1
   153c6:	eb07 1308 	add.w	r3, r7, r8, lsl #4
   153ca:	689c      	ldr	r4, [r3, #8]
   153cc:	b15c      	cbz	r4, 153e6 <complete_command+0xe6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   153ce:	462a      	mov	r2, r5
   153d0:	4621      	mov	r1, r4
   153d2:	4658      	mov	r0, fp
   153d4:	f00c fdd9 	bl	21f8a <strncmp>
   153d8:	2800      	cmp	r0, #0
   153da:	d1f2      	bne.n	153c2 <complete_command+0xc2>
            console_printf("%s\n", commands[i].sc_cmd);
   153dc:	4621      	mov	r1, r4
   153de:	4808      	ldr	r0, [pc, #32]	; (15400 <complete_command+0x100>)
   153e0:	f7fe fd14 	bl	13e0c <console_printf>
   153e4:	e7ed      	b.n	153c2 <complete_command+0xc2>
    print_prompt();
   153e6:	f7ff feeb 	bl	151c0 <print_prompt>
    console_printf("%s", line);
   153ea:	9901      	ldr	r1, [sp, #4]
   153ec:	4805      	ldr	r0, [pc, #20]	; (15404 <complete_command+0x104>)
   153ee:	f7fe fd0d 	bl	13e0c <console_printf>
}
   153f2:	b003      	add	sp, #12
   153f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153f8:	2000530c 	.word	0x2000530c
   153fc:	000273a4 	.word	0x000273a4
   15400:	00026e48 	.word	0x00026e48
   15404:	000267e8 	.word	0x000267e8

00015408 <get_command_from_module>:
{
   15408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1540c:	4680      	mov	r8, r0
   1540e:	460d      	mov	r5, r1
   15410:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   15412:	2400      	movs	r4, #0
   15414:	e000      	b.n	15418 <get_command_from_module+0x10>
   15416:	3401      	adds	r4, #1
   15418:	4b0c      	ldr	r3, [pc, #48]	; (1544c <get_command_from_module+0x44>)
   1541a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1541e:	685b      	ldr	r3, [r3, #4]
   15420:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   15424:	689f      	ldr	r7, [r3, #8]
   15426:	b167      	cbz	r7, 15442 <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   15428:	4638      	mov	r0, r7
   1542a:	f7fb f95d 	bl	106e8 <strlen>
   1542e:	42a8      	cmp	r0, r5
   15430:	d1f1      	bne.n	15416 <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   15432:	462a      	mov	r2, r5
   15434:	4639      	mov	r1, r7
   15436:	4640      	mov	r0, r8
   15438:	f00c fda7 	bl	21f8a <strncmp>
   1543c:	2800      	cmp	r0, #0
   1543e:	d1ea      	bne.n	15416 <get_command_from_module+0xe>
   15440:	e001      	b.n	15446 <get_command_from_module+0x3e>
    return -1;
   15442:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   15446:	4620      	mov	r0, r4
   15448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1544c:	2000530c 	.word	0x2000530c

00015450 <complete_param>:
{
   15450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15454:	b083      	sub	sp, #12
   15456:	9001      	str	r0, [sp, #4]
   15458:	9100      	str	r1, [sp, #0]
   1545a:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   1545c:	4a34      	ldr	r2, [pc, #208]	; (15530 <complete_param+0xe0>)
   1545e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   15462:	6857      	ldr	r7, [r2, #4]
   15464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15466:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   1546a:	68fb      	ldr	r3, [r7, #12]
   1546c:	2b00      	cmp	r3, #0
   1546e:	d05c      	beq.n	1552a <complete_param+0xda>
   15470:	689b      	ldr	r3, [r3, #8]
   15472:	2b00      	cmp	r3, #0
   15474:	d059      	beq.n	1552a <complete_param+0xda>
    int i, j, common_chars = -1;
   15476:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   1547a:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   1547e:	4656      	mov	r6, sl
   15480:	e015      	b.n	154ae <complete_param+0x5e>
            console_printf("\n");
   15482:	482c      	ldr	r0, [pc, #176]	; (15534 <complete_param+0xe4>)
   15484:	f7fe fcc2 	bl	13e0c <console_printf>
            console_printf("%s\n", first_match);
   15488:	4631      	mov	r1, r6
   1548a:	482b      	ldr	r0, [pc, #172]	; (15538 <complete_param+0xe8>)
   1548c:	f7fe fcbe 	bl	13e0c <console_printf>
            common_chars = strlen(first_match);
   15490:	4630      	mov	r0, r6
   15492:	f7fb f929 	bl	106e8 <strlen>
   15496:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   15498:	e01d      	b.n	154d6 <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   1549a:	68fb      	ldr	r3, [r7, #12]
   1549c:	689b      	ldr	r3, [r3, #8]
   1549e:	f853 1008 	ldr.w	r1, [r3, r8]
   154a2:	4825      	ldr	r0, [pc, #148]	; (15538 <complete_param+0xe8>)
   154a4:	f7fe fcb2 	bl	13e0c <console_printf>
        common_chars = j;
   154a8:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   154aa:	f10a 0a01 	add.w	sl, sl, #1
   154ae:	68fb      	ldr	r3, [r7, #12]
   154b0:	689b      	ldr	r3, [r3, #8]
   154b2:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   154b6:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   154ba:	f1bb 0f00 	cmp.w	fp, #0
   154be:	d018      	beq.n	154f2 <complete_param+0xa2>
        if (strncmp(param_prefix,
   154c0:	464a      	mov	r2, r9
   154c2:	4659      	mov	r1, fp
   154c4:	9800      	ldr	r0, [sp, #0]
   154c6:	f00c fd60 	bl	21f8a <strncmp>
   154ca:	4604      	mov	r4, r0
   154cc:	2800      	cmp	r0, #0
   154ce:	d1ec      	bne.n	154aa <complete_param+0x5a>
        if (!first_match) {
   154d0:	b16e      	cbz	r6, 154ee <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   154d2:	2d00      	cmp	r5, #0
   154d4:	dbd5      	blt.n	15482 <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   154d6:	42ac      	cmp	r4, r5
   154d8:	dadf      	bge.n	1549a <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   154da:	5d32      	ldrb	r2, [r6, r4]
   154dc:	68fb      	ldr	r3, [r7, #12]
   154de:	689b      	ldr	r3, [r3, #8]
   154e0:	f853 3008 	ldr.w	r3, [r3, r8]
   154e4:	5d1b      	ldrb	r3, [r3, r4]
   154e6:	429a      	cmp	r2, r3
   154e8:	d1d7      	bne.n	1549a <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   154ea:	3401      	adds	r4, #1
   154ec:	e7f3      	b.n	154d6 <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   154ee:	465e      	mov	r6, fp
   154f0:	e7db      	b.n	154aa <complete_param+0x5a>
    if (!first_match) {
   154f2:	b1d6      	cbz	r6, 1552a <complete_param+0xda>
    if (common_chars >= 0) {
   154f4:	2d00      	cmp	r5, #0
   154f6:	da0f      	bge.n	15518 <complete_param+0xc8>
        common_chars = strlen(first_match);
   154f8:	4630      	mov	r0, r6
   154fa:	f7fb f8f5 	bl	106e8 <strlen>
   154fe:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   15500:	9c01      	ldr	r4, [sp, #4]
   15502:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   15504:	45a9      	cmp	r9, r5
   15506:	da10      	bge.n	1552a <complete_param+0xda>
        if (!append_char(line, first_match[i])) {
   15508:	f816 1009 	ldrb.w	r1, [r6, r9]
   1550c:	4620      	mov	r0, r4
   1550e:	47b8      	blx	r7
   15510:	b158      	cbz	r0, 1552a <complete_param+0xda>
    for (i = param_len; i < common_chars; i++) {
   15512:	f109 0901 	add.w	r9, r9, #1
   15516:	e7f5      	b.n	15504 <complete_param+0xb4>
        print_prompt();
   15518:	f7ff fe52 	bl	151c0 <print_prompt>
        console_printf("%s", line);
   1551c:	9c01      	ldr	r4, [sp, #4]
   1551e:	4621      	mov	r1, r4
   15520:	4806      	ldr	r0, [pc, #24]	; (1553c <complete_param+0xec>)
   15522:	f7fe fc73 	bl	13e0c <console_printf>
   15526:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   15528:	e7ec      	b.n	15504 <complete_param+0xb4>
}
   1552a:	b003      	add	sp, #12
   1552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15530:	2000530c 	.word	0x2000530c
   15534:	000273a4 	.word	0x000273a4
   15538:	00026e48 	.word	0x00026e48
   1553c:	000267e8 	.word	0x000267e8

00015540 <get_token>:
{
   15540:	b570      	push	{r4, r5, r6, lr}
   15542:	4605      	mov	r5, r0
   15544:	460e      	mov	r6, r1
    char *str = *cur;
   15546:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   15548:	2300      	movs	r3, #0
   1554a:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   1554c:	e000      	b.n	15550 <get_token+0x10>
        str++;
   1554e:	3401      	adds	r4, #1
    while (*str && *str == ' ') {
   15550:	7823      	ldrb	r3, [r4, #0]
   15552:	2b20      	cmp	r3, #32
   15554:	d0fb      	beq.n	1554e <get_token+0xe>
    if (*str == '\0') {
   15556:	b13b      	cbz	r3, 15568 <get_token+0x28>
    *cur = str;
   15558:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   1555a:	2120      	movs	r1, #32
   1555c:	4620      	mov	r0, r4
   1555e:	f00c fcfe 	bl	21f5e <strchr>
    if (str == NULL) {
   15562:	b128      	cbz	r0, 15570 <get_token+0x30>
    return str - *cur;
   15564:	1b00      	subs	r0, r0, r4
}
   15566:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   15568:	2301      	movs	r3, #1
   1556a:	6033      	str	r3, [r6, #0]
        return 0;
   1556c:	2000      	movs	r0, #0
   1556e:	e7fa      	b.n	15566 <get_token+0x26>
        *null_terminated = 1;
   15570:	2301      	movs	r3, #1
   15572:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   15574:	6828      	ldr	r0, [r5, #0]
   15576:	f7fb f8b7 	bl	106e8 <strlen>
   1557a:	e7f4      	b.n	15566 <get_token+0x26>

0001557c <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   1557c:	b530      	push	{r4, r5, lr}
   1557e:	b085      	sub	sp, #20
   15580:	4604      	mov	r4, r0
   15582:	9101      	str	r1, [sp, #4]
   15584:	461d      	mov	r5, r3
    int null_terminated = 0;
   15586:	2000      	movs	r0, #0
   15588:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   1558a:	3201      	adds	r2, #1
   1558c:	4411      	add	r1, r2
   1558e:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   15590:	a903      	add	r1, sp, #12
   15592:	a801      	add	r0, sp, #4
   15594:	f7ff ffd4 	bl	15540 <get_token>
    if (tok_len == 0) {
   15598:	b9a0      	cbnz	r0, 155c4 <complete_select+0x48>
        if (default_module != -1) {
   1559a:	4b12      	ldr	r3, [pc, #72]	; (155e4 <complete_select+0x68>)
   1559c:	681b      	ldr	r3, [r3, #0]
   1559e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   155a2:	d001      	beq.n	155a8 <complete_select+0x2c>
    if (null_terminated) {
        if (default_module == -1) {
            complete_module(line, cur, tok_len, append_char);
        }
    }
}
   155a4:	b005      	add	sp, #20
   155a6:	bd30      	pop	{r4, r5, pc}
        console_printf("\n");
   155a8:	480f      	ldr	r0, [pc, #60]	; (155e8 <complete_select+0x6c>)
   155aa:	f7fe fc2f 	bl	13e0c <console_printf>
        print_modules(streamer_console_get());
   155ae:	f001 ff17 	bl	173e0 <streamer_console_get>
   155b2:	f7ff fc35 	bl	14e20 <print_modules>
        print_prompt();
   155b6:	f7ff fe03 	bl	151c0 <print_prompt>
        console_printf("%s", line);
   155ba:	4621      	mov	r1, r4
   155bc:	480b      	ldr	r0, [pc, #44]	; (155ec <complete_select+0x70>)
   155be:	f7fe fc25 	bl	13e0c <console_printf>
        return;
   155c2:	e7ef      	b.n	155a4 <complete_select+0x28>
   155c4:	4602      	mov	r2, r0
    if (null_terminated) {
   155c6:	9b03      	ldr	r3, [sp, #12]
   155c8:	2b00      	cmp	r3, #0
   155ca:	d0eb      	beq.n	155a4 <complete_select+0x28>
        if (default_module == -1) {
   155cc:	4b05      	ldr	r3, [pc, #20]	; (155e4 <complete_select+0x68>)
   155ce:	681b      	ldr	r3, [r3, #0]
   155d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   155d4:	d1e6      	bne.n	155a4 <complete_select+0x28>
            complete_module(line, cur, tok_len, append_char);
   155d6:	462b      	mov	r3, r5
   155d8:	9901      	ldr	r1, [sp, #4]
   155da:	4620      	mov	r0, r4
   155dc:	f7ff fe08 	bl	151f0 <complete_module>
   155e0:	e7e0      	b.n	155a4 <complete_select+0x28>
   155e2:	bf00      	nop
   155e4:	200002ec 	.word	0x200002ec
   155e8:	000273a4 	.word	0x000273a4
   155ec:	000267e8 	.word	0x000267e8

000155f0 <line2argv>:
{
   155f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155f2:	460d      	mov	r5, r1
   155f4:	4616      	mov	r6, r2
   155f6:	461f      	mov	r7, r3
    if (!strlen(str)) {
   155f8:	7803      	ldrb	r3, [r0, #0]
   155fa:	b91b      	cbnz	r3, 15604 <line2argv+0x14>
        return 0;
   155fc:	2400      	movs	r4, #0
}
   155fe:	4620      	mov	r0, r4
   15600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        str++;
   15602:	3001      	adds	r0, #1
    while (*str && *str == ' ') {
   15604:	7804      	ldrb	r4, [r0, #0]
   15606:	2c20      	cmp	r4, #32
   15608:	d0fb      	beq.n	15602 <line2argv+0x12>
    if (!*str) {
   1560a:	b314      	cbz	r4, 15652 <line2argv+0x62>
    argv[argc++] = str;
   1560c:	6028      	str	r0, [r5, #0]
   1560e:	2401      	movs	r4, #1
    while ((str = strchr(str, ' '))) {
   15610:	e00a      	b.n	15628 <line2argv+0x38>
            str++;
   15612:	3001      	adds	r0, #1
        while (*str && *str == ' ') {
   15614:	7803      	ldrb	r3, [r0, #0]
   15616:	2b20      	cmp	r3, #32
   15618:	d0fb      	beq.n	15612 <line2argv+0x22>
        if (!*str) {
   1561a:	b1b3      	cbz	r3, 1564a <line2argv+0x5a>
        argv[argc++] = str;
   1561c:	1c63      	adds	r3, r4, #1
   1561e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        if (argc == size) {
   15622:	42b3      	cmp	r3, r6
   15624:	d00a      	beq.n	1563c <line2argv+0x4c>
        argv[argc++] = str;
   15626:	461c      	mov	r4, r3
    while ((str = strchr(str, ' '))) {
   15628:	2120      	movs	r1, #32
   1562a:	f00c fc98 	bl	21f5e <strchr>
   1562e:	4603      	mov	r3, r0
   15630:	b158      	cbz	r0, 1564a <line2argv+0x5a>
        *str++ = '\0';
   15632:	4618      	mov	r0, r3
   15634:	2300      	movs	r3, #0
   15636:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   1563a:	e7eb      	b.n	15614 <line2argv+0x24>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   1563c:	1e72      	subs	r2, r6, #1
   1563e:	4906      	ldr	r1, [pc, #24]	; (15658 <line2argv+0x68>)
   15640:	4638      	mov	r0, r7
   15642:	f7fd fa3d 	bl	12ac0 <streamer_printf>
            return 0;
   15646:	2400      	movs	r4, #0
   15648:	e7d9      	b.n	155fe <line2argv+0xe>
    argv[argc] = NULL;
   1564a:	2300      	movs	r3, #0
   1564c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
    return argc;
   15650:	e7d5      	b.n	155fe <line2argv+0xe>
        return 0;
   15652:	2400      	movs	r4, #0
   15654:	e7d3      	b.n	155fe <line2argv+0xe>
   15656:	bf00      	nop
   15658:	00027414 	.word	0x00027414

0001565c <get_last_token>:
{
   1565c:	b510      	push	{r4, lr}
   1565e:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   15660:	2120      	movs	r1, #32
   15662:	6800      	ldr	r0, [r0, #0]
   15664:	f00c fca2 	bl	21fac <strrchr>
   15668:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   1566a:	b120      	cbz	r0, 15676 <get_last_token+0x1a>
    (*cur)++;
   1566c:	3001      	adds	r0, #1
   1566e:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   15670:	f7fb f83a 	bl	106e8 <strlen>
}
   15674:	bd10      	pop	{r4, pc}
        return 0;
   15676:	2000      	movs	r0, #0
   15678:	e7fc      	b.n	15674 <get_last_token+0x18>
	...

0001567c <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   1567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15680:	b085      	sub	sp, #20
   15682:	4605      	mov	r5, r0
   15684:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   15686:	2100      	movs	r1, #0
   15688:	9102      	str	r1, [sp, #8]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   1568a:	47a0      	blx	r4
   1568c:	b910      	cbnz	r0, 15694 <completion+0x18>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   1568e:	b005      	add	sp, #20
   15690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   15694:	9503      	str	r5, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   15696:	a902      	add	r1, sp, #8
   15698:	a803      	add	r0, sp, #12
   1569a:	f7ff ff51 	bl	15540 <get_token>
    if (tok_len == 0) {
   1569e:	4606      	mov	r6, r0
   156a0:	b168      	cbz	r0, 156be <completion+0x42>
    if (null_terminated) {
   156a2:	9b02      	ldr	r3, [sp, #8]
   156a4:	b363      	cbz	r3, 15700 <completion+0x84>
        if (default_module == -1) {
   156a6:	4b4d      	ldr	r3, [pc, #308]	; (157dc <completion+0x160>)
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   156ae:	d020      	beq.n	156f2 <completion+0x76>
        complete_command(line, cur, tok_len,
   156b0:	9400      	str	r4, [sp, #0]
   156b2:	4602      	mov	r2, r0
   156b4:	9903      	ldr	r1, [sp, #12]
   156b6:	4628      	mov	r0, r5
   156b8:	f7ff fe22 	bl	15300 <complete_command>
        return;
   156bc:	e7e7      	b.n	1568e <completion+0x12>
        console_printf("\n");
   156be:	4848      	ldr	r0, [pc, #288]	; (157e0 <completion+0x164>)
   156c0:	f7fe fba4 	bl	13e0c <console_printf>
        if (default_module == -1) {
   156c4:	4b45      	ldr	r3, [pc, #276]	; (157dc <completion+0x160>)
   156c6:	681c      	ldr	r4, [r3, #0]
   156c8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   156cc:	d00c      	beq.n	156e8 <completion+0x6c>
            print_module_commands(default_module, streamer_console_get());
   156ce:	f001 fe87 	bl	173e0 <streamer_console_get>
   156d2:	4601      	mov	r1, r0
   156d4:	4620      	mov	r0, r4
   156d6:	f7ff fb6d 	bl	14db4 <print_module_commands>
        print_prompt();
   156da:	f7ff fd71 	bl	151c0 <print_prompt>
        console_printf("%s", line);
   156de:	4629      	mov	r1, r5
   156e0:	4840      	ldr	r0, [pc, #256]	; (157e4 <completion+0x168>)
   156e2:	f7fe fb93 	bl	13e0c <console_printf>
        return;
   156e6:	e7d2      	b.n	1568e <completion+0x12>
            print_modules(streamer_console_get());
   156e8:	f001 fe7a 	bl	173e0 <streamer_console_get>
   156ec:	f7ff fb98 	bl	14e20 <print_modules>
   156f0:	e7f3      	b.n	156da <completion+0x5e>
            complete_module(line, cur, tok_len, append_char);
   156f2:	4623      	mov	r3, r4
   156f4:	4602      	mov	r2, r0
   156f6:	9903      	ldr	r1, [sp, #12]
   156f8:	4628      	mov	r0, r5
   156fa:	f7ff fd79 	bl	151f0 <complete_module>
            return;
   156fe:	e7c6      	b.n	1568e <completion+0x12>
    if (strncmp("select", cur, tok_len) == 0) {
   15700:	f8dd 800c 	ldr.w	r8, [sp, #12]
   15704:	4602      	mov	r2, r0
   15706:	4641      	mov	r1, r8
   15708:	4837      	ldr	r0, [pc, #220]	; (157e8 <completion+0x16c>)
   1570a:	f00c fc3e 	bl	21f8a <strncmp>
   1570e:	b300      	cbz	r0, 15752 <completion+0xd6>
    if (default_module != -1) {
   15710:	4b32      	ldr	r3, [pc, #200]	; (157dc <completion+0x160>)
   15712:	681f      	ldr	r7, [r3, #0]
   15714:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   15718:	d022      	beq.n	15760 <completion+0xe4>
    command = get_command_from_module(cur, tok_len, module);
   1571a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1571e:	463a      	mov	r2, r7
   15720:	4631      	mov	r1, r6
   15722:	4648      	mov	r0, r9
   15724:	f7ff fe70 	bl	15408 <get_command_from_module>
   15728:	4680      	mov	r8, r0
    if (command == -1) {
   1572a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1572e:	d0ae      	beq.n	1568e <completion+0x12>
    cur += tok_len;
   15730:	444e      	add	r6, r9
   15732:	9603      	str	r6, [sp, #12]
    tok_len = get_last_token(&cur);
   15734:	a803      	add	r0, sp, #12
   15736:	f7ff ff91 	bl	1565c <get_last_token>
    if (tok_len == 0) {
   1573a:	4602      	mov	r2, r0
   1573c:	2800      	cmp	r0, #0
   1573e:	d03b      	beq.n	157b8 <completion+0x13c>
    complete_param(line, cur, tok_len,
   15740:	9401      	str	r4, [sp, #4]
   15742:	f8cd 8000 	str.w	r8, [sp]
   15746:	463b      	mov	r3, r7
   15748:	9903      	ldr	r1, [sp, #12]
   1574a:	4628      	mov	r0, r5
   1574c:	f7ff fe80 	bl	15450 <complete_param>
    return;
   15750:	e79d      	b.n	1568e <completion+0x12>
        complete_select(line, cur, tok_len, append_char);
   15752:	4623      	mov	r3, r4
   15754:	4632      	mov	r2, r6
   15756:	4641      	mov	r1, r8
   15758:	4628      	mov	r0, r5
   1575a:	f7ff ff0f 	bl	1557c <complete_select>
        return;
   1575e:	e796      	b.n	1568e <completion+0x12>
        module = get_destination_module(cur, tok_len);
   15760:	4631      	mov	r1, r6
   15762:	4640      	mov	r0, r8
   15764:	f7ff fb96 	bl	14e94 <get_destination_module>
   15768:	4607      	mov	r7, r0
        if (module == -1) {
   1576a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1576e:	d08e      	beq.n	1568e <completion+0x12>
        cur += tok_len + 1;
   15770:	1c73      	adds	r3, r6, #1
   15772:	4443      	add	r3, r8
   15774:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   15776:	a902      	add	r1, sp, #8
   15778:	a803      	add	r0, sp, #12
   1577a:	f7ff fee1 	bl	15540 <get_token>
        if (tok_len == 0) {
   1577e:	4606      	mov	r6, r0
   15780:	b150      	cbz	r0, 15798 <completion+0x11c>
        if (null_terminated) {
   15782:	9b02      	ldr	r3, [sp, #8]
   15784:	2b00      	cmp	r3, #0
   15786:	d0c8      	beq.n	1571a <completion+0x9e>
            complete_command(line, cur, tok_len,
   15788:	9400      	str	r4, [sp, #0]
   1578a:	463b      	mov	r3, r7
   1578c:	4602      	mov	r2, r0
   1578e:	9903      	ldr	r1, [sp, #12]
   15790:	4628      	mov	r0, r5
   15792:	f7ff fdb5 	bl	15300 <complete_command>
            return;
   15796:	e77a      	b.n	1568e <completion+0x12>
            console_printf("\n");
   15798:	4811      	ldr	r0, [pc, #68]	; (157e0 <completion+0x164>)
   1579a:	f7fe fb37 	bl	13e0c <console_printf>
            print_module_commands(module, streamer_console_get());
   1579e:	f001 fe1f 	bl	173e0 <streamer_console_get>
   157a2:	4601      	mov	r1, r0
   157a4:	4638      	mov	r0, r7
   157a6:	f7ff fb05 	bl	14db4 <print_module_commands>
            print_prompt();
   157aa:	f7ff fd09 	bl	151c0 <print_prompt>
            console_printf("%s", line);
   157ae:	4629      	mov	r1, r5
   157b0:	480c      	ldr	r0, [pc, #48]	; (157e4 <completion+0x168>)
   157b2:	f7fe fb2b 	bl	13e0c <console_printf>
            return;
   157b6:	e76a      	b.n	1568e <completion+0x12>
        console_printf("\n");
   157b8:	4809      	ldr	r0, [pc, #36]	; (157e0 <completion+0x164>)
   157ba:	f7fe fb27 	bl	13e0c <console_printf>
        print_command_params(module, command, streamer_console_get());
   157be:	f001 fe0f 	bl	173e0 <streamer_console_get>
   157c2:	4602      	mov	r2, r0
   157c4:	4641      	mov	r1, r8
   157c6:	4638      	mov	r0, r7
   157c8:	f7ff fb42 	bl	14e50 <print_command_params>
        print_prompt();
   157cc:	f7ff fcf8 	bl	151c0 <print_prompt>
        console_printf("%s", line);
   157d0:	4629      	mov	r1, r5
   157d2:	4804      	ldr	r0, [pc, #16]	; (157e4 <completion+0x168>)
   157d4:	f7fe fb1a 	bl	13e0c <console_printf>
        return;
   157d8:	e759      	b.n	1568e <completion+0x12>
   157da:	bf00      	nop
   157dc:	200002ec 	.word	0x200002ec
   157e0:	000273a4 	.word	0x000273a4
   157e4:	000267e8 	.word	0x000267e8
   157e8:	00027368 	.word	0x00027368

000157ec <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   157ec:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   157ee:	2400      	movs	r4, #0
   157f0:	e00b      	b.n	1580a <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   157f2:	4807      	ldr	r0, [pc, #28]	; (15810 <shell_avail_queue_init+0x24>)
   157f4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   157f8:	4b06      	ldr	r3, [pc, #24]	; (15814 <shell_avail_queue_init+0x28>)
   157fa:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   157fc:	4b06      	ldr	r3, [pc, #24]	; (15818 <shell_avail_queue_init+0x2c>)
   157fe:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   15802:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   15804:	f7fe faa2 	bl	13d4c <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   15808:	3401      	adds	r4, #1
   1580a:	2c01      	cmp	r4, #1
   1580c:	ddf1      	ble.n	157f2 <shell_avail_queue_init+0x6>
    }
}
   1580e:	bd10      	pop	{r4, pc}
   15810:	200052e8 	.word	0x200052e8
   15814:	0001595d 	.word	0x0001595d
   15818:	20004f88 	.word	0x20004f88

0001581c <shell_evq_set>:
{
   1581c:	b508      	push	{r3, lr}
    shell_evq = evq;
   1581e:	4b02      	ldr	r3, [pc, #8]	; (15828 <shell_evq_set+0xc>)
   15820:	6018      	str	r0, [r3, #0]
    console_line_queue_set(shell_evq);
   15822:	f7fe fa8d 	bl	13d40 <console_line_queue_set>
}
   15826:	bd08      	pop	{r3, pc}
   15828:	20005308 	.word	0x20005308

0001582c <shell_exec>:
{
   1582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15830:	4607      	mov	r7, r0
   15832:	460e      	mov	r6, r1
   15834:	4615      	mov	r5, r2
    cmd = shell_find_cmd(argc, argv, streamer);
   15836:	f7ff fbad 	bl	14f94 <shell_find_cmd>
    if (!cmd) {
   1583a:	4604      	mov	r4, r0
   1583c:	b1b8      	cbz	r0, 1586e <shell_exec+0x42>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   1583e:	4b23      	ldr	r3, [pc, #140]	; (158cc <shell_exec+0xa0>)
   15840:	681b      	ldr	r3, [r3, #0]
   15842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15846:	d026      	beq.n	15896 <shell_exec+0x6a>
    size_t argc_offset = 0;
   15848:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   1584a:	7823      	ldrb	r3, [r4, #0]
   1584c:	f013 0f01 	tst.w	r3, #1
   15850:	d12d      	bne.n	158ae <shell_exec+0x82>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   15852:	6863      	ldr	r3, [r4, #4]
   15854:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   15858:	1a38      	subs	r0, r7, r0
   1585a:	4798      	blx	r3
   1585c:	4604      	mov	r4, r0
    if (rc < 0) {
   1585e:	2c00      	cmp	r4, #0
   15860:	db2f      	blt.n	158c2 <shell_exec+0x96>
    print_prompt_if_console(streamer);
   15862:	4628      	mov	r0, r5
   15864:	f7ff fcba 	bl	151dc <print_prompt_if_console>
}
   15868:	4620      	mov	r0, r4
   1586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   1586e:	4b18      	ldr	r3, [pc, #96]	; (158d0 <shell_exec+0xa4>)
   15870:	685b      	ldr	r3, [r3, #4]
   15872:	b10b      	cbz	r3, 15878 <shell_exec+0x4c>
            cmd = &app_cmd;
   15874:	4c16      	ldr	r4, [pc, #88]	; (158d0 <shell_exec+0xa4>)
   15876:	e7e2      	b.n	1583e <shell_exec+0x12>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   15878:	6832      	ldr	r2, [r6, #0]
   1587a:	4916      	ldr	r1, [pc, #88]	; (158d4 <shell_exec+0xa8>)
   1587c:	4628      	mov	r0, r5
   1587e:	f7fd f91f 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer,
   15882:	4915      	ldr	r1, [pc, #84]	; (158d8 <shell_exec+0xac>)
   15884:	4628      	mov	r0, r5
   15886:	f7fd f91b 	bl	12ac0 <streamer_printf>
            print_prompt_if_console(streamer);
   1588a:	4628      	mov	r0, r5
   1588c:	f7ff fca6 	bl	151dc <print_prompt_if_console>
            return SYS_ENOENT;
   15890:	f06f 0403 	mvn.w	r4, #3
   15894:	e7e8      	b.n	15868 <shell_exec+0x3c>
    if (default_module == -1 && cmd != &shell_cmd_select_module &&
   15896:	4b11      	ldr	r3, [pc, #68]	; (158dc <shell_exec+0xb0>)
   15898:	429c      	cmp	r4, r3
   1589a:	d006      	beq.n	158aa <shell_exec+0x7e>
   1589c:	4b10      	ldr	r3, [pc, #64]	; (158e0 <shell_exec+0xb4>)
   1589e:	429c      	cmp	r4, r3
   158a0:	d001      	beq.n	158a6 <shell_exec+0x7a>
        argc_offset = 1;
   158a2:	2001      	movs	r0, #1
   158a4:	e7d1      	b.n	1584a <shell_exec+0x1e>
    size_t argc_offset = 0;
   158a6:	2000      	movs	r0, #0
   158a8:	e7cf      	b.n	1584a <shell_exec+0x1e>
   158aa:	2000      	movs	r0, #0
   158ac:	e7cd      	b.n	1584a <shell_exec+0x1e>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   158ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
   158b2:	462b      	mov	r3, r5
   158b4:	eb06 0280 	add.w	r2, r6, r0, lsl #2
   158b8:	1a39      	subs	r1, r7, r0
   158ba:	4620      	mov	r0, r4
   158bc:	47c0      	blx	r8
   158be:	4604      	mov	r4, r0
   158c0:	e7cd      	b.n	1585e <shell_exec+0x32>
        show_cmd_help(argv, streamer);
   158c2:	4629      	mov	r1, r5
   158c4:	4630      	mov	r0, r6
   158c6:	f7ff fbc7 	bl	15058 <show_cmd_help>
   158ca:	e7ca      	b.n	15862 <shell_exec+0x36>
   158cc:	200002ec 	.word	0x200002ec
   158d0:	20004f74 	.word	0x20004f74
   158d4:	0002731c 	.word	0x0002731c
   158d8:	00027434 	.word	0x00027434
   158dc:	000274f4 	.word	0x000274f4
   158e0:	000274e4 	.word	0x000274e4

000158e4 <shell_process_command>:
{
   158e4:	b510      	push	{r4, lr}
   158e6:	b08e      	sub	sp, #56	; 0x38
   158e8:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   158ea:	460b      	mov	r3, r1
   158ec:	220d      	movs	r2, #13
   158ee:	a901      	add	r1, sp, #4
   158f0:	f7ff fe7e 	bl	155f0 <line2argv>
    if (!argc) {
   158f4:	b128      	cbz	r0, 15902 <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   158f6:	4622      	mov	r2, r4
   158f8:	a901      	add	r1, sp, #4
   158fa:	f7ff ff97 	bl	1582c <shell_exec>
}
   158fe:	b00e      	add	sp, #56	; 0x38
   15900:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   15902:	4620      	mov	r0, r4
   15904:	f7ff fc6a 	bl	151dc <print_prompt_if_console>
        return;
   15908:	e7f9      	b.n	158fe <shell_process_command+0x1a>

0001590a <shell_process_nlip_line>:
{
   1590a:	b570      	push	{r4, r5, r6, lr}
   1590c:	4604      	mov	r4, r0
   1590e:	460e      	mov	r6, r1
    shell_line_len = strlen(shell_line);
   15910:	f7fa feea 	bl	106e8 <strlen>
    if (shell_line_len > 2) {
   15914:	2802      	cmp	r0, #2
   15916:	d91c      	bls.n	15952 <shell_process_nlip_line+0x48>
   15918:	4605      	mov	r5, r0
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   1591a:	7823      	ldrb	r3, [r4, #0]
   1591c:	2b06      	cmp	r3, #6
   1591e:	d009      	beq.n	15934 <shell_process_nlip_line+0x2a>
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   15920:	2b04      	cmp	r3, #4
   15922:	d102      	bne.n	1592a <shell_process_nlip_line+0x20>
                shell_line[1] == SHELL_NLIP_DATA_START2) {
   15924:	7863      	ldrb	r3, [r4, #1]
        } else if (shell_line[0] == SHELL_NLIP_DATA_START1 &&
   15926:	2b14      	cmp	r3, #20
   15928:	d00e      	beq.n	15948 <shell_process_nlip_line+0x3e>
            shell_process_command(shell_line, streamer);
   1592a:	4631      	mov	r1, r6
   1592c:	4620      	mov	r0, r4
   1592e:	f7ff ffd9 	bl	158e4 <shell_process_command>
}
   15932:	bd70      	pop	{r4, r5, r6, pc}
                shell_line[1] == SHELL_NLIP_PKT_START2) {
   15934:	7862      	ldrb	r2, [r4, #1]
        if (shell_line[0] == SHELL_NLIP_PKT_START1 &&
   15936:	2a09      	cmp	r2, #9
   15938:	d1f2      	bne.n	15920 <shell_process_nlip_line+0x16>
            shell_nlip_clear_pkt();
   1593a:	f000 f95b 	bl	15bf4 <shell_nlip_clear_pkt>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   1593e:	1ea9      	subs	r1, r5, #2
   15940:	1ca0      	adds	r0, r4, #2
   15942:	f000 f969 	bl	15c18 <shell_nlip_process>
   15946:	e7f4      	b.n	15932 <shell_process_nlip_line+0x28>
            shell_nlip_process(&shell_line[2], shell_line_len - 2);
   15948:	1ea9      	subs	r1, r5, #2
   1594a:	1ca0      	adds	r0, r4, #2
   1594c:	f000 f964 	bl	15c18 <shell_nlip_process>
   15950:	e7ef      	b.n	15932 <shell_process_nlip_line+0x28>
        shell_process_command(shell_line, streamer);
   15952:	4631      	mov	r1, r6
   15954:	4620      	mov	r0, r4
   15956:	f7ff ffc5 	bl	158e4 <shell_process_command>
}
   1595a:	e7ea      	b.n	15932 <shell_process_nlip_line+0x28>

0001595c <shell>:
{
   1595c:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   1595e:	b160      	cbz	r0, 1597a <shell+0x1e>
   15960:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   15962:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   15964:	b165      	cbz	r5, 15980 <shell+0x24>
    streamer = streamer_console_get();
   15966:	f001 fd3b 	bl	173e0 <streamer_console_get>
   1596a:	4601      	mov	r1, r0
    shell_process_nlip_line(cmd->line, streamer);
   1596c:	4628      	mov	r0, r5
   1596e:	f7ff ffcc 	bl	1590a <shell_process_nlip_line>
    console_line_event_put(ev);
   15972:	4620      	mov	r0, r4
   15974:	f7fe f9ea 	bl	13d4c <console_line_event_put>
}
   15978:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt();
   1597a:	f7ff fc21 	bl	151c0 <print_prompt>
        return;
   1597e:	e7fb      	b.n	15978 <shell+0x1c>
        print_prompt();
   15980:	f7ff fc1e 	bl	151c0 <print_prompt>
        return;
   15984:	e7f8      	b.n	15978 <shell+0x1c>
	...

00015988 <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   15988:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   1598a:	4b0d      	ldr	r3, [pc, #52]	; (159c0 <shell_register+0x38>)
   1598c:	681b      	ldr	r3, [r3, #0]
   1598e:	2b02      	cmp	r3, #2
   15990:	d80a      	bhi.n	159a8 <shell_register+0x20>
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   15992:	4a0c      	ldr	r2, [pc, #48]	; (159c4 <shell_register+0x3c>)
   15994:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   15998:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1599c:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   1599e:	3301      	adds	r3, #1
   159a0:	4a07      	ldr	r2, [pc, #28]	; (159c0 <shell_register+0x38>)
   159a2:	6013      	str	r3, [r2, #0]

    return 0;
}
   159a4:	2000      	movs	r0, #0
   159a6:	bd08      	pop	{r3, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT, "Max number of modules reached\n");
   159a8:	4a07      	ldr	r2, [pc, #28]	; (159c8 <shell_register+0x40>)
   159aa:	2103      	movs	r1, #3
   159ac:	2000      	movs	r0, #0
   159ae:	f00d fca7 	bl	23300 <modlog_printf>
        assert(0);
   159b2:	2300      	movs	r3, #0
   159b4:	461a      	mov	r2, r3
   159b6:	4619      	mov	r1, r3
   159b8:	4618      	mov	r0, r3
   159ba:	f7f3 fc03 	bl	91c4 <__assert_func>
   159be:	bf00      	nop
   159c0:	200052e0 	.word	0x200052e0
   159c4:	2000530c 	.word	0x2000530c
   159c8:	00027460 	.word	0x00027460

000159cc <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   159cc:	b570      	push	{r4, r5, r6, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   159ce:	4b1a      	ldr	r3, [pc, #104]	; (15a38 <shell_cmd_register+0x6c>)
   159d0:	681b      	ldr	r3, [r3, #0]
   159d2:	2b13      	cmp	r3, #19
   159d4:	dc10      	bgt.n	159f8 <shell_cmd_register+0x2c>
   159d6:	4604      	mov	r4, r0
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   159d8:	4b18      	ldr	r3, [pc, #96]	; (15a3c <shell_cmd_register+0x70>)
   159da:	681b      	ldr	r3, [r3, #0]
   159dc:	b1bb      	cbz	r3, 15a0e <shell_cmd_register+0x42>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   159de:	4e16      	ldr	r6, [pc, #88]	; (15a38 <shell_cmd_register+0x6c>)
   159e0:	6835      	ldr	r5, [r6, #0]
   159e2:	4b17      	ldr	r3, [pc, #92]	; (15a40 <shell_cmd_register+0x74>)
   159e4:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
   159e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   159ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    ++num_compat_commands;
   159f0:	3501      	adds	r5, #1
   159f2:	6035      	str	r5, [r6, #0]
    return 0;
}
   159f4:	2000      	movs	r0, #0
   159f6:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_ERROR(LOG_MODULE_DEFAULT,
   159f8:	4a12      	ldr	r2, [pc, #72]	; (15a44 <shell_cmd_register+0x78>)
   159fa:	2103      	movs	r1, #3
   159fc:	2000      	movs	r0, #0
   159fe:	f00d fc7f 	bl	23300 <modlog_printf>
        assert(0);
   15a02:	2300      	movs	r3, #0
   15a04:	461a      	mov	r2, r3
   15a06:	4619      	mov	r1, r3
   15a08:	4618      	mov	r0, r3
   15a0a:	f7f3 fbdb 	bl	91c4 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   15a0e:	4d0e      	ldr	r5, [pc, #56]	; (15a48 <shell_cmd_register+0x7c>)
   15a10:	490b      	ldr	r1, [pc, #44]	; (15a40 <shell_cmd_register+0x74>)
   15a12:	4628      	mov	r0, r5
   15a14:	f7ff ffb8 	bl	15988 <shell_register>
        module_registered = 1;
   15a18:	4b08      	ldr	r3, [pc, #32]	; (15a3c <shell_cmd_register+0x70>)
   15a1a:	2201      	movs	r2, #1
   15a1c:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   15a1e:	4628      	mov	r0, r5
   15a20:	f7ff fa5e 	bl	14ee0 <set_default_module>
        if (rc != 0) {
   15a24:	2800      	cmp	r0, #0
   15a26:	d0da      	beq.n	159de <shell_cmd_register+0x12>
            MODLOG_ERROR(LOG_MODULE_DEFAULT,
   15a28:	462b      	mov	r3, r5
   15a2a:	4a08      	ldr	r2, [pc, #32]	; (15a4c <shell_cmd_register+0x80>)
   15a2c:	2103      	movs	r1, #3
   15a2e:	2000      	movs	r0, #0
   15a30:	f00d fc66 	bl	23300 <modlog_printf>
   15a34:	e7d3      	b.n	159de <shell_cmd_register+0x12>
   15a36:	bf00      	nop
   15a38:	200052dc 	.word	0x200052dc
   15a3c:	200052d8 	.word	0x200052d8
   15a40:	20005188 	.word	0x20005188
   15a44:	00027480 	.word	0x00027480
   15a48:	000274a8 	.word	0x000274a8
   15a4c:	000274b0 	.word	0x000274b0

00015a50 <shell_init>:
#endif

void
shell_init(void)
{
   15a50:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   15a52:	4b0d      	ldr	r3, [pc, #52]	; (15a88 <shell_init+0x38>)
   15a54:	781b      	ldrb	r3, [r3, #0]
   15a56:	b193      	cbz	r3, 15a7e <shell_init+0x2e>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   15a58:	f7ff fec8 	bl	157ec <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   15a5c:	f7f3 ff94 	bl	9988 <os_eventq_dflt_get>
   15a60:	f7ff fedc 	bl	1581c <shell_evq_set>

    prompt = SHELL_PROMPT;
   15a64:	4b09      	ldr	r3, [pc, #36]	; (15a8c <shell_init+0x3c>)
   15a66:	4a0a      	ldr	r2, [pc, #40]	; (15a90 <shell_init+0x40>)
   15a68:	601a      	str	r2, [r3, #0]

#if MYNEWT_VAL(SHELL_NEWTMGR)
    shell_nlip_init();
   15a6a:	f000 f945 	bl	15cf8 <shell_nlip_init>
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   15a6e:	4809      	ldr	r0, [pc, #36]	; (15a94 <shell_init+0x44>)
   15a70:	f7fe f980 	bl	13d74 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   15a74:	f000 fa96 	bl	15fa4 <shell_os_register>
#endif
#if MYNEWT_VAL(SHELL_PROMPT_MODULE)
    shell_prompt_register();
   15a78:	f000 fada 	bl	16030 <shell_prompt_register>
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   15a7c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   15a7e:	461a      	mov	r2, r3
   15a80:	4619      	mov	r1, r3
   15a82:	4618      	mov	r0, r3
   15a84:	f7f3 fb9e 	bl	91c4 <__assert_func>
   15a88:	2000538c 	.word	0x2000538c
   15a8c:	200052e4 	.word	0x200052e4
   15a90:	000274dc 	.word	0x000274dc
   15a94:	0001567d 	.word	0x0001567d

00015a98 <shell_nlip_mtx>:
    return (rc);
}

static int
shell_nlip_mtx(struct os_mbuf *m)
{
   15a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a9c:	b08b      	sub	sp, #44	; 0x2c
   15a9e:	4680      	mov	r8, r0
#define SHELL_NLIP_MTX_BUF_SIZE (12)
    uint8_t readbuf[SHELL_NLIP_MTX_BUF_SIZE];
    char encodebuf[BASE64_ENCODE_SIZE(SHELL_NLIP_MTX_BUF_SIZE)];
    char pkt_seq[3] = { '\n', SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
   15aa0:	4b49      	ldr	r3, [pc, #292]	; (15bc8 <shell_nlip_mtx+0x130>)
   15aa2:	681b      	ldr	r3, [r3, #0]
   15aa4:	f8ad 3008 	strh.w	r3, [sp, #8]
   15aa8:	0c1b      	lsrs	r3, r3, #16
   15aaa:	f88d 300a 	strb.w	r3, [sp, #10]
    char esc_seq[2] = { SHELL_NLIP_DATA_START1, SHELL_NLIP_DATA_START2 };
   15aae:	f241 4304 	movw	r3, #5124	; 0x1404
   15ab2:	f8ad 3004 	strh.w	r3, [sp, #4]
     *
     * continuation packets are preceded by 04 20 until the entire
     * buffer has been sent.
     */
    crc = CRC16_INITIAL_CRC;
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   15ab6:	4604      	mov	r4, r0
    crc = CRC16_INITIAL_CRC;
   15ab8:	2000      	movs	r0, #0
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   15aba:	e004      	b.n	15ac6 <shell_nlip_mtx+0x2e>
        crc = crc16_ccitt(crc, tmp->om_data, tmp->om_len);
   15abc:	88e2      	ldrh	r2, [r4, #6]
   15abe:	6821      	ldr	r1, [r4, #0]
   15ac0:	f001 fc28 	bl	17314 <crc16_ccitt>
    for (tmp = m; tmp; tmp = SLIST_NEXT(tmp, om_next)) {
   15ac4:	68e4      	ldr	r4, [r4, #12]
   15ac6:	2c00      	cmp	r4, #0
   15ac8:	d1f8      	bne.n	15abc <shell_nlip_mtx+0x24>
    }
    crc = htons(crc);
   15aca:	f3c0 230f 	ubfx	r3, r0, #8, #16
   15ace:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   15ad2:	b284      	uxth	r4, r0
    ptr = os_mbuf_extend(m, sizeof(crc));
   15ad4:	2102      	movs	r1, #2
   15ad6:	4640      	mov	r0, r8
   15ad8:	f7f5 f886 	bl	abe8 <os_mbuf_extend>
    if (!ptr) {
   15adc:	2800      	cmp	r0, #0
   15ade:	d070      	beq.n	15bc2 <shell_nlip_mtx+0x12a>
        rc = -1;
        goto err;
    }
    memcpy(ptr, &crc, sizeof(crc));
   15ae0:	8004      	strh	r4, [r0, #0]

    totlen = OS_MBUF_PKTHDR(m)->omp_len;
   15ae2:	f8b8 5010 	ldrh.w	r5, [r8, #16]
    off = 0;
    bodylen = 0;
    rb_off = 0;

    rc = console_lock(OS_TICKS_PER_SEC);
   15ae6:	2080      	movs	r0, #128	; 0x80
   15ae8:	f7fd fd66 	bl	135b8 <console_lock>
    if (rc != OS_OK) {
   15aec:	4682      	mov	sl, r0
   15aee:	b118      	cbz	r0, 15af8 <shell_nlip_mtx+0x60>
end:
    (void)console_unlock();

err:
    return (rc);
}
   15af0:	4650      	mov	r0, sl
   15af2:	b00b      	add	sp, #44	; 0x2c
   15af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    console_write(pkt_seq, sizeof(pkt_seq));
   15af8:	2103      	movs	r1, #3
   15afa:	a802      	add	r0, sp, #8
   15afc:	f7fd fe86 	bl	1380c <console_write>
    dlen = htons(totlen);
   15b00:	022b      	lsls	r3, r5, #8
   15b02:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    memcpy(readbuf, &dlen, sizeof(dlen));
   15b06:	f8ad 301c 	strh.w	r3, [sp, #28]
    rc = console_lock(OS_TICKS_PER_SEC);
   15b0a:	46d3      	mov	fp, sl
    bodylen = 0;
   15b0c:	2600      	movs	r6, #0
    rb_off += 2;
   15b0e:	2302      	movs	r3, #2
    off = 0;
   15b10:	46b1      	mov	r9, r6
    while (totlen > 0) {
   15b12:	e01c      	b.n	15b4e <shell_nlip_mtx+0xb6>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   15b14:	aa07      	add	r2, sp, #28
   15b16:	4413      	add	r3, r2
   15b18:	4622      	mov	r2, r4
   15b1a:	4649      	mov	r1, r9
   15b1c:	4640      	mov	r0, r8
   15b1e:	f7f4 ff5e 	bl	a9de <os_mbuf_copydata>
            if (rc != 0) {
   15b22:	4683      	mov	fp, r0
   15b24:	2800      	cmp	r0, #0
   15b26:	d14a      	bne.n	15bbe <shell_nlip_mtx+0x126>
            elen = base64_encode(readbuf, dlen + rb_off, encodebuf, 0);
   15b28:	2300      	movs	r3, #0
   15b2a:	aa03      	add	r2, sp, #12
   15b2c:	4639      	mov	r1, r7
   15b2e:	a807      	add	r0, sp, #28
   15b30:	f001 ff3c 	bl	179ac <base64_encode>
   15b34:	4607      	mov	r7, r0
            console_write(encodebuf, elen);
   15b36:	4601      	mov	r1, r0
   15b38:	a803      	add	r0, sp, #12
   15b3a:	f7fd fe67 	bl	1380c <console_write>
            bodylen += elen;
   15b3e:	443e      	add	r6, r7
   15b40:	b2b6      	uxth	r6, r6
            totlen -= dlen;
   15b42:	1b2d      	subs	r5, r5, r4
   15b44:	b2ad      	uxth	r5, r5
            off += dlen;
   15b46:	44a1      	add	r9, r4
   15b48:	fa1f f989 	uxth.w	r9, r9
            bodylen = 0;
   15b4c:	4653      	mov	r3, sl
    while (totlen > 0) {
   15b4e:	b335      	cbz	r5, 15b9e <shell_nlip_mtx+0x106>
        dlen = min(SHELL_NLIP_MTX_BUF_SIZE - rb_off, totlen);
   15b50:	f1c3 040c 	rsb	r4, r3, #12
   15b54:	42ac      	cmp	r4, r5
   15b56:	bfa8      	it	ge
   15b58:	462c      	movge	r4, r5
   15b5a:	b2a4      	uxth	r4, r4
        newbodylen = 2 + bodylen + BASE64_ENCODE_SIZE(dlen + rb_off) + 1;
   15b5c:	191f      	adds	r7, r3, r4
   15b5e:	1e79      	subs	r1, r7, #1
   15b60:	4a1a      	ldr	r2, [pc, #104]	; (15bcc <shell_nlip_mtx+0x134>)
   15b62:	fb82 0201 	smull	r0, r2, r2, r1
   15b66:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   15b6a:	3201      	adds	r2, #1
   15b6c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   15b70:	b292      	uxth	r2, r2
   15b72:	3203      	adds	r2, #3
   15b74:	b292      	uxth	r2, r2
        if (newbodylen > MGMT_NLIP_MAX_FRAME) {
   15b76:	2a7f      	cmp	r2, #127	; 0x7f
   15b78:	d9cc      	bls.n	15b14 <shell_nlip_mtx+0x7c>
            elen = base64_pad(encodebuf, bodylen);
   15b7a:	4631      	mov	r1, r6
   15b7c:	a803      	add	r0, sp, #12
   15b7e:	f001 ff5f 	bl	17a40 <base64_pad>
   15b82:	4601      	mov	r1, r0
            console_write(encodebuf, elen);
   15b84:	a803      	add	r0, sp, #12
   15b86:	f7fd fe41 	bl	1380c <console_write>
            console_write("\n", 1);
   15b8a:	2101      	movs	r1, #1
   15b8c:	4810      	ldr	r0, [pc, #64]	; (15bd0 <shell_nlip_mtx+0x138>)
   15b8e:	f7fd fe3d 	bl	1380c <console_write>
            console_write(esc_seq, sizeof(esc_seq));
   15b92:	2102      	movs	r1, #2
   15b94:	a801      	add	r0, sp, #4
   15b96:	f7fd fe39 	bl	1380c <console_write>
            bodylen = 0;
   15b9a:	2600      	movs	r6, #0
   15b9c:	e7d6      	b.n	15b4c <shell_nlip_mtx+0xb4>
    elen = base64_pad(encodebuf, bodylen);
   15b9e:	4631      	mov	r1, r6
   15ba0:	a803      	add	r0, sp, #12
   15ba2:	f001 ff4d 	bl	17a40 <base64_pad>
   15ba6:	4601      	mov	r1, r0
    console_write(encodebuf, elen);
   15ba8:	a803      	add	r0, sp, #12
   15baa:	f7fd fe2f 	bl	1380c <console_write>
    console_write("\n", 1);
   15bae:	2101      	movs	r1, #1
   15bb0:	4807      	ldr	r0, [pc, #28]	; (15bd0 <shell_nlip_mtx+0x138>)
   15bb2:	f7fd fe2b 	bl	1380c <console_write>
   15bb6:	46da      	mov	sl, fp
    (void)console_unlock();
   15bb8:	f7fd fd18 	bl	135ec <console_unlock>
   15bbc:	e798      	b.n	15af0 <shell_nlip_mtx+0x58>
            rc = os_mbuf_copydata(m, off, dlen, readbuf + rb_off);
   15bbe:	4682      	mov	sl, r0
   15bc0:	e7fa      	b.n	15bb8 <shell_nlip_mtx+0x120>
        rc = -1;
   15bc2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    return (rc);
   15bc6:	e793      	b.n	15af0 <shell_nlip_mtx+0x58>
   15bc8:	00027504 	.word	0x00027504
   15bcc:	55555556 	.word	0x55555556
   15bd0:	000273a4 	.word	0x000273a4

00015bd4 <shell_event_data_in>:
    return os_mqueue_put(&g_shell_nlip_mq, os_eventq_dflt_get(), m);
}

static void
shell_event_data_in(struct os_event *ev)
{
   15bd4:	b510      	push	{r4, lr}
   15bd6:	e005      	b.n	15be4 <shell_event_data_in+0x10>
   15bd8:	4604      	mov	r4, r0
        m = os_mqueue_get(&g_shell_nlip_mq);
        if (!m) {
            break;
        }

        (void) shell_nlip_mtx(m);
   15bda:	f7ff ff5d 	bl	15a98 <shell_nlip_mtx>

        os_mbuf_free_chain(m);
   15bde:	4620      	mov	r0, r4
   15be0:	f7f4 fe87 	bl	a8f2 <os_mbuf_free_chain>
        m = os_mqueue_get(&g_shell_nlip_mq);
   15be4:	4802      	ldr	r0, [pc, #8]	; (15bf0 <shell_event_data_in+0x1c>)
   15be6:	f7f4 fe1a 	bl	a81e <os_mqueue_get>
        if (!m) {
   15bea:	2800      	cmp	r0, #0
   15bec:	d1f4      	bne.n	15bd8 <shell_event_data_in+0x4>
    }
}
   15bee:	bd10      	pop	{r4, pc}
   15bf0:	20005334 	.word	0x20005334

00015bf4 <shell_nlip_clear_pkt>:
{
   15bf4:	b508      	push	{r3, lr}
    if (g_nlip_mbuf) {
   15bf6:	4b06      	ldr	r3, [pc, #24]	; (15c10 <shell_nlip_clear_pkt+0x1c>)
   15bf8:	6818      	ldr	r0, [r3, #0]
   15bfa:	b120      	cbz	r0, 15c06 <shell_nlip_clear_pkt+0x12>
        os_mbuf_free_chain(g_nlip_mbuf);
   15bfc:	f7f4 fe79 	bl	a8f2 <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   15c00:	4b03      	ldr	r3, [pc, #12]	; (15c10 <shell_nlip_clear_pkt+0x1c>)
   15c02:	2200      	movs	r2, #0
   15c04:	601a      	str	r2, [r3, #0]
    g_nlip_expected_len = 0;
   15c06:	4b03      	ldr	r3, [pc, #12]	; (15c14 <shell_nlip_clear_pkt+0x20>)
   15c08:	2200      	movs	r2, #0
   15c0a:	801a      	strh	r2, [r3, #0]
}
   15c0c:	bd08      	pop	{r3, pc}
   15c0e:	bf00      	nop
   15c10:	20005328 	.word	0x20005328
   15c14:	20005324 	.word	0x20005324

00015c18 <shell_nlip_process>:
{
   15c18:	b538      	push	{r3, r4, r5, lr}
   15c1a:	4605      	mov	r5, r0
    rc = base64_decode(data, data);
   15c1c:	4601      	mov	r1, r0
   15c1e:	f001 ff25 	bl	17a6c <base64_decode>
    if (rc < 0) {
   15c22:	1e04      	subs	r4, r0, #0
   15c24:	db18      	blt.n	15c58 <shell_nlip_process+0x40>
    if (g_nlip_mbuf == NULL) {
   15c26:	4b30      	ldr	r3, [pc, #192]	; (15ce8 <shell_nlip_process+0xd0>)
   15c28:	681b      	ldr	r3, [r3, #0]
   15c2a:	b1bb      	cbz	r3, 15c5c <shell_nlip_process+0x44>
    copy_len = min(g_nlip_expected_len - OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   15c2c:	4b2e      	ldr	r3, [pc, #184]	; (15ce8 <shell_nlip_process+0xd0>)
   15c2e:	6818      	ldr	r0, [r3, #0]
   15c30:	8a01      	ldrh	r1, [r0, #16]
   15c32:	4b2e      	ldr	r3, [pc, #184]	; (15cec <shell_nlip_process+0xd4>)
   15c34:	881b      	ldrh	r3, [r3, #0]
   15c36:	1a5b      	subs	r3, r3, r1
   15c38:	42a3      	cmp	r3, r4
   15c3a:	bfa8      	it	ge
   15c3c:	4623      	movge	r3, r4
    rc = os_mbuf_copyinto(g_nlip_mbuf, OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len,
   15c3e:	b29b      	uxth	r3, r3
   15c40:	462a      	mov	r2, r5
   15c42:	f7f4 ff8d 	bl	ab60 <os_mbuf_copyinto>
    if (rc != 0) {
   15c46:	4604      	mov	r4, r0
   15c48:	b930      	cbnz	r0, 15c58 <shell_nlip_process+0x40>
    if (OS_MBUF_PKTHDR(g_nlip_mbuf)->omp_len == g_nlip_expected_len) {
   15c4a:	4b27      	ldr	r3, [pc, #156]	; (15ce8 <shell_nlip_process+0xd0>)
   15c4c:	681d      	ldr	r5, [r3, #0]
   15c4e:	8a2a      	ldrh	r2, [r5, #16]
   15c50:	4b26      	ldr	r3, [pc, #152]	; (15cec <shell_nlip_process+0xd4>)
   15c52:	881b      	ldrh	r3, [r3, #0]
   15c54:	429a      	cmp	r2, r3
   15c56:	d014      	beq.n	15c82 <shell_nlip_process+0x6a>
}
   15c58:	4620      	mov	r0, r4
   15c5a:	bd38      	pop	{r3, r4, r5, pc}
        if (len < 2) {
   15c5c:	2c01      	cmp	r4, #1
   15c5e:	dd3c      	ble.n	15cda <shell_nlip_process+0xc2>
        g_nlip_expected_len = ntohs(*(uint16_t *) data);
   15c60:	882b      	ldrh	r3, [r5, #0]
   15c62:	0218      	lsls	r0, r3, #8
   15c64:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
   15c68:	b280      	uxth	r0, r0
   15c6a:	4b20      	ldr	r3, [pc, #128]	; (15cec <shell_nlip_process+0xd4>)
   15c6c:	8018      	strh	r0, [r3, #0]
        g_nlip_mbuf = os_msys_get_pkthdr(g_nlip_expected_len, 0);
   15c6e:	2100      	movs	r1, #0
   15c70:	f7f3 ffa2 	bl	9bb8 <os_msys_get_pkthdr>
   15c74:	4b1c      	ldr	r3, [pc, #112]	; (15ce8 <shell_nlip_process+0xd0>)
   15c76:	6018      	str	r0, [r3, #0]
        if (!g_nlip_mbuf) {
   15c78:	2800      	cmp	r0, #0
   15c7a:	d031      	beq.n	15ce0 <shell_nlip_process+0xc8>
        data += sizeof(uint16_t);
   15c7c:	3502      	adds	r5, #2
        len -= sizeof(uint16_t);
   15c7e:	3c02      	subs	r4, #2
   15c80:	e7d4      	b.n	15c2c <shell_nlip_process+0x14>
        if (g_shell_nlip_in_func) {
   15c82:	4b1b      	ldr	r3, [pc, #108]	; (15cf0 <shell_nlip_process+0xd8>)
   15c84:	681b      	ldr	r3, [r3, #0]
   15c86:	b323      	cbz	r3, 15cd2 <shell_nlip_process+0xba>
            crc = CRC16_INITIAL_CRC;
   15c88:	2000      	movs	r0, #0
   15c8a:	e004      	b.n	15c96 <shell_nlip_process+0x7e>
                crc = crc16_ccitt(crc, m->om_data, m->om_len);
   15c8c:	88ea      	ldrh	r2, [r5, #6]
   15c8e:	6829      	ldr	r1, [r5, #0]
   15c90:	f001 fb40 	bl	17314 <crc16_ccitt>
            for (m = g_nlip_mbuf; m; m = SLIST_NEXT(m, om_next)) {
   15c94:	68ed      	ldr	r5, [r5, #12]
   15c96:	2d00      	cmp	r5, #0
   15c98:	d1f8      	bne.n	15c8c <shell_nlip_process+0x74>
            if (crc == 0 && g_nlip_expected_len >= sizeof(crc)) {
   15c9a:	b918      	cbnz	r0, 15ca4 <shell_nlip_process+0x8c>
   15c9c:	4b13      	ldr	r3, [pc, #76]	; (15cec <shell_nlip_process+0xd4>)
   15c9e:	881b      	ldrh	r3, [r3, #0]
   15ca0:	2b01      	cmp	r3, #1
   15ca2:	d809      	bhi.n	15cb8 <shell_nlip_process+0xa0>
                os_mbuf_free_chain(g_nlip_mbuf);
   15ca4:	4b10      	ldr	r3, [pc, #64]	; (15ce8 <shell_nlip_process+0xd0>)
   15ca6:	6818      	ldr	r0, [r3, #0]
   15ca8:	f7f4 fe23 	bl	a8f2 <os_mbuf_free_chain>
        g_nlip_mbuf = NULL;
   15cac:	2300      	movs	r3, #0
   15cae:	4a0e      	ldr	r2, [pc, #56]	; (15ce8 <shell_nlip_process+0xd0>)
   15cb0:	6013      	str	r3, [r2, #0]
        g_nlip_expected_len = 0;
   15cb2:	4a0e      	ldr	r2, [pc, #56]	; (15cec <shell_nlip_process+0xd4>)
   15cb4:	8013      	strh	r3, [r2, #0]
   15cb6:	e7cf      	b.n	15c58 <shell_nlip_process+0x40>
                os_mbuf_adj(g_nlip_mbuf, -sizeof(crc));
   15cb8:	4d0b      	ldr	r5, [pc, #44]	; (15ce8 <shell_nlip_process+0xd0>)
   15cba:	f06f 0101 	mvn.w	r1, #1
   15cbe:	6828      	ldr	r0, [r5, #0]
   15cc0:	f7f4 feba 	bl	aa38 <os_mbuf_adj>
                g_shell_nlip_in_func(g_nlip_mbuf, g_shell_nlip_in_arg);
   15cc4:	4b0a      	ldr	r3, [pc, #40]	; (15cf0 <shell_nlip_process+0xd8>)
   15cc6:	681b      	ldr	r3, [r3, #0]
   15cc8:	4a0a      	ldr	r2, [pc, #40]	; (15cf4 <shell_nlip_process+0xdc>)
   15cca:	6811      	ldr	r1, [r2, #0]
   15ccc:	6828      	ldr	r0, [r5, #0]
   15cce:	4798      	blx	r3
   15cd0:	e7ec      	b.n	15cac <shell_nlip_process+0x94>
            os_mbuf_free_chain(g_nlip_mbuf);
   15cd2:	4628      	mov	r0, r5
   15cd4:	f7f4 fe0d 	bl	a8f2 <os_mbuf_free_chain>
   15cd8:	e7e8      	b.n	15cac <shell_nlip_process+0x94>
            rc = -1;
   15cda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15cde:	e7bb      	b.n	15c58 <shell_nlip_process+0x40>
            rc = -1;
   15ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15ce4:	e7b8      	b.n	15c58 <shell_nlip_process+0x40>
   15ce6:	bf00      	nop
   15ce8:	20005328 	.word	0x20005328
   15cec:	20005324 	.word	0x20005324
   15cf0:	20005330 	.word	0x20005330
   15cf4:	2000532c 	.word	0x2000532c

00015cf8 <shell_nlip_init>:

void
shell_nlip_init(void)
{
   15cf8:	b508      	push	{r3, lr}
    os_mqueue_init(&g_shell_nlip_mq, shell_event_data_in, NULL);
   15cfa:	2200      	movs	r2, #0
   15cfc:	4902      	ldr	r1, [pc, #8]	; (15d08 <shell_nlip_init+0x10>)
   15cfe:	4803      	ldr	r0, [pc, #12]	; (15d0c <shell_nlip_init+0x14>)
   15d00:	f7f4 fd82 	bl	a808 <os_mqueue_init>
}
   15d04:	bd08      	pop	{r3, pc}
   15d06:	bf00      	nop
   15d08:	00015bd5 	.word	0x00015bd5
   15d0c:	20005334 	.word	0x20005334

00015d10 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   15d10:	b500      	push	{lr}
   15d12:	b083      	sub	sp, #12
   15d14:	4602      	mov	r2, r0
   15d16:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   15d18:	69d3      	ldr	r3, [r2, #28]
   15d1a:	9300      	str	r3, [sp, #0]
   15d1c:	7ed3      	ldrb	r3, [r2, #27]
   15d1e:	7e92      	ldrb	r2, [r2, #26]
   15d20:	4903      	ldr	r1, [pc, #12]	; (15d30 <shell_os_ls_dev+0x20>)
   15d22:	f7fc fecd 	bl	12ac0 <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   15d26:	2000      	movs	r0, #0
   15d28:	b003      	add	sp, #12
   15d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   15d2e:	bf00      	nop
   15d30:	00027508 	.word	0x00027508

00015d34 <shell_os_mpool_display_cmd>:
{
   15d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d36:	b091      	sub	sp, #68	; 0x44
   15d38:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   15d3a:	2901      	cmp	r1, #1
   15d3c:	dd04      	ble.n	15d48 <shell_os_mpool_display_cmd+0x14>
   15d3e:	6855      	ldr	r5, [r2, #4]
   15d40:	782b      	ldrb	r3, [r5, #0]
   15d42:	b913      	cbnz	r3, 15d4a <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   15d44:	2500      	movs	r5, #0
   15d46:	e000      	b.n	15d4a <shell_os_mpool_display_cmd+0x16>
   15d48:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   15d4a:	491d      	ldr	r1, [pc, #116]	; (15dc0 <shell_os_mpool_display_cmd+0x8c>)
   15d4c:	4630      	mov	r0, r6
   15d4e:	f7fc feb7 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   15d52:	4b1c      	ldr	r3, [pc, #112]	; (15dc4 <shell_os_mpool_display_cmd+0x90>)
   15d54:	9302      	str	r3, [sp, #8]
   15d56:	4b1c      	ldr	r3, [pc, #112]	; (15dc8 <shell_os_mpool_display_cmd+0x94>)
   15d58:	9301      	str	r3, [sp, #4]
   15d5a:	4b1c      	ldr	r3, [pc, #112]	; (15dcc <shell_os_mpool_display_cmd+0x98>)
   15d5c:	9300      	str	r3, [sp, #0]
   15d5e:	4b1c      	ldr	r3, [pc, #112]	; (15dd0 <shell_os_mpool_display_cmd+0x9c>)
   15d60:	4a1c      	ldr	r2, [pc, #112]	; (15dd4 <shell_os_mpool_display_cmd+0xa0>)
   15d62:	491d      	ldr	r1, [pc, #116]	; (15dd8 <shell_os_mpool_display_cmd+0xa4>)
   15d64:	4630      	mov	r0, r6
   15d66:	f7fc feab 	bl	12ac0 <streamer_printf>
    found = 0;
   15d6a:	2700      	movs	r7, #0
    mp = NULL;
   15d6c:	463c      	mov	r4, r7
   15d6e:	e00b      	b.n	15d88 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   15d70:	9b07      	ldr	r3, [sp, #28]
   15d72:	9302      	str	r3, [sp, #8]
   15d74:	9a06      	ldr	r2, [sp, #24]
   15d76:	9201      	str	r2, [sp, #4]
   15d78:	9a05      	ldr	r2, [sp, #20]
   15d7a:	9200      	str	r2, [sp, #0]
   15d7c:	9b04      	ldr	r3, [sp, #16]
   15d7e:	aa08      	add	r2, sp, #32
   15d80:	4916      	ldr	r1, [pc, #88]	; (15ddc <shell_os_mpool_display_cmd+0xa8>)
   15d82:	4630      	mov	r0, r6
   15d84:	f7fc fe9c 	bl	12ac0 <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   15d88:	a904      	add	r1, sp, #16
   15d8a:	4620      	mov	r0, r4
   15d8c:	f7f3 fe84 	bl	9a98 <os_mempool_info_get_next>
        if (mp == NULL) {
   15d90:	4604      	mov	r4, r0
   15d92:	b148      	cbz	r0, 15da8 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   15d94:	2d00      	cmp	r5, #0
   15d96:	d0eb      	beq.n	15d70 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   15d98:	a908      	add	r1, sp, #32
   15d9a:	4628      	mov	r0, r5
   15d9c:	f7fa fc98 	bl	106d0 <strcmp>
   15da0:	2800      	cmp	r0, #0
   15da2:	d1f1      	bne.n	15d88 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   15da4:	2701      	movs	r7, #1
   15da6:	e7e3      	b.n	15d70 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   15da8:	b105      	cbz	r5, 15dac <shell_os_mpool_display_cmd+0x78>
   15daa:	b117      	cbz	r7, 15db2 <shell_os_mpool_display_cmd+0x7e>
}
   15dac:	2000      	movs	r0, #0
   15dae:	b011      	add	sp, #68	; 0x44
   15db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   15db2:	462a      	mov	r2, r5
   15db4:	490a      	ldr	r1, [pc, #40]	; (15de0 <shell_os_mpool_display_cmd+0xac>)
   15db6:	4630      	mov	r0, r6
   15db8:	f7fc fe82 	bl	12ac0 <streamer_printf>
   15dbc:	e7f6      	b.n	15dac <shell_os_mpool_display_cmd+0x78>
   15dbe:	bf00      	nop
   15dc0:	00027514 	.word	0x00027514
   15dc4:	00027054 	.word	0x00027054
   15dc8:	00027548 	.word	0x00027548
   15dcc:	00027ff8 	.word	0x00027ff8
   15dd0:	00027520 	.word	0x00027520
   15dd4:	00027528 	.word	0x00027528
   15dd8:	00027530 	.word	0x00027530
   15ddc:	00027550 	.word	0x00027550
   15de0:	00027568 	.word	0x00027568

00015de4 <shell_os_date_cmd>:
{
   15de4:	b530      	push	{r4, r5, lr}
   15de6:	b08f      	sub	sp, #60	; 0x3c
   15de8:	461c      	mov	r4, r3
    if (argc == 0) {
   15dea:	3901      	subs	r1, #1
   15dec:	d00f      	beq.n	15e0e <shell_os_date_cmd+0x2a>
   15dee:	4610      	mov	r0, r2
    } else if (argc == 1) {
   15df0:	2901      	cmp	r1, #1
   15df2:	d132      	bne.n	15e5a <shell_os_date_cmd+0x76>
        rc = datetime_parse(*argv, &tv, &tz);
   15df4:	aa09      	add	r2, sp, #36	; 0x24
   15df6:	a90a      	add	r1, sp, #40	; 0x28
   15df8:	6840      	ldr	r0, [r0, #4]
   15dfa:	f001 f923 	bl	17044 <datetime_parse>
        if (rc == 0) {
   15dfe:	4605      	mov	r5, r0
   15e00:	bb30      	cbnz	r0, 15e50 <shell_os_date_cmd+0x6c>
            rc = os_settimeofday(&tv, &tz);
   15e02:	a909      	add	r1, sp, #36	; 0x24
   15e04:	a80a      	add	r0, sp, #40	; 0x28
   15e06:	f7f4 fb8b 	bl	a520 <os_settimeofday>
   15e0a:	4605      	mov	r5, r0
   15e0c:	e011      	b.n	15e32 <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   15e0e:	a909      	add	r1, sp, #36	; 0x24
   15e10:	a80a      	add	r0, sp, #40	; 0x28
   15e12:	f7f4 fb39 	bl	a488 <os_gettimeofday>
        assert(rc == 0);
   15e16:	b978      	cbnz	r0, 15e38 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   15e18:	2321      	movs	r3, #33	; 0x21
   15e1a:	466a      	mov	r2, sp
   15e1c:	a909      	add	r1, sp, #36	; 0x24
   15e1e:	a80a      	add	r0, sp, #40	; 0x28
   15e20:	f001 fa10 	bl	17244 <datetime_format>
        assert(rc == 0);
   15e24:	4605      	mov	r5, r0
   15e26:	b968      	cbnz	r0, 15e44 <shell_os_date_cmd+0x60>
        streamer_printf(streamer, "%s\n", buf);
   15e28:	466a      	mov	r2, sp
   15e2a:	490d      	ldr	r1, [pc, #52]	; (15e60 <shell_os_date_cmd+0x7c>)
   15e2c:	4620      	mov	r0, r4
   15e2e:	f7fc fe47 	bl	12ac0 <streamer_printf>
}
   15e32:	4628      	mov	r0, r5
   15e34:	b00f      	add	sp, #60	; 0x3c
   15e36:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   15e38:	2300      	movs	r3, #0
   15e3a:	461a      	mov	r2, r3
   15e3c:	4619      	mov	r1, r3
   15e3e:	4618      	mov	r0, r3
   15e40:	f7f3 f9c0 	bl	91c4 <__assert_func>
        assert(rc == 0);
   15e44:	2300      	movs	r3, #0
   15e46:	461a      	mov	r2, r3
   15e48:	4619      	mov	r1, r3
   15e4a:	4618      	mov	r0, r3
   15e4c:	f7f3 f9ba 	bl	91c4 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   15e50:	4904      	ldr	r1, [pc, #16]	; (15e64 <shell_os_date_cmd+0x80>)
   15e52:	4620      	mov	r0, r4
   15e54:	f7fc fe34 	bl	12ac0 <streamer_printf>
   15e58:	e7eb      	b.n	15e32 <shell_os_date_cmd+0x4e>
        rc = -1;
   15e5a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   15e5e:	e7e8      	b.n	15e32 <shell_os_date_cmd+0x4e>
   15e60:	00026e48 	.word	0x00026e48
   15e64:	00027594 	.word	0x00027594

00015e68 <shell_os_reset_cmd>:
{
   15e68:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   15e6a:	200c      	movs	r0, #12
   15e6c:	f7f4 faf8 	bl	a460 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   15e70:	2006      	movs	r0, #6
   15e72:	f7f3 fb08 	bl	9486 <os_reboot>
}
   15e76:	2000      	movs	r0, #0
   15e78:	bd08      	pop	{r3, pc}
	...

00015e7c <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   15e7c:	b510      	push	{r4, lr}
   15e7e:	b082      	sub	sp, #8
   15e80:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   15e82:	4b07      	ldr	r3, [pc, #28]	; (15ea0 <shell_os_ls_dev_cmd+0x24>)
   15e84:	9300      	str	r3, [sp, #0]
   15e86:	4b07      	ldr	r3, [pc, #28]	; (15ea4 <shell_os_ls_dev_cmd+0x28>)
   15e88:	4a07      	ldr	r2, [pc, #28]	; (15ea8 <shell_os_ls_dev_cmd+0x2c>)
   15e8a:	4908      	ldr	r1, [pc, #32]	; (15eac <shell_os_ls_dev_cmd+0x30>)
   15e8c:	4620      	mov	r0, r4
   15e8e:	f7fc fe17 	bl	12ac0 <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   15e92:	4621      	mov	r1, r4
   15e94:	4806      	ldr	r0, [pc, #24]	; (15eb0 <shell_os_ls_dev_cmd+0x34>)
   15e96:	f7f3 fcab 	bl	97f0 <os_dev_walk>
    return 0;
}
   15e9a:	2000      	movs	r0, #0
   15e9c:	b002      	add	sp, #8
   15e9e:	bd10      	pop	{r4, pc}
   15ea0:	00027528 	.word	0x00027528
   15ea4:	000275a8 	.word	0x000275a8
   15ea8:	000275ac 	.word	0x000275ac
   15eac:	000275b0 	.word	0x000275b0
   15eb0:	00015d11 	.word	0x00015d11

00015eb4 <shell_os_tasks_display_cmd>:
{
   15eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15eb6:	b097      	sub	sp, #92	; 0x5c
   15eb8:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   15eba:	2901      	cmp	r1, #1
   15ebc:	dd04      	ble.n	15ec8 <shell_os_tasks_display_cmd+0x14>
   15ebe:	6855      	ldr	r5, [r2, #4]
   15ec0:	782b      	ldrb	r3, [r5, #0]
   15ec2:	b913      	cbnz	r3, 15eca <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   15ec4:	2500      	movs	r5, #0
   15ec6:	e000      	b.n	15eca <shell_os_tasks_display_cmd+0x16>
   15ec8:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   15eca:	4928      	ldr	r1, [pc, #160]	; (15f6c <shell_os_tasks_display_cmd+0xb8>)
   15ecc:	4630      	mov	r0, r6
   15ece:	f7fc fdf7 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   15ed2:	4b27      	ldr	r3, [pc, #156]	; (15f70 <shell_os_tasks_display_cmd+0xbc>)
   15ed4:	9307      	str	r3, [sp, #28]
   15ed6:	4b27      	ldr	r3, [pc, #156]	; (15f74 <shell_os_tasks_display_cmd+0xc0>)
   15ed8:	9306      	str	r3, [sp, #24]
   15eda:	4b27      	ldr	r3, [pc, #156]	; (15f78 <shell_os_tasks_display_cmd+0xc4>)
   15edc:	9305      	str	r3, [sp, #20]
   15ede:	4b27      	ldr	r3, [pc, #156]	; (15f7c <shell_os_tasks_display_cmd+0xc8>)
   15ee0:	9304      	str	r3, [sp, #16]
   15ee2:	4b27      	ldr	r3, [pc, #156]	; (15f80 <shell_os_tasks_display_cmd+0xcc>)
   15ee4:	9303      	str	r3, [sp, #12]
   15ee6:	4b27      	ldr	r3, [pc, #156]	; (15f84 <shell_os_tasks_display_cmd+0xd0>)
   15ee8:	9302      	str	r3, [sp, #8]
   15eea:	4b27      	ldr	r3, [pc, #156]	; (15f88 <shell_os_tasks_display_cmd+0xd4>)
   15eec:	9301      	str	r3, [sp, #4]
   15eee:	4b27      	ldr	r3, [pc, #156]	; (15f8c <shell_os_tasks_display_cmd+0xd8>)
   15ef0:	9300      	str	r3, [sp, #0]
   15ef2:	4b27      	ldr	r3, [pc, #156]	; (15f90 <shell_os_tasks_display_cmd+0xdc>)
   15ef4:	4a27      	ldr	r2, [pc, #156]	; (15f94 <shell_os_tasks_display_cmd+0xe0>)
   15ef6:	4928      	ldr	r1, [pc, #160]	; (15f98 <shell_os_tasks_display_cmd+0xe4>)
   15ef8:	4630      	mov	r0, r6
   15efa:	f7fc fde1 	bl	12ac0 <streamer_printf>
    found = 0;
   15efe:	2700      	movs	r7, #0
    prev_task = NULL;
   15f00:	463c      	mov	r4, r7
   15f02:	e017      	b.n	15f34 <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   15f04:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   15f08:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   15f0c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   15f10:	980d      	ldr	r0, [sp, #52]	; 0x34
   15f12:	9006      	str	r0, [sp, #24]
   15f14:	980c      	ldr	r0, [sp, #48]	; 0x30
   15f16:	9005      	str	r0, [sp, #20]
   15f18:	9104      	str	r1, [sp, #16]
   15f1a:	9303      	str	r3, [sp, #12]
   15f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15f1e:	9302      	str	r3, [sp, #8]
   15f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15f22:	9101      	str	r1, [sp, #4]
   15f24:	9200      	str	r2, [sp, #0]
   15f26:	f89d 3020 	ldrb.w	r3, [sp, #32]
   15f2a:	aa0e      	add	r2, sp, #56	; 0x38
   15f2c:	491b      	ldr	r1, [pc, #108]	; (15f9c <shell_os_tasks_display_cmd+0xe8>)
   15f2e:	4630      	mov	r0, r6
   15f30:	f7fc fdc6 	bl	12ac0 <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   15f34:	a908      	add	r1, sp, #32
   15f36:	4620      	mov	r0, r4
   15f38:	f7f4 f9c2 	bl	a2c0 <os_task_info_get_next>
        if (prev_task == NULL) {
   15f3c:	4604      	mov	r4, r0
   15f3e:	b148      	cbz	r0, 15f54 <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   15f40:	2d00      	cmp	r5, #0
   15f42:	d0df      	beq.n	15f04 <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   15f44:	a90e      	add	r1, sp, #56	; 0x38
   15f46:	4628      	mov	r0, r5
   15f48:	f7fa fbc2 	bl	106d0 <strcmp>
   15f4c:	2800      	cmp	r0, #0
   15f4e:	d1f1      	bne.n	15f34 <shell_os_tasks_display_cmd+0x80>
                found = 1;
   15f50:	2701      	movs	r7, #1
   15f52:	e7d7      	b.n	15f04 <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   15f54:	b105      	cbz	r5, 15f58 <shell_os_tasks_display_cmd+0xa4>
   15f56:	b117      	cbz	r7, 15f5e <shell_os_tasks_display_cmd+0xaa>
}
   15f58:	2000      	movs	r0, #0
   15f5a:	b017      	add	sp, #92	; 0x5c
   15f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   15f5e:	462a      	mov	r2, r5
   15f60:	490f      	ldr	r1, [pc, #60]	; (15fa0 <shell_os_tasks_display_cmd+0xec>)
   15f62:	4630      	mov	r0, r6
   15f64:	f7fc fdac 	bl	12ac0 <streamer_printf>
   15f68:	e7f6      	b.n	15f58 <shell_os_tasks_display_cmd+0xa4>
   15f6a:	bf00      	nop
   15f6c:	000275bc 	.word	0x000275bc
   15f70:	000275a8 	.word	0x000275a8
   15f74:	00027600 	.word	0x00027600
   15f78:	00027608 	.word	0x00027608
   15f7c:	0002706c 	.word	0x0002706c
   15f80:	00027610 	.word	0x00027610
   15f84:	00027618 	.word	0x00027618
   15f88:	00027084 	.word	0x00027084
   15f8c:	00027060 	.word	0x00027060
   15f90:	000275c8 	.word	0x000275c8
   15f94:	000275cc 	.word	0x000275cc
   15f98:	000275d4 	.word	0x000275d4
   15f9c:	0002761c 	.word	0x0002761c
   15fa0:	00027648 	.word	0x00027648

00015fa4 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   15fa4:	b530      	push	{r4, r5, lr}
   15fa6:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   15fa8:	4c0a      	ldr	r4, [pc, #40]	; (15fd4 <shell_os_register+0x30>)
   15faa:	e000      	b.n	15fae <shell_os_register+0xa>
   15fac:	3410      	adds	r4, #16
   15fae:	68a3      	ldr	r3, [r4, #8]
   15fb0:	b16b      	cbz	r3, 15fce <shell_os_register+0x2a>
        rc = shell_cmd_register(cmd);
   15fb2:	4620      	mov	r0, r4
   15fb4:	f7ff fd0a 	bl	159cc <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   15fb8:	2800      	cmp	r0, #0
   15fba:	d0f7      	beq.n	15fac <shell_os_register+0x8>
   15fbc:	2000      	movs	r0, #0
   15fbe:	9000      	str	r0, [sp, #0]
   15fc0:	4b05      	ldr	r3, [pc, #20]	; (15fd8 <shell_os_register+0x34>)
   15fc2:	681d      	ldr	r5, [r3, #0]
   15fc4:	4603      	mov	r3, r0
   15fc6:	4602      	mov	r2, r0
   15fc8:	4601      	mov	r1, r0
   15fca:	47a8      	blx	r5
   15fcc:	e7ee      	b.n	15fac <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   15fce:	b003      	add	sp, #12
   15fd0:	bd30      	pop	{r4, r5, pc}
   15fd2:	bf00      	nop
   15fd4:	00027738 	.word	0x00027738
   15fd8:	20000308 	.word	0x20000308

00015fdc <shell_ticks_cmd>:
/**
 * Handles the 'ticks' command
 */
int
shell_ticks_cmd(int argc, char **argv)
{
   15fdc:	b510      	push	{r4, lr}
    if (argc > 1) {
   15fde:	2801      	cmp	r0, #1
   15fe0:	dd16      	ble.n	16010 <shell_ticks_cmd+0x34>
        if (!strcmp(argv[1], "on")) {
   15fe2:	684c      	ldr	r4, [r1, #4]
   15fe4:	490d      	ldr	r1, [pc, #52]	; (1601c <shell_ticks_cmd+0x40>)
   15fe6:	4620      	mov	r0, r4
   15fe8:	f7fa fb72 	bl	106d0 <strcmp>
   15fec:	b150      	cbz	r0, 16004 <shell_ticks_cmd+0x28>
            console_yes_ticks();
            console_printf(" Console Ticks on\n");
        }
        else if (!strcmp(argv[1],"off")) {
   15fee:	490c      	ldr	r1, [pc, #48]	; (16020 <shell_ticks_cmd+0x44>)
   15ff0:	4620      	mov	r0, r4
   15ff2:	f7fa fb6d 	bl	106d0 <strcmp>
   15ff6:	b970      	cbnz	r0, 16016 <shell_ticks_cmd+0x3a>
            console_printf(" Console Ticks off\n");
   15ff8:	480a      	ldr	r0, [pc, #40]	; (16024 <shell_ticks_cmd+0x48>)
   15ffa:	f7fd ff07 	bl	13e0c <console_printf>
            console_no_ticks();
   15ffe:	f7fd ff13 	bl	13e28 <console_no_ticks>
        }
        return 0;
   16002:	e008      	b.n	16016 <shell_ticks_cmd+0x3a>
            console_yes_ticks();
   16004:	f7fd ff16 	bl	13e34 <console_yes_ticks>
            console_printf(" Console Ticks on\n");
   16008:	4807      	ldr	r0, [pc, #28]	; (16028 <shell_ticks_cmd+0x4c>)
   1600a:	f7fd feff 	bl	13e0c <console_printf>
   1600e:	e002      	b.n	16016 <shell_ticks_cmd+0x3a>
    }
    console_printf(" Usage: ticks [on|off]\n");
   16010:	4806      	ldr	r0, [pc, #24]	; (1602c <shell_ticks_cmd+0x50>)
   16012:	f7fd fefb 	bl	13e0c <console_printf>
    return 0;
}
   16016:	2000      	movs	r0, #0
   16018:	bd10      	pop	{r4, pc}
   1601a:	bf00      	nop
   1601c:	000277c8 	.word	0x000277c8
   16020:	00026da8 	.word	0x00026da8
   16024:	000277e0 	.word	0x000277e0
   16028:	000277cc 	.word	0x000277cc
   1602c:	000277f4 	.word	0x000277f4

00016030 <shell_prompt_register>:
};


void
shell_prompt_register(void)
{
   16030:	b508      	push	{r3, lr}
    shell_register(SHELL_PROMPT, prompt_commands);
   16032:	4902      	ldr	r1, [pc, #8]	; (1603c <shell_prompt_register+0xc>)
   16034:	4802      	ldr	r0, [pc, #8]	; (16040 <shell_prompt_register+0x10>)
   16036:	f7ff fca7 	bl	15988 <shell_register>
}
   1603a:	bd08      	pop	{r3, pc}
   1603c:	00027850 	.word	0x00027850
   16040:	0002780c 	.word	0x0002780c

00016044 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   16044:	88c3      	ldrh	r3, [r0, #6]
   16046:	f013 0f01 	tst.w	r3, #1
   1604a:	d001      	beq.n	16050 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   1604c:	2038      	movs	r0, #56	; 0x38
   1604e:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   16050:	2014      	movs	r0, #20
    }
}
   16052:	4770      	bx	lr

00016054 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   16054:	b570      	push	{r4, r5, r6, lr}
   16056:	4606      	mov	r6, r0
   16058:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1605a:	4b0f      	ldr	r3, [pc, #60]	; (16098 <stats_register_internal+0x44>)
   1605c:	681c      	ldr	r4, [r3, #0]
   1605e:	e000      	b.n	16062 <stats_register_internal+0xe>
   16060:	6924      	ldr	r4, [r4, #16]
   16062:	b14c      	cbz	r4, 16078 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   16064:	4631      	mov	r1, r6
   16066:	6820      	ldr	r0, [r4, #0]
   16068:	f7fa fb32 	bl	106d0 <strcmp>
   1606c:	b188      	cbz	r0, 16092 <stats_register_internal+0x3e>
   1606e:	42ac      	cmp	r4, r5
   16070:	d1f6      	bne.n	16060 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   16072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16076:	e00b      	b.n	16090 <stats_register_internal+0x3c>
    shdr->s_name = name;
   16078:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1607a:	2000      	movs	r0, #0
   1607c:	6128      	str	r0, [r5, #16]
   1607e:	4b06      	ldr	r3, [pc, #24]	; (16098 <stats_register_internal+0x44>)
   16080:	685a      	ldr	r2, [r3, #4]
   16082:	6015      	str	r5, [r2, #0]
   16084:	3510      	adds	r5, #16
   16086:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   16088:	4a04      	ldr	r2, [pc, #16]	; (1609c <stats_register_internal+0x48>)
   1608a:	6953      	ldr	r3, [r2, #20]
   1608c:	3301      	adds	r3, #1
   1608e:	6153      	str	r3, [r2, #20]
}
   16090:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   16092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16096:	e7fb      	b.n	16090 <stats_register_internal+0x3c>
   16098:	200002f0 	.word	0x200002f0
   1609c:	2000534c 	.word	0x2000534c

000160a0 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   160a0:	7943      	ldrb	r3, [r0, #5]
   160a2:	7900      	ldrb	r0, [r0, #4]
}
   160a4:	fb03 f000 	mul.w	r0, r3, r0
   160a8:	4770      	bx	lr
	...

000160ac <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   160ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160b0:	b085      	sub	sp, #20
   160b2:	4604      	mov	r4, r0
   160b4:	4688      	mov	r8, r1
   160b6:	4617      	mov	r7, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   160b8:	f7ff ffc4 	bl	16044 <stats_offset>
   160bc:	4681      	mov	r9, r0
   160be:	b285      	uxth	r5, r0
    cur = start;
    end = start + stats_size(hdr);
   160c0:	4620      	mov	r0, r4
   160c2:	f7ff ffed 	bl	160a0 <stats_size>
   160c6:	fa15 f680 	uxtah	r6, r5, r0
   160ca:	b2b6      	uxth	r6, r6

    while (cur < end) {
   160cc:	e00d      	b.n	160ea <stats_walk+0x3e>
         * offset.  This annotation allows for naming only certain statistics,
         * and doesn't enforce ordering restrictions on the stats name map.
         */
        for (i = 0; i < hdr->s_map_cnt; ++i) {
            if (hdr->s_map[i].snm_off == cur) {
                name = hdr->s_map[i].snm_name;
   160ce:	f8d0 2002 	ldr.w	r2, [r0, #2]
                break;
   160d2:	e000      	b.n	160d6 <stats_walk+0x2a>
        name = NULL;
   160d4:	2200      	movs	r2, #0
#endif
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
   160d6:	b1ca      	cbz	r2, 1610c <stats_walk+0x60>
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
            name_buf[len] = '\0';
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   160d8:	462b      	mov	r3, r5
   160da:	4639      	mov	r1, r7
   160dc:	4620      	mov	r0, r4
   160de:	47c0      	blx	r8
        if (rc != 0) {
   160e0:	4603      	mov	r3, r0
   160e2:	bb40      	cbnz	r0, 16136 <stats_walk+0x8a>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   160e4:	7923      	ldrb	r3, [r4, #4]
   160e6:	441d      	add	r5, r3
   160e8:	b2ad      	uxth	r5, r5
    while (cur < end) {
   160ea:	42b5      	cmp	r5, r6
   160ec:	d222      	bcs.n	16134 <stats_walk+0x88>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   160ee:	2300      	movs	r3, #0
   160f0:	68e2      	ldr	r2, [r4, #12]
   160f2:	429a      	cmp	r2, r3
   160f4:	ddee      	ble.n	160d4 <stats_walk+0x28>
            if (hdr->s_map[i].snm_off == cur) {
   160f6:	68a2      	ldr	r2, [r4, #8]
   160f8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   160fc:	eb02 0041 	add.w	r0, r2, r1, lsl #1
   16100:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
   16104:	42aa      	cmp	r2, r5
   16106:	d0e2      	beq.n	160ce <stats_walk+0x22>
        for (i = 0; i < hdr->s_map_cnt; ++i) {
   16108:	3301      	adds	r3, #1
   1610a:	e7f1      	b.n	160f0 <stats_walk+0x44>
            ent_n = (cur - start) / hdr->s_size;
   1610c:	fa1f f389 	uxth.w	r3, r9
   16110:	1aeb      	subs	r3, r5, r3
   16112:	7922      	ldrb	r2, [r4, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   16114:	fb93 f3f2 	sdiv	r3, r3, r2
   16118:	4a09      	ldr	r2, [pc, #36]	; (16140 <stats_walk+0x94>)
   1611a:	210c      	movs	r1, #12
   1611c:	a801      	add	r0, sp, #4
   1611e:	f7fa fef4 	bl	10f0a <snprintf>
            name_buf[len] = '\0';
   16122:	f100 0310 	add.w	r3, r0, #16
   16126:	eb0d 0003 	add.w	r0, sp, r3
   1612a:	2300      	movs	r3, #0
   1612c:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
   16130:	aa01      	add	r2, sp, #4
   16132:	e7d1      	b.n	160d8 <stats_walk+0x2c>
    }

    return (0);
   16134:	2300      	movs	r3, #0
err:
    return (rc);
}
   16136:	4618      	mov	r0, r3
   16138:	b005      	add	sp, #20
   1613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1613e:	bf00      	nop
   16140:	00027894 	.word	0x00027894

00016144 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   16144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16146:	4604      	mov	r4, r0
   16148:	460e      	mov	r6, r1
   1614a:	4615      	mov	r5, r2
   1614c:	461f      	mov	r7, r3
    size_t offset;

    offset = stats_offset(shdr);
   1614e:	f7ff ff79 	bl	16044 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   16152:	fb05 f206 	mul.w	r2, r5, r6
   16156:	2100      	movs	r1, #0
   16158:	4420      	add	r0, r4
   1615a:	f7fa fa8e 	bl	1067a <memset>

    shdr->s_size = size;
   1615e:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   16160:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   16162:	2000      	movs	r0, #0
   16164:	80e0      	strh	r0, [r4, #6]
#if MYNEWT_VAL(STATS_NAMES)
    shdr->s_map = map;
   16166:	60a7      	str	r7, [r4, #8]
    shdr->s_map_cnt = map_cnt;
   16168:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1616c:	60e3      	str	r3, [r4, #12]
#endif

    return (0);
}
   1616e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016170 <stats_module_init_internal>:
{
   16170:	b500      	push	{lr}
   16172:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   16174:	4b0d      	ldr	r3, [pc, #52]	; (161ac <stats_module_init_internal+0x3c>)
   16176:	2200      	movs	r2, #0
   16178:	601a      	str	r2, [r3, #0]
   1617a:	605b      	str	r3, [r3, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1617c:	2201      	movs	r2, #1
   1617e:	9200      	str	r2, [sp, #0]
   16180:	4b0b      	ldr	r3, [pc, #44]	; (161b0 <stats_module_init_internal+0x40>)
   16182:	2104      	movs	r1, #4
   16184:	480b      	ldr	r0, [pc, #44]	; (161b4 <stats_module_init_internal+0x44>)
   16186:	f7ff ffdd 	bl	16144 <stats_init>
    if (rc) {
   1618a:	4603      	mov	r3, r0
   1618c:	b118      	cbz	r0, 16196 <stats_module_init_internal+0x26>
}
   1618e:	4618      	mov	r0, r3
   16190:	b003      	add	sp, #12
   16192:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   16196:	4907      	ldr	r1, [pc, #28]	; (161b4 <stats_module_init_internal+0x44>)
   16198:	4807      	ldr	r0, [pc, #28]	; (161b8 <stats_module_init_internal+0x48>)
   1619a:	f7ff ff5b 	bl	16054 <stats_register_internal>
    if (rc) {
   1619e:	4603      	mov	r3, r0
   161a0:	2800      	cmp	r0, #0
   161a2:	d1f4      	bne.n	1618e <stats_module_init_internal+0x1e>
    rc = stats_shell_register();
   161a4:	f000 f8d0 	bl	16348 <stats_shell_register>
   161a8:	4603      	mov	r3, r0
    if (rc) {
   161aa:	e7f0      	b.n	1618e <stats_module_init_internal+0x1e>
   161ac:	200002f0 	.word	0x200002f0
   161b0:	000278b0 	.word	0x000278b0
   161b4:	2000534c 	.word	0x2000534c
   161b8:	00027898 	.word	0x00027898

000161bc <stats_module_init>:
{
   161bc:	b510      	push	{r4, lr}
   161be:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   161c0:	4b0c      	ldr	r3, [pc, #48]	; (161f4 <stats_module_init+0x38>)
   161c2:	781b      	ldrb	r3, [r3, #0]
   161c4:	b123      	cbz	r3, 161d0 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   161c6:	4b0c      	ldr	r3, [pc, #48]	; (161f8 <stats_module_init+0x3c>)
   161c8:	695b      	ldr	r3, [r3, #20]
   161ca:	b133      	cbz	r3, 161da <stats_module_init+0x1e>
}
   161cc:	b002      	add	sp, #8
   161ce:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   161d0:	461a      	mov	r2, r3
   161d2:	4619      	mov	r1, r3
   161d4:	4618      	mov	r0, r3
   161d6:	f7f2 fff5 	bl	91c4 <__assert_func>
    rc = stats_module_init_internal();
   161da:	f7ff ffc9 	bl	16170 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   161de:	2800      	cmp	r0, #0
   161e0:	d0f4      	beq.n	161cc <stats_module_init+0x10>
   161e2:	2000      	movs	r0, #0
   161e4:	9000      	str	r0, [sp, #0]
   161e6:	4b05      	ldr	r3, [pc, #20]	; (161fc <stats_module_init+0x40>)
   161e8:	681c      	ldr	r4, [r3, #0]
   161ea:	4603      	mov	r3, r0
   161ec:	4602      	mov	r2, r0
   161ee:	4601      	mov	r1, r0
   161f0:	47a0      	blx	r4
   161f2:	e7eb      	b.n	161cc <stats_module_init+0x10>
   161f4:	2000538c 	.word	0x2000538c
   161f8:	2000534c 	.word	0x2000534c
   161fc:	20000308 	.word	0x20000308

00016200 <stats_group_walk>:
 *
 * @return 0 on success, non-zero error code on failure
 */
int
stats_group_walk(stats_group_walk_func_t walk_func, void *arg)
{
   16200:	b570      	push	{r4, r5, r6, lr}
   16202:	4606      	mov	r6, r0
   16204:	460d      	mov	r5, r1
    struct stats_hdr *hdr;
    int rc;

    STAILQ_FOREACH(hdr, &g_stats_registry, s_next) {
   16206:	4b07      	ldr	r3, [pc, #28]	; (16224 <stats_group_walk+0x24>)
   16208:	681c      	ldr	r4, [r3, #0]
   1620a:	e000      	b.n	1620e <stats_group_walk+0xe>
   1620c:	6924      	ldr	r4, [r4, #16]
   1620e:	b134      	cbz	r4, 1621e <stats_group_walk+0x1e>
        rc = walk_func(hdr, arg);
   16210:	4629      	mov	r1, r5
   16212:	4620      	mov	r0, r4
   16214:	47b0      	blx	r6
        if (rc != 0) {
   16216:	4603      	mov	r3, r0
   16218:	2800      	cmp	r0, #0
   1621a:	d0f7      	beq.n	1620c <stats_group_walk+0xc>
   1621c:	e000      	b.n	16220 <stats_group_walk+0x20>
            goto err;
        }
    }
    return (0);
   1621e:	2300      	movs	r3, #0
err:
    return (rc);
}
   16220:	4618      	mov	r0, r3
   16222:	bd70      	pop	{r4, r5, r6, pc}
   16224:	200002f0 	.word	0x200002f0

00016228 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   16228:	b538      	push	{r3, r4, r5, lr}
   1622a:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1622c:	4b06      	ldr	r3, [pc, #24]	; (16248 <stats_group_find+0x20>)
   1622e:	681c      	ldr	r4, [r3, #0]
   16230:	e000      	b.n	16234 <stats_group_find+0xc>
   16232:	6924      	ldr	r4, [r4, #16]
   16234:	b12c      	cbz	r4, 16242 <stats_group_find+0x1a>
        if (!strcmp(cur->s_name, name)) {
   16236:	4629      	mov	r1, r5
   16238:	6820      	ldr	r0, [r4, #0]
   1623a:	f7fa fa49 	bl	106d0 <strcmp>
   1623e:	2800      	cmp	r0, #0
   16240:	d1f7      	bne.n	16232 <stats_group_find+0xa>
            break;
        }
    }

    return (cur);
}
   16242:	4620      	mov	r0, r4
   16244:	bd38      	pop	{r3, r4, r5, pc}
   16246:	bf00      	nop
   16248:	200002f0 	.word	0x200002f0

0001624c <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   1624c:	b538      	push	{r3, r4, r5, lr}
   1624e:	4604      	mov	r4, r0
   16250:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   16252:	4b07      	ldr	r3, [pc, #28]	; (16270 <stats_register+0x24>)
   16254:	695b      	ldr	r3, [r3, #20]
   16256:	b913      	cbnz	r3, 1625e <stats_register+0x12>
        if (stats_module_init_internal()) {
   16258:	f7ff ff8a 	bl	16170 <stats_module_init_internal>
   1625c:	b920      	cbnz	r0, 16268 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1625e:	4629      	mov	r1, r5
   16260:	4620      	mov	r0, r4
   16262:	f7ff fef7 	bl	16054 <stats_register_internal>
}
   16266:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   16268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1626c:	e7fb      	b.n	16266 <stats_register+0x1a>
   1626e:	bf00      	nop
   16270:	2000534c 	.word	0x2000534c

00016274 <stats_shell_display_entry>:
uint8_t stats_shell_registered;

static int 
stats_shell_display_entry(struct stats_hdr *hdr, void *arg, char *name,
        uint16_t stat_off)
{
   16274:	b500      	push	{lr}
   16276:	b083      	sub	sp, #12
   16278:	4684      	mov	ip, r0
   1627a:	4608      	mov	r0, r1
    struct streamer *streamer;
    void *stat_val;

    streamer = arg;

    stat_val = (uint8_t *)hdr + stat_off;
   1627c:	eb0c 0103 	add.w	r1, ip, r3
    switch (hdr->s_size) {
   16280:	f89c e004 	ldrb.w	lr, [ip, #4]
   16284:	f1be 0f04 	cmp.w	lr, #4
   16288:	d013      	beq.n	162b2 <stats_shell_display_entry+0x3e>
   1628a:	f1be 0f08 	cmp.w	lr, #8
   1628e:	d016      	beq.n	162be <stats_shell_display_entry+0x4a>
   16290:	f1be 0f02 	cmp.w	lr, #2
   16294:	d004      	beq.n	162a0 <stats_shell_display_entry+0x2c>
        case sizeof(uint64_t):
            streamer_printf(streamer, "%s: %llu\n", name,
                    *(uint64_t *) stat_val);
            break;
        default:
            streamer_printf(streamer, "Unknown stat size for %s %u\n", name, 
   16296:	4673      	mov	r3, lr
   16298:	490d      	ldr	r1, [pc, #52]	; (162d0 <stats_shell_display_entry+0x5c>)
   1629a:	f7fc fc11 	bl	12ac0 <streamer_printf>
                    hdr->s_size);
            break;
   1629e:	e004      	b.n	162aa <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %u\n", name,
   162a0:	f83c 3003 	ldrh.w	r3, [ip, r3]
   162a4:	490b      	ldr	r1, [pc, #44]	; (162d4 <stats_shell_display_entry+0x60>)
   162a6:	f7fc fc0b 	bl	12ac0 <streamer_printf>
    }

    return (0);
}
   162aa:	2000      	movs	r0, #0
   162ac:	b003      	add	sp, #12
   162ae:	f85d fb04 	ldr.w	pc, [sp], #4
            streamer_printf(streamer, "%s: %lu\n", name,
   162b2:	f85c 3003 	ldr.w	r3, [ip, r3]
   162b6:	4908      	ldr	r1, [pc, #32]	; (162d8 <stats_shell_display_entry+0x64>)
   162b8:	f7fc fc02 	bl	12ac0 <streamer_printf>
            break;
   162bc:	e7f5      	b.n	162aa <stats_shell_display_entry+0x36>
            streamer_printf(streamer, "%s: %llu\n", name,
   162be:	ed91 7b00 	vldr	d7, [r1]
   162c2:	ed8d 7b00 	vstr	d7, [sp]
   162c6:	4905      	ldr	r1, [pc, #20]	; (162dc <stats_shell_display_entry+0x68>)
   162c8:	f7fc fbfa 	bl	12ac0 <streamer_printf>
            break;
   162cc:	e7ed      	b.n	162aa <stats_shell_display_entry+0x36>
   162ce:	bf00      	nop
   162d0:	000278d8 	.word	0x000278d8
   162d4:	000278b8 	.word	0x000278b8
   162d8:	000278c0 	.word	0x000278c0
   162dc:	000278cc 	.word	0x000278cc

000162e0 <stats_shell_display_group>:

static int 
stats_shell_display_group(struct stats_hdr *hdr, void *arg)
{
   162e0:	b508      	push	{r3, lr}
   162e2:	460b      	mov	r3, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "\t%s\n", hdr->s_name);
   162e4:	6802      	ldr	r2, [r0, #0]
   162e6:	4903      	ldr	r1, [pc, #12]	; (162f4 <stats_shell_display_group+0x14>)
   162e8:	4618      	mov	r0, r3
   162ea:	f7fc fbe9 	bl	12ac0 <streamer_printf>
    return (0);
}
   162ee:	2000      	movs	r0, #0
   162f0:	bd08      	pop	{r3, pc}
   162f2:	bf00      	nop
   162f4:	000278f8 	.word	0x000278f8

000162f8 <shell_stats_display>:

static int
shell_stats_display(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   162f8:	b538      	push	{r3, r4, r5, lr}
   162fa:	461c      	mov	r4, r3
    struct stats_hdr *hdr;
    char *name;
    int rc;

    name = argv[1];
   162fc:	6855      	ldr	r5, [r2, #4]
    if (name == NULL || !strcmp(name, "")) {
   162fe:	b155      	cbz	r5, 16316 <shell_stats_display+0x1e>
   16300:	782b      	ldrb	r3, [r5, #0]
   16302:	b143      	cbz	r3, 16316 <shell_stats_display+0x1e>
        stats_group_walk(stats_shell_display_group, streamer);
        rc = OS_EINVAL;
        goto err;
    }

    hdr = stats_group_find(name);
   16304:	4628      	mov	r0, r5
   16306:	f7ff ff8f 	bl	16228 <stats_group_find>
    if (!hdr) {
   1630a:	b170      	cbz	r0, 1632a <shell_stats_display+0x32>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
        rc = OS_EINVAL;
        goto err;
    }

    rc = stats_walk(hdr, stats_shell_display_entry, streamer);
   1630c:	4622      	mov	r2, r4
   1630e:	490a      	ldr	r1, [pc, #40]	; (16338 <shell_stats_display+0x40>)
   16310:	f7ff fecc 	bl	160ac <stats_walk>
    }

    return (0);
err:
    return (rc);
}
   16314:	bd38      	pop	{r3, r4, r5, pc}
        streamer_printf(streamer, "Must specify a statistic name to dump, "
   16316:	4909      	ldr	r1, [pc, #36]	; (1633c <shell_stats_display+0x44>)
   16318:	4620      	mov	r0, r4
   1631a:	f7fc fbd1 	bl	12ac0 <streamer_printf>
        stats_group_walk(stats_shell_display_group, streamer);
   1631e:	4621      	mov	r1, r4
   16320:	4807      	ldr	r0, [pc, #28]	; (16340 <shell_stats_display+0x48>)
   16322:	f7ff ff6d 	bl	16200 <stats_group_walk>
        rc = OS_EINVAL;
   16326:	2002      	movs	r0, #2
        goto err;
   16328:	e7f4      	b.n	16314 <shell_stats_display+0x1c>
        streamer_printf(streamer, "Could not find statistic group %s\n", name);
   1632a:	462a      	mov	r2, r5
   1632c:	4905      	ldr	r1, [pc, #20]	; (16344 <shell_stats_display+0x4c>)
   1632e:	4620      	mov	r0, r4
   16330:	f7fc fbc6 	bl	12ac0 <streamer_printf>
        rc = OS_EINVAL;
   16334:	2002      	movs	r0, #2
        goto err;
   16336:	e7ed      	b.n	16314 <shell_stats_display+0x1c>
   16338:	00016275 	.word	0x00016275
   1633c:	00027900 	.word	0x00027900
   16340:	000162e1 	.word	0x000162e1
   16344:	0002793c 	.word	0x0002793c

00016348 <stats_shell_register>:


int 
stats_shell_register(void)
{
   16348:	b508      	push	{r3, lr}
    if (!stats_shell_registered) {
   1634a:	4b06      	ldr	r3, [pc, #24]	; (16364 <stats_shell_register+0x1c>)
   1634c:	781b      	ldrb	r3, [r3, #0]
   1634e:	b10b      	cbz	r3, 16354 <stats_shell_register+0xc>
        stats_shell_registered = 1;
        shell_cmd_register(&shell_stats_cmd);
    }

    return (0);
}
   16350:	2000      	movs	r0, #0
   16352:	bd08      	pop	{r3, pc}
        stats_shell_registered = 1;
   16354:	4b03      	ldr	r3, [pc, #12]	; (16364 <stats_shell_register+0x1c>)
   16356:	2201      	movs	r2, #1
   16358:	701a      	strb	r2, [r3, #0]
        shell_cmd_register(&shell_stats_cmd);
   1635a:	4803      	ldr	r0, [pc, #12]	; (16368 <stats_shell_register+0x20>)
   1635c:	f7ff fb36 	bl	159cc <shell_cmd_register>
   16360:	e7f6      	b.n	16350 <stats_shell_register+0x8>
   16362:	bf00      	nop
   16364:	20005364 	.word	0x20005364
   16368:	200002f8 	.word	0x200002f8

0001636c <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   1636c:	b508      	push	{r3, lr}
    assert(0);
   1636e:	2300      	movs	r3, #0
   16370:	461a      	mov	r2, r3
   16372:	4619      	mov	r1, r3
   16374:	4618      	mov	r0, r3
   16376:	f7f2 ff25 	bl	91c4 <__assert_func>
	...

0001637c <sysdown_complete>:
{
   1637c:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   1637e:	4803      	ldr	r0, [pc, #12]	; (1638c <sysdown_complete+0x10>)
   16380:	f7f3 f8b4 	bl	94ec <os_callout_stop>
    os_system_reset();
   16384:	f7f3 f883 	bl	948e <os_system_reset>
}
   16388:	bd08      	pop	{r3, pc}
   1638a:	bf00      	nop
   1638c:	2000536c 	.word	0x2000536c

00016390 <sysdown>:
}

int
sysdown(int reason)
{
   16390:	b570      	push	{r4, r5, r6, lr}
   16392:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   16394:	f7f4 f962 	bl	a65c <os_arch_save_sr>
    if (sysdown_active) {
   16398:	4b20      	ldr	r3, [pc, #128]	; (1641c <sysdown+0x8c>)
   1639a:	781b      	ldrb	r3, [r3, #0]
   1639c:	b943      	cbnz	r3, 163b0 <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   1639e:	4b1f      	ldr	r3, [pc, #124]	; (1641c <sysdown+0x8c>)
   163a0:	2201      	movs	r2, #1
   163a2:	701a      	strb	r2, [r3, #0]
        rc = 0;
   163a4:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   163a6:	f7f4 f95f 	bl	a668 <os_arch_restore_sr>

    if (rc != 0) {
   163aa:	b126      	cbz	r6, 163b6 <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   163ac:	4630      	mov	r0, r6
   163ae:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   163b0:	f06f 060a 	mvn.w	r6, #10
   163b4:	e7f7      	b.n	163a6 <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   163b6:	f7f3 fae7 	bl	9988 <os_eventq_dflt_get>
   163ba:	4601      	mov	r1, r0
   163bc:	4c18      	ldr	r4, [pc, #96]	; (16420 <sysdown+0x90>)
   163be:	2300      	movs	r3, #0
   163c0:	4a18      	ldr	r2, [pc, #96]	; (16424 <sysdown+0x94>)
   163c2:	4620      	mov	r0, r4
   163c4:	f7f3 f884 	bl	94d0 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   163c8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   163cc:	4620      	mov	r0, r4
   163ce:	f7f3 f8ab 	bl	9528 <os_callout_reset>
    assert(rc == 0);
   163d2:	4606      	mov	r6, r0
   163d4:	b908      	cbnz	r0, 163da <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   163d6:	4604      	mov	r4, r0
   163d8:	e006      	b.n	163e8 <sysdown+0x58>
    assert(rc == 0);
   163da:	2300      	movs	r3, #0
   163dc:	461a      	mov	r2, r3
   163de:	4619      	mov	r1, r3
   163e0:	4618      	mov	r0, r3
   163e2:	f7f2 feef 	bl	91c4 <__assert_func>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   163e6:	3401      	adds	r4, #1
   163e8:	4b0f      	ldr	r3, [pc, #60]	; (16428 <sysdown+0x98>)
   163ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   163ee:	b163      	cbz	r3, 1640a <sysdown+0x7a>
        rc = sysdown_cbs[i](reason);
   163f0:	4628      	mov	r0, r5
   163f2:	4798      	blx	r3
        switch (rc) {
   163f4:	2801      	cmp	r0, #1
   163f6:	d1f6      	bne.n	163e6 <sysdown+0x56>
            OS_ENTER_CRITICAL(sr);
   163f8:	f7f4 f930 	bl	a65c <os_arch_save_sr>
            sysdown_num_in_progress++;
   163fc:	4a0b      	ldr	r2, [pc, #44]	; (1642c <sysdown+0x9c>)
   163fe:	6813      	ldr	r3, [r2, #0]
   16400:	3301      	adds	r3, #1
   16402:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   16404:	f7f4 f930 	bl	a668 <os_arch_restore_sr>
            break;
   16408:	e7ed      	b.n	163e6 <sysdown+0x56>
    if (sysdown_num_in_progress == 0) {
   1640a:	4b08      	ldr	r3, [pc, #32]	; (1642c <sysdown+0x9c>)
   1640c:	681c      	ldr	r4, [r3, #0]
   1640e:	2c00      	cmp	r4, #0
   16410:	d1cc      	bne.n	163ac <sysdown+0x1c>
        sysdown_complete();
   16412:	f7ff ffb3 	bl	1637c <sysdown_complete>
    return 0;
   16416:	4626      	mov	r6, r4
   16418:	e7c8      	b.n	163ac <sysdown+0x1c>
   1641a:	bf00      	nop
   1641c:	20005365 	.word	0x20005365
   16420:	2000536c 	.word	0x2000536c
   16424:	0001636d 	.word	0x0001636d
   16428:	00027d64 	.word	0x00027d64
   1642c:	20005368 	.word	0x20005368

00016430 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   16430:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   16432:	f7f2 fec7 	bl	91c4 <__assert_func>
	...

00016438 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16438:	4b01      	ldr	r3, [pc, #4]	; (16440 <sysinit_start+0x8>)
   1643a:	2201      	movs	r2, #1
   1643c:	701a      	strb	r2, [r3, #0]
}
   1643e:	4770      	bx	lr
   16440:	2000538c 	.word	0x2000538c

00016444 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   16444:	4b01      	ldr	r3, [pc, #4]	; (1644c <sysinit_end+0x8>)
   16446:	2200      	movs	r2, #0
   16448:	701a      	strb	r2, [r3, #0]
}
   1644a:	4770      	bx	lr
   1644c:	2000538c 	.word	0x2000538c

00016450 <uwbcfg_set>:

static int
uwbcfg_set(int argc, char **argv, char *val)
{
    int i;
    if (argc == 1) {
   16450:	2801      	cmp	r0, #1
   16452:	d00a      	beq.n	1646a <uwbcfg_set+0x1a>
        for (i=0;i<CFGSTR_MAX;i++) {
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
        }
    }
    return DPL_ENOENT;
   16454:	200a      	movs	r0, #10
}
   16456:	4770      	bx	lr
                return CONF_VALUE_SET(val, CONF_STRING, g_uwb_config[i]);
   16458:	2308      	movs	r3, #8
   1645a:	4a0d      	ldr	r2, [pc, #52]	; (16490 <uwbcfg_set+0x40>)
   1645c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   16460:	2106      	movs	r1, #6
   16462:	4630      	mov	r0, r6
   16464:	f7fc fd03 	bl	12e6e <conf_value_from_str>
}
   16468:	bd70      	pop	{r4, r5, r6, pc}
{
   1646a:	b570      	push	{r4, r5, r6, lr}
   1646c:	460d      	mov	r5, r1
   1646e:	4616      	mov	r6, r2
        for (i=0;i<CFGSTR_MAX;i++) {
   16470:	2400      	movs	r4, #0
   16472:	2c13      	cmp	r4, #19
   16474:	dc09      	bgt.n	1648a <uwbcfg_set+0x3a>
            if (!strcmp(argv[0], g_uwbcfg_str[i]))
   16476:	4b07      	ldr	r3, [pc, #28]	; (16494 <uwbcfg_set+0x44>)
   16478:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   1647c:	6828      	ldr	r0, [r5, #0]
   1647e:	f7fa f927 	bl	106d0 <strcmp>
   16482:	2800      	cmp	r0, #0
   16484:	d0e8      	beq.n	16458 <uwbcfg_set+0x8>
        for (i=0;i<CFGSTR_MAX;i++) {
   16486:	3401      	adds	r4, #1
   16488:	e7f3      	b.n	16472 <uwbcfg_set+0x22>
    return DPL_ENOENT;
   1648a:	200a      	movs	r0, #10
   1648c:	e7ec      	b.n	16468 <uwbcfg_set+0x18>
   1648e:	bf00      	nop
   16490:	2000030c 	.word	0x2000030c
   16494:	200003ac 	.word	0x200003ac

00016498 <uwbcfg_get>:
    if (argc == 1) {
   16498:	2801      	cmp	r0, #1
   1649a:	d10d      	bne.n	164b8 <uwbcfg_get+0x20>
{
   1649c:	b538      	push	{r3, r4, r5, lr}
   1649e:	460d      	mov	r5, r1
        for (i=0;i<CFGSTR_MAX;i++) {
   164a0:	2400      	movs	r4, #0
   164a2:	2c13      	cmp	r4, #19
   164a4:	dc0e      	bgt.n	164c4 <uwbcfg_get+0x2c>
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   164a6:	4b08      	ldr	r3, [pc, #32]	; (164c8 <uwbcfg_get+0x30>)
   164a8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   164ac:	6828      	ldr	r0, [r5, #0]
   164ae:	f7fa f90f 	bl	106d0 <strcmp>
   164b2:	b118      	cbz	r0, 164bc <uwbcfg_get+0x24>
        for (i=0;i<CFGSTR_MAX;i++) {
   164b4:	3401      	adds	r4, #1
   164b6:	e7f4      	b.n	164a2 <uwbcfg_get+0xa>
    return NULL;
   164b8:	2000      	movs	r0, #0
}
   164ba:	4770      	bx	lr
            if (!strcmp(argv[0], g_uwbcfg_str[i])) return g_uwb_config[i];
   164bc:	4803      	ldr	r0, [pc, #12]	; (164cc <uwbcfg_get+0x34>)
   164be:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   164c2:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
   164c4:	2000      	movs	r0, #0
   164c6:	e7fc      	b.n	164c2 <uwbcfg_get+0x2a>
   164c8:	200003ac 	.word	0x200003ac
   164cc:	2000030c 	.word	0x2000030c

000164d0 <uwbcfg_export>:
}

static int
uwbcfg_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   164d0:	b530      	push	{r4, r5, lr}
   164d2:	b08b      	sub	sp, #44	; 0x2c
   164d4:	4605      	mov	r5, r0
    int i;
    char b[32];
    for (i=0;i<CFGSTR_MAX;i++) {
   164d6:	2400      	movs	r4, #0
   164d8:	e010      	b.n	164fc <uwbcfg_export+0x2c>
        snprintf(b, sizeof(b), "%s/%s", uwbcfg_handler.ch_name, g_uwbcfg_str[i]);
   164da:	4b0b      	ldr	r3, [pc, #44]	; (16508 <uwbcfg_export+0x38>)
   164dc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   164e0:	9300      	str	r3, [sp, #0]
   164e2:	4b0a      	ldr	r3, [pc, #40]	; (1650c <uwbcfg_export+0x3c>)
   164e4:	685b      	ldr	r3, [r3, #4]
   164e6:	4a0a      	ldr	r2, [pc, #40]	; (16510 <uwbcfg_export+0x40>)
   164e8:	2120      	movs	r1, #32
   164ea:	a802      	add	r0, sp, #8
   164ec:	f7fa fd0d 	bl	10f0a <snprintf>
        export_func(b, g_uwb_config[i]);
   164f0:	4908      	ldr	r1, [pc, #32]	; (16514 <uwbcfg_export+0x44>)
   164f2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   164f6:	a802      	add	r0, sp, #8
   164f8:	47a8      	blx	r5
    for (i=0;i<CFGSTR_MAX;i++) {
   164fa:	3401      	adds	r4, #1
   164fc:	2c13      	cmp	r4, #19
   164fe:	ddec      	ble.n	164da <uwbcfg_export+0xa>
    }
    return 0;
}
   16500:	2000      	movs	r0, #0
   16502:	b00b      	add	sp, #44	; 0x2c
   16504:	bd30      	pop	{r4, r5, pc}
   16506:	bf00      	nop
   16508:	200003ac 	.word	0x200003ac
   1650c:	200003fc 	.word	0x200003fc
   16510:	00027960 	.word	0x00027960
   16514:	2000030c 	.word	0x2000030c

00016518 <uwbcfg_commit_to_inst>:
{
   16518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1651a:	b083      	sub	sp, #12
   1651c:	4604      	mov	r4, r0
   1651e:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_CH], CONF_INT8, (void*)&(inst->config.channel), 0);
   16520:	2300      	movs	r3, #0
   16522:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   16526:	2102      	movs	r1, #2
   16528:	4628      	mov	r0, r5
   1652a:	f7fc fca0 	bl	12e6e <conf_value_from_str>
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   1652e:	f105 0610 	add.w	r6, r5, #16
   16532:	4984      	ldr	r1, [pc, #528]	; (16744 <uwbcfg_commit_to_inst+0x22c>)
   16534:	4630      	mov	r0, r6
   16536:	f7fa f8cb 	bl	106d0 <strcmp>
   1653a:	2800      	cmp	r0, #0
   1653c:	f040 80c0 	bne.w	166c0 <uwbcfg_commit_to_inst+0x1a8>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(0.12821f);
   16540:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   16544:	4a80      	ldr	r2, [pc, #512]	; (16748 <uwbcfg_commit_to_inst+0x230>)
   16546:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   16548:	2708      	movs	r7, #8
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   1654a:	2300      	movs	r3, #0
   1654c:	f10d 0207 	add.w	r2, sp, #7
   16550:	2102      	movs	r1, #2
   16552:	f105 0018 	add.w	r0, r5, #24
   16556:	f7fc fc8a 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFDTYPE], CONF_INT8,
   1655a:	2300      	movs	r3, #0
   1655c:	f204 5212 	addw	r2, r4, #1298	; 0x512
   16560:	2102      	movs	r1, #2
   16562:	f105 0028 	add.w	r0, r5, #40	; 0x28
   16566:	f7fc fc82 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_SFD_TO], CONF_INT16, (void*)&sfd_timeout, 0);
   1656a:	2300      	movs	r3, #0
   1656c:	f10d 0202 	add.w	r2, sp, #2
   16570:	2103      	movs	r1, #3
   16572:	f105 0030 	add.w	r0, r5, #48	; 0x30
   16576:	f7fc fc7a 	bl	12e6e <conf_value_from_str>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   1657a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1657e:	2b73      	cmp	r3, #115	; 0x73
   16580:	f000 80b6 	beq.w	166f0 <uwbcfg_commit_to_inst+0x1d8>
   16584:	2303      	movs	r3, #3
   16586:	f884 3513 	strb.w	r3, [r4, #1299]	; 0x513
    if (inst->rxdiag) {
   1658a:	f8d4 24f8 	ldr.w	r2, [r4, #1272]	; 0x4f8
   1658e:	b192      	cbz	r2, 165b6 <uwbcfg_commit_to_inst+0x9e>
        conf_value_from_str(cfg[CFGSTR_RX_DIAG_EN], CONF_INT16,
   16590:	2300      	movs	r3, #0
   16592:	3202      	adds	r2, #2
   16594:	2103      	movs	r1, #3
   16596:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1659a:	f7fc fc68 	bl	12e6e <conf_value_from_str>
        inst->config.rxdiag_enable = (inst->rxdiag->enabled != 0);
   1659e:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
   165a2:	885b      	ldrh	r3, [r3, #2]
   165a4:	3b00      	subs	r3, #0
   165a6:	bf18      	it	ne
   165a8:	2301      	movne	r3, #1
   165aa:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   165ae:	f363 1286 	bfi	r2, r3, #6, #1
   165b2:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    conf_value_from_str(cfg[CFGSTR_RX_PREAM_CIDX], CONF_INT8,
   165b6:	2300      	movs	r3, #0
   165b8:	f204 5211 	addw	r2, r4, #1297	; 0x511
   165bc:	2102      	movs	r1, #2
   165be:	f105 0020 	add.w	r0, r5, #32
   165c2:	f7fc fc54 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_CIDX], CONF_INT8,
   165c6:	2300      	movs	r3, #0
   165c8:	f504 62a4 	add.w	r2, r4, #1312	; 0x520
   165cc:	2102      	movs	r1, #2
   165ce:	f105 0048 	add.w	r0, r5, #72	; 0x48
   165d2:	f7fc fc4c 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_RX_ANTDLY], CONF_INT16, (void*)&inst->rx_antenna_delay, 0);
   165d6:	2300      	movs	r3, #0
   165d8:	f204 42cc 	addw	r2, r4, #1228	; 0x4cc
   165dc:	2103      	movs	r1, #3
   165de:	f105 0068 	add.w	r0, r5, #104	; 0x68
   165e2:	f7fc fc44 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TX_ANTDLY], CONF_INT16, (void*)&inst->tx_antenna_delay, 0);
   165e6:	2300      	movs	r3, #0
   165e8:	f204 42ce 	addw	r2, r4, #1230	; 0x4ce
   165ec:	2103      	movs	r1, #3
   165ee:	f105 0070 	add.w	r0, r5, #112	; 0x70
   165f2:	f7fc fc3c 	bl	12e6e <conf_value_from_str>
    inst->rx_ant_separation = DPL_FLOAT32_FROM_F64(strtod_soft(cfg[CFGSTR_RX_ANTSEP], 0));
   165f6:	2100      	movs	r1, #0
   165f8:	f105 0078 	add.w	r0, r5, #120	; 0x78
   165fc:	f000 fa92 	bl	16b24 <strtod_soft>
   16600:	ec51 0b10 	vmov	r0, r1, d0
   16604:	f00e fb50 	bl	24ca8 <__aeabi_d2f>
   16608:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
   1660c:	6018      	str	r0, [r3, #0]
    conf_value_from_str(cfg[CFGSTR_EXT_CLKDLY], CONF_INT32, (void*)&inst->ext_clock_delay, 0);
   1660e:	2300      	movs	r3, #0
   16610:	f204 42d4 	addw	r2, r4, #1236	; 0x4d4
   16614:	2104      	movs	r1, #4
   16616:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1661a:	f7fc fc28 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_ROLE], CONF_INT16, (void*)&inst->role, 0);
   1661e:	2300      	movs	r3, #0
   16620:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
   16624:	2103      	movs	r1, #3
   16626:	f105 0088 	add.w	r0, r5, #136	; 0x88
   1662a:	f7fc fc20 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_FRAME_FILTER], CONF_INT16,
   1662e:	2300      	movs	r3, #0
   16630:	f204 521c 	addw	r2, r4, #1308	; 0x51c
   16634:	2103      	movs	r1, #3
   16636:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1663a:	f7fc fc18 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_XTAL_TRIM], CONF_INT8,
   1663e:	2300      	movs	r3, #0
   16640:	f204 521e 	addw	r2, r4, #1310	; 0x51e
   16644:	2102      	movs	r1, #2
   16646:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1664a:	f7fc fc10 	bl	12e6e <conf_value_from_str>
    txP = inst->config.tx.preambleLength;
   1664e:	f894 6521 	ldrb.w	r6, [r4, #1313]	; 0x521
    sfd_timeout = inst->config.rx.sfdTimeout;
   16652:	f8b4 3516 	ldrh.w	r3, [r4, #1302]	; 0x516
   16656:	f8ad 3002 	strh.w	r3, [sp, #2]
    conf_value_from_str(cfg[CFGSTR_TX_PREAM_LEN], CONF_INT16,
   1665a:	2300      	movs	r3, #0
   1665c:	aa01      	add	r2, sp, #4
   1665e:	2103      	movs	r1, #3
   16660:	f105 0050 	add.w	r0, r5, #80	; 0x50
   16664:	f7fc fc03 	bl	12e6e <conf_value_from_str>
    switch (preamble_len)
   16668:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1666c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16670:	d058      	beq.n	16724 <uwbcfg_commit_to_inst+0x20c>
   16672:	d843      	bhi.n	166fc <uwbcfg_commit_to_inst+0x1e4>
   16674:	2b80      	cmp	r3, #128	; 0x80
   16676:	d057      	beq.n	16728 <uwbcfg_commit_to_inst+0x210>
   16678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1667c:	d13a      	bne.n	166f4 <uwbcfg_commit_to_inst+0x1dc>
    case (256):  txP = DWT_PLEN_256 ;break;
   1667e:	2624      	movs	r6, #36	; 0x24
    if (sfd_timeout < 1) {
   16680:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16684:	b94b      	cbnz	r3, 1669a <uwbcfg_commit_to_inst+0x182>
        sfd_timeout = (preamble_len + 1 + sfd_len - paclen);
   16686:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1668a:	443b      	add	r3, r7
   1668c:	b29b      	uxth	r3, r3
   1668e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16692:	1a9b      	subs	r3, r3, r2
   16694:	3301      	adds	r3, #1
   16696:	f8ad 3002 	strh.w	r3, [sp, #2]
    inst->config.tx.preambleLength = txP;
   1669a:	f884 6521 	strb.w	r6, [r4, #1313]	; 0x521
    inst->config.rx.sfdTimeout = sfd_timeout;
   1669e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   166a2:	f8a4 3516 	strh.w	r3, [r4, #1302]	; 0x516
    inst->attrib.nsfd = sfd_len;
   166a6:	f884 7540 	strb.w	r7, [r4, #1344]	; 0x540
    inst->attrib.nsync = preamble_len;
   166aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   166ae:	f8a4 3542 	strh.w	r3, [r4, #1346]	; 0x542
    uwbcfg_commit_to_inst_dw1000(inst, cfg);
   166b2:	4629      	mov	r1, r5
   166b4:	4620      	mov	r0, r4
   166b6:	f000 f913 	bl	168e0 <uwbcfg_commit_to_inst_dw1000>
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   166ba:	4b24      	ldr	r3, [pc, #144]	; (1674c <uwbcfg_commit_to_inst+0x234>)
   166bc:	681c      	ldr	r4, [r3, #0]
   166be:	e039      	b.n	16734 <uwbcfg_commit_to_inst+0x21c>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   166c0:	4923      	ldr	r1, [pc, #140]	; (16750 <uwbcfg_commit_to_inst+0x238>)
   166c2:	4630      	mov	r0, r6
   166c4:	f7fa f804 	bl	106d0 <strcmp>
   166c8:	b928      	cbnz	r0, 166d6 <uwbcfg_commit_to_inst+0x1be>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(1.02564f);
   166ca:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   166ce:	4a21      	ldr	r2, [pc, #132]	; (16754 <uwbcfg_commit_to_inst+0x23c>)
   166d0:	601a      	str	r2, [r3, #0]
        sfd_len = 8;
   166d2:	2708      	movs	r7, #8
   166d4:	e739      	b.n	1654a <uwbcfg_commit_to_inst+0x32>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   166d6:	4920      	ldr	r1, [pc, #128]	; (16758 <uwbcfg_commit_to_inst+0x240>)
   166d8:	4630      	mov	r0, r6
   166da:	f7f9 fff9 	bl	106d0 <strcmp>
   166de:	b928      	cbnz	r0, 166ec <uwbcfg_commit_to_inst+0x1d4>
        inst->attrib.Tdsym = DPL_FLOAT32_INIT(8.20513f);
   166e0:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   166e4:	4a1d      	ldr	r2, [pc, #116]	; (1675c <uwbcfg_commit_to_inst+0x244>)
   166e6:	601a      	str	r2, [r3, #0]
        sfd_len = 64;
   166e8:	2740      	movs	r7, #64	; 0x40
   166ea:	e72e      	b.n	1654a <uwbcfg_commit_to_inst+0x32>
    int sfd_len=0;
   166ec:	2700      	movs	r7, #0
   166ee:	e72c      	b.n	1654a <uwbcfg_commit_to_inst+0x32>
    inst->config.rx.phrMode = (cfg[CFGSTR_RX_PHRMODE][0] == 's')? DWT_PHRMODE_STD : DWT_PHRMODE_EXT;
   166f0:	2300      	movs	r3, #0
   166f2:	e748      	b.n	16586 <uwbcfg_commit_to_inst+0x6e>
    switch (preamble_len)
   166f4:	2b40      	cmp	r3, #64	; 0x40
   166f6:	d10e      	bne.n	16716 <uwbcfg_commit_to_inst+0x1fe>
   166f8:	2604      	movs	r6, #4
   166fa:	e7c1      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
   166fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   16700:	d014      	beq.n	1672c <uwbcfg_commit_to_inst+0x214>
   16702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16706:	d101      	bne.n	1670c <uwbcfg_commit_to_inst+0x1f4>
    case (4096): txP = DWT_PLEN_4096;break;
   16708:	260c      	movs	r6, #12
   1670a:	e7b9      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
    switch (preamble_len)
   1670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16710:	d101      	bne.n	16716 <uwbcfg_commit_to_inst+0x1fe>
    case (1024): txP = DWT_PLEN_1024;break;
   16712:	2608      	movs	r6, #8
   16714:	e7b4      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
        UC_WARN("inv preamb_len\n");
   16716:	4b12      	ldr	r3, [pc, #72]	; (16760 <uwbcfg_commit_to_inst+0x248>)
   16718:	2202      	movs	r2, #2
   1671a:	215c      	movs	r1, #92	; 0x5c
   1671c:	4811      	ldr	r0, [pc, #68]	; (16764 <uwbcfg_commit_to_inst+0x24c>)
   1671e:	f7fd ff5b 	bl	145d8 <log_printf>
        break;
   16722:	e7ad      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
    case (512):  txP = DWT_PLEN_512 ;break;
   16724:	2634      	movs	r6, #52	; 0x34
   16726:	e7ab      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
    case (128):  txP = DWT_PLEN_128 ;break;
   16728:	2614      	movs	r6, #20
   1672a:	e7a9      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
    case (2048): txP = DWT_PLEN_2048;break;
   1672c:	2628      	movs	r6, #40	; 0x28
   1672e:	e7a7      	b.n	16680 <uwbcfg_commit_to_inst+0x168>
            cb->uc_update();
   16730:	4798      	blx	r3
    SLIST_FOREACH(cb, &uwbcfg_callbacks, uc_list) {
   16732:	6824      	ldr	r4, [r4, #0]
   16734:	b11c      	cbz	r4, 1673e <uwbcfg_commit_to_inst+0x226>
        if (cb->uc_update) {
   16736:	6863      	ldr	r3, [r4, #4]
   16738:	2b00      	cmp	r3, #0
   1673a:	d1f9      	bne.n	16730 <uwbcfg_commit_to_inst+0x218>
   1673c:	e7f9      	b.n	16732 <uwbcfg_commit_to_inst+0x21a>
}
   1673e:	2000      	movs	r0, #0
   16740:	b003      	add	sp, #12
   16742:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16744:	00027968 	.word	0x00027968
   16748:	3e03497b 	.word	0x3e03497b
   1674c:	200053a8 	.word	0x200053a8
   16750:	0002796c 	.word	0x0002796c
   16754:	3f83482c 	.word	0x3f83482c
   16758:	00027974 	.word	0x00027974
   1675c:	41034836 	.word	0x41034836
   16760:	0002797c 	.word	0x0002797c
   16764:	20005390 	.word	0x20005390

00016768 <uwbcfg_commit>:
{
   16768:	b510      	push	{r4, lr}
    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   1676a:	2400      	movs	r4, #0
   1676c:	e000      	b.n	16770 <uwbcfg_commit+0x8>
   1676e:	3401      	adds	r4, #1
   16770:	2c02      	cmp	r4, #2
   16772:	dc08      	bgt.n	16786 <uwbcfg_commit+0x1e>
        udev = uwb_dev_idx_lookup(i);
   16774:	4620      	mov	r0, r4
   16776:	f7f2 fa7d 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   1677a:	2800      	cmp	r0, #0
   1677c:	d0f7      	beq.n	1676e <uwbcfg_commit+0x6>
        uwbcfg_commit_to_inst(udev, g_uwb_config);
   1677e:	4903      	ldr	r1, [pc, #12]	; (1678c <uwbcfg_commit+0x24>)
   16780:	f7ff feca 	bl	16518 <uwbcfg_commit_to_inst>
   16784:	e7f3      	b.n	1676e <uwbcfg_commit+0x6>
}
   16786:	2000      	movs	r0, #0
   16788:	bd10      	pop	{r4, pc}
   1678a:	bf00      	nop
   1678c:	2000030c 	.word	0x2000030c

00016790 <uwbcfg_register>:

int
uwbcfg_register(struct uwbcfg_cbs *handler)
{
    SLIST_INSERT_HEAD(&uwbcfg_callbacks, handler, uc_list);
   16790:	4b02      	ldr	r3, [pc, #8]	; (1679c <uwbcfg_register+0xc>)
   16792:	681a      	ldr	r2, [r3, #0]
   16794:	6002      	str	r2, [r0, #0]
   16796:	6018      	str	r0, [r3, #0]
    return 0;
}
   16798:	2000      	movs	r0, #0
   1679a:	4770      	bx	lr
   1679c:	200053a8 	.word	0x200053a8

000167a0 <uwbcfg_pkg_init>:
    return uwbcfg_commit();
}

int
uwbcfg_pkg_init(void)
{
   167a0:	b510      	push	{r4, lr}
   167a2:	b082      	sub	sp, #8
#ifndef __KERNEL__
    int rc;
    rc = conf_register(&uwbcfg_handler);
   167a4:	480d      	ldr	r0, [pc, #52]	; (167dc <uwbcfg_pkg_init+0x3c>)
   167a6:	f7fc fb1d 	bl	12de4 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   167aa:	b138      	cbz	r0, 167bc <uwbcfg_pkg_init+0x1c>
   167ac:	2000      	movs	r0, #0
   167ae:	9000      	str	r0, [sp, #0]
   167b0:	4b0b      	ldr	r3, [pc, #44]	; (167e0 <uwbcfg_pkg_init+0x40>)
   167b2:	681c      	ldr	r4, [r3, #0]
   167b4:	4603      	mov	r3, r0
   167b6:	4602      	mov	r2, r0
   167b8:	4601      	mov	r1, r0
   167ba:	47a0      	blx	r4
#endif

    /* Init log and Config */
    log_register("uwbcfg", &_uwbcfg_log, &log_console_handler,
   167bc:	2400      	movs	r4, #0
   167be:	9400      	str	r4, [sp, #0]
   167c0:	4623      	mov	r3, r4
   167c2:	4a08      	ldr	r2, [pc, #32]	; (167e4 <uwbcfg_pkg_init+0x44>)
   167c4:	4908      	ldr	r1, [pc, #32]	; (167e8 <uwbcfg_pkg_init+0x48>)
   167c6:	4809      	ldr	r0, [pc, #36]	; (167ec <uwbcfg_pkg_init+0x4c>)
   167c8:	f7fd ff50 	bl	1466c <log_register>
                 NULL, LOG_SYSLEVEL);

    SLIST_INIT(&uwbcfg_callbacks);
   167cc:	4b08      	ldr	r3, [pc, #32]	; (167f0 <uwbcfg_pkg_init+0x50>)
   167ce:	601c      	str	r4, [r3, #0]
#if MYNEWT_VAL(UWBCFG_CLI)
    uwbcfg_cli_register();
#endif

#if MYNEWT_VAL(UWBCFG_APPLY_AT_INIT)
    uwbcfg_commit();
   167d0:	f7ff ffca 	bl	16768 <uwbcfg_commit>
#endif
#ifdef __KERNEL__
    uwbcfg_sysfs_init();
#endif
    return 0;
}
   167d4:	4620      	mov	r0, r4
   167d6:	b002      	add	sp, #8
   167d8:	bd10      	pop	{r4, pc}
   167da:	bf00      	nop
   167dc:	200003fc 	.word	0x200003fc
   167e0:	20000308 	.word	0x20000308
   167e4:	000271c4 	.word	0x000271c4
   167e8:	20005390 	.word	0x20005390
   167ec:	0002798c 	.word	0x0002798c
   167f0:	200053a8 	.word	0x200053a8

000167f4 <uwbcfg_pkg_down>:
{
#ifdef __KERNEL__
    uwbcfg_sysfs_deinit();
#endif
    return 0;
}
   167f4:	2000      	movs	r0, #0
   167f6:	4770      	bx	lr

000167f8 <check_preamble_code>:
#define power_value(COARSE,FINE) ((COARSE<<5) + FINE)

#if MYNEWT_VAL(DW1000_DEVICE_0)
static void
check_preamble_code(struct uwb_dev * inst, uint8_t *arg_code)
{
   167f8:	b530      	push	{r4, r5, lr}
   167fa:	b083      	sub	sp, #12
   167fc:	460c      	mov	r4, r1
    int new_code = 0;
    int ch = inst->config.channel;
   167fe:	f890 250c 	ldrb.w	r2, [r0, #1292]	; 0x50c
    int prf = inst->config.prf;
   16802:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
    uint8_t code = *arg_code;
   16806:	7823      	ldrb	r3, [r4, #0]
    if (prf == DWT_PRF_16M) {
   16808:	2901      	cmp	r1, #1
   1680a:	d00a      	beq.n	16822 <check_preamble_code+0x2a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
    } else {
        if (ch == 1 || ch==2 || ch==3 || ch==5) {
   1680c:	1e51      	subs	r1, r2, #1
   1680e:	2902      	cmp	r1, #2
   16810:	d932      	bls.n	16878 <check_preamble_code+0x80>
   16812:	2a05      	cmp	r2, #5
   16814:	d030      	beq.n	16878 <check_preamble_code+0x80>
            if (code < 9 || code > 12)  new_code = 9;
        } else { /* channels 4 and 7 */
            if (code < 17 || code > 20) new_code = 17;
   16816:	3b11      	subs	r3, #17
   16818:	b2db      	uxtb	r3, r3
   1681a:	2b03      	cmp	r3, #3
   1681c:	d939      	bls.n	16892 <check_preamble_code+0x9a>
   1681e:	2511      	movs	r5, #17
   16820:	e02f      	b.n	16882 <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   16822:	2a01      	cmp	r2, #1
   16824:	d00c      	beq.n	16840 <check_preamble_code+0x48>
    int new_code = 0;
   16826:	2500      	movs	r5, #0
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   16828:	2a02      	cmp	r2, #2
   1682a:	d013      	beq.n	16854 <check_preamble_code+0x5c>
   1682c:	2a05      	cmp	r2, #5
   1682e:	d011      	beq.n	16854 <check_preamble_code+0x5c>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   16830:	2a03      	cmp	r2, #3
   16832:	d015      	beq.n	16860 <check_preamble_code+0x68>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   16834:	2a04      	cmp	r2, #4
   16836:	d019      	beq.n	1686c <check_preamble_code+0x74>
   16838:	2a07      	cmp	r2, #7
   1683a:	d017      	beq.n	1686c <check_preamble_code+0x74>
        }
    }
    if (new_code) {
   1683c:	b34d      	cbz	r5, 16892 <check_preamble_code+0x9a>
   1683e:	e020      	b.n	16882 <check_preamble_code+0x8a>
        if (ch == 1 && code != 1 && code != 2)              new_code = 1;
   16840:	2b01      	cmp	r3, #1
   16842:	d005      	beq.n	16850 <check_preamble_code+0x58>
   16844:	2b02      	cmp	r3, #2
   16846:	d001      	beq.n	1684c <check_preamble_code+0x54>
   16848:	4615      	mov	r5, r2
   1684a:	e7ed      	b.n	16828 <check_preamble_code+0x30>
    int new_code = 0;
   1684c:	2500      	movs	r5, #0
   1684e:	e7eb      	b.n	16828 <check_preamble_code+0x30>
   16850:	2500      	movs	r5, #0
   16852:	e7e9      	b.n	16828 <check_preamble_code+0x30>
        if ((ch == 2 || ch==5) && code != 3 && code != 4)   new_code = 3;
   16854:	2b03      	cmp	r3, #3
   16856:	d0eb      	beq.n	16830 <check_preamble_code+0x38>
   16858:	2b04      	cmp	r3, #4
   1685a:	d0e9      	beq.n	16830 <check_preamble_code+0x38>
   1685c:	2503      	movs	r5, #3
   1685e:	e7e7      	b.n	16830 <check_preamble_code+0x38>
        if (ch == 3 && code != 5 && code != 6)              new_code = 5;
   16860:	2b05      	cmp	r3, #5
   16862:	d0e7      	beq.n	16834 <check_preamble_code+0x3c>
   16864:	2b06      	cmp	r3, #6
   16866:	d0e5      	beq.n	16834 <check_preamble_code+0x3c>
   16868:	2505      	movs	r5, #5
   1686a:	e7e3      	b.n	16834 <check_preamble_code+0x3c>
        if ((ch == 4 || ch == 7) && code != 7 && code != 8) new_code = 7;
   1686c:	2b07      	cmp	r3, #7
   1686e:	d0e5      	beq.n	1683c <check_preamble_code+0x44>
   16870:	2b08      	cmp	r3, #8
   16872:	d0e3      	beq.n	1683c <check_preamble_code+0x44>
   16874:	2507      	movs	r5, #7
   16876:	e004      	b.n	16882 <check_preamble_code+0x8a>
            if (code < 9 || code > 12)  new_code = 9;
   16878:	3b09      	subs	r3, #9
   1687a:	b2db      	uxtb	r3, r3
   1687c:	2b03      	cmp	r3, #3
   1687e:	d908      	bls.n	16892 <check_preamble_code+0x9a>
   16880:	2509      	movs	r5, #9
        UC_WARN("inv pream code (using %d)\n", new_code);
   16882:	9500      	str	r5, [sp, #0]
   16884:	4b04      	ldr	r3, [pc, #16]	; (16898 <check_preamble_code+0xa0>)
   16886:	2202      	movs	r2, #2
   16888:	215c      	movs	r1, #92	; 0x5c
   1688a:	4804      	ldr	r0, [pc, #16]	; (1689c <check_preamble_code+0xa4>)
   1688c:	f7fd fea4 	bl	145d8 <log_printf>
        *arg_code = new_code;
   16890:	7025      	strb	r5, [r4, #0]
    }
}
   16892:	b003      	add	sp, #12
   16894:	bd30      	pop	{r4, r5, pc}
   16896:	bf00      	nop
   16898:	00027a8c 	.word	0x00027a8c
   1689c:	20005390 	.word	0x20005390

000168a0 <remap_framefilter>:

uint16_t
remap_framefilter(uint16_t cfg_ff)
{
   168a0:	4603      	mov	r3, r0
    uint16_t r=0;
    if (cfg_ff & UWB_FF_BEACON_EN) r|= DWT_FF_BEACON_EN;
   168a2:	f010 0001 	ands.w	r0, r0, #1
   168a6:	d000      	beq.n	168aa <remap_framefilter+0xa>
   168a8:	2004      	movs	r0, #4
    if (cfg_ff & UWB_FF_DATA_EN)   r|= DWT_FF_DATA_EN;
   168aa:	f013 0f02 	tst.w	r3, #2
   168ae:	d001      	beq.n	168b4 <remap_framefilter+0x14>
   168b0:	f040 0008 	orr.w	r0, r0, #8
    if (cfg_ff & UWB_FF_ACK_EN)    r|= DWT_FF_ACK_EN;
   168b4:	f013 0f04 	tst.w	r3, #4
   168b8:	d001      	beq.n	168be <remap_framefilter+0x1e>
   168ba:	f040 0010 	orr.w	r0, r0, #16
    if (cfg_ff & UWB_FF_MAC_EN)    r|= DWT_FF_MAC_EN;
   168be:	f013 0f08 	tst.w	r3, #8
   168c2:	d001      	beq.n	168c8 <remap_framefilter+0x28>
   168c4:	f040 0020 	orr.w	r0, r0, #32
    if (cfg_ff & UWB_FF_RSVD_EN)   r|= DWT_FF_RSVD_EN;
   168c8:	f013 0f10 	tst.w	r3, #16
   168cc:	d001      	beq.n	168d2 <remap_framefilter+0x32>
   168ce:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    if (cfg_ff & UWB_FF_COORD_EN)  r|= DWT_FF_COORD_EN;
   168d2:	f413 7f80 	tst.w	r3, #256	; 0x100
   168d6:	d001      	beq.n	168dc <remap_framefilter+0x3c>
   168d8:	f040 0002 	orr.w	r0, r0, #2
    return r;
}
   168dc:	4770      	bx	lr
	...

000168e0 <uwbcfg_commit_to_inst_dw1000>:
{
#if MYNEWT_VAL(DW1000_DEVICE_0)
    uint8_t prf, coarse, fine, txpwr, paclen;

    /* Only proceed if this device is a dw1000 */
    if(inst->device_id != DWT_DEVICE_ID) {
   168e0:	f8d0 24c8 	ldr.w	r2, [r0, #1224]	; 0x4c8
   168e4:	4b84      	ldr	r3, [pc, #528]	; (16af8 <uwbcfg_commit_to_inst_dw1000+0x218>)
   168e6:	429a      	cmp	r2, r3
   168e8:	d001      	beq.n	168ee <uwbcfg_commit_to_inst_dw1000+0xe>
     * dw1000 understands */
    inst->config.rx.frameFilter = remap_framefilter(
        inst->config.rx.frameFilter);
#endif
    return 0;
}
   168ea:	2000      	movs	r0, #0
   168ec:	4770      	bx	lr
{
   168ee:	b570      	push	{r4, r5, r6, lr}
   168f0:	b084      	sub	sp, #16
   168f2:	4604      	mov	r4, r0
   168f4:	460d      	mov	r5, r1
    conf_value_from_str(cfg[CFGSTR_PRF], CONF_INT8, (void*)&prf, 0);
   168f6:	2300      	movs	r3, #0
   168f8:	f10d 020f 	add.w	r2, sp, #15
   168fc:	2102      	movs	r1, #2
   168fe:	f105 0008 	add.w	r0, r5, #8
   16902:	f7fc fab4 	bl	12e6e <conf_value_from_str>
    if (prf == 16) {
   16906:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1690a:	2b10      	cmp	r3, #16
   1690c:	d005      	beq.n	1691a <uwbcfg_commit_to_inst_dw1000+0x3a>
    } else if (prf == 64) {
   1690e:	2b40      	cmp	r3, #64	; 0x40
   16910:	d11b      	bne.n	1694a <uwbcfg_commit_to_inst_dw1000+0x6a>
        inst->config.prf = DWT_PRF_64M;
   16912:	2302      	movs	r3, #2
   16914:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
   16918:	e002      	b.n	16920 <uwbcfg_commit_to_inst_dw1000+0x40>
        inst->config.prf = DWT_PRF_16M;
   1691a:	2301      	movs	r3, #1
   1691c:	f884 350e 	strb.w	r3, [r4, #1294]	; 0x50e
    check_preamble_code(inst, &inst->config.rx.preambleCodeIndex);
   16920:	f204 5111 	addw	r1, r4, #1297	; 0x511
   16924:	4620      	mov	r0, r4
   16926:	f7ff ff67 	bl	167f8 <check_preamble_code>
    check_preamble_code(inst, &inst->config.tx.preambleCodeIndex);
   1692a:	f504 61a4 	add.w	r1, r4, #1312	; 0x520
   1692e:	4620      	mov	r0, r4
   16930:	f7ff ff62 	bl	167f8 <check_preamble_code>
    switch (inst->config.channel) {
   16934:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   16938:	3b01      	subs	r3, #1
   1693a:	2b06      	cmp	r3, #6
   1693c:	d842      	bhi.n	169c4 <uwbcfg_commit_to_inst_dw1000+0xe4>
   1693e:	e8df f003 	tbb	[pc, r3]
   16942:	2d0c      	.short	0x2d0c
   16944:	413d3531 	.word	0x413d3531
   16948:	39          	.byte	0x39
   16949:	00          	.byte	0x00
        UC_WARN("inv prf %d\n", prf);
   1694a:	9300      	str	r3, [sp, #0]
   1694c:	4b6b      	ldr	r3, [pc, #428]	; (16afc <uwbcfg_commit_to_inst_dw1000+0x21c>)
   1694e:	2202      	movs	r2, #2
   16950:	215c      	movs	r1, #92	; 0x5c
   16952:	486b      	ldr	r0, [pc, #428]	; (16b00 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16954:	f7fd fe40 	bl	145d8 <log_printf>
   16958:	e7e2      	b.n	16920 <uwbcfg_commit_to_inst_dw1000+0x40>
    case (1): inst->config.txrf.PGdly = TC_PGDELAY_CH1;break;
   1695a:	23c9      	movs	r3, #201	; 0xc9
   1695c:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
    if (!strcmp(cfg[CFGSTR_DATARATE], "6m8")) {
   16960:	f105 0610 	add.w	r6, r5, #16
   16964:	4967      	ldr	r1, [pc, #412]	; (16b04 <uwbcfg_commit_to_inst_dw1000+0x224>)
   16966:	4630      	mov	r0, r6
   16968:	f7f9 feb2 	bl	106d0 <strcmp>
   1696c:	bb88      	cbnz	r0, 169d2 <uwbcfg_commit_to_inst_dw1000+0xf2>
        inst->config.dataRate = DWT_BR_6M8;
   1696e:	2302      	movs	r3, #2
   16970:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
    conf_value_from_str(cfg[CFGSTR_RX_PACLEN], CONF_INT8, (void*)&paclen, 0);
   16974:	2300      	movs	r3, #0
   16976:	aa03      	add	r2, sp, #12
   16978:	2102      	movs	r1, #2
   1697a:	f105 0018 	add.w	r0, r5, #24
   1697e:	f7fc fa76 	bl	12e6e <conf_value_from_str>
    switch (paclen) {
   16982:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16986:	2b20      	cmp	r3, #32
   16988:	d06b      	beq.n	16a62 <uwbcfg_commit_to_inst_dw1000+0x182>
   1698a:	d83b      	bhi.n	16a04 <uwbcfg_commit_to_inst_dw1000+0x124>
   1698c:	2b08      	cmp	r3, #8
   1698e:	d03f      	beq.n	16a10 <uwbcfg_commit_to_inst_dw1000+0x130>
   16990:	2b10      	cmp	r3, #16
   16992:	d16a      	bne.n	16a6a <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (16): inst->config.rx.pacLength = DWT_PAC16;break;
   16994:	2301      	movs	r3, #1
   16996:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   1699a:	e03c      	b.n	16a16 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (2): inst->config.txrf.PGdly = TC_PGDELAY_CH2;break;
   1699c:	23c2      	movs	r3, #194	; 0xc2
   1699e:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   169a2:	e7dd      	b.n	16960 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (3): inst->config.txrf.PGdly = TC_PGDELAY_CH3;break;
   169a4:	23c5      	movs	r3, #197	; 0xc5
   169a6:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   169aa:	e7d9      	b.n	16960 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (4): inst->config.txrf.PGdly = TC_PGDELAY_CH4;break;
   169ac:	2395      	movs	r3, #149	; 0x95
   169ae:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   169b2:	e7d5      	b.n	16960 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (7): inst->config.txrf.PGdly = TC_PGDELAY_CH7;break;
   169b4:	2393      	movs	r3, #147	; 0x93
   169b6:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   169ba:	e7d1      	b.n	16960 <uwbcfg_commit_to_inst_dw1000+0x80>
    case (5): inst->config.txrf.PGdly = TC_PGDELAY_CH5;break;
   169bc:	23c0      	movs	r3, #192	; 0xc0
   169be:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
   169c2:	e7cd      	b.n	16960 <uwbcfg_commit_to_inst_dw1000+0x80>
        UC_WARN("inv ch\n");
   169c4:	4b50      	ldr	r3, [pc, #320]	; (16b08 <uwbcfg_commit_to_inst_dw1000+0x228>)
   169c6:	2202      	movs	r2, #2
   169c8:	215c      	movs	r1, #92	; 0x5c
   169ca:	484d      	ldr	r0, [pc, #308]	; (16b00 <uwbcfg_commit_to_inst_dw1000+0x220>)
   169cc:	f7fd fe04 	bl	145d8 <log_printf>
        break;
   169d0:	e7c6      	b.n	16960 <uwbcfg_commit_to_inst_dw1000+0x80>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "850k")) {
   169d2:	494e      	ldr	r1, [pc, #312]	; (16b0c <uwbcfg_commit_to_inst_dw1000+0x22c>)
   169d4:	4630      	mov	r0, r6
   169d6:	f7f9 fe7b 	bl	106d0 <strcmp>
   169da:	b918      	cbnz	r0, 169e4 <uwbcfg_commit_to_inst_dw1000+0x104>
        inst->config.dataRate = DWT_BR_850K;
   169dc:	2301      	movs	r3, #1
   169de:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   169e2:	e7c7      	b.n	16974 <uwbcfg_commit_to_inst_dw1000+0x94>
    } else if (!strcmp(cfg[CFGSTR_DATARATE], "110k")) {
   169e4:	494a      	ldr	r1, [pc, #296]	; (16b10 <uwbcfg_commit_to_inst_dw1000+0x230>)
   169e6:	4630      	mov	r0, r6
   169e8:	f7f9 fe72 	bl	106d0 <strcmp>
   169ec:	b918      	cbnz	r0, 169f6 <uwbcfg_commit_to_inst_dw1000+0x116>
        inst->config.dataRate = DWT_BR_110K;
   169ee:	2300      	movs	r3, #0
   169f0:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
   169f4:	e7be      	b.n	16974 <uwbcfg_commit_to_inst_dw1000+0x94>
        UC_WARN("inv datarate\n");
   169f6:	4b47      	ldr	r3, [pc, #284]	; (16b14 <uwbcfg_commit_to_inst_dw1000+0x234>)
   169f8:	2202      	movs	r2, #2
   169fa:	215c      	movs	r1, #92	; 0x5c
   169fc:	4840      	ldr	r0, [pc, #256]	; (16b00 <uwbcfg_commit_to_inst_dw1000+0x220>)
   169fe:	f7fd fdeb 	bl	145d8 <log_printf>
   16a02:	e7b7      	b.n	16974 <uwbcfg_commit_to_inst_dw1000+0x94>
    switch (paclen) {
   16a04:	2b40      	cmp	r3, #64	; 0x40
   16a06:	d130      	bne.n	16a6a <uwbcfg_commit_to_inst_dw1000+0x18a>
    case (64): inst->config.rx.pacLength = DWT_PAC64;break;
   16a08:	2303      	movs	r3, #3
   16a0a:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   16a0e:	e002      	b.n	16a16 <uwbcfg_commit_to_inst_dw1000+0x136>
    case (8):  inst->config.rx.pacLength = DWT_PAC8;break;
   16a10:	2300      	movs	r3, #0
   16a12:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
    if (inst->config.rx.sfdType>1) {
   16a16:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
   16a1a:	2b01      	cmp	r3, #1
   16a1c:	d82c      	bhi.n	16a78 <uwbcfg_commit_to_inst_dw1000+0x198>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_COARSE], CONF_INT8, (void*)&coarse, 0);
   16a1e:	2300      	movs	r3, #0
   16a20:	f10d 020e 	add.w	r2, sp, #14
   16a24:	2102      	movs	r1, #2
   16a26:	f105 0058 	add.w	r0, r5, #88	; 0x58
   16a2a:	f7fc fa20 	bl	12e6e <conf_value_from_str>
    conf_value_from_str(cfg[CFGSTR_TXRF_PWR_FINE], CONF_INT8, (void*)&fine, 0);
   16a2e:	2300      	movs	r3, #0
   16a30:	f10d 020d 	add.w	r2, sp, #13
   16a34:	2102      	movs	r1, #2
   16a36:	f105 0060 	add.w	r0, r5, #96	; 0x60
   16a3a:	f7fc fa18 	bl	12e6e <conf_value_from_str>
    txpwr = inst->config.txrf.BOOSTNORM;
   16a3e:	f894 5528 	ldrb.w	r5, [r4, #1320]	; 0x528
    switch (coarse) {
   16a42:	f89d 300e 	ldrb.w	r3, [sp, #14]
   16a46:	2b12      	cmp	r3, #18
   16a48:	d84e      	bhi.n	16ae8 <uwbcfg_commit_to_inst_dw1000+0x208>
   16a4a:	e8df f003 	tbb	[pc, r3]
   16a4e:	4d48      	.short	0x4d48
   16a50:	4d4d434d 	.word	0x4d4d434d
   16a54:	394d4d3e 	.word	0x394d4d3e
   16a58:	4d344d4d 	.word	0x4d344d4d
   16a5c:	4d4d2f4d 	.word	0x4d4d2f4d
   16a60:	1c          	.byte	0x1c
   16a61:	00          	.byte	0x00
    case (32): inst->config.rx.pacLength = DWT_PAC32;break;
   16a62:	2302      	movs	r3, #2
   16a64:	f884 3510 	strb.w	r3, [r4, #1296]	; 0x510
   16a68:	e7d5      	b.n	16a16 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv paclen\n");
   16a6a:	4b2b      	ldr	r3, [pc, #172]	; (16b18 <uwbcfg_commit_to_inst_dw1000+0x238>)
   16a6c:	2202      	movs	r2, #2
   16a6e:	215c      	movs	r1, #92	; 0x5c
   16a70:	4823      	ldr	r0, [pc, #140]	; (16b00 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16a72:	f7fd fdb1 	bl	145d8 <log_printf>
   16a76:	e7ce      	b.n	16a16 <uwbcfg_commit_to_inst_dw1000+0x136>
        UC_WARN("inv sfdType\n");
   16a78:	4b28      	ldr	r3, [pc, #160]	; (16b1c <uwbcfg_commit_to_inst_dw1000+0x23c>)
   16a7a:	2202      	movs	r2, #2
   16a7c:	215c      	movs	r1, #92	; 0x5c
   16a7e:	4820      	ldr	r0, [pc, #128]	; (16b00 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16a80:	f7fd fdaa 	bl	145d8 <log_printf>
   16a84:	e7cb      	b.n	16a1e <uwbcfg_commit_to_inst_dw1000+0x13e>
    case(18): txpwr = power_value(DW1000_txrf_config_18db, fine);break;
   16a86:	f89d 500d 	ldrb.w	r5, [sp, #13]
    inst->config.txrf.BOOSTNORM = txpwr;
   16a8a:	f884 5528 	strb.w	r5, [r4, #1320]	; 0x528
    inst->config.txrf.BOOSTP500 = txpwr;
   16a8e:	f884 5529 	strb.w	r5, [r4, #1321]	; 0x529
    inst->config.txrf.BOOSTP250 = txpwr;
   16a92:	f884 552a 	strb.w	r5, [r4, #1322]	; 0x52a
    inst->config.txrf.BOOSTP125 = txpwr;
   16a96:	f884 552b 	strb.w	r5, [r4, #1323]	; 0x52b
    inst->config.rx.frameFilter = remap_framefilter(
   16a9a:	f8b4 051c 	ldrh.w	r0, [r4, #1308]	; 0x51c
   16a9e:	f7ff feff 	bl	168a0 <remap_framefilter>
   16aa2:	f8a4 051c 	strh.w	r0, [r4, #1308]	; 0x51c
}
   16aa6:	2000      	movs	r0, #0
   16aa8:	b004      	add	sp, #16
   16aaa:	bd70      	pop	{r4, r5, r6, pc}
    case(15): txpwr = power_value(DW1000_txrf_config_15db, fine);break;
   16aac:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16ab0:	3520      	adds	r5, #32
   16ab2:	b2ed      	uxtb	r5, r5
   16ab4:	e7e9      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(12): txpwr = power_value(DW1000_txrf_config_12db, fine);break;
   16ab6:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16aba:	3540      	adds	r5, #64	; 0x40
   16abc:	b2ed      	uxtb	r5, r5
   16abe:	e7e4      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(9):  txpwr = power_value(DW1000_txrf_config_9db, fine);break;
   16ac0:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16ac4:	3560      	adds	r5, #96	; 0x60
   16ac6:	b2ed      	uxtb	r5, r5
   16ac8:	e7df      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
    case(6):  txpwr = power_value(DW1000_txrf_config_6db, fine);break;
   16aca:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16ace:	f085 0580 	eor.w	r5, r5, #128	; 0x80
   16ad2:	e7da      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_3db, fine);
   16ad4:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16ad8:	3d60      	subs	r5, #96	; 0x60
   16ada:	b2ed      	uxtb	r5, r5
        break;
   16adc:	e7d5      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
        txpwr = power_value(DW1000_txrf_config_0db, fine);
   16ade:	f89d 500d 	ldrb.w	r5, [sp, #13]
   16ae2:	3d40      	subs	r5, #64	; 0x40
   16ae4:	b2ed      	uxtb	r5, r5
        break;
   16ae6:	e7d0      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
        UC_WARN("inv coarse txpwr\n");
   16ae8:	4b0d      	ldr	r3, [pc, #52]	; (16b20 <uwbcfg_commit_to_inst_dw1000+0x240>)
   16aea:	2202      	movs	r2, #2
   16aec:	215c      	movs	r1, #92	; 0x5c
   16aee:	4804      	ldr	r0, [pc, #16]	; (16b00 <uwbcfg_commit_to_inst_dw1000+0x220>)
   16af0:	f7fd fd72 	bl	145d8 <log_printf>
   16af4:	e7c9      	b.n	16a8a <uwbcfg_commit_to_inst_dw1000+0x1aa>
   16af6:	bf00      	nop
   16af8:	deca0130 	.word	0xdeca0130
   16afc:	00027aa8 	.word	0x00027aa8
   16b00:	20005390 	.word	0x20005390
   16b04:	00027968 	.word	0x00027968
   16b08:	00027ab4 	.word	0x00027ab4
   16b0c:	0002796c 	.word	0x0002796c
   16b10:	00027974 	.word	0x00027974
   16b14:	00027abc 	.word	0x00027abc
   16b18:	00027acc 	.word	0x00027acc
   16b1c:	00027ad8 	.word	0x00027ad8
   16b20:	00027ae8 	.word	0x00027ae8

00016b24 <strtod_soft>:
#include <inttypes.h>

#ifndef __KERNEL__

double strtod_soft( const char *nptr, char **endptr )
{
   16b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b28:	ed2d 8b02 	vpush	{d8}
   16b2c:	b085      	sub	sp, #20
   16b2e:	4604      	mov	r4, r0
   16b30:	460f      	mov	r7, r1
    int i, n;
    char *period_at;
    char *dash_at;
    char *exponent_at;
    char *ep = 0;
   16b32:	2300      	movs	r3, #0
   16b34:	9303      	str	r3, [sp, #12]
    int64_t ival, frac, div, exp;
    double f, f_frac;

    period_at = strchr(nptr, '.');
   16b36:	212e      	movs	r1, #46	; 0x2e
   16b38:	f00b fa11 	bl	21f5e <strchr>
   16b3c:	4606      	mov	r6, r0
    dash_at = strchr(nptr, '-');
   16b3e:	212d      	movs	r1, #45	; 0x2d
   16b40:	4620      	mov	r0, r4
   16b42:	f00b fa0c 	bl	21f5e <strchr>
   16b46:	9001      	str	r0, [sp, #4]
    exponent_at = strchr(nptr, 'e');
   16b48:	2165      	movs	r1, #101	; 0x65
   16b4a:	4620      	mov	r0, r4
   16b4c:	f00b fa07 	bl	21f5e <strchr>
   16b50:	4682      	mov	sl, r0
    ival = strtoll(nptr, &ep, 10);
   16b52:	220a      	movs	r2, #10
   16b54:	a903      	add	r1, sp, #12
   16b56:	4620      	mov	r0, r4
   16b58:	f7f9 fddd 	bl	10716 <strtoll>
   16b5c:	468b      	mov	fp, r1
    f = (double)(ival);
   16b5e:	f00d fd7d 	bl	2465c <__aeabi_l2d>
   16b62:	ec41 0b18 	vmov	d8, r0, r1

    if (period_at == 0 || *(period_at+1) == 0) {
   16b66:	b10e      	cbz	r6, 16b6c <strtod_soft+0x48>
   16b68:	7873      	ldrb	r3, [r6, #1]
   16b6a:	b95b      	cbnz	r3, 16b84 <strtod_soft+0x60>
        /* No period, or period at the very end, treat as integer */
        if (endptr) *endptr = ep;
   16b6c:	b10f      	cbz	r7, 16b72 <strtod_soft+0x4e>
   16b6e:	9b03      	ldr	r3, [sp, #12]
   16b70:	603b      	str	r3, [r7, #0]
        exp = 1;
        for (i = 0; i < n; i++) exp *= 10;
        f *= (double)exp;
    }
    return f;
}
   16b72:	eeb0 0a48 	vmov.f32	s0, s16
   16b76:	eef0 0a68 	vmov.f32	s1, s17
   16b7a:	b005      	add	sp, #20
   16b7c:	ecbd 8b02 	vpop	{d8}
   16b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    frac = strtoll(period_at+1, &ep, 10);
   16b84:	1c74      	adds	r4, r6, #1
   16b86:	220a      	movs	r2, #10
   16b88:	a903      	add	r1, sp, #12
   16b8a:	4620      	mov	r0, r4
   16b8c:	f7f9 fdc3 	bl	10716 <strtoll>
   16b90:	4680      	mov	r8, r0
   16b92:	4689      	mov	r9, r1
    if (endptr == 0) n = strlen(period_at + 1);
   16b94:	b137      	cbz	r7, 16ba4 <strtod_soft+0x80>
    else n = *endptr - period_at + 1;
   16b96:	6838      	ldr	r0, [r7, #0]
   16b98:	1b80      	subs	r0, r0, r6
   16b9a:	3001      	adds	r0, #1
    div = 1;
   16b9c:	2401      	movs	r4, #1
   16b9e:	2500      	movs	r5, #0
    for (i = 0; i < n; i++) div *= 10;
   16ba0:	4629      	mov	r1, r5
   16ba2:	e00d      	b.n	16bc0 <strtod_soft+0x9c>
    if (endptr == 0) n = strlen(period_at + 1);
   16ba4:	4620      	mov	r0, r4
   16ba6:	f7f9 fd9f 	bl	106e8 <strlen>
   16baa:	e7f7      	b.n	16b9c <strtod_soft+0x78>
    for (i = 0; i < n; i++) div *= 10;
   16bac:	00aa      	lsls	r2, r5, #2
   16bae:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
   16bb2:	00a3      	lsls	r3, r4, #2
   16bb4:	191c      	adds	r4, r3, r4
   16bb6:	eb45 0502 	adc.w	r5, r5, r2
   16bba:	1924      	adds	r4, r4, r4
   16bbc:	416d      	adcs	r5, r5
   16bbe:	3101      	adds	r1, #1
   16bc0:	4281      	cmp	r1, r0
   16bc2:	dbf3      	blt.n	16bac <strtod_soft+0x88>
    f_frac = (double)frac / (double)div;
   16bc4:	4640      	mov	r0, r8
   16bc6:	4649      	mov	r1, r9
   16bc8:	f00d fd48 	bl	2465c <__aeabi_l2d>
   16bcc:	4680      	mov	r8, r0
   16bce:	4689      	mov	r9, r1
   16bd0:	4620      	mov	r0, r4
   16bd2:	4629      	mov	r1, r5
   16bd4:	f00d fd42 	bl	2465c <__aeabi_l2d>
   16bd8:	4602      	mov	r2, r0
   16bda:	460b      	mov	r3, r1
   16bdc:	4640      	mov	r0, r8
   16bde:	4649      	mov	r1, r9
   16be0:	f00d fe94 	bl	2490c <__aeabi_ddiv>
   16be4:	4602      	mov	r2, r0
   16be6:	460b      	mov	r3, r1
    if (ival < 0 || (dash_at != 0 && dash_at < period_at)) {
   16be8:	f1bb 0f00 	cmp.w	fp, #0
   16bec:	db03      	blt.n	16bf6 <strtod_soft+0xd2>
   16bee:	9901      	ldr	r1, [sp, #4]
   16bf0:	b311      	cbz	r1, 16c38 <strtod_soft+0x114>
   16bf2:	428e      	cmp	r6, r1
   16bf4:	d920      	bls.n	16c38 <strtod_soft+0x114>
        f -= f_frac;
   16bf6:	ec51 0b18 	vmov	r0, r1, d8
   16bfa:	f00d fba5 	bl	24348 <__aeabi_dsub>
   16bfe:	ec41 0b18 	vmov	d8, r0, r1
    if (endptr) *endptr = ep;
   16c02:	b10f      	cbz	r7, 16c08 <strtod_soft+0xe4>
   16c04:	9b03      	ldr	r3, [sp, #12]
   16c06:	603b      	str	r3, [r7, #0]
    if (exponent_at == 0 || *(exponent_at+1) == 0|| ep == 0 || exponent_at != ep) {
   16c08:	f1ba 0f00 	cmp.w	sl, #0
   16c0c:	d0b1      	beq.n	16b72 <strtod_soft+0x4e>
   16c0e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   16c12:	2b00      	cmp	r3, #0
   16c14:	d0ad      	beq.n	16b72 <strtod_soft+0x4e>
   16c16:	9b03      	ldr	r3, [sp, #12]
   16c18:	2b00      	cmp	r3, #0
   16c1a:	d0aa      	beq.n	16b72 <strtod_soft+0x4e>
   16c1c:	4553      	cmp	r3, sl
   16c1e:	d1a8      	bne.n	16b72 <strtod_soft+0x4e>
    n = strtoll(exponent_at+1, &ep, 10);
   16c20:	220a      	movs	r2, #10
   16c22:	a903      	add	r1, sp, #12
   16c24:	f10a 0001 	add.w	r0, sl, #1
   16c28:	f7f9 fd75 	bl	10716 <strtoll>
    if (n < 0) {
   16c2c:	1e05      	subs	r5, r0, #0
   16c2e:	db12      	blt.n	16c56 <strtod_soft+0x132>
        exp = 1;
   16c30:	2001      	movs	r0, #1
   16c32:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) exp *= 10;
   16c34:	460c      	mov	r4, r1
   16c36:	e028      	b.n	16c8a <strtod_soft+0x166>
        f += f_frac;
   16c38:	ec51 0b18 	vmov	r0, r1, d8
   16c3c:	f00d fb86 	bl	2434c <__adddf3>
   16c40:	ec41 0b18 	vmov	d8, r0, r1
   16c44:	e7dd      	b.n	16c02 <strtod_soft+0xde>
        for (i = 0; i < n; i++) div *= 10;
   16c46:	220a      	movs	r2, #10
   16c48:	fb02 f401 	mul.w	r4, r2, r1
   16c4c:	fba0 0102 	umull	r0, r1, r0, r2
   16c50:	4421      	add	r1, r4
   16c52:	3301      	adds	r3, #1
   16c54:	e002      	b.n	16c5c <strtod_soft+0x138>
        div = 1;
   16c56:	2001      	movs	r0, #1
   16c58:	2100      	movs	r1, #0
        for (i = 0; i < n; i++) div *= 10;
   16c5a:	460b      	mov	r3, r1
   16c5c:	42ab      	cmp	r3, r5
   16c5e:	dbf2      	blt.n	16c46 <strtod_soft+0x122>
        f /= (double)div;
   16c60:	f00d fcfc 	bl	2465c <__aeabi_l2d>
   16c64:	4602      	mov	r2, r0
   16c66:	460b      	mov	r3, r1
   16c68:	ec51 0b18 	vmov	r0, r1, d8
   16c6c:	f00d fe4e 	bl	2490c <__aeabi_ddiv>
   16c70:	ec41 0b18 	vmov	d8, r0, r1
   16c74:	e77d      	b.n	16b72 <strtod_soft+0x4e>
        for (i = 0; i < n; i++) exp *= 10;
   16c76:	008b      	lsls	r3, r1, #2
   16c78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   16c7c:	0082      	lsls	r2, r0, #2
   16c7e:	1810      	adds	r0, r2, r0
   16c80:	eb41 0103 	adc.w	r1, r1, r3
   16c84:	1800      	adds	r0, r0, r0
   16c86:	4149      	adcs	r1, r1
   16c88:	3401      	adds	r4, #1
   16c8a:	42ac      	cmp	r4, r5
   16c8c:	dbf3      	blt.n	16c76 <strtod_soft+0x152>
        f *= (double)exp;
   16c8e:	f00d fce5 	bl	2465c <__aeabi_l2d>
   16c92:	4602      	mov	r2, r0
   16c94:	460b      	mov	r3, r1
   16c96:	ec51 0b18 	vmov	r0, r1, d8
   16c9a:	f00d fd0d 	bl	246b8 <__aeabi_dmul>
   16c9e:	ec41 0b18 	vmov	d8, r0, r1
   16ca2:	e766      	b.n	16b72 <strtod_soft+0x4e>

00016ca4 <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   16ca4:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   16ca6:	f010 0f03 	tst.w	r0, #3
   16caa:	d115      	bne.n	16cd8 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   16cac:	4a0d      	ldr	r2, [pc, #52]	; (16ce4 <leapyear+0x40>)
   16cae:	fb82 1200 	smull	r1, r2, r2, r0
   16cb2:	17c0      	asrs	r0, r0, #31
   16cb4:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   16cb8:	2264      	movs	r2, #100	; 0x64
   16cba:	fb02 3010 	mls	r0, r2, r0, r3
   16cbe:	b968      	cbnz	r0, 16cdc <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   16cc0:	4908      	ldr	r1, [pc, #32]	; (16ce4 <leapyear+0x40>)
   16cc2:	fb81 2103 	smull	r2, r1, r1, r3
   16cc6:	17da      	asrs	r2, r3, #31
   16cc8:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   16ccc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   16cd0:	fb01 3212 	mls	r2, r1, r2, r3
   16cd4:	b122      	cbz	r2, 16ce0 <leapyear+0x3c>
   16cd6:	4770      	bx	lr
    int rv = 0;
   16cd8:	2000      	movs	r0, #0
   16cda:	4770      	bx	lr
        rv = 1;
   16cdc:	2001      	movs	r0, #1
   16cde:	4770      	bx	lr
                rv = 1;
   16ce0:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   16ce2:	4770      	bx	lr
   16ce4:	51eb851f 	.word	0x51eb851f

00016ce8 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   16ce8:	4684      	mov	ip, r0
    const char *cp;
    const char *end;

    *val = 0;
   16cea:	2300      	movs	r3, #0
   16cec:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   16cee:	4408      	add	r0, r1
    while (cp < end) {
   16cf0:	4584      	cmp	ip, r0
   16cf2:	d21a      	bcs.n	16d2a <parse_number+0x42>
        if (!isdigit((int) *cp)) {
   16cf4:	f89c 3000 	ldrb.w	r3, [ip]
   16cf8:	3b30      	subs	r3, #48	; 0x30
   16cfa:	2b09      	cmp	r3, #9
   16cfc:	d816      	bhi.n	16d2c <parse_number+0x44>
{
   16cfe:	b500      	push	{lr}
            return (NULL);
        }
        *val *= 10;
   16d00:	6813      	ldr	r3, [r2, #0]
   16d02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16d06:	005b      	lsls	r3, r3, #1
   16d08:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   16d0a:	f81c eb01 	ldrb.w	lr, [ip], #1
   16d0e:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   16d12:	4473      	add	r3, lr
   16d14:	6013      	str	r3, [r2, #0]
    while (cp < end) {
   16d16:	4584      	cmp	ip, r0
   16d18:	d205      	bcs.n	16d26 <parse_number+0x3e>
        if (!isdigit((int) *cp)) {
   16d1a:	f89c 3000 	ldrb.w	r3, [ip]
   16d1e:	3b30      	subs	r3, #48	; 0x30
   16d20:	2b09      	cmp	r3, #9
   16d22:	d9ed      	bls.n	16d00 <parse_number+0x18>
            return (NULL);
   16d24:	2000      	movs	r0, #0
        cp++;
    }
    return (end);
}
   16d26:	f85d fb04 	ldr.w	pc, [sp], #4
   16d2a:	4770      	bx	lr
            return (NULL);
   16d2c:	2000      	movs	r0, #0
}
   16d2e:	4770      	bx	lr

00016d30 <clocktime_to_timeval>:
{
   16d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d34:	b085      	sub	sp, #20
   16d36:	9101      	str	r1, [sp, #4]
   16d38:	9200      	str	r2, [sp, #0]
    year = ct->year;
   16d3a:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   16d3c:	f240 73b1 	movw	r3, #1969	; 0x7b1
   16d40:	429e      	cmp	r6, r3
   16d42:	f340 80bc 	ble.w	16ebe <clocktime_to_timeval+0x18e>
   16d46:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   16d48:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   16d4a:	2d00      	cmp	r5, #0
   16d4c:	f340 80bb 	ble.w	16ec6 <clocktime_to_timeval+0x196>
        ct->mon < 1 || ct->mon > 12 ||
   16d50:	2d0c      	cmp	r5, #12
   16d52:	f300 80ba 	bgt.w	16eca <clocktime_to_timeval+0x19a>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16d56:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   16d5a:	f1b8 0f00 	cmp.w	r8, #0
   16d5e:	f340 80b6 	ble.w	16ece <clocktime_to_timeval+0x19e>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16d62:	1e6b      	subs	r3, r5, #1
   16d64:	4a65      	ldr	r2, [pc, #404]	; (16efc <clocktime_to_timeval+0x1cc>)
   16d66:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   16d6a:	2d02      	cmp	r5, #2
   16d6c:	d02b      	beq.n	16dc6 <clocktime_to_timeval+0x96>
   16d6e:	2000      	movs	r0, #0
   16d70:	4407      	add	r7, r0
   16d72:	45b8      	cmp	r8, r7
   16d74:	f300 80ad 	bgt.w	16ed2 <clocktime_to_timeval+0x1a2>
        ct->hour < 0 || ct->hour > 23 ||
   16d78:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16d7c:	f1bb 0f00 	cmp.w	fp, #0
   16d80:	f2c0 80a9 	blt.w	16ed6 <clocktime_to_timeval+0x1a6>
        ct->hour < 0 || ct->hour > 23 ||
   16d84:	f1bb 0f17 	cmp.w	fp, #23
   16d88:	f300 80a7 	bgt.w	16eda <clocktime_to_timeval+0x1aa>
        ct->min < 0 || ct->min > 59 ||
   16d8c:	6923      	ldr	r3, [r4, #16]
   16d8e:	9302      	str	r3, [sp, #8]
        ct->hour < 0 || ct->hour > 23 ||
   16d90:	2b00      	cmp	r3, #0
   16d92:	f2c0 80a4 	blt.w	16ede <clocktime_to_timeval+0x1ae>
        ct->min < 0 || ct->min > 59 ||
   16d96:	2b3b      	cmp	r3, #59	; 0x3b
   16d98:	f300 80a3 	bgt.w	16ee2 <clocktime_to_timeval+0x1b2>
        ct->sec < 0 || ct->sec > 59 ||
   16d9c:	6963      	ldr	r3, [r4, #20]
   16d9e:	9303      	str	r3, [sp, #12]
        ct->min < 0 || ct->min > 59 ||
   16da0:	2b00      	cmp	r3, #0
   16da2:	f2c0 80a0 	blt.w	16ee6 <clocktime_to_timeval+0x1b6>
        ct->sec < 0 || ct->sec > 59 ||
   16da6:	2b3b      	cmp	r3, #59	; 0x3b
   16da8:	f300 809f 	bgt.w	16eea <clocktime_to_timeval+0x1ba>
        ct->usec < 0 || ct->usec > 999999) {
   16dac:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   16dae:	2b00      	cmp	r3, #0
   16db0:	f2c0 809d 	blt.w	16eee <clocktime_to_timeval+0x1be>
        ct->usec < 0 || ct->usec > 999999) {
   16db4:	4a52      	ldr	r2, [pc, #328]	; (16f00 <clocktime_to_timeval+0x1d0>)
   16db6:	4293      	cmp	r3, r2
   16db8:	f300 809b 	bgt.w	16ef2 <clocktime_to_timeval+0x1c2>
    days = 0;
   16dbc:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   16dc0:	f240 77b2 	movw	r7, #1970	; 0x7b2
   16dc4:	e007      	b.n	16dd6 <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   16dc6:	4630      	mov	r0, r6
   16dc8:	f7ff ff6c 	bl	16ca4 <leapyear>
   16dcc:	e7d0      	b.n	16d70 <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   16dce:	f240 136d 	movw	r3, #365	; 0x16d
   16dd2:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   16dd4:	3701      	adds	r7, #1
   16dd6:	42b7      	cmp	r7, r6
   16dd8:	da07      	bge.n	16dea <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   16dda:	4638      	mov	r0, r7
   16ddc:	f7ff ff62 	bl	16ca4 <leapyear>
   16de0:	2800      	cmp	r0, #0
   16de2:	d0f4      	beq.n	16dce <clocktime_to_timeval+0x9e>
   16de4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   16de8:	e7f3      	b.n	16dd2 <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   16dea:	2701      	movs	r7, #1
   16dec:	46aa      	mov	sl, r5
   16dee:	e005      	b.n	16dfc <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   16df0:	4630      	mov	r0, r6
   16df2:	f7ff ff57 	bl	16ca4 <leapyear>
   16df6:	4405      	add	r5, r0
   16df8:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   16dfa:	3701      	adds	r7, #1
   16dfc:	45ba      	cmp	sl, r7
   16dfe:	dd07      	ble.n	16e10 <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   16e00:	1e7b      	subs	r3, r7, #1
   16e02:	4a3e      	ldr	r2, [pc, #248]	; (16efc <clocktime_to_timeval+0x1cc>)
   16e04:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   16e08:	2f02      	cmp	r7, #2
   16e0a:	d0f1      	beq.n	16df0 <clocktime_to_timeval+0xc0>
   16e0c:	2000      	movs	r0, #0
   16e0e:	e7f2      	b.n	16df6 <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   16e10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   16e14:	44c1      	add	r9, r8
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   16e16:	ea4f 72e9 	mov.w	r2, r9, asr #31
   16e1a:	eb19 0309 	adds.w	r3, r9, r9
   16e1e:	eb42 0102 	adc.w	r1, r2, r2
   16e22:	eb13 0309 	adds.w	r3, r3, r9
   16e26:	eb42 0201 	adc.w	r2, r2, r1
   16e2a:	00d2      	lsls	r2, r2, #3
   16e2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   16e30:	00db      	lsls	r3, r3, #3
   16e32:	eb13 030b 	adds.w	r3, r3, fp
   16e36:	eb42 7beb 	adc.w	fp, r2, fp, asr #31
   16e3a:	ea4f 120b 	mov.w	r2, fp, lsl #4
   16e3e:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   16e42:	0119      	lsls	r1, r3, #4
   16e44:	1acb      	subs	r3, r1, r3
   16e46:	eb62 020b 	sbc.w	r2, r2, fp
   16e4a:	0092      	lsls	r2, r2, #2
   16e4c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   16e50:	009b      	lsls	r3, r3, #2
   16e52:	9802      	ldr	r0, [sp, #8]
   16e54:	1819      	adds	r1, r3, r0
   16e56:	eb42 70e0 	adc.w	r0, r2, r0, asr #31
   16e5a:	0102      	lsls	r2, r0, #4
   16e5c:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
   16e60:	010b      	lsls	r3, r1, #4
   16e62:	1a5b      	subs	r3, r3, r1
   16e64:	eb62 0200 	sbc.w	r2, r2, r0
   16e68:	0092      	lsls	r2, r2, #2
   16e6a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   16e6e:	009b      	lsls	r3, r3, #2
   16e70:	9903      	ldr	r1, [sp, #12]
   16e72:	185b      	adds	r3, r3, r1
   16e74:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   16e78:	9800      	ldr	r0, [sp, #0]
   16e7a:	6003      	str	r3, [r0, #0]
   16e7c:	6042      	str	r2, [r0, #4]
    tv->tv_usec = ct->usec;
   16e7e:	69e1      	ldr	r1, [r4, #28]
   16e80:	4604      	mov	r4, r0
   16e82:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   16e84:	9d01      	ldr	r5, [sp, #4]
   16e86:	b3b5      	cbz	r5, 16ef6 <clocktime_to_timeval+0x1c6>
	tv->tv_sec += tz->tz_minuteswest * 60;
   16e88:	f9b5 1000 	ldrsh.w	r1, [r5]
   16e8c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   16e90:	0088      	lsls	r0, r1, #2
   16e92:	181b      	adds	r3, r3, r0
   16e94:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   16e98:	6023      	str	r3, [r4, #0]
   16e9a:	6062      	str	r2, [r4, #4]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   16e9c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   16ea0:	b151      	cbz	r1, 16eb8 <clocktime_to_timeval+0x188>
   16ea2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   16ea6:	2000      	movs	r0, #0
   16ea8:	1a5b      	subs	r3, r3, r1
   16eaa:	eb62 0200 	sbc.w	r2, r2, r0
   16eae:	9900      	ldr	r1, [sp, #0]
   16eb0:	600b      	str	r3, [r1, #0]
   16eb2:	604a      	str	r2, [r1, #4]
    return (0);
   16eb4:	2000      	movs	r0, #0
   16eb6:	e003      	b.n	16ec0 <clocktime_to_timeval+0x190>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   16eb8:	2100      	movs	r1, #0
   16eba:	4608      	mov	r0, r1
   16ebc:	e7f4      	b.n	16ea8 <clocktime_to_timeval+0x178>
        return (OS_EINVAL);
   16ebe:	2002      	movs	r0, #2
}
   16ec0:	b005      	add	sp, #20
   16ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   16ec6:	2002      	movs	r0, #2
   16ec8:	e7fa      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16eca:	2002      	movs	r0, #2
   16ecc:	e7f8      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ece:	2002      	movs	r0, #2
   16ed0:	e7f6      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ed2:	2002      	movs	r0, #2
   16ed4:	e7f4      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ed6:	2002      	movs	r0, #2
   16ed8:	e7f2      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16eda:	2002      	movs	r0, #2
   16edc:	e7f0      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ede:	2002      	movs	r0, #2
   16ee0:	e7ee      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ee2:	2002      	movs	r0, #2
   16ee4:	e7ec      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ee6:	2002      	movs	r0, #2
   16ee8:	e7ea      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16eea:	2002      	movs	r0, #2
   16eec:	e7e8      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16eee:	2002      	movs	r0, #2
   16ef0:	e7e6      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16ef2:	2002      	movs	r0, #2
   16ef4:	e7e4      	b.n	16ec0 <clocktime_to_timeval+0x190>
    return (0);
   16ef6:	2000      	movs	r0, #0
   16ef8:	e7e2      	b.n	16ec0 <clocktime_to_timeval+0x190>
   16efa:	bf00      	nop
   16efc:	00027b2c 	.word	0x00027b2c
   16f00:	000f423f 	.word	0x000f423f

00016f04 <timeval_to_clocktime>:
{
   16f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16f08:	4606      	mov	r6, r0
   16f0a:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   16f0c:	6807      	ldr	r7, [r0, #0]
   16f0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if (tz != NULL) {
   16f12:	b189      	cbz	r1, 16f38 <timeval_to_clocktime+0x34>
        secs -= tz->tz_minuteswest * 60;
   16f14:	f9b1 3000 	ldrsh.w	r3, [r1]
   16f18:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   16f1c:	009a      	lsls	r2, r3, #2
   16f1e:	1abf      	subs	r7, r7, r2
   16f20:	eb68 73e3 	sbc.w	r3, r8, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   16f24:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   16f28:	b37a      	cbz	r2, 16f8a <timeval_to_clocktime+0x86>
   16f2a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16f2e:	f04f 0800 	mov.w	r8, #0
   16f32:	19d7      	adds	r7, r2, r7
   16f34:	eb48 0803 	adc.w	r8, r8, r3
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   16f38:	f1b8 0f00 	cmp.w	r8, #0
   16f3c:	db73      	blt.n	17026 <timeval_to_clocktime+0x122>
   16f3e:	68b3      	ldr	r3, [r6, #8]
   16f40:	2b00      	cmp	r3, #0
   16f42:	db72      	blt.n	1702a <timeval_to_clocktime+0x126>
   16f44:	4a3b      	ldr	r2, [pc, #236]	; (17034 <timeval_to_clocktime+0x130>)
   16f46:	4293      	cmp	r3, r2
   16f48:	dc71      	bgt.n	1702e <timeval_to_clocktime+0x12a>
    days = secs / SECDAY;
   16f4a:	4a3b      	ldr	r2, [pc, #236]	; (17038 <timeval_to_clocktime+0x134>)
   16f4c:	2300      	movs	r3, #0
   16f4e:	4638      	mov	r0, r7
   16f50:	4641      	mov	r1, r8
   16f52:	f00e f807 	bl	24f64 <__aeabi_ldivmod>
   16f56:	4681      	mov	r9, r0
   16f58:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   16f5a:	4a37      	ldr	r2, [pc, #220]	; (17038 <timeval_to_clocktime+0x134>)
   16f5c:	2300      	movs	r3, #0
   16f5e:	4638      	mov	r0, r7
   16f60:	4641      	mov	r1, r8
   16f62:	f00d ffff 	bl	24f64 <__aeabi_ldivmod>
   16f66:	4690      	mov	r8, r2
   16f68:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   16f6a:	f109 0004 	add.w	r0, r9, #4
   16f6e:	4b33      	ldr	r3, [pc, #204]	; (1703c <timeval_to_clocktime+0x138>)
   16f70:	fb83 2300 	smull	r2, r3, r3, r0
   16f74:	181a      	adds	r2, r3, r0
   16f76:	17c3      	asrs	r3, r0, #31
   16f78:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   16f7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   16f80:	1ac3      	subs	r3, r0, r3
   16f82:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   16f84:	f240 79b2 	movw	r9, #1970	; 0x7b2
   16f88:	e009      	b.n	16f9e <timeval_to_clocktime+0x9a>
        secs += tz->tz_dsttime ? 3600 : 0;
   16f8a:	2200      	movs	r2, #0
   16f8c:	4690      	mov	r8, r2
   16f8e:	e7d0      	b.n	16f32 <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   16f90:	f240 136d 	movw	r3, #365	; 0x16d
   16f94:	429c      	cmp	r4, r3
   16f96:	db0b      	blt.n	16fb0 <timeval_to_clocktime+0xac>
        days -= days_in_year(year);
   16f98:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   16f9a:	f109 0901 	add.w	r9, r9, #1
   16f9e:	4648      	mov	r0, r9
   16fa0:	f7ff fe80 	bl	16ca4 <leapyear>
   16fa4:	4686      	mov	lr, r0
   16fa6:	2800      	cmp	r0, #0
   16fa8:	d0f2      	beq.n	16f90 <timeval_to_clocktime+0x8c>
   16faa:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   16fae:	e7f1      	b.n	16f94 <timeval_to_clocktime+0x90>
    ct->year = year;
   16fb0:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   16fb4:	2301      	movs	r3, #1
   16fb6:	e006      	b.n	16fc6 <timeval_to_clocktime+0xc2>
   16fb8:	46f4      	mov	ip, lr
   16fba:	448c      	add	ip, r1
   16fbc:	45a4      	cmp	ip, r4
   16fbe:	dc0b      	bgt.n	16fd8 <timeval_to_clocktime+0xd4>
        days -= days_in_month(year, i);
   16fc0:	eba4 040c 	sub.w	r4, r4, ip
    for (i = 1; days >= days_in_month(year, i); i++)
   16fc4:	3301      	adds	r3, #1
   16fc6:	1e5a      	subs	r2, r3, #1
   16fc8:	491d      	ldr	r1, [pc, #116]	; (17040 <timeval_to_clocktime+0x13c>)
   16fca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   16fce:	2b02      	cmp	r3, #2
   16fd0:	d0f2      	beq.n	16fb8 <timeval_to_clocktime+0xb4>
   16fd2:	f04f 0c00 	mov.w	ip, #0
   16fd6:	e7f0      	b.n	16fba <timeval_to_clocktime+0xb6>
    ct->mon = i;
   16fd8:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   16fda:	3401      	adds	r4, #1
   16fdc:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   16fde:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16fe2:	2300      	movs	r3, #0
   16fe4:	4640      	mov	r0, r8
   16fe6:	4639      	mov	r1, r7
   16fe8:	f00d ffbc 	bl	24f64 <__aeabi_ldivmod>
   16fec:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   16fee:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   16ff2:	2300      	movs	r3, #0
   16ff4:	4640      	mov	r0, r8
   16ff6:	4639      	mov	r1, r7
   16ff8:	f00d ffb4 	bl	24f64 <__aeabi_ldivmod>
   16ffc:	4617      	mov	r7, r2
   16ffe:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   17000:	223c      	movs	r2, #60	; 0x3c
   17002:	2300      	movs	r3, #0
   17004:	4638      	mov	r0, r7
   17006:	4621      	mov	r1, r4
   17008:	f00d ffac 	bl	24f64 <__aeabi_ldivmod>
   1700c:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   1700e:	223c      	movs	r2, #60	; 0x3c
   17010:	2300      	movs	r3, #0
   17012:	4638      	mov	r0, r7
   17014:	4621      	mov	r1, r4
   17016:	f00d ffa5 	bl	24f64 <__aeabi_ldivmod>
    ct->sec  = rsec;
   1701a:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   1701c:	68b3      	ldr	r3, [r6, #8]
   1701e:	61eb      	str	r3, [r5, #28]
    return (0);
   17020:	2000      	movs	r0, #0
}
   17022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return (OS_EINVAL);
   17026:	2002      	movs	r0, #2
   17028:	e7fb      	b.n	17022 <timeval_to_clocktime+0x11e>
   1702a:	2002      	movs	r0, #2
   1702c:	e7f9      	b.n	17022 <timeval_to_clocktime+0x11e>
   1702e:	2002      	movs	r0, #2
   17030:	e7f7      	b.n	17022 <timeval_to_clocktime+0x11e>
   17032:	bf00      	nop
   17034:	000f423f 	.word	0x000f423f
   17038:	00015180 	.word	0x00015180
   1703c:	92492493 	.word	0x92492493
   17040:	00027b2c 	.word	0x00027b2c

00017044 <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   17044:	b570      	push	{r4, r5, r6, lr}
   17046:	b08a      	sub	sp, #40	; 0x28
   17048:	4604      	mov	r4, r0
   1704a:	460d      	mov	r5, r1
   1704c:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   1704e:	2220      	movs	r2, #32
   17050:	2100      	movs	r1, #0
   17052:	4668      	mov	r0, sp
   17054:	f7f9 fb11 	bl	1067a <memset>
    bzero(tv, sizeof(struct os_timeval));
   17058:	2300      	movs	r3, #0
   1705a:	602b      	str	r3, [r5, #0]
   1705c:	606b      	str	r3, [r5, #4]
   1705e:	60ab      	str	r3, [r5, #8]
   17060:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   17062:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   17064:	466a      	mov	r2, sp
   17066:	2104      	movs	r1, #4
   17068:	4620      	mov	r0, r4
   1706a:	f7ff fe3d 	bl	16ce8 <parse_number>
    if (cp == NULL || *cp != '-') {
   1706e:	2800      	cmp	r0, #0
   17070:	f000 80a6 	beq.w	171c0 <datetime_parse+0x17c>
   17074:	7802      	ldrb	r2, [r0, #0]
   17076:	2a2d      	cmp	r2, #45	; 0x2d
   17078:	f040 80a5 	bne.w	171c6 <datetime_parse+0x182>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   1707c:	aa01      	add	r2, sp, #4
   1707e:	2102      	movs	r1, #2
   17080:	3001      	adds	r0, #1
   17082:	f7ff fe31 	bl	16ce8 <parse_number>
    if (cp == NULL || *cp != '-') {
   17086:	2800      	cmp	r0, #0
   17088:	f000 80a0 	beq.w	171cc <datetime_parse+0x188>
   1708c:	7802      	ldrb	r2, [r0, #0]
   1708e:	2a2d      	cmp	r2, #45	; 0x2d
   17090:	f040 809f 	bne.w	171d2 <datetime_parse+0x18e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   17094:	aa02      	add	r2, sp, #8
   17096:	2102      	movs	r1, #2
   17098:	3001      	adds	r0, #1
   1709a:	f7ff fe25 	bl	16ce8 <parse_number>
    if (cp == NULL || *cp != 'T') {
   1709e:	2800      	cmp	r0, #0
   170a0:	f000 809a 	beq.w	171d8 <datetime_parse+0x194>
   170a4:	7802      	ldrb	r2, [r0, #0]
   170a6:	2a54      	cmp	r2, #84	; 0x54
   170a8:	f040 8099 	bne.w	171de <datetime_parse+0x19a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   170ac:	aa03      	add	r2, sp, #12
   170ae:	2102      	movs	r1, #2
   170b0:	3001      	adds	r0, #1
   170b2:	f7ff fe19 	bl	16ce8 <parse_number>
    if (cp == NULL || *cp != ':') {
   170b6:	2800      	cmp	r0, #0
   170b8:	f000 8094 	beq.w	171e4 <datetime_parse+0x1a0>
   170bc:	7802      	ldrb	r2, [r0, #0]
   170be:	2a3a      	cmp	r2, #58	; 0x3a
   170c0:	f040 8093 	bne.w	171ea <datetime_parse+0x1a6>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   170c4:	aa04      	add	r2, sp, #16
   170c6:	2102      	movs	r1, #2
   170c8:	3001      	adds	r0, #1
   170ca:	f7ff fe0d 	bl	16ce8 <parse_number>
    if (cp == NULL || *cp != ':') {
   170ce:	2800      	cmp	r0, #0
   170d0:	f000 808e 	beq.w	171f0 <datetime_parse+0x1ac>
   170d4:	7802      	ldrb	r2, [r0, #0]
   170d6:	2a3a      	cmp	r2, #58	; 0x3a
   170d8:	f040 808d 	bne.w	171f6 <datetime_parse+0x1b2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   170dc:	aa05      	add	r2, sp, #20
   170de:	2102      	movs	r1, #2
   170e0:	3001      	adds	r0, #1
   170e2:	f7ff fe01 	bl	16ce8 <parse_number>
    if (cp == NULL) {
   170e6:	4684      	mov	ip, r0
   170e8:	2800      	cmp	r0, #0
   170ea:	f000 8087 	beq.w	171fc <datetime_parse+0x1b8>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   170ee:	7803      	ldrb	r3, [r0, #0]
   170f0:	2b2e      	cmp	r3, #46	; 0x2e
   170f2:	d037      	beq.n	17164 <datetime_parse+0x120>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   170f4:	f89c 3000 	ldrb.w	r3, [ip]
   170f8:	2b5a      	cmp	r3, #90	; 0x5a
   170fa:	d050      	beq.n	1719e <datetime_parse+0x15a>
   170fc:	2b7a      	cmp	r3, #122	; 0x7a
   170fe:	d04e      	beq.n	1719e <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   17100:	2b2b      	cmp	r3, #43	; 0x2b
   17102:	d001      	beq.n	17108 <datetime_parse+0xc4>
   17104:	2b2d      	cmp	r3, #45	; 0x2d
   17106:	d14c      	bne.n	171a2 <datetime_parse+0x15e>
        sign = (*cp == '+') ? +1 : -1;
   17108:	2b2b      	cmp	r3, #43	; 0x2b
   1710a:	d057      	beq.n	171bc <datetime_parse+0x178>
   1710c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   17110:	aa09      	add	r2, sp, #36	; 0x24
   17112:	2102      	movs	r1, #2
   17114:	f10c 0001 	add.w	r0, ip, #1
   17118:	f7ff fde6 	bl	16ce8 <parse_number>
        if (cp == NULL || *cp != ':') {
   1711c:	2800      	cmp	r0, #0
   1711e:	d076      	beq.n	1720e <datetime_parse+0x1ca>
   17120:	7802      	ldrb	r2, [r0, #0]
   17122:	2a3a      	cmp	r2, #58	; 0x3a
   17124:	d176      	bne.n	17214 <datetime_parse+0x1d0>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   17126:	aa08      	add	r2, sp, #32
   17128:	2102      	movs	r1, #2
   1712a:	3001      	adds	r0, #1
   1712c:	f7ff fddc 	bl	16ce8 <parse_number>
        if (cp == NULL) {
   17130:	4684      	mov	ip, r0
   17132:	2800      	cmp	r0, #0
   17134:	d071      	beq.n	1721a <datetime_parse+0x1d6>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   17136:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17138:	2a17      	cmp	r2, #23
   1713a:	d871      	bhi.n	17220 <datetime_parse+0x1dc>
   1713c:	9b08      	ldr	r3, [sp, #32]
   1713e:	2b00      	cmp	r3, #0
   17140:	db71      	blt.n	17226 <datetime_parse+0x1e2>
   17142:	2b3b      	cmp	r3, #59	; 0x3b
   17144:	dc72      	bgt.n	1722c <datetime_parse+0x1e8>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   17146:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   1714a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1714e:	b29a      	uxth	r2, r3
   17150:	b21b      	sxth	r3, r3
   17152:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   17154:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   17158:	dc6b      	bgt.n	17232 <datetime_parse+0x1ee>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   1715a:	2c00      	cmp	r4, #0
   1715c:	dd21      	ble.n	171a2 <datetime_parse+0x15e>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   1715e:	4252      	negs	r2, r2
   17160:	8032      	strh	r2, [r6, #0]
   17162:	e01e      	b.n	171a2 <datetime_parse+0x15e>
        ep = ++cp;
   17164:	3001      	adds	r0, #1
   17166:	4604      	mov	r4, r0
        while (isdigit((int) *ep)) {
   17168:	e000      	b.n	1716c <datetime_parse+0x128>
            ep++;
   1716a:	3401      	adds	r4, #1
        while (isdigit((int) *ep)) {
   1716c:	7823      	ldrb	r3, [r4, #0]
   1716e:	3b30      	subs	r3, #48	; 0x30
   17170:	2b09      	cmp	r3, #9
   17172:	d9fa      	bls.n	1716a <datetime_parse+0x126>
        digits = ep - cp;
   17174:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   17176:	1e63      	subs	r3, r4, #1
   17178:	2b05      	cmp	r3, #5
   1717a:	d842      	bhi.n	17202 <datetime_parse+0x1be>
        cp = parse_number(cp, digits, &ct.usec);
   1717c:	aa07      	add	r2, sp, #28
   1717e:	4621      	mov	r1, r4
   17180:	f7ff fdb2 	bl	16ce8 <parse_number>
        if (cp == NULL) {
   17184:	4684      	mov	ip, r0
   17186:	2800      	cmp	r0, #0
   17188:	d03e      	beq.n	17208 <datetime_parse+0x1c4>
        while (digits++ < 6) {
   1718a:	1c62      	adds	r2, r4, #1
   1718c:	2c05      	cmp	r4, #5
   1718e:	dcb1      	bgt.n	170f4 <datetime_parse+0xb0>
            ct.usec *= 10;
   17190:	9b07      	ldr	r3, [sp, #28]
   17192:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17196:	005b      	lsls	r3, r3, #1
   17198:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   1719a:	4614      	mov	r4, r2
   1719c:	e7f5      	b.n	1718a <datetime_parse+0x146>
        cp++;
   1719e:	f10c 0c01 	add.w	ip, ip, #1
        /*
         * 'time offset' is not specified so date/time defaults to UTC.
         */
    }

    if (*cp != '\0') {
   171a2:	f89c 3000 	ldrb.w	r3, [ip]
   171a6:	2b00      	cmp	r3, #0
   171a8:	d146      	bne.n	17238 <datetime_parse+0x1f4>
        goto err;
    }

    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   171aa:	462a      	mov	r2, r5
   171ac:	4631      	mov	r1, r6
   171ae:	4668      	mov	r0, sp
   171b0:	f7ff fdbe 	bl	16d30 <clocktime_to_timeval>
   171b4:	2800      	cmp	r0, #0
   171b6:	d142      	bne.n	1723e <datetime_parse+0x1fa>
    }

    return (0);
err:
    return (-1);
}
   171b8:	b00a      	add	sp, #40	; 0x28
   171ba:	bd70      	pop	{r4, r5, r6, pc}
        sign = (*cp == '+') ? +1 : -1;
   171bc:	2401      	movs	r4, #1
   171be:	e7a7      	b.n	17110 <datetime_parse+0xcc>
    return (-1);
   171c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171c4:	e7f8      	b.n	171b8 <datetime_parse+0x174>
   171c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171ca:	e7f5      	b.n	171b8 <datetime_parse+0x174>
   171cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171d0:	e7f2      	b.n	171b8 <datetime_parse+0x174>
   171d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171d6:	e7ef      	b.n	171b8 <datetime_parse+0x174>
   171d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171dc:	e7ec      	b.n	171b8 <datetime_parse+0x174>
   171de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171e2:	e7e9      	b.n	171b8 <datetime_parse+0x174>
   171e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171e8:	e7e6      	b.n	171b8 <datetime_parse+0x174>
   171ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171ee:	e7e3      	b.n	171b8 <datetime_parse+0x174>
   171f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171f4:	e7e0      	b.n	171b8 <datetime_parse+0x174>
   171f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   171fa:	e7dd      	b.n	171b8 <datetime_parse+0x174>
   171fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17200:	e7da      	b.n	171b8 <datetime_parse+0x174>
   17202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17206:	e7d7      	b.n	171b8 <datetime_parse+0x174>
   17208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1720c:	e7d4      	b.n	171b8 <datetime_parse+0x174>
   1720e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17212:	e7d1      	b.n	171b8 <datetime_parse+0x174>
   17214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17218:	e7ce      	b.n	171b8 <datetime_parse+0x174>
   1721a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1721e:	e7cb      	b.n	171b8 <datetime_parse+0x174>
   17220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17224:	e7c8      	b.n	171b8 <datetime_parse+0x174>
   17226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1722a:	e7c5      	b.n	171b8 <datetime_parse+0x174>
   1722c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17230:	e7c2      	b.n	171b8 <datetime_parse+0x174>
   17232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17236:	e7bf      	b.n	171b8 <datetime_parse+0x174>
   17238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1723c:	e7bc      	b.n	171b8 <datetime_parse+0x174>
   1723e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17242:	e7b9      	b.n	171b8 <datetime_parse+0x174>

00017244 <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   17244:	b5f0      	push	{r4, r5, r6, r7, lr}
   17246:	b08f      	sub	sp, #60	; 0x3c
   17248:	460e      	mov	r6, r1
   1724a:	4617      	mov	r7, r2
   1724c:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   1724e:	aa06      	add	r2, sp, #24
   17250:	f7ff fe58 	bl	16f04 <timeval_to_clocktime>
    if (rc != 0) {
   17254:	2800      	cmp	r0, #0
   17256:	d147      	bne.n	172e8 <datetime_format+0xa4>
   17258:	4605      	mov	r5, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   1725a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1725c:	9305      	str	r3, [sp, #20]
   1725e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17260:	9304      	str	r3, [sp, #16]
   17262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17264:	9303      	str	r3, [sp, #12]
   17266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17268:	9302      	str	r3, [sp, #8]
   1726a:	9b08      	ldr	r3, [sp, #32]
   1726c:	9301      	str	r3, [sp, #4]
   1726e:	9b07      	ldr	r3, [sp, #28]
   17270:	9300      	str	r3, [sp, #0]
   17272:	9b06      	ldr	r3, [sp, #24]
   17274:	4a24      	ldr	r2, [pc, #144]	; (17308 <datetime_format+0xc4>)
   17276:	4621      	mov	r1, r4
   17278:	4638      	mov	r0, r7
   1727a:	f7f9 fe46 	bl	10f0a <snprintf>
   1727e:	4684      	mov	ip, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   17280:	1838      	adds	r0, r7, r0
    rlen -= rc;
   17282:	eba4 040c 	sub.w	r4, r4, ip
    if (rc < 0 || rlen <= 0) {
   17286:	f1bc 0f00 	cmp.w	ip, #0
   1728a:	db30      	blt.n	172ee <datetime_format+0xaa>
   1728c:	2c00      	cmp	r4, #0
   1728e:	dd31      	ble.n	172f4 <datetime_format+0xb0>
        goto err;
    }

    if (tz != NULL) {
   17290:	b15e      	cbz	r6, 172aa <datetime_format+0x66>
        minswest = tz->tz_minuteswest;
   17292:	f9b6 c000 	ldrsh.w	ip, [r6]
        if (tz->tz_dsttime) {
   17296:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   1729a:	b10b      	cbz	r3, 172a0 <datetime_format+0x5c>
            minswest -= 60;
   1729c:	f1ac 0c3c 	sub.w	ip, ip, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   172a0:	f1bc 0f00 	cmp.w	ip, #0
   172a4:	dd02      	ble.n	172ac <datetime_format+0x68>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   172a6:	232d      	movs	r3, #45	; 0x2d
   172a8:	e003      	b.n	172b2 <datetime_format+0x6e>
        minswest = 0;
   172aa:	46ac      	mov	ip, r5
        minswest = -minswest;
   172ac:	f1cc 0c00 	rsb	ip, ip, #0
        sign = '+';
   172b0:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   172b2:	4a16      	ldr	r2, [pc, #88]	; (1730c <datetime_format+0xc8>)
   172b4:	fb82 120c 	smull	r1, r2, r2, ip
   172b8:	eb02 010c 	add.w	r1, r2, ip
   172bc:	ea4f 72ec 	mov.w	r2, ip, asr #31
   172c0:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   172c4:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   172c8:	ebac 0181 	sub.w	r1, ip, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   172cc:	9101      	str	r1, [sp, #4]
   172ce:	9200      	str	r2, [sp, #0]
   172d0:	4a0f      	ldr	r2, [pc, #60]	; (17310 <datetime_format+0xcc>)
   172d2:	4621      	mov	r1, r4
   172d4:	f7f9 fe19 	bl	10f0a <snprintf>
    cp += rc;
    rlen -= rc;
   172d8:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   172da:	2800      	cmp	r0, #0
   172dc:	db0d      	blt.n	172fa <datetime_format+0xb6>
   172de:	2c00      	cmp	r4, #0
   172e0:	dd0e      	ble.n	17300 <datetime_format+0xbc>

    return (0);

err:
    return (-1);
}
   172e2:	4628      	mov	r0, r5
   172e4:	b00f      	add	sp, #60	; 0x3c
   172e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (-1);
   172e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   172ec:	e7f9      	b.n	172e2 <datetime_format+0x9e>
   172ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   172f2:	e7f6      	b.n	172e2 <datetime_format+0x9e>
   172f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   172f8:	e7f3      	b.n	172e2 <datetime_format+0x9e>
   172fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   172fe:	e7f0      	b.n	172e2 <datetime_format+0x9e>
   17300:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17304:	e7ed      	b.n	172e2 <datetime_format+0x9e>
   17306:	bf00      	nop
   17308:	00027afc 	.word	0x00027afc
   1730c:	88888889 	.word	0x88888889
   17310:	00027b20 	.word	0x00027b20

00017314 <crc16_ccitt>:
    int counter;

    crc = initial_crc;
    ptr = buf;

    for (counter = 0; counter < len; counter++) {
   17314:	f04f 0c00 	mov.w	ip, #0
   17318:	4594      	cmp	ip, r2
   1731a:	da11      	bge.n	17340 <crc16_ccitt+0x2c>
{
   1731c:	b410      	push	{r4}
        crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *ptr++)&0x00FF];
   1731e:	f811 3b01 	ldrb.w	r3, [r1], #1
   17322:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
   17326:	4c07      	ldr	r4, [pc, #28]	; (17344 <crc16_ccitt+0x30>)
   17328:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
   1732c:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
   17330:	b280      	uxth	r0, r0
    for (counter = 0; counter < len; counter++) {
   17332:	f10c 0c01 	add.w	ip, ip, #1
   17336:	4594      	cmp	ip, r2
   17338:	dbf1      	blt.n	1731e <crc16_ccitt+0xa>
    }

    return crc;
}
   1733a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1733e:	4770      	bx	lr
   17340:	4770      	bx	lr
   17342:	bf00      	nop
   17344:	00027b5c 	.word	0x00027b5c

00017348 <parse_num_base>:
 */
static int
parse_num_base(const char *sval)
{
    /* Skip optional sign. */
    if (sval[0] == '+' || sval[0] == '-') {
   17348:	7803      	ldrb	r3, [r0, #0]
   1734a:	2b2b      	cmp	r3, #43	; 0x2b
   1734c:	d001      	beq.n	17352 <parse_num_base+0xa>
   1734e:	2b2d      	cmp	r3, #45	; 0x2d
   17350:	d100      	bne.n	17354 <parse_num_base+0xc>
        sval++;
   17352:	3001      	adds	r0, #1
    }

    if (sval[0] == '0' && sval[1] == 'x') {
   17354:	7803      	ldrb	r3, [r0, #0]
   17356:	2b30      	cmp	r3, #48	; 0x30
   17358:	d104      	bne.n	17364 <parse_num_base+0x1c>
   1735a:	7843      	ldrb	r3, [r0, #1]
   1735c:	2b78      	cmp	r3, #120	; 0x78
   1735e:	d003      	beq.n	17368 <parse_num_base+0x20>
        return 0;
    } else {
        return 10;
   17360:	200a      	movs	r0, #10
   17362:	4770      	bx	lr
   17364:	200a      	movs	r0, #10
   17366:	4770      	bx	lr
        return 0;
   17368:	2000      	movs	r0, #0
    }
}
   1736a:	4770      	bx	lr

0001736c <parse_ll_bounds>:

long long
parse_ll_bounds(const char *sval, long long min, long long max,
                int *out_status)
{
   1736c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17370:	b083      	sub	sp, #12
   17372:	4604      	mov	r4, r0
   17374:	4616      	mov	r6, r2
   17376:	461d      	mov	r5, r3
   17378:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1737c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   17380:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    char *endptr;
    long long llval;

    *out_status = SYS_EOK;
   17382:	2300      	movs	r3, #0
   17384:	603b      	str	r3, [r7, #0]

    llval = strtoll(sval, &endptr, parse_num_base(sval));
   17386:	f7ff ffdf 	bl	17348 <parse_num_base>
   1738a:	4602      	mov	r2, r0
   1738c:	a901      	add	r1, sp, #4
   1738e:	4620      	mov	r0, r4
   17390:	f7f9 f9c1 	bl	10716 <strtoll>
    if (sval[0] != '\0' && *endptr == '\0') {
   17394:	7823      	ldrb	r3, [r4, #0]
   17396:	b113      	cbz	r3, 1739e <parse_ll_bounds+0x32>
   17398:	9b01      	ldr	r3, [sp, #4]
   1739a:	781b      	ldrb	r3, [r3, #0]
   1739c:	b13b      	cbz	r3, 173ae <parse_ll_bounds+0x42>
            *out_status = SYS_ERANGE;
        }
        return llval;
    }

    *out_status = SYS_EINVAL;
   1739e:	f06f 0301 	mvn.w	r3, #1
   173a2:	603b      	str	r3, [r7, #0]
    return 0;
   173a4:	2000      	movs	r0, #0
   173a6:	4601      	mov	r1, r0
}
   173a8:	b003      	add	sp, #12
   173aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (llval < min || llval > max) {
   173ae:	42b0      	cmp	r0, r6
   173b0:	eb71 0305 	sbcs.w	r3, r1, r5
   173b4:	db03      	blt.n	173be <parse_ll_bounds+0x52>
   173b6:	4581      	cmp	r9, r0
   173b8:	eb78 0301 	sbcs.w	r3, r8, r1
   173bc:	daf4      	bge.n	173a8 <parse_ll_bounds+0x3c>
            *out_status = SYS_ERANGE;
   173be:	f06f 0309 	mvn.w	r3, #9
   173c2:	603b      	str	r3, [r7, #0]
        return llval;
   173c4:	e7f0      	b.n	173a8 <parse_ll_bounds+0x3c>

000173c6 <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   173c6:	b508      	push	{r3, lr}
   173c8:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   173ca:	4611      	mov	r1, r2
   173cc:	f7fc fd00 	bl	13dd0 <console_vprintf>
}
   173d0:	bd08      	pop	{r3, pc}

000173d2 <streamer_console_write>:
{
   173d2:	b508      	push	{r3, lr}
   173d4:	4608      	mov	r0, r1
    console_write(src, len);
   173d6:	4611      	mov	r1, r2
   173d8:	f7fc fa18 	bl	1380c <console_write>
}
   173dc:	2000      	movs	r0, #0
   173de:	bd08      	pop	{r3, pc}

000173e0 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   173e0:	4800      	ldr	r0, [pc, #0]	; (173e4 <streamer_console_get+0x4>)
   173e2:	4770      	bx	lr
   173e4:	20000414 	.word	0x20000414

000173e8 <sysinit_app>:
void panmaster_pkg_init(void);
void uwb_rng_pkg_init2(void);

void
sysinit_app(void)
{
   173e8:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   173ea:	f7f2 f855 	bl	9498 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   173ee:	f7fc ffc1 	bl	14374 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   173f2:	f7fe fee3 	bl	161bc <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   173f6:	f7fc fcc3 	bl	13d80 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   173fa:	f00b fc85 	bl	22d08 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   173fe:	f7fd f89d 	bl	1453c <log_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   17402:	f7fd fb19 	bl	14a38 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   17406:	f00b ff99 	bl	2333c <modlog_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   1740a:	f7fd fc8d 	bl	14d28 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   1740e:	f00b fc8b 	bl	22d28 <config_pkg_init_stage2>

    /*** Stage 401 */
    /* 401.0: dw1000_pkg_init (hw/drivers/uwb/uwb_dw1000) */
    dw1000_pkg_init();
   17412:	f005 fdcf 	bl	1cfb4 <dw1000_pkg_init>

    /*** Stage 402 */
    /* 402.0: uwb_ccp_pkg_init (lib/uwb_ccp) */
    uwb_ccp_pkg_init();
   17416:	f7f8 f957 	bl	f6c8 <uwb_ccp_pkg_init>

    /*** Stage 403 */
    /* 403.0: uwb_wcs_pkg_init (lib/uwb_wcs) */
    uwb_wcs_pkg_init();
   1741a:	f7f8 ffb1 	bl	10380 <uwb_wcs_pkg_init>

    /*** Stage 404 */
    /* 404.0: tdma_pkg_init (lib/tdma) */
    tdma_pkg_init();
   1741e:	f7f6 ffd7 	bl	e3d0 <tdma_pkg_init>
    /* 404.1: uwb_pan_pkg_init (lib/uwb_pan) */
    uwb_pan_pkg_init();
   17422:	f7f8 fbf9 	bl	fc18 <uwb_pan_pkg_init>
    /* 404.2: uwb_rng_pkg_init (lib/uwb_rng) */
    uwb_rng_pkg_init();
   17426:	f00a fb39 	bl	21a9c <uwb_rng_pkg_init>
    /* 404.3: wcs_timescale_pkg_init (lib/uwb_wcs) */
    wcs_timescale_pkg_init();
   1742a:	f00a fd27 	bl	21e7c <wcs_timescale_pkg_init>

    /*** Stage 410 */
    /* 410.0: nmgr_uwb_pkg_init (lib/nmgr_uwb) */
    nmgr_uwb_pkg_init();
   1742e:	f7f3 fe5f 	bl	b0f0 <nmgr_uwb_pkg_init>

    /*** Stage 411 */
    /* 411.0: nrng_pkg_init (lib/nrng) */
    nrng_pkg_init();
   17432:	f7f4 f8d1 	bl	b5d8 <nrng_pkg_init>

    /*** Stage 414 */
    /* 414.0: twr_ss_nrng_pkg_init (lib/twr_ss_nrng) */
    twr_ss_nrng_pkg_init();
   17436:	f00a f813 	bl	21460 <twr_ss_nrng_pkg_init>

    /*** Stage 420 */
    /* 420.0: survey_pkg_init (lib/survey) */
    survey_pkg_init();
   1743a:	f7f6 fc6d 	bl	dd18 <survey_pkg_init>

    /*** Stage 500 */
    /* 500.0: bcast_ota_pkg_init (mgmt/bcast_ota) */
    bcast_ota_pkg_init();
   1743e:	f00a ffa3 	bl	22388 <bcast_ota_pkg_init>
    /* 500.1: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   17442:	f7fa f9c3 	bl	117cc <imgmgr_module_init>
    /* 500.2: nmgr_pkg_init (mgmt/newtmgr) */
    nmgr_pkg_init();
   17446:	f7fa ff99 	bl	1237c <nmgr_pkg_init>
    /* 500.3: shell_init (sys/shell) */
    shell_init();
   1744a:	f7fe fb01 	bl	15a50 <shell_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   1744e:	f000 f9ad 	bl	177ac <split_app_init>
    /* 500.5: uwbcfg_pkg_init (sys/uwbcfg) */
    uwbcfg_pkg_init();
   17452:	f7ff f9a5 	bl	167a0 <uwbcfg_pkg_init>

    /*** Stage 501 */
    /* 501.0: panmaster_pkg_init (lib/panmaster) */
    panmaster_pkg_init();
   17456:	f7f5 fa73 	bl	c940 <panmaster_pkg_init>

    /*** Stage 999 */
    /* 999.0: uwb_rng_pkg_init2 (lib/uwb_rng) */
    uwb_rng_pkg_init2();
   1745a:	f00a fb69 	bl	21b30 <uwb_rng_pkg_init2>
}
   1745e:	bd08      	pop	{r3, pc}

00017460 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   17460:	2801      	cmp	r0, #1
   17462:	d100      	bne.n	17466 <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   17464:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   17466:	2002      	movs	r0, #2
   17468:	e7fc      	b.n	17464 <boot_flag_decode+0x4>

0001746a <boot_magic_off>:
}

static uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   1746a:	6880      	ldr	r0, [r0, #8]
}
   1746c:	3810      	subs	r0, #16
   1746e:	4770      	bx	lr

00017470 <boot_copy_done_off>:
}

static uint32_t
boot_copy_done_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 2;
   17470:	6880      	ldr	r0, [r0, #8]
}
   17472:	3820      	subs	r0, #32
   17474:	4770      	bx	lr

00017476 <boot_image_ok_off>:

static uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN;
   17476:	6880      	ldr	r0, [r0, #8]
}
   17478:	3818      	subs	r0, #24
   1747a:	4770      	bx	lr

0001747c <boot_magic_decode>:
{
   1747c:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   1747e:	2210      	movs	r2, #16
   17480:	4903      	ldr	r1, [pc, #12]	; (17490 <boot_magic_decode+0x14>)
   17482:	f7f9 f8c9 	bl	10618 <memcmp>
   17486:	b108      	cbz	r0, 1748c <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   17488:	2002      	movs	r0, #2
}
   1748a:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   1748c:	2001      	movs	r0, #1
   1748e:	e7fc      	b.n	1748a <boot_magic_decode+0xe>
   17490:	00027dcc 	.word	0x00027dcc

00017494 <boot_write_trailer_byte>:
}

static int
boot_write_trailer_byte(const struct flash_area *fap, uint32_t off,
                        uint8_t val)
{
   17494:	b5f0      	push	{r4, r5, r6, r7, lr}
   17496:	b083      	sub	sp, #12
   17498:	4605      	mov	r5, r0
   1749a:	460e      	mov	r6, r1
   1749c:	4617      	mov	r7, r2
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   1749e:	f7fc ff37 	bl	14310 <flash_area_align>
    assert(align <= BOOT_MAX_ALIGN);
   174a2:	2808      	cmp	r0, #8
   174a4:	d813      	bhi.n	174ce <boot_write_trailer_byte+0x3a>
   174a6:	4604      	mov	r4, r0
    erased_val = flash_area_erased_val(fap);
   174a8:	4628      	mov	r0, r5
   174aa:	f7fc ff36 	bl	1431a <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
   174ae:	2208      	movs	r2, #8
   174b0:	b2c1      	uxtb	r1, r0
   174b2:	4668      	mov	r0, sp
   174b4:	f7f9 f8e1 	bl	1067a <memset>
    buf[0] = val;
   174b8:	f88d 7000 	strb.w	r7, [sp]

    rc = flash_area_write(fap, off, buf, align);
   174bc:	4623      	mov	r3, r4
   174be:	466a      	mov	r2, sp
   174c0:	4631      	mov	r1, r6
   174c2:	4628      	mov	r0, r5
   174c4:	f7fc fefc 	bl	142c0 <flash_area_write>
    if (rc != 0) {
   174c8:	b938      	cbnz	r0, 174da <boot_write_trailer_byte+0x46>
        return BOOT_EFLASH;
    }

    return 0;
}
   174ca:	b003      	add	sp, #12
   174cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(align <= BOOT_MAX_ALIGN);
   174ce:	2300      	movs	r3, #0
   174d0:	461a      	mov	r2, r3
   174d2:	4619      	mov	r1, r3
   174d4:	4618      	mov	r0, r3
   174d6:	f7f1 fe75 	bl	91c4 <__assert_func>
        return BOOT_EFLASH;
   174da:	2001      	movs	r0, #1
   174dc:	e7f5      	b.n	174ca <boot_write_trailer_byte+0x36>

000174de <boot_magic_compatible_check>:
    switch (tbl_val) {
   174de:	2804      	cmp	r0, #4
   174e0:	d00a      	beq.n	174f8 <boot_magic_compatible_check+0x1a>
   174e2:	2805      	cmp	r0, #5
   174e4:	d103      	bne.n	174ee <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
   174e6:	1e48      	subs	r0, r1, #1
   174e8:	bf18      	it	ne
   174ea:	2001      	movne	r0, #1
   174ec:	4770      	bx	lr
        return tbl_val == val;
   174ee:	4288      	cmp	r0, r1
   174f0:	bf14      	ite	ne
   174f2:	2000      	movne	r0, #0
   174f4:	2001      	moveq	r0, #1
   174f6:	4770      	bx	lr
    switch (tbl_val) {
   174f8:	2001      	movs	r0, #1
}
   174fa:	4770      	bx	lr

000174fc <boot_swap_type_off>:
    return fap->fa_size - BOOT_MAGIC_SZ - BOOT_MAX_ALIGN * 3;
   174fc:	6880      	ldr	r0, [r0, #8]
}
   174fe:	3828      	subs	r0, #40	; 0x28
   17500:	4770      	bx	lr

00017502 <boot_read_swap_state>:
{
   17502:	b530      	push	{r4, r5, lr}
   17504:	b085      	sub	sp, #20
   17506:	4604      	mov	r4, r0
   17508:	460d      	mov	r5, r1
    off = boot_magic_off(fap);
   1750a:	f7ff ffae 	bl	1746a <boot_magic_off>
   1750e:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   17510:	2310      	movs	r3, #16
   17512:	466a      	mov	r2, sp
   17514:	4620      	mov	r0, r4
   17516:	f7fc ff18 	bl	1434a <flash_area_read_is_empty>
    if (rc < 0) {
   1751a:	2800      	cmp	r0, #0
   1751c:	db45      	blt.n	175aa <boot_read_swap_state+0xa8>
    if (rc == 1) {
   1751e:	2801      	cmp	r0, #1
   17520:	d039      	beq.n	17596 <boot_read_swap_state+0x94>
        state->magic = boot_magic_decode(magic);
   17522:	4668      	mov	r0, sp
   17524:	f7ff ffaa 	bl	1747c <boot_magic_decode>
   17528:	7028      	strb	r0, [r5, #0]
    off = boot_swap_type_off(fap);
   1752a:	4620      	mov	r0, r4
   1752c:	f7ff ffe6 	bl	174fc <boot_swap_type_off>
   17530:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->swap_type,
   17532:	2301      	movs	r3, #1
   17534:	18ea      	adds	r2, r5, r3
   17536:	4620      	mov	r0, r4
   17538:	f7fc ff07 	bl	1434a <flash_area_read_is_empty>
    if (rc < 0) {
   1753c:	2800      	cmp	r0, #0
   1753e:	db37      	blt.n	175b0 <boot_read_swap_state+0xae>
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   17540:	2801      	cmp	r0, #1
   17542:	d002      	beq.n	1754a <boot_read_swap_state+0x48>
   17544:	786b      	ldrb	r3, [r5, #1]
   17546:	2b04      	cmp	r3, #4
   17548:	d901      	bls.n	1754e <boot_read_swap_state+0x4c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   1754a:	2301      	movs	r3, #1
   1754c:	706b      	strb	r3, [r5, #1]
    off = boot_copy_done_off(fap);
   1754e:	4620      	mov	r0, r4
   17550:	f7ff ff8e 	bl	17470 <boot_copy_done_off>
   17554:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   17556:	2301      	movs	r3, #1
   17558:	1caa      	adds	r2, r5, #2
   1755a:	4620      	mov	r0, r4
   1755c:	f7fc fef5 	bl	1434a <flash_area_read_is_empty>
    if (rc < 0) {
   17560:	2800      	cmp	r0, #0
   17562:	db27      	blt.n	175b4 <boot_read_swap_state+0xb2>
    if (rc == 1) {
   17564:	2801      	cmp	r0, #1
   17566:	d019      	beq.n	1759c <boot_read_swap_state+0x9a>
        state->copy_done = boot_flag_decode(state->copy_done);
   17568:	78a8      	ldrb	r0, [r5, #2]
   1756a:	f7ff ff79 	bl	17460 <boot_flag_decode>
   1756e:	70a8      	strb	r0, [r5, #2]
    off = boot_image_ok_off(fap);
   17570:	4620      	mov	r0, r4
   17572:	f7ff ff80 	bl	17476 <boot_image_ok_off>
   17576:	4601      	mov	r1, r0
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   17578:	2301      	movs	r3, #1
   1757a:	1cea      	adds	r2, r5, #3
   1757c:	4620      	mov	r0, r4
   1757e:	f7fc fee4 	bl	1434a <flash_area_read_is_empty>
    if (rc < 0) {
   17582:	2800      	cmp	r0, #0
   17584:	db18      	blt.n	175b8 <boot_read_swap_state+0xb6>
    if (rc == 1) {
   17586:	2801      	cmp	r0, #1
   17588:	d00b      	beq.n	175a2 <boot_read_swap_state+0xa0>
        state->image_ok = boot_flag_decode(state->image_ok);
   1758a:	78e8      	ldrb	r0, [r5, #3]
   1758c:	f7ff ff68 	bl	17460 <boot_flag_decode>
   17590:	70e8      	strb	r0, [r5, #3]
    return 0;
   17592:	2000      	movs	r0, #0
   17594:	e00a      	b.n	175ac <boot_read_swap_state+0xaa>
        state->magic = BOOT_MAGIC_UNSET;
   17596:	2303      	movs	r3, #3
   17598:	702b      	strb	r3, [r5, #0]
   1759a:	e7c6      	b.n	1752a <boot_read_swap_state+0x28>
        state->copy_done = BOOT_FLAG_UNSET;
   1759c:	2303      	movs	r3, #3
   1759e:	70ab      	strb	r3, [r5, #2]
   175a0:	e7e6      	b.n	17570 <boot_read_swap_state+0x6e>
        state->image_ok = BOOT_FLAG_UNSET;
   175a2:	2303      	movs	r3, #3
   175a4:	70eb      	strb	r3, [r5, #3]
    return 0;
   175a6:	2000      	movs	r0, #0
   175a8:	e000      	b.n	175ac <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   175aa:	2001      	movs	r0, #1
}
   175ac:	b005      	add	sp, #20
   175ae:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   175b0:	2001      	movs	r0, #1
   175b2:	e7fb      	b.n	175ac <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   175b4:	2001      	movs	r0, #1
   175b6:	e7f9      	b.n	175ac <boot_read_swap_state+0xaa>
        return BOOT_EFLASH;
   175b8:	2001      	movs	r0, #1
   175ba:	e7f7      	b.n	175ac <boot_read_swap_state+0xaa>

000175bc <boot_read_swap_state_by_id>:
    switch (flash_area_id) {
   175bc:	1e43      	subs	r3, r0, #1
   175be:	2b02      	cmp	r3, #2
   175c0:	d901      	bls.n	175c6 <boot_read_swap_state_by_id+0xa>
        return BOOT_EBADARGS;
   175c2:	2007      	movs	r0, #7
}
   175c4:	4770      	bx	lr
{
   175c6:	b510      	push	{r4, lr}
   175c8:	b082      	sub	sp, #8
   175ca:	460c      	mov	r4, r1
        rc = flash_area_open(flash_area_id, &fap);
   175cc:	a901      	add	r1, sp, #4
   175ce:	b2c0      	uxtb	r0, r0
   175d0:	f7fc fe02 	bl	141d8 <flash_area_open>
        if (rc != 0) {
   175d4:	b110      	cbz	r0, 175dc <boot_read_swap_state_by_id+0x20>
            return BOOT_EFLASH;
   175d6:	2001      	movs	r0, #1
}
   175d8:	b002      	add	sp, #8
   175da:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   175dc:	4621      	mov	r1, r4
   175de:	9801      	ldr	r0, [sp, #4]
   175e0:	f7ff ff8f 	bl	17502 <boot_read_swap_state>
    return rc;
   175e4:	e7f8      	b.n	175d8 <boot_read_swap_state_by_id+0x1c>
	...

000175e8 <boot_write_magic>:
{
   175e8:	b510      	push	{r4, lr}
   175ea:	4604      	mov	r4, r0
    off = boot_magic_off(fap);
   175ec:	f7ff ff3d 	bl	1746a <boot_magic_off>
   175f0:	4601      	mov	r1, r0
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   175f2:	2310      	movs	r3, #16
   175f4:	4a03      	ldr	r2, [pc, #12]	; (17604 <boot_write_magic+0x1c>)
   175f6:	4620      	mov	r0, r4
   175f8:	f7fc fe62 	bl	142c0 <flash_area_write>
    if (rc != 0) {
   175fc:	b900      	cbnz	r0, 17600 <boot_write_magic+0x18>
}
   175fe:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   17600:	2001      	movs	r0, #1
   17602:	e7fc      	b.n	175fe <boot_write_magic+0x16>
   17604:	00027dcc 	.word	0x00027dcc

00017608 <boot_write_image_ok>:
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   17608:	b510      	push	{r4, lr}
   1760a:	4604      	mov	r4, r0
    uint32_t off;

    off = boot_image_ok_off(fap);
   1760c:	f7ff ff33 	bl	17476 <boot_image_ok_off>
   17610:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%x (0x%x)",
                 fap->fa_id, off, fap->fa_off + off);
    return boot_write_trailer_byte(fap, off, BOOT_FLAG_SET);
   17612:	2201      	movs	r2, #1
   17614:	4620      	mov	r0, r4
   17616:	f7ff ff3d 	bl	17494 <boot_write_trailer_byte>
}
   1761a:	bd10      	pop	{r4, pc}

0001761c <boot_write_swap_type>:
 * This value is persisted so that the boot loader knows what swap operation to
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_type(const struct flash_area *fap, uint8_t swap_type)
{
   1761c:	b538      	push	{r3, r4, r5, lr}
   1761e:	4604      	mov	r4, r0
   17620:	460d      	mov	r5, r1
    uint32_t off;

    off = boot_swap_type_off(fap);
   17622:	f7ff ff6b 	bl	174fc <boot_swap_type_off>
   17626:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_type; fa_id=%d off=0x%x (0x%x), swap_type=0x%x",
                 fap->fa_id, off, fap->fa_off + off, swap_type);
    return boot_write_trailer_byte(fap, off, swap_type);
   17628:	462a      	mov	r2, r5
   1762a:	4620      	mov	r0, r4
   1762c:	f7ff ff32 	bl	17494 <boot_write_trailer_byte>
}
   17630:	bd38      	pop	{r3, r4, r5, pc}
	...

00017634 <boot_swap_type>:
}
#endif

int
boot_swap_type(void)
{
   17634:	b530      	push	{r4, r5, lr}
   17636:	b083      	sub	sp, #12
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY, &primary_slot);
   17638:	a901      	add	r1, sp, #4
   1763a:	2001      	movs	r0, #1
   1763c:	f7ff ffbe 	bl	175bc <boot_read_swap_state_by_id>
    if (rc) {
   17640:	2800      	cmp	r0, #0
   17642:	d142      	bne.n	176ca <boot_swap_type+0x96>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   17644:	4669      	mov	r1, sp
   17646:	2002      	movs	r0, #2
   17648:	f7ff ffb8 	bl	175bc <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   1764c:	2800      	cmp	r0, #0
   1764e:	d13e      	bne.n	176ce <boot_swap_type+0x9a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   17650:	2400      	movs	r4, #0
   17652:	e007      	b.n	17664 <boot_swap_type+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   17654:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   17656:	2b04      	cmp	r3, #4
   17658:	d029      	beq.n	176ae <boot_swap_type+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1765a:	f89d 2006 	ldrb.w	r2, [sp, #6]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1765e:	4293      	cmp	r3, r2
   17660:	d025      	beq.n	176ae <boot_swap_type+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   17662:	3401      	adds	r4, #1
   17664:	2c02      	cmp	r4, #2
   17666:	d82d      	bhi.n	176c4 <boot_swap_type+0x90>
        table = boot_swap_tables + i;
   17668:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1766c:	4a19      	ldr	r2, [pc, #100]	; (176d4 <boot_swap_type+0xa0>)
   1766e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   17672:	f89d 1004 	ldrb.w	r1, [sp, #4]
   17676:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   1767a:	f7ff ff30 	bl	174de <boot_magic_compatible_check>
   1767e:	2800      	cmp	r0, #0
   17680:	d0ef      	beq.n	17662 <boot_swap_type+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   17682:	f89d 1000 	ldrb.w	r1, [sp]
   17686:	7868      	ldrb	r0, [r5, #1]
   17688:	f7ff ff29 	bl	174de <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1768c:	2800      	cmp	r0, #0
   1768e:	d0e8      	beq.n	17662 <boot_swap_type+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   17690:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   17692:	2b04      	cmp	r3, #4
   17694:	d003      	beq.n	1769e <boot_swap_type+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   17696:	f89d 2007 	ldrb.w	r2, [sp, #7]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1769a:	4293      	cmp	r3, r2
   1769c:	d1e1      	bne.n	17662 <boot_swap_type+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1769e:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   176a0:	2b04      	cmp	r3, #4
   176a2:	d0d7      	beq.n	17654 <boot_swap_type+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   176a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   176a8:	4293      	cmp	r3, r2
   176aa:	d1da      	bne.n	17662 <boot_swap_type+0x2e>
   176ac:	e7d2      	b.n	17654 <boot_swap_type+0x20>
            BOOT_LOG_INF("Swap type: %s",
   176ae:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            assert(table->swap_type == BOOT_SWAP_TYPE_TEST ||
   176b0:	1e83      	subs	r3, r0, #2
   176b2:	b2db      	uxtb	r3, r3
   176b4:	2b02      	cmp	r3, #2
   176b6:	d906      	bls.n	176c6 <boot_swap_type+0x92>
   176b8:	2300      	movs	r3, #0
   176ba:	461a      	mov	r2, r3
   176bc:	4619      	mov	r1, r3
   176be:	4618      	mov	r0, r3
   176c0:	f7f1 fd80 	bl	91c4 <__assert_func>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   176c4:	2001      	movs	r0, #1
}
   176c6:	b003      	add	sp, #12
   176c8:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   176ca:	20ff      	movs	r0, #255	; 0xff
   176cc:	e7fb      	b.n	176c6 <boot_swap_type+0x92>
        return BOOT_SWAP_TYPE_PANIC;
   176ce:	20ff      	movs	r0, #255	; 0xff
   176d0:	e7f9      	b.n	176c6 <boot_swap_type+0x92>
   176d2:	bf00      	nop
   176d4:	00027ddc 	.word	0x00027ddc

000176d8 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   176d8:	b530      	push	{r4, r5, lr}
   176da:	b083      	sub	sp, #12
   176dc:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY,
   176de:	4669      	mov	r1, sp
   176e0:	2002      	movs	r0, #2
   176e2:	f7ff ff6b 	bl	175bc <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   176e6:	4603      	mov	r3, r0
   176e8:	bb78      	cbnz	r0, 1774a <boot_set_pending+0x72>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   176ea:	f89d 5000 	ldrb.w	r5, [sp]
   176ee:	2d02      	cmp	r5, #2
   176f0:	d025      	beq.n	1773e <boot_set_pending+0x66>
   176f2:	2d03      	cmp	r5, #3
   176f4:	d007      	beq.n	17706 <boot_set_pending+0x2e>
   176f6:	2d01      	cmp	r5, #1
   176f8:	d027      	beq.n	1774a <boot_set_pending+0x72>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   176fa:	2300      	movs	r3, #0
   176fc:	461a      	mov	r2, r3
   176fe:	4619      	mov	r1, r3
   17700:	4618      	mov	r0, r3
   17702:	f7f1 fd5f 	bl	91c4 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   17706:	a901      	add	r1, sp, #4
   17708:	2002      	movs	r0, #2
   1770a:	f7fc fd65 	bl	141d8 <flash_area_open>
        if (rc != 0) {
   1770e:	b148      	cbz	r0, 17724 <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
   17710:	2301      	movs	r3, #1
        if (rc == 0) {
   17712:	b9d3      	cbnz	r3, 1774a <boot_set_pending+0x72>
            if (permanent) {
   17714:	b904      	cbnz	r4, 17718 <boot_set_pending+0x40>
                swap_type = BOOT_SWAP_TYPE_TEST;
   17716:	2502      	movs	r5, #2
            rc = boot_write_swap_type(fap, swap_type);
   17718:	4629      	mov	r1, r5
   1771a:	9801      	ldr	r0, [sp, #4]
   1771c:	f7ff ff7e 	bl	1761c <boot_write_swap_type>
   17720:	4603      	mov	r3, r0
   17722:	e012      	b.n	1774a <boot_set_pending+0x72>
            rc = boot_write_magic(fap);
   17724:	9801      	ldr	r0, [sp, #4]
   17726:	f7ff ff5f 	bl	175e8 <boot_write_magic>
        if (rc == 0 && permanent) {
   1772a:	4603      	mov	r3, r0
   1772c:	2800      	cmp	r0, #0
   1772e:	d1f0      	bne.n	17712 <boot_set_pending+0x3a>
   17730:	2c00      	cmp	r4, #0
   17732:	d0ee      	beq.n	17712 <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
   17734:	9801      	ldr	r0, [sp, #4]
   17736:	f7ff ff67 	bl	17608 <boot_write_image_ok>
   1773a:	4603      	mov	r3, r0
   1773c:	e7e9      	b.n	17712 <boot_set_pending+0x3a>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY, &fap);
   1773e:	a901      	add	r1, sp, #4
   17740:	2002      	movs	r0, #2
   17742:	f7fc fd49 	bl	141d8 <flash_area_open>
        if (rc != 0) {
   17746:	b118      	cbz	r0, 17750 <boot_set_pending+0x78>
            return BOOT_EFLASH;
   17748:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   1774a:	4618      	mov	r0, r3
   1774c:	b003      	add	sp, #12
   1774e:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   17750:	9801      	ldr	r0, [sp, #4]
   17752:	6882      	ldr	r2, [r0, #8]
   17754:	2100      	movs	r1, #0
   17756:	f7fc fdc7 	bl	142e8 <flash_area_erase>
        return BOOT_EBADIMAGE;
   1775a:	2303      	movs	r3, #3
   1775c:	e7f5      	b.n	1774a <boot_set_pending+0x72>

0001775e <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   1775e:	b500      	push	{lr}
   17760:	b083      	sub	sp, #12
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY,
   17762:	4669      	mov	r1, sp
   17764:	2001      	movs	r0, #1
   17766:	f7ff ff29 	bl	175bc <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   1776a:	b9b8      	cbnz	r0, 1779c <boot_set_confirmed+0x3e>
        return rc;
    }

    switch (state_primary_slot.magic) {
   1776c:	f89d 3000 	ldrb.w	r3, [sp]
   17770:	2b02      	cmp	r3, #2
   17772:	d012      	beq.n	1779a <boot_set_confirmed+0x3c>
   17774:	2b03      	cmp	r3, #3
   17776:	d011      	beq.n	1779c <boot_set_confirmed+0x3e>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fap);
   17778:	a901      	add	r1, sp, #4
   1777a:	2001      	movs	r0, #1
   1777c:	f7fc fd2c 	bl	141d8 <flash_area_open>
    if (rc) {
   17780:	b978      	cbnz	r0, 177a2 <boot_set_confirmed+0x44>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   17782:	f89d 3002 	ldrb.w	r3, [sp, #2]
   17786:	2b03      	cmp	r3, #3
   17788:	d00d      	beq.n	177a6 <boot_set_confirmed+0x48>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   1778a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1778e:	2b03      	cmp	r3, #3
   17790:	d104      	bne.n	1779c <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   17792:	9801      	ldr	r0, [sp, #4]
   17794:	f7ff ff38 	bl	17608 <boot_write_image_ok>
   17798:	e000      	b.n	1779c <boot_set_confirmed+0x3e>
        return BOOT_EBADVECT;
   1779a:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   1779c:	b003      	add	sp, #12
   1779e:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   177a2:	2001      	movs	r0, #1
   177a4:	e7fa      	b.n	1779c <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   177a6:	2004      	movs	r0, #4
   177a8:	e7f8      	b.n	1779c <boot_set_confirmed+0x3e>
	...

000177ac <split_app_init>:
static int8_t split_mode_cur;
static int8_t split_app_active;

void
split_app_init(void)
{
   177ac:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   177ae:	4b09      	ldr	r3, [pc, #36]	; (177d4 <split_app_init+0x28>)
   177b0:	781b      	ldrb	r3, [r3, #0]
   177b2:	b11b      	cbz	r3, 177bc <split_app_init+0x10>

    rc = split_conf_init();
   177b4:	f000 f89e 	bl	178f4 <split_conf_init>
    assert(rc == 0);
   177b8:	b928      	cbnz	r0, 177c6 <split_app_init+0x1a>
}
   177ba:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   177bc:	461a      	mov	r2, r3
   177be:	4619      	mov	r1, r3
   177c0:	4618      	mov	r0, r3
   177c2:	f7f1 fcff 	bl	91c4 <__assert_func>
    assert(rc == 0);
   177c6:	2300      	movs	r3, #0
   177c8:	461a      	mov	r2, r3
   177ca:	4619      	mov	r1, r3
   177cc:	4618      	mov	r0, r3
   177ce:	f7f1 fcf9 	bl	91c4 <__assert_func>
   177d2:	bf00      	nop
   177d4:	2000538c 	.word	0x2000538c

000177d8 <split_check_status>:

split_status_t
split_check_status(void)
{
   177d8:	b500      	push	{lr}
   177da:	b083      	sub	sp, #12
    void *entry;
    int rc;

    rc = split_go(LOADER_IMAGE_SLOT, SPLIT_IMAGE_SLOT, &entry);
   177dc:	aa01      	add	r2, sp, #4
   177de:	2101      	movs	r1, #1
   177e0:	2000      	movs	r0, #0
   177e2:	f00c f841 	bl	23868 <split_go>
    switch (rc) {
   177e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   177ea:	d009      	beq.n	17800 <split_check_status+0x28>
   177ec:	b150      	cbz	r0, 17804 <split_check_status+0x2c>
   177ee:	f110 0f02 	cmn.w	r0, #2
   177f2:	d00b      	beq.n	1780c <split_check_status+0x34>

    case SPLIT_GO_OK:
        return SPLIT_STATUS_MATCHING;

    default:
        assert(0);
   177f4:	2300      	movs	r3, #0
   177f6:	461a      	mov	r2, r3
   177f8:	4619      	mov	r1, r3
   177fa:	4618      	mov	r0, r3
   177fc:	f7f1 fce2 	bl	91c4 <__assert_func>
        return SPLIT_STATUS_NOT_MATCHING;
   17800:	2001      	movs	r0, #1
   17802:	e000      	b.n	17806 <split_check_status+0x2e>
        return SPLIT_STATUS_MATCHING;
   17804:	2002      	movs	r0, #2
        return SPLIT_STATUS_INVALID;
    }
}
   17806:	b003      	add	sp, #12
   17808:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (rc) {
   1780c:	2000      	movs	r0, #0
   1780e:	e7fa      	b.n	17806 <split_check_status+0x2e>

00017810 <split_mode_get>:

split_mode_t
split_mode_get(void)
{
    return split_mode_cur;
}
   17810:	4b01      	ldr	r3, [pc, #4]	; (17818 <split_mode_get+0x8>)
   17812:	7818      	ldrb	r0, [r3, #0]
   17814:	4770      	bx	lr
   17816:	bf00      	nop
   17818:	200053b1 	.word	0x200053b1

0001781c <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   1781c:	4b01      	ldr	r3, [pc, #4]	; (17824 <split_app_active_get+0x8>)
   1781e:	f993 0000 	ldrsb.w	r0, [r3]
   17822:	4770      	bx	lr
   17824:	200053b0 	.word	0x200053b0

00017828 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   17828:	2803      	cmp	r0, #3
   1782a:	d803      	bhi.n	17834 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   1782c:	4b03      	ldr	r3, [pc, #12]	; (1783c <split_mode_set+0x14>)
   1782e:	7018      	strb	r0, [r3, #0]
    return 0;
   17830:	2000      	movs	r0, #0
   17832:	4770      	bx	lr
        return SYS_EINVAL;
   17834:	f06f 0001 	mvn.w	r0, #1
}
   17838:	4770      	bx	lr
   1783a:	bf00      	nop
   1783c:	200053b1 	.word	0x200053b1

00017840 <split_conf_commit>:

static int
split_conf_commit(void)
{
    return 0;
}
   17840:	2000      	movs	r0, #0
   17842:	4770      	bx	lr

00017844 <split_conf_export>:

static int
split_conf_export(void (*func)(char *name, char *val), enum conf_export_tgt tgt)
{
   17844:	b510      	push	{r4, lr}
   17846:	b082      	sub	sp, #8
   17848:	4604      	mov	r4, r0
    split_mode_t split_mode;
    char buf[4];

    split_mode = split_mode_get();
   1784a:	f7ff ffe1 	bl	17810 <split_mode_get>
   1784e:	f88d 0007 	strb.w	r0, [sp, #7]
    conf_str_from_value(CONF_INT8, &split_mode, buf, sizeof(buf));
   17852:	2304      	movs	r3, #4
   17854:	466a      	mov	r2, sp
   17856:	f10d 0107 	add.w	r1, sp, #7
   1785a:	2002      	movs	r0, #2
   1785c:	f7fb fb6c 	bl	12f38 <conf_str_from_value>
    func("split/status", buf);
   17860:	4669      	mov	r1, sp
   17862:	4802      	ldr	r0, [pc, #8]	; (1786c <split_conf_export+0x28>)
   17864:	47a0      	blx	r4
    return 0;
}
   17866:	2000      	movs	r0, #0
   17868:	b002      	add	sp, #8
   1786a:	bd10      	pop	{r4, pc}
   1786c:	00027df0 	.word	0x00027df0

00017870 <split_conf_get>:
    if (argc == 1) {
   17870:	2801      	cmp	r0, #1
   17872:	d119      	bne.n	178a8 <split_conf_get+0x38>
{
   17874:	b530      	push	{r4, r5, lr}
   17876:	b083      	sub	sp, #12
   17878:	468c      	mov	ip, r1
   1787a:	4614      	mov	r4, r2
   1787c:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "status")) {
   1787e:	490b      	ldr	r1, [pc, #44]	; (178ac <split_conf_get+0x3c>)
   17880:	f8dc 0000 	ldr.w	r0, [ip]
   17884:	f7f8 ff24 	bl	106d0 <strcmp>
   17888:	b110      	cbz	r0, 17890 <split_conf_get+0x20>
    return NULL;
   1788a:	2000      	movs	r0, #0
}
   1788c:	b003      	add	sp, #12
   1788e:	bd30      	pop	{r4, r5, pc}
            split_mode = split_mode_get();
   17890:	f7ff ffbe 	bl	17810 <split_mode_get>
   17894:	f88d 0007 	strb.w	r0, [sp, #7]
            return conf_str_from_value(CONF_INT8, &split_mode, buf, max_len);
   17898:	462b      	mov	r3, r5
   1789a:	4622      	mov	r2, r4
   1789c:	f10d 0107 	add.w	r1, sp, #7
   178a0:	2002      	movs	r0, #2
   178a2:	f7fb fb49 	bl	12f38 <conf_str_from_value>
   178a6:	e7f1      	b.n	1788c <split_conf_get+0x1c>
    return NULL;
   178a8:	2000      	movs	r0, #0
}
   178aa:	4770      	bx	lr
   178ac:	00027e00 	.word	0x00027e00

000178b0 <split_conf_set>:
    if (argc == 1) {
   178b0:	2801      	cmp	r0, #1
   178b2:	d117      	bne.n	178e4 <split_conf_set+0x34>
{
   178b4:	b510      	push	{r4, lr}
   178b6:	b082      	sub	sp, #8
   178b8:	460b      	mov	r3, r1
   178ba:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "status")) {
   178bc:	490c      	ldr	r1, [pc, #48]	; (178f0 <split_conf_set+0x40>)
   178be:	6818      	ldr	r0, [r3, #0]
   178c0:	f7f8 ff06 	bl	106d0 <strcmp>
   178c4:	b988      	cbnz	r0, 178ea <split_conf_set+0x3a>
            rc = CONF_VALUE_SET(val, CONF_INT8, split_mode);
   178c6:	2301      	movs	r3, #1
   178c8:	f10d 0207 	add.w	r2, sp, #7
   178cc:	2102      	movs	r1, #2
   178ce:	4620      	mov	r0, r4
   178d0:	f7fb facd 	bl	12e6e <conf_value_from_str>
            if (rc != 0) {
   178d4:	b108      	cbz	r0, 178da <split_conf_set+0x2a>
}
   178d6:	b002      	add	sp, #8
   178d8:	bd10      	pop	{r4, pc}
            rc = split_mode_set(split_mode);
   178da:	f89d 0007 	ldrb.w	r0, [sp, #7]
   178de:	f7ff ffa3 	bl	17828 <split_mode_set>
            if (rc != 0) {
   178e2:	e7f8      	b.n	178d6 <split_conf_set+0x26>
    return -1;
   178e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   178e8:	4770      	bx	lr
    return -1;
   178ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178ee:	e7f2      	b.n	178d6 <split_conf_set+0x26>
   178f0:	00027e00 	.word	0x00027e00

000178f4 <split_conf_init>:
{
   178f4:	b508      	push	{r3, lr}
    rc = conf_register(&split_conf_handler);
   178f6:	4802      	ldr	r0, [pc, #8]	; (17900 <split_conf_init+0xc>)
   178f8:	f7fb fa74 	bl	12de4 <conf_register>
}
   178fc:	bd08      	pop	{r3, pc}
   178fe:	bf00      	nop
   17900:	20000418 	.word	0x20000418

00017904 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   17904:	b500      	push	{lr}
   17906:	b085      	sub	sp, #20
   17908:	f88d 0007 	strb.w	r0, [sp, #7]
    char str[CONF_STR_FROM_BYTES_LEN(sizeof(split_mode_t))];
    int rc;

    rc = split_mode_set(split_mode);
   1790c:	b2c0      	uxtb	r0, r0
   1790e:	f7ff ff8b 	bl	17828 <split_mode_set>
    if (rc != 0) {
   17912:	b110      	cbz	r0, 1791a <split_write_split+0x16>

    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
        return -1;
    }
    return conf_save_one("split/status", str);
}
   17914:	b005      	add	sp, #20
   17916:	f85d fb04 	ldr.w	pc, [sp], #4
    if (!conf_str_from_value(CONF_INT8, &split_mode, str, sizeof(str))) {
   1791a:	2305      	movs	r3, #5
   1791c:	aa02      	add	r2, sp, #8
   1791e:	f10d 0107 	add.w	r1, sp, #7
   17922:	2002      	movs	r0, #2
   17924:	f7fb fb08 	bl	12f38 <conf_str_from_value>
   17928:	b120      	cbz	r0, 17934 <split_write_split+0x30>
    return conf_save_one("split/status", str);
   1792a:	a902      	add	r1, sp, #8
   1792c:	4803      	ldr	r0, [pc, #12]	; (1793c <split_write_split+0x38>)
   1792e:	f7fb fcb3 	bl	13298 <conf_save_one>
   17932:	e7ef      	b.n	17914 <split_write_split+0x10>
        return -1;
   17934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17938:	e7ec      	b.n	17914 <split_write_split+0x10>
   1793a:	bf00      	nop
   1793c:	00027df0 	.word	0x00027df0

00017940 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   17940:	4b06      	ldr	r3, [pc, #24]	; (1795c <pos+0x1c>)
   17942:	e000      	b.n	17946 <pos+0x6>
   17944:	3301      	adds	r3, #1
   17946:	781a      	ldrb	r2, [r3, #0]
   17948:	b122      	cbz	r2, 17954 <pos+0x14>
        if (*p == c)
   1794a:	4282      	cmp	r2, r0
   1794c:	d1fa      	bne.n	17944 <pos+0x4>
            return p - base64_chars;
   1794e:	4803      	ldr	r0, [pc, #12]	; (1795c <pos+0x1c>)
   17950:	1a18      	subs	r0, r3, r0
   17952:	4770      	bx	lr
    return -1;
   17954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17958:	4770      	bx	lr
   1795a:	bf00      	nop
   1795c:	00027e10 	.word	0x00027e10

00017960 <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   17960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17962:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   17964:	f7f8 fec0 	bl	106e8 <strlen>
   17968:	2803      	cmp	r0, #3
   1796a:	d916      	bls.n	1799a <token_decode+0x3a>
    int marker = 0;
   1796c:	2600      	movs	r6, #0
    unsigned int val = 0;
   1796e:	4635      	mov	r5, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   17970:	4634      	mov	r4, r6
   17972:	e001      	b.n	17978 <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   17974:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   17976:	3401      	adds	r4, #1
   17978:	2c03      	cmp	r4, #3
   1797a:	dc09      	bgt.n	17990 <token_decode+0x30>
        val *= 64;
   1797c:	01ad      	lsls	r5, r5, #6
        if (token[i] == '=')
   1797e:	5d38      	ldrb	r0, [r7, r4]
   17980:	283d      	cmp	r0, #61	; 0x3d
   17982:	d0f7      	beq.n	17974 <token_decode+0x14>
        else if (marker > 0)
   17984:	2e00      	cmp	r6, #0
   17986:	dc0b      	bgt.n	179a0 <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   17988:	f7ff ffda 	bl	17940 <pos>
   1798c:	4405      	add	r5, r0
   1798e:	e7f2      	b.n	17976 <token_decode+0x16>
    }
    if (marker > 2)
   17990:	2e02      	cmp	r6, #2
   17992:	dc08      	bgt.n	179a6 <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   17994:	ea45 6006 	orr.w	r0, r5, r6, lsl #24
}
   17998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   1799a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1799e:	e7fb      	b.n	17998 <token_decode+0x38>
            return DECODE_ERROR;
   179a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179a4:	e7f8      	b.n	17998 <token_decode+0x38>
        return DECODE_ERROR;
   179a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   179aa:	e7f5      	b.n	17998 <token_decode+0x38>

000179ac <base64_encode>:
{
   179ac:	b570      	push	{r4, r5, r6, lr}
   179ae:	4615      	mov	r5, r2
    p = s;
   179b0:	4614      	mov	r4, r2
    last = NULL;
   179b2:	2600      	movs	r6, #0
    i = 0;
   179b4:	4632      	mov	r2, r6
    while (i < size) {
   179b6:	e021      	b.n	179fc <base64_encode+0x50>
        i++;
   179b8:	1c96      	adds	r6, r2, #2
        c *= 256;
   179ba:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   179be:	42b1      	cmp	r1, r6
   179c0:	dd01      	ble.n	179c6 <base64_encode+0x1a>
            c += q[i];
   179c2:	5d86      	ldrb	r6, [r0, r6]
   179c4:	44b4      	add	ip, r6
        i++;
   179c6:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   179c8:	f3cc 4e85 	ubfx	lr, ip, #18, #6
   179cc:	4e1b      	ldr	r6, [pc, #108]	; (17a3c <base64_encode+0x90>)
   179ce:	f816 e00e 	ldrb.w	lr, [r6, lr]
   179d2:	f884 e000 	strb.w	lr, [r4]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   179d6:	f3cc 3e05 	ubfx	lr, ip, #12, #6
   179da:	f816 e00e 	ldrb.w	lr, [r6, lr]
   179de:	f884 e001 	strb.w	lr, [r4, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   179e2:	f3cc 1e85 	ubfx	lr, ip, #6, #6
   179e6:	f816 e00e 	ldrb.w	lr, [r6, lr]
   179ea:	f884 e002 	strb.w	lr, [r4, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   179ee:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
   179f2:	f816 600c 	ldrb.w	r6, [r6, ip]
   179f6:	70e6      	strb	r6, [r4, #3]
        last = p;
   179f8:	4626      	mov	r6, r4
        p += 4;
   179fa:	3404      	adds	r4, #4
    while (i < size) {
   179fc:	428a      	cmp	r2, r1
   179fe:	da09      	bge.n	17a14 <base64_encode+0x68>
        c = q[i++];
   17a00:	1c56      	adds	r6, r2, #1
   17a02:	f810 c002 	ldrb.w	ip, [r0, r2]
        c *= 256;
   17a06:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
        if (i < size)
   17a0a:	42b1      	cmp	r1, r6
   17a0c:	ddd4      	ble.n	179b8 <base64_encode+0xc>
            c += q[i];
   17a0e:	5d86      	ldrb	r6, [r0, r6]
   17a10:	44b4      	add	ip, r6
   17a12:	e7d1      	b.n	179b8 <base64_encode+0xc>
    if (last) {
   17a14:	b136      	cbz	r6, 17a24 <base64_encode+0x78>
        diff = i - size;
   17a16:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   17a18:	2a00      	cmp	r2, #0
   17a1a:	dd03      	ble.n	17a24 <base64_encode+0x78>
            if (should_pad) {
   17a1c:	b933      	cbnz	r3, 17a2c <base64_encode+0x80>
                p = last + (4 - diff);
   17a1e:	f1c2 0304 	rsb	r3, r2, #4
   17a22:	18f4      	adds	r4, r6, r3
    *p = 0;
   17a24:	2300      	movs	r3, #0
   17a26:	7023      	strb	r3, [r4, #0]
}
   17a28:	1b60      	subs	r0, r4, r5
   17a2a:	bd70      	pop	{r4, r5, r6, pc}
                memset(last + (4 - diff), '=', diff);
   17a2c:	f1c2 0004 	rsb	r0, r2, #4
   17a30:	213d      	movs	r1, #61	; 0x3d
   17a32:	4430      	add	r0, r6
   17a34:	f7f8 fe21 	bl	1067a <memset>
   17a38:	e7f4      	b.n	17a24 <base64_encode+0x78>
   17a3a:	bf00      	nop
   17a3c:	00027e10 	.word	0x00027e10

00017a40 <base64_pad>:
{
   17a40:	b510      	push	{r4, lr}
    remainder = len % 4;
   17a42:	424b      	negs	r3, r1
   17a44:	f001 0203 	and.w	r2, r1, #3
   17a48:	f003 0303 	and.w	r3, r3, #3
   17a4c:	bf58      	it	pl
   17a4e:	425a      	negpl	r2, r3
    if (remainder == 0) {
   17a50:	f011 0f03 	tst.w	r1, #3
   17a54:	d102      	bne.n	17a5c <base64_pad+0x1c>
        return (0);
   17a56:	2400      	movs	r4, #0
}
   17a58:	4620      	mov	r0, r4
   17a5a:	bd10      	pop	{r4, pc}
    memset(buf, '=', 4 - remainder);
   17a5c:	f1c2 0404 	rsb	r4, r2, #4
   17a60:	4622      	mov	r2, r4
   17a62:	213d      	movs	r1, #61	; 0x3d
   17a64:	f7f8 fe09 	bl	1067a <memset>
    return (4 - remainder);
   17a68:	e7f6      	b.n	17a58 <base64_pad+0x18>
	...

00017a6c <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   17a6c:	b570      	push	{r4, r5, r6, lr}
   17a6e:	4604      	mov	r4, r0
   17a70:	460d      	mov	r5, r1
    const char *p;
    unsigned char *q;

    q = data;
   17a72:	460e      	mov	r6, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   17a74:	e005      	b.n	17a82 <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   17a76:	0a02      	lsrs	r2, r0, #8
   17a78:	1cb3      	adds	r3, r6, #2
   17a7a:	7072      	strb	r2, [r6, #1]
   17a7c:	e016      	b.n	17aac <base64_decode+0x40>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   17a7e:	3404      	adds	r4, #4
   17a80:	461e      	mov	r6, r3
   17a82:	7821      	ldrb	r1, [r4, #0]
   17a84:	b1b9      	cbz	r1, 17ab6 <base64_decode+0x4a>
   17a86:	293d      	cmp	r1, #61	; 0x3d
   17a88:	d003      	beq.n	17a92 <base64_decode+0x26>
   17a8a:	480d      	ldr	r0, [pc, #52]	; (17ac0 <base64_decode+0x54>)
   17a8c:	f00a fa67 	bl	21f5e <strchr>
   17a90:	b188      	cbz	r0, 17ab6 <base64_decode+0x4a>
        unsigned int val = token_decode(p);
   17a92:	4620      	mov	r0, r4
   17a94:	f7ff ff64 	bl	17960 <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   17a98:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   17a9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17a9e:	d00c      	beq.n	17aba <base64_decode+0x4e>
        *q++ = (val >> 16) & 0xff;
   17aa0:	0c02      	lsrs	r2, r0, #16
   17aa2:	4633      	mov	r3, r6
   17aa4:	f803 2b01 	strb.w	r2, [r3], #1
        if (marker < 2)
   17aa8:	2901      	cmp	r1, #1
   17aaa:	d9e4      	bls.n	17a76 <base64_decode+0xa>
        if (marker < 1)
   17aac:	2900      	cmp	r1, #0
   17aae:	d1e6      	bne.n	17a7e <base64_decode+0x12>
            *q++ = val & 0xff;
   17ab0:	f803 0b01 	strb.w	r0, [r3], #1
   17ab4:	e7e3      	b.n	17a7e <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   17ab6:	1b70      	subs	r0, r6, r5
}
   17ab8:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   17aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17abe:	e7fb      	b.n	17ab8 <base64_decode+0x4c>
   17ac0:	00027e10 	.word	0x00027e10

00017ac4 <hex_format>:
{
    int i;
    uint8_t *src = (uint8_t *)src_v;
    char *tgt = dst;

    if (dst_len <= src_len * 2) {
   17ac4:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
   17ac8:	dd1f      	ble.n	17b0a <hex_format+0x46>
    char *tgt = dst;
   17aca:	4694      	mov	ip, r2
        return NULL;
    }
    for (i = 0; i < src_len; i++) {
   17acc:	2300      	movs	r3, #0
   17ace:	428b      	cmp	r3, r1
   17ad0:	da1d      	bge.n	17b0e <hex_format+0x4a>
{
   17ad2:	b510      	push	{r4, lr}
        tgt[0] = hex_bytes[(src[i] >> 4) & 0xf];
   17ad4:	f810 e003 	ldrb.w	lr, [r0, r3]
   17ad8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
   17adc:	4c0e      	ldr	r4, [pc, #56]	; (17b18 <hex_format+0x54>)
   17ade:	f814 e00e 	ldrb.w	lr, [r4, lr]
   17ae2:	f88c e000 	strb.w	lr, [ip]
        tgt[1] = hex_bytes[src[i] & 0xf];
   17ae6:	f810 e003 	ldrb.w	lr, [r0, r3]
   17aea:	f00e 0e0f 	and.w	lr, lr, #15
   17aee:	f814 400e 	ldrb.w	r4, [r4, lr]
   17af2:	f88c 4001 	strb.w	r4, [ip, #1]
        tgt += 2;
   17af6:	f10c 0c02 	add.w	ip, ip, #2
    for (i = 0; i < src_len; i++) {
   17afa:	3301      	adds	r3, #1
   17afc:	428b      	cmp	r3, r1
   17afe:	dbe9      	blt.n	17ad4 <hex_format+0x10>
        dst_len -= 2;
    }
    *tgt = '\0';
   17b00:	2300      	movs	r3, #0
   17b02:	f88c 3000 	strb.w	r3, [ip]
    return dst;
   17b06:	4610      	mov	r0, r2
}
   17b08:	bd10      	pop	{r4, pc}
        return NULL;
   17b0a:	2000      	movs	r0, #0
   17b0c:	4770      	bx	lr
    *tgt = '\0';
   17b0e:	2300      	movs	r3, #0
   17b10:	7013      	strb	r3, [r2, #0]
    return dst;
   17b12:	4610      	mov	r0, r2
}
   17b14:	4770      	bx	lr
   17b16:	bf00      	nop
   17b18:	00027e54 	.word	0x00027e54

00017b1c <hex_parse>:
{
    int i;
    uint8_t *dst = (uint8_t *)dst_v;
    char c;

    if (src_len & 0x1) {
   17b1c:	f011 0c01 	ands.w	ip, r1, #1
   17b20:	d136      	bne.n	17b90 <hex_parse+0x74>
        return -1;
    }
    if (dst_len * 2 < src_len) {
   17b22:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
   17b26:	dc36      	bgt.n	17b96 <hex_parse+0x7a>
        return -1;
    }
    for (i = 0; i < src_len; i++, src++) {
   17b28:	458c      	cmp	ip, r1
   17b2a:	da3a      	bge.n	17ba2 <hex_parse+0x86>
{
   17b2c:	b500      	push	{lr}
   17b2e:	e01a      	b.n	17b66 <hex_parse+0x4a>
        c = *src;
        if (isdigit((int) c)) {
            c -= '0';
        } else if (c >= 'a' && c <= 'f') {
   17b30:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
   17b34:	fa5f fe8e 	uxtb.w	lr, lr
   17b38:	f1be 0f05 	cmp.w	lr, #5
   17b3c:	d802      	bhi.n	17b44 <hex_parse+0x28>
            c -= ('a' - 10);
   17b3e:	3b57      	subs	r3, #87	; 0x57
   17b40:	b2db      	uxtb	r3, r3
   17b42:	e018      	b.n	17b76 <hex_parse+0x5a>
        } else if (c >= 'A' && c <= 'F') {
   17b44:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
   17b48:	fa5f fe8e 	uxtb.w	lr, lr
   17b4c:	f1be 0f05 	cmp.w	lr, #5
   17b50:	d824      	bhi.n	17b9c <hex_parse+0x80>
            c -= ('A' - 10);
   17b52:	3b37      	subs	r3, #55	; 0x37
   17b54:	b2db      	uxtb	r3, r3
   17b56:	e00e      	b.n	17b76 <hex_parse+0x5a>
        if (i & 1) {
            *dst |= c;
            dst++;
            dst_len--;
        } else {
            *dst = c << 4;
   17b58:	011b      	lsls	r3, r3, #4
   17b5a:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < src_len; i++, src++) {
   17b5c:	f10c 0c01 	add.w	ip, ip, #1
   17b60:	3001      	adds	r0, #1
   17b62:	458c      	cmp	ip, r1
   17b64:	da11      	bge.n	17b8a <hex_parse+0x6e>
        c = *src;
   17b66:	7803      	ldrb	r3, [r0, #0]
        if (isdigit((int) c)) {
   17b68:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   17b6c:	f1be 0f09 	cmp.w	lr, #9
   17b70:	d8de      	bhi.n	17b30 <hex_parse+0x14>
            c -= '0';
   17b72:	fa5f f38e 	uxtb.w	r3, lr
        if (i & 1) {
   17b76:	f01c 0f01 	tst.w	ip, #1
   17b7a:	d0ed      	beq.n	17b58 <hex_parse+0x3c>
            *dst |= c;
   17b7c:	f892 e000 	ldrb.w	lr, [r2]
   17b80:	ea43 030e 	orr.w	r3, r3, lr
   17b84:	f802 3b01 	strb.w	r3, [r2], #1
            dst_len--;
   17b88:	e7e8      	b.n	17b5c <hex_parse+0x40>
        }
    }
    return src_len >> 1;
   17b8a:	1048      	asrs	r0, r1, #1
}
   17b8c:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   17b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b94:	4770      	bx	lr
        return -1;
   17b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b9a:	4770      	bx	lr
            return -1;
   17b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17ba0:	e7f4      	b.n	17b8c <hex_parse+0x70>
    return src_len >> 1;
   17ba2:	1048      	asrs	r0, r1, #1
}
   17ba4:	4770      	bx	lr

00017ba6 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   17ba6:	3901      	subs	r1, #1
   17ba8:	290a      	cmp	r1, #10
   17baa:	d828      	bhi.n	17bfe <valid_attr_type+0x58>
   17bac:	e8df f001 	tbb	[pc, r1]
   17bb0:	0d090606 	.word	0x0d090606
   17bb4:	1b171311 	.word	0x1b171311
   17bb8:	271f      	.short	0x271f
   17bba:	23          	.byte	0x23
   17bbb:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   17bbc:	b308      	cbz	r0, 17c02 <valid_attr_type+0x5c>
        }
        break;
    default:
        break;
    }
    return 0;
   17bbe:	2000      	movs	r0, #0
   17bc0:	4770      	bx	lr
        if (ct == CborByteStringType) {
   17bc2:	2840      	cmp	r0, #64	; 0x40
   17bc4:	d01f      	beq.n	17c06 <valid_attr_type+0x60>
    return 0;
   17bc6:	2000      	movs	r0, #0
   17bc8:	4770      	bx	lr
        if (ct == CborTextStringType) {
   17bca:	2860      	cmp	r0, #96	; 0x60
   17bcc:	d01d      	beq.n	17c0a <valid_attr_type+0x64>
    return 0;
   17bce:	2000      	movs	r0, #0
   17bd0:	4770      	bx	lr
        if (ct == CborBooleanType) {
   17bd2:	28f5      	cmp	r0, #245	; 0xf5
   17bd4:	d01b      	beq.n	17c0e <valid_attr_type+0x68>
        if (ct == CborFloatType) {
   17bd6:	28fa      	cmp	r0, #250	; 0xfa
   17bd8:	d01b      	beq.n	17c12 <valid_attr_type+0x6c>
    return 0;
   17bda:	2000      	movs	r0, #0
   17bdc:	4770      	bx	lr
        if (ct == CborDoubleType) {
   17bde:	28fb      	cmp	r0, #251	; 0xfb
   17be0:	d019      	beq.n	17c16 <valid_attr_type+0x70>
    return 0;
   17be2:	2000      	movs	r0, #0
   17be4:	4770      	bx	lr
        if (ct == CborArrayType) {
   17be6:	2880      	cmp	r0, #128	; 0x80
   17be8:	d017      	beq.n	17c1a <valid_attr_type+0x74>
    return 0;
   17bea:	2000      	movs	r0, #0
   17bec:	4770      	bx	lr
        if (ct == CborMapType) {
   17bee:	28a0      	cmp	r0, #160	; 0xa0
   17bf0:	d015      	beq.n	17c1e <valid_attr_type+0x78>
    return 0;
   17bf2:	2000      	movs	r0, #0
   17bf4:	4770      	bx	lr
        if (ct == CborNullType) {
   17bf6:	28f6      	cmp	r0, #246	; 0xf6
   17bf8:	d013      	beq.n	17c22 <valid_attr_type+0x7c>
    return 0;
   17bfa:	2000      	movs	r0, #0
   17bfc:	4770      	bx	lr
    switch (at) {
   17bfe:	2000      	movs	r0, #0
   17c00:	4770      	bx	lr
            return 1;
   17c02:	2001      	movs	r0, #1
   17c04:	4770      	bx	lr
            return 1;
   17c06:	2001      	movs	r0, #1
   17c08:	4770      	bx	lr
            return 1;
   17c0a:	2001      	movs	r0, #1
   17c0c:	4770      	bx	lr
            return 1;
   17c0e:	2001      	movs	r0, #1
   17c10:	4770      	bx	lr
            return 1;
   17c12:	2001      	movs	r0, #1
   17c14:	4770      	bx	lr
            return 1;
   17c16:	2001      	movs	r0, #1
   17c18:	4770      	bx	lr
            return 1;
   17c1a:	2001      	movs	r0, #1
   17c1c:	4770      	bx	lr
            return 1;
   17c1e:	2001      	movs	r0, #1
   17c20:	4770      	bx	lr
            return 1;
   17c22:	2001      	movs	r0, #1
}
   17c24:	4770      	bx	lr

00017c26 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   17c26:	460b      	mov	r3, r1
   17c28:	b111      	cbz	r1, 17c30 <cbor_target_address+0xa>
   17c2a:	7809      	ldrb	r1, [r1, #0]
   17c2c:	290a      	cmp	r1, #10
   17c2e:	d020      	beq.n	17c72 <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   17c30:	7903      	ldrb	r3, [r0, #4]
   17c32:	3b01      	subs	r3, #1
   17c34:	2b06      	cmp	r3, #6
   17c36:	d823      	bhi.n	17c80 <cbor_target_address+0x5a>
   17c38:	e8df f003 	tbb	[pc, r3]
   17c3c:	16140804 	.word	0x16140804
   17c40:	0c18      	.short	0x0c18
   17c42:	10          	.byte	0x10
   17c43:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   17c44:	6880      	ldr	r0, [r0, #8]
   17c46:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   17c4a:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   17c4c:	6880      	ldr	r0, [r0, #8]
   17c4e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   17c52:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   17c54:	6880      	ldr	r0, [r0, #8]
   17c56:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   17c5a:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   17c5c:	6880      	ldr	r0, [r0, #8]
   17c5e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   17c62:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   17c64:	6880      	ldr	r0, [r0, #8]
            break;
   17c66:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   17c68:	6880      	ldr	r0, [r0, #8]
            break;
   17c6a:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   17c6c:	6880      	ldr	r0, [r0, #8]
   17c6e:	4410      	add	r0, r2
            break;
   17c70:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   17c72:	6899      	ldr	r1, [r3, #8]
   17c74:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   17c76:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   17c78:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   17c7c:	4408      	add	r0, r1
   17c7e:	4770      	bx	lr
        switch (cursor->type) {
   17c80:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   17c82:	4770      	bx	lr

00017c84 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   17c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c88:	b08b      	sub	sp, #44	; 0x2c
   17c8a:	9001      	str	r0, [sp, #4]
   17c8c:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   17c8e:	a906      	add	r1, sp, #24
   17c90:	f000 ff59 	bl	18b46 <cbor_value_enter_container>
    if (err) {
   17c94:	4605      	mov	r5, r0
   17c96:	2800      	cmp	r0, #0
   17c98:	f040 80fd 	bne.w	17e96 <cbor_read_array+0x212>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   17c9c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   17ca0:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   17ca2:	463e      	mov	r6, r7
   17ca4:	e0be      	b.n	17e24 <cbor_read_array+0x1a0>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   17ca6:	6862      	ldr	r2, [r4, #4]
CBOR_INLINE_API bool cbor_value_is_undefined(const CborValue *value)
{ return value->type == CborUndefinedType; }

/* Booleans */
CBOR_INLINE_API bool cbor_value_is_boolean(const CborValue *value)
{ return value->type == CborBooleanType; }
   17ca8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_boolean(const CborValue *value, bool *result)
{
    assert(cbor_value_is_boolean(value));
   17cac:	2bf5      	cmp	r3, #245	; 0xf5
   17cae:	d106      	bne.n	17cbe <cbor_read_array+0x3a>
    *result = !!value->extra;
   17cb0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   17cb4:	3b00      	subs	r3, #0
   17cb6:	bf18      	it	ne
   17cb8:	2301      	movne	r3, #1
   17cba:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   17cbc:	e0a7      	b.n	17e0e <cbor_read_array+0x18a>
    assert(cbor_value_is_boolean(value));
   17cbe:	2300      	movs	r3, #0
   17cc0:	461a      	mov	r2, r3
   17cc2:	4619      	mov	r1, r3
   17cc4:	4618      	mov	r0, r3
   17cc6:	f7f1 fa7d 	bl	91c4 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   17cca:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17cce:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   17cd2:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    return CborNoError;
}

/* Integers */
CBOR_INLINE_API bool cbor_value_is_integer(const CborValue *value)
{ return value->type == CborIntegerType; }
   17cd6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    return CborNoError;
}

CBOR_INLINE_API CborError cbor_value_get_int64(const CborValue *value, int64_t *result)
{
    assert(cbor_value_is_integer(value));
   17cda:	b9c3      	cbnz	r3, 17d0e <cbor_read_array+0x8a>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17cdc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   17ce0:	f013 0f01 	tst.w	r3, #1
   17ce4:	d119      	bne.n	17d1a <cbor_read_array+0x96>
   17ce6:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   17cea:	2100      	movs	r1, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   17cec:	f849 000b 	str.w	r0, [r9, fp]
   17cf0:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   17cf4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17cf8:	f013 0f02 	tst.w	r3, #2
   17cfc:	f000 8087 	beq.w	17e0e <cbor_read_array+0x18a>
        *result = -*result - 1;
   17d00:	43c0      	mvns	r0, r0
   17d02:	43c9      	mvns	r1, r1
   17d04:	f849 000b 	str.w	r0, [r9, fp]
   17d08:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   17d0c:	e07f      	b.n	17e0e <cbor_read_array+0x18a>
    assert(cbor_value_is_integer(value));
   17d0e:	2300      	movs	r3, #0
   17d10:	461a      	mov	r2, r3
   17d12:	4619      	mov	r1, r3
   17d14:	4618      	mov	r0, r3
   17d16:	f7f1 fa55 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17d1a:	a806      	add	r0, sp, #24
   17d1c:	f000 fec5 	bl	18aaa <_cbor_value_decode_int64_internal>
   17d20:	e7e4      	b.n	17cec <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   17d22:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17d26:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   17d2a:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   17d2e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17d32:	b933      	cbnz	r3, 17d42 <cbor_read_array+0xbe>
   17d34:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17d38:	f013 0f02 	tst.w	r3, #2
   17d3c:	d010      	beq.n	17d60 <cbor_read_array+0xdc>
   17d3e:	2300      	movs	r3, #0
   17d40:	e000      	b.n	17d44 <cbor_read_array+0xc0>
   17d42:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   17d44:	b173      	cbz	r3, 17d64 <cbor_read_array+0xe0>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17d46:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   17d4a:	f013 0f01 	tst.w	r3, #1
   17d4e:	d10e      	bne.n	17d6e <cbor_read_array+0xea>
   17d50:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   17d54:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   17d56:	f849 000b 	str.w	r0, [r9, fp]
   17d5a:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   17d5e:	e056      	b.n	17e0e <cbor_read_array+0x18a>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17d60:	2301      	movs	r3, #1
   17d62:	e7ef      	b.n	17d44 <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   17d64:	461a      	mov	r2, r3
   17d66:	4619      	mov	r1, r3
   17d68:	4618      	mov	r0, r3
   17d6a:	f7f1 fa2b 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17d6e:	a806      	add	r0, sp, #24
   17d70:	f000 fe9b 	bl	18aaa <_cbor_value_decode_int64_internal>
   17d74:	e7ef      	b.n	17d56 <cbor_read_array+0xd2>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   17d76:	f8d4 9004 	ldr.w	r9, [r4, #4]
   17d7a:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   17d7e:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   17d82:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   17d86:	2bfb      	cmp	r3, #251	; 0xfb
   17d88:	d110      	bne.n	17dac <cbor_read_array+0x128>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17d8a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17d8e:	f013 0f01 	tst.w	r3, #1
   17d92:	d011      	beq.n	17db8 <cbor_read_array+0x134>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   17d94:	a806      	add	r0, sp, #24
   17d96:	f000 fe88 	bl	18aaa <_cbor_value_decode_int64_internal>
   17d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   17d9e:	ab02      	add	r3, sp, #8
   17da0:	cb03      	ldmia	r3!, {r0, r1}
   17da2:	f849 000b 	str.w	r0, [r9, fp]
   17da6:	f8ca 1004 	str.w	r1, [sl, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   17daa:	e030      	b.n	17e0e <cbor_read_array+0x18a>
    assert(cbor_value_is_double(value));
   17dac:	2300      	movs	r3, #0
   17dae:	461a      	mov	r2, r3
   17db0:	4619      	mov	r1, r3
   17db2:	4618      	mov	r0, r3
   17db4:	f7f1 fa06 	bl	91c4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   17db8:	2300      	movs	r3, #0
   17dba:	461a      	mov	r2, r3
   17dbc:	4619      	mov	r1, r3
   17dbe:	4618      	mov	r0, r3
   17dc0:	f7f1 fa00 	bl	91c4 <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   17dc4:	68e3      	ldr	r3, [r4, #12]
   17dc6:	68a2      	ldr	r2, [r4, #8]
   17dc8:	eba8 0202 	sub.w	r2, r8, r2
   17dcc:	1a9b      	subs	r3, r3, r2
   17dce:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   17dd0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   17dd4:	2b60      	cmp	r3, #96	; 0x60
   17dd6:	d10d      	bne.n	17df4 <cbor_read_array+0x170>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   17dd8:	2300      	movs	r3, #0
   17dda:	aa05      	add	r2, sp, #20
   17ddc:	4641      	mov	r1, r8
   17dde:	a806      	add	r0, sp, #24
   17de0:	f000 ff66 	bl	18cb0 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   17de4:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   17de6:	6863      	ldr	r3, [r4, #4]
   17de8:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   17dec:	9b05      	ldr	r3, [sp, #20]
   17dee:	3301      	adds	r3, #1
   17df0:	4498      	add	r8, r3
            break;
   17df2:	e00c      	b.n	17e0e <cbor_read_array+0x18a>
    assert(cbor_value_is_text_string(value));
   17df4:	2300      	movs	r3, #0
   17df6:	461a      	mov	r2, r3
   17df8:	4619      	mov	r1, r3
   17dfa:	4618      	mov	r0, r3
   17dfc:	f7f1 f9e2 	bl	91c4 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   17e00:	4633      	mov	r3, r6
   17e02:	4622      	mov	r2, r4
   17e04:	6861      	ldr	r1, [r4, #4]
   17e06:	a806      	add	r0, sp, #24
   17e08:	f000 f848 	bl	17e9c <cbor_internal_read_object>
   17e0c:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   17e0e:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   17e10:	7823      	ldrb	r3, [r4, #0]
   17e12:	2b0a      	cmp	r3, #10
   17e14:	d127      	bne.n	17e66 <cbor_read_array+0x1e2>
{ return value && value->type != CborInvalidType; }
   17e16:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   17e1a:	2bff      	cmp	r3, #255	; 0xff
   17e1c:	d028      	beq.n	17e70 <cbor_read_array+0x1ec>
   17e1e:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   17e20:	b343      	cbz	r3, 17e74 <cbor_read_array+0x1f0>
    for (off = 0; off < arr->maxlen; off++) {
   17e22:	3601      	adds	r6, #1
   17e24:	6963      	ldr	r3, [r4, #20]
   17e26:	42b3      	cmp	r3, r6
   17e28:	dd24      	ble.n	17e74 <cbor_read_array+0x1f0>
        switch (arr->element_type) {
   17e2a:	7823      	ldrb	r3, [r4, #0]
   17e2c:	3b01      	subs	r3, #1
   17e2e:	2b09      	cmp	r3, #9
   17e30:	d816      	bhi.n	17e60 <cbor_read_array+0x1dc>
   17e32:	a201      	add	r2, pc, #4	; (adr r2, 17e38 <cbor_read_array+0x1b4>)
   17e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17e38:	00017ccb 	.word	0x00017ccb
   17e3c:	00017d23 	.word	0x00017d23
   17e40:	00017e61 	.word	0x00017e61
   17e44:	00017dc5 	.word	0x00017dc5
   17e48:	00017ca7 	.word	0x00017ca7
   17e4c:	00017d77 	.word	0x00017d77
   17e50:	00017d77 	.word	0x00017d77
   17e54:	00017e61 	.word	0x00017e61
   17e58:	00017e61 	.word	0x00017e61
   17e5c:	00017e01 	.word	0x00017e01
            err |= CborErrorIllegalType;
   17e60:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   17e64:	e7d3      	b.n	17e0e <cbor_read_array+0x18a>
            err |= cbor_value_advance(&elem);
   17e66:	a806      	add	r0, sp, #24
   17e68:	f000 ff7f 	bl	18d6a <cbor_value_advance>
   17e6c:	4305      	orrs	r5, r0
   17e6e:	e7d2      	b.n	17e16 <cbor_read_array+0x192>
   17e70:	2300      	movs	r3, #0
   17e72:	e7d5      	b.n	17e20 <cbor_read_array+0x19c>
            break;
        }
    }
    if (arr->count) {
   17e74:	6923      	ldr	r3, [r4, #16]
   17e76:	b133      	cbz	r3, 17e86 <cbor_read_array+0x202>
        *arr->count = arrcount;
   17e78:	601f      	str	r7, [r3, #0]
   17e7a:	e004      	b.n	17e86 <cbor_read_array+0x202>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   17e7c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   17e80:	a806      	add	r0, sp, #24
   17e82:	f000 ff72 	bl	18d6a <cbor_value_advance>
{ return it->remaining == 0; }
   17e86:	9b08      	ldr	r3, [sp, #32]
    while (!cbor_value_at_end(&elem)) {
   17e88:	2b00      	cmp	r3, #0
   17e8a:	d1f7      	bne.n	17e7c <cbor_read_array+0x1f8>
    }
    err |= cbor_value_leave_container(value, &elem);
   17e8c:	a906      	add	r1, sp, #24
   17e8e:	9801      	ldr	r0, [sp, #4]
   17e90:	f000 feee 	bl	18c70 <cbor_value_leave_container>
   17e94:	4328      	orrs	r0, r5
    return err;
}
   17e96:	b00b      	add	sp, #44	; 0x2c
   17e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017e9c <cbor_internal_read_object>:
{
   17e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ea0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   17ea4:	9001      	str	r0, [sp, #4]
   17ea6:	9100      	str	r1, [sp, #0]
   17ea8:	4691      	mov	r9, r2
   17eaa:	469a      	mov	sl, r3
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   17eac:	460c      	mov	r4, r1
   17eae:	e004      	b.n	17eba <cbor_internal_read_object+0x1e>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   17eb0:	6a21      	ldr	r1, [r4, #32]
   17eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17eb4:	6001      	str	r1, [r0, #0]
   17eb6:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   17eb8:	3430      	adds	r4, #48	; 0x30
   17eba:	6827      	ldr	r7, [r4, #0]
   17ebc:	b38f      	cbz	r7, 17f22 <cbor_internal_read_object+0x86>
        if (!cursor->nodefault) {
   17ebe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   17ec2:	2b00      	cmp	r3, #0
   17ec4:	d1f8      	bne.n	17eb8 <cbor_internal_read_object+0x1c>
            lptr = cbor_target_address(cursor, parent, offset);
   17ec6:	4652      	mov	r2, sl
   17ec8:	4649      	mov	r1, r9
   17eca:	4620      	mov	r0, r4
   17ecc:	f7ff feab 	bl	17c26 <cbor_target_address>
            if (lptr != NULL) {
   17ed0:	2800      	cmp	r0, #0
   17ed2:	d0f1      	beq.n	17eb8 <cbor_internal_read_object+0x1c>
                switch (cursor->type) {
   17ed4:	7923      	ldrb	r3, [r4, #4]
   17ed6:	3b01      	subs	r3, #1
   17ed8:	2b06      	cmp	r3, #6
   17eda:	d8ed      	bhi.n	17eb8 <cbor_internal_read_object+0x1c>
   17edc:	a101      	add	r1, pc, #4	; (adr r1, 17ee4 <cbor_internal_read_object+0x48>)
   17ede:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17ee2:	bf00      	nop
   17ee4:	00017eb1 	.word	0x00017eb1
   17ee8:	00017f01 	.word	0x00017f01
   17eec:	00017eb9 	.word	0x00017eb9
   17ef0:	00017eb9 	.word	0x00017eb9
   17ef4:	00017f0b 	.word	0x00017f0b
   17ef8:	00017f13 	.word	0x00017f13
   17efc:	00017f19 	.word	0x00017f19
                    memcpy(lptr, &cursor->dflt.integer,
   17f00:	6a21      	ldr	r1, [r4, #32]
   17f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17f04:	6001      	str	r1, [r0, #0]
   17f06:	6043      	str	r3, [r0, #4]
                    break;
   17f08:	e7d6      	b.n	17eb8 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   17f0a:	f894 3020 	ldrb.w	r3, [r4, #32]
   17f0e:	7003      	strb	r3, [r0, #0]
                    break;
   17f10:	e7d2      	b.n	17eb8 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   17f12:	6a23      	ldr	r3, [r4, #32]
   17f14:	6003      	str	r3, [r0, #0]
                    break;
   17f16:	e7cf      	b.n	17eb8 <cbor_internal_read_object+0x1c>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   17f18:	6a21      	ldr	r1, [r4, #32]
   17f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   17f1c:	6001      	str	r1, [r0, #0]
   17f1e:	6043      	str	r3, [r0, #4]
                    break;
   17f20:	e7ca      	b.n	17eb8 <cbor_internal_read_object+0x1c>
{ return value->type == CborMapType; }
   17f22:	9801      	ldr	r0, [sp, #4]
   17f24:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   17f26:	2ba0      	cmp	r3, #160	; 0xa0
   17f28:	d005      	beq.n	17f36 <cbor_internal_read_object+0x9a>
        return err;
   17f2a:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   17f2e:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   17f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   17f36:	a905      	add	r1, sp, #20
   17f38:	f000 fe05 	bl	18b46 <cbor_value_enter_container>
   17f3c:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   17f3e:	e140      	b.n	181c2 <cbor_internal_read_object+0x326>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   17f40:	a904      	add	r1, sp, #16
   17f42:	a805      	add	r0, sp, #20
   17f44:	f000 ff23 	bl	18d8e <cbor_value_calculate_string_length>
   17f48:	b978      	cbnz	r0, 17f6a <cbor_internal_read_object+0xce>
                if (len > MYNEWT_VAL(CBORATTR_MAX_SIZE)) {
   17f4a:	9b04      	ldr	r3, [sp, #16]
   17f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17f50:	d820      	bhi.n	17f94 <cbor_internal_read_object+0xf8>
{ return value->type == CborTextStringType; }
   17f52:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   17f56:	2b60      	cmp	r3, #96	; 0x60
   17f58:	d11f      	bne.n	17f9a <cbor_internal_read_object+0xfe>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   17f5a:	2300      	movs	r3, #0
   17f5c:	aa04      	add	r2, sp, #16
   17f5e:	a909      	add	r1, sp, #36	; 0x24
   17f60:	a805      	add	r0, sp, #20
   17f62:	f000 fea5 	bl	18cb0 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   17f66:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   17f6a:	a805      	add	r0, sp, #20
   17f6c:	f000 fefd 	bl	18d6a <cbor_value_advance>
   17f70:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   17f74:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   17f78:	2eff      	cmp	r6, #255	; 0xff
   17f7a:	d014      	beq.n	17fa6 <cbor_internal_read_object+0x10a>
   17f7c:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   17f7e:	2b00      	cmp	r3, #0
   17f80:	f040 8131 	bne.w	181e6 <cbor_internal_read_object+0x34a>
                err |= CborErrorIllegalType;
   17f84:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   17f88:	f1b8 0f00 	cmp.w	r8, #0
   17f8c:	f000 8130 	beq.w	181f0 <cbor_internal_read_object+0x354>
    return err;
   17f90:	4640      	mov	r0, r8
   17f92:	e7cc      	b.n	17f2e <cbor_internal_read_object+0x92>
                    err |= CborErrorDataTooLarge;
   17f94:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   17f98:	e7f6      	b.n	17f88 <cbor_internal_read_object+0xec>
    assert(cbor_value_is_text_string(value));
   17f9a:	2300      	movs	r3, #0
   17f9c:	461a      	mov	r2, r3
   17f9e:	4619      	mov	r1, r3
   17fa0:	4618      	mov	r0, r3
   17fa2:	f7f1 f90f 	bl	91c4 <__assert_func>
{ return value && value->type != CborInvalidType; }
   17fa6:	2300      	movs	r3, #0
   17fa8:	e7e9      	b.n	17f7e <cbor_internal_read_object+0xe2>
                    attrbuf[0] == '\0') {
   17faa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   17fae:	b963      	cbnz	r3, 17fca <cbor_internal_read_object+0x12e>
                    best_match = cursor;
   17fb0:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   17fb2:	3430      	adds	r4, #48	; 0x30
   17fb4:	6825      	ldr	r5, [r4, #0]
   17fb6:	b1a5      	cbz	r5, 17fe2 <cbor_internal_read_object+0x146>
            if (valid_attr_type(type, cursor->type)) {
   17fb8:	7921      	ldrb	r1, [r4, #4]
   17fba:	4630      	mov	r0, r6
   17fbc:	f7ff fdf3 	bl	17ba6 <valid_attr_type>
   17fc0:	2800      	cmp	r0, #0
   17fc2:	d0f6      	beq.n	17fb2 <cbor_internal_read_object+0x116>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   17fc4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17fc8:	d0ef      	beq.n	17faa <cbor_internal_read_object+0x10e>
                } else if (strlen(cursor->attribute) == len &&
   17fca:	4628      	mov	r0, r5
   17fcc:	f7f8 fb8c 	bl	106e8 <strlen>
   17fd0:	9a04      	ldr	r2, [sp, #16]
   17fd2:	4290      	cmp	r0, r2
   17fd4:	d1ed      	bne.n	17fb2 <cbor_internal_read_object+0x116>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   17fd6:	a909      	add	r1, sp, #36	; 0x24
   17fd8:	4628      	mov	r0, r5
   17fda:	f7f8 fb1d 	bl	10618 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   17fde:	2800      	cmp	r0, #0
   17fe0:	d1e7      	bne.n	17fb2 <cbor_internal_read_object+0x116>
        if (!cursor->attribute && best_match) {
   17fe2:	b1b5      	cbz	r5, 18012 <cbor_internal_read_object+0x176>
        if (cursor->attribute != NULL) {
   17fe4:	6823      	ldr	r3, [r4, #0]
   17fe6:	2b00      	cmp	r3, #0
   17fe8:	f000 80e8 	beq.w	181bc <cbor_internal_read_object+0x320>
            lptr = cbor_target_address(cursor, parent, offset);
   17fec:	4652      	mov	r2, sl
   17fee:	4649      	mov	r1, r9
   17ff0:	4620      	mov	r0, r4
   17ff2:	f7ff fe18 	bl	17c26 <cbor_target_address>
   17ff6:	4605      	mov	r5, r0
            switch (cursor->type) {
   17ff8:	7923      	ldrb	r3, [r4, #4]
   17ffa:	3b01      	subs	r3, #1
   17ffc:	2b0a      	cmp	r3, #10
   17ffe:	f200 80db 	bhi.w	181b8 <cbor_internal_read_object+0x31c>
   18002:	e8df f003 	tbb	[pc, r3]
   18006:	401c      	.short	0x401c
   18008:	620bb39b 	.word	0x620bb39b
   1800c:	d9d0c87c 	.word	0xd9d0c87c
   18010:	db          	.byte	0xdb
   18011:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   18012:	f1bb 0f00 	cmp.w	fp, #0
   18016:	d0e5      	beq.n	17fe4 <cbor_internal_read_object+0x148>
            cursor = best_match;
   18018:	465c      	mov	r4, fp
   1801a:	e7e3      	b.n	17fe4 <cbor_internal_read_object+0x148>
{ return value->type == CborBooleanType; }
   1801c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   18020:	2bf5      	cmp	r3, #245	; 0xf5
   18022:	d106      	bne.n	18032 <cbor_internal_read_object+0x196>
    *result = !!value->extra;
   18024:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   18028:	3b00      	subs	r3, #0
   1802a:	bf18      	it	ne
   1802c:	2301      	movne	r3, #1
   1802e:	7003      	strb	r3, [r0, #0]
                break;
   18030:	e0c4      	b.n	181bc <cbor_internal_read_object+0x320>
    assert(cbor_value_is_boolean(value));
   18032:	2300      	movs	r3, #0
   18034:	461a      	mov	r2, r3
   18036:	4619      	mov	r1, r3
   18038:	4618      	mov	r0, r3
   1803a:	f7f1 f8c3 	bl	91c4 <__assert_func>
{ return value->type == CborIntegerType; }
   1803e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   18042:	b9a3      	cbnz	r3, 1806e <cbor_internal_read_object+0x1d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   18044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   18048:	f013 0f01 	tst.w	r3, #1
   1804c:	d115      	bne.n	1807a <cbor_internal_read_object+0x1de>
   1804e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   18052:	2300      	movs	r3, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   18054:	602a      	str	r2, [r5, #0]
   18056:	606b      	str	r3, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   18058:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1805c:	f011 0f02 	tst.w	r1, #2
   18060:	f000 80ac 	beq.w	181bc <cbor_internal_read_object+0x320>
        *result = -*result - 1;
   18064:	43d2      	mvns	r2, r2
   18066:	43db      	mvns	r3, r3
   18068:	602a      	str	r2, [r5, #0]
   1806a:	606b      	str	r3, [r5, #4]
                break;
   1806c:	e0a6      	b.n	181bc <cbor_internal_read_object+0x320>
    assert(cbor_value_is_integer(value));
   1806e:	2300      	movs	r3, #0
   18070:	461a      	mov	r2, r3
   18072:	4619      	mov	r1, r3
   18074:	4618      	mov	r0, r3
   18076:	f7f1 f8a5 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1807a:	a805      	add	r0, sp, #20
   1807c:	f000 fd15 	bl	18aaa <_cbor_value_decode_int64_internal>
   18080:	4602      	mov	r2, r0
   18082:	460b      	mov	r3, r1
   18084:	e7e6      	b.n	18054 <cbor_internal_read_object+0x1b8>
{ return value->type == CborIntegerType; }
   18086:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1808a:	b933      	cbnz	r3, 1809a <cbor_internal_read_object+0x1fe>
   1808c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   18090:	f013 0f02 	tst.w	r3, #2
   18094:	d00e      	beq.n	180b4 <cbor_internal_read_object+0x218>
   18096:	2300      	movs	r3, #0
   18098:	e000      	b.n	1809c <cbor_internal_read_object+0x200>
   1809a:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   1809c:	b163      	cbz	r3, 180b8 <cbor_internal_read_object+0x21c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1809e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   180a2:	f013 0f01 	tst.w	r3, #1
   180a6:	d10c      	bne.n	180c2 <cbor_internal_read_object+0x226>
   180a8:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   180ac:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   180ae:	6028      	str	r0, [r5, #0]
   180b0:	6069      	str	r1, [r5, #4]
                break;
   180b2:	e083      	b.n	181bc <cbor_internal_read_object+0x320>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   180b4:	2301      	movs	r3, #1
   180b6:	e7f1      	b.n	1809c <cbor_internal_read_object+0x200>
    assert(cbor_value_is_unsigned_integer(value));
   180b8:	461a      	mov	r2, r3
   180ba:	4619      	mov	r1, r3
   180bc:	4618      	mov	r0, r3
   180be:	f7f1 f881 	bl	91c4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   180c2:	a805      	add	r0, sp, #20
   180c4:	f000 fcf1 	bl	18aaa <_cbor_value_decode_int64_internal>
   180c8:	e7f1      	b.n	180ae <cbor_internal_read_object+0x212>
{ return value->type == CborFloatType; }
   180ca:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   180ce:	2bfa      	cmp	r3, #250	; 0xfa
   180d0:	d109      	bne.n	180e6 <cbor_internal_read_object+0x24a>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   180d2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   180d6:	f013 0f01 	tst.w	r3, #1
   180da:	d00a      	beq.n	180f2 <cbor_internal_read_object+0x256>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   180dc:	a805      	add	r0, sp, #20
   180de:	f000 fce4 	bl	18aaa <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   180e2:	6028      	str	r0, [r5, #0]
                break;
   180e4:	e06a      	b.n	181bc <cbor_internal_read_object+0x320>
    assert(cbor_value_is_float(value));
   180e6:	2300      	movs	r3, #0
   180e8:	461a      	mov	r2, r3
   180ea:	4619      	mov	r1, r3
   180ec:	4618      	mov	r0, r3
   180ee:	f7f1 f869 	bl	91c4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   180f2:	2300      	movs	r3, #0
   180f4:	461a      	mov	r2, r3
   180f6:	4619      	mov	r1, r3
   180f8:	4618      	mov	r0, r3
   180fa:	f7f1 f863 	bl	91c4 <__assert_func>
{ return value->type == CborDoubleType; }
   180fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   18102:	2bfb      	cmp	r3, #251	; 0xfb
   18104:	d10e      	bne.n	18124 <cbor_internal_read_object+0x288>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   18106:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1810a:	f013 0f01 	tst.w	r3, #1
   1810e:	d00f      	beq.n	18130 <cbor_internal_read_object+0x294>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   18110:	a805      	add	r0, sp, #20
   18112:	f000 fcca 	bl	18aaa <_cbor_value_decode_int64_internal>
   18116:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   1811a:	ab02      	add	r3, sp, #8
   1811c:	cb03      	ldmia	r3!, {r0, r1}
   1811e:	6028      	str	r0, [r5, #0]
   18120:	6069      	str	r1, [r5, #4]
                break;
   18122:	e04b      	b.n	181bc <cbor_internal_read_object+0x320>
    assert(cbor_value_is_double(value));
   18124:	2300      	movs	r3, #0
   18126:	461a      	mov	r2, r3
   18128:	4619      	mov	r1, r3
   1812a:	4618      	mov	r0, r3
   1812c:	f7f1 f84a 	bl	91c4 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   18130:	2300      	movs	r3, #0
   18132:	461a      	mov	r2, r3
   18134:	4619      	mov	r1, r3
   18136:	4618      	mov	r0, r3
   18138:	f7f1 f844 	bl	91c4 <__assert_func>
                size_t len = cursor->len;
   1813c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1813e:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   18140:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   18144:	2b40      	cmp	r3, #64	; 0x40
   18146:	d10b      	bne.n	18160 <cbor_internal_read_object+0x2c4>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   18148:	2300      	movs	r3, #0
   1814a:	aa02      	add	r2, sp, #8
   1814c:	4601      	mov	r1, r0
   1814e:	a805      	add	r0, sp, #20
   18150:	f000 fdae 	bl	18cb0 <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   18154:	ea48 0800 	orr.w	r8, r8, r0
                *cursor->addr.bytestring.len = len;
   18158:	68e3      	ldr	r3, [r4, #12]
   1815a:	9a02      	ldr	r2, [sp, #8]
   1815c:	601a      	str	r2, [r3, #0]
                break;
   1815e:	e02d      	b.n	181bc <cbor_internal_read_object+0x320>
    assert(cbor_value_is_byte_string(value));
   18160:	2300      	movs	r3, #0
   18162:	461a      	mov	r2, r3
   18164:	4619      	mov	r1, r3
   18166:	4618      	mov	r0, r3
   18168:	f7f1 f82c 	bl	91c4 <__assert_func>
                size_t len = cursor->len;
   1816c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1816e:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   18170:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   18174:	2b60      	cmp	r3, #96	; 0x60
   18176:	d108      	bne.n	1818a <cbor_internal_read_object+0x2ee>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   18178:	2300      	movs	r3, #0
   1817a:	aa02      	add	r2, sp, #8
   1817c:	4601      	mov	r1, r0
   1817e:	a805      	add	r0, sp, #20
   18180:	f000 fd96 	bl	18cb0 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   18184:	ea48 0800 	orr.w	r8, r8, r0
                break;
   18188:	e018      	b.n	181bc <cbor_internal_read_object+0x320>
    assert(cbor_value_is_text_string(value));
   1818a:	2300      	movs	r3, #0
   1818c:	461a      	mov	r2, r3
   1818e:	4619      	mov	r1, r3
   18190:	4618      	mov	r0, r3
   18192:	f7f1 f817 	bl	91c4 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   18196:	f104 0108 	add.w	r1, r4, #8
   1819a:	a805      	add	r0, sp, #20
   1819c:	f7ff fd72 	bl	17c84 <cbor_read_array>
   181a0:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   181a4:	e00d      	b.n	181c2 <cbor_internal_read_object+0x326>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   181a6:	2300      	movs	r3, #0
   181a8:	461a      	mov	r2, r3
   181aa:	68a1      	ldr	r1, [r4, #8]
   181ac:	a805      	add	r0, sp, #20
   181ae:	f7ff fe75 	bl	17e9c <cbor_internal_read_object>
   181b2:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   181b6:	e004      	b.n	181c2 <cbor_internal_read_object+0x326>
                err |= CborErrorIllegalType;
   181b8:	f448 7882 	orr.w	r8, r8, #260	; 0x104
        cbor_value_advance(&cur_value);
   181bc:	a805      	add	r0, sp, #20
   181be:	f000 fdd4 	bl	18d6a <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   181c2:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   181c6:	2eff      	cmp	r6, #255	; 0xff
   181c8:	d010      	beq.n	181ec <cbor_internal_read_object+0x350>
   181ca:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   181cc:	2b00      	cmp	r3, #0
   181ce:	f43f aedb 	beq.w	17f88 <cbor_internal_read_object+0xec>
   181d2:	f1b8 0f00 	cmp.w	r8, #0
   181d6:	f47f aed7 	bne.w	17f88 <cbor_internal_read_object+0xec>
        if (cbor_value_is_text_string(&cur_value)) {
   181da:	2e60      	cmp	r6, #96	; 0x60
   181dc:	f43f aeb0 	beq.w	17f40 <cbor_internal_read_object+0xa4>
            attrbuf[0] = '\0';
   181e0:	2300      	movs	r3, #0
   181e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   181e6:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   181e8:	9c00      	ldr	r4, [sp, #0]
   181ea:	e6e3      	b.n	17fb4 <cbor_internal_read_object+0x118>
   181ec:	2300      	movs	r3, #0
   181ee:	e7ed      	b.n	181cc <cbor_internal_read_object+0x330>
        err |= cbor_value_leave_container(root_value, &cur_value);
   181f0:	a905      	add	r1, sp, #20
   181f2:	9801      	ldr	r0, [sp, #4]
   181f4:	f000 fd3c 	bl	18c70 <cbor_value_leave_container>
   181f8:	ea48 0800 	orr.w	r8, r8, r0
   181fc:	e6c8      	b.n	17f90 <cbor_internal_read_object+0xf4>
   181fe:	bf00      	nop

00018200 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   18200:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   18202:	2300      	movs	r3, #0
   18204:	461a      	mov	r2, r3
   18206:	f7ff fe49 	bl	17e9c <cbor_internal_read_object>
    return st;
}
   1820a:	bd08      	pop	{r3, pc}

0001820c <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   1820c:	b508      	push	{r3, lr}
   1820e:	4694      	mov	ip, r2
   18210:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   18212:	460b      	mov	r3, r1
   18214:	69c1      	ldr	r1, [r0, #28]
   18216:	4461      	add	r1, ip
   18218:	6a00      	ldr	r0, [r0, #32]
   1821a:	f7f2 fbe0 	bl	a9de <os_mbuf_copydata>
    if (rc == 0) {
   1821e:	b108      	cbz	r0, 18224 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   18220:	2000      	movs	r0, #0
}
   18222:	bd08      	pop	{r3, pc}
        return true;
   18224:	2001      	movs	r0, #1
   18226:	e7fc      	b.n	18222 <cbor_mbuf_reader_cpy+0x16>

00018228 <cbor_mbuf_reader_get8>:
{
   18228:	b510      	push	{r4, lr}
   1822a:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   1822c:	f10d 0307 	add.w	r3, sp, #7
   18230:	2201      	movs	r2, #1
   18232:	69c4      	ldr	r4, [r0, #28]
   18234:	4421      	add	r1, r4
   18236:	6a00      	ldr	r0, [r0, #32]
   18238:	f7f2 fbd1 	bl	a9de <os_mbuf_copydata>
}
   1823c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   18240:	b002      	add	sp, #8
   18242:	bd10      	pop	{r4, pc}

00018244 <cbor_mbuf_reader_cmp>:
{
   18244:	b508      	push	{r3, lr}
   18246:	4694      	mov	ip, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   18248:	460a      	mov	r2, r1
   1824a:	69c1      	ldr	r1, [r0, #28]
   1824c:	4461      	add	r1, ip
   1824e:	6a00      	ldr	r0, [r0, #32]
   18250:	f7f2 fc49 	bl	aae6 <os_mbuf_cmpf>
}
   18254:	fab0 f080 	clz	r0, r0
   18258:	0940      	lsrs	r0, r0, #5
   1825a:	bd08      	pop	{r3, pc}

0001825c <cbor_mbuf_reader_get64>:
{
   1825c:	b510      	push	{r4, lr}
   1825e:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   18260:	466b      	mov	r3, sp
   18262:	2208      	movs	r2, #8
   18264:	69c4      	ldr	r4, [r0, #28]
   18266:	4421      	add	r1, r4
   18268:	6a00      	ldr	r0, [r0, #32]
   1826a:	f7f2 fbb8 	bl	a9de <os_mbuf_copydata>
}
   1826e:	9801      	ldr	r0, [sp, #4]
   18270:	ba00      	rev	r0, r0
   18272:	9900      	ldr	r1, [sp, #0]
   18274:	ba09      	rev	r1, r1
   18276:	b002      	add	sp, #8
   18278:	bd10      	pop	{r4, pc}

0001827a <cbor_mbuf_reader_get32>:
{
   1827a:	b510      	push	{r4, lr}
   1827c:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   1827e:	ab01      	add	r3, sp, #4
   18280:	2204      	movs	r2, #4
   18282:	69c4      	ldr	r4, [r0, #28]
   18284:	4421      	add	r1, r4
   18286:	6a00      	ldr	r0, [r0, #32]
   18288:	f7f2 fba9 	bl	a9de <os_mbuf_copydata>
}
   1828c:	9801      	ldr	r0, [sp, #4]
   1828e:	ba00      	rev	r0, r0
   18290:	b002      	add	sp, #8
   18292:	bd10      	pop	{r4, pc}

00018294 <cbor_mbuf_reader_get16>:
{
   18294:	b510      	push	{r4, lr}
   18296:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   18298:	f10d 0306 	add.w	r3, sp, #6
   1829c:	2202      	movs	r2, #2
   1829e:	69c4      	ldr	r4, [r0, #28]
   182a0:	4421      	add	r1, r4
   182a2:	6a00      	ldr	r0, [r0, #32]
   182a4:	f7f2 fb9b 	bl	a9de <os_mbuf_copydata>
    return cbor_ntohs(val);
   182a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   182ac:	ba40      	rev16	r0, r0
}
   182ae:	b280      	uxth	r0, r0
   182b0:	b002      	add	sp, #8
   182b2:	bd10      	pop	{r4, pc}

000182b4 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   182b4:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   182b6:	4b0d      	ldr	r3, [pc, #52]	; (182ec <cbor_mbuf_reader_init+0x38>)
   182b8:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   182ba:	4b0d      	ldr	r3, [pc, #52]	; (182f0 <cbor_mbuf_reader_init+0x3c>)
   182bc:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   182be:	4b0d      	ldr	r3, [pc, #52]	; (182f4 <cbor_mbuf_reader_init+0x40>)
   182c0:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   182c2:	4b0d      	ldr	r3, [pc, #52]	; (182f8 <cbor_mbuf_reader_init+0x44>)
   182c4:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   182c6:	4b0d      	ldr	r3, [pc, #52]	; (182fc <cbor_mbuf_reader_init+0x48>)
   182c8:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   182ca:	4b0d      	ldr	r3, [pc, #52]	; (18300 <cbor_mbuf_reader_init+0x4c>)
   182cc:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   182ce:	794b      	ldrb	r3, [r1, #5]
   182d0:	2b07      	cmp	r3, #7
   182d2:	d905      	bls.n	182e0 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   182d4:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   182d6:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   182d8:	8a0b      	ldrh	r3, [r1, #16]
   182da:	1a9a      	subs	r2, r3, r2
   182dc:	6182      	str	r2, [r0, #24]
}
   182de:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   182e0:	2300      	movs	r3, #0
   182e2:	461a      	mov	r2, r3
   182e4:	4619      	mov	r1, r3
   182e6:	4618      	mov	r0, r3
   182e8:	f7f0 ff6c 	bl	91c4 <__assert_func>
   182ec:	00018229 	.word	0x00018229
   182f0:	00018295 	.word	0x00018295
   182f4:	0001827b 	.word	0x0001827b
   182f8:	0001825d 	.word	0x0001825d
   182fc:	00018245 	.word	0x00018245
   18300:	0001820d 	.word	0x0001820d

00018304 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   18304:	b538      	push	{r3, r4, r5, lr}
   18306:	4604      	mov	r4, r0
   18308:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   1830a:	b292      	uxth	r2, r2
   1830c:	6880      	ldr	r0, [r0, #8]
   1830e:	f7f2 fb00 	bl	a912 <os_mbuf_append>
    if (rc) {
   18312:	b918      	cbnz	r0, 1831c <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   18314:	6862      	ldr	r2, [r4, #4]
   18316:	442a      	add	r2, r5
   18318:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   1831a:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   1831c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18320:	e7fb      	b.n	1831a <cbor_mbuf_writer+0x16>
	...

00018324 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   18324:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   18326:	2300      	movs	r3, #0
   18328:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   1832a:	4b01      	ldr	r3, [pc, #4]	; (18330 <cbor_mbuf_writer_init+0xc>)
   1832c:	6003      	str	r3, [r0, #0]
}
   1832e:	4770      	bx	lr
   18330:	00018305 	.word	0x00018305

00018334 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   18334:	b510      	push	{r4, lr}
   18336:	b084      	sub	sp, #16
   18338:	468c      	mov	ip, r1
    CborError err;
    container->writer = encoder->writer;
   1833a:	6801      	ldr	r1, [r0, #0]
   1833c:	f8cc 1000 	str.w	r1, [ip]
    ++encoder->added;
   18340:	6881      	ldr	r1, [r0, #8]
   18342:	3101      	adds	r1, #1
   18344:	6081      	str	r1, [r0, #8]
    container->added = 0;
   18346:	2100      	movs	r1, #0
   18348:	f8cc 1008 	str.w	r1, [ip, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   1834c:	f003 0120 	and.w	r1, r3, #32
   18350:	f8cc 100c 	str.w	r1, [ip, #12]

    if (length == CborIndefiniteLength) {
   18354:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   18358:	d10f      	bne.n	1837a <create_container+0x46>
        container->flags |= CborIteratorFlag_UnknownLength;
   1835a:	f041 0104 	orr.w	r1, r1, #4
   1835e:	f8cc 100c 	str.w	r1, [ip, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   18362:	331f      	adds	r3, #31
   18364:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   18368:	f8dc 0000 	ldr.w	r0, [ip]
   1836c:	6803      	ldr	r3, [r0, #0]
   1836e:	2201      	movs	r2, #1
   18370:	4669      	mov	r1, sp
   18372:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   18374:	2000      	movs	r0, #0
   18376:	b004      	add	sp, #16
   18378:	bd10      	pop	{r4, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   1837a:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   1837c:	ba10      	rev	r0, r2
    memcpy(where, &v, sizeof(v));
   1837e:	9102      	str	r1, [sp, #8]
   18380:	9003      	str	r0, [sp, #12]
    if (ui < Value8Bit) {
   18382:	2a18      	cmp	r2, #24
   18384:	f171 0400 	sbcs.w	r4, r1, #0
   18388:	d20c      	bcs.n	183a4 <create_container+0x70>
        *bufstart += shiftedMajorType;
   1838a:	eb03 6310 	add.w	r3, r3, r0, lsr #24
   1838e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   18392:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   18396:	f8dc 0000 	ldr.w	r0, [ip]
   1839a:	6803      	ldr	r3, [r0, #0]
   1839c:	aa04      	add	r2, sp, #16
   1839e:	1a52      	subs	r2, r2, r1
   183a0:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   183a2:	e7e7      	b.n	18374 <create_container+0x40>
        if (ui > 0xffU)
   183a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   183a8:	f171 0000 	sbcs.w	r0, r1, #0
   183ac:	d210      	bcs.n	183d0 <create_container+0x9c>
        unsigned more = 0;
   183ae:	2000      	movs	r0, #0
        if (ui > 0xffffU)
   183b0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   183b4:	f171 0200 	sbcs.w	r2, r1, #0
   183b8:	d300      	bcc.n	183bc <create_container+0x88>
            ++more;
   183ba:	3001      	adds	r0, #1
        bufstart -= (size_t)1 << more;
   183bc:	2101      	movs	r1, #1
   183be:	fa01 f200 	lsl.w	r2, r1, r0
   183c2:	f10d 010f 	add.w	r1, sp, #15
   183c6:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   183c8:	4403      	add	r3, r0
   183ca:	3318      	adds	r3, #24
   183cc:	700b      	strb	r3, [r1, #0]
   183ce:	e7e2      	b.n	18396 <create_container+0x62>
            ++more;
   183d0:	2001      	movs	r0, #1
   183d2:	e7ed      	b.n	183b0 <create_container+0x7c>

000183d4 <encode_string>:
{
   183d4:	b570      	push	{r4, r5, r6, lr}
   183d6:	b084      	sub	sp, #16
   183d8:	4605      	mov	r5, r0
   183da:	460c      	mov	r4, r1
   183dc:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   183de:	2300      	movs	r3, #0
    ++encoder->added;
   183e0:	6881      	ldr	r1, [r0, #8]
   183e2:	3101      	adds	r1, #1
   183e4:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   183e6:	ba21      	rev	r1, r4
    memcpy(where, &v, sizeof(v));
   183e8:	9302      	str	r3, [sp, #8]
   183ea:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   183ec:	2c18      	cmp	r4, #24
   183ee:	f173 0000 	sbcs.w	r0, r3, #0
   183f2:	d211      	bcs.n	18418 <encode_string+0x44>
        *bufstart += shiftedMajorType;
   183f4:	eb02 6211 	add.w	r2, r2, r1, lsr #24
   183f8:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   183fc:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   18400:	6828      	ldr	r0, [r5, #0]
   18402:	6803      	ldr	r3, [r0, #0]
   18404:	aa04      	add	r2, sp, #16
   18406:	1a52      	subs	r2, r2, r1
   18408:	4798      	blx	r3
   1840a:	6828      	ldr	r0, [r5, #0]
   1840c:	6803      	ldr	r3, [r0, #0]
   1840e:	4622      	mov	r2, r4
   18410:	4631      	mov	r1, r6
   18412:	4798      	blx	r3
}
   18414:	b004      	add	sp, #16
   18416:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   18418:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   1841c:	f173 0100 	sbcs.w	r1, r3, #0
   18420:	d212      	bcs.n	18448 <encode_string+0x74>
        unsigned more = 0;
   18422:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   18426:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1842a:	f173 0300 	sbcs.w	r3, r3, #0
   1842e:	d301      	bcc.n	18434 <encode_string+0x60>
            ++more;
   18430:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   18434:	2101      	movs	r1, #1
   18436:	fa01 f10c 	lsl.w	r1, r1, ip
   1843a:	f10d 000f 	add.w	r0, sp, #15
   1843e:	1a41      	subs	r1, r0, r1
        *bufstart = shiftedMajorType + Value8Bit + more;
   18440:	4462      	add	r2, ip
   18442:	3218      	adds	r2, #24
   18444:	700a      	strb	r2, [r1, #0]
   18446:	e7db      	b.n	18400 <encode_string+0x2c>
            ++more;
   18448:	f04f 0c01 	mov.w	ip, #1
   1844c:	e7eb      	b.n	18426 <encode_string+0x52>

0001844e <cbor_encoder_init>:
    encoder->writer = writer;
   1844e:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   18450:	2300      	movs	r3, #0
   18452:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   18454:	60c2      	str	r2, [r0, #12]
}
   18456:	4770      	bx	lr

00018458 <cbor_encode_uint>:
{
   18458:	b510      	push	{r4, lr}
   1845a:	b084      	sub	sp, #16
    ++encoder->added;
   1845c:	6881      	ldr	r1, [r0, #8]
   1845e:	3101      	adds	r1, #1
   18460:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   18462:	ba11      	rev	r1, r2
   18464:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   18466:	9402      	str	r4, [sp, #8]
   18468:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   1846a:	2a18      	cmp	r2, #24
   1846c:	f173 0400 	sbcs.w	r4, r3, #0
   18470:	d20c      	bcs.n	1848c <cbor_encode_uint+0x34>
        *bufstart += shiftedMajorType;
   18472:	f3c1 6107 	ubfx	r1, r1, #24, #8
   18476:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   1847a:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   1847e:	6800      	ldr	r0, [r0, #0]
   18480:	6803      	ldr	r3, [r0, #0]
   18482:	aa04      	add	r2, sp, #16
   18484:	1a52      	subs	r2, r2, r1
   18486:	4798      	blx	r3
}
   18488:	b004      	add	sp, #16
   1848a:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   1848c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   18490:	f173 0100 	sbcs.w	r1, r3, #0
   18494:	d21d      	bcs.n	184d2 <cbor_encode_uint+0x7a>
        unsigned more = 0;
   18496:	f04f 0c00 	mov.w	ip, #0
        if (ui > 0xffffU)
   1849a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1849e:	f173 0100 	sbcs.w	r1, r3, #0
   184a2:	d301      	bcc.n	184a8 <cbor_encode_uint+0x50>
            ++more;
   184a4:	f10c 0c01 	add.w	ip, ip, #1
        if (ui > 0xffffffffU)
   184a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   184ac:	4291      	cmp	r1, r2
   184ae:	f04f 0200 	mov.w	r2, #0
   184b2:	eb72 0303 	sbcs.w	r3, r2, r3
   184b6:	d201      	bcs.n	184bc <cbor_encode_uint+0x64>
            ++more;
   184b8:	f10c 0c01 	add.w	ip, ip, #1
        bufstart -= (size_t)1 << more;
   184bc:	2101      	movs	r1, #1
   184be:	fa01 f30c 	lsl.w	r3, r1, ip
   184c2:	f10d 010f 	add.w	r1, sp, #15
   184c6:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   184c8:	f10c 0c18 	add.w	ip, ip, #24
   184cc:	f881 c000 	strb.w	ip, [r1]
   184d0:	e7d5      	b.n	1847e <cbor_encode_uint+0x26>
            ++more;
   184d2:	f04f 0c01 	mov.w	ip, #1
   184d6:	e7e0      	b.n	1849a <cbor_encode_uint+0x42>

000184d8 <cbor_encode_int>:
{
   184d8:	b510      	push	{r4, lr}
   184da:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   184dc:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   184de:	f001 0c20 	and.w	ip, r1, #32
    ui ^= value;                            /* complement negatives */
   184e2:	404a      	eors	r2, r1
   184e4:	404b      	eors	r3, r1
    ++encoder->added;
   184e6:	6881      	ldr	r1, [r0, #8]
   184e8:	3101      	adds	r1, #1
   184ea:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   184ec:	ba11      	rev	r1, r2
   184ee:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   184f0:	9402      	str	r4, [sp, #8]
   184f2:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   184f4:	2a18      	cmp	r2, #24
   184f6:	f173 0400 	sbcs.w	r4, r3, #0
   184fa:	d20c      	bcs.n	18516 <cbor_encode_int+0x3e>
        *bufstart += shiftedMajorType;
   184fc:	eb0c 6111 	add.w	r1, ip, r1, lsr #24
   18500:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   18504:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   18508:	6800      	ldr	r0, [r0, #0]
   1850a:	6803      	ldr	r3, [r0, #0]
   1850c:	aa04      	add	r2, sp, #16
   1850e:	1a52      	subs	r2, r2, r1
   18510:	4798      	blx	r3
}
   18512:	b004      	add	sp, #16
   18514:	bd10      	pop	{r4, pc}
        if (ui > 0xffU)
   18516:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1851a:	f173 0100 	sbcs.w	r1, r3, #0
   1851e:	d21e      	bcs.n	1855e <cbor_encode_int+0x86>
        unsigned more = 0;
   18520:	f04f 0e00 	mov.w	lr, #0
        if (ui > 0xffffU)
   18524:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   18528:	f173 0100 	sbcs.w	r1, r3, #0
   1852c:	d301      	bcc.n	18532 <cbor_encode_int+0x5a>
            ++more;
   1852e:	f10e 0e01 	add.w	lr, lr, #1
        if (ui > 0xffffffffU)
   18532:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18536:	4291      	cmp	r1, r2
   18538:	f04f 0200 	mov.w	r2, #0
   1853c:	eb72 0303 	sbcs.w	r3, r2, r3
   18540:	d201      	bcs.n	18546 <cbor_encode_int+0x6e>
            ++more;
   18542:	f10e 0e01 	add.w	lr, lr, #1
        bufstart -= (size_t)1 << more;
   18546:	2101      	movs	r1, #1
   18548:	fa01 f30e 	lsl.w	r3, r1, lr
   1854c:	f10d 010f 	add.w	r1, sp, #15
   18550:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   18552:	44f4      	add	ip, lr
   18554:	f10c 0c18 	add.w	ip, ip, #24
   18558:	f881 c000 	strb.w	ip, [r1]
   1855c:	e7d4      	b.n	18508 <cbor_encode_int+0x30>
            ++more;
   1855e:	f04f 0e01 	mov.w	lr, #1
   18562:	e7df      	b.n	18524 <cbor_encode_int+0x4c>

00018564 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   18564:	f1a1 0319 	sub.w	r3, r1, #25
   18568:	b2db      	uxtb	r3, r3
   1856a:	2b06      	cmp	r3, #6
   1856c:	d925      	bls.n	185ba <cbor_encode_simple_value+0x56>
{
   1856e:	b500      	push	{lr}
   18570:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   18572:	2200      	movs	r2, #0
    ++encoder->added;
   18574:	6883      	ldr	r3, [r0, #8]
   18576:	3301      	adds	r3, #1
   18578:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   1857a:	ba0b      	rev	r3, r1
    memcpy(where, &v, sizeof(v));
   1857c:	9202      	str	r2, [sp, #8]
   1857e:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   18580:	2918      	cmp	r1, #24
   18582:	f172 0200 	sbcs.w	r2, r2, #0
   18586:	d20e      	bcs.n	185a6 <cbor_encode_simple_value+0x42>
        *bufstart += shiftedMajorType;
   18588:	f3c3 6307 	ubfx	r3, r3, #24, #8
   1858c:	3b20      	subs	r3, #32
   1858e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   18592:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   18596:	6800      	ldr	r0, [r0, #0]
   18598:	6803      	ldr	r3, [r0, #0]
   1859a:	aa04      	add	r2, sp, #16
   1859c:	1a52      	subs	r2, r2, r1
   1859e:	4798      	blx	r3
}
   185a0:	b005      	add	sp, #20
   185a2:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned more = 0;
   185a6:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   185a8:	2101      	movs	r1, #1
   185aa:	fa01 f203 	lsl.w	r2, r1, r3
   185ae:	f10d 010f 	add.w	r1, sp, #15
   185b2:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   185b4:	3b08      	subs	r3, #8
   185b6:	700b      	strb	r3, [r1, #0]
   185b8:	e7ed      	b.n	18596 <cbor_encode_simple_value+0x32>
        return CborErrorIllegalSimpleType;
   185ba:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   185be:	4770      	bx	lr

000185c0 <cbor_encode_byte_string>:
{
   185c0:	b508      	push	{r3, lr}
   185c2:	460b      	mov	r3, r1
   185c4:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   185c6:	2240      	movs	r2, #64	; 0x40
   185c8:	f7ff ff04 	bl	183d4 <encode_string>
}
   185cc:	bd08      	pop	{r3, pc}

000185ce <cbor_encode_text_string>:
{
   185ce:	b508      	push	{r3, lr}
   185d0:	460b      	mov	r3, r1
   185d2:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   185d4:	2260      	movs	r2, #96	; 0x60
   185d6:	f7ff fefd 	bl	183d4 <encode_string>
}
   185da:	bd08      	pop	{r3, pc}

000185dc <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   185dc:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   185de:	2380      	movs	r3, #128	; 0x80
   185e0:	f7ff fea8 	bl	18334 <create_container>
}
   185e4:	bd08      	pop	{r3, pc}

000185e6 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   185e6:	b508      	push	{r3, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   185e8:	f102 4c00 	add.w	ip, r2, #2147483648	; 0x80000000
   185ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   185f0:	459c      	cmp	ip, r3
   185f2:	d303      	bcc.n	185fc <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   185f4:	23a0      	movs	r3, #160	; 0xa0
   185f6:	f7ff fe9d 	bl	18334 <create_container>
}
   185fa:	bd08      	pop	{r3, pc}
        return CborErrorDataTooLarge;
   185fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18600:	e7fb      	b.n	185fa <cbor_encoder_create_map+0x14>

00018602 <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   18602:	680b      	ldr	r3, [r1, #0]
   18604:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   18606:	68cb      	ldr	r3, [r1, #12]
   18608:	f013 0f04 	tst.w	r3, #4
   1860c:	d101      	bne.n	18612 <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   1860e:	2000      	movs	r0, #0
}
   18610:	4770      	bx	lr
{
   18612:	b500      	push	{lr}
   18614:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   18616:	23ff      	movs	r3, #255	; 0xff
   18618:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   1861c:	6800      	ldr	r0, [r0, #0]
   1861e:	6803      	ldr	r3, [r0, #0]
   18620:	2201      	movs	r2, #1
   18622:	f10d 0107 	add.w	r1, sp, #7
   18626:	4798      	blx	r3
}
   18628:	b003      	add	sp, #12
   1862a:	f85d fb04 	ldr.w	pc, [sp], #4

0001862e <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1862e:	2860      	cmp	r0, #96	; 0x60
   18630:	d009      	beq.n	18646 <is_fixed_type+0x18>
   18632:	2840      	cmp	r0, #64	; 0x40
   18634:	d009      	beq.n	1864a <is_fixed_type+0x1c>
   18636:	2880      	cmp	r0, #128	; 0x80
   18638:	d009      	beq.n	1864e <is_fixed_type+0x20>
   1863a:	28a0      	cmp	r0, #160	; 0xa0
   1863c:	d001      	beq.n	18642 <is_fixed_type+0x14>
   1863e:	2001      	movs	r0, #1
           type != CborMapType;
}
   18640:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   18642:	2000      	movs	r0, #0
   18644:	4770      	bx	lr
   18646:	2000      	movs	r0, #0
   18648:	4770      	bx	lr
   1864a:	2000      	movs	r0, #0
   1864c:	4770      	bx	lr
   1864e:	2000      	movs	r0, #0
   18650:	4770      	bx	lr

00018652 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   18652:	2001      	movs	r0, #1
   18654:	4770      	bx	lr

00018656 <preparse_value>:
{
   18656:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   18658:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   1865a:	23ff      	movs	r3, #255	; 0xff
   1865c:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   1865e:	6841      	ldr	r1, [r0, #4]
   18660:	686b      	ldr	r3, [r5, #4]
   18662:	4299      	cmp	r1, r3
   18664:	f000 8089 	beq.w	1877a <preparse_value+0x124>
   18668:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   1866a:	6828      	ldr	r0, [r5, #0]
   1866c:	6803      	ldr	r3, [r0, #0]
   1866e:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   18670:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   18674:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   18676:	2300      	movs	r3, #0
   18678:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   1867a:	f000 031f 	and.w	r3, r0, #31
   1867e:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   18680:	2b1b      	cmp	r3, #27
   18682:	d91d      	bls.n	186c0 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   18684:	2b1f      	cmp	r3, #31
   18686:	d10b      	bne.n	186a0 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   18688:	4630      	mov	r0, r6
   1868a:	f7ff ffd0 	bl	1862e <is_fixed_type>
   1868e:	f080 0001 	eor.w	r0, r0, #1
   18692:	f010 0fff 	tst.w	r0, #255	; 0xff
   18696:	d00b      	beq.n	186b0 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   18698:	2304      	movs	r3, #4
   1869a:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   1869c:	2000      	movs	r0, #0
}
   1869e:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   186a0:	2ee0      	cmp	r6, #224	; 0xe0
   186a2:	d002      	beq.n	186aa <preparse_value+0x54>
   186a4:	f240 1005 	movw	r0, #261	; 0x105
   186a8:	e7f9      	b.n	1869e <preparse_value+0x48>
   186aa:	f240 1003 	movw	r0, #259	; 0x103
   186ae:	e7f6      	b.n	1869e <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   186b0:	2ee0      	cmp	r6, #224	; 0xe0
   186b2:	d002      	beq.n	186ba <preparse_value+0x64>
   186b4:	f240 1005 	movw	r0, #261	; 0x105
   186b8:	e7f1      	b.n	1869e <preparse_value+0x48>
   186ba:	f44f 7081 	mov.w	r0, #258	; 0x102
   186be:	e7ee      	b.n	1869e <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   186c0:	2b17      	cmp	r3, #23
   186c2:	d91a      	bls.n	186fa <preparse_value+0xa4>
   186c4:	f1a3 0118 	sub.w	r1, r3, #24
   186c8:	2201      	movs	r2, #1
   186ca:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   186cc:	3201      	adds	r2, #1
   186ce:	6868      	ldr	r0, [r5, #4]
   186d0:	6861      	ldr	r1, [r4, #4]
   186d2:	1a40      	subs	r0, r0, r1
   186d4:	4282      	cmp	r2, r0
   186d6:	d853      	bhi.n	18780 <preparse_value+0x12a>
    uint8_t majortype = type >> MajorTypeShift;
   186d8:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   186da:	2e20      	cmp	r6, #32
   186dc:	d00f      	beq.n	186fe <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   186de:	2a07      	cmp	r2, #7
   186e0:	d012      	beq.n	18708 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   186e2:	2b17      	cmp	r3, #23
   186e4:	d94f      	bls.n	18786 <preparse_value+0x130>
    if (descriptor == Value8Bit)
   186e6:	2b18      	cmp	r3, #24
   186e8:	d039      	beq.n	1875e <preparse_value+0x108>
    else if (descriptor == Value16Bit)
   186ea:	2b19      	cmp	r3, #25
   186ec:	d03e      	beq.n	1876c <preparse_value+0x116>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   186ee:	7be3      	ldrb	r3, [r4, #15]
   186f0:	f043 0301 	orr.w	r3, r3, #1
   186f4:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   186f6:	2000      	movs	r0, #0
   186f8:	e7d1      	b.n	1869e <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   186fa:	2200      	movs	r2, #0
   186fc:	e7e6      	b.n	186cc <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   186fe:	2202      	movs	r2, #2
   18700:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   18702:	2200      	movs	r2, #0
   18704:	73a2      	strb	r2, [r4, #14]
   18706:	e7ec      	b.n	186e2 <preparse_value+0x8c>
        switch (descriptor) {
   18708:	3b14      	subs	r3, #20
   1870a:	2b0b      	cmp	r3, #11
   1870c:	d812      	bhi.n	18734 <preparse_value+0xde>
   1870e:	e8df f003 	tbb	[pc, r3]
   18712:	0d06      	.short	0x0d06
   18714:	0d130d0d 	.word	0x0d130d0d
   18718:	20200b0b 	.word	0x20200b0b
   1871c:	2020      	.short	0x2020
            it->extra = false;
   1871e:	2300      	movs	r3, #0
   18720:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   18722:	23f5      	movs	r3, #245	; 0xf5
   18724:	73a3      	strb	r3, [r4, #14]
            break;
   18726:	e005      	b.n	18734 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   18728:	2301      	movs	r3, #1
   1872a:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   1872c:	6828      	ldr	r0, [r5, #0]
   1872e:	6803      	ldr	r3, [r0, #0]
   18730:	4798      	blx	r3
   18732:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   18734:	2000      	movs	r0, #0
   18736:	e7b2      	b.n	1869e <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   18738:	6828      	ldr	r0, [r5, #0]
   1873a:	6803      	ldr	r3, [r0, #0]
   1873c:	3101      	adds	r1, #1
   1873e:	4798      	blx	r3
   18740:	b283      	uxth	r3, r0
   18742:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   18744:	2b1f      	cmp	r3, #31
   18746:	d8f5      	bhi.n	18734 <preparse_value+0xde>
                it->type = CborInvalidType;
   18748:	23ff      	movs	r3, #255	; 0xff
   1874a:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   1874c:	f44f 7083 	mov.w	r0, #262	; 0x106
   18750:	e7a5      	b.n	1869e <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   18752:	2300      	movs	r3, #0
   18754:	461a      	mov	r2, r3
   18756:	4619      	mov	r1, r3
   18758:	4618      	mov	r0, r3
   1875a:	f7f0 fd33 	bl	91c4 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   1875e:	6828      	ldr	r0, [r5, #0]
   18760:	6803      	ldr	r3, [r0, #0]
   18762:	3101      	adds	r1, #1
   18764:	4798      	blx	r3
   18766:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   18768:	2000      	movs	r0, #0
   1876a:	e798      	b.n	1869e <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   1876c:	6828      	ldr	r0, [r5, #0]
   1876e:	6843      	ldr	r3, [r0, #4]
   18770:	3101      	adds	r1, #1
   18772:	4798      	blx	r3
   18774:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   18776:	2000      	movs	r0, #0
   18778:	e791      	b.n	1869e <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   1877a:	f240 1001 	movw	r0, #257	; 0x101
   1877e:	e78e      	b.n	1869e <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   18780:	f240 1001 	movw	r0, #257	; 0x101
   18784:	e78b      	b.n	1869e <preparse_value+0x48>
        return CborNoError;
   18786:	2000      	movs	r0, #0
   18788:	e789      	b.n	1869e <preparse_value+0x48>

0001878a <preparse_next_value>:
{
   1878a:	b510      	push	{r4, lr}
   1878c:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   1878e:	6880      	ldr	r0, [r0, #8]
   18790:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18794:	d00c      	beq.n	187b0 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   18796:	7ba2      	ldrb	r2, [r4, #14]
   18798:	2ac0      	cmp	r2, #192	; 0xc0
   1879a:	d002      	beq.n	187a2 <preparse_next_value+0x18>
   1879c:	3801      	subs	r0, #1
   1879e:	60a0      	str	r0, [r4, #8]
   187a0:	b118      	cbz	r0, 187aa <preparse_next_value+0x20>
    return preparse_value(it);
   187a2:	4620      	mov	r0, r4
   187a4:	f7ff ff57 	bl	18656 <preparse_value>
}
   187a8:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   187aa:	23ff      	movs	r3, #255	; 0xff
   187ac:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   187ae:	e7fb      	b.n	187a8 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   187b0:	6861      	ldr	r1, [r4, #4]
   187b2:	6823      	ldr	r3, [r4, #0]
   187b4:	685a      	ldr	r2, [r3, #4]
   187b6:	4291      	cmp	r1, r2
   187b8:	d0f3      	beq.n	187a2 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   187ba:	6818      	ldr	r0, [r3, #0]
   187bc:	6803      	ldr	r3, [r0, #0]
   187be:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   187c0:	28ff      	cmp	r0, #255	; 0xff
   187c2:	d1ee      	bne.n	187a2 <preparse_next_value+0x18>
        ++it->offset;
   187c4:	6863      	ldr	r3, [r4, #4]
   187c6:	3301      	adds	r3, #1
   187c8:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   187ca:	23ff      	movs	r3, #255	; 0xff
   187cc:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   187ce:	2000      	movs	r0, #0
   187d0:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   187d2:	e7e9      	b.n	187a8 <preparse_next_value+0x1e>

000187d4 <extract_length>:
{
   187d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   187d6:	4607      	mov	r7, r0
   187d8:	460c      	mov	r4, r1
   187da:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   187dc:	6800      	ldr	r0, [r0, #0]
   187de:	6803      	ldr	r3, [r0, #0]
   187e0:	6809      	ldr	r1, [r1, #0]
   187e2:	4798      	blx	r3
   187e4:	f000 031f 	and.w	r3, r0, #31
    ++*offset;
   187e8:	6822      	ldr	r2, [r4, #0]
   187ea:	3201      	adds	r2, #1
   187ec:	6022      	str	r2, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   187ee:	2b17      	cmp	r3, #23
   187f0:	d914      	bls.n	1881c <extract_length+0x48>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   187f2:	2b1b      	cmp	r3, #27
   187f4:	d82e      	bhi.n	18854 <extract_length+0x80>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   187f6:	3b18      	subs	r3, #24
   187f8:	2601      	movs	r6, #1
   187fa:	409e      	lsls	r6, r3
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   187fc:	687b      	ldr	r3, [r7, #4]
   187fe:	6821      	ldr	r1, [r4, #0]
   18800:	1a5b      	subs	r3, r3, r1
   18802:	429e      	cmp	r6, r3
   18804:	d82b      	bhi.n	1885e <extract_length+0x8a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   18806:	2e01      	cmp	r6, #1
   18808:	d00b      	beq.n	18822 <extract_length+0x4e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   1880a:	2e02      	cmp	r6, #2
   1880c:	d016      	beq.n	1883c <extract_length+0x68>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   1880e:	2e04      	cmp	r6, #4
   18810:	d01a      	beq.n	18848 <extract_length+0x74>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   18812:	6838      	ldr	r0, [r7, #0]
   18814:	68c3      	ldr	r3, [r0, #12]
   18816:	4798      	blx	r3
   18818:	4603      	mov	r3, r0
   1881a:	e007      	b.n	1882c <extract_length+0x58>
        *len = additional_information;
   1881c:	2000      	movs	r0, #0
   1881e:	4601      	mov	r1, r0
        return CborNoError;
   18820:	e008      	b.n	18834 <extract_length+0x60>
        *len = p->d->get8(p->d, *offset);
   18822:	6838      	ldr	r0, [r7, #0]
   18824:	6803      	ldr	r3, [r0, #0]
   18826:	4798      	blx	r3
   18828:	4603      	mov	r3, r0
   1882a:	2100      	movs	r1, #0
    }
    *offset += bytesNeeded;
   1882c:	6822      	ldr	r2, [r4, #0]
   1882e:	4432      	add	r2, r6
   18830:	6022      	str	r2, [r4, #0]
    return CborNoError;
   18832:	2000      	movs	r0, #0
    if (err) {
   18834:	b9c0      	cbnz	r0, 18868 <extract_length+0x94>
    *len = v;
   18836:	602b      	str	r3, [r5, #0]
    if (v != *len)
   18838:	b9c9      	cbnz	r1, 1886e <extract_length+0x9a>
}
   1883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *len =  p->d->get16(p->d, *offset);
   1883c:	6838      	ldr	r0, [r7, #0]
   1883e:	6843      	ldr	r3, [r0, #4]
   18840:	4798      	blx	r3
   18842:	4603      	mov	r3, r0
   18844:	2100      	movs	r1, #0
   18846:	e7f1      	b.n	1882c <extract_length+0x58>
        *len =  p->d->get32(p->d, *offset);
   18848:	6838      	ldr	r0, [r7, #0]
   1884a:	6883      	ldr	r3, [r0, #8]
   1884c:	4798      	blx	r3
   1884e:	4603      	mov	r3, r0
   18850:	2100      	movs	r1, #0
   18852:	e7eb      	b.n	1882c <extract_length+0x58>
    *len = 1;
   18854:	2301      	movs	r3, #1
   18856:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   18858:	f240 1005 	movw	r0, #261	; 0x105
   1885c:	e7ea      	b.n	18834 <extract_length+0x60>
    *len = 1;
   1885e:	2301      	movs	r3, #1
   18860:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   18862:	f240 1001 	movw	r0, #257	; 0x101
   18866:	e7e5      	b.n	18834 <extract_length+0x60>
        *len = 0;
   18868:	2300      	movs	r3, #0
   1886a:	602b      	str	r3, [r5, #0]
        return err;
   1886c:	e7e5      	b.n	1883a <extract_length+0x66>
        return CborErrorDataTooLarge;
   1886e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18872:	e7e2      	b.n	1883a <extract_length+0x66>

00018874 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   18874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18878:	b085      	sub	sp, #20
   1887a:	4604      	mov	r4, r0
   1887c:	4689      	mov	r9, r1
   1887e:	4616      	mov	r6, r2
   18880:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   18882:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   18884:	2b40      	cmp	r3, #64	; 0x40
   18886:	d001      	beq.n	1888c <iterate_string_chunks+0x18>
   18888:	2b60      	cmp	r3, #96	; 0x60
   1888a:	d10c      	bne.n	188a6 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   1888c:	6863      	ldr	r3, [r4, #4]
   1888e:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   18890:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   18892:	f012 0f04 	tst.w	r2, #4
   18896:	d00c      	beq.n	188b2 <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   18898:	3301      	adds	r3, #1
   1889a:	9302      	str	r3, [sp, #8]
        total = 0;
   1889c:	2300      	movs	r3, #0
   1889e:	9303      	str	r3, [sp, #12]
        *result = true;
   188a0:	2301      	movs	r3, #1
   188a2:	702b      	strb	r3, [r5, #0]
   188a4:	e048      	b.n	18938 <iterate_string_chunks+0xc4>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   188a6:	2300      	movs	r3, #0
   188a8:	461a      	mov	r2, r3
   188aa:	4619      	mov	r1, r3
   188ac:	4618      	mov	r0, r3
   188ae:	f7f0 fc89 	bl	91c4 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   188b2:	aa03      	add	r2, sp, #12
   188b4:	a902      	add	r1, sp, #8
   188b6:	6820      	ldr	r0, [r4, #0]
   188b8:	f7ff ff8c 	bl	187d4 <extract_length>
        if (err)
   188bc:	4603      	mov	r3, r0
   188be:	2800      	cmp	r0, #0
   188c0:	d178      	bne.n	189b4 <iterate_string_chunks+0x140>
        if (total > (size_t)(value->parser->end - offset))
   188c2:	6820      	ldr	r0, [r4, #0]
   188c4:	6843      	ldr	r3, [r0, #4]
   188c6:	9a02      	ldr	r2, [sp, #8]
   188c8:	1a99      	subs	r1, r3, r2
   188ca:	9b03      	ldr	r3, [sp, #12]
   188cc:	4299      	cmp	r1, r3
   188ce:	f0c0 8084 	bcc.w	189da <iterate_string_chunks+0x166>
        if (total <= *buflen)
   188d2:	6831      	ldr	r1, [r6, #0]
   188d4:	428b      	cmp	r3, r1
   188d6:	d81e      	bhi.n	18916 <iterate_string_chunks+0xa2>
            *result = !!func(value->parser->d, buffer, offset, total);
   188d8:	4649      	mov	r1, r9
   188da:	6800      	ldr	r0, [r0, #0]
   188dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   188de:	47b8      	blx	r7
   188e0:	3800      	subs	r0, #0
   188e2:	bf18      	it	ne
   188e4:	2001      	movne	r0, #1
   188e6:	7028      	strb	r0, [r5, #0]
        offset += total;
   188e8:	9b02      	ldr	r3, [sp, #8]
   188ea:	9a03      	ldr	r2, [sp, #12]
   188ec:	4413      	add	r3, r2
   188ee:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   188f0:	782b      	ldrb	r3, [r5, #0]
   188f2:	b14b      	cbz	r3, 18908 <iterate_string_chunks+0x94>
   188f4:	6832      	ldr	r2, [r6, #0]
   188f6:	9b03      	ldr	r3, [sp, #12]
   188f8:	429a      	cmp	r2, r3
   188fa:	d905      	bls.n	18908 <iterate_string_chunks+0x94>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   188fc:	f1b9 0f00 	cmp.w	r9, #0
   18900:	d002      	beq.n	18908 <iterate_string_chunks+0x94>
            *(buffer + total) = '\0';
   18902:	2200      	movs	r2, #0
   18904:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   18908:	9b03      	ldr	r3, [sp, #12]
   1890a:	6033      	str	r3, [r6, #0]

    if (next) {
   1890c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1890e:	2b00      	cmp	r3, #0
   18910:	d157      	bne.n	189c2 <iterate_string_chunks+0x14e>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   18912:	2300      	movs	r3, #0
   18914:	e04e      	b.n	189b4 <iterate_string_chunks+0x140>
            *result = false;
   18916:	2300      	movs	r3, #0
   18918:	702b      	strb	r3, [r5, #0]
   1891a:	e7e5      	b.n	188e8 <iterate_string_chunks+0x74>
                ++offset;
   1891c:	9b02      	ldr	r3, [sp, #8]
   1891e:	3301      	adds	r3, #1
   18920:	9302      	str	r3, [sp, #8]
                break;
   18922:	e7e5      	b.n	188f0 <iterate_string_chunks+0x7c>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   18924:	2201      	movs	r2, #1
   18926:	e023      	b.n	18970 <iterate_string_chunks+0xfc>
                *result = false;
   18928:	2300      	movs	r3, #0
   1892a:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   1892c:	9b02      	ldr	r3, [sp, #8]
   1892e:	9a01      	ldr	r2, [sp, #4]
   18930:	4413      	add	r3, r2
   18932:	9302      	str	r3, [sp, #8]
            total = newTotal;
   18934:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   18938:	6823      	ldr	r3, [r4, #0]
   1893a:	685a      	ldr	r2, [r3, #4]
   1893c:	9902      	ldr	r1, [sp, #8]
   1893e:	428a      	cmp	r2, r1
   18940:	d030      	beq.n	189a4 <iterate_string_chunks+0x130>
            val = value->parser->d->get8(value->parser->d, offset);
   18942:	6818      	ldr	r0, [r3, #0]
   18944:	6803      	ldr	r3, [r0, #0]
   18946:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   18948:	28ff      	cmp	r0, #255	; 0xff
   1894a:	d0e7      	beq.n	1891c <iterate_string_chunks+0xa8>
            if ((val & MajorTypeMask) != value->type)
   1894c:	f020 001f 	bic.w	r0, r0, #31
   18950:	7ba3      	ldrb	r3, [r4, #14]
   18952:	4298      	cmp	r0, r3
   18954:	d129      	bne.n	189aa <iterate_string_chunks+0x136>
            err = extract_length(value->parser, &offset, &chunkLen);
   18956:	aa01      	add	r2, sp, #4
   18958:	a902      	add	r1, sp, #8
   1895a:	6820      	ldr	r0, [r4, #0]
   1895c:	f7ff ff3a 	bl	187d4 <extract_length>
            if (err)
   18960:	4603      	mov	r3, r0
   18962:	bb38      	cbnz	r0, 189b4 <iterate_string_chunks+0x140>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   18964:	9803      	ldr	r0, [sp, #12]
   18966:	9b01      	ldr	r3, [sp, #4]
   18968:	2200      	movs	r2, #0
   1896a:	eb10 0803 	adds.w	r8, r0, r3
   1896e:	d2d9      	bcs.n	18924 <iterate_string_chunks+0xb0>
   18970:	b9f2      	cbnz	r2, 189b0 <iterate_string_chunks+0x13c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   18972:	f8d4 c000 	ldr.w	ip, [r4]
   18976:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1897a:	9a02      	ldr	r2, [sp, #8]
   1897c:	1a89      	subs	r1, r1, r2
   1897e:	428b      	cmp	r3, r1
   18980:	d81c      	bhi.n	189bc <iterate_string_chunks+0x148>
            if (*result && *buflen >= newTotal)
   18982:	7829      	ldrb	r1, [r5, #0]
   18984:	2900      	cmp	r1, #0
   18986:	d0cf      	beq.n	18928 <iterate_string_chunks+0xb4>
   18988:	6831      	ldr	r1, [r6, #0]
   1898a:	4541      	cmp	r1, r8
   1898c:	d3cc      	bcc.n	18928 <iterate_string_chunks+0xb4>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   1898e:	eb09 0100 	add.w	r1, r9, r0
   18992:	f8dc 0000 	ldr.w	r0, [ip]
   18996:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   18998:	47b8      	blx	r7
   1899a:	3800      	subs	r0, #0
   1899c:	bf18      	it	ne
   1899e:	2001      	movne	r0, #1
   189a0:	7028      	strb	r0, [r5, #0]
   189a2:	e7c3      	b.n	1892c <iterate_string_chunks+0xb8>
                return CborErrorUnexpectedEOF;
   189a4:	f240 1301 	movw	r3, #257	; 0x101
   189a8:	e004      	b.n	189b4 <iterate_string_chunks+0x140>
                return CborErrorIllegalType;
   189aa:	f44f 7382 	mov.w	r3, #260	; 0x104
   189ae:	e001      	b.n	189b4 <iterate_string_chunks+0x140>
                return CborErrorDataTooLarge;
   189b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   189b4:	4618      	mov	r0, r3
   189b6:	b005      	add	sp, #20
   189b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   189bc:	f240 1301 	movw	r3, #257	; 0x101
   189c0:	e7f8      	b.n	189b4 <iterate_string_chunks+0x140>
        *next = *value;
   189c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   189c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   189c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   189cc:	9b02      	ldr	r3, [sp, #8]
   189ce:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   189d0:	4620      	mov	r0, r4
   189d2:	f7ff feda 	bl	1878a <preparse_next_value>
   189d6:	4603      	mov	r3, r0
   189d8:	e7ec      	b.n	189b4 <iterate_string_chunks+0x140>
            return CborErrorUnexpectedEOF;
   189da:	f240 1301 	movw	r3, #257	; 0x101
   189de:	e7e9      	b.n	189b4 <iterate_string_chunks+0x140>

000189e0 <advance_internal>:
{
   189e0:	b570      	push	{r4, r5, r6, lr}
   189e2:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   189e4:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   189e6:	6830      	ldr	r0, [r6, #0]
   189e8:	6803      	ldr	r3, [r0, #0]
   189ea:	6861      	ldr	r1, [r4, #4]
   189ec:	4798      	blx	r3
   189ee:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   189f2:	6863      	ldr	r3, [r4, #4]
   189f4:	3301      	adds	r3, #1
   189f6:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   189f8:	2817      	cmp	r0, #23
   189fa:	d913      	bls.n	18a24 <advance_internal+0x44>
    if (unlikely(additional_information > Value64Bit))
   189fc:	281b      	cmp	r0, #27
   189fe:	d838      	bhi.n	18a72 <advance_internal+0x92>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   18a00:	3818      	subs	r0, #24
   18a02:	2501      	movs	r5, #1
   18a04:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   18a06:	6873      	ldr	r3, [r6, #4]
   18a08:	6861      	ldr	r1, [r4, #4]
   18a0a:	1a5b      	subs	r3, r3, r1
   18a0c:	429d      	cmp	r5, r3
   18a0e:	d835      	bhi.n	18a7c <advance_internal+0x9c>
    } else if (bytesNeeded == 1) {
   18a10:	2d01      	cmp	r5, #1
   18a12:	d00a      	beq.n	18a2a <advance_internal+0x4a>
    } else if (bytesNeeded == 2) {
   18a14:	2d02      	cmp	r5, #2
   18a16:	d022      	beq.n	18a5e <advance_internal+0x7e>
    } else if (bytesNeeded == 4) {
   18a18:	2d04      	cmp	r5, #4
   18a1a:	d025      	beq.n	18a68 <advance_internal+0x88>
        *len =  p->d->get64(p->d, *offset);
   18a1c:	6830      	ldr	r0, [r6, #0]
   18a1e:	68c3      	ldr	r3, [r0, #12]
   18a20:	4798      	blx	r3
   18a22:	e006      	b.n	18a32 <advance_internal+0x52>
        *len = additional_information;
   18a24:	2300      	movs	r3, #0
   18a26:	4619      	mov	r1, r3
        return CborNoError;
   18a28:	e007      	b.n	18a3a <advance_internal+0x5a>
        *len = p->d->get8(p->d, *offset);
   18a2a:	6830      	ldr	r0, [r6, #0]
   18a2c:	6803      	ldr	r3, [r0, #0]
   18a2e:	4798      	blx	r3
   18a30:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   18a32:	6863      	ldr	r3, [r4, #4]
   18a34:	442b      	add	r3, r5
   18a36:	6063      	str	r3, [r4, #4]
    return CborNoError;
   18a38:	2300      	movs	r3, #0
    assert(err == CborNoError);
   18a3a:	bb23      	cbnz	r3, 18a86 <advance_internal+0xa6>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   18a3c:	7ba3      	ldrb	r3, [r4, #14]
   18a3e:	2b40      	cmp	r3, #64	; 0x40
   18a40:	d001      	beq.n	18a46 <advance_internal+0x66>
   18a42:	2b60      	cmp	r3, #96	; 0x60
   18a44:	d107      	bne.n	18a56 <advance_internal+0x76>
        assert(length == (size_t)length);
   18a46:	bb21      	cbnz	r1, 18a92 <advance_internal+0xb2>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   18a48:	7be3      	ldrb	r3, [r4, #15]
   18a4a:	f013 0f04 	tst.w	r3, #4
   18a4e:	d126      	bne.n	18a9e <advance_internal+0xbe>
        it->offset += length;
   18a50:	6863      	ldr	r3, [r4, #4]
   18a52:	4418      	add	r0, r3
   18a54:	6060      	str	r0, [r4, #4]
    return preparse_next_value(it);
   18a56:	4620      	mov	r0, r4
   18a58:	f7ff fe97 	bl	1878a <preparse_next_value>
}
   18a5c:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   18a5e:	6830      	ldr	r0, [r6, #0]
   18a60:	6843      	ldr	r3, [r0, #4]
   18a62:	4798      	blx	r3
   18a64:	2100      	movs	r1, #0
   18a66:	e7e4      	b.n	18a32 <advance_internal+0x52>
        *len =  p->d->get32(p->d, *offset);
   18a68:	6830      	ldr	r0, [r6, #0]
   18a6a:	6883      	ldr	r3, [r0, #8]
   18a6c:	4798      	blx	r3
   18a6e:	2100      	movs	r1, #0
   18a70:	e7df      	b.n	18a32 <advance_internal+0x52>
    *len = 1;
   18a72:	2001      	movs	r0, #1
   18a74:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   18a76:	f240 1305 	movw	r3, #261	; 0x105
   18a7a:	e7de      	b.n	18a3a <advance_internal+0x5a>
    *len = 1;
   18a7c:	2001      	movs	r0, #1
   18a7e:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   18a80:	f240 1301 	movw	r3, #257	; 0x101
   18a84:	e7d9      	b.n	18a3a <advance_internal+0x5a>
    assert(err == CborNoError);
   18a86:	2300      	movs	r3, #0
   18a88:	461a      	mov	r2, r3
   18a8a:	4619      	mov	r1, r3
   18a8c:	4618      	mov	r0, r3
   18a8e:	f7f0 fb99 	bl	91c4 <__assert_func>
        assert(length == (size_t)length);
   18a92:	2300      	movs	r3, #0
   18a94:	461a      	mov	r2, r3
   18a96:	4619      	mov	r1, r3
   18a98:	4618      	mov	r0, r3
   18a9a:	f7f0 fb93 	bl	91c4 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   18a9e:	2300      	movs	r3, #0
   18aa0:	461a      	mov	r2, r3
   18aa2:	4619      	mov	r1, r3
   18aa4:	4618      	mov	r0, r3
   18aa6:	f7f0 fb8d 	bl	91c4 <__assert_func>

00018aaa <_cbor_value_decode_int64_internal>:
{
   18aaa:	b510      	push	{r4, lr}
   18aac:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   18aae:	6803      	ldr	r3, [r0, #0]
   18ab0:	6818      	ldr	r0, [r3, #0]
   18ab2:	6803      	ldr	r3, [r0, #0]
   18ab4:	6861      	ldr	r1, [r4, #4]
   18ab6:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   18ab8:	7be3      	ldrb	r3, [r4, #15]
   18aba:	f013 0f01 	tst.w	r3, #1
   18abe:	d104      	bne.n	18aca <_cbor_value_decode_int64_internal+0x20>
   18ac0:	7ba3      	ldrb	r3, [r4, #14]
   18ac2:	2bfa      	cmp	r3, #250	; 0xfa
   18ac4:	d001      	beq.n	18aca <_cbor_value_decode_int64_internal+0x20>
   18ac6:	2bfb      	cmp	r3, #251	; 0xfb
   18ac8:	d111      	bne.n	18aee <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   18aca:	f000 031e 	and.w	r3, r0, #30
   18ace:	2b1a      	cmp	r3, #26
   18ad0:	d113      	bne.n	18afa <_cbor_value_decode_int64_internal+0x50>
    if ((val & 1) == (Value32Bit & 1))
   18ad2:	f010 0f01 	tst.w	r0, #1
   18ad6:	d016      	beq.n	18b06 <_cbor_value_decode_int64_internal+0x5c>
    assert((val & SmallValueMask) == Value64Bit);
   18ad8:	f000 001f 	and.w	r0, r0, #31
   18adc:	281b      	cmp	r0, #27
   18ade:	d11a      	bne.n	18b16 <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   18ae0:	6823      	ldr	r3, [r4, #0]
   18ae2:	6818      	ldr	r0, [r3, #0]
   18ae4:	68c3      	ldr	r3, [r0, #12]
   18ae6:	6861      	ldr	r1, [r4, #4]
   18ae8:	3101      	adds	r1, #1
   18aea:	4798      	blx	r3
}
   18aec:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   18aee:	2300      	movs	r3, #0
   18af0:	461a      	mov	r2, r3
   18af2:	4619      	mov	r1, r3
   18af4:	4618      	mov	r0, r3
   18af6:	f7f0 fb65 	bl	91c4 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   18afa:	2300      	movs	r3, #0
   18afc:	461a      	mov	r2, r3
   18afe:	4619      	mov	r1, r3
   18b00:	4618      	mov	r0, r3
   18b02:	f7f0 fb5f 	bl	91c4 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   18b06:	6823      	ldr	r3, [r4, #0]
   18b08:	6818      	ldr	r0, [r3, #0]
   18b0a:	6883      	ldr	r3, [r0, #8]
   18b0c:	6861      	ldr	r1, [r4, #4]
   18b0e:	3101      	adds	r1, #1
   18b10:	4798      	blx	r3
   18b12:	2100      	movs	r1, #0
   18b14:	e7ea      	b.n	18aec <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   18b16:	2300      	movs	r3, #0
   18b18:	461a      	mov	r2, r3
   18b1a:	4619      	mov	r1, r3
   18b1c:	4618      	mov	r0, r3
   18b1e:	f7f0 fb51 	bl	91c4 <__assert_func>

00018b22 <cbor_parser_init>:
{
   18b22:	b510      	push	{r4, lr}
   18b24:	4604      	mov	r4, r0
   18b26:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   18b28:	2300      	movs	r3, #0
   18b2a:	6013      	str	r3, [r2, #0]
   18b2c:	6053      	str	r3, [r2, #4]
   18b2e:	6093      	str	r3, [r2, #8]
    parser->d = d;
   18b30:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   18b32:	69a4      	ldr	r4, [r4, #24]
   18b34:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   18b36:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   18b38:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   18b3a:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   18b3c:	2301      	movs	r3, #1
   18b3e:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   18b40:	f7ff fd89 	bl	18656 <preparse_value>
}
   18b44:	bd10      	pop	{r4, pc}

00018b46 <cbor_value_enter_container>:
{
   18b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b48:	4605      	mov	r5, r0
   18b4a:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   18b4c:	7b83      	ldrb	r3, [r0, #14]
   18b4e:	2b80      	cmp	r3, #128	; 0x80
   18b50:	d021      	beq.n	18b96 <cbor_value_enter_container+0x50>
   18b52:	2ba0      	cmp	r3, #160	; 0xa0
   18b54:	d01d      	beq.n	18b92 <cbor_value_enter_container+0x4c>
   18b56:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   18b58:	b1fb      	cbz	r3, 18b9a <cbor_value_enter_container+0x54>
    *recursed = *it;
   18b5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   18b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   18b62:	7beb      	ldrb	r3, [r5, #15]
   18b64:	f013 0f04 	tst.w	r3, #4
   18b68:	d01c      	beq.n	18ba4 <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
   18b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b6e:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   18b70:	460b      	mov	r3, r1
   18b72:	3301      	adds	r3, #1
   18b74:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   18b76:	4620      	mov	r0, r4
   18b78:	f7ff fd6d 	bl	18656 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   18b7c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   18b80:	d106      	bne.n	18b90 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   18b82:	6863      	ldr	r3, [r4, #4]
   18b84:	3301      	adds	r3, #1
   18b86:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   18b88:	23ff      	movs	r3, #255	; 0xff
   18b8a:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   18b8c:	2000      	movs	r0, #0
   18b8e:	60a0      	str	r0, [r4, #8]
}
   18b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b92:	2301      	movs	r3, #1
   18b94:	e7e0      	b.n	18b58 <cbor_value_enter_container+0x12>
   18b96:	2301      	movs	r3, #1
   18b98:	e7de      	b.n	18b58 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   18b9a:	461a      	mov	r2, r3
   18b9c:	4619      	mov	r1, r3
   18b9e:	4618      	mov	r0, r3
   18ba0:	f7f0 fb10 	bl	91c4 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   18ba4:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   18ba6:	6838      	ldr	r0, [r7, #0]
   18ba8:	6803      	ldr	r3, [r0, #0]
   18baa:	6861      	ldr	r1, [r4, #4]
   18bac:	4798      	blx	r3
   18bae:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   18bb2:	6863      	ldr	r3, [r4, #4]
   18bb4:	3301      	adds	r3, #1
   18bb6:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   18bb8:	2817      	cmp	r0, #23
   18bba:	d913      	bls.n	18be4 <cbor_value_enter_container+0x9e>
    if (unlikely(additional_information > Value64Bit))
   18bbc:	281b      	cmp	r0, #27
   18bbe:	d838      	bhi.n	18c32 <cbor_value_enter_container+0xec>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   18bc0:	3818      	subs	r0, #24
   18bc2:	2601      	movs	r6, #1
   18bc4:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   18bc6:	687b      	ldr	r3, [r7, #4]
   18bc8:	6861      	ldr	r1, [r4, #4]
   18bca:	1a5b      	subs	r3, r3, r1
   18bcc:	429e      	cmp	r6, r3
   18bce:	d835      	bhi.n	18c3c <cbor_value_enter_container+0xf6>
    } else if (bytesNeeded == 1) {
   18bd0:	2e01      	cmp	r6, #1
   18bd2:	d00a      	beq.n	18bea <cbor_value_enter_container+0xa4>
    } else if (bytesNeeded == 2) {
   18bd4:	2e02      	cmp	r6, #2
   18bd6:	d022      	beq.n	18c1e <cbor_value_enter_container+0xd8>
    } else if (bytesNeeded == 4) {
   18bd8:	2e04      	cmp	r6, #4
   18bda:	d025      	beq.n	18c28 <cbor_value_enter_container+0xe2>
        *len =  p->d->get64(p->d, *offset);
   18bdc:	6838      	ldr	r0, [r7, #0]
   18bde:	68c3      	ldr	r3, [r0, #12]
   18be0:	4798      	blx	r3
   18be2:	e006      	b.n	18bf2 <cbor_value_enter_container+0xac>
        *len = additional_information;
   18be4:	2300      	movs	r3, #0
   18be6:	4619      	mov	r1, r3
        return CborNoError;
   18be8:	e007      	b.n	18bfa <cbor_value_enter_container+0xb4>
        *len = p->d->get8(p->d, *offset);
   18bea:	6838      	ldr	r0, [r7, #0]
   18bec:	6803      	ldr	r3, [r0, #0]
   18bee:	4798      	blx	r3
   18bf0:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   18bf2:	6863      	ldr	r3, [r4, #4]
   18bf4:	4433      	add	r3, r6
   18bf6:	6063      	str	r3, [r4, #4]
    return CborNoError;
   18bf8:	2300      	movs	r3, #0
        assert(err == CborNoError);
   18bfa:	bb23      	cbnz	r3, 18c46 <cbor_value_enter_container+0x100>
        recursed->remaining = (uint32_t)len;
   18bfc:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   18bfe:	bb41      	cbnz	r1, 18c52 <cbor_value_enter_container+0x10c>
   18c00:	2900      	cmp	r1, #0
   18c02:	bf08      	it	eq
   18c04:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   18c08:	d023      	beq.n	18c52 <cbor_value_enter_container+0x10c>
        if (recursed->type == CborMapType) {
   18c0a:	7ba2      	ldrb	r2, [r4, #14]
   18c0c:	2aa0      	cmp	r2, #160	; 0xa0
   18c0e:	d025      	beq.n	18c5c <cbor_value_enter_container+0x116>
        if (len != 0)
   18c10:	ea50 0301 	orrs.w	r3, r0, r1
   18c14:	d0b8      	beq.n	18b88 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   18c16:	4620      	mov	r0, r4
   18c18:	f7ff fd1d 	bl	18656 <preparse_value>
   18c1c:	e7b8      	b.n	18b90 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   18c1e:	6838      	ldr	r0, [r7, #0]
   18c20:	6843      	ldr	r3, [r0, #4]
   18c22:	4798      	blx	r3
   18c24:	2100      	movs	r1, #0
   18c26:	e7e4      	b.n	18bf2 <cbor_value_enter_container+0xac>
        *len =  p->d->get32(p->d, *offset);
   18c28:	6838      	ldr	r0, [r7, #0]
   18c2a:	6883      	ldr	r3, [r0, #8]
   18c2c:	4798      	blx	r3
   18c2e:	2100      	movs	r1, #0
   18c30:	e7df      	b.n	18bf2 <cbor_value_enter_container+0xac>
    *len = 1;
   18c32:	2001      	movs	r0, #1
   18c34:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   18c36:	f240 1305 	movw	r3, #261	; 0x105
   18c3a:	e7de      	b.n	18bfa <cbor_value_enter_container+0xb4>
    *len = 1;
   18c3c:	2001      	movs	r0, #1
   18c3e:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   18c40:	f240 1301 	movw	r3, #257	; 0x101
   18c44:	e7d9      	b.n	18bfa <cbor_value_enter_container+0xb4>
        assert(err == CborNoError);
   18c46:	2300      	movs	r3, #0
   18c48:	461a      	mov	r2, r3
   18c4a:	4619      	mov	r1, r3
   18c4c:	4618      	mov	r0, r3
   18c4e:	f7f0 fab9 	bl	91c4 <__assert_func>
            recursed->offset = it->offset;
   18c52:	686b      	ldr	r3, [r5, #4]
   18c54:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   18c56:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18c5a:	e799      	b.n	18b90 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   18c5c:	2800      	cmp	r0, #0
   18c5e:	db02      	blt.n	18c66 <cbor_value_enter_container+0x120>
            recursed->remaining *= 2;
   18c60:	0043      	lsls	r3, r0, #1
   18c62:	60a3      	str	r3, [r4, #8]
   18c64:	e7d4      	b.n	18c10 <cbor_value_enter_container+0xca>
                recursed->offset = it->offset;
   18c66:	686b      	ldr	r3, [r5, #4]
   18c68:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   18c6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   18c6e:	e78f      	b.n	18b90 <cbor_value_enter_container+0x4a>

00018c70 <cbor_value_leave_container>:
{
   18c70:	b508      	push	{r3, lr}
   18c72:	7b83      	ldrb	r3, [r0, #14]
   18c74:	2b80      	cmp	r3, #128	; 0x80
   18c76:	d00d      	beq.n	18c94 <cbor_value_leave_container+0x24>
   18c78:	2ba0      	cmp	r3, #160	; 0xa0
   18c7a:	d009      	beq.n	18c90 <cbor_value_leave_container+0x20>
   18c7c:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   18c7e:	b15b      	cbz	r3, 18c98 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   18c80:	7b8b      	ldrb	r3, [r1, #14]
   18c82:	2bff      	cmp	r3, #255	; 0xff
   18c84:	d10d      	bne.n	18ca2 <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
   18c86:	684b      	ldr	r3, [r1, #4]
   18c88:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   18c8a:	f7ff fd7e 	bl	1878a <preparse_next_value>
}
   18c8e:	bd08      	pop	{r3, pc}
   18c90:	2301      	movs	r3, #1
   18c92:	e7f4      	b.n	18c7e <cbor_value_leave_container+0xe>
   18c94:	2301      	movs	r3, #1
   18c96:	e7f2      	b.n	18c7e <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   18c98:	461a      	mov	r2, r3
   18c9a:	4619      	mov	r1, r3
   18c9c:	4618      	mov	r0, r3
   18c9e:	f7f0 fa91 	bl	91c4 <__assert_func>
    assert(recursed->type == CborInvalidType);
   18ca2:	2300      	movs	r3, #0
   18ca4:	461a      	mov	r2, r3
   18ca6:	4619      	mov	r1, r3
   18ca8:	4618      	mov	r0, r3
   18caa:	f7f0 fa8b 	bl	91c4 <__assert_func>
	...

00018cb0 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   18cb0:	b500      	push	{lr}
   18cb2:	b085      	sub	sp, #20
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   18cb4:	468c      	mov	ip, r1
   18cb6:	b181      	cbz	r1, 18cda <_cbor_value_copy_string+0x2a>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   18cb8:	6801      	ldr	r1, [r0, #0]
   18cba:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   18cbc:	6949      	ldr	r1, [r1, #20]
   18cbe:	9101      	str	r1, [sp, #4]
   18cc0:	9300      	str	r3, [sp, #0]
   18cc2:	f10d 030f 	add.w	r3, sp, #15
   18cc6:	4661      	mov	r1, ip
   18cc8:	f7ff fdd4 	bl	18874 <iterate_string_chunks>
    return err ? err :
   18ccc:	b910      	cbnz	r0, 18cd4 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   18cce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   18cd2:	b123      	cbz	r3, 18cde <_cbor_value_copy_string+0x2e>
}
   18cd4:	b005      	add	sp, #20
   18cd6:	f85d fb04 	ldr.w	pc, [sp], #4
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   18cda:	4902      	ldr	r1, [pc, #8]	; (18ce4 <_cbor_value_copy_string+0x34>)
   18cdc:	e7ef      	b.n	18cbe <_cbor_value_copy_string+0xe>
    return err ? err :
   18cde:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18ce2:	e7f7      	b.n	18cd4 <_cbor_value_copy_string+0x24>
   18ce4:	00018653 	.word	0x00018653

00018ce8 <advance_recursive>:
{
   18ce8:	b570      	push	{r4, r5, r6, lr}
   18cea:	b086      	sub	sp, #24
   18cec:	4604      	mov	r4, r0
   18cee:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   18cf0:	7b86      	ldrb	r6, [r0, #14]
   18cf2:	4630      	mov	r0, r6
   18cf4:	f7ff fc9b 	bl	1862e <is_fixed_type>
   18cf8:	b9c0      	cbnz	r0, 18d2c <advance_recursive+0x44>
   18cfa:	2e80      	cmp	r6, #128	; 0x80
   18cfc:	d01f      	beq.n	18d3e <advance_recursive+0x56>
   18cfe:	2ea0      	cmp	r6, #160	; 0xa0
   18d00:	d01b      	beq.n	18d3a <advance_recursive+0x52>
   18d02:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   18d04:	b1eb      	cbz	r3, 18d42 <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   18d06:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   18d0a:	d02b      	beq.n	18d64 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   18d0c:	a902      	add	r1, sp, #8
   18d0e:	4620      	mov	r0, r4
   18d10:	f7ff ff19 	bl	18b46 <cbor_value_enter_container>
    if (err)
   18d14:	4603      	mov	r3, r0
   18d16:	b968      	cbnz	r0, 18d34 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   18d18:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   18d1a:	b1eb      	cbz	r3, 18d58 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   18d1c:	1c69      	adds	r1, r5, #1
   18d1e:	a802      	add	r0, sp, #8
   18d20:	f7ff ffe2 	bl	18ce8 <advance_recursive>
        if (err)
   18d24:	4603      	mov	r3, r0
   18d26:	2800      	cmp	r0, #0
   18d28:	d0f6      	beq.n	18d18 <advance_recursive+0x30>
   18d2a:	e003      	b.n	18d34 <advance_recursive+0x4c>
        return advance_internal(it);
   18d2c:	4620      	mov	r0, r4
   18d2e:	f7ff fe57 	bl	189e0 <advance_internal>
   18d32:	4603      	mov	r3, r0
}
   18d34:	4618      	mov	r0, r3
   18d36:	b006      	add	sp, #24
   18d38:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   18d3a:	2301      	movs	r3, #1
   18d3c:	e7e2      	b.n	18d04 <advance_recursive+0x1c>
   18d3e:	2301      	movs	r3, #1
   18d40:	e7e0      	b.n	18d04 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   18d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d46:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   18d48:	4623      	mov	r3, r4
   18d4a:	aa01      	add	r2, sp, #4
   18d4c:	2100      	movs	r1, #0
   18d4e:	4620      	mov	r0, r4
   18d50:	f7ff ffae 	bl	18cb0 <_cbor_value_copy_string>
   18d54:	4603      	mov	r3, r0
   18d56:	e7ed      	b.n	18d34 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   18d58:	a902      	add	r1, sp, #8
   18d5a:	4620      	mov	r0, r4
   18d5c:	f7ff ff88 	bl	18c70 <cbor_value_leave_container>
   18d60:	4603      	mov	r3, r0
   18d62:	e7e7      	b.n	18d34 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   18d64:	f240 4301 	movw	r3, #1025	; 0x401
   18d68:	e7e4      	b.n	18d34 <advance_recursive+0x4c>

00018d6a <cbor_value_advance>:
{
   18d6a:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   18d6c:	7b83      	ldrb	r3, [r0, #14]
   18d6e:	2bff      	cmp	r3, #255	; 0xff
   18d70:	d005      	beq.n	18d7e <cbor_value_advance+0x14>
    if (!it->remaining)
   18d72:	6883      	ldr	r3, [r0, #8]
   18d74:	b14b      	cbz	r3, 18d8a <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
   18d76:	2100      	movs	r1, #0
   18d78:	f7ff ffb6 	bl	18ce8 <advance_recursive>
}
   18d7c:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   18d7e:	2300      	movs	r3, #0
   18d80:	461a      	mov	r2, r3
   18d82:	4619      	mov	r1, r3
   18d84:	4618      	mov	r0, r3
   18d86:	f7f0 fa1d 	bl	91c4 <__assert_func>
        return CborErrorAdvancePastEOF;
   18d8a:	2003      	movs	r0, #3
   18d8c:	e7f6      	b.n	18d7c <cbor_value_advance+0x12>

00018d8e <cbor_value_calculate_string_length>:
{
   18d8e:	b508      	push	{r3, lr}
   18d90:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   18d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d96:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   18d98:	2300      	movs	r3, #0
   18d9a:	4619      	mov	r1, r3
   18d9c:	f7ff ff88 	bl	18cb0 <_cbor_value_copy_string>
}
   18da0:	bd08      	pop	{r3, pc}

00018da2 <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   18da2:	b538      	push	{r3, r4, r5, lr}
   18da4:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   18da6:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   18da8:	2500      	movs	r5, #0
   18daa:	e000      	b.n	18dae <fcb_free_sector_cnt+0xc>
   18dac:	3501      	adds	r5, #1
   18dae:	7963      	ldrb	r3, [r4, #5]
   18db0:	42ab      	cmp	r3, r5
   18db2:	dd06      	ble.n	18dc2 <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   18db4:	4620      	mov	r0, r4
   18db6:	f000 fa97 	bl	192e8 <fcb_getnext_area>
   18dba:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   18dbc:	69a3      	ldr	r3, [r4, #24]
   18dbe:	4283      	cmp	r3, r0
   18dc0:	d1f4      	bne.n	18dac <fcb_free_sector_cnt+0xa>
            break;
        }
    }
    return i;
}
   18dc2:	4628      	mov	r0, r5
   18dc4:	bd38      	pop	{r3, r4, r5, pc}

00018dc6 <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   18dc6:	69c2      	ldr	r2, [r0, #28]
   18dc8:	6983      	ldr	r3, [r0, #24]
   18dca:	429a      	cmp	r2, r3
   18dcc:	d001      	beq.n	18dd2 <fcb_is_empty+0xc>
   18dce:	2000      	movs	r0, #0
   18dd0:	4770      	bx	lr
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
   18dd2:	6a03      	ldr	r3, [r0, #32]
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   18dd4:	2b08      	cmp	r3, #8
   18dd6:	d001      	beq.n	18ddc <fcb_is_empty+0x16>
   18dd8:	2000      	movs	r0, #0
   18dda:	4770      	bx	lr
   18ddc:	2001      	movs	r0, #1
}
   18dde:	4770      	bx	lr

00018de0 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   18de0:	297f      	cmp	r1, #127	; 0x7f
   18de2:	d90a      	bls.n	18dfa <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   18de4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   18de8:	4299      	cmp	r1, r3
   18dea:	d809      	bhi.n	18e00 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   18dec:	f061 037f 	orn	r3, r1, #127	; 0x7f
   18df0:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   18df2:	09c9      	lsrs	r1, r1, #7
   18df4:	7041      	strb	r1, [r0, #1]
        return 2;
   18df6:	2002      	movs	r0, #2
   18df8:	4770      	bx	lr
        buf[0] = len;
   18dfa:	7001      	strb	r1, [r0, #0]
        return 1;
   18dfc:	2001      	movs	r0, #1
   18dfe:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   18e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   18e04:	4770      	bx	lr

00018e06 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   18e06:	7803      	ldrb	r3, [r0, #0]
   18e08:	f990 2000 	ldrsb.w	r2, [r0]
   18e0c:	2a00      	cmp	r2, #0
   18e0e:	db02      	blt.n	18e16 <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   18e10:	800b      	strh	r3, [r1, #0]
        rc = 1;
   18e12:	2001      	movs	r0, #1
    }
    return rc;
}
   18e14:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   18e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18e1a:	7842      	ldrb	r2, [r0, #1]
   18e1c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   18e20:	800b      	strh	r3, [r1, #0]
        rc = 2;
   18e22:	2002      	movs	r0, #2
   18e24:	4770      	bx	lr

00018e26 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   18e26:	b500      	push	{lr}
   18e28:	b083      	sub	sp, #12
   18e2a:	4603      	mov	r3, r0
   18e2c:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   18e2e:	6819      	ldr	r1, [r3, #0]
   18e30:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   18e32:	791b      	ldrb	r3, [r3, #4]
   18e34:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   18e38:	23ff      	movs	r3, #255	; 0xff
   18e3a:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   18e3e:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   18e42:	2308      	movs	r3, #8
   18e44:	466a      	mov	r2, sp
   18e46:	2100      	movs	r1, #0
   18e48:	f7fb fa3a 	bl	142c0 <flash_area_write>
    if (rc) {
   18e4c:	b910      	cbnz	r0, 18e54 <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   18e4e:	b003      	add	sp, #12
   18e50:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   18e54:	f06f 0001 	mvn.w	r0, #1
   18e58:	e7f9      	b.n	18e4e <fcb_sector_hdr_init+0x28>

00018e5a <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   18e5a:	b530      	push	{r4, r5, lr}
   18e5c:	b083      	sub	sp, #12
   18e5e:	4604      	mov	r4, r0
   18e60:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   18e62:	4615      	mov	r5, r2
   18e64:	b19a      	cbz	r2, 18e8e <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   18e66:	2308      	movs	r3, #8
   18e68:	462a      	mov	r2, r5
   18e6a:	2100      	movs	r1, #0
   18e6c:	f7fb fa6d 	bl	1434a <flash_area_read_is_empty>
    if (rc < 0) {
   18e70:	1e03      	subs	r3, r0, #0
   18e72:	db0e      	blt.n	18e92 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   18e74:	2b01      	cmp	r3, #1
   18e76:	d00f      	beq.n	18e98 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   18e78:	682a      	ldr	r2, [r5, #0]
   18e7a:	6823      	ldr	r3, [r4, #0]
   18e7c:	429a      	cmp	r2, r3
   18e7e:	d10d      	bne.n	18e9c <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   18e80:	792a      	ldrb	r2, [r5, #4]
   18e82:	7923      	ldrb	r3, [r4, #4]
   18e84:	429a      	cmp	r2, r3
   18e86:	d10c      	bne.n	18ea2 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   18e88:	2001      	movs	r0, #1
}
   18e8a:	b003      	add	sp, #12
   18e8c:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   18e8e:	466d      	mov	r5, sp
   18e90:	e7e9      	b.n	18e66 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   18e92:	f06f 0001 	mvn.w	r0, #1
   18e96:	e7f8      	b.n	18e8a <fcb_sector_hdr_read+0x30>
        return 0;
   18e98:	2000      	movs	r0, #0
   18e9a:	e7f6      	b.n	18e8a <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   18e9c:	f06f 0006 	mvn.w	r0, #6
   18ea0:	e7f3      	b.n	18e8a <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   18ea2:	f06f 0007 	mvn.w	r0, #7
   18ea6:	e7f0      	b.n	18e8a <fcb_sector_hdr_read+0x30>

00018ea8 <fcb_init>:
{
   18ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eac:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   18eae:	6883      	ldr	r3, [r0, #8]
   18eb0:	2b00      	cmp	r3, #0
   18eb2:	f000 8082 	beq.w	18fba <fcb_init+0x112>
   18eb6:	4606      	mov	r6, r0
   18eb8:	7943      	ldrb	r3, [r0, #5]
   18eba:	7982      	ldrb	r2, [r0, #6]
   18ebc:	1a9b      	subs	r3, r3, r2
   18ebe:	2b00      	cmp	r3, #0
   18ec0:	dd7e      	ble.n	18fc0 <fcb_init+0x118>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   18ec2:	f04f 0b00 	mov.w	fp, #0
   18ec6:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   18eca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   18ece:	46d1      	mov	r9, sl
    int max_align = 1;
   18ed0:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   18ed4:	465f      	mov	r7, fp
   18ed6:	e00a      	b.n	18eee <fcb_init+0x46>
            max_align = flash_area_align(fap);
   18ed8:	4620      	mov	r0, r4
   18eda:	f7fb fa19 	bl	14310 <flash_area_align>
   18ede:	4680      	mov	r8, r0
   18ee0:	e012      	b.n	18f08 <fcb_init+0x60>
            oldest = newest = fda.fd_id;
   18ee2:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   18ee6:	46a3      	mov	fp, r4
   18ee8:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   18eea:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   18eec:	3701      	adds	r7, #1
   18eee:	7973      	ldrb	r3, [r6, #5]
   18ef0:	42bb      	cmp	r3, r7
   18ef2:	dd29      	ble.n	18f48 <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   18ef4:	68b4      	ldr	r4, [r6, #8]
   18ef6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   18efa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   18efe:	4620      	mov	r0, r4
   18f00:	f7fb fa06 	bl	14310 <flash_area_align>
        if (align > max_align) {
   18f04:	4580      	cmp	r8, r0
   18f06:	dbe7      	blt.n	18ed8 <fcb_init+0x30>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   18f08:	aa02      	add	r2, sp, #8
   18f0a:	4621      	mov	r1, r4
   18f0c:	4630      	mov	r0, r6
   18f0e:	f7ff ffa4 	bl	18e5a <fcb_sector_hdr_read>
        if (rc < 0) {
   18f12:	1e05      	subs	r5, r0, #0
   18f14:	db3b      	blt.n	18f8e <fcb_init+0xe6>
        if (rc == 0) {
   18f16:	2d00      	cmp	r5, #0
   18f18:	d0e8      	beq.n	18eec <fcb_init+0x44>
        if (oldest < 0) {
   18f1a:	f1b9 0f00 	cmp.w	r9, #0
   18f1e:	dbe0      	blt.n	18ee2 <fcb_init+0x3a>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   18f20:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   18f24:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   18f28:	fa0f f38a 	sxth.w	r3, sl
   18f2c:	1ad3      	subs	r3, r2, r3
   18f2e:	2b00      	cmp	r3, #0
   18f30:	dd02      	ble.n	18f38 <fcb_init+0x90>
            newest = fda.fd_id;
   18f32:	468a      	mov	sl, r1
            newest_fap = fap;
   18f34:	46a3      	mov	fp, r4
   18f36:	e7d9      	b.n	18eec <fcb_init+0x44>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   18f38:	fa0f f389 	sxth.w	r3, r9
   18f3c:	1a9a      	subs	r2, r3, r2
   18f3e:	2a00      	cmp	r2, #0
   18f40:	ddd4      	ble.n	18eec <fcb_init+0x44>
            oldest = fda.fd_id;
   18f42:	4689      	mov	r9, r1
            oldest_fap = fap;
   18f44:	9401      	str	r4, [sp, #4]
   18f46:	e7d1      	b.n	18eec <fcb_init+0x44>
    if (oldest < 0) {
   18f48:	f1b9 0f00 	cmp.w	r9, #0
   18f4c:	db23      	blt.n	18f96 <fcb_init+0xee>
    fcb->f_align = max_align;
   18f4e:	fa5f f888 	uxtb.w	r8, r8
   18f52:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   18f56:	9b01      	ldr	r3, [sp, #4]
   18f58:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   18f5a:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   18f5e:	2308      	movs	r3, #8
   18f60:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   18f62:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   18f66:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   18f6a:	ea18 0505 	ands.w	r5, r8, r5
   18f6e:	d11e      	bne.n	18fae <fcb_init+0x106>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   18f70:	f106 011c 	add.w	r1, r6, #28
   18f74:	4630      	mov	r0, r6
   18f76:	f000 f993 	bl	192a0 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   18f7a:	f110 0f03 	cmn.w	r0, #3
   18f7e:	d002      	beq.n	18f86 <fcb_init+0xde>
        if (rc != 0) {
   18f80:	2800      	cmp	r0, #0
   18f82:	d0f5      	beq.n	18f70 <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   18f84:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   18f86:	f106 000c 	add.w	r0, r6, #12
   18f8a:	f7f1 fe5b 	bl	ac44 <os_mutex_init>
}
   18f8e:	4628      	mov	r0, r5
   18f90:	b005      	add	sp, #20
   18f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   18f96:	68b3      	ldr	r3, [r6, #8]
   18f98:	461c      	mov	r4, r3
   18f9a:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   18f9c:	2200      	movs	r2, #0
   18f9e:	4619      	mov	r1, r3
   18fa0:	4630      	mov	r0, r6
   18fa2:	f7ff ff40 	bl	18e26 <fcb_sector_hdr_init>
        if (rc) {
   18fa6:	4682      	mov	sl, r0
   18fa8:	b968      	cbnz	r0, 18fc6 <fcb_init+0x11e>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   18faa:	46a3      	mov	fp, r4
   18fac:	e7cf      	b.n	18f4e <fcb_init+0xa6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   18fae:	2300      	movs	r3, #0
   18fb0:	461a      	mov	r2, r3
   18fb2:	4619      	mov	r1, r3
   18fb4:	4618      	mov	r0, r3
   18fb6:	f7f0 f905 	bl	91c4 <__assert_func>
        return FCB_ERR_ARGS;
   18fba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18fbe:	e7e6      	b.n	18f8e <fcb_init+0xe6>
   18fc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18fc4:	e7e3      	b.n	18f8e <fcb_init+0xe6>
            return rc;
   18fc6:	4605      	mov	r5, r0
   18fc8:	e7e1      	b.n	18f8e <fcb_init+0xe6>

00018fca <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   18fca:	b538      	push	{r3, r4, r5, lr}
   18fcc:	4604      	mov	r4, r0
    int rc;

    rc = 0;
   18fce:	2500      	movs	r5, #0
    while (!fcb_is_empty(fcb)) {
   18fd0:	4620      	mov	r0, r4
   18fd2:	f7ff fef8 	bl	18dc6 <fcb_is_empty>
   18fd6:	b928      	cbnz	r0, 18fe4 <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   18fd8:	4620      	mov	r0, r4
   18fda:	f000 f9ef 	bl	193bc <fcb_rotate>
        if (rc) {
   18fde:	4605      	mov	r5, r0
   18fe0:	2800      	cmp	r0, #0
   18fe2:	d0f5      	beq.n	18fd0 <fcb_clear+0x6>
            break;
        }
    }
    return rc;
}
   18fe4:	4628      	mov	r0, r5
   18fe6:	bd38      	pop	{r3, r4, r5, pc}

00018fe8 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   18fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18fea:	4605      	mov	r5, r0
   18fec:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   18fee:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   18ff0:	2400      	movs	r4, #0
    rfa = NULL;
   18ff2:	4626      	mov	r6, r4
   18ff4:	e006      	b.n	19004 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   18ff6:	69ab      	ldr	r3, [r5, #24]
   18ff8:	428b      	cmp	r3, r1
   18ffa:	d00b      	beq.n	19014 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   18ffc:	1c63      	adds	r3, r4, #1
   18ffe:	42bc      	cmp	r4, r7
   19000:	da09      	bge.n	19016 <fcb_new_area+0x2e>
   19002:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   19004:	4628      	mov	r0, r5
   19006:	f000 f96f 	bl	192e8 <fcb_getnext_area>
   1900a:	4601      	mov	r1, r0
        if (!rfa) {
   1900c:	2e00      	cmp	r6, #0
   1900e:	d1f2      	bne.n	18ff6 <fcb_new_area+0xe>
            rfa = fa;
   19010:	4606      	mov	r6, r0
   19012:	e7f0      	b.n	18ff6 <fcb_new_area+0xe>
            return NULL;
   19014:	2600      	movs	r6, #0
    return rfa;
}
   19016:	4630      	mov	r0, r6
   19018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001901a <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   1901a:	b538      	push	{r3, r4, r5, lr}
   1901c:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   1901e:	2100      	movs	r1, #0
   19020:	f7ff ffe2 	bl	18fe8 <fcb_new_area>
    if (!fa) {
   19024:	b178      	cbz	r0, 19046 <fcb_append_to_scratch+0x2c>
   19026:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   19028:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1902a:	3201      	adds	r2, #1
   1902c:	b292      	uxth	r2, r2
   1902e:	4601      	mov	r1, r0
   19030:	4620      	mov	r0, r4
   19032:	f7ff fef8 	bl	18e26 <fcb_sector_hdr_init>
    if (rc) {
   19036:	b928      	cbnz	r0, 19044 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   19038:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1903a:	2308      	movs	r3, #8
   1903c:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   1903e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   19040:	3301      	adds	r3, #1
   19042:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   19044:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   19046:	f06f 0003 	mvn.w	r0, #3
   1904a:	e7fb      	b.n	19044 <fcb_append_to_scratch+0x2a>

0001904c <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   1904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19050:	b082      	sub	sp, #8
   19052:	4605      	mov	r5, r0
   19054:	460c      	mov	r4, r1
   19056:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   19058:	a801      	add	r0, sp, #4
   1905a:	f7ff fec1 	bl	18de0 <fcb_put_len>
    if (cnt < 0) {
   1905e:	1e06      	subs	r6, r0, #0
   19060:	db58      	blt.n	19114 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   19062:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19066:	2b01      	cmp	r3, #1
   19068:	d933      	bls.n	190d2 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1906a:	1e58      	subs	r0, r3, #1
   1906c:	fa10 f686 	uxtah	r6, r0, r6
   19070:	4258      	negs	r0, r3
   19072:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   19074:	2b01      	cmp	r3, #1
   19076:	d903      	bls.n	19080 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19078:	1e59      	subs	r1, r3, #1
   1907a:	440c      	add	r4, r1
   1907c:	4259      	negs	r1, r3
   1907e:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   19080:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   19082:	2b01      	cmp	r3, #1
   19084:	d927      	bls.n	190d6 <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19086:	425c      	negs	r4, r3
   19088:	401c      	ands	r4, r3
   1908a:	440c      	add	r4, r1
   1908c:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1908e:	f105 080c 	add.w	r8, r5, #12
   19092:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19096:	4640      	mov	r0, r8
   19098:	f7f1 fe3a 	bl	ad10 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1909c:	b108      	cbz	r0, 190a2 <fcb_append+0x56>
   1909e:	2809      	cmp	r0, #9
   190a0:	d14e      	bne.n	19140 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   190a2:	6a2b      	ldr	r3, [r5, #32]
   190a4:	4423      	add	r3, r4
   190a6:	46b1      	mov	r9, r6
   190a8:	441e      	add	r6, r3
   190aa:	69eb      	ldr	r3, [r5, #28]
   190ac:	689b      	ldr	r3, [r3, #8]
   190ae:	429e      	cmp	r6, r3
   190b0:	d923      	bls.n	190fa <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   190b2:	79a9      	ldrb	r1, [r5, #6]
   190b4:	4628      	mov	r0, r5
   190b6:	f7ff ff97 	bl	18fe8 <fcb_new_area>
        if (!fa || (fa->fa_size <
   190ba:	4682      	mov	sl, r0
   190bc:	2800      	cmp	r0, #0
   190be:	d03c      	beq.n	1913a <fcb_append+0xee>
   190c0:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   190c2:	eb04 0309 	add.w	r3, r4, r9
   190c6:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   190c8:	429a      	cmp	r2, r3
   190ca:	d206      	bcs.n	190da <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   190cc:	f06f 0603 	mvn.w	r6, #3
   190d0:	e01d      	b.n	1910e <fcb_append+0xc2>
        return len;
   190d2:	b2b6      	uxth	r6, r6
   190d4:	e7ce      	b.n	19074 <fcb_append+0x28>
   190d6:	2401      	movs	r4, #1
   190d8:	e7d7      	b.n	1908a <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   190da:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   190dc:	3201      	adds	r2, #1
   190de:	b292      	uxth	r2, r2
   190e0:	4601      	mov	r1, r0
   190e2:	4628      	mov	r0, r5
   190e4:	f7ff fe9f 	bl	18e26 <fcb_sector_hdr_init>
        if (rc) {
   190e8:	4606      	mov	r6, r0
   190ea:	b980      	cbnz	r0, 1910e <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   190ec:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   190f0:	2308      	movs	r3, #8
   190f2:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   190f4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   190f6:	3301      	adds	r3, #1
   190f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   190fa:	464b      	mov	r3, r9
   190fc:	aa01      	add	r2, sp, #4
   190fe:	6a29      	ldr	r1, [r5, #32]
   19100:	69e8      	ldr	r0, [r5, #28]
   19102:	f7fb f8dd 	bl	142c0 <flash_area_write>
    if (rc) {
   19106:	4606      	mov	r6, r0
   19108:	b140      	cbz	r0, 1911c <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   1910a:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   1910e:	4640      	mov	r0, r8
   19110:	f7f1 fda2 	bl	ac58 <os_mutex_release>
    return rc;
}
   19114:	4630      	mov	r0, r6
   19116:	b002      	add	sp, #8
   19118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   1911c:	69eb      	ldr	r3, [r5, #28]
   1911e:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   19120:	6a2b      	ldr	r3, [r5, #32]
   19122:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   19124:	444b      	add	r3, r9
   19126:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   19128:	4423      	add	r3, r4
   1912a:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   1912c:	68bb      	ldr	r3, [r7, #8]
   1912e:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   19130:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   19132:	4640      	mov	r0, r8
   19134:	f7f1 fd90 	bl	ac58 <os_mutex_release>
    return FCB_OK;
   19138:	e7ec      	b.n	19114 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   1913a:	f06f 0603 	mvn.w	r6, #3
   1913e:	e7e6      	b.n	1910e <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   19140:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19144:	e7e6      	b.n	19114 <fcb_append+0xc8>

00019146 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   19146:	b530      	push	{r4, r5, lr}
   19148:	b083      	sub	sp, #12
   1914a:	4605      	mov	r5, r0
   1914c:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   1914e:	f10d 0207 	add.w	r2, sp, #7
   19152:	f000 f818 	bl	19186 <fcb_elem_crc8>
    if (rc) {
   19156:	b988      	cbnz	r0, 1917c <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   19158:	68a0      	ldr	r0, [r4, #8]
   1915a:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   1915c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19160:	2b01      	cmp	r3, #1
   19162:	d903      	bls.n	1916c <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   19164:	1e5a      	subs	r2, r3, #1
   19166:	4411      	add	r1, r2
   19168:	425b      	negs	r3, r3
   1916a:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   1916c:	2301      	movs	r3, #1
   1916e:	f10d 0207 	add.w	r2, sp, #7
   19172:	4401      	add	r1, r0
   19174:	6820      	ldr	r0, [r4, #0]
   19176:	f7fb f8a3 	bl	142c0 <flash_area_write>
    if (rc) {
   1917a:	b908      	cbnz	r0, 19180 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   1917c:	b003      	add	sp, #12
   1917e:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   19180:	f06f 0001 	mvn.w	r0, #1
   19184:	e7fa      	b.n	1917c <fcb_append_finish+0x36>

00019186 <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   19186:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1918a:	b08b      	sub	sp, #44	; 0x2c
   1918c:	4605      	mov	r5, r0
   1918e:	4688      	mov	r8, r1
   19190:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   19192:	6849      	ldr	r1, [r1, #4]
   19194:	1c8a      	adds	r2, r1, #2
   19196:	f8d8 0000 	ldr.w	r0, [r8]
   1919a:	6883      	ldr	r3, [r0, #8]
   1919c:	429a      	cmp	r2, r3
   1919e:	d84a      	bhi.n	19236 <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   191a0:	2302      	movs	r3, #2
   191a2:	aa02      	add	r2, sp, #8
   191a4:	f7fb f8d1 	bl	1434a <flash_area_read_is_empty>
    if (rc < 0) {
   191a8:	1e03      	subs	r3, r0, #0
   191aa:	db47      	blt.n	1923c <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   191ac:	2b01      	cmp	r3, #1
   191ae:	d048      	beq.n	19242 <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   191b0:	f10d 0106 	add.w	r1, sp, #6
   191b4:	a802      	add	r0, sp, #8
   191b6:	f7ff fe26 	bl	18e06 <fcb_get_len>
   191ba:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   191bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   191c0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   191c4:	2b01      	cmp	r3, #1
   191c6:	d918      	bls.n	191fa <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   191c8:	1e5a      	subs	r2, r3, #1
   191ca:	fa12 f280 	uxtah	r2, r2, r0
   191ce:	425b      	negs	r3, r3
   191d0:	4013      	ands	r3, r2
   191d2:	440b      	add	r3, r1
   191d4:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   191d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   191dc:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   191e0:	f00a f8fc 	bl	233dc <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   191e4:	4622      	mov	r2, r4
   191e6:	a902      	add	r1, sp, #8
   191e8:	f00a f8fa 	bl	233e0 <crc8_calc>
   191ec:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   191ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   191f2:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   191f6:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   191f8:	e010      	b.n	1921c <fcb_elem_crc8+0x96>
        return len;
   191fa:	b283      	uxth	r3, r0
   191fc:	e7e9      	b.n	191d2 <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   191fe:	4623      	mov	r3, r4
   19200:	aa02      	add	r2, sp, #8
   19202:	4629      	mov	r1, r5
   19204:	f8d8 0000 	ldr.w	r0, [r8]
   19208:	f7fb f846 	bl	14298 <flash_area_read>
        if (rc) {
   1920c:	b9e0      	cbnz	r0, 19248 <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   1920e:	4622      	mov	r2, r4
   19210:	a902      	add	r1, sp, #8
   19212:	4630      	mov	r0, r6
   19214:	f00a f8e4 	bl	233e0 <crc8_calc>
   19218:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   1921a:	4425      	add	r5, r4
   1921c:	42bd      	cmp	r5, r7
   1921e:	d204      	bcs.n	1922a <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   19220:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   19222:	2c20      	cmp	r4, #32
   19224:	d9eb      	bls.n	191fe <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   19226:	2420      	movs	r4, #32
   19228:	e7e9      	b.n	191fe <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   1922a:	f889 6000 	strb.w	r6, [r9]

    return 0;
   1922e:	2000      	movs	r0, #0
}
   19230:	b00b      	add	sp, #44	; 0x2c
   19232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   19236:	f06f 0002 	mvn.w	r0, #2
   1923a:	e7f9      	b.n	19230 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   1923c:	f06f 0001 	mvn.w	r0, #1
   19240:	e7f6      	b.n	19230 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   19242:	f06f 0002 	mvn.w	r0, #2
   19246:	e7f3      	b.n	19230 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   19248:	f06f 0001 	mvn.w	r0, #1
   1924c:	e7f0      	b.n	19230 <fcb_elem_crc8+0xaa>

0001924e <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   1924e:	b530      	push	{r4, r5, lr}
   19250:	b083      	sub	sp, #12
   19252:	4605      	mov	r5, r0
   19254:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   19256:	f10d 0207 	add.w	r2, sp, #7
   1925a:	f7ff ff94 	bl	19186 <fcb_elem_crc8>
    if (rc) {
   1925e:	b9b8      	cbnz	r0, 19290 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   19260:	68a0      	ldr	r0, [r4, #8]
   19262:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   19264:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   19268:	2b01      	cmp	r3, #1
   1926a:	d903      	bls.n	19274 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   1926c:	1e5a      	subs	r2, r3, #1
   1926e:	4411      	add	r1, r2
   19270:	425b      	negs	r3, r3
   19272:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   19274:	2301      	movs	r3, #1
   19276:	f10d 0206 	add.w	r2, sp, #6
   1927a:	4401      	add	r1, r0
   1927c:	6820      	ldr	r0, [r4, #0]
   1927e:	f7fb f80b 	bl	14298 <flash_area_read>
    if (rc) {
   19282:	b938      	cbnz	r0, 19294 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   19284:	f89d 2006 	ldrb.w	r2, [sp, #6]
   19288:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1928c:	429a      	cmp	r2, r3
   1928e:	d104      	bne.n	1929a <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   19290:	b003      	add	sp, #12
   19292:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   19294:	f06f 0001 	mvn.w	r0, #1
   19298:	e7fa      	b.n	19290 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   1929a:	f06f 0005 	mvn.w	r0, #5
   1929e:	e7f7      	b.n	19290 <fcb_elem_info+0x42>

000192a0 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   192a0:	b570      	push	{r4, r5, r6, lr}
   192a2:	4606      	mov	r6, r0
   192a4:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   192a6:	f7ff ffd2 	bl	1924e <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   192aa:	b170      	cbz	r0, 192ca <fcb_getnext_in_area+0x2a>
   192ac:	f110 0f06 	cmn.w	r0, #6
   192b0:	d00b      	beq.n	192ca <fcb_getnext_in_area+0x2a>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   192b2:	bd70      	pop	{r4, r5, r6, pc}
   192b4:	4259      	negs	r1, r3
   192b6:	400b      	ands	r3, r1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   192b8:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   192ba:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   192bc:	4629      	mov	r1, r5
   192be:	4630      	mov	r0, r6
   192c0:	f7ff ffc5 	bl	1924e <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   192c4:	f110 0f06 	cmn.w	r0, #6
   192c8:	d1f3      	bne.n	192b2 <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   192ca:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   192cc:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   192ce:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   192d2:	2b01      	cmp	r3, #1
   192d4:	d903      	bls.n	192de <fcb_getnext_in_area+0x3e>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   192d6:	1e59      	subs	r1, r3, #1
   192d8:	440a      	add	r2, r1
   192da:	4259      	negs	r1, r3
   192dc:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   192de:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   192e0:	2b01      	cmp	r3, #1
   192e2:	d8e7      	bhi.n	192b4 <fcb_getnext_in_area+0x14>
        return len;
   192e4:	2301      	movs	r3, #1
   192e6:	e7e7      	b.n	192b8 <fcb_getnext_in_area+0x18>

000192e8 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   192e8:	4603      	mov	r3, r0
    fap++;
   192ea:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   192ec:	6880      	ldr	r0, [r0, #8]
   192ee:	795b      	ldrb	r3, [r3, #5]
   192f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   192f4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   192f8:	428b      	cmp	r3, r1
   192fa:	d900      	bls.n	192fe <fcb_getnext_area+0x16>
    fap++;
   192fc:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   192fe:	4770      	bx	lr

00019300 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   19300:	b538      	push	{r3, r4, r5, lr}
   19302:	4605      	mov	r5, r0
   19304:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   19306:	680b      	ldr	r3, [r1, #0]
   19308:	b313      	cbz	r3, 19350 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   1930a:	6863      	ldr	r3, [r4, #4]
   1930c:	bb1b      	cbnz	r3, 19356 <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   1930e:	2308      	movs	r3, #8
   19310:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   19312:	4621      	mov	r1, r4
   19314:	4628      	mov	r0, r5
   19316:	f7ff ff9a 	bl	1924e <fcb_elem_info>
   1931a:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   1931c:	f113 0f06 	cmn.w	r3, #6
   19320:	d01f      	beq.n	19362 <fcb_getnext_nolock+0x62>
   19322:	b19b      	cbz	r3, 1934c <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   19324:	6821      	ldr	r1, [r4, #0]
   19326:	69eb      	ldr	r3, [r5, #28]
   19328:	4299      	cmp	r1, r3
   1932a:	d02a      	beq.n	19382 <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   1932c:	4628      	mov	r0, r5
   1932e:	f7ff ffdb 	bl	192e8 <fcb_getnext_area>
   19332:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   19334:	2308      	movs	r3, #8
   19336:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   19338:	4621      	mov	r1, r4
   1933a:	4628      	mov	r0, r5
   1933c:	f7ff ff87 	bl	1924e <fcb_elem_info>
   19340:	4603      	mov	r3, r0
            switch (rc) {
   19342:	f110 0f06 	cmn.w	r0, #6
   19346:	d00c      	beq.n	19362 <fcb_getnext_nolock+0x62>
   19348:	2800      	cmp	r0, #0
   1934a:	d1eb      	bne.n	19324 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   1934c:	4618      	mov	r0, r3
   1934e:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   19350:	6983      	ldr	r3, [r0, #24]
   19352:	600b      	str	r3, [r1, #0]
   19354:	e7d9      	b.n	1930a <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   19356:	4621      	mov	r1, r4
   19358:	4628      	mov	r0, r5
   1935a:	f7ff ffa1 	bl	192a0 <fcb_getnext_in_area>
   1935e:	4603      	mov	r3, r0
   19360:	e7dc      	b.n	1931c <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   19362:	f113 0f06 	cmn.w	r3, #6
   19366:	d10a      	bne.n	1937e <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   19368:	4621      	mov	r1, r4
   1936a:	4628      	mov	r0, r5
   1936c:	f7ff ff98 	bl	192a0 <fcb_getnext_in_area>
        if (rc == 0) {
   19370:	4603      	mov	r3, r0
   19372:	2800      	cmp	r0, #0
   19374:	d0ea      	beq.n	1934c <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   19376:	f110 0f06 	cmn.w	r0, #6
   1937a:	d0f2      	beq.n	19362 <fcb_getnext_nolock+0x62>
next_sector:
   1937c:	e7d2      	b.n	19324 <fcb_getnext_nolock+0x24>
    return 0;
   1937e:	2300      	movs	r3, #0
   19380:	e7e4      	b.n	1934c <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   19382:	f06f 0302 	mvn.w	r3, #2
   19386:	e7e1      	b.n	1934c <fcb_getnext_nolock+0x4c>

00019388 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   19388:	b570      	push	{r4, r5, r6, lr}
   1938a:	4604      	mov	r4, r0
   1938c:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1938e:	f100 060c 	add.w	r6, r0, #12
   19392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19396:	4630      	mov	r0, r6
   19398:	f7f1 fcba 	bl	ad10 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   1939c:	b108      	cbz	r0, 193a2 <fcb_getnext+0x1a>
   1939e:	2809      	cmp	r0, #9
   193a0:	d109      	bne.n	193b6 <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   193a2:	4629      	mov	r1, r5
   193a4:	4620      	mov	r0, r4
   193a6:	f7ff ffab 	bl	19300 <fcb_getnext_nolock>
   193aa:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   193ac:	4630      	mov	r0, r6
   193ae:	f7f1 fc53 	bl	ac58 <os_mutex_release>

    return rc;
}
   193b2:	4620      	mov	r0, r4
   193b4:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   193b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   193ba:	e7fa      	b.n	193b2 <fcb_getnext+0x2a>

000193bc <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   193bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193be:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   193c0:	f100 050c 	add.w	r5, r0, #12
   193c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   193c8:	4628      	mov	r0, r5
   193ca:	f7f1 fca1 	bl	ad10 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   193ce:	b108      	cbz	r0, 193d4 <fcb_rotate+0x18>
   193d0:	2809      	cmp	r0, #9
   193d2:	d12c      	bne.n	1942e <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   193d4:	69a0      	ldr	r0, [r4, #24]
   193d6:	6882      	ldr	r2, [r0, #8]
   193d8:	2100      	movs	r1, #0
   193da:	f7fa ff85 	bl	142e8 <flash_area_erase>
    if (rc) {
   193de:	4606      	mov	r6, r0
   193e0:	bb10      	cbnz	r0, 19428 <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   193e2:	69a1      	ldr	r1, [r4, #24]
   193e4:	69e3      	ldr	r3, [r4, #28]
   193e6:	4299      	cmp	r1, r3
   193e8:	d009      	beq.n	193fe <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   193ea:	69a1      	ldr	r1, [r4, #24]
   193ec:	4620      	mov	r0, r4
   193ee:	f7ff ff7b 	bl	192e8 <fcb_getnext_area>
   193f2:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   193f4:	4628      	mov	r0, r5
   193f6:	f7f1 fc2f 	bl	ac58 <os_mutex_release>
    return rc;
}
   193fa:	4630      	mov	r0, r6
   193fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   193fe:	4620      	mov	r0, r4
   19400:	f7ff ff72 	bl	192e8 <fcb_getnext_area>
   19404:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   19406:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   19408:	3201      	adds	r2, #1
   1940a:	b292      	uxth	r2, r2
   1940c:	4601      	mov	r1, r0
   1940e:	4620      	mov	r0, r4
   19410:	f7ff fd09 	bl	18e26 <fcb_sector_hdr_init>
        if (rc) {
   19414:	4606      	mov	r6, r0
   19416:	2800      	cmp	r0, #0
   19418:	d1ec      	bne.n	193f4 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   1941a:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   1941c:	2308      	movs	r3, #8
   1941e:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   19420:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   19422:	3301      	adds	r3, #1
   19424:	85a3      	strh	r3, [r4, #44]	; 0x2c
   19426:	e7e0      	b.n	193ea <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   19428:	f06f 0601 	mvn.w	r6, #1
   1942c:	e7e2      	b.n	193f4 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   1942e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19432:	e7e2      	b.n	193fa <fcb_rotate+0x3e>

00019434 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   19434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19438:	b084      	sub	sp, #16
   1943a:	4606      	mov	r6, r0
   1943c:	460d      	mov	r5, r1
   1943e:	4617      	mov	r7, r2
   19440:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   19442:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   19444:	2300      	movs	r3, #0
   19446:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   19448:	f100 040c 	add.w	r4, r0, #12
   1944c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19450:	4620      	mov	r0, r4
   19452:	f7f1 fc5d 	bl	ad10 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   19456:	b170      	cbz	r0, 19476 <fcb_walk+0x42>
   19458:	2809      	cmp	r0, #9
   1945a:	d00c      	beq.n	19476 <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   1945c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19460:	e01e      	b.n	194a0 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   19462:	4641      	mov	r1, r8
   19464:	4668      	mov	r0, sp
   19466:	47b8      	blx	r7
        if (rc) {
   19468:	4603      	mov	r3, r0
   1946a:	b9c8      	cbnz	r0, 194a0 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   1946c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19470:	4620      	mov	r0, r4
   19472:	f7f1 fc4d 	bl	ad10 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   19476:	4669      	mov	r1, sp
   19478:	4630      	mov	r0, r6
   1947a:	f7ff ff41 	bl	19300 <fcb_getnext_nolock>
   1947e:	f110 0f03 	cmn.w	r0, #3
   19482:	d009      	beq.n	19498 <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   19484:	4620      	mov	r0, r4
   19486:	f7f1 fbe7 	bl	ac58 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   1948a:	2d00      	cmp	r5, #0
   1948c:	d0e9      	beq.n	19462 <fcb_walk+0x2e>
   1948e:	9800      	ldr	r0, [sp, #0]
   19490:	42a8      	cmp	r0, r5
   19492:	d0e6      	beq.n	19462 <fcb_walk+0x2e>
            return 0;
   19494:	2300      	movs	r3, #0
   19496:	e003      	b.n	194a0 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   19498:	4620      	mov	r0, r4
   1949a:	f7f1 fbdd 	bl	ac58 <os_mutex_release>
    return 0;
   1949e:	2300      	movs	r3, #0
}
   194a0:	4618      	mov	r0, r3
   194a2:	b004      	add	sp, #16
   194a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000194a8 <hal_bsp_flash_dev>:


const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    switch (id) {
   194a8:	b908      	cbnz	r0, 194ae <hal_bsp_flash_dev+0x6>
    case 0:
        /* MCU internal flash. */
        return &nrf52k_flash_dev;
   194aa:	4802      	ldr	r0, [pc, #8]	; (194b4 <hal_bsp_flash_dev+0xc>)
   194ac:	4770      	bx	lr
    default:
        /* External flash.  Assume not present in this BSP. */
        return NULL;
   194ae:	2000      	movs	r0, #0
    }
}
   194b0:	4770      	bx	lr
   194b2:	bf00      	nop
   194b4:	00028a1c 	.word	0x00028a1c

000194b8 <hal_bsp_init>:
}


void
hal_bsp_init(void)
{
   194b8:	b500      	push	{lr}
   194ba:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    /* Make sure system clocks have started */
    hal_system_clock_start();
   194bc:	f7ee fe9e 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52832 peripherals */
    nrf52_periph_create();
   194c0:	f005 fefa 	bl	1f2b8 <nrf52_periph_create>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   194c4:	2101      	movs	r1, #1
   194c6:	4811      	ldr	r0, [pc, #68]	; (1950c <hal_bsp_init+0x54>)
   194c8:	f7f0 fdc8 	bl	a05c <os_sem_init>

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = dpl_sem_init(&g_spi0_sem, 0x1);
    assert(rc == 0);
   194cc:	b988      	cbnz	r0, 194f2 <hal_bsp_init+0x3a>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_0 = hal_dw1000_inst(0);
   194ce:	2000      	movs	r0, #0
   194d0:	f000 fe84 	bl	1a1dc <hal_dw1000_inst>
   194d4:	4b0e      	ldr	r3, [pc, #56]	; (19510 <hal_bsp_init+0x58>)
   194d6:	6018      	str	r0, [r3, #0]
    rc = os_dev_create((struct os_dev *) dw1000_0, "dw1000_0",
   194d8:	4b0e      	ldr	r3, [pc, #56]	; (19514 <hal_bsp_init+0x5c>)
   194da:	9301      	str	r3, [sp, #4]
   194dc:	4b0e      	ldr	r3, [pc, #56]	; (19518 <hal_bsp_init+0x60>)
   194de:	9300      	str	r3, [sp, #0]
   194e0:	2300      	movs	r3, #0
   194e2:	2201      	movs	r2, #1
   194e4:	490d      	ldr	r1, [pc, #52]	; (1951c <hal_bsp_init+0x64>)
   194e6:	f7f0 f915 	bl	9714 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, dw1000_dev_init, (void *)&dw1000_0_cfg);
    assert(rc == 0);
   194ea:	b940      	cbnz	r0, 194fe <hal_bsp_init+0x46>
#endif
}
   194ec:	b003      	add	sp, #12
   194ee:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   194f2:	2300      	movs	r3, #0
   194f4:	461a      	mov	r2, r3
   194f6:	4619      	mov	r1, r3
   194f8:	4618      	mov	r0, r3
   194fa:	f7ef fe63 	bl	91c4 <__assert_func>
    assert(rc == 0);
   194fe:	2300      	movs	r3, #0
   19500:	461a      	mov	r2, r3
   19502:	4619      	mov	r1, r3
   19504:	4618      	mov	r0, r3
   19506:	f7ef fe5d 	bl	91c4 <__assert_func>
   1950a:	bf00      	nop
   1950c:	200053b8 	.word	0x200053b8
   19510:	200053b4 	.word	0x200053b4
   19514:	00027e74 	.word	0x00027e74
   19518:	0001a005 	.word	0x0001a005
   1951c:	00027e68 	.word	0x00027e68

00019520 <uwb_dw1000_read_sts_rxtime>:
inline static uint64_t
uwb_dw1000_read_sts_rxtime(struct uwb_dev* __attribute((unused)) dev)
{
    /* No such functionality */
    return 0xffffffffffffffffULL;
}
   19520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19528:	4770      	bx	lr

0001952a <uwb_dw1000_hal_noblock_wait>:
{
   1952a:	b508      	push	{r3, lr}
    return hal_dw1000_rw_noblock_wait((dw1000_dev_instance_t *)dev, timeout);
   1952c:	f001 f95e 	bl	1a7ec <hal_dw1000_rw_noblock_wait>
}
   19530:	bd08      	pop	{r3, pc}

00019532 <uwb_dw1000_mac_framefilter>:
    assert(0);
}

struct uwb_dev_status
uwb_dw1000_mac_framefilter(struct uwb_dev * dev, uint16_t enable)
{
   19532:	b508      	push	{r3, lr}
   19534:	460b      	mov	r3, r1
    uint16_t dw1k_en = 0;

    /* Translate uwb-level frame filtering flags to dw1000 reg */
    if (enable & UWB_FF_BEACON_EN) dw1k_en |= DWT_FF_BEACON_EN;
   19536:	f011 0101 	ands.w	r1, r1, #1
   1953a:	d000      	beq.n	1953e <uwb_dw1000_mac_framefilter+0xc>
   1953c:	2104      	movs	r1, #4
    if (enable & UWB_FF_DATA_EN)   dw1k_en |= DWT_FF_DATA_EN;
   1953e:	f013 0f02 	tst.w	r3, #2
   19542:	d001      	beq.n	19548 <uwb_dw1000_mac_framefilter+0x16>
   19544:	f041 0108 	orr.w	r1, r1, #8
    if (enable & UWB_FF_ACK_EN)    dw1k_en |= DWT_FF_ACK_EN;
   19548:	f013 0f04 	tst.w	r3, #4
   1954c:	d001      	beq.n	19552 <uwb_dw1000_mac_framefilter+0x20>
   1954e:	f041 0110 	orr.w	r1, r1, #16
    if (enable & UWB_FF_MAC_EN)    dw1k_en |= DWT_FF_MAC_EN;
   19552:	f013 0f08 	tst.w	r3, #8
   19556:	d001      	beq.n	1955c <uwb_dw1000_mac_framefilter+0x2a>
   19558:	f041 0120 	orr.w	r1, r1, #32
    if (enable & UWB_FF_RSVD_EN)   dw1k_en |= DWT_FF_RSVD_EN;
   1955c:	f013 0f10 	tst.w	r3, #16
   19560:	d001      	beq.n	19566 <uwb_dw1000_mac_framefilter+0x34>
   19562:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    if (enable & UWB_FF_COORD_EN)  dw1k_en |= DWT_FF_COORD_EN;
   19566:	f413 7f80 	tst.w	r3, #256	; 0x100
   1956a:	d001      	beq.n	19570 <uwb_dw1000_mac_framefilter+0x3e>
   1956c:	f041 0102 	orr.w	r1, r1, #2

    return dw1000_mac_framefilter((dw1000_dev_instance_t *)dev, dw1k_en);
   19570:	f001 fd80 	bl	1b074 <dw1000_mac_framefilter>
}
   19574:	bd08      	pop	{r3, pc}

00019576 <uwb_dw1000_set_autoack>:

struct uwb_dev_status
uwb_dw1000_set_autoack(struct uwb_dev * dev, bool enable)
{
   19576:	b508      	push	{r3, lr}
    return dw1000_set_autoack((dw1000_dev_instance_t *)dev, enable);
   19578:	f001 fdbc 	bl	1b0f4 <dw1000_set_autoack>
}
   1957c:	bd08      	pop	{r3, pc}

0001957e <uwb_dw1000_set_autoack_delay>:

struct uwb_dev_status
uwb_dw1000_set_autoack_delay(struct uwb_dev * dev, uint8_t delay)
{
   1957e:	b508      	push	{r3, lr}
    return dw1000_set_autoack_delay((dw1000_dev_instance_t *)dev, delay);
   19580:	f001 fe04 	bl	1b18c <dw1000_set_autoack_delay>
}
   19584:	bd08      	pop	{r3, pc}

00019586 <uwb_dw1000_event_cnt_ctrl>:

struct uwb_dev_status
uwb_dw1000_event_cnt_ctrl(struct uwb_dev * dev, bool enable, bool reset)
{
   19586:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_ctrl((dw1000_dev_instance_t *)dev, enable, reset);
   19588:	f003 fcc5 	bl	1cf16 <dw1000_phy_event_cnt_ctrl>
}
   1958c:	bd08      	pop	{r3, pc}

0001958e <uwb_dw1000_event_cnt_read>:

struct uwb_dev_status
uwb_dw1000_event_cnt_read(struct uwb_dev * dev, struct uwb_dev_evcnt *res)
{
   1958e:	b508      	push	{r3, lr}
    return dw1000_phy_event_cnt_read((dw1000_dev_instance_t *)dev, res);
   19590:	f003 fce4 	bl	1cf5c <dw1000_phy_event_cnt_read>
}
   19594:	bd08      	pop	{r3, pc}
	...

00019598 <uwb_dw1000_calc_pdoa>:
{
   19598:	b508      	push	{r3, lr}
    printf("%s not implemented\n", __func__);
   1959a:	4905      	ldr	r1, [pc, #20]	; (195b0 <uwb_dw1000_calc_pdoa+0x18>)
   1959c:	4805      	ldr	r0, [pc, #20]	; (195b4 <uwb_dw1000_calc_pdoa+0x1c>)
   1959e:	f7f7 fc85 	bl	10eac <printf>
    assert(0);
   195a2:	2300      	movs	r3, #0
   195a4:	461a      	mov	r2, r3
   195a6:	4619      	mov	r1, r3
   195a8:	4618      	mov	r0, r3
   195aa:	f7ef fe0b 	bl	91c4 <__assert_func>
   195ae:	bf00      	nop
   195b0:	00027ecc 	.word	0x00027ecc
   195b4:	00027e8c 	.word	0x00027e8c

000195b8 <uwb_dw1000_estimate_los>:
{
   195b8:	b508      	push	{r3, lr}
    return dw1000_estimate_los(rssi, fppl);
   195ba:	f002 ffa9 	bl	1c510 <dw1000_estimate_los>
}
   195be:	bd08      	pop	{r3, pc}

000195c0 <uwb_dw1000_calc_fppl>:
{
   195c0:	b508      	push	{r3, lr}
    return dw1000_calc_fppl((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   195c2:	f002 ff09 	bl	1c3d8 <dw1000_calc_fppl>
}
   195c6:	bd08      	pop	{r3, pc}

000195c8 <uwb_dw1000_calc_seq_rssi>:
{
   195c8:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   195ca:	f002 ff61 	bl	1c490 <dw1000_calc_rssi>
}
   195ce:	bd08      	pop	{r3, pc}

000195d0 <uwb_dw1000_calc_rssi>:
{
   195d0:	b508      	push	{r3, lr}
    return dw1000_calc_rssi((dw1000_dev_instance_t *)dev, (struct _dw1000_dev_rxdiag_t*)diag);
   195d2:	f002 ff5d 	bl	1c490 <dw1000_calc_rssi>
}
   195d6:	bd08      	pop	{r3, pc}

000195d8 <uwb_dw1000_get_fppl>:
{
   195d8:	b508      	push	{r3, lr}
    return dw1000_get_fppl((dw1000_dev_instance_t *)dev);
   195da:	f002 ff49 	bl	1c470 <dw1000_get_fppl>
}
   195de:	bd08      	pop	{r3, pc}

000195e0 <uwb_dw1000_get_rssi>:
{
   195e0:	b508      	push	{r3, lr}
    return dw1000_get_rssi((dw1000_dev_instance_t *)dev);
   195e2:	f002 ff85 	bl	1c4f0 <dw1000_get_rssi>
}
   195e6:	bd08      	pop	{r3, pc}

000195e8 <uwb_dw1000_calc_clock_offset_ratio>:
{
   195e8:	b508      	push	{r3, lr}
    if (type == UWB_CR_CARRIER_INTEGRATOR) {
   195ea:	b122      	cbz	r2, 195f6 <uwb_dw1000_calc_clock_offset_ratio+0xe>
    } else if (type == UWB_CR_RXTTCKO) {
   195ec:	2a01      	cmp	r2, #1
   195ee:	d005      	beq.n	195fc <uwb_dw1000_calc_clock_offset_ratio+0x14>
    return DPL_FLOAT64_INIT(0.0f);
   195f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 19608 <uwb_dw1000_calc_clock_offset_ratio+0x20>
}
   195f4:	bd08      	pop	{r3, pc}
        return dw1000_calc_clock_offset_ratio((dw1000_dev_instance_t *)dev, val);
   195f6:	f002 f88b 	bl	1b710 <dw1000_calc_clock_offset_ratio>
   195fa:	e7fb      	b.n	195f4 <uwb_dw1000_calc_clock_offset_ratio+0xc>
        return dw1000_calc_clock_offset_ratio_ttco((dw1000_dev_instance_t *)dev, val);
   195fc:	f002 f909 	bl	1b812 <dw1000_calc_clock_offset_ratio_ttco>
   19600:	e7f8      	b.n	195f4 <uwb_dw1000_calc_clock_offset_ratio+0xc>
   19602:	bf00      	nop
   19604:	f3af 8000 	nop.w
	...

00019610 <uwb_dw1000_set_on_error_continue>:
{
   19610:	b508      	push	{r3, lr}
    return dw1000_set_on_error_continue((dw1000_dev_instance_t *)dev, enable);
   19612:	f001 fc50 	bl	1aeb6 <dw1000_set_on_error_continue>
}
   19616:	bd08      	pop	{r3, pc}

00019618 <uwb_dw1000_phy_repeated_frames>:
{
   19618:	b508      	push	{r3, lr}
    return dw1000_phy_repeated_frames((dw1000_dev_instance_t *)dev, rate);
   1961a:	f003 fb1d 	bl	1cc58 <dw1000_phy_repeated_frames>
}
   1961e:	bd08      	pop	{r3, pc}

00019620 <uwb_dw1000_phy_rx_reset>:
{
   19620:	b508      	push	{r3, lr}
    return dw1000_phy_rx_reset((dw1000_dev_instance_t *)dev);
   19622:	f003 fa20 	bl	1ca66 <dw1000_phy_rx_reset>
}
   19626:	bd08      	pop	{r3, pc}

00019628 <uwb_dw1000_phy_forcetrxoff>:
{
   19628:	b508      	push	{r3, lr}
    return dw1000_phy_forcetrxoff((dw1000_dev_instance_t *)dev);
   1962a:	f003 fa51 	bl	1cad0 <dw1000_phy_forcetrxoff>
}
   1962e:	bd08      	pop	{r3, pc}

00019630 <uwb_dw1000_phy_data_duration>:
{
   19630:	b508      	push	{r3, lr}
    return dw1000_phy_data_duration(&dev->attrib, nlen);
   19632:	f200 5034 	addw	r0, r0, #1332	; 0x534
   19636:	f003 fbd1 	bl	1cddc <dw1000_phy_data_duration>
}
   1963a:	bd08      	pop	{r3, pc}

0001963c <uwb_dw1000_phy_SHR_duration>:
{
   1963c:	b508      	push	{r3, lr}
    return dw1000_phy_SHR_duration(&dev->attrib);
   1963e:	f200 5034 	addw	r0, r0, #1332	; 0x534
   19642:	f003 fbb7 	bl	1cdb4 <dw1000_phy_SHR_duration>
}
   19646:	bd08      	pop	{r3, pc}

00019648 <uwb_dw1000_phy_frame_duration>:
{
   19648:	b508      	push	{r3, lr}
    return dw1000_phy_frame_duration(&dev->attrib, nlen);
   1964a:	f200 5034 	addw	r0, r0, #1332	; 0x534
   1964e:	f003 fbef 	bl	1ce30 <dw1000_phy_frame_duration>
}
   19652:	bd08      	pop	{r3, pc}

00019654 <uwb_dw1000_read_txtime_lo32>:
{
   19654:	b508      	push	{r3, lr}
    return dw1000_read_txtime_lo((dw1000_dev_instance_t *)dev);
   19656:	f002 ffa9 	bl	1c5ac <dw1000_read_txtime_lo>
}
   1965a:	bd08      	pop	{r3, pc}

0001965c <uwb_dw1000_read_txtime>:
{
   1965c:	b508      	push	{r3, lr}
    return dw1000_read_txtime((dw1000_dev_instance_t *)dev);
   1965e:	f002 ff9d 	bl	1c59c <dw1000_read_txtime>
}
   19662:	bd08      	pop	{r3, pc}

00019664 <uwb_dw1000_read_rxtime_lo32>:
{
   19664:	b508      	push	{r3, lr}
    return dw1000_read_rxtime_lo((dw1000_dev_instance_t *)dev);
   19666:	f002 ff92 	bl	1c58e <dw1000_read_rxtime_lo>
}
   1966a:	bd08      	pop	{r3, pc}

0001966c <uwb_dw1000_read_rxtime>:
{
   1966c:	b508      	push	{r3, lr}
    return dw1000_read_rxtime((dw1000_dev_instance_t *)dev);
   1966e:	f002 ff86 	bl	1c57e <dw1000_read_rxtime>
}
   19672:	bd08      	pop	{r3, pc}

00019674 <uwb_dw1000_read_systime_lo32>:
{
   19674:	b508      	push	{r3, lr}
    return dw1000_read_systime_lo((dw1000_dev_instance_t *)dev);
   19676:	f002 ff7b 	bl	1c570 <dw1000_read_systime_lo>
}
   1967a:	bd08      	pop	{r3, pc}

0001967c <uwb_dw1000_read_systime>:
{
   1967c:	b508      	push	{r3, lr}
    return dw1000_read_systime((dw1000_dev_instance_t *)dev);
   1967e:	f002 ff6f 	bl	1c560 <dw1000_read_systime>
}
   19682:	bd08      	pop	{r3, pc}

00019684 <uwb_dw1000_set_rxauto_disable>:
{
   19684:	b508      	push	{r3, lr}
    return dw1000_set_rxauto_disable((dw1000_dev_instance_t *)dev, disable);
   19686:	f001 fc1f 	bl	1aec8 <dw1000_set_rxauto_disable>
}
   1968a:	bd08      	pop	{r3, pc}

0001968c <uwb_dw1000_set_wait4resp_delay>:
{
   1968c:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp_delay((dw1000_dev_instance_t *)dev, delay);
   1968e:	f001 fd91 	bl	1b1b4 <dw1000_set_wait4resp_delay>
}
   19692:	bd08      	pop	{r3, pc}

00019694 <uwb_dw1000_set_wait4resp>:
{
   19694:	b508      	push	{r3, lr}
    return dw1000_set_wait4resp((dw1000_dev_instance_t *)dev, enable);
   19696:	f001 fbff 	bl	1ae98 <dw1000_set_wait4resp>
}
   1969a:	bd08      	pop	{r3, pc}

0001969c <uwb_dw1000_tx_wait>:
{
   1969c:	b508      	push	{r3, lr}
    return dw1000_tx_wait((dw1000_dev_instance_t *)dev, timeout);
   1969e:	f001 fa8f 	bl	1abc0 <dw1000_tx_wait>
}
   196a2:	bd08      	pop	{r3, pc}

000196a4 <uwb_dw1000_write_tx_fctrl>:
{
   196a4:	b508      	push	{r3, lr}
    dw1000_write_tx_fctrl((dw1000_dev_instance_t *)dev, tx_frame_length,
   196a6:	f001 f9af 	bl	1aa08 <dw1000_write_tx_fctrl>
}
   196aa:	bd08      	pop	{r3, pc}

000196ac <uwb_dw1000_write_tx>:
{
   196ac:	b508      	push	{r3, lr}
    return dw1000_write_tx((dw1000_dev_instance_t *)dev, tx_frame_bytes,
   196ae:	f001 f95e 	bl	1a96e <dw1000_write_tx>
}
   196b2:	bd08      	pop	{r3, pc}

000196b4 <uwb_dw1000_stop_rx>:
{
   196b4:	b508      	push	{r3, lr}
    return dw1000_stop_rx((dw1000_dev_instance_t *)dev);
   196b6:	f001 fb9b 	bl	1adf0 <dw1000_stop_rx>
}
   196ba:	bd08      	pop	{r3, pc}

000196bc <uwb_dw1000_start_rx>:
{
   196bc:	b508      	push	{r3, lr}
    return dw1000_start_rx((dw1000_dev_instance_t *)dev);
   196be:	f001 fac0 	bl	1ac42 <dw1000_start_rx>
}
   196c2:	bd08      	pop	{r3, pc}

000196c4 <uwb_dw1000_start_tx>:
{
   196c4:	b508      	push	{r3, lr}
    return dw1000_start_tx((dw1000_dev_instance_t *)dev);
   196c6:	f001 f9e0 	bl	1aa8a <dw1000_start_tx>
}
   196ca:	bd08      	pop	{r3, pc}

000196cc <uwb_dw1000_set_delay_start>:
{
   196cc:	b508      	push	{r3, lr}
    return dw1000_set_delay_start((dw1000_dev_instance_t *)dev, dx_time);
   196ce:	f001 fa83 	bl	1abd8 <dw1000_set_delay_start>
}
   196d2:	bd08      	pop	{r3, pc}

000196d4 <uwb_dw1000_set_abs_timeout>:
{
   196d4:	b508      	push	{r3, lr}
    return dw1000_set_abs_timeout((dw1000_dev_instance_t *)dev, rx_end);
   196d6:	f001 fc97 	bl	1b008 <dw1000_set_abs_timeout>
}
   196da:	bd08      	pop	{r3, pc}

000196dc <uwb_dw1000_set_rx_window>:
{
   196dc:	b500      	push	{lr}
   196de:	b083      	sub	sp, #12
    return dw1000_set_rx_window((dw1000_dev_instance_t *)dev, rx_start, rx_end);
   196e0:	ed9d 7b04 	vldr	d7, [sp, #16]
   196e4:	ed8d 7b00 	vstr	d7, [sp]
   196e8:	f001 fc6d 	bl	1afc6 <dw1000_set_rx_window>
}
   196ec:	b003      	add	sp, #12
   196ee:	f85d fb04 	ldr.w	pc, [sp], #4

000196f2 <uwb_dw1000_adj_rx_timeout>:
{
   196f2:	b508      	push	{r3, lr}
    return dw1000_adj_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   196f4:	b289      	uxth	r1, r1
   196f6:	f001 fbf0 	bl	1aeda <dw1000_adj_rx_timeout>
}
   196fa:	bd08      	pop	{r3, pc}

000196fc <uwb_dw1000_set_rx_timeout>:
{
   196fc:	b508      	push	{r3, lr}
    return dw1000_set_rx_timeout((dw1000_dev_instance_t *)dev, timeout);
   196fe:	b289      	uxth	r1, r1
   19700:	f001 fc0b 	bl	1af1a <dw1000_set_rx_timeout>
}
   19704:	bd08      	pop	{r3, pc}

00019706 <uwb_dw1000_set_dblrxbuf>:
{
   19706:	b508      	push	{r3, lr}
    return dw1000_set_dblrxbuff((dw1000_dev_instance_t *)dev, enable);
   19708:	f001 fd99 	bl	1b23e <dw1000_set_dblrxbuff>
}
   1970c:	bd08      	pop	{r3, pc}

0001970e <uwb_dw1000_txrf_power_value>:
{
   1970e:	b508      	push	{r3, lr}
    return dw1000_phy_txrf_power_value((dw1000_dev_instance_t *)dev, reg, coarse, fine);
   19710:	f003 fb9b 	bl	1ce4a <dw1000_phy_txrf_power_value>
}
   19714:	bd08      	pop	{r3, pc}

00019716 <uwb_dw1000_txrf_config>:
{
   19716:	b508      	push	{r3, lr}
    dw1000_phy_config_txrf((dw1000_dev_instance_t *)dev, config);
   19718:	f003 f8a2 	bl	1c860 <dw1000_phy_config_txrf>
}
   1971c:	bd08      	pop	{r3, pc}

0001971e <uwb_dw1000_mac_config>:
{
   1971e:	b508      	push	{r3, lr}
    return dw1000_mac_config((dw1000_dev_instance_t *)dev, config);
   19720:	f001 fdf2 	bl	1b308 <dw1000_mac_config>
}
   19724:	bd08      	pop	{r3, pc}
	...

00019728 <dw1000_read>:
{
   19728:	b570      	push	{r4, r5, r6, lr}
   1972a:	b084      	sub	sp, #16
   1972c:	4604      	mov	r4, r0
   1972e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   19732:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   19736:	f04f 0e00 	mov.w	lr, #0
   1973a:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   1973e:	4694      	mov	ip, r2
   19740:	3a00      	subs	r2, #0
   19742:	bf18      	it	ne
   19744:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   19746:	f362 1e86 	bfi	lr, r2, #6, #1
   1974a:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   1974e:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   19752:	bf94      	ite	ls
   19754:	2600      	movls	r6, #0
   19756:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   19758:	f366 2e08 	bfi	lr, r6, #8, #1
   1975c:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   19760:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    uint8_t header[] = {
   19764:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   19768:	fa4f f28c 	sxtb.w	r2, ip
   1976c:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   19770:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   19774:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   19778:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   1977c:	4a1b      	ldr	r2, [pc, #108]	; (197ec <dw1000_read+0xc4>)
   1977e:	ea0e 0202 	and.w	r2, lr, r2
   19782:	b122      	cbz	r2, 1978e <dw1000_read+0x66>
   19784:	f41e 7f80 	tst.w	lr, #256	; 0x100
   19788:	d01b      	beq.n	197c2 <dw1000_read+0x9a>
   1978a:	2203      	movs	r2, #3
   1978c:	e000      	b.n	19790 <dw1000_read+0x68>
   1978e:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19790:	293f      	cmp	r1, #63	; 0x3f
   19792:	d818      	bhi.n	197c6 <dw1000_read+0x9e>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19794:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   19798:	d11b      	bne.n	197d2 <dw1000_read+0xaa>
   1979a:	44ac      	add	ip, r5
   1979c:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   197a0:	da17      	bge.n	197d2 <dw1000_read+0xaa>
    if (length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   197a2:	2d08      	cmp	r5, #8
   197a4:	d904      	bls.n	197b0 <dw1000_read+0x88>
   197a6:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   197aa:	f011 0f01 	tst.w	r1, #1
   197ae:	d016      	beq.n	197de <dw1000_read+0xb6>
        hal_dw1000_read(inst, header, len, buffer, length);
   197b0:	9500      	str	r5, [sp, #0]
   197b2:	a903      	add	r1, sp, #12
   197b4:	4620      	mov	r0, r4
   197b6:	f000 fd47 	bl	1a248 <hal_dw1000_read>
}
   197ba:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   197be:	b004      	add	sp, #16
   197c0:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   197c2:	2202      	movs	r2, #2
   197c4:	e7e4      	b.n	19790 <dw1000_read+0x68>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   197c6:	2300      	movs	r3, #0
   197c8:	461a      	mov	r2, r3
   197ca:	4619      	mov	r1, r3
   197cc:	4618      	mov	r0, r3
   197ce:	f7ef fcf9 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   197d2:	2300      	movs	r3, #0
   197d4:	461a      	mov	r2, r3
   197d6:	4619      	mov	r1, r3
   197d8:	4618      	mov	r0, r3
   197da:	f7ef fcf3 	bl	91c4 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer, length);
   197de:	9500      	str	r5, [sp, #0]
   197e0:	a903      	add	r1, sp, #12
   197e2:	4620      	mov	r0, r4
   197e4:	f000 fd8c 	bl	1a300 <hal_dw1000_read_noblock>
   197e8:	e7e7      	b.n	197ba <dw1000_read+0x92>
   197ea:	bf00      	nop
   197ec:	00fffe00 	.word	0x00fffe00

000197f0 <dw1000_write>:
{
   197f0:	b570      	push	{r4, r5, r6, lr}
   197f2:	b084      	sub	sp, #16
   197f4:	4604      	mov	r4, r0
   197f6:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    dw1000_cmd_t cmd = {
   197fa:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   197fe:	f04f 0e00 	mov.w	lr, #0
   19802:	f360 0e05 	bfi	lr, r0, #0, #6
        .subindex = subaddress != 0,
   19806:	4694      	mov	ip, r2
   19808:	3a00      	subs	r2, #0
   1980a:	bf18      	it	ne
   1980c:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   1980e:	f362 1e86 	bfi	lr, r2, #6, #1
   19812:	f04e 0e80 	orr.w	lr, lr, #128	; 0x80
        .extended = subaddress > 0x7F,
   19816:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   1981a:	bf94      	ite	ls
   1981c:	2600      	movls	r6, #0
   1981e:	2601      	movhi	r6, #1
    dw1000_cmd_t cmd = {
   19820:	f366 2e08 	bfi	lr, r6, #8, #1
   19824:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   19828:	0192      	lsls	r2, r2, #6
   1982a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1982e:	4302      	orrs	r2, r0
    uint8_t header[] = {
   19830:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   19834:	fa4f f28c 	sxtb.w	r2, ip
   19838:	ea42 12c6 	orr.w	r2, r2, r6, lsl #7
    uint8_t header[] = {
   1983c:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   19840:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   19844:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19848:	4a1b      	ldr	r2, [pc, #108]	; (198b8 <dw1000_write+0xc8>)
   1984a:	ea0e 0202 	and.w	r2, lr, r2
   1984e:	b122      	cbz	r2, 1985a <dw1000_write+0x6a>
   19850:	f41e 7f80 	tst.w	lr, #256	; 0x100
   19854:	d01c      	beq.n	19890 <dw1000_write+0xa0>
   19856:	2203      	movs	r2, #3
   19858:	e000      	b.n	1985c <dw1000_write+0x6c>
   1985a:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   1985c:	293f      	cmp	r1, #63	; 0x3f
   1985e:	d819      	bhi.n	19894 <dw1000_write+0xa4>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19860:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   19864:	d11c      	bne.n	198a0 <dw1000_write+0xb0>
   19866:	44ac      	add	ip, r5
   19868:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   1986c:	da18      	bge.n	198a0 <dw1000_write+0xb0>
    if (len+length < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   1986e:	1951      	adds	r1, r2, r5
   19870:	2908      	cmp	r1, #8
   19872:	dd04      	ble.n	1987e <dw1000_write+0x8e>
   19874:	f894 152e 	ldrb.w	r1, [r4, #1326]	; 0x52e
   19878:	f011 0f01 	tst.w	r1, #1
   1987c:	d016      	beq.n	198ac <dw1000_write+0xbc>
        hal_dw1000_write(inst, header, len, buffer, length);
   1987e:	9500      	str	r5, [sp, #0]
   19880:	a903      	add	r1, sp, #12
   19882:	4620      	mov	r0, r4
   19884:	f000 fe72 	bl	1a56c <hal_dw1000_write>
}
   19888:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1988c:	b004      	add	sp, #16
   1988e:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19890:	2202      	movs	r2, #2
   19892:	e7e3      	b.n	1985c <dw1000_write+0x6c>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19894:	2300      	movs	r3, #0
   19896:	461a      	mov	r2, r3
   19898:	4619      	mov	r1, r3
   1989a:	4618      	mov	r0, r3
   1989c:	f7ef fc92 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   198a0:	2300      	movs	r3, #0
   198a2:	461a      	mov	r2, r3
   198a4:	4619      	mov	r1, r3
   198a6:	4618      	mov	r0, r3
   198a8:	f7ef fc8c 	bl	91c4 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer, length);
   198ac:	9500      	str	r5, [sp, #0]
   198ae:	a903      	add	r1, sp, #12
   198b0:	4620      	mov	r0, r4
   198b2:	f000 fea9 	bl	1a608 <hal_dw1000_write_noblock>
   198b6:	e7e7      	b.n	19888 <dw1000_write+0x98>
   198b8:	00fffe00 	.word	0x00fffe00

000198bc <dw1000_read_reg>:
{
   198bc:	b530      	push	{r4, r5, lr}
   198be:	b087      	sub	sp, #28
    } __attribute__((__packed__, aligned (8))) buffer = {0};
   198c0:	2400      	movs	r4, #0
   198c2:	2500      	movs	r5, #0
   198c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    dw1000_cmd_t cmd = {
   198c8:	f001 043f 	and.w	r4, r1, #63	; 0x3f
   198cc:	f04f 0e00 	mov.w	lr, #0
   198d0:	f364 0e05 	bfi	lr, r4, #0, #6
        .subindex = subaddress != 0,
   198d4:	4694      	mov	ip, r2
   198d6:	3a00      	subs	r2, #0
   198d8:	bf18      	it	ne
   198da:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   198dc:	f362 1e86 	bfi	lr, r2, #6, #1
   198e0:	f36f 1ec7 	bfc	lr, #7, #1
        .extended = subaddress > 0x7F,
   198e4:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   198e8:	bf94      	ite	ls
   198ea:	2500      	movls	r5, #0
   198ec:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   198ee:	f365 2e08 	bfi	lr, r5, #8, #1
   198f2:	f36c 2e57 	bfi	lr, ip, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   198f6:	ea44 1282 	orr.w	r2, r4, r2, lsl #6
    uint8_t header[] = {
   198fa:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   198fe:	fa4f f28c 	sxtb.w	r2, ip
   19902:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   19906:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   1990a:	f3cc 12c7 	ubfx	r2, ip, #7, #8
    uint8_t header[] = {
   1990e:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19912:	4a21      	ldr	r2, [pc, #132]	; (19998 <dw1000_read_reg+0xdc>)
   19914:	ea0e 0202 	and.w	r2, lr, r2
   19918:	b122      	cbz	r2, 19924 <dw1000_read_reg+0x68>
   1991a:	f41e 7f80 	tst.w	lr, #256	; 0x100
   1991e:	d01f      	beq.n	19960 <dw1000_read_reg+0xa4>
   19920:	2203      	movs	r2, #3
   19922:	e000      	b.n	19926 <dw1000_read_reg+0x6a>
   19924:	2201      	movs	r2, #1
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19926:	293f      	cmp	r1, #63	; 0x3f
   19928:	d81c      	bhi.n	19964 <dw1000_read_reg+0xa8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   1992a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   1992e:	d11f      	bne.n	19970 <dw1000_read_reg+0xb4>
   19930:	449c      	add	ip, r3
   19932:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
   19936:	d21b      	bcs.n	19970 <dw1000_read_reg+0xb4>
    assert(nbytes <= sizeof(uint64_t));
   19938:	2b08      	cmp	r3, #8
   1993a:	d81f      	bhi.n	1997c <dw1000_read_reg+0xc0>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   1993c:	18d1      	adds	r1, r2, r3
   1993e:	2908      	cmp	r1, #8
   19940:	d904      	bls.n	1994c <dw1000_read_reg+0x90>
   19942:	f890 152e 	ldrb.w	r1, [r0, #1326]	; 0x52e
   19946:	f011 0f01 	tst.w	r1, #1
   1994a:	d01d      	beq.n	19988 <dw1000_read_reg+0xcc>
        hal_dw1000_read(inst, header, len, buffer.array, nbytes);
   1994c:	b29b      	uxth	r3, r3
   1994e:	9300      	str	r3, [sp, #0]
   19950:	ab04      	add	r3, sp, #16
   19952:	a903      	add	r1, sp, #12
   19954:	f000 fc78 	bl	1a248 <hal_dw1000_read>
}
   19958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1995c:	b007      	add	sp, #28
   1995e:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19960:	2202      	movs	r2, #2
   19962:	e7e0      	b.n	19926 <dw1000_read_reg+0x6a>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19964:	2300      	movs	r3, #0
   19966:	461a      	mov	r2, r3
   19968:	4619      	mov	r1, r3
   1996a:	4618      	mov	r0, r3
   1996c:	f7ef fc2a 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19970:	2300      	movs	r3, #0
   19972:	461a      	mov	r2, r3
   19974:	4619      	mov	r1, r3
   19976:	4618      	mov	r0, r3
   19978:	f7ef fc24 	bl	91c4 <__assert_func>
    assert(nbytes <= sizeof(uint64_t));
   1997c:	2300      	movs	r3, #0
   1997e:	461a      	mov	r2, r3
   19980:	4619      	mov	r1, r3
   19982:	4618      	mov	r0, r3
   19984:	f7ef fc1e 	bl	91c4 <__assert_func>
        hal_dw1000_read_noblock(inst, header, len, buffer.array, nbytes);
   19988:	b29b      	uxth	r3, r3
   1998a:	9300      	str	r3, [sp, #0]
   1998c:	ab04      	add	r3, sp, #16
   1998e:	a903      	add	r1, sp, #12
   19990:	f000 fcb6 	bl	1a300 <hal_dw1000_read_noblock>
   19994:	e7e0      	b.n	19958 <dw1000_read_reg+0x9c>
   19996:	bf00      	nop
   19998:	00fffe00 	.word	0x00fffe00

0001999c <dw1000_write_reg>:
{
   1999c:	b530      	push	{r4, r5, lr}
   1999e:	b087      	sub	sp, #28
   199a0:	4604      	mov	r4, r0
   199a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    dw1000_cmd_t cmd = {
   199a4:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f
   199a8:	f04f 0c00 	mov.w	ip, #0
   199ac:	f36e 0c05 	bfi	ip, lr, #0, #6
        .subindex = subaddress != 0,
   199b0:	4613      	mov	r3, r2
   199b2:	3a00      	subs	r2, #0
   199b4:	bf18      	it	ne
   199b6:	2201      	movne	r2, #1
    dw1000_cmd_t cmd = {
   199b8:	f362 1c86 	bfi	ip, r2, #6, #1
   199bc:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
        .extended = subaddress > 0x7F,
   199c0:	2b7f      	cmp	r3, #127	; 0x7f
   199c2:	bf94      	ite	ls
   199c4:	2500      	movls	r5, #0
   199c6:	2501      	movhi	r5, #1
    dw1000_cmd_t cmd = {
   199c8:	f365 2c08 	bfi	ip, r5, #8, #1
   199cc:	f363 2c57 	bfi	ip, r3, #9, #15
        [0] = cmd.operation << 7 | cmd.subindex << 6 | cmd.reg,
   199d0:	0192      	lsls	r2, r2, #6
   199d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   199d6:	ea4e 0202 	orr.w	r2, lr, r2
    uint8_t header[] = {
   199da:	f88d 200c 	strb.w	r2, [sp, #12]
        [1] = cmd.extended << 7 | (uint8_t) (subaddress),
   199de:	b25a      	sxtb	r2, r3
   199e0:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
    uint8_t header[] = {
   199e4:	f88d 200d 	strb.w	r2, [sp, #13]
        [2] = (uint8_t) (subaddress >> 7)
   199e8:	f3c3 12c7 	ubfx	r2, r3, #7, #8
    uint8_t header[] = {
   199ec:	f88d 200e 	strb.w	r2, [sp, #14]
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   199f0:	4a25      	ldr	r2, [pc, #148]	; (19a88 <dw1000_write_reg+0xec>)
   199f2:	ea0c 0202 	and.w	r2, ip, r2
   199f6:	b122      	cbz	r2, 19a02 <dw1000_write_reg+0x66>
   199f8:	f41c 7f80 	tst.w	ip, #256	; 0x100
   199fc:	d022      	beq.n	19a44 <dw1000_write_reg+0xa8>
   199fe:	2203      	movs	r2, #3
   19a00:	e000      	b.n	19a04 <dw1000_write_reg+0x68>
   19a02:	2201      	movs	r2, #1
    buffer.value = val;
   19a04:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
   19a08:	ed8d 7b04 	vstr	d7, [sp, #16]
    assert(nbytes <= sizeof(uint64_t));
   19a0c:	2808      	cmp	r0, #8
   19a0e:	d81b      	bhi.n	19a48 <dw1000_write_reg+0xac>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19a10:	293f      	cmp	r1, #63	; 0x3f
   19a12:	d81f      	bhi.n	19a54 <dw1000_write_reg+0xb8>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19a14:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   19a18:	d122      	bne.n	19a60 <dw1000_write_reg+0xc4>
   19a1a:	4403      	add	r3, r0
   19a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19a20:	d21e      	bcs.n	19a60 <dw1000_write_reg+0xc4>
    if (len+nbytes < MYNEWT_VAL(DW1000_DEVICE_SPI_RD_MAX_NOBLOCK) ||
   19a22:	1813      	adds	r3, r2, r0
   19a24:	2b08      	cmp	r3, #8
   19a26:	d904      	bls.n	19a32 <dw1000_write_reg+0x96>
   19a28:	f894 352e 	ldrb.w	r3, [r4, #1326]	; 0x52e
   19a2c:	f013 0f01 	tst.w	r3, #1
   19a30:	d01c      	beq.n	19a6c <dw1000_write_reg+0xd0>
        hal_dw1000_write(inst, header, len, buffer.array, nbytes);
   19a32:	b280      	uxth	r0, r0
   19a34:	9000      	str	r0, [sp, #0]
   19a36:	ab04      	add	r3, sp, #16
   19a38:	a903      	add	r1, sp, #12
   19a3a:	4620      	mov	r0, r4
   19a3c:	f000 fd96 	bl	1a56c <hal_dw1000_write>
}
   19a40:	b007      	add	sp, #28
   19a42:	bd30      	pop	{r4, r5, pc}
    uint8_t len = cmd.subaddress?(cmd.extended?3:2):1;
   19a44:	2202      	movs	r2, #2
   19a46:	e7dd      	b.n	19a04 <dw1000_write_reg+0x68>
    assert(nbytes <= sizeof(uint64_t));
   19a48:	2300      	movs	r3, #0
   19a4a:	461a      	mov	r2, r3
   19a4c:	4619      	mov	r1, r3
   19a4e:	4618      	mov	r0, r3
   19a50:	f7ef fbb8 	bl	91c4 <__assert_func>
    assert(reg <= 0x3F); // Record number is limited to 6-bits.
   19a54:	2300      	movs	r3, #0
   19a56:	461a      	mov	r2, r3
   19a58:	4619      	mov	r1, r3
   19a5a:	4618      	mov	r0, r3
   19a5c:	f7ef fbb2 	bl	91c4 <__assert_func>
    assert((subaddress <= 0x7FFF) && ((subaddress + nbytes) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
   19a60:	2300      	movs	r3, #0
   19a62:	461a      	mov	r2, r3
   19a64:	4619      	mov	r1, r3
   19a66:	4618      	mov	r0, r3
   19a68:	f7ef fbac 	bl	91c4 <__assert_func>
        hal_dw1000_write_noblock(inst, header, len, buffer.array, nbytes);
   19a6c:	b280      	uxth	r0, r0
   19a6e:	9000      	str	r0, [sp, #0]
   19a70:	ab04      	add	r3, sp, #16
   19a72:	a903      	add	r1, sp, #12
   19a74:	4620      	mov	r0, r4
   19a76:	f000 fdc7 	bl	1a608 <hal_dw1000_write_noblock>
        hal_dw1000_rw_noblock_wait(inst, DPL_TIMEOUT_NEVER);
   19a7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19a7e:	4620      	mov	r0, r4
   19a80:	f000 feb4 	bl	1a7ec <hal_dw1000_rw_noblock_wait>
}
   19a84:	e7dc      	b.n	19a40 <dw1000_write_reg+0xa4>
   19a86:	bf00      	nop
   19a88:	00fffe00 	.word	0x00fffe00

00019a8c <uwb_dw1000_set_euid>:
{
   19a8c:	b500      	push	{lr}
   19a8e:	b085      	sub	sp, #20
    return dw1000_set_eui((dw1000_dev_instance_t *)dev, euid);
   19a90:	2108      	movs	r1, #8
   19a92:	9102      	str	r1, [sp, #8]
   19a94:	e9cd 2300 	strd	r2, r3, [sp]
   19a98:	2200      	movs	r2, #0
   19a9a:	2101      	movs	r1, #1
   19a9c:	f7ff ff7e 	bl	1999c <dw1000_write_reg>
}
   19aa0:	b005      	add	sp, #20
   19aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00019aa6 <uwb_dw1000_set_uid>:
{
   19aa6:	b500      	push	{lr}
   19aa8:	b085      	sub	sp, #20
    return dw1000_set_address16((dw1000_dev_instance_t *)dev, uid);
   19aaa:	2302      	movs	r3, #2
   19aac:	9302      	str	r3, [sp, #8]
   19aae:	2200      	movs	r2, #0
   19ab0:	9100      	str	r1, [sp, #0]
   19ab2:	9201      	str	r2, [sp, #4]
   19ab4:	2103      	movs	r1, #3
   19ab6:	f7ff ff71 	bl	1999c <dw1000_write_reg>
}
   19aba:	b005      	add	sp, #20
   19abc:	f85d fb04 	ldr.w	pc, [sp], #4

00019ac0 <uwb_dw1000_set_panid>:
{
   19ac0:	b500      	push	{lr}
   19ac2:	b085      	sub	sp, #20
    return dw1000_set_panid((dw1000_dev_instance_t *)dev, pan_id);
   19ac4:	2202      	movs	r2, #2
   19ac6:	9202      	str	r2, [sp, #8]
   19ac8:	9100      	str	r1, [sp, #0]
   19aca:	2300      	movs	r3, #0
   19acc:	9301      	str	r3, [sp, #4]
   19ace:	2103      	movs	r1, #3
   19ad0:	f7ff ff64 	bl	1999c <dw1000_write_reg>
}
   19ad4:	b005      	add	sp, #20
   19ad6:	f85d fb04 	ldr.w	pc, [sp], #4

00019ada <dw1000_softreset>:
{
   19ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ade:	b084      	sub	sp, #16
   19ae0:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   19ae2:	f002 fe0b 	bl	1c6fc <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   19ae6:	f04f 0802 	mov.w	r8, #2
   19aea:	f8cd 8008 	str.w	r8, [sp, #8]
   19aee:	2600      	movs	r6, #0
   19af0:	2700      	movs	r7, #0
   19af2:	e9cd 6700 	strd	r6, r7, [sp]
   19af6:	2204      	movs	r2, #4
   19af8:	2136      	movs	r1, #54	; 0x36
   19afa:	4620      	mov	r0, r4
   19afc:	f7ff ff4e 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, 0x0, sizeof(uint16_t)); // Clear any AON auto download bits (as reset will trigger AON download)
   19b00:	f8cd 8008 	str.w	r8, [sp, #8]
   19b04:	e9cd 6700 	strd	r6, r7, [sp]
   19b08:	2200      	movs	r2, #0
   19b0a:	212c      	movs	r1, #44	; 0x2c
   19b0c:	4620      	mov	r0, r4
   19b0e:	f7ff ff45 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, 0x0, sizeof(uint8_t));  // Clear the wake-up configuration
   19b12:	2501      	movs	r5, #1
   19b14:	9502      	str	r5, [sp, #8]
   19b16:	e9cd 6700 	strd	r6, r7, [sp]
   19b1a:	2206      	movs	r2, #6
   19b1c:	212c      	movs	r1, #44	; 0x2c
   19b1e:	4620      	mov	r0, r4
   19b20:	f7ff ff3c 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint8_t)); // Clear the register
   19b24:	9502      	str	r5, [sp, #8]
   19b26:	e9cd 6700 	strd	r6, r7, [sp]
   19b2a:	4642      	mov	r2, r8
   19b2c:	212c      	movs	r1, #44	; 0x2c
   19b2e:	4620      	mov	r0, r4
   19b30:	f7ff ff34 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint8_t));
   19b34:	9502      	str	r5, [sp, #8]
   19b36:	2202      	movs	r2, #2
   19b38:	2300      	movs	r3, #0
   19b3a:	e9cd 2300 	strd	r2, r3, [sp]
   19b3e:	4642      	mov	r2, r8
   19b40:	212c      	movs	r1, #44	; 0x2c
   19b42:	4620      	mov	r0, r4
   19b44:	f7ff ff2a 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL, sizeof(uint8_t));// Reset HIF, TX, RX and PMSC
   19b48:	9502      	str	r5, [sp, #8]
   19b4a:	e9cd 6700 	strd	r6, r7, [sp]
   19b4e:	2203      	movs	r2, #3
   19b50:	2136      	movs	r1, #54	; 0x36
   19b52:	4620      	mov	r0, r4
   19b54:	f7ff ff22 	bl	1999c <dw1000_write_reg>
    dpl_cputime_delay_usecs(10);
   19b58:	200a      	movs	r0, #10
   19b5a:	f7f8 fec6 	bl	128ea <dpl_cputime_delay_usecs>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t)); // Clear reset
   19b5e:	9502      	str	r5, [sp, #8]
   19b60:	22f0      	movs	r2, #240	; 0xf0
   19b62:	2300      	movs	r3, #0
   19b64:	e9cd 2300 	strd	r2, r3, [sp]
   19b68:	2203      	movs	r2, #3
   19b6a:	2136      	movs	r1, #54	; 0x36
   19b6c:	4620      	mov	r0, r4
   19b6e:	f7ff ff15 	bl	1999c <dw1000_write_reg>
}
   19b72:	b004      	add	sp, #16
   19b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019b78 <dw1000_dev_configure_sleep>:
{
   19b78:	b530      	push	{r4, r5, lr}
   19b7a:	b085      	sub	sp, #20
   19b7c:	4604      	mov	r4, r0
    uint16_t reg = dw1000_read_reg(inst, AON_ID, AON_WCFG_OFFSET, sizeof(uint16_t));
   19b7e:	2302      	movs	r3, #2
   19b80:	2200      	movs	r2, #0
   19b82:	212c      	movs	r1, #44	; 0x2c
   19b84:	f7ff fe9a 	bl	198bc <dw1000_read_reg>
   19b88:	b283      	uxth	r3, r0
    if (inst->uwb_dev.status.LDE_enabled)
   19b8a:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   19b8e:	f012 0f10 	tst.w	r2, #16
   19b92:	d03a      	beq.n	19c0a <dw1000_dev_configure_sleep+0x92>
        reg |= AON_WCFG_ONW_LLDE;
   19b94:	f443 630c 	orr.w	r3, r3, #2240	; 0x8c0
    if (inst->uwb_dev.status.LDO_enabled)
   19b98:	f012 0f20 	tst.w	r2, #32
   19b9c:	d03a      	beq.n	19c14 <dw1000_dev_configure_sleep+0x9c>
        reg |= AON_WCFG_ONW_LLDO;
   19b9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    if (inst->uwb_dev.config.wakeup_rx_enable)
   19ba2:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d
   19ba6:	f012 0f10 	tst.w	r2, #16
   19baa:	d037      	beq.n	19c1c <dw1000_dev_configure_sleep+0xa4>
        reg |= AON_WCFG_ONW_RX;
   19bac:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET, reg, sizeof(uint16_t));
   19bb0:	2502      	movs	r5, #2
   19bb2:	9502      	str	r5, [sp, #8]
   19bb4:	2200      	movs	r2, #0
   19bb6:	9300      	str	r3, [sp, #0]
   19bb8:	9201      	str	r2, [sp, #4]
   19bba:	212c      	movs	r1, #44	; 0x2c
   19bbc:	4620      	mov	r0, r4
   19bbe:	f7ff feed 	bl	1999c <dw1000_write_reg>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG0_OFFSET, sizeof(uint16_t));
   19bc2:	462b      	mov	r3, r5
   19bc4:	2206      	movs	r2, #6
   19bc6:	212c      	movs	r1, #44	; 0x2c
   19bc8:	4620      	mov	r0, r4
   19bca:	f7ff fe77 	bl	198bc <dw1000_read_reg>
   19bce:	b280      	uxth	r0, r0
    inst->uwb_dev.status.sleep_enabled = inst->uwb_dev.config.sleep_enable;
   19bd0:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   19bd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19bd8:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   19bdc:	f363 12c7 	bfi	r2, r3, #7, #1
   19be0:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    if (inst->uwb_dev.status.sleep_enabled)
   19be4:	b253      	sxtb	r3, r2
   19be6:	2b00      	cmp	r3, #0
   19be8:	db1c      	blt.n	19c24 <dw1000_dev_configure_sleep+0xac>
        reg &= ~(AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN);
   19bea:	f020 0009 	bic.w	r0, r0, #9
   19bee:	f040 0006 	orr.w	r0, r0, #6
    dw1000_write_reg(inst, AON_ID, AON_CFG0_OFFSET, reg, sizeof(uint16_t));
   19bf2:	2302      	movs	r3, #2
   19bf4:	9302      	str	r3, [sp, #8]
   19bf6:	9000      	str	r0, [sp, #0]
   19bf8:	2300      	movs	r3, #0
   19bfa:	9301      	str	r3, [sp, #4]
   19bfc:	2206      	movs	r2, #6
   19bfe:	212c      	movs	r1, #44	; 0x2c
   19c00:	4620      	mov	r0, r4
   19c02:	f7ff fecb 	bl	1999c <dw1000_write_reg>
}
   19c06:	b005      	add	sp, #20
   19c08:	bd30      	pop	{r4, r5, pc}
        reg &= ~AON_WCFG_ONW_LLDE;
   19c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   19c0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   19c12:	e7c1      	b.n	19b98 <dw1000_dev_configure_sleep+0x20>
        reg &= ~AON_WCFG_ONW_LLDO;
   19c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19c18:	b29b      	uxth	r3, r3
   19c1a:	e7c2      	b.n	19ba2 <dw1000_dev_configure_sleep+0x2a>
        reg &= ~AON_WCFG_ONW_RX;
   19c1c:	f023 0302 	bic.w	r3, r3, #2
   19c20:	b29b      	uxth	r3, r3
   19c22:	e7c5      	b.n	19bb0 <dw1000_dev_configure_sleep+0x38>
        reg |= AON_CFG0_WAKE_CNT | AON_CFG0_SLEEP_EN;
   19c24:	f040 000f 	orr.w	r0, r0, #15
   19c28:	e7e3      	b.n	19bf2 <dw1000_dev_configure_sleep+0x7a>

00019c2a <uwb_dw1000_sleep_config>:
{
   19c2a:	b508      	push	{r3, lr}
    dw1000_dev_configure_sleep((dw1000_dev_instance_t *)dev);
   19c2c:	f7ff ffa4 	bl	19b78 <dw1000_dev_configure_sleep>
}
   19c30:	bd08      	pop	{r3, pc}

00019c32 <dw1000_dev_enter_sleep>:
{
   19c32:	b570      	push	{r4, r5, r6, lr}
   19c34:	b084      	sub	sp, #16
   19c36:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19c38:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   19c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19c40:	4628      	mov	r0, r5
   19c42:	f7f1 f865 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   19c46:	b148      	cbz	r0, 19c5c <dw1000_dev_enter_sleep+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   19c48:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19c4c:	f043 0308 	orr.w	r3, r3, #8
   19c50:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   19c54:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19c58:	b004      	add	sp, #16
   19c5a:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, 0x0, sizeof(uint16_t));
   19c5c:	2602      	movs	r6, #2
   19c5e:	9602      	str	r6, [sp, #8]
   19c60:	2200      	movs	r2, #0
   19c62:	2300      	movs	r3, #0
   19c64:	e9cd 2300 	strd	r2, r3, [sp]
   19c68:	4632      	mov	r2, r6
   19c6a:	212c      	movs	r1, #44	; 0x2c
   19c6c:	4620      	mov	r0, r4
   19c6e:	f7ff fe95 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE, sizeof(uint16_t));
   19c72:	9602      	str	r6, [sp, #8]
   19c74:	2202      	movs	r2, #2
   19c76:	2300      	movs	r3, #0
   19c78:	e9cd 2300 	strd	r2, r3, [sp]
   19c7c:	4632      	mov	r2, r6
   19c7e:	212c      	movs	r1, #44	; 0x2c
   19c80:	4620      	mov	r0, r4
   19c82:	f7ff fe8b 	bl	1999c <dw1000_write_reg>
    inst->uwb_dev.status.sleeping = 1;
   19c86:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19c8a:	f043 0301 	orr.w	r3, r3, #1
   19c8e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19c92:	4628      	mov	r0, r5
   19c94:	f7f0 ffe0 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   19c98:	2800      	cmp	r0, #0
   19c9a:	d0db      	beq.n	19c54 <dw1000_dev_enter_sleep+0x22>
   19c9c:	2300      	movs	r3, #0
   19c9e:	461a      	mov	r2, r3
   19ca0:	4619      	mov	r1, r3
   19ca2:	4618      	mov	r0, r3
   19ca4:	f7ef fa8e 	bl	91c4 <__assert_func>

00019ca8 <uwb_dw1000_enter_sleep>:
{
   19ca8:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep((dw1000_dev_instance_t *)dev);
   19caa:	f7ff ffc2 	bl	19c32 <dw1000_dev_enter_sleep>
}
   19cae:	bd08      	pop	{r3, pc}

00019cb0 <dw1000_dev_wakeup>:
{
   19cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19cb2:	b085      	sub	sp, #20
   19cb4:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   19cb6:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   19cba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19cbe:	4630      	mov	r0, r6
   19cc0:	f7f1 f826 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   19cc4:	b148      	cbz	r0, 19cda <dw1000_dev_wakeup+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   19cc6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   19cca:	f043 0308 	orr.w	r3, r3, #8
   19cce:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   19cd2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19cd6:	b005      	add	sp, #20
   19cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.sleeping = 0;
   19cda:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19cde:	f36f 0300 	bfc	r3, #0, #1
   19ce2:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   19ce6:	2304      	movs	r3, #4
   19ce8:	2200      	movs	r2, #0
   19cea:	4611      	mov	r1, r2
   19cec:	4620      	mov	r0, r4
   19cee:	f7ff fde5 	bl	198bc <dw1000_read_reg>
    int timeout=5;
   19cf2:	2505      	movs	r5, #5
    while (devid != 0xDECA0130 && --timeout)
   19cf4:	e008      	b.n	19d08 <dw1000_dev_wakeup+0x58>
        hal_dw1000_wakeup(inst);
   19cf6:	4620      	mov	r0, r4
   19cf8:	f000 fd96 	bl	1a828 <hal_dw1000_wakeup>
        devid = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   19cfc:	2304      	movs	r3, #4
   19cfe:	2200      	movs	r2, #0
   19d00:	4611      	mov	r1, r2
   19d02:	4620      	mov	r0, r4
   19d04:	f7ff fdda 	bl	198bc <dw1000_read_reg>
    while (devid != 0xDECA0130 && --timeout)
   19d08:	4b29      	ldr	r3, [pc, #164]	; (19db0 <dw1000_dev_wakeup+0x100>)
   19d0a:	4298      	cmp	r0, r3
   19d0c:	d001      	beq.n	19d12 <dw1000_dev_wakeup+0x62>
   19d0e:	3d01      	subs	r5, #1
   19d10:	d1f1      	bne.n	19cf6 <dw1000_dev_wakeup+0x46>
    inst->uwb_dev.status.sleeping = (devid != DWT_DEVICE_ID);
   19d12:	4b27      	ldr	r3, [pc, #156]	; (19db0 <dw1000_dev_wakeup+0x100>)
   19d14:	1ac0      	subs	r0, r0, r3
   19d16:	bf18      	it	ne
   19d18:	2001      	movne	r0, #1
   19d1a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   19d1e:	f360 0300 	bfi	r3, r0, #0, #1
   19d22:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT, sizeof(uint32_t));
   19d26:	2504      	movs	r5, #4
   19d28:	9502      	str	r5, [sp, #8]
   19d2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   19d2e:	2300      	movs	r3, #0
   19d30:	e9cd 2300 	strd	r2, r3, [sp]
   19d34:	2200      	movs	r2, #0
   19d36:	210f      	movs	r1, #15
   19d38:	4620      	mov	r0, r4
   19d3a:	f7ff fe2f 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_ERR, sizeof(uint32_t));
   19d3e:	9502      	str	r5, [sp, #8]
   19d40:	a319      	add	r3, pc, #100	; (adr r3, 19da8 <dw1000_dev_wakeup+0xf8>)
   19d42:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d46:	e9cd 2300 	strd	r2, r3, [sp]
   19d4a:	2200      	movs	r2, #0
   19d4c:	210f      	movs	r1, #15
   19d4e:	4620      	mov	r0, r4
   19d50:	f7ff fe24 	bl	1999c <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   19d54:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   19d58:	2702      	movs	r7, #2
   19d5a:	9702      	str	r7, [sp, #8]
   19d5c:	2500      	movs	r5, #0
   19d5e:	9300      	str	r3, [sp, #0]
   19d60:	9501      	str	r5, [sp, #4]
   19d62:	f641 0204 	movw	r2, #6148	; 0x1804
   19d66:	212e      	movs	r1, #46	; 0x2e
   19d68:	4620      	mov	r0, r4
   19d6a:	f7ff fe17 	bl	1999c <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   19d6e:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   19d72:	9702      	str	r7, [sp, #8]
   19d74:	9300      	str	r3, [sp, #0]
   19d76:	9501      	str	r5, [sp, #4]
   19d78:	462a      	mov	r2, r5
   19d7a:	2118      	movs	r1, #24
   19d7c:	4620      	mov	r0, r4
   19d7e:	f7ff fe0d 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   19d82:	4630      	mov	r0, r6
   19d84:	f7f0 ff68 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   19d88:	b940      	cbnz	r0, 19d9c <dw1000_dev_wakeup+0xec>
   19d8a:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0) {
   19d8e:	2b00      	cmp	r3, #0
   19d90:	d19f      	bne.n	19cd2 <dw1000_dev_wakeup+0x22>
    return (dpl_error_t)os_sem_release(&sem->sem);
   19d92:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   19d96:	f7f0 f969 	bl	a06c <os_sem_release>
   19d9a:	e79a      	b.n	19cd2 <dw1000_dev_wakeup+0x22>
    assert(err == DPL_OK);
   19d9c:	462b      	mov	r3, r5
   19d9e:	462a      	mov	r2, r5
   19da0:	4629      	mov	r1, r5
   19da2:	4628      	mov	r0, r5
   19da4:	f7ef fa0e 	bl	91c4 <__assert_func>
   19da8:	24119000 	.word	0x24119000
   19dac:	00000000 	.word	0x00000000
   19db0:	deca0130 	.word	0xdeca0130

00019db4 <dw1000_dev_config>:
{
   19db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19db6:	b085      	sub	sp, #20
   19db8:	4604      	mov	r4, r0
    int timeout = 3;
   19dba:	2503      	movs	r5, #3
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   19dbc:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
   19dc0:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    hal_dw1000_reset(inst);
   19dc4:	4620      	mov	r0, r4
   19dc6:	f000 fa15 	bl	1a1f4 <hal_dw1000_reset>
    rc = hal_spi_disable(inst->spi_num);
   19dca:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19dce:	f004 fe35 	bl	1ea3c <hal_spi_disable>
    assert(rc == 0);
   19dd2:	bb48      	cbnz	r0, 19e28 <dw1000_dev_config+0x74>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   19dd4:	f204 5694 	addw	r6, r4, #1428	; 0x594
   19dd8:	4631      	mov	r1, r6
   19dda:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19dde:	f004 fdeb 	bl	1e9b8 <hal_spi_config>
    assert(rc == 0);
   19de2:	bb38      	cbnz	r0, 19e34 <dw1000_dev_config+0x80>
    rc = hal_spi_enable(inst->spi_num);
   19de4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19de8:	f004 fe02 	bl	1e9f0 <hal_spi_enable>
    assert(rc == 0);
   19dec:	bb40      	cbnz	r0, 19e40 <dw1000_dev_config+0x8c>
    inst->uwb_dev.device_id = dw1000_read_reg(inst, DEV_ID_ID, 0, sizeof(uint32_t));
   19dee:	2304      	movs	r3, #4
   19df0:	2200      	movs	r2, #0
   19df2:	4611      	mov	r1, r2
   19df4:	4620      	mov	r0, r4
   19df6:	f7ff fd61 	bl	198bc <dw1000_read_reg>
   19dfa:	f8c4 04c8 	str.w	r0, [r4, #1224]	; 0x4c8
    inst->uwb_dev.status.initialized = (inst->uwb_dev.device_id == DWT_DEVICE_ID);
   19dfe:	4b55      	ldr	r3, [pc, #340]	; (19f54 <dw1000_dev_config+0x1a0>)
   19e00:	4298      	cmp	r0, r3
   19e02:	bf14      	ite	ne
   19e04:	2000      	movne	r0, #0
   19e06:	2001      	moveq	r0, #1
   19e08:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   19e0c:	f360 0341 	bfi	r3, r0, #1, #1
   19e10:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if (!inst->uwb_dev.status.initialized && --timeout)
   19e14:	b2db      	uxtb	r3, r3
   19e16:	f013 0302 	ands.w	r3, r3, #2
   19e1a:	d117      	bne.n	19e4c <dw1000_dev_config+0x98>
   19e1c:	3d01      	subs	r5, #1
   19e1e:	d015      	beq.n	19e4c <dw1000_dev_config+0x98>
        dw1000_dev_wakeup(inst);
   19e20:	4620      	mov	r0, r4
   19e22:	f7ff ff45 	bl	19cb0 <dw1000_dev_wakeup>
        goto retry;
   19e26:	e7c9      	b.n	19dbc <dw1000_dev_config+0x8>
    assert(rc == 0);
   19e28:	2300      	movs	r3, #0
   19e2a:	461a      	mov	r2, r3
   19e2c:	4619      	mov	r1, r3
   19e2e:	4618      	mov	r0, r3
   19e30:	f7ef f9c8 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19e34:	2300      	movs	r3, #0
   19e36:	461a      	mov	r2, r3
   19e38:	4619      	mov	r1, r3
   19e3a:	4618      	mov	r0, r3
   19e3c:	f7ef f9c2 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19e40:	2300      	movs	r3, #0
   19e42:	461a      	mov	r2, r3
   19e44:	4619      	mov	r1, r3
   19e46:	4618      	mov	r0, r3
   19e48:	f7ef f9bc 	bl	91c4 <__assert_func>
    if(!inst->uwb_dev.status.initialized)
   19e4c:	2b00      	cmp	r3, #0
   19e4e:	d07f      	beq.n	19f50 <dw1000_dev_config+0x19c>
    dw1000_phy_init(inst, NULL);
   19e50:	2100      	movs	r1, #0
   19e52:	4620      	mov	r0, r4
   19e54:	f002 fd1e 	bl	1c894 <dw1000_phy_init>
    inst->spi_settings.baudrate = inst->spi_baudrate;
   19e58:	f8d4 3554 	ldr.w	r3, [r4, #1364]	; 0x554
   19e5c:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   19e60:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19e64:	f004 fdea 	bl	1ea3c <hal_spi_disable>
    assert(rc == 0);
   19e68:	2800      	cmp	r0, #0
   19e6a:	d15f      	bne.n	19f2c <dw1000_dev_config+0x178>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   19e6c:	4631      	mov	r1, r6
   19e6e:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19e72:	f004 fda1 	bl	1e9b8 <hal_spi_config>
    assert(rc == 0);
   19e76:	2800      	cmp	r0, #0
   19e78:	d15e      	bne.n	19f38 <dw1000_dev_config+0x184>
    rc = hal_spi_enable(inst->spi_num);
   19e7a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   19e7e:	f004 fdb7 	bl	1e9f0 <hal_spi_enable>
    assert(rc == 0);
   19e82:	4607      	mov	r7, r0
   19e84:	2800      	cmp	r0, #0
   19e86:	d15d      	bne.n	19f44 <dw1000_dev_config+0x190>
    inst->uwb_dev.pan_id = MYNEWT_VAL(PANID);
   19e88:	f64d 63ca 	movw	r3, #57034	; 0xdeca
   19e8c:	f8a4 34c0 	strh.w	r3, [r4, #1216]	; 0x4c0
    inst->uwb_dev.uid = inst->part_id & 0xffff;
   19e90:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
   19e94:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    if (inst == hal_dw1000_inst(0)) {
   19e98:	2000      	movs	r0, #0
   19e9a:	f000 f99f 	bl	1a1dc <hal_dw1000_inst>
   19e9e:	4284      	cmp	r4, r0
   19ea0:	d007      	beq.n	19eb2 <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(1)){
   19ea2:	2001      	movs	r0, #1
   19ea4:	f000 f99a 	bl	1a1dc <hal_dw1000_inst>
   19ea8:	4284      	cmp	r4, r0
   19eaa:	d002      	beq.n	19eb2 <dw1000_dev_config+0xfe>
    } else if (inst == hal_dw1000_inst(2)){
   19eac:	2002      	movs	r0, #2
   19eae:	f000 f995 	bl	1a1dc <hal_dw1000_inst>
    inst->uwb_dev.euid = (((uint64_t)inst->lot_id) << 32) + inst->part_id;
   19eb2:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
   19eb6:	f8d4 1574 	ldr.w	r1, [r4, #1396]	; 0x574
   19eba:	f8c4 14b8 	str.w	r1, [r4, #1208]	; 0x4b8
   19ebe:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
    dw1000_mac_init(inst, NULL);
   19ec2:	2100      	movs	r1, #0
   19ec4:	4620      	mov	r0, r4
   19ec6:	f001 fd1d 	bl	1b904 <dw1000_mac_init>
    if (!inst->uwb_dev.uid || inst->uwb_dev.uid == 0xFFFF) {
   19eca:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19ece:	3b01      	subs	r3, #1
   19ed0:	b29b      	uxth	r3, r3
   19ed2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   19ed6:	4293      	cmp	r3, r2
   19ed8:	d902      	bls.n	19ee0 <dw1000_dev_config+0x12c>
        inst->uwb_dev.uid = 0x1;
   19eda:	2301      	movs	r3, #1
   19edc:	f8a4 34b6 	strh.w	r3, [r4, #1206]	; 0x4b6
    dw1000_set_panid(inst,inst->uwb_dev.pan_id);
   19ee0:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
   19ee4:	2602      	movs	r6, #2
   19ee6:	9602      	str	r6, [sp, #8]
   19ee8:	2500      	movs	r5, #0
   19eea:	9300      	str	r3, [sp, #0]
   19eec:	9501      	str	r5, [sp, #4]
   19eee:	4632      	mov	r2, r6
   19ef0:	2103      	movs	r1, #3
   19ef2:	4620      	mov	r0, r4
   19ef4:	f7ff fd52 	bl	1999c <dw1000_write_reg>
    dw1000_set_eui(inst,inst->uwb_dev.euid);
   19ef8:	2308      	movs	r3, #8
   19efa:	9302      	str	r3, [sp, #8]
   19efc:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
   19f00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   19f04:	e9cd 2300 	strd	r2, r3, [sp]
   19f08:	462a      	mov	r2, r5
   19f0a:	2101      	movs	r1, #1
   19f0c:	4620      	mov	r0, r4
   19f0e:	f7ff fd45 	bl	1999c <dw1000_write_reg>
    dw1000_set_address16(inst,inst->uwb_dev.uid);
   19f12:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   19f16:	9602      	str	r6, [sp, #8]
   19f18:	9300      	str	r3, [sp, #0]
   19f1a:	9501      	str	r5, [sp, #4]
   19f1c:	462a      	mov	r2, r5
   19f1e:	2103      	movs	r1, #3
   19f20:	4620      	mov	r0, r4
   19f22:	f7ff fd3b 	bl	1999c <dw1000_write_reg>
}
   19f26:	4638      	mov	r0, r7
   19f28:	b005      	add	sp, #20
   19f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(rc == 0);
   19f2c:	2300      	movs	r3, #0
   19f2e:	461a      	mov	r2, r3
   19f30:	4619      	mov	r1, r3
   19f32:	4618      	mov	r0, r3
   19f34:	f7ef f946 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19f38:	2300      	movs	r3, #0
   19f3a:	461a      	mov	r2, r3
   19f3c:	4619      	mov	r1, r3
   19f3e:	4618      	mov	r0, r3
   19f40:	f7ef f940 	bl	91c4 <__assert_func>
    assert(rc == 0);
   19f44:	2300      	movs	r3, #0
   19f46:	461a      	mov	r2, r3
   19f48:	4619      	mov	r1, r3
   19f4a:	4618      	mov	r0, r3
   19f4c:	f7ef f93a 	bl	91c4 <__assert_func>
        return DPL_TIMEOUT;
   19f50:	2706      	movs	r7, #6
   19f52:	e7e8      	b.n	19f26 <dw1000_dev_config+0x172>
   19f54:	deca0130 	.word	0xdeca0130

00019f58 <uwb_dw1000_wakeup>:
{
   19f58:	b508      	push	{r3, lr}
    return dw1000_dev_wakeup((dw1000_dev_instance_t *)dev);
   19f5a:	f7ff fea9 	bl	19cb0 <dw1000_dev_wakeup>
}
   19f5e:	bd08      	pop	{r3, pc}

00019f60 <dw1000_dev_enter_sleep_after_tx>:
{
   19f60:	b530      	push	{r4, r5, lr}
   19f62:	b085      	sub	sp, #20
   19f64:	4604      	mov	r4, r0
   19f66:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   19f68:	2304      	movs	r3, #4
   19f6a:	461a      	mov	r2, r3
   19f6c:	2136      	movs	r1, #54	; 0x36
   19f6e:	f7ff fca5 	bl	198bc <dw1000_read_reg>
    inst->control.sleep_after_tx = enable;
   19f72:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   19f76:	f365 13c7 	bfi	r3, r5, #7, #1
   19f7a:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.sleep_after_tx)
   19f7e:	b25b      	sxtb	r3, r3
   19f80:	2b00      	cmp	r3, #0
   19f82:	db0e      	blt.n	19fa2 <dw1000_dev_enter_sleep_after_tx+0x42>
        reg &= ~(PMSC_CTRL1_ATXSLP);
   19f84:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   19f88:	2204      	movs	r2, #4
   19f8a:	9202      	str	r2, [sp, #8]
   19f8c:	9000      	str	r0, [sp, #0]
   19f8e:	2300      	movs	r3, #0
   19f90:	9301      	str	r3, [sp, #4]
   19f92:	2136      	movs	r1, #54	; 0x36
   19f94:	4620      	mov	r0, r4
   19f96:	f7ff fd01 	bl	1999c <dw1000_write_reg>
}
   19f9a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19f9e:	b005      	add	sp, #20
   19fa0:	bd30      	pop	{r4, r5, pc}
        reg |= PMSC_CTRL1_ATXSLP;
   19fa2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   19fa6:	e7ef      	b.n	19f88 <dw1000_dev_enter_sleep_after_tx+0x28>

00019fa8 <uwb_dw1000_enter_sleep_after_tx>:
{
   19fa8:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_tx((dw1000_dev_instance_t *)dev, enable);
   19faa:	f7ff ffd9 	bl	19f60 <dw1000_dev_enter_sleep_after_tx>
}
   19fae:	bd08      	pop	{r3, pc}

00019fb0 <dw1000_dev_enter_sleep_after_rx>:
{
   19fb0:	b530      	push	{r4, r5, lr}
   19fb2:	b085      	sub	sp, #20
   19fb4:	4604      	mov	r4, r0
   19fb6:	460d      	mov	r5, r1
    uint32_t reg = dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t));
   19fb8:	2304      	movs	r3, #4
   19fba:	461a      	mov	r2, r3
   19fbc:	2136      	movs	r1, #54	; 0x36
   19fbe:	f7ff fc7d 	bl	198bc <dw1000_read_reg>
    inst->control.sleep_after_rx = enable;
   19fc2:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   19fc6:	f365 0300 	bfi	r3, r5, #0, #1
   19fca:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    if(inst->control.sleep_after_rx)
   19fce:	b2db      	uxtb	r3, r3
   19fd0:	f013 0f01 	tst.w	r3, #1
   19fd4:	d00e      	beq.n	19ff4 <dw1000_dev_enter_sleep_after_rx+0x44>
        reg |= PMSC_CTRL1_ARXSLP;
   19fd6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, reg, sizeof(uint32_t));
   19fda:	2204      	movs	r2, #4
   19fdc:	9202      	str	r2, [sp, #8]
   19fde:	9000      	str	r0, [sp, #0]
   19fe0:	2300      	movs	r3, #0
   19fe2:	9301      	str	r3, [sp, #4]
   19fe4:	2136      	movs	r1, #54	; 0x36
   19fe6:	4620      	mov	r0, r4
   19fe8:	f7ff fcd8 	bl	1999c <dw1000_write_reg>
}
   19fec:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19ff0:	b005      	add	sp, #20
   19ff2:	bd30      	pop	{r4, r5, pc}
        reg &= ~(PMSC_CTRL1_ARXSLP);
   19ff4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
   19ff8:	e7ef      	b.n	19fda <dw1000_dev_enter_sleep_after_rx+0x2a>

00019ffa <uwb_dw1000_enter_sleep_after_rx>:
{
   19ffa:	b508      	push	{r3, lr}
    return dw1000_dev_enter_sleep_after_rx((dw1000_dev_instance_t *)dev, enable);
   19ffc:	f7ff ffd8 	bl	19fb0 <dw1000_dev_enter_sleep_after_rx>
}
   1a000:	bd08      	pop	{r3, pc}
	...

0001a004 <dw1000_dev_init>:
 * @param arg   Argument to set as pointer to struct dw1000_dev_cfg.
 * @return DPL_OK on success
 */
int
dw1000_dev_init(struct os_dev *odev, void *arg)
{
   1a004:	b538      	push	{r3, r4, r5, lr}
   1a006:	4604      	mov	r4, r0
   1a008:	460d      	mov	r5, r1
    dpl_error_t err;
    struct dw1000_dev_cfg *cfg = (struct dw1000_dev_cfg*)arg;
    struct uwb_dev *udev = (struct uwb_dev*)odev;
    dw1000_dev_instance_t *inst = (dw1000_dev_instance_t *)odev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_dev_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1a00a:	f7f8 fc5e 	bl	128ca <dpl_cputime_get32>
   1a00e:	4601      	mov	r1, r0
   1a010:	4844      	ldr	r0, [pc, #272]	; (1a124 <dw1000_dev_init+0x120>)
   1a012:	f7f6 ff4b 	bl	10eac <printf>
#endif
    /* TODO, replace with open anch close function pointers below */
    OS_DEV_SETHANDLERS(odev, 0, 0);
   1a016:	2300      	movs	r3, #0
   1a018:	6023      	str	r3, [r4, #0]
   1a01a:	60e3      	str	r3, [r4, #12]

    if (inst == NULL) {
   1a01c:	2c00      	cmp	r4, #0
   1a01e:	d05a      	beq.n	1a0d6 <dw1000_dev_init+0xd2>
        assert(inst);
        inst->uwb_dev.status.selfmalloc = 1;
        udev = (struct uwb_dev*)inst;
    }

    udev->rxbuf_size = MYNEWT_VAL(UWB_RX_BUFFER_SIZE);
   1a020:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a024:	f8a4 3504 	strh.w	r3, [r4, #1284]	; 0x504
    udev->txbuf_size = MYNEWT_VAL(DW1000_HAL_SPI_BUFFER_SIZE);
   1a028:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a02c:	f8a4 3506 	strh.w	r3, [r4, #1286]	; 0x506
    uwb_dev_init(udev);
   1a030:	4620      	mov	r0, r4
   1a032:	f7ee fef3 	bl	8e1c <uwb_dev_init>

    /* Setup common uwb interface */
    udev->uw_funcs = &dw1000_uwb_funcs;
   1a036:	4b3c      	ldr	r3, [pc, #240]	; (1a128 <dw1000_dev_init+0x124>)
   1a038:	6263      	str	r3, [r4, #36]	; 0x24
    udev->rxdiag = (struct uwb_dev_rxdiag*)&inst->rxdiag;
   1a03a:	f204 539c 	addw	r3, r4, #1436	; 0x59c
   1a03e:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
    udev->rxdiag->rxd_len = sizeof(inst->rxdiag);
   1a042:	2314      	movs	r3, #20
   1a044:	f8a4 359c 	strh.w	r3, [r4, #1436]	; 0x59c
#if MYNEWT_VAL(CIR_ENABLED)
    udev->cir = (struct cir_instance*)inst->cir;
#endif
#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->sys_status_bt_idx = 0;
   1a048:	2300      	movs	r3, #0
   1a04a:	f8a4 3df0 	strh.w	r3, [r4, #3568]	; 0xdf0
    inst->sys_status_bt_lock = 0;
   1a04e:	f884 3df2 	strb.w	r3, [r4, #3570]	; 0xdf2

    /* Check size requirements */
    assert(sizeof(inst->rxdiag) <= MYNEWT_VAL(UWB_DEV_RXDIAG_MAXLEN));

    /* Capture dev_cfg parameters */
    inst->spi_sem = cfg->spi_sem;
   1a052:	682b      	ldr	r3, [r5, #0]
   1a054:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    inst->spi_num = cfg->spi_num;
   1a058:	7b2b      	ldrb	r3, [r5, #12]
   1a05a:	f884 355c 	strb.w	r3, [r4, #1372]	; 0x55c
    inst->spi_baudrate = cfg->spi_baudrate;
   1a05e:	686b      	ldr	r3, [r5, #4]
   1a060:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    inst->spi_baudrate_low = cfg->spi_baudrate_low;
   1a064:	68ab      	ldr	r3, [r5, #8]
   1a066:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
    inst->irq_pin = cfg->irq_pin;
   1a06a:	7bab      	ldrb	r3, [r5, #14]
   1a06c:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
    inst->rst_pin = cfg->rst_pin;
   1a070:	7b6b      	ldrb	r3, [r5, #13]
   1a072:	f884 355f 	strb.w	r3, [r4, #1375]	; 0x55f
    inst->ss_pin  = cfg->ss_pin;
   1a076:	7beb      	ldrb	r3, [r5, #15]
   1a078:	f884 355e 	strb.w	r3, [r4, #1374]	; 0x55e

    udev->rx_antenna_delay = cfg->rx_antenna_delay;
   1a07c:	8a2b      	ldrh	r3, [r5, #16]
   1a07e:	f8a4 34cc 	strh.w	r3, [r4, #1228]	; 0x4cc
    udev->tx_antenna_delay = cfg->tx_antenna_delay;
   1a082:	8a6b      	ldrh	r3, [r5, #18]
   1a084:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
    udev->ext_clock_delay = cfg->ext_clock_delay;
   1a088:	696b      	ldr	r3, [r5, #20]
   1a08a:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
    return (dpl_error_t)os_mutex_init(&mu->mu);
   1a08e:	f504 60ad 	add.w	r0, r4, #1384	; 0x568
   1a092:	f7f0 fdd7 	bl	ac44 <os_mutex_init>

    err = dpl_mutex_init(&inst->mutex);
    assert(err == DPL_OK);
   1a096:	bb90      	cbnz	r0, 1a0fe <dw1000_dev_init+0xfa>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   1a098:	2101      	movs	r1, #1
   1a09a:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1a09e:	f7ef ffdd 	bl	a05c <os_sem_init>
    err = dpl_sem_init(&inst->tx_sem, 0x1);
    assert(err == DPL_OK);
   1a0a2:	bb90      	cbnz	r0, 1a10a <dw1000_dev_init+0x106>
   1a0a4:	2101      	movs	r1, #1
   1a0a6:	f204 504c 	addw	r0, r4, #1356	; 0x54c
   1a0aa:	f7ef ffd7 	bl	a05c <os_sem_init>
    err = dpl_sem_init(&inst->spi_nb_sem, 0x1);
    assert(err == DPL_OK);
   1a0ae:	bb90      	cbnz	r0, 1a116 <dw1000_dev_init+0x112>

    /* phy attritubes per the IEEE802.15.4-2011 standard, Table 99 and Table 101 */
    udev->attrib.Tpsym = DPL_FLOAT32_INIT(1.0176282f); //!< Preamble symbols duration (usec) for MPRF of 62.89Mhz
   1a0b0:	f204 5334 	addw	r3, r4, #1332	; 0x534
   1a0b4:	4a1d      	ldr	r2, [pc, #116]	; (1a12c <dw1000_dev_init+0x128>)
   1a0b6:	601a      	str	r2, [r3, #0]
    udev->attrib.Tbsym = DPL_FLOAT32_INIT(1.0256410f); //!< Baserate symbols duration (usec) 850khz
   1a0b8:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
   1a0bc:	4a1c      	ldr	r2, [pc, #112]	; (1a130 <dw1000_dev_init+0x12c>)
   1a0be:	601a      	str	r2, [r3, #0]
    udev->attrib.Tdsym = DPL_FLOAT32_INIT(0.1282051f); //!< Datarate symbols duration (usec) 6.81Mhz
   1a0c0:	f204 533c 	addw	r3, r4, #1340	; 0x53c
   1a0c4:	4a1b      	ldr	r2, [pc, #108]	; (1a134 <dw1000_dev_init+0x130>)
   1a0c6:	601a      	str	r2, [r3, #0]

    SLIST_INIT(&inst->uwb_dev.interface_cbs);
   1a0c8:	2000      	movs	r0, #0
   1a0ca:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530

#if MYNEWT_VAL(DW1000_SPI_BACKTRACE_LEN) || MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    inst->bt_ticks2usec = 1000000/MYNEWT_VAL(OS_CPUTIME_FREQ);
   1a0ce:	2301      	movs	r3, #1
   1a0d0:	f8c4 3df4 	str.w	r3, [r4, #3572]	; 0xdf4
#endif
    return DPL_OK;
}
   1a0d4:	bd38      	pop	{r3, r4, r5, pc}
        inst = (dw1000_dev_instance_t *) calloc(1, sizeof(dw1000_dev_instance_t));
   1a0d6:	f640 51f8 	movw	r1, #3576	; 0xdf8
   1a0da:	2001      	movs	r0, #1
   1a0dc:	f7f6 f98b 	bl	103f6 <calloc>
        assert(inst);
   1a0e0:	4604      	mov	r4, r0
   1a0e2:	b130      	cbz	r0, 1a0f2 <dw1000_dev_init+0xee>
        inst->uwb_dev.status.selfmalloc = 1;
   1a0e4:	f890 3508 	ldrb.w	r3, [r0, #1288]	; 0x508
   1a0e8:	f043 0301 	orr.w	r3, r3, #1
   1a0ec:	f880 3508 	strb.w	r3, [r0, #1288]	; 0x508
        udev = (struct uwb_dev*)inst;
   1a0f0:	e796      	b.n	1a020 <dw1000_dev_init+0x1c>
        assert(inst);
   1a0f2:	2300      	movs	r3, #0
   1a0f4:	461a      	mov	r2, r3
   1a0f6:	4619      	mov	r1, r3
   1a0f8:	4618      	mov	r0, r3
   1a0fa:	f7ef f863 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   1a0fe:	2300      	movs	r3, #0
   1a100:	461a      	mov	r2, r3
   1a102:	4619      	mov	r1, r3
   1a104:	4618      	mov	r0, r3
   1a106:	f7ef f85d 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   1a10a:	2300      	movs	r3, #0
   1a10c:	461a      	mov	r2, r3
   1a10e:	4619      	mov	r1, r3
   1a110:	4618      	mov	r0, r3
   1a112:	f7ef f857 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   1a116:	2300      	movs	r3, #0
   1a118:	461a      	mov	r2, r3
   1a11a:	4619      	mov	r1, r3
   1a11c:	4618      	mov	r0, r3
   1a11e:	f7ef f851 	bl	91c4 <__assert_func>
   1a122:	bf00      	nop
   1a124:	00027ea0 	.word	0x00027ea0
   1a128:	00027ee4 	.word	0x00027ee4
   1a12c:	3f8241a4 	.word	0x3f8241a4
   1a130:	3f834834 	.word	0x3f834834
   1a134:	3e034833 	.word	0x3e034833

0001a138 <dw1000_dev_deinit>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void
dw1000_dev_deinit(dw1000_dev_instance_t * inst)
{
   1a138:	b510      	push	{r4, lr}
    assert(inst);
   1a13a:	b1d8      	cbz	r0, 1a174 <dw1000_dev_deinit+0x3c>
   1a13c:	4604      	mov	r4, r0
    hal_spi_disable(inst->spi_num);
   1a13e:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1a142:	f004 fc7b 	bl	1ea3c <hal_spi_disable>

    /* De-Initialise task structures in uwb_dev */
    uwb_task_deinit(&inst->uwb_dev);
   1a146:	4620      	mov	r0, r4
   1a148:	f7ee fe5c 	bl	8e04 <uwb_task_deinit>
    hal_gpio_irq_disable(inst->irq_pin);
   1a14c:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1a150:	f7ef f80c 	bl	916c <hal_gpio_irq_disable>
    hal_gpio_irq_release(inst->irq_pin);
   1a154:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1a158:	f7ef f816 	bl	9188 <hal_gpio_irq_release>

    if (inst->uwb_dev.status.selfmalloc) {
   1a15c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1a160:	f013 0f01 	tst.w	r3, #1
   1a164:	d10c      	bne.n	1a180 <dw1000_dev_deinit+0x48>
        free(inst);
    } else {
        inst->uwb_dev.status.initialized = 0;
   1a166:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1a16a:	f36f 0341 	bfc	r3, #1, #1
   1a16e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    }
}
   1a172:	bd10      	pop	{r4, pc}
    assert(inst);
   1a174:	2300      	movs	r3, #0
   1a176:	461a      	mov	r2, r3
   1a178:	4619      	mov	r1, r3
   1a17a:	4618      	mov	r0, r3
   1a17c:	f7ef f822 	bl	91c4 <__assert_func>
        free(inst);
   1a180:	4620      	mov	r0, r4
   1a182:	f7f6 fa33 	bl	105ec <free>
   1a186:	e7f4      	b.n	1a172 <dw1000_dev_deinit+0x3a>

0001a188 <hal_dw1000_spi_txrx_cb>:
 * @param ev    pointer to os_event
 * @return void
 */
void
hal_dw1000_spi_txrx_cb(void *arg, int len)
{
   1a188:	b510      	push	{r4, lr}
    dpl_error_t err;
    struct _dw1000_dev_instance_t * inst = arg;
    assert(inst!=0);
   1a18a:	b148      	cbz	r0, 1a1a0 <hal_dw1000_spi_txrx_cb+0x18>
   1a18c:	4604      	mov	r4, r0
   1a18e:	f8b0 3552 	ldrh.w	r3, [r0, #1362]	; 0x552

    /* Check for longer nonblocking read/write op */
    if (dpl_sem_get_count(&inst->spi_nb_sem) == 0) {
   1a192:	b98b      	cbnz	r3, 1a1b8 <hal_dw1000_spi_txrx_cb+0x30>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a194:	f200 504c 	addw	r0, r0, #1356	; 0x54c
   1a198:	f7ef ff68 	bl	a06c <os_sem_release>
        err = dpl_sem_release(&inst->spi_nb_sem);
        assert(err == DPL_OK);
   1a19c:	b930      	cbnz	r0, 1a1ac <hal_dw1000_spi_txrx_cb+0x24>
        hal_gpio_write(inst->ss_pin, 1);
        DW1000_SPI_BT_ADD_END(inst);
        err = dpl_sem_release(inst->spi_sem);
        assert(err == DPL_OK);
    }
}
   1a19e:	bd10      	pop	{r4, pc}
    assert(inst!=0);
   1a1a0:	2300      	movs	r3, #0
   1a1a2:	461a      	mov	r2, r3
   1a1a4:	4619      	mov	r1, r3
   1a1a6:	4618      	mov	r0, r3
   1a1a8:	f7ef f80c 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
   1a1ac:	2300      	movs	r3, #0
   1a1ae:	461a      	mov	r2, r3
   1a1b0:	4619      	mov	r1, r3
   1a1b2:	4618      	mov	r0, r3
   1a1b4:	f7ef f806 	bl	91c4 <__assert_func>
        hal_gpio_write(inst->ss_pin, 1);
   1a1b8:	2101      	movs	r1, #1
   1a1ba:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   1a1be:	f7ee ff4d 	bl	905c <hal_gpio_write>
   1a1c2:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a1c6:	f7ef ff51 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   1a1ca:	2800      	cmp	r0, #0
   1a1cc:	d0e7      	beq.n	1a19e <hal_dw1000_spi_txrx_cb+0x16>
   1a1ce:	2300      	movs	r3, #0
   1a1d0:	461a      	mov	r2, r3
   1a1d2:	4619      	mov	r1, r3
   1a1d4:	4618      	mov	r0, r3
   1a1d6:	f7ee fff5 	bl	91c4 <__assert_func>
	...

0001a1dc <hal_dw1000_inst>:
    if (idx < ARRAY_SIZE(hal_dw1000_instances)) {
   1a1dc:	4603      	mov	r3, r0
   1a1de:	b928      	cbnz	r0, 1a1ec <hal_dw1000_inst+0x10>
        return &hal_dw1000_instances[idx];
   1a1e0:	4803      	ldr	r0, [pc, #12]	; (1a1f0 <hal_dw1000_inst+0x14>)
   1a1e2:	f640 52f8 	movw	r2, #3576	; 0xdf8
   1a1e6:	fb02 0003 	mla	r0, r2, r3, r0
   1a1ea:	4770      	bx	lr
    return 0;
   1a1ec:	2000      	movs	r0, #0
}
   1a1ee:	4770      	bx	lr
   1a1f0:	20000430 	.word	0x20000430

0001a1f4 <hal_dw1000_reset>:
{
   1a1f4:	b510      	push	{r4, lr}
    assert(inst);
   1a1f6:	b308      	cbz	r0, 1a23c <hal_dw1000_reset+0x48>
   1a1f8:	4604      	mov	r4, r0
    hal_gpio_init_out(inst->ss_pin, 1);
   1a1fa:	2101      	movs	r1, #1
   1a1fc:	f890 055e 	ldrb.w	r0, [r0, #1374]	; 0x55e
   1a200:	f7ee ff10 	bl	9024 <hal_gpio_init_out>
    hal_gpio_init_out(inst->rst_pin, 0);
   1a204:	2100      	movs	r1, #0
   1a206:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a20a:	f7ee ff0b 	bl	9024 <hal_gpio_init_out>
    hal_gpio_write(inst->rst_pin, 0);
   1a20e:	2100      	movs	r1, #0
   1a210:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a214:	f7ee ff22 	bl	905c <hal_gpio_write>
    dpl_cputime_delay_usecs(1);
   1a218:	2001      	movs	r0, #1
   1a21a:	f7f8 fb66 	bl	128ea <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->rst_pin, 1);
   1a21e:	2101      	movs	r1, #1
   1a220:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a224:	f7ee ff1a 	bl	905c <hal_gpio_write>
    hal_gpio_init_in(inst->rst_pin, HAL_GPIO_PULL_NONE);
   1a228:	2100      	movs	r1, #0
   1a22a:	f894 055f 	ldrb.w	r0, [r4, #1375]	; 0x55f
   1a22e:	f7ee fee3 	bl	8ff8 <hal_gpio_init_in>
    dpl_cputime_delay_usecs(5000);
   1a232:	f241 3088 	movw	r0, #5000	; 0x1388
   1a236:	f7f8 fb58 	bl	128ea <dpl_cputime_delay_usecs>
}
   1a23a:	bd10      	pop	{r4, pc}
    assert(inst);
   1a23c:	2300      	movs	r3, #0
   1a23e:	461a      	mov	r2, r3
   1a240:	4619      	mov	r1, r3
   1a242:	4618      	mov	r0, r3
   1a244:	f7ee ffbe 	bl	91c4 <__assert_func>

0001a248 <hal_dw1000_read>:
{
   1a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a24c:	4605      	mov	r5, r0
   1a24e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    assert(inst->spi_sem);
   1a252:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a256:	b178      	cbz	r0, 1a278 <hal_dw1000_read+0x30>
   1a258:	460e      	mov	r6, r1
   1a25a:	4617      	mov	r7, r2
   1a25c:	4698      	mov	r8, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a25e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a262:	f7ef ff35 	bl	a0d0 <os_sem_pend>
    if (rc != DPL_OK) {
   1a266:	b168      	cbz	r0, 1a284 <hal_dw1000_read+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   1a268:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1a26c:	f043 0304 	orr.w	r3, r3, #4
   1a270:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
}
   1a274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   1a278:	2300      	movs	r3, #0
   1a27a:	461a      	mov	r2, r3
   1a27c:	4619      	mov	r1, r3
   1a27e:	4618      	mov	r0, r3
   1a280:	f7ee ffa0 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a284:	2100      	movs	r1, #0
   1a286:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   1a28a:	f7ee fee7 	bl	905c <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   1a28e:	463b      	mov	r3, r7
   1a290:	2200      	movs	r2, #0
   1a292:	4631      	mov	r1, r6
   1a294:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   1a298:	f004 fc4a 	bl	1eb30 <hal_spi_txrx>
    assert(rc == DPL_OK);
   1a29c:	b9c0      	cbnz	r0, 1a2d0 <hal_dw1000_read+0x88>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   1a29e:	f8b5 7506 	ldrh.w	r7, [r5, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   1a2a2:	2fff      	cmp	r7, #255	; 0xff
   1a2a4:	bf28      	it	cs
   1a2a6:	27ff      	movcs	r7, #255	; 0xff
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1a2a8:	4604      	mov	r4, r0
    int bytes_left = length;
   1a2aa:	464e      	mov	r6, r9
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1a2ac:	454c      	cmp	r4, r9
   1a2ae:	da15      	bge.n	1a2dc <hal_dw1000_read+0x94>
   1a2b0:	b9a0      	cbnz	r0, 1a2dc <hal_dw1000_read+0x94>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   1a2b2:	4633      	mov	r3, r6
   1a2b4:	42be      	cmp	r6, r7
   1a2b6:	bfa8      	it	ge
   1a2b8:	463b      	movge	r3, r7
        bytes_left-=bytes_to_read;
   1a2ba:	1af6      	subs	r6, r6, r3
        rc = hal_spi_txrx(inst->spi_num, inst->uwb_dev.txbuf, buffer+offset, bytes_to_read);
   1a2bc:	eb08 0204 	add.w	r2, r8, r4
   1a2c0:	f8d5 1500 	ldr.w	r1, [r5, #1280]	; 0x500
   1a2c4:	f895 055c 	ldrb.w	r0, [r5, #1372]	; 0x55c
   1a2c8:	f004 fc32 	bl	1eb30 <hal_spi_txrx>
    for (int offset = 0;offset<length && rc == DPL_OK;offset+=step) {
   1a2cc:	443c      	add	r4, r7
   1a2ce:	e7ed      	b.n	1a2ac <hal_dw1000_read+0x64>
    assert(rc == DPL_OK);
   1a2d0:	2300      	movs	r3, #0
   1a2d2:	461a      	mov	r2, r3
   1a2d4:	4619      	mov	r1, r3
   1a2d6:	4618      	mov	r0, r3
   1a2d8:	f7ee ff74 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 1);
   1a2dc:	2101      	movs	r1, #1
   1a2de:	f895 055e 	ldrb.w	r0, [r5, #1374]	; 0x55e
   1a2e2:	f7ee febb 	bl	905c <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a2e6:	f8d5 0548 	ldr.w	r0, [r5, #1352]	; 0x548
   1a2ea:	f7ef febf 	bl	a06c <os_sem_release>
    assert(rc == DPL_OK);
   1a2ee:	2800      	cmp	r0, #0
   1a2f0:	d0c0      	beq.n	1a274 <hal_dw1000_read+0x2c>
   1a2f2:	2300      	movs	r3, #0
   1a2f4:	461a      	mov	r2, r3
   1a2f6:	4619      	mov	r1, r3
   1a2f8:	4618      	mov	r0, r3
   1a2fa:	f7ee ff63 	bl	91c4 <__assert_func>
	...

0001a300 <hal_dw1000_read_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_read_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1a300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a304:	4604      	mov	r4, r0
   1a306:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(inst->spi_sem);
   1a30a:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a30e:	b178      	cbz	r0, 1a330 <hal_dw1000_read_noblock+0x30>
   1a310:	4688      	mov	r8, r1
   1a312:	4617      	mov	r7, r2
   1a314:	461e      	mov	r6, r3
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a31a:	f7ef fed9 	bl	a0d0 <os_sem_pend>

    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1a31e:	b168      	cbz	r0, 1a33c <hal_dw1000_read_noblock+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   1a320:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a324:	f043 0304 	orr.w	r3, r3, #4
   1a328:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);

early_exit:
    return rc;
}
   1a32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(inst->spi_sem);
   1a330:	2300      	movs	r3, #0
   1a332:	461a      	mov	r2, r3
   1a334:	4619      	mov	r1, r3
   1a336:	4618      	mov	r0, r3
   1a338:	f7ee ff44 	bl	91c4 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   1a33c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a340:	f004 fb7c 	bl	1ea3c <hal_spi_disable>
   1a344:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   1a346:	4622      	mov	r2, r4
   1a348:	4987      	ldr	r1, [pc, #540]	; (1a568 <hal_dw1000_read_noblock+0x268>)
   1a34a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a34e:	f004 fbd9 	bl	1eb04 <hal_spi_set_txrx_cb>
   1a352:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   1a354:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a358:	f004 fb4a 	bl	1e9f0 <hal_spi_enable>
    if (rc != DPL_OK) {
   1a35c:	ea55 0300 	orrs.w	r3, r5, r0
   1a360:	d00b      	beq.n	1a37a <hal_dw1000_read_noblock+0x7a>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a362:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a366:	f7ef fe81 	bl	a06c <os_sem_release>
    assert(rc == DPL_OK);
   1a36a:	2800      	cmp	r0, #0
   1a36c:	d0de      	beq.n	1a32c <hal_dw1000_read_noblock+0x2c>
   1a36e:	2300      	movs	r3, #0
   1a370:	461a      	mov	r2, r3
   1a372:	4619      	mov	r1, r3
   1a374:	4618      	mov	r0, r3
   1a376:	f7ee ff25 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a37a:	2100      	movs	r1, #0
   1a37c:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a380:	f7ee fe6c 	bl	905c <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   1a384:	eb07 0509 	add.w	r5, r7, r9
   1a388:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   1a38c:	429d      	cmp	r5, r3
   1a38e:	da01      	bge.n	1a394 <hal_dw1000_read_noblock+0x94>
   1a390:	2dfe      	cmp	r5, #254	; 0xfe
   1a392:	dd0f      	ble.n	1a3b4 <hal_dw1000_read_noblock+0xb4>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a394:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   1a398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a39c:	4650      	mov	r0, sl
   1a39e:	f7ef fe97 	bl	a0d0 <os_sem_pend>
    if (rc != DPL_OK) {
   1a3a2:	2800      	cmp	r0, #0
   1a3a4:	d059      	beq.n	1a45a <hal_dw1000_read_noblock+0x15a>
        inst->uwb_dev.status.sem_error = 1;
   1a3a6:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a3aa:	f043 0304 	orr.w	r3, r3, #4
   1a3ae:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a3b2:	e7d6      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
        memset(inst->uwb_dev.txbuf, 0, cmd_size + length);
   1a3b4:	462a      	mov	r2, r5
   1a3b6:	2100      	movs	r1, #0
   1a3b8:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a3bc:	f7f6 f95d 	bl	1067a <memset>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   1a3c0:	463a      	mov	r2, r7
   1a3c2:	4641      	mov	r1, r8
   1a3c4:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a3c8:	f7f6 f94a 	bl	10660 <memcpy>
   1a3cc:	f204 584c 	addw	r8, r4, #1356	; 0x54c
   1a3d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3d4:	4640      	mov	r0, r8
   1a3d6:	f7ef fe7b 	bl	a0d0 <os_sem_pend>
        if (rc != DPL_OK) {
   1a3da:	b130      	cbz	r0, 1a3ea <hal_dw1000_read_noblock+0xea>
            inst->uwb_dev.status.sem_error = 1;
   1a3dc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a3e0:	f043 0304 	orr.w	r3, r3, #4
   1a3e4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   1a3e8:	e7bb      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
        rc = hal_spi_txrx_noblock(inst->spi_num, inst->uwb_dev.txbuf,
   1a3ea:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a3ee:	462b      	mov	r3, r5
   1a3f0:	460a      	mov	r2, r1
   1a3f2:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a3f6:	f004 fbf1 	bl	1ebdc <hal_spi_txrx_noblock>
   1a3fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3fe:	4640      	mov	r0, r8
   1a400:	f7ef fe66 	bl	a0d0 <os_sem_pend>
        if (rc != DPL_OK) {
   1a404:	b130      	cbz	r0, 1a414 <hal_dw1000_read_noblock+0x114>
            inst->uwb_dev.status.sem_error = 1;
   1a406:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a40a:	f043 0304 	orr.w	r3, r3, #4
   1a40e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
            goto err_return;
   1a412:	e7a6      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a414:	4640      	mov	r0, r8
   1a416:	f7ef fe29 	bl	a06c <os_sem_release>
        assert(rc == DPL_OK);
   1a41a:	b9c0      	cbnz	r0, 1a44e <hal_dw1000_read_noblock+0x14e>
        hal_gpio_write(inst->ss_pin, 1);
   1a41c:	2101      	movs	r1, #1
   1a41e:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a422:	f7ee fe1b 	bl	905c <hal_gpio_write>
        memcpy(buffer, inst->uwb_dev.txbuf + cmd_size, length);
   1a426:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a42a:	464a      	mov	r2, r9
   1a42c:	4439      	add	r1, r7
   1a42e:	4630      	mov	r0, r6
   1a430:	f7f6 f916 	bl	10660 <memcpy>
   1a434:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a438:	f7ef fe18 	bl	a06c <os_sem_release>
        assert(rc == DPL_OK);
   1a43c:	2800      	cmp	r0, #0
   1a43e:	f43f af75 	beq.w	1a32c <hal_dw1000_read_noblock+0x2c>
   1a442:	2300      	movs	r3, #0
   1a444:	461a      	mov	r2, r3
   1a446:	4619      	mov	r1, r3
   1a448:	4618      	mov	r0, r3
   1a44a:	f7ee febb 	bl	91c4 <__assert_func>
        assert(rc == DPL_OK);
   1a44e:	2300      	movs	r3, #0
   1a450:	461a      	mov	r2, r3
   1a452:	4619      	mov	r1, r3
   1a454:	4618      	mov	r0, r3
   1a456:	f7ee feb5 	bl	91c4 <__assert_func>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   1a45a:	463b      	mov	r3, r7
   1a45c:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   1a460:	4641      	mov	r1, r8
   1a462:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a466:	f004 fbb9 	bl	1ebdc <hal_spi_txrx_noblock>
    if (rc != DPL_OK) {
   1a46a:	4680      	mov	r8, r0
   1a46c:	2800      	cmp	r0, #0
   1a46e:	f47f af78 	bne.w	1a362 <hal_dw1000_read_noblock+0x62>
    memset(inst->uwb_dev.txbuf, 0, (length < inst->uwb_dev.txbuf_size)? length : inst->uwb_dev.txbuf_size);
   1a472:	f8b4 2506 	ldrh.w	r2, [r4, #1286]	; 0x506
   1a476:	454a      	cmp	r2, r9
   1a478:	bf28      	it	cs
   1a47a:	464a      	movcs	r2, r9
   1a47c:	2100      	movs	r1, #0
   1a47e:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a482:	f7f6 f8fa 	bl	1067a <memset>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a48a:	4650      	mov	r0, sl
   1a48c:	f7ef fe20 	bl	a0d0 <os_sem_pend>
    if (rc != DPL_OK) {
   1a490:	b130      	cbz	r0, 1a4a0 <hal_dw1000_read_noblock+0x1a0>
        inst->uwb_dev.status.sem_error = 1;
   1a492:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a496:	f043 0304 	orr.w	r3, r3, #4
   1a49a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a49e:	e760      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a4a0:	4650      	mov	r0, sl
   1a4a2:	f7ef fde3 	bl	a06c <os_sem_release>
    assert(rc == DPL_OK);
   1a4a6:	b940      	cbnz	r0, 1a4ba <hal_dw1000_read_noblock+0x1ba>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT))?
   1a4a8:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   1a4ac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1a4b0:	bf28      	it	cs
   1a4b2:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   1a4b6:	464d      	mov	r5, r9
    while (offset<length) {
   1a4b8:	e011      	b.n	1a4de <hal_dw1000_read_noblock+0x1de>
    assert(rc == DPL_OK);
   1a4ba:	2300      	movs	r3, #0
   1a4bc:	461a      	mov	r2, r3
   1a4be:	4619      	mov	r1, r3
   1a4c0:	4618      	mov	r0, r3
   1a4c2:	f7ee fe7f 	bl	91c4 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   1a4c6:	463b      	mov	r3, r7
   1a4c8:	eb06 0208 	add.w	r2, r6, r8
   1a4cc:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a4d0:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a4d4:	f004 fb82 	bl	1ebdc <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   1a4d8:	b9b8      	cbnz	r0, 1a50a <hal_dw1000_read_noblock+0x20a>
        if (bytes_left) {
   1a4da:	b9e5      	cbnz	r5, 1a516 <hal_dw1000_read_noblock+0x216>
        offset+=bytes_to_read;
   1a4dc:	44b8      	add	r8, r7
    while (offset<length) {
   1a4de:	45c1      	cmp	r9, r8
   1a4e0:	dd31      	ble.n	1a546 <hal_dw1000_read_noblock+0x246>
        int bytes_to_read = (bytes_left > step) ? step : bytes_left;
   1a4e2:	462f      	mov	r7, r5
   1a4e4:	455d      	cmp	r5, fp
   1a4e6:	bfa8      	it	ge
   1a4e8:	465f      	movge	r7, fp
        if (bytes_left) {
   1a4ea:	1bed      	subs	r5, r5, r7
   1a4ec:	d0eb      	beq.n	1a4c6 <hal_dw1000_read_noblock+0x1c6>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a4ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a4f2:	4650      	mov	r0, sl
   1a4f4:	f7ef fdec 	bl	a0d0 <os_sem_pend>
            if (rc != DPL_OK) {
   1a4f8:	2800      	cmp	r0, #0
   1a4fa:	d0e4      	beq.n	1a4c6 <hal_dw1000_read_noblock+0x1c6>
                inst->uwb_dev.status.sem_error = 1;
   1a4fc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a500:	f043 0304 	orr.w	r3, r3, #4
   1a504:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a508:	e72b      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
        assert(rc==DPL_OK);
   1a50a:	2300      	movs	r3, #0
   1a50c:	461a      	mov	r2, r3
   1a50e:	4619      	mov	r1, r3
   1a510:	4618      	mov	r0, r3
   1a512:	f7ee fe57 	bl	91c4 <__assert_func>
   1a516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a51a:	4650      	mov	r0, sl
   1a51c:	f7ef fdd8 	bl	a0d0 <os_sem_pend>
            if (rc != DPL_OK) {
   1a520:	b950      	cbnz	r0, 1a538 <hal_dw1000_read_noblock+0x238>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a522:	4650      	mov	r0, sl
   1a524:	f7ef fda2 	bl	a06c <os_sem_release>
            assert(rc == DPL_OK);
   1a528:	2800      	cmp	r0, #0
   1a52a:	d0d7      	beq.n	1a4dc <hal_dw1000_read_noblock+0x1dc>
   1a52c:	2300      	movs	r3, #0
   1a52e:	461a      	mov	r2, r3
   1a530:	4619      	mov	r1, r3
   1a532:	4618      	mov	r0, r3
   1a534:	f7ee fe46 	bl	91c4 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   1a538:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a53c:	f043 0304 	orr.w	r3, r3, #4
   1a540:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a544:	e70d      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a546:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a54a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a54e:	f7ef fdbf 	bl	a0d0 <os_sem_pend>
    if (rc != DPL_OK) {
   1a552:	2800      	cmp	r0, #0
   1a554:	f43f af05 	beq.w	1a362 <hal_dw1000_read_noblock+0x62>
        inst->uwb_dev.status.sem_error = 1;
   1a558:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a55c:	f043 0304 	orr.w	r3, r3, #4
   1a560:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a564:	e6fd      	b.n	1a362 <hal_dw1000_read_noblock+0x62>
   1a566:	bf00      	nop
   1a568:	0001a189 	.word	0x0001a189

0001a56c <hal_dw1000_write>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1a56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a570:	4604      	mov	r4, r0
   1a572:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    int rc = DPL_OK;
    assert(inst->spi_sem);
   1a576:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a57a:	b178      	cbz	r0, 1a59c <hal_dw1000_write+0x30>
   1a57c:	460e      	mov	r6, r1
   1a57e:	4617      	mov	r7, r2
   1a580:	4698      	mov	r8, r3
   1a582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a586:	f7ef fda3 	bl	a0d0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1a58a:	b168      	cbz	r0, 1a5a8 <hal_dw1000_write+0x3c>
        inst->uwb_dev.status.sem_error = 1;
   1a58c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a590:	f043 0304 	orr.w	r3, r3, #4
   1a594:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    DW1000_SPI_BT_ADD_END(inst);
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   1a598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(inst->spi_sem);
   1a59c:	2300      	movs	r3, #0
   1a59e:	461a      	mov	r2, r3
   1a5a0:	4619      	mov	r1, r3
   1a5a2:	4618      	mov	r0, r3
   1a5a4:	f7ee fe0e 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a5a8:	2100      	movs	r1, #0
   1a5aa:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a5ae:	f7ee fd55 	bl	905c <hal_gpio_write>
    rc = hal_spi_txrx(inst->spi_num, (void*)cmd, 0, cmd_size);
   1a5b2:	463b      	mov	r3, r7
   1a5b4:	2200      	movs	r2, #0
   1a5b6:	4631      	mov	r1, r6
   1a5b8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a5bc:	f004 fab8 	bl	1eb30 <hal_spi_txrx>
    assert(rc == DPL_OK);
   1a5c0:	b998      	cbnz	r0, 1a5ea <hal_dw1000_write+0x7e>
    if (length) {
   1a5c2:	f1b9 0f00 	cmp.w	r9, #0
   1a5c6:	d116      	bne.n	1a5f6 <hal_dw1000_write+0x8a>
    hal_gpio_write(inst->ss_pin, 1);
   1a5c8:	2101      	movs	r1, #1
   1a5ca:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a5ce:	f7ee fd45 	bl	905c <hal_gpio_write>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a5d2:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a5d6:	f7ef fd49 	bl	a06c <os_sem_release>
    assert(rc == DPL_OK);
   1a5da:	2800      	cmp	r0, #0
   1a5dc:	d0dc      	beq.n	1a598 <hal_dw1000_write+0x2c>
   1a5de:	2300      	movs	r3, #0
   1a5e0:	461a      	mov	r2, r3
   1a5e2:	4619      	mov	r1, r3
   1a5e4:	4618      	mov	r0, r3
   1a5e6:	f7ee fded 	bl	91c4 <__assert_func>
    assert(rc == DPL_OK);
   1a5ea:	2300      	movs	r3, #0
   1a5ec:	461a      	mov	r2, r3
   1a5ee:	4619      	mov	r1, r3
   1a5f0:	4618      	mov	r0, r3
   1a5f2:	f7ee fde7 	bl	91c4 <__assert_func>
        hal_spi_txrx(inst->spi_num, (void*)buffer, 0, length);
   1a5f6:	464b      	mov	r3, r9
   1a5f8:	2200      	movs	r2, #0
   1a5fa:	4641      	mov	r1, r8
   1a5fc:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a600:	f004 fa96 	bl	1eb30 <hal_spi_txrx>
   1a604:	e7e0      	b.n	1a5c8 <hal_dw1000_write+0x5c>
	...

0001a608 <hal_dw1000_write_noblock>:
 * @param length    Represents buffer length.
 * @return int      DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_write_noblock(struct _dw1000_dev_instance_t * inst, const uint8_t * cmd, uint8_t cmd_size, uint8_t * buffer, uint16_t length)
{
   1a608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a60c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    int rc = DPL_OK;
    assert(length);
   1a610:	f1b9 0f00 	cmp.w	r9, #0
   1a614:	d015      	beq.n	1a642 <hal_dw1000_write_noblock+0x3a>
   1a616:	4604      	mov	r4, r0
   1a618:	460f      	mov	r7, r1
   1a61a:	4616      	mov	r6, r2
   1a61c:	4698      	mov	r8, r3
    assert(inst->spi_sem);
   1a61e:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a622:	b1a0      	cbz	r0, 1a64e <hal_dw1000_write_noblock+0x46>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a628:	f7ef fd52 	bl	a0d0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
   1a62c:	4603      	mov	r3, r0
    if (rc != DPL_OK) {
   1a62e:	b1a0      	cbz	r0, 1a65a <hal_dw1000_write_noblock+0x52>
        inst->uwb_dev.status.sem_error = 1;
   1a630:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
   1a634:	f042 0204 	orr.w	r2, r2, #4
   1a638:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b

err_return:
    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
    return rc;
}
   1a63c:	4618      	mov	r0, r3
   1a63e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(length);
   1a642:	2300      	movs	r3, #0
   1a644:	461a      	mov	r2, r3
   1a646:	4619      	mov	r1, r3
   1a648:	4618      	mov	r0, r3
   1a64a:	f7ee fdbb 	bl	91c4 <__assert_func>
    assert(inst->spi_sem);
   1a64e:	2300      	movs	r3, #0
   1a650:	461a      	mov	r2, r3
   1a652:	4619      	mov	r1, r3
   1a654:	4618      	mov	r0, r3
   1a656:	f7ee fdb5 	bl	91c4 <__assert_func>
    rc = hal_spi_disable(inst->spi_num);
   1a65a:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a65e:	f004 f9ed 	bl	1ea3c <hal_spi_disable>
   1a662:	4605      	mov	r5, r0
    rc |= hal_spi_set_txrx_cb(inst->spi_num, hal_dw1000_spi_txrx_cb, (void*)inst);
   1a664:	4622      	mov	r2, r4
   1a666:	4960      	ldr	r1, [pc, #384]	; (1a7e8 <hal_dw1000_write_noblock+0x1e0>)
   1a668:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a66c:	f004 fa4a 	bl	1eb04 <hal_spi_set_txrx_cb>
   1a670:	4305      	orrs	r5, r0
    rc |= hal_spi_enable(inst->spi_num);
   1a672:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a676:	f004 f9bb 	bl	1e9f0 <hal_spi_enable>
    if (rc != DPL_OK) {
   1a67a:	ea55 0300 	orrs.w	r3, r5, r0
   1a67e:	d00c      	beq.n	1a69a <hal_dw1000_write_noblock+0x92>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a680:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a684:	f7ef fcf2 	bl	a06c <os_sem_release>
    rc = dpl_sem_release(inst->spi_sem);
   1a688:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   1a68a:	2800      	cmp	r0, #0
   1a68c:	d0d6      	beq.n	1a63c <hal_dw1000_write_noblock+0x34>
   1a68e:	2300      	movs	r3, #0
   1a690:	461a      	mov	r2, r3
   1a692:	4619      	mov	r1, r3
   1a694:	4618      	mov	r0, r3
   1a696:	f7ee fd95 	bl	91c4 <__assert_func>
    hal_gpio_write(inst->ss_pin, 0);
   1a69a:	2100      	movs	r1, #0
   1a69c:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a6a0:	f7ee fcdc 	bl	905c <hal_gpio_write>
    if (cmd_size + length < inst->uwb_dev.txbuf_size &&
   1a6a4:	eb06 0509 	add.w	r5, r6, r9
   1a6a8:	f8b4 3506 	ldrh.w	r3, [r4, #1286]	; 0x506
   1a6ac:	429d      	cmp	r5, r3
   1a6ae:	da01      	bge.n	1a6b4 <hal_dw1000_write_noblock+0xac>
   1a6b0:	2dfe      	cmp	r5, #254	; 0xfe
   1a6b2:	dd0e      	ble.n	1a6d2 <hal_dw1000_write_noblock+0xca>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a6b4:	f204 5a4c 	addw	sl, r4, #1356	; 0x54c
   1a6b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a6bc:	4650      	mov	r0, sl
   1a6be:	f7ef fd07 	bl	a0d0 <os_sem_pend>
    if (rc != DPL_OK) {
   1a6c2:	b1e8      	cbz	r0, 1a700 <hal_dw1000_write_noblock+0xf8>
        inst->uwb_dev.status.sem_error = 1;
   1a6c4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a6c8:	f043 0304 	orr.w	r3, r3, #4
   1a6cc:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a6d0:	e7d6      	b.n	1a680 <hal_dw1000_write_noblock+0x78>
        memcpy(inst->uwb_dev.txbuf, cmd, cmd_size);
   1a6d2:	4632      	mov	r2, r6
   1a6d4:	4639      	mov	r1, r7
   1a6d6:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a6da:	f7f5 ffc1 	bl	10660 <memcpy>
        memcpy(inst->uwb_dev.txbuf+cmd_size, buffer, length);
   1a6de:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
   1a6e2:	464a      	mov	r2, r9
   1a6e4:	4641      	mov	r1, r8
   1a6e6:	4430      	add	r0, r6
   1a6e8:	f7f5 ffba 	bl	10660 <memcpy>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)inst->uwb_dev.txbuf,
   1a6ec:	f8d4 1500 	ldr.w	r1, [r4, #1280]	; 0x500
   1a6f0:	462b      	mov	r3, r5
   1a6f2:	460a      	mov	r2, r1
   1a6f4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a6f8:	f004 fa70 	bl	1ebdc <hal_spi_txrx_noblock>
   1a6fc:	4603      	mov	r3, r0
        return rc;
   1a6fe:	e79d      	b.n	1a63c <hal_dw1000_write_noblock+0x34>
    rc = hal_spi_txrx_noblock(inst->spi_num, (void*)cmd, inst->uwb_dev.txbuf, cmd_size);
   1a700:	4633      	mov	r3, r6
   1a702:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   1a706:	4639      	mov	r1, r7
   1a708:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a70c:	f004 fa66 	bl	1ebdc <hal_spi_txrx_noblock>
    assert(rc==DPL_OK);
   1a710:	b960      	cbnz	r0, 1a72c <hal_dw1000_write_noblock+0x124>
   1a712:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a716:	4650      	mov	r0, sl
   1a718:	f7ef fcda 	bl	a0d0 <os_sem_pend>
    if (rc != DPL_OK) {
   1a71c:	b160      	cbz	r0, 1a738 <hal_dw1000_write_noblock+0x130>
        inst->uwb_dev.status.sem_error = 1;
   1a71e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a722:	f043 0304 	orr.w	r3, r3, #4
   1a726:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto err_return;
   1a72a:	e7a9      	b.n	1a680 <hal_dw1000_write_noblock+0x78>
    assert(rc==DPL_OK);
   1a72c:	2300      	movs	r3, #0
   1a72e:	461a      	mov	r2, r3
   1a730:	4619      	mov	r1, r3
   1a732:	4618      	mov	r0, r3
   1a734:	f7ee fd46 	bl	91c4 <__assert_func>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a738:	4650      	mov	r0, sl
   1a73a:	f7ef fc97 	bl	a06c <os_sem_release>
   1a73e:	4607      	mov	r7, r0
    rc = dpl_sem_release(&inst->spi_nb_sem);
   1a740:	4603      	mov	r3, r0
    assert(rc == DPL_OK);
   1a742:	b940      	cbnz	r0, 1a756 <hal_dw1000_write_noblock+0x14e>
    int step = (inst->uwb_dev.txbuf_size > MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT)) ?
   1a744:	f8b4 b506 	ldrh.w	fp, [r4, #1286]	; 0x506
        MYNEWT_VAL(DW1000_HAL_SPI_MAX_CNT) : inst->uwb_dev.txbuf_size;
   1a748:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1a74c:	bf28      	it	cs
   1a74e:	f04f 0bff 	movcs.w	fp, #255	; 0xff
    int bytes_left = length;
   1a752:	464d      	mov	r5, r9
    while (offset<length) {
   1a754:	e012      	b.n	1a77c <hal_dw1000_write_noblock+0x174>
    assert(rc == DPL_OK);
   1a756:	2300      	movs	r3, #0
   1a758:	461a      	mov	r2, r3
   1a75a:	4619      	mov	r1, r3
   1a75c:	4618      	mov	r0, r3
   1a75e:	f7ee fd31 	bl	91c4 <__assert_func>
        rc = hal_spi_txrx_noblock(inst->spi_num, (void*)buffer+offset,
   1a762:	4633      	mov	r3, r6
   1a764:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
   1a768:	eb08 0107 	add.w	r1, r8, r7
   1a76c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a770:	f004 fa34 	bl	1ebdc <hal_spi_txrx_noblock>
        assert(rc==DPL_OK);
   1a774:	4603      	mov	r3, r0
   1a776:	b9c0      	cbnz	r0, 1a7aa <hal_dw1000_write_noblock+0x1a2>
        if (bytes_left) {
   1a778:	b9ed      	cbnz	r5, 1a7b6 <hal_dw1000_write_noblock+0x1ae>
        offset+=bytes_to_write;
   1a77a:	4437      	add	r7, r6
    while (offset<length) {
   1a77c:	45b9      	cmp	r9, r7
   1a77e:	f77f af5d 	ble.w	1a63c <hal_dw1000_write_noblock+0x34>
        int bytes_to_write = (bytes_left > step) ? step : bytes_left;
   1a782:	462e      	mov	r6, r5
   1a784:	455d      	cmp	r5, fp
   1a786:	bfa8      	it	ge
   1a788:	465e      	movge	r6, fp
        if (bytes_left) {
   1a78a:	1bad      	subs	r5, r5, r6
   1a78c:	d0e9      	beq.n	1a762 <hal_dw1000_write_noblock+0x15a>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a78e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a792:	4650      	mov	r0, sl
   1a794:	f7ef fc9c 	bl	a0d0 <os_sem_pend>
            if (rc != DPL_OK) {
   1a798:	2800      	cmp	r0, #0
   1a79a:	d0e2      	beq.n	1a762 <hal_dw1000_write_noblock+0x15a>
                inst->uwb_dev.status.sem_error = 1;
   1a79c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a7a0:	f043 0304 	orr.w	r3, r3, #4
   1a7a4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a7a8:	e76a      	b.n	1a680 <hal_dw1000_write_noblock+0x78>
        assert(rc==DPL_OK);
   1a7aa:	2300      	movs	r3, #0
   1a7ac:	461a      	mov	r2, r3
   1a7ae:	4619      	mov	r1, r3
   1a7b0:	4618      	mov	r0, r3
   1a7b2:	f7ee fd07 	bl	91c4 <__assert_func>
   1a7b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a7ba:	4650      	mov	r0, sl
   1a7bc:	f7ef fc88 	bl	a0d0 <os_sem_pend>
            if (rc != DPL_OK) {
   1a7c0:	b958      	cbnz	r0, 1a7da <hal_dw1000_write_noblock+0x1d2>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a7c2:	4650      	mov	r0, sl
   1a7c4:	f7ef fc52 	bl	a06c <os_sem_release>
            rc = dpl_sem_release(&inst->spi_nb_sem);
   1a7c8:	4603      	mov	r3, r0
            assert(rc == DPL_OK);
   1a7ca:	2800      	cmp	r0, #0
   1a7cc:	d0d5      	beq.n	1a77a <hal_dw1000_write_noblock+0x172>
   1a7ce:	2300      	movs	r3, #0
   1a7d0:	461a      	mov	r2, r3
   1a7d2:	4619      	mov	r1, r3
   1a7d4:	4618      	mov	r0, r3
   1a7d6:	f7ee fcf5 	bl	91c4 <__assert_func>
                inst->uwb_dev.status.sem_error = 1;
   1a7da:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a7de:	f043 0304 	orr.w	r3, r3, #4
   1a7e2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
                goto err_return;
   1a7e6:	e74b      	b.n	1a680 <hal_dw1000_write_noblock+0x78>
   1a7e8:	0001a189 	.word	0x0001a189

0001a7ec <hal_dw1000_rw_noblock_wait>:
 * @param timeout  Time in ms to wait, use DPL_TIMEOUT_NEVER (UINT32_MAX) to wait indefinitely
 * @return int  Returns 0 on success, error code otherwise
 */
int
hal_dw1000_rw_noblock_wait(struct _dw1000_dev_instance_t * inst, uint32_t timeout_ms)
{
   1a7ec:	b530      	push	{r4, r5, lr}
   1a7ee:	b083      	sub	sp, #12
   1a7f0:	4604      	mov	r4, r0
    int err;
    dpl_time_t ticks;
    if (timeout_ms != DPL_TIMEOUT_NEVER) {
   1a7f2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a7f6:	d10f      	bne.n	1a818 <hal_dw1000_rw_noblock_wait+0x2c>
        dpl_time_ms_to_ticks(timeout_ms, &ticks);
    } else {
        ticks = DPL_TIMEOUT_NEVER;
   1a7f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a7fc:	9301      	str	r3, [sp, #4]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a7fe:	9901      	ldr	r1, [sp, #4]
   1a800:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a804:	f7ef fc64 	bl	a0d0 <os_sem_pend>
   1a808:	4605      	mov	r5, r0
    }
    err = dpl_sem_pend(inst->spi_sem, ticks);
    if (dpl_sem_get_count(inst->spi_sem) == 0) {
   1a80a:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a80e:	88c3      	ldrh	r3, [r0, #6]
   1a810:	b13b      	cbz	r3, 1a822 <hal_dw1000_rw_noblock_wait+0x36>
        dpl_sem_release(inst->spi_sem);
    }
    return err;
}
   1a812:	4628      	mov	r0, r5
   1a814:	b003      	add	sp, #12
   1a816:	bd30      	pop	{r4, r5, pc}
   1a818:	4608      	mov	r0, r1
    return (dpl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1a81a:	a901      	add	r1, sp, #4
   1a81c:	f7ef ff01 	bl	a622 <os_time_ms_to_ticks>
   1a820:	e7ed      	b.n	1a7fe <hal_dw1000_rw_noblock_wait+0x12>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a822:	f7ef fc23 	bl	a06c <os_sem_release>
    return err;
   1a826:	e7f4      	b.n	1a812 <hal_dw1000_rw_noblock_wait+0x26>

0001a828 <hal_dw1000_wakeup>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return int  DPL_OK if read is ok, error otherwise
 */
int
hal_dw1000_wakeup(struct _dw1000_dev_instance_t * inst)
{
   1a828:	b538      	push	{r3, r4, r5, lr}
   1a82a:	4604      	mov	r4, r0
    int rc = DPL_OK;
    os_sr_t sr;
    assert(inst->spi_sem);
   1a82c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548
   1a830:	b158      	cbz	r0, 1a84a <hal_dw1000_wakeup+0x22>
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1a832:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a836:	f7ef fc4b 	bl	a0d0 <os_sem_pend>
    rc = dpl_sem_pend(inst->spi_sem, DPL_TIMEOUT_NEVER);
    if (rc != DPL_OK) {
   1a83a:	b160      	cbz	r0, 1a856 <hal_dw1000_wakeup+0x2e>
        inst->uwb_dev.status.sem_error = 1;
   1a83c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a840:	f043 0304 	orr.w	r3, r3, #4
   1a844:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b

    rc = dpl_sem_release(inst->spi_sem);
    assert(rc == DPL_OK);
early_exit:
    return rc;
}
   1a848:	bd38      	pop	{r3, r4, r5, pc}
    assert(inst->spi_sem);
   1a84a:	2300      	movs	r3, #0
   1a84c:	461a      	mov	r2, r3
   1a84e:	4619      	mov	r1, r3
   1a850:	4618      	mov	r0, r3
   1a852:	f7ee fcb7 	bl	91c4 <__assert_func>
    return os_arch_save_sr();
   1a856:	f7ef ff01 	bl	a65c <os_arch_save_sr>
   1a85a:	4605      	mov	r5, r0
    hal_spi_disable(inst->spi_num);
   1a85c:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a860:	f004 f8ec 	bl	1ea3c <hal_spi_disable>
    hal_gpio_write(inst->ss_pin, 0);
   1a864:	2100      	movs	r1, #0
   1a866:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a86a:	f7ee fbf7 	bl	905c <hal_gpio_write>
    dpl_cputime_delay_usecs(2000);
   1a86e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   1a872:	f7f8 f83a 	bl	128ea <dpl_cputime_delay_usecs>
    hal_gpio_write(inst->ss_pin, 1);
   1a876:	2101      	movs	r1, #1
   1a878:	f894 055e 	ldrb.w	r0, [r4, #1374]	; 0x55e
   1a87c:	f7ee fbee 	bl	905c <hal_gpio_write>
    hal_spi_enable(inst->spi_num);
   1a880:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1a884:	f004 f8b4 	bl	1e9f0 <hal_spi_enable>
    dpl_cputime_delay_usecs(5000);
   1a888:	f241 3088 	movw	r0, #5000	; 0x1388
   1a88c:	f7f8 f82d 	bl	128ea <dpl_cputime_delay_usecs>
    os_arch_restore_sr(ctx);
   1a890:	4628      	mov	r0, r5
   1a892:	f7ef fee9 	bl	a668 <os_arch_restore_sr>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1a896:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
   1a89a:	f7ef fbe7 	bl	a06c <os_sem_release>
    assert(rc == DPL_OK);
   1a89e:	2800      	cmp	r0, #0
   1a8a0:	d0d2      	beq.n	1a848 <hal_dw1000_wakeup+0x20>
   1a8a2:	2300      	movs	r3, #0
   1a8a4:	461a      	mov	r2, r3
   1a8a6:	4619      	mov	r1, r3
   1a8a8:	4618      	mov	r0, r3
   1a8aa:	f7ee fc8b 	bl	91c4 <__assert_func>

0001a8ae <calc_rx_window_timeout>:
}

static uint16_t
calc_rx_window_timeout(uint64_t rx_start, uint64_t rx_end)
{
    uint32_t timeout = ((rx_end - rx_start) & UWB_DTU_40BMASK) >> 16;
   1a8ae:	1a12      	subs	r2, r2, r0
   1a8b0:	eb63 0301 	sbc.w	r3, r3, r1
   1a8b4:	0c12      	lsrs	r2, r2, #16
   1a8b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1a8ba:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    /* If more than 8.4s away (more than 1/2 period)- the end has likely
     * already passed so set a short timeout as to trigger a timeout */
    if (timeout > 0x7fffff) {
   1a8be:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a8c2:	d105      	bne.n	1a8d0 <calc_rx_window_timeout+0x22>
        timeout = 1;
    }
    /* DW1000 can't have a rx-timeout greater than 0xffff */
    if (timeout > 0xffff) {
   1a8c4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1a8c8:	d303      	bcc.n	1a8d2 <calc_rx_window_timeout+0x24>
        timeout = 0xffff;
   1a8ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a8ce:	e000      	b.n	1a8d2 <calc_rx_window_timeout+0x24>
        timeout = 1;
   1a8d0:	2001      	movs	r0, #1
    }
    return timeout;
}
   1a8d2:	b280      	uxth	r0, r0
   1a8d4:	4770      	bx	lr

0001a8d6 <dw1000_checkoverrun>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = overrun error has occured, 0 otherwise
 */
static uint8_t
dw1000_checkoverrun(dw1000_dev_instance_t * inst)
{
   1a8d6:	b508      	push	{r3, lr}
    uint8_t ov = dw1000_read_reg(inst, SYS_STATUS_ID, 2, sizeof(uint8_t)) & (SYS_STATUS_RXOVRR >> 16);
   1a8d8:	2301      	movs	r3, #1
   1a8da:	2202      	movs	r2, #2
   1a8dc:	210f      	movs	r1, #15
   1a8de:	f7fe ffed 	bl	198bc <dw1000_read_reg>
    return (ov!=0);
}
   1a8e2:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1a8e6:	bd08      	pop	{r3, pc}

0001a8e8 <dw1000_irq>:
{
   1a8e8:	b510      	push	{r4, lr}
   1a8ea:	4604      	mov	r4, r0
    inst->uwb_dev.irq_at_ticks = dpl_cputime_get32();
   1a8ec:	f7f7 ffed 	bl	128ca <dpl_cputime_get32>
   1a8f0:	6320      	str	r0, [r4, #48]	; 0x30
    if (!inst->uwb_dev.status.sleeping) {
   1a8f2:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1a8f6:	f013 0f01 	tst.w	r3, #1
   1a8fa:	d000      	beq.n	1a8fe <dw1000_irq+0x16>
}
   1a8fc:	bd10      	pop	{r4, pc}
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1a8fe:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1a902:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1a906:	f7ee ff91 	bl	982c <os_eventq_put>
   1a90a:	e7f7      	b.n	1a8fc <dw1000_irq+0x14>

0001a90c <dw1000_read_rx>:
{
   1a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a910:	b082      	sub	sp, #8
   1a912:	4604      	mov	r4, r0
   1a914:	460f      	mov	r7, r1
   1a916:	4616      	mov	r6, r2
   1a918:	461d      	mov	r5, r3
    MAC_STATS_INCN(rx_bytes, rxFrameLength);
   1a91a:	f8d0 05cc 	ldr.w	r0, [r0, #1484]	; 0x5cc
   1a91e:	4418      	add	r0, r3
   1a920:	f8c4 05cc 	str.w	r0, [r4, #1484]	; 0x5cc
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1a924:	f504 68ad 	add.w	r8, r4, #1384	; 0x568
   1a928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a92c:	4640      	mov	r0, r8
   1a92e:	f7f0 f9ef 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1a932:	b150      	cbz	r0, 1a94a <dw1000_read_rx+0x3e>
        inst->uwb_dev.status.mtx_error = 1;
   1a934:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a938:	f043 0308 	orr.w	r3, r3, #8
   1a93c:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1a940:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a944:	b002      	add	sp, #8
   1a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dw1000_read(inst, RX_BUFFER_ID, rxBufferOffset, rxFrameBytes, rxFrameLength);
   1a94a:	9500      	str	r5, [sp, #0]
   1a94c:	463b      	mov	r3, r7
   1a94e:	4632      	mov	r2, r6
   1a950:	2111      	movs	r1, #17
   1a952:	4620      	mov	r0, r4
   1a954:	f7fe fee8 	bl	19728 <dw1000_read>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1a958:	4640      	mov	r0, r8
   1a95a:	f7f0 f97d 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1a95e:	2800      	cmp	r0, #0
   1a960:	d0ee      	beq.n	1a940 <dw1000_read_rx+0x34>
   1a962:	2300      	movs	r3, #0
   1a964:	461a      	mov	r2, r3
   1a966:	4619      	mov	r1, r3
   1a968:	4618      	mov	r0, r3
   1a96a:	f7ee fc2b 	bl	91c4 <__assert_func>

0001a96e <dw1000_write_tx>:
{
   1a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a972:	b082      	sub	sp, #8
   1a974:	4604      	mov	r4, r0
   1a976:	460f      	mov	r7, r1
   1a978:	4616      	mov	r6, r2
   1a97a:	461d      	mov	r5, r3
    MAC_STATS_INCN(tx_bytes, txFrameLength);
   1a97c:	f8d0 25c8 	ldr.w	r2, [r0, #1480]	; 0x5c8
   1a980:	441a      	add	r2, r3
   1a982:	f8c0 25c8 	str.w	r2, [r0, #1480]	; 0x5c8
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1a986:	f500 68ad 	add.w	r8, r0, #1384	; 0x568
   1a98a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a98e:	4640      	mov	r0, r8
   1a990:	f7f0 f9be 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1a994:	b990      	cbnz	r0, 1a9bc <dw1000_write_tx+0x4e>
    if ((txBufferOffset + txFrameLength) <= 1024){
   1a996:	1973      	adds	r3, r6, r5
   1a998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1a99c:	dd15      	ble.n	1a9ca <dw1000_write_tx+0x5c>
        inst->uwb_dev.status.tx_frame_error = 1;
   1a99e:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1a9a2:	f043 0310 	orr.w	r3, r3, #16
   1a9a6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1a9aa:	4640      	mov	r0, r8
   1a9ac:	f7f0 f954 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1a9b0:	bb20      	cbnz	r0, 1a9fc <dw1000_write_tx+0x8e>
}
   1a9b2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a9b6:	b002      	add	sp, #8
   1a9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1a9bc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1a9c0:	f043 0308 	orr.w	r3, r3, #8
   1a9c4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   1a9c8:	e7f3      	b.n	1a9b2 <dw1000_write_tx+0x44>
        dw1000_write(inst, TX_BUFFER_ID, txBufferOffset,  txFrameBytes, txFrameLength);
   1a9ca:	9500      	str	r5, [sp, #0]
   1a9cc:	463b      	mov	r3, r7
   1a9ce:	4632      	mov	r2, r6
   1a9d0:	2109      	movs	r1, #9
   1a9d2:	4620      	mov	r0, r4
   1a9d4:	f7fe ff0c 	bl	197f0 <dw1000_write>
        if (txBufferOffset == 0) {
   1a9d8:	b176      	cbz	r6, 1a9f8 <dw1000_write_tx+0x8a>
        inst->uwb_dev.status.tx_frame_error = 0;
   1a9da:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1a9de:	f36f 1304 	bfc	r3, #4, #1
   1a9e2:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
   1a9e6:	e7e0      	b.n	1a9aa <dw1000_write_tx+0x3c>
                inst->uwb_dev.fctrl_array[i] =  txFrameBytes[i];
   1a9e8:	5cf9      	ldrb	r1, [r7, r3]
   1a9ea:	18e2      	adds	r2, r4, r3
   1a9ec:	f882 14e0 	strb.w	r1, [r2, #1248]	; 0x4e0
            for (i = 0; i< sizeof(inst->uwb_dev.fctrl); i++)
   1a9f0:	3301      	adds	r3, #1
   1a9f2:	2b01      	cmp	r3, #1
   1a9f4:	d9f8      	bls.n	1a9e8 <dw1000_write_tx+0x7a>
   1a9f6:	e7f0      	b.n	1a9da <dw1000_write_tx+0x6c>
   1a9f8:	2300      	movs	r3, #0
   1a9fa:	e7fa      	b.n	1a9f2 <dw1000_write_tx+0x84>
    assert(err == DPL_OK);
   1a9fc:	2300      	movs	r3, #0
   1a9fe:	461a      	mov	r2, r3
   1aa00:	4619      	mov	r1, r3
   1aa02:	4618      	mov	r0, r3
   1aa04:	f7ee fbde 	bl	91c4 <__assert_func>

0001aa08 <dw1000_write_tx_fctrl>:
{
   1aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa0c:	b084      	sub	sp, #16
   1aa0e:	4605      	mov	r5, r0
   1aa10:	460c      	mov	r4, r1
   1aa12:	4690      	mov	r8, r2
   1aa14:	461e      	mov	r6, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1aa16:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1aa1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aa1e:	4638      	mov	r0, r7
   1aa20:	f7f0 f976 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1aa24:	bb08      	cbnz	r0, 1aa6a <dw1000_write_tx_fctrl+0x62>
    if (ext) {
   1aa26:	b33e      	cbz	r6, 1aa78 <dw1000_write_tx_fctrl+0x70>
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1aa28:	7873      	ldrb	r3, [r6, #1]
   1aa2a:	f895 250e 	ldrb.w	r2, [r5, #1294]	; 0x50e
   1aa2e:	431a      	orrs	r2, r3
            (((uint32_t)ext->dataRate) << TX_FCTRL_TXBR_SHFT) |
   1aa30:	7833      	ldrb	r3, [r6, #0]
   1aa32:	035b      	lsls	r3, r3, #13
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1aa34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            (((uint32_t)ext->ranging_en_bit) << TX_FCTRL_TR_SHFT);
   1aa38:	78b2      	ldrb	r2, [r6, #2]
        tx_fctrl_reg = (((uint32_t)(ext->preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1aa3a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    tx_fctrl_reg |= ((txFrameLength + 2) & TX_FCTRL_FLE_MASK)  |
   1aa3e:	3402      	adds	r4, #2
   1aa40:	f3c4 0409 	ubfx	r4, r4, #0, #10
   1aa44:	ea44 5488 	orr.w	r4, r4, r8, lsl #22
   1aa48:	431c      	orrs	r4, r3
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, tx_fctrl_reg, sizeof(uint32_t));
   1aa4a:	2304      	movs	r3, #4
   1aa4c:	9302      	str	r3, [sp, #8]
   1aa4e:	2200      	movs	r2, #0
   1aa50:	9400      	str	r4, [sp, #0]
   1aa52:	9201      	str	r2, [sp, #4]
   1aa54:	2108      	movs	r1, #8
   1aa56:	4628      	mov	r0, r5
   1aa58:	f7fe ffa0 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1aa5c:	4638      	mov	r0, r7
   1aa5e:	f7f0 f8fb 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1aa62:	b960      	cbnz	r0, 1aa7e <dw1000_write_tx_fctrl+0x76>
}
   1aa64:	b004      	add	sp, #16
   1aa66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1aa6a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1aa6e:	f043 0308 	orr.w	r3, r3, #8
   1aa72:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
        goto mtx_error;
   1aa76:	e7f5      	b.n	1aa64 <dw1000_write_tx_fctrl+0x5c>
        tx_fctrl_reg = inst->tx_fctrl;
   1aa78:	f8d5 3588 	ldr.w	r3, [r5, #1416]	; 0x588
   1aa7c:	e7df      	b.n	1aa3e <dw1000_write_tx_fctrl+0x36>
    assert(err == DPL_OK);
   1aa7e:	2300      	movs	r3, #0
   1aa80:	461a      	mov	r2, r3
   1aa82:	4619      	mov	r1, r3
   1aa84:	4618      	mov	r0, r3
   1aa86:	f7ee fb9d 	bl	91c4 <__assert_func>

0001aa8a <dw1000_start_tx>:
{
   1aa8a:	b570      	push	{r4, r5, r6, lr}
   1aa8c:	b084      	sub	sp, #16
   1aa8e:	4604      	mov	r4, r0
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1aa90:	f500 66ac 	add.w	r6, r0, #1376	; 0x560
   1aa94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aa98:	4630      	mov	r0, r6
   1aa9a:	f7ef fb19 	bl	a0d0 <os_sem_pend>
    if (err != DPL_OK) {
   1aa9e:	2800      	cmp	r0, #0
   1aaa0:	d144      	bne.n	1ab2c <dw1000_start_tx+0xa2>
    control = inst->control;
   1aaa2:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    if (config->trxoff_enable){ // force return to idle state
   1aaa6:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1aaaa:	f013 0f20 	tst.w	r3, #32
   1aaae:	d144      	bne.n	1ab3a <dw1000_start_tx+0xb0>
    if (control.wait4resp_enabled){
   1aab0:	b2eb      	uxtb	r3, r5
   1aab2:	f015 0f01 	tst.w	r5, #1
   1aab6:	d14c      	bne.n	1ab52 <dw1000_start_tx+0xc8>
    sys_ctrl_reg = SYS_CTRL_TXSTRT;
   1aab8:	2202      	movs	r2, #2
    if (control.delay_start_enabled)
   1aaba:	f013 0504 	ands.w	r5, r3, #4
   1aabe:	d001      	beq.n	1aac4 <dw1000_start_tx+0x3a>
        sys_ctrl_reg |= SYS_CTRL_TXDLYS;
   1aac0:	f042 0204 	orr.w	r2, r2, #4
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) sys_ctrl_reg, sizeof(uint8_t));
   1aac4:	b2d3      	uxtb	r3, r2
   1aac6:	2201      	movs	r2, #1
   1aac8:	9202      	str	r2, [sp, #8]
   1aaca:	2200      	movs	r2, #0
   1aacc:	9300      	str	r3, [sp, #0]
   1aace:	9201      	str	r2, [sp, #4]
   1aad0:	210d      	movs	r1, #13
   1aad2:	4620      	mov	r0, r4
   1aad4:	f7fe ff62 	bl	1999c <dw1000_write_reg>
    if (control.delay_start_enabled){
   1aad8:	2d00      	cmp	r5, #0
   1aada:	d13c      	bne.n	1ab56 <dw1000_start_tx+0xcc>
        inst->uwb_dev.status.start_tx_error = 0;
   1aadc:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1aae0:	f36f 0382 	bfc	r3, #2, #1
   1aae4:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    if(inst->control.sleep_after_tx) {
   1aae8:	f994 35b0 	ldrsb.w	r3, [r4, #1456]	; 0x5b0
   1aaec:	2b00      	cmp	r3, #0
   1aaee:	db5d      	blt.n	1abac <dw1000_start_tx+0x122>
    inst->control.wait4resp_enabled = false;
   1aaf0:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1aaf4:	f36f 0300 	bfc	r3, #0, #1
   1aaf8:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   1aafc:	b2db      	uxtb	r3, r3
   1aafe:	f36f 0341 	bfc	r3, #1, #1
   1ab02:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   1ab06:	b2db      	uxtb	r3, r3
   1ab08:	f36f 0382 	bfc	r3, #2, #1
   1ab0c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   1ab10:	b2db      	uxtb	r3, r3
   1ab12:	f36f 03c3 	bfc	r3, #3, #1
   1ab16:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   1ab1a:	b2db      	uxtb	r3, r3
   1ab1c:	f36f 1386 	bfc	r3, #6, #1
   1ab20:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
}
   1ab24:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ab28:	b004      	add	sp, #16
   1ab2a:	bd70      	pop	{r4, r5, r6, pc}
        inst->uwb_dev.status.sem_error = 1;
   1ab2c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ab30:	f043 0304 	orr.w	r3, r3, #4
   1ab34:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto sem_error;
   1ab38:	e7f4      	b.n	1ab24 <dw1000_start_tx+0x9a>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1ab3a:	2301      	movs	r3, #1
   1ab3c:	9302      	str	r3, [sp, #8]
   1ab3e:	2240      	movs	r2, #64	; 0x40
   1ab40:	2300      	movs	r3, #0
   1ab42:	e9cd 2300 	strd	r2, r3, [sp]
   1ab46:	2200      	movs	r2, #0
   1ab48:	210d      	movs	r1, #13
   1ab4a:	4620      	mov	r0, r4
   1ab4c:	f7fe ff26 	bl	1999c <dw1000_write_reg>
   1ab50:	e7ae      	b.n	1aab0 <dw1000_start_tx+0x26>
        sys_ctrl_reg |= SYS_CTRL_WAIT4RESP;
   1ab52:	2282      	movs	r2, #130	; 0x82
   1ab54:	e7b1      	b.n	1aaba <dw1000_start_tx+0x30>
        sys_status_reg = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint16_t)); // Read at offset 3 to get the upper 2 bytes out of 5
   1ab56:	2302      	movs	r3, #2
   1ab58:	2203      	movs	r2, #3
   1ab5a:	210f      	movs	r1, #15
   1ab5c:	4620      	mov	r0, r4
   1ab5e:	f7fe fead 	bl	198bc <dw1000_read_reg>
        inst->uwb_dev.status.start_tx_error = (sys_status_reg & ((SYS_STATUS_HPDWARN | SYS_STATUS_TXPUTE) >> 24)) != 0;
   1ab62:	f410 6f81 	tst.w	r0, #1032	; 0x408
   1ab66:	bf14      	ite	ne
   1ab68:	2201      	movne	r2, #1
   1ab6a:	2200      	moveq	r2, #0
   1ab6c:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1ab70:	f362 0382 	bfi	r3, r2, #2, #1
   1ab74:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_tx_error){
   1ab78:	b2db      	uxtb	r3, r3
   1ab7a:	f013 0f04 	tst.w	r3, #4
   1ab7e:	d0b3      	beq.n	1aae8 <dw1000_start_tx+0x5e>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1ab80:	2301      	movs	r3, #1
   1ab82:	9302      	str	r3, [sp, #8]
   1ab84:	2240      	movs	r2, #64	; 0x40
   1ab86:	2300      	movs	r3, #0
   1ab88:	e9cd 2300 	strd	r2, r3, [sp]
   1ab8c:	2200      	movs	r2, #0
   1ab8e:	210d      	movs	r1, #13
   1ab90:	4620      	mov	r0, r4
   1ab92:	f7fe ff03 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1ab96:	4630      	mov	r0, r6
   1ab98:	f7ef fa68 	bl	a06c <os_sem_release>
            assert(err == DPL_OK);
   1ab9c:	2800      	cmp	r0, #0
   1ab9e:	d0a3      	beq.n	1aae8 <dw1000_start_tx+0x5e>
   1aba0:	2300      	movs	r3, #0
   1aba2:	461a      	mov	r2, r3
   1aba4:	4619      	mov	r1, r3
   1aba6:	4618      	mov	r0, r3
   1aba8:	f7ee fb0c 	bl	91c4 <__assert_func>
        inst->uwb_dev.status.sleeping = 1;
   1abac:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1abb0:	f043 0301 	orr.w	r3, r3, #1
   1abb4:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1abb8:	4630      	mov	r0, r6
   1abba:	f7ef fa57 	bl	a06c <os_sem_release>
   1abbe:	e797      	b.n	1aaf0 <dw1000_start_tx+0x66>

0001abc0 <dw1000_tx_wait>:
{
   1abc0:	b510      	push	{r4, lr}
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1abc2:	f500 64ac 	add.w	r4, r0, #1376	; 0x560
   1abc6:	4620      	mov	r0, r4
   1abc8:	f7ef fa82 	bl	a0d0 <os_sem_pend>
    if (rc == DPL_OK) {
   1abcc:	b100      	cbz	r0, 1abd0 <dw1000_tx_wait+0x10>
}
   1abce:	bd10      	pop	{r4, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   1abd0:	4620      	mov	r0, r4
   1abd2:	f7ef fa4b 	bl	a06c <os_sem_release>
    return rc;
   1abd6:	e7fa      	b.n	1abce <dw1000_tx_wait+0xe>

0001abd8 <dw1000_set_delay_start>:
{
   1abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abda:	b085      	sub	sp, #20
   1abdc:	4604      	mov	r4, r0
   1abde:	4616      	mov	r6, r2
   1abe0:	461d      	mov	r5, r3
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1abe2:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1abe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1abea:	4638      	mov	r0, r7
   1abec:	f7f0 f890 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1abf0:	b148      	cbz	r0, 1ac06 <dw1000_set_delay_start+0x2e>
        inst->uwb_dev.status.mtx_error = 1;
   1abf2:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1abf6:	f043 0308 	orr.w	r3, r3, #8
   1abfa:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1abfe:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ac02:	b005      	add	sp, #20
   1ac04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->control.delay_start_enabled = true;
   1ac06:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1ac0a:	f043 0304 	orr.w	r3, r3, #4
   1ac0e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    dw1000_write_reg(inst, DX_TIME_ID, 1, dx_time >> 8, DX_TIME_LEN-1);
   1ac12:	2304      	movs	r3, #4
   1ac14:	9302      	str	r3, [sp, #8]
   1ac16:	0a36      	lsrs	r6, r6, #8
   1ac18:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   1ac1c:	0a2d      	lsrs	r5, r5, #8
   1ac1e:	9600      	str	r6, [sp, #0]
   1ac20:	9501      	str	r5, [sp, #4]
   1ac22:	2201      	movs	r2, #1
   1ac24:	210a      	movs	r1, #10
   1ac26:	4620      	mov	r0, r4
   1ac28:	f7fe feb8 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1ac2c:	4638      	mov	r0, r7
   1ac2e:	f7f0 f813 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d0e3      	beq.n	1abfe <dw1000_set_delay_start+0x26>
   1ac36:	2300      	movs	r3, #0
   1ac38:	461a      	mov	r2, r3
   1ac3a:	4619      	mov	r1, r3
   1ac3c:	4618      	mov	r0, r3
   1ac3e:	f7ee fac1 	bl	91c4 <__assert_func>

0001ac42 <dw1000_start_rx>:
{
   1ac42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac46:	b084      	sub	sp, #16
   1ac48:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1ac4a:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1ac4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ac52:	4638      	mov	r0, r7
   1ac54:	f7f0 f85c 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1ac58:	2800      	cmp	r0, #0
   1ac5a:	d157      	bne.n	1ad0c <dw1000_start_rx+0xca>
    control = inst->control;
   1ac5c:	f8d4 55b0 	ldr.w	r5, [r4, #1456]	; 0x5b0
    inst->uwb_dev.status.rx_restarted = 0;
   1ac60:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1ac64:	f36f 03c3 	bfc	r3, #3, #1
   1ac68:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
    if (config->trxoff_enable){ // force return to idle state, if in RX state
   1ac6c:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1ac70:	f013 0f20 	tst.w	r3, #32
   1ac74:	d151      	bne.n	1ad1a <dw1000_start_rx+0xd8>
    if (config->dblbuffon_enabled) {
   1ac76:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1ac7a:	f013 0f10 	tst.w	r3, #16
   1ac7e:	d161      	bne.n	1ad44 <dw1000_start_rx+0x102>
    if (control.delay_start_enabled)
   1ac80:	fa5f f885 	uxtb.w	r8, r5
   1ac84:	f015 0504 	ands.w	r5, r5, #4
   1ac88:	d17a      	bne.n	1ad80 <dw1000_start_rx+0x13e>
    sys_ctrl = SYS_CTRL_RXENAB;
   1ac8a:	f44f 7680 	mov.w	r6, #256	; 0x100
    if (control.wait4resp_enabled) {
   1ac8e:	f018 0f01 	tst.w	r8, #1
   1ac92:	d001      	beq.n	1ac98 <dw1000_start_rx+0x56>
        sys_ctrl |= SYS_CTRL_WAIT4RESP;
   1ac94:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t));
   1ac98:	2302      	movs	r3, #2
   1ac9a:	9302      	str	r3, [sp, #8]
   1ac9c:	2200      	movs	r2, #0
   1ac9e:	9600      	str	r6, [sp, #0]
   1aca0:	9201      	str	r2, [sp, #4]
   1aca2:	210d      	movs	r1, #13
   1aca4:	4620      	mov	r0, r4
   1aca6:	f7fe fe79 	bl	1999c <dw1000_write_reg>
    if (control.delay_start_enabled){   // check for errors
   1acaa:	2d00      	cmp	r5, #0
   1acac:	d16b      	bne.n	1ad86 <dw1000_start_rx+0x144>
        inst->uwb_dev.status.start_rx_error = 0;
   1acae:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1acb2:	f36f 03c3 	bfc	r3, #3, #1
   1acb6:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    inst->control.wait4resp_enabled = false;
   1acba:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1acbe:	f36f 0300 	bfc	r3, #0, #1
   1acc2:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.wait4resp_delay_enabled = false;
   1acc6:	b2db      	uxtb	r3, r3
   1acc8:	f36f 0341 	bfc	r3, #1, #1
   1accc:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.delay_start_enabled = false;
   1acd0:	b2db      	uxtb	r3, r3
   1acd2:	f36f 0382 	bfc	r3, #2, #1
   1acd6:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.autoack_delay_enabled = false;
   1acda:	b2db      	uxtb	r3, r3
   1acdc:	f36f 03c3 	bfc	r3, #3, #1
   1ace0:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.start_rx_syncbuf_enabled = false;
   1ace4:	b2db      	uxtb	r3, r3
   1ace6:	f36f 1304 	bfc	r3, #4, #1
   1acea:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    inst->control.on_error_continue_enabled = false;
   1acee:	b2db      	uxtb	r3, r3
   1acf0:	f36f 1386 	bfc	r3, #6, #1
   1acf4:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1acf8:	4638      	mov	r0, r7
   1acfa:	f7ef ffad 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1acfe:	2800      	cmp	r0, #0
   1ad00:	d16f      	bne.n	1ade2 <dw1000_start_rx+0x1a0>
}
   1ad02:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ad06:	b004      	add	sp, #16
   1ad08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        inst->uwb_dev.status.mtx_error = 1;
   1ad0c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ad10:	f043 0308 	orr.w	r3, r3, #8
   1ad14:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
        goto mtx_error;
   1ad18:	e7f3      	b.n	1ad02 <dw1000_start_rx+0xc0>
        uint8_t state = (uint8_t) dw1000_read_reg(inst, SYS_STATE_ID, PMSC_STATE_OFFSET, sizeof(uint8_t));
   1ad1a:	2301      	movs	r3, #1
   1ad1c:	2202      	movs	r2, #2
   1ad1e:	2119      	movs	r1, #25
   1ad20:	4620      	mov	r0, r4
   1ad22:	f7fe fdcb 	bl	198bc <dw1000_read_reg>
   1ad26:	b2c0      	uxtb	r0, r0
        if(state != PMSC_STATE_IDLE){
   1ad28:	2801      	cmp	r0, #1
   1ad2a:	d0a4      	beq.n	1ac76 <dw1000_start_rx+0x34>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1ad2c:	2301      	movs	r3, #1
   1ad2e:	9302      	str	r3, [sp, #8]
   1ad30:	2240      	movs	r2, #64	; 0x40
   1ad32:	2300      	movs	r3, #0
   1ad34:	e9cd 2300 	strd	r2, r3, [sp]
   1ad38:	2200      	movs	r2, #0
   1ad3a:	210d      	movs	r1, #13
   1ad3c:	4620      	mov	r0, r4
   1ad3e:	f7fe fe2d 	bl	1999c <dw1000_write_reg>
   1ad42:	e798      	b.n	1ac76 <dw1000_start_rx+0x34>
    inst->control.start_rx_syncbuf_enabled = 1;
   1ad44:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1ad48:	f043 0310 	orr.w	r3, r3, #16
   1ad4c:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1ad50:	2301      	movs	r3, #1
   1ad52:	2203      	movs	r2, #3
   1ad54:	210f      	movs	r1, #15
   1ad56:	4620      	mov	r0, r4
   1ad58:	f7fe fdb0 	bl	198bc <dw1000_read_reg>
   1ad5c:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1ad5e:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1ad62:	f010 0f80 	tst.w	r0, #128	; 0x80
   1ad66:	d08b      	beq.n	1ac80 <dw1000_start_rx+0x3e>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1ad68:	2301      	movs	r3, #1
   1ad6a:	9302      	str	r3, [sp, #8]
   1ad6c:	2201      	movs	r2, #1
   1ad6e:	2300      	movs	r3, #0
   1ad70:	e9cd 2300 	strd	r2, r3, [sp]
   1ad74:	2203      	movs	r2, #3
   1ad76:	210d      	movs	r1, #13
   1ad78:	4620      	mov	r0, r4
   1ad7a:	f7fe fe0f 	bl	1999c <dw1000_write_reg>
    return inst->uwb_dev.status;
   1ad7e:	e77f      	b.n	1ac80 <dw1000_start_rx+0x3e>
        sys_ctrl |= SYS_CTRL_RXDLYE;
   1ad80:	f44f 7640 	mov.w	r6, #768	; 0x300
   1ad84:	e783      	b.n	1ac8e <dw1000_start_rx+0x4c>
        sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));  // Read 1 byte at offset 3 to get the 4th byte out of 5
   1ad86:	2301      	movs	r3, #1
   1ad88:	2203      	movs	r2, #3
   1ad8a:	210f      	movs	r1, #15
   1ad8c:	4620      	mov	r0, r4
   1ad8e:	f7fe fd95 	bl	198bc <dw1000_read_reg>
        inst->uwb_dev.status.start_rx_error = (sys_status & (SYS_STATUS_HPDWARN >> 24)) != 0;
   1ad92:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1ad96:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1ad9a:	f360 03c3 	bfi	r3, r0, #3, #1
   1ad9e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
        if (inst->uwb_dev.status.start_rx_error){   // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
   1ada2:	b2db      	uxtb	r3, r3
   1ada4:	f013 0f08 	tst.w	r3, #8
   1ada8:	d087      	beq.n	1acba <dw1000_start_rx+0x78>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   1adaa:	2301      	movs	r3, #1
   1adac:	9302      	str	r3, [sp, #8]
   1adae:	2240      	movs	r2, #64	; 0x40
   1adb0:	2300      	movs	r3, #0
   1adb2:	e9cd 2300 	strd	r2, r3, [sp]
   1adb6:	2200      	movs	r2, #0
   1adb8:	210d      	movs	r1, #13
   1adba:	4620      	mov	r0, r4
   1adbc:	f7fe fdee 	bl	1999c <dw1000_write_reg>
            if (control.on_error_continue_enabled){
   1adc0:	f018 0f40 	tst.w	r8, #64	; 0x40
   1adc4:	f43f af79 	beq.w	1acba <dw1000_start_rx+0x78>
                sys_ctrl &= ~SYS_CTRL_RXDLYE;
   1adc8:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   1adcc:	b2b6      	uxth	r6, r6
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, sys_ctrl, sizeof(uint16_t)); // turn on receiver
   1adce:	2302      	movs	r3, #2
   1add0:	9302      	str	r3, [sp, #8]
   1add2:	2200      	movs	r2, #0
   1add4:	9600      	str	r6, [sp, #0]
   1add6:	9201      	str	r2, [sp, #4]
   1add8:	210d      	movs	r1, #13
   1adda:	4620      	mov	r0, r4
   1addc:	f7fe fdde 	bl	1999c <dw1000_write_reg>
   1ade0:	e76b      	b.n	1acba <dw1000_start_rx+0x78>
    assert(err == DPL_OK);
   1ade2:	2300      	movs	r3, #0
   1ade4:	461a      	mov	r2, r3
   1ade6:	4619      	mov	r1, r3
   1ade8:	4618      	mov	r0, r3
   1adea:	f7ee f9eb 	bl	91c4 <__assert_func>
	...

0001adf0 <dw1000_stop_rx>:
{
   1adf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adf2:	b085      	sub	sp, #20
   1adf4:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1adf6:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1adfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1adfe:	4628      	mov	r0, r5
   1ae00:	f7ef ff86 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1ae04:	b148      	cbz	r0, 1ae1a <dw1000_stop_rx+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   1ae06:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ae0a:	f043 0308 	orr.w	r3, r3, #8
   1ae0e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1ae12:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ae16:	b005      	add	sp, #20
   1ae18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   1ae1a:	2304      	movs	r3, #4
   1ae1c:	2200      	movs	r2, #0
   1ae1e:	210e      	movs	r1, #14
   1ae20:	4620      	mov	r0, r4
   1ae22:	f7fe fd4b 	bl	198bc <dw1000_read_reg>
   1ae26:	4606      	mov	r6, r0
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   1ae28:	2704      	movs	r7, #4
   1ae2a:	9702      	str	r7, [sp, #8]
   1ae2c:	2200      	movs	r2, #0
   1ae2e:	2300      	movs	r3, #0
   1ae30:	e9cd 2300 	strd	r2, r3, [sp]
   1ae34:	210e      	movs	r1, #14
   1ae36:	4620      	mov	r0, r4
   1ae38:	f7fe fdb0 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t)); // return to idle state
   1ae3c:	2301      	movs	r3, #1
   1ae3e:	9302      	str	r3, [sp, #8]
   1ae40:	2240      	movs	r2, #64	; 0x40
   1ae42:	2300      	movs	r3, #0
   1ae44:	e9cd 2300 	strd	r2, r3, [sp]
   1ae48:	2200      	movs	r2, #0
   1ae4a:	210d      	movs	r1, #13
   1ae4c:	4620      	mov	r0, r4
   1ae4e:	f7fe fda5 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD), sizeof(uint32_t));
   1ae52:	9702      	str	r7, [sp, #8]
   1ae54:	a30e      	add	r3, pc, #56	; (adr r3, 1ae90 <dw1000_stop_rx+0xa0>)
   1ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae5a:	e9cd 2300 	strd	r2, r3, [sp]
   1ae5e:	2200      	movs	r2, #0
   1ae60:	210f      	movs	r1, #15
   1ae62:	4620      	mov	r0, r4
   1ae64:	f7fe fd9a 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   1ae68:	9702      	str	r7, [sp, #8]
   1ae6a:	2200      	movs	r2, #0
   1ae6c:	9600      	str	r6, [sp, #0]
   1ae6e:	9201      	str	r2, [sp, #4]
   1ae70:	210e      	movs	r1, #14
   1ae72:	4620      	mov	r0, r4
   1ae74:	f7fe fd92 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1ae78:	4628      	mov	r0, r5
   1ae7a:	f7ef feed 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1ae7e:	2800      	cmp	r0, #0
   1ae80:	d0c7      	beq.n	1ae12 <dw1000_stop_rx+0x22>
   1ae82:	2300      	movs	r3, #0
   1ae84:	461a      	mov	r2, r3
   1ae86:	4619      	mov	r1, r3
   1ae88:	4618      	mov	r0, r3
   1ae8a:	f7ee f99b 	bl	91c4 <__assert_func>
   1ae8e:	bf00      	nop
   1ae90:	2433fbf8 	.word	0x2433fbf8
   1ae94:	00000000 	.word	0x00000000

0001ae98 <dw1000_set_wait4resp>:
    inst->uwb_dev.status.rx_restarted = 0;
   1ae98:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
   1ae9c:	f36f 03c3 	bfc	r3, #3, #1
   1aea0:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
    inst->control.wait4resp_enabled = enable;
   1aea4:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1aea8:	f361 0300 	bfi	r3, r1, #0, #1
   1aeac:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   1aeb0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1aeb4:	4770      	bx	lr

0001aeb6 <dw1000_set_on_error_continue>:
    inst->control.on_error_continue_enabled = enable;
   1aeb6:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1aeba:	f361 1386 	bfi	r3, r1, #6, #1
   1aebe:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
}
   1aec2:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1aec6:	4770      	bx	lr

0001aec8 <dw1000_set_rxauto_disable>:
    inst->control.rxauto_disable = disable;
   1aec8:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   1aecc:	f361 0382 	bfi	r3, r1, #2, #1
   1aed0:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
}
   1aed4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1aed8:	4770      	bx	lr

0001aeda <dw1000_adj_rx_timeout>:
{
   1aeda:	b510      	push	{r4, lr}
   1aedc:	b084      	sub	sp, #16
   1aede:	4604      	mov	r4, r0
    dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   1aee0:	2302      	movs	r3, #2
   1aee2:	9302      	str	r3, [sp, #8]
   1aee4:	2200      	movs	r2, #0
   1aee6:	9100      	str	r1, [sp, #0]
   1aee8:	9201      	str	r2, [sp, #4]
   1aeea:	210c      	movs	r1, #12
   1aeec:	f7fe fd56 	bl	1999c <dw1000_write_reg>
}
   1aef0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1aef4:	b004      	add	sp, #16
   1aef6:	bd10      	pop	{r4, pc}

0001aef8 <update_rx_window_timeout>:
{
   1aef8:	b538      	push	{r3, r4, r5, lr}
   1aefa:	4605      	mov	r5, r0
   1aefc:	4610      	mov	r0, r2
   1aefe:	4619      	mov	r1, r3
    uint32_t timeout = calc_rx_window_timeout(rel_start, inst->uwb_dev.abs_timeout);
   1af00:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
   1af04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1af08:	f7ff fcd1 	bl	1a8ae <calc_rx_window_timeout>
   1af0c:	4604      	mov	r4, r0
    dw1000_adj_rx_timeout(inst, timeout);
   1af0e:	4601      	mov	r1, r0
   1af10:	4628      	mov	r0, r5
   1af12:	f7ff ffe2 	bl	1aeda <dw1000_adj_rx_timeout>
}
   1af16:	4620      	mov	r0, r4
   1af18:	bd38      	pop	{r3, r4, r5, pc}

0001af1a <dw1000_set_rx_timeout>:
{
   1af1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af1c:	b085      	sub	sp, #20
   1af1e:	4604      	mov	r4, r0
   1af20:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1af22:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1af26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af2a:	4638      	mov	r0, r7
   1af2c:	f7ef fef0 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1af30:	b148      	cbz	r0, 1af46 <dw1000_set_rx_timeout+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1af32:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1af36:	f043 0308 	orr.w	r3, r3, #8
   1af3a:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1af3e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1af42:	b005      	add	sp, #20
   1af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inst->uwb_dev.status.rx_timeout_error = 0;
   1af46:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1af4a:	f36f 13c7 	bfc	r3, #7, #1
   1af4e:	f884 3508 	strb.w	r3, [r4, #1288]	; 0x508
    sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 3, sizeof(uint8_t));
   1af52:	2301      	movs	r3, #1
   1af54:	2203      	movs	r2, #3
   1af56:	2104      	movs	r1, #4
   1af58:	4620      	mov	r0, r4
   1af5a:	f7fe fcaf 	bl	198bc <dw1000_read_reg>
   1af5e:	b2c5      	uxtb	r5, r0
    inst->control.rx_timeout_enabled = timeout > 0;
   1af60:	1e32      	subs	r2, r6, #0
   1af62:	bf18      	it	ne
   1af64:	2201      	movne	r2, #1
   1af66:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1af6a:	f362 1345 	bfi	r3, r2, #5, #1
   1af6e:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if(inst->control.rx_timeout_enabled) {
   1af72:	b2db      	uxtb	r3, r3
   1af74:	f013 0f20 	tst.w	r3, #32
   1af78:	d10e      	bne.n	1af98 <dw1000_set_rx_timeout+0x7e>
        new_reg_val = sys_cfg_reg & (~(SYS_CFG_RXWTOE>>24));
   1af7a:	f005 03ef 	and.w	r3, r5, #239	; 0xef
    if (sys_cfg_reg != new_reg_val) {
   1af7e:	42ab      	cmp	r3, r5
   1af80:	d116      	bne.n	1afb0 <dw1000_set_rx_timeout+0x96>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1af82:	4638      	mov	r0, r7
   1af84:	f7ef fe68 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1af88:	2800      	cmp	r0, #0
   1af8a:	d0d8      	beq.n	1af3e <dw1000_set_rx_timeout+0x24>
   1af8c:	2300      	movs	r3, #0
   1af8e:	461a      	mov	r2, r3
   1af90:	4619      	mov	r1, r3
   1af92:	4618      	mov	r0, r3
   1af94:	f7ee f916 	bl	91c4 <__assert_func>
        dw1000_write_reg(inst, RX_FWTO_ID, RX_FWTO_OFFSET, timeout, sizeof(uint16_t));
   1af98:	2302      	movs	r3, #2
   1af9a:	9302      	str	r3, [sp, #8]
   1af9c:	2200      	movs	r2, #0
   1af9e:	9600      	str	r6, [sp, #0]
   1afa0:	9201      	str	r2, [sp, #4]
   1afa2:	210c      	movs	r1, #12
   1afa4:	4620      	mov	r0, r4
   1afa6:	f7fe fcf9 	bl	1999c <dw1000_write_reg>
        new_reg_val = sys_cfg_reg | (SYS_CFG_RXWTOE>>24);
   1afaa:	f045 0310 	orr.w	r3, r5, #16
   1afae:	e7e6      	b.n	1af7e <dw1000_set_rx_timeout+0x64>
        dw1000_write_reg(inst, SYS_CFG_ID, 3, new_reg_val, sizeof(uint8_t));
   1afb0:	2201      	movs	r2, #1
   1afb2:	9202      	str	r2, [sp, #8]
   1afb4:	9300      	str	r3, [sp, #0]
   1afb6:	2300      	movs	r3, #0
   1afb8:	9301      	str	r3, [sp, #4]
   1afba:	2203      	movs	r2, #3
   1afbc:	2104      	movs	r1, #4
   1afbe:	4620      	mov	r0, r4
   1afc0:	f7fe fcec 	bl	1999c <dw1000_write_reg>
   1afc4:	e7dd      	b.n	1af82 <dw1000_set_rx_timeout+0x68>

0001afc6 <dw1000_set_rx_window>:
{
   1afc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afca:	4604      	mov	r4, r0
   1afcc:	4690      	mov	r8, r2
   1afce:	461d      	mov	r5, r3
   1afd0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    dw1000_set_delay_start(inst, rx_start);
   1afd4:	f7ff fe00 	bl	1abd8 <dw1000_set_delay_start>
    timeout = calc_rx_window_timeout(rx_start, rx_end);
   1afd8:	4632      	mov	r2, r6
   1afda:	463b      	mov	r3, r7
   1afdc:	4640      	mov	r0, r8
   1afde:	4629      	mov	r1, r5
   1afe0:	f7ff fc65 	bl	1a8ae <calc_rx_window_timeout>
   1afe4:	4601      	mov	r1, r0
    inst->control.abs_timeout = 1;
   1afe6:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1afea:	f043 0308 	orr.w	r3, r3, #8
   1afee:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   1aff2:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   1aff6:	e943 6702 	strd	r6, r7, [r3, #-8]
    dw1000_set_rx_timeout(inst, timeout);
   1affa:	4620      	mov	r0, r4
   1affc:	f7ff ff8d 	bl	1af1a <dw1000_set_rx_timeout>
}
   1b000:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b008 <dw1000_set_abs_timeout>:
{
   1b008:	b430      	push	{r4, r5}
   1b00a:	4614      	mov	r4, r2
   1b00c:	461d      	mov	r5, r3
    inst->control.abs_timeout = 1;
   1b00e:	f890 35b1 	ldrb.w	r3, [r0, #1457]	; 0x5b1
   1b012:	f043 0308 	orr.w	r3, r3, #8
   1b016:	f880 35b1 	strb.w	r3, [r0, #1457]	; 0x5b1
    inst->uwb_dev.abs_timeout = rx_end;
   1b01a:	f500 639c 	add.w	r3, r0, #1248	; 0x4e0
   1b01e:	e943 4502 	strd	r4, r5, [r3, #-8]
}
   1b022:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1b026:	bc30      	pop	{r4, r5}
   1b028:	4770      	bx	lr

0001b02a <dw1000_sync_rxbufptrs>:
{
   1b02a:	b510      	push	{r4, lr}
   1b02c:	b084      	sub	sp, #16
   1b02e:	4604      	mov	r4, r0
    inst->control.start_rx_syncbuf_enabled = 1;
   1b030:	f890 35b0 	ldrb.w	r3, [r0, #1456]	; 0x5b0
   1b034:	f043 0310 	orr.w	r3, r3, #16
   1b038:	f880 35b0 	strb.w	r3, [r0, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1b03c:	2301      	movs	r3, #1
   1b03e:	2203      	movs	r2, #3
   1b040:	210f      	movs	r1, #15
   1b042:	f7fe fc3b 	bl	198bc <dw1000_read_reg>
   1b046:	b2c3      	uxtb	r3, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1b048:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
   1b04c:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b050:	d103      	bne.n	1b05a <dw1000_sync_rxbufptrs+0x30>
}
   1b052:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b056:	b004      	add	sp, #16
   1b058:	bd10      	pop	{r4, pc}
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1b05a:	2301      	movs	r3, #1
   1b05c:	9302      	str	r3, [sp, #8]
   1b05e:	2201      	movs	r2, #1
   1b060:	2300      	movs	r3, #0
   1b062:	e9cd 2300 	strd	r2, r3, [sp]
   1b066:	2203      	movs	r2, #3
   1b068:	210d      	movs	r1, #13
   1b06a:	4620      	mov	r0, r4
   1b06c:	f7fe fc96 	bl	1999c <dw1000_write_reg>
   1b070:	e7ef      	b.n	1b052 <dw1000_sync_rxbufptrs+0x28>
	...

0001b074 <dw1000_mac_framefilter>:
{
   1b074:	b570      	push	{r4, r5, r6, lr}
   1b076:	b084      	sub	sp, #16
   1b078:	4604      	mov	r4, r0
   1b07a:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b07c:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1b080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b084:	4630      	mov	r0, r6
   1b086:	f7ef fe43 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1b08a:	b148      	cbz	r0, 1b0a0 <dw1000_mac_framefilter+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b08c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b090:	f043 0308 	orr.w	r3, r3, #8
   1b094:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b098:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b09c:	b004      	add	sp, #16
   1b09e:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   1b0a0:	2304      	movs	r3, #4
   1b0a2:	2200      	movs	r2, #0
   1b0a4:	4619      	mov	r1, r3
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f7fe fc08 	bl	198bc <dw1000_read_reg>
    inst->uwb_dev.config.rx.frameFilter = enable;
   1b0ac:	f8a4 551c 	strh.w	r5, [r4, #1308]	; 0x51c
    if(enable > 0){   // Enable frame filtering and configure frame types
   1b0b0:	b1cd      	cbz	r5, 1b0e6 <dw1000_mac_framefilter+0x72>
        sys_cfg_reg &= ~(SYS_CFG_FF_ALL_EN);  // Clear all
   1b0b2:	4b0e      	ldr	r3, [pc, #56]	; (1b0ec <dw1000_mac_framefilter+0x78>)
   1b0b4:	4003      	ands	r3, r0
        sys_cfg_reg |= (enable & SYS_CFG_FF_ALL_EN) | SYS_CFG_FFE;
   1b0b6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   1b0ba:	431d      	orrs	r5, r3
   1b0bc:	f045 0501 	orr.w	r5, r5, #1
    dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1b0c0:	2104      	movs	r1, #4
   1b0c2:	9102      	str	r1, [sp, #8]
   1b0c4:	2200      	movs	r2, #0
   1b0c6:	9500      	str	r5, [sp, #0]
   1b0c8:	9201      	str	r2, [sp, #4]
   1b0ca:	4620      	mov	r0, r4
   1b0cc:	f7fe fc66 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b0d0:	4630      	mov	r0, r6
   1b0d2:	f7ef fdc1 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1b0d6:	2800      	cmp	r0, #0
   1b0d8:	d0de      	beq.n	1b098 <dw1000_mac_framefilter+0x24>
   1b0da:	2300      	movs	r3, #0
   1b0dc:	461a      	mov	r2, r3
   1b0de:	4619      	mov	r1, r3
   1b0e0:	4618      	mov	r0, r3
   1b0e2:	f7ee f86f 	bl	91c4 <__assert_func>
        sys_cfg_reg &= ~(SYS_CFG_FFE);
   1b0e6:	4d02      	ldr	r5, [pc, #8]	; (1b0f0 <dw1000_mac_framefilter+0x7c>)
   1b0e8:	4005      	ands	r5, r0
   1b0ea:	e7e9      	b.n	1b0c0 <dw1000_mac_framefilter+0x4c>
   1b0ec:	f047fe01 	.word	0xf047fe01
   1b0f0:	f047fffe 	.word	0xf047fffe

0001b0f4 <dw1000_set_autoack>:
{
   1b0f4:	b570      	push	{r4, r5, r6, lr}
   1b0f6:	b084      	sub	sp, #16
   1b0f8:	4604      	mov	r4, r0
   1b0fa:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b0fc:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1b100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b104:	4630      	mov	r0, r6
   1b106:	f7ef fe03 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1b10a:	b148      	cbz	r0, 1b120 <dw1000_set_autoack+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b10c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b110:	f043 0308 	orr.w	r3, r3, #8
   1b114:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b118:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b11c:	b004      	add	sp, #16
   1b11e:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)); // Read sysconfig register
   1b120:	2304      	movs	r3, #4
   1b122:	2200      	movs	r2, #0
   1b124:	4619      	mov	r1, r3
   1b126:	4620      	mov	r0, r4
   1b128:	f7fe fbc8 	bl	198bc <dw1000_read_reg>
   1b12c:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1b130:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.autoack_enabled = enable;
   1b134:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1b138:	f365 0282 	bfi	r2, r5, #2, #1
   1b13c:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.autoack_enabled){
   1b140:	b2d2      	uxtb	r2, r2
   1b142:	f012 0f04 	tst.w	r2, #4
   1b146:	d014      	beq.n	1b172 <dw1000_set_autoack+0x7e>
        sys_cfg_reg |= SYS_CFG_AUTOACK;
   1b148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1b14c:	2104      	movs	r1, #4
   1b14e:	9102      	str	r1, [sp, #8]
   1b150:	2200      	movs	r2, #0
   1b152:	9300      	str	r3, [sp, #0]
   1b154:	9201      	str	r2, [sp, #4]
   1b156:	4620      	mov	r0, r4
   1b158:	f7fe fc20 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b15c:	4630      	mov	r0, r6
   1b15e:	f7ef fd7b 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1b162:	2800      	cmp	r0, #0
   1b164:	d0d8      	beq.n	1b118 <dw1000_set_autoack+0x24>
   1b166:	2300      	movs	r3, #0
   1b168:	461a      	mov	r2, r3
   1b16a:	4619      	mov	r1, r3
   1b16c:	4618      	mov	r0, r3
   1b16e:	f7ee f829 	bl	91c4 <__assert_func>
        sys_cfg_reg &= ~SYS_CFG_AUTOACK;
   1b172:	f020 409f 	bic.w	r0, r0, #1333788672	; 0x4f800000
   1b176:	f420 1060 	bic.w	r0, r0, #3670016	; 0x380000
        dw1000_write_reg(inst, SYS_CFG_ID,0, sys_cfg_reg, sizeof(uint32_t));
   1b17a:	2104      	movs	r1, #4
   1b17c:	9102      	str	r1, [sp, #8]
   1b17e:	2200      	movs	r2, #0
   1b180:	9000      	str	r0, [sp, #0]
   1b182:	9201      	str	r2, [sp, #4]
   1b184:	4620      	mov	r0, r4
   1b186:	f7fe fc09 	bl	1999c <dw1000_write_reg>
   1b18a:	e7e7      	b.n	1b15c <dw1000_set_autoack+0x68>

0001b18c <dw1000_set_autoack_delay>:
{
   1b18c:	b530      	push	{r4, r5, lr}
   1b18e:	b085      	sub	sp, #20
   1b190:	4604      	mov	r4, r0
    dw1000_write_reg(inst, ACK_RESP_T_ID, ACK_RESP_T_ACK_TIM_OFFSET, delay, sizeof(uint8_t));
   1b192:	2501      	movs	r5, #1
   1b194:	9502      	str	r5, [sp, #8]
   1b196:	9100      	str	r1, [sp, #0]
   1b198:	2300      	movs	r3, #0
   1b19a:	9301      	str	r3, [sp, #4]
   1b19c:	2203      	movs	r2, #3
   1b19e:	211a      	movs	r1, #26
   1b1a0:	f7fe fbfc 	bl	1999c <dw1000_write_reg>
    dw1000_set_autoack(inst, true);
   1b1a4:	4629      	mov	r1, r5
   1b1a6:	4620      	mov	r0, r4
   1b1a8:	f7ff ffa4 	bl	1b0f4 <dw1000_set_autoack>
}
   1b1ac:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b1b0:	b005      	add	sp, #20
   1b1b2:	bd30      	pop	{r4, r5, pc}

0001b1b4 <dw1000_set_wait4resp_delay>:
{
   1b1b4:	b570      	push	{r4, r5, r6, lr}
   1b1b6:	b084      	sub	sp, #16
   1b1b8:	4604      	mov	r4, r0
   1b1ba:	460e      	mov	r6, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b1bc:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1b1c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b1c4:	4628      	mov	r0, r5
   1b1c6:	f7ef fda3 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1b1ca:	b148      	cbz	r0, 1b1e0 <dw1000_set_wait4resp_delay+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b1cc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b1d0:	f043 0308 	orr.w	r3, r3, #8
   1b1d4:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b1d8:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b1dc:	b004      	add	sp, #16
   1b1de:	bd70      	pop	{r4, r5, r6, pc}
    ack_resp_reg = dw1000_read_reg(inst, ACK_RESP_T_ID, 0, sizeof(uint32_t));
   1b1e0:	2304      	movs	r3, #4
   1b1e2:	2200      	movs	r2, #0
   1b1e4:	211a      	movs	r1, #26
   1b1e6:	4620      	mov	r0, r4
   1b1e8:	f7fe fb68 	bl	198bc <dw1000_read_reg>
    inst->control.wait4resp_delay_enabled = delay > 0;
   1b1ec:	1e32      	subs	r2, r6, #0
   1b1ee:	bf18      	it	ne
   1b1f0:	2201      	movne	r2, #1
   1b1f2:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1b1f6:	f362 0341 	bfi	r3, r2, #1, #1
   1b1fa:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    if (inst->control.wait4resp_delay_enabled || (ack_resp_reg&ACK_RESP_T_W4R_TIM_MASK)) {
   1b1fe:	b2db      	uxtb	r3, r3
   1b200:	f013 0f02 	tst.w	r3, #2
   1b204:	d102      	bne.n	1b20c <dw1000_set_wait4resp_delay+0x58>
   1b206:	f3c0 0313 	ubfx	r3, r0, #0, #20
   1b20a:	b16b      	cbz	r3, 1b228 <dw1000_set_wait4resp_delay+0x74>
        ack_resp_reg &= ~(ACK_RESP_T_W4R_TIM_MASK) ;        // Clear the timer (19:0)
   1b20c:	0d00      	lsrs	r0, r0, #20
   1b20e:	0500      	lsls	r0, r0, #20
        ack_resp_reg |= (delay & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
   1b210:	f3c6 0113 	ubfx	r1, r6, #0, #20
   1b214:	4308      	orrs	r0, r1
        dw1000_write_reg(inst, ACK_RESP_T_ID, 0, ack_resp_reg, sizeof(uint32_t));
   1b216:	2304      	movs	r3, #4
   1b218:	9302      	str	r3, [sp, #8]
   1b21a:	2200      	movs	r2, #0
   1b21c:	9000      	str	r0, [sp, #0]
   1b21e:	9201      	str	r2, [sp, #4]
   1b220:	211a      	movs	r1, #26
   1b222:	4620      	mov	r0, r4
   1b224:	f7fe fbba 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b228:	4628      	mov	r0, r5
   1b22a:	f7ef fd15 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1b22e:	2800      	cmp	r0, #0
   1b230:	d0d2      	beq.n	1b1d8 <dw1000_set_wait4resp_delay+0x24>
   1b232:	2300      	movs	r3, #0
   1b234:	461a      	mov	r2, r3
   1b236:	4619      	mov	r1, r3
   1b238:	4618      	mov	r0, r3
   1b23a:	f7ed ffc3 	bl	91c4 <__assert_func>

0001b23e <dw1000_set_dblrxbuff>:
{
   1b23e:	b570      	push	{r4, r5, r6, lr}
   1b240:	b084      	sub	sp, #16
   1b242:	4604      	mov	r4, r0
   1b244:	460d      	mov	r5, r1
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b246:	f500 66ad 	add.w	r6, r0, #1384	; 0x568
   1b24a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b24e:	4630      	mov	r0, r6
   1b250:	f7ef fd5e 	bl	ad10 <os_mutex_pend>
    if (err != DPL_OK) {
   1b254:	b148      	cbz	r0, 1b26a <dw1000_set_dblrxbuff+0x2c>
        inst->uwb_dev.status.mtx_error = 1;
   1b256:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b25a:	f043 0308 	orr.w	r3, r3, #8
   1b25e:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
}
   1b262:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b266:	b004      	add	sp, #16
   1b268:	bd70      	pop	{r4, r5, r6, pc}
    sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   1b26a:	2304      	movs	r3, #4
   1b26c:	2200      	movs	r2, #0
   1b26e:	4619      	mov	r1, r3
   1b270:	4620      	mov	r0, r4
   1b272:	f7fe fb23 	bl	198bc <dw1000_read_reg>
   1b276:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1b27a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    inst->uwb_dev.config.dblbuffon_enabled = enable;
   1b27e:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
   1b282:	f365 1204 	bfi	r2, r5, #4, #1
   1b286:	f884 252c 	strb.w	r2, [r4, #1324]	; 0x52c
    if(inst->uwb_dev.config.dblbuffon_enabled)
   1b28a:	b2d2      	uxtb	r2, r2
   1b28c:	f012 0f10 	tst.w	r2, #16
   1b290:	d028      	beq.n	1b2e4 <dw1000_set_dblrxbuff+0xa6>
        sys_cfg_reg &= ~SYS_CFG_DIS_DRXB;
   1b292:	f020 637b 	bic.w	r3, r0, #263192576	; 0xfb00000
   1b296:	f423 2301 	bic.w	r3, r3, #528384	; 0x81000
    dw1000_write_reg(inst, SYS_CFG_ID, 0, sys_cfg_reg, sizeof(uint32_t));
   1b29a:	2104      	movs	r1, #4
   1b29c:	9102      	str	r1, [sp, #8]
   1b29e:	2200      	movs	r2, #0
   1b2a0:	9300      	str	r3, [sp, #0]
   1b2a2:	9201      	str	r2, [sp, #4]
   1b2a4:	4620      	mov	r0, r4
   1b2a6:	f7fe fb79 	bl	1999c <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   1b2aa:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1b2ae:	f043 0310 	orr.w	r3, r3, #16
   1b2b2:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1b2b6:	2301      	movs	r3, #1
   1b2b8:	2203      	movs	r2, #3
   1b2ba:	210f      	movs	r1, #15
   1b2bc:	4620      	mov	r0, r4
   1b2be:	f7fe fafd 	bl	198bc <dw1000_read_reg>
   1b2c2:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1b2c4:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1b2c8:	f010 0f80 	tst.w	r0, #128	; 0x80
   1b2cc:	d10d      	bne.n	1b2ea <dw1000_set_dblrxbuff+0xac>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1b2ce:	4630      	mov	r0, r6
   1b2d0:	f7ef fcc2 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1b2d4:	2800      	cmp	r0, #0
   1b2d6:	d0c4      	beq.n	1b262 <dw1000_set_dblrxbuff+0x24>
   1b2d8:	2300      	movs	r3, #0
   1b2da:	461a      	mov	r2, r3
   1b2dc:	4619      	mov	r1, r3
   1b2de:	4618      	mov	r0, r3
   1b2e0:	f7ed ff70 	bl	91c4 <__assert_func>
        sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   1b2e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b2e8:	e7d7      	b.n	1b29a <dw1000_set_dblrxbuff+0x5c>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1b2ea:	2301      	movs	r3, #1
   1b2ec:	9302      	str	r3, [sp, #8]
   1b2ee:	2201      	movs	r2, #1
   1b2f0:	2300      	movs	r3, #0
   1b2f2:	e9cd 2300 	strd	r2, r3, [sp]
   1b2f6:	2203      	movs	r2, #3
   1b2f8:	210d      	movs	r1, #13
   1b2fa:	4620      	mov	r0, r4
   1b2fc:	f7fe fb4e 	bl	1999c <dw1000_write_reg>
   1b300:	e7e5      	b.n	1b2ce <dw1000_set_dblrxbuff+0x90>
   1b302:	0000      	movs	r0, r0
   1b304:	0000      	movs	r0, r0
	...

0001b308 <dw1000_mac_config>:
{
   1b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b30c:	b087      	sub	sp, #28
   1b30e:	4604      	mov	r4, r0
    if (config == NULL) {
   1b310:	2900      	cmp	r1, #0
   1b312:	f000 817f 	beq.w	1b614 <dw1000_mac_config+0x30c>
   1b316:	460d      	mov	r5, r1
        memcpy(&inst->uwb_dev.config, config, sizeof(struct uwb_dev_config));
   1b318:	460b      	mov	r3, r1
   1b31a:	f200 520c 	addw	r2, r0, #1292	; 0x50c
   1b31e:	f101 0c20 	add.w	ip, r1, #32
   1b322:	681f      	ldr	r7, [r3, #0]
   1b324:	685e      	ldr	r6, [r3, #4]
   1b326:	6898      	ldr	r0, [r3, #8]
   1b328:	68d9      	ldr	r1, [r3, #12]
   1b32a:	6017      	str	r7, [r2, #0]
   1b32c:	6056      	str	r6, [r2, #4]
   1b32e:	6090      	str	r0, [r2, #8]
   1b330:	60d1      	str	r1, [r2, #12]
   1b332:	3310      	adds	r3, #16
   1b334:	3210      	adds	r2, #16
   1b336:	4563      	cmp	r3, ip
   1b338:	d1f3      	bne.n	1b322 <dw1000_mac_config+0x1a>
   1b33a:	681b      	ldr	r3, [r3, #0]
   1b33c:	6013      	str	r3, [r2, #0]
    chan = config->channel;
   1b33e:	782f      	ldrb	r7, [r5, #0]
    prfIndex = config->prf - DWT_PRF_16M;
   1b340:	f895 8002 	ldrb.w	r8, [r5, #2]
   1b344:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b348:	fa5f f888 	uxtb.w	r8, r8
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   1b34c:	2f04      	cmp	r7, #4
   1b34e:	f000 8167 	beq.w	1b620 <dw1000_mac_config+0x318>
   1b352:	2f07      	cmp	r7, #7
   1b354:	f000 8161 	beq.w	1b61a <dw1000_mac_config+0x312>
   1b358:	2300      	movs	r3, #0
   1b35a:	9305      	str	r3, [sp, #20]
    reg16 = lde_replicaCoeff[config->rx.preambleCodeIndex];
   1b35c:	796a      	ldrb	r2, [r5, #5]
   1b35e:	4bca      	ldr	r3, [pc, #808]	; (1b688 <dw1000_mac_config+0x380>)
   1b360:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
    inst->sys_cfg_reg = SYS_CFG_MASK & dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t));
   1b364:	2304      	movs	r3, #4
   1b366:	2200      	movs	r2, #0
   1b368:	4619      	mov	r1, r3
   1b36a:	4620      	mov	r0, r4
   1b36c:	f7fe faa6 	bl	198bc <dw1000_read_reg>
   1b370:	f020 607b 	bic.w	r0, r0, #263192576	; 0xfb00000
   1b374:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
   1b378:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
    if(config->dataRate == DWT_BR_110K){
   1b37c:	786b      	ldrb	r3, [r5, #1]
   1b37e:	2b00      	cmp	r3, #0
   1b380:	f040 8151 	bne.w	1b626 <dw1000_mac_config+0x31e>
        inst->sys_cfg_reg |= SYS_CFG_RXM110K;
   1b384:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
   1b388:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
   1b38c:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
    inst->sys_cfg_reg &= ~SYS_CFG_PHR_MODE_11;
   1b390:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   1b394:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1b398:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= (SYS_CFG_PHR_MODE_11 & (((uint32_t)config->rx.phrMode) << SYS_CFG_PHR_MODE_SHFT));
   1b39c:	79ea      	ldrb	r2, [r5, #7]
   1b39e:	0412      	lsls	r2, r2, #16
   1b3a0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
   1b3a4:	4313      	orrs	r3, r2
   1b3a6:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    if (config->rxauto_enable)
   1b3aa:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1b3ae:	f012 0f01 	tst.w	r2, #1
   1b3b2:	f000 813d 	beq.w	1b630 <dw1000_mac_config+0x328>
        inst->sys_cfg_reg |=SYS_CFG_RXAUTR;
   1b3b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1b3ba:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    inst->sys_cfg_reg |= SYS_CFG_DIS_DRXB;
   1b3be:	f8d4 3584 	ldr.w	r3, [r4, #1412]	; 0x584
   1b3c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1b3c6:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    dw1000_write_reg(inst, SYS_CFG_ID, 0, inst->sys_cfg_reg, sizeof(uint32_t));
   1b3ca:	f04f 0904 	mov.w	r9, #4
   1b3ce:	f8cd 9008 	str.w	r9, [sp, #8]
   1b3d2:	2600      	movs	r6, #0
   1b3d4:	9300      	str	r3, [sp, #0]
   1b3d6:	9601      	str	r6, [sp, #4]
   1b3d8:	4632      	mov	r2, r6
   1b3da:	4649      	mov	r1, r9
   1b3dc:	4620      	mov	r0, r4
   1b3de:	f7fe fadd 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, LDE_IF_ID, LDE_REPC_OFFSET, reg16, sizeof(uint16_t));
   1b3e2:	f04f 0a02 	mov.w	sl, #2
   1b3e6:	f8cd a008 	str.w	sl, [sp, #8]
   1b3ea:	f8cd b000 	str.w	fp, [sp]
   1b3ee:	9601      	str	r6, [sp, #4]
   1b3f0:	f642 0204 	movw	r2, #10244	; 0x2804
   1b3f4:	212e      	movs	r1, #46	; 0x2e
   1b3f6:	4620      	mov	r0, r4
   1b3f8:	f7fe fad0 	bl	1999c <dw1000_write_reg>
    dw1000_phy_config_lde(inst, prfIndex);
   1b3fc:	4641      	mov	r1, r8
   1b3fe:	4620      	mov	r0, r4
   1b400:	f001 fa01 	bl	1c806 <dw1000_phy_config_lde>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   1b404:	4ba1      	ldr	r3, [pc, #644]	; (1b68c <dw1000_mac_config+0x384>)
   1b406:	f813 b007 	ldrb.w	fp, [r3, r7]
   1b40a:	4ba1      	ldr	r3, [pc, #644]	; (1b690 <dw1000_mac_config+0x388>)
   1b40c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   1b410:	f8cd 9008 	str.w	r9, [sp, #8]
   1b414:	9300      	str	r3, [sp, #0]
   1b416:	9601      	str	r6, [sp, #4]
   1b418:	2207      	movs	r2, #7
   1b41a:	212b      	movs	r1, #43	; 0x2b
   1b41c:	4620      	mov	r0, r4
   1b41e:	f7fe fabd 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]], sizeof(uint8_t));
   1b422:	4b9c      	ldr	r3, [pc, #624]	; (1b694 <dw1000_mac_config+0x38c>)
   1b424:	f813 300b 	ldrb.w	r3, [r3, fp]
   1b428:	2201      	movs	r2, #1
   1b42a:	9202      	str	r2, [sp, #8]
   1b42c:	9300      	str	r3, [sp, #0]
   1b42e:	9601      	str	r6, [sp, #4]
   1b430:	220b      	movs	r2, #11
   1b432:	212b      	movs	r1, #43	; 0x2b
   1b434:	4620      	mov	r0, r4
   1b436:	f7fe fab1 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw], sizeof(uint8_t));
   1b43a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b43e:	4a96      	ldr	r2, [pc, #600]	; (1b698 <dw1000_mac_config+0x390>)
   1b440:	5cd3      	ldrb	r3, [r2, r3]
   1b442:	2201      	movs	r2, #1
   1b444:	9202      	str	r2, [sp, #8]
   1b446:	9300      	str	r3, [sp, #0]
   1b448:	9601      	str	r6, [sp, #4]
   1b44a:	220b      	movs	r2, #11
   1b44c:	2128      	movs	r1, #40	; 0x28
   1b44e:	4620      	mov	r0, r4
   1b450:	f7fe faa4 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]], sizeof(uint32_t));
   1b454:	4b91      	ldr	r3, [pc, #580]	; (1b69c <dw1000_mac_config+0x394>)
   1b456:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
   1b45a:	f8cd 9008 	str.w	r9, [sp, #8]
   1b45e:	9300      	str	r3, [sp, #0]
   1b460:	9601      	str	r6, [sp, #4]
   1b462:	220c      	movs	r2, #12
   1b464:	2128      	movs	r1, #40	; 0x28
   1b466:	4620      	mov	r0, r4
   1b468:	f7fe fa98 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->rx.sfdType], sizeof(uint16_t));
   1b46c:	786a      	ldrb	r2, [r5, #1]
   1b46e:	79ab      	ldrb	r3, [r5, #6]
   1b470:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1b474:	4a8a      	ldr	r2, [pc, #552]	; (1b6a0 <dw1000_mac_config+0x398>)
   1b476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1b47a:	f8cd a008 	str.w	sl, [sp, #8]
   1b47e:	9300      	str	r3, [sp, #0]
   1b480:	9601      	str	r6, [sp, #4]
   1b482:	4652      	mov	r2, sl
   1b484:	2127      	movs	r1, #39	; 0x27
   1b486:	4620      	mov	r0, r4
   1b488:	f7fe fa88 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex], sizeof(uint16_t));
   1b48c:	4b85      	ldr	r3, [pc, #532]	; (1b6a4 <dw1000_mac_config+0x39c>)
   1b48e:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
   1b492:	f8cd a008 	str.w	sl, [sp, #8]
   1b496:	9300      	str	r3, [sp, #0]
   1b498:	9601      	str	r6, [sp, #4]
   1b49a:	464a      	mov	r2, r9
   1b49c:	2127      	movs	r1, #39	; 0x27
   1b49e:	4620      	mov	r0, r4
   1b4a0:	f7fe fa7c 	bl	1999c <dw1000_write_reg>
    if(config->dataRate == DWT_BR_110K){
   1b4a4:	786b      	ldrb	r3, [r5, #1]
   1b4a6:	2b00      	cmp	r3, #0
   1b4a8:	f000 80c7 	beq.w	1b63a <dw1000_mac_config+0x332>
        if(config->tx.preambleLength == DWT_PLEN_64){
   1b4ac:	7d6b      	ldrb	r3, [r5, #21]
   1b4ae:	2b04      	cmp	r3, #4
   1b4b0:	f000 80cf 	beq.w	1b652 <dw1000_mac_config+0x34a>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8, sizeof(uint16_t));
   1b4b4:	2602      	movs	r6, #2
   1b4b6:	9602      	str	r6, [sp, #8]
   1b4b8:	2220      	movs	r2, #32
   1b4ba:	2300      	movs	r3, #0
   1b4bc:	e9cd 2300 	strd	r2, r3, [sp]
   1b4c0:	2206      	movs	r2, #6
   1b4c2:	2127      	movs	r1, #39	; 0x27
   1b4c4:	4620      	mov	r0, r4
   1b4c6:	f7fe fa69 	bl	1999c <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS, sizeof(uint16_t));
   1b4ca:	9602      	str	r6, [sp, #8]
   1b4cc:	2228      	movs	r2, #40	; 0x28
   1b4ce:	2300      	movs	r3, #0
   1b4d0:	e9cd 2300 	strd	r2, r3, [sp]
   1b4d4:	2226      	movs	r2, #38	; 0x26
   1b4d6:	2127      	movs	r1, #39	; 0x27
   1b4d8:	4620      	mov	r0, r4
   1b4da:	f7fe fa5f 	bl	1999c <dw1000_write_reg>
                     digital_bb_config[prfIndex][config->rx.pacLength], sizeof(uint32_t));
   1b4de:	792b      	ldrb	r3, [r5, #4]
   1b4e0:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   1b4e4:	4a70      	ldr	r2, [pc, #448]	; (1b6a8 <dw1000_mac_config+0x3a0>)
   1b4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE2_OFFSET,
   1b4ea:	2204      	movs	r2, #4
   1b4ec:	9202      	str	r2, [sp, #8]
   1b4ee:	9300      	str	r3, [sp, #0]
   1b4f0:	2300      	movs	r3, #0
   1b4f2:	9301      	str	r3, [sp, #4]
   1b4f4:	2208      	movs	r2, #8
   1b4f6:	2127      	movs	r1, #39	; 0x27
   1b4f8:	4620      	mov	r0, r4
   1b4fa:	f7fe fa4f 	bl	1999c <dw1000_write_reg>
    if(config->rx.sfdTimeout == 0)
   1b4fe:	896b      	ldrh	r3, [r5, #10]
   1b500:	b90b      	cbnz	r3, 1b506 <dw1000_mac_config+0x1fe>
        config->rx.sfdTimeout= DWT_SFDTOC_DEF;
   1b502:	2381      	movs	r3, #129	; 0x81
   1b504:	816b      	strh	r3, [r5, #10]
    dw1000_write_reg(inst, DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->rx.sfdTimeout, sizeof(uint16_t));
   1b506:	896b      	ldrh	r3, [r5, #10]
   1b508:	f04f 0a02 	mov.w	sl, #2
   1b50c:	f8cd a008 	str.w	sl, [sp, #8]
   1b510:	f04f 0900 	mov.w	r9, #0
   1b514:	9300      	str	r3, [sp, #0]
   1b516:	f8cd 9004 	str.w	r9, [sp, #4]
   1b51a:	2220      	movs	r2, #32
   1b51c:	2127      	movs	r1, #39	; 0x27
   1b51e:	4620      	mov	r0, r4
   1b520:	f7fe fa3c 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE2_OFFSET, agc_config.lo32, sizeof(uint32_t));
   1b524:	2604      	movs	r6, #4
   1b526:	9602      	str	r6, [sp, #8]
   1b528:	a355      	add	r3, pc, #340	; (adr r3, 1b680 <dw1000_mac_config+0x378>)
   1b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b52e:	e9cd 2300 	strd	r2, r3, [sp]
   1b532:	220c      	movs	r2, #12
   1b534:	2123      	movs	r1, #35	; 0x23
   1b536:	4620      	mov	r0, r4
   1b538:	f7fe fa30 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AGC_CTRL_ID, AGC_TUNE1_OFFSET, agc_config.target[prfIndex], sizeof(uint16_t));
   1b53c:	4b5b      	ldr	r3, [pc, #364]	; (1b6ac <dw1000_mac_config+0x3a4>)
   1b53e:	eb03 0848 	add.w	r8, r3, r8, lsl #1
   1b542:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   1b546:	f8cd a008 	str.w	sl, [sp, #8]
   1b54a:	9300      	str	r3, [sp, #0]
   1b54c:	f8cd 9004 	str.w	r9, [sp, #4]
   1b550:	4632      	mov	r2, r6
   1b552:	2123      	movs	r1, #35	; 0x23
   1b554:	4620      	mov	r0, r4
   1b556:	f7fe fa21 	bl	1999c <dw1000_write_reg>
    if(config->rx.sfdType){
   1b55a:	79aa      	ldrb	r2, [r5, #6]
   1b55c:	2a00      	cmp	r2, #0
   1b55e:	f040 80a7 	bne.w	1b6b0 <dw1000_mac_config+0x3a8>
    uint8_t useDWnsSFD = 0;
   1b562:	4611      	mov	r1, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   1b564:	f007 030f 	and.w	r3, r7, #15
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   1b568:	013f      	lsls	r7, r7, #4
   1b56a:	b2ff      	uxtb	r7, r7
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   1b56c:	433b      	orrs	r3, r7
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   1b56e:	78af      	ldrb	r7, [r5, #2]
   1b570:	04bf      	lsls	r7, r7, #18
   1b572:	f407 2740 	and.w	r7, r7, #786432	; 0xc0000
        (CHAN_CTRL_RX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_RX_CHAN_SHIFT)) |                         // Receive Channel
   1b576:	433b      	orrs	r3, r7
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   1b578:	0512      	lsls	r2, r2, #20
   1b57a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
        (CHAN_CTRL_RXFPRF_MASK & (((uint32_t)config->prf) << CHAN_CTRL_RXFPRF_SHIFT)) |                    // RX PRF
   1b57e:	4313      	orrs	r3, r2
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   1b580:	044a      	lsls	r2, r1, #17
   1b582:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
        ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & (((uint32_t)nsSfd_result) << CHAN_CTRL_TNSSFD_SHIFT)) |     // nsSFD enable RX&TX
   1b586:	4313      	orrs	r3, r2
        (CHAN_CTRL_TX_PCOD_MASK & (((uint32_t)config->tx.preambleCodeIndex) << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
   1b588:	7d2a      	ldrb	r2, [r5, #20]
   1b58a:	0592      	lsls	r2, r2, #22
   1b58c:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
        (CHAN_CTRL_DWSFD & (((uint32_t)useDWnsSFD) << CHAN_CTRL_DWSFD_SHIFT)) |                            // Use DW nsSFD
   1b590:	4313      	orrs	r3, r2
        (CHAN_CTRL_RX_PCOD_MASK & (((uint32_t)config->rx.preambleCodeIndex) << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
   1b592:	796a      	ldrb	r2, [r5, #5]
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (((uint32_t)chan) << CHAN_CTRL_TX_CHAN_SHIFT)) |                   // Transmit Channel
   1b594:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
    dw1000_write_reg(inst, CHAN_CTRL_ID, 0, regval, sizeof(uint32_t)) ;
   1b598:	2704      	movs	r7, #4
   1b59a:	9702      	str	r7, [sp, #8]
   1b59c:	2600      	movs	r6, #0
   1b59e:	9300      	str	r3, [sp, #0]
   1b5a0:	9601      	str	r6, [sp, #4]
   1b5a2:	4632      	mov	r2, r6
   1b5a4:	211f      	movs	r1, #31
   1b5a6:	4620      	mov	r0, r4
   1b5a8:	f7fe f9f8 	bl	1999c <dw1000_write_reg>
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1b5ac:	7d6b      	ldrb	r3, [r5, #21]
   1b5ae:	78aa      	ldrb	r2, [r5, #2]
   1b5b0:	431a      	orrs	r2, r3
        (((uint32_t)config->dataRate) << TX_FCTRL_TXBR_SHFT);
   1b5b2:	786b      	ldrb	r3, [r5, #1]
   1b5b4:	035b      	lsls	r3, r3, #13
    inst->tx_fctrl = (((uint32_t)(config->tx.preambleLength | config->prf)) << TX_FCTRL_TXPRF_SHFT) |
   1b5b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1b5ba:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    dw1000_write_reg(inst, TX_FCTRL_ID, 0, inst->tx_fctrl, sizeof(uint32_t));
   1b5be:	9702      	str	r7, [sp, #8]
   1b5c0:	9300      	str	r3, [sp, #0]
   1b5c2:	9601      	str	r6, [sp, #4]
   1b5c4:	4632      	mov	r2, r6
   1b5c6:	2108      	movs	r1, #8
   1b5c8:	4620      	mov	r0, r4
   1b5ca:	f7fe f9e7 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1b5ce:	2301      	movs	r3, #1
   1b5d0:	9302      	str	r3, [sp, #8]
   1b5d2:	2242      	movs	r2, #66	; 0x42
   1b5d4:	2300      	movs	r3, #0
   1b5d6:	e9cd 2300 	strd	r2, r3, [sp]
   1b5da:	4632      	mov	r2, r6
   1b5dc:	210d      	movs	r1, #13
   1b5de:	4620      	mov	r0, r4
   1b5e0:	f7fe f9dc 	bl	1999c <dw1000_write_reg>
    dw1000_mac_framefilter(inst, config->rx.frameFilter);
   1b5e4:	8a29      	ldrh	r1, [r5, #16]
   1b5e6:	4620      	mov	r0, r4
   1b5e8:	f7ff fd44 	bl	1b074 <dw1000_mac_framefilter>
    if (config->rxauto_enable)
   1b5ec:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1b5f0:	f013 0f01 	tst.w	r3, #1
   1b5f4:	d004      	beq.n	1b600 <dw1000_mac_config+0x2f8>
        assert(config->trxoff_enable);
   1b5f6:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b5fa:	f013 0f20 	tst.w	r3, #32
   1b5fe:	d067      	beq.n	1b6d0 <dw1000_mac_config+0x3c8>
    if(config->dblbuffon_enabled)
   1b600:	f895 3020 	ldrb.w	r3, [r5, #32]
   1b604:	f013 0f10 	tst.w	r3, #16
   1b608:	d168      	bne.n	1b6dc <dw1000_mac_config+0x3d4>
}
   1b60a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b60e:	b007      	add	sp, #28
   1b610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        config = &inst->uwb_dev.config;
   1b614:	f200 550c 	addw	r5, r0, #1292	; 0x50c
   1b618:	e691      	b.n	1b33e <dw1000_mac_config+0x36>
    bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
   1b61a:	2301      	movs	r3, #1
   1b61c:	9305      	str	r3, [sp, #20]
   1b61e:	e69d      	b.n	1b35c <dw1000_mac_config+0x54>
   1b620:	2301      	movs	r3, #1
   1b622:	9305      	str	r3, [sp, #20]
   1b624:	e69a      	b.n	1b35c <dw1000_mac_config+0x54>
        inst->sys_cfg_reg &= (~SYS_CFG_RXM110K);
   1b626:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
   1b62a:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
   1b62e:	e6af      	b.n	1b390 <dw1000_mac_config+0x88>
        inst->sys_cfg_reg &= (~SYS_CFG_RXAUTR);
   1b630:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b634:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
   1b638:	e6c1      	b.n	1b3be <dw1000_mac_config+0xb6>
        dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K, sizeof(uint16_t));
   1b63a:	f8cd a008 	str.w	sl, [sp, #8]
   1b63e:	2264      	movs	r2, #100	; 0x64
   1b640:	2300      	movs	r3, #0
   1b642:	e9cd 2300 	strd	r2, r3, [sp]
   1b646:	2206      	movs	r2, #6
   1b648:	2127      	movs	r1, #39	; 0x27
   1b64a:	4620      	mov	r0, r4
   1b64c:	f7fe f9a6 	bl	1999c <dw1000_write_reg>
   1b650:	e745      	b.n	1b4de <dw1000_mac_config+0x1d6>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64, sizeof(uint16_t));
   1b652:	2602      	movs	r6, #2
   1b654:	9602      	str	r6, [sp, #8]
   1b656:	f04f 0a10 	mov.w	sl, #16
   1b65a:	f04f 0b00 	mov.w	fp, #0
   1b65e:	e9cd ab00 	strd	sl, fp, [sp]
   1b662:	2206      	movs	r2, #6
   1b664:	2127      	movs	r1, #39	; 0x27
   1b666:	4620      	mov	r0, r4
   1b668:	f7fe f998 	bl	1999c <dw1000_write_reg>
            dw1000_write_reg(inst, DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64, sizeof(uint16_t));
   1b66c:	9602      	str	r6, [sp, #8]
   1b66e:	e9cd ab00 	strd	sl, fp, [sp]
   1b672:	2226      	movs	r2, #38	; 0x26
   1b674:	2127      	movs	r1, #39	; 0x27
   1b676:	4620      	mov	r0, r4
   1b678:	f7fe f990 	bl	1999c <dw1000_write_reg>
   1b67c:	e72f      	b.n	1b4de <dw1000_mac_config+0x1d6>
   1b67e:	bf00      	nop
   1b680:	2502a907 	.word	0x2502a907
   1b684:	00000000 	.word	0x00000000
   1b688:	000280b8 	.word	0x000280b8
   1b68c:	0002802c 	.word	0x0002802c
   1b690:	0002805c 	.word	0x0002805c
   1b694:	00028074 	.word	0x00028074
   1b698:	000280ec 	.word	0x000280ec
   1b69c:	000280fc 	.word	0x000280fc
   1b6a0:	000280f0 	.word	0x000280f0
   1b6a4:	00028054 	.word	0x00028054
   1b6a8:	00028034 	.word	0x00028034
   1b6ac:	00028024 	.word	0x00028024
        dw1000_write_reg(inst, USR_SFD_ID, 0x0, dwnsSFDlen[config->dataRate], sizeof(uint8_t));
   1b6b0:	786b      	ldrb	r3, [r5, #1]
   1b6b2:	4a0d      	ldr	r2, [pc, #52]	; (1b6e8 <dw1000_mac_config+0x3e0>)
   1b6b4:	5cd3      	ldrb	r3, [r2, r3]
   1b6b6:	2601      	movs	r6, #1
   1b6b8:	9602      	str	r6, [sp, #8]
   1b6ba:	464a      	mov	r2, r9
   1b6bc:	9300      	str	r3, [sp, #0]
   1b6be:	f8cd 9004 	str.w	r9, [sp, #4]
   1b6c2:	2121      	movs	r1, #33	; 0x21
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	f7fe f969 	bl	1999c <dw1000_write_reg>
        useDWnsSFD = 1 ;
   1b6ca:	4631      	mov	r1, r6
        nsSfd_result = 3 ;
   1b6cc:	2203      	movs	r2, #3
   1b6ce:	e749      	b.n	1b564 <dw1000_mac_config+0x25c>
        assert(config->trxoff_enable);
   1b6d0:	4633      	mov	r3, r6
   1b6d2:	4632      	mov	r2, r6
   1b6d4:	4631      	mov	r1, r6
   1b6d6:	4630      	mov	r0, r6
   1b6d8:	f7ed fd74 	bl	91c4 <__assert_func>
        dw1000_set_dblrxbuff(inst, true);
   1b6dc:	2101      	movs	r1, #1
   1b6de:	4620      	mov	r0, r4
   1b6e0:	f7ff fdad 	bl	1b23e <dw1000_set_dblrxbuff>
   1b6e4:	e791      	b.n	1b60a <dw1000_mac_config+0x302>
   1b6e6:	bf00      	nop
   1b6e8:	00028058 	.word	0x00028058

0001b6ec <dw1000_read_carrier_integrator>:
{
   1b6ec:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, DRX_CONF_ID, DRX_CARRIER_INT_OFFSET, DRX_CARRIER_INT_LEN);
   1b6ee:	2303      	movs	r3, #3
   1b6f0:	2228      	movs	r2, #40	; 0x28
   1b6f2:	2127      	movs	r1, #39	; 0x27
   1b6f4:	f7fe f8e2 	bl	198bc <dw1000_read_reg>
    if (regval & B20_SIGN_EXTEND_TEST) {
   1b6f8:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1b6fc:	d005      	beq.n	1b70a <dw1000_read_carrier_integrator+0x1e>
        regval |= B20_SIGN_EXTEND_MASK;
   1b6fe:	ea6f 3000 	mvn.w	r0, r0, lsl #12
   1b702:	ea6f 3010 	mvn.w	r0, r0, lsr #12
}
   1b706:	4240      	negs	r0, r0
   1b708:	bd08      	pop	{r3, pc}
        regval &= DRX_CARRIER_INT_MASK;
   1b70a:	f3c0 0014 	ubfx	r0, r0, #0, #21
   1b70e:	e7fa      	b.n	1b706 <dw1000_read_carrier_integrator+0x1a>

0001b710 <dw1000_calc_clock_offset_ratio>:
{
   1b710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b714:	4603      	mov	r3, r0
   1b716:	4608      	mov	r0, r1
    if (inst->uwb_dev.config.dataRate == DWT_BR_110K) {
   1b718:	f893 250d 	ldrb.w	r2, [r3, #1293]	; 0x50d
   1b71c:	b172      	cbz	r2, 1b73c <dw1000_calc_clock_offset_ratio+0x2c>
    dpl_float64_t fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER);
   1b71e:	f20f 0998 	addw	r9, pc, #152	; 0x98
   1b722:	e9d9 8900 	ldrd	r8, r9, [r9]
    switch ( inst->uwb_dev.config.channel ) {
   1b726:	f893 350c 	ldrb.w	r3, [r3, #1292]	; 0x50c
   1b72a:	3b01      	subs	r3, #1
   1b72c:	2b06      	cmp	r3, #6
   1b72e:	d832      	bhi.n	1b796 <dw1000_calc_clock_offset_ratio+0x86>
   1b730:	e8df f003 	tbb	[pc, r3]
   1b734:	25093b37 	.word	0x25093b37
   1b738:	3129      	.short	0x3129
   1b73a:	2d          	.byte	0x2d
   1b73b:	00          	.byte	0x00
        fom = DPL_FLOAT64_INIT(DWT_FREQ_OFFSET_MULTIPLIER_110KB);
   1b73c:	f20f 0980 	addw	r9, pc, #128	; 0x80
   1b740:	e9d9 8900 	ldrd	r8, r9, [r9]
   1b744:	e7ef      	b.n	1b726 <dw1000_calc_clock_offset_ratio+0x16>
    case 3: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_3);break;
   1b746:	a720      	add	r7, pc, #128	; (adr r7, 1b7c8 <dw1000_calc_clock_offset_ratio+0xb8>)
   1b748:	e9d7 6700 	ldrd	r6, r7, [r7]
    ccor = DPL_FLOAT64_MUL(DPL_FLOAT64_I32_TO_F64(integrator_val), DPL_FLOAT64_MUL(fom, hz_to_ppm));
   1b74c:	f008 ff4a 	bl	245e4 <__aeabi_i2d>
   1b750:	4604      	mov	r4, r0
   1b752:	460d      	mov	r5, r1
   1b754:	4632      	mov	r2, r6
   1b756:	463b      	mov	r3, r7
   1b758:	4640      	mov	r0, r8
   1b75a:	4649      	mov	r1, r9
   1b75c:	f008 ffac 	bl	246b8 <__aeabi_dmul>
   1b760:	4602      	mov	r2, r0
   1b762:	460b      	mov	r3, r1
   1b764:	4620      	mov	r0, r4
   1b766:	4629      	mov	r1, r5
   1b768:	f008 ffa6 	bl	246b8 <__aeabi_dmul>
    ccor = DPL_FLOAT64_DIV(ccor, DPL_FLOAT64_INIT(1.0e6));
   1b76c:	a318      	add	r3, pc, #96	; (adr r3, 1b7d0 <dw1000_calc_clock_offset_ratio+0xc0>)
   1b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b772:	f009 f8cb 	bl	2490c <__aeabi_ddiv>
}
   1b776:	ec41 0b10 	vmov	d0, r0, r1
   1b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    case 4: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_4);break;
   1b77e:	a712      	add	r7, pc, #72	; (adr r7, 1b7c8 <dw1000_calc_clock_offset_ratio+0xb8>)
   1b780:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b784:	e7e2      	b.n	1b74c <dw1000_calc_clock_offset_ratio+0x3c>
    case 5: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_5);break;
   1b786:	a714      	add	r7, pc, #80	; (adr r7, 1b7d8 <dw1000_calc_clock_offset_ratio+0xc8>)
   1b788:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b78c:	e7de      	b.n	1b74c <dw1000_calc_clock_offset_ratio+0x3c>
    case 7: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_7);break;
   1b78e:	a712      	add	r7, pc, #72	; (adr r7, 1b7d8 <dw1000_calc_clock_offset_ratio+0xc8>)
   1b790:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b794:	e7da      	b.n	1b74c <dw1000_calc_clock_offset_ratio+0x3c>
    default: assert(0);
   1b796:	2300      	movs	r3, #0
   1b798:	461a      	mov	r2, r3
   1b79a:	4619      	mov	r1, r3
   1b79c:	4618      	mov	r0, r3
   1b79e:	f7ed fd11 	bl	91c4 <__assert_func>
    switch ( inst->uwb_dev.config.channel ) {
   1b7a2:	a70f      	add	r7, pc, #60	; (adr r7, 1b7e0 <dw1000_calc_clock_offset_ratio+0xd0>)
   1b7a4:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b7a8:	e7d0      	b.n	1b74c <dw1000_calc_clock_offset_ratio+0x3c>
    case 2: hz_to_ppm = DPL_FLOAT64_INIT(DWT_HZ_TO_PPM_MULTIPLIER_CHAN_2);break;
   1b7aa:	a70f      	add	r7, pc, #60	; (adr r7, 1b7e8 <dw1000_calc_clock_offset_ratio+0xd8>)
   1b7ac:	e9d7 6700 	ldrd	r6, r7, [r7]
   1b7b0:	e7cc      	b.n	1b74c <dw1000_calc_clock_offset_ratio+0x3c>
   1b7b2:	bf00      	nop
   1b7b4:	f3af 8000 	nop.w
   1b7b8:	00000000 	.word	0x00000000
   1b7bc:	400dc130 	.word	0x400dc130
   1b7c0:	00000000 	.word	0x00000000
   1b7c4:	3fddc130 	.word	0x3fddc130
   1b7c8:	7281d2c8 	.word	0x7281d2c8
   1b7cc:	3f2d2c7d 	.word	0x3f2d2c7d
   1b7d0:	00000000 	.word	0x00000000
   1b7d4:	412e8480 	.word	0x412e8480
   1b7d8:	3b94f463 	.word	0x3b94f463
   1b7dc:	3f24327e 	.word	0x3f24327e
   1b7e0:	12c12c13 	.word	0x12c12c13
   1b7e4:	3f32c12c 	.word	0x3f32c12c
   1b7e8:	90690690 	.word	0x90690690
   1b7ec:	3f306906 	.word	0x3f306906

0001b7f0 <dw1000_read_time_tracking_offset>:
{
   1b7f0:	b508      	push	{r3, lr}
    regval = dw1000_read_reg(inst, RX_TTCKO_ID, 0, 3);
   1b7f2:	2303      	movs	r3, #3
   1b7f4:	2200      	movs	r2, #0
   1b7f6:	2114      	movs	r1, #20
   1b7f8:	f7fe f860 	bl	198bc <dw1000_read_reg>
    if (regval & B18_SIGN_EXTEND_TEST) {
   1b7fc:	f410 2f80 	tst.w	r0, #262144	; 0x40000
   1b800:	d004      	beq.n	1b80c <dw1000_read_time_tracking_offset+0x1c>
        regval |= B18_SIGN_EXTEND_MASK;
   1b802:	ea6f 3080 	mvn.w	r0, r0, lsl #14
   1b806:	ea6f 3090 	mvn.w	r0, r0, lsr #14
}
   1b80a:	bd08      	pop	{r3, pc}
        regval &= RX_TTCKO_RXTOFS_MASK;
   1b80c:	f3c0 0012 	ubfx	r0, r0, #0, #19
   1b810:	e7fb      	b.n	1b80a <dw1000_read_time_tracking_offset+0x1a>

0001b812 <dw1000_calc_clock_offset_ratio_ttco>:
{
   1b812:	b570      	push	{r4, r5, r6, lr}
    if (inst->uwb_dev.config.prf != DWT_PRF_16M) {
   1b814:	f890 350e 	ldrb.w	r3, [r0, #1294]	; 0x50e
   1b818:	2b01      	cmp	r3, #1
   1b81a:	d012      	beq.n	1b842 <dw1000_calc_clock_offset_ratio_ttco+0x30>
        denom = 0x01FC0000;
   1b81c:	f04f 76fe 	mov.w	r6, #33292288	; 0x1fc0000
    return DPL_FLOAT64_DIV(DPL_FLOAT64_I32_TO_F64(-ttcko), DPL_FLOAT64_I32_TO_F64(denom));
   1b820:	4248      	negs	r0, r1
   1b822:	f008 fedf 	bl	245e4 <__aeabi_i2d>
   1b826:	4604      	mov	r4, r0
   1b828:	460d      	mov	r5, r1
   1b82a:	4630      	mov	r0, r6
   1b82c:	f008 feda 	bl	245e4 <__aeabi_i2d>
   1b830:	4602      	mov	r2, r0
   1b832:	460b      	mov	r3, r1
   1b834:	4620      	mov	r0, r4
   1b836:	4629      	mov	r1, r5
   1b838:	f009 f868 	bl	2490c <__aeabi_ddiv>
}
   1b83c:	ec41 0b10 	vmov	d0, r0, r1
   1b840:	bd70      	pop	{r4, r5, r6, pc}
    int32_t denom = 0x01F00000;
   1b842:	f04f 76f8 	mov.w	r6, #32505856	; 0x1f00000
   1b846:	e7eb      	b.n	1b820 <dw1000_calc_clock_offset_ratio_ttco+0xe>

0001b848 <dw1000_read_rxdiag>:
{
   1b848:	b570      	push	{r4, r5, r6, lr}
   1b84a:	b082      	sub	sp, #8
   1b84c:	4605      	mov	r5, r0
   1b84e:	460c      	mov	r4, r1
    dw1000_read(inst, RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET, (uint8_t*)&diag->rx_time, sizeof(diag->rx_time));
   1b850:	2604      	movs	r6, #4
   1b852:	9600      	str	r6, [sp, #0]
   1b854:	1d8b      	adds	r3, r1, #6
   1b856:	2205      	movs	r2, #5
   1b858:	2115      	movs	r1, #21
   1b85a:	f7fd ff65 	bl	19728 <dw1000_read>
    dw1000_read(inst, RX_FQUAL_ID, 0, (uint8_t*)&diag->rx_fqual, sizeof(diag->rx_fqual));
   1b85e:	2308      	movs	r3, #8
   1b860:	9300      	str	r3, [sp, #0]
   1b862:	f104 030a 	add.w	r3, r4, #10
   1b866:	2200      	movs	r2, #0
   1b868:	2112      	movs	r1, #18
   1b86a:	4628      	mov	r0, r5
   1b86c:	f7fd ff5c 	bl	19728 <dw1000_read>
    diag->pacc_cnt =  (dw1000_read_reg(inst, RX_FINFO_ID, 0, sizeof(uint32_t)) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT;
   1b870:	4633      	mov	r3, r6
   1b872:	2200      	movs	r2, #0
   1b874:	2110      	movs	r1, #16
   1b876:	4628      	mov	r0, r5
   1b878:	f7fe f820 	bl	198bc <dw1000_read_reg>
   1b87c:	0d00      	lsrs	r0, r0, #20
   1b87e:	8260      	strh	r0, [r4, #18]
}
   1b880:	b002      	add	sp, #8
   1b882:	bd70      	pop	{r4, r5, r6, pc}
   1b884:	0000      	movs	r0, r0
	...

0001b888 <dw1000_tasks_init>:
{
   1b888:	b530      	push	{r4, r5, lr}
   1b88a:	b085      	sub	sp, #20
   1b88c:	4604      	mov	r4, r0
    return os_eventq_inited((struct os_eventq *) evq);
   1b88e:	303c      	adds	r0, #60	; 0x3c
   1b890:	f7ed ffc7 	bl	9822 <os_eventq_inited>
    if (!dpl_eventq_inited(&inst->uwb_dev.eventq))
   1b894:	b1c0      	cbz	r0, 1b8c8 <dw1000_tasks_init+0x40>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, false);
   1b896:	4d18      	ldr	r5, [pc, #96]	; (1b8f8 <dw1000_tasks_init+0x70>)
   1b898:	2200      	movs	r2, #0
   1b89a:	4629      	mov	r1, r5
   1b89c:	4620      	mov	r0, r4
   1b89e:	f001 f9a7 	bl	1cbf0 <dw1000_phy_interrupt_mask>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_SLP2INIT | SYS_STATUS_CPLOCK| SYS_STATUS_RXDFR | SYS_STATUS_LDEERR | SYS_STATUS_TXFRB | SYS_STATUS_TXFRS | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXBERR, sizeof(uint32_t));
   1b8a2:	2304      	movs	r3, #4
   1b8a4:	9302      	str	r3, [sp, #8]
   1b8a6:	a312      	add	r3, pc, #72	; (adr r3, 1b8f0 <dw1000_tasks_init+0x68>)
   1b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b8ac:	e9cd 2300 	strd	r2, r3, [sp]
   1b8b0:	2200      	movs	r2, #0
   1b8b2:	210f      	movs	r1, #15
   1b8b4:	4620      	mov	r0, r4
   1b8b6:	f7fe f871 	bl	1999c <dw1000_write_reg>
    dw1000_phy_interrupt_mask(inst,          SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO   | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR, true);
   1b8ba:	2201      	movs	r2, #1
   1b8bc:	4629      	mov	r1, r5
   1b8be:	4620      	mov	r0, r4
   1b8c0:	f001 f996 	bl	1cbf0 <dw1000_phy_interrupt_mask>
}
   1b8c4:	b005      	add	sp, #20
   1b8c6:	bd30      	pop	{r4, r5, pc}
        uwb_task_init(&inst->uwb_dev, dw1000_interrupt_ev_cb);
   1b8c8:	490c      	ldr	r1, [pc, #48]	; (1b8fc <dw1000_tasks_init+0x74>)
   1b8ca:	4620      	mov	r0, r4
   1b8cc:	f7ed fa60 	bl	8d90 <uwb_task_init>
        hal_gpio_irq_init(inst->irq_pin, dw1000_irq, inst, HAL_GPIO_TRIG_RISING, HAL_GPIO_PULL_DOWN);
   1b8d0:	2302      	movs	r3, #2
   1b8d2:	9300      	str	r3, [sp, #0]
   1b8d4:	2301      	movs	r3, #1
   1b8d6:	4622      	mov	r2, r4
   1b8d8:	4909      	ldr	r1, [pc, #36]	; (1b900 <dw1000_tasks_init+0x78>)
   1b8da:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1b8de:	f7ed fbf5 	bl	90cc <hal_gpio_irq_init>
        hal_gpio_irq_enable(inst->irq_pin);
   1b8e2:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1b8e6:	f7ed fc2d 	bl	9144 <hal_gpio_irq_enable>
   1b8ea:	e7d4      	b.n	1b896 <dw1000_tasks_init+0xe>
   1b8ec:	f3af 8000 	nop.w
   1b8f0:	34b7b092 	.word	0x34b7b092
   1b8f4:	00000000 	.word	0x00000000
   1b8f8:	3437b092 	.word	0x3437b092
   1b8fc:	0001b981 	.word	0x0001b981
   1b900:	0001a8e9 	.word	0x0001a8e9

0001b904 <dw1000_mac_init>:
{
   1b904:	b530      	push	{r4, r5, lr}
   1b906:	b083      	sub	sp, #12
   1b908:	4604      	mov	r4, r0
    dw1000_mac_config(inst, config);
   1b90a:	f7ff fcfd 	bl	1b308 <dw1000_mac_config>
    dw1000_tasks_init(inst);
   1b90e:	4620      	mov	r0, r4
   1b910:	f7ff ffba 	bl	1b888 <dw1000_tasks_init>
        int rc = stats_init(
   1b914:	f204 55b4 	addw	r5, r4, #1460	; 0x5b4
   1b918:	220a      	movs	r2, #10
   1b91a:	9200      	str	r2, [sp, #0]
   1b91c:	4b0d      	ldr	r3, [pc, #52]	; (1b954 <dw1000_mac_init+0x50>)
   1b91e:	2104      	movs	r1, #4
   1b920:	4628      	mov	r0, r5
   1b922:	f7fa fc0f 	bl	16144 <stats_init>
        assert(rc == 0);
   1b926:	b940      	cbnz	r0, 1b93a <dw1000_mac_init+0x36>
        rc = stats_register("mac", STATS_HDR(inst->stat));
   1b928:	4629      	mov	r1, r5
   1b92a:	480b      	ldr	r0, [pc, #44]	; (1b958 <dw1000_mac_init+0x54>)
   1b92c:	f7fa fc8e 	bl	1624c <stats_register>
        assert(rc == 0);
   1b930:	b948      	cbnz	r0, 1b946 <dw1000_mac_init+0x42>
}
   1b932:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1b936:	b003      	add	sp, #12
   1b938:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   1b93a:	2300      	movs	r3, #0
   1b93c:	461a      	mov	r2, r3
   1b93e:	4619      	mov	r1, r3
   1b940:	4618      	mov	r0, r3
   1b942:	f7ed fc3f 	bl	91c4 <__assert_func>
        assert(rc == 0);
   1b946:	2300      	movs	r3, #0
   1b948:	461a      	mov	r2, r3
   1b94a:	4619      	mov	r1, r3
   1b94c:	4618      	mov	r0, r3
   1b94e:	f7ed fc39 	bl	91c4 <__assert_func>
   1b952:	bf00      	nop
   1b954:	0002807c 	.word	0x0002807c
   1b958:	00027fc0 	.word	0x00027fc0

0001b95c <dw1000_ic_and_host_ptrs_equal>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return uint8_t 1 = host and ic pointers match, 0 otherwise
 */
uint8_t
dw1000_ic_and_host_ptrs_equal(dw1000_dev_instance_t * inst)
{
   1b95c:	b508      	push	{r3, lr}
    uint8_t b = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t));
   1b95e:	2301      	movs	r3, #1
   1b960:	2203      	movs	r2, #3
   1b962:	210f      	movs	r1, #15
   1b964:	f7fd ffaa 	bl	198bc <dw1000_read_reg>
   1b968:	b2c0      	uxtb	r0, r0
    /* Check where the receiver is at, and if it's in the same buffer as the host */
    return (uint8_t)((b & (SYS_STATUS_ICRBP >> 24)) == ((b & (SYS_STATUS_HSRBP >> 24)) << 1));
   1b96a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1b96e:	09c0      	lsrs	r0, r0, #7
   1b970:	f080 0001 	eor.w	r0, r0, #1
}
   1b974:	f000 0001 	and.w	r0, r0, #1
   1b978:	bd08      	pop	{r3, pc}
   1b97a:	0000      	movs	r0, r0
   1b97c:	0000      	movs	r0, r0
	...

0001b980 <dw1000_interrupt_ev_cb>:
 * @return void
 *
 */
static void
dw1000_interrupt_ev_cb(struct dpl_event *ev)
{
   1b980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b984:	b085      	sub	sp, #20
   1b986:	4606      	mov	r6, r0
    return ev->ev.ev_arg;
   1b988:	6884      	ldr	r4, [r0, #8]
    return (dpl_error_t)os_sem_pend(&sem->sem, timeout);
   1b98a:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1b98e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b992:	4638      	mov	r0, r7
   1b994:	f7ee fb9c 	bl	a0d0 <os_sem_pend>
    uint16_t finfo;
    struct uwb_mac_interface * cbs = NULL;
    dw1000_dev_instance_t * inst = dpl_event_get_arg(ev);
    dpl_error_t err = dpl_sem_pend(&inst->uwb_dev.irq_sem,  DPL_TIMEOUT_NEVER);
    if (err != DPL_OK) {
   1b998:	b1b0      	cbz	r0, 1b9c8 <dw1000_interrupt_ev_cb+0x48>
        inst->uwb_dev.status.sem_error = 1;
   1b99a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1b99e:	f043 0304 	orr.w	r3, r3, #4
   1b9a2:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    /* Check for possibly missed interrupts occuring whilst we were looking at this one
     * NOTE: Because the interrupt is edge based we will only register an event if the irq pin
     * goes low and then comes back up. If the pin is high now and no event is queued just after
     * swapping rx-buffers this means we didn't have time to finish reading the data
     * from the previous irq until a new one arrived -> queue another irq event for the task */
    if (hal_gpio_read(inst->irq_pin) && !dpl_event_is_queued(ev)) {
   1b9a6:	f894 055d 	ldrb.w	r0, [r4, #1373]	; 0x55d
   1b9aa:	f7ed fb68 	bl	907e <hal_gpio_read>
   1b9ae:	b118      	cbz	r0, 1b9b8 <dw1000_interrupt_ev_cb+0x38>
    return ev->ev.ev_queued;
   1b9b0:	7833      	ldrb	r3, [r6, #0]
   1b9b2:	2b00      	cmp	r3, #0
   1b9b4:	f000 84e7 	beq.w	1c386 <dw1000_interrupt_ev_cb+0xa06>
        }
#endif
    }

#if MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN)
    if(!inst->sys_status_bt_lock) {
   1b9b8:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
   1b9bc:	2b00      	cmp	r3, #0
   1b9be:	f000 84fb 	beq.w	1c3b8 <dw1000_interrupt_ev_cb+0xa38>
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
    }
#endif
}
   1b9c2:	b005      	add	sp, #20
   1b9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uint32_t irq_utime = dpl_cputime_get32();
   1b9c8:	f7f6 ff7f 	bl	128ca <dpl_cputime_get32>
   1b9cc:	4605      	mov	r5, r0
        inst->sys_status = dw1000_read_reg(inst, SYS_STATUS_ID, 0, sizeof(uint32_t));
   1b9ce:	2304      	movs	r3, #4
   1b9d0:	2200      	movs	r2, #0
   1b9d2:	210f      	movs	r1, #15
   1b9d4:	4620      	mov	r0, r4
   1b9d6:	f7fd ff71 	bl	198bc <dw1000_read_reg>
   1b9da:	f8c4 058c 	str.w	r0, [r4, #1420]	; 0x58c
        if (!(inst->sys_status & (SYS_MASK_MCPLOCK | SYS_MASK_MRXDFR | SYS_MASK_MLDEERR | SYS_MASK_MTXFRB | SYS_MASK_MTXFRS | SYS_MASK_ALL_RX_TO | SYS_MASK_ALL_RX_ERR | SYS_MASK_MTXBERR))) {
   1b9de:	4bc3      	ldr	r3, [pc, #780]	; (1bcec <dw1000_interrupt_ev_cb+0x36c>)
   1b9e0:	4003      	ands	r3, r0
   1b9e2:	2b00      	cmp	r3, #0
   1b9e4:	f000 816b 	beq.w	1bcbe <dw1000_interrupt_ev_cb+0x33e>
        if(!inst->sys_status_bt_lock) {
   1b9e8:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
   1b9ec:	b9a3      	cbnz	r3, 1ba18 <dw1000_interrupt_ev_cb+0x98>
            DW1000_SYS_STATUS_BT_ADD(inst, inst->sys_status, irq_utime);
   1b9ee:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
   1b9f2:	3301      	adds	r3, #1
   1b9f4:	b29b      	uxth	r3, r3
   1b9f6:	f8a4 3df0 	strh.w	r3, [r4, #3568]	; 0xdf0
   1b9fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b9fe:	f8d4 058c 	ldr.w	r0, [r4, #1420]	; 0x58c
   1ba02:	335f      	adds	r3, #95	; 0x5f
   1ba04:	0119      	lsls	r1, r3, #4
   1ba06:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1ba0a:	2200      	movs	r2, #0
   1ba0c:	5062      	str	r2, [r4, r1]
   1ba0e:	605a      	str	r2, [r3, #4]
   1ba10:	609a      	str	r2, [r3, #8]
   1ba12:	60da      	str	r2, [r3, #12]
   1ba14:	5065      	str	r5, [r4, r1]
   1ba16:	6058      	str	r0, [r3, #4]
    inst->uwb_dev.status.rx_error = (inst->sys_status & SYS_STATUS_ALL_RX_ERR) !=0;
   1ba18:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1ba1c:	4ab4      	ldr	r2, [pc, #720]	; (1bcf0 <dw1000_interrupt_ev_cb+0x370>)
   1ba1e:	401a      	ands	r2, r3
   1ba20:	3a00      	subs	r2, #0
   1ba22:	bf18      	it	ne
   1ba24:	2201      	movne	r2, #1
   1ba26:	f894 1508 	ldrb.w	r1, [r4, #1288]	; 0x508
   1ba2a:	f362 1186 	bfi	r1, r2, #6, #1
   1ba2e:	f884 1508 	strb.w	r1, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_error |= (inst->sys_status_hi & (SYS_STATUS_RXRSCS>>32)) != 0;
   1ba32:	f894 1590 	ldrb.w	r1, [r4, #1424]	; 0x590
   1ba36:	f001 0001 	and.w	r0, r1, #1
   1ba3a:	4302      	orrs	r2, r0
   1ba3c:	f894 0508 	ldrb.w	r0, [r4, #1288]	; 0x508
   1ba40:	f362 1086 	bfi	r0, r2, #6, #1
   1ba44:	f884 0508 	strb.w	r0, [r4, #1288]	; 0x508
    inst->uwb_dev.status.rx_autoframefilt_rej = (inst->sys_status & SYS_STATUS_AFFREJ) !=0;
   1ba48:	f3c3 7040 	ubfx	r0, r3, #29, #1
   1ba4c:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1ba50:	f360 0200 	bfi	r2, r0, #0, #1
   1ba54:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_timeout_error = (inst->sys_status & SYS_STATUS_ALL_RX_TO) !=0;
   1ba58:	f413 1f08 	tst.w	r3, #2228224	; 0x220000
   1ba5c:	bf14      	ite	ne
   1ba5e:	2001      	movne	r0, #1
   1ba60:	2000      	moveq	r0, #0
   1ba62:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   1ba66:	f360 12c7 	bfi	r2, r0, #7, #1
   1ba6a:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.lde_error = (inst->sys_status & SYS_STATUS_LDEDONE) == 0;
   1ba6e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1ba72:	bf0c      	ite	eq
   1ba74:	2001      	moveq	r0, #1
   1ba76:	2000      	movne	r0, #0
   1ba78:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1ba7c:	f360 0282 	bfi	r2, r0, #2, #1
   1ba80:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.overrun_error = (inst->sys_status & SYS_STATUS_RXOVRR) != 0;
   1ba84:	f3c3 5000 	ubfx	r0, r3, #20, #1
   1ba88:	f894 250a 	ldrb.w	r2, [r4, #1290]	; 0x50a
   1ba8c:	f360 0282 	bfi	r2, r0, #2, #1
   1ba90:	f884 250a 	strb.w	r2, [r4, #1290]	; 0x50a
    inst->uwb_dev.status.txbuf_error = (inst->sys_status & SYS_STATUS_TXBERR) != 0;
   1ba94:	f3c3 7000 	ubfx	r0, r3, #28, #1
   1ba98:	f894 2508 	ldrb.w	r2, [r4, #1288]	; 0x508
   1ba9c:	f360 1245 	bfi	r2, r0, #5, #1
   1baa0:	f884 2508 	strb.w	r2, [r4, #1288]	; 0x508
    inst->uwb_dev.status.autoack_triggered = (inst->sys_status & SYS_STATUS_AAT) != 0;
   1baa4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1baa8:	f894 2509 	ldrb.w	r2, [r4, #1289]	; 0x509
   1baac:	f360 1286 	bfi	r2, r0, #6, #1
   1bab0:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
    inst->uwb_dev.status.rx_prej = (inst->sys_status_hi & (SYS_STATUS_RXPREJ>>32)) != 0;
   1bab4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   1bab8:	b2d2      	uxtb	r2, r2
   1baba:	f361 0241 	bfi	r2, r1, #1, #1
   1babe:	f884 2509 	strb.w	r2, [r4, #1289]	; 0x509
   1bac2:	f8b4 2566 	ldrh.w	r2, [r4, #1382]	; 0x566
    if(dpl_sem_get_count(&inst->tx_sem) == 0 && !(
   1bac6:	b922      	cbnz	r2, 1bad2 <dw1000_interrupt_ev_cb+0x152>
   1bac8:	f003 0390 	and.w	r3, r3, #144	; 0x90
   1bacc:	2b10      	cmp	r3, #16
   1bace:	f040 80ff 	bne.w	1bcd0 <dw1000_interrupt_ev_cb+0x350>
    if((inst->sys_status & SYS_STATUS_RXFCG)){
   1bad2:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bad6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1bada:	f000 80b7 	beq.w	1bc4c <dw1000_interrupt_ev_cb+0x2cc>
        MAC_STATS_INC(DFR_cnt);
   1bade:	f8d4 35d0 	ldr.w	r3, [r4, #1488]	; 0x5d0
   1bae2:	3301      	adds	r3, #1
   1bae4:	f8c4 35d0 	str.w	r3, [r4, #1488]	; 0x5d0
        if (inst->uwb_dev.status.overrun_error){
   1bae8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1baec:	f013 0f04 	tst.w	r3, #4
   1baf0:	f040 8100 	bne.w	1bcf4 <dw1000_interrupt_ev_cb+0x374>
        if (inst->uwb_dev.config.rxauto_enable == 0 && inst->uwb_dev.config.dblbuffon_enabled) {
   1baf4:	f8b4 352c 	ldrh.w	r3, [r4, #1324]	; 0x52c
   1baf8:	f403 7388 	and.w	r3, r3, #272	; 0x110
   1bafc:	2b10      	cmp	r3, #16
   1bafe:	f000 8138 	beq.w	1bd72 <dw1000_interrupt_ev_cb+0x3f2>
        finfo = dw1000_read_reg(inst, RX_FINFO_ID, RX_FINFO_OFFSET, sizeof(uint16_t));
   1bb02:	2302      	movs	r3, #2
   1bb04:	2200      	movs	r2, #0
   1bb06:	2110      	movs	r1, #16
   1bb08:	4620      	mov	r0, r4
   1bb0a:	f7fd fed7 	bl	198bc <dw1000_read_reg>
        inst->uwb_dev.frame_len = (finfo & RX_FINFO_RXFL_MASK_1023);
   1bb0e:	f3c0 0009 	ubfx	r0, r0, #0, #10
   1bb12:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
        if (inst->uwb_dev.frame_len) inst->uwb_dev.frame_len -= 2;
   1bb16:	b110      	cbz	r0, 1bb1e <dw1000_interrupt_ev_cb+0x19e>
   1bb18:	3802      	subs	r0, #2
   1bb1a:	f8a4 04e2 	strh.w	r0, [r4, #1250]	; 0x4e2
                       (inst->uwb_dev.frame_len < inst->uwb_dev.rxbuf_size) ?
   1bb1e:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
   1bb22:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
        dw1000_read_rx(inst, inst->uwb_dev.rxbuf, 0,
   1bb26:	4293      	cmp	r3, r2
   1bb28:	bf28      	it	cs
   1bb2a:	4613      	movcs	r3, r2
   1bb2c:	2200      	movs	r2, #0
   1bb2e:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   1bb32:	4620      	mov	r0, r4
   1bb34:	f7fe feea 	bl	1a90c <dw1000_read_rx>
        inst->uwb_dev.fctrl = ((uint16_t)inst->uwb_dev.rxbuf[1]<<8) | inst->uwb_dev.rxbuf[0];
   1bb38:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
   1bb3c:	7851      	ldrb	r1, [r2, #1]
   1bb3e:	7813      	ldrb	r3, [r2, #0]
   1bb40:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1bb44:	f8a4 34e0 	strh.w	r3, [r4, #1248]	; 0x4e0
        if(!inst->sys_status_bt_lock) {
   1bb48:	f894 2df2 	ldrb.w	r2, [r4, #3570]	; 0xdf2
   1bb4c:	b93a      	cbnz	r2, 1bb5e <dw1000_interrupt_ev_cb+0x1de>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
   1bb4e:	f8b4 2df0 	ldrh.w	r2, [r4, #3568]	; 0xdf0
   1bb52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1bb56:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   1bb5a:	f8a2 35fa 	strh.w	r3, [r2, #1530]	; 0x5fa
        if (inst->uwb_dev.status.lde_error) // retest lde_error condition
   1bb5e:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bb62:	f013 0f04 	tst.w	r3, #4
   1bb66:	f040 8126 	bne.w	1bdb6 <dw1000_interrupt_ev_cb+0x436>
        if (inst->uwb_dev.status.lde_error) // LDE error or LDE late
   1bb6a:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bb6e:	f013 0f04 	tst.w	r3, #4
   1bb72:	d004      	beq.n	1bb7e <dw1000_interrupt_ev_cb+0x1fe>
            MAC_STATS_INC(LDE_err);
   1bb74:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   1bb78:	3301      	adds	r3, #1
   1bb7a:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
 *
 * @return time
 */

inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1bb7e:	2305      	movs	r3, #5
   1bb80:	2200      	movs	r2, #0
   1bb82:	2115      	movs	r1, #21
   1bb84:	4620      	mov	r0, r4
   1bb86:	f7fd fe99 	bl	198bc <dw1000_read_reg>
   1bb8a:	b2cb      	uxtb	r3, r1
        inst->uwb_dev.rxtimestamp = dw1000_read_rxtime(inst);
   1bb8c:	f8c4 04e8 	str.w	r0, [r4, #1256]	; 0x4e8
   1bb90:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        if (inst->control.abs_timeout) {
   1bb94:	f894 15b1 	ldrb.w	r1, [r4, #1457]	; 0x5b1
   1bb98:	f011 0f08 	tst.w	r1, #8
   1bb9c:	f040 811d 	bne.w	1bdda <dw1000_interrupt_ev_cb+0x45a>
        if (inst->uwb_dev.status.autoack_triggered) {
   1bba0:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bba4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bba8:	d01c      	beq.n	1bbe4 <dw1000_interrupt_ev_cb+0x264>
            if ((inst->uwb_dev.fctrl & UWB_FCTRL_ACK_REQUESTED) == 0){
   1bbaa:	f8b4 34e0 	ldrh.w	r3, [r4, #1248]	; 0x4e0
   1bbae:	f013 0f20 	tst.w	r3, #32
   1bbb2:	f040 8117 	bne.w	1bde4 <dw1000_interrupt_ev_cb+0x464>
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_AAT, sizeof(uint8_t));
   1bbb6:	2301      	movs	r3, #1
   1bbb8:	9302      	str	r3, [sp, #8]
   1bbba:	2208      	movs	r2, #8
   1bbbc:	2300      	movs	r3, #0
   1bbbe:	e9cd 2300 	strd	r2, r3, [sp]
   1bbc2:	2200      	movs	r2, #0
   1bbc4:	210f      	movs	r1, #15
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	f7fd fee8 	bl	1999c <dw1000_write_reg>
                inst->sys_status &= ~SYS_STATUS_AAT;
   1bbcc:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bbd0:	f023 0308 	bic.w	r3, r3, #8
   1bbd4:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
                inst->uwb_dev.status.autoack_triggered = 0;
   1bbd8:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bbdc:	f36f 1386 	bfc	r3, #6, #1
   1bbe0:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
        if(inst->uwb_dev.config.rxdiag_enable)
   1bbe4:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1bbe8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bbec:	f040 8109 	bne.w	1be02 <dw1000_interrupt_ev_cb+0x482>
        if (inst->uwb_dev.config.dblbuffon_enabled) {
   1bbf0:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1bbf4:	f013 0f10 	tst.w	r3, #16
   1bbf8:	f000 8190 	beq.w	1bf1c <dw1000_interrupt_ev_cb+0x59c>
            if (inst->uwb_dev.config.rxttcko_enable) {
   1bbfc:	f013 0f80 	tst.w	r3, #128	; 0x80
   1bc00:	f040 8105 	bne.w	1be0e <dw1000_interrupt_ev_cb+0x48e>
            inst->uwb_dev.status.overrun_error = dw1000_checkoverrun(inst);
   1bc04:	4620      	mov	r0, r4
   1bc06:	f7fe fe66 	bl	1a8d6 <dw1000_checkoverrun>
   1bc0a:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1bc0e:	f360 0382 	bfi	r3, r0, #2, #1
   1bc12:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
            if (inst->uwb_dev.status.overrun_error == 0) {
   1bc16:	b2db      	uxtb	r3, r3
   1bc18:	f013 0f04 	tst.w	r3, #4
   1bc1c:	f040 813e 	bne.w	1be9c <dw1000_interrupt_ev_cb+0x51c>
                if (inst->uwb_dev.config.rxauto_enable) {
   1bc20:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1bc24:	f013 0f01 	tst.w	r3, #1
   1bc28:	f040 80f7 	bne.w	1be1a <dw1000_interrupt_ev_cb+0x49a>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0b1, sizeof(uint8_t));
   1bc2c:	2301      	movs	r3, #1
   1bc2e:	9302      	str	r3, [sp, #8]
   1bc30:	2201      	movs	r2, #1
   1bc32:	2300      	movs	r3, #0
   1bc34:	e9cd 2300 	strd	r2, r3, [sp]
   1bc38:	2203      	movs	r2, #3
   1bc3a:	210d      	movs	r1, #13
   1bc3c:	4620      	mov	r0, r4
   1bc3e:	f7fd fead 	bl	1999c <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1bc42:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1bc46:	2d00      	cmp	r5, #0
   1bc48:	f040 819b 	bne.w	1bf82 <dw1000_interrupt_ev_cb+0x602>
    if(inst->sys_status & SYS_STATUS_TXFRB) {
   1bc4c:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bc50:	f013 0f10 	tst.w	r3, #16
   1bc54:	f040 819c 	bne.w	1bf90 <dw1000_interrupt_ev_cb+0x610>
    if(inst->sys_status & SYS_STATUS_TXFRS) {
   1bc58:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bc5c:	f013 0f80 	tst.w	r3, #128	; 0x80
   1bc60:	f040 81b2 	bne.w	1bfc8 <dw1000_interrupt_ev_cb+0x648>
    if(inst->uwb_dev.status.txbuf_error){
   1bc64:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1bc68:	f013 0f20 	tst.w	r3, #32
   1bc6c:	f040 820b 	bne.w	1c086 <dw1000_interrupt_ev_cb+0x706>
    if(inst->sys_status & SYS_STATUS_LDEERR){
   1bc70:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bc74:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1bc78:	f040 8228 	bne.w	1c0cc <dw1000_interrupt_ev_cb+0x74c>
    if(inst->uwb_dev.status.rx_timeout_error){
   1bc7c:	f994 3508 	ldrsb.w	r3, [r4, #1288]	; 0x508
   1bc80:	2b00      	cmp	r3, #0
   1bc82:	f2c0 8235 	blt.w	1c0f0 <dw1000_interrupt_ev_cb+0x770>
    if(inst->uwb_dev.status.rx_error) {
   1bc86:	f894 3508 	ldrb.w	r3, [r4, #1288]	; 0x508
   1bc8a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bc8e:	f040 829e 	bne.w	1c1ce <dw1000_interrupt_ev_cb+0x84e>
    if(inst->sys_status & SYS_STATUS_SLP2INIT){
   1bc92:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bc96:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1bc9a:	f040 831c 	bne.w	1c2d6 <dw1000_interrupt_ev_cb+0x956>
    if(inst->sys_status & SYS_STATUS_CLKPLL_LL){
   1bc9e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bca2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   1bca6:	f040 8322 	bne.w	1c2ee <dw1000_interrupt_ev_cb+0x96e>
    if(inst->sys_status & SYS_MASK_MCPLOCK){
   1bcaa:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bcae:	f013 0f02 	tst.w	r3, #2
   1bcb2:	f040 832e 	bne.w	1c312 <dw1000_interrupt_ev_cb+0x992>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1bcb6:	4638      	mov	r0, r7
   1bcb8:	f7ee f9d8 	bl	a06c <os_sem_release>
   1bcbc:	e673      	b.n	1b9a6 <dw1000_interrupt_ev_cb+0x26>
            inst->sys_status_hi = dw1000_read_reg(inst, SYS_STATUS_ID, 4, sizeof(uint8_t));
   1bcbe:	2301      	movs	r3, #1
   1bcc0:	2204      	movs	r2, #4
   1bcc2:	210f      	movs	r1, #15
   1bcc4:	4620      	mov	r0, r4
   1bcc6:	f7fd fdf9 	bl	198bc <dw1000_read_reg>
   1bcca:	f884 0590 	strb.w	r0, [r4, #1424]	; 0x590
   1bcce:	e68b      	b.n	1b9e8 <dw1000_interrupt_ev_cb+0x68>
   1bcd0:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1bcd4:	f7ee f9ca 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   1bcd8:	2800      	cmp	r0, #0
   1bcda:	f43f aefa 	beq.w	1bad2 <dw1000_interrupt_ev_cb+0x152>
   1bcde:	2300      	movs	r3, #0
   1bce0:	461a      	mov	r2, r3
   1bce2:	4619      	mov	r1, r3
   1bce4:	4618      	mov	r0, r3
   1bce6:	f7ed fa6d 	bl	91c4 <__assert_func>
   1bcea:	bf00      	nop
   1bcec:	3437b092 	.word	0x3437b092
   1bcf0:	24119000 	.word	0x24119000
            MAC_STATS_INC(ROV_err);
   1bcf4:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1bcf8:	3301      	adds	r3, #1
   1bcfa:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_RXOVRR |SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR), sizeof(uint32_t));
   1bcfe:	2304      	movs	r3, #4
   1bd00:	9302      	str	r3, [sp, #8]
   1bd02:	4ac8      	ldr	r2, [pc, #800]	; (1c024 <dw1000_interrupt_ev_cb+0x6a4>)
   1bd04:	2300      	movs	r3, #0
   1bd06:	e9cd 2300 	strd	r2, r3, [sp]
   1bd0a:	2200      	movs	r2, #0
   1bd0c:	210f      	movs	r1, #15
   1bd0e:	4620      	mov	r0, r4
   1bd10:	f7fd fe44 	bl	1999c <dw1000_write_reg>
            dw1000_phy_forcetrxoff(inst);
   1bd14:	4620      	mov	r0, r4
   1bd16:	f000 fedb 	bl	1cad0 <dw1000_phy_forcetrxoff>
            dw1000_phy_rx_reset(inst);
   1bd1a:	4620      	mov	r0, r4
   1bd1c:	f000 fea3 	bl	1ca66 <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   1bd20:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1bd24:	f043 0310 	orr.w	r3, r3, #16
   1bd28:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1bd2c:	2301      	movs	r3, #1
   1bd2e:	2203      	movs	r2, #3
   1bd30:	210f      	movs	r1, #15
   1bd32:	4620      	mov	r0, r4
   1bd34:	f7fd fdc2 	bl	198bc <dw1000_read_reg>
   1bd38:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1bd3a:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1bd3e:	f010 0f80 	tst.w	r0, #128	; 0x80
   1bd42:	d10a      	bne.n	1bd5a <dw1000_interrupt_ev_cb+0x3da>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1bd44:	2201      	movs	r2, #1
   1bd46:	9202      	str	r2, [sp, #8]
   1bd48:	2001      	movs	r0, #1
   1bd4a:	2100      	movs	r1, #0
   1bd4c:	e9cd 0100 	strd	r0, r1, [sp]
   1bd50:	210d      	movs	r1, #13
   1bd52:	4620      	mov	r0, r4
   1bd54:	f7fd fe22 	bl	1999c <dw1000_write_reg>
            goto early_exit;
   1bd58:	e7ad      	b.n	1bcb6 <dw1000_interrupt_ev_cb+0x336>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1bd5a:	2301      	movs	r3, #1
   1bd5c:	9302      	str	r3, [sp, #8]
   1bd5e:	2201      	movs	r2, #1
   1bd60:	2300      	movs	r3, #0
   1bd62:	e9cd 2300 	strd	r2, r3, [sp]
   1bd66:	2203      	movs	r2, #3
   1bd68:	210d      	movs	r1, #13
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	f7fd fe16 	bl	1999c <dw1000_write_reg>
   1bd70:	e7e8      	b.n	1bd44 <dw1000_interrupt_ev_cb+0x3c4>
            if (inst->control.rxauto_disable == false && !inst->uwb_dev.status.autoack_triggered) {
   1bd72:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1bd76:	f013 0f04 	tst.w	r3, #4
   1bd7a:	d104      	bne.n	1bd86 <dw1000_interrupt_ev_cb+0x406>
   1bd7c:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bd80:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd84:	d006      	beq.n	1bd94 <dw1000_interrupt_ev_cb+0x414>
            inst->control.rxauto_disable = false;
   1bd86:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1bd8a:	f36f 0382 	bfc	r3, #2, #1
   1bd8e:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1bd92:	e6b6      	b.n	1bb02 <dw1000_interrupt_ev_cb+0x182>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1bd94:	2201      	movs	r2, #1
   1bd96:	9202      	str	r2, [sp, #8]
   1bd98:	2001      	movs	r0, #1
   1bd9a:	2100      	movs	r1, #0
   1bd9c:	e9cd 0100 	strd	r0, r1, [sp]
   1bda0:	210d      	movs	r1, #13
   1bda2:	4620      	mov	r0, r4
   1bda4:	f7fd fdfa 	bl	1999c <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   1bda8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1bdac:	f043 0308 	orr.w	r3, r3, #8
   1bdb0:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1bdb4:	e7e7      	b.n	1bd86 <dw1000_interrupt_ev_cb+0x406>
            inst->uwb_dev.status.lde_error = (dw1000_read_reg(inst, SYS_STATUS_ID, 1, sizeof(uint8_t))  & (SYS_STATUS_LDEDONE >> 8)) == 0;
   1bdb6:	2301      	movs	r3, #1
   1bdb8:	461a      	mov	r2, r3
   1bdba:	210f      	movs	r1, #15
   1bdbc:	4620      	mov	r0, r4
   1bdbe:	f7fd fd7d 	bl	198bc <dw1000_read_reg>
   1bdc2:	f010 0f04 	tst.w	r0, #4
   1bdc6:	bf0c      	ite	eq
   1bdc8:	2201      	moveq	r2, #1
   1bdca:	2200      	movne	r2, #0
   1bdcc:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1bdd0:	f362 0382 	bfi	r3, r2, #2, #1
   1bdd4:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   1bdd8:	e6c7      	b.n	1bb6a <dw1000_interrupt_ev_cb+0x1ea>
            update_rx_window_timeout(inst, inst->uwb_dev.rxtimestamp);
   1bdda:	4602      	mov	r2, r0
   1bddc:	4620      	mov	r0, r4
   1bdde:	f7ff f88b 	bl	1aef8 <update_rx_window_timeout>
   1bde2:	e6dd      	b.n	1bba0 <dw1000_interrupt_ev_cb+0x220>
                dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1bde4:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1bde8:	0a1b      	lsrs	r3, r3, #8
   1bdea:	2201      	movs	r2, #1
   1bdec:	9202      	str	r2, [sp, #8]
   1bdee:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1bdf2:	9300      	str	r3, [sp, #0]
   1bdf4:	2300      	movs	r3, #0
   1bdf6:	9301      	str	r3, [sp, #4]
   1bdf8:	210f      	movs	r1, #15
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	f7fd fdce 	bl	1999c <dw1000_write_reg>
   1be00:	e6f0      	b.n	1bbe4 <dw1000_interrupt_ev_cb+0x264>
            dw1000_read_rxdiag(inst, &inst->rxdiag);
   1be02:	f204 519c 	addw	r1, r4, #1436	; 0x59c
   1be06:	4620      	mov	r0, r4
   1be08:	f7ff fd1e 	bl	1b848 <dw1000_read_rxdiag>
   1be0c:	e6f0      	b.n	1bbf0 <dw1000_interrupt_ev_cb+0x270>
                inst->uwb_dev.rxttcko = dw1000_read_time_tracking_offset(inst);
   1be0e:	4620      	mov	r0, r4
   1be10:	f7ff fcee 	bl	1b7f0 <dw1000_read_time_tracking_offset>
   1be14:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
   1be18:	e6f4      	b.n	1bc04 <dw1000_interrupt_ev_cb+0x284>
                    if (dw1000_ic_and_host_ptrs_equal(inst)) {
   1be1a:	4620      	mov	r0, r4
   1be1c:	f7ff fd9e 	bl	1b95c <dw1000_ic_and_host_ptrs_equal>
   1be20:	b368      	cbz	r0, 1be7e <dw1000_interrupt_ev_cb+0x4fe>
                        uint8_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 1 , sizeof(uint8_t));
   1be22:	2301      	movs	r3, #1
   1be24:	461a      	mov	r2, r3
   1be26:	210e      	movs	r1, #14
   1be28:	4620      	mov	r0, r4
   1be2a:	f7fd fd47 	bl	198bc <dw1000_read_reg>
   1be2e:	4680      	mov	r8, r0
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, 0, sizeof(uint8_t));
   1be30:	2501      	movs	r5, #1
   1be32:	9502      	str	r5, [sp, #8]
   1be34:	2200      	movs	r2, #0
   1be36:	2300      	movs	r3, #0
   1be38:	e9cd 2300 	strd	r2, r3, [sp]
   1be3c:	462a      	mov	r2, r5
   1be3e:	210e      	movs	r1, #14
   1be40:	4620      	mov	r0, r4
   1be42:	f7fd fdab 	bl	1999c <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1be46:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1be4a:	0a1b      	lsrs	r3, r3, #8
   1be4c:	9502      	str	r5, [sp, #8]
   1be4e:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1be52:	f04f 0900 	mov.w	r9, #0
   1be56:	9300      	str	r3, [sp, #0]
   1be58:	f8cd 9004 	str.w	r9, [sp, #4]
   1be5c:	462a      	mov	r2, r5
   1be5e:	210f      	movs	r1, #15
   1be60:	4620      	mov	r0, r4
   1be62:	f7fd fd9b 	bl	1999c <dw1000_write_reg>
                        dw1000_write_reg(inst, SYS_MASK_ID, 1, mask, sizeof(uint8_t));
   1be66:	9502      	str	r5, [sp, #8]
   1be68:	f008 03ff 	and.w	r3, r8, #255	; 0xff
   1be6c:	9300      	str	r3, [sp, #0]
   1be6e:	f8cd 9004 	str.w	r9, [sp, #4]
   1be72:	462a      	mov	r2, r5
   1be74:	210e      	movs	r1, #14
   1be76:	4620      	mov	r0, r4
   1be78:	f7fd fd90 	bl	1999c <dw1000_write_reg>
   1be7c:	e6d6      	b.n	1bc2c <dw1000_interrupt_ev_cb+0x2ac>
                        dw1000_write_reg(inst, SYS_STATUS_ID, 1, (inst->sys_status&(SYS_STATUS_LDEDONE | SYS_STATUS_RXDFR | SYS_STATUS_RXFCG | SYS_STATUS_RXFCE | SYS_STATUS_RXDFR))>>8, sizeof(uint8_t));
   1be7e:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
   1be82:	0a1b      	lsrs	r3, r3, #8
   1be84:	2201      	movs	r2, #1
   1be86:	9202      	str	r2, [sp, #8]
   1be88:	f003 03e4 	and.w	r3, r3, #228	; 0xe4
   1be8c:	9300      	str	r3, [sp, #0]
   1be8e:	2300      	movs	r3, #0
   1be90:	9301      	str	r3, [sp, #4]
   1be92:	210f      	movs	r1, #15
   1be94:	4620      	mov	r0, r4
   1be96:	f7fd fd81 	bl	1999c <dw1000_write_reg>
   1be9a:	e6c7      	b.n	1bc2c <dw1000_interrupt_ev_cb+0x2ac>
                MAC_STATS_INC(ROV_err);
   1be9c:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1bea0:	3301      	adds	r3, #1
   1bea2:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
                dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_RXOVRR, sizeof(uint32_t));
   1bea6:	2304      	movs	r3, #4
   1bea8:	9302      	str	r3, [sp, #8]
   1beaa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1beae:	2300      	movs	r3, #0
   1beb0:	e9cd 2300 	strd	r2, r3, [sp]
   1beb4:	2200      	movs	r2, #0
   1beb6:	210f      	movs	r1, #15
   1beb8:	4620      	mov	r0, r4
   1beba:	f7fd fd6f 	bl	1999c <dw1000_write_reg>
                dw1000_phy_forcetrxoff(inst);
   1bebe:	4620      	mov	r0, r4
   1bec0:	f000 fe06 	bl	1cad0 <dw1000_phy_forcetrxoff>
                dw1000_phy_rx_reset(inst);
   1bec4:	4620      	mov	r0, r4
   1bec6:	f000 fdce 	bl	1ca66 <dw1000_phy_rx_reset>
    inst->control.start_rx_syncbuf_enabled = 1;
   1beca:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1bece:	f043 0310 	orr.w	r3, r3, #16
   1bed2:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1bed6:	2301      	movs	r3, #1
   1bed8:	2203      	movs	r2, #3
   1beda:	210f      	movs	r1, #15
   1bedc:	4620      	mov	r0, r4
   1bede:	f7fd fced 	bl	198bc <dw1000_read_reg>
   1bee2:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1bee4:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1bee8:	f010 0f80 	tst.w	r0, #128	; 0x80
   1beec:	d10a      	bne.n	1bf04 <dw1000_interrupt_ev_cb+0x584>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1beee:	2201      	movs	r2, #1
   1bef0:	9202      	str	r2, [sp, #8]
   1bef2:	2001      	movs	r0, #1
   1bef4:	2100      	movs	r1, #0
   1bef6:	e9cd 0100 	strd	r0, r1, [sp]
   1befa:	210d      	movs	r1, #13
   1befc:	4620      	mov	r0, r4
   1befe:	f7fd fd4d 	bl	1999c <dw1000_write_reg>
   1bf02:	e69e      	b.n	1bc42 <dw1000_interrupt_ev_cb+0x2c2>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1bf04:	2301      	movs	r3, #1
   1bf06:	9302      	str	r3, [sp, #8]
   1bf08:	2201      	movs	r2, #1
   1bf0a:	2300      	movs	r3, #0
   1bf0c:	e9cd 2300 	strd	r2, r3, [sp]
   1bf10:	2203      	movs	r2, #3
   1bf12:	210d      	movs	r1, #13
   1bf14:	4620      	mov	r0, r4
   1bf16:	f7fd fd41 	bl	1999c <dw1000_write_reg>
   1bf1a:	e7e8      	b.n	1beee <dw1000_interrupt_ev_cb+0x56e>
            inst->uwb_dev.carrier_integrator = dw1000_read_carrier_integrator(inst);
   1bf1c:	4620      	mov	r0, r4
   1bf1e:	f7ff fbe5 	bl	1b6ec <dw1000_read_carrier_integrator>
   1bf22:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
                             inst->sys_status & (SYS_STATUS_LDEDONE | SYS_STATUS_RXPHD | SYS_STATUS_RXDFR |
   1bf26:	f8d4 358c 	ldr.w	r3, [r4, #1420]	; 0x58c
            dw1000_write_reg(inst, SYS_STATUS_ID, 0,
   1bf2a:	2202      	movs	r2, #2
   1bf2c:	9202      	str	r2, [sp, #8]
   1bf2e:	f403 436c 	and.w	r3, r3, #60416	; 0xec00
   1bf32:	2200      	movs	r2, #0
   1bf34:	9300      	str	r3, [sp, #0]
   1bf36:	9201      	str	r2, [sp, #4]
   1bf38:	210f      	movs	r1, #15
   1bf3a:	4620      	mov	r0, r4
   1bf3c:	f7fd fd2e 	bl	1999c <dw1000_write_reg>
            if (inst->control.rxauto_disable == false){
   1bf40:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1bf44:	f013 0f04 	tst.w	r3, #4
   1bf48:	d006      	beq.n	1bf58 <dw1000_interrupt_ev_cb+0x5d8>
            inst->control.rxauto_disable = false;
   1bf4a:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1bf4e:	f36f 0382 	bfc	r3, #2, #1
   1bf52:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1bf56:	e674      	b.n	1bc42 <dw1000_interrupt_ev_cb+0x2c2>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1bf58:	2201      	movs	r2, #1
   1bf5a:	9202      	str	r2, [sp, #8]
   1bf5c:	2001      	movs	r0, #1
   1bf5e:	2100      	movs	r1, #0
   1bf60:	e9cd 0100 	strd	r0, r1, [sp]
   1bf64:	210d      	movs	r1, #13
   1bf66:	4620      	mov	r0, r4
   1bf68:	f7fd fd18 	bl	1999c <dw1000_write_reg>
                inst->uwb_dev.status.rx_restarted = 1;
   1bf6c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1bf70:	f043 0308 	orr.w	r3, r3, #8
   1bf74:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
   1bf78:	e7e7      	b.n	1bf4a <dw1000_interrupt_ev_cb+0x5ca>
                if(cbs->rx_complete_cb((struct uwb_dev*)inst,cbs)) continue;
   1bf7a:	4629      	mov	r1, r5
   1bf7c:	4620      	mov	r0, r4
   1bf7e:	4798      	blx	r3
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1bf80:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1bf82:	2d00      	cmp	r5, #0
   1bf84:	f43f ae62 	beq.w	1bc4c <dw1000_interrupt_ev_cb+0x2cc>
            if (cbs != NULL && cbs->rx_complete_cb)
   1bf88:	692b      	ldr	r3, [r5, #16]
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d1f5      	bne.n	1bf7a <dw1000_interrupt_ev_cb+0x5fa>
   1bf8e:	e7f7      	b.n	1bf80 <dw1000_interrupt_ev_cb+0x600>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXFRB, sizeof(uint8_t)); // Clear TX Frame Begins
   1bf90:	2301      	movs	r3, #1
   1bf92:	9302      	str	r3, [sp, #8]
   1bf94:	2210      	movs	r2, #16
   1bf96:	2300      	movs	r3, #0
   1bf98:	e9cd 2300 	strd	r2, r3, [sp]
   1bf9c:	2200      	movs	r2, #0
   1bf9e:	210f      	movs	r1, #15
   1bfa0:	4620      	mov	r0, r4
   1bfa2:	f7fd fcfb 	bl	1999c <dw1000_write_reg>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1bfa6:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1bfaa:	b90d      	cbnz	r5, 1bfb0 <dw1000_interrupt_ev_cb+0x630>
   1bfac:	e654      	b.n	1bc58 <dw1000_interrupt_ev_cb+0x2d8>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1bfae:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1bfb0:	2d00      	cmp	r5, #0
   1bfb2:	f43f ae51 	beq.w	1bc58 <dw1000_interrupt_ev_cb+0x2d8>
            if (cbs!=NULL && cbs->tx_begins_cb)
   1bfb6:	68ab      	ldr	r3, [r5, #8]
   1bfb8:	2b00      	cmp	r3, #0
   1bfba:	d0f8      	beq.n	1bfae <dw1000_interrupt_ev_cb+0x62e>
                if(cbs->tx_begins_cb((struct uwb_dev*)inst,cbs)) break;
   1bfbc:	4629      	mov	r1, r5
   1bfbe:	4620      	mov	r0, r4
   1bfc0:	4798      	blx	r3
   1bfc2:	2800      	cmp	r0, #0
   1bfc4:	d0f3      	beq.n	1bfae <dw1000_interrupt_ev_cb+0x62e>
   1bfc6:	e647      	b.n	1bc58 <dw1000_interrupt_ev_cb+0x2d8>
        MAC_STATS_INC(TFG_cnt);
   1bfc8:	f8d4 35dc 	ldr.w	r3, [r4, #1500]	; 0x5dc
   1bfcc:	3301      	adds	r3, #1
   1bfce:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_TX, sizeof(uint8_t)); // Clear TX event bits
   1bfd2:	2301      	movs	r3, #1
   1bfd4:	9302      	str	r3, [sp, #8]
   1bfd6:	22f8      	movs	r2, #248	; 0xf8
   1bfd8:	2300      	movs	r3, #0
   1bfda:	e9cd 2300 	strd	r2, r3, [sp]
   1bfde:	2200      	movs	r2, #0
   1bfe0:	210f      	movs	r1, #15
   1bfe2:	4620      	mov	r0, r4
   1bfe4:	f7fd fcda 	bl	1999c <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   1bfe8:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1bfec:	f013 0f08 	tst.w	r3, #8
   1bff0:	d11a      	bne.n	1c028 <dw1000_interrupt_ev_cb+0x6a8>
   1bff2:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   1bff6:	b36b      	cbz	r3, 1c054 <dw1000_interrupt_ev_cb+0x6d4>
        if(!inst->sys_status_bt_lock && !inst->uwb_dev.status.autoack_triggered) {
   1bff8:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
   1bffc:	b973      	cbnz	r3, 1c01c <dw1000_interrupt_ev_cb+0x69c>
   1bffe:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1c002:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c006:	d109      	bne.n	1c01c <dw1000_interrupt_ev_cb+0x69c>
            DW1000_SYS_STATUS_BT_FCTRL(inst, inst->uwb_dev.fctrl);
   1c008:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
   1c00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c010:	f8b4 24e0 	ldrh.w	r2, [r4, #1248]	; 0x4e0
   1c014:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1c018:	f8a3 25fa 	strh.w	r2, [r3, #1530]	; 0x5fa
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c01c:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c020:	bb2d      	cbnz	r5, 1c06e <dw1000_interrupt_ev_cb+0x6ee>
   1c022:	e61f      	b.n	1bc64 <dw1000_interrupt_ev_cb+0x2e4>
   1c024:	0010e400 	.word	0x0010e400
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c028:	2201      	movs	r2, #1
   1c02a:	9202      	str	r2, [sp, #8]
   1c02c:	2001      	movs	r0, #1
   1c02e:	2100      	movs	r1, #0
   1c030:	e9cd 0100 	strd	r0, r1, [sp]
   1c034:	210d      	movs	r1, #13
   1c036:	4620      	mov	r0, r4
   1c038:	f7fd fcb0 	bl	1999c <dw1000_write_reg>
 *
 * @return time
 *
 */
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1c03c:	2305      	movs	r3, #5
   1c03e:	2200      	movs	r2, #0
   1c040:	2117      	movs	r1, #23
   1c042:	4620      	mov	r0, r4
   1c044:	f7fd fc3a 	bl	198bc <dw1000_read_reg>
   1c048:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_txtime(inst));
   1c04a:	b2cb      	uxtb	r3, r1
   1c04c:	4620      	mov	r0, r4
   1c04e:	f7fe ff53 	bl	1aef8 <update_rx_window_timeout>
   1c052:	e7ce      	b.n	1bff2 <dw1000_interrupt_ev_cb+0x672>
   1c054:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1c058:	f7ee f808 	bl	a06c <os_sem_release>
            assert(err == DPL_OK);
   1c05c:	2800      	cmp	r0, #0
   1c05e:	d0cb      	beq.n	1bff8 <dw1000_interrupt_ev_cb+0x678>
   1c060:	2300      	movs	r3, #0
   1c062:	461a      	mov	r2, r3
   1c064:	4619      	mov	r1, r3
   1c066:	4618      	mov	r0, r3
   1c068:	f7ed f8ac 	bl	91c4 <__assert_func>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c06c:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c06e:	2d00      	cmp	r5, #0
   1c070:	f43f adf8 	beq.w	1bc64 <dw1000_interrupt_ev_cb+0x2e4>
            if (cbs!=NULL && cbs->tx_complete_cb)
   1c074:	68eb      	ldr	r3, [r5, #12]
   1c076:	2b00      	cmp	r3, #0
   1c078:	d0f8      	beq.n	1c06c <dw1000_interrupt_ev_cb+0x6ec>
                if(cbs->tx_complete_cb((struct uwb_dev*)inst,cbs)) break;
   1c07a:	4629      	mov	r1, r5
   1c07c:	4620      	mov	r0, r4
   1c07e:	4798      	blx	r3
   1c080:	2800      	cmp	r0, #0
   1c082:	d0f3      	beq.n	1c06c <dw1000_interrupt_ev_cb+0x6ec>
   1c084:	e5ee      	b.n	1bc64 <dw1000_interrupt_ev_cb+0x2e4>
        MAC_STATS_INC(TXBUF_err);
   1c086:	f8d4 35e8 	ldr.w	r3, [r4, #1512]	; 0x5e8
   1c08a:	3301      	adds	r3, #1
   1c08c:	f8c4 35e8 	str.w	r3, [r4, #1512]	; 0x5e8
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_TXBERR, sizeof(uint32_t));
   1c090:	2304      	movs	r3, #4
   1c092:	9302      	str	r3, [sp, #8]
   1c094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c098:	2300      	movs	r3, #0
   1c09a:	e9cd 2300 	strd	r2, r3, [sp]
   1c09e:	2200      	movs	r2, #0
   1c0a0:	210f      	movs	r1, #15
   1c0a2:	4620      	mov	r0, r4
   1c0a4:	f7fd fc7a 	bl	1999c <dw1000_write_reg>
   1c0a8:	f8b4 3566 	ldrh.w	r3, [r4, #1382]	; 0x566
        if(dpl_sem_get_count(&inst->tx_sem) == 0){
   1c0ac:	2b00      	cmp	r3, #0
   1c0ae:	f47f addf 	bne.w	1bc70 <dw1000_interrupt_ev_cb+0x2f0>
   1c0b2:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
   1c0b6:	f7ed ffd9 	bl	a06c <os_sem_release>
            assert(err == DPL_OK);
   1c0ba:	2800      	cmp	r0, #0
   1c0bc:	f43f add8 	beq.w	1bc70 <dw1000_interrupt_ev_cb+0x2f0>
   1c0c0:	2300      	movs	r3, #0
   1c0c2:	461a      	mov	r2, r3
   1c0c4:	4619      	mov	r1, r3
   1c0c6:	4618      	mov	r0, r3
   1c0c8:	f7ed f87c 	bl	91c4 <__assert_func>
        MAC_STATS_INC(LDE_err);
   1c0cc:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
   1c0d0:	3301      	adds	r3, #1
   1c0d2:	f8c4 35e0 	str.w	r3, [r4, #1504]	; 0x5e0
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_LDEERR, sizeof(uint32_t));
   1c0d6:	2304      	movs	r3, #4
   1c0d8:	9302      	str	r3, [sp, #8]
   1c0da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1c0de:	2300      	movs	r3, #0
   1c0e0:	e9cd 2300 	strd	r2, r3, [sp]
   1c0e4:	2200      	movs	r2, #0
   1c0e6:	210f      	movs	r1, #15
   1c0e8:	4620      	mov	r0, r4
   1c0ea:	f7fd fc57 	bl	1999c <dw1000_write_reg>
   1c0ee:	e5c5      	b.n	1bc7c <dw1000_interrupt_ev_cb+0x2fc>
        MAC_STATS_INC(RTO_cnt);
   1c0f0:	f8d4 35d4 	ldr.w	r3, [r4, #1492]	; 0x5d4
   1c0f4:	3301      	adds	r3, #1
   1c0f6:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_ALL_RX_TO, sizeof(uint32_t)); // Clear RX timeout event bits
   1c0fa:	2304      	movs	r3, #4
   1c0fc:	9302      	str	r3, [sp, #8]
   1c0fe:	f44f 1208 	mov.w	r2, #2228224	; 0x220000
   1c102:	2300      	movs	r3, #0
   1c104:	e9cd 2300 	strd	r2, r3, [sp]
   1c108:	2200      	movs	r2, #0
   1c10a:	210f      	movs	r1, #15
   1c10c:	4620      	mov	r0, r4
   1c10e:	f7fd fc45 	bl	1999c <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   1c112:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c116:	f013 0f08 	tst.w	r3, #8
   1c11a:	d127      	bne.n	1c16c <dw1000_interrupt_ev_cb+0x7ec>
        if (!inst->control.abs_timeout) {
   1c11c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c120:	f013 0f08 	tst.w	r3, #8
   1c124:	f47f adaf 	bne.w	1bc86 <dw1000_interrupt_ev_cb+0x306>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint16_t)SYS_CTRL_TRXOFF, sizeof(uint16_t)) ; // Disable the radio
   1c128:	2302      	movs	r3, #2
   1c12a:	9302      	str	r3, [sp, #8]
   1c12c:	2240      	movs	r2, #64	; 0x40
   1c12e:	2300      	movs	r3, #0
   1c130:	e9cd 2300 	strd	r2, r3, [sp]
   1c134:	2200      	movs	r2, #0
   1c136:	210d      	movs	r1, #13
   1c138:	4620      	mov	r0, r4
   1c13a:	f7fd fc2f 	bl	1999c <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   1c13e:	4620      	mov	r0, r4
   1c140:	f000 fc91 	bl	1ca66 <dw1000_phy_rx_reset>
            inst->control.cir_enable = false;
   1c144:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c148:	f36f 0341 	bfc	r3, #1, #1
   1c14c:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.rxauto_disable = false;
   1c150:	b2db      	uxtb	r3, r3
   1c152:	f36f 0382 	bfc	r3, #2, #1
   1c156:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            inst->control.abs_timeout = false;
   1c15a:	b2db      	uxtb	r3, r3
   1c15c:	f36f 03c3 	bfc	r3, #3, #1
   1c160:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
            if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c164:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c168:	bb3d      	cbnz	r5, 1c1ba <dw1000_interrupt_ev_cb+0x83a>
   1c16a:	e58c      	b.n	1bc86 <dw1000_interrupt_ev_cb+0x306>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1c16c:	2305      	movs	r3, #5
   1c16e:	2200      	movs	r2, #0
   1c170:	2106      	movs	r1, #6
   1c172:	4620      	mov	r0, r4
   1c174:	f7fd fba2 	bl	198bc <dw1000_read_reg>
            uint32_t new_timeout = calc_rx_window_timeout(systime, inst->uwb_dev.abs_timeout);
   1c178:	f504 639c 	add.w	r3, r4, #1248	; 0x4e0
   1c17c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1c180:	b2c9      	uxtb	r1, r1
   1c182:	f7fe fb94 	bl	1a8ae <calc_rx_window_timeout>
   1c186:	4605      	mov	r5, r0
            if (new_timeout > 1) {
   1c188:	2801      	cmp	r0, #1
   1c18a:	d806      	bhi.n	1c19a <dw1000_interrupt_ev_cb+0x81a>
                inst->control.abs_timeout = false;
   1c18c:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c190:	f36f 03c3 	bfc	r3, #3, #1
   1c194:	f884 35b1 	strb.w	r3, [r4, #1457]	; 0x5b1
   1c198:	e7c0      	b.n	1c11c <dw1000_interrupt_ev_cb+0x79c>
                dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c19a:	2201      	movs	r2, #1
   1c19c:	9202      	str	r2, [sp, #8]
   1c19e:	2001      	movs	r0, #1
   1c1a0:	2100      	movs	r1, #0
   1c1a2:	e9cd 0100 	strd	r0, r1, [sp]
   1c1a6:	210d      	movs	r1, #13
   1c1a8:	4620      	mov	r0, r4
   1c1aa:	f7fd fbf7 	bl	1999c <dw1000_write_reg>
                dw1000_adj_rx_timeout(inst, new_timeout);
   1c1ae:	4629      	mov	r1, r5
   1c1b0:	4620      	mov	r0, r4
   1c1b2:	f7fe fe92 	bl	1aeda <dw1000_adj_rx_timeout>
   1c1b6:	e7b1      	b.n	1c11c <dw1000_interrupt_ev_cb+0x79c>
                SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c1b8:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c1ba:	2d00      	cmp	r5, #0
   1c1bc:	f43f ad63 	beq.w	1bc86 <dw1000_interrupt_ev_cb+0x306>
                    if (cbs!=NULL && cbs->rx_timeout_cb)
   1c1c0:	69ab      	ldr	r3, [r5, #24]
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	d0f8      	beq.n	1c1b8 <dw1000_interrupt_ev_cb+0x838>
                        if(cbs->rx_timeout_cb((struct uwb_dev*)inst,cbs)) continue;
   1c1c6:	4629      	mov	r1, r5
   1c1c8:	4620      	mov	r0, r4
   1c1ca:	4798      	blx	r3
   1c1cc:	e7f4      	b.n	1c1b8 <dw1000_interrupt_ev_cb+0x838>
        MAC_STATS_INC(RX_err);
   1c1ce:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
   1c1d2:	3301      	adds	r3, #1
   1c1d4:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_RX_ERR), sizeof(uint32_t)); // Clear RX error event bits
   1c1d8:	2304      	movs	r3, #4
   1c1da:	9302      	str	r3, [sp, #8]
   1c1dc:	a37c      	add	r3, pc, #496	; (adr r3, 1c3d0 <dw1000_interrupt_ev_cb+0xa50>)
   1c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1e2:	e9cd 2300 	strd	r2, r3, [sp]
   1c1e6:	2200      	movs	r2, #0
   1c1e8:	210f      	movs	r1, #15
   1c1ea:	4620      	mov	r0, r4
   1c1ec:	f7fd fbd6 	bl	1999c <dw1000_write_reg>
        if (inst->uwb_dev.config.dblbuffon_enabled && inst->uwb_dev.status.overrun_error) {
   1c1f0:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   1c1f4:	f013 0f10 	tst.w	r3, #16
   1c1f8:	d004      	beq.n	1c204 <dw1000_interrupt_ev_cb+0x884>
   1c1fa:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1c1fe:	f013 0f04 	tst.w	r3, #4
   1c202:	d121      	bne.n	1c248 <dw1000_interrupt_ev_cb+0x8c8>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8_t) SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1c204:	2301      	movs	r3, #1
   1c206:	9302      	str	r3, [sp, #8]
   1c208:	2240      	movs	r2, #64	; 0x40
   1c20a:	2300      	movs	r3, #0
   1c20c:	e9cd 2300 	strd	r2, r3, [sp]
   1c210:	2200      	movs	r2, #0
   1c212:	210d      	movs	r1, #13
   1c214:	4620      	mov	r0, r4
   1c216:	f7fd fbc1 	bl	1999c <dw1000_write_reg>
            dw1000_phy_rx_reset(inst);
   1c21a:	4620      	mov	r0, r4
   1c21c:	f000 fc23 	bl	1ca66 <dw1000_phy_rx_reset>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET+1, SYS_CTRL_RXENAB>>8, sizeof(uint8_t));
   1c220:	2201      	movs	r2, #1
   1c222:	9202      	str	r2, [sp, #8]
   1c224:	2001      	movs	r0, #1
   1c226:	2100      	movs	r1, #0
   1c228:	e9cd 0100 	strd	r0, r1, [sp]
   1c22c:	210d      	movs	r1, #13
   1c22e:	4620      	mov	r0, r4
   1c230:	f7fd fbb4 	bl	1999c <dw1000_write_reg>
        if (inst->control.abs_timeout) {
   1c234:	f894 35b1 	ldrb.w	r3, [r4, #1457]	; 0x5b1
   1c238:	f013 0f08 	tst.w	r3, #8
   1c23c:	d134      	bne.n	1c2a8 <dw1000_interrupt_ev_cb+0x928>
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c23e:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c242:	2d00      	cmp	r5, #0
   1c244:	d13d      	bne.n	1c2c2 <dw1000_interrupt_ev_cb+0x942>
   1c246:	e524      	b.n	1bc92 <dw1000_interrupt_ev_cb+0x312>
            MAC_STATS_INC(ROV_err);
   1c248:	f8d4 35d8 	ldr.w	r3, [r4, #1496]	; 0x5d8
   1c24c:	3301      	adds	r3, #1
   1c24e:	f8c4 35d8 	str.w	r3, [r4, #1496]	; 0x5d8
            dw1000_phy_rx_reset(inst);
   1c252:	4620      	mov	r0, r4
   1c254:	f000 fc07 	bl	1ca66 <dw1000_phy_rx_reset>
            dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0b1, sizeof(uint8_t));
   1c258:	2501      	movs	r5, #1
   1c25a:	9502      	str	r5, [sp, #8]
   1c25c:	2201      	movs	r2, #1
   1c25e:	2300      	movs	r3, #0
   1c260:	e9cd 2300 	strd	r2, r3, [sp]
   1c264:	2203      	movs	r2, #3
   1c266:	210d      	movs	r1, #13
   1c268:	4620      	mov	r0, r4
   1c26a:	f7fd fb97 	bl	1999c <dw1000_write_reg>
    inst->control.start_rx_syncbuf_enabled = 1;
   1c26e:	f894 35b0 	ldrb.w	r3, [r4, #1456]	; 0x5b0
   1c272:	f043 0310 	orr.w	r3, r3, #16
   1c276:	f884 35b0 	strb.w	r3, [r4, #1456]	; 0x5b0
    buff = dw1000_read_reg(inst, SYS_STATUS_ID, 3, sizeof(uint8_t)); // Read 1 byte at offset 3 to get the 4th byte out of 5
   1c27a:	462b      	mov	r3, r5
   1c27c:	2203      	movs	r2, #3
   1c27e:	210f      	movs	r1, #15
   1c280:	4620      	mov	r0, r4
   1c282:	f7fd fb1b 	bl	198bc <dw1000_read_reg>
   1c286:	b2c0      	uxtb	r0, r0
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=         // IC side Receive Buffer Pointer
   1c288:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
   1c28c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c290:	d0c6      	beq.n	1c220 <dw1000_interrupt_ev_cb+0x8a0>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 0x01, sizeof(uint8_t)); // We need to swap RX buffer status reg (write one to toggle internally)
   1c292:	9502      	str	r5, [sp, #8]
   1c294:	2201      	movs	r2, #1
   1c296:	2300      	movs	r3, #0
   1c298:	e9cd 2300 	strd	r2, r3, [sp]
   1c29c:	2203      	movs	r2, #3
   1c29e:	210d      	movs	r1, #13
   1c2a0:	4620      	mov	r0, r4
   1c2a2:	f7fd fb7b 	bl	1999c <dw1000_write_reg>
            dw1000_sync_rxbufptrs(inst);
   1c2a6:	e7bb      	b.n	1c220 <dw1000_interrupt_ev_cb+0x8a0>
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1c2a8:	2305      	movs	r3, #5
   1c2aa:	2200      	movs	r2, #0
   1c2ac:	2106      	movs	r1, #6
   1c2ae:	4620      	mov	r0, r4
   1c2b0:	f7fd fb04 	bl	198bc <dw1000_read_reg>
   1c2b4:	4602      	mov	r2, r0
            update_rx_window_timeout(inst, dw1000_read_systime(inst));
   1c2b6:	b2cb      	uxtb	r3, r1
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	f7fe fe1d 	bl	1aef8 <update_rx_window_timeout>
   1c2be:	e7be      	b.n	1c23e <dw1000_interrupt_ev_cb+0x8be>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c2c0:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c2c2:	2d00      	cmp	r5, #0
   1c2c4:	f43f ace5 	beq.w	1bc92 <dw1000_interrupt_ev_cb+0x312>
            if (cbs!=NULL && cbs->rx_error_cb)
   1c2c8:	69eb      	ldr	r3, [r5, #28]
   1c2ca:	2b00      	cmp	r3, #0
   1c2cc:	d0f8      	beq.n	1c2c0 <dw1000_interrupt_ev_cb+0x940>
                if(cbs->rx_error_cb((struct uwb_dev*)inst,cbs)) continue;
   1c2ce:	4629      	mov	r1, r5
   1c2d0:	4620      	mov	r0, r4
   1c2d2:	4798      	blx	r3
   1c2d4:	e7f4      	b.n	1c2c0 <dw1000_interrupt_ev_cb+0x940>
        dw1000_write_reg(inst, SYS_STATUS_ID, 2, SYS_STATUS_SLP2INIT>>16, 1);
   1c2d6:	2301      	movs	r3, #1
   1c2d8:	9302      	str	r3, [sp, #8]
   1c2da:	2280      	movs	r2, #128	; 0x80
   1c2dc:	2300      	movs	r3, #0
   1c2de:	e9cd 2300 	strd	r2, r3, [sp]
   1c2e2:	2202      	movs	r2, #2
   1c2e4:	210f      	movs	r1, #15
   1c2e6:	4620      	mov	r0, r4
   1c2e8:	f7fd fb58 	bl	1999c <dw1000_write_reg>
   1c2ec:	e4d7      	b.n	1bc9e <dw1000_interrupt_ev_cb+0x31e>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_STATUS_CLKPLL_LL, sizeof(uint32_t));
   1c2ee:	2304      	movs	r3, #4
   1c2f0:	9302      	str	r3, [sp, #8]
   1c2f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	e9cd 2300 	strd	r2, r3, [sp]
   1c2fc:	2200      	movs	r2, #0
   1c2fe:	210f      	movs	r1, #15
   1c300:	4620      	mov	r0, r4
   1c302:	f7fd fb4b 	bl	1999c <dw1000_write_reg>
        MAC_STATS_INC(PLL_LL_err);
   1c306:	f8d4 35ec 	ldr.w	r3, [r4, #1516]	; 0x5ec
   1c30a:	3301      	adds	r3, #1
   1c30c:	f8c4 35ec 	str.w	r3, [r4, #1516]	; 0x5ec
   1c310:	e4cb      	b.n	1bcaa <dw1000_interrupt_ev_cb+0x32a>
        dw1000_write_reg(inst, SYS_STATUS_ID, 0, SYS_MASK_MCPLOCK, sizeof(uint32_t));
   1c312:	2304      	movs	r3, #4
   1c314:	9302      	str	r3, [sp, #8]
   1c316:	2202      	movs	r2, #2
   1c318:	2300      	movs	r3, #0
   1c31a:	e9cd 2300 	strd	r2, r3, [sp]
   1c31e:	2200      	movs	r2, #0
   1c320:	210f      	movs	r1, #15
   1c322:	4620      	mov	r0, r4
   1c324:	f7fd fb3a 	bl	1999c <dw1000_write_reg>
        dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1c328:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   1c32c:	f04f 0802 	mov.w	r8, #2
   1c330:	f8cd 8008 	str.w	r8, [sp, #8]
   1c334:	2500      	movs	r5, #0
   1c336:	9300      	str	r3, [sp, #0]
   1c338:	9501      	str	r5, [sp, #4]
   1c33a:	f641 0204 	movw	r2, #6148	; 0x1804
   1c33e:	212e      	movs	r1, #46	; 0x2e
   1c340:	4620      	mov	r0, r4
   1c342:	f7fd fb2b 	bl	1999c <dw1000_write_reg>
        dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   1c346:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1c34a:	f8cd 8008 	str.w	r8, [sp, #8]
   1c34e:	9300      	str	r3, [sp, #0]
   1c350:	9501      	str	r5, [sp, #4]
   1c352:	462a      	mov	r2, r5
   1c354:	2118      	movs	r1, #24
   1c356:	4620      	mov	r0, r4
   1c358:	f7fd fb20 	bl	1999c <dw1000_write_reg>
        inst->uwb_dev.status.sleeping = 0;
   1c35c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
   1c360:	f365 0300 	bfi	r3, r5, #0, #1
   1c364:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
        if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1c368:	f8d4 5530 	ldr.w	r5, [r4, #1328]	; 0x530
   1c36c:	b90d      	cbnz	r5, 1c372 <dw1000_interrupt_ev_cb+0x9f2>
   1c36e:	e4a2      	b.n	1bcb6 <dw1000_interrupt_ev_cb+0x336>
            SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1c370:	6bad      	ldr	r5, [r5, #56]	; 0x38
   1c372:	2d00      	cmp	r5, #0
   1c374:	f43f ac9f 	beq.w	1bcb6 <dw1000_interrupt_ev_cb+0x336>
            if (cbs!=NULL && cbs->sleep_cb)
   1c378:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1c37a:	2b00      	cmp	r3, #0
   1c37c:	d0f8      	beq.n	1c370 <dw1000_interrupt_ev_cb+0x9f0>
                if (cbs->sleep_cb((struct uwb_dev*)inst,cbs)) continue;
   1c37e:	4629      	mov	r1, r5
   1c380:	4620      	mov	r0, r4
   1c382:	4798      	blx	r3
   1c384:	e7f4      	b.n	1c370 <dw1000_interrupt_ev_cb+0x9f0>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   1c386:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c38a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1c38e:	f7ed fa4d 	bl	982c <os_eventq_put>
        if(!inst->sys_status_bt_lock) {
   1c392:	f894 3df2 	ldrb.w	r3, [r4, #3570]	; 0xdf2
   1c396:	2b00      	cmp	r3, #0
   1c398:	f47f ab0e 	bne.w	1b9b8 <dw1000_interrupt_ev_cb+0x38>
            DW1000_SYS_STATUS_BT_PTR(inst).interrupt_reentry = 1;
   1c39c:	f8b4 3df0 	ldrh.w	r3, [r4, #3568]	; 0xdf0
   1c3a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c3a4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   1c3a8:	f893 25f9 	ldrb.w	r2, [r3, #1529]	; 0x5f9
   1c3ac:	f042 0201 	orr.w	r2, r2, #1
   1c3b0:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
   1c3b4:	f7ff bb00 	b.w	1b9b8 <dw1000_interrupt_ev_cb+0x38>
        DW1000_SYS_STATUS_BT_PTR(inst).utime_end = dpl_cputime_get32();
   1c3b8:	f8b4 5df0 	ldrh.w	r5, [r4, #3568]	; 0xdf0
   1c3bc:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   1c3c0:	f7f6 fa83 	bl	128ca <dpl_cputime_get32>
   1c3c4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   1c3c8:	f8c4 05fc 	str.w	r0, [r4, #1532]	; 0x5fc
}
   1c3cc:	f7ff baf9 	b.w	1b9c2 <dw1000_interrupt_ev_cb+0x42>
   1c3d0:	24119000 	.word	0x24119000
   1c3d4:	00000000 	.word	0x00000000

0001c3d8 <dw1000_calc_fppl>:
    if (diag->pacc_cnt == 0 ||
   1c3d8:	8a4a      	ldrh	r2, [r1, #18]
   1c3da:	b3e2      	cbz	r2, 1c456 <dw1000_calc_fppl+0x7e>
{
   1c3dc:	b510      	push	{r4, lr}
   1c3de:	ed2d 8b02 	vpush	{d8}
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   1c3e2:	890b      	ldrh	r3, [r1, #8]
    if (diag->pacc_cnt == 0 ||
   1c3e4:	b91b      	cbnz	r3, 1c3ee <dw1000_calc_fppl+0x16>
        (!diag->fp_amp && !diag->fp_amp2 && !diag->fp_amp3)) {
   1c3e6:	898c      	ldrh	r4, [r1, #12]
   1c3e8:	b90c      	cbnz	r4, 1c3ee <dw1000_calc_fppl+0x16>
   1c3ea:	89cc      	ldrh	r4, [r1, #14]
   1c3ec:	b3b4      	cbz	r4, 1c45c <dw1000_calc_fppl+0x84>
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c3ee:	f890 050e 	ldrb.w	r0, [r0, #1294]	; 0x50e
   1c3f2:	2801      	cmp	r0, #1
   1c3f4:	d02c      	beq.n	1c450 <dw1000_calc_fppl+0x78>
   1c3f6:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 1c464 <dw1000_calc_fppl+0x8c>
    N = (float)(diag->pacc_cnt);
   1c3fa:	ee07 2a90 	vmov	s15, r2
   1c3fe:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1c402:	fb03 f303 	mul.w	r3, r3, r3
   1c406:	ee07 3a90 	vmov	s15, r3
   1c40a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
        (float)(diag->fp_amp2*diag->fp_amp2) +
   1c40e:	898b      	ldrh	r3, [r1, #12]
   1c410:	fb03 f303 	mul.w	r3, r3, r3
   1c414:	ee07 3a90 	vmov	s15, r3
   1c418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1c41c:	ee36 7aa7 	vadd.f32	s14, s13, s15
        (float)(diag->fp_amp3*diag->fp_amp3);
   1c420:	89cb      	ldrh	r3, [r1, #14]
   1c422:	fb03 f303 	mul.w	r3, r3, r3
   1c426:	ee07 3a90 	vmov	s15, r3
   1c42a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    v = (float)(diag->fp_amp*diag->fp_amp) +
   1c42e:	ee77 7a27 	vadd.f32	s15, s14, s15
    v /= N * N;
   1c432:	ee20 0a00 	vmul.f32	s0, s0, s0
    fppl = 10.0f * log10f(v) - A;
   1c436:	ee87 0a80 	vdiv.f32	s0, s15, s0
   1c43a:	f009 f883 	bl	25544 <log10f>
   1c43e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1c442:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c446:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   1c44a:	ecbd 8b02 	vpop	{d8}
   1c44e:	bd10      	pop	{r4, pc}
    A = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c450:	ed9f 8a05 	vldr	s16, [pc, #20]	; 1c468 <dw1000_calc_fppl+0x90>
   1c454:	e7d1      	b.n	1c3fa <dw1000_calc_fppl+0x22>
        return DPL_FLOAT32_NAN();
   1c456:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1c46c <dw1000_calc_fppl+0x94>
}
   1c45a:	4770      	bx	lr
        return DPL_FLOAT32_NAN();
   1c45c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c46c <dw1000_calc_fppl+0x94>
   1c460:	e7f3      	b.n	1c44a <dw1000_calc_fppl+0x72>
   1c462:	bf00      	nop
   1c464:	42f37ae1 	.word	0x42f37ae1
   1c468:	42e38a3d 	.word	0x42e38a3d
   1c46c:	7fc00000 	.word	0x7fc00000

0001c470 <dw1000_get_fppl>:
{
   1c470:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   1c472:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   1c476:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c47a:	d102      	bne.n	1c482 <dw1000_get_fppl+0x12>
        return DPL_FLOAT32_NAN();
   1c47c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c48c <dw1000_get_fppl+0x1c>
}
   1c480:	bd08      	pop	{r3, pc}
    return dw1000_calc_fppl(inst, &inst->rxdiag);
   1c482:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   1c486:	f7ff ffa7 	bl	1c3d8 <dw1000_calc_fppl>
   1c48a:	e7f9      	b.n	1c480 <dw1000_get_fppl+0x10>
   1c48c:	7fc00000 	.word	0x7fc00000

0001c490 <dw1000_calc_rssi>:
{
   1c490:	b508      	push	{r3, lr}
   1c492:	ed2d 8b02 	vpush	{d8}
    uint32_t pacc_cnt = diag->pacc_cnt;
   1c496:	8a4a      	ldrh	r2, [r1, #18]
    uint32_t cir_pwr = diag->cir_pwr;
   1c498:	8a0b      	ldrh	r3, [r1, #16]
    if (cir_pwr == 0 || pacc_cnt == 0) {
   1c49a:	b1eb      	cbz	r3, 1c4d8 <dw1000_calc_rssi+0x48>
   1c49c:	b1fa      	cbz	r2, 1c4de <dw1000_calc_rssi+0x4e>
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c49e:	f890 150e 	ldrb.w	r1, [r0, #1294]	; 0x50e
   1c4a2:	2901      	cmp	r1, #1
   1c4a4:	d015      	beq.n	1c4d2 <dw1000_calc_rssi+0x42>
   1c4a6:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 1c4e4 <dw1000_calc_rssi+0x54>
    A = cir_pwr * 0x20000/(pacc_cnt * pacc_cnt);
   1c4aa:	045b      	lsls	r3, r3, #17
   1c4ac:	fb02 f202 	mul.w	r2, r2, r2
   1c4b0:	fbb3 f3f2 	udiv	r3, r3, r2
   1c4b4:	ee00 3a10 	vmov	s0, r3
    rssi = 10.0f * log10f(A) - B;
   1c4b8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   1c4bc:	f009 f842 	bl	25544 <log10f>
   1c4c0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1c4c4:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c4c8:	ee30 0a48 	vsub.f32	s0, s0, s16
}
   1c4cc:	ecbd 8b02 	vpop	{d8}
   1c4d0:	bd08      	pop	{r3, pc}
    B = (inst->uwb_dev.config.prf == DWT_PRF_16M) ? DPL_FLOAT32_INIT(113.77f) : DPL_FLOAT32_INIT(121.74f);
   1c4d2:	ed9f 8a05 	vldr	s16, [pc, #20]	; 1c4e8 <dw1000_calc_rssi+0x58>
   1c4d6:	e7e8      	b.n	1c4aa <dw1000_calc_rssi+0x1a>
        return DPL_FLOAT32_NAN();
   1c4d8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 1c4ec <dw1000_calc_rssi+0x5c>
   1c4dc:	e7f6      	b.n	1c4cc <dw1000_calc_rssi+0x3c>
   1c4de:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c4ec <dw1000_calc_rssi+0x5c>
   1c4e2:	e7f3      	b.n	1c4cc <dw1000_calc_rssi+0x3c>
   1c4e4:	42f37ae1 	.word	0x42f37ae1
   1c4e8:	42e38a3d 	.word	0x42e38a3d
   1c4ec:	7fc00000 	.word	0x7fc00000

0001c4f0 <dw1000_get_rssi>:
{
   1c4f0:	b508      	push	{r3, lr}
    if (!inst->uwb_dev.config.rxdiag_enable) {
   1c4f2:	f890 352c 	ldrb.w	r3, [r0, #1324]	; 0x52c
   1c4f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c4fa:	d102      	bne.n	1c502 <dw1000_get_rssi+0x12>
        return DPL_FLOAT32_NAN();
   1c4fc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1c50c <dw1000_get_rssi+0x1c>
}
   1c500:	bd08      	pop	{r3, pc}
    return dw1000_calc_rssi(inst, &inst->rxdiag);
   1c502:	f200 519c 	addw	r1, r0, #1436	; 0x59c
   1c506:	f7ff ffc3 	bl	1c490 <dw1000_calc_rssi>
   1c50a:	e7f9      	b.n	1c500 <dw1000_get_rssi+0x10>
   1c50c:	7fc00000 	.word	0x7fc00000

0001c510 <dw1000_estimate_los>:
    d = DPL_FLOAT32_FABS(DPL_FLOAT32_SUB(rssi, fppl));
   1c510:	ee30 0a60 	vsub.f32	s0, s0, s1
   1c514:	eeb0 0ac0 	vabs.f32	s0, s0
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   1c518:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1c51c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c524:	d413      	bmi.n	1c54e <dw1000_estimate_los+0x3e>
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   1c526:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   1c52a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1c52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c532:	dc0f      	bgt.n	1c554 <dw1000_estimate_los+0x44>
    los = DPL_FLOAT32_SUB(DPL_FLOAT32_INIT(1.0f),
   1c534:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
   1c538:	ee30 0a60 	vsub.f32	s0, s0, s1
   1c53c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   1c540:	ee20 0a27 	vmul.f32	s0, s0, s15
   1c544:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1c548:	ee37 0ac0 	vsub.f32	s0, s15, s0
    return los;
   1c54c:	4770      	bx	lr
    if (d < DPL_FLOAT32_INIT(6.0f))  return DPL_FLOAT32_INIT(1.0f);
   1c54e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1c552:	4770      	bx	lr
    if (d > DPL_FLOAT32_INIT(10.0f)) return DPL_FLOAT32_INIT(0.0f);
   1c554:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1c55c <dw1000_estimate_los+0x4c>
}
   1c558:	4770      	bx	lr
   1c55a:	bf00      	nop
   1c55c:	00000000 	.word	0x00000000

0001c560 <dw1000_read_systime>:
inline uint64_t dw1000_read_systime(struct _dw1000_dev_instance_t * inst){
   1c560:	b508      	push	{r3, lr}
    uint64_t time = ((uint64_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, SYS_TIME_LEN)) & 0x0FFFFFFFFFFULL;
   1c562:	2305      	movs	r3, #5
   1c564:	2200      	movs	r2, #0
   1c566:	2106      	movs	r1, #6
   1c568:	f7fd f9a8 	bl	198bc <dw1000_read_reg>
}
   1c56c:	b2c9      	uxtb	r1, r1
   1c56e:	bd08      	pop	{r3, pc}

0001c570 <dw1000_read_systime_lo>:
inline uint32_t dw1000_read_systime_lo(struct _dw1000_dev_instance_t * inst){
   1c570:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, SYS_TIME_ID, SYS_TIME_OFFSET, sizeof(uint32_t));
   1c572:	2304      	movs	r3, #4
   1c574:	2200      	movs	r2, #0
   1c576:	2106      	movs	r1, #6
   1c578:	f7fd f9a0 	bl	198bc <dw1000_read_reg>
}
   1c57c:	bd08      	pop	{r3, pc}

0001c57e <dw1000_read_rxtime>:
inline uint64_t dw1000_read_rxtime(struct _dw1000_dev_instance_t * inst){
   1c57e:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t)  dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1c580:	2305      	movs	r3, #5
   1c582:	2200      	movs	r2, #0
   1c584:	2115      	movs	r1, #21
   1c586:	f7fd f999 	bl	198bc <dw1000_read_reg>
}
   1c58a:	b2c9      	uxtb	r1, r1
   1c58c:	bd08      	pop	{r3, pc}

0001c58e <dw1000_read_rxtime_lo>:
inline uint32_t dw1000_read_rxtime_lo(struct _dw1000_dev_instance_t * inst){
   1c58e:	b508      	push	{r3, lr}
    uint64_t time = (uint32_t) dw1000_read_reg(inst, RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, sizeof(uint32_t));
   1c590:	2304      	movs	r3, #4
   1c592:	2200      	movs	r2, #0
   1c594:	2115      	movs	r1, #21
   1c596:	f7fd f991 	bl	198bc <dw1000_read_reg>
}
   1c59a:	bd08      	pop	{r3, pc}

0001c59c <dw1000_read_txtime>:
inline uint64_t dw1000_read_txtime(struct _dw1000_dev_instance_t * inst){
   1c59c:	b508      	push	{r3, lr}
    uint64_t time = (uint64_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN) & 0x0FFFFFFFFFFULL;
   1c59e:	2305      	movs	r3, #5
   1c5a0:	2200      	movs	r2, #0
   1c5a2:	2117      	movs	r1, #23
   1c5a4:	f7fd f98a 	bl	198bc <dw1000_read_reg>
    return time;
}
   1c5a8:	b2c9      	uxtb	r1, r1
   1c5aa:	bd08      	pop	{r3, pc}

0001c5ac <dw1000_read_txtime_lo>:
 *
 * @param inst  Pointer to _dw1000_dev_instance_t.
 *
 * @return time
 */
inline uint32_t dw1000_read_txtime_lo(struct _dw1000_dev_instance_t * inst){
   1c5ac:	b508      	push	{r3, lr}
    uint32_t time = (uint32_t) dw1000_read_reg(inst, TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, sizeof(uint32_t));
   1c5ae:	2304      	movs	r3, #4
   1c5b0:	2200      	movs	r2, #0
   1c5b2:	2117      	movs	r1, #23
   1c5b4:	f7fd f982 	bl	198bc <dw1000_read_reg>
    return time;
}
   1c5b8:	bd08      	pop	{r3, pc}
	...

0001c5bc <dw1000_configcwmode>:
 * @param chan - specifies the operating channel (e.g. 1, 2, 3, 4, 5, 6 or 7)
 *
 */
void
dw1000_configcwmode(struct _dw1000_dev_instance_t * inst, uint8_t chan)
{
   1c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5be:	b085      	sub	sp, #20
    int rc;
    if ((chan < 1) || (chan > 7) || (6 == chan)) {
   1c5c0:	1e4b      	subs	r3, r1, #1
   1c5c2:	b2db      	uxtb	r3, r3
   1c5c4:	2b06      	cmp	r3, #6
   1c5c6:	d879      	bhi.n	1c6bc <dw1000_configcwmode+0x100>
   1c5c8:	4604      	mov	r4, r0
   1c5ca:	460d      	mov	r5, r1
   1c5cc:	2906      	cmp	r1, #6
   1c5ce:	d075      	beq.n	1c6bc <dw1000_configcwmode+0x100>
    }

    /* Lower the speed of the SPI bus before activating CW mode.
     * This is needed because we disable the hiher sysclk and thus
     * dw1000 only support < 2Mbit spi */
    inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1c5d0:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   1c5d4:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
    rc = hal_spi_disable(inst->spi_num);
   1c5d8:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1c5dc:	f002 fa2e 	bl	1ea3c <hal_spi_disable>
    assert(rc == 0);
   1c5e0:	2800      	cmp	r0, #0
   1c5e2:	d171      	bne.n	1c6c8 <dw1000_configcwmode+0x10c>
    rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1c5e4:	f204 5194 	addw	r1, r4, #1428	; 0x594
   1c5e8:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1c5ec:	f002 f9e4 	bl	1e9b8 <hal_spi_config>
    assert(rc == 0);
   1c5f0:	2800      	cmp	r0, #0
   1c5f2:	d16f      	bne.n	1c6d4 <dw1000_configcwmode+0x118>
    rc = hal_spi_enable(inst->spi_num);
   1c5f4:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1c5f8:	f002 f9fa 	bl	1e9f0 <hal_spi_enable>
    assert(rc == 0);
   1c5fc:	2800      	cmp	r0, #0
   1c5fe:	d16f      	bne.n	1c6e0 <dw1000_configcwmode+0x124>

    /* disable TX/RX RF block sequencing (needed for cw frame mode) */
    dw1000_phy_disable_sequencing(inst);
   1c600:	4620      	mov	r0, r4
   1c602:	f000 f8ee 	bl	1c7e2 <dw1000_phy_disable_sequencing>

    /* config RF pll (for a given channel) */
    /* configure PLL2/RF PLL block CFG */
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
                     fs_pll_cfg[chan_idx[chan]], sizeof(uint32_t));
   1c606:	4b39      	ldr	r3, [pc, #228]	; (1c6ec <dw1000_configcwmode+0x130>)
   1c608:	5d5d      	ldrb	r5, [r3, r5]
   1c60a:	4b39      	ldr	r3, [pc, #228]	; (1c6f0 <dw1000_configcwmode+0x134>)
   1c60c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, FS_CTRL_ID, FS_PLLCFG_OFFSET,
   1c610:	2704      	movs	r7, #4
   1c612:	9702      	str	r7, [sp, #8]
   1c614:	2600      	movs	r6, #0
   1c616:	9300      	str	r3, [sp, #0]
   1c618:	9601      	str	r6, [sp, #4]
   1c61a:	2207      	movs	r2, #7
   1c61c:	212b      	movs	r1, #43	; 0x2b
   1c61e:	4620      	mov	r0, r4
   1c620:	f7fd f9bc 	bl	1999c <dw1000_write_reg>

    /* Configure RF TX blocks (for specified channel and prf) */
    /* Config RF TX control */
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
                     tx_config[chan_idx[chan]], sizeof(uint32_t));
   1c624:	4b33      	ldr	r3, [pc, #204]	; (1c6f4 <dw1000_configcwmode+0x138>)
   1c626:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    dw1000_write_reg(inst, RF_CONF_ID, RF_TXCTRL_OFFSET,
   1c62a:	9702      	str	r7, [sp, #8]
   1c62c:	9300      	str	r3, [sp, #0]
   1c62e:	9601      	str	r6, [sp, #4]
   1c630:	220c      	movs	r2, #12
   1c632:	2128      	movs	r1, #40	; 0x28
   1c634:	4620      	mov	r0, r4
   1c636:	f7fd f9b1 	bl	1999c <dw1000_write_reg>

    /* enable RF PLL */
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   1c63a:	9702      	str	r7, [sp, #8]
   1c63c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   1c640:	2300      	movs	r3, #0
   1c642:	e9cd 2300 	strd	r2, r3, [sp]
   1c646:	4632      	mov	r2, r6
   1c648:	2128      	movs	r1, #40	; 0x28
   1c64a:	4620      	mov	r0, r4
   1c64c:	f7fd f9a6 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   1c650:	9702      	str	r7, [sp, #8]
   1c652:	4a29      	ldr	r2, [pc, #164]	; (1c6f8 <dw1000_configcwmode+0x13c>)
   1c654:	2300      	movs	r3, #0
   1c656:	e9cd 2300 	strd	r2, r3, [sp]
   1c65a:	4632      	mov	r2, r6
   1c65c:	2128      	movs	r1, #40	; 0x28
   1c65e:	4620      	mov	r0, r4
   1c660:	f7fd f99c 	bl	1999c <dw1000_write_reg>

    /* configure TX clocks */
    dw1000_write_reg(inst, PMSC_ID,PMSC_CTRL0_OFFSET, 0x22, 1);
   1c664:	2501      	movs	r5, #1
   1c666:	9502      	str	r5, [sp, #8]
   1c668:	2222      	movs	r2, #34	; 0x22
   1c66a:	2300      	movs	r3, #0
   1c66c:	e9cd 2300 	strd	r2, r3, [sp]
   1c670:	4632      	mov	r2, r6
   1c672:	2136      	movs	r1, #54	; 0x36
   1c674:	4620      	mov	r0, r4
   1c676:	f7fd f991 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, 0x1, 0x07, 1);
   1c67a:	9502      	str	r5, [sp, #8]
   1c67c:	2207      	movs	r2, #7
   1c67e:	2300      	movs	r3, #0
   1c680:	e9cd 2300 	strd	r2, r3, [sp]
   1c684:	462a      	mov	r2, r5
   1c686:	2136      	movs	r1, #54	; 0x36
   1c688:	4620      	mov	r0, r4
   1c68a:	f7fd f987 	bl	1999c <dw1000_write_reg>

    /* disable fine grain TX seq */
    dw1000_write_reg(inst, PMSC_ID, PMSC_TXFINESEQ_OFFSET,
   1c68e:	2302      	movs	r3, #2
   1c690:	9302      	str	r3, [sp, #8]
   1c692:	2200      	movs	r2, #0
   1c694:	2300      	movs	r3, #0
   1c696:	e9cd 2300 	strd	r2, r3, [sp]
   1c69a:	2226      	movs	r2, #38	; 0x26
   1c69c:	2136      	movs	r1, #54	; 0x36
   1c69e:	4620      	mov	r0, r4
   1c6a0:	f7fd f97c 	bl	1999c <dw1000_write_reg>
                     PMSC_TXFINESEQ_DISABLE, sizeof(uint16_t));

    /* configure CW mode */
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGTEST_OFFSET,
   1c6a4:	9502      	str	r5, [sp, #8]
   1c6a6:	2213      	movs	r2, #19
   1c6a8:	2300      	movs	r3, #0
   1c6aa:	e9cd 2300 	strd	r2, r3, [sp]
   1c6ae:	220c      	movs	r2, #12
   1c6b0:	212a      	movs	r1, #42	; 0x2a
   1c6b2:	4620      	mov	r0, r4
   1c6b4:	f7fd f972 	bl	1999c <dw1000_write_reg>
                     TC_PGTEST_CW, TC_PGTEST_LEN);
}
   1c6b8:	b005      	add	sp, #20
   1c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(0);
   1c6bc:	2300      	movs	r3, #0
   1c6be:	461a      	mov	r2, r3
   1c6c0:	4619      	mov	r1, r3
   1c6c2:	4618      	mov	r0, r3
   1c6c4:	f7ec fd7e 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1c6c8:	2300      	movs	r3, #0
   1c6ca:	461a      	mov	r2, r3
   1c6cc:	4619      	mov	r1, r3
   1c6ce:	4618      	mov	r0, r3
   1c6d0:	f7ec fd78 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1c6d4:	2300      	movs	r3, #0
   1c6d6:	461a      	mov	r2, r3
   1c6d8:	4619      	mov	r1, r3
   1c6da:	4618      	mov	r0, r3
   1c6dc:	f7ec fd72 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1c6e0:	2300      	movs	r3, #0
   1c6e2:	461a      	mov	r2, r3
   1c6e4:	4619      	mov	r1, r3
   1c6e6:	4618      	mov	r0, r3
   1c6e8:	f7ec fd6c 	bl	91c4 <__assert_func>
   1c6ec:	0002802c 	.word	0x0002802c
   1c6f0:	0002805c 	.word	0x0002805c
   1c6f4:	000280fc 	.word	0x000280fc
   1c6f8:	005fff00 	.word	0x005fff00

0001c6fc <dw1000_phy_sysclk_XTAL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_XTAL(struct _dw1000_dev_instance_t * inst)
{
   1c6fc:	b510      	push	{r4, lr}
   1c6fe:	b084      	sub	sp, #16
   1c700:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c702:	2301      	movs	r3, #1
   1c704:	2200      	movs	r2, #0
   1c706:	2136      	movs	r1, #54	; 0x36
   1c708:	f7fd f8d8 	bl	198bc <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   1c70c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_19M;
   1c710:	f043 0301 	orr.w	r3, r3, #1
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c714:	2201      	movs	r2, #1
   1c716:	9202      	str	r2, [sp, #8]
   1c718:	2200      	movs	r2, #0
   1c71a:	9300      	str	r3, [sp, #0]
   1c71c:	9201      	str	r2, [sp, #4]
   1c71e:	2136      	movs	r1, #54	; 0x36
   1c720:	4620      	mov	r0, r4
   1c722:	f7fd f93b 	bl	1999c <dw1000_write_reg>
}
   1c726:	b004      	add	sp, #16
   1c728:	bd10      	pop	{r4, pc}

0001c72a <dw1000_phy_sysclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   1c72a:	b510      	push	{r4, lr}
   1c72c:	b084      	sub	sp, #16
   1c72e:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c730:	2301      	movs	r3, #1
   1c732:	2200      	movs	r2, #0
   1c734:	2136      	movs	r1, #54	; 0x36
   1c736:	f7fd f8c1 	bl	198bc <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   1c73a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    reg |= (uint8_t) PMSC_CTRL0_SYSCLKS_125M;
   1c73e:	f043 0302 	orr.w	r3, r3, #2
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c742:	2201      	movs	r2, #1
   1c744:	9202      	str	r2, [sp, #8]
   1c746:	2200      	movs	r2, #0
   1c748:	9300      	str	r3, [sp, #0]
   1c74a:	9201      	str	r2, [sp, #4]
   1c74c:	2136      	movs	r1, #54	; 0x36
   1c74e:	4620      	mov	r0, r4
   1c750:	f7fd f924 	bl	1999c <dw1000_write_reg>
}
   1c754:	b004      	add	sp, #16
   1c756:	bd10      	pop	{r4, pc}

0001c758 <dw1000_phy_txclk_PLL>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_txclk_PLL(struct _dw1000_dev_instance_t * inst)
{
   1c758:	b510      	push	{r4, lr}
   1c75a:	b084      	sub	sp, #16
   1c75c:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c75e:	2301      	movs	r3, #1
   1c760:	2200      	movs	r2, #0
   1c762:	2136      	movs	r1, #54	; 0x36
   1c764:	f7fd f8aa 	bl	198bc <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_TXCLKS_19M & (uint8_t)~PMSC_CTRL0_TXCLKS_125M;
   1c768:	f000 03cf 	and.w	r3, r0, #207	; 0xcf
    reg |= (uint8_t) PMSC_CTRL0_TXCLKS_125M;
   1c76c:	f043 0320 	orr.w	r3, r3, #32
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c770:	2201      	movs	r2, #1
   1c772:	9202      	str	r2, [sp, #8]
   1c774:	2200      	movs	r2, #0
   1c776:	9300      	str	r3, [sp, #0]
   1c778:	9201      	str	r2, [sp, #4]
   1c77a:	2136      	movs	r1, #54	; 0x36
   1c77c:	4620      	mov	r0, r4
   1c77e:	f7fd f90d 	bl	1999c <dw1000_write_reg>
}
   1c782:	b004      	add	sp, #16
   1c784:	bd10      	pop	{r4, pc}

0001c786 <dw1000_phy_sysclk_LDE>:
 * API to enable running of the LDE algorithm.
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_LDE(struct _dw1000_dev_instance_t * inst){
   1c786:	b530      	push	{r4, r5, lr}
   1c788:	b085      	sub	sp, #20
   1c78a:	4604      	mov	r4, r0
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, 0x01, sizeof(uint8_t));
   1c78c:	2501      	movs	r5, #1
   1c78e:	9502      	str	r5, [sp, #8]
   1c790:	2201      	movs	r2, #1
   1c792:	2300      	movs	r3, #0
   1c794:	e9cd 2300 	strd	r2, r3, [sp]
   1c798:	2200      	movs	r2, #0
   1c79a:	2136      	movs	r1, #54	; 0x36
   1c79c:	f7fd f8fe 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET + 1 , 0x03, sizeof(uint8_t));
   1c7a0:	9502      	str	r5, [sp, #8]
   1c7a2:	2203      	movs	r2, #3
   1c7a4:	2300      	movs	r3, #0
   1c7a6:	e9cd 2300 	strd	r2, r3, [sp]
   1c7aa:	462a      	mov	r2, r5
   1c7ac:	2136      	movs	r1, #54	; 0x36
   1c7ae:	4620      	mov	r0, r4
   1c7b0:	f7fd f8f4 	bl	1999c <dw1000_write_reg>
}
   1c7b4:	b005      	add	sp, #20
   1c7b6:	bd30      	pop	{r4, r5, pc}

0001c7b8 <dw1000_phy_sysclk_SEQ>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_sysclk_SEQ(struct _dw1000_dev_instance_t * inst)
{
   1c7b8:	b510      	push	{r4, lr}
   1c7ba:	b084      	sub	sp, #16
   1c7bc:	4604      	mov	r4, r0
    uint8_t reg = (uint8_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint8_t));
   1c7be:	2301      	movs	r3, #1
   1c7c0:	2200      	movs	r2, #0
   1c7c2:	2136      	movs	r1, #54	; 0x36
   1c7c4:	f7fd f87a 	bl	198bc <dw1000_read_reg>
    reg &= (uint8_t)~PMSC_CTRL0_SYSCLKS_19M & (uint8_t)~PMSC_CTRL0_SYSCLKS_125M;
   1c7c8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint8_t));
   1c7cc:	2301      	movs	r3, #1
   1c7ce:	9302      	str	r3, [sp, #8]
   1c7d0:	2200      	movs	r2, #0
   1c7d2:	9000      	str	r0, [sp, #0]
   1c7d4:	9201      	str	r2, [sp, #4]
   1c7d6:	2136      	movs	r1, #54	; 0x36
   1c7d8:	4620      	mov	r0, r4
   1c7da:	f7fd f8df 	bl	1999c <dw1000_write_reg>
}
   1c7de:	b004      	add	sp, #16
   1c7e0:	bd10      	pop	{r4, pc}

0001c7e2 <dw1000_phy_disable_sequencing>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_disable_sequencing(struct _dw1000_dev_instance_t * inst)
{
   1c7e2:	b510      	push	{r4, lr}
   1c7e4:	b084      	sub	sp, #16
   1c7e6:	4604      	mov	r4, r0
    dw1000_phy_sysclk_XTAL(inst);
   1c7e8:	f7ff ff88 	bl	1c6fc <dw1000_phy_sysclk_XTAL>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE, sizeof(uint16_t)); // Disable PMSC ctrl of RF and RX clk blocks
   1c7ec:	2302      	movs	r3, #2
   1c7ee:	9302      	str	r3, [sp, #8]
   1c7f0:	2200      	movs	r2, #0
   1c7f2:	2300      	movs	r3, #0
   1c7f4:	e9cd 2300 	strd	r2, r3, [sp]
   1c7f8:	2204      	movs	r2, #4
   1c7fa:	2136      	movs	r1, #54	; 0x36
   1c7fc:	4620      	mov	r0, r4
   1c7fe:	f7fd f8cd 	bl	1999c <dw1000_write_reg>
}
   1c802:	b004      	add	sp, #16
   1c804:	bd10      	pop	{r4, pc}

0001c806 <dw1000_phy_config_lde>:
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @param prf   This is the PRF index (0 or 1) 0 corresponds to 16 and 1 to 64 PRF.
 * @return void
 */
void dw1000_phy_config_lde(struct _dw1000_dev_instance_t * inst, int prfIndex)
{
   1c806:	b530      	push	{r4, r5, lr}
   1c808:	b085      	sub	sp, #20
   1c80a:	4604      	mov	r4, r0
   1c80c:	460d      	mov	r5, r1
    dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1, sizeof(uint8_t)); // 8-bit configuration register
   1c80e:	2301      	movs	r3, #1
   1c810:	9302      	str	r3, [sp, #8]
   1c812:	226d      	movs	r2, #109	; 0x6d
   1c814:	2300      	movs	r3, #0
   1c816:	e9cd 2300 	strd	r2, r3, [sp]
   1c81a:	f640 0206 	movw	r2, #2054	; 0x806
   1c81e:	212e      	movs	r1, #46	; 0x2e
   1c820:	f7fd f8bc 	bl	1999c <dw1000_write_reg>

    if(prfIndex)
   1c824:	b175      	cbz	r5, 1c844 <dw1000_phy_config_lde+0x3e>
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_64, sizeof(uint16_t)); // 16-bit LDE configuration tuning register
   1c826:	2302      	movs	r3, #2
   1c828:	9302      	str	r3, [sp, #8]
   1c82a:	f240 6207 	movw	r2, #1543	; 0x607
   1c82e:	2300      	movs	r3, #0
   1c830:	e9cd 2300 	strd	r2, r3, [sp]
   1c834:	f641 0206 	movw	r2, #6150	; 0x1806
   1c838:	212e      	movs	r1, #46	; 0x2e
   1c83a:	4620      	mov	r0, r4
   1c83c:	f7fd f8ae 	bl	1999c <dw1000_write_reg>
    else
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
}
   1c840:	b005      	add	sp, #20
   1c842:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, LDE_IF_ID, LDE_CFG2_OFFSET, LDE_PARAM3_16, sizeof(uint16_t));
   1c844:	2302      	movs	r3, #2
   1c846:	9302      	str	r3, [sp, #8]
   1c848:	f241 6207 	movw	r2, #5639	; 0x1607
   1c84c:	2300      	movs	r3, #0
   1c84e:	e9cd 2300 	strd	r2, r3, [sp]
   1c852:	f641 0206 	movw	r2, #6150	; 0x1806
   1c856:	212e      	movs	r1, #46	; 0x2e
   1c858:	4620      	mov	r0, r4
   1c85a:	f7fd f89f 	bl	1999c <dw1000_write_reg>
}
   1c85e:	e7ef      	b.n	1c840 <dw1000_phy_config_lde+0x3a>

0001c860 <dw1000_phy_config_txrf>:
 * @param inst      Pointer to dw1000_dev_instance_t.
 * @param config    Pointer to dw1000_dev_txrf_config_t.
 * @return void
 */
void dw1000_phy_config_txrf(struct _dw1000_dev_instance_t * inst, struct uwb_dev_txrf_config *config)
{
   1c860:	b570      	push	{r4, r5, r6, lr}
   1c862:	b084      	sub	sp, #16
   1c864:	4605      	mov	r5, r0
   1c866:	460c      	mov	r4, r1
    // Configure RF TX PG_DELAY
    dw1000_write_reg(inst, TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly, sizeof(uint8_t));
   1c868:	780b      	ldrb	r3, [r1, #0]
   1c86a:	2201      	movs	r2, #1
   1c86c:	9202      	str	r2, [sp, #8]
   1c86e:	2600      	movs	r6, #0
   1c870:	9300      	str	r3, [sp, #0]
   1c872:	9601      	str	r6, [sp, #4]
   1c874:	220b      	movs	r2, #11
   1c876:	212a      	movs	r1, #42	; 0x2a
   1c878:	f7fd f890 	bl	1999c <dw1000_write_reg>
    // Configure TX power
    dw1000_write_reg(inst, TX_POWER_ID, 0, config->power, sizeof(uint32_t));
   1c87c:	6863      	ldr	r3, [r4, #4]
   1c87e:	2204      	movs	r2, #4
   1c880:	9202      	str	r2, [sp, #8]
   1c882:	9300      	str	r3, [sp, #0]
   1c884:	9601      	str	r6, [sp, #4]
   1c886:	4632      	mov	r2, r6
   1c888:	211e      	movs	r1, #30
   1c88a:	4628      	mov	r0, r5
   1c88c:	f7fd f886 	bl	1999c <dw1000_write_reg>
}
   1c890:	b004      	add	sp, #16
   1c892:	bd70      	pop	{r4, r5, r6, pc}

0001c894 <dw1000_phy_init>:
{
   1c894:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c896:	b085      	sub	sp, #20
   1c898:	4604      	mov	r4, r0
    if (txrf_config == NULL)
   1c89a:	2900      	cmp	r1, #0
   1c89c:	f000 80af 	beq.w	1c9fe <dw1000_phy_init+0x16a>
   1c8a0:	460e      	mov	r6, r1
        memcpy(&inst->uwb_dev.config.txrf, txrf_config, sizeof(struct uwb_dev_txrf_config));
   1c8a2:	680a      	ldr	r2, [r1, #0]
   1c8a4:	684b      	ldr	r3, [r1, #4]
   1c8a6:	f8c0 2524 	str.w	r2, [r0, #1316]	; 0x524
   1c8aa:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    dw1000_softreset(inst);
   1c8ae:	4620      	mov	r0, r4
   1c8b0:	f7fd f913 	bl	19ada <dw1000_softreset>
    dw1000_phy_sysclk_XTAL(inst);
   1c8b4:	4620      	mov	r0, r4
   1c8b6:	f7ff ff21 	bl	1c6fc <dw1000_phy_sysclk_XTAL>
    dw1000_gpio_config_leds(inst, DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
   1c8ba:	2106      	movs	r1, #6
   1c8bc:	4620      	mov	r0, r4
   1c8be:	f001 fb7f 	bl	1dfc0 <dw1000_gpio_config_leds>
    reg = dw1000_read_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, sizeof(uint8_t));
   1c8c2:	2301      	movs	r3, #1
   1c8c4:	2200      	movs	r2, #0
   1c8c6:	2124      	movs	r1, #36	; 0x24
   1c8c8:	4620      	mov	r0, r4
   1c8ca:	f7fc fff7 	bl	198bc <dw1000_read_reg>
   1c8ce:	b2c0      	uxtb	r0, r0
    reg |= EC_CTRL_PLLLCK;
   1c8d0:	f040 0004 	orr.w	r0, r0, #4
    dw1000_write_reg(inst, EXT_SYNC_ID, EC_CTRL_OFFSET, reg, sizeof(uint8_t));
   1c8d4:	2301      	movs	r3, #1
   1c8d6:	9302      	str	r3, [sp, #8]
   1c8d8:	2200      	movs	r2, #0
   1c8da:	9000      	str	r0, [sp, #0]
   1c8dc:	9201      	str	r2, [sp, #4]
   1c8de:	2124      	movs	r1, #36	; 0x24
   1c8e0:	4620      	mov	r0, r4
   1c8e2:	f7fd f85b 	bl	1999c <dw1000_write_reg>
    otp_addr = (uint32_t) _dw1000_otp_read(inst, OTP_XTRIM_ADDRESS) & 0xffff;    // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
   1c8e6:	211e      	movs	r1, #30
   1c8e8:	4620      	mov	r0, r4
   1c8ea:	f001 fbd2 	bl	1e092 <_dw1000_otp_read>
   1c8ee:	b285      	uxth	r5, r0
    inst->otp_rev = (otp_addr >> 8) & 0xff;                                               // OTP revision is next byte
   1c8f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
   1c8f4:	f8a4 057c 	strh.w	r0, [r4, #1404]	; 0x57c
    ldo_tune = _dw1000_otp_read(inst, OTP_LDOTUNE_ADDRESS);
   1c8f8:	2104      	movs	r1, #4
   1c8fa:	4620      	mov	r0, r4
   1c8fc:	f001 fbc9 	bl	1e092 <_dw1000_otp_read>
    if((ldo_tune & 0xFF) != 0){
   1c900:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c904:	d17e      	bne.n	1ca04 <dw1000_phy_init+0x170>
    inst->part_id = _dw1000_otp_read(inst, OTP_PARTID_ADDRESS);
   1c906:	2106      	movs	r1, #6
   1c908:	4620      	mov	r0, r4
   1c90a:	f001 fbc2 	bl	1e092 <_dw1000_otp_read>
   1c90e:	f8c4 0574 	str.w	r0, [r4, #1396]	; 0x574
    inst->lot_id = _dw1000_otp_read(inst, OTP_LOTID_ADDRESS);
   1c912:	2107      	movs	r1, #7
   1c914:	4620      	mov	r0, r4
   1c916:	f001 fbbc 	bl	1e092 <_dw1000_otp_read>
   1c91a:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
    inst->otp_vbat = _dw1000_otp_read(inst, OTP_VBAT_ADDRESS);
   1c91e:	2108      	movs	r1, #8
   1c920:	4620      	mov	r0, r4
   1c922:	f001 fbb6 	bl	1e092 <_dw1000_otp_read>
   1c926:	f884 057e 	strb.w	r0, [r4, #1406]	; 0x57e
    inst->otp_temp = _dw1000_otp_read(inst, OTP_VTEMP_ADDRESS);
   1c92a:	2109      	movs	r1, #9
   1c92c:	4620      	mov	r0, r4
   1c92e:	f001 fbb0 	bl	1e092 <_dw1000_otp_read>
   1c932:	f884 057f 	strb.w	r0, [r4, #1407]	; 0x57f
    inst->otp_xtal_trim = otp_addr & 0x1F;
   1c936:	f005 051f 	and.w	r5, r5, #31
   1c93a:	f884 5580 	strb.w	r5, [r4, #1408]	; 0x580
    if (inst->otp_xtal_trim && (inst->uwb_dev.config.rx.xtalTrim == 0xff)) {
   1c93e:	b11d      	cbz	r5, 1c948 <dw1000_phy_init+0xb4>
   1c940:	f894 251e 	ldrb.w	r2, [r4, #1310]	; 0x51e
   1c944:	2aff      	cmp	r2, #255	; 0xff
   1c946:	d06f      	beq.n	1ca28 <dw1000_phy_init+0x194>
    reg = (3 << 5) | (inst->uwb_dev.config.rx.xtalTrim & FS_XTALT_MASK);
   1c948:	f994 351e 	ldrsb.w	r3, [r4, #1310]	; 0x51e
   1c94c:	f003 031f 	and.w	r3, r3, #31
   1c950:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    dw1000_write_reg(inst, FS_CTRL_ID, FS_XTALT_OFFSET, reg, sizeof(uint8_t));
   1c954:	2201      	movs	r2, #1
   1c956:	9202      	str	r2, [sp, #8]
   1c958:	9300      	str	r3, [sp, #0]
   1c95a:	2300      	movs	r3, #0
   1c95c:	9301      	str	r3, [sp, #4]
   1c95e:	220e      	movs	r2, #14
   1c960:	212b      	movs	r1, #43	; 0x2b
   1c962:	4620      	mov	r0, r4
   1c964:	f7fd f81a 	bl	1999c <dw1000_write_reg>
    if(inst->uwb_dev.config.LDE_enable)
   1c968:	f894 352d 	ldrb.w	r3, [r4, #1325]	; 0x52d
   1c96c:	f013 0f04 	tst.w	r3, #4
   1c970:	d15d      	bne.n	1ca2e <dw1000_phy_init+0x19a>
    dw1000_phy_sysclk_SEQ(inst);    // Enable clocks for sequencing
   1c972:	4620      	mov	r0, r4
   1c974:	f7ff ff20 	bl	1c7b8 <dw1000_phy_sysclk_SEQ>
    reg = dw1000_read_reg(inst, AON_ID, AON_CFG1_OFFSET, sizeof(uint8_t));
   1c978:	2301      	movs	r3, #1
   1c97a:	220a      	movs	r2, #10
   1c97c:	212c      	movs	r1, #44	; 0x2c
   1c97e:	4620      	mov	r0, r4
   1c980:	f7fc ff9c 	bl	198bc <dw1000_read_reg>
    reg |= ~AON_CFG1_SMXX;
   1c984:	f060 0002 	orn	r0, r0, #2
   1c988:	b2c0      	uxtb	r0, r0
    dw1000_write_reg(inst, AON_ID, AON_CFG1_OFFSET, reg, sizeof(uint8_t));
   1c98a:	2301      	movs	r3, #1
   1c98c:	9302      	str	r3, [sp, #8]
   1c98e:	2500      	movs	r5, #0
   1c990:	9000      	str	r0, [sp, #0]
   1c992:	9501      	str	r5, [sp, #4]
   1c994:	220a      	movs	r2, #10
   1c996:	212c      	movs	r1, #44	; 0x2c
   1c998:	4620      	mov	r0, r4
   1c99a:	f7fc ffff 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, AON_ID, AON_WCFG_OFFSET , AON_WCFG_ONW_RADC, sizeof(uint16_t));
   1c99e:	2702      	movs	r7, #2
   1c9a0:	9702      	str	r7, [sp, #8]
   1c9a2:	2201      	movs	r2, #1
   1c9a4:	2300      	movs	r3, #0
   1c9a6:	e9cd 2300 	strd	r2, r3, [sp]
   1c9aa:	462a      	mov	r2, r5
   1c9ac:	212c      	movs	r1, #44	; 0x2c
   1c9ae:	4620      	mov	r0, r4
   1c9b0:	f7fc fff4 	bl	1999c <dw1000_write_reg>
    dw1000_phy_set_rx_antennadelay(inst, inst->uwb_dev.rx_antenna_delay);
   1c9b4:	f8b4 34cc 	ldrh.w	r3, [r4, #1228]	; 0x4cc
   1c9b8:	9702      	str	r7, [sp, #8]
   1c9ba:	9300      	str	r3, [sp, #0]
   1c9bc:	9501      	str	r5, [sp, #4]
   1c9be:	f641 0204 	movw	r2, #6148	; 0x1804
   1c9c2:	212e      	movs	r1, #46	; 0x2e
   1c9c4:	4620      	mov	r0, r4
   1c9c6:	f7fc ffe9 	bl	1999c <dw1000_write_reg>
    dw1000_phy_set_tx_antennadelay(inst, inst->uwb_dev.tx_antenna_delay);
   1c9ca:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
   1c9ce:	9702      	str	r7, [sp, #8]
   1c9d0:	9300      	str	r3, [sp, #0]
   1c9d2:	9501      	str	r5, [sp, #4]
   1c9d4:	462a      	mov	r2, r5
   1c9d6:	2118      	movs	r1, #24
   1c9d8:	4620      	mov	r0, r4
   1c9da:	f7fc ffdf 	bl	1999c <dw1000_write_reg>
    dw1000_phy_config_txrf(inst, txrf_config);
   1c9de:	4631      	mov	r1, r6
   1c9e0:	4620      	mov	r0, r4
   1c9e2:	f7ff ff3d 	bl	1c860 <dw1000_phy_config_txrf>
    inst->sys_cfg_reg = dw1000_read_reg(inst, SYS_CFG_ID, 0, sizeof(uint32_t)) ; // Read sysconfig register
   1c9e6:	2304      	movs	r3, #4
   1c9e8:	462a      	mov	r2, r5
   1c9ea:	4619      	mov	r1, r3
   1c9ec:	4620      	mov	r0, r4
   1c9ee:	f7fc ff65 	bl	198bc <dw1000_read_reg>
   1c9f2:	f8c4 0584 	str.w	r0, [r4, #1412]	; 0x584
}
   1c9f6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1c9fa:	b005      	add	sp, #20
   1c9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txrf_config = &inst->uwb_dev.config.txrf;
   1c9fe:	f200 5624 	addw	r6, r0, #1316	; 0x524
   1ca02:	e754      	b.n	1c8ae <dw1000_phy_init+0x1a>
        dw1000_write_reg(inst, OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK, sizeof(uint8_t)); // Set load LDE kick bit
   1ca04:	2301      	movs	r3, #1
   1ca06:	9302      	str	r3, [sp, #8]
   1ca08:	2202      	movs	r2, #2
   1ca0a:	2300      	movs	r3, #0
   1ca0c:	e9cd 2300 	strd	r2, r3, [sp]
   1ca10:	2212      	movs	r2, #18
   1ca12:	212d      	movs	r1, #45	; 0x2d
   1ca14:	4620      	mov	r0, r4
   1ca16:	f7fc ffc1 	bl	1999c <dw1000_write_reg>
        inst->uwb_dev.status.LDO_enabled = 1; // LDO tune must be kicked at wake-up
   1ca1a:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1ca1e:	f043 0320 	orr.w	r3, r3, #32
   1ca22:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
   1ca26:	e76e      	b.n	1c906 <dw1000_phy_init+0x72>
        inst->uwb_dev.config.rx.xtalTrim = inst->otp_xtal_trim;
   1ca28:	f884 551e 	strb.w	r5, [r4, #1310]	; 0x51e
   1ca2c:	e78c      	b.n	1c948 <dw1000_phy_init+0xb4>
    dw1000_phy_sysclk_LDE(inst);
   1ca2e:	4620      	mov	r0, r4
   1ca30:	f7ff fea9 	bl	1c786 <dw1000_phy_sysclk_LDE>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD, sizeof(uint16_t)); // Set load LDE kick bit
   1ca34:	2302      	movs	r3, #2
   1ca36:	9302      	str	r3, [sp, #8]
   1ca38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	e9cd 2300 	strd	r2, r3, [sp]
   1ca42:	2206      	movs	r2, #6
   1ca44:	212d      	movs	r1, #45	; 0x2d
   1ca46:	4620      	mov	r0, r4
   1ca48:	f7fc ffa8 	bl	1999c <dw1000_write_reg>
    dpl_cputime_delay_usecs(120); // Allow time for code to upload (should take up to 120 us)
   1ca4c:	2078      	movs	r0, #120	; 0x78
   1ca4e:	f7f5 ff4c 	bl	128ea <dpl_cputime_delay_usecs>
    dw1000_phy_sysclk_SEQ(inst); // Enable clocks for sequencing
   1ca52:	4620      	mov	r0, r4
   1ca54:	f7ff feb0 	bl	1c7b8 <dw1000_phy_sysclk_SEQ>
    inst->uwb_dev.status.LDE_enabled = 1;
   1ca58:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   1ca5c:	f043 0310 	orr.w	r3, r3, #16
   1ca60:	f884 3509 	strb.w	r3, [r4, #1289]	; 0x509
}
   1ca64:	e785      	b.n	1c972 <dw1000_phy_init+0xde>

0001ca66 <dw1000_phy_rx_reset>:
 *
 * @param inst   Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_rx_reset(struct _dw1000_dev_instance_t * inst)
{
   1ca66:	b570      	push	{r4, r5, r6, lr}
   1ca68:	b084      	sub	sp, #16
   1ca6a:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1ca6c:	f500 65ad 	add.w	r5, r0, #1384	; 0x568
   1ca70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ca74:	4628      	mov	r0, r5
   1ca76:	f7ee f94b 	bl	ad10 <os_mutex_pend>
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1ca7a:	b138      	cbz	r0, 1ca8c <dw1000_phy_rx_reset+0x26>
        inst->uwb_dev.status.mtx_error = 1;
   1ca7c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1ca80:	f043 0308 	orr.w	r3, r3, #8
   1ca84:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Clear RX reset
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));

    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
}
   1ca88:	b004      	add	sp, #16
   1ca8a:	bd70      	pop	{r4, r5, r6, pc}
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX, sizeof(uint8_t));
   1ca8c:	2601      	movs	r6, #1
   1ca8e:	9602      	str	r6, [sp, #8]
   1ca90:	22e0      	movs	r2, #224	; 0xe0
   1ca92:	2300      	movs	r3, #0
   1ca94:	e9cd 2300 	strd	r2, r3, [sp]
   1ca98:	2203      	movs	r2, #3
   1ca9a:	2136      	movs	r1, #54	; 0x36
   1ca9c:	4620      	mov	r0, r4
   1ca9e:	f7fc ff7d 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR, sizeof(uint8_t));
   1caa2:	9602      	str	r6, [sp, #8]
   1caa4:	22f0      	movs	r2, #240	; 0xf0
   1caa6:	2300      	movs	r3, #0
   1caa8:	e9cd 2300 	strd	r2, r3, [sp]
   1caac:	2203      	movs	r2, #3
   1caae:	2136      	movs	r1, #54	; 0x36
   1cab0:	4620      	mov	r0, r4
   1cab2:	f7fc ff73 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1cab6:	4628      	mov	r0, r5
   1cab8:	f7ee f8ce 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1cabc:	2800      	cmp	r0, #0
   1cabe:	d0e3      	beq.n	1ca88 <dw1000_phy_rx_reset+0x22>
   1cac0:	2300      	movs	r3, #0
   1cac2:	461a      	mov	r2, r3
   1cac4:	4619      	mov	r1, r3
   1cac6:	4618      	mov	r0, r3
   1cac8:	f7ec fb7c 	bl	91c4 <__assert_func>
   1cacc:	0000      	movs	r0, r0
	...

0001cad0 <dw1000_phy_forcetrxoff>:
 *
 * @param inst  Pointer to dw1000_dev_instance_t.
 * @return void
 */
void dw1000_phy_forcetrxoff(struct _dw1000_dev_instance_t * inst)
{
   1cad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cad2:	b085      	sub	sp, #20
   1cad4:	4605      	mov	r5, r0
    dpl_error_t err;
    struct uwb_mac_interface * cbs = NULL;
    uint32_t mask = dw1000_read_reg(inst, SYS_MASK_ID, 0 , sizeof(uint32_t)) ; // Read set interrupt mask
   1cad6:	2304      	movs	r3, #4
   1cad8:	2200      	movs	r2, #0
   1cada:	210e      	movs	r1, #14
   1cadc:	f7fc feee 	bl	198bc <dw1000_read_reg>
   1cae0:	4604      	mov	r4, r0
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1cae2:	f505 66ad 	add.w	r6, r5, #1384	; 0x568
   1cae6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1caea:	4630      	mov	r0, r6
   1caec:	f7ee f910 	bl	ad10 <os_mutex_pend>
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation

    err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1caf0:	b138      	cbz	r0, 1cb02 <dw1000_phy_forcetrxoff+0x32>
        inst->uwb_dev.status.mtx_error = 1;
   1caf2:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   1caf6:	f043 0308 	orr.w	r3, r3, #8
   1cafa:	f885 350b 	strb.w	r3, [r5, #1291]	; 0x50b
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
        err = dpl_sem_release(&inst->tx_sem);
        assert(err == DPL_OK);
        inst->uwb_dev.status.sem_force_released = 1;
    }
}
   1cafe:	b005      	add	sp, #20
   1cb00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t)) ; // Clear interrupt mask - so we don't get any unwanted events
   1cb02:	2704      	movs	r7, #4
   1cb04:	9702      	str	r7, [sp, #8]
   1cb06:	2200      	movs	r2, #0
   1cb08:	2300      	movs	r3, #0
   1cb0a:	e9cd 2300 	strd	r2, r3, [sp]
   1cb0e:	210e      	movs	r1, #14
   1cb10:	4628      	mov	r0, r5
   1cb12:	f7fc ff43 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t)) ; // Disable the radio
   1cb16:	2301      	movs	r3, #1
   1cb18:	9302      	str	r3, [sp, #8]
   1cb1a:	2240      	movs	r2, #64	; 0x40
   1cb1c:	2300      	movs	r3, #0
   1cb1e:	e9cd 2300 	strd	r2, r3, [sp]
   1cb22:	2200      	movs	r2, #0
   1cb24:	210d      	movs	r1, #13
   1cb26:	4628      	mov	r0, r5
   1cb28:	f7fc ff38 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, SYS_STATUS_ID, 0, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD| SYS_STATUS_TXBERR), sizeof(uint32_t));
   1cb2c:	9702      	str	r7, [sp, #8]
   1cb2e:	a32e      	add	r3, pc, #184	; (adr r3, 1cbe8 <dw1000_phy_forcetrxoff+0x118>)
   1cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cb34:	e9cd 2300 	strd	r2, r3, [sp]
   1cb38:	2200      	movs	r2, #0
   1cb3a:	210f      	movs	r1, #15
   1cb3c:	4628      	mov	r0, r5
   1cb3e:	f7fc ff2d 	bl	1999c <dw1000_write_reg>
    if (inst->uwb_dev.config.dblbuffon_enabled)
   1cb42:	f895 352c 	ldrb.w	r3, [r5, #1324]	; 0x52c
   1cb46:	f013 0f10 	tst.w	r3, #16
   1cb4a:	d130      	bne.n	1cbae <dw1000_phy_forcetrxoff+0xde>
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t)); // Restore mask to what it was
   1cb4c:	2304      	movs	r3, #4
   1cb4e:	9302      	str	r3, [sp, #8]
   1cb50:	2200      	movs	r2, #0
   1cb52:	9400      	str	r4, [sp, #0]
   1cb54:	9201      	str	r2, [sp, #4]
   1cb56:	210e      	movs	r1, #14
   1cb58:	4628      	mov	r0, r5
   1cb5a:	f7fc ff1f 	bl	1999c <dw1000_write_reg>
    if(!(SLIST_EMPTY(&inst->uwb_dev.interface_cbs))){
   1cb5e:	f8d5 4530 	ldr.w	r4, [r5, #1328]	; 0x530
   1cb62:	bb64      	cbnz	r4, 1cbbe <dw1000_phy_forcetrxoff+0xee>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1cb64:	4630      	mov	r0, r6
   1cb66:	f7ee f877 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1cb6a:	bb70      	cbnz	r0, 1cbca <dw1000_phy_forcetrxoff+0xfa>
    inst->control.wait4resp_enabled = 0;
   1cb6c:	f895 35b0 	ldrb.w	r3, [r5, #1456]	; 0x5b0
   1cb70:	f36f 0300 	bfc	r3, #0, #1
   1cb74:	f885 35b0 	strb.w	r3, [r5, #1456]	; 0x5b0
    inst->control.rxauto_disable = false;
   1cb78:	f895 35b1 	ldrb.w	r3, [r5, #1457]	; 0x5b1
   1cb7c:	f36f 0382 	bfc	r3, #2, #1
   1cb80:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
    inst->control.abs_timeout = false;
   1cb84:	b2db      	uxtb	r3, r3
   1cb86:	f36f 03c3 	bfc	r3, #3, #1
   1cb8a:	f885 35b1 	strb.w	r3, [r5, #1457]	; 0x5b1
   1cb8e:	f8b5 3566 	ldrh.w	r3, [r5, #1382]	; 0x566
    if (dpl_sem_get_count(&inst->tx_sem) == 0) {
   1cb92:	2b00      	cmp	r3, #0
   1cb94:	d1b3      	bne.n	1cafe <dw1000_phy_forcetrxoff+0x2e>
    return (dpl_error_t)os_sem_release(&sem->sem);
   1cb96:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
   1cb9a:	f7ed fa67 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   1cb9e:	b9d0      	cbnz	r0, 1cbd6 <dw1000_phy_forcetrxoff+0x106>
        inst->uwb_dev.status.sem_force_released = 1;
   1cba0:	f895 350a 	ldrb.w	r3, [r5, #1290]	; 0x50a
   1cba4:	f043 0302 	orr.w	r3, r3, #2
   1cba8:	f885 350a 	strb.w	r3, [r5, #1290]	; 0x50a
   1cbac:	e7a7      	b.n	1cafe <dw1000_phy_forcetrxoff+0x2e>
        dw1000_sync_rxbufptrs(inst);
   1cbae:	4628      	mov	r0, r5
   1cbb0:	f7fe fa3b 	bl	1b02a <dw1000_sync_rxbufptrs>
   1cbb4:	e7ca      	b.n	1cb4c <dw1000_phy_forcetrxoff+0x7c>
                if(cbs->reset_cb((struct uwb_dev*)inst, cbs)) continue;
   1cbb6:	4621      	mov	r1, r4
   1cbb8:	4628      	mov	r0, r5
   1cbba:	4798      	blx	r3
        SLIST_FOREACH(cbs, &inst->uwb_dev.interface_cbs, next){
   1cbbc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1cbbe:	2c00      	cmp	r4, #0
   1cbc0:	d0d0      	beq.n	1cb64 <dw1000_phy_forcetrxoff+0x94>
            if (cbs!=NULL && cbs->reset_cb)
   1cbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d1f6      	bne.n	1cbb6 <dw1000_phy_forcetrxoff+0xe6>
   1cbc8:	e7f8      	b.n	1cbbc <dw1000_phy_forcetrxoff+0xec>
    assert(err == DPL_OK);
   1cbca:	2300      	movs	r3, #0
   1cbcc:	461a      	mov	r2, r3
   1cbce:	4619      	mov	r1, r3
   1cbd0:	4618      	mov	r0, r3
   1cbd2:	f7ec faf7 	bl	91c4 <__assert_func>
        assert(err == DPL_OK);
   1cbd6:	2300      	movs	r3, #0
   1cbd8:	461a      	mov	r2, r3
   1cbda:	4619      	mov	r1, r3
   1cbdc:	4618      	mov	r0, r3
   1cbde:	f7ec faf1 	bl	91c4 <__assert_func>
   1cbe2:	bf00      	nop
   1cbe4:	f3af 8000 	nop.w
   1cbe8:	3433fbf8 	.word	0x3433fbf8
   1cbec:	00000000 	.word	0x00000000

0001cbf0 <dw1000_phy_interrupt_mask>:
 * @param bitmask   Sets the events which generates interrupt.
 * @param enable    If set, the interrupts are enabled else they are cleared.
 * @return void
 */
void dw1000_phy_interrupt_mask(struct _dw1000_dev_instance_t * inst, uint32_t bitmask, uint8_t enable)
{
   1cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbf2:	b085      	sub	sp, #20
   1cbf4:	4604      	mov	r4, r0
   1cbf6:	460d      	mov	r5, r1
   1cbf8:	4616      	mov	r6, r2
    return (dpl_error_t)os_mutex_pend(&mu->mu, timeout);
   1cbfa:	f500 67ad 	add.w	r7, r0, #1384	; 0x568
   1cbfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cc02:	4638      	mov	r0, r7
   1cc04:	f7ee f884 	bl	ad10 <os_mutex_pend>
    // Critical region, atomic lock with mutex
    uint32_t mask;
    dpl_error_t err = dpl_mutex_pend(&inst->mutex, DPL_WAIT_FOREVER);
    if (err != DPL_OK) {
   1cc08:	b138      	cbz	r0, 1cc1a <dw1000_phy_interrupt_mask+0x2a>
        inst->uwb_dev.status.mtx_error = 1;
   1cc0a:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
   1cc0e:	f043 0308 	orr.w	r3, r3, #8
   1cc12:	f884 350b 	strb.w	r3, [r4, #1291]	; 0x50b
    // Critical region, unlock mutex
    err = dpl_mutex_release(&inst->mutex);
    assert(err == DPL_OK);
mtx_error:
    return;
}
   1cc16:	b005      	add	sp, #20
   1cc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mask = dw1000_read_reg(inst, SYS_MASK_ID, 0, sizeof(uint32_t)) ; // Read register
   1cc1a:	2304      	movs	r3, #4
   1cc1c:	2200      	movs	r2, #0
   1cc1e:	210e      	movs	r1, #14
   1cc20:	4620      	mov	r0, r4
   1cc22:	f7fc fe4b 	bl	198bc <dw1000_read_reg>
    if(enable)
   1cc26:	b1a6      	cbz	r6, 1cc52 <dw1000_phy_interrupt_mask+0x62>
        mask |= bitmask ;
   1cc28:	4328      	orrs	r0, r5
    dw1000_write_reg(inst, SYS_MASK_ID, 0, mask, sizeof(uint32_t));
   1cc2a:	2304      	movs	r3, #4
   1cc2c:	9302      	str	r3, [sp, #8]
   1cc2e:	2200      	movs	r2, #0
   1cc30:	9000      	str	r0, [sp, #0]
   1cc32:	9201      	str	r2, [sp, #4]
   1cc34:	210e      	movs	r1, #14
   1cc36:	4620      	mov	r0, r4
   1cc38:	f7fc feb0 	bl	1999c <dw1000_write_reg>
    return (dpl_error_t)os_mutex_release(&mu->mu);
   1cc3c:	4638      	mov	r0, r7
   1cc3e:	f7ee f80b 	bl	ac58 <os_mutex_release>
    assert(err == DPL_OK);
   1cc42:	2800      	cmp	r0, #0
   1cc44:	d0e7      	beq.n	1cc16 <dw1000_phy_interrupt_mask+0x26>
   1cc46:	2300      	movs	r3, #0
   1cc48:	461a      	mov	r2, r3
   1cc4a:	4619      	mov	r1, r3
   1cc4c:	4618      	mov	r0, r3
   1cc4e:	f7ec fab9 	bl	91c4 <__assert_func>
        mask &= ~bitmask ; // Clear the bit
   1cc52:	ea20 0005 	bic.w	r0, r0, r5
   1cc56:	e7e8      	b.n	1cc2a <dw1000_phy_interrupt_mask+0x3a>

0001cc58 <dw1000_phy_repeated_frames>:
 * @param rate     Rate at which frames with be repeated in dtu, set to 0 to disable
 * @return void
 */
void
dw1000_phy_repeated_frames(struct _dw1000_dev_instance_t * inst, uint64_t rate)
{
   1cc58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc5a:	b085      	sub	sp, #20
   1cc5c:	4604      	mov	r4, r0
   1cc5e:	461d      	mov	r5, r3
    int rc;

    if (!rate) {
   1cc60:	ea52 0305 	orrs.w	r3, r2, r5
   1cc64:	d114      	bne.n	1cc90 <dw1000_phy_repeated_frames+0x38>
        /* Stop sending packets */
        dw1000_write_reg(inst, RF_CONF_ID, 0, 0, sizeof(uint32_t));
   1cc66:	2304      	movs	r3, #4
   1cc68:	9302      	str	r3, [sp, #8]
   1cc6a:	2600      	movs	r6, #0
   1cc6c:	2700      	movs	r7, #0
   1cc6e:	e9cd 6700 	strd	r6, r7, [sp]
   1cc72:	2200      	movs	r2, #0
   1cc74:	2128      	movs	r1, #40	; 0x28
   1cc76:	f7fc fe91 	bl	1999c <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET, 0, sizeof(uint8_t));
   1cc7a:	2301      	movs	r3, #1
   1cc7c:	9302      	str	r3, [sp, #8]
   1cc7e:	e9cd 6700 	strd	r6, r7, [sp]
   1cc82:	2224      	movs	r2, #36	; 0x24
   1cc84:	212f      	movs	r1, #47	; 0x2f
   1cc86:	4620      	mov	r0, r4
   1cc88:	f7fc fe88 	bl	1999c <dw1000_write_reg>
                         (uint8_t)(DIAG_TMC_TX_PSTM), sizeof(uint8_t));

        /* Trigger first frame - Needed?? */
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
    }
}
   1cc8c:	b005      	add	sp, #20
   1cc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cc90:	4616      	mov	r6, r2
        inst->spi_settings.baudrate = inst->spi_baudrate_low;
   1cc92:	f8d0 3558 	ldr.w	r3, [r0, #1368]	; 0x558
   1cc96:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
        rc = hal_spi_disable(inst->spi_num);
   1cc9a:	f890 055c 	ldrb.w	r0, [r0, #1372]	; 0x55c
   1cc9e:	f001 fecd 	bl	1ea3c <hal_spi_disable>
        assert(rc == 0);
   1cca2:	2800      	cmp	r0, #0
   1cca4:	d16e      	bne.n	1cd84 <dw1000_phy_repeated_frames+0x12c>
        rc = hal_spi_config(inst->spi_num, &inst->spi_settings);
   1cca6:	f204 5194 	addw	r1, r4, #1428	; 0x594
   1ccaa:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1ccae:	f001 fe83 	bl	1e9b8 <hal_spi_config>
        assert(rc == 0);
   1ccb2:	2800      	cmp	r0, #0
   1ccb4:	d16c      	bne.n	1cd90 <dw1000_phy_repeated_frames+0x138>
        rc = hal_spi_enable(inst->spi_num);
   1ccb6:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
   1ccba:	f001 fe99 	bl	1e9f0 <hal_spi_enable>
        assert(rc == 0);
   1ccbe:	2800      	cmp	r0, #0
   1ccc0:	d16c      	bne.n	1cd9c <dw1000_phy_repeated_frames+0x144>
        printf("PMSC_ID[0]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t)));
   1ccc2:	2304      	movs	r3, #4
   1ccc4:	2200      	movs	r2, #0
   1ccc6:	2136      	movs	r1, #54	; 0x36
   1ccc8:	4620      	mov	r0, r4
   1ccca:	f7fc fdf7 	bl	198bc <dw1000_read_reg>
   1ccce:	4601      	mov	r1, r0
   1ccd0:	4835      	ldr	r0, [pc, #212]	; (1cda8 <dw1000_phy_repeated_frames+0x150>)
   1ccd2:	f7f4 f8eb 	bl	10eac <printf>
        printf("PMSC_ID[1]: %"PRIx32"\n", (uint32_t)dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL1_OFFSET, sizeof(uint32_t)));
   1ccd6:	2304      	movs	r3, #4
   1ccd8:	461a      	mov	r2, r3
   1ccda:	2136      	movs	r1, #54	; 0x36
   1ccdc:	4620      	mov	r0, r4
   1ccde:	f7fc fded 	bl	198bc <dw1000_read_reg>
   1cce2:	4601      	mov	r1, r0
   1cce4:	4831      	ldr	r0, [pc, #196]	; (1cdac <dw1000_phy_repeated_frames+0x154>)
   1cce6:	f7f4 f8e1 	bl	10eac <printf>
        dw1000_phy_disable_sequencing(inst);
   1ccea:	4620      	mov	r0, r4
   1ccec:	f7ff fd79 	bl	1c7e2 <dw1000_phy_disable_sequencing>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXPLLPOWEN_MASK, sizeof(uint32_t));
   1ccf0:	2704      	movs	r7, #4
   1ccf2:	9702      	str	r7, [sp, #8]
   1ccf4:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
   1ccf8:	2300      	movs	r3, #0
   1ccfa:	e9cd 2300 	strd	r2, r3, [sp]
   1ccfe:	2200      	movs	r2, #0
   1cd00:	2128      	movs	r1, #40	; 0x28
   1cd02:	4620      	mov	r0, r4
   1cd04:	f7fc fe4a 	bl	1999c <dw1000_write_reg>
        dw1000_write_reg(inst, RF_CONF_ID, 0, RF_CONF_TXALLEN_MASK, sizeof(uint32_t));
   1cd08:	9702      	str	r7, [sp, #8]
   1cd0a:	4a29      	ldr	r2, [pc, #164]	; (1cdb0 <dw1000_phy_repeated_frames+0x158>)
   1cd0c:	2300      	movs	r3, #0
   1cd0e:	e9cd 2300 	strd	r2, r3, [sp]
   1cd12:	2200      	movs	r2, #0
   1cd14:	2128      	movs	r1, #40	; 0x28
   1cd16:	4620      	mov	r0, r4
   1cd18:	f7fc fe40 	bl	1999c <dw1000_write_reg>
        dw1000_phy_sysclk_PLL(inst);
   1cd1c:	4620      	mov	r0, r4
   1cd1e:	f7ff fd04 	bl	1c72a <dw1000_phy_sysclk_PLL>
        dw1000_phy_txclk_PLL(inst);
   1cd22:	4620      	mov	r0, r4
   1cd24:	f7ff fd18 	bl	1c758 <dw1000_phy_txclk_PLL>
        if ((rate>>8) < 4) {
   1cd28:	0a32      	lsrs	r2, r6, #8
   1cd2a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1cd2e:	0a2b      	lsrs	r3, r5, #8
   1cd30:	42ba      	cmp	r2, r7
   1cd32:	f173 0300 	sbcs.w	r3, r3, #0
   1cd36:	d202      	bcs.n	1cd3e <dw1000_phy_repeated_frames+0xe6>
            rate = ((uint64_t)4<<8);
   1cd38:	f44f 6680 	mov.w	r6, #1024	; 0x400
   1cd3c:	2500      	movs	r5, #0
        dw1000_write_reg(inst, DX_TIME_ID, 0, rate>>8, sizeof(uint32_t));
   1cd3e:	2304      	movs	r3, #4
   1cd40:	9302      	str	r3, [sp, #8]
   1cd42:	0a36      	lsrs	r6, r6, #8
   1cd44:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
   1cd48:	0a2d      	lsrs	r5, r5, #8
   1cd4a:	9600      	str	r6, [sp, #0]
   1cd4c:	9501      	str	r5, [sp, #4]
   1cd4e:	2200      	movs	r2, #0
   1cd50:	210a      	movs	r1, #10
   1cd52:	4620      	mov	r0, r4
   1cd54:	f7fc fe22 	bl	1999c <dw1000_write_reg>
        dw1000_write_reg(inst, DIG_DIAG_ID, DIAG_TMC_OFFSET,
   1cd58:	2501      	movs	r5, #1
   1cd5a:	9502      	str	r5, [sp, #8]
   1cd5c:	2210      	movs	r2, #16
   1cd5e:	2300      	movs	r3, #0
   1cd60:	e9cd 2300 	strd	r2, r3, [sp]
   1cd64:	2224      	movs	r2, #36	; 0x24
   1cd66:	212f      	movs	r1, #47	; 0x2f
   1cd68:	4620      	mov	r0, r4
   1cd6a:	f7fc fe17 	bl	1999c <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT, sizeof(uint8_t));
   1cd6e:	9502      	str	r5, [sp, #8]
   1cd70:	2202      	movs	r2, #2
   1cd72:	2300      	movs	r3, #0
   1cd74:	e9cd 2300 	strd	r2, r3, [sp]
   1cd78:	2200      	movs	r2, #0
   1cd7a:	210d      	movs	r1, #13
   1cd7c:	4620      	mov	r0, r4
   1cd7e:	f7fc fe0d 	bl	1999c <dw1000_write_reg>
}
   1cd82:	e783      	b.n	1cc8c <dw1000_phy_repeated_frames+0x34>
        assert(rc == 0);
   1cd84:	2300      	movs	r3, #0
   1cd86:	461a      	mov	r2, r3
   1cd88:	4619      	mov	r1, r3
   1cd8a:	4618      	mov	r0, r3
   1cd8c:	f7ec fa1a 	bl	91c4 <__assert_func>
        assert(rc == 0);
   1cd90:	2300      	movs	r3, #0
   1cd92:	461a      	mov	r2, r3
   1cd94:	4619      	mov	r1, r3
   1cd96:	4618      	mov	r0, r3
   1cd98:	f7ec fa14 	bl	91c4 <__assert_func>
        assert(rc == 0);
   1cd9c:	2300      	movs	r3, #0
   1cd9e:	461a      	mov	r2, r3
   1cda0:	4619      	mov	r1, r3
   1cda2:	4618      	mov	r0, r3
   1cda4:	f7ec fa0e 	bl	91c4 <__assert_func>
   1cda8:	00028114 	.word	0x00028114
   1cdac:	00028128 	.word	0x00028128
   1cdb0:	005fff00 	.word	0x005fff00

0001cdb4 <dw1000_phy_SHR_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_SHR_duration(struct uwb_phy_attributes * attrib)
{
   1cdb4:	b508      	push	{r3, lr}
    /* TXsym is represented as a float32_t */
#ifdef __KERNEL__
    duration = f32_to_i32(
        f32_mul(attrib->Tpsym, ui32_to_f32(attrib->nsync + attrib->nsfd)), 3, false);
#else
    duration = ceilf(attrib->Tpsym * (attrib->nsync + attrib->nsfd));
   1cdb6:	ed90 0a00 	vldr	s0, [r0]
   1cdba:	89c3      	ldrh	r3, [r0, #14]
   1cdbc:	7b02      	ldrb	r2, [r0, #12]
   1cdbe:	4413      	add	r3, r2
   1cdc0:	ee07 3a90 	vmov	s15, r3
   1cdc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1cdc8:	ee27 0a80 	vmul.f32	s0, s15, s0
   1cdcc:	f008 fafc 	bl	253c8 <ceilf>
   1cdd0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
#endif
    return duration;
}
   1cdd4:	ee10 3a10 	vmov	r3, s0
   1cdd8:	b298      	uxth	r0, r3
   1cdda:	bd08      	pop	{r3, pc}

0001cddc <dw1000_phy_data_duration>:
 *                  when using Cipher Mode 3 (no payload)
 * @return uint16_t duration in usec
 */
uint16_t
dw1000_phy_data_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1cddc:	b508      	push	{r3, lr}
    int32_t total_payload_bits;
    uint16_t duration;
    /* We need to add 48 parity bits for every 330 bits in the data payload (including crc)
     * I.e. for < 330 bits we need 48 parity bits, for > 330 bits we need 48+48 parity bits,
     * for > 660 bits we need 3*48 parity bits, etc. */
    parity_data_bits += ((8*(nlen+2))/330) * 48;
   1cdde:	3102      	adds	r1, #2
   1cde0:	00c9      	lsls	r1, r1, #3
   1cde2:	4b12      	ldr	r3, [pc, #72]	; (1ce2c <dw1000_phy_data_duration+0x50>)
   1cde4:	fb83 2301 	smull	r2, r3, r3, r1
   1cde8:	11db      	asrs	r3, r3, #7
   1cdea:	3301      	adds	r3, #1
   1cdec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    total_payload_bits = 8*(nlen+2) + parity_data_bits;
   1cdf0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   1cdf4:	ee07 3a90 	vmov	s15, r3
        tmp = DPL_FLOAT32_MUL(attrib->Tbsym, DPL_FLOAT32_I32_TO_F32(attrib->nphr));
        tmp = DPL_FLOAT32_ADD(tmp, DPL_FLOAT32_MUL(attrib->Tdsym, DPL_FLOAT32_I32_TO_F32(total_payload_bits)));
        duration = f32_to_i32(DPL_FLOAT32_CEIL(tmp), softfloat_round_max, false);
    }
#else
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1cdf8:	ed90 7a01 	vldr	s14, [r0, #4]
   1cdfc:	7c83      	ldrb	r3, [r0, #18]
   1cdfe:	ee00 3a10 	vmov	s0, r3
   1ce02:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   1ce06:	ee20 0a07 	vmul.f32	s0, s0, s14
                          attrib->Tdsym * total_payload_bits);
   1ce0a:	ed90 7a02 	vldr	s14, [r0, #8]
   1ce0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1ce12:	ee67 7a87 	vmul.f32	s15, s15, s14
    duration = (int)ceilf(attrib->Tbsym * attrib->nphr +
   1ce16:	ee30 0a27 	vadd.f32	s0, s0, s15
   1ce1a:	f008 fad5 	bl	253c8 <ceilf>
   1ce1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
#endif
    return duration;
}
   1ce22:	ee10 3a10 	vmov	r3, s0
   1ce26:	b298      	uxth	r0, r3
   1ce28:	bd08      	pop	{r3, pc}
   1ce2a:	bf00      	nop
   1ce2c:	634c0635 	.word	0x634c0635

0001ce30 <dw1000_phy_frame_duration>:
 * @param nlen      The length of the frame to be transmitted/received excluding crc
 * @return uint16_t duration in usec
 */
inline uint16_t
dw1000_phy_frame_duration(struct uwb_phy_attributes * attrib, uint16_t nlen)
{
   1ce30:	b570      	push	{r4, r5, r6, lr}
   1ce32:	4605      	mov	r5, r0
   1ce34:	460e      	mov	r6, r1
    return dw1000_phy_SHR_duration(attrib) + dw1000_phy_data_duration(attrib, nlen);
   1ce36:	f7ff ffbd 	bl	1cdb4 <dw1000_phy_SHR_duration>
   1ce3a:	4604      	mov	r4, r0
   1ce3c:	4631      	mov	r1, r6
   1ce3e:	4628      	mov	r0, r5
   1ce40:	f7ff ffcc 	bl	1cddc <dw1000_phy_data_duration>
   1ce44:	4420      	add	r0, r4
}
   1ce46:	b280      	uxth	r0, r0
   1ce48:	bd70      	pop	{r4, r5, r6, pc}

0001ce4a <dw1000_phy_txrf_power_value>:
 */
bool
dw1000_phy_txrf_power_value(struct _dw1000_dev_instance_t * inst, uint8_t *reg,
                            dpl_float32_t coarse, dpl_float32_t fine)
{
    int c = DPL_FLOAT32_INT(coarse);
   1ce4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    if (!reg) {
   1ce4e:	460a      	mov	r2, r1
   1ce50:	2900      	cmp	r1, #0
   1ce52:	d05a      	beq.n	1cf0a <dw1000_phy_txrf_power_value+0xc0>
        return false;
    }
    if (DPL_FLOAT32_INT(fine) < 0 || DPL_FLOAT32_INT(fine) > 32) {
   1ce54:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   1ce58:	ee17 3a90 	vmov	r3, s15
   1ce5c:	2b20      	cmp	r3, #32
   1ce5e:	d856      	bhi.n	1cf0e <dw1000_phy_txrf_power_value+0xc4>
        return false;
    }

    switch (c) {
   1ce60:	ee10 3a10 	vmov	r3, s0
   1ce64:	2b12      	cmp	r3, #18
   1ce66:	d854      	bhi.n	1cf12 <dw1000_phy_txrf_power_value+0xc8>
   1ce68:	e8df f003 	tbb	[pc, r3]
   1ce6c:	3b535345 	.word	0x3b535345
   1ce70:	53315353 	.word	0x53315353
   1ce74:	53532753 	.word	0x53532753
   1ce78:	1353531d 	.word	0x1353531d
   1ce7c:	5353      	.short	0x5353
   1ce7e:	0a          	.byte	0x0a
   1ce7f:	00          	.byte	0x00
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   1ce80:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1ce84:	eefd 7ae0 	vcvt.s32.f32	s15, s1
   1ce88:	ee17 3a90 	vmov	r3, s15
   1ce8c:	7013      	strb	r3, [r2, #0]
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
    default:
        return false;
    }
    return true;
   1ce8e:	2001      	movs	r0, #1
    case(18): *reg = dw1000_power_valuef(DW1000_txrf_config_18db, fine);break;
   1ce90:	4770      	bx	lr
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1ce92:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1ce96:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1ce9a:	ee10 3a90 	vmov	r3, s1
   1ce9e:	3320      	adds	r3, #32
   1cea0:	7013      	strb	r3, [r2, #0]
    return true;
   1cea2:	2001      	movs	r0, #1
    case(15): *reg = dw1000_power_valuef(DW1000_txrf_config_15db, fine);break;
   1cea4:	4770      	bx	lr
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   1cea6:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1ceaa:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1ceae:	ee10 3a90 	vmov	r3, s1
   1ceb2:	3340      	adds	r3, #64	; 0x40
   1ceb4:	7013      	strb	r3, [r2, #0]
    return true;
   1ceb6:	2001      	movs	r0, #1
    case(12): *reg = dw1000_power_valuef(DW1000_txrf_config_12db, fine);break;
   1ceb8:	4770      	bx	lr
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1ceba:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cebe:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cec2:	ee10 3a90 	vmov	r3, s1
   1cec6:	3360      	adds	r3, #96	; 0x60
   1cec8:	7013      	strb	r3, [r2, #0]
    return true;
   1ceca:	2001      	movs	r0, #1
    case(9):  *reg = dw1000_power_valuef(DW1000_txrf_config_9db, fine);break;
   1cecc:	4770      	bx	lr
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   1cece:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1ced2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1ced6:	ee10 3a90 	vmov	r3, s1
   1ceda:	3b80      	subs	r3, #128	; 0x80
   1cedc:	7013      	strb	r3, [r2, #0]
    return true;
   1cede:	2001      	movs	r0, #1
    case(6):  *reg = dw1000_power_valuef(DW1000_txrf_config_6db, fine);break;
   1cee0:	4770      	bx	lr
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1cee2:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cee6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1ceea:	ee10 3a90 	vmov	r3, s1
   1ceee:	3b60      	subs	r3, #96	; 0x60
   1cef0:	7013      	strb	r3, [r2, #0]
    return true;
   1cef2:	2001      	movs	r0, #1
    case(3):  *reg = dw1000_power_valuef(DW1000_txrf_config_3db, fine);break;
   1cef4:	4770      	bx	lr
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   1cef6:	ee70 0aa0 	vadd.f32	s1, s1, s1
   1cefa:	eefd 0ae0 	vcvt.s32.f32	s1, s1
   1cefe:	ee10 3a90 	vmov	r3, s1
   1cf02:	3b40      	subs	r3, #64	; 0x40
   1cf04:	7013      	strb	r3, [r2, #0]
    return true;
   1cf06:	2001      	movs	r0, #1
    case(0):  *reg = dw1000_power_valuef(DW1000_txrf_config_0db, fine);break;
   1cf08:	4770      	bx	lr
        return false;
   1cf0a:	2000      	movs	r0, #0
   1cf0c:	4770      	bx	lr
        return false;
   1cf0e:	2000      	movs	r0, #0
   1cf10:	4770      	bx	lr
    switch (c) {
   1cf12:	2000      	movs	r0, #0
}
   1cf14:	4770      	bx	lr

0001cf16 <dw1000_phy_event_cnt_ctrl>:
 * @param reset   If true, reset counters
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_ctrl(struct _dw1000_dev_instance_t *inst, bool enable, bool reset)
{
   1cf16:	b530      	push	{r4, r5, lr}
   1cf18:	b085      	sub	sp, #20
   1cf1a:	4604      	mov	r4, r0
   1cf1c:	460d      	mov	r5, r1
    if (reset) {
   1cf1e:	b97a      	cbnz	r2, 1cf40 <dw1000_phy_event_cnt_ctrl+0x2a>
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
    }

    /* Intentionally writing 32 bits here and above as the register requires at least 16 bits
     * written to take effect. */
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   1cf20:	b1cd      	cbz	r5, 1cf56 <dw1000_phy_event_cnt_ctrl+0x40>
   1cf22:	2201      	movs	r2, #1
   1cf24:	2300      	movs	r3, #0
   1cf26:	2104      	movs	r1, #4
   1cf28:	9102      	str	r1, [sp, #8]
   1cf2a:	e9cd 2300 	strd	r2, r3, [sp]
   1cf2e:	2200      	movs	r2, #0
   1cf30:	212f      	movs	r1, #47	; 0x2f
   1cf32:	4620      	mov	r0, r4
   1cf34:	f7fc fd32 	bl	1999c <dw1000_write_reg>
    return inst->uwb_dev.status;
}
   1cf38:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1cf3c:	b005      	add	sp, #20
   1cf3e:	bd30      	pop	{r4, r5, pc}
        dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, EVC_CLR, sizeof(uint32_t));
   1cf40:	2304      	movs	r3, #4
   1cf42:	9302      	str	r3, [sp, #8]
   1cf44:	2202      	movs	r2, #2
   1cf46:	2300      	movs	r3, #0
   1cf48:	e9cd 2300 	strd	r2, r3, [sp]
   1cf4c:	2200      	movs	r2, #0
   1cf4e:	212f      	movs	r1, #47	; 0x2f
   1cf50:	f7fc fd24 	bl	1999c <dw1000_write_reg>
   1cf54:	e7e4      	b.n	1cf20 <dw1000_phy_event_cnt_ctrl+0xa>
    dw1000_write_reg(inst, DIG_DIAG_ID, EVC_CTRL_OFFSET, (enable) ? EVC_EN : 0, sizeof(uint32_t));
   1cf56:	2200      	movs	r2, #0
   1cf58:	2300      	movs	r3, #0
   1cf5a:	e7e4      	b.n	1cf26 <dw1000_phy_event_cnt_ctrl+0x10>

0001cf5c <dw1000_phy_event_cnt_read>:
 * @param res     Pointer to struct uwb_dev_evcnt
 * @return struct uwb_dev_status
 */
struct uwb_dev_status
dw1000_phy_event_cnt_read(struct _dw1000_dev_instance_t *inst, struct uwb_dev_evcnt *res)
{
   1cf5c:	b530      	push	{r4, r5, lr}
   1cf5e:	b083      	sub	sp, #12
   1cf60:	4605      	mov	r5, r0
    if (!res) {
   1cf62:	b319      	cbz	r1, 1cfac <dw1000_phy_event_cnt_read+0x50>
   1cf64:	460c      	mov	r4, r1
        return inst->uwb_dev.status;
    }
    /* Read first 6 counter registers in one go */
    dw1000_read(inst, DIG_DIAG_ID, EVC_PHE_OFFSET, (uint8_t*)res,
   1cf66:	2318      	movs	r3, #24
   1cf68:	9300      	str	r3, [sp, #0]
   1cf6a:	460b      	mov	r3, r1
   1cf6c:	2204      	movs	r2, #4
   1cf6e:	212f      	movs	r1, #47	; 0x2f
   1cf70:	f7fc fbda 	bl	19728 <dw1000_read>
                offsetof(struct uwb_dev_evcnt, event_count6));
    /* Apply masks */
    res->event_count0 &= ((EVC_RSE_MASK << 16) | EVC_PHE_MASK);
   1cf74:	6823      	ldr	r3, [r4, #0]
   1cf76:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1cf7a:	6023      	str	r3, [r4, #0]
    res->event_count1 &= ((EVC_FCE_MASK << 16) | EVC_FCG_MASK);
   1cf7c:	6863      	ldr	r3, [r4, #4]
   1cf7e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1cf82:	6063      	str	r3, [r4, #4]
    res->event_count2 &= ((EVC_OVR_MASK << 16) | EVC_FFR_MASK);
   1cf84:	68a3      	ldr	r3, [r4, #8]
   1cf86:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1cf8a:	60a3      	str	r3, [r4, #8]
    res->event_count3 &= ((EVC_PTO_MASK << 16) | EVC_STO_MASK);
   1cf8c:	68e3      	ldr	r3, [r4, #12]
   1cf8e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1cf92:	60e3      	str	r3, [r4, #12]
    res->event_count4 &= ((EVC_TXFS_MASK << 16) | EVC_FWTO_MASK);
   1cf94:	6923      	ldr	r3, [r4, #16]
   1cf96:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1cf9a:	6123      	str	r3, [r4, #16]
    res->event_count5 &= ((EVC_TPW_MASK << 16) | EVC_HPW_MASK);
   1cf9c:	6963      	ldr	r3, [r4, #20]
   1cf9e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
   1cfa2:	6163      	str	r3, [r4, #20]
    return inst->uwb_dev.status;
   1cfa4:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
}
   1cfa8:	b003      	add	sp, #12
   1cfaa:	bd30      	pop	{r4, r5, pc}
        return inst->uwb_dev.status;
   1cfac:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
   1cfb0:	e7fa      	b.n	1cfa8 <dw1000_phy_event_cnt_read+0x4c>
	...

0001cfb4 <dw1000_pkg_init>:
 *
 * @param void
 * @return void
 */
void dw1000_pkg_init(void)
{
   1cfb4:	b508      	push	{r3, lr}
#if defined(MYNEWT)

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %lu,\"msg\": \"dw1000_pkg_init\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1cfb6:	f7f5 fc88 	bl	128ca <dpl_cputime_get32>
   1cfba:	4601      	mov	r1, r0
   1cfbc:	4805      	ldr	r0, [pc, #20]	; (1cfd4 <dw1000_pkg_init+0x20>)
   1cfbe:	f7f3 ff75 	bl	10eac <printf>
#endif

#if MYNEWT_VAL(DW1000_DEVICE_0)
    dw1000_dev_config(hal_dw1000_inst(0));
   1cfc2:	2000      	movs	r0, #0
   1cfc4:	f7fd f90a 	bl	1a1dc <hal_dw1000_inst>
   1cfc8:	f7fc fef4 	bl	19db4 <dw1000_dev_config>
        dw1000_dev_config((struct _dw1000_dev_instance_t*)dev);
    }
#endif

#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_register();
   1cfcc:	f000 ffee 	bl	1dfac <dw1000_cli_register>
#endif
}
   1cfd0:	bd08      	pop	{r3, pc}
   1cfd2:	bf00      	nop
   1cfd4:	0002813c 	.word	0x0002813c

0001cfd8 <dw1000_pkg_down>:

int dw1000_pkg_down(int reason)
{
   1cfd8:	b510      	push	{r4, lr}
   1cfda:	4604      	mov	r4, r0
    struct os_dev *dev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    DIAGMSG("{\"utime\": %"PRIu32",\"msg\": \"dw1000_pkg_down\"}\n", dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   1cfdc:	f7f5 fc75 	bl	128ca <dpl_cputime_get32>
   1cfe0:	4601      	mov	r1, r0
   1cfe2:	480d      	ldr	r0, [pc, #52]	; (1d018 <dw1000_pkg_down+0x40>)
   1cfe4:	f7f3 ff62 	bl	10eac <printf>
#endif

    dev = os_dev_lookup("dw1000_0");
   1cfe8:	480c      	ldr	r0, [pc, #48]	; (1d01c <dw1000_pkg_down+0x44>)
   1cfea:	f7ec fbc5 	bl	9778 <os_dev_lookup>
    if (dev) {
   1cfee:	b108      	cbz	r0, 1cff4 <dw1000_pkg_down+0x1c>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1cff0:	f7fd f8a2 	bl	1a138 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_1");
   1cff4:	480a      	ldr	r0, [pc, #40]	; (1d020 <dw1000_pkg_down+0x48>)
   1cff6:	f7ec fbbf 	bl	9778 <os_dev_lookup>
    if (dev) {
   1cffa:	b108      	cbz	r0, 1d000 <dw1000_pkg_down+0x28>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1cffc:	f7fd f89c 	bl	1a138 <dw1000_dev_deinit>
    }
    dev = os_dev_lookup("dw1000_2");
   1d000:	4808      	ldr	r0, [pc, #32]	; (1d024 <dw1000_pkg_down+0x4c>)
   1d002:	f7ec fbb9 	bl	9778 <os_dev_lookup>
    if (dev) {
   1d006:	b108      	cbz	r0, 1d00c <dw1000_pkg_down+0x34>
        dw1000_dev_deinit((struct _dw1000_dev_instance_t *)dev);
   1d008:	f7fd f896 	bl	1a138 <dw1000_dev_deinit>
    }
#if MYNEWT_VAL(DW1000_CLI)
    dw1000_cli_down(reason);
   1d00c:	4620      	mov	r0, r4
   1d00e:	f000 ffd5 	bl	1dfbc <dw1000_cli_down>
#endif
    return 0;
}
   1d012:	2000      	movs	r0, #0
   1d014:	bd10      	pop	{r4, pc}
   1d016:	bf00      	nop
   1d018:	00028168 	.word	0x00028168
   1d01c:	00027e68 	.word	0x00027e68
   1d020:	00028194 	.word	0x00028194
   1d024:	000281a0 	.word	0x000281a0

0001d028 <fctrl_ledgend>:
    return b;
}

static void
fctrl_ledgend(struct streamer *streamer)
{
   1d028:	b510      	push	{r4, lr}
   1d02a:	4604      	mov	r4, r0
    streamer_printf(streamer, "   D=Data, A=Ack, M=Mac\n");
   1d02c:	4909      	ldr	r1, [pc, #36]	; (1d054 <fctrl_ledgend+0x2c>)
   1d02e:	f7f5 fd47 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "   Secr: Security enabled, fPnd: Frame pending, ACKr: Ack requested, PANc: PANID Compress\n");
   1d032:	4909      	ldr	r1, [pc, #36]	; (1d058 <fctrl_ledgend+0x30>)
   1d034:	4620      	mov	r0, r4
   1d036:	f7f5 fd43 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "   Dst: No=no dest addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   1d03a:	4908      	ldr	r1, [pc, #32]	; (1d05c <fctrl_ledgend+0x34>)
   1d03c:	4620      	mov	r0, r4
   1d03e:	f7f5 fd3f 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "   Frame version: I-IEEE 802.15.4, I2003-IEEE 802.15.4-2003, iFv-Invalid Frame Version\n");
   1d042:	4907      	ldr	r1, [pc, #28]	; (1d060 <fctrl_ledgend+0x38>)
   1d044:	4620      	mov	r0, r4
   1d046:	f7f5 fd3b 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "   Src: No=no src addres, Rs=Reserved, 16-bit address, 64-bit address\n");
   1d04a:	4906      	ldr	r1, [pc, #24]	; (1d064 <fctrl_ledgend+0x3c>)
   1d04c:	4620      	mov	r0, r4
   1d04e:	f7f5 fd37 	bl	12ac0 <streamer_printf>
}
   1d052:	bd10      	pop	{r4, pc}
   1d054:	000281ac 	.word	0x000281ac
   1d058:	000281c8 	.word	0x000281c8
   1d05c:	00028224 	.word	0x00028224
   1d060:	0002826c 	.word	0x0002826c
   1d064:	000282c4 	.word	0x000282c4

0001d068 <dw1000_cli_too_few_args>:
#endif

#ifndef __KERNEL__
static void
dw1000_cli_too_few_args(struct streamer *streamer)
{
   1d068:	b508      	push	{r3, lr}
    streamer_printf(streamer, "Too few args\n");
   1d06a:	4902      	ldr	r1, [pc, #8]	; (1d074 <dw1000_cli_too_few_args+0xc>)
   1d06c:	f7f5 fd28 	bl	12ac0 <streamer_printf>
}
   1d070:	bd08      	pop	{r3, pc}
   1d072:	bf00      	nop
   1d074:	000267ec 	.word	0x000267ec

0001d078 <fctrl_to_string>:
{
   1d078:	b570      	push	{r4, r5, r6, lr}
   1d07a:	4605      	mov	r5, r0
    memset(b,0,sizeof(b));
   1d07c:	2228      	movs	r2, #40	; 0x28
   1d07e:	2100      	movs	r1, #0
   1d080:	489c      	ldr	r0, [pc, #624]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d082:	f7f3 fafa 	bl	1067a <memset>
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   1d086:	f005 0607 	and.w	r6, r5, #7
   1d08a:	2e01      	cmp	r6, #1
   1d08c:	d04e      	beq.n	1d12c <fctrl_to_string+0xb4>
    char *bp = b;
   1d08e:	4c99      	ldr	r4, [pc, #612]	; (1d2f4 <fctrl_to_string+0x27c>)
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   1d090:	2e02      	cmp	r6, #2
   1d092:	d054      	beq.n	1d13e <fctrl_to_string+0xc6>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   1d094:	2e03      	cmp	r6, #3
   1d096:	d05c      	beq.n	1d152 <fctrl_to_string+0xda>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d098:	2e04      	cmp	r6, #4
   1d09a:	d064      	beq.n	1d166 <fctrl_to_string+0xee>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d09c:	2e05      	cmp	r6, #5
   1d09e:	d06c      	beq.n	1d17a <fctrl_to_string+0x102>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d0a0:	2e06      	cmp	r6, #6
   1d0a2:	d074      	beq.n	1d18e <fctrl_to_string+0x116>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d0a4:	2e07      	cmp	r6, #7
   1d0a6:	d07c      	beq.n	1d1a2 <fctrl_to_string+0x12a>
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   1d0a8:	f015 0f08 	tst.w	r5, #8
   1d0ac:	f040 8083 	bne.w	1d1b6 <fctrl_to_string+0x13e>
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   1d0b0:	f015 0f10 	tst.w	r5, #16
   1d0b4:	f040 8089 	bne.w	1d1ca <fctrl_to_string+0x152>
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   1d0b8:	f015 0f20 	tst.w	r5, #32
   1d0bc:	f040 808f 	bne.w	1d1de <fctrl_to_string+0x166>
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   1d0c0:	f015 0f40 	tst.w	r5, #64	; 0x40
   1d0c4:	f040 8095 	bne.w	1d1f2 <fctrl_to_string+0x17a>
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   1d0c8:	f415 6640 	ands.w	r6, r5, #3072	; 0xc00
   1d0cc:	f000 809b 	beq.w	1d206 <fctrl_to_string+0x18e>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   1d0d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1d0d4:	f000 80a1 	beq.w	1d21a <fctrl_to_string+0x1a2>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   1d0d8:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
   1d0dc:	f000 80a7 	beq.w	1d22e <fctrl_to_string+0x1b6>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   1d0e0:	f5b6 6f40 	cmp.w	r6, #3072	; 0xc00
   1d0e4:	f000 80ad 	beq.w	1d242 <fctrl_to_string+0x1ca>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   1d0e8:	f415 5640 	ands.w	r6, r5, #12288	; 0x3000
   1d0ec:	f000 80b3 	beq.w	1d256 <fctrl_to_string+0x1de>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   1d0f0:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   1d0f4:	f000 80b9 	beq.w	1d26a <fctrl_to_string+0x1f2>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   1d0f8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   1d0fc:	f000 80bf 	beq.w	1d27e <fctrl_to_string+0x206>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   1d100:	f5b6 5f40 	cmp.w	r6, #12288	; 0x3000
   1d104:	f000 80c5 	beq.w	1d292 <fctrl_to_string+0x21a>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   1d108:	f415 4540 	ands.w	r5, r5, #49152	; 0xc000
   1d10c:	f000 80cb 	beq.w	1d2a6 <fctrl_to_string+0x22e>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   1d110:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1d114:	f000 80d1 	beq.w	1d2ba <fctrl_to_string+0x242>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   1d118:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1d11c:	f000 80d7 	beq.w	1d2ce <fctrl_to_string+0x256>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   1d120:	f5b5 4f40 	cmp.w	r5, #49152	; 0xc000
   1d124:	f000 80dd 	beq.w	1d2e2 <fctrl_to_string+0x26a>
}
   1d128:	4872      	ldr	r0, [pc, #456]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d12a:	bd70      	pop	{r4, r5, r6, pc}
    if ((s & 0x0007) == 0x0001) bp += snprintf(bp,sizeof(b)-(bp-b), "D|");  /* Data */
   1d12c:	4a71      	ldr	r2, [pc, #452]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d12e:	4b72      	ldr	r3, [pc, #456]	; (1d2f8 <fctrl_to_string+0x280>)
   1d130:	681b      	ldr	r3, [r3, #0]
   1d132:	4614      	mov	r4, r2
   1d134:	f824 3b02 	strh.w	r3, [r4], #2
   1d138:	0c1b      	lsrs	r3, r3, #16
   1d13a:	7093      	strb	r3, [r2, #2]
   1d13c:	e7a8      	b.n	1d090 <fctrl_to_string+0x18>
    if ((s & 0x0007) == 0x0002) bp += snprintf(bp,sizeof(b)-(bp-b), "A|");  /* Acknowledge */
   1d13e:	496d      	ldr	r1, [pc, #436]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d140:	1a61      	subs	r1, r4, r1
   1d142:	4a6e      	ldr	r2, [pc, #440]	; (1d2fc <fctrl_to_string+0x284>)
   1d144:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d148:	4620      	mov	r0, r4
   1d14a:	f7f3 fede 	bl	10f0a <snprintf>
   1d14e:	4404      	add	r4, r0
   1d150:	e7a0      	b.n	1d094 <fctrl_to_string+0x1c>
    if ((s & 0x0007) == 0x0003) bp += snprintf(bp,sizeof(b)-(bp-b), "M|");  /* Reserved */
   1d152:	4968      	ldr	r1, [pc, #416]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d154:	1a61      	subs	r1, r4, r1
   1d156:	4a6a      	ldr	r2, [pc, #424]	; (1d300 <fctrl_to_string+0x288>)
   1d158:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d15c:	4620      	mov	r0, r4
   1d15e:	f7f3 fed4 	bl	10f0a <snprintf>
   1d162:	4404      	add	r4, r0
   1d164:	e798      	b.n	1d098 <fctrl_to_string+0x20>
    if ((s & 0x0007) == 0x0004) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d166:	4963      	ldr	r1, [pc, #396]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d168:	1a61      	subs	r1, r4, r1
   1d16a:	4a66      	ldr	r2, [pc, #408]	; (1d304 <fctrl_to_string+0x28c>)
   1d16c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d170:	4620      	mov	r0, r4
   1d172:	f7f3 feca 	bl	10f0a <snprintf>
   1d176:	4404      	add	r4, r0
   1d178:	e790      	b.n	1d09c <fctrl_to_string+0x24>
    if ((s & 0x0007) == 0x0005) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d17a:	495e      	ldr	r1, [pc, #376]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d17c:	1a61      	subs	r1, r4, r1
   1d17e:	4a61      	ldr	r2, [pc, #388]	; (1d304 <fctrl_to_string+0x28c>)
   1d180:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d184:	4620      	mov	r0, r4
   1d186:	f7f3 fec0 	bl	10f0a <snprintf>
   1d18a:	4404      	add	r4, r0
   1d18c:	e788      	b.n	1d0a0 <fctrl_to_string+0x28>
    if ((s & 0x0007) == 0x0006) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d18e:	4959      	ldr	r1, [pc, #356]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d190:	1a61      	subs	r1, r4, r1
   1d192:	4a5c      	ldr	r2, [pc, #368]	; (1d304 <fctrl_to_string+0x28c>)
   1d194:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d198:	4620      	mov	r0, r4
   1d19a:	f7f3 feb6 	bl	10f0a <snprintf>
   1d19e:	4404      	add	r4, r0
   1d1a0:	e780      	b.n	1d0a4 <fctrl_to_string+0x2c>
    if ((s & 0x0007) == 0x0007) bp += snprintf(bp,sizeof(b)-(bp-b), "R|");
   1d1a2:	4954      	ldr	r1, [pc, #336]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d1a4:	1a61      	subs	r1, r4, r1
   1d1a6:	4a57      	ldr	r2, [pc, #348]	; (1d304 <fctrl_to_string+0x28c>)
   1d1a8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d1ac:	4620      	mov	r0, r4
   1d1ae:	f7f3 feac 	bl	10f0a <snprintf>
   1d1b2:	4404      	add	r4, r0
   1d1b4:	e778      	b.n	1d0a8 <fctrl_to_string+0x30>
    if ((s & 0x0008) == 0x0008) bp += snprintf(bp,sizeof(b)-(bp-b), "Secr|"); /* Security Enabeled */
   1d1b6:	494f      	ldr	r1, [pc, #316]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d1b8:	1a61      	subs	r1, r4, r1
   1d1ba:	4a53      	ldr	r2, [pc, #332]	; (1d308 <fctrl_to_string+0x290>)
   1d1bc:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d1c0:	4620      	mov	r0, r4
   1d1c2:	f7f3 fea2 	bl	10f0a <snprintf>
   1d1c6:	4404      	add	r4, r0
   1d1c8:	e772      	b.n	1d0b0 <fctrl_to_string+0x38>
    if ((s & 0x0010) == 0x0010) bp += snprintf(bp,sizeof(b)-(bp-b), "fPnd|"); /* Frame Pending */
   1d1ca:	494a      	ldr	r1, [pc, #296]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d1cc:	1a61      	subs	r1, r4, r1
   1d1ce:	4a4f      	ldr	r2, [pc, #316]	; (1d30c <fctrl_to_string+0x294>)
   1d1d0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d1d4:	4620      	mov	r0, r4
   1d1d6:	f7f3 fe98 	bl	10f0a <snprintf>
   1d1da:	4404      	add	r4, r0
   1d1dc:	e76c      	b.n	1d0b8 <fctrl_to_string+0x40>
    if ((s & 0x0020) == 0x0020) bp += snprintf(bp,sizeof(b)-(bp-b), "ACKr|"); /* Ack requested */
   1d1de:	4945      	ldr	r1, [pc, #276]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d1e0:	1a61      	subs	r1, r4, r1
   1d1e2:	4a4b      	ldr	r2, [pc, #300]	; (1d310 <fctrl_to_string+0x298>)
   1d1e4:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	f7f3 fe8e 	bl	10f0a <snprintf>
   1d1ee:	4404      	add	r4, r0
   1d1f0:	e766      	b.n	1d0c0 <fctrl_to_string+0x48>
    if ((s & 0x0040) == 0x0040) bp += snprintf(bp,sizeof(b)-(bp-b), "PANc|"); /* PANID Compress */
   1d1f2:	4940      	ldr	r1, [pc, #256]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d1f4:	1a61      	subs	r1, r4, r1
   1d1f6:	4a47      	ldr	r2, [pc, #284]	; (1d314 <fctrl_to_string+0x29c>)
   1d1f8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d1fc:	4620      	mov	r0, r4
   1d1fe:	f7f3 fe84 	bl	10f0a <snprintf>
   1d202:	4404      	add	r4, r0
   1d204:	e760      	b.n	1d0c8 <fctrl_to_string+0x50>
    if ((s & 0x0C00) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "DstNo|"); /* No destination address */
   1d206:	493b      	ldr	r1, [pc, #236]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d208:	1a61      	subs	r1, r4, r1
   1d20a:	4a43      	ldr	r2, [pc, #268]	; (1d318 <fctrl_to_string+0x2a0>)
   1d20c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d210:	4620      	mov	r0, r4
   1d212:	f7f3 fe7a 	bl	10f0a <snprintf>
   1d216:	4404      	add	r4, r0
   1d218:	e75a      	b.n	1d0d0 <fctrl_to_string+0x58>
    if ((s & 0x0C00) == 0x0400) bp += snprintf(bp,sizeof(b)-(bp-b), "DstRs|"); /* Reserved */
   1d21a:	4936      	ldr	r1, [pc, #216]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d21c:	1a61      	subs	r1, r4, r1
   1d21e:	4a3f      	ldr	r2, [pc, #252]	; (1d31c <fctrl_to_string+0x2a4>)
   1d220:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d224:	4620      	mov	r0, r4
   1d226:	f7f3 fe70 	bl	10f0a <snprintf>
   1d22a:	4404      	add	r4, r0
   1d22c:	e754      	b.n	1d0d8 <fctrl_to_string+0x60>
    if ((s & 0x0C00) == 0x0800) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst16|"); /* 16-bit destination address */
   1d22e:	4931      	ldr	r1, [pc, #196]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d230:	1a61      	subs	r1, r4, r1
   1d232:	4a3b      	ldr	r2, [pc, #236]	; (1d320 <fctrl_to_string+0x2a8>)
   1d234:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d238:	4620      	mov	r0, r4
   1d23a:	f7f3 fe66 	bl	10f0a <snprintf>
   1d23e:	4404      	add	r4, r0
   1d240:	e74e      	b.n	1d0e0 <fctrl_to_string+0x68>
    if ((s & 0x0C00) == 0x0C00) bp += snprintf(bp,sizeof(b)-(bp-b), "Dst64|"); /* 64-bit destination address */
   1d242:	492c      	ldr	r1, [pc, #176]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d244:	1a61      	subs	r1, r4, r1
   1d246:	4a37      	ldr	r2, [pc, #220]	; (1d324 <fctrl_to_string+0x2ac>)
   1d248:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d24c:	4620      	mov	r0, r4
   1d24e:	f7f3 fe5c 	bl	10f0a <snprintf>
   1d252:	4404      	add	r4, r0
   1d254:	e748      	b.n	1d0e8 <fctrl_to_string+0x70>
    if ((s & 0x3000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "I2003|");
   1d256:	4927      	ldr	r1, [pc, #156]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d258:	1a61      	subs	r1, r4, r1
   1d25a:	4a33      	ldr	r2, [pc, #204]	; (1d328 <fctrl_to_string+0x2b0>)
   1d25c:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d260:	4620      	mov	r0, r4
   1d262:	f7f3 fe52 	bl	10f0a <snprintf>
   1d266:	4404      	add	r4, r0
   1d268:	e742      	b.n	1d0f0 <fctrl_to_string+0x78>
    if ((s & 0x3000) == 0x1000) bp += snprintf(bp,sizeof(b)-(bp-b), "I|");
   1d26a:	4922      	ldr	r1, [pc, #136]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d26c:	1a61      	subs	r1, r4, r1
   1d26e:	4a2f      	ldr	r2, [pc, #188]	; (1d32c <fctrl_to_string+0x2b4>)
   1d270:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d274:	4620      	mov	r0, r4
   1d276:	f7f3 fe48 	bl	10f0a <snprintf>
   1d27a:	4404      	add	r4, r0
   1d27c:	e73c      	b.n	1d0f8 <fctrl_to_string+0x80>
    if ((s & 0x3000) == 0x2000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|"); /* Invalid frame version */
   1d27e:	491d      	ldr	r1, [pc, #116]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d280:	1a61      	subs	r1, r4, r1
   1d282:	4a2b      	ldr	r2, [pc, #172]	; (1d330 <fctrl_to_string+0x2b8>)
   1d284:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d288:	4620      	mov	r0, r4
   1d28a:	f7f3 fe3e 	bl	10f0a <snprintf>
   1d28e:	4404      	add	r4, r0
   1d290:	e736      	b.n	1d100 <fctrl_to_string+0x88>
    if ((s & 0x3000) == 0x3000) bp += snprintf(bp,sizeof(b)-(bp-b), "iFv|");
   1d292:	4918      	ldr	r1, [pc, #96]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d294:	1a61      	subs	r1, r4, r1
   1d296:	4a26      	ldr	r2, [pc, #152]	; (1d330 <fctrl_to_string+0x2b8>)
   1d298:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d29c:	4620      	mov	r0, r4
   1d29e:	f7f3 fe34 	bl	10f0a <snprintf>
   1d2a2:	4404      	add	r4, r0
   1d2a4:	e730      	b.n	1d108 <fctrl_to_string+0x90>
    if ((s & 0xC000) == 0x0000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcNo"); /* No destination address */
   1d2a6:	4913      	ldr	r1, [pc, #76]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d2a8:	1a61      	subs	r1, r4, r1
   1d2aa:	4a22      	ldr	r2, [pc, #136]	; (1d334 <fctrl_to_string+0x2bc>)
   1d2ac:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d2b0:	4620      	mov	r0, r4
   1d2b2:	f7f3 fe2a 	bl	10f0a <snprintf>
   1d2b6:	4404      	add	r4, r0
   1d2b8:	e72a      	b.n	1d110 <fctrl_to_string+0x98>
    if ((s & 0xC000) == 0x4000) bp += snprintf(bp,sizeof(b)-(bp-b), "SrcRs"); /* Reserved */
   1d2ba:	490e      	ldr	r1, [pc, #56]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d2bc:	1a61      	subs	r1, r4, r1
   1d2be:	4a1e      	ldr	r2, [pc, #120]	; (1d338 <fctrl_to_string+0x2c0>)
   1d2c0:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d2c4:	4620      	mov	r0, r4
   1d2c6:	f7f3 fe20 	bl	10f0a <snprintf>
   1d2ca:	4404      	add	r4, r0
   1d2cc:	e724      	b.n	1d118 <fctrl_to_string+0xa0>
    if ((s & 0xC000) == 0x8000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src16"); /* 16-bit destination address */
   1d2ce:	4909      	ldr	r1, [pc, #36]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d2d0:	1a61      	subs	r1, r4, r1
   1d2d2:	4a1a      	ldr	r2, [pc, #104]	; (1d33c <fctrl_to_string+0x2c4>)
   1d2d4:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d2d8:	4620      	mov	r0, r4
   1d2da:	f7f3 fe16 	bl	10f0a <snprintf>
   1d2de:	4404      	add	r4, r0
   1d2e0:	e71e      	b.n	1d120 <fctrl_to_string+0xa8>
    if ((s & 0xC000) == 0xC000) bp += snprintf(bp,sizeof(b)-(bp-b), "Src64"); /* 64-bit destination address */
   1d2e2:	4904      	ldr	r1, [pc, #16]	; (1d2f4 <fctrl_to_string+0x27c>)
   1d2e4:	1a61      	subs	r1, r4, r1
   1d2e6:	4a16      	ldr	r2, [pc, #88]	; (1d340 <fctrl_to_string+0x2c8>)
   1d2e8:	f1c1 0128 	rsb	r1, r1, #40	; 0x28
   1d2ec:	4620      	mov	r0, r4
   1d2ee:	f7f3 fe0c 	bl	10f0a <snprintf>
   1d2f2:	e719      	b.n	1d128 <fctrl_to_string+0xb0>
   1d2f4:	20005440 	.word	0x20005440
   1d2f8:	0002830c 	.word	0x0002830c
   1d2fc:	00028310 	.word	0x00028310
   1d300:	00028314 	.word	0x00028314
   1d304:	00028318 	.word	0x00028318
   1d308:	0002831c 	.word	0x0002831c
   1d30c:	00028324 	.word	0x00028324
   1d310:	0002832c 	.word	0x0002832c
   1d314:	00028334 	.word	0x00028334
   1d318:	0002833c 	.word	0x0002833c
   1d31c:	00028344 	.word	0x00028344
   1d320:	0002834c 	.word	0x0002834c
   1d324:	00028354 	.word	0x00028354
   1d328:	0002835c 	.word	0x0002835c
   1d32c:	00028364 	.word	0x00028364
   1d330:	00028368 	.word	0x00028368
   1d334:	00028370 	.word	0x00028370
   1d338:	00028378 	.word	0x00028378
   1d33c:	00028380 	.word	0x00028380
   1d340:	00028388 	.word	0x00028388

0001d344 <sys_status_to_string>:
{
   1d344:	b570      	push	{r4, r5, r6, lr}
   1d346:	4605      	mov	r5, r0
   1d348:	460e      	mov	r6, r1
    memset(b,0,sizeof(b));
   1d34a:	2280      	movs	r2, #128	; 0x80
   1d34c:	2100      	movs	r1, #0
   1d34e:	48c0      	ldr	r0, [pc, #768]	; (1d650 <sys_status_to_string+0x30c>)
   1d350:	f7f3 f993 	bl	1067a <memset>
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   1d354:	f016 0f04 	tst.w	r6, #4
   1d358:	f040 808a 	bne.w	1d470 <sys_status_to_string+0x12c>
    char *bp = b;
   1d35c:	4cbc      	ldr	r4, [pc, #752]	; (1d650 <sys_status_to_string+0x30c>)
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   1d35e:	f016 0f02 	tst.w	r6, #2
   1d362:	f040 808f 	bne.w	1d484 <sys_status_to_string+0x140>
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   1d366:	f016 0f01 	tst.w	r6, #1
   1d36a:	f040 8095 	bne.w	1d498 <sys_status_to_string+0x154>
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   1d36e:	2d00      	cmp	r5, #0
   1d370:	f2c0 809c 	blt.w	1d4ac <sys_status_to_string+0x168>
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   1d374:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
   1d378:	f040 80a2 	bne.w	1d4c0 <sys_status_to_string+0x17c>
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   1d37c:	f015 5f00 	tst.w	r5, #536870912	; 0x20000000
   1d380:	f040 80a8 	bne.w	1d4d4 <sys_status_to_string+0x190>
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   1d384:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
   1d388:	f040 80ae 	bne.w	1d4e8 <sys_status_to_string+0x1a4>
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   1d38c:	f015 6f00 	tst.w	r5, #134217728	; 0x8000000
   1d390:	f040 80b4 	bne.w	1d4fc <sys_status_to_string+0x1b8>
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   1d394:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
   1d398:	f040 80ba 	bne.w	1d510 <sys_status_to_string+0x1cc>
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   1d39c:	f015 7f00 	tst.w	r5, #33554432	; 0x2000000
   1d3a0:	f040 80c0 	bne.w	1d524 <sys_status_to_string+0x1e0>
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   1d3a4:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
   1d3a8:	f040 80c6 	bne.w	1d538 <sys_status_to_string+0x1f4>
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   1d3ac:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1d3b0:	f040 80cc 	bne.w	1d54c <sys_status_to_string+0x208>
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   1d3b4:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
   1d3b8:	f040 80d2 	bne.w	1d560 <sys_status_to_string+0x21c>
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   1d3bc:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
   1d3c0:	f040 80d8 	bne.w	1d574 <sys_status_to_string+0x230>
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   1d3c4:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
   1d3c8:	f040 80de 	bne.w	1d588 <sys_status_to_string+0x244>
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   1d3cc:	f415 2f00 	tst.w	r5, #524288	; 0x80000
   1d3d0:	f040 80e4 	bne.w	1d59c <sys_status_to_string+0x258>
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   1d3d4:	f415 2f80 	tst.w	r5, #262144	; 0x40000
   1d3d8:	f040 80ea 	bne.w	1d5b0 <sys_status_to_string+0x26c>
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   1d3dc:	f415 3f00 	tst.w	r5, #131072	; 0x20000
   1d3e0:	f040 80f0 	bne.w	1d5c4 <sys_status_to_string+0x280>
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   1d3e4:	f415 3f80 	tst.w	r5, #65536	; 0x10000
   1d3e8:	f040 80f6 	bne.w	1d5d8 <sys_status_to_string+0x294>
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   1d3ec:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   1d3f0:	f040 80fc 	bne.w	1d5ec <sys_status_to_string+0x2a8>
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   1d3f4:	f415 4f80 	tst.w	r5, #16384	; 0x4000
   1d3f8:	f040 8102 	bne.w	1d600 <sys_status_to_string+0x2bc>
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   1d3fc:	f415 5f00 	tst.w	r5, #8192	; 0x2000
   1d400:	f040 8108 	bne.w	1d614 <sys_status_to_string+0x2d0>
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   1d404:	f415 5f80 	tst.w	r5, #4096	; 0x1000
   1d408:	f040 810e 	bne.w	1d628 <sys_status_to_string+0x2e4>
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   1d40c:	f415 6f00 	tst.w	r5, #2048	; 0x800
   1d410:	f040 8114 	bne.w	1d63c <sys_status_to_string+0x2f8>
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   1d414:	f415 6f80 	tst.w	r5, #1024	; 0x400
   1d418:	f040 814c 	bne.w	1d6b4 <sys_status_to_string+0x370>
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   1d41c:	f415 7f00 	tst.w	r5, #512	; 0x200
   1d420:	f040 8152 	bne.w	1d6c8 <sys_status_to_string+0x384>
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   1d424:	f415 7f80 	tst.w	r5, #256	; 0x100
   1d428:	f040 8158 	bne.w	1d6dc <sys_status_to_string+0x398>
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   1d42c:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d430:	f040 815e 	bne.w	1d6f0 <sys_status_to_string+0x3ac>
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   1d434:	f015 0f40 	tst.w	r5, #64	; 0x40
   1d438:	f040 8164 	bne.w	1d704 <sys_status_to_string+0x3c0>
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   1d43c:	f015 0f20 	tst.w	r5, #32
   1d440:	f040 816a 	bne.w	1d718 <sys_status_to_string+0x3d4>
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   1d444:	f015 0f10 	tst.w	r5, #16
   1d448:	f040 8170 	bne.w	1d72c <sys_status_to_string+0x3e8>
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   1d44c:	f015 0f08 	tst.w	r5, #8
   1d450:	f040 8176 	bne.w	1d740 <sys_status_to_string+0x3fc>
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   1d454:	f015 0f04 	tst.w	r5, #4
   1d458:	f040 817c 	bne.w	1d754 <sys_status_to_string+0x410>
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   1d45c:	f015 0f02 	tst.w	r5, #2
   1d460:	f040 8182 	bne.w	1d768 <sys_status_to_string+0x424>
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   1d464:	f015 0f01 	tst.w	r5, #1
   1d468:	f040 8188 	bne.w	1d77c <sys_status_to_string+0x438>
}
   1d46c:	4878      	ldr	r0, [pc, #480]	; (1d650 <sys_status_to_string+0x30c>)
   1d46e:	bd70      	pop	{r4, r5, r6, pc}
    if (s & 0x0400000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPwrUpTmErr|" );
   1d470:	4c77      	ldr	r4, [pc, #476]	; (1d650 <sys_status_to_string+0x30c>)
   1d472:	4b78      	ldr	r3, [pc, #480]	; (1d654 <sys_status_to_string+0x310>)
   1d474:	46a4      	mov	ip, r4
   1d476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d478:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
   1d47c:	f8ac 3000 	strh.w	r3, [ip]
   1d480:	340d      	adds	r4, #13
   1d482:	e76c      	b.n	1d35e <sys_status_to_string+0x1a>
    if (s & 0x0200000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreambRej|");
   1d484:	4972      	ldr	r1, [pc, #456]	; (1d650 <sys_status_to_string+0x30c>)
   1d486:	1a61      	subs	r1, r4, r1
   1d488:	4a73      	ldr	r2, [pc, #460]	; (1d658 <sys_status_to_string+0x314>)
   1d48a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d48e:	4620      	mov	r0, r4
   1d490:	f7f3 fd3b 	bl	10f0a <snprintf>
   1d494:	4404      	add	r4, r0
   1d496:	e766      	b.n	1d366 <sys_status_to_string+0x22>
    if (s & 0x0100000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolCorr|");
   1d498:	496d      	ldr	r1, [pc, #436]	; (1d650 <sys_status_to_string+0x30c>)
   1d49a:	1a61      	subs	r1, r4, r1
   1d49c:	4a6f      	ldr	r2, [pc, #444]	; (1d65c <sys_status_to_string+0x318>)
   1d49e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d4a2:	4620      	mov	r0, r4
   1d4a4:	f7f3 fd31 	bl	10f0a <snprintf>
   1d4a8:	4404      	add	r4, r0
   1d4aa:	e760      	b.n	1d36e <sys_status_to_string+0x2a>
    if (s & 0x80000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ICRxBufPtr=1|");
   1d4ac:	4968      	ldr	r1, [pc, #416]	; (1d650 <sys_status_to_string+0x30c>)
   1d4ae:	1a61      	subs	r1, r4, r1
   1d4b0:	4a6b      	ldr	r2, [pc, #428]	; (1d660 <sys_status_to_string+0x31c>)
   1d4b2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d4b6:	4620      	mov	r0, r4
   1d4b8:	f7f3 fd27 	bl	10f0a <snprintf>
   1d4bc:	4404      	add	r4, r0
   1d4be:	e759      	b.n	1d374 <sys_status_to_string+0x30>
    if (s & 0x40000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HostRxBufPtr=1|");
   1d4c0:	4963      	ldr	r1, [pc, #396]	; (1d650 <sys_status_to_string+0x30c>)
   1d4c2:	1a61      	subs	r1, r4, r1
   1d4c4:	4a67      	ldr	r2, [pc, #412]	; (1d664 <sys_status_to_string+0x320>)
   1d4c6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d4ca:	4620      	mov	r0, r4
   1d4cc:	f7f3 fd1d 	bl	10f0a <snprintf>
   1d4d0:	4404      	add	r4, r0
   1d4d2:	e753      	b.n	1d37c <sys_status_to_string+0x38>
    if (s & 0x20000000) bp += snprintf(bp,sizeof(b)-(bp-b), "AutFrameFiltRej|");
   1d4d4:	495e      	ldr	r1, [pc, #376]	; (1d650 <sys_status_to_string+0x30c>)
   1d4d6:	1a61      	subs	r1, r4, r1
   1d4d8:	4a63      	ldr	r2, [pc, #396]	; (1d668 <sys_status_to_string+0x324>)
   1d4da:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d4de:	4620      	mov	r0, r4
   1d4e0:	f7f3 fd13 	bl	10f0a <snprintf>
   1d4e4:	4404      	add	r4, r0
   1d4e6:	e74d      	b.n	1d384 <sys_status_to_string+0x40>
    if (s & 0x10000000) bp += snprintf(bp,sizeof(b)-(bp-b), "TransmitBufferError|");
   1d4e8:	4959      	ldr	r1, [pc, #356]	; (1d650 <sys_status_to_string+0x30c>)
   1d4ea:	1a61      	subs	r1, r4, r1
   1d4ec:	4a5f      	ldr	r2, [pc, #380]	; (1d66c <sys_status_to_string+0x328>)
   1d4ee:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7f3 fd09 	bl	10f0a <snprintf>
   1d4f8:	4404      	add	r4, r0
   1d4fa:	e747      	b.n	1d38c <sys_status_to_string+0x48>
    if (s & 0x08000000) bp += snprintf(bp,sizeof(b)-(bp-b), "HalfPeriodDelayWarn|");
   1d4fc:	4954      	ldr	r1, [pc, #336]	; (1d650 <sys_status_to_string+0x30c>)
   1d4fe:	1a61      	subs	r1, r4, r1
   1d500:	4a5b      	ldr	r2, [pc, #364]	; (1d670 <sys_status_to_string+0x32c>)
   1d502:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d506:	4620      	mov	r0, r4
   1d508:	f7f3 fcff 	bl	10f0a <snprintf>
   1d50c:	4404      	add	r4, r0
   1d50e:	e741      	b.n	1d394 <sys_status_to_string+0x50>
    if (s & 0x04000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RXSFDTimeout|");
   1d510:	494f      	ldr	r1, [pc, #316]	; (1d650 <sys_status_to_string+0x30c>)
   1d512:	1a61      	subs	r1, r4, r1
   1d514:	4a57      	ldr	r2, [pc, #348]	; (1d674 <sys_status_to_string+0x330>)
   1d516:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d51a:	4620      	mov	r0, r4
   1d51c:	f7f3 fcf5 	bl	10f0a <snprintf>
   1d520:	4404      	add	r4, r0
   1d522:	e73b      	b.n	1d39c <sys_status_to_string+0x58>
    if (s & 0x02000000) bp += snprintf(bp,sizeof(b)-(bp-b), "ClockPLLLosingLock|");
   1d524:	494a      	ldr	r1, [pc, #296]	; (1d650 <sys_status_to_string+0x30c>)
   1d526:	1a61      	subs	r1, r4, r1
   1d528:	4a53      	ldr	r2, [pc, #332]	; (1d678 <sys_status_to_string+0x334>)
   1d52a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d52e:	4620      	mov	r0, r4
   1d530:	f7f3 fceb 	bl	10f0a <snprintf>
   1d534:	4404      	add	r4, r0
   1d536:	e735      	b.n	1d3a4 <sys_status_to_string+0x60>
    if (s & 0x01000000) bp += snprintf(bp,sizeof(b)-(bp-b), "RFPLLLosingLock|");
   1d538:	4945      	ldr	r1, [pc, #276]	; (1d650 <sys_status_to_string+0x30c>)
   1d53a:	1a61      	subs	r1, r4, r1
   1d53c:	4a4f      	ldr	r2, [pc, #316]	; (1d67c <sys_status_to_string+0x338>)
   1d53e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d542:	4620      	mov	r0, r4
   1d544:	f7f3 fce1 	bl	10f0a <snprintf>
   1d548:	4404      	add	r4, r0
   1d54a:	e72f      	b.n	1d3ac <sys_status_to_string+0x68>
    if (s & 0x00800000) bp += snprintf(bp,sizeof(b)-(bp-b), "SLEEP2INIT|");
   1d54c:	4940      	ldr	r1, [pc, #256]	; (1d650 <sys_status_to_string+0x30c>)
   1d54e:	1a61      	subs	r1, r4, r1
   1d550:	4a4b      	ldr	r2, [pc, #300]	; (1d680 <sys_status_to_string+0x33c>)
   1d552:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d556:	4620      	mov	r0, r4
   1d558:	f7f3 fcd7 	bl	10f0a <snprintf>
   1d55c:	4404      	add	r4, r0
   1d55e:	e729      	b.n	1d3b4 <sys_status_to_string+0x70>
    if (s & 0x00400000) bp += snprintf(bp,sizeof(b)-(bp-b), "GpioInt|");
   1d560:	493b      	ldr	r1, [pc, #236]	; (1d650 <sys_status_to_string+0x30c>)
   1d562:	1a61      	subs	r1, r4, r1
   1d564:	4a47      	ldr	r2, [pc, #284]	; (1d684 <sys_status_to_string+0x340>)
   1d566:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d56a:	4620      	mov	r0, r4
   1d56c:	f7f3 fccd 	bl	10f0a <snprintf>
   1d570:	4404      	add	r4, r0
   1d572:	e723      	b.n	1d3bc <sys_status_to_string+0x78>
    if (s & 0x00200000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDetTimeout|");
   1d574:	4936      	ldr	r1, [pc, #216]	; (1d650 <sys_status_to_string+0x30c>)
   1d576:	1a61      	subs	r1, r4, r1
   1d578:	4a43      	ldr	r2, [pc, #268]	; (1d688 <sys_status_to_string+0x344>)
   1d57a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d57e:	4620      	mov	r0, r4
   1d580:	f7f3 fcc3 	bl	10f0a <snprintf>
   1d584:	4404      	add	r4, r0
   1d586:	e71d      	b.n	1d3c4 <sys_status_to_string+0x80>
    if (s & 0x00100000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxOvErr|");
   1d588:	4931      	ldr	r1, [pc, #196]	; (1d650 <sys_status_to_string+0x30c>)
   1d58a:	1a61      	subs	r1, r4, r1
   1d58c:	4a3f      	ldr	r2, [pc, #252]	; (1d68c <sys_status_to_string+0x348>)
   1d58e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d592:	4620      	mov	r0, r4
   1d594:	f7f3 fcb9 	bl	10f0a <snprintf>
   1d598:	4404      	add	r4, r0
   1d59a:	e717      	b.n	1d3cc <sys_status_to_string+0x88>
    if (s & 0x00080000) bp += snprintf(bp,sizeof(b)-(bp-b), "(bit19 reserved)|");
   1d59c:	492c      	ldr	r1, [pc, #176]	; (1d650 <sys_status_to_string+0x30c>)
   1d59e:	1a61      	subs	r1, r4, r1
   1d5a0:	4a3b      	ldr	r2, [pc, #236]	; (1d690 <sys_status_to_string+0x34c>)
   1d5a2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d5a6:	4620      	mov	r0, r4
   1d5a8:	f7f3 fcaf 	bl	10f0a <snprintf>
   1d5ac:	4404      	add	r4, r0
   1d5ae:	e711      	b.n	1d3d4 <sys_status_to_string+0x90>
    if (s & 0x00040000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEerr|");
   1d5b0:	4927      	ldr	r1, [pc, #156]	; (1d650 <sys_status_to_string+0x30c>)
   1d5b2:	1a61      	subs	r1, r4, r1
   1d5b4:	4a37      	ldr	r2, [pc, #220]	; (1d694 <sys_status_to_string+0x350>)
   1d5b6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d5ba:	4620      	mov	r0, r4
   1d5bc:	f7f3 fca5 	bl	10f0a <snprintf>
   1d5c0:	4404      	add	r4, r0
   1d5c2:	e70b      	b.n	1d3dc <sys_status_to_string+0x98>
    if (s & 0x00020000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxTimeout|");
   1d5c4:	4922      	ldr	r1, [pc, #136]	; (1d650 <sys_status_to_string+0x30c>)
   1d5c6:	1a61      	subs	r1, r4, r1
   1d5c8:	4a33      	ldr	r2, [pc, #204]	; (1d698 <sys_status_to_string+0x354>)
   1d5ca:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d5ce:	4620      	mov	r0, r4
   1d5d0:	f7f3 fc9b 	bl	10f0a <snprintf>
   1d5d4:	4404      	add	r4, r0
   1d5d6:	e705      	b.n	1d3e4 <sys_status_to_string+0xa0>
    if (s & 0x00010000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxReedSolomonFrameSyncLoss|");
   1d5d8:	491d      	ldr	r1, [pc, #116]	; (1d650 <sys_status_to_string+0x30c>)
   1d5da:	1a61      	subs	r1, r4, r1
   1d5dc:	4a2f      	ldr	r2, [pc, #188]	; (1d69c <sys_status_to_string+0x358>)
   1d5de:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d5e2:	4620      	mov	r0, r4
   1d5e4:	f7f3 fc91 	bl	10f0a <snprintf>
   1d5e8:	4404      	add	r4, r0
   1d5ea:	e6ff      	b.n	1d3ec <sys_status_to_string+0xa8>
    if (s & 0x00008000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSErr|");
   1d5ec:	4918      	ldr	r1, [pc, #96]	; (1d650 <sys_status_to_string+0x30c>)
   1d5ee:	1a61      	subs	r1, r4, r1
   1d5f0:	4a2b      	ldr	r2, [pc, #172]	; (1d6a0 <sys_status_to_string+0x35c>)
   1d5f2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d5f6:	4620      	mov	r0, r4
   1d5f8:	f7f3 fc87 	bl	10f0a <snprintf>
   1d5fc:	4404      	add	r4, r0
   1d5fe:	e6f9      	b.n	1d3f4 <sys_status_to_string+0xb0>
    if (s & 0x00004000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxFCSGood|");
   1d600:	4913      	ldr	r1, [pc, #76]	; (1d650 <sys_status_to_string+0x30c>)
   1d602:	1a61      	subs	r1, r4, r1
   1d604:	4a27      	ldr	r2, [pc, #156]	; (1d6a4 <sys_status_to_string+0x360>)
   1d606:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d60a:	4620      	mov	r0, r4
   1d60c:	f7f3 fc7d 	bl	10f0a <snprintf>
   1d610:	4404      	add	r4, r0
   1d612:	e6f3      	b.n	1d3fc <sys_status_to_string+0xb8>
    if (s & 0x00002000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxDataFrmRdy|");
   1d614:	490e      	ldr	r1, [pc, #56]	; (1d650 <sys_status_to_string+0x30c>)
   1d616:	1a61      	subs	r1, r4, r1
   1d618:	4a23      	ldr	r2, [pc, #140]	; (1d6a8 <sys_status_to_string+0x364>)
   1d61a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d61e:	4620      	mov	r0, r4
   1d620:	f7f3 fc73 	bl	10f0a <snprintf>
   1d624:	4404      	add	r4, r0
   1d626:	e6ed      	b.n	1d404 <sys_status_to_string+0xc0>
    if (s & 0x00001000) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYErr|");
   1d628:	4909      	ldr	r1, [pc, #36]	; (1d650 <sys_status_to_string+0x30c>)
   1d62a:	1a61      	subs	r1, r4, r1
   1d62c:	4a1f      	ldr	r2, [pc, #124]	; (1d6ac <sys_status_to_string+0x368>)
   1d62e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d632:	4620      	mov	r0, r4
   1d634:	f7f3 fc69 	bl	10f0a <snprintf>
   1d638:	4404      	add	r4, r0
   1d63a:	e6e7      	b.n	1d40c <sys_status_to_string+0xc8>
    if (s & 0x00000800) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPHYDet|");
   1d63c:	4904      	ldr	r1, [pc, #16]	; (1d650 <sys_status_to_string+0x30c>)
   1d63e:	1a61      	subs	r1, r4, r1
   1d640:	4a1b      	ldr	r2, [pc, #108]	; (1d6b0 <sys_status_to_string+0x36c>)
   1d642:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d646:	4620      	mov	r0, r4
   1d648:	f7f3 fc5f 	bl	10f0a <snprintf>
   1d64c:	4404      	add	r4, r0
   1d64e:	e6e1      	b.n	1d414 <sys_status_to_string+0xd0>
   1d650:	200053c0 	.word	0x200053c0
   1d654:	00028390 	.word	0x00028390
   1d658:	000283a0 	.word	0x000283a0
   1d65c:	000283b0 	.word	0x000283b0
   1d660:	000283c0 	.word	0x000283c0
   1d664:	000283d0 	.word	0x000283d0
   1d668:	000283e0 	.word	0x000283e0
   1d66c:	000283f4 	.word	0x000283f4
   1d670:	0002840c 	.word	0x0002840c
   1d674:	00028424 	.word	0x00028424
   1d678:	00028434 	.word	0x00028434
   1d67c:	00028448 	.word	0x00028448
   1d680:	0002845c 	.word	0x0002845c
   1d684:	00028468 	.word	0x00028468
   1d688:	00028474 	.word	0x00028474
   1d68c:	00028488 	.word	0x00028488
   1d690:	00028494 	.word	0x00028494
   1d694:	000284a8 	.word	0x000284a8
   1d698:	000284b4 	.word	0x000284b4
   1d69c:	000284c0 	.word	0x000284c0
   1d6a0:	000284dc 	.word	0x000284dc
   1d6a4:	000284e8 	.word	0x000284e8
   1d6a8:	000284f4 	.word	0x000284f4
   1d6ac:	00028504 	.word	0x00028504
   1d6b0:	00028510 	.word	0x00028510
    if (s & 0x00000400) bp += snprintf(bp,sizeof(b)-(bp-b), "RxLDEdone|");
   1d6b4:	4936      	ldr	r1, [pc, #216]	; (1d790 <sys_status_to_string+0x44c>)
   1d6b6:	1a61      	subs	r1, r4, r1
   1d6b8:	4a36      	ldr	r2, [pc, #216]	; (1d794 <sys_status_to_string+0x450>)
   1d6ba:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d6be:	4620      	mov	r0, r4
   1d6c0:	f7f3 fc23 	bl	10f0a <snprintf>
   1d6c4:	4404      	add	r4, r0
   1d6c6:	e6a9      	b.n	1d41c <sys_status_to_string+0xd8>
    if (s & 0x00000200) bp += snprintf(bp,sizeof(b)-(bp-b), "RxSFDet|");
   1d6c8:	4931      	ldr	r1, [pc, #196]	; (1d790 <sys_status_to_string+0x44c>)
   1d6ca:	1a61      	subs	r1, r4, r1
   1d6cc:	4a32      	ldr	r2, [pc, #200]	; (1d798 <sys_status_to_string+0x454>)
   1d6ce:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d6d2:	4620      	mov	r0, r4
   1d6d4:	f7f3 fc19 	bl	10f0a <snprintf>
   1d6d8:	4404      	add	r4, r0
   1d6da:	e6a3      	b.n	1d424 <sys_status_to_string+0xe0>
    if (s & 0x00000100) bp += snprintf(bp,sizeof(b)-(bp-b), "RxPreamDet|");
   1d6dc:	492c      	ldr	r1, [pc, #176]	; (1d790 <sys_status_to_string+0x44c>)
   1d6de:	1a61      	subs	r1, r4, r1
   1d6e0:	4a2e      	ldr	r2, [pc, #184]	; (1d79c <sys_status_to_string+0x458>)
   1d6e2:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d6e6:	4620      	mov	r0, r4
   1d6e8:	f7f3 fc0f 	bl	10f0a <snprintf>
   1d6ec:	4404      	add	r4, r0
   1d6ee:	e69d      	b.n	1d42c <sys_status_to_string+0xe8>
    if (s & 0x00000080) bp += snprintf(bp,sizeof(b)-(bp-b), "TxFrameSent|");
   1d6f0:	4927      	ldr	r1, [pc, #156]	; (1d790 <sys_status_to_string+0x44c>)
   1d6f2:	1a61      	subs	r1, r4, r1
   1d6f4:	4a2a      	ldr	r2, [pc, #168]	; (1d7a0 <sys_status_to_string+0x45c>)
   1d6f6:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d6fa:	4620      	mov	r0, r4
   1d6fc:	f7f3 fc05 	bl	10f0a <snprintf>
   1d700:	4404      	add	r4, r0
   1d702:	e697      	b.n	1d434 <sys_status_to_string+0xf0>
    if (s & 0x00000040) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPHYDone|");
   1d704:	4922      	ldr	r1, [pc, #136]	; (1d790 <sys_status_to_string+0x44c>)
   1d706:	1a61      	subs	r1, r4, r1
   1d708:	4a26      	ldr	r2, [pc, #152]	; (1d7a4 <sys_status_to_string+0x460>)
   1d70a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d70e:	4620      	mov	r0, r4
   1d710:	f7f3 fbfb 	bl	10f0a <snprintf>
   1d714:	4404      	add	r4, r0
   1d716:	e691      	b.n	1d43c <sys_status_to_string+0xf8>
    if (s & 0x00000020) bp += snprintf(bp,sizeof(b)-(bp-b), "TxPreamDone|");
   1d718:	491d      	ldr	r1, [pc, #116]	; (1d790 <sys_status_to_string+0x44c>)
   1d71a:	1a61      	subs	r1, r4, r1
   1d71c:	4a22      	ldr	r2, [pc, #136]	; (1d7a8 <sys_status_to_string+0x464>)
   1d71e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d722:	4620      	mov	r0, r4
   1d724:	f7f3 fbf1 	bl	10f0a <snprintf>
   1d728:	4404      	add	r4, r0
   1d72a:	e68b      	b.n	1d444 <sys_status_to_string+0x100>
    if (s & 0x00000010) bp += snprintf(bp,sizeof(b)-(bp-b), "TxStart|");
   1d72c:	4918      	ldr	r1, [pc, #96]	; (1d790 <sys_status_to_string+0x44c>)
   1d72e:	1a61      	subs	r1, r4, r1
   1d730:	4a1e      	ldr	r2, [pc, #120]	; (1d7ac <sys_status_to_string+0x468>)
   1d732:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d736:	4620      	mov	r0, r4
   1d738:	f7f3 fbe7 	bl	10f0a <snprintf>
   1d73c:	4404      	add	r4, r0
   1d73e:	e685      	b.n	1d44c <sys_status_to_string+0x108>
    if (s & 0x00000008) bp += snprintf(bp,sizeof(b)-(bp-b), "AutoAck|");
   1d740:	4913      	ldr	r1, [pc, #76]	; (1d790 <sys_status_to_string+0x44c>)
   1d742:	1a61      	subs	r1, r4, r1
   1d744:	4a1a      	ldr	r2, [pc, #104]	; (1d7b0 <sys_status_to_string+0x46c>)
   1d746:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d74a:	4620      	mov	r0, r4
   1d74c:	f7f3 fbdd 	bl	10f0a <snprintf>
   1d750:	4404      	add	r4, r0
   1d752:	e67f      	b.n	1d454 <sys_status_to_string+0x110>
    if (s & 0x00000004) bp += snprintf(bp,sizeof(b)-(bp-b), "ExtClock Reset|");
   1d754:	490e      	ldr	r1, [pc, #56]	; (1d790 <sys_status_to_string+0x44c>)
   1d756:	1a61      	subs	r1, r4, r1
   1d758:	4a16      	ldr	r2, [pc, #88]	; (1d7b4 <sys_status_to_string+0x470>)
   1d75a:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d75e:	4620      	mov	r0, r4
   1d760:	f7f3 fbd3 	bl	10f0a <snprintf>
   1d764:	4404      	add	r4, r0
   1d766:	e679      	b.n	1d45c <sys_status_to_string+0x118>
    if (s & 0x00000002) bp += snprintf(bp,sizeof(b)-(bp-b), "Clock PLL Lock|");
   1d768:	4909      	ldr	r1, [pc, #36]	; (1d790 <sys_status_to_string+0x44c>)
   1d76a:	1a61      	subs	r1, r4, r1
   1d76c:	4a12      	ldr	r2, [pc, #72]	; (1d7b8 <sys_status_to_string+0x474>)
   1d76e:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d772:	4620      	mov	r0, r4
   1d774:	f7f3 fbc9 	bl	10f0a <snprintf>
   1d778:	4404      	add	r4, r0
   1d77a:	e673      	b.n	1d464 <sys_status_to_string+0x120>
    if (s & 0x00000001) bp += snprintf(bp,sizeof(b)-(bp-b), "IRS");
   1d77c:	4904      	ldr	r1, [pc, #16]	; (1d790 <sys_status_to_string+0x44c>)
   1d77e:	1a61      	subs	r1, r4, r1
   1d780:	4a0e      	ldr	r2, [pc, #56]	; (1d7bc <sys_status_to_string+0x478>)
   1d782:	f1c1 0180 	rsb	r1, r1, #128	; 0x80
   1d786:	4620      	mov	r0, r4
   1d788:	f7f3 fbbf 	bl	10f0a <snprintf>
   1d78c:	e66e      	b.n	1d46c <sys_status_to_string+0x128>
   1d78e:	bf00      	nop
   1d790:	200053c0 	.word	0x200053c0
   1d794:	0002851c 	.word	0x0002851c
   1d798:	00028528 	.word	0x00028528
   1d79c:	00028534 	.word	0x00028534
   1d7a0:	00028540 	.word	0x00028540
   1d7a4:	00028550 	.word	0x00028550
   1d7a8:	0002855c 	.word	0x0002855c
   1d7ac:	0002856c 	.word	0x0002856c
   1d7b0:	00028578 	.word	0x00028578
   1d7b4:	00028584 	.word	0x00028584
   1d7b8:	00028594 	.word	0x00028594
   1d7bc:	000285a4 	.word	0x000285a4

0001d7c0 <print_interrupt_bt_line>:
{
   1d7c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7c4:	b085      	sub	sp, #20
   1d7c6:	4614      	mov	r4, r2
   1d7c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    if (!p->utime) return 0;
   1d7ca:	6812      	ldr	r2, [r2, #0]
   1d7cc:	2a00      	cmp	r2, #0
   1d7ce:	d078      	beq.n	1d8c2 <print_interrupt_bt_line+0x102>
   1d7d0:	4606      	mov	r6, r0
   1d7d2:	460f      	mov	r7, r1
    if (!*start_t) *start_t = p->utime;
   1d7d4:	6801      	ldr	r1, [r0, #0]
   1d7d6:	b901      	cbnz	r1, 1d7da <print_interrupt_bt_line+0x1a>
   1d7d8:	6002      	str	r2, [r0, #0]
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   1d7da:	2b00      	cmp	r3, #0
   1d7dc:	d055      	beq.n	1d88a <print_interrupt_bt_line+0xca>
   1d7de:	6822      	ldr	r2, [r4, #0]
   1d7e0:	681b      	ldr	r3, [r3, #0]
    if (diff < 0) diff = 0;
   1d7e2:	ebb2 0803 	subs.w	r8, r2, r3
   1d7e6:	d453      	bmi.n	1d890 <print_interrupt_bt_line+0xd0>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime));
   1d7e8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 1d8f8 <print_interrupt_bt_line+0x138>
   1d7ec:	6822      	ldr	r2, [r4, #0]
   1d7ee:	4649      	mov	r1, r9
   1d7f0:	4628      	mov	r0, r5
   1d7f2:	f7f5 f965 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %10lu ", dpl_cputime_ticks_to_usecs(p->utime-*start_t));
   1d7f6:	6822      	ldr	r2, [r4, #0]
   1d7f8:	6833      	ldr	r3, [r6, #0]
   1d7fa:	1ad2      	subs	r2, r2, r3
   1d7fc:	4649      	mov	r1, r9
   1d7fe:	4628      	mov	r0, r5
   1d800:	f7f5 f95e 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %8lu ", dpl_cputime_ticks_to_usecs(diff));
   1d804:	4642      	mov	r2, r8
   1d806:	4930      	ldr	r1, [pc, #192]	; (1d8c8 <print_interrupt_bt_line+0x108>)
   1d808:	4628      	mov	r0, r5
   1d80a:	f7f5 f959 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %6lu ", dpl_cputime_ticks_to_usecs(p->utime_end-p->utime));
   1d80e:	68e2      	ldr	r2, [r4, #12]
   1d810:	6823      	ldr	r3, [r4, #0]
   1d812:	1ad2      	subs	r2, r2, r3
   1d814:	492d      	ldr	r1, [pc, #180]	; (1d8cc <print_interrupt_bt_line+0x10c>)
   1d816:	4628      	mov	r0, r5
   1d818:	f7f5 f952 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   1d81c:	7a63      	ldrb	r3, [r4, #9]
   1d81e:	f013 0f01 	tst.w	r3, #1
   1d822:	d038      	beq.n	1d896 <print_interrupt_bt_line+0xd6>
   1d824:	4a2a      	ldr	r2, [pc, #168]	; (1d8d0 <print_interrupt_bt_line+0x110>)
   1d826:	492b      	ldr	r1, [pc, #172]	; (1d8d4 <print_interrupt_bt_line+0x114>)
   1d828:	4628      	mov	r0, r5
   1d82a:	f7f5 f949 	bl	12ac0 <streamer_printf>
    if (p->fctrl) {
   1d82e:	8960      	ldrh	r0, [r4, #10]
   1d830:	2800      	cmp	r0, #0
   1d832:	d039      	beq.n	1d8a8 <print_interrupt_bt_line+0xe8>
        if (verbose&0x1) {
   1d834:	f017 0f01 	tst.w	r7, #1
   1d838:	d02f      	beq.n	1d89a <print_interrupt_bt_line+0xda>
            char *s = fctrl_to_string(p->fctrl);
   1d83a:	f7ff fc1d 	bl	1d078 <fctrl_to_string>
   1d83e:	4606      	mov	r6, r0
            streamer_printf(streamer, " %02X %02X (%s)%*s", p->fctrl&0xff, p->fctrl>>8, s, 32-strlen(s), " ");
   1d840:	8967      	ldrh	r7, [r4, #10]
   1d842:	f7f2 ff51 	bl	106e8 <strlen>
   1d846:	4b24      	ldr	r3, [pc, #144]	; (1d8d8 <print_interrupt_bt_line+0x118>)
   1d848:	9302      	str	r3, [sp, #8]
   1d84a:	f1c0 0020 	rsb	r0, r0, #32
   1d84e:	9001      	str	r0, [sp, #4]
   1d850:	9600      	str	r6, [sp, #0]
   1d852:	0a3b      	lsrs	r3, r7, #8
   1d854:	b2fa      	uxtb	r2, r7
   1d856:	4921      	ldr	r1, [pc, #132]	; (1d8dc <print_interrupt_bt_line+0x11c>)
   1d858:	4628      	mov	r0, r5
   1d85a:	f7f5 f931 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %0*llX ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, DW1000_SYS_STATUS_ASSEMBLE(p));
   1d85e:	6863      	ldr	r3, [r4, #4]
   1d860:	2600      	movs	r6, #0
   1d862:	9300      	str	r3, [sp, #0]
   1d864:	9601      	str	r6, [sp, #4]
   1d866:	2208      	movs	r2, #8
   1d868:	491d      	ldr	r1, [pc, #116]	; (1d8e0 <print_interrupt_bt_line+0x120>)
   1d86a:	4628      	mov	r0, r5
   1d86c:	f7f5 f928 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %s", sys_status_to_string(DW1000_SYS_STATUS_ASSEMBLE(p)));
   1d870:	6860      	ldr	r0, [r4, #4]
   1d872:	4631      	mov	r1, r6
   1d874:	f7ff fd66 	bl	1d344 <sys_status_to_string>
   1d878:	4602      	mov	r2, r0
   1d87a:	491a      	ldr	r1, [pc, #104]	; (1d8e4 <print_interrupt_bt_line+0x124>)
   1d87c:	4628      	mov	r0, r5
   1d87e:	f7f5 f91f 	bl	12ac0 <streamer_printf>
    return 1;
   1d882:	2001      	movs	r0, #1
}
   1d884:	b005      	add	sp, #20
   1d886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int32_t diff = (p_last)? p->utime-p_last->utime : 0;
   1d88a:	f04f 0800 	mov.w	r8, #0
   1d88e:	e7ab      	b.n	1d7e8 <print_interrupt_bt_line+0x28>
    if (diff < 0) diff = 0;
   1d890:	f04f 0800 	mov.w	r8, #0
   1d894:	e7a8      	b.n	1d7e8 <print_interrupt_bt_line+0x28>
    streamer_printf(streamer, " %2s ", p->interrupt_reentry ? "r":" ");
   1d896:	4a10      	ldr	r2, [pc, #64]	; (1d8d8 <print_interrupt_bt_line+0x118>)
   1d898:	e7c5      	b.n	1d826 <print_interrupt_bt_line+0x66>
            streamer_printf(streamer, " %02X %02X ", p->fctrl&0xff, p->fctrl>>8);
   1d89a:	0a03      	lsrs	r3, r0, #8
   1d89c:	b2c2      	uxtb	r2, r0
   1d89e:	4912      	ldr	r1, [pc, #72]	; (1d8e8 <print_interrupt_bt_line+0x128>)
   1d8a0:	4628      	mov	r0, r5
   1d8a2:	f7f5 f90d 	bl	12ac0 <streamer_printf>
   1d8a6:	e7da      	b.n	1d85e <print_interrupt_bt_line+0x9e>
        streamer_printf(streamer, "       ");
   1d8a8:	4910      	ldr	r1, [pc, #64]	; (1d8ec <print_interrupt_bt_line+0x12c>)
   1d8aa:	4628      	mov	r0, r5
   1d8ac:	f7f5 f908 	bl	12ac0 <streamer_printf>
        if (verbose&0x1) {
   1d8b0:	f017 0f01 	tst.w	r7, #1
   1d8b4:	d0d3      	beq.n	1d85e <print_interrupt_bt_line+0x9e>
            streamer_printf(streamer, " %32s ", "");
   1d8b6:	4a0e      	ldr	r2, [pc, #56]	; (1d8f0 <print_interrupt_bt_line+0x130>)
   1d8b8:	490e      	ldr	r1, [pc, #56]	; (1d8f4 <print_interrupt_bt_line+0x134>)
   1d8ba:	4628      	mov	r0, r5
   1d8bc:	f7f5 f900 	bl	12ac0 <streamer_printf>
   1d8c0:	e7cd      	b.n	1d85e <print_interrupt_bt_line+0x9e>
    if (!p->utime) return 0;
   1d8c2:	2000      	movs	r0, #0
   1d8c4:	e7de      	b.n	1d884 <print_interrupt_bt_line+0xc4>
   1d8c6:	bf00      	nop
   1d8c8:	000285b0 	.word	0x000285b0
   1d8cc:	000285b8 	.word	0x000285b8
   1d8d0:	000268d0 	.word	0x000268d0
   1d8d4:	000285c0 	.word	0x000285c0
   1d8d8:	000267a8 	.word	0x000267a8
   1d8dc:	000285c8 	.word	0x000285c8
   1d8e0:	000285f8 	.word	0x000285f8
   1d8e4:	00028604 	.word	0x00028604
   1d8e8:	000285dc 	.word	0x000285dc
   1d8ec:	000285e8 	.word	0x000285e8
   1d8f0:	00028874 	.word	0x00028874
   1d8f4:	000285f0 	.word	0x000285f0
   1d8f8:	000285a8 	.word	0x000285a8

0001d8fc <dw1000_cli_dump_registers>:
{
   1d8fc:	b570      	push	{r4, r5, r6, lr}
   1d8fe:	b082      	sub	sp, #8
   1d900:	4605      	mov	r5, r0
   1d902:	460e      	mov	r6, r1
    for(i=0; i<0x37; i++)
   1d904:	2400      	movs	r4, #0
   1d906:	e00e      	b.n	1d926 <dw1000_cli_dump_registers+0x2a>
            reg = dw1000_read_reg(inst, i, 0, 4);
   1d908:	2304      	movs	r3, #4
   1d90a:	2200      	movs	r2, #0
   1d90c:	b2a1      	uxth	r1, r4
   1d90e:	4628      	mov	r0, r5
   1d910:	f7fb ffd4 	bl	198bc <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%08llX\"}\n",i,reg&0xffffffff);
   1d914:	9000      	str	r0, [sp, #0]
   1d916:	2300      	movs	r3, #0
   1d918:	9301      	str	r3, [sp, #4]
   1d91a:	4622      	mov	r2, r4
   1d91c:	4950      	ldr	r1, [pc, #320]	; (1da60 <dw1000_cli_dump_registers+0x164>)
   1d91e:	4630      	mov	r0, r6
   1d920:	f7f5 f8ce 	bl	12ac0 <streamer_printf>
    for(i=0; i<0x37; i++)
   1d924:	3401      	adds	r4, #1
   1d926:	2c36      	cmp	r4, #54	; 0x36
   1d928:	dc77      	bgt.n	1da1a <dw1000_cli_dump_registers+0x11e>
        if (i==0x05 || i==0x07 || i==0x0B ||
   1d92a:	2c05      	cmp	r4, #5
   1d92c:	d0fa      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
   1d92e:	2c07      	cmp	r4, #7
   1d930:	d0f8      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
   1d932:	2c0b      	cmp	r4, #11
   1d934:	d0f6      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
   1d936:	2c16      	cmp	r4, #22
   1d938:	d0f4      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
            i==0x16 || i==0x1B || i==0x1C ||
   1d93a:	2c1b      	cmp	r4, #27
   1d93c:	d0f2      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
   1d93e:	2c1c      	cmp	r4, #28
   1d940:	d0f0      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
   1d942:	2c20      	cmp	r4, #32
   1d944:	d0ee      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
            i==0x20 || i==0x22 || i==0x29 ||
   1d946:	2c22      	cmp	r4, #34	; 0x22
   1d948:	d0ec      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
   1d94a:	2c29      	cmp	r4, #41	; 0x29
   1d94c:	d0ea      	beq.n	1d924 <dw1000_cli_dump_registers+0x28>
            (i>0x29 && i<0x36)) {
   1d94e:	f1a4 032a 	sub.w	r3, r4, #42	; 0x2a
            i==0x20 || i==0x22 || i==0x29 ||
   1d952:	2b0b      	cmp	r3, #11
   1d954:	d9e6      	bls.n	1d924 <dw1000_cli_dump_registers+0x28>
        switch (i) {
   1d956:	2c1f      	cmp	r4, #31
   1d958:	d851      	bhi.n	1d9fe <dw1000_cli_dump_registers+0x102>
   1d95a:	a301      	add	r3, pc, #4	; (adr r3, 1d960 <dw1000_cli_dump_registers+0x64>)
   1d95c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
   1d960:	0001d909 	.word	0x0001d909
   1d964:	0001d9ff 	.word	0x0001d9ff
   1d968:	0001d9ff 	.word	0x0001d9ff
   1d96c:	0001d909 	.word	0x0001d909
   1d970:	0001d909 	.word	0x0001d909
   1d974:	0001d9ff 	.word	0x0001d9ff
   1d978:	0001d9e1 	.word	0x0001d9e1
   1d97c:	0001d9ff 	.word	0x0001d9ff
   1d980:	0001d9e1 	.word	0x0001d9e1
   1d984:	0001d9ff 	.word	0x0001d9ff
   1d988:	0001d9e1 	.word	0x0001d9e1
   1d98c:	0001d9ff 	.word	0x0001d9ff
   1d990:	0001d909 	.word	0x0001d909
   1d994:	0001d909 	.word	0x0001d909
   1d998:	0001d9e1 	.word	0x0001d9e1
   1d99c:	0001d9e1 	.word	0x0001d9e1
   1d9a0:	0001d909 	.word	0x0001d909
   1d9a4:	0001d9ff 	.word	0x0001d9ff
   1d9a8:	0001d9ff 	.word	0x0001d9ff
   1d9ac:	0001d909 	.word	0x0001d909
   1d9b0:	0001d9e1 	.word	0x0001d9e1
   1d9b4:	0001d9e1 	.word	0x0001d9e1
   1d9b8:	0001d9ff 	.word	0x0001d9ff
   1d9bc:	0001d9e1 	.word	0x0001d9e1
   1d9c0:	0001d909 	.word	0x0001d909
   1d9c4:	0001d9e1 	.word	0x0001d9e1
   1d9c8:	0001d909 	.word	0x0001d909
   1d9cc:	0001d9ff 	.word	0x0001d9ff
   1d9d0:	0001d9ff 	.word	0x0001d9ff
   1d9d4:	0001d909 	.word	0x0001d909
   1d9d8:	0001d909 	.word	0x0001d909
   1d9dc:	0001d909 	.word	0x0001d909
            reg = dw1000_read_reg(inst, i, 0, 5);
   1d9e0:	2305      	movs	r3, #5
   1d9e2:	2200      	movs	r2, #0
   1d9e4:	b2a1      	uxth	r1, r4
   1d9e6:	4628      	mov	r0, r5
   1d9e8:	f7fb ff68 	bl	198bc <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%010llX\"}\n",i,reg&0xffffffffffll);
   1d9ec:	b2c9      	uxtb	r1, r1
   1d9ee:	9000      	str	r0, [sp, #0]
   1d9f0:	9101      	str	r1, [sp, #4]
   1d9f2:	4622      	mov	r2, r4
   1d9f4:	491b      	ldr	r1, [pc, #108]	; (1da64 <dw1000_cli_dump_registers+0x168>)
   1d9f6:	4630      	mov	r0, r6
   1d9f8:	f7f5 f862 	bl	12ac0 <streamer_printf>
            break;
   1d9fc:	e792      	b.n	1d924 <dw1000_cli_dump_registers+0x28>
            reg = dw1000_read_reg(inst, i, 0, l);
   1d9fe:	2308      	movs	r3, #8
   1da00:	2200      	movs	r2, #0
   1da02:	b2a1      	uxth	r1, r4
   1da04:	4628      	mov	r0, r5
   1da06:	f7fb ff59 	bl	198bc <dw1000_read_reg>
            streamer_printf(streamer, "{\"reg[%02X]\"=\"0x%016llX\"}\n",i,
   1da0a:	e9cd 0100 	strd	r0, r1, [sp]
   1da0e:	4622      	mov	r2, r4
   1da10:	4915      	ldr	r1, [pc, #84]	; (1da68 <dw1000_cli_dump_registers+0x16c>)
   1da12:	4630      	mov	r0, r6
   1da14:	f7f5 f854 	bl	12ac0 <streamer_printf>
   1da18:	e784      	b.n	1d924 <dw1000_cli_dump_registers+0x28>
    streamer_printf(streamer, "{\"inst->irq_sem\"=%d}\n", dpl_sem_get_count(&inst->uwb_dev.irq_sem));
   1da1a:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
   1da1c:	4913      	ldr	r1, [pc, #76]	; (1da6c <dw1000_cli_dump_registers+0x170>)
   1da1e:	4630      	mov	r0, r6
   1da20:	f7f5 f84e 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "{\"inst->tx_sem\"=%d}\n", dpl_sem_get_count(&inst->tx_sem));
   1da24:	f8b5 2566 	ldrh.w	r2, [r5, #1382]	; 0x566
   1da28:	4911      	ldr	r1, [pc, #68]	; (1da70 <dw1000_cli_dump_registers+0x174>)
   1da2a:	4630      	mov	r0, r6
   1da2c:	f7f5 f848 	bl	12ac0 <streamer_printf>
    struct uwb_rng_instance *rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_RNG);
   1da30:	2104      	movs	r1, #4
   1da32:	4628      	mov	r0, r5
   1da34:	f7eb f9a3 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (rng)
   1da38:	b128      	cbz	r0, 1da46 <dw1000_cli_dump_registers+0x14a>
        streamer_printf(streamer, "{\"rng->sem\"=%d}\n", dpl_sem_get_count(&rng->sem));
   1da3a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
   1da3e:	490d      	ldr	r1, [pc, #52]	; (1da74 <dw1000_cli_dump_registers+0x178>)
   1da40:	4630      	mov	r0, r6
   1da42:	f7f5 f83d 	bl	12ac0 <streamer_printf>
    struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(&inst->uwb_dev, UWBEXT_CCP);
   1da46:	2101      	movs	r1, #1
   1da48:	4628      	mov	r0, r5
   1da4a:	f7eb f998 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (ccp)
   1da4e:	b128      	cbz	r0, 1da5c <dw1000_cli_dump_registers+0x160>
        streamer_printf(streamer, "{\"ccp->sem\"=%d}\n", dpl_sem_get_count(&ccp->sem));
   1da50:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
   1da54:	4908      	ldr	r1, [pc, #32]	; (1da78 <dw1000_cli_dump_registers+0x17c>)
   1da56:	4630      	mov	r0, r6
   1da58:	f7f5 f832 	bl	12ac0 <streamer_printf>
}
   1da5c:	b002      	add	sp, #8
   1da5e:	bd70      	pop	{r4, r5, r6, pc}
   1da60:	00028608 	.word	0x00028608
   1da64:	00028624 	.word	0x00028624
   1da68:	00028640 	.word	0x00028640
   1da6c:	0002865c 	.word	0x0002865c
   1da70:	00028674 	.word	0x00028674
   1da74:	0002868c 	.word	0x0002868c
   1da78:	000286a0 	.word	0x000286a0

0001da7c <dw1000_cli_dump_address>:
{
   1da7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da80:	b09b      	sub	sp, #108	; 0x6c
   1da82:	9013      	str	r0, [sp, #76]	; 0x4c
   1da84:	9114      	str	r1, [sp, #80]	; 0x50
   1da86:	9212      	str	r2, [sp, #72]	; 0x48
   1da88:	9315      	str	r3, [sp, #84]	; 0x54
    streamer_printf(streamer, "Dump starting at %06"PRIX32":\n", addr);
   1da8a:	460a      	mov	r2, r1
   1da8c:	492d      	ldr	r1, [pc, #180]	; (1db44 <dw1000_cli_dump_address+0xc8>)
   1da8e:	4618      	mov	r0, r3
   1da90:	f7f5 f816 	bl	12ac0 <streamer_printf>
    for (i=0;i<length;i+=step) {
   1da94:	f04f 0800 	mov.w	r8, #0
   1da98:	e04d      	b.n	1db36 <dw1000_cli_dump_address+0xba>
        memset(b,0,sizeof(b));
   1da9a:	2300      	movs	r3, #0
   1da9c:	9316      	str	r3, [sp, #88]	; 0x58
   1da9e:	9317      	str	r3, [sp, #92]	; 0x5c
   1daa0:	9318      	str	r3, [sp, #96]	; 0x60
   1daa2:	9319      	str	r3, [sp, #100]	; 0x64
        dw1000_read(inst, addr, i, b, step);
   1daa4:	2310      	movs	r3, #16
   1daa6:	9300      	str	r3, [sp, #0]
   1daa8:	ab16      	add	r3, sp, #88	; 0x58
   1daaa:	fa1f f288 	uxth.w	r2, r8
   1daae:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
   1dab2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1dab4:	f7fb fe38 	bl	19728 <dw1000_read>
               i, b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7],
   1dab8:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   1dabc:	9310      	str	r3, [sp, #64]	; 0x40
   1dabe:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   1dac2:	f89d 205b 	ldrb.w	r2, [sp, #91]	; 0x5b
   1dac6:	9211      	str	r2, [sp, #68]	; 0x44
   1dac8:	f89d 105c 	ldrb.w	r1, [sp, #92]	; 0x5c
   1dacc:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   1dad0:	f89d 405e 	ldrb.w	r4, [sp, #94]	; 0x5e
   1dad4:	f89d 505f 	ldrb.w	r5, [sp, #95]	; 0x5f
               b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
   1dad8:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   1dadc:	f89d 7061 	ldrb.w	r7, [sp, #97]	; 0x61
   1dae0:	f89d c062 	ldrb.w	ip, [sp, #98]	; 0x62
   1dae4:	f89d e063 	ldrb.w	lr, [sp, #99]	; 0x63
   1dae8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   1daec:	f89d 9065 	ldrb.w	r9, [sp, #101]	; 0x65
   1daf0:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
   1daf4:	f89d b067 	ldrb.w	fp, [sp, #103]	; 0x67
        streamer_printf(streamer, "%04X: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",
   1daf8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   1dafc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   1db00:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   1db04:	920b      	str	r2, [sp, #44]	; 0x2c
   1db06:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
   1db0a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   1db0e:	9708      	str	r7, [sp, #32]
   1db10:	9607      	str	r6, [sp, #28]
   1db12:	9506      	str	r5, [sp, #24]
   1db14:	9405      	str	r4, [sp, #20]
   1db16:	9004      	str	r0, [sp, #16]
   1db18:	9103      	str	r1, [sp, #12]
   1db1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1db1c:	9202      	str	r2, [sp, #8]
   1db1e:	9301      	str	r3, [sp, #4]
   1db20:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1db22:	9300      	str	r3, [sp, #0]
   1db24:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1db28:	4642      	mov	r2, r8
   1db2a:	4907      	ldr	r1, [pc, #28]	; (1db48 <dw1000_cli_dump_address+0xcc>)
   1db2c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1db2e:	f7f4 ffc7 	bl	12ac0 <streamer_printf>
    for (i=0;i<length;i+=step) {
   1db32:	f108 0810 	add.w	r8, r8, #16
   1db36:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1db38:	4543      	cmp	r3, r8
   1db3a:	dcae      	bgt.n	1da9a <dw1000_cli_dump_address+0x1e>
}
   1db3c:	b01b      	add	sp, #108	; 0x6c
   1db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db42:	bf00      	nop
   1db44:	000286b4 	.word	0x000286b4
   1db48:	000286d0 	.word	0x000286d0

0001db4c <dw1000_cli_interrupt_backtrace>:
{
   1db4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db50:	b085      	sub	sp, #20
   1db52:	4607      	mov	r7, r0
   1db54:	4688      	mov	r8, r1
   1db56:	4616      	mov	r6, r2
    uint32_t start_t = 0;
   1db58:	2300      	movs	r3, #0
   1db5a:	9303      	str	r3, [sp, #12]
    streamer_printf(streamer, " %10s ", "abs");
   1db5c:	4c43      	ldr	r4, [pc, #268]	; (1dc6c <dw1000_cli_interrupt_backtrace+0x120>)
   1db5e:	4a44      	ldr	r2, [pc, #272]	; (1dc70 <dw1000_cli_interrupt_backtrace+0x124>)
   1db60:	4621      	mov	r1, r4
   1db62:	4630      	mov	r0, r6
   1db64:	f7f4 ffac 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %10s ", "usec");
   1db68:	4a42      	ldr	r2, [pc, #264]	; (1dc74 <dw1000_cli_interrupt_backtrace+0x128>)
   1db6a:	4621      	mov	r1, r4
   1db6c:	4630      	mov	r0, r6
   1db6e:	f7f4 ffa7 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %8s ", "diff");
   1db72:	4a41      	ldr	r2, [pc, #260]	; (1dc78 <dw1000_cli_interrupt_backtrace+0x12c>)
   1db74:	4941      	ldr	r1, [pc, #260]	; (1dc7c <dw1000_cli_interrupt_backtrace+0x130>)
   1db76:	4630      	mov	r0, r6
   1db78:	f7f4 ffa2 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %6s ", "dur");
   1db7c:	4a40      	ldr	r2, [pc, #256]	; (1dc80 <dw1000_cli_interrupt_backtrace+0x134>)
   1db7e:	4941      	ldr	r1, [pc, #260]	; (1dc84 <dw1000_cli_interrupt_backtrace+0x138>)
   1db80:	4630      	mov	r0, r6
   1db82:	f7f4 ff9d 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %2s", "ir");
   1db86:	4a40      	ldr	r2, [pc, #256]	; (1dc88 <dw1000_cli_interrupt_backtrace+0x13c>)
   1db88:	4940      	ldr	r1, [pc, #256]	; (1dc8c <dw1000_cli_interrupt_backtrace+0x140>)
   1db8a:	4630      	mov	r0, r6
   1db8c:	f7f4 ff98 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, " %5s", "fctrl");
   1db90:	4a3f      	ldr	r2, [pc, #252]	; (1dc90 <dw1000_cli_interrupt_backtrace+0x144>)
   1db92:	4940      	ldr	r1, [pc, #256]	; (1dc94 <dw1000_cli_interrupt_backtrace+0x148>)
   1db94:	4630      	mov	r0, r6
   1db96:	f7f4 ff93 	bl	12ac0 <streamer_printf>
    if (verbose&0x1) {
   1db9a:	f018 0901 	ands.w	r9, r8, #1
   1db9e:	d10b      	bne.n	1dbb8 <dw1000_cli_interrupt_backtrace+0x6c>
    streamer_printf(streamer, " %*s ", 2*DW1000_SYS_STATUS_ASSEMBLE_LEN, "status");
   1dba0:	4b3d      	ldr	r3, [pc, #244]	; (1dc98 <dw1000_cli_interrupt_backtrace+0x14c>)
   1dba2:	2208      	movs	r2, #8
   1dba4:	493d      	ldr	r1, [pc, #244]	; (1dc9c <dw1000_cli_interrupt_backtrace+0x150>)
   1dba6:	4630      	mov	r0, r6
   1dba8:	f7f4 ff8a 	bl	12ac0 <streamer_printf>
    streamer_printf(streamer, "   status2txt\n");
   1dbac:	493c      	ldr	r1, [pc, #240]	; (1dca0 <dw1000_cli_interrupt_backtrace+0x154>)
   1dbae:	4630      	mov	r0, r6
   1dbb0:	f7f4 ff86 	bl	12ac0 <streamer_printf>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   1dbb4:	2400      	movs	r4, #0
   1dbb6:	e00a      	b.n	1dbce <dw1000_cli_interrupt_backtrace+0x82>
        streamer_printf(streamer, "(fctrl2txt)%21s ", "");
   1dbb8:	4a3a      	ldr	r2, [pc, #232]	; (1dca4 <dw1000_cli_interrupt_backtrace+0x158>)
   1dbba:	493b      	ldr	r1, [pc, #236]	; (1dca8 <dw1000_cli_interrupt_backtrace+0x15c>)
   1dbbc:	4630      	mov	r0, r6
   1dbbe:	f7f4 ff7f 	bl	12ac0 <streamer_printf>
   1dbc2:	e7ed      	b.n	1dba0 <dw1000_cli_interrupt_backtrace+0x54>
    for (i=0;i<80;i++) streamer_printf(streamer, "-");
   1dbc4:	4939      	ldr	r1, [pc, #228]	; (1dcac <dw1000_cli_interrupt_backtrace+0x160>)
   1dbc6:	4630      	mov	r0, r6
   1dbc8:	f7f4 ff7a 	bl	12ac0 <streamer_printf>
   1dbcc:	3401      	adds	r4, #1
   1dbce:	2c4f      	cmp	r4, #79	; 0x4f
   1dbd0:	ddf8      	ble.n	1dbc4 <dw1000_cli_interrupt_backtrace+0x78>
    if (verbose&0x1) {
   1dbd2:	f1b9 0f00 	cmp.w	r9, #0
   1dbd6:	d111      	bne.n	1dbfc <dw1000_cli_interrupt_backtrace+0xb0>
    streamer_printf(streamer, "\n");
   1dbd8:	4935      	ldr	r1, [pc, #212]	; (1dcb0 <dw1000_cli_interrupt_backtrace+0x164>)
   1dbda:	4630      	mov	r0, r6
   1dbdc:	f7f4 ff70 	bl	12ac0 <streamer_printf>
    inst->sys_status_bt_lock = 1;
   1dbe0:	2301      	movs	r3, #1
   1dbe2:	f887 3df2 	strb.w	r3, [r7, #3570]	; 0xdf2
    struct dw1000_sys_status_backtrace *p, *p_last=0;
   1dbe6:	2300      	movs	r3, #0
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   1dbe8:	461d      	mov	r5, r3
   1dbea:	e00b      	b.n	1dc04 <dw1000_cli_interrupt_backtrace+0xb8>
        for (i=0;i<34;i++) streamer_printf(streamer, "-");
   1dbec:	492f      	ldr	r1, [pc, #188]	; (1dcac <dw1000_cli_interrupt_backtrace+0x160>)
   1dbee:	4630      	mov	r0, r6
   1dbf0:	f7f4 ff66 	bl	12ac0 <streamer_printf>
   1dbf4:	3401      	adds	r4, #1
   1dbf6:	2c21      	cmp	r4, #33	; 0x21
   1dbf8:	ddf8      	ble.n	1dbec <dw1000_cli_interrupt_backtrace+0xa0>
   1dbfa:	e7ed      	b.n	1dbd8 <dw1000_cli_interrupt_backtrace+0x8c>
   1dbfc:	2400      	movs	r4, #0
   1dbfe:	e7fa      	b.n	1dbf6 <dw1000_cli_interrupt_backtrace+0xaa>
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   1dc00:	3501      	adds	r5, #1
        p_last = p;
   1dc02:	4623      	mov	r3, r4
    for (i=0;i<MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);i++) {
   1dc04:	2d7f      	cmp	r5, #127	; 0x7f
   1dc06:	dc1f      	bgt.n	1dc48 <dw1000_cli_interrupt_backtrace+0xfc>
        uint16_t i_mod = (inst->sys_status_bt_idx + i + 1) % MYNEWT_VAL(DW1000_SYS_STATUS_BACKTRACE_LEN);
   1dc08:	f8b7 cdf0 	ldrh.w	ip, [r7, #3568]	; 0xdf0
   1dc0c:	44ac      	add	ip, r5
   1dc0e:	f10c 0c01 	add.w	ip, ip, #1
   1dc12:	f1dc 0200 	rsbs	r2, ip, #0
   1dc16:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   1dc1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1dc1e:	bf58      	it	pl
   1dc20:	f1c2 0c00 	rsbpl	ip, r2, #0
        p = &inst->sys_status_bt[i_mod];
   1dc24:	fa1f f48c 	uxth.w	r4, ip
   1dc28:	345f      	adds	r4, #95	; 0x5f
   1dc2a:	eb07 1404 	add.w	r4, r7, r4, lsl #4
        if (print_interrupt_bt_line(&start_t, verbose, p, p_last, streamer)) {
   1dc2e:	9600      	str	r6, [sp, #0]
   1dc30:	4622      	mov	r2, r4
   1dc32:	4641      	mov	r1, r8
   1dc34:	a803      	add	r0, sp, #12
   1dc36:	f7ff fdc3 	bl	1d7c0 <print_interrupt_bt_line>
   1dc3a:	2800      	cmp	r0, #0
   1dc3c:	d0e0      	beq.n	1dc00 <dw1000_cli_interrupt_backtrace+0xb4>
            streamer_printf(streamer, "\n");
   1dc3e:	491c      	ldr	r1, [pc, #112]	; (1dcb0 <dw1000_cli_interrupt_backtrace+0x164>)
   1dc40:	4630      	mov	r0, r6
   1dc42:	f7f4 ff3d 	bl	12ac0 <streamer_printf>
   1dc46:	e7db      	b.n	1dc00 <dw1000_cli_interrupt_backtrace+0xb4>
    inst->sys_status_bt_lock = 0;
   1dc48:	2300      	movs	r3, #0
   1dc4a:	f887 3df2 	strb.w	r3, [r7, #3570]	; 0xdf2
    if (verbose&0x1) {
   1dc4e:	f1b9 0f00 	cmp.w	r9, #0
   1dc52:	d102      	bne.n	1dc5a <dw1000_cli_interrupt_backtrace+0x10e>
}
   1dc54:	b005      	add	sp, #20
   1dc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        streamer_printf(streamer, "----\n fctrl2txt: \n");
   1dc5a:	4916      	ldr	r1, [pc, #88]	; (1dcb4 <dw1000_cli_interrupt_backtrace+0x168>)
   1dc5c:	4630      	mov	r0, r6
   1dc5e:	f7f4 ff2f 	bl	12ac0 <streamer_printf>
        fctrl_ledgend(streamer);
   1dc62:	4630      	mov	r0, r6
   1dc64:	f7ff f9e0 	bl	1d028 <fctrl_ledgend>
}
   1dc68:	e7f4      	b.n	1dc54 <dw1000_cli_interrupt_backtrace+0x108>
   1dc6a:	bf00      	nop
   1dc6c:	0002872c 	.word	0x0002872c
   1dc70:	00028728 	.word	0x00028728
   1dc74:	00028734 	.word	0x00028734
   1dc78:	0002873c 	.word	0x0002873c
   1dc7c:	00028744 	.word	0x00028744
   1dc80:	0002874c 	.word	0x0002874c
   1dc84:	00028750 	.word	0x00028750
   1dc88:	00028758 	.word	0x00028758
   1dc8c:	0002875c 	.word	0x0002875c
   1dc90:	00028764 	.word	0x00028764
   1dc94:	0002876c 	.word	0x0002876c
   1dc98:	00027e00 	.word	0x00027e00
   1dc9c:	00028788 	.word	0x00028788
   1dca0:	00028790 	.word	0x00028790
   1dca4:	00028874 	.word	0x00028874
   1dca8:	00028774 	.word	0x00028774
   1dcac:	000287a0 	.word	0x000287a0
   1dcb0:	000273a4 	.word	0x000273a4
   1dcb4:	000287a4 	.word	0x000287a4

0001dcb8 <dw1000_cli_cmd>:
#endif

static int
dw1000_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   1dcb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dcbc:	b085      	sub	sp, #20
   1dcbe:	461f      	mov	r7, r3
#ifndef __KERNEL__
    struct _dw1000_dev_instance_t * inst = 0;
    uint16_t inst_n;

    if (argc < 2) {
   1dcc0:	2901      	cmp	r1, #1
   1dcc2:	dd1a      	ble.n	1dcfa <dw1000_cli_cmd+0x42>
   1dcc4:	460c      	mov	r4, r1
   1dcc6:	4615      	mov	r5, r2
        dw1000_cli_too_few_args(streamer);
        return 0;
    }

    if (!strcmp(argv[1], "dump")) {
   1dcc8:	6856      	ldr	r6, [r2, #4]
   1dcca:	49a9      	ldr	r1, [pc, #676]	; (1df70 <dw1000_cli_cmd+0x2b8>)
   1dccc:	4630      	mov	r0, r6
   1dcce:	f7f2 fcff 	bl	106d0 <strcmp>
   1dcd2:	b9e8      	cbnz	r0, 1dd10 <dw1000_cli_cmd+0x58>
        if (argc < 3) {
   1dcd4:	2c02      	cmp	r4, #2
   1dcd6:	dc14      	bgt.n	1dd02 <dw1000_cli_cmd+0x4a>
            inst_n=0;
   1dcd8:	2000      	movs	r0, #0
        } else {
            inst_n = strtol(argv[2], NULL, 0);
        }
        inst = hal_dw1000_inst(inst_n);
   1dcda:	b2c0      	uxtb	r0, r0
   1dcdc:	f7fc fa7e 	bl	1a1dc <hal_dw1000_inst>
   1dce0:	4604      	mov	r4, r0
        console_no_ticks();
   1dce2:	f7f6 f8a1 	bl	13e28 <console_no_ticks>
        dw1000_cli_dump_registers(inst, streamer);
   1dce6:	4639      	mov	r1, r7
   1dce8:	4620      	mov	r0, r4
   1dcea:	f7ff fe07 	bl	1d8fc <dw1000_cli_dump_registers>
        console_yes_ticks();
   1dcee:	f7f6 f8a1 	bl	13e34 <console_yes_ticks>
        streamer_printf(streamer, "Unknown cmd\n");
    }
#endif  /* ifndef __KERNEL__ */

    return 0;
}
   1dcf2:	2000      	movs	r0, #0
   1dcf4:	b005      	add	sp, #20
   1dcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        dw1000_cli_too_few_args(streamer);
   1dcfa:	4618      	mov	r0, r3
   1dcfc:	f7ff f9b4 	bl	1d068 <dw1000_cli_too_few_args>
        return 0;
   1dd00:	e7f7      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   1dd02:	2200      	movs	r2, #0
   1dd04:	4611      	mov	r1, r2
   1dd06:	68a8      	ldr	r0, [r5, #8]
   1dd08:	f004 f97c 	bl	22004 <strtol>
   1dd0c:	b280      	uxth	r0, r0
   1dd0e:	e7e4      	b.n	1dcda <dw1000_cli_cmd+0x22>
    } else if (!strcmp(argv[1], "da")) {
   1dd10:	4998      	ldr	r1, [pc, #608]	; (1df74 <dw1000_cli_cmd+0x2bc>)
   1dd12:	4630      	mov	r0, r6
   1dd14:	f7f2 fcdc 	bl	106d0 <strcmp>
   1dd18:	bb08      	cbnz	r0, 1dd5e <dw1000_cli_cmd+0xa6>
        if (argc<3) {
   1dd1a:	2c02      	cmp	r4, #2
   1dd1c:	dde9      	ble.n	1dcf2 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1dd1e:	2200      	movs	r2, #0
   1dd20:	4611      	mov	r1, r2
   1dd22:	68a8      	ldr	r0, [r5, #8]
   1dd24:	f004 f96e 	bl	22004 <strtol>
   1dd28:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1dd2a:	2200      	movs	r2, #0
   1dd2c:	4611      	mov	r1, r2
   1dd2e:	68e8      	ldr	r0, [r5, #12]
   1dd30:	f004 f968 	bl	22004 <strtol>
   1dd34:	4606      	mov	r6, r0
        if (argc>4) {
   1dd36:	2c04      	cmp	r4, #4
   1dd38:	dc0a      	bgt.n	1dd50 <dw1000_cli_cmd+0x98>
        int length = 128;
   1dd3a:	2480      	movs	r4, #128	; 0x80
        inst = hal_dw1000_inst(inst_n);
   1dd3c:	fa5f f088 	uxtb.w	r0, r8
   1dd40:	f7fc fa4c 	bl	1a1dc <hal_dw1000_inst>
        dw1000_cli_dump_address(inst, addr, length, streamer);
   1dd44:	463b      	mov	r3, r7
   1dd46:	b2a2      	uxth	r2, r4
   1dd48:	4631      	mov	r1, r6
   1dd4a:	f7ff fe97 	bl	1da7c <dw1000_cli_dump_address>
   1dd4e:	e7d0      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
            length = strtol(argv[4], NULL, 0);
   1dd50:	2200      	movs	r2, #0
   1dd52:	4611      	mov	r1, r2
   1dd54:	6928      	ldr	r0, [r5, #16]
   1dd56:	f004 f955 	bl	22004 <strtol>
   1dd5a:	4604      	mov	r4, r0
   1dd5c:	e7ee      	b.n	1dd3c <dw1000_cli_cmd+0x84>
    } else if (!strcmp(argv[1], "cw")) {
   1dd5e:	4986      	ldr	r1, [pc, #536]	; (1df78 <dw1000_cli_cmd+0x2c0>)
   1dd60:	4630      	mov	r0, r6
   1dd62:	f7f2 fcb5 	bl	106d0 <strcmp>
   1dd66:	2800      	cmp	r0, #0
   1dd68:	d034      	beq.n	1ddd4 <dw1000_cli_cmd+0x11c>
    } else if (!strcmp(argv[1], "wr")) {
   1dd6a:	4984      	ldr	r1, [pc, #528]	; (1df7c <dw1000_cli_cmd+0x2c4>)
   1dd6c:	4630      	mov	r0, r6
   1dd6e:	f7f2 fcaf 	bl	106d0 <strcmp>
   1dd72:	2800      	cmp	r0, #0
   1dd74:	d15e      	bne.n	1de34 <dw1000_cli_cmd+0x17c>
        if (argc < 7) {
   1dd76:	2c06      	cmp	r4, #6
   1dd78:	ddbb      	ble.n	1dcf2 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1dd7a:	2200      	movs	r2, #0
   1dd7c:	4611      	mov	r1, r2
   1dd7e:	68a8      	ldr	r0, [r5, #8]
   1dd80:	f004 f940 	bl	22004 <strtol>
   1dd84:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1dd86:	2200      	movs	r2, #0
   1dd88:	4611      	mov	r1, r2
   1dd8a:	68e8      	ldr	r0, [r5, #12]
   1dd8c:	f004 f93a 	bl	22004 <strtol>
   1dd90:	4606      	mov	r6, r0
        uint32_t sub  = strtol(argv[4], NULL, 0);
   1dd92:	2200      	movs	r2, #0
   1dd94:	4611      	mov	r1, r2
   1dd96:	6928      	ldr	r0, [r5, #16]
   1dd98:	f004 f934 	bl	22004 <strtol>
   1dd9c:	4607      	mov	r7, r0
        uint64_t val  = strtol(argv[5], NULL, 0);
   1dd9e:	2200      	movs	r2, #0
   1dda0:	4611      	mov	r1, r2
   1dda2:	6968      	ldr	r0, [r5, #20]
   1dda4:	f004 f92e 	bl	22004 <strtol>
   1dda8:	4604      	mov	r4, r0
   1ddaa:	ea4f 79e0 	mov.w	r9, r0, asr #31
        int length = strtol(argv[6], NULL, 0);
   1ddae:	2200      	movs	r2, #0
   1ddb0:	4611      	mov	r1, r2
   1ddb2:	69a8      	ldr	r0, [r5, #24]
   1ddb4:	f004 f926 	bl	22004 <strtol>
   1ddb8:	4605      	mov	r5, r0
        dw1000_write_reg(hal_dw1000_inst(inst_n), addr, sub, val, length);
   1ddba:	fa5f f088 	uxtb.w	r0, r8
   1ddbe:	f7fc fa0d 	bl	1a1dc <hal_dw1000_inst>
   1ddc2:	9502      	str	r5, [sp, #8]
   1ddc4:	9400      	str	r4, [sp, #0]
   1ddc6:	f8cd 9004 	str.w	r9, [sp, #4]
   1ddca:	b2ba      	uxth	r2, r7
   1ddcc:	b2b1      	uxth	r1, r6
   1ddce:	f7fb fde5 	bl	1999c <dw1000_write_reg>
   1ddd2:	e78e      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1ddd4:	2200      	movs	r2, #0
   1ddd6:	4611      	mov	r1, r2
   1ddd8:	68a8      	ldr	r0, [r5, #8]
   1ddda:	f004 f913 	bl	22004 <strtol>
   1ddde:	4605      	mov	r5, r0
        inst = hal_dw1000_inst(inst_n);
   1dde0:	b2c0      	uxtb	r0, r0
   1dde2:	f7fc f9fb 	bl	1a1dc <hal_dw1000_inst>
   1dde6:	4604      	mov	r4, r0
        hal_gpio_irq_disable(inst->irq_pin);
   1dde8:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
   1ddec:	f7eb f9be 	bl	916c <hal_gpio_irq_disable>
        dw1000_write_reg(inst, SYS_MASK_ID, 0, 0, sizeof(uint32_t));
   1ddf0:	2304      	movs	r3, #4
   1ddf2:	9302      	str	r3, [sp, #8]
   1ddf4:	2200      	movs	r2, #0
   1ddf6:	2300      	movs	r3, #0
   1ddf8:	e9cd 2300 	strd	r2, r3, [sp]
   1ddfc:	210e      	movs	r1, #14
   1ddfe:	4620      	mov	r0, r4
   1de00:	f7fb fdcc 	bl	1999c <dw1000_write_reg>
        dw1000_write_reg(inst, SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TRXOFF, sizeof(uint8_t));
   1de04:	2301      	movs	r3, #1
   1de06:	9302      	str	r3, [sp, #8]
   1de08:	2240      	movs	r2, #64	; 0x40
   1de0a:	2300      	movs	r3, #0
   1de0c:	e9cd 2300 	strd	r2, r3, [sp]
   1de10:	2200      	movs	r2, #0
   1de12:	210d      	movs	r1, #13
   1de14:	4620      	mov	r0, r4
   1de16:	f7fb fdc1 	bl	1999c <dw1000_write_reg>
        dw1000_configcwmode(inst, inst->uwb_dev.config.channel);
   1de1a:	f894 150c 	ldrb.w	r1, [r4, #1292]	; 0x50c
   1de1e:	4620      	mov	r0, r4
   1de20:	f7fe fbcc 	bl	1c5bc <dw1000_configcwmode>
        streamer_printf(streamer, "Device[%d] now in CW mode on ch %d. Reset to continue\n",
   1de24:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
   1de28:	b2aa      	uxth	r2, r5
   1de2a:	4955      	ldr	r1, [pc, #340]	; (1df80 <dw1000_cli_cmd+0x2c8>)
   1de2c:	4638      	mov	r0, r7
   1de2e:	f7f4 fe47 	bl	12ac0 <streamer_printf>
   1de32:	e75e      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "rd")) {
   1de34:	4953      	ldr	r1, [pc, #332]	; (1df84 <dw1000_cli_cmd+0x2cc>)
   1de36:	4630      	mov	r0, r6
   1de38:	f7f2 fc4a 	bl	106d0 <strcmp>
   1de3c:	bb60      	cbnz	r0, 1de98 <dw1000_cli_cmd+0x1e0>
        if (argc < 6) {
   1de3e:	2c05      	cmp	r4, #5
   1de40:	f77f af57 	ble.w	1dcf2 <dw1000_cli_cmd+0x3a>
        inst_n = strtol(argv[2], NULL, 0);
   1de44:	2200      	movs	r2, #0
   1de46:	4611      	mov	r1, r2
   1de48:	68a8      	ldr	r0, [r5, #8]
   1de4a:	f004 f8db 	bl	22004 <strtol>
   1de4e:	4680      	mov	r8, r0
        uint32_t addr = strtol(argv[3], NULL, 0);
   1de50:	2200      	movs	r2, #0
   1de52:	4611      	mov	r1, r2
   1de54:	68e8      	ldr	r0, [r5, #12]
   1de56:	f004 f8d5 	bl	22004 <strtol>
   1de5a:	4604      	mov	r4, r0
        uint16_t sub  = strtol(argv[4], NULL, 0);
   1de5c:	2200      	movs	r2, #0
   1de5e:	4611      	mov	r1, r2
   1de60:	6928      	ldr	r0, [r5, #16]
   1de62:	f004 f8cf 	bl	22004 <strtol>
   1de66:	b286      	uxth	r6, r0
        int length = strtol(argv[5], NULL, 0);
   1de68:	2200      	movs	r2, #0
   1de6a:	4611      	mov	r1, r2
   1de6c:	6968      	ldr	r0, [r5, #20]
   1de6e:	f004 f8c9 	bl	22004 <strtol>
   1de72:	4605      	mov	r5, r0
        uint64_t reg = dw1000_read_reg(hal_dw1000_inst(inst_n), addr, sub, length);
   1de74:	fa5f f088 	uxtb.w	r0, r8
   1de78:	f7fc f9b0 	bl	1a1dc <hal_dw1000_inst>
   1de7c:	462b      	mov	r3, r5
   1de7e:	4632      	mov	r2, r6
   1de80:	b2a1      	uxth	r1, r4
   1de82:	f7fb fd1b 	bl	198bc <dw1000_read_reg>
        streamer_printf(streamer, "0x%06"PRIX32",0x%04X: 0x%"PRIX64"\n", addr, sub, reg);
   1de86:	e9cd 0100 	strd	r0, r1, [sp]
   1de8a:	4633      	mov	r3, r6
   1de8c:	4622      	mov	r2, r4
   1de8e:	493e      	ldr	r1, [pc, #248]	; (1df88 <dw1000_cli_cmd+0x2d0>)
   1de90:	4638      	mov	r0, r7
   1de92:	f7f4 fe15 	bl	12ac0 <streamer_printf>
   1de96:	e72c      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
    } else if (!strcmp(argv[1], "ibt")){
   1de98:	493c      	ldr	r1, [pc, #240]	; (1df8c <dw1000_cli_cmd+0x2d4>)
   1de9a:	4630      	mov	r0, r6
   1de9c:	f7f2 fc18 	bl	106d0 <strcmp>
   1dea0:	bb08      	cbnz	r0, 1dee6 <dw1000_cli_cmd+0x22e>
        if (argc < 3) {
   1dea2:	2c02      	cmp	r4, #2
   1dea4:	dc11      	bgt.n	1deca <dw1000_cli_cmd+0x212>
            inst_n=0;
   1dea6:	2600      	movs	r6, #0
        if (argc < 4) {
   1dea8:	2c03      	cmp	r4, #3
   1deaa:	dc15      	bgt.n	1ded8 <dw1000_cli_cmd+0x220>
            d=0;
   1deac:	2500      	movs	r5, #0
        inst = hal_dw1000_inst(inst_n);
   1deae:	b2f0      	uxtb	r0, r6
   1deb0:	f7fc f994 	bl	1a1dc <hal_dw1000_inst>
   1deb4:	4604      	mov	r4, r0
        console_no_ticks();
   1deb6:	f7f5 ffb7 	bl	13e28 <console_no_ticks>
        dw1000_cli_interrupt_backtrace(inst, d, streamer);
   1deba:	463a      	mov	r2, r7
   1debc:	4629      	mov	r1, r5
   1debe:	4620      	mov	r0, r4
   1dec0:	f7ff fe44 	bl	1db4c <dw1000_cli_interrupt_backtrace>
        console_yes_ticks();
   1dec4:	f7f5 ffb6 	bl	13e34 <console_yes_ticks>
   1dec8:	e713      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
            inst_n = strtol(argv[2], NULL, 0);
   1deca:	2200      	movs	r2, #0
   1decc:	4611      	mov	r1, r2
   1dece:	68a8      	ldr	r0, [r5, #8]
   1ded0:	f004 f898 	bl	22004 <strtol>
   1ded4:	b286      	uxth	r6, r0
   1ded6:	e7e7      	b.n	1dea8 <dw1000_cli_cmd+0x1f0>
            d = strtol(argv[3], NULL, 0);
   1ded8:	2200      	movs	r2, #0
   1deda:	4611      	mov	r1, r2
   1dedc:	68e8      	ldr	r0, [r5, #12]
   1dede:	f004 f891 	bl	22004 <strtol>
   1dee2:	b2c5      	uxtb	r5, r0
   1dee4:	e7e3      	b.n	1deae <dw1000_cli_cmd+0x1f6>
    } else if (!strcmp(argv[1], "status2txt")){
   1dee6:	492a      	ldr	r1, [pc, #168]	; (1df90 <dw1000_cli_cmd+0x2d8>)
   1dee8:	4630      	mov	r0, r6
   1deea:	f7f2 fbf1 	bl	106d0 <strcmp>
   1deee:	b328      	cbz	r0, 1df3c <dw1000_cli_cmd+0x284>
    } else if (!strcmp(argv[1], "fctrl2txt")){
   1def0:	4928      	ldr	r1, [pc, #160]	; (1df94 <dw1000_cli_cmd+0x2dc>)
   1def2:	4630      	mov	r0, r6
   1def4:	f7f2 fbec 	bl	106d0 <strcmp>
   1def8:	bba0      	cbnz	r0, 1df64 <dw1000_cli_cmd+0x2ac>
        if (argc < 4) {
   1defa:	2c03      	cmp	r4, #3
   1defc:	dd2e      	ble.n	1df5c <dw1000_cli_cmd+0x2a4>
            d = strtol(argv[2], NULL, 16);
   1defe:	2210      	movs	r2, #16
   1df00:	2100      	movs	r1, #0
   1df02:	68a8      	ldr	r0, [r5, #8]
   1df04:	f004 f87e 	bl	22004 <strtol>
   1df08:	b2c4      	uxtb	r4, r0
            d2 = strtol(argv[3], NULL, 16);
   1df0a:	2210      	movs	r2, #16
   1df0c:	2100      	movs	r1, #0
   1df0e:	68e8      	ldr	r0, [r5, #12]
   1df10:	f004 f878 	bl	22004 <strtol>
        streamer_printf(streamer, "%02X %02X: %s\n", (uint8_t)d, (uint8_t)d2, fctrl_to_string((d2<<8)|d));
   1df14:	b2c5      	uxtb	r5, r0
   1df16:	ea44 2005 	orr.w	r0, r4, r5, lsl #8
   1df1a:	f7ff f8ad 	bl	1d078 <fctrl_to_string>
   1df1e:	9000      	str	r0, [sp, #0]
   1df20:	462b      	mov	r3, r5
   1df22:	4622      	mov	r2, r4
   1df24:	491c      	ldr	r1, [pc, #112]	; (1df98 <dw1000_cli_cmd+0x2e0>)
   1df26:	4638      	mov	r0, r7
   1df28:	f7f4 fdca 	bl	12ac0 <streamer_printf>
        streamer_printf(streamer, "----\n ledgend: \n");
   1df2c:	491b      	ldr	r1, [pc, #108]	; (1df9c <dw1000_cli_cmd+0x2e4>)
   1df2e:	4638      	mov	r0, r7
   1df30:	f7f4 fdc6 	bl	12ac0 <streamer_printf>
        fctrl_ledgend(streamer);
   1df34:	4638      	mov	r0, r7
   1df36:	f7ff f877 	bl	1d028 <fctrl_ledgend>
   1df3a:	e6da      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
        uint64_t d = strtoll(argv[2], NULL, 0);
   1df3c:	2200      	movs	r2, #0
   1df3e:	4611      	mov	r1, r2
   1df40:	68a8      	ldr	r0, [r5, #8]
   1df42:	f7f2 fbe8 	bl	10716 <strtoll>
   1df46:	4605      	mov	r5, r0
   1df48:	460c      	mov	r4, r1
        console_printf("%010llX: %s\n", d, sys_status_to_string(d));
   1df4a:	f7ff f9fb 	bl	1d344 <sys_status_to_string>
   1df4e:	9000      	str	r0, [sp, #0]
   1df50:	462a      	mov	r2, r5
   1df52:	4623      	mov	r3, r4
   1df54:	4812      	ldr	r0, [pc, #72]	; (1dfa0 <dw1000_cli_cmd+0x2e8>)
   1df56:	f7f5 ff59 	bl	13e0c <console_printf>
   1df5a:	e6ca      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
            console_printf("2 bytes needed\n");
   1df5c:	4811      	ldr	r0, [pc, #68]	; (1dfa4 <dw1000_cli_cmd+0x2ec>)
   1df5e:	f7f5 ff55 	bl	13e0c <console_printf>
            return 0;
   1df62:	e6c6      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
        streamer_printf(streamer, "Unknown cmd\n");
   1df64:	4910      	ldr	r1, [pc, #64]	; (1dfa8 <dw1000_cli_cmd+0x2f0>)
   1df66:	4638      	mov	r0, r7
   1df68:	f7f4 fdaa 	bl	12ac0 <streamer_printf>
   1df6c:	e6c1      	b.n	1dcf2 <dw1000_cli_cmd+0x3a>
   1df6e:	bf00      	nop
   1df70:	000268e4 	.word	0x000268e4
   1df74:	000287b8 	.word	0x000287b8
   1df78:	000287bc 	.word	0x000287bc
   1df7c:	000287f8 	.word	0x000287f8
   1df80:	000287c0 	.word	0x000287c0
   1df84:	000287fc 	.word	0x000287fc
   1df88:	00028800 	.word	0x00028800
   1df8c:	00028818 	.word	0x00028818
   1df90:	0002881c 	.word	0x0002881c
   1df94:	00028838 	.word	0x00028838
   1df98:	00028854 	.word	0x00028854
   1df9c:	00028864 	.word	0x00028864
   1dfa0:	00028828 	.word	0x00028828
   1dfa4:	00028844 	.word	0x00028844
   1dfa8:	000268ec 	.word	0x000268ec

0001dfac <dw1000_cli_register>:
#endif


int
dw1000_cli_register(void)
{
   1dfac:	b508      	push	{r3, lr}
#if MYNEWT_VAL(DW1000_CLI)
    int rc;
    rc = shell_cmd_register(&shell_dw1000_cmd);
   1dfae:	4802      	ldr	r0, [pc, #8]	; (1dfb8 <dw1000_cli_register+0xc>)
   1dfb0:	f7f7 fd0c 	bl	159cc <shell_cmd_register>
#endif
    return rc;
#else
    return 0;
#endif
}
   1dfb4:	bd08      	pop	{r3, pc}
   1dfb6:	bf00      	nop
   1dfb8:	20001228 	.word	0x20001228

0001dfbc <dw1000_cli_down>:
        dw1000_sysfs_deinit(i);
    }
    dw1000_debugfs_deinit();
#endif
    return 0;
}
   1dfbc:	2000      	movs	r0, #0
   1dfbe:	4770      	bx	lr

0001dfc0 <dw1000_gpio_config_leds>:
 *          - bit 2 to 7: reserved
 *
 * @return void
 */
void dw1000_gpio_config_leds(struct _dw1000_dev_instance_t * inst, dw1000_led_modes_t mode)
{
   1dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfc2:	b085      	sub	sp, #20
   1dfc4:	4604      	mov	r4, r0
    uint32_t reg;

    if (mode & DWT_LEDS_ENABLE){
   1dfc6:	f011 0f02 	tst.w	r1, #2
   1dfca:	d050      	beq.n	1e06e <dw1000_gpio_config_leds+0xae>
   1dfcc:	460d      	mov	r5, r1
        // Set up MFIO for LED output.
        reg = (uint32_t) dw1000_read_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, sizeof(uint32_t));
   1dfce:	2304      	movs	r3, #4
   1dfd0:	2200      	movs	r2, #0
   1dfd2:	2126      	movs	r1, #38	; 0x26
   1dfd4:	f7fb fc72 	bl	198bc <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   1dfd8:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
   1dfdc:	f440 50a0 	orr.w	r0, r0, #5120	; 0x1400
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1dfe0:	2704      	movs	r7, #4
   1dfe2:	9702      	str	r7, [sp, #8]
   1dfe4:	2600      	movs	r6, #0
   1dfe6:	9000      	str	r0, [sp, #0]
   1dfe8:	9601      	str	r6, [sp, #4]
   1dfea:	4632      	mov	r2, r6
   1dfec:	2126      	movs	r1, #38	; 0x26
   1dfee:	4620      	mov	r0, r4
   1dff0:	f7fb fcd4 	bl	1999c <dw1000_write_reg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, sizeof(uint32_t));
   1dff4:	463b      	mov	r3, r7
   1dff6:	4632      	mov	r2, r6
   1dff8:	2136      	movs	r1, #54	; 0x36
   1dffa:	4620      	mov	r0, r4
   1dffc:	f7fb fc5e 	bl	198bc <dw1000_read_reg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
   1e000:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
        dw1000_write_reg(inst, PMSC_ID, PMSC_CTRL0_OFFSET, reg, sizeof(uint32_t));
   1e004:	9702      	str	r7, [sp, #8]
   1e006:	9000      	str	r0, [sp, #0]
   1e008:	9601      	str	r6, [sp, #4]
   1e00a:	4632      	mov	r2, r6
   1e00c:	2136      	movs	r1, #54	; 0x36
   1e00e:	4620      	mov	r0, r4
   1e010:	f7fb fcc4 	bl	1999c <dw1000_write_reg>
        dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF, sizeof(uint32_t));
   1e014:	9702      	str	r7, [sp, #8]
   1e016:	f44f 7288 	mov.w	r2, #272	; 0x110
   1e01a:	2300      	movs	r3, #0
   1e01c:	e9cd 2300 	strd	r2, r3, [sp]
   1e020:	2228      	movs	r2, #40	; 0x28
   1e022:	2136      	movs	r1, #54	; 0x36
   1e024:	4620      	mov	r0, r4
   1e026:	f7fb fcb9 	bl	1999c <dw1000_write_reg>

        if (mode & DWT_LEDS_INIT_BLINK){
   1e02a:	f015 0f04 	tst.w	r5, #4
   1e02e:	d02e      	beq.n	1e08e <dw1000_gpio_config_leds+0xce>
            // Single blink sign-of-life.
            reg = (uint32_t) dw1000_read_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, sizeof(uint32_t));
   1e030:	463b      	mov	r3, r7
   1e032:	2228      	movs	r2, #40	; 0x28
   1e034:	2136      	movs	r1, #54	; 0x36
   1e036:	4620      	mov	r0, r4
   1e038:	f7fb fc40 	bl	198bc <dw1000_read_reg>
   1e03c:	4605      	mov	r5, r0
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
   1e03e:	f440 2370 	orr.w	r3, r0, #983040	; 0xf0000

            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1e042:	9702      	str	r7, [sp, #8]
   1e044:	9300      	str	r3, [sp, #0]
   1e046:	9601      	str	r6, [sp, #4]
   1e048:	2228      	movs	r2, #40	; 0x28
   1e04a:	2136      	movs	r1, #54	; 0x36
   1e04c:	4620      	mov	r0, r4
   1e04e:	f7fb fca5 	bl	1999c <dw1000_write_reg>
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dpl_cputime_delay_usecs(10);
   1e052:	200a      	movs	r0, #10
   1e054:	f7f4 fc49 	bl	128ea <dpl_cputime_delay_usecs>
            dw1000_write_reg(inst, PMSC_ID, PMSC_LEDC_OFFSET, reg, sizeof(uint32_t));
   1e058:	9702      	str	r7, [sp, #8]
   1e05a:	f425 2570 	bic.w	r5, r5, #983040	; 0xf0000
   1e05e:	9500      	str	r5, [sp, #0]
   1e060:	9601      	str	r6, [sp, #4]
   1e062:	2228      	movs	r2, #40	; 0x28
   1e064:	2136      	movs	r1, #54	; 0x36
   1e066:	4620      	mov	r0, r4
   1e068:	f7fb fc98 	bl	1999c <dw1000_write_reg>
   1e06c:	e00f      	b.n	1e08e <dw1000_gpio_config_leds+0xce>
        }
    }else{
        // Clear the GPIO bits that are used for LED control.
        reg = dw1000_read_reg(inst,GPIO_CTRL_ID, GPIO_MODE_OFFSET,sizeof(uint32_t));
   1e06e:	2304      	movs	r3, #4
   1e070:	2200      	movs	r2, #0
   1e072:	2126      	movs	r1, #38	; 0x26
   1e074:	f7fb fc22 	bl	198bc <dw1000_read_reg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
   1e078:	f420 5070 	bic.w	r0, r0, #15360	; 0x3c00
        dw1000_write_reg(inst, GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg, sizeof(uint32_t));
   1e07c:	2304      	movs	r3, #4
   1e07e:	9302      	str	r3, [sp, #8]
   1e080:	2200      	movs	r2, #0
   1e082:	9000      	str	r0, [sp, #0]
   1e084:	9201      	str	r2, [sp, #4]
   1e086:	2126      	movs	r1, #38	; 0x26
   1e088:	4620      	mov	r0, r4
   1e08a:	f7fb fc87 	bl	1999c <dw1000_write_reg>
    }
}
   1e08e:	b005      	add	sp, #20
   1e090:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e092 <_dw1000_otp_read>:
 * @param address  From where it starts reading
 * @return data value read from an OTP location.
 */

uint32_t _dw1000_otp_read(struct _dw1000_dev_instance_t * inst, uint16_t address)
{
   1e092:	b530      	push	{r4, r5, lr}
   1e094:	b085      	sub	sp, #20
   1e096:	4604      	mov	r4, r0
    // Write the address
    dw1000_write_reg(inst, OTP_IF_ID, OTP_ADDR, address, sizeof(uint16_t));
   1e098:	2302      	movs	r3, #2
   1e09a:	9302      	str	r3, [sp, #8]
   1e09c:	9100      	str	r1, [sp, #0]
   1e09e:	2300      	movs	r3, #0
   1e0a0:	9301      	str	r3, [sp, #4]
   1e0a2:	2204      	movs	r2, #4
   1e0a4:	212d      	movs	r1, #45	; 0x2d
   1e0a6:	f7fb fc79 	bl	1999c <dw1000_write_reg>

    // Perform OTP Read - Manual read mode has to be set
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN, sizeof(uint8_t));
   1e0aa:	2501      	movs	r5, #1
   1e0ac:	9502      	str	r5, [sp, #8]
   1e0ae:	2203      	movs	r2, #3
   1e0b0:	2300      	movs	r3, #0
   1e0b2:	e9cd 2300 	strd	r2, r3, [sp]
   1e0b6:	2206      	movs	r2, #6
   1e0b8:	212d      	movs	r1, #45	; 0x2d
   1e0ba:	4620      	mov	r0, r4
   1e0bc:	f7fb fc6e 	bl	1999c <dw1000_write_reg>
    dw1000_write_reg(inst, OTP_IF_ID, OTP_CTRL, 0x0, sizeof(uint8_t)); // OTPREAD is self clearing but OTPRDEN is not
   1e0c0:	9502      	str	r5, [sp, #8]
   1e0c2:	2200      	movs	r2, #0
   1e0c4:	2300      	movs	r3, #0
   1e0c6:	e9cd 2300 	strd	r2, r3, [sp]
   1e0ca:	2206      	movs	r2, #6
   1e0cc:	212d      	movs	r1, #45	; 0x2d
   1e0ce:	4620      	mov	r0, r4
   1e0d0:	f7fb fc64 	bl	1999c <dw1000_write_reg>

    // Read data, available 40ns after rising edge of OTP_READ
    dpl_cputime_delay_usecs(1);
   1e0d4:	4628      	mov	r0, r5
   1e0d6:	f7f4 fc08 	bl	128ea <dpl_cputime_delay_usecs>
    return  (uint32_t) dw1000_read_reg(inst, OTP_IF_ID, OTP_RDAT, sizeof(uint32_t));
   1e0da:	2304      	movs	r3, #4
   1e0dc:	220a      	movs	r2, #10
   1e0de:	212d      	movs	r1, #45	; 0x2d
   1e0e0:	4620      	mov	r0, r4
   1e0e2:	f7fb fbeb 	bl	198bc <dw1000_read_reg>
}
   1e0e6:	b005      	add	sp, #20
   1e0e8:	bd30      	pop	{r4, r5, pc}

0001e0ea <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1e0ea:	6843      	ldr	r3, [r0, #4]
   1e0ec:	428b      	cmp	r3, r1
   1e0ee:	d805      	bhi.n	1e0fc <hal_flash_check_addr+0x12>
   1e0f0:	6882      	ldr	r2, [r0, #8]
   1e0f2:	4413      	add	r3, r2
   1e0f4:	428b      	cmp	r3, r1
   1e0f6:	d304      	bcc.n	1e102 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   1e0f8:	2000      	movs	r0, #0
   1e0fa:	4770      	bx	lr
        return SYS_EINVAL;
   1e0fc:	f06f 0001 	mvn.w	r0, #1
   1e100:	4770      	bx	lr
   1e102:	f06f 0001 	mvn.w	r0, #1
}
   1e106:	4770      	bx	lr

0001e108 <hal_flash_init>:
{
   1e108:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1e10a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1e10c:	462c      	mov	r4, r5
   1e10e:	e001      	b.n	1e114 <hal_flash_init+0xc>
   1e110:	3401      	adds	r4, #1
   1e112:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1e114:	4620      	mov	r0, r4
   1e116:	f7fb f9c7 	bl	194a8 <hal_bsp_flash_dev>
        if (!hf) {
   1e11a:	b138      	cbz	r0, 1e12c <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1e11c:	6802      	ldr	r2, [r0, #0]
   1e11e:	6952      	ldr	r2, [r2, #20]
   1e120:	4790      	blx	r2
   1e122:	2800      	cmp	r0, #0
   1e124:	d0f4      	beq.n	1e110 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1e126:	f06f 0504 	mvn.w	r5, #4
   1e12a:	e7f1      	b.n	1e110 <hal_flash_init+0x8>
}
   1e12c:	4628      	mov	r0, r5
   1e12e:	bd38      	pop	{r3, r4, r5, pc}

0001e130 <hal_flash_align>:
{
   1e130:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1e132:	f7fb f9b9 	bl	194a8 <hal_bsp_flash_dev>
    if (!hf) {
   1e136:	b108      	cbz	r0, 1e13c <hal_flash_align+0xc>
    return hf->hf_align;
   1e138:	7c00      	ldrb	r0, [r0, #16]
}
   1e13a:	bd08      	pop	{r3, pc}
        return 1;
   1e13c:	2001      	movs	r0, #1
   1e13e:	e7fc      	b.n	1e13a <hal_flash_align+0xa>

0001e140 <hal_flash_erased_val>:
{
   1e140:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1e142:	f7fb f9b1 	bl	194a8 <hal_bsp_flash_dev>
    if (!hf) {
   1e146:	b108      	cbz	r0, 1e14c <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1e148:	7d00      	ldrb	r0, [r0, #20]
}
   1e14a:	bd08      	pop	{r3, pc}
        return 1;
   1e14c:	2001      	movs	r0, #1
   1e14e:	e7fc      	b.n	1e14a <hal_flash_erased_val+0xa>

0001e150 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1e150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e154:	460c      	mov	r4, r1
   1e156:	4617      	mov	r7, r2
   1e158:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1e15a:	f7fb f9a5 	bl	194a8 <hal_bsp_flash_dev>
    if (!hf) {
   1e15e:	b1a0      	cbz	r0, 1e18a <hal_flash_read+0x3a>
   1e160:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1e162:	4621      	mov	r1, r4
   1e164:	f7ff ffc1 	bl	1e0ea <hal_flash_check_addr>
   1e168:	b990      	cbnz	r0, 1e190 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1e16a:	1961      	adds	r1, r4, r5
   1e16c:	4630      	mov	r0, r6
   1e16e:	f7ff ffbc 	bl	1e0ea <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1e172:	b980      	cbnz	r0, 1e196 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1e174:	6833      	ldr	r3, [r6, #0]
   1e176:	f8d3 8000 	ldr.w	r8, [r3]
   1e17a:	462b      	mov	r3, r5
   1e17c:	463a      	mov	r2, r7
   1e17e:	4621      	mov	r1, r4
   1e180:	4630      	mov	r0, r6
   1e182:	47c0      	blx	r8
    if (rc != 0) {
   1e184:	b950      	cbnz	r0, 1e19c <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   1e186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1e18a:	f06f 0001 	mvn.w	r0, #1
   1e18e:	e7fa      	b.n	1e186 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1e190:	f06f 0001 	mvn.w	r0, #1
   1e194:	e7f7      	b.n	1e186 <hal_flash_read+0x36>
   1e196:	f06f 0001 	mvn.w	r0, #1
   1e19a:	e7f4      	b.n	1e186 <hal_flash_read+0x36>
        return SYS_EIO;
   1e19c:	f06f 0004 	mvn.w	r0, #4
   1e1a0:	e7f1      	b.n	1e186 <hal_flash_read+0x36>
	...

0001e1a4 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1e1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1a8:	4604      	mov	r4, r0
   1e1aa:	460d      	mov	r5, r1
   1e1ac:	4690      	mov	r8, r2
   1e1ae:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1e1b0:	f7fb f97a 	bl	194a8 <hal_bsp_flash_dev>
    if (!hf) {
   1e1b4:	b1e8      	cbz	r0, 1e1f2 <hal_flash_write+0x4e>
   1e1b6:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1e1b8:	4629      	mov	r1, r5
   1e1ba:	f7ff ff96 	bl	1e0ea <hal_flash_check_addr>
   1e1be:	b9d8      	cbnz	r0, 1e1f8 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1e1c0:	19a9      	adds	r1, r5, r6
   1e1c2:	4638      	mov	r0, r7
   1e1c4:	f7ff ff91 	bl	1e0ea <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1e1c8:	b9c8      	cbnz	r0, 1e1fe <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1e1ca:	08e3      	lsrs	r3, r4, #3
   1e1cc:	4a10      	ldr	r2, [pc, #64]	; (1e210 <hal_flash_write+0x6c>)
   1e1ce:	5cd0      	ldrb	r0, [r2, r3]
   1e1d0:	f004 0407 	and.w	r4, r4, #7
   1e1d4:	fa40 f404 	asr.w	r4, r0, r4
   1e1d8:	f014 0f01 	tst.w	r4, #1
   1e1dc:	d112      	bne.n	1e204 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1e1de:	683b      	ldr	r3, [r7, #0]
   1e1e0:	685c      	ldr	r4, [r3, #4]
   1e1e2:	4633      	mov	r3, r6
   1e1e4:	4642      	mov	r2, r8
   1e1e6:	4629      	mov	r1, r5
   1e1e8:	4638      	mov	r0, r7
   1e1ea:	47a0      	blx	r4
    if (rc != 0) {
   1e1ec:	b968      	cbnz	r0, 1e20a <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1e1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   1e1f2:	f06f 0001 	mvn.w	r0, #1
   1e1f6:	e7fa      	b.n	1e1ee <hal_flash_write+0x4a>
        return SYS_EINVAL;
   1e1f8:	f06f 0001 	mvn.w	r0, #1
   1e1fc:	e7f7      	b.n	1e1ee <hal_flash_write+0x4a>
   1e1fe:	f06f 0001 	mvn.w	r0, #1
   1e202:	e7f4      	b.n	1e1ee <hal_flash_write+0x4a>
        return SYS_EACCES;
   1e204:	f06f 0006 	mvn.w	r0, #6
   1e208:	e7f1      	b.n	1e1ee <hal_flash_write+0x4a>
        return SYS_EIO;
   1e20a:	f06f 0004 	mvn.w	r0, #4
   1e20e:	e7ee      	b.n	1e1ee <hal_flash_write+0x4a>
   1e210:	20005468 	.word	0x20005468

0001e214 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1e214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e218:	b082      	sub	sp, #8
   1e21a:	4605      	mov	r5, r0
   1e21c:	460e      	mov	r6, r1
   1e21e:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1e220:	f7fb f942 	bl	194a8 <hal_bsp_flash_dev>
    if (!hf) {
   1e224:	2800      	cmp	r0, #0
   1e226:	d049      	beq.n	1e2bc <hal_flash_erase+0xa8>
   1e228:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1e22a:	4631      	mov	r1, r6
   1e22c:	f7ff ff5d 	bl	1e0ea <hal_flash_check_addr>
   1e230:	2800      	cmp	r0, #0
   1e232:	d146      	bne.n	1e2c2 <hal_flash_erase+0xae>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1e234:	eb06 0809 	add.w	r8, r6, r9
   1e238:	4641      	mov	r1, r8
   1e23a:	4620      	mov	r0, r4
   1e23c:	f7ff ff55 	bl	1e0ea <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1e240:	2800      	cmp	r0, #0
   1e242:	d141      	bne.n	1e2c8 <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1e244:	08eb      	lsrs	r3, r5, #3
   1e246:	4a25      	ldr	r2, [pc, #148]	; (1e2dc <hal_flash_erase+0xc8>)
   1e248:	5cd7      	ldrb	r7, [r2, r3]
   1e24a:	f005 0507 	and.w	r5, r5, #7
   1e24e:	fa47 f505 	asr.w	r5, r7, r5
   1e252:	f015 0a01 	ands.w	sl, r5, #1
   1e256:	d13a      	bne.n	1e2ce <hal_flash_erase+0xba>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1e258:	45b0      	cmp	r8, r6
   1e25a:	d93b      	bls.n	1e2d4 <hal_flash_erase+0xc0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1e25c:	6823      	ldr	r3, [r4, #0]
   1e25e:	699b      	ldr	r3, [r3, #24]
   1e260:	b353      	cbz	r3, 1e2b8 <hal_flash_erase+0xa4>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1e262:	464a      	mov	r2, r9
   1e264:	4631      	mov	r1, r6
   1e266:	4620      	mov	r0, r4
   1e268:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1e26a:	4650      	mov	r0, sl
   1e26c:	b002      	add	sp, #8
   1e26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   1e272:	2300      	movs	r3, #0
   1e274:	461a      	mov	r2, r3
   1e276:	4619      	mov	r1, r3
   1e278:	4618      	mov	r0, r3
   1e27a:	f7ea ffa3 	bl	91c4 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e27e:	3501      	adds	r5, #1
   1e280:	68e3      	ldr	r3, [r4, #12]
   1e282:	42ab      	cmp	r3, r5
   1e284:	ddf1      	ble.n	1e26a <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1e286:	6823      	ldr	r3, [r4, #0]
   1e288:	68df      	ldr	r7, [r3, #12]
   1e28a:	466b      	mov	r3, sp
   1e28c:	aa01      	add	r2, sp, #4
   1e28e:	4629      	mov	r1, r5
   1e290:	4620      	mov	r0, r4
   1e292:	47b8      	blx	r7
            assert(rc == 0);
   1e294:	2800      	cmp	r0, #0
   1e296:	d1ec      	bne.n	1e272 <hal_flash_erase+0x5e>
            end_area = start + size;
   1e298:	9901      	ldr	r1, [sp, #4]
   1e29a:	9b00      	ldr	r3, [sp, #0]
   1e29c:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1e29e:	429e      	cmp	r6, r3
   1e2a0:	d2ed      	bcs.n	1e27e <hal_flash_erase+0x6a>
   1e2a2:	4588      	cmp	r8, r1
   1e2a4:	d9eb      	bls.n	1e27e <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1e2a6:	6823      	ldr	r3, [r4, #0]
   1e2a8:	689b      	ldr	r3, [r3, #8]
   1e2aa:	4620      	mov	r0, r4
   1e2ac:	4798      	blx	r3
   1e2ae:	2800      	cmp	r0, #0
   1e2b0:	d0e5      	beq.n	1e27e <hal_flash_erase+0x6a>
                    return SYS_EIO;
   1e2b2:	f06f 0a04 	mvn.w	sl, #4
   1e2b6:	e7d8      	b.n	1e26a <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1e2b8:	4655      	mov	r5, sl
   1e2ba:	e7e1      	b.n	1e280 <hal_flash_erase+0x6c>
        return SYS_EINVAL;
   1e2bc:	f06f 0a01 	mvn.w	sl, #1
   1e2c0:	e7d3      	b.n	1e26a <hal_flash_erase+0x56>
        return SYS_EINVAL;
   1e2c2:	f06f 0a01 	mvn.w	sl, #1
   1e2c6:	e7d0      	b.n	1e26a <hal_flash_erase+0x56>
   1e2c8:	f06f 0a01 	mvn.w	sl, #1
   1e2cc:	e7cd      	b.n	1e26a <hal_flash_erase+0x56>
        return SYS_EACCES;
   1e2ce:	f06f 0a06 	mvn.w	sl, #6
   1e2d2:	e7ca      	b.n	1e26a <hal_flash_erase+0x56>
        return SYS_EINVAL;
   1e2d4:	f06f 0a01 	mvn.w	sl, #1
   1e2d8:	e7c7      	b.n	1e26a <hal_flash_erase+0x56>
   1e2da:	bf00      	nop
   1e2dc:	20005468 	.word	0x20005468

0001e2e0 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2e2:	4604      	mov	r4, r0
   1e2e4:	4616      	mov	r6, r2
   1e2e6:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1e2e8:	6807      	ldr	r7, [r0, #0]
   1e2ea:	683f      	ldr	r7, [r7, #0]
   1e2ec:	47b8      	blx	r7
    if (rc != 0) {
   1e2ee:	b968      	cbnz	r0, 1e30c <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1e2f0:	2100      	movs	r1, #0
   1e2f2:	e000      	b.n	1e2f6 <hal_flash_is_erased+0x16>
   1e2f4:	3101      	adds	r1, #1
   1e2f6:	42a9      	cmp	r1, r5
   1e2f8:	d206      	bcs.n	1e308 <hal_flash_is_erased+0x28>
        if (buf[i] != hf->hf_erased_val) {
   1e2fa:	f816 e001 	ldrb.w	lr, [r6, r1]
   1e2fe:	f894 c014 	ldrb.w	ip, [r4, #20]
   1e302:	45e6      	cmp	lr, ip
   1e304:	d0f6      	beq.n	1e2f4 <hal_flash_is_erased+0x14>
   1e306:	e000      	b.n	1e30a <hal_flash_is_erased+0x2a>
            return 0;
        }
    }
    return 1;
   1e308:	2001      	movs	r0, #1
}
   1e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1e30c:	f06f 0004 	mvn.w	r0, #4
   1e310:	e7fb      	b.n	1e30a <hal_flash_is_erased+0x2a>

0001e312 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1e312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e316:	460c      	mov	r4, r1
   1e318:	4690      	mov	r8, r2
   1e31a:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1e31c:	f7fb f8c4 	bl	194a8 <hal_bsp_flash_dev>
    if (!hf) {
   1e320:	b1f8      	cbz	r0, 1e362 <hal_flash_isempty+0x50>
   1e322:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1e324:	4621      	mov	r1, r4
   1e326:	f7ff fee0 	bl	1e0ea <hal_flash_check_addr>
   1e32a:	b9e8      	cbnz	r0, 1e368 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1e32c:	1961      	adds	r1, r4, r5
   1e32e:	4630      	mov	r0, r6
   1e330:	f7ff fedb 	bl	1e0ea <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1e334:	b9d8      	cbnz	r0, 1e36e <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1e336:	6833      	ldr	r3, [r6, #0]
   1e338:	691f      	ldr	r7, [r3, #16]
   1e33a:	b15f      	cbz	r7, 1e354 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1e33c:	462b      	mov	r3, r5
   1e33e:	4642      	mov	r2, r8
   1e340:	4621      	mov	r1, r4
   1e342:	4630      	mov	r0, r6
   1e344:	47b8      	blx	r7
        if (rc < 0) {
   1e346:	2800      	cmp	r0, #0
   1e348:	db01      	blt.n	1e34e <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1e34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   1e34e:	f06f 0004 	mvn.w	r0, #4
   1e352:	e7fa      	b.n	1e34a <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1e354:	462b      	mov	r3, r5
   1e356:	4642      	mov	r2, r8
   1e358:	4621      	mov	r1, r4
   1e35a:	4630      	mov	r0, r6
   1e35c:	f7ff ffc0 	bl	1e2e0 <hal_flash_is_erased>
   1e360:	e7f3      	b.n	1e34a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1e362:	f06f 0001 	mvn.w	r0, #1
   1e366:	e7f0      	b.n	1e34a <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1e368:	f06f 0001 	mvn.w	r0, #1
   1e36c:	e7ed      	b.n	1e34a <hal_flash_isempty+0x38>
   1e36e:	f06f 0001 	mvn.w	r0, #1
   1e372:	e7ea      	b.n	1e34a <hal_flash_isempty+0x38>

0001e374 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1e374:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e376:	b085      	sub	sp, #20
   1e378:	4607      	mov	r7, r0
   1e37a:	460e      	mov	r6, r1
   1e37c:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1e37e:	2400      	movs	r4, #0
   1e380:	e007      	b.n	1e392 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1e382:	466a      	mov	r2, sp
   1e384:	19a1      	adds	r1, r4, r6
   1e386:	4638      	mov	r0, r7
   1e388:	f7ff ffc3 	bl	1e312 <hal_flash_isempty>
        if (empty != 1) {
   1e38c:	2801      	cmp	r0, #1
   1e38e:	d108      	bne.n	1e3a2 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1e390:	3410      	adds	r4, #16
   1e392:	42ac      	cmp	r4, r5
   1e394:	d204      	bcs.n	1e3a0 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   1e396:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   1e398:	2b0f      	cmp	r3, #15
   1e39a:	d9f2      	bls.n	1e382 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   1e39c:	2310      	movs	r3, #16
   1e39e:	e7f0      	b.n	1e382 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   1e3a0:	2001      	movs	r0, #1
}
   1e3a2:	b005      	add	sp, #20
   1e3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001e3a8 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1e3a8:	2300      	movs	r3, #0
   1e3aa:	4a07      	ldr	r2, [pc, #28]	; (1e3c8 <nrf52k_flash_wait_ready+0x20>)
   1e3ac:	4293      	cmp	r3, r2
   1e3ae:	dc06      	bgt.n	1e3be <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1e3b0:	4a06      	ldr	r2, [pc, #24]	; (1e3cc <nrf52k_flash_wait_ready+0x24>)
   1e3b2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1e3b6:	2a01      	cmp	r2, #1
   1e3b8:	d004      	beq.n	1e3c4 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1e3ba:	3301      	adds	r3, #1
   1e3bc:	e7f5      	b.n	1e3aa <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1e3be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e3c2:	4770      	bx	lr
            return 0;
   1e3c4:	2000      	movs	r0, #0
}
   1e3c6:	4770      	bx	lr
   1e3c8:	0001869f 	.word	0x0001869f
   1e3cc:	4001e000 	.word	0x4001e000

0001e3d0 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1e3d0:	b538      	push	{r3, r4, r5, lr}
   1e3d2:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1e3d4:	f7ff ffe8 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e3d8:	b9e0      	cbnz	r0, 1e414 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e3da:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e3de:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1e3e0:	4b0e      	ldr	r3, [pc, #56]	; (1e41c <nrf52k_flash_erase_sector+0x4c>)
   1e3e2:	2202      	movs	r2, #2
   1e3e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1e3e8:	f7ff ffde 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e3ec:	b140      	cbz	r0, 1e400 <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   1e3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1e3f2:	4b0a      	ldr	r3, [pc, #40]	; (1e41c <nrf52k_flash_erase_sector+0x4c>)
   1e3f4:	2200      	movs	r2, #0
   1e3f6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1e3fa:	b905      	cbnz	r5, 1e3fe <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1e3fc:	b662      	cpsie	i
    return rc;
}
   1e3fe:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1e400:	4b06      	ldr	r3, [pc, #24]	; (1e41c <nrf52k_flash_erase_sector+0x4c>)
   1e402:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1e406:	f7ff ffcf 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e40a:	2800      	cmp	r0, #0
   1e40c:	d0f1      	beq.n	1e3f2 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1e40e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e412:	e7ee      	b.n	1e3f2 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1e414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e418:	e7f1      	b.n	1e3fe <nrf52k_flash_erase_sector+0x2e>
   1e41a:	bf00      	nop
   1e41c:	4001e000 	.word	0x4001e000

0001e420 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1e420:	2000      	movs	r0, #0
   1e422:	4770      	bx	lr

0001e424 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1e424:	297f      	cmp	r1, #127	; 0x7f
   1e426:	dc06      	bgt.n	1e436 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1e428:	0309      	lsls	r1, r1, #12
   1e42a:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1e42c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1e430:	601a      	str	r2, [r3, #0]
}
   1e432:	2000      	movs	r0, #0
   1e434:	4770      	bx	lr
{
   1e436:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1e438:	2300      	movs	r3, #0
   1e43a:	461a      	mov	r2, r3
   1e43c:	4619      	mov	r1, r3
   1e43e:	4618      	mov	r0, r3
   1e440:	f7ea fec0 	bl	91c4 <__assert_func>

0001e444 <nrf52k_flash_write>:
{
   1e444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e448:	b082      	sub	sp, #8
   1e44a:	460d      	mov	r5, r1
   1e44c:	4616      	mov	r6, r2
   1e44e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1e450:	f7ff ffaa 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e454:	2800      	cmp	r0, #0
   1e456:	d154      	bne.n	1e502 <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e458:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e45c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1e45e:	4b2a      	ldr	r3, [pc, #168]	; (1e508 <nrf52k_flash_write+0xc4>)
   1e460:	2201      	movs	r2, #1
   1e462:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1e466:	f015 0803 	ands.w	r8, r5, #3
   1e46a:	d10a      	bne.n	1e482 <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   1e46c:	2c03      	cmp	r4, #3
   1e46e:	d924      	bls.n	1e4ba <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   1e470:	f7ff ff9a 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e474:	bbb8      	cbnz	r0, 1e4e6 <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   1e476:	f856 3b04 	ldr.w	r3, [r6], #4
   1e47a:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1e47e:	3c04      	subs	r4, #4
   1e480:	e7f4      	b.n	1e46c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1e482:	f7ff ff91 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e486:	bb58      	cbnz	r0, 1e4e0 <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   1e488:	f025 0a03 	bic.w	sl, r5, #3
   1e48c:	f8da 3000 	ldr.w	r3, [sl]
   1e490:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1e492:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1e496:	45a1      	cmp	r9, r4
   1e498:	d900      	bls.n	1e49c <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   1e49a:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1e49c:	464a      	mov	r2, r9
   1e49e:	4631      	mov	r1, r6
   1e4a0:	ab01      	add	r3, sp, #4
   1e4a2:	eb03 0008 	add.w	r0, r3, r8
   1e4a6:	f7f2 f8db 	bl	10660 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1e4aa:	9b01      	ldr	r3, [sp, #4]
   1e4ac:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1e4b0:	444d      	add	r5, r9
        num_bytes -= cnt;
   1e4b2:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1e4b6:	444e      	add	r6, r9
   1e4b8:	e7d8      	b.n	1e46c <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1e4ba:	b15c      	cbz	r4, 1e4d4 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   1e4bc:	682b      	ldr	r3, [r5, #0]
   1e4be:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   1e4c0:	4622      	mov	r2, r4
   1e4c2:	4631      	mov	r1, r6
   1e4c4:	a801      	add	r0, sp, #4
   1e4c6:	f7f2 f8cb 	bl	10660 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1e4ca:	f7ff ff6d 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e4ce:	b9a8      	cbnz	r0, 1e4fc <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   1e4d0:	9b01      	ldr	r3, [sp, #4]
   1e4d2:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1e4d4:	f7ff ff68 	bl	1e3a8 <nrf52k_flash_wait_ready>
   1e4d8:	b138      	cbz	r0, 1e4ea <nrf52k_flash_write+0xa6>
        rc = -1;
   1e4da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4de:	e004      	b.n	1e4ea <nrf52k_flash_write+0xa6>
    int rc = -1;
   1e4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e4e4:	e001      	b.n	1e4ea <nrf52k_flash_write+0xa6>
   1e4e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1e4ea:	4b07      	ldr	r3, [pc, #28]	; (1e508 <nrf52k_flash_write+0xc4>)
   1e4ec:	2200      	movs	r2, #0
   1e4ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1e4f2:	b907      	cbnz	r7, 1e4f6 <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   1e4f4:	b662      	cpsie	i
}
   1e4f6:	b002      	add	sp, #8
   1e4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1e4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e500:	e7f3      	b.n	1e4ea <nrf52k_flash_write+0xa6>
        return -1;
   1e502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e506:	e7f6      	b.n	1e4f6 <nrf52k_flash_write+0xb2>
   1e508:	4001e000 	.word	0x4001e000

0001e50c <nrf52k_flash_read>:
{
   1e50c:	b508      	push	{r3, lr}
   1e50e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1e510:	461a      	mov	r2, r3
   1e512:	f7f2 f8a5 	bl	10660 <memcpy>
}
   1e516:	2000      	movs	r0, #0
   1e518:	bd08      	pop	{r3, pc}
	...

0001e51c <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1e51c:	b570      	push	{r4, r5, r6, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1e51e:	f7ec f89d 	bl	a65c <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1e522:	4b31      	ldr	r3, [pc, #196]	; (1e5e8 <nrf52_timer_handler+0xcc>)
   1e524:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1e528:	4b30      	ldr	r3, [pc, #192]	; (1e5ec <nrf52_timer_handler+0xd0>)
   1e52a:	689c      	ldr	r4, [r3, #8]
    assert(x <= 0xffffff);
   1e52c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1e530:	d227      	bcs.n	1e582 <nrf52_timer_handler+0x66>
   1e532:	4605      	mov	r5, r0
    assert(y <= 0xffffff);
   1e534:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
   1e538:	d229      	bcs.n	1e58e <nrf52_timer_handler+0x72>
    result = x - y;
   1e53a:	1b12      	subs	r2, r2, r4
    if (result & 0x800000) {
   1e53c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1e540:	d02b      	beq.n	1e59a <nrf52_timer_handler+0x7e>
        return (result | 0xff800000);
   1e542:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1e546:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1e54a:	4e28      	ldr	r6, [pc, #160]	; (1e5ec <nrf52_timer_handler+0xd0>)
   1e54c:	6834      	ldr	r4, [r6, #0]
   1e54e:	fb92 f4f4 	sdiv	r4, r2, r4
    os_time_advance(ticks);
   1e552:	4620      	mov	r0, r4
   1e554:	f7eb ff62 	bl	a41c <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1e558:	4b23      	ldr	r3, [pc, #140]	; (1e5e8 <nrf52_timer_handler+0xcc>)
   1e55a:	2200      	movs	r2, #0
   1e55c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1e560:	68b3      	ldr	r3, [r6, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1e562:	6831      	ldr	r1, [r6, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1e564:	fb04 3201 	mla	r2, r4, r1, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1e568:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1e56c:	60b2      	str	r2, [r6, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1e56e:	1854      	adds	r4, r2, r1
    OS_ASSERT_CRITICAL();
   1e570:	f7ec f87d 	bl	a66e <os_arch_in_critical>
   1e574:	bb08      	cbnz	r0, 1e5ba <nrf52_timer_handler+0x9e>
   1e576:	2300      	movs	r3, #0
   1e578:	461a      	mov	r2, r3
   1e57a:	4619      	mov	r1, r3
   1e57c:	4618      	mov	r0, r3
   1e57e:	f7ea fe21 	bl	91c4 <__assert_func>
    assert(x <= 0xffffff);
   1e582:	2300      	movs	r3, #0
   1e584:	461a      	mov	r2, r3
   1e586:	4619      	mov	r1, r3
   1e588:	4618      	mov	r0, r3
   1e58a:	f7ea fe1b 	bl	91c4 <__assert_func>
    assert(y <= 0xffffff);
   1e58e:	2300      	movs	r3, #0
   1e590:	461a      	mov	r2, r3
   1e592:	4619      	mov	r1, r3
   1e594:	4618      	mov	r0, r3
   1e596:	f7ea fe15 	bl	91c4 <__assert_func>
        return (result & 0x007fffff);
   1e59a:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1e59e:	e7d4      	b.n	1e54a <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   1e5a0:	2300      	movs	r3, #0
   1e5a2:	461a      	mov	r2, r3
   1e5a4:	4619      	mov	r1, r3
   1e5a6:	4618      	mov	r0, r3
   1e5a8:	f7ea fe0c 	bl	91c4 <__assert_func>
        return (result & 0x007fffff);
   1e5ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   1e5b0:	2b02      	cmp	r3, #2
   1e5b2:	dc15      	bgt.n	1e5e0 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1e5b4:	4b0d      	ldr	r3, [pc, #52]	; (1e5ec <nrf52_timer_handler+0xd0>)
   1e5b6:	681c      	ldr	r4, [r3, #0]
   1e5b8:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1e5ba:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1e5be:	4b0a      	ldr	r3, [pc, #40]	; (1e5e8 <nrf52_timer_handler+0xcc>)
   1e5c0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1e5c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1e5c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1e5cc:	d2e8      	bcs.n	1e5a0 <nrf52_timer_handler+0x84>
    result = x - y;
   1e5ce:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1e5d0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1e5d4:	d0ea      	beq.n	1e5ac <nrf52_timer_handler+0x90>
        return (result | 0xff800000);
   1e5d6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1e5da:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1e5de:	e7e7      	b.n	1e5b0 <nrf52_timer_handler+0x94>

    OS_EXIT_CRITICAL(sr);
   1e5e0:	4628      	mov	r0, r5
   1e5e2:	f7ec f841 	bl	a668 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1e5e6:	bd70      	pop	{r4, r5, r6, pc}
   1e5e8:	40011000 	.word	0x40011000
   1e5ec:	2000546c 	.word	0x2000546c

0001e5f0 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1e5f0:	b538      	push	{r3, r4, r5, lr}
   1e5f2:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1e5f4:	f7ec f83b 	bl	a66e <os_arch_in_critical>
   1e5f8:	b1a0      	cbz	r0, 1e624 <os_tick_idle+0x34>

    if (ticks > 0) {
   1e5fa:	2d00      	cmp	r5, #0
   1e5fc:	d038      	beq.n	1e670 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1e5fe:	4b20      	ldr	r3, [pc, #128]	; (1e680 <os_tick_idle+0x90>)
   1e600:	685b      	ldr	r3, [r3, #4]
   1e602:	42ab      	cmp	r3, r5
   1e604:	d200      	bcs.n	1e608 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1e606:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1e608:	4b1d      	ldr	r3, [pc, #116]	; (1e680 <os_tick_idle+0x90>)
   1e60a:	689a      	ldr	r2, [r3, #8]
   1e60c:	681c      	ldr	r4, [r3, #0]
   1e60e:	fb05 2404 	mla	r4, r5, r4, r2
    OS_ASSERT_CRITICAL();
   1e612:	f7ec f82c 	bl	a66e <os_arch_in_critical>
   1e616:	b9c0      	cbnz	r0, 1e64a <os_tick_idle+0x5a>
   1e618:	2300      	movs	r3, #0
   1e61a:	461a      	mov	r2, r3
   1e61c:	4619      	mov	r1, r3
   1e61e:	4618      	mov	r0, r3
   1e620:	f7ea fdd0 	bl	91c4 <__assert_func>
    OS_ASSERT_CRITICAL();
   1e624:	2300      	movs	r3, #0
   1e626:	461a      	mov	r2, r3
   1e628:	4619      	mov	r1, r3
   1e62a:	4618      	mov	r0, r3
   1e62c:	f7ea fdca 	bl	91c4 <__assert_func>
    assert(y <= 0xffffff);
   1e630:	2300      	movs	r3, #0
   1e632:	461a      	mov	r2, r3
   1e634:	4619      	mov	r1, r3
   1e636:	4618      	mov	r0, r3
   1e638:	f7ea fdc4 	bl	91c4 <__assert_func>
        return (result & 0x007fffff);
   1e63c:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   1e640:	2b02      	cmp	r3, #2
   1e642:	dc15      	bgt.n	1e670 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1e644:	4b0e      	ldr	r3, [pc, #56]	; (1e680 <os_tick_idle+0x90>)
   1e646:	681c      	ldr	r4, [r3, #0]
   1e648:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1e64a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1e64e:	4b0d      	ldr	r3, [pc, #52]	; (1e684 <os_tick_idle+0x94>)
   1e650:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1e654:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1e658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1e65c:	d2e8      	bcs.n	1e630 <os_tick_idle+0x40>
    result = x - y;
   1e65e:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1e660:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1e664:	d0ea      	beq.n	1e63c <os_tick_idle+0x4c>
        return (result | 0xff800000);
   1e666:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1e66a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1e66e:	e7e7      	b.n	1e640 <os_tick_idle+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
   1e670:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1e674:	bf30      	wfi

    if (ticks > 0) {
   1e676:	b905      	cbnz	r5, 1e67a <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1e678:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1e67a:	f7ff ff4f 	bl	1e51c <nrf52_timer_handler>
}
   1e67e:	e7fb      	b.n	1e678 <os_tick_idle+0x88>
   1e680:	2000546c 	.word	0x2000546c
   1e684:	40011000 	.word	0x40011000

0001e688 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1e688:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1e68a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1e68e:	fbb3 f3f0 	udiv	r3, r3, r0
   1e692:	fb00 f303 	mul.w	r3, r0, r3
   1e696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e69a:	d136      	bne.n	1e70a <os_tick_init+0x82>
   1e69c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1e69e:	4d1e      	ldr	r5, [pc, #120]	; (1e718 <os_tick_init+0x90>)
   1e6a0:	2600      	movs	r6, #0
   1e6a2:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1e6a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1e6a8:	fbb3 f0f0 	udiv	r0, r3, r0
   1e6ac:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1e6ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1e6b2:	fbb3 f0f0 	udiv	r0, r3, r0
   1e6b6:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1e6b8:	f7eb ffd0 	bl	a65c <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e6bc:	0164      	lsls	r4, r4, #5
   1e6be:	b2e4      	uxtb	r4, r4
   1e6c0:	4b16      	ldr	r3, [pc, #88]	; (1e71c <os_tick_init+0x94>)
   1e6c2:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1e6c6:	4a16      	ldr	r2, [pc, #88]	; (1e720 <os_tick_init+0x98>)
   1e6c8:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1e6ca:	4916      	ldr	r1, [pc, #88]	; (1e724 <os_tick_init+0x9c>)
   1e6cc:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e6d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e6d4:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1e6d6:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1e6da:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1e6de:	2201      	movs	r2, #1
   1e6e0:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1e6e2:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1e6e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e6e8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1e6ec:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1e6f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1e6f4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1e6f8:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1e6fc:	6829      	ldr	r1, [r5, #0]
   1e6fe:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1e702:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1e704:	f7eb ffb0 	bl	a668 <os_arch_restore_sr>
}
   1e708:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1e70a:	2300      	movs	r3, #0
   1e70c:	461a      	mov	r2, r3
   1e70e:	4619      	mov	r1, r3
   1e710:	4618      	mov	r0, r3
   1e712:	f7ea fd57 	bl	91c4 <__assert_func>
   1e716:	bf00      	nop
   1e718:	2000546c 	.word	0x2000546c
   1e71c:	e000e100 	.word	0xe000e100
   1e720:	e000ed00 	.word	0xe000ed00
   1e724:	0001e51d 	.word	0x0001e51d

0001e728 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1e728:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1e72a:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1e72c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1e730:	b333      	cbz	r3, 1e780 <nrf52_irqm_handler+0x58>
   1e732:	4604      	mov	r4, r0
        spim->EVENTS_END = 0;
   1e734:	2300      	movs	r3, #0
   1e736:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1e73a:	7843      	ldrb	r3, [r0, #1]
   1e73c:	b303      	cbz	r3, 1e780 <nrf52_irqm_handler+0x58>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1e73e:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1e742:	88c3      	ldrh	r3, [r0, #6]
   1e744:	fa13 f382 	uxtah	r3, r3, r2
   1e748:	b29b      	uxth	r3, r3
   1e74a:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1e74c:	8881      	ldrh	r1, [r0, #4]
   1e74e:	428b      	cmp	r3, r1
   1e750:	d217      	bcs.n	1e782 <nrf52_irqm_handler+0x5a>
            spi->nhs_txbuf += xfr_bytes;
   1e752:	b292      	uxth	r2, r2
   1e754:	6980      	ldr	r0, [r0, #24]
   1e756:	4410      	add	r0, r2
   1e758:	61a0      	str	r0, [r4, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1e75a:	1ac9      	subs	r1, r1, r3
   1e75c:	b289      	uxth	r1, r1
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1e75e:	29ff      	cmp	r1, #255	; 0xff
   1e760:	bf28      	it	cs
   1e762:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1e764:	f8c5 0544 	str.w	r0, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1e768:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1e76c:	69e3      	ldr	r3, [r4, #28]
   1e76e:	b12b      	cbz	r3, 1e77c <nrf52_irqm_handler+0x54>
                spi->nhs_rxbuf += xfr_bytes;
   1e770:	441a      	add	r2, r3
   1e772:	61e2      	str	r2, [r4, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1e774:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1e778:	f8c5 1538 	str.w	r1, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1e77c:	2301      	movs	r3, #1
   1e77e:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1e780:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
   1e782:	6a03      	ldr	r3, [r0, #32]
   1e784:	b10b      	cbz	r3, 1e78a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1e786:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1e788:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1e78a:	2300      	movs	r3, #0
   1e78c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1e78e:	2340      	movs	r3, #64	; 0x40
   1e790:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1e794:	e7f4      	b.n	1e780 <nrf52_irqm_handler+0x58>
	...

0001e798 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1e798:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1e79a:	4b04      	ldr	r3, [pc, #16]	; (1e7ac <nrf52_spi0_irq_handler+0x14>)
   1e79c:	781b      	ldrb	r3, [r3, #0]
   1e79e:	b103      	cbz	r3, 1e7a2 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1e7a0:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1e7a2:	4802      	ldr	r0, [pc, #8]	; (1e7ac <nrf52_spi0_irq_handler+0x14>)
   1e7a4:	f7ff ffc0 	bl	1e728 <nrf52_irqm_handler>
}
   1e7a8:	e7fa      	b.n	1e7a0 <nrf52_spi0_irq_handler+0x8>
   1e7aa:	bf00      	nop
   1e7ac:	20005478 	.word	0x20005478

0001e7b0 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1e7b0:	2301      	movs	r3, #1
   1e7b2:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1e7b4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1e7b8:	2b00      	cmp	r3, #0
   1e7ba:	d0fb      	beq.n	1e7b4 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1e7bc:	2300      	movs	r3, #0
   1e7be:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1e7c2:	4770      	bx	lr

0001e7c4 <hal_spi_config_slave>:
{
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1e7c4:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1e7c6:	780b      	ldrb	r3, [r1, #0]
   1e7c8:	2b03      	cmp	r3, #3
   1e7ca:	d815      	bhi.n	1e7f8 <hal_spi_config_slave+0x34>
   1e7cc:	e8df f003 	tbb	[pc, r3]
   1e7d0:	110e1702 	.word	0x110e1702
   1e7d4:	2300      	movs	r3, #0
   1e7d6:	4618      	mov	r0, r3
            nrf_config = 0;
            rc = EINVAL;
            break;
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1e7d8:	f891 c001 	ldrb.w	ip, [r1, #1]
   1e7dc:	f1bc 0f01 	cmp.w	ip, #1
   1e7e0:	d010      	beq.n	1e804 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1e7e2:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1e7e6:	788b      	ldrb	r3, [r1, #2]
   1e7e8:	b97b      	cbnz	r3, 1e80a <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1e7ea:	4770      	bx	lr
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1e7ec:	2304      	movs	r3, #4
    rc = 0;
   1e7ee:	2000      	movs	r0, #0
            break;
   1e7f0:	e7f2      	b.n	1e7d8 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1e7f2:	2306      	movs	r3, #6
    rc = 0;
   1e7f4:	2000      	movs	r0, #0
            break;
   1e7f6:	e7ef      	b.n	1e7d8 <hal_spi_config_slave+0x14>
            nrf_config = 0;
   1e7f8:	2300      	movs	r3, #0
            rc = EINVAL;
   1e7fa:	2016      	movs	r0, #22
            break;
   1e7fc:	e7ec      	b.n	1e7d8 <hal_spi_config_slave+0x14>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1e7fe:	2302      	movs	r3, #2
    rc = 0;
   1e800:	2000      	movs	r0, #0
   1e802:	e7e9      	b.n	1e7d8 <hal_spi_config_slave+0x14>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1e804:	f043 0301 	orr.w	r3, r3, #1
   1e808:	e7eb      	b.n	1e7e2 <hal_spi_config_slave+0x1e>
            rc = EINVAL;
   1e80a:	2016      	movs	r0, #22
    return rc;
   1e80c:	e7ed      	b.n	1e7ea <hal_spi_config_slave+0x26>
	...

0001e810 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1e810:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1e812:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1e814:	2401      	movs	r4, #1
   1e816:	409c      	lsls	r4, r3
   1e818:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   1e81c:	f8cc 450c 	str.w	r4, [ip, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1e820:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e824:	2403      	movs	r4, #3
   1e826:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1e82a:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1e82c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e830:	2400      	movs	r4, #0
   1e832:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1e836:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1e838:	780c      	ldrb	r4, [r1, #0]
   1e83a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1e83e:	784c      	ldrb	r4, [r1, #1]
   1e840:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1e844:	7889      	ldrb	r1, [r1, #2]
   1e846:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1e84a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e84e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1e852:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1e856:	491a      	ldr	r1, [pc, #104]	; (1e8c0 <hal_spi_init_master+0xb0>)
   1e858:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1e85a:	3310      	adds	r3, #16
   1e85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1e860:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1e864:	2b00      	cmp	r3, #0
   1e866:	db23      	blt.n	1e8b0 <hal_spi_init_master+0xa0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e868:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1e86c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1e870:	22e0      	movs	r2, #224	; 0xe0
   1e872:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1e876:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1e87a:	2b00      	cmp	r3, #0
   1e87c:	db08      	blt.n	1e890 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e87e:	f003 011f 	and.w	r1, r3, #31
   1e882:	095b      	lsrs	r3, r3, #5
   1e884:	2201      	movs	r2, #1
   1e886:	408a      	lsls	r2, r1
   1e888:	3360      	adds	r3, #96	; 0x60
   1e88a:	490e      	ldr	r1, [pc, #56]	; (1e8c4 <hal_spi_init_master+0xb4>)
   1e88c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1e890:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1e894:	2b00      	cmp	r3, #0
   1e896:	db07      	blt.n	1e8a8 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e898:	f003 011f 	and.w	r1, r3, #31
   1e89c:	095b      	lsrs	r3, r3, #5
   1e89e:	2201      	movs	r2, #1
   1e8a0:	408a      	lsls	r2, r1
   1e8a2:	4908      	ldr	r1, [pc, #32]	; (1e8c4 <hal_spi_init_master+0xb4>)
   1e8a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1e8a8:	2000      	movs	r0, #0
   1e8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e8ae:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e8b0:	f003 030f 	and.w	r3, r3, #15
   1e8b4:	4a04      	ldr	r2, [pc, #16]	; (1e8c8 <hal_spi_init_master+0xb8>)
   1e8b6:	441a      	add	r2, r3
   1e8b8:	23e0      	movs	r3, #224	; 0xe0
   1e8ba:	7613      	strb	r3, [r2, #24]
   1e8bc:	e7db      	b.n	1e876 <hal_spi_init_master+0x66>
   1e8be:	bf00      	nop
   1e8c0:	e000ed00 	.word	0xe000ed00
   1e8c4:	e000e100 	.word	0xe000e100
   1e8c8:	e000ecfc 	.word	0xe000ecfc

0001e8cc <hal_spi_config_master>:
{
   1e8cc:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1e8ce:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1e8d0:	680c      	ldr	r4, [r1, #0]
   1e8d2:	684b      	ldr	r3, [r1, #4]
   1e8d4:	6084      	str	r4, [r0, #8]
   1e8d6:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1e8d8:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1e8dc:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1e8e0:	7808      	ldrb	r0, [r1, #0]
   1e8e2:	2801      	cmp	r0, #1
   1e8e4:	d916      	bls.n	1e914 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1e8e6:	2001      	movs	r0, #1
   1e8e8:	4098      	lsls	r0, r3
   1e8ea:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1e8ee:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1e8f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e8f6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1e8fa:	2403      	movs	r4, #3
   1e8fc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1e900:	788b      	ldrb	r3, [r1, #2]
   1e902:	b973      	cbnz	r3, 1e922 <hal_spi_config_master+0x56>
    rc = 0;
   1e904:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1e906:	780b      	ldrb	r3, [r1, #0]
   1e908:	2b03      	cmp	r3, #3
   1e90a:	d825      	bhi.n	1e958 <hal_spi_config_master+0x8c>
   1e90c:	e8df f003 	tbb	[pc, r3]
   1e910:	2220270b 	.word	0x2220270b
        port->OUTCLR = (1UL << pin);
   1e914:	2001      	movs	r0, #1
   1e916:	4098      	lsls	r0, r3
   1e918:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1e91c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1e920:	e7e7      	b.n	1e8f2 <hal_spi_config_master+0x26>
            rc = EINVAL;
   1e922:	2016      	movs	r0, #22
   1e924:	e7ef      	b.n	1e906 <hal_spi_config_master+0x3a>
    switch (settings->data_mode) {
   1e926:	2300      	movs	r3, #0
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1e928:	f891 c001 	ldrb.w	ip, [r1, #1]
   1e92c:	f1bc 0f01 	cmp.w	ip, #1
   1e930:	d017      	beq.n	1e962 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1e932:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1e936:	684b      	ldr	r3, [r1, #4]
   1e938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1e93c:	d02c      	beq.n	1e998 <hal_spi_config_master+0xcc>
   1e93e:	d81c      	bhi.n	1e97a <hal_spi_config_master+0xae>
   1e940:	2bfa      	cmp	r3, #250	; 0xfa
   1e942:	d02c      	beq.n	1e99e <hal_spi_config_master+0xd2>
   1e944:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e948:	d10e      	bne.n	1e968 <hal_spi_config_master+0x9c>
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1e94a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1e94e:	e00f      	b.n	1e970 <hal_spi_config_master+0xa4>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1e950:	2304      	movs	r3, #4
            break;
   1e952:	e7e9      	b.n	1e928 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1e954:	2306      	movs	r3, #6
            break;
   1e956:	e7e7      	b.n	1e928 <hal_spi_config_master+0x5c>
            nrf_config = 0;
   1e958:	2300      	movs	r3, #0
            rc = EINVAL;
   1e95a:	2016      	movs	r0, #22
            break;
   1e95c:	e7e4      	b.n	1e928 <hal_spi_config_master+0x5c>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1e95e:	2302      	movs	r3, #2
   1e960:	e7e2      	b.n	1e928 <hal_spi_config_master+0x5c>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1e962:	f043 0301 	orr.w	r3, r3, #1
   1e966:	e7e4      	b.n	1e932 <hal_spi_config_master+0x66>
    switch (settings->baudrate) {
   1e968:	2b7d      	cmp	r3, #125	; 0x7d
   1e96a:	d11b      	bne.n	1e9a4 <hal_spi_config_master+0xd8>
   1e96c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1e970:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1e974:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e978:	4770      	bx	lr
    switch (settings->baudrate) {
   1e97a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1e97e:	d014      	beq.n	1e9aa <hal_spi_config_master+0xde>
   1e980:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1e984:	d102      	bne.n	1e98c <hal_spi_config_master+0xc0>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1e986:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e98a:	e7f1      	b.n	1e970 <hal_spi_config_master+0xa4>
    switch (settings->baudrate) {
   1e98c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1e990:	d10e      	bne.n	1e9b0 <hal_spi_config_master+0xe4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1e992:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   1e996:	e7eb      	b.n	1e970 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1e998:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e99c:	e7e8      	b.n	1e970 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1e99e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e9a2:	e7e5      	b.n	1e970 <hal_spi_config_master+0xa4>
            frequency = 0;
   1e9a4:	2300      	movs	r3, #0
            rc = EINVAL;
   1e9a6:	2016      	movs	r0, #22
   1e9a8:	e7e2      	b.n	1e970 <hal_spi_config_master+0xa4>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1e9aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e9ae:	e7df      	b.n	1e970 <hal_spi_config_master+0xa4>
            frequency = 0;
   1e9b0:	2300      	movs	r3, #0
            rc = EINVAL;
   1e9b2:	2016      	movs	r0, #22
   1e9b4:	e7dc      	b.n	1e970 <hal_spi_config_master+0xa4>
	...

0001e9b8 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e9b8:	2803      	cmp	r0, #3
   1e9ba:	dc10      	bgt.n	1e9de <hal_spi_config+0x26>
{
   1e9bc:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e9be:	4b0b      	ldr	r3, [pc, #44]	; (1e9ec <hal_spi_config+0x34>)
   1e9c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e9c4:	b168      	cbz	r0, 1e9e2 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1e9c6:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1e9c8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1e9cc:	b95b      	cbnz	r3, 1e9e6 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1e9ce:	7803      	ldrb	r3, [r0, #0]
   1e9d0:	b913      	cbnz	r3, 1e9d8 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
   1e9d2:	f7ff ff7b 	bl	1e8cc <hal_spi_config_master>
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
   1e9d6:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_slave(spi, settings);
   1e9d8:	f7ff fef4 	bl	1e7c4 <hal_spi_config_slave>
   1e9dc:	e7fb      	b.n	1e9d6 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e9de:	2016      	movs	r0, #22
}
   1e9e0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e9e2:	2016      	movs	r0, #22
   1e9e4:	e7f7      	b.n	1e9d6 <hal_spi_config+0x1e>
        return -1;
   1e9e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e9ea:	e7f4      	b.n	1e9d6 <hal_spi_config+0x1e>
   1e9ec:	00028a50 	.word	0x00028a50

0001e9f0 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1e9f0:	2803      	cmp	r0, #3
   1e9f2:	dc1b      	bgt.n	1ea2c <hal_spi_enable+0x3c>
   1e9f4:	4b10      	ldr	r3, [pc, #64]	; (1ea38 <hal_spi_enable+0x48>)
   1e9f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e9fa:	b1cb      	cbz	r3, 1ea30 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1e9fc:	781a      	ldrb	r2, [r3, #0]
   1e9fe:	b92a      	cbnz	r2, 1ea0c <hal_spi_enable+0x1c>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1ea00:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1ea02:	2201      	movs	r2, #1
   1ea04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    }
    rc = 0;
   1ea08:	2000      	movs	r0, #0
   1ea0a:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
   1ea0c:	6a1a      	ldr	r2, [r3, #32]
   1ea0e:	b18a      	cbz	r2, 1ea34 <hal_spi_enable+0x44>
        spis = spi->nhs_spi.spis;
   1ea10:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1ea12:	2000      	movs	r0, #0
   1ea14:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1ea18:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1ea1c:	f240 4202 	movw	r2, #1026	; 0x402
   1ea20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1ea24:	2202      	movs	r2, #2
   1ea26:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1ea2a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ea2c:	2016      	movs	r0, #22
   1ea2e:	4770      	bx	lr
   1ea30:	2016      	movs	r0, #22
   1ea32:	4770      	bx	lr
            rc = EINVAL;
   1ea34:	2016      	movs	r0, #22

err:
    return rc;
}
   1ea36:	4770      	bx	lr
   1ea38:	00028a50 	.word	0x00028a50

0001ea3c <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ea3c:	2803      	cmp	r0, #3
   1ea3e:	dc2a      	bgt.n	1ea96 <hal_spi_disable+0x5a>
{
   1ea40:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ea42:	4b17      	ldr	r3, [pc, #92]	; (1eaa0 <hal_spi_disable+0x64>)
   1ea44:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ea48:	b33c      	cbz	r4, 1ea9a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ea4a:	7823      	ldrb	r3, [r4, #0]
   1ea4c:	b9ab      	cbnz	r3, 1ea7a <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1ea4e:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ea50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea54:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1ea58:	7863      	ldrb	r3, [r4, #1]
   1ea5a:	b943      	cbnz	r3, 1ea6e <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1ea5c:	2300      	movs	r3, #0
   1ea5e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1ea62:	2000      	movs	r0, #0
   1ea64:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1ea66:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1ea68:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1ea6a:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1ea6c:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1ea6e:	4628      	mov	r0, r5
   1ea70:	f7ff fe9e 	bl	1e7b0 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1ea74:	2300      	movs	r3, #0
   1ea76:	7063      	strb	r3, [r4, #1]
   1ea78:	e7f0      	b.n	1ea5c <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1ea7a:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ea7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea80:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1ea84:	2300      	movs	r3, #0
   1ea86:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1ea8a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1ea8e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1ea92:	70e3      	strb	r3, [r4, #3]
   1ea94:	e7e5      	b.n	1ea62 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ea96:	2016      	movs	r0, #22
}
   1ea98:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ea9a:	2016      	movs	r0, #22
    return rc;
   1ea9c:	e7e6      	b.n	1ea6c <hal_spi_disable+0x30>
   1ea9e:	bf00      	nop
   1eaa0:	00028a50 	.word	0x00028a50

0001eaa4 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1eaa4:	2803      	cmp	r0, #3
   1eaa6:	dc1d      	bgt.n	1eae4 <hal_spi_init+0x40>
{
   1eaa8:	b538      	push	{r3, r4, r5, lr}
   1eaaa:	460c      	mov	r4, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1eaac:	4b12      	ldr	r3, [pc, #72]	; (1eaf8 <hal_spi_init+0x54>)
   1eaae:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1eab2:	b1cd      	cbz	r5, 1eae8 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1eab4:	b1d1      	cbz	r1, 1eaec <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1eab6:	2a01      	cmp	r2, #1
   1eab8:	d81a      	bhi.n	1eaf0 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1eaba:	702a      	strb	r2, [r5, #0]
    if (spi_num == 0) {
   1eabc:	b9d0      	cbnz	r0, 1eaf4 <hal_spi_init+0x50>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1eabe:	2303      	movs	r3, #3
   1eac0:	752b      	strb	r3, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1eac2:	b94a      	cbnz	r2, 1ead8 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1eac4:	4b0d      	ldr	r3, [pc, #52]	; (1eafc <hal_spi_init+0x58>)
   1eac6:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
   1eac8:	f7ff ffb8 	bl	1ea3c <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1eacc:	4a0c      	ldr	r2, [pc, #48]	; (1eb00 <hal_spi_init+0x5c>)
   1eace:	4621      	mov	r1, r4
   1ead0:	4628      	mov	r0, r5
   1ead2:	f7ff fe9d 	bl	1e810 <hal_spi_init_master>
   1ead6:	e00e      	b.n	1eaf6 <hal_spi_init+0x52>
            assert(0);
   1ead8:	2300      	movs	r3, #0
   1eada:	461a      	mov	r2, r3
   1eadc:	4619      	mov	r1, r3
   1eade:	4618      	mov	r0, r3
   1eae0:	f7ea fb70 	bl	91c4 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1eae4:	2016      	movs	r0, #22
}
   1eae6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1eae8:	2016      	movs	r0, #22
   1eaea:	e004      	b.n	1eaf6 <hal_spi_init+0x52>
    rc = EINVAL;
   1eaec:	2016      	movs	r0, #22
   1eaee:	e002      	b.n	1eaf6 <hal_spi_init+0x52>
   1eaf0:	2016      	movs	r0, #22
   1eaf2:	e000      	b.n	1eaf6 <hal_spi_init+0x52>
   1eaf4:	2016      	movs	r0, #22
}
   1eaf6:	bd38      	pop	{r3, r4, r5, pc}
   1eaf8:	00028a50 	.word	0x00028a50
   1eafc:	40003000 	.word	0x40003000
   1eb00:	0001e799 	.word	0x0001e799

0001eb04 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1eb04:	2803      	cmp	r0, #3
   1eb06:	dc0a      	bgt.n	1eb1e <hal_spi_set_txrx_cb+0x1a>
   1eb08:	4b08      	ldr	r3, [pc, #32]	; (1eb2c <hal_spi_set_txrx_cb+0x28>)
   1eb0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1eb0e:	b143      	cbz	r3, 1eb22 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1eb10:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1eb12:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1eb16:	b930      	cbnz	r0, 1eb26 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1eb18:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1eb1a:	625a      	str	r2, [r3, #36]	; 0x24
        rc = 0;
   1eb1c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1eb1e:	2016      	movs	r0, #22
   1eb20:	4770      	bx	lr
   1eb22:	2016      	movs	r0, #22
   1eb24:	4770      	bx	lr
        rc = -1;
   1eb26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

err:
    return rc;
}
   1eb2a:	4770      	bx	lr
   1eb2c:	00028a50 	.word	0x00028a50

0001eb30 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1eb30:	2b00      	cmp	r3, #0
   1eb32:	d046      	beq.n	1ebc2 <hal_spi_txrx+0x92>
{
   1eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb36:	460d      	mov	r5, r1
   1eb38:	4616      	mov	r6, r2
   1eb3a:	461f      	mov	r7, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1eb3c:	2803      	cmp	r0, #3
   1eb3e:	dc42      	bgt.n	1ebc6 <hal_spi_txrx+0x96>
   1eb40:	4b25      	ldr	r3, [pc, #148]	; (1ebd8 <hal_spi_txrx+0xa8>)
   1eb42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1eb46:	2b00      	cmp	r3, #0
   1eb48:	d03f      	beq.n	1ebca <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1eb4a:	781a      	ldrb	r2, [r3, #0]
   1eb4c:	2a00      	cmp	r2, #0
   1eb4e:	d13e      	bne.n	1ebce <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1eb50:	2900      	cmp	r1, #0
   1eb52:	d03e      	beq.n	1ebd2 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1eb54:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1eb56:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1eb5a:	2b07      	cmp	r3, #7
   1eb5c:	d004      	beq.n	1eb68 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1eb5e:	b95b      	cbnz	r3, 1eb78 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1eb60:	2301      	movs	r3, #1
   1eb62:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1eb66:	e007      	b.n	1eb78 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1eb68:	f7ff ff68 	bl	1ea3c <hal_spi_disable>
        if (enabled == 0) {
   1eb6c:	e7f8      	b.n	1eb60 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1eb6e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1eb72:	2300      	movs	r3, #0
   1eb74:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1eb78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eb7c:	2b00      	cmp	r3, #0
   1eb7e:	d1f6      	bne.n	1eb6e <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1eb80:	782b      	ldrb	r3, [r5, #0]
   1eb82:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1eb86:	1e7a      	subs	r2, r7, #1
        rxd = (uint8_t *)rxbuf;
   1eb88:	4631      	mov	r1, r6
        for (i = 0; i < len; ++i) {
   1eb8a:	2000      	movs	r0, #0
   1eb8c:	e00d      	b.n	1ebaa <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1eb8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eb92:	2b00      	cmp	r3, #0
   1eb94:	d0fb      	beq.n	1eb8e <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1eb96:	2300      	movs	r3, #0
   1eb98:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1eb9c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1eba0:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1eba2:	b10e      	cbz	r6, 1eba8 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1eba4:	f801 3b01 	strb.w	r3, [r1], #1
        for (i = 0; i < len; ++i) {
   1eba8:	3001      	adds	r0, #1
   1ebaa:	42b8      	cmp	r0, r7
   1ebac:	da07      	bge.n	1ebbe <hal_spi_txrx+0x8e>
            if (txcnt) {
   1ebae:	2a00      	cmp	r2, #0
   1ebb0:	d0ed      	beq.n	1eb8e <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1ebb2:	786b      	ldrb	r3, [r5, #1]
   1ebb4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1ebb8:	3a01      	subs	r2, #1
                ++txd;
   1ebba:	3501      	adds	r5, #1
   1ebbc:	e7e7      	b.n	1eb8e <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1ebbe:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1ebc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1ebc2:	2016      	movs	r0, #22
}
   1ebc4:	4770      	bx	lr
    return rc;
   1ebc6:	2016      	movs	r0, #22
   1ebc8:	e7fa      	b.n	1ebc0 <hal_spi_txrx+0x90>
   1ebca:	2016      	movs	r0, #22
   1ebcc:	e7f8      	b.n	1ebc0 <hal_spi_txrx+0x90>
   1ebce:	2016      	movs	r0, #22
   1ebd0:	e7f6      	b.n	1ebc0 <hal_spi_txrx+0x90>
   1ebd2:	2016      	movs	r0, #22
   1ebd4:	e7f4      	b.n	1ebc0 <hal_spi_txrx+0x90>
   1ebd6:	bf00      	nop
   1ebd8:	00028a50 	.word	0x00028a50

0001ebdc <hal_spi_txrx_noblock>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx_noblock(int spi_num, void *txbuf, void *rxbuf, int len)
{
   1ebdc:	b570      	push	{r4, r5, r6, lr}
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ebde:	2803      	cmp	r0, #3
   1ebe0:	dc63      	bgt.n	1ecaa <hal_spi_txrx_noblock+0xce>
   1ebe2:	461c      	mov	r4, r3
   1ebe4:	4b3a      	ldr	r3, [pc, #232]	; (1ecd0 <hal_spi_txrx_noblock+0xf4>)
   1ebe6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1ebea:	2d00      	cmp	r5, #0
   1ebec:	d060      	beq.n	1ecb0 <hal_spi_txrx_noblock+0xd4>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1ebee:	6a2b      	ldr	r3, [r5, #32]
   1ebf0:	2b00      	cmp	r3, #0
   1ebf2:	d05f      	beq.n	1ecb4 <hal_spi_txrx_noblock+0xd8>
   1ebf4:	2c00      	cmp	r4, #0
   1ebf6:	d05f      	beq.n	1ecb8 <hal_spi_txrx_noblock+0xdc>
#if MYNEWT_VAL_CHOICE(MCU_TARGET,nRF52832)
    /* There is a known issue in nRF52832 with sending 1 byte in SPIM mode that
     * it clocks out additional byte. For this reason, let us use SPI mode
     * for such a write
     */
    if (len == 1) {
   1ebf8:	2c01      	cmp	r4, #1
   1ebfa:	d033      	beq.n	1ec64 <hal_spi_txrx_noblock+0x88>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ebfc:	782b      	ldrb	r3, [r5, #0]
   1ebfe:	2b00      	cmp	r3, #0
   1ec00:	d141      	bne.n	1ec86 <hal_spi_txrx_noblock+0xaa>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1ec02:	2900      	cmp	r1, #0
   1ec04:	d05a      	beq.n	1ecbc <hal_spi_txrx_noblock+0xe0>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1ec06:	786b      	ldrb	r3, [r5, #1]
   1ec08:	2b00      	cmp	r3, #0
   1ec0a:	d159      	bne.n	1ecc0 <hal_spi_txrx_noblock+0xe4>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1ec0c:	6928      	ldr	r0, [r5, #16]
#if MYNEWT_VAL(SPI_3_MASTER)
        if (spim == NRF_SPIM3) {
            anomaly_198_enable(txbuf, len);
        }
#endif
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1ec0e:	2340      	movs	r3, #64	; 0x40
   1ec10:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1ec14:	2301      	movs	r3, #1
   1ec16:	706b      	strb	r3, [r5, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1ec18:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
   1ec1c:	2b07      	cmp	r3, #7
   1ec1e:	d005      	beq.n	1ec2c <hal_spi_txrx_noblock+0x50>
            spim->ENABLE = 0;
   1ec20:	2300      	movs	r3, #0
   1ec22:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1ec26:	2307      	movs	r3, #7
   1ec28:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1ec2c:	2300      	movs	r3, #0
   1ec2e:	80eb      	strh	r3, [r5, #6]
        spi->nhs_buflen = len;
   1ec30:	80ac      	strh	r4, [r5, #4]
        spi->nhs_txbuf = txbuf;
   1ec32:	61a9      	str	r1, [r5, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1ec34:	2cff      	cmp	r4, #255	; 0xff
   1ec36:	bfa8      	it	ge
   1ec38:	24ff      	movge	r4, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1ec3a:	f8c0 1544 	str.w	r1, [r0, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1ec3e:	f8c0 4548 	str.w	r4, [r0, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1ec42:	61ea      	str	r2, [r5, #28]
        if (rxbuf == NULL) {
   1ec44:	b1c2      	cbz	r2, 1ec78 <hal_spi_txrx_noblock+0x9c>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1ec46:	f8c0 2534 	str.w	r2, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1ec4a:	f8c0 4538 	str.w	r4, [r0, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1ec4e:	2600      	movs	r6, #0
   1ec50:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1ec54:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
        spim->TASKS_START = 1;
   1ec58:	2301      	movs	r3, #1
   1ec5a:	6103      	str	r3, [r0, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1ec5c:	2340      	movs	r3, #64	; 0x40
   1ec5e:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
   1ec62:	e023      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
        rc = hal_spi_txrx(spi_num, txbuf, rxbuf, len);
   1ec64:	4623      	mov	r3, r4
   1ec66:	f7ff ff63 	bl	1eb30 <hal_spi_txrx>
        if (rc == 0) {
   1ec6a:	4606      	mov	r6, r0
   1ec6c:	b9f0      	cbnz	r0, 1ecac <hal_spi_txrx_noblock+0xd0>
            spi->txrx_cb_func(spi->txrx_cb_arg, len);
   1ec6e:	6a2b      	ldr	r3, [r5, #32]
   1ec70:	4621      	mov	r1, r4
   1ec72:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1ec74:	4798      	blx	r3
        return rc;
   1ec76:	e019      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1ec78:	3502      	adds	r5, #2
   1ec7a:	f8c0 5534 	str.w	r5, [r0, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1ec7e:	2301      	movs	r3, #1
   1ec80:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
   1ec84:	e7e3      	b.n	1ec4e <hal_spi_txrx_noblock+0x72>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1ec86:	b161      	cbz	r1, 1eca2 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1ec88:	2cff      	cmp	r4, #255	; 0xff
   1ec8a:	dc1c      	bgt.n	1ecc6 <hal_spi_txrx_noblock+0xea>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1ec8c:	78eb      	ldrb	r3, [r5, #3]
   1ec8e:	b9e3      	cbnz	r3, 1ecca <hal_spi_txrx_noblock+0xee>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1ec90:	61ea      	str	r2, [r5, #28]
        spi->nhs_txbuf = txbuf;
   1ec92:	61a9      	str	r1, [r5, #24]
        spi->nhs_buflen = len;
   1ec94:	80ac      	strh	r4, [r5, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1ec96:	2301      	movs	r3, #1
   1ec98:	70eb      	strb	r3, [r5, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1ec9a:	692a      	ldr	r2, [r5, #16]
   1ec9c:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1ec9e:	2600      	movs	r6, #0
   1eca0:	e004      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1eca2:	2a00      	cmp	r2, #0
   1eca4:	d1f0      	bne.n	1ec88 <hal_spi_txrx_noblock+0xac>
    rc = EINVAL;
   1eca6:	2616      	movs	r6, #22
   1eca8:	e000      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ecaa:	2616      	movs	r6, #22

err:
    return rc;
}
   1ecac:	4630      	mov	r0, r6
   1ecae:	bd70      	pop	{r4, r5, r6, pc}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ecb0:	2616      	movs	r6, #22
   1ecb2:	e7fb      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   1ecb4:	2616      	movs	r6, #22
   1ecb6:	e7f9      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
   1ecb8:	2616      	movs	r6, #22
   1ecba:	e7f7      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
   1ecbc:	2616      	movs	r6, #22
   1ecbe:	e7f5      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1ecc0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ecc4:	e7f2      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
    rc = EINVAL;
   1ecc6:	2616      	movs	r6, #22
   1ecc8:	e7f0      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
            rc = -1;
   1ecca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ecce:	e7ed      	b.n	1ecac <hal_spi_txrx_noblock+0xd0>
   1ecd0:	00028a50 	.word	0x00028a50

0001ecd4 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1ecd4:	2301      	movs	r3, #1
   1ecd6:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1ecd8:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1ecdc:	4770      	bx	lr
	...

0001ece0 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1ece0:	b538      	push	{r3, r4, r5, lr}
   1ece2:	4604      	mov	r4, r0
   1ece4:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1ece6:	7883      	ldrb	r3, [r0, #2]
   1ece8:	b39b      	cbz	r3, 1ed52 <nrf_timer_set_ocmp+0x72>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1ecea:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1ecec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ecf0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1ecf4:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1ecf6:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1ecfa:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   1ecfe:	b118      	cbz	r0, 1ed08 <nrf_timer_set_ocmp+0x28>
            temp += (1UL << 24);
   1ed00:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1ed04:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1ed08:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   1ed0a:	1aeb      	subs	r3, r5, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1ed0c:	2b02      	cmp	r3, #2
   1ed0e:	dc0f      	bgt.n	1ed30 <nrf_timer_set_ocmp+0x50>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1ed10:	7862      	ldrb	r2, [r4, #1]
   1ed12:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1ed16:	2b00      	cmp	r3, #0
   1ed18:	db15      	blt.n	1ed46 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ed1a:	f002 021f 	and.w	r2, r2, #31
   1ed1e:	095b      	lsrs	r3, r3, #5
   1ed20:	2101      	movs	r1, #1
   1ed22:	fa01 f202 	lsl.w	r2, r1, r2
   1ed26:	3340      	adds	r3, #64	; 0x40
   1ed28:	491a      	ldr	r1, [pc, #104]	; (1ed94 <nrf_timer_set_ocmp+0xb4>)
   1ed2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1ed2e:	e00a      	b.n	1ed46 <nrf_timer_set_ocmp+0x66>
        } else  {
            if (delta_t < (1UL << 24)) {
   1ed30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ed34:	d208      	bcs.n	1ed48 <nrf_timer_set_ocmp+0x68>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1ed36:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   1ed3a:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1ed3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1ed42:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1ed46:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1ed48:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   1ed4c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   1ed50:	e7f5      	b.n	1ed3e <nrf_timer_set_ocmp+0x5e>
        hwtimer = bsptimer->tmr_reg;
   1ed52:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1ed54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1ed58:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1ed5c:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1ed60:	2200      	movs	r2, #0
   1ed62:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1ed66:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1ed6a:	f7ff ffb3 	bl	1ecd4 <nrf_read_timer_cntr>
   1ed6e:	1b45      	subs	r5, r0, r5
   1ed70:	2d00      	cmp	r5, #0
   1ed72:	dbe8      	blt.n	1ed46 <nrf_timer_set_ocmp+0x66>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1ed74:	7862      	ldrb	r2, [r4, #1]
   1ed76:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1ed7a:	2b00      	cmp	r3, #0
   1ed7c:	dbe3      	blt.n	1ed46 <nrf_timer_set_ocmp+0x66>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ed7e:	f002 021f 	and.w	r2, r2, #31
   1ed82:	095b      	lsrs	r3, r3, #5
   1ed84:	2101      	movs	r1, #1
   1ed86:	fa01 f202 	lsl.w	r2, r1, r2
   1ed8a:	3340      	adds	r3, #64	; 0x40
   1ed8c:	4901      	ldr	r1, [pc, #4]	; (1ed94 <nrf_timer_set_ocmp+0xb4>)
   1ed8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1ed92:	e7d8      	b.n	1ed46 <nrf_timer_set_ocmp+0x66>
   1ed94:	e000e100 	.word	0xe000e100

0001ed98 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1ed98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1ed9c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1eda0:	4770      	bx	lr

0001eda2 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1eda2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1eda6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1edaa:	4770      	bx	lr

0001edac <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1edac:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1edae:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1edb0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1edb4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1edb6:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1edb8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1edbc:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1edc0:	b1b5      	cbz	r5, 1edf0 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   1edc2:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1edc6:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1edc8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1edcc:	2500      	movs	r5, #0
   1edce:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1edd2:	7845      	ldrb	r5, [r0, #1]
   1edd4:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   1edd8:	2a00      	cmp	r2, #0
   1edda:	db09      	blt.n	1edf0 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eddc:	f005 051f 	and.w	r5, r5, #31
   1ede0:	0952      	lsrs	r2, r2, #5
   1ede2:	2001      	movs	r0, #1
   1ede4:	fa00 f505 	lsl.w	r5, r0, r5
   1ede8:	3240      	adds	r2, #64	; 0x40
   1edea:	4804      	ldr	r0, [pc, #16]	; (1edfc <hal_timer_read_bsptimer+0x50>)
   1edec:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   1edf0:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1edf4:	b904      	cbnz	r4, 1edf8 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   1edf6:	b662      	cpsie	i

    return tcntr;
}
   1edf8:	bc30      	pop	{r4, r5}
   1edfa:	4770      	bx	lr
   1edfc:	e000e100 	.word	0xe000e100

0001ee00 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1ee00:	b570      	push	{r4, r5, r6, lr}
   1ee02:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ee04:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ee08:	b672      	cpsid	i
}
   1ee0a:	e013      	b.n	1ee34 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1ee0c:	6928      	ldr	r0, [r5, #16]
   1ee0e:	f7ff ff61 	bl	1ecd4 <nrf_read_timer_cntr>
            delta = 0;
   1ee12:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1ee14:	68e3      	ldr	r3, [r4, #12]
   1ee16:	1ac3      	subs	r3, r0, r3
   1ee18:	4293      	cmp	r3, r2
   1ee1a:	db19      	blt.n	1ee50 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1ee1c:	6923      	ldr	r3, [r4, #16]
   1ee1e:	b1a3      	cbz	r3, 1ee4a <hal_timer_chk_queue+0x4a>
   1ee20:	6962      	ldr	r2, [r4, #20]
   1ee22:	615a      	str	r2, [r3, #20]
   1ee24:	6963      	ldr	r3, [r4, #20]
   1ee26:	6922      	ldr	r2, [r4, #16]
   1ee28:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1ee2a:	2300      	movs	r3, #0
   1ee2c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1ee2e:	6863      	ldr	r3, [r4, #4]
   1ee30:	68a0      	ldr	r0, [r4, #8]
   1ee32:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1ee34:	696c      	ldr	r4, [r5, #20]
   1ee36:	b15c      	cbz	r4, 1ee50 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1ee38:	78ab      	ldrb	r3, [r5, #2]
   1ee3a:	2b00      	cmp	r3, #0
   1ee3c:	d0e6      	beq.n	1ee0c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1ee3e:	4628      	mov	r0, r5
   1ee40:	f7ff ffb4 	bl	1edac <hal_timer_read_bsptimer>
            delta = -3;
   1ee44:	f06f 0202 	mvn.w	r2, #2
   1ee48:	e7e4      	b.n	1ee14 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1ee4a:	6963      	ldr	r3, [r4, #20]
   1ee4c:	61ab      	str	r3, [r5, #24]
   1ee4e:	e7e9      	b.n	1ee24 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1ee50:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1ee52:	b133      	cbz	r3, 1ee62 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1ee54:	68d9      	ldr	r1, [r3, #12]
   1ee56:	4628      	mov	r0, r5
   1ee58:	f7ff ff42 	bl	1ece0 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1ee5c:	b906      	cbnz	r6, 1ee60 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1ee5e:	b662      	cpsie	i
}
   1ee60:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1ee62:	78ab      	ldrb	r3, [r5, #2]
   1ee64:	b11b      	cbz	r3, 1ee6e <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1ee66:	6928      	ldr	r0, [r5, #16]
   1ee68:	f7ff ff9b 	bl	1eda2 <nrf_rtc_disable_ocmp>
   1ee6c:	e7f6      	b.n	1ee5c <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1ee6e:	6928      	ldr	r0, [r5, #16]
   1ee70:	f7ff ff92 	bl	1ed98 <nrf_timer_disable_ocmp>
   1ee74:	e7f2      	b.n	1ee5c <hal_timer_chk_queue+0x5c>

0001ee76 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1ee76:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1ee78:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1ee7a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1ee7e:	b113      	cbz	r3, 1ee86 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1ee80:	2300      	movs	r3, #0
   1ee82:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1ee86:	6883      	ldr	r3, [r0, #8]
   1ee88:	3301      	adds	r3, #1
   1ee8a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1ee8c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1ee90:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1ee94:	d100      	bne.n	1ee98 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1ee96:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1ee98:	f7ff ffb2 	bl	1ee00 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1ee9c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1eea0:	e7f9      	b.n	1ee96 <hal_timer_irq_handler+0x20>
	...

0001eea4 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1eea4:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1eea6:	4802      	ldr	r0, [pc, #8]	; (1eeb0 <nrf52_timer0_irq_handler+0xc>)
   1eea8:	f7ff ffe5 	bl	1ee76 <hal_timer_irq_handler>
}
   1eeac:	bd08      	pop	{r3, pc}
   1eeae:	bf00      	nop
   1eeb0:	200054a0 	.word	0x200054a0

0001eeb4 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1eeb4:	2805      	cmp	r0, #5
   1eeb6:	dc1c      	bgt.n	1eef2 <hal_timer_init+0x3e>
   1eeb8:	4b12      	ldr	r3, [pc, #72]	; (1ef04 <hal_timer_init+0x50>)
   1eeba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1eebe:	b1d3      	cbz	r3, 1eef6 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1eec0:	781a      	ldrb	r2, [r3, #0]
   1eec2:	b9d2      	cbnz	r2, 1eefa <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1eec4:	b9d8      	cbnz	r0, 1eefe <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1eec6:	4a10      	ldr	r2, [pc, #64]	; (1ef08 <hal_timer_init+0x54>)
   1eec8:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1eeca:	2208      	movs	r2, #8
   1eecc:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eece:	4b0f      	ldr	r3, [pc, #60]	; (1ef0c <hal_timer_init+0x58>)
   1eed0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1eed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1eed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1eedc:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1eee0:	22e0      	movs	r2, #224	; 0xe0
   1eee2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1eee6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1eeea:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1eeec:	4a08      	ldr	r2, [pc, #32]	; (1ef10 <hal_timer_init+0x5c>)
   1eeee:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1eef0:	4770      	bx	lr

err:
    return rc;
   1eef2:	2016      	movs	r0, #22
   1eef4:	4770      	bx	lr
   1eef6:	2016      	movs	r0, #22
   1eef8:	4770      	bx	lr
   1eefa:	2016      	movs	r0, #22
   1eefc:	4770      	bx	lr
   1eefe:	2016      	movs	r0, #22
}
   1ef00:	4770      	bx	lr
   1ef02:	bf00      	nop
   1ef04:	00028a60 	.word	0x00028a60
   1ef08:	40008000 	.word	0x40008000
   1ef0c:	e000e100 	.word	0xe000e100
   1ef10:	0001eea5 	.word	0x0001eea5

0001ef14 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1ef14:	2805      	cmp	r0, #5
   1ef16:	dc65      	bgt.n	1efe4 <hal_timer_config+0xd0>
{
   1ef18:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1ef1a:	4b3a      	ldr	r3, [pc, #232]	; (1f004 <hal_timer_config+0xf0>)
   1ef1c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ef20:	2c00      	cmp	r4, #0
   1ef22:	d061      	beq.n	1efe8 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1ef24:	4838      	ldr	r0, [pc, #224]	; (1f008 <hal_timer_config+0xf4>)
   1ef26:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1ef2a:	7823      	ldrb	r3, [r4, #0]
   1ef2c:	2b00      	cmp	r3, #0
   1ef2e:	d15d      	bne.n	1efec <hal_timer_config+0xd8>
   1ef30:	4a35      	ldr	r2, [pc, #212]	; (1f008 <hal_timer_config+0xf4>)
   1ef32:	4291      	cmp	r1, r2
   1ef34:	d85d      	bhi.n	1eff2 <hal_timer_config+0xde>
   1ef36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1ef3a:	d85c      	bhi.n	1eff6 <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
   1ef3c:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1ef3e:	2a00      	cmp	r2, #0
   1ef40:	d05b      	beq.n	1effa <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1ef42:	2801      	cmp	r0, #1
   1ef44:	d013      	beq.n	1ef6e <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1ef46:	2301      	movs	r3, #1
   1ef48:	2b09      	cmp	r3, #9
   1ef4a:	d810      	bhi.n	1ef6e <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
   1ef4c:	2201      	movs	r2, #1
   1ef4e:	409a      	lsls	r2, r3
   1ef50:	4282      	cmp	r2, r0
   1ef52:	d202      	bcs.n	1ef5a <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1ef54:	3301      	adds	r3, #1
   1ef56:	b2db      	uxtb	r3, r3
   1ef58:	e7f6      	b.n	1ef48 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
   1ef5a:	1e59      	subs	r1, r3, #1
   1ef5c:	2501      	movs	r5, #1
   1ef5e:	fa05 f101 	lsl.w	r1, r5, r1
   1ef62:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
   1ef64:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
   1ef66:	4291      	cmp	r1, r2
   1ef68:	d201      	bcs.n	1ef6e <hal_timer_config+0x5a>
                    prescaler -= 1;
   1ef6a:	3b01      	subs	r3, #1
   1ef6c:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1ef6e:	4a26      	ldr	r2, [pc, #152]	; (1f008 <hal_timer_config+0xf4>)
   1ef70:	411a      	asrs	r2, r3
   1ef72:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   1ef74:	2201      	movs	r2, #1
   1ef76:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ef78:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ef7c:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1ef7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ef82:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1ef86:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1ef8a:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1ef8e:	d00c      	beq.n	1efaa <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1ef90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ef94:	2100      	movs	r1, #0
   1ef96:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1ef9a:	2101      	movs	r1, #1
   1ef9c:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1ef9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1efa2:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1efa6:	2a00      	cmp	r2, #0
   1efa8:	d0f9      	beq.n	1ef9e <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1efaa:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1efac:	2101      	movs	r1, #1
   1efae:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1efb0:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1efb2:	2500      	movs	r5, #0
   1efb4:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1efb8:	2503      	movs	r5, #3
   1efba:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1efbe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1efc2:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1efc4:	7862      	ldrb	r2, [r4, #1]
   1efc6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   1efca:	2b00      	cmp	r3, #0
   1efcc:	db07      	blt.n	1efde <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1efce:	f002 021f 	and.w	r2, r2, #31
   1efd2:	095b      	lsrs	r3, r3, #5
   1efd4:	fa01 f202 	lsl.w	r2, r1, r2
   1efd8:	490c      	ldr	r1, [pc, #48]	; (1f00c <hal_timer_config+0xf8>)
   1efda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1efde:	b970      	cbnz	r0, 1effe <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
   1efe0:	b662      	cpsie	i
}
   1efe2:	e004      	b.n	1efee <hal_timer_config+0xda>

    return 0;

err:
    return rc;
   1efe4:	2016      	movs	r0, #22
}
   1efe6:	4770      	bx	lr
    return rc;
   1efe8:	2016      	movs	r0, #22
   1efea:	e000      	b.n	1efee <hal_timer_config+0xda>
   1efec:	2016      	movs	r0, #22
}
   1efee:	bc30      	pop	{r4, r5}
   1eff0:	4770      	bx	lr
    return rc;
   1eff2:	2016      	movs	r0, #22
   1eff4:	e7fb      	b.n	1efee <hal_timer_config+0xda>
   1eff6:	2016      	movs	r0, #22
   1eff8:	e7f9      	b.n	1efee <hal_timer_config+0xda>
   1effa:	2016      	movs	r0, #22
   1effc:	e7f7      	b.n	1efee <hal_timer_config+0xda>
    return 0;
   1effe:	2000      	movs	r0, #0
   1f000:	e7f5      	b.n	1efee <hal_timer_config+0xda>
   1f002:	bf00      	nop
   1f004:	00028a60 	.word	0x00028a60
   1f008:	00f42400 	.word	0x00f42400
   1f00c:	e000e100 	.word	0xe000e100

0001f010 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1f010:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1f012:	2805      	cmp	r0, #5
   1f014:	dc0c      	bgt.n	1f030 <hal_timer_read+0x20>
   1f016:	4b09      	ldr	r3, [pc, #36]	; (1f03c <hal_timer_read+0x2c>)
   1f018:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f01c:	b140      	cbz	r0, 1f030 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1f01e:	7883      	ldrb	r3, [r0, #2]
   1f020:	b113      	cbz	r3, 1f028 <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1f022:	f7ff fec3 	bl	1edac <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1f026:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1f028:	6900      	ldr	r0, [r0, #16]
   1f02a:	f7ff fe53 	bl	1ecd4 <nrf_read_timer_cntr>
    return tcntr;
   1f02e:	e7fa      	b.n	1f026 <hal_timer_read+0x16>
    assert(0);
   1f030:	2300      	movs	r3, #0
   1f032:	461a      	mov	r2, r3
   1f034:	4619      	mov	r1, r3
   1f036:	4618      	mov	r0, r3
   1f038:	f7ea f8c4 	bl	91c4 <__assert_func>
   1f03c:	00028a60 	.word	0x00028a60

0001f040 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1f040:	2805      	cmp	r0, #5
   1f042:	dc0c      	bgt.n	1f05e <hal_timer_set_cb+0x1e>
{
   1f044:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1f046:	4c08      	ldr	r4, [pc, #32]	; (1f068 <hal_timer_set_cb+0x28>)
   1f048:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   1f04c:	b14c      	cbz	r4, 1f062 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   1f04e:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   1f050:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   1f052:	2000      	movs	r0, #0
   1f054:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   1f056:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   1f058:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f05c:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1f05e:	2016      	movs	r0, #22
}
   1f060:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1f062:	2016      	movs	r0, #22
    return rc;
   1f064:	e7f8      	b.n	1f058 <hal_timer_set_cb+0x18>
   1f066:	bf00      	nop
   1f068:	00028a60 	.word	0x00028a60

0001f06c <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1f06c:	2800      	cmp	r0, #0
   1f06e:	d03b      	beq.n	1f0e8 <hal_timer_start_at+0x7c>
{
   1f070:	b538      	push	{r3, r4, r5, lr}
   1f072:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1f074:	6943      	ldr	r3, [r0, #20]
   1f076:	2b00      	cmp	r3, #0
   1f078:	d138      	bne.n	1f0ec <hal_timer_start_at+0x80>
        (timer->cb_func == NULL)) {
   1f07a:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1f07c:	2b00      	cmp	r3, #0
   1f07e:	d037      	beq.n	1f0f0 <hal_timer_start_at+0x84>
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1f080:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   1f082:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1f084:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f088:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1f08a:	6943      	ldr	r3, [r0, #20]
   1f08c:	b13b      	cbz	r3, 1f09e <hal_timer_start_at+0x32>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
    } else {
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1f08e:	b1bb      	cbz	r3, 1f0c0 <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1f090:	68e2      	ldr	r2, [r4, #12]
   1f092:	68d9      	ldr	r1, [r3, #12]
   1f094:	1a52      	subs	r2, r2, r1
   1f096:	2a00      	cmp	r2, #0
   1f098:	db0a      	blt.n	1f0b0 <hal_timer_start_at+0x44>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1f09a:	691b      	ldr	r3, [r3, #16]
   1f09c:	e7f7      	b.n	1f08e <hal_timer_start_at+0x22>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1f09e:	4622      	mov	r2, r4
   1f0a0:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0a4:	6182      	str	r2, [r0, #24]
   1f0a6:	4603      	mov	r3, r0
   1f0a8:	f843 4f14 	str.w	r4, [r3, #20]!
   1f0ac:	6163      	str	r3, [r4, #20]
   1f0ae:	e008      	b.n	1f0c2 <hal_timer_start_at+0x56>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1f0b0:	695a      	ldr	r2, [r3, #20]
   1f0b2:	6162      	str	r2, [r4, #20]
   1f0b4:	6123      	str	r3, [r4, #16]
   1f0b6:	695a      	ldr	r2, [r3, #20]
   1f0b8:	6014      	str	r4, [r2, #0]
   1f0ba:	f104 0210 	add.w	r2, r4, #16
   1f0be:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (!entry) {
   1f0c0:	b133      	cbz	r3, 1f0d0 <hal_timer_start_at+0x64>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1f0c2:	6943      	ldr	r3, [r0, #20]
   1f0c4:	42a3      	cmp	r3, r4
   1f0c6:	d00b      	beq.n	1f0e0 <hal_timer_start_at+0x74>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1f0c8:	b9a5      	cbnz	r5, 1f0f4 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   1f0ca:	b662      	cpsie	i

    return 0;
   1f0cc:	2000      	movs	r0, #0
}
   1f0ce:	e00e      	b.n	1f0ee <hal_timer_start_at+0x82>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1f0d0:	6123      	str	r3, [r4, #16]
   1f0d2:	6983      	ldr	r3, [r0, #24]
   1f0d4:	6163      	str	r3, [r4, #20]
   1f0d6:	601c      	str	r4, [r3, #0]
   1f0d8:	f104 0310 	add.w	r3, r4, #16
   1f0dc:	6183      	str	r3, [r0, #24]
   1f0de:	e7f0      	b.n	1f0c2 <hal_timer_start_at+0x56>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1f0e0:	68e1      	ldr	r1, [r4, #12]
   1f0e2:	f7ff fdfd 	bl	1ece0 <nrf_timer_set_ocmp>
   1f0e6:	e7ef      	b.n	1f0c8 <hal_timer_start_at+0x5c>
        return EINVAL;
   1f0e8:	2016      	movs	r0, #22
}
   1f0ea:	4770      	bx	lr
        return EINVAL;
   1f0ec:	2016      	movs	r0, #22
}
   1f0ee:	bd38      	pop	{r3, r4, r5, pc}
        return EINVAL;
   1f0f0:	2016      	movs	r0, #22
   1f0f2:	e7fc      	b.n	1f0ee <hal_timer_start_at+0x82>
    return 0;
   1f0f4:	2000      	movs	r0, #0
   1f0f6:	e7fa      	b.n	1f0ee <hal_timer_start_at+0x82>

0001f0f8 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   1f0f8:	b360      	cbz	r0, 1f154 <hal_timer_stop+0x5c>
{
   1f0fa:	b570      	push	{r4, r5, r6, lr}
   1f0fc:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1f0fe:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1f100:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1f104:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   1f106:	6942      	ldr	r2, [r0, #20]
   1f108:	b18a      	cbz	r2, 1f12e <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1f10a:	6948      	ldr	r0, [r1, #20]
   1f10c:	4298      	cmp	r0, r3
   1f10e:	d012      	beq.n	1f136 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   1f110:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1f112:	6918      	ldr	r0, [r3, #16]
   1f114:	b190      	cbz	r0, 1f13c <hal_timer_stop+0x44>
   1f116:	6142      	str	r2, [r0, #20]
   1f118:	695a      	ldr	r2, [r3, #20]
   1f11a:	6918      	ldr	r0, [r3, #16]
   1f11c:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   1f11e:	2200      	movs	r2, #0
   1f120:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   1f122:	b125      	cbz	r5, 1f12e <hal_timer_stop+0x36>
            if (entry) {
   1f124:	b166      	cbz	r6, 1f140 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   1f126:	68f1      	ldr	r1, [r6, #12]
   1f128:	6830      	ldr	r0, [r6, #0]
   1f12a:	f7ff fdd9 	bl	1ece0 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1f12e:	b99c      	cbnz	r4, 1f158 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1f130:	b662      	cpsie	i

    return 0;
   1f132:	2000      	movs	r0, #0
}
   1f134:	e011      	b.n	1f15a <hal_timer_stop+0x62>
            entry = TAILQ_NEXT(timer, link);
   1f136:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   1f138:	2501      	movs	r5, #1
   1f13a:	e7ea      	b.n	1f112 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1f13c:	618a      	str	r2, [r1, #24]
   1f13e:	e7eb      	b.n	1f118 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   1f140:	788b      	ldrb	r3, [r1, #2]
   1f142:	b11b      	cbz	r3, 1f14c <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1f144:	6908      	ldr	r0, [r1, #16]
   1f146:	f7ff fe2c 	bl	1eda2 <nrf_rtc_disable_ocmp>
   1f14a:	e7f0      	b.n	1f12e <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1f14c:	6908      	ldr	r0, [r1, #16]
   1f14e:	f7ff fe23 	bl	1ed98 <nrf_timer_disable_ocmp>
   1f152:	e7ec      	b.n	1f12e <hal_timer_stop+0x36>
        return EINVAL;
   1f154:	2016      	movs	r0, #22
}
   1f156:	4770      	bx	lr
    return 0;
   1f158:	2000      	movs	r0, #0
}
   1f15a:	bd70      	pop	{r4, r5, r6, pc}

0001f15c <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1f15c:	b508      	push	{r3, lr}
    assert(0);
   1f15e:	2300      	movs	r3, #0
   1f160:	461a      	mov	r2, r3
   1f162:	4619      	mov	r1, r3
   1f164:	4618      	mov	r0, r3
   1f166:	f7ea f82d 	bl	91c4 <__assert_func>
	...

0001f16c <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1f16c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1f16e:	4b06      	ldr	r3, [pc, #24]	; (1f188 <nrf52_wdt_irq_handler+0x1c>)
   1f170:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1f174:	f013 0f01 	tst.w	r3, #1
   1f178:	d100      	bne.n	1f17c <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1f17a:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1f17c:	4b02      	ldr	r3, [pc, #8]	; (1f188 <nrf52_wdt_irq_handler+0x1c>)
   1f17e:	2200      	movs	r2, #0
   1f180:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1f184:	f7ff ffea 	bl	1f15c <nrf52_hal_wdt_default_handler>
   1f188:	40010000 	.word	0x40010000

0001f18c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1f18c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1f18e:	4b17      	ldr	r3, [pc, #92]	; (1f1ec <hal_watchdog_init+0x60>)
   1f190:	2201      	movs	r2, #1
   1f192:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1f196:	4b16      	ldr	r3, [pc, #88]	; (1f1f0 <hal_watchdog_init+0x64>)
   1f198:	4298      	cmp	r0, r3
   1f19a:	d821      	bhi.n	1f1e0 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1f19c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1f1a0:	015b      	lsls	r3, r3, #5
   1f1a2:	4a14      	ldr	r2, [pc, #80]	; (1f1f4 <hal_watchdog_init+0x68>)
   1f1a4:	fba2 2303 	umull	r2, r3, r2, r3
   1f1a8:	08db      	lsrs	r3, r3, #3
   1f1aa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1f1ae:	4b0f      	ldr	r3, [pc, #60]	; (1f1ec <hal_watchdog_init+0x60>)
   1f1b0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1f1b4:	4a10      	ldr	r2, [pc, #64]	; (1f1f8 <hal_watchdog_init+0x6c>)
   1f1b6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1f1b8:	4910      	ldr	r1, [pc, #64]	; (1f1fc <hal_watchdog_init+0x70>)
   1f1ba:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f1be:	4a10      	ldr	r2, [pc, #64]	; (1f200 <hal_watchdog_init+0x74>)
   1f1c0:	21e0      	movs	r1, #224	; 0xe0
   1f1c2:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f1c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1f1ca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f1ce:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1f1d0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1f1d4:	f042 0201 	orr.w	r2, r2, #1
   1f1d8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1f1dc:	2000      	movs	r0, #0
   1f1de:	bd08      	pop	{r3, pc}
        assert(0);
   1f1e0:	2300      	movs	r3, #0
   1f1e2:	461a      	mov	r2, r3
   1f1e4:	4619      	mov	r1, r3
   1f1e6:	4618      	mov	r0, r3
   1f1e8:	f7e9 ffec 	bl	91c4 <__assert_func>
   1f1ec:	40010000 	.word	0x40010000
   1f1f0:	02aaaaaa 	.word	0x02aaaaaa
   1f1f4:	10624dd3 	.word	0x10624dd3
   1f1f8:	e000ed00 	.word	0xe000ed00
   1f1fc:	0001f16d 	.word	0x0001f16d
   1f200:	e000e100 	.word	0xe000e100

0001f204 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1f204:	4b02      	ldr	r3, [pc, #8]	; (1f210 <hal_watchdog_enable+0xc>)
   1f206:	2201      	movs	r2, #1
   1f208:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1f20c:	601a      	str	r2, [r3, #0]
}
   1f20e:	4770      	bx	lr
   1f210:	40010000 	.word	0x40010000

0001f214 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1f214:	4b02      	ldr	r3, [pc, #8]	; (1f220 <hal_watchdog_tickle+0xc>)
   1f216:	4a03      	ldr	r2, [pc, #12]	; (1f224 <hal_watchdog_tickle+0x10>)
   1f218:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1f21c:	4770      	bx	lr
   1f21e:	bf00      	nop
   1f220:	40010000 	.word	0x40010000
   1f224:	6e524635 	.word	0x6e524635

0001f228 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   1f228:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1f22a:	2100      	movs	r1, #0
   1f22c:	4608      	mov	r0, r1
   1f22e:	f7ff fe41 	bl	1eeb4 <hal_timer_init>
    assert(rc == 0);
   1f232:	b920      	cbnz	r0, 1f23e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1f234:	4808      	ldr	r0, [pc, #32]	; (1f258 <nrf52_periph_create_timers+0x30>)
   1f236:	f7ea fa09 	bl	964c <os_cputime_init>
    assert(rc == 0);
   1f23a:	b930      	cbnz	r0, 1f24a <nrf52_periph_create_timers+0x22>
#endif
}
   1f23c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1f23e:	2300      	movs	r3, #0
   1f240:	461a      	mov	r2, r3
   1f242:	4619      	mov	r1, r3
   1f244:	4618      	mov	r0, r3
   1f246:	f7e9 ffbd 	bl	91c4 <__assert_func>
    assert(rc == 0);
   1f24a:	2300      	movs	r3, #0
   1f24c:	461a      	mov	r2, r3
   1f24e:	4619      	mov	r1, r3
   1f250:	4618      	mov	r0, r3
   1f252:	f7e9 ffb7 	bl	91c4 <__assert_func>
   1f256:	bf00      	nop
   1f258:	000f4240 	.word	0x000f4240

0001f25c <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
   1f25c:	b500      	push	{lr}
   1f25e:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   1f260:	4b09      	ldr	r3, [pc, #36]	; (1f288 <nrf52_periph_create_uart+0x2c>)
   1f262:	9301      	str	r3, [sp, #4]
   1f264:	4b09      	ldr	r3, [pc, #36]	; (1f28c <nrf52_periph_create_uart+0x30>)
   1f266:	9300      	str	r3, [sp, #0]
   1f268:	2300      	movs	r3, #0
   1f26a:	2201      	movs	r2, #1
   1f26c:	4908      	ldr	r1, [pc, #32]	; (1f290 <nrf52_periph_create_uart+0x34>)
   1f26e:	4809      	ldr	r0, [pc, #36]	; (1f294 <nrf52_periph_create_uart+0x38>)
   1f270:	f7ea fa50 	bl	9714 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   1f274:	b910      	cbnz	r0, 1f27c <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
   1f276:	b003      	add	sp, #12
   1f278:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1f27c:	2300      	movs	r3, #0
   1f27e:	461a      	mov	r2, r3
   1f280:	4619      	mov	r1, r3
   1f282:	4618      	mov	r0, r3
   1f284:	f7e9 ff9e 	bl	91c4 <__assert_func>
   1f288:	00028a7c 	.word	0x00028a7c
   1f28c:	00023e1d 	.word	0x00023e1d
   1f290:	00027194 	.word	0x00027194
   1f294:	200054bc 	.word	0x200054bc

0001f298 <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
   1f298:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1f29a:	2200      	movs	r2, #0
   1f29c:	4905      	ldr	r1, [pc, #20]	; (1f2b4 <nrf52_periph_create_spi+0x1c>)
   1f29e:	4610      	mov	r0, r2
   1f2a0:	f7ff fc00 	bl	1eaa4 <hal_spi_init>
    assert(rc == 0);
   1f2a4:	b900      	cbnz	r0, 1f2a8 <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   1f2a6:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1f2a8:	2300      	movs	r3, #0
   1f2aa:	461a      	mov	r2, r3
   1f2ac:	4619      	mov	r1, r3
   1f2ae:	4618      	mov	r0, r3
   1f2b0:	f7e9 ff88 	bl	91c4 <__assert_func>
   1f2b4:	00028a78 	.word	0x00028a78

0001f2b8 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1f2b8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1f2ba:	f7ff ffb5 	bl	1f228 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
   1f2be:	f7ff ffcd 	bl	1f25c <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
   1f2c2:	f7ff ffe9 	bl	1f298 <nrf52_periph_create_spi>
}
   1f2c6:	bd08      	pop	{r3, pc}

0001f2c8 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
   1f2c8:	b510      	push	{r4, lr}
   1f2ca:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
   1f2cc:	7a03      	ldrb	r3, [r0, #8]
   1f2ce:	f013 0f01 	tst.w	r3, #1
   1f2d2:	d008      	beq.n	1f2e6 <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1f2d4:	6803      	ldr	r3, [r0, #0]
   1f2d6:	2201      	movs	r2, #1
   1f2d8:	4908      	ldr	r1, [pc, #32]	; (1f2fc <json_encode_object_start+0x34>)
   1f2da:	6840      	ldr	r0, [r0, #4]
   1f2dc:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1f2de:	7a23      	ldrb	r3, [r4, #8]
   1f2e0:	f36f 0300 	bfc	r3, #0, #1
   1f2e4:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
   1f2e6:	6823      	ldr	r3, [r4, #0]
   1f2e8:	2201      	movs	r2, #1
   1f2ea:	4905      	ldr	r1, [pc, #20]	; (1f300 <json_encode_object_start+0x38>)
   1f2ec:	6860      	ldr	r0, [r4, #4]
   1f2ee:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1f2f0:	7a23      	ldrb	r3, [r4, #8]
   1f2f2:	f36f 0300 	bfc	r3, #0, #1
   1f2f6:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1f2f8:	2000      	movs	r0, #0
   1f2fa:	bd10      	pop	{r4, pc}
   1f2fc:	00028a80 	.word	0x00028a80
   1f300:	00028a84 	.word	0x00028a84

0001f304 <json_encode_object_key>:
}
EXPORT_SYMBOL(json_encode_value);

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
   1f304:	b570      	push	{r4, r5, r6, lr}
   1f306:	4604      	mov	r4, r0
   1f308:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
   1f30a:	7a03      	ldrb	r3, [r0, #8]
   1f30c:	f013 0f01 	tst.w	r3, #1
   1f310:	d008      	beq.n	1f324 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1f312:	6803      	ldr	r3, [r0, #0]
   1f314:	2201      	movs	r2, #1
   1f316:	490d      	ldr	r1, [pc, #52]	; (1f34c <json_encode_object_key+0x48>)
   1f318:	6840      	ldr	r0, [r0, #4]
   1f31a:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1f31c:	7a23      	ldrb	r3, [r4, #8]
   1f31e:	f36f 0300 	bfc	r3, #0, #1
   1f322:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1f324:	6823      	ldr	r3, [r4, #0]
   1f326:	2201      	movs	r2, #1
   1f328:	4909      	ldr	r1, [pc, #36]	; (1f350 <json_encode_object_key+0x4c>)
   1f32a:	6860      	ldr	r0, [r4, #4]
   1f32c:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1f32e:	6826      	ldr	r6, [r4, #0]
   1f330:	4628      	mov	r0, r5
   1f332:	f7f1 f9d9 	bl	106e8 <strlen>
   1f336:	4602      	mov	r2, r0
   1f338:	4629      	mov	r1, r5
   1f33a:	6860      	ldr	r0, [r4, #4]
   1f33c:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1f33e:	6823      	ldr	r3, [r4, #0]
   1f340:	2203      	movs	r2, #3
   1f342:	4904      	ldr	r1, [pc, #16]	; (1f354 <json_encode_object_key+0x50>)
   1f344:	6860      	ldr	r0, [r4, #4]
   1f346:	4798      	blx	r3

    return (0);
}
   1f348:	2000      	movs	r0, #0
   1f34a:	bd70      	pop	{r4, r5, r6, pc}
   1f34c:	00028a80 	.word	0x00028a80
   1f350:	00026240 	.word	0x00026240
   1f354:	00028a88 	.word	0x00028a88

0001f358 <json_encode_object_entry>:
EXPORT_SYMBOL(json_encode_object_key);

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
   1f358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f35a:	4604      	mov	r4, r0
   1f35c:	460d      	mov	r5, r1
   1f35e:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
   1f360:	7a03      	ldrb	r3, [r0, #8]
   1f362:	f013 0f01 	tst.w	r3, #1
   1f366:	d008      	beq.n	1f37a <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1f368:	6803      	ldr	r3, [r0, #0]
   1f36a:	2201      	movs	r2, #1
   1f36c:	4911      	ldr	r1, [pc, #68]	; (1f3b4 <json_encode_object_entry+0x5c>)
   1f36e:	6840      	ldr	r0, [r0, #4]
   1f370:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1f372:	7a23      	ldrb	r3, [r4, #8]
   1f374:	f36f 0300 	bfc	r3, #0, #1
   1f378:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1f37a:	6823      	ldr	r3, [r4, #0]
   1f37c:	2201      	movs	r2, #1
   1f37e:	490e      	ldr	r1, [pc, #56]	; (1f3b8 <json_encode_object_entry+0x60>)
   1f380:	6860      	ldr	r0, [r4, #4]
   1f382:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
   1f384:	6827      	ldr	r7, [r4, #0]
   1f386:	4628      	mov	r0, r5
   1f388:	f7f1 f9ae 	bl	106e8 <strlen>
   1f38c:	4602      	mov	r2, r0
   1f38e:	4629      	mov	r1, r5
   1f390:	6860      	ldr	r0, [r4, #4]
   1f392:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
   1f394:	6823      	ldr	r3, [r4, #0]
   1f396:	2203      	movs	r2, #3
   1f398:	4908      	ldr	r1, [pc, #32]	; (1f3bc <json_encode_object_entry+0x64>)
   1f39a:	6860      	ldr	r0, [r4, #4]
   1f39c:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
   1f39e:	4631      	mov	r1, r6
   1f3a0:	4620      	mov	r0, r4
   1f3a2:	f000 f80d 	bl	1f3c0 <json_encode_value>
    if (rc != 0) {
   1f3a6:	b918      	cbnz	r0, 1f3b0 <json_encode_object_entry+0x58>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1f3a8:	7a23      	ldrb	r3, [r4, #8]
   1f3aa:	f043 0301 	orr.w	r3, r3, #1
   1f3ae:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1f3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f3b2:	bf00      	nop
   1f3b4:	00028a80 	.word	0x00028a80
   1f3b8:	00026240 	.word	0x00026240
   1f3bc:	00028a88 	.word	0x00028a88

0001f3c0 <json_encode_value>:
{
   1f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f3c2:	4605      	mov	r5, r0
   1f3c4:	460c      	mov	r4, r1
    switch (jv->jv_type) {
   1f3c6:	784b      	ldrb	r3, [r1, #1]
   1f3c8:	2b06      	cmp	r3, #6
   1f3ca:	f200 8141 	bhi.w	1f650 <json_encode_value+0x290>
   1f3ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f3d2:	0007      	.short	0x0007
   1f3d4:	002b001c 	.word	0x002b001c
   1f3d8:	00fa005a 	.word	0x00fa005a
   1f3dc:	003a0120 	.word	0x003a0120
            len = sprintf(encoder->je_encode_buf, "%s",
   1f3e0:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
   1f3e4:	688a      	ldr	r2, [r1, #8]
   1f3e6:	68cb      	ldr	r3, [r1, #12]
            len = sprintf(encoder->je_encode_buf, "%s",
   1f3e8:	4313      	orrs	r3, r2
   1f3ea:	d00c      	beq.n	1f406 <json_encode_value+0x46>
   1f3ec:	4a9a      	ldr	r2, [pc, #616]	; (1f658 <json_encode_value+0x298>)
   1f3ee:	499b      	ldr	r1, [pc, #620]	; (1f65c <json_encode_value+0x29c>)
   1f3f0:	4630      	mov	r0, r6
   1f3f2:	f002 fda4 	bl	21f3e <sprintf>
   1f3f6:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1f3f8:	682b      	ldr	r3, [r5, #0]
   1f3fa:	4631      	mov	r1, r6
   1f3fc:	6868      	ldr	r0, [r5, #4]
   1f3fe:	4798      	blx	r3
    return (0);
   1f400:	2300      	movs	r3, #0
}
   1f402:	4618      	mov	r0, r3
   1f404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            len = sprintf(encoder->je_encode_buf, "%s",
   1f406:	4a96      	ldr	r2, [pc, #600]	; (1f660 <json_encode_value+0x2a0>)
   1f408:	e7f1      	b.n	1f3ee <json_encode_value+0x2e>
            len = sprintf(encoder->je_encode_buf, "%" PRIu64,
   1f40a:	f100 0609 	add.w	r6, r0, #9
   1f40e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f412:	4994      	ldr	r1, [pc, #592]	; (1f664 <json_encode_value+0x2a4>)
   1f414:	4630      	mov	r0, r6
   1f416:	f002 fd92 	bl	21f3e <sprintf>
   1f41a:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1f41c:	682b      	ldr	r3, [r5, #0]
   1f41e:	4631      	mov	r1, r6
   1f420:	6868      	ldr	r0, [r5, #4]
   1f422:	4798      	blx	r3
    return (0);
   1f424:	2300      	movs	r3, #0
            break;
   1f426:	e7ec      	b.n	1f402 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "%" PRIi64,
   1f428:	f100 0609 	add.w	r6, r0, #9
   1f42c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f430:	498d      	ldr	r1, [pc, #564]	; (1f668 <json_encode_value+0x2a8>)
   1f432:	4630      	mov	r0, r6
   1f434:	f002 fd83 	bl	21f3e <sprintf>
   1f438:	4602      	mov	r2, r0
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1f43a:	682b      	ldr	r3, [r5, #0]
   1f43c:	4631      	mov	r1, r6
   1f43e:	6868      	ldr	r0, [r5, #4]
   1f440:	4798      	blx	r3
    return (0);
   1f442:	2300      	movs	r3, #0
            break;
   1f444:	e7dd      	b.n	1f402 <json_encode_value+0x42>
        if  (DPL_FLOAT64_ISNAN(jv->jv_val.fl)){
   1f446:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
   1f44a:	4632      	mov	r2, r6
   1f44c:	463b      	mov	r3, r7
   1f44e:	4630      	mov	r0, r6
   1f450:	4639      	mov	r1, r7
   1f452:	f005 fbcb 	bl	24bec <__aeabi_dcmpun>
   1f456:	b970      	cbnz	r0, 1f476 <json_encode_value+0xb6>
            len = sprintf(encoder->je_encode_buf,
   1f458:	4632      	mov	r2, r6
   1f45a:	463b      	mov	r3, r7
   1f45c:	4983      	ldr	r1, [pc, #524]	; (1f66c <json_encode_value+0x2ac>)
   1f45e:	f105 0009 	add.w	r0, r5, #9
   1f462:	f002 fd6c 	bl	21f3e <sprintf>
   1f466:	4602      	mov	r2, r0
        encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
   1f468:	4629      	mov	r1, r5
   1f46a:	f851 3b09 	ldr.w	r3, [r1], #9
   1f46e:	6868      	ldr	r0, [r5, #4]
   1f470:	4798      	blx	r3
    return (0);
   1f472:	2300      	movs	r3, #0
        break;
   1f474:	e7c5      	b.n	1f402 <json_encode_value+0x42>
            len = sprintf(encoder->je_encode_buf, "null");
   1f476:	4b7e      	ldr	r3, [pc, #504]	; (1f670 <json_encode_value+0x2b0>)
   1f478:	6818      	ldr	r0, [r3, #0]
   1f47a:	f8c5 0009 	str.w	r0, [r5, #9]
   1f47e:	791b      	ldrb	r3, [r3, #4]
   1f480:	736b      	strb	r3, [r5, #13]
   1f482:	2204      	movs	r2, #4
   1f484:	e7f0      	b.n	1f468 <json_encode_value+0xa8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1f486:	6803      	ldr	r3, [r0, #0]
   1f488:	2201      	movs	r2, #1
   1f48a:	497a      	ldr	r1, [pc, #488]	; (1f674 <json_encode_value+0x2b4>)
   1f48c:	6840      	ldr	r0, [r0, #4]
   1f48e:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1f490:	2600      	movs	r6, #0
   1f492:	e012      	b.n	1f4ba <json_encode_value+0xfa>
   1f494:	2b5c      	cmp	r3, #92	; 0x5c
   1f496:	d004      	beq.n	1f4a2 <json_encode_value+0xe2>
                        encoder->je_write(encoder->je_arg,
   1f498:	682b      	ldr	r3, [r5, #0]
   1f49a:	2201      	movs	r2, #1
   1f49c:	6868      	ldr	r0, [r5, #4]
   1f49e:	4798      	blx	r3
                        break;
   1f4a0:	e00a      	b.n	1f4b8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\",
   1f4a2:	682b      	ldr	r3, [r5, #0]
   1f4a4:	2201      	movs	r2, #1
   1f4a6:	4974      	ldr	r1, [pc, #464]	; (1f678 <json_encode_value+0x2b8>)
   1f4a8:	6868      	ldr	r0, [r5, #4]
   1f4aa:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
   1f4ac:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
   1f4ae:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
   1f4b0:	2201      	movs	r2, #1
   1f4b2:	4439      	add	r1, r7
   1f4b4:	6868      	ldr	r0, [r5, #4]
   1f4b6:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1f4b8:	3601      	adds	r6, #1
   1f4ba:	8863      	ldrh	r3, [r4, #2]
   1f4bc:	42b3      	cmp	r3, r6
   1f4be:	dd7b      	ble.n	1f5b8 <json_encode_value+0x1f8>
                switch (jv->jv_val.str[i]) {
   1f4c0:	68a3      	ldr	r3, [r4, #8]
   1f4c2:	4637      	mov	r7, r6
   1f4c4:	1999      	adds	r1, r3, r6
   1f4c6:	5d9b      	ldrb	r3, [r3, r6]
   1f4c8:	2b2f      	cmp	r3, #47	; 0x2f
   1f4ca:	d8e3      	bhi.n	1f494 <json_encode_value+0xd4>
   1f4cc:	2b08      	cmp	r3, #8
   1f4ce:	d3e3      	bcc.n	1f498 <json_encode_value+0xd8>
   1f4d0:	3b08      	subs	r3, #8
   1f4d2:	2b27      	cmp	r3, #39	; 0x27
   1f4d4:	d8e0      	bhi.n	1f498 <json_encode_value+0xd8>
   1f4d6:	a201      	add	r2, pc, #4	; (adr r2, 1f4dc <json_encode_value+0x11c>)
   1f4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f4dc:	0001f5ad 	.word	0x0001f5ad
   1f4e0:	0001f57d 	.word	0x0001f57d
   1f4e4:	0001f595 	.word	0x0001f595
   1f4e8:	0001f499 	.word	0x0001f499
   1f4ec:	0001f5a1 	.word	0x0001f5a1
   1f4f0:	0001f589 	.word	0x0001f589
   1f4f4:	0001f499 	.word	0x0001f499
   1f4f8:	0001f499 	.word	0x0001f499
   1f4fc:	0001f499 	.word	0x0001f499
   1f500:	0001f499 	.word	0x0001f499
   1f504:	0001f499 	.word	0x0001f499
   1f508:	0001f499 	.word	0x0001f499
   1f50c:	0001f499 	.word	0x0001f499
   1f510:	0001f499 	.word	0x0001f499
   1f514:	0001f499 	.word	0x0001f499
   1f518:	0001f499 	.word	0x0001f499
   1f51c:	0001f499 	.word	0x0001f499
   1f520:	0001f499 	.word	0x0001f499
   1f524:	0001f499 	.word	0x0001f499
   1f528:	0001f499 	.word	0x0001f499
   1f52c:	0001f499 	.word	0x0001f499
   1f530:	0001f499 	.word	0x0001f499
   1f534:	0001f499 	.word	0x0001f499
   1f538:	0001f499 	.word	0x0001f499
   1f53c:	0001f499 	.word	0x0001f499
   1f540:	0001f499 	.word	0x0001f499
   1f544:	0001f4a3 	.word	0x0001f4a3
   1f548:	0001f499 	.word	0x0001f499
   1f54c:	0001f499 	.word	0x0001f499
   1f550:	0001f499 	.word	0x0001f499
   1f554:	0001f499 	.word	0x0001f499
   1f558:	0001f499 	.word	0x0001f499
   1f55c:	0001f499 	.word	0x0001f499
   1f560:	0001f499 	.word	0x0001f499
   1f564:	0001f499 	.word	0x0001f499
   1f568:	0001f499 	.word	0x0001f499
   1f56c:	0001f499 	.word	0x0001f499
   1f570:	0001f499 	.word	0x0001f499
   1f574:	0001f499 	.word	0x0001f499
   1f578:	0001f4a3 	.word	0x0001f4a3
                        encoder->je_write(encoder->je_arg, "\\t",
   1f57c:	682b      	ldr	r3, [r5, #0]
   1f57e:	2202      	movs	r2, #2
   1f580:	493e      	ldr	r1, [pc, #248]	; (1f67c <json_encode_value+0x2bc>)
   1f582:	6868      	ldr	r0, [r5, #4]
   1f584:	4798      	blx	r3
                        break;
   1f586:	e797      	b.n	1f4b8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\r",
   1f588:	682b      	ldr	r3, [r5, #0]
   1f58a:	2202      	movs	r2, #2
   1f58c:	493c      	ldr	r1, [pc, #240]	; (1f680 <json_encode_value+0x2c0>)
   1f58e:	6868      	ldr	r0, [r5, #4]
   1f590:	4798      	blx	r3
                        break;
   1f592:	e791      	b.n	1f4b8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\n",
   1f594:	682b      	ldr	r3, [r5, #0]
   1f596:	2202      	movs	r2, #2
   1f598:	493a      	ldr	r1, [pc, #232]	; (1f684 <json_encode_value+0x2c4>)
   1f59a:	6868      	ldr	r0, [r5, #4]
   1f59c:	4798      	blx	r3
                        break;
   1f59e:	e78b      	b.n	1f4b8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\f",
   1f5a0:	682b      	ldr	r3, [r5, #0]
   1f5a2:	2202      	movs	r2, #2
   1f5a4:	4938      	ldr	r1, [pc, #224]	; (1f688 <json_encode_value+0x2c8>)
   1f5a6:	6868      	ldr	r0, [r5, #4]
   1f5a8:	4798      	blx	r3
                        break;
   1f5aa:	e785      	b.n	1f4b8 <json_encode_value+0xf8>
                        encoder->je_write(encoder->je_arg, "\\b",
   1f5ac:	682b      	ldr	r3, [r5, #0]
   1f5ae:	2202      	movs	r2, #2
   1f5b0:	4936      	ldr	r1, [pc, #216]	; (1f68c <json_encode_value+0x2cc>)
   1f5b2:	6868      	ldr	r0, [r5, #4]
   1f5b4:	4798      	blx	r3
                        break;
   1f5b6:	e77f      	b.n	1f4b8 <json_encode_value+0xf8>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
   1f5b8:	682b      	ldr	r3, [r5, #0]
   1f5ba:	2201      	movs	r2, #1
   1f5bc:	492d      	ldr	r1, [pc, #180]	; (1f674 <json_encode_value+0x2b4>)
   1f5be:	6868      	ldr	r0, [r5, #4]
   1f5c0:	4798      	blx	r3
    return (0);
   1f5c2:	2300      	movs	r3, #0
            break;
   1f5c4:	e71d      	b.n	1f402 <json_encode_value+0x42>
            JSON_ENCODE_ARRAY_START(encoder);
   1f5c6:	6803      	ldr	r3, [r0, #0]
   1f5c8:	2201      	movs	r2, #1
   1f5ca:	4931      	ldr	r1, [pc, #196]	; (1f690 <json_encode_value+0x2d0>)
   1f5cc:	6840      	ldr	r0, [r0, #4]
   1f5ce:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1f5d0:	2600      	movs	r6, #0
   1f5d2:	e000      	b.n	1f5d6 <json_encode_value+0x216>
   1f5d4:	3601      	adds	r6, #1
   1f5d6:	8863      	ldrh	r3, [r4, #2]
   1f5d8:	42b3      	cmp	r3, r6
   1f5da:	dd13      	ble.n	1f604 <json_encode_value+0x244>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
   1f5dc:	68e3      	ldr	r3, [r4, #12]
   1f5de:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1f5e2:	4628      	mov	r0, r5
   1f5e4:	f7ff feec 	bl	1f3c0 <json_encode_value>
                if (rc != 0) {
   1f5e8:	4603      	mov	r3, r0
   1f5ea:	2800      	cmp	r0, #0
   1f5ec:	f47f af09 	bne.w	1f402 <json_encode_value+0x42>
                if (i != jv->jv_len - 1) {
   1f5f0:	8863      	ldrh	r3, [r4, #2]
   1f5f2:	3b01      	subs	r3, #1
   1f5f4:	42b3      	cmp	r3, r6
   1f5f6:	d0ed      	beq.n	1f5d4 <json_encode_value+0x214>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1f5f8:	682b      	ldr	r3, [r5, #0]
   1f5fa:	2201      	movs	r2, #1
   1f5fc:	4925      	ldr	r1, [pc, #148]	; (1f694 <json_encode_value+0x2d4>)
   1f5fe:	6868      	ldr	r0, [r5, #4]
   1f600:	4798      	blx	r3
   1f602:	e7e7      	b.n	1f5d4 <json_encode_value+0x214>
            JSON_ENCODE_ARRAY_END(encoder);
   1f604:	682b      	ldr	r3, [r5, #0]
   1f606:	2201      	movs	r2, #1
   1f608:	4923      	ldr	r1, [pc, #140]	; (1f698 <json_encode_value+0x2d8>)
   1f60a:	6868      	ldr	r0, [r5, #4]
   1f60c:	4798      	blx	r3
    return (0);
   1f60e:	2300      	movs	r3, #0
            break;
   1f610:	e6f7      	b.n	1f402 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_START(encoder);
   1f612:	6803      	ldr	r3, [r0, #0]
   1f614:	2201      	movs	r2, #1
   1f616:	4921      	ldr	r1, [pc, #132]	; (1f69c <json_encode_value+0x2dc>)
   1f618:	6840      	ldr	r0, [r0, #4]
   1f61a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
   1f61c:	2600      	movs	r6, #0
   1f61e:	e000      	b.n	1f622 <json_encode_value+0x262>
   1f620:	3601      	adds	r6, #1
   1f622:	8863      	ldrh	r3, [r4, #2]
   1f624:	42b3      	cmp	r3, r6
   1f626:	dd0c      	ble.n	1f642 <json_encode_value+0x282>
                        jv->jv_val.composite.keys[i],
   1f628:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
   1f62a:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
   1f62c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   1f630:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1f634:	4628      	mov	r0, r5
   1f636:	f7ff fe8f 	bl	1f358 <json_encode_object_entry>
                if (rc != 0) {
   1f63a:	4603      	mov	r3, r0
   1f63c:	2800      	cmp	r0, #0
   1f63e:	d0ef      	beq.n	1f620 <json_encode_value+0x260>
   1f640:	e6df      	b.n	1f402 <json_encode_value+0x42>
            JSON_ENCODE_OBJECT_END(encoder);
   1f642:	682b      	ldr	r3, [r5, #0]
   1f644:	2201      	movs	r2, #1
   1f646:	4916      	ldr	r1, [pc, #88]	; (1f6a0 <json_encode_value+0x2e0>)
   1f648:	6868      	ldr	r0, [r5, #4]
   1f64a:	4798      	blx	r3
    return (0);
   1f64c:	2300      	movs	r3, #0
            break;
   1f64e:	e6d8      	b.n	1f402 <json_encode_value+0x42>
    switch (jv->jv_type) {
   1f650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f654:	e6d5      	b.n	1f402 <json_encode_value+0x42>
   1f656:	bf00      	nop
   1f658:	00028a94 	.word	0x00028a94
   1f65c:	000267e8 	.word	0x000267e8
   1f660:	00028a8c 	.word	0x00028a8c
   1f664:	00028a9c 	.word	0x00028a9c
   1f668:	00028aa4 	.word	0x00028aa4
   1f66c:	00028ab4 	.word	0x00028ab4
   1f670:	00028aac 	.word	0x00028aac
   1f674:	00026240 	.word	0x00026240
   1f678:	00028ab8 	.word	0x00028ab8
   1f67c:	00028abc 	.word	0x00028abc
   1f680:	00028ac0 	.word	0x00028ac0
   1f684:	00028ac4 	.word	0x00028ac4
   1f688:	00028ac8 	.word	0x00028ac8
   1f68c:	00028acc 	.word	0x00028acc
   1f690:	00028ad0 	.word	0x00028ad0
   1f694:	00028a80 	.word	0x00028a80
   1f698:	00027844 	.word	0x00027844
   1f69c:	00028a84 	.word	0x00028a84
   1f6a0:	00028ad4 	.word	0x00028ad4

0001f6a4 <json_encode_object_finish>:
EXPORT_SYMBOL(json_encode_object_entry);

int
json_encode_object_finish(struct json_encoder *encoder)
{
   1f6a4:	b510      	push	{r4, lr}
   1f6a6:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
   1f6a8:	6803      	ldr	r3, [r0, #0]
   1f6aa:	2201      	movs	r2, #1
   1f6ac:	4904      	ldr	r1, [pc, #16]	; (1f6c0 <json_encode_object_finish+0x1c>)
   1f6ae:	6840      	ldr	r0, [r0, #4]
   1f6b0:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
   1f6b2:	7a23      	ldrb	r3, [r4, #8]
   1f6b4:	f043 0301 	orr.w	r3, r3, #1
   1f6b8:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1f6ba:	2000      	movs	r0, #0
   1f6bc:	bd10      	pop	{r4, pc}
   1f6be:	bf00      	nop
   1f6c0:	00028ad4 	.word	0x00028ad4

0001f6c4 <json_encode_array_name>:
EXPORT_SYMBOL(json_encode_object_finish);

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
   1f6c4:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
   1f6c6:	f7ff fe1d 	bl	1f304 <json_encode_object_key>
}
   1f6ca:	bd08      	pop	{r3, pc}

0001f6cc <json_encode_array_start>:
EXPORT_SYMBOL(json_encode_array_name);

int
json_encode_array_start(struct json_encoder *encoder)
{
   1f6cc:	b510      	push	{r4, lr}
   1f6ce:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
   1f6d0:	6803      	ldr	r3, [r0, #0]
   1f6d2:	2201      	movs	r2, #1
   1f6d4:	4904      	ldr	r1, [pc, #16]	; (1f6e8 <json_encode_array_start+0x1c>)
   1f6d6:	6840      	ldr	r0, [r0, #4]
   1f6d8:	4798      	blx	r3
    encoder->je_wr_commas = 0;
   1f6da:	7a23      	ldrb	r3, [r4, #8]
   1f6dc:	f36f 0300 	bfc	r3, #0, #1
   1f6e0:	7223      	strb	r3, [r4, #8]

    return (0);
}
   1f6e2:	2000      	movs	r0, #0
   1f6e4:	bd10      	pop	{r4, pc}
   1f6e6:	bf00      	nop
   1f6e8:	00028ad0 	.word	0x00028ad0

0001f6ec <json_encode_array_value>:
EXPORT_SYMBOL(json_encode_array_start);

int
json_encode_array_value(struct json_encoder *encoder, struct json_value *jv)
{
   1f6ec:	b538      	push	{r3, r4, r5, lr}
   1f6ee:	4604      	mov	r4, r0
   1f6f0:	460d      	mov	r5, r1
    int rc;

    if (encoder->je_wr_commas) {
   1f6f2:	7a03      	ldrb	r3, [r0, #8]
   1f6f4:	f013 0f01 	tst.w	r3, #1
   1f6f8:	d008      	beq.n	1f70c <json_encode_array_value+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
   1f6fa:	6803      	ldr	r3, [r0, #0]
   1f6fc:	2201      	movs	r2, #1
   1f6fe:	4908      	ldr	r1, [pc, #32]	; (1f720 <json_encode_array_value+0x34>)
   1f700:	6840      	ldr	r0, [r0, #4]
   1f702:	4798      	blx	r3
        encoder->je_wr_commas = 0;
   1f704:	7a23      	ldrb	r3, [r4, #8]
   1f706:	f36f 0300 	bfc	r3, #0, #1
   1f70a:	7223      	strb	r3, [r4, #8]
    }

    rc = json_encode_value(encoder, jv);
   1f70c:	4629      	mov	r1, r5
   1f70e:	4620      	mov	r0, r4
   1f710:	f7ff fe56 	bl	1f3c0 <json_encode_value>
    if (rc != 0) {
   1f714:	b918      	cbnz	r0, 1f71e <json_encode_array_value+0x32>
        goto err;
    }
    encoder->je_wr_commas = 1;
   1f716:	7a23      	ldrb	r3, [r4, #8]
   1f718:	f043 0301 	orr.w	r3, r3, #1
   1f71c:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
   1f71e:	bd38      	pop	{r3, r4, r5, pc}
   1f720:	00028a80 	.word	0x00028a80

0001f724 <json_encode_array_finish>:
EXPORT_SYMBOL(json_encode_array_value);

int
json_encode_array_finish(struct json_encoder *encoder)
{
   1f724:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
   1f726:	7a03      	ldrb	r3, [r0, #8]
   1f728:	f043 0301 	orr.w	r3, r3, #1
   1f72c:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
   1f72e:	6803      	ldr	r3, [r0, #0]
   1f730:	2201      	movs	r2, #1
   1f732:	4902      	ldr	r1, [pc, #8]	; (1f73c <json_encode_array_finish+0x18>)
   1f734:	6840      	ldr	r0, [r0, #4]
   1f736:	4798      	blx	r3

    return (0);
}
   1f738:	2000      	movs	r0, #0
   1f73a:	bd08      	pop	{r3, pc}
   1f73c:	00027844 	.word	0x00027844

0001f740 <json_read_next>:
    return len;
}

char
json_read_next(struct json_buffer * jb)
{
   1f740:	4603      	mov	r3, r0
    json_decoder_t * decoder = (json_decoder_t *) jb;
    char c;

    if ((decoder->start_buf + decoder->current_position) <= decoder->end_buf) {
   1f742:	68c1      	ldr	r1, [r0, #12]
   1f744:	6942      	ldr	r2, [r0, #20]
   1f746:	eb01 0c02 	add.w	ip, r1, r2
   1f74a:	6900      	ldr	r0, [r0, #16]
   1f74c:	4584      	cmp	ip, r0
   1f74e:	d901      	bls.n	1f754 <json_read_next+0x14>
        c = *(decoder->start_buf + decoder->current_position);
        decoder->current_position++;
        return c;
    }
   return '\0';
   1f750:	2000      	movs	r0, #0
}
   1f752:	4770      	bx	lr
        c = *(decoder->start_buf + decoder->current_position);
   1f754:	5c88      	ldrb	r0, [r1, r2]
        decoder->current_position++;
   1f756:	3201      	adds	r2, #1
   1f758:	615a      	str	r2, [r3, #20]
        return c;
   1f75a:	4770      	bx	lr

0001f75c <json_read_prev>:
json_read_prev(struct json_buffer * jb)
{
    json_decoder_t * decoder = (json_decoder_t *) jb;

    char c;
    if (decoder->current_position) {
   1f75c:	6943      	ldr	r3, [r0, #20]
   1f75e:	b90b      	cbnz	r3, 1f764 <json_read_prev+0x8>
       decoder->current_position--;
       c = *(decoder->start_buf + decoder->current_position);
       return c;
    }
    /* can't rewind */
    return '\0';
   1f760:	2000      	movs	r0, #0
}
   1f762:	4770      	bx	lr
       decoder->current_position--;
   1f764:	3b01      	subs	r3, #1
   1f766:	6143      	str	r3, [r0, #20]
       c = *(decoder->start_buf + decoder->current_position);
   1f768:	68c2      	ldr	r2, [r0, #12]
   1f76a:	5cd0      	ldrb	r0, [r2, r3]
       return c;
   1f76c:	4770      	bx	lr

0001f76e <json_readn>:
EXPORT_SYMBOL(json_read_prev);

int
json_readn(struct json_buffer * jb, char *buf, int size)
{
   1f76e:	b538      	push	{r3, r4, r5, lr}
   1f770:	4604      	mov	r4, r0
   1f772:	4608      	mov	r0, r1
    json_decoder_t * decoder = (json_decoder_t *) jb;
    int remlen;

    remlen = (int)(decoder->end_buf - (decoder->start_buf + decoder->current_position));
   1f774:	6925      	ldr	r5, [r4, #16]
   1f776:	68e3      	ldr	r3, [r4, #12]
   1f778:	6961      	ldr	r1, [r4, #20]
   1f77a:	4419      	add	r1, r3
   1f77c:	1a6d      	subs	r5, r5, r1
    if (size > remlen) {
   1f77e:	4295      	cmp	r5, r2
   1f780:	db00      	blt.n	1f784 <json_readn+0x16>
   1f782:	4615      	mov	r5, r2
        size = remlen;
    }

    memcpy(buf, decoder->start_buf + decoder->current_position, size);
   1f784:	462a      	mov	r2, r5
   1f786:	f7f0 ff6b 	bl	10660 <memcpy>
    decoder->current_position += size;
   1f78a:	6963      	ldr	r3, [r4, #20]
   1f78c:	442b      	add	r3, r5
   1f78e:	6163      	str	r3, [r4, #20]
    return size;
}
   1f790:	4628      	mov	r0, r5
   1f792:	bd38      	pop	{r3, r4, r5, pc}

0001f794 <timescale_QUpdate>:
   1f794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f798:	4614      	mov	r4, r2
   1f79a:	461d      	mov	r5, r3
   1f79c:	460f      	mov	r7, r1
   1f79e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1f7a0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f7a4:	4682      	mov	sl, r0
   1f7a6:	4629      	mov	r1, r5
   1f7a8:	4620      	mov	r0, r4
   1f7aa:	f004 ff85 	bl	246b8 <__aeabi_dmul>
   1f7ae:	4622      	mov	r2, r4
   1f7b0:	462b      	mov	r3, r5
   1f7b2:	f004 ff81 	bl	246b8 <__aeabi_dmul>
   1f7b6:	2200      	movs	r2, #0
   1f7b8:	4b4f      	ldr	r3, [pc, #316]	; (1f8f8 <timescale_QUpdate+0x164>)
   1f7ba:	f005 f8a7 	bl	2490c <__aeabi_ddiv>
   1f7be:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f7c2:	f004 fdc3 	bl	2434c <__adddf3>
   1f7c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f7ca:	4680      	mov	r8, r0
   1f7cc:	4689      	mov	r9, r1
   1f7ce:	4620      	mov	r0, r4
   1f7d0:	4629      	mov	r1, r5
   1f7d2:	f004 ff71 	bl	246b8 <__aeabi_dmul>
   1f7d6:	4622      	mov	r2, r4
   1f7d8:	462b      	mov	r3, r5
   1f7da:	f004 ff6d 	bl	246b8 <__aeabi_dmul>
   1f7de:	4622      	mov	r2, r4
   1f7e0:	462b      	mov	r3, r5
   1f7e2:	f004 ff69 	bl	246b8 <__aeabi_dmul>
   1f7e6:	4622      	mov	r2, r4
   1f7e8:	462b      	mov	r3, r5
   1f7ea:	f004 ff65 	bl	246b8 <__aeabi_dmul>
   1f7ee:	2200      	movs	r2, #0
   1f7f0:	4b42      	ldr	r3, [pc, #264]	; (1f8fc <timescale_QUpdate+0x168>)
   1f7f2:	f005 f88b 	bl	2490c <__aeabi_ddiv>
   1f7f6:	4602      	mov	r2, r0
   1f7f8:	460b      	mov	r3, r1
   1f7fa:	4640      	mov	r0, r8
   1f7fc:	4649      	mov	r1, r9
   1f7fe:	f004 fda5 	bl	2434c <__adddf3>
   1f802:	e9c6 0100 	strd	r0, r1, [r6]
   1f806:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f80a:	4620      	mov	r0, r4
   1f80c:	4629      	mov	r1, r5
   1f80e:	f004 ff53 	bl	246b8 <__aeabi_dmul>
   1f812:	4622      	mov	r2, r4
   1f814:	462b      	mov	r3, r5
   1f816:	f004 ff4f 	bl	246b8 <__aeabi_dmul>
   1f81a:	4622      	mov	r2, r4
   1f81c:	462b      	mov	r3, r5
   1f81e:	f004 ff4b 	bl	246b8 <__aeabi_dmul>
   1f822:	2200      	movs	r2, #0
   1f824:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1f828:	f004 ff46 	bl	246b8 <__aeabi_dmul>
   1f82c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f830:	4680      	mov	r8, r0
   1f832:	4689      	mov	r9, r1
   1f834:	4620      	mov	r0, r4
   1f836:	4629      	mov	r1, r5
   1f838:	f004 ff3e 	bl	246b8 <__aeabi_dmul>
   1f83c:	2200      	movs	r2, #0
   1f83e:	4b30      	ldr	r3, [pc, #192]	; (1f900 <timescale_QUpdate+0x16c>)
   1f840:	f004 ff3a 	bl	246b8 <__aeabi_dmul>
   1f844:	4602      	mov	r2, r0
   1f846:	460b      	mov	r3, r1
   1f848:	4640      	mov	r0, r8
   1f84a:	4649      	mov	r1, r9
   1f84c:	f004 fd7e 	bl	2434c <__adddf3>
   1f850:	4680      	mov	r8, r0
   1f852:	4689      	mov	r9, r1
   1f854:	e9c6 8902 	strd	r8, r9, [r6, #8]
   1f858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f85c:	4620      	mov	r0, r4
   1f85e:	4629      	mov	r1, r5
   1f860:	f004 ff2a 	bl	246b8 <__aeabi_dmul>
   1f864:	4622      	mov	r2, r4
   1f866:	462b      	mov	r3, r5
   1f868:	f004 ff26 	bl	246b8 <__aeabi_dmul>
   1f86c:	2200      	movs	r2, #0
   1f86e:	4b25      	ldr	r3, [pc, #148]	; (1f904 <timescale_QUpdate+0x170>)
   1f870:	f005 f84c 	bl	2490c <__aeabi_ddiv>
   1f874:	f8ba 3000 	ldrh.w	r3, [sl]
   1f878:	9301      	str	r3, [sp, #4]
   1f87a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1f87e:	eb06 0a0b 	add.w	sl, r6, fp
   1f882:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1f886:	e9ca 8900 	strd	r8, r9, [sl]
   1f88a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f88e:	4620      	mov	r0, r4
   1f890:	4629      	mov	r1, r5
   1f892:	f004 ff11 	bl	246b8 <__aeabi_dmul>
   1f896:	4622      	mov	r2, r4
   1f898:	462b      	mov	r3, r5
   1f89a:	f004 ff0d 	bl	246b8 <__aeabi_dmul>
   1f89e:	2200      	movs	r2, #0
   1f8a0:	4b15      	ldr	r3, [pc, #84]	; (1f8f8 <timescale_QUpdate+0x164>)
   1f8a2:	f005 f833 	bl	2490c <__aeabi_ddiv>
   1f8a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f8aa:	f004 fd4f 	bl	2434c <__adddf3>
   1f8ae:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1f8b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f8b6:	4620      	mov	r0, r4
   1f8b8:	4629      	mov	r1, r5
   1f8ba:	f004 fefd 	bl	246b8 <__aeabi_dmul>
   1f8be:	2200      	movs	r2, #0
   1f8c0:	4b0f      	ldr	r3, [pc, #60]	; (1f900 <timescale_QUpdate+0x16c>)
   1f8c2:	f004 fef9 	bl	246b8 <__aeabi_dmul>
   1f8c6:	f10b 0810 	add.w	r8, fp, #16
   1f8ca:	44b0      	add	r8, r6
   1f8cc:	e9c8 0100 	strd	r0, r1, [r8]
   1f8d0:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1f8d4:	44da      	add	sl, fp
   1f8d6:	e9ca 2300 	strd	r2, r3, [sl]
   1f8da:	9901      	ldr	r1, [sp, #4]
   1f8dc:	e9d8 2300 	ldrd	r2, r3, [r8]
   1f8e0:	eb06 1601 	add.w	r6, r6, r1, lsl #4
   1f8e4:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1f8e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1f8ec:	e9c6 2304 	strd	r2, r3, [r6, #16]
   1f8f0:	b003      	add	sp, #12
   1f8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8f6:	bf00      	nop
   1f8f8:	40080000 	.word	0x40080000
   1f8fc:	40340000 	.word	0x40340000
   1f900:	3fe00000 	.word	0x3fe00000
   1f904:	40180000 	.word	0x40180000

0001f908 <timescale_JofAx>:
   1f908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f90c:	ec55 4b10 	vmov	r4, r5, d0
   1f910:	4f1c      	ldr	r7, [pc, #112]	; (1f984 <timescale_JofAx+0x7c>)
   1f912:	b092      	sub	sp, #72	; 0x48
   1f914:	2600      	movs	r6, #0
   1f916:	ee10 2a10 	vmov	r2, s0
   1f91a:	462b      	mov	r3, r5
   1f91c:	4680      	mov	r8, r0
   1f91e:	4629      	mov	r1, r5
   1f920:	ee10 0a10 	vmov	r0, s0
   1f924:	ed8d 0b02 	vstr	d0, [sp, #8]
   1f928:	e9cd 6700 	strd	r6, r7, [sp]
   1f92c:	f004 fec4 	bl	246b8 <__aeabi_dmul>
   1f930:	2200      	movs	r2, #0
   1f932:	4b15      	ldr	r3, [pc, #84]	; (1f988 <timescale_JofAx+0x80>)
   1f934:	f004 fec0 	bl	246b8 <__aeabi_dmul>
   1f938:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1f93c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1f940:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f944:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   1f948:	2300      	movs	r3, #0
   1f94a:	2200      	movs	r2, #0
   1f94c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f950:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
   1f954:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1f958:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1f95c:	f101 0518 	add.w	r5, r1, #24
   1f960:	2300      	movs	r3, #0
   1f962:	eb0d 0003 	add.w	r0, sp, r3
   1f966:	185a      	adds	r2, r3, r1
   1f968:	18ec      	adds	r4, r5, r3
   1f96a:	e8f0 6702 	ldrd	r6, r7, [r0], #8
   1f96e:	e8e2 6702 	strd	r6, r7, [r2], #8
   1f972:	42a2      	cmp	r2, r4
   1f974:	d1f9      	bne.n	1f96a <timescale_JofAx+0x62>
   1f976:	3318      	adds	r3, #24
   1f978:	2b48      	cmp	r3, #72	; 0x48
   1f97a:	d1f2      	bne.n	1f962 <timescale_JofAx+0x5a>
   1f97c:	b012      	add	sp, #72	; 0x48
   1f97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f982:	bf00      	nop
   1f984:	3ff00000 	.word	0x3ff00000
   1f988:	3fe00000 	.word	0x3fe00000

0001f98c <timescale_Aofx>:
   1f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f990:	4606      	mov	r6, r0
   1f992:	b089      	sub	sp, #36	; 0x24
   1f994:	2218      	movs	r2, #24
   1f996:	2100      	movs	r1, #0
   1f998:	a802      	add	r0, sp, #8
   1f99a:	f7f0 fe6e 	bl	1067a <memset>
   1f99e:	68b5      	ldr	r5, [r6, #8]
   1f9a0:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
   1f9a2:	f106 0348 	add.w	r3, r6, #72	; 0x48
   1f9a6:	ac02      	add	r4, sp, #8
   1f9a8:	9301      	str	r3, [sp, #4]
   1f9aa:	f105 0918 	add.w	r9, r5, #24
   1f9ae:	e8f4 ab02 	ldrd	sl, fp, [r4], #8
   1f9b2:	462f      	mov	r7, r5
   1f9b4:	46b0      	mov	r8, r6
   1f9b6:	e8f7 2302 	ldrd	r2, r3, [r7], #8
   1f9ba:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   1f9be:	f004 fe7b 	bl	246b8 <__aeabi_dmul>
   1f9c2:	4602      	mov	r2, r0
   1f9c4:	460b      	mov	r3, r1
   1f9c6:	4650      	mov	r0, sl
   1f9c8:	4659      	mov	r1, fp
   1f9ca:	f004 fcbf 	bl	2434c <__adddf3>
   1f9ce:	454f      	cmp	r7, r9
   1f9d0:	4682      	mov	sl, r0
   1f9d2:	468b      	mov	fp, r1
   1f9d4:	d1ef      	bne.n	1f9b6 <timescale_Aofx+0x2a>
   1f9d6:	9b01      	ldr	r3, [sp, #4]
   1f9d8:	3618      	adds	r6, #24
   1f9da:	429e      	cmp	r6, r3
   1f9dc:	e944 ab02 	strd	sl, fp, [r4, #-8]
   1f9e0:	d1e5      	bne.n	1f9ae <timescale_Aofx+0x22>
   1f9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f9e6:	e9c5 2300 	strd	r2, r3, [r5]
   1f9ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1f9ee:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1f9f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f9f6:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1f9fa:	b009      	add	sp, #36	; 0x24
   1f9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fa00 <timescale_innovation>:
   1fa00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1fa04:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
   1fa06:	88aa      	ldrh	r2, [r5, #4]
   1fa08:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1fa0c:	4604      	mov	r4, r0
   1fa0e:	b37a      	cbz	r2, 1fa70 <timescale_innovation+0x70>
   1fa10:	6946      	ldr	r6, [r0, #20]
   1fa12:	4b37      	ldr	r3, [pc, #220]	; (1faf0 <timescale_innovation+0xf0>)
   1fa14:	ed96 0b00 	vldr	d0, [r6]
   1fa18:	2200      	movs	r2, #0
   1fa1a:	ec51 0b10 	vmov	r0, r1, d0
   1fa1e:	ed8d 0b00 	vstr	d0, [sp]
   1fa22:	f005 f8bb 	bl	24b9c <__aeabi_dcmplt>
   1fa26:	f04f 0701 	mov.w	r7, #1
   1fa2a:	ed9d 0b00 	vldr	d0, [sp]
   1fa2e:	b900      	cbnz	r0, 1fa32 <timescale_innovation+0x32>
   1fa30:	4607      	mov	r7, r0
   1fa32:	792b      	ldrb	r3, [r5, #4]
   1fa34:	f367 1345 	bfi	r3, r7, #5, #1
   1fa38:	712b      	strb	r3, [r5, #4]
   1fa3a:	88ab      	ldrh	r3, [r5, #4]
   1fa3c:	069b      	lsls	r3, r3, #26
   1fa3e:	d509      	bpl.n	1fa54 <timescale_innovation+0x54>
   1fa40:	ed9f 1b29 	vldr	d1, [pc, #164]	; 1fae8 <timescale_innovation+0xe8>
   1fa44:	f005 fd42 	bl	254cc <fmod>
   1fa48:	792b      	ldrb	r3, [r5, #4]
   1fa4a:	ed86 0b00 	vstr	d0, [r6]
   1fa4e:	f36f 1386 	bfc	r3, #6, #1
   1fa52:	712b      	strb	r3, [r5, #4]
   1fa54:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1faf4 <timescale_innovation+0xf4>
   1fa58:	f04f 0a00 	mov.w	sl, #0
   1fa5c:	f04f 0800 	mov.w	r8, #0
   1fa60:	8862      	ldrh	r2, [r4, #2]
   1fa62:	fa1f f38a 	uxth.w	r3, sl
   1fa66:	429a      	cmp	r2, r3
   1fa68:	d806      	bhi.n	1fa78 <timescale_innovation+0x78>
   1fa6a:	b002      	add	sp, #8
   1fa6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa70:	792b      	ldrb	r3, [r5, #4]
   1fa72:	f362 1345 	bfi	r3, r2, #5, #1
   1fa76:	e7ec      	b.n	1fa52 <timescale_innovation+0x52>
   1fa78:	6963      	ldr	r3, [r4, #20]
   1fa7a:	fa1f f58a 	uxth.w	r5, sl
   1fa7e:	00ed      	lsls	r5, r5, #3
   1fa80:	1959      	adds	r1, r3, r5
   1fa82:	6923      	ldr	r3, [r4, #16]
   1fa84:	442b      	add	r3, r5
   1fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fa8a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fa8e:	f004 fc5b 	bl	24348 <__aeabi_dsub>
   1fa92:	69a3      	ldr	r3, [r4, #24]
   1fa94:	442b      	add	r3, r5
   1fa96:	e9c3 0100 	strd	r0, r1, [r3]
   1fa9a:	ec41 0b10 	vmov	d0, r0, r1
   1fa9e:	f005 fc89 	bl	253b4 <fabs>
   1faa2:	2200      	movs	r2, #0
   1faa4:	4b12      	ldr	r3, [pc, #72]	; (1faf0 <timescale_innovation+0xf0>)
   1faa6:	ec51 0b10 	vmov	r0, r1, d0
   1faaa:	f005 f895 	bl	24bd8 <__aeabi_dcmpgt>
   1faae:	b190      	cbz	r0, 1fad6 <timescale_innovation+0xd6>
   1fab0:	69a3      	ldr	r3, [r4, #24]
   1fab2:	441d      	add	r5, r3
   1fab4:	e9d5 6700 	ldrd	r6, r7, [r5]
   1fab8:	2200      	movs	r2, #0
   1faba:	2300      	movs	r3, #0
   1fabc:	4630      	mov	r0, r6
   1fabe:	4639      	mov	r1, r7
   1fac0:	f005 f86c 	bl	24b9c <__aeabi_dcmplt>
   1fac4:	4642      	mov	r2, r8
   1fac6:	464b      	mov	r3, r9
   1fac8:	b140      	cbz	r0, 1fadc <timescale_innovation+0xdc>
   1faca:	4630      	mov	r0, r6
   1facc:	4639      	mov	r1, r7
   1face:	f004 fc3d 	bl	2434c <__adddf3>
   1fad2:	e9c5 0100 	strd	r0, r1, [r5]
   1fad6:	f10a 0a01 	add.w	sl, sl, #1
   1fada:	e7c1      	b.n	1fa60 <timescale_innovation+0x60>
   1fadc:	4630      	mov	r0, r6
   1fade:	4639      	mov	r1, r7
   1fae0:	f004 fc32 	bl	24348 <__aeabi_dsub>
   1fae4:	e7f5      	b.n	1fad2 <timescale_innovation+0xd2>
   1fae6:	bf00      	nop
   1fae8:	00000000 	.word	0x00000000
   1faec:	42700000 	.word	0x42700000
   1faf0:	42600000 	.word	0x42600000
   1faf4:	42700000 	.word	0x42700000

0001faf8 <timescale_constraints>:
   1faf8:	b513      	push	{r0, r1, r4, lr}
   1fafa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1fafc:	889b      	ldrh	r3, [r3, #4]
   1fafe:	065b      	lsls	r3, r3, #25
   1fb00:	d513      	bpl.n	1fb2a <timescale_constraints+0x32>
   1fb02:	6884      	ldr	r4, [r0, #8]
   1fb04:	4b0c      	ldr	r3, [pc, #48]	; (1fb38 <timescale_constraints+0x40>)
   1fb06:	ed94 0b00 	vldr	d0, [r4]
   1fb0a:	2200      	movs	r2, #0
   1fb0c:	ec51 0b10 	vmov	r0, r1, d0
   1fb10:	ed8d 0b00 	vstr	d0, [sp]
   1fb14:	f005 f860 	bl	24bd8 <__aeabi_dcmpgt>
   1fb18:	ed9d 0b00 	vldr	d0, [sp]
   1fb1c:	b128      	cbz	r0, 1fb2a <timescale_constraints+0x32>
   1fb1e:	ed9f 1b04 	vldr	d1, [pc, #16]	; 1fb30 <timescale_constraints+0x38>
   1fb22:	f005 fcd3 	bl	254cc <fmod>
   1fb26:	ed84 0b00 	vstr	d0, [r4]
   1fb2a:	b002      	add	sp, #8
   1fb2c:	bd10      	pop	{r4, pc}
   1fb2e:	bf00      	nop
   1fb30:	00000000 	.word	0x00000000
   1fb34:	42700000 	.word	0x42700000
   1fb38:	42700000 	.word	0x42700000
   1fb3c:	00000000 	.word	0x00000000

0001fb40 <timescale_Hofx>:
   1fb40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fb44:	6904      	ldr	r4, [r0, #16]
   1fb46:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
   1fb48:	69c5      	ldr	r5, [r0, #28]
   1fb4a:	6886      	ldr	r6, [r0, #8]
   1fb4c:	2200      	movs	r2, #0
   1fb4e:	2300      	movs	r3, #0
   1fb50:	e9c4 2300 	strd	r2, r3, [r4]
   1fb54:	f105 0818 	add.w	r8, r5, #24
   1fb58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
   1fb5c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1fb60:	f004 fdaa 	bl	246b8 <__aeabi_dmul>
   1fb64:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fb68:	f004 fbf0 	bl	2434c <__adddf3>
   1fb6c:	4545      	cmp	r5, r8
   1fb6e:	e9c4 0100 	strd	r0, r1, [r4]
   1fb72:	d1f1      	bne.n	1fb58 <timescale_Hofx+0x18>
   1fb74:	e9cd 0100 	strd	r0, r1, [sp]
   1fb78:	88bb      	ldrh	r3, [r7, #4]
   1fb7a:	065b      	lsls	r3, r3, #25
   1fb7c:	d50c      	bpl.n	1fb98 <timescale_Hofx+0x58>
   1fb7e:	2200      	movs	r2, #0
   1fb80:	4b09      	ldr	r3, [pc, #36]	; (1fba8 <timescale_Hofx+0x68>)
   1fb82:	f005 f829 	bl	24bd8 <__aeabi_dcmpgt>
   1fb86:	ed9d 0b00 	vldr	d0, [sp]
   1fb8a:	b128      	cbz	r0, 1fb98 <timescale_Hofx+0x58>
   1fb8c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 1fba0 <timescale_Hofx+0x60>
   1fb90:	f005 fc9c 	bl	254cc <fmod>
   1fb94:	ed84 0b00 	vstr	d0, [r4]
   1fb98:	b002      	add	sp, #8
   1fb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fb9e:	bf00      	nop
   1fba0:	00000000 	.word	0x00000000
   1fba4:	42700000 	.word	0x42700000
   1fba8:	42700000 	.word	0x42700000

0001fbac <timescale_init>:
   1fbac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fbb0:	4688      	mov	r8, r1
   1fbb2:	4614      	mov	r4, r2
   1fbb4:	ec57 6b10 	vmov	r6, r7, d0
   1fbb8:	4605      	mov	r5, r0
   1fbba:	b990      	cbnz	r0, 1fbe2 <timescale_init+0x36>
   1fbbc:	2008      	movs	r0, #8
   1fbbe:	f7f0 fcdf 	bl	10580 <malloc>
   1fbc2:	4605      	mov	r5, r0
   1fbc4:	b928      	cbnz	r0, 1fbd2 <timescale_init+0x26>
   1fbc6:	4b2c      	ldr	r3, [pc, #176]	; (1fc78 <timescale_init+0xcc>)
   1fbc8:	4a2c      	ldr	r2, [pc, #176]	; (1fc7c <timescale_init+0xd0>)
   1fbca:	482d      	ldr	r0, [pc, #180]	; (1fc80 <timescale_init+0xd4>)
   1fbcc:	21e0      	movs	r1, #224	; 0xe0
   1fbce:	f7e9 faf9 	bl	91c4 <__assert_func>
   1fbd2:	2208      	movs	r2, #8
   1fbd4:	2100      	movs	r1, #0
   1fbd6:	f7f0 fd50 	bl	1067a <memset>
   1fbda:	792b      	ldrb	r3, [r5, #4]
   1fbdc:	f043 0301 	orr.w	r3, r3, #1
   1fbe0:	712b      	strb	r3, [r5, #4]
   1fbe2:	4641      	mov	r1, r8
   1fbe4:	2301      	movs	r3, #1
   1fbe6:	2203      	movs	r2, #3
   1fbe8:	6828      	ldr	r0, [r5, #0]
   1fbea:	f000 fad3 	bl	20194 <srkf_dbl_init>
   1fbee:	463b      	mov	r3, r7
   1fbf0:	4621      	mov	r1, r4
   1fbf2:	6028      	str	r0, [r5, #0]
   1fbf4:	4632      	mov	r2, r6
   1fbf6:	f7ff fdcd 	bl	1f794 <timescale_QUpdate>
   1fbfa:	682c      	ldr	r4, [r5, #0]
   1fbfc:	2700      	movs	r7, #0
   1fbfe:	f8b4 a000 	ldrh.w	sl, [r4]
   1fc02:	46b8      	mov	r8, r7
   1fc04:	fa1f f388 	uxth.w	r3, r8
   1fc08:	459a      	cmp	sl, r3
   1fc0a:	d91a      	bls.n	1fc42 <timescale_init+0x96>
   1fc0c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   1fc10:	2600      	movs	r6, #0
   1fc12:	e00f      	b.n	1fc34 <timescale_init+0x88>
   1fc14:	6a22      	ldr	r2, [r4, #32]
   1fc16:	19f3      	adds	r3, r6, r7
   1fc18:	00db      	lsls	r3, r3, #3
   1fc1a:	eb02 0903 	add.w	r9, r2, r3
   1fc1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1fc20:	18d1      	adds	r1, r2, r3
   1fc22:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fc26:	2200      	movs	r2, #0
   1fc28:	4b16      	ldr	r3, [pc, #88]	; (1fc84 <timescale_init+0xd8>)
   1fc2a:	f004 fd45 	bl	246b8 <__aeabi_dmul>
   1fc2e:	e9c9 0100 	strd	r0, r1, [r9]
   1fc32:	3601      	adds	r6, #1
   1fc34:	b2b3      	uxth	r3, r6
   1fc36:	459b      	cmp	fp, r3
   1fc38:	d8ec      	bhi.n	1fc14 <timescale_init+0x68>
   1fc3a:	f108 0801 	add.w	r8, r8, #1
   1fc3e:	4457      	add	r7, sl
   1fc40:	e7e0      	b.n	1fc04 <timescale_init+0x58>
   1fc42:	69e3      	ldr	r3, [r4, #28]
   1fc44:	4910      	ldr	r1, [pc, #64]	; (1fc88 <timescale_init+0xdc>)
   1fc46:	792a      	ldrb	r2, [r5, #4]
   1fc48:	2000      	movs	r0, #0
   1fc4a:	e9c3 0100 	strd	r0, r1, [r3]
   1fc4e:	4b0f      	ldr	r3, [pc, #60]	; (1fc8c <timescale_init+0xe0>)
   1fc50:	65a3      	str	r3, [r4, #88]	; 0x58
   1fc52:	4b0f      	ldr	r3, [pc, #60]	; (1fc90 <timescale_init+0xe4>)
   1fc54:	6563      	str	r3, [r4, #84]	; 0x54
   1fc56:	4b0f      	ldr	r3, [pc, #60]	; (1fc94 <timescale_init+0xe8>)
   1fc58:	65e3      	str	r3, [r4, #92]	; 0x5c
   1fc5a:	4b0f      	ldr	r3, [pc, #60]	; (1fc98 <timescale_init+0xec>)
   1fc5c:	6663      	str	r3, [r4, #100]	; 0x64
   1fc5e:	4b0f      	ldr	r3, [pc, #60]	; (1fc9c <timescale_init+0xf0>)
   1fc60:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
   1fc64:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1fc68:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1fc6c:	f363 0241 	bfi	r2, r3, #1, #1
   1fc70:	712a      	strb	r2, [r5, #4]
   1fc72:	4628      	mov	r0, r5
   1fc74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc78:	00028afe 	.word	0x00028afe
   1fc7c:	00028ad6 	.word	0x00028ad6
   1fc80:	00028b03 	.word	0x00028b03
   1fc84:	40590000 	.word	0x40590000
   1fc88:	3ff00000 	.word	0x3ff00000
   1fc8c:	0001f909 	.word	0x0001f909
   1fc90:	0001f98d 	.word	0x0001f98d
   1fc94:	0001fb41 	.word	0x0001fb41
   1fc98:	0001faf9 	.word	0x0001faf9
   1fc9c:	0001fa01 	.word	0x0001fa01

0001fca0 <timescale_free>:
   1fca0:	b510      	push	{r4, lr}
   1fca2:	4604      	mov	r4, r0
   1fca4:	6800      	ldr	r0, [r0, #0]
   1fca6:	b930      	cbnz	r0, 1fcb6 <timescale_free+0x16>
   1fca8:	4b08      	ldr	r3, [pc, #32]	; (1fccc <timescale_free+0x2c>)
   1fcaa:	4a09      	ldr	r2, [pc, #36]	; (1fcd0 <timescale_free+0x30>)
   1fcac:	4809      	ldr	r0, [pc, #36]	; (1fcd4 <timescale_free+0x34>)
   1fcae:	f44f 7181 	mov.w	r1, #258	; 0x102
   1fcb2:	f7e9 fa87 	bl	91c4 <__assert_func>
   1fcb6:	f000 fced 	bl	20694 <srkf_dbl_free>
   1fcba:	7923      	ldrb	r3, [r4, #4]
   1fcbc:	07db      	lsls	r3, r3, #31
   1fcbe:	d504      	bpl.n	1fcca <timescale_free+0x2a>
   1fcc0:	4620      	mov	r0, r4
   1fcc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fcc6:	f7f0 bc91 	b.w	105ec <free>
   1fcca:	bd10      	pop	{r4, pc}
   1fccc:	00028af4 	.word	0x00028af4
   1fcd0:	00028ae5 	.word	0x00028ae5
   1fcd4:	00028b03 	.word	0x00028b03

0001fcd8 <timescale_main>:
   1fcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcdc:	ed2d 8b02 	vpush	{d8}
   1fce0:	eeb0 8a40 	vmov.f32	s16, s0
   1fce4:	eef0 8a60 	vmov.f32	s17, s1
   1fce8:	b083      	sub	sp, #12
   1fcea:	4604      	mov	r4, r0
   1fcec:	468a      	mov	sl, r1
   1fcee:	4617      	mov	r7, r2
   1fcf0:	461d      	mov	r5, r3
   1fcf2:	2200      	movs	r2, #0
   1fcf4:	4b29      	ldr	r3, [pc, #164]	; (1fd9c <timescale_main+0xc4>)
   1fcf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fcfa:	f04f 0601 	mov.w	r6, #1
   1fcfe:	f004 ff6b 	bl	24bd8 <__aeabi_dcmpgt>
   1fd02:	b900      	cbnz	r0, 1fd06 <timescale_main+0x2e>
   1fd04:	4606      	mov	r6, r0
   1fd06:	7923      	ldrb	r3, [r4, #4]
   1fd08:	6820      	ldr	r0, [r4, #0]
   1fd0a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1fd0e:	4316      	orrs	r6, r2
   1fd10:	f366 1386 	bfi	r3, r6, #6, #1
   1fd14:	7123      	strb	r3, [r4, #4]
   1fd16:	4639      	mov	r1, r7
   1fd18:	ec53 2b18 	vmov	r2, r3, d8
   1fd1c:	f7ff fd3a 	bl	1f794 <timescale_QUpdate>
   1fd20:	6827      	ldr	r7, [r4, #0]
   1fd22:	887a      	ldrh	r2, [r7, #2]
   1fd24:	f06f 0907 	mvn.w	r9, #7
   1fd28:	1c53      	adds	r3, r2, #1
   1fd2a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1fd2e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1fd32:	9201      	str	r2, [sp, #4]
   1fd34:	fb09 f903 	mul.w	r9, r9, r3
   1fd38:	f04f 0800 	mov.w	r8, #0
   1fd3c:	9b01      	ldr	r3, [sp, #4]
   1fd3e:	429d      	cmp	r5, r3
   1fd40:	44d8      	add	r8, fp
   1fd42:	d11e      	bne.n	1fd82 <timescale_main+0xaa>
   1fd44:	eeb0 0a48 	vmov.f32	s0, s16
   1fd48:	eef0 0a68 	vmov.f32	s1, s17
   1fd4c:	2300      	movs	r3, #0
   1fd4e:	461a      	mov	r2, r3
   1fd50:	4651      	mov	r1, sl
   1fd52:	4638      	mov	r0, r7
   1fd54:	f000 f8b4 	bl	1fec0 <srkf_dbl_main>
   1fd58:	7923      	ldrb	r3, [r4, #4]
   1fd5a:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1fd5e:	f3c3 0280 	ubfx	r2, r3, #2, #1
   1fd62:	4302      	orrs	r2, r0
   1fd64:	f362 0382 	bfi	r3, r2, #2, #1
   1fd68:	7123      	strb	r3, [r4, #4]
   1fd6a:	b2db      	uxtb	r3, r3
   1fd6c:	075a      	lsls	r2, r3, #29
   1fd6e:	bf5c      	itt	pl
   1fd70:	f043 0308 	orrpl.w	r3, r3, #8
   1fd74:	7123      	strbpl	r3, [r4, #4]
   1fd76:	88a0      	ldrh	r0, [r4, #4]
   1fd78:	b003      	add	sp, #12
   1fd7a:	ecbd 8b02 	vpop	{d8}
   1fd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1fd86:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   1fd88:	4610      	mov	r0, r2
   1fd8a:	4619      	mov	r1, r3
   1fd8c:	f004 fc94 	bl	246b8 <__aeabi_dmul>
   1fd90:	4446      	add	r6, r8
   1fd92:	444e      	add	r6, r9
   1fd94:	e9c6 0100 	strd	r0, r1, [r6]
   1fd98:	e7d0      	b.n	1fd3c <timescale_main+0x64>
   1fd9a:	bf00      	nop
   1fd9c:	42600000 	.word	0x42600000

0001fda0 <Hofx>:
   1fda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fda4:	ed2d 8b02 	vpush	{d8}
   1fda8:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 1fe18 <Hofx+0x78>
   1fdac:	f04f 0800 	mov.w	r8, #0
   1fdb0:	f8b0 9000 	ldrh.w	r9, [r0]
   1fdb4:	f8b0 a002 	ldrh.w	sl, [r0, #2]
   1fdb8:	4604      	mov	r4, r0
   1fdba:	4647      	mov	r7, r8
   1fdbc:	b2bb      	uxth	r3, r7
   1fdbe:	459a      	cmp	sl, r3
   1fdc0:	d803      	bhi.n	1fdca <Hofx+0x2a>
   1fdc2:	ecbd 8b02 	vpop	{d8}
   1fdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fdca:	6926      	ldr	r6, [r4, #16]
   1fdcc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   1fdd0:	ed86 8b00 	vstr	d8, [r6]
   1fdd4:	2500      	movs	r5, #0
   1fdd6:	b2ab      	uxth	r3, r5
   1fdd8:	4599      	cmp	r9, r3
   1fdda:	d802      	bhi.n	1fde2 <Hofx+0x42>
   1fddc:	3701      	adds	r7, #1
   1fdde:	44c8      	add	r8, r9
   1fde0:	e7ec      	b.n	1fdbc <Hofx+0x1c>
   1fde2:	69e3      	ldr	r3, [r4, #28]
   1fde4:	eb05 0108 	add.w	r1, r5, r8
   1fde8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1fdec:	68a3      	ldr	r3, [r4, #8]
   1fdee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fdfa:	f004 fc5d 	bl	246b8 <__aeabi_dmul>
   1fdfe:	4602      	mov	r2, r0
   1fe00:	460b      	mov	r3, r1
   1fe02:	e9d6 0100 	ldrd	r0, r1, [r6]
   1fe06:	f004 faa1 	bl	2434c <__adddf3>
   1fe0a:	3501      	adds	r5, #1
   1fe0c:	e9c6 0100 	strd	r0, r1, [r6]
   1fe10:	e7e1      	b.n	1fdd6 <Hofx+0x36>
   1fe12:	bf00      	nop
   1fe14:	f3af 8000 	nop.w
	...

0001fe20 <Aofx>:
   1fe20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe24:	f8b0 a000 	ldrh.w	sl, [r0]
   1fe28:	ed2d 8b02 	vpush	{d8}
   1fe2c:	ea4f 09ca 	mov.w	r9, sl, lsl #3
   1fe30:	f109 030e 	add.w	r3, r9, #14
   1fe34:	466a      	mov	r2, sp
   1fe36:	08db      	lsrs	r3, r3, #3
   1fe38:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   1fe3c:	af00      	add	r7, sp, #0
   1fe3e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 1feb8 <Aofx+0x98>
   1fe42:	469d      	mov	sp, r3
   1fe44:	46e8      	mov	r8, sp
   1fe46:	4606      	mov	r6, r0
   1fe48:	44c1      	add	r9, r8
   1fe4a:	4644      	mov	r4, r8
   1fe4c:	f04f 0b00 	mov.w	fp, #0
   1fe50:	454c      	cmp	r4, r9
   1fe52:	d107      	bne.n	1fe64 <Aofx+0x44>
   1fe54:	4643      	mov	r3, r8
   1fe56:	42a3      	cmp	r3, r4
   1fe58:	d124      	bne.n	1fea4 <Aofx+0x84>
   1fe5a:	46bd      	mov	sp, r7
   1fe5c:	ecbd 8b02 	vpop	{d8}
   1fe60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe64:	eca4 8b02 	vstmia	r4!, {d8}
   1fe68:	2500      	movs	r5, #0
   1fe6a:	b2ab      	uxth	r3, r5
   1fe6c:	459a      	cmp	sl, r3
   1fe6e:	d801      	bhi.n	1fe74 <Aofx+0x54>
   1fe70:	44d3      	add	fp, sl
   1fe72:	e7ed      	b.n	1fe50 <Aofx+0x30>
   1fe74:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
   1fe76:	eb05 030b 	add.w	r3, r5, fp
   1fe7a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1fe7e:	68b3      	ldr	r3, [r6, #8]
   1fe80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fe88:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fe8c:	f004 fc14 	bl	246b8 <__aeabi_dmul>
   1fe90:	4602      	mov	r2, r0
   1fe92:	460b      	mov	r3, r1
   1fe94:	e954 0102 	ldrd	r0, r1, [r4, #-8]
   1fe98:	f004 fa58 	bl	2434c <__adddf3>
   1fe9c:	3501      	adds	r5, #1
   1fe9e:	e944 0102 	strd	r0, r1, [r4, #-8]
   1fea2:	e7e2      	b.n	1fe6a <Aofx+0x4a>
   1fea4:	68b2      	ldr	r2, [r6, #8]
   1fea6:	eba3 0108 	sub.w	r1, r3, r8
   1feaa:	440a      	add	r2, r1
   1feac:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1feb0:	e9c2 0100 	strd	r0, r1, [r2]
   1feb4:	e7cf      	b.n	1fe56 <Aofx+0x36>
   1feb6:	bf00      	nop
	...

0001fec0 <srkf_dbl_main>:
   1fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fec4:	ed2d 8b02 	vpush	{d8}
   1fec8:	eeb0 8a40 	vmov.f32	s16, s0
   1fecc:	eef0 8a60 	vmov.f32	s17, s1
   1fed0:	b089      	sub	sp, #36	; 0x24
   1fed2:	460d      	mov	r5, r1
   1fed4:	af04      	add	r7, sp, #16
   1fed6:	4690      	mov	r8, r2
   1fed8:	461e      	mov	r6, r3
   1feda:	4604      	mov	r4, r0
   1fedc:	b928      	cbnz	r0, 1feea <srkf_dbl_main+0x2a>
   1fede:	4ba8      	ldr	r3, [pc, #672]	; (20180 <srkf_dbl_main+0x2c0>)
   1fee0:	4aa8      	ldr	r2, [pc, #672]	; (20184 <srkf_dbl_main+0x2c4>)
   1fee2:	2185      	movs	r1, #133	; 0x85
   1fee4:	48a8      	ldr	r0, [pc, #672]	; (20188 <srkf_dbl_main+0x2c8>)
   1fee6:	f7e9 f96d 	bl	91c4 <__assert_func>
   1feea:	6d43      	ldr	r3, [r0, #84]	; 0x54
   1feec:	b91b      	cbnz	r3, 1fef6 <srkf_dbl_main+0x36>
   1feee:	4ba7      	ldr	r3, [pc, #668]	; (2018c <srkf_dbl_main+0x2cc>)
   1fef0:	4aa4      	ldr	r2, [pc, #656]	; (20184 <srkf_dbl_main+0x2c4>)
   1fef2:	2186      	movs	r1, #134	; 0x86
   1fef4:	e7f6      	b.n	1fee4 <srkf_dbl_main+0x24>
   1fef6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1fef8:	b91b      	cbnz	r3, 1ff02 <srkf_dbl_main+0x42>
   1fefa:	4ba5      	ldr	r3, [pc, #660]	; (20190 <srkf_dbl_main+0x2d0>)
   1fefc:	4aa1      	ldr	r2, [pc, #644]	; (20184 <srkf_dbl_main+0x2c4>)
   1fefe:	2187      	movs	r1, #135	; 0x87
   1ff00:	e7f0      	b.n	1fee4 <srkf_dbl_main+0x24>
   1ff02:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1ff04:	b10b      	cbz	r3, 1ff0a <srkf_dbl_main+0x4a>
   1ff06:	4611      	mov	r1, r2
   1ff08:	4798      	blx	r3
   1ff0a:	eeb0 0a48 	vmov.f32	s0, s16
   1ff0e:	eef0 0a68 	vmov.f32	s1, s17
   1ff12:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1ff14:	4641      	mov	r1, r8
   1ff16:	4620      	mov	r0, r4
   1ff18:	4798      	blx	r3
   1ff1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ff1c:	b12b      	cbz	r3, 1ff2a <srkf_dbl_main+0x6a>
   1ff1e:	eeb0 0a48 	vmov.f32	s0, s16
   1ff22:	eef0 0a68 	vmov.f32	s1, s17
   1ff26:	4620      	mov	r0, r4
   1ff28:	4798      	blx	r3
   1ff2a:	8863      	ldrh	r3, [r4, #2]
   1ff2c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1ff2e:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
   1ff32:	f000 fc65 	bl	20800 <ud_dbl>
   1ff36:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
   1ff3a:	8823      	ldrh	r3, [r4, #0]
   1ff3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ff3e:	f000 fc5f 	bl	20800 <ud_dbl>
   1ff42:	8823      	ldrh	r3, [r4, #0]
   1ff44:	9302      	str	r3, [sp, #8]
   1ff46:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ff48:	9301      	str	r3, [sp, #4]
   1ff4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1ff4c:	9300      	str	r3, [sp, #0]
   1ff4e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1ff52:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
   1ff56:	f000 fd27 	bl	209a8 <thornton_dbl>
   1ff5a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   1ff5e:	f000 0001 	and.w	r0, r0, #1
   1ff62:	f3c3 1240 	ubfx	r2, r3, #5, #1
   1ff66:	4302      	orrs	r2, r0
   1ff68:	f362 1345 	bfi	r3, r2, #5, #1
   1ff6c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   1ff70:	2e00      	cmp	r6, #0
   1ff72:	d156      	bne.n	20022 <srkf_dbl_main+0x162>
   1ff74:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ff76:	466e      	mov	r6, sp
   1ff78:	b12b      	cbz	r3, 1ff86 <srkf_dbl_main+0xc6>
   1ff7a:	eeb0 0a48 	vmov.f32	s0, s16
   1ff7e:	eef0 0a68 	vmov.f32	s1, s17
   1ff82:	4620      	mov	r0, r4
   1ff84:	4798      	blx	r3
   1ff86:	eeb0 0a48 	vmov.f32	s0, s16
   1ff8a:	eef0 0a68 	vmov.f32	s1, s17
   1ff8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1ff90:	4620      	mov	r0, r4
   1ff92:	4798      	blx	r3
   1ff94:	8863      	ldrh	r3, [r4, #2]
   1ff96:	8822      	ldrh	r2, [r4, #0]
   1ff98:	435a      	muls	r2, r3
   1ff9a:	00d2      	lsls	r2, r2, #3
   1ff9c:	3208      	adds	r2, #8
   1ff9e:	ebad 0d02 	sub.w	sp, sp, r2
   1ffa2:	2201      	movs	r2, #1
   1ffa4:	9200      	str	r2, [sp, #0]
   1ffa6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1ffa8:	6960      	ldr	r0, [r4, #20]
   1ffaa:	462a      	mov	r2, r5
   1ffac:	f000 fbc2 	bl	20734 <trisolve_dbl>
   1ffb0:	8822      	ldrh	r2, [r4, #0]
   1ffb2:	8863      	ldrh	r3, [r4, #2]
   1ffb4:	9200      	str	r2, [sp, #0]
   1ffb6:	f10d 0810 	add.w	r8, sp, #16
   1ffba:	69e2      	ldr	r2, [r4, #28]
   1ffbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   1ffbe:	4640      	mov	r0, r8
   1ffc0:	f000 fbb8 	bl	20734 <trisolve_dbl>
   1ffc4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
   1ffc6:	b9b5      	cbnz	r5, 1fff6 <srkf_dbl_main+0x136>
   1ffc8:	f8b4 a002 	ldrh.w	sl, [r4, #2]
   1ffcc:	b2ab      	uxth	r3, r5
   1ffce:	459a      	cmp	sl, r3
   1ffd0:	d917      	bls.n	20002 <srkf_dbl_main+0x142>
   1ffd2:	69a3      	ldr	r3, [r4, #24]
   1ffd4:	00ea      	lsls	r2, r5, #3
   1ffd6:	eb03 0902 	add.w	r9, r3, r2
   1ffda:	6963      	ldr	r3, [r4, #20]
   1ffdc:	1899      	adds	r1, r3, r2
   1ffde:	6923      	ldr	r3, [r4, #16]
   1ffe0:	4413      	add	r3, r2
   1ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ffe6:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ffea:	f004 f9ad 	bl	24348 <__aeabi_dsub>
   1ffee:	3501      	adds	r5, #1
   1fff0:	e9c9 0100 	strd	r0, r1, [r9]
   1fff4:	e7ea      	b.n	1ffcc <srkf_dbl_main+0x10c>
   1fff6:	eeb0 0a48 	vmov.f32	s0, s16
   1fffa:	eef0 0a68 	vmov.f32	s1, s17
   1fffe:	4620      	mov	r0, r4
   20000:	47a8      	blx	r5
   20002:	2300      	movs	r3, #0
   20004:	8862      	ldrh	r2, [r4, #2]
   20006:	b299      	uxth	r1, r3
   20008:	4291      	cmp	r1, r2
   2000a:	f103 0501 	add.w	r5, r3, #1
   2000e:	d326      	bcc.n	2005e <srkf_dbl_main+0x19e>
   20010:	6e63      	ldr	r3, [r4, #100]	; 0x64
   20012:	b12b      	cbz	r3, 20020 <srkf_dbl_main+0x160>
   20014:	eeb0 0a48 	vmov.f32	s0, s16
   20018:	eef0 0a68 	vmov.f32	s1, s17
   2001c:	4620      	mov	r0, r4
   2001e:	4798      	blx	r3
   20020:	46b5      	mov	sp, r6
   20022:	f8b4 a000 	ldrh.w	sl, [r4]
   20026:	ed9f 8b54 	vldr	d8, [pc, #336]	; 20178 <srkf_dbl_main+0x2b8>
   2002a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   2002e:	2500      	movs	r5, #0
   20030:	60fb      	str	r3, [r7, #12]
   20032:	60bd      	str	r5, [r7, #8]
   20034:	893b      	ldrh	r3, [r7, #8]
   20036:	459a      	cmp	sl, r3
   20038:	d85d      	bhi.n	200f6 <srkf_dbl_main+0x236>
   2003a:	ed9f 8b4f 	vldr	d8, [pc, #316]	; 20178 <srkf_dbl_main+0x2b8>
   2003e:	2500      	movs	r5, #0
   20040:	68fb      	ldr	r3, [r7, #12]
   20042:	603b      	str	r3, [r7, #0]
   20044:	46ab      	mov	fp, r5
   20046:	607d      	str	r5, [r7, #4]
   20048:	88bb      	ldrh	r3, [r7, #4]
   2004a:	459a      	cmp	sl, r3
   2004c:	f240 808b 	bls.w	20166 <srkf_dbl_main+0x2a6>
   20050:	f06f 0307 	mvn.w	r3, #7
   20054:	436b      	muls	r3, r5
   20056:	60bb      	str	r3, [r7, #8]
   20058:	f04f 0900 	mov.w	r9, #0
   2005c:	e05e      	b.n	2011c <srkf_dbl_main+0x25c>
   2005e:	b29b      	uxth	r3, r3
   20060:	fb02 3c03 	mla	ip, r2, r3, r3
   20064:	6c22      	ldr	r2, [r4, #64]	; 0x40
   20066:	8821      	ldrh	r1, [r4, #0]
   20068:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
   2006c:	69a2      	ldr	r2, [r4, #24]
   2006e:	9100      	str	r1, [sp, #0]
   20070:	fb03 f001 	mul.w	r0, r3, r1
   20074:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
   20078:	68a1      	ldr	r1, [r4, #8]
   2007a:	e9d4 2309 	ldrd	r2, r3, [r4, #36]	; 0x24
   2007e:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   20082:	ed9c 1b00 	vldr	d1, [ip]
   20086:	ed9e 0b00 	vldr	d0, [lr]
   2008a:	f000 feb1 	bl	20df0 <bierman_dbl>
   2008e:	462b      	mov	r3, r5
   20090:	e7b8      	b.n	20004 <srkf_dbl_main+0x144>
   20092:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20094:	eb06 0805 	add.w	r8, r6, r5
   20098:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   2009c:	ed88 8b00 	vstr	d8, [r8]
   200a0:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   200a4:	f04f 0900 	mov.w	r9, #0
   200a8:	fa1f f389 	uxth.w	r3, r9
   200ac:	459a      	cmp	sl, r3
   200ae:	d808      	bhi.n	200c2 <srkf_dbl_main+0x202>
   200b0:	3601      	adds	r6, #1
   200b2:	b2b3      	uxth	r3, r6
   200b4:	459a      	cmp	sl, r3
   200b6:	d8ec      	bhi.n	20092 <srkf_dbl_main+0x1d2>
   200b8:	68bb      	ldr	r3, [r7, #8]
   200ba:	3301      	adds	r3, #1
   200bc:	60bb      	str	r3, [r7, #8]
   200be:	4455      	add	r5, sl
   200c0:	e7b8      	b.n	20034 <srkf_dbl_main+0x174>
   200c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   200c4:	eb09 0305 	add.w	r3, r9, r5
   200c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   200cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   200ce:	445b      	add	r3, fp
   200d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   200d4:	e9d1 0100 	ldrd	r0, r1, [r1]
   200d8:	f004 faee 	bl	246b8 <__aeabi_dmul>
   200dc:	460b      	mov	r3, r1
   200de:	4602      	mov	r2, r0
   200e0:	e9d8 0100 	ldrd	r0, r1, [r8]
   200e4:	f004 f932 	bl	2434c <__adddf3>
   200e8:	68fb      	ldr	r3, [r7, #12]
   200ea:	e9c8 0100 	strd	r0, r1, [r8]
   200ee:	f109 0901 	add.w	r9, r9, #1
   200f2:	449b      	add	fp, r3
   200f4:	e7d8      	b.n	200a8 <srkf_dbl_main+0x1e8>
   200f6:	2600      	movs	r6, #0
   200f8:	e7db      	b.n	200b2 <srkf_dbl_main+0x1f2>
   200fa:	6a23      	ldr	r3, [r4, #32]
   200fc:	eb09 0805 	add.w	r8, r9, r5
   20100:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   20104:	ed88 8b00 	vstr	d8, [r8]
   20108:	465e      	mov	r6, fp
   2010a:	683b      	ldr	r3, [r7, #0]
   2010c:	429e      	cmp	r6, r3
   2010e:	d114      	bne.n	2013a <srkf_dbl_main+0x27a>
   20110:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
   20114:	4413      	add	r3, r2
   20116:	f109 0901 	add.w	r9, r9, #1
   2011a:	60bb      	str	r3, [r7, #8]
   2011c:	fa1f f389 	uxth.w	r3, r9
   20120:	459a      	cmp	sl, r3
   20122:	d8ea      	bhi.n	200fa <srkf_dbl_main+0x23a>
   20124:	687b      	ldr	r3, [r7, #4]
   20126:	68fa      	ldr	r2, [r7, #12]
   20128:	3301      	adds	r3, #1
   2012a:	607b      	str	r3, [r7, #4]
   2012c:	68fb      	ldr	r3, [r7, #12]
   2012e:	449b      	add	fp, r3
   20130:	683b      	ldr	r3, [r7, #0]
   20132:	4413      	add	r3, r2
   20134:	603b      	str	r3, [r7, #0]
   20136:	4455      	add	r5, sl
   20138:	e786      	b.n	20048 <srkf_dbl_main+0x188>
   2013a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2013c:	68ba      	ldr	r2, [r7, #8]
   2013e:	4413      	add	r3, r2
   20140:	1999      	adds	r1, r3, r6
   20142:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20144:	4433      	add	r3, r6
   20146:	e9d3 2300 	ldrd	r2, r3, [r3]
   2014a:	e9d1 0100 	ldrd	r0, r1, [r1]
   2014e:	f004 fab3 	bl	246b8 <__aeabi_dmul>
   20152:	4602      	mov	r2, r0
   20154:	460b      	mov	r3, r1
   20156:	e9d8 0100 	ldrd	r0, r1, [r8]
   2015a:	f004 f8f7 	bl	2434c <__adddf3>
   2015e:	3608      	adds	r6, #8
   20160:	e9c8 0100 	strd	r0, r1, [r8]
   20164:	e7d1      	b.n	2010a <srkf_dbl_main+0x24a>
   20166:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   2016a:	3714      	adds	r7, #20
   2016c:	46bd      	mov	sp, r7
   2016e:	ecbd 8b02 	vpop	{d8}
   20172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20176:	bf00      	nop
	...
   20180:	00028c0d 	.word	0x00028c0d
   20184:	00028b33 	.word	0x00028b33
   20188:	00028c1a 	.word	0x00028c1a
   2018c:	00028c49 	.word	0x00028c49
   20190:	00028c5c 	.word	0x00028c5c

00020194 <srkf_dbl_init>:
   20194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20198:	4688      	mov	r8, r1
   2019a:	4615      	mov	r5, r2
   2019c:	461e      	mov	r6, r3
   2019e:	4604      	mov	r4, r0
   201a0:	b9d8      	cbnz	r0, 201da <srkf_dbl_init+0x46>
   201a2:	2074      	movs	r0, #116	; 0x74
   201a4:	f7f0 f9ec 	bl	10580 <malloc>
   201a8:	4604      	mov	r4, r0
   201aa:	b928      	cbnz	r0, 201b8 <srkf_dbl_init+0x24>
   201ac:	4baa      	ldr	r3, [pc, #680]	; (20458 <srkf_dbl_init+0x2c4>)
   201ae:	4aab      	ldr	r2, [pc, #684]	; (2045c <srkf_dbl_init+0x2c8>)
   201b0:	21c5      	movs	r1, #197	; 0xc5
   201b2:	48ab      	ldr	r0, [pc, #684]	; (20460 <srkf_dbl_init+0x2cc>)
   201b4:	f7e9 f806 	bl	91c4 <__assert_func>
   201b8:	2274      	movs	r2, #116	; 0x74
   201ba:	2100      	movs	r1, #0
   201bc:	f7f0 fa5d 	bl	1067a <memset>
   201c0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   201c4:	8025      	strh	r5, [r4, #0]
   201c6:	f043 0301 	orr.w	r3, r3, #1
   201ca:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   201ce:	4ba5      	ldr	r3, [pc, #660]	; (20464 <srkf_dbl_init+0x2d0>)
   201d0:	6563      	str	r3, [r4, #84]	; 0x54
   201d2:	4ba5      	ldr	r3, [pc, #660]	; (20468 <srkf_dbl_init+0x2d4>)
   201d4:	80a6      	strh	r6, [r4, #4]
   201d6:	8066      	strh	r6, [r4, #2]
   201d8:	65e3      	str	r3, [r4, #92]	; 0x5c
   201da:	8823      	ldrh	r3, [r4, #0]
   201dc:	42ab      	cmp	r3, r5
   201de:	d003      	beq.n	201e8 <srkf_dbl_init+0x54>
   201e0:	4ba2      	ldr	r3, [pc, #648]	; (2046c <srkf_dbl_init+0x2d8>)
   201e2:	4a9e      	ldr	r2, [pc, #632]	; (2045c <srkf_dbl_init+0x2c8>)
   201e4:	21ce      	movs	r1, #206	; 0xce
   201e6:	e7e4      	b.n	201b2 <srkf_dbl_init+0x1e>
   201e8:	88a3      	ldrh	r3, [r4, #4]
   201ea:	42b3      	cmp	r3, r6
   201ec:	d920      	bls.n	20230 <srkf_dbl_init+0x9c>
   201ee:	00f7      	lsls	r7, r6, #3
   201f0:	8066      	strh	r6, [r4, #2]
   201f2:	463a      	mov	r2, r7
   201f4:	2100      	movs	r1, #0
   201f6:	4375      	muls	r5, r6
   201f8:	6920      	ldr	r0, [r4, #16]
   201fa:	f7f0 fa3e 	bl	1067a <memset>
   201fe:	00ed      	lsls	r5, r5, #3
   20200:	463a      	mov	r2, r7
   20202:	2100      	movs	r1, #0
   20204:	69a0      	ldr	r0, [r4, #24]
   20206:	f7f0 fa38 	bl	1067a <memset>
   2020a:	4376      	muls	r6, r6
   2020c:	462a      	mov	r2, r5
   2020e:	2100      	movs	r1, #0
   20210:	69e0      	ldr	r0, [r4, #28]
   20212:	f7f0 fa32 	bl	1067a <memset>
   20216:	00f2      	lsls	r2, r6, #3
   20218:	2100      	movs	r1, #0
   2021a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2021c:	f7f0 fa2d 	bl	1067a <memset>
   20220:	462a      	mov	r2, r5
   20222:	2100      	movs	r1, #0
   20224:	6d20      	ldr	r0, [r4, #80]	; 0x50
   20226:	f7f0 fa28 	bl	1067a <memset>
   2022a:	4620      	mov	r0, r4
   2022c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20230:	68a7      	ldr	r7, [r4, #8]
   20232:	b177      	cbz	r7, 20252 <srkf_dbl_init+0xbe>
   20234:	f8d4 8010 	ldr.w	r8, [r4, #16]
   20238:	00f7      	lsls	r7, r6, #3
   2023a:	f1b8 0f00 	cmp.w	r8, #0
   2023e:	d126      	bne.n	2028e <srkf_dbl_init+0xfa>
   20240:	4638      	mov	r0, r7
   20242:	f7f0 f99d 	bl	10580 <malloc>
   20246:	6120      	str	r0, [r4, #16]
   20248:	bb58      	cbnz	r0, 202a2 <srkf_dbl_init+0x10e>
   2024a:	4b89      	ldr	r3, [pc, #548]	; (20470 <srkf_dbl_init+0x2dc>)
   2024c:	4a83      	ldr	r2, [pc, #524]	; (2045c <srkf_dbl_init+0x2c8>)
   2024e:	21e6      	movs	r1, #230	; 0xe6
   20250:	e7af      	b.n	201b2 <srkf_dbl_init+0x1e>
   20252:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   20256:	4648      	mov	r0, r9
   20258:	f7f0 f992 	bl	10580 <malloc>
   2025c:	60a0      	str	r0, [r4, #8]
   2025e:	b918      	cbnz	r0, 20268 <srkf_dbl_init+0xd4>
   20260:	4b84      	ldr	r3, [pc, #528]	; (20474 <srkf_dbl_init+0x2e0>)
   20262:	4a7e      	ldr	r2, [pc, #504]	; (2045c <srkf_dbl_init+0x2c8>)
   20264:	21dc      	movs	r1, #220	; 0xdc
   20266:	e7a4      	b.n	201b2 <srkf_dbl_init+0x1e>
   20268:	464a      	mov	r2, r9
   2026a:	4639      	mov	r1, r7
   2026c:	f7f0 fa05 	bl	1067a <memset>
   20270:	f1b8 0f00 	cmp.w	r8, #0
   20274:	d0de      	beq.n	20234 <srkf_dbl_init+0xa0>
   20276:	463b      	mov	r3, r7
   20278:	429d      	cmp	r5, r3
   2027a:	dddb      	ble.n	20234 <srkf_dbl_init+0xa0>
   2027c:	68a2      	ldr	r2, [r4, #8]
   2027e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   20282:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   20286:	e9c2 0100 	strd	r0, r1, [r2]
   2028a:	3301      	adds	r3, #1
   2028c:	e7f4      	b.n	20278 <srkf_dbl_init+0xe4>
   2028e:	4639      	mov	r1, r7
   20290:	4640      	mov	r0, r8
   20292:	f001 fe24 	bl	21ede <realloc>
   20296:	6120      	str	r0, [r4, #16]
   20298:	b918      	cbnz	r0, 202a2 <srkf_dbl_init+0x10e>
   2029a:	4b75      	ldr	r3, [pc, #468]	; (20470 <srkf_dbl_init+0x2dc>)
   2029c:	4a6f      	ldr	r2, [pc, #444]	; (2045c <srkf_dbl_init+0x2c8>)
   2029e:	21ea      	movs	r1, #234	; 0xea
   202a0:	e787      	b.n	201b2 <srkf_dbl_init+0x1e>
   202a2:	463a      	mov	r2, r7
   202a4:	2100      	movs	r1, #0
   202a6:	f7f0 f9e8 	bl	1067a <memset>
   202aa:	f8d4 8014 	ldr.w	r8, [r4, #20]
   202ae:	f1b8 0f00 	cmp.w	r8, #0
   202b2:	d108      	bne.n	202c6 <srkf_dbl_init+0x132>
   202b4:	4638      	mov	r0, r7
   202b6:	f7f0 f963 	bl	10580 <malloc>
   202ba:	6160      	str	r0, [r4, #20]
   202bc:	b968      	cbnz	r0, 202da <srkf_dbl_init+0x146>
   202be:	4b6e      	ldr	r3, [pc, #440]	; (20478 <srkf_dbl_init+0x2e4>)
   202c0:	4a66      	ldr	r2, [pc, #408]	; (2045c <srkf_dbl_init+0x2c8>)
   202c2:	21ef      	movs	r1, #239	; 0xef
   202c4:	e775      	b.n	201b2 <srkf_dbl_init+0x1e>
   202c6:	4639      	mov	r1, r7
   202c8:	4640      	mov	r0, r8
   202ca:	f001 fe08 	bl	21ede <realloc>
   202ce:	6160      	str	r0, [r4, #20]
   202d0:	b918      	cbnz	r0, 202da <srkf_dbl_init+0x146>
   202d2:	4b69      	ldr	r3, [pc, #420]	; (20478 <srkf_dbl_init+0x2e4>)
   202d4:	4a61      	ldr	r2, [pc, #388]	; (2045c <srkf_dbl_init+0x2c8>)
   202d6:	21f3      	movs	r1, #243	; 0xf3
   202d8:	e76b      	b.n	201b2 <srkf_dbl_init+0x1e>
   202da:	463a      	mov	r2, r7
   202dc:	2100      	movs	r1, #0
   202de:	f7f0 f9cc 	bl	1067a <memset>
   202e2:	f8d4 8018 	ldr.w	r8, [r4, #24]
   202e6:	f1b8 0f00 	cmp.w	r8, #0
   202ea:	d108      	bne.n	202fe <srkf_dbl_init+0x16a>
   202ec:	4638      	mov	r0, r7
   202ee:	f7f0 f947 	bl	10580 <malloc>
   202f2:	61a0      	str	r0, [r4, #24]
   202f4:	b968      	cbnz	r0, 20312 <srkf_dbl_init+0x17e>
   202f6:	4b61      	ldr	r3, [pc, #388]	; (2047c <srkf_dbl_init+0x2e8>)
   202f8:	4a58      	ldr	r2, [pc, #352]	; (2045c <srkf_dbl_init+0x2c8>)
   202fa:	21f8      	movs	r1, #248	; 0xf8
   202fc:	e759      	b.n	201b2 <srkf_dbl_init+0x1e>
   202fe:	4639      	mov	r1, r7
   20300:	4640      	mov	r0, r8
   20302:	f001 fdec 	bl	21ede <realloc>
   20306:	61a0      	str	r0, [r4, #24]
   20308:	b918      	cbnz	r0, 20312 <srkf_dbl_init+0x17e>
   2030a:	4b5c      	ldr	r3, [pc, #368]	; (2047c <srkf_dbl_init+0x2e8>)
   2030c:	4a53      	ldr	r2, [pc, #332]	; (2045c <srkf_dbl_init+0x2c8>)
   2030e:	21fc      	movs	r1, #252	; 0xfc
   20310:	e74f      	b.n	201b2 <srkf_dbl_init+0x1e>
   20312:	463a      	mov	r2, r7
   20314:	2100      	movs	r1, #0
   20316:	f7f0 f9b0 	bl	1067a <memset>
   2031a:	69e7      	ldr	r7, [r4, #28]
   2031c:	fb05 f806 	mul.w	r8, r5, r6
   20320:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   20324:	b94f      	cbnz	r7, 2033a <srkf_dbl_init+0x1a6>
   20326:	4640      	mov	r0, r8
   20328:	f7f0 f92a 	bl	10580 <malloc>
   2032c:	61e0      	str	r0, [r4, #28]
   2032e:	b978      	cbnz	r0, 20350 <srkf_dbl_init+0x1bc>
   20330:	4b53      	ldr	r3, [pc, #332]	; (20480 <srkf_dbl_init+0x2ec>)
   20332:	4a4a      	ldr	r2, [pc, #296]	; (2045c <srkf_dbl_init+0x2c8>)
   20334:	f240 1101 	movw	r1, #257	; 0x101
   20338:	e73b      	b.n	201b2 <srkf_dbl_init+0x1e>
   2033a:	4641      	mov	r1, r8
   2033c:	4638      	mov	r0, r7
   2033e:	f001 fdce 	bl	21ede <realloc>
   20342:	61e0      	str	r0, [r4, #28]
   20344:	b920      	cbnz	r0, 20350 <srkf_dbl_init+0x1bc>
   20346:	4b4e      	ldr	r3, [pc, #312]	; (20480 <srkf_dbl_init+0x2ec>)
   20348:	4a44      	ldr	r2, [pc, #272]	; (2045c <srkf_dbl_init+0x2c8>)
   2034a:	f240 1105 	movw	r1, #261	; 0x105
   2034e:	e730      	b.n	201b2 <srkf_dbl_init+0x1e>
   20350:	4642      	mov	r2, r8
   20352:	2100      	movs	r1, #0
   20354:	f7f0 f991 	bl	1067a <memset>
   20358:	f8d4 9020 	ldr.w	r9, [r4, #32]
   2035c:	f1b9 0f00 	cmp.w	r9, #0
   20360:	d110      	bne.n	20384 <srkf_dbl_init+0x1f0>
   20362:	fb05 f705 	mul.w	r7, r5, r5
   20366:	00ff      	lsls	r7, r7, #3
   20368:	4638      	mov	r0, r7
   2036a:	f7f0 f909 	bl	10580 <malloc>
   2036e:	6220      	str	r0, [r4, #32]
   20370:	b920      	cbnz	r0, 2037c <srkf_dbl_init+0x1e8>
   20372:	4b44      	ldr	r3, [pc, #272]	; (20484 <srkf_dbl_init+0x2f0>)
   20374:	4a39      	ldr	r2, [pc, #228]	; (2045c <srkf_dbl_init+0x2c8>)
   20376:	f44f 7185 	mov.w	r1, #266	; 0x10a
   2037a:	e71a      	b.n	201b2 <srkf_dbl_init+0x1e>
   2037c:	463a      	mov	r2, r7
   2037e:	4649      	mov	r1, r9
   20380:	f7f0 f97b 	bl	1067a <memset>
   20384:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
   20388:	f1b9 0f00 	cmp.w	r9, #0
   2038c:	d110      	bne.n	203b0 <srkf_dbl_init+0x21c>
   2038e:	fb05 f705 	mul.w	r7, r5, r5
   20392:	00ff      	lsls	r7, r7, #3
   20394:	4638      	mov	r0, r7
   20396:	f7f0 f8f3 	bl	10580 <malloc>
   2039a:	6260      	str	r0, [r4, #36]	; 0x24
   2039c:	b920      	cbnz	r0, 203a8 <srkf_dbl_init+0x214>
   2039e:	4b3a      	ldr	r3, [pc, #232]	; (20488 <srkf_dbl_init+0x2f4>)
   203a0:	4a2e      	ldr	r2, [pc, #184]	; (2045c <srkf_dbl_init+0x2c8>)
   203a2:	f240 110f 	movw	r1, #271	; 0x10f
   203a6:	e704      	b.n	201b2 <srkf_dbl_init+0x1e>
   203a8:	463a      	mov	r2, r7
   203aa:	4649      	mov	r1, r9
   203ac:	f7f0 f965 	bl	1067a <memset>
   203b0:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
   203b4:	f1b9 0f00 	cmp.w	r9, #0
   203b8:	d110      	bne.n	203dc <srkf_dbl_init+0x248>
   203ba:	fb05 f705 	mul.w	r7, r5, r5
   203be:	00ff      	lsls	r7, r7, #3
   203c0:	4638      	mov	r0, r7
   203c2:	f7f0 f8dd 	bl	10580 <malloc>
   203c6:	62a0      	str	r0, [r4, #40]	; 0x28
   203c8:	b920      	cbnz	r0, 203d4 <srkf_dbl_init+0x240>
   203ca:	4b30      	ldr	r3, [pc, #192]	; (2048c <srkf_dbl_init+0x2f8>)
   203cc:	4a23      	ldr	r2, [pc, #140]	; (2045c <srkf_dbl_init+0x2c8>)
   203ce:	f44f 718a 	mov.w	r1, #276	; 0x114
   203d2:	e6ee      	b.n	201b2 <srkf_dbl_init+0x1e>
   203d4:	463a      	mov	r2, r7
   203d6:	4649      	mov	r1, r9
   203d8:	f7f0 f94f 	bl	1067a <memset>
   203dc:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
   203e0:	f1b9 0f00 	cmp.w	r9, #0
   203e4:	d110      	bne.n	20408 <srkf_dbl_init+0x274>
   203e6:	fb05 f705 	mul.w	r7, r5, r5
   203ea:	00ff      	lsls	r7, r7, #3
   203ec:	4638      	mov	r0, r7
   203ee:	f7f0 f8c7 	bl	10580 <malloc>
   203f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   203f4:	b920      	cbnz	r0, 20400 <srkf_dbl_init+0x26c>
   203f6:	4b26      	ldr	r3, [pc, #152]	; (20490 <srkf_dbl_init+0x2fc>)
   203f8:	4a18      	ldr	r2, [pc, #96]	; (2045c <srkf_dbl_init+0x2c8>)
   203fa:	f240 1119 	movw	r1, #281	; 0x119
   203fe:	e6d8      	b.n	201b2 <srkf_dbl_init+0x1e>
   20400:	463a      	mov	r2, r7
   20402:	4649      	mov	r1, r9
   20404:	f7f0 f939 	bl	1067a <memset>
   20408:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
   2040c:	f1b9 0f00 	cmp.w	r9, #0
   20410:	d110      	bne.n	20434 <srkf_dbl_init+0x2a0>
   20412:	fb05 f705 	mul.w	r7, r5, r5
   20416:	00ff      	lsls	r7, r7, #3
   20418:	4638      	mov	r0, r7
   2041a:	f7f0 f8b1 	bl	10580 <malloc>
   2041e:	6320      	str	r0, [r4, #48]	; 0x30
   20420:	b920      	cbnz	r0, 2042c <srkf_dbl_init+0x298>
   20422:	4b1c      	ldr	r3, [pc, #112]	; (20494 <srkf_dbl_init+0x300>)
   20424:	4a0d      	ldr	r2, [pc, #52]	; (2045c <srkf_dbl_init+0x2c8>)
   20426:	f44f 718f 	mov.w	r1, #286	; 0x11e
   2042a:	e6c2      	b.n	201b2 <srkf_dbl_init+0x1e>
   2042c:	463a      	mov	r2, r7
   2042e:	4649      	mov	r1, r9
   20430:	f7f0 f923 	bl	1067a <memset>
   20434:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
   20438:	f1b9 0f00 	cmp.w	r9, #0
   2043c:	d132      	bne.n	204a4 <srkf_dbl_init+0x310>
   2043e:	fb05 f705 	mul.w	r7, r5, r5
   20442:	00ff      	lsls	r7, r7, #3
   20444:	4638      	mov	r0, r7
   20446:	f7f0 f89b 	bl	10580 <malloc>
   2044a:	6360      	str	r0, [r4, #52]	; 0x34
   2044c:	bb30      	cbnz	r0, 2049c <srkf_dbl_init+0x308>
   2044e:	4b12      	ldr	r3, [pc, #72]	; (20498 <srkf_dbl_init+0x304>)
   20450:	4a02      	ldr	r2, [pc, #8]	; (2045c <srkf_dbl_init+0x2c8>)
   20452:	f240 1123 	movw	r1, #291	; 0x123
   20456:	e6ac      	b.n	201b2 <srkf_dbl_init+0x1e>
   20458:	00028afe 	.word	0x00028afe
   2045c:	00028b41 	.word	0x00028b41
   20460:	00028c1a 	.word	0x00028c1a
   20464:	0001fe21 	.word	0x0001fe21
   20468:	0001fda1 	.word	0x0001fda1
   2046c:	00028b69 	.word	0x00028b69
   20470:	00028b7e 	.word	0x00028b7e
   20474:	00028b76 	.word	0x00028b76
   20478:	00028b86 	.word	0x00028b86
   2047c:	00028b8e 	.word	0x00028b8e
   20480:	00028b96 	.word	0x00028b96
   20484:	00028b9e 	.word	0x00028b9e
   20488:	00028ba6 	.word	0x00028ba6
   2048c:	00028baf 	.word	0x00028baf
   20490:	00028bb8 	.word	0x00028bb8
   20494:	00028bc0 	.word	0x00028bc0
   20498:	00028bc9 	.word	0x00028bc9
   2049c:	463a      	mov	r2, r7
   2049e:	4649      	mov	r1, r9
   204a0:	f7f0 f8eb 	bl	1067a <memset>
   204a4:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   204a8:	fb06 f706 	mul.w	r7, r6, r6
   204ac:	00ff      	lsls	r7, r7, #3
   204ae:	f1b9 0f00 	cmp.w	r9, #0
   204b2:	d109      	bne.n	204c8 <srkf_dbl_init+0x334>
   204b4:	4638      	mov	r0, r7
   204b6:	f7f0 f863 	bl	10580 <malloc>
   204ba:	63a0      	str	r0, [r4, #56]	; 0x38
   204bc:	b978      	cbnz	r0, 204de <srkf_dbl_init+0x34a>
   204be:	4b6d      	ldr	r3, [pc, #436]	; (20674 <srkf_dbl_init+0x4e0>)
   204c0:	4a6d      	ldr	r2, [pc, #436]	; (20678 <srkf_dbl_init+0x4e4>)
   204c2:	f44f 7194 	mov.w	r1, #296	; 0x128
   204c6:	e674      	b.n	201b2 <srkf_dbl_init+0x1e>
   204c8:	4639      	mov	r1, r7
   204ca:	4648      	mov	r0, r9
   204cc:	f001 fd07 	bl	21ede <realloc>
   204d0:	63a0      	str	r0, [r4, #56]	; 0x38
   204d2:	b920      	cbnz	r0, 204de <srkf_dbl_init+0x34a>
   204d4:	4b67      	ldr	r3, [pc, #412]	; (20674 <srkf_dbl_init+0x4e0>)
   204d6:	4a68      	ldr	r2, [pc, #416]	; (20678 <srkf_dbl_init+0x4e4>)
   204d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
   204dc:	e669      	b.n	201b2 <srkf_dbl_init+0x1e>
   204de:	463a      	mov	r2, r7
   204e0:	2100      	movs	r1, #0
   204e2:	f7f0 f8ca 	bl	1067a <memset>
   204e6:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
   204ea:	f1b9 0f00 	cmp.w	r9, #0
   204ee:	d109      	bne.n	20504 <srkf_dbl_init+0x370>
   204f0:	4638      	mov	r0, r7
   204f2:	f7f0 f845 	bl	10580 <malloc>
   204f6:	63e0      	str	r0, [r4, #60]	; 0x3c
   204f8:	b978      	cbnz	r0, 2051a <srkf_dbl_init+0x386>
   204fa:	4b60      	ldr	r3, [pc, #384]	; (2067c <srkf_dbl_init+0x4e8>)
   204fc:	4a5e      	ldr	r2, [pc, #376]	; (20678 <srkf_dbl_init+0x4e4>)
   204fe:	f240 1131 	movw	r1, #305	; 0x131
   20502:	e656      	b.n	201b2 <srkf_dbl_init+0x1e>
   20504:	4639      	mov	r1, r7
   20506:	4648      	mov	r0, r9
   20508:	f001 fce9 	bl	21ede <realloc>
   2050c:	63e0      	str	r0, [r4, #60]	; 0x3c
   2050e:	b920      	cbnz	r0, 2051a <srkf_dbl_init+0x386>
   20510:	4b5a      	ldr	r3, [pc, #360]	; (2067c <srkf_dbl_init+0x4e8>)
   20512:	4a59      	ldr	r2, [pc, #356]	; (20678 <srkf_dbl_init+0x4e4>)
   20514:	f240 1135 	movw	r1, #309	; 0x135
   20518:	e64b      	b.n	201b2 <srkf_dbl_init+0x1e>
   2051a:	463a      	mov	r2, r7
   2051c:	2100      	movs	r1, #0
   2051e:	f7f0 f8ac 	bl	1067a <memset>
   20522:	f8d4 9040 	ldr.w	r9, [r4, #64]	; 0x40
   20526:	f1b9 0f00 	cmp.w	r9, #0
   2052a:	d109      	bne.n	20540 <srkf_dbl_init+0x3ac>
   2052c:	4638      	mov	r0, r7
   2052e:	f7f0 f827 	bl	10580 <malloc>
   20532:	6420      	str	r0, [r4, #64]	; 0x40
   20534:	b978      	cbnz	r0, 20556 <srkf_dbl_init+0x3c2>
   20536:	4b52      	ldr	r3, [pc, #328]	; (20680 <srkf_dbl_init+0x4ec>)
   20538:	4a4f      	ldr	r2, [pc, #316]	; (20678 <srkf_dbl_init+0x4e4>)
   2053a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   2053e:	e638      	b.n	201b2 <srkf_dbl_init+0x1e>
   20540:	4639      	mov	r1, r7
   20542:	4648      	mov	r0, r9
   20544:	f001 fccb 	bl	21ede <realloc>
   20548:	6420      	str	r0, [r4, #64]	; 0x40
   2054a:	b920      	cbnz	r0, 20556 <srkf_dbl_init+0x3c2>
   2054c:	4b4c      	ldr	r3, [pc, #304]	; (20680 <srkf_dbl_init+0x4ec>)
   2054e:	4a4a      	ldr	r2, [pc, #296]	; (20678 <srkf_dbl_init+0x4e4>)
   20550:	f44f 719f 	mov.w	r1, #318	; 0x13e
   20554:	e62d      	b.n	201b2 <srkf_dbl_init+0x1e>
   20556:	463a      	mov	r2, r7
   20558:	2100      	movs	r1, #0
   2055a:	f7f0 f88e 	bl	1067a <memset>
   2055e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   20560:	b988      	cbnz	r0, 20586 <srkf_dbl_init+0x3f2>
   20562:	42b5      	cmp	r5, r6
   20564:	bf8c      	ite	hi
   20566:	fb15 f705 	smulbbhi	r7, r5, r5
   2056a:	fb16 f706 	smulbbls	r7, r6, r6
   2056e:	b2bf      	uxth	r7, r7
   20570:	00ff      	lsls	r7, r7, #3
   20572:	4638      	mov	r0, r7
   20574:	f7f0 f804 	bl	10580 <malloc>
   20578:	6460      	str	r0, [r4, #68]	; 0x44
   2057a:	b9b0      	cbnz	r0, 205aa <srkf_dbl_init+0x416>
   2057c:	4b41      	ldr	r3, [pc, #260]	; (20684 <srkf_dbl_init+0x4f0>)
   2057e:	4a3e      	ldr	r2, [pc, #248]	; (20678 <srkf_dbl_init+0x4e4>)
   20580:	f44f 71a2 	mov.w	r1, #324	; 0x144
   20584:	e615      	b.n	201b2 <srkf_dbl_init+0x1e>
   20586:	42b5      	cmp	r5, r6
   20588:	bf8c      	ite	hi
   2058a:	fb15 f705 	smulbbhi	r7, r5, r5
   2058e:	fb16 f706 	smulbbls	r7, r6, r6
   20592:	b2bf      	uxth	r7, r7
   20594:	00ff      	lsls	r7, r7, #3
   20596:	4639      	mov	r1, r7
   20598:	f001 fca1 	bl	21ede <realloc>
   2059c:	6460      	str	r0, [r4, #68]	; 0x44
   2059e:	b920      	cbnz	r0, 205aa <srkf_dbl_init+0x416>
   205a0:	4b38      	ldr	r3, [pc, #224]	; (20684 <srkf_dbl_init+0x4f0>)
   205a2:	4a35      	ldr	r2, [pc, #212]	; (20678 <srkf_dbl_init+0x4e4>)
   205a4:	f240 1149 	movw	r1, #329	; 0x149
   205a8:	e603      	b.n	201b2 <srkf_dbl_init+0x1e>
   205aa:	463a      	mov	r2, r7
   205ac:	2100      	movs	r1, #0
   205ae:	f7f0 f864 	bl	1067a <memset>
   205b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   205b4:	b988      	cbnz	r0, 205da <srkf_dbl_init+0x446>
   205b6:	42b5      	cmp	r5, r6
   205b8:	bf8c      	ite	hi
   205ba:	fb15 f705 	smulbbhi	r7, r5, r5
   205be:	fb16 f706 	smulbbls	r7, r6, r6
   205c2:	b2bf      	uxth	r7, r7
   205c4:	00ff      	lsls	r7, r7, #3
   205c6:	4638      	mov	r0, r7
   205c8:	f7ef ffda 	bl	10580 <malloc>
   205cc:	64a0      	str	r0, [r4, #72]	; 0x48
   205ce:	b9b0      	cbnz	r0, 205fe <srkf_dbl_init+0x46a>
   205d0:	4b2d      	ldr	r3, [pc, #180]	; (20688 <srkf_dbl_init+0x4f4>)
   205d2:	4a29      	ldr	r2, [pc, #164]	; (20678 <srkf_dbl_init+0x4e4>)
   205d4:	f240 114f 	movw	r1, #335	; 0x14f
   205d8:	e5eb      	b.n	201b2 <srkf_dbl_init+0x1e>
   205da:	42b5      	cmp	r5, r6
   205dc:	bf8c      	ite	hi
   205de:	fb15 f705 	smulbbhi	r7, r5, r5
   205e2:	fb16 f706 	smulbbls	r7, r6, r6
   205e6:	b2bf      	uxth	r7, r7
   205e8:	00ff      	lsls	r7, r7, #3
   205ea:	4639      	mov	r1, r7
   205ec:	f001 fc77 	bl	21ede <realloc>
   205f0:	64a0      	str	r0, [r4, #72]	; 0x48
   205f2:	b920      	cbnz	r0, 205fe <srkf_dbl_init+0x46a>
   205f4:	4b24      	ldr	r3, [pc, #144]	; (20688 <srkf_dbl_init+0x4f4>)
   205f6:	4a20      	ldr	r2, [pc, #128]	; (20678 <srkf_dbl_init+0x4e4>)
   205f8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   205fc:	e5d9      	b.n	201b2 <srkf_dbl_init+0x1e>
   205fe:	463a      	mov	r2, r7
   20600:	2100      	movs	r1, #0
   20602:	f7f0 f83a 	bl	1067a <memset>
   20606:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
   20608:	b97f      	cbnz	r7, 2062a <srkf_dbl_init+0x496>
   2060a:	436d      	muls	r5, r5
   2060c:	00ed      	lsls	r5, r5, #3
   2060e:	4628      	mov	r0, r5
   20610:	f7ef ffb6 	bl	10580 <malloc>
   20614:	64e0      	str	r0, [r4, #76]	; 0x4c
   20616:	b920      	cbnz	r0, 20622 <srkf_dbl_init+0x48e>
   20618:	4b1c      	ldr	r3, [pc, #112]	; (2068c <srkf_dbl_init+0x4f8>)
   2061a:	4a17      	ldr	r2, [pc, #92]	; (20678 <srkf_dbl_init+0x4e4>)
   2061c:	f240 1159 	movw	r1, #345	; 0x159
   20620:	e5c7      	b.n	201b2 <srkf_dbl_init+0x1e>
   20622:	462a      	mov	r2, r5
   20624:	4639      	mov	r1, r7
   20626:	f7f0 f828 	bl	1067a <memset>
   2062a:	6d25      	ldr	r5, [r4, #80]	; 0x50
   2062c:	b94d      	cbnz	r5, 20642 <srkf_dbl_init+0x4ae>
   2062e:	4640      	mov	r0, r8
   20630:	f7ef ffa6 	bl	10580 <malloc>
   20634:	6520      	str	r0, [r4, #80]	; 0x50
   20636:	b978      	cbnz	r0, 20658 <srkf_dbl_init+0x4c4>
   20638:	4b15      	ldr	r3, [pc, #84]	; (20690 <srkf_dbl_init+0x4fc>)
   2063a:	4a0f      	ldr	r2, [pc, #60]	; (20678 <srkf_dbl_init+0x4e4>)
   2063c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   20640:	e5b7      	b.n	201b2 <srkf_dbl_init+0x1e>
   20642:	4641      	mov	r1, r8
   20644:	4628      	mov	r0, r5
   20646:	f001 fc4a 	bl	21ede <realloc>
   2064a:	6520      	str	r0, [r4, #80]	; 0x50
   2064c:	b920      	cbnz	r0, 20658 <srkf_dbl_init+0x4c4>
   2064e:	4b10      	ldr	r3, [pc, #64]	; (20690 <srkf_dbl_init+0x4fc>)
   20650:	4a09      	ldr	r2, [pc, #36]	; (20678 <srkf_dbl_init+0x4e4>)
   20652:	f44f 71b1 	mov.w	r1, #354	; 0x162
   20656:	e5ac      	b.n	201b2 <srkf_dbl_init+0x1e>
   20658:	4642      	mov	r2, r8
   2065a:	2100      	movs	r1, #0
   2065c:	f7f0 f80d 	bl	1067a <memset>
   20660:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   20664:	80a6      	strh	r6, [r4, #4]
   20666:	f043 0302 	orr.w	r3, r3, #2
   2066a:	8066      	strh	r6, [r4, #2]
   2066c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
   20670:	e5db      	b.n	2022a <srkf_dbl_init+0x96>
   20672:	bf00      	nop
   20674:	00028bd2 	.word	0x00028bd2
   20678:	00028b41 	.word	0x00028b41
   2067c:	00028bda 	.word	0x00028bda
   20680:	00028be3 	.word	0x00028be3
   20684:	00028bec 	.word	0x00028bec
   20688:	00028bf4 	.word	0x00028bf4
   2068c:	00028bfd 	.word	0x00028bfd
   20690:	00028c05 	.word	0x00028c05

00020694 <srkf_dbl_free>:
   20694:	b510      	push	{r4, lr}
   20696:	4604      	mov	r4, r0
   20698:	b930      	cbnz	r0, 206a8 <srkf_dbl_free+0x14>
   2069a:	4b23      	ldr	r3, [pc, #140]	; (20728 <srkf_dbl_free+0x94>)
   2069c:	4a23      	ldr	r2, [pc, #140]	; (2072c <srkf_dbl_free+0x98>)
   2069e:	4824      	ldr	r0, [pc, #144]	; (20730 <srkf_dbl_free+0x9c>)
   206a0:	f240 1173 	movw	r1, #371	; 0x173
   206a4:	f7e8 fd8e 	bl	91c4 <__assert_func>
   206a8:	6880      	ldr	r0, [r0, #8]
   206aa:	f7ef ff9f 	bl	105ec <free>
   206ae:	6920      	ldr	r0, [r4, #16]
   206b0:	f7ef ff9c 	bl	105ec <free>
   206b4:	69a0      	ldr	r0, [r4, #24]
   206b6:	f7ef ff99 	bl	105ec <free>
   206ba:	69e0      	ldr	r0, [r4, #28]
   206bc:	f7ef ff96 	bl	105ec <free>
   206c0:	6a20      	ldr	r0, [r4, #32]
   206c2:	f7ef ff93 	bl	105ec <free>
   206c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   206c8:	f7ef ff90 	bl	105ec <free>
   206cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   206ce:	f7ef ff8d 	bl	105ec <free>
   206d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   206d4:	f7ef ff8a 	bl	105ec <free>
   206d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   206da:	f7ef ff87 	bl	105ec <free>
   206de:	6b60      	ldr	r0, [r4, #52]	; 0x34
   206e0:	f7ef ff84 	bl	105ec <free>
   206e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   206e6:	f7ef ff81 	bl	105ec <free>
   206ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   206ec:	f7ef ff7e 	bl	105ec <free>
   206f0:	6c20      	ldr	r0, [r4, #64]	; 0x40
   206f2:	f7ef ff7b 	bl	105ec <free>
   206f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   206f8:	f7ef ff78 	bl	105ec <free>
   206fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   206fe:	f7ef ff75 	bl	105ec <free>
   20702:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   20704:	f7ef ff72 	bl	105ec <free>
   20708:	6d20      	ldr	r0, [r4, #80]	; 0x50
   2070a:	f7ef ff6f 	bl	105ec <free>
   2070e:	2300      	movs	r3, #0
   20710:	6023      	str	r3, [r4, #0]
   20712:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   20716:	07db      	lsls	r3, r3, #31
   20718:	d504      	bpl.n	20724 <srkf_dbl_free+0x90>
   2071a:	4620      	mov	r0, r4
   2071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20720:	f7ef bf64 	b.w	105ec <free>
   20724:	bd10      	pop	{r4, pc}
   20726:	bf00      	nop
   20728:	00028b5d 	.word	0x00028b5d
   2072c:	00028b4f 	.word	0x00028b4f
   20730:	00028c1a 	.word	0x00028c1a

00020734 <trisolve_dbl>:
   20734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20738:	b08b      	sub	sp, #44	; 0x2c
   2073a:	4699      	mov	r9, r3
   2073c:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
   20740:	9004      	str	r0, [sp, #16]
   20742:	f06f 0307 	mvn.w	r3, #7
   20746:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
   2074a:	fb03 f308 	mul.w	r3, r3, r8
   2074e:	b236      	sxth	r6, r6
   20750:	9303      	str	r3, [sp, #12]
   20752:	e9cd 1208 	strd	r1, r2, [sp, #32]
   20756:	fb06 f308 	mul.w	r3, r6, r8
   2075a:	9306      	str	r3, [sp, #24]
   2075c:	fb09 f306 	mul.w	r3, r9, r6
   20760:	9307      	str	r3, [sp, #28]
   20762:	f04f 0b00 	mov.w	fp, #0
   20766:	fa0f fa8b 	sxth.w	sl, fp
   2076a:	45c2      	cmp	sl, r8
   2076c:	db02      	blt.n	20774 <trisolve_dbl+0x40>
   2076e:	b00b      	add	sp, #44	; 0x2c
   20770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20774:	9b06      	ldr	r3, [sp, #24]
   20776:	4453      	add	r3, sl
   20778:	00db      	lsls	r3, r3, #3
   2077a:	9305      	str	r3, [sp, #20]
   2077c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   20780:	189f      	adds	r7, r3, r2
   20782:	9b07      	ldr	r3, [sp, #28]
   20784:	9301      	str	r3, [sp, #4]
   20786:	2300      	movs	r3, #0
   20788:	4635      	mov	r5, r6
   2078a:	9302      	str	r3, [sp, #8]
   2078c:	2d00      	cmp	r5, #0
   2078e:	da02      	bge.n	20796 <trisolve_dbl+0x62>
   20790:	f10b 0b01 	add.w	fp, fp, #1
   20794:	e7e7      	b.n	20766 <trisolve_dbl+0x32>
   20796:	9a05      	ldr	r2, [sp, #20]
   20798:	9b02      	ldr	r3, [sp, #8]
   2079a:	4413      	add	r3, r2
   2079c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2079e:	4413      	add	r3, r2
   207a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   207a4:	e9c7 2300 	strd	r2, r3, [r7]
   207a8:	b2ad      	uxth	r5, r5
   207aa:	1c6c      	adds	r4, r5, #1
   207ac:	b224      	sxth	r4, r4
   207ae:	454c      	cmp	r4, r9
   207b0:	db0c      	blt.n	207cc <trisolve_dbl+0x98>
   207b2:	9b03      	ldr	r3, [sp, #12]
   207b4:	441f      	add	r7, r3
   207b6:	9b01      	ldr	r3, [sp, #4]
   207b8:	eba3 0309 	sub.w	r3, r3, r9
   207bc:	9301      	str	r3, [sp, #4]
   207be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   207c2:	3d01      	subs	r5, #1
   207c4:	4413      	add	r3, r2
   207c6:	9302      	str	r3, [sp, #8]
   207c8:	b22d      	sxth	r5, r5
   207ca:	e7df      	b.n	2078c <trisolve_dbl+0x58>
   207cc:	9b04      	ldr	r3, [sp, #16]
   207ce:	9a08      	ldr	r2, [sp, #32]
   207d0:	fb08 a104 	mla	r1, r8, r4, sl
   207d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   207d8:	9b01      	ldr	r3, [sp, #4]
   207da:	4423      	add	r3, r4
   207dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   207e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   207e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   207e8:	f003 ff66 	bl	246b8 <__aeabi_dmul>
   207ec:	4602      	mov	r2, r0
   207ee:	460b      	mov	r3, r1
   207f0:	e9d7 0100 	ldrd	r0, r1, [r7]
   207f4:	f003 fda8 	bl	24348 <__aeabi_dsub>
   207f8:	3401      	adds	r4, #1
   207fa:	e9c7 0100 	strd	r0, r1, [r7]
   207fe:	e7d5      	b.n	207ac <trisolve_dbl+0x78>

00020800 <ud_dbl>:
   20800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20804:	ed2d 8b02 	vpush	{d8}
   20808:	fb03 f503 	mul.w	r5, r3, r3
   2080c:	b091      	sub	sp, #68	; 0x44
   2080e:	460f      	mov	r7, r1
   20810:	00ed      	lsls	r5, r5, #3
   20812:	4606      	mov	r6, r0
   20814:	9209      	str	r2, [sp, #36]	; 0x24
   20816:	2100      	movs	r1, #0
   20818:	462a      	mov	r2, r5
   2081a:	4638      	mov	r0, r7
   2081c:	461c      	mov	r4, r3
   2081e:	f7ef ff2c 	bl	1067a <memset>
   20822:	462a      	mov	r2, r5
   20824:	2100      	movs	r1, #0
   20826:	9809      	ldr	r0, [sp, #36]	; 0x24
   20828:	f7ef ff27 	bl	1067a <memset>
   2082c:	43e3      	mvns	r3, r4
   2082e:	00db      	lsls	r3, r3, #3
   20830:	1e65      	subs	r5, r4, #1
   20832:	b22d      	sxth	r5, r5
   20834:	9306      	str	r3, [sp, #24]
   20836:	1c63      	adds	r3, r4, #1
   20838:	930d      	str	r3, [sp, #52]	; 0x34
   2083a:	436b      	muls	r3, r5
   2083c:	00da      	lsls	r2, r3, #3
   2083e:	00d9      	lsls	r1, r3, #3
   20840:	3301      	adds	r3, #1
   20842:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   20846:	9308      	str	r3, [sp, #32]
   20848:	f06f 0307 	mvn.w	r3, #7
   2084c:	4363      	muls	r3, r4
   2084e:	920b      	str	r2, [sp, #44]	; 0x2c
   20850:	ed9f 8b51 	vldr	d8, [pc, #324]	; 20998 <ud_dbl+0x198>
   20854:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20856:	930c      	str	r3, [sp, #48]	; 0x30
   20858:	fb05 fa04 	mul.w	sl, r5, r4
   2085c:	187b      	adds	r3, r7, r1
   2085e:	f04f 0900 	mov.w	r9, #0
   20862:	eb02 0b01 	add.w	fp, r2, r1
   20866:	f8cd a01c 	str.w	sl, [sp, #28]
   2086a:	930f      	str	r3, [sp, #60]	; 0x3c
   2086c:	f8cd 9010 	str.w	r9, [sp, #16]
   20870:	2d00      	cmp	r5, #0
   20872:	da0d      	bge.n	20890 <ud_dbl+0x90>
   20874:	2000      	movs	r0, #0
   20876:	f04f 0800 	mov.w	r8, #0
   2087a:	f04f 0900 	mov.w	r9, #0
   2087e:	b201      	sxth	r1, r0
   20880:	428c      	cmp	r4, r1
   20882:	dd7f      	ble.n	20984 <ud_dbl+0x184>
   20884:	fb04 f301 	mul.w	r3, r4, r1
   20888:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   2088c:	2200      	movs	r2, #0
   2088e:	e074      	b.n	2097a <ud_dbl+0x17a>
   20890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20892:	f8cd a014 	str.w	sl, [sp, #20]
   20896:	444b      	add	r3, r9
   20898:	9303      	str	r3, [sp, #12]
   2089a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2089c:	444b      	add	r3, r9
   2089e:	18fb      	adds	r3, r7, r3
   208a0:	930e      	str	r3, [sp, #56]	; 0x38
   208a2:	9b08      	ldr	r3, [sp, #32]
   208a4:	930a      	str	r3, [sp, #40]	; 0x28
   208a6:	46a8      	mov	r8, r5
   208a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   208aa:	ed33 7b02 	vldmdb	r3!, {d7}
   208ae:	ed8d 7b00 	vstr	d7, [sp]
   208b2:	930a      	str	r3, [sp, #40]	; 0x28
   208b4:	462e      	mov	r6, r5
   208b6:	42b4      	cmp	r4, r6
   208b8:	dc30      	bgt.n	2091c <ud_dbl+0x11c>
   208ba:	4545      	cmp	r5, r8
   208bc:	d150      	bne.n	20960 <ud_dbl+0x160>
   208be:	4b38      	ldr	r3, [pc, #224]	; (209a0 <ud_dbl+0x1a0>)
   208c0:	2200      	movs	r2, #0
   208c2:	e9dd 0100 	ldrd	r0, r1, [sp]
   208c6:	f004 f973 	bl	24bb0 <__aeabi_dcmple>
   208ca:	2800      	cmp	r0, #0
   208cc:	9b04      	ldr	r3, [sp, #16]
   208ce:	ed9d 7b00 	vldr	d7, [sp]
   208d2:	bf18      	it	ne
   208d4:	2301      	movne	r3, #1
   208d6:	9304      	str	r3, [sp, #16]
   208d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   208da:	ed8b 7b00 	vstr	d7, [fp]
   208de:	ed83 8b00 	vstr	d8, [r3]
   208e2:	9b03      	ldr	r3, [sp, #12]
   208e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   208e6:	4413      	add	r3, r2
   208e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   208ec:	9303      	str	r3, [sp, #12]
   208ee:	9b05      	ldr	r3, [sp, #20]
   208f0:	fa0f f888 	sxth.w	r8, r8
   208f4:	1b1b      	subs	r3, r3, r4
   208f6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   208fa:	9305      	str	r3, [sp, #20]
   208fc:	d1d4      	bne.n	208a8 <ud_dbl+0xa8>
   208fe:	9b06      	ldr	r3, [sp, #24]
   20900:	9a06      	ldr	r2, [sp, #24]
   20902:	449b      	add	fp, r3
   20904:	9b08      	ldr	r3, [sp, #32]
   20906:	4413      	add	r3, r2
   20908:	9308      	str	r3, [sp, #32]
   2090a:	9b07      	ldr	r3, [sp, #28]
   2090c:	3d01      	subs	r5, #1
   2090e:	1b1b      	subs	r3, r3, r4
   20910:	b22d      	sxth	r5, r5
   20912:	ebaa 0a04 	sub.w	sl, sl, r4
   20916:	9307      	str	r3, [sp, #28]
   20918:	4491      	add	r9, r2
   2091a:	e7a9      	b.n	20870 <ud_dbl+0x70>
   2091c:	9b05      	ldr	r3, [sp, #20]
   2091e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20920:	1999      	adds	r1, r3, r6
   20922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20924:	4373      	muls	r3, r6
   20926:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   2092a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2092e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20932:	e9d1 0100 	ldrd	r0, r1, [r1]
   20936:	f003 febf 	bl	246b8 <__aeabi_dmul>
   2093a:	9b07      	ldr	r3, [sp, #28]
   2093c:	4433      	add	r3, r6
   2093e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   20942:	e9d3 2300 	ldrd	r2, r3, [r3]
   20946:	f003 feb7 	bl	246b8 <__aeabi_dmul>
   2094a:	4602      	mov	r2, r0
   2094c:	460b      	mov	r3, r1
   2094e:	e9dd 0100 	ldrd	r0, r1, [sp]
   20952:	f003 fcf9 	bl	24348 <__aeabi_dsub>
   20956:	3601      	adds	r6, #1
   20958:	e9cd 0100 	strd	r0, r1, [sp]
   2095c:	b236      	sxth	r6, r6
   2095e:	e7aa      	b.n	208b6 <ud_dbl+0xb6>
   20960:	e9db 2300 	ldrd	r2, r3, [fp]
   20964:	e9dd 0100 	ldrd	r0, r1, [sp]
   20968:	f003 ffd0 	bl	2490c <__aeabi_ddiv>
   2096c:	9b03      	ldr	r3, [sp, #12]
   2096e:	e9c3 0100 	strd	r0, r1, [r3]
   20972:	e7b6      	b.n	208e2 <ud_dbl+0xe2>
   20974:	e8e3 8902 	strd	r8, r9, [r3], #8
   20978:	3201      	adds	r2, #1
   2097a:	b215      	sxth	r5, r2
   2097c:	42a9      	cmp	r1, r5
   2097e:	dcf9      	bgt.n	20974 <ud_dbl+0x174>
   20980:	3001      	adds	r0, #1
   20982:	e77c      	b.n	2087e <ud_dbl+0x7e>
   20984:	9b04      	ldr	r3, [sp, #16]
   20986:	f04f 0000 	mov.w	r0, #0
   2098a:	f363 0000 	bfi	r0, r3, #0, #1
   2098e:	b011      	add	sp, #68	; 0x44
   20990:	ecbd 8b02 	vpop	{d8}
   20994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20998:	00000000 	.word	0x00000000
   2099c:	3ff00000 	.word	0x3ff00000
   209a0:	3cb00000 	.word	0x3cb00000
   209a4:	00000000 	.word	0x00000000

000209a8 <thornton_dbl>:
   209a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209ac:	ed2d 8b02 	vpush	{d8}
   209b0:	b09d      	sub	sp, #116	; 0x74
   209b2:	af00      	add	r7, sp, #0
   209b4:	f8b7 b0a8 	ldrh.w	fp, [r7, #168]	; 0xa8
   209b8:	603b      	str	r3, [r7, #0]
   209ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   209be:	6578      	str	r0, [r7, #84]	; 0x54
   209c0:	667b      	str	r3, [r7, #100]	; 0x64
   209c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   209c6:	6279      	str	r1, [r7, #36]	; 0x24
   209c8:	2300      	movs	r3, #0
   209ca:	637a      	str	r2, [r7, #52]	; 0x34
   209cc:	4619      	mov	r1, r3
   209ce:	b28a      	uxth	r2, r1
   209d0:	4593      	cmp	fp, r2
   209d2:	d856      	bhi.n	20a82 <thornton_dbl+0xda>
   209d4:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
   209d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   209da:	b224      	sxth	r4, r4
   209dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   209e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   209e2:	65fc      	str	r4, [r7, #92]	; 0x5c
   209e4:	2300      	movs	r3, #0
   209e6:	65bb      	str	r3, [r7, #88]	; 0x58
   209e8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
   209ec:	455b      	cmp	r3, fp
   209ee:	db4e      	blt.n	20a8e <thornton_dbl+0xe6>
   209f0:	fb0b f304 	mul.w	r3, fp, r4
   209f4:	643b      	str	r3, [r7, #64]	; 0x40
   209f6:	ea6f 030b 	mvn.w	r3, fp
   209fa:	00db      	lsls	r3, r3, #3
   209fc:	60bb      	str	r3, [r7, #8]
   209fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20a02:	f10b 0301 	add.w	r3, fp, #1
   20a06:	63bb      	str	r3, [r7, #56]	; 0x38
   20a08:	4363      	muls	r3, r4
   20a0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   20a10:	f06f 0307 	mvn.w	r3, #7
   20a14:	fb03 f30b 	mul.w	r3, r3, fp
   20a18:	607b      	str	r3, [r7, #4]
   20a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20a1c:	4363      	muls	r3, r4
   20a1e:	65bb      	str	r3, [r7, #88]	; 0x58
   20a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20a22:	00db      	lsls	r3, r3, #3
   20a24:	62bb      	str	r3, [r7, #40]	; 0x28
   20a26:	2300      	movs	r3, #0
   20a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   20a2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20a2c:	330e      	adds	r3, #14
   20a2e:	08db      	lsrs	r3, r3, #3
   20a30:	ed9f 8bb1 	vldr	d8, [pc, #708]	; 20cf8 <thornton_dbl+0x350>
   20a34:	00db      	lsls	r3, r3, #3
   20a36:	653b      	str	r3, [r7, #80]	; 0x50
   20a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20a3a:	041b      	lsls	r3, r3, #16
   20a3c:	d56b      	bpl.n	20b16 <thornton_dbl+0x16e>
   20a3e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 20cf8 <thornton_dbl+0x350>
   20a42:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 20d04 <thornton_dbl+0x35c>
   20a46:	2100      	movs	r1, #0
   20a48:	f04f 0800 	mov.w	r8, #0
   20a4c:	b20a      	sxth	r2, r1
   20a4e:	455a      	cmp	r2, fp
   20a50:	f2c0 81a3 	blt.w	20d9a <thornton_dbl+0x3f2>
   20a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20a56:	f04f 0000 	mov.w	r0, #0
   20a5a:	f363 0000 	bfi	r0, r3, #0, #1
   20a5e:	3774      	adds	r7, #116	; 0x74
   20a60:	46bd      	mov	sp, r7
   20a62:	ecbd 8b02 	vpop	{d8}
   20a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a6a:	e8f5 8902 	ldrd	r8, r9, [r5], #8
   20a6e:	e8e4 8902 	strd	r8, r9, [r4], #8
   20a72:	3201      	adds	r2, #1
   20a74:	b296      	uxth	r6, r2
   20a76:	45b3      	cmp	fp, r6
   20a78:	d8f7      	bhi.n	20a6a <thornton_dbl+0xc2>
   20a7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   20a7c:	3101      	adds	r1, #1
   20a7e:	4413      	add	r3, r2
   20a80:	e7a5      	b.n	209ce <thornton_dbl+0x26>
   20a82:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20a86:	18c5      	adds	r5, r0, r3
   20a88:	18d4      	adds	r4, r2, r3
   20a8a:	2200      	movs	r2, #0
   20a8c:	e7f2      	b.n	20a74 <thornton_dbl+0xcc>
   20a8e:	fb0b f303 	mul.w	r3, fp, r3
   20a92:	191d      	adds	r5, r3, r4
   20a94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20a98:	3501      	adds	r5, #1
   20a9a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
   20a9e:	663a      	str	r2, [r7, #96]	; 0x60
   20aa0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20aa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20aa8:	653b      	str	r3, [r7, #80]	; 0x50
   20aaa:	4626      	mov	r6, r4
   20aac:	f04f 0800 	mov.w	r8, #0
   20ab0:	2e00      	cmp	r6, #0
   20ab2:	da02      	bge.n	20aba <thornton_dbl+0x112>
   20ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20ab6:	3301      	adds	r3, #1
   20ab8:	e795      	b.n	209e6 <thornton_dbl+0x3e>
   20aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20abc:	ed13 7b02 	vldr	d7, [r3, #-8]
   20ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20ac2:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
   20ac6:	eb08 0a03 	add.w	sl, r8, r3
   20aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20acc:	f04f 0900 	mov.w	r9, #0
   20ad0:	461d      	mov	r5, r3
   20ad2:	fa0f f389 	sxth.w	r3, r9
   20ad6:	429e      	cmp	r6, r3
   20ad8:	dc0a      	bgt.n	20af0 <thornton_dbl+0x148>
   20ada:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   20ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20ae0:	ed23 7b02 	vstmdb	r3!, {d7}
   20ae4:	3e01      	subs	r6, #1
   20ae6:	663b      	str	r3, [r7, #96]	; 0x60
   20ae8:	b236      	sxth	r6, r6
   20aea:	f1a8 0808 	sub.w	r8, r8, #8
   20aee:	e7df      	b.n	20ab0 <thornton_dbl+0x108>
   20af0:	e9da 2300 	ldrd	r2, r3, [sl]
   20af4:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   20af8:	f003 fdde 	bl	246b8 <__aeabi_dmul>
   20afc:	460b      	mov	r3, r1
   20afe:	4602      	mov	r2, r0
   20b00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   20b04:	f003 fc22 	bl	2434c <__adddf3>
   20b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   20b0a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   20b0e:	f109 0901 	add.w	r9, r9, #1
   20b12:	449a      	add	sl, r3
   20b14:	e7dd      	b.n	20ad2 <thornton_dbl+0x12a>
   20b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20b18:	f8c7 d020 	str.w	sp, [r7, #32]
   20b1c:	ebad 0d03 	sub.w	sp, sp, r3
   20b20:	f8c7 d048 	str.w	sp, [r7, #72]	; 0x48
   20b24:	ebad 0d03 	sub.w	sp, sp, r3
   20b28:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   20b2c:	ebad 0d03 	sub.w	sp, sp, r3
   20b30:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
   20b34:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20b38:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   20b3a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
   20b3c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   20b40:	ebad 0d03 	sub.w	sp, sp, r3
   20b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20b46:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
   20b4a:	4413      	add	r3, r2
   20b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   20b4e:	663b      	str	r3, [r7, #96]	; 0x60
   20b50:	ed87 8b1a 	vstr	d8, [r7, #104]	; 0x68
   20b54:	4623      	mov	r3, r4
   20b56:	4413      	add	r3, r2
   20b58:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   20b5a:	60fb      	str	r3, [r7, #12]
   20b5c:	68fb      	ldr	r3, [r7, #12]
   20b5e:	429c      	cmp	r4, r3
   20b60:	d137      	bne.n	20bd2 <thornton_dbl+0x22a>
   20b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
   20b66:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   20b68:	683d      	ldr	r5, [r7, #0]
   20b6a:	f8d7 a02c 	ldr.w	sl, [r7, #44]	; 0x2c
   20b6e:	189e      	adds	r6, r3, r2
   20b70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   20b72:	4623      	mov	r3, r4
   20b74:	4413      	add	r3, r2
   20b76:	60fb      	str	r3, [r7, #12]
   20b78:	68fb      	ldr	r3, [r7, #12]
   20b7a:	429c      	cmp	r4, r3
   20b7c:	d146      	bne.n	20c0c <thornton_dbl+0x264>
   20b7e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
   20b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20b84:	ec51 0b17 	vmov	r0, r1, d7
   20b88:	ed83 7b00 	vstr	d7, [r3]
   20b8c:	2200      	movs	r2, #0
   20b8e:	4b5c      	ldr	r3, [pc, #368]	; (20d00 <thornton_dbl+0x358>)
   20b90:	f004 f80e 	bl	24bb0 <__aeabi_dcmple>
   20b94:	2800      	cmp	r0, #0
   20b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20b98:	495a      	ldr	r1, [pc, #360]	; (20d04 <thornton_dbl+0x35c>)
   20b9a:	bf18      	it	ne
   20b9c:	2301      	movne	r3, #1
   20b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   20ba0:	2000      	movs	r0, #0
   20ba2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   20ba6:	f003 feb1 	bl	2490c <__aeabi_ddiv>
   20baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20bae:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   20bb2:	fa12 fa83 	uxtah	sl, r2, r3
   20bb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   20bba:	2600      	movs	r6, #0
   20bbc:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
   20bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20bc2:	4553      	cmp	r3, sl
   20bc4:	f000 80d7 	beq.w	20d76 <thornton_dbl+0x3ce>
   20bc8:	f04f 0800 	mov.w	r8, #0
   20bcc:	ec55 4b18 	vmov	r4, r5, d8
   20bd0:	e04f      	b.n	20c72 <thornton_dbl+0x2ca>
   20bd2:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   20bd6:	e9d5 2300 	ldrd	r2, r3, [r5]
   20bda:	e8e4 8902 	strd	r8, r9, [r4], #8
   20bde:	4640      	mov	r0, r8
   20be0:	4649      	mov	r1, r9
   20be2:	f003 fd69 	bl	246b8 <__aeabi_dmul>
   20be6:	4602      	mov	r2, r0
   20be8:	460b      	mov	r3, r1
   20bea:	e8ea 2302 	strd	r2, r3, [sl], #8
   20bee:	4640      	mov	r0, r8
   20bf0:	4649      	mov	r1, r9
   20bf2:	f003 fd61 	bl	246b8 <__aeabi_dmul>
   20bf6:	460b      	mov	r3, r1
   20bf8:	4602      	mov	r2, r0
   20bfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   20bfe:	f003 fba5 	bl	2434c <__adddf3>
   20c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c04:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   20c08:	441d      	add	r5, r3
   20c0a:	e7a7      	b.n	20b5c <thornton_dbl+0x1b4>
   20c0c:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   20c10:	e9d5 2300 	ldrd	r2, r3, [r5]
   20c14:	e8e4 8902 	strd	r8, r9, [r4], #8
   20c18:	4640      	mov	r0, r8
   20c1a:	4649      	mov	r1, r9
   20c1c:	f003 fd4c 	bl	246b8 <__aeabi_dmul>
   20c20:	4602      	mov	r2, r0
   20c22:	460b      	mov	r3, r1
   20c24:	e8ea 2302 	strd	r2, r3, [sl], #8
   20c28:	4640      	mov	r0, r8
   20c2a:	4649      	mov	r1, r9
   20c2c:	f003 fd44 	bl	246b8 <__aeabi_dmul>
   20c30:	460b      	mov	r3, r1
   20c32:	4602      	mov	r2, r0
   20c34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   20c38:	f003 fb88 	bl	2434c <__adddf3>
   20c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c3e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
   20c42:	441d      	add	r5, r3
   20c44:	e798      	b.n	20b78 <thornton_dbl+0x1d0>
   20c46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20c4a:	18f1      	adds	r1, r6, r3
   20c4c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   20c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   20c52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20c56:	e9d3 2300 	ldrd	r2, r3, [r3]
   20c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
   20c5e:	f003 fd2b 	bl	246b8 <__aeabi_dmul>
   20c62:	4602      	mov	r2, r0
   20c64:	460b      	mov	r3, r1
   20c66:	4620      	mov	r0, r4
   20c68:	4629      	mov	r1, r5
   20c6a:	f003 fb6f 	bl	2434c <__adddf3>
   20c6e:	4604      	mov	r4, r0
   20c70:	460d      	mov	r5, r1
   20c72:	fa0f f388 	sxth.w	r3, r8
   20c76:	455b      	cmp	r3, fp
   20c78:	f108 0801 	add.w	r8, r8, #1
   20c7c:	dbe3      	blt.n	20c46 <thornton_dbl+0x29e>
   20c7e:	f04f 0800 	mov.w	r8, #0
   20c82:	fa0f f388 	sxth.w	r3, r8
   20c86:	455b      	cmp	r3, fp
   20c88:	f108 0801 	add.w	r8, r8, #1
   20c8c:	db1d      	blt.n	20cca <thornton_dbl+0x322>
   20c8e:	4620      	mov	r0, r4
   20c90:	4629      	mov	r1, r5
   20c92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   20c96:	f003 fd0f 	bl	246b8 <__aeabi_dmul>
   20c9a:	f04f 0900 	mov.w	r9, #0
   20c9e:	4604      	mov	r4, r0
   20ca0:	460d      	mov	r5, r1
   20ca2:	fa0f f389 	sxth.w	r3, r9
   20ca6:	455b      	cmp	r3, fp
   20ca8:	f109 0901 	add.w	r9, r9, #1
   20cac:	db2c      	blt.n	20d08 <thornton_dbl+0x360>
   20cae:	f04f 0900 	mov.w	r9, #0
   20cb2:	fa0f f389 	sxth.w	r3, r9
   20cb6:	455b      	cmp	r3, fp
   20cb8:	f109 0901 	add.w	r9, r9, #1
   20cbc:	db40      	blt.n	20d40 <thornton_dbl+0x398>
   20cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   20cc0:	e8e3 4502 	strd	r4, r5, [r3], #8
   20cc4:	445e      	add	r6, fp
   20cc6:	663b      	str	r3, [r7, #96]	; 0x60
   20cc8:	e77a      	b.n	20bc0 <thornton_dbl+0x218>
   20cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20ccc:	18f1      	adds	r1, r6, r3
   20cce:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
   20cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   20cd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   20cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
   20ce0:	f003 fcea 	bl	246b8 <__aeabi_dmul>
   20ce4:	4602      	mov	r2, r0
   20ce6:	460b      	mov	r3, r1
   20ce8:	4620      	mov	r0, r4
   20cea:	4629      	mov	r1, r5
   20cec:	f003 fb2e 	bl	2434c <__adddf3>
   20cf0:	4604      	mov	r4, r0
   20cf2:	460d      	mov	r5, r1
   20cf4:	e7c5      	b.n	20c82 <thornton_dbl+0x2da>
   20cf6:	bf00      	nop
	...
   20d00:	3cb00000 	.word	0x3cb00000
   20d04:	3ff00000 	.word	0x3ff00000
   20d08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   20d0c:	61bc      	str	r4, [r7, #24]
   20d0e:	eb06 0803 	add.w	r8, r6, r3
   20d12:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   20d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
   20d18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20d1c:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   20d20:	61fa      	str	r2, [r7, #28]
   20d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   20d26:	e9d3 2300 	ldrd	r2, r3, [r3]
   20d2a:	f003 fcc5 	bl	246b8 <__aeabi_dmul>
   20d2e:	4602      	mov	r2, r0
   20d30:	460b      	mov	r3, r1
   20d32:	e9d8 0100 	ldrd	r0, r1, [r8]
   20d36:	f003 fb09 	bl	2434c <__adddf3>
   20d3a:	e9c8 0100 	strd	r0, r1, [r8]
   20d3e:	e7b0      	b.n	20ca2 <thornton_dbl+0x2fa>
   20d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20d42:	613c      	str	r4, [r7, #16]
   20d44:	eb06 0803 	add.w	r8, r6, r3
   20d48:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   20d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   20d4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20d52:	f105 4200 	add.w	r2, r5, #2147483648	; 0x80000000
   20d56:	617a      	str	r2, [r7, #20]
   20d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   20d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20d60:	f003 fcaa 	bl	246b8 <__aeabi_dmul>
   20d64:	4602      	mov	r2, r0
   20d66:	460b      	mov	r3, r1
   20d68:	e9d8 0100 	ldrd	r0, r1, [r8]
   20d6c:	f003 faee 	bl	2434c <__adddf3>
   20d70:	e9c8 0100 	strd	r0, r1, [r8]
   20d74:	e79d      	b.n	20cb2 <thornton_dbl+0x30a>
   20d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20d78:	68ba      	ldr	r2, [r7, #8]
   20d7a:	f8d7 d020 	ldr.w	sp, [r7, #32]
   20d7e:	3b01      	subs	r3, #1
   20d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   20d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20d84:	eba3 030b 	sub.w	r3, r3, fp
   20d88:	643b      	str	r3, [r7, #64]	; 0x40
   20d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20d8c:	4413      	add	r3, r2
   20d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   20d90:	687a      	ldr	r2, [r7, #4]
   20d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   20d94:	4413      	add	r3, r2
   20d96:	65bb      	str	r3, [r7, #88]	; 0x58
   20d98:	e64e      	b.n	20a38 <thornton_dbl+0x90>
   20d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20d9c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   20da0:	4353      	muls	r3, r2
   20da2:	00db      	lsls	r3, r3, #3
   20da4:	4418      	add	r0, r3
   20da6:	e9d0 4500 	ldrd	r4, r5, [r0]
   20daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   20dac:	4418      	add	r0, r3
   20dae:	e9c0 4500 	strd	r4, r5, [r0]
   20db2:	6d78      	ldr	r0, [r7, #84]	; 0x54
   20db4:	4403      	add	r3, r0
   20db6:	e9c3 8900 	strd	r8, r9, [r3]
   20dba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   20dbe:	fb0b f302 	mul.w	r3, fp, r2
   20dc2:	00db      	lsls	r3, r3, #3
   20dc4:	18c5      	adds	r5, r0, r3
   20dc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
   20dc8:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   20dcc:	4403      	add	r3, r0
   20dce:	2000      	movs	r0, #0
   20dd0:	b206      	sxth	r6, r0
   20dd2:	42b2      	cmp	r2, r6
   20dd4:	dc01      	bgt.n	20dda <thornton_dbl+0x432>
   20dd6:	3101      	adds	r1, #1
   20dd8:	e638      	b.n	20a4c <thornton_dbl+0xa4>
   20dda:	ecb5 7b02 	vldmia	r5!, {d7}
   20dde:	6e7e      	ldr	r6, [r7, #100]	; 0x64
   20de0:	ed84 7b00 	vstr	d7, [r4]
   20de4:	3001      	adds	r0, #1
   20de6:	eca3 6b02 	vstmia	r3!, {d6}
   20dea:	4434      	add	r4, r6
   20dec:	e7f0      	b.n	20dd0 <thornton_dbl+0x428>
   20dee:	bf00      	nop

00020df0 <bierman_dbl>:
   20df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20df4:	ed2d 8b04 	vpush	{d8-d9}
   20df8:	eeb0 8a40 	vmov.f32	s16, s0
   20dfc:	eef0 8a60 	vmov.f32	s17, s1
   20e00:	b095      	sub	sp, #84	; 0x54
   20e02:	af00      	add	r7, sp, #0
   20e04:	4682      	mov	sl, r0
   20e06:	62bb      	str	r3, [r7, #40]	; 0x28
   20e08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
   20e0c:	637b      	str	r3, [r7, #52]	; 0x34
   20e0e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   20e12:	f10b 030e 	add.w	r3, fp, #14
   20e16:	08db      	lsrs	r3, r3, #3
   20e18:	00db      	lsls	r3, r3, #3
   20e1a:	ebad 0d03 	sub.w	sp, sp, r3
   20e1e:	466c      	mov	r4, sp
   20e20:	6079      	str	r1, [r7, #4]
   20e22:	ebad 0d03 	sub.w	sp, sp, r3
   20e26:	61ba      	str	r2, [r7, #24]
   20e28:	2000      	movs	r0, #0
   20e2a:	ec53 2b11 	vmov	r2, r3, d1
   20e2e:	4970      	ldr	r1, [pc, #448]	; (20ff0 <bierman_dbl+0x200>)
   20e30:	f8c7 d044 	str.w	sp, [r7, #68]	; 0x44
   20e34:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
   20e38:	f003 fd68 	bl	2490c <__aeabi_ddiv>
   20e3c:	ed9f 9b6a 	vldr	d9, [pc, #424]	; 20fe8 <bierman_dbl+0x1f8>
   20e40:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   20e44:	eb0a 030b 	add.w	r3, sl, fp
   20e48:	627c      	str	r4, [r7, #36]	; 0x24
   20e4a:	643b      	str	r3, [r7, #64]	; 0x40
   20e4c:	4626      	mov	r6, r4
   20e4e:	2500      	movs	r5, #0
   20e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20e52:	b2ab      	uxth	r3, r5
   20e54:	429a      	cmp	r2, r3
   20e56:	d820      	bhi.n	20e9a <bierman_dbl+0xaa>
   20e58:	f10b 0308 	add.w	r3, fp, #8
   20e5c:	61fb      	str	r3, [r7, #28]
   20e5e:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   20e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20e64:	633b      	str	r3, [r7, #48]	; 0x30
   20e66:	eb04 060b 	add.w	r6, r4, fp
   20e6a:	461d      	mov	r5, r3
   20e6c:	46d0      	mov	r8, sl
   20e6e:	42b4      	cmp	r4, r6
   20e70:	d12e      	bne.n	20ed0 <bierman_dbl+0xe0>
   20e72:	2300      	movs	r3, #0
   20e74:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   20e76:	643b      	str	r3, [r7, #64]	; 0x40
   20e78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   20e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20e7e:	429a      	cmp	r2, r3
   20e80:	d831      	bhi.n	20ee6 <bierman_dbl+0xf6>
   20e82:	687e      	ldr	r6, [r7, #4]
   20e84:	eb06 0a0b 	add.w	sl, r6, fp
   20e88:	4556      	cmp	r6, sl
   20e8a:	f040 8095 	bne.w	20fb8 <bierman_dbl+0x1c8>
   20e8e:	3754      	adds	r7, #84	; 0x54
   20e90:	46bd      	mov	sp, r7
   20e92:	ecbd 8b04 	vpop	{d8-d9}
   20e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e9a:	69bb      	ldr	r3, [r7, #24]
   20e9c:	eca6 9b02 	vstmia	r6!, {d9}
   20ea0:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
   20ea4:	46d0      	mov	r8, sl
   20ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20ea8:	4598      	cmp	r8, r3
   20eaa:	d101      	bne.n	20eb0 <bierman_dbl+0xc0>
   20eac:	3501      	adds	r5, #1
   20eae:	e7cf      	b.n	20e50 <bierman_dbl+0x60>
   20eb0:	e9d9 2300 	ldrd	r2, r3, [r9]
   20eb4:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   20eb8:	f003 fbfe 	bl	246b8 <__aeabi_dmul>
   20ebc:	4602      	mov	r2, r0
   20ebe:	460b      	mov	r3, r1
   20ec0:	e956 0102 	ldrd	r0, r1, [r6, #-8]
   20ec4:	f003 fa42 	bl	2434c <__adddf3>
   20ec8:	44d9      	add	r9, fp
   20eca:	e946 0102 	strd	r0, r1, [r6, #-8]
   20ece:	e7ea      	b.n	20ea6 <bierman_dbl+0xb6>
   20ed0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   20ed4:	e9d8 0100 	ldrd	r0, r1, [r8]
   20ed8:	f003 fbee 	bl	246b8 <__aeabi_dmul>
   20edc:	69fb      	ldr	r3, [r7, #28]
   20ede:	e8e5 0102 	strd	r0, r1, [r5], #8
   20ee2:	4498      	add	r8, r3
   20ee4:	e7c3      	b.n	20e6e <bierman_dbl+0x7e>
   20ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20ee8:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   20eec:	627b      	str	r3, [r7, #36]	; 0x24
   20eee:	f104 0308 	add.w	r3, r4, #8
   20ef2:	623b      	str	r3, [r7, #32]
   20ef4:	4640      	mov	r0, r8
   20ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
   20efa:	4649      	mov	r1, r9
   20efc:	f003 fbdc 	bl	246b8 <__aeabi_dmul>
   20f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20f04:	f003 fa22 	bl	2434c <__adddf3>
   20f08:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   20f0c:	617b      	str	r3, [r7, #20]
   20f0e:	f8c7 8010 	str.w	r8, [r7, #16]
   20f12:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   20f16:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
   20f1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   20f1e:	f003 fbcb 	bl	246b8 <__aeabi_dmul>
   20f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   20f26:	e9c7 0102 	strd	r0, r1, [r7, #8]
   20f2a:	2000      	movs	r0, #0
   20f2c:	4930      	ldr	r1, [pc, #192]	; (20ff0 <bierman_dbl+0x200>)
   20f2e:	f003 fced 	bl	2490c <__aeabi_ddiv>
   20f32:	4602      	mov	r2, r0
   20f34:	460b      	mov	r3, r1
   20f36:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
   20f3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   20f3e:	f003 fbbb 	bl	246b8 <__aeabi_dmul>
   20f42:	4602      	mov	r2, r0
   20f44:	460b      	mov	r3, r1
   20f46:	e9da 0100 	ldrd	r0, r1, [sl]
   20f4a:	f003 fbb5 	bl	246b8 <__aeabi_dmul>
   20f4e:	69bb      	ldr	r3, [r7, #24]
   20f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   20f52:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   20f54:	e9ca 0100 	strd	r0, r1, [sl]
   20f58:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   20f5c:	42a5      	cmp	r5, r4
   20f5e:	d10a      	bne.n	20f76 <bierman_dbl+0x186>
   20f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20f62:	6a3c      	ldr	r4, [r7, #32]
   20f64:	3301      	adds	r3, #1
   20f66:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
   20f6a:	643b      	str	r3, [r7, #64]	; 0x40
   20f6c:	69fb      	ldr	r3, [r7, #28]
   20f6e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   20f72:	449a      	add	sl, r3
   20f74:	e780      	b.n	20e78 <bierman_dbl+0x88>
   20f76:	e9d5 8900 	ldrd	r8, r9, [r5]
   20f7a:	ed96 7b00 	vldr	d7, [r6]
   20f7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20f82:	4640      	mov	r0, r8
   20f84:	4649      	mov	r1, r9
   20f86:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
   20f8a:	f003 fb95 	bl	246b8 <__aeabi_dmul>
   20f8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20f92:	f003 f9db 	bl	2434c <__adddf3>
   20f96:	6a3b      	ldr	r3, [r7, #32]
   20f98:	e9c6 0100 	strd	r0, r1, [r6]
   20f9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   20fa0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   20fa4:	f003 fb88 	bl	246b8 <__aeabi_dmul>
   20fa8:	4642      	mov	r2, r8
   20faa:	464b      	mov	r3, r9
   20fac:	f003 f9ce 	bl	2434c <__adddf3>
   20fb0:	445e      	add	r6, fp
   20fb2:	e8e5 0102 	strd	r0, r1, [r5], #8
   20fb6:	e7d1      	b.n	20f5c <bierman_dbl+0x16c>
   20fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20fba:	e8f3 8902 	ldrd	r8, r9, [r3], #8
   20fbe:	e9d6 4500 	ldrd	r4, r5, [r6]
   20fc2:	633b      	str	r3, [r7, #48]	; 0x30
   20fc4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   20fc8:	ec53 2b18 	vmov	r2, r3, d8
   20fcc:	f003 fb74 	bl	246b8 <__aeabi_dmul>
   20fd0:	4642      	mov	r2, r8
   20fd2:	464b      	mov	r3, r9
   20fd4:	f003 fb70 	bl	246b8 <__aeabi_dmul>
   20fd8:	4622      	mov	r2, r4
   20fda:	462b      	mov	r3, r5
   20fdc:	f003 f9b6 	bl	2434c <__adddf3>
   20fe0:	e8e6 0102 	strd	r0, r1, [r6], #8
   20fe4:	e750      	b.n	20e88 <bierman_dbl+0x98>
   20fe6:	bf00      	nop
	...
   20ff0:	3ff00000 	.word	0x3ff00000

00020ff4 <reset_cb>:
 * @param inst   Pointer to struct uwb_dev.
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   20ff4:	b508      	push	{r3, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   20ff6:	6848      	ldr	r0, [r1, #4]
   20ff8:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
   20ffc:	b10b      	cbz	r3, 21002 <reset_cb+0xe>
        assert(err == DPL_OK);
        SS_STATS_INC(reset);
        return true;
    }
    else
        return false;
   20ffe:	2000      	movs	r0, #0
}
   21000:	bd08      	pop	{r3, pc}
    return (dpl_error_t)os_sem_release(&sem->sem);
   21002:	3064      	adds	r0, #100	; 0x64
   21004:	f7e9 f832 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   21008:	b928      	cbnz	r0, 21016 <reset_cb+0x22>
        SS_STATS_INC(reset);
   2100a:	4a06      	ldr	r2, [pc, #24]	; (21024 <reset_cb+0x30>)
   2100c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2100e:	3301      	adds	r3, #1
   21010:	6253      	str	r3, [r2, #36]	; 0x24
        return true;
   21012:	2001      	movs	r0, #1
   21014:	e7f4      	b.n	21000 <reset_cb+0xc>
        assert(err == DPL_OK);
   21016:	2300      	movs	r3, #0
   21018:	461a      	mov	r2, r3
   2101a:	4619      	mov	r1, r3
   2101c:	4618      	mov	r0, r3
   2101e:	f7e8 f8d1 	bl	91c4 <__assert_func>
   21022:	bf00      	nop
   21024:	200054f8 	.word	0x200054f8

00021028 <rx_error_cb>:
{
   21028:	b508      	push	{r3, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   2102a:	6849      	ldr	r1, [r1, #4]
    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   2102c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   21030:	f648 0341 	movw	r3, #34881	; 0x8841
   21034:	429a      	cmp	r2, r3
   21036:	d115      	bne.n	21064 <rx_error_cb+0x3c>
   21038:	f8b1 306a 	ldrh.w	r3, [r1, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 0){
   2103c:	b10b      	cbz	r3, 21042 <rx_error_cb+0x1a>
    return false;
   2103e:	2000      	movs	r0, #0
   21040:	e011      	b.n	21066 <rx_error_cb+0x3e>
        SS_STATS_INC(rx_error);
   21042:	4a09      	ldr	r2, [pc, #36]	; (21068 <rx_error_cb+0x40>)
   21044:	6953      	ldr	r3, [r2, #20]
   21046:	3301      	adds	r3, #1
   21048:	6153      	str	r3, [r2, #20]
   2104a:	f101 0064 	add.w	r0, r1, #100	; 0x64
   2104e:	f7e9 f80d 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   21052:	b908      	cbnz	r0, 21058 <rx_error_cb+0x30>
        return true;
   21054:	2001      	movs	r0, #1
   21056:	e006      	b.n	21066 <rx_error_cb+0x3e>
        assert(err == DPL_OK);
   21058:	2300      	movs	r3, #0
   2105a:	461a      	mov	r2, r3
   2105c:	4619      	mov	r1, r3
   2105e:	4618      	mov	r0, r3
   21060:	f7e8 f8b0 	bl	91c4 <__assert_func>
        return false;
   21064:	2000      	movs	r0, #0
}
   21066:	bd08      	pop	{r3, pc}
   21068:	200054f8 	.word	0x200054f8

0002106c <rx_timeout_cb>:
{
   2106c:	b570      	push	{r4, r5, r6, lr}
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   2106e:	684e      	ldr	r6, [r1, #4]
   21070:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    if(dpl_sem_get_count(&nrng->sem) == 1)
   21074:	2b01      	cmp	r3, #1
   21076:	d01f      	beq.n	210b8 <rx_timeout_cb+0x4c>
   21078:	4605      	mov	r5, r0
    if(dpl_sem_get_count(&nrng->sem) == 0){
   2107a:	b9fb      	cbnz	r3, 210bc <rx_timeout_cb+0x50>
        SS_STATS_INC(rx_timeout);
   2107c:	4a10      	ldr	r2, [pc, #64]	; (210c0 <rx_timeout_cb+0x54>)
   2107e:	6993      	ldr	r3, [r2, #24]
   21080:	3301      	adds	r3, #1
   21082:	6193      	str	r3, [r2, #24]
        if(!(SLIST_EMPTY(&inst->interface_cbs))){
   21084:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
   21088:	b93c      	cbnz	r4, 2109a <rx_timeout_cb+0x2e>
   2108a:	f106 0064 	add.w	r0, r6, #100	; 0x64
   2108e:	f7e8 ffed 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   21092:	b958      	cbnz	r0, 210ac <rx_timeout_cb+0x40>
    return true;
   21094:	2001      	movs	r0, #1
   21096:	e012      	b.n	210be <rx_timeout_cb+0x52>
            SLIST_FOREACH(cbs, &inst->interface_cbs, next){
   21098:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   2109a:	2c00      	cmp	r4, #0
   2109c:	d0f5      	beq.n	2108a <rx_timeout_cb+0x1e>
            if (cbs!=NULL && cbs->complete_cb)
   2109e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   210a0:	2b00      	cmp	r3, #0
   210a2:	d0f9      	beq.n	21098 <rx_timeout_cb+0x2c>
                if(cbs->complete_cb(inst, cbs)) continue;
   210a4:	4621      	mov	r1, r4
   210a6:	4628      	mov	r0, r5
   210a8:	4798      	blx	r3
   210aa:	e7f5      	b.n	21098 <rx_timeout_cb+0x2c>
        assert(err == DPL_OK);
   210ac:	2300      	movs	r3, #0
   210ae:	461a      	mov	r2, r3
   210b0:	4619      	mov	r1, r3
   210b2:	4618      	mov	r0, r3
   210b4:	f7e8 f886 	bl	91c4 <__assert_func>
        return false;
   210b8:	2000      	movs	r0, #0
   210ba:	e000      	b.n	210be <rx_timeout_cb+0x52>
    return true;
   210bc:	2001      	movs	r0, #1
}
   210be:	bd70      	pop	{r4, r5, r6, pc}
   210c0:	200054f8 	.word	0x200054f8
   210c4:	00000000 	.word	0x00000000

000210c8 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   210c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210cc:	ed2d 8b02 	vpush	{d8}
   210d0:	b087      	sub	sp, #28
    struct nrng_instance * nrng = (struct nrng_instance *)cbs->inst_ptr;
   210d2:	684d      	ldr	r5, [r1, #4]

    if(inst->fctrl != FCNTL_IEEE_RANGE_16)
   210d4:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   210d8:	f648 0341 	movw	r3, #34881	; 0x8841
   210dc:	429a      	cmp	r2, r3
   210de:	f040 81b1 	bne.w	21444 <rx_complete_cb+0x37c>
   210e2:	4604      	mov	r4, r0
   210e4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
        return false;

    if(dpl_sem_get_count(&nrng->sem) == 1){
   210e8:	2b01      	cmp	r3, #1
   210ea:	d022      	beq.n	21132 <rx_complete_cb+0x6a>
        // unsolicited inbound
        SS_STATS_INC(rx_unsolicited);
        return false;
    }

    struct uwb_rng_config * config = nrng_get_config(nrng, UWB_DATA_CODE_SS_TWR_NRNG);
   210ec:	f44f 7198 	mov.w	r1, #304	; 0x130
   210f0:	4628      	mov	r0, r5
   210f2:	f7ea f9a5 	bl	b440 <nrng_get_config>
   210f6:	4680      	mov	r8, r0
    nrng_request_frame_t * _frame = (nrng_request_frame_t * )inst->rxbuf;
   210f8:	f8d4 64fc 	ldr.w	r6, [r4, #1276]	; 0x4fc

    if (_frame->dst_address != inst->my_short_address && _frame->dst_address != UWB_BROADCAST_ADDRESS)
   210fc:	f8b6 3005 	ldrh.w	r3, [r6, #5]
   21100:	f8b4 24b6 	ldrh.w	r2, [r4, #1206]	; 0x4b6
   21104:	4293      	cmp	r3, r2
   21106:	d004      	beq.n	21112 <rx_complete_cb+0x4a>
   21108:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2110c:	4293      	cmp	r3, r2
   2110e:	f040 819f 	bne.w	21450 <rx_complete_cb+0x388>
        return true;

    SS_STATS_INC(rx_complete);
   21112:	4acb      	ldr	r2, [pc, #812]	; (21440 <rx_complete_cb+0x378>)
   21114:	69d3      	ldr	r3, [r2, #28]
   21116:	3301      	adds	r3, #1
   21118:	61d3      	str	r3, [r2, #28]

    switch(_frame->code){
   2111a:	f8b6 3009 	ldrh.w	r3, [r6, #9]
   2111e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   21122:	d00c      	beq.n	2113e <rx_complete_cb+0x76>
   21124:	f240 1231 	movw	r2, #305	; 0x131
   21128:	4293      	cmp	r3, r2
   2112a:	f000 80f4 	beq.w	21316 <rx_complete_cb+0x24e>
   2112e:	2000      	movs	r0, #0
   21130:	e189      	b.n	21446 <rx_complete_cb+0x37e>
        SS_STATS_INC(rx_unsolicited);
   21132:	4ac3      	ldr	r2, [pc, #780]	; (21440 <rx_complete_cb+0x378>)
   21134:	6a13      	ldr	r3, [r2, #32]
   21136:	3301      	adds	r3, #1
   21138:	6213      	str	r3, [r2, #32]
        return false;
   2113a:	2000      	movs	r0, #0
   2113c:	e183      	b.n	21446 <rx_complete_cb+0x37e>
        case UWB_DATA_CODE_SS_TWR_NRNG:
            {
                // This code executes on the device that is responding to a request
                DIAGMSG("{\"utime\": %lu,\"msg\": \"UWB_DATA_CODE_SS_TWR_NRNG\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
                if (inst->frame_len < sizeof(nrng_request_frame_t))
   2113e:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   21142:	2b12      	cmp	r3, #18
   21144:	f240 8186 	bls.w	21454 <rx_complete_cb+0x38c>
                    break;
                uint16_t slot_idx;
#if MYNEWT_VAL(CELL_ENABLED)
                if (_frame->ptype != PTYPE_CELL)
   21148:	7af3      	ldrb	r3, [r6, #11]
   2114a:	f013 0f03 	tst.w	r3, #3
   2114e:	f040 8183 	bne.w	21458 <rx_complete_cb+0x390>
                    break;
                if (_frame->cell_id != inst->cell_id)
   21152:	7bf3      	ldrb	r3, [r6, #15]
   21154:	7c32      	ldrb	r2, [r6, #16]
   21156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2115a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2115e:	f8b4 24c4 	ldrh.w	r2, [r4, #1220]	; 0x4c4
   21162:	4293      	cmp	r3, r2
   21164:	d001      	beq.n	2116a <rx_complete_cb+0xa2>
            }
        default:
                return false;
            break;
        }
    return true;
   21166:	2001      	movs	r0, #1
   21168:	e16d      	b.n	21446 <rx_complete_cb+0x37e>
                if (_frame->slot_mask & (1UL << inst->slot_id))
   2116a:	7c33      	ldrb	r3, [r6, #16]
   2116c:	7c70      	ldrb	r0, [r6, #17]
   2116e:	0080      	lsls	r0, r0, #2
   21170:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
   21174:	7cb3      	ldrb	r3, [r6, #18]
   21176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2117a:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   2117e:	f8b4 14c2 	ldrh.w	r1, [r4, #1218]	; 0x4c2
   21182:	fa20 f301 	lsr.w	r3, r0, r1
   21186:	f013 0f01 	tst.w	r3, #1
   2118a:	d101      	bne.n	21190 <rx_complete_cb+0xc8>
    return true;
   2118c:	2001      	movs	r0, #1
   2118e:	e15a      	b.n	21446 <rx_complete_cb+0x37e>
                    slot_idx = BitIndex(_frame->slot_mask, 1UL << inst->slot_id, SLOT_POSITION);
   21190:	f04f 0b01 	mov.w	fp, #1
   21194:	465a      	mov	r2, fp
   21196:	fa0b f101 	lsl.w	r1, fp, r1
   2119a:	f7ee ffe3 	bl	10164 <BitIndex>
   2119e:	9001      	str	r0, [sp, #4]
   211a0:	f8bd 9004 	ldrh.w	r9, [sp, #4]
                nrng_final_frame_t * frame = (nrng_final_frame_t *) nrng->frames[(++nrng->idx)%nrng->nframes];
   211a4:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
   211a8:	445b      	add	r3, fp
   211aa:	b29b      	uxth	r3, r3
   211ac:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
   211b0:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
   211b4:	fbb3 f1f2 	udiv	r1, r3, r2
   211b8:	fb02 3311 	mls	r3, r2, r1, r3
   211bc:	b29b      	uxth	r3, r3
   211be:	3332      	adds	r3, #50	; 0x32
   211c0:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
                memcpy(frame->array, inst->rxbuf, sizeof(nrng_request_frame_t));
   211c4:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
   211c8:	f8d3 c000 	ldr.w	ip, [r3]
   211cc:	6858      	ldr	r0, [r3, #4]
   211ce:	6899      	ldr	r1, [r3, #8]
   211d0:	68da      	ldr	r2, [r3, #12]
   211d2:	f8c7 c000 	str.w	ip, [r7]
   211d6:	6078      	str	r0, [r7, #4]
   211d8:	60b9      	str	r1, [r7, #8]
   211da:	60fa      	str	r2, [r7, #12]
   211dc:	8a1a      	ldrh	r2, [r3, #16]
   211de:	7c9b      	ldrb	r3, [r3, #18]
   211e0:	823a      	strh	r2, [r7, #16]
   211e2:	74bb      	strb	r3, [r7, #18]
                uint64_t request_timestamp = inst->rxtimestamp;
   211e4:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
   211e8:	9202      	str	r2, [sp, #8]
   211ea:	f8d4 34ec 	ldr.w	r3, [r4, #1260]	; 0x4ec
   211ee:	9303      	str	r3, [sp, #12]
                            + (((uint64_t)config->tx_holdoff_delay
   211f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   211f4:	9104      	str	r1, [sp, #16]
   211f6:	f04f 0a00 	mov.w	sl, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   211fa:	f8d8 8008 	ldr.w	r8, [r8, #8]
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   211fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   21202:	2114      	movs	r1, #20
   21204:	4620      	mov	r0, r4
   21206:	4798      	blx	r3
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   21208:	f003 f9ec 	bl	245e4 <__aeabi_i2d>
   2120c:	a388      	add	r3, pc, #544	; (adr r3, 21430 <rx_complete_cb+0x368>)
   2120e:	e9d3 2300 	ldrd	r2, r3, [r3]
   21212:	f003 fb7b 	bl	2490c <__aeabi_ddiv>
   21216:	f003 ff45 	bl	250a4 <__aeabi_d2ulz>
   2121a:	eb18 0300 	adds.w	r3, r8, r0
   2121e:	f141 0100 	adc.w	r1, r1, #0
                            + (uint64_t)(slot_idx * ((uint64_t)config->tx_guard_delay
   21222:	fba9 8303 	umull	r8, r3, r9, r3
   21226:	fb09 3901 	mla	r9, r9, r1, r3
   2122a:	9904      	ldr	r1, [sp, #16]
   2122c:	eb11 0808 	adds.w	r8, r1, r8
   21230:	f149 0900 	adc.w	r9, r9, #0
                            + (uint64_t)(uwb_usecs_to_dwt_usecs(uwb_phy_frame_duration(inst, sizeof(nrng_response_frame_t)))))))<< 16);
   21234:	ea4f 4909 	mov.w	r9, r9, lsl #16
   21238:	ea49 4918 	orr.w	r9, r9, r8, lsr #16
   2123c:	ea4f 4808 	mov.w	r8, r8, lsl #16
                uint64_t response_tx_delay = request_timestamp
   21240:	9a02      	ldr	r2, [sp, #8]
   21242:	eb18 0802 	adds.w	r8, r8, r2
   21246:	9b03      	ldr	r3, [sp, #12]
   21248:	eb49 0903 	adc.w	r9, r9, r3
                uint64_t response_timestamp = (response_tx_delay & 0xFFFFFFFE00UL) + inst->tx_antenna_delay;
   2124c:	f428 73ff 	bic.w	r3, r8, #510	; 0x1fe
   21250:	f023 0301 	bic.w	r3, r3, #1
   21254:	f009 01ff 	and.w	r1, r9, #255	; 0xff
   21258:	f8b4 24ce 	ldrh.w	r2, [r4, #1230]	; 0x4ce
   2125c:	1898      	adds	r0, r3, r2
   2125e:	9004      	str	r0, [sp, #16]
   21260:	f141 0100 	adc.w	r1, r1, #0
   21264:	9105      	str	r1, [sp, #20]
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   21266:	4659      	mov	r1, fp
   21268:	4620      	mov	r0, r4
   2126a:	f7e7 fd88 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   2126e:	f8d0 b068 	ldr.w	fp, [r0, #104]	; 0x68
                frame->reception_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, request_timestamp)) & 0xFFFFFFFFULL;
   21272:	9a02      	ldr	r2, [sp, #8]
   21274:	9b03      	ldr	r3, [sp, #12]
   21276:	4658      	mov	r0, fp
   21278:	f7ef f876 	bl	10368 <uwb_wcs_local_to_master>
   2127c:	f8c7 000b 	str.w	r0, [r7, #11]
                frame->transmission_timestamp = (uint32_t)(uwb_wcs_local_to_master(wcs, response_timestamp)) & 0xFFFFFFFFULL;
   21280:	9a04      	ldr	r2, [sp, #16]
   21282:	9b05      	ldr	r3, [sp, #20]
   21284:	4658      	mov	r0, fp
   21286:	f7ef f86f 	bl	10368 <uwb_wcs_local_to_master>
   2128a:	f8c7 000f 	str.w	r0, [r7, #15]
                frame->dst_address = _frame->src_address;
   2128e:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   21292:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   21296:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   2129a:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_T1;
   2129e:	2331      	movs	r3, #49	; 0x31
   212a0:	727b      	strb	r3, [r7, #9]
   212a2:	2301      	movs	r3, #1
   212a4:	72bb      	strb	r3, [r7, #10]
                frame->slot_id = slot_idx;
   212a6:	9b01      	ldr	r3, [sp, #4]
   212a8:	74fb      	strb	r3, [r7, #19]
                frame->seq_num = _frame->seq_num;
   212aa:	78b3      	ldrb	r3, [r6, #2]
   212ac:	70bb      	strb	r3, [r7, #2]
                frame->carrier_integrator  = 0.0l;
   212ae:	f887 a01c 	strb.w	sl, [r7, #28]
   212b2:	f887 a01d 	strb.w	sl, [r7, #29]
   212b6:	f887 a01e 	strb.w	sl, [r7, #30]
   212ba:	f887 a01f 	strb.w	sl, [r7, #31]
    return (dev->uw_funcs->uf_write_tx(dev, tx_frame_bytes, tx_buffer_offset, tx_frame_length));
   212be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212c0:	6c5e      	ldr	r6, [r3, #68]	; 0x44
   212c2:	2314      	movs	r3, #20
   212c4:	4652      	mov	r2, sl
   212c6:	4639      	mov	r1, r7
   212c8:	4620      	mov	r0, r4
   212ca:	47b0      	blx	r6
    return (dev->uw_funcs->uf_write_tx_fctrl_ext(dev, tx_frame_length, tx_buffer_offset, 0));
   212cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212ce:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   212d0:	4653      	mov	r3, sl
   212d2:	4652      	mov	r2, sl
   212d4:	2114      	movs	r1, #20
   212d6:	4620      	mov	r0, r4
   212d8:	47b0      	blx	r6
    return (dev->uw_funcs->uf_set_wait4resp(dev, enable));
   212da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   212de:	4651      	mov	r1, sl
   212e0:	4620      	mov	r0, r4
   212e2:	4798      	blx	r3
    return (dev->uw_funcs->uf_set_delay_start(dev, dx_time));
   212e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   212e8:	4642      	mov	r2, r8
   212ea:	464b      	mov	r3, r9
   212ec:	4620      	mov	r0, r4
   212ee:	4788      	blx	r1
    return (dev->uw_funcs->uf_start_tx(dev));
   212f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   212f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   212f4:	4620      	mov	r0, r4
   212f6:	4798      	blx	r3
                if (uwb_start_tx(inst).start_tx_error){
   212f8:	f010 0f04 	tst.w	r0, #4
   212fc:	d005      	beq.n	2130a <rx_complete_cb+0x242>
   212fe:	f105 0064 	add.w	r0, r5, #100	; 0x64
   21302:	f7e8 feb3 	bl	a06c <os_sem_release>
    return true;
   21306:	2001      	movs	r0, #1
   21308:	e09d      	b.n	21446 <rx_complete_cb+0x37e>
   2130a:	f105 0064 	add.w	r0, r5, #100	; 0x64
   2130e:	f7e8 fead 	bl	a06c <os_sem_release>
   21312:	2001      	movs	r0, #1
   21314:	e097      	b.n	21446 <rx_complete_cb+0x37e>
                if (inst->frame_len < sizeof(nrng_response_frame_t))
   21316:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   2131a:	2b13      	cmp	r3, #19
   2131c:	f240 809e 	bls.w	2145c <rx_complete_cb+0x394>
                uint16_t idx = _frame->slot_id;
   21320:	f896 9013 	ldrb.w	r9, [r6, #19]
   21324:	fa1f fa89 	uxth.w	sl, r9
                if (nrng->seq_num != _frame->seq_num)
   21328:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
   2132c:	78b3      	ldrb	r3, [r6, #2]
   2132e:	429a      	cmp	r2, r3
   21330:	d001      	beq.n	21336 <rx_complete_cb+0x26e>
    return true;
   21332:	2001      	movs	r0, #1
   21334:	e087      	b.n	21446 <rx_complete_cb+0x37e>
                nrng_frame_t * frame = nrng->frames[(nrng->idx + idx)%nrng->nframes];
   21336:	f8b5 30c0 	ldrh.w	r3, [r5, #192]	; 0xc0
   2133a:	444b      	add	r3, r9
   2133c:	f8b5 2044 	ldrh.w	r2, [r5, #68]	; 0x44
   21340:	fb93 f1f2 	sdiv	r1, r3, r2
   21344:	fb02 3311 	mls	r3, r2, r1, r3
   21348:	3332      	adds	r3, #50	; 0x32
   2134a:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
                memcpy(frame, inst->rxbuf, sizeof(nrng_response_frame_t));
   2134e:	6833      	ldr	r3, [r6, #0]
   21350:	6870      	ldr	r0, [r6, #4]
   21352:	68b1      	ldr	r1, [r6, #8]
   21354:	68f2      	ldr	r2, [r6, #12]
   21356:	603b      	str	r3, [r7, #0]
   21358:	6078      	str	r0, [r7, #4]
   2135a:	60b9      	str	r1, [r7, #8]
   2135c:	60fa      	str	r2, [r7, #12]
   2135e:	6933      	ldr	r3, [r6, #16]
   21360:	613b      	str	r3, [r7, #16]
                if (inst->status.lde_error == 0)
   21362:	f894 3509 	ldrb.w	r3, [r4, #1289]	; 0x509
   21366:	f013 0f04 	tst.w	r3, #4
   2136a:	d14c      	bne.n	21406 <rx_complete_cb+0x33e>
                   response_timestamp = inst->rxtimestamp;
   2136c:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
   21370:	ed13 8b02 	vldr	d8, [r3, #-8]
                struct uwb_ccp_instance *ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(inst, UWBEXT_CCP);
   21374:	2101      	movs	r1, #1
   21376:	4620      	mov	r0, r4
   21378:	f7e7 fd01 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
                struct uwb_wcs_instance * wcs = ccp->wcs;
   2137c:	6e86      	ldr	r6, [r0, #104]	; 0x68
    return (dev->uw_funcs->uf_read_txtime(dev));
   2137e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   21382:	4620      	mov	r0, r4
   21384:	4798      	blx	r3
   21386:	4602      	mov	r2, r0
   21388:	460b      	mov	r3, r1
                frame->request_timestamp = uwb_wcs_local_to_master(wcs, uwb_read_txtime(inst)) & 0xFFFFFFFFULL;
   2138a:	4630      	mov	r0, r6
   2138c:	f7ee ffec 	bl	10368 <uwb_wcs_local_to_master>
   21390:	6178      	str	r0, [r7, #20]
                frame->response_timestamp = uwb_wcs_local_to_master(wcs, response_timestamp) & 0xFFFFFFFFULL;
   21392:	ec53 2b18 	vmov	r2, r3, d8
   21396:	4630      	mov	r0, r6
   21398:	f7ee ffe6 	bl	10368 <uwb_wcs_local_to_master>
   2139c:	61b8      	str	r0, [r7, #24]
                frame->dst_address = frame->src_address;
   2139e:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   213a2:	f8a7 3005 	strh.w	r3, [r7, #5]
                frame->src_address = inst->my_short_address;
   213a6:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   213aa:	f8a7 3007 	strh.w	r3, [r7, #7]
                frame->code = UWB_DATA_CODE_SS_TWR_NRNG_FINAL;
   213ae:	2300      	movs	r3, #0
   213b0:	2232      	movs	r2, #50	; 0x32
   213b2:	727a      	strb	r2, [r7, #9]
   213b4:	2201      	movs	r2, #1
   213b6:	72ba      	strb	r2, [r7, #10]
                frame->carrier_integrator  = 0.0l;
   213b8:	773b      	strb	r3, [r7, #28]
   213ba:	777b      	strb	r3, [r7, #29]
   213bc:	77bb      	strb	r3, [r7, #30]
   213be:	77fb      	strb	r3, [r7, #31]
                if(inst->config.rxdiag_enable) {
   213c0:	f894 352c 	ldrb.w	r3, [r4, #1324]	; 0x52c
   213c4:	f013 0f40 	tst.w	r3, #64	; 0x40
   213c8:	d120      	bne.n	2140c <rx_complete_cb+0x344>
                if(idx == nrng->nnodes-1){
   213ca:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
   213ce:	1e5a      	subs	r2, r3, #1
   213d0:	4591      	cmp	r9, r2
   213d2:	d023      	beq.n	2141c <rx_complete_cb+0x354>
                    uint16_t timeout = usecs_to_response(inst,
   213d4:	eba3 030a 	sub.w	r3, r3, sl
   213d8:	b29d      	uxth	r5, r3
    return (dev->uw_funcs->uf_phy_frame_duration(dev, nlen));
   213da:	6a63      	ldr	r3, [r4, #36]	; 0x24
   213dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   213de:	2114      	movs	r1, #20
   213e0:	4620      	mov	r0, r4
   213e2:	4798      	blx	r3
   213e4:	4603      	mov	r3, r0
   213e6:	4642      	mov	r2, r8
   213e8:	4629      	mov	r1, r5
   213ea:	4620      	mov	r0, r4
   213ec:	f7ea f95c 	bl	b6a8 <usecs_to_response>
                            ) + config->rx_timeout_delay;          // TOF allowance.
   213f0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
                    uint16_t timeout = usecs_to_response(inst,
   213f4:	fa11 f180 	uxtah	r1, r1, r0
    return (dev->uw_funcs->uf_set_rx_timeout(dev, to));
   213f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   213fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   213fc:	b289      	uxth	r1, r1
   213fe:	4620      	mov	r0, r4
   21400:	4798      	blx	r3
    return true;
   21402:	2001      	movs	r0, #1
   21404:	e01f      	b.n	21446 <rx_complete_cb+0x37e>
                uint64_t response_timestamp = 0x0;
   21406:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 21438 <rx_complete_cb+0x370>
   2140a:	e7b3      	b.n	21374 <rx_complete_cb+0x2ac>
                    memcpy(&frame->diag, inst->rxdiag, inst->rxdiag->rxd_len);
   2140c:	f8d4 14f8 	ldr.w	r1, [r4, #1272]	; 0x4f8
   21410:	880a      	ldrh	r2, [r1, #0]
   21412:	f107 0020 	add.w	r0, r7, #32
   21416:	f7ef f923 	bl	10660 <memcpy>
   2141a:	e7d6      	b.n	213ca <rx_complete_cb+0x302>
   2141c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21420:	2101      	movs	r1, #1
   21422:	4620      	mov	r0, r4
   21424:	4798      	blx	r3
    return true;
   21426:	2001      	movs	r0, #1
   21428:	e00d      	b.n	21446 <rx_complete_cb+0x37e>
   2142a:	bf00      	nop
   2142c:	f3af 8000 	nop.w
   21430:	90690691 	.word	0x90690691
   21434:	3ff06906 	.word	0x3ff06906
	...
   21440:	200054f8 	.word	0x200054f8
        return false;
   21444:	2000      	movs	r0, #0
}
   21446:	b007      	add	sp, #28
   21448:	ecbd 8b02 	vpop	{d8}
   2144c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return true;
   21450:	2001      	movs	r0, #1
   21452:	e7f8      	b.n	21446 <rx_complete_cb+0x37e>
    return true;
   21454:	2001      	movs	r0, #1
   21456:	e7f6      	b.n	21446 <rx_complete_cb+0x37e>
   21458:	2001      	movs	r0, #1
   2145a:	e7f4      	b.n	21446 <rx_complete_cb+0x37e>
   2145c:	2001      	movs	r0, #1
   2145e:	e7f2      	b.n	21446 <rx_complete_cb+0x37e>

00021460 <twr_ss_nrng_pkg_init>:
{
   21460:	b530      	push	{r4, r5, lr}
   21462:	b083      	sub	sp, #12
    printf("{\"utime\": %lu,\"msg\": \"ss_nrng_pkg_init\"}\n",os_cputime_ticks_to_usecs(os_cputime_get32()));
   21464:	f7e8 f8f8 	bl	9658 <os_cputime_get32>
   21468:	4601      	mov	r1, r0
   2146a:	4817      	ldr	r0, [pc, #92]	; (214c8 <twr_ss_nrng_pkg_init+0x68>)
   2146c:	f7ef fd1e 	bl	10eac <printf>
    udev = uwb_dev_idx_lookup(0);
   21470:	2000      	movs	r0, #0
   21472:	f7e7 fbff 	bl	8c74 <uwb_dev_idx_lookup>
   21476:	4605      	mov	r5, r0
    struct nrng_instance *nrng = (struct nrng_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_NRNG);
   21478:	210b      	movs	r1, #11
   2147a:	f7e7 fc80 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
   2147e:	4604      	mov	r4, r0
    g_cbs.inst_ptr = nrng;
   21480:	4912      	ldr	r1, [pc, #72]	; (214cc <twr_ss_nrng_pkg_init+0x6c>)
   21482:	6048      	str	r0, [r1, #4]
    uwb_mac_append_interface(udev, &g_cbs);
   21484:	4628      	mov	r0, r5
   21486:	f7e7 fc25 	bl	8cd4 <uwb_mac_append_interface>
    nrng_append_config(nrng, &g_rng_cfgs);
   2148a:	4911      	ldr	r1, [pc, #68]	; (214d0 <twr_ss_nrng_pkg_init+0x70>)
   2148c:	4620      	mov	r0, r4
   2148e:	f7e9 ffe9 	bl	b464 <nrng_append_config>
    int rc = stats_init(
   21492:	2205      	movs	r2, #5
   21494:	9200      	str	r2, [sp, #0]
   21496:	4b0f      	ldr	r3, [pc, #60]	; (214d4 <twr_ss_nrng_pkg_init+0x74>)
   21498:	2104      	movs	r1, #4
   2149a:	480f      	ldr	r0, [pc, #60]	; (214d8 <twr_ss_nrng_pkg_init+0x78>)
   2149c:	f7f4 fe52 	bl	16144 <stats_init>
    assert(rc == 0);
   214a0:	b930      	cbnz	r0, 214b0 <twr_ss_nrng_pkg_init+0x50>
    rc = stats_register("twr_ss_nrng", STATS_HDR(g_twr_ss_nrng_stat));
   214a2:	490d      	ldr	r1, [pc, #52]	; (214d8 <twr_ss_nrng_pkg_init+0x78>)
   214a4:	480d      	ldr	r0, [pc, #52]	; (214dc <twr_ss_nrng_pkg_init+0x7c>)
   214a6:	f7f4 fed1 	bl	1624c <stats_register>
    assert(rc == 0);
   214aa:	b938      	cbnz	r0, 214bc <twr_ss_nrng_pkg_init+0x5c>
}
   214ac:	b003      	add	sp, #12
   214ae:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   214b0:	2300      	movs	r3, #0
   214b2:	461a      	mov	r2, r3
   214b4:	4619      	mov	r1, r3
   214b6:	4618      	mov	r0, r3
   214b8:	f7e7 fe84 	bl	91c4 <__assert_func>
    assert(rc == 0);
   214bc:	2300      	movs	r3, #0
   214be:	461a      	mov	r2, r3
   214c0:	4619      	mov	r1, r3
   214c2:	4618      	mov	r0, r3
   214c4:	f7e7 fe7e 	bl	91c4 <__assert_func>
   214c8:	00028c70 	.word	0x00028c70
   214cc:	20001238 	.word	0x20001238
   214d0:	20001284 	.word	0x20001284
   214d4:	00028ca8 	.word	0x00028ca8
   214d8:	200054f8 	.word	0x200054f8
   214dc:	00028c9c 	.word	0x00028c9c

000214e0 <reset_cb>:
 *
 * @return true on sucess
 */
static bool
reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   214e0:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   214e2:	684c      	ldr	r4, [r1, #4]
   214e4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
   214e8:	b10b      	cbz	r3, 214ee <reset_cb+0xe>
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
        return true;
    }
    else
        return false;
   214ea:	2000      	movs	r0, #0
}
   214ec:	bd10      	pop	{r4, pc}
   214ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
   214f2:	f7e8 fdbb 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   214f6:	b978      	cbnz	r0, 21518 <reset_cb+0x38>
        RNG_STATS_INC(reset);
   214f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   214fa:	3301      	adds	r3, #1
   214fc:	6463      	str	r3, [r4, #68]	; 0x44
        rng->status.rx_ack_expected = 0;
   214fe:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   21502:	f36f 1345 	bfc	r3, #5, #1
   21506:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
   2150a:	b2db      	uxtb	r3, r3
   2150c:	f36f 1304 	bfc	r3, #4, #1
   21510:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        return true;
   21514:	2001      	movs	r0, #1
   21516:	e7e9      	b.n	214ec <reset_cb+0xc>
        assert(err == DPL_OK);
   21518:	2300      	movs	r3, #0
   2151a:	461a      	mov	r2, r3
   2151c:	4619      	mov	r1, r3
   2151e:	4618      	mov	r0, r3
   21520:	f7e7 fe50 	bl	91c4 <__assert_func>

00021524 <rx_timeout_cb>:
{
   21524:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   21526:	684c      	ldr	r4, [r1, #4]
   21528:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1)
   2152c:	2b01      	cmp	r3, #1
   2152e:	d01a      	beq.n	21566 <rx_timeout_cb+0x42>
    if(dpl_sem_get_count(&rng->sem) == 0){
   21530:	b10b      	cbz	r3, 21536 <rx_timeout_cb+0x12>
    return false;
   21532:	2000      	movs	r0, #0
}
   21534:	bd10      	pop	{r4, pc}
   21536:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2153a:	f7e8 fd97 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   2153e:	b960      	cbnz	r0, 2155a <rx_timeout_cb+0x36>
        RNG_STATS_INC(rx_timeout);
   21540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21542:	3301      	adds	r3, #1
   21544:	63e3      	str	r3, [r4, #60]	; 0x3c
        switch(rng->code){
   21546:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   2154a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
   2154e:	2a18      	cmp	r2, #24
   21550:	d80b      	bhi.n	2156a <rx_timeout_cb+0x46>
                    RNG_STATS_INC(rx_timeout);
   21552:	3301      	adds	r3, #1
   21554:	63e3      	str	r3, [r4, #60]	; 0x3c
                    return true;
   21556:	2001      	movs	r0, #1
   21558:	e7ec      	b.n	21534 <rx_timeout_cb+0x10>
        assert(err == DPL_OK);
   2155a:	2300      	movs	r3, #0
   2155c:	461a      	mov	r2, r3
   2155e:	4619      	mov	r1, r3
   21560:	4618      	mov	r0, r3
   21562:	f7e7 fe2f 	bl	91c4 <__assert_func>
        return false;
   21566:	2000      	movs	r0, #0
   21568:	e7e4      	b.n	21534 <rx_timeout_cb+0x10>
                return false;
   2156a:	2000      	movs	r0, #0
   2156c:	e7e2      	b.n	21534 <rx_timeout_cb+0x10>
	...

00021570 <superframe_reset_cb>:
 *
 * @return true on sucess
 */
static bool
superframe_reset_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   21570:	b510      	push	{r4, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   21572:	684c      	ldr	r4, [r1, #4]
   21574:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 0){
   21578:	b10b      	cbz	r3, 2157e <superframe_reset_cb+0xe>
               dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
        rng->status.rx_ack_expected = 0;
        rng->status.tx_ack_expected = 0;
    }
    return false;
}
   2157a:	2000      	movs	r0, #0
   2157c:	bd10      	pop	{r4, pc}
   2157e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   21582:	f7e8 fd73 	bl	a06c <os_sem_release>
        assert(err == DPL_OK);
   21586:	b9a0      	cbnz	r0, 215b2 <superframe_reset_cb+0x42>
        RNG_STATS_INC(superframe_reset);
   21588:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2158a:	3301      	adds	r3, #1
   2158c:	64a3      	str	r3, [r4, #72]	; 0x48
        printf("{\"utime\": %"PRIu32",\"msg\": \"superframe_reset\"}\n",
   2158e:	f7f1 f99c 	bl	128ca <dpl_cputime_get32>
   21592:	4601      	mov	r1, r0
   21594:	480a      	ldr	r0, [pc, #40]	; (215c0 <superframe_reset_cb+0x50>)
   21596:	f7ef fc89 	bl	10eac <printf>
        rng->status.rx_ack_expected = 0;
   2159a:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   2159e:	f36f 1345 	bfc	r3, #5, #1
   215a2:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        rng->status.tx_ack_expected = 0;
   215a6:	b2db      	uxtb	r3, r3
   215a8:	f36f 1304 	bfc	r3, #4, #1
   215ac:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
   215b0:	e7e3      	b.n	2157a <superframe_reset_cb+0xa>
        assert(err == DPL_OK);
   215b2:	2300      	movs	r3, #0
   215b4:	461a      	mov	r2, r3
   215b6:	4619      	mov	r1, r3
   215b8:	4618      	mov	r0, r3
   215ba:	f7e7 fe03 	bl	91c4 <__assert_func>
   215be:	bf00      	nop
   215c0:	00028cc8 	.word	0x00028cc8

000215c4 <uwb_rng_free>:
{
   215c4:	b508      	push	{r3, lr}
    assert(rng);
   215c6:	b158      	cbz	r0, 215e0 <uwb_rng_free+0x1c>
    if (rng->status.selfmalloc)
   215c8:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   215cc:	f012 0f01 	tst.w	r2, #1
   215d0:	d10c      	bne.n	215ec <uwb_rng_free+0x28>
        rng->status.initialized = 0;
   215d2:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
   215d6:	f36f 0241 	bfc	r2, #1, #1
   215da:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
}
   215de:	bd08      	pop	{r3, pc}
    assert(rng);
   215e0:	2300      	movs	r3, #0
   215e2:	461a      	mov	r2, r3
   215e4:	4619      	mov	r1, r3
   215e6:	4618      	mov	r0, r3
   215e8:	f7e7 fdec 	bl	91c4 <__assert_func>
        free(rng);
   215ec:	f7ee fffe 	bl	105ec <free>
   215f0:	e7f5      	b.n	215de <uwb_rng_free+0x1a>

000215f2 <uwb_rng_config>:
uwb_rng_config(struct uwb_rng_instance * rng, struct uwb_rng_config * config){
   215f2:	b508      	push	{r3, lr}
    assert(config);
   215f4:	b171      	cbz	r1, 21614 <uwb_rng_config+0x22>
   215f6:	460b      	mov	r3, r1
    memcpy(&rng->config, config, sizeof(struct uwb_rng_config));
   215f8:	f8d1 c000 	ldr.w	ip, [r1]
   215fc:	6849      	ldr	r1, [r1, #4]
   215fe:	689a      	ldr	r2, [r3, #8]
   21600:	68db      	ldr	r3, [r3, #12]
   21602:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
   21606:	6641      	str	r1, [r0, #100]	; 0x64
   21608:	6682      	str	r2, [r0, #104]	; 0x68
   2160a:	66c3      	str	r3, [r0, #108]	; 0x6c
    return rng->dev_inst->status;
   2160c:	6803      	ldr	r3, [r0, #0]
}
   2160e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
   21612:	bd08      	pop	{r3, pc}
    assert(config);
   21614:	2300      	movs	r3, #0
   21616:	461a      	mov	r2, r3
   21618:	4619      	mov	r1, r3
   2161a:	4618      	mov	r0, r3
   2161c:	f7e7 fdd2 	bl	91c4 <__assert_func>

00021620 <uwb_rng_init>:
{
   21620:	b5f0      	push	{r4, r5, r6, r7, lr}
   21622:	b083      	sub	sp, #12
    assert(dev);
   21624:	2800      	cmp	r0, #0
   21626:	d03d      	beq.n	216a4 <uwb_rng_init+0x84>
   21628:	460d      	mov	r5, r1
   2162a:	4617      	mov	r7, r2
   2162c:	4606      	mov	r6, r0
    rng = (struct uwb_rng_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_RNG);
   2162e:	2104      	movs	r1, #4
   21630:	f7e7 fba5 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
    if (rng == NULL ) {
   21634:	4604      	mov	r4, r0
   21636:	2800      	cmp	r0, #0
   21638:	d03a      	beq.n	216b0 <uwb_rng_init+0x90>
    rng->dev_inst = dev;
   2163a:	6026      	str	r6, [r4, #0]
    rng->ccp_inst = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(dev, UWBEXT_CCP);
   2163c:	2101      	movs	r1, #1
   2163e:	4630      	mov	r0, r6
   21640:	f7e7 fb9d 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
   21644:	6060      	str	r0, [r4, #4]
    assert(rng->ccp_inst);
   21646:	2800      	cmp	r0, #0
   21648:	d049      	beq.n	216de <uwb_rng_init+0xbe>
    return (dpl_error_t)os_sem_init(&sem->sem, tokens);
   2164a:	2101      	movs	r1, #1
   2164c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   21650:	f7e8 fd04 	bl	a05c <os_sem_init>
    assert(err == DPL_OK);
   21654:	2800      	cmp	r0, #0
   21656:	d148      	bne.n	216ea <uwb_rng_init+0xca>
    if (config != NULL ) {
   21658:	b11d      	cbz	r5, 21662 <uwb_rng_init+0x42>
        uwb_rng_config(rng, config);
   2165a:	4629      	mov	r1, r5
   2165c:	4620      	mov	r0, r4
   2165e:	f7ff ffc8 	bl	215f2 <uwb_rng_config>
    rng->control = (uwb_rng_control_t){
   21662:	2300      	movs	r3, #0
   21664:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    rng->idx = 0xFFFF;
   21668:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2166c:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    rng->status.initialized = 1;
   21670:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
   21674:	f043 0302 	orr.w	r3, r3, #2
   21678:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        int rc = stats_init(
   2167c:	f104 0508 	add.w	r5, r4, #8
   21680:	220c      	movs	r2, #12
   21682:	9200      	str	r2, [sp, #0]
   21684:	4b1f      	ldr	r3, [pc, #124]	; (21704 <uwb_rng_init+0xe4>)
   21686:	2104      	movs	r1, #4
   21688:	4628      	mov	r0, r5
   2168a:	f7f4 fd5b 	bl	16144 <stats_init>
   2168e:	4606      	mov	r6, r0
        rc |= stats_register("rng", STATS_HDR(rng->stat));
   21690:	4629      	mov	r1, r5
   21692:	481d      	ldr	r0, [pc, #116]	; (21708 <uwb_rng_init+0xe8>)
   21694:	f7f4 fdda 	bl	1624c <stats_register>
        assert(rc == 0);
   21698:	ea56 0300 	orrs.w	r3, r6, r0
   2169c:	d12b      	bne.n	216f6 <uwb_rng_init+0xd6>
}
   2169e:	4620      	mov	r0, r4
   216a0:	b003      	add	sp, #12
   216a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev);
   216a4:	2300      	movs	r3, #0
   216a6:	461a      	mov	r2, r3
   216a8:	4619      	mov	r1, r3
   216aa:	4618      	mov	r0, r3
   216ac:	f7e7 fd8a 	bl	91c4 <__assert_func>
        rng = (struct uwb_rng_instance *) calloc(1, sizeof(*rng) + nframes * sizeof(twr_frame_t *));
   216b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   216b4:	0089      	lsls	r1, r1, #2
   216b6:	2001      	movs	r0, #1
   216b8:	f7ee fe9d 	bl	103f6 <calloc>
        assert(rng);
   216bc:	4604      	mov	r4, r0
   216be:	b140      	cbz	r0, 216d2 <uwb_rng_init+0xb2>
        rng->status.selfmalloc = 1;
   216c0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
   216c4:	f043 0301 	orr.w	r3, r3, #1
   216c8:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
        rng->nframes = nframes;
   216cc:	f8a0 707a 	strh.w	r7, [r0, #122]	; 0x7a
   216d0:	e7b3      	b.n	2163a <uwb_rng_init+0x1a>
        assert(rng);
   216d2:	2300      	movs	r3, #0
   216d4:	461a      	mov	r2, r3
   216d6:	4619      	mov	r1, r3
   216d8:	4618      	mov	r0, r3
   216da:	f7e7 fd73 	bl	91c4 <__assert_func>
    assert(rng->ccp_inst);
   216de:	2300      	movs	r3, #0
   216e0:	461a      	mov	r2, r3
   216e2:	4619      	mov	r1, r3
   216e4:	4618      	mov	r0, r3
   216e6:	f7e7 fd6d 	bl	91c4 <__assert_func>
    assert(err == DPL_OK);
   216ea:	2300      	movs	r3, #0
   216ec:	461a      	mov	r2, r3
   216ee:	4619      	mov	r1, r3
   216f0:	4618      	mov	r0, r3
   216f2:	f7e7 fd67 	bl	91c4 <__assert_func>
        assert(rc == 0);
   216f6:	2300      	movs	r3, #0
   216f8:	461a      	mov	r2, r3
   216fa:	4619      	mov	r1, r3
   216fc:	4618      	mov	r0, r3
   216fe:	f7e7 fd61 	bl	91c4 <__assert_func>
   21702:	bf00      	nop
   21704:	00028d54 	.word	0x00028d54
   21708:	00028ca4 	.word	0x00028ca4

0002170c <uwb_rng_clear_twr_data>:
    s->spherical.array[0] = DPL_FLOAT64_NAN();
   2170c:	2200      	movs	r2, #0
   2170e:	4b07      	ldr	r3, [pc, #28]	; (2172c <uwb_rng_clear_twr_data+0x20>)
   21710:	e9c0 2300 	strd	r2, r3, [r0]
    s->spherical.array[1] = DPL_FLOAT64_NAN();
   21714:	e9c0 2302 	strd	r2, r3, [r0, #8]
    s->spherical.array[2] = DPL_FLOAT64_NAN();
   21718:	e9c0 2304 	strd	r2, r3, [r0, #16]
    s->rssi = DPL_FLOAT32_NAN();
   2171c:	4b04      	ldr	r3, [pc, #16]	; (21730 <uwb_rng_clear_twr_data+0x24>)
   2171e:	6483      	str	r3, [r0, #72]	; 0x48
    s->fppl = DPL_FLOAT32_NAN();
   21720:	64c3      	str	r3, [r0, #76]	; 0x4c
    s->pdoa = DPL_FLOAT32_NAN();
   21722:	6503      	str	r3, [r0, #80]	; 0x50
    s->flags = (struct _rng_frame_flags){0};
   21724:	2300      	movs	r3, #0
   21726:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
   2172a:	4770      	bx	lr
   2172c:	7ff80000 	.word	0x7ff80000
   21730:	7fc00000 	.word	0x7fc00000

00021734 <rx_complete_cb>:
 *
 * @return true on sucess
 */
static bool
rx_complete_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   21734:	b570      	push	{r4, r5, r6, lr}
   21736:	4604      	mov	r4, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   21738:	684d      	ldr	r5, [r1, #4]
    ieee_rng_request_frame_t * req_frame;

    if (inst->fctrl != FCNTL_IEEE_RANGE_16 &&
   2173a:	f8b0 34e0 	ldrh.w	r3, [r0, #1248]	; 0x4e0
   2173e:	f648 0241 	movw	r2, #34881	; 0x8841
   21742:	4293      	cmp	r3, r2
   21744:	d012      	beq.n	2176c <rx_complete_cb+0x38>
   21746:	f648 0261 	movw	r2, #34913	; 0x8861
   2174a:	4293      	cmp	r3, r2
   2174c:	d00e      	beq.n	2176c <rx_complete_cb+0x38>
        inst->fctrl != (FCNTL_IEEE_RANGE_16|UWB_FCTRL_ACK_REQUESTED) &&
   2174e:	2b02      	cmp	r3, #2
   21750:	d00c      	beq.n	2176c <rx_complete_cb+0x38>
   21752:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
        inst->fctrl != UWB_FCTRL_FRAME_TYPE_ACK) {
        if(dpl_sem_get_count(&rng->sem) == 0) {
   21756:	b10b      	cbz	r3, 2175c <rx_complete_cb+0x28>
            /* We were expecting a packet but something else came in.
             * --> Release sem */
            RNG_STATS_INC(rx_other_frame);
            dpl_sem_release(&rng->sem);
        }
        return false;
   21758:	2000      	movs	r0, #0
   2175a:	e01b      	b.n	21794 <rx_complete_cb+0x60>
            RNG_STATS_INC(rx_other_frame);
   2175c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2175e:	3301      	adds	r3, #1
   21760:	632b      	str	r3, [r5, #48]	; 0x30
    return (dpl_error_t)os_sem_release(&sem->sem);
   21762:	f105 0050 	add.w	r0, r5, #80	; 0x50
   21766:	f7e8 fc81 	bl	a06c <os_sem_release>
   2176a:	e7f5      	b.n	21758 <rx_complete_cb+0x24>
   2176c:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    }

    if(dpl_sem_get_count(&rng->sem) == 1){
   21770:	2b01      	cmp	r3, #1
   21772:	d010      	beq.n	21796 <rx_complete_cb+0x62>
        // unsolicited inbound
        RNG_STATS_INC(rx_unsolicited);
        return false;
    }

    if (inst->frame_len < sizeof(ieee_rng_request_frame_t))
   21774:	f8b4 34e2 	ldrh.w	r3, [r4, #1250]	; 0x4e2
   21778:	2b0a      	cmp	r3, #10
   2177a:	d94e      	bls.n	2181a <rx_complete_cb+0xe6>
       return false;

    req_frame = (ieee_rng_request_frame_t * ) inst->rxbuf;
   2177c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
    rng->code = req_frame->code;
   21780:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   21784:	b293      	uxth	r3, r2
   21786:	f8a5 204c 	strh.w	r2, [r5, #76]	; 0x4c
    switch(rng->code) {
   2178a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   2178e:	2b19      	cmp	r3, #25
   21790:	d906      	bls.n	217a0 <rx_complete_cb+0x6c>
                    return false;   // Allow sub extensions to handle event
                }
            }
            break;
        default:
            return false;
   21792:	2000      	movs	r0, #0
    }
    return false;
}
   21794:	bd70      	pop	{r4, r5, r6, pc}
        RNG_STATS_INC(rx_unsolicited);
   21796:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   21798:	3301      	adds	r3, #1
   2179a:	62eb      	str	r3, [r5, #44]	; 0x2c
        return false;
   2179c:	2000      	movs	r0, #0
   2179e:	e7f9      	b.n	21794 <rx_complete_cb+0x60>
                twr_frame_t * frame = rng->frames[(rng->idx+1)%rng->nframes]; // speculative frame advance
   217a0:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   217a4:	3301      	adds	r3, #1
   217a6:	f8b5 207a 	ldrh.w	r2, [r5, #122]	; 0x7a
   217aa:	fb93 f1f2 	sdiv	r1, r3, r2
   217ae:	fb02 3311 	mls	r3, r2, r1, r3
   217b2:	3326      	adds	r3, #38	; 0x26
   217b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   217b8:	685e      	ldr	r6, [r3, #4]
                uwb_rng_clear_twr_data(&frame->remote);
   217ba:	f106 0020 	add.w	r0, r6, #32
   217be:	f7ff ffa5 	bl	2170c <uwb_rng_clear_twr_data>
                uwb_rng_clear_twr_data(&frame->local);
   217c2:	f106 0088 	add.w	r0, r6, #136	; 0x88
   217c6:	f7ff ffa1 	bl	2170c <uwb_rng_clear_twr_data>
                if (inst->frame_len <= sizeof(frame->array))
   217ca:	f8b4 24e2 	ldrh.w	r2, [r4, #1250]	; 0x4e2
   217ce:	2a88      	cmp	r2, #136	; 0x88
   217d0:	d901      	bls.n	217d6 <rx_complete_cb+0xa2>
    return false;
   217d2:	2000      	movs	r0, #0
   217d4:	e7de      	b.n	21794 <rx_complete_cb+0x60>
                    memcpy(frame->array, inst->rxbuf, inst->frame_len);
   217d6:	f8d4 14fc 	ldr.w	r1, [r4, #1276]	; 0x4fc
   217da:	4630      	mov	r0, r6
   217dc:	f7ee ff40 	bl	10660 <memcpy>
                if (inst->config.rx.frameFilter == 0 && frame->dst_address != inst->my_short_address){
   217e0:	f8b4 351c 	ldrh.w	r3, [r4, #1308]	; 0x51c
   217e4:	b97b      	cbnz	r3, 21806 <rx_complete_cb+0xd2>
   217e6:	f8b6 2005 	ldrh.w	r2, [r6, #5]
   217ea:	f8b4 34b6 	ldrh.w	r3, [r4, #1206]	; 0x4b6
   217ee:	429a      	cmp	r2, r3
   217f0:	d009      	beq.n	21806 <rx_complete_cb+0xd2>
   217f2:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
                    if(dpl_sem_get_count(&rng->sem) == 0){
   217f6:	b10b      	cbz	r3, 217fc <rx_complete_cb+0xc8>
                    return true;
   217f8:	2001      	movs	r0, #1
   217fa:	e7cb      	b.n	21794 <rx_complete_cb+0x60>
   217fc:	f105 0050 	add.w	r0, r5, #80	; 0x50
   21800:	f7e8 fc34 	bl	a06c <os_sem_release>
   21804:	e7f8      	b.n	217f8 <rx_complete_cb+0xc4>
                    RNG_STATS_INC(rx_complete);
   21806:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21808:	3301      	adds	r3, #1
   2180a:	62ab      	str	r3, [r5, #40]	; 0x28
                    rng->idx++;     // confirmed frame advance
   2180c:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   21810:	3301      	adds	r3, #1
   21812:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
                    return false;   // Allow sub extensions to handle event
   21816:	2000      	movs	r0, #0
   21818:	e7bc      	b.n	21794 <rx_complete_cb+0x60>
       return false;
   2181a:	2000      	movs	r0, #0
   2181c:	e7ba      	b.n	21794 <rx_complete_cb+0x60>
	...

00021820 <uwb_rng_twr_to_tof>:
{
   21820:	b5f0      	push	{r4, r5, r6, r7, lr}
   21822:	b089      	sub	sp, #36	; 0x24
    twr_frame_t * first_frame = rng->frames[(uint16_t)(idx-1)%rng->nframes];
   21824:	1e4b      	subs	r3, r1, #1
   21826:	b29b      	uxth	r3, r3
   21828:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
   2182c:	fbb3 f4f2 	udiv	r4, r3, r2
   21830:	fb02 3314 	mls	r3, r2, r4, r3
   21834:	b29b      	uxth	r3, r3
   21836:	3326      	adds	r3, #38	; 0x26
   21838:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2183c:	685d      	ldr	r5, [r3, #4]
    twr_frame_t * frame = rng->frames[(idx)%rng->nframes];
   2183e:	fbb1 f3f2 	udiv	r3, r1, r2
   21842:	fb02 1113 	mls	r1, r2, r3, r1
   21846:	b289      	uxth	r1, r1
   21848:	3126      	adds	r1, #38	; 0x26
   2184a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2184e:	6844      	ldr	r4, [r0, #4]
    switch(frame->code) {
   21850:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   21854:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
   21858:	d321      	bcc.n	2189e <uwb_rng_twr_to_tof+0x7e>
   2185a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
   2185e:	b29b      	uxth	r3, r3
   21860:	2b09      	cmp	r3, #9
   21862:	d833      	bhi.n	218cc <uwb_rng_twr_to_tof+0xac>
                              first_frame->transmission_timestamp, first_frame->reception_timestamp,
   21864:	f8d5 200f 	ldr.w	r2, [r5, #15]
   21868:	f8d5 600b 	ldr.w	r6, [r5, #11]
                              frame->transmission_timestamp, frame->reception_timestamp);
   2186c:	f8d4 700f 	ldr.w	r7, [r4, #15]
   21870:	f8d4 c00b 	ldr.w	ip, [r4, #11]
            ToF = calc_tof_ds(first_frame->response_timestamp, first_frame->request_timestamp,
   21874:	2300      	movs	r3, #0
   21876:	f8d5 1013 	ldr.w	r1, [r5, #19]
   2187a:	f8d5 0017 	ldr.w	r0, [r5, #23]
   2187e:	f8cd c018 	str.w	ip, [sp, #24]
   21882:	9307      	str	r3, [sp, #28]
   21884:	9704      	str	r7, [sp, #16]
   21886:	9305      	str	r3, [sp, #20]
   21888:	f8d4 5013 	ldr.w	r5, [r4, #19]
   2188c:	9503      	str	r5, [sp, #12]
   2188e:	f8d4 4017 	ldr.w	r4, [r4, #23]
   21892:	9402      	str	r4, [sp, #8]
   21894:	9600      	str	r6, [sp, #0]
   21896:	9301      	str	r3, [sp, #4]
   21898:	f7eb fdea 	bl	d470 <calc_tof_ds>
            break;
   2189c:	e004      	b.n	218a8 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
   2189e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
   218a2:	d203      	bcs.n	218ac <uwb_rng_twr_to_tof+0x8c>
   218a4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 218d8 <uwb_rng_twr_to_tof+0xb8>
}
   218a8:	b009      	add	sp, #36	; 0x24
   218aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              frame->transmission_timestamp, frame->reception_timestamp, skew);
   218ac:	f8d4 200f 	ldr.w	r2, [r4, #15]
   218b0:	f8d4 500b 	ldr.w	r5, [r4, #11]
            ToF = calc_tof_ss(frame->response_timestamp, frame->request_timestamp,
   218b4:	2300      	movs	r3, #0
   218b6:	f8d4 1013 	ldr.w	r1, [r4, #19]
   218ba:	f8d4 0017 	ldr.w	r0, [r4, #23]
   218be:	9500      	str	r5, [sp, #0]
   218c0:	9301      	str	r3, [sp, #4]
   218c2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 218d8 <uwb_rng_twr_to_tof+0xb8>
   218c6:	f7eb fda3 	bl	d410 <calc_tof_ss>
            break;
   218ca:	e7ed      	b.n	218a8 <uwb_rng_twr_to_tof+0x88>
    switch(frame->code) {
   218cc:	ed9f 0b02 	vldr	d0, [pc, #8]	; 218d8 <uwb_rng_twr_to_tof+0xb8>
    return ToF;
   218d0:	e7ea      	b.n	218a8 <uwb_rng_twr_to_tof+0x88>
   218d2:	bf00      	nop
   218d4:	f3af 8000 	nop.w
	...

000218e0 <tx_final_cb>:
 *
 * @return void
 */
static bool
tx_final_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   218e0:	b570      	push	{r4, r5, r6, lr}
   218e2:	4605      	mov	r5, r0
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   218e4:	684e      	ldr	r6, [r1, #4]
    twr_frame_t * frame = rng->frames[(rng->idx)%rng->nframes];
   218e6:	f8b6 3076 	ldrh.w	r3, [r6, #118]	; 0x76
   218ea:	f8b6 207a 	ldrh.w	r2, [r6, #122]	; 0x7a
   218ee:	fbb3 f1f2 	udiv	r1, r3, r2
   218f2:	fb02 3311 	mls	r3, r2, r1, r3
   218f6:	b29b      	uxth	r3, r3
   218f8:	3326      	adds	r3, #38	; 0x26
   218fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   218fe:	685c      	ldr	r4, [r3, #4]

    frame->remote.cartesian.x = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_X));
   21900:	2200      	movs	r2, #0
   21902:	2300      	movs	r3, #0
   21904:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    frame->remote.cartesian.y = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Y));
   21908:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
    frame->remote.cartesian.z = DPL_FLOAT64_INIT(MYNEWT_VAL(LOCAL_COORDINATE_Z));
   2190c:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    if (inst->capabilities.single_receiver_pdoa) {
   21910:	f890 34b2 	ldrb.w	r3, [r0, #1202]	; 0x4b2
   21914:	f013 0f02 	tst.w	r3, #2
   21918:	d007      	beq.n	2192a <tx_final_cb+0x4a>
 * @return pdoa (radians) on success
 */
UWB_API_IMPL_PREFIX dpl_float32_t
uwb_calc_pdoa(struct uwb_dev * dev, struct uwb_dev_rxdiag * diag)
{
    return (dev->uw_funcs->uf_calc_pdoa(dev, diag));
   2191a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2191c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   21920:	f8d0 14f8 	ldr.w	r1, [r0, #1272]	; 0x4f8
   21924:	4798      	blx	r3
        frame->remote.pdoa = uwb_calc_pdoa(inst, inst->rxdiag);
   21926:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
    }
    if (inst->capabilities.sts) {
   2192a:	f895 34b2 	ldrb.w	r3, [r5, #1202]	; 0x4b2
   2192e:	f013 0f01 	tst.w	r3, #1
   21932:	d017      	beq.n	21964 <tx_final_cb+0x84>
        frame->remote.flags.has_sts = inst->config.rx.stsMode != DWT_STS_MODE_OFF;
   21934:	f895 3518 	ldrb.w	r3, [r5, #1304]	; 0x518
   21938:	3b00      	subs	r3, #0
   2193a:	bf18      	it	ne
   2193c:	2301      	movne	r3, #1
   2193e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   21942:	f363 0200 	bfi	r2, r3, #0, #1
   21946:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
        frame->local.flags.has_valid_sts = !(inst->status.sts_ts_error || inst->status.sts_pream_error);
   2194a:	f895 350b 	ldrb.w	r3, [r5, #1291]	; 0x50b
   2194e:	f013 0f30 	tst.w	r3, #48	; 0x30
   21952:	bf0c      	ite	eq
   21954:	2201      	moveq	r2, #1
   21956:	2200      	movne	r2, #0
   21958:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   2195c:	f362 0341 	bfi	r3, r2, #1, #1
   21960:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    return (dev->uw_funcs->uf_calc_rssi(dev, diag));
   21964:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   2196a:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   2196e:	4628      	mov	r0, r5
   21970:	4798      	blx	r3
    }
    frame->remote.rssi = uwb_calc_rssi(inst, inst->rxdiag);
   21972:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
    return (dev->uw_funcs->uf_calc_fppl(dev, diag));
   21976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21978:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   2197c:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
   21980:	4628      	mov	r0, r5
   21982:	4798      	blx	r3
    frame->remote.fppl = uwb_calc_fppl(inst, inst->rxdiag);
   21984:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c

    if (frame->code != UWB_DATA_CODE_SS_TWR_EXT_T1) {
   21988:	f8b4 2009 	ldrh.w	r2, [r4, #9]
   2198c:	f240 1315 	movw	r3, #277	; 0x115
   21990:	429a      	cmp	r2, r3
   21992:	d125      	bne.n	219e0 <tx_final_cb+0x100>
#else
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
#endif
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
    } else {
        frame->remote.spherical.range = DPL_FLOAT64_NAN();
   21994:	2200      	movs	r2, #0
   21996:	4b1e      	ldr	r3, [pc, #120]	; (21a10 <tx_final_cb+0x130>)
   21998:	e9c4 2308 	strd	r2, r3, [r4, #32]
    }
    frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(-1.0);
   2199c:	2200      	movs	r2, #0
   2199e:	4b1d      	ldr	r3, [pc, #116]	; (21a14 <tx_final_cb+0x134>)
   219a0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    frame->remote.spherical_variance.zenith = DPL_FLOAT64_INIT(-1.0);
   219a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    if (!DPL_FLOAT32_ISNAN(frame->remote.pdoa)) {
   219a8:	ed94 0a1c 	vldr	s0, [r4, #112]	; 0x70
   219ac:	eeb4 0a40 	vcmp.f32	s0, s0
   219b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   219b4:	d612      	bvs.n	219dc <tx_final_cb+0xfc>
        frame->remote.spherical.azimuth = DPL_FLOAT64_FROM_F32(uwb_calc_aoa(
   219b6:	f505 639a 	add.w	r3, r5, #1232	; 0x4d0
   219ba:	edd3 0a00 	vldr	s1, [r3]
   219be:	f895 050c 	ldrb.w	r0, [r5, #1292]	; 0x50c
   219c2:	f7e7 fa51 	bl	8e68 <uwb_calc_aoa>
   219c6:	ee10 0a10 	vmov	r0, s0
   219ca:	f002 fe1d 	bl	24608 <__aeabi_f2d>
   219ce:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            frame->remote.pdoa, inst->config.channel, inst->rx_ant_separation)
            );
        frame->remote.spherical_variance.azimuth = DPL_FLOAT64_INIT(MYNEWT_VAL(AZIMUTH_VARIANCE));
   219d2:	a30b      	add	r3, pc, #44	; (adr r3, 21a00 <tx_final_cb+0x120>)
   219d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   219d8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }

    return true;
}
   219dc:	2001      	movs	r0, #1
   219de:	bd70      	pop	{r4, r5, r6, pc}
        frame->remote.spherical.range = uwb_rng_tof_to_meters(uwb_rng_twr_to_tof(rng,rng->idx));
   219e0:	f8b6 1076 	ldrh.w	r1, [r6, #118]	; 0x76
   219e4:	4630      	mov	r0, r6
   219e6:	f7ff ff1b 	bl	21820 <uwb_rng_twr_to_tof>
   219ea:	f7eb fced 	bl	d3c8 <uwb_rng_tof_to_meters>
   219ee:	ed84 0b08 	vstr	d0, [r4, #32]
        frame->remote.spherical_variance.range = DPL_FLOAT64_I32_TO_F64(MYNEWT_VAL(RANGE_VARIANCE));
   219f2:	a305      	add	r3, pc, #20	; (adr r3, 21a08 <tx_final_cb+0x128>)
   219f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   219f8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   219fc:	e7ce      	b.n	2199c <tx_final_cb+0xbc>
   219fe:	bf00      	nop
   21a00:	00000000 	.word	0x00000000
   21a04:	3f9dcc64 	.word	0x3f9dcc64
   21a08:	00000000 	.word	0x00000000
   21a0c:	3f41d718 	.word	0x3f41d718
   21a10:	7ff80000 	.word	0x7ff80000
   21a14:	bff00000 	.word	0xbff00000

00021a18 <rng_issue_complete>:
{
   21a18:	b538      	push	{r3, r4, r5, lr}
   21a1a:	4605      	mov	r5, r0
    if(!(SLIST_EMPTY(&inst->interface_cbs))) {
   21a1c:	f8d0 4530 	ldr.w	r4, [r0, #1328]	; 0x530
   21a20:	b90c      	cbnz	r4, 21a26 <rng_issue_complete+0xe>
}
   21a22:	bd38      	pop	{r3, r4, r5, pc}
        SLIST_FOREACH(cbs_i, &inst->interface_cbs, next) {
   21a24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   21a26:	2c00      	cmp	r4, #0
   21a28:	d0fb      	beq.n	21a22 <rng_issue_complete+0xa>
            if (cbs_i != NULL && cbs_i->complete_cb)
   21a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21a2c:	2b00      	cmp	r3, #0
   21a2e:	d0f9      	beq.n	21a24 <rng_issue_complete+0xc>
                if(cbs_i->complete_cb(inst, cbs_i)) continue;
   21a30:	4621      	mov	r1, r4
   21a32:	4628      	mov	r0, r5
   21a34:	4798      	blx	r3
   21a36:	e7f5      	b.n	21a24 <rng_issue_complete+0xc>

00021a38 <tx_complete_cb>:
{
   21a38:	b538      	push	{r3, r4, r5, lr}
    struct uwb_rng_instance * rng = (struct uwb_rng_instance *)cbs->inst_ptr;
   21a3a:	684d      	ldr	r5, [r1, #4]
    if (inst->fctrl != FCNTL_IEEE_RANGE_16)
   21a3c:	f8b0 24e0 	ldrh.w	r2, [r0, #1248]	; 0x4e0
   21a40:	f648 0341 	movw	r3, #34881	; 0x8841
   21a44:	429a      	cmp	r2, r3
   21a46:	d122      	bne.n	21a8e <tx_complete_cb+0x56>
   21a48:	4604      	mov	r4, r0
   21a4a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    if(dpl_sem_get_count(&rng->sem) == 1) {
   21a4e:	2b01      	cmp	r3, #1
   21a50:	d01f      	beq.n	21a92 <tx_complete_cb+0x5a>
    switch(rng->code) {
   21a52:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
   21a56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
   21a5a:	2b19      	cmp	r3, #25
   21a5c:	d81b      	bhi.n	21a96 <tx_complete_cb+0x5e>
            RNG_STATS_INC(tx_complete);
   21a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21a60:	3301      	adds	r3, #1
   21a62:	626b      	str	r3, [r5, #36]	; 0x24
            if (rng->control.complete_after_tx) {
   21a64:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   21a68:	f013 0f02 	tst.w	r3, #2
   21a6c:	d107      	bne.n	21a7e <tx_complete_cb+0x46>
            rng->control.complete_after_tx = 0;
   21a6e:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   21a72:	f36f 0341 	bfc	r3, #1, #1
   21a76:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
            return true;
   21a7a:	2001      	movs	r0, #1
   21a7c:	e008      	b.n	21a90 <tx_complete_cb+0x58>
   21a7e:	f105 0050 	add.w	r0, r5, #80	; 0x50
   21a82:	f7e8 faf3 	bl	a06c <os_sem_release>
                rng_issue_complete(inst);
   21a86:	4620      	mov	r0, r4
   21a88:	f7ff ffc6 	bl	21a18 <rng_issue_complete>
   21a8c:	e7ef      	b.n	21a6e <tx_complete_cb+0x36>
        return false;
   21a8e:	2000      	movs	r0, #0
}
   21a90:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   21a92:	2000      	movs	r0, #0
   21a94:	e7fc      	b.n	21a90 <tx_complete_cb+0x58>
            return false;
   21a96:	2000      	movs	r0, #0
   21a98:	e7fa      	b.n	21a90 <tx_complete_cb+0x58>
	...

00021a9c <uwb_rng_pkg_init>:
 * @return void
 */

void
uwb_rng_pkg_init(void)
{
   21a9c:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance *rng;
    struct uwb_dev *udev;
#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %"PRIu32",\"msg\": \"rng_pkg_init\"}\n",
   21a9e:	f7f0 ff14 	bl	128ca <dpl_cputime_get32>
   21aa2:	4601      	mov	r1, r0
   21aa4:	481e      	ldr	r0, [pc, #120]	; (21b20 <uwb_rng_pkg_init+0x84>)
   21aa6:	f7ef fa01 	bl	10eac <printf>
           dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
#endif

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   21aaa:	2400      	movs	r4, #0
   21aac:	b104      	cbz	r4, 21ab0 <uwb_rng_pkg_init+0x14>
#if __KERNEL__
        rng_chrdev_create(udev->idx);
#endif
    }

}
   21aae:	bd38      	pop	{r3, r4, r5, pc}
        udev = uwb_dev_idx_lookup(i);
   21ab0:	4620      	mov	r0, r4
   21ab2:	f7e7 f8df 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) continue;
   21ab6:	4605      	mov	r5, r0
   21ab8:	b378      	cbz	r0, 21b1a <uwb_rng_pkg_init+0x7e>
        g_cbs[i].inst_ptr = rng = uwb_rng_init(udev, &g_config, sizeof(g_twr_frames[i])/sizeof(g_twr_frames[i][0]));
   21aba:	2204      	movs	r2, #4
   21abc:	4919      	ldr	r1, [pc, #100]	; (21b24 <uwb_rng_pkg_init+0x88>)
   21abe:	f7ff fdaf 	bl	21620 <uwb_rng_init>
   21ac2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   21ac6:	4a18      	ldr	r2, [pc, #96]	; (21b28 <uwb_rng_pkg_init+0x8c>)
   21ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   21acc:	6058      	str	r0, [r3, #4]
        uwb_rng_set_frames(rng, g_twr_frames[i], sizeof(g_twr_frames[0])/sizeof(g_twr_frames[0][0]));
   21ace:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
   21ad2:	4b16      	ldr	r3, [pc, #88]	; (21b2c <uwb_rng_pkg_init+0x90>)
   21ad4:	eb03 1c8c 	add.w	ip, r3, ip, lsl #6
    assert(nframes <= rng->nframes);
   21ad8:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
   21adc:	2b03      	cmp	r3, #3
   21ade:	d901      	bls.n	21ae4 <uwb_rng_pkg_init+0x48>
    for (i = 0; i < nframes; i++)
   21ae0:	2300      	movs	r3, #0
   21ae2:	e010      	b.n	21b06 <uwb_rng_pkg_init+0x6a>
    assert(nframes <= rng->nframes);
   21ae4:	2300      	movs	r3, #0
   21ae6:	461a      	mov	r2, r3
   21ae8:	4619      	mov	r1, r3
   21aea:	4618      	mov	r0, r3
   21aec:	f7e7 fb6a 	bl	91c4 <__assert_func>
        rng->frames[i] = &twr[i];
   21af0:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   21af4:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
   21af8:	f103 0226 	add.w	r2, r3, #38	; 0x26
   21afc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   21b00:	6051      	str	r1, [r2, #4]
    for (i = 0; i < nframes; i++)
   21b02:	3301      	adds	r3, #1
   21b04:	b29b      	uxth	r3, r3
   21b06:	2b03      	cmp	r3, #3
   21b08:	d9f2      	bls.n	21af0 <uwb_rng_pkg_init+0x54>
        uwb_mac_append_interface(udev, &g_cbs[i]);
   21b0a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   21b0e:	4906      	ldr	r1, [pc, #24]	; (21b28 <uwb_rng_pkg_init+0x8c>)
   21b10:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   21b14:	4628      	mov	r0, r5
   21b16:	f7e7 f8dd 	bl	8cd4 <uwb_mac_append_interface>
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   21b1a:	3401      	adds	r4, #1
   21b1c:	e7c6      	b.n	21aac <uwb_rng_pkg_init+0x10>
   21b1e:	bf00      	nop
   21b20:	00028cf4 	.word	0x00028cf4
   21b24:	200012d0 	.word	0x200012d0
   21b28:	20001294 	.word	0x20001294
   21b2c:	20005520 	.word	0x20005520

00021b30 <uwb_rng_pkg_init2>:
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
        if (!g_cbs[i].inst_ptr) continue;
        uwbrng_sysfs_init((struct uwb_rng_instance *)g_cbs[i].inst_ptr);
    }
#endif
}
   21b30:	4770      	bx	lr
	...

00021b34 <uwb_rng_pkg_down>:

int
uwb_rng_pkg_down(int reason)
{
   21b34:	b538      	push	{r3, r4, r5, lr}
    int i;
    struct uwb_rng_instance * rng;

    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   21b36:	2400      	movs	r4, #0
   21b38:	b10c      	cbz	r4, 21b3e <uwb_rng_pkg_down+0xa>
        uwb_rng_free(g_cbs[i].inst_ptr);
        g_cbs[i].inst_ptr = 0;
    }

    return 0;
}
   21b3a:	2000      	movs	r0, #0
   21b3c:	bd38      	pop	{r3, r4, r5, pc}
        rng = (struct uwb_rng_instance *)g_cbs[i].inst_ptr;
   21b3e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   21b42:	009a      	lsls	r2, r3, #2
   21b44:	4b08      	ldr	r3, [pc, #32]	; (21b68 <uwb_rng_pkg_down+0x34>)
   21b46:	4413      	add	r3, r2
   21b48:	685b      	ldr	r3, [r3, #4]
        if (!rng) continue;
   21b4a:	b153      	cbz	r3, 21b62 <uwb_rng_pkg_down+0x2e>
        uwb_mac_remove_interface(rng->dev_inst, g_cbs[i].id);
   21b4c:	4d06      	ldr	r5, [pc, #24]	; (21b68 <uwb_rng_pkg_down+0x34>)
   21b4e:	4415      	add	r5, r2
   21b50:	8869      	ldrh	r1, [r5, #2]
   21b52:	6818      	ldr	r0, [r3, #0]
   21b54:	f7e7 f8e3 	bl	8d1e <uwb_mac_remove_interface>
        uwb_rng_free(g_cbs[i].inst_ptr);
   21b58:	6868      	ldr	r0, [r5, #4]
   21b5a:	f7ff fd33 	bl	215c4 <uwb_rng_free>
        g_cbs[i].inst_ptr = 0;
   21b5e:	2300      	movs	r3, #0
   21b60:	606b      	str	r3, [r5, #4]
    for (i=0;i<ARRAY_SIZE(g_cbs);i++) {
   21b62:	3401      	adds	r4, #1
   21b64:	e7e8      	b.n	21b38 <uwb_rng_pkg_down+0x4>
   21b66:	bf00      	nop
   21b68:	20001294 	.word	0x20001294

00021b6c <wcs_timescale_cb>:
 *
 * returns none
 */
static bool
wcs_timescale_cb(struct uwb_dev * inst, struct uwb_mac_interface * cbs)
{
   21b6c:	b510      	push	{r4, lr}
    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)cbs->inst_ptr;
   21b6e:	684c      	ldr	r4, [r1, #4]
    struct uwb_ccp_instance * ccp = wcs->ccp;
   21b70:	6e22      	ldr	r2, [r4, #96]	; 0x60

    uwb_ccp_frame_t * frame = ccp->frames[(ccp->idx)%ccp->nframes];
   21b72:	f8b2 30ee 	ldrh.w	r3, [r2, #238]	; 0xee
   21b76:	f8b2 10ec 	ldrh.w	r1, [r2, #236]	; 0xec
   21b7a:	fbb3 f0f1 	udiv	r0, r3, r1
   21b7e:	fb01 3310 	mls	r3, r1, r0, r3
   21b82:	b29b      	uxth	r3, r3
   21b84:	33e0      	adds	r3, #224	; 0xe0
   21b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    wcs->carrier_integrator = frame->carrier_integrator;
   21b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21b8c:	63a3      	str	r3, [r4, #56]	; 0x38
    wcs->observed_interval = (ccp->local_epoch - wcs->local_epoch.lo) & 0x0FFFFFFFFFFUL; // Observed ccp interval
   21b8e:	f8d2 00d8 	ldr.w	r0, [r2, #216]	; 0xd8
   21b92:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   21b96:	69a1      	ldr	r1, [r4, #24]
   21b98:	f894 c01c 	ldrb.w	ip, [r4, #28]
   21b9c:	1a40      	subs	r0, r0, r1
   21b9e:	eb63 030c 	sbc.w	r3, r3, ip
   21ba2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   21ba6:	60a0      	str	r0, [r4, #8]
   21ba8:	60e3      	str	r3, [r4, #12]
    wcs->master_epoch.timestamp = ccp->master_epoch.timestamp;
   21baa:	ed92 7b34 	vldr	d7, [r2, #208]	; 0xd0
   21bae:	ed84 7b04 	vstr	d7, [r4, #16]
    wcs->local_epoch.timestamp += wcs->observed_interval;
   21bb2:	1809      	adds	r1, r1, r0
   21bb4:	69e0      	ldr	r0, [r4, #28]
   21bb6:	eb43 0300 	adc.w	r3, r3, r0
   21bba:	61a1      	str	r1, [r4, #24]
   21bbc:	61e3      	str	r3, [r4, #28]

    if(ccp->status.valid){
   21bbe:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
   21bc2:	f013 0f04 	tst.w	r3, #4
   21bc6:	d00a      	beq.n	21bde <wcs_timescale_cb+0x72>
        if (wcs->config.postprocess == true)
   21bc8:	7923      	ldrb	r3, [r4, #4]
   21bca:	f013 0f01 	tst.w	r3, #1
   21bce:	d012      	beq.n	21bf6 <wcs_timescale_cb+0x8a>
    return (struct dpl_eventq *) os_eventq_dflt_get();
   21bd0:	f7e7 feda 	bl	9988 <os_eventq_dflt_get>
    os_eventq_put((struct os_eventq *) evq, (struct os_event *) ev);
   21bd4:	f104 0150 	add.w	r1, r4, #80	; 0x50
   21bd8:	f7e7 fe28 	bl	982c <os_eventq_put>
}
   21bdc:	e00b      	b.n	21bf6 <wcs_timescale_cb+0x8a>
            dpl_eventq_put(dpl_eventq_dflt_get(), &wcs->postprocess_ev);
    }else{
        wcs->normalized_skew = (dpl_float64_t) 1.0l;
   21bde:	2200      	movs	r2, #0
   21be0:	4b06      	ldr	r3, [pc, #24]	; (21bfc <wcs_timescale_cb+0x90>)
   21be2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
        wcs->fractional_skew = (dpl_float64_t) 0.0l;
   21be6:	2200      	movs	r2, #0
   21be8:	2300      	movs	r3, #0
   21bea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
        wcs->status.initialized = 0;
   21bee:	7823      	ldrb	r3, [r4, #0]
   21bf0:	f36f 0341 	bfc	r3, #1, #1
   21bf4:	7023      	strb	r3, [r4, #0]
    }
    return true;

}
   21bf6:	2001      	movs	r0, #1
   21bf8:	bd10      	pop	{r4, pc}
   21bfa:	bf00      	nop
   21bfc:	3ff00000 	.word	0x3ff00000

00021c00 <wcs_timescale_ev>:
 *
 * returns none
 */
void
wcs_timescale_ev(struct dpl_event * ev)
{
   21c00:	b5f0      	push	{r4, r5, r6, r7, lr}
   21c02:	b091      	sub	sp, #68	; 0x44
    assert(ev != NULL);
   21c04:	2800      	cmp	r0, #0
   21c06:	f000 8089 	beq.w	21d1c <wcs_timescale_ev+0x11c>
    return ev->ev.ev_arg;
   21c0a:	6884      	ldr	r4, [r0, #8]
    assert(dpl_event_get_arg(ev) != NULL);
   21c0c:	2c00      	cmp	r4, #0
   21c0e:	f000 808b 	beq.w	21d28 <wcs_timescale_ev+0x128>

    struct uwb_wcs_instance * wcs = (struct uwb_wcs_instance *)dpl_event_get_arg(ev);
    struct uwb_ccp_instance * ccp = wcs->ccp;
   21c12:	6e27      	ldr	r7, [r4, #96]	; 0x60
    uwb_wcs_states_t * states = (uwb_wcs_states_t *) wcs->states.array;
    timescale_instance_t * timescale = wcs->timescale;
   21c14:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0

    if(ccp->status.valid){
   21c18:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
   21c1c:	f013 0f04 	tst.w	r3, #4
   21c20:	d07a      	beq.n	21d18 <wcs_timescale_ev+0x118>
        double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   21c22:	f10d 0c10 	add.w	ip, sp, #16
   21c26:	4d68      	ldr	r5, [pc, #416]	; (21dc8 <wcs_timescale_ev+0x1c8>)
   21c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21c2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21c2e:	e895 0003 	ldmia.w	r5, {r0, r1}
   21c32:	e88c 0003 	stmia.w	ip, {r0, r1}

        if (wcs->status.initialized == 0){
   21c36:	7823      	ldrb	r3, [r4, #0]
   21c38:	f013 0f02 	tst.w	r3, #2
   21c3c:	d17a      	bne.n	21d34 <wcs_timescale_ev+0x134>
            states->time = (double) wcs->master_epoch.lo;
   21c3e:	6920      	ldr	r0, [r4, #16]
   21c40:	7d21      	ldrb	r1, [r4, #20]
   21c42:	f002 fd03 	bl	2464c <__aeabi_ul2d>
   21c46:	e9c4 0108 	strd	r0, r1, [r4, #32]
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   21c4a:	6838      	ldr	r0, [r7, #0]
    return (dev->uw_funcs->uf_calc_clock_offset_ratio(dev, integrator_val, type));
   21c4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   21c52:	2200      	movs	r2, #0
   21c54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   21c56:	4798      	blx	r3
   21c58:	ec51 0b10 	vmov	r0, r1, d0
   21c5c:	2200      	movs	r2, #0
   21c5e:	4b5b      	ldr	r3, [pc, #364]	; (21dcc <wcs_timescale_ev+0x1cc>)
   21c60:	f002 fb74 	bl	2434c <__adddf3>
                                ccp->dev_inst, wcs->carrier_integrator,
                                UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU) ;
   21c64:	a354      	add	r3, pc, #336	; (adr r3, 21db8 <wcs_timescale_ev+0x1b8>)
   21c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   21c6a:	f002 fd25 	bl	246b8 <__aeabi_dmul>
            states->skew = (1.0l + (double ) uwb_calc_clock_offset_ratio(
   21c6e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = 0;
   21c72:	2200      	movs	r2, #0
   21c74:	2300      	movs	r3, #0
   21c76:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            double x0[] = {states->time, states->skew, states->drift};
   21c7a:	ed94 7b08 	vldr	d7, [r4, #32]
   21c7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   21c82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   21c86:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
            double T = 1e-6l * MYNEWT_VAL(UWB_CCP_PERIOD);
            timescale = timescale_init(timescale, x0, q, T);
   21c8a:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 21dc0 <wcs_timescale_ev+0x1c0>
   21c8e:	aa04      	add	r2, sp, #16
   21c90:	a90a      	add	r1, sp, #40	; 0x28
   21c92:	4630      	mov	r0, r6
   21c94:	f7fd ff8a 	bl	1fbac <timescale_init>
   21c98:	4606      	mov	r6, r0
            ((timescale_states_t * )timescale->eke->x)->time = states->time;
   21c9a:	6803      	ldr	r3, [r0, #0]
   21c9c:	689b      	ldr	r3, [r3, #8]
   21c9e:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   21ca2:	e9c3 0100 	strd	r0, r1, [r3]
            ((timescale_states_t * )timescale->eke->x)->skew = states->skew;
   21ca6:	6833      	ldr	r3, [r6, #0]
   21ca8:	689b      	ldr	r3, [r3, #8]
   21caa:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
   21cae:	e9c3 0102 	strd	r0, r1, [r3, #8]
            ((timescale_states_t * )timescale->eke->x)->drift =states->drift;
   21cb2:	6833      	ldr	r3, [r6, #0]
   21cb4:	689b      	ldr	r3, [r3, #8]
   21cb6:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
   21cba:	e9c3 0104 	strd	r0, r1, [r3, #16]
            wcs->status.valid = wcs->status.initialized = 1;
   21cbe:	7823      	ldrb	r3, [r4, #0]
   21cc0:	f043 0302 	orr.w	r3, r3, #2
   21cc4:	7023      	strb	r3, [r4, #0]
   21cc6:	b2db      	uxtb	r3, r3
   21cc8:	f043 0304 	orr.w	r3, r3, #4
   21ccc:	7023      	strb	r3, [r4, #0]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
        }

        if (wcs->status.valid){
   21cce:	7823      	ldrb	r3, [r4, #0]
   21cd0:	f013 0f04 	tst.w	r3, #4
   21cd4:	d065      	beq.n	21da2 <wcs_timescale_ev+0x1a2>
            states->time = ((timescale_states_t * )timescale->eke->x)->time;
   21cd6:	6833      	ldr	r3, [r6, #0]
   21cd8:	689b      	ldr	r3, [r3, #8]
   21cda:	e9d3 2300 	ldrd	r2, r3, [r3]
   21cde:	e9c4 2308 	strd	r2, r3, [r4, #32]
            states->skew = ((timescale_states_t * )timescale->eke->x)->skew;
   21ce2:	6833      	ldr	r3, [r6, #0]
   21ce4:	689b      	ldr	r3, [r3, #8]
   21ce6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   21cea:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
            states->drift = ((timescale_states_t * )timescale->eke->x)->drift;
   21cee:	6833      	ldr	r3, [r6, #0]
   21cf0:	689b      	ldr	r3, [r3, #8]
   21cf2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   21cf6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            wcs->normalized_skew = states->skew / MYNEWT_VAL(UWB_WCS_DTU);
   21cfa:	a32f      	add	r3, pc, #188	; (adr r3, 21db8 <wcs_timescale_ev+0x1b8>)
   21cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   21d00:	f002 fe04 	bl	2490c <__aeabi_ddiv>
   21d04:	4602      	mov	r2, r0
   21d06:	460b      	mov	r3, r1
   21d08:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 1.0l - wcs->normalized_skew;
   21d0c:	2000      	movs	r0, #0
   21d0e:	492f      	ldr	r1, [pc, #188]	; (21dcc <wcs_timescale_ev+0x1cc>)
   21d10:	f002 fb1a 	bl	24348 <__aeabi_dsub>
   21d14:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
        .ppm = DPL_FLOAT64_MUL(wcs->fractional_skew, DPL_FLOAT64_INIT(1e6l))
    };
    wcs_json_write_uint64(&json);
#endif
    }
}
   21d18:	b011      	add	sp, #68	; 0x44
   21d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(ev != NULL);
   21d1c:	2300      	movs	r3, #0
   21d1e:	461a      	mov	r2, r3
   21d20:	4619      	mov	r1, r3
   21d22:	4618      	mov	r0, r3
   21d24:	f7e7 fa4e 	bl	91c4 <__assert_func>
    assert(dpl_event_get_arg(ev) != NULL);
   21d28:	2300      	movs	r3, #0
   21d2a:	461a      	mov	r2, r3
   21d2c:	4619      	mov	r1, r3
   21d2e:	4618      	mov	r0, r3
   21d30:	f7e7 fa48 	bl	91c4 <__assert_func>
            double z[] ={(double) wcs->master_epoch.lo,
   21d34:	6920      	ldr	r0, [r4, #16]
   21d36:	7d21      	ldrb	r1, [r4, #20]
   21d38:	f002 fc88 	bl	2464c <__aeabi_ul2d>
   21d3c:	e9cd 0100 	strd	r0, r1, [sp]
                        (1.0l + (double ) uwb_calc_clock_offset_ratio(
   21d40:	6838      	ldr	r0, [r7, #0]
   21d42:	6a43      	ldr	r3, [r0, #36]	; 0x24
   21d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   21d48:	2200      	movs	r2, #0
   21d4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   21d4c:	4798      	blx	r3
   21d4e:	ec51 0b10 	vmov	r0, r1, d0
   21d52:	2200      	movs	r2, #0
   21d54:	4b1d      	ldr	r3, [pc, #116]	; (21dcc <wcs_timescale_ev+0x1cc>)
   21d56:	f002 faf9 	bl	2434c <__adddf3>
                               UWB_CR_CARRIER_INTEGRATOR)) * MYNEWT_VAL(UWB_WCS_DTU)
   21d5a:	a317      	add	r3, pc, #92	; (adr r3, 21db8 <wcs_timescale_ev+0x1b8>)
   21d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   21d60:	f002 fcaa 	bl	246b8 <__aeabi_dmul>
            double z[] ={(double) wcs->master_epoch.lo,
   21d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
            double T = wcs->observed_interval / MYNEWT_VAL(UWB_WCS_DTU) ; // observed interval in seconds, master reference
   21d68:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   21d6c:	f002 fc6e 	bl	2464c <__aeabi_ul2d>
   21d70:	a311      	add	r3, pc, #68	; (adr r3, 21db8 <wcs_timescale_ev+0x1b8>)
   21d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   21d76:	f002 fdc9 	bl	2490c <__aeabi_ddiv>
   21d7a:	ec41 0b10 	vmov	d0, r0, r1
            double r[] = {MYNEWT_VAL(TIMESCALE_RVAR), MYNEWT_VAL(UWB_WCS_DTU) * 1e20};
   21d7e:	ad0a      	add	r5, sp, #40	; 0x28
   21d80:	4b13      	ldr	r3, [pc, #76]	; (21dd0 <wcs_timescale_ev+0x1d0>)
   21d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   21d84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            wcs->status.valid = timescale_main(timescale, z, q, r, T).valid;
   21d88:	462b      	mov	r3, r5
   21d8a:	aa04      	add	r2, sp, #16
   21d8c:	4669      	mov	r1, sp
   21d8e:	4630      	mov	r0, r6
   21d90:	f7fd ffa2 	bl	1fcd8 <timescale_main>
   21d94:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   21d98:	7823      	ldrb	r3, [r4, #0]
   21d9a:	f360 0382 	bfi	r3, r0, #2, #1
   21d9e:	7023      	strb	r3, [r4, #0]
   21da0:	e795      	b.n	21cce <wcs_timescale_ev+0xce>
            wcs->normalized_skew = (dpl_float64_t) 1.0l;
   21da2:	2200      	movs	r2, #0
   21da4:	4b09      	ldr	r3, [pc, #36]	; (21dcc <wcs_timescale_ev+0x1cc>)
   21da6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
            wcs->fractional_skew = (dpl_float64_t) 0.0l;
   21daa:	2200      	movs	r2, #0
   21dac:	2300      	movs	r3, #0
   21dae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
   21db2:	e7b1      	b.n	21d18 <wcs_timescale_ev+0x118>
   21db4:	f3af 8000 	nop.w
   21db8:	00000000 	.word	0x00000000
   21dbc:	422e8480 	.word	0x422e8480
   21dc0:	a0b5ed8d 	.word	0xa0b5ed8d
   21dc4:	3ff0c6f7 	.word	0x3ff0c6f7
   21dc8:	00028dd0 	.word	0x00028dd0
   21dcc:	3ff00000 	.word	0x3ff00000
   21dd0:	00028de8 	.word	0x00028de8
   21dd4:	00000000 	.word	0x00000000

00021dd8 <wcs_timescale_init>:
wcs_timescale_init(struct uwb_wcs_instance * wcs){
   21dd8:	b570      	push	{r4, r5, r6, lr}
   21dda:	b086      	sub	sp, #24
   21ddc:	4604      	mov	r4, r0
    struct uwb_ccp_instance * ccp = wcs->ccp;
   21dde:	6e06      	ldr	r6, [r0, #96]	; 0x60
    double q[] = { MYNEWT_VAL(TIMESCALE_QVAR) * 1.0l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.1l, MYNEWT_VAL(TIMESCALE_QVAR) * 0.01l};
   21de0:	46ec      	mov	ip, sp
   21de2:	4d1b      	ldr	r5, [pc, #108]	; (21e50 <wcs_timescale_init+0x78>)
   21de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21de6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21dea:	e895 0003 	ldmia.w	r5, {r0, r1}
   21dee:	e88c 0003 	stmia.w	ip, {r0, r1}
    wcs->timescale = timescale_init(NULL, NULL, q, T);
   21df2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 21e48 <wcs_timescale_init+0x70>
   21df6:	466a      	mov	r2, sp
   21df8:	2100      	movs	r1, #0
   21dfa:	4608      	mov	r0, r1
   21dfc:	f7fd fed6 	bl	1fbac <timescale_init>
   21e00:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    wcs->cbs = (struct uwb_mac_interface){
   21e04:	f104 0564 	add.w	r5, r4, #100	; 0x64
   21e08:	223c      	movs	r2, #60	; 0x3c
   21e0a:	2100      	movs	r1, #0
   21e0c:	4628      	mov	r0, r5
   21e0e:	f7ee fc34 	bl	1067a <memset>
   21e12:	2302      	movs	r3, #2
   21e14:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   21e18:	66a4      	str	r4, [r4, #104]	; 0x68
   21e1a:	4b0e      	ldr	r3, [pc, #56]	; (21e54 <wcs_timescale_init+0x7c>)
   21e1c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    wcs->normalized_skew = (dpl_float64_t) 1.0l;
   21e20:	2200      	movs	r2, #0
   21e22:	4b0d      	ldr	r3, [pc, #52]	; (21e58 <wcs_timescale_init+0x80>)
   21e24:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    wcs->fractional_skew = (dpl_float64_t) 0.0l;
   21e28:	2200      	movs	r2, #0
   21e2a:	2300      	movs	r3, #0
   21e2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
    uwb_mac_append_interface(ccp->dev_inst, &wcs->cbs);
   21e30:	4629      	mov	r1, r5
   21e32:	6830      	ldr	r0, [r6, #0]
   21e34:	f7e6 ff4e 	bl	8cd4 <uwb_mac_append_interface>
    uwb_wcs_set_postprocess(wcs, &wcs_timescale_ev);      // Using default process
   21e38:	4908      	ldr	r1, [pc, #32]	; (21e5c <wcs_timescale_init+0x84>)
   21e3a:	4620      	mov	r0, r4
   21e3c:	f7ee f9fc 	bl	10238 <uwb_wcs_set_postprocess>
}
   21e40:	4620      	mov	r0, r4
   21e42:	b006      	add	sp, #24
   21e44:	bd70      	pop	{r4, r5, r6, pc}
   21e46:	bf00      	nop
   21e48:	a0b5ed8d 	.word	0xa0b5ed8d
   21e4c:	3ff0c6f7 	.word	0x3ff0c6f7
   21e50:	00028dd0 	.word	0x00028dd0
   21e54:	00021b6d 	.word	0x00021b6d
   21e58:	3ff00000 	.word	0x3ff00000
   21e5c:	00021c01 	.word	0x00021c01

00021e60 <wcs_timescale_free>:
{
   21e60:	b510      	push	{r4, lr}
   21e62:	4604      	mov	r4, r0
    uwb_mac_remove_interface(wcs->ccp->dev_inst, wcs->cbs.id);
   21e64:	6e03      	ldr	r3, [r0, #96]	; 0x60
   21e66:	f8b0 1066 	ldrh.w	r1, [r0, #102]	; 0x66
   21e6a:	6818      	ldr	r0, [r3, #0]
   21e6c:	f7e6 ff57 	bl	8d1e <uwb_mac_remove_interface>
    timescale_free(wcs->timescale);
   21e70:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   21e74:	f7fd ff14 	bl	1fca0 <timescale_free>
}
   21e78:	bd10      	pop	{r4, pc}
	...

00021e7c <wcs_timescale_pkg_init>:
 *
 * @return void
 */
void
wcs_timescale_pkg_init(void)
{
   21e7c:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev * udev;
    struct uwb_ccp_instance * ccp;

#if MYNEWT_VAL(UWB_PKG_INIT_LOG)
    printf("{\"utime\": %lu,\"msg\": \"wcs_timescale_pkg_init\"}\n",dpl_cputime_ticks_to_usecs(dpl_cputime_get32()));
   21e7e:	f7f0 fd24 	bl	128ca <dpl_cputime_get32>
   21e82:	4601      	mov	r1, r0
   21e84:	480a      	ldr	r0, [pc, #40]	; (21eb0 <wcs_timescale_pkg_init+0x34>)
   21e86:	f7ef f811 	bl	10eac <printf>
#endif

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   21e8a:	2400      	movs	r4, #0
   21e8c:	e000      	b.n	21e90 <wcs_timescale_pkg_init+0x14>
   21e8e:	3401      	adds	r4, #1
   21e90:	2c02      	cmp	r4, #2
   21e92:	dc0b      	bgt.n	21eac <wcs_timescale_pkg_init+0x30>
        udev = uwb_dev_idx_lookup(i);
   21e94:	4620      	mov	r0, r4
   21e96:	f7e6 feed 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   21e9a:	2800      	cmp	r0, #0
   21e9c:	d0f7      	beq.n	21e8e <wcs_timescale_pkg_init+0x12>
            continue;
        }
        ccp = (struct uwb_ccp_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_CCP);
   21e9e:	2101      	movs	r1, #1
   21ea0:	f7e6 ff6d 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        wcs_timescale_init(ccp->wcs);
   21ea4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   21ea6:	f7ff ff97 	bl	21dd8 <wcs_timescale_init>
   21eaa:	e7f0      	b.n	21e8e <wcs_timescale_pkg_init+0x12>
    }
}
   21eac:	bd10      	pop	{r4, pc}
   21eae:	bf00      	nop
   21eb0:	00028d9c 	.word	0x00028d9c

00021eb4 <wcs_timescale_pkg_down>:
 *
 * @return void
 */
int
wcs_timescale_pkg_down(int reason)
{
   21eb4:	b510      	push	{r4, lr}
    int i;
    struct uwb_dev *udev;
    struct uwb_wcs_instance * wcs;

    for (i = 0; i < MYNEWT_VAL(UWB_DEVICE_MAX); i++) {
   21eb6:	2400      	movs	r4, #0
   21eb8:	e000      	b.n	21ebc <wcs_timescale_pkg_down+0x8>
   21eba:	3401      	adds	r4, #1
   21ebc:	2c02      	cmp	r4, #2
   21ebe:	dc0c      	bgt.n	21eda <wcs_timescale_pkg_down+0x26>
        udev = uwb_dev_idx_lookup(i);
   21ec0:	4620      	mov	r0, r4
   21ec2:	f7e6 fed7 	bl	8c74 <uwb_dev_idx_lookup>
        if (!udev) {
   21ec6:	2800      	cmp	r0, #0
   21ec8:	d0f7      	beq.n	21eba <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs = (struct uwb_wcs_instance*)uwb_mac_find_cb_inst_ptr(udev, UWBEXT_WCS);
   21eca:	2102      	movs	r1, #2
   21ecc:	f7e6 ff57 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        if (!wcs) {
   21ed0:	2800      	cmp	r0, #0
   21ed2:	d0f2      	beq.n	21eba <wcs_timescale_pkg_down+0x6>
            continue;
        }
        wcs_timescale_free(wcs);
   21ed4:	f7ff ffc4 	bl	21e60 <wcs_timescale_free>
   21ed8:	e7ef      	b.n	21eba <wcs_timescale_pkg_down+0x6>
    }

    return 0;
}
   21eda:	2000      	movs	r0, #0
   21edc:	bd10      	pop	{r4, pc}

00021ede <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   21ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   21ee0:	b300      	cbz	r0, 21f24 <realloc+0x46>
   21ee2:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   21ee4:	1e4b      	subs	r3, r1, #1
   21ee6:	f113 0f12 	cmn.w	r3, #18
   21eea:	d820      	bhi.n	21f2e <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   21eec:	311f      	adds	r1, #31
   21eee:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   21ef2:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   21ef6:	42a5      	cmp	r5, r4
   21ef8:	d302      	bcc.n	21f00 <realloc+0x22>
   21efa:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   21efe:	d21c      	bcs.n	21f3a <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   21f00:	3d10      	subs	r5, #16

		newptr = malloc(size);
   21f02:	4620      	mov	r0, r4
   21f04:	f7ee fb3c 	bl	10580 <malloc>
                if (newptr) {
   21f08:	4607      	mov	r7, r0
   21f0a:	b1a0      	cbz	r0, 21f36 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   21f0c:	4622      	mov	r2, r4
   21f0e:	42ac      	cmp	r4, r5
   21f10:	bf28      	it	cs
   21f12:	462a      	movcs	r2, r5
   21f14:	4631      	mov	r1, r6
   21f16:	f7ee fba3 	bl	10660 <memcpy>
                    free(ptr);
   21f1a:	4630      	mov	r0, r6
   21f1c:	f7ee fb66 	bl	105ec <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   21f20:	4638      	mov	r0, r7
   21f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   21f24:	4608      	mov	r0, r1
   21f26:	f7ee fb2b 	bl	10580 <malloc>
   21f2a:	4607      	mov	r7, r0
   21f2c:	e7f8      	b.n	21f20 <realloc+0x42>
		free(ptr);
   21f2e:	f7ee fb5d 	bl	105ec <free>
		return NULL;
   21f32:	2700      	movs	r7, #0
   21f34:	e7f4      	b.n	21f20 <realloc+0x42>
                    newptr = ptr;
   21f36:	4637      	mov	r7, r6
		return newptr;
   21f38:	e7f2      	b.n	21f20 <realloc+0x42>
		return ptr;
   21f3a:	4607      	mov	r7, r0
   21f3c:	e7f0      	b.n	21f20 <realloc+0x42>

00021f3e <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   21f3e:	b40e      	push	{r1, r2, r3}
   21f40:	b500      	push	{lr}
   21f42:	b082      	sub	sp, #8
   21f44:	ab03      	add	r3, sp, #12
   21f46:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   21f4a:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   21f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21f50:	f7ee ffbe 	bl	10ed0 <vsnprintf>
	va_end(ap);

	return rv;
}
   21f54:	b002      	add	sp, #8
   21f56:	f85d eb04 	ldr.w	lr, [sp], #4
   21f5a:	b003      	add	sp, #12
   21f5c:	4770      	bx	lr

00021f5e <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   21f5e:	e000      	b.n	21f62 <strchr+0x4>
		if (!*s)
			return NULL;
		s++;
   21f60:	3001      	adds	r0, #1
	while (*s != (char)c) {
   21f62:	7803      	ldrb	r3, [r0, #0]
   21f64:	b2ca      	uxtb	r2, r1
   21f66:	4293      	cmp	r3, r2
   21f68:	d003      	beq.n	21f72 <strchr+0x14>
		if (!*s)
   21f6a:	2b00      	cmp	r3, #0
   21f6c:	d1f8      	bne.n	21f60 <strchr+0x2>
			return NULL;
   21f6e:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   21f70:	4770      	bx	lr
   21f72:	4770      	bx	lr

00021f74 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   21f74:	b410      	push	{r4}
	char *q = dst;
   21f76:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   21f78:	780c      	ldrb	r4, [r1, #0]
   21f7a:	3101      	adds	r1, #1
   21f7c:	7014      	strb	r4, [r2, #0]
   21f7e:	3201      	adds	r2, #1
	} while (ch);
   21f80:	2c00      	cmp	r4, #0
   21f82:	d1f9      	bne.n	21f78 <strcpy+0x4>

	return dst;
}
   21f84:	f85d 4b04 	ldr.w	r4, [sp], #4
   21f88:	4770      	bx	lr

00021f8a <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   21f8a:	b410      	push	{r4}
   21f8c:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   21f8e:	2000      	movs	r0, #0

	while (n--) {
   21f90:	4614      	mov	r4, r2
   21f92:	3a01      	subs	r2, #1
   21f94:	b13c      	cbz	r4, 21fa6 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   21f96:	f813 4b01 	ldrb.w	r4, [r3], #1
   21f9a:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   21f9e:	1a20      	subs	r0, r4, r0
   21fa0:	d101      	bne.n	21fa6 <strncmp+0x1c>
   21fa2:	2c00      	cmp	r4, #0
   21fa4:	d1f4      	bne.n	21f90 <strncmp+0x6>
			break;
	}

	return d;
}
   21fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
   21faa:	4770      	bx	lr

00021fac <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   21fac:	4603      	mov	r3, r0
	const char *found = NULL;
   21fae:	2000      	movs	r0, #0

	while (*s) {
   21fb0:	e000      	b.n	21fb4 <strrchr+0x8>
		if (*s == (char)c)
			found = s;
		s++;
   21fb2:	3301      	adds	r3, #1
	while (*s) {
   21fb4:	781a      	ldrb	r2, [r3, #0]
   21fb6:	b12a      	cbz	r2, 21fc4 <strrchr+0x18>
		if (*s == (char)c)
   21fb8:	fa5f fc81 	uxtb.w	ip, r1
   21fbc:	4594      	cmp	ip, r2
   21fbe:	d1f8      	bne.n	21fb2 <strrchr+0x6>
			found = s;
   21fc0:	4618      	mov	r0, r3
   21fc2:	e7f6      	b.n	21fb2 <strrchr+0x6>
	}

	return (char *)found;
}
   21fc4:	4770      	bx	lr

00021fc6 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   21fc6:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   21fc8:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   21fca:	b14d      	cbz	r5, 21fe0 <strsep+0x1a>
   21fcc:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   21fce:	4628      	mov	r0, r5
   21fd0:	f000 f828 	bl	22024 <strpbrk>
	if (e)
   21fd4:	4603      	mov	r3, r0
   21fd6:	b110      	cbz	r0, 21fde <strsep+0x18>
		*e++ = '\0';
   21fd8:	2200      	movs	r2, #0
   21fda:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   21fde:	6023      	str	r3, [r4, #0]
	return s;
}
   21fe0:	4628      	mov	r0, r5
   21fe2:	bd38      	pop	{r3, r4, r5, pc}

00021fe4 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   21fe4:	b538      	push	{r3, r4, r5, lr}
   21fe6:	460d      	mov	r5, r1
   21fe8:	4614      	mov	r4, r2
	if (s)
   21fea:	b100      	cbz	r0, 21fee <strtok_r+0xa>
		*holder = s;
   21fec:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   21fee:	4629      	mov	r1, r5
   21ff0:	4620      	mov	r0, r4
   21ff2:	f7ff ffe8 	bl	21fc6 <strsep>
	} while (s && !*s);
   21ff6:	4603      	mov	r3, r0
   21ff8:	b110      	cbz	r0, 22000 <strtok_r+0x1c>
   21ffa:	7800      	ldrb	r0, [r0, #0]
   21ffc:	2800      	cmp	r0, #0
   21ffe:	d0f6      	beq.n	21fee <strtok_r+0xa>

	return s;
}
   22000:	4618      	mov	r0, r3
   22002:	bd38      	pop	{r3, r4, r5, pc}

00022004 <strtol>:
{
   22004:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   22006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2200a:	f7ee ffb5 	bl	10f78 <strntoumax>
}
   2200e:	bd08      	pop	{r3, pc}

00022010 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   22010:	b508      	push	{r3, lr}
   22012:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   22014:	4601      	mov	r1, r0
   22016:	4b02      	ldr	r3, [pc, #8]	; (22020 <vprintf+0x10>)
   22018:	6818      	ldr	r0, [r3, #0]
   2201a:	f7ee ff43 	bl	10ea4 <vfprintf>
}
   2201e:	bd08      	pop	{r3, pc}
   22020:	00026d98 	.word	0x00026d98

00022024 <strpbrk>:
*/

#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
   22024:	468c      	mov	ip, r1
  const char *c = s2;
  if (!*s1)
   22026:	7803      	ldrb	r3, [r0, #0]
   22028:	b183      	cbz	r3, 2204c <strpbrk+0x28>
  const char *c = s2;
   2202a:	460a      	mov	r2, r1
   2202c:	e001      	b.n	22032 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   2202e:	b953      	cbnz	r3, 22046 <strpbrk+0x22>
	break;
      s1++;
   22030:	3001      	adds	r0, #1
  while (*s1)
   22032:	7801      	ldrb	r1, [r0, #0]
   22034:	b139      	cbz	r1, 22046 <strpbrk+0x22>
      for (c = s2; *c; c++)
   22036:	4662      	mov	r2, ip
   22038:	7813      	ldrb	r3, [r2, #0]
   2203a:	2b00      	cmp	r3, #0
   2203c:	d0f7      	beq.n	2202e <strpbrk+0xa>
	  if (*s1 == *c)
   2203e:	428b      	cmp	r3, r1
   22040:	d0f5      	beq.n	2202e <strpbrk+0xa>
      for (c = s2; *c; c++)
   22042:	3201      	adds	r2, #1
   22044:	e7f8      	b.n	22038 <strpbrk+0x14>
    }

  if (*c == '\0')
   22046:	7813      	ldrb	r3, [r2, #0]
   22048:	b113      	cbz	r3, 22050 <strpbrk+0x2c>
   2204a:	4770      	bx	lr
    return (char *) NULL;
   2204c:	2000      	movs	r0, #0
   2204e:	4770      	bx	lr
    s1 = NULL;
   22050:	2000      	movs	r0, #0

  return (char *) s1;
}
   22052:	4770      	bx	lr

00022054 <buf_to_bota_nmgr_mbuf>:
#define CBOR_OVERHEAD    (36)

static struct os_mbuf*
buf_to_bota_nmgr_mbuf(uint8_t *buf, uint64_t len, uint64_t off, uint32_t size,
                      uint64_t src_slot, uint64_t dst_slot, uint64_t flags)
{
   22054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22058:	b094      	sub	sp, #80	; 0x50
   2205a:	4607      	mov	r7, r0
   2205c:	4690      	mov	r8, r2
   2205e:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
   22062:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
    struct mgmt_cbuf n_b;
    struct cbor_mbuf_writer writer;
    struct nmgr_hdr *hdr;
    struct os_mbuf *rsp;

    if (g_mbuf_pool) {
   22066:	4b51      	ldr	r3, [pc, #324]	; (221ac <buf_to_bota_nmgr_mbuf+0x158>)
   22068:	6818      	ldr	r0, [r3, #0]
   2206a:	2800      	cmp	r0, #0
   2206c:	d056      	beq.n	2211c <buf_to_bota_nmgr_mbuf+0xc8>
        rsp = os_mbuf_get_pkthdr(g_mbuf_pool, 0);
   2206e:	2100      	movs	r1, #0
   22070:	f7e8 fc1c 	bl	a8ac <os_mbuf_get_pkthdr>
   22074:	4605      	mov	r5, r0
    } else {
        rsp = os_msys_get_pkthdr(0, 0);
    }

    if (!rsp) {
   22076:	2d00      	cmp	r5, #0
   22078:	d056      	beq.n	22128 <buf_to_bota_nmgr_mbuf+0xd4>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
        return 0;
    }

    hdr = (struct nmgr_hdr *) os_mbuf_extend(rsp, sizeof(struct nmgr_hdr));
   2207a:	2108      	movs	r1, #8
   2207c:	4628      	mov	r0, r5
   2207e:	f7e8 fdb3 	bl	abe8 <os_mbuf_extend>
    if (!hdr) {
   22082:	4604      	mov	r4, r0
   22084:	2800      	cmp	r0, #0
   22086:	d058      	beq.n	2213a <buf_to_bota_nmgr_mbuf+0xe6>
        BOTA_ERR("could not get hdr\n");
        goto exit_err;
    }
    hdr->nh_len = 0;
   22088:	2600      	movs	r6, #0
   2208a:	8046      	strh	r6, [r0, #2]
    hdr->nh_flags = 0;
   2208c:	7046      	strb	r6, [r0, #1]
    hdr->nh_op = NMGR_OP_WRITE;
   2208e:	7803      	ldrb	r3, [r0, #0]
   22090:	2202      	movs	r2, #2
   22092:	f362 0302 	bfi	r3, r2, #0, #3
   22096:	7003      	strb	r3, [r0, #0]
    hdr->nh_group = htons(MGMT_GROUP_ID_BOTA);
   22098:	f44f 4382 	mov.w	r3, #16640	; 0x4100
   2209c:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = 0;
   2209e:	7186      	strb	r6, [r0, #6]
    hdr->nh_id = IMGMGR_NMGR_ID_UPLOAD;
   220a0:	2301      	movs	r3, #1
   220a2:	71c3      	strb	r3, [r0, #7]

    cbor_mbuf_writer_init(&writer, rsp);
   220a4:	4629      	mov	r1, r5
   220a6:	a802      	add	r0, sp, #8
   220a8:	f7f6 f93c 	bl	18324 <cbor_mbuf_writer_init>
    cbor_encoder_init(&n_b.encoder, &writer.enc, 0);
   220ac:	4632      	mov	r2, r6
   220ae:	a902      	add	r1, sp, #8
   220b0:	a808      	add	r0, sp, #32
   220b2:	f7f6 f9cc 	bl	1844e <cbor_encoder_init>
    rc = cbor_encoder_create_map(&n_b.encoder, &payload_enc, CborIndefiniteLength);
   220b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   220ba:	a910      	add	r1, sp, #64	; 0x40
   220bc:	a808      	add	r0, sp, #32
   220be:	f7f6 fa92 	bl	185e6 <cbor_encoder_create_map>
    if (rc != 0) {
   220c2:	2800      	cmp	r0, #0
   220c4:	d140      	bne.n	22148 <buf_to_bota_nmgr_mbuf+0xf4>

    struct mgmt_cbuf *cb = &n_b;

    CborError g_err = CborNoError;
    /* Only pack in the flags, slotid etc on the first offset sent */
    if (off == 0) {
   220c6:	ea5a 0309 	orrs.w	r3, sl, r9
   220ca:	d048      	beq.n	2215e <buf_to_bota_nmgr_mbuf+0x10a>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   220cc:	2201      	movs	r2, #1
   220ce:	4938      	ldr	r1, [pc, #224]	; (221b0 <buf_to_bota_nmgr_mbuf+0x15c>)
   220d0:	a808      	add	r0, sp, #32
   220d2:	f7f6 fa7c 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, size);
        g_err |= cbor_encode_text_stringz(&cb->encoder, "f");
        g_err |= cbor_encode_uint(&cb->encoder, flags);
    }
    g_err |= cbor_encode_text_stringz(&cb->encoder, "o");
    g_err |= cbor_encode_uint(&cb->encoder, off);
   220d6:	4652      	mov	r2, sl
   220d8:	464b      	mov	r3, r9
   220da:	a808      	add	r0, sp, #32
   220dc:	f7f6 f9bc 	bl	18458 <cbor_encode_uint>
   220e0:	2201      	movs	r2, #1
   220e2:	4934      	ldr	r1, [pc, #208]	; (221b4 <buf_to_bota_nmgr_mbuf+0x160>)
   220e4:	a808      	add	r0, sp, #32
   220e6:	f7f6 fa72 	bl	185ce <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "d");
    g_err |= cbor_encode_byte_string(&cb->encoder, buf, len);
   220ea:	4642      	mov	r2, r8
   220ec:	4639      	mov	r1, r7
   220ee:	a808      	add	r0, sp, #32
   220f0:	f7f6 fa66 	bl	185c0 <cbor_encode_byte_string>

    rc = cbor_encoder_close_container(&n_b.encoder, &payload_enc);
   220f4:	a910      	add	r1, sp, #64	; 0x40
   220f6:	a808      	add	r0, sp, #32
   220f8:	f7f6 fa83 	bl	18602 <cbor_encoder_close_container>
    if (rc != 0) {
   220fc:	2800      	cmp	r0, #0
   220fe:	d14d      	bne.n	2219c <buf_to_bota_nmgr_mbuf+0x148>
{   return encoder->writer->bytes_written; }
   22100:	9b08      	ldr	r3, [sp, #32]
   22102:	685b      	ldr	r3, [r3, #4]
        BOTA_ERR("could not close container\n");
        goto exit_err;
    }
    hdr->nh_len += cbor_encode_bytes_written(&n_b.encoder);
   22104:	8862      	ldrh	r2, [r4, #2]
   22106:	4413      	add	r3, r2
   22108:	b29b      	uxth	r3, r3
   2210a:	8063      	strh	r3, [r4, #2]
    hdr->nh_len = htons(hdr->nh_len);
   2210c:	021a      	lsls	r2, r3, #8
   2210e:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
   22112:	8063      	strh	r3, [r4, #2]
    return rsp;

exit_err:
    os_mbuf_free_chain(rsp);
    return 0;
}
   22114:	4628      	mov	r0, r5
   22116:	b014      	add	sp, #80	; 0x50
   22118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rsp = os_msys_get_pkthdr(0, 0);
   2211c:	2100      	movs	r1, #0
   2211e:	4608      	mov	r0, r1
   22120:	f7e7 fd4a 	bl	9bb8 <os_msys_get_pkthdr>
   22124:	4605      	mov	r5, r0
   22126:	e7a6      	b.n	22076 <buf_to_bota_nmgr_mbuf+0x22>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
   22128:	2324      	movs	r3, #36	; 0x24
   2212a:	9300      	str	r3, [sp, #0]
   2212c:	4b22      	ldr	r3, [pc, #136]	; (221b8 <buf_to_bota_nmgr_mbuf+0x164>)
   2212e:	2203      	movs	r2, #3
   22130:	2146      	movs	r1, #70	; 0x46
   22132:	4822      	ldr	r0, [pc, #136]	; (221bc <buf_to_bota_nmgr_mbuf+0x168>)
   22134:	f7f2 fa50 	bl	145d8 <log_printf>
        return 0;
   22138:	e7ec      	b.n	22114 <buf_to_bota_nmgr_mbuf+0xc0>
        BOTA_ERR("could not get hdr\n");
   2213a:	4b21      	ldr	r3, [pc, #132]	; (221c0 <buf_to_bota_nmgr_mbuf+0x16c>)
   2213c:	2203      	movs	r2, #3
   2213e:	2146      	movs	r1, #70	; 0x46
   22140:	481e      	ldr	r0, [pc, #120]	; (221bc <buf_to_bota_nmgr_mbuf+0x168>)
   22142:	f7f2 fa49 	bl	145d8 <log_printf>
        goto exit_err;
   22146:	e005      	b.n	22154 <buf_to_bota_nmgr_mbuf+0x100>
        BOTA_ERR("could not create map\n");
   22148:	4b1e      	ldr	r3, [pc, #120]	; (221c4 <buf_to_bota_nmgr_mbuf+0x170>)
   2214a:	2203      	movs	r2, #3
   2214c:	2146      	movs	r1, #70	; 0x46
   2214e:	481b      	ldr	r0, [pc, #108]	; (221bc <buf_to_bota_nmgr_mbuf+0x168>)
   22150:	f7f2 fa42 	bl	145d8 <log_printf>
    os_mbuf_free_chain(rsp);
   22154:	4628      	mov	r0, r5
   22156:	f7e8 fbcc 	bl	a8f2 <os_mbuf_free_chain>
    return 0;
   2215a:	2500      	movs	r5, #0
   2215c:	e7da      	b.n	22114 <buf_to_bota_nmgr_mbuf+0xc0>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2215e:	2201      	movs	r2, #1
   22160:	4919      	ldr	r1, [pc, #100]	; (221c8 <buf_to_bota_nmgr_mbuf+0x174>)
   22162:	a808      	add	r0, sp, #32
   22164:	f7f6 fa33 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, dst_slot);
   22168:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
   2216c:	a808      	add	r0, sp, #32
   2216e:	f7f6 f973 	bl	18458 <cbor_encode_uint>
   22172:	2201      	movs	r2, #1
   22174:	4915      	ldr	r1, [pc, #84]	; (221cc <buf_to_bota_nmgr_mbuf+0x178>)
   22176:	a808      	add	r0, sp, #32
   22178:	f7f6 fa29 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, size);
   2217c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2217e:	2300      	movs	r3, #0
   22180:	a808      	add	r0, sp, #32
   22182:	f7f6 f969 	bl	18458 <cbor_encode_uint>
   22186:	2201      	movs	r2, #1
   22188:	4911      	ldr	r1, [pc, #68]	; (221d0 <buf_to_bota_nmgr_mbuf+0x17c>)
   2218a:	a808      	add	r0, sp, #32
   2218c:	f7f6 fa1f 	bl	185ce <cbor_encode_text_string>
        g_err |= cbor_encode_uint(&cb->encoder, flags);
   22190:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
   22194:	a808      	add	r0, sp, #32
   22196:	f7f6 f95f 	bl	18458 <cbor_encode_uint>
   2219a:	e797      	b.n	220cc <buf_to_bota_nmgr_mbuf+0x78>
        BOTA_ERR("could not close container\n");
   2219c:	4b0d      	ldr	r3, [pc, #52]	; (221d4 <buf_to_bota_nmgr_mbuf+0x180>)
   2219e:	2203      	movs	r2, #3
   221a0:	2146      	movs	r1, #70	; 0x46
   221a2:	4806      	ldr	r0, [pc, #24]	; (221bc <buf_to_bota_nmgr_mbuf+0x168>)
   221a4:	f7f2 fa18 	bl	145d8 <log_printf>
        goto exit_err;
   221a8:	e7d4      	b.n	22154 <buf_to_bota_nmgr_mbuf+0x100>
   221aa:	bf00      	nop
   221ac:	200058f8 	.word	0x200058f8
   221b0:	00028374 	.word	0x00028374
   221b4:	00026314 	.word	0x00026314
   221b8:	00028df8 	.word	0x00028df8
   221bc:	200058e0 	.word	0x200058e0
   221c0:	00028e10 	.word	0x00028e10
   221c4:	00028e24 	.word	0x00028e24
   221c8:	00027964 	.word	0x00027964
   221cc:	000274e0 	.word	0x000274e0
   221d0:	00028e3c 	.word	0x00028e3c
   221d4:	00028e40 	.word	0x00028e40

000221d8 <bcast_ota_get_packet>:

/* TODO: Cull leading/trailing 0xffff to speed up transfer  */
int
bcast_ota_get_packet(int src_slot, bcast_ota_mode_t mode, int max_transfer_unit,
                     struct os_mbuf **rsp, uint64_t flags)
{
   221d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   221dc:	b08e      	sub	sp, #56	; 0x38
   221de:	4607      	mov	r7, r0
   221e0:	460e      	mov	r6, r1
   221e2:	4614      	mov	r4, r2
   221e4:	4698      	mov	r8, r3
    uint32_t img_flags;
    int bufsz;
    uint8_t *buf;
    const struct flash_area *s_fa;
    struct image_version ver;
    int fa_id = flash_area_id_from_image_slot(src_slot);
   221e6:	f7f2 f8b7 	bl	14358 <flash_area_id_from_image_slot>
   221ea:	4605      	mov	r5, r0

    /* Check source image */
    bufsz = max_transfer_unit-CBOR_OVERHEAD;
   221ec:	3c24      	subs	r4, #36	; 0x24
    if (mode == BCAST_MODE_RESET_OFFSET) {
   221ee:	2e01      	cmp	r6, #1
   221f0:	d01c      	beq.n	2222c <bcast_ota_get_packet+0x54>
        }
        BOTA_INFO("ver: %d.%d.%d.%d\n", ver.iv_major, ver.iv_minor,
                   ver.iv_revision, ver.iv_build_num);
    }

    buf = (uint8_t*)malloc(bufsz);
   221f2:	4620      	mov	r0, r4
   221f4:	f7ee f9c4 	bl	10580 <malloc>
    if (!buf) {
   221f8:	4681      	mov	r9, r0
   221fa:	2800      	cmp	r0, #0
   221fc:	d075      	beq.n	222ea <bcast_ota_get_packet+0x112>
        return OS_ENOMEM;
    }

    rc = flash_area_open(fa_id, &s_fa);
   221fe:	a90c      	add	r1, sp, #48	; 0x30
   22200:	b2e8      	uxtb	r0, r5
   22202:	f7f1 ffe9 	bl	141d8 <flash_area_open>
   22206:	4605      	mov	r5, r0
    if (mode == BCAST_MODE_RESEND_END) {
   22208:	2e02      	cmp	r6, #2
   2220a:	d02d      	beq.n	22268 <bcast_ota_get_packet+0x90>
        /* Resend the end */
        off = s_fa->fa_size - bufsz;
    }

    if (off < s_fa->fa_size) {
   2220c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2220e:	6883      	ldr	r3, [r0, #8]
   22210:	4a37      	ldr	r2, [pc, #220]	; (222f0 <bcast_ota_get_packet+0x118>)
   22212:	6811      	ldr	r1, [r2, #0]
   22214:	428b      	cmp	r3, r1
   22216:	d82d      	bhi.n	22274 <bcast_ota_get_packet+0x9c>
            goto exit_err;
        }

        off += len;
    } else {
        *rsp = 0;
   22218:	2300      	movs	r3, #0
   2221a:	f8c8 3000 	str.w	r3, [r8]
    }
exit_err:
    flash_area_close(s_fa);
    free(buf);
   2221e:	4648      	mov	r0, r9
   22220:	f7ee f9e4 	bl	105ec <free>
    return rc;
}
   22224:	4628      	mov	r0, r5
   22226:	b00e      	add	sp, #56	; 0x38
   22228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        off = 0;
   2222c:	2200      	movs	r2, #0
   2222e:	4b30      	ldr	r3, [pc, #192]	; (222f0 <bcast_ota_get_packet+0x118>)
   22230:	601a      	str	r2, [r3, #0]
        rc = imgr_read_info(src_slot, &ver, 0, &img_flags);
   22232:	ab0d      	add	r3, sp, #52	; 0x34
   22234:	a90a      	add	r1, sp, #40	; 0x28
   22236:	4638      	mov	r0, r7
   22238:	f7ee ff86 	bl	11148 <imgr_read_info>
        if (rc != 0) {
   2223c:	b108      	cbz	r0, 22242 <bcast_ota_get_packet+0x6a>
            return 1;
   2223e:	2501      	movs	r5, #1
   22240:	e7f0      	b.n	22224 <bcast_ota_get_packet+0x4c>
        BOTA_INFO("ver: %d.%d.%d.%d\n", ver.iv_major, ver.iv_minor,
   22242:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   22246:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
   2224a:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
   2224e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22250:	9003      	str	r0, [sp, #12]
   22252:	9102      	str	r1, [sp, #8]
   22254:	9201      	str	r2, [sp, #4]
   22256:	9300      	str	r3, [sp, #0]
   22258:	4b26      	ldr	r3, [pc, #152]	; (222f4 <bcast_ota_get_packet+0x11c>)
   2225a:	2201      	movs	r2, #1
   2225c:	2146      	movs	r1, #70	; 0x46
   2225e:	4826      	ldr	r0, [pc, #152]	; (222f8 <bcast_ota_get_packet+0x120>)
   22260:	f7f2 f9ba 	bl	145d8 <log_printf>
        bufsz = sizeof(struct image_header)+8;
   22264:	2428      	movs	r4, #40	; 0x28
   22266:	e7c4      	b.n	221f2 <bcast_ota_get_packet+0x1a>
        off = s_fa->fa_size - bufsz;
   22268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2226a:	689b      	ldr	r3, [r3, #8]
   2226c:	1b1b      	subs	r3, r3, r4
   2226e:	4a20      	ldr	r2, [pc, #128]	; (222f0 <bcast_ota_get_packet+0x118>)
   22270:	6013      	str	r3, [r2, #0]
   22272:	e7cb      	b.n	2220c <bcast_ota_get_packet+0x34>
        len = (int)s_fa->fa_size - (int)off;
   22274:	1a5b      	subs	r3, r3, r1
        len = (len>bufsz) ? bufsz : len;
   22276:	429c      	cmp	r4, r3
   22278:	bfa8      	it	ge
   2227a:	461c      	movge	r4, r3
        rc = flash_area_read(s_fa, off, buf, len);
   2227c:	4623      	mov	r3, r4
   2227e:	464a      	mov	r2, r9
   22280:	f7f2 f80a 	bl	14298 <flash_area_read>
   22284:	4605      	mov	r5, r0
        BOTA_DEBUG("Reading flash at %lX, %d bytes rc=%d\n", off, len, rc);
   22286:	9002      	str	r0, [sp, #8]
   22288:	9401      	str	r4, [sp, #4]
   2228a:	4e19      	ldr	r6, [pc, #100]	; (222f0 <bcast_ota_get_packet+0x118>)
   2228c:	6833      	ldr	r3, [r6, #0]
   2228e:	9300      	str	r3, [sp, #0]
   22290:	4b1a      	ldr	r3, [pc, #104]	; (222fc <bcast_ota_get_packet+0x124>)
   22292:	2200      	movs	r2, #0
   22294:	2146      	movs	r1, #70	; 0x46
   22296:	4818      	ldr	r0, [pc, #96]	; (222f8 <bcast_ota_get_packet+0x120>)
   22298:	f7f2 f99e 	bl	145d8 <log_printf>
        *rsp = buf_to_bota_nmgr_mbuf(buf, len, off, s_fa->fa_size, src_slot, 1, flags);
   2229c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   222a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   222a4:	2201      	movs	r2, #1
   222a6:	2300      	movs	r3, #0
   222a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   222ac:	17fb      	asrs	r3, r7, #31
   222ae:	9704      	str	r7, [sp, #16]
   222b0:	9305      	str	r3, [sp, #20]
   222b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   222b4:	689b      	ldr	r3, [r3, #8]
   222b6:	9302      	str	r3, [sp, #8]
   222b8:	6833      	ldr	r3, [r6, #0]
   222ba:	9300      	str	r3, [sp, #0]
   222bc:	2300      	movs	r3, #0
   222be:	9301      	str	r3, [sp, #4]
   222c0:	4622      	mov	r2, r4
   222c2:	17e3      	asrs	r3, r4, #31
   222c4:	4648      	mov	r0, r9
   222c6:	f7ff fec5 	bl	22054 <buf_to_bota_nmgr_mbuf>
   222ca:	f8c8 0000 	str.w	r0, [r8]
        if (*rsp == 0) {
   222ce:	b120      	cbz	r0, 222da <bcast_ota_get_packet+0x102>
        off += len;
   222d0:	4a07      	ldr	r2, [pc, #28]	; (222f0 <bcast_ota_get_packet+0x118>)
   222d2:	6813      	ldr	r3, [r2, #0]
   222d4:	441c      	add	r4, r3
   222d6:	6014      	str	r4, [r2, #0]
   222d8:	e7a1      	b.n	2221e <bcast_ota_get_packet+0x46>
            BOTA_ERR("Could not convert flash data to mbuf\n");
   222da:	4b09      	ldr	r3, [pc, #36]	; (22300 <bcast_ota_get_packet+0x128>)
   222dc:	2203      	movs	r2, #3
   222de:	2146      	movs	r1, #70	; 0x46
   222e0:	4805      	ldr	r0, [pc, #20]	; (222f8 <bcast_ota_get_packet+0x120>)
   222e2:	f7f2 f979 	bl	145d8 <log_printf>
            rc = OS_ENOMEM;
   222e6:	2501      	movs	r5, #1
            goto exit_err;
   222e8:	e799      	b.n	2221e <bcast_ota_get_packet+0x46>
        return OS_ENOMEM;
   222ea:	2501      	movs	r5, #1
   222ec:	e79a      	b.n	22224 <bcast_ota_get_packet+0x4c>
   222ee:	bf00      	nop
   222f0:	200058fc 	.word	0x200058fc
   222f4:	00028e5c 	.word	0x00028e5c
   222f8:	200058e0 	.word	0x200058e0
   222fc:	00028e70 	.word	0x00028e70
   22300:	00028e98 	.word	0x00028e98

00022304 <bcast_ota_get_reset_mbuf>:


struct os_mbuf*
bcast_ota_get_reset_mbuf(void)
{
   22304:	b530      	push	{r4, r5, lr}
   22306:	b083      	sub	sp, #12
    struct nmgr_hdr *hdr;
    struct os_mbuf *rsp;

    if (g_mbuf_pool) {
   22308:	4b1b      	ldr	r3, [pc, #108]	; (22378 <bcast_ota_get_reset_mbuf+0x74>)
   2230a:	6818      	ldr	r0, [r3, #0]
   2230c:	b1c8      	cbz	r0, 22342 <bcast_ota_get_reset_mbuf+0x3e>
        rsp = os_mbuf_get_pkthdr(g_mbuf_pool, 0);
   2230e:	2100      	movs	r1, #0
   22310:	f7e8 facc 	bl	a8ac <os_mbuf_get_pkthdr>
   22314:	4605      	mov	r5, r0
    } else {
        rsp = os_msys_get_pkthdr(0, 0);
    }

    if (!rsp) {
   22316:	b1d5      	cbz	r5, 2234e <bcast_ota_get_reset_mbuf+0x4a>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
        return 0;
    }

    hdr = (struct nmgr_hdr *) os_mbuf_extend(rsp, sizeof(struct nmgr_hdr));
   22318:	2108      	movs	r1, #8
   2231a:	4628      	mov	r0, r5
   2231c:	f7e8 fc64 	bl	abe8 <os_mbuf_extend>
    if (!hdr) {
   22320:	4604      	mov	r4, r0
   22322:	b1e8      	cbz	r0, 22360 <bcast_ota_get_reset_mbuf+0x5c>
        BOTA_ERR("could not get hdr\n");
        goto exit_err;
    }
    hdr->nh_len = 0;
   22324:	2300      	movs	r3, #0
   22326:	8043      	strh	r3, [r0, #2]
    hdr->nh_flags = 0;
   22328:	7043      	strb	r3, [r0, #1]
    hdr->nh_op = NMGR_OP_WRITE;
   2232a:	7802      	ldrb	r2, [r0, #0]
   2232c:	2102      	movs	r1, #2
   2232e:	f361 0202 	bfi	r2, r1, #0, #3
   22332:	7002      	strb	r2, [r0, #0]
    hdr->nh_group = htons(MGMT_GROUP_ID_DEFAULT);
   22334:	8083      	strh	r3, [r0, #4]
    hdr->nh_seq = 0;
   22336:	7183      	strb	r3, [r0, #6]
    hdr->nh_id = NMGR_ID_RESET;
   22338:	2305      	movs	r3, #5
   2233a:	71c3      	strb	r3, [r0, #7]
    return rsp;

exit_err:
    os_mbuf_free_chain(rsp);
    return 0;
}
   2233c:	4628      	mov	r0, r5
   2233e:	b003      	add	sp, #12
   22340:	bd30      	pop	{r4, r5, pc}
        rsp = os_msys_get_pkthdr(0, 0);
   22342:	2100      	movs	r1, #0
   22344:	4608      	mov	r0, r1
   22346:	f7e7 fc37 	bl	9bb8 <os_msys_get_pkthdr>
   2234a:	4605      	mov	r5, r0
   2234c:	e7e3      	b.n	22316 <bcast_ota_get_reset_mbuf+0x12>
        BOTA_ERR("could not get mbuf %d\n", CBOR_OVERHEAD);
   2234e:	2324      	movs	r3, #36	; 0x24
   22350:	9300      	str	r3, [sp, #0]
   22352:	4b0a      	ldr	r3, [pc, #40]	; (2237c <bcast_ota_get_reset_mbuf+0x78>)
   22354:	2203      	movs	r2, #3
   22356:	2146      	movs	r1, #70	; 0x46
   22358:	4809      	ldr	r0, [pc, #36]	; (22380 <bcast_ota_get_reset_mbuf+0x7c>)
   2235a:	f7f2 f93d 	bl	145d8 <log_printf>
        return 0;
   2235e:	e7ed      	b.n	2233c <bcast_ota_get_reset_mbuf+0x38>
        BOTA_ERR("could not get hdr\n");
   22360:	4b08      	ldr	r3, [pc, #32]	; (22384 <bcast_ota_get_reset_mbuf+0x80>)
   22362:	2203      	movs	r2, #3
   22364:	2146      	movs	r1, #70	; 0x46
   22366:	4806      	ldr	r0, [pc, #24]	; (22380 <bcast_ota_get_reset_mbuf+0x7c>)
   22368:	f7f2 f936 	bl	145d8 <log_printf>
    os_mbuf_free_chain(rsp);
   2236c:	4628      	mov	r0, r5
   2236e:	f7e8 fac0 	bl	a8f2 <os_mbuf_free_chain>
    return 0;
   22372:	4625      	mov	r5, r4
   22374:	e7e2      	b.n	2233c <bcast_ota_get_reset_mbuf+0x38>
   22376:	bf00      	nop
   22378:	200058f8 	.word	0x200058f8
   2237c:	00028df8 	.word	0x00028df8
   22380:	200058e0 	.word	0x200058e0
   22384:	00028e10 	.word	0x00028e10

00022388 <bcast_ota_pkg_init>:
    g_mbuf_pool = mbuf_pool;
}

void
bcast_ota_pkg_init(void)
{
   22388:	b510      	push	{r4, lr}
   2238a:	b082      	sub	sp, #8
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2238c:	4b0e      	ldr	r3, [pc, #56]	; (223c8 <bcast_ota_pkg_init+0x40>)
   2238e:	781b      	ldrb	r3, [r3, #0]
   22390:	b1ab      	cbz	r3, 223be <bcast_ota_pkg_init+0x36>

    /* Init log */
    log_register("bota", &g_bcast_ota_log, &log_console_handler,
   22392:	2300      	movs	r3, #0
   22394:	9300      	str	r3, [sp, #0]
   22396:	4a0d      	ldr	r2, [pc, #52]	; (223cc <bcast_ota_pkg_init+0x44>)
   22398:	490d      	ldr	r1, [pc, #52]	; (223d0 <bcast_ota_pkg_init+0x48>)
   2239a:	480e      	ldr	r0, [pc, #56]	; (223d4 <bcast_ota_pkg_init+0x4c>)
   2239c:	f7f2 f966 	bl	1466c <log_register>
                 NULL, LOG_SYSLEVEL);


    bcast_ota_nmgr_module_init();
   223a0:	f000 fc30 	bl	22c04 <bcast_ota_nmgr_module_init>

#if MYNEWT_VAL(BCAST_OTA_CLI)
    int rc;
    rc = bota_cli_register();
   223a4:	f000 f9be 	bl	22724 <bota_cli_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   223a8:	b138      	cbz	r0, 223ba <bcast_ota_pkg_init+0x32>
   223aa:	2000      	movs	r0, #0
   223ac:	9000      	str	r0, [sp, #0]
   223ae:	4b0a      	ldr	r3, [pc, #40]	; (223d8 <bcast_ota_pkg_init+0x50>)
   223b0:	681c      	ldr	r4, [r3, #0]
   223b2:	4603      	mov	r3, r0
   223b4:	4602      	mov	r2, r0
   223b6:	4601      	mov	r1, r0
   223b8:	47a0      	blx	r4
#endif
}
   223ba:	b002      	add	sp, #8
   223bc:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   223be:	461a      	mov	r2, r3
   223c0:	4619      	mov	r1, r3
   223c2:	4618      	mov	r0, r3
   223c4:	f7e6 fefe 	bl	91c4 <__assert_func>
   223c8:	2000538c 	.word	0x2000538c
   223cc:	000271c4 	.word	0x000271c4
   223d0:	200058e0 	.word	0x200058e0
   223d4:	00028ec0 	.word	0x00028ec0
   223d8:	20000308 	.word	0x20000308

000223dc <nmgr_mstr_get_mtu>:

static uint16_t
nmgr_mstr_get_mtu(struct os_mbuf *m)
{
    return 196;
}
   223dc:	20c4      	movs	r0, #196	; 0xc4
   223de:	4770      	bx	lr

000223e0 <check_image>:
static struct shell_cmd shell_bota_cmd = SHELL_CMD_EXT("bota", bota_cli_cmd, &cmd_bota_help);

#define TMPBUF_SZ  256
static int
check_image(const struct flash_area *fap, struct streamer *streamer)
{
   223e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   223e2:	b0a7      	sub	sp, #156	; 0x9c
   223e4:	4604      	mov	r4, r0
   223e6:	460d      	mov	r5, r1
    int rc;
    struct image_header hdr;
    uint8_t hash[IMGMGR_HASH_LEN];
    char hash_str[IMGMGR_HASH_LEN * 2 + 1];

    rc = flash_area_read(fap, 0, &hdr, sizeof(struct image_header));
   223e8:	2320      	movs	r3, #32
   223ea:	aa1e      	add	r2, sp, #120	; 0x78
   223ec:	2100      	movs	r1, #0
   223ee:	f7f1 ff53 	bl	14298 <flash_area_read>
    if (rc!=0) {
   223f2:	b118      	cbz	r0, 223fc <check_image+0x1c>
        return OS_ENOMEM;
   223f4:	2401      	movs	r4, #1
    free(tmpbuf);

    streamer_printf(streamer, "computed hash: %s\n",
                   hex_format(hash, IMGMGR_HASH_LEN, hash_str, sizeof(hash_str)));
    return rc;
}
   223f6:	4620      	mov	r0, r4
   223f8:	b027      	add	sp, #156	; 0x9c
   223fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    void *tmpbuf = malloc(TMPBUF_SZ);
   223fc:	f44f 7080 	mov.w	r0, #256	; 0x100
   22400:	f7ee f8be 	bl	10580 <malloc>
    if (!tmpbuf) {
   22404:	4607      	mov	r7, r0
   22406:	b1d8      	cbz	r0, 22440 <check_image+0x60>
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
   22408:	ae16      	add	r6, sp, #88	; 0x58
   2240a:	9602      	str	r6, [sp, #8]
   2240c:	2300      	movs	r3, #0
   2240e:	9301      	str	r3, [sp, #4]
   22410:	9300      	str	r3, [sp, #0]
   22412:	f44f 7380 	mov.w	r3, #256	; 0x100
   22416:	4602      	mov	r2, r0
   22418:	4621      	mov	r1, r4
   2241a:	a81e      	add	r0, sp, #120	; 0x78
   2241c:	f001 f906 	bl	2362c <bootutil_img_validate>
   22420:	4604      	mov	r4, r0
    free(tmpbuf);
   22422:	4638      	mov	r0, r7
   22424:	f7ee f8e2 	bl	105ec <free>
    streamer_printf(streamer, "computed hash: %s\n",
   22428:	2341      	movs	r3, #65	; 0x41
   2242a:	aa05      	add	r2, sp, #20
   2242c:	2120      	movs	r1, #32
   2242e:	4630      	mov	r0, r6
   22430:	f7f5 fb48 	bl	17ac4 <hex_format>
   22434:	4602      	mov	r2, r0
   22436:	4903      	ldr	r1, [pc, #12]	; (22444 <check_image+0x64>)
   22438:	4628      	mov	r0, r5
   2243a:	f7f0 fb41 	bl	12ac0 <streamer_printf>
    return rc;
   2243e:	e7da      	b.n	223f6 <check_image+0x16>
        return OS_ENOMEM;
   22440:	2401      	movs	r4, #1
   22442:	e7d8      	b.n	223f6 <check_image+0x16>
   22444:	00028ec8 	.word	0x00028ec8

00022448 <txim_ev_cb>:
    return rc;
}

static void
txim_ev_cb(struct os_event *ev)
{
   22448:	b530      	push	{r4, r5, lr}
   2244a:	b085      	sub	sp, #20
    struct os_mbuf *om = 0;
   2244c:	2300      	movs	r3, #0
   2244e:	9303      	str	r3, [sp, #12]
    /* Don't proceed unless there's plenty of room in the queue */
    if (os_msys_num_free() < os_msys_count()/4) {
   22450:	f7e7 fbd2 	bl	9bf8 <os_msys_num_free>
   22454:	4604      	mov	r4, r0
   22456:	f7e7 fbc1 	bl	9bdc <os_msys_count>
   2245a:	1e03      	subs	r3, r0, #0
   2245c:	db33      	blt.n	224c6 <txim_ev_cb+0x7e>
   2245e:	ebb4 0fa3 	cmp.w	r4, r3, asr #2
   22462:	db32      	blt.n	224ca <txim_ev_cb+0x82>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/10);
        return;
    }
    nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   22464:	2000      	movs	r0, #0
   22466:	f7e6 fc05 	bl	8c74 <uwb_dev_idx_lookup>
   2246a:	2113      	movs	r1, #19
   2246c:	f7e6 fc87 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
   22470:	4605      	mov	r5, r0
    bcast_ota_get_packet(tx_im_inst.slot_id, (tx_im_inst.reset>0)?
   22472:	4c30      	ldr	r4, [pc, #192]	; (22534 <txim_ev_cb+0xec>)
   22474:	f994 1000 	ldrsb.w	r1, [r4]
   22478:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   2247c:	e9cd 2300 	strd	r2, r3, [sp]
   22480:	ab03      	add	r3, sp, #12
   22482:	68a2      	ldr	r2, [r4, #8]
   22484:	2900      	cmp	r1, #0
   22486:	bfd4      	ite	le
   22488:	2100      	movle	r1, #0
   2248a:	2101      	movgt	r1, #1
   2248c:	6860      	ldr	r0, [r4, #4]
   2248e:	f7ff fea3 	bl	221d8 <bcast_ota_get_packet>
                         BCAST_MODE_RESET_OFFSET : BCAST_MODE_NONE,
                         tx_im_inst.blocksize, &om, tx_im_inst.flags);
    if (om) {
   22492:	9b03      	ldr	r3, [sp, #12]
   22494:	b31b      	cbz	r3, 224de <txim_ev_cb+0x96>
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   22496:	f240 4221 	movw	r2, #1057	; 0x421
   2249a:	8861      	ldrh	r1, [r4, #2]
   2249c:	4628      	mov	r0, r5
   2249e:	f7e8 ff21 	bl	b2e4 <uwb_nmgr_queue_tx>
        if (tx_im_inst.reset>0) {
   224a2:	f994 3000 	ldrsb.w	r3, [r4]
   224a6:	2b00      	cmp	r3, #0
   224a8:	dd14      	ble.n	224d4 <txim_ev_cb+0x8c>
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/5);
   224aa:	2119      	movs	r1, #25
   224ac:	f104 000c 	add.w	r0, r4, #12
   224b0:	f7e7 f83a 	bl	9528 <os_callout_reset>
            tx_im_inst.reset--;
   224b4:	f994 3000 	ldrsb.w	r3, [r4]
   224b8:	3b01      	subs	r3, #1
   224ba:	7023      	strb	r3, [r4, #0]
        } else {
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/50);
        }
        tx_im_inst.resend_end = 5;
   224bc:	4b1d      	ldr	r3, [pc, #116]	; (22534 <txim_ev_cb+0xec>)
   224be:	2205      	movs	r2, #5
   224c0:	705a      	strb	r2, [r3, #1]
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/4);
    } else {
        streamer_printf(tx_im_inst.streamer, "bota: txim finished\n");
    }
}
   224c2:	b005      	add	sp, #20
   224c4:	bd30      	pop	{r4, r5, pc}
    if (os_msys_num_free() < os_msys_count()/4) {
   224c6:	3303      	adds	r3, #3
   224c8:	e7c9      	b.n	2245e <txim_ev_cb+0x16>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/10);
   224ca:	210c      	movs	r1, #12
   224cc:	481a      	ldr	r0, [pc, #104]	; (22538 <txim_ev_cb+0xf0>)
   224ce:	f7e7 f82b 	bl	9528 <os_callout_reset>
        return;
   224d2:	e7f6      	b.n	224c2 <txim_ev_cb+0x7a>
            os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/50);
   224d4:	2102      	movs	r1, #2
   224d6:	4818      	ldr	r0, [pc, #96]	; (22538 <txim_ev_cb+0xf0>)
   224d8:	f7e7 f826 	bl	9528 <os_callout_reset>
   224dc:	e7ee      	b.n	224bc <txim_ev_cb+0x74>
    } else if (--tx_im_inst.resend_end > 0){
   224de:	4a15      	ldr	r2, [pc, #84]	; (22534 <txim_ev_cb+0xec>)
   224e0:	f992 3001 	ldrsb.w	r3, [r2, #1]
   224e4:	3b01      	subs	r3, #1
   224e6:	b25b      	sxtb	r3, r3
   224e8:	7053      	strb	r3, [r2, #1]
   224ea:	2b00      	cmp	r3, #0
   224ec:	dd1b      	ble.n	22526 <txim_ev_cb+0xde>
        streamer_printf(tx_im_inst.streamer, "bota: resending end\n");
   224ee:	4614      	mov	r4, r2
   224f0:	4912      	ldr	r1, [pc, #72]	; (2253c <txim_ev_cb+0xf4>)
   224f2:	6b90      	ldr	r0, [r2, #56]	; 0x38
   224f4:	f7f0 fae4 	bl	12ac0 <streamer_printf>
        bcast_ota_get_packet(tx_im_inst.slot_id, BCAST_MODE_RESEND_END,
   224f8:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   224fc:	e9cd 2300 	strd	r2, r3, [sp]
   22500:	ab03      	add	r3, sp, #12
   22502:	2278      	movs	r2, #120	; 0x78
   22504:	2102      	movs	r1, #2
   22506:	6860      	ldr	r0, [r4, #4]
   22508:	f7ff fe66 	bl	221d8 <bcast_ota_get_packet>
        uwb_nmgr_queue_tx(nmgruwb, tx_im_inst.addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   2250c:	9b03      	ldr	r3, [sp, #12]
   2250e:	f240 4221 	movw	r2, #1057	; 0x421
   22512:	8861      	ldrh	r1, [r4, #2]
   22514:	4628      	mov	r0, r5
   22516:	f7e8 fee5 	bl	b2e4 <uwb_nmgr_queue_tx>
        os_callout_reset(&tx_im_inst.callout, OS_TICKS_PER_SEC/4);
   2251a:	2120      	movs	r1, #32
   2251c:	f104 000c 	add.w	r0, r4, #12
   22520:	f7e7 f802 	bl	9528 <os_callout_reset>
   22524:	e7cd      	b.n	224c2 <txim_ev_cb+0x7a>
        streamer_printf(tx_im_inst.streamer, "bota: txim finished\n");
   22526:	4906      	ldr	r1, [pc, #24]	; (22540 <txim_ev_cb+0xf8>)
   22528:	4b02      	ldr	r3, [pc, #8]	; (22534 <txim_ev_cb+0xec>)
   2252a:	6b98      	ldr	r0, [r3, #56]	; 0x38
   2252c:	f7f0 fac8 	bl	12ac0 <streamer_printf>
   22530:	e7c7      	b.n	224c2 <txim_ev_cb+0x7a>
   22532:	bf00      	nop
   22534:	20005920 	.word	0x20005920
   22538:	2000592c 	.word	0x2000592c
   2253c:	00028edc 	.word	0x00028edc
   22540:	00028ef4 	.word	0x00028ef4

00022544 <nmgr_mstr_out>:
{
   22544:	b510      	push	{r4, lr}
   22546:	b0ae      	sub	sp, #184	; 0xb8
   22548:	460c      	mov	r4, r1
    struct cbor_attr_t attrs[] = {
   2254a:	2260      	movs	r2, #96	; 0x60
   2254c:	2100      	movs	r1, #0
   2254e:	4668      	mov	r0, sp
   22550:	f7ee f893 	bl	1067a <memset>
   22554:	4b15      	ldr	r3, [pc, #84]	; (225ac <nmgr_mstr_out+0x68>)
   22556:	9300      	str	r3, [sp, #0]
   22558:	2301      	movs	r3, #1
   2255a:	f88d 3004 	strb.w	r3, [sp, #4]
   2255e:	aa2c      	add	r2, sp, #176	; 0xb0
   22560:	9202      	str	r2, [sp, #8]
   22562:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    cbor_mbuf_reader_init(&reader, req, sizeof(struct nmgr_hdr));
   22566:	2208      	movs	r2, #8
   22568:	4621      	mov	r1, r4
   2256a:	a818      	add	r0, sp, #96	; 0x60
   2256c:	f7f5 fea2 	bl	182b4 <cbor_mbuf_reader_init>
    cbor_parser_init(&reader.r, 0, &n_b.parser, &n_b.it);
   22570:	ab28      	add	r3, sp, #160	; 0xa0
   22572:	aa21      	add	r2, sp, #132	; 0x84
   22574:	2100      	movs	r1, #0
   22576:	a818      	add	r0, sp, #96	; 0x60
   22578:	f7f6 fad3 	bl	18b22 <cbor_parser_init>
    g_err |= cbor_read_object(&cb->it, attrs);
   2257c:	4669      	mov	r1, sp
   2257e:	a828      	add	r0, sp, #160	; 0xa0
   22580:	f7f5 fe3e 	bl	18200 <cbor_read_object>
    if (g_err) {
   22584:	b958      	cbnz	r0, 2259e <nmgr_mstr_out+0x5a>
    streamer_printf(tx_im_inst.streamer, "#nmgr_out: rc=%d\n", (int)(rc_attr&0xffffffff));
   22586:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   22588:	4909      	ldr	r1, [pc, #36]	; (225b0 <nmgr_mstr_out+0x6c>)
   2258a:	4b0a      	ldr	r3, [pc, #40]	; (225b4 <nmgr_mstr_out+0x70>)
   2258c:	6b98      	ldr	r0, [r3, #56]	; 0x38
   2258e:	f7f0 fa97 	bl	12ac0 <streamer_printf>
    os_mbuf_free_chain(req);
   22592:	4620      	mov	r0, r4
   22594:	f7e8 f9ad 	bl	a8f2 <os_mbuf_free_chain>
}
   22598:	2000      	movs	r0, #0
   2259a:	b02e      	add	sp, #184	; 0xb8
   2259c:	bd10      	pop	{r4, pc}
   2259e:	4602      	mov	r2, r0
        streamer_printf(tx_im_inst.streamer, "gerr: '%d\n", g_err);
   225a0:	4905      	ldr	r1, [pc, #20]	; (225b8 <nmgr_mstr_out+0x74>)
   225a2:	4b04      	ldr	r3, [pc, #16]	; (225b4 <nmgr_mstr_out+0x70>)
   225a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
   225a6:	f7f0 fa8b 	bl	12ac0 <streamer_printf>
   225aa:	e7ec      	b.n	22586 <nmgr_mstr_out+0x42>
   225ac:	00026da4 	.word	0x00026da4
   225b0:	00028f18 	.word	0x00028f18
   225b4:	20005920 	.word	0x20005920
   225b8:	00028f0c 	.word	0x00028f0c

000225bc <check_image_fid>:
{
   225bc:	b510      	push	{r4, lr}
   225be:	b082      	sub	sp, #8
   225c0:	460c      	mov	r4, r1
    rc = flash_area_open(fid, &fa);
   225c2:	a901      	add	r1, sp, #4
   225c4:	b2c0      	uxtb	r0, r0
   225c6:	f7f1 fe07 	bl	141d8 <flash_area_open>
    if (rc!=0) {
   225ca:	b108      	cbz	r0, 225d0 <check_image_fid+0x14>
}
   225cc:	b002      	add	sp, #8
   225ce:	bd10      	pop	{r4, pc}
    rc = check_image(fa, streamer);
   225d0:	4621      	mov	r1, r4
   225d2:	9801      	ldr	r0, [sp, #4]
   225d4:	f7ff ff04 	bl	223e0 <check_image>
    return rc;
   225d8:	e7f8      	b.n	225cc <check_image_fid+0x10>
	...

000225dc <bota_cli_cmd>:

static int
bota_cli_cmd(const struct shell_cmd *cmd, int argc, char **argv, struct streamer *streamer)
{
   225dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225de:	461e      	mov	r6, r3
    int rc;
    int fa_id;
    const char* too_few_args = "Too few args\n";

    if (argc < 2) {
   225e0:	2901      	cmp	r1, #1
   225e2:	dd18      	ble.n	22616 <bota_cli_cmd+0x3a>
   225e4:	460c      	mov	r4, r1
   225e6:	4615      	mov	r5, r2
        streamer_printf(streamer, too_few_args);
        return 0;
    }
    if (!strcmp(argv[1], "check")) {
   225e8:	6857      	ldr	r7, [r2, #4]
   225ea:	4944      	ldr	r1, [pc, #272]	; (226fc <bota_cli_cmd+0x120>)
   225ec:	4638      	mov	r0, r7
   225ee:	f7ee f86f 	bl	106d0 <strcmp>
   225f2:	bb50      	cbnz	r0, 2264a <bota_cli_cmd+0x6e>
        if (argc < 3) {
   225f4:	2c02      	cmp	r4, #2
   225f6:	dd13      	ble.n	22620 <bota_cli_cmd+0x44>
#if MYNEWT_VAL(BCAST_OTA_SCRATCH_ENABLED)
            streamer_printf(streamer, "  bota scratch: %d\n", MYNEWT_VAL(BCAST_OTA_FLASH_SCRATCH));
#endif
            return 0;
        }
        fa_id = strtol(argv[2], NULL, 0);
   225f8:	2200      	movs	r2, #0
   225fa:	4611      	mov	r1, r2
   225fc:	68a8      	ldr	r0, [r5, #8]
   225fe:	f7ff fd01 	bl	22004 <strtol>
        rc = check_image_fid(fa_id, streamer);
   22602:	4631      	mov	r1, r6
   22604:	f7ff ffda 	bl	225bc <check_image_fid>
   22608:	4602      	mov	r2, r0
        streamer_printf(streamer, "rc=%d\n", rc);
   2260a:	493d      	ldr	r1, [pc, #244]	; (22700 <bota_cli_cmd+0x124>)
   2260c:	4630      	mov	r0, r6
   2260e:	f7f0 fa57 	bl	12ac0 <streamer_printf>
        uwb_nmgr_queue_tx(nmgruwb, addr, UWB_DATA_CODE_NMGR_REQUEST, om);
    } else {
        streamer_printf(streamer, "Unknown cmd\n");
    }
    return 0;
}
   22612:	2000      	movs	r0, #0
   22614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, too_few_args);
   22616:	493b      	ldr	r1, [pc, #236]	; (22704 <bota_cli_cmd+0x128>)
   22618:	4618      	mov	r0, r3
   2261a:	f7f0 fa51 	bl	12ac0 <streamer_printf>
        return 0;
   2261e:	e7f8      	b.n	22612 <bota_cli_cmd+0x36>
            streamer_printf(streamer, too_few_args);
   22620:	4938      	ldr	r1, [pc, #224]	; (22704 <bota_cli_cmd+0x128>)
   22622:	4630      	mov	r0, r6
   22624:	f7f0 fa4c 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "  im0: %d\n", flash_area_id_from_image_slot(0));
   22628:	2000      	movs	r0, #0
   2262a:	f7f1 fe95 	bl	14358 <flash_area_id_from_image_slot>
   2262e:	4602      	mov	r2, r0
   22630:	4935      	ldr	r1, [pc, #212]	; (22708 <bota_cli_cmd+0x12c>)
   22632:	4630      	mov	r0, r6
   22634:	f7f0 fa44 	bl	12ac0 <streamer_printf>
            streamer_printf(streamer, "  im1: %d\n", flash_area_id_from_image_slot(1));
   22638:	2001      	movs	r0, #1
   2263a:	f7f1 fe8d 	bl	14358 <flash_area_id_from_image_slot>
   2263e:	4602      	mov	r2, r0
   22640:	4932      	ldr	r1, [pc, #200]	; (2270c <bota_cli_cmd+0x130>)
   22642:	4630      	mov	r0, r6
   22644:	f7f0 fa3c 	bl	12ac0 <streamer_printf>
            return 0;
   22648:	e7e3      	b.n	22612 <bota_cli_cmd+0x36>
    } else if (!strcmp(argv[1], "txim")) {
   2264a:	4931      	ldr	r1, [pc, #196]	; (22710 <bota_cli_cmd+0x134>)
   2264c:	4638      	mov	r0, r7
   2264e:	f7ee f83f 	bl	106d0 <strcmp>
   22652:	bb58      	cbnz	r0, 226ac <bota_cli_cmd+0xd0>
        if (argc < 4) {
   22654:	2c03      	cmp	r4, #3
   22656:	dd24      	ble.n	226a2 <bota_cli_cmd+0xc6>
        tx_im_inst.addr = strtol(argv[2], NULL, 0);
   22658:	2200      	movs	r2, #0
   2265a:	4611      	mov	r1, r2
   2265c:	68a8      	ldr	r0, [r5, #8]
   2265e:	f7ff fcd1 	bl	22004 <strtol>
   22662:	4c2c      	ldr	r4, [pc, #176]	; (22714 <bota_cli_cmd+0x138>)
   22664:	8060      	strh	r0, [r4, #2]
        tx_im_inst.reset = 5;
   22666:	2305      	movs	r3, #5
   22668:	7023      	strb	r3, [r4, #0]
        tx_im_inst.slot_id = strtol(argv[3], NULL, 0);
   2266a:	2200      	movs	r2, #0
   2266c:	4611      	mov	r1, r2
   2266e:	68e8      	ldr	r0, [r5, #12]
   22670:	f7ff fcc8 	bl	22004 <strtol>
   22674:	6060      	str	r0, [r4, #4]
        tx_im_inst.blocksize = 256;
   22676:	f44f 7380 	mov.w	r3, #256	; 0x100
   2267a:	60a3      	str	r3, [r4, #8]
        tx_im_inst.flags = BOTA_FLAGS_SET_PERMANENT;
   2267c:	2201      	movs	r2, #1
   2267e:	2300      	movs	r3, #0
   22680:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        tx_im_inst.streamer = streamer_console_get();
   22684:	f7f4 feac 	bl	173e0 <streamer_console_get>
   22688:	63a0      	str	r0, [r4, #56]	; 0x38
        os_callout_reset(&tx_im_inst.callout, 0);
   2268a:	2100      	movs	r1, #0
   2268c:	f104 000c 	add.w	r0, r4, #12
   22690:	f7e6 ff4a 	bl	9528 <os_callout_reset>
        streamer_printf(streamer, "txim slot %d to 0x%x\n", tx_im_inst.slot_id, tx_im_inst.addr);
   22694:	8863      	ldrh	r3, [r4, #2]
   22696:	6862      	ldr	r2, [r4, #4]
   22698:	491f      	ldr	r1, [pc, #124]	; (22718 <bota_cli_cmd+0x13c>)
   2269a:	4630      	mov	r0, r6
   2269c:	f7f0 fa10 	bl	12ac0 <streamer_printf>
   226a0:	e7b7      	b.n	22612 <bota_cli_cmd+0x36>
            streamer_printf(streamer, too_few_args);
   226a2:	4918      	ldr	r1, [pc, #96]	; (22704 <bota_cli_cmd+0x128>)
   226a4:	4630      	mov	r0, r6
   226a6:	f7f0 fa0b 	bl	12ac0 <streamer_printf>
            return 0;
   226aa:	e7b2      	b.n	22612 <bota_cli_cmd+0x36>
    } else if (!strcmp(argv[1], "txrst")) {
   226ac:	491b      	ldr	r1, [pc, #108]	; (2271c <bota_cli_cmd+0x140>)
   226ae:	4638      	mov	r0, r7
   226b0:	f7ee f80e 	bl	106d0 <strcmp>
   226b4:	b9e0      	cbnz	r0, 226f0 <bota_cli_cmd+0x114>
        if (argc < 3) {
   226b6:	2c02      	cmp	r4, #2
   226b8:	dd15      	ble.n	226e6 <bota_cli_cmd+0x10a>
        uint16_t addr = strtol(argv[2], NULL, 0);
   226ba:	2200      	movs	r2, #0
   226bc:	4611      	mov	r1, r2
   226be:	68a8      	ldr	r0, [r5, #8]
   226c0:	f7ff fca0 	bl	22004 <strtol>
   226c4:	b284      	uxth	r4, r0
        struct os_mbuf *om = bcast_ota_get_reset_mbuf();
   226c6:	f7ff fe1d 	bl	22304 <bcast_ota_get_reset_mbuf>
   226ca:	4605      	mov	r5, r0
        nmgr_uwb_instance_t *nmgruwb = (nmgr_uwb_instance_t*)uwb_mac_find_cb_inst_ptr(uwb_dev_idx_lookup(0), UWBEXT_NMGR_UWB);
   226cc:	2000      	movs	r0, #0
   226ce:	f7e6 fad1 	bl	8c74 <uwb_dev_idx_lookup>
   226d2:	2113      	movs	r1, #19
   226d4:	f7e6 fb53 	bl	8d7e <uwb_mac_find_cb_inst_ptr>
        uwb_nmgr_queue_tx(nmgruwb, addr, UWB_DATA_CODE_NMGR_REQUEST, om);
   226d8:	462b      	mov	r3, r5
   226da:	f240 4221 	movw	r2, #1057	; 0x421
   226de:	4621      	mov	r1, r4
   226e0:	f7e8 fe00 	bl	b2e4 <uwb_nmgr_queue_tx>
   226e4:	e795      	b.n	22612 <bota_cli_cmd+0x36>
            streamer_printf(streamer, too_few_args);
   226e6:	4907      	ldr	r1, [pc, #28]	; (22704 <bota_cli_cmd+0x128>)
   226e8:	4630      	mov	r0, r6
   226ea:	f7f0 f9e9 	bl	12ac0 <streamer_printf>
            return 0;
   226ee:	e790      	b.n	22612 <bota_cli_cmd+0x36>
        streamer_printf(streamer, "Unknown cmd\n");
   226f0:	490b      	ldr	r1, [pc, #44]	; (22720 <bota_cli_cmd+0x144>)
   226f2:	4630      	mov	r0, r6
   226f4:	f7f0 f9e4 	bl	12ac0 <streamer_printf>
   226f8:	e78b      	b.n	22612 <bota_cli_cmd+0x36>
   226fa:	bf00      	nop
   226fc:	00028f2c 	.word	0x00028f2c
   22700:	00028f4c 	.word	0x00028f4c
   22704:	000267ec 	.word	0x000267ec
   22708:	00028f34 	.word	0x00028f34
   2270c:	00028f40 	.word	0x00028f40
   22710:	00028f54 	.word	0x00028f54
   22714:	20005920 	.word	0x20005920
   22718:	00028f5c 	.word	0x00028f5c
   2271c:	00028f74 	.word	0x00028f74
   22720:	000268ec 	.word	0x000268ec

00022724 <bota_cli_register>:

int
bota_cli_register(void)
{
   22724:	b508      	push	{r3, lr}
    int rc;
    rc = nmgr_transport_init(&nmgr_mstr_transport, nmgr_mstr_out,
   22726:	4a0c      	ldr	r2, [pc, #48]	; (22758 <bota_cli_register+0x34>)
   22728:	490c      	ldr	r1, [pc, #48]	; (2275c <bota_cli_register+0x38>)
   2272a:	480d      	ldr	r0, [pc, #52]	; (22760 <bota_cli_register+0x3c>)
   2272c:	f7ef fe0a 	bl	12344 <nmgr_transport_init>
                             nmgr_mstr_get_mtu);
    assert(rc == 0);
   22730:	b958      	cbnz	r0, 2274a <bota_cli_register+0x26>
    os_callout_init(&tx_im_inst.callout, os_eventq_dflt_get(), txim_ev_cb, NULL);
   22732:	f7e7 f929 	bl	9988 <os_eventq_dflt_get>
   22736:	4601      	mov	r1, r0
   22738:	2300      	movs	r3, #0
   2273a:	4a0a      	ldr	r2, [pc, #40]	; (22764 <bota_cli_register+0x40>)
   2273c:	480a      	ldr	r0, [pc, #40]	; (22768 <bota_cli_register+0x44>)
   2273e:	f7e6 fec7 	bl	94d0 <os_callout_init>

    return shell_cmd_register(&shell_bota_cmd);
   22742:	480a      	ldr	r0, [pc, #40]	; (2276c <bota_cli_register+0x48>)
   22744:	f7f3 f942 	bl	159cc <shell_cmd_register>
}
   22748:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   2274a:	2300      	movs	r3, #0
   2274c:	461a      	mov	r2, r3
   2274e:	4619      	mov	r1, r3
   22750:	4618      	mov	r0, r3
   22752:	f7e6 fd37 	bl	91c4 <__assert_func>
   22756:	bf00      	nop
   22758:	000223dd 	.word	0x000223dd
   2275c:	00022545 	.word	0x00022545
   22760:	20005900 	.word	0x20005900
   22764:	00022449 	.word	0x00022449
   22768:	2000592c 	.word	0x2000592c
   2276c:	200012e0 	.word	0x200012e0

00022770 <bota_check_image>:
struct bota_state bota_state = {0};

#define TMPBUF_SZ  256
static int
bota_check_image(const struct flash_area *fap)
{
   22770:	b530      	push	{r4, r5, lr}
   22772:	b095      	sub	sp, #84	; 0x54
   22774:	4604      	mov	r4, r0
    int rc;
    struct image_header hdr;
    uint8_t hash[IMGMGR_HASH_LEN];

    rc = flash_area_read(fap, 0, &hdr, sizeof(struct image_header));
   22776:	2320      	movs	r3, #32
   22778:	aa0c      	add	r2, sp, #48	; 0x30
   2277a:	2100      	movs	r1, #0
   2277c:	f7f1 fd8c 	bl	14298 <flash_area_read>
    if (rc!=0) {
   22780:	b118      	cbz	r0, 2278a <bota_check_image+0x1a>
        return OS_ENOMEM;
   22782:	2401      	movs	r4, #1
    }
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
                               NULL, 0, hash);
    free(tmpbuf);
    return rc;
}
   22784:	4620      	mov	r0, r4
   22786:	b015      	add	sp, #84	; 0x54
   22788:	bd30      	pop	{r4, r5, pc}
    void *tmpbuf = malloc(TMPBUF_SZ);
   2278a:	f44f 7080 	mov.w	r0, #256	; 0x100
   2278e:	f7ed fef7 	bl	10580 <malloc>
    if (!tmpbuf) {
   22792:	4605      	mov	r5, r0
   22794:	b180      	cbz	r0, 227b8 <bota_check_image+0x48>
    rc = bootutil_img_validate(&hdr, fap, tmpbuf, TMPBUF_SZ,
   22796:	ab04      	add	r3, sp, #16
   22798:	9302      	str	r3, [sp, #8]
   2279a:	2300      	movs	r3, #0
   2279c:	9301      	str	r3, [sp, #4]
   2279e:	9300      	str	r3, [sp, #0]
   227a0:	f44f 7380 	mov.w	r3, #256	; 0x100
   227a4:	4602      	mov	r2, r0
   227a6:	4621      	mov	r1, r4
   227a8:	a80c      	add	r0, sp, #48	; 0x30
   227aa:	f000 ff3f 	bl	2362c <bootutil_img_validate>
   227ae:	4604      	mov	r4, r0
    free(tmpbuf);
   227b0:	4628      	mov	r0, r5
   227b2:	f7ed ff1b 	bl	105ec <free>
    return rc;
   227b6:	e7e5      	b.n	22784 <bota_check_image+0x14>
        return OS_ENOMEM;
   227b8:	2401      	movs	r4, #1
   227ba:	e7e3      	b.n	22784 <bota_check_image+0x14>

000227bc <bota_confirm>:
    return rc;
}

static int
bota_confirm(struct mgmt_cbuf *cb)
{
   227bc:	b530      	push	{r4, r5, lr}
   227be:	b083      	sub	sp, #12
    CborError g_err = CborNoError;
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   227c0:	f100 050c 	add.w	r5, r0, #12
   227c4:	2202      	movs	r2, #2
   227c6:	4913      	ldr	r1, [pc, #76]	; (22814 <bota_confirm+0x58>)
   227c8:	4628      	mov	r0, r5
   227ca:	f7f5 ff00 	bl	185ce <cbor_encode_text_string>
   227ce:	4604      	mov	r4, r0
    uint64_t rc = boot_set_confirmed();
   227d0:	f7f4 ffc5 	bl	1775e <boot_set_confirmed>
    if (rc == OS_OK) {
   227d4:	ea50 72e0 	orrs.w	r2, r0, r0, asr #31
   227d8:	d112      	bne.n	22800 <bota_confirm+0x44>
   227da:	17c3      	asrs	r3, r0, #31
        BOTA_INFO("#### Image confirmed, rc=%d\n", rc);
   227dc:	9000      	str	r0, [sp, #0]
   227de:	9301      	str	r3, [sp, #4]
   227e0:	4b0d      	ldr	r3, [pc, #52]	; (22818 <bota_confirm+0x5c>)
   227e2:	2201      	movs	r2, #1
   227e4:	2146      	movs	r1, #70	; 0x46
   227e6:	480d      	ldr	r0, [pc, #52]	; (2281c <bota_confirm+0x60>)
   227e8:	f7f1 fef6 	bl	145d8 <log_printf>
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   227ec:	2200      	movs	r2, #0
   227ee:	2300      	movs	r3, #0
   227f0:	4628      	mov	r0, r5
   227f2:	f7f5 fe71 	bl	184d8 <cbor_encode_int>
   227f6:	4304      	orrs	r4, r0
    } else {
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EUNKNOWN);
    }

    if (g_err) {
   227f8:	b94c      	cbnz	r4, 2280e <bota_confirm+0x52>
        return MGMT_ERR_ENOMEM;
    }
    return 0;
   227fa:	2000      	movs	r0, #0
}
   227fc:	b003      	add	sp, #12
   227fe:	bd30      	pop	{r4, r5, pc}
        g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EUNKNOWN);
   22800:	2201      	movs	r2, #1
   22802:	2300      	movs	r3, #0
   22804:	4628      	mov	r0, r5
   22806:	f7f5 fe67 	bl	184d8 <cbor_encode_int>
   2280a:	4304      	orrs	r4, r0
   2280c:	e7f4      	b.n	227f8 <bota_confirm+0x3c>
        return MGMT_ERR_ENOMEM;
   2280e:	2002      	movs	r0, #2
   22810:	e7f4      	b.n	227fc <bota_confirm+0x40>
   22812:	bf00      	nop
   22814:	00026da4 	.word	0x00026da4
   22818:	00029004 	.word	0x00029004
   2281c:	200058e0 	.word	0x200058e0

00022820 <bota_upload>:
{
   22820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22824:	b0e8      	sub	sp, #416	; 0x1a0
   22826:	4604      	mov	r4, r0
    uint8_t *img_data = (uint8_t*)malloc(MYNEWT_VAL(IMGMGR_MAX_CHUNK_SIZE));
   22828:	f44f 7000 	mov.w	r0, #512	; 0x200
   2282c:	f7ed fea8 	bl	10580 <malloc>
    uint64_t off = UINT_MAX;
   22830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22834:	2300      	movs	r3, #0
   22836:	e9cd 2366 	strd	r2, r3, [sp, #408]	; 0x198
    uint64_t size = UINT_MAX;
   2283a:	e9cd 2364 	strd	r2, r3, [sp, #400]	; 0x190
    uint64_t slot = UINT_MAX;
   2283e:	e9cd 2362 	strd	r2, r3, [sp, #392]	; 0x188
    uint64_t flags = UINT_MAX;
   22842:	e9cd 2360 	strd	r2, r3, [sp, #384]	; 0x180
    size_t data_len = 0;
   22846:	2300      	movs	r3, #0
   22848:	935f      	str	r3, [sp, #380]	; 0x17c
    if (!img_data) {
   2284a:	2800      	cmp	r0, #0
   2284c:	f000 809d 	beq.w	2298a <bota_upload+0x16a>
   22850:	4605      	mov	r5, r0
    const struct cbor_attr_t off_attr[] = {
   22852:	f44f 7290 	mov.w	r2, #288	; 0x120
   22856:	2100      	movs	r1, #0
   22858:	a816      	add	r0, sp, #88	; 0x58
   2285a:	f7ed ff0e 	bl	1067a <memset>
   2285e:	4ba5      	ldr	r3, [pc, #660]	; (22af4 <bota_upload+0x2d4>)
   22860:	9316      	str	r3, [sp, #88]	; 0x58
   22862:	2303      	movs	r3, #3
   22864:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
   22868:	9518      	str	r5, [sp, #96]	; 0x60
   2286a:	ab5f      	add	r3, sp, #380	; 0x17c
   2286c:	9319      	str	r3, [sp, #100]	; 0x64
   2286e:	f44f 7300 	mov.w	r3, #512	; 0x200
   22872:	9320      	str	r3, [sp, #128]	; 0x80
   22874:	4ba0      	ldr	r3, [pc, #640]	; (22af8 <bota_upload+0x2d8>)
   22876:	9322      	str	r3, [sp, #136]	; 0x88
   22878:	2202      	movs	r2, #2
   2287a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
   2287e:	ab64      	add	r3, sp, #400	; 0x190
   22880:	9324      	str	r3, [sp, #144]	; 0x90
   22882:	2301      	movs	r3, #1
   22884:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
   22888:	499c      	ldr	r1, [pc, #624]	; (22afc <bota_upload+0x2dc>)
   2288a:	912e      	str	r1, [sp, #184]	; 0xb8
   2288c:	f88d 20bc 	strb.w	r2, [sp, #188]	; 0xbc
   22890:	a966      	add	r1, sp, #408	; 0x198
   22892:	9130      	str	r1, [sp, #192]	; 0xc0
   22894:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
   22898:	4999      	ldr	r1, [pc, #612]	; (22b00 <bota_upload+0x2e0>)
   2289a:	913a      	str	r1, [sp, #232]	; 0xe8
   2289c:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
   228a0:	a962      	add	r1, sp, #392	; 0x188
   228a2:	913c      	str	r1, [sp, #240]	; 0xf0
   228a4:	f88d 3114 	strb.w	r3, [sp, #276]	; 0x114
   228a8:	4996      	ldr	r1, [pc, #600]	; (22b04 <bota_upload+0x2e4>)
   228aa:	9146      	str	r1, [sp, #280]	; 0x118
   228ac:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
   228b0:	aa60      	add	r2, sp, #384	; 0x180
   228b2:	9248      	str	r2, [sp, #288]	; 0x120
   228b4:	f88d 3144 	strb.w	r3, [sp, #324]	; 0x144
    rc = cbor_read_object(&cb->it, off_attr);
   228b8:	a916      	add	r1, sp, #88	; 0x58
   228ba:	f104 001c 	add.w	r0, r4, #28
   228be:	f7f5 fc9f 	bl	18200 <cbor_read_object>
    if (rc || off == UINT_MAX) {
   228c2:	4601      	mov	r1, r0
   228c4:	2800      	cmp	r0, #0
   228c6:	d16c      	bne.n	229a2 <bota_upload+0x182>
   228c8:	9a66      	ldr	r2, [sp, #408]	; 0x198
   228ca:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   228cc:	2b00      	cmp	r3, #0
   228ce:	bf08      	it	eq
   228d0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   228d4:	d065      	beq.n	229a2 <bota_upload+0x182>
    BOTA_DEBUG("bota: l%ld(%lu),o%ld,s%ld(%d),e%d,f%llx(%llx) ec:%ld\n",
   228d6:	4b8c      	ldr	r3, [pc, #560]	; (22b08 <bota_upload+0x2e8>)
   228d8:	7b19      	ldrb	r1, [r3, #12]
   228da:	6898      	ldr	r0, [r3, #8]
   228dc:	900a      	str	r0, [sp, #40]	; 0x28
   228de:	ed93 7b04 	vldr	d7, [r3, #16]
   228e2:	ed8d 7b08 	vstr	d7, [sp, #32]
   228e6:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
   228ea:	ed8d 7b06 	vstr	d7, [sp, #24]
   228ee:	2600      	movs	r6, #0
   228f0:	9605      	str	r6, [sp, #20]
   228f2:	9104      	str	r1, [sp, #16]
   228f4:	9962      	ldr	r1, [sp, #392]	; 0x188
   228f6:	9103      	str	r1, [sp, #12]
   228f8:	9202      	str	r2, [sp, #8]
   228fa:	685b      	ldr	r3, [r3, #4]
   228fc:	9301      	str	r3, [sp, #4]
   228fe:	9b64      	ldr	r3, [sp, #400]	; 0x190
   22900:	9300      	str	r3, [sp, #0]
   22902:	4b82      	ldr	r3, [pc, #520]	; (22b0c <bota_upload+0x2ec>)
   22904:	4632      	mov	r2, r6
   22906:	2146      	movs	r1, #70	; 0x46
   22908:	4881      	ldr	r0, [pc, #516]	; (22b10 <bota_upload+0x2f0>)
   2290a:	f7f1 fe65 	bl	145d8 <log_printf>
    if (slot != UINT_MAX) {
   2290e:	9862      	ldr	r0, [sp, #392]	; 0x188
   22910:	9b63      	ldr	r3, [sp, #396]	; 0x18c
   22912:	42b3      	cmp	r3, r6
   22914:	bf08      	it	eq
   22916:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   2291a:	d155      	bne.n	229c8 <bota_upload+0x1a8>
    if (size != UINT_MAX) {
   2291c:	9b64      	ldr	r3, [sp, #400]	; 0x190
   2291e:	9a65      	ldr	r2, [sp, #404]	; 0x194
   22920:	2a00      	cmp	r2, #0
   22922:	bf08      	it	eq
   22924:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   22928:	d001      	beq.n	2292e <bota_upload+0x10e>
        bota_state.upload.size = size;
   2292a:	4a77      	ldr	r2, [pc, #476]	; (22b08 <bota_upload+0x2e8>)
   2292c:	6053      	str	r3, [r2, #4]
    if (flags != UINT_MAX) {
   2292e:	9a60      	ldr	r2, [sp, #384]	; 0x180
   22930:	9b61      	ldr	r3, [sp, #388]	; 0x184
   22932:	2b00      	cmp	r3, #0
   22934:	bf08      	it	eq
   22936:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2293a:	d002      	beq.n	22942 <bota_upload+0x122>
        bota_state.upload.flags = flags;
   2293c:	4972      	ldr	r1, [pc, #456]	; (22b08 <bota_upload+0x2e8>)
   2293e:	610a      	str	r2, [r1, #16]
   22940:	614b      	str	r3, [r1, #20]
    if (bota_state.upload.fa_id < flash_area_id_from_image_slot(1)) {
   22942:	4b71      	ldr	r3, [pc, #452]	; (22b08 <bota_upload+0x2e8>)
   22944:	7b5e      	ldrb	r6, [r3, #13]
   22946:	2001      	movs	r0, #1
   22948:	f7f1 fd06 	bl	14358 <flash_area_id_from_image_slot>
   2294c:	4286      	cmp	r6, r0
   2294e:	db41      	blt.n	229d4 <bota_upload+0x1b4>
    rc = flash_area_open(bota_state.upload.fa_id, &tmp_fa);
   22950:	a90d      	add	r1, sp, #52	; 0x34
   22952:	4b6d      	ldr	r3, [pc, #436]	; (22b08 <bota_upload+0x2e8>)
   22954:	7b58      	ldrb	r0, [r3, #13]
   22956:	f7f1 fc3f 	bl	141d8 <flash_area_open>
    if(rc){
   2295a:	4606      	mov	r6, r0
   2295c:	2800      	cmp	r0, #0
   2295e:	d147      	bne.n	229f0 <bota_upload+0x1d0>
    if (!tmp_fa) {
   22960:	980d      	ldr	r0, [sp, #52]	; 0x34
   22962:	2800      	cmp	r0, #0
   22964:	d049      	beq.n	229fa <bota_upload+0x1da>
    if (off == 0) {
   22966:	9a66      	ldr	r2, [sp, #408]	; 0x198
   22968:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   2296a:	4313      	orrs	r3, r2
   2296c:	f040 8097 	bne.w	22a9e <bota_upload+0x27e>
        if (data_len < sizeof(struct image_header)) {
   22970:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   22972:	2b1f      	cmp	r3, #31
   22974:	f240 812e 	bls.w	22bd4 <bota_upload+0x3b4>
        if (new_hdr->ih_magic != IMAGE_MAGIC) {
   22978:	682a      	ldr	r2, [r5, #0]
   2297a:	4b66      	ldr	r3, [pc, #408]	; (22b14 <bota_upload+0x2f4>)
   2297c:	429a      	cmp	r2, r3
   2297e:	d041      	beq.n	22a04 <bota_upload+0x1e4>
            rc = MGMT_ERR_EINVAL;
   22980:	2603      	movs	r6, #3
    free(img_data);
   22982:	4628      	mov	r0, r5
   22984:	f7ed fe32 	bl	105ec <free>
    return rc;
   22988:	e01a      	b.n	229c0 <bota_upload+0x1a0>
        BOTA_ERR("ERR no mem\n");
   2298a:	4b63      	ldr	r3, [pc, #396]	; (22b18 <bota_upload+0x2f8>)
   2298c:	2203      	movs	r2, #3
   2298e:	2146      	movs	r1, #70	; 0x46
   22990:	485f      	ldr	r0, [pc, #380]	; (22b10 <bota_upload+0x2f0>)
   22992:	f7f1 fe21 	bl	145d8 <log_printf>
        assert(0);
   22996:	2300      	movs	r3, #0
   22998:	461a      	mov	r2, r3
   2299a:	4619      	mov	r1, r3
   2299c:	4618      	mov	r0, r3
   2299e:	f7e6 fc11 	bl	91c4 <__assert_func>
        BOTA_ERR("ERR read_failed rc %d off %llx\n", rc, off);
   229a2:	e9dd 2366 	ldrd	r2, r3, [sp, #408]	; 0x198
   229a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   229aa:	9100      	str	r1, [sp, #0]
   229ac:	4b5b      	ldr	r3, [pc, #364]	; (22b1c <bota_upload+0x2fc>)
   229ae:	2203      	movs	r2, #3
   229b0:	2146      	movs	r1, #70	; 0x46
   229b2:	4857      	ldr	r0, [pc, #348]	; (22b10 <bota_upload+0x2f0>)
   229b4:	f7f1 fe10 	bl	145d8 <log_printf>
        free(img_data);
   229b8:	4628      	mov	r0, r5
   229ba:	f7ed fe17 	bl	105ec <free>
        return MGMT_ERR_EINVAL;
   229be:	2603      	movs	r6, #3
}
   229c0:	4630      	mov	r0, r6
   229c2:	b068      	add	sp, #416	; 0x1a0
   229c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bota_state.upload.slot_id = slot;
   229c8:	4e4f      	ldr	r6, [pc, #316]	; (22b08 <bota_upload+0x2e8>)
   229ca:	7330      	strb	r0, [r6, #12]
        bota_state.upload.fa_id = flash_area_id_from_image_slot(slot);
   229cc:	f7f1 fcc4 	bl	14358 <flash_area_id_from_image_slot>
   229d0:	7370      	strb	r0, [r6, #13]
   229d2:	e7a3      	b.n	2291c <bota_upload+0xfc>
        BOTA_ERR("ERR Unknown fa_id(%d)\n", bota_state.upload.fa_id);
   229d4:	4b4c      	ldr	r3, [pc, #304]	; (22b08 <bota_upload+0x2e8>)
   229d6:	7b5b      	ldrb	r3, [r3, #13]
   229d8:	9300      	str	r3, [sp, #0]
   229da:	4b51      	ldr	r3, [pc, #324]	; (22b20 <bota_upload+0x300>)
   229dc:	2203      	movs	r2, #3
   229de:	2146      	movs	r1, #70	; 0x46
   229e0:	484b      	ldr	r0, [pc, #300]	; (22b10 <bota_upload+0x2f0>)
   229e2:	f7f1 fdf9 	bl	145d8 <log_printf>
        free(img_data);
   229e6:	4628      	mov	r0, r5
   229e8:	f7ed fe00 	bl	105ec <free>
        return MGMT_ERR_EINVAL;
   229ec:	2603      	movs	r6, #3
   229ee:	e7e7      	b.n	229c0 <bota_upload+0x1a0>
        free(img_data);
   229f0:	4628      	mov	r0, r5
   229f2:	f7ed fdfb 	bl	105ec <free>
        return MGMT_ERR_EINVAL;
   229f6:	2603      	movs	r6, #3
   229f8:	e7e2      	b.n	229c0 <bota_upload+0x1a0>
        free(img_data);
   229fa:	4628      	mov	r0, r5
   229fc:	f7ed fdf6 	bl	105ec <free>
        return MGMT_ERR_EINVAL;
   22a00:	2603      	movs	r6, #3
   22a02:	e7dd      	b.n	229c0 <bota_upload+0x1a0>
        rc = flash_area_read(tmp_fa, 0, &tmp_hdr, sizeof(struct image_header));
   22a04:	2320      	movs	r3, #32
   22a06:	aa0e      	add	r2, sp, #56	; 0x38
   22a08:	2100      	movs	r1, #0
   22a0a:	f7f1 fc45 	bl	14298 <flash_area_read>
        if (tmp_hdr.ih_magic != IMAGE_MAGIC ||
   22a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22a10:	4b40      	ldr	r3, [pc, #256]	; (22b14 <bota_upload+0x2f4>)
   22a12:	429a      	cmp	r2, r3
   22a14:	d024      	beq.n	22a60 <bota_upload+0x240>
            erase = 1;
   22a16:	2001      	movs	r0, #1
        bota_state.upload.off = 0;
   22a18:	4b3b      	ldr	r3, [pc, #236]	; (22b08 <bota_upload+0x2e8>)
   22a1a:	2200      	movs	r2, #0
   22a1c:	601a      	str	r2, [r3, #0]
        bota_state.upload.size = size;
   22a1e:	9964      	ldr	r1, [sp, #400]	; 0x190
   22a20:	6059      	str	r1, [r3, #4]
        bota_state.upload.upl_errs = 0;
   22a22:	609a      	str	r2, [r3, #8]
        if (erase==1) {
   22a24:	b350      	cbz	r0, 22a7c <bota_upload+0x25c>
            BOTA_DEBUG("### New upload: %d.%d.%d.%d\n", new_hdr->ih_ver.iv_major,
   22a26:	7d2b      	ldrb	r3, [r5, #20]
   22a28:	7d6a      	ldrb	r2, [r5, #21]
   22a2a:	8ae9      	ldrh	r1, [r5, #22]
   22a2c:	4f38      	ldr	r7, [pc, #224]	; (22b10 <bota_upload+0x2f0>)
   22a2e:	69a8      	ldr	r0, [r5, #24]
   22a30:	9003      	str	r0, [sp, #12]
   22a32:	9102      	str	r1, [sp, #8]
   22a34:	9201      	str	r2, [sp, #4]
   22a36:	9300      	str	r3, [sp, #0]
   22a38:	4b3a      	ldr	r3, [pc, #232]	; (22b24 <bota_upload+0x304>)
   22a3a:	2200      	movs	r2, #0
   22a3c:	2146      	movs	r1, #70	; 0x46
   22a3e:	4638      	mov	r0, r7
   22a40:	f7f1 fdca 	bl	145d8 <log_printf>
            BOTA_DEBUG("### Erasing flash ###\n");
   22a44:	4b38      	ldr	r3, [pc, #224]	; (22b28 <bota_upload+0x308>)
   22a46:	2200      	movs	r2, #0
   22a48:	2146      	movs	r1, #70	; 0x46
   22a4a:	4638      	mov	r0, r7
   22a4c:	f7f1 fdc4 	bl	145d8 <log_printf>
            rc = flash_area_erase(tmp_fa, 0, tmp_fa->fa_size);
   22a50:	980d      	ldr	r0, [sp, #52]	; 0x34
   22a52:	6882      	ldr	r2, [r0, #8]
   22a54:	2100      	movs	r1, #0
   22a56:	f7f1 fc47 	bl	142e8 <flash_area_erase>
            if (rc) {
   22a5a:	b300      	cbz	r0, 22a9e <bota_upload+0x27e>
            rc = flash_area_erase(tmp_fa, 0, tmp_fa->fa_size);
   22a5c:	4606      	mov	r6, r0
   22a5e:	e790      	b.n	22982 <bota_upload+0x162>
            new_hdr->ih_ver.iv_minor     != tmp_hdr.ih_ver.iv_minor ||
   22a60:	696a      	ldr	r2, [r5, #20]
   22a62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22a64:	429a      	cmp	r2, r3
   22a66:	d001      	beq.n	22a6c <bota_upload+0x24c>
            erase = 1;
   22a68:	2001      	movs	r0, #1
   22a6a:	e7d5      	b.n	22a18 <bota_upload+0x1f8>
            new_hdr->ih_ver.iv_build_num != tmp_hdr.ih_ver.iv_build_num) {
   22a6c:	69aa      	ldr	r2, [r5, #24]
   22a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
            new_hdr->ih_ver.iv_revision  != tmp_hdr.ih_ver.iv_revision ||
   22a70:	429a      	cmp	r2, r3
   22a72:	d001      	beq.n	22a78 <bota_upload+0x258>
            erase = 1;
   22a74:	2001      	movs	r0, #1
   22a76:	e7cf      	b.n	22a18 <bota_upload+0x1f8>
        erase = 0;
   22a78:	2000      	movs	r0, #0
   22a7a:	e7cd      	b.n	22a18 <bota_upload+0x1f8>
            BOTA_DEBUG("### Continuing upload of: %d.%d.%d.%d\n", tmp_hdr.ih_ver.iv_major,
   22a7c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   22a80:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
   22a84:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
   22a88:	9814      	ldr	r0, [sp, #80]	; 0x50
   22a8a:	9003      	str	r0, [sp, #12]
   22a8c:	9102      	str	r1, [sp, #8]
   22a8e:	9201      	str	r2, [sp, #4]
   22a90:	9300      	str	r3, [sp, #0]
   22a92:	4b26      	ldr	r3, [pc, #152]	; (22b2c <bota_upload+0x30c>)
   22a94:	2200      	movs	r2, #0
   22a96:	2146      	movs	r1, #70	; 0x46
   22a98:	481d      	ldr	r0, [pc, #116]	; (22b10 <bota_upload+0x2f0>)
   22a9a:	f7f1 fd9d 	bl	145d8 <log_printf>
    if (data_len) {
   22a9e:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   22aa0:	2b00      	cmp	r3, #0
   22aa2:	d149      	bne.n	22b38 <bota_upload+0x318>
    if (bota_state.upload.size == bota_state.upload.off) {
   22aa4:	4b18      	ldr	r3, [pc, #96]	; (22b08 <bota_upload+0x2e8>)
   22aa6:	685a      	ldr	r2, [r3, #4]
   22aa8:	681b      	ldr	r3, [r3, #0]
   22aaa:	429a      	cmp	r2, r3
   22aac:	d05c      	beq.n	22b68 <bota_upload+0x348>
    free(img_data);
   22aae:	4628      	mov	r0, r5
   22ab0:	f7ed fd9c 	bl	105ec <free>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "rc");
   22ab4:	340c      	adds	r4, #12
   22ab6:	2202      	movs	r2, #2
   22ab8:	491d      	ldr	r1, [pc, #116]	; (22b30 <bota_upload+0x310>)
   22aba:	4620      	mov	r0, r4
   22abc:	f7f5 fd87 	bl	185ce <cbor_encode_text_string>
   22ac0:	4605      	mov	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, MGMT_ERR_EOK);
   22ac2:	2200      	movs	r2, #0
   22ac4:	2300      	movs	r3, #0
   22ac6:	4620      	mov	r0, r4
   22ac8:	f7f5 fd06 	bl	184d8 <cbor_encode_int>
   22acc:	4305      	orrs	r5, r0
   22ace:	2203      	movs	r2, #3
   22ad0:	4918      	ldr	r1, [pc, #96]	; (22b34 <bota_upload+0x314>)
   22ad2:	4620      	mov	r0, r4
   22ad4:	f7f5 fd7b 	bl	185ce <cbor_encode_text_string>
    g_err |= cbor_encode_text_stringz(&cb->encoder, "off");
   22ad8:	4305      	orrs	r5, r0
    g_err |= cbor_encode_int(&cb->encoder, bota_state.upload.off);
   22ada:	4b0b      	ldr	r3, [pc, #44]	; (22b08 <bota_upload+0x2e8>)
   22adc:	681a      	ldr	r2, [r3, #0]
   22ade:	2300      	movs	r3, #0
   22ae0:	4620      	mov	r0, r4
   22ae2:	f7f5 fcf9 	bl	184d8 <cbor_encode_int>
    if (g_err) {
   22ae6:	ea55 0300 	orrs.w	r3, r5, r0
   22aea:	f43f af69 	beq.w	229c0 <bota_upload+0x1a0>
        return MGMT_ERR_ENOMEM;
   22aee:	2602      	movs	r6, #2
   22af0:	e766      	b.n	229c0 <bota_upload+0x1a0>
   22af2:	bf00      	nop
   22af4:	00026314 	.word	0x00026314
   22af8:	000274e0 	.word	0x000274e0
   22afc:	00028374 	.word	0x00028374
   22b00:	00027964 	.word	0x00027964
   22b04:	00028e3c 	.word	0x00028e3c
   22b08:	20005968 	.word	0x20005968
   22b0c:	00029050 	.word	0x00029050
   22b10:	200058e0 	.word	0x200058e0
   22b14:	96f3b83d 	.word	0x96f3b83d
   22b18:	00029024 	.word	0x00029024
   22b1c:	00029030 	.word	0x00029030
   22b20:	00029088 	.word	0x00029088
   22b24:	000290a0 	.word	0x000290a0
   22b28:	000290c0 	.word	0x000290c0
   22b2c:	000290d8 	.word	0x000290d8
   22b30:	00026da4 	.word	0x00026da4
   22b34:	00026da8 	.word	0x00026da8
        rc = flash_area_write(tmp_fa, off, img_data, data_len);
   22b38:	462a      	mov	r2, r5
   22b3a:	9966      	ldr	r1, [sp, #408]	; 0x198
   22b3c:	980d      	ldr	r0, [sp, #52]	; 0x34
   22b3e:	f7f1 fbbf 	bl	142c0 <flash_area_write>
        if (rc) {
   22b42:	2800      	cmp	r0, #0
   22b44:	d148      	bne.n	22bd8 <bota_upload+0x3b8>
        if (bota_state.upload.off != off) {
   22b46:	4b25      	ldr	r3, [pc, #148]	; (22bdc <bota_upload+0x3bc>)
   22b48:	6819      	ldr	r1, [r3, #0]
   22b4a:	9a66      	ldr	r2, [sp, #408]	; 0x198
   22b4c:	9b67      	ldr	r3, [sp, #412]	; 0x19c
   22b4e:	2b00      	cmp	r3, #0
   22b50:	bf08      	it	eq
   22b52:	4291      	cmpeq	r1, r2
   22b54:	d003      	beq.n	22b5e <bota_upload+0x33e>
            bota_state.upload.upl_errs++;
   22b56:	4921      	ldr	r1, [pc, #132]	; (22bdc <bota_upload+0x3bc>)
   22b58:	688b      	ldr	r3, [r1, #8]
   22b5a:	3301      	adds	r3, #1
   22b5c:	608b      	str	r3, [r1, #8]
        bota_state.upload.off = off+data_len;
   22b5e:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   22b60:	4413      	add	r3, r2
   22b62:	4a1e      	ldr	r2, [pc, #120]	; (22bdc <bota_upload+0x3bc>)
   22b64:	6013      	str	r3, [r2, #0]
   22b66:	e79d      	b.n	22aa4 <bota_upload+0x284>
        BOTA_DEBUG("#### All done, checking image\n");
   22b68:	4b1d      	ldr	r3, [pc, #116]	; (22be0 <bota_upload+0x3c0>)
   22b6a:	2200      	movs	r2, #0
   22b6c:	2146      	movs	r1, #70	; 0x46
   22b6e:	481d      	ldr	r0, [pc, #116]	; (22be4 <bota_upload+0x3c4>)
   22b70:	f7f1 fd32 	bl	145d8 <log_printf>
        rc = bota_check_image(tmp_fa);
   22b74:	980d      	ldr	r0, [sp, #52]	; 0x34
   22b76:	f7ff fdfb 	bl	22770 <bota_check_image>
        if (rc != 0) {
   22b7a:	bb20      	cbnz	r0, 22bc6 <bota_upload+0x3a6>
        BOTA_DEBUG("#### Hash ok, set perm? %d \n",
   22b7c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22bdc <bota_upload+0x3bc>
   22b80:	f8d8 3010 	ldr.w	r3, [r8, #16]
   22b84:	4f17      	ldr	r7, [pc, #92]	; (22be4 <bota_upload+0x3c4>)
   22b86:	f003 0301 	and.w	r3, r3, #1
   22b8a:	9300      	str	r3, [sp, #0]
   22b8c:	4b16      	ldr	r3, [pc, #88]	; (22be8 <bota_upload+0x3c8>)
   22b8e:	2200      	movs	r2, #0
   22b90:	2146      	movs	r1, #70	; 0x46
   22b92:	4638      	mov	r0, r7
   22b94:	f7f1 fd20 	bl	145d8 <log_printf>
        rc = boot_set_pending((bota_state.upload.flags&BOTA_FLAGS_SET_PERMANENT)?1:0);
   22b98:	f8d8 0010 	ldr.w	r0, [r8, #16]
   22b9c:	f000 0001 	and.w	r0, r0, #1
   22ba0:	f7f4 fd9a 	bl	176d8 <boot_set_pending>
        BOTA_INFO("#### Will boot into new image at next boot\n", rc);
   22ba4:	9000      	str	r0, [sp, #0]
   22ba6:	4b11      	ldr	r3, [pc, #68]	; (22bec <bota_upload+0x3cc>)
   22ba8:	2201      	movs	r2, #1
   22baa:	2146      	movs	r1, #70	; 0x46
   22bac:	4638      	mov	r0, r7
   22bae:	f7f1 fd13 	bl	145d8 <log_printf>
        os_time_delay(OS_TICKS_PER_SEC);
   22bb2:	2080      	movs	r0, #128	; 0x80
   22bb4:	f7e7 fc54 	bl	a460 <os_time_delay>
        if (_new_image_cb) {
   22bb8:	4b0d      	ldr	r3, [pc, #52]	; (22bf0 <bota_upload+0x3d0>)
   22bba:	681b      	ldr	r3, [r3, #0]
   22bbc:	2b00      	cmp	r3, #0
   22bbe:	f43f af76 	beq.w	22aae <bota_upload+0x28e>
            _new_image_cb();
   22bc2:	4798      	blx	r3
   22bc4:	e773      	b.n	22aae <bota_upload+0x28e>
            BOTA_DEBUG("#### Hash / image failed\n");
   22bc6:	4b0b      	ldr	r3, [pc, #44]	; (22bf4 <bota_upload+0x3d4>)
   22bc8:	2200      	movs	r2, #0
   22bca:	2146      	movs	r1, #70	; 0x46
   22bcc:	4805      	ldr	r0, [pc, #20]	; (22be4 <bota_upload+0x3c4>)
   22bce:	f7f1 fd03 	bl	145d8 <log_printf>
            goto out;
   22bd2:	e76c      	b.n	22aae <bota_upload+0x28e>
            rc = MGMT_ERR_EINVAL;
   22bd4:	2603      	movs	r6, #3
   22bd6:	e6d4      	b.n	22982 <bota_upload+0x162>
            rc = MGMT_ERR_EINVAL;
   22bd8:	2603      	movs	r6, #3
   22bda:	e6d2      	b.n	22982 <bota_upload+0x162>
   22bdc:	20005968 	.word	0x20005968
   22be0:	00029100 	.word	0x00029100
   22be4:	200058e0 	.word	0x200058e0
   22be8:	0002913c 	.word	0x0002913c
   22bec:	0002915c 	.word	0x0002915c
   22bf0:	20005960 	.word	0x20005960
   22bf4:	00029120 	.word	0x00029120

00022bf8 <bcast_ota_set_new_fw_cb>:


void
bcast_ota_set_new_fw_cb(new_fw_cb *cb)
{
    _new_image_cb = cb;
   22bf8:	4b01      	ldr	r3, [pc, #4]	; (22c00 <bcast_ota_set_new_fw_cb+0x8>)
   22bfa:	6018      	str	r0, [r3, #0]
}
   22bfc:	4770      	bx	lr
   22bfe:	bf00      	nop
   22c00:	20005960 	.word	0x20005960

00022c04 <bcast_ota_nmgr_module_init>:

void
bcast_ota_nmgr_module_init(void)
{
   22c04:	b510      	push	{r4, lr}
   22c06:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   22c08:	4b0c      	ldr	r3, [pc, #48]	; (22c3c <bcast_ota_nmgr_module_init+0x38>)
   22c0a:	781b      	ldrb	r3, [r3, #0]
   22c0c:	b183      	cbz	r3, 22c30 <bcast_ota_nmgr_module_init+0x2c>

    rc = mgmt_group_register(&bota_nmgr_group);
   22c0e:	480c      	ldr	r0, [pc, #48]	; (22c40 <bcast_ota_nmgr_module_init+0x3c>)
   22c10:	f7ef f9e4 	bl	11fdc <mgmt_group_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   22c14:	b138      	cbz	r0, 22c26 <bcast_ota_nmgr_module_init+0x22>
   22c16:	2000      	movs	r0, #0
   22c18:	9000      	str	r0, [sp, #0]
   22c1a:	4b0a      	ldr	r3, [pc, #40]	; (22c44 <bcast_ota_nmgr_module_init+0x40>)
   22c1c:	681c      	ldr	r4, [r3, #0]
   22c1e:	4603      	mov	r3, r0
   22c20:	4602      	mov	r2, r0
   22c22:	4601      	mov	r1, r0
   22c24:	47a0      	blx	r4

#if MYNEWT_VAL(BCAST_OTA_REBOOT_ON_NEW_IMAGE)
    bcast_ota_set_new_fw_cb(hal_system_reset);
   22c26:	4808      	ldr	r0, [pc, #32]	; (22c48 <bcast_ota_nmgr_module_init+0x44>)
   22c28:	f7ff ffe6 	bl	22bf8 <bcast_ota_set_new_fw_cb>
#endif
}
   22c2c:	b002      	add	sp, #8
   22c2e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   22c30:	461a      	mov	r2, r3
   22c32:	4619      	mov	r1, r3
   22c34:	4618      	mov	r0, r3
   22c36:	f7e6 fac5 	bl	91c4 <__assert_func>
   22c3a:	bf00      	nop
   22c3c:	2000538c 	.word	0x2000538c
   22c40:	200012f0 	.word	0x200012f0
   22c44:	20000308 	.word	0x20000308
   22c48:	000081d1 	.word	0x000081d1

00022c4c <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   22c4c:	b510      	push	{r4, lr}
   22c4e:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   22c50:	2200      	movs	r2, #0
   22c52:	a903      	add	r1, sp, #12
   22c54:	2011      	movs	r0, #17
   22c56:	f7f1 fae1 	bl	1421c <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   22c5a:	b138      	cbz	r0, 22c6c <config_init_fcb+0x20>
   22c5c:	2000      	movs	r0, #0
   22c5e:	9000      	str	r0, [sp, #0]
   22c60:	4b26      	ldr	r3, [pc, #152]	; (22cfc <config_init_fcb+0xb0>)
   22c62:	681c      	ldr	r4, [r3, #0]
   22c64:	4603      	mov	r3, r0
   22c66:	4602      	mov	r2, r0
   22c68:	4601      	mov	r1, r0
   22c6a:	47a0      	blx	r4
    SYSINIT_PANIC_ASSERT(
   22c6c:	9b03      	ldr	r3, [sp, #12]
   22c6e:	2b09      	cmp	r3, #9
   22c70:	d907      	bls.n	22c82 <config_init_fcb+0x36>
   22c72:	2000      	movs	r0, #0
   22c74:	9000      	str	r0, [sp, #0]
   22c76:	4b21      	ldr	r3, [pc, #132]	; (22cfc <config_init_fcb+0xb0>)
   22c78:	681c      	ldr	r4, [r3, #0]
   22c7a:	4603      	mov	r3, r0
   22c7c:	4602      	mov	r2, r0
   22c7e:	4601      	mov	r1, r0
   22c80:	47a0      	blx	r4
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   22c82:	4a1f      	ldr	r2, [pc, #124]	; (22d00 <config_init_fcb+0xb4>)
   22c84:	a903      	add	r1, sp, #12
   22c86:	2011      	movs	r0, #17
   22c88:	f7f1 fac8 	bl	1421c <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   22c8c:	481d      	ldr	r0, [pc, #116]	; (22d04 <config_init_fcb+0xb8>)
   22c8e:	9b03      	ldr	r3, [sp, #12]
   22c90:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   22c92:	f000 f933 	bl	22efc <conf_fcb_src>
    if (rc) {
   22c96:	4603      	mov	r3, r0
   22c98:	b1c0      	cbz	r0, 22ccc <config_init_fcb+0x80>
        for (cnt = 0;
   22c9a:	2300      	movs	r3, #0
   22c9c:	9303      	str	r3, [sp, #12]
   22c9e:	e00c      	b.n	22cba <config_init_fcb+0x6e>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   22ca0:	4817      	ldr	r0, [pc, #92]	; (22d00 <config_init_fcb+0xb4>)
   22ca2:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   22ca6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   22caa:	689a      	ldr	r2, [r3, #8]
   22cac:	2100      	movs	r1, #0
   22cae:	4618      	mov	r0, r3
   22cb0:	f7f1 fb1a 	bl	142e8 <flash_area_erase>
             cnt++) {
   22cb4:	9b03      	ldr	r3, [sp, #12]
   22cb6:	3301      	adds	r3, #1
   22cb8:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   22cba:	4b12      	ldr	r3, [pc, #72]	; (22d04 <config_init_fcb+0xb8>)
   22cbc:	7b5a      	ldrb	r2, [r3, #13]
   22cbe:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   22cc0:	429a      	cmp	r2, r3
   22cc2:	dced      	bgt.n	22ca0 <config_init_fcb+0x54>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   22cc4:	480f      	ldr	r0, [pc, #60]	; (22d04 <config_init_fcb+0xb8>)
   22cc6:	f000 f919 	bl	22efc <conf_fcb_src>
   22cca:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   22ccc:	b13b      	cbz	r3, 22cde <config_init_fcb+0x92>
   22cce:	2000      	movs	r0, #0
   22cd0:	9000      	str	r0, [sp, #0]
   22cd2:	4b0a      	ldr	r3, [pc, #40]	; (22cfc <config_init_fcb+0xb0>)
   22cd4:	681c      	ldr	r4, [r3, #0]
   22cd6:	4603      	mov	r3, r0
   22cd8:	4602      	mov	r2, r0
   22cda:	4601      	mov	r1, r0
   22cdc:	47a0      	blx	r4
    rc = conf_fcb_dst(&config_init_conf_fcb);
   22cde:	4809      	ldr	r0, [pc, #36]	; (22d04 <config_init_fcb+0xb8>)
   22ce0:	f000 f938 	bl	22f54 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   22ce4:	b138      	cbz	r0, 22cf6 <config_init_fcb+0xaa>
   22ce6:	2000      	movs	r0, #0
   22ce8:	9000      	str	r0, [sp, #0]
   22cea:	4b04      	ldr	r3, [pc, #16]	; (22cfc <config_init_fcb+0xb0>)
   22cec:	681c      	ldr	r4, [r3, #0]
   22cee:	4603      	mov	r3, r0
   22cf0:	4602      	mov	r2, r0
   22cf2:	4601      	mov	r1, r0
   22cf4:	47a0      	blx	r4
}
   22cf6:	b004      	add	sp, #16
   22cf8:	bd10      	pop	{r4, pc}
   22cfa:	bf00      	nop
   22cfc:	20000308 	.word	0x20000308
   22d00:	20005980 	.word	0x20005980
   22d04:	200012fc 	.word	0x200012fc

00022d08 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   22d08:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   22d0a:	4b06      	ldr	r3, [pc, #24]	; (22d24 <config_pkg_init+0x1c>)
   22d0c:	781b      	ldrb	r3, [r3, #0]
   22d0e:	b123      	cbz	r3, 22d1a <config_pkg_init+0x12>

    conf_init();
   22d10:	f7f0 f832 	bl	12d78 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   22d14:	f7ff ff9a 	bl	22c4c <config_init_fcb>
#endif
#endif
}
   22d18:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   22d1a:	461a      	mov	r2, r3
   22d1c:	4619      	mov	r1, r3
   22d1e:	4618      	mov	r0, r3
   22d20:	f7e6 fa50 	bl	91c4 <__assert_func>
   22d24:	2000538c 	.word	0x2000538c

00022d28 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   22d28:	4770      	bx	lr
	...

00022d2c <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   22d2c:	b500      	push	{lr}
   22d2e:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   22d30:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   22d32:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   22d34:	466b      	mov	r3, sp
   22d36:	4a05      	ldr	r2, [pc, #20]	; (22d4c <conf_fcb_load+0x20>)
   22d38:	2100      	movs	r1, #0
   22d3a:	3008      	adds	r0, #8
   22d3c:	f7f6 fb7a 	bl	19434 <fcb_walk>
    if (rc) {
   22d40:	b910      	cbnz	r0, 22d48 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   22d42:	b003      	add	sp, #12
   22d44:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   22d48:	2002      	movs	r0, #2
   22d4a:	e7fa      	b.n	22d42 <conf_fcb_load+0x16>
   22d4c:	00022d51 	.word	0x00022d51

00022d50 <conf_fcb_load_cb>:
{
   22d50:	b530      	push	{r4, r5, lr}
   22d52:	b0db      	sub	sp, #364	; 0x16c
   22d54:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   22d56:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   22d58:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   22d5c:	d301      	bcc.n	22d62 <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   22d5e:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   22d62:	4623      	mov	r3, r4
   22d64:	aa02      	add	r2, sp, #8
   22d66:	6881      	ldr	r1, [r0, #8]
   22d68:	6800      	ldr	r0, [r0, #0]
   22d6a:	f7f1 fa95 	bl	14298 <flash_area_read>
    if (rc) {
   22d6e:	b110      	cbz	r0, 22d76 <conf_fcb_load_cb+0x26>
}
   22d70:	2000      	movs	r0, #0
   22d72:	b05b      	add	sp, #364	; 0x16c
   22d74:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   22d76:	a802      	add	r0, sp, #8
   22d78:	2300      	movs	r3, #0
   22d7a:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   22d7c:	466a      	mov	r2, sp
   22d7e:	a901      	add	r1, sp, #4
   22d80:	f000 f910 	bl	22fa4 <conf_line_parse>
    if (rc) {
   22d84:	2800      	cmp	r0, #0
   22d86:	d1f3      	bne.n	22d70 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   22d88:	682b      	ldr	r3, [r5, #0]
   22d8a:	686a      	ldr	r2, [r5, #4]
   22d8c:	9900      	ldr	r1, [sp, #0]
   22d8e:	9801      	ldr	r0, [sp, #4]
   22d90:	4798      	blx	r3
    return 0;
   22d92:	e7ed      	b.n	22d70 <conf_fcb_load_cb+0x20>

00022d94 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   22d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d96:	4604      	mov	r4, r0
   22d98:	460d      	mov	r5, r1
   22d9a:	4617      	mov	r7, r2
   22d9c:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   22d9e:	8983      	ldrh	r3, [r0, #12]
   22da0:	460a      	mov	r2, r1
   22da2:	6881      	ldr	r1, [r0, #8]
   22da4:	6800      	ldr	r0, [r0, #0]
   22da6:	f7f1 fa77 	bl	14298 <flash_area_read>
    if (rc) {
   22daa:	b100      	cbz	r0, 22dae <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   22dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   22dae:	89a3      	ldrh	r3, [r4, #12]
   22db0:	2200      	movs	r2, #0
   22db2:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   22db4:	4632      	mov	r2, r6
   22db6:	4639      	mov	r1, r7
   22db8:	4628      	mov	r0, r5
   22dba:	f000 f8f3 	bl	22fa4 <conf_line_parse>
    return rc;
   22dbe:	e7f5      	b.n	22dac <conf_fcb_var_read+0x18>

00022dc0 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   22dc0:	b570      	push	{r4, r5, r6, lr}
   22dc2:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
   22dc6:	4604      	mov	r4, r0
   22dc8:	460d      	mov	r5, r1
   22dca:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   22dcc:	f7f6 f925 	bl	1901a <fcb_append_to_scratch>
    if (rc) {
   22dd0:	2800      	cmp	r0, #0
   22dd2:	d15e      	bne.n	22e92 <conf_fcb_compress_internal+0xd2>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   22dd4:	2300      	movs	r3, #0
   22dd6:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   22dd8:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   22dda:	a908      	add	r1, sp, #32
   22ddc:	4620      	mov	r0, r4
   22dde:	f7f6 fad3 	bl	19388 <fcb_getnext>
   22de2:	2800      	cmp	r0, #0
   22de4:	d152      	bne.n	22e8c <conf_fcb_compress_internal+0xcc>
        if (loc1.fe_area != fcb->f_oldest) {
   22de6:	9a08      	ldr	r2, [sp, #32]
   22de8:	69a3      	ldr	r3, [r4, #24]
   22dea:	429a      	cmp	r2, r3
   22dec:	d14e      	bne.n	22e8c <conf_fcb_compress_internal+0xcc>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   22dee:	ab02      	add	r3, sp, #8
   22df0:	aa03      	add	r2, sp, #12
   22df2:	a964      	add	r1, sp, #400	; 0x190
   22df4:	a808      	add	r0, sp, #32
   22df6:	f7ff ffcd 	bl	22d94 <conf_fcb_var_read>
        if (rc) {
   22dfa:	2800      	cmp	r0, #0
   22dfc:	d1ed      	bne.n	22dda <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   22dfe:	9b02      	ldr	r3, [sp, #8]
   22e00:	2b00      	cmp	r3, #0
   22e02:	d0ea      	beq.n	22dda <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   22e04:	f10d 0c10 	add.w	ip, sp, #16
   22e08:	ab08      	add	r3, sp, #32
   22e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   22e0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   22e10:	a904      	add	r1, sp, #16
   22e12:	4620      	mov	r0, r4
   22e14:	f7f6 fab8 	bl	19388 <fcb_getnext>
   22e18:	b978      	cbnz	r0, 22e3a <conf_fcb_compress_internal+0x7a>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   22e1a:	466b      	mov	r3, sp
   22e1c:	aa01      	add	r2, sp, #4
   22e1e:	a90c      	add	r1, sp, #48	; 0x30
   22e20:	a804      	add	r0, sp, #16
   22e22:	f7ff ffb7 	bl	22d94 <conf_fcb_var_read>
            if (rc) {
   22e26:	2800      	cmp	r0, #0
   22e28:	d1f2      	bne.n	22e10 <conf_fcb_compress_internal+0x50>
                continue;
            }
            if (!strcmp(name1, name2)) {
   22e2a:	9901      	ldr	r1, [sp, #4]
   22e2c:	9803      	ldr	r0, [sp, #12]
   22e2e:	f7ed fc4f 	bl	106d0 <strcmp>
   22e32:	4603      	mov	r3, r0
   22e34:	2800      	cmp	r0, #0
   22e36:	d1eb      	bne.n	22e10 <conf_fcb_compress_internal+0x50>
   22e38:	e000      	b.n	22e3c <conf_fcb_compress_internal+0x7c>
        copy = 1;
   22e3a:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   22e3c:	2b00      	cmp	r3, #0
   22e3e:	d0cc      	beq.n	22dda <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   22e40:	b12d      	cbz	r5, 22e4e <conf_fcb_compress_internal+0x8e>
            if (copy_or_not(name1, val1, cn_arg)) {
   22e42:	4632      	mov	r2, r6
   22e44:	9902      	ldr	r1, [sp, #8]
   22e46:	9803      	ldr	r0, [sp, #12]
   22e48:	47a8      	blx	r5
   22e4a:	2800      	cmp	r0, #0
   22e4c:	d1c5      	bne.n	22dda <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   22e4e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   22e52:	aa64      	add	r2, sp, #400	; 0x190
   22e54:	990a      	ldr	r1, [sp, #40]	; 0x28
   22e56:	9808      	ldr	r0, [sp, #32]
   22e58:	f7f1 fa1e 	bl	14298 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   22e5c:	2800      	cmp	r0, #0
   22e5e:	d1bc      	bne.n	22dda <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   22e60:	aa04      	add	r2, sp, #16
   22e62:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   22e66:	4620      	mov	r0, r4
   22e68:	f7f6 f8f0 	bl	1904c <fcb_append>
        if (rc) {
   22e6c:	2800      	cmp	r0, #0
   22e6e:	d1b4      	bne.n	22dda <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   22e70:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   22e74:	aa64      	add	r2, sp, #400	; 0x190
   22e76:	9906      	ldr	r1, [sp, #24]
   22e78:	9804      	ldr	r0, [sp, #16]
   22e7a:	f7f1 fa21 	bl	142c0 <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   22e7e:	2800      	cmp	r0, #0
   22e80:	d1ab      	bne.n	22dda <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   22e82:	a904      	add	r1, sp, #16
   22e84:	4620      	mov	r0, r4
   22e86:	f7f6 f95e 	bl	19146 <fcb_append_finish>
   22e8a:	e7a6      	b.n	22dda <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   22e8c:	4620      	mov	r0, r4
   22e8e:	f7f6 fa95 	bl	193bc <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   22e92:	f50d 7d3c 	add.w	sp, sp, #752	; 0x2f0
   22e96:	bd70      	pop	{r4, r5, r6, pc}

00022e98 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   22e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e9c:	b084      	sub	sp, #16
   22e9e:	4606      	mov	r6, r0
   22ea0:	4688      	mov	r8, r1
   22ea2:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   22ea4:	2500      	movs	r5, #0
   22ea6:	2d09      	cmp	r5, #9
   22ea8:	dc11      	bgt.n	22ece <conf_fcb_append+0x36>
        rc = fcb_append(fcb, len, &loc);
   22eaa:	466a      	mov	r2, sp
   22eac:	b2b9      	uxth	r1, r7
   22eae:	4630      	mov	r0, r6
   22eb0:	f7f6 f8cc 	bl	1904c <fcb_append>
   22eb4:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   22eb6:	f110 0f04 	cmn.w	r0, #4
   22eba:	d108      	bne.n	22ece <conf_fcb_append+0x36>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
   22ebc:	79b0      	ldrb	r0, [r6, #6]
   22ebe:	b1b8      	cbz	r0, 22ef0 <conf_fcb_append+0x58>
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   22ec0:	2200      	movs	r2, #0
   22ec2:	4611      	mov	r1, r2
   22ec4:	4630      	mov	r0, r6
   22ec6:	f7ff ff7b 	bl	22dc0 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   22eca:	3501      	adds	r5, #1
   22ecc:	e7eb      	b.n	22ea6 <conf_fcb_append+0xe>
    }
    if (rc) {
   22ece:	b98c      	cbnz	r4, 22ef4 <conf_fcb_append+0x5c>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   22ed0:	463b      	mov	r3, r7
   22ed2:	4642      	mov	r2, r8
   22ed4:	9902      	ldr	r1, [sp, #8]
   22ed6:	9800      	ldr	r0, [sp, #0]
   22ed8:	f7f1 f9f2 	bl	142c0 <flash_area_write>
    if (rc) {
   22edc:	4604      	mov	r4, r0
   22ede:	b958      	cbnz	r0, 22ef8 <conf_fcb_append+0x60>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   22ee0:	4669      	mov	r1, sp
   22ee2:	4630      	mov	r0, r6
   22ee4:	f7f6 f92f 	bl	19146 <fcb_append_finish>
    return OS_OK;
}
   22ee8:	4620      	mov	r0, r4
   22eea:	b004      	add	sp, #16
   22eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return OS_ENOMEM;
   22ef0:	2401      	movs	r4, #1
   22ef2:	e7f9      	b.n	22ee8 <conf_fcb_append+0x50>
        return OS_EINVAL;
   22ef4:	2402      	movs	r4, #2
   22ef6:	e7f7      	b.n	22ee8 <conf_fcb_append+0x50>
        return OS_EINVAL;
   22ef8:	2402      	movs	r4, #2
   22efa:	e7f5      	b.n	22ee8 <conf_fcb_append+0x50>

00022efc <conf_fcb_src>:
{
   22efc:	b570      	push	{r4, r5, r6, lr}
   22efe:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   22f00:	2301      	movs	r3, #1
   22f02:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   22f04:	7b43      	ldrb	r3, [r0, #13]
   22f06:	2b01      	cmp	r3, #1
   22f08:	d902      	bls.n	22f10 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   22f0a:	2301      	movs	r3, #1
   22f0c:	7383      	strb	r3, [r0, #14]
   22f0e:	e007      	b.n	22f20 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   22f10:	2300      	movs	r3, #0
   22f12:	7383      	strb	r3, [r0, #14]
   22f14:	e004      	b.n	22f20 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   22f16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   22f18:	6882      	ldr	r2, [r0, #8]
   22f1a:	2100      	movs	r1, #0
   22f1c:	f7f1 f9e4 	bl	142e8 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   22f20:	f104 0508 	add.w	r5, r4, #8
   22f24:	4628      	mov	r0, r5
   22f26:	f7f5 ffbf 	bl	18ea8 <fcb_init>
        if (rc) {
   22f2a:	4606      	mov	r6, r0
   22f2c:	b968      	cbnz	r0, 22f4a <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   22f2e:	7ba3      	ldrb	r3, [r4, #14]
   22f30:	b123      	cbz	r3, 22f3c <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   22f32:	4628      	mov	r0, r5
   22f34:	f7f5 ff35 	bl	18da2 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   22f38:	2800      	cmp	r0, #0
   22f3a:	ddec      	ble.n	22f16 <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   22f3c:	4b04      	ldr	r3, [pc, #16]	; (22f50 <conf_fcb_src+0x54>)
   22f3e:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   22f40:	4620      	mov	r0, r4
   22f42:	f7f0 f959 	bl	131f8 <conf_src_register>
}
   22f46:	4630      	mov	r0, r6
   22f48:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   22f4a:	2603      	movs	r6, #3
   22f4c:	e7fb      	b.n	22f46 <conf_fcb_src+0x4a>
   22f4e:	bf00      	nop
   22f50:	20001334 	.word	0x20001334

00022f54 <conf_fcb_dst>:
{
   22f54:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   22f56:	4b03      	ldr	r3, [pc, #12]	; (22f64 <conf_fcb_dst+0x10>)
   22f58:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   22f5a:	f7f0 f961 	bl	13220 <conf_dst_register>
}
   22f5e:	2000      	movs	r0, #0
   22f60:	bd08      	pop	{r3, pc}
   22f62:	bf00      	nop
   22f64:	20001334 	.word	0x20001334

00022f68 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   22f68:	b199      	cbz	r1, 22f92 <conf_fcb_kv_save+0x2a>
{
   22f6a:	b510      	push	{r4, lr}
   22f6c:	b0d8      	sub	sp, #352	; 0x160
   22f6e:	4604      	mov	r4, r0
   22f70:	4613      	mov	r3, r2
   22f72:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   22f74:	f44f 71b0 	mov.w	r1, #352	; 0x160
   22f78:	4668      	mov	r0, sp
   22f7a:	f000 f875 	bl	23068 <conf_line_make>
   22f7e:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   22f80:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   22f84:	d807      	bhi.n	22f96 <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   22f86:	4669      	mov	r1, sp
   22f88:	4620      	mov	r0, r4
   22f8a:	f7ff ff85 	bl	22e98 <conf_fcb_append>
}
   22f8e:	b058      	add	sp, #352	; 0x160
   22f90:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   22f92:	2003      	movs	r0, #3
}
   22f94:	4770      	bx	lr
        return OS_INVALID_PARM;
   22f96:	2003      	movs	r0, #3
   22f98:	e7f9      	b.n	22f8e <conf_fcb_kv_save+0x26>

00022f9a <conf_fcb_save>:
{
   22f9a:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   22f9c:	3008      	adds	r0, #8
   22f9e:	f7ff ffe3 	bl	22f68 <conf_fcb_kv_save>
}
   22fa2:	bd08      	pop	{r3, pc}

00022fa4 <conf_line_parse>:
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   22fa4:	2300      	movs	r3, #0
   22fa6:	6013      	str	r3, [r2, #0]
    } state = FIND_NAME;
   22fa8:	469c      	mov	ip, r3
    for (cp = buf; *cp != '\0'; cp++) {
   22faa:	7803      	ldrb	r3, [r0, #0]
   22fac:	2b00      	cmp	r3, #0
   22fae:	d04f      	beq.n	23050 <conf_line_parse+0xac>
{
   22fb0:	b500      	push	{lr}
   22fb2:	e01a      	b.n	22fea <conf_line_parse+0x46>
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   22fb4:	2b20      	cmp	r3, #32
   22fb6:	d015      	beq.n	22fe4 <conf_line_parse+0x40>
   22fb8:	2b0a      	cmp	r3, #10
   22fba:	d013      	beq.n	22fe4 <conf_line_parse+0x40>
   22fbc:	2b09      	cmp	r3, #9
   22fbe:	d011      	beq.n	22fe4 <conf_line_parse+0x40>
   22fc0:	2b0d      	cmp	r3, #13
   22fc2:	d00f      	beq.n	22fe4 <conf_line_parse+0x40>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   22fc4:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   22fc6:	f04f 0c01 	mov.w	ip, #1
   22fca:	e00b      	b.n	22fe4 <conf_line_parse+0x40>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   22fcc:	2b3d      	cmp	r3, #61	; 0x3d
   22fce:	d01b      	beq.n	23008 <conf_line_parse+0x64>
   22fd0:	2b20      	cmp	r3, #32
   22fd2:	d005      	beq.n	22fe0 <conf_line_parse+0x3c>
   22fd4:	2b0a      	cmp	r3, #10
   22fd6:	d003      	beq.n	22fe0 <conf_line_parse+0x3c>
   22fd8:	2b09      	cmp	r3, #9
   22fda:	d001      	beq.n	22fe0 <conf_line_parse+0x3c>
   22fdc:	2b0d      	cmp	r3, #13
   22fde:	d101      	bne.n	22fe4 <conf_line_parse+0x40>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   22fe0:	2300      	movs	r3, #0
   22fe2:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   22fe4:	3001      	adds	r0, #1
   22fe6:	7803      	ldrb	r3, [r0, #0]
   22fe8:	b32b      	cbz	r3, 23036 <conf_line_parse+0x92>
        switch (state) {
   22fea:	f1bc 0f03 	cmp.w	ip, #3
   22fee:	d8f9      	bhi.n	22fe4 <conf_line_parse+0x40>
   22ff0:	f20f 0e04 	addw	lr, pc, #4
   22ff4:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   22ff8:	00022fb5 	.word	0x00022fb5
   22ffc:	00022fcd 	.word	0x00022fcd
   23000:	00023013 	.word	0x00023013
   23004:	0002302b 	.word	0x0002302b
                *cp = '\0';
   23008:	2300      	movs	r3, #0
   2300a:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   2300c:	f04f 0c02 	mov.w	ip, #2
   23010:	e7e8      	b.n	22fe4 <conf_line_parse+0x40>
   23012:	2b20      	cmp	r3, #32
   23014:	d0e6      	beq.n	22fe4 <conf_line_parse+0x40>
   23016:	2b0a      	cmp	r3, #10
   23018:	d0e4      	beq.n	22fe4 <conf_line_parse+0x40>
   2301a:	2b09      	cmp	r3, #9
   2301c:	d0e2      	beq.n	22fe4 <conf_line_parse+0x40>
   2301e:	2b0d      	cmp	r3, #13
   23020:	d0e0      	beq.n	22fe4 <conf_line_parse+0x40>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   23022:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   23024:	f04f 0c03 	mov.w	ip, #3
   23028:	e7dc      	b.n	22fe4 <conf_line_parse+0x40>
	return (__c >= 0x20 && __c <= 0x7e);
   2302a:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   2302c:	2b5e      	cmp	r3, #94	; 0x5e
   2302e:	d9d9      	bls.n	22fe4 <conf_line_parse+0x40>
                *cp = '\0';
   23030:	2300      	movs	r3, #0
   23032:	7003      	strb	r3, [r0, #0]
   23034:	e7d6      	b.n	22fe4 <conf_line_parse+0x40>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   23036:	f1ac 0c02 	sub.w	ip, ip, #2
   2303a:	fa5f fc8c 	uxtb.w	ip, ip
   2303e:	f1bc 0f01 	cmp.w	ip, #1
   23042:	d802      	bhi.n	2304a <conf_line_parse+0xa6>
        return 0;
   23044:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   23046:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   2304a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2304e:	e7fa      	b.n	23046 <conf_line_parse+0xa2>
    if (state == FIND_VAL_END || state == FIND_VAL) {
   23050:	f1ac 0c02 	sub.w	ip, ip, #2
   23054:	fa5f fc8c 	uxtb.w	ip, ip
   23058:	f1bc 0f01 	cmp.w	ip, #1
   2305c:	d801      	bhi.n	23062 <conf_line_parse+0xbe>
        return 0;
   2305e:	2000      	movs	r0, #0
   23060:	4770      	bx	lr
        return -1;
   23062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   23066:	4770      	bx	lr

00023068 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   23068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2306c:	4606      	mov	r6, r0
   2306e:	4689      	mov	r9, r1
   23070:	4690      	mov	r8, r2
   23072:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   23074:	4610      	mov	r0, r2
   23076:	f7ed fb37 	bl	106e8 <strlen>
   2307a:	4605      	mov	r5, r0
    if (value) {
   2307c:	b1e7      	cbz	r7, 230b8 <conf_line_make+0x50>
        vlen = strlen(value);
   2307e:	4638      	mov	r0, r7
   23080:	f7ed fb32 	bl	106e8 <strlen>
   23084:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   23086:	1963      	adds	r3, r4, r5
   23088:	3301      	adds	r3, #1
   2308a:	454b      	cmp	r3, r9
   2308c:	da16      	bge.n	230bc <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   2308e:	462a      	mov	r2, r5
   23090:	4641      	mov	r1, r8
   23092:	4630      	mov	r0, r6
   23094:	f7ed fae4 	bl	10660 <memcpy>
    off = nlen;
    dst[off++] = '=';
   23098:	f105 0801 	add.w	r8, r5, #1
   2309c:	233d      	movs	r3, #61	; 0x3d
   2309e:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   230a0:	4622      	mov	r2, r4
   230a2:	4639      	mov	r1, r7
   230a4:	eb06 0008 	add.w	r0, r6, r8
   230a8:	f7ed fada 	bl	10660 <memcpy>
    off += vlen;
   230ac:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   230b0:	2300      	movs	r3, #0
   230b2:	5433      	strb	r3, [r6, r0]

    return off;
}
   230b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   230b8:	2400      	movs	r4, #0
   230ba:	e7e4      	b.n	23086 <conf_line_make+0x1e>
        return -1;
   230bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   230c0:	e7f8      	b.n	230b4 <conf_line_make+0x4c>
	...

000230c4 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   230c4:	b410      	push	{r4}
   230c6:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   230c8:	4b08      	ldr	r3, [pc, #32]	; (230ec <modlog_find_by_module+0x28>)
   230ca:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   230cc:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   230ce:	e001      	b.n	230d4 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   230d0:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   230d2:	6800      	ldr	r0, [r0, #0]
   230d4:	b120      	cbz	r0, 230e0 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   230d6:	7a43      	ldrb	r3, [r0, #9]
   230d8:	4293      	cmp	r3, r2
   230da:	d001      	beq.n	230e0 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   230dc:	d9f8      	bls.n	230d0 <modlog_find_by_module+0xc>
            cur = NULL;
   230de:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   230e0:	b101      	cbz	r1, 230e4 <modlog_find_by_module+0x20>
        *out_prev = prev;
   230e2:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   230e4:	f85d 4b04 	ldr.w	r4, [sp], #4
   230e8:	4770      	bx	lr
   230ea:	bf00      	nop
   230ec:	20005acc 	.word	0x20005acc

000230f0 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   230f0:	b510      	push	{r4, lr}
   230f2:	b082      	sub	sp, #8
   230f4:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   230f6:	a901      	add	r1, sp, #4
   230f8:	7a40      	ldrb	r0, [r0, #9]
   230fa:	f7ff ffe3 	bl	230c4 <modlog_find_by_module>
    if (prev == NULL) {
   230fe:	9b01      	ldr	r3, [sp, #4]
   23100:	b143      	cbz	r3, 23114 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   23102:	681b      	ldr	r3, [r3, #0]
   23104:	6023      	str	r3, [r4, #0]
   23106:	9b01      	ldr	r3, [sp, #4]
   23108:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   2310a:	7a63      	ldrb	r3, [r4, #9]
   2310c:	2bff      	cmp	r3, #255	; 0xff
   2310e:	d006      	beq.n	2311e <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   23110:	b002      	add	sp, #8
   23112:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   23114:	4b03      	ldr	r3, [pc, #12]	; (23124 <modlog_insert+0x34>)
   23116:	681a      	ldr	r2, [r3, #0]
   23118:	6022      	str	r2, [r4, #0]
   2311a:	601c      	str	r4, [r3, #0]
   2311c:	e7f5      	b.n	2310a <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   2311e:	4b02      	ldr	r3, [pc, #8]	; (23128 <modlog_insert+0x38>)
   23120:	601c      	str	r4, [r3, #0]
}
   23122:	e7f5      	b.n	23110 <modlog_insert+0x20>
   23124:	20005acc 	.word	0x20005acc
   23128:	200059ec 	.word	0x200059ec

0002312c <modlog_alloc>:
{
   2312c:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   2312e:	4805      	ldr	r0, [pc, #20]	; (23144 <modlog_alloc+0x18>)
   23130:	f7e6 fc74 	bl	9a1c <os_memblock_get>
    if (mm != NULL) {
   23134:	4603      	mov	r3, r0
   23136:	b118      	cbz	r0, 23140 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   23138:	2200      	movs	r2, #0
   2313a:	6002      	str	r2, [r0, #0]
   2313c:	6042      	str	r2, [r0, #4]
   2313e:	6082      	str	r2, [r0, #8]
}
   23140:	4618      	mov	r0, r3
   23142:	bd08      	pop	{r3, pc}
   23144:	20005ab0 	.word	0x20005ab0

00023148 <modlog_infer_handle>:
{
   23148:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   2314a:	4a0f      	ldr	r2, [pc, #60]	; (23188 <modlog_infer_handle+0x40>)
   2314c:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   2314e:	480f      	ldr	r0, [pc, #60]	; (2318c <modlog_infer_handle+0x44>)
   23150:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   23154:	2abf      	cmp	r2, #191	; 0xbf
   23156:	d80b      	bhi.n	23170 <modlog_infer_handle+0x28>
   23158:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   2315a:	4b0c      	ldr	r3, [pc, #48]	; (2318c <modlog_infer_handle+0x44>)
   2315c:	fba3 1302 	umull	r1, r3, r3, r2
   23160:	08db      	lsrs	r3, r3, #3
   23162:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23166:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2316a:	d107      	bne.n	2317c <modlog_infer_handle+0x34>
}
   2316c:	b2c0      	uxtb	r0, r0
   2316e:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   23170:	2300      	movs	r3, #0
   23172:	461a      	mov	r2, r3
   23174:	4619      	mov	r1, r3
   23176:	4618      	mov	r0, r3
   23178:	f7e6 f824 	bl	91c4 <__assert_func>
    assert(off % elem_sz == 0);
   2317c:	2300      	movs	r3, #0
   2317e:	461a      	mov	r2, r3
   23180:	4619      	mov	r1, r3
   23182:	4618      	mov	r0, r3
   23184:	f7e6 f81e 	bl	91c4 <__assert_func>
   23188:	200059f0 	.word	0x200059f0
   2318c:	aaaaaaab 	.word	0xaaaaaaab

00023190 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   23190:	b1c9      	cbz	r1, 231c6 <modlog_register_no_lock+0x36>
{
   23192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23196:	4607      	mov	r7, r0
   23198:	4616      	mov	r6, r2
   2319a:	461d      	mov	r5, r3
   2319c:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   2319e:	f7ff ffc5 	bl	2312c <modlog_alloc>
    if (mm == NULL) {
   231a2:	4604      	mov	r4, r0
   231a4:	b190      	cbz	r0, 231cc <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   231a6:	f7ff ffcf 	bl	23148 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   231aa:	f8c4 8004 	str.w	r8, [r4, #4]
   231ae:	7220      	strb	r0, [r4, #8]
   231b0:	7267      	strb	r7, [r4, #9]
   231b2:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   231b4:	4620      	mov	r0, r4
   231b6:	f7ff ff9b 	bl	230f0 <modlog_insert>

    if (out_handle != NULL) {
   231ba:	b155      	cbz	r5, 231d2 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   231bc:	7a23      	ldrb	r3, [r4, #8]
   231be:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   231c0:	2000      	movs	r0, #0
}
   231c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   231c6:	f06f 0001 	mvn.w	r0, #1
}
   231ca:	4770      	bx	lr
        return SYS_ENOMEM;
   231cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   231d0:	e7f7      	b.n	231c2 <modlog_register_no_lock+0x32>
    return 0;
   231d2:	2000      	movs	r0, #0
   231d4:	e7f5      	b.n	231c2 <modlog_register_no_lock+0x32>

000231d6 <modlog_append_one>:
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    int rc;

    if (level >= mm->desc.min_level) {
   231d6:	f890 c00a 	ldrb.w	ip, [r0, #10]
   231da:	4594      	cmp	ip, r2
   231dc:	d901      	bls.n	231e2 <modlog_append_one+0xc>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   231de:	2000      	movs	r0, #0
}
   231e0:	4770      	bx	lr
{
   231e2:	b510      	push	{r4, lr}
   231e4:	b082      	sub	sp, #8
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   231e6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   231ea:	9401      	str	r4, [sp, #4]
   231ec:	9c04      	ldr	r4, [sp, #16]
   231ee:	9400      	str	r4, [sp, #0]
   231f0:	6840      	ldr	r0, [r0, #4]
   231f2:	f7f1 f9c5 	bl	14580 <log_append_body>
        if (rc != 0) {
   231f6:	b908      	cbnz	r0, 231fc <modlog_append_one+0x26>
}
   231f8:	b002      	add	sp, #8
   231fa:	bd10      	pop	{r4, pc}
            return SYS_EIO;
   231fc:	f06f 0004 	mvn.w	r0, #4
   23200:	e7fa      	b.n	231f8 <modlog_append_one+0x22>
	...

00023204 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   23204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23208:	b083      	sub	sp, #12
   2320a:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   2320e:	28ff      	cmp	r0, #255	; 0xff
   23210:	d031      	beq.n	23276 <modlog_append_no_lock+0x72>
   23212:	4605      	mov	r5, r0
   23214:	460e      	mov	r6, r1
   23216:	4617      	mov	r7, r2
   23218:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   2321a:	2100      	movs	r1, #0
   2321c:	f7ff ff52 	bl	230c4 <modlog_find_by_module>
    if (mm != NULL) {
   23220:	4604      	mov	r4, r0
   23222:	b198      	cbz	r0, 2324c <modlog_append_no_lock+0x48>
        while (mm != NULL && mm->desc.module == module) {
   23224:	b354      	cbz	r4, 2327c <modlog_append_no_lock+0x78>
   23226:	7a60      	ldrb	r0, [r4, #9]
   23228:	42a8      	cmp	r0, r5
   2322a:	d10d      	bne.n	23248 <modlog_append_no_lock+0x44>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   2322c:	f8cd 9004 	str.w	r9, [sp, #4]
   23230:	f8cd 8000 	str.w	r8, [sp]
   23234:	463b      	mov	r3, r7
   23236:	4632      	mov	r2, r6
   23238:	4629      	mov	r1, r5
   2323a:	4620      	mov	r0, r4
   2323c:	f7ff ffcb 	bl	231d6 <modlog_append_one>
            if (rc != 0) {
   23240:	4603      	mov	r3, r0
   23242:	b9e0      	cbnz	r0, 2327e <modlog_append_no_lock+0x7a>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   23244:	6824      	ldr	r4, [r4, #0]
   23246:	e7ed      	b.n	23224 <modlog_append_no_lock+0x20>
        }
        return 0;
   23248:	2300      	movs	r3, #0
   2324a:	e018      	b.n	2327e <modlog_append_no_lock+0x7a>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   2324c:	4b0e      	ldr	r3, [pc, #56]	; (23288 <modlog_append_no_lock+0x84>)
   2324e:	681c      	ldr	r4, [r3, #0]
   23250:	e000      	b.n	23254 <modlog_append_no_lock+0x50>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   23252:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   23254:	b16c      	cbz	r4, 23272 <modlog_append_no_lock+0x6e>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   23256:	f8cd 9004 	str.w	r9, [sp, #4]
   2325a:	f8cd 8000 	str.w	r8, [sp]
   2325e:	463b      	mov	r3, r7
   23260:	4632      	mov	r2, r6
   23262:	4629      	mov	r1, r5
   23264:	4620      	mov	r0, r4
   23266:	f7ff ffb6 	bl	231d6 <modlog_append_one>
        if (rc != 0) {
   2326a:	4603      	mov	r3, r0
   2326c:	2800      	cmp	r0, #0
   2326e:	d0f0      	beq.n	23252 <modlog_append_no_lock+0x4e>
   23270:	e005      	b.n	2327e <modlog_append_no_lock+0x7a>
            return rc;
        }
    }

    return 0;
   23272:	2300      	movs	r3, #0
   23274:	e003      	b.n	2327e <modlog_append_no_lock+0x7a>
        return SYS_EINVAL;
   23276:	f06f 0301 	mvn.w	r3, #1
   2327a:	e000      	b.n	2327e <modlog_append_no_lock+0x7a>
        return 0;
   2327c:	2300      	movs	r3, #0
}
   2327e:	4618      	mov	r0, r3
   23280:	b003      	add	sp, #12
   23282:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23286:	bf00      	nop
   23288:	200059ec 	.word	0x200059ec

0002328c <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   2328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23290:	4604      	mov	r4, r0
   23292:	460d      	mov	r5, r1
   23294:	4616      	mov	r6, r2
   23296:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   23298:	f8df 8020 	ldr.w	r8, [pc, #32]	; 232bc <modlog_register+0x30>
   2329c:	4640      	mov	r0, r8
   2329e:	f000 f938 	bl	23512 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   232a2:	463b      	mov	r3, r7
   232a4:	4632      	mov	r2, r6
   232a6:	4629      	mov	r1, r5
   232a8:	4620      	mov	r0, r4
   232aa:	f7ff ff71 	bl	23190 <modlog_register_no_lock>
   232ae:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   232b0:	4640      	mov	r0, r8
   232b2:	f000 f958 	bl	23566 <rwlock_release_write>

    return rc;
}
   232b6:	4620      	mov	r0, r4
   232b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232bc:	20005ad0 	.word	0x20005ad0

000232c0 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   232c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232c4:	b082      	sub	sp, #8
   232c6:	4604      	mov	r4, r0
   232c8:	460d      	mov	r5, r1
   232ca:	4616      	mov	r6, r2
   232cc:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   232ce:	f8df 802c 	ldr.w	r8, [pc, #44]	; 232fc <modlog_append+0x3c>
   232d2:	4640      	mov	r0, r8
   232d4:	f000 f8dd 	bl	23492 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   232d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   232dc:	9300      	str	r3, [sp, #0]
   232de:	463b      	mov	r3, r7
   232e0:	4632      	mov	r2, r6
   232e2:	4629      	mov	r1, r5
   232e4:	4620      	mov	r0, r4
   232e6:	f7ff ff8d 	bl	23204 <modlog_append_no_lock>
   232ea:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   232ec:	4640      	mov	r0, r8
   232ee:	f000 f8fd 	bl	234ec <rwlock_release_read>

    return rc;
}
   232f2:	4620      	mov	r0, r4
   232f4:	b002      	add	sp, #8
   232f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232fa:	bf00      	nop
   232fc:	20005ad0 	.word	0x20005ad0

00023300 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   23300:	b40c      	push	{r2, r3}
   23302:	b530      	push	{r4, r5, lr}
   23304:	b0a5      	sub	sp, #148	; 0x94
   23306:	4604      	mov	r4, r0
   23308:	460d      	mov	r5, r1
   2330a:	ab28      	add	r3, sp, #160	; 0xa0
   2330c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   23310:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   23312:	2180      	movs	r1, #128	; 0x80
   23314:	a803      	add	r0, sp, #12
   23316:	f7ed fddb 	bl	10ed0 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   2331a:	287f      	cmp	r0, #127	; 0x7f
   2331c:	dd00      	ble.n	23320 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   2331e:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   23320:	b280      	uxth	r0, r0
   23322:	9000      	str	r0, [sp, #0]
   23324:	ab03      	add	r3, sp, #12
   23326:	2200      	movs	r2, #0
   23328:	4629      	mov	r1, r5
   2332a:	4620      	mov	r0, r4
   2332c:	f7ff ffc8 	bl	232c0 <modlog_append>
}
   23330:	b025      	add	sp, #148	; 0x94
   23332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   23336:	b002      	add	sp, #8
   23338:	4770      	bx	lr
	...

0002333c <modlog_init>:

void
modlog_init(void)
{
   2333c:	b510      	push	{r4, lr}
   2333e:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   23340:	4b1e      	ldr	r3, [pc, #120]	; (233bc <modlog_init+0x80>)
   23342:	781b      	ldrb	r3, [r3, #0]
   23344:	2b00      	cmp	r3, #0
   23346:	d034      	beq.n	233b2 <modlog_init+0x76>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   23348:	4b1d      	ldr	r3, [pc, #116]	; (233c0 <modlog_init+0x84>)
   2334a:	9300      	str	r3, [sp, #0]
   2334c:	4b1d      	ldr	r3, [pc, #116]	; (233c4 <modlog_init+0x88>)
   2334e:	220c      	movs	r2, #12
   23350:	2110      	movs	r1, #16
   23352:	481d      	ldr	r0, [pc, #116]	; (233c8 <modlog_init+0x8c>)
   23354:	f7e6 fb58 	bl	9a08 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   23358:	b138      	cbz	r0, 2336a <modlog_init+0x2e>
   2335a:	2000      	movs	r0, #0
   2335c:	9000      	str	r0, [sp, #0]
   2335e:	4b1b      	ldr	r3, [pc, #108]	; (233cc <modlog_init+0x90>)
   23360:	681c      	ldr	r4, [r3, #0]
   23362:	4603      	mov	r3, r0
   23364:	4602      	mov	r2, r0
   23366:	4601      	mov	r1, r0
   23368:	47a0      	blx	r4

    SLIST_INIT(&modlog_mappings);
   2336a:	2300      	movs	r3, #0
   2336c:	4a18      	ldr	r2, [pc, #96]	; (233d0 <modlog_init+0x94>)
   2336e:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   23370:	4a18      	ldr	r2, [pc, #96]	; (233d4 <modlog_init+0x98>)
   23372:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   23374:	4818      	ldr	r0, [pc, #96]	; (233d8 <modlog_init+0x9c>)
   23376:	f000 f905 	bl	23584 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2337a:	b138      	cbz	r0, 2338c <modlog_init+0x50>
   2337c:	2000      	movs	r0, #0
   2337e:	9000      	str	r0, [sp, #0]
   23380:	4b12      	ldr	r3, [pc, #72]	; (233cc <modlog_init+0x90>)
   23382:	681c      	ldr	r4, [r3, #0]
   23384:	4603      	mov	r3, r0
   23386:	4602      	mov	r2, r0
   23388:	4601      	mov	r1, r0
   2338a:	47a0      	blx	r4

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   2338c:	f7f1 fa18 	bl	147c0 <log_console_get>
   23390:	4601      	mov	r1, r0
   23392:	2300      	movs	r3, #0
   23394:	461a      	mov	r2, r3
   23396:	20ff      	movs	r0, #255	; 0xff
   23398:	f7ff ff78 	bl	2328c <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   2339c:	b138      	cbz	r0, 233ae <modlog_init+0x72>
   2339e:	2000      	movs	r0, #0
   233a0:	9000      	str	r0, [sp, #0]
   233a2:	4b0a      	ldr	r3, [pc, #40]	; (233cc <modlog_init+0x90>)
   233a4:	681c      	ldr	r4, [r3, #0]
   233a6:	4603      	mov	r3, r0
   233a8:	4602      	mov	r2, r0
   233aa:	4601      	mov	r1, r0
   233ac:	47a0      	blx	r4
#endif
}
   233ae:	b002      	add	sp, #8
   233b0:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   233b2:	461a      	mov	r2, r3
   233b4:	4619      	mov	r1, r3
   233b6:	4618      	mov	r0, r3
   233b8:	f7e5 ff04 	bl	91c4 <__assert_func>
   233bc:	2000538c 	.word	0x2000538c
   233c0:	00029198 	.word	0x00029198
   233c4:	200059f0 	.word	0x200059f0
   233c8:	20005ab0 	.word	0x20005ab0
   233cc:	20000308 	.word	0x20000308
   233d0:	20005acc 	.word	0x20005acc
   233d4:	200059ec 	.word	0x200059ec
   233d8:	20005ad0 	.word	0x20005ad0

000233dc <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   233dc:	20ff      	movs	r0, #255	; 0xff
   233de:	4770      	bx	lr

000233e0 <crc8_calc>:
crc8_calc(uint8_t val, void *buf, int cnt)
{
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   233e0:	f04f 0c00 	mov.w	ip, #0
   233e4:	4594      	cmp	ip, r2
   233e6:	da16      	bge.n	23416 <crc8_calc+0x36>
{
   233e8:	b410      	push	{r4}
		val ^= p[i];
   233ea:	f811 300c 	ldrb.w	r3, [r1, ip]
   233ee:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   233f0:	0918      	lsrs	r0, r3, #4
   233f2:	4c09      	ldr	r4, [pc, #36]	; (23418 <crc8_calc+0x38>)
   233f4:	5620      	ldrsb	r0, [r4, r0]
   233f6:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   233fa:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   233fc:	f3c0 1003 	ubfx	r0, r0, #4, #4
   23400:	5620      	ldrsb	r0, [r4, r0]
   23402:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   23406:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   23408:	f10c 0c01 	add.w	ip, ip, #1
   2340c:	4594      	cmp	ip, r2
   2340e:	dbec      	blt.n	233ea <crc8_calc+0xa>
	}
	return val;
}
   23410:	f85d 4b04 	ldr.w	r4, [sp], #4
   23414:	4770      	bx	lr
   23416:	4770      	bx	lr
   23418:	000291ac 	.word	0x000291ac

0002341c <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   2341c:	f890 3020 	ldrb.w	r3, [r0, #32]
   23420:	3b01      	subs	r3, #1
   23422:	f880 3020 	strb.w	r3, [r0, #32]
}
   23426:	4770      	bx	lr

00023428 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   23428:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   2342a:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   2342e:	d104      	bne.n	2343a <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   23430:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   23434:	b11b      	cbz	r3, 2343e <rwlock_read_must_block+0x16>
   23436:	2001      	movs	r0, #1
   23438:	4770      	bx	lr
   2343a:	2001      	movs	r0, #1
   2343c:	4770      	bx	lr
   2343e:	2000      	movs	r0, #0
}
   23440:	4770      	bx	lr

00023442 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   23442:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   23444:	b923      	cbnz	r3, 23450 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   23446:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   2344a:	b11b      	cbz	r3, 23454 <rwlock_write_must_block+0x12>
   2344c:	2001      	movs	r0, #1
   2344e:	4770      	bx	lr
   23450:	2001      	movs	r0, #1
   23452:	4770      	bx	lr
   23454:	2000      	movs	r0, #0
}
   23456:	4770      	bx	lr

00023458 <rwlock_unblock>:
{
   23458:	b510      	push	{r4, lr}
   2345a:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   2345c:	7fc3      	ldrb	r3, [r0, #31]
   2345e:	b91b      	cbnz	r3, 23468 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   23460:	7f83      	ldrb	r3, [r0, #30]
   23462:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   23466:	e010      	b.n	2348a <rwlock_unblock+0x32>
        lock->handoffs = 1;
   23468:	2301      	movs	r3, #1
   2346a:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   2346e:	3014      	adds	r0, #20
   23470:	f7e6 fdfc 	bl	a06c <os_sem_release>
        lock->pending_writers--;
   23474:	7fe3      	ldrb	r3, [r4, #31]
   23476:	3b01      	subs	r3, #1
   23478:	77e3      	strb	r3, [r4, #31]
   2347a:	e009      	b.n	23490 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   2347c:	f104 000c 	add.w	r0, r4, #12
   23480:	f7e6 fdf4 	bl	a06c <os_sem_release>
            lock->pending_readers--;
   23484:	7fa3      	ldrb	r3, [r4, #30]
   23486:	3b01      	subs	r3, #1
   23488:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   2348a:	7fa3      	ldrb	r3, [r4, #30]
   2348c:	2b00      	cmp	r3, #0
   2348e:	d1f5      	bne.n	2347c <rwlock_unblock+0x24>
}
   23490:	bd10      	pop	{r4, pc}

00023492 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   23492:	b538      	push	{r3, r4, r5, lr}
   23494:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   23496:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2349a:	f7e7 fc39 	bl	ad10 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   2349e:	4620      	mov	r0, r4
   234a0:	f7ff ffc2 	bl	23428 <rwlock_read_must_block>
   234a4:	b140      	cbz	r0, 234b8 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   234a6:	7fa3      	ldrb	r3, [r4, #30]
   234a8:	3301      	adds	r3, #1
   234aa:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   234ac:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   234ae:	4620      	mov	r0, r4
   234b0:	f7e7 fbd2 	bl	ac58 <os_mutex_release>

    if (acquired) {
   234b4:	b12d      	cbz	r5, 234c2 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   234b6:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   234b8:	7f23      	ldrb	r3, [r4, #28]
   234ba:	3301      	adds	r3, #1
   234bc:	7723      	strb	r3, [r4, #28]
        acquired = true;
   234be:	2501      	movs	r5, #1
   234c0:	e7f5      	b.n	234ae <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   234c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   234c6:	f104 000c 	add.w	r0, r4, #12
   234ca:	f7e6 fe01 	bl	a0d0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   234ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   234d2:	4620      	mov	r0, r4
   234d4:	f7e7 fc1c 	bl	ad10 <os_mutex_pend>
    lock->num_readers++;
   234d8:	7f23      	ldrb	r3, [r4, #28]
   234da:	3301      	adds	r3, #1
   234dc:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   234de:	4620      	mov	r0, r4
   234e0:	f7ff ff9c 	bl	2341c <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   234e4:	4620      	mov	r0, r4
   234e6:	f7e7 fbb7 	bl	ac58 <os_mutex_release>
   234ea:	e7e4      	b.n	234b6 <rwlock_acquire_read+0x24>

000234ec <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   234ec:	b510      	push	{r4, lr}
   234ee:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   234f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   234f4:	f7e7 fc0c 	bl	ad10 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   234f8:	7f23      	ldrb	r3, [r4, #28]
   234fa:	3b01      	subs	r3, #1
   234fc:	b2db      	uxtb	r3, r3
   234fe:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   23500:	b11b      	cbz	r3, 2350a <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   23502:	4620      	mov	r0, r4
   23504:	f7e7 fba8 	bl	ac58 <os_mutex_release>
}
   23508:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   2350a:	4620      	mov	r0, r4
   2350c:	f7ff ffa4 	bl	23458 <rwlock_unblock>
   23510:	e7f7      	b.n	23502 <rwlock_release_read+0x16>

00023512 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   23512:	b538      	push	{r3, r4, r5, lr}
   23514:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   23516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2351a:	f7e7 fbf9 	bl	ad10 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   2351e:	4620      	mov	r0, r4
   23520:	f7ff ff8f 	bl	23442 <rwlock_write_must_block>
   23524:	b140      	cbz	r0, 23538 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   23526:	7fe3      	ldrb	r3, [r4, #31]
   23528:	3301      	adds	r3, #1
   2352a:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   2352c:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   2352e:	4620      	mov	r0, r4
   23530:	f7e7 fb92 	bl	ac58 <os_mutex_release>

    if (acquired) {
   23534:	b11d      	cbz	r5, 2353e <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   23536:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   23538:	2501      	movs	r5, #1
   2353a:	7765      	strb	r5, [r4, #29]
        acquired = true;
   2353c:	e7f7      	b.n	2352e <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   2353e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23542:	f104 0014 	add.w	r0, r4, #20
   23546:	f7e6 fdc3 	bl	a0d0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2354a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2354e:	4620      	mov	r0, r4
   23550:	f7e7 fbde 	bl	ad10 <os_mutex_pend>
    lock->active_writer = true;
   23554:	2301      	movs	r3, #1
   23556:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   23558:	4620      	mov	r0, r4
   2355a:	f7ff ff5f 	bl	2341c <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   2355e:	4620      	mov	r0, r4
   23560:	f7e7 fb7a 	bl	ac58 <os_mutex_release>
   23564:	e7e7      	b.n	23536 <rwlock_acquire_write+0x24>

00023566 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   23566:	b510      	push	{r4, lr}
   23568:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2356a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2356e:	f7e7 fbcf 	bl	ad10 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   23572:	2300      	movs	r3, #0
   23574:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   23576:	4620      	mov	r0, r4
   23578:	f7ff ff6e 	bl	23458 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   2357c:	4620      	mov	r0, r4
   2357e:	f7e7 fb6b 	bl	ac58 <os_mutex_release>
}
   23582:	bd10      	pop	{r4, pc}

00023584 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   23584:	b510      	push	{r4, lr}
   23586:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   23588:	2224      	movs	r2, #36	; 0x24
   2358a:	2100      	movs	r1, #0
   2358c:	f7ed f875 	bl	1067a <memset>

    rc = os_mutex_init(&lock->mtx);
   23590:	4620      	mov	r0, r4
   23592:	f7e7 fb57 	bl	ac44 <os_mutex_init>
    if (rc != 0) {
   23596:	b100      	cbz	r0, 2359a <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   23598:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   2359a:	2100      	movs	r1, #0
   2359c:	f104 000c 	add.w	r0, r4, #12
   235a0:	f7e6 fd5c 	bl	a05c <os_sem_init>
    if (rc != 0) {
   235a4:	2800      	cmp	r0, #0
   235a6:	d1f7      	bne.n	23598 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   235a8:	2100      	movs	r1, #0
   235aa:	f104 0014 	add.w	r0, r4, #20
   235ae:	f7e6 fd55 	bl	a05c <os_sem_init>
    if (rc != 0) {
   235b2:	e7f1      	b.n	23598 <rwlock_init+0x14>

000235b4 <bootutil_img_hash>:
 */
static int
bootutil_img_hash(struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                  uint8_t *hash_result, uint8_t *seed, int seed_len)
{
   235b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   235b8:	b09d      	sub	sp, #116	; 0x74
   235ba:	4605      	mov	r5, r0
   235bc:	4689      	mov	r9, r1
   235be:	4617      	mov	r7, r2
   235c0:	4698      	mov	r8, r3
   235c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
   235c4:	a801      	add	r0, sp, #4
   235c6:	f000 f9bb 	bl	23940 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
   235ca:	2100      	movs	r1, #0
   235cc:	a801      	add	r0, sp, #4
   235ce:	f000 f9bd 	bl	2394c <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
   235d2:	b114      	cbz	r4, 235da <bootutil_img_hash+0x26>
   235d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   235d6:	2b00      	cmp	r3, #0
   235d8:	dc04      	bgt.n	235e4 <bootutil_img_hash+0x30>

    /*
     * Hash is computed over image header and image itself. No TLV is
     * included ATM.
     */
    hdr_size = hdr->ih_hdr_size;
   235da:	892b      	ldrh	r3, [r5, #8]
    size = hdr->ih_img_size + hdr_size;
   235dc:	68ee      	ldr	r6, [r5, #12]
   235de:	441e      	add	r6, r3
    for (off = 0; off < size; off += blk_sz) {
   235e0:	2500      	movs	r5, #0
   235e2:	e013      	b.n	2360c <bootutil_img_hash+0x58>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   235e4:	461a      	mov	r2, r3
   235e6:	4621      	mov	r1, r4
   235e8:	a801      	add	r0, sp, #4
   235ea:	f000 fa99 	bl	23b20 <mbedtls_sha256_update_ret>
}
   235ee:	e7f4      	b.n	235da <bootutil_img_hash+0x26>
         */
        if ((off < hdr_size) && ((off + blk_sz) > hdr_size)) {
            blk_sz = hdr_size - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
   235f0:	4623      	mov	r3, r4
   235f2:	463a      	mov	r2, r7
   235f4:	4629      	mov	r1, r5
   235f6:	4648      	mov	r0, r9
   235f8:	f7f0 fe4e 	bl	14298 <flash_area_read>
        if (rc) {
   235fc:	4603      	mov	r3, r0
   235fe:	b988      	cbnz	r0, 23624 <bootutil_img_hash+0x70>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
   23600:	4622      	mov	r2, r4
   23602:	4639      	mov	r1, r7
   23604:	a801      	add	r0, sp, #4
   23606:	f000 fa8b 	bl	23b20 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
   2360a:	4425      	add	r5, r4
   2360c:	42b5      	cmp	r5, r6
   2360e:	d204      	bcs.n	2361a <bootutil_img_hash+0x66>
        blk_sz = size - off;
   23610:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
   23612:	4544      	cmp	r4, r8
   23614:	d9ec      	bls.n	235f0 <bootutil_img_hash+0x3c>
            blk_sz = tmp_buf_sz;
   23616:	4644      	mov	r4, r8
   23618:	e7ea      	b.n	235f0 <bootutil_img_hash+0x3c>

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
   2361a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2361c:	a801      	add	r0, sp, #4
   2361e:	f000 fac2 	bl	23ba6 <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
   23622:	2300      	movs	r3, #0
}
   23624:	4618      	mov	r0, r3
   23626:	b01d      	add	sp, #116	; 0x74
   23628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002362c <bootutil_img_validate>:
 */
int
bootutil_img_validate(struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz,
                      uint8_t *seed, int seed_len, uint8_t *out_hash)
{
   2362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23630:	b096      	sub	sp, #88	; 0x58
   23632:	4680      	mov	r8, r0
   23634:	460d      	mov	r5, r1
   23636:	9e1e      	ldr	r6, [sp, #120]	; 0x78
    struct image_tlv tlv;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(hdr, fap, tmp_buf, tmp_buf_sz, hash, seed, seed_len);
   23638:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2363a:	9402      	str	r4, [sp, #8]
   2363c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   2363e:	9401      	str	r4, [sp, #4]
   23640:	ac04      	add	r4, sp, #16
   23642:	9400      	str	r4, [sp, #0]
   23644:	f7ff ffb6 	bl	235b4 <bootutil_img_hash>
    if (rc) {
   23648:	4607      	mov	r7, r0
   2364a:	2800      	cmp	r0, #0
   2364c:	d14a      	bne.n	236e4 <bootutil_img_validate+0xb8>
        return rc;
    }

    if (out_hash) {
   2364e:	b14e      	cbz	r6, 23664 <bootutil_img_validate+0x38>
        memcpy(out_hash, hash, 32);
   23650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   23652:	6030      	str	r0, [r6, #0]
   23654:	6071      	str	r1, [r6, #4]
   23656:	60b2      	str	r2, [r6, #8]
   23658:	60f3      	str	r3, [r6, #12]
   2365a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2365c:	6130      	str	r0, [r6, #16]
   2365e:	6171      	str	r1, [r6, #20]
   23660:	61b2      	str	r2, [r6, #24]
   23662:	61f3      	str	r3, [r6, #28]
    }

    /* The TLVs come after the image. */
    /* After image there are TLVs. */
    off = hdr->ih_img_size + hdr->ih_hdr_size;
   23664:	f8d8 400c 	ldr.w	r4, [r8, #12]
   23668:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   2366c:	441c      	add	r4, r3

    rc = flash_area_read(fap, off, &info, sizeof(info));
   2366e:	2304      	movs	r3, #4
   23670:	aa15      	add	r2, sp, #84	; 0x54
   23672:	4621      	mov	r1, r4
   23674:	4628      	mov	r0, r5
   23676:	f7f0 fe0f 	bl	14298 <flash_area_read>
    if (rc) {
   2367a:	4607      	mov	r7, r0
   2367c:	bb90      	cbnz	r0, 236e4 <bootutil_img_validate+0xb8>
        return rc;
    }
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
   2367e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   23682:	f646 1307 	movw	r3, #26887	; 0x6907
   23686:	429a      	cmp	r2, r3
   23688:	d130      	bne.n	236ec <bootutil_img_validate+0xc0>
        return -1;
    }
    end = off + info.it_tlv_tot;
   2368a:	f8bd 6056 	ldrh.w	r6, [sp, #86]	; 0x56
   2368e:	4426      	add	r6, r4
    off += sizeof(info);
   23690:	3404      	adds	r4, #4
    int sha256_valid = 0;
   23692:	4680      	mov	r8, r0

    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    for (; off < end; off += sizeof(tlv) + tlv.it_len) {
   23694:	e003      	b.n	2369e <bootutil_img_validate+0x72>
   23696:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   2369a:	441c      	add	r4, r3
   2369c:	3404      	adds	r4, #4
   2369e:	42b4      	cmp	r4, r6
   236a0:	d21d      	bcs.n	236de <bootutil_img_validate+0xb2>
        rc = flash_area_read(fap, off, &tlv, sizeof tlv);
   236a2:	2304      	movs	r3, #4
   236a4:	aa14      	add	r2, sp, #80	; 0x50
   236a6:	4621      	mov	r1, r4
   236a8:	4628      	mov	r0, r5
   236aa:	f7f0 fdf5 	bl	14298 <flash_area_read>
        if (rc) {
   236ae:	bb00      	cbnz	r0, 236f2 <bootutil_img_validate+0xc6>
            return rc;
        }

        if (tlv.it_type == IMAGE_TLV_SHA256) {
   236b0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   236b4:	2b10      	cmp	r3, #16
   236b6:	d1ee      	bne.n	23696 <bootutil_img_validate+0x6a>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (tlv.it_len != sizeof(hash)) {
   236b8:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
   236bc:	2b20      	cmp	r3, #32
   236be:	d11a      	bne.n	236f6 <bootutil_img_validate+0xca>
                return -1;
            }
            rc = flash_area_read(fap, off + sizeof(tlv), buf, sizeof hash);
   236c0:	aa0c      	add	r2, sp, #48	; 0x30
   236c2:	1d21      	adds	r1, r4, #4
   236c4:	4628      	mov	r0, r5
   236c6:	f7f0 fde7 	bl	14298 <flash_area_read>
            if (rc) {
   236ca:	b9b8      	cbnz	r0, 236fc <bootutil_img_validate+0xd0>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
   236cc:	2220      	movs	r2, #32
   236ce:	a90c      	add	r1, sp, #48	; 0x30
   236d0:	a804      	add	r0, sp, #16
   236d2:	f7ec ffa1 	bl	10618 <memcmp>
   236d6:	b998      	cbnz	r0, 23700 <bootutil_img_validate+0xd4>
                return -1;
            }

            sha256_valid = 1;
   236d8:	f04f 0801 	mov.w	r8, #1
   236dc:	e7db      	b.n	23696 <bootutil_img_validate+0x6a>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
   236de:	f1b8 0f00 	cmp.w	r8, #0
   236e2:	d010      	beq.n	23706 <bootutil_img_validate+0xda>
        return -1;
    }
#endif

    return 0;
}
   236e4:	4638      	mov	r0, r7
   236e6:	b016      	add	sp, #88	; 0x58
   236e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   236ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   236f0:	e7f8      	b.n	236e4 <bootutil_img_validate+0xb8>
            return rc;
   236f2:	4607      	mov	r7, r0
   236f4:	e7f6      	b.n	236e4 <bootutil_img_validate+0xb8>
                return -1;
   236f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   236fa:	e7f3      	b.n	236e4 <bootutil_img_validate+0xb8>
                return rc;
   236fc:	4607      	mov	r7, r0
   236fe:	e7f1      	b.n	236e4 <bootutil_img_validate+0xb8>
                return -1;
   23700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   23704:	e7ee      	b.n	236e4 <bootutil_img_validate+0xb8>
        return -1;
   23706:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2370a:	e7eb      	b.n	236e4 <bootutil_img_validate+0xb8>

0002370c <boot_write_sz>:
    return 0;
}

static uint8_t
boot_write_sz(void)
{
   2370c:	b538      	push	{r3, r4, r5, lr}

    /* Figure out what size to write update status update as.  The size depends
     * on what the minimum write size is for scratch area, active image slot.
     * We need to use the bigger of those 2 values.
     */
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   2370e:	4d06      	ldr	r5, [pc, #24]	; (23728 <boot_write_sz+0x1c>)
   23710:	6a28      	ldr	r0, [r5, #32]
   23712:	f7f0 fdfd 	bl	14310 <flash_area_align>
   23716:	4604      	mov	r4, r0
    align = flash_area_align(boot_data.scratch.area);
   23718:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2371a:	f7f0 fdf9 	bl	14310 <flash_area_align>
    if (align > elem_sz) {
   2371e:	4284      	cmp	r4, r0
   23720:	d300      	bcc.n	23724 <boot_write_sz+0x18>
    elem_sz = flash_area_align(boot_data.imgs[BOOT_PRIMARY_SLOT].area);
   23722:	4620      	mov	r0, r4
        elem_sz = align;
    }

    return elem_sz;
}
   23724:	bd38      	pop	{r3, r4, r5, pc}
   23726:	bf00      	nop
   23728:	20005af4 	.word	0x20005af4

0002372c <boot_read_image_header>:
{
   2372c:	b510      	push	{r4, lr}
   2372e:	b082      	sub	sp, #8
   23730:	460c      	mov	r4, r1
    area_id = flash_area_id_from_image_slot(slot);
   23732:	f7f0 fe11 	bl	14358 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fap);
   23736:	a901      	add	r1, sp, #4
   23738:	b2c0      	uxtb	r0, r0
   2373a:	f7f0 fd4d 	bl	141d8 <flash_area_open>
    if (rc != 0) {
   2373e:	b110      	cbz	r0, 23746 <boot_read_image_header+0x1a>
        rc = BOOT_EFLASH;
   23740:	2001      	movs	r0, #1
}
   23742:	b002      	add	sp, #8
   23744:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
   23746:	2320      	movs	r3, #32
   23748:	4622      	mov	r2, r4
   2374a:	2100      	movs	r1, #0
   2374c:	9801      	ldr	r0, [sp, #4]
   2374e:	f7f0 fda3 	bl	14298 <flash_area_read>
    if (rc != 0) {
   23752:	2800      	cmp	r0, #0
   23754:	d0f5      	beq.n	23742 <boot_read_image_header+0x16>
        rc = BOOT_EFLASH;
   23756:	2001      	movs	r0, #1
    return rc;
   23758:	e7f3      	b.n	23742 <boot_read_image_header+0x16>
	...

0002375c <boot_read_image_headers>:
{
   2375c:	b538      	push	{r3, r4, r5, lr}
   2375e:	4605      	mov	r5, r0
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   23760:	2400      	movs	r4, #0
   23762:	2c01      	cmp	r4, #1
   23764:	dc0f      	bgt.n	23786 <boot_read_image_headers+0x2a>
        rc = boot_read_image_header(i, boot_img_hdr(&boot_data, i));
   23766:	4b09      	ldr	r3, [pc, #36]	; (2378c <boot_read_image_headers+0x30>)
   23768:	212c      	movs	r1, #44	; 0x2c
   2376a:	fb01 3104 	mla	r1, r1, r4, r3
   2376e:	4620      	mov	r0, r4
   23770:	f7ff ffdc 	bl	2372c <boot_read_image_header>
        if (rc != 0) {
   23774:	4603      	mov	r3, r0
   23776:	b908      	cbnz	r0, 2377c <boot_read_image_headers+0x20>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
   23778:	3401      	adds	r4, #1
   2377a:	e7f2      	b.n	23762 <boot_read_image_headers+0x6>
            if (i > 0 && !require_all) {
   2377c:	2c00      	cmp	r4, #0
   2377e:	dd03      	ble.n	23788 <boot_read_image_headers+0x2c>
   23780:	b915      	cbnz	r5, 23788 <boot_read_image_headers+0x2c>
                return 0;
   23782:	2300      	movs	r3, #0
   23784:	e000      	b.n	23788 <boot_read_image_headers+0x2c>
    return 0;
   23786:	2300      	movs	r3, #0
}
   23788:	4618      	mov	r0, r3
   2378a:	bd38      	pop	{r3, r4, r5, pc}
   2378c:	20005af4 	.word	0x20005af4

00023790 <split_image_check>:
static int
split_image_check(struct image_header *app_hdr,
                  const struct flash_area *app_fap,
                  struct image_header *loader_hdr,
                  const struct flash_area *loader_fap)
{
   23790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23794:	b08c      	sub	sp, #48	; 0x30
   23796:	4606      	mov	r6, r0
   23798:	460f      	mov	r7, r1
   2379a:	4690      	mov	r8, r2
   2379c:	461d      	mov	r5, r3
    static void *tmpbuf;
    uint8_t loader_hash[32];

    if (!tmpbuf) {
   2379e:	4c18      	ldr	r4, [pc, #96]	; (23800 <split_image_check+0x70>)
   237a0:	6824      	ldr	r4, [r4, #0]
   237a2:	b1f4      	cbz	r4, 237e2 <split_image_check+0x52>
        if (!tmpbuf) {
            return BOOT_ENOMEM;
        }
    }

    if (bootutil_img_validate(loader_hdr, loader_fap, tmpbuf, BOOT_TMPBUF_SZ,
   237a4:	ab04      	add	r3, sp, #16
   237a6:	9302      	str	r3, [sp, #8]
   237a8:	2400      	movs	r4, #0
   237aa:	9401      	str	r4, [sp, #4]
   237ac:	9400      	str	r4, [sp, #0]
   237ae:	f44f 7380 	mov.w	r3, #256	; 0x100
   237b2:	4a13      	ldr	r2, [pc, #76]	; (23800 <split_image_check+0x70>)
   237b4:	6812      	ldr	r2, [r2, #0]
   237b6:	4629      	mov	r1, r5
   237b8:	4640      	mov	r0, r8
   237ba:	f7ff ff37 	bl	2362c <bootutil_img_validate>
   237be:	b9d0      	cbnz	r0, 237f6 <split_image_check+0x66>
                              NULL, 0, loader_hash)) {
        return BOOT_EBADIMAGE;
    }

    if (bootutil_img_validate(app_hdr, app_fap, tmpbuf, BOOT_TMPBUF_SZ,
   237c0:	9402      	str	r4, [sp, #8]
   237c2:	2320      	movs	r3, #32
   237c4:	9301      	str	r3, [sp, #4]
   237c6:	ab04      	add	r3, sp, #16
   237c8:	9300      	str	r3, [sp, #0]
   237ca:	f44f 7380 	mov.w	r3, #256	; 0x100
   237ce:	4a0c      	ldr	r2, [pc, #48]	; (23800 <split_image_check+0x70>)
   237d0:	6812      	ldr	r2, [r2, #0]
   237d2:	4639      	mov	r1, r7
   237d4:	4630      	mov	r0, r6
   237d6:	f7ff ff29 	bl	2362c <bootutil_img_validate>
   237da:	b970      	cbnz	r0, 237fa <split_image_check+0x6a>
                              loader_hash, 32, NULL)) {
        return BOOT_EBADIMAGE;
    }

    return 0;
}
   237dc:	b00c      	add	sp, #48	; 0x30
   237de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpbuf = malloc(BOOT_TMPBUF_SZ);
   237e2:	f44f 7080 	mov.w	r0, #256	; 0x100
   237e6:	f000 fd95 	bl	24314 <os_malloc>
   237ea:	4b05      	ldr	r3, [pc, #20]	; (23800 <split_image_check+0x70>)
   237ec:	6018      	str	r0, [r3, #0]
        if (!tmpbuf) {
   237ee:	2800      	cmp	r0, #0
   237f0:	d1d8      	bne.n	237a4 <split_image_check+0x14>
            return BOOT_ENOMEM;
   237f2:	2006      	movs	r0, #6
   237f4:	e7f2      	b.n	237dc <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   237f6:	2003      	movs	r0, #3
   237f8:	e7f0      	b.n	237dc <split_image_check+0x4c>
        return BOOT_EBADIMAGE;
   237fa:	2003      	movs	r0, #3
   237fc:	e7ee      	b.n	237dc <split_image_check+0x4c>
   237fe:	bf00      	nop
   23800:	20005b5c 	.word	0x20005b5c

00023804 <boot_read_sectors>:
{
   23804:	b510      	push	{r4, lr}
   23806:	b082      	sub	sp, #8
}

static inline int
boot_initialize_area(struct boot_loader_state *state, int flash_area)
{
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   23808:	2380      	movs	r3, #128	; 0x80
   2380a:	9301      	str	r3, [sp, #4]
    int rc;

    switch (flash_area) {
    case FLASH_AREA_IMAGE_PRIMARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
                                   state->imgs[BOOT_PRIMARY_SLOT].sectors);
   2380c:	4c15      	ldr	r4, [pc, #84]	; (23864 <boot_read_sectors+0x60>)
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   2380e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23810:	a901      	add	r1, sp, #4
   23812:	2001      	movs	r0, #1
   23814:	f7f0 fd02 	bl	1421c <flash_area_to_sectors>
        state->imgs[BOOT_PRIMARY_SLOT].num_sectors = (size_t)num_sectors;
   23818:	9b01      	ldr	r3, [sp, #4]
   2381a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
   2381c:	b118      	cbz	r0, 23826 <boot_read_sectors+0x22>
        return BOOT_EFLASH;
   2381e:	2401      	movs	r4, #1
}
   23820:	4620      	mov	r0, r4
   23822:	b002      	add	sp, #8
   23824:	bd10      	pop	{r4, pc}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   23826:	2380      	movs	r3, #128	; 0x80
   23828:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SECONDARY:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   2382a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2382c:	a901      	add	r1, sp, #4
   2382e:	2002      	movs	r0, #2
   23830:	f7f0 fcf4 	bl	1421c <flash_area_to_sectors>
                                   state->imgs[BOOT_SECONDARY_SLOT].sectors);
        state->imgs[BOOT_SECONDARY_SLOT].num_sectors = (size_t)num_sectors;
   23834:	9b01      	ldr	r3, [sp, #4]
   23836:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
   23838:	b108      	cbz	r0, 2383e <boot_read_sectors+0x3a>
        return BOOT_EFLASH;
   2383a:	2401      	movs	r4, #1
   2383c:	e7f0      	b.n	23820 <boot_read_sectors+0x1c>
    int num_sectors = BOOT_MAX_IMG_SECTORS;
   2383e:	2380      	movs	r3, #128	; 0x80
   23840:	9301      	str	r3, [sp, #4]
        break;
    case FLASH_AREA_IMAGE_SCRATCH:
        rc = flash_area_to_sectors(flash_area, &num_sectors,
   23842:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   23844:	a901      	add	r1, sp, #4
   23846:	2003      	movs	r0, #3
   23848:	f7f0 fce8 	bl	1421c <flash_area_to_sectors>
                                   state->scratch.sectors);
        state->scratch.num_sectors = (size_t)num_sectors;
   2384c:	9b01      	ldr	r3, [sp, #4]
   2384e:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
   23850:	4604      	mov	r4, r0
   23852:	b108      	cbz	r0, 23858 <boot_read_sectors+0x54>
        return BOOT_EFLASH;
   23854:	2401      	movs	r4, #1
   23856:	e7e3      	b.n	23820 <boot_read_sectors+0x1c>
    BOOT_WRITE_SZ(&boot_data) = boot_write_sz();
   23858:	f7ff ff58 	bl	2370c <boot_write_sz>
   2385c:	4b01      	ldr	r3, [pc, #4]	; (23864 <boot_read_sectors+0x60>)
   2385e:	f883 0064 	strb.w	r0, [r3, #100]	; 0x64
    return 0;
   23862:	e7dd      	b.n	23820 <boot_read_sectors+0x1c>
   23864:	20005af4 	.word	0x20005af4

00023868 <split_go>:
    return rc;
}

int
split_go(int loader_slot, int split_slot, void **entry)
{
   23868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2386c:	4605      	mov	r5, r0
   2386e:	460c      	mov	r4, r1
   23870:	4690      	mov	r8, r2
    uintptr_t entry_val;
    int loader_flash_id;
    int split_flash_id;
    int rc;

    sectors = malloc(BOOT_MAX_IMG_SECTORS * 2 * sizeof *sectors);
   23872:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   23876:	f000 fd4d 	bl	24314 <os_malloc>
    if (sectors == NULL) {
   2387a:	2800      	cmp	r0, #0
   2387c:	d05b      	beq.n	23936 <split_go+0xce>
   2387e:	4607      	mov	r7, r0
        return SPLIT_GO_ERR;
    }
    boot_data.imgs[loader_slot].sectors = sectors + 0;
   23880:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 2393c <split_go+0xd4>
   23884:	232c      	movs	r3, #44	; 0x2c
   23886:	fb03 f605 	mul.w	r6, r3, r5
   2388a:	eb09 0206 	add.w	r2, r9, r6
   2388e:	6250      	str	r0, [r2, #36]	; 0x24
    boot_data.imgs[split_slot].sectors = sectors + BOOT_MAX_IMG_SECTORS;
   23890:	f500 62c0 	add.w	r2, r0, #1536	; 0x600
   23894:	fb03 9304 	mla	r3, r3, r4, r9
   23898:	625a      	str	r2, [r3, #36]	; 0x24

    loader_flash_id = flash_area_id_from_image_slot(loader_slot);
   2389a:	4628      	mov	r0, r5
   2389c:	f7f0 fd5c 	bl	14358 <flash_area_id_from_image_slot>
    rc = flash_area_open(loader_flash_id,
   238a0:	f106 0120 	add.w	r1, r6, #32
   238a4:	4449      	add	r1, r9
   238a6:	b2c0      	uxtb	r0, r0
   238a8:	f7f0 fc96 	bl	141d8 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, loader_slot));
    assert(rc == 0);
   238ac:	b9b8      	cbnz	r0, 238de <split_go+0x76>
    split_flash_id = flash_area_id_from_image_slot(split_slot);
   238ae:	4620      	mov	r0, r4
   238b0:	f7f0 fd52 	bl	14358 <flash_area_id_from_image_slot>
    rc = flash_area_open(split_flash_id,
   238b4:	232c      	movs	r3, #44	; 0x2c
   238b6:	fb04 f303 	mul.w	r3, r4, r3
   238ba:	3320      	adds	r3, #32
   238bc:	491f      	ldr	r1, [pc, #124]	; (2393c <split_go+0xd4>)
   238be:	4419      	add	r1, r3
   238c0:	b2c0      	uxtb	r0, r0
   238c2:	f7f0 fc89 	bl	141d8 <flash_area_open>
                         &BOOT_IMG_AREA(&boot_data, split_slot));
    assert(rc == 0);
   238c6:	b980      	cbnz	r0, 238ea <split_go+0x82>

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors();
   238c8:	f7ff ff9c 	bl	23804 <boot_read_sectors>
    if (rc != 0) {
   238cc:	b198      	cbz	r0, 238f6 <split_go+0x8e>
        rc = SPLIT_GO_ERR;
   238ce:	f06f 0601 	mvn.w	r6, #1
    rc = SPLIT_GO_OK;

done:
    flash_area_close(BOOT_IMG_AREA(&boot_data, split_slot));
    flash_area_close(BOOT_IMG_AREA(&boot_data, loader_slot));
    free(sectors);
   238d2:	4638      	mov	r0, r7
   238d4:	f000 fd2a 	bl	2432c <os_free>
    return rc;
}
   238d8:	4630      	mov	r0, r6
   238da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert(rc == 0);
   238de:	2300      	movs	r3, #0
   238e0:	461a      	mov	r2, r3
   238e2:	4619      	mov	r1, r3
   238e4:	4618      	mov	r0, r3
   238e6:	f7e5 fc6d 	bl	91c4 <__assert_func>
    assert(rc == 0);
   238ea:	2300      	movs	r3, #0
   238ec:	461a      	mov	r2, r3
   238ee:	4619      	mov	r1, r3
   238f0:	4618      	mov	r0, r3
   238f2:	f7e5 fc67 	bl	91c4 <__assert_func>
    rc = boot_read_image_headers(true);
   238f6:	2001      	movs	r0, #1
   238f8:	f7ff ff30 	bl	2375c <boot_read_image_headers>
    if (rc != 0) {
   238fc:	4606      	mov	r6, r0
   238fe:	2800      	cmp	r0, #0
   23900:	d1e7      	bne.n	238d2 <split_go+0x6a>
    return &state->imgs[slot].hdr;
   23902:	4a0e      	ldr	r2, [pc, #56]	; (2393c <split_go+0xd4>)
   23904:	232c      	movs	r3, #44	; 0x2c
   23906:	fb03 2004 	mla	r0, r3, r4, r2
   2390a:	fb03 2205 	mla	r2, r3, r5, r2
    rc = split_image_check(boot_img_hdr(&boot_data, split_slot),
   2390e:	6a13      	ldr	r3, [r2, #32]
   23910:	6a01      	ldr	r1, [r0, #32]
   23912:	f7ff ff3d 	bl	23790 <split_image_check>
    if (rc != 0) {
   23916:	4606      	mov	r6, r0
   23918:	b950      	cbnz	r0, 23930 <split_go+0xc8>
    return state->imgs[slot].area->fa_off;
   2391a:	4908      	ldr	r1, [pc, #32]	; (2393c <split_go+0xd4>)
   2391c:	232c      	movs	r3, #44	; 0x2c
   2391e:	fb03 1404 	mla	r4, r3, r4, r1
   23922:	6a23      	ldr	r3, [r4, #32]
   23924:	685a      	ldr	r2, [r3, #4]
                boot_img_hdr(&boot_data, split_slot)->ih_hdr_size;
   23926:	8923      	ldrh	r3, [r4, #8]
    entry_val = boot_img_slot_off(&boot_data, split_slot) +
   23928:	4413      	add	r3, r2
    *entry = (void *) entry_val;
   2392a:	f8c8 3000 	str.w	r3, [r8]
    rc = SPLIT_GO_OK;
   2392e:	e7d0      	b.n	238d2 <split_go+0x6a>
        rc = SPLIT_GO_NON_MATCHING;
   23930:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23934:	e7cd      	b.n	238d2 <split_go+0x6a>
        return SPLIT_GO_ERR;
   23936:	f06f 0601 	mvn.w	r6, #1
   2393a:	e7cd      	b.n	238d8 <split_go+0x70>
   2393c:	20005af4 	.word	0x20005af4

00023940 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
   23940:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   23942:	226c      	movs	r2, #108	; 0x6c
   23944:	2100      	movs	r1, #0
   23946:	f7ec fe98 	bl	1067a <memset>
}
   2394a:	bd08      	pop	{r3, pc}

0002394c <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
   2394c:	2300      	movs	r3, #0
   2394e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
   23950:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
   23952:	460b      	mov	r3, r1
   23954:	b9b9      	cbnz	r1, 23986 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
   23956:	4a19      	ldr	r2, [pc, #100]	; (239bc <mbedtls_sha256_starts_ret+0x70>)
   23958:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
   2395a:	4a19      	ldr	r2, [pc, #100]	; (239c0 <mbedtls_sha256_starts_ret+0x74>)
   2395c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
   2395e:	4a19      	ldr	r2, [pc, #100]	; (239c4 <mbedtls_sha256_starts_ret+0x78>)
   23960:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
   23962:	4a19      	ldr	r2, [pc, #100]	; (239c8 <mbedtls_sha256_starts_ret+0x7c>)
   23964:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
   23966:	4a19      	ldr	r2, [pc, #100]	; (239cc <mbedtls_sha256_starts_ret+0x80>)
   23968:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
   2396a:	4a19      	ldr	r2, [pc, #100]	; (239d0 <mbedtls_sha256_starts_ret+0x84>)
   2396c:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
   2396e:	4a19      	ldr	r2, [pc, #100]	; (239d4 <mbedtls_sha256_starts_ret+0x88>)
   23970:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
   23972:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
   23976:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
   2397a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
   2397e:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
   23980:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
   23982:	2000      	movs	r0, #0
   23984:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
   23986:	4a14      	ldr	r2, [pc, #80]	; (239d8 <mbedtls_sha256_starts_ret+0x8c>)
   23988:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
   2398a:	4a14      	ldr	r2, [pc, #80]	; (239dc <mbedtls_sha256_starts_ret+0x90>)
   2398c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
   2398e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
   23992:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
   23996:	f502 6201 	add.w	r2, r2, #2064	; 0x810
   2399a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
   2399c:	4a10      	ldr	r2, [pc, #64]	; (239e0 <mbedtls_sha256_starts_ret+0x94>)
   2399e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
   239a0:	4a10      	ldr	r2, [pc, #64]	; (239e4 <mbedtls_sha256_starts_ret+0x98>)
   239a2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
   239a4:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
   239a8:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   239ac:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
   239b0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
   239b2:	4a0d      	ldr	r2, [pc, #52]	; (239e8 <mbedtls_sha256_starts_ret+0x9c>)
   239b4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
   239b6:	4a0d      	ldr	r2, [pc, #52]	; (239ec <mbedtls_sha256_starts_ret+0xa0>)
   239b8:	6242      	str	r2, [r0, #36]	; 0x24
   239ba:	e7e1      	b.n	23980 <mbedtls_sha256_starts_ret+0x34>
   239bc:	6a09e667 	.word	0x6a09e667
   239c0:	bb67ae85 	.word	0xbb67ae85
   239c4:	3c6ef372 	.word	0x3c6ef372
   239c8:	a54ff53a 	.word	0xa54ff53a
   239cc:	510e527f 	.word	0x510e527f
   239d0:	9b05688c 	.word	0x9b05688c
   239d4:	1f83d9ab 	.word	0x1f83d9ab
   239d8:	c1059ed8 	.word	0xc1059ed8
   239dc:	367cd507 	.word	0x367cd507
   239e0:	f70e5939 	.word	0xf70e5939
   239e4:	ffc00b31 	.word	0xffc00b31
   239e8:	64f98fa7 	.word	0x64f98fa7
   239ec:	befa4fa4 	.word	0xbefa4fa4

000239f0 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
   239f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   239f4:	b0c8      	sub	sp, #288	; 0x120
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
   239f6:	2300      	movs	r3, #0
   239f8:	e005      	b.n	23a06 <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
   239fa:	1c9a      	adds	r2, r3, #2
   239fc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   23a00:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
   23a04:	3301      	adds	r3, #1
   23a06:	2b07      	cmp	r3, #7
   23a08:	d9f7      	bls.n	239fa <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
   23a0a:	2200      	movs	r2, #0
   23a0c:	e04f      	b.n	23aae <mbedtls_internal_sha256_process+0xbe>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
   23a0e:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
   23a12:	eb01 0482 	add.w	r4, r1, r2, lsl #2
   23a16:	7863      	ldrb	r3, [r4, #1]
   23a18:	041b      	lsls	r3, r3, #16
   23a1a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   23a1e:	78a5      	ldrb	r5, [r4, #2]
   23a20:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23a24:	78e4      	ldrb	r4, [r4, #3]
   23a26:	4323      	orrs	r3, r4
   23a28:	ac08      	add	r4, sp, #32
   23a2a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
   23a2e:	9b07      	ldr	r3, [sp, #28]
   23a30:	9c04      	ldr	r4, [sp, #16]
   23a32:	ea4f 2cf4 	mov.w	ip, r4, ror #11
   23a36:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
   23a3a:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
   23a3e:	4463      	add	r3, ip
   23a40:	9d06      	ldr	r5, [sp, #24]
   23a42:	9e05      	ldr	r6, [sp, #20]
   23a44:	ea85 0c06 	eor.w	ip, r5, r6
   23a48:	ea04 0c0c 	and.w	ip, r4, ip
   23a4c:	ea85 0c0c 	eor.w	ip, r5, ip
   23a50:	4463      	add	r3, ip
   23a52:	4f32      	ldr	r7, [pc, #200]	; (23b1c <mbedtls_internal_sha256_process+0x12c>)
   23a54:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   23a58:	443b      	add	r3, r7
   23a5a:	af08      	add	r7, sp, #32
   23a5c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   23a60:	443b      	add	r3, r7
   23a62:	f8dd e000 	ldr.w	lr, [sp]
   23a66:	ea4f 3c7e 	mov.w	ip, lr, ror #13
   23a6a:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
   23a6e:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
   23a72:	f8dd 8004 	ldr.w	r8, [sp, #4]
   23a76:	ea0e 0708 	and.w	r7, lr, r8
   23a7a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   23a7e:	ea4e 0a08 	orr.w	sl, lr, r8
   23a82:	ea09 0a0a 	and.w	sl, r9, sl
   23a86:	ea47 070a 	orr.w	r7, r7, sl
   23a8a:	44bc      	add	ip, r7
   23a8c:	9f03      	ldr	r7, [sp, #12]
   23a8e:	441f      	add	r7, r3
   23a90:	9703      	str	r7, [sp, #12]
   23a92:	4463      	add	r3, ip
   23a94:	9307      	str	r3, [sp, #28]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
   23a96:	9507      	str	r5, [sp, #28]
   23a98:	9606      	str	r6, [sp, #24]
   23a9a:	9405      	str	r4, [sp, #20]
   23a9c:	9704      	str	r7, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
   23a9e:	f8cd 900c 	str.w	r9, [sp, #12]
   23aa2:	f8cd 8008 	str.w	r8, [sp, #8]
   23aa6:	f8cd e004 	str.w	lr, [sp, #4]
   23aaa:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
   23aac:	3201      	adds	r2, #1
   23aae:	2a3f      	cmp	r2, #63	; 0x3f
   23ab0:	d822      	bhi.n	23af8 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
   23ab2:	2a0f      	cmp	r2, #15
   23ab4:	d9ab      	bls.n	23a0e <mbedtls_internal_sha256_process+0x1e>
            R( i );
   23ab6:	1e93      	subs	r3, r2, #2
   23ab8:	ac08      	add	r4, sp, #32
   23aba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   23abe:	ea4f 43f5 	mov.w	r3, r5, ror #19
   23ac2:	ea83 4375 	eor.w	r3, r3, r5, ror #17
   23ac6:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
   23aca:	1fd5      	subs	r5, r2, #7
   23acc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   23ad0:	442b      	add	r3, r5
   23ad2:	f1a2 050f 	sub.w	r5, r2, #15
   23ad6:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
   23ada:	ea4f 45b6 	mov.w	r5, r6, ror #18
   23ade:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
   23ae2:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
   23ae6:	442b      	add	r3, r5
   23ae8:	f1a2 0510 	sub.w	r5, r2, #16
   23aec:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   23af0:	442b      	add	r3, r5
   23af2:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
   23af6:	e79a      	b.n	23a2e <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
   23af8:	2300      	movs	r3, #0
   23afa:	e008      	b.n	23b0e <mbedtls_internal_sha256_process+0x11e>
        ctx->state[i] += A[i];
   23afc:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
   23b00:	1c99      	adds	r1, r3, #2
   23b02:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   23b06:	4422      	add	r2, r4
   23b08:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
   23b0c:	3301      	adds	r3, #1
   23b0e:	2b07      	cmp	r3, #7
   23b10:	d9f4      	bls.n	23afc <mbedtls_internal_sha256_process+0x10c>

    return( 0 );
}
   23b12:	2000      	movs	r0, #0
   23b14:	b048      	add	sp, #288	; 0x120
   23b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23b1a:	bf00      	nop
   23b1c:	000291bc 	.word	0x000291bc

00023b20 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
   23b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
   23b24:	b3da      	cbz	r2, 23b9e <mbedtls_sha256_update_ret+0x7e>
   23b26:	4606      	mov	r6, r0
   23b28:	460d      	mov	r5, r1
   23b2a:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
   23b2c:	6803      	ldr	r3, [r0, #0]
   23b2e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
   23b32:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
   23b36:	4413      	add	r3, r2
   23b38:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
   23b3a:	4293      	cmp	r3, r2
   23b3c:	d202      	bcs.n	23b44 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
   23b3e:	6843      	ldr	r3, [r0, #4]
   23b40:	3301      	adds	r3, #1
   23b42:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
   23b44:	b10f      	cbz	r7, 23b4a <mbedtls_sha256_update_ret+0x2a>
   23b46:	4544      	cmp	r4, r8
   23b48:	d20a      	bcs.n	23b60 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
   23b4a:	2c3f      	cmp	r4, #63	; 0x3f
   23b4c:	d91b      	bls.n	23b86 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
   23b4e:	4629      	mov	r1, r5
   23b50:	4630      	mov	r0, r6
   23b52:	f7ff ff4d 	bl	239f0 <mbedtls_internal_sha256_process>
   23b56:	4603      	mov	r3, r0
   23b58:	bb10      	cbnz	r0, 23ba0 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
   23b5a:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
   23b5c:	3c40      	subs	r4, #64	; 0x40
   23b5e:	e7f4      	b.n	23b4a <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
   23b60:	f106 0928 	add.w	r9, r6, #40	; 0x28
   23b64:	4642      	mov	r2, r8
   23b66:	4629      	mov	r1, r5
   23b68:	eb09 0007 	add.w	r0, r9, r7
   23b6c:	f7ec fd78 	bl	10660 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   23b70:	4649      	mov	r1, r9
   23b72:	4630      	mov	r0, r6
   23b74:	f7ff ff3c 	bl	239f0 <mbedtls_internal_sha256_process>
   23b78:	4603      	mov	r3, r0
   23b7a:	b988      	cbnz	r0, 23ba0 <mbedtls_sha256_update_ret+0x80>
        input += fill;
   23b7c:	4445      	add	r5, r8
        ilen  -= fill;
   23b7e:	3f40      	subs	r7, #64	; 0x40
   23b80:	443c      	add	r4, r7
        left = 0;
   23b82:	2700      	movs	r7, #0
   23b84:	e7e1      	b.n	23b4a <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
   23b86:	b90c      	cbnz	r4, 23b8c <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
   23b88:	2300      	movs	r3, #0
   23b8a:	e009      	b.n	23ba0 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
   23b8c:	f106 0028 	add.w	r0, r6, #40	; 0x28
   23b90:	4622      	mov	r2, r4
   23b92:	4629      	mov	r1, r5
   23b94:	4438      	add	r0, r7
   23b96:	f7ec fd63 	bl	10660 <memcpy>
    return( 0 );
   23b9a:	2300      	movs	r3, #0
   23b9c:	e000      	b.n	23ba0 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
   23b9e:	2300      	movs	r3, #0
}
   23ba0:	4618      	mov	r0, r3
   23ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023ba6 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
   23ba6:	b570      	push	{r4, r5, r6, lr}
   23ba8:	4604      	mov	r4, r0
   23baa:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
   23bac:	6803      	ldr	r3, [r0, #0]
   23bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
   23bb2:	1c58      	adds	r0, r3, #1
   23bb4:	4423      	add	r3, r4
   23bb6:	2280      	movs	r2, #128	; 0x80
   23bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
   23bbc:	2838      	cmp	r0, #56	; 0x38
   23bbe:	d87c      	bhi.n	23cba <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
   23bc0:	f104 0328 	add.w	r3, r4, #40	; 0x28
   23bc4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   23bc8:	2100      	movs	r1, #0
   23bca:	4418      	add	r0, r3
   23bcc:	f7ec fd55 	bl	1067a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
   23bd0:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
   23bd2:	6863      	ldr	r3, [r4, #4]
   23bd4:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
   23bd6:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
   23bda:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
   23bdc:	0e1e      	lsrs	r6, r3, #24
   23bde:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
   23be2:	f3c3 4607 	ubfx	r6, r3, #16, #8
   23be6:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
   23bea:	f3c3 2307 	ubfx	r3, r3, #8, #8
   23bee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   23bf2:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
   23bf6:	f3c2 5347 	ubfx	r3, r2, #21, #8
   23bfa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   23bfe:	f3c2 3347 	ubfx	r3, r2, #13, #8
   23c02:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   23c06:	f3c2 1247 	ubfx	r2, r2, #5, #8
   23c0a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
   23c0e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   23c12:	f104 0128 	add.w	r1, r4, #40	; 0x28
   23c16:	4620      	mov	r0, r4
   23c18:	f7ff feea 	bl	239f0 <mbedtls_internal_sha256_process>
   23c1c:	4603      	mov	r3, r0
   23c1e:	2800      	cmp	r0, #0
   23c20:	d159      	bne.n	23cd6 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
   23c22:	7ae2      	ldrb	r2, [r4, #11]
   23c24:	702a      	strb	r2, [r5, #0]
   23c26:	7aa2      	ldrb	r2, [r4, #10]
   23c28:	706a      	strb	r2, [r5, #1]
   23c2a:	7a62      	ldrb	r2, [r4, #9]
   23c2c:	70aa      	strb	r2, [r5, #2]
   23c2e:	7a22      	ldrb	r2, [r4, #8]
   23c30:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
   23c32:	7be2      	ldrb	r2, [r4, #15]
   23c34:	712a      	strb	r2, [r5, #4]
   23c36:	7ba2      	ldrb	r2, [r4, #14]
   23c38:	716a      	strb	r2, [r5, #5]
   23c3a:	7b62      	ldrb	r2, [r4, #13]
   23c3c:	71aa      	strb	r2, [r5, #6]
   23c3e:	7b22      	ldrb	r2, [r4, #12]
   23c40:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
   23c42:	7ce2      	ldrb	r2, [r4, #19]
   23c44:	722a      	strb	r2, [r5, #8]
   23c46:	7ca2      	ldrb	r2, [r4, #18]
   23c48:	726a      	strb	r2, [r5, #9]
   23c4a:	7c62      	ldrb	r2, [r4, #17]
   23c4c:	72aa      	strb	r2, [r5, #10]
   23c4e:	7c22      	ldrb	r2, [r4, #16]
   23c50:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
   23c52:	7de2      	ldrb	r2, [r4, #23]
   23c54:	732a      	strb	r2, [r5, #12]
   23c56:	7da2      	ldrb	r2, [r4, #22]
   23c58:	736a      	strb	r2, [r5, #13]
   23c5a:	7d62      	ldrb	r2, [r4, #21]
   23c5c:	73aa      	strb	r2, [r5, #14]
   23c5e:	7d22      	ldrb	r2, [r4, #20]
   23c60:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
   23c62:	7ee2      	ldrb	r2, [r4, #27]
   23c64:	742a      	strb	r2, [r5, #16]
   23c66:	7ea2      	ldrb	r2, [r4, #26]
   23c68:	746a      	strb	r2, [r5, #17]
   23c6a:	7e62      	ldrb	r2, [r4, #25]
   23c6c:	74aa      	strb	r2, [r5, #18]
   23c6e:	7e22      	ldrb	r2, [r4, #24]
   23c70:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
   23c72:	7fe2      	ldrb	r2, [r4, #31]
   23c74:	752a      	strb	r2, [r5, #20]
   23c76:	7fa2      	ldrb	r2, [r4, #30]
   23c78:	756a      	strb	r2, [r5, #21]
   23c7a:	7f62      	ldrb	r2, [r4, #29]
   23c7c:	75aa      	strb	r2, [r5, #22]
   23c7e:	7f22      	ldrb	r2, [r4, #28]
   23c80:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
   23c82:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   23c86:	762a      	strb	r2, [r5, #24]
   23c88:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   23c8c:	766a      	strb	r2, [r5, #25]
   23c8e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   23c92:	76aa      	strb	r2, [r5, #26]
   23c94:	f894 2020 	ldrb.w	r2, [r4, #32]
   23c98:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
   23c9a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   23c9c:	b9da      	cbnz	r2, 23cd6 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
   23c9e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   23ca2:	772b      	strb	r3, [r5, #28]
   23ca4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   23ca8:	776b      	strb	r3, [r5, #29]
   23caa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   23cae:	77ab      	strb	r3, [r5, #30]
   23cb0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   23cb4:	77eb      	strb	r3, [r5, #31]

    return( 0 );
   23cb6:	4613      	mov	r3, r2
   23cb8:	e00d      	b.n	23cd6 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
   23cba:	f104 0628 	add.w	r6, r4, #40	; 0x28
   23cbe:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   23cc2:	2100      	movs	r1, #0
   23cc4:	4430      	add	r0, r6
   23cc6:	f7ec fcd8 	bl	1067a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
   23cca:	4631      	mov	r1, r6
   23ccc:	4620      	mov	r0, r4
   23cce:	f7ff fe8f 	bl	239f0 <mbedtls_internal_sha256_process>
   23cd2:	4603      	mov	r3, r0
   23cd4:	b108      	cbz	r0, 23cda <mbedtls_sha256_finish_ret+0x134>
}
   23cd6:	4618      	mov	r0, r3
   23cd8:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
   23cda:	2238      	movs	r2, #56	; 0x38
   23cdc:	2100      	movs	r1, #0
   23cde:	4630      	mov	r0, r6
   23ce0:	f7ec fccb 	bl	1067a <memset>
   23ce4:	e774      	b.n	23bd0 <mbedtls_sha256_finish_ret+0x2a>

00023ce6 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   23ce6:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   23ce8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   23cea:	b118      	cbz	r0, 23cf4 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   23cec:	3801      	subs	r0, #1
   23cee:	f000 fa03 	bl	240f8 <hal_uart_blocking_tx>
}
   23cf2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   23cf4:	2300      	movs	r3, #0
   23cf6:	461a      	mov	r2, r3
   23cf8:	4619      	mov	r1, r3
   23cfa:	4618      	mov	r0, r3
   23cfc:	f7e5 fa62 	bl	91c4 <__assert_func>

00023d00 <uart_hal_start_rx>:
{
   23d00:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   23d02:	6b80      	ldr	r0, [r0, #56]	; 0x38
   23d04:	b118      	cbz	r0, 23d0e <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   23d06:	3801      	subs	r0, #1
   23d08:	f000 f9d6 	bl	240b8 <hal_uart_start_rx>
}
   23d0c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   23d0e:	2300      	movs	r3, #0
   23d10:	461a      	mov	r2, r3
   23d12:	4619      	mov	r1, r3
   23d14:	4618      	mov	r0, r3
   23d16:	f7e5 fa55 	bl	91c4 <__assert_func>

00023d1a <uart_hal_start_tx>:
{
   23d1a:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   23d1c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   23d1e:	b118      	cbz	r0, 23d28 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   23d20:	3801      	subs	r0, #1
   23d22:	f000 f99f 	bl	24064 <hal_uart_start_tx>
}
   23d26:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   23d28:	2300      	movs	r3, #0
   23d2a:	461a      	mov	r2, r3
   23d2c:	4619      	mov	r1, r3
   23d2e:	4618      	mov	r0, r3
   23d30:	f7e5 fa48 	bl	91c4 <__assert_func>

00023d34 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   23d34:	b510      	push	{r4, lr}
   23d36:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   23d38:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   23d3a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   23d3e:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   23d42:	9201      	str	r2, [sp, #4]
   23d44:	9300      	str	r3, [sp, #0]
   23d46:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   23d4a:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   23d4e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   23d50:	1e60      	subs	r0, r4, #1
   23d52:	f000 fa1f 	bl	24194 <hal_uart_config>
    if (rc) {
   23d56:	b908      	cbnz	r0, 23d5c <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   23d58:	b002      	add	sp, #8
   23d5a:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   23d5c:	2002      	movs	r0, #2
   23d5e:	e7fb      	b.n	23d58 <uart_hal_resume+0x24>

00023d60 <uart_hal_suspend>:
{
   23d60:	b570      	push	{r4, r5, r6, lr}
   23d62:	4606      	mov	r6, r0
   23d64:	460c      	mov	r4, r1
   23d66:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   23d68:	f7e6 fb52 	bl	a410 <os_time_get>
   23d6c:	1a24      	subs	r4, r4, r0
   23d6e:	2c00      	cmp	r4, #0
   23d70:	dc06      	bgt.n	23d80 <uart_hal_suspend+0x20>
   23d72:	b13d      	cbz	r5, 23d84 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   23d74:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   23d76:	3801      	subs	r0, #1
   23d78:	f000 fa84 	bl	24284 <hal_uart_close>
    if (rc) {
   23d7c:	b920      	cbnz	r0, 23d88 <uart_hal_suspend+0x28>
}
   23d7e:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   23d80:	2002      	movs	r0, #2
   23d82:	e7fc      	b.n	23d7e <uart_hal_suspend+0x1e>
   23d84:	2002      	movs	r0, #2
   23d86:	e7fa      	b.n	23d7e <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   23d88:	2002      	movs	r0, #2
   23d8a:	e7f8      	b.n	23d7e <uart_hal_suspend+0x1e>

00023d8c <uart_hal_close>:
{
   23d8c:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   23d8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   23d90:	3801      	subs	r0, #1
   23d92:	f000 fa77 	bl	24284 <hal_uart_close>
    if (rc) {
   23d96:	b900      	cbnz	r0, 23d9a <uart_hal_close+0xe>
}
   23d98:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   23d9a:	2002      	movs	r0, #2
   23d9c:	e7fc      	b.n	23d98 <uart_hal_close+0xc>

00023d9e <uart_hal_open>:
{
   23d9e:	b550      	push	{r4, r6, lr}
   23da0:	b083      	sub	sp, #12
   23da2:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   23da4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   23da6:	2800      	cmp	r0, #0
   23da8:	d02b      	beq.n	23e02 <uart_hal_open+0x64>
   23daa:	4614      	mov	r4, r2
    if (!uc) {
   23dac:	2a00      	cmp	r2, #0
   23dae:	d02e      	beq.n	23e0e <uart_hal_open+0x70>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   23db0:	7ef3      	ldrb	r3, [r6, #27]
   23db2:	f013 0f02 	tst.w	r3, #2
   23db6:	d12c      	bne.n	23e12 <uart_hal_open+0x74>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   23db8:	7913      	ldrb	r3, [r2, #4]
   23dba:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   23dbe:	79d3      	ldrb	r3, [r2, #7]
   23dc0:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   23dc4:	7993      	ldrb	r3, [r2, #6]
   23dc6:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   23dca:	6813      	ldr	r3, [r2, #0]
   23dcc:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   23dce:	7953      	ldrb	r3, [r2, #5]
   23dd0:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   23dd4:	6953      	ldr	r3, [r2, #20]
   23dd6:	9300      	str	r3, [sp, #0]
   23dd8:	68d3      	ldr	r3, [r2, #12]
   23dda:	6912      	ldr	r2, [r2, #16]
   23ddc:	68a1      	ldr	r1, [r4, #8]
   23dde:	3801      	subs	r0, #1
   23de0:	f000 f926 	bl	24030 <hal_uart_init_cbs>
    if (rc) {
   23de4:	b9c0      	cbnz	r0, 23e18 <uart_hal_open+0x7a>
    return (intptr_t)(dev->ud_priv) - 1;
   23de6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   23de8:	79a3      	ldrb	r3, [r4, #6]
   23dea:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   23dec:	9201      	str	r2, [sp, #4]
   23dee:	9300      	str	r3, [sp, #0]
   23df0:	7963      	ldrb	r3, [r4, #5]
   23df2:	7922      	ldrb	r2, [r4, #4]
   23df4:	6821      	ldr	r1, [r4, #0]
   23df6:	3801      	subs	r0, #1
   23df8:	f000 f9cc 	bl	24194 <hal_uart_config>
    if (rc) {
   23dfc:	b150      	cbz	r0, 23e14 <uart_hal_open+0x76>
        return OS_EINVAL;
   23dfe:	2002      	movs	r0, #2
   23e00:	e008      	b.n	23e14 <uart_hal_open+0x76>
    assert(dev->ud_priv);
   23e02:	2300      	movs	r3, #0
   23e04:	461a      	mov	r2, r3
   23e06:	4619      	mov	r1, r3
   23e08:	4618      	mov	r0, r3
   23e0a:	f7e5 f9db 	bl	91c4 <__assert_func>
        return OS_EINVAL;
   23e0e:	2002      	movs	r0, #2
   23e10:	e000      	b.n	23e14 <uart_hal_open+0x76>
        return OS_EBUSY;
   23e12:	200b      	movs	r0, #11
}
   23e14:	b003      	add	sp, #12
   23e16:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   23e18:	2002      	movs	r0, #2
   23e1a:	e7fb      	b.n	23e14 <uart_hal_open+0x76>

00023e1c <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   23e1c:	b570      	push	{r4, r5, r6, lr}
   23e1e:	4604      	mov	r4, r0
   23e20:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   23e22:	69c5      	ldr	r5, [r0, #28]
   23e24:	4628      	mov	r0, r5
   23e26:	f7ec fc5f 	bl	106e8 <strlen>
   23e2a:	3801      	subs	r0, #1
   23e2c:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
   23e2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   23e32:	2b09      	cmp	r3, #9
   23e34:	d816      	bhi.n	23e64 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   23e36:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   23e3a:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   23e3c:	4b0a      	ldr	r3, [pc, #40]	; (23e68 <uart_hal_init+0x4c>)
   23e3e:	6023      	str	r3, [r4, #0]
   23e40:	4b0a      	ldr	r3, [pc, #40]	; (23e6c <uart_hal_init+0x50>)
   23e42:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   23e44:	4b0a      	ldr	r3, [pc, #40]	; (23e70 <uart_hal_init+0x54>)
   23e46:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   23e48:	4b0a      	ldr	r3, [pc, #40]	; (23e74 <uart_hal_init+0x58>)
   23e4a:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   23e4c:	4b0a      	ldr	r3, [pc, #40]	; (23e78 <uart_hal_init+0x5c>)
   23e4e:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   23e50:	4b0a      	ldr	r3, [pc, #40]	; (23e7c <uart_hal_init+0x60>)
   23e52:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   23e54:	4b0a      	ldr	r3, [pc, #40]	; (23e80 <uart_hal_init+0x64>)
   23e56:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   23e58:	4631      	mov	r1, r6
   23e5a:	3830      	subs	r0, #48	; 0x30
   23e5c:	f000 f978 	bl	24150 <hal_uart_init>

    return OS_OK;
   23e60:	2000      	movs	r0, #0
}
   23e62:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   23e64:	2002      	movs	r0, #2
   23e66:	e7fc      	b.n	23e62 <uart_hal_init+0x46>
   23e68:	00023d9f 	.word	0x00023d9f
   23e6c:	00023d8d 	.word	0x00023d8d
   23e70:	00023d61 	.word	0x00023d61
   23e74:	00023d35 	.word	0x00023d35
   23e78:	00023d1b 	.word	0x00023d1b
   23e7c:	00023d01 	.word	0x00023d01
   23e80:	00023ce7 	.word	0x00023ce7

00023e84 <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
   23e84:	b538      	push	{r3, r4, r5, lr}
   23e86:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   23e88:	2400      	movs	r4, #0
   23e8a:	2c07      	cmp	r4, #7
   23e8c:	d808      	bhi.n	23ea0 <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
   23e8e:	692b      	ldr	r3, [r5, #16]
   23e90:	69a8      	ldr	r0, [r5, #24]
   23e92:	4798      	blx	r3
        if (data < 0) {
   23e94:	2800      	cmp	r0, #0
   23e96:	db03      	blt.n	23ea0 <hal_uart_tx_fill_buf+0x1c>
            break;
        }
        u->u_tx_buf[i] = data;
   23e98:	192b      	adds	r3, r5, r4
   23e9a:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   23e9c:	3401      	adds	r4, #1
   23e9e:	e7f4      	b.n	23e8a <hal_uart_tx_fill_buf+0x6>
    }
    return i;
}
   23ea0:	4620      	mov	r0, r4
   23ea2:	bd38      	pop	{r3, r4, r5, pc}

00023ea4 <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
   23ea4:	b538      	push	{r3, r4, r5, lr}
   23ea6:	4604      	mov	r4, r0
   23ea8:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
   23eaa:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   23eae:	b973      	cbnz	r3, 23ece <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
   23eb0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   23eb4:	b153      	cbz	r3, 23ecc <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
   23eb6:	2300      	movs	r3, #0
   23eb8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   23ebc:	68eb      	ldr	r3, [r5, #12]
   23ebe:	7869      	ldrb	r1, [r5, #1]
   23ec0:	69a8      	ldr	r0, [r5, #24]
   23ec2:	4798      	blx	r3
        if (rc < 0) {
   23ec4:	2800      	cmp	r0, #0
   23ec6:	db21      	blt.n	23f0c <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
   23ec8:	2301      	movs	r3, #1
   23eca:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
   23ecc:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
   23ece:	2300      	movs	r3, #0
   23ed0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
   23ed4:	4608      	mov	r0, r1
   23ed6:	f7ff ffd5 	bl	23e84 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   23eda:	2800      	cmp	r0, #0
   23edc:	dd07      	ble.n	23eee <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   23ede:	1cab      	adds	r3, r5, #2
   23ee0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   23ee4:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   23ee8:	2301      	movs	r3, #1
   23eea:	60a3      	str	r3, [r4, #8]
   23eec:	e7e0      	b.n	23eb0 <uart_irq_handler+0xc>
            if (u->u_tx_done) {
   23eee:	696b      	ldr	r3, [r5, #20]
   23ef0:	b10b      	cbz	r3, 23ef6 <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
   23ef2:	69a8      	ldr	r0, [r5, #24]
   23ef4:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
   23ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
   23efa:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
   23efe:	2301      	movs	r3, #1
   23f00:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
   23f02:	782b      	ldrb	r3, [r5, #0]
   23f04:	f36f 0382 	bfc	r3, #2, #1
   23f08:	702b      	strb	r3, [r5, #0]
   23f0a:	e7d1      	b.n	23eb0 <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
   23f0c:	782b      	ldrb	r3, [r5, #0]
   23f0e:	f043 0302 	orr.w	r3, r3, #2
   23f12:	702b      	strb	r3, [r5, #0]
   23f14:	e7da      	b.n	23ecc <uart_irq_handler+0x28>
	...

00023f18 <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
   23f18:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
   23f1a:	4902      	ldr	r1, [pc, #8]	; (23f24 <uart0_irq_handler+0xc>)
   23f1c:	4802      	ldr	r0, [pc, #8]	; (23f28 <uart0_irq_handler+0x10>)
   23f1e:	f7ff ffc1 	bl	23ea4 <uart_irq_handler>
}
   23f22:	bd08      	pop	{r3, pc}
   23f24:	20005b60 	.word	0x20005b60
   23f28:	40002000 	.word	0x40002000

00023f2c <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
   23f2c:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   23f30:	4298      	cmp	r0, r3
   23f32:	d049      	beq.n	23fc8 <hal_uart_baudrate+0x9c>
   23f34:	dc23      	bgt.n	23f7e <hal_uart_baudrate+0x52>
   23f36:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   23f3a:	d048      	beq.n	23fce <hal_uart_baudrate+0xa2>
   23f3c:	dd08      	ble.n	23f50 <hal_uart_baudrate+0x24>
   23f3e:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
   23f42:	d04f      	beq.n	23fe4 <hal_uart_baudrate+0xb8>
   23f44:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
   23f48:	d114      	bne.n	23f74 <hal_uart_baudrate+0x48>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
   23f4a:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
   23f4e:	4770      	bx	lr
    switch (baudrate) {
   23f50:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
   23f54:	d03d      	beq.n	23fd2 <hal_uart_baudrate+0xa6>
   23f56:	dd04      	ble.n	23f62 <hal_uart_baudrate+0x36>
   23f58:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
   23f5c:	d140      	bne.n	23fe0 <hal_uart_baudrate+0xb4>
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
   23f5e:	482c      	ldr	r0, [pc, #176]	; (24010 <hal_uart_baudrate+0xe4>)
   23f60:	4770      	bx	lr
    switch (baudrate) {
   23f62:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   23f66:	d036      	beq.n	23fd6 <hal_uart_baudrate+0xaa>
   23f68:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   23f6c:	d136      	bne.n	23fdc <hal_uart_baudrate+0xb0>
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
   23f6e:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
   23f72:	4770      	bx	lr
    switch (baudrate) {
   23f74:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
   23f78:	d136      	bne.n	23fe8 <hal_uart_baudrate+0xbc>
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
   23f7a:	4826      	ldr	r0, [pc, #152]	; (24014 <hal_uart_baudrate+0xe8>)
   23f7c:	4770      	bx	lr
    switch (baudrate) {
   23f7e:	4b26      	ldr	r3, [pc, #152]	; (24018 <hal_uart_baudrate+0xec>)
   23f80:	4298      	cmp	r0, r3
   23f82:	d033      	beq.n	23fec <hal_uart_baudrate+0xc0>
   23f84:	dd08      	ble.n	23f98 <hal_uart_baudrate+0x6c>
   23f86:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
   23f8a:	d03c      	beq.n	24006 <hal_uart_baudrate+0xda>
   23f8c:	4b23      	ldr	r3, [pc, #140]	; (2401c <hal_uart_baudrate+0xf0>)
   23f8e:	4298      	cmp	r0, r3
   23f90:	d114      	bne.n	23fbc <hal_uart_baudrate+0x90>
    case 460800:
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
   23f92:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   23f96:	4770      	bx	lr
    switch (baudrate) {
   23f98:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
   23f9c:	d029      	beq.n	23ff2 <hal_uart_baudrate+0xc6>
   23f9e:	dd05      	ble.n	23fac <hal_uart_baudrate+0x80>
   23fa0:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
   23fa4:	d12d      	bne.n	24002 <hal_uart_baudrate+0xd6>
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
   23fa6:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
   23faa:	4770      	bx	lr
    switch (baudrate) {
   23fac:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
   23fb0:	d022      	beq.n	23ff8 <hal_uart_baudrate+0xcc>
   23fb2:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   23fb6:	d122      	bne.n	23ffe <hal_uart_baudrate+0xd2>
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
   23fb8:	4819      	ldr	r0, [pc, #100]	; (24020 <hal_uart_baudrate+0xf4>)
   23fba:	4770      	bx	lr
    switch (baudrate) {
   23fbc:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
   23fc0:	d124      	bne.n	2400c <hal_uart_baudrate+0xe0>
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
   23fc2:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
   23fc6:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
   23fc8:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
   23fcc:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
   23fce:	4815      	ldr	r0, [pc, #84]	; (24024 <hal_uart_baudrate+0xf8>)
   23fd0:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
   23fd2:	4815      	ldr	r0, [pc, #84]	; (24028 <hal_uart_baudrate+0xfc>)
   23fd4:	4770      	bx	lr
    switch (baudrate) {
   23fd6:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
   23fda:	4770      	bx	lr
    default:
        return 0;
   23fdc:	2000      	movs	r0, #0
   23fde:	4770      	bx	lr
   23fe0:	2000      	movs	r0, #0
   23fe2:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
   23fe4:	4811      	ldr	r0, [pc, #68]	; (2402c <hal_uart_baudrate+0x100>)
   23fe6:	4770      	bx	lr
        return 0;
   23fe8:	2000      	movs	r0, #0
   23fea:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
   23fec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   23ff0:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
   23ff2:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
   23ff6:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
   23ff8:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
   23ffc:	4770      	bx	lr
        return 0;
   23ffe:	2000      	movs	r0, #0
   24000:	4770      	bx	lr
   24002:	2000      	movs	r0, #0
   24004:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
   24006:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
   2400a:	4770      	bx	lr
        return 0;
   2400c:	2000      	movs	r0, #0
    }
}
   2400e:	4770      	bx	lr
   24010:	00275000 	.word	0x00275000
   24014:	004ea000 	.word	0x004ea000
   24018:	0003d090 	.word	0x0003d090
   2401c:	000f4240 	.word	0x000f4240
   24020:	013a9000 	.word	0x013a9000
   24024:	003af000 	.word	0x003af000
   24028:	0013b000 	.word	0x0013b000
   2402c:	0075c000 	.word	0x0075c000

00024030 <hal_uart_init_cbs>:
    if (port != 0) {
   24030:	b980      	cbnz	r0, 24054 <hal_uart_init_cbs+0x24>
   24032:	4684      	mov	ip, r0
    if (u->u_open) {
   24034:	480a      	ldr	r0, [pc, #40]	; (24060 <hal_uart_init_cbs+0x30>)
   24036:	7800      	ldrb	r0, [r0, #0]
   24038:	f010 0f01 	tst.w	r0, #1
   2403c:	d10d      	bne.n	2405a <hal_uart_init_cbs+0x2a>
{
   2403e:	b410      	push	{r4}
    u->u_rx_func = rx_func;
   24040:	4c07      	ldr	r4, [pc, #28]	; (24060 <hal_uart_init_cbs+0x30>)
   24042:	60e3      	str	r3, [r4, #12]
    u->u_tx_func = tx_func;
   24044:	6121      	str	r1, [r4, #16]
    u->u_tx_done = tx_done;
   24046:	6162      	str	r2, [r4, #20]
    u->u_func_arg = arg;
   24048:	9b01      	ldr	r3, [sp, #4]
   2404a:	61a3      	str	r3, [r4, #24]
    return 0;
   2404c:	4660      	mov	r0, ip
}
   2404e:	f85d 4b04 	ldr.w	r4, [sp], #4
   24052:	4770      	bx	lr
        return -1;
   24054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24058:	4770      	bx	lr
        return -1;
   2405a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2405e:	4770      	bx	lr
   24060:	20005b60 	.word	0x20005b60

00024064 <hal_uart_start_tx>:
    if (port != 0) {
   24064:	bb10      	cbnz	r0, 240ac <hal_uart_start_tx+0x48>
{
   24066:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   24068:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2406c:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
   2406e:	4b10      	ldr	r3, [pc, #64]	; (240b0 <hal_uart_start_tx+0x4c>)
   24070:	781b      	ldrb	r3, [r3, #0]
   24072:	f013 0f04 	tst.w	r3, #4
   24076:	d002      	beq.n	2407e <hal_uart_start_tx+0x1a>
    __HAL_ENABLE_INTERRUPTS(sr);
   24078:	b904      	cbnz	r4, 2407c <hal_uart_start_tx+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
   2407a:	b662      	cpsie	i
}
   2407c:	bd10      	pop	{r4, pc}
        rc = hal_uart_tx_fill_buf(u);
   2407e:	480c      	ldr	r0, [pc, #48]	; (240b0 <hal_uart_start_tx+0x4c>)
   24080:	f7ff ff00 	bl	23e84 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   24084:	2800      	cmp	r0, #0
   24086:	ddf7      	ble.n	24078 <hal_uart_start_tx+0x14>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
   24088:	4b0a      	ldr	r3, [pc, #40]	; (240b4 <hal_uart_start_tx+0x50>)
   2408a:	f44f 7280 	mov.w	r2, #256	; 0x100
   2408e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   24092:	4a07      	ldr	r2, [pc, #28]	; (240b0 <hal_uart_start_tx+0x4c>)
   24094:	1c91      	adds	r1, r2, #2
   24096:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   2409a:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   2409e:	2101      	movs	r1, #1
   240a0:	6099      	str	r1, [r3, #8]
            u->u_tx_started = 1;
   240a2:	7813      	ldrb	r3, [r2, #0]
   240a4:	f043 0304 	orr.w	r3, r3, #4
   240a8:	7013      	strb	r3, [r2, #0]
   240aa:	e7e5      	b.n	24078 <hal_uart_start_tx+0x14>
   240ac:	4770      	bx	lr
   240ae:	bf00      	nop
   240b0:	20005b60 	.word	0x20005b60
   240b4:	40002000 	.word	0x40002000

000240b8 <hal_uart_start_rx>:
    if (port != 0) {
   240b8:	b9c8      	cbnz	r0, 240ee <hal_uart_start_rx+0x36>
    if (u->u_rx_stall) {
   240ba:	4b0d      	ldr	r3, [pc, #52]	; (240f0 <hal_uart_start_rx+0x38>)
   240bc:	781b      	ldrb	r3, [r3, #0]
   240be:	f013 0f02 	tst.w	r3, #2
   240c2:	d014      	beq.n	240ee <hal_uart_start_rx+0x36>
{
   240c4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   240c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   240ca:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   240cc:	4b08      	ldr	r3, [pc, #32]	; (240f0 <hal_uart_start_rx+0x38>)
   240ce:	68da      	ldr	r2, [r3, #12]
   240d0:	7859      	ldrb	r1, [r3, #1]
   240d2:	6998      	ldr	r0, [r3, #24]
   240d4:	4790      	blx	r2
        if (rc == 0) {
   240d6:	b938      	cbnz	r0, 240e8 <hal_uart_start_rx+0x30>
            u->u_rx_stall = 0;
   240d8:	4b05      	ldr	r3, [pc, #20]	; (240f0 <hal_uart_start_rx+0x38>)
   240da:	781a      	ldrb	r2, [r3, #0]
   240dc:	f36f 0241 	bfc	r2, #1, #1
   240e0:	701a      	strb	r2, [r3, #0]
            nrf_uart->TASKS_STARTRX = 1;
   240e2:	4b04      	ldr	r3, [pc, #16]	; (240f4 <hal_uart_start_rx+0x3c>)
   240e4:	2201      	movs	r2, #1
   240e6:	601a      	str	r2, [r3, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
   240e8:	b904      	cbnz	r4, 240ec <hal_uart_start_rx+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
   240ea:	b662      	cpsie	i
}
   240ec:	bd10      	pop	{r4, pc}
   240ee:	4770      	bx	lr
   240f0:	20005b60 	.word	0x20005b60
   240f4:	40002000 	.word	0x40002000

000240f8 <hal_uart_blocking_tx>:
{
   240f8:	b082      	sub	sp, #8
   240fa:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port != 0) {
   240fe:	bb00      	cbnz	r0, 24142 <hal_uart_blocking_tx+0x4a>
    if (!u->u_open) {
   24100:	4b11      	ldr	r3, [pc, #68]	; (24148 <hal_uart_blocking_tx+0x50>)
   24102:	781b      	ldrb	r3, [r3, #0]
   24104:	f013 0f01 	tst.w	r3, #1
   24108:	d01b      	beq.n	24142 <hal_uart_blocking_tx+0x4a>
    if (u->u_tx_started) {
   2410a:	f013 0f04 	tst.w	r3, #4
   2410e:	d004      	beq.n	2411a <hal_uart_blocking_tx+0x22>
        while (nrf_uart->EVENTS_ENDTX == 0) {
   24110:	4b0e      	ldr	r3, [pc, #56]	; (2414c <hal_uart_blocking_tx+0x54>)
   24112:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   24116:	2b00      	cmp	r3, #0
   24118:	d0fa      	beq.n	24110 <hal_uart_blocking_tx+0x18>
    nrf_uart->EVENTS_ENDTX = 0;
   2411a:	4b0c      	ldr	r3, [pc, #48]	; (2414c <hal_uart_blocking_tx+0x54>)
   2411c:	2200      	movs	r2, #0
   2411e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
   24122:	f10d 0207 	add.w	r2, sp, #7
   24126:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
   2412a:	2201      	movs	r2, #1
   2412c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
   24130:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
   24132:	4b06      	ldr	r3, [pc, #24]	; (2414c <hal_uart_blocking_tx+0x54>)
   24134:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
   24138:	2b00      	cmp	r3, #0
   2413a:	d0fa      	beq.n	24132 <hal_uart_blocking_tx+0x3a>
    nrf_uart->TASKS_STOPTX = 1;
   2413c:	4b03      	ldr	r3, [pc, #12]	; (2414c <hal_uart_blocking_tx+0x54>)
   2413e:	2201      	movs	r2, #1
   24140:	60da      	str	r2, [r3, #12]
}
   24142:	b002      	add	sp, #8
   24144:	4770      	bx	lr
   24146:	bf00      	nop
   24148:	20005b60 	.word	0x20005b60
   2414c:	40002000 	.word	0x40002000

00024150 <hal_uart_init>:
        NVIC_SetVector(UARTE1_IRQn, (uint32_t)uart1_irq_handler);
    } else {
        return -1;
    }
#else
    if (port != 0) {
   24150:	4602      	mov	r2, r0
   24152:	b9b0      	cbnz	r0, 24182 <hal_uart_init+0x32>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   24154:	4b0c      	ldr	r3, [pc, #48]	; (24188 <hal_uart_init+0x38>)
   24156:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   24158:	480c      	ldr	r0, [pc, #48]	; (2418c <hal_uart_init+0x3c>)
   2415a:	6498      	str	r0, [r3, #72]	; 0x48
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
   2415c:	f991 0000 	ldrsb.w	r0, [r1]
   24160:	4b0b      	ldr	r3, [pc, #44]	; (24190 <hal_uart_init+0x40>)
   24162:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
   24166:	f991 0001 	ldrsb.w	r0, [r1, #1]
   2416a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
   2416e:	f991 0002 	ldrsb.w	r0, [r1, #2]
   24172:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
   24176:	f991 1003 	ldrsb.w	r1, [r1, #3]
   2417a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    return 0;
   2417e:	4610      	mov	r0, r2
   24180:	4770      	bx	lr
        return -1;
   24182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   24186:	4770      	bx	lr
   24188:	e000ed00 	.word	0xe000ed00
   2418c:	00023f19 	.word	0x00023f19
   24190:	40002000 	.word	0x40002000

00024194 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   24194:	b538      	push	{r3, r4, r5, lr}
   24196:	f89d c010 	ldrb.w	ip, [sp, #16]
        u = &uart1;
    } else {
        return -1;
    }
#else
    if (port != 0) {
   2419a:	2800      	cmp	r0, #0
   2419c:	d15a      	bne.n	24254 <hal_uart_config+0xc0>
   2419e:	4604      	mov	r4, r0
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
   241a0:	4835      	ldr	r0, [pc, #212]	; (24278 <hal_uart_config+0xe4>)
   241a2:	7800      	ldrb	r0, [r0, #0]
   241a4:	f010 0f01 	tst.w	r0, #1
   241a8:	d157      	bne.n	2425a <hal_uart_config+0xc6>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
   241aa:	2a08      	cmp	r2, #8
   241ac:	d158      	bne.n	24260 <hal_uart_config+0xcc>
        return -1;
    }
    if (stopbits != 1) {
   241ae:	2b01      	cmp	r3, #1
   241b0:	d159      	bne.n	24266 <hal_uart_config+0xd2>
        return -1;
    }

    switch (parity) {
   241b2:	f1bc 0f01 	cmp.w	ip, #1
   241b6:	d059      	beq.n	2426c <hal_uart_config+0xd8>
   241b8:	f1bc 0f02 	cmp.w	ip, #2
   241bc:	d134      	bne.n	24228 <hal_uart_config+0x94>
    case HAL_UART_PARITY_NONE:
        break;
    case HAL_UART_PARITY_ODD:
        return -1;
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
   241be:	250e      	movs	r5, #14
        break;
    }

    switch (flow_ctl) {
   241c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   241c4:	2b01      	cmp	r3, #1
   241c6:	d031      	beq.n	2422c <hal_uart_config+0x98>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
   241c8:	4608      	mov	r0, r1
   241ca:	f7ff feaf 	bl	23f2c <hal_uart_baudrate>
    if (baud_reg == 0) {
   241ce:	4602      	mov	r2, r0
   241d0:	2800      	cmp	r0, #0
   241d2:	d04e      	beq.n	24272 <hal_uart_config+0xde>
        return -1;
    }
    nrf_uart->ENABLE = 0;
   241d4:	4b29      	ldr	r3, [pc, #164]	; (2427c <hal_uart_config+0xe8>)
   241d6:	2100      	movs	r1, #0
   241d8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   241dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   241e0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
   241e4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
   241e8:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   241ec:	4a24      	ldr	r2, [pc, #144]	; (24280 <hal_uart_config+0xec>)
   241ee:	2004      	movs	r0, #4
   241f0:	6010      	str	r0, [r2, #0]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
   241f2:	2208      	movs	r2, #8
   241f4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
   241f8:	2210      	movs	r2, #16
   241fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
   241fe:	4a1e      	ldr	r2, [pc, #120]	; (24278 <hal_uart_config+0xe4>)
   24200:	1c50      	adds	r0, r2, #1
   24202:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
   24206:	2001      	movs	r0, #1
   24208:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
   2420c:	6018      	str	r0, [r3, #0]

    u->u_rx_stall = 0;
   2420e:	7813      	ldrb	r3, [r2, #0]
   24210:	f361 0341 	bfi	r3, r1, #1, #1
   24214:	7013      	strb	r3, [r2, #0]
    u->u_tx_started = 0;
   24216:	b2db      	uxtb	r3, r3
   24218:	f361 0382 	bfi	r3, r1, #2, #1
   2421c:	7013      	strb	r3, [r2, #0]
    u->u_open = 1;
   2421e:	b2db      	uxtb	r3, r3
   24220:	4303      	orrs	r3, r0
   24222:	7013      	strb	r3, [r2, #0]

    return 0;
   24224:	4620      	mov	r0, r4
}
   24226:	bd38      	pop	{r3, r4, r5, pc}
    switch (parity) {
   24228:	2500      	movs	r5, #0
   2422a:	e7c9      	b.n	241c0 <hal_uart_config+0x2c>
        cfg_reg |= UARTE_CONFIG_HWFC;
   2422c:	f045 0501 	orr.w	r5, r5, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   24230:	4b12      	ldr	r3, [pc, #72]	; (2427c <hal_uart_config+0xe8>)
   24232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
   24236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2423a:	d005      	beq.n	24248 <hal_uart_config+0xb4>
          nrf_uart->PSEL.CTS == 0xffffffff) {
   2423c:	4b0f      	ldr	r3, [pc, #60]	; (2427c <hal_uart_config+0xe8>)
   2423e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   24242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24246:	d1bf      	bne.n	241c8 <hal_uart_config+0x34>
            assert(0);
   24248:	2300      	movs	r3, #0
   2424a:	461a      	mov	r2, r3
   2424c:	4619      	mov	r1, r3
   2424e:	4618      	mov	r0, r3
   24250:	f7e4 ffb8 	bl	91c4 <__assert_func>
        return -1;
   24254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24258:	e7e5      	b.n	24226 <hal_uart_config+0x92>
        return -1;
   2425a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2425e:	e7e2      	b.n	24226 <hal_uart_config+0x92>
        return -1;
   24260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24264:	e7df      	b.n	24226 <hal_uart_config+0x92>
        return -1;
   24266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2426a:	e7dc      	b.n	24226 <hal_uart_config+0x92>
    switch (parity) {
   2426c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24270:	e7d9      	b.n	24226 <hal_uart_config+0x92>
        return -1;
   24272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24276:	e7d6      	b.n	24226 <hal_uart_config+0x92>
   24278:	20005b60 	.word	0x20005b60
   2427c:	40002000 	.word	0x40002000
   24280:	e000e100 	.word	0xe000e100

00024284 <hal_uart_close>:
        u = &uart1;
    } else {
        return -1;
    }
#else
    if (port != 0) {
   24284:	4602      	mov	r2, r0
   24286:	b998      	cbnz	r0, 242b0 <hal_uart_close+0x2c>
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
   24288:	490b      	ldr	r1, [pc, #44]	; (242b8 <hal_uart_close+0x34>)
   2428a:	780b      	ldrb	r3, [r1, #0]
   2428c:	f36f 0300 	bfc	r3, #0, #1
   24290:	700b      	strb	r3, [r1, #0]
    while (u->u_tx_started) {
   24292:	4b09      	ldr	r3, [pc, #36]	; (242b8 <hal_uart_close+0x34>)
   24294:	781b      	ldrb	r3, [r3, #0]
   24296:	f013 0f04 	tst.w	r3, #4
   2429a:	d1fa      	bne.n	24292 <hal_uart_close+0xe>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
   2429c:	4b07      	ldr	r3, [pc, #28]	; (242bc <hal_uart_close+0x38>)
   2429e:	2100      	movs	r1, #0
   242a0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   242a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   242a8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    return 0;
   242ac:	4610      	mov	r0, r2
   242ae:	4770      	bx	lr
        return -1;
   242b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   242b4:	4770      	bx	lr
   242b6:	bf00      	nop
   242b8:	20005b60 	.word	0x20005b60
   242bc:	40002000 	.word	0x40002000

000242c0 <os_malloc_lock>:
static struct os_mutex os_malloc_mutex;
#endif

static void
os_malloc_lock(void)
{
   242c0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   242c2:	4b08      	ldr	r3, [pc, #32]	; (242e4 <os_malloc_lock+0x24>)
   242c4:	681b      	ldr	r3, [r3, #0]
   242c6:	b903      	cbnz	r3, 242ca <os_malloc_lock+0xa>
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
        assert(rc == 0);
    }
#endif
}
   242c8:	bd08      	pop	{r3, pc}
        rc = os_mutex_pend(&os_malloc_mutex, 0xffffffff);
   242ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   242ce:	4806      	ldr	r0, [pc, #24]	; (242e8 <os_malloc_lock+0x28>)
   242d0:	f7e6 fd1e 	bl	ad10 <os_mutex_pend>
        assert(rc == 0);
   242d4:	2800      	cmp	r0, #0
   242d6:	d0f7      	beq.n	242c8 <os_malloc_lock+0x8>
   242d8:	2300      	movs	r3, #0
   242da:	461a      	mov	r2, r3
   242dc:	4619      	mov	r1, r3
   242de:	4618      	mov	r0, r3
   242e0:	f7e4 ff70 	bl	91c4 <__assert_func>
   242e4:	20002978 	.word	0x20002978
   242e8:	20005b7c 	.word	0x20005b7c

000242ec <os_malloc_unlock>:

static void
os_malloc_unlock(void)
{
   242ec:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    if (g_os_started) {
   242ee:	4b07      	ldr	r3, [pc, #28]	; (2430c <os_malloc_unlock+0x20>)
   242f0:	681b      	ldr	r3, [r3, #0]
   242f2:	b903      	cbnz	r3, 242f6 <os_malloc_unlock+0xa>
        rc = os_mutex_release(&os_malloc_mutex);
        assert(rc == 0);
    }
#endif
}
   242f4:	bd08      	pop	{r3, pc}
        rc = os_mutex_release(&os_malloc_mutex);
   242f6:	4806      	ldr	r0, [pc, #24]	; (24310 <os_malloc_unlock+0x24>)
   242f8:	f7e6 fcae 	bl	ac58 <os_mutex_release>
        assert(rc == 0);
   242fc:	2800      	cmp	r0, #0
   242fe:	d0f9      	beq.n	242f4 <os_malloc_unlock+0x8>
   24300:	2300      	movs	r3, #0
   24302:	461a      	mov	r2, r3
   24304:	4619      	mov	r1, r3
   24306:	4618      	mov	r0, r3
   24308:	f7e4 ff5c 	bl	91c4 <__assert_func>
   2430c:	20002978 	.word	0x20002978
   24310:	20005b7c 	.word	0x20005b7c

00024314 <os_malloc>:

void *
os_malloc(size_t size)
{
   24314:	b510      	push	{r4, lr}
   24316:	4604      	mov	r4, r0
    void *ptr;

    os_malloc_lock();
   24318:	f7ff ffd2 	bl	242c0 <os_malloc_lock>
    ptr = malloc(size);
   2431c:	4620      	mov	r0, r4
   2431e:	f7ec f92f 	bl	10580 <malloc>
   24322:	4604      	mov	r4, r0
    os_malloc_unlock();
   24324:	f7ff ffe2 	bl	242ec <os_malloc_unlock>

    return ptr;
}
   24328:	4620      	mov	r0, r4
   2432a:	bd10      	pop	{r4, pc}

0002432c <os_free>:

void
os_free(void *mem)
{
   2432c:	b510      	push	{r4, lr}
   2432e:	4604      	mov	r4, r0
    os_malloc_lock();
   24330:	f7ff ffc6 	bl	242c0 <os_malloc_lock>
    free(mem);
   24334:	4620      	mov	r0, r4
   24336:	f7ec f959 	bl	105ec <free>
    os_malloc_unlock();
   2433a:	f7ff ffd7 	bl	242ec <os_malloc_unlock>
}
   2433e:	bd10      	pop	{r4, pc}

00024340 <__aeabi_drsub>:
   24340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   24344:	e002      	b.n	2434c <__adddf3>
   24346:	bf00      	nop

00024348 <__aeabi_dsub>:
   24348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0002434c <__adddf3>:
   2434c:	b530      	push	{r4, r5, lr}
   2434e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   24352:	ea4f 0543 	mov.w	r5, r3, lsl #1
   24356:	ea94 0f05 	teq	r4, r5
   2435a:	bf08      	it	eq
   2435c:	ea90 0f02 	teqeq	r0, r2
   24360:	bf1f      	itttt	ne
   24362:	ea54 0c00 	orrsne.w	ip, r4, r0
   24366:	ea55 0c02 	orrsne.w	ip, r5, r2
   2436a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   2436e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   24372:	f000 80e2 	beq.w	2453a <__adddf3+0x1ee>
   24376:	ea4f 5454 	mov.w	r4, r4, lsr #21
   2437a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   2437e:	bfb8      	it	lt
   24380:	426d      	neglt	r5, r5
   24382:	dd0c      	ble.n	2439e <__adddf3+0x52>
   24384:	442c      	add	r4, r5
   24386:	ea80 0202 	eor.w	r2, r0, r2
   2438a:	ea81 0303 	eor.w	r3, r1, r3
   2438e:	ea82 0000 	eor.w	r0, r2, r0
   24392:	ea83 0101 	eor.w	r1, r3, r1
   24396:	ea80 0202 	eor.w	r2, r0, r2
   2439a:	ea81 0303 	eor.w	r3, r1, r3
   2439e:	2d36      	cmp	r5, #54	; 0x36
   243a0:	bf88      	it	hi
   243a2:	bd30      	pophi	{r4, r5, pc}
   243a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   243a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   243ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   243b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   243b4:	d002      	beq.n	243bc <__adddf3+0x70>
   243b6:	4240      	negs	r0, r0
   243b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   243bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   243c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   243c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   243c8:	d002      	beq.n	243d0 <__adddf3+0x84>
   243ca:	4252      	negs	r2, r2
   243cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   243d0:	ea94 0f05 	teq	r4, r5
   243d4:	f000 80a7 	beq.w	24526 <__adddf3+0x1da>
   243d8:	f1a4 0401 	sub.w	r4, r4, #1
   243dc:	f1d5 0e20 	rsbs	lr, r5, #32
   243e0:	db0d      	blt.n	243fe <__adddf3+0xb2>
   243e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   243e6:	fa22 f205 	lsr.w	r2, r2, r5
   243ea:	1880      	adds	r0, r0, r2
   243ec:	f141 0100 	adc.w	r1, r1, #0
   243f0:	fa03 f20e 	lsl.w	r2, r3, lr
   243f4:	1880      	adds	r0, r0, r2
   243f6:	fa43 f305 	asr.w	r3, r3, r5
   243fa:	4159      	adcs	r1, r3
   243fc:	e00e      	b.n	2441c <__adddf3+0xd0>
   243fe:	f1a5 0520 	sub.w	r5, r5, #32
   24402:	f10e 0e20 	add.w	lr, lr, #32
   24406:	2a01      	cmp	r2, #1
   24408:	fa03 fc0e 	lsl.w	ip, r3, lr
   2440c:	bf28      	it	cs
   2440e:	f04c 0c02 	orrcs.w	ip, ip, #2
   24412:	fa43 f305 	asr.w	r3, r3, r5
   24416:	18c0      	adds	r0, r0, r3
   24418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   2441c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   24420:	d507      	bpl.n	24432 <__adddf3+0xe6>
   24422:	f04f 0e00 	mov.w	lr, #0
   24426:	f1dc 0c00 	rsbs	ip, ip, #0
   2442a:	eb7e 0000 	sbcs.w	r0, lr, r0
   2442e:	eb6e 0101 	sbc.w	r1, lr, r1
   24432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   24436:	d31b      	bcc.n	24470 <__adddf3+0x124>
   24438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   2443c:	d30c      	bcc.n	24458 <__adddf3+0x10c>
   2443e:	0849      	lsrs	r1, r1, #1
   24440:	ea5f 0030 	movs.w	r0, r0, rrx
   24444:	ea4f 0c3c 	mov.w	ip, ip, rrx
   24448:	f104 0401 	add.w	r4, r4, #1
   2444c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   24450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   24454:	f080 809a 	bcs.w	2458c <__adddf3+0x240>
   24458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   2445c:	bf08      	it	eq
   2445e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   24462:	f150 0000 	adcs.w	r0, r0, #0
   24466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2446a:	ea41 0105 	orr.w	r1, r1, r5
   2446e:	bd30      	pop	{r4, r5, pc}
   24470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   24474:	4140      	adcs	r0, r0
   24476:	eb41 0101 	adc.w	r1, r1, r1
   2447a:	3c01      	subs	r4, #1
   2447c:	bf28      	it	cs
   2447e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   24482:	d2e9      	bcs.n	24458 <__adddf3+0x10c>
   24484:	f091 0f00 	teq	r1, #0
   24488:	bf04      	itt	eq
   2448a:	4601      	moveq	r1, r0
   2448c:	2000      	moveq	r0, #0
   2448e:	fab1 f381 	clz	r3, r1
   24492:	bf08      	it	eq
   24494:	3320      	addeq	r3, #32
   24496:	f1a3 030b 	sub.w	r3, r3, #11
   2449a:	f1b3 0220 	subs.w	r2, r3, #32
   2449e:	da0c      	bge.n	244ba <__adddf3+0x16e>
   244a0:	320c      	adds	r2, #12
   244a2:	dd08      	ble.n	244b6 <__adddf3+0x16a>
   244a4:	f102 0c14 	add.w	ip, r2, #20
   244a8:	f1c2 020c 	rsb	r2, r2, #12
   244ac:	fa01 f00c 	lsl.w	r0, r1, ip
   244b0:	fa21 f102 	lsr.w	r1, r1, r2
   244b4:	e00c      	b.n	244d0 <__adddf3+0x184>
   244b6:	f102 0214 	add.w	r2, r2, #20
   244ba:	bfd8      	it	le
   244bc:	f1c2 0c20 	rsble	ip, r2, #32
   244c0:	fa01 f102 	lsl.w	r1, r1, r2
   244c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   244c8:	bfdc      	itt	le
   244ca:	ea41 010c 	orrle.w	r1, r1, ip
   244ce:	4090      	lslle	r0, r2
   244d0:	1ae4      	subs	r4, r4, r3
   244d2:	bfa2      	ittt	ge
   244d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   244d8:	4329      	orrge	r1, r5
   244da:	bd30      	popge	{r4, r5, pc}
   244dc:	ea6f 0404 	mvn.w	r4, r4
   244e0:	3c1f      	subs	r4, #31
   244e2:	da1c      	bge.n	2451e <__adddf3+0x1d2>
   244e4:	340c      	adds	r4, #12
   244e6:	dc0e      	bgt.n	24506 <__adddf3+0x1ba>
   244e8:	f104 0414 	add.w	r4, r4, #20
   244ec:	f1c4 0220 	rsb	r2, r4, #32
   244f0:	fa20 f004 	lsr.w	r0, r0, r4
   244f4:	fa01 f302 	lsl.w	r3, r1, r2
   244f8:	ea40 0003 	orr.w	r0, r0, r3
   244fc:	fa21 f304 	lsr.w	r3, r1, r4
   24500:	ea45 0103 	orr.w	r1, r5, r3
   24504:	bd30      	pop	{r4, r5, pc}
   24506:	f1c4 040c 	rsb	r4, r4, #12
   2450a:	f1c4 0220 	rsb	r2, r4, #32
   2450e:	fa20 f002 	lsr.w	r0, r0, r2
   24512:	fa01 f304 	lsl.w	r3, r1, r4
   24516:	ea40 0003 	orr.w	r0, r0, r3
   2451a:	4629      	mov	r1, r5
   2451c:	bd30      	pop	{r4, r5, pc}
   2451e:	fa21 f004 	lsr.w	r0, r1, r4
   24522:	4629      	mov	r1, r5
   24524:	bd30      	pop	{r4, r5, pc}
   24526:	f094 0f00 	teq	r4, #0
   2452a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   2452e:	bf06      	itte	eq
   24530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   24534:	3401      	addeq	r4, #1
   24536:	3d01      	subne	r5, #1
   24538:	e74e      	b.n	243d8 <__adddf3+0x8c>
   2453a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   2453e:	bf18      	it	ne
   24540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   24544:	d029      	beq.n	2459a <__adddf3+0x24e>
   24546:	ea94 0f05 	teq	r4, r5
   2454a:	bf08      	it	eq
   2454c:	ea90 0f02 	teqeq	r0, r2
   24550:	d005      	beq.n	2455e <__adddf3+0x212>
   24552:	ea54 0c00 	orrs.w	ip, r4, r0
   24556:	bf04      	itt	eq
   24558:	4619      	moveq	r1, r3
   2455a:	4610      	moveq	r0, r2
   2455c:	bd30      	pop	{r4, r5, pc}
   2455e:	ea91 0f03 	teq	r1, r3
   24562:	bf1e      	ittt	ne
   24564:	2100      	movne	r1, #0
   24566:	2000      	movne	r0, #0
   24568:	bd30      	popne	{r4, r5, pc}
   2456a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   2456e:	d105      	bne.n	2457c <__adddf3+0x230>
   24570:	0040      	lsls	r0, r0, #1
   24572:	4149      	adcs	r1, r1
   24574:	bf28      	it	cs
   24576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   2457a:	bd30      	pop	{r4, r5, pc}
   2457c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   24580:	bf3c      	itt	cc
   24582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   24586:	bd30      	popcc	{r4, r5, pc}
   24588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   2458c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   24590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   24594:	f04f 0000 	mov.w	r0, #0
   24598:	bd30      	pop	{r4, r5, pc}
   2459a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   2459e:	bf1a      	itte	ne
   245a0:	4619      	movne	r1, r3
   245a2:	4610      	movne	r0, r2
   245a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   245a8:	bf1c      	itt	ne
   245aa:	460b      	movne	r3, r1
   245ac:	4602      	movne	r2, r0
   245ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   245b2:	bf06      	itte	eq
   245b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   245b8:	ea91 0f03 	teqeq	r1, r3
   245bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   245c0:	bd30      	pop	{r4, r5, pc}
   245c2:	bf00      	nop

000245c4 <__aeabi_ui2d>:
   245c4:	f090 0f00 	teq	r0, #0
   245c8:	bf04      	itt	eq
   245ca:	2100      	moveq	r1, #0
   245cc:	4770      	bxeq	lr
   245ce:	b530      	push	{r4, r5, lr}
   245d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   245d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   245d8:	f04f 0500 	mov.w	r5, #0
   245dc:	f04f 0100 	mov.w	r1, #0
   245e0:	e750      	b.n	24484 <__adddf3+0x138>
   245e2:	bf00      	nop

000245e4 <__aeabi_i2d>:
   245e4:	f090 0f00 	teq	r0, #0
   245e8:	bf04      	itt	eq
   245ea:	2100      	moveq	r1, #0
   245ec:	4770      	bxeq	lr
   245ee:	b530      	push	{r4, r5, lr}
   245f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   245f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   245f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   245fc:	bf48      	it	mi
   245fe:	4240      	negmi	r0, r0
   24600:	f04f 0100 	mov.w	r1, #0
   24604:	e73e      	b.n	24484 <__adddf3+0x138>
   24606:	bf00      	nop

00024608 <__aeabi_f2d>:
   24608:	0042      	lsls	r2, r0, #1
   2460a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   2460e:	ea4f 0131 	mov.w	r1, r1, rrx
   24612:	ea4f 7002 	mov.w	r0, r2, lsl #28
   24616:	bf1f      	itttt	ne
   24618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   2461c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   24620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   24624:	4770      	bxne	lr
   24626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   2462a:	bf08      	it	eq
   2462c:	4770      	bxeq	lr
   2462e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   24632:	bf04      	itt	eq
   24634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   24638:	4770      	bxeq	lr
   2463a:	b530      	push	{r4, r5, lr}
   2463c:	f44f 7460 	mov.w	r4, #896	; 0x380
   24640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   24644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   24648:	e71c      	b.n	24484 <__adddf3+0x138>
   2464a:	bf00      	nop

0002464c <__aeabi_ul2d>:
   2464c:	ea50 0201 	orrs.w	r2, r0, r1
   24650:	bf08      	it	eq
   24652:	4770      	bxeq	lr
   24654:	b530      	push	{r4, r5, lr}
   24656:	f04f 0500 	mov.w	r5, #0
   2465a:	e00a      	b.n	24672 <__aeabi_l2d+0x16>

0002465c <__aeabi_l2d>:
   2465c:	ea50 0201 	orrs.w	r2, r0, r1
   24660:	bf08      	it	eq
   24662:	4770      	bxeq	lr
   24664:	b530      	push	{r4, r5, lr}
   24666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   2466a:	d502      	bpl.n	24672 <__aeabi_l2d+0x16>
   2466c:	4240      	negs	r0, r0
   2466e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24672:	f44f 6480 	mov.w	r4, #1024	; 0x400
   24676:	f104 0432 	add.w	r4, r4, #50	; 0x32
   2467a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   2467e:	f43f aed8 	beq.w	24432 <__adddf3+0xe6>
   24682:	f04f 0203 	mov.w	r2, #3
   24686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   2468a:	bf18      	it	ne
   2468c:	3203      	addne	r2, #3
   2468e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   24692:	bf18      	it	ne
   24694:	3203      	addne	r2, #3
   24696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   2469a:	f1c2 0320 	rsb	r3, r2, #32
   2469e:	fa00 fc03 	lsl.w	ip, r0, r3
   246a2:	fa20 f002 	lsr.w	r0, r0, r2
   246a6:	fa01 fe03 	lsl.w	lr, r1, r3
   246aa:	ea40 000e 	orr.w	r0, r0, lr
   246ae:	fa21 f102 	lsr.w	r1, r1, r2
   246b2:	4414      	add	r4, r2
   246b4:	e6bd      	b.n	24432 <__adddf3+0xe6>
   246b6:	bf00      	nop

000246b8 <__aeabi_dmul>:
   246b8:	b570      	push	{r4, r5, r6, lr}
   246ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   246be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   246c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   246c6:	bf1d      	ittte	ne
   246c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   246cc:	ea94 0f0c 	teqne	r4, ip
   246d0:	ea95 0f0c 	teqne	r5, ip
   246d4:	f000 f8de 	bleq	24894 <__aeabi_dmul+0x1dc>
   246d8:	442c      	add	r4, r5
   246da:	ea81 0603 	eor.w	r6, r1, r3
   246de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   246e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   246e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   246ea:	bf18      	it	ne
   246ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   246f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   246f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   246f8:	d038      	beq.n	2476c <__aeabi_dmul+0xb4>
   246fa:	fba0 ce02 	umull	ip, lr, r0, r2
   246fe:	f04f 0500 	mov.w	r5, #0
   24702:	fbe1 e502 	umlal	lr, r5, r1, r2
   24706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   2470a:	fbe0 e503 	umlal	lr, r5, r0, r3
   2470e:	f04f 0600 	mov.w	r6, #0
   24712:	fbe1 5603 	umlal	r5, r6, r1, r3
   24716:	f09c 0f00 	teq	ip, #0
   2471a:	bf18      	it	ne
   2471c:	f04e 0e01 	orrne.w	lr, lr, #1
   24720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   24724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   24728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   2472c:	d204      	bcs.n	24738 <__aeabi_dmul+0x80>
   2472e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   24732:	416d      	adcs	r5, r5
   24734:	eb46 0606 	adc.w	r6, r6, r6
   24738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   2473c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   24740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   24744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   24748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   2474c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   24750:	bf88      	it	hi
   24752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   24756:	d81e      	bhi.n	24796 <__aeabi_dmul+0xde>
   24758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   2475c:	bf08      	it	eq
   2475e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   24762:	f150 0000 	adcs.w	r0, r0, #0
   24766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   2476a:	bd70      	pop	{r4, r5, r6, pc}
   2476c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   24770:	ea46 0101 	orr.w	r1, r6, r1
   24774:	ea40 0002 	orr.w	r0, r0, r2
   24778:	ea81 0103 	eor.w	r1, r1, r3
   2477c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   24780:	bfc2      	ittt	gt
   24782:	ebd4 050c 	rsbsgt	r5, r4, ip
   24786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   2478a:	bd70      	popgt	{r4, r5, r6, pc}
   2478c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   24790:	f04f 0e00 	mov.w	lr, #0
   24794:	3c01      	subs	r4, #1
   24796:	f300 80ab 	bgt.w	248f0 <__aeabi_dmul+0x238>
   2479a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   2479e:	bfde      	ittt	le
   247a0:	2000      	movle	r0, #0
   247a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   247a6:	bd70      	pople	{r4, r5, r6, pc}
   247a8:	f1c4 0400 	rsb	r4, r4, #0
   247ac:	3c20      	subs	r4, #32
   247ae:	da35      	bge.n	2481c <__aeabi_dmul+0x164>
   247b0:	340c      	adds	r4, #12
   247b2:	dc1b      	bgt.n	247ec <__aeabi_dmul+0x134>
   247b4:	f104 0414 	add.w	r4, r4, #20
   247b8:	f1c4 0520 	rsb	r5, r4, #32
   247bc:	fa00 f305 	lsl.w	r3, r0, r5
   247c0:	fa20 f004 	lsr.w	r0, r0, r4
   247c4:	fa01 f205 	lsl.w	r2, r1, r5
   247c8:	ea40 0002 	orr.w	r0, r0, r2
   247cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   247d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   247d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   247d8:	fa21 f604 	lsr.w	r6, r1, r4
   247dc:	eb42 0106 	adc.w	r1, r2, r6
   247e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   247e4:	bf08      	it	eq
   247e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   247ea:	bd70      	pop	{r4, r5, r6, pc}
   247ec:	f1c4 040c 	rsb	r4, r4, #12
   247f0:	f1c4 0520 	rsb	r5, r4, #32
   247f4:	fa00 f304 	lsl.w	r3, r0, r4
   247f8:	fa20 f005 	lsr.w	r0, r0, r5
   247fc:	fa01 f204 	lsl.w	r2, r1, r4
   24800:	ea40 0002 	orr.w	r0, r0, r2
   24804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   24808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   2480c:	f141 0100 	adc.w	r1, r1, #0
   24810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   24814:	bf08      	it	eq
   24816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   2481a:	bd70      	pop	{r4, r5, r6, pc}
   2481c:	f1c4 0520 	rsb	r5, r4, #32
   24820:	fa00 f205 	lsl.w	r2, r0, r5
   24824:	ea4e 0e02 	orr.w	lr, lr, r2
   24828:	fa20 f304 	lsr.w	r3, r0, r4
   2482c:	fa01 f205 	lsl.w	r2, r1, r5
   24830:	ea43 0302 	orr.w	r3, r3, r2
   24834:	fa21 f004 	lsr.w	r0, r1, r4
   24838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   2483c:	fa21 f204 	lsr.w	r2, r1, r4
   24840:	ea20 0002 	bic.w	r0, r0, r2
   24844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   24848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   2484c:	bf08      	it	eq
   2484e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   24852:	bd70      	pop	{r4, r5, r6, pc}
   24854:	f094 0f00 	teq	r4, #0
   24858:	d10f      	bne.n	2487a <__aeabi_dmul+0x1c2>
   2485a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   2485e:	0040      	lsls	r0, r0, #1
   24860:	eb41 0101 	adc.w	r1, r1, r1
   24864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   24868:	bf08      	it	eq
   2486a:	3c01      	subeq	r4, #1
   2486c:	d0f7      	beq.n	2485e <__aeabi_dmul+0x1a6>
   2486e:	ea41 0106 	orr.w	r1, r1, r6
   24872:	f095 0f00 	teq	r5, #0
   24876:	bf18      	it	ne
   24878:	4770      	bxne	lr
   2487a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   2487e:	0052      	lsls	r2, r2, #1
   24880:	eb43 0303 	adc.w	r3, r3, r3
   24884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   24888:	bf08      	it	eq
   2488a:	3d01      	subeq	r5, #1
   2488c:	d0f7      	beq.n	2487e <__aeabi_dmul+0x1c6>
   2488e:	ea43 0306 	orr.w	r3, r3, r6
   24892:	4770      	bx	lr
   24894:	ea94 0f0c 	teq	r4, ip
   24898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   2489c:	bf18      	it	ne
   2489e:	ea95 0f0c 	teqne	r5, ip
   248a2:	d00c      	beq.n	248be <__aeabi_dmul+0x206>
   248a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   248a8:	bf18      	it	ne
   248aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   248ae:	d1d1      	bne.n	24854 <__aeabi_dmul+0x19c>
   248b0:	ea81 0103 	eor.w	r1, r1, r3
   248b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   248b8:	f04f 0000 	mov.w	r0, #0
   248bc:	bd70      	pop	{r4, r5, r6, pc}
   248be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   248c2:	bf06      	itte	eq
   248c4:	4610      	moveq	r0, r2
   248c6:	4619      	moveq	r1, r3
   248c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   248cc:	d019      	beq.n	24902 <__aeabi_dmul+0x24a>
   248ce:	ea94 0f0c 	teq	r4, ip
   248d2:	d102      	bne.n	248da <__aeabi_dmul+0x222>
   248d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   248d8:	d113      	bne.n	24902 <__aeabi_dmul+0x24a>
   248da:	ea95 0f0c 	teq	r5, ip
   248de:	d105      	bne.n	248ec <__aeabi_dmul+0x234>
   248e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   248e4:	bf1c      	itt	ne
   248e6:	4610      	movne	r0, r2
   248e8:	4619      	movne	r1, r3
   248ea:	d10a      	bne.n	24902 <__aeabi_dmul+0x24a>
   248ec:	ea81 0103 	eor.w	r1, r1, r3
   248f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   248f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   248f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   248fc:	f04f 0000 	mov.w	r0, #0
   24900:	bd70      	pop	{r4, r5, r6, pc}
   24902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   24906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   2490a:	bd70      	pop	{r4, r5, r6, pc}

0002490c <__aeabi_ddiv>:
   2490c:	b570      	push	{r4, r5, r6, lr}
   2490e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   24912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   24916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   2491a:	bf1d      	ittte	ne
   2491c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   24920:	ea94 0f0c 	teqne	r4, ip
   24924:	ea95 0f0c 	teqne	r5, ip
   24928:	f000 f8a7 	bleq	24a7a <__aeabi_ddiv+0x16e>
   2492c:	eba4 0405 	sub.w	r4, r4, r5
   24930:	ea81 0e03 	eor.w	lr, r1, r3
   24934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   24938:	ea4f 3101 	mov.w	r1, r1, lsl #12
   2493c:	f000 8088 	beq.w	24a50 <__aeabi_ddiv+0x144>
   24940:	ea4f 3303 	mov.w	r3, r3, lsl #12
   24944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   24948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   2494c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   24950:	ea4f 2202 	mov.w	r2, r2, lsl #8
   24954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   24958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   2495c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   24960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   24964:	429d      	cmp	r5, r3
   24966:	bf08      	it	eq
   24968:	4296      	cmpeq	r6, r2
   2496a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   2496e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   24972:	d202      	bcs.n	2497a <__aeabi_ddiv+0x6e>
   24974:	085b      	lsrs	r3, r3, #1
   24976:	ea4f 0232 	mov.w	r2, r2, rrx
   2497a:	1ab6      	subs	r6, r6, r2
   2497c:	eb65 0503 	sbc.w	r5, r5, r3
   24980:	085b      	lsrs	r3, r3, #1
   24982:	ea4f 0232 	mov.w	r2, r2, rrx
   24986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   2498a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   2498e:	ebb6 0e02 	subs.w	lr, r6, r2
   24992:	eb75 0e03 	sbcs.w	lr, r5, r3
   24996:	bf22      	ittt	cs
   24998:	1ab6      	subcs	r6, r6, r2
   2499a:	4675      	movcs	r5, lr
   2499c:	ea40 000c 	orrcs.w	r0, r0, ip
   249a0:	085b      	lsrs	r3, r3, #1
   249a2:	ea4f 0232 	mov.w	r2, r2, rrx
   249a6:	ebb6 0e02 	subs.w	lr, r6, r2
   249aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   249ae:	bf22      	ittt	cs
   249b0:	1ab6      	subcs	r6, r6, r2
   249b2:	4675      	movcs	r5, lr
   249b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   249b8:	085b      	lsrs	r3, r3, #1
   249ba:	ea4f 0232 	mov.w	r2, r2, rrx
   249be:	ebb6 0e02 	subs.w	lr, r6, r2
   249c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   249c6:	bf22      	ittt	cs
   249c8:	1ab6      	subcs	r6, r6, r2
   249ca:	4675      	movcs	r5, lr
   249cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   249d0:	085b      	lsrs	r3, r3, #1
   249d2:	ea4f 0232 	mov.w	r2, r2, rrx
   249d6:	ebb6 0e02 	subs.w	lr, r6, r2
   249da:	eb75 0e03 	sbcs.w	lr, r5, r3
   249de:	bf22      	ittt	cs
   249e0:	1ab6      	subcs	r6, r6, r2
   249e2:	4675      	movcs	r5, lr
   249e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   249e8:	ea55 0e06 	orrs.w	lr, r5, r6
   249ec:	d018      	beq.n	24a20 <__aeabi_ddiv+0x114>
   249ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   249f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   249f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   249fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   249fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   24a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   24a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   24a0a:	d1c0      	bne.n	2498e <__aeabi_ddiv+0x82>
   24a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   24a10:	d10b      	bne.n	24a2a <__aeabi_ddiv+0x11e>
   24a12:	ea41 0100 	orr.w	r1, r1, r0
   24a16:	f04f 0000 	mov.w	r0, #0
   24a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   24a1e:	e7b6      	b.n	2498e <__aeabi_ddiv+0x82>
   24a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   24a24:	bf04      	itt	eq
   24a26:	4301      	orreq	r1, r0
   24a28:	2000      	moveq	r0, #0
   24a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   24a2e:	bf88      	it	hi
   24a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   24a34:	f63f aeaf 	bhi.w	24796 <__aeabi_dmul+0xde>
   24a38:	ebb5 0c03 	subs.w	ip, r5, r3
   24a3c:	bf04      	itt	eq
   24a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   24a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   24a46:	f150 0000 	adcs.w	r0, r0, #0
   24a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   24a4e:	bd70      	pop	{r4, r5, r6, pc}
   24a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   24a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   24a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   24a5c:	bfc2      	ittt	gt
   24a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   24a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   24a66:	bd70      	popgt	{r4, r5, r6, pc}
   24a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   24a6c:	f04f 0e00 	mov.w	lr, #0
   24a70:	3c01      	subs	r4, #1
   24a72:	e690      	b.n	24796 <__aeabi_dmul+0xde>
   24a74:	ea45 0e06 	orr.w	lr, r5, r6
   24a78:	e68d      	b.n	24796 <__aeabi_dmul+0xde>
   24a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   24a7e:	ea94 0f0c 	teq	r4, ip
   24a82:	bf08      	it	eq
   24a84:	ea95 0f0c 	teqeq	r5, ip
   24a88:	f43f af3b 	beq.w	24902 <__aeabi_dmul+0x24a>
   24a8c:	ea94 0f0c 	teq	r4, ip
   24a90:	d10a      	bne.n	24aa8 <__aeabi_ddiv+0x19c>
   24a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   24a96:	f47f af34 	bne.w	24902 <__aeabi_dmul+0x24a>
   24a9a:	ea95 0f0c 	teq	r5, ip
   24a9e:	f47f af25 	bne.w	248ec <__aeabi_dmul+0x234>
   24aa2:	4610      	mov	r0, r2
   24aa4:	4619      	mov	r1, r3
   24aa6:	e72c      	b.n	24902 <__aeabi_dmul+0x24a>
   24aa8:	ea95 0f0c 	teq	r5, ip
   24aac:	d106      	bne.n	24abc <__aeabi_ddiv+0x1b0>
   24aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   24ab2:	f43f aefd 	beq.w	248b0 <__aeabi_dmul+0x1f8>
   24ab6:	4610      	mov	r0, r2
   24ab8:	4619      	mov	r1, r3
   24aba:	e722      	b.n	24902 <__aeabi_dmul+0x24a>
   24abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   24ac0:	bf18      	it	ne
   24ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   24ac6:	f47f aec5 	bne.w	24854 <__aeabi_dmul+0x19c>
   24aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   24ace:	f47f af0d 	bne.w	248ec <__aeabi_dmul+0x234>
   24ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   24ad6:	f47f aeeb 	bne.w	248b0 <__aeabi_dmul+0x1f8>
   24ada:	e712      	b.n	24902 <__aeabi_dmul+0x24a>

00024adc <__gedf2>:
   24adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   24ae0:	e006      	b.n	24af0 <__cmpdf2+0x4>
   24ae2:	bf00      	nop

00024ae4 <__ledf2>:
   24ae4:	f04f 0c01 	mov.w	ip, #1
   24ae8:	e002      	b.n	24af0 <__cmpdf2+0x4>
   24aea:	bf00      	nop

00024aec <__cmpdf2>:
   24aec:	f04f 0c01 	mov.w	ip, #1
   24af0:	f84d cd04 	str.w	ip, [sp, #-4]!
   24af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   24af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   24b00:	bf18      	it	ne
   24b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   24b06:	d01b      	beq.n	24b40 <__cmpdf2+0x54>
   24b08:	b001      	add	sp, #4
   24b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   24b0e:	bf0c      	ite	eq
   24b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   24b14:	ea91 0f03 	teqne	r1, r3
   24b18:	bf02      	ittt	eq
   24b1a:	ea90 0f02 	teqeq	r0, r2
   24b1e:	2000      	moveq	r0, #0
   24b20:	4770      	bxeq	lr
   24b22:	f110 0f00 	cmn.w	r0, #0
   24b26:	ea91 0f03 	teq	r1, r3
   24b2a:	bf58      	it	pl
   24b2c:	4299      	cmppl	r1, r3
   24b2e:	bf08      	it	eq
   24b30:	4290      	cmpeq	r0, r2
   24b32:	bf2c      	ite	cs
   24b34:	17d8      	asrcs	r0, r3, #31
   24b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   24b3a:	f040 0001 	orr.w	r0, r0, #1
   24b3e:	4770      	bx	lr
   24b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   24b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24b48:	d102      	bne.n	24b50 <__cmpdf2+0x64>
   24b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   24b4e:	d107      	bne.n	24b60 <__cmpdf2+0x74>
   24b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   24b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24b58:	d1d6      	bne.n	24b08 <__cmpdf2+0x1c>
   24b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   24b5e:	d0d3      	beq.n	24b08 <__cmpdf2+0x1c>
   24b60:	f85d 0b04 	ldr.w	r0, [sp], #4
   24b64:	4770      	bx	lr
   24b66:	bf00      	nop

00024b68 <__aeabi_cdrcmple>:
   24b68:	4684      	mov	ip, r0
   24b6a:	4610      	mov	r0, r2
   24b6c:	4662      	mov	r2, ip
   24b6e:	468c      	mov	ip, r1
   24b70:	4619      	mov	r1, r3
   24b72:	4663      	mov	r3, ip
   24b74:	e000      	b.n	24b78 <__aeabi_cdcmpeq>
   24b76:	bf00      	nop

00024b78 <__aeabi_cdcmpeq>:
   24b78:	b501      	push	{r0, lr}
   24b7a:	f7ff ffb7 	bl	24aec <__cmpdf2>
   24b7e:	2800      	cmp	r0, #0
   24b80:	bf48      	it	mi
   24b82:	f110 0f00 	cmnmi.w	r0, #0
   24b86:	bd01      	pop	{r0, pc}

00024b88 <__aeabi_dcmpeq>:
   24b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   24b8c:	f7ff fff4 	bl	24b78 <__aeabi_cdcmpeq>
   24b90:	bf0c      	ite	eq
   24b92:	2001      	moveq	r0, #1
   24b94:	2000      	movne	r0, #0
   24b96:	f85d fb08 	ldr.w	pc, [sp], #8
   24b9a:	bf00      	nop

00024b9c <__aeabi_dcmplt>:
   24b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   24ba0:	f7ff ffea 	bl	24b78 <__aeabi_cdcmpeq>
   24ba4:	bf34      	ite	cc
   24ba6:	2001      	movcc	r0, #1
   24ba8:	2000      	movcs	r0, #0
   24baa:	f85d fb08 	ldr.w	pc, [sp], #8
   24bae:	bf00      	nop

00024bb0 <__aeabi_dcmple>:
   24bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   24bb4:	f7ff ffe0 	bl	24b78 <__aeabi_cdcmpeq>
   24bb8:	bf94      	ite	ls
   24bba:	2001      	movls	r0, #1
   24bbc:	2000      	movhi	r0, #0
   24bbe:	f85d fb08 	ldr.w	pc, [sp], #8
   24bc2:	bf00      	nop

00024bc4 <__aeabi_dcmpge>:
   24bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   24bc8:	f7ff ffce 	bl	24b68 <__aeabi_cdrcmple>
   24bcc:	bf94      	ite	ls
   24bce:	2001      	movls	r0, #1
   24bd0:	2000      	movhi	r0, #0
   24bd2:	f85d fb08 	ldr.w	pc, [sp], #8
   24bd6:	bf00      	nop

00024bd8 <__aeabi_dcmpgt>:
   24bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   24bdc:	f7ff ffc4 	bl	24b68 <__aeabi_cdrcmple>
   24be0:	bf34      	ite	cc
   24be2:	2001      	movcc	r0, #1
   24be4:	2000      	movcs	r0, #0
   24be6:	f85d fb08 	ldr.w	pc, [sp], #8
   24bea:	bf00      	nop

00024bec <__aeabi_dcmpun>:
   24bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   24bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24bf4:	d102      	bne.n	24bfc <__aeabi_dcmpun+0x10>
   24bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   24bfa:	d10a      	bne.n	24c12 <__aeabi_dcmpun+0x26>
   24bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   24c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24c04:	d102      	bne.n	24c0c <__aeabi_dcmpun+0x20>
   24c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   24c0a:	d102      	bne.n	24c12 <__aeabi_dcmpun+0x26>
   24c0c:	f04f 0000 	mov.w	r0, #0
   24c10:	4770      	bx	lr
   24c12:	f04f 0001 	mov.w	r0, #1
   24c16:	4770      	bx	lr

00024c18 <__aeabi_d2iz>:
   24c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   24c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   24c20:	d215      	bcs.n	24c4e <__aeabi_d2iz+0x36>
   24c22:	d511      	bpl.n	24c48 <__aeabi_d2iz+0x30>
   24c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   24c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   24c2c:	d912      	bls.n	24c54 <__aeabi_d2iz+0x3c>
   24c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   24c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   24c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   24c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   24c3e:	fa23 f002 	lsr.w	r0, r3, r2
   24c42:	bf18      	it	ne
   24c44:	4240      	negne	r0, r0
   24c46:	4770      	bx	lr
   24c48:	f04f 0000 	mov.w	r0, #0
   24c4c:	4770      	bx	lr
   24c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   24c52:	d105      	bne.n	24c60 <__aeabi_d2iz+0x48>
   24c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   24c58:	bf08      	it	eq
   24c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   24c5e:	4770      	bx	lr
   24c60:	f04f 0000 	mov.w	r0, #0
   24c64:	4770      	bx	lr
   24c66:	bf00      	nop

00024c68 <__aeabi_d2uiz>:
   24c68:	004a      	lsls	r2, r1, #1
   24c6a:	d211      	bcs.n	24c90 <__aeabi_d2uiz+0x28>
   24c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   24c70:	d211      	bcs.n	24c96 <__aeabi_d2uiz+0x2e>
   24c72:	d50d      	bpl.n	24c90 <__aeabi_d2uiz+0x28>
   24c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   24c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   24c7c:	d40e      	bmi.n	24c9c <__aeabi_d2uiz+0x34>
   24c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   24c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   24c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   24c8a:	fa23 f002 	lsr.w	r0, r3, r2
   24c8e:	4770      	bx	lr
   24c90:	f04f 0000 	mov.w	r0, #0
   24c94:	4770      	bx	lr
   24c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   24c9a:	d102      	bne.n	24ca2 <__aeabi_d2uiz+0x3a>
   24c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24ca0:	4770      	bx	lr
   24ca2:	f04f 0000 	mov.w	r0, #0
   24ca6:	4770      	bx	lr

00024ca8 <__aeabi_d2f>:
   24ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   24cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   24cb0:	bf24      	itt	cs
   24cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   24cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   24cba:	d90d      	bls.n	24cd8 <__aeabi_d2f+0x30>
   24cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   24cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   24cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   24cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   24ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   24cd0:	bf08      	it	eq
   24cd2:	f020 0001 	biceq.w	r0, r0, #1
   24cd6:	4770      	bx	lr
   24cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   24cdc:	d121      	bne.n	24d22 <__aeabi_d2f+0x7a>
   24cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   24ce2:	bfbc      	itt	lt
   24ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   24ce8:	4770      	bxlt	lr
   24cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   24cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   24cf2:	f1c2 0218 	rsb	r2, r2, #24
   24cf6:	f1c2 0c20 	rsb	ip, r2, #32
   24cfa:	fa10 f30c 	lsls.w	r3, r0, ip
   24cfe:	fa20 f002 	lsr.w	r0, r0, r2
   24d02:	bf18      	it	ne
   24d04:	f040 0001 	orrne.w	r0, r0, #1
   24d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   24d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   24d10:	fa03 fc0c 	lsl.w	ip, r3, ip
   24d14:	ea40 000c 	orr.w	r0, r0, ip
   24d18:	fa23 f302 	lsr.w	r3, r3, r2
   24d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24d20:	e7cc      	b.n	24cbc <__aeabi_d2f+0x14>
   24d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   24d26:	d107      	bne.n	24d38 <__aeabi_d2f+0x90>
   24d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   24d2c:	bf1e      	ittt	ne
   24d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   24d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   24d36:	4770      	bxne	lr
   24d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   24d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   24d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   24d44:	4770      	bx	lr
   24d46:	bf00      	nop

00024d48 <__aeabi_frsub>:
   24d48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   24d4c:	e002      	b.n	24d54 <__addsf3>
   24d4e:	bf00      	nop

00024d50 <__aeabi_fsub>:
   24d50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00024d54 <__addsf3>:
   24d54:	0042      	lsls	r2, r0, #1
   24d56:	bf1f      	itttt	ne
   24d58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   24d5c:	ea92 0f03 	teqne	r2, r3
   24d60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   24d64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   24d68:	d06a      	beq.n	24e40 <__addsf3+0xec>
   24d6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   24d6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   24d72:	bfc1      	itttt	gt
   24d74:	18d2      	addgt	r2, r2, r3
   24d76:	4041      	eorgt	r1, r0
   24d78:	4048      	eorgt	r0, r1
   24d7a:	4041      	eorgt	r1, r0
   24d7c:	bfb8      	it	lt
   24d7e:	425b      	neglt	r3, r3
   24d80:	2b19      	cmp	r3, #25
   24d82:	bf88      	it	hi
   24d84:	4770      	bxhi	lr
   24d86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   24d8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   24d8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   24d92:	bf18      	it	ne
   24d94:	4240      	negne	r0, r0
   24d96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   24d9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   24d9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   24da2:	bf18      	it	ne
   24da4:	4249      	negne	r1, r1
   24da6:	ea92 0f03 	teq	r2, r3
   24daa:	d03f      	beq.n	24e2c <__addsf3+0xd8>
   24dac:	f1a2 0201 	sub.w	r2, r2, #1
   24db0:	fa41 fc03 	asr.w	ip, r1, r3
   24db4:	eb10 000c 	adds.w	r0, r0, ip
   24db8:	f1c3 0320 	rsb	r3, r3, #32
   24dbc:	fa01 f103 	lsl.w	r1, r1, r3
   24dc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   24dc4:	d502      	bpl.n	24dcc <__addsf3+0x78>
   24dc6:	4249      	negs	r1, r1
   24dc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   24dcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   24dd0:	d313      	bcc.n	24dfa <__addsf3+0xa6>
   24dd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   24dd6:	d306      	bcc.n	24de6 <__addsf3+0x92>
   24dd8:	0840      	lsrs	r0, r0, #1
   24dda:	ea4f 0131 	mov.w	r1, r1, rrx
   24dde:	f102 0201 	add.w	r2, r2, #1
   24de2:	2afe      	cmp	r2, #254	; 0xfe
   24de4:	d251      	bcs.n	24e8a <__addsf3+0x136>
   24de6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   24dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   24dee:	bf08      	it	eq
   24df0:	f020 0001 	biceq.w	r0, r0, #1
   24df4:	ea40 0003 	orr.w	r0, r0, r3
   24df8:	4770      	bx	lr
   24dfa:	0049      	lsls	r1, r1, #1
   24dfc:	eb40 0000 	adc.w	r0, r0, r0
   24e00:	3a01      	subs	r2, #1
   24e02:	bf28      	it	cs
   24e04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   24e08:	d2ed      	bcs.n	24de6 <__addsf3+0x92>
   24e0a:	fab0 fc80 	clz	ip, r0
   24e0e:	f1ac 0c08 	sub.w	ip, ip, #8
   24e12:	ebb2 020c 	subs.w	r2, r2, ip
   24e16:	fa00 f00c 	lsl.w	r0, r0, ip
   24e1a:	bfaa      	itet	ge
   24e1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   24e20:	4252      	neglt	r2, r2
   24e22:	4318      	orrge	r0, r3
   24e24:	bfbc      	itt	lt
   24e26:	40d0      	lsrlt	r0, r2
   24e28:	4318      	orrlt	r0, r3
   24e2a:	4770      	bx	lr
   24e2c:	f092 0f00 	teq	r2, #0
   24e30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   24e34:	bf06      	itte	eq
   24e36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   24e3a:	3201      	addeq	r2, #1
   24e3c:	3b01      	subne	r3, #1
   24e3e:	e7b5      	b.n	24dac <__addsf3+0x58>
   24e40:	ea4f 0341 	mov.w	r3, r1, lsl #1
   24e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   24e48:	bf18      	it	ne
   24e4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   24e4e:	d021      	beq.n	24e94 <__addsf3+0x140>
   24e50:	ea92 0f03 	teq	r2, r3
   24e54:	d004      	beq.n	24e60 <__addsf3+0x10c>
   24e56:	f092 0f00 	teq	r2, #0
   24e5a:	bf08      	it	eq
   24e5c:	4608      	moveq	r0, r1
   24e5e:	4770      	bx	lr
   24e60:	ea90 0f01 	teq	r0, r1
   24e64:	bf1c      	itt	ne
   24e66:	2000      	movne	r0, #0
   24e68:	4770      	bxne	lr
   24e6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   24e6e:	d104      	bne.n	24e7a <__addsf3+0x126>
   24e70:	0040      	lsls	r0, r0, #1
   24e72:	bf28      	it	cs
   24e74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   24e78:	4770      	bx	lr
   24e7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   24e7e:	bf3c      	itt	cc
   24e80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   24e84:	4770      	bxcc	lr
   24e86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   24e8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   24e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   24e92:	4770      	bx	lr
   24e94:	ea7f 6222 	mvns.w	r2, r2, asr #24
   24e98:	bf16      	itet	ne
   24e9a:	4608      	movne	r0, r1
   24e9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   24ea0:	4601      	movne	r1, r0
   24ea2:	0242      	lsls	r2, r0, #9
   24ea4:	bf06      	itte	eq
   24ea6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   24eaa:	ea90 0f01 	teqeq	r0, r1
   24eae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   24eb2:	4770      	bx	lr

00024eb4 <__aeabi_ui2f>:
   24eb4:	f04f 0300 	mov.w	r3, #0
   24eb8:	e004      	b.n	24ec4 <__aeabi_i2f+0x8>
   24eba:	bf00      	nop

00024ebc <__aeabi_i2f>:
   24ebc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   24ec0:	bf48      	it	mi
   24ec2:	4240      	negmi	r0, r0
   24ec4:	ea5f 0c00 	movs.w	ip, r0
   24ec8:	bf08      	it	eq
   24eca:	4770      	bxeq	lr
   24ecc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   24ed0:	4601      	mov	r1, r0
   24ed2:	f04f 0000 	mov.w	r0, #0
   24ed6:	e01c      	b.n	24f12 <__aeabi_l2f+0x2a>

00024ed8 <__aeabi_ul2f>:
   24ed8:	ea50 0201 	orrs.w	r2, r0, r1
   24edc:	bf08      	it	eq
   24ede:	4770      	bxeq	lr
   24ee0:	f04f 0300 	mov.w	r3, #0
   24ee4:	e00a      	b.n	24efc <__aeabi_l2f+0x14>
   24ee6:	bf00      	nop

00024ee8 <__aeabi_l2f>:
   24ee8:	ea50 0201 	orrs.w	r2, r0, r1
   24eec:	bf08      	it	eq
   24eee:	4770      	bxeq	lr
   24ef0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   24ef4:	d502      	bpl.n	24efc <__aeabi_l2f+0x14>
   24ef6:	4240      	negs	r0, r0
   24ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24efc:	ea5f 0c01 	movs.w	ip, r1
   24f00:	bf02      	ittt	eq
   24f02:	4684      	moveq	ip, r0
   24f04:	4601      	moveq	r1, r0
   24f06:	2000      	moveq	r0, #0
   24f08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   24f0c:	bf08      	it	eq
   24f0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   24f12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   24f16:	fabc f28c 	clz	r2, ip
   24f1a:	3a08      	subs	r2, #8
   24f1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   24f20:	db10      	blt.n	24f44 <__aeabi_l2f+0x5c>
   24f22:	fa01 fc02 	lsl.w	ip, r1, r2
   24f26:	4463      	add	r3, ip
   24f28:	fa00 fc02 	lsl.w	ip, r0, r2
   24f2c:	f1c2 0220 	rsb	r2, r2, #32
   24f30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   24f34:	fa20 f202 	lsr.w	r2, r0, r2
   24f38:	eb43 0002 	adc.w	r0, r3, r2
   24f3c:	bf08      	it	eq
   24f3e:	f020 0001 	biceq.w	r0, r0, #1
   24f42:	4770      	bx	lr
   24f44:	f102 0220 	add.w	r2, r2, #32
   24f48:	fa01 fc02 	lsl.w	ip, r1, r2
   24f4c:	f1c2 0220 	rsb	r2, r2, #32
   24f50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   24f54:	fa21 f202 	lsr.w	r2, r1, r2
   24f58:	eb43 0002 	adc.w	r0, r3, r2
   24f5c:	bf08      	it	eq
   24f5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   24f62:	4770      	bx	lr

00024f64 <__aeabi_ldivmod>:
   24f64:	b97b      	cbnz	r3, 24f86 <__aeabi_ldivmod+0x22>
   24f66:	b972      	cbnz	r2, 24f86 <__aeabi_ldivmod+0x22>
   24f68:	2900      	cmp	r1, #0
   24f6a:	bfbe      	ittt	lt
   24f6c:	2000      	movlt	r0, #0
   24f6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   24f72:	e006      	blt.n	24f82 <__aeabi_ldivmod+0x1e>
   24f74:	bf08      	it	eq
   24f76:	2800      	cmpeq	r0, #0
   24f78:	bf1c      	itt	ne
   24f7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   24f7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   24f82:	f000 ba15 	b.w	253b0 <__aeabi_idiv0>
   24f86:	f1ad 0c08 	sub.w	ip, sp, #8
   24f8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   24f8e:	2900      	cmp	r1, #0
   24f90:	db09      	blt.n	24fa6 <__aeabi_ldivmod+0x42>
   24f92:	2b00      	cmp	r3, #0
   24f94:	db1a      	blt.n	24fcc <__aeabi_ldivmod+0x68>
   24f96:	f000 f8a3 	bl	250e0 <__udivmoddi4>
   24f9a:	f8dd e004 	ldr.w	lr, [sp, #4]
   24f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24fa2:	b004      	add	sp, #16
   24fa4:	4770      	bx	lr
   24fa6:	4240      	negs	r0, r0
   24fa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24fac:	2b00      	cmp	r3, #0
   24fae:	db1b      	blt.n	24fe8 <__aeabi_ldivmod+0x84>
   24fb0:	f000 f896 	bl	250e0 <__udivmoddi4>
   24fb4:	f8dd e004 	ldr.w	lr, [sp, #4]
   24fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24fbc:	b004      	add	sp, #16
   24fbe:	4240      	negs	r0, r0
   24fc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24fc4:	4252      	negs	r2, r2
   24fc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   24fca:	4770      	bx	lr
   24fcc:	4252      	negs	r2, r2
   24fce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   24fd2:	f000 f885 	bl	250e0 <__udivmoddi4>
   24fd6:	f8dd e004 	ldr.w	lr, [sp, #4]
   24fda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24fde:	b004      	add	sp, #16
   24fe0:	4240      	negs	r0, r0
   24fe2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24fe6:	4770      	bx	lr
   24fe8:	4252      	negs	r2, r2
   24fea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   24fee:	f000 f877 	bl	250e0 <__udivmoddi4>
   24ff2:	f8dd e004 	ldr.w	lr, [sp, #4]
   24ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24ffa:	b004      	add	sp, #16
   24ffc:	4252      	negs	r2, r2
   24ffe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25002:	4770      	bx	lr

00025004 <__aeabi_uldivmod>:
   25004:	b953      	cbnz	r3, 2501c <__aeabi_uldivmod+0x18>
   25006:	b94a      	cbnz	r2, 2501c <__aeabi_uldivmod+0x18>
   25008:	2900      	cmp	r1, #0
   2500a:	bf08      	it	eq
   2500c:	2800      	cmpeq	r0, #0
   2500e:	bf1c      	itt	ne
   25010:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   25014:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   25018:	f000 b9ca 	b.w	253b0 <__aeabi_idiv0>
   2501c:	f1ad 0c08 	sub.w	ip, sp, #8
   25020:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   25024:	f000 f85c 	bl	250e0 <__udivmoddi4>
   25028:	f8dd e004 	ldr.w	lr, [sp, #4]
   2502c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   25030:	b004      	add	sp, #16
   25032:	4770      	bx	lr

00025034 <__aeabi_d2lz>:
   25034:	b538      	push	{r3, r4, r5, lr}
   25036:	2200      	movs	r2, #0
   25038:	2300      	movs	r3, #0
   2503a:	4604      	mov	r4, r0
   2503c:	460d      	mov	r5, r1
   2503e:	f7ff fdad 	bl	24b9c <__aeabi_dcmplt>
   25042:	b928      	cbnz	r0, 25050 <__aeabi_d2lz+0x1c>
   25044:	4620      	mov	r0, r4
   25046:	4629      	mov	r1, r5
   25048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2504c:	f000 b82a 	b.w	250a4 <__aeabi_d2ulz>
   25050:	4620      	mov	r0, r4
   25052:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   25056:	f000 f825 	bl	250a4 <__aeabi_d2ulz>
   2505a:	4240      	negs	r0, r0
   2505c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   25060:	bd38      	pop	{r3, r4, r5, pc}
   25062:	bf00      	nop

00025064 <__aeabi_f2ulz>:
   25064:	b5d0      	push	{r4, r6, r7, lr}
   25066:	f7ff facf 	bl	24608 <__aeabi_f2d>
   2506a:	4b0c      	ldr	r3, [pc, #48]	; (2509c <__aeabi_f2ulz+0x38>)
   2506c:	2200      	movs	r2, #0
   2506e:	4606      	mov	r6, r0
   25070:	460f      	mov	r7, r1
   25072:	f7ff fb21 	bl	246b8 <__aeabi_dmul>
   25076:	f7ff fdf7 	bl	24c68 <__aeabi_d2uiz>
   2507a:	4604      	mov	r4, r0
   2507c:	f7ff faa2 	bl	245c4 <__aeabi_ui2d>
   25080:	4b07      	ldr	r3, [pc, #28]	; (250a0 <__aeabi_f2ulz+0x3c>)
   25082:	2200      	movs	r2, #0
   25084:	f7ff fb18 	bl	246b8 <__aeabi_dmul>
   25088:	4602      	mov	r2, r0
   2508a:	460b      	mov	r3, r1
   2508c:	4630      	mov	r0, r6
   2508e:	4639      	mov	r1, r7
   25090:	f7ff f95a 	bl	24348 <__aeabi_dsub>
   25094:	f7ff fde8 	bl	24c68 <__aeabi_d2uiz>
   25098:	4621      	mov	r1, r4
   2509a:	bdd0      	pop	{r4, r6, r7, pc}
   2509c:	3df00000 	.word	0x3df00000
   250a0:	41f00000 	.word	0x41f00000

000250a4 <__aeabi_d2ulz>:
   250a4:	b5d0      	push	{r4, r6, r7, lr}
   250a6:	4b0c      	ldr	r3, [pc, #48]	; (250d8 <__aeabi_d2ulz+0x34>)
   250a8:	2200      	movs	r2, #0
   250aa:	4606      	mov	r6, r0
   250ac:	460f      	mov	r7, r1
   250ae:	f7ff fb03 	bl	246b8 <__aeabi_dmul>
   250b2:	f7ff fdd9 	bl	24c68 <__aeabi_d2uiz>
   250b6:	4604      	mov	r4, r0
   250b8:	f7ff fa84 	bl	245c4 <__aeabi_ui2d>
   250bc:	4b07      	ldr	r3, [pc, #28]	; (250dc <__aeabi_d2ulz+0x38>)
   250be:	2200      	movs	r2, #0
   250c0:	f7ff fafa 	bl	246b8 <__aeabi_dmul>
   250c4:	4602      	mov	r2, r0
   250c6:	460b      	mov	r3, r1
   250c8:	4630      	mov	r0, r6
   250ca:	4639      	mov	r1, r7
   250cc:	f7ff f93c 	bl	24348 <__aeabi_dsub>
   250d0:	f7ff fdca 	bl	24c68 <__aeabi_d2uiz>
   250d4:	4621      	mov	r1, r4
   250d6:	bdd0      	pop	{r4, r6, r7, pc}
   250d8:	3df00000 	.word	0x3df00000
   250dc:	41f00000 	.word	0x41f00000

000250e0 <__udivmoddi4>:
   250e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   250e4:	9d08      	ldr	r5, [sp, #32]
   250e6:	4604      	mov	r4, r0
   250e8:	468e      	mov	lr, r1
   250ea:	2b00      	cmp	r3, #0
   250ec:	d14d      	bne.n	2518a <__udivmoddi4+0xaa>
   250ee:	428a      	cmp	r2, r1
   250f0:	4694      	mov	ip, r2
   250f2:	d969      	bls.n	251c8 <__udivmoddi4+0xe8>
   250f4:	fab2 f282 	clz	r2, r2
   250f8:	b152      	cbz	r2, 25110 <__udivmoddi4+0x30>
   250fa:	fa01 f302 	lsl.w	r3, r1, r2
   250fe:	f1c2 0120 	rsb	r1, r2, #32
   25102:	fa20 f101 	lsr.w	r1, r0, r1
   25106:	fa0c fc02 	lsl.w	ip, ip, r2
   2510a:	ea41 0e03 	orr.w	lr, r1, r3
   2510e:	4094      	lsls	r4, r2
   25110:	ea4f 481c 	mov.w	r8, ip, lsr #16
   25114:	0c21      	lsrs	r1, r4, #16
   25116:	fbbe f6f8 	udiv	r6, lr, r8
   2511a:	fa1f f78c 	uxth.w	r7, ip
   2511e:	fb08 e316 	mls	r3, r8, r6, lr
   25122:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   25126:	fb06 f107 	mul.w	r1, r6, r7
   2512a:	4299      	cmp	r1, r3
   2512c:	d90a      	bls.n	25144 <__udivmoddi4+0x64>
   2512e:	eb1c 0303 	adds.w	r3, ip, r3
   25132:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   25136:	f080 811f 	bcs.w	25378 <__udivmoddi4+0x298>
   2513a:	4299      	cmp	r1, r3
   2513c:	f240 811c 	bls.w	25378 <__udivmoddi4+0x298>
   25140:	3e02      	subs	r6, #2
   25142:	4463      	add	r3, ip
   25144:	1a5b      	subs	r3, r3, r1
   25146:	b2a4      	uxth	r4, r4
   25148:	fbb3 f0f8 	udiv	r0, r3, r8
   2514c:	fb08 3310 	mls	r3, r8, r0, r3
   25150:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   25154:	fb00 f707 	mul.w	r7, r0, r7
   25158:	42a7      	cmp	r7, r4
   2515a:	d90a      	bls.n	25172 <__udivmoddi4+0x92>
   2515c:	eb1c 0404 	adds.w	r4, ip, r4
   25160:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   25164:	f080 810a 	bcs.w	2537c <__udivmoddi4+0x29c>
   25168:	42a7      	cmp	r7, r4
   2516a:	f240 8107 	bls.w	2537c <__udivmoddi4+0x29c>
   2516e:	4464      	add	r4, ip
   25170:	3802      	subs	r0, #2
   25172:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   25176:	1be4      	subs	r4, r4, r7
   25178:	2600      	movs	r6, #0
   2517a:	b11d      	cbz	r5, 25184 <__udivmoddi4+0xa4>
   2517c:	40d4      	lsrs	r4, r2
   2517e:	2300      	movs	r3, #0
   25180:	e9c5 4300 	strd	r4, r3, [r5]
   25184:	4631      	mov	r1, r6
   25186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2518a:	428b      	cmp	r3, r1
   2518c:	d909      	bls.n	251a2 <__udivmoddi4+0xc2>
   2518e:	2d00      	cmp	r5, #0
   25190:	f000 80ef 	beq.w	25372 <__udivmoddi4+0x292>
   25194:	2600      	movs	r6, #0
   25196:	e9c5 0100 	strd	r0, r1, [r5]
   2519a:	4630      	mov	r0, r6
   2519c:	4631      	mov	r1, r6
   2519e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   251a2:	fab3 f683 	clz	r6, r3
   251a6:	2e00      	cmp	r6, #0
   251a8:	d14a      	bne.n	25240 <__udivmoddi4+0x160>
   251aa:	428b      	cmp	r3, r1
   251ac:	d302      	bcc.n	251b4 <__udivmoddi4+0xd4>
   251ae:	4282      	cmp	r2, r0
   251b0:	f200 80f9 	bhi.w	253a6 <__udivmoddi4+0x2c6>
   251b4:	1a84      	subs	r4, r0, r2
   251b6:	eb61 0303 	sbc.w	r3, r1, r3
   251ba:	2001      	movs	r0, #1
   251bc:	469e      	mov	lr, r3
   251be:	2d00      	cmp	r5, #0
   251c0:	d0e0      	beq.n	25184 <__udivmoddi4+0xa4>
   251c2:	e9c5 4e00 	strd	r4, lr, [r5]
   251c6:	e7dd      	b.n	25184 <__udivmoddi4+0xa4>
   251c8:	b902      	cbnz	r2, 251cc <__udivmoddi4+0xec>
   251ca:	deff      	udf	#255	; 0xff
   251cc:	fab2 f282 	clz	r2, r2
   251d0:	2a00      	cmp	r2, #0
   251d2:	f040 8092 	bne.w	252fa <__udivmoddi4+0x21a>
   251d6:	eba1 010c 	sub.w	r1, r1, ip
   251da:	ea4f 471c 	mov.w	r7, ip, lsr #16
   251de:	fa1f fe8c 	uxth.w	lr, ip
   251e2:	2601      	movs	r6, #1
   251e4:	0c20      	lsrs	r0, r4, #16
   251e6:	fbb1 f3f7 	udiv	r3, r1, r7
   251ea:	fb07 1113 	mls	r1, r7, r3, r1
   251ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   251f2:	fb0e f003 	mul.w	r0, lr, r3
   251f6:	4288      	cmp	r0, r1
   251f8:	d908      	bls.n	2520c <__udivmoddi4+0x12c>
   251fa:	eb1c 0101 	adds.w	r1, ip, r1
   251fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   25202:	d202      	bcs.n	2520a <__udivmoddi4+0x12a>
   25204:	4288      	cmp	r0, r1
   25206:	f200 80cb 	bhi.w	253a0 <__udivmoddi4+0x2c0>
   2520a:	4643      	mov	r3, r8
   2520c:	1a09      	subs	r1, r1, r0
   2520e:	b2a4      	uxth	r4, r4
   25210:	fbb1 f0f7 	udiv	r0, r1, r7
   25214:	fb07 1110 	mls	r1, r7, r0, r1
   25218:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   2521c:	fb0e fe00 	mul.w	lr, lr, r0
   25220:	45a6      	cmp	lr, r4
   25222:	d908      	bls.n	25236 <__udivmoddi4+0x156>
   25224:	eb1c 0404 	adds.w	r4, ip, r4
   25228:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   2522c:	d202      	bcs.n	25234 <__udivmoddi4+0x154>
   2522e:	45a6      	cmp	lr, r4
   25230:	f200 80bb 	bhi.w	253aa <__udivmoddi4+0x2ca>
   25234:	4608      	mov	r0, r1
   25236:	eba4 040e 	sub.w	r4, r4, lr
   2523a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   2523e:	e79c      	b.n	2517a <__udivmoddi4+0x9a>
   25240:	f1c6 0720 	rsb	r7, r6, #32
   25244:	40b3      	lsls	r3, r6
   25246:	fa22 fc07 	lsr.w	ip, r2, r7
   2524a:	ea4c 0c03 	orr.w	ip, ip, r3
   2524e:	fa20 f407 	lsr.w	r4, r0, r7
   25252:	fa01 f306 	lsl.w	r3, r1, r6
   25256:	431c      	orrs	r4, r3
   25258:	40f9      	lsrs	r1, r7
   2525a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   2525e:	fa00 f306 	lsl.w	r3, r0, r6
   25262:	fbb1 f8f9 	udiv	r8, r1, r9
   25266:	0c20      	lsrs	r0, r4, #16
   25268:	fa1f fe8c 	uxth.w	lr, ip
   2526c:	fb09 1118 	mls	r1, r9, r8, r1
   25270:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   25274:	fb08 f00e 	mul.w	r0, r8, lr
   25278:	4288      	cmp	r0, r1
   2527a:	fa02 f206 	lsl.w	r2, r2, r6
   2527e:	d90b      	bls.n	25298 <__udivmoddi4+0x1b8>
   25280:	eb1c 0101 	adds.w	r1, ip, r1
   25284:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   25288:	f080 8088 	bcs.w	2539c <__udivmoddi4+0x2bc>
   2528c:	4288      	cmp	r0, r1
   2528e:	f240 8085 	bls.w	2539c <__udivmoddi4+0x2bc>
   25292:	f1a8 0802 	sub.w	r8, r8, #2
   25296:	4461      	add	r1, ip
   25298:	1a09      	subs	r1, r1, r0
   2529a:	b2a4      	uxth	r4, r4
   2529c:	fbb1 f0f9 	udiv	r0, r1, r9
   252a0:	fb09 1110 	mls	r1, r9, r0, r1
   252a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   252a8:	fb00 fe0e 	mul.w	lr, r0, lr
   252ac:	458e      	cmp	lr, r1
   252ae:	d908      	bls.n	252c2 <__udivmoddi4+0x1e2>
   252b0:	eb1c 0101 	adds.w	r1, ip, r1
   252b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   252b8:	d26c      	bcs.n	25394 <__udivmoddi4+0x2b4>
   252ba:	458e      	cmp	lr, r1
   252bc:	d96a      	bls.n	25394 <__udivmoddi4+0x2b4>
   252be:	3802      	subs	r0, #2
   252c0:	4461      	add	r1, ip
   252c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   252c6:	fba0 9402 	umull	r9, r4, r0, r2
   252ca:	eba1 010e 	sub.w	r1, r1, lr
   252ce:	42a1      	cmp	r1, r4
   252d0:	46c8      	mov	r8, r9
   252d2:	46a6      	mov	lr, r4
   252d4:	d356      	bcc.n	25384 <__udivmoddi4+0x2a4>
   252d6:	d053      	beq.n	25380 <__udivmoddi4+0x2a0>
   252d8:	b15d      	cbz	r5, 252f2 <__udivmoddi4+0x212>
   252da:	ebb3 0208 	subs.w	r2, r3, r8
   252de:	eb61 010e 	sbc.w	r1, r1, lr
   252e2:	fa01 f707 	lsl.w	r7, r1, r7
   252e6:	fa22 f306 	lsr.w	r3, r2, r6
   252ea:	40f1      	lsrs	r1, r6
   252ec:	431f      	orrs	r7, r3
   252ee:	e9c5 7100 	strd	r7, r1, [r5]
   252f2:	2600      	movs	r6, #0
   252f4:	4631      	mov	r1, r6
   252f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   252fa:	f1c2 0320 	rsb	r3, r2, #32
   252fe:	40d8      	lsrs	r0, r3
   25300:	fa0c fc02 	lsl.w	ip, ip, r2
   25304:	fa21 f303 	lsr.w	r3, r1, r3
   25308:	4091      	lsls	r1, r2
   2530a:	4301      	orrs	r1, r0
   2530c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   25310:	fa1f fe8c 	uxth.w	lr, ip
   25314:	fbb3 f0f7 	udiv	r0, r3, r7
   25318:	fb07 3610 	mls	r6, r7, r0, r3
   2531c:	0c0b      	lsrs	r3, r1, #16
   2531e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   25322:	fb00 f60e 	mul.w	r6, r0, lr
   25326:	429e      	cmp	r6, r3
   25328:	fa04 f402 	lsl.w	r4, r4, r2
   2532c:	d908      	bls.n	25340 <__udivmoddi4+0x260>
   2532e:	eb1c 0303 	adds.w	r3, ip, r3
   25332:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   25336:	d22f      	bcs.n	25398 <__udivmoddi4+0x2b8>
   25338:	429e      	cmp	r6, r3
   2533a:	d92d      	bls.n	25398 <__udivmoddi4+0x2b8>
   2533c:	3802      	subs	r0, #2
   2533e:	4463      	add	r3, ip
   25340:	1b9b      	subs	r3, r3, r6
   25342:	b289      	uxth	r1, r1
   25344:	fbb3 f6f7 	udiv	r6, r3, r7
   25348:	fb07 3316 	mls	r3, r7, r6, r3
   2534c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   25350:	fb06 f30e 	mul.w	r3, r6, lr
   25354:	428b      	cmp	r3, r1
   25356:	d908      	bls.n	2536a <__udivmoddi4+0x28a>
   25358:	eb1c 0101 	adds.w	r1, ip, r1
   2535c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   25360:	d216      	bcs.n	25390 <__udivmoddi4+0x2b0>
   25362:	428b      	cmp	r3, r1
   25364:	d914      	bls.n	25390 <__udivmoddi4+0x2b0>
   25366:	3e02      	subs	r6, #2
   25368:	4461      	add	r1, ip
   2536a:	1ac9      	subs	r1, r1, r3
   2536c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   25370:	e738      	b.n	251e4 <__udivmoddi4+0x104>
   25372:	462e      	mov	r6, r5
   25374:	4628      	mov	r0, r5
   25376:	e705      	b.n	25184 <__udivmoddi4+0xa4>
   25378:	4606      	mov	r6, r0
   2537a:	e6e3      	b.n	25144 <__udivmoddi4+0x64>
   2537c:	4618      	mov	r0, r3
   2537e:	e6f8      	b.n	25172 <__udivmoddi4+0x92>
   25380:	454b      	cmp	r3, r9
   25382:	d2a9      	bcs.n	252d8 <__udivmoddi4+0x1f8>
   25384:	ebb9 0802 	subs.w	r8, r9, r2
   25388:	eb64 0e0c 	sbc.w	lr, r4, ip
   2538c:	3801      	subs	r0, #1
   2538e:	e7a3      	b.n	252d8 <__udivmoddi4+0x1f8>
   25390:	4646      	mov	r6, r8
   25392:	e7ea      	b.n	2536a <__udivmoddi4+0x28a>
   25394:	4620      	mov	r0, r4
   25396:	e794      	b.n	252c2 <__udivmoddi4+0x1e2>
   25398:	4640      	mov	r0, r8
   2539a:	e7d1      	b.n	25340 <__udivmoddi4+0x260>
   2539c:	46d0      	mov	r8, sl
   2539e:	e77b      	b.n	25298 <__udivmoddi4+0x1b8>
   253a0:	3b02      	subs	r3, #2
   253a2:	4461      	add	r1, ip
   253a4:	e732      	b.n	2520c <__udivmoddi4+0x12c>
   253a6:	4630      	mov	r0, r6
   253a8:	e709      	b.n	251be <__udivmoddi4+0xde>
   253aa:	4464      	add	r4, ip
   253ac:	3802      	subs	r0, #2
   253ae:	e742      	b.n	25236 <__udivmoddi4+0x156>

000253b0 <__aeabi_idiv0>:
   253b0:	4770      	bx	lr
   253b2:	bf00      	nop

000253b4 <fabs>:
   253b4:	ec51 0b10 	vmov	r0, r1, d0
   253b8:	ee10 2a10 	vmov	r2, s0
   253bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   253c0:	ec43 2b10 	vmov	d0, r2, r3
   253c4:	4770      	bx	lr
   253c6:	bf00      	nop

000253c8 <ceilf>:
   253c8:	ee10 2a10 	vmov	r2, s0
   253cc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   253d0:	3b7f      	subs	r3, #127	; 0x7f
   253d2:	2b16      	cmp	r3, #22
   253d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
   253d8:	dc2f      	bgt.n	2543a <ceilf+0x72>
   253da:	2b00      	cmp	r3, #0
   253dc:	db18      	blt.n	25410 <ceilf+0x48>
   253de:	491a      	ldr	r1, [pc, #104]	; (25448 <ceilf+0x80>)
   253e0:	4119      	asrs	r1, r3
   253e2:	420a      	tst	r2, r1
   253e4:	d028      	beq.n	25438 <ceilf+0x70>
   253e6:	eddf 7a19 	vldr	s15, [pc, #100]	; 2544c <ceilf+0x84>
   253ea:	ee70 7a27 	vadd.f32	s15, s0, s15
   253ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   253f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   253f6:	dd1f      	ble.n	25438 <ceilf+0x70>
   253f8:	2a00      	cmp	r2, #0
   253fa:	dd04      	ble.n	25406 <ceilf+0x3e>
   253fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   25400:	fa40 f303 	asr.w	r3, r0, r3
   25404:	441a      	add	r2, r3
   25406:	ea22 0301 	bic.w	r3, r2, r1
   2540a:	ee00 3a10 	vmov	s0, r3
   2540e:	4770      	bx	lr
   25410:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2544c <ceilf+0x84>
   25414:	ee70 7a27 	vadd.f32	s15, s0, s15
   25418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2541c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25420:	dd0a      	ble.n	25438 <ceilf+0x70>
   25422:	2a00      	cmp	r2, #0
   25424:	db06      	blt.n	25434 <ceilf+0x6c>
   25426:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2542a:	2900      	cmp	r1, #0
   2542c:	bf18      	it	ne
   2542e:	eeb0 0a67 	vmovne.f32	s0, s15
   25432:	4770      	bx	lr
   25434:	ed9f 0a06 	vldr	s0, [pc, #24]	; 25450 <ceilf+0x88>
   25438:	4770      	bx	lr
   2543a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   2543e:	d3fb      	bcc.n	25438 <ceilf+0x70>
   25440:	ee30 0a00 	vadd.f32	s0, s0, s0
   25444:	4770      	bx	lr
   25446:	bf00      	nop
   25448:	007fffff 	.word	0x007fffff
   2544c:	7149f2ca 	.word	0x7149f2ca
   25450:	80000000 	.word	0x80000000

00025454 <asin>:
   25454:	b538      	push	{r3, r4, r5, lr}
   25456:	ed2d 8b02 	vpush	{d8}
   2545a:	ec55 4b10 	vmov	r4, r5, d0
   2545e:	f000 f8a7 	bl	255b0 <__ieee754_asin>
   25462:	4b17      	ldr	r3, [pc, #92]	; (254c0 <asin+0x6c>)
   25464:	eeb0 8a40 	vmov.f32	s16, s0
   25468:	eef0 8a60 	vmov.f32	s17, s1
   2546c:	f993 3000 	ldrsb.w	r3, [r3]
   25470:	3301      	adds	r3, #1
   25472:	d011      	beq.n	25498 <asin+0x44>
   25474:	4622      	mov	r2, r4
   25476:	462b      	mov	r3, r5
   25478:	4620      	mov	r0, r4
   2547a:	4629      	mov	r1, r5
   2547c:	f7ff fbb6 	bl	24bec <__aeabi_dcmpun>
   25480:	b950      	cbnz	r0, 25498 <asin+0x44>
   25482:	ec45 4b10 	vmov	d0, r4, r5
   25486:	f7ff ff95 	bl	253b4 <fabs>
   2548a:	4b0e      	ldr	r3, [pc, #56]	; (254c4 <asin+0x70>)
   2548c:	ec51 0b10 	vmov	r0, r1, d0
   25490:	2200      	movs	r2, #0
   25492:	f7ff fba1 	bl	24bd8 <__aeabi_dcmpgt>
   25496:	b930      	cbnz	r0, 254a6 <asin+0x52>
   25498:	eeb0 0a48 	vmov.f32	s0, s16
   2549c:	eef0 0a68 	vmov.f32	s1, s17
   254a0:	ecbd 8b02 	vpop	{d8}
   254a4:	bd38      	pop	{r3, r4, r5, pc}
   254a6:	f000 fe4d 	bl	26144 <__errno>
   254aa:	ecbd 8b02 	vpop	{d8}
   254ae:	4603      	mov	r3, r0
   254b0:	2221      	movs	r2, #33	; 0x21
   254b2:	601a      	str	r2, [r3, #0]
   254b4:	4804      	ldr	r0, [pc, #16]	; (254c8 <asin+0x74>)
   254b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   254ba:	f000 bd35 	b.w	25f28 <nan>
   254be:	bf00      	nop
   254c0:	20001344 	.word	0x20001344
   254c4:	3ff00000 	.word	0x3ff00000
   254c8:	00028874 	.word	0x00028874

000254cc <fmod>:
   254cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254ce:	ed2d 8b02 	vpush	{d8}
   254d2:	ec57 6b10 	vmov	r6, r7, d0
   254d6:	ec55 4b11 	vmov	r4, r5, d1
   254da:	f000 fabb 	bl	25a54 <__ieee754_fmod>
   254de:	4b18      	ldr	r3, [pc, #96]	; (25540 <fmod+0x74>)
   254e0:	eeb0 8a40 	vmov.f32	s16, s0
   254e4:	eef0 8a60 	vmov.f32	s17, s1
   254e8:	f993 3000 	ldrsb.w	r3, [r3]
   254ec:	3301      	adds	r3, #1
   254ee:	d00d      	beq.n	2550c <fmod+0x40>
   254f0:	4630      	mov	r0, r6
   254f2:	4639      	mov	r1, r7
   254f4:	4622      	mov	r2, r4
   254f6:	462b      	mov	r3, r5
   254f8:	f7ff fb78 	bl	24bec <__aeabi_dcmpun>
   254fc:	b930      	cbnz	r0, 2550c <fmod+0x40>
   254fe:	2200      	movs	r2, #0
   25500:	2300      	movs	r3, #0
   25502:	4620      	mov	r0, r4
   25504:	4629      	mov	r1, r5
   25506:	f7ff fb3f 	bl	24b88 <__aeabi_dcmpeq>
   2550a:	b930      	cbnz	r0, 2551a <fmod+0x4e>
   2550c:	eeb0 0a48 	vmov.f32	s0, s16
   25510:	eef0 0a68 	vmov.f32	s1, s17
   25514:	ecbd 8b02 	vpop	{d8}
   25518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2551a:	f000 fe13 	bl	26144 <__errno>
   2551e:	2200      	movs	r2, #0
   25520:	2300      	movs	r3, #0
   25522:	2121      	movs	r1, #33	; 0x21
   25524:	6001      	str	r1, [r0, #0]
   25526:	4610      	mov	r0, r2
   25528:	4619      	mov	r1, r3
   2552a:	f7ff f9ef 	bl	2490c <__aeabi_ddiv>
   2552e:	ec41 0b18 	vmov	d8, r0, r1
   25532:	eeb0 0a48 	vmov.f32	s0, s16
   25536:	eef0 0a68 	vmov.f32	s1, s17
   2553a:	ecbd 8b02 	vpop	{d8}
   2553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25540:	20001344 	.word	0x20001344

00025544 <log10f>:
   25544:	b508      	push	{r3, lr}
   25546:	ed2d 8b02 	vpush	{d8}
   2554a:	eeb0 8a40 	vmov.f32	s16, s0
   2554e:	f000 fc8b 	bl	25e68 <__ieee754_log10f>
   25552:	4b14      	ldr	r3, [pc, #80]	; (255a4 <log10f+0x60>)
   25554:	f993 3000 	ldrsb.w	r3, [r3]
   25558:	3301      	adds	r3, #1
   2555a:	d014      	beq.n	25586 <log10f+0x42>
   2555c:	eeb4 8a48 	vcmp.f32	s16, s16
   25560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25564:	d60f      	bvs.n	25586 <log10f+0x42>
   25566:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2556e:	d80a      	bhi.n	25586 <log10f+0x42>
   25570:	eeb5 8a40 	vcmp.f32	s16, #0.0
   25574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25578:	d108      	bne.n	2558c <log10f+0x48>
   2557a:	f000 fde3 	bl	26144 <__errno>
   2557e:	2322      	movs	r3, #34	; 0x22
   25580:	ed9f 0a09 	vldr	s0, [pc, #36]	; 255a8 <log10f+0x64>
   25584:	6003      	str	r3, [r0, #0]
   25586:	ecbd 8b02 	vpop	{d8}
   2558a:	bd08      	pop	{r3, pc}
   2558c:	f000 fdda 	bl	26144 <__errno>
   25590:	ecbd 8b02 	vpop	{d8}
   25594:	4603      	mov	r3, r0
   25596:	2221      	movs	r2, #33	; 0x21
   25598:	601a      	str	r2, [r3, #0]
   2559a:	4804      	ldr	r0, [pc, #16]	; (255ac <log10f+0x68>)
   2559c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   255a0:	f000 bcca 	b.w	25f38 <nanf>
   255a4:	20001344 	.word	0x20001344
   255a8:	ff800000 	.word	0xff800000
   255ac:	00028874 	.word	0x00028874

000255b0 <__ieee754_asin>:
   255b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255b4:	ec55 4b10 	vmov	r4, r5, d0
   255b8:	4bcf      	ldr	r3, [pc, #828]	; (258f8 <__ieee754_asin+0x348>)
   255ba:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   255be:	429f      	cmp	r7, r3
   255c0:	ed2d 8b04 	vpush	{d8-d9}
   255c4:	dd37      	ble.n	25636 <__ieee754_asin+0x86>
   255c6:	ee10 3a10 	vmov	r3, s0
   255ca:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
   255ce:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
   255d2:	433b      	orrs	r3, r7
   255d4:	d010      	beq.n	255f8 <__ieee754_asin+0x48>
   255d6:	ee10 2a10 	vmov	r2, s0
   255da:	462b      	mov	r3, r5
   255dc:	4620      	mov	r0, r4
   255de:	4629      	mov	r1, r5
   255e0:	f7fe feb2 	bl	24348 <__aeabi_dsub>
   255e4:	4602      	mov	r2, r0
   255e6:	460b      	mov	r3, r1
   255e8:	f7ff f990 	bl	2490c <__aeabi_ddiv>
   255ec:	ec41 0b10 	vmov	d0, r0, r1
   255f0:	ecbd 8b04 	vpop	{d8-d9}
   255f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255f8:	ee10 0a10 	vmov	r0, s0
   255fc:	a3a2      	add	r3, pc, #648	; (adr r3, 25888 <__ieee754_asin+0x2d8>)
   255fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   25602:	4629      	mov	r1, r5
   25604:	f7ff f858 	bl	246b8 <__aeabi_dmul>
   25608:	4602      	mov	r2, r0
   2560a:	460b      	mov	r3, r1
   2560c:	4620      	mov	r0, r4
   2560e:	4629      	mov	r1, r5
   25610:	4614      	mov	r4, r2
   25612:	461d      	mov	r5, r3
   25614:	a39e      	add	r3, pc, #632	; (adr r3, 25890 <__ieee754_asin+0x2e0>)
   25616:	e9d3 2300 	ldrd	r2, r3, [r3]
   2561a:	f7ff f84d 	bl	246b8 <__aeabi_dmul>
   2561e:	4602      	mov	r2, r0
   25620:	460b      	mov	r3, r1
   25622:	4620      	mov	r0, r4
   25624:	4629      	mov	r1, r5
   25626:	f7fe fe91 	bl	2434c <__adddf3>
   2562a:	ecbd 8b04 	vpop	{d8-d9}
   2562e:	ec41 0b10 	vmov	d0, r0, r1
   25632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25636:	4bb1      	ldr	r3, [pc, #708]	; (258fc <__ieee754_asin+0x34c>)
   25638:	429f      	cmp	r7, r3
   2563a:	462e      	mov	r6, r5
   2563c:	dc12      	bgt.n	25664 <__ieee754_asin+0xb4>
   2563e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
   25642:	f280 8163 	bge.w	2590c <__ieee754_asin+0x35c>
   25646:	a394      	add	r3, pc, #592	; (adr r3, 25898 <__ieee754_asin+0x2e8>)
   25648:	e9d3 2300 	ldrd	r2, r3, [r3]
   2564c:	ee10 0a10 	vmov	r0, s0
   25650:	4629      	mov	r1, r5
   25652:	f7fe fe7b 	bl	2434c <__adddf3>
   25656:	4baa      	ldr	r3, [pc, #680]	; (25900 <__ieee754_asin+0x350>)
   25658:	2200      	movs	r2, #0
   2565a:	f7ff fabd 	bl	24bd8 <__aeabi_dcmpgt>
   2565e:	2800      	cmp	r0, #0
   25660:	f040 810c 	bne.w	2587c <__ieee754_asin+0x2cc>
   25664:	ec45 4b10 	vmov	d0, r4, r5
   25668:	f7ff fea4 	bl	253b4 <fabs>
   2566c:	49a4      	ldr	r1, [pc, #656]	; (25900 <__ieee754_asin+0x350>)
   2566e:	ec53 2b10 	vmov	r2, r3, d0
   25672:	2000      	movs	r0, #0
   25674:	f7fe fe68 	bl	24348 <__aeabi_dsub>
   25678:	4ba2      	ldr	r3, [pc, #648]	; (25904 <__ieee754_asin+0x354>)
   2567a:	2200      	movs	r2, #0
   2567c:	f7ff f81c 	bl	246b8 <__aeabi_dmul>
   25680:	a387      	add	r3, pc, #540	; (adr r3, 258a0 <__ieee754_asin+0x2f0>)
   25682:	e9d3 2300 	ldrd	r2, r3, [r3]
   25686:	4604      	mov	r4, r0
   25688:	460d      	mov	r5, r1
   2568a:	f7ff f815 	bl	246b8 <__aeabi_dmul>
   2568e:	a386      	add	r3, pc, #536	; (adr r3, 258a8 <__ieee754_asin+0x2f8>)
   25690:	e9d3 2300 	ldrd	r2, r3, [r3]
   25694:	f7fe fe5a 	bl	2434c <__adddf3>
   25698:	4622      	mov	r2, r4
   2569a:	462b      	mov	r3, r5
   2569c:	f7ff f80c 	bl	246b8 <__aeabi_dmul>
   256a0:	a383      	add	r3, pc, #524	; (adr r3, 258b0 <__ieee754_asin+0x300>)
   256a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   256a6:	f7fe fe4f 	bl	24348 <__aeabi_dsub>
   256aa:	4622      	mov	r2, r4
   256ac:	462b      	mov	r3, r5
   256ae:	f7ff f803 	bl	246b8 <__aeabi_dmul>
   256b2:	a381      	add	r3, pc, #516	; (adr r3, 258b8 <__ieee754_asin+0x308>)
   256b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   256b8:	f7fe fe48 	bl	2434c <__adddf3>
   256bc:	4622      	mov	r2, r4
   256be:	462b      	mov	r3, r5
   256c0:	f7fe fffa 	bl	246b8 <__aeabi_dmul>
   256c4:	a37e      	add	r3, pc, #504	; (adr r3, 258c0 <__ieee754_asin+0x310>)
   256c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   256ca:	f7fe fe3d 	bl	24348 <__aeabi_dsub>
   256ce:	4622      	mov	r2, r4
   256d0:	462b      	mov	r3, r5
   256d2:	f7fe fff1 	bl	246b8 <__aeabi_dmul>
   256d6:	a37c      	add	r3, pc, #496	; (adr r3, 258c8 <__ieee754_asin+0x318>)
   256d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   256dc:	f7fe fe36 	bl	2434c <__adddf3>
   256e0:	4622      	mov	r2, r4
   256e2:	462b      	mov	r3, r5
   256e4:	f7fe ffe8 	bl	246b8 <__aeabi_dmul>
   256e8:	a379      	add	r3, pc, #484	; (adr r3, 258d0 <__ieee754_asin+0x320>)
   256ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   256ee:	ec41 0b18 	vmov	d8, r0, r1
   256f2:	ec41 0b19 	vmov	d9, r0, r1
   256f6:	4620      	mov	r0, r4
   256f8:	4629      	mov	r1, r5
   256fa:	f7fe ffdd 	bl	246b8 <__aeabi_dmul>
   256fe:	a376      	add	r3, pc, #472	; (adr r3, 258d8 <__ieee754_asin+0x328>)
   25700:	e9d3 2300 	ldrd	r2, r3, [r3]
   25704:	f7fe fe20 	bl	24348 <__aeabi_dsub>
   25708:	4622      	mov	r2, r4
   2570a:	462b      	mov	r3, r5
   2570c:	f7fe ffd4 	bl	246b8 <__aeabi_dmul>
   25710:	a373      	add	r3, pc, #460	; (adr r3, 258e0 <__ieee754_asin+0x330>)
   25712:	e9d3 2300 	ldrd	r2, r3, [r3]
   25716:	f7fe fe19 	bl	2434c <__adddf3>
   2571a:	4622      	mov	r2, r4
   2571c:	462b      	mov	r3, r5
   2571e:	f7fe ffcb 	bl	246b8 <__aeabi_dmul>
   25722:	a371      	add	r3, pc, #452	; (adr r3, 258e8 <__ieee754_asin+0x338>)
   25724:	e9d3 2300 	ldrd	r2, r3, [r3]
   25728:	f7fe fe0e 	bl	24348 <__aeabi_dsub>
   2572c:	4622      	mov	r2, r4
   2572e:	462b      	mov	r3, r5
   25730:	f7fe ffc2 	bl	246b8 <__aeabi_dmul>
   25734:	4b72      	ldr	r3, [pc, #456]	; (25900 <__ieee754_asin+0x350>)
   25736:	2200      	movs	r2, #0
   25738:	f7fe fe08 	bl	2434c <__adddf3>
   2573c:	ec45 4b10 	vmov	d0, r4, r5
   25740:	4680      	mov	r8, r0
   25742:	4689      	mov	r9, r1
   25744:	f000 fac4 	bl	25cd0 <__ieee754_sqrt>
   25748:	4b6f      	ldr	r3, [pc, #444]	; (25908 <__ieee754_asin+0x358>)
   2574a:	429f      	cmp	r7, r3
   2574c:	ec5b ab10 	vmov	sl, fp, d0
   25750:	dc73      	bgt.n	2583a <__ieee754_asin+0x28a>
   25752:	465b      	mov	r3, fp
   25754:	2200      	movs	r2, #0
   25756:	ee10 0a10 	vmov	r0, s0
   2575a:	ec43 2b18 	vmov	d8, r2, r3
   2575e:	4659      	mov	r1, fp
   25760:	ee10 2a10 	vmov	r2, s0
   25764:	f7fe fdf2 	bl	2434c <__adddf3>
   25768:	4642      	mov	r2, r8
   2576a:	464b      	mov	r3, r9
   2576c:	4680      	mov	r8, r0
   2576e:	4689      	mov	r9, r1
   25770:	ec51 0b19 	vmov	r0, r1, d9
   25774:	f7ff f8ca 	bl	2490c <__aeabi_ddiv>
   25778:	4602      	mov	r2, r0
   2577a:	460b      	mov	r3, r1
   2577c:	4640      	mov	r0, r8
   2577e:	4649      	mov	r1, r9
   25780:	f7fe ff9a 	bl	246b8 <__aeabi_dmul>
   25784:	ec53 2b18 	vmov	r2, r3, d8
   25788:	4680      	mov	r8, r0
   2578a:	4689      	mov	r9, r1
   2578c:	ec51 0b18 	vmov	r0, r1, d8
   25790:	f7fe ff92 	bl	246b8 <__aeabi_dmul>
   25794:	4602      	mov	r2, r0
   25796:	460b      	mov	r3, r1
   25798:	4620      	mov	r0, r4
   2579a:	4629      	mov	r1, r5
   2579c:	f7fe fdd4 	bl	24348 <__aeabi_dsub>
   257a0:	ec53 2b18 	vmov	r2, r3, d8
   257a4:	4604      	mov	r4, r0
   257a6:	460d      	mov	r5, r1
   257a8:	4650      	mov	r0, sl
   257aa:	4659      	mov	r1, fp
   257ac:	f7fe fdce 	bl	2434c <__adddf3>
   257b0:	4602      	mov	r2, r0
   257b2:	460b      	mov	r3, r1
   257b4:	4620      	mov	r0, r4
   257b6:	4629      	mov	r1, r5
   257b8:	f7ff f8a8 	bl	2490c <__aeabi_ddiv>
   257bc:	4602      	mov	r2, r0
   257be:	460b      	mov	r3, r1
   257c0:	f7fe fdc4 	bl	2434c <__adddf3>
   257c4:	4602      	mov	r2, r0
   257c6:	460b      	mov	r3, r1
   257c8:	a131      	add	r1, pc, #196	; (adr r1, 25890 <__ieee754_asin+0x2e0>)
   257ca:	e9d1 0100 	ldrd	r0, r1, [r1]
   257ce:	f7fe fdbb 	bl	24348 <__aeabi_dsub>
   257d2:	4602      	mov	r2, r0
   257d4:	460b      	mov	r3, r1
   257d6:	4640      	mov	r0, r8
   257d8:	4649      	mov	r1, r9
   257da:	f7fe fdb5 	bl	24348 <__aeabi_dsub>
   257de:	ec53 2b18 	vmov	r2, r3, d8
   257e2:	4604      	mov	r4, r0
   257e4:	460d      	mov	r5, r1
   257e6:	ee18 0a10 	vmov	r0, s16
   257ea:	4619      	mov	r1, r3
   257ec:	f7fe fdae 	bl	2434c <__adddf3>
   257f0:	4602      	mov	r2, r0
   257f2:	460b      	mov	r3, r1
   257f4:	a13e      	add	r1, pc, #248	; (adr r1, 258f0 <__ieee754_asin+0x340>)
   257f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   257fa:	f7fe fda5 	bl	24348 <__aeabi_dsub>
   257fe:	4602      	mov	r2, r0
   25800:	460b      	mov	r3, r1
   25802:	4620      	mov	r0, r4
   25804:	4629      	mov	r1, r5
   25806:	f7fe fd9f 	bl	24348 <__aeabi_dsub>
   2580a:	4602      	mov	r2, r0
   2580c:	460b      	mov	r3, r1
   2580e:	a138      	add	r1, pc, #224	; (adr r1, 258f0 <__ieee754_asin+0x340>)
   25810:	e9d1 0100 	ldrd	r0, r1, [r1]
   25814:	f7fe fd98 	bl	24348 <__aeabi_dsub>
   25818:	ec41 0b10 	vmov	d0, r0, r1
   2581c:	2e00      	cmp	r6, #0
   2581e:	f73f aee7 	bgt.w	255f0 <__ieee754_asin+0x40>
   25822:	ecbd 8b04 	vpop	{d8-d9}
   25826:	ee10 1a90 	vmov	r1, s1
   2582a:	ee10 2a10 	vmov	r2, s0
   2582e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   25832:	ec43 2b10 	vmov	d0, r2, r3
   25836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2583a:	4642      	mov	r2, r8
   2583c:	464b      	mov	r3, r9
   2583e:	ec51 0b18 	vmov	r0, r1, d8
   25842:	f7ff f863 	bl	2490c <__aeabi_ddiv>
   25846:	4652      	mov	r2, sl
   25848:	465b      	mov	r3, fp
   2584a:	f7fe ff35 	bl	246b8 <__aeabi_dmul>
   2584e:	4652      	mov	r2, sl
   25850:	465b      	mov	r3, fp
   25852:	f7fe fd7b 	bl	2434c <__adddf3>
   25856:	4602      	mov	r2, r0
   25858:	460b      	mov	r3, r1
   2585a:	f7fe fd77 	bl	2434c <__adddf3>
   2585e:	a30c      	add	r3, pc, #48	; (adr r3, 25890 <__ieee754_asin+0x2e0>)
   25860:	e9d3 2300 	ldrd	r2, r3, [r3]
   25864:	f7fe fd70 	bl	24348 <__aeabi_dsub>
   25868:	4602      	mov	r2, r0
   2586a:	460b      	mov	r3, r1
   2586c:	a106      	add	r1, pc, #24	; (adr r1, 25888 <__ieee754_asin+0x2d8>)
   2586e:	e9d1 0100 	ldrd	r0, r1, [r1]
   25872:	f7fe fd69 	bl	24348 <__aeabi_dsub>
   25876:	ec41 0b10 	vmov	d0, r0, r1
   2587a:	e7cf      	b.n	2581c <__ieee754_asin+0x26c>
   2587c:	ec45 4b10 	vmov	d0, r4, r5
   25880:	e6b6      	b.n	255f0 <__ieee754_asin+0x40>
   25882:	bf00      	nop
   25884:	f3af 8000 	nop.w
   25888:	54442d18 	.word	0x54442d18
   2588c:	3ff921fb 	.word	0x3ff921fb
   25890:	33145c07 	.word	0x33145c07
   25894:	3c91a626 	.word	0x3c91a626
   25898:	8800759c 	.word	0x8800759c
   2589c:	7e37e43c 	.word	0x7e37e43c
   258a0:	0dfdf709 	.word	0x0dfdf709
   258a4:	3f023de1 	.word	0x3f023de1
   258a8:	7501b288 	.word	0x7501b288
   258ac:	3f49efe0 	.word	0x3f49efe0
   258b0:	b5688f3b 	.word	0xb5688f3b
   258b4:	3fa48228 	.word	0x3fa48228
   258b8:	0e884455 	.word	0x0e884455
   258bc:	3fc9c155 	.word	0x3fc9c155
   258c0:	03eb6f7d 	.word	0x03eb6f7d
   258c4:	3fd4d612 	.word	0x3fd4d612
   258c8:	55555555 	.word	0x55555555
   258cc:	3fc55555 	.word	0x3fc55555
   258d0:	b12e9282 	.word	0xb12e9282
   258d4:	3fb3b8c5 	.word	0x3fb3b8c5
   258d8:	1b8d0159 	.word	0x1b8d0159
   258dc:	3fe6066c 	.word	0x3fe6066c
   258e0:	9c598ac8 	.word	0x9c598ac8
   258e4:	40002ae5 	.word	0x40002ae5
   258e8:	1c8a2d4b 	.word	0x1c8a2d4b
   258ec:	40033a27 	.word	0x40033a27
   258f0:	54442d18 	.word	0x54442d18
   258f4:	3fe921fb 	.word	0x3fe921fb
   258f8:	3fefffff 	.word	0x3fefffff
   258fc:	3fdfffff 	.word	0x3fdfffff
   25900:	3ff00000 	.word	0x3ff00000
   25904:	3fe00000 	.word	0x3fe00000
   25908:	3fef3332 	.word	0x3fef3332
   2590c:	ee10 2a10 	vmov	r2, s0
   25910:	ee10 0a10 	vmov	r0, s0
   25914:	462b      	mov	r3, r5
   25916:	4629      	mov	r1, r5
   25918:	f7fe fece 	bl	246b8 <__aeabi_dmul>
   2591c:	a339      	add	r3, pc, #228	; (adr r3, 25a04 <__ieee754_asin+0x454>)
   2591e:	e9d3 2300 	ldrd	r2, r3, [r3]
   25922:	4606      	mov	r6, r0
   25924:	460f      	mov	r7, r1
   25926:	f7fe fec7 	bl	246b8 <__aeabi_dmul>
   2592a:	a338      	add	r3, pc, #224	; (adr r3, 25a0c <__ieee754_asin+0x45c>)
   2592c:	e9d3 2300 	ldrd	r2, r3, [r3]
   25930:	f7fe fd0c 	bl	2434c <__adddf3>
   25934:	4632      	mov	r2, r6
   25936:	463b      	mov	r3, r7
   25938:	f7fe febe 	bl	246b8 <__aeabi_dmul>
   2593c:	a335      	add	r3, pc, #212	; (adr r3, 25a14 <__ieee754_asin+0x464>)
   2593e:	e9d3 2300 	ldrd	r2, r3, [r3]
   25942:	f7fe fd01 	bl	24348 <__aeabi_dsub>
   25946:	4632      	mov	r2, r6
   25948:	463b      	mov	r3, r7
   2594a:	f7fe feb5 	bl	246b8 <__aeabi_dmul>
   2594e:	a333      	add	r3, pc, #204	; (adr r3, 25a1c <__ieee754_asin+0x46c>)
   25950:	e9d3 2300 	ldrd	r2, r3, [r3]
   25954:	f7fe fcfa 	bl	2434c <__adddf3>
   25958:	4632      	mov	r2, r6
   2595a:	463b      	mov	r3, r7
   2595c:	f7fe feac 	bl	246b8 <__aeabi_dmul>
   25960:	a330      	add	r3, pc, #192	; (adr r3, 25a24 <__ieee754_asin+0x474>)
   25962:	e9d3 2300 	ldrd	r2, r3, [r3]
   25966:	f7fe fcef 	bl	24348 <__aeabi_dsub>
   2596a:	4632      	mov	r2, r6
   2596c:	463b      	mov	r3, r7
   2596e:	f7fe fea3 	bl	246b8 <__aeabi_dmul>
   25972:	a32e      	add	r3, pc, #184	; (adr r3, 25a2c <__ieee754_asin+0x47c>)
   25974:	e9d3 2300 	ldrd	r2, r3, [r3]
   25978:	f7fe fce8 	bl	2434c <__adddf3>
   2597c:	4632      	mov	r2, r6
   2597e:	463b      	mov	r3, r7
   25980:	f7fe fe9a 	bl	246b8 <__aeabi_dmul>
   25984:	a32b      	add	r3, pc, #172	; (adr r3, 25a34 <__ieee754_asin+0x484>)
   25986:	e9d3 2300 	ldrd	r2, r3, [r3]
   2598a:	4680      	mov	r8, r0
   2598c:	4689      	mov	r9, r1
   2598e:	4630      	mov	r0, r6
   25990:	4639      	mov	r1, r7
   25992:	f7fe fe91 	bl	246b8 <__aeabi_dmul>
   25996:	a329      	add	r3, pc, #164	; (adr r3, 25a3c <__ieee754_asin+0x48c>)
   25998:	e9d3 2300 	ldrd	r2, r3, [r3]
   2599c:	f7fe fcd4 	bl	24348 <__aeabi_dsub>
   259a0:	4632      	mov	r2, r6
   259a2:	463b      	mov	r3, r7
   259a4:	f7fe fe88 	bl	246b8 <__aeabi_dmul>
   259a8:	a326      	add	r3, pc, #152	; (adr r3, 25a44 <__ieee754_asin+0x494>)
   259aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   259ae:	f7fe fccd 	bl	2434c <__adddf3>
   259b2:	4632      	mov	r2, r6
   259b4:	463b      	mov	r3, r7
   259b6:	f7fe fe7f 	bl	246b8 <__aeabi_dmul>
   259ba:	a324      	add	r3, pc, #144	; (adr r3, 25a4c <__ieee754_asin+0x49c>)
   259bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   259c0:	f7fe fcc2 	bl	24348 <__aeabi_dsub>
   259c4:	4632      	mov	r2, r6
   259c6:	463b      	mov	r3, r7
   259c8:	f7fe fe76 	bl	246b8 <__aeabi_dmul>
   259cc:	4b0c      	ldr	r3, [pc, #48]	; (25a00 <__ieee754_asin+0x450>)
   259ce:	2200      	movs	r2, #0
   259d0:	f7fe fcbc 	bl	2434c <__adddf3>
   259d4:	4602      	mov	r2, r0
   259d6:	460b      	mov	r3, r1
   259d8:	4640      	mov	r0, r8
   259da:	4649      	mov	r1, r9
   259dc:	f7fe ff96 	bl	2490c <__aeabi_ddiv>
   259e0:	4622      	mov	r2, r4
   259e2:	462b      	mov	r3, r5
   259e4:	f7fe fe68 	bl	246b8 <__aeabi_dmul>
   259e8:	4622      	mov	r2, r4
   259ea:	462b      	mov	r3, r5
   259ec:	f7fe fcae 	bl	2434c <__adddf3>
   259f0:	ecbd 8b04 	vpop	{d8-d9}
   259f4:	ec41 0b10 	vmov	d0, r0, r1
   259f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259fc:	f3af 8000 	nop.w
   25a00:	3ff00000 	.word	0x3ff00000
   25a04:	0dfdf709 	.word	0x0dfdf709
   25a08:	3f023de1 	.word	0x3f023de1
   25a0c:	7501b288 	.word	0x7501b288
   25a10:	3f49efe0 	.word	0x3f49efe0
   25a14:	b5688f3b 	.word	0xb5688f3b
   25a18:	3fa48228 	.word	0x3fa48228
   25a1c:	0e884455 	.word	0x0e884455
   25a20:	3fc9c155 	.word	0x3fc9c155
   25a24:	03eb6f7d 	.word	0x03eb6f7d
   25a28:	3fd4d612 	.word	0x3fd4d612
   25a2c:	55555555 	.word	0x55555555
   25a30:	3fc55555 	.word	0x3fc55555
   25a34:	b12e9282 	.word	0xb12e9282
   25a38:	3fb3b8c5 	.word	0x3fb3b8c5
   25a3c:	1b8d0159 	.word	0x1b8d0159
   25a40:	3fe6066c 	.word	0x3fe6066c
   25a44:	9c598ac8 	.word	0x9c598ac8
   25a48:	40002ae5 	.word	0x40002ae5
   25a4c:	1c8a2d4b 	.word	0x1c8a2d4b
   25a50:	40033a27 	.word	0x40033a27

00025a54 <__ieee754_fmod>:
   25a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25a58:	ec53 2b11 	vmov	r2, r3, d1
   25a5c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
   25a60:	ea5e 0402 	orrs.w	r4, lr, r2
   25a64:	ec51 0b10 	vmov	r0, r1, d0
   25a68:	d033      	beq.n	25ad2 <__ieee754_fmod+0x7e>
   25a6a:	4c93      	ldr	r4, [pc, #588]	; (25cb8 <__ieee754_fmod+0x264>)
   25a6c:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   25a70:	45a1      	cmp	r9, r4
   25a72:	4688      	mov	r8, r1
   25a74:	dc2d      	bgt.n	25ad2 <__ieee754_fmod+0x7e>
   25a76:	4254      	negs	r4, r2
   25a78:	4e90      	ldr	r6, [pc, #576]	; (25cbc <__ieee754_fmod+0x268>)
   25a7a:	4314      	orrs	r4, r2
   25a7c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
   25a80:	42b4      	cmp	r4, r6
   25a82:	ee11 7a10 	vmov	r7, s2
   25a86:	d824      	bhi.n	25ad2 <__ieee754_fmod+0x7e>
   25a88:	45f1      	cmp	r9, lr
   25a8a:	469c      	mov	ip, r3
   25a8c:	ee11 5a10 	vmov	r5, s2
   25a90:	ee10 3a10 	vmov	r3, s0
   25a94:	4602      	mov	r2, r0
   25a96:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
   25a9a:	dc06      	bgt.n	25aaa <__ieee754_fmod+0x56>
   25a9c:	f2c0 80bd 	blt.w	25c1a <__ieee754_fmod+0x1c6>
   25aa0:	42b8      	cmp	r0, r7
   25aa2:	f0c0 80ba 	bcc.w	25c1a <__ieee754_fmod+0x1c6>
   25aa6:	f000 80ef 	beq.w	25c88 <__ieee754_fmod+0x234>
   25aaa:	4984      	ldr	r1, [pc, #528]	; (25cbc <__ieee754_fmod+0x268>)
   25aac:	ea08 0101 	and.w	r1, r8, r1
   25ab0:	b9c9      	cbnz	r1, 25ae6 <__ieee754_fmod+0x92>
   25ab2:	f1b9 0f00 	cmp.w	r9, #0
   25ab6:	f040 80d0 	bne.w	25c5a <__ieee754_fmod+0x206>
   25aba:	2b00      	cmp	r3, #0
   25abc:	4618      	mov	r0, r3
   25abe:	f340 80f8 	ble.w	25cb2 <__ieee754_fmod+0x25e>
   25ac2:	f2a1 4113 	subw	r1, r1, #1043	; 0x413
   25ac6:	0040      	lsls	r0, r0, #1
   25ac8:	2800      	cmp	r0, #0
   25aca:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   25ace:	dcfa      	bgt.n	25ac6 <__ieee754_fmod+0x72>
   25ad0:	e00d      	b.n	25aee <__ieee754_fmod+0x9a>
   25ad2:	f7fe fdf1 	bl	246b8 <__aeabi_dmul>
   25ad6:	4602      	mov	r2, r0
   25ad8:	460b      	mov	r3, r1
   25ada:	f7fe ff17 	bl	2490c <__aeabi_ddiv>
   25ade:	ec41 0b10 	vmov	d0, r0, r1
   25ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25ae6:	ea4f 5129 	mov.w	r1, r9, asr #20
   25aea:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   25aee:	4873      	ldr	r0, [pc, #460]	; (25cbc <__ieee754_fmod+0x268>)
   25af0:	ea0c 0000 	and.w	r0, ip, r0
   25af4:	b968      	cbnz	r0, 25b12 <__ieee754_fmod+0xbe>
   25af6:	f1be 0f00 	cmp.w	lr, #0
   25afa:	f040 80a2 	bne.w	25c42 <__ieee754_fmod+0x1ee>
   25afe:	2f00      	cmp	r7, #0
   25b00:	4e6f      	ldr	r6, [pc, #444]	; (25cc0 <__ieee754_fmod+0x26c>)
   25b02:	4638      	mov	r0, r7
   25b04:	dd09      	ble.n	25b1a <__ieee754_fmod+0xc6>
   25b06:	0040      	lsls	r0, r0, #1
   25b08:	2800      	cmp	r0, #0
   25b0a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   25b0e:	dcfa      	bgt.n	25b06 <__ieee754_fmod+0xb2>
   25b10:	e003      	b.n	25b1a <__ieee754_fmod+0xc6>
   25b12:	ea4f 562e 	mov.w	r6, lr, asr #20
   25b16:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   25b1a:	486a      	ldr	r0, [pc, #424]	; (25cc4 <__ieee754_fmod+0x270>)
   25b1c:	4281      	cmp	r1, r0
   25b1e:	db6f      	blt.n	25c00 <__ieee754_fmod+0x1ac>
   25b20:	f3c8 0313 	ubfx	r3, r8, #0, #20
   25b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25b28:	4866      	ldr	r0, [pc, #408]	; (25cc4 <__ieee754_fmod+0x270>)
   25b2a:	4286      	cmp	r6, r0
   25b2c:	db58      	blt.n	25be0 <__ieee754_fmod+0x18c>
   25b2e:	f3cc 0c13 	ubfx	ip, ip, #0, #20
   25b32:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
   25b36:	1bd0      	subs	r0, r2, r7
   25b38:	1b89      	subs	r1, r1, r6
   25b3a:	d10b      	bne.n	25b54 <__ieee754_fmod+0x100>
   25b3c:	e01d      	b.n	25b7a <__ieee754_fmod+0x126>
   25b3e:	ea50 030e 	orrs.w	r3, r0, lr
   25b42:	d045      	beq.n	25bd0 <__ieee754_fmod+0x17c>
   25b44:	ea4f 73de 	mov.w	r3, lr, lsr #31
   25b48:	3901      	subs	r1, #1
   25b4a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   25b4e:	ea4f 024e 	mov.w	r2, lr, lsl #1
   25b52:	d011      	beq.n	25b78 <__ieee754_fmod+0x124>
   25b54:	eba3 000c 	sub.w	r0, r3, ip
   25b58:	4295      	cmp	r5, r2
   25b5a:	bf88      	it	hi
   25b5c:	f100 30ff 	addhi.w	r0, r0, #4294967295	; 0xffffffff
   25b60:	2800      	cmp	r0, #0
   25b62:	eba2 0e05 	sub.w	lr, r2, r5
   25b66:	ea4f 77d2 	mov.w	r7, r2, lsr #31
   25b6a:	dae8      	bge.n	25b3e <__ieee754_fmod+0xea>
   25b6c:	3901      	subs	r1, #1
   25b6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   25b72:	ea4f 0242 	mov.w	r2, r2, lsl #1
   25b76:	d1ed      	bne.n	25b54 <__ieee754_fmod+0x100>
   25b78:	1b50      	subs	r0, r2, r5
   25b7a:	eba3 0c0c 	sub.w	ip, r3, ip
   25b7e:	4295      	cmp	r5, r2
   25b80:	bf88      	it	hi
   25b82:	f10c 3cff 	addhi.w	ip, ip, #4294967295	; 0xffffffff
   25b86:	f1bc 0f00 	cmp.w	ip, #0
   25b8a:	bfa4      	itt	ge
   25b8c:	4602      	movge	r2, r0
   25b8e:	4663      	movge	r3, ip
   25b90:	ea53 0102 	orrs.w	r1, r3, r2
   25b94:	d105      	bne.n	25ba2 <__ieee754_fmod+0x14e>
   25b96:	e01b      	b.n	25bd0 <__ieee754_fmod+0x17c>
   25b98:	0fd1      	lsrs	r1, r2, #31
   25b9a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   25b9e:	0052      	lsls	r2, r2, #1
   25ba0:	3e01      	subs	r6, #1
   25ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25ba6:	dbf7      	blt.n	25b98 <__ieee754_fmod+0x144>
   25ba8:	4946      	ldr	r1, [pc, #280]	; (25cc4 <__ieee754_fmod+0x270>)
   25baa:	428e      	cmp	r6, r1
   25bac:	da61      	bge.n	25c72 <__ieee754_fmod+0x21e>
   25bae:	1b89      	subs	r1, r1, r6
   25bb0:	2914      	cmp	r1, #20
   25bb2:	dc6f      	bgt.n	25c94 <__ieee754_fmod+0x240>
   25bb4:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   25bb8:	40ca      	lsrs	r2, r1
   25bba:	fa03 f000 	lsl.w	r0, r3, r0
   25bbe:	fa43 f101 	asr.w	r1, r3, r1
   25bc2:	4310      	orrs	r0, r2
   25bc4:	430c      	orrs	r4, r1
   25bc6:	4623      	mov	r3, r4
   25bc8:	4602      	mov	r2, r0
   25bca:	ec43 2b10 	vmov	d0, r2, r3
   25bce:	e788      	b.n	25ae2 <__ieee754_fmod+0x8e>
   25bd0:	4b3d      	ldr	r3, [pc, #244]	; (25cc8 <__ieee754_fmod+0x274>)
   25bd2:	0fe4      	lsrs	r4, r4, #31
   25bd4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   25bd8:	ed94 0b00 	vldr	d0, [r4]
   25bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25be0:	1b80      	subs	r0, r0, r6
   25be2:	281f      	cmp	r0, #31
   25be4:	dd21      	ble.n	25c2a <__ieee754_fmod+0x1d6>
   25be6:	4839      	ldr	r0, [pc, #228]	; (25ccc <__ieee754_fmod+0x278>)
   25be8:	1b89      	subs	r1, r1, r6
   25bea:	eba0 0c06 	sub.w	ip, r0, r6
   25bee:	fa07 fc0c 	lsl.w	ip, r7, ip
   25bf2:	bf18      	it	ne
   25bf4:	2500      	movne	r5, #0
   25bf6:	d1ad      	bne.n	25b54 <__ieee754_fmod+0x100>
   25bf8:	eba3 0c0c 	sub.w	ip, r3, ip
   25bfc:	4610      	mov	r0, r2
   25bfe:	e7c2      	b.n	25b86 <__ieee754_fmod+0x132>
   25c00:	1a40      	subs	r0, r0, r1
   25c02:	281f      	cmp	r0, #31
   25c04:	dc0c      	bgt.n	25c20 <__ieee754_fmod+0x1cc>
   25c06:	fa09 f900 	lsl.w	r9, r9, r0
   25c0a:	fa03 f200 	lsl.w	r2, r3, r0
   25c0e:	f201 401e 	addw	r0, r1, #1054	; 0x41e
   25c12:	40c3      	lsrs	r3, r0
   25c14:	ea43 0309 	orr.w	r3, r3, r9
   25c18:	e786      	b.n	25b28 <__ieee754_fmod+0xd4>
   25c1a:	ec41 0b10 	vmov	d0, r0, r1
   25c1e:	e760      	b.n	25ae2 <__ieee754_fmod+0x8e>
   25c20:	4a2a      	ldr	r2, [pc, #168]	; (25ccc <__ieee754_fmod+0x278>)
   25c22:	1a52      	subs	r2, r2, r1
   25c24:	4093      	lsls	r3, r2
   25c26:	2200      	movs	r2, #0
   25c28:	e77e      	b.n	25b28 <__ieee754_fmod+0xd4>
   25c2a:	fa0e fe00 	lsl.w	lr, lr, r0
   25c2e:	fa07 f500 	lsl.w	r5, r7, r0
   25c32:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   25c36:	fa27 f000 	lsr.w	r0, r7, r0
   25c3a:	ea40 0c0e 	orr.w	ip, r0, lr
   25c3e:	1b50      	subs	r0, r2, r5
   25c40:	e77a      	b.n	25b38 <__ieee754_fmod+0xe4>
   25c42:	ea4f 20ce 	mov.w	r0, lr, lsl #11
   25c46:	2800      	cmp	r0, #0
   25c48:	4e1e      	ldr	r6, [pc, #120]	; (25cc4 <__ieee754_fmod+0x270>)
   25c4a:	f77f af66 	ble.w	25b1a <__ieee754_fmod+0xc6>
   25c4e:	0040      	lsls	r0, r0, #1
   25c50:	2800      	cmp	r0, #0
   25c52:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   25c56:	dcfa      	bgt.n	25c4e <__ieee754_fmod+0x1fa>
   25c58:	e75f      	b.n	25b1a <__ieee754_fmod+0xc6>
   25c5a:	ea4f 20c9 	mov.w	r0, r9, lsl #11
   25c5e:	2800      	cmp	r0, #0
   25c60:	4918      	ldr	r1, [pc, #96]	; (25cc4 <__ieee754_fmod+0x270>)
   25c62:	f77f af44 	ble.w	25aee <__ieee754_fmod+0x9a>
   25c66:	0040      	lsls	r0, r0, #1
   25c68:	2800      	cmp	r0, #0
   25c6a:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
   25c6e:	dcfa      	bgt.n	25c66 <__ieee754_fmod+0x212>
   25c70:	e73d      	b.n	25aee <__ieee754_fmod+0x9a>
   25c72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   25c76:	431c      	orrs	r4, r3
   25c78:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
   25c7c:	ea44 5106 	orr.w	r1, r4, r6, lsl #20
   25c80:	4610      	mov	r0, r2
   25c82:	ec41 0b10 	vmov	d0, r0, r1
   25c86:	e72c      	b.n	25ae2 <__ieee754_fmod+0x8e>
   25c88:	4b0f      	ldr	r3, [pc, #60]	; (25cc8 <__ieee754_fmod+0x274>)
   25c8a:	eb03 7414 	add.w	r4, r3, r4, lsr #28
   25c8e:	ed94 0b00 	vldr	d0, [r4]
   25c92:	e726      	b.n	25ae2 <__ieee754_fmod+0x8e>
   25c94:	291f      	cmp	r1, #31
   25c96:	dc07      	bgt.n	25ca8 <__ieee754_fmod+0x254>
   25c98:	f206 401e 	addw	r0, r6, #1054	; 0x41e
   25c9c:	fa22 f101 	lsr.w	r1, r2, r1
   25ca0:	4083      	lsls	r3, r0
   25ca2:	ea43 0001 	orr.w	r0, r3, r1
   25ca6:	e78e      	b.n	25bc6 <__ieee754_fmod+0x172>
   25ca8:	4908      	ldr	r1, [pc, #32]	; (25ccc <__ieee754_fmod+0x278>)
   25caa:	1b89      	subs	r1, r1, r6
   25cac:	fa43 f001 	asr.w	r0, r3, r1
   25cb0:	e789      	b.n	25bc6 <__ieee754_fmod+0x172>
   25cb2:	4903      	ldr	r1, [pc, #12]	; (25cc0 <__ieee754_fmod+0x26c>)
   25cb4:	e71b      	b.n	25aee <__ieee754_fmod+0x9a>
   25cb6:	bf00      	nop
   25cb8:	7fefffff 	.word	0x7fefffff
   25cbc:	7ff00000 	.word	0x7ff00000
   25cc0:	fffffbed 	.word	0xfffffbed
   25cc4:	fffffc02 	.word	0xfffffc02
   25cc8:	000292c0 	.word	0x000292c0
   25ccc:	fffffbe2 	.word	0xfffffbe2

00025cd0 <__ieee754_sqrt>:
   25cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25cd4:	4a63      	ldr	r2, [pc, #396]	; (25e64 <__ieee754_sqrt+0x194>)
   25cd6:	ec55 4b10 	vmov	r4, r5, d0
   25cda:	43aa      	bics	r2, r5
   25cdc:	f000 809f 	beq.w	25e1e <__ieee754_sqrt+0x14e>
   25ce0:	2d00      	cmp	r5, #0
   25ce2:	ee10 ca10 	vmov	ip, s0
   25ce6:	462b      	mov	r3, r5
   25ce8:	dd54      	ble.n	25d94 <__ieee754_sqrt+0xc4>
   25cea:	1529      	asrs	r1, r5, #20
   25cec:	d063      	beq.n	25db6 <__ieee754_sqrt+0xe6>
   25cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
   25cf2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   25cf6:	07c9      	lsls	r1, r1, #31
   25cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25cfc:	d404      	bmi.n	25d08 <__ieee754_sqrt+0x38>
   25cfe:	005b      	lsls	r3, r3, #1
   25d00:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   25d04:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25d08:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   25d0c:	2600      	movs	r6, #0
   25d0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   25d12:	107f      	asrs	r7, r7, #1
   25d14:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25d18:	f04f 0e16 	mov.w	lr, #22
   25d1c:	4634      	mov	r4, r6
   25d1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   25d22:	18a1      	adds	r1, r4, r2
   25d24:	4299      	cmp	r1, r3
   25d26:	dc02      	bgt.n	25d2e <__ieee754_sqrt+0x5e>
   25d28:	1a5b      	subs	r3, r3, r1
   25d2a:	188c      	adds	r4, r1, r2
   25d2c:	4416      	add	r6, r2
   25d2e:	005b      	lsls	r3, r3, #1
   25d30:	f1be 0e01 	subs.w	lr, lr, #1
   25d34:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   25d38:	ea4f 0252 	mov.w	r2, r2, lsr #1
   25d3c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25d40:	d1ef      	bne.n	25d22 <__ieee754_sqrt+0x52>
   25d42:	4675      	mov	r5, lr
   25d44:	2020      	movs	r0, #32
   25d46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25d4a:	e00a      	b.n	25d62 <__ieee754_sqrt+0x92>
   25d4c:	d044      	beq.n	25dd8 <__ieee754_sqrt+0x108>
   25d4e:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   25d52:	3801      	subs	r0, #1
   25d54:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   25d58:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25d5c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   25d60:	d043      	beq.n	25dea <__ieee754_sqrt+0x11a>
   25d62:	42a3      	cmp	r3, r4
   25d64:	eb02 010e 	add.w	r1, r2, lr
   25d68:	ddf0      	ble.n	25d4c <__ieee754_sqrt+0x7c>
   25d6a:	2900      	cmp	r1, #0
   25d6c:	eb01 0e02 	add.w	lr, r1, r2
   25d70:	db0a      	blt.n	25d88 <__ieee754_sqrt+0xb8>
   25d72:	46a0      	mov	r8, r4
   25d74:	1b1b      	subs	r3, r3, r4
   25d76:	4561      	cmp	r1, ip
   25d78:	bf88      	it	hi
   25d7a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   25d7e:	ebac 0c01 	sub.w	ip, ip, r1
   25d82:	4415      	add	r5, r2
   25d84:	4644      	mov	r4, r8
   25d86:	e7e2      	b.n	25d4e <__ieee754_sqrt+0x7e>
   25d88:	f1be 0f00 	cmp.w	lr, #0
   25d8c:	dbf1      	blt.n	25d72 <__ieee754_sqrt+0xa2>
   25d8e:	f104 0801 	add.w	r8, r4, #1
   25d92:	e7ef      	b.n	25d74 <__ieee754_sqrt+0xa4>
   25d94:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   25d98:	4322      	orrs	r2, r4
   25d9a:	d038      	beq.n	25e0e <__ieee754_sqrt+0x13e>
   25d9c:	2d00      	cmp	r5, #0
   25d9e:	d14e      	bne.n	25e3e <__ieee754_sqrt+0x16e>
   25da0:	4629      	mov	r1, r5
   25da2:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   25da6:	3915      	subs	r1, #21
   25da8:	4613      	mov	r3, r2
   25daa:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   25dae:	2a00      	cmp	r2, #0
   25db0:	d0f7      	beq.n	25da2 <__ieee754_sqrt+0xd2>
   25db2:	02d6      	lsls	r6, r2, #11
   25db4:	d450      	bmi.n	25e58 <__ieee754_sqrt+0x188>
   25db6:	2000      	movs	r0, #0
   25db8:	005b      	lsls	r3, r3, #1
   25dba:	02dd      	lsls	r5, r3, #11
   25dbc:	4604      	mov	r4, r0
   25dbe:	f100 0001 	add.w	r0, r0, #1
   25dc2:	d5f9      	bpl.n	25db8 <__ieee754_sqrt+0xe8>
   25dc4:	461a      	mov	r2, r3
   25dc6:	4663      	mov	r3, ip
   25dc8:	fa0c fc00 	lsl.w	ip, ip, r0
   25dcc:	f1c0 0020 	rsb	r0, r0, #32
   25dd0:	40c3      	lsrs	r3, r0
   25dd2:	1b09      	subs	r1, r1, r4
   25dd4:	4313      	orrs	r3, r2
   25dd6:	e78a      	b.n	25cee <__ieee754_sqrt+0x1e>
   25dd8:	4561      	cmp	r1, ip
   25dda:	d8b8      	bhi.n	25d4e <__ieee754_sqrt+0x7e>
   25ddc:	2900      	cmp	r1, #0
   25dde:	eb01 0e02 	add.w	lr, r1, r2
   25de2:	dbd1      	blt.n	25d88 <__ieee754_sqrt+0xb8>
   25de4:	4698      	mov	r8, r3
   25de6:	2300      	movs	r3, #0
   25de8:	e7c9      	b.n	25d7e <__ieee754_sqrt+0xae>
   25dea:	ea53 030c 	orrs.w	r3, r3, ip
   25dee:	d110      	bne.n	25e12 <__ieee754_sqrt+0x142>
   25df0:	0868      	lsrs	r0, r5, #1
   25df2:	1071      	asrs	r1, r6, #1
   25df4:	07f3      	lsls	r3, r6, #31
   25df6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   25dfa:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   25dfe:	bf48      	it	mi
   25e00:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   25e04:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   25e08:	4602      	mov	r2, r0
   25e0a:	ec43 2b10 	vmov	d0, r2, r3
   25e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e12:	1c6a      	adds	r2, r5, #1
   25e14:	bf16      	itet	ne
   25e16:	1c68      	addne	r0, r5, #1
   25e18:	3601      	addeq	r6, #1
   25e1a:	0840      	lsrne	r0, r0, #1
   25e1c:	e7e9      	b.n	25df2 <__ieee754_sqrt+0x122>
   25e1e:	ee10 2a10 	vmov	r2, s0
   25e22:	ee10 0a10 	vmov	r0, s0
   25e26:	462b      	mov	r3, r5
   25e28:	4629      	mov	r1, r5
   25e2a:	f7fe fc45 	bl	246b8 <__aeabi_dmul>
   25e2e:	4622      	mov	r2, r4
   25e30:	462b      	mov	r3, r5
   25e32:	f7fe fa8b 	bl	2434c <__adddf3>
   25e36:	ec41 0b10 	vmov	d0, r0, r1
   25e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e3e:	ee10 2a10 	vmov	r2, s0
   25e42:	4620      	mov	r0, r4
   25e44:	4629      	mov	r1, r5
   25e46:	f7fe fa7f 	bl	24348 <__aeabi_dsub>
   25e4a:	4602      	mov	r2, r0
   25e4c:	460b      	mov	r3, r1
   25e4e:	f7fe fd5d 	bl	2490c <__aeabi_ddiv>
   25e52:	ec41 0b10 	vmov	d0, r0, r1
   25e56:	e7da      	b.n	25e0e <__ieee754_sqrt+0x13e>
   25e58:	4663      	mov	r3, ip
   25e5a:	2020      	movs	r0, #32
   25e5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25e60:	e7b6      	b.n	25dd0 <__ieee754_sqrt+0x100>
   25e62:	bf00      	nop
   25e64:	7ff00000 	.word	0x7ff00000

00025e68 <__ieee754_log10f>:
   25e68:	b508      	push	{r3, lr}
   25e6a:	ee10 3a10 	vmov	r3, s0
   25e6e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   25e72:	ed2d 8b02 	vpush	{d8}
   25e76:	d02b      	beq.n	25ed0 <__ieee754_log10f+0x68>
   25e78:	2b00      	cmp	r3, #0
   25e7a:	db32      	blt.n	25ee2 <__ieee754_log10f+0x7a>
   25e7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   25e80:	da41      	bge.n	25f06 <__ieee754_log10f+0x9e>
   25e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   25e86:	db35      	blt.n	25ef4 <__ieee754_log10f+0x8c>
   25e88:	2100      	movs	r1, #0
   25e8a:	15da      	asrs	r2, r3, #23
   25e8c:	3a7f      	subs	r2, #127	; 0x7f
   25e8e:	440a      	add	r2, r1
   25e90:	0fd1      	lsrs	r1, r2, #31
   25e92:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   25e96:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   25e9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   25e9e:	ee07 2a90 	vmov	s15, r2
   25ea2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   25ea6:	ee00 3a10 	vmov	s0, r3
   25eaa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   25eae:	f000 f849 	bl	25f44 <__ieee754_logf>
   25eb2:	eddf 7a17 	vldr	s15, [pc, #92]	; 25f10 <__ieee754_log10f+0xa8>
   25eb6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 25f14 <__ieee754_log10f+0xac>
   25eba:	ee20 0a27 	vmul.f32	s0, s0, s15
   25ebe:	eddf 7a16 	vldr	s15, [pc, #88]	; 25f18 <__ieee754_log10f+0xb0>
   25ec2:	eea8 0a07 	vfma.f32	s0, s16, s14
   25ec6:	eea8 0a27 	vfma.f32	s0, s16, s15
   25eca:	ecbd 8b02 	vpop	{d8}
   25ece:	bd08      	pop	{r3, pc}
   25ed0:	ecbd 8b02 	vpop	{d8}
   25ed4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 25f1c <__ieee754_log10f+0xb4>
   25ed8:	eddf 7a11 	vldr	s15, [pc, #68]	; 25f20 <__ieee754_log10f+0xb8>
   25edc:	ee87 0a27 	vdiv.f32	s0, s14, s15
   25ee0:	bd08      	pop	{r3, pc}
   25ee2:	ecbd 8b02 	vpop	{d8}
   25ee6:	ee70 7a40 	vsub.f32	s15, s0, s0
   25eea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 25f20 <__ieee754_log10f+0xb8>
   25eee:	ee87 0a87 	vdiv.f32	s0, s15, s14
   25ef2:	bd08      	pop	{r3, pc}
   25ef4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 25f24 <__ieee754_log10f+0xbc>
   25ef8:	ee60 7a27 	vmul.f32	s15, s0, s15
   25efc:	f06f 0118 	mvn.w	r1, #24
   25f00:	ee17 3a90 	vmov	r3, s15
   25f04:	e7c1      	b.n	25e8a <__ieee754_log10f+0x22>
   25f06:	ecbd 8b02 	vpop	{d8}
   25f0a:	ee30 0a00 	vadd.f32	s0, s0, s0
   25f0e:	bd08      	pop	{r3, pc}
   25f10:	3ede5bd9 	.word	0x3ede5bd9
   25f14:	355427db 	.word	0x355427db
   25f18:	3e9a2080 	.word	0x3e9a2080
   25f1c:	cc000000 	.word	0xcc000000
   25f20:	00000000 	.word	0x00000000
   25f24:	4c000000 	.word	0x4c000000

00025f28 <nan>:
   25f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 25f30 <nan+0x8>
   25f2c:	4770      	bx	lr
   25f2e:	bf00      	nop
   25f30:	00000000 	.word	0x00000000
   25f34:	7ff80000 	.word	0x7ff80000

00025f38 <nanf>:
   25f38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 25f40 <nanf+0x8>
   25f3c:	4770      	bx	lr
   25f3e:	bf00      	nop
   25f40:	7fc00000 	.word	0x7fc00000

00025f44 <__ieee754_logf>:
   25f44:	ee10 3a10 	vmov	r3, s0
   25f48:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   25f4c:	d02e      	beq.n	25fac <__ieee754_logf+0x68>
   25f4e:	2b00      	cmp	r3, #0
   25f50:	db33      	blt.n	25fba <__ieee754_logf+0x76>
   25f52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   25f56:	da40      	bge.n	25fda <__ieee754_logf+0x96>
   25f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   25f5c:	db34      	blt.n	25fc8 <__ieee754_logf+0x84>
   25f5e:	f04f 0c00 	mov.w	ip, #0
   25f62:	4868      	ldr	r0, [pc, #416]	; (26104 <__ieee754_logf+0x1c0>)
   25f64:	f3c3 0116 	ubfx	r1, r3, #0, #23
   25f68:	4408      	add	r0, r1
   25f6a:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
   25f6e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
   25f72:	430a      	orrs	r2, r1
   25f74:	15db      	asrs	r3, r3, #23
   25f76:	ee00 2a10 	vmov	s0, r2
   25f7a:	3b7f      	subs	r3, #127	; 0x7f
   25f7c:	4a62      	ldr	r2, [pc, #392]	; (26108 <__ieee754_logf+0x1c4>)
   25f7e:	4463      	add	r3, ip
   25f80:	f101 0c0f 	add.w	ip, r1, #15
   25f84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   25f88:	ea0c 0202 	and.w	r2, ip, r2
   25f8c:	ee30 0a67 	vsub.f32	s0, s0, s15
   25f90:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
   25f94:	bb22      	cbnz	r2, 25fe0 <__ieee754_logf+0x9c>
   25f96:	eeb5 0a40 	vcmp.f32	s0, #0.0
   25f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25f9e:	d160      	bne.n	26062 <__ieee754_logf+0x11e>
   25fa0:	2b00      	cmp	r3, #0
   25fa2:	f040 8092 	bne.w	260ca <__ieee754_logf+0x186>
   25fa6:	ed9f 0a59 	vldr	s0, [pc, #356]	; 2610c <__ieee754_logf+0x1c8>
   25faa:	4770      	bx	lr
   25fac:	ed9f 7a58 	vldr	s14, [pc, #352]	; 26110 <__ieee754_logf+0x1cc>
   25fb0:	eddf 7a56 	vldr	s15, [pc, #344]	; 2610c <__ieee754_logf+0x1c8>
   25fb4:	ee87 0a27 	vdiv.f32	s0, s14, s15
   25fb8:	4770      	bx	lr
   25fba:	ee70 7a40 	vsub.f32	s15, s0, s0
   25fbe:	ed9f 7a53 	vldr	s14, [pc, #332]	; 2610c <__ieee754_logf+0x1c8>
   25fc2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   25fc6:	4770      	bx	lr
   25fc8:	eddf 7a52 	vldr	s15, [pc, #328]	; 26114 <__ieee754_logf+0x1d0>
   25fcc:	ee60 7a27 	vmul.f32	s15, s0, s15
   25fd0:	f06f 0c18 	mvn.w	ip, #24
   25fd4:	ee17 3a90 	vmov	r3, s15
   25fd8:	e7c3      	b.n	25f62 <__ieee754_logf+0x1e>
   25fda:	ee30 0a00 	vadd.f32	s0, s0, s0
   25fde:	4770      	bx	lr
   25fe0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   25fe4:	ee70 7a27 	vadd.f32	s15, s0, s15
   25fe8:	ee07 3a10 	vmov	s14, r3
   25fec:	ee80 4a27 	vdiv.f32	s8, s0, s15
   25ff0:	4849      	ldr	r0, [pc, #292]	; (26118 <__ieee754_logf+0x1d4>)
   25ff2:	f5c1 1257 	rsb	r2, r1, #3522560	; 0x35c000
   25ff6:	4408      	add	r0, r1
   25ff8:	f502 7222 	add.w	r2, r2, #648	; 0x288
   25ffc:	4302      	orrs	r2, r0
   25ffe:	2a00      	cmp	r2, #0
   26000:	ed9f 3a46 	vldr	s6, [pc, #280]	; 2611c <__ieee754_logf+0x1d8>
   26004:	eddf 4a46 	vldr	s9, [pc, #280]	; 26120 <__ieee754_logf+0x1dc>
   26008:	eddf 5a46 	vldr	s11, [pc, #280]	; 26124 <__ieee754_logf+0x1e0>
   2600c:	eddf 3a46 	vldr	s7, [pc, #280]	; 26128 <__ieee754_logf+0x1e4>
   26010:	ed9f 5a46 	vldr	s10, [pc, #280]	; 2612c <__ieee754_logf+0x1e8>
   26014:	eddf 7a46 	vldr	s15, [pc, #280]	; 26130 <__ieee754_logf+0x1ec>
   26018:	eddf 6a46 	vldr	s13, [pc, #280]	; 26134 <__ieee754_logf+0x1f0>
   2601c:	ee24 6a04 	vmul.f32	s12, s8, s8
   26020:	eef8 2ac7 	vcvt.f32.s32	s5, s14
   26024:	ee26 7a06 	vmul.f32	s14, s12, s12
   26028:	eee7 4a03 	vfma.f32	s9, s14, s6
   2602c:	eea7 5a23 	vfma.f32	s10, s14, s7
   26030:	eee4 5a87 	vfma.f32	s11, s9, s14
   26034:	eee5 6a07 	vfma.f32	s13, s10, s14
   26038:	eee5 7a87 	vfma.f32	s15, s11, s14
   2603c:	ee67 7a86 	vmul.f32	s15, s15, s12
   26040:	eee6 7a87 	vfma.f32	s15, s13, s14
   26044:	dd2a      	ble.n	2609c <__ieee754_logf+0x158>
   26046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2604a:	ee20 7a07 	vmul.f32	s14, s0, s14
   2604e:	ee27 7a00 	vmul.f32	s14, s14, s0
   26052:	bb4b      	cbnz	r3, 260a8 <__ieee754_logf+0x164>
   26054:	ee77 7a87 	vadd.f32	s15, s15, s14
   26058:	eea7 7ac4 	vfms.f32	s14, s15, s8
   2605c:	ee30 0a47 	vsub.f32	s0, s0, s14
   26060:	4770      	bx	lr
   26062:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   26066:	eddf 6a34 	vldr	s13, [pc, #208]	; 26138 <__ieee754_logf+0x1f4>
   2606a:	eef0 7a47 	vmov.f32	s15, s14
   2606e:	eee0 7a66 	vfms.f32	s15, s0, s13
   26072:	ee20 7a00 	vmul.f32	s14, s0, s0
   26076:	ee27 7a27 	vmul.f32	s14, s14, s15
   2607a:	2b00      	cmp	r3, #0
   2607c:	d0ee      	beq.n	2605c <__ieee754_logf+0x118>
   2607e:	ee07 3a90 	vmov	s15, r3
   26082:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 2613c <__ieee754_logf+0x1f8>
   26086:	eddf 6a2e 	vldr	s13, [pc, #184]	; 26140 <__ieee754_logf+0x1fc>
   2608a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2608e:	eea7 7ac6 	vfms.f32	s14, s15, s12
   26092:	ee37 0a40 	vsub.f32	s0, s14, s0
   26096:	ee97 0aa6 	vfnms.f32	s0, s15, s13
   2609a:	4770      	bx	lr
   2609c:	bb13      	cbnz	r3, 260e4 <__ieee754_logf+0x1a0>
   2609e:	ee70 7a67 	vsub.f32	s15, s0, s15
   260a2:	eea7 0ac4 	vfms.f32	s0, s15, s8
   260a6:	4770      	bx	lr
   260a8:	eddf 6a24 	vldr	s13, [pc, #144]	; 2613c <__ieee754_logf+0x1f8>
   260ac:	ed9f 6a24 	vldr	s12, [pc, #144]	; 26140 <__ieee754_logf+0x1fc>
   260b0:	ee77 7a87 	vadd.f32	s15, s15, s14
   260b4:	ee62 6aa6 	vmul.f32	s13, s5, s13
   260b8:	eee7 6a84 	vfma.f32	s13, s15, s8
   260bc:	ee37 7a66 	vsub.f32	s14, s14, s13
   260c0:	ee37 0a40 	vsub.f32	s0, s14, s0
   260c4:	ee92 0a86 	vfnms.f32	s0, s5, s12
   260c8:	4770      	bx	lr
   260ca:	ee07 3a90 	vmov	s15, r3
   260ce:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 2613c <__ieee754_logf+0x1f8>
   260d2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 26140 <__ieee754_logf+0x1fc>
   260d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   260da:	ee27 0a80 	vmul.f32	s0, s15, s0
   260de:	eea7 0a87 	vfma.f32	s0, s15, s14
   260e2:	4770      	bx	lr
   260e4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2613c <__ieee754_logf+0x1f8>
   260e8:	eddf 6a15 	vldr	s13, [pc, #84]	; 26140 <__ieee754_logf+0x1fc>
   260ec:	ee70 7a67 	vsub.f32	s15, s0, s15
   260f0:	ee27 7a62 	vnmul.f32	s14, s14, s5
   260f4:	eea7 7a84 	vfma.f32	s14, s15, s8
   260f8:	ee37 0a40 	vsub.f32	s0, s14, s0
   260fc:	ee92 0aa6 	vfnms.f32	s0, s5, s13
   26100:	4770      	bx	lr
   26102:	bf00      	nop
   26104:	004afb20 	.word	0x004afb20
   26108:	007ffff0 	.word	0x007ffff0
   2610c:	00000000 	.word	0x00000000
   26110:	cc000000 	.word	0xcc000000
   26114:	4c000000 	.word	0x4c000000
   26118:	ffcf5c30 	.word	0xffcf5c30
   2611c:	3e178897 	.word	0x3e178897
   26120:	3e3a3325 	.word	0x3e3a3325
   26124:	3e924925 	.word	0x3e924925
   26128:	3e1cd04f 	.word	0x3e1cd04f
   2612c:	3e638e29 	.word	0x3e638e29
   26130:	3f2aaaab 	.word	0x3f2aaaab
   26134:	3ecccccd 	.word	0x3ecccccd
   26138:	3eaaaaab 	.word	0x3eaaaaab
   2613c:	3717f7d1 	.word	0x3717f7d1
   26140:	3f317180 	.word	0x3f317180

00026144 <__errno>:
   26144:	4b01      	ldr	r3, [pc, #4]	; (2614c <__errno+0x8>)
   26146:	6818      	ldr	r0, [r3, #0]
   26148:	4770      	bx	lr
   2614a:	bf00      	nop
   2614c:	20001348 	.word	0x20001348
   26150:	7475227b 	.word	0x7475227b
   26154:	22656d69 	.word	0x22656d69
   26158:	6c25203a 	.word	0x6c25203a
   2615c:	6d222c75 	.word	0x6d222c75
   26160:	3a226773 	.word	0x3a226773
   26164:	6c732220 	.word	0x6c732220
   26168:	695f746f 	.word	0x695f746f
   2616c:	203d2064 	.word	0x203d2064
   26170:	7d226425 	.word	0x7d226425
   26174:	0000000a 	.word	0x0000000a
   26178:	7475227b 	.word	0x7475227b
   2617c:	22656d69 	.word	0x22656d69
   26180:	6c25203a 	.word	0x6c25203a
   26184:	6d222c75 	.word	0x6d222c75
   26188:	3a226773 	.word	0x3a226773
   2618c:	75652220 	.word	0x75652220
   26190:	36316469 	.word	0x36316469
   26194:	30203d20 	.word	0x30203d20
   26198:	22582578 	.word	0x22582578
   2619c:	00000a7d 	.word	0x00000a7d
   261a0:	7475227b 	.word	0x7475227b
   261a4:	22656d69 	.word	0x22656d69
   261a8:	6c25203a 	.word	0x6c25203a
   261ac:	6d222c75 	.word	0x6d222c75
   261b0:	3a226773 	.word	0x3a226773
   261b4:	6c732220 	.word	0x6c732220
   261b8:	745f746f 	.word	0x745f746f
   261bc:	72656d69 	.word	0x72656d69
   261c0:	5f62635f 	.word	0x5f62635f
   261c4:	733a6425 	.word	0x733a6425
   261c8:	74726174 	.word	0x74726174
   261cc:	5f78745f 	.word	0x5f78745f
   261d0:	6f727265 	.word	0x6f727265
   261d4:	0a7d2272 	.word	0x0a7d2272
   261d8:	00000000 	.word	0x00000000
   261dc:	73707061 	.word	0x73707061
   261e0:	7277742f 	.word	0x7277742f
   261e4:	61726e5f 	.word	0x61726e5f
   261e8:	7365676e 	.word	0x7365676e
   261ec:	6d64745f 	.word	0x6d64745f
   261f0:	72732f61 	.word	0x72732f61
   261f4:	616d2f63 	.word	0x616d2f63
   261f8:	632e6e69 	.word	0x632e6e69
   261fc:	00000000 	.word	0x00000000
   26200:	7475227b 	.word	0x7475227b
   26204:	22656d69 	.word	0x22656d69
   26208:	6c25203a 	.word	0x6c25203a
   2620c:	65222c75 	.word	0x65222c75
   26210:	22636578 	.word	0x22636578
   26214:	2522203a 	.word	0x2522203a
   26218:	0a7d2273 	.word	0x0a7d2273
   2621c:	00000000 	.word	0x00000000
   26220:	6564227b 	.word	0x6564227b
   26224:	65636976 	.word	0x65636976
   26228:	2264695f 	.word	0x2264695f
   2622c:	6c25223a 	.word	0x6c25223a
   26230:	00002258 	.word	0x00002258
   26234:	6170222c 	.word	0x6170222c
   26238:	2264696e 	.word	0x2264696e
   2623c:	5825223a 	.word	0x5825223a
   26240:	00000022 	.word	0x00000022
   26244:	6461222c 	.word	0x6461222c
   26248:	3a227264 	.word	0x3a227264
   2624c:	22582522 	.word	0x22582522
   26250:	00000000 	.word	0x00000000
   26254:	6170222c 	.word	0x6170222c
   26258:	695f7472 	.word	0x695f7472
   2625c:	223a2264 	.word	0x223a2264
   26260:	22586c25 	.word	0x22586c25
   26264:	00000000 	.word	0x00000000
   26268:	6f6c222c 	.word	0x6f6c222c
   2626c:	64695f74 	.word	0x64695f74
   26270:	25223a22 	.word	0x25223a22
   26274:	7d22586c 	.word	0x7d22586c
   26278:	0000000a 	.word	0x0000000a
   2627c:	7475227b 	.word	0x7475227b
   26280:	22656d69 	.word	0x22656d69
   26284:	6c25203a 	.word	0x6c25203a
   26288:	6d222c75 	.word	0x6d222c75
   2628c:	3a226773 	.word	0x3a226773
   26290:	72662220 	.word	0x72662220
   26294:	5f656d61 	.word	0x5f656d61
   26298:	61727564 	.word	0x61727564
   2629c:	6e6f6974 	.word	0x6e6f6974
   262a0:	25203d20 	.word	0x25203d20
   262a4:	73752064 	.word	0x73752064
   262a8:	7d226365 	.word	0x7d226365
   262ac:	0000000a 	.word	0x0000000a
   262b0:	7475227b 	.word	0x7475227b
   262b4:	22656d69 	.word	0x22656d69
   262b8:	6c25203a 	.word	0x6c25203a
   262bc:	6d222c75 	.word	0x6d222c75
   262c0:	3a226773 	.word	0x3a226773
   262c4:	48532220 	.word	0x48532220
   262c8:	75645f52 	.word	0x75645f52
   262cc:	69746172 	.word	0x69746172
   262d0:	3d206e6f 	.word	0x3d206e6f
   262d4:	20642520 	.word	0x20642520
   262d8:	63657375 	.word	0x63657375
   262dc:	000a7d22 	.word	0x000a7d22
   262e0:	7475227b 	.word	0x7475227b
   262e4:	22656d69 	.word	0x22656d69
   262e8:	6c25203a 	.word	0x6c25203a
   262ec:	6d222c75 	.word	0x6d222c75
   262f0:	3a226773 	.word	0x3a226773
   262f4:	6f682220 	.word	0x6f682220
   262f8:	666f646c 	.word	0x666f646c
   262fc:	203d2066 	.word	0x203d2066
   26300:	75206425 	.word	0x75206425
   26304:	22636573 	.word	0x22636573
   26308:	00000a7d 	.word	0x00000a7d
   2630c:	30317764 	.word	0x30317764
   26310:	255f3030 	.word	0x255f3030
   26314:	00000064 	.word	0x00000064
   26318:	30337764 	.word	0x30337764
   2631c:	255f3030 	.word	0x255f3030
   26320:	00000064 	.word	0x00000064
   26324:	5f627775 	.word	0x5f627775
   26328:	00717269 	.word	0x00717269
   2632c:	65737341 	.word	0x65737341
   26330:	40207472 	.word	0x40207472
   26334:	25783020 	.word	0x25783020
   26338:	00000a78 	.word	0x00000a78
   2633c:	65737341 	.word	0x65737341
   26340:	40207472 	.word	0x40207472
   26344:	25783020 	.word	0x25783020
   26348:	202d2078 	.word	0x202d2078
   2634c:	253a7325 	.word	0x253a7325
   26350:	00000a64 	.word	0x00000a64
   26354:	61686e55 	.word	0x61686e55
   26358:	656c646e 	.word	0x656c646e
   2635c:	6e692064 	.word	0x6e692064
   26360:	72726574 	.word	0x72726574
   26364:	20747075 	.word	0x20747075
   26368:	646c2528 	.word	0x646c2528
   2636c:	65202c29 	.word	0x65202c29
   26370:	70656378 	.word	0x70656378
   26374:	6e6f6974 	.word	0x6e6f6974
   26378:	20707320 	.word	0x20707320
   2637c:	30257830 	.word	0x30257830
   26380:	0a786c38 	.word	0x0a786c38
   26384:	00000000 	.word	0x00000000
   26388:	3a307220 	.word	0x3a307220
   2638c:	30257830 	.word	0x30257830
   26390:	20786c38 	.word	0x20786c38
   26394:	3a317220 	.word	0x3a317220
   26398:	30257830 	.word	0x30257830
   2639c:	20786c38 	.word	0x20786c38
   263a0:	3a327220 	.word	0x3a327220
   263a4:	30257830 	.word	0x30257830
   263a8:	20786c38 	.word	0x20786c38
   263ac:	3a337220 	.word	0x3a337220
   263b0:	30257830 	.word	0x30257830
   263b4:	0a786c38 	.word	0x0a786c38
   263b8:	00000000 	.word	0x00000000
   263bc:	3a347220 	.word	0x3a347220
   263c0:	30257830 	.word	0x30257830
   263c4:	20786c38 	.word	0x20786c38
   263c8:	3a357220 	.word	0x3a357220
   263cc:	30257830 	.word	0x30257830
   263d0:	20786c38 	.word	0x20786c38
   263d4:	3a367220 	.word	0x3a367220
   263d8:	30257830 	.word	0x30257830
   263dc:	20786c38 	.word	0x20786c38
   263e0:	3a377220 	.word	0x3a377220
   263e4:	30257830 	.word	0x30257830
   263e8:	0a786c38 	.word	0x0a786c38
   263ec:	00000000 	.word	0x00000000
   263f0:	3a387220 	.word	0x3a387220
   263f4:	30257830 	.word	0x30257830
   263f8:	20786c38 	.word	0x20786c38
   263fc:	3a397220 	.word	0x3a397220
   26400:	30257830 	.word	0x30257830
   26404:	20786c38 	.word	0x20786c38
   26408:	3a303172 	.word	0x3a303172
   2640c:	30257830 	.word	0x30257830
   26410:	20786c38 	.word	0x20786c38
   26414:	3a313172 	.word	0x3a313172
   26418:	30257830 	.word	0x30257830
   2641c:	0a786c38 	.word	0x0a786c38
   26420:	00000000 	.word	0x00000000
   26424:	3a323172 	.word	0x3a323172
   26428:	30257830 	.word	0x30257830
   2642c:	20786c38 	.word	0x20786c38
   26430:	3a726c20 	.word	0x3a726c20
   26434:	30257830 	.word	0x30257830
   26438:	20786c38 	.word	0x20786c38
   2643c:	3a637020 	.word	0x3a637020
   26440:	30257830 	.word	0x30257830
   26444:	20786c38 	.word	0x20786c38
   26448:	3a727370 	.word	0x3a727370
   2644c:	30257830 	.word	0x30257830
   26450:	0a786c38 	.word	0x0a786c38
   26454:	00000000 	.word	0x00000000
   26458:	52534349 	.word	0x52534349
   2645c:	2578303a 	.word	0x2578303a
   26460:	786c3830 	.word	0x786c3830
   26464:	53464820 	.word	0x53464820
   26468:	78303a52 	.word	0x78303a52
   2646c:	6c383025 	.word	0x6c383025
   26470:	46432078 	.word	0x46432078
   26474:	303a5253 	.word	0x303a5253
   26478:	38302578 	.word	0x38302578
   2647c:	000a786c 	.word	0x000a786c
   26480:	52414642 	.word	0x52414642
   26484:	2578303a 	.word	0x2578303a
   26488:	786c3830 	.word	0x786c3830
   2648c:	464d4d20 	.word	0x464d4d20
   26490:	303a5241 	.word	0x303a5241
   26494:	38302578 	.word	0x38302578
   26498:	000a786c 	.word	0x000a786c
   2649c:	656c6469 	.word	0x656c6469
   264a0:	00000000 	.word	0x00000000
   264a4:	6e69616d 	.word	0x6e69616d
   264a8:	00000000 	.word	0x00000000
   264ac:	7379736d 	.word	0x7379736d
   264b0:	0000315f 	.word	0x0000315f
   264b4:	4d525245 	.word	0x4d525245
   264b8:	25204d45 	.word	0x25204d45
   264bc:	00000a64 	.word	0x00000a64
   264c0:	7475227b 	.word	0x7475227b
   264c4:	22656d69 	.word	0x22656d69
   264c8:	6c25203a 	.word	0x6c25203a
   264cc:	6d222c75 	.word	0x6d222c75
   264d0:	3a226773 	.word	0x3a226773
   264d4:	6d6e2220 	.word	0x6d6e2220
   264d8:	755f7267 	.word	0x755f7267
   264dc:	695f6277 	.word	0x695f6277
   264e0:	2274696e 	.word	0x2274696e
   264e4:	00000a7d 	.word	0x00000a7d
   264e8:	20425755 	.word	0x20425755
   264ec:	52474d4e 	.word	0x52474d4e
   264f0:	3a78745f 	.word	0x3a78745f
   264f4:	20785420 	.word	0x20785420
   264f8:	6f727245 	.word	0x6f727245
   264fc:	00002072 	.word	0x00002072
   26500:	23232323 	.word	0x23232323
   26504:	52452023 	.word	0x52452023
   26508:	20524f52 	.word	0x20524f52
   2650c:	5f627775 	.word	0x5f627775
   26510:	72676d6e 	.word	0x72676d6e
   26514:	6520715f 	.word	0x6520715f
   26518:	665f7478 	.word	0x665f7478
   2651c:	656c6961 	.word	0x656c6961
   26520:	00000064 	.word	0x00000064
   26524:	23232323 	.word	0x23232323
   26528:	52452023 	.word	0x52452023
   2652c:	20524f52 	.word	0x20524f52
   26530:	5f627775 	.word	0x5f627775
   26534:	72676d6e 	.word	0x72676d6e
   26538:	7220715f 	.word	0x7220715f
   2653c:	64253a63 	.word	0x64253a63
   26540:	0000000a 	.word	0x0000000a
   26544:	676e726e 	.word	0x676e726e
   26548:	00000000 	.word	0x00000000
   2654c:	7475227b 	.word	0x7475227b
   26550:	22656d69 	.word	0x22656d69
   26554:	6c25203a 	.word	0x6c25203a
   26558:	6d222c75 	.word	0x6d222c75
   2655c:	3a226773 	.word	0x3a226773
   26560:	726e2220 	.word	0x726e2220
   26564:	705f676e 	.word	0x705f676e
   26568:	695f676b 	.word	0x695f676b
   2656c:	2274696e 	.word	0x2274696e
   26570:	00000a7d 	.word	0x00000a7d
   26574:	676e726e 	.word	0x676e726e
   26578:	7165725f 	.word	0x7165725f
   2657c:	74736575 	.word	0x74736575
   26580:	00000000 	.word	0x00000000
   26584:	676e726e 	.word	0x676e726e
   26588:	73696c5f 	.word	0x73696c5f
   2658c:	006e6574 	.word	0x006e6574
   26590:	635f7872 	.word	0x635f7872
   26594:	6c706d6f 	.word	0x6c706d6f
   26598:	00657465 	.word	0x00657465
   2659c:	655f7872 	.word	0x655f7872
   265a0:	726f7272 	.word	0x726f7272
   265a4:	00000000 	.word	0x00000000
   265a8:	745f7872 	.word	0x745f7872
   265ac:	6f656d69 	.word	0x6f656d69
   265b0:	00007475 	.word	0x00007475
   265b4:	706d6f63 	.word	0x706d6f63
   265b8:	6574656c 	.word	0x6574656c
   265bc:	00000000 	.word	0x00000000
   265c0:	72617473 	.word	0x72617473
   265c4:	78725f74 	.word	0x78725f74
   265c8:	7272655f 	.word	0x7272655f
   265cc:	0000726f 	.word	0x0000726f
   265d0:	755f7872 	.word	0x755f7872
   265d4:	6c6f736e 	.word	0x6c6f736e
   265d8:	74696369 	.word	0x74696369
   265dc:	00006465 	.word	0x00006465
   265e0:	655f7874 	.word	0x655f7874
   265e4:	726f7272 	.word	0x726f7272
   265e8:	00000000 	.word	0x00000000
   265ec:	72617473 	.word	0x72617473
   265f0:	78745f74 	.word	0x78745f74
   265f4:	7272655f 	.word	0x7272655f
   265f8:	0000726f 	.word	0x0000726f

000265fc <g_stats_map_nrng_stat_section>:
   265fc:	65740014 00180002 00026584 6590001c     ..te.....e.....e
   2660c:	00280002 0002659c 65a80020 00240002     ..(..e.. ..e..$.
   2661c:	000265b4 65c0002c 00300002 000265d0     .e..,..e..0..e..
   2662c:	65e00034 00380002 000265ec 6cf8003c     4..e..8..e..<..l
   2663c:	00000002 6d697475 00000065 00716573     ....utime...seq.
   2664c:	00646975 6469756f 00000000 00000000     uid.ouid........
   2665c:	6d6e6170 2f727473 5f6e6170 00006469     panmstr/pan_id..
   2666c:	6d6e6170 6f6e203a 75206564 000a6470     panm: node upd..
   2667c:	6c707544 6f687320 61207472 20726464     Dupl short addr 
   2668c:	000a7825 6d6e6170 6f6e203a 61206564     %x..panm: node a
   2669c:	64656464 0000000a 6d6e6170 65747361     dded....panmaste
   266ac:	65645f72 6574656c 646f6e5f 6e203a65     r_delete_node: n
   266bc:	2065646f 656c6564 0a646574 00000000     ode deleted.....
   266cc:	6d6e6170 00727473 6e692023 20786564     panmstr.# index 
   266dc:	72646461 69756520 6c662064 20736761     addr euid flags 
   266ec:	656c6f72 6c737020 7320746f 5f746f6c     role pslot slot_
   266fc:	66206469 65762d77 00000a72 20643325     id fw-ver...%3d 
   2670c:	78343025 31302520 786c6c36 20782520     %04x %016llx %x 
   2671c:	25207825 64252064 00000020 00000070     %x %d %d ...p...
   2672c:	3a727265 0a6d656d 00000000 78646923     err:mem.....#idx
   2673c:	6461202c 202c7264 656c6f72 6c73202c     , addr, role, sl
   2674c:	202c746f 20202c70 7361656c 65202c65     ot, p,  lease, e
   2675c:	2c646975 20202020 20202020 20202020     uid,            
   2676c:	616c6620 202c7367 20202020 20202020      flags,         
   2677c:	74616420 64612d65 2c646564 2d776620      date-added, fw-
   2678c:	0a726576 00000000 2c643425 00000020     ver.....%4d, ...
   2679c:	2c783425 00000020 2c583425 00000020     %4x, ...%4X, ...
   267ac:	20202020 0000202c 202c7325 00000000         , ..%s, ....
   267bc:	646c3425 646c252e 0000202c 20202020     %4ld.%ld, ..    
   267cc:	202c2020 00000000 36313025 2c586c6c       , ....%016llX,
   267dc:	00000020 2c583525 00000020 00007325      ...%5X, ...%s..
   267ec:	206f6f54 20776566 73677261 0000000a     Too few args....
   267fc:	7473696c 00000000 00646461 64697565     list....add.euid
   2680c:	65656e20 0a646564 00000000 65646441      needed.....Adde
   2681c:	6f6e2064 65206564 3a646975 25783020     d node euid: 0x%
   2682c:	2c586c6c 64646120 78302072 000a5825     llX, addr 0x%X..
   2683c:	20646441 65646f6e 72726520 0000000a     Add node err....
   2684c:	006c6564 6f6c7370 00000074 64697565     del.pslot...euid
   2685c:	6f6c732b 64695f74 65656e20 0a646564     +slot_id needed.
   2686c:	00000000 6c257830 203a586c 6f6c7370     ....0x%llX: pslo
   2687c:	3e2d2074 00000020 6d65723c 6465766f     t -> ...<removed
   2688c:	00000a3e 0a727265 00000000 656c6f72     >...err.....role
   2689c:	00000000 64697565 6c6f722b 656e2065     ....euid+role ne
   268ac:	64656465 0000000a 6c257830 203a586c     eded....0x%llX: 
   268bc:	656c6f72 203e2d20 200a6425 00000000     role -> %d. ....
   268cc:	61656c63 00000072 706d6f63 00000072     clear...compr...
   268dc:	74726f73 00000000 706d7564 00000000     sort....dump....
   268ec:	6e6b6e55 206e776f 0a646d63 00000000     Unknown cmd.....
   268fc:	6d6e6170 00000000 6d6e6170 65747361     panm....panmaste
   2690c:	6f632072 6e616d6d 00007364 646d633c     r commands..<cmd
   2691c:	0000003e 6975653c 5b203e64 72646461     >...<euid> [addr
   2692c:	6461205d 6f6e2064 00006564 6975653c     ] add node..<eui
   2693c:	64203e64 74656c65 6f6e2065 00006564     d> delete node..
   2694c:	6975653c 3c203e64 746f6c73 3e64695f     <euid> <slot_id>
   2695c:	74657320 72657020 656e616d 7320746e      set permanent s
   2696c:	20746f6c 65737528 6f6c7320 64695f74     lot (use slot_id
   2697c:	20312d3d 72206f74 766f6d65 00002965     =-1 to remove)..
   2698c:	6975653c 3c203e64 656c6f72 6573203e     <euid> <role> se
   2699c:	6f722074 0029656c 73617265 696c2065     t role).erase li
   269ac:	00007473                                st..

000269b0 <cmd_pm_help>:
   269b0:	00026904 00026918 000269bc              .i...i...i..

000269bc <cmd_pm_param>:
   269bc:	000267fc 00028874 00026804 00026920     .g..t....h.. i..
   269cc:	0002684c 00026938 00026850 0002694c     Lh..8i..Ph..Li..
   269dc:	00026898 0002698c 000268e4 00028874     .h...i...h..t...
   269ec:	000268cc 000269a4 000268d4 00028874     .h...i...h..t...
   269fc:	000268dc 00028874 00000000 00000000     .h..t...........
   26a0c:	76727573 00007965 7475227b 22656d69     survey..{"utime"
   26a1c:	6c25203a 6d222c75 3a226773 75732220     : %lu,"msg": "su
   26a2c:	79657672 676b705f 696e695f 0a7d2274     rvey_pkg_init"}.
   26a3c:	00000000 616f7262 73616364 00726574     ....broadcaster.
   26a4c:	65636572 72657669 00000000              receiver....

00026a58 <g_stats_map_survey_stat_section>:
   26a58:	8d200014 00180002 00028d2c 65d0001c     .. .....,......e
   26a68:	00200002 000265ec 65c00024 00280002     .. ..e..$..e..(.
   26a78:	00026a40 6a4c002c 00300002 000265a8     @j..,.Lj..0..e..
   26a88:	6cf80034 00000002 616d6474 00000000     4..l....tdma....
   26a98:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   26aa8:	3a226773 64742220 705f616d 695f676b     sg": "tdma_pkg_i
   26ab8:	2274696e 00000a7d 7475227b 22656d69     nit"}...{"utime"
   26ac8:	6c25203a 6d222c75 3a226773 64742220     : %lu,"msg": "td
   26ad8:	705f616d 645f676b 226e776f 00000a7d     ma_pkg_down"}...
   26ae8:	746f6c73 6d69745f 635f7265 0000746e     slot_timer_cnt..
   26af8:	65707573 61726672 635f656d 0000746e     superframe_cnt..
   26b08:	65707573 61726672 6d5f656d 00737369     superframe_miss.
   26b18:	706f7264 5f646570 746f6c73 00000073     dropped_slots...

00026b28 <g_stats_map_tdma_stat_section>:
   26b28:	6ae80014 00180002 00026af8 6b08001c     ...j.....j.....k
   26b38:	00200002 00026b18 00706363 7475227b     .. ..k..ccp.{"ut
   26b48:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   26b58:	77752220 63635f62 6b705f70 6e695f67      "uwb_ccp_pkg_in
   26b68:	7d227469 0000000a 7473616d 635f7265     it"}....master_c
   26b78:	0000746e 76616c73 6e635f65 00000074     nt..slave_cnt...
   26b88:	646e6573 00000000 635f7874 6c706d6f     send....tx_compl
   26b98:	00657465 725f7872 79616c65 00006465     ete.rx_relayed..
   26ba8:	735f7872 74726174 7272655f 0000726f     rx_start_error..
   26bb8:	6f5f7872 72656874 6172665f 0000656d     rx_other_frame..
   26bc8:	78727874 7272655f 0000726f 735f7874     txrx_error..tx_s
   26bd8:	74726174 7272655f 0000726f 725f7874     tart_error..tx_r
   26be8:	79616c65 7272655f 0000726f 725f7874     elay_error..tx_r
   26bf8:	79616c65 006b6f5f 5f717269 6574616c     elay_ok.irq_late
   26c08:	0079636e 6c5f736f 625f7461 6e696865     ncy.os_lat_behin
   26c18:	00000064 6c5f736f 6d5f7461 69677261     d...os_lat_margi
   26c28:	0000006e 5f6d6573 656d6974 0074756f     n...sem_timeout.

00026c38 <g_stats_map_uwb_ccp_stat_section>:
   26c38:	6b700014 00180002 00026b7c 6b88001c     ..pk....|k.....k
   26c48:	00200002 00028d2c 6b900024 00280002     .. .,...$..k..(.
   26c58:	00026590 6b9c002c 00300002 00026ba8     .e..,..k..0..k..
   26c68:	65d00034 00380002 00026bb8 6bc8003c     4..e..8..k..<..k
   26c78:	00400002 00026bd4 6be40044 00480002     ..@..k..D..k..H.
   26c88:	00026bf4 6c00004c 00500002 00026c0c     .k..L..l..P..l..
   26c98:	6c1c0054 00580002 000265a8 6c2c005c     T..l..X..e..\.,l
   26ca8:	00600002 00026cf8 7475227b 22656d69     ..`..l..{"utime"
   26cb8:	6c25203a 6d222c75 3a226773 61702220     : %lu,"msg": "pa
   26cc8:	6b705f6e 6e695f67 7d227469 0000000a     n_pkg_init"}....
   26cd8:	006e6170 5f6e6170 75716572 00747365     pan.pan_request.
   26ce8:	5f6e6170 7473696c 00006e65 5f6e6170     pan_listen..pan_
   26cf8:	65736572 00000074 616c6572 78745f79     reset...relay_tx
   26d08:	00000000 7361656c 78655f65 79726970     ....lease_expiry
   26d18:	00000000                                ....

00026d1c <g_stats_map_pan_stat_section>:
   26d1c:	6cdc0014 00180002 00026ce8 6cf4001c     ...l.....l.....l
   26d2c:	00200002 00026d00 6d0c0024 00280002     .. ..m..$..m..(.
   26d3c:	00026b90 6590002c 00300002 000265d0     .k..,..e..0..e..
   26d4c:	6bb80034 00380002 0002659c 65e0003c     4..k..8..e..<..e
   26d5c:	00400002 000265a8 6cf80044 00000002     ..@..e..D..l....
   26d6c:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   26d7c:	3a226773 77752220 63775f62 6b705f73     sg": "uwb_wcs_pk
   26d8c:	6e695f67 7d227469 0000000a              g_init"}....

00026d98 <stdout>:
   26d98:	2000025c                                \.. 

00026d9c <MemFile_methods>:
   26d9c:	00010f27 00000000 00006372 0066666f     '.......rc..off.
   26dac:	61746164 00000000 006e656c 00616873     data....len.sha.
   26dbc:	72677075 00656461                       upgrade.

00026dc4 <imgr_nmgr_handlers>:
   26dc4:	00011ce5 00011ea1 00000000 000115bd     ................
	...
   26df0:	00011385 00000000 00011319 25206425     ............%d %
   26e00:	203a7338 25207325 00000a73 6f727245     8s: %s %s...Erro
   26e10:	6f632072 7269666e 676e696d 616d6920     r confirming ima
   26e20:	73206567 65746174 6372203b 0a64253d     ge state; rc=%d.
   26e30:	00000000 69206f4e 6567616d 74697720     ....No image wit
   26e40:	61682068 203a6873 000a7325 61766e49     h hash: %s..Inva
   26e50:	2064696c 746f6c73 6d756e20 20726562     lid slot number 
   26e60:	6920726f 6567616d 73616820 25203a68     or image hash: %
   26e70:	00000a73 6f727245 65732072 6e697474     s...Error settin
   26e80:	6c732067 2520746f 6f742064 6e657020     g slot %d to pen
   26e90:	676e6964 6372203b 0a64253d 00000000     ding; rc=%d.....
   26ea0:	6f727245 706f2072 6e696e65 72612067     Error opening ar
   26eb0:	25206165 00000a64 6f727245 72652072     ea %d...Error er
   26ec0:	6e697361 72612067 72206165 64253d63     asing area rc=%d
   26ed0:	0000000a 73206f4e 61746975 20656c62     ....No suitable 
   26ee0:	61657261 206f7420 73617265 00000a65     area to erase...
   26ef0:	74736574 00000000 666e6f63 006d7269     test....confirm.
   26f00:	73617265 00000065 72676d69 00000000     erase...imgr....
   26f10:	67616d69 616d2065 6567616e 746e656d     image management
   26f20:	6d6f6320 646e616d 00000000 2020200a      command.....   
   26f30:	676d6920 696c2072 200a7473 69202020      imgr list.    i
   26f40:	2072676d 74736574 6c733c20 7c20746f     mgr test <slot |
   26f50:	73616820 200a3e68 69202020 2072676d      hash>.    imgr 
   26f60:	666e6f63 206d7269 6f6c735b 207c2074     confirm [slot | 
   26f70:	68736168 0000005d                       hash]...

00026f78 <imgr_cli_help>:
   26f78:	00026f10 00026f2c 00000000 74737075     .o..,o......upst
   26f88:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   26f98:	00000000 666e6f63 00000000 67616d69     ....conf....imag
   26fa8:	00007365 746f6c73 00000000 73726576     es..slot....vers
   26fb8:	006e6f69 68736168 00000000 746f6f62     ion.hash....boot
   26fc8:	656c6261 00000000 646e6570 00676e69     able....pending.
   26fd8:	666e6f63 656d7269 00000064 69746361     confirmed...acti
   26fe8:	00006576 6d726570 6e656e61 00000074     ve..permanent...
   26ff8:	696c7073 61745374 00737574 252e7525     splitStatus.%u.%
   27008:	75252e75 756c252e 00000000 252e7525     u.%u.%lu....%u.%
   27018:	75252e75 00000000 65746164 656d6974     u.%u....datetime
   27028:	00000000 6f686365 00000000 6f6f706d     ....echo....mpoo
   27038:	0000736c 736b6c62 00007a69 6b6c626e     ls..blksiz..nblk
   27048:	00000073 6572666e 00000065 006e696d     s...nfree...min.
   27058:	6f697270 00000000 00646974 74617473     prio....tid.stat
   27068:	00000065 756b7473 00006573 736b7473     e...stkuse..stks
   27078:	00007a69 63777363 0000746e 746e7572     iz..cswcnt..runt
   27088:	00656d69 7473616c 6568635f 6e696b63     ime.last_checkin
   27098:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   270a8:	00000000                                ....

000270ac <nmgr_def_group_handlers>:
   270ac:	000124dd 000124dd 00012481 00012481     .$...$...$...$..
   270bc:	000126dd 00000000 000125d5 00000000     .&.......%......
   270cc:	00012555 00012421 00000000 000123c5     U%..!$.......#..
   270dc:	0000002f 00646c25 646c6c25 00000000     /...%ld.%lld....
   270ec:	6c65643c 0000003e 3d207325 0a732520     <del>...%s = %s.
   270fc:	00000000 656e6f44 0000000a 6c696146     ....Done....Fail
   2710c:	74206465 6f63206f 74696d6d 0000000a     ed to commit....
   2711c:	6d6d6f63 00007469 6e6e7572 00676e69     commit..running.
   2712c:	65766173 00000000 6e6e6143 6420746f     save....Cannot d
   2713c:	6c707369 76207961 65756c61 0000000a     isplay value....
   2714c:	6c696146 74206465 6573206f 65202c74     Failed to set, e
   2715c:	203a7272 000a6425 61766e49 2064696c     rr: %d..Invalid 
   2716c:	73677261 0000000a 666e6f63 00006769     args....config..
   2717c:	75255b1b 00000044 75255b1b 00000043     .[%uD....[%uC...
   2718c:	6c363025 00002075 74726175 00000030     %06lu ..uart0...
   2719c:	3d73745b 756c6c25 202c7375 3d646f6d     [ts=%lluus, mod=
   271ac:	6c207525 6c657665 5d75253d 00000020     %u level=%u] ...
   271bc:	736e6f63 00656c6f                       console.

000271c4 <log_console_handler>:
   271c4:	00000000 00014739 00000000 00014791     ....9G.......G..
   271d4:	00014765 00000000 00000000 0001473d     eG..........=G..
   271e4:	00014741 00000000 6c696166 74206465     AG......failed t
   271f4:	6572206f 4d206461 3a73524d 3d637220     o read MMRs: rc=
   27204:	00006425 6f626572 722f746f 6f6f6265     %d..reboot/reboo
   27214:	6e635f74 00000074 6f626572 772f746f     t_cnt...reboot/w
   27224:	74746972 00006e65 6f626572 635f746f     ritten..reboot_c
   27234:	0000746e 74697277 006e6574 44524148     nt..written.HARD
   27244:	00000000 55514552 45545345 00000044     ....REQUESTED...
   27254:	45534552 49505f54 0000004e 474f4457     RESET_PIN...WDOG
   27264:	00000000 54464f53 00000000 574f5242     ....SOFT....BROW
   27274:	54554f4e 00000000 4e4b4e55 004e574f     NOUT....UNKNOWN.
   27284:	54535953 4f5f4d45 495f4646 0000544e     SYSTEM_OFF_INT..
   27294:	3a6e7372 202c7325 3a746e63 202c7525     rsn:%s, cnt:%u, 
   272a4:	3a676d69 252e7525 75252e75 2c75252e     img:%u.%u.%u.%u,
   272b4:	73616820 00003a68 78323025 00000000      hash:..%02x....
   272c4:	6964202c 73253a65 0064253a 6370202c     , die:%s:%d., pc
   272d4:	2578303a 0000786c 00000031 6f626572     :0x%lx..1...rebo
   272e4:	0000746f 706c6568 0000000a 30332d25     ot..help....%-30
   272f4:	00000073 30332d25 0a732573 00000000     s...%-30s%s.....
   27304:	65726e55 6e676f63 64657a69 6d6f6320     Unrecognized com
   27314:	646e616d 0000000a 65726e55 6e676f63     mand....Unrecogn
   27324:	64657a69 6d6f6320 646e616d 7325203a     ized command: %s
   27334:	0000000a 656c6c49 206c6167 75646f6d     ....Illegal modu
   27344:	2520656c 00000a73 656c6c49 206c6167     le %s...Illegal 
   27354:	61726170 6574656d 00000a72 706c6568     parameter...help
   27364:	00000000 656c6573 00007463 7373694d     ....select..Miss
   27374:	20676e69 61726170 6574656d 00000a72     ing parameter...
   27384:	206f6e28 706c6568 61766120 62616c69     (no help availab
   27394:	0a29656c 00000000 6d6d7553 3a797261     le).....Summary:
   273a4:	0000000a 67617355 000a3a65 61726150     ....Usage:..Para
   273b4:	6574656d 0a3a7372 00000000 69617641     meters:.....Avai
   273c4:	6c62616c 6f6d2065 656c7564 000a3a73     lable modules:..
   273d4:	73206f54 63656c65 20612074 75646f6d     To select a modu
   273e4:	202c656c 65746e65 73272072 63656c65     le, enter 'selec
   273f4:	6d3c2074 6c75646f 616e2065 273e656d     t <module name>'
   27404:	00000a2e 0000203e 73257325 00000000     ....> ..%s%s....
   27414:	206f6f54 796e616d 72617020 74656d61     Too many paramet
   27424:	20737265 78616d28 757a2520 00000a29     ers (max %zu)...
   27434:	65707954 65682720 2027706c 20726f66     Type 'help' for 
   27444:	7473696c 20666f20 69617661 6c62616c     list of availabl
   27454:	6f632065 6e616d6d 000a7364 2078614d     e commands..Max 
   27464:	626d756e 6f207265 6f6d2066 656c7564     number of module
   27474:	65722073 65686361 00000a64 2078614d     s reached...Max 
   27484:	626d756e 6f207265 6f632066 7461706d     number of compat
   27494:	6d6f6320 646e616d 65722073 65686361      commands reache
   274a4:	00000a64 706d6f63 00007461 656c6c49     d...compat..Ille
   274b4:	206c6167 75646f6d 2520656c 64202c73     gal module %s, d
   274c4:	75616665 6920746c 6f6e2073 68632074     efault is not ch
   274d4:	65676e61 00000a64 6c656873 0000006c     anged...shell...

000274e4 <shell_cmd_help>:
   274e4:	00000001 00015139 00027360 00000000     ....9Q..`s......

000274f4 <shell_cmd_select_module>:
   274f4:	00000001 00014efd 00027368 00000000     .....N..hs......
   27504:	0009060a 20643425 20783325 000a7325     ....%4d %3x %s..
   27514:	706d654d 736c6f6f 000a203a 736b6c62     Mempools: ..blks
   27524:	0000007a 656d616e 00000000 73323325     z...name....%32s
   27534:	73352520 73342520 73342520 73342520      %5s %4s %4s %4s
   27544:	0000000a 65657266 00000000 73323325     ....free....%32s
   27554:	64352520 64342520 64342520 64342520      %5d %4d %4d %4d
   27564:	0000000a 6c756f43 74276e64 6e696620     ....Couldn't fin
   27574:	20612064 6f6d656d 70207972 206c6f6f     d a memory pool 
   27584:	68746977 6d616e20 73252065 0000000a     with name %s....
   27594:	61766e49 2064696c 65746164 656d6974     Invalid datetime
   275a4:	0000000a 00676c66 00666572 20733425     ....flg.ref.%4s 
   275b4:	20733325 000a7325 6b736154 0a203a73     %3s %s..Tasks: .
   275c4:	00000000 00697270 6b736174 00000000     ....pri.task....
   275d4:	20733825 20733325 20733325 20733825     %8s %3s %3s %8s 
   275e4:	20733825 20733825 20733825 20733825     %8s %8s %8s %8s 
   275f4:	20733825 0a733325 00000000 6568636e     %8s %3s.....nche
   27604:	00006b63 6568636c 00006b63 736b7473     ck..lcheck..stks
   27614:	0000007a 00777363 20733825 20753325     z...csw.%8s %3u 
   27624:	20753325 756c3825 6c382520 38252075     %3u %8lu %8lu %8
   27634:	38252075 38252075 2520756c 0a756c38     u %8u %8lu %8lu.
   27644:	00000000 6c756f43 74276e64 6e696620     ....Couldn't fin
   27654:	61742064 77206b73 20687469 656d616e     d task with name
   27664:	0a732520 00000000 6564736c 00000076      %s.....lsdev...
   27674:	7473696c 20534f20 69766564 00736563     list OS devices.
   27684:	65736572 79732074 6d657473 00000000     reset system....
   27694:	776f6873 73797320 206d6574 65746164     show system date
   276a4:	00000000 65746164 656d6974 206f7420     ....datetime to 
   276b4:	00746573 776f6873 73797320 206d6574     set.show system 
   276c4:	6f6f706d 0000006c 6f6f706d 616e206c     mpool...mpool na
   276d4:	0000656d 776f6873 20736f20 6b736174     me..show os task
   276e4:	00000073 6b736174 6d616e20 00000065     s...task name...

000276f4 <date_help>:
   276f4:	00027694 00000000 00027700              .v.......w..

00027700 <date_params>:
   27700:	00028874 000276a8 00000000 00000000     t....v..........

00027710 <ls_dev_help>:
   27710:	00027674 00000000 00000000              tv..........

0002771c <mpool_help>:
   2771c:	000276b8 00000000 00027728              .v......(w..

00027728 <mpool_params>:
   27728:	00028874 000276cc 00000000 00000000     t....v..........

00027738 <os_commands>:
   27738:	00000001 00015eb5 000276e0 000277ac     .....^...v...w..
   27748:	00000001 00015d35 000276c4 0002771c     ....5]...v...w..
   27758:	00000001 00015de5 000276a0 000276f4     .....]...v...v..
   27768:	00000001 00015e69 00026cf8 00027798     ....i^...l...w..
   27778:	00000001 00015e7d 0002766c 00027710     ....}^..lv...w..
	...

00027798 <reset_help>:
   27798:	00027684 00000000 000277a4              .v.......w..

000277a4 <reset_params>:
	...

000277ac <tasks_help>:
   277ac:	000276d8 00000000 000277b8              .v.......w..

000277b8 <tasks_params>:
   277b8:	00028874 000276e8 00000000 00000000     t....v..........
   277c8:	00006e6f 6e6f4320 656c6f73 63695420     on.. Console Tic
   277d8:	6f20736b 00000a6e 6e6f4320 656c6f73     ks on... Console
   277e8:	63695420 6f20736b 000a6666 61735520      Ticks off.. Usa
   277f8:	203a6567 6b636974 6f5b2073 666f7c6e     ge: ticks [on|of
   27808:	000a5d66 6d6f7270 00007470 6b636974     f]..prompt..tick
   27818:	00000073 6c656873 6974206c 20736b63     s...shell ticks 
   27828:	6d6d6f63 00646e61 67617375 74203a65     command.usage: t
   27838:	736b6369 6e6f5b20 66666f7c 0000005d     icks [on|off]...
   27848:	6e727574 006e6f20                       turn on.

00027850 <prompt_commands>:
   27850:	00000000 00015fdd 00027814 00027870     ....._...x..px..
	...

00027870 <ticks_help>:
   27870:	0002781c 00027830 0002787c              .x..0x..|x..

0002787c <ticks_params>:
   2787c:	000277c8 00027848 00026da8 00027848     .w..Hx...m..Hx..
	...
   27894:	00642573 74617473 00000000 5f6d756e     s%d.stat....num_
   278a4:	69676572 72657473 00006465              registered..

000278b0 <g_stats_map_stats>:
   278b0:	78a00014 00000002 203a7325 000a7525     ...x....%s: %u..
   278c0:	203a7325 0a756c25 00000000 203a7325     %s: %lu.....%s: 
   278d0:	756c6c25 0000000a 6e6b6e55 206e776f     %llu....Unknown 
   278e0:	74617473 7a697320 6f662065 73252072     stat size for %s
   278f0:	0a752520 00000000 0a732509 00000000      %u......%s.....
   27900:	7473754d 65707320 79666963 73206120     Must specify a s
   27910:	69746174 63697473 6d616e20 6f742065     tatistic name to
   27920:	6d756420 70202c70 6973736f 20656c62      dump, possible 
   27930:	656d616e 72612073 000a3a65 6c756f43     names are:..Coul
   27940:	6f6e2064 69662074 7320646e 69746174     d not find stati
   27950:	63697473 6f726720 25207075 00000a73     stic group %s...
   27960:	252f7325 00000073 00386d36 6b303538     %s/%s...6m8.850k
   27970:	00000000 6b303131 00000000 20766e69     ....110k....inv 
   27980:	61657270 6c5f626d 000a6e65 63627775     preamb_len..uwbc
   27990:	00006766 00627775 00667270 61746164     fg..uwb.prf.data
   279a0:	65746172 00000000 705f7872 656c6361     rate....rx_pacle
   279b0:	0000006e 705f7872 6d616572 6469635f     n...rx_pream_cid
   279c0:	00000078 735f7872 79746466 00006570     x...rx_sfdtype..
   279d0:	735f7872 745f6466 0000006f 705f7872     rx_sfd_to...rx_p
   279e0:	6f6d7268 00006564 645f7872 5f676169     hrmode..rx_diag_
   279f0:	00006e65 705f7874 6d616572 6469635f     en..tx_pream_cid
   27a00:	00000078 705f7874 6d616572 6e656c5f     x...tx_pream_len
   27a10:	00000000 66727874 776f705f 635f7265     ....txrf_power_c
   27a20:	7372616f 00000065 66727874 776f705f     oarse...txrf_pow
   27a30:	665f7265 00656e69 615f7872 6c64746e     er_fine.rx_antdl
   27a40:	00000079 615f7874 6c64746e 00000079     y...tx_antdly...
   27a50:	615f7872 735f746e 72617065 6f697461     rx_ant_separatio
   27a60:	0000006e 5f747865 646b6c63 0000796c     n...ext_clkdly..
   27a70:	6d617266 69665f65 7265746c 00000000     frame_filter....
   27a80:	6c617478 6972745f 0000006d 20766e69     xtal_trim...inv 
   27a90:	61657270 6f63206d 28206564 6e697375     pream code (usin
   27aa0:	64252067 00000a29 20766e69 20667270     g %d)...inv prf 
   27ab0:	000a6425 20766e69 000a6863 20766e69     %d..inv ch..inv 
   27ac0:	61746164 65746172 0000000a 20766e69     datarate....inv 
   27ad0:	6c636170 000a6e65 20766e69 54646673     paclen..inv sfdT
   27ae0:	0a657079 00000000 20766e69 72616f63     ype.....inv coar
   27af0:	74206573 72777078 0000000a 64343025     se txpwr....%04d
   27b00:	3230252d 30252d64 25546432 3a643230     -%02d-%02dT%02d:
   27b10:	64323025 3230253a 30252e64 00006436     %02d:%02d.%06d..
   27b20:	30256325 253a6432 00643230              %c%02d:%02d.

00027b2c <month_days>:
   27b2c:	0000001f 0000001c 0000001f 0000001e     ................
   27b3c:	0000001f 0000001e 0000001f 0000001f     ................
   27b4c:	0000001e 0000001f 0000001e 0000001f     ................

00027b5c <crc16tab>:
   27b5c:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
   27b6c:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
   27b7c:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
   27b8c:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
   27b9c:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
   27bac:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
   27bbc:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
   27bcc:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
   27bdc:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
   27bec:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
   27bfc:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
   27c0c:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
   27c1c:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
   27c2c:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
   27c3c:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
   27c4c:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
   27c5c:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
   27c6c:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
   27c7c:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
   27c8c:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
   27c9c:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
   27cac:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
   27cbc:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
   27ccc:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
   27cdc:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
   27cec:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
   27cfc:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
   27d0c:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
   27d1c:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
   27d2c:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
   27d3c:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
   27d4c:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....

00027d5c <streamer_cfg_console>:
   27d5c:	000173d3 000173c7                       .s...s..

00027d64 <sysdown_cbs>:
   27d64:	0001cfd9 0000f6f9 000103c1 0000e401     ................
   27d74:	00021b35 00021eb5 000167f5 00000000     5........g......

00027d84 <sysflash_map_dflt>:
	...
   27d8c:	00004000 00000001 00008000 0003a000     .@..............
   27d9c:	00000002 00042000 0003a000 00000003     ..... ..........
   27dac:	0007c000 00001000 00000010 00004000     .............@..
   27dbc:	00004000 00000011 0007d000 00003000     .@...........0..

00027dcc <boot_img_magic>:
   27dcc:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00027ddc <boot_swap_tables>:
   27ddc:	03040104 01040204 03040104 04030301     ................
   27dec:	00000401 696c7073 74732f74 73757461     ....split/status
   27dfc:	00000000 74617473 00007375 696c7073     ....status..spli
   27e0c:	00000074                                t...

00027e10 <base64_chars>:
   27e10:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   27e20:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   27e30:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   27e40:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   27e50:	00000000                                ....

00027e54 <hex_bytes>:
   27e54:	33323130 37363534 62613938 66656463     0123456789abcdef
   27e64:	00000000 30317764 305f3030 00000000     ....dw1000_0....

00027e74 <dw1000_0_cfg>:
   27e74:	200053b8 00001f40 000007d0 11131800     .S. @...........
   27e84:	40424042 00000000 6e207325 6920746f     B@B@....%s not i
   27e94:	656c706d 746e656d 000a6465 7475227b     mplemented..{"ut
   27ea4:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   27eb4:	77642220 30303031 7665645f 696e695f      "dw1000_dev_ini
   27ec4:	0a7d2274 00000000                       t"}.....

00027ecc <__func__.0>:
   27ecc:	5f627775 30317764 635f3030 5f636c61     uwb_dw1000_calc_
   27edc:	616f6470 00000000                       pdoa....

00027ee4 <dw1000_uwb_funcs>:
   27ee4:	0001971f 00019717 0001970f 00019c2b     ............+...
   27ef4:	00019ca9 00019fa9 00019ffb 00019f59     ............Y...
   27f04:	00019707 000196fd 000196f3 000196dd     ................
   27f14:	000196d5 000196cd 000196c5 000196bd     ................
   27f24:	000196b5 000196ad 000196a5 0001952b     ............+...
   27f34:	0001969d 00019695 0001968d 00019685     ................
   27f44:	0001967d 00019675 0001966d 00019665     }...u...m...e...
   27f54:	00019521 0001965d 00019655 00019649     !...]...U...I...
   27f64:	0001963d 00019631 00019629 00019621     =...1...)...!...
   27f74:	00019619 00019611 00019ac1 00019aa7     ................
   27f84:	00019a8d 000195e9 000195e1 000195d9     ................
   27f94:	000195d1 000195c9 000195c1 000195b9     ................
   27fa4:	00019599 00000000 00019533 00019577     ........3...w...
   27fb4:	0001957f 00019587 0001958f 0063616d     ............mac.
   27fc4:	625f7874 73657479 00000000 625f7872     tx_bytes....rx_b
   27fd4:	73657479 00000000 5f524644 00746e63     ytes....DFR_cnt.
   27fe4:	5f4f5452 00746e63 5f564f52 00727265     RTO_cnt.ROV_err.
   27ff4:	5f474654 00746e63 5f45444c 00727265     TFG_cnt.LDE_err.
   28004:	655f5852 00007272 55425854 72655f46     RX_err..TXBUF_er
   28014:	00000072 5f4c4c50 655f4c4c 00007272     r...PLL_LL_err..

00028024 <agc_config>:
   28024:	2502a907 889b8870                       ...%p...

0002802c <chan_idx>:
   2802c:	02010000 05000403                       ........

00028034 <digital_bb_config>:
   28034:	311a002d 331a0052 351a009a 371a011d     -..1R..3...5...7
   28044:	313b006b 333b00be 353b015e 373b0296     k.;1..;3^.;5..;7

00028054 <dtune1>:
   28054:	008d0087                                ....

00028058 <dwnsSFDlen>:
   28058:	00081040                                @...

0002805c <fs_pll_cfg>:
   2805c:	09000407 08400508 08401009 08400508     ......@...@...@.
   2806c:	0800041d 0800041d                       ........

00028074 <fs_pll_tune>:
   28074:	2656261e 0000bebe                       .&V&....

0002807c <g_stats_map_mac_stat_section>:
   2807c:	7fc40014 00180002 00027fd0 7fdc001c     ................
   2808c:	00200002 00027fe4 7fec0024 00280002     .. .....$.....(.
   2809c:	00027ff4 7ffc002c 00300002 00028004     ....,.....0.....
   280ac:	800c0034 00380002 00028018              4.....8.....

000280b8 <lde_replicaCoeff>:
   280b8:	59980000 51ea5998 451e428e 80002e14     ...Y.Y.Q.B.E....
   280c8:	28f451ea 3ae03332 3ae03d70 2b8435c2     .Q.(23.:p=.:.5.+
   280d8:	333235c2 35c235c2 3ae047ae 30a23850     .523.5.5.G.:P8.0
   280e8:	00003850                                P8..

000280ec <rx_config>:
   280ec:	0000bcd8                                ....

000280f0 <sftsh>:
   280f0:	0016000a 00060001 00020001              ............

000280fc <tx_config>:
   280fc:	00005c40 00045ca0 00086cc0 00045c80     @\...\...l...\..
   2810c:	001e3fe0 001e7de0 43534d50 5b44495f     .?...}..PMSC_ID[
   2811c:	203a5d30 0a786c25 00000000 43534d50     0]: %lx.....PMSC
   2812c:	5b44495f 203a5d31 0a786c25 00000000     _ID[1]: %lx.....
   2813c:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   2814c:	3a226773 77642220 30303031 676b705f     sg": "dw1000_pkg
   2815c:	696e695f 0a7d2274 00000000 7475227b     _init"}.....{"ut
   2816c:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   2817c:	77642220 30303031 676b705f 776f645f      "dw1000_pkg_dow
   2818c:	0a7d226e 00000000 30317764 315f3030     n"}.....dw1000_1
   2819c:	00000000 30317764 325f3030 00000000     ....dw1000_2....
   281ac:	44202020 7461443d 41202c61 6b63413d        D=Data, A=Ack
   281bc:	3d4d202c 0a63614d 00000000 53202020     , M=Mac.....   S
   281cc:	3a726365 63655320 74697275 6e652079     ecr: Security en
   281dc:	656c6261 66202c64 3a646e50 61724620     abled, fPnd: Fra
   281ec:	7020656d 69646e65 202c676e 724b4341     me pending, ACKr
   281fc:	6341203a 6572206b 73657571 2c646574     : Ack requested,
   2820c:	4e415020 50203a63 44494e41 6d6f4320      PANc: PANID Com
   2821c:	73657270 00000a73 44202020 203a7473     press...   Dst: 
   2822c:	6e3d6f4e 6564206f 61207473 65726464     No=no dest addre
   2823c:	52202c73 65523d73 76726573 202c6465     s, Rs=Reserved, 
   2824c:	622d3631 61207469 65726464 202c7373     16-bit address, 
   2825c:	622d3436 61207469 65726464 000a7373     64-bit address..
   2826c:	46202020 656d6172 72657620 6e6f6973        Frame version
   2827c:	2d49203a 45454549 32303820 2e35312e     : I-IEEE 802.15.
   2828c:	49202c34 33303032 4545492d 30382045     4, I2003-IEEE 80
   2829c:	35312e32 322d342e 2c333030 76466920     2.15.4-2003, iFv
   282ac:	766e492d 64696c61 61724620 5620656d     -Invalid Frame V
   282bc:	69737265 000a6e6f 53202020 203a6372     ersion..   Src: 
   282cc:	6e3d6f4e 7273206f 64612063 73657264     No=no src addres
   282dc:	7352202c 7365523d 65767265 31202c64     , Rs=Reserved, 1
   282ec:	69622d36 64612074 73657264 36202c73     6-bit address, 6
   282fc:	69622d34 64612074 73657264 00000a73     4-bit address...
   2830c:	00007c44 00007c41 00007c4d 00007c52     D|..A|..M|..R|..
   2831c:	72636553 0000007c 646e5066 0000007c     Secr|...fPnd|...
   2832c:	724b4341 0000007c 634e4150 0000007c     ACKr|...PANc|...
   2833c:	4e747344 00007c6f 52747344 00007c73     DstNo|..DstRs|..
   2834c:	31747344 00007c36 36747344 00007c34     Dst16|..Dst64|..
   2835c:	30303249 00007c33 00007c49 7c764669     I2003|..I|..iFv|
   2836c:	00000000 4e637253 0000006f 52637253     ....SrcNo...SrcR
   2837c:	00000073 31637253 00000036 36637253     s...Src16...Src6
   2838c:	00000034 77507854 54705572 7272456d     4...TxPwrUpTmErr
   2839c:	0000007c 72507852 626d6165 7c6a6552     |...RxPreambRej|
   283ac:	00000000 65527852 6f536465 726f436c     ....RxReedSolCor
   283bc:	00007c72 78524349 50667542 313d7274     r|..ICRxBufPtr=1
   283cc:	0000007c 74736f48 75427852 72745066     |...HostRxBufPtr
   283dc:	007c313d 46747541 656d6172 746c6946     =1|.AutFrameFilt
   283ec:	7c6a6552 00000000 6e617254 74696d73     Rej|....Transmit
   283fc:	66667542 72457265 7c726f72 00000000     BufferError|....
   2840c:	666c6148 69726550 6544646f 5779616c     HalfPeriodDelayW
   2841c:	7c6e7261 00000000 46535852 6d695444     arn|....RXSFDTim
   2842c:	74756f65 0000007c 636f6c43 4c4c506b     eout|...ClockPLL
   2843c:	69736f4c 6f4c676e 007c6b63 4c504652     LosingLock|.RFPL
   2844c:	736f4c4c 4c676e69 7c6b636f 00000000     LLosingLock|....
   2845c:	45454c53 4e493250 007c5449 6f697047     SLEEP2INIT|.Gpio
   2846c:	7c746e49 00000000 72507852 446d6165     Int|....RxPreamD
   2847c:	69547465 756f656d 00007c74 764f7852     etTimeout|..RxOv
   2848c:	7c727245 00000000 74696228 72203931     Err|....(bit19 r
   2849c:	72657365 29646576 0000007c 444c7852     eserved)|...RxLD
   284ac:	72726545 0000007c 69547852 756f656d     Eerr|...RxTimeou
   284bc:	00007c74 65527852 6f536465 6f6d6f6c     t|..RxReedSolomo
   284cc:	6172466e 7953656d 6f4c636e 007c7373     nFrameSyncLoss|.
   284dc:	43467852 72724553 0000007c 43467852     RxFCSErr|...RxFC
   284ec:	6f6f4753 00007c64 61447852 72466174     SGood|..RxDataFr
   284fc:	7964526d 0000007c 48507852 72724559     mRdy|...RxPHYErr
   2850c:	0000007c 48507852 74654459 0000007c     |...RxPHYDet|...
   2851c:	444c7852 6e6f6445 00007c65 46537852     RxLDEdone|..RxSF
   2852c:	7c746544 00000000 72507852 446d6165     Det|....RxPreamD
   2853c:	007c7465 72467854 53656d61 7c746e65     et|.TxFrameSent|
   2854c:	00000000 48507854 6e6f4459 00007c65     ....TxPHYDone|..
   2855c:	72507854 446d6165 7c656e6f 00000000     TxPreamDone|....
   2856c:	74537854 7c747261 00000000 6f747541     TxStart|....Auto
   2857c:	7c6b6341 00000000 43747845 6b636f6c     Ack|....ExtClock
   2858c:	73655220 007c7465 636f6c43 4c50206b      Reset|.Clock PL
   2859c:	6f4c204c 007c6b63 00535249 30312520     L Lock|.IRS. %10
   285ac:	0020756c 6c382520 00002075 6c362520     lu . %8lu .. %6l
   285bc:	00002075 73322520 00000020 32302520     u .. %2s ... %02
   285cc:	30252058 28205832 25297325 0000732a     X %02X (%s)%*s..
   285dc:	32302520 30252058 00205832 20202020      %02X %02X .    
   285ec:	00202020 32332520 00002073 2a302520        . %32s .. %0*
   285fc:	20586c6c 00000000 00732520 6572227b     llX .... %s.{"re
   2860c:	30255b67 225d5832 7830223d 6c383025     g[%02X]"="0x%08l
   2861c:	7d22586c 0000000a 6572227b 30255b67     lX"}....{"reg[%0
   2862c:	225d5832 7830223d 30313025 22586c6c     2X]"="0x%010llX"
   2863c:	00000a7d 6572227b 30255b67 225d5832     }...{"reg[%02X]"
   2864c:	7830223d 36313025 22586c6c 00000a7d     ="0x%016llX"}...
   2865c:	6e69227b 3e2d7473 5f717269 226d6573     {"inst->irq_sem"
   2866c:	7d64253d 0000000a 6e69227b 3e2d7473     =%d}....{"inst->
   2867c:	735f7874 3d226d65 0a7d6425 00000000     tx_sem"=%d}.....
   2868c:	6e72227b 733e2d67 3d226d65 0a7d6425     {"rng->sem"=%d}.
   2869c:	00000000 6363227b 733e2d70 3d226d65     ....{"ccp->sem"=
   286ac:	0a7d6425 00000000 706d7544 61747320     %d}.....Dump sta
   286bc:	6e697472 74612067 36302520 0a3a586c     rting at %06lX:.
   286cc:	00000000 58343025 3025203a 25205832     ....%04X: %02X %
   286dc:	20583230 58323025 32302520 30252058     02X %02X %02X %0
   286ec:	25205832 20583230 58323025 32302520     2X %02X %02X %02
   286fc:	30252058 25205832 20583230 58323025     X %02X %02X %02X
   2870c:	32302520 30252058 25205832 20583230      %02X %02X %02X 
   2871c:	58323025 32302520 00000a58 00736261     %02X %02X...abs.
   2872c:	30312520 00002073 63657375 00000000      %10s ..usec....
   2873c:	66666964 00000000 73382520 00000020     diff.... %8s ...
   2874c:	00727564 73362520 00000020 00007269     dur. %6s ...ir..
   2875c:	73322520 00000000 72746366 0000006c      %2s....fctrl...
   2876c:	73352520 00000000 74636628 74326c72      %5s....(fctrl2t
   2877c:	25297478 20733132 00000000 732a2520     xt)%21s .... %*s
   2878c:	00000020 73202020 75746174 78743273      ...   status2tx
   2879c:	00000a74 0000002d 2d2d2d2d 6366200a     t...-...----. fc
   287ac:	326c7274 3a747874 00000a20 00006164     trl2txt: ...da..
   287bc:	00007763 69766544 255b6563 6e205d64     cw..Device[%d] n
   287cc:	6920776f 5743206e 646f6d20 6e6f2065     ow in CW mode on
   287dc:	20686320 202e6425 65736552 6f742074      ch %d. Reset to
   287ec:	6e6f6320 756e6974 00000a65 00007277      continue...wr..
   287fc:	00006472 30257830 2c586c36 30257830     rd..0x%06lX,0x%0
   2880c:	203a5834 6c257830 000a586c 00746269     4X: 0x%llX..ibt.
   2881c:	74617473 74327375 00007478 30313025     status2txt..%010
   2882c:	3a586c6c 0a732520 00000000 72746366     llX: %s.....fctr
   2883c:	7874326c 00000074 79622032 20736574     l2txt...2 bytes 
   2884c:	6465656e 000a6465 58323025 32302520     needed..%02X %02
   2885c:	25203a58 00000a73 2d2d2d2d 656c200a     X: %s...----. le
   2886c:	6e656764 0a203a64 00000000 30317764     dgend: .....dw10
   2887c:	00003030 30317764 64203030 00006762     00..dw1000 dbg..
   2888c:	30317764 64203030 67756265 00000000     dw1000 debug....
   2889c:	736e695b 64205d74 20706d75 206c6c61     [inst] dump all 
   288ac:	69676572 72657473 00000073 736e693c     registers...<ins
   288bc:	74203e74 57432078 206e6f20 72727563     t> tx CW on curr
   288cc:	20746e65 6e616863 006c656e 736e693c     ent channel.<ins
   288dc:	3c203e74 72646461 6c5b203e 74676e65     t> <addr> [lengt
   288ec:	202c5d68 706d7564 65726120 00000061     h], dump area...
   288fc:	736e693c 3c203e74 72646461 733c203e     <inst> <addr> <s
   2890c:	64616275 203e7264 6e656c3c 3e687467     ubaddr> <length>
   2891c:	6572202c 72206461 73696765 00726574     , read register.
   2892c:	736e693c 3c203e74 72646461 733c203e     <inst> <addr> <s
   2893c:	64616275 203e7264 6c61763c 203e6575     ubaddr> <value> 
   2894c:	6e656c3c 3e687467 7277202c 20657469     <length>, write 
   2895c:	756c6176 6f742065 67657220 65747369     value to registe
   2896c:	00000072 736e695b 636e6174 765b2065     r...[instance [v
   2897c:	6f627265 6e2d6573 5d5d6d75 746e6920     erbose-num]] int
   2898c:	75727265 62207470 746b6361 65636172     errupt backtrace
   2899c:	00000000 7379733c 6174735f 3e737574     ....<sys_status>
   289ac:	206f7420 74786574 00000000 7463663c      to text....<fct
   289bc:	203e6c72 74206f74 00747865              rl> to text.

000289c8 <cmd_dw1000_help>:
   289c8:	00028880 0002888c 000289d4              ............

000289d4 <cmd_dw1000_param>:
   289d4:	000268e4 0002889c 000287bc 000288b8     .h..............
   289e4:	000287b8 000288d8 000287fc 000288fc     ................
   289f4:	000287f8 0002892c 00028818 00028970     ....,.......p...
   28a04:	0002881c 000289a0 00028838 000289b8     ........8.......
	...

00028a1c <nrf52k_flash_dev>:
   28a1c:	00028a34 00000000 00080000 00000080     4...............
   28a2c:	00000001 000000ff                       ........

00028a34 <nrf52k_flash_funcs>:
   28a34:	0001e50d 0001e445 0001e3d1 0001e425     ....E.......%...
   28a44:	00000000 0001e421 00000000              ....!.......

00028a50 <nrf52_hal_spis>:
   28a50:	20005478 00000000 00000000 00000000     xT. ............

00028a60 <nrf52_hal_timers>:
   28a60:	200054a0 00000000 00000000 00000000     .T. ............
	...

00028a78 <os_bsp_spi0m_cfg>:
   28a78:	00121410                                ....

00028a7c <os_bsp_uart0_cfg>:
   28a7c:	07ff0b05 0000002c 0000007b 00203a22     ....,...{...": .
   28a8c:	736c6166 00000065 65757274 00000000     false...true....
   28a9c:	756c6c25 00000000 696c6c25 00000000     %llu....%lli....
   28aac:	6c6c756e 00000000 00006625 0000005c     null....%f..\...
   28abc:	0000745c 0000725c 00006e5c 0000665c     \t..\r..\n..\f..
   28acc:	0000625c 0000005b                        \b..[...}.

00028ad6 <__func__.7324>:
   28ad6:	656d6974 6c616373 6e695f65               timescale_init.

00028ae5 <__func__.7336>:
   28ae5:	656d6974 6c616373 72665f65 69006565     timescale_free.i
   28af5:	2d74736e 656b653e 736e6900 682f0074     nst->eke.inst./h
   28b05:	2f656d6f 6c6b696e 642f7361 742f7665     ome/niklas/dev/t
   28b15:	73656d69 656c6163 726f632d 696c2f65     imescale-core/li
   28b25:	69742f62 6373656d 2e656c61               b/timescale.c.

00028b33 <__func__.7283>:
   28b33:	666b7273 6c62645f 69616d5f               srkf_dbl_main.

00028b41 <__func__.7299>:
   28b41:	666b7273 6c62645f 696e695f               srkf_dbl_init.

00028b4f <__func__.7311>:
   28b4f:	666b7273 6c62645f 6572665f 6e690065     srkf_dbl_free.in
   28b5f:	21207473 4c554e3d 6e69004c 3e2d7473     st !=NULL.inst->
   28b6f:	3d3d206e 69006e20 2d74736e 6900783e     n == n.inst->x.i
   28b7f:	2d74736e 6900793e 2d74736e 69007a3e     nst->y.inst->z.i
   28b8f:	2d74736e 6900653e 2d74736e 6900483e     nst->e.inst->H.i
   28b9f:	2d74736e 6900503e 2d74736e 0050553e     nst->P.inst->UP.
   28baf:	74736e69 50443e2d 736e6900 513e2d74     inst->DP.inst->Q
   28bbf:	736e6900 553e2d74 6e690051 3e2d7473     .inst->UQ.inst->
   28bcf:	69005144 2d74736e 6900523e 2d74736e     DQ.inst->R.inst-
   28bdf:	0052553e 74736e69 52443e2d 736e6900     >UR.inst->DR.ins
   28bef:	533e2d74 736e6900 5f3e2d74 6e690053     t->S.inst->_S.in
   28bff:	3e2d7473 6e690041 3e2d7473 6e69004b     st->A.inst->K.in
   28c0f:	21207473 554e203d 2f004c4c 656d6f68     st != NULL./home
   28c1f:	6b696e2f 2f73616c 2f766564 656d6974     /niklas/dev/time
   28c2f:	6c616373 6f632d65 6c2f6572 732f6269     scale-core/lib/s
   28c3f:	5f666b72 2e6c6264 6e690063 3e2d7473     rkf_dbl.c.inst->
   28c4f:	78666f41 203d2120 4c4c554e 736e6900     Aofx != NULL.ins
   28c5f:	483e2d74 2078666f 4e203d21 004c4c55     t->Hofx != NULL.
   28c6f:	75227b00 656d6974 25203a22 222c756c     .{"utime": %lu,"
   28c7f:	2267736d 7322203a 726e5f73 705f676e     msg": "ss_nrng_p
   28c8f:	695f676b 2274696e 00000a7d 72777400     kg_init"}....twr
   28c9f:	5f73735f 676e726e                        _ss_nrng.

00028ca8 <g_stats_map_twr_ss_nrng_stat_section>:
   28ca8:	659c0014 00180002 000265a8 6590001c     ...e.....e.....e
   28cb8:	00200002 000265d0 6cf80024 00000002     .. ..e..$..l....
   28cc8:	7475227b 22656d69 6c25203a 6d222c75     {"utime": %lu,"m
   28cd8:	3a226773 75732220 66726570 656d6172     sg": "superframe
   28ce8:	7365725f 7d227465 0000000a 7475227b     _reset"}....{"ut
   28cf8:	22656d69 6c25203a 6d222c75 3a226773     ime": %lu,"msg":
   28d08:	6e722220 6b705f67 6e695f67 7d227469      "rng_pkg_init"}
   28d18:	0000000a 5f676e72 75716572 00747365     ....rng_request.
   28d28:	5f676e72 7473696c 00006e65 706d6f63     rng_listen..comp
   28d38:	6574656c 0062635f 65707573 61726672     lete_cb.superfra
   28d48:	725f656d 74657365 00000000              me_reset....

00028d54 <g_stats_map_rng_stat_section>:
   28d54:	8d1c0014 00180002 00028d28 6b90001c     ........(......k
   28d64:	00200002 00026590 65d00024 00280002     .. ..e..$..e..(.
   28d74:	00026bb8 659c002c 00300002 000265e0     .k..,..e..0..e..
   28d84:	65a80034 00380002 00028d34 6cf8003c     4..e..8.4...<..l
   28d94:	00400002 00028d40 7475227b 22656d69     ..@.@...{"utime"
   28da4:	6c25203a 6d222c75 3a226773 63772220     : %lu,"msg": "wc
   28db4:	69745f73 6373656d 5f656c61 5f676b70     s_timescale_pkg_
   28dc4:	74696e69 000a7d22 00000000 a4f8e0b5     init"}..........
   28dd4:	3e20e374 6e5b0122 3deb0587 f1e2674e     t. >".[n...=Ng..
   28de4:	3db59e05 a4f8e0b5 3e30e374 b7320335     ...=....t.0>5.2.
   28df4:	4654adf4 6c756f63 6f6e2064 65672074     ..TFcould not ge
   28e04:	626d2074 25206675 00000a64 6c756f63     t mbuf %d...coul
   28e14:	6f6e2064 65672074 64682074 00000a72     d not get hdr...
   28e24:	6c756f63 6f6e2064 72632074 65746165     could not create
   28e34:	70616d20 0000000a 00000066 6c756f63      map....f...coul
   28e44:	6f6e2064 6c632074 2065736f 746e6f63     d not close cont
   28e54:	656e6961 00000a72 3a726576 2e642520     ainer...ver: %d.
   28e64:	252e6425 64252e64 0000000a 64616552     %d.%d.%d....Read
   28e74:	20676e69 73616c66 74612068 586c2520     ing flash at %lX
   28e84:	6425202c 74796220 72207365 64253d63     , %d bytes rc=%d
   28e94:	0000000a 6c756f43 6f6e2064 6f632074     ....Could not co
   28ea4:	7265766e 6c662074 20687361 61746164     nvert flash data
   28eb4:	206f7420 6675626d 0000000a 61746f62      to mbuf....bota
   28ec4:	00000000 706d6f63 64657475 73616820     ....computed has
   28ed4:	25203a68 00000a73 61746f62 6572203a     h: %s...bota: re
   28ee4:	646e6573 20676e69 0a646e65 00000000     sending end.....
   28ef4:	61746f62 7874203a 66206d69 73696e69     bota: txim finis
   28f04:	0a646568 00000000 72726567 2527203a     hed.....gerr: '%
   28f14:	00000a64 676d6e23 756f5f72 72203a74     d...#nmgr_out: r
   28f24:	64253d63 0000000a 63656863 0000006b     c=%d....check...
   28f34:	6d692020 25203a30 00000a64 6d692020       im0: %d...  im
   28f44:	25203a31 00000a64 253d6372 00000a64     1: %d...rc=%d...
   28f54:	6d697874 00000000 6d697874 6f6c7320     txim....txim slo
   28f64:	64252074 206f7420 78257830 0000000a     t %d to 0x%x....
   28f74:	73727874 00000074 73616362 746f5f74     txrst...bcast_ot
   28f84:	6f632061 6e616d6d 00007364 6568633c     a commands..<che
   28f94:	7c3e6b63 6978743c 00003e6d 5f61663c     ck>|<txim>..<fa_
   28fa4:	003e6469 6464613c 3c203e72 746f6c73     id>.<addr> <slot
   28fb4:	2c64695f 6f203020 3e312072 00000000     _id, 0 or 1>....
   28fc4:	6464613c 74203e72 65722078 20746573     <addr> tx reset 
   28fd4:	00646d63                                cmd.

00028fd8 <cmd_bota_help>:
   28fd8:	00028f7c 00028f90 00028fe4              |...........

00028fe4 <cmd_bota_param>:
   28fe4:	00028f2c 00028fa0 00028f54 00028fa8     ,.......T.......
   28ff4:	00028f74 00028fc4 00000000 00000000     t...............
   29004:	23232323 616d4920 63206567 69666e6f     #### Image confi
   29014:	64656d72 6372202c 0a64253d 00000000     rmed, rc=%d.....
   29024:	20525245 6d206f6e 000a6d65 20525245     ERR no mem..ERR 
   29034:	64616572 6961665f 2064656c 25206372     read_failed rc %
   29044:	666f2064 6c252066 000a786c 61746f62     d off %llx..bota
   29054:	256c203a 2528646c 2c29756c 646c256f     : l%ld(%lu),o%ld
   29064:	6c25732c 64252864 25652c29 25662c64     ,s%ld(%d),e%d,f%
   29074:	28786c6c 786c6c25 63652029 646c253a     llx(%llx) ec:%ld
   29084:	0000000a 20525245 6e6b6e55 206e776f     ....ERR Unknown 
   29094:	695f6166 64252864 00000a29 20232323     fa_id(%d)...### 
   290a4:	2077654e 6f6c7075 203a6461 252e6425     New upload: %d.%
   290b4:	64252e64 0a64252e 00000000 20232323     d.%d.%d.....### 
   290c4:	73617245 20676e69 73616c66 23232068     Erasing flash ##
   290d4:	00000a23 20232323 746e6f43 69756e69     #...### Continui
   290e4:	7520676e 616f6c70 666f2064 6425203a     ng upload of: %d
   290f4:	2e64252e 252e6425 00000a64 23232323     .%d.%d.%d...####
   29104:	6c6c4120 6e6f6420 63202c65 6b636568      All done, check
   29114:	20676e69 67616d69 00000a65 23232323     ing image...####
   29124:	73614820 202f2068 67616d69 61662065      Hash / image fa
   29134:	64656c69 0000000a 23232323 73614820     iled....#### Has
   29144:	6b6f2068 6573202c 65702074 203f6d72     h ok, set perm? 
   29154:	0a206425 00000000 23232323 6c695720     %d .....#### Wil
   29164:	6f62206c 6920746f 206f746e 2077656e     l boot into new 
   29174:	67616d69 74612065 78656e20 6f622074     image at next bo
   29184:	000a746f                                ot..

00029188 <bota_nmgr_handlers>:
   29188:	00000000 000227bd 00000000 00022821     .....'......!(..
   29198:	6c646f6d 6d5f676f 69707061 705f676e     modlog_mapping_p
   291a8:	006c6f6f                                ool.

000291ac <crc8_small_table>:
   291ac:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-

000291bc <K>:
   291bc:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   291cc:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   291dc:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   291ec:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   291fc:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   2920c:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   2921c:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   2922c:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   2923c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   2924c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   2925c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   2926c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   2927c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   2928c:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   2929c:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   292ac:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   292bc:	00000000                                ....

000292c0 <Zero>:
	...
   292cc:	80000000                                ....

/home/joel/Capstone/uwb-apps/bin/targets/nrng_tag/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 135880	   5792	  17672	 159344	  26e70	/home/joel/Capstone/uwb-apps/bin/targets/nrng_tag/app/apps/twr_nranges_tdma/twr_nranges_tdma.elf
